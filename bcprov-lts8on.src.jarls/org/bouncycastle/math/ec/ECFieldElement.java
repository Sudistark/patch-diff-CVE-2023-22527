package org.bouncycastle.math.ec;

import java.math.BigInteger;
import org.bouncycastle.util.BigIntegers;

public abstract class ECFieldElement implements ECConstants {
  public abstract BigInteger toBigInteger();
  
  public abstract String getFieldName();
  
  public abstract int getFieldSize();
  
  public abstract ECFieldElement add(ECFieldElement paramECFieldElement);
  
  public abstract ECFieldElement addOne();
  
  public abstract ECFieldElement subtract(ECFieldElement paramECFieldElement);
  
  public abstract ECFieldElement multiply(ECFieldElement paramECFieldElement);
  
  public abstract ECFieldElement divide(ECFieldElement paramECFieldElement);
  
  public abstract ECFieldElement negate();
  
  public abstract ECFieldElement square();
  
  public abstract ECFieldElement invert();
  
  public abstract ECFieldElement sqrt();
  
  public int bitLength() { return toBigInteger().bitLength(); }
  
  public boolean isOne() { return (bitLength() == 1); }
  
  public boolean isZero() { return (0 == toBigInteger().signum()); }
  
  public ECFieldElement multiplyMinusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y) { return multiply(b).subtract(x.multiply(y)); }
  
  public ECFieldElement multiplyPlusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y) { return multiply(b).add(x.multiply(y)); }
  
  public ECFieldElement squareMinusProduct(ECFieldElement x, ECFieldElement y) { return square().subtract(x.multiply(y)); }
  
  public ECFieldElement squarePlusProduct(ECFieldElement x, ECFieldElement y) { return square().add(x.multiply(y)); }
  
  public ECFieldElement squarePow(int pow) {
    ECFieldElement r = this;
    for (int i = 0; i < pow; i++)
      r = r.square(); 
    return r;
  }
  
  public boolean testBitZero() { return toBigInteger().testBit(0); }
  
  public String toString() { return toBigInteger().toString(16); }
  
  public byte[] getEncoded() { return BigIntegers.asUnsignedByteArray((getFieldSize() + 7) / 8, toBigInteger()); }
}
