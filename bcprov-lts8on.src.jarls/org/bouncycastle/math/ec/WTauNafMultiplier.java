package org.bouncycastle.math.ec;

import java.math.BigInteger;

public class WTauNafMultiplier extends AbstractECMultiplier {
  static final String PRECOMP_NAME = "bc_wtnaf";
  
  protected ECPoint multiplyPositive(ECPoint point, BigInteger k) {
    if (!(point instanceof ECPoint.AbstractF2m))
      throw new IllegalArgumentException("Only ECPoint.AbstractF2m can be used in WTauNafMultiplier"); 
    ECPoint.AbstractF2m p = (ECPoint.AbstractF2m)point;
    ECCurve.AbstractF2m curve = (ECCurve.AbstractF2m)p.getCurve();
    byte a = curve.getA().toBigInteger().byteValue();
    byte mu = Tnaf.getMu(a);
    ZTauElement rho = Tnaf.partModReduction(curve, k, a, mu, (byte)10);
    return multiplyWTnaf(p, rho, a, mu);
  }
  
  private ECPoint.AbstractF2m multiplyWTnaf(ECPoint.AbstractF2m p, ZTauElement lambda, byte a, byte mu) {
    ZTauElement[] alpha = (a == 0) ? Tnaf.alpha0 : Tnaf.alpha1;
    BigInteger tw = Tnaf.getTw(mu, 4);
    byte[] u = Tnaf.tauAdicWNaf(mu, lambda, 4, tw.intValue(), alpha);
    return multiplyFromWTnaf(p, u);
  }
  
  private static ECPoint.AbstractF2m multiplyFromWTnaf(ECPoint.AbstractF2m p, byte[] u) {
    ECCurve.AbstractF2m curve = (ECCurve.AbstractF2m)p.getCurve();
    byte a = curve.getA().toBigInteger().byteValue();
    WTauNafPreCompInfo preCompInfo = (WTauNafPreCompInfo)curve.precompute(p, "bc_wtnaf", new Object(p, a));
    ECPoint.AbstractF2m[] arrayOfAbstractF2m1 = preCompInfo.getPreComp();
    ECPoint.AbstractF2m[] arrayOfAbstractF2m2 = new ECPoint.AbstractF2m[arrayOfAbstractF2m1.length];
    for (int i = 0; i < arrayOfAbstractF2m1.length; i++)
      arrayOfAbstractF2m2[i] = (ECPoint.AbstractF2m)arrayOfAbstractF2m1[i].negate(); 
    ECPoint.AbstractF2m q = (ECPoint.AbstractF2m)p.getCurve().getInfinity();
    int tauCount = 0;
    for (int i = u.length - 1; i >= 0; i--) {
      tauCount++;
      int ui = u[i];
      if (ui != 0) {
        q = q.tauPow(tauCount);
        tauCount = 0;
        ECPoint.AbstractF2m abstractF2m = (ui > 0) ? arrayOfAbstractF2m1[ui >>> 1] : arrayOfAbstractF2m2[-ui >>> 1];
        q = (ECPoint.AbstractF2m)q.add(abstractF2m);
      } 
    } 
    if (tauCount > 0)
      q = q.tauPow(tauCount); 
    return q;
  }
}
