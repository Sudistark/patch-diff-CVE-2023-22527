package org.bouncycastle.jcajce.provider.drbg;

import java.security.AccessController;
import java.security.SecureRandom;
import org.bouncycastle.crypto.CryptoServicesRegistrar;
import org.bouncycastle.crypto.digests.SHA512Digest;
import org.bouncycastle.crypto.prng.EntropySource;
import org.bouncycastle.crypto.prng.EntropySourceProvider;
import org.bouncycastle.crypto.prng.SP800SecureRandomBuilder;
import org.bouncycastle.util.Arrays;
import org.bouncycastle.util.Pack;
import org.bouncycastle.util.Properties;
import org.bouncycastle.util.Strings;

public class DRBG {
  private static final String PREFIX = DRBG.class.getName();
  
  private static SecureRandom createBaseRandom(boolean isPredictionResistant) {
    if (Properties.getPropertyValue("org.bouncycastle.drbg.entropysource") != null) {
      EntropySourceProvider entropyProvider = createEntropySource();
      EntropySource initSource = entropyProvider.get(128);
      byte[] personalisationString = isPredictionResistant ? generateDefaultPersonalizationString(initSource.getEntropy()) : generateNonceIVPersonalizationString(initSource.getEntropy());
      return (new SP800SecureRandomBuilder(entropyProvider))
        .setPersonalizationString(personalisationString)
        .buildHash(new SHA512Digest(), initSource.getEntropy(), isPredictionResistant);
    } 
    EntropySourceProvider entropySourceProvider = CryptoServicesRegistrar.getDefaultEntropySourceProvider();
    EntropySource source = entropySourceProvider.get(256);
    byte[] personalisationString = isPredictionResistant ? generateDefaultPersonalizationString(source.getEntropy()) : generateNonceIVPersonalizationString(source.getEntropy());
    return (new SP800SecureRandomBuilder(new Object(entropySourceProvider)))






      
      .setPersonalizationString(personalisationString)
      .buildHash(new SHA512Digest(), source.getEntropy(), isPredictionResistant);
  }
  
  private static EntropySourceProvider createEntropySource() {
    sourceClass = Properties.getPropertyValue("org.bouncycastle.drbg.entropysource");
    return (EntropySourceProvider)AccessController.doPrivileged(new Object(sourceClass));
  }
  
  private static byte[] generateDefaultPersonalizationString(byte[] seed) {
    return Arrays.concatenate(Strings.toByteArray("Default"), seed, 
        Pack.longToBigEndian(Thread.currentThread().getId()), Pack.longToBigEndian(System.currentTimeMillis()));
  }
  
  private static byte[] generateNonceIVPersonalizationString(byte[] seed) {
    return Arrays.concatenate(Strings.toByteArray("Nonce"), seed, 
        Pack.longToLittleEndian(Thread.currentThread().getId()), Pack.longToLittleEndian(System.currentTimeMillis()));
  }
}
