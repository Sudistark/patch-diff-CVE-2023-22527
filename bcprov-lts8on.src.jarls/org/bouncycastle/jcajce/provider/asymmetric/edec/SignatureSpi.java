package org.bouncycastle.jcajce.provider.asymmetric.edec;

import java.security.AlgorithmParameters;
import java.security.InvalidKeyException;
import java.security.InvalidParameterException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.SignatureException;
import java.security.SignatureSpi;
import org.bouncycastle.crypto.CryptoException;
import org.bouncycastle.crypto.Signer;
import org.bouncycastle.crypto.params.AsymmetricKeyParameter;
import org.bouncycastle.crypto.signers.Ed25519Signer;
import org.bouncycastle.crypto.signers.Ed448Signer;

public class SignatureSpi extends SignatureSpi {
  private static final byte[] EMPTY_CONTEXT = new byte[0];
  
  private final String algorithm;
  
  private Signer signer;
  
  SignatureSpi(String algorithm) { this.algorithm = algorithm; }
  
  protected void engineInitVerify(PublicKey publicKey) throws InvalidKeyException {
    AsymmetricKeyParameter pub = getLwEdDSAKeyPublic(publicKey);
    if (pub instanceof org.bouncycastle.crypto.params.Ed25519PublicKeyParameters) {
      this.signer = getSigner("Ed25519");
    } else if (pub instanceof org.bouncycastle.crypto.params.Ed448PublicKeyParameters) {
      this.signer = getSigner("Ed448");
    } else {
      throw new IllegalStateException("unsupported public key type");
    } 
    this.signer.init(false, pub);
  }
  
  protected void engineInitSign(PrivateKey privateKey) throws InvalidKeyException {
    AsymmetricKeyParameter priv = getLwEdDSAKeyPrivate(privateKey);
    if (priv instanceof org.bouncycastle.crypto.params.Ed25519PrivateKeyParameters) {
      this.signer = getSigner("Ed25519");
    } else if (priv instanceof org.bouncycastle.crypto.params.Ed448PrivateKeyParameters) {
      this.signer = getSigner("Ed448");
    } else {
      throw new IllegalStateException("unsupported private key type");
    } 
    this.signer.init(true, priv);
  }
  
  private static AsymmetricKeyParameter getLwEdDSAKeyPrivate(PrivateKey key) throws InvalidKeyException { return EdECUtil.generatePrivateKeyParameter(key); }
  
  private static AsymmetricKeyParameter getLwEdDSAKeyPublic(PublicKey key) throws InvalidKeyException { return EdECUtil.generatePublicKeyParameter(key); }
  
  private Signer getSigner(String alg) throws InvalidKeyException {
    if (this.algorithm != null && !alg.equals(this.algorithm))
      throw new InvalidKeyException("inappropriate key for " + this.algorithm); 
    if (alg.equals("Ed448"))
      return new Ed448Signer(EMPTY_CONTEXT); 
    return new Ed25519Signer();
  }
  
  protected void engineUpdate(byte b) throws SignatureException { this.signer.update(b); }
  
  protected void engineUpdate(byte[] bytes, int off, int len) throws SignatureException { this.signer.update(bytes, off, len); }
  
  protected byte[] engineSign() throws SignatureException {
    try {
      return this.signer.generateSignature();
    } catch (CryptoException e) {
      throw new SignatureException(e.getMessage());
    } 
  }
  
  protected boolean engineVerify(byte[] signature) throws SignatureException { return this.signer.verifySignature(signature); }
  
  protected void engineSetParameter(String s, Object o) throws InvalidParameterException { throw new UnsupportedOperationException("engineSetParameter unsupported"); }
  
  protected Object engineGetParameter(String s) throws InvalidParameterException { throw new UnsupportedOperationException("engineGetParameter unsupported"); }
  
  protected AlgorithmParameters engineGetParameters() { return null; }
}
