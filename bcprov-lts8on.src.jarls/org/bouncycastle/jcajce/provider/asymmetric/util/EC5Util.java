package org.bouncycastle.jcajce.provider.asymmetric.util;

import java.math.BigInteger;
import java.security.spec.ECField;
import java.security.spec.ECFieldF2m;
import java.security.spec.ECFieldFp;
import java.security.spec.ECParameterSpec;
import java.security.spec.ECPoint;
import java.security.spec.EllipticCurve;
import java.util.Map;
import java.util.Set;
import org.bouncycastle.asn1.ASN1ObjectIdentifier;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.cryptopro.ECGOST3410NamedCurves;
import org.bouncycastle.asn1.cryptopro.GOST3410PublicKeyAlgParameters;
import org.bouncycastle.asn1.x9.X962Parameters;
import org.bouncycastle.asn1.x9.X9ECParameters;
import org.bouncycastle.crypto.params.ECDomainParameters;
import org.bouncycastle.jcajce.provider.config.ProviderConfiguration;
import org.bouncycastle.jce.ECGOST3410NamedCurveTable;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.bouncycastle.jce.spec.ECNamedCurveParameterSpec;
import org.bouncycastle.jce.spec.ECNamedCurveSpec;
import org.bouncycastle.jce.spec.ECParameterSpec;
import org.bouncycastle.math.ec.ECAlgorithms;
import org.bouncycastle.math.ec.ECCurve;
import org.bouncycastle.math.ec.ECPoint;
import org.bouncycastle.math.field.FiniteField;
import org.bouncycastle.math.field.Polynomial;
import org.bouncycastle.math.field.PolynomialExtensionField;
import org.bouncycastle.util.Arrays;

public class EC5Util {
  public static ECCurve getCurve(ProviderConfiguration configuration, X962Parameters params) {
    ECCurve curve;
    Set acceptableCurves = configuration.getAcceptableNamedCurves();
    if (params.isNamedCurve()) {
      ASN1ObjectIdentifier oid = ASN1ObjectIdentifier.getInstance(params.getParameters());
      if (acceptableCurves.isEmpty() || acceptableCurves.contains(oid)) {
        X9ECParameters ecP = ECUtil.getNamedCurveByOid(oid);
        if (ecP == null)
          ecP = (X9ECParameters)configuration.getAdditionalECParameters().get(oid); 
        curve = ecP.getCurve();
      } else {
        throw new IllegalStateException("named curve not acceptable");
      } 
    } else if (params.isImplicitlyCA()) {
      curve = configuration.getEcImplicitlyCa().getCurve();
    } else {
      ASN1Sequence pSeq = ASN1Sequence.getInstance(params.getParameters());
      if (acceptableCurves.isEmpty()) {
        if (pSeq.size() > 3) {
          X9ECParameters ecP = X9ECParameters.getInstance(pSeq);
          curve = ecP.getCurve();
        } else {
          ASN1ObjectIdentifier gostCurve = ASN1ObjectIdentifier.getInstance(pSeq.getObjectAt(0));
          curve = ECGOST3410NamedCurves.getByOIDX9(gostCurve).getCurve();
        } 
      } else {
        throw new IllegalStateException("encoded parameters not acceptable");
      } 
    } 
    return curve;
  }
  
  public static ECDomainParameters getDomainParameters(ProviderConfiguration configuration, ECParameterSpec params) {
    ECDomainParameters domainParameters;
    if (params == null) {
      ECParameterSpec iSpec = configuration.getEcImplicitlyCa();
      domainParameters = new ECDomainParameters(iSpec.getCurve(), iSpec.getG(), iSpec.getN(), iSpec.getH(), iSpec.getSeed());
    } else {
      domainParameters = ECUtil.getDomainParameters(configuration, convertSpec(params));
    } 
    return domainParameters;
  }
  
  public static ECParameterSpec convertToSpec(X962Parameters params, ECCurve curve) {
    ECNamedCurveSpec eCNamedCurveSpec;
    if (params.isNamedCurve()) {
      ASN1ObjectIdentifier oid = (ASN1ObjectIdentifier)params.getParameters();
      X9ECParameters ecP = ECUtil.getNamedCurveByOid(oid);
      if (ecP == null) {
        Map additionalECParameters = BouncyCastleProvider.CONFIGURATION.getAdditionalECParameters();
        if (!additionalECParameters.isEmpty())
          ecP = (X9ECParameters)additionalECParameters.get(oid); 
      } 
      EllipticCurve ellipticCurve = convertCurve(curve, ecP.getSeed());
      eCNamedCurveSpec = new ECNamedCurveSpec(ECUtil.getCurveName(oid), ellipticCurve, convertPoint(ecP.getG()), ecP.getN(), ecP.getH());
    } else if (params.isImplicitlyCA()) {
      eCNamedCurveSpec = null;
    } else {
      ASN1Sequence pSeq = ASN1Sequence.getInstance(params.getParameters());
      if (pSeq.size() > 3) {
        X9ECParameters ecP = X9ECParameters.getInstance(pSeq);
        EllipticCurve ellipticCurve = convertCurve(curve, ecP.getSeed());
        if (ecP.getH() != null) {
          eCNamedCurveSpec = new ECParameterSpec(ellipticCurve, convertPoint(ecP.getG()), ecP.getN(), ecP.getH().intValue());
        } else {
          eCNamedCurveSpec = new ECParameterSpec(ellipticCurve, convertPoint(ecP.getG()), ecP.getN(), 1);
        } 
      } else {
        GOST3410PublicKeyAlgParameters gostParams = GOST3410PublicKeyAlgParameters.getInstance(pSeq);
        ECNamedCurveParameterSpec spec = ECGOST3410NamedCurveTable.getParameterSpec(ECGOST3410NamedCurves.getName(gostParams
              .getPublicKeyParamSet()));
        curve = spec.getCurve();
        EllipticCurve ellipticCurve = convertCurve(curve, spec.getSeed());
        eCNamedCurveSpec = new ECNamedCurveSpec(ECGOST3410NamedCurves.getName(gostParams.getPublicKeyParamSet()), ellipticCurve, convertPoint(spec.getG()), spec.getN(), spec.getH());
      } 
    } 
    return eCNamedCurveSpec;
  }
  
  public static ECParameterSpec convertToSpec(X9ECParameters domainParameters) {
    return new ECParameterSpec(
        convertCurve(domainParameters.getCurve(), null), 
        convertPoint(domainParameters.getG()), domainParameters
        .getN(), domainParameters
        .getH().intValue());
  }
  
  public static ECParameterSpec convertToSpec(ECDomainParameters domainParameters) {
    return new ECParameterSpec(
        convertCurve(domainParameters.getCurve(), null), 
        convertPoint(domainParameters.getG()), domainParameters
        .getN(), domainParameters
        .getH().intValue());
  }
  
  public static EllipticCurve convertCurve(ECCurve curve, byte[] seed) {
    ECField field = convertField(curve.getField());
    BigInteger a = curve.getA().toBigInteger(), b = curve.getB().toBigInteger();
    return new EllipticCurve(field, a, b, null);
  }
  
  public static ECCurve convertCurve(EllipticCurve ec) {
    ECField field = ec.getField();
    BigInteger a = ec.getA();
    BigInteger b = ec.getB();
    if (field instanceof ECFieldFp)
      return CustomCurves.substitute(new ECCurve.Fp(((ECFieldFp)field).getP(), a, b, null, null)); 
    ECFieldF2m fieldF2m = (ECFieldF2m)field;
    int m = fieldF2m.getM();
    int[] ks = ECUtil.convertMidTerms(fieldF2m.getMidTermsOfReductionPolynomial());
    return new ECCurve.F2m(m, ks[0], ks[1], ks[2], a, b, null, null);
  }
  
  public static ECField convertField(FiniteField field) {
    if (ECAlgorithms.isFpField(field))
      return new ECFieldFp(field.getCharacteristic()); 
    Polynomial poly = ((PolynomialExtensionField)field).getMinimalPolynomial();
    int[] exponents = poly.getExponentsPresent();
    int[] ks = Arrays.reverseInPlace(Arrays.copyOfRange(exponents, 1, exponents.length - 1));
    return new ECFieldF2m(poly.getDegree(), ks);
  }
  
  public static ECParameterSpec convertSpec(EllipticCurve ellipticCurve, ECParameterSpec spec) {
    ECPoint g = convertPoint(spec.getG());
    if (spec instanceof ECNamedCurveParameterSpec) {
      String name = ((ECNamedCurveParameterSpec)spec).getName();
      return new ECNamedCurveSpec(name, ellipticCurve, g, spec.getN(), spec.getH());
    } 
    return new ECParameterSpec(ellipticCurve, g, spec.getN(), spec.getH().intValue());
  }
  
  public static ECParameterSpec convertSpec(ECParameterSpec ecSpec) {
    ECCurve curve = convertCurve(ecSpec.getCurve());
    ECPoint g = convertPoint(curve, ecSpec.getGenerator());
    BigInteger n = ecSpec.getOrder();
    BigInteger h = BigInteger.valueOf(ecSpec.getCofactor());
    byte[] seed = ecSpec.getCurve().getSeed();
    if (ecSpec instanceof ECNamedCurveSpec)
      return new ECNamedCurveParameterSpec(((ECNamedCurveSpec)ecSpec).getName(), curve, g, n, h, seed); 
    return new ECParameterSpec(curve, g, n, h, seed);
  }
  
  public static ECPoint convertPoint(ECParameterSpec ecSpec, ECPoint point) { return convertPoint(convertCurve(ecSpec.getCurve()), point); }
  
  public static ECPoint convertPoint(ECCurve curve, ECPoint point) { return curve.createPoint(point.getAffineX(), point.getAffineY()); }
  
  public static ECPoint convertPoint(ECPoint point) {
    point = point.normalize();
    return new ECPoint(point
        .getAffineXCoord().toBigInteger(), point
        .getAffineYCoord().toBigInteger());
  }
}
