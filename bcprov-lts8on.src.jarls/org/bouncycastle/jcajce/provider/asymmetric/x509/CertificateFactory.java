package org.bouncycastle.jcajce.provider.asymmetric.x509;

import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.security.cert.CRL;
import java.security.cert.CRLException;
import java.security.cert.CertPath;
import java.security.cert.Certificate;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactorySpi;
import java.security.cert.CertificateParsingException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import org.bouncycastle.asn1.ASN1InputStream;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.ASN1Set;
import org.bouncycastle.asn1.ASN1TaggedObject;
import org.bouncycastle.asn1.pkcs.PKCSObjectIdentifiers;
import org.bouncycastle.asn1.pkcs.SignedData;
import org.bouncycastle.asn1.x509.Certificate;
import org.bouncycastle.asn1.x509.CertificateList;
import org.bouncycastle.jcajce.util.BCJcaJceHelper;
import org.bouncycastle.jcajce.util.JcaJceHelper;
import org.bouncycastle.util.io.Streams;

public class CertificateFactory extends CertificateFactorySpi {
  private final JcaJceHelper bcHelper = new BCJcaJceHelper();
  
  private static final PEMUtil PEM_CERT_PARSER = new PEMUtil("CERTIFICATE");
  
  private static final PEMUtil PEM_CRL_PARSER = new PEMUtil("CRL");
  
  private static final PEMUtil PEM_PKCS7_PARSER = new PEMUtil("PKCS7");
  
  private ASN1Set sData = null;
  
  private int sDataObjectCount = 0;
  
  private InputStream currentStream = null;
  
  private ASN1Set sCrlData = null;
  
  private int sCrlDataObjectCount = 0;
  
  private InputStream currentCrlStream = null;
  
  private Certificate readDERCertificate(ASN1InputStream dIn) throws IOException, CertificateParsingException { return getCertificate(ASN1Sequence.getInstance(dIn.readObject())); }
  
  private Certificate readPEMCertificate(InputStream in, boolean isFirst) throws IOException, CertificateParsingException { return getCertificate(PEM_CERT_PARSER.readPEMObject(in, isFirst)); }
  
  private Certificate getCertificate(ASN1Sequence seq) throws CertificateParsingException {
    if (seq == null)
      return null; 
    if (seq.size() > 1 && seq
      .getObjectAt(0) instanceof org.bouncycastle.asn1.ASN1ObjectIdentifier)
      if (seq.getObjectAt(0).equals(PKCSObjectIdentifiers.signedData)) {
        this
          .sData = SignedData.getInstance(ASN1Sequence.getInstance((ASN1TaggedObject)seq.getObjectAt(1), true)).getCertificates();
        return getCertificate();
      }  
    return new X509CertificateObject(this.bcHelper, 
        Certificate.getInstance(seq));
  }
  
  private Certificate getCertificate() throws CertificateParsingException {
    if (this.sData != null)
      while (this.sDataObjectCount < this.sData.size()) {
        Object obj = this.sData.getObjectAt(this.sDataObjectCount++);
        if (obj instanceof ASN1Sequence)
          return new X509CertificateObject(this.bcHelper, 
              Certificate.getInstance(obj)); 
      }  
    return null;
  }
  
  protected CRL createCRL(CertificateList c) throws CRLException { return new X509CRLObject(this.bcHelper, c); }
  
  private CRL readPEMCRL(InputStream in, boolean isFirst) throws IOException, CRLException { return getCRL(PEM_CRL_PARSER.readPEMObject(in, isFirst)); }
  
  private CRL readDERCRL(ASN1InputStream aIn) throws IOException, CRLException { return getCRL(ASN1Sequence.getInstance(aIn.readObject())); }
  
  private CRL getCRL(ASN1Sequence seq) throws CRLException {
    if (seq == null)
      return null; 
    if (seq.size() > 1 && seq
      .getObjectAt(0) instanceof org.bouncycastle.asn1.ASN1ObjectIdentifier)
      if (seq.getObjectAt(0).equals(PKCSObjectIdentifiers.signedData)) {
        this
          .sCrlData = SignedData.getInstance(ASN1Sequence.getInstance((ASN1TaggedObject)seq.getObjectAt(1), true)).getCRLs();
        return getCRL();
      }  
    return createCRL(
        CertificateList.getInstance(seq));
  }
  
  private CRL getCRL() throws CRLException {
    if (this.sCrlData == null || this.sCrlDataObjectCount >= this.sCrlData.size())
      return null; 
    return createCRL(
        CertificateList.getInstance(this.sCrlData
          .getObjectAt(this.sCrlDataObjectCount++)));
  }
  
  public Certificate engineGenerateCertificate(InputStream in) throws CertificateException { return doGenerateCertificate(in, true); }
  
  private Certificate doGenerateCertificate(InputStream in, boolean isFirst) throws IOException, CertificateParsingException {
    if (this.currentStream == null) {
      this.currentStream = in;
      this.sData = null;
      this.sDataObjectCount = 0;
    } else if (this.currentStream != in) {
      this.currentStream = in;
      this.sData = null;
      this.sDataObjectCount = 0;
    } 
    try {
      InputStream pis;
      if (this.sData != null) {
        if (this.sDataObjectCount != this.sData.size())
          return getCertificate(); 
        this.sData = null;
        this.sDataObjectCount = 0;
        return null;
      } 
      if (in.markSupported()) {
        pis = in;
      } else {
        pis = new ByteArrayInputStream(Streams.readAll(in));
      } 
      pis.mark(1);
      int tag = pis.read();
      if (tag == -1)
        return null; 
      pis.reset();
      if (tag != 48)
        return readPEMCertificate(pis, isFirst); 
      return readDERCertificate(new ASN1InputStream(pis));
    } catch (Exception e) {
      throw new ExCertificateException("parsing issue: " + e.getMessage(), e);
    } 
  }
  
  public Collection engineGenerateCertificates(InputStream inStream) throws CertificateException {
    BufferedInputStream in = new BufferedInputStream(inStream);
    List certs = new ArrayList();
    Certificate cert;
    while ((cert = doGenerateCertificate(in, certs.isEmpty())) != null)
      certs.add(cert); 
    return certs;
  }
  
  public CRL engineGenerateCRL(InputStream in) throws CRLException { return doGenerateCRL(in, true); }
  
  private CRL doGenerateCRL(InputStream in, boolean isFirst) throws IOException, CRLException {
    if (this.currentCrlStream == null) {
      this.currentCrlStream = in;
      this.sCrlData = null;
      this.sCrlDataObjectCount = 0;
    } else if (this.currentCrlStream != in) {
      this.currentCrlStream = in;
      this.sCrlData = null;
      this.sCrlDataObjectCount = 0;
    } 
    try {
      InputStream pis;
      if (this.sCrlData != null) {
        if (this.sCrlDataObjectCount != this.sCrlData.size())
          return getCRL(); 
        this.sCrlData = null;
        this.sCrlDataObjectCount = 0;
        return null;
      } 
      if (in.markSupported()) {
        pis = in;
      } else {
        pis = new ByteArrayInputStream(Streams.readAll(in));
      } 
      pis.mark(1);
      int tag = pis.read();
      if (tag == -1)
        return null; 
      pis.reset();
      if (tag != 48)
        return readPEMCRL(pis, isFirst); 
      return readDERCRL(new ASN1InputStream(pis, true));
    } catch (CRLException e) {
      throw e;
    } catch (Exception e) {
      throw new CRLException(e.toString());
    } 
  }
  
  public Collection engineGenerateCRLs(InputStream inStream) throws CertificateException {
    List crls = new ArrayList();
    BufferedInputStream in = new BufferedInputStream(inStream);
    CRL crl;
    while ((crl = doGenerateCRL(in, crls.isEmpty())) != null)
      crls.add(crl); 
    return crls;
  }
  
  public Iterator engineGetCertPathEncodings() { return PKIXCertPath.certPathEncodings.iterator(); }
  
  public CertPath engineGenerateCertPath(InputStream inStream) throws CertificateException { return engineGenerateCertPath(inStream, "PkiPath"); }
  
  public CertPath engineGenerateCertPath(InputStream inStream, String encoding) throws CertificateException { return new PKIXCertPath(inStream, encoding); }
  
  public CertPath engineGenerateCertPath(List certificates) throws CertificateException {
    Iterator iter = certificates.iterator();
    while (iter.hasNext()) {
      Object obj = iter.next();
      if (obj != null)
        if (!(obj instanceof java.security.cert.X509Certificate))
          throw new CertificateException("list contains non X509Certificate object while creating CertPath\n" + obj.toString());  
    } 
    return new PKIXCertPath(certificates);
  }
}
