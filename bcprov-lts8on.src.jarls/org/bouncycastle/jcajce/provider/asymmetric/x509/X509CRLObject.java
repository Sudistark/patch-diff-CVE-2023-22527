package org.bouncycastle.jcajce.provider.asymmetric.x509;

import java.io.IOException;
import java.security.cert.CRLException;
import org.bouncycastle.asn1.ASN1BitString;
import org.bouncycastle.asn1.ASN1Encodable;
import org.bouncycastle.asn1.x509.CertificateList;
import org.bouncycastle.asn1.x509.Extension;
import org.bouncycastle.asn1.x509.IssuingDistributionPoint;
import org.bouncycastle.jcajce.util.JcaJceHelper;
import org.bouncycastle.util.Arrays;

class X509CRLObject extends X509CRLImpl {
  private final Object cacheLock = new Object();
  
  private X509CRLInternal internalCRLValue;
  
  X509CRLObject(JcaJceHelper bcHelper, CertificateList c) throws CRLException { super(bcHelper, c, createSigAlgName(c), createSigAlgParams(c), isIndirectCRL(c)); }
  
  public byte[] getEncoded() throws CRLException { return Arrays.clone(getInternalCRL().getEncoded()); }
  
  public boolean equals(Object other) {
    if (this == other)
      return true; 
    if (other instanceof X509CRLObject) {
      X509CRLObject otherBC = (X509CRLObject)other;
      if (this.hashValueSet && otherBC.hashValueSet) {
        if (this.hashValue != otherBC.hashValue)
          return false; 
      } else if (null == this.internalCRLValue || null == otherBC.internalCRLValue) {
        ASN1BitString signature = this.c.getSignature();
        if (null != signature && !signature.equals(otherBC.c.getSignature()))
          return false; 
      } 
      return getInternalCRL().equals(otherBC.getInternalCRL());
    } 
    return getInternalCRL().equals(other);
  }
  
  public int hashCode() {
    if (!this.hashValueSet) {
      this.hashValue = getInternalCRL().hashCode();
      this.hashValueSet = true;
    } 
    return this.hashValue;
  }
  
  private X509CRLInternal getInternalCRL() {
    synchronized (this.cacheLock) {
      if (null != this.internalCRLValue)
        return this.internalCRLValue; 
    } 
    byte[] encoding = null;
    X509CRLException x509CRLException = null;
    try {
      encoding = this.c.getEncoded("DER");
    } catch (IOException e) {
      x509CRLException = new X509CRLException(e);
    } 
    X509CRLInternal temp = new X509CRLInternal(this.bcHelper, this.c, this.sigAlgName, this.sigAlgParams, this.isIndirect, encoding, x509CRLException);
    synchronized (this.cacheLock) {
      if (null == this.internalCRLValue)
        this.internalCRLValue = temp; 
      return this.internalCRLValue;
    } 
  }
  
  private static String createSigAlgName(CertificateList c) throws CRLException {
    try {
      return X509SignatureUtil.getSignatureName(c.getSignatureAlgorithm());
    } catch (Exception e) {
      throw new X509CRLException("CRL contents invalid: " + e.getMessage(), e);
    } 
  }
  
  private static byte[] createSigAlgParams(CertificateList c) throws CRLException {
    try {
      ASN1Encodable parameters = c.getSignatureAlgorithm().getParameters();
      if (null == parameters)
        return null; 
      return parameters.toASN1Primitive().getEncoded("DER");
    } catch (Exception e) {
      throw new CRLException("CRL contents invalid: " + e);
    } 
  }
  
  private static boolean isIndirectCRL(CertificateList c) throws CRLException {
    try {
      byte[] extOctets = getExtensionOctets(c, Extension.issuingDistributionPoint.getId());
      if (null == extOctets)
        return false; 
      return IssuingDistributionPoint.getInstance(extOctets).isIndirectCRL();
    } catch (Exception e) {
      throw new ExtCRLException("Exception reading IssuingDistributionPoint", e);
    } 
  }
}
