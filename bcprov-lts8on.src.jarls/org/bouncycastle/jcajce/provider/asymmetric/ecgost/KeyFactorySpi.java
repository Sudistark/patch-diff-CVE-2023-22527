package org.bouncycastle.jcajce.provider.asymmetric.ecgost;

import java.io.IOException;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.interfaces.ECPrivateKey;
import java.security.interfaces.ECPublicKey;
import java.security.spec.ECPrivateKeySpec;
import java.security.spec.ECPublicKeySpec;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.KeySpec;
import org.bouncycastle.asn1.ASN1ObjectIdentifier;
import org.bouncycastle.asn1.cryptopro.CryptoProObjectIdentifiers;
import org.bouncycastle.asn1.pkcs.PrivateKeyInfo;
import org.bouncycastle.asn1.x509.SubjectPublicKeyInfo;
import org.bouncycastle.jcajce.provider.asymmetric.util.BaseKeyFactorySpi;
import org.bouncycastle.jcajce.provider.asymmetric.util.EC5Util;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.bouncycastle.jce.spec.ECParameterSpec;
import org.bouncycastle.jce.spec.ECPrivateKeySpec;
import org.bouncycastle.jce.spec.ECPublicKeySpec;

public class KeyFactorySpi extends BaseKeyFactorySpi {
  protected KeySpec engineGetKeySpec(Key key, Class spec) throws InvalidKeySpecException {
    if (spec.isAssignableFrom(ECPublicKeySpec.class) && key instanceof ECPublicKey) {
      ECPublicKey k = (ECPublicKey)key;
      if (k.getParams() != null)
        return new ECPublicKeySpec(k.getW(), k.getParams()); 
      ECParameterSpec implicitSpec = BouncyCastleProvider.CONFIGURATION.getEcImplicitlyCa();
      return new ECPublicKeySpec(k.getW(), EC5Util.convertSpec(EC5Util.convertCurve(implicitSpec.getCurve(), implicitSpec.getSeed()), implicitSpec));
    } 
    if (spec.isAssignableFrom(ECPrivateKeySpec.class) && key instanceof ECPrivateKey) {
      ECPrivateKey k = (ECPrivateKey)key;
      if (k.getParams() != null)
        return new ECPrivateKeySpec(k.getS(), k.getParams()); 
      ECParameterSpec implicitSpec = BouncyCastleProvider.CONFIGURATION.getEcImplicitlyCa();
      return new ECPrivateKeySpec(k.getS(), EC5Util.convertSpec(EC5Util.convertCurve(implicitSpec.getCurve(), implicitSpec.getSeed()), implicitSpec));
    } 
    if (spec.isAssignableFrom(ECPublicKeySpec.class) && key instanceof ECPublicKey) {
      ECPublicKey k = (ECPublicKey)key;
      if (k.getParams() != null)
        return new ECPublicKeySpec(EC5Util.convertPoint(k.getParams(), k.getW()), EC5Util.convertSpec(k.getParams())); 
      ECParameterSpec implicitSpec = BouncyCastleProvider.CONFIGURATION.getEcImplicitlyCa();
      return new ECPublicKeySpec(EC5Util.convertPoint(k.getParams(), k.getW()), implicitSpec);
    } 
    if (spec.isAssignableFrom(ECPrivateKeySpec.class) && key instanceof ECPrivateKey) {
      ECPrivateKey k = (ECPrivateKey)key;
      if (k.getParams() != null)
        return new ECPrivateKeySpec(k.getS(), EC5Util.convertSpec(k.getParams())); 
      ECParameterSpec implicitSpec = BouncyCastleProvider.CONFIGURATION.getEcImplicitlyCa();
      return new ECPrivateKeySpec(k.getS(), implicitSpec);
    } 
    return super.engineGetKeySpec(key, spec);
  }
  
  protected Key engineTranslateKey(Key key) throws InvalidKeyException { throw new InvalidKeyException("key type unknown"); }
  
  protected PrivateKey engineGeneratePrivate(KeySpec keySpec) throws InvalidKeySpecException {
    if (keySpec instanceof ECPrivateKeySpec)
      return new BCECGOST3410PrivateKey((ECPrivateKeySpec)keySpec); 
    if (keySpec instanceof ECPrivateKeySpec)
      return new BCECGOST3410PrivateKey((ECPrivateKeySpec)keySpec); 
    return super.engineGeneratePrivate(keySpec);
  }
  
  protected PublicKey engineGeneratePublic(KeySpec keySpec) throws InvalidKeySpecException {
    if (keySpec instanceof ECPublicKeySpec)
      return new BCECGOST3410PublicKey((ECPublicKeySpec)keySpec, BouncyCastleProvider.CONFIGURATION); 
    if (keySpec instanceof ECPublicKeySpec)
      return new BCECGOST3410PublicKey((ECPublicKeySpec)keySpec); 
    return super.engineGeneratePublic(keySpec);
  }
  
  public PrivateKey generatePrivate(PrivateKeyInfo keyInfo) throws IOException {
    ASN1ObjectIdentifier algOid = keyInfo.getPrivateKeyAlgorithm().getAlgorithm();
    if (algOid.equals(CryptoProObjectIdentifiers.gostR3410_2001))
      return new BCECGOST3410PrivateKey(keyInfo); 
    if (algOid.equals(CryptoProObjectIdentifiers.gostR3410_2001DH))
      return new BCECGOST3410PrivateKey(keyInfo); 
    if (algOid.equals(CryptoProObjectIdentifiers.gostR3410_2001_CryptoPro_ESDH))
      return new BCECGOST3410PrivateKey(keyInfo); 
    throw new IOException("algorithm identifier " + algOid + " in key not recognised");
  }
  
  public PublicKey generatePublic(SubjectPublicKeyInfo keyInfo) throws IOException {
    ASN1ObjectIdentifier algOid = keyInfo.getAlgorithm().getAlgorithm();
    if (algOid.equals(CryptoProObjectIdentifiers.gostR3410_2001))
      return new BCECGOST3410PublicKey(keyInfo); 
    if (algOid.equals(CryptoProObjectIdentifiers.gostR3410_2001DH))
      return new BCECGOST3410PublicKey(keyInfo); 
    if (algOid.equals(CryptoProObjectIdentifiers.gostR3410_2001_CryptoPro_ESDH))
      return new BCECGOST3410PublicKey(keyInfo); 
    throw new IOException("algorithm identifier " + algOid + " in key not recognised");
  }
}
