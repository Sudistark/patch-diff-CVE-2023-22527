package org.bouncycastle.jcajce.provider.symmetric.util;

import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidParameterException;
import java.security.SecureRandom;
import java.security.spec.AlgorithmParameterSpec;
import javax.crypto.KeyGeneratorSpi;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import org.bouncycastle.crypto.CipherKeyGenerator;
import org.bouncycastle.crypto.CryptoServicesRegistrar;
import org.bouncycastle.crypto.KeyGenerationParameters;

public class BaseKeyGenerator extends KeyGeneratorSpi {
  protected String algName;
  
  protected int keySize;
  
  protected int defaultKeySize;
  
  protected CipherKeyGenerator engine;
  
  protected boolean uninitialised;
  
  protected BaseKeyGenerator(String algName, int defaultKeySize, CipherKeyGenerator engine) {
    this.uninitialised = true;
    this.algName = algName;
    this.keySize = this.defaultKeySize = defaultKeySize;
    this.engine = engine;
  }
  
  protected void engineInit(AlgorithmParameterSpec params, SecureRandom random) throws InvalidAlgorithmParameterException { throw new InvalidAlgorithmParameterException("Not Implemented"); }
  
  protected void engineInit(SecureRandom random) {
    if (random != null) {
      this.engine.init(new KeyGenerationParameters(random, this.defaultKeySize));
      this.uninitialised = false;
    } 
  }
  
  protected void engineInit(int keySize, SecureRandom random) {
    try {
      if (random == null)
        random = CryptoServicesRegistrar.getSecureRandom(); 
      this.engine.init(new KeyGenerationParameters(random, keySize));
      this.uninitialised = false;
    } catch (IllegalArgumentException e) {
      throw new InvalidParameterException(e.getMessage());
    } 
  }
  
  protected SecretKey engineGenerateKey() {
    if (this.uninitialised) {
      this.engine.init(new KeyGenerationParameters(CryptoServicesRegistrar.getSecureRandom(), this.defaultKeySize));
      this.uninitialised = false;
    } 
    return new SecretKeySpec(this.engine.generateKey(), this.algName);
  }
}
