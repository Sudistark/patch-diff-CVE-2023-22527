package org.bouncycastle.crypto.modes;

import org.bouncycastle.crypto.BlockCipher;
import org.bouncycastle.crypto.CipherParameters;
import org.bouncycastle.crypto.DataLengthException;
import org.bouncycastle.crypto.NativeBlockCipherProvider;
import org.bouncycastle.crypto.StreamBlockCipher;
import org.bouncycastle.crypto.params.ParametersWithIV;
import org.bouncycastle.util.Arrays;

public class CFBBlockCipher extends StreamBlockCipher implements CFBModeCipher {
  private byte[] IV;
  
  private byte[] cfbV;
  
  private byte[] cfbOutV;
  
  private byte[] inBuf;
  
  private int blockSize;
  
  private BlockCipher cipher = null;
  
  private boolean encrypting;
  
  private int byteCount;
  
  public static CFBModeCipher newInstance(BlockCipher cipher, int bitSize) {
    if (cipher instanceof NativeBlockCipherProvider)
      return ((NativeBlockCipherProvider)cipher).createCFB(bitSize); 
    return new CFBBlockCipher(cipher, bitSize);
  }
  
  public CFBBlockCipher(BlockCipher cipher, int bitBlockSize) {
    super(cipher);
    if (bitBlockSize > cipher.getBlockSize() * 8 || bitBlockSize < 8 || bitBlockSize % 8 != 0)
      throw new IllegalArgumentException("CFB" + bitBlockSize + " not supported"); 
    this.cipher = cipher;
    this.blockSize = bitBlockSize / 8;
    this.IV = new byte[cipher.getBlockSize()];
    this.cfbV = new byte[cipher.getBlockSize()];
    this.cfbOutV = new byte[cipher.getBlockSize()];
    this.inBuf = new byte[this.blockSize];
  }
  
  public void init(boolean encrypting, CipherParameters params) throws IllegalArgumentException {
    this.encrypting = encrypting;
    if (params instanceof ParametersWithIV) {
      ParametersWithIV ivParam = (ParametersWithIV)params;
      byte[] iv = ivParam.getIV();
      if (iv.length < this.IV.length) {
        System.arraycopy(iv, 0, this.IV, this.IV.length - iv.length, iv.length);
        for (int i = 0; i < this.IV.length - iv.length; i++)
          this.IV[i] = 0; 
      } else {
        System.arraycopy(iv, 0, this.IV, 0, this.IV.length);
      } 
      reset();
      if (ivParam.getParameters() != null)
        this.cipher.init(true, ivParam.getParameters()); 
    } else {
      reset();
      if (params != null)
        this.cipher.init(true, params); 
    } 
  }
  
  public String getAlgorithmName() { return this.cipher.getAlgorithmName() + "/CFB" + (this.blockSize * 8); }
  
  protected byte calculateByte(byte in) throws DataLengthException, IllegalStateException { return this.encrypting ? encryptByte(in) : decryptByte(in); }
  
  private byte encryptByte(byte in) throws DataLengthException, IllegalStateException {
    if (this.byteCount == 0)
      this.cipher.processBlock(this.cfbV, 0, this.cfbOutV, 0); 
    byte rv = (byte)(this.cfbOutV[this.byteCount] ^ in);
    this.inBuf[this.byteCount++] = rv;
    if (this.byteCount == this.blockSize) {
      this.byteCount = 0;
      System.arraycopy(this.cfbV, this.blockSize, this.cfbV, 0, this.cfbV.length - this.blockSize);
      System.arraycopy(this.inBuf, 0, this.cfbV, this.cfbV.length - this.blockSize, this.blockSize);
    } 
    return rv;
  }
  
  private byte decryptByte(byte in) throws DataLengthException, IllegalStateException {
    if (this.byteCount == 0)
      this.cipher.processBlock(this.cfbV, 0, this.cfbOutV, 0); 
    this.inBuf[this.byteCount] = in;
    byte rv = (byte)(this.cfbOutV[this.byteCount++] ^ in);
    if (this.byteCount == this.blockSize) {
      this.byteCount = 0;
      System.arraycopy(this.cfbV, this.blockSize, this.cfbV, 0, this.cfbV.length - this.blockSize);
      System.arraycopy(this.inBuf, 0, this.cfbV, this.cfbV.length - this.blockSize, this.blockSize);
    } 
    return rv;
  }
  
  public int getBlockSize() { return this.blockSize; }
  
  public int processBlock(byte[] in, int inOff, byte[] out, int outOff) throws DataLengthException, IllegalStateException {
    processBytes(in, inOff, this.blockSize, out, outOff);
    return this.blockSize;
  }
  
  public int encryptBlock(byte[] in, int inOff, byte[] out, int outOff) throws DataLengthException, IllegalStateException {
    processBytes(in, inOff, this.blockSize, out, outOff);
    return this.blockSize;
  }
  
  public int decryptBlock(byte[] in, int inOff, byte[] out, int outOff) throws DataLengthException, IllegalStateException {
    processBytes(in, inOff, this.blockSize, out, outOff);
    return this.blockSize;
  }
  
  public byte[] getCurrentIV() { return Arrays.clone(this.cfbV); }
  
  public void reset() {
    System.arraycopy(this.IV, 0, this.cfbV, 0, this.IV.length);
    Arrays.fill(this.inBuf, (byte)0);
    this.byteCount = 0;
    this.cipher.reset();
  }
  
  public String toString() { return "CFB[Java](" + this.cipher.toString() + ")"; }
}
