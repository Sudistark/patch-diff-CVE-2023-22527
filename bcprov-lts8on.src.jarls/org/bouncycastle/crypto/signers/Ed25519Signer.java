package org.bouncycastle.crypto.signers;

import org.bouncycastle.crypto.CipherParameters;
import org.bouncycastle.crypto.CryptoServicesRegistrar;
import org.bouncycastle.crypto.Signer;
import org.bouncycastle.crypto.params.Ed25519PrivateKeyParameters;
import org.bouncycastle.crypto.params.Ed25519PublicKeyParameters;

public class Ed25519Signer implements Signer {
  private final Buffer buffer = new Buffer(null);
  
  private boolean forSigning;
  
  private Ed25519PrivateKeyParameters privateKey;
  
  private Ed25519PublicKeyParameters publicKey;
  
  public void init(boolean forSigning, CipherParameters parameters) {
    this.forSigning = forSigning;
    if (forSigning) {
      this.privateKey = (Ed25519PrivateKeyParameters)parameters;
      this.publicKey = null;
    } else {
      this.privateKey = null;
      this.publicKey = (Ed25519PublicKeyParameters)parameters;
    } 
    CryptoServicesRegistrar.checkConstraints(Utils.getDefaultProperties("Ed25519", 128, parameters, forSigning));
    reset();
  }
  
  public void update(byte b) { this.buffer.write(b); }
  
  public void update(byte[] buf, int off, int len) { this.buffer.write(buf, off, len); }
  
  public byte[] generateSignature() {
    if (!this.forSigning || null == this.privateKey)
      throw new IllegalStateException("Ed25519Signer not initialised for signature generation."); 
    return this.buffer.generateSignature(this.privateKey);
  }
  
  public boolean verifySignature(byte[] signature) {
    if (this.forSigning || null == this.publicKey)
      throw new IllegalStateException("Ed25519Signer not initialised for verification"); 
    return this.buffer.verifySignature(this.publicKey, signature);
  }
  
  public void reset() { this.buffer.reset(); }
}
