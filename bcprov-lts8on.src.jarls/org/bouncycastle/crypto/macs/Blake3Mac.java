package org.bouncycastle.crypto.macs;

import org.bouncycastle.crypto.CipherParameters;
import org.bouncycastle.crypto.Mac;
import org.bouncycastle.crypto.digests.Blake3Digest;
import org.bouncycastle.crypto.params.Blake3Parameters;
import org.bouncycastle.crypto.params.KeyParameter;

public class Blake3Mac implements Mac {
  private final Blake3Digest theDigest;
  
  public Blake3Mac(Blake3Digest pDigest) { this.theDigest = pDigest; }
  
  public String getAlgorithmName() { return this.theDigest.getAlgorithmName() + "Mac"; }
  
  public void init(CipherParameters pParams) {
    Blake3Parameters blake3Parameters = pParams;
    if (blake3Parameters instanceof KeyParameter)
      blake3Parameters = Blake3Parameters.key(((KeyParameter)blake3Parameters).getKey()); 
    if (!(blake3Parameters instanceof Blake3Parameters))
      throw new IllegalArgumentException("Invalid parameter passed to Blake3Mac init - " + pParams
          .getClass().getName()); 
    Blake3Parameters myBlakeParams = (Blake3Parameters)blake3Parameters;
    if (myBlakeParams.getKey() == null)
      throw new IllegalArgumentException("Blake3Mac requires a key parameter."); 
    this.theDigest.init(myBlakeParams);
  }
  
  public int getMacSize() { return this.theDigest.getDigestSize(); }
  
  public void update(byte in) { this.theDigest.update(in); }
  
  public void update(byte[] in, int inOff, int len) { this.theDigest.update(in, inOff, len); }
  
  public int doFinal(byte[] out, int outOff) { return this.theDigest.doFinal(out, outOff); }
  
  public void reset() { this.theDigest.reset(); }
}
