package org.bouncycastle.crypto.digests;

import org.bouncycastle.crypto.ExtendedDigest;

public class ShortenedDigest implements ExtendedDigest {
  private ExtendedDigest baseDigest;
  
  private int length;
  
  public ShortenedDigest(ExtendedDigest baseDigest, int length) {
    if (baseDigest == null)
      throw new IllegalArgumentException("baseDigest must not be null"); 
    if (length > baseDigest.getDigestSize())
      throw new IllegalArgumentException("baseDigest output not large enough to support length"); 
    this.baseDigest = baseDigest;
    this.length = length;
  }
  
  public String getAlgorithmName() { return this.baseDigest.getAlgorithmName() + "(" + (this.length * 8) + ")"; }
  
  public int getDigestSize() { return this.length; }
  
  public void update(byte in) { this.baseDigest.update(in); }
  
  public void update(byte[] in, int inOff, int len) { this.baseDigest.update(in, inOff, len); }
  
  public int doFinal(byte[] out, int outOff) {
    byte[] tmp = new byte[this.baseDigest.getDigestSize()];
    this.baseDigest.doFinal(tmp, 0);
    System.arraycopy(tmp, 0, out, outOff, this.length);
    return this.length;
  }
  
  public void reset() { this.baseDigest.reset(); }
  
  public int getByteLength() { return this.baseDigest.getByteLength(); }
}
