package org.bouncycastle.crypto.digests;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import org.bouncycastle.crypto.OutputLengthException;
import org.bouncycastle.crypto.engines.ThreefishEngine;
import org.bouncycastle.crypto.params.SkeinParameters;
import org.bouncycastle.util.Arrays;
import org.bouncycastle.util.Integers;
import org.bouncycastle.util.Memoable;
import org.bouncycastle.util.Pack;

public class SkeinEngine implements Memoable {
  public static final int SKEIN_256 = 256;
  
  public static final int SKEIN_512 = 512;
  
  public static final int SKEIN_1024 = 1024;
  
  private static final int PARAM_TYPE_KEY = 0;
  
  private static final int PARAM_TYPE_CONFIG = 4;
  
  private static final int PARAM_TYPE_MESSAGE = 48;
  
  private static final int PARAM_TYPE_OUTPUT = 63;
  
  private static final Hashtable INITIAL_STATES = new Hashtable();
  
  final ThreefishEngine threefish;
  
  private final int outputSizeBytes;
  
  long[] chain;
  
  private long[] initialState;
  
  private byte[] key;
  
  private Parameter[] preMessageParameters;
  
  private Parameter[] postMessageParameters;
  
  private final UBI ubi;
  
  static  {
    initialState(256, 128, new long[] { -2228972824489528736L, -8629553674646093540L, 1155188648486244218L, -3677226592081559102L });
    initialState(256, 160, new long[] { 1450197650740764312L, 3081844928540042640L, -3136097061834271170L, 3301952811952417661L });
    initialState(256, 224, new long[] { -4176654842910610933L, -8688192972455077604L, -7364642305011795836L, 4056579644589979102L });
    initialState(256, 256, new long[] { -243853671043386295L, 3443677322885453875L, -5531612722399640561L, 7662005193972177513L });
    initialState(512, 128, new long[] { -6288014694233956526L, 2204638249859346602L, 3502419045458743507L, -4829063503441264548L, 983504137758028059L, 1880512238245786339L, -6715892782214108542L, 7602827311880509485L });
    initialState(512, 160, new long[] { 2934123928682216849L, -4399710721982728305L, 1684584802963255058L, 5744138295201861711L, 2444857010922934358L, -2807833639722848072L, -5121587834665610502L, 118355523173251694L });
    initialState(512, 224, new long[] { -3688341020067007964L, -3772225436291745297L, -8300862168937575580L, 4146387520469897396L, 1106145742801415120L, 7455425944880474941L, -7351063101234211863L, -7048981346965512457L });
    initialState(512, 384, new long[] { -6631894876634615969L, -5692838220127733084L, -7099962856338682626L, -2911352911530754598L, 2000907093792408677L, 9140007292425499655L, 6093301768906360022L, 2769176472213098488L });
    initialState(512, 512, new long[] { 5261240102383538638L, 978932832955457283L, -8083517948103779378L, -7339365279355032399L, 6752626034097301424L, -1531723821829733388L, -7417126464950782685L, -5901786942805128141L });
  }
  
  private static void initialState(int blockSize, int outputSize, long[] state) { INITIAL_STATES.put(variantIdentifier(blockSize / 8, outputSize / 8), state); }
  
  private static Integer variantIdentifier(int blockSizeBytes, int outputSizeBytes) { return Integers.valueOf(outputSizeBytes << 16 | blockSizeBytes); }
  
  private final byte[] singleByte = new byte[1];
  
  public SkeinEngine(int blockSizeBits, int outputSizeBits) {
    if (outputSizeBits % 8 != 0)
      throw new IllegalArgumentException("Output size must be a multiple of 8 bits. :" + outputSizeBits); 
    this.outputSizeBytes = outputSizeBits / 8;
    this.threefish = new ThreefishEngine(blockSizeBits);
    this.ubi = new UBI(this, this.threefish.getBlockSize());
  }
  
  public SkeinEngine(SkeinEngine engine) {
    this(engine.getBlockSize() * 8, engine.getOutputSize() * 8);
    copyIn(engine);
  }
  
  private void copyIn(SkeinEngine engine) {
    this.ubi.reset(engine.ubi);
    this.chain = Arrays.clone(engine.chain, this.chain);
    this.initialState = Arrays.clone(engine.initialState, this.initialState);
    this.key = Arrays.clone(engine.key, this.key);
    this.preMessageParameters = clone(engine.preMessageParameters, this.preMessageParameters);
    this.postMessageParameters = clone(engine.postMessageParameters, this.postMessageParameters);
  }
  
  private static Parameter[] clone(Parameter[] data, Parameter[] existing) {
    Parameter[] arrayOfParameter;
    if (data == null)
      return null; 
    if (existing == null || existing.length != data.length)
      arrayOfParameter = new Parameter[data.length]; 
    System.arraycopy(data, 0, arrayOfParameter, 0, arrayOfParameter.length);
    return arrayOfParameter;
  }
  
  public Memoable copy() { return new SkeinEngine(this); }
  
  public void reset(Memoable other) {
    SkeinEngine s = (SkeinEngine)other;
    if (getBlockSize() != s.getBlockSize() || this.outputSizeBytes != s.outputSizeBytes)
      throw new IllegalArgumentException("Incompatible parameters in provided SkeinEngine."); 
    copyIn(s);
  }
  
  public int getOutputSize() { return this.outputSizeBytes; }
  
  public int getBlockSize() { return this.threefish.getBlockSize(); }
  
  public void init(SkeinParameters params) {
    this.chain = null;
    this.key = null;
    this.preMessageParameters = null;
    this.postMessageParameters = null;
    if (params != null) {
      byte[] key = params.getKey();
      if (key.length < 16)
        throw new IllegalArgumentException("Skein key must be at least 128 bits."); 
      initParams(params.getParameters());
    } 
    createInitialState();
    ubiInit(48);
  }
  
  private void initParams(Hashtable parameters) {
    Enumeration keys = parameters.keys();
    Vector pre = new Vector();
    Vector post = new Vector();
    while (keys.hasMoreElements()) {
      Integer type = (Integer)keys.nextElement();
      byte[] value = (byte[])parameters.get(type);
      if (type.intValue() == 0) {
        this.key = value;
        continue;
      } 
      if (type.intValue() < 48) {
        pre.addElement(new Parameter(type.intValue(), value));
        continue;
      } 
      post.addElement(new Parameter(type.intValue(), value));
    } 
    this.preMessageParameters = new Parameter[pre.size()];
    pre.copyInto(this.preMessageParameters);
    sort(this.preMessageParameters);
    this.postMessageParameters = new Parameter[post.size()];
    post.copyInto(this.postMessageParameters);
    sort(this.postMessageParameters);
  }
  
  private static void sort(Parameter[] params) {
    if (params == null)
      return; 
    for (int i = 1; i < params.length; i++) {
      Parameter param = params[i];
      int hole = i;
      while (hole > 0 && param.getType() < params[hole - 1].getType()) {
        params[hole] = params[hole - 1];
        hole--;
      } 
      params[hole] = param;
    } 
  }
  
  private void createInitialState() {
    long[] precalc = (long[])INITIAL_STATES.get(variantIdentifier(getBlockSize(), getOutputSize()));
    if (this.key == null && precalc != null) {
      this.chain = Arrays.clone(precalc);
    } else {
      this.chain = new long[getBlockSize() / 8];
      if (this.key != null)
        ubiComplete(0, this.key); 
      ubiComplete(4, (new Configuration((this.outputSizeBytes * 8))).getBytes());
    } 
    if (this.preMessageParameters != null)
      for (int i = 0; i < this.preMessageParameters.length; i++) {
        Parameter param = this.preMessageParameters[i];
        ubiComplete(param.getType(), param.getValue());
      }  
    this.initialState = Arrays.clone(this.chain);
  }
  
  public void reset() {
    System.arraycopy(this.initialState, 0, this.chain, 0, this.chain.length);
    ubiInit(48);
  }
  
  private void ubiComplete(int type, byte[] value) {
    ubiInit(type);
    this.ubi.update(value, 0, value.length, this.chain);
    ubiFinal();
  }
  
  private void ubiInit(int type) { this.ubi.reset(type); }
  
  private void ubiFinal() { this.ubi.doFinal(this.chain); }
  
  private void checkInitialised() {
    if (this.ubi == null)
      throw new IllegalArgumentException("Skein engine is not initialised."); 
  }
  
  public void update(byte in) {
    this.singleByte[0] = in;
    update(this.singleByte, 0, 1);
  }
  
  public void update(byte[] in, int inOff, int len) {
    checkInitialised();
    this.ubi.update(in, inOff, len, this.chain);
  }
  
  public int doFinal(byte[] out, int outOff) {
    checkInitialised();
    if (out.length < outOff + this.outputSizeBytes)
      throw new OutputLengthException("Output buffer is too short to hold output"); 
    ubiFinal();
    if (this.postMessageParameters != null)
      for (int i = 0; i < this.postMessageParameters.length; i++) {
        Parameter param = this.postMessageParameters[i];
        ubiComplete(param.getType(), param.getValue());
      }  
    int blockSize = getBlockSize();
    int blocksRequired = (this.outputSizeBytes + blockSize - 1) / blockSize;
    for (int i = 0; i < blocksRequired; i++) {
      int toWrite = Math.min(blockSize, this.outputSizeBytes - i * blockSize);
      output(i, out, outOff + i * blockSize, toWrite);
    } 
    reset();
    return this.outputSizeBytes;
  }
  
  private void output(long outputSequence, byte[] out, int outOff, int outputBytes) {
    byte[] currentBytes = new byte[8];
    Pack.longToLittleEndian(outputSequence, currentBytes, 0);
    long[] outputWords = new long[this.chain.length];
    ubiInit(63);
    this.ubi.update(currentBytes, 0, currentBytes.length, outputWords);
    this.ubi.doFinal(outputWords);
    int wordsRequired = (outputBytes + 8 - 1) / 8;
    for (int i = 0; i < wordsRequired; i++) {
      int toWrite = Math.min(8, outputBytes - i * 8);
      if (toWrite == 8) {
        Pack.longToLittleEndian(outputWords[i], out, outOff + i * 8);
      } else {
        Pack.longToLittleEndian(outputWords[i], currentBytes, 0);
        System.arraycopy(currentBytes, 0, out, outOff + i * 8, toWrite);
      } 
    } 
  }
}
