package org.bouncycastle.crypto.engines;

import java.math.BigInteger;
import org.bouncycastle.crypto.AsymmetricBlockCipher;
import org.bouncycastle.crypto.CipherParameters;
import org.bouncycastle.crypto.params.ParametersWithRandom;
import org.bouncycastle.crypto.params.RSABlindingParameters;
import org.bouncycastle.crypto.params.RSAKeyParameters;
import org.bouncycastle.util.BigIntegers;

public class RSABlindingEngine implements AsymmetricBlockCipher {
  private RSACoreEngine core = new RSACoreEngine();
  
  private RSAKeyParameters key;
  
  private BigInteger blindingFactor;
  
  private boolean forEncryption;
  
  public void init(boolean forEncryption, CipherParameters param) {
    RSABlindingParameters p;
    if (param instanceof ParametersWithRandom) {
      ParametersWithRandom rParam = (ParametersWithRandom)param;
      p = (RSABlindingParameters)rParam.getParameters();
    } else {
      p = (RSABlindingParameters)param;
    } 
    this.core.init(forEncryption, p.getPublicKey());
    this.forEncryption = forEncryption;
    this.key = p.getPublicKey();
    this.blindingFactor = p.getBlindingFactor();
  }
  
  public int getInputBlockSize() { return this.core.getInputBlockSize(); }
  
  public int getOutputBlockSize() { return this.core.getOutputBlockSize(); }
  
  public byte[] processBlock(byte[] in, int inOff, int inLen) {
    BigInteger msg = this.core.convertInput(in, inOff, inLen);
    if (this.forEncryption) {
      msg = blindMessage(msg);
    } else {
      msg = unblindMessage(msg);
    } 
    return this.core.convertOutput(msg);
  }
  
  private BigInteger blindMessage(BigInteger msg) {
    blindMsg = this.blindingFactor;
    blindMsg = msg.multiply(blindMsg.modPow(this.key.getExponent(), this.key.getModulus()));
    return blindMsg.mod(this.key.getModulus());
  }
  
  private BigInteger unblindMessage(BigInteger blindedMsg) {
    BigInteger m = this.key.getModulus();
    msg = blindedMsg;
    BigInteger blindFactorInverse = BigIntegers.modOddInverse(m, this.blindingFactor);
    msg = msg.multiply(blindFactorInverse);
    return msg.mod(m);
  }
}
