package org.bouncycastle.crypto.engines;

import org.bouncycastle.util.Pack;

public class ChaCha7539Engine extends Salsa20Engine {
  public String getAlgorithmName() { return "ChaCha7539"; }
  
  protected int getNonceSize() { return 12; }
  
  protected void advanceCounter(long diff) {
    int hi = (int)(diff >>> 32);
    int lo = (int)diff;
    if (hi > 0)
      throw new IllegalStateException("attempt to increase counter past 2^32."); 
    int oldState = this.engineState[12];
    this.engineState[12] = this.engineState[12] + lo;
    if (oldState != 0 && this.engineState[12] < oldState)
      throw new IllegalStateException("attempt to increase counter past 2^32."); 
  }
  
  protected void advanceCounter() {
    this.engineState[12] = this.engineState[12] + 1;
    if (this.engineState[12] + 1 == 0)
      throw new IllegalStateException("attempt to increase counter past 2^32."); 
  }
  
  protected void retreatCounter(long diff) {
    int hi = (int)(diff >>> 32);
    int lo = (int)diff;
    if (hi != 0)
      throw new IllegalStateException("attempt to reduce counter past zero."); 
    if ((this.engineState[12] & 0xFFFFFFFFL) >= (lo & 0xFFFFFFFFL)) {
      this.engineState[12] = this.engineState[12] - lo;
    } else {
      throw new IllegalStateException("attempt to reduce counter past zero.");
    } 
  }
  
  protected void retreatCounter() {
    if (this.engineState[12] == 0)
      throw new IllegalStateException("attempt to reduce counter past zero."); 
    this.engineState[12] = this.engineState[12] - 1;
  }
  
  protected long getCounter() { return this.engineState[12] & 0xFFFFFFFFL; }
  
  protected void resetCounter() { this.engineState[12] = 0; }
  
  protected void setKey(byte[] keyBytes, byte[] ivBytes) {
    if (keyBytes != null) {
      if (keyBytes.length != 32)
        throw new IllegalArgumentException(getAlgorithmName() + " requires 256 bit key"); 
      packTauOrSigma(keyBytes.length, this.engineState, 0);
      Pack.littleEndianToInt(keyBytes, 0, this.engineState, 4, 8);
    } 
    Pack.littleEndianToInt(ivBytes, 0, this.engineState, 13, 3);
  }
  
  protected void generateKeyStream(byte[] output) {
    ChaChaEngine.chachaCore(this.rounds, this.engineState, this.x);
    Pack.intToLittleEndian(this.x, output, 0);
  }
}
