package org.bouncycastle.crypto.ec;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import org.bouncycastle.asn1.ASN1ObjectIdentifier;
import org.bouncycastle.asn1.cryptlib.CryptlibObjectIdentifiers;
import org.bouncycastle.asn1.gm.GMObjectIdentifiers;
import org.bouncycastle.asn1.sec.SECObjectIdentifiers;
import org.bouncycastle.asn1.x9.X9ECParameters;
import org.bouncycastle.asn1.x9.X9ECParametersHolder;
import org.bouncycastle.asn1.x9.X9ECPoint;
import org.bouncycastle.math.ec.ECCurve;
import org.bouncycastle.math.ec.WNafUtil;
import org.bouncycastle.math.ec.endo.GLVTypeBEndomorphism;
import org.bouncycastle.math.ec.endo.GLVTypeBParameters;
import org.bouncycastle.util.Strings;
import org.bouncycastle.util.encoders.Hex;

public class CustomNamedCurves {
  private static X9ECPoint configureBasepoint(ECCurve curve, String encoding) {
    X9ECPoint G = new X9ECPoint(curve, Hex.decodeStrict(encoding));
    WNafUtil.configureBasepoint(G.getPoint());
    return G;
  }
  
  private static ECCurve configureCurve(ECCurve curve) { return curve; }
  
  private static ECCurve configureCurveGLV(ECCurve c, GLVTypeBParameters p) { return c.configure().setEndomorphism(new GLVTypeBEndomorphism(c, p)).create(); }
  
  static X9ECParametersHolder curve25519 = new Object();
  
  static X9ECParametersHolder secp128r1 = new Object();
  
  static X9ECParametersHolder secp160k1 = new Object();
  
  static X9ECParametersHolder secp160r1 = new Object();
  
  static X9ECParametersHolder secp160r2 = new Object();
  
  static X9ECParametersHolder secp192k1 = new Object();
  
  static X9ECParametersHolder secp192r1 = new Object();
  
  static X9ECParametersHolder secp224k1 = new Object();
  
  static X9ECParametersHolder secp224r1 = new Object();
  
  static X9ECParametersHolder secp256k1 = new Object();
  
  static X9ECParametersHolder secp256r1 = new Object();
  
  static X9ECParametersHolder secp384r1 = new Object();
  
  static X9ECParametersHolder secp521r1 = new Object();
  
  static X9ECParametersHolder sect113r1 = new Object();
  
  static X9ECParametersHolder sect113r2 = new Object();
  
  static X9ECParametersHolder sect131r1 = new Object();
  
  static X9ECParametersHolder sect131r2 = new Object();
  
  static X9ECParametersHolder sect163k1 = new Object();
  
  static X9ECParametersHolder sect163r1 = new Object();
  
  static X9ECParametersHolder sect163r2 = new Object();
  
  static X9ECParametersHolder sect193r1 = new Object();
  
  static X9ECParametersHolder sect193r2 = new Object();
  
  static X9ECParametersHolder sect233k1 = new Object();
  
  static X9ECParametersHolder sect233r1 = new Object();
  
  static X9ECParametersHolder sect239k1 = new Object();
  
  static X9ECParametersHolder sect283k1 = new Object();
  
  static X9ECParametersHolder sect283r1 = new Object();
  
  static X9ECParametersHolder sect409k1 = new Object();
  
  static X9ECParametersHolder sect409r1 = new Object();
  
  static X9ECParametersHolder sect571k1 = new Object();
  
  static X9ECParametersHolder sect571r1 = new Object();
  
  static X9ECParametersHolder sm2p256v1 = new Object();
  
  static final Hashtable nameToCurve = new Hashtable();
  
  static final Hashtable nameToOID = new Hashtable();
  
  static final Hashtable oidToCurve = new Hashtable();
  
  static final Hashtable oidToName = new Hashtable();
  
  static final Vector names = new Vector();
  
  static void defineCurve(String name, X9ECParametersHolder holder) {
    names.addElement(name);
    name = Strings.toLowerCase(name);
    nameToCurve.put(name, holder);
  }
  
  static void defineCurveWithOID(String name, ASN1ObjectIdentifier oid, X9ECParametersHolder holder) {
    names.addElement(name);
    oidToName.put(oid, name);
    oidToCurve.put(oid, holder);
    name = Strings.toLowerCase(name);
    nameToOID.put(name, oid);
    nameToCurve.put(name, holder);
  }
  
  static void defineCurveAlias(String name, ASN1ObjectIdentifier oid) {
    Object curve = oidToCurve.get(oid);
    if (curve == null)
      throw new IllegalStateException(); 
    name = Strings.toLowerCase(name);
    nameToOID.put(name, oid);
    nameToCurve.put(name, curve);
  }
  
  static  {
    defineCurveWithOID("curve25519", CryptlibObjectIdentifiers.curvey25519, curve25519);
    defineCurveWithOID("secp128r1", SECObjectIdentifiers.secp128r1, secp128r1);
    defineCurveWithOID("secp160k1", SECObjectIdentifiers.secp160k1, secp160k1);
    defineCurveWithOID("secp160r1", SECObjectIdentifiers.secp160r1, secp160r1);
    defineCurveWithOID("secp160r2", SECObjectIdentifiers.secp160r2, secp160r2);
    defineCurveWithOID("secp192k1", SECObjectIdentifiers.secp192k1, secp192k1);
    defineCurveWithOID("secp192r1", SECObjectIdentifiers.secp192r1, secp192r1);
    defineCurveWithOID("secp224k1", SECObjectIdentifiers.secp224k1, secp224k1);
    defineCurveWithOID("secp224r1", SECObjectIdentifiers.secp224r1, secp224r1);
    defineCurveWithOID("secp256k1", SECObjectIdentifiers.secp256k1, secp256k1);
    defineCurveWithOID("secp256r1", SECObjectIdentifiers.secp256r1, secp256r1);
    defineCurveWithOID("secp384r1", SECObjectIdentifiers.secp384r1, secp384r1);
    defineCurveWithOID("secp521r1", SECObjectIdentifiers.secp521r1, secp521r1);
    defineCurveWithOID("sect113r1", SECObjectIdentifiers.sect113r1, sect113r1);
    defineCurveWithOID("sect113r2", SECObjectIdentifiers.sect113r2, sect113r2);
    defineCurveWithOID("sect131r1", SECObjectIdentifiers.sect131r1, sect131r1);
    defineCurveWithOID("sect131r2", SECObjectIdentifiers.sect131r2, sect131r2);
    defineCurveWithOID("sect163k1", SECObjectIdentifiers.sect163k1, sect163k1);
    defineCurveWithOID("sect163r1", SECObjectIdentifiers.sect163r1, sect163r1);
    defineCurveWithOID("sect163r2", SECObjectIdentifiers.sect163r2, sect163r2);
    defineCurveWithOID("sect193r1", SECObjectIdentifiers.sect193r1, sect193r1);
    defineCurveWithOID("sect193r2", SECObjectIdentifiers.sect193r2, sect193r2);
    defineCurveWithOID("sect233k1", SECObjectIdentifiers.sect233k1, sect233k1);
    defineCurveWithOID("sect233r1", SECObjectIdentifiers.sect233r1, sect233r1);
    defineCurveWithOID("sect239k1", SECObjectIdentifiers.sect239k1, sect239k1);
    defineCurveWithOID("sect283k1", SECObjectIdentifiers.sect283k1, sect283k1);
    defineCurveWithOID("sect283r1", SECObjectIdentifiers.sect283r1, sect283r1);
    defineCurveWithOID("sect409k1", SECObjectIdentifiers.sect409k1, sect409k1);
    defineCurveWithOID("sect409r1", SECObjectIdentifiers.sect409r1, sect409r1);
    defineCurveWithOID("sect571k1", SECObjectIdentifiers.sect571k1, sect571k1);
    defineCurveWithOID("sect571r1", SECObjectIdentifiers.sect571r1, sect571r1);
    defineCurveWithOID("sm2p256v1", GMObjectIdentifiers.sm2p256v1, sm2p256v1);
    defineCurveAlias("B-163", SECObjectIdentifiers.sect163r2);
    defineCurveAlias("B-233", SECObjectIdentifiers.sect233r1);
    defineCurveAlias("B-283", SECObjectIdentifiers.sect283r1);
    defineCurveAlias("B-409", SECObjectIdentifiers.sect409r1);
    defineCurveAlias("B-571", SECObjectIdentifiers.sect571r1);
    defineCurveAlias("K-163", SECObjectIdentifiers.sect163k1);
    defineCurveAlias("K-233", SECObjectIdentifiers.sect233k1);
    defineCurveAlias("K-283", SECObjectIdentifiers.sect283k1);
    defineCurveAlias("K-409", SECObjectIdentifiers.sect409k1);
    defineCurveAlias("K-571", SECObjectIdentifiers.sect571k1);
    defineCurveAlias("P-192", SECObjectIdentifiers.secp192r1);
    defineCurveAlias("P-224", SECObjectIdentifiers.secp224r1);
    defineCurveAlias("P-256", SECObjectIdentifiers.secp256r1);
    defineCurveAlias("P-384", SECObjectIdentifiers.secp384r1);
    defineCurveAlias("P-521", SECObjectIdentifiers.secp521r1);
  }
  
  public static X9ECParameters getByName(String name) {
    X9ECParametersHolder holder = getByNameLazy(name);
    return (holder == null) ? null : holder.getParameters();
  }
  
  public static X9ECParametersHolder getByNameLazy(String name) { return (X9ECParametersHolder)nameToCurve.get(Strings.toLowerCase(name)); }
  
  public static X9ECParameters getByOID(ASN1ObjectIdentifier oid) {
    X9ECParametersHolder holder = getByOIDLazy(oid);
    return (holder == null) ? null : holder.getParameters();
  }
  
  public static X9ECParametersHolder getByOIDLazy(ASN1ObjectIdentifier oid) { return (X9ECParametersHolder)oidToCurve.get(oid); }
  
  public static ASN1ObjectIdentifier getOID(String name) { return (ASN1ObjectIdentifier)nameToOID.get(Strings.toLowerCase(name)); }
  
  public static String getName(ASN1ObjectIdentifier oid) { return (String)oidToName.get(oid); }
  
  public static Enumeration getNames() { return names.elements(); }
}
