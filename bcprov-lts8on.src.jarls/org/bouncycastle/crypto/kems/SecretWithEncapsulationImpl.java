package org.bouncycastle.crypto.kems;

import java.util.concurrent.atomic.AtomicBoolean;
import javax.security.auth.DestroyFailedException;
import org.bouncycastle.crypto.SecretWithEncapsulation;
import org.bouncycastle.util.Arrays;

class SecretWithEncapsulationImpl implements SecretWithEncapsulation {
  private final AtomicBoolean hasBeenDestroyed;
  
  private final byte[] sessionKey;
  
  private final byte[] cipher_text;
  
  public SecretWithEncapsulationImpl(byte[] sessionKey, byte[] cipher_text) {
    this.hasBeenDestroyed = new AtomicBoolean(false);
    this.sessionKey = sessionKey;
    this.cipher_text = cipher_text;
  }
  
  public byte[] getSecret() {
    byte[] clone = Arrays.clone(this.sessionKey);
    checkDestroyed();
    return clone;
  }
  
  public byte[] getEncapsulation() {
    byte[] clone = Arrays.clone(this.cipher_text);
    checkDestroyed();
    return clone;
  }
  
  public void destroy() throws DestroyFailedException {
    if (!this.hasBeenDestroyed.getAndSet(true)) {
      Arrays.clear(this.sessionKey);
      Arrays.clear(this.cipher_text);
    } 
  }
  
  public boolean isDestroyed() { return this.hasBeenDestroyed.get(); }
  
  void checkDestroyed() throws DestroyFailedException {
    if (isDestroyed())
      throw new IllegalStateException("data has been destroyed"); 
  }
}
