package org.bouncycastle.crypto.agreement;

import java.math.BigInteger;
import org.bouncycastle.crypto.BasicAgreement;
import org.bouncycastle.crypto.CipherParameters;
import org.bouncycastle.crypto.CryptoServicesRegistrar;
import org.bouncycastle.crypto.params.ECDomainParameters;
import org.bouncycastle.crypto.params.ECPrivateKeyParameters;
import org.bouncycastle.crypto.params.ECPublicKeyParameters;
import org.bouncycastle.math.ec.ECAlgorithms;
import org.bouncycastle.math.ec.ECPoint;

public class ECDHCBasicAgreement implements BasicAgreement {
  ECPrivateKeyParameters key;
  
  public void init(CipherParameters key) {
    this.key = (ECPrivateKeyParameters)key;
    CryptoServicesRegistrar.checkConstraints(Utils.getDefaultProperties("ECCDH", this.key));
  }
  
  public int getFieldSize() { return (this.key.getParameters().getCurve().getFieldSize() + 7) / 8; }
  
  public BigInteger calculateAgreement(CipherParameters pubKey) {
    ECPublicKeyParameters pub = (ECPublicKeyParameters)pubKey;
    ECDomainParameters params = this.key.getParameters();
    if (!params.equals(pub.getParameters()))
      throw new IllegalStateException("ECDHC public key has wrong domain parameters"); 
    BigInteger hd = params.getH().multiply(this.key.getD()).mod(params.getN());
    ECPoint pubPoint = ECAlgorithms.cleanPoint(params.getCurve(), pub.getQ());
    if (pubPoint.isInfinity())
      throw new IllegalStateException("Infinity is not a valid public key for ECDHC"); 
    ECPoint P = pubPoint.multiply(hd).normalize();
    if (P.isInfinity())
      throw new IllegalStateException("Infinity is not a valid agreement value for ECDHC"); 
    return P.getAffineXCoord().toBigInteger();
  }
}
