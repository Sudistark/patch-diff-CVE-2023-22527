package org.bouncycastle.crypto.agreement;

import java.math.BigInteger;
import org.bouncycastle.crypto.BasicAgreement;
import org.bouncycastle.crypto.CipherParameters;
import org.bouncycastle.crypto.RawAgreement;
import org.bouncycastle.crypto.params.AsymmetricKeyParameter;

public class XDHBasicAgreement implements BasicAgreement {
  private AsymmetricKeyParameter key;
  
  private RawAgreement agreement;
  
  private int fieldSize = 0;
  
  public void init(CipherParameters key) {
    if (key instanceof org.bouncycastle.crypto.params.X25519PrivateKeyParameters) {
      this.fieldSize = 32;
      this.agreement = new X25519Agreement();
    } else if (key instanceof org.bouncycastle.crypto.params.X448PrivateKeyParameters) {
      this.fieldSize = 56;
      this.agreement = new X448Agreement();
    } else {
      throw new IllegalArgumentException("key is neither X25519 nor X448");
    } 
    this.key = (AsymmetricKeyParameter)key;
    this.agreement.init(key);
  }
  
  public int getFieldSize() { return this.fieldSize; }
  
  public BigInteger calculateAgreement(CipherParameters pubKey) {
    byte[] Z = new byte[this.fieldSize];
    this.agreement.calculateAgreement(pubKey, Z, 0);
    return new BigInteger(1, Z);
  }
}
