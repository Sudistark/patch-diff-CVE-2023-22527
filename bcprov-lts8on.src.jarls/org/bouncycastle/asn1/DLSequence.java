package org.bouncycastle.asn1;

import java.io.IOException;

public class DLSequence extends ASN1Sequence {
  private int contentsLength = -1;
  
  public DLSequence() {}
  
  public DLSequence(ASN1Encodable element) { super(element); }
  
  public DLSequence(ASN1EncodableVector elementVector) { super(elementVector); }
  
  public DLSequence(ASN1Encodable[] elements) { super(elements); }
  
  DLSequence(ASN1Encodable[] elements, boolean clone) { super(elements, clone); }
  
  private int getContentsLength() throws IOException {
    if (this.contentsLength < 0) {
      int count = this.elements.length;
      int totalLength = 0;
      for (int i = 0; i < count; i++) {
        ASN1Primitive dlObject = this.elements[i].toASN1Primitive().toDLObject();
        totalLength += dlObject.encodedLength(true);
      } 
      this.contentsLength = totalLength;
    } 
    return this.contentsLength;
  }
  
  int encodedLength(boolean withTag) throws IOException { return ASN1OutputStream.getLengthOfEncodingDL(withTag, getContentsLength()); }
  
  void encode(ASN1OutputStream out, boolean withTag) throws IOException {
    out.writeIdentifier(withTag, 48);
    DLOutputStream dLOutputStream = out.getDLSubStream();
    int count = this.elements.length;
    if (this.contentsLength >= 0 || count > 16) {
      out.writeDL(getContentsLength());
      for (int i = 0; i < count; i++)
        dLOutputStream.writePrimitive(this.elements[i].toASN1Primitive(), true); 
    } else {
      int totalLength = 0;
      ASN1Primitive[] dlObjects = new ASN1Primitive[count];
      for (int i = 0; i < count; i++) {
        ASN1Primitive dlObject = this.elements[i].toASN1Primitive().toDLObject();
        dlObjects[i] = dlObject;
        totalLength += dlObject.encodedLength(true);
      } 
      this.contentsLength = totalLength;
      out.writeDL(totalLength);
      for (int i = 0; i < count; i++)
        dLOutputStream.writePrimitive(dlObjects[i], true); 
    } 
  }
  
  ASN1BitString toASN1BitString() { return new DLBitString(BERBitString.flattenBitStrings(getConstructedBitStrings()), false); }
  
  ASN1External toASN1External() { return new DLExternal(this); }
  
  ASN1OctetString toASN1OctetString() { return new DEROctetString(BEROctetString.flattenOctetStrings(getConstructedOctetStrings())); }
  
  ASN1Set toASN1Set() { return new DLSet(false, toArrayInternal()); }
  
  ASN1Primitive toDLObject() { return this; }
}
