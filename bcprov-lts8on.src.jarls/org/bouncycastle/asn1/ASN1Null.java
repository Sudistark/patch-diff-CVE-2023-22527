package org.bouncycastle.asn1;

import java.io.IOException;

public abstract class ASN1Null extends ASN1Primitive {
  static final ASN1UniversalType TYPE = new Object(ASN1Null.class, 5);
  
  public static ASN1Null getInstance(Object o) {
    if (o instanceof ASN1Null)
      return (ASN1Null)o; 
    if (o != null)
      try {
        return (ASN1Null)TYPE.fromByteArray((byte[])o);
      } catch (IOException e) {
        throw new IllegalArgumentException("failed to construct NULL from byte[]: " + e.getMessage());
      }  
    return null;
  }
  
  public static ASN1Null getInstance(ASN1TaggedObject taggedObject, boolean explicit) { return (ASN1Null)TYPE.getContextInstance(taggedObject, explicit); }
  
  public int hashCode() { return -1; }
  
  boolean asn1Equals(ASN1Primitive o) {
    if (!(o instanceof ASN1Null))
      return false; 
    return true;
  }
  
  public String toString() { return "NULL"; }
  
  static ASN1Null createPrimitive(byte[] contents) {
    if (0 != contents.length)
      throw new IllegalStateException("malformed NULL encoding encountered"); 
    return DERNull.INSTANCE;
  }
}
