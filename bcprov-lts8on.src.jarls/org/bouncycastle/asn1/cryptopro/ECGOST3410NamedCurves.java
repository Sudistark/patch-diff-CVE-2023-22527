package org.bouncycastle.asn1.cryptopro;

import java.math.BigInteger;
import java.util.Enumeration;
import java.util.Hashtable;
import org.bouncycastle.asn1.ASN1ObjectIdentifier;
import org.bouncycastle.asn1.rosstandart.RosstandartObjectIdentifiers;
import org.bouncycastle.asn1.x9.X9ECParameters;
import org.bouncycastle.asn1.x9.X9ECParametersHolder;
import org.bouncycastle.asn1.x9.X9ECPoint;
import org.bouncycastle.math.ec.ECCurve;
import org.bouncycastle.math.ec.ECPoint;
import org.bouncycastle.math.ec.WNafUtil;
import org.bouncycastle.util.encoders.Hex;

public class ECGOST3410NamedCurves {
  private static X9ECPoint configureBasepoint(ECCurve curve, BigInteger x, BigInteger y) {
    ECPoint G = curve.createPoint(x, y);
    WNafUtil.configureBasepoint(G);
    return new X9ECPoint(G, false);
  }
  
  private static ECCurve configureCurve(ECCurve curve) { return curve; }
  
  private static BigInteger fromHex(String hex) { return new BigInteger(1, Hex.decodeStrict(hex)); }
  
  static X9ECParametersHolder gostR3410_2001_CryptoPro_A = new Object();
  
  static X9ECParametersHolder gostR3410_2001_CryptoPro_B = new Object();
  
  static X9ECParametersHolder gostR3410_2001_CryptoPro_C = new Object();
  
  static X9ECParametersHolder gostR3410_2001_CryptoPro_XchB = new Object();
  
  static X9ECParametersHolder id_tc26_gost_3410_12_256_paramSetA = new Object();
  
  static X9ECParametersHolder id_tc26_gost_3410_12_512_paramSetA = new Object();
  
  static X9ECParametersHolder id_tc26_gost_3410_12_512_paramSetB = new Object();
  
  static X9ECParametersHolder id_tc26_gost_3410_12_512_paramSetC = new Object();
  
  static final Hashtable objIds = new Hashtable();
  
  static final Hashtable curves = new Hashtable();
  
  static final Hashtable names = new Hashtable();
  
  static void defineCurve(String name, ASN1ObjectIdentifier oid, X9ECParametersHolder holder) {
    objIds.put(name, oid);
    names.put(oid, name);
    curves.put(oid, holder);
  }
  
  static  {
    defineCurve("GostR3410-2001-CryptoPro-A", CryptoProObjectIdentifiers.gostR3410_2001_CryptoPro_A, gostR3410_2001_CryptoPro_A);
    defineCurve("GostR3410-2001-CryptoPro-B", CryptoProObjectIdentifiers.gostR3410_2001_CryptoPro_B, gostR3410_2001_CryptoPro_B);
    defineCurve("GostR3410-2001-CryptoPro-C", CryptoProObjectIdentifiers.gostR3410_2001_CryptoPro_C, gostR3410_2001_CryptoPro_C);
    defineCurve("GostR3410-2001-CryptoPro-XchA", CryptoProObjectIdentifiers.gostR3410_2001_CryptoPro_XchA, gostR3410_2001_CryptoPro_A);
    defineCurve("GostR3410-2001-CryptoPro-XchB", CryptoProObjectIdentifiers.gostR3410_2001_CryptoPro_XchB, gostR3410_2001_CryptoPro_XchB);
    defineCurve("Tc26-Gost-3410-12-256-paramSetA", RosstandartObjectIdentifiers.id_tc26_gost_3410_12_256_paramSetA, id_tc26_gost_3410_12_256_paramSetA);
    defineCurve("Tc26-Gost-3410-12-512-paramSetA", RosstandartObjectIdentifiers.id_tc26_gost_3410_12_512_paramSetA, id_tc26_gost_3410_12_512_paramSetA);
    defineCurve("Tc26-Gost-3410-12-512-paramSetB", RosstandartObjectIdentifiers.id_tc26_gost_3410_12_512_paramSetB, id_tc26_gost_3410_12_512_paramSetB);
    defineCurve("Tc26-Gost-3410-12-512-paramSetC", RosstandartObjectIdentifiers.id_tc26_gost_3410_12_512_paramSetC, id_tc26_gost_3410_12_512_paramSetC);
  }
  
  public static X9ECParameters getByNameX9(String name) {
    ASN1ObjectIdentifier oid = getOID(name);
    return (oid == null) ? null : getByOIDX9(oid);
  }
  
  public static X9ECParametersHolder getByNameLazy(String name) {
    ASN1ObjectIdentifier oid = getOID(name);
    return (oid == null) ? null : getByOIDLazy(oid);
  }
  
  public static X9ECParameters getByOIDX9(ASN1ObjectIdentifier oid) {
    X9ECParametersHolder holder = getByOIDLazy(oid);
    return (holder == null) ? null : holder.getParameters();
  }
  
  public static X9ECParametersHolder getByOIDLazy(ASN1ObjectIdentifier oid) { return (X9ECParametersHolder)curves.get(oid); }
  
  public static ASN1ObjectIdentifier getOID(String name) { return (ASN1ObjectIdentifier)objIds.get(name); }
  
  public static String getName(ASN1ObjectIdentifier oid) { return (String)names.get(oid); }
  
  public static Enumeration getNames() { return names.elements(); }
}
