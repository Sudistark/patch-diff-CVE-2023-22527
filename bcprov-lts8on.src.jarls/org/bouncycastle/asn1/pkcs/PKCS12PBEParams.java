package org.bouncycastle.asn1.pkcs;

import java.math.BigInteger;
import org.bouncycastle.asn1.ASN1EncodableVector;
import org.bouncycastle.asn1.ASN1Integer;
import org.bouncycastle.asn1.ASN1Object;
import org.bouncycastle.asn1.ASN1OctetString;
import org.bouncycastle.asn1.ASN1Primitive;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.DEROctetString;
import org.bouncycastle.asn1.DERSequence;

public class PKCS12PBEParams extends ASN1Object {
  ASN1Integer iterations;
  
  ASN1OctetString iv;
  
  public PKCS12PBEParams(byte[] salt, int iterations) {
    this.iv = new DEROctetString(salt);
    this.iterations = new ASN1Integer(iterations);
  }
  
  private PKCS12PBEParams(ASN1Sequence seq) {
    this.iv = (ASN1OctetString)seq.getObjectAt(0);
    this.iterations = ASN1Integer.getInstance(seq.getObjectAt(1));
  }
  
  public static PKCS12PBEParams getInstance(Object obj) {
    if (obj instanceof PKCS12PBEParams)
      return (PKCS12PBEParams)obj; 
    if (obj != null)
      return new PKCS12PBEParams(ASN1Sequence.getInstance(obj)); 
    return null;
  }
  
  public BigInteger getIterations() { return this.iterations.getValue(); }
  
  public byte[] getIV() { return this.iv.getOctets(); }
  
  public ASN1Primitive toASN1Primitive() {
    ASN1EncodableVector v = new ASN1EncodableVector(2);
    v.add(this.iv);
    v.add(this.iterations);
    return new DERSequence(v);
  }
}
