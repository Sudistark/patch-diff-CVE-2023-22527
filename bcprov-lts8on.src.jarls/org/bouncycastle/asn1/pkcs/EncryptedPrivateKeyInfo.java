package org.bouncycastle.asn1.pkcs;

import java.util.Enumeration;
import org.bouncycastle.asn1.ASN1EncodableVector;
import org.bouncycastle.asn1.ASN1Object;
import org.bouncycastle.asn1.ASN1OctetString;
import org.bouncycastle.asn1.ASN1Primitive;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.DEROctetString;
import org.bouncycastle.asn1.DERSequence;
import org.bouncycastle.asn1.x509.AlgorithmIdentifier;
import org.bouncycastle.util.Arrays;

public class EncryptedPrivateKeyInfo extends ASN1Object {
  private AlgorithmIdentifier algId;
  
  private ASN1OctetString data;
  
  private EncryptedPrivateKeyInfo(ASN1Sequence seq) {
    Enumeration e = seq.getObjects();
    this.algId = AlgorithmIdentifier.getInstance(e.nextElement());
    this.data = ASN1OctetString.getInstance(e.nextElement());
  }
  
  public EncryptedPrivateKeyInfo(AlgorithmIdentifier algId, byte[] encoding) {
    this.algId = algId;
    this.data = new DEROctetString(Arrays.clone(encoding));
  }
  
  public static EncryptedPrivateKeyInfo getInstance(Object obj) {
    if (obj instanceof EncryptedPrivateKeyInfo)
      return (EncryptedPrivateKeyInfo)obj; 
    if (obj != null)
      return new EncryptedPrivateKeyInfo(ASN1Sequence.getInstance(obj)); 
    return null;
  }
  
  public AlgorithmIdentifier getEncryptionAlgorithm() { return this.algId; }
  
  public byte[] getEncryptedData() { return Arrays.clone(this.data.getOctets()); }
  
  public ASN1Primitive toASN1Primitive() {
    ASN1EncodableVector v = new ASN1EncodableVector(2);
    v.add(this.algId);
    v.add(this.data);
    return new DERSequence(v);
  }
}
