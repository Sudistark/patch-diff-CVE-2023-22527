package org.bouncycastle.asn1.x509;

import java.util.Enumeration;
import org.bouncycastle.asn1.ASN1EncodableVector;
import org.bouncycastle.asn1.ASN1Integer;
import org.bouncycastle.asn1.ASN1Object;
import org.bouncycastle.asn1.ASN1Primitive;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.ASN1TaggedObject;
import org.bouncycastle.asn1.DERSequence;
import org.bouncycastle.asn1.DERTaggedObject;
import org.bouncycastle.asn1.x500.X500Name;

public class TBSCertList extends ASN1Object {
  ASN1Integer version;
  
  AlgorithmIdentifier signature;
  
  X500Name issuer;
  
  Time thisUpdate;
  
  Time nextUpdate;
  
  ASN1Sequence revokedCertificates;
  
  Extensions crlExtensions;
  
  public static TBSCertList getInstance(ASN1TaggedObject obj, boolean explicit) { return getInstance(ASN1Sequence.getInstance(obj, explicit)); }
  
  public static TBSCertList getInstance(Object obj) {
    if (obj instanceof TBSCertList)
      return (TBSCertList)obj; 
    if (obj != null)
      return new TBSCertList(ASN1Sequence.getInstance(obj)); 
    return null;
  }
  
  public TBSCertList(ASN1Sequence seq) {
    if (seq.size() < 3 || seq.size() > 7)
      throw new IllegalArgumentException("Bad sequence size: " + seq.size()); 
    int seqPos = 0;
    if (seq.getObjectAt(seqPos) instanceof ASN1Integer) {
      this.version = ASN1Integer.getInstance(seq.getObjectAt(seqPos++));
    } else {
      this.version = null;
    } 
    this.signature = AlgorithmIdentifier.getInstance(seq.getObjectAt(seqPos++));
    this.issuer = X500Name.getInstance(seq.getObjectAt(seqPos++));
    this.thisUpdate = Time.getInstance(seq.getObjectAt(seqPos++));
    if (seqPos < seq.size() && (seq
      .getObjectAt(seqPos) instanceof org.bouncycastle.asn1.ASN1UTCTime || seq
      .getObjectAt(seqPos) instanceof org.bouncycastle.asn1.ASN1GeneralizedTime || seq
      .getObjectAt(seqPos) instanceof Time))
      this.nextUpdate = Time.getInstance(seq.getObjectAt(seqPos++)); 
    if (seqPos < seq.size() && 
      !(seq.getObjectAt(seqPos) instanceof ASN1TaggedObject))
      this.revokedCertificates = ASN1Sequence.getInstance(seq.getObjectAt(seqPos++)); 
    if (seqPos < seq.size() && seq
      .getObjectAt(seqPos) instanceof ASN1TaggedObject)
      this.crlExtensions = Extensions.getInstance(ASN1Sequence.getInstance((ASN1TaggedObject)seq.getObjectAt(seqPos), true)); 
  }
  
  public int getVersionNumber() {
    if (this.version == null)
      return 1; 
    return this.version.intValueExact() + 1;
  }
  
  public ASN1Integer getVersion() { return this.version; }
  
  public AlgorithmIdentifier getSignature() { return this.signature; }
  
  public X500Name getIssuer() { return this.issuer; }
  
  public Time getThisUpdate() { return this.thisUpdate; }
  
  public Time getNextUpdate() { return this.nextUpdate; }
  
  public CRLEntry[] getRevokedCertificates() {
    if (this.revokedCertificates == null)
      return new CRLEntry[0]; 
    CRLEntry[] arrayOfCRLEntry = new CRLEntry[this.revokedCertificates.size()];
    for (int i = 0; i < arrayOfCRLEntry.length; i++)
      arrayOfCRLEntry[i] = CRLEntry.getInstance(this.revokedCertificates.getObjectAt(i)); 
    return arrayOfCRLEntry;
  }
  
  public Enumeration getRevokedCertificateEnumeration() {
    if (this.revokedCertificates == null)
      return new EmptyEnumeration(null); 
    return new RevokedCertificatesEnumeration(this.revokedCertificates.getObjects());
  }
  
  public Extensions getExtensions() { return this.crlExtensions; }
  
  public ASN1Primitive toASN1Primitive() {
    ASN1EncodableVector v = new ASN1EncodableVector(7);
    if (this.version != null)
      v.add(this.version); 
    v.add(this.signature);
    v.add(this.issuer);
    v.add(this.thisUpdate);
    if (this.nextUpdate != null)
      v.add(this.nextUpdate); 
    if (this.revokedCertificates != null)
      v.add(this.revokedCertificates); 
    if (this.crlExtensions != null)
      v.add(new DERTaggedObject(0, this.crlExtensions)); 
    return new DERSequence(v);
  }
}
