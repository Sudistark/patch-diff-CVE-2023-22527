package org.bouncycastle.asn1.x509;

import org.bouncycastle.asn1.ASN1EncodableVector;
import org.bouncycastle.asn1.ASN1Integer;
import org.bouncycastle.asn1.ASN1UTCTime;
import org.bouncycastle.asn1.DERSequence;
import org.bouncycastle.asn1.DERTaggedObject;
import org.bouncycastle.asn1.x500.X500Name;

public class V1TBSCertificateGenerator {
  DERTaggedObject version = new DERTaggedObject(true, 0, new ASN1Integer(0L));
  
  ASN1Integer serialNumber;
  
  AlgorithmIdentifier signature;
  
  X500Name issuer;
  
  Time startDate;
  
  Time endDate;
  
  X500Name subject;
  
  SubjectPublicKeyInfo subjectPublicKeyInfo;
  
  public void setSerialNumber(ASN1Integer serialNumber) { this.serialNumber = serialNumber; }
  
  public void setSignature(AlgorithmIdentifier signature) { this.signature = signature; }
  
  public void setIssuer(X500Name issuer) { this.issuer = issuer; }
  
  public void setStartDate(Time startDate) { this.startDate = startDate; }
  
  public void setStartDate(ASN1UTCTime startDate) { this.startDate = new Time(startDate); }
  
  public void setEndDate(Time endDate) { this.endDate = endDate; }
  
  public void setEndDate(ASN1UTCTime endDate) { this.endDate = new Time(endDate); }
  
  public void setSubject(X500Name subject) { this.subject = subject; }
  
  public void setSubjectPublicKeyInfo(SubjectPublicKeyInfo pubKeyInfo) { this.subjectPublicKeyInfo = pubKeyInfo; }
  
  public TBSCertificate generateTBSCertificate() {
    if (this.serialNumber == null || this.signature == null || this.issuer == null || this.startDate == null || this.endDate == null || this.subject == null || this.subjectPublicKeyInfo == null)
      throw new IllegalStateException("not all mandatory fields set in V1 TBScertificate generator"); 
    ASN1EncodableVector seq = new ASN1EncodableVector(6);
    seq.add(this.serialNumber);
    seq.add(this.signature);
    seq.add(this.issuer);
    ASN1EncodableVector validity = new ASN1EncodableVector(2);
    validity.add(this.startDate);
    validity.add(this.endDate);
    seq.add(new DERSequence(validity));
    seq.add(this.subject);
    seq.add(this.subjectPublicKeyInfo);
    return TBSCertificate.getInstance(new DERSequence(seq));
  }
}
