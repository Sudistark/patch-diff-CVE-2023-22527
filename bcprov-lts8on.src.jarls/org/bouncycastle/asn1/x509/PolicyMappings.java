package org.bouncycastle.asn1.x509;

import org.bouncycastle.asn1.ASN1EncodableVector;
import org.bouncycastle.asn1.ASN1Object;
import org.bouncycastle.asn1.ASN1Primitive;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.DERSequence;

public class PolicyMappings extends ASN1Object {
  ASN1Sequence seq;
  
  public static PolicyMappings getInstance(Object obj) {
    if (obj instanceof PolicyMappings)
      return (PolicyMappings)obj; 
    if (obj != null)
      return new PolicyMappings(ASN1Sequence.getInstance(obj)); 
    return null;
  }
  
  private PolicyMappings(ASN1Sequence seq) {
    this.seq = null;
    this.seq = seq;
  }
  
  public PolicyMappings(CertPolicyId issuerDomainPolicy, CertPolicyId subjectDomainPolicy) {
    this.seq = null;
    ASN1EncodableVector dv = new ASN1EncodableVector(2);
    dv.add(issuerDomainPolicy);
    dv.add(subjectDomainPolicy);
    this.seq = new DERSequence(new DERSequence(dv));
  }
  
  public PolicyMappings(CertPolicyId[] issuerDomainPolicy, CertPolicyId[] subjectDomainPolicy) {
    this.seq = null;
    ASN1EncodableVector dev = new ASN1EncodableVector(issuerDomainPolicy.length);
    for (int i = 0; i != issuerDomainPolicy.length; i++) {
      ASN1EncodableVector dv = new ASN1EncodableVector(2);
      dv.add(issuerDomainPolicy[i]);
      dv.add(subjectDomainPolicy[i]);
      dev.add(new DERSequence(dv));
    } 
    this.seq = new DERSequence(dev);
  }
  
  public ASN1Primitive toASN1Primitive() { return this.seq; }
}
