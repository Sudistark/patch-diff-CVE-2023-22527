package org.bouncycastle.asn1;

import java.io.IOException;
import java.util.Date;
import org.bouncycastle.util.Strings;

public class DERGeneralizedTime extends ASN1GeneralizedTime {
  public DERGeneralizedTime(byte[] time) { super(time); }
  
  public DERGeneralizedTime(Date time) { super(time); }
  
  public DERGeneralizedTime(String time) { super(time); }
  
  private byte[] getDERTime() {
    if (this.contents[this.contents.length - 1] == 90) {
      if (!hasMinutes()) {
        byte[] derTime = new byte[this.contents.length + 4];
        System.arraycopy(this.contents, 0, derTime, 0, this.contents.length - 1);
        System.arraycopy(Strings.toByteArray("0000Z"), 0, derTime, this.contents.length - 1, 5);
        return derTime;
      } 
      if (!hasSeconds()) {
        byte[] derTime = new byte[this.contents.length + 2];
        System.arraycopy(this.contents, 0, derTime, 0, this.contents.length - 1);
        System.arraycopy(Strings.toByteArray("00Z"), 0, derTime, this.contents.length - 1, 3);
        return derTime;
      } 
      if (hasFractionalSeconds()) {
        int ind = this.contents.length - 2;
        while (ind > 0 && this.contents[ind] == 48)
          ind--; 
        if (this.contents[ind] == 46) {
          byte[] derTime = new byte[ind + 1];
          System.arraycopy(this.contents, 0, derTime, 0, ind);
          derTime[ind] = 90;
          return derTime;
        } 
        byte[] derTime = new byte[ind + 2];
        System.arraycopy(this.contents, 0, derTime, 0, ind + 1);
        derTime[ind + 1] = 90;
        return derTime;
      } 
      return this.contents;
    } 
    return this.contents;
  }
  
  int encodedLength(boolean withTag) { return ASN1OutputStream.getLengthOfEncodingDL(withTag, getDERTime().length); }
  
  void encode(ASN1OutputStream out, boolean withTag) throws IOException { out.writeEncodingDL(withTag, 24, getDERTime()); }
  
  ASN1Primitive toDERObject() { return this; }
  
  ASN1Primitive toDLObject() { return this; }
}
