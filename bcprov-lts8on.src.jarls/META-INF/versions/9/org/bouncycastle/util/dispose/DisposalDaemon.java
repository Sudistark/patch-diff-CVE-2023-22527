package META-INF.versions.9.org.bouncycastle.util.dispose;

import java.lang.ref.ReferenceQueue;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.atomic.AtomicLong;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.bouncycastle.util.dispose.Disposable;
import org.bouncycastle.util.dispose.DisposalDaemon;

public class DisposalDaemon implements Runnable {
  private static final Logger LOG = Logger.getLogger(DisposalDaemon.class.getName());
  
  private static ReferenceQueue<Disposable> referenceQueue = new ReferenceQueue();
  
  private static Set<ReferenceWrapperWithDisposerRunnable> refs = Collections.synchronizedSet(new HashSet());
  
  private static AtomicLong ctr = new AtomicLong(Float.MIN_VALUE);
  
  private static final DisposalDaemon disposalDaemon = new DisposalDaemon();
  
  private static final Thread disposalThread = new Thread(disposalDaemon, "BC Disposal Daemon");
  
  static  {
    disposalThread.setDaemon(true);
    disposalThread.start();
    addShutdownHook();
  }
  
  private static void addShutdownHook() { Runtime.getRuntime().addShutdownHook(new Object()); }
  
  public static void addDisposable(Disposable disposable) {
    ReferenceWrapperWithDisposerRunnable ref = new ReferenceWrapperWithDisposerRunnable(disposable, referenceQueue);
    refs.add(ref);
    if (LOG.isLoggable(Level.FINE))
      LOG.fine("Registered: " + disposable.toString()); 
  }
  
  public void run() {
    while (true) {
      try {
        ReferenceWrapperWithDisposerRunnable item = (ReferenceWrapperWithDisposerRunnable)referenceQueue.remove();
        refs.remove(item);
        item.dispose();
        if (LOG.isLoggable(Level.FINE))
          LOG.fine("Disposed: " + item); 
      } catch (InterruptedException iex) {
        Thread.currentThread().interrupt();
      } catch (Throwable e) {
        LOG.warning("exception in disposal thread: " + e.getMessage());
      } 
    } 
  }
}
