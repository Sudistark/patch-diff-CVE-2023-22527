package META-INF.versions.9.org.bouncycastle.crypto.digests;

import org.bouncycastle.crypto.CryptoServiceProperties;
import org.bouncycastle.crypto.CryptoServicePurpose;
import org.bouncycastle.crypto.Xof;
import org.bouncycastle.crypto.digests.KeccakDigest;
import org.bouncycastle.crypto.digests.SHAKEDigest;
import org.bouncycastle.crypto.digests.Utils;

public class SHAKEDigest extends KeccakDigest implements Xof {
  private static int checkBitLength(int bitStrength) {
    switch (bitStrength) {
      case 128:
      case 256:
        return bitStrength;
    } 
    throw new IllegalArgumentException("'bitStrength' " + bitStrength + " not supported for SHAKE");
  }
  
  public SHAKEDigest() { this(128); }
  
  public SHAKEDigest(CryptoServicePurpose purpose) { this(128, purpose); }
  
  public SHAKEDigest(int bitStrength) { super(checkBitLength(bitStrength), CryptoServicePurpose.ANY); }
  
  public SHAKEDigest(int bitStrength, CryptoServicePurpose purpose) { super(checkBitLength(bitStrength), purpose); }
  
  public SHAKEDigest(SHAKEDigest source) { super(source); }
  
  public String getAlgorithmName() { return "SHAKE" + this.fixedOutputLength; }
  
  public int getDigestSize() { return this.fixedOutputLength / 4; }
  
  public int doFinal(byte[] out, int outOff) { return doFinal(out, outOff, getDigestSize()); }
  
  public int doFinal(byte[] out, int outOff, int outLen) {
    int length = doOutput(out, outOff, outLen);
    reset();
    return length;
  }
  
  public int doOutput(byte[] out, int outOff, int outLen) {
    if (!this.squeezing)
      absorbBits(15, 4); 
    squeeze(out, outOff, outLen * 8L);
    return outLen;
  }
  
  protected int doFinal(byte[] out, int outOff, byte partialByte, int partialBits) { return doFinal(out, outOff, getDigestSize(), partialByte, partialBits); }
  
  protected int doFinal(byte[] out, int outOff, int outLen, byte partialByte, int partialBits) {
    if (partialBits < 0 || partialBits > 7)
      throw new IllegalArgumentException("'partialBits' must be in the range [0,7]"); 
    int finalInput = partialByte & (1 << partialBits) - 1 | 15 << partialBits;
    int finalBits = partialBits + 4;
    if (finalBits >= 8) {
      absorb((byte)finalInput);
      finalBits -= 8;
      finalInput >>>= 8;
    } 
    if (finalBits > 0)
      absorbBits(finalInput, finalBits); 
    squeeze(out, outOff, outLen * 8L);
    reset();
    return outLen;
  }
  
  protected CryptoServiceProperties cryptoServiceProperties() { return Utils.getDefaultProperties(this, this.purpose); }
}
