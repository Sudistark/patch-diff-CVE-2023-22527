package META-INF.versions.9.org.bouncycastle.asn1.anssi;

import java.math.BigInteger;
import java.util.Enumeration;
import java.util.Hashtable;
import org.bouncycastle.asn1.ASN1ObjectIdentifier;
import org.bouncycastle.asn1.anssi.ANSSINamedCurves;
import org.bouncycastle.asn1.anssi.ANSSIObjectIdentifiers;
import org.bouncycastle.asn1.x9.X9ECParameters;
import org.bouncycastle.asn1.x9.X9ECParametersHolder;
import org.bouncycastle.asn1.x9.X9ECPoint;
import org.bouncycastle.math.ec.ECCurve;
import org.bouncycastle.math.ec.WNafUtil;
import org.bouncycastle.util.Strings;
import org.bouncycastle.util.encoders.Hex;

public class ANSSINamedCurves {
  private static X9ECPoint configureBasepoint(ECCurve curve, String encoding) {
    X9ECPoint G = new X9ECPoint(curve, Hex.decodeStrict(encoding));
    WNafUtil.configureBasepoint(G.getPoint());
    return G;
  }
  
  private static ECCurve configureCurve(ECCurve curve) { return curve; }
  
  private static BigInteger fromHex(String hex) { return new BigInteger(1, Hex.decodeStrict(hex)); }
  
  static X9ECParametersHolder FRP256v1 = new Object();
  
  static final Hashtable objIds = new Hashtable();
  
  static final Hashtable curves = new Hashtable();
  
  static final Hashtable names = new Hashtable();
  
  static void defineCurve(String name, ASN1ObjectIdentifier oid, X9ECParametersHolder holder) {
    objIds.put(Strings.toLowerCase(name), oid);
    names.put(oid, name);
    curves.put(oid, holder);
  }
  
  static  {
    defineCurve("FRP256v1", ANSSIObjectIdentifiers.FRP256v1, FRP256v1);
  }
  
  public static X9ECParameters getByName(String name) {
    ASN1ObjectIdentifier oid = getOID(name);
    return (oid == null) ? null : getByOID(oid);
  }
  
  public static X9ECParametersHolder getByNameLazy(String name) {
    ASN1ObjectIdentifier oid = getOID(name);
    return (oid == null) ? null : getByOIDLazy(oid);
  }
  
  public static X9ECParameters getByOID(ASN1ObjectIdentifier oid) {
    X9ECParametersHolder holder = getByOIDLazy(oid);
    return (holder == null) ? null : holder.getParameters();
  }
  
  public static X9ECParametersHolder getByOIDLazy(ASN1ObjectIdentifier oid) { return (X9ECParametersHolder)curves.get(oid); }
  
  public static ASN1ObjectIdentifier getOID(String name) { return (ASN1ObjectIdentifier)objIds.get(Strings.toLowerCase(name)); }
  
  public static String getName(ASN1ObjectIdentifier oid) { return (String)names.get(oid); }
  
  public static Enumeration getNames() { return names.elements(); }
}
