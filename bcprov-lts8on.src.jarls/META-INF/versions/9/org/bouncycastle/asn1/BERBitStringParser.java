package META-INF.versions.9.org.bouncycastle.asn1;

import java.io.IOException;
import java.io.InputStream;
import org.bouncycastle.asn1.ASN1BitStringParser;
import org.bouncycastle.asn1.ASN1ParsingException;
import org.bouncycastle.asn1.ASN1Primitive;
import org.bouncycastle.asn1.ASN1StreamParser;
import org.bouncycastle.asn1.BERBitString;
import org.bouncycastle.asn1.BERBitStringParser;
import org.bouncycastle.asn1.ConstructedBitStream;
import org.bouncycastle.util.io.Streams;

public class BERBitStringParser implements ASN1BitStringParser {
  private ASN1StreamParser _parser;
  
  private ConstructedBitStream _bitStream;
  
  BERBitStringParser(ASN1StreamParser parser) { this._parser = parser; }
  
  public InputStream getOctetStream() throws IOException { return this._bitStream = new ConstructedBitStream(this._parser, true); }
  
  public InputStream getBitStream() throws IOException { return this._bitStream = new ConstructedBitStream(this._parser, false); }
  
  public int getPadBits() { return this._bitStream.getPadBits(); }
  
  public ASN1Primitive getLoadedObject() throws IOException { return parse(this._parser); }
  
  public ASN1Primitive toASN1Primitive() throws IOException {
    try {
      return getLoadedObject();
    } catch (IOException e) {
      throw new ASN1ParsingException("IOException converting stream to byte array: " + e.getMessage(), e);
    } 
  }
  
  static BERBitString parse(ASN1StreamParser sp) throws IOException {
    ConstructedBitStream bitStream = new ConstructedBitStream(sp, false);
    byte[] data = Streams.readAll(bitStream);
    int padBits = bitStream.getPadBits();
    return new BERBitString(data, padBits);
  }
}
