package META-INF.versions.9.org.bouncycastle.asn1;

import java.io.IOException;
import org.bouncycastle.asn1.ASN1Encodable;
import org.bouncycastle.asn1.ASN1OutputStream;
import org.bouncycastle.asn1.ASN1Primitive;
import org.bouncycastle.asn1.ASN1PrintableString;
import org.bouncycastle.asn1.ASN1String;
import org.bouncycastle.asn1.ASN1TaggedObject;
import org.bouncycastle.asn1.ASN1UniversalType;
import org.bouncycastle.asn1.DERPrintableString;
import org.bouncycastle.util.Arrays;
import org.bouncycastle.util.Strings;

public abstract class ASN1PrintableString extends ASN1Primitive implements ASN1String {
  static final ASN1UniversalType TYPE = new Object(ASN1PrintableString.class, 19);
  
  final byte[] contents;
  
  public static ASN1PrintableString getInstance(Object obj) {
    if (obj == null || obj instanceof ASN1PrintableString)
      return (ASN1PrintableString)obj; 
    if (obj instanceof ASN1Encodable) {
      ASN1Primitive primitive = ((ASN1Encodable)obj).toASN1Primitive();
      if (primitive instanceof ASN1PrintableString)
        return (ASN1PrintableString)primitive; 
    } 
    if (obj instanceof byte[])
      try {
        return (ASN1PrintableString)TYPE.fromByteArray((byte[])obj);
      } catch (Exception e) {
        throw new IllegalArgumentException("encoding error in getInstance: " + e.toString());
      }  
    throw new IllegalArgumentException("illegal object in getInstance: " + obj.getClass().getName());
  }
  
  public static ASN1PrintableString getInstance(ASN1TaggedObject taggedObject, boolean explicit) { return (ASN1PrintableString)TYPE.getContextInstance(taggedObject, explicit); }
  
  ASN1PrintableString(String string, boolean validate) {
    if (validate && !isPrintableString(string))
      throw new IllegalArgumentException("string contains illegal characters"); 
    this.contents = Strings.toByteArray(string);
  }
  
  ASN1PrintableString(byte[] contents, boolean clone) { this.contents = clone ? Arrays.clone(contents) : contents; }
  
  public final String getString() { return Strings.fromByteArray(this.contents); }
  
  public final byte[] getOctets() { return Arrays.clone(this.contents); }
  
  final boolean encodeConstructed() { return false; }
  
  final int encodedLength(boolean withTag) { return ASN1OutputStream.getLengthOfEncodingDL(withTag, this.contents.length); }
  
  final void encode(ASN1OutputStream out, boolean withTag) throws IOException { out.writeEncodingDL(withTag, 19, this.contents); }
  
  final boolean asn1Equals(ASN1Primitive other) {
    if (!(other instanceof ASN1PrintableString))
      return false; 
    ASN1PrintableString that = (ASN1PrintableString)other;
    return Arrays.areEqual(this.contents, that.contents);
  }
  
  public final int hashCode() { return Arrays.hashCode(this.contents); }
  
  public String toString() { return getString(); }
  
  public static boolean isPrintableString(String str) {
    for (int i = str.length() - 1; i >= 0; i--) {
      char ch = str.charAt(i);
      if (ch > '')
        return false; 
      if ('a' > ch || ch > 'z')
        if ('A' > ch || ch > 'Z')
          if ('0' > ch || ch > '9')
            switch (ch) {
              case ' ':
              case '\'':
              case '(':
              case ')':
              case '+':
              case ',':
              case '-':
              case '.':
              case '/':
              case ':':
              case '=':
              case '?':
                break;
              default:
                return false;
            }    
    } 
    return true;
  }
  
  static ASN1PrintableString createPrimitive(byte[] contents) { return new DERPrintableString(contents, false); }
}
