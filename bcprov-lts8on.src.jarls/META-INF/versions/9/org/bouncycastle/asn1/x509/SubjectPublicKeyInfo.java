package META-INF.versions.9.org.bouncycastle.asn1.x509;

import java.io.IOException;
import java.util.Enumeration;
import org.bouncycastle.asn1.ASN1BitString;
import org.bouncycastle.asn1.ASN1Encodable;
import org.bouncycastle.asn1.ASN1EncodableVector;
import org.bouncycastle.asn1.ASN1Object;
import org.bouncycastle.asn1.ASN1Primitive;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.ASN1TaggedObject;
import org.bouncycastle.asn1.DERBitString;
import org.bouncycastle.asn1.DERSequence;
import org.bouncycastle.asn1.x509.AlgorithmIdentifier;
import org.bouncycastle.asn1.x509.SubjectPublicKeyInfo;

public class SubjectPublicKeyInfo extends ASN1Object {
  private AlgorithmIdentifier algId;
  
  private ASN1BitString keyData;
  
  public static SubjectPublicKeyInfo getInstance(ASN1TaggedObject obj, boolean explicit) { return getInstance(ASN1Sequence.getInstance(obj, explicit)); }
  
  public static SubjectPublicKeyInfo getInstance(Object obj) {
    if (obj instanceof SubjectPublicKeyInfo)
      return (SubjectPublicKeyInfo)obj; 
    if (obj != null)
      return new SubjectPublicKeyInfo(ASN1Sequence.getInstance(obj)); 
    return null;
  }
  
  public SubjectPublicKeyInfo(AlgorithmIdentifier algId, ASN1Encodable publicKey) throws IOException {
    this.keyData = new DERBitString(publicKey);
    this.algId = algId;
  }
  
  public SubjectPublicKeyInfo(AlgorithmIdentifier algId, byte[] publicKey) {
    this.keyData = new DERBitString(publicKey);
    this.algId = algId;
  }
  
  private SubjectPublicKeyInfo(ASN1Sequence seq) {
    if (seq.size() != 2)
      throw new IllegalArgumentException("Bad sequence size: " + seq
          .size()); 
    Enumeration e = seq.getObjects();
    this.algId = AlgorithmIdentifier.getInstance(e.nextElement());
    this.keyData = ASN1BitString.getInstance(e.nextElement());
  }
  
  public AlgorithmIdentifier getAlgorithm() { return this.algId; }
  
  public ASN1Primitive parsePublicKey() throws IOException { return ASN1Primitive.fromByteArray(this.keyData.getOctets()); }
  
  public ASN1BitString getPublicKeyData() { return this.keyData; }
  
  public ASN1Primitive toASN1Primitive() throws IOException {
    ASN1EncodableVector v = new ASN1EncodableVector(2);
    v.add(this.algId);
    v.add(this.keyData);
    return new DERSequence(v);
  }
}
