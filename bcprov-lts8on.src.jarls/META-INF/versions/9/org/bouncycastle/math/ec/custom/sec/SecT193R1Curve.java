package META-INF.versions.9.org.bouncycastle.math.ec.custom.sec;

import java.math.BigInteger;
import org.bouncycastle.math.ec.ECConstants;
import org.bouncycastle.math.ec.ECCurve;
import org.bouncycastle.math.ec.ECFieldElement;
import org.bouncycastle.math.ec.ECLookupTable;
import org.bouncycastle.math.ec.ECPoint;
import org.bouncycastle.math.ec.custom.sec.SecT193FieldElement;
import org.bouncycastle.math.ec.custom.sec.SecT193R1Curve;
import org.bouncycastle.math.ec.custom.sec.SecT193R1Point;
import org.bouncycastle.math.raw.Nat256;
import org.bouncycastle.util.encoders.Hex;

public class SecT193R1Curve extends ECCurve.AbstractF2m {
  private static final int SECT193R1_DEFAULT_COORDS = 6;
  
  private static final ECFieldElement[] SECT193R1_AFFINE_ZS = { new SecT193FieldElement(ECConstants.ONE) };
  
  protected SecT193R1Point infinity;
  
  public SecT193R1Curve() {
    super(193, 15, 0, 0);
    this.infinity = new SecT193R1Point(this, null, null);
    this.a = fromBigInteger(new BigInteger(1, Hex.decodeStrict("0017858FEB7A98975169E171F77B4087DE098AC8A911DF7B01")));
    this.b = fromBigInteger(new BigInteger(1, Hex.decodeStrict("00FDFB49BFE6C3A89FACADAA7A1E5BBC7CC1C2E5D831478814")));
    this.order = new BigInteger(1, Hex.decodeStrict("01000000000000000000000000C7F34A778F443ACC920EBA49"));
    this.cofactor = BigInteger.valueOf(2L);
    this.coord = 6;
  }
  
  protected ECCurve cloneCurve() { return new SecT193R1Curve(); }
  
  public boolean supportsCoordinateSystem(int coord) {
    switch (coord) {
      case 6:
        return true;
    } 
    return false;
  }
  
  public int getFieldSize() { return 193; }
  
  public ECFieldElement fromBigInteger(BigInteger x) { return new SecT193FieldElement(x); }
  
  protected ECPoint createRawPoint(ECFieldElement x, ECFieldElement y) { return new SecT193R1Point(this, x, y); }
  
  protected ECPoint createRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs) { return new SecT193R1Point(this, x, y, zs); }
  
  public ECPoint getInfinity() { return this.infinity; }
  
  public boolean isKoblitz() { return false; }
  
  public int getM() { return 193; }
  
  public boolean isTrinomial() { return true; }
  
  public int getK1() { return 15; }
  
  public int getK2() { return 0; }
  
  public int getK3() { return 0; }
  
  public ECLookupTable createCacheSafeLookupTable(ECPoint[] points, int off, int len) {
    int FE_LONGS = 4;
    long[] table = new long[len * 4 * 2];
    int pos = 0;
    for (int i = 0; i < len; i++) {
      ECPoint p = points[off + i];
      Nat256.copy64(((SecT193FieldElement)p.getRawXCoord()).x, 0, table, pos);
      pos += 4;
      Nat256.copy64(((SecT193FieldElement)p.getRawYCoord()).x, 0, table, pos);
      pos += 4;
    } 
    return new Object(this, len, table);
  }
}
