import com.atlassian.annotations.nullability.ParametersAreNonnullByDefault;
import com.atlassian.annotations.nullability.ReturnValuesAreNonnullByDefault;
import com.atlassian.config.util.BootstrapUtils;
import com.atlassian.confluence.core.ConfluenceSystemProperties;
import com.atlassian.confluence.impl.webapp.sudo.WebSudoEnforcer;
import com.atlassian.confluence.impl.webapp.sudo.WebSudoFilter;
import com.atlassian.confluence.internal.spaces.SpaceManagerInternal;
import com.atlassian.confluence.security.PermissionManager;
import com.atlassian.confluence.security.websudo.WebSudoManager;
import com.atlassian.confluence.util.GeneralUtil;
import com.atlassian.spring.container.ContainerManager;
import com.atlassian.spring.container.LazyComponentReference;
import com.atlassian.util.concurrent.Supplier;
import java.io.IOException;
import java.net.URI;
import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpFilter;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts2.dispatcher.Dispatcher;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@ParametersAreNonnullByDefault
@ReturnValuesAreNonnullByDefault
public final class WebSudoFilter extends HttpFilter {
  private static final Logger log = LoggerFactory.getLogger(WebSudoFilter.class);
  
  private final Supplier<WebSudoManager> webSudoManagerRef = new LazyComponentReference("webSudoManager");
  
  private final Supplier<ClassLoader> classLoaderRef = new LazyComponentReference("uberClassLoader");
  
  private final Supplier<PermissionManager> permissionManagerRef = new LazyComponentReference("permissionManager");
  
  private final Supplier<SpaceManagerInternal> spaceManagerRef = new LazyComponentReference("spaceManager");
  
  private boolean isSetupComplete = false;
  
  public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {
    if (!isSetupComplete()) {
      log.debug("Skipping websudo check; dev mode or setup incomplete");
      chain.doFilter(request, response);
      return;
    } 
    URI redirectUri = createEnforcer().enforceWebSudo(request, response);
    if (redirectUri != null) {
      response.sendRedirect(redirectUri.toString());
      return;
    } 
    chain.doFilter(request, response);
  }
  
  WebSudoEnforcer createEnforcer() {
    return new WebSudoEnforcer((WebSudoManager)this.webSudoManagerRef
        .get(), (ClassLoader)this.classLoaderRef.get(), (PermissionManager)this.permissionManagerRef.get(), 
        (Dispatcher)BootstrapUtils.getBootstrapContext().getBean("strutsDispatcher", Dispatcher.class), (SpaceManagerInternal)this.spaceManagerRef.get());
  }
  
  private boolean isSetupComplete() {
    if (this.isSetupComplete)
      return true; 
    this.isSetupComplete = (!ConfluenceSystemProperties.isDevMode() && ContainerManager.isContainerSetup() && GeneralUtil.isSetupComplete());
    return this.isSetupComplete;
  }
}
