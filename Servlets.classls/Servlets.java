import com.atlassian.confluence.impl.webapp.ServletContextRegistrar;
import com.atlassian.confluence.impl.webapp.ServletRegistrar;
import com.atlassian.confluence.impl.webapp.Servlets;
import com.atlassian.confluence.impl.webapp.UrlPattern;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;

static enum Servlets {
  CSS_SERVLET(ServletRegistrar.servlet("css", com.atlassian.confluence.servlet.CssServlet.class)
    .loadOnStartup(10)
    .mapping(new UrlPattern[] { UrlPattern.CSS })),
  JSP_SUPPORT_SERVLET(ServletRegistrar.servlet("jsp-support-servlet", org.apache.struts2.views.JspSupportServlet.class)
    .loadOnStartup(1)),
  VELOCITY_SERVLET(ServletRegistrar.servlet("velocity", com.atlassian.confluence.servlet.ConfluenceVelocityServlet.class)
    .loadOnStartup(2)
    .mapping(new UrlPattern[] { UrlPattern.VELOCITY })),
  SIMPLE_DISPLAY(ServletRegistrar.servlet("simple-display", com.atlassian.confluence.servlet.SpringManagedServlet.class)
    .initParam("springComponentName", "simpleDisplayServlet")
    .loadOnStartup(3)
    .mapping(new UrlPattern[] { UrlPattern.DISPLAY })),
  TINY_URL_SERVLET(ServletRegistrar.servlet("tiny-url", com.atlassian.confluence.servlet.TinyUrlServlet.class)
    .loadOnStartup(3)
    .mapping(new UrlPattern[] { UrlPattern.TINY_URL })),
  FILE_SERVER(ServletRegistrar.servlet("file-server", com.atlassian.confluence.servlet.FileServerServlet.class)
    .loadOnStartup(4)
    .mapping(new UrlPattern[] { UrlPattern.DOWNLOAD })),
  STATUS_SERVLET(ServletRegistrar.servlet("status-servlet", com.atlassian.confluence.servlet.ApplicationStatusServlet.class)
    .loadOnStartup(5)
    .mapping(new UrlPattern[] { UrlPattern.STATUS })),
  XML_RPC_SERVLET(ServletRegistrar.servlet("xmlrpc", com.atlassian.confluence.servlet.SpringManagedServlet.class)
    .initParam("springComponentName", "xmlRpcServer")
    .loadOnStartup(6)
    .mapping(new UrlPattern[] { UrlPattern.XML_RPC })),
  PLUGIN_SERVLETS(ServletRegistrar.servlet("servlet-module-container-servlet", com.atlassian.confluence.servlet.ServletModuleContainerServlet.class)
    .loadOnStartup(9)
    .mapping(new UrlPattern[] { UrlPattern.PLUGIN_SERVLET })),
  LABELS_SERVLET(ServletRegistrar.servlet("labels", com.atlassian.confluence.servlet.LabelServlet.class)
    .loadOnStartup(9)
    .mapping(new UrlPattern[] { UrlPattern.LABELS })),
  JCAPTCHA_SERVLET(ServletRegistrar.servlet("jcaptcha", com.atlassian.confluence.servlet.ImageCaptchaServlet.class)
    .loadOnStartup(0)
    .mapping(new UrlPattern[] { UrlPattern.JCAPTCHA })),
  EXPORTWORD_SERVLET(ServletRegistrar.servlet("exportword", com.atlassian.confluence.servlet.SpringManagedServlet.class)
    .initParam("springComponentName", "exportWordPageServer")
    .mapping(new UrlPattern[] { UrlPattern.EXPORTWORD })),
  NOOP(ServletRegistrar.servlet("noop", com.atlassian.confluence.servlet.ConfluenceNoOpServlet.class)
    .loadOnStartup(0)
    .mapping(new UrlPattern[] { UrlPattern.STATIC }).mapping(new UrlPattern[] { UrlPattern.ADMIN_APP_TRUST_CERTIFICATE }).mapping(new UrlPattern[] { UrlPattern.REST })),
  JOHNSON_ANALYTICS_SERVLET(ServletRegistrar.servlet("johnson-analytics-servlet", com.atlassian.confluence.servlet.JohnsonAnalyticsServlet.class)
    .mapping(new UrlPattern[] { UrlPattern.JOHNSON_ANALYTICS })),
  JOHNSON_DATA_SERVLET(ServletRegistrar.servlet("johnson-data-servlet", com.atlassian.confluence.servlet.JohnsonDataServlet.class)
    .mapping(new UrlPattern[] { UrlPattern.JOHNSON_DATA })),
  JOHNSON_DISMISS_EVENTS_SERVLET(ServletRegistrar.servlet("johnson-dismiss-events-servlet", com.atlassian.confluence.servlet.JohnsonDismissEventsServlet.class)
    .mapping(new UrlPattern[] { UrlPattern.JOHNSON_DISMISS_EVENTS })),
  FINAL(ServletRegistrar.servlet("final-servlet", com.atlassian.confluence.servlet.ReadyToServeServlet.class)
    .loadOnStartup(100));
  
  private final ServletContextRegistrar registrar;
  
  Servlets(ServletContextRegistrar registrar) { this.registrar = registrar; }
  
  static void registerAll(ServletContext servletContext) throws ServletException {
    for (Servlets servlet : values())
      servlet.registrar.register(servletContext); 
  }
}
