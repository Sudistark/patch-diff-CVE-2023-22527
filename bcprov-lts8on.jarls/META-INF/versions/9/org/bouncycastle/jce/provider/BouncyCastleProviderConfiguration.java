package META-INF.versions.9.org.bouncycastle.jce.provider;

import java.security.Permission;
import java.security.spec.DSAParameterSpec;
import java.security.spec.ECParameterSpec;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import javax.crypto.spec.DHParameterSpec;
import org.bouncycastle.crypto.CryptoServicesRegistrar;
import org.bouncycastle.crypto.params.DHParameters;
import org.bouncycastle.crypto.params.DSAParameters;
import org.bouncycastle.jcajce.provider.asymmetric.util.EC5Util;
import org.bouncycastle.jcajce.provider.config.ProviderConfiguration;
import org.bouncycastle.jcajce.provider.config.ProviderConfigurationPermission;
import org.bouncycastle.jcajce.spec.DHDomainParameterSpec;
import org.bouncycastle.jce.provider.BouncyCastleProviderConfiguration;
import org.bouncycastle.jce.spec.ECParameterSpec;

class BouncyCastleProviderConfiguration implements ProviderConfiguration {
  private static Permission BC_EC_LOCAL_PERMISSION = new ProviderConfigurationPermission("BC", "threadLocalEcImplicitlyCa");
  
  private static Permission BC_EC_PERMISSION = new ProviderConfigurationPermission("BC", "ecImplicitlyCa");
  
  private static Permission BC_DH_LOCAL_PERMISSION = new ProviderConfigurationPermission("BC", "threadLocalDhDefaultParams");
  
  private static Permission BC_DH_PERMISSION = new ProviderConfigurationPermission("BC", "DhDefaultParams");
  
  private static Permission BC_EC_CURVE_PERMISSION = new ProviderConfigurationPermission("BC", "acceptableEcCurves");
  
  private static Permission BC_ADDITIONAL_EC_CURVE_PERMISSION = new ProviderConfigurationPermission("BC", "additionalEcParameters");
  
  private ThreadLocal ecThreadSpec = new ThreadLocal();
  
  private ThreadLocal dhThreadSpec = new ThreadLocal();
  
  void setParameter(String parameterName, Object parameter) {
    SecurityManager securityManager = System.getSecurityManager();
    if (parameterName.equals("threadLocalEcImplicitlyCa")) {
      ECParameterSpec curveSpec;
      if (securityManager != null)
        securityManager.checkPermission(BC_EC_LOCAL_PERMISSION); 
      if (parameter instanceof ECParameterSpec || parameter == null) {
        curveSpec = (ECParameterSpec)parameter;
      } else {
        curveSpec = EC5Util.convertSpec((ECParameterSpec)parameter);
      } 
      if (curveSpec == null) {
        this.ecThreadSpec.remove();
      } else {
        this.ecThreadSpec.set(curveSpec);
      } 
    } else if (parameterName.equals("ecImplicitlyCa")) {
      if (securityManager != null)
        securityManager.checkPermission(BC_EC_PERMISSION); 
      if (parameter instanceof ECParameterSpec || parameter == null) {
        this.ecImplicitCaParams = (ECParameterSpec)parameter;
      } else {
        this.ecImplicitCaParams = EC5Util.convertSpec((ECParameterSpec)parameter);
      } 
    } else if (parameterName.equals("threadLocalDhDefaultParams")) {
      Object dhSpec;
      if (securityManager != null)
        securityManager.checkPermission(BC_DH_LOCAL_PERMISSION); 
      if (parameter instanceof DHParameterSpec || parameter instanceof DHParameterSpec[] || parameter == null) {
        dhSpec = parameter;
      } else {
        throw new IllegalArgumentException("not a valid DHParameterSpec");
      } 
      if (dhSpec == null) {
        this.dhThreadSpec.remove();
      } else {
        this.dhThreadSpec.set(dhSpec);
      } 
    } else if (parameterName.equals("DhDefaultParams")) {
      if (securityManager != null)
        securityManager.checkPermission(BC_DH_PERMISSION); 
      if (parameter instanceof DHParameterSpec || parameter instanceof DHParameterSpec[] || parameter == null) {
        this.dhDefaultParams = parameter;
      } else {
        throw new IllegalArgumentException("not a valid DHParameterSpec or DHParameterSpec[]");
      } 
    } else if (parameterName.equals("acceptableEcCurves")) {
      if (securityManager != null)
        securityManager.checkPermission(BC_EC_CURVE_PERMISSION); 
      this.acceptableNamedCurves = (Set)parameter;
    } else if (parameterName.equals("additionalEcParameters")) {
      if (securityManager != null)
        securityManager.checkPermission(BC_ADDITIONAL_EC_CURVE_PERMISSION); 
      this.additionalECParameters = (Map)parameter;
    } 
  }
  
  public ECParameterSpec getEcImplicitlyCa() {
    ECParameterSpec spec = (ECParameterSpec)this.ecThreadSpec.get();
    if (spec != null)
      return spec; 
    return this.ecImplicitCaParams;
  }
  
  public DHParameterSpec getDHDefaultParameters(int keySize) {
    Object params = this.dhThreadSpec.get();
    if (params == null)
      params = this.dhDefaultParams; 
    if (params instanceof DHParameterSpec) {
      DHParameterSpec spec = (DHParameterSpec)params;
      if (spec.getP().bitLength() == keySize)
        return spec; 
    } else if (params instanceof DHParameterSpec[]) {
      DHParameterSpec[] specs = (DHParameterSpec[])params;
      for (int i = 0; i != specs.length; i++) {
        if (specs[i].getP().bitLength() == keySize)
          return specs[i]; 
      } 
    } 
    DHParameters dhParams = (DHParameters)CryptoServicesRegistrar.getSizedProperty(CryptoServicesRegistrar.Property.DH_DEFAULT_PARAMS, keySize);
    if (dhParams != null)
      return new DHDomainParameterSpec(dhParams); 
    return null;
  }
  
  public DSAParameterSpec getDSADefaultParameters(int keySize) {
    DSAParameters dsaParams = (DSAParameters)CryptoServicesRegistrar.getSizedProperty(CryptoServicesRegistrar.Property.DSA_DEFAULT_PARAMS, keySize);
    if (dsaParams != null)
      return new DSAParameterSpec(dsaParams.getP(), dsaParams.getQ(), dsaParams.getG()); 
    return null;
  }
  
  public Set getAcceptableNamedCurves() { return Collections.unmodifiableSet(this.acceptableNamedCurves); }
  
  public Map getAdditionalECParameters() { return Collections.unmodifiableMap(this.additionalECParameters); }
}
