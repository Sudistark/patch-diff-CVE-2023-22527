package META-INF.versions.9.org.bouncycastle.math.ec.custom.sec;

import java.math.BigInteger;
import java.security.SecureRandom;
import org.bouncycastle.math.ec.ECConstants;
import org.bouncycastle.math.ec.ECCurve;
import org.bouncycastle.math.ec.ECFieldElement;
import org.bouncycastle.math.ec.ECLookupTable;
import org.bouncycastle.math.ec.ECPoint;
import org.bouncycastle.math.ec.custom.sec.SecP224K1Curve;
import org.bouncycastle.math.ec.custom.sec.SecP224K1Field;
import org.bouncycastle.math.ec.custom.sec.SecP224K1FieldElement;
import org.bouncycastle.math.ec.custom.sec.SecP224K1Point;
import org.bouncycastle.math.raw.Nat224;
import org.bouncycastle.util.encoders.Hex;

public class SecP224K1Curve extends ECCurve.AbstractFp {
  public static final BigInteger q = SecP224K1FieldElement.Q;
  
  private static final int SECP224K1_DEFAULT_COORDS = 2;
  
  private static final ECFieldElement[] SECP224K1_AFFINE_ZS = { new SecP224K1FieldElement(ECConstants.ONE) };
  
  protected SecP224K1Point infinity;
  
  public SecP224K1Curve() {
    super(q);
    this.infinity = new SecP224K1Point(this, null, null);
    this.a = fromBigInteger(ECConstants.ZERO);
    this.b = fromBigInteger(BigInteger.valueOf(5L));
    this.order = new BigInteger(1, Hex.decodeStrict("010000000000000000000000000001DCE8D2EC6184CAF0A971769FB1F7"));
    this.cofactor = BigInteger.valueOf(1L);
    this.coord = 2;
  }
  
  protected ECCurve cloneCurve() { return new SecP224K1Curve(); }
  
  public boolean supportsCoordinateSystem(int coord) {
    switch (coord) {
      case 2:
        return true;
    } 
    return false;
  }
  
  public BigInteger getQ() { return q; }
  
  public int getFieldSize() { return q.bitLength(); }
  
  public ECFieldElement fromBigInteger(BigInteger x) { return new SecP224K1FieldElement(x); }
  
  protected ECPoint createRawPoint(ECFieldElement x, ECFieldElement y) { return new SecP224K1Point(this, x, y); }
  
  protected ECPoint createRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs) { return new SecP224K1Point(this, x, y, zs); }
  
  public ECPoint getInfinity() { return this.infinity; }
  
  public ECLookupTable createCacheSafeLookupTable(ECPoint[] points, int off, int len) {
    int FE_INTS = 7;
    int[] table = new int[len * 7 * 2];
    int pos = 0;
    for (int i = 0; i < len; i++) {
      ECPoint p = points[off + i];
      Nat224.copy(((SecP224K1FieldElement)p.getRawXCoord()).x, 0, table, pos);
      pos += 7;
      Nat224.copy(((SecP224K1FieldElement)p.getRawYCoord()).x, 0, table, pos);
      pos += 7;
    } 
    return new Object(this, len, table);
  }
  
  public ECFieldElement randomFieldElement(SecureRandom r) {
    int[] x = Nat224.create();
    SecP224K1Field.random(r, x);
    return new SecP224K1FieldElement(x);
  }
  
  public ECFieldElement randomFieldElementMult(SecureRandom r) {
    int[] x = Nat224.create();
    SecP224K1Field.randomMult(r, x);
    return new SecP224K1FieldElement(x);
  }
}
