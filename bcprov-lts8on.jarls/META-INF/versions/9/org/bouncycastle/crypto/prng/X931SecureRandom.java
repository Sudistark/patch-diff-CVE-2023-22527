package META-INF.versions.9.org.bouncycastle.crypto.prng;

import java.security.SecureRandom;
import org.bouncycastle.crypto.prng.EntropyUtil;
import org.bouncycastle.crypto.prng.X931RNG;
import org.bouncycastle.crypto.prng.X931SecureRandom;

public class X931SecureRandom extends SecureRandom {
  private final boolean predictionResistant;
  
  private final SecureRandom randomSource;
  
  private final X931RNG drbg;
  
  X931SecureRandom(SecureRandom randomSource, X931RNG drbg, boolean predictionResistant) {
    this.randomSource = randomSource;
    this.drbg = drbg;
    this.predictionResistant = predictionResistant;
  }
  
  public void setSeed(byte[] seed) {
    synchronized (this) {
      if (this.randomSource != null)
        this.randomSource.setSeed(seed); 
    } 
  }
  
  public void setSeed(long seed) {
    synchronized (this) {
      if (this.randomSource != null)
        this.randomSource.setSeed(seed); 
    } 
  }
  
  public void nextBytes(byte[] bytes) {
    synchronized (this) {
      if (this.drbg.generate(bytes, this.predictionResistant) < 0) {
        this.drbg.reseed();
        this.drbg.generate(bytes, this.predictionResistant);
      } 
    } 
  }
  
  public byte[] generateSeed(int numBytes) { return EntropyUtil.generateSeed(this.drbg.getEntropySource(), numBytes); }
}
