package META-INF.versions.9.org.bouncycastle.crypto;

import java.util.Collections;
import java.util.Set;
import java.util.TreeSet;
import org.bouncycastle.crypto.DefaultNativeServices;
import org.bouncycastle.crypto.NativeFeatures;
import org.bouncycastle.crypto.NativeLibIdentity;
import org.bouncycastle.crypto.NativeLoader;
import org.bouncycastle.crypto.NativeServices;
import org.bouncycastle.crypto.VariantSelector;

class DefaultNativeServices implements NativeServices {
  private static Set<String> nativeFeatures = null;
  
  public String getStatusMessage() {
    if (NativeLoader.isNativeLibsAvailableForSystem()) {
      if (NativeLoader.isNativeInstalled())
        return "READY"; 
      return NativeLoader.getNativeStatusMessage();
    } 
    return "UNSUPPORTED";
  }
  
  public Set<String> getFeatureSet() { return getNativeFeatureSet(); }
  
  public String getVariant() { return NativeLoader.getSelectedVariant(); }
  
  public String[][] getVariantSelectionMatrix() { return VariantSelector.getFeatureMatrix(); }
  
  public boolean hasService(String feature) {
    if (nativeFeatures == null)
      if (NativeLoader.isJavaSupportOnly()) {
        nativeFeatures = Collections.singleton("NONE");
      } else {
        nativeFeatures = getNativeFeatureSet();
      }  
    return nativeFeatures.contains(feature);
  }
  
  public String getBuildDate() { return NativeLibIdentity.getNativeBuiltTimeStamp(); }
  
  public String getLibraryIdent() { return NativeLibIdentity.getLibraryIdent(); }
  
  public boolean isEnabled() { return NativeLoader.isNativeAvailable(); }
  
  public boolean isInstalled() { return NativeLoader.isNativeInstalled(); }
  
  public boolean isSupported() { return NativeLoader.isNativeLibsAvailableForSystem(); }
  
  static Set<String> getNativeFeatureSet() {
    set = new TreeSet();
    if (!NativeLoader.isJavaSupportOnly()) {
      if (NativeFeatures.hasHardwareSeed())
        set.add("NRBG"); 
      if (NativeFeatures.hasHardwareRand())
        set.add("DRBG"); 
      if (NativeFeatures.hasAESHardwareSupport())
        set.add("AES/ECB"); 
      if (NativeFeatures.hasGCMHardwareSupport())
        set.add("AES/GCM"); 
      if (NativeFeatures.hasCBCHardwareSupport())
        set.add("AES/CBC"); 
      if (NativeFeatures.hasCFBHardwareSupport())
        set.add("AES/CFB"); 
      if (NativeFeatures.hasCTRHardwareSupport())
        set.add("AES/CTR"); 
      if (NativeFeatures.hasHardwareSHA())
        set.add("SHA2"); 
      if (NativeFeatures.hasMultiplyAcc())
        set.add("MULACC"); 
    } 
    if (set.isEmpty())
      set.add("NONE"); 
    return Collections.unmodifiableSet(set);
  }
}
