package META-INF.versions.9.org.bouncycastle.asn1;

import java.io.ByteArrayInputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.channels.FileChannel;
import org.bouncycastle.asn1.ASN1InputStream;
import org.bouncycastle.asn1.LimitedInputStream;

class StreamUtil {
  static int findLimit(InputStream in) {
    if (in instanceof LimitedInputStream)
      return ((LimitedInputStream)in).getLimit(); 
    if (in instanceof ASN1InputStream)
      return ((ASN1InputStream)in).getLimit(); 
    if (in instanceof ByteArrayInputStream)
      return ((ByteArrayInputStream)in).available(); 
    if (in instanceof FileInputStream)
      try {
        FileChannel channel = ((FileInputStream)in).getChannel();
        long size = (channel != null) ? channel.size() : 2147483647L;
        if (size < 2147483647L)
          return (int)size; 
      } catch (IOException iOException) {} 
    long maxMemory = Runtime.getRuntime().maxMemory();
    if (maxMemory > 2147483647L)
      return Integer.MAX_VALUE; 
    return (int)maxMemory;
  }
}
