package META-INF.versions.9.org.bouncycastle.asn1;

import java.io.IOException;
import org.bouncycastle.asn1.ASN1BitString;
import org.bouncycastle.asn1.ASN1Encodable;
import org.bouncycastle.asn1.ASN1EncodableVector;
import org.bouncycastle.asn1.ASN1External;
import org.bouncycastle.asn1.ASN1OctetString;
import org.bouncycastle.asn1.ASN1OutputStream;
import org.bouncycastle.asn1.ASN1Primitive;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.ASN1Set;
import org.bouncycastle.asn1.BERBitString;
import org.bouncycastle.asn1.BEROctetString;
import org.bouncycastle.asn1.BERSequence;
import org.bouncycastle.asn1.BERSet;

public class BERSequence extends ASN1Sequence {
  public BERSequence() {}
  
  public BERSequence(ASN1Encodable element) { super(element); }
  
  public BERSequence(ASN1EncodableVector elementVector) { super(elementVector); }
  
  public BERSequence(ASN1Encodable[] elements) { super(elements); }
  
  int encodedLength(boolean withTag) throws IOException {
    int totalLength = withTag ? 4 : 3;
    for (int i = 0, count = this.elements.length; i < count; i++) {
      ASN1Primitive p = this.elements[i].toASN1Primitive();
      totalLength += p.encodedLength(true);
    } 
    return totalLength;
  }
  
  void encode(ASN1OutputStream out, boolean withTag) throws IOException { out.writeEncodingIL(withTag, 48, this.elements); }
  
  ASN1BitString toASN1BitString() { return new BERBitString(getConstructedBitStrings()); }
  
  ASN1External toASN1External() { return ((ASN1Sequence)toDLObject()).toASN1External(); }
  
  ASN1OctetString toASN1OctetString() { return new BEROctetString(getConstructedOctetStrings()); }
  
  ASN1Set toASN1Set() { return new BERSet(false, toArrayInternal()); }
}
