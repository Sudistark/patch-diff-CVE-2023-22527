package META-INF.versions.9.org.bouncycastle.asn1;

import org.bouncycastle.asn1.ASN1EncodableVector;
import org.bouncycastle.asn1.ASN1External;
import org.bouncycastle.asn1.ASN1Integer;
import org.bouncycastle.asn1.ASN1ObjectIdentifier;
import org.bouncycastle.asn1.ASN1Primitive;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.DERTaggedObject;
import org.bouncycastle.asn1.DLExternal;
import org.bouncycastle.asn1.DLSequence;
import org.bouncycastle.asn1.DLTaggedObject;

public class DLExternal extends ASN1External {
  public DLExternal(DLSequence sequence) { super(sequence); }
  
  public DLExternal(ASN1ObjectIdentifier directReference, ASN1Integer indirectReference, ASN1Primitive dataValueDescriptor, DERTaggedObject externalData) { super(directReference, indirectReference, dataValueDescriptor, externalData); }
  
  public DLExternal(ASN1ObjectIdentifier directReference, ASN1Integer indirectReference, ASN1Primitive dataValueDescriptor, int encoding, ASN1Primitive externalData) { super(directReference, indirectReference, dataValueDescriptor, encoding, externalData); }
  
  ASN1Sequence buildSequence() {
    ASN1EncodableVector v = new ASN1EncodableVector(4);
    if (this.directReference != null)
      v.add(this.directReference); 
    if (this.indirectReference != null)
      v.add(this.indirectReference); 
    if (this.dataValueDescriptor != null)
      v.add(this.dataValueDescriptor.toDLObject()); 
    v.add(new DLTaggedObject((0 == this.encoding), this.encoding, this.externalContent));
    return new DLSequence(v);
  }
  
  ASN1Primitive toDLObject() { return this; }
}
