package META-INF.versions.9.org.bouncycastle.asn1;

import java.io.IOException;
import org.bouncycastle.asn1.ASN1Encodable;
import org.bouncycastle.asn1.ASN1OutputStream;
import org.bouncycastle.asn1.ASN1Primitive;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.ASN1TaggedObject;
import org.bouncycastle.asn1.DERSequence;
import org.bouncycastle.asn1.DERTaggedObject;

public class DERTaggedObject extends ASN1TaggedObject {
  public DERTaggedObject(int tagNo, ASN1Encodable encodable) { super(true, tagNo, encodable); }
  
  public DERTaggedObject(int tagClass, int tagNo, ASN1Encodable obj) { super(true, tagClass, tagNo, obj); }
  
  public DERTaggedObject(boolean explicit, int tagNo, ASN1Encodable obj) { super(explicit, tagNo, obj); }
  
  public DERTaggedObject(boolean explicit, int tagClass, int tagNo, ASN1Encodable obj) { super(explicit, tagClass, tagNo, obj); }
  
  DERTaggedObject(int explicitness, int tagClass, int tagNo, ASN1Encodable obj) { super(explicitness, tagClass, tagNo, obj); }
  
  boolean encodeConstructed() { return (isExplicit() || this.obj.toASN1Primitive().toDERObject().encodeConstructed()); }
  
  int encodedLength(boolean withTag) throws IOException {
    ASN1Primitive primitive = this.obj.toASN1Primitive().toDERObject();
    boolean explicit = isExplicit();
    length = primitive.encodedLength(explicit);
    if (explicit)
      length += ASN1OutputStream.getLengthOfDL(length); 
    return withTag ? ASN1OutputStream.getLengthOfIdentifier(this.tagNo) : 0;
  }
  
  void encode(ASN1OutputStream out, boolean withTag) throws IOException {
    ASN1Primitive primitive = this.obj.toASN1Primitive().toDERObject();
    boolean explicit = isExplicit();
    if (withTag) {
      int flags = this.tagClass;
      if (explicit || primitive.encodeConstructed())
        flags |= 0x20; 
      out.writeIdentifier(true, flags, this.tagNo);
    } 
    if (explicit)
      out.writeDL(primitive.encodedLength(true)); 
    primitive.encode(out.getDERSubStream(), explicit);
  }
  
  String getASN1Encoding() { return "DER"; }
  
  ASN1Sequence rebuildConstructed(ASN1Primitive primitive) { return new DERSequence(primitive); }
  
  ASN1TaggedObject replaceTag(int tagClass, int tagNo) { return new DERTaggedObject(this.explicitness, tagClass, tagNo, this.obj); }
  
  ASN1Primitive toDERObject() { return this; }
  
  ASN1Primitive toDLObject() { return this; }
}
