package org.bouncycastle.jcajce.provider.symmetric.util;

import java.security.AlgorithmParameters;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.InvalidParameterException;
import java.security.Key;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.spec.AlgorithmParameterSpec;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.ShortBufferException;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.PBEParameterSpec;
import org.bouncycastle.crypto.CryptoServicesRegistrar;
import org.bouncycastle.crypto.DataLengthException;
import org.bouncycastle.crypto.StreamCipher;
import org.bouncycastle.crypto.params.KeyParameter;
import org.bouncycastle.crypto.params.ParametersWithIV;
import org.bouncycastle.jcajce.PKCS12Key;
import org.bouncycastle.jcajce.PKCS12KeyWithParameters;

public class BaseStreamCipher extends BaseWrapCipher implements PBE {
  private Class[] availableSpecs;
  
  private StreamCipher cipher;
  
  private int keySizeInBits;
  
  private int digest;
  
  private ParametersWithIV ivParam;
  
  private int ivLength;
  
  private PBEParameterSpec pbeSpec;
  
  private String pbeAlgorithm;
  
  protected BaseStreamCipher(StreamCipher engine, int ivLength) { this(engine, ivLength, -1, -1); }
  
  protected BaseStreamCipher(StreamCipher engine, int ivLength, int keySizeInBits) { this(engine, ivLength, keySizeInBits, -1); }
  
  protected BaseStreamCipher(StreamCipher engine, int ivLength, int keySizeInBits, int digest) {
    this.availableSpecs = new Class[] { javax.crypto.spec.RC2ParameterSpec.class, javax.crypto.spec.RC5ParameterSpec.class, IvParameterSpec.class, PBEParameterSpec.class };
    this.ivLength = 0;
    this.pbeSpec = null;
    this.pbeAlgorithm = null;
    this.cipher = engine;
    this.ivLength = ivLength;
    this.keySizeInBits = keySizeInBits;
    this.digest = digest;
  }
  
  protected int engineGetBlockSize() { return 0; }
  
  protected byte[] engineGetIV() { return (this.ivParam != null) ? this.ivParam.getIV() : null; }
  
  protected int engineGetKeySize(Key key) { return key.getEncoded().length * 8; }
  
  protected int engineGetOutputSize(int inputLen) { return inputLen; }
  
  protected AlgorithmParameters engineGetParameters() {
    if (this.engineParams == null) {
      if (this.pbeSpec != null)
        try {
          AlgorithmParameters engineParams = createParametersInstance(this.pbeAlgorithm);
          engineParams.init(this.pbeSpec);
          return engineParams;
        } catch (Exception e) {
          return null;
        }  
      if (this.ivParam != null) {
        String name = this.cipher.getAlgorithmName();
        if (name.indexOf('/') >= 0)
          name = name.substring(0, name.indexOf('/')); 
        if (name.startsWith("ChaCha7539")) {
          name = "ChaCha7539";
        } else if (name.startsWith("Grain")) {
          name = "Grainv1";
        } else if (name.startsWith("HC")) {
          int endIndex = name.indexOf('-');
          name = name.substring(0, endIndex) + name.substring(endIndex + 1);
        } 
        try {
          this.engineParams = createParametersInstance(name);
          this.engineParams.init(new IvParameterSpec(this.ivParam.getIV()));
        } catch (Exception e) {
          throw new RuntimeException(e.toString());
        } 
      } 
    } 
    return this.engineParams;
  }
  
  protected void engineSetMode(String mode) throws NoSuchAlgorithmException {
    if (!mode.equalsIgnoreCase("ECB") && !mode.equals("NONE"))
      throw new NoSuchAlgorithmException("can't support mode " + mode); 
  }
  
  protected void engineSetPadding(String padding) throws NoSuchAlgorithmException {
    if (!padding.equalsIgnoreCase("NoPadding"))
      throw new NoSuchPaddingException("Padding " + padding + " unknown."); 
  }
  
  protected void engineInit(int opmode, Key key, AlgorithmParameterSpec params, SecureRandom random) throws InvalidKeyException, InvalidAlgorithmParameterException {
    ParametersWithIV parametersWithIV;
    this.pbeSpec = null;
    this.pbeAlgorithm = null;
    this.engineParams = null;
    if (!(key instanceof javax.crypto.SecretKey))
      throw new InvalidKeyException("Key for algorithm " + key.getAlgorithm() + " not suitable for symmetric enryption."); 
    if (key instanceof PKCS12Key) {
      PKCS12Key k = (PKCS12Key)key;
      this.pbeSpec = (PBEParameterSpec)params;
      if (k instanceof PKCS12KeyWithParameters && this.pbeSpec == null)
        this.pbeSpec = new PBEParameterSpec(((PKCS12KeyWithParameters)k).getSalt(), ((PKCS12KeyWithParameters)k).getIterationCount()); 
      parametersWithIV = PBE.Util.makePBEParameters(k.getEncoded(), 2, this.digest, this.keySizeInBits, this.ivLength * 8, this.pbeSpec, this.cipher.getAlgorithmName());
    } else if (key instanceof BCPBEKey) {
      BCPBEKey k = (BCPBEKey)key;
      if (k.getOID() != null) {
        this.pbeAlgorithm = k.getOID().getId();
      } else {
        this.pbeAlgorithm = k.getAlgorithm();
      } 
      if (k.getParam() != null) {
        parametersWithIV = k.getParam();
        this.pbeSpec = new PBEParameterSpec(k.getSalt(), k.getIterationCount());
      } else if (params instanceof PBEParameterSpec) {
        parametersWithIV = PBE.Util.makePBEParameters(k, params, this.cipher.getAlgorithmName());
        this.pbeSpec = (PBEParameterSpec)params;
      } else {
        throw new InvalidAlgorithmParameterException("PBE requires PBE parameters to be set.");
      } 
      if (k.getIvSize() != 0)
        this.ivParam = (ParametersWithIV)parametersWithIV; 
    } else if (params == null) {
      if (this.digest > 0)
        throw new InvalidKeyException("Algorithm requires a PBE key"); 
      parametersWithIV = new KeyParameter(key.getEncoded());
    } else if (params instanceof IvParameterSpec) {
      parametersWithIV = new ParametersWithIV(new KeyParameter(key.getEncoded()), ((IvParameterSpec)params).getIV());
      this.ivParam = (ParametersWithIV)parametersWithIV;
    } else {
      throw new InvalidAlgorithmParameterException("unknown parameter type.");
    } 
    if (this.ivLength != 0 && !(parametersWithIV instanceof ParametersWithIV)) {
      SecureRandom ivRandom = random;
      if (ivRandom == null)
        ivRandom = CryptoServicesRegistrar.getSecureRandom(); 
      if (opmode == 1 || opmode == 3) {
        byte[] iv = new byte[this.ivLength];
        ivRandom.nextBytes(iv);
        parametersWithIV = new ParametersWithIV(parametersWithIV, iv);
        this.ivParam = (ParametersWithIV)parametersWithIV;
      } else {
        throw new InvalidAlgorithmParameterException("no IV set when one expected");
      } 
    } 
    try {
      switch (opmode) {
        case 1:
        case 3:
          this.cipher.init(true, parametersWithIV);
          return;
        case 2:
        case 4:
          this.cipher.init(false, parametersWithIV);
          return;
      } 
      throw new InvalidParameterException("unknown opmode " + opmode + " passed");
    } catch (Exception e) {
      throw new InvalidKeyException(e.getMessage());
    } 
  }
  
  protected void engineInit(int opmode, Key key, AlgorithmParameters params, SecureRandom random) throws InvalidKeyException, InvalidAlgorithmParameterException {
    AlgorithmParameterSpec paramSpec = null;
    if (params != null) {
      paramSpec = SpecUtil.extractSpec(params, this.availableSpecs);
      if (paramSpec == null)
        throw new InvalidAlgorithmParameterException("can't handle parameter " + params.toString()); 
    } 
    engineInit(opmode, key, paramSpec, random);
    this.engineParams = params;
  }
  
  protected void engineInit(int opmode, Key key, SecureRandom random) throws InvalidKeyException {
    try {
      engineInit(opmode, key, (AlgorithmParameterSpec)null, random);
    } catch (InvalidAlgorithmParameterException e) {
      throw new InvalidKeyException(e.getMessage());
    } 
  }
  
  protected byte[] engineUpdate(byte[] input, int inputOffset, int inputLen) {
    byte[] out = new byte[inputLen];
    this.cipher.processBytes(input, inputOffset, inputLen, out, 0);
    return out;
  }
  
  protected int engineUpdate(byte[] input, int inputOffset, int inputLen, byte[] output, int outputOffset) throws ShortBufferException {
    if (outputOffset + inputLen > output.length)
      throw new ShortBufferException("output buffer too short for input."); 
    try {
      this.cipher.processBytes(input, inputOffset, inputLen, output, outputOffset);
      return inputLen;
    } catch (DataLengthException e) {
      throw new IllegalStateException(e.getMessage());
    } 
  }
  
  protected byte[] engineDoFinal(byte[] input, int inputOffset, int inputLen) {
    if (inputLen != 0) {
      byte[] out = engineUpdate(input, inputOffset, inputLen);
      this.cipher.reset();
      return out;
    } 
    this.cipher.reset();
    return new byte[0];
  }
  
  protected int engineDoFinal(byte[] input, int inputOffset, int inputLen, byte[] output, int outputOffset) throws ShortBufferException {
    if (outputOffset + inputLen > output.length)
      throw new ShortBufferException("output buffer too short for input."); 
    if (inputLen != 0)
      this.cipher.processBytes(input, inputOffset, inputLen, output, outputOffset); 
    this.cipher.reset();
    return inputLen;
  }
}
