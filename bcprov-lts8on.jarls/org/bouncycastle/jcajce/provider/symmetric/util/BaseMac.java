package org.bouncycastle.jcajce.provider.symmetric.util;

import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.spec.AlgorithmParameterSpec;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.Map;
import javax.crypto.MacSpi;
import javax.crypto.SecretKey;
import javax.crypto.interfaces.PBEKey;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.PBEParameterSpec;
import javax.crypto.spec.RC2ParameterSpec;
import org.bouncycastle.crypto.Mac;
import org.bouncycastle.crypto.params.AEADParameters;
import org.bouncycastle.crypto.params.KeyParameter;
import org.bouncycastle.crypto.params.ParametersWithIV;
import org.bouncycastle.crypto.params.RC2Parameters;
import org.bouncycastle.crypto.params.SkeinParameters;
import org.bouncycastle.jcajce.spec.AEADParameterSpec;
import org.bouncycastle.jcajce.spec.SkeinParameterSpec;

public class BaseMac extends MacSpi implements PBE {
  private static final Class gcmSpecClass = ClassUtil.loadClass(BaseMac.class, "javax.crypto.spec.GCMParameterSpec");
  
  private Mac macEngine;
  
  private int scheme;
  
  private int pbeHash;
  
  private int keySize;
  
  protected BaseMac(Mac macEngine) {
    this.scheme = 2;
    this.pbeHash = 1;
    this.keySize = 160;
    this.macEngine = macEngine;
  }
  
  protected BaseMac(Mac macEngine, int scheme, int pbeHash, int keySize) {
    this.scheme = 2;
    this.pbeHash = 1;
    this.keySize = 160;
    this.macEngine = macEngine;
    this.scheme = scheme;
    this.pbeHash = pbeHash;
    this.keySize = keySize;
  }
  
  protected void engineInit(Key key, AlgorithmParameterSpec params) throws InvalidKeyException, InvalidAlgorithmParameterException {
    KeyParameter keyParam;
    AEADParameters aEADParameters;
    if (key == null)
      throw new InvalidKeyException("key is null"); 
    if (key instanceof org.bouncycastle.jcajce.PKCS12Key) {
      PBEParameterSpec pbeSpec;
      try {
        keyParam = (SecretKey)key;
      } catch (Exception e) {
        throw new InvalidKeyException("PKCS12 requires a SecretKey/PBEKey");
      } 
      try {
        pbeSpec = (PBEParameterSpec)params;
      } catch (Exception e) {
        throw new InvalidAlgorithmParameterException("PKCS12 requires a PBEParameterSpec");
      } 
      if (keyParam instanceof PBEKey && pbeSpec == null)
        pbeSpec = new PBEParameterSpec(((PBEKey)keyParam).getSalt(), ((PBEKey)keyParam).getIterationCount()); 
      int digest = 1;
      int keySize = 160;
      if (this.macEngine.getAlgorithmName().startsWith("GOST")) {
        digest = 6;
        keySize = 256;
      } else if (this.macEngine instanceof org.bouncycastle.crypto.macs.HMac) {
        if (!this.macEngine.getAlgorithmName().startsWith("SHA-1"))
          if (this.macEngine.getAlgorithmName().startsWith("SHA-224")) {
            digest = 7;
            keySize = 224;
          } else if (this.macEngine.getAlgorithmName().startsWith("SHA-256")) {
            digest = 4;
            keySize = 256;
          } else if (this.macEngine.getAlgorithmName().startsWith("SHA-384")) {
            digest = 8;
            keySize = 384;
          } else if (this.macEngine.getAlgorithmName().startsWith("SHA-512")) {
            digest = 9;
            keySize = 512;
          } else if (this.macEngine.getAlgorithmName().startsWith("RIPEMD160")) {
            digest = 2;
            keySize = 160;
          } else {
            throw new InvalidAlgorithmParameterException("no PKCS12 mapping for HMAC: " + this.macEngine.getAlgorithmName());
          }  
      } 
      aEADParameters = PBE.Util.makePBEMacParameters(keyParam, 2, digest, keySize, pbeSpec);
    } else if (key instanceof BCPBEKey) {
      keyParam = (BCPBEKey)key;
      if (keyParam.getParam() != null) {
        aEADParameters = keyParam.getParam();
      } else if (params instanceof PBEParameterSpec) {
        aEADParameters = PBE.Util.makePBEMacParameters(keyParam, params);
      } else {
        throw new InvalidAlgorithmParameterException("PBE requires PBE parameters to be set.");
      } 
    } else {
      if (params instanceof PBEParameterSpec)
        throw new InvalidAlgorithmParameterException("inappropriate parameter type: " + params.getClass().getName()); 
      aEADParameters = new KeyParameter(key.getEncoded());
    } 
    if (aEADParameters instanceof ParametersWithIV) {
      keyParam = (KeyParameter)((ParametersWithIV)aEADParameters).getParameters();
    } else {
      keyParam = (KeyParameter)aEADParameters;
    } 
    if (params instanceof AEADParameterSpec) {
      AEADParameterSpec aeadSpec = (AEADParameterSpec)params;
      AEADParameters aEADParameters1 = new AEADParameters(keyParam, aeadSpec.getMacSizeInBits(), aeadSpec.getNonce(), aeadSpec.getAssociatedData());
    } else if (params instanceof IvParameterSpec) {
      ParametersWithIV parametersWithIV = new ParametersWithIV(keyParam, ((IvParameterSpec)params).getIV());
    } else if (params instanceof RC2ParameterSpec) {
      ParametersWithIV parametersWithIV = new ParametersWithIV(new RC2Parameters(keyParam.getKey(), ((RC2ParameterSpec)params).getEffectiveKeyBits()), ((RC2ParameterSpec)params).getIV());
    } else if (params instanceof SkeinParameterSpec) {
      SkeinParameters skeinParameters = (new SkeinParameters.Builder(copyMap(((SkeinParameterSpec)params).getParameters()))).setKey(keyParam.getKey()).build();
    } else if (params == null) {
      aEADParameters = new KeyParameter(key.getEncoded());
    } else if (gcmSpecClass != null && gcmSpecClass.isAssignableFrom(params.getClass())) {
      aEADParameters = GcmSpecUtil.extractAeadParameters(keyParam, params);
    } else if (!(params instanceof PBEParameterSpec)) {
      throw new InvalidAlgorithmParameterException("unknown parameter type: " + params.getClass().getName());
    } 
    try {
      this.macEngine.init(aEADParameters);
    } catch (Exception e) {
      throw new InvalidAlgorithmParameterException("cannot initialize MAC: " + e.getMessage());
    } 
  }
  
  protected int engineGetMacLength() { return this.macEngine.getMacSize(); }
  
  protected void engineReset() { this.macEngine.reset(); }
  
  protected void engineUpdate(byte input) { this.macEngine.update(input); }
  
  protected void engineUpdate(byte[] input, int offset, int len) { this.macEngine.update(input, offset, len); }
  
  protected byte[] engineDoFinal() {
    byte[] out = new byte[engineGetMacLength()];
    this.macEngine.doFinal(out, 0);
    return out;
  }
  
  private static Hashtable copyMap(Map paramsMap) {
    Hashtable newTable = new Hashtable();
    Iterator keys = paramsMap.keySet().iterator();
    while (keys.hasNext()) {
      Object key = keys.next();
      newTable.put(key, paramsMap.get(key));
    } 
    return newTable;
  }
}
