package org.bouncycastle.jcajce.provider.asymmetric.ec;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.math.BigInteger;
import java.security.interfaces.ECPrivateKey;
import java.security.spec.ECParameterSpec;
import java.security.spec.ECPrivateKeySpec;
import java.security.spec.EllipticCurve;
import java.util.Enumeration;
import org.bouncycastle.asn1.ASN1BitString;
import org.bouncycastle.asn1.ASN1Encodable;
import org.bouncycastle.asn1.ASN1Integer;
import org.bouncycastle.asn1.ASN1ObjectIdentifier;
import org.bouncycastle.asn1.ASN1Primitive;
import org.bouncycastle.asn1.pkcs.PrivateKeyInfo;
import org.bouncycastle.asn1.sec.ECPrivateKey;
import org.bouncycastle.asn1.x509.AlgorithmIdentifier;
import org.bouncycastle.asn1.x509.SubjectPublicKeyInfo;
import org.bouncycastle.asn1.x9.ECNamedCurveTable;
import org.bouncycastle.asn1.x9.X962Parameters;
import org.bouncycastle.asn1.x9.X9ObjectIdentifiers;
import org.bouncycastle.crypto.params.ECDomainParameters;
import org.bouncycastle.crypto.params.ECNamedDomainParameters;
import org.bouncycastle.crypto.params.ECPrivateKeyParameters;
import org.bouncycastle.jcajce.provider.asymmetric.util.EC5Util;
import org.bouncycastle.jcajce.provider.asymmetric.util.ECUtil;
import org.bouncycastle.jcajce.provider.asymmetric.util.PKCS12BagAttributeCarrierImpl;
import org.bouncycastle.jcajce.provider.config.ProviderConfiguration;
import org.bouncycastle.jce.interfaces.ECPointEncoder;
import org.bouncycastle.jce.interfaces.ECPrivateKey;
import org.bouncycastle.jce.interfaces.PKCS12BagAttributeCarrier;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.bouncycastle.jce.spec.ECNamedCurveParameterSpec;
import org.bouncycastle.jce.spec.ECParameterSpec;
import org.bouncycastle.jce.spec.ECPrivateKeySpec;
import org.bouncycastle.math.ec.ECCurve;
import org.bouncycastle.util.Arrays;

public class BCECPrivateKey implements ECPrivateKey, ECPrivateKey, PKCS12BagAttributeCarrier, ECPointEncoder {
  static final long serialVersionUID = 994553197664784084L;
  
  private String algorithm = "EC";
  
  private boolean withCompression;
  
  private BigInteger d;
  
  private ECParameterSpec ecSpec;
  
  private ProviderConfiguration configuration;
  
  private ASN1BitString publicKey;
  
  private PrivateKeyInfo privateKeyInfo;
  
  private byte[] encoding;
  
  private ECPrivateKeyParameters baseKey;
  
  private PKCS12BagAttributeCarrierImpl attrCarrier = new PKCS12BagAttributeCarrierImpl();
  
  protected BCECPrivateKey() {}
  
  public BCECPrivateKey(ECPrivateKey key, ProviderConfiguration configuration) {
    this.d = key.getS();
    this.algorithm = key.getAlgorithm();
    this.ecSpec = key.getParams();
    this.configuration = configuration;
    this.baseKey = convertToBaseKey(this);
  }
  
  public BCECPrivateKey(String algorithm, ECPrivateKeySpec spec, ProviderConfiguration configuration) {
    this.algorithm = algorithm;
    this.d = spec.getD();
    if (spec.getParams() != null) {
      ECCurve curve = spec.getParams().getCurve();
      EllipticCurve ellipticCurve = EC5Util.convertCurve(curve, spec.getParams().getSeed());
      this.ecSpec = EC5Util.convertSpec(ellipticCurve, spec.getParams());
    } else {
      this.ecSpec = null;
    } 
    this.configuration = configuration;
    this.baseKey = convertToBaseKey(this);
  }
  
  public BCECPrivateKey(String algorithm, ECPrivateKeySpec spec, ProviderConfiguration configuration) {
    this.algorithm = algorithm;
    this.d = spec.getS();
    this.ecSpec = spec.getParams();
    this.configuration = configuration;
    this.baseKey = convertToBaseKey(this);
  }
  
  public BCECPrivateKey(String algorithm, BCECPrivateKey key) {
    this.algorithm = algorithm;
    this.d = key.d;
    this.ecSpec = key.ecSpec;
    this.withCompression = key.withCompression;
    this.attrCarrier = key.attrCarrier;
    this.publicKey = key.publicKey;
    this.configuration = key.configuration;
    this.baseKey = key.baseKey;
  }
  
  public BCECPrivateKey(String algorithm, ECPrivateKeyParameters params, BCECPublicKey pubKey, ECParameterSpec spec, ProviderConfiguration configuration) {
    this.algorithm = algorithm;
    this.d = params.getD();
    this.configuration = configuration;
    this.baseKey = params;
    if (spec == null) {
      ECDomainParameters dp = params.getParameters();
      EllipticCurve ellipticCurve = EC5Util.convertCurve(dp.getCurve(), dp.getSeed());
      this


        
        .ecSpec = new ECParameterSpec(ellipticCurve, EC5Util.convertPoint(dp.getG()), dp.getN(), dp.getH().intValue());
    } else {
      this.ecSpec = spec;
    } 
    this.publicKey = getPublicKeyDetails(pubKey);
  }
  
  public BCECPrivateKey(String algorithm, ECPrivateKeyParameters params, BCECPublicKey pubKey, ECParameterSpec spec, ProviderConfiguration configuration) {
    this.algorithm = algorithm;
    this.d = params.getD();
    this.configuration = configuration;
    this.baseKey = params;
    if (spec == null) {
      ECDomainParameters dp = params.getParameters();
      EllipticCurve ellipticCurve = EC5Util.convertCurve(dp.getCurve(), dp.getSeed());
      this


        
        .ecSpec = new ECParameterSpec(ellipticCurve, EC5Util.convertPoint(dp.getG()), dp.getN(), dp.getH().intValue());
    } else {
      EllipticCurve ellipticCurve = EC5Util.convertCurve(spec.getCurve(), spec.getSeed());
      this.ecSpec = EC5Util.convertSpec(ellipticCurve, spec);
    } 
    try {
      this.publicKey = getPublicKeyDetails(pubKey);
    } catch (Exception e) {
      this.publicKey = null;
    } 
  }
  
  public BCECPrivateKey(String algorithm, ECPrivateKeyParameters params, ProviderConfiguration configuration) {
    this.algorithm = algorithm;
    this.d = params.getD();
    this.ecSpec = null;
    this.configuration = configuration;
    this.baseKey = params;
  }
  
  BCECPrivateKey(String algorithm, PrivateKeyInfo info, ProviderConfiguration configuration) throws IOException {
    this.algorithm = algorithm;
    this.configuration = configuration;
    populateFromPrivKeyInfo(info);
  }
  
  private void populateFromPrivKeyInfo(PrivateKeyInfo info) throws IOException {
    X962Parameters params = X962Parameters.getInstance(info.getPrivateKeyAlgorithm().getParameters());
    ECCurve curve = EC5Util.getCurve(this.configuration, params);
    this.ecSpec = EC5Util.convertToSpec(params, curve);
    ASN1Encodable privKey = info.parsePrivateKey();
    if (privKey instanceof ASN1Integer) {
      ASN1Integer derD = ASN1Integer.getInstance(privKey);
      this.d = derD.getValue();
    } else {
      ECPrivateKey ec = ECPrivateKey.getInstance(privKey);
      this.d = ec.getKey();
      this.publicKey = ec.getPublicKey();
    } 
    this.baseKey = convertToBaseKey(this);
  }
  
  public String getAlgorithm() { return this.algorithm; }
  
  public String getFormat() { return "PKCS#8"; }
  
  public byte[] getEncoded() {
    if (this.encoding == null) {
      PrivateKeyInfo info = getPrivateKeyInfo();
      if (info == null)
        return null; 
      try {
        this.encoding = info.getEncoded("DER");
      } catch (IOException e) {
        return null;
      } 
    } 
    return Arrays.clone(this.encoding);
  }
  
  private PrivateKeyInfo getPrivateKeyInfo() {
    if (this.privateKeyInfo == null) {
      ECPrivateKey keyStructure;
      int orderBitLength;
      X962Parameters params = ECUtils.getDomainParametersFromName(this.ecSpec, this.withCompression);
      if (this.ecSpec == null) {
        orderBitLength = ECUtil.getOrderBitLength(this.configuration, null, getS());
      } else {
        orderBitLength = ECUtil.getOrderBitLength(this.configuration, this.ecSpec.getOrder(), getS());
      } 
      if (this.publicKey != null) {
        keyStructure = new ECPrivateKey(orderBitLength, getS(), this.publicKey, params);
      } else {
        keyStructure = new ECPrivateKey(orderBitLength, getS(), params);
      } 
      try {
        this.privateKeyInfo = new PrivateKeyInfo(new AlgorithmIdentifier(X9ObjectIdentifiers.id_ecPublicKey, params), keyStructure);
      } catch (IOException e) {
        return null;
      } 
    } 
    return this.privateKeyInfo;
  }
  
  public ECPrivateKeyParameters engineGetKeyParameters() { return this.baseKey; }
  
  public ECParameterSpec getParams() { return this.ecSpec; }
  
  public ECParameterSpec getParameters() {
    if (this.ecSpec == null)
      return null; 
    return EC5Util.convertSpec(this.ecSpec);
  }
  
  ECParameterSpec engineGetSpec() {
    if (this.ecSpec != null)
      return EC5Util.convertSpec(this.ecSpec); 
    return this.configuration.getEcImplicitlyCa();
  }
  
  public BigInteger getS() { return this.d; }
  
  public BigInteger getD() { return this.d; }
  
  public void setBagAttribute(ASN1ObjectIdentifier oid, ASN1Encodable attribute) { this.attrCarrier.setBagAttribute(oid, attribute); }
  
  public ASN1Encodable getBagAttribute(ASN1ObjectIdentifier oid) { return this.attrCarrier.getBagAttribute(oid); }
  
  public Enumeration getBagAttributeKeys() { return this.attrCarrier.getBagAttributeKeys(); }
  
  public void setPointFormat(String style) { this.withCompression = !"UNCOMPRESSED".equalsIgnoreCase(style); }
  
  public boolean equals(Object o) {
    if (o instanceof ECPrivateKey) {
      ECPrivateKey other = (ECPrivateKey)o;
      PrivateKeyInfo info = getPrivateKeyInfo();
      PrivateKeyInfo otherInfo = (other instanceof BCECPrivateKey) ? ((BCECPrivateKey)other).getPrivateKeyInfo() : PrivateKeyInfo.getInstance(other.getEncoded());
      if (info == null || otherInfo == null)
        return false; 
      try {
        boolean algEquals = Arrays.constantTimeAreEqual(info.getPrivateKeyAlgorithm().getEncoded(), otherInfo.getPrivateKeyAlgorithm().getEncoded());
        boolean keyEquals = Arrays.constantTimeAreEqual(getS().toByteArray(), other.getS().toByteArray());
        return algEquals & keyEquals;
      } catch (IOException e) {
        return false;
      } 
    } 
    return false;
  }
  
  public int hashCode() { return getD().hashCode() ^ engineGetSpec().hashCode(); }
  
  public String toString() { return ECUtil.privateKeyToString("EC", this.d, engineGetSpec()); }
  
  private ASN1BitString getPublicKeyDetails(BCECPublicKey pub) {
    try {
      SubjectPublicKeyInfo info = SubjectPublicKeyInfo.getInstance(ASN1Primitive.fromByteArray(pub.getEncoded()));
      return info.getPublicKeyData();
    } catch (IOException e) {
      return null;
    } 
  }
  
  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
    in.defaultReadObject();
    byte[] enc = (byte[])in.readObject();
    this.configuration = BouncyCastleProvider.CONFIGURATION;
    populateFromPrivKeyInfo(PrivateKeyInfo.getInstance(ASN1Primitive.fromByteArray(enc)));
    this.attrCarrier = new PKCS12BagAttributeCarrierImpl();
  }
  
  private void writeObject(ObjectOutputStream out) throws IOException {
    out.defaultWriteObject();
    out.writeObject(getEncoded());
  }
  
  private static ECPrivateKeyParameters convertToBaseKey(BCECPrivateKey key) {
    BCECPrivateKey bCECPrivateKey = key;
    ECParameterSpec s = bCECPrivateKey.getParameters();
    if (s == null)
      s = BouncyCastleProvider.CONFIGURATION.getEcImplicitlyCa(); 
    if (bCECPrivateKey.getParameters() instanceof ECNamedCurveParameterSpec) {
      String name = ((ECNamedCurveParameterSpec)bCECPrivateKey.getParameters()).getName();
      if (name != null)
        return new ECPrivateKeyParameters(bCECPrivateKey
            .getD(), new ECNamedDomainParameters(
              ECNamedCurveTable.getOID(name), s
              .getCurve(), s.getG(), s.getN(), s.getH(), s.getSeed())); 
    } 
    return new ECPrivateKeyParameters(bCECPrivateKey
        .getD(), new ECDomainParameters(s
          .getCurve(), s.getG(), s.getN(), s.getH(), s.getSeed()));
  }
}
