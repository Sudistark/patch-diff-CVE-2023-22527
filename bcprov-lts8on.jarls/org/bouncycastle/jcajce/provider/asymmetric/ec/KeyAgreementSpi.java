package org.bouncycastle.jcajce.provider.asymmetric.ec;

import java.math.BigInteger;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.SecureRandom;
import java.security.spec.AlgorithmParameterSpec;
import org.bouncycastle.asn1.x9.X9IntegerConverter;
import org.bouncycastle.crypto.BasicAgreement;
import org.bouncycastle.crypto.DerivationFunction;
import org.bouncycastle.crypto.agreement.ECDHCUnifiedAgreement;
import org.bouncycastle.crypto.agreement.ECMQVBasicAgreement;
import org.bouncycastle.crypto.params.AsymmetricKeyParameter;
import org.bouncycastle.crypto.params.ECDHUPrivateParameters;
import org.bouncycastle.crypto.params.ECDHUPublicParameters;
import org.bouncycastle.crypto.params.ECDomainParameters;
import org.bouncycastle.crypto.params.ECPrivateKeyParameters;
import org.bouncycastle.crypto.params.ECPublicKeyParameters;
import org.bouncycastle.crypto.params.MQVPrivateParameters;
import org.bouncycastle.crypto.params.MQVPublicParameters;
import org.bouncycastle.jcajce.provider.asymmetric.util.BaseAgreementSpi;
import org.bouncycastle.jcajce.spec.DHUParameterSpec;
import org.bouncycastle.jcajce.spec.MQVParameterSpec;
import org.bouncycastle.jcajce.spec.UserKeyingMaterialSpec;
import org.bouncycastle.util.Arrays;

public class KeyAgreementSpi extends BaseAgreementSpi {
  private static final X9IntegerConverter converter = new X9IntegerConverter();
  
  private String kaAlgorithm;
  
  private ECDomainParameters parameters;
  
  private Object agreement;
  
  private MQVParameterSpec mqvParameters;
  
  private DHUParameterSpec dheParameters;
  
  private byte[] result;
  
  protected KeyAgreementSpi(String kaAlgorithm, BasicAgreement agreement, DerivationFunction kdf) {
    super(kaAlgorithm, kdf);
    this.kaAlgorithm = kaAlgorithm;
    this.agreement = agreement;
  }
  
  protected KeyAgreementSpi(String kaAlgorithm, ECDHCUnifiedAgreement agreement, DerivationFunction kdf) {
    super(kaAlgorithm, kdf);
    this.kaAlgorithm = kaAlgorithm;
    this.agreement = agreement;
  }
  
  protected byte[] bigIntToBytes(BigInteger r) { return converter.integerToBytes(r, converter.getByteLength(this.parameters.getCurve())); }
  
  protected Key engineDoPhase(Key key, boolean lastPhase) throws InvalidKeyException, IllegalStateException {
    AsymmetricKeyParameter asymmetricKeyParameter;
    if (this.parameters == null)
      throw new IllegalStateException(this.kaAlgorithm + " not initialised."); 
    if (!lastPhase)
      throw new IllegalStateException(this.kaAlgorithm + " can only be between two parties."); 
    if (this.agreement instanceof ECMQVBasicAgreement) {
      if (this.mqvParameters != null) {
        ECPublicKeyParameters staticKey = (ECPublicKeyParameters)ECUtils.generatePublicKeyParameter((PublicKey)key);
        ECPublicKeyParameters ephemKey = (ECPublicKeyParameters)ECUtils.generatePublicKeyParameter(this.mqvParameters.getOtherPartyEphemeralKey());
        asymmetricKeyParameter = new MQVPublicParameters(staticKey, ephemKey);
      } else {
        throw new IllegalStateException("no MQVParameterSpec provided for MQV");
      } 
    } else if (this.agreement instanceof ECDHCUnifiedAgreement) {
      ECPublicKeyParameters staticKey = (ECPublicKeyParameters)ECUtils.generatePublicKeyParameter((PublicKey)key);
      ECPublicKeyParameters ephemKey = (ECPublicKeyParameters)ECUtils.generatePublicKeyParameter(this.dheParameters.getOtherPartyEphemeralKey());
      asymmetricKeyParameter = new ECDHUPublicParameters(staticKey, ephemKey);
    } else {
      if (!(key instanceof PublicKey))
        throw new InvalidKeyException(this.kaAlgorithm + " key agreement requires " + 
            getSimpleName(org.bouncycastle.jce.interfaces.ECPublicKey.class) + " for doPhase"); 
      asymmetricKeyParameter = ECUtils.generatePublicKeyParameter((PublicKey)key);
    } 
    try {
      if (this.agreement instanceof BasicAgreement) {
        this.result = bigIntToBytes(((BasicAgreement)this.agreement).calculateAgreement(asymmetricKeyParameter));
      } else {
        this.result = ((ECDHCUnifiedAgreement)this.agreement).calculateAgreement(asymmetricKeyParameter);
      } 
    } catch (Exception e) {
      throw new Object(this, "calculation failed: " + e.getMessage(), e);
    } 
    return null;
  }
  
  protected void doInitFromKey(Key key, AlgorithmParameterSpec parameterSpec, SecureRandom random) throws InvalidKeyException, InvalidAlgorithmParameterException {
    if (parameterSpec != null && !(parameterSpec instanceof MQVParameterSpec) && !(parameterSpec instanceof UserKeyingMaterialSpec) && !(parameterSpec instanceof DHUParameterSpec))
      throw new InvalidAlgorithmParameterException("No algorithm parameters supported"); 
    if (this.agreement instanceof ECMQVBasicAgreement) {
      this.mqvParameters = null;
      if (!(parameterSpec instanceof MQVParameterSpec))
        throw new InvalidAlgorithmParameterException(this.kaAlgorithm + " key agreement requires " + 
            getSimpleName(MQVParameterSpec.class) + " for initialisation"); 
      MQVParameterSpec mqvParameterSpec = (MQVParameterSpec)parameterSpec;
      ECPrivateKeyParameters staticPrivKey = (ECPrivateKeyParameters)ECUtils.generatePrivateKeyParameter((PrivateKey)key);
      ECPrivateKeyParameters ephemPrivKey = (ECPrivateKeyParameters)ECUtils.generatePrivateKeyParameter(mqvParameterSpec.getEphemeralPrivateKey());
      ECPublicKeyParameters ephemPubKey = null;
      if (mqvParameterSpec.getEphemeralPublicKey() != null)
        ephemPubKey = (ECPublicKeyParameters)ECUtils.generatePublicKeyParameter(mqvParameterSpec.getEphemeralPublicKey()); 
      this.mqvParameters = mqvParameterSpec;
      this.ukmParameters = mqvParameterSpec.getUserKeyingMaterial();
      MQVPrivateParameters localParams = new MQVPrivateParameters(staticPrivKey, ephemPrivKey, ephemPubKey);
      this.parameters = staticPrivKey.getParameters();
      ((ECMQVBasicAgreement)this.agreement).init(localParams);
    } else if (parameterSpec instanceof DHUParameterSpec) {
      if (!(this.agreement instanceof ECDHCUnifiedAgreement))
        throw new InvalidAlgorithmParameterException(this.kaAlgorithm + " key agreement cannot be used with " + 
            getSimpleName(DHUParameterSpec.class)); 
      DHUParameterSpec dheParameterSpec = (DHUParameterSpec)parameterSpec;
      ECPrivateKeyParameters staticPrivKey = (ECPrivateKeyParameters)ECUtils.generatePrivateKeyParameter((PrivateKey)key);
      ECPrivateKeyParameters ephemPrivKey = (ECPrivateKeyParameters)ECUtils.generatePrivateKeyParameter(dheParameterSpec.getEphemeralPrivateKey());
      ECPublicKeyParameters ephemPubKey = null;
      if (dheParameterSpec.getEphemeralPublicKey() != null)
        ephemPubKey = (ECPublicKeyParameters)ECUtils.generatePublicKeyParameter(dheParameterSpec.getEphemeralPublicKey()); 
      this.dheParameters = dheParameterSpec;
      this.ukmParameters = dheParameterSpec.getUserKeyingMaterial();
      ECDHUPrivateParameters localParams = new ECDHUPrivateParameters(staticPrivKey, ephemPrivKey, ephemPubKey);
      this.parameters = staticPrivKey.getParameters();
      ((ECDHCUnifiedAgreement)this.agreement).init(localParams);
    } else {
      if (!(key instanceof PrivateKey))
        throw new InvalidKeyException(this.kaAlgorithm + " key agreement requires " + 
            getSimpleName(org.bouncycastle.jce.interfaces.ECPrivateKey.class) + " for initialisation"); 
      if (this.kdf == null && parameterSpec instanceof UserKeyingMaterialSpec)
        throw new InvalidAlgorithmParameterException("no KDF specified for UserKeyingMaterialSpec"); 
      ECPrivateKeyParameters privKey = (ECPrivateKeyParameters)ECUtils.generatePrivateKeyParameter((PrivateKey)key);
      this.parameters = privKey.getParameters();
      this.ukmParameters = (parameterSpec instanceof UserKeyingMaterialSpec) ? ((UserKeyingMaterialSpec)parameterSpec).getUserKeyingMaterial() : null;
      ((BasicAgreement)this.agreement).init(privKey);
    } 
  }
  
  private static String getSimpleName(Class clazz) {
    String fullName = clazz.getName();
    return fullName.substring(fullName.lastIndexOf('.') + 1);
  }
  
  protected byte[] doCalcSecret() { return Arrays.clone(this.result); }
}
