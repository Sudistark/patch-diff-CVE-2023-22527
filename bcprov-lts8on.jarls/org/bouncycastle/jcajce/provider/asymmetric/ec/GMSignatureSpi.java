package org.bouncycastle.jcajce.provider.asymmetric.ec;

import java.security.AlgorithmParameters;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.SignatureException;
import java.security.SignatureSpi;
import java.security.spec.AlgorithmParameterSpec;
import org.bouncycastle.crypto.CryptoException;
import org.bouncycastle.crypto.params.ParametersWithID;
import org.bouncycastle.crypto.params.ParametersWithRandom;
import org.bouncycastle.crypto.signers.SM2Signer;
import org.bouncycastle.jcajce.provider.asymmetric.util.ECUtil;
import org.bouncycastle.jcajce.spec.SM2ParameterSpec;
import org.bouncycastle.jcajce.util.BCJcaJceHelper;
import org.bouncycastle.jcajce.util.JcaJceHelper;

public class GMSignatureSpi extends SignatureSpi {
  private final JcaJceHelper helper;
  
  private AlgorithmParameters engineParams;
  
  private SM2ParameterSpec paramSpec;
  
  private final SM2Signer signer;
  
  GMSignatureSpi(SM2Signer signer) {
    this.helper = new BCJcaJceHelper();
    this.signer = signer;
  }
  
  protected void engineInitVerify(PublicKey publicKey) throws InvalidKeyException {
    ParametersWithID parametersWithID = ECUtils.generatePublicKeyParameter(publicKey);
    if (this.paramSpec != null)
      parametersWithID = new ParametersWithID(parametersWithID, this.paramSpec.getID()); 
    this.signer.init(false, parametersWithID);
  }
  
  protected void engineInitSign(PrivateKey privateKey) throws InvalidKeyException {
    ParametersWithRandom parametersWithRandom = ECUtil.generatePrivateKeyParameter(privateKey);
    if (this.appRandom != null)
      parametersWithRandom = new ParametersWithRandom(parametersWithRandom, this.appRandom); 
    if (this.paramSpec != null) {
      this.signer.init(true, new ParametersWithID(parametersWithRandom, this.paramSpec.getID()));
    } else {
      this.signer.init(true, parametersWithRandom);
    } 
  }
  
  protected void engineUpdate(byte b) throws SignatureException { this.signer.update(b); }
  
  protected void engineUpdate(byte[] bytes, int off, int length) throws SignatureException { this.signer.update(bytes, off, length); }
  
  protected byte[] engineSign() throws SignatureException {
    try {
      return this.signer.generateSignature();
    } catch (CryptoException e) {
      throw new SignatureException("unable to create signature: " + e.getMessage());
    } 
  }
  
  protected boolean engineVerify(byte[] bytes) throws SignatureException { return this.signer.verifySignature(bytes); }
  
  protected void engineSetParameter(AlgorithmParameterSpec params) throws InvalidAlgorithmParameterException {
    if (params instanceof SM2ParameterSpec) {
      this.paramSpec = (SM2ParameterSpec)params;
    } else {
      throw new InvalidAlgorithmParameterException("only SM2ParameterSpec supported");
    } 
  }
  
  protected AlgorithmParameters engineGetParameters() {
    if (this.engineParams == null)
      if (this.paramSpec != null)
        try {
          this.engineParams = this.helper.createAlgorithmParameters("PSS");
          this.engineParams.init(this.paramSpec);
        } catch (Exception e) {
          throw new RuntimeException(e.toString());
        }   
    return this.engineParams;
  }
  
  protected void engineSetParameter(String param, Object value) { throw new UnsupportedOperationException("engineSetParameter unsupported"); }
  
  protected Object engineGetParameter(String param) { throw new UnsupportedOperationException("engineGetParameter unsupported"); }
}
