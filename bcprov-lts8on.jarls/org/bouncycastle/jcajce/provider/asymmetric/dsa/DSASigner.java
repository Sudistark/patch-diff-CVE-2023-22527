package org.bouncycastle.jcajce.provider.asymmetric.dsa;

import java.math.BigInteger;
import java.security.AlgorithmParameters;
import java.security.InvalidKeyException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.SecureRandom;
import java.security.SignatureException;
import java.security.SignatureSpi;
import java.security.spec.AlgorithmParameterSpec;
import org.bouncycastle.asn1.pkcs.PKCSObjectIdentifiers;
import org.bouncycastle.asn1.x509.X509ObjectIdentifiers;
import org.bouncycastle.crypto.DSAExt;
import org.bouncycastle.crypto.Digest;
import org.bouncycastle.crypto.params.AsymmetricKeyParameter;
import org.bouncycastle.crypto.params.ParametersWithRandom;
import org.bouncycastle.crypto.signers.DSAEncoding;
import org.bouncycastle.crypto.signers.StandardDSAEncoding;

public class DSASigner extends SignatureSpi implements PKCSObjectIdentifiers, X509ObjectIdentifiers {
  private Digest digest;
  
  private DSAExt signer;
  
  private DSAEncoding encoding;
  
  private SecureRandom random;
  
  protected DSASigner(Digest digest, DSAExt signer) {
    this.encoding = StandardDSAEncoding.INSTANCE;
    this.digest = digest;
    this.signer = signer;
  }
  
  protected void engineInitVerify(PublicKey publicKey) throws InvalidKeyException {
    AsymmetricKeyParameter asymmetricKeyParameter = DSAUtil.generatePublicKeyParameter(publicKey);
    this.digest.reset();
    this.signer.init(false, asymmetricKeyParameter);
  }
  
  protected void engineInitSign(PrivateKey privateKey, SecureRandom random) throws InvalidKeyException {
    this.random = random;
    engineInitSign(privateKey);
  }
  
  protected void engineInitSign(PrivateKey privateKey) throws InvalidKeyException {
    ParametersWithRandom parametersWithRandom = DSAUtil.generatePrivateKeyParameter(privateKey);
    if (this.random != null)
      parametersWithRandom = new ParametersWithRandom(parametersWithRandom, this.random); 
    this.digest.reset();
    this.signer.init(true, parametersWithRandom);
  }
  
  protected void engineUpdate(byte b) throws SignatureException { this.digest.update(b); }
  
  protected void engineUpdate(byte[] b, int off, int len) throws SignatureException { this.digest.update(b, off, len); }
  
  protected byte[] engineSign() throws SignatureException {
    byte[] hash = new byte[this.digest.getDigestSize()];
    this.digest.doFinal(hash, 0);
    try {
      BigInteger[] sig = this.signer.generateSignature(hash);
      return this.encoding.encode(this.signer.getOrder(), sig[0], sig[1]);
    } catch (Exception e) {
      throw new SignatureException(e.toString());
    } 
  }
  
  protected boolean engineVerify(byte[] sigBytes) throws SignatureException {
    BigInteger[] sig;
    byte[] hash = new byte[this.digest.getDigestSize()];
    this.digest.doFinal(hash, 0);
    try {
      sig = this.encoding.decode(this.signer.getOrder(), sigBytes);
    } catch (Exception e) {
      throw new SignatureException("error decoding signature bytes.");
    } 
    return this.signer.verifySignature(hash, sig[0], sig[1]);
  }
  
  protected AlgorithmParameters engineGetParameters() { return null; }
  
  protected void engineSetParameter(AlgorithmParameterSpec params) { throw new UnsupportedOperationException("engineSetParameter unsupported"); }
  
  protected void engineSetParameter(String param, Object value) { throw new UnsupportedOperationException("engineSetParameter unsupported"); }
  
  protected Object engineGetParameter(String param) { throw new UnsupportedOperationException("engineGetParameter unsupported"); }
}
