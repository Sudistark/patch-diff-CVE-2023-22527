package org.bouncycastle.jcajce.provider.asymmetric.rsa;

import java.security.InvalidKeyException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.SignatureException;
import java.security.SignatureSpi;
import java.security.interfaces.RSAPrivateKey;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.AlgorithmParameterSpec;
import org.bouncycastle.crypto.AsymmetricBlockCipher;
import org.bouncycastle.crypto.Digest;
import org.bouncycastle.crypto.params.RSAKeyParameters;
import org.bouncycastle.crypto.signers.ISO9796d2Signer;

public class ISOSignatureSpi extends SignatureSpi {
  private ISO9796d2Signer signer;
  
  protected ISOSignatureSpi(Digest digest, AsymmetricBlockCipher cipher) { this.signer = new ISO9796d2Signer(cipher, digest, true); }
  
  protected void engineInitVerify(PublicKey publicKey) throws InvalidKeyException {
    RSAKeyParameters rSAKeyParameters = RSAUtil.generatePublicKeyParameter((RSAPublicKey)publicKey);
    this.signer.init(false, rSAKeyParameters);
  }
  
  protected void engineInitSign(PrivateKey privateKey) throws InvalidKeyException {
    RSAKeyParameters rSAKeyParameters = RSAUtil.generatePrivateKeyParameter((RSAPrivateKey)privateKey);
    this.signer.init(true, rSAKeyParameters);
  }
  
  protected void engineUpdate(byte b) throws SignatureException { this.signer.update(b); }
  
  protected void engineUpdate(byte[] b, int off, int len) throws SignatureException { this.signer.update(b, off, len); }
  
  protected byte[] engineSign() throws SignatureException {
    try {
      return this.signer.generateSignature();
    } catch (Exception e) {
      throw new SignatureException(e.toString());
    } 
  }
  
  protected boolean engineVerify(byte[] sigBytes) throws SignatureException { return this.signer.verifySignature(sigBytes); }
  
  protected void engineSetParameter(AlgorithmParameterSpec params) { throw new UnsupportedOperationException("engineSetParameter unsupported"); }
  
  protected void engineSetParameter(String param, Object value) { throw new UnsupportedOperationException("engineSetParameter unsupported"); }
  
  protected Object engineGetParameter(String param) { throw new UnsupportedOperationException("engineSetParameter unsupported"); }
}
