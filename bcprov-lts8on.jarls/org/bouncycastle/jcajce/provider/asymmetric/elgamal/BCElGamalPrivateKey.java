package org.bouncycastle.jcajce.provider.asymmetric.elgamal;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.math.BigInteger;
import java.util.Enumeration;
import javax.crypto.interfaces.DHPrivateKey;
import javax.crypto.spec.DHParameterSpec;
import javax.crypto.spec.DHPrivateKeySpec;
import org.bouncycastle.asn1.ASN1Encodable;
import org.bouncycastle.asn1.ASN1Integer;
import org.bouncycastle.asn1.ASN1ObjectIdentifier;
import org.bouncycastle.asn1.oiw.ElGamalParameter;
import org.bouncycastle.asn1.oiw.OIWObjectIdentifiers;
import org.bouncycastle.asn1.pkcs.PrivateKeyInfo;
import org.bouncycastle.asn1.x509.AlgorithmIdentifier;
import org.bouncycastle.crypto.params.ElGamalPrivateKeyParameters;
import org.bouncycastle.jcajce.provider.asymmetric.util.PKCS12BagAttributeCarrierImpl;
import org.bouncycastle.jce.interfaces.ElGamalPrivateKey;
import org.bouncycastle.jce.interfaces.PKCS12BagAttributeCarrier;
import org.bouncycastle.jce.spec.ElGamalParameterSpec;
import org.bouncycastle.jce.spec.ElGamalPrivateKeySpec;

public class BCElGamalPrivateKey implements ElGamalPrivateKey, DHPrivateKey, PKCS12BagAttributeCarrier {
  static final long serialVersionUID = 4819350091141529678L;
  
  private BigInteger x;
  
  private ElGamalParameterSpec elSpec;
  
  private PKCS12BagAttributeCarrierImpl attrCarrier = new PKCS12BagAttributeCarrierImpl();
  
  protected BCElGamalPrivateKey() {}
  
  BCElGamalPrivateKey(ElGamalPrivateKey key) {
    this.x = key.getX();
    this.elSpec = key.getParameters();
  }
  
  BCElGamalPrivateKey(DHPrivateKey key) {
    this.x = key.getX();
    this.elSpec = new ElGamalParameterSpec(key.getParams().getP(), key.getParams().getG());
  }
  
  BCElGamalPrivateKey(ElGamalPrivateKeySpec spec) {
    this.x = spec.getX();
    this.elSpec = new ElGamalParameterSpec(spec.getParams().getP(), spec.getParams().getG());
  }
  
  BCElGamalPrivateKey(DHPrivateKeySpec spec) {
    this.x = spec.getX();
    this.elSpec = new ElGamalParameterSpec(spec.getP(), spec.getG());
  }
  
  BCElGamalPrivateKey(PrivateKeyInfo info) throws IOException {
    ElGamalParameter params = ElGamalParameter.getInstance(info.getPrivateKeyAlgorithm().getParameters());
    ASN1Integer derX = ASN1Integer.getInstance(info.parsePrivateKey());
    this.x = derX.getValue();
    this.elSpec = new ElGamalParameterSpec(params.getP(), params.getG());
  }
  
  BCElGamalPrivateKey(ElGamalPrivateKeyParameters params) {
    this.x = params.getX();
    this.elSpec = new ElGamalParameterSpec(params.getParameters().getP(), params.getParameters().getG());
  }
  
  public String getAlgorithm() { return "ElGamal"; }
  
  public String getFormat() { return "PKCS#8"; }
  
  public byte[] getEncoded() {
    try {
      PrivateKeyInfo info = new PrivateKeyInfo(new AlgorithmIdentifier(OIWObjectIdentifiers.elGamalAlgorithm, new ElGamalParameter(this.elSpec.getP(), this.elSpec.getG())), new ASN1Integer(getX()));
      return info.getEncoded("DER");
    } catch (IOException e) {
      return null;
    } 
  }
  
  public ElGamalParameterSpec getParameters() { return this.elSpec; }
  
  public DHParameterSpec getParams() { return new DHParameterSpec(this.elSpec.getP(), this.elSpec.getG()); }
  
  public BigInteger getX() { return this.x; }
  
  public boolean equals(Object o) {
    if (!(o instanceof DHPrivateKey))
      return false; 
    DHPrivateKey other = (DHPrivateKey)o;
    return (getX().equals(other.getX()) && 
      getParams().getG().equals(other.getParams().getG()) && 
      getParams().getP().equals(other.getParams().getP()) && 
      getParams().getL() == other.getParams().getL());
  }
  
  public int hashCode() { return getX().hashCode() ^ getParams().getG().hashCode() ^ 
      getParams().getP().hashCode() ^ getParams().getL(); }
  
  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
    in.defaultReadObject();
    this.elSpec = new ElGamalParameterSpec((BigInteger)in.readObject(), (BigInteger)in.readObject());
    this.attrCarrier = new PKCS12BagAttributeCarrierImpl();
  }
  
  private void writeObject(ObjectOutputStream out) throws IOException {
    out.defaultWriteObject();
    out.writeObject(this.elSpec.getP());
    out.writeObject(this.elSpec.getG());
  }
  
  public void setBagAttribute(ASN1ObjectIdentifier oid, ASN1Encodable attribute) { this.attrCarrier.setBagAttribute(oid, attribute); }
  
  public ASN1Encodable getBagAttribute(ASN1ObjectIdentifier oid) { return this.attrCarrier.getBagAttribute(oid); }
  
  public Enumeration getBagAttributeKeys() { return this.attrCarrier.getBagAttributeKeys(); }
}
