package org.bouncycastle.jcajce.provider.asymmetric.edec;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.security.PrivateKey;
import org.bouncycastle.asn1.ASN1OctetString;
import org.bouncycastle.asn1.ASN1Set;
import org.bouncycastle.asn1.edec.EdECObjectIdentifiers;
import org.bouncycastle.asn1.pkcs.PrivateKeyInfo;
import org.bouncycastle.crypto.params.AsymmetricKeyParameter;
import org.bouncycastle.crypto.params.Ed25519PrivateKeyParameters;
import org.bouncycastle.crypto.params.Ed25519PublicKeyParameters;
import org.bouncycastle.crypto.params.Ed448PrivateKeyParameters;
import org.bouncycastle.crypto.params.Ed448PublicKeyParameters;
import org.bouncycastle.crypto.util.PrivateKeyInfoFactory;
import org.bouncycastle.jcajce.interfaces.EdDSAPrivateKey;
import org.bouncycastle.jcajce.interfaces.EdDSAPublicKey;
import org.bouncycastle.util.Arrays;
import org.bouncycastle.util.Properties;

public class BCEdDSAPrivateKey implements EdDSAPrivateKey {
  static final long serialVersionUID = 1L;
  
  AsymmetricKeyParameter eddsaPrivateKey;
  
  AsymmetricKeyParameter eddsaPublicKey;
  
  int hashCode;
  
  private final boolean hasPublicKey;
  
  private final byte[] attributes;
  
  BCEdDSAPrivateKey(AsymmetricKeyParameter privKey) {
    this.hasPublicKey = true;
    this.attributes = null;
    this.eddsaPrivateKey = privKey;
    if (this.eddsaPrivateKey instanceof Ed448PrivateKeyParameters) {
      this.eddsaPublicKey = ((Ed448PrivateKeyParameters)this.eddsaPrivateKey).generatePublicKey();
    } else {
      this.eddsaPublicKey = ((Ed25519PrivateKeyParameters)this.eddsaPrivateKey).generatePublicKey();
    } 
    this.hashCode = calculateHashCode();
  }
  
  BCEdDSAPrivateKey(PrivateKeyInfo keyInfo) throws IOException {
    this.hasPublicKey = keyInfo.hasPublicKey();
    this.attributes = (keyInfo.getAttributes() != null) ? keyInfo.getAttributes().getEncoded() : null;
    populateFromPrivateKeyInfo(keyInfo);
  }
  
  private void populateFromPrivateKeyInfo(PrivateKeyInfo keyInfo) throws IOException {
    byte[] encoding = ASN1OctetString.getInstance(keyInfo.parsePrivateKey()).getOctets();
    if (EdECObjectIdentifiers.id_Ed448.equals(keyInfo.getPrivateKeyAlgorithm().getAlgorithm())) {
      this.eddsaPrivateKey = new Ed448PrivateKeyParameters(encoding);
      this.eddsaPublicKey = ((Ed448PrivateKeyParameters)this.eddsaPrivateKey).generatePublicKey();
    } else {
      this.eddsaPrivateKey = new Ed25519PrivateKeyParameters(encoding);
      this.eddsaPublicKey = ((Ed25519PrivateKeyParameters)this.eddsaPrivateKey).generatePublicKey();
    } 
    this.hashCode = calculateHashCode();
  }
  
  public String getAlgorithm() {
    if (Properties.isOverrideSet("org.bouncycastle.emulate.oracle"))
      return "EdDSA"; 
    return (this.eddsaPrivateKey instanceof Ed448PrivateKeyParameters) ? "Ed448" : "Ed25519";
  }
  
  public String getFormat() { return "PKCS#8"; }
  
  public byte[] getEncoded() {
    try {
      PrivateKeyInfo keyInfo = getPrivateKeyInfo();
      if (keyInfo == null)
        return null; 
      return keyInfo.getEncoded();
    } catch (IOException e) {
      return null;
    } 
  }
  
  private PrivateKeyInfo getPrivateKeyInfo() {
    try {
      ASN1Set attrSet = ASN1Set.getInstance(this.attributes);
      PrivateKeyInfo privInfo = PrivateKeyInfoFactory.createPrivateKeyInfo(this.eddsaPrivateKey, attrSet);
      if (this.hasPublicKey && !Properties.isOverrideSet("org.bouncycastle.pkcs8.v1_info_only"))
        return privInfo; 
      return new PrivateKeyInfo(privInfo.getPrivateKeyAlgorithm(), privInfo.parsePrivateKey(), attrSet);
    } catch (IOException e) {
      return null;
    } 
  }
  
  public EdDSAPublicKey getPublicKey() { return new BCEdDSAPublicKey(this.eddsaPublicKey); }
  
  AsymmetricKeyParameter engineGetKeyParameters() { return this.eddsaPrivateKey; }
  
  public String toString() { return Utils.keyToString("Private Key", getAlgorithm(), this.eddsaPublicKey); }
  
  public boolean equals(Object o) {
    if (o == this)
      return true; 
    if (!(o instanceof PrivateKey))
      return false; 
    PrivateKey other = (PrivateKey)o;
    PrivateKeyInfo info = getPrivateKeyInfo();
    PrivateKeyInfo otherInfo = (other instanceof BCEdDSAPrivateKey) ? ((BCEdDSAPrivateKey)other).getPrivateKeyInfo() : PrivateKeyInfo.getInstance(other.getEncoded());
    if (info == null || otherInfo == null)
      return false; 
    try {
      boolean algEquals = Arrays.constantTimeAreEqual(info.getPrivateKeyAlgorithm().getEncoded(), otherInfo.getPrivateKeyAlgorithm().getEncoded());
      boolean keyEquals = Arrays.constantTimeAreEqual(info.getPrivateKey().getEncoded(), otherInfo.getPrivateKey().getEncoded());
      return algEquals & keyEquals;
    } catch (IOException e) {
      return false;
    } 
  }
  
  public int hashCode() { return this.hashCode; }
  
  private int calculateHashCode() {
    byte[] publicData;
    if (this.eddsaPublicKey instanceof Ed448PublicKeyParameters) {
      publicData = ((Ed448PublicKeyParameters)this.eddsaPublicKey).getEncoded();
    } else {
      publicData = ((Ed25519PublicKeyParameters)this.eddsaPublicKey).getEncoded();
    } 
    result = getAlgorithm().hashCode();
    return 31 * result + Arrays.hashCode(publicData);
  }
  
  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
    in.defaultReadObject();
    byte[] enc = (byte[])in.readObject();
    populateFromPrivateKeyInfo(PrivateKeyInfo.getInstance(enc));
  }
  
  private void writeObject(ObjectOutputStream out) throws IOException {
    out.defaultWriteObject();
    out.writeObject(getEncoded());
  }
}
