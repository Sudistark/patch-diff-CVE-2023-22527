package org.bouncycastle.jcajce.provider.asymmetric.dh;

import java.math.BigInteger;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.SecureRandom;
import java.security.spec.AlgorithmParameterSpec;
import javax.crypto.SecretKey;
import javax.crypto.ShortBufferException;
import javax.crypto.interfaces.DHPrivateKey;
import javax.crypto.interfaces.DHPublicKey;
import javax.crypto.spec.DHParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import org.bouncycastle.crypto.BasicAgreement;
import org.bouncycastle.crypto.DerivationFunction;
import org.bouncycastle.crypto.agreement.DHUnifiedAgreement;
import org.bouncycastle.crypto.params.DHMQVPrivateParameters;
import org.bouncycastle.crypto.params.DHMQVPublicParameters;
import org.bouncycastle.crypto.params.DHParameters;
import org.bouncycastle.crypto.params.DHPrivateKeyParameters;
import org.bouncycastle.crypto.params.DHPublicKeyParameters;
import org.bouncycastle.crypto.params.DHUPrivateParameters;
import org.bouncycastle.crypto.params.DHUPublicParameters;
import org.bouncycastle.jcajce.provider.asymmetric.util.BaseAgreementSpi;
import org.bouncycastle.jcajce.spec.DHDomainParameterSpec;
import org.bouncycastle.jcajce.spec.DHUParameterSpec;
import org.bouncycastle.jcajce.spec.MQVParameterSpec;
import org.bouncycastle.jcajce.spec.UserKeyingMaterialSpec;
import org.bouncycastle.util.BigIntegers;

public class KeyAgreementSpi extends BaseAgreementSpi {
  private static final BigInteger ONE = BigInteger.valueOf(1L);
  
  private static final BigInteger TWO = BigInteger.valueOf(2L);
  
  private final DHUnifiedAgreement unifiedAgreement;
  
  private final BasicAgreement mqvAgreement;
  
  private DHUParameterSpec dheParameters;
  
  private MQVParameterSpec mqvParameters;
  
  private BigInteger x;
  
  private BigInteger p;
  
  private BigInteger g;
  
  private byte[] result;
  
  public KeyAgreementSpi() { this("Diffie-Hellman", null); }
  
  public KeyAgreementSpi(String kaAlgorithm, DerivationFunction kdf) {
    super(kaAlgorithm, kdf);
    this.unifiedAgreement = null;
    this.mqvAgreement = null;
  }
  
  public KeyAgreementSpi(String kaAlgorithm, DHUnifiedAgreement unifiedAgreement, DerivationFunction kdf) {
    super(kaAlgorithm, kdf);
    this.unifiedAgreement = unifiedAgreement;
    this.mqvAgreement = null;
  }
  
  public KeyAgreementSpi(String kaAlgorithm, BasicAgreement mqvAgreement, DerivationFunction kdf) {
    super(kaAlgorithm, kdf);
    this.unifiedAgreement = null;
    this.mqvAgreement = mqvAgreement;
  }
  
  protected byte[] bigIntToBytes(BigInteger r) {
    int expectedLength = (this.p.bitLength() + 7) / 8;
    return BigIntegers.asUnsignedByteArray(expectedLength, r);
  }
  
  protected Key engineDoPhase(Key key, boolean lastPhase) throws InvalidKeyException, IllegalStateException {
    if (this.x == null)
      throw new IllegalStateException("Diffie-Hellman not initialised."); 
    if (!(key instanceof DHPublicKey))
      throw new InvalidKeyException("DHKeyAgreement doPhase requires DHPublicKey"); 
    DHPublicKey pubKey = (DHPublicKey)key;
    if (!pubKey.getParams().getG().equals(this.g) || !pubKey.getParams().getP().equals(this.p))
      throw new InvalidKeyException("DHPublicKey not for this KeyAgreement!"); 
    BigInteger peerY = ((DHPublicKey)key).getY();
    if (peerY == null || peerY.compareTo(TWO) < 0 || peerY
      .compareTo(this.p.subtract(ONE)) >= 0)
      throw new InvalidKeyException("Invalid DH PublicKey"); 
    if (this.unifiedAgreement != null) {
      if (!lastPhase)
        throw new IllegalStateException("unified Diffie-Hellman can use only two key pairs"); 
      DHPublicKeyParameters staticKey = generatePublicKeyParameter((PublicKey)key);
      DHPublicKeyParameters ephemKey = generatePublicKeyParameter(this.dheParameters.getOtherPartyEphemeralKey());
      DHUPublicParameters pKey = new DHUPublicParameters(staticKey, ephemKey);
      this.result = this.unifiedAgreement.calculateAgreement(pKey);
      return null;
    } 
    if (this.mqvAgreement != null) {
      if (!lastPhase)
        throw new IllegalStateException("MQV Diffie-Hellman can use only two key pairs"); 
      DHPublicKeyParameters staticKey = generatePublicKeyParameter((PublicKey)key);
      DHPublicKeyParameters ephemKey = generatePublicKeyParameter(this.mqvParameters.getOtherPartyEphemeralKey());
      DHMQVPublicParameters pKey = new DHMQVPublicParameters(staticKey, ephemKey);
      this.result = bigIntToBytes(this.mqvAgreement.calculateAgreement(pKey));
      return null;
    } 
    BigInteger res = peerY.modPow(this.x, this.p);
    if (res.compareTo(ONE) == 0)
      throw new InvalidKeyException("Shared key can't be 1"); 
    this.result = bigIntToBytes(res);
    if (lastPhase)
      return null; 
    return new BCDHPublicKey(res, pubKey.getParams());
  }
  
  protected byte[] engineGenerateSecret() throws IllegalStateException {
    if (this.x == null)
      throw new IllegalStateException("Diffie-Hellman not initialised."); 
    return super.engineGenerateSecret();
  }
  
  protected int engineGenerateSecret(byte[] sharedSecret, int offset) throws IllegalStateException, ShortBufferException {
    if (this.x == null)
      throw new IllegalStateException("Diffie-Hellman not initialised."); 
    return super.engineGenerateSecret(sharedSecret, offset);
  }
  
  protected SecretKey engineGenerateSecret(String algorithm) throws NoSuchAlgorithmException {
    if (this.x == null)
      throw new IllegalStateException("Diffie-Hellman not initialised."); 
    if (algorithm.equals("TlsPremasterSecret"))
      return new SecretKeySpec(trimZeroes(this.result), algorithm); 
    return super.engineGenerateSecret(algorithm);
  }
  
  protected void doInitFromKey(Key key, AlgorithmParameterSpec params, SecureRandom random) throws InvalidKeyException, InvalidAlgorithmParameterException {
    if (!(key instanceof DHPrivateKey))
      throw new InvalidKeyException("DHKeyAgreement requires DHPrivateKey for initialisation"); 
    DHPrivateKey privKey = (DHPrivateKey)key;
    if (params != null) {
      if (params instanceof DHParameterSpec) {
        DHParameterSpec p = (DHParameterSpec)params;
        this.p = p.getP();
        this.g = p.getG();
        this.dheParameters = null;
        this.ukmParameters = null;
      } else if (params instanceof DHUParameterSpec) {
        if (this.unifiedAgreement == null)
          throw new InvalidAlgorithmParameterException("agreement algorithm not DHU based"); 
        this.p = privKey.getParams().getP();
        this.g = privKey.getParams().getG();
        this.dheParameters = (DHUParameterSpec)params;
        this.ukmParameters = ((DHUParameterSpec)params).getUserKeyingMaterial();
        if (this.dheParameters.getEphemeralPublicKey() != null) {
          this.unifiedAgreement.init(new DHUPrivateParameters(generatePrivateKeyParameter(privKey), 
                generatePrivateKeyParameter(this.dheParameters.getEphemeralPrivateKey()), 
                generatePublicKeyParameter(this.dheParameters.getEphemeralPublicKey())));
        } else {
          this.unifiedAgreement.init(new DHUPrivateParameters(generatePrivateKeyParameter(privKey), 
                generatePrivateKeyParameter(this.dheParameters.getEphemeralPrivateKey())));
        } 
      } else if (params instanceof MQVParameterSpec) {
        if (this.mqvAgreement == null)
          throw new InvalidAlgorithmParameterException("agreement algorithm not MQV based"); 
        this.p = privKey.getParams().getP();
        this.g = privKey.getParams().getG();
        this.mqvParameters = (MQVParameterSpec)params;
        this.ukmParameters = ((MQVParameterSpec)params).getUserKeyingMaterial();
        if (this.mqvParameters.getEphemeralPublicKey() != null) {
          this.mqvAgreement.init(new DHMQVPrivateParameters(generatePrivateKeyParameter(privKey), 
                generatePrivateKeyParameter(this.mqvParameters.getEphemeralPrivateKey()), 
                generatePublicKeyParameter(this.mqvParameters.getEphemeralPublicKey())));
        } else {
          this.mqvAgreement.init(new DHMQVPrivateParameters(generatePrivateKeyParameter(privKey), 
                generatePrivateKeyParameter(this.mqvParameters.getEphemeralPrivateKey())));
        } 
      } else if (params instanceof UserKeyingMaterialSpec) {
        if (this.kdf == null)
          throw new InvalidAlgorithmParameterException("no KDF specified for UserKeyingMaterialSpec"); 
        this.p = privKey.getParams().getP();
        this.g = privKey.getParams().getG();
        this.dheParameters = null;
        this.ukmParameters = ((UserKeyingMaterialSpec)params).getUserKeyingMaterial();
      } else {
        throw new InvalidAlgorithmParameterException("DHKeyAgreement only accepts DHParameterSpec");
      } 
    } else {
      this.p = privKey.getParams().getP();
      this.g = privKey.getParams().getG();
    } 
    this.x = privKey.getX();
    this.result = bigIntToBytes(this.x);
  }
  
  protected void engineInit(Key key, SecureRandom random) throws InvalidKeyException {
    if (!(key instanceof DHPrivateKey))
      throw new InvalidKeyException("DHKeyAgreement requires DHPrivateKey"); 
    DHPrivateKey privKey = (DHPrivateKey)key;
    this.p = privKey.getParams().getP();
    this.g = privKey.getParams().getG();
    this.x = privKey.getX();
    this.result = bigIntToBytes(this.x);
  }
  
  protected byte[] doCalcSecret() throws IllegalStateException { return this.result; }
  
  private DHPrivateKeyParameters generatePrivateKeyParameter(PrivateKey privKey) throws InvalidKeyException {
    if (privKey instanceof DHPrivateKey) {
      if (privKey instanceof BCDHPrivateKey)
        return ((BCDHPrivateKey)privKey).engineGetKeyParameters(); 
      DHPrivateKey pub = (DHPrivateKey)privKey;
      DHParameterSpec params = pub.getParams();
      return new DHPrivateKeyParameters(pub.getX(), new DHParameters(params
            .getP(), params.getG(), null, params.getL()));
    } 
    throw new InvalidKeyException("private key not a DHPrivateKey");
  }
  
  private DHPublicKeyParameters generatePublicKeyParameter(PublicKey pubKey) throws InvalidKeyException {
    if (pubKey instanceof DHPublicKey) {
      if (pubKey instanceof BCDHPublicKey)
        return ((BCDHPublicKey)pubKey).engineGetKeyParameters(); 
      DHPublicKey pub = (DHPublicKey)pubKey;
      DHParameterSpec params = pub.getParams();
      if (params instanceof DHDomainParameterSpec)
        return new DHPublicKeyParameters(pub.getY(), ((DHDomainParameterSpec)params).getDomainParameters()); 
      return new DHPublicKeyParameters(pub.getY(), new DHParameters(params
            .getP(), params.getG(), null, params.getL()));
    } 
    throw new InvalidKeyException("public key not a DHPublicKey");
  }
}
