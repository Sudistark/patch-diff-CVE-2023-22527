package org.bouncycastle.jcajce.provider.asymmetric.dh;

import java.security.InvalidAlgorithmParameterException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.SecureRandom;
import java.security.spec.AlgorithmParameterSpec;
import java.util.Hashtable;
import javax.crypto.spec.DHParameterSpec;
import org.bouncycastle.crypto.AsymmetricCipherKeyPair;
import org.bouncycastle.crypto.CryptoServicesRegistrar;
import org.bouncycastle.crypto.generators.DHBasicKeyPairGenerator;
import org.bouncycastle.crypto.generators.DHParametersGenerator;
import org.bouncycastle.crypto.params.DHKeyGenerationParameters;
import org.bouncycastle.crypto.params.DHParameters;
import org.bouncycastle.crypto.params.DHPrivateKeyParameters;
import org.bouncycastle.crypto.params.DHPublicKeyParameters;
import org.bouncycastle.jcajce.provider.asymmetric.util.PrimeCertaintyCalculator;
import org.bouncycastle.jcajce.spec.DHDomainParameterSpec;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.bouncycastle.util.Integers;

public class KeyPairGeneratorSpi extends KeyPairGenerator {
  private static Hashtable params = new Hashtable();
  
  private static Object lock = new Object();
  
  DHKeyGenerationParameters param;
  
  DHBasicKeyPairGenerator engine = new DHBasicKeyPairGenerator();
  
  int strength = 2048;
  
  SecureRandom random = CryptoServicesRegistrar.getSecureRandom();
  
  boolean initialised = false;
  
  public KeyPairGeneratorSpi() { super("DH"); }
  
  public void initialize(int strength, SecureRandom random) {
    this.strength = strength;
    this.random = random;
    this.initialised = false;
  }
  
  public void initialize(AlgorithmParameterSpec params, SecureRandom random) throws InvalidAlgorithmParameterException {
    if (!(params instanceof DHParameterSpec))
      throw new InvalidAlgorithmParameterException("parameter object not a DHParameterSpec"); 
    DHParameterSpec dhParams = (DHParameterSpec)params;
    try {
      this.param = convertParams(random, dhParams);
    } catch (IllegalArgumentException e) {
      throw new InvalidAlgorithmParameterException(e.getMessage(), e);
    } 
    this.engine.init(this.param);
    this.initialised = true;
  }
  
  private DHKeyGenerationParameters convertParams(SecureRandom random, DHParameterSpec dhParams) {
    if (dhParams instanceof DHDomainParameterSpec)
      return new DHKeyGenerationParameters(random, ((DHDomainParameterSpec)dhParams).getDomainParameters()); 
    return new DHKeyGenerationParameters(random, new DHParameters(dhParams.getP(), dhParams.getG(), null, dhParams.getL()));
  }
  
  public KeyPair generateKeyPair() {
    if (!this.initialised) {
      Integer paramStrength = Integers.valueOf(this.strength);
      if (params.containsKey(paramStrength)) {
        this.param = (DHKeyGenerationParameters)params.get(paramStrength);
      } else {
        DHParameterSpec dhParams = BouncyCastleProvider.CONFIGURATION.getDHDefaultParameters(this.strength);
        if (dhParams != null) {
          this.param = convertParams(this.random, dhParams);
        } else {
          synchronized (lock) {
            if (params.containsKey(paramStrength)) {
              this.param = (DHKeyGenerationParameters)params.get(paramStrength);
            } else {
              DHParametersGenerator pGen = new DHParametersGenerator();
              pGen.init(this.strength, PrimeCertaintyCalculator.getDefaultCertainty(this.strength), this.random);
              this.param = new DHKeyGenerationParameters(this.random, pGen.generateParameters());
              params.put(paramStrength, this.param);
            } 
          } 
        } 
      } 
      this.engine.init(this.param);
      this.initialised = true;
    } 
    AsymmetricCipherKeyPair pair = this.engine.generateKeyPair();
    DHPublicKeyParameters pub = (DHPublicKeyParameters)pair.getPublic();
    DHPrivateKeyParameters priv = (DHPrivateKeyParameters)pair.getPrivate();
    return new KeyPair(new BCDHPublicKey(pub), new BCDHPrivateKey(priv));
  }
}
