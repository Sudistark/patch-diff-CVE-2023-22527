package org.bouncycastle.jcajce.spec;

import java.security.KeyPair;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.spec.AlgorithmParameterSpec;
import org.bouncycastle.util.Arrays;

public class DHUParameterSpec implements AlgorithmParameterSpec {
  private final PublicKey ephemeralPublicKey;
  
  private final PrivateKey ephemeralPrivateKey;
  
  private final PublicKey otherPartyEphemeralKey;
  
  private final byte[] userKeyingMaterial;
  
  public DHUParameterSpec(PublicKey ephemeralPublicKey, PrivateKey ephemeralPrivateKey, PublicKey otherPartyEphemeralKey, byte[] userKeyingMaterial) {
    if (ephemeralPrivateKey == null)
      throw new IllegalArgumentException("ephemeral private key cannot be null"); 
    if (otherPartyEphemeralKey == null)
      throw new IllegalArgumentException("other party ephemeral key cannot be null"); 
    this.ephemeralPublicKey = ephemeralPublicKey;
    this.ephemeralPrivateKey = ephemeralPrivateKey;
    this.otherPartyEphemeralKey = otherPartyEphemeralKey;
    this.userKeyingMaterial = Arrays.clone(userKeyingMaterial);
  }
  
  public DHUParameterSpec(PublicKey ephemeralPublicKey, PrivateKey ephemeralPrivateKey, PublicKey otherPartyEphemeralKey) { this(ephemeralPublicKey, ephemeralPrivateKey, otherPartyEphemeralKey, null); }
  
  public DHUParameterSpec(KeyPair ephemeralKeyPair, PublicKey otherPartyEphemeralKey, byte[] userKeyingMaterial) { this(ephemeralKeyPair.getPublic(), ephemeralKeyPair.getPrivate(), otherPartyEphemeralKey, userKeyingMaterial); }
  
  public DHUParameterSpec(PrivateKey ephemeralPrivateKey, PublicKey otherPartyEphemeralKey, byte[] userKeyingMaterial) { this(null, ephemeralPrivateKey, otherPartyEphemeralKey, userKeyingMaterial); }
  
  public DHUParameterSpec(KeyPair ephemeralKeyPair, PublicKey otherPartyEphemeralKey) { this(ephemeralKeyPair.getPublic(), ephemeralKeyPair.getPrivate(), otherPartyEphemeralKey, null); }
  
  public DHUParameterSpec(PrivateKey ephemeralPrivateKey, PublicKey otherPartyEphemeralKey) { this(null, ephemeralPrivateKey, otherPartyEphemeralKey, null); }
  
  public PrivateKey getEphemeralPrivateKey() { return this.ephemeralPrivateKey; }
  
  public PublicKey getEphemeralPublicKey() { return this.ephemeralPublicKey; }
  
  public PublicKey getOtherPartyEphemeralKey() { return this.otherPartyEphemeralKey; }
  
  public byte[] getUserKeyingMaterial() { return Arrays.clone(this.userKeyingMaterial); }
}
