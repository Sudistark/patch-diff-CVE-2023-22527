package org.bouncycastle.asn1.pkcs;

import java.math.BigInteger;
import java.util.Enumeration;
import org.bouncycastle.asn1.ASN1EncodableVector;
import org.bouncycastle.asn1.ASN1Integer;
import org.bouncycastle.asn1.ASN1Object;
import org.bouncycastle.asn1.ASN1Primitive;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.DERSequence;

public class DHParameter extends ASN1Object {
  ASN1Integer p;
  
  ASN1Integer g;
  
  ASN1Integer l;
  
  public DHParameter(BigInteger p, BigInteger g, int l) {
    this.p = new ASN1Integer(p);
    this.g = new ASN1Integer(g);
    if (l != 0) {
      this.l = new ASN1Integer(l);
    } else {
      this.l = null;
    } 
  }
  
  public static DHParameter getInstance(Object obj) {
    if (obj instanceof DHParameter)
      return (DHParameter)obj; 
    if (obj != null)
      return new DHParameter(ASN1Sequence.getInstance(obj)); 
    return null;
  }
  
  private DHParameter(ASN1Sequence seq) {
    Enumeration e = seq.getObjects();
    this.p = ASN1Integer.getInstance(e.nextElement());
    this.g = ASN1Integer.getInstance(e.nextElement());
    if (e.hasMoreElements()) {
      this.l = (ASN1Integer)e.nextElement();
    } else {
      this.l = null;
    } 
  }
  
  public BigInteger getP() { return this.p.getPositiveValue(); }
  
  public BigInteger getG() { return this.g.getPositiveValue(); }
  
  public BigInteger getL() {
    if (this.l == null)
      return null; 
    return this.l.getPositiveValue();
  }
  
  public ASN1Primitive toASN1Primitive() {
    ASN1EncodableVector v = new ASN1EncodableVector(3);
    v.add(this.p);
    v.add(this.g);
    if (getL() != null)
      v.add(this.l); 
    return new DERSequence(v);
  }
}
