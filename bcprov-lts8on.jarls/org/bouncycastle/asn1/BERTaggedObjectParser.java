package org.bouncycastle.asn1;

import java.io.IOException;

class BERTaggedObjectParser implements ASN1TaggedObjectParser {
  final int _tagClass;
  
  final int _tagNo;
  
  final ASN1StreamParser _parser;
  
  BERTaggedObjectParser(int tagClass, int tagNo, ASN1StreamParser parser) {
    this._tagClass = tagClass;
    this._tagNo = tagNo;
    this._parser = parser;
  }
  
  public int getTagClass() { return this._tagClass; }
  
  public int getTagNo() { return this._tagNo; }
  
  public boolean hasContextTag(int tagNo) { return (this._tagClass == 128 && this._tagNo == tagNo); }
  
  public boolean hasTag(int tagClass, int tagNo) { return (this._tagClass == tagClass && this._tagNo == tagNo); }
  
  public ASN1Primitive getLoadedObject() throws IOException { return this._parser.loadTaggedIL(this._tagClass, this._tagNo); }
  
  public ASN1Encodable parseBaseUniversal(boolean declaredExplicit, int baseTagNo) throws IOException {
    if (declaredExplicit)
      return this._parser.parseObject(baseTagNo); 
    return this._parser.parseImplicitConstructedIL(baseTagNo);
  }
  
  public ASN1Encodable parseExplicitBaseObject() throws IOException { return this._parser.readObject(); }
  
  public ASN1TaggedObjectParser parseExplicitBaseTagged() throws IOException { return this._parser.parseTaggedObject(); }
  
  public ASN1TaggedObjectParser parseImplicitBaseTagged(int baseTagClass, int baseTagNo) throws IOException { return new BERTaggedObjectParser(baseTagClass, baseTagNo, this._parser); }
  
  public ASN1Primitive toASN1Primitive() throws IOException {
    try {
      return getLoadedObject();
    } catch (IOException e) {
      throw new ASN1ParsingException(e.getMessage());
    } 
  }
}
