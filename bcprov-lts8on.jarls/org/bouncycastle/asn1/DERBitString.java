package org.bouncycastle.asn1;

import java.io.IOException;

public class DERBitString extends ASN1BitString {
  public static DERBitString convert(ASN1BitString bitString) { return (DERBitString)bitString.toDERObject(); }
  
  public DERBitString(byte[] data) { this(data, 0); }
  
  public DERBitString(byte data, int padBits) { super(data, padBits); }
  
  public DERBitString(byte[] data, int padBits) { super(data, padBits); }
  
  public DERBitString(int value) { super(getBytes(value), getPadBits(value)); }
  
  public DERBitString(ASN1Encodable obj) throws IOException { super(obj.toASN1Primitive().getEncoded("DER"), 0); }
  
  DERBitString(byte[] contents, boolean check) { super(contents, check); }
  
  boolean encodeConstructed() { return false; }
  
  int encodedLength(boolean withTag) { return ASN1OutputStream.getLengthOfEncodingDL(withTag, this.contents.length); }
  
  void encode(ASN1OutputStream out, boolean withTag) throws IOException {
    int padBits = this.contents[0] & 0xFF;
    int length = this.contents.length;
    int last = length - 1;
    byte lastOctet = this.contents[last];
    byte lastOctetDER = (byte)(this.contents[last] & 255 << padBits);
    if (lastOctet == lastOctetDER) {
      out.writeEncodingDL(withTag, 3, this.contents);
    } else {
      out.writeEncodingDL(withTag, 3, this.contents, 0, last, lastOctetDER);
    } 
  }
  
  ASN1Primitive toDERObject() { return this; }
  
  ASN1Primitive toDLObject() { return this; }
  
  static DERBitString fromOctetString(ASN1OctetString octetString) { return new DERBitString(octetString.getOctets(), true); }
}
