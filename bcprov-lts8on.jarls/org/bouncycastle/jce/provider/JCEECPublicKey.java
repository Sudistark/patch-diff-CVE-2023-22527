package org.bouncycastle.jce.provider;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.math.BigInteger;
import java.security.interfaces.ECPublicKey;
import java.security.spec.ECParameterSpec;
import java.security.spec.ECPoint;
import java.security.spec.ECPublicKeySpec;
import java.security.spec.EllipticCurve;
import org.bouncycastle.asn1.ASN1BitString;
import org.bouncycastle.asn1.ASN1ObjectIdentifier;
import org.bouncycastle.asn1.ASN1OctetString;
import org.bouncycastle.asn1.ASN1Primitive;
import org.bouncycastle.asn1.DERNull;
import org.bouncycastle.asn1.DEROctetString;
import org.bouncycastle.asn1.cryptopro.CryptoProObjectIdentifiers;
import org.bouncycastle.asn1.cryptopro.ECGOST3410NamedCurves;
import org.bouncycastle.asn1.cryptopro.GOST3410PublicKeyAlgParameters;
import org.bouncycastle.asn1.x509.AlgorithmIdentifier;
import org.bouncycastle.asn1.x509.SubjectPublicKeyInfo;
import org.bouncycastle.asn1.x9.X962Parameters;
import org.bouncycastle.asn1.x9.X9ECParameters;
import org.bouncycastle.asn1.x9.X9ECPoint;
import org.bouncycastle.asn1.x9.X9IntegerConverter;
import org.bouncycastle.asn1.x9.X9ObjectIdentifiers;
import org.bouncycastle.crypto.params.ECDomainParameters;
import org.bouncycastle.crypto.params.ECPublicKeyParameters;
import org.bouncycastle.jcajce.provider.asymmetric.util.EC5Util;
import org.bouncycastle.jcajce.provider.asymmetric.util.ECUtil;
import org.bouncycastle.jcajce.provider.asymmetric.util.KeyUtil;
import org.bouncycastle.jce.ECGOST3410NamedCurveTable;
import org.bouncycastle.jce.interfaces.ECPointEncoder;
import org.bouncycastle.jce.interfaces.ECPublicKey;
import org.bouncycastle.jce.spec.ECNamedCurveParameterSpec;
import org.bouncycastle.jce.spec.ECNamedCurveSpec;
import org.bouncycastle.jce.spec.ECParameterSpec;
import org.bouncycastle.jce.spec.ECPublicKeySpec;
import org.bouncycastle.math.ec.ECCurve;
import org.bouncycastle.math.ec.ECPoint;
import org.bouncycastle.util.Strings;

public class JCEECPublicKey implements ECPublicKey, ECPublicKey, ECPointEncoder {
  private String algorithm;
  
  private ECPoint q;
  
  private ECParameterSpec ecSpec;
  
  private boolean withCompression;
  
  private GOST3410PublicKeyAlgParameters gostParams;
  
  public JCEECPublicKey(String algorithm, JCEECPublicKey key) {
    this.algorithm = "EC";
    this.algorithm = algorithm;
    this.q = key.q;
    this.ecSpec = key.ecSpec;
    this.withCompression = key.withCompression;
    this.gostParams = key.gostParams;
  }
  
  public JCEECPublicKey(String algorithm, ECPublicKeySpec spec) {
    this.algorithm = "EC";
    this.algorithm = algorithm;
    this.ecSpec = spec.getParams();
    this.q = EC5Util.convertPoint(this.ecSpec, spec.getW());
  }
  
  public JCEECPublicKey(String algorithm, ECPublicKeySpec spec) {
    this.algorithm = "EC";
    this.algorithm = algorithm;
    this.q = spec.getQ();
    if (spec.getParams() != null) {
      ECCurve curve = spec.getParams().getCurve();
      EllipticCurve ellipticCurve = EC5Util.convertCurve(curve, spec.getParams().getSeed());
      this.ecSpec = EC5Util.convertSpec(ellipticCurve, spec.getParams());
    } else {
      if (this.q.getCurve() == null) {
        ECParameterSpec s = BouncyCastleProvider.CONFIGURATION.getEcImplicitlyCa();
        this.q = s.getCurve().createPoint(this.q.getAffineXCoord().toBigInteger(), this.q.getAffineYCoord().toBigInteger());
      } 
      this.ecSpec = null;
    } 
  }
  
  public JCEECPublicKey(String algorithm, ECPublicKeyParameters params, ECParameterSpec spec) {
    this.algorithm = "EC";
    ECDomainParameters dp = params.getParameters();
    this.algorithm = algorithm;
    this.q = params.getQ();
    if (spec == null) {
      EllipticCurve ellipticCurve = EC5Util.convertCurve(dp.getCurve(), dp.getSeed());
      this.ecSpec = createSpec(ellipticCurve, dp);
    } else {
      this.ecSpec = spec;
    } 
  }
  
  public JCEECPublicKey(String algorithm, ECPublicKeyParameters params, ECParameterSpec spec) {
    this.algorithm = "EC";
    ECDomainParameters dp = params.getParameters();
    this.algorithm = algorithm;
    this.q = params.getQ();
    if (spec == null) {
      EllipticCurve ellipticCurve = EC5Util.convertCurve(dp.getCurve(), dp.getSeed());
      this.ecSpec = createSpec(ellipticCurve, dp);
    } else {
      EllipticCurve ellipticCurve = EC5Util.convertCurve(spec.getCurve(), spec.getSeed());
      this.ecSpec = EC5Util.convertSpec(ellipticCurve, spec);
    } 
  }
  
  public JCEECPublicKey(String algorithm, ECPublicKeyParameters params) {
    this.algorithm = "EC";
    this.algorithm = algorithm;
    this.q = params.getQ();
    this.ecSpec = null;
  }
  
  private ECParameterSpec createSpec(EllipticCurve ellipticCurve, ECDomainParameters dp) {
    return new ECParameterSpec(ellipticCurve, 
        
        EC5Util.convertPoint(dp.getG()), dp
        .getN(), dp
        .getH().intValue());
  }
  
  public JCEECPublicKey(ECPublicKey key) {
    this.algorithm = "EC";
    this.algorithm = key.getAlgorithm();
    this.ecSpec = key.getParams();
    this.q = EC5Util.convertPoint(this.ecSpec, key.getW());
  }
  
  JCEECPublicKey(SubjectPublicKeyInfo info) {
    this.algorithm = "EC";
    populateFromPubKeyInfo(info);
  }
  
  private void populateFromPubKeyInfo(SubjectPublicKeyInfo info) {
    AlgorithmIdentifier algID = info.getAlgorithm();
    if (algID.getAlgorithm().equals(CryptoProObjectIdentifiers.gostR3410_2001)) {
      ASN1OctetString key;
      ASN1BitString bits = info.getPublicKeyData();
      this.algorithm = "ECGOST3410";
      try {
        key = (ASN1OctetString)ASN1Primitive.fromByteArray(bits.getBytes());
      } catch (IOException ex) {
        throw new IllegalArgumentException("error recovering public key");
      } 
      byte[] keyEnc = key.getOctets();
      byte[] x9Encoding = new byte[65];
      x9Encoding[0] = 4;
      for (int i = 1; i <= 32; i++) {
        x9Encoding[i] = keyEnc[32 - i];
        x9Encoding[i + 32] = keyEnc[64 - i];
      } 
      this.gostParams = GOST3410PublicKeyAlgParameters.getInstance(algID.getParameters());
      ECNamedCurveParameterSpec spec = ECGOST3410NamedCurveTable.getParameterSpec(ECGOST3410NamedCurves.getName(this.gostParams.getPublicKeyParamSet()));
      ECCurve curve = spec.getCurve();
      EllipticCurve ellipticCurve = EC5Util.convertCurve(curve, spec.getSeed());
      this.q = curve.decodePoint(x9Encoding);
      this



        
        .ecSpec = new ECNamedCurveSpec(ECGOST3410NamedCurves.getName(this.gostParams.getPublicKeyParamSet()), ellipticCurve, EC5Util.convertPoint(spec.getG()), spec.getN(), spec.getH());
    } else {
      ECCurve curve;
      X962Parameters params = X962Parameters.getInstance(algID.getParameters());
      if (params.isNamedCurve()) {
        ASN1ObjectIdentifier oid = (ASN1ObjectIdentifier)params.getParameters();
        X9ECParameters ecP = ECUtil.getNamedCurveByOid(oid);
        curve = ecP.getCurve();
        EllipticCurve ellipticCurve = EC5Util.convertCurve(curve, ecP.getSeed());
        this



          
          .ecSpec = new ECNamedCurveSpec(ECUtil.getCurveName(oid), ellipticCurve, EC5Util.convertPoint(ecP.getG()), ecP.getN(), ecP.getH());
      } else if (params.isImplicitlyCA()) {
        this.ecSpec = null;
        curve = BouncyCastleProvider.CONFIGURATION.getEcImplicitlyCa().getCurve();
      } else {
        X9ECParameters ecP = X9ECParameters.getInstance(params.getParameters());
        curve = ecP.getCurve();
        EllipticCurve ellipticCurve = EC5Util.convertCurve(curve, ecP.getSeed());
        this


          
          .ecSpec = new ECParameterSpec(ellipticCurve, EC5Util.convertPoint(ecP.getG()), ecP.getN(), ecP.getH().intValue());
      } 
      ASN1BitString bits = info.getPublicKeyData();
      byte[] data = bits.getBytes();
      ASN1OctetString aSN1OctetString = new DEROctetString(data);
      if (data[0] == 4 && data[1] == data.length - 2 && (data[2] == 2 || data[2] == 3)) {
        int qLength = (new X9IntegerConverter()).getByteLength(curve);
        if (qLength >= data.length - 3)
          try {
            aSN1OctetString = (ASN1OctetString)ASN1Primitive.fromByteArray(data);
          } catch (IOException ex) {
            throw new IllegalArgumentException("error recovering public key");
          }  
      } 
      X9ECPoint derQ = new X9ECPoint(curve, aSN1OctetString);
      this.q = derQ.getPoint();
    } 
  }
  
  public String getAlgorithm() { return this.algorithm; }
  
  public String getFormat() { return "X.509"; }
  
  public byte[] getEncoded() {
    SubjectPublicKeyInfo info;
    if (this.algorithm.equals("ECGOST3410")) {
      X962Parameters x962Parameters;
      if (this.gostParams != null) {
        x962Parameters = this.gostParams;
      } else if (this.ecSpec instanceof ECNamedCurveSpec) {
        x962Parameters = new GOST3410PublicKeyAlgParameters(ECGOST3410NamedCurves.getOID(((ECNamedCurveSpec)this.ecSpec).getName()), CryptoProObjectIdentifiers.gostR3411_94_CryptoProParamSet);
      } else {
        ECCurve curve = EC5Util.convertCurve(this.ecSpec.getCurve());
        X9ECParameters ecP = new X9ECParameters(curve, new X9ECPoint(EC5Util.convertPoint(curve, this.ecSpec.getGenerator()), this.withCompression), this.ecSpec.getOrder(), BigInteger.valueOf(this.ecSpec.getCofactor()), this.ecSpec.getCurve().getSeed());
        x962Parameters = new X962Parameters(ecP);
      } 
      BigInteger bX = this.q.getAffineXCoord().toBigInteger();
      BigInteger bY = this.q.getAffineYCoord().toBigInteger();
      byte[] encKey = new byte[64];
      extractBytes(encKey, 0, bX);
      extractBytes(encKey, 32, bY);
      try {
        info = new SubjectPublicKeyInfo(new AlgorithmIdentifier(CryptoProObjectIdentifiers.gostR3410_2001, x962Parameters), new DEROctetString(encKey));
      } catch (IOException e) {
        return null;
      } 
    } else {
      X962Parameters x962Parameters;
      if (this.ecSpec instanceof ECNamedCurveSpec) {
        ASN1ObjectIdentifier curveOid = ECUtil.getNamedCurveOid(((ECNamedCurveSpec)this.ecSpec).getName());
        if (curveOid == null)
          curveOid = new ASN1ObjectIdentifier(((ECNamedCurveSpec)this.ecSpec).getName()); 
        x962Parameters = new X962Parameters(curveOid);
      } else if (this.ecSpec == null) {
        x962Parameters = new X962Parameters(DERNull.INSTANCE);
      } else {
        ECCurve curve = EC5Util.convertCurve(this.ecSpec.getCurve());
        X9ECParameters ecP = new X9ECParameters(curve, new X9ECPoint(EC5Util.convertPoint(curve, this.ecSpec.getGenerator()), this.withCompression), this.ecSpec.getOrder(), BigInteger.valueOf(this.ecSpec.getCofactor()), this.ecSpec.getCurve().getSeed());
        x962Parameters = new X962Parameters(ecP);
      } 
      byte[] pubKeyOctets = getQ().getEncoded(this.withCompression);
      info = new SubjectPublicKeyInfo(new AlgorithmIdentifier(X9ObjectIdentifiers.id_ecPublicKey, x962Parameters), pubKeyOctets);
    } 
    return KeyUtil.getEncodedSubjectPublicKeyInfo(info);
  }
  
  private void extractBytes(byte[] encKey, int offSet, BigInteger bI) {
    byte[] val = bI.toByteArray();
    if (val.length < 32) {
      byte[] tmp = new byte[32];
      System.arraycopy(val, 0, tmp, tmp.length - val.length, val.length);
      val = tmp;
    } 
    for (int i = 0; i != 32; i++)
      encKey[offSet + i] = val[val.length - 1 - i]; 
  }
  
  public ECParameterSpec getParams() { return this.ecSpec; }
  
  public ECParameterSpec getParameters() {
    if (this.ecSpec == null)
      return null; 
    return EC5Util.convertSpec(this.ecSpec);
  }
  
  public ECPoint getW() { return EC5Util.convertPoint(this.q); }
  
  public ECPoint getQ() {
    if (this.ecSpec == null)
      return this.q.getDetachedPoint(); 
    return this.q;
  }
  
  public ECPoint engineGetQ() { return this.q; }
  
  ECParameterSpec engineGetSpec() {
    if (this.ecSpec != null)
      return EC5Util.convertSpec(this.ecSpec); 
    return BouncyCastleProvider.CONFIGURATION.getEcImplicitlyCa();
  }
  
  public String toString() {
    StringBuffer buf = new StringBuffer();
    String nl = Strings.lineSeparator();
    buf.append("EC Public Key").append(nl);
    buf.append("            X: ").append(this.q.getAffineXCoord().toBigInteger().toString(16)).append(nl);
    buf.append("            Y: ").append(this.q.getAffineYCoord().toBigInteger().toString(16)).append(nl);
    return buf.toString();
  }
  
  public void setPointFormat(String style) { this.withCompression = !"UNCOMPRESSED".equalsIgnoreCase(style); }
  
  public boolean equals(Object o) {
    if (!(o instanceof JCEECPublicKey))
      return false; 
    JCEECPublicKey other = (JCEECPublicKey)o;
    return (engineGetQ().equals(other.engineGetQ()) && engineGetSpec().equals(other.engineGetSpec()));
  }
  
  public int hashCode() { return engineGetQ().hashCode() ^ engineGetSpec().hashCode(); }
  
  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
    byte[] enc = (byte[])in.readObject();
    populateFromPubKeyInfo(SubjectPublicKeyInfo.getInstance(ASN1Primitive.fromByteArray(enc)));
    this.algorithm = (String)in.readObject();
    this.withCompression = in.readBoolean();
  }
  
  private void writeObject(ObjectOutputStream out) throws IOException {
    out.writeObject(getEncoded());
    out.writeObject(this.algorithm);
    out.writeBoolean(this.withCompression);
  }
}
