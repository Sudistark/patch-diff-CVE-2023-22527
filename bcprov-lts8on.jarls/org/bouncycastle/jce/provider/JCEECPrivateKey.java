package org.bouncycastle.jce.provider;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.math.BigInteger;
import java.security.interfaces.ECPrivateKey;
import java.security.spec.ECParameterSpec;
import java.security.spec.ECPrivateKeySpec;
import java.security.spec.EllipticCurve;
import java.util.Enumeration;
import org.bouncycastle.asn1.ASN1BitString;
import org.bouncycastle.asn1.ASN1Encodable;
import org.bouncycastle.asn1.ASN1Integer;
import org.bouncycastle.asn1.ASN1ObjectIdentifier;
import org.bouncycastle.asn1.ASN1Primitive;
import org.bouncycastle.asn1.DERNull;
import org.bouncycastle.asn1.cryptopro.CryptoProObjectIdentifiers;
import org.bouncycastle.asn1.pkcs.PrivateKeyInfo;
import org.bouncycastle.asn1.sec.ECPrivateKey;
import org.bouncycastle.asn1.x509.AlgorithmIdentifier;
import org.bouncycastle.asn1.x509.SubjectPublicKeyInfo;
import org.bouncycastle.asn1.x9.X962Parameters;
import org.bouncycastle.asn1.x9.X9ECParameters;
import org.bouncycastle.asn1.x9.X9ECPoint;
import org.bouncycastle.asn1.x9.X9ObjectIdentifiers;
import org.bouncycastle.crypto.params.ECDomainParameters;
import org.bouncycastle.crypto.params.ECPrivateKeyParameters;
import org.bouncycastle.jcajce.provider.asymmetric.util.EC5Util;
import org.bouncycastle.jcajce.provider.asymmetric.util.ECUtil;
import org.bouncycastle.jcajce.provider.asymmetric.util.PKCS12BagAttributeCarrierImpl;
import org.bouncycastle.jce.interfaces.ECPointEncoder;
import org.bouncycastle.jce.interfaces.ECPrivateKey;
import org.bouncycastle.jce.interfaces.PKCS12BagAttributeCarrier;
import org.bouncycastle.jce.spec.ECNamedCurveSpec;
import org.bouncycastle.jce.spec.ECParameterSpec;
import org.bouncycastle.jce.spec.ECPrivateKeySpec;
import org.bouncycastle.math.ec.ECCurve;
import org.bouncycastle.util.Strings;

public class JCEECPrivateKey implements ECPrivateKey, ECPrivateKey, PKCS12BagAttributeCarrier, ECPointEncoder {
  private String algorithm = "EC";
  
  private BigInteger d;
  
  private ECParameterSpec ecSpec;
  
  private boolean withCompression;
  
  private ASN1BitString publicKey;
  
  private PKCS12BagAttributeCarrierImpl attrCarrier = new PKCS12BagAttributeCarrierImpl();
  
  protected JCEECPrivateKey() {}
  
  public JCEECPrivateKey(ECPrivateKey key) {
    this.d = key.getS();
    this.algorithm = key.getAlgorithm();
    this.ecSpec = key.getParams();
  }
  
  public JCEECPrivateKey(String algorithm, ECPrivateKeySpec spec) {
    this.algorithm = algorithm;
    this.d = spec.getD();
    if (spec.getParams() != null) {
      ECCurve curve = spec.getParams().getCurve();
      EllipticCurve ellipticCurve = EC5Util.convertCurve(curve, spec.getParams().getSeed());
      this.ecSpec = EC5Util.convertSpec(ellipticCurve, spec.getParams());
    } else {
      this.ecSpec = null;
    } 
  }
  
  public JCEECPrivateKey(String algorithm, ECPrivateKeySpec spec) {
    this.algorithm = algorithm;
    this.d = spec.getS();
    this.ecSpec = spec.getParams();
  }
  
  public JCEECPrivateKey(String algorithm, JCEECPrivateKey key) {
    this.algorithm = algorithm;
    this.d = key.d;
    this.ecSpec = key.ecSpec;
    this.withCompression = key.withCompression;
    this.attrCarrier = key.attrCarrier;
    this.publicKey = key.publicKey;
  }
  
  public JCEECPrivateKey(String algorithm, ECPrivateKeyParameters params, JCEECPublicKey pubKey, ECParameterSpec spec) {
    this.algorithm = algorithm;
    this.d = params.getD();
    if (spec == null) {
      ECDomainParameters dp = params.getParameters();
      EllipticCurve ellipticCurve = EC5Util.convertCurve(dp.getCurve(), dp.getSeed());
      this


        
        .ecSpec = new ECParameterSpec(ellipticCurve, EC5Util.convertPoint(dp.getG()), dp.getN(), dp.getH().intValue());
    } else {
      this.ecSpec = spec;
    } 
    this.publicKey = getPublicKeyDetails(pubKey);
  }
  
  public JCEECPrivateKey(String algorithm, ECPrivateKeyParameters params, JCEECPublicKey pubKey, ECParameterSpec spec) {
    this.algorithm = algorithm;
    this.d = params.getD();
    if (spec == null) {
      ECDomainParameters dp = params.getParameters();
      EllipticCurve ellipticCurve = EC5Util.convertCurve(dp.getCurve(), dp.getSeed());
      this


        
        .ecSpec = new ECParameterSpec(ellipticCurve, EC5Util.convertPoint(dp.getG()), dp.getN(), dp.getH().intValue());
    } else {
      EllipticCurve ellipticCurve = EC5Util.convertCurve(spec.getCurve(), spec.getSeed());
      this


        
        .ecSpec = new ECParameterSpec(ellipticCurve, EC5Util.convertPoint(spec.getG()), spec.getN(), spec.getH().intValue());
    } 
    this.publicKey = getPublicKeyDetails(pubKey);
  }
  
  public JCEECPrivateKey(String algorithm, ECPrivateKeyParameters params) {
    this.algorithm = algorithm;
    this.d = params.getD();
    this.ecSpec = null;
  }
  
  JCEECPrivateKey(PrivateKeyInfo info) throws IOException { populateFromPrivKeyInfo(info); }
  
  private void populateFromPrivKeyInfo(PrivateKeyInfo info) throws IOException {
    X962Parameters params = X962Parameters.getInstance(info.getPrivateKeyAlgorithm().getParameters());
    if (params.isNamedCurve()) {
      ASN1ObjectIdentifier oid = ASN1ObjectIdentifier.getInstance(params.getParameters());
      X9ECParameters ecP = ECUtil.getNamedCurveByOid(oid);
      if (ecP != null) {
        EllipticCurve ellipticCurve = EC5Util.convertCurve(ecP.getCurve(), ecP.getSeed());
        this



          
          .ecSpec = new ECNamedCurveSpec(ECUtil.getCurveName(oid), ellipticCurve, EC5Util.convertPoint(ecP.getG()), ecP.getN(), ecP.getH());
      } 
    } else if (params.isImplicitlyCA()) {
      this.ecSpec = null;
    } else {
      X9ECParameters ecP = X9ECParameters.getInstance(params.getParameters());
      EllipticCurve ellipticCurve = EC5Util.convertCurve(ecP.getCurve(), ecP.getSeed());
      this


        
        .ecSpec = new ECParameterSpec(ellipticCurve, EC5Util.convertPoint(ecP.getG()), ecP.getN(), ecP.getH().intValue());
    } 
    ASN1Encodable privKey = info.parsePrivateKey();
    if (privKey instanceof ASN1Integer) {
      ASN1Integer derD = ASN1Integer.getInstance(privKey);
      this.d = derD.getValue();
    } else {
      ECPrivateKey ec = ECPrivateKey.getInstance(privKey);
      this.d = ec.getKey();
      this.publicKey = ec.getPublicKey();
    } 
  }
  
  public String getAlgorithm() { return this.algorithm; }
  
  public String getFormat() { return "PKCS#8"; }
  
  public byte[] getEncoded() {
    int orderBitLength;
    ECPrivateKey keyStructure;
    X962Parameters params;
    if (this.ecSpec instanceof ECNamedCurveSpec) {
      ASN1ObjectIdentifier curveOid = ECUtil.getNamedCurveOid(((ECNamedCurveSpec)this.ecSpec).getName());
      if (curveOid == null)
        curveOid = new ASN1ObjectIdentifier(((ECNamedCurveSpec)this.ecSpec).getName()); 
      params = new X962Parameters(curveOid);
    } else if (this.ecSpec == null) {
      params = new X962Parameters(DERNull.INSTANCE);
    } else {
      ECCurve curve = EC5Util.convertCurve(this.ecSpec.getCurve());
      keyStructure = new X9ECParameters(curve, new X9ECPoint(EC5Util.convertPoint(curve, this.ecSpec.getGenerator()), this.withCompression), this.ecSpec.getOrder(), BigInteger.valueOf(this.ecSpec.getCofactor()), this.ecSpec.getCurve().getSeed());
      params = new X962Parameters(keyStructure);
    } 
    if (this.ecSpec == null) {
      orderBitLength = ECUtil.getOrderBitLength(null, null, getS());
    } else {
      orderBitLength = ECUtil.getOrderBitLength(null, this.ecSpec.getOrder(), getS());
    } 
    if (this.publicKey != null) {
      keyStructure = new ECPrivateKey(orderBitLength, getS(), this.publicKey, params);
    } else {
      keyStructure = new ECPrivateKey(orderBitLength, getS(), params);
    } 
    try {
      PrivateKeyInfo info;
      if (this.algorithm.equals("ECGOST3410")) {
        info = new PrivateKeyInfo(new AlgorithmIdentifier(CryptoProObjectIdentifiers.gostR3410_2001, params.toASN1Primitive()), keyStructure.toASN1Primitive());
      } else {
        info = new PrivateKeyInfo(new AlgorithmIdentifier(X9ObjectIdentifiers.id_ecPublicKey, params.toASN1Primitive()), keyStructure.toASN1Primitive());
      } 
      return info.getEncoded("DER");
    } catch (IOException e) {
      return null;
    } 
  }
  
  public ECParameterSpec getParams() { return this.ecSpec; }
  
  public ECParameterSpec getParameters() {
    if (this.ecSpec == null)
      return null; 
    return EC5Util.convertSpec(this.ecSpec);
  }
  
  ECParameterSpec engineGetSpec() {
    if (this.ecSpec != null)
      return EC5Util.convertSpec(this.ecSpec); 
    return BouncyCastleProvider.CONFIGURATION.getEcImplicitlyCa();
  }
  
  public BigInteger getS() { return this.d; }
  
  public BigInteger getD() { return this.d; }
  
  public void setBagAttribute(ASN1ObjectIdentifier oid, ASN1Encodable attribute) { this.attrCarrier.setBagAttribute(oid, attribute); }
  
  public ASN1Encodable getBagAttribute(ASN1ObjectIdentifier oid) { return this.attrCarrier.getBagAttribute(oid); }
  
  public Enumeration getBagAttributeKeys() { return this.attrCarrier.getBagAttributeKeys(); }
  
  public void setPointFormat(String style) { this.withCompression = !"UNCOMPRESSED".equalsIgnoreCase(style); }
  
  public boolean equals(Object o) {
    if (!(o instanceof JCEECPrivateKey))
      return false; 
    JCEECPrivateKey other = (JCEECPrivateKey)o;
    return (getD().equals(other.getD()) && engineGetSpec().equals(other.engineGetSpec()));
  }
  
  public int hashCode() { return getD().hashCode() ^ engineGetSpec().hashCode(); }
  
  public String toString() {
    StringBuffer buf = new StringBuffer();
    String nl = Strings.lineSeparator();
    buf.append("EC Private Key").append(nl);
    buf.append("             S: ").append(this.d.toString(16)).append(nl);
    return buf.toString();
  }
  
  private ASN1BitString getPublicKeyDetails(JCEECPublicKey pub) {
    try {
      SubjectPublicKeyInfo info = SubjectPublicKeyInfo.getInstance(ASN1Primitive.fromByteArray(pub.getEncoded()));
      return info.getPublicKeyData();
    } catch (IOException e) {
      return null;
    } 
  }
  
  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
    byte[] enc = (byte[])in.readObject();
    populateFromPrivKeyInfo(PrivateKeyInfo.getInstance(ASN1Primitive.fromByteArray(enc)));
    this.algorithm = (String)in.readObject();
    this.withCompression = in.readBoolean();
    this.attrCarrier = new PKCS12BagAttributeCarrierImpl();
    this.attrCarrier.readObject(in);
  }
  
  private void writeObject(ObjectOutputStream out) throws IOException {
    out.writeObject(getEncoded());
    out.writeObject(this.algorithm);
    out.writeBoolean(this.withCompression);
    this.attrCarrier.writeObject(out);
  }
}
