package org.bouncycastle.jce.provider;

import java.io.IOException;
import java.math.BigInteger;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.RSAPublicKeySpec;
import org.bouncycastle.asn1.DERNull;
import org.bouncycastle.asn1.pkcs.PKCSObjectIdentifiers;
import org.bouncycastle.asn1.pkcs.RSAPublicKey;
import org.bouncycastle.asn1.x509.AlgorithmIdentifier;
import org.bouncycastle.asn1.x509.SubjectPublicKeyInfo;
import org.bouncycastle.crypto.params.RSAKeyParameters;
import org.bouncycastle.jcajce.provider.asymmetric.util.KeyUtil;
import org.bouncycastle.util.Strings;

public class JCERSAPublicKey implements RSAPublicKey {
  static final long serialVersionUID = 2675817738516720772L;
  
  private BigInteger modulus;
  
  private BigInteger publicExponent;
  
  JCERSAPublicKey(RSAKeyParameters key) {
    this.modulus = key.getModulus();
    this.publicExponent = key.getExponent();
  }
  
  JCERSAPublicKey(RSAPublicKeySpec spec) {
    this.modulus = spec.getModulus();
    this.publicExponent = spec.getPublicExponent();
  }
  
  JCERSAPublicKey(RSAPublicKey key) {
    this.modulus = key.getModulus();
    this.publicExponent = key.getPublicExponent();
  }
  
  JCERSAPublicKey(SubjectPublicKeyInfo info) {
    try {
      RSAPublicKey pubKey = RSAPublicKey.getInstance(info.parsePublicKey());
      this.modulus = pubKey.getModulus();
      this.publicExponent = pubKey.getPublicExponent();
    } catch (IOException e) {
      throw new IllegalArgumentException("invalid info structure in RSA public key");
    } 
  }
  
  public BigInteger getModulus() { return this.modulus; }
  
  public BigInteger getPublicExponent() { return this.publicExponent; }
  
  public String getAlgorithm() { return "RSA"; }
  
  public String getFormat() { return "X.509"; }
  
  public byte[] getEncoded() { return KeyUtil.getEncodedSubjectPublicKeyInfo(new AlgorithmIdentifier(PKCSObjectIdentifiers.rsaEncryption, DERNull.INSTANCE), new RSAPublicKey(getModulus(), getPublicExponent())); }
  
  public int hashCode() { return getModulus().hashCode() ^ getPublicExponent().hashCode(); }
  
  public boolean equals(Object o) {
    if (o == this)
      return true; 
    if (!(o instanceof RSAPublicKey))
      return false; 
    RSAPublicKey key = (RSAPublicKey)o;
    return (getModulus().equals(key.getModulus()) && 
      getPublicExponent().equals(key.getPublicExponent()));
  }
  
  public String toString() {
    StringBuffer buf = new StringBuffer();
    String nl = Strings.lineSeparator();
    buf.append("RSA Public Key").append(nl);
    buf.append("            modulus: ").append(getModulus().toString(16)).append(nl);
    buf.append("    public exponent: ").append(getPublicExponent().toString(16)).append(nl);
    return buf.toString();
  }
}
