package org.bouncycastle.jce;

import java.security.spec.ECFieldF2m;
import java.security.spec.ECFieldFp;
import java.security.spec.ECPoint;
import java.security.spec.EllipticCurve;
import org.bouncycastle.jcajce.provider.asymmetric.util.EC5Util;
import org.bouncycastle.math.ec.ECCurve;

public class ECPointUtil {
  public static ECPoint decodePoint(EllipticCurve curve, byte[] encoded) {
    ECCurve.F2m f2m = null;
    if (curve.getField() instanceof ECFieldFp) {
      ECCurve.Fp fp = new ECCurve.Fp(((ECFieldFp)curve.getField()).getP(), curve.getA(), curve.getB(), null, null);
    } else {
      int[] k = ((ECFieldF2m)curve.getField()).getMidTermsOfReductionPolynomial();
      if (k.length == 3) {
        ECCurve.F2m f2m1 = new ECCurve.F2m(((ECFieldF2m)curve.getField()).getM(), k[2], k[1], k[0], curve.getA(), curve.getB(), null, null);
      } else {
        f2m = new ECCurve.F2m(((ECFieldF2m)curve.getField()).getM(), k[0], curve.getA(), curve.getB(), null, null);
      } 
    } 
    return EC5Util.convertPoint(f2m.decodePoint(encoded));
  }
}
