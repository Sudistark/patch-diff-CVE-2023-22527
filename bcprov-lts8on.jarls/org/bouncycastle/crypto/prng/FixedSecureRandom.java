package org.bouncycastle.crypto.prng;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.security.SecureRandom;

public class FixedSecureRandom extends SecureRandom {
  private byte[] _data;
  
  private int _index;
  
  private int _intPad;
  
  public FixedSecureRandom(byte[] value) { this(false, new byte[][] { value }); }
  
  public FixedSecureRandom(byte[][] values) { this(false, values); }
  
  public FixedSecureRandom(boolean intPad, byte[] value) { this(intPad, new byte[][] { value }); }
  
  public FixedSecureRandom(boolean intPad, byte[][] values) {
    ByteArrayOutputStream bOut = new ByteArrayOutputStream();
    for (int i = 0; i != values.length; i++) {
      try {
        bOut.write(values[i]);
      } catch (IOException e) {
        throw new IllegalArgumentException("can't save value array.");
      } 
    } 
    this._data = bOut.toByteArray();
    if (intPad)
      this._intPad = this._data.length % 4; 
  }
  
  public void nextBytes(byte[] bytes) {
    System.arraycopy(this._data, this._index, bytes, 0, bytes.length);
    this._index += bytes.length;
  }
  
  public byte[] generateSeed(int numBytes) {
    byte[] bytes = new byte[numBytes];
    nextBytes(bytes);
    return bytes;
  }
  
  public int nextInt() {
    int val = 0;
    val |= nextValue() << 24;
    val |= nextValue() << 16;
    if (this._intPad == 2) {
      this._intPad--;
    } else {
      val |= nextValue() << 8;
    } 
    if (this._intPad == 1) {
      this._intPad--;
    } else {
      val |= nextValue();
    } 
    return val;
  }
  
  public long nextLong() {
    val = 0L;
    val |= nextValue() << 56;
    val |= nextValue() << 48;
    val |= nextValue() << 40;
    val |= nextValue() << 32;
    val |= nextValue() << 24;
    val |= nextValue() << 16;
    val |= nextValue() << 8;
    return nextValue();
  }
  
  public boolean isExhausted() { return (this._index == this._data.length); }
  
  private int nextValue() { return this._data[this._index++] & 0xFF; }
}
