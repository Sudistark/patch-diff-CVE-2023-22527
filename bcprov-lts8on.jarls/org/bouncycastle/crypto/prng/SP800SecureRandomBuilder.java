package org.bouncycastle.crypto.prng;

import java.security.SecureRandom;
import org.bouncycastle.crypto.BlockCipher;
import org.bouncycastle.crypto.CryptoServicesRegistrar;
import org.bouncycastle.crypto.Digest;
import org.bouncycastle.crypto.Mac;
import org.bouncycastle.util.Arrays;

public class SP800SecureRandomBuilder {
  private final SecureRandom random;
  
  private final EntropySourceProvider entropySourceProvider;
  
  private byte[] personalizationString;
  
  private int securityStrength;
  
  private int entropyBitsRequired;
  
  public SP800SecureRandomBuilder() { this(CryptoServicesRegistrar.getSecureRandom(), false); }
  
  public SP800SecureRandomBuilder(SecureRandom entropySource, boolean predictionResistant) {
    this.securityStrength = 256;
    this.entropyBitsRequired = 256;
    this.random = entropySource;
    this.entropySourceProvider = new BasicEntropySourceProvider(this.random, predictionResistant);
  }
  
  public SP800SecureRandomBuilder(EntropySourceProvider entropySourceProvider) {
    this.securityStrength = 256;
    this.entropyBitsRequired = 256;
    this.random = null;
    this.entropySourceProvider = entropySourceProvider;
  }
  
  public SP800SecureRandomBuilder setPersonalizationString(byte[] personalizationString) {
    this.personalizationString = Arrays.clone(personalizationString);
    return this;
  }
  
  public SP800SecureRandomBuilder setSecurityStrength(int securityStrength) {
    this.securityStrength = securityStrength;
    return this;
  }
  
  public SP800SecureRandomBuilder setEntropyBitsRequired(int entropyBitsRequired) {
    this.entropyBitsRequired = entropyBitsRequired;
    return this;
  }
  
  public SP800SecureRandom buildHash(Digest digest, byte[] nonce, boolean predictionResistant) { return new SP800SecureRandom(this.random, this.entropySourceProvider.get(this.entropyBitsRequired), new HashDRBGProvider(digest, nonce, this.personalizationString, this.securityStrength), predictionResistant); }
  
  public SP800SecureRandom buildCTR(BlockCipher cipher, int keySizeInBits, byte[] nonce, boolean predictionResistant) { return new SP800SecureRandom(this.random, this.entropySourceProvider.get(this.entropyBitsRequired), new CTRDRBGProvider(cipher, keySizeInBits, nonce, this.personalizationString, this.securityStrength), predictionResistant); }
  
  public SP800SecureRandom buildHMAC(Mac hMac, byte[] nonce, boolean predictionResistant) { return new SP800SecureRandom(this.random, this.entropySourceProvider.get(this.entropyBitsRequired), new HMacDRBGProvider(hMac, nonce, this.personalizationString, this.securityStrength), predictionResistant); }
  
  private static String getSimplifiedName(Digest digest) {
    String name = digest.getAlgorithmName();
    int dIndex = name.indexOf('-');
    if (dIndex > 0 && !name.startsWith("SHA3"))
      return name.substring(0, dIndex) + name.substring(dIndex + 1); 
    return name;
  }
}
