package org.bouncycastle.crypto.macs;

import org.bouncycastle.crypto.BlockCipher;
import org.bouncycastle.crypto.CipherParameters;
import org.bouncycastle.crypto.DataLengthException;
import org.bouncycastle.crypto.OutputLengthException;
import org.bouncycastle.crypto.params.ParametersWithIV;

class MacCFBBlockCipher {
  private byte[] IV;
  
  private byte[] cfbV;
  
  private byte[] cfbOutV;
  
  private int blockSize;
  
  private BlockCipher cipher;
  
  public MacCFBBlockCipher(BlockCipher cipher, int bitBlockSize) {
    this.cipher = null;
    this.cipher = cipher;
    this.blockSize = bitBlockSize / 8;
    this.IV = new byte[cipher.getBlockSize()];
    this.cfbV = new byte[cipher.getBlockSize()];
    this.cfbOutV = new byte[cipher.getBlockSize()];
  }
  
  public void init(CipherParameters params) throws IllegalArgumentException {
    if (params instanceof ParametersWithIV) {
      ParametersWithIV ivParam = (ParametersWithIV)params;
      byte[] iv = ivParam.getIV();
      if (iv.length < this.IV.length) {
        System.arraycopy(iv, 0, this.IV, this.IV.length - iv.length, iv.length);
      } else {
        System.arraycopy(iv, 0, this.IV, 0, this.IV.length);
      } 
      reset();
      this.cipher.init(true, ivParam.getParameters());
    } else {
      reset();
      this.cipher.init(true, params);
    } 
  }
  
  public String getAlgorithmName() { return this.cipher.getAlgorithmName() + "/CFB" + (this.blockSize * 8); }
  
  public int getBlockSize() { return this.blockSize; }
  
  public int processBlock(byte[] in, int inOff, byte[] out, int outOff) throws DataLengthException, IllegalStateException {
    if (inOff + this.blockSize > in.length)
      throw new DataLengthException("input buffer too short"); 
    if (outOff + this.blockSize > out.length)
      throw new OutputLengthException("output buffer too short"); 
    this.cipher.processBlock(this.cfbV, 0, this.cfbOutV, 0);
    for (int i = 0; i < this.blockSize; i++)
      out[outOff + i] = (byte)(this.cfbOutV[i] ^ in[inOff + i]); 
    System.arraycopy(this.cfbV, this.blockSize, this.cfbV, 0, this.cfbV.length - this.blockSize);
    System.arraycopy(out, outOff, this.cfbV, this.cfbV.length - this.blockSize, this.blockSize);
    return this.blockSize;
  }
  
  public void reset() {
    System.arraycopy(this.IV, 0, this.cfbV, 0, this.IV.length);
    this.cipher.reset();
  }
  
  void getMacBlock(byte[] mac) { this.cipher.processBlock(this.cfbV, 0, mac, 0); }
}
