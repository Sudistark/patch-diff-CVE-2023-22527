package org.bouncycastle.crypto.agreement;

import org.bouncycastle.crypto.CryptoServiceProperties;
import org.bouncycastle.crypto.CryptoServicePurpose;
import org.bouncycastle.crypto.constraints.ConstraintUtils;
import org.bouncycastle.crypto.constraints.DefaultServiceProperties;
import org.bouncycastle.crypto.params.DHKeyParameters;
import org.bouncycastle.crypto.params.ECKeyParameters;
import org.bouncycastle.crypto.params.X25519PrivateKeyParameters;
import org.bouncycastle.crypto.params.X448PrivateKeyParameters;

class Utils {
  static CryptoServiceProperties getDefaultProperties(String algorithm, ECKeyParameters k) { return new DefaultServiceProperties(algorithm, ConstraintUtils.bitsOfSecurityFor(k.getParameters().getCurve()), k, CryptoServicePurpose.AGREEMENT); }
  
  static CryptoServiceProperties getDefaultProperties(String algorithm, DHKeyParameters k) { return new DefaultServiceProperties(algorithm, ConstraintUtils.bitsOfSecurityFor(k.getParameters().getP()), k, CryptoServicePurpose.AGREEMENT); }
  
  static CryptoServiceProperties getDefaultProperties(String algorithm, X448PrivateKeyParameters k) { return new DefaultServiceProperties(algorithm, 224, k, CryptoServicePurpose.AGREEMENT); }
  
  static CryptoServiceProperties getDefaultProperties(String algorithm, X25519PrivateKeyParameters k) { return new DefaultServiceProperties(algorithm, 128, k, CryptoServicePurpose.AGREEMENT); }
}
