package org.bouncycastle.crypto.agreement;

import java.math.BigInteger;
import org.bouncycastle.crypto.BasicAgreement;
import org.bouncycastle.crypto.CipherParameters;
import org.bouncycastle.crypto.CryptoServicesRegistrar;
import org.bouncycastle.crypto.params.AsymmetricKeyParameter;
import org.bouncycastle.crypto.params.DHParameters;
import org.bouncycastle.crypto.params.DHPrivateKeyParameters;
import org.bouncycastle.crypto.params.DHPublicKeyParameters;
import org.bouncycastle.crypto.params.ParametersWithRandom;

public class DHBasicAgreement implements BasicAgreement {
  private static final BigInteger ONE = BigInteger.valueOf(1L);
  
  private DHPrivateKeyParameters key;
  
  private DHParameters dhParams;
  
  public void init(CipherParameters param) {
    AsymmetricKeyParameter kParam;
    if (param instanceof ParametersWithRandom) {
      ParametersWithRandom rParam = (ParametersWithRandom)param;
      kParam = (AsymmetricKeyParameter)rParam.getParameters();
    } else {
      kParam = (AsymmetricKeyParameter)param;
    } 
    if (!(kParam instanceof DHPrivateKeyParameters))
      throw new IllegalArgumentException("DHEngine expects DHPrivateKeyParameters"); 
    this.key = (DHPrivateKeyParameters)kParam;
    this.dhParams = this.key.getParameters();
    CryptoServicesRegistrar.checkConstraints(Utils.getDefaultProperties("DHB", this.key));
  }
  
  public int getFieldSize() { return (this.key.getParameters().getP().bitLength() + 7) / 8; }
  
  public BigInteger calculateAgreement(CipherParameters pubKey) {
    DHPublicKeyParameters pub = (DHPublicKeyParameters)pubKey;
    if (!pub.getParameters().equals(this.dhParams))
      throw new IllegalArgumentException("Diffie-Hellman public key has wrong parameters."); 
    BigInteger p = this.dhParams.getP();
    BigInteger peerY = pub.getY();
    if (peerY == null || peerY.compareTo(ONE) <= 0 || peerY.compareTo(p.subtract(ONE)) >= 0)
      throw new IllegalArgumentException("Diffie-Hellman public key is weak"); 
    BigInteger result = peerY.modPow(this.key.getX(), p);
    if (result.equals(ONE))
      throw new IllegalStateException("Shared key can't be 1"); 
    return result;
  }
}
