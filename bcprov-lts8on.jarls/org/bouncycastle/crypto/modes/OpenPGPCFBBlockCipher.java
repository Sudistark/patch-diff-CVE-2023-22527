package org.bouncycastle.crypto.modes;

import org.bouncycastle.crypto.BlockCipher;
import org.bouncycastle.crypto.CipherParameters;
import org.bouncycastle.crypto.DataLengthException;
import org.bouncycastle.crypto.OutputLengthException;

public class OpenPGPCFBBlockCipher implements BlockCipher {
  private byte[] IV;
  
  private byte[] FR;
  
  private byte[] FRE;
  
  private BlockCipher cipher;
  
  private int count;
  
  private int blockSize;
  
  private boolean forEncryption;
  
  public OpenPGPCFBBlockCipher(BlockCipher cipher) {
    this.cipher = cipher;
    this.blockSize = cipher.getBlockSize();
    this.IV = new byte[this.blockSize];
    this.FR = new byte[this.blockSize];
    this.FRE = new byte[this.blockSize];
  }
  
  public BlockCipher getUnderlyingCipher() { return this.cipher; }
  
  public String getAlgorithmName() { return this.cipher.getAlgorithmName() + "/OpenPGPCFB"; }
  
  public int getBlockSize() { return this.cipher.getBlockSize(); }
  
  public int processBlock(byte[] in, int inOff, byte[] out, int outOff) throws DataLengthException, IllegalStateException { return this.forEncryption ? encryptBlock(in, inOff, out, outOff) : decryptBlock(in, inOff, out, outOff); }
  
  public void reset() {
    this.count = 0;
    System.arraycopy(this.IV, 0, this.FR, 0, this.FR.length);
    this.cipher.reset();
  }
  
  public void init(boolean forEncryption, CipherParameters params) throws IllegalArgumentException {
    this.forEncryption = forEncryption;
    reset();
    this.cipher.init(true, params);
  }
  
  private byte encryptByte(byte data, int blockOff) { return (byte)(this.FRE[blockOff] ^ data); }
  
  private int encryptBlock(byte[] in, int inOff, byte[] out, int outOff) throws DataLengthException, IllegalStateException {
    if (inOff + this.blockSize > in.length)
      throw new DataLengthException("input buffer too short"); 
    if (outOff + this.blockSize > out.length)
      throw new OutputLengthException("output buffer too short"); 
    if (this.count > this.blockSize) {
      out[outOff] = encryptByte(in[inOff], this.blockSize - 2);
      this.FR[this.blockSize - 2] = encryptByte(in[inOff], this.blockSize - 2);
      out[outOff + 1] = encryptByte(in[inOff + 1], this.blockSize - 1);
      this.FR[this.blockSize - 1] = encryptByte(in[inOff + 1], this.blockSize - 1);
      this.cipher.processBlock(this.FR, 0, this.FRE, 0);
      for (int n = 2; n < this.blockSize; n++) {
        out[outOff + n] = encryptByte(in[inOff + n], n - 2);
        this.FR[n - 2] = encryptByte(in[inOff + n], n - 2);
      } 
    } else if (this.count == 0) {
      this.cipher.processBlock(this.FR, 0, this.FRE, 0);
      for (int n = 0; n < this.blockSize; n++) {
        out[outOff + n] = encryptByte(in[inOff + n], n);
        this.FR[n] = encryptByte(in[inOff + n], n);
      } 
      this.count += this.blockSize;
    } else if (this.count == this.blockSize) {
      this.cipher.processBlock(this.FR, 0, this.FRE, 0);
      out[outOff] = encryptByte(in[inOff], 0);
      out[outOff + 1] = encryptByte(in[inOff + 1], 1);
      System.arraycopy(this.FR, 2, this.FR, 0, this.blockSize - 2);
      System.arraycopy(out, outOff, this.FR, this.blockSize - 2, 2);
      this.cipher.processBlock(this.FR, 0, this.FRE, 0);
      for (int n = 2; n < this.blockSize; n++) {
        out[outOff + n] = encryptByte(in[inOff + n], n - 2);
        this.FR[n - 2] = encryptByte(in[inOff + n], n - 2);
      } 
      this.count += this.blockSize;
    } 
    return this.blockSize;
  }
  
  private int decryptBlock(byte[] in, int inOff, byte[] out, int outOff) throws DataLengthException, IllegalStateException {
    if (inOff + this.blockSize > in.length)
      throw new DataLengthException("input buffer too short"); 
    if (outOff + this.blockSize > out.length)
      throw new OutputLengthException("output buffer too short"); 
    if (this.count > this.blockSize) {
      byte inVal = in[inOff];
      this.FR[this.blockSize - 2] = inVal;
      out[outOff] = encryptByte(inVal, this.blockSize - 2);
      inVal = in[inOff + 1];
      this.FR[this.blockSize - 1] = inVal;
      out[outOff + 1] = encryptByte(inVal, this.blockSize - 1);
      this.cipher.processBlock(this.FR, 0, this.FRE, 0);
      for (int n = 2; n < this.blockSize; n++) {
        inVal = in[inOff + n];
        this.FR[n - 2] = inVal;
        out[outOff + n] = encryptByte(inVal, n - 2);
      } 
    } else if (this.count == 0) {
      this.cipher.processBlock(this.FR, 0, this.FRE, 0);
      for (int n = 0; n < this.blockSize; n++) {
        this.FR[n] = in[inOff + n];
        out[outOff + n] = encryptByte(in[inOff + n], n);
      } 
      this.count += this.blockSize;
    } else if (this.count == this.blockSize) {
      this.cipher.processBlock(this.FR, 0, this.FRE, 0);
      byte inVal1 = in[inOff];
      byte inVal2 = in[inOff + 1];
      out[outOff] = encryptByte(inVal1, 0);
      out[outOff + 1] = encryptByte(inVal2, 1);
      System.arraycopy(this.FR, 2, this.FR, 0, this.blockSize - 2);
      this.FR[this.blockSize - 2] = inVal1;
      this.FR[this.blockSize - 1] = inVal2;
      this.cipher.processBlock(this.FR, 0, this.FRE, 0);
      for (int n = 2; n < this.blockSize; n++) {
        byte inVal = in[inOff + n];
        this.FR[n - 2] = inVal;
        out[outOff + n] = encryptByte(inVal, n - 2);
      } 
      this.count += this.blockSize;
    } 
    return this.blockSize;
  }
}
