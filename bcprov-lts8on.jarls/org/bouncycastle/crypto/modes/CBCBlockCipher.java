package org.bouncycastle.crypto.modes;

import org.bouncycastle.crypto.BlockCipher;
import org.bouncycastle.crypto.CipherParameters;
import org.bouncycastle.crypto.DataLengthException;
import org.bouncycastle.crypto.DefaultMultiBlockCipher;
import org.bouncycastle.crypto.NativeBlockCipherProvider;
import org.bouncycastle.crypto.params.ParametersWithIV;
import org.bouncycastle.util.Arrays;

public class CBCBlockCipher extends DefaultMultiBlockCipher implements CBCModeCipher {
  private byte[] IV;
  
  private byte[] cbcV;
  
  private byte[] cbcNextV;
  
  private int blockSize;
  
  private BlockCipher cipher;
  
  private boolean encrypting;
  
  public static CBCModeCipher newInstance(BlockCipher cipher) {
    if (cipher instanceof NativeBlockCipherProvider)
      return ((NativeBlockCipherProvider)cipher).createCBC(); 
    return new CBCBlockCipher(cipher);
  }
  
  public CBCBlockCipher(BlockCipher cipher) {
    this.cipher = null;
    this.cipher = cipher;
    this.blockSize = cipher.getBlockSize();
    this.IV = new byte[this.blockSize];
    this.cbcV = new byte[this.blockSize];
    this.cbcNextV = new byte[this.blockSize];
  }
  
  public BlockCipher getUnderlyingCipher() { return this.cipher; }
  
  public void init(boolean encrypting, CipherParameters params) throws IllegalArgumentException {
    boolean oldEncrypting = this.encrypting;
    this.encrypting = encrypting;
    if (params instanceof ParametersWithIV) {
      ParametersWithIV ivParam = (ParametersWithIV)params;
      byte[] iv = ivParam.getIV();
      if (iv.length != this.blockSize)
        throw new IllegalArgumentException("initialisation vector must be the same length as block size"); 
      System.arraycopy(iv, 0, this.IV, 0, iv.length);
      reset();
      if (ivParam.getParameters() != null) {
        this.cipher.init(encrypting, ivParam.getParameters());
      } else if (oldEncrypting != encrypting) {
        throw new IllegalArgumentException("cannot change encrypting state without providing key.");
      } 
    } else {
      reset();
      if (params != null) {
        this.cipher.init(encrypting, params);
      } else if (oldEncrypting != encrypting) {
        throw new IllegalArgumentException("cannot change encrypting state without providing key.");
      } 
    } 
  }
  
  public String getAlgorithmName() { return this.cipher.getAlgorithmName() + "/CBC"; }
  
  public int getBlockSize() { return this.cipher.getBlockSize(); }
  
  public int processBlock(byte[] in, int inOff, byte[] out, int outOff) throws DataLengthException, IllegalStateException { return this.encrypting ? encryptBlock(in, inOff, out, outOff) : decryptBlock(in, inOff, out, outOff); }
  
  public void reset() {
    System.arraycopy(this.IV, 0, this.cbcV, 0, this.IV.length);
    Arrays.fill(this.cbcNextV, (byte)0);
    this.cipher.reset();
  }
  
  private int encryptBlock(byte[] in, int inOff, byte[] out, int outOff) throws DataLengthException, IllegalStateException {
    if (inOff + this.blockSize > in.length)
      throw new DataLengthException("input buffer too short"); 
    for (int i = 0; i < this.blockSize; i++)
      this.cbcV[i] = (byte)(this.cbcV[i] ^ in[inOff + i]); 
    int length = this.cipher.processBlock(this.cbcV, 0, out, outOff);
    System.arraycopy(out, outOff, this.cbcV, 0, this.cbcV.length);
    return length;
  }
  
  private int decryptBlock(byte[] in, int inOff, byte[] out, int outOff) throws DataLengthException, IllegalStateException {
    if (inOff + this.blockSize > in.length)
      throw new DataLengthException("input buffer too short"); 
    System.arraycopy(in, inOff, this.cbcNextV, 0, this.blockSize);
    int length = this.cipher.processBlock(in, inOff, out, outOff);
    for (int i = 0; i < this.blockSize; i++)
      out[outOff + i] = (byte)(out[outOff + i] ^ this.cbcV[i]); 
    byte[] tmp = this.cbcV;
    this.cbcV = this.cbcNextV;
    this.cbcNextV = tmp;
    return length;
  }
  
  public String toString() { return "CBC[Java](" + this.cipher.toString() + ")"; }
}
