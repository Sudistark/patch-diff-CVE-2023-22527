package org.bouncycastle.crypto.modes;

import org.bouncycastle.crypto.BlockCipher;
import org.bouncycastle.crypto.CipherParameters;
import org.bouncycastle.crypto.DataLengthException;
import org.bouncycastle.crypto.InvalidCipherTextException;
import org.bouncycastle.crypto.OutputLengthException;
import org.bouncycastle.crypto.macs.CBCBlockCipherMac;
import org.bouncycastle.crypto.params.AEADParameters;
import org.bouncycastle.crypto.params.ParametersWithIV;
import org.bouncycastle.util.Arrays;

public class CCMBlockCipher implements CCMModeCipher {
  private BlockCipher cipher;
  
  private int blockSize;
  
  private boolean forEncryption;
  
  private byte[] nonce;
  
  private byte[] initialAssociatedText;
  
  private int macSize;
  
  private CipherParameters keyParam;
  
  private byte[] macBlock;
  
  private ExposedByteArrayOutputStream associatedText;
  
  private ExposedByteArrayOutputStream data;
  
  public static CCMModeCipher newInstance(BlockCipher cipher) { return new CCMBlockCipher(cipher); }
  
  public CCMBlockCipher(BlockCipher c) {
    this.associatedText = new ExposedByteArrayOutputStream();
    this.data = new ExposedByteArrayOutputStream();
    this.cipher = c;
    this.blockSize = c.getBlockSize();
    this.macBlock = new byte[this.blockSize];
    if (this.blockSize != 16)
      throw new IllegalArgumentException("cipher required with a block size of 16."); 
  }
  
  public BlockCipher getUnderlyingCipher() { return this.cipher; }
  
  public void init(boolean forEncryption, CipherParameters params) throws IllegalArgumentException {
    CipherParameters cipherParameters;
    this.forEncryption = forEncryption;
    if (params instanceof AEADParameters) {
      AEADParameters param = (AEADParameters)params;
      this.nonce = param.getNonce();
      this.initialAssociatedText = param.getAssociatedText();
      this.macSize = getMacSize(forEncryption, param.getMacSize());
      cipherParameters = param.getKey();
    } else if (params instanceof ParametersWithIV) {
      ParametersWithIV param = (ParametersWithIV)params;
      this.nonce = param.getIV();
      this.initialAssociatedText = null;
      this.macSize = getMacSize(forEncryption, 64);
      cipherParameters = param.getParameters();
    } else {
      throw new IllegalArgumentException("invalid parameters passed to CCM: " + params.getClass().getName());
    } 
    if (cipherParameters != null)
      this.keyParam = cipherParameters; 
    if (this.nonce == null || this.nonce.length < 7 || this.nonce.length > 13)
      throw new IllegalArgumentException("nonce must have length from 7 to 13 octets"); 
    reset();
  }
  
  public String getAlgorithmName() { return this.cipher.getAlgorithmName() + "/CCM"; }
  
  public void processAADByte(byte in) { this.associatedText.write(in); }
  
  public void processAADBytes(byte[] in, int inOff, int len) { this.associatedText.write(in, inOff, len); }
  
  public int processByte(byte in, byte[] out, int outOff) throws DataLengthException, IllegalStateException {
    this.data.write(in);
    return 0;
  }
  
  public int processBytes(byte[] in, int inOff, int inLen, byte[] out, int outOff) throws DataLengthException, IllegalStateException {
    if (in.length < inOff + inLen)
      throw new DataLengthException("Input buffer too short"); 
    this.data.write(in, inOff, inLen);
    return 0;
  }
  
  public int doFinal(byte[] out, int outOff) throws IllegalStateException, InvalidCipherTextException {
    int len = processPacket(this.data.getBuffer(), 0, this.data.size(), out, outOff);
    reset();
    return len;
  }
  
  public void reset() {
    this.cipher.reset();
    this.associatedText.reset();
    this.data.reset();
  }
  
  public byte[] getMac() {
    byte[] mac = new byte[this.macSize];
    System.arraycopy(this.macBlock, 0, mac, 0, mac.length);
    return mac;
  }
  
  public int getUpdateOutputSize(int len) { return 0; }
  
  public int getOutputSize(int len) {
    int totalData = len + this.data.size();
    if (this.forEncryption)
      return totalData + this.macSize; 
    return (totalData < this.macSize) ? 0 : (totalData - this.macSize);
  }
  
  public byte[] processPacket(byte[] in, int inOff, int inLen) throws IllegalStateException, InvalidCipherTextException {
    byte[] output;
    if (this.forEncryption) {
      output = new byte[inLen + this.macSize];
    } else {
      if (inLen < this.macSize)
        throw new InvalidCipherTextException("data too short"); 
      output = new byte[inLen - this.macSize];
    } 
    processPacket(in, inOff, inLen, output, 0);
    return output;
  }
  
  public int processPacket(byte[] in, int inOff, int inLen, byte[] output, int outOff) throws DataLengthException, IllegalStateException {
    int outputLen;
    if (this.keyParam == null)
      throw new IllegalStateException("CCM cipher unitialized."); 
    int n = this.nonce.length;
    int q = 15 - n;
    if (q < 4) {
      int limitLen = 1 << 8 * q;
      if (inLen >= limitLen)
        throw new IllegalStateException("CCM packet too large for choice of q."); 
    } 
    byte[] iv = new byte[this.blockSize];
    iv[0] = (byte)(q - 1 & 0x7);
    System.arraycopy(this.nonce, 0, iv, 1, this.nonce.length);
    SICBlockCipher sICBlockCipher = new SICBlockCipher(this.cipher);
    sICBlockCipher.init(this.forEncryption, new ParametersWithIV(this.keyParam, iv));
    int inIndex = inOff;
    int outIndex = outOff;
    if (this.forEncryption) {
      outputLen = inLen + this.macSize;
      if (output.length < outputLen + outOff)
        throw new OutputLengthException("Output buffer too short."); 
      calculateMac(in, inOff, inLen, this.macBlock);
      byte[] encMac = new byte[this.blockSize];
      sICBlockCipher.processBlock(this.macBlock, 0, encMac, 0);
      while (inIndex < inOff + inLen - this.blockSize) {
        sICBlockCipher.processBlock(in, inIndex, output, outIndex);
        outIndex += this.blockSize;
        inIndex += this.blockSize;
      } 
      byte[] block = new byte[this.blockSize];
      System.arraycopy(in, inIndex, block, 0, inLen + inOff - inIndex);
      sICBlockCipher.processBlock(block, 0, block, 0);
      System.arraycopy(block, 0, output, outIndex, inLen + inOff - inIndex);
      System.arraycopy(encMac, 0, output, outOff + inLen, this.macSize);
    } else {
      if (inLen < this.macSize)
        throw new InvalidCipherTextException("data too short"); 
      outputLen = inLen - this.macSize;
      if (output.length < outputLen + outOff)
        throw new OutputLengthException("Output buffer too short."); 
      System.arraycopy(in, inOff + outputLen, this.macBlock, 0, this.macSize);
      sICBlockCipher.processBlock(this.macBlock, 0, this.macBlock, 0);
      for (int i = this.macSize; i != this.macBlock.length; i++)
        this.macBlock[i] = 0; 
      while (inIndex < inOff + outputLen - this.blockSize) {
        sICBlockCipher.processBlock(in, inIndex, output, outIndex);
        outIndex += this.blockSize;
        inIndex += this.blockSize;
      } 
      byte[] block = new byte[this.blockSize];
      System.arraycopy(in, inIndex, block, 0, outputLen - inIndex - inOff);
      sICBlockCipher.processBlock(block, 0, block, 0);
      System.arraycopy(block, 0, output, outIndex, outputLen - inIndex - inOff);
      byte[] calculatedMacBlock = new byte[this.blockSize];
      calculateMac(output, outOff, outputLen, calculatedMacBlock);
      if (!Arrays.constantTimeAreEqual(this.macBlock, calculatedMacBlock))
        throw new InvalidCipherTextException("mac check in CCM failed"); 
    } 
    return outputLen;
  }
  
  private int calculateMac(byte[] data, int dataOff, int dataLen, byte[] macBlock) {
    CBCBlockCipherMac cBCBlockCipherMac = new CBCBlockCipherMac(this.cipher, this.macSize * 8);
    cBCBlockCipherMac.init(this.keyParam);
    byte[] b0 = new byte[16];
    if (hasAssociatedText())
      b0[0] = (byte)(b0[0] | 0x40); 
    b0[0] = (byte)(b0[0] | ((cBCBlockCipherMac.getMacSize() - 2) / 2 & 0x7) << 3);
    b0[0] = (byte)(b0[0] | 15 - this.nonce.length - 1 & 0x7);
    System.arraycopy(this.nonce, 0, b0, 1, this.nonce.length);
    int q = dataLen;
    int count = 1;
    while (q > 0) {
      b0[b0.length - count] = (byte)(q & 0xFF);
      q >>>= 8;
      count++;
    } 
    cBCBlockCipherMac.update(b0, 0, b0.length);
    if (hasAssociatedText()) {
      int textLength = getAssociatedTextLength();
      if (textLength < 65280) {
        cBCBlockCipherMac.update((byte)(textLength >> 8));
        cBCBlockCipherMac.update((byte)textLength);
        extra = 2;
      } else {
        cBCBlockCipherMac.update((byte)-1);
        cBCBlockCipherMac.update((byte)-2);
        cBCBlockCipherMac.update((byte)(textLength >> 24));
        cBCBlockCipherMac.update((byte)(textLength >> 16));
        cBCBlockCipherMac.update((byte)(textLength >> 8));
        cBCBlockCipherMac.update((byte)textLength);
        extra = 6;
      } 
      if (this.initialAssociatedText != null)
        cBCBlockCipherMac.update(this.initialAssociatedText, 0, this.initialAssociatedText.length); 
      if (this.associatedText.size() > 0)
        cBCBlockCipherMac.update(this.associatedText.getBuffer(), 0, this.associatedText.size()); 
      int extra = (extra + textLength) % 16;
      if (extra != 0)
        for (int i = extra; i != 16; i++)
          cBCBlockCipherMac.update((byte)0);  
    } 
    cBCBlockCipherMac.update(data, dataOff, dataLen);
    return cBCBlockCipherMac.doFinal(macBlock, 0);
  }
  
  private int getMacSize(boolean forEncryption, int requestedMacBits) {
    if (forEncryption && (requestedMacBits < 32 || requestedMacBits > 128 || 0 != (requestedMacBits & 0xF)))
      throw new IllegalArgumentException("tag length in octets must be one of {4,6,8,10,12,14,16}"); 
    return requestedMacBits >>> 3;
  }
  
  private int getAssociatedTextLength() { return this.associatedText.size() + ((this.initialAssociatedText == null) ? 0 : this.initialAssociatedText.length); }
  
  private boolean hasAssociatedText() { return (getAssociatedTextLength() > 0); }
}
