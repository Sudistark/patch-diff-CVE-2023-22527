package org.bouncycastle.crypto.engines;

import org.bouncycastle.crypto.BlockCipher;
import org.bouncycastle.crypto.CipherParameters;
import org.bouncycastle.crypto.CryptoServicesRegistrar;
import org.bouncycastle.crypto.DataLengthException;
import org.bouncycastle.crypto.OutputLengthException;
import org.bouncycastle.crypto.constraints.DefaultServiceProperties;
import org.bouncycastle.crypto.params.KeyParameter;

public class XTEAEngine implements BlockCipher {
  private static final int rounds = 32;
  
  private static final int block_size = 8;
  
  private static final int delta = -1640531527;
  
  private int[] _S = new int[4];
  
  private int[] _sum0 = new int[32];
  
  private int[] _sum1 = new int[32];
  
  private boolean _initialised = false;
  
  private boolean _forEncryption;
  
  public String getAlgorithmName() { return "XTEA"; }
  
  public int getBlockSize() { return 8; }
  
  public void init(boolean forEncryption, CipherParameters params) {
    if (!(params instanceof KeyParameter))
      throw new IllegalArgumentException("invalid parameter passed to TEA init - " + params.getClass().getName()); 
    this._forEncryption = forEncryption;
    this._initialised = true;
    KeyParameter p = (KeyParameter)params;
    setKey(p.getKey());
    CryptoServicesRegistrar.checkConstraints(new DefaultServiceProperties(
          getAlgorithmName(), 128, params, Utils.getPurpose(forEncryption)));
  }
  
  public int processBlock(byte[] in, int inOff, byte[] out, int outOff) {
    if (!this._initialised)
      throw new IllegalStateException(getAlgorithmName() + " not initialised"); 
    if (inOff + 8 > in.length)
      throw new DataLengthException("input buffer too short"); 
    if (outOff + 8 > out.length)
      throw new OutputLengthException("output buffer too short"); 
    return this._forEncryption ? encryptBlock(in, inOff, out, outOff) : 
      decryptBlock(in, inOff, out, outOff);
  }
  
  public void reset() {}
  
  private void setKey(byte[] key) {
    if (key.length != 16)
      throw new IllegalArgumentException("Key size must be 128 bits."); 
    int i;
    int j;
    for (i = j = 0; i < 4; i++, j += 4)
      this._S[i] = bytesToInt(key, j); 
    for (i = j = 0; i < 32; i++) {
      this._sum0[i] = j + this._S[j & 0x3];
      j -= 1640531527;
      this._sum1[i] = j + this._S[j >>> 11 & 0x3];
    } 
  }
  
  private int encryptBlock(byte[] in, int inOff, byte[] out, int outOff) {
    int v0 = bytesToInt(in, inOff);
    int v1 = bytesToInt(in, inOff + 4);
    for (int i = 0; i < 32; i++) {
      v0 += ((v1 << 4 ^ v1 >>> 5) + v1 ^ this._sum0[i]);
      v1 += ((v0 << 4 ^ v0 >>> 5) + v0 ^ this._sum1[i]);
    } 
    unpackInt(v0, out, outOff);
    unpackInt(v1, out, outOff + 4);
    return 8;
  }
  
  private int decryptBlock(byte[] in, int inOff, byte[] out, int outOff) {
    int v0 = bytesToInt(in, inOff);
    int v1 = bytesToInt(in, inOff + 4);
    for (int i = 31; i >= 0; i--) {
      v1 -= ((v0 << 4 ^ v0 >>> 5) + v0 ^ this._sum1[i]);
      v0 -= ((v1 << 4 ^ v1 >>> 5) + v1 ^ this._sum0[i]);
    } 
    unpackInt(v0, out, outOff);
    unpackInt(v1, out, outOff + 4);
    return 8;
  }
  
  private int bytesToInt(byte[] in, int inOff) { return in[inOff++] << 24 | (in[inOff++] & 0xFF) << 16 | (in[inOff++] & 0xFF) << 8 | in[inOff] & 0xFF; }
  
  private void unpackInt(int v, byte[] out, int outOff) {
    out[outOff++] = (byte)(v >>> 24);
    out[outOff++] = (byte)(v >>> 16);
    out[outOff++] = (byte)(v >>> 8);
    out[outOff] = (byte)v;
  }
}
