package org.bouncycastle.crypto.engines;

import org.bouncycastle.crypto.BlockCipher;
import org.bouncycastle.crypto.CipherParameters;
import org.bouncycastle.crypto.DataLengthException;
import org.bouncycastle.crypto.InvalidCipherTextException;
import org.bouncycastle.crypto.Wrapper;
import org.bouncycastle.crypto.params.KeyParameter;
import org.bouncycastle.crypto.params.ParametersWithIV;
import org.bouncycastle.crypto.params.ParametersWithRandom;
import org.bouncycastle.util.Arrays;

public class RFC3394WrapEngine implements Wrapper {
  private BlockCipher engine;
  
  private boolean wrapCipherMode;
  
  private KeyParameter param;
  
  private boolean forWrapping;
  
  private byte[] iv;
  
  public RFC3394WrapEngine(BlockCipher engine) { this(engine, false); }
  
  public RFC3394WrapEngine(BlockCipher engine, boolean useReverseDirection) {
    this.iv = new byte[] { -90, -90, -90, -90, -90, -90, -90, -90 };
    this.engine = engine;
    this.wrapCipherMode = !useReverseDirection;
  }
  
  public void init(boolean forWrapping, CipherParameters param) {
    this.forWrapping = forWrapping;
    if (param instanceof ParametersWithRandom)
      param = ((ParametersWithRandom)param).getParameters(); 
    if (param instanceof KeyParameter) {
      this.param = (KeyParameter)param;
    } else if (param instanceof ParametersWithIV) {
      this.iv = ((ParametersWithIV)param).getIV();
      this.param = (KeyParameter)((ParametersWithIV)param).getParameters();
      if (this.iv.length != 8)
        throw new IllegalArgumentException("IV not equal to 8"); 
    } 
  }
  
  public String getAlgorithmName() { return this.engine.getAlgorithmName(); }
  
  public byte[] wrap(byte[] in, int inOff, int inLen) {
    if (!this.forWrapping)
      throw new IllegalStateException("not set for wrapping"); 
    if (inLen < 8)
      throw new DataLengthException("wrap data must be at least 8 bytes"); 
    int n = inLen / 8;
    if (n * 8 != inLen)
      throw new DataLengthException("wrap data must be a multiple of 8 bytes"); 
    this.engine.init(this.wrapCipherMode, this.param);
    byte[] block = new byte[inLen + this.iv.length];
    System.arraycopy(this.iv, 0, block, 0, this.iv.length);
    System.arraycopy(in, inOff, block, this.iv.length, inLen);
    if (n == 1) {
      this.engine.processBlock(block, 0, block, 0);
    } else {
      byte[] buf = new byte[8 + this.iv.length];
      for (int j = 0; j != 6; j++) {
        for (int i = 1; i <= n; i++) {
          System.arraycopy(block, 0, buf, 0, this.iv.length);
          System.arraycopy(block, 8 * i, buf, this.iv.length, 8);
          this.engine.processBlock(buf, 0, buf, 0);
          int t = n * j + i;
          for (int k = 1; t != 0; k++) {
            byte v = (byte)t;
            buf[this.iv.length - k] = (byte)(buf[this.iv.length - k] ^ v);
            t >>>= 8;
          } 
          System.arraycopy(buf, 0, block, 0, 8);
          System.arraycopy(buf, 8, block, 8 * i, 8);
        } 
      } 
    } 
    return block;
  }
  
  public byte[] unwrap(byte[] in, int inOff, int inLen) {
    if (this.forWrapping)
      throw new IllegalStateException("not set for unwrapping"); 
    if (inLen < 16)
      throw new InvalidCipherTextException("unwrap data too short"); 
    int n = inLen / 8;
    if (n * 8 != inLen)
      throw new InvalidCipherTextException("unwrap data must be a multiple of 8 bytes"); 
    this.engine.init(!this.wrapCipherMode, this.param);
    byte[] block = new byte[inLen - this.iv.length];
    byte[] a = new byte[this.iv.length];
    byte[] buf = new byte[8 + this.iv.length];
    n--;
    if (n == 1) {
      this.engine.processBlock(in, inOff, buf, 0);
      System.arraycopy(buf, 0, a, 0, this.iv.length);
      System.arraycopy(buf, this.iv.length, block, 0, 8);
    } else {
      System.arraycopy(in, inOff, a, 0, this.iv.length);
      System.arraycopy(in, inOff + this.iv.length, block, 0, inLen - this.iv.length);
      for (int j = 5; j >= 0; j--) {
        for (int i = n; i >= 1; i--) {
          System.arraycopy(a, 0, buf, 0, this.iv.length);
          System.arraycopy(block, 8 * (i - 1), buf, this.iv.length, 8);
          int t = n * j + i;
          for (int k = 1; t != 0; k++) {
            byte v = (byte)t;
            buf[this.iv.length - k] = (byte)(buf[this.iv.length - k] ^ v);
            t >>>= 8;
          } 
          this.engine.processBlock(buf, 0, buf, 0);
          System.arraycopy(buf, 0, a, 0, 8);
          System.arraycopy(buf, 8, block, 8 * (i - 1), 8);
        } 
      } 
    } 
    if (!Arrays.constantTimeAreEqual(a, this.iv))
      throw new InvalidCipherTextException("checksum failed"); 
    return block;
  }
}
