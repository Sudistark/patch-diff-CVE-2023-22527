package org.bouncycastle.crypto.constraints;

import java.util.Collections;
import java.util.Set;
import java.util.logging.Level;
import org.bouncycastle.crypto.CryptoServiceConstraintsException;
import org.bouncycastle.crypto.CryptoServiceProperties;
import org.bouncycastle.crypto.CryptoServicePurpose;

public class LegacyBitsOfSecurityConstraint extends ServicesConstraint {
  private final int requiredBitsOfSecurity;
  
  private final int legacyRequiredBitsOfSecurity;
  
  public LegacyBitsOfSecurityConstraint(int requiredBitsOfSecurity) { this(requiredBitsOfSecurity, 0); }
  
  public LegacyBitsOfSecurityConstraint(int requiredBitsOfSecurity, int legacyRequiredBitsOfSecurity) {
    super(Collections.EMPTY_SET);
    this.requiredBitsOfSecurity = requiredBitsOfSecurity;
    this.legacyRequiredBitsOfSecurity = legacyRequiredBitsOfSecurity;
  }
  
  public LegacyBitsOfSecurityConstraint(int requiredBitsOfSecurity, Set<String> exceptions) { this(requiredBitsOfSecurity, 0, exceptions); }
  
  public LegacyBitsOfSecurityConstraint(int requiredBitsOfSecurity, int legacyRequiredBitsOfSecurity, Set<String> exceptions) {
    super(exceptions);
    this.requiredBitsOfSecurity = requiredBitsOfSecurity;
    this.legacyRequiredBitsOfSecurity = legacyRequiredBitsOfSecurity;
  }
  
  public void check(CryptoServiceProperties service) {
    if (isException(service.getServiceName()))
      return; 
    CryptoServicePurpose purpose = service.getPurpose();
    switch (null.$SwitchMap$org$bouncycastle$crypto$CryptoServicePurpose[purpose.ordinal()]) {
      case 1:
      case 2:
      case 3:
      case 4:
        if (service.bitsOfSecurity() < this.legacyRequiredBitsOfSecurity)
          throw new CryptoServiceConstraintsException("service does not provide " + this.legacyRequiredBitsOfSecurity + " bits of security only " + service.bitsOfSecurity()); 
        if (purpose != CryptoServicePurpose.ANY && LOG.isLoggable(Level.FINE))
          LOG.fine("usage of legacy cryptography service for algorithm " + service.getServiceName()); 
        return;
    } 
    if (service.bitsOfSecurity() < this.requiredBitsOfSecurity)
      throw new CryptoServiceConstraintsException("service does not provide " + this.requiredBitsOfSecurity + " bits of security only " + service.bitsOfSecurity()); 
  }
}
