package org.bouncycastle.crypto.generators;

import java.math.BigInteger;
import java.security.SecureRandom;
import org.bouncycastle.math.ec.WNafUtil;
import org.bouncycastle.util.BigIntegers;

class DHParametersHelper {
  private static final BigInteger ONE = BigInteger.valueOf(1L);
  
  private static final BigInteger TWO = BigInteger.valueOf(2L);
  
  static BigInteger[] generateSafePrimes(int size, int certainty, SecureRandom random) {
    BigInteger q, p;
    int qLength = size - 1;
    int minWeight = size >>> 2;
    while (true) {
      q = BigIntegers.createRandomPrime(qLength, 2, random);
      p = q.shiftLeft(1).add(ONE);
      if (!p.isProbablePrime(certainty))
        continue; 
      if (certainty > 2 && !q.isProbablePrime(certainty - 2))
        continue; 
      if (WNafUtil.getNafWeight(p) < minWeight)
        continue; 
      break;
    } 
    return new BigInteger[] { p, q };
  }
  
  static BigInteger selectGenerator(BigInteger p, BigInteger q, SecureRandom random) {
    BigInteger g, pMinusTwo = p.subtract(TWO);
    do {
      BigInteger h = BigIntegers.createRandomInRange(TWO, pMinusTwo, random);
      g = h.modPow(TWO, p);
    } while (g.equals(ONE));
    return g;
  }
}
