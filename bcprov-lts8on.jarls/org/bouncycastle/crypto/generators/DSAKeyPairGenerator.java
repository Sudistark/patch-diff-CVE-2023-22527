package org.bouncycastle.crypto.generators;

import java.math.BigInteger;
import java.security.SecureRandom;
import org.bouncycastle.crypto.AsymmetricCipherKeyPair;
import org.bouncycastle.crypto.AsymmetricCipherKeyPairGenerator;
import org.bouncycastle.crypto.CryptoServicePurpose;
import org.bouncycastle.crypto.CryptoServicesRegistrar;
import org.bouncycastle.crypto.KeyGenerationParameters;
import org.bouncycastle.crypto.constraints.ConstraintUtils;
import org.bouncycastle.crypto.constraints.DefaultServiceProperties;
import org.bouncycastle.crypto.params.DSAKeyGenerationParameters;
import org.bouncycastle.crypto.params.DSAParameters;
import org.bouncycastle.crypto.params.DSAPrivateKeyParameters;
import org.bouncycastle.crypto.params.DSAPublicKeyParameters;
import org.bouncycastle.math.ec.WNafUtil;
import org.bouncycastle.util.BigIntegers;

public class DSAKeyPairGenerator implements AsymmetricCipherKeyPairGenerator {
  private static final BigInteger ONE = BigInteger.valueOf(1L);
  
  private DSAKeyGenerationParameters param;
  
  public void init(KeyGenerationParameters param) {
    this.param = (DSAKeyGenerationParameters)param;
    CryptoServicesRegistrar.checkConstraints(new DefaultServiceProperties("DSAKeyGen", ConstraintUtils.bitsOfSecurityFor(this.param.getParameters().getP()), this.param.getParameters(), CryptoServicePurpose.KEYGEN));
  }
  
  public AsymmetricCipherKeyPair generateKeyPair() {
    DSAParameters dsaParams = this.param.getParameters();
    BigInteger x = generatePrivateKey(dsaParams.getQ(), this.param.getRandom());
    BigInteger y = calculatePublicKey(dsaParams.getP(), dsaParams.getG(), x);
    return new AsymmetricCipherKeyPair(new DSAPublicKeyParameters(y, dsaParams), new DSAPrivateKeyParameters(x, dsaParams));
  }
  
  private static BigInteger generatePrivateKey(BigInteger q, SecureRandom random) {
    BigInteger x;
    int minWeight = q.bitLength() >>> 2;
    do {
      x = BigIntegers.createRandomInRange(ONE, q.subtract(ONE), random);
    } while (WNafUtil.getNafWeight(x) < minWeight);
    return x;
  }
  
  private static BigInteger calculatePublicKey(BigInteger p, BigInteger g, BigInteger x) { return g.modPow(x, p); }
}
