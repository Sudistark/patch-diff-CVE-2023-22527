package org.bouncycastle.crypto.params;

import org.bouncycastle.crypto.CipherParameters;
import org.bouncycastle.math.ec.ECPoint;
import org.bouncycastle.math.ec.FixedPointCombMultiplier;

public class SM2KeyExchangePrivateParameters implements CipherParameters {
  private final boolean initiator;
  
  private final ECPrivateKeyParameters staticPrivateKey;
  
  private final ECPoint staticPublicPoint;
  
  private final ECPrivateKeyParameters ephemeralPrivateKey;
  
  private final ECPoint ephemeralPublicPoint;
  
  public SM2KeyExchangePrivateParameters(boolean initiator, ECPrivateKeyParameters staticPrivateKey, ECPrivateKeyParameters ephemeralPrivateKey) {
    if (staticPrivateKey == null)
      throw new NullPointerException("staticPrivateKey cannot be null"); 
    if (ephemeralPrivateKey == null)
      throw new NullPointerException("ephemeralPrivateKey cannot be null"); 
    ECDomainParameters parameters = staticPrivateKey.getParameters();
    if (!parameters.equals(ephemeralPrivateKey.getParameters()))
      throw new IllegalArgumentException("Static and ephemeral private keys have different domain parameters"); 
    FixedPointCombMultiplier fixedPointCombMultiplier = new FixedPointCombMultiplier();
    this.initiator = initiator;
    this.staticPrivateKey = staticPrivateKey;
    this.staticPublicPoint = fixedPointCombMultiplier.multiply(parameters.getG(), staticPrivateKey.getD()).normalize();
    this.ephemeralPrivateKey = ephemeralPrivateKey;
    this.ephemeralPublicPoint = fixedPointCombMultiplier.multiply(parameters.getG(), ephemeralPrivateKey.getD()).normalize();
  }
  
  public boolean isInitiator() { return this.initiator; }
  
  public ECPrivateKeyParameters getStaticPrivateKey() { return this.staticPrivateKey; }
  
  public ECPoint getStaticPublicPoint() { return this.staticPublicPoint; }
  
  public ECPrivateKeyParameters getEphemeralPrivateKey() { return this.ephemeralPrivateKey; }
  
  public ECPoint getEphemeralPublicPoint() { return this.ephemeralPublicPoint; }
}
