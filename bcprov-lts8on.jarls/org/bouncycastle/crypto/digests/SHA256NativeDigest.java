package org.bouncycastle.crypto.digests;

import org.bouncycastle.crypto.CryptoServiceProperties;
import org.bouncycastle.crypto.CryptoServicePurpose;
import org.bouncycastle.crypto.CryptoServicesRegistrar;
import org.bouncycastle.crypto.SavableDigest;
import org.bouncycastle.util.Memoable;

class SHA256NativeDigest implements SavableDigest {
  private final CryptoServicePurpose purpose;
  
  protected DigestRefWrapper nativeRef;
  
  SHA256NativeDigest(CryptoServicePurpose purpose) {
    this.nativeRef = null;
    this.purpose = purpose;
    this.nativeRef = new DigestRefWrapper(makeNative());
    reset();
    CryptoServicesRegistrar.checkConstraints(cryptoServiceProperties());
  }
  
  SHA256NativeDigest() { this(CryptoServicePurpose.ANY); }
  
  SHA256NativeDigest(SHA256NativeDigest src) {
    this(CryptoServicePurpose.ANY);
    byte[] state = src.getEncodedState();
    restoreFullState(this.nativeRef.getReference(), state, 0);
  }
  
  SHA256NativeDigest restoreState(byte[] state, int offset) {
    restoreFullState(this.nativeRef.getReference(), state, offset);
    return this;
  }
  
  public String getAlgorithmName() { return "SHA-256"; }
  
  public int getDigestSize() { return getDigestSize(this.nativeRef.getReference()); }
  
  public void update(byte in) { update(this.nativeRef.getReference(), in); }
  
  public void update(byte[] input, int inOff, int len) { update(this.nativeRef.getReference(), input, inOff, len); }
  
  public int doFinal(byte[] output, int outOff) { return doFinal(this.nativeRef.getReference(), output, outOff); }
  
  public void reset() { reset(this.nativeRef.getReference()); }
  
  public int getByteLength() { return getByteLength(this.nativeRef.getReference()); }
  
  public Memoable copy() { return new SHA256NativeDigest(this); }
  
  public void reset(Memoable other) {
    SHA256NativeDigest dig = (SHA256NativeDigest)other;
    restoreFullState(this.nativeRef.getReference(), dig.getEncodedState(), 0);
  }
  
  public byte[] getEncodedState() {
    int l = encodeFullState(this.nativeRef.getReference(), null, 0);
    byte[] state = new byte[l];
    encodeFullState(this.nativeRef.getReference(), state, 0);
    return state;
  }
  
  void restoreFullState(byte[] encoded, int offset) { restoreFullState(this.nativeRef.getReference(), encoded, offset); }
  
  public String toString() { return "SHA256[Native]()"; }
  
  static native long makeNative();
  
  static native void destroy(long paramLong);
  
  static native int getDigestSize(long paramLong);
  
  static native void update(long paramLong, byte paramByte);
  
  static native void update(long paramLong, byte[] paramArrayOfByte, int paramInt1, int paramInt2);
  
  static native int doFinal(long paramLong, byte[] paramArrayOfByte, int paramInt);
  
  static native void reset(long paramLong);
  
  static native int getByteLength(long paramLong);
  
  static native int encodeFullState(long paramLong, byte[] paramArrayOfByte, int paramInt);
  
  static native void restoreFullState(long paramLong, byte[] paramArrayOfByte, int paramInt);
  
  protected CryptoServiceProperties cryptoServiceProperties() { return Utils.getDefaultProperties(this, 256, this.purpose); }
}
