package org.bouncycastle.crypto.digests;

import org.bouncycastle.crypto.CryptoServicePurpose;
import org.bouncycastle.crypto.CryptoServicesRegistrar;
import org.bouncycastle.crypto.ExtendedDigest;
import org.bouncycastle.util.Arrays;
import org.bouncycastle.util.Memoable;
import org.bouncycastle.util.Pack;

public final class WhirlpoolDigest implements ExtendedDigest, Memoable {
  private static final int BITCOUNT_ARRAY_SIZE = 32;
  
  private static final int BYTE_LENGTH = 64;
  
  private static final int DIGEST_LENGTH_BYTES = 64;
  
  private static final int REDUCTION_POLYNOMIAL = 285;
  
  private static final int ROUNDS = 10;
  
  private static final int[] SBOX = { 
      24, 35, 198, 232, 135, 184, 1, 79, 54, 166, 
      210, 245, 121, 111, 145, 82, 96, 188, 155, 142, 
      163, 12, 123, 53, 29, 224, 215, 194, 46, 75, 
      254, 87, 21, 119, 55, 229, 159, 240, 74, 218, 
      88, 201, 41, 10, 177, 160, 107, 133, 189, 93, 
      16, 244, 203, 62, 5, 103, 228, 39, 65, 139, 
      167, 125, 149, 216, 251, 238, 124, 102, 221, 23, 
      71, 158, 202, 45, 191, 7, 173, 90, 131, 51, 
      99, 2, 170, 113, 200, 25, 73, 217, 242, 227, 
      91, 136, 154, 38, 50, 176, 233, 15, 213, 128, 
      190, 205, 52, 72, 255, 122, 144, 95, 32, 104, 
      26, 174, 180, 84, 147, 34, 100, 241, 115, 18, 
      64, 8, 195, 236, 219, 161, 141, 61, 151, 0, 
      207, 43, 118, 130, 214, 27, 181, 175, 106, 80, 
      69, 243, 48, 239, 63, 85, 162, 234, 101, 186, 
      47, 192, 222, 28, 253, 77, 146, 117, 6, 138, 
      178, 230, 14, 31, 98, 212, 168, 150, 249, 197, 
      37, 89, 132, 114, 57, 76, 94, 120, 56, 140, 
      209, 165, 226, 97, 179, 33, 156, 30, 67, 199, 
      252, 4, 81, 153, 109, 13, 250, 223, 126, 36, 
      59, 171, 206, 17, 143, 78, 183, 235, 60, 129, 
      148, 247, 185, 19, 44, 211, 231, 110, 196, 3, 
      86, 68, 127, 169, 42, 187, 193, 83, 220, 11, 
      157, 108, 49, 116, 246, 70, 172, 137, 20, 225, 
      22, 58, 105, 9, 112, 182, 208, 237, 204, 66, 
      152, 164, 40, 92, 248, 134 };
  
  private static final long[] C0 = new long[256];
  
  private static final long[] C1 = new long[256];
  
  private static final long[] C2 = new long[256];
  
  private static final long[] C3 = new long[256];
  
  private static final long[] C4 = new long[256];
  
  private static final long[] C5 = new long[256];
  
  private static final long[] C6 = new long[256];
  
  private static final long[] C7 = new long[256];
  
  private static final short[] EIGHT = new short[32];
  
  private final long[] _rc;
  
  private final CryptoServicePurpose purpose;
  
  private byte[] _buffer;
  
  private int _bufferPos;
  
  private short[] _bitCount;
  
  private long[] _hash;
  
  private long[] _K;
  
  private long[] _L;
  
  private long[] _block;
  
  private long[] _state;
  
  static  {
    EIGHT[31] = 8;
    for (i = 0; i < 256; i++) {
      int v1 = SBOX[i];
      int v2 = mulX(v1);
      int v4 = mulX(v2);
      int v5 = v4 ^ v1;
      int v8 = mulX(v4);
      int v9 = v8 ^ v1;
      C0[i] = packIntoLong(v1, v1, v4, v1, v8, v5, v2, v9);
      C1[i] = packIntoLong(v9, v1, v1, v4, v1, v8, v5, v2);
      C2[i] = packIntoLong(v2, v9, v1, v1, v4, v1, v8, v5);
      C3[i] = packIntoLong(v5, v2, v9, v1, v1, v4, v1, v8);
      C4[i] = packIntoLong(v8, v5, v2, v9, v1, v1, v4, v1);
      C5[i] = packIntoLong(v1, v8, v5, v2, v9, v1, v1, v4);
      C6[i] = packIntoLong(v4, v1, v8, v5, v2, v9, v1, v1);
      C7[i] = packIntoLong(v1, v4, v1, v8, v5, v2, v9, v1);
    } 
  }
  
  private static int mulX(int input) { return input << 1 ^ -(input >>> 7) & 0x11D; }
  
  private static long packIntoLong(int b7, int b6, int b5, int b4, int b3, int b2, int b1, int b0) { return b7 << 56 ^ b6 << 48 ^ b5 << 40 ^ b4 << 32 ^ b3 << 24 ^ b2 << 16 ^ b1 << 8 ^ b0; }
  
  public WhirlpoolDigest() { this(CryptoServicePurpose.ANY); }
  
  public WhirlpoolDigest(CryptoServicePurpose purpose) {
    this._rc = new long[11];
    this._buffer = new byte[64];
    this._bufferPos = 0;
    this._bitCount = new short[32];
    this._hash = new long[8];
    this._K = new long[8];
    this._L = new long[8];
    this._block = new long[8];
    this._state = new long[8];
    this._rc[0] = 0L;
    for (int r = 1; r <= 10; r++) {
      int i = 8 * (r - 1);
      this._rc[r] = C0[i] & 0xFF00000000000000L ^ C1[i + 1] & 0xFF000000000000L ^ C2[i + 2] & 0xFF0000000000L ^ C3[i + 3] & 0xFF00000000L ^ C4[i + 4] & 0xFF000000L ^ C5[i + 5] & 0xFF0000L ^ C6[i + 6] & 0xFF00L ^ C7[i + 7] & 0xFFL;
    } 
    this.purpose = purpose;
    CryptoServicesRegistrar.checkConstraints(Utils.getDefaultProperties(this, getDigestSize(), purpose));
  }
  
  public WhirlpoolDigest(WhirlpoolDigest originalDigest) {
    this._rc = new long[11];
    this._buffer = new byte[64];
    this._bufferPos = 0;
    this._bitCount = new short[32];
    this._hash = new long[8];
    this._K = new long[8];
    this._L = new long[8];
    this._block = new long[8];
    this._state = new long[8];
    this.purpose = originalDigest.purpose;
    reset(originalDigest);
    CryptoServicesRegistrar.checkConstraints(Utils.getDefaultProperties(this, getDigestSize(), this.purpose));
  }
  
  public String getAlgorithmName() { return "Whirlpool"; }
  
  public int getDigestSize() { return 64; }
  
  public int doFinal(byte[] out, int outOff) {
    finish();
    Pack.longToBigEndian(this._hash, out, outOff);
    reset();
    return getDigestSize();
  }
  
  public void reset() {
    this._bufferPos = 0;
    Arrays.fill(this._bitCount, (short)0);
    Arrays.fill(this._buffer, (byte)0);
    Arrays.fill(this._hash, 0L);
    Arrays.fill(this._K, 0L);
    Arrays.fill(this._L, 0L);
    Arrays.fill(this._block, 0L);
    Arrays.fill(this._state, 0L);
  }
  
  private void processFilledBuffer(byte[] in, int inOff) {
    Pack.bigEndianToLong(this._buffer, 0, this._block);
    processBlock();
    this._bufferPos = 0;
    Arrays.fill(this._buffer, (byte)0);
  }
  
  protected void processBlock() {
    for (int i = 0; i < 8; i++) {
      this._K[i] = this._hash[i];
      this._state[i] = this._block[i] ^ this._hash[i];
    } 
    for (int round = 1; round <= 10; round++) {
      for (int i = 0; i < 8; i++) {
        this._L[i] = 0L;
        this._L[i] = this._L[i] ^ C0[(int)(this._K[i - 0 & 0x7] >>> 56) & 0xFF];
        this._L[i] = this._L[i] ^ C1[(int)(this._K[i - 1 & 0x7] >>> 48) & 0xFF];
        this._L[i] = this._L[i] ^ C2[(int)(this._K[i - 2 & 0x7] >>> 40) & 0xFF];
        this._L[i] = this._L[i] ^ C3[(int)(this._K[i - 3 & 0x7] >>> 32) & 0xFF];
        this._L[i] = this._L[i] ^ C4[(int)(this._K[i - 4 & 0x7] >>> 24) & 0xFF];
        this._L[i] = this._L[i] ^ C5[(int)(this._K[i - 5 & 0x7] >>> 16) & 0xFF];
        this._L[i] = this._L[i] ^ C6[(int)(this._K[i - 6 & 0x7] >>> 8) & 0xFF];
        this._L[i] = this._L[i] ^ C7[(int)this._K[i - 7 & 0x7] & 0xFF];
      } 
      System.arraycopy(this._L, 0, this._K, 0, this._K.length);
      this._K[0] = this._K[0] ^ this._rc[round];
      for (int i = 0; i < 8; i++) {
        this._L[i] = this._K[i];
        this._L[i] = this._L[i] ^ C0[(int)(this._state[i - 0 & 0x7] >>> 56) & 0xFF];
        this._L[i] = this._L[i] ^ C1[(int)(this._state[i - 1 & 0x7] >>> 48) & 0xFF];
        this._L[i] = this._L[i] ^ C2[(int)(this._state[i - 2 & 0x7] >>> 40) & 0xFF];
        this._L[i] = this._L[i] ^ C3[(int)(this._state[i - 3 & 0x7] >>> 32) & 0xFF];
        this._L[i] = this._L[i] ^ C4[(int)(this._state[i - 4 & 0x7] >>> 24) & 0xFF];
        this._L[i] = this._L[i] ^ C5[(int)(this._state[i - 5 & 0x7] >>> 16) & 0xFF];
        this._L[i] = this._L[i] ^ C6[(int)(this._state[i - 6 & 0x7] >>> 8) & 0xFF];
        this._L[i] = this._L[i] ^ C7[(int)this._state[i - 7 & 0x7] & 0xFF];
      } 
      System.arraycopy(this._L, 0, this._state, 0, this._state.length);
    } 
    for (int i = 0; i < 8; i++)
      this._hash[i] = this._hash[i] ^ this._state[i] ^ this._block[i]; 
  }
  
  public void update(byte in) {
    this._buffer[this._bufferPos] = in;
    if (++this._bufferPos == this._buffer.length)
      processFilledBuffer(this._buffer, 0); 
    increment();
  }
  
  private void increment() {
    int carry = 0;
    for (int i = this._bitCount.length - 1; i >= 0; i--) {
      int sum = (this._bitCount[i] & 0xFF) + EIGHT[i] + carry;
      carry = sum >>> 8;
      this._bitCount[i] = (short)(sum & 0xFF);
    } 
  }
  
  public void update(byte[] in, int inOff, int len) {
    while (len > 0) {
      update(in[inOff]);
      inOff++;
      len--;
    } 
  }
  
  private void finish() {
    byte[] bitLength = copyBitLength();
    this._buffer[this._bufferPos] = (byte)(this._buffer[this._bufferPos] | 0x80);
    if (++this._bufferPos == this._buffer.length)
      processFilledBuffer(this._buffer, 0); 
    if (this._bufferPos > 32)
      while (this._bufferPos != 0)
        update((byte)0);  
    while (this._bufferPos <= 32)
      update((byte)0); 
    System.arraycopy(bitLength, 0, this._buffer, 32, bitLength.length);
    processFilledBuffer(this._buffer, 0);
  }
  
  private byte[] copyBitLength() {
    byte[] rv = new byte[32];
    for (int i = 0; i < rv.length; i++)
      rv[i] = (byte)(this._bitCount[i] & 0xFF); 
    return rv;
  }
  
  public int getByteLength() { return 64; }
  
  public Memoable copy() { return new WhirlpoolDigest(this); }
  
  public void reset(Memoable other) {
    WhirlpoolDigest originalDigest = (WhirlpoolDigest)other;
    System.arraycopy(originalDigest._rc, 0, this._rc, 0, this._rc.length);
    System.arraycopy(originalDigest._buffer, 0, this._buffer, 0, this._buffer.length);
    this._bufferPos = originalDigest._bufferPos;
    System.arraycopy(originalDigest._bitCount, 0, this._bitCount, 0, this._bitCount.length);
    System.arraycopy(originalDigest._hash, 0, this._hash, 0, this._hash.length);
    System.arraycopy(originalDigest._K, 0, this._K, 0, this._K.length);
    System.arraycopy(originalDigest._L, 0, this._L, 0, this._L.length);
    System.arraycopy(originalDigest._block, 0, this._block, 0, this._block.length);
    System.arraycopy(originalDigest._state, 0, this._state, 0, this._state.length);
  }
}
