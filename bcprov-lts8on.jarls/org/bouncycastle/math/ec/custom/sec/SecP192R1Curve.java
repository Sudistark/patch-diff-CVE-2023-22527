package org.bouncycastle.math.ec.custom.sec;

import java.math.BigInteger;
import java.security.SecureRandom;
import org.bouncycastle.math.ec.ECConstants;
import org.bouncycastle.math.ec.ECCurve;
import org.bouncycastle.math.ec.ECFieldElement;
import org.bouncycastle.math.ec.ECLookupTable;
import org.bouncycastle.math.ec.ECPoint;
import org.bouncycastle.math.raw.Nat192;
import org.bouncycastle.util.encoders.Hex;

public class SecP192R1Curve extends ECCurve.AbstractFp {
  public static final BigInteger q = SecP192R1FieldElement.Q;
  
  private static final int SECP192R1_DEFAULT_COORDS = 2;
  
  private static final ECFieldElement[] SECP192R1_AFFINE_ZS = { new SecP192R1FieldElement(ECConstants.ONE) };
  
  protected SecP192R1Point infinity;
  
  public SecP192R1Curve() {
    super(q);
    this.infinity = new SecP192R1Point(this, null, null);
    this.a = fromBigInteger(new BigInteger(1, 
          Hex.decodeStrict("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFC")));
    this.b = fromBigInteger(new BigInteger(1, 
          Hex.decodeStrict("64210519E59C80E70FA7E9AB72243049FEB8DEECC146B9B1")));
    this.order = new BigInteger(1, Hex.decodeStrict("FFFFFFFFFFFFFFFFFFFFFFFF99DEF836146BC9B1B4D22831"));
    this.cofactor = BigInteger.valueOf(1L);
    this.coord = 2;
  }
  
  protected ECCurve cloneCurve() { return new SecP192R1Curve(); }
  
  public boolean supportsCoordinateSystem(int coord) {
    switch (coord) {
      case 2:
        return true;
    } 
    return false;
  }
  
  public BigInteger getQ() { return q; }
  
  public int getFieldSize() { return q.bitLength(); }
  
  public ECFieldElement fromBigInteger(BigInteger x) { return new SecP192R1FieldElement(x); }
  
  protected ECPoint createRawPoint(ECFieldElement x, ECFieldElement y) { return new SecP192R1Point(this, x, y); }
  
  protected ECPoint createRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs) { return new SecP192R1Point(this, x, y, zs); }
  
  public ECPoint getInfinity() { return this.infinity; }
  
  public ECLookupTable createCacheSafeLookupTable(ECPoint[] points, int off, int len) {
    int FE_INTS = 6;
    int[] table = new int[len * 6 * 2];
    int pos = 0;
    for (int i = 0; i < len; i++) {
      ECPoint p = points[off + i];
      Nat192.copy(((SecP192R1FieldElement)p.getRawXCoord()).x, 0, table, pos);
      pos += 6;
      Nat192.copy(((SecP192R1FieldElement)p.getRawYCoord()).x, 0, table, pos);
      pos += 6;
    } 
    return new Object(this, len, table);
  }
  
  public ECFieldElement randomFieldElement(SecureRandom r) {
    int[] x = Nat192.create();
    SecP192R1Field.random(r, x);
    return new SecP192R1FieldElement(x);
  }
  
  public ECFieldElement randomFieldElementMult(SecureRandom r) {
    int[] x = Nat192.create();
    SecP192R1Field.randomMult(r, x);
    return new SecP192R1FieldElement(x);
  }
}
