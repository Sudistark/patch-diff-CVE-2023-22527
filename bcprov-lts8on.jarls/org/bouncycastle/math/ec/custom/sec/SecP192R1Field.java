package org.bouncycastle.math.ec.custom.sec;

import java.math.BigInteger;
import java.security.SecureRandom;
import org.bouncycastle.math.raw.Mod;
import org.bouncycastle.math.raw.Nat;
import org.bouncycastle.math.raw.Nat192;
import org.bouncycastle.util.Pack;

public class SecP192R1Field {
  private static final long M = 4294967295L;
  
  static final int[] P = { -1, -1, -2, -1, -1, -1 };
  
  private static final int[] PExt = { 
      1, 0, 2, 0, 1, 0, -2, -1, -3, -1, 
      -1, -1 };
  
  private static final int[] PExtInv = { -1, -1, -3, -1, -2, -1, 1, 0, 2 };
  
  private static final int P5 = -1;
  
  private static final int PExt11 = -1;
  
  public static void add(int[] x, int[] y, int[] z) {
    int c = Nat192.add(x, y, z);
    if (c != 0 || (z[5] == -1 && Nat192.gte(z, P)))
      addPInvTo(z); 
  }
  
  public static void addExt(int[] xx, int[] yy, int[] zz) {
    int c = Nat.add(12, xx, yy, zz);
    if (c != 0 || (zz[11] == -1 && Nat.gte(12, zz, PExt)))
      if (Nat.addTo(PExtInv.length, PExtInv, zz) != 0)
        Nat.incAt(12, zz, PExtInv.length);  
  }
  
  public static void addOne(int[] x, int[] z) {
    int c = Nat.inc(6, x, z);
    if (c != 0 || (z[5] == -1 && Nat192.gte(z, P)))
      addPInvTo(z); 
  }
  
  public static int[] fromBigInteger(BigInteger x) {
    int[] z = Nat192.fromBigInteger(x);
    if (z[5] == -1 && Nat192.gte(z, P))
      Nat192.subFrom(P, z); 
    return z;
  }
  
  public static void half(int[] x, int[] z) {
    if ((x[0] & true) == 0) {
      Nat.shiftDownBit(6, x, 0, z);
    } else {
      int c = Nat192.add(x, P, z);
      Nat.shiftDownBit(6, z, c);
    } 
  }
  
  public static void inv(int[] x, int[] z) { Mod.checkedModOddInverse(P, x, z); }
  
  public static int isZero(int[] x) {
    int d = 0;
    for (int i = 0; i < 6; i++)
      d |= x[i]; 
    d = d >>> 1 | d & true;
    return d - 1 >> 31;
  }
  
  public static void multiply(int[] x, int[] y, int[] z) {
    int[] tt = Nat192.createExt();
    Nat192.mul(x, y, tt);
    reduce(tt, z);
  }
  
  public static void multiplyAddToExt(int[] x, int[] y, int[] zz) {
    int c = Nat192.mulAddTo(x, y, zz);
    if (c != 0 || (zz[11] == -1 && Nat.gte(12, zz, PExt)))
      if (Nat.addTo(PExtInv.length, PExtInv, zz) != 0)
        Nat.incAt(12, zz, PExtInv.length);  
  }
  
  public static void negate(int[] x, int[] z) {
    if (0 != isZero(x)) {
      Nat192.sub(P, P, z);
    } else {
      Nat192.sub(P, x, z);
    } 
  }
  
  public static void random(SecureRandom r, int[] z) {
    byte[] bb = new byte[24];
    do {
      r.nextBytes(bb);
      Pack.littleEndianToInt(bb, 0, z, 0, 6);
    } while (0 == Nat.lessThan(6, z, P));
  }
  
  public static void randomMult(SecureRandom r, int[] z) {
    do {
      random(r, z);
    } while (0 != isZero(z));
  }
  
  public static void reduce(int[] xx, int[] z) {
    long xx06 = xx[6] & 0xFFFFFFFFL, xx07 = xx[7] & 0xFFFFFFFFL, xx08 = xx[8] & 0xFFFFFFFFL;
    long xx09 = xx[9] & 0xFFFFFFFFL, xx10 = xx[10] & 0xFFFFFFFFL, xx11 = xx[11] & 0xFFFFFFFFL;
    long t0 = xx06 + xx10;
    long t1 = xx07 + xx11;
    long cc = 0L;
    cc += (xx[0] & 0xFFFFFFFFL) + t0;
    int z0 = (int)cc;
    cc >>= 32;
    cc += (xx[1] & 0xFFFFFFFFL) + t1;
    z[1] = (int)cc;
    cc >>= 32;
    t0 += xx08;
    t1 += xx09;
    cc += (xx[2] & 0xFFFFFFFFL) + t0;
    long z2 = cc & 0xFFFFFFFFL;
    cc >>= 32;
    cc += (xx[3] & 0xFFFFFFFFL) + t1;
    z[3] = (int)cc;
    cc >>= 32;
    t0 -= xx06;
    t1 -= xx07;
    cc += (xx[4] & 0xFFFFFFFFL) + t0;
    z[4] = (int)cc;
    cc >>= 32;
    cc += (xx[5] & 0xFFFFFFFFL) + t1;
    z[5] = (int)cc;
    cc >>= 32;
    z2 += cc;
    cc += (z0 & 0xFFFFFFFFL);
    z[0] = (int)cc;
    cc >>= 32;
    if (cc != 0L) {
      cc += (z[1] & 0xFFFFFFFFL);
      z[1] = (int)cc;
      z2 += (cc >> 32);
    } 
    z[2] = (int)z2;
    cc = z2 >> 32;
    if ((cc != 0L && Nat.incAt(6, z, 3) != 0) || (z[5] == -1 && 
      Nat192.gte(z, P)))
      addPInvTo(z); 
  }
  
  public static void reduce32(int x, int[] z) {
    long cc = 0L;
    if (x != 0) {
      long xx06 = x & 0xFFFFFFFFL;
      cc += (z[0] & 0xFFFFFFFFL) + xx06;
      z[0] = (int)cc;
      cc >>= 32;
      if (cc != 0L) {
        cc += (z[1] & 0xFFFFFFFFL);
        z[1] = (int)cc;
        cc >>= 32;
      } 
      cc += (z[2] & 0xFFFFFFFFL) + xx06;
      z[2] = (int)cc;
      cc >>= 32;
    } 
    if ((cc != 0L && Nat.incAt(6, z, 3) != 0) || (z[5] == -1 && 
      Nat192.gte(z, P)))
      addPInvTo(z); 
  }
  
  public static void square(int[] x, int[] z) {
    int[] tt = Nat192.createExt();
    Nat192.square(x, tt);
    reduce(tt, z);
  }
  
  public static void squareN(int[] x, int n, int[] z) {
    int[] tt = Nat192.createExt();
    Nat192.square(x, tt);
    reduce(tt, z);
    while (--n > 0) {
      Nat192.square(z, tt);
      reduce(tt, z);
    } 
  }
  
  public static void subtract(int[] x, int[] y, int[] z) {
    int c = Nat192.sub(x, y, z);
    if (c != 0)
      subPInvFrom(z); 
  }
  
  public static void subtractExt(int[] xx, int[] yy, int[] zz) {
    int c = Nat.sub(12, xx, yy, zz);
    if (c != 0)
      if (Nat.subFrom(PExtInv.length, PExtInv, zz) != 0)
        Nat.decAt(12, zz, PExtInv.length);  
  }
  
  public static void twice(int[] x, int[] z) {
    int c = Nat.shiftUpBit(6, x, 0, z);
    if (c != 0 || (z[5] == -1 && Nat192.gte(z, P)))
      addPInvTo(z); 
  }
  
  private static void addPInvTo(int[] z) {
    long c = (z[0] & 0xFFFFFFFFL) + 1L;
    z[0] = (int)c;
    c >>= 32;
    if (c != 0L) {
      c += (z[1] & 0xFFFFFFFFL);
      z[1] = (int)c;
      c >>= 32;
    } 
    c += (z[2] & 0xFFFFFFFFL) + 1L;
    z[2] = (int)c;
    c >>= 32;
    if (c != 0L)
      Nat.incAt(6, z, 3); 
  }
  
  private static void subPInvFrom(int[] z) {
    long c = (z[0] & 0xFFFFFFFFL) - 1L;
    z[0] = (int)c;
    c >>= 32;
    if (c != 0L) {
      c += (z[1] & 0xFFFFFFFFL);
      z[1] = (int)c;
      c >>= 32;
    } 
    c += (z[2] & 0xFFFFFFFFL) - 1L;
    z[2] = (int)c;
    c >>= 32;
    if (c != 0L)
      Nat.decAt(6, z, 3); 
  }
}
