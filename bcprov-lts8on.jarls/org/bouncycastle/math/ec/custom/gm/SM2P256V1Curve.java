package org.bouncycastle.math.ec.custom.gm;

import java.math.BigInteger;
import java.security.SecureRandom;
import org.bouncycastle.math.ec.ECConstants;
import org.bouncycastle.math.ec.ECCurve;
import org.bouncycastle.math.ec.ECFieldElement;
import org.bouncycastle.math.ec.ECLookupTable;
import org.bouncycastle.math.ec.ECPoint;
import org.bouncycastle.math.raw.Nat256;
import org.bouncycastle.util.encoders.Hex;

public class SM2P256V1Curve extends ECCurve.AbstractFp {
  public static final BigInteger q = SM2P256V1FieldElement.Q;
  
  private static final int SM2P256V1_DEFAULT_COORDS = 2;
  
  private static final ECFieldElement[] SM2P256V1_AFFINE_ZS = { new SM2P256V1FieldElement(ECConstants.ONE) };
  
  protected SM2P256V1Point infinity;
  
  public SM2P256V1Curve() {
    super(q);
    this.infinity = new SM2P256V1Point(this, null, null);
    this.a = fromBigInteger(new BigInteger(1, 
          Hex.decodeStrict("FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFC")));
    this.b = fromBigInteger(new BigInteger(1, 
          Hex.decodeStrict("28E9FA9E9D9F5E344D5A9E4BCF6509A7F39789F515AB8F92DDBCBD414D940E93")));
    this.order = new BigInteger(1, Hex.decodeStrict("FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFF7203DF6B21C6052B53BBF40939D54123"));
    this.cofactor = BigInteger.valueOf(1L);
    this.coord = 2;
  }
  
  protected ECCurve cloneCurve() { return new SM2P256V1Curve(); }
  
  public boolean supportsCoordinateSystem(int coord) {
    switch (coord) {
      case 2:
        return true;
    } 
    return false;
  }
  
  public BigInteger getQ() { return q; }
  
  public int getFieldSize() { return q.bitLength(); }
  
  public ECFieldElement fromBigInteger(BigInteger x) { return new SM2P256V1FieldElement(x); }
  
  protected ECPoint createRawPoint(ECFieldElement x, ECFieldElement y) { return new SM2P256V1Point(this, x, y); }
  
  protected ECPoint createRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs) { return new SM2P256V1Point(this, x, y, zs); }
  
  public ECPoint getInfinity() { return this.infinity; }
  
  public ECLookupTable createCacheSafeLookupTable(ECPoint[] points, int off, int len) {
    int FE_INTS = 8;
    int[] table = new int[len * 8 * 2];
    int pos = 0;
    for (int i = 0; i < len; i++) {
      ECPoint p = points[off + i];
      Nat256.copy(((SM2P256V1FieldElement)p.getRawXCoord()).x, 0, table, pos);
      pos += 8;
      Nat256.copy(((SM2P256V1FieldElement)p.getRawYCoord()).x, 0, table, pos);
      pos += 8;
    } 
    return new Object(this, len, table);
  }
  
  public ECFieldElement randomFieldElement(SecureRandom r) {
    int[] x = Nat256.create();
    SM2P256V1Field.random(r, x);
    return new SM2P256V1FieldElement(x);
  }
  
  public ECFieldElement randomFieldElementMult(SecureRandom r) {
    int[] x = Nat256.create();
    SM2P256V1Field.randomMult(r, x);
    return new SM2P256V1FieldElement(x);
  }
}
