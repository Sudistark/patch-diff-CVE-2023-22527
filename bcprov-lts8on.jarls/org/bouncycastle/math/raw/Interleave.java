package org.bouncycastle.math.raw;

public class Interleave {
  private static final long M32 = 1431655765L;
  
  private static final long M64 = 6148914691236517205L;
  
  private static final long M64R = -6148914691236517206L;
  
  public static int expand8to16(int x) {
    x &= 0xFF;
    x = (x | x << 4) & 0xF0F;
    x = (x | x << 2) & 0x3333;
    return (x | x << 1) & 0x5555;
  }
  
  public static int expand16to32(int x) {
    x &= 0xFFFF;
    x = (x | x << 8) & 0xFF00FF;
    x = (x | x << 4) & 0xF0F0F0F;
    x = (x | x << 2) & 0x33333333;
    return (x | x << 1) & 0x55555555;
  }
  
  public static long expand32to64(int x) {
    x = Bits.bitPermuteStep(x, 65280, 8);
    x = Bits.bitPermuteStep(x, 15728880, 4);
    x = Bits.bitPermuteStep(x, 202116108, 2);
    x = Bits.bitPermuteStep(x, 572662306, 1);
    return ((x >>> 1) & 0x55555555L) << 32 | x & 0x55555555L;
  }
  
  public static void expand64To128(long x, long[] z, int zOff) {
    x = Bits.bitPermuteStep(x, 4294901760L, 16);
    x = Bits.bitPermuteStep(x, 280375465148160L, 8);
    x = Bits.bitPermuteStep(x, 67555025218437360L, 4);
    x = Bits.bitPermuteStep(x, 868082074056920076L, 2);
    x = Bits.bitPermuteStep(x, 2459565876494606882L, 1);
    z[zOff] = x & 0x5555555555555555L;
    z[zOff + 1] = x >>> true & 0x5555555555555555L;
  }
  
  public static void expand64To128(long[] xs, int xsOff, int xsLen, long[] zs, int zsOff) {
    for (int i = 0; i < xsLen; i++) {
      expand64To128(xs[xsOff + i], zs, zsOff);
      zsOff += 2;
    } 
  }
  
  public static void expand64To128Rev(long x, long[] z, int zOff) {
    x = Bits.bitPermuteStep(x, 4294901760L, 16);
    x = Bits.bitPermuteStep(x, 280375465148160L, 8);
    x = Bits.bitPermuteStep(x, 67555025218437360L, 4);
    x = Bits.bitPermuteStep(x, 868082074056920076L, 2);
    x = Bits.bitPermuteStep(x, 2459565876494606882L, 1);
    z[zOff] = x & 0xAAAAAAAAAAAAAAAAL;
    z[zOff + 1] = x << true & 0xAAAAAAAAAAAAAAAAL;
  }
  
  public static int shuffle(int x) {
    x = Bits.bitPermuteStep(x, 65280, 8);
    x = Bits.bitPermuteStep(x, 15728880, 4);
    x = Bits.bitPermuteStep(x, 202116108, 2);
    return Bits.bitPermuteStep(x, 572662306, 1);
  }
  
  public static long shuffle(long x) {
    x = Bits.bitPermuteStep(x, 4294901760L, 16);
    x = Bits.bitPermuteStep(x, 280375465148160L, 8);
    x = Bits.bitPermuteStep(x, 67555025218437360L, 4);
    x = Bits.bitPermuteStep(x, 868082074056920076L, 2);
    return Bits.bitPermuteStep(x, 2459565876494606882L, 1);
  }
  
  public static int shuffle2(int x) {
    x = Bits.bitPermuteStep(x, 11141290, 7);
    x = Bits.bitPermuteStep(x, 52428, 14);
    x = Bits.bitPermuteStep(x, 15728880, 4);
    return Bits.bitPermuteStep(x, 65280, 8);
  }
  
  public static long shuffle2(long x) {
    x = Bits.bitPermuteStep(x, 4278255360L, 24);
    x = Bits.bitPermuteStep(x, 57421771435671756L, 6);
    x = Bits.bitPermuteStep(x, 264913582878960L, 12);
    return Bits.bitPermuteStep(x, 723401728380766730L, 3);
  }
  
  public static long shuffle3(long x) {
    x = Bits.bitPermuteStep(x, 47851476196393130L, 7);
    x = Bits.bitPermuteStep(x, 225176545447116L, 14);
    return Bits.bitPermuteStep(x, 4042322160L, 28);
  }
  
  public static int unshuffle(int x) {
    x = Bits.bitPermuteStep(x, 572662306, 1);
    x = Bits.bitPermuteStep(x, 202116108, 2);
    x = Bits.bitPermuteStep(x, 15728880, 4);
    return Bits.bitPermuteStep(x, 65280, 8);
  }
  
  public static long unshuffle(long x) {
    x = Bits.bitPermuteStep(x, 2459565876494606882L, 1);
    x = Bits.bitPermuteStep(x, 868082074056920076L, 2);
    x = Bits.bitPermuteStep(x, 67555025218437360L, 4);
    x = Bits.bitPermuteStep(x, 280375465148160L, 8);
    return Bits.bitPermuteStep(x, 4294901760L, 16);
  }
  
  public static int unshuffle2(int x) {
    x = Bits.bitPermuteStep(x, 65280, 8);
    x = Bits.bitPermuteStep(x, 15728880, 4);
    x = Bits.bitPermuteStep(x, 52428, 14);
    return Bits.bitPermuteStep(x, 11141290, 7);
  }
  
  public static long unshuffle2(long x) {
    x = Bits.bitPermuteStep(x, 723401728380766730L, 3);
    x = Bits.bitPermuteStep(x, 264913582878960L, 12);
    x = Bits.bitPermuteStep(x, 57421771435671756L, 6);
    return Bits.bitPermuteStep(x, 4278255360L, 24);
  }
  
  public static long unshuffle3(long x) { return shuffle3(x); }
}
