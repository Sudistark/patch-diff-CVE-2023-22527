package META-INF.versions.9.org.bouncycastle.asn1;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import org.bouncycastle.asn1.ASN1Encodable;
import org.bouncycastle.asn1.ASN1OctetString;
import org.bouncycastle.asn1.ASN1OctetStringParser;
import org.bouncycastle.asn1.ASN1OutputStream;
import org.bouncycastle.asn1.ASN1Primitive;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.ASN1TaggedObject;
import org.bouncycastle.asn1.BEROctetString;
import org.bouncycastle.asn1.DEROctetString;
import org.bouncycastle.util.Arrays;
import org.bouncycastle.util.Strings;
import org.bouncycastle.util.encoders.Hex;

public abstract class ASN1OctetString extends ASN1Primitive implements ASN1OctetStringParser {
  byte[] string;
  
  public static ASN1OctetString getInstance(ASN1TaggedObject paramASN1TaggedObject, boolean paramBoolean) {
    if (paramBoolean) {
      if (!paramASN1TaggedObject.isExplicit())
        throw new IllegalArgumentException("object implicit - explicit expected."); 
      return getInstance(paramASN1TaggedObject.getObject());
    } 
    ASN1Primitive aSN1Primitive = paramASN1TaggedObject.getObject();
    if (paramASN1TaggedObject.isExplicit()) {
      ASN1OctetString aSN1OctetString = getInstance(aSN1Primitive);
      if (paramASN1TaggedObject instanceof org.bouncycastle.asn1.BERTaggedObject)
        return new BEROctetString(new ASN1OctetString[] { aSN1OctetString }); 
      return (ASN1OctetString)(new BEROctetString(new ASN1OctetString[] { aSN1OctetString })).toDLObject();
    } 
    if (aSN1Primitive instanceof ASN1OctetString) {
      ASN1OctetString aSN1OctetString = (ASN1OctetString)aSN1Primitive;
      if (paramASN1TaggedObject instanceof org.bouncycastle.asn1.BERTaggedObject)
        return aSN1OctetString; 
      return (ASN1OctetString)aSN1OctetString.toDLObject();
    } 
    if (aSN1Primitive instanceof ASN1Sequence) {
      ASN1Sequence aSN1Sequence = (ASN1Sequence)aSN1Primitive;
      if (paramASN1TaggedObject instanceof org.bouncycastle.asn1.BERTaggedObject)
        return BEROctetString.fromSequence(aSN1Sequence); 
      return (ASN1OctetString)BEROctetString.fromSequence(aSN1Sequence).toDLObject();
    } 
    throw new IllegalArgumentException("unknown object in getInstance: " + paramASN1TaggedObject.getClass().getName());
  }
  
  public static ASN1OctetString getInstance(Object paramObject) {
    if (paramObject == null || paramObject instanceof ASN1OctetString)
      return (ASN1OctetString)paramObject; 
    if (paramObject instanceof byte[])
      try {
        return getInstance(fromByteArray((byte[])paramObject));
      } catch (IOException iOException) {
        throw new IllegalArgumentException("failed to construct OCTET STRING from byte[]: " + iOException.getMessage());
      }  
    if (paramObject instanceof ASN1Encodable) {
      ASN1Primitive aSN1Primitive = ((ASN1Encodable)paramObject).toASN1Primitive();
      if (aSN1Primitive instanceof ASN1OctetString)
        return (ASN1OctetString)aSN1Primitive; 
    } 
    throw new IllegalArgumentException("illegal object in getInstance: " + paramObject.getClass().getName());
  }
  
  public ASN1OctetString(byte[] paramArrayOfByte) {
    if (paramArrayOfByte == null)
      throw new NullPointerException("'string' cannot be null"); 
    this.string = paramArrayOfByte;
  }
  
  public InputStream getOctetStream() { return new ByteArrayInputStream(this.string); }
  
  public ASN1OctetStringParser parser() { return this; }
  
  public byte[] getOctets() { return this.string; }
  
  public int hashCode() { return Arrays.hashCode(getOctets()); }
  
  boolean asn1Equals(ASN1Primitive paramASN1Primitive) {
    if (!(paramASN1Primitive instanceof ASN1OctetString))
      return false; 
    ASN1OctetString aSN1OctetString = (ASN1OctetString)paramASN1Primitive;
    return Arrays.areEqual(this.string, aSN1OctetString.string);
  }
  
  public ASN1Primitive getLoadedObject() { return toASN1Primitive(); }
  
  ASN1Primitive toDERObject() { return new DEROctetString(this.string); }
  
  ASN1Primitive toDLObject() { return new DEROctetString(this.string); }
  
  abstract void encode(ASN1OutputStream paramASN1OutputStream, boolean paramBoolean) throws IOException;
  
  public String toString() { return "#" + Strings.fromByteArray(Hex.encode(this.string)); }
}
