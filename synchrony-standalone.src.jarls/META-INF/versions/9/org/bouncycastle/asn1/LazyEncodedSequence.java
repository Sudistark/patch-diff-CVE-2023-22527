package META-INF.versions.9.org.bouncycastle.asn1;

import java.io.IOException;
import java.util.Enumeration;
import java.util.Iterator;
import org.bouncycastle.asn1.ASN1Encodable;
import org.bouncycastle.asn1.ASN1EncodableVector;
import org.bouncycastle.asn1.ASN1OutputStream;
import org.bouncycastle.asn1.ASN1Primitive;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.LazyConstructionEnumeration;
import org.bouncycastle.asn1.LazyEncodedSequence;
import org.bouncycastle.asn1.StreamUtil;

class LazyEncodedSequence extends ASN1Sequence {
  private byte[] encoded;
  
  LazyEncodedSequence(byte[] paramArrayOfByte) throws IOException { this.encoded = paramArrayOfByte; }
  
  public ASN1Encodable getObjectAt(int paramInt) {
    force();
    return super.getObjectAt(paramInt);
  }
  
  public Enumeration getObjects() {
    if (null != this.encoded)
      return new LazyConstructionEnumeration(this.encoded); 
    return super.getObjects();
  }
  
  public int hashCode() {
    force();
    return super.hashCode();
  }
  
  public Iterator<ASN1Encodable> iterator() {
    force();
    return super.iterator();
  }
  
  public int size() {
    force();
    return super.size();
  }
  
  public ASN1Encodable[] toArray() {
    force();
    return super.toArray();
  }
  
  ASN1Encodable[] toArrayInternal() {
    force();
    return super.toArrayInternal();
  }
  
  int encodedLength() {
    if (null != this.encoded)
      return 1 + StreamUtil.calculateBodyLength(this.encoded.length) + this.encoded.length; 
    return super.toDLObject().encodedLength();
  }
  
  void encode(ASN1OutputStream paramASN1OutputStream, boolean paramBoolean) throws IOException {
    if (null != this.encoded) {
      paramASN1OutputStream.writeEncoded(paramBoolean, 48, this.encoded);
    } else {
      super.toDLObject().encode(paramASN1OutputStream, paramBoolean);
    } 
  }
  
  ASN1Primitive toDERObject() {
    force();
    return super.toDERObject();
  }
  
  ASN1Primitive toDLObject() {
    force();
    return super.toDLObject();
  }
  
  private void force() {
    if (null != this.encoded) {
      ASN1EncodableVector aSN1EncodableVector = new ASN1EncodableVector();
      LazyConstructionEnumeration lazyConstructionEnumeration = new LazyConstructionEnumeration(this.encoded);
      while (lazyConstructionEnumeration.hasMoreElements())
        aSN1EncodableVector.add((ASN1Primitive)lazyConstructionEnumeration.nextElement()); 
      this.elements = aSN1EncodableVector.takeElements();
      this.encoded = null;
    } 
  }
}
