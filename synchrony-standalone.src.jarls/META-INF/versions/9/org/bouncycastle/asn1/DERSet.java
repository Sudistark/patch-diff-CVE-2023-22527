package META-INF.versions.9.org.bouncycastle.asn1;

import java.io.IOException;
import org.bouncycastle.asn1.ASN1Encodable;
import org.bouncycastle.asn1.ASN1EncodableVector;
import org.bouncycastle.asn1.ASN1OutputStream;
import org.bouncycastle.asn1.ASN1Primitive;
import org.bouncycastle.asn1.ASN1Set;
import org.bouncycastle.asn1.DEROutputStream;
import org.bouncycastle.asn1.DERSet;
import org.bouncycastle.asn1.StreamUtil;

public class DERSet extends ASN1Set {
  public static DERSet convert(ASN1Set paramASN1Set) { return (DERSet)paramASN1Set.toDERObject(); }
  
  private int bodyLength = -1;
  
  public DERSet() {}
  
  public DERSet(ASN1Encodable paramASN1Encodable) { super(paramASN1Encodable); }
  
  public DERSet(ASN1EncodableVector paramASN1EncodableVector) { super(paramASN1EncodableVector, true); }
  
  public DERSet(ASN1Encodable[] paramArrayOfASN1Encodable) { super(paramArrayOfASN1Encodable, true); }
  
  DERSet(boolean paramBoolean, ASN1Encodable[] paramArrayOfASN1Encodable) { super(checkSorted(paramBoolean), paramArrayOfASN1Encodable); }
  
  private int getBodyLength() throws IOException {
    if (this.bodyLength < 0) {
      int i = this.elements.length;
      int j = 0;
      for (byte b = 0; b < i; b++) {
        ASN1Primitive aSN1Primitive = this.elements[b].toASN1Primitive().toDERObject();
        j += aSN1Primitive.encodedLength();
      } 
      this.bodyLength = j;
    } 
    return this.bodyLength;
  }
  
  int encodedLength() throws IOException {
    int i = getBodyLength();
    return 1 + StreamUtil.calculateBodyLength(i) + i;
  }
  
  void encode(ASN1OutputStream paramASN1OutputStream, boolean paramBoolean) throws IOException {
    if (paramBoolean)
      paramASN1OutputStream.write(49); 
    DEROutputStream dEROutputStream = paramASN1OutputStream.getDERSubStream();
    int i = this.elements.length;
    if (this.bodyLength >= 0 || i > 16) {
      paramASN1OutputStream.writeLength(getBodyLength());
      for (byte b = 0; b < i; b++) {
        ASN1Primitive aSN1Primitive = this.elements[b].toASN1Primitive().toDERObject();
        aSN1Primitive.encode(dEROutputStream, true);
      } 
    } else {
      int j = 0;
      ASN1Primitive[] arrayOfASN1Primitive = new ASN1Primitive[i];
      byte b;
      for (b = 0; b < i; b++) {
        ASN1Primitive aSN1Primitive = this.elements[b].toASN1Primitive().toDERObject();
        arrayOfASN1Primitive[b] = aSN1Primitive;
        j += aSN1Primitive.encodedLength();
      } 
      this.bodyLength = j;
      paramASN1OutputStream.writeLength(j);
      for (b = 0; b < i; b++)
        arrayOfASN1Primitive[b].encode(dEROutputStream, true); 
    } 
  }
  
  ASN1Primitive toDERObject() { return this.isSorted ? this : super.toDERObject(); }
  
  ASN1Primitive toDLObject() { return this; }
  
  private static boolean checkSorted(boolean paramBoolean) {
    if (!paramBoolean)
      throw new IllegalStateException("DERSet elements should always be in sorted order"); 
    return paramBoolean;
  }
}
