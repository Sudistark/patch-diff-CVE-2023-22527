package META-INF.versions.9.org.bouncycastle.pqc.crypto.rainbow.util;

import org.bouncycastle.pqc.crypto.rainbow.util.RainbowUtil;

public class RainbowUtil {
  public static int[] convertArraytoInt(byte[] paramArrayOfByte) {
    int[] arrayOfInt = new int[paramArrayOfByte.length];
    for (byte b = 0; b < paramArrayOfByte.length; b++)
      arrayOfInt[b] = paramArrayOfByte[b] & 0xFF; 
    return arrayOfInt;
  }
  
  public static short[] convertArray(byte[] paramArrayOfByte) {
    short[] arrayOfShort = new short[paramArrayOfByte.length];
    for (byte b = 0; b < paramArrayOfByte.length; b++)
      arrayOfShort[b] = (short)(paramArrayOfByte[b] & 0xFF); 
    return arrayOfShort;
  }
  
  public static short[][] convertArray(byte[][] paramArrayOfByte) {
    short[][] arrayOfShort = new short[paramArrayOfByte.length][paramArrayOfByte[0].length];
    for (byte b = 0; b < paramArrayOfByte.length; b++) {
      for (byte b1 = 0; b1 < paramArrayOfByte[0].length; b1++)
        arrayOfShort[b][b1] = (short)(paramArrayOfByte[b][b1] & 0xFF); 
    } 
    return arrayOfShort;
  }
  
  public static short[][][] convertArray(byte[][][] paramArrayOfByte) {
    short[][][] arrayOfShort = new short[paramArrayOfByte.length][paramArrayOfByte[0].length][paramArrayOfByte[0][0].length];
    for (byte b = 0; b < paramArrayOfByte.length; b++) {
      for (byte b1 = 0; b1 < paramArrayOfByte[0].length; b1++) {
        for (byte b2 = 0; b2 < paramArrayOfByte[0][0].length; b2++)
          arrayOfShort[b][b1][b2] = (short)(paramArrayOfByte[b][b1][b2] & 0xFF); 
      } 
    } 
    return arrayOfShort;
  }
  
  public static byte[] convertIntArray(int[] paramArrayOfInt) {
    byte[] arrayOfByte = new byte[paramArrayOfInt.length];
    for (byte b = 0; b < paramArrayOfInt.length; b++)
      arrayOfByte[b] = (byte)paramArrayOfInt[b]; 
    return arrayOfByte;
  }
  
  public static byte[] convertArray(short[] paramArrayOfShort) {
    byte[] arrayOfByte = new byte[paramArrayOfShort.length];
    for (byte b = 0; b < paramArrayOfShort.length; b++)
      arrayOfByte[b] = (byte)paramArrayOfShort[b]; 
    return arrayOfByte;
  }
  
  public static byte[][] convertArray(short[][] paramArrayOfShort) {
    byte[][] arrayOfByte = new byte[paramArrayOfShort.length][paramArrayOfShort[0].length];
    for (byte b = 0; b < paramArrayOfShort.length; b++) {
      for (byte b1 = 0; b1 < paramArrayOfShort[0].length; b1++)
        arrayOfByte[b][b1] = (byte)paramArrayOfShort[b][b1]; 
    } 
    return arrayOfByte;
  }
  
  public static byte[][][] convertArray(short[][][] paramArrayOfShort) {
    byte[][][] arrayOfByte = new byte[paramArrayOfShort.length][paramArrayOfShort[0].length][paramArrayOfShort[0][0].length];
    for (byte b = 0; b < paramArrayOfShort.length; b++) {
      for (byte b1 = 0; b1 < paramArrayOfShort[0].length; b1++) {
        for (byte b2 = 0; b2 < paramArrayOfShort[0][0].length; b2++)
          arrayOfByte[b][b1][b2] = (byte)paramArrayOfShort[b][b1][b2]; 
      } 
    } 
    return arrayOfByte;
  }
  
  public static boolean equals(short[] paramArrayOfShort1, short[] paramArrayOfShort2) {
    if (paramArrayOfShort1.length != paramArrayOfShort2.length)
      return false; 
    boolean bool = true;
    for (int i = paramArrayOfShort1.length - 1; i >= 0; i--)
      bool &= ((paramArrayOfShort1[i] == paramArrayOfShort2[i]) ? 1 : 0); 
    return bool;
  }
  
  public static boolean equals(short[][] paramArrayOfShort1, short[][] paramArrayOfShort2) {
    if (paramArrayOfShort1.length != paramArrayOfShort2.length)
      return false; 
    boolean bool = true;
    for (int i = paramArrayOfShort1.length - 1; i >= 0; i--)
      bool &= equals(paramArrayOfShort1[i], paramArrayOfShort2[i]); 
    return bool;
  }
  
  public static boolean equals(short[][][] paramArrayOfShort1, short[][][] paramArrayOfShort2) {
    if (paramArrayOfShort1.length != paramArrayOfShort2.length)
      return false; 
    boolean bool = true;
    for (int i = paramArrayOfShort1.length - 1; i >= 0; i--)
      bool &= equals(paramArrayOfShort1[i], paramArrayOfShort2[i]); 
    return bool;
  }
}
