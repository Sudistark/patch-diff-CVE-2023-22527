package META-INF.versions.9.org.bouncycastle.pqc.jcajce.provider.xmss;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.security.PublicKey;
import org.bouncycastle.asn1.ASN1ObjectIdentifier;
import org.bouncycastle.asn1.x509.SubjectPublicKeyInfo;
import org.bouncycastle.crypto.CipherParameters;
import org.bouncycastle.pqc.crypto.util.PublicKeyFactory;
import org.bouncycastle.pqc.crypto.util.SubjectPublicKeyInfoFactory;
import org.bouncycastle.pqc.crypto.xmss.XMSSMTPublicKeyParameters;
import org.bouncycastle.pqc.jcajce.interfaces.XMSSMTKey;
import org.bouncycastle.pqc.jcajce.provider.xmss.BCXMSSMTPublicKey;
import org.bouncycastle.pqc.jcajce.provider.xmss.DigestUtil;
import org.bouncycastle.util.Arrays;

public class BCXMSSMTPublicKey implements PublicKey, XMSSMTKey {
  private static final long serialVersionUID = 3230324130542413475L;
  
  private ASN1ObjectIdentifier treeDigest;
  
  private XMSSMTPublicKeyParameters keyParams;
  
  public BCXMSSMTPublicKey(ASN1ObjectIdentifier paramASN1ObjectIdentifier, XMSSMTPublicKeyParameters paramXMSSMTPublicKeyParameters) {
    this.treeDigest = paramASN1ObjectIdentifier;
    this.keyParams = paramXMSSMTPublicKeyParameters;
  }
  
  public BCXMSSMTPublicKey(SubjectPublicKeyInfo paramSubjectPublicKeyInfo) throws IOException { init(paramSubjectPublicKeyInfo); }
  
  private void init(SubjectPublicKeyInfo paramSubjectPublicKeyInfo) throws IOException {
    this.keyParams = (XMSSMTPublicKeyParameters)PublicKeyFactory.createKey(paramSubjectPublicKeyInfo);
    this.treeDigest = DigestUtil.getDigestOID(this.keyParams.getTreeDigest());
  }
  
  public boolean equals(Object paramObject) {
    if (paramObject == this)
      return true; 
    if (paramObject instanceof BCXMSSMTPublicKey) {
      BCXMSSMTPublicKey bCXMSSMTPublicKey = (BCXMSSMTPublicKey)paramObject;
      return (this.treeDigest.equals(bCXMSSMTPublicKey.treeDigest) && Arrays.areEqual(this.keyParams.toByteArray(), bCXMSSMTPublicKey.keyParams.toByteArray()));
    } 
    return false;
  }
  
  public int hashCode() { return this.treeDigest.hashCode() + 37 * Arrays.hashCode(this.keyParams.toByteArray()); }
  
  public final String getAlgorithm() { return "XMSSMT"; }
  
  public byte[] getEncoded() {
    try {
      SubjectPublicKeyInfo subjectPublicKeyInfo = SubjectPublicKeyInfoFactory.createSubjectPublicKeyInfo(this.keyParams);
      return subjectPublicKeyInfo.getEncoded();
    } catch (IOException iOException) {
      return null;
    } 
  }
  
  public String getFormat() { return "X.509"; }
  
  CipherParameters getKeyParams() { return this.keyParams; }
  
  public int getHeight() { return this.keyParams.getParameters().getHeight(); }
  
  public int getLayers() { return this.keyParams.getParameters().getLayers(); }
  
  public String getTreeDigest() { return DigestUtil.getXMSSDigestName(this.treeDigest); }
  
  private void readObject(ObjectInputStream paramObjectInputStream) throws IOException, ClassNotFoundException {
    paramObjectInputStream.defaultReadObject();
    byte[] arrayOfByte = (byte[])paramObjectInputStream.readObject();
    init(SubjectPublicKeyInfo.getInstance(arrayOfByte));
  }
  
  private void writeObject(ObjectOutputStream paramObjectOutputStream) throws IOException {
    paramObjectOutputStream.defaultWriteObject();
    paramObjectOutputStream.writeObject(getEncoded());
  }
}
