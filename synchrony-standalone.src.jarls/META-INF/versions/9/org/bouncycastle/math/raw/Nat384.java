package META-INF.versions.9.org.bouncycastle.math.raw;

import org.bouncycastle.math.raw.Nat;
import org.bouncycastle.math.raw.Nat192;

public abstract class Nat384 {
  public static void mul(int[] paramArrayOfInt1, int[] paramArrayOfInt2, int[] paramArrayOfInt3) {
    Nat192.mul(paramArrayOfInt1, paramArrayOfInt2, paramArrayOfInt3);
    Nat192.mul(paramArrayOfInt1, 6, paramArrayOfInt2, 6, paramArrayOfInt3, 12);
    int i = Nat192.addToEachOther(paramArrayOfInt3, 6, paramArrayOfInt3, 12);
    int j = i + Nat192.addTo(paramArrayOfInt3, 0, paramArrayOfInt3, 6, 0);
    i += Nat192.addTo(paramArrayOfInt3, 18, paramArrayOfInt3, 12, j);
    int[] arrayOfInt1 = Nat192.create(), arrayOfInt2 = Nat192.create();
    boolean bool = (Nat192.diff(paramArrayOfInt1, 6, paramArrayOfInt1, 0, arrayOfInt1, 0) != Nat192.diff(paramArrayOfInt2, 6, paramArrayOfInt2, 0, arrayOfInt2, 0)) ? 1 : 0;
    int[] arrayOfInt3 = Nat192.createExt();
    Nat192.mul(arrayOfInt1, arrayOfInt2, arrayOfInt3);
    i += (bool ? Nat.addTo(12, arrayOfInt3, 0, paramArrayOfInt3, 6) : Nat.subFrom(12, arrayOfInt3, 0, paramArrayOfInt3, 6));
    Nat.addWordAt(24, i, paramArrayOfInt3, 18);
  }
  
  public static void square(int[] paramArrayOfInt1, int[] paramArrayOfInt2) {
    Nat192.square(paramArrayOfInt1, paramArrayOfInt2);
    Nat192.square(paramArrayOfInt1, 6, paramArrayOfInt2, 12);
    int i = Nat192.addToEachOther(paramArrayOfInt2, 6, paramArrayOfInt2, 12);
    int j = i + Nat192.addTo(paramArrayOfInt2, 0, paramArrayOfInt2, 6, 0);
    i += Nat192.addTo(paramArrayOfInt2, 18, paramArrayOfInt2, 12, j);
    int[] arrayOfInt1 = Nat192.create();
    Nat192.diff(paramArrayOfInt1, 6, paramArrayOfInt1, 0, arrayOfInt1, 0);
    int[] arrayOfInt2 = Nat192.createExt();
    Nat192.square(arrayOfInt1, arrayOfInt2);
    i += Nat.subFrom(12, arrayOfInt2, 0, paramArrayOfInt2, 6);
    Nat.addWordAt(24, i, paramArrayOfInt2, 18);
  }
}
