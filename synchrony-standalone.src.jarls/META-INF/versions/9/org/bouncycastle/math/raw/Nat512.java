package META-INF.versions.9.org.bouncycastle.math.raw;

import org.bouncycastle.math.raw.Nat;
import org.bouncycastle.math.raw.Nat256;

public abstract class Nat512 {
  public static void mul(int[] paramArrayOfInt1, int[] paramArrayOfInt2, int[] paramArrayOfInt3) {
    Nat256.mul(paramArrayOfInt1, paramArrayOfInt2, paramArrayOfInt3);
    Nat256.mul(paramArrayOfInt1, 8, paramArrayOfInt2, 8, paramArrayOfInt3, 16);
    int i = Nat256.addToEachOther(paramArrayOfInt3, 8, paramArrayOfInt3, 16);
    int j = i + Nat256.addTo(paramArrayOfInt3, 0, paramArrayOfInt3, 8, 0);
    i += Nat256.addTo(paramArrayOfInt3, 24, paramArrayOfInt3, 16, j);
    int[] arrayOfInt1 = Nat256.create(), arrayOfInt2 = Nat256.create();
    boolean bool = (Nat256.diff(paramArrayOfInt1, 8, paramArrayOfInt1, 0, arrayOfInt1, 0) != Nat256.diff(paramArrayOfInt2, 8, paramArrayOfInt2, 0, arrayOfInt2, 0)) ? 1 : 0;
    int[] arrayOfInt3 = Nat256.createExt();
    Nat256.mul(arrayOfInt1, arrayOfInt2, arrayOfInt3);
    i += (bool ? Nat.addTo(16, arrayOfInt3, 0, paramArrayOfInt3, 8) : Nat.subFrom(16, arrayOfInt3, 0, paramArrayOfInt3, 8));
    Nat.addWordAt(32, i, paramArrayOfInt3, 24);
  }
  
  public static void square(int[] paramArrayOfInt1, int[] paramArrayOfInt2) {
    Nat256.square(paramArrayOfInt1, paramArrayOfInt2);
    Nat256.square(paramArrayOfInt1, 8, paramArrayOfInt2, 16);
    int i = Nat256.addToEachOther(paramArrayOfInt2, 8, paramArrayOfInt2, 16);
    int j = i + Nat256.addTo(paramArrayOfInt2, 0, paramArrayOfInt2, 8, 0);
    i += Nat256.addTo(paramArrayOfInt2, 24, paramArrayOfInt2, 16, j);
    int[] arrayOfInt1 = Nat256.create();
    Nat256.diff(paramArrayOfInt1, 8, paramArrayOfInt1, 0, arrayOfInt1, 0);
    int[] arrayOfInt2 = Nat256.createExt();
    Nat256.square(arrayOfInt1, arrayOfInt2);
    i += Nat.subFrom(16, arrayOfInt2, 0, paramArrayOfInt2, 8);
    Nat.addWordAt(32, i, paramArrayOfInt2, 24);
  }
}
