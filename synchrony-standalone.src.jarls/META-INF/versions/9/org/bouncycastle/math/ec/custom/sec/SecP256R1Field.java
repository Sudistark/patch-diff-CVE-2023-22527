package META-INF.versions.9.org.bouncycastle.math.ec.custom.sec;

import java.math.BigInteger;
import java.security.SecureRandom;
import org.bouncycastle.math.ec.custom.sec.SecP256R1Field;
import org.bouncycastle.math.raw.Mod;
import org.bouncycastle.math.raw.Nat;
import org.bouncycastle.math.raw.Nat256;
import org.bouncycastle.util.Pack;

public class SecP256R1Field {
  private static final long M = 4294967295L;
  
  static final int[] P = { -1, -1, -1, 0, 0, 0, 1, -1 };
  
  private static final int[] PExt = { 
      1, 0, 0, -2, -1, -1, -2, 1, -2, 1, 
      -2, 1, 1, -2, 2, -2 };
  
  private static final int P7 = -1;
  
  private static final int PExt15s1 = 2147483647;
  
  public static void add(int[] paramArrayOfInt1, int[] paramArrayOfInt2, int[] paramArrayOfInt3) {
    int i = Nat256.add(paramArrayOfInt1, paramArrayOfInt2, paramArrayOfInt3);
    if (i != 0 || (paramArrayOfInt3[7] == -1 && Nat256.gte(paramArrayOfInt3, P)))
      addPInvTo(paramArrayOfInt3); 
  }
  
  public static void addExt(int[] paramArrayOfInt1, int[] paramArrayOfInt2, int[] paramArrayOfInt3) {
    int i = Nat.add(16, paramArrayOfInt1, paramArrayOfInt2, paramArrayOfInt3);
    if (i != 0 || (paramArrayOfInt3[15] >>> 1 >= Integer.MAX_VALUE && Nat.gte(16, paramArrayOfInt3, PExt)))
      Nat.subFrom(16, PExt, paramArrayOfInt3); 
  }
  
  public static void addOne(int[] paramArrayOfInt1, int[] paramArrayOfInt2) {
    int i = Nat.inc(8, paramArrayOfInt1, paramArrayOfInt2);
    if (i != 0 || (paramArrayOfInt2[7] == -1 && Nat256.gte(paramArrayOfInt2, P)))
      addPInvTo(paramArrayOfInt2); 
  }
  
  public static int[] fromBigInteger(BigInteger paramBigInteger) {
    int[] arrayOfInt = Nat256.fromBigInteger(paramBigInteger);
    if (arrayOfInt[7] == -1 && Nat256.gte(arrayOfInt, P))
      Nat256.subFrom(P, arrayOfInt); 
    return arrayOfInt;
  }
  
  public static void half(int[] paramArrayOfInt1, int[] paramArrayOfInt2) {
    if ((paramArrayOfInt1[0] & true) == 0) {
      Nat.shiftDownBit(8, paramArrayOfInt1, 0, paramArrayOfInt2);
    } else {
      int i = Nat256.add(paramArrayOfInt1, P, paramArrayOfInt2);
      Nat.shiftDownBit(8, paramArrayOfInt2, i);
    } 
  }
  
  public static void inv(int[] paramArrayOfInt1, int[] paramArrayOfInt2) { Mod.checkedModOddInverse(P, paramArrayOfInt1, paramArrayOfInt2); }
  
  public static int isZero(int[] paramArrayOfInt) {
    int i = 0;
    for (byte b = 0; b < 8; b++)
      i |= paramArrayOfInt[b]; 
    i = i >>> 1 | i & true;
    return i - 1 >> 31;
  }
  
  public static void multiply(int[] paramArrayOfInt1, int[] paramArrayOfInt2, int[] paramArrayOfInt3) {
    int[] arrayOfInt = Nat256.createExt();
    Nat256.mul(paramArrayOfInt1, paramArrayOfInt2, arrayOfInt);
    reduce(arrayOfInt, paramArrayOfInt3);
  }
  
  public static void multiplyAddToExt(int[] paramArrayOfInt1, int[] paramArrayOfInt2, int[] paramArrayOfInt3) {
    int i = Nat256.mulAddTo(paramArrayOfInt1, paramArrayOfInt2, paramArrayOfInt3);
    if (i != 0 || (paramArrayOfInt3[15] >>> 1 >= Integer.MAX_VALUE && Nat.gte(16, paramArrayOfInt3, PExt)))
      Nat.subFrom(16, PExt, paramArrayOfInt3); 
  }
  
  public static void negate(int[] paramArrayOfInt1, int[] paramArrayOfInt2) {
    if (0 != isZero(paramArrayOfInt1)) {
      Nat256.sub(P, P, paramArrayOfInt2);
    } else {
      Nat256.sub(P, paramArrayOfInt1, paramArrayOfInt2);
    } 
  }
  
  public static void random(SecureRandom paramSecureRandom, int[] paramArrayOfInt) {
    byte[] arrayOfByte = new byte[32];
    do {
      paramSecureRandom.nextBytes(arrayOfByte);
      Pack.littleEndianToInt(arrayOfByte, 0, paramArrayOfInt, 0, 8);
    } while (0 == Nat.lessThan(8, paramArrayOfInt, P));
  }
  
  public static void randomMult(SecureRandom paramSecureRandom, int[] paramArrayOfInt) {
    do {
      random(paramSecureRandom, paramArrayOfInt);
    } while (0 != isZero(paramArrayOfInt));
  }
  
  public static void reduce(int[] paramArrayOfInt1, int[] paramArrayOfInt2) {
    long l1 = paramArrayOfInt1[8] & 0xFFFFFFFFL, l2 = paramArrayOfInt1[9] & 0xFFFFFFFFL, l3 = paramArrayOfInt1[10] & 0xFFFFFFFFL, l4 = paramArrayOfInt1[11] & 0xFFFFFFFFL;
    long l5 = paramArrayOfInt1[12] & 0xFFFFFFFFL, l6 = paramArrayOfInt1[13] & 0xFFFFFFFFL, l7 = paramArrayOfInt1[14] & 0xFFFFFFFFL, l8 = paramArrayOfInt1[15] & 0xFFFFFFFFL;
    l1 -= 6L;
    long l9 = l1 + l2;
    long l10 = l2 + l3;
    long l11 = l3 + l4 - l8;
    long l12 = l4 + l5;
    long l13 = l5 + l6;
    long l14 = l6 + l7;
    long l15 = l7 + l8;
    long l16 = l14 - l9;
    long l17 = 0L;
    l17 += (paramArrayOfInt1[0] & 0xFFFFFFFFL) - l12 - l16;
    paramArrayOfInt2[0] = (int)l17;
    l17 >>= 32;
    l17 += (paramArrayOfInt1[1] & 0xFFFFFFFFL) + l10 - l13 - l15;
    paramArrayOfInt2[1] = (int)l17;
    l17 >>= 32;
    l17 += (paramArrayOfInt1[2] & 0xFFFFFFFFL) + l11 - l14;
    paramArrayOfInt2[2] = (int)l17;
    l17 >>= 32;
    l17 += (paramArrayOfInt1[3] & 0xFFFFFFFFL) + (l12 << true) + l16 - l15;
    paramArrayOfInt2[3] = (int)l17;
    l17 >>= 32;
    l17 += (paramArrayOfInt1[4] & 0xFFFFFFFFL) + (l13 << true) + l7 - l10;
    paramArrayOfInt2[4] = (int)l17;
    l17 >>= 32;
    l17 += (paramArrayOfInt1[5] & 0xFFFFFFFFL) + (l14 << true) - l11;
    paramArrayOfInt2[5] = (int)l17;
    l17 >>= 32;
    l17 += (paramArrayOfInt1[6] & 0xFFFFFFFFL) + (l15 << true) + l16;
    paramArrayOfInt2[6] = (int)l17;
    l17 >>= 32;
    l17 += (paramArrayOfInt1[7] & 0xFFFFFFFFL) + (l8 << true) + l1 - l11 - l13;
    paramArrayOfInt2[7] = (int)l17;
    l17 >>= 32;
    l17 += 6L;
    reduce32((int)l17, paramArrayOfInt2);
  }
  
  public static void reduce32(int paramInt, int[] paramArrayOfInt) {
    long l = 0L;
    if (paramInt != 0) {
      long l1 = paramInt & 0xFFFFFFFFL;
      l += (paramArrayOfInt[0] & 0xFFFFFFFFL) + l1;
      paramArrayOfInt[0] = (int)l;
      l >>= 32;
      if (l != 0L) {
        l += (paramArrayOfInt[1] & 0xFFFFFFFFL);
        paramArrayOfInt[1] = (int)l;
        l >>= 32;
        l += (paramArrayOfInt[2] & 0xFFFFFFFFL);
        paramArrayOfInt[2] = (int)l;
        l >>= 32;
      } 
      l += (paramArrayOfInt[3] & 0xFFFFFFFFL) - l1;
      paramArrayOfInt[3] = (int)l;
      l >>= 32;
      if (l != 0L) {
        l += (paramArrayOfInt[4] & 0xFFFFFFFFL);
        paramArrayOfInt[4] = (int)l;
        l >>= 32;
        l += (paramArrayOfInt[5] & 0xFFFFFFFFL);
        paramArrayOfInt[5] = (int)l;
        l >>= 32;
      } 
      l += (paramArrayOfInt[6] & 0xFFFFFFFFL) - l1;
      paramArrayOfInt[6] = (int)l;
      l >>= 32;
      l += (paramArrayOfInt[7] & 0xFFFFFFFFL) + l1;
      paramArrayOfInt[7] = (int)l;
      l >>= 32;
    } 
    if (l != 0L || (paramArrayOfInt[7] == -1 && Nat256.gte(paramArrayOfInt, P)))
      addPInvTo(paramArrayOfInt); 
  }
  
  public static void square(int[] paramArrayOfInt1, int[] paramArrayOfInt2) {
    int[] arrayOfInt = Nat256.createExt();
    Nat256.square(paramArrayOfInt1, arrayOfInt);
    reduce(arrayOfInt, paramArrayOfInt2);
  }
  
  public static void squareN(int[] paramArrayOfInt1, int paramInt, int[] paramArrayOfInt2) {
    int[] arrayOfInt = Nat256.createExt();
    Nat256.square(paramArrayOfInt1, arrayOfInt);
    reduce(arrayOfInt, paramArrayOfInt2);
    while (--paramInt > 0) {
      Nat256.square(paramArrayOfInt2, arrayOfInt);
      reduce(arrayOfInt, paramArrayOfInt2);
    } 
  }
  
  public static void subtract(int[] paramArrayOfInt1, int[] paramArrayOfInt2, int[] paramArrayOfInt3) {
    int i = Nat256.sub(paramArrayOfInt1, paramArrayOfInt2, paramArrayOfInt3);
    if (i != 0)
      subPInvFrom(paramArrayOfInt3); 
  }
  
  public static void subtractExt(int[] paramArrayOfInt1, int[] paramArrayOfInt2, int[] paramArrayOfInt3) {
    int i = Nat.sub(16, paramArrayOfInt1, paramArrayOfInt2, paramArrayOfInt3);
    if (i != 0)
      Nat.addTo(16, PExt, paramArrayOfInt3); 
  }
  
  public static void twice(int[] paramArrayOfInt1, int[] paramArrayOfInt2) {
    int i = Nat.shiftUpBit(8, paramArrayOfInt1, 0, paramArrayOfInt2);
    if (i != 0 || (paramArrayOfInt2[7] == -1 && Nat256.gte(paramArrayOfInt2, P)))
      addPInvTo(paramArrayOfInt2); 
  }
  
  private static void addPInvTo(int[] paramArrayOfInt) {
    long l = (paramArrayOfInt[0] & 0xFFFFFFFFL) + 1L;
    paramArrayOfInt[0] = (int)l;
    l >>= 32;
    if (l != 0L) {
      l += (paramArrayOfInt[1] & 0xFFFFFFFFL);
      paramArrayOfInt[1] = (int)l;
      l >>= 32;
      l += (paramArrayOfInt[2] & 0xFFFFFFFFL);
      paramArrayOfInt[2] = (int)l;
      l >>= 32;
    } 
    l += (paramArrayOfInt[3] & 0xFFFFFFFFL) - 1L;
    paramArrayOfInt[3] = (int)l;
    l >>= 32;
    if (l != 0L) {
      l += (paramArrayOfInt[4] & 0xFFFFFFFFL);
      paramArrayOfInt[4] = (int)l;
      l >>= 32;
      l += (paramArrayOfInt[5] & 0xFFFFFFFFL);
      paramArrayOfInt[5] = (int)l;
      l >>= 32;
    } 
    l += (paramArrayOfInt[6] & 0xFFFFFFFFL) - 1L;
    paramArrayOfInt[6] = (int)l;
    l >>= 32;
    l += (paramArrayOfInt[7] & 0xFFFFFFFFL) + 1L;
    paramArrayOfInt[7] = (int)l;
  }
  
  private static void subPInvFrom(int[] paramArrayOfInt) {
    long l = (paramArrayOfInt[0] & 0xFFFFFFFFL) - 1L;
    paramArrayOfInt[0] = (int)l;
    l >>= 32;
    if (l != 0L) {
      l += (paramArrayOfInt[1] & 0xFFFFFFFFL);
      paramArrayOfInt[1] = (int)l;
      l >>= 32;
      l += (paramArrayOfInt[2] & 0xFFFFFFFFL);
      paramArrayOfInt[2] = (int)l;
      l >>= 32;
    } 
    l += (paramArrayOfInt[3] & 0xFFFFFFFFL) + 1L;
    paramArrayOfInt[3] = (int)l;
    l >>= 32;
    if (l != 0L) {
      l += (paramArrayOfInt[4] & 0xFFFFFFFFL);
      paramArrayOfInt[4] = (int)l;
      l >>= 32;
      l += (paramArrayOfInt[5] & 0xFFFFFFFFL);
      paramArrayOfInt[5] = (int)l;
      l >>= 32;
    } 
    l += (paramArrayOfInt[6] & 0xFFFFFFFFL) + 1L;
    paramArrayOfInt[6] = (int)l;
    l >>= 32;
    l += (paramArrayOfInt[7] & 0xFFFFFFFFL) - 1L;
    paramArrayOfInt[7] = (int)l;
  }
}
