package META-INF.versions.9.org.bouncycastle.math.ec.custom.sec;

import java.math.BigInteger;
import java.security.SecureRandom;
import org.bouncycastle.math.ec.custom.sec.SecP192K1Field;
import org.bouncycastle.math.raw.Mod;
import org.bouncycastle.math.raw.Nat;
import org.bouncycastle.math.raw.Nat192;
import org.bouncycastle.util.Pack;

public class SecP192K1Field {
  static final int[] P = { -4553, -2, -1, -1, -1, -1 };
  
  private static final int[] PExt = { 
      20729809, 9106, 1, 0, 0, 0, -9106, -3, -1, -1, 
      -1, -1 };
  
  private static final int[] PExtInv = { -20729809, -9107, -2, -1, -1, -1, 9105, 2 };
  
  private static final int P5 = -1;
  
  private static final int PExt11 = -1;
  
  private static final int PInv33 = 4553;
  
  public static void add(int[] paramArrayOfInt1, int[] paramArrayOfInt2, int[] paramArrayOfInt3) {
    int i = Nat192.add(paramArrayOfInt1, paramArrayOfInt2, paramArrayOfInt3);
    if (i != 0 || (paramArrayOfInt3[5] == -1 && Nat192.gte(paramArrayOfInt3, P)))
      Nat.add33To(6, 4553, paramArrayOfInt3); 
  }
  
  public static void addExt(int[] paramArrayOfInt1, int[] paramArrayOfInt2, int[] paramArrayOfInt3) {
    int i = Nat.add(12, paramArrayOfInt1, paramArrayOfInt2, paramArrayOfInt3);
    if (i != 0 || (paramArrayOfInt3[11] == -1 && Nat.gte(12, paramArrayOfInt3, PExt)))
      if (Nat.addTo(PExtInv.length, PExtInv, paramArrayOfInt3) != 0)
        Nat.incAt(12, paramArrayOfInt3, PExtInv.length);  
  }
  
  public static void addOne(int[] paramArrayOfInt1, int[] paramArrayOfInt2) {
    int i = Nat.inc(6, paramArrayOfInt1, paramArrayOfInt2);
    if (i != 0 || (paramArrayOfInt2[5] == -1 && Nat192.gte(paramArrayOfInt2, P)))
      Nat.add33To(6, 4553, paramArrayOfInt2); 
  }
  
  public static int[] fromBigInteger(BigInteger paramBigInteger) {
    int[] arrayOfInt = Nat192.fromBigInteger(paramBigInteger);
    if (arrayOfInt[5] == -1 && Nat192.gte(arrayOfInt, P))
      Nat192.subFrom(P, arrayOfInt); 
    return arrayOfInt;
  }
  
  public static void half(int[] paramArrayOfInt1, int[] paramArrayOfInt2) {
    if ((paramArrayOfInt1[0] & true) == 0) {
      Nat.shiftDownBit(6, paramArrayOfInt1, 0, paramArrayOfInt2);
    } else {
      int i = Nat192.add(paramArrayOfInt1, P, paramArrayOfInt2);
      Nat.shiftDownBit(6, paramArrayOfInt2, i);
    } 
  }
  
  public static void inv(int[] paramArrayOfInt1, int[] paramArrayOfInt2) { Mod.checkedModOddInverse(P, paramArrayOfInt1, paramArrayOfInt2); }
  
  public static int isZero(int[] paramArrayOfInt) {
    int i = 0;
    for (byte b = 0; b < 6; b++)
      i |= paramArrayOfInt[b]; 
    i = i >>> 1 | i & true;
    return i - 1 >> 31;
  }
  
  public static void multiply(int[] paramArrayOfInt1, int[] paramArrayOfInt2, int[] paramArrayOfInt3) {
    int[] arrayOfInt = Nat192.createExt();
    Nat192.mul(paramArrayOfInt1, paramArrayOfInt2, arrayOfInt);
    reduce(arrayOfInt, paramArrayOfInt3);
  }
  
  public static void multiplyAddToExt(int[] paramArrayOfInt1, int[] paramArrayOfInt2, int[] paramArrayOfInt3) {
    int i = Nat192.mulAddTo(paramArrayOfInt1, paramArrayOfInt2, paramArrayOfInt3);
    if (i != 0 || (paramArrayOfInt3[11] == -1 && Nat.gte(12, paramArrayOfInt3, PExt)))
      if (Nat.addTo(PExtInv.length, PExtInv, paramArrayOfInt3) != 0)
        Nat.incAt(12, paramArrayOfInt3, PExtInv.length);  
  }
  
  public static void negate(int[] paramArrayOfInt1, int[] paramArrayOfInt2) {
    if (0 != isZero(paramArrayOfInt1)) {
      Nat192.sub(P, P, paramArrayOfInt2);
    } else {
      Nat192.sub(P, paramArrayOfInt1, paramArrayOfInt2);
    } 
  }
  
  public static void random(SecureRandom paramSecureRandom, int[] paramArrayOfInt) {
    byte[] arrayOfByte = new byte[24];
    do {
      paramSecureRandom.nextBytes(arrayOfByte);
      Pack.littleEndianToInt(arrayOfByte, 0, paramArrayOfInt, 0, 6);
    } while (0 == Nat.lessThan(6, paramArrayOfInt, P));
  }
  
  public static void randomMult(SecureRandom paramSecureRandom, int[] paramArrayOfInt) {
    do {
      random(paramSecureRandom, paramArrayOfInt);
    } while (0 != isZero(paramArrayOfInt));
  }
  
  public static void reduce(int[] paramArrayOfInt1, int[] paramArrayOfInt2) {
    long l = Nat192.mul33Add(4553, paramArrayOfInt1, 6, paramArrayOfInt1, 0, paramArrayOfInt2, 0);
    int i = Nat192.mul33DWordAdd(4553, l, paramArrayOfInt2, 0);
    if (i != 0 || (paramArrayOfInt2[5] == -1 && Nat192.gte(paramArrayOfInt2, P)))
      Nat.add33To(6, 4553, paramArrayOfInt2); 
  }
  
  public static void reduce32(int paramInt, int[] paramArrayOfInt) {
    if ((paramInt != 0 && Nat192.mul33WordAdd(4553, paramInt, paramArrayOfInt, 0) != 0) || (paramArrayOfInt[5] == -1 && 
      Nat192.gte(paramArrayOfInt, P)))
      Nat.add33To(6, 4553, paramArrayOfInt); 
  }
  
  public static void square(int[] paramArrayOfInt1, int[] paramArrayOfInt2) {
    int[] arrayOfInt = Nat192.createExt();
    Nat192.square(paramArrayOfInt1, arrayOfInt);
    reduce(arrayOfInt, paramArrayOfInt2);
  }
  
  public static void squareN(int[] paramArrayOfInt1, int paramInt, int[] paramArrayOfInt2) {
    int[] arrayOfInt = Nat192.createExt();
    Nat192.square(paramArrayOfInt1, arrayOfInt);
    reduce(arrayOfInt, paramArrayOfInt2);
    while (--paramInt > 0) {
      Nat192.square(paramArrayOfInt2, arrayOfInt);
      reduce(arrayOfInt, paramArrayOfInt2);
    } 
  }
  
  public static void subtract(int[] paramArrayOfInt1, int[] paramArrayOfInt2, int[] paramArrayOfInt3) {
    int i = Nat192.sub(paramArrayOfInt1, paramArrayOfInt2, paramArrayOfInt3);
    if (i != 0)
      Nat.sub33From(6, 4553, paramArrayOfInt3); 
  }
  
  public static void subtractExt(int[] paramArrayOfInt1, int[] paramArrayOfInt2, int[] paramArrayOfInt3) {
    int i = Nat.sub(12, paramArrayOfInt1, paramArrayOfInt2, paramArrayOfInt3);
    if (i != 0)
      if (Nat.subFrom(PExtInv.length, PExtInv, paramArrayOfInt3) != 0)
        Nat.decAt(12, paramArrayOfInt3, PExtInv.length);  
  }
  
  public static void twice(int[] paramArrayOfInt1, int[] paramArrayOfInt2) {
    int i = Nat.shiftUpBit(6, paramArrayOfInt1, 0, paramArrayOfInt2);
    if (i != 0 || (paramArrayOfInt2[5] == -1 && Nat192.gte(paramArrayOfInt2, P)))
      Nat.add33To(6, 4553, paramArrayOfInt2); 
  }
}
