package META-INF.versions.9.org.bouncycastle.math.ec.custom.djb;

import java.math.BigInteger;
import java.security.SecureRandom;
import org.bouncycastle.math.ec.custom.djb.Curve25519Field;
import org.bouncycastle.math.raw.Mod;
import org.bouncycastle.math.raw.Nat;
import org.bouncycastle.math.raw.Nat256;
import org.bouncycastle.util.Pack;

public class Curve25519Field {
  private static final long M = 4294967295L;
  
  static final int[] P = { -19, -1, -1, -1, -1, -1, -1, Integer.MAX_VALUE };
  
  private static final int P7 = 2147483647;
  
  private static final int[] PExt = { 
      361, 0, 0, 0, 0, 0, 0, 0, -19, -1, 
      -1, -1, -1, -1, -1, 1073741823 };
  
  private static final int PInv = 19;
  
  public static void add(int[] paramArrayOfInt1, int[] paramArrayOfInt2, int[] paramArrayOfInt3) {
    Nat256.add(paramArrayOfInt1, paramArrayOfInt2, paramArrayOfInt3);
    if (Nat256.gte(paramArrayOfInt3, P))
      subPFrom(paramArrayOfInt3); 
  }
  
  public static void addExt(int[] paramArrayOfInt1, int[] paramArrayOfInt2, int[] paramArrayOfInt3) {
    Nat.add(16, paramArrayOfInt1, paramArrayOfInt2, paramArrayOfInt3);
    if (Nat.gte(16, paramArrayOfInt3, PExt))
      subPExtFrom(paramArrayOfInt3); 
  }
  
  public static void addOne(int[] paramArrayOfInt1, int[] paramArrayOfInt2) {
    Nat.inc(8, paramArrayOfInt1, paramArrayOfInt2);
    if (Nat256.gte(paramArrayOfInt2, P))
      subPFrom(paramArrayOfInt2); 
  }
  
  public static int[] fromBigInteger(BigInteger paramBigInteger) {
    int[] arrayOfInt = Nat256.fromBigInteger(paramBigInteger);
    while (Nat256.gte(arrayOfInt, P))
      Nat256.subFrom(P, arrayOfInt); 
    return arrayOfInt;
  }
  
  public static void half(int[] paramArrayOfInt1, int[] paramArrayOfInt2) {
    if ((paramArrayOfInt1[0] & true) == 0) {
      Nat.shiftDownBit(8, paramArrayOfInt1, 0, paramArrayOfInt2);
    } else {
      Nat256.add(paramArrayOfInt1, P, paramArrayOfInt2);
      Nat.shiftDownBit(8, paramArrayOfInt2, 0);
    } 
  }
  
  public static void inv(int[] paramArrayOfInt1, int[] paramArrayOfInt2) { Mod.checkedModOddInverse(P, paramArrayOfInt1, paramArrayOfInt2); }
  
  public static int isZero(int[] paramArrayOfInt) {
    int i = 0;
    for (byte b = 0; b < 8; b++)
      i |= paramArrayOfInt[b]; 
    i = i >>> 1 | i & true;
    return i - 1 >> 31;
  }
  
  public static void multiply(int[] paramArrayOfInt1, int[] paramArrayOfInt2, int[] paramArrayOfInt3) {
    int[] arrayOfInt = Nat256.createExt();
    Nat256.mul(paramArrayOfInt1, paramArrayOfInt2, arrayOfInt);
    reduce(arrayOfInt, paramArrayOfInt3);
  }
  
  public static void multiplyAddToExt(int[] paramArrayOfInt1, int[] paramArrayOfInt2, int[] paramArrayOfInt3) {
    Nat256.mulAddTo(paramArrayOfInt1, paramArrayOfInt2, paramArrayOfInt3);
    if (Nat.gte(16, paramArrayOfInt3, PExt))
      subPExtFrom(paramArrayOfInt3); 
  }
  
  public static void negate(int[] paramArrayOfInt1, int[] paramArrayOfInt2) {
    if (0 != isZero(paramArrayOfInt1)) {
      Nat256.sub(P, P, paramArrayOfInt2);
    } else {
      Nat256.sub(P, paramArrayOfInt1, paramArrayOfInt2);
    } 
  }
  
  public static void random(SecureRandom paramSecureRandom, int[] paramArrayOfInt) {
    byte[] arrayOfByte = new byte[32];
    do {
      paramSecureRandom.nextBytes(arrayOfByte);
      Pack.littleEndianToInt(arrayOfByte, 0, paramArrayOfInt, 0, 8);
      paramArrayOfInt[7] = paramArrayOfInt[7] & 0x7FFFFFFF;
    } while (0 == Nat.lessThan(8, paramArrayOfInt, P));
  }
  
  public static void randomMult(SecureRandom paramSecureRandom, int[] paramArrayOfInt) {
    do {
      random(paramSecureRandom, paramArrayOfInt);
    } while (0 != isZero(paramArrayOfInt));
  }
  
  public static void reduce(int[] paramArrayOfInt1, int[] paramArrayOfInt2) {
    int i = paramArrayOfInt1[7];
    Nat.shiftUpBit(8, paramArrayOfInt1, 8, i, paramArrayOfInt2, 0);
    int j = Nat256.mulByWordAddTo(19, paramArrayOfInt1, paramArrayOfInt2) << 1;
    int k = paramArrayOfInt2[7];
    j += (k >>> 31) - (i >>> 31);
    k &= Integer.MAX_VALUE;
    k += Nat.addWordTo(7, j * 19, paramArrayOfInt2);
    paramArrayOfInt2[7] = k;
    if (Nat256.gte(paramArrayOfInt2, P))
      subPFrom(paramArrayOfInt2); 
  }
  
  public static void reduce27(int paramInt, int[] paramArrayOfInt) {
    int i = paramArrayOfInt[7];
    int j = paramInt << 1 | i >>> 31;
    i &= Integer.MAX_VALUE;
    i += Nat.addWordTo(7, j * 19, paramArrayOfInt);
    paramArrayOfInt[7] = i;
    if (Nat256.gte(paramArrayOfInt, P))
      subPFrom(paramArrayOfInt); 
  }
  
  public static void square(int[] paramArrayOfInt1, int[] paramArrayOfInt2) {
    int[] arrayOfInt = Nat256.createExt();
    Nat256.square(paramArrayOfInt1, arrayOfInt);
    reduce(arrayOfInt, paramArrayOfInt2);
  }
  
  public static void squareN(int[] paramArrayOfInt1, int paramInt, int[] paramArrayOfInt2) {
    int[] arrayOfInt = Nat256.createExt();
    Nat256.square(paramArrayOfInt1, arrayOfInt);
    reduce(arrayOfInt, paramArrayOfInt2);
    while (--paramInt > 0) {
      Nat256.square(paramArrayOfInt2, arrayOfInt);
      reduce(arrayOfInt, paramArrayOfInt2);
    } 
  }
  
  public static void subtract(int[] paramArrayOfInt1, int[] paramArrayOfInt2, int[] paramArrayOfInt3) {
    int i = Nat256.sub(paramArrayOfInt1, paramArrayOfInt2, paramArrayOfInt3);
    if (i != 0)
      addPTo(paramArrayOfInt3); 
  }
  
  public static void subtractExt(int[] paramArrayOfInt1, int[] paramArrayOfInt2, int[] paramArrayOfInt3) {
    int i = Nat.sub(16, paramArrayOfInt1, paramArrayOfInt2, paramArrayOfInt3);
    if (i != 0)
      addPExtTo(paramArrayOfInt3); 
  }
  
  public static void twice(int[] paramArrayOfInt1, int[] paramArrayOfInt2) {
    Nat.shiftUpBit(8, paramArrayOfInt1, 0, paramArrayOfInt2);
    if (Nat256.gte(paramArrayOfInt2, P))
      subPFrom(paramArrayOfInt2); 
  }
  
  private static int addPTo(int[] paramArrayOfInt) {
    long l = (paramArrayOfInt[0] & 0xFFFFFFFFL) - 19L;
    paramArrayOfInt[0] = (int)l;
    l >>= 32;
    if (l != 0L)
      l = Nat.decAt(7, paramArrayOfInt, 1); 
    l += (paramArrayOfInt[7] & 0xFFFFFFFFL) + 2147483648L;
    paramArrayOfInt[7] = (int)l;
    l >>= 32;
    return (int)l;
  }
  
  private static int addPExtTo(int[] paramArrayOfInt) {
    long l = (paramArrayOfInt[0] & 0xFFFFFFFFL) + (PExt[0] & 0xFFFFFFFFL);
    paramArrayOfInt[0] = (int)l;
    l >>= 32;
    if (l != 0L)
      l = Nat.incAt(8, paramArrayOfInt, 1); 
    l += (paramArrayOfInt[8] & 0xFFFFFFFFL) - 19L;
    paramArrayOfInt[8] = (int)l;
    l >>= 32;
    if (l != 0L)
      l = Nat.decAt(15, paramArrayOfInt, 9); 
    l += (paramArrayOfInt[15] & 0xFFFFFFFFL) + ((PExt[15] + 1) & 0xFFFFFFFFL);
    paramArrayOfInt[15] = (int)l;
    l >>= 32;
    return (int)l;
  }
  
  private static int subPFrom(int[] paramArrayOfInt) {
    long l = (paramArrayOfInt[0] & 0xFFFFFFFFL) + 19L;
    paramArrayOfInt[0] = (int)l;
    l >>= 32;
    if (l != 0L)
      l = Nat.incAt(7, paramArrayOfInt, 1); 
    l += (paramArrayOfInt[7] & 0xFFFFFFFFL) - 2147483648L;
    paramArrayOfInt[7] = (int)l;
    l >>= 32;
    return (int)l;
  }
  
  private static int subPExtFrom(int[] paramArrayOfInt) {
    long l = (paramArrayOfInt[0] & 0xFFFFFFFFL) - (PExt[0] & 0xFFFFFFFFL);
    paramArrayOfInt[0] = (int)l;
    l >>= 32;
    if (l != 0L)
      l = Nat.decAt(8, paramArrayOfInt, 1); 
    l += (paramArrayOfInt[8] & 0xFFFFFFFFL) + 19L;
    paramArrayOfInt[8] = (int)l;
    l >>= 32;
    if (l != 0L)
      l = Nat.incAt(15, paramArrayOfInt, 9); 
    l += (paramArrayOfInt[15] & 0xFFFFFFFFL) - ((PExt[15] + 1) & 0xFFFFFFFFL);
    paramArrayOfInt[15] = (int)l;
    l >>= 32;
    return (int)l;
  }
}
