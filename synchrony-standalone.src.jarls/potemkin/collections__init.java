package potemkin;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class collections__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Object const__3;
  
  public static final Var const__4;
  
  public static final Var const__5;
  
  public static final Var const__6;
  
  public static final Keyword const__7;
  
  public static final Var const__8;
  
  public static final ISeq const__9;
  
  public static final Var const__10;
  
  public static final Var const__11;
  
  public static final AFn const__15;
  
  public static final Keyword const__16;
  
  public static final AFn const__17;
  
  public static final Keyword const__18;
  
  public static final Keyword const__19;
  
  public static final AFn const__27;
  
  public static final Keyword const__28;
  
  public static final Var const__29;
  
  public static final Var const__30;
  
  public static final Var const__31;
  
  public static final AFn const__32;
  
  public static final AFn const__33;
  
  public static final Keyword const__34;
  
  public static final AFn const__35;
  
  public static final AFn const__36;
  
  public static final AFn const__37;
  
  public static final AFn const__38;
  
  public static final AFn const__39;
  
  public static final AFn const__40;
  
  public static final AFn const__41;
  
  public static final AFn const__42;
  
  public static final AFn const__43;
  
  public static final AFn const__44;
  
  public static final AFn const__45;
  
  public static final AFn const__46;
  
  public static final Var const__47;
  
  public static final AFn const__48;
  
  public static final Object const__49;
  
  public static final Var const__50;
  
  public static final ISeq const__51;
  
  public static final AFn const__53;
  
  public static final AFn const__54;
  
  public static final AFn const__57;
  
  public static final AFn const__58;
  
  public static final AFn const__59;
  
  public static final AFn const__60;
  
  public static final AFn const__61;
  
  public static final AFn const__62;
  
  public static final Var const__63;
  
  public static final AFn const__71;
  
  public static final Var const__72;
  
  public static final AFn const__75;
  
  public static final Var const__76;
  
  public static final Var const__77;
  
  public static final Var const__78;
  
  public static final Var const__79;
  
  public static final Var const__80;
  
  public static final AFn const__81;
  
  public static final AFn const__82;
  
  public static final AFn const__83;
  
  public static final AFn const__84;
  
  public static final Var const__85;
  
  public static final Var const__86;
  
  public static final AFn const__87;
  
  public static final AFn const__88;
  
  public static final AFn const__89;
  
  public static final AFn const__91;
  
  public static final AFn const__92;
  
  public static final AFn const__93;
  
  public static final AFn const__94;
  
  public static final AFn const__95;
  
  public static final AFn const__96;
  
  public static final AFn const__97;
  
  public static final Var const__98;
  
  public static final Var const__99;
  
  public static final Object const__100;
  
  public static final Object const__101;
  
  public static final AFn const__102;
  
  public static final AFn const__103;
  
  public static final AFn const__104;
  
  public static final AFn const__105;
  
  public static final AFn const__106;
  
  public static final AFn const__107;
  
  public static final Var const__108;
  
  public static final Var const__114;
  
  public static final AFn const__116;
  
  public static final Object const__117;
  
  public static final Var const__118;
  
  public static final AFn const__121;
  
  public static final Var const__122;
  
  public static final AFn const__125;
  
  public static final Var const__126;
  
  public static final AFn const__129;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new collections.fn__26243());
    const__63.setMeta((IPersistentMap)const__71);
    const__63.bindRoot(new collections.throw_arity());
    const__72.setMeta((IPersistentMap)const__75);
    const__72.bindRoot(new collections.compile_if());
    ((Var)const__72)







      
      .setMacro();
    const__114.setMeta((IPersistentMap)const__116);
    const__114.bindRoot(const__117);
    const__118.setMeta((IPersistentMap)const__121);
    const__118.bindRoot(new collections.def_map_type());
    ((Var)const__118)
















































































































































































      
      .setMacro();
    const__122.setMeta((IPersistentMap)const__125);
    const__122.bindRoot(new collections.reify_map_type());
    ((Var)const__122)





























      
      .setMacro();
    const__126.setMeta((IPersistentMap)const__129);
    const__126.bindRoot(new collections.def_derived_map());
    ((Var)const__126)




























      
      .setMacro();
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "potemkin.collections");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = RT.classForName("potemkin.collections.PotemkinMap");
    const__4 = (Var)RT.var("clojure.core", "alter-meta!");
    const__5 = (Var)RT.var("potemkin.collections", "PotemkinMap");
    const__6 = (Var)RT.var("clojure.core", "assoc");
    const__7 = (Keyword)RT.keyword(null, "doc");
    const__8 = (Var)RT.var("clojure.core", "assert-same-protocol");
    const__9 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "empty*")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m")) })) })), ((IObj)Symbol.intern(null, "get*")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "k"), Symbol.intern(null, "default")) })) })), ((IObj)Symbol.intern(null, "assoc*")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "k"), Symbol.intern(null, "v")) })) })), ((IObj)Symbol.intern(null, "dissoc*")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "k")) })) })), ((IObj)Symbol.intern(null, "keys*")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m")) })) })), ((IObj)Symbol.intern(null, "with-meta*")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "o"), Symbol.intern(null, "mta")) })) })), ((IObj)Symbol.intern(null, "meta*")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "o")) })) })) }));
    const__10 = (Var)RT.var("clojure.core", "alter-var-root");
    const__11 = (Var)RT.var("clojure.core", "merge");
    const__15 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "potemkin.collections.PotemkinMap"), RT.keyword(null, "on-interface"), RT.classForName("potemkin.collections.PotemkinMap") });
    const__16 = (Keyword)RT.keyword(null, "sigs");
    const__17 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "empty*"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "empty*")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m")) })), RT.keyword(null, "doc"), null }), RT.keyword(null, "get*"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "get*")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "k"), Symbol.intern(null, "default")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "k"), Symbol.intern(null, "default")) })), RT.keyword(null, "doc"), null }), RT.keyword(null, "assoc*"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "assoc*")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "k"), Symbol.intern(null, "v")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "k"), Symbol.intern(null, "v")) })), RT.keyword(null, "doc"), null }), RT.keyword(null, "dissoc*"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "dissoc*")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "k")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "k")) })), RT.keyword(null, "doc"), null }), RT.keyword(null, "keys*"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "keys*")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m")) })), RT.keyword(null, "doc"), null }), 
          RT.keyword(null, "with-meta*"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "with-meta*")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "o"), Symbol.intern(null, "mta")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "o"), Symbol.intern(null, "mta")) })), RT.keyword(null, "doc"), null }), RT.keyword(null, "meta*"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "meta*")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "o")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "o")) })), RT.keyword(null, "doc"), null }) });
    const__18 = (Keyword)RT.keyword(null, "var");
    const__19 = (Keyword)RT.keyword(null, "method-map");
    const__27 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "with-meta*"), RT.keyword(null, "with-meta*"), RT.keyword(null, "empty*"), RT.keyword(null, "empty*"), RT.keyword(null, "meta*"), RT.keyword(null, "meta*"), RT.keyword(null, "dissoc*"), RT.keyword(null, "dissoc*"), RT.keyword(null, "assoc*"), RT.keyword(null, "assoc*"), 
          RT.keyword(null, "keys*"), RT.keyword(null, "keys*"), RT.keyword(null, "get*"), RT.keyword(null, "get*") });
    const__28 = (Keyword)RT.keyword(null, "method-builders");
    const__29 = (Var)RT.var("clojure.core", "intern");
    const__30 = (Var)RT.var("clojure.core", "*ns*");
    const__31 = (Var)RT.var("clojure.core", "with-meta");
    const__32 = (AFn)((IObj)Symbol.intern(null, "dissoc*")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "k")) })) }));
    const__33 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "dissoc*")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "k")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "k")) })), RT.keyword(null, "doc"), null });
    const__34 = (Keyword)RT.keyword(null, "protocol");
    const__35 = (AFn)((IObj)Symbol.intern(null, "with-meta*")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "o"), Symbol.intern(null, "mta")) })) }));
    const__36 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "with-meta*")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "o"), Symbol.intern(null, "mta")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "o"), Symbol.intern(null, "mta")) })), RT.keyword(null, "doc"), null });
    const__37 = (AFn)((IObj)Symbol.intern(null, "empty*")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m")) })) }));
    const__38 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "empty*")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m")) })), RT.keyword(null, "doc"), null });
    const__39 = (AFn)((IObj)Symbol.intern(null, "get*")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "k"), Symbol.intern(null, "default")) })) }));
    const__40 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "get*")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "k"), Symbol.intern(null, "default")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "k"), Symbol.intern(null, "default")) })), RT.keyword(null, "doc"), null });
    const__41 = (AFn)((IObj)Symbol.intern(null, "keys*")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m")) })) }));
    const__42 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "keys*")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m")) })), RT.keyword(null, "doc"), null });
    const__43 = (AFn)((IObj)Symbol.intern(null, "meta*")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "o")) })) }));
    const__44 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "meta*")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "o")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "o")) })), RT.keyword(null, "doc"), null });
    const__45 = (AFn)((IObj)Symbol.intern(null, "assoc*")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "k"), Symbol.intern(null, "v")) })) }));
    const__46 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "assoc*")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "k"), Symbol.intern(null, "v")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "k"), Symbol.intern(null, "v")) })), RT.keyword(null, "doc"), null });
    const__47 = (Var)RT.var("clojure.core", "-reset-methods");
    const__48 = (AFn)Symbol.intern(null, "PotemkinMap");
    const__49 = RT.classForName("potemkin.collections.PotemkinMeta");
    const__50 = (Var)RT.var("potemkin.collections", "PotemkinMeta");
    const__51 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "meta-atom")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })) })), ((IObj)Symbol.intern(null, "with-meta-atom")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "x")) })) })) }));
    const__53 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "potemkin.collections.PotemkinMeta"), RT.keyword(null, "on-interface"), RT.classForName("potemkin.collections.PotemkinMeta") });
    const__54 = (AFn)RT.map(new Object[] { RT.keyword(null, "meta-atom"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "meta-atom")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })), RT.keyword(null, "doc"), null }), RT.keyword(null, "with-meta-atom"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "with-meta-atom")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "x")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "x")) })), RT.keyword(null, "doc"), null }) });
    const__57 = (AFn)RT.map(new Object[] { RT.keyword(null, "with-meta-atom"), RT.keyword(null, "with-meta-atom"), RT.keyword(null, "meta-atom"), RT.keyword(null, "meta-atom") });
    const__58 = (AFn)((IObj)Symbol.intern(null, "meta-atom")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })) }));
    const__59 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "meta-atom")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })), RT.keyword(null, "doc"), null });
    const__60 = (AFn)((IObj)Symbol.intern(null, "with-meta-atom")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "x")) })) }));
    const__61 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "with-meta-atom")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "x")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "x")) })), RT.keyword(null, "doc"), null });
    const__62 = (AFn)Symbol.intern(null, "PotemkinMeta");
    const__63 = (Var)RT.var("potemkin.collections", "throw-arity");
    const__71 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "actual")) })), RT.keyword(null, "line"), Integer.valueOf(18), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "potemkin/collections.clj" });
    const__72 = (Var)RT.var("potemkin.collections", "compile-if");
    const__75 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "test"), Symbol.intern(null, "then"), Symbol.intern(null, "else")) })), RT.keyword(null, "line"), Integer.valueOf(23), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "potemkin/collections.clj" });
    const__76 = (Var)RT.var("clojure.core", "eval");
    const__77 = (Var)RT.var("potemkin.macros", "unify-gensyms");
    const__78 = (Var)RT.var("clojure.core", "seq");
    const__79 = (Var)RT.var("clojure.core", "concat");
    const__80 = (Var)RT.var("clojure.core", "list");
    const__81 = (AFn)Symbol.intern("potemkin.types", "def-abstract-type");
    const__82 = (AFn)Symbol.intern("potemkin.collections", "PotemkinFn");
    const__83 = (AFn)Symbol.intern(null, "java.util.concurrent.Callable");
    const__84 = (AFn)Symbol.intern("potemkin.collections", "call");
    const__85 = (Var)RT.var("clojure.core", "apply");
    const__86 = (Var)RT.var("clojure.core", "vector");
    const__87 = (AFn)Symbol.intern(null, "this#__26389__auto__");
    const__88 = (AFn)Symbol.intern(null, ".invoke");
    const__89 = (AFn)Symbol.intern(null, "this#__26384__auto__");
    const__91 = (AFn)RT.map(new Object[] { RT.keyword(null, "tag"), "clojure.lang.IFn" });
    const__92 = (AFn)Symbol.intern(null, "java.lang.Runnable");
    const__93 = (AFn)Symbol.intern("potemkin.collections", "run");
    const__94 = (AFn)Symbol.intern(null, ".invoke");
    const__95 = (AFn)Symbol.intern(null, "this#__26385__auto__");
    const__96 = (AFn)RT.map(new Object[] { RT.keyword(null, "tag"), "clojure.lang.IFn" });
    const__97 = (AFn)Symbol.intern(null, "clojure.lang.IFn");
    const__98 = (Var)RT.var("clojure.core", "map");
    const__99 = (Var)RT.var("clojure.core", "range");
  }
  
  public static void __init1() {
    const__100 = Long.valueOf(0L);
    const__101 = Long.valueOf(21L);
    const__102 = (AFn)Symbol.intern("potemkin.collections", "applyTo");
    const__103 = (AFn)Symbol.intern(null, "args#__26390__auto__");
    const__104 = (AFn)Symbol.intern("clojure.core", "let");
    const__105 = (AFn)Symbol.intern(null, "cnt__26391__auto__");
    const__106 = (AFn)Symbol.intern("clojure.core", "count");
    const__107 = (AFn)Symbol.intern("clojure.core", "case");
    const__108 = (Var)RT.var("clojure.core", "mapcat");
    const__114 = (Var)RT.var("potemkin.collections", "AbstractMap");
    const__116 = (AFn)RT.map(new Object[] { RT.keyword(null, "tag"), RT.keyword("potemkin", "abstract-type"), RT.keyword(null, "line"), Integer.valueOf(56), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "potemkin/collections.clj" });
    const__117 = PersistentList.create(Arrays.asList(new Object[] { 
            Symbol.intern("clojure.core", "deftype"), Symbol.intern(null, "AbstractMap"), Tuple.create(), Symbol.intern(null, "potemkin.collections.PotemkinMap"), Symbol.intern(null, "clojure.lang.MapEquivalence"), Symbol.intern(null, "clojure.lang.IPersistentCollection"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "equiv"), Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "x")), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "and"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "or"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "instance?"), Symbol.intern(null, "java.util.Map"), Symbol.intern(null, "x") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(65), RT.keyword(null, "column"), Integer.valueOf(14) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "map?"), Symbol.intern(null, "x") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(65), RT.keyword(null, "column"), Integer.valueOf(42) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(65), RT.keyword(null, "column"), Integer.valueOf(10) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "="), Symbol.intern(null, "x"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "into"), RT.map(new Object[0]), Symbol.intern(null, "this") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(66), RT.keyword(null, "column"), Integer.valueOf(15) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(66), RT.keyword(null, "column"), Integer.valueOf(10) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(65), RT.keyword(null, "column"), Integer.valueOf(5) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(64), RT.keyword(null, "column"), Integer.valueOf(3) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "cons"), Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "o")), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "cond"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "map?"), Symbol.intern(null, "o") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(70), RT.keyword(null, "column"), Integer.valueOf(7) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "reduce"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "fn*"), Tuple.create(Symbol.intern(null, "p1__26400#"), Symbol.intern(null, "p2__26401#")), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "apply"), Symbol.intern(null, "assoc"), Symbol.intern(null, "p1__26400#"), Symbol.intern(null, "p2__26401#") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(71), RT.keyword(null, "column"), Integer.valueOf(16) })) })), Symbol.intern(null, "this"), Symbol.intern(null, "o") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(71), RT.keyword(null, "column"), Integer.valueOf(7) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "instance?"), Symbol.intern(null, "java.util.Map"), Symbol.intern(null, "o") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(73), RT.keyword(null, "column"), Integer.valueOf(7) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "reduce"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "fn*"), Tuple.create(Symbol.intern(null, "p1__26402#"), Symbol.intern(null, "p2__26403#")), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "apply"), Symbol.intern(null, "assoc"), Symbol.intern(null, "p1__26402#"), Symbol.intern(null, "p2__26403#") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(74), RT.keyword(null, "column"), Integer.valueOf(16) })) })), Symbol.intern(null, "this"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "into"), RT.map(new Object[0]), Symbol.intern(null, "o") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(74), RT.keyword(null, "column"), Integer.valueOf(41) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(74), RT.keyword(null, "column"), Integer.valueOf(7) })), RT.keyword(null, "else"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "if-let"), Tuple.create(Tuple.create(Symbol.intern(null, "k"), Symbol.intern(null, "v")), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "seq"), Symbol.intern(null, "o") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(77), RT.keyword(null, "column"), Integer.valueOf(22) }))), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "assoc"), Symbol.intern(null, "this"), Symbol.intern(null, "k"), Symbol.intern(null, "v") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(78), RT.keyword(null, "column"), Integer.valueOf(9) })), Symbol.intern(null, "this") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(77), RT.keyword(null, "column"), Integer.valueOf(7) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(69), RT.keyword(null, "column"), Integer.valueOf(5) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(68), RT.keyword(null, "column"), Integer.valueOf(3) })), Symbol.intern(null, "clojure.lang.IObj"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "withMeta"), Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "mta")), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("potemkin.collections", "with-meta*"), Symbol.intern(null, "this"), Symbol.intern(null, "mta") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(83), RT.keyword(null, "column"), Integer.valueOf(5) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(82), RT.keyword(null, "column"), Integer.valueOf(3) })), 
            ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "meta"), Tuple.create(Symbol.intern(null, "this")), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("potemkin.collections", "meta*"), Symbol.intern(null, "this") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(85), RT.keyword(null, "column"), Integer.valueOf(5) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(84), RT.keyword(null, "column"), Integer.valueOf(3) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "meta*"), Tuple.create(Symbol.intern(null, "this")), null }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(86), RT.keyword(null, "column"), Integer.valueOf(3) })), Symbol.intern(null, "clojure.lang.Counted"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "count"), Tuple.create(Symbol.intern(null, "this")), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "count"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("potemkin.collections", "keys*"), Symbol.intern(null, "this") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(92), RT.keyword(null, "column"), Integer.valueOf(12) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(92), RT.keyword(null, "column"), Integer.valueOf(5) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(91), RT.keyword(null, "column"), Integer.valueOf(3) })), Symbol.intern(null, "clojure.lang.Seqable"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "seq"), Tuple.create(Symbol.intern(null, "this")), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "seq"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "map"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "fn*"), Tuple.create(Symbol.intern(null, "p1__26404#")), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "potemkin.PersistentMapProxy$MapEntry."), Symbol.intern(null, "this"), Symbol.intern(null, "p1__26404#") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(98), RT.keyword(null, "column"), Integer.valueOf(10) })) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("potemkin.collections", "keys*"), Symbol.intern(null, "this") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(99), RT.keyword(null, "column"), Integer.valueOf(9) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(97), RT.keyword(null, "column"), Integer.valueOf(7) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(96), RT.keyword(null, "column"), Integer.valueOf(5) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(95), RT.keyword(null, "column"), Integer.valueOf(3) })), ((IObj)Symbol.intern(null, "clojure.core.protocols.CollReduce")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "min-version"), "1.4.0" })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "coll-reduce"), Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "f")), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "reduce"), Symbol.intern(null, "f"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "seq"), Symbol.intern(null, "this") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(107), RT.keyword(null, "column"), Integer.valueOf(15) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(107), RT.keyword(null, "column"), Integer.valueOf(5) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(104), RT.keyword(null, "column"), Integer.valueOf(3), RT.keyword(null, "min-version"), "1.4.0" })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "coll-reduce"), Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "f"), Symbol.intern(null, "val#")), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "reduce"), Symbol.intern(null, "f"), Symbol.intern(null, "val#"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "seq"), Symbol.intern(null, "this") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(112), RT.keyword(null, "column"), Integer.valueOf(20) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(112), RT.keyword(null, "column"), Integer.valueOf(5) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(109), RT.keyword(null, "column"), Integer.valueOf(3), RT.keyword(null, "min-version"), "1.4.0" })), Symbol.intern(null, "clojure.lang.IHashEq"), 
            ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "hasheq"), Tuple.create(Symbol.intern(null, "this")), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("potemkin.collections", "compile-if"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "resolve"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "quote"), Symbol.intern("clojure.core", "hash-unordered-coll") })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(116), RT.keyword(null, "column"), Integer.valueOf(38) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "hash-unordered-coll"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "or"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "seq"), Symbol.intern(null, "this") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(117), RT.keyword(null, "column"), Integer.valueOf(32) })), PersistentList.create(Arrays.asList(new Object[0])) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(117), RT.keyword(null, "column"), Integer.valueOf(28) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(117), RT.keyword(null, "column"), Integer.valueOf(7) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "reduce"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "fn"), Tuple.create(Symbol.intern(null, "acc"), Tuple.create(Symbol.intern(null, "k"), Symbol.intern(null, "v"))), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "unchecked-add"), Symbol.intern(null, "acc"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "bit-xor"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "hash"), Symbol.intern(null, "k") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(120), RT.keyword(null, "column"), Integer.valueOf(39) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "hash"), Symbol.intern(null, "v") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(120), RT.keyword(null, "column"), Integer.valueOf(48) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(120), RT.keyword(null, "column"), Integer.valueOf(30) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(120), RT.keyword(null, "column"), Integer.valueOf(11) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(119), RT.keyword(null, "column"), Integer.valueOf(9) })), Long.valueOf(0L), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "seq"), Symbol.intern(null, "this") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(122), RT.keyword(null, "column"), Integer.valueOf(9) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(118), RT.keyword(null, "column"), Integer.valueOf(7) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(116), RT.keyword(null, "column"), Integer.valueOf(5) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(115), RT.keyword(null, "column"), Integer.valueOf(3) })), Symbol.intern(null, "Object"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "hashCode"), Tuple.create(Symbol.intern(null, "this")), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "reduce"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "fn"), Tuple.create(Symbol.intern(null, "acc"), Tuple.create(Symbol.intern(null, "k"), Symbol.intern(null, "v"))), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "unchecked-add"), Symbol.intern(null, "acc"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "bit-xor"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.lang.Util", "hash"), Symbol.intern(null, "k") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(128), RT.keyword(null, "column"), Integer.valueOf(37) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.lang.Util", "hash"), Symbol.intern(null, "v") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(129), RT.keyword(null, "column"), Integer.valueOf(37) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(128), RT.keyword(null, "column"), Integer.valueOf(28) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(128), RT.keyword(null, "column"), Integer.valueOf(9) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(127), RT.keyword(null, "column"), Integer.valueOf(7) })), Long.valueOf(0L), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "seq"), Symbol.intern(null, "this") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(131), RT.keyword(null, "column"), Integer.valueOf(7) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(126), RT.keyword(null, "column"), Integer.valueOf(5) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(125), RT.keyword(null, "column"), Integer.valueOf(3) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "equals"), Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "x")), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "or"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "identical?"), Symbol.intern(null, "this"), Symbol.intern(null, "x") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(134), RT.keyword(null, "column"), Integer.valueOf(9) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "and"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "or"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "instance?"), Symbol.intern(null, "java.util.Map"), Symbol.intern(null, "x") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(136), RT.keyword(null, "column"), Integer.valueOf(13) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "map?"), Symbol.intern(null, "x") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(136), RT.keyword(null, "column"), Integer.valueOf(41) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(136), RT.keyword(null, "column"), Integer.valueOf(9) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "="), Symbol.intern(null, "x"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "into"), RT.map(new Object[0]), Symbol.intern(null, "this") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(137), RT.keyword(null, "column"), Integer.valueOf(14) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(137), RT.keyword(null, "column"), Integer.valueOf(9) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(135), RT.keyword(null, "column"), Integer.valueOf(7) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(134), RT.keyword(null, "column"), Integer.valueOf(5) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(133), RT.keyword(null, "column"), Integer.valueOf(3) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "toString"), Tuple.create(Symbol.intern(null, "this")), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "str"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "into"), RT.map(new Object[0]), Symbol.intern(null, "this") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(140), RT.keyword(null, "column"), Integer.valueOf(10) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(140), RT.keyword(null, "column"), Integer.valueOf(5) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(139), RT.keyword(null, "column"), Integer.valueOf(3) })), Symbol.intern(null, "clojure.lang.ILookup"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "valAt"), Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "k")), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, ".valAt"), Symbol.intern(null, "this"), Symbol.intern(null, "k"), null }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(144), RT.keyword(null, "column"), Integer.valueOf(5) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(143), RT.keyword(null, "column"), Integer.valueOf(3) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "valAt"), Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "k"), Symbol.intern(null, "default")), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("potemkin.collections", "get*"), Symbol.intern(null, "this"), Symbol.intern(null, "k"), Symbol.intern(null, "default") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(146), RT.keyword(null, "column"), Integer.valueOf(5) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(145), RT.keyword(null, "column"), Integer.valueOf(3) })), Symbol.intern(null, "clojure.lang.Associative"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "containsKey"), Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "k")), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "contains?"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, ".keySet"), Symbol.intern(null, "this") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(150), RT.keyword(null, "column"), Integer.valueOf(16) })), Symbol.intern(null, "k") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(150), RT.keyword(null, "column"), Integer.valueOf(5) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(149), RT.keyword(null, "column"), Integer.valueOf(3) })), 
            ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "entryAt"), Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "k")), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "when"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "contains?"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, ".keySet"), Symbol.intern(null, "this") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(153), RT.keyword(null, "column"), Integer.valueOf(22) })), Symbol.intern(null, "k") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(153), RT.keyword(null, "column"), Integer.valueOf(11) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "potemkin.PersistentMapProxy$MapEntry."), Symbol.intern(null, "this"), Symbol.intern(null, "k") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(154), RT.keyword(null, "column"), Integer.valueOf(7) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(153), RT.keyword(null, "column"), Integer.valueOf(5) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(152), RT.keyword(null, "column"), Integer.valueOf(3) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "assoc"), Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "k"), Symbol.intern(null, "v")), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("potemkin.collections", "assoc*"), Symbol.intern(null, "this"), Symbol.intern(null, "k"), Symbol.intern(null, "v") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(157), RT.keyword(null, "column"), Integer.valueOf(5) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(156), RT.keyword(null, "column"), Integer.valueOf(3) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "empty*"), Tuple.create(Symbol.intern(null, "this")), RT.map(new Object[0]) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(159), RT.keyword(null, "column"), Integer.valueOf(3) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "empty"), Tuple.create(Symbol.intern(null, "this")), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("potemkin.collections", "empty*"), Symbol.intern(null, "this") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(163), RT.keyword(null, "column"), Integer.valueOf(5) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(162), RT.keyword(null, "column"), Integer.valueOf(3) })), Symbol.intern(null, "java.util.Map"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "get"), Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "k")), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, ".valAt"), Symbol.intern(null, "this"), Symbol.intern(null, "k") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(167), RT.keyword(null, "column"), Integer.valueOf(5) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(166), RT.keyword(null, "column"), Integer.valueOf(3) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "isEmpty"), Tuple.create(Symbol.intern(null, "this")), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "empty?"), Symbol.intern(null, "this") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(169), RT.keyword(null, "column"), Integer.valueOf(5) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(168), RT.keyword(null, "column"), Integer.valueOf(3) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "size"), Tuple.create(Symbol.intern(null, "this")), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "count"), Symbol.intern(null, "this") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(171), RT.keyword(null, "column"), Integer.valueOf(5) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(170), RT.keyword(null, "column"), Integer.valueOf(3) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "keySet"), Tuple.create(Symbol.intern(null, "this")), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "set"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("potemkin.collections", "keys*"), Symbol.intern(null, "this") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(173), RT.keyword(null, "column"), Integer.valueOf(10) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(173), RT.keyword(null, "column"), Integer.valueOf(5) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(172), RT.keyword(null, "column"), Integer.valueOf(3) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "put"), Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "_"), Symbol.intern(null, "_")), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "throw"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "UnsupportedOperationException.") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(175), RT.keyword(null, "column"), Integer.valueOf(12) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(175), RT.keyword(null, "column"), Integer.valueOf(5) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(174), RT.keyword(null, "column"), Integer.valueOf(3) })), 
            ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "putAll"), Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "_")), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "throw"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "UnsupportedOperationException.") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(177), RT.keyword(null, "column"), Integer.valueOf(12) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(177), RT.keyword(null, "column"), Integer.valueOf(5) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(176), RT.keyword(null, "column"), Integer.valueOf(3) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "clear"), Tuple.create(Symbol.intern(null, "_")), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "throw"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "UnsupportedOperationException.") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(179), RT.keyword(null, "column"), Integer.valueOf(12) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(179), RT.keyword(null, "column"), Integer.valueOf(5) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(178), RT.keyword(null, "column"), Integer.valueOf(3) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "remove"), Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "_")), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "throw"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "UnsupportedOperationException.") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(181), RT.keyword(null, "column"), Integer.valueOf(12) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(181), RT.keyword(null, "column"), Integer.valueOf(5) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(180), RT.keyword(null, "column"), Integer.valueOf(3) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "values"), Tuple.create(Symbol.intern(null, "this")), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "->>"), Symbol.intern(null, "this"), Symbol.intern(null, "seq"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "map"), Symbol.intern(null, "second") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(183), RT.keyword(null, "column"), Integer.valueOf(19) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(183), RT.keyword(null, "column"), Integer.valueOf(5) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(182), RT.keyword(null, "column"), Integer.valueOf(3) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "entrySet"), Tuple.create(Symbol.intern(null, "this")), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "->>"), Symbol.intern(null, "this"), Symbol.intern(null, "seq"), Symbol.intern(null, "set") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(185), RT.keyword(null, "column"), Integer.valueOf(5) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(184), RT.keyword(null, "column"), Integer.valueOf(3) })), Symbol.intern(null, "java.util.Iterator"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "iterator"), Tuple.create(Symbol.intern(null, "this")), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "clojure.lang.SeqIterator."), Symbol.intern(null, "this") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(189), RT.keyword(null, "column"), Integer.valueOf(5) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(188), RT.keyword(null, "column"), Integer.valueOf(3) })), Symbol.intern(null, "clojure.lang.IPersistentMap"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "assocEx"), Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "k"), Symbol.intern(null, "v")), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "if"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "contains?"), Symbol.intern(null, "this"), Symbol.intern(null, "k") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(193), RT.keyword(null, "column"), Integer.valueOf(9) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "throw"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "Exception."), "Key or value already present" }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(194), RT.keyword(null, "column"), Integer.valueOf(14) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(194), RT.keyword(null, "column"), Integer.valueOf(7) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "assoc"), Symbol.intern(null, "this"), Symbol.intern(null, "k"), Symbol.intern(null, "v") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(195), RT.keyword(null, "column"), Integer.valueOf(7) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(193), RT.keyword(null, "column"), Integer.valueOf(5) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(192), RT.keyword(null, "column"), Integer.valueOf(3) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "without"), Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "k")), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("potemkin.collections", "dissoc*"), Symbol.intern(null, "this"), Symbol.intern(null, "k") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(197), RT.keyword(null, "column"), Integer.valueOf(5) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(196), RT.keyword(null, "column"), Integer.valueOf(3) })), 
            Symbol.intern("potemkin.collections", "PotemkinFn"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "invoke"), Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "k")), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("potemkin.collections", "get*"), Symbol.intern(null, "this"), Symbol.intern(null, "k"), null }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(202), RT.keyword(null, "column"), Integer.valueOf(5) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(201), RT.keyword(null, "column"), Integer.valueOf(3) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "invoke"), Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "k"), Symbol.intern(null, "default")), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("potemkin.collections", "get*"), Symbol.intern(null, "this"), Symbol.intern(null, "k"), Symbol.intern(null, "default") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(204), RT.keyword(null, "column"), Integer.valueOf(5) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(203), RT.keyword(null, "column"), Integer.valueOf(3) })) }));
    const__118 = (Var)RT.var("potemkin.collections", "def-map-type");
    const__121 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "name"), Symbol.intern(null, "params"), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "doc"), "Like deftype, but must contain definitions for the following functions:\n\n   (get [this key default-value])\n   (assoc [this key value])\n   (dissoc [this key])\n   (keys [this])\n   (meta [this])\n   (with-meta [this meta])\n\n   All other necessary functions will be defined so that this behaves like a normal\n   Clojure map.  These can be overriden, if desired.", RT.keyword(null, "line"), Integer.valueOf(206), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "potemkin/collections.clj" });
    const__122 = (Var)RT.var("potemkin.collections", "reify-map-type");
    const__125 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "doc"), "Like reify, but must contain definitions for the following functions:\n\n   (get [this key default-value])\n   (assoc [this key value])\n   (dissoc [this key])\n   (keys [this])\n\n   All other necessary functions will be defined so that this behaves like a normal\n   Clojure map.  These can be overriden, if desired.", RT.keyword(null, "line"), Integer.valueOf(237), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "potemkin/collections.clj" });
    const__126 = (Var)RT.var("potemkin.collections", "def-derived-map");
    const__129 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "name"), Symbol.intern(null, "params"), Symbol.intern(null, "&"), RT.map(new Object[] { RT.keyword(null, "as"), Symbol.intern(null, "m") })) })), RT.keyword(null, "doc"), "Allows a map type to be defined where key-value pairs may be derived from fields.\n\n   For instance, if we want to create a map which contains both upper and lower-case\n   versions of a string without immediately instantiating both, we can do this:\n\n   (def-derived-map StringMap [^String s]\n     :lower-case (.toLowerCase s)\n     :upper-case (.toUpperCase s))\n\n   The resulting map will behave correctly if the defined keys are removed, shadowed,\n   etc.\n\n   The above class will automatically create a constructor named '->StringMap'.", RT.keyword(null, "line"), Integer.valueOf(267), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "potemkin/collections.clj" });
  }
  
  static  {
    __init0();
    __init1();
    Compiler.pushNSandLoader(RT.classForName("potemkin.collections__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
