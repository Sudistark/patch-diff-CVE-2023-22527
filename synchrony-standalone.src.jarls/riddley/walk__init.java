package riddley;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class walk__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__12;
  
  public static final Var const__13;
  
  public static final AFn const__17;
  
  public static final Var const__18;
  
  public static final AFn const__21;
  
  public static final Var const__22;
  
  public static final AFn const__25;
  
  public static final Var const__26;
  
  public static final AFn const__29;
  
  public static final Var const__30;
  
  public static final AFn const__33;
  
  public static final Var const__34;
  
  public static final AFn const__37;
  
  public static final Var const__38;
  
  public static final AFn const__41;
  
  public static final Var const__42;
  
  public static final AFn const__45;
  
  public static final Var const__46;
  
  public static final AFn const__49;
  
  public static final Var const__50;
  
  public static final AFn const__53;
  
  public static final Var const__54;
  
  public static final AFn const__57;
  
  public static final Var const__58;
  
  public static final AFn const__61;
  
  public static void load() { LockingTransaction.runInTransaction((Callable)new walk.fn__14643());
    const__3.setMeta((IPersistentMap)const__12);
    const__3.bindRoot(new walk.macroexpand());
    const__13.setMeta((IPersistentMap)const__17);
    const__13.bindRoot(new walk.do_handler());
    const__18.setMeta((IPersistentMap)const__21);
    const__18.bindRoot(new walk.fn_handler());
    const__22.setMeta((IPersistentMap)const__25);
    const__22.bindRoot(new walk.def_handler());
    const__26.setMeta((IPersistentMap)const__29);
    const__26.bindRoot(new walk.let_bindings());
    const__30.setMeta((IPersistentMap)const__33);
    const__30.bindRoot(new walk.reify_handler());
    const__34.setMeta((IPersistentMap)const__37);
    const__34.bindRoot(new walk.deftype_handler());
    const__38.setMeta((IPersistentMap)const__41);
    const__38.bindRoot(new walk.let_handler());
    const__42.setMeta((IPersistentMap)const__45);
    const__42.bindRoot(new walk.case_handler());
    const__46.setMeta((IPersistentMap)const__49);
    const__46.bindRoot(new walk.catch_handler());
    const__50.setMeta((IPersistentMap)const__53);
    const__50.bindRoot(new walk.dot_handler());
    const__54.setMeta((IPersistentMap)const__57);
    const__54.bindRoot(new walk.walk_exprs());
    const__58.setMeta((IPersistentMap)const__61);
    const__58.bindRoot(new walk.macroexpand_all()); }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "riddley.walk");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("riddley.walk", "macroexpand");
    const__12 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")), Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "special-form?")) })), RT.keyword(null, "doc"), "Expands both macros and inline functions. Optionally takes a `special-form?` predicate which\n   identifies first elements of expressions that shouldn't be macroexpanded, and honors local\n   bindings.", RT.keyword(null, "line"), Integer.valueOf(6), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "riddley/walk.clj" });
    const__13 = (Var)RT.var("riddley.walk", "do-handler");
    const__17 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f"), Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "&"), Symbol.intern(null, "body"))) })), RT.keyword(null, "line"), Integer.valueOf(58), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "riddley/walk.clj" });
    const__18 = (Var)RT.var("riddley.walk", "fn-handler");
    const__21 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(63), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "riddley/walk.clj" });
    const__22 = (Var)RT.var("riddley.walk", "def-handler");
    const__25 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(90), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "riddley/walk.clj" });
    const__26 = (Var)RT.var("riddley.walk", "let-bindings");
    const__29 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(96), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "riddley/walk.clj" });
    const__30 = (Var)RT.var("riddley.walk", "reify-handler");
    const__33 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(106), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "riddley/walk.clj" });
    const__34 = (Var)RT.var("riddley.walk", "deftype-handler");
    const__37 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(118), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "riddley/walk.clj" });
    const__38 = (Var)RT.var("riddley.walk", "let-handler");
    const__41 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(133), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "riddley/walk.clj" });
    const__42 = (Var)RT.var("riddley.walk", "case-handler");
    const__45 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(141), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "riddley/walk.clj" });
    const__46 = (Var)RT.var("riddley.walk", "catch-handler");
    const__49 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(159), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "riddley/walk.clj" });
    const__50 = (Var)RT.var("riddley.walk", "dot-handler");
    const__53 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(167), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "riddley/walk.clj" });
    const__54 = (Var)RT.var("riddley.walk", "walk-exprs");
    const__57 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "predicate"), Symbol.intern(null, "handler"), Symbol.intern(null, "x")), Tuple.create(Symbol.intern(null, "predicate"), Symbol.intern(null, "handler"), Symbol.intern(null, "special-form?"), Symbol.intern(null, "x")) })), RT.keyword(null, "doc"), "A walk function which only traverses valid Clojure expressions.  The `predicate` describes\n   whether the sub-form should be transformed.  If it returns true, `handler` is invoked, and\n   returns a transformed form.\n\n   Unlike `clojure.walk`, if the handler is called, the rest of the sub-form is not walked.\n   The handler function is responsible for recursively calling `walk-exprs` on the form it is\n   given.\n\n   Macroexpansion can be halted by defining a set of `special-form?` which will be left alone.\n   Including `fn`, `let`, or other binding forms can break local variable analysis, so use\n   with caution.", RT.keyword(null, "line"), Integer.valueOf(177), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "riddley/walk.clj" });
    const__58 = (Var)RT.var("riddley.walk", "macroexpand-all");
    const__61 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "doc"), "Recursively macroexpands all forms, preserving the &env special variables.", RT.keyword(null, "line"), Integer.valueOf(253), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "riddley/walk.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("riddley.walk__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
