package riddley;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class compiler__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__12;
  
  public static final Var const__13;
  
  public static final AFn const__17;
  
  public static final Var const__18;
  
  public static final AFn const__21;
  
  public static final Var const__22;
  
  public static final AFn const__25;
  
  public static final Var const__26;
  
  public static final AFn const__29;
  
  public static final Var const__30;
  
  public static final AFn const__33;
  
  public static final Var const__34;
  
  public static final AFn const__37;
  
  public static final Var const__38;
  
  public static final AFn const__41;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new compiler.fn__14621());
    const__3.setMeta((IPersistentMap)const__12);
    const__3.bindRoot(new compiler.stub_method());
    const__13.setMeta((IPersistentMap)const__17);
    const__13.bindRoot(new compiler.tag_of());
    const__18.setMeta((IPersistentMap)const__21);
    const__18.bindRoot(new compiler.locals());
    const__22.setMeta((IPersistentMap)const__25);
    const__22.bindRoot(new compiler.with_base_env());
    ((Var)const__22)








      
      .setMacro();
    const__26.setMeta((IPersistentMap)const__29);
    const__26.bindRoot(new compiler.with_lexical_scoping());
    ((Var)const__26)





      
      .setMacro();
    const__30.setMeta((IPersistentMap)const__33);
    const__30.bindRoot(new compiler.with_stub_vars());
    ((Var)const__30)




      
      .setMacro();
    const__34.setMeta((IPersistentMap)const__37);
    const__34.bindRoot(new compiler.register_local());
    const__38.setMeta((IPersistentMap)const__41);
    const__38.bindRoot(new compiler.register_arg());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "riddley.compiler");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("riddley.compiler", "stub-method");
    const__12 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(11), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "riddley/compiler.clj" });
    const__13 = (Var)RT.var("riddley.compiler", "tag-of");
    const__17 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "doc"), "Returns a symbol representing the tagged class of the symbol, or `nil` if none exists.", RT.keyword(null, "line"), Integer.valueOf(14), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "riddley/compiler.clj" });
    const__18 = (Var)RT.var("riddley.compiler", "locals");
    const__21 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "doc"), "Returns the local binding map, equivalent to the value of `&env`.", RT.keyword(null, "line"), Integer.valueOf(29), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "riddley/compiler.clj" });
    const__22 = (Var)RT.var("riddley.compiler", "with-base-env");
    const__25 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "line"), Integer.valueOf(35), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "riddley/compiler.clj" });
    const__26 = (Var)RT.var("riddley.compiler", "with-lexical-scoping");
    const__29 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "doc"), "Defines a lexical scope where new locals may be registered.", RT.keyword(null, "line"), Integer.valueOf(42), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "riddley/compiler.clj" });
    const__30 = (Var)RT.var("riddley.compiler", "with-stub-vars");
    const__33 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "line"), Integer.valueOf(48), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "riddley/compiler.clj" });
    const__34 = (Var)RT.var("riddley.compiler", "register-local");
    const__37 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "v"), Symbol.intern(null, "x")) })), RT.keyword(null, "doc"), "Registers a locally bound variable `v`, which is being set to form `x`.", RT.keyword(null, "line"), Integer.valueOf(55), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "riddley/compiler.clj" });
    const__38 = (Var)RT.var("riddley.compiler", "register-arg");
    const__41 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "doc"), "Registers a function argument `x`.", RT.keyword(null, "line"), Integer.valueOf(69), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "riddley/compiler.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("riddley.compiler__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
