package ring.util;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class request__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__3;
  
  public static final AFn const__4;
  
  public static final Var const__5;
  
  public static final AFn const__14;
  
  public static final Var const__15;
  
  public static final AFn const__18;
  
  public static final Var const__19;
  
  public static final AFn const__22;
  
  public static final Var const__23;
  
  public static final AFn const__26;
  
  public static final Var const__27;
  
  public static final AFn const__30;
  
  public static final Var const__31;
  
  public static final Object const__32;
  
  public static final Object const__33;
  
  public static final Object const__34;
  
  public static final Object const__35;
  
  public static final Var const__36;
  
  public static final AFn const__39;
  
  public static final Var const__40;
  
  public static final AFn const__43;
  
  public static final Var const__44;
  
  public static final AFn const__47;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new request.fn__31081());
    const__5.setMeta((IPersistentMap)const__14);
    const__5.bindRoot(new request.request_url());
    const__15.setMeta((IPersistentMap)const__18);
    const__15.bindRoot(new request.content_type());
    const__19.setMeta((IPersistentMap)const__22);
    const__19.bindRoot(new request.content_length());
    const__23.setMeta((IPersistentMap)const__26);
    const__23.bindRoot(new request.character_encoding());
    const__27.setMeta((IPersistentMap)const__30);
    const__27.bindRoot(new request.urlencoded_form_QMARK_());
    const__36.setMeta((IPersistentMap)const__39);
    const__36.bindRoot(new request.path_info());
    const__40.setMeta((IPersistentMap)const__43);
    const__40.bindRoot(new request.in_context_QMARK_());
    const__44.setMeta((IPersistentMap)const__47);
    const__44.bindRoot(new request.set_context());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "ring.util.request")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Functions for augmenting and pulling information from request maps." }));
    const__3 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Functions for augmenting and pulling information from request maps." });
    const__4 = (AFn)Symbol.intern(null, "clojure.core");
    const__5 = (Var)RT.var("ring.util.request", "request-url");
    const__14 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "request")) })), RT.keyword(null, "doc"), "Return the full URL of the request.", RT.keyword(null, "added"), "1.2", RT.keyword(null, "line"), Integer.valueOf(5), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "ring/util/request.clj" });
    const__15 = (Var)RT.var("ring.util.request", "content-type");
    const__18 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "request")) })), RT.keyword(null, "doc"), "Return the content-type of the request, or nil if no content-type is set.", RT.keyword(null, "added"), "1.3", RT.keyword(null, "line"), Integer.valueOf(16), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "ring/util/request.clj" });
    const__19 = (Var)RT.var("ring.util.request", "content-length");
    const__22 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "request")) })), RT.keyword(null, "doc"), "Return the content-length of the request, or nil no content-length is set.", RT.keyword(null, "added"), "1.3", RT.keyword(null, "line"), Integer.valueOf(24), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "ring/util/request.clj" });
    const__23 = (Var)RT.var("ring.util.request", "character-encoding");
    const__26 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "request")) })), RT.keyword(null, "doc"), "Return the character encoding for the request, or nil if it is not set.", RT.keyword(null, "added"), "1.3", RT.keyword(null, "line"), Integer.valueOf(31), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "ring/util/request.clj" });
    const__27 = (Var)RT.var("ring.util.request", "urlencoded-form?");
    const__30 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "request")) })), RT.keyword(null, "doc"), "True if a request contains a urlencoded form in the body.", RT.keyword(null, "added"), "1.3", RT.keyword(null, "line"), Integer.valueOf(38), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "ring/util/request.clj" });
    const__31 = (Var)RT.var("ring.util.request", "body-string");
    const__32 = RT.classForName("java.lang.String");
    const__33 = RT.classForName("clojure.lang.ISeq");
    const__34 = RT.classForName("java.io.File");
    const__35 = RT.classForName("java.io.InputStream");
    const__36 = (Var)RT.var("ring.util.request", "path-info");
    const__39 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "request")) })), RT.keyword(null, "doc"), "Returns the relative path of the request.", RT.keyword(null, "added"), "1.2", RT.keyword(null, "line"), Integer.valueOf(64), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "ring/util/request.clj" });
    const__40 = (Var)RT.var("ring.util.request", "in-context?");
    const__43 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "request"), Symbol.intern(null, "context")) })), RT.keyword(null, "doc"), "Returns true if the URI of the request is a subpath of the supplied context.", RT.keyword(null, "added"), "1.2", RT.keyword(null, "line"), Integer.valueOf(71), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "ring/util/request.clj" });
    const__44 = (Var)RT.var("ring.util.request", "set-context");
    const__47 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "request"), ((IObj)Symbol.intern(null, "context")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") })))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "in-context?"), Symbol.intern(null, "request"), Symbol.intern(null, "context") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(82), RT.keyword(null, "column"), Integer.valueOf(10) }))) })) })), RT.keyword(null, "doc"), "Associate a context and path-info with the  request. The request URI must be\n  a subpath of the supplied context.", RT.keyword(null, "added"), "1.2", RT.keyword(null, "line"), Integer.valueOf(77), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "ring/util/request.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("ring.util.request__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
