package ring.util;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Util;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;
import java.util.regex.Pattern;

public class codec__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final Keyword const__2;
  
  public static final AFn const__3;
  
  public static final AFn const__4;
  
  public static final Var const__5;
  
  public static final AFn const__13;
  
  public static final Var const__14;
  
  public static final AFn const__18;
  
  public static final Var const__19;
  
  public static final AFn const__21;
  
  public static final Var const__23;
  
  public static final Object const__24;
  
  public static final Var const__25;
  
  public static final AFn const__29;
  
  public static final Var const__30;
  
  public static final AFn const__33;
  
  public static final Var const__34;
  
  public static final AFn const__37;
  
  public static final Var const__38;
  
  public static final AFn const__41;
  
  public static final Var const__42;
  
  public static final AFn const__45;
  
  public static final Var const__46;
  
  public static final Object const__48;
  
  public static final AFn const__51;
  
  public static final Var const__52;
  
  public static final AFn const__55;
  
  public static final Var const__56;
  
  public static final AFn const__59;
  
  public static final Object const__60;
  
  public static final Var const__61;
  
  public static final Var const__62;
  
  public static final Var const__63;
  
  public static final Var const__64;
  
  public static final ISeq const__65;
  
  public static final Var const__66;
  
  public static final Var const__67;
  
  public static final AFn const__71;
  
  public static final Keyword const__72;
  
  public static final AFn const__73;
  
  public static final Keyword const__74;
  
  public static final Keyword const__75;
  
  public static final Keyword const__76;
  
  public static final AFn const__77;
  
  public static final Keyword const__78;
  
  public static final Var const__79;
  
  public static final Var const__80;
  
  public static final Var const__81;
  
  public static final AFn const__82;
  
  public static final AFn const__83;
  
  public static final Keyword const__84;
  
  public static final Var const__85;
  
  public static final AFn const__86;
  
  public static final Var const__87;
  
  public static final Object const__88;
  
  public static final Object const__89;
  
  public static final Var const__90;
  
  public static final AFn const__93;
  
  public static final Var const__94;
  
  public static final AFn const__97;
  
  public static final Var const__98;
  
  public static final AFn const__101;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new codec.fn__30730());
    const__5.setMeta((IPersistentMap)const__13);
    const__5.bindRoot(new codec.assoc_conj());
    const__14.setMeta((IPersistentMap)const__18);
    const__14.bindRoot(new codec.double_escape());
    const__19.setMeta((IPersistentMap)const__21);
    const__19





















      
      .bindRoot(Util.equiv("x", ((IFn)const__23.getRawRoot()).invoke("x", const__24, new codec.fn__30735())) ? Boolean.TRUE : Boolean.FALSE);
    const__25.setMeta((IPersistentMap)const__29);
    const__25.bindRoot(new codec.fix_string_replace_bug());
    ((Var)const__25)
      
      .setMacro();
    const__30.setMeta((IPersistentMap)const__33);
    const__30.bindRoot(new codec.percent_encode());
    const__34.setMeta((IPersistentMap)const__37);
    const__34.bindRoot(new codec.parse_bytes());
    const__38.setMeta((IPersistentMap)const__41);
    const__38.bindRoot(new codec.percent_decode());
    const__42.setMeta((IPersistentMap)const__45);
    const__42.bindRoot(new codec.url_encode());
    const__46.setMeta((IPersistentMap)const__51);
    const__46.bindRoot(new codec.url_decode());
    const__52.setMeta((IPersistentMap)const__55);
    const__52.bindRoot(new codec.base64_encode());
    const__56.setMeta((IPersistentMap)const__59);
    const__56.bindRoot(new codec.base64_decode());
    const__90.setMeta((IPersistentMap)const__93);
    const__90.bindRoot(new codec.form_encode());
    const__94.setMeta((IPersistentMap)const__97);
    const__94.bindRoot(new codec.form_decode_str());
    const__98.setMeta((IPersistentMap)const__101);
    const__98.bindRoot(new codec.form_decode());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "ring.util.codec")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Functions for encoding and decoding data." }));
    const__2 = (Keyword)RT.keyword(null, "doc");
    const__3 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Functions for encoding and decoding data." });
    const__4 = (AFn)Symbol.intern(null, "clojure.core");
    const__5 = (Var)RT.var("ring.util.codec", "assoc-conj");
    const__13 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "map"), Symbol.intern(null, "key"), Symbol.intern(null, "val")) })), RT.keyword(null, "doc"), "Associate a key with a value in a map. If the key already exists in the map,\n  a vector of values is associated with the key.", RT.keyword(null, "line"), Integer.valueOf(9), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ring/util/codec.clj" });
    const__14 = (Var)RT.var("ring.util.codec", "double-escape");
    const__18 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "x")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") }))) })), RT.keyword(null, "line"), Integer.valueOf(20), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ring/util/codec.clj" });
    const__19 = (Var)RT.var("ring.util.codec", "string-replace-bug?");
    const__21 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(23), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ring/util/codec.clj" });
    const__23 = (Var)RT.var("clojure.string", "replace");
    const__24 = Pattern.compile(".");
    const__25 = (Var)RT.var("ring.util.codec", "fix-string-replace-bug");
    const__29 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(26), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ring/util/codec.clj" });
    const__30 = (Var)RT.var("ring.util.codec", "percent-encode");
    const__33 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "unencoded")), Tuple.create(((IObj)Symbol.intern(null, "unencoded")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") })), ((IObj)Symbol.intern(null, "encoding")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") }))) })), RT.keyword(null, "doc"), "Percent-encode every character in the given string using either the specified\n  encoding, or UTF-8 by default.", RT.keyword(null, "line"), Integer.valueOf(31), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ring/util/codec.clj" });
    const__34 = (Var)RT.var("ring.util.codec", "parse-bytes");
    const__37 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "encoded-bytes")) })), RT.keyword(null, "line"), Integer.valueOf(41), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ring/util/codec.clj" });
    const__38 = (Var)RT.var("ring.util.codec", "percent-decode");
    const__41 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "encoded")), Tuple.create(((IObj)Symbol.intern(null, "encoded")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") })), ((IObj)Symbol.intern(null, "encoding")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") }))) })), RT.keyword(null, "doc"), "Decode every percent-encoded character in the given string using the\n  specified encoding, or UTF-8 by default.", RT.keyword(null, "line"), Integer.valueOf(47), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ring/util/codec.clj" });
    const__42 = (Var)RT.var("ring.util.codec", "url-encode");
    const__45 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "unencoded")), Tuple.create(Symbol.intern(null, "unencoded"), Symbol.intern(null, "encoding")) })), RT.keyword(null, "doc"), "Returns the url-encoded version of the given string, using either a specified\n  encoding or UTF-8 by default.", RT.keyword(null, "line"), Integer.valueOf(60), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ring/util/codec.clj" });
    const__46 = (Var)RT.var("ring.util.codec", "url-decode");
    const__48 = RT.classForName("java.lang.String");
    const__51 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "tag"), RT.classForName("java.lang.String"), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "encoded")), Tuple.create(Symbol.intern(null, "encoded"), Symbol.intern(null, "encoding")) })), RT.keyword(null, "doc"), "Returns the url-decoded version of the given string, using either a specified\n  encoding or UTF-8 by default. If the encoding is invalid, nil is returned.", RT.keyword(null, "line"), Integer.valueOf(71), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "ring/util/codec.clj" });
    const__52 = (Var)RT.var("ring.util.codec", "base64-encode");
    const__55 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "unencoded")) })), RT.keyword(null, "doc"), "Encode an array of bytes into a base64 encoded string.", RT.keyword(null, "line"), Integer.valueOf(79), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ring/util/codec.clj" });
    const__56 = (Var)RT.var("ring.util.codec", "base64-decode");
    const__59 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "encoded")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") }))) })), RT.keyword(null, "doc"), "Decode a base64 encoded string into an array of bytes.", RT.keyword(null, "line"), Integer.valueOf(84), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ring/util/codec.clj" });
    const__60 = RT.classForName("ring.util.codec.FormEncodeable");
    const__61 = (Var)RT.var("clojure.core", "alter-meta!");
    const__62 = (Var)RT.var("ring.util.codec", "FormEncodeable");
    const__63 = (Var)RT.var("clojure.core", "assoc");
    const__64 = (Var)RT.var("clojure.core", "assert-same-protocol");
    const__65 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "form-encode*")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "encoding")) })) })) }));
    const__66 = (Var)RT.var("clojure.core", "alter-var-root");
    const__67 = (Var)RT.var("clojure.core", "merge");
    const__71 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "ring.util.codec.FormEncodeable"), RT.keyword(null, "on-interface"), RT.classForName("ring.util.codec.FormEncodeable") });
    const__72 = (Keyword)RT.keyword(null, "sigs");
    const__73 = (AFn)RT.map(new Object[] { RT.keyword(null, "form-encode*"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "form-encode*")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "encoding")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "encoding")) })), RT.keyword(null, "doc"), null }) });
    const__74 = (Keyword)RT.keyword(null, "var");
    const__75 = (Keyword)RT.keyword(null, "method-map");
    const__76 = (Keyword)RT.keyword(null, "form-encode*");
    const__77 = (AFn)RT.map(new Object[] { RT.keyword(null, "form-encode*"), RT.keyword(null, "form-encode*") });
    const__78 = (Keyword)RT.keyword(null, "method-builders");
    const__79 = (Var)RT.var("clojure.core", "intern");
    const__80 = (Var)RT.var("clojure.core", "*ns*");
    const__81 = (Var)RT.var("clojure.core", "with-meta");
    const__82 = (AFn)((IObj)Symbol.intern(null, "form-encode*")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "encoding")) })) }));
    const__83 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "form-encode*")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "encoding")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "encoding")) })), RT.keyword(null, "doc"), null });
    const__84 = (Keyword)RT.keyword(null, "protocol");
    const__85 = (Var)RT.var("clojure.core", "-reset-methods");
    const__86 = (AFn)((IObj)Symbol.intern(null, "FormEncodeable")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE }));
    const__87 = (Var)RT.var("clojure.core", "extend");
    const__88 = RT.classForName("java.util.Map");
    const__89 = RT.classForName("java.lang.Object");
    const__90 = (Var)RT.var("ring.util.codec", "form-encode");
    const__93 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")), Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "encoding")) })), RT.keyword(null, "doc"), "Encode the supplied value into www-form-urlencoded format, often used in\n  URL query strings and POST request bodies, using the specified encoding.\n  If the encoding is not specified, it defaults to UTF-8", RT.keyword(null, "line"), Integer.valueOf(114), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ring/util/codec.clj" });
    const__94 = (Var)RT.var("ring.util.codec", "form-decode-str");
    const__97 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "encoded")), Tuple.create(((IObj)Symbol.intern(null, "encoded")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") })), ((IObj)Symbol.intern(null, "encoding")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") }))) })), RT.keyword(null, "doc"), "Decode the supplied www-form-urlencoded string using the specified encoding,\n  or UTF-8 by default.", RT.keyword(null, "line"), Integer.valueOf(123), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ring/util/codec.clj" });
    const__98 = (Var)RT.var("ring.util.codec", "form-decode");
  }
  
  public static void __init1() { const__101 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "encoded")), Tuple.create(((IObj)Symbol.intern(null, "encoded")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") })), Symbol.intern(null, "encoding")) })), RT.keyword(null, "doc"), "Decode the supplied www-form-urlencoded string using the specified encoding,\n  or UTF-8 by default. If the encoded value is a string, a string is returned.\n  If the encoded value is a map of parameters, a map is returned.", RT.keyword(null, "line"), Integer.valueOf(133), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ring/util/codec.clj" }); }
  
  static  {
    __init0();
    __init1();
    Compiler.pushNSandLoader(RT.classForName("ring.util.codec__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
