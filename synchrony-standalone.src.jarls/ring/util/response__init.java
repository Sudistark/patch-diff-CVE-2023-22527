package ring.util;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class response__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__3;
  
  public static final AFn const__4;
  
  public static final Var const__5;
  
  public static final Keyword const__11;
  
  public static final AFn const__12;
  
  public static final AFn const__23;
  
  public static final Var const__24;
  
  public static final AFn const__28;
  
  public static final Var const__29;
  
  public static final AFn const__33;
  
  public static final Var const__34;
  
  public static final AFn const__37;
  
  public static final Var const__38;
  
  public static final AFn const__41;
  
  public static final Var const__42;
  
  public static final AFn const__45;
  
  public static final Var const__46;
  
  public static final AFn const__49;
  
  public static final Var const__50;
  
  public static final AFn const__53;
  
  public static final Var const__54;
  
  public static final AFn const__57;
  
  public static final Var const__58;
  
  public static final AFn const__62;
  
  public static final Var const__63;
  
  public static final AFn const__66;
  
  public static final Var const__67;
  
  public static final AFn const__70;
  
  public static final Var const__71;
  
  public static final AFn const__74;
  
  public static final Var const__75;
  
  public static final AFn const__78;
  
  public static final Var const__79;
  
  public static final AFn const__82;
  
  public static final Var const__83;
  
  public static final AFn const__86;
  
  public static final Var const__87;
  
  public static final AFn const__90;
  
  public static final Var const__91;
  
  public static final AFn const__94;
  
  public static final Var const__95;
  
  public static final AFn const__98;
  
  public static final Var const__99;
  
  public static final AFn const__102;
  
  public static final Var const__103;
  
  public static final AFn const__106;
  
  public static final Var const__107;
  
  public static final AFn const__112;
  
  public static final Var const__113;
  
  public static final AFn const__116;
  
  public static final Var const__117;
  
  public static final AFn const__120;
  
  public static final Var const__121;
  
  public static final AFn const__124;
  
  public static final Var const__125;
  
  public static final AFn const__128;
  
  public static final Var const__129;
  
  public static final AFn const__132;
  
  public static final Var const__133;
  
  public static final AFn const__136;
  
  public static final Var const__137;
  
  public static final AFn const__140;
  
  public static final Var const__141;
  
  public static final AFn const__144;
  
  public static final Var const__145;
  
  public static final Var const__146;
  
  public static final AFn const__149;
  
  public static final Var const__150;
  
  public static final AFn const__153;
  
  public static final Var const__154;
  
  public static final AFn const__157;
  
  public static final Var const__158;
  
  public static final AFn const__161;
  
  public static final Keyword const__162;
  
  public static final Var const__163;
  
  public static final AFn const__166;
  
  public static final Var const__167;
  
  public static final AFn const__170;
  
  public static final Var const__171;
  
  public static final AFn const__174;
  
  public static final Var const__175;
  
  public static final AFn const__178;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new response.fn__30341());
    const__5.setMeta((IPersistentMap)const__12);
    const__5.bindRoot(const__23);
    const__24.setMeta((IPersistentMap)const__28);
    const__24.bindRoot(new response.redirect());
    const__29.setMeta((IPersistentMap)const__33);
    const__29.bindRoot(new response.redirect_after_post());
    const__34.setMeta((IPersistentMap)const__37);
    const__34.bindRoot(new response.created());
    const__38.setMeta((IPersistentMap)const__41);
    const__38.bindRoot(new response.bad_request());
    const__42.setMeta((IPersistentMap)const__45);
    const__42.bindRoot(new response.not_found());
    const__46.setMeta((IPersistentMap)const__49);
    const__46.bindRoot(new response.response());
    const__50.setMeta((IPersistentMap)const__53);
    const__50.bindRoot(new response.status());
    const__54.setMeta((IPersistentMap)const__57);
    const__54.bindRoot(new response.header());
    const__58.setMeta((IPersistentMap)const__62);
    const__58.bindRoot(new response.canonical_path());
    const__63.setMeta((IPersistentMap)const__66);
    const__63.bindRoot(new response.safe_path_QMARK_());
    const__67.setMeta((IPersistentMap)const__70);
    const__67.bindRoot(new response.directory_transversal_QMARK_());
    const__71.setMeta((IPersistentMap)const__74);
    const__71.bindRoot(new response.find_file_named());
    const__75.setMeta((IPersistentMap)const__78);
    const__75.bindRoot(new response.find_file_starting_with());
    const__79.setMeta((IPersistentMap)const__82);
    const__79.bindRoot(new response.find_index_file());
    const__83.setMeta((IPersistentMap)const__86);
    const__83.bindRoot(new response.safely_find_file());
    const__87.setMeta((IPersistentMap)const__90);
    const__87.bindRoot(new response.find_file());
    const__91.setMeta((IPersistentMap)const__94);
    const__91.bindRoot(new response.file_data());
    const__95.setMeta((IPersistentMap)const__98);
    const__95.bindRoot(new response.content_length());
    const__99.setMeta((IPersistentMap)const__102);
    const__99.bindRoot(new response.last_modified());
    const__103.setMeta((IPersistentMap)const__106);
    const__103.bindRoot(new response.file_response());
    const__107.setMeta((IPersistentMap)const__112);
    const__107.bindRoot(new response.url_as_file());
    const__113.setMeta((IPersistentMap)const__116);
    const__113.bindRoot(new response.content_type());
    const__117.setMeta((IPersistentMap)const__120);
    const__117.bindRoot(new response.find_header());
    const__121.setMeta((IPersistentMap)const__124);
    const__121.bindRoot(new response.get_header());
    const__125.setMeta((IPersistentMap)const__128);
    const__125.bindRoot(new response.update_header());
    const__129.setMeta((IPersistentMap)const__132);
    const__129.bindRoot(new response.charset());
    const__133.setMeta((IPersistentMap)const__136);
    const__133.bindRoot(new response.get_charset());
    const__137.setMeta((IPersistentMap)const__140);
    const__137.bindRoot(new response.set_cookie());
    const__141.setMeta((IPersistentMap)const__144);
    const__141.bindRoot(new response.response_QMARK_());
    const__146.setMeta((IPersistentMap)const__149);
    const__146.bindRoot(new response.add_ending_slash());
    const__150.setMeta((IPersistentMap)const__153);
    const__150.bindRoot(new response.jar_directory_QMARK_());
    const__154.setMeta((IPersistentMap)const__157);
    const__154.bindRoot(new response.connection_content_length());
    const__158.setMeta((IPersistentMap)const__161);
    const__158.bindRoot(new response.connection_last_modified());
    const__163.setMeta((IPersistentMap)const__166);
    const__163.bindRoot(new response.url_response());
    const__167.setMeta((IPersistentMap)const__170);
    const__167.bindRoot(new response.get_resources());
    const__171.setMeta((IPersistentMap)const__174);
    const__171.bindRoot(new response.safe_file_resource_QMARK_());
    const__175.setMeta((IPersistentMap)const__178);
    const__175.bindRoot(new response.resource_response());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "ring.util.response")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Functions for generating and augmenting response maps." }));
    const__3 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Functions for generating and augmenting response maps." });
    const__4 = (AFn)Symbol.intern(null, "clojure.core");
    const__5 = (Var)RT.var("ring.util.response", "redirect-status-codes");
    const__11 = (Keyword)RT.keyword(null, "file");
    const__12 = (AFn)RT.map(new Object[] { RT.keyword(null, "added"), "1.4", RT.keyword(null, "line"), Integer.valueOf(12), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ring/util/response.clj", RT.keyword(null, "doc"), "Map a keyword to a redirect status code." });
    const__23 = (AFn)RT.map(new Object[] { RT.keyword(null, "moved-permanently"), Long.valueOf(301L), RT.keyword(null, "found"), Long.valueOf(302L), RT.keyword(null, "see-other"), Long.valueOf(303L), RT.keyword(null, "temporary-redirect"), Long.valueOf(307L), RT.keyword(null, "permanent-redirect"), Long.valueOf(308L) });
    const__24 = (Var)RT.var("ring.util.response", "redirect");
    const__28 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "url")), Tuple.create(Symbol.intern(null, "url"), Symbol.intern(null, "status")) })), RT.keyword(null, "doc"), "Returns a Ring response for an HTTP 302 redirect. Status may be \n  a key in redirect-status-codes or a numeric code. Defaults to 302", RT.keyword(null, "line"), Integer.valueOf(20), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ring/util/response.clj" });
    const__29 = (Var)RT.var("ring.util.response", "redirect-after-post");
    const__33 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "url")) })), RT.keyword(null, "doc"), "Returns a Ring response for an HTTP 303 redirect. Deprecated in favor\n  of using redirect with a :see-other status.", RT.keyword(null, "deprecated"), "1.4", RT.keyword(null, "line"), Integer.valueOf(29), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "ring/util/response.clj" });
    const__34 = (Var)RT.var("ring.util.response", "created");
    const__37 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "url")), Tuple.create(Symbol.intern(null, "url"), Symbol.intern(null, "body")) })), RT.keyword(null, "doc"), "Returns a Ring response for a HTTP 201 created response.", RT.keyword(null, "added"), "1.2", RT.keyword(null, "line"), Integer.valueOf(38), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "ring/util/response.clj" });
    const__38 = (Var)RT.var("ring.util.response", "bad-request");
    const__41 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "body")) })), RT.keyword(null, "doc"), "Returns a 400 'bad request' response.", RT.keyword(null, "added"), "1.7", RT.keyword(null, "line"), Integer.valueOf(47), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "ring/util/response.clj" });
    const__42 = (Var)RT.var("ring.util.response", "not-found");
    const__45 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "body")) })), RT.keyword(null, "doc"), "Returns a 404 'not found' response.", RT.keyword(null, "added"), "1.1", RT.keyword(null, "line"), Integer.valueOf(55), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "ring/util/response.clj" });
    const__46 = (Var)RT.var("ring.util.response", "response");
    const__49 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "body")) })), RT.keyword(null, "doc"), "Returns a skeletal Ring response with the given body, status of 200, and no\n  headers.", RT.keyword(null, "line"), Integer.valueOf(63), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ring/util/response.clj" });
    const__50 = (Var)RT.var("ring.util.response", "status");
    const__53 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "status")), Tuple.create(Symbol.intern(null, "resp"), Symbol.intern(null, "status")) })), RT.keyword(null, "doc"), "Returns an updated Ring response with the given status.", RT.keyword(null, "line"), Integer.valueOf(71), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ring/util/response.clj" });
    const__54 = (Var)RT.var("ring.util.response", "header");
    const__57 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "resp"), Symbol.intern(null, "name"), Symbol.intern(null, "value")) })), RT.keyword(null, "doc"), "Returns an updated Ring response with the specified header added.", RT.keyword(null, "line"), Integer.valueOf(80), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ring/util/response.clj" });
    const__58 = (Var)RT.var("ring.util.response", "canonical-path");
    const__62 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(((IObj)Symbol.intern(null, "file")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "File") })))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "java.lang.String") })) })), RT.keyword(null, "line"), Integer.valueOf(85), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ring/util/response.clj" });
    const__63 = (Var)RT.var("ring.util.response", "safe-path?");
    const__66 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "root")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") })), ((IObj)Symbol.intern(null, "path")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") }))) })), RT.keyword(null, "line"), Integer.valueOf(89), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ring/util/response.clj" });
    const__67 = (Var)RT.var("ring.util.response", "directory-transversal?");
    const__70 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "path")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") }))) })), RT.keyword(null, "doc"), "Check if a path contains '..'.", RT.keyword(null, "line"), Integer.valueOf(93), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "ring/util/response.clj" });
    const__71 = (Var)RT.var("ring.util.response", "find-file-named");
    const__74 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "dir")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "File") })), ((IObj)Symbol.intern(null, "filename")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") }))) })), RT.keyword(null, "line"), Integer.valueOf(100), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ring/util/response.clj" });
    const__75 = (Var)RT.var("ring.util.response", "find-file-starting-with");
    const__78 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "dir")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "File") })), ((IObj)Symbol.intern(null, "prefix")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") }))) })), RT.keyword(null, "line"), Integer.valueOf(105), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ring/util/response.clj" });
    const__79 = (Var)RT.var("ring.util.response", "find-index-file");
    const__82 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "dir")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "File") }))) })), RT.keyword(null, "doc"), "Search the directory for an index file.", RT.keyword(null, "line"), Integer.valueOf(111), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "ring/util/response.clj" });
    const__83 = (Var)RT.var("ring.util.response", "safely-find-file");
    const__86 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "path")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") })), Symbol.intern(null, "opts")) })), RT.keyword(null, "line"), Integer.valueOf(118), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ring/util/response.clj" });
    const__87 = (Var)RT.var("ring.util.response", "find-file");
    const__90 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "path")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") })), Symbol.intern(null, "opts")) })), RT.keyword(null, "line"), Integer.valueOf(125), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ring/util/response.clj" });
    const__91 = (Var)RT.var("ring.util.response", "file-data");
    const__94 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "file")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "File") }))) })), RT.keyword(null, "line"), Integer.valueOf(133), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ring/util/response.clj" });
    const__95 = (Var)RT.var("ring.util.response", "content-length");
    const__98 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "resp"), Symbol.intern(null, "len")) })), RT.keyword(null, "line"), Integer.valueOf(138), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ring/util/response.clj" });
    const__99 = (Var)RT.var("ring.util.response", "last-modified");
  }
  
  public static void __init1() {
    const__102 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "resp"), Symbol.intern(null, "last-mod")) })), RT.keyword(null, "line"), Integer.valueOf(143), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ring/util/response.clj" });
    const__103 = (Var)RT.var("ring.util.response", "file-response");
    const__106 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "filepath")), Tuple.create(Symbol.intern(null, "filepath"), Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "Returns a Ring response to serve a static file, or nil if an appropriate\n  file does not exist.\n  Options:\n    :root            - take the filepath relative to this root path\n    :index-files?    - look for index.* files in directories (defaults to true)\n    :allow-symlinks? - allow symlinks that lead to paths outside the root path\n                       (defaults to false)", RT.keyword(null, "line"), Integer.valueOf(148), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ring/util/response.clj" });
    const__107 = (Var)RT.var("ring.util.response", "url-as-file");
    const__112 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "tag"), RT.classForName("java.io.File"), RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "u")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "java.net.URL") }))) })), RT.keyword(null, "line"), Integer.valueOf(173), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "ring/util/response.clj" });
    const__113 = (Var)RT.var("ring.util.response", "content-type");
    const__116 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "resp"), Symbol.intern(null, "content-type")) })), RT.keyword(null, "doc"), "Returns an updated Ring response with the a Content-Type header corresponding\n  to the given content-type.", RT.keyword(null, "line"), Integer.valueOf(180), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ring/util/response.clj" });
    const__117 = (Var)RT.var("ring.util.response", "find-header");
    const__120 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "resp"), ((IObj)Symbol.intern(null, "header-name")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") }))) })), RT.keyword(null, "doc"), "Looks up a header in a Ring response (or request) case insensitively,\n  returning the header map entry, or nil if not present.", RT.keyword(null, "added"), "1.4", RT.keyword(null, "line"), Integer.valueOf(186), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "ring/util/response.clj" });
    const__121 = (Var)RT.var("ring.util.response", "get-header");
    const__124 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "resp"), Symbol.intern(null, "header-name")) })), RT.keyword(null, "doc"), "Looks up a header in a Ring response (or request) case insensitively,\n  returning the value of the header, or nil if not present.", RT.keyword(null, "added"), "1.2", RT.keyword(null, "line"), Integer.valueOf(195), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "ring/util/response.clj" });
    const__125 = (Var)RT.var("ring.util.response", "update-header");
    const__128 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "resp"), Symbol.intern(null, "header-name"), Symbol.intern(null, "f"), Symbol.intern(null, "&"), Symbol.intern(null, "args")) })), RT.keyword(null, "doc"), "Looks up a header in a Ring response (or request) case insensitively,\n  then updates the header with the supplied function and arguments in the\n  manner of update-in.", RT.keyword(null, "added"), "1.4", RT.keyword(null, "line"), Integer.valueOf(202), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "ring/util/response.clj" });
    const__129 = (Var)RT.var("ring.util.response", "charset");
    const__132 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "resp"), Symbol.intern(null, "charset")) })), RT.keyword(null, "doc"), "Returns an updated Ring response with the supplied charset added to the\n  Content-Type header.", RT.keyword(null, "added"), "1.1", RT.keyword(null, "line"), Integer.valueOf(211), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "ring/util/response.clj" });
    const__133 = (Var)RT.var("ring.util.response", "get-charset");
    const__136 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "resp")) })), RT.keyword(null, "doc"), "Gets the character encoding of a Ring response.", RT.keyword(null, "added"), "1.6", RT.keyword(null, "line"), Integer.valueOf(222), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "ring/util/response.clj" });
    const__137 = (Var)RT.var("ring.util.response", "set-cookie");
    const__140 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "resp"), Symbol.intern(null, "name"), Symbol.intern(null, "value"), Symbol.intern(null, "&"), Tuple.create(Symbol.intern(null, "opts"))) })), RT.keyword(null, "doc"), "Sets a cookie on the response. Requires the handler to be wrapped in the\n  wrap-cookies middleware.", RT.keyword(null, "added"), "1.1", RT.keyword(null, "line"), Integer.valueOf(229), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "ring/util/response.clj" });
    const__141 = (Var)RT.var("ring.util.response", "response?");
    const__144 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "resp")) })), RT.keyword(null, "doc"), "True if the supplied value is a valid response map.", RT.keyword(null, "added"), "1.1", RT.keyword(null, "line"), Integer.valueOf(236), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "ring/util/response.clj" });
    const__145 = (Var)RT.var("ring.util.response", "resource-data");
    const__146 = (Var)RT.var("ring.util.response", "add-ending-slash");
    const__149 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "path")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") }))) })), RT.keyword(null, "line"), Integer.valueOf(272), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ring/util/response.clj" });
    const__150 = (Var)RT.var("ring.util.response", "jar-directory?");
    const__153 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "conn")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "java.net.JarURLConnection") }))) })), RT.keyword(null, "line"), Integer.valueOf(277), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ring/util/response.clj" });
    const__154 = (Var)RT.var("ring.util.response", "connection-content-length");
    const__157 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "conn")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "java.net.URLConnection") }))) })), RT.keyword(null, "line"), Integer.valueOf(283), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ring/util/response.clj" });
    const__158 = (Var)RT.var("ring.util.response", "connection-last-modified");
    const__161 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "conn")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "java.net.URLConnection") }))) })), RT.keyword(null, "line"), Integer.valueOf(287), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ring/util/response.clj" });
    const__162 = (Keyword)RT.keyword(null, "jar");
    const__163 = (Var)RT.var("ring.util.response", "url-response");
    const__166 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "url")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "URL") }))) })), RT.keyword(null, "doc"), "Return a response for the supplied URL.", RT.keyword(null, "added"), "1.2", RT.keyword(null, "line"), Integer.valueOf(300), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "ring/util/response.clj" });
    const__167 = (Var)RT.var("ring.util.response", "get-resources");
    const__170 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "path"), ((IObj)Symbol.intern(null, "loader")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "ClassLoader") }))) })), RT.keyword(null, "line"), Integer.valueOf(309), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ring/util/response.clj" });
    const__171 = (Var)RT.var("ring.util.response", "safe-file-resource?");
    const__174 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "body")) }), RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "root"), Symbol.intern(null, "loader"), Symbol.intern(null, "allow-symlinks?")) })) })), RT.keyword(null, "line"), Integer.valueOf(314), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ring/util/response.clj" });
    const__175 = (Var)RT.var("ring.util.response", "resource-response");
    const__178 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "path")), Tuple.create(Symbol.intern(null, "path"), Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "Returns a Ring response to serve a packaged resource, or nil if the\n  resource does not exist.\n  Options:\n    :root            - take the resource relative to this root\n    :loader          - resolve the resource in this class loader\n    :allow-symlinks? - allow symlinks that lead to paths outside the root\n                       classpath directories (defaults to false)", RT.keyword(null, "line"), Integer.valueOf(324), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ring/util/response.clj" });
  }
  
  static  {
    __init0();
    __init1();
    Compiler.pushNSandLoader(RT.classForName("ring.util.response__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
