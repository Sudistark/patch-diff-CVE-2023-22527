package ring.util;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class io__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__3;
  
  public static final AFn const__4;
  
  public static final Var const__5;
  
  public static final AFn const__14;
  
  public static final Var const__15;
  
  public static final AFn const__18;
  
  public static final Var const__19;
  
  public static final AFn const__22;
  
  public static final Var const__23;
  
  public static final AFn const__26;
  
  public static void load() { LockingTransaction.runInTransaction((Callable)new io.fn__30316());
    const__5.setMeta((IPersistentMap)const__14);
    const__5.bindRoot(new io.piped_input_stream());
    const__15.setMeta((IPersistentMap)const__18);
    const__15.bindRoot(new io.string_input_stream());
    const__19.setMeta((IPersistentMap)const__22);
    const__19.bindRoot(new io.close_BANG_());
    const__23.setMeta((IPersistentMap)const__26);
    const__23.bindRoot(new io.last_modified_date()); }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "ring.util.io")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Utility functions for handling I/O." }));
    const__3 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Utility functions for handling I/O." });
    const__4 = (AFn)Symbol.intern(null, "clojure.core");
    const__5 = (Var)RT.var("ring.util.io", "piped-input-stream");
    const__14 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "func")) })), RT.keyword(null, "doc"), "Create an input stream from a function that takes an output stream as its\n  argument. The function will be executed in a separate thread. The stream\n  will be automatically closed after the function finishes.\n\n  For example:\n\n    (piped-input-stream\n      (fn [ostream]\n        (spit ostream \"Hello\")))", RT.keyword(null, "added"), "1.1", RT.keyword(null, "line"), Integer.valueOf(11), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "ring/util/io.clj" });
    const__15 = (Var)RT.var("ring.util.io", "string-input-stream");
    const__18 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "s")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") }))), Tuple.create(((IObj)Symbol.intern(null, "s")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") })), ((IObj)Symbol.intern(null, "encoding")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") }))) })), RT.keyword(null, "doc"), "Returns a ByteArrayInputStream for the given String.", RT.keyword(null, "added"), "1.1", RT.keyword(null, "line"), Integer.valueOf(32), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "ring/util/io.clj" });
    const__19 = (Var)RT.var("ring.util.io", "close!");
    const__22 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "stream")) })), RT.keyword(null, "doc"), "Ensure a stream is closed, swallowing any exceptions.", RT.keyword(null, "added"), "1.2", RT.keyword(null, "line"), Integer.valueOf(40), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "ring/util/io.clj" });
    const__23 = (Var)RT.var("ring.util.io", "last-modified-date");
    const__26 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "file")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "File") }))) })), RT.keyword(null, "doc"), "Returns the last modified date for a file, rounded down to the nearest\n  second.", RT.keyword(null, "added"), "1.2", RT.keyword(null, "line"), Integer.valueOf(49), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "ring/util/io.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("ring.util.io__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
