package ring.middleware.session;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class memory__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__3;
  
  public static final AFn const__4;
  
  public static final Var const__5;
  
  public static final Var const__6;
  
  public static final AFn const__7;
  
  public static final Var const__8;
  
  public static final AFn const__16;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new memory.fn__60201());
    const__8.setMeta((IPersistentMap)const__16);
    const__8.bindRoot(new memory.memory_store());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "ring.middleware.session.memory")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "A session storage engine that stores session data in memory." }));
    const__3 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "A session storage engine that stores session data in memory." });
    const__4 = (AFn)Symbol.intern(null, "clojure.core");
    const__5 = (Var)RT.var("clojure.core", "ns-unmap");
    const__6 = (Var)RT.var("clojure.core", "*ns*");
    const__7 = (AFn)Symbol.intern(null, "->MemoryStore");
    const__8 = (Var)RT.var("ring.middleware.session.memory", "memory-store");
    const__16 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(), Tuple.create(Symbol.intern(null, "session-atom")) })), RT.keyword(null, "doc"), "Creates an in-memory session storage engine. Accepts an atom as an optional\n  argument; if supplied, the atom is used to hold the session data.", RT.keyword(null, "line"), Integer.valueOf(20), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ring/middleware/session/memory.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("ring.middleware.session.memory__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
