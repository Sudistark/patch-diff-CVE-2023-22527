package ring.middleware.session;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class cookie__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__3;
  
  public static final AFn const__4;
  
  public static final Var const__5;
  
  public static final AFn const__12;
  
  public static final Var const__13;
  
  public static final AFn const__15;
  
  public static final Var const__16;
  
  public static final AFn const__18;
  
  public static final Var const__19;
  
  public static final AFn const__23;
  
  public static final Var const__24;
  
  public static final AFn const__27;
  
  public static final Var const__28;
  
  public static final AFn const__31;
  
  public static final Var const__32;
  
  public static final AFn const__35;
  
  public static final Var const__36;
  
  public static final AFn const__39;
  
  public static final Var const__40;
  
  public static final AFn const__43;
  
  public static final Var const__44;
  
  public static final AFn const__49;
  
  public static final Var const__50;
  
  public static final AFn const__53;
  
  public static final Var const__54;
  
  public static final AFn const__57;
  
  public static final Var const__58;
  
  public static final Var const__59;
  
  public static final AFn const__60;
  
  public static final Var const__61;
  
  public static final AFn const__64;
  
  public static final Var const__65;
  
  public static final AFn const__68;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new cookie.fn__60254());
    const__5.setMeta((IPersistentMap)const__12);
    const__5.bindRoot("HmacSHA256");
    const__13.setMeta((IPersistentMap)const__15);
    const__13.bindRoot("AES");
    const__16.setMeta((IPersistentMap)const__18);
    const__16.bindRoot("AES/CBC/PKCS5Padding");
    const__19.setMeta((IPersistentMap)const__23);
    const__19.bindRoot(new cookie.hmac());
    const__24.setMeta((IPersistentMap)const__27);
    const__24.bindRoot(new cookie.encrypt());
    const__28.setMeta((IPersistentMap)const__31);
    const__28.bindRoot(new cookie.decrypt());
    const__32.setMeta((IPersistentMap)const__35);
    const__32.bindRoot(new cookie.print_string_secret_key_deprecation());
    const__36.setMeta((IPersistentMap)const__39);
    const__36.bindRoot(new cookie.get_secret_key());
    const__40.setMeta((IPersistentMap)const__43);
    const__40.bindRoot(new cookie.deserialize());
    const__44.setMeta((IPersistentMap)const__49);
    const__44.bindRoot(new cookie.serialize());
    const__50.setMeta((IPersistentMap)const__53);
    const__50.bindRoot(new cookie.seal());
    const__54.setMeta((IPersistentMap)const__57);
    const__54.bindRoot(new cookie.unseal());
    const__61.setMeta((IPersistentMap)const__64);
    const__61.bindRoot(new cookie.valid_secret_key_QMARK_());
    const__65.setMeta((IPersistentMap)const__68);
    const__65.bindRoot(new cookie.cookie_store());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "ring.middleware.session.cookie")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "A session storage engine that stores session data in encrypted cookies." }));
    const__3 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "A session storage engine that stores session data in encrypted cookies." });
    const__4 = (AFn)Symbol.intern(null, "clojure.core");
    const__5 = (Var)RT.var("ring.middleware.session.cookie", "hmac-algorithm");
    const__12 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "doc"), "Algorithm to generate a HMAC.", RT.keyword(null, "line"), Integer.valueOf(12), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ring/middleware/session/cookie.clj" });
    const__13 = (Var)RT.var("ring.middleware.session.cookie", "crypt-type");
    const__15 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "doc"), "Type of encryption to use.", RT.keyword(null, "line"), Integer.valueOf(17), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ring/middleware/session/cookie.clj" });
    const__16 = (Var)RT.var("ring.middleware.session.cookie", "crypt-algorithm");
    const__18 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "doc"), "Full algorithm to encrypt data with.", RT.keyword(null, "line"), Integer.valueOf(22), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ring/middleware/session/cookie.clj" });
    const__19 = (Var)RT.var("ring.middleware.session.cookie", "hmac");
    const__23 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "key"), Symbol.intern(null, "data")) })), RT.keyword(null, "doc"), "Generates a Base64 HMAC with the supplied key on a string of data.", RT.keyword(null, "line"), Integer.valueOf(30), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "ring/middleware/session/cookie.clj" });
    const__24 = (Var)RT.var("ring.middleware.session.cookie", "encrypt");
    const__27 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "key"), Symbol.intern(null, "data")) })), RT.keyword(null, "doc"), "Encrypt a string with a key.", RT.keyword(null, "line"), Integer.valueOf(37), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "ring/middleware/session/cookie.clj" });
    const__28 = (Var)RT.var("ring.middleware.session.cookie", "decrypt");
    const__31 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "key"), Symbol.intern(null, "data")) })), RT.keyword(null, "doc"), "Decrypt an array of bytes with a key.", RT.keyword(null, "line"), Integer.valueOf(48), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "ring/middleware/session/cookie.clj" });
    const__32 = (Var)RT.var("ring.middleware.session.cookie", "print-string-secret-key-deprecation");
    const__35 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(58), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ring/middleware/session/cookie.clj" });
    const__36 = (Var)RT.var("ring.middleware.session.cookie", "get-secret-key");
    const__39 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "Get a valid secret key from a map of options, or create a random one from\n  scratch.", RT.keyword(null, "line"), Integer.valueOf(63), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "ring/middleware/session/cookie.clj" });
    const__40 = (Var)RT.var("ring.middleware.session.cookie", "deserialize");
    const__43 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "options")) })), RT.keyword(null, "line"), Integer.valueOf(74), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ring/middleware/session/cookie.clj" });
    const__44 = (Var)RT.var("ring.middleware.session.cookie", "serialize");
    const__49 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "tag"), RT.classForName("java.lang.String"), RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "options"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "post"), Tuple.create(((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "="), Symbol.intern(null, "x"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "deserialize"), Symbol.intern(null, "%"), Symbol.intern(null, "options") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(78), RT.keyword(null, "column"), Integer.valueOf(16) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(78), RT.keyword(null, "column"), Integer.valueOf(11) }))) })) })), RT.keyword(null, "line"), Integer.valueOf(77), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "ring/middleware/session/cookie.clj" });
    const__50 = (Var)RT.var("ring.middleware.session.cookie", "seal");
    const__53 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "key"), Symbol.intern(null, "data"), Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "Seal a Clojure data structure into an encrypted and HMACed string.", RT.keyword(null, "line"), Integer.valueOf(81), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "ring/middleware/session/cookie.clj" });
    const__54 = (Var)RT.var("ring.middleware.session.cookie", "unseal");
    const__57 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "key"), ((IObj)Symbol.intern(null, "string")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") })), Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "Retrieve a sealed Clojure data structure from a string", RT.keyword(null, "line"), Integer.valueOf(87), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "ring/middleware/session/cookie.clj" });
    const__58 = (Var)RT.var("clojure.core", "ns-unmap");
    const__59 = (Var)RT.var("clojure.core", "*ns*");
    const__60 = (AFn)Symbol.intern(null, "->CookieStore");
    const__61 = (Var)RT.var("ring.middleware.session.cookie", "valid-secret-key?");
    const__64 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "key")) })), RT.keyword(null, "line"), Integer.valueOf(106), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ring/middleware/session/cookie.clj" });
    const__65 = (Var)RT.var("ring.middleware.session.cookie", "cookie-store");
    const__68 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(), Tuple.create(Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "Creates an encrypted cookie storage engine. Accepts the following options:\n\n  :key - The secret key to encrypt the session cookie. Must be a byte array of\n         exactly 16 bytes. If no key is provided then a random key will be\n         generated. Note that in that case a server restart will invalidate all\n         existing session cookies.\n\n  :readers - A map of data readers used to read the serialized edn from the\n             cookie. For writing, ensure that each data type has a key in the\n             clojure.core/print-method or clojure.core/print-dup multimethods.", RT.keyword(null, "line"), Integer.valueOf(110), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ring/middleware/session/cookie.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("ring.middleware.session.cookie__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
