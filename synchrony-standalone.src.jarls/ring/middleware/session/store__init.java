package ring.middleware.session;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class store__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final Keyword const__2;
  
  public static final AFn const__3;
  
  public static final AFn const__4;
  
  public static final Object const__5;
  
  public static final Var const__6;
  
  public static final Var const__7;
  
  public static final Var const__8;
  
  public static final Var const__9;
  
  public static final ISeq const__10;
  
  public static final Var const__11;
  
  public static final Var const__12;
  
  public static final AFn const__16;
  
  public static final Keyword const__17;
  
  public static final AFn const__18;
  
  public static final Keyword const__19;
  
  public static final Keyword const__20;
  
  public static final AFn const__24;
  
  public static final Keyword const__25;
  
  public static final Var const__26;
  
  public static final Var const__27;
  
  public static final Var const__28;
  
  public static final AFn const__29;
  
  public static final AFn const__30;
  
  public static final Keyword const__31;
  
  public static final AFn const__32;
  
  public static final AFn const__33;
  
  public static final AFn const__34;
  
  public static final AFn const__35;
  
  public static final Var const__36;
  
  public static final AFn const__37;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new store.fn__60147());
    new Object[6][0] = ((IFn)const__26.getRawRoot()).invoke(const__27.get(), ((IFn)const__28.getRawRoot()).invoke(const__29, ((IFn)const__12.getRawRoot()).invoke(const__30, RT.mapUniqueKeys(new Object[] { const__31, const__7 }))));
    new Object[6][1] = new store.fn__60158();
    new Object[6][2] = ((IFn)const__26.getRawRoot()).invoke(const__27.get(), ((IFn)const__28.getRawRoot()).invoke(const__32, ((IFn)const__12.getRawRoot()).invoke(const__33, RT.mapUniqueKeys(new Object[] { const__31, const__7 }))));
    new Object[6][3] = new store.fn__60171();
    new Object[6][4] = ((IFn)const__26.getRawRoot()).invoke(const__27.get(), ((IFn)const__28.getRawRoot()).invoke(const__34, ((IFn)const__12.getRawRoot()).invoke(const__35, RT.mapUniqueKeys(new Object[] { const__31, const__7 }))));
    new Object[6][5] = new store.fn__60184();
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "ring.middleware.session.store")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Contains the protocol used to define all Ring session storage engines." }));
    const__2 = (Keyword)RT.keyword(null, "doc");
    const__3 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Contains the protocol used to define all Ring session storage engines." });
    const__4 = (AFn)Symbol.intern(null, "clojure.core");
    const__5 = RT.classForName("ring.middleware.session.store.SessionStore");
    const__6 = (Var)RT.var("clojure.core", "alter-meta!");
    const__7 = (Var)RT.var("ring.middleware.session.store", "SessionStore");
    const__8 = (Var)RT.var("clojure.core", "assoc");
    const__9 = (Var)RT.var("clojure.core", "assert-same-protocol");
    const__10 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "read-session")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Read a session map from the store. If the key is not found, nil\n    is returned.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store"), Symbol.intern(null, "key")) })) })), ((IObj)Symbol.intern(null, "write-session")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Write a session map to the store. Returns the (possibly changed) key under\n    which the data was stored. If the key is nil, the session is considered\n    to be new, and a fresh key should be generated.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store"), Symbol.intern(null, "key"), Symbol.intern(null, "data")) })) })), ((IObj)Symbol.intern(null, "delete-session")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Delete a session map from the store, and returns the session key. If the\n    returned key is nil, the session cookie will be removed.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store"), Symbol.intern(null, "key")) })) })) }));
    const__11 = (Var)RT.var("clojure.core", "alter-var-root");
    const__12 = (Var)RT.var("clojure.core", "merge");
    const__16 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "ring.middleware.session.store.SessionStore"), RT.keyword(null, "on-interface"), RT.classForName("ring.middleware.session.store.SessionStore"), RT.keyword(null, "doc"), "An interface to a session storage engine. Implementing this protocol allows\n  Ring session data to be stored in different places.\n\n  Session keys are exposed to end users via a cookie, and therefore must be\n  unguessable. A random UUID is a good choice for a session key.\n\n  Session stores should come with a mechanism for expiring old session data." });
    const__17 = (Keyword)RT.keyword(null, "sigs");
    const__18 = (AFn)RT.map(new Object[] { RT.keyword(null, "read-session"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "read-session")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Read a session map from the store. If the key is not found, nil\n    is returned.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store"), Symbol.intern(null, "key")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store"), Symbol.intern(null, "key")) })), RT.keyword(null, "doc"), "Read a session map from the store. If the key is not found, nil\n    is returned." }), RT.keyword(null, "write-session"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "write-session")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Write a session map to the store. Returns the (possibly changed) key under\n    which the data was stored. If the key is nil, the session is considered\n    to be new, and a fresh key should be generated.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store"), Symbol.intern(null, "key"), Symbol.intern(null, "data")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store"), Symbol.intern(null, "key"), Symbol.intern(null, "data")) })), RT.keyword(null, "doc"), "Write a session map to the store. Returns the (possibly changed) key under\n    which the data was stored. If the key is nil, the session is considered\n    to be new, and a fresh key should be generated." }), RT.keyword(null, "delete-session"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "delete-session")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Delete a session map from the store, and returns the session key. If the\n    returned key is nil, the session cookie will be removed.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store"), Symbol.intern(null, "key")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store"), Symbol.intern(null, "key")) })), RT.keyword(null, "doc"), "Delete a session map from the store, and returns the session key. If the\n    returned key is nil, the session cookie will be removed." }) });
    const__19 = (Keyword)RT.keyword(null, "var");
    const__20 = (Keyword)RT.keyword(null, "method-map");
    const__24 = (AFn)RT.map(new Object[] { RT.keyword(null, "read-session"), RT.keyword(null, "read-session"), RT.keyword(null, "write-session"), RT.keyword(null, "write-session"), RT.keyword(null, "delete-session"), RT.keyword(null, "delete-session") });
    const__25 = (Keyword)RT.keyword(null, "method-builders");
    const__26 = (Var)RT.var("clojure.core", "intern");
    const__27 = (Var)RT.var("clojure.core", "*ns*");
    const__28 = (Var)RT.var("clojure.core", "with-meta");
    const__29 = (AFn)((IObj)Symbol.intern(null, "delete-session")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Delete a session map from the store, and returns the session key. If the\n    returned key is nil, the session cookie will be removed.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store"), Symbol.intern(null, "key")) })) }));
    const__30 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "delete-session")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Delete a session map from the store, and returns the session key. If the\n    returned key is nil, the session cookie will be removed.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store"), Symbol.intern(null, "key")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store"), Symbol.intern(null, "key")) })), RT.keyword(null, "doc"), "Delete a session map from the store, and returns the session key. If the\n    returned key is nil, the session cookie will be removed." });
    const__31 = (Keyword)RT.keyword(null, "protocol");
    const__32 = (AFn)((IObj)Symbol.intern(null, "read-session")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Read a session map from the store. If the key is not found, nil\n    is returned.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store"), Symbol.intern(null, "key")) })) }));
    const__33 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "read-session")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Read a session map from the store. If the key is not found, nil\n    is returned.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store"), Symbol.intern(null, "key")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store"), Symbol.intern(null, "key")) })), RT.keyword(null, "doc"), "Read a session map from the store. If the key is not found, nil\n    is returned." });
    const__34 = (AFn)((IObj)Symbol.intern(null, "write-session")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Write a session map to the store. Returns the (possibly changed) key under\n    which the data was stored. If the key is nil, the session is considered\n    to be new, and a fresh key should be generated.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store"), Symbol.intern(null, "key"), Symbol.intern(null, "data")) })) }));
    const__35 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "write-session")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Write a session map to the store. Returns the (possibly changed) key under\n    which the data was stored. If the key is nil, the session is considered\n    to be new, and a fresh key should be generated.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store"), Symbol.intern(null, "key"), Symbol.intern(null, "data")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store"), Symbol.intern(null, "key"), Symbol.intern(null, "data")) })), RT.keyword(null, "doc"), "Write a session map to the store. Returns the (possibly changed) key under\n    which the data was stored. If the key is nil, the session is considered\n    to be new, and a fresh key should be generated." });
    const__36 = (Var)RT.var("clojure.core", "-reset-methods");
    const__37 = (AFn)Symbol.intern(null, "SessionStore");
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("ring.middleware.session.store__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
