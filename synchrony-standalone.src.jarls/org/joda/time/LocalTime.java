package org.joda.time;

import java.io.Serializable;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Locale;
import java.util.Set;
import org.joda.convert.FromString;
import org.joda.convert.ToString;
import org.joda.time.base.BaseLocal;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.convert.ConverterManager;
import org.joda.time.convert.PartialConverter;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.ISODateTimeFormat;

public final class LocalTime extends BaseLocal implements ReadablePartial, Serializable {
  private static final long serialVersionUID = -12873158713873L;
  
  public static final LocalTime MIDNIGHT = new LocalTime(0, 0, 0, 0);
  
  private static final int HOUR_OF_DAY = 0;
  
  private static final int MINUTE_OF_HOUR = 1;
  
  private static final int SECOND_OF_MINUTE = 2;
  
  private static final int MILLIS_OF_SECOND = 3;
  
  private static final Set<DurationFieldType> TIME_DURATION_TYPES = new HashSet();
  
  private final long iLocalMillis;
  
  private final Chronology iChronology;
  
  static  {
    TIME_DURATION_TYPES.add(DurationFieldType.millis());
    TIME_DURATION_TYPES.add(DurationFieldType.seconds());
    TIME_DURATION_TYPES.add(DurationFieldType.minutes());
    TIME_DURATION_TYPES.add(DurationFieldType.hours());
  }
  
  public static LocalTime now() { return new LocalTime(); }
  
  public static LocalTime now(DateTimeZone paramDateTimeZone) {
    if (paramDateTimeZone == null)
      throw new NullPointerException("Zone must not be null"); 
    return new LocalTime(paramDateTimeZone);
  }
  
  public static LocalTime now(Chronology paramChronology) {
    if (paramChronology == null)
      throw new NullPointerException("Chronology must not be null"); 
    return new LocalTime(paramChronology);
  }
  
  @FromString
  public static LocalTime parse(String paramString) { return parse(paramString, ISODateTimeFormat.localTimeParser()); }
  
  public static LocalTime parse(String paramString, DateTimeFormatter paramDateTimeFormatter) { return paramDateTimeFormatter.parseLocalTime(paramString); }
  
  public static LocalTime fromMillisOfDay(long paramLong) { return fromMillisOfDay(paramLong, null); }
  
  public static LocalTime fromMillisOfDay(long paramLong, Chronology paramChronology) {
    paramChronology = DateTimeUtils.getChronology(paramChronology).withUTC();
    return new LocalTime(paramLong, paramChronology);
  }
  
  public static LocalTime fromCalendarFields(Calendar paramCalendar) {
    if (paramCalendar == null)
      throw new IllegalArgumentException("The calendar must not be null"); 
    return new LocalTime(paramCalendar
        .get(11), paramCalendar
        .get(12), paramCalendar
        .get(13), paramCalendar
        .get(14));
  }
  
  public static LocalTime fromDateFields(Date paramDate) {
    if (paramDate == null)
      throw new IllegalArgumentException("The date must not be null"); 
    return new LocalTime(paramDate
        .getHours(), paramDate
        .getMinutes(), paramDate
        .getSeconds(), (
        (int)(paramDate.getTime() % 1000L) + 1000) % 1000);
  }
  
  public LocalTime() { this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance()); }
  
  public LocalTime(DateTimeZone paramDateTimeZone) { this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance(paramDateTimeZone)); }
  
  public LocalTime(Chronology paramChronology) { this(DateTimeUtils.currentTimeMillis(), paramChronology); }
  
  public LocalTime(long paramLong) { this(paramLong, ISOChronology.getInstance()); }
  
  public LocalTime(long paramLong, DateTimeZone paramDateTimeZone) { this(paramLong, ISOChronology.getInstance(paramDateTimeZone)); }
  
  public LocalTime(long paramLong, Chronology paramChronology) {
    paramChronology = DateTimeUtils.getChronology(paramChronology);
    long l = paramChronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, paramLong);
    paramChronology = paramChronology.withUTC();
    this.iLocalMillis = paramChronology.millisOfDay().get(l);
    this.iChronology = paramChronology;
  }
  
  public LocalTime(Object paramObject) { this(paramObject, (Chronology)null); }
  
  public LocalTime(Object paramObject, DateTimeZone paramDateTimeZone) {
    PartialConverter partialConverter = ConverterManager.getInstance().getPartialConverter(paramObject);
    Chronology chronology = partialConverter.getChronology(paramObject, paramDateTimeZone);
    chronology = DateTimeUtils.getChronology(chronology);
    this.iChronology = chronology.withUTC();
    int[] arrayOfInt = partialConverter.getPartialValues(this, paramObject, chronology, ISODateTimeFormat.localTimeParser());
    this.iLocalMillis = this.iChronology.getDateTimeMillis(0L, arrayOfInt[0], arrayOfInt[1], arrayOfInt[2], arrayOfInt[3]);
  }
  
  public LocalTime(Object paramObject, Chronology paramChronology) {
    PartialConverter partialConverter = ConverterManager.getInstance().getPartialConverter(paramObject);
    paramChronology = partialConverter.getChronology(paramObject, paramChronology);
    paramChronology = DateTimeUtils.getChronology(paramChronology);
    this.iChronology = paramChronology.withUTC();
    int[] arrayOfInt = partialConverter.getPartialValues(this, paramObject, paramChronology, ISODateTimeFormat.localTimeParser());
    this.iLocalMillis = this.iChronology.getDateTimeMillis(0L, arrayOfInt[0], arrayOfInt[1], arrayOfInt[2], arrayOfInt[3]);
  }
  
  public LocalTime(int paramInt1, int paramInt2) { this(paramInt1, paramInt2, 0, 0, ISOChronology.getInstanceUTC()); }
  
  public LocalTime(int paramInt1, int paramInt2, int paramInt3) { this(paramInt1, paramInt2, paramInt3, 0, ISOChronology.getInstanceUTC()); }
  
  public LocalTime(int paramInt1, int paramInt2, int paramInt3, int paramInt4) {
    this(paramInt1, paramInt2, paramInt3, paramInt4, 
        ISOChronology.getInstanceUTC());
  }
  
  public LocalTime(int paramInt1, int paramInt2, int paramInt3, int paramInt4, Chronology paramChronology) {
    paramChronology = DateTimeUtils.getChronology(paramChronology).withUTC();
    long l = paramChronology.getDateTimeMillis(0L, paramInt1, paramInt2, paramInt3, paramInt4);
    this.iChronology = paramChronology;
    this.iLocalMillis = l;
  }
  
  private Object readResolve() {
    if (this.iChronology == null)
      return new LocalTime(this.iLocalMillis, ISOChronology.getInstanceUTC()); 
    if (!DateTimeZone.UTC.equals(this.iChronology.getZone()))
      return new LocalTime(this.iLocalMillis, this.iChronology.withUTC()); 
    return this;
  }
  
  public int size() { return 4; }
  
  protected DateTimeField getField(int paramInt, Chronology paramChronology) {
    switch (paramInt) {
      case 0:
        return paramChronology.hourOfDay();
      case 1:
        return paramChronology.minuteOfHour();
      case 2:
        return paramChronology.secondOfMinute();
      case 3:
        return paramChronology.millisOfSecond();
    } 
    throw new IndexOutOfBoundsException("Invalid index: " + paramInt);
  }
  
  public int getValue(int paramInt) {
    switch (paramInt) {
      case 0:
        return getChronology().hourOfDay().get(getLocalMillis());
      case 1:
        return getChronology().minuteOfHour().get(getLocalMillis());
      case 2:
        return getChronology().secondOfMinute().get(getLocalMillis());
      case 3:
        return getChronology().millisOfSecond().get(getLocalMillis());
    } 
    throw new IndexOutOfBoundsException("Invalid index: " + paramInt);
  }
  
  public int get(DateTimeFieldType paramDateTimeFieldType) {
    if (paramDateTimeFieldType == null)
      throw new IllegalArgumentException("The DateTimeFieldType must not be null"); 
    if (!isSupported(paramDateTimeFieldType))
      throw new IllegalArgumentException("Field '" + paramDateTimeFieldType + "' is not supported"); 
    return paramDateTimeFieldType.getField(getChronology()).get(getLocalMillis());
  }
  
  public boolean isSupported(DateTimeFieldType paramDateTimeFieldType) {
    if (paramDateTimeFieldType == null)
      return false; 
    if (!isSupported(paramDateTimeFieldType.getDurationType()))
      return false; 
    DurationFieldType durationFieldType = paramDateTimeFieldType.getRangeDurationType();
    return (isSupported(durationFieldType) || durationFieldType == DurationFieldType.days());
  }
  
  public boolean isSupported(DurationFieldType paramDurationFieldType) {
    if (paramDurationFieldType == null)
      return false; 
    DurationField durationField = paramDurationFieldType.getField(getChronology());
    if (TIME_DURATION_TYPES.contains(paramDurationFieldType) || durationField
      .getUnitMillis() < getChronology().days().getUnitMillis())
      return durationField.isSupported(); 
    return false;
  }
  
  protected long getLocalMillis() { return this.iLocalMillis; }
  
  public Chronology getChronology() { return this.iChronology; }
  
  public boolean equals(Object paramObject) {
    if (this == paramObject)
      return true; 
    if (paramObject instanceof LocalTime) {
      LocalTime localTime = (LocalTime)paramObject;
      if (this.iChronology.equals(localTime.iChronology))
        return (this.iLocalMillis == localTime.iLocalMillis); 
    } 
    return super.equals(paramObject);
  }
  
  public int compareTo(ReadablePartial paramReadablePartial) {
    if (this == paramReadablePartial)
      return 0; 
    if (paramReadablePartial instanceof LocalTime) {
      LocalTime localTime = (LocalTime)paramReadablePartial;
      if (this.iChronology.equals(localTime.iChronology))
        return (this.iLocalMillis < localTime.iLocalMillis) ? -1 : ((this.iLocalMillis == localTime.iLocalMillis) ? 0 : 1); 
    } 
    return super.compareTo(paramReadablePartial);
  }
  
  LocalTime withLocalMillis(long paramLong) { return (paramLong == getLocalMillis()) ? this : new LocalTime(paramLong, getChronology()); }
  
  public LocalTime withFields(ReadablePartial paramReadablePartial) {
    if (paramReadablePartial == null)
      return this; 
    return withLocalMillis(getChronology().set(paramReadablePartial, getLocalMillis()));
  }
  
  public LocalTime withField(DateTimeFieldType paramDateTimeFieldType, int paramInt) {
    if (paramDateTimeFieldType == null)
      throw new IllegalArgumentException("Field must not be null"); 
    if (!isSupported(paramDateTimeFieldType))
      throw new IllegalArgumentException("Field '" + paramDateTimeFieldType + "' is not supported"); 
    long l = paramDateTimeFieldType.getField(getChronology()).set(getLocalMillis(), paramInt);
    return withLocalMillis(l);
  }
  
  public LocalTime withFieldAdded(DurationFieldType paramDurationFieldType, int paramInt) {
    if (paramDurationFieldType == null)
      throw new IllegalArgumentException("Field must not be null"); 
    if (!isSupported(paramDurationFieldType))
      throw new IllegalArgumentException("Field '" + paramDurationFieldType + "' is not supported"); 
    if (paramInt == 0)
      return this; 
    long l = paramDurationFieldType.getField(getChronology()).add(getLocalMillis(), paramInt);
    return withLocalMillis(l);
  }
  
  public LocalTime withPeriodAdded(ReadablePeriod paramReadablePeriod, int paramInt) {
    if (paramReadablePeriod == null || paramInt == 0)
      return this; 
    long l = getChronology().add(paramReadablePeriod, getLocalMillis(), paramInt);
    return withLocalMillis(l);
  }
  
  public LocalTime plus(ReadablePeriod paramReadablePeriod) { return withPeriodAdded(paramReadablePeriod, 1); }
  
  public LocalTime plusHours(int paramInt) {
    if (paramInt == 0)
      return this; 
    long l = getChronology().hours().add(getLocalMillis(), paramInt);
    return withLocalMillis(l);
  }
  
  public LocalTime plusMinutes(int paramInt) {
    if (paramInt == 0)
      return this; 
    long l = getChronology().minutes().add(getLocalMillis(), paramInt);
    return withLocalMillis(l);
  }
  
  public LocalTime plusSeconds(int paramInt) {
    if (paramInt == 0)
      return this; 
    long l = getChronology().seconds().add(getLocalMillis(), paramInt);
    return withLocalMillis(l);
  }
  
  public LocalTime plusMillis(int paramInt) {
    if (paramInt == 0)
      return this; 
    long l = getChronology().millis().add(getLocalMillis(), paramInt);
    return withLocalMillis(l);
  }
  
  public LocalTime minus(ReadablePeriod paramReadablePeriod) { return withPeriodAdded(paramReadablePeriod, -1); }
  
  public LocalTime minusHours(int paramInt) {
    if (paramInt == 0)
      return this; 
    long l = getChronology().hours().subtract(getLocalMillis(), paramInt);
    return withLocalMillis(l);
  }
  
  public LocalTime minusMinutes(int paramInt) {
    if (paramInt == 0)
      return this; 
    long l = getChronology().minutes().subtract(getLocalMillis(), paramInt);
    return withLocalMillis(l);
  }
  
  public LocalTime minusSeconds(int paramInt) {
    if (paramInt == 0)
      return this; 
    long l = getChronology().seconds().subtract(getLocalMillis(), paramInt);
    return withLocalMillis(l);
  }
  
  public LocalTime minusMillis(int paramInt) {
    if (paramInt == 0)
      return this; 
    long l = getChronology().millis().subtract(getLocalMillis(), paramInt);
    return withLocalMillis(l);
  }
  
  public Property property(DateTimeFieldType paramDateTimeFieldType) {
    if (paramDateTimeFieldType == null)
      throw new IllegalArgumentException("The DateTimeFieldType must not be null"); 
    if (!isSupported(paramDateTimeFieldType))
      throw new IllegalArgumentException("Field '" + paramDateTimeFieldType + "' is not supported"); 
    return new Property(this, paramDateTimeFieldType.getField(getChronology()));
  }
  
  public int getHourOfDay() { return getChronology().hourOfDay().get(getLocalMillis()); }
  
  public int getMinuteOfHour() { return getChronology().minuteOfHour().get(getLocalMillis()); }
  
  public int getSecondOfMinute() { return getChronology().secondOfMinute().get(getLocalMillis()); }
  
  public int getMillisOfSecond() { return getChronology().millisOfSecond().get(getLocalMillis()); }
  
  public int getMillisOfDay() { return getChronology().millisOfDay().get(getLocalMillis()); }
  
  public LocalTime withHourOfDay(int paramInt) { return withLocalMillis(getChronology().hourOfDay().set(getLocalMillis(), paramInt)); }
  
  public LocalTime withMinuteOfHour(int paramInt) { return withLocalMillis(getChronology().minuteOfHour().set(getLocalMillis(), paramInt)); }
  
  public LocalTime withSecondOfMinute(int paramInt) { return withLocalMillis(getChronology().secondOfMinute().set(getLocalMillis(), paramInt)); }
  
  public LocalTime withMillisOfSecond(int paramInt) { return withLocalMillis(getChronology().millisOfSecond().set(getLocalMillis(), paramInt)); }
  
  public LocalTime withMillisOfDay(int paramInt) { return withLocalMillis(getChronology().millisOfDay().set(getLocalMillis(), paramInt)); }
  
  public Property hourOfDay() { return new Property(this, getChronology().hourOfDay()); }
  
  public Property minuteOfHour() { return new Property(this, getChronology().minuteOfHour()); }
  
  public Property secondOfMinute() { return new Property(this, getChronology().secondOfMinute()); }
  
  public Property millisOfSecond() { return new Property(this, getChronology().millisOfSecond()); }
  
  public Property millisOfDay() { return new Property(this, getChronology().millisOfDay()); }
  
  public DateTime toDateTimeToday() { return toDateTimeToday(null); }
  
  public DateTime toDateTimeToday(DateTimeZone paramDateTimeZone) {
    Chronology chronology = getChronology().withZone(paramDateTimeZone);
    long l1 = DateTimeUtils.currentTimeMillis();
    long l2 = chronology.set(this, l1);
    return new DateTime(l2, chronology);
  }
  
  @ToString
  public String toString() { return ISODateTimeFormat.time().print(this); }
  
  public String toString(String paramString) {
    if (paramString == null)
      return toString(); 
    return DateTimeFormat.forPattern(paramString).print(this);
  }
  
  public String toString(String paramString, Locale paramLocale) throws IllegalArgumentException {
    if (paramString == null)
      return toString(); 
    return DateTimeFormat.forPattern(paramString).withLocale(paramLocale).print(this);
  }
}
