package org.joda.time.field;

import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DurationField;

public class DividedDateTimeField extends DecoratedDateTimeField {
  private static final long serialVersionUID = 8318475124230605365L;
  
  final int iDivisor;
  
  final DurationField iDurationField;
  
  final DurationField iRangeDurationField;
  
  private final int iMin;
  
  private final int iMax;
  
  public DividedDateTimeField(DateTimeField paramDateTimeField, DateTimeFieldType paramDateTimeFieldType, int paramInt) { this(paramDateTimeField, paramDateTimeField.getRangeDurationField(), paramDateTimeFieldType, paramInt); }
  
  public DividedDateTimeField(DateTimeField paramDateTimeField, DurationField paramDurationField, DateTimeFieldType paramDateTimeFieldType, int paramInt) {
    super(paramDateTimeField, paramDateTimeFieldType);
    if (paramInt < 2)
      throw new IllegalArgumentException("The divisor must be at least 2"); 
    DurationField durationField = paramDateTimeField.getDurationField();
    if (durationField == null) {
      this.iDurationField = null;
    } else {
      this
        .iDurationField = new ScaledDurationField(durationField, paramDateTimeFieldType.getDurationType(), paramInt);
    } 
    this.iRangeDurationField = paramDurationField;
    this.iDivisor = paramInt;
    int i = paramDateTimeField.getMinimumValue();
    int j = (i >= 0) ? (i / paramInt) : ((i + 1) / paramInt - 1);
    int k = paramDateTimeField.getMaximumValue();
    int m = (k >= 0) ? (k / paramInt) : ((k + 1) / paramInt - 1);
    this.iMin = j;
    this.iMax = m;
  }
  
  public DividedDateTimeField(RemainderDateTimeField paramRemainderDateTimeField, DateTimeFieldType paramDateTimeFieldType) { this(paramRemainderDateTimeField, null, paramDateTimeFieldType); }
  
  public DividedDateTimeField(RemainderDateTimeField paramRemainderDateTimeField, DurationField paramDurationField, DateTimeFieldType paramDateTimeFieldType) {
    super(paramRemainderDateTimeField.getWrappedField(), paramDateTimeFieldType);
    int i = this.iDivisor = paramRemainderDateTimeField.iDivisor;
    this.iDurationField = paramRemainderDateTimeField.iRangeField;
    this.iRangeDurationField = paramDurationField;
    DateTimeField dateTimeField = getWrappedField();
    int j = dateTimeField.getMinimumValue();
    int k = (j >= 0) ? (j / i) : ((j + 1) / i - 1);
    int m = dateTimeField.getMaximumValue();
    int n = (m >= 0) ? (m / i) : ((m + 1) / i - 1);
    this.iMin = k;
    this.iMax = n;
  }
  
  public DurationField getRangeDurationField() {
    if (this.iRangeDurationField != null)
      return this.iRangeDurationField; 
    return super.getRangeDurationField();
  }
  
  public int get(long paramLong) {
    int i = getWrappedField().get(paramLong);
    if (i >= 0)
      return i / this.iDivisor; 
    return (i + 1) / this.iDivisor - 1;
  }
  
  public long add(long paramLong, int paramInt) { return getWrappedField().add(paramLong, paramInt * this.iDivisor); }
  
  public long add(long paramLong1, long paramLong2) { return getWrappedField().add(paramLong1, paramLong2 * this.iDivisor); }
  
  public long addWrapField(long paramLong, int paramInt) { return set(paramLong, FieldUtils.getWrappedValue(get(paramLong), paramInt, this.iMin, this.iMax)); }
  
  public int getDifference(long paramLong1, long paramLong2) { return getWrappedField().getDifference(paramLong1, paramLong2) / this.iDivisor; }
  
  public long getDifferenceAsLong(long paramLong1, long paramLong2) { return getWrappedField().getDifferenceAsLong(paramLong1, paramLong2) / this.iDivisor; }
  
  public long set(long paramLong, int paramInt) {
    FieldUtils.verifyValueBounds(this, paramInt, this.iMin, this.iMax);
    int i = getRemainder(getWrappedField().get(paramLong));
    return getWrappedField().set(paramLong, paramInt * this.iDivisor + i);
  }
  
  public DurationField getDurationField() { return this.iDurationField; }
  
  public int getMinimumValue() { return this.iMin; }
  
  public int getMaximumValue() { return this.iMax; }
  
  public long roundFloor(long paramLong) {
    DateTimeField dateTimeField = getWrappedField();
    return dateTimeField.roundFloor(dateTimeField.set(paramLong, get(paramLong) * this.iDivisor));
  }
  
  public long remainder(long paramLong) { return set(paramLong, get(getWrappedField().remainder(paramLong))); }
  
  public int getDivisor() { return this.iDivisor; }
  
  private int getRemainder(int paramInt) {
    if (paramInt >= 0)
      return paramInt % this.iDivisor; 
    return this.iDivisor - 1 + (paramInt + 1) % this.iDivisor;
  }
}
