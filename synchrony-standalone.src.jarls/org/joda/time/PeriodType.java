package org.joda.time;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.joda.time.field.FieldUtils;

public class PeriodType implements Serializable {
  private static final long serialVersionUID = 2274324892792009998L;
  
  private static final Map<PeriodType, Object> cTypes = new HashMap(32);
  
  static int YEAR_INDEX = 0;
  
  static int MONTH_INDEX = 1;
  
  static int WEEK_INDEX = 2;
  
  static int DAY_INDEX = 3;
  
  static int HOUR_INDEX = 4;
  
  static int MINUTE_INDEX = 5;
  
  static int SECOND_INDEX = 6;
  
  static int MILLI_INDEX = 7;
  
  private static PeriodType cStandard;
  
  private static PeriodType cYMDTime;
  
  private static PeriodType cYMD;
  
  private static PeriodType cYWDTime;
  
  private static PeriodType cYWD;
  
  private static PeriodType cYDTime;
  
  private static PeriodType cYD;
  
  private static PeriodType cDTime;
  
  private static PeriodType cTime;
  
  private static PeriodType cYears;
  
  private static PeriodType cMonths;
  
  private static PeriodType cWeeks;
  
  private static PeriodType cDays;
  
  private static PeriodType cHours;
  
  private static PeriodType cMinutes;
  
  private static PeriodType cSeconds;
  
  private static PeriodType cMillis;
  
  private final String iName;
  
  private final DurationFieldType[] iTypes;
  
  private final int[] iIndices;
  
  public static PeriodType standard() {
    PeriodType periodType = cStandard;
    if (periodType == null) {
      periodType = new PeriodType("Standard", new DurationFieldType[] { null, (new DurationFieldType[8][0] = DurationFieldType.years()).months(), (new DurationFieldType[8][2] = DurationFieldType.weeks()).days(), (new DurationFieldType[8][4] = DurationFieldType.hours()).minutes(), (new DurationFieldType[8][6] = DurationFieldType.seconds()).millis() }, new int[] { 0, 1, 2, 3, 4, 5, 6, 7 });
      cStandard = periodType;
    } 
    return periodType;
  }
  
  public static PeriodType yearMonthDayTime() {
    PeriodType periodType = cYMDTime;
    if (periodType == null) {
      periodType = new PeriodType("YearMonthDayTime", new DurationFieldType[] { null, (new DurationFieldType[7][0] = DurationFieldType.years()).months(), DurationFieldType.days(), (new DurationFieldType[7][3] = DurationFieldType.hours()).minutes(), (new DurationFieldType[7][5] = DurationFieldType.seconds()).millis() }, new int[] { 0, 1, -1, 2, 3, 4, 5, 6 });
      cYMDTime = periodType;
    } 
    return periodType;
  }
  
  public static PeriodType yearMonthDay() {
    PeriodType periodType = cYMD;
    if (periodType == null) {
      periodType = new PeriodType("YearMonthDay", new DurationFieldType[] { null, (new DurationFieldType[3][0] = DurationFieldType.years()).months(), DurationFieldType.days() }, new int[] { 0, 1, -1, 2, -1, -1, -1, -1 });
      cYMD = periodType;
    } 
    return periodType;
  }
  
  public static PeriodType yearWeekDayTime() {
    PeriodType periodType = cYWDTime;
    if (periodType == null) {
      periodType = new PeriodType("YearWeekDayTime", new DurationFieldType[] { DurationFieldType.years(), (new DurationFieldType[7][1] = DurationFieldType.weeks()).days(), (new DurationFieldType[7][3] = DurationFieldType.hours()).minutes(), (new DurationFieldType[7][5] = DurationFieldType.seconds()).millis() }, new int[] { 0, -1, 1, 2, 3, 4, 5, 6 });
      cYWDTime = periodType;
    } 
    return periodType;
  }
  
  public static PeriodType yearWeekDay() {
    PeriodType periodType = cYWD;
    if (periodType == null) {
      periodType = new PeriodType("YearWeekDay", new DurationFieldType[] { DurationFieldType.years(), (new DurationFieldType[3][1] = DurationFieldType.weeks()).days() }, new int[] { 0, -1, 1, 2, -1, -1, -1, -1 });
      cYWD = periodType;
    } 
    return periodType;
  }
  
  public static PeriodType yearDayTime() {
    PeriodType periodType = cYDTime;
    if (periodType == null) {
      periodType = new PeriodType("YearDayTime", new DurationFieldType[] { null, (new DurationFieldType[6][0] = DurationFieldType.years()).days(), (new DurationFieldType[6][2] = DurationFieldType.hours()).minutes(), (new DurationFieldType[6][4] = DurationFieldType.seconds()).millis() }, new int[] { 0, -1, -1, 1, 2, 3, 4, 5 });
      cYDTime = periodType;
    } 
    return periodType;
  }
  
  public static PeriodType yearDay() {
    PeriodType periodType = cYD;
    if (periodType == null) {
      periodType = new PeriodType("YearDay", new DurationFieldType[] { null, (new DurationFieldType[2][0] = DurationFieldType.years()).days() }, new int[] { 0, -1, -1, 1, -1, -1, -1, -1 });
      cYD = periodType;
    } 
    return periodType;
  }
  
  public static PeriodType dayTime() {
    PeriodType periodType = cDTime;
    if (periodType == null) {
      periodType = new PeriodType("DayTime", new DurationFieldType[] { DurationFieldType.days(), (new DurationFieldType[5][1] = DurationFieldType.hours()).minutes(), (new DurationFieldType[5][3] = DurationFieldType.seconds()).millis() }, new int[] { -1, -1, -1, 0, 1, 2, 3, 4 });
      cDTime = periodType;
    } 
    return periodType;
  }
  
  public static PeriodType time() {
    PeriodType periodType = cTime;
    if (periodType == null) {
      periodType = new PeriodType("Time", new DurationFieldType[] { null, (new DurationFieldType[4][0] = DurationFieldType.hours()).minutes(), (new DurationFieldType[4][2] = DurationFieldType.seconds()).millis() }, new int[] { -1, -1, -1, -1, 0, 1, 2, 3 });
      cTime = periodType;
    } 
    return periodType;
  }
  
  public static PeriodType years() {
    PeriodType periodType = cYears;
    if (periodType == null) {
      periodType = new PeriodType("Years", new DurationFieldType[] { DurationFieldType.years() }, new int[] { 0, -1, -1, -1, -1, -1, -1, -1 });
      cYears = periodType;
    } 
    return periodType;
  }
  
  public static PeriodType months() {
    PeriodType periodType = cMonths;
    if (periodType == null) {
      periodType = new PeriodType("Months", new DurationFieldType[] { DurationFieldType.months() }, new int[] { -1, 0, -1, -1, -1, -1, -1, -1 });
      cMonths = periodType;
    } 
    return periodType;
  }
  
  public static PeriodType weeks() {
    PeriodType periodType = cWeeks;
    if (periodType == null) {
      periodType = new PeriodType("Weeks", new DurationFieldType[] { DurationFieldType.weeks() }, new int[] { -1, -1, 0, -1, -1, -1, -1, -1 });
      cWeeks = periodType;
    } 
    return periodType;
  }
  
  public static PeriodType days() {
    PeriodType periodType = cDays;
    if (periodType == null) {
      periodType = new PeriodType("Days", new DurationFieldType[] { DurationFieldType.days() }, new int[] { -1, -1, -1, 0, -1, -1, -1, -1 });
      cDays = periodType;
    } 
    return periodType;
  }
  
  public static PeriodType hours() {
    PeriodType periodType = cHours;
    if (periodType == null) {
      periodType = new PeriodType("Hours", new DurationFieldType[] { DurationFieldType.hours() }, new int[] { -1, -1, -1, -1, 0, -1, -1, -1 });
      cHours = periodType;
    } 
    return periodType;
  }
  
  public static PeriodType minutes() {
    PeriodType periodType = cMinutes;
    if (periodType == null) {
      periodType = new PeriodType("Minutes", new DurationFieldType[] { DurationFieldType.minutes() }, new int[] { -1, -1, -1, -1, -1, 0, -1, -1 });
      cMinutes = periodType;
    } 
    return periodType;
  }
  
  public static PeriodType seconds() {
    PeriodType periodType = cSeconds;
    if (periodType == null) {
      periodType = new PeriodType("Seconds", new DurationFieldType[] { DurationFieldType.seconds() }, new int[] { -1, -1, -1, -1, -1, -1, 0, -1 });
      cSeconds = periodType;
    } 
    return periodType;
  }
  
  public static PeriodType millis() {
    PeriodType periodType = cMillis;
    if (periodType == null) {
      periodType = new PeriodType("Millis", new DurationFieldType[] { DurationFieldType.millis() }, new int[] { -1, -1, -1, -1, -1, -1, -1, 0 });
      cMillis = periodType;
    } 
    return periodType;
  }
  
  public static PeriodType forFields(DurationFieldType[] paramArrayOfDurationFieldType) {
    if (paramArrayOfDurationFieldType == null || paramArrayOfDurationFieldType.length == 0)
      throw new IllegalArgumentException("Types array must not be null or empty"); 
    for (byte b = 0; b < paramArrayOfDurationFieldType.length; b++) {
      if (paramArrayOfDurationFieldType[b] == null)
        throw new IllegalArgumentException("Types array must not contain null"); 
    } 
    Map map = cTypes;
    if (map.isEmpty()) {
      map.put(standard(), standard());
      map.put(yearMonthDayTime(), yearMonthDayTime());
      map.put(yearMonthDay(), yearMonthDay());
      map.put(yearWeekDayTime(), yearWeekDayTime());
      map.put(yearWeekDay(), yearWeekDay());
      map.put(yearDayTime(), yearDayTime());
      map.put(yearDay(), yearDay());
      map.put(dayTime(), dayTime());
      map.put(time(), time());
      map.put(years(), years());
      map.put(months(), months());
      map.put(weeks(), weeks());
      map.put(days(), days());
      map.put(hours(), hours());
      map.put(minutes(), minutes());
      map.put(seconds(), seconds());
      map.put(millis(), millis());
    } 
    PeriodType periodType1 = new PeriodType(null, paramArrayOfDurationFieldType, null);
    Object object = map.get(periodType1);
    if (object instanceof PeriodType)
      return (PeriodType)object; 
    if (object != null)
      throw new IllegalArgumentException("PeriodType does not support fields: " + object); 
    PeriodType periodType2 = standard();
    ArrayList arrayList = new ArrayList(Arrays.asList(paramArrayOfDurationFieldType));
    if (!arrayList.remove(DurationFieldType.years()))
      periodType2 = periodType2.withYearsRemoved(); 
    if (!arrayList.remove(DurationFieldType.months()))
      periodType2 = periodType2.withMonthsRemoved(); 
    if (!arrayList.remove(DurationFieldType.weeks()))
      periodType2 = periodType2.withWeeksRemoved(); 
    if (!arrayList.remove(DurationFieldType.days()))
      periodType2 = periodType2.withDaysRemoved(); 
    if (!arrayList.remove(DurationFieldType.hours()))
      periodType2 = periodType2.withHoursRemoved(); 
    if (!arrayList.remove(DurationFieldType.minutes()))
      periodType2 = periodType2.withMinutesRemoved(); 
    if (!arrayList.remove(DurationFieldType.seconds()))
      periodType2 = periodType2.withSecondsRemoved(); 
    if (!arrayList.remove(DurationFieldType.millis()))
      periodType2 = periodType2.withMillisRemoved(); 
    if (arrayList.size() > 0) {
      map.put(periodType1, arrayList);
      throw new IllegalArgumentException("PeriodType does not support fields: " + arrayList);
    } 
    PeriodType periodType3 = new PeriodType(null, periodType2.iTypes, null);
    PeriodType periodType4 = (PeriodType)map.get(periodType3);
    if (periodType4 != null) {
      map.put(periodType3, periodType4);
      return periodType4;
    } 
    map.put(periodType3, periodType2);
    return periodType2;
  }
  
  protected PeriodType(String paramString, DurationFieldType[] paramArrayOfDurationFieldType, int[] paramArrayOfInt) {
    this.iName = paramString;
    this.iTypes = paramArrayOfDurationFieldType;
    this.iIndices = paramArrayOfInt;
  }
  
  public String getName() { return this.iName; }
  
  public int size() { return this.iTypes.length; }
  
  public DurationFieldType getFieldType(int paramInt) { return this.iTypes[paramInt]; }
  
  public boolean isSupported(DurationFieldType paramDurationFieldType) { return (indexOf(paramDurationFieldType) >= 0); }
  
  public int indexOf(DurationFieldType paramDurationFieldType) {
    byte b;
    int i;
    for (b = 0, i = size(); b < i; b++) {
      if (this.iTypes[b] == paramDurationFieldType)
        return b; 
    } 
    return -1;
  }
  
  public String toString() { return "PeriodType[" + getName() + "]"; }
  
  int getIndexedField(ReadablePeriod paramReadablePeriod, int paramInt) {
    int i = this.iIndices[paramInt];
    return (i == -1) ? 0 : paramReadablePeriod.getValue(i);
  }
  
  boolean setIndexedField(ReadablePeriod paramReadablePeriod, int paramInt1, int[] paramArrayOfInt, int paramInt2) {
    int i = this.iIndices[paramInt1];
    if (i == -1)
      throw new UnsupportedOperationException("Field is not supported"); 
    paramArrayOfInt[i] = paramInt2;
    return true;
  }
  
  boolean addIndexedField(ReadablePeriod paramReadablePeriod, int paramInt1, int[] paramArrayOfInt, int paramInt2) {
    if (paramInt2 == 0)
      return false; 
    int i = this.iIndices[paramInt1];
    if (i == -1)
      throw new UnsupportedOperationException("Field is not supported"); 
    paramArrayOfInt[i] = FieldUtils.safeAdd(paramArrayOfInt[i], paramInt2);
    return true;
  }
  
  public PeriodType withYearsRemoved() { return withFieldRemoved(0, "NoYears"); }
  
  public PeriodType withMonthsRemoved() { return withFieldRemoved(1, "NoMonths"); }
  
  public PeriodType withWeeksRemoved() { return withFieldRemoved(2, "NoWeeks"); }
  
  public PeriodType withDaysRemoved() { return withFieldRemoved(3, "NoDays"); }
  
  public PeriodType withHoursRemoved() { return withFieldRemoved(4, "NoHours"); }
  
  public PeriodType withMinutesRemoved() { return withFieldRemoved(5, "NoMinutes"); }
  
  public PeriodType withSecondsRemoved() { return withFieldRemoved(6, "NoSeconds"); }
  
  public PeriodType withMillisRemoved() { return withFieldRemoved(7, "NoMillis"); }
  
  private PeriodType withFieldRemoved(int paramInt, String paramString) {
    int i = this.iIndices[paramInt];
    if (i == -1)
      return this; 
    DurationFieldType[] arrayOfDurationFieldType = new DurationFieldType[size() - 1];
    for (byte b1 = 0; b1 < this.iTypes.length; b1++) {
      if (b1 < i) {
        arrayOfDurationFieldType[b1] = this.iTypes[b1];
      } else if (b1 > i) {
        arrayOfDurationFieldType[b1 - true] = this.iTypes[b1];
      } 
    } 
    int[] arrayOfInt = new int[8];
    for (byte b2 = 0; b2 < arrayOfInt.length; b2++) {
      if (b2 < paramInt) {
        arrayOfInt[b2] = this.iIndices[b2];
      } else if (b2 > paramInt) {
        arrayOfInt[b2] = (this.iIndices[b2] == -1) ? -1 : (this.iIndices[b2] - 1);
      } else {
        arrayOfInt[b2] = -1;
      } 
    } 
    return new PeriodType(getName() + paramString, arrayOfDurationFieldType, arrayOfInt);
  }
  
  public boolean equals(Object paramObject) {
    if (this == paramObject)
      return true; 
    if (!(paramObject instanceof PeriodType))
      return false; 
    PeriodType periodType = (PeriodType)paramObject;
    return Arrays.equals(this.iTypes, periodType.iTypes);
  }
  
  public int hashCode() {
    int i = 0;
    for (byte b = 0; b < this.iTypes.length; b++)
      i += this.iTypes[b].hashCode(); 
    return i;
  }
}
