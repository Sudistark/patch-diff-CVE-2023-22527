package org.joda.time.format;

import java.io.IOException;
import java.io.Writer;
import java.util.Locale;
import org.joda.time.Chronology;
import org.joda.time.DateTimeZone;
import org.joda.time.ReadablePartial;

class DateTimePrinterInternalPrinter implements InternalPrinter {
  private final DateTimePrinter underlying;
  
  static InternalPrinter of(DateTimePrinter paramDateTimePrinter) {
    if (paramDateTimePrinter instanceof InternalPrinterDateTimePrinter)
      return (InternalPrinter)paramDateTimePrinter; 
    if (paramDateTimePrinter == null)
      return null; 
    return new DateTimePrinterInternalPrinter(paramDateTimePrinter);
  }
  
  private DateTimePrinterInternalPrinter(DateTimePrinter paramDateTimePrinter) { this.underlying = paramDateTimePrinter; }
  
  DateTimePrinter getUnderlying() { return this.underlying; }
  
  public int estimatePrintedLength() { return this.underlying.estimatePrintedLength(); }
  
  public void printTo(Appendable paramAppendable, long paramLong, Chronology paramChronology, int paramInt, DateTimeZone paramDateTimeZone, Locale paramLocale) throws IOException {
    if (paramAppendable instanceof StringBuffer) {
      StringBuffer stringBuffer = (StringBuffer)paramAppendable;
      this.underlying.printTo(stringBuffer, paramLong, paramChronology, paramInt, paramDateTimeZone, paramLocale);
    } else if (paramAppendable instanceof Writer) {
      Writer writer = (Writer)paramAppendable;
      this.underlying.printTo(writer, paramLong, paramChronology, paramInt, paramDateTimeZone, paramLocale);
    } else {
      StringBuffer stringBuffer = new StringBuffer(estimatePrintedLength());
      this.underlying.printTo(stringBuffer, paramLong, paramChronology, paramInt, paramDateTimeZone, paramLocale);
      paramAppendable.append(stringBuffer);
    } 
  }
  
  public void printTo(Appendable paramAppendable, ReadablePartial paramReadablePartial, Locale paramLocale) throws IOException {
    if (paramAppendable instanceof StringBuffer) {
      StringBuffer stringBuffer = (StringBuffer)paramAppendable;
      this.underlying.printTo(stringBuffer, paramReadablePartial, paramLocale);
    } else if (paramAppendable instanceof Writer) {
      Writer writer = (Writer)paramAppendable;
      this.underlying.printTo(writer, paramReadablePartial, paramLocale);
    } else {
      StringBuffer stringBuffer = new StringBuffer(estimatePrintedLength());
      this.underlying.printTo(stringBuffer, paramReadablePartial, paramLocale);
      paramAppendable.append(stringBuffer);
    } 
  }
}
