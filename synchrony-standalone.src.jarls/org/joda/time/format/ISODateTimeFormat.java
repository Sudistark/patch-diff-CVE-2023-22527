package org.joda.time.format;

import java.util.Collection;
import java.util.HashSet;
import org.joda.time.DateTimeFieldType;

public class ISODateTimeFormat {
  public static DateTimeFormatter forFields(Collection<DateTimeFieldType> paramCollection, boolean paramBoolean1, boolean paramBoolean2) {
    if (paramCollection == null || paramCollection.size() == 0)
      throw new IllegalArgumentException("The fields must not be null or empty"); 
    HashSet hashSet = new HashSet(paramCollection);
    int i = hashSet.size();
    boolean bool1 = false;
    DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
    if (hashSet.contains(DateTimeFieldType.monthOfYear())) {
      bool1 = dateByMonth(dateTimeFormatterBuilder, hashSet, paramBoolean1, paramBoolean2);
    } else if (hashSet.contains(DateTimeFieldType.dayOfYear())) {
      bool1 = dateByOrdinal(dateTimeFormatterBuilder, hashSet, paramBoolean1, paramBoolean2);
    } else if (hashSet.contains(DateTimeFieldType.weekOfWeekyear())) {
      bool1 = dateByWeek(dateTimeFormatterBuilder, hashSet, paramBoolean1, paramBoolean2);
    } else if (hashSet.contains(DateTimeFieldType.dayOfMonth())) {
      bool1 = dateByMonth(dateTimeFormatterBuilder, hashSet, paramBoolean1, paramBoolean2);
    } else if (hashSet.contains(DateTimeFieldType.dayOfWeek())) {
      bool1 = dateByWeek(dateTimeFormatterBuilder, hashSet, paramBoolean1, paramBoolean2);
    } else if (hashSet.remove(DateTimeFieldType.year())) {
      dateTimeFormatterBuilder.append(Constants.access$000());
      bool1 = true;
    } else if (hashSet.remove(DateTimeFieldType.weekyear())) {
      dateTimeFormatterBuilder.append(Constants.access$100());
      bool1 = true;
    } 
    boolean bool2 = (hashSet.size() < i);
    time(dateTimeFormatterBuilder, hashSet, paramBoolean1, paramBoolean2, bool1, bool2);
    if (!dateTimeFormatterBuilder.canBuildFormatter())
      throw new IllegalArgumentException("No valid format for fields: " + paramCollection); 
    try {
      paramCollection.retainAll(hashSet);
    } catch (UnsupportedOperationException unsupportedOperationException) {}
    return dateTimeFormatterBuilder.toFormatter();
  }
  
  private static boolean dateByMonth(DateTimeFormatterBuilder paramDateTimeFormatterBuilder, Collection<DateTimeFieldType> paramCollection, boolean paramBoolean1, boolean paramBoolean2) {
    boolean bool = false;
    if (paramCollection.remove(DateTimeFieldType.year())) {
      paramDateTimeFormatterBuilder.append(Constants.access$000());
      if (paramCollection.remove(DateTimeFieldType.monthOfYear())) {
        if (paramCollection.remove(DateTimeFieldType.dayOfMonth())) {
          appendSeparator(paramDateTimeFormatterBuilder, paramBoolean1);
          paramDateTimeFormatterBuilder.appendMonthOfYear(2);
          appendSeparator(paramDateTimeFormatterBuilder, paramBoolean1);
          paramDateTimeFormatterBuilder.appendDayOfMonth(2);
        } else {
          paramDateTimeFormatterBuilder.appendLiteral('-');
          paramDateTimeFormatterBuilder.appendMonthOfYear(2);
          bool = true;
        } 
      } else if (paramCollection.remove(DateTimeFieldType.dayOfMonth())) {
        checkNotStrictISO(paramCollection, paramBoolean2);
        paramDateTimeFormatterBuilder.appendLiteral('-');
        paramDateTimeFormatterBuilder.appendLiteral('-');
        paramDateTimeFormatterBuilder.appendDayOfMonth(2);
      } else {
        bool = true;
      } 
    } else if (paramCollection.remove(DateTimeFieldType.monthOfYear())) {
      paramDateTimeFormatterBuilder.appendLiteral('-');
      paramDateTimeFormatterBuilder.appendLiteral('-');
      paramDateTimeFormatterBuilder.appendMonthOfYear(2);
      if (paramCollection.remove(DateTimeFieldType.dayOfMonth())) {
        appendSeparator(paramDateTimeFormatterBuilder, paramBoolean1);
        paramDateTimeFormatterBuilder.appendDayOfMonth(2);
      } else {
        bool = true;
      } 
    } else if (paramCollection.remove(DateTimeFieldType.dayOfMonth())) {
      paramDateTimeFormatterBuilder.appendLiteral('-');
      paramDateTimeFormatterBuilder.appendLiteral('-');
      paramDateTimeFormatterBuilder.appendLiteral('-');
      paramDateTimeFormatterBuilder.appendDayOfMonth(2);
    } 
    return bool;
  }
  
  private static boolean dateByOrdinal(DateTimeFormatterBuilder paramDateTimeFormatterBuilder, Collection<DateTimeFieldType> paramCollection, boolean paramBoolean1, boolean paramBoolean2) {
    boolean bool = false;
    if (paramCollection.remove(DateTimeFieldType.year())) {
      paramDateTimeFormatterBuilder.append(Constants.access$000());
      if (paramCollection.remove(DateTimeFieldType.dayOfYear())) {
        appendSeparator(paramDateTimeFormatterBuilder, paramBoolean1);
        paramDateTimeFormatterBuilder.appendDayOfYear(3);
      } else {
        bool = true;
      } 
    } else if (paramCollection.remove(DateTimeFieldType.dayOfYear())) {
      paramDateTimeFormatterBuilder.appendLiteral('-');
      paramDateTimeFormatterBuilder.appendDayOfYear(3);
    } 
    return bool;
  }
  
  private static boolean dateByWeek(DateTimeFormatterBuilder paramDateTimeFormatterBuilder, Collection<DateTimeFieldType> paramCollection, boolean paramBoolean1, boolean paramBoolean2) {
    boolean bool = false;
    if (paramCollection.remove(DateTimeFieldType.weekyear())) {
      paramDateTimeFormatterBuilder.append(Constants.access$100());
      if (paramCollection.remove(DateTimeFieldType.weekOfWeekyear())) {
        appendSeparator(paramDateTimeFormatterBuilder, paramBoolean1);
        paramDateTimeFormatterBuilder.appendLiteral('W');
        paramDateTimeFormatterBuilder.appendWeekOfWeekyear(2);
        if (paramCollection.remove(DateTimeFieldType.dayOfWeek())) {
          appendSeparator(paramDateTimeFormatterBuilder, paramBoolean1);
          paramDateTimeFormatterBuilder.appendDayOfWeek(1);
        } else {
          bool = true;
        } 
      } else if (paramCollection.remove(DateTimeFieldType.dayOfWeek())) {
        checkNotStrictISO(paramCollection, paramBoolean2);
        appendSeparator(paramDateTimeFormatterBuilder, paramBoolean1);
        paramDateTimeFormatterBuilder.appendLiteral('W');
        paramDateTimeFormatterBuilder.appendLiteral('-');
        paramDateTimeFormatterBuilder.appendDayOfWeek(1);
      } else {
        bool = true;
      } 
    } else if (paramCollection.remove(DateTimeFieldType.weekOfWeekyear())) {
      paramDateTimeFormatterBuilder.appendLiteral('-');
      paramDateTimeFormatterBuilder.appendLiteral('W');
      paramDateTimeFormatterBuilder.appendWeekOfWeekyear(2);
      if (paramCollection.remove(DateTimeFieldType.dayOfWeek())) {
        appendSeparator(paramDateTimeFormatterBuilder, paramBoolean1);
        paramDateTimeFormatterBuilder.appendDayOfWeek(1);
      } else {
        bool = true;
      } 
    } else if (paramCollection.remove(DateTimeFieldType.dayOfWeek())) {
      paramDateTimeFormatterBuilder.appendLiteral('-');
      paramDateTimeFormatterBuilder.appendLiteral('W');
      paramDateTimeFormatterBuilder.appendLiteral('-');
      paramDateTimeFormatterBuilder.appendDayOfWeek(1);
    } 
    return bool;
  }
  
  private static void time(DateTimeFormatterBuilder paramDateTimeFormatterBuilder, Collection<DateTimeFieldType> paramCollection, boolean paramBoolean1, boolean paramBoolean2, boolean paramBoolean3, boolean paramBoolean4) {
    boolean bool1 = paramCollection.remove(DateTimeFieldType.hourOfDay());
    boolean bool2 = paramCollection.remove(DateTimeFieldType.minuteOfHour());
    boolean bool3 = paramCollection.remove(DateTimeFieldType.secondOfMinute());
    boolean bool4 = paramCollection.remove(DateTimeFieldType.millisOfSecond());
    if (!bool1 && !bool2 && !bool3 && !bool4)
      return; 
    if (bool1 || bool2 || bool3 || bool4) {
      if (paramBoolean2 && paramBoolean3)
        throw new IllegalArgumentException("No valid ISO8601 format for fields because Date was reduced precision: " + paramCollection); 
      if (paramBoolean4)
        paramDateTimeFormatterBuilder.appendLiteral('T'); 
    } 
    if ((!bool1 || !bool2 || !bool3) && (!bool1 || bool3 || bool4)) {
      if (paramBoolean2 && paramBoolean4)
        throw new IllegalArgumentException("No valid ISO8601 format for fields because Time was truncated: " + paramCollection); 
      if (bool1 || ((!bool2 || !bool3) && (!bool2 || bool4) && !bool3))
        if (paramBoolean2)
          throw new IllegalArgumentException("No valid ISO8601 format for fields: " + paramCollection);  
    } 
    if (bool1) {
      paramDateTimeFormatterBuilder.appendHourOfDay(2);
    } else if (bool2 || bool3 || bool4) {
      paramDateTimeFormatterBuilder.appendLiteral('-');
    } 
    if (paramBoolean1 && bool1 && bool2)
      paramDateTimeFormatterBuilder.appendLiteral(':'); 
    if (bool2) {
      paramDateTimeFormatterBuilder.appendMinuteOfHour(2);
    } else if (bool3 || bool4) {
      paramDateTimeFormatterBuilder.appendLiteral('-');
    } 
    if (paramBoolean1 && bool2 && bool3)
      paramDateTimeFormatterBuilder.appendLiteral(':'); 
    if (bool3) {
      paramDateTimeFormatterBuilder.appendSecondOfMinute(2);
    } else if (bool4) {
      paramDateTimeFormatterBuilder.appendLiteral('-');
    } 
    if (bool4) {
      paramDateTimeFormatterBuilder.appendLiteral('.');
      paramDateTimeFormatterBuilder.appendMillisOfSecond(3);
    } 
  }
  
  private static void checkNotStrictISO(Collection<DateTimeFieldType> paramCollection, boolean paramBoolean) {
    if (paramBoolean)
      throw new IllegalArgumentException("No valid ISO8601 format for fields: " + paramCollection); 
  }
  
  private static void appendSeparator(DateTimeFormatterBuilder paramDateTimeFormatterBuilder, boolean paramBoolean) {
    if (paramBoolean)
      paramDateTimeFormatterBuilder.appendLiteral('-'); 
  }
  
  public static DateTimeFormatter dateParser() { return Constants.access$200(); }
  
  public static DateTimeFormatter localDateParser() { return Constants.access$300(); }
  
  public static DateTimeFormatter dateElementParser() { return Constants.access$400(); }
  
  public static DateTimeFormatter timeParser() { return Constants.access$500(); }
  
  public static DateTimeFormatter localTimeParser() { return Constants.access$600(); }
  
  public static DateTimeFormatter timeElementParser() { return Constants.access$700(); }
  
  public static DateTimeFormatter dateTimeParser() { return Constants.access$800(); }
  
  public static DateTimeFormatter dateOptionalTimeParser() { return Constants.access$900(); }
  
  public static DateTimeFormatter localDateOptionalTimeParser() { return Constants.access$1000(); }
  
  public static DateTimeFormatter date() { return yearMonthDay(); }
  
  public static DateTimeFormatter time() { return Constants.access$1100(); }
  
  public static DateTimeFormatter timeNoMillis() { return Constants.access$1200(); }
  
  public static DateTimeFormatter tTime() { return Constants.access$1300(); }
  
  public static DateTimeFormatter tTimeNoMillis() { return Constants.access$1400(); }
  
  public static DateTimeFormatter dateTime() { return Constants.access$1500(); }
  
  public static DateTimeFormatter dateTimeNoMillis() { return Constants.access$1600(); }
  
  public static DateTimeFormatter ordinalDate() { return Constants.access$1700(); }
  
  public static DateTimeFormatter ordinalDateTime() { return Constants.access$1800(); }
  
  public static DateTimeFormatter ordinalDateTimeNoMillis() { return Constants.access$1900(); }
  
  public static DateTimeFormatter weekDate() { return Constants.access$2000(); }
  
  public static DateTimeFormatter weekDateTime() { return Constants.access$2100(); }
  
  public static DateTimeFormatter weekDateTimeNoMillis() { return Constants.access$2200(); }
  
  public static DateTimeFormatter basicDate() { return Constants.access$2300(); }
  
  public static DateTimeFormatter basicTime() { return Constants.access$2400(); }
  
  public static DateTimeFormatter basicTimeNoMillis() { return Constants.access$2500(); }
  
  public static DateTimeFormatter basicTTime() { return Constants.access$2600(); }
  
  public static DateTimeFormatter basicTTimeNoMillis() { return Constants.access$2700(); }
  
  public static DateTimeFormatter basicDateTime() { return Constants.access$2800(); }
  
  public static DateTimeFormatter basicDateTimeNoMillis() { return Constants.access$2900(); }
  
  public static DateTimeFormatter basicOrdinalDate() { return Constants.access$3000(); }
  
  public static DateTimeFormatter basicOrdinalDateTime() { return Constants.access$3100(); }
  
  public static DateTimeFormatter basicOrdinalDateTimeNoMillis() { return Constants.access$3200(); }
  
  public static DateTimeFormatter basicWeekDate() { return Constants.access$3300(); }
  
  public static DateTimeFormatter basicWeekDateTime() { return Constants.access$3400(); }
  
  public static DateTimeFormatter basicWeekDateTimeNoMillis() { return Constants.access$3500(); }
  
  public static DateTimeFormatter year() { return Constants.access$000(); }
  
  public static DateTimeFormatter yearMonth() { return Constants.access$3600(); }
  
  public static DateTimeFormatter yearMonthDay() { return Constants.access$3700(); }
  
  public static DateTimeFormatter weekyear() { return Constants.access$100(); }
  
  public static DateTimeFormatter weekyearWeek() { return Constants.access$3800(); }
  
  public static DateTimeFormatter weekyearWeekDay() { return Constants.access$2000(); }
  
  public static DateTimeFormatter hour() { return Constants.access$3900(); }
  
  public static DateTimeFormatter hourMinute() { return Constants.access$4000(); }
  
  public static DateTimeFormatter hourMinuteSecond() { return Constants.access$4100(); }
  
  public static DateTimeFormatter hourMinuteSecondMillis() { return Constants.access$4200(); }
  
  public static DateTimeFormatter hourMinuteSecondFraction() { return Constants.access$4300(); }
  
  public static DateTimeFormatter dateHour() { return Constants.access$4400(); }
  
  public static DateTimeFormatter dateHourMinute() { return Constants.access$4500(); }
  
  public static DateTimeFormatter dateHourMinuteSecond() { return Constants.access$4600(); }
  
  public static DateTimeFormatter dateHourMinuteSecondMillis() { return Constants.access$4700(); }
  
  public static DateTimeFormatter dateHourMinuteSecondFraction() { return Constants.access$4800(); }
}
