package org.joda.time.format;

import java.util.Enumeration;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

public class PeriodFormat {
  private static final String BUNDLE_NAME = "org.joda.time.format.messages";
  
  private static final ConcurrentMap<Locale, PeriodFormatter> FORMATTERS = new ConcurrentHashMap();
  
  public static PeriodFormatter getDefault() { return wordBased(Locale.ENGLISH); }
  
  public static PeriodFormatter wordBased() { return wordBased(Locale.getDefault()); }
  
  public static PeriodFormatter wordBased(Locale paramLocale) {
    PeriodFormatter periodFormatter = (PeriodFormatter)FORMATTERS.get(paramLocale);
    if (periodFormatter == null) {
      DynamicWordBased dynamicWordBased = new DynamicWordBased(buildWordBased(paramLocale));
      periodFormatter = new PeriodFormatter(dynamicWordBased, dynamicWordBased, paramLocale, null);
      PeriodFormatter periodFormatter1 = (PeriodFormatter)FORMATTERS.putIfAbsent(paramLocale, periodFormatter);
      if (periodFormatter1 != null)
        periodFormatter = periodFormatter1; 
    } 
    return periodFormatter;
  }
  
  private static PeriodFormatter buildWordBased(Locale paramLocale) {
    ResourceBundle resourceBundle = ResourceBundle.getBundle("org.joda.time.format.messages", paramLocale);
    if (containsKey(resourceBundle, "PeriodFormat.regex.separator"))
      return buildRegExFormatter(resourceBundle, paramLocale); 
    return buildNonRegExFormatter(resourceBundle, paramLocale);
  }
  
  private static PeriodFormatter buildRegExFormatter(ResourceBundle paramResourceBundle, Locale paramLocale) {
    String[] arrayOfString = retrieveVariants(paramResourceBundle);
    String str = paramResourceBundle.getString("PeriodFormat.regex.separator");
    PeriodFormatterBuilder periodFormatterBuilder = new PeriodFormatterBuilder();
    periodFormatterBuilder.appendYears();
    if (containsKey(paramResourceBundle, "PeriodFormat.years.regex")) {
      periodFormatterBuilder.appendSuffix(paramResourceBundle
          .getString("PeriodFormat.years.regex").split(str), paramResourceBundle
          .getString("PeriodFormat.years.list").split(str));
    } else {
      periodFormatterBuilder.appendSuffix(paramResourceBundle.getString("PeriodFormat.year"), paramResourceBundle.getString("PeriodFormat.years"));
    } 
    periodFormatterBuilder.appendSeparator(paramResourceBundle.getString("PeriodFormat.commaspace"), paramResourceBundle.getString("PeriodFormat.spaceandspace"), arrayOfString);
    periodFormatterBuilder.appendMonths();
    if (containsKey(paramResourceBundle, "PeriodFormat.months.regex")) {
      periodFormatterBuilder.appendSuffix(paramResourceBundle
          .getString("PeriodFormat.months.regex").split(str), paramResourceBundle
          .getString("PeriodFormat.months.list").split(str));
    } else {
      periodFormatterBuilder.appendSuffix(paramResourceBundle.getString("PeriodFormat.month"), paramResourceBundle.getString("PeriodFormat.months"));
    } 
    periodFormatterBuilder.appendSeparator(paramResourceBundle.getString("PeriodFormat.commaspace"), paramResourceBundle.getString("PeriodFormat.spaceandspace"), arrayOfString);
    periodFormatterBuilder.appendWeeks();
    if (containsKey(paramResourceBundle, "PeriodFormat.weeks.regex")) {
      periodFormatterBuilder.appendSuffix(paramResourceBundle
          .getString("PeriodFormat.weeks.regex").split(str), paramResourceBundle
          .getString("PeriodFormat.weeks.list").split(str));
    } else {
      periodFormatterBuilder.appendSuffix(paramResourceBundle.getString("PeriodFormat.week"), paramResourceBundle.getString("PeriodFormat.weeks"));
    } 
    periodFormatterBuilder.appendSeparator(paramResourceBundle.getString("PeriodFormat.commaspace"), paramResourceBundle.getString("PeriodFormat.spaceandspace"), arrayOfString);
    periodFormatterBuilder.appendDays();
    if (containsKey(paramResourceBundle, "PeriodFormat.days.regex")) {
      periodFormatterBuilder.appendSuffix(paramResourceBundle
          .getString("PeriodFormat.days.regex").split(str), paramResourceBundle
          .getString("PeriodFormat.days.list").split(str));
    } else {
      periodFormatterBuilder.appendSuffix(paramResourceBundle.getString("PeriodFormat.day"), paramResourceBundle.getString("PeriodFormat.days"));
    } 
    periodFormatterBuilder.appendSeparator(paramResourceBundle.getString("PeriodFormat.commaspace"), paramResourceBundle.getString("PeriodFormat.spaceandspace"), arrayOfString);
    periodFormatterBuilder.appendHours();
    if (containsKey(paramResourceBundle, "PeriodFormat.hours.regex")) {
      periodFormatterBuilder.appendSuffix(paramResourceBundle
          .getString("PeriodFormat.hours.regex").split(str), paramResourceBundle
          .getString("PeriodFormat.hours.list").split(str));
    } else {
      periodFormatterBuilder.appendSuffix(paramResourceBundle.getString("PeriodFormat.hour"), paramResourceBundle.getString("PeriodFormat.hours"));
    } 
    periodFormatterBuilder.appendSeparator(paramResourceBundle.getString("PeriodFormat.commaspace"), paramResourceBundle.getString("PeriodFormat.spaceandspace"), arrayOfString);
    periodFormatterBuilder.appendMinutes();
    if (containsKey(paramResourceBundle, "PeriodFormat.minutes.regex")) {
      periodFormatterBuilder.appendSuffix(paramResourceBundle
          .getString("PeriodFormat.minutes.regex").split(str), paramResourceBundle
          .getString("PeriodFormat.minutes.list").split(str));
    } else {
      periodFormatterBuilder.appendSuffix(paramResourceBundle.getString("PeriodFormat.minute"), paramResourceBundle.getString("PeriodFormat.minutes"));
    } 
    periodFormatterBuilder.appendSeparator(paramResourceBundle.getString("PeriodFormat.commaspace"), paramResourceBundle.getString("PeriodFormat.spaceandspace"), arrayOfString);
    periodFormatterBuilder.appendSeconds();
    if (containsKey(paramResourceBundle, "PeriodFormat.seconds.regex")) {
      periodFormatterBuilder.appendSuffix(paramResourceBundle
          .getString("PeriodFormat.seconds.regex").split(str), paramResourceBundle
          .getString("PeriodFormat.seconds.list").split(str));
    } else {
      periodFormatterBuilder.appendSuffix(paramResourceBundle.getString("PeriodFormat.second"), paramResourceBundle.getString("PeriodFormat.seconds"));
    } 
    periodFormatterBuilder.appendSeparator(paramResourceBundle.getString("PeriodFormat.commaspace"), paramResourceBundle.getString("PeriodFormat.spaceandspace"), arrayOfString);
    periodFormatterBuilder.appendMillis();
    if (containsKey(paramResourceBundle, "PeriodFormat.milliseconds.regex")) {
      periodFormatterBuilder.appendSuffix(paramResourceBundle
          .getString("PeriodFormat.milliseconds.regex").split(str), paramResourceBundle
          .getString("PeriodFormat.milliseconds.list").split(str));
    } else {
      periodFormatterBuilder.appendSuffix(paramResourceBundle.getString("PeriodFormat.millisecond"), paramResourceBundle.getString("PeriodFormat.milliseconds"));
    } 
    return periodFormatterBuilder.toFormatter().withLocale(paramLocale);
  }
  
  private static PeriodFormatter buildNonRegExFormatter(ResourceBundle paramResourceBundle, Locale paramLocale) {
    String[] arrayOfString = retrieveVariants(paramResourceBundle);
    return (new PeriodFormatterBuilder())
      .appendYears()
      .appendSuffix(paramResourceBundle.getString("PeriodFormat.year"), paramResourceBundle.getString("PeriodFormat.years"))
      .appendSeparator(paramResourceBundle.getString("PeriodFormat.commaspace"), paramResourceBundle.getString("PeriodFormat.spaceandspace"), arrayOfString)
      .appendMonths()
      .appendSuffix(paramResourceBundle.getString("PeriodFormat.month"), paramResourceBundle.getString("PeriodFormat.months"))
      .appendSeparator(paramResourceBundle.getString("PeriodFormat.commaspace"), paramResourceBundle.getString("PeriodFormat.spaceandspace"), arrayOfString)
      .appendWeeks()
      .appendSuffix(paramResourceBundle.getString("PeriodFormat.week"), paramResourceBundle.getString("PeriodFormat.weeks"))
      .appendSeparator(paramResourceBundle.getString("PeriodFormat.commaspace"), paramResourceBundle.getString("PeriodFormat.spaceandspace"), arrayOfString)
      .appendDays()
      .appendSuffix(paramResourceBundle.getString("PeriodFormat.day"), paramResourceBundle.getString("PeriodFormat.days"))
      .appendSeparator(paramResourceBundle.getString("PeriodFormat.commaspace"), paramResourceBundle.getString("PeriodFormat.spaceandspace"), arrayOfString)
      .appendHours()
      .appendSuffix(paramResourceBundle.getString("PeriodFormat.hour"), paramResourceBundle.getString("PeriodFormat.hours"))
      .appendSeparator(paramResourceBundle.getString("PeriodFormat.commaspace"), paramResourceBundle.getString("PeriodFormat.spaceandspace"), arrayOfString)
      .appendMinutes()
      .appendSuffix(paramResourceBundle.getString("PeriodFormat.minute"), paramResourceBundle.getString("PeriodFormat.minutes"))
      .appendSeparator(paramResourceBundle.getString("PeriodFormat.commaspace"), paramResourceBundle.getString("PeriodFormat.spaceandspace"), arrayOfString)
      .appendSeconds()
      .appendSuffix(paramResourceBundle.getString("PeriodFormat.second"), paramResourceBundle.getString("PeriodFormat.seconds"))
      .appendSeparator(paramResourceBundle.getString("PeriodFormat.commaspace"), paramResourceBundle.getString("PeriodFormat.spaceandspace"), arrayOfString)
      .appendMillis()
      .appendSuffix(paramResourceBundle.getString("PeriodFormat.millisecond"), paramResourceBundle.getString("PeriodFormat.milliseconds"))
      .toFormatter().withLocale(paramLocale);
  }
  
  private static String[] retrieveVariants(ResourceBundle paramResourceBundle) {
    return new String[] { paramResourceBundle.getString("PeriodFormat.space"), paramResourceBundle.getString("PeriodFormat.comma"), paramResourceBundle
        .getString("PeriodFormat.commandand"), paramResourceBundle.getString("PeriodFormat.commaspaceand") };
  }
  
  private static boolean containsKey(ResourceBundle paramResourceBundle, String paramString) {
    for (Enumeration enumeration = paramResourceBundle.getKeys(); enumeration.hasMoreElements();) {
      if (((String)enumeration.nextElement()).equals(paramString))
        return true; 
    } 
    return false;
  }
}
