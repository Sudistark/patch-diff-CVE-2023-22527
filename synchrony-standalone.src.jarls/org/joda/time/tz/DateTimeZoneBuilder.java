package org.joda.time.tz;

import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import org.joda.time.DateTimeZone;

public class DateTimeZoneBuilder {
  public static DateTimeZone readFrom(InputStream paramInputStream, String paramString) throws IOException {
    if (paramInputStream instanceof DataInput)
      return readFrom((DataInput)paramInputStream, paramString); 
    return readFrom(new DataInputStream(paramInputStream), paramString);
  }
  
  public static DateTimeZone readFrom(DataInput paramDataInput, String paramString) throws IOException {
    DateTimeZone dateTimeZone;
    switch (paramDataInput.readUnsignedByte()) {
      case 70:
        dateTimeZone = new FixedDateTimeZone(paramString, paramDataInput.readUTF(), (int)readMillis(paramDataInput), (int)readMillis(paramDataInput));
        if (dateTimeZone.equals(DateTimeZone.UTC))
          dateTimeZone = DateTimeZone.UTC; 
        return dateTimeZone;
      case 67:
        return CachedDateTimeZone.forZone(PrecalculatedZone.readFrom(paramDataInput, paramString));
      case 80:
        return PrecalculatedZone.readFrom(paramDataInput, paramString);
    } 
    throw new IOException("Invalid encoding");
  }
  
  static void writeMillis(DataOutput paramDataOutput, long paramLong) throws IOException {
    if (paramLong % 1800000L == 0L) {
      long l = paramLong / 1800000L;
      if (l << 58 >> 58 == l) {
        paramDataOutput.writeByte((int)(l & 0x3FL));
        return;
      } 
    } 
    if (paramLong % 60000L == 0L) {
      long l = paramLong / 60000L;
      if (l << 34 >> 34 == l) {
        paramDataOutput.writeInt(0x40000000 | (int)(l & 0x3FFFFFFFL));
        return;
      } 
    } 
    if (paramLong % 1000L == 0L) {
      long l = paramLong / 1000L;
      if (l << 26 >> 26 == l) {
        paramDataOutput.writeByte(0x80 | (int)(l >> 32 & 0x3FL));
        paramDataOutput.writeInt((int)(l & 0xFFFFFFFFFFFFFFFFL));
        return;
      } 
    } 
    paramDataOutput.writeByte((paramLong < 0L) ? 255 : 192);
    paramDataOutput.writeLong(paramLong);
  }
  
  static long readMillis(DataInput paramDataInput) throws IOException {
    long l;
    int i = paramDataInput.readUnsignedByte();
    switch (i >> 6) {
      default:
        i = i << 26 >> 26;
        return i * 1800000L;
      case 1:
        i = i << 26 >> 2;
        i |= paramDataInput.readUnsignedByte() << 16;
        i |= paramDataInput.readUnsignedByte() << 8;
        i |= paramDataInput.readUnsignedByte();
        return i * 60000L;
      case 2:
        l = i << 58 >> 26;
        l |= (paramDataInput.readUnsignedByte() << 24);
        l |= (paramDataInput.readUnsignedByte() << 16);
        l |= (paramDataInput.readUnsignedByte() << 8);
        l |= paramDataInput.readUnsignedByte();
        return l * 1000L;
      case 3:
        break;
    } 
    return paramDataInput.readLong();
  }
  
  private static DateTimeZone buildFixedZone(String paramString1, String paramString2, int paramInt1, int paramInt2) {
    if ("UTC".equals(paramString1) && paramString1.equals(paramString2) && paramInt1 == 0 && paramInt2 == 0)
      return DateTimeZone.UTC; 
    return new FixedDateTimeZone(paramString1, paramString2, paramInt1, paramInt2);
  }
  
  private final ArrayList<RuleSet> iRuleSets = new ArrayList(10);
  
  public DateTimeZoneBuilder addCutover(int paramInt1, char paramChar, int paramInt2, int paramInt3, int paramInt4, boolean paramBoolean, int paramInt5) {
    if (this.iRuleSets.size() > 0) {
      OfYear ofYear = new OfYear(paramChar, paramInt2, paramInt3, paramInt4, paramBoolean, paramInt5);
      RuleSet ruleSet = (RuleSet)this.iRuleSets.get(this.iRuleSets.size() - 1);
      ruleSet.setUpperLimit(paramInt1, ofYear);
    } 
    this.iRuleSets.add(new RuleSet());
    return this;
  }
  
  public DateTimeZoneBuilder setStandardOffset(int paramInt) {
    getLastRuleSet().setStandardOffset(paramInt);
    return this;
  }
  
  public DateTimeZoneBuilder setFixedSavings(String paramString, int paramInt) {
    getLastRuleSet().setFixedSavings(paramString, paramInt);
    return this;
  }
  
  public DateTimeZoneBuilder addRecurringSavings(String paramString, int paramInt1, int paramInt2, int paramInt3, char paramChar, int paramInt4, int paramInt5, int paramInt6, boolean paramBoolean, int paramInt7) {
    if (paramInt2 <= paramInt3) {
      OfYear ofYear = new OfYear(paramChar, paramInt4, paramInt5, paramInt6, paramBoolean, paramInt7);
      Recurrence recurrence = new Recurrence(ofYear, paramString, paramInt1);
      Rule rule = new Rule(recurrence, paramInt2, paramInt3);
      getLastRuleSet().addRule(rule);
    } 
    return this;
  }
  
  private RuleSet getLastRuleSet() {
    if (this.iRuleSets.size() == 0)
      addCutover(-2147483648, 'w', 1, 1, 0, false, 0); 
    return (RuleSet)this.iRuleSets.get(this.iRuleSets.size() - 1);
  }
  
  public DateTimeZone toDateTimeZone(String paramString, boolean paramBoolean) {
    if (paramString == null)
      throw new IllegalArgumentException(); 
    ArrayList arrayList = new ArrayList();
    DSTZone dSTZone = null;
    long l = Float.MIN_VALUE;
    int i = 0;
    int j = this.iRuleSets.size();
    for (byte b = 0; b < j; b++) {
      RuleSet ruleSet = (RuleSet)this.iRuleSets.get(b);
      Transition transition = ruleSet.firstTransition(l);
      if (transition != null) {
        addTransition(arrayList, transition);
        l = transition.getMillis();
        i = transition.getSaveMillis();
        ruleSet = new RuleSet(ruleSet);
        while ((transition = ruleSet.nextTransition(l, i)) != null && (
          !addTransition(arrayList, transition) || dSTZone == null)) {
          l = transition.getMillis();
          i = transition.getSaveMillis();
          if (dSTZone == null && b == j - 1)
            dSTZone = ruleSet.buildTailZone(paramString); 
        } 
        l = ruleSet.getUpperLimit(i);
      } 
    } 
    if (arrayList.size() == 0) {
      if (dSTZone != null)
        return dSTZone; 
      return buildFixedZone(paramString, "UTC", 0, 0);
    } 
    if (arrayList.size() == 1 && dSTZone == null) {
      Transition transition = (Transition)arrayList.get(0);
      return buildFixedZone(paramString, transition.getNameKey(), transition
          .getWallOffset(), transition.getStandardOffset());
    } 
    PrecalculatedZone precalculatedZone = PrecalculatedZone.create(paramString, paramBoolean, arrayList, dSTZone);
    if (precalculatedZone.isCachable())
      return CachedDateTimeZone.forZone(precalculatedZone); 
    return precalculatedZone;
  }
  
  private boolean addTransition(ArrayList<Transition> paramArrayList, Transition paramTransition) {
    int i = paramArrayList.size();
    if (i == 0) {
      paramArrayList.add(paramTransition);
      return true;
    } 
    Transition transition1 = (Transition)paramArrayList.get(i - 1);
    if (!paramTransition.isTransitionFrom(transition1))
      return false; 
    int j = 0;
    if (i >= 2)
      j = ((Transition)paramArrayList.get(i - 2)).getWallOffset(); 
    int k = transition1.getWallOffset();
    long l1 = transition1.getMillis() + j;
    long l2 = paramTransition.getMillis() + k;
    if (l2 != l1) {
      paramArrayList.add(paramTransition);
      return true;
    } 
    Transition transition2 = (Transition)paramArrayList.remove(i - 1);
    Transition transition3 = paramTransition.withMillis(transition2.getMillis());
    return addTransition(paramArrayList, transition3);
  }
  
  public void writeTo(String paramString, OutputStream paramOutputStream) throws IOException {
    if (paramOutputStream instanceof DataOutput) {
      writeTo(paramString, (DataOutput)paramOutputStream);
    } else {
      DataOutputStream dataOutputStream = new DataOutputStream(paramOutputStream);
      writeTo(paramString, dataOutputStream);
      dataOutputStream.flush();
    } 
  }
  
  public void writeTo(String paramString, DataOutput paramDataOutput) throws IOException {
    DateTimeZone dateTimeZone = toDateTimeZone(paramString, false);
    if (dateTimeZone instanceof FixedDateTimeZone) {
      paramDataOutput.writeByte(70);
      paramDataOutput.writeUTF(dateTimeZone.getNameKey(0L));
      writeMillis(paramDataOutput, dateTimeZone.getOffset(0L));
      writeMillis(paramDataOutput, dateTimeZone.getStandardOffset(0L));
    } else {
      if (dateTimeZone instanceof CachedDateTimeZone) {
        paramDataOutput.writeByte(67);
        dateTimeZone = ((CachedDateTimeZone)dateTimeZone).getUncachedZone();
      } else {
        paramDataOutput.writeByte(80);
      } 
      ((PrecalculatedZone)dateTimeZone).writeTo(paramDataOutput);
    } 
  }
}
