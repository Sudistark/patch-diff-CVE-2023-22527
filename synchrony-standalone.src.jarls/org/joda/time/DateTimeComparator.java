package org.joda.time;

import java.io.Serializable;
import java.util.Comparator;
import org.joda.time.convert.ConverterManager;
import org.joda.time.convert.InstantConverter;

public class DateTimeComparator extends Object implements Comparator<Object>, Serializable {
  private static final long serialVersionUID = -6097339773320178364L;
  
  private static final DateTimeComparator ALL_INSTANCE = new DateTimeComparator(null, null);
  
  private static final DateTimeComparator DATE_INSTANCE = new DateTimeComparator(DateTimeFieldType.dayOfYear(), null);
  
  private static final DateTimeComparator TIME_INSTANCE = new DateTimeComparator(null, DateTimeFieldType.dayOfYear());
  
  private final DateTimeFieldType iLowerLimit;
  
  private final DateTimeFieldType iUpperLimit;
  
  public static DateTimeComparator getInstance() { return ALL_INSTANCE; }
  
  public static DateTimeComparator getInstance(DateTimeFieldType paramDateTimeFieldType) { return getInstance(paramDateTimeFieldType, null); }
  
  public static DateTimeComparator getInstance(DateTimeFieldType paramDateTimeFieldType1, DateTimeFieldType paramDateTimeFieldType2) {
    if (paramDateTimeFieldType1 == null && paramDateTimeFieldType2 == null)
      return ALL_INSTANCE; 
    if (paramDateTimeFieldType1 == DateTimeFieldType.dayOfYear() && paramDateTimeFieldType2 == null)
      return DATE_INSTANCE; 
    if (paramDateTimeFieldType1 == null && paramDateTimeFieldType2 == DateTimeFieldType.dayOfYear())
      return TIME_INSTANCE; 
    return new DateTimeComparator(paramDateTimeFieldType1, paramDateTimeFieldType2);
  }
  
  public static DateTimeComparator getDateOnlyInstance() { return DATE_INSTANCE; }
  
  public static DateTimeComparator getTimeOnlyInstance() { return TIME_INSTANCE; }
  
  protected DateTimeComparator(DateTimeFieldType paramDateTimeFieldType1, DateTimeFieldType paramDateTimeFieldType2) {
    this.iLowerLimit = paramDateTimeFieldType1;
    this.iUpperLimit = paramDateTimeFieldType2;
  }
  
  public DateTimeFieldType getLowerLimit() { return this.iLowerLimit; }
  
  public DateTimeFieldType getUpperLimit() { return this.iUpperLimit; }
  
  public int compare(Object paramObject1, Object paramObject2) {
    InstantConverter instantConverter = ConverterManager.getInstance().getInstantConverter(paramObject1);
    Chronology chronology1 = instantConverter.getChronology(paramObject1, (Chronology)null);
    long l1 = instantConverter.getInstantMillis(paramObject1, chronology1);
    if (paramObject1 == paramObject2)
      return 0; 
    instantConverter = ConverterManager.getInstance().getInstantConverter(paramObject2);
    Chronology chronology2 = instantConverter.getChronology(paramObject2, (Chronology)null);
    long l2 = instantConverter.getInstantMillis(paramObject2, chronology2);
    if (this.iLowerLimit != null) {
      l1 = this.iLowerLimit.getField(chronology1).roundFloor(l1);
      l2 = this.iLowerLimit.getField(chronology2).roundFloor(l2);
    } 
    if (this.iUpperLimit != null) {
      l1 = this.iUpperLimit.getField(chronology1).remainder(l1);
      l2 = this.iUpperLimit.getField(chronology2).remainder(l2);
    } 
    if (l1 < l2)
      return -1; 
    if (l1 > l2)
      return 1; 
    return 0;
  }
  
  private Object readResolve() { return getInstance(this.iLowerLimit, this.iUpperLimit); }
  
  public boolean equals(Object paramObject) {
    if (paramObject instanceof DateTimeComparator) {
      DateTimeComparator dateTimeComparator = (DateTimeComparator)paramObject;
      return ((this.iLowerLimit == dateTimeComparator.getLowerLimit() || (this.iLowerLimit != null && this.iLowerLimit
        .equals(dateTimeComparator.getLowerLimit()))) && (this.iUpperLimit == dateTimeComparator
        .getUpperLimit() || (this.iUpperLimit != null && this.iUpperLimit
        .equals(dateTimeComparator.getUpperLimit()))));
    } 
    return false;
  }
  
  public int hashCode() { return ((this.iLowerLimit == null) ? 0 : this.iLowerLimit.hashCode()) + 123 * ((this.iUpperLimit == null) ? 0 : this.iUpperLimit
      .hashCode()); }
  
  public String toString() {
    if (this.iLowerLimit == this.iUpperLimit)
      return "DateTimeComparator[" + ((this.iLowerLimit == null) ? "" : this.iLowerLimit
        .getName()) + "]"; 
    return "DateTimeComparator[" + ((this.iLowerLimit == null) ? "" : this.iLowerLimit
      .getName()) + "-" + ((this.iUpperLimit == null) ? "" : this.iUpperLimit
      
      .getName()) + "]";
  }
}
