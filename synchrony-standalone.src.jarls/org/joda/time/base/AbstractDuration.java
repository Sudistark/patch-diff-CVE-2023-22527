package org.joda.time.base;

import org.joda.convert.ToString;
import org.joda.time.Duration;
import org.joda.time.Period;
import org.joda.time.ReadableDuration;
import org.joda.time.format.FormatUtils;

public abstract class AbstractDuration implements ReadableDuration {
  public Duration toDuration() { return new Duration(getMillis()); }
  
  public Period toPeriod() { return new Period(getMillis()); }
  
  public int compareTo(ReadableDuration paramReadableDuration) {
    long l1 = getMillis();
    long l2 = paramReadableDuration.getMillis();
    if (l1 < l2)
      return -1; 
    if (l1 > l2)
      return 1; 
    return 0;
  }
  
  public boolean isEqual(ReadableDuration paramReadableDuration) {
    Duration duration;
    if (paramReadableDuration == null)
      duration = Duration.ZERO; 
    return (compareTo(duration) == 0);
  }
  
  public boolean isLongerThan(ReadableDuration paramReadableDuration) {
    Duration duration;
    if (paramReadableDuration == null)
      duration = Duration.ZERO; 
    return (compareTo(duration) > 0);
  }
  
  public boolean isShorterThan(ReadableDuration paramReadableDuration) {
    Duration duration;
    if (paramReadableDuration == null)
      duration = Duration.ZERO; 
    return (compareTo(duration) < 0);
  }
  
  public boolean equals(Object paramObject) {
    if (this == paramObject)
      return true; 
    if (!(paramObject instanceof ReadableDuration))
      return false; 
    ReadableDuration readableDuration = (ReadableDuration)paramObject;
    return (getMillis() == readableDuration.getMillis());
  }
  
  public int hashCode() {
    long l = getMillis();
    return (int)(l ^ l >>> 32);
  }
  
  @ToString
  public String toString() {
    long l = getMillis();
    StringBuffer stringBuffer = new StringBuffer();
    stringBuffer.append("PT");
    boolean bool = (l < 0L) ? 1 : 0;
    FormatUtils.appendUnpaddedInteger(stringBuffer, l);
    while (stringBuffer.length() < (bool ? 7 : 6))
      stringBuffer.insert(bool ? 3 : 2, "0"); 
    if (l / 1000L * 1000L == l) {
      stringBuffer.setLength(stringBuffer.length() - 3);
    } else {
      stringBuffer.insert(stringBuffer.length() - 3, ".");
    } 
    stringBuffer.append('S');
    return stringBuffer.toString();
  }
}
