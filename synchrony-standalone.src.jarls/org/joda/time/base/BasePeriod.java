package org.joda.time.base;

import java.io.Serializable;
import org.joda.time.Chronology;
import org.joda.time.DateTimeUtils;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.MutablePeriod;
import org.joda.time.PeriodType;
import org.joda.time.ReadWritablePeriod;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.convert.ConverterManager;
import org.joda.time.convert.PeriodConverter;
import org.joda.time.field.FieldUtils;

public abstract class BasePeriod extends AbstractPeriod implements ReadablePeriod, Serializable {
  private static final long serialVersionUID = -2110953284060001145L;
  
  private static final ReadablePeriod DUMMY_PERIOD = new Object();
  
  private final PeriodType iType;
  
  private final int[] iValues;
  
  protected BasePeriod(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6, int paramInt7, int paramInt8, PeriodType paramPeriodType) {
    paramPeriodType = checkPeriodType(paramPeriodType);
    this.iType = paramPeriodType;
    this.iValues = setPeriodInternal(paramInt1, paramInt2, paramInt3, paramInt4, paramInt5, paramInt6, paramInt7, paramInt8);
  }
  
  protected BasePeriod(long paramLong1, long paramLong2, PeriodType paramPeriodType, Chronology paramChronology) {
    paramPeriodType = checkPeriodType(paramPeriodType);
    paramChronology = DateTimeUtils.getChronology(paramChronology);
    this.iType = paramPeriodType;
    this.iValues = paramChronology.get(this, paramLong1, paramLong2);
  }
  
  protected BasePeriod(ReadableInstant paramReadableInstant1, ReadableInstant paramReadableInstant2, PeriodType paramPeriodType) {
    paramPeriodType = checkPeriodType(paramPeriodType);
    if (paramReadableInstant1 == null && paramReadableInstant2 == null) {
      this.iType = paramPeriodType;
      this.iValues = new int[size()];
    } else {
      long l1 = DateTimeUtils.getInstantMillis(paramReadableInstant1);
      long l2 = DateTimeUtils.getInstantMillis(paramReadableInstant2);
      Chronology chronology = DateTimeUtils.getIntervalChronology(paramReadableInstant1, paramReadableInstant2);
      this.iType = paramPeriodType;
      this.iValues = chronology.get(this, l1, l2);
    } 
  }
  
  protected BasePeriod(ReadablePartial paramReadablePartial1, ReadablePartial paramReadablePartial2, PeriodType paramPeriodType) {
    if (paramReadablePartial1 == null || paramReadablePartial2 == null)
      throw new IllegalArgumentException("ReadablePartial objects must not be null"); 
    if (paramReadablePartial1 instanceof BaseLocal && paramReadablePartial2 instanceof BaseLocal && paramReadablePartial1.getClass() == paramReadablePartial2.getClass()) {
      paramPeriodType = checkPeriodType(paramPeriodType);
      long l1 = ((BaseLocal)paramReadablePartial1).getLocalMillis();
      long l2 = ((BaseLocal)paramReadablePartial2).getLocalMillis();
      Chronology chronology = paramReadablePartial1.getChronology();
      chronology = DateTimeUtils.getChronology(chronology);
      this.iType = paramPeriodType;
      this.iValues = chronology.get(this, l1, l2);
    } else {
      if (paramReadablePartial1.size() != paramReadablePartial2.size())
        throw new IllegalArgumentException("ReadablePartial objects must have the same set of fields"); 
      byte b;
      int i;
      for (b = 0, i = paramReadablePartial1.size(); b < i; b++) {
        if (paramReadablePartial1.getFieldType(b) != paramReadablePartial2.getFieldType(b))
          throw new IllegalArgumentException("ReadablePartial objects must have the same set of fields"); 
      } 
      if (!DateTimeUtils.isContiguous(paramReadablePartial1))
        throw new IllegalArgumentException("ReadablePartial objects must be contiguous"); 
      this.iType = checkPeriodType(paramPeriodType);
      Chronology chronology = DateTimeUtils.getChronology(paramReadablePartial1.getChronology()).withUTC();
      this.iValues = chronology.get(this, chronology.set(paramReadablePartial1, 0L), chronology.set(paramReadablePartial2, 0L));
    } 
  }
  
  protected BasePeriod(ReadableInstant paramReadableInstant, ReadableDuration paramReadableDuration, PeriodType paramPeriodType) {
    paramPeriodType = checkPeriodType(paramPeriodType);
    long l1 = DateTimeUtils.getInstantMillis(paramReadableInstant);
    long l2 = DateTimeUtils.getDurationMillis(paramReadableDuration);
    long l3 = FieldUtils.safeAdd(l1, l2);
    Chronology chronology = DateTimeUtils.getInstantChronology(paramReadableInstant);
    this.iType = paramPeriodType;
    this.iValues = chronology.get(this, l1, l3);
  }
  
  protected BasePeriod(ReadableDuration paramReadableDuration, ReadableInstant paramReadableInstant, PeriodType paramPeriodType) {
    paramPeriodType = checkPeriodType(paramPeriodType);
    long l1 = DateTimeUtils.getDurationMillis(paramReadableDuration);
    long l2 = DateTimeUtils.getInstantMillis(paramReadableInstant);
    long l3 = FieldUtils.safeSubtract(l2, l1);
    Chronology chronology = DateTimeUtils.getInstantChronology(paramReadableInstant);
    this.iType = paramPeriodType;
    this.iValues = chronology.get(this, l3, l2);
  }
  
  protected BasePeriod(long paramLong) {
    this.iType = PeriodType.standard();
    int[] arrayOfInt = ISOChronology.getInstanceUTC().get(DUMMY_PERIOD, paramLong);
    this.iValues = new int[8];
    System.arraycopy(arrayOfInt, 0, this.iValues, 4, 4);
  }
  
  protected BasePeriod(long paramLong, PeriodType paramPeriodType, Chronology paramChronology) {
    paramPeriodType = checkPeriodType(paramPeriodType);
    paramChronology = DateTimeUtils.getChronology(paramChronology);
    this.iType = paramPeriodType;
    this.iValues = paramChronology.get(this, paramLong);
  }
  
  protected BasePeriod(Object paramObject, PeriodType paramPeriodType, Chronology paramChronology) {
    PeriodConverter periodConverter = ConverterManager.getInstance().getPeriodConverter(paramObject);
    paramPeriodType = (paramPeriodType == null) ? periodConverter.getPeriodType(paramObject) : paramPeriodType;
    paramPeriodType = checkPeriodType(paramPeriodType);
    this.iType = paramPeriodType;
    if (this instanceof ReadWritablePeriod) {
      this.iValues = new int[size()];
      paramChronology = DateTimeUtils.getChronology(paramChronology);
      periodConverter.setInto((ReadWritablePeriod)this, paramObject, paramChronology);
    } else {
      this.iValues = (new MutablePeriod(paramObject, paramPeriodType, paramChronology)).getValues();
    } 
  }
  
  protected BasePeriod(int[] paramArrayOfInt, PeriodType paramPeriodType) {
    this.iType = paramPeriodType;
    this.iValues = paramArrayOfInt;
  }
  
  protected PeriodType checkPeriodType(PeriodType paramPeriodType) { return DateTimeUtils.getPeriodType(paramPeriodType); }
  
  public PeriodType getPeriodType() { return this.iType; }
  
  public int getValue(int paramInt) { return this.iValues[paramInt]; }
  
  public Duration toDurationFrom(ReadableInstant paramReadableInstant) {
    long l1 = DateTimeUtils.getInstantMillis(paramReadableInstant);
    Chronology chronology = DateTimeUtils.getInstantChronology(paramReadableInstant);
    long l2 = chronology.add(this, l1, 1);
    return new Duration(l1, l2);
  }
  
  public Duration toDurationTo(ReadableInstant paramReadableInstant) {
    long l1 = DateTimeUtils.getInstantMillis(paramReadableInstant);
    Chronology chronology = DateTimeUtils.getInstantChronology(paramReadableInstant);
    long l2 = chronology.add(this, l1, -1);
    return new Duration(l2, l1);
  }
  
  private void checkAndUpdate(DurationFieldType paramDurationFieldType, int[] paramArrayOfInt, int paramInt) {
    int i = indexOf(paramDurationFieldType);
    if (i == -1) {
      if (paramInt != 0)
        throw new IllegalArgumentException("Period does not support field '" + paramDurationFieldType
            .getName() + "'"); 
    } else {
      paramArrayOfInt[i] = paramInt;
    } 
  }
  
  protected void setPeriod(ReadablePeriod paramReadablePeriod) {
    if (paramReadablePeriod == null) {
      setValues(new int[size()]);
    } else {
      setPeriodInternal(paramReadablePeriod);
    } 
  }
  
  private void setPeriodInternal(ReadablePeriod paramReadablePeriod) {
    int[] arrayOfInt = new int[size()];
    byte b;
    int i;
    for (b = 0, i = paramReadablePeriod.size(); b < i; b++) {
      DurationFieldType durationFieldType = paramReadablePeriod.getFieldType(b);
      int j = paramReadablePeriod.getValue(b);
      checkAndUpdate(durationFieldType, arrayOfInt, j);
    } 
    setValues(arrayOfInt);
  }
  
  protected void setPeriod(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6, int paramInt7, int paramInt8) {
    int[] arrayOfInt = setPeriodInternal(paramInt1, paramInt2, paramInt3, paramInt4, paramInt5, paramInt6, paramInt7, paramInt8);
    setValues(arrayOfInt);
  }
  
  private int[] setPeriodInternal(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6, int paramInt7, int paramInt8) {
    int[] arrayOfInt = new int[size()];
    checkAndUpdate(DurationFieldType.years(), arrayOfInt, paramInt1);
    checkAndUpdate(DurationFieldType.months(), arrayOfInt, paramInt2);
    checkAndUpdate(DurationFieldType.weeks(), arrayOfInt, paramInt3);
    checkAndUpdate(DurationFieldType.days(), arrayOfInt, paramInt4);
    checkAndUpdate(DurationFieldType.hours(), arrayOfInt, paramInt5);
    checkAndUpdate(DurationFieldType.minutes(), arrayOfInt, paramInt6);
    checkAndUpdate(DurationFieldType.seconds(), arrayOfInt, paramInt7);
    checkAndUpdate(DurationFieldType.millis(), arrayOfInt, paramInt8);
    return arrayOfInt;
  }
  
  protected void setField(DurationFieldType paramDurationFieldType, int paramInt) { setFieldInto(this.iValues, paramDurationFieldType, paramInt); }
  
  protected void setFieldInto(int[] paramArrayOfInt, DurationFieldType paramDurationFieldType, int paramInt) {
    int i = indexOf(paramDurationFieldType);
    if (i == -1) {
      if (paramInt != 0 || paramDurationFieldType == null)
        throw new IllegalArgumentException("Period does not support field '" + paramDurationFieldType + "'"); 
    } else {
      paramArrayOfInt[i] = paramInt;
    } 
  }
  
  protected void addField(DurationFieldType paramDurationFieldType, int paramInt) { addFieldInto(this.iValues, paramDurationFieldType, paramInt); }
  
  protected void addFieldInto(int[] paramArrayOfInt, DurationFieldType paramDurationFieldType, int paramInt) {
    int i = indexOf(paramDurationFieldType);
    if (i == -1) {
      if (paramInt != 0 || paramDurationFieldType == null)
        throw new IllegalArgumentException("Period does not support field '" + paramDurationFieldType + "'"); 
    } else {
      paramArrayOfInt[i] = FieldUtils.safeAdd(paramArrayOfInt[i], paramInt);
    } 
  }
  
  protected void mergePeriod(ReadablePeriod paramReadablePeriod) {
    if (paramReadablePeriod != null)
      setValues(mergePeriodInto(getValues(), paramReadablePeriod)); 
  }
  
  protected int[] mergePeriodInto(int[] paramArrayOfInt, ReadablePeriod paramReadablePeriod) {
    byte b;
    int i;
    for (b = 0, i = paramReadablePeriod.size(); b < i; b++) {
      DurationFieldType durationFieldType = paramReadablePeriod.getFieldType(b);
      int j = paramReadablePeriod.getValue(b);
      checkAndUpdate(durationFieldType, paramArrayOfInt, j);
    } 
    return paramArrayOfInt;
  }
  
  protected void addPeriod(ReadablePeriod paramReadablePeriod) {
    if (paramReadablePeriod != null)
      setValues(addPeriodInto(getValues(), paramReadablePeriod)); 
  }
  
  protected int[] addPeriodInto(int[] paramArrayOfInt, ReadablePeriod paramReadablePeriod) {
    byte b;
    int i;
    for (b = 0, i = paramReadablePeriod.size(); b < i; b++) {
      DurationFieldType durationFieldType = paramReadablePeriod.getFieldType(b);
      int j = paramReadablePeriod.getValue(b);
      if (j != 0) {
        int k = indexOf(durationFieldType);
        if (k == -1)
          throw new IllegalArgumentException("Period does not support field '" + durationFieldType
              .getName() + "'"); 
        paramArrayOfInt[k] = FieldUtils.safeAdd(getValue(k), j);
      } 
    } 
    return paramArrayOfInt;
  }
  
  protected void setValue(int paramInt1, int paramInt2) { this.iValues[paramInt1] = paramInt2; }
  
  protected void setValues(int[] paramArrayOfInt) { System.arraycopy(paramArrayOfInt, 0, this.iValues, 0, this.iValues.length); }
}
