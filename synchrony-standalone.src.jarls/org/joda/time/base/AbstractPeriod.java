package org.joda.time.base;

import org.joda.convert.ToString;
import org.joda.time.DurationFieldType;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.ReadablePeriod;
import org.joda.time.format.ISOPeriodFormat;
import org.joda.time.format.PeriodFormatter;

public abstract class AbstractPeriod implements ReadablePeriod {
  public int size() { return getPeriodType().size(); }
  
  public DurationFieldType getFieldType(int paramInt) { return getPeriodType().getFieldType(paramInt); }
  
  public DurationFieldType[] getFieldTypes() {
    DurationFieldType[] arrayOfDurationFieldType = new DurationFieldType[size()];
    for (byte b = 0; b < arrayOfDurationFieldType.length; b++)
      arrayOfDurationFieldType[b] = getFieldType(b); 
    return arrayOfDurationFieldType;
  }
  
  public int[] getValues() {
    int[] arrayOfInt = new int[size()];
    for (byte b = 0; b < arrayOfInt.length; b++)
      arrayOfInt[b] = getValue(b); 
    return arrayOfInt;
  }
  
  public int get(DurationFieldType paramDurationFieldType) {
    int i = indexOf(paramDurationFieldType);
    if (i == -1)
      return 0; 
    return getValue(i);
  }
  
  public boolean isSupported(DurationFieldType paramDurationFieldType) { return getPeriodType().isSupported(paramDurationFieldType); }
  
  public int indexOf(DurationFieldType paramDurationFieldType) { return getPeriodType().indexOf(paramDurationFieldType); }
  
  public Period toPeriod() { return new Period(this); }
  
  public MutablePeriod toMutablePeriod() { return new MutablePeriod(this); }
  
  public boolean equals(Object paramObject) {
    if (this == paramObject)
      return true; 
    if (!(paramObject instanceof ReadablePeriod))
      return false; 
    ReadablePeriod readablePeriod = (ReadablePeriod)paramObject;
    if (size() != readablePeriod.size())
      return false; 
    byte b;
    int i;
    for (b = 0, i = size(); b < i; b++) {
      if (getValue(b) != readablePeriod.getValue(b) || getFieldType(b) != readablePeriod.getFieldType(b))
        return false; 
    } 
    return true;
  }
  
  public int hashCode() {
    int i = 17;
    byte b;
    int j;
    for (b = 0, j = size(); b < j; b++) {
      i = 27 * i + getValue(b);
      i = 27 * i + getFieldType(b).hashCode();
    } 
    return i;
  }
  
  @ToString
  public String toString() { return ISOPeriodFormat.standard().print(this); }
  
  public String toString(PeriodFormatter paramPeriodFormatter) {
    if (paramPeriodFormatter == null)
      return toString(); 
    return paramPeriodFormatter.print(this);
  }
}
