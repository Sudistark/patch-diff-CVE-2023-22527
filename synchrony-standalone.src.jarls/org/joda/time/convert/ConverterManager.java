package org.joda.time.convert;

import org.joda.time.JodaTimePermission;

public final class ConverterManager {
  private static ConverterManager INSTANCE;
  
  public static ConverterManager getInstance() {
    if (INSTANCE == null)
      INSTANCE = new ConverterManager(); 
    return INSTANCE;
  }
  
  private ConverterSet iInstantConverters = new ConverterSet(new Converter[] { ReadableInstantConverter.INSTANCE, StringConverter.INSTANCE, CalendarConverter.INSTANCE, DateConverter.INSTANCE, LongConverter.INSTANCE, NullConverter.INSTANCE });
  
  private ConverterSet iPartialConverters = new ConverterSet(new Converter[] { ReadablePartialConverter.INSTANCE, ReadableInstantConverter.INSTANCE, StringConverter.INSTANCE, CalendarConverter.INSTANCE, DateConverter.INSTANCE, LongConverter.INSTANCE, NullConverter.INSTANCE });
  
  private ConverterSet iDurationConverters = new ConverterSet(new Converter[] { ReadableDurationConverter.INSTANCE, ReadableIntervalConverter.INSTANCE, StringConverter.INSTANCE, LongConverter.INSTANCE, NullConverter.INSTANCE });
  
  private ConverterSet iPeriodConverters = new ConverterSet(new Converter[] { ReadableDurationConverter.INSTANCE, ReadablePeriodConverter.INSTANCE, ReadableIntervalConverter.INSTANCE, StringConverter.INSTANCE, NullConverter.INSTANCE });
  
  private ConverterSet iIntervalConverters = new ConverterSet(new Converter[] { ReadableIntervalConverter.INSTANCE, StringConverter.INSTANCE, NullConverter.INSTANCE });
  
  public InstantConverter getInstantConverter(Object paramObject) {
    InstantConverter instantConverter = (InstantConverter)this.iInstantConverters.select((paramObject == null) ? null : paramObject.getClass());
    if (instantConverter != null)
      return instantConverter; 
    throw new IllegalArgumentException("No instant converter found for type: " + ((paramObject == null) ? "null" : paramObject
        .getClass().getName()));
  }
  
  public InstantConverter[] getInstantConverters() {
    ConverterSet converterSet = this.iInstantConverters;
    InstantConverter[] arrayOfInstantConverter = new InstantConverter[converterSet.size()];
    converterSet.copyInto(arrayOfInstantConverter);
    return arrayOfInstantConverter;
  }
  
  public InstantConverter addInstantConverter(InstantConverter paramInstantConverter) throws SecurityException {
    checkAlterInstantConverters();
    if (paramInstantConverter == null)
      return null; 
    InstantConverter[] arrayOfInstantConverter = new InstantConverter[1];
    this.iInstantConverters = this.iInstantConverters.add(paramInstantConverter, arrayOfInstantConverter);
    return arrayOfInstantConverter[0];
  }
  
  public InstantConverter removeInstantConverter(InstantConverter paramInstantConverter) throws SecurityException {
    checkAlterInstantConverters();
    if (paramInstantConverter == null)
      return null; 
    InstantConverter[] arrayOfInstantConverter = new InstantConverter[1];
    this.iInstantConverters = this.iInstantConverters.remove(paramInstantConverter, arrayOfInstantConverter);
    return arrayOfInstantConverter[0];
  }
  
  private void checkAlterInstantConverters() {
    SecurityManager securityManager = System.getSecurityManager();
    if (securityManager != null)
      securityManager.checkPermission(new JodaTimePermission("ConverterManager.alterInstantConverters")); 
  }
  
  public PartialConverter getPartialConverter(Object paramObject) {
    PartialConverter partialConverter = (PartialConverter)this.iPartialConverters.select((paramObject == null) ? null : paramObject.getClass());
    if (partialConverter != null)
      return partialConverter; 
    throw new IllegalArgumentException("No partial converter found for type: " + ((paramObject == null) ? "null" : paramObject
        .getClass().getName()));
  }
  
  public PartialConverter[] getPartialConverters() {
    ConverterSet converterSet = this.iPartialConverters;
    PartialConverter[] arrayOfPartialConverter = new PartialConverter[converterSet.size()];
    converterSet.copyInto(arrayOfPartialConverter);
    return arrayOfPartialConverter;
  }
  
  public PartialConverter addPartialConverter(PartialConverter paramPartialConverter) throws SecurityException {
    checkAlterPartialConverters();
    if (paramPartialConverter == null)
      return null; 
    PartialConverter[] arrayOfPartialConverter = new PartialConverter[1];
    this.iPartialConverters = this.iPartialConverters.add(paramPartialConverter, arrayOfPartialConverter);
    return arrayOfPartialConverter[0];
  }
  
  public PartialConverter removePartialConverter(PartialConverter paramPartialConverter) throws SecurityException {
    checkAlterPartialConverters();
    if (paramPartialConverter == null)
      return null; 
    PartialConverter[] arrayOfPartialConverter = new PartialConverter[1];
    this.iPartialConverters = this.iPartialConverters.remove(paramPartialConverter, arrayOfPartialConverter);
    return arrayOfPartialConverter[0];
  }
  
  private void checkAlterPartialConverters() {
    SecurityManager securityManager = System.getSecurityManager();
    if (securityManager != null)
      securityManager.checkPermission(new JodaTimePermission("ConverterManager.alterPartialConverters")); 
  }
  
  public DurationConverter getDurationConverter(Object paramObject) {
    DurationConverter durationConverter = (DurationConverter)this.iDurationConverters.select((paramObject == null) ? null : paramObject.getClass());
    if (durationConverter != null)
      return durationConverter; 
    throw new IllegalArgumentException("No duration converter found for type: " + ((paramObject == null) ? "null" : paramObject
        .getClass().getName()));
  }
  
  public DurationConverter[] getDurationConverters() {
    ConverterSet converterSet = this.iDurationConverters;
    DurationConverter[] arrayOfDurationConverter = new DurationConverter[converterSet.size()];
    converterSet.copyInto(arrayOfDurationConverter);
    return arrayOfDurationConverter;
  }
  
  public DurationConverter addDurationConverter(DurationConverter paramDurationConverter) throws SecurityException {
    checkAlterDurationConverters();
    if (paramDurationConverter == null)
      return null; 
    DurationConverter[] arrayOfDurationConverter = new DurationConverter[1];
    this.iDurationConverters = this.iDurationConverters.add(paramDurationConverter, arrayOfDurationConverter);
    return arrayOfDurationConverter[0];
  }
  
  public DurationConverter removeDurationConverter(DurationConverter paramDurationConverter) throws SecurityException {
    checkAlterDurationConverters();
    if (paramDurationConverter == null)
      return null; 
    DurationConverter[] arrayOfDurationConverter = new DurationConverter[1];
    this.iDurationConverters = this.iDurationConverters.remove(paramDurationConverter, arrayOfDurationConverter);
    return arrayOfDurationConverter[0];
  }
  
  private void checkAlterDurationConverters() {
    SecurityManager securityManager = System.getSecurityManager();
    if (securityManager != null)
      securityManager.checkPermission(new JodaTimePermission("ConverterManager.alterDurationConverters")); 
  }
  
  public PeriodConverter getPeriodConverter(Object paramObject) {
    PeriodConverter periodConverter = (PeriodConverter)this.iPeriodConverters.select((paramObject == null) ? null : paramObject.getClass());
    if (periodConverter != null)
      return periodConverter; 
    throw new IllegalArgumentException("No period converter found for type: " + ((paramObject == null) ? "null" : paramObject
        .getClass().getName()));
  }
  
  public PeriodConverter[] getPeriodConverters() {
    ConverterSet converterSet = this.iPeriodConverters;
    PeriodConverter[] arrayOfPeriodConverter = new PeriodConverter[converterSet.size()];
    converterSet.copyInto(arrayOfPeriodConverter);
    return arrayOfPeriodConverter;
  }
  
  public PeriodConverter addPeriodConverter(PeriodConverter paramPeriodConverter) throws SecurityException {
    checkAlterPeriodConverters();
    if (paramPeriodConverter == null)
      return null; 
    PeriodConverter[] arrayOfPeriodConverter = new PeriodConverter[1];
    this.iPeriodConverters = this.iPeriodConverters.add(paramPeriodConverter, arrayOfPeriodConverter);
    return arrayOfPeriodConverter[0];
  }
  
  public PeriodConverter removePeriodConverter(PeriodConverter paramPeriodConverter) throws SecurityException {
    checkAlterPeriodConverters();
    if (paramPeriodConverter == null)
      return null; 
    PeriodConverter[] arrayOfPeriodConverter = new PeriodConverter[1];
    this.iPeriodConverters = this.iPeriodConverters.remove(paramPeriodConverter, arrayOfPeriodConverter);
    return arrayOfPeriodConverter[0];
  }
  
  private void checkAlterPeriodConverters() {
    SecurityManager securityManager = System.getSecurityManager();
    if (securityManager != null)
      securityManager.checkPermission(new JodaTimePermission("ConverterManager.alterPeriodConverters")); 
  }
  
  public IntervalConverter getIntervalConverter(Object paramObject) {
    IntervalConverter intervalConverter = (IntervalConverter)this.iIntervalConverters.select((paramObject == null) ? null : paramObject.getClass());
    if (intervalConverter != null)
      return intervalConverter; 
    throw new IllegalArgumentException("No interval converter found for type: " + ((paramObject == null) ? "null" : paramObject
        .getClass().getName()));
  }
  
  public IntervalConverter[] getIntervalConverters() {
    ConverterSet converterSet = this.iIntervalConverters;
    IntervalConverter[] arrayOfIntervalConverter = new IntervalConverter[converterSet.size()];
    converterSet.copyInto(arrayOfIntervalConverter);
    return arrayOfIntervalConverter;
  }
  
  public IntervalConverter addIntervalConverter(IntervalConverter paramIntervalConverter) throws SecurityException {
    checkAlterIntervalConverters();
    if (paramIntervalConverter == null)
      return null; 
    IntervalConverter[] arrayOfIntervalConverter = new IntervalConverter[1];
    this.iIntervalConverters = this.iIntervalConverters.add(paramIntervalConverter, arrayOfIntervalConverter);
    return arrayOfIntervalConverter[0];
  }
  
  public IntervalConverter removeIntervalConverter(IntervalConverter paramIntervalConverter) throws SecurityException {
    checkAlterIntervalConverters();
    if (paramIntervalConverter == null)
      return null; 
    IntervalConverter[] arrayOfIntervalConverter = new IntervalConverter[1];
    this.iIntervalConverters = this.iIntervalConverters.remove(paramIntervalConverter, arrayOfIntervalConverter);
    return arrayOfIntervalConverter[0];
  }
  
  private void checkAlterIntervalConverters() {
    SecurityManager securityManager = System.getSecurityManager();
    if (securityManager != null)
      securityManager.checkPermission(new JodaTimePermission("ConverterManager.alterIntervalConverters")); 
  }
  
  public String toString() {
    return "ConverterManager[" + this.iInstantConverters
      .size() + " instant," + this.iPartialConverters
      .size() + " partial," + this.iDurationConverters
      .size() + " duration," + this.iPeriodConverters
      .size() + " period," + this.iIntervalConverters
      .size() + " interval]";
  }
}
