package org.joda.time.convert;

import org.joda.time.Chronology;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.ReadableInstant;
import org.joda.time.chrono.ISOChronology;

class ReadableInstantConverter extends AbstractConverter implements InstantConverter, PartialConverter {
  static final ReadableInstantConverter INSTANCE = new ReadableInstantConverter();
  
  public Chronology getChronology(Object paramObject, DateTimeZone paramDateTimeZone) {
    Chronology chronology = ((ReadableInstant)paramObject).getChronology();
    if (chronology == null)
      return ISOChronology.getInstance(paramDateTimeZone); 
    DateTimeZone dateTimeZone = chronology.getZone();
    if (dateTimeZone != paramDateTimeZone) {
      chronology = chronology.withZone(paramDateTimeZone);
      if (chronology == null)
        return ISOChronology.getInstance(paramDateTimeZone); 
    } 
    return chronology;
  }
  
  public Chronology getChronology(Object paramObject, Chronology paramChronology) {
    if (paramChronology == null) {
      paramChronology = ((ReadableInstant)paramObject).getChronology();
      paramChronology = DateTimeUtils.getChronology(paramChronology);
    } 
    return paramChronology;
  }
  
  public long getInstantMillis(Object paramObject, Chronology paramChronology) { return ((ReadableInstant)paramObject).getMillis(); }
  
  public Class<?> getSupportedType() { return ReadableInstant.class; }
}
