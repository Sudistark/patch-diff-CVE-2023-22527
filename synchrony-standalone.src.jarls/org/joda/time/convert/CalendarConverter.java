package org.joda.time.convert;

import java.util.Calendar;
import java.util.GregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTimeZone;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.JulianChronology;

final class CalendarConverter extends AbstractConverter implements InstantConverter, PartialConverter {
  static final CalendarConverter INSTANCE = new CalendarConverter();
  
  public Chronology getChronology(Object paramObject, Chronology paramChronology) {
    if (paramChronology != null)
      return paramChronology; 
    Calendar calendar = (Calendar)paramObject;
    DateTimeZone dateTimeZone = null;
    try {
      dateTimeZone = DateTimeZone.forTimeZone(calendar.getTimeZone());
    } catch (IllegalArgumentException illegalArgumentException) {
      dateTimeZone = DateTimeZone.getDefault();
    } 
    return getChronology(calendar, dateTimeZone);
  }
  
  public Chronology getChronology(Object paramObject, DateTimeZone paramDateTimeZone) {
    if (paramObject.getClass().getName().endsWith(".BuddhistCalendar"))
      return BuddhistChronology.getInstance(paramDateTimeZone); 
    if (paramObject instanceof GregorianCalendar) {
      GregorianCalendar gregorianCalendar = (GregorianCalendar)paramObject;
      long l = gregorianCalendar.getGregorianChange().getTime();
      if (l == Float.MIN_VALUE)
        return GregorianChronology.getInstance(paramDateTimeZone); 
      if (l == Float.MAX_VALUE)
        return JulianChronology.getInstance(paramDateTimeZone); 
      return GJChronology.getInstance(paramDateTimeZone, l, 4);
    } 
    return ISOChronology.getInstance(paramDateTimeZone);
  }
  
  public long getInstantMillis(Object paramObject, Chronology paramChronology) {
    Calendar calendar = (Calendar)paramObject;
    return calendar.getTime().getTime();
  }
  
  public Class<?> getSupportedType() { return Calendar.class; }
}
