package org.joda.time.chrono;

import java.util.concurrent.ConcurrentHashMap;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeZone;

public final class IslamicChronology extends BasicChronology {
  private static final long serialVersionUID = -3663823829888L;
  
  public static final int AH = 1;
  
  private static final DateTimeField ERA_FIELD = new BasicSingleEraDateTimeField("AH");
  
  public static final LeapYearPatternType LEAP_YEAR_15_BASED = new LeapYearPatternType(0, 623158436);
  
  public static final LeapYearPatternType LEAP_YEAR_16_BASED = new LeapYearPatternType(1, 623191204);
  
  public static final LeapYearPatternType LEAP_YEAR_INDIAN = new LeapYearPatternType(2, 690562340);
  
  public static final LeapYearPatternType LEAP_YEAR_HABASH_AL_HASIB = new LeapYearPatternType(3, 153692453);
  
  private static final int MIN_YEAR = -292269337;
  
  private static final int MAX_YEAR = 292271022;
  
  private static final int MONTH_PAIR_LENGTH = 59;
  
  private static final int LONG_MONTH_LENGTH = 30;
  
  private static final int SHORT_MONTH_LENGTH = 29;
  
  private static final long MILLIS_PER_MONTH_PAIR = 5097600000L;
  
  private static final long MILLIS_PER_MONTH = 2551440384L;
  
  private static final long MILLIS_PER_LONG_MONTH = 2592000000L;
  
  private static final long MILLIS_PER_YEAR = 30617280288L;
  
  private static final long MILLIS_PER_SHORT_YEAR = 30585600000L;
  
  private static final long MILLIS_PER_LONG_YEAR = 30672000000L;
  
  private static final long MILLIS_YEAR_1 = -42521587200000L;
  
  private static final int CYCLE = 30;
  
  private static final long MILLIS_PER_CYCLE = 918518400000L;
  
  private static final ConcurrentHashMap<DateTimeZone, IslamicChronology[]> cCache = new ConcurrentHashMap();
  
  private static final IslamicChronology INSTANCE_UTC = getInstance(DateTimeZone.UTC);
  
  private final LeapYearPatternType iLeapYears;
  
  public static IslamicChronology getInstanceUTC() { return INSTANCE_UTC; }
  
  public static IslamicChronology getInstance() { return getInstance(DateTimeZone.getDefault(), LEAP_YEAR_16_BASED); }
  
  public static IslamicChronology getInstance(DateTimeZone paramDateTimeZone) { return getInstance(paramDateTimeZone, LEAP_YEAR_16_BASED); }
  
  public static IslamicChronology getInstance(DateTimeZone paramDateTimeZone, LeapYearPatternType paramLeapYearPatternType) {
    if (paramDateTimeZone == null)
      paramDateTimeZone = DateTimeZone.getDefault(); 
    IslamicChronology[] arrayOfIslamicChronology = (IslamicChronology[])cCache.get(paramDateTimeZone);
    if (arrayOfIslamicChronology == null) {
      arrayOfIslamicChronology = new IslamicChronology[4];
      IslamicChronology[] arrayOfIslamicChronology1 = (IslamicChronology[])cCache.putIfAbsent(paramDateTimeZone, arrayOfIslamicChronology);
      if (arrayOfIslamicChronology1 != null)
        arrayOfIslamicChronology = arrayOfIslamicChronology1; 
    } 
    IslamicChronology islamicChronology = arrayOfIslamicChronology[paramLeapYearPatternType.index];
    if (islamicChronology == null)
      synchronized (arrayOfIslamicChronology) {
        islamicChronology = arrayOfIslamicChronology[paramLeapYearPatternType.index];
        if (islamicChronology == null) {
          if (paramDateTimeZone == DateTimeZone.UTC) {
            islamicChronology = new IslamicChronology(null, null, paramLeapYearPatternType);
            DateTime dateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, islamicChronology);
            islamicChronology = new IslamicChronology(LimitChronology.getInstance(islamicChronology, dateTime, null), null, paramLeapYearPatternType);
          } else {
            islamicChronology = getInstance(DateTimeZone.UTC, paramLeapYearPatternType);
            islamicChronology = new IslamicChronology(ZonedChronology.getInstance(islamicChronology, paramDateTimeZone), null, paramLeapYearPatternType);
          } 
          arrayOfIslamicChronology[paramLeapYearPatternType.index] = islamicChronology;
        } 
      }  
    return islamicChronology;
  }
  
  IslamicChronology(Chronology paramChronology, Object paramObject, LeapYearPatternType paramLeapYearPatternType) {
    super(paramChronology, paramObject, 4);
    this.iLeapYears = paramLeapYearPatternType;
  }
  
  private Object readResolve() {
    Chronology chronology = getBase();
    return (chronology == null) ? getInstanceUTC() : getInstance(chronology.getZone());
  }
  
  public LeapYearPatternType getLeapYearPatternType() { return this.iLeapYears; }
  
  public Chronology withUTC() { return INSTANCE_UTC; }
  
  public Chronology withZone(DateTimeZone paramDateTimeZone) {
    if (paramDateTimeZone == null)
      paramDateTimeZone = DateTimeZone.getDefault(); 
    if (paramDateTimeZone == getZone())
      return this; 
    return getInstance(paramDateTimeZone);
  }
  
  public boolean equals(Object paramObject) {
    if (this == paramObject)
      return true; 
    if (paramObject instanceof IslamicChronology) {
      IslamicChronology islamicChronology = (IslamicChronology)paramObject;
      return ((getLeapYearPatternType()).index == (islamicChronology.getLeapYearPatternType()).index && super
        .equals(paramObject));
    } 
    return false;
  }
  
  public int hashCode() { return super.hashCode() * 13 + getLeapYearPatternType().hashCode(); }
  
  int getYear(long paramLong) {
    long l1 = paramLong - -42521587200000L;
    long l2 = l1 / 918518400000L;
    long l3 = l1 % 918518400000L;
    int i = (int)(l2 * 30L + 1L);
    long l4 = isLeapYear(i) ? 30672000000L : 30585600000L;
    while (l3 >= l4) {
      l3 -= l4;
      l4 = isLeapYear(++i) ? 30672000000L : 30585600000L;
    } 
    return i;
  }
  
  long setYear(long paramLong, int paramInt) {
    int i = getYear(paramLong);
    int j = getDayOfYear(paramLong, i);
    int k = getMillisOfDay(paramLong);
    if (j > 354 && !isLeapYear(paramInt))
      j--; 
    paramLong = getYearMonthDayMillis(paramInt, 1, j);
    return k;
  }
  
  long getYearDifference(long paramLong1, long paramLong2) {
    int i = getYear(paramLong1);
    int j = getYear(paramLong2);
    long l1 = paramLong1 - getYearMillis(i);
    long l2 = paramLong2 - getYearMillis(j);
    int k = i - j;
    if (l1 < l2)
      k--; 
    return k;
  }
  
  long getTotalMillisByYearMonth(int paramInt1, int paramInt2) {
    if (--paramInt2 % 2 == 1) {
      paramInt2 /= 2;
      return paramInt2 * 5097600000L + 2592000000L;
    } 
    paramInt2 /= 2;
    return paramInt2 * 5097600000L;
  }
  
  int getDayOfMonth(long paramLong) {
    int i = getDayOfYear(paramLong) - 1;
    if (i == 354)
      return 30; 
    return i % 59 % 30 + 1;
  }
  
  boolean isLeapYear(int paramInt) { return this.iLeapYears.isLeapYear(paramInt); }
  
  int getDaysInYearMax() { return 355; }
  
  int getDaysInYear(int paramInt) { return isLeapYear(paramInt) ? 355 : 354; }
  
  int getDaysInYearMonth(int paramInt1, int paramInt2) {
    if (paramInt2 == 12 && isLeapYear(paramInt1))
      return 30; 
    return (--paramInt2 % 2 == 0) ? 30 : 29;
  }
  
  int getDaysInMonthMax() { return 30; }
  
  int getDaysInMonthMax(int paramInt) {
    if (paramInt == 12)
      return 30; 
    return (--paramInt % 2 == 0) ? 30 : 29;
  }
  
  int getMonthOfYear(long paramLong, int paramInt) {
    int i = (int)((paramLong - getYearMillis(paramInt)) / 86400000L);
    if (i == 354)
      return 12; 
    return i * 2 / 59 + 1;
  }
  
  long getAverageMillisPerYear() { return 30617280288L; }
  
  long getAverageMillisPerYearDividedByTwo() { return 15308640144L; }
  
  long getAverageMillisPerMonth() { return 2551440384L; }
  
  long calculateFirstDayOfYearMillis(int paramInt) {
    if (paramInt > 292271022)
      throw new ArithmeticException("Year is too large: " + paramInt + " > " + 292271022); 
    if (paramInt < -292269337)
      throw new ArithmeticException("Year is too small: " + paramInt + " < " + -292269337); 
    paramInt--;
    long l1 = (paramInt / 30);
    long l2 = -42521587200000L + l1 * 918518400000L;
    int i = paramInt % 30 + 1;
    for (byte b = 1; b < i; b++)
      l2 += (isLeapYear(b) ? 30672000000L : 30585600000L); 
    return l2;
  }
  
  int getMinYear() { return 1; }
  
  int getMaxYear() { return 292271022; }
  
  long getApproxMillisAtEpochDividedByTwo() { return 21260793600000L; }
  
  protected void assemble(AssembledChronology.Fields paramFields) {
    if (getBase() == null) {
      super.assemble(paramFields);
      paramFields.era = ERA_FIELD;
      paramFields.monthOfYear = new BasicMonthOfYearDateTimeField(this, 12);
      paramFields.months = paramFields.monthOfYear.getDurationField();
    } 
  }
}
