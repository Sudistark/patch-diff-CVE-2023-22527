package org.joda.time.chrono;

import java.text.DateFormatSymbols;
import java.util.Locale;
import java.util.TreeMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeUtils;
import org.joda.time.IllegalFieldValueException;

class GJLocaleSymbols {
  private static ConcurrentMap<Locale, GJLocaleSymbols> cCache = new ConcurrentHashMap();
  
  private final String[] iEras;
  
  private final String[] iDaysOfWeek;
  
  private final String[] iShortDaysOfWeek;
  
  private final String[] iMonths;
  
  private final String[] iShortMonths;
  
  private final String[] iHalfday;
  
  private final TreeMap<String, Integer> iParseEras;
  
  private final TreeMap<String, Integer> iParseDaysOfWeek;
  
  private final TreeMap<String, Integer> iParseMonths;
  
  private final int iMaxEraLength;
  
  private final int iMaxDayOfWeekLength;
  
  private final int iMaxShortDayOfWeekLength;
  
  private final int iMaxMonthLength;
  
  private final int iMaxShortMonthLength;
  
  private final int iMaxHalfdayLength;
  
  static GJLocaleSymbols forLocale(Locale paramLocale) {
    if (paramLocale == null)
      paramLocale = Locale.getDefault(); 
    GJLocaleSymbols gJLocaleSymbols = (GJLocaleSymbols)cCache.get(paramLocale);
    if (gJLocaleSymbols == null) {
      gJLocaleSymbols = new GJLocaleSymbols(paramLocale);
      GJLocaleSymbols gJLocaleSymbols1 = (GJLocaleSymbols)cCache.putIfAbsent(paramLocale, gJLocaleSymbols);
      if (gJLocaleSymbols1 != null)
        gJLocaleSymbols = gJLocaleSymbols1; 
    } 
    return gJLocaleSymbols;
  }
  
  private static String[] realignMonths(String[] paramArrayOfString) {
    String[] arrayOfString = new String[13];
    for (byte b = 1; b < 13; b++)
      arrayOfString[b] = paramArrayOfString[b - true]; 
    return arrayOfString;
  }
  
  private static String[] realignDaysOfWeek(String[] paramArrayOfString) {
    String[] arrayOfString = new String[8];
    for (byte b = 1; b < 8; b++)
      arrayOfString[b] = paramArrayOfString[(b < 7) ? (b + true) : 1]; 
    return arrayOfString;
  }
  
  private static void addSymbols(TreeMap<String, Integer> paramTreeMap, String[] paramArrayOfString, Integer[] paramArrayOfInteger) {
    for (int i = paramArrayOfString.length; --i >= 0; ) {
      String str = paramArrayOfString[i];
      if (str != null)
        paramTreeMap.put(str, paramArrayOfInteger[i]); 
    } 
  }
  
  private static void addNumerals(TreeMap<String, Integer> paramTreeMap, int paramInt1, int paramInt2, Integer[] paramArrayOfInteger) {
    for (int i = paramInt1; i <= paramInt2; i++)
      paramTreeMap.put(String.valueOf(i).intern(), paramArrayOfInteger[i]); 
  }
  
  private static int maxLength(String[] paramArrayOfString) {
    int i = 0;
    for (int j = paramArrayOfString.length; --j >= 0; ) {
      String str = paramArrayOfString[j];
      if (str != null) {
        int k = str.length();
        if (k > i)
          i = k; 
      } 
    } 
    return i;
  }
  
  private GJLocaleSymbols(Locale paramLocale) {
    DateFormatSymbols dateFormatSymbols = DateTimeUtils.getDateFormatSymbols(paramLocale);
    this.iEras = dateFormatSymbols.getEras();
    this.iDaysOfWeek = realignDaysOfWeek(dateFormatSymbols.getWeekdays());
    this.iShortDaysOfWeek = realignDaysOfWeek(dateFormatSymbols.getShortWeekdays());
    this.iMonths = realignMonths(dateFormatSymbols.getMonths());
    this.iShortMonths = realignMonths(dateFormatSymbols.getShortMonths());
    this.iHalfday = dateFormatSymbols.getAmPmStrings();
    Integer[] arrayOfInteger = new Integer[13];
    for (byte b = 0; b < 13; b++)
      arrayOfInteger[b] = Integer.valueOf(b); 
    this.iParseEras = new TreeMap(String.CASE_INSENSITIVE_ORDER);
    addSymbols(this.iParseEras, this.iEras, arrayOfInteger);
    if ("en".equals(paramLocale.getLanguage())) {
      this.iParseEras.put("BCE", arrayOfInteger[0]);
      this.iParseEras.put("CE", arrayOfInteger[1]);
    } 
    this.iParseDaysOfWeek = new TreeMap(String.CASE_INSENSITIVE_ORDER);
    addSymbols(this.iParseDaysOfWeek, this.iDaysOfWeek, arrayOfInteger);
    addSymbols(this.iParseDaysOfWeek, this.iShortDaysOfWeek, arrayOfInteger);
    addNumerals(this.iParseDaysOfWeek, 1, 7, arrayOfInteger);
    this.iParseMonths = new TreeMap(String.CASE_INSENSITIVE_ORDER);
    addSymbols(this.iParseMonths, this.iMonths, arrayOfInteger);
    addSymbols(this.iParseMonths, this.iShortMonths, arrayOfInteger);
    addNumerals(this.iParseMonths, 1, 12, arrayOfInteger);
    this.iMaxEraLength = maxLength(this.iEras);
    this.iMaxDayOfWeekLength = maxLength(this.iDaysOfWeek);
    this.iMaxShortDayOfWeekLength = maxLength(this.iShortDaysOfWeek);
    this.iMaxMonthLength = maxLength(this.iMonths);
    this.iMaxShortMonthLength = maxLength(this.iShortMonths);
    this.iMaxHalfdayLength = maxLength(this.iHalfday);
  }
  
  public String eraValueToText(int paramInt) { return this.iEras[paramInt]; }
  
  public int eraTextToValue(String paramString) {
    Integer integer = (Integer)this.iParseEras.get(paramString);
    if (integer != null)
      return integer.intValue(); 
    throw new IllegalFieldValueException(DateTimeFieldType.era(), paramString);
  }
  
  public int getEraMaxTextLength() { return this.iMaxEraLength; }
  
  public String monthOfYearValueToText(int paramInt) { return this.iMonths[paramInt]; }
  
  public String monthOfYearValueToShortText(int paramInt) { return this.iShortMonths[paramInt]; }
  
  public int monthOfYearTextToValue(String paramString) {
    Integer integer = (Integer)this.iParseMonths.get(paramString);
    if (integer != null)
      return integer.intValue(); 
    throw new IllegalFieldValueException(DateTimeFieldType.monthOfYear(), paramString);
  }
  
  public int getMonthMaxTextLength() { return this.iMaxMonthLength; }
  
  public int getMonthMaxShortTextLength() { return this.iMaxShortMonthLength; }
  
  public String dayOfWeekValueToText(int paramInt) { return this.iDaysOfWeek[paramInt]; }
  
  public String dayOfWeekValueToShortText(int paramInt) { return this.iShortDaysOfWeek[paramInt]; }
  
  public int dayOfWeekTextToValue(String paramString) {
    Integer integer = (Integer)this.iParseDaysOfWeek.get(paramString);
    if (integer != null)
      return integer.intValue(); 
    throw new IllegalFieldValueException(DateTimeFieldType.dayOfWeek(), paramString);
  }
  
  public int getDayOfWeekMaxTextLength() { return this.iMaxDayOfWeekLength; }
  
  public int getDayOfWeekMaxShortTextLength() { return this.iMaxShortDayOfWeekLength; }
  
  public String halfdayValueToText(int paramInt) { return this.iHalfday[paramInt]; }
  
  public int halfdayTextToValue(String paramString) {
    String[] arrayOfString = this.iHalfday;
    for (int i = arrayOfString.length; --i >= 0;) {
      if (arrayOfString[i].equalsIgnoreCase(paramString))
        return i; 
    } 
    throw new IllegalFieldValueException(DateTimeFieldType.halfdayOfDay(), paramString);
  }
  
  public int getHalfdayMaxTextLength() { return this.iMaxHalfdayLength; }
}
