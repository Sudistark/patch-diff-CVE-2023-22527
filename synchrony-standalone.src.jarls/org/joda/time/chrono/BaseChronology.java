package org.joda.time.chrono;

import java.io.Serializable;
import org.joda.time.Chronology;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.field.FieldUtils;
import org.joda.time.field.UnsupportedDateTimeField;
import org.joda.time.field.UnsupportedDurationField;

public abstract class BaseChronology extends Chronology implements Serializable {
  private static final long serialVersionUID = -7310865996721419676L;
  
  public abstract DateTimeZone getZone();
  
  public abstract Chronology withUTC();
  
  public abstract Chronology withZone(DateTimeZone paramDateTimeZone);
  
  public long getDateTimeMillis(int paramInt1, int paramInt2, int paramInt3, int paramInt4) throws IllegalArgumentException {
    long l = year().set(0L, paramInt1);
    l = monthOfYear().set(l, paramInt2);
    l = dayOfMonth().set(l, paramInt3);
    return millisOfDay().set(l, paramInt4);
  }
  
  public long getDateTimeMillis(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6, int paramInt7) throws IllegalArgumentException {
    long l = year().set(0L, paramInt1);
    l = monthOfYear().set(l, paramInt2);
    l = dayOfMonth().set(l, paramInt3);
    l = hourOfDay().set(l, paramInt4);
    l = minuteOfHour().set(l, paramInt5);
    l = secondOfMinute().set(l, paramInt6);
    return millisOfSecond().set(l, paramInt7);
  }
  
  public long getDateTimeMillis(long paramLong, int paramInt1, int paramInt2, int paramInt3, int paramInt4) throws IllegalArgumentException {
    paramLong = hourOfDay().set(paramLong, paramInt1);
    paramLong = minuteOfHour().set(paramLong, paramInt2);
    paramLong = secondOfMinute().set(paramLong, paramInt3);
    return millisOfSecond().set(paramLong, paramInt4);
  }
  
  public void validate(ReadablePartial paramReadablePartial, int[] paramArrayOfInt) {
    int i = paramReadablePartial.size();
    byte b;
    for (b = 0; b < i; b++) {
      int j = paramArrayOfInt[b];
      DateTimeField dateTimeField = paramReadablePartial.getField(b);
      if (j < dateTimeField.getMinimumValue())
        throw new IllegalFieldValueException(dateTimeField
            .getType(), Integer.valueOf(j), 
            Integer.valueOf(dateTimeField.getMinimumValue()), null); 
      if (j > dateTimeField.getMaximumValue())
        throw new IllegalFieldValueException(dateTimeField
            .getType(), Integer.valueOf(j), null, 
            Integer.valueOf(dateTimeField.getMaximumValue())); 
    } 
    for (b = 0; b < i; b++) {
      int j = paramArrayOfInt[b];
      DateTimeField dateTimeField = paramReadablePartial.getField(b);
      if (j < dateTimeField.getMinimumValue(paramReadablePartial, paramArrayOfInt))
        throw new IllegalFieldValueException(dateTimeField
            .getType(), Integer.valueOf(j), 
            Integer.valueOf(dateTimeField.getMinimumValue(paramReadablePartial, paramArrayOfInt)), null); 
      if (j > dateTimeField.getMaximumValue(paramReadablePartial, paramArrayOfInt))
        throw new IllegalFieldValueException(dateTimeField
            .getType(), Integer.valueOf(j), null, 
            Integer.valueOf(dateTimeField.getMaximumValue(paramReadablePartial, paramArrayOfInt))); 
    } 
  }
  
  public int[] get(ReadablePartial paramReadablePartial, long paramLong) {
    int i = paramReadablePartial.size();
    int[] arrayOfInt = new int[i];
    for (byte b = 0; b < i; b++)
      arrayOfInt[b] = paramReadablePartial.getFieldType(b).getField(this).get(paramLong); 
    return arrayOfInt;
  }
  
  public long set(ReadablePartial paramReadablePartial, long paramLong) {
    byte b;
    int i;
    for (b = 0, i = paramReadablePartial.size(); b < i; b++)
      paramLong = paramReadablePartial.getFieldType(b).getField(this).set(paramLong, paramReadablePartial.getValue(b)); 
    return paramLong;
  }
  
  public int[] get(ReadablePeriod paramReadablePeriod, long paramLong1, long paramLong2) {
    int i = paramReadablePeriod.size();
    int[] arrayOfInt = new int[i];
    if (paramLong1 != paramLong2)
      for (byte b = 0; b < i; b++) {
        DurationField durationField = paramReadablePeriod.getFieldType(b).getField(this);
        int j = durationField.getDifference(paramLong2, paramLong1);
        if (j != 0)
          paramLong1 = durationField.add(paramLong1, j); 
        arrayOfInt[b] = j;
      }  
    return arrayOfInt;
  }
  
  public int[] get(ReadablePeriod paramReadablePeriod, long paramLong) {
    int i = paramReadablePeriod.size();
    int[] arrayOfInt = new int[i];
    if (paramLong != 0L) {
      long l = 0L;
      for (byte b = 0; b < i; b++) {
        DurationField durationField = paramReadablePeriod.getFieldType(b).getField(this);
        if (durationField.isPrecise()) {
          int j = durationField.getDifference(paramLong, l);
          l = durationField.add(l, j);
          arrayOfInt[b] = j;
        } 
      } 
    } 
    return arrayOfInt;
  }
  
  public long add(ReadablePeriod paramReadablePeriod, long paramLong, int paramInt) {
    if (paramInt != 0 && paramReadablePeriod != null) {
      byte b;
      int i;
      for (b = 0, i = paramReadablePeriod.size(); b < i; b++) {
        long l = paramReadablePeriod.getValue(b);
        if (l != 0L)
          paramLong = paramReadablePeriod.getFieldType(b).getField(this).add(paramLong, l * paramInt); 
      } 
    } 
    return paramLong;
  }
  
  public long add(long paramLong1, long paramLong2, int paramInt) {
    if (paramLong2 == 0L || paramInt == 0)
      return paramLong1; 
    long l = FieldUtils.safeMultiply(paramLong2, paramInt);
    return FieldUtils.safeAdd(paramLong1, l);
  }
  
  public DurationField millis() { return UnsupportedDurationField.getInstance(DurationFieldType.millis()); }
  
  public DateTimeField millisOfSecond() { return UnsupportedDateTimeField.getInstance(DateTimeFieldType.millisOfSecond(), millis()); }
  
  public DateTimeField millisOfDay() { return UnsupportedDateTimeField.getInstance(DateTimeFieldType.millisOfDay(), millis()); }
  
  public DurationField seconds() { return UnsupportedDurationField.getInstance(DurationFieldType.seconds()); }
  
  public DateTimeField secondOfMinute() { return UnsupportedDateTimeField.getInstance(DateTimeFieldType.secondOfMinute(), seconds()); }
  
  public DateTimeField secondOfDay() { return UnsupportedDateTimeField.getInstance(DateTimeFieldType.secondOfDay(), seconds()); }
  
  public DurationField minutes() { return UnsupportedDurationField.getInstance(DurationFieldType.minutes()); }
  
  public DateTimeField minuteOfHour() { return UnsupportedDateTimeField.getInstance(DateTimeFieldType.minuteOfHour(), minutes()); }
  
  public DateTimeField minuteOfDay() { return UnsupportedDateTimeField.getInstance(DateTimeFieldType.minuteOfDay(), minutes()); }
  
  public DurationField hours() { return UnsupportedDurationField.getInstance(DurationFieldType.hours()); }
  
  public DateTimeField hourOfDay() { return UnsupportedDateTimeField.getInstance(DateTimeFieldType.hourOfDay(), hours()); }
  
  public DateTimeField clockhourOfDay() { return UnsupportedDateTimeField.getInstance(DateTimeFieldType.clockhourOfDay(), hours()); }
  
  public DurationField halfdays() { return UnsupportedDurationField.getInstance(DurationFieldType.halfdays()); }
  
  public DateTimeField hourOfHalfday() { return UnsupportedDateTimeField.getInstance(DateTimeFieldType.hourOfHalfday(), hours()); }
  
  public DateTimeField clockhourOfHalfday() { return UnsupportedDateTimeField.getInstance(DateTimeFieldType.clockhourOfHalfday(), hours()); }
  
  public DateTimeField halfdayOfDay() { return UnsupportedDateTimeField.getInstance(DateTimeFieldType.halfdayOfDay(), halfdays()); }
  
  public DurationField days() { return UnsupportedDurationField.getInstance(DurationFieldType.days()); }
  
  public DateTimeField dayOfWeek() { return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfWeek(), days()); }
  
  public DateTimeField dayOfMonth() { return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfMonth(), days()); }
  
  public DateTimeField dayOfYear() { return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfYear(), days()); }
  
  public DurationField weeks() { return UnsupportedDurationField.getInstance(DurationFieldType.weeks()); }
  
  public DateTimeField weekOfWeekyear() { return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekOfWeekyear(), weeks()); }
  
  public DurationField weekyears() { return UnsupportedDurationField.getInstance(DurationFieldType.weekyears()); }
  
  public DateTimeField weekyear() { return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekyear(), weekyears()); }
  
  public DateTimeField weekyearOfCentury() { return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekyearOfCentury(), weekyears()); }
  
  public DurationField months() { return UnsupportedDurationField.getInstance(DurationFieldType.months()); }
  
  public DateTimeField monthOfYear() { return UnsupportedDateTimeField.getInstance(DateTimeFieldType.monthOfYear(), months()); }
  
  public DurationField years() { return UnsupportedDurationField.getInstance(DurationFieldType.years()); }
  
  public DateTimeField year() { return UnsupportedDateTimeField.getInstance(DateTimeFieldType.year(), years()); }
  
  public DateTimeField yearOfEra() { return UnsupportedDateTimeField.getInstance(DateTimeFieldType.yearOfEra(), years()); }
  
  public DateTimeField yearOfCentury() { return UnsupportedDateTimeField.getInstance(DateTimeFieldType.yearOfCentury(), years()); }
  
  public DurationField centuries() { return UnsupportedDurationField.getInstance(DurationFieldType.centuries()); }
  
  public DateTimeField centuryOfEra() { return UnsupportedDateTimeField.getInstance(DateTimeFieldType.centuryOfEra(), centuries()); }
  
  public DurationField eras() { return UnsupportedDurationField.getInstance(DurationFieldType.eras()); }
  
  public DateTimeField era() { return UnsupportedDateTimeField.getInstance(DateTimeFieldType.era(), eras()); }
  
  public abstract String toString();
}
