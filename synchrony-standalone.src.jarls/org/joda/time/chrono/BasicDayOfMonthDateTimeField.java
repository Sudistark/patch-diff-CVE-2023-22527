package org.joda.time.chrono;

import org.joda.time.DateTimeFieldType;
import org.joda.time.DurationField;
import org.joda.time.ReadablePartial;
import org.joda.time.field.PreciseDurationDateTimeField;

final class BasicDayOfMonthDateTimeField extends PreciseDurationDateTimeField {
  private static final long serialVersionUID = -4677223814028011723L;
  
  private final BasicChronology iChronology;
  
  BasicDayOfMonthDateTimeField(BasicChronology paramBasicChronology, DurationField paramDurationField) {
    super(DateTimeFieldType.dayOfMonth(), paramDurationField);
    this.iChronology = paramBasicChronology;
  }
  
  public int get(long paramLong) { return this.iChronology.getDayOfMonth(paramLong); }
  
  public DurationField getRangeDurationField() { return this.iChronology.months(); }
  
  public int getMinimumValue() { return 1; }
  
  public int getMaximumValue() { return this.iChronology.getDaysInMonthMax(); }
  
  public int getMaximumValue(long paramLong) { return this.iChronology.getDaysInMonthMax(paramLong); }
  
  public int getMaximumValue(ReadablePartial paramReadablePartial) {
    if (paramReadablePartial.isSupported(DateTimeFieldType.monthOfYear())) {
      int i = paramReadablePartial.get(DateTimeFieldType.monthOfYear());
      if (paramReadablePartial.isSupported(DateTimeFieldType.year())) {
        int j = paramReadablePartial.get(DateTimeFieldType.year());
        return this.iChronology.getDaysInYearMonth(j, i);
      } 
      return this.iChronology.getDaysInMonthMax(i);
    } 
    return getMaximumValue();
  }
  
  public int getMaximumValue(ReadablePartial paramReadablePartial, int[] paramArrayOfInt) {
    int i = paramReadablePartial.size();
    for (byte b = 0; b < i; b++) {
      if (paramReadablePartial.getFieldType(b) == DateTimeFieldType.monthOfYear()) {
        int j = paramArrayOfInt[b];
        for (byte b1 = 0; b1 < i; b1++) {
          if (paramReadablePartial.getFieldType(b1) == DateTimeFieldType.year()) {
            int k = paramArrayOfInt[b1];
            return this.iChronology.getDaysInYearMonth(k, j);
          } 
        } 
        return this.iChronology.getDaysInMonthMax(j);
      } 
    } 
    return getMaximumValue();
  }
  
  protected int getMaximumValueForSet(long paramLong, int paramInt) { return this.iChronology.getDaysInMonthMaxForSet(paramLong, paramInt); }
  
  public boolean isLeap(long paramLong) { return this.iChronology.isLeapDay(paramLong); }
  
  private Object readResolve() { return this.iChronology.dayOfMonth(); }
}
