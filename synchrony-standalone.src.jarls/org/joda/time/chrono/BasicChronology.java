package org.joda.time.chrono;

import org.joda.time.Chronology;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.field.DividedDateTimeField;
import org.joda.time.field.FieldUtils;
import org.joda.time.field.MillisDurationField;
import org.joda.time.field.OffsetDateTimeField;
import org.joda.time.field.PreciseDateTimeField;
import org.joda.time.field.PreciseDurationField;
import org.joda.time.field.RemainderDateTimeField;
import org.joda.time.field.ZeroIsMaxDateTimeField;

abstract class BasicChronology extends AssembledChronology {
  private static final long serialVersionUID = 8283225332206808863L;
  
  private static final DurationField cMillisField = MillisDurationField.INSTANCE;
  
  private static final DurationField cSecondsField = new PreciseDurationField(
      DurationFieldType.seconds(), 1000L);
  
  private static final DurationField cMinutesField = new PreciseDurationField(
      DurationFieldType.minutes(), 60000L);
  
  private static final DurationField cHoursField = new PreciseDurationField(
      DurationFieldType.hours(), 3600000L);
  
  private static final DurationField cHalfdaysField = new PreciseDurationField(
      DurationFieldType.halfdays(), 43200000L);
  
  private static final DurationField cDaysField = new PreciseDurationField(
      DurationFieldType.days(), 86400000L);
  
  private static final DurationField cWeeksField = new PreciseDurationField(
      DurationFieldType.weeks(), 604800000L);
  
  private static final DateTimeField cMillisOfSecondField = new PreciseDateTimeField(
      DateTimeFieldType.millisOfSecond(), cMillisField, cSecondsField);
  
  private static final DateTimeField cMillisOfDayField = new PreciseDateTimeField(
      DateTimeFieldType.millisOfDay(), cMillisField, cDaysField);
  
  private static final DateTimeField cSecondOfMinuteField = new PreciseDateTimeField(
      DateTimeFieldType.secondOfMinute(), cSecondsField, cMinutesField);
  
  private static final DateTimeField cSecondOfDayField = new PreciseDateTimeField(
      DateTimeFieldType.secondOfDay(), cSecondsField, cDaysField);
  
  private static final DateTimeField cMinuteOfHourField = new PreciseDateTimeField(
      DateTimeFieldType.minuteOfHour(), cMinutesField, cHoursField);
  
  private static final DateTimeField cMinuteOfDayField = new PreciseDateTimeField(
      DateTimeFieldType.minuteOfDay(), cMinutesField, cDaysField);
  
  private static final DateTimeField cHourOfDayField = new PreciseDateTimeField(
      DateTimeFieldType.hourOfDay(), cHoursField, cDaysField);
  
  private static final DateTimeField cHourOfHalfdayField = new PreciseDateTimeField(
      DateTimeFieldType.hourOfHalfday(), cHoursField, cHalfdaysField);
  
  private static final DateTimeField cClockhourOfDayField = new ZeroIsMaxDateTimeField(cHourOfDayField, 
      DateTimeFieldType.clockhourOfDay());
  
  private static final DateTimeField cClockhourOfHalfdayField = new ZeroIsMaxDateTimeField(cHourOfHalfdayField, 
      DateTimeFieldType.clockhourOfHalfday());
  
  private static final DateTimeField cHalfdayOfDayField = new HalfdayField();
  
  private static final int CACHE_SIZE = 1024;
  
  private static final int CACHE_MASK = 1023;
  
  private final YearInfo[] iYearInfoCache = new YearInfo[1024];
  
  private final int iMinDaysInFirstWeek;
  
  BasicChronology(Chronology paramChronology, Object paramObject, int paramInt) {
    super(paramChronology, paramObject);
    if (paramInt < 1 || paramInt > 7)
      throw new IllegalArgumentException("Invalid min days in first week: " + paramInt); 
    this.iMinDaysInFirstWeek = paramInt;
  }
  
  public DateTimeZone getZone() {
    Chronology chronology;
    if ((chronology = getBase()) != null)
      return chronology.getZone(); 
    return DateTimeZone.UTC;
  }
  
  public long getDateTimeMillis(int paramInt1, int paramInt2, int paramInt3, int paramInt4) throws IllegalArgumentException {
    Chronology chronology;
    if ((chronology = getBase()) != null)
      return chronology.getDateTimeMillis(paramInt1, paramInt2, paramInt3, paramInt4); 
    FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfDay(), paramInt4, 0, 86399999);
    return getDateTimeMillis0(paramInt1, paramInt2, paramInt3, paramInt4);
  }
  
  public long getDateTimeMillis(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6, int paramInt7) throws IllegalArgumentException {
    Chronology chronology;
    if ((chronology = getBase()) != null)
      return chronology.getDateTimeMillis(paramInt1, paramInt2, paramInt3, paramInt4, paramInt5, paramInt6, paramInt7); 
    FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), paramInt4, 0, 23);
    FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), paramInt5, 0, 59);
    FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), paramInt6, 0, 59);
    FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), paramInt7, 0, 999);
    long l = (paramInt4 * 3600000 + paramInt5 * 60000 + paramInt6 * 1000 + paramInt7);
    return getDateTimeMillis0(paramInt1, paramInt2, paramInt3, (int)l);
  }
  
  private long getDateTimeMillis0(int paramInt1, int paramInt2, int paramInt3, int paramInt4) throws IllegalArgumentException {
    long l1 = getDateMidnightMillis(paramInt1, paramInt2, paramInt3);
    if (l1 == Float.MIN_VALUE) {
      l1 = getDateMidnightMillis(paramInt1, paramInt2, paramInt3 + 1);
      paramInt4 -= 86400000;
    } 
    long l2 = l1 + paramInt4;
    if (l2 < 0L && l1 > 0L)
      return Float.MAX_VALUE; 
    if (l2 > 0L && l1 < 0L)
      return Float.MIN_VALUE; 
    return l2;
  }
  
  public int getMinimumDaysInFirstWeek() { return this.iMinDaysInFirstWeek; }
  
  public boolean equals(Object paramObject) {
    if (this == paramObject)
      return true; 
    if (paramObject != null && getClass() == paramObject.getClass()) {
      BasicChronology basicChronology = (BasicChronology)paramObject;
      return (getMinimumDaysInFirstWeek() == basicChronology.getMinimumDaysInFirstWeek() && 
        getZone().equals(basicChronology.getZone()));
    } 
    return false;
  }
  
  public int hashCode() { return getClass().getName().hashCode() * 11 + getZone().hashCode() + getMinimumDaysInFirstWeek(); }
  
  public String toString() {
    StringBuilder stringBuilder = new StringBuilder(60);
    String str = getClass().getName();
    int i = str.lastIndexOf('.');
    if (i >= 0)
      str = str.substring(i + 1); 
    stringBuilder.append(str);
    stringBuilder.append('[');
    DateTimeZone dateTimeZone = getZone();
    if (dateTimeZone != null)
      stringBuilder.append(dateTimeZone.getID()); 
    if (getMinimumDaysInFirstWeek() != 4) {
      stringBuilder.append(",mdfw=");
      stringBuilder.append(getMinimumDaysInFirstWeek());
    } 
    stringBuilder.append(']');
    return stringBuilder.toString();
  }
  
  protected void assemble(AssembledChronology.Fields paramFields) {
    paramFields.millis = cMillisField;
    paramFields.seconds = cSecondsField;
    paramFields.minutes = cMinutesField;
    paramFields.hours = cHoursField;
    paramFields.halfdays = cHalfdaysField;
    paramFields.days = cDaysField;
    paramFields.weeks = cWeeksField;
    paramFields.millisOfSecond = cMillisOfSecondField;
    paramFields.millisOfDay = cMillisOfDayField;
    paramFields.secondOfMinute = cSecondOfMinuteField;
    paramFields.secondOfDay = cSecondOfDayField;
    paramFields.minuteOfHour = cMinuteOfHourField;
    paramFields.minuteOfDay = cMinuteOfDayField;
    paramFields.hourOfDay = cHourOfDayField;
    paramFields.hourOfHalfday = cHourOfHalfdayField;
    paramFields.clockhourOfDay = cClockhourOfDayField;
    paramFields.clockhourOfHalfday = cClockhourOfHalfdayField;
    paramFields.halfdayOfDay = cHalfdayOfDayField;
    paramFields.year = new BasicYearDateTimeField(this);
    paramFields.yearOfEra = new GJYearOfEraDateTimeField(paramFields.year, this);
    OffsetDateTimeField offsetDateTimeField = new OffsetDateTimeField(paramFields.yearOfEra, 99);
    paramFields
      .centuryOfEra = new DividedDateTimeField(offsetDateTimeField, DateTimeFieldType.centuryOfEra(), 100);
    paramFields.centuries = paramFields.centuryOfEra.getDurationField();
    RemainderDateTimeField remainderDateTimeField = new RemainderDateTimeField((DividedDateTimeField)paramFields.centuryOfEra);
    paramFields
      .yearOfCentury = new OffsetDateTimeField(remainderDateTimeField, DateTimeFieldType.yearOfCentury(), 1);
    paramFields.era = new GJEraDateTimeField(this);
    paramFields.dayOfWeek = new GJDayOfWeekDateTimeField(this, paramFields.days);
    paramFields.dayOfMonth = new BasicDayOfMonthDateTimeField(this, paramFields.days);
    paramFields.dayOfYear = new BasicDayOfYearDateTimeField(this, paramFields.days);
    paramFields.monthOfYear = new GJMonthOfYearDateTimeField(this);
    paramFields.weekyear = new BasicWeekyearDateTimeField(this);
    paramFields.weekOfWeekyear = new BasicWeekOfWeekyearDateTimeField(this, paramFields.weeks);
    remainderDateTimeField = new RemainderDateTimeField(paramFields.weekyear, paramFields.centuries, DateTimeFieldType.weekyearOfCentury(), 100);
    paramFields
      .weekyearOfCentury = new OffsetDateTimeField(remainderDateTimeField, DateTimeFieldType.weekyearOfCentury(), 1);
    paramFields.years = paramFields.year.getDurationField();
    paramFields.months = paramFields.monthOfYear.getDurationField();
    paramFields.weekyears = paramFields.weekyear.getDurationField();
  }
  
  int getDaysInYearMax() { return 366; }
  
  int getDaysInYear(int paramInt) { return isLeapYear(paramInt) ? 366 : 365; }
  
  int getWeeksInYear(int paramInt) {
    long l1 = getFirstWeekOfYearMillis(paramInt);
    long l2 = getFirstWeekOfYearMillis(paramInt + 1);
    return (int)((l2 - l1) / 604800000L);
  }
  
  long getFirstWeekOfYearMillis(int paramInt) {
    long l = getYearMillis(paramInt);
    int i = getDayOfWeek(l);
    if (i > 8 - this.iMinDaysInFirstWeek)
      return l + (8 - i) * 86400000L; 
    return l - (i - 1) * 86400000L;
  }
  
  long getYearMillis(int paramInt) { return (getYearInfo(paramInt)).iFirstDayMillis; }
  
  long getYearMonthMillis(int paramInt1, int paramInt2) {
    null = getYearMillis(paramInt1);
    return getTotalMillisByYearMonth(paramInt1, paramInt2);
  }
  
  long getYearMonthDayMillis(int paramInt1, int paramInt2, int paramInt3) {
    long l = getYearMillis(paramInt1);
    l += getTotalMillisByYearMonth(paramInt1, paramInt2);
    return l + (paramInt3 - 1) * 86400000L;
  }
  
  int getYear(long paramLong) {
    long l1 = getAverageMillisPerYearDividedByTwo();
    long l2 = (paramLong >> true) + getApproxMillisAtEpochDividedByTwo();
    if (l2 < 0L)
      l2 = l2 - l1 + 1L; 
    int i = (int)(l2 / l1);
    long l3 = getYearMillis(i);
    long l4 = paramLong - l3;
    if (l4 < 0L) {
      i--;
    } else if (l4 >= 31536000000L) {
      long l;
      if (isLeapYear(i)) {
        l = 31622400000L;
      } else {
        l = 31536000000L;
      } 
      l3 += l;
      if (l3 <= paramLong)
        i++; 
    } 
    return i;
  }
  
  int getMonthOfYear(long paramLong) { return getMonthOfYear(paramLong, getYear(paramLong)); }
  
  int getDayOfMonth(long paramLong) {
    int i = getYear(paramLong);
    int j = getMonthOfYear(paramLong, i);
    return getDayOfMonth(paramLong, i, j);
  }
  
  int getDayOfMonth(long paramLong, int paramInt) {
    int i = getMonthOfYear(paramLong, paramInt);
    return getDayOfMonth(paramLong, paramInt, i);
  }
  
  int getDayOfMonth(long paramLong, int paramInt1, int paramInt2) {
    long l = getYearMillis(paramInt1);
    l += getTotalMillisByYearMonth(paramInt1, paramInt2);
    return (int)((paramLong - l) / 86400000L) + 1;
  }
  
  int getDayOfYear(long paramLong) { return getDayOfYear(paramLong, getYear(paramLong)); }
  
  int getDayOfYear(long paramLong, int paramInt) {
    long l = getYearMillis(paramInt);
    return (int)((paramLong - l) / 86400000L) + 1;
  }
  
  int getWeekyear(long paramLong) {
    int i = getYear(paramLong);
    int j = getWeekOfWeekyear(paramLong, i);
    if (j == 1)
      return getYear(paramLong + 604800000L); 
    if (j > 51)
      return getYear(paramLong - 1209600000L); 
    return i;
  }
  
  int getWeekOfWeekyear(long paramLong) { return getWeekOfWeekyear(paramLong, getYear(paramLong)); }
  
  int getWeekOfWeekyear(long paramLong, int paramInt) {
    long l1 = getFirstWeekOfYearMillis(paramInt);
    if (paramLong < l1)
      return getWeeksInYear(paramInt - 1); 
    long l2 = getFirstWeekOfYearMillis(paramInt + 1);
    if (paramLong >= l2)
      return 1; 
    return (int)((paramLong - l1) / 604800000L) + 1;
  }
  
  int getDayOfWeek(long paramLong) {
    long l;
    if (paramLong >= 0L) {
      l = paramLong / 86400000L;
    } else {
      l = (paramLong - 86399999L) / 86400000L;
      if (l < -3L)
        return 7 + (int)((l + 4L) % 7L); 
    } 
    return 1 + (int)((l + 3L) % 7L);
  }
  
  int getMillisOfDay(long paramLong) {
    if (paramLong >= 0L)
      return (int)(paramLong % 86400000L); 
    return 86399999 + (int)((paramLong + 1L) % 86400000L);
  }
  
  int getDaysInMonthMax() { return 31; }
  
  int getDaysInMonthMax(long paramLong) {
    int i = getYear(paramLong);
    int j = getMonthOfYear(paramLong, i);
    return getDaysInYearMonth(i, j);
  }
  
  int getDaysInMonthMaxForSet(long paramLong, int paramInt) { return getDaysInMonthMax(paramLong); }
  
  long getDateMidnightMillis(int paramInt1, int paramInt2, int paramInt3) {
    FieldUtils.verifyValueBounds(DateTimeFieldType.year(), paramInt1, getMinYear() - 1, getMaxYear() + 1);
    FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), paramInt2, 1, getMaxMonth(paramInt1));
    FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), paramInt3, 1, getDaysInYearMonth(paramInt1, paramInt2));
    long l = getYearMonthDayMillis(paramInt1, paramInt2, paramInt3);
    if (l < 0L && paramInt1 == getMaxYear() + 1)
      return Float.MAX_VALUE; 
    if (l > 0L && paramInt1 == getMinYear() - 1)
      return Float.MIN_VALUE; 
    return l;
  }
  
  boolean isLeapDay(long paramLong) { return false; }
  
  int getMaxMonth(int paramInt) { return getMaxMonth(); }
  
  int getMaxMonth() { return 12; }
  
  private YearInfo getYearInfo(int paramInt) {
    YearInfo yearInfo = this.iYearInfoCache[paramInt & 0x3FF];
    if (yearInfo == null || yearInfo.iYear != paramInt) {
      yearInfo = new YearInfo(paramInt, calculateFirstDayOfYearMillis(paramInt));
      this.iYearInfoCache[paramInt & 0x3FF] = yearInfo;
    } 
    return yearInfo;
  }
  
  abstract int getMonthOfYear(long paramLong, int paramInt);
  
  abstract long getYearDifference(long paramLong1, long paramLong2);
  
  abstract boolean isLeapYear(int paramInt);
  
  abstract int getDaysInYearMonth(int paramInt1, int paramInt2);
  
  abstract int getDaysInMonthMax(int paramInt);
  
  abstract long getTotalMillisByYearMonth(int paramInt1, int paramInt2);
  
  abstract long calculateFirstDayOfYearMillis(int paramInt);
  
  abstract int getMinYear();
  
  abstract int getMaxYear();
  
  abstract long getAverageMillisPerYear();
  
  abstract long getAverageMillisPerYearDividedByTwo();
  
  abstract long getAverageMillisPerMonth();
  
  abstract long getApproxMillisAtEpochDividedByTwo();
  
  abstract long setYear(long paramLong, int paramInt);
}
