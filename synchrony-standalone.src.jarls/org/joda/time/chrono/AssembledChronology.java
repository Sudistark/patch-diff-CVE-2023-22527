package org.joda.time.chrono;

import java.io.IOException;
import java.io.ObjectInputStream;
import org.joda.time.Chronology;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;

public abstract class AssembledChronology extends BaseChronology {
  private static final long serialVersionUID = -6728465968995518215L;
  
  private final Chronology iBase;
  
  private final Object iParam;
  
  private DurationField iMillis;
  
  private DurationField iSeconds;
  
  private DurationField iMinutes;
  
  private DurationField iHours;
  
  private DurationField iHalfdays;
  
  private DurationField iDays;
  
  private DurationField iWeeks;
  
  private DurationField iWeekyears;
  
  private DurationField iMonths;
  
  private DurationField iYears;
  
  private DurationField iCenturies;
  
  private DurationField iEras;
  
  private DateTimeField iMillisOfSecond;
  
  private DateTimeField iMillisOfDay;
  
  private DateTimeField iSecondOfMinute;
  
  private DateTimeField iSecondOfDay;
  
  private DateTimeField iMinuteOfHour;
  
  private DateTimeField iMinuteOfDay;
  
  private DateTimeField iHourOfDay;
  
  private DateTimeField iClockhourOfDay;
  
  private DateTimeField iHourOfHalfday;
  
  private DateTimeField iClockhourOfHalfday;
  
  private DateTimeField iHalfdayOfDay;
  
  private DateTimeField iDayOfWeek;
  
  private DateTimeField iDayOfMonth;
  
  private DateTimeField iDayOfYear;
  
  private DateTimeField iWeekOfWeekyear;
  
  private DateTimeField iWeekyear;
  
  private DateTimeField iWeekyearOfCentury;
  
  private DateTimeField iMonthOfYear;
  
  private DateTimeField iYear;
  
  private DateTimeField iYearOfEra;
  
  private DateTimeField iYearOfCentury;
  
  private DateTimeField iCenturyOfEra;
  
  private DateTimeField iEra;
  
  private int iBaseFlags;
  
  protected AssembledChronology(Chronology paramChronology, Object paramObject) {
    this.iBase = paramChronology;
    this.iParam = paramObject;
    setFields();
  }
  
  public DateTimeZone getZone() {
    Chronology chronology;
    if ((chronology = this.iBase) != null)
      return chronology.getZone(); 
    return null;
  }
  
  public long getDateTimeMillis(int paramInt1, int paramInt2, int paramInt3, int paramInt4) throws IllegalArgumentException {
    Chronology chronology;
    if ((chronology = this.iBase) != null && (this.iBaseFlags & 0x6) == 6)
      return chronology.getDateTimeMillis(paramInt1, paramInt2, paramInt3, paramInt4); 
    return super.getDateTimeMillis(paramInt1, paramInt2, paramInt3, paramInt4);
  }
  
  public long getDateTimeMillis(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6, int paramInt7) throws IllegalArgumentException {
    Chronology chronology;
    if ((chronology = this.iBase) != null && (this.iBaseFlags & 0x5) == 5)
      return chronology.getDateTimeMillis(paramInt1, paramInt2, paramInt3, paramInt4, paramInt5, paramInt6, paramInt7); 
    return super.getDateTimeMillis(paramInt1, paramInt2, paramInt3, paramInt4, paramInt5, paramInt6, paramInt7);
  }
  
  public long getDateTimeMillis(long paramLong, int paramInt1, int paramInt2, int paramInt3, int paramInt4) throws IllegalArgumentException {
    Chronology chronology;
    if ((chronology = this.iBase) != null && (this.iBaseFlags & true) == 1)
      return chronology
        .getDateTimeMillis(paramLong, paramInt1, paramInt2, paramInt3, paramInt4); 
    return super
      .getDateTimeMillis(paramLong, paramInt1, paramInt2, paramInt3, paramInt4);
  }
  
  public final DurationField millis() { return this.iMillis; }
  
  public final DateTimeField millisOfSecond() { return this.iMillisOfSecond; }
  
  public final DateTimeField millisOfDay() { return this.iMillisOfDay; }
  
  public final DurationField seconds() { return this.iSeconds; }
  
  public final DateTimeField secondOfMinute() { return this.iSecondOfMinute; }
  
  public final DateTimeField secondOfDay() { return this.iSecondOfDay; }
  
  public final DurationField minutes() { return this.iMinutes; }
  
  public final DateTimeField minuteOfHour() { return this.iMinuteOfHour; }
  
  public final DateTimeField minuteOfDay() { return this.iMinuteOfDay; }
  
  public final DurationField hours() { return this.iHours; }
  
  public final DateTimeField hourOfDay() { return this.iHourOfDay; }
  
  public final DateTimeField clockhourOfDay() { return this.iClockhourOfDay; }
  
  public final DurationField halfdays() { return this.iHalfdays; }
  
  public final DateTimeField hourOfHalfday() { return this.iHourOfHalfday; }
  
  public final DateTimeField clockhourOfHalfday() { return this.iClockhourOfHalfday; }
  
  public final DateTimeField halfdayOfDay() { return this.iHalfdayOfDay; }
  
  public final DurationField days() { return this.iDays; }
  
  public final DateTimeField dayOfWeek() { return this.iDayOfWeek; }
  
  public final DateTimeField dayOfMonth() { return this.iDayOfMonth; }
  
  public final DateTimeField dayOfYear() { return this.iDayOfYear; }
  
  public final DurationField weeks() { return this.iWeeks; }
  
  public final DateTimeField weekOfWeekyear() { return this.iWeekOfWeekyear; }
  
  public final DurationField weekyears() { return this.iWeekyears; }
  
  public final DateTimeField weekyear() { return this.iWeekyear; }
  
  public final DateTimeField weekyearOfCentury() { return this.iWeekyearOfCentury; }
  
  public final DurationField months() { return this.iMonths; }
  
  public final DateTimeField monthOfYear() { return this.iMonthOfYear; }
  
  public final DurationField years() { return this.iYears; }
  
  public final DateTimeField year() { return this.iYear; }
  
  public final DateTimeField yearOfEra() { return this.iYearOfEra; }
  
  public final DateTimeField yearOfCentury() { return this.iYearOfCentury; }
  
  public final DurationField centuries() { return this.iCenturies; }
  
  public final DateTimeField centuryOfEra() { return this.iCenturyOfEra; }
  
  public final DurationField eras() { return this.iEras; }
  
  public final DateTimeField era() { return this.iEra; }
  
  protected abstract void assemble(Fields paramFields);
  
  protected final Chronology getBase() { return this.iBase; }
  
  protected final Object getParam() { return this.iParam; }
  
  private void setFields() {
    byte b;
    Fields fields = new Fields();
    if (this.iBase != null)
      fields.copyFieldsFrom(this.iBase); 
    assemble(fields);
    DurationField durationField;
    this.iMillis = ((durationField = fields.millis) != null) ? durationField : super.millis();
    this.iSeconds = ((durationField = fields.seconds) != null) ? durationField : super.seconds();
    this.iMinutes = ((durationField = fields.minutes) != null) ? durationField : super.minutes();
    this.iHours = ((durationField = fields.hours) != null) ? durationField : super.hours();
    this.iHalfdays = ((durationField = fields.halfdays) != null) ? durationField : super.halfdays();
    this.iDays = ((durationField = fields.days) != null) ? durationField : super.days();
    this.iWeeks = ((durationField = fields.weeks) != null) ? durationField : super.weeks();
    this.iWeekyears = ((durationField = fields.weekyears) != null) ? durationField : super.weekyears();
    this.iMonths = ((durationField = fields.months) != null) ? durationField : super.months();
    this.iYears = ((durationField = fields.years) != null) ? durationField : super.years();
    this.iCenturies = ((durationField = fields.centuries) != null) ? durationField : super.centuries();
    this.iEras = ((durationField = fields.eras) != null) ? durationField : super.eras();
    DateTimeField dateTimeField;
    this.iMillisOfSecond = ((dateTimeField = fields.millisOfSecond) != null) ? dateTimeField : super.millisOfSecond();
    this.iMillisOfDay = ((dateTimeField = fields.millisOfDay) != null) ? dateTimeField : super.millisOfDay();
    this.iSecondOfMinute = ((dateTimeField = fields.secondOfMinute) != null) ? dateTimeField : super.secondOfMinute();
    this.iSecondOfDay = ((dateTimeField = fields.secondOfDay) != null) ? dateTimeField : super.secondOfDay();
    this.iMinuteOfHour = ((dateTimeField = fields.minuteOfHour) != null) ? dateTimeField : super.minuteOfHour();
    this.iMinuteOfDay = ((dateTimeField = fields.minuteOfDay) != null) ? dateTimeField : super.minuteOfDay();
    this.iHourOfDay = ((dateTimeField = fields.hourOfDay) != null) ? dateTimeField : super.hourOfDay();
    this.iClockhourOfDay = ((dateTimeField = fields.clockhourOfDay) != null) ? dateTimeField : super.clockhourOfDay();
    this.iHourOfHalfday = ((dateTimeField = fields.hourOfHalfday) != null) ? dateTimeField : super.hourOfHalfday();
    this.iClockhourOfHalfday = ((dateTimeField = fields.clockhourOfHalfday) != null) ? dateTimeField : super.clockhourOfHalfday();
    this.iHalfdayOfDay = ((dateTimeField = fields.halfdayOfDay) != null) ? dateTimeField : super.halfdayOfDay();
    this.iDayOfWeek = ((dateTimeField = fields.dayOfWeek) != null) ? dateTimeField : super.dayOfWeek();
    this.iDayOfMonth = ((dateTimeField = fields.dayOfMonth) != null) ? dateTimeField : super.dayOfMonth();
    this.iDayOfYear = ((dateTimeField = fields.dayOfYear) != null) ? dateTimeField : super.dayOfYear();
    this.iWeekOfWeekyear = ((dateTimeField = fields.weekOfWeekyear) != null) ? dateTimeField : super.weekOfWeekyear();
    this.iWeekyear = ((dateTimeField = fields.weekyear) != null) ? dateTimeField : super.weekyear();
    this.iWeekyearOfCentury = ((dateTimeField = fields.weekyearOfCentury) != null) ? dateTimeField : super.weekyearOfCentury();
    this.iMonthOfYear = ((dateTimeField = fields.monthOfYear) != null) ? dateTimeField : super.monthOfYear();
    this.iYear = ((dateTimeField = fields.year) != null) ? dateTimeField : super.year();
    this.iYearOfEra = ((dateTimeField = fields.yearOfEra) != null) ? dateTimeField : super.yearOfEra();
    this.iYearOfCentury = ((dateTimeField = fields.yearOfCentury) != null) ? dateTimeField : super.yearOfCentury();
    this.iCenturyOfEra = ((dateTimeField = fields.centuryOfEra) != null) ? dateTimeField : super.centuryOfEra();
    this.iEra = ((dateTimeField = fields.era) != null) ? dateTimeField : super.era();
    if (this.iBase == null) {
      b = 0;
    } else {
      b = ((this.iHourOfDay == this.iBase.hourOfDay() && this.iMinuteOfHour == this.iBase.minuteOfHour() && this.iSecondOfMinute == this.iBase.secondOfMinute() && this.iMillisOfSecond == this.iBase.millisOfSecond()) ? 1 : 0) | ((this.iMillisOfDay == this.iBase.millisOfDay()) ? 2 : 0) | ((this.iYear == this.iBase.year() && this.iMonthOfYear == this.iBase.monthOfYear() && this.iDayOfMonth == this.iBase.dayOfMonth()) ? 4 : 0);
    } 
    this.iBaseFlags = b;
  }
  
  private void readObject(ObjectInputStream paramObjectInputStream) throws IOException, ClassNotFoundException {
    paramObjectInputStream.defaultReadObject();
    setFields();
  }
}
