package org.joda.time.chrono;

import java.util.concurrent.ConcurrentHashMap;
import org.joda.time.Chronology;
import org.joda.time.DateTimeZone;

public final class GregorianChronology extends BasicGJChronology {
  private static final long serialVersionUID = -861407383323710522L;
  
  private static final long MILLIS_PER_YEAR = 31556952000L;
  
  private static final long MILLIS_PER_MONTH = 2629746000L;
  
  private static final int DAYS_0000_TO_1970 = 719527;
  
  private static final int MIN_YEAR = -292275054;
  
  private static final int MAX_YEAR = 292278993;
  
  private static final GregorianChronology INSTANCE_UTC;
  
  private static final ConcurrentHashMap<DateTimeZone, GregorianChronology[]> cCache = new ConcurrentHashMap();
  
  static  {
    INSTANCE_UTC = getInstance(DateTimeZone.UTC);
  }
  
  public static GregorianChronology getInstanceUTC() { return INSTANCE_UTC; }
  
  public static GregorianChronology getInstance() { return getInstance(DateTimeZone.getDefault(), 4); }
  
  public static GregorianChronology getInstance(DateTimeZone paramDateTimeZone) { return getInstance(paramDateTimeZone, 4); }
  
  public static GregorianChronology getInstance(DateTimeZone paramDateTimeZone, int paramInt) {
    GregorianChronology gregorianChronology;
    if (paramDateTimeZone == null)
      paramDateTimeZone = DateTimeZone.getDefault(); 
    GregorianChronology[] arrayOfGregorianChronology = (GregorianChronology[])cCache.get(paramDateTimeZone);
    if (arrayOfGregorianChronology == null) {
      arrayOfGregorianChronology = new GregorianChronology[7];
      GregorianChronology[] arrayOfGregorianChronology1 = (GregorianChronology[])cCache.putIfAbsent(paramDateTimeZone, arrayOfGregorianChronology);
      if (arrayOfGregorianChronology1 != null)
        arrayOfGregorianChronology = arrayOfGregorianChronology1; 
    } 
    try {
      gregorianChronology = arrayOfGregorianChronology[paramInt - 1];
    } catch (ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException) {
      throw new IllegalArgumentException("Invalid min days in first week: " + paramInt);
    } 
    if (gregorianChronology == null)
      synchronized (arrayOfGregorianChronology) {
        gregorianChronology = arrayOfGregorianChronology[paramInt - 1];
        if (gregorianChronology == null) {
          if (paramDateTimeZone == DateTimeZone.UTC) {
            gregorianChronology = new GregorianChronology(null, null, paramInt);
          } else {
            gregorianChronology = getInstance(DateTimeZone.UTC, paramInt);
            gregorianChronology = new GregorianChronology(ZonedChronology.getInstance(gregorianChronology, paramDateTimeZone), null, paramInt);
          } 
          arrayOfGregorianChronology[paramInt - 1] = gregorianChronology;
        } 
      }  
    return gregorianChronology;
  }
  
  private GregorianChronology(Chronology paramChronology, Object paramObject, int paramInt) { super(paramChronology, paramObject, paramInt); }
  
  private Object readResolve() {
    Chronology chronology = getBase();
    int i = getMinimumDaysInFirstWeek();
    i = (i == 0) ? 4 : i;
    return (chronology == null) ? 
      getInstance(DateTimeZone.UTC, i) : 
      getInstance(chronology.getZone(), i);
  }
  
  public Chronology withUTC() { return INSTANCE_UTC; }
  
  public Chronology withZone(DateTimeZone paramDateTimeZone) {
    if (paramDateTimeZone == null)
      paramDateTimeZone = DateTimeZone.getDefault(); 
    if (paramDateTimeZone == getZone())
      return this; 
    return getInstance(paramDateTimeZone);
  }
  
  protected void assemble(AssembledChronology.Fields paramFields) {
    if (getBase() == null)
      super.assemble(paramFields); 
  }
  
  boolean isLeapYear(int paramInt) { return ((paramInt & 0x3) == 0 && (paramInt % 100 != 0 || paramInt % 400 == 0)); }
  
  long calculateFirstDayOfYearMillis(int paramInt) {
    int i = paramInt / 100;
    if (paramInt < 0) {
      i = (paramInt + 3 >> 2) - i + (i + 3 >> 2) - 1;
    } else {
      i = (paramInt >> 2) - i + (i >> 2);
      if (isLeapYear(paramInt))
        i--; 
    } 
    return (paramInt * 365L + (i - 719527)) * 86400000L;
  }
  
  int getMinYear() { return -292275054; }
  
  int getMaxYear() { return 292278993; }
  
  long getAverageMillisPerYear() { return 31556952000L; }
  
  long getAverageMillisPerYearDividedByTwo() { return 15778476000L; }
  
  long getAverageMillisPerMonth() { return 2629746000L; }
  
  long getApproxMillisAtEpochDividedByTwo() { return 31083597720000L; }
}
