package org.joda.time.chrono;

import org.joda.time.DateTimeFieldType;
import org.joda.time.DurationField;
import org.joda.time.ReadablePartial;
import org.joda.time.field.PreciseDurationDateTimeField;

final class BasicWeekOfWeekyearDateTimeField extends PreciseDurationDateTimeField {
  private static final long serialVersionUID = -1587436826395135328L;
  
  private final BasicChronology iChronology;
  
  BasicWeekOfWeekyearDateTimeField(BasicChronology paramBasicChronology, DurationField paramDurationField) {
    super(DateTimeFieldType.weekOfWeekyear(), paramDurationField);
    this.iChronology = paramBasicChronology;
  }
  
  public int get(long paramLong) { return this.iChronology.getWeekOfWeekyear(paramLong); }
  
  public DurationField getRangeDurationField() { return this.iChronology.weekyears(); }
  
  public long roundFloor(long paramLong) { return super.roundFloor(paramLong + 259200000L) - 259200000L; }
  
  public long roundCeiling(long paramLong) { return super.roundCeiling(paramLong + 259200000L) - 259200000L; }
  
  public long remainder(long paramLong) { return super.remainder(paramLong + 259200000L); }
  
  public int getMinimumValue() { return 1; }
  
  public int getMaximumValue() { return 53; }
  
  public int getMaximumValue(long paramLong) {
    int i = this.iChronology.getWeekyear(paramLong);
    return this.iChronology.getWeeksInYear(i);
  }
  
  public int getMaximumValue(ReadablePartial paramReadablePartial) {
    if (paramReadablePartial.isSupported(DateTimeFieldType.weekyear())) {
      int i = paramReadablePartial.get(DateTimeFieldType.weekyear());
      return this.iChronology.getWeeksInYear(i);
    } 
    return 53;
  }
  
  public int getMaximumValue(ReadablePartial paramReadablePartial, int[] paramArrayOfInt) {
    int i = paramReadablePartial.size();
    for (byte b = 0; b < i; b++) {
      if (paramReadablePartial.getFieldType(b) == DateTimeFieldType.weekyear()) {
        int j = paramArrayOfInt[b];
        return this.iChronology.getWeeksInYear(j);
      } 
    } 
    return 53;
  }
  
  protected int getMaximumValueForSet(long paramLong, int paramInt) { return (paramInt > 52) ? getMaximumValue(paramLong) : 52; }
  
  private Object readResolve() { return this.iChronology.weekOfWeekyear(); }
}
