package org.joda.time;

public class IllegalFieldValueException extends IllegalArgumentException {
  private static final long serialVersionUID = 6305711765985447737L;
  
  private final DateTimeFieldType iDateTimeFieldType;
  
  private final DurationFieldType iDurationFieldType;
  
  private final String iFieldName;
  
  private final Number iNumberValue;
  
  private final String iStringValue;
  
  private final Number iLowerBound;
  
  private final Number iUpperBound;
  
  private String iMessage;
  
  private static String createMessage(String paramString1, Number paramNumber1, Number paramNumber2, Number paramNumber3, String paramString2) {
    StringBuilder stringBuilder = (new StringBuilder()).append("Value ").append(paramNumber1).append(" for ").append(paramString1).append(' ');
    if (paramNumber2 == null) {
      if (paramNumber3 == null) {
        stringBuilder.append("is not supported");
      } else {
        stringBuilder.append("must not be larger than ").append(paramNumber3);
      } 
    } else if (paramNumber3 == null) {
      stringBuilder.append("must not be smaller than ").append(paramNumber2);
    } else {
      stringBuilder.append("must be in the range [")
        .append(paramNumber2)
        .append(',')
        .append(paramNumber3)
        .append(']');
    } 
    if (paramString2 != null)
      stringBuilder.append(": ").append(paramString2); 
    return stringBuilder.toString();
  }
  
  private static String createMessage(String paramString1, String paramString2) {
    StringBuffer stringBuffer = (new StringBuffer()).append("Value ");
    if (paramString2 == null) {
      stringBuffer.append("null");
    } else {
      stringBuffer.append('"');
      stringBuffer.append(paramString2);
      stringBuffer.append('"');
    } 
    stringBuffer.append(" for ").append(paramString1).append(' ').append("is not supported");
    return stringBuffer.toString();
  }
  
  public IllegalFieldValueException(DateTimeFieldType paramDateTimeFieldType, Number paramNumber1, Number paramNumber2, Number paramNumber3) {
    super(createMessage(paramDateTimeFieldType.getName(), paramNumber1, paramNumber2, paramNumber3, null));
    this.iDateTimeFieldType = paramDateTimeFieldType;
    this.iDurationFieldType = null;
    this.iFieldName = paramDateTimeFieldType.getName();
    this.iNumberValue = paramNumber1;
    this.iStringValue = null;
    this.iLowerBound = paramNumber2;
    this.iUpperBound = paramNumber3;
    this.iMessage = super.getMessage();
  }
  
  public IllegalFieldValueException(DateTimeFieldType paramDateTimeFieldType, Number paramNumber, String paramString) {
    super(createMessage(paramDateTimeFieldType.getName(), paramNumber, null, null, paramString));
    this.iDateTimeFieldType = paramDateTimeFieldType;
    this.iDurationFieldType = null;
    this.iFieldName = paramDateTimeFieldType.getName();
    this.iNumberValue = paramNumber;
    this.iStringValue = null;
    this.iLowerBound = null;
    this.iUpperBound = null;
    this.iMessage = super.getMessage();
  }
  
  public IllegalFieldValueException(DurationFieldType paramDurationFieldType, Number paramNumber1, Number paramNumber2, Number paramNumber3) {
    super(createMessage(paramDurationFieldType.getName(), paramNumber1, paramNumber2, paramNumber3, null));
    this.iDateTimeFieldType = null;
    this.iDurationFieldType = paramDurationFieldType;
    this.iFieldName = paramDurationFieldType.getName();
    this.iNumberValue = paramNumber1;
    this.iStringValue = null;
    this.iLowerBound = paramNumber2;
    this.iUpperBound = paramNumber3;
    this.iMessage = super.getMessage();
  }
  
  public IllegalFieldValueException(String paramString, Number paramNumber1, Number paramNumber2, Number paramNumber3) {
    super(createMessage(paramString, paramNumber1, paramNumber2, paramNumber3, null));
    this.iDateTimeFieldType = null;
    this.iDurationFieldType = null;
    this.iFieldName = paramString;
    this.iNumberValue = paramNumber1;
    this.iStringValue = null;
    this.iLowerBound = paramNumber2;
    this.iUpperBound = paramNumber3;
    this.iMessage = super.getMessage();
  }
  
  public IllegalFieldValueException(DateTimeFieldType paramDateTimeFieldType, String paramString) {
    super(createMessage(paramDateTimeFieldType.getName(), paramString));
    this.iDateTimeFieldType = paramDateTimeFieldType;
    this.iDurationFieldType = null;
    this.iFieldName = paramDateTimeFieldType.getName();
    this.iStringValue = paramString;
    this.iNumberValue = null;
    this.iLowerBound = null;
    this.iUpperBound = null;
    this.iMessage = super.getMessage();
  }
  
  public IllegalFieldValueException(DurationFieldType paramDurationFieldType, String paramString) {
    super(createMessage(paramDurationFieldType.getName(), paramString));
    this.iDateTimeFieldType = null;
    this.iDurationFieldType = paramDurationFieldType;
    this.iFieldName = paramDurationFieldType.getName();
    this.iStringValue = paramString;
    this.iNumberValue = null;
    this.iLowerBound = null;
    this.iUpperBound = null;
    this.iMessage = super.getMessage();
  }
  
  public IllegalFieldValueException(String paramString1, String paramString2) {
    super(createMessage(paramString1, paramString2));
    this.iDateTimeFieldType = null;
    this.iDurationFieldType = null;
    this.iFieldName = paramString1;
    this.iStringValue = paramString2;
    this.iNumberValue = null;
    this.iLowerBound = null;
    this.iUpperBound = null;
    this.iMessage = super.getMessage();
  }
  
  public DateTimeFieldType getDateTimeFieldType() { return this.iDateTimeFieldType; }
  
  public DurationFieldType getDurationFieldType() { return this.iDurationFieldType; }
  
  public String getFieldName() { return this.iFieldName; }
  
  public Number getIllegalNumberValue() { return this.iNumberValue; }
  
  public String getIllegalStringValue() { return this.iStringValue; }
  
  public String getIllegalValueAsString() {
    String str = this.iStringValue;
    if (str == null)
      str = String.valueOf(this.iNumberValue); 
    return str;
  }
  
  public Number getLowerBound() { return this.iLowerBound; }
  
  public Number getUpperBound() { return this.iUpperBound; }
  
  public String getMessage() { return this.iMessage; }
  
  public void prependMessage(String paramString) {
    if (this.iMessage == null) {
      this.iMessage = paramString;
    } else if (paramString != null) {
      this.iMessage = paramString + ": " + this.iMessage;
    } 
  }
}
