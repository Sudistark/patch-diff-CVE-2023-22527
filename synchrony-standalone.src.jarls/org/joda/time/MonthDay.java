package org.joda.time;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import org.joda.convert.FromString;
import org.joda.convert.ToString;
import org.joda.time.base.BasePartial;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.field.FieldUtils;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeFormatterBuilder;
import org.joda.time.format.ISODateTimeFormat;

public final class MonthDay extends BasePartial implements ReadablePartial, Serializable {
  private static final long serialVersionUID = 2954560699050434609L;
  
  private static final DateTimeFieldType[] FIELD_TYPES = { DateTimeFieldType.monthOfYear(), 
      DateTimeFieldType.dayOfMonth() };
  
  private static final DateTimeFormatter PARSER = (new DateTimeFormatterBuilder())
    .appendOptional(ISODateTimeFormat.localDateParser().getParser())
    .appendOptional(DateTimeFormat.forPattern("--MM-dd").getParser()).toFormatter();
  
  public static final int MONTH_OF_YEAR = 0;
  
  public static final int DAY_OF_MONTH = 1;
  
  public static MonthDay now() { return new MonthDay(); }
  
  public static MonthDay now(DateTimeZone paramDateTimeZone) {
    if (paramDateTimeZone == null)
      throw new NullPointerException("Zone must not be null"); 
    return new MonthDay(paramDateTimeZone);
  }
  
  public static MonthDay now(Chronology paramChronology) {
    if (paramChronology == null)
      throw new NullPointerException("Chronology must not be null"); 
    return new MonthDay(paramChronology);
  }
  
  @FromString
  public static MonthDay parse(String paramString) { return parse(paramString, PARSER); }
  
  public static MonthDay parse(String paramString, DateTimeFormatter paramDateTimeFormatter) {
    LocalDate localDate = paramDateTimeFormatter.parseLocalDate(paramString);
    return new MonthDay(localDate.getMonthOfYear(), localDate.getDayOfMonth());
  }
  
  public static MonthDay fromCalendarFields(Calendar paramCalendar) {
    if (paramCalendar == null)
      throw new IllegalArgumentException("The calendar must not be null"); 
    return new MonthDay(paramCalendar.get(2) + 1, paramCalendar.get(5));
  }
  
  public static MonthDay fromDateFields(Date paramDate) {
    if (paramDate == null)
      throw new IllegalArgumentException("The date must not be null"); 
    return new MonthDay(paramDate.getMonth() + 1, paramDate.getDate());
  }
  
  public MonthDay() {}
  
  public MonthDay(DateTimeZone paramDateTimeZone) { super(ISOChronology.getInstance(paramDateTimeZone)); }
  
  public MonthDay(Chronology paramChronology) { super(paramChronology); }
  
  public MonthDay(long paramLong) { super(paramLong); }
  
  public MonthDay(long paramLong, Chronology paramChronology) { super(paramLong, paramChronology); }
  
  public MonthDay(Object paramObject) { super(paramObject, null, ISODateTimeFormat.localDateParser()); }
  
  public MonthDay(Object paramObject, Chronology paramChronology) { super(paramObject, DateTimeUtils.getChronology(paramChronology), ISODateTimeFormat.localDateParser()); }
  
  public MonthDay(int paramInt1, int paramInt2) { this(paramInt1, paramInt2, null); }
  
  public MonthDay(int paramInt1, int paramInt2, Chronology paramChronology) { super(new int[] { paramInt1, paramInt2 }, paramChronology); }
  
  MonthDay(MonthDay paramMonthDay, int[] paramArrayOfInt) { super(paramMonthDay, paramArrayOfInt); }
  
  MonthDay(MonthDay paramMonthDay, Chronology paramChronology) { super(paramMonthDay, paramChronology); }
  
  private Object readResolve() {
    if (!DateTimeZone.UTC.equals(getChronology().getZone()))
      return new MonthDay(this, getChronology().withUTC()); 
    return this;
  }
  
  public int size() { return 2; }
  
  protected DateTimeField getField(int paramInt, Chronology paramChronology) {
    switch (paramInt) {
      case 0:
        return paramChronology.monthOfYear();
      case 1:
        return paramChronology.dayOfMonth();
    } 
    throw new IndexOutOfBoundsException("Invalid index: " + paramInt);
  }
  
  public DateTimeFieldType getFieldType(int paramInt) { return FIELD_TYPES[paramInt]; }
  
  public DateTimeFieldType[] getFieldTypes() { return (DateTimeFieldType[])FIELD_TYPES.clone(); }
  
  public MonthDay withChronologyRetainFields(Chronology paramChronology) {
    paramChronology = DateTimeUtils.getChronology(paramChronology);
    paramChronology = paramChronology.withUTC();
    if (paramChronology == getChronology())
      return this; 
    MonthDay monthDay = new MonthDay(this, paramChronology);
    paramChronology.validate(monthDay, getValues());
    return monthDay;
  }
  
  public MonthDay withField(DateTimeFieldType paramDateTimeFieldType, int paramInt) {
    int i = indexOfSupported(paramDateTimeFieldType);
    if (paramInt == getValue(i))
      return this; 
    int[] arrayOfInt = getValues();
    arrayOfInt = getField(i).set(this, i, arrayOfInt, paramInt);
    return new MonthDay(this, arrayOfInt);
  }
  
  public MonthDay withFieldAdded(DurationFieldType paramDurationFieldType, int paramInt) {
    int i = indexOfSupported(paramDurationFieldType);
    if (paramInt == 0)
      return this; 
    int[] arrayOfInt = getValues();
    arrayOfInt = getField(i).add(this, i, arrayOfInt, paramInt);
    return new MonthDay(this, arrayOfInt);
  }
  
  public MonthDay withPeriodAdded(ReadablePeriod paramReadablePeriod, int paramInt) {
    if (paramReadablePeriod == null || paramInt == 0)
      return this; 
    int[] arrayOfInt = getValues();
    for (byte b = 0; b < paramReadablePeriod.size(); b++) {
      DurationFieldType durationFieldType = paramReadablePeriod.getFieldType(b);
      int i = indexOf(durationFieldType);
      if (i >= 0)
        arrayOfInt = getField(i).add(this, i, arrayOfInt, 
            FieldUtils.safeMultiply(paramReadablePeriod.getValue(b), paramInt)); 
    } 
    return new MonthDay(this, arrayOfInt);
  }
  
  public MonthDay plus(ReadablePeriod paramReadablePeriod) { return withPeriodAdded(paramReadablePeriod, 1); }
  
  public MonthDay plusMonths(int paramInt) { return withFieldAdded(DurationFieldType.months(), paramInt); }
  
  public MonthDay plusDays(int paramInt) { return withFieldAdded(DurationFieldType.days(), paramInt); }
  
  public MonthDay minus(ReadablePeriod paramReadablePeriod) { return withPeriodAdded(paramReadablePeriod, -1); }
  
  public MonthDay minusMonths(int paramInt) { return withFieldAdded(DurationFieldType.months(), FieldUtils.safeNegate(paramInt)); }
  
  public MonthDay minusDays(int paramInt) { return withFieldAdded(DurationFieldType.days(), FieldUtils.safeNegate(paramInt)); }
  
  public LocalDate toLocalDate(int paramInt) { return new LocalDate(paramInt, getMonthOfYear(), getDayOfMonth(), getChronology()); }
  
  public int getMonthOfYear() { return getValue(0); }
  
  public int getDayOfMonth() { return getValue(1); }
  
  public MonthDay withMonthOfYear(int paramInt) {
    int[] arrayOfInt = getValues();
    arrayOfInt = getChronology().monthOfYear().set(this, 0, arrayOfInt, paramInt);
    return new MonthDay(this, arrayOfInt);
  }
  
  public MonthDay withDayOfMonth(int paramInt) {
    int[] arrayOfInt = getValues();
    arrayOfInt = getChronology().dayOfMonth().set(this, 1, arrayOfInt, paramInt);
    return new MonthDay(this, arrayOfInt);
  }
  
  public Property property(DateTimeFieldType paramDateTimeFieldType) { return new Property(this, indexOfSupported(paramDateTimeFieldType)); }
  
  public Property monthOfYear() { return new Property(this, 0); }
  
  public Property dayOfMonth() { return new Property(this, 1); }
  
  @ToString
  public String toString() {
    ArrayList arrayList = new ArrayList();
    arrayList.add(DateTimeFieldType.monthOfYear());
    arrayList.add(DateTimeFieldType.dayOfMonth());
    return ISODateTimeFormat.forFields(arrayList, true, true).print(this);
  }
  
  public String toString(String paramString) {
    if (paramString == null)
      return toString(); 
    return DateTimeFormat.forPattern(paramString).print(this);
  }
  
  public String toString(String paramString, Locale paramLocale) throws IllegalArgumentException {
    if (paramString == null)
      return toString(); 
    return DateTimeFormat.forPattern(paramString).withLocale(paramLocale).print(this);
  }
}
