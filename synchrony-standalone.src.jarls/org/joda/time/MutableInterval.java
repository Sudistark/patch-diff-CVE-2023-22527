package org.joda.time;

import java.io.Serializable;
import org.joda.time.base.BaseInterval;
import org.joda.time.field.FieldUtils;

public class MutableInterval extends BaseInterval implements ReadWritableInterval, Cloneable, Serializable {
  private static final long serialVersionUID = -5982824024992428470L;
  
  public static MutableInterval parse(String paramString) { return new MutableInterval(paramString); }
  
  public MutableInterval() { super(0L, 0L, null); }
  
  public MutableInterval(long paramLong1, long paramLong2) { super(paramLong1, paramLong2, null); }
  
  public MutableInterval(long paramLong1, long paramLong2, Chronology paramChronology) { super(paramLong1, paramLong2, paramChronology); }
  
  public MutableInterval(ReadableInstant paramReadableInstant1, ReadableInstant paramReadableInstant2) { super(paramReadableInstant1, paramReadableInstant2); }
  
  public MutableInterval(ReadableInstant paramReadableInstant, ReadableDuration paramReadableDuration) { super(paramReadableInstant, paramReadableDuration); }
  
  public MutableInterval(ReadableDuration paramReadableDuration, ReadableInstant paramReadableInstant) { super(paramReadableDuration, paramReadableInstant); }
  
  public MutableInterval(ReadableInstant paramReadableInstant, ReadablePeriod paramReadablePeriod) { super(paramReadableInstant, paramReadablePeriod); }
  
  public MutableInterval(ReadablePeriod paramReadablePeriod, ReadableInstant paramReadableInstant) { super(paramReadablePeriod, paramReadableInstant); }
  
  public MutableInterval(Object paramObject) { super(paramObject, null); }
  
  public MutableInterval(Object paramObject, Chronology paramChronology) { super(paramObject, paramChronology); }
  
  public void setInterval(long paramLong1, long paramLong2) { setInterval(paramLong1, paramLong2, getChronology()); }
  
  public void setInterval(ReadableInterval paramReadableInterval) {
    if (paramReadableInterval == null)
      throw new IllegalArgumentException("Interval must not be null"); 
    long l1 = paramReadableInterval.getStartMillis();
    long l2 = paramReadableInterval.getEndMillis();
    Chronology chronology = paramReadableInterval.getChronology();
    setInterval(l1, l2, chronology);
  }
  
  public void setInterval(ReadableInstant paramReadableInstant1, ReadableInstant paramReadableInstant2) {
    if (paramReadableInstant1 == null && paramReadableInstant2 == null) {
      long l = DateTimeUtils.currentTimeMillis();
      setInterval(l, l);
    } else {
      long l1 = DateTimeUtils.getInstantMillis(paramReadableInstant1);
      long l2 = DateTimeUtils.getInstantMillis(paramReadableInstant2);
      Chronology chronology = DateTimeUtils.getInstantChronology(paramReadableInstant1);
      setInterval(l1, l2, chronology);
    } 
  }
  
  public void setChronology(Chronology paramChronology) { setInterval(getStartMillis(), getEndMillis(), paramChronology); }
  
  public void setStartMillis(long paramLong) { setInterval(paramLong, getEndMillis(), getChronology()); }
  
  public void setStart(ReadableInstant paramReadableInstant) {
    long l = DateTimeUtils.getInstantMillis(paramReadableInstant);
    setInterval(l, getEndMillis(), getChronology());
  }
  
  public void setEndMillis(long paramLong) { setInterval(getStartMillis(), paramLong, getChronology()); }
  
  public void setEnd(ReadableInstant paramReadableInstant) {
    long l = DateTimeUtils.getInstantMillis(paramReadableInstant);
    setInterval(getStartMillis(), l, getChronology());
  }
  
  public void setDurationAfterStart(long paramLong) { setEndMillis(FieldUtils.safeAdd(getStartMillis(), paramLong)); }
  
  public void setDurationBeforeEnd(long paramLong) { setStartMillis(FieldUtils.safeAdd(getEndMillis(), -paramLong)); }
  
  public void setDurationAfterStart(ReadableDuration paramReadableDuration) {
    long l = DateTimeUtils.getDurationMillis(paramReadableDuration);
    setEndMillis(FieldUtils.safeAdd(getStartMillis(), l));
  }
  
  public void setDurationBeforeEnd(ReadableDuration paramReadableDuration) {
    long l = DateTimeUtils.getDurationMillis(paramReadableDuration);
    setStartMillis(FieldUtils.safeAdd(getEndMillis(), -l));
  }
  
  public void setPeriodAfterStart(ReadablePeriod paramReadablePeriod) {
    if (paramReadablePeriod == null) {
      setEndMillis(getStartMillis());
    } else {
      setEndMillis(getChronology().add(paramReadablePeriod, getStartMillis(), 1));
    } 
  }
  
  public void setPeriodBeforeEnd(ReadablePeriod paramReadablePeriod) {
    if (paramReadablePeriod == null) {
      setStartMillis(getEndMillis());
    } else {
      setStartMillis(getChronology().add(paramReadablePeriod, getEndMillis(), -1));
    } 
  }
  
  public MutableInterval copy() { return (MutableInterval)clone(); }
  
  public Object clone() {
    try {
      return super.clone();
    } catch (CloneNotSupportedException cloneNotSupportedException) {
      throw new InternalError("Clone error");
    } 
  }
}
