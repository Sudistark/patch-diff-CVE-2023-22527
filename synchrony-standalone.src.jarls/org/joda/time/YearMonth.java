package org.joda.time;

import java.io.Serializable;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import org.joda.convert.FromString;
import org.joda.convert.ToString;
import org.joda.time.base.BasePartial;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.field.FieldUtils;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.ISODateTimeFormat;

public final class YearMonth extends BasePartial implements ReadablePartial, Serializable {
  private static final long serialVersionUID = 797544782896179L;
  
  private static final DateTimeFieldType[] FIELD_TYPES = { DateTimeFieldType.year(), 
      DateTimeFieldType.monthOfYear() };
  
  public static final int YEAR = 0;
  
  public static final int MONTH_OF_YEAR = 1;
  
  public static YearMonth now() { return new YearMonth(); }
  
  public static YearMonth now(DateTimeZone paramDateTimeZone) {
    if (paramDateTimeZone == null)
      throw new NullPointerException("Zone must not be null"); 
    return new YearMonth(paramDateTimeZone);
  }
  
  public static YearMonth now(Chronology paramChronology) {
    if (paramChronology == null)
      throw new NullPointerException("Chronology must not be null"); 
    return new YearMonth(paramChronology);
  }
  
  @FromString
  public static YearMonth parse(String paramString) { return parse(paramString, ISODateTimeFormat.localDateParser()); }
  
  public static YearMonth parse(String paramString, DateTimeFormatter paramDateTimeFormatter) {
    LocalDate localDate = paramDateTimeFormatter.parseLocalDate(paramString);
    return new YearMonth(localDate.getYear(), localDate.getMonthOfYear());
  }
  
  public static YearMonth fromCalendarFields(Calendar paramCalendar) {
    if (paramCalendar == null)
      throw new IllegalArgumentException("The calendar must not be null"); 
    return new YearMonth(paramCalendar.get(1), paramCalendar.get(2) + 1);
  }
  
  public static YearMonth fromDateFields(Date paramDate) {
    if (paramDate == null)
      throw new IllegalArgumentException("The date must not be null"); 
    return new YearMonth(paramDate.getYear() + 1900, paramDate.getMonth() + 1);
  }
  
  public YearMonth() {}
  
  public YearMonth(DateTimeZone paramDateTimeZone) { super(ISOChronology.getInstance(paramDateTimeZone)); }
  
  public YearMonth(Chronology paramChronology) { super(paramChronology); }
  
  public YearMonth(long paramLong) { super(paramLong); }
  
  public YearMonth(long paramLong, Chronology paramChronology) { super(paramLong, paramChronology); }
  
  public YearMonth(Object paramObject) { super(paramObject, null, ISODateTimeFormat.localDateParser()); }
  
  public YearMonth(Object paramObject, Chronology paramChronology) { super(paramObject, DateTimeUtils.getChronology(paramChronology), ISODateTimeFormat.localDateParser()); }
  
  public YearMonth(int paramInt1, int paramInt2) { this(paramInt1, paramInt2, null); }
  
  public YearMonth(int paramInt1, int paramInt2, Chronology paramChronology) { super(new int[] { paramInt1, paramInt2 }, paramChronology); }
  
  YearMonth(YearMonth paramYearMonth, int[] paramArrayOfInt) { super(paramYearMonth, paramArrayOfInt); }
  
  YearMonth(YearMonth paramYearMonth, Chronology paramChronology) { super(paramYearMonth, paramChronology); }
  
  private Object readResolve() {
    if (!DateTimeZone.UTC.equals(getChronology().getZone()))
      return new YearMonth(this, getChronology().withUTC()); 
    return this;
  }
  
  public int size() { return 2; }
  
  protected DateTimeField getField(int paramInt, Chronology paramChronology) {
    switch (paramInt) {
      case 0:
        return paramChronology.year();
      case 1:
        return paramChronology.monthOfYear();
    } 
    throw new IndexOutOfBoundsException("Invalid index: " + paramInt);
  }
  
  public DateTimeFieldType getFieldType(int paramInt) { return FIELD_TYPES[paramInt]; }
  
  public DateTimeFieldType[] getFieldTypes() { return (DateTimeFieldType[])FIELD_TYPES.clone(); }
  
  public YearMonth withChronologyRetainFields(Chronology paramChronology) {
    paramChronology = DateTimeUtils.getChronology(paramChronology);
    paramChronology = paramChronology.withUTC();
    if (paramChronology == getChronology())
      return this; 
    YearMonth yearMonth = new YearMonth(this, paramChronology);
    paramChronology.validate(yearMonth, getValues());
    return yearMonth;
  }
  
  public YearMonth withField(DateTimeFieldType paramDateTimeFieldType, int paramInt) {
    int i = indexOfSupported(paramDateTimeFieldType);
    if (paramInt == getValue(i))
      return this; 
    int[] arrayOfInt = getValues();
    arrayOfInt = getField(i).set(this, i, arrayOfInt, paramInt);
    return new YearMonth(this, arrayOfInt);
  }
  
  public YearMonth withFieldAdded(DurationFieldType paramDurationFieldType, int paramInt) {
    int i = indexOfSupported(paramDurationFieldType);
    if (paramInt == 0)
      return this; 
    int[] arrayOfInt = getValues();
    arrayOfInt = getField(i).add(this, i, arrayOfInt, paramInt);
    return new YearMonth(this, arrayOfInt);
  }
  
  public YearMonth withPeriodAdded(ReadablePeriod paramReadablePeriod, int paramInt) {
    if (paramReadablePeriod == null || paramInt == 0)
      return this; 
    int[] arrayOfInt = getValues();
    for (byte b = 0; b < paramReadablePeriod.size(); b++) {
      DurationFieldType durationFieldType = paramReadablePeriod.getFieldType(b);
      int i = indexOf(durationFieldType);
      if (i >= 0)
        arrayOfInt = getField(i).add(this, i, arrayOfInt, 
            FieldUtils.safeMultiply(paramReadablePeriod.getValue(b), paramInt)); 
    } 
    return new YearMonth(this, arrayOfInt);
  }
  
  public YearMonth plus(ReadablePeriod paramReadablePeriod) { return withPeriodAdded(paramReadablePeriod, 1); }
  
  public YearMonth plusYears(int paramInt) { return withFieldAdded(DurationFieldType.years(), paramInt); }
  
  public YearMonth plusMonths(int paramInt) { return withFieldAdded(DurationFieldType.months(), paramInt); }
  
  public YearMonth minus(ReadablePeriod paramReadablePeriod) { return withPeriodAdded(paramReadablePeriod, -1); }
  
  public YearMonth minusYears(int paramInt) { return withFieldAdded(DurationFieldType.years(), FieldUtils.safeNegate(paramInt)); }
  
  public YearMonth minusMonths(int paramInt) { return withFieldAdded(DurationFieldType.months(), FieldUtils.safeNegate(paramInt)); }
  
  public LocalDate toLocalDate(int paramInt) { return new LocalDate(getYear(), getMonthOfYear(), paramInt, getChronology()); }
  
  public Interval toInterval() { return toInterval(null); }
  
  public Interval toInterval(DateTimeZone paramDateTimeZone) {
    paramDateTimeZone = DateTimeUtils.getZone(paramDateTimeZone);
    DateTime dateTime1 = toLocalDate(1).toDateTimeAtStartOfDay(paramDateTimeZone);
    DateTime dateTime2 = plusMonths(1).toLocalDate(1).toDateTimeAtStartOfDay(paramDateTimeZone);
    return new Interval(dateTime1, dateTime2);
  }
  
  public int getYear() { return getValue(0); }
  
  public int getMonthOfYear() { return getValue(1); }
  
  public YearMonth withYear(int paramInt) {
    int[] arrayOfInt = getValues();
    arrayOfInt = getChronology().year().set(this, 0, arrayOfInt, paramInt);
    return new YearMonth(this, arrayOfInt);
  }
  
  public YearMonth withMonthOfYear(int paramInt) {
    int[] arrayOfInt = getValues();
    arrayOfInt = getChronology().monthOfYear().set(this, 1, arrayOfInt, paramInt);
    return new YearMonth(this, arrayOfInt);
  }
  
  public Property property(DateTimeFieldType paramDateTimeFieldType) { return new Property(this, indexOfSupported(paramDateTimeFieldType)); }
  
  public Property year() { return new Property(this, 0); }
  
  public Property monthOfYear() { return new Property(this, 1); }
  
  @ToString
  public String toString() { return ISODateTimeFormat.yearMonth().print(this); }
  
  public String toString(String paramString) {
    if (paramString == null)
      return toString(); 
    return DateTimeFormat.forPattern(paramString).print(this);
  }
  
  public String toString(String paramString, Locale paramLocale) throws IllegalArgumentException {
    if (paramString == null)
      return toString(); 
    return DateTimeFormat.forPattern(paramString).withLocale(paramLocale).print(this);
  }
}
