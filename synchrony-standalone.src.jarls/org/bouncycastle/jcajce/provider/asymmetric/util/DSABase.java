package org.bouncycastle.jcajce.provider.asymmetric.util;

import java.math.BigInteger;
import java.security.SignatureException;
import java.security.SignatureSpi;
import java.security.spec.AlgorithmParameterSpec;
import org.bouncycastle.asn1.pkcs.PKCSObjectIdentifiers;
import org.bouncycastle.asn1.x509.X509ObjectIdentifiers;
import org.bouncycastle.crypto.DSAExt;
import org.bouncycastle.crypto.Digest;
import org.bouncycastle.crypto.signers.DSAEncoding;

public abstract class DSABase extends SignatureSpi implements PKCSObjectIdentifiers, X509ObjectIdentifiers {
  protected Digest digest;
  
  protected DSAExt signer;
  
  protected DSAEncoding encoding;
  
  protected DSABase(Digest paramDigest, DSAExt paramDSAExt, DSAEncoding paramDSAEncoding) {
    this.digest = paramDigest;
    this.signer = paramDSAExt;
    this.encoding = paramDSAEncoding;
  }
  
  protected void engineUpdate(byte paramByte) throws SignatureException { this.digest.update(paramByte); }
  
  protected void engineUpdate(byte[] paramArrayOfByte, int paramInt1, int paramInt2) throws SignatureException { this.digest.update(paramArrayOfByte, paramInt1, paramInt2); }
  
  protected byte[] engineSign() throws SignatureException {
    byte[] arrayOfByte = new byte[this.digest.getDigestSize()];
    this.digest.doFinal(arrayOfByte, 0);
    try {
      BigInteger[] arrayOfBigInteger = this.signer.generateSignature(arrayOfByte);
      return this.encoding.encode(this.signer.getOrder(), arrayOfBigInteger[0], arrayOfBigInteger[1]);
    } catch (Exception exception) {
      throw new SignatureException(exception.toString());
    } 
  }
  
  protected boolean engineVerify(byte[] paramArrayOfByte) throws SignatureException {
    BigInteger[] arrayOfBigInteger;
    byte[] arrayOfByte = new byte[this.digest.getDigestSize()];
    this.digest.doFinal(arrayOfByte, 0);
    try {
      arrayOfBigInteger = this.encoding.decode(this.signer.getOrder(), paramArrayOfByte);
    } catch (Exception exception) {
      throw new SignatureException("error decoding signature bytes.");
    } 
    return this.signer.verifySignature(arrayOfByte, arrayOfBigInteger[0], arrayOfBigInteger[1]);
  }
  
  protected void engineSetParameter(AlgorithmParameterSpec paramAlgorithmParameterSpec) { throw new UnsupportedOperationException("engineSetParameter unsupported"); }
  
  protected void engineSetParameter(String paramString, Object paramObject) { throw new UnsupportedOperationException("engineSetParameter unsupported"); }
  
  protected Object engineGetParameter(String paramString) { throw new UnsupportedOperationException("engineSetParameter unsupported"); }
}
