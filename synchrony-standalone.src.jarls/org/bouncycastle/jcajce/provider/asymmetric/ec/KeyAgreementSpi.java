package org.bouncycastle.jcajce.provider.asymmetric.ec;

import java.math.BigInteger;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.SecureRandom;
import java.security.spec.AlgorithmParameterSpec;
import org.bouncycastle.asn1.x9.X9IntegerConverter;
import org.bouncycastle.crypto.BasicAgreement;
import org.bouncycastle.crypto.DerivationFunction;
import org.bouncycastle.crypto.agreement.ECDHCUnifiedAgreement;
import org.bouncycastle.crypto.agreement.ECMQVBasicAgreement;
import org.bouncycastle.crypto.params.AsymmetricKeyParameter;
import org.bouncycastle.crypto.params.ECDHUPrivateParameters;
import org.bouncycastle.crypto.params.ECDHUPublicParameters;
import org.bouncycastle.crypto.params.ECDomainParameters;
import org.bouncycastle.crypto.params.ECPrivateKeyParameters;
import org.bouncycastle.crypto.params.ECPublicKeyParameters;
import org.bouncycastle.crypto.params.MQVPrivateParameters;
import org.bouncycastle.crypto.params.MQVPublicParameters;
import org.bouncycastle.jcajce.provider.asymmetric.util.BaseAgreementSpi;
import org.bouncycastle.jcajce.provider.asymmetric.util.ECUtil;
import org.bouncycastle.jcajce.spec.DHUParameterSpec;
import org.bouncycastle.jcajce.spec.MQVParameterSpec;
import org.bouncycastle.jcajce.spec.UserKeyingMaterialSpec;
import org.bouncycastle.jce.interfaces.MQVPrivateKey;
import org.bouncycastle.jce.interfaces.MQVPublicKey;
import org.bouncycastle.util.Arrays;

public class KeyAgreementSpi extends BaseAgreementSpi {
  private static final X9IntegerConverter converter = new X9IntegerConverter();
  
  private String kaAlgorithm;
  
  private ECDomainParameters parameters;
  
  private Object agreement;
  
  private MQVParameterSpec mqvParameters;
  
  private DHUParameterSpec dheParameters;
  
  private byte[] result;
  
  protected KeyAgreementSpi(String paramString, BasicAgreement paramBasicAgreement, DerivationFunction paramDerivationFunction) {
    super(paramString, paramDerivationFunction);
    this.kaAlgorithm = paramString;
    this.agreement = paramBasicAgreement;
  }
  
  protected KeyAgreementSpi(String paramString, ECDHCUnifiedAgreement paramECDHCUnifiedAgreement, DerivationFunction paramDerivationFunction) {
    super(paramString, paramDerivationFunction);
    this.kaAlgorithm = paramString;
    this.agreement = paramECDHCUnifiedAgreement;
  }
  
  protected byte[] bigIntToBytes(BigInteger paramBigInteger) { return converter.integerToBytes(paramBigInteger, converter.getByteLength(this.parameters.getCurve())); }
  
  protected Key engineDoPhase(Key paramKey, boolean paramBoolean) throws InvalidKeyException, IllegalStateException {
    AsymmetricKeyParameter asymmetricKeyParameter;
    if (this.parameters == null)
      throw new IllegalStateException(this.kaAlgorithm + " not initialised."); 
    if (!paramBoolean)
      throw new IllegalStateException(this.kaAlgorithm + " can only be between two parties."); 
    if (this.agreement instanceof ECMQVBasicAgreement) {
      if (!(paramKey instanceof MQVPublicKey)) {
        ECPublicKeyParameters eCPublicKeyParameters1 = (ECPublicKeyParameters)ECUtils.generatePublicKeyParameter((PublicKey)paramKey);
        ECPublicKeyParameters eCPublicKeyParameters2 = (ECPublicKeyParameters)ECUtils.generatePublicKeyParameter(this.mqvParameters.getOtherPartyEphemeralKey());
        asymmetricKeyParameter = new MQVPublicParameters(eCPublicKeyParameters1, eCPublicKeyParameters2);
      } else {
        MQVPublicKey mQVPublicKey = (MQVPublicKey)paramKey;
        ECPublicKeyParameters eCPublicKeyParameters1 = (ECPublicKeyParameters)ECUtils.generatePublicKeyParameter(mQVPublicKey.getStaticKey());
        ECPublicKeyParameters eCPublicKeyParameters2 = (ECPublicKeyParameters)ECUtils.generatePublicKeyParameter(mQVPublicKey.getEphemeralKey());
        asymmetricKeyParameter = new MQVPublicParameters(eCPublicKeyParameters1, eCPublicKeyParameters2);
      } 
    } else if (this.agreement instanceof ECDHCUnifiedAgreement) {
      ECPublicKeyParameters eCPublicKeyParameters1 = (ECPublicKeyParameters)ECUtils.generatePublicKeyParameter((PublicKey)paramKey);
      ECPublicKeyParameters eCPublicKeyParameters2 = (ECPublicKeyParameters)ECUtils.generatePublicKeyParameter(this.dheParameters.getOtherPartyEphemeralKey());
      asymmetricKeyParameter = new ECDHUPublicParameters(eCPublicKeyParameters1, eCPublicKeyParameters2);
    } else {
      if (!(paramKey instanceof PublicKey))
        throw new InvalidKeyException(this.kaAlgorithm + " key agreement requires " + getSimpleName(org.bouncycastle.jce.interfaces.ECPublicKey.class) + " for doPhase"); 
      asymmetricKeyParameter = ECUtils.generatePublicKeyParameter((PublicKey)paramKey);
    } 
    try {
      if (this.agreement instanceof BasicAgreement) {
        this.result = bigIntToBytes(((BasicAgreement)this.agreement).calculateAgreement(asymmetricKeyParameter));
      } else {
        this.result = ((ECDHCUnifiedAgreement)this.agreement).calculateAgreement(asymmetricKeyParameter);
      } 
    } catch (Exception exception) {
      throw new Object(this, "calculation failed: " + exception.getMessage(), exception);
    } 
    return null;
  }
  
  protected void engineInit(Key paramKey, AlgorithmParameterSpec paramAlgorithmParameterSpec, SecureRandom paramSecureRandom) throws InvalidKeyException, InvalidAlgorithmParameterException {
    if (paramAlgorithmParameterSpec != null && !(paramAlgorithmParameterSpec instanceof MQVParameterSpec) && !(paramAlgorithmParameterSpec instanceof UserKeyingMaterialSpec) && !(paramAlgorithmParameterSpec instanceof DHUParameterSpec))
      throw new InvalidAlgorithmParameterException("No algorithm parameters supported"); 
    initFromKey(paramKey, paramAlgorithmParameterSpec);
  }
  
  protected void engineInit(Key paramKey, SecureRandom paramSecureRandom) throws InvalidKeyException {
    try {
      initFromKey(paramKey, null);
    } catch (InvalidAlgorithmParameterException invalidAlgorithmParameterException) {
      throw new InvalidKeyException(invalidAlgorithmParameterException.getMessage());
    } 
  }
  
  private void initFromKey(Key paramKey, AlgorithmParameterSpec paramAlgorithmParameterSpec) throws InvalidKeyException, InvalidAlgorithmParameterException {
    if (this.agreement instanceof ECMQVBasicAgreement) {
      ECPublicKeyParameters eCPublicKeyParameters;
      ECPrivateKeyParameters eCPrivateKeyParameters2;
      ECPrivateKeyParameters eCPrivateKeyParameters1;
      this.mqvParameters = null;
      if (!(paramKey instanceof MQVPrivateKey) && !(paramAlgorithmParameterSpec instanceof MQVParameterSpec))
        throw new InvalidAlgorithmParameterException(this.kaAlgorithm + " key agreement requires " + getSimpleName(MQVParameterSpec.class) + " for initialisation"); 
      if (paramKey instanceof MQVPrivateKey) {
        MQVPrivateKey mQVPrivateKey = (MQVPrivateKey)paramKey;
        eCPrivateKeyParameters1 = (ECPrivateKeyParameters)ECUtil.generatePrivateKeyParameter(mQVPrivateKey.getStaticPrivateKey());
        eCPrivateKeyParameters2 = (ECPrivateKeyParameters)ECUtil.generatePrivateKeyParameter(mQVPrivateKey.getEphemeralPrivateKey());
        eCPublicKeyParameters = null;
        if (mQVPrivateKey.getEphemeralPublicKey() != null)
          eCPublicKeyParameters = (ECPublicKeyParameters)ECUtils.generatePublicKeyParameter(mQVPrivateKey.getEphemeralPublicKey()); 
      } else {
        MQVParameterSpec mQVParameterSpec = (MQVParameterSpec)paramAlgorithmParameterSpec;
        eCPrivateKeyParameters1 = (ECPrivateKeyParameters)ECUtil.generatePrivateKeyParameter((PrivateKey)paramKey);
        eCPrivateKeyParameters2 = (ECPrivateKeyParameters)ECUtil.generatePrivateKeyParameter(mQVParameterSpec.getEphemeralPrivateKey());
        eCPublicKeyParameters = null;
        if (mQVParameterSpec.getEphemeralPublicKey() != null)
          eCPublicKeyParameters = (ECPublicKeyParameters)ECUtils.generatePublicKeyParameter(mQVParameterSpec.getEphemeralPublicKey()); 
        this.mqvParameters = mQVParameterSpec;
        this.ukmParameters = mQVParameterSpec.getUserKeyingMaterial();
      } 
      MQVPrivateParameters mQVPrivateParameters = new MQVPrivateParameters(eCPrivateKeyParameters1, eCPrivateKeyParameters2, eCPublicKeyParameters);
      this.parameters = eCPrivateKeyParameters1.getParameters();
      ((ECMQVBasicAgreement)this.agreement).init(mQVPrivateParameters);
    } else if (paramAlgorithmParameterSpec instanceof DHUParameterSpec) {
      if (!(this.agreement instanceof ECDHCUnifiedAgreement))
        throw new InvalidAlgorithmParameterException(this.kaAlgorithm + " key agreement cannot be used with " + getSimpleName(DHUParameterSpec.class)); 
      DHUParameterSpec dHUParameterSpec = (DHUParameterSpec)paramAlgorithmParameterSpec;
      ECPrivateKeyParameters eCPrivateKeyParameters1 = (ECPrivateKeyParameters)ECUtil.generatePrivateKeyParameter((PrivateKey)paramKey);
      ECPrivateKeyParameters eCPrivateKeyParameters2 = (ECPrivateKeyParameters)ECUtil.generatePrivateKeyParameter(dHUParameterSpec.getEphemeralPrivateKey());
      ECPublicKeyParameters eCPublicKeyParameters = null;
      if (dHUParameterSpec.getEphemeralPublicKey() != null)
        eCPublicKeyParameters = (ECPublicKeyParameters)ECUtils.generatePublicKeyParameter(dHUParameterSpec.getEphemeralPublicKey()); 
      this.dheParameters = dHUParameterSpec;
      this.ukmParameters = dHUParameterSpec.getUserKeyingMaterial();
      ECDHUPrivateParameters eCDHUPrivateParameters = new ECDHUPrivateParameters(eCPrivateKeyParameters1, eCPrivateKeyParameters2, eCPublicKeyParameters);
      this.parameters = eCPrivateKeyParameters1.getParameters();
      ((ECDHCUnifiedAgreement)this.agreement).init(eCDHUPrivateParameters);
    } else {
      if (!(paramKey instanceof PrivateKey))
        throw new InvalidKeyException(this.kaAlgorithm + " key agreement requires " + getSimpleName(org.bouncycastle.jce.interfaces.ECPrivateKey.class) + " for initialisation"); 
      if (this.kdf == null && paramAlgorithmParameterSpec instanceof UserKeyingMaterialSpec)
        throw new InvalidAlgorithmParameterException("no KDF specified for UserKeyingMaterialSpec"); 
      ECPrivateKeyParameters eCPrivateKeyParameters = (ECPrivateKeyParameters)ECUtil.generatePrivateKeyParameter((PrivateKey)paramKey);
      this.parameters = eCPrivateKeyParameters.getParameters();
      this.ukmParameters = (paramAlgorithmParameterSpec instanceof UserKeyingMaterialSpec) ? ((UserKeyingMaterialSpec)paramAlgorithmParameterSpec).getUserKeyingMaterial() : null;
      ((BasicAgreement)this.agreement).init(eCPrivateKeyParameters);
    } 
  }
  
  private static String getSimpleName(Class paramClass) {
    String str = paramClass.getName();
    return str.substring(str.lastIndexOf('.') + 1);
  }
  
  protected byte[] calcSecret() { return Arrays.clone(this.result); }
}
