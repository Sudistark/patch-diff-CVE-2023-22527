package org.bouncycastle.jcajce.provider.drbg;

import java.net.URL;
import java.security.AccessController;
import java.security.SecureRandom;
import java.security.Security;
import org.bouncycastle.crypto.digests.SHA512Digest;
import org.bouncycastle.crypto.prng.EntropySource;
import org.bouncycastle.crypto.prng.EntropySourceProvider;
import org.bouncycastle.crypto.prng.SP800SecureRandomBuilder;
import org.bouncycastle.util.Arrays;
import org.bouncycastle.util.Pack;
import org.bouncycastle.util.Properties;
import org.bouncycastle.util.Strings;

public class DRBG {
  private static final String PREFIX = DRBG.class.getName();
  
  private static final String[][] initialEntropySourceNames = { { "sun.security.provider.Sun", "sun.security.provider.SecureRandom" }, { "org.apache.harmony.security.provider.crypto.CryptoProvider", "org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl" }, { "com.android.org.conscrypt.OpenSSLProvider", "com.android.org.conscrypt.OpenSSLRandom" }, { "org.conscrypt.OpenSSLProvider", "org.conscrypt.OpenSSLRandom" } };
  
  private static final Object[] findSource() {
    byte b = 0;
    while (b < initialEntropySourceNames.length) {
      String[] arrayOfString = initialEntropySourceNames[b];
      try {
        return new Object[] { Class.forName(arrayOfString[0]).newInstance(), Class.forName(arrayOfString[1]).newInstance() };
      } catch (Throwable throwable) {
        b++;
      } 
    } 
    return null;
  }
  
  private static SecureRandom createInitialEntropySource() {
    boolean bool = ((Boolean)AccessController.doPrivileged(new Object())).booleanValue();
    return bool ? (SecureRandom)AccessController.doPrivileged(new Object()) : createCoreSecureRandom();
  }
  
  private static SecureRandom createCoreSecureRandom() {
    if (Security.getProperty("securerandom.source") == null)
      return new CoreSecureRandom(findSource()); 
    try {
      String str = Security.getProperty("securerandom.source");
      return new URLSeededSecureRandom(new URL(str));
    } catch (Exception exception) {
      return new CoreSecureRandom(findSource());
    } 
  }
  
  private static EntropySourceProvider createEntropySource() {
    String str = Properties.getPropertyValue("org.bouncycastle.drbg.entropysource");
    return (EntropySourceProvider)AccessController.doPrivileged(new Object(str));
  }
  
  private static SecureRandom createBaseRandom(boolean paramBoolean) {
    if (Properties.getPropertyValue("org.bouncycastle.drbg.entropysource") != null) {
      EntropySourceProvider entropySourceProvider = createEntropySource();
      EntropySource entropySource = entropySourceProvider.get(128);
      byte[] arrayOfByte1 = paramBoolean ? generateDefaultPersonalizationString(entropySource.getEntropy()) : generateNonceIVPersonalizationString(entropySource.getEntropy());
      return (new SP800SecureRandomBuilder(entropySourceProvider)).setPersonalizationString(arrayOfByte1).buildHash(new SHA512Digest(), Arrays.concatenate(entropySource.getEntropy(), entropySource.getEntropy()), paramBoolean);
    } 
    HybridSecureRandom hybridSecureRandom = new HybridSecureRandom();
    byte[] arrayOfByte = paramBoolean ? generateDefaultPersonalizationString(hybridSecureRandom.generateSeed(16)) : generateNonceIVPersonalizationString(hybridSecureRandom.generateSeed(16));
    return (new SP800SecureRandomBuilder(hybridSecureRandom, true)).setPersonalizationString(arrayOfByte).buildHash(new SHA512Digest(), hybridSecureRandom.generateSeed(32), paramBoolean);
  }
  
  private static byte[] generateDefaultPersonalizationString(byte[] paramArrayOfByte) { return Arrays.concatenate(Strings.toByteArray("Default"), paramArrayOfByte, Pack.longToBigEndian(Thread.currentThread().getId()), Pack.longToBigEndian(System.currentTimeMillis())); }
  
  private static byte[] generateNonceIVPersonalizationString(byte[] paramArrayOfByte) { return Arrays.concatenate(Strings.toByteArray("Nonce"), paramArrayOfByte, Pack.longToLittleEndian(Thread.currentThread().getId()), Pack.longToLittleEndian(System.currentTimeMillis())); }
}
