package org.bouncycastle.tsp.ers;

import java.util.ArrayList;
import org.bouncycastle.asn1.tsp.PartialHashtree;
import org.bouncycastle.operator.DigestCalculator;

public class BinaryTreeRootCalculator implements ERSRootNodeCalculator {
  public byte[] computeRootHash(DigestCalculator paramDigestCalculator, PartialHashtree[] paramArrayOfPartialHashtree) {
    ArrayList arrayList = new ArrayList();
    for (boolean bool = false; bool <= paramArrayOfPartialHashtree.length - 2; bool += true) {
      byte[] arrayOfByte1 = ERSUtil.computeNodeHash(paramDigestCalculator, paramArrayOfPartialHashtree[bool]);
      byte[] arrayOfByte2 = ERSUtil.computeNodeHash(paramDigestCalculator, paramArrayOfPartialHashtree[bool + true]);
      arrayList.add(ERSUtil.calculateBranchHash(paramDigestCalculator, arrayOfByte1, arrayOfByte2));
    } 
    if (paramArrayOfPartialHashtree.length % 2 == 1)
      arrayList.add(ERSUtil.computeNodeHash(paramDigestCalculator, paramArrayOfPartialHashtree[paramArrayOfPartialHashtree.length - 1])); 
    do {
      ArrayList arrayList1 = new ArrayList((arrayList.size() + 1) / 2);
      for (byte b = 0; b <= arrayList.size() - 2; b += 2)
        arrayList1.add(ERSUtil.calculateBranchHash(paramDigestCalculator, (byte[])arrayList.get(b), (byte[])arrayList.get(b + 1))); 
      if (arrayList.size() % 2 == 1)
        arrayList1.add(arrayList.get(arrayList.size() - 1)); 
      arrayList = arrayList1;
    } while (arrayList.size() > 1);
    return (byte[])arrayList.get(0);
  }
}
