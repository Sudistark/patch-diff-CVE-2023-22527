package org.bouncycastle.asn1.its;

import org.bouncycastle.asn1.ASN1EncodableVector;
import org.bouncycastle.asn1.ASN1Object;
import org.bouncycastle.asn1.ASN1OctetString;
import org.bouncycastle.asn1.ASN1Primitive;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.DEROctetString;
import org.bouncycastle.asn1.DERSequence;

public class AesCcmCiphertext extends ASN1Object {
  private final byte[] nonce;
  
  private final SequenceOfOctetString opaque;
  
  private AesCcmCiphertext(ASN1Sequence paramASN1Sequence) {
    if (paramASN1Sequence.size() != 2)
      throw new IllegalArgumentException("sequence not length 2"); 
    this.nonce = Utils.octetStringFixed(ASN1OctetString.getInstance(paramASN1Sequence.getObjectAt(0)).getOctets(), 12);
    this.opaque = SequenceOfOctetString.getInstance(paramASN1Sequence.getObjectAt(1));
  }
  
  public static AesCcmCiphertext getInstance(Object paramObject) { return (paramObject instanceof AesCcmCiphertext) ? (AesCcmCiphertext)paramObject : ((paramObject != null) ? new AesCcmCiphertext(ASN1Sequence.getInstance(paramObject)) : null); }
  
  public ASN1Primitive toASN1Primitive() {
    ASN1EncodableVector aSN1EncodableVector = new ASN1EncodableVector();
    aSN1EncodableVector.add(new DEROctetString(this.nonce));
    aSN1EncodableVector.add(this.opaque);
    return new DERSequence(aSN1EncodableVector);
  }
}
