package org.bouncycastle.asn1.its;

import org.bouncycastle.asn1.ASN1EncodableVector;
import org.bouncycastle.asn1.ASN1Object;
import org.bouncycastle.asn1.ASN1OctetString;
import org.bouncycastle.asn1.ASN1Primitive;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.DEROctetString;
import org.bouncycastle.asn1.DERSequence;
import org.bouncycastle.util.Arrays;

public class SequenceOfOctetString extends ASN1Object {
  private byte[][] octetStrings;
  
  private SequenceOfOctetString(ASN1Sequence paramASN1Sequence) { this.octetStrings = toByteArrays(paramASN1Sequence); }
  
  public static SequenceOfOctetString getInstance(Object paramObject) { return (paramObject instanceof SequenceOfOctetString) ? (SequenceOfOctetString)paramObject : ((paramObject != null) ? new SequenceOfOctetString(ASN1Sequence.getInstance(paramObject)) : null); }
  
  public int size() { return this.octetStrings.length; }
  
  public ASN1Primitive toASN1Primitive() {
    ASN1EncodableVector aSN1EncodableVector = new ASN1EncodableVector();
    for (byte b = 0; b != this.octetStrings.length; b++)
      aSN1EncodableVector.add(new DEROctetString(Arrays.clone(this.octetStrings[b]))); 
    return new DERSequence(aSN1EncodableVector);
  }
  
  static byte[][] toByteArrays(ASN1Sequence paramASN1Sequence) {
    byte[][] arrayOfByte = new byte[paramASN1Sequence.size()][];
    for (byte b = 0; b != paramASN1Sequence.size(); b++)
      arrayOfByte[b] = ASN1OctetString.getInstance(paramASN1Sequence.getObjectAt(b)).getOctets(); 
    return arrayOfByte;
  }
}
