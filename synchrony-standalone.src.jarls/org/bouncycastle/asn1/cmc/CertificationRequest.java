package org.bouncycastle.asn1.cmc;

import java.io.IOException;
import java.math.BigInteger;
import org.bouncycastle.asn1.ASN1EncodableVector;
import org.bouncycastle.asn1.ASN1Integer;
import org.bouncycastle.asn1.ASN1Object;
import org.bouncycastle.asn1.ASN1Primitive;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.ASN1Set;
import org.bouncycastle.asn1.DERBitString;
import org.bouncycastle.asn1.DERSequence;
import org.bouncycastle.asn1.x500.X500Name;
import org.bouncycastle.asn1.x509.AlgorithmIdentifier;

public class CertificationRequest extends ASN1Object {
  private static final ASN1Integer ZERO = new ASN1Integer(0L);
  
  private final CertificationRequestInfo certificationRequestInfo;
  
  private final AlgorithmIdentifier signatureAlgorithm;
  
  private final DERBitString signature;
  
  public CertificationRequest(X500Name paramX500Name, AlgorithmIdentifier paramAlgorithmIdentifier1, DERBitString paramDERBitString1, ASN1Set paramASN1Set, AlgorithmIdentifier paramAlgorithmIdentifier2, DERBitString paramDERBitString2) {
    this.certificationRequestInfo = new CertificationRequestInfo(this, paramX500Name, paramAlgorithmIdentifier1, paramDERBitString1, paramASN1Set, null);
    this.signatureAlgorithm = paramAlgorithmIdentifier2;
    this.signature = paramDERBitString2;
  }
  
  private CertificationRequest(ASN1Sequence paramASN1Sequence) {
    if (paramASN1Sequence.size() != 3)
      throw new IllegalArgumentException("incorrect sequence size"); 
    this.certificationRequestInfo = new CertificationRequestInfo(this, ASN1Sequence.getInstance(paramASN1Sequence.getObjectAt(0)), null);
    this.signatureAlgorithm = AlgorithmIdentifier.getInstance(paramASN1Sequence.getObjectAt(1));
    this.signature = DERBitString.getInstance(paramASN1Sequence.getObjectAt(2));
  }
  
  public static CertificationRequest getInstance(Object paramObject) { return (paramObject instanceof CertificationRequest) ? (CertificationRequest)paramObject : ((paramObject != null) ? new CertificationRequest(ASN1Sequence.getInstance(paramObject)) : null); }
  
  public BigInteger getVersion() { return CertificationRequestInfo.access$200(this.certificationRequestInfo).getValue(); }
  
  public X500Name getSubject() { return CertificationRequestInfo.access$300(this.certificationRequestInfo); }
  
  public ASN1Set getAttributes() { return CertificationRequestInfo.access$400(this.certificationRequestInfo); }
  
  public AlgorithmIdentifier getSubjectPublicKeyAlgorithm() { return AlgorithmIdentifier.getInstance(CertificationRequestInfo.access$500(this.certificationRequestInfo).getObjectAt(0)); }
  
  public DERBitString getSubjectPublicKey() { return DERBitString.getInstance(CertificationRequestInfo.access$500(this.certificationRequestInfo).getObjectAt(1)); }
  
  public ASN1Primitive parsePublicKey() throws IOException { return ASN1Primitive.fromByteArray(getSubjectPublicKey().getOctets()); }
  
  public AlgorithmIdentifier getSignatureAlgorithm() { return this.signatureAlgorithm; }
  
  public DERBitString getSignature() { return this.signature; }
  
  public ASN1Primitive toASN1Primitive() throws IOException {
    ASN1EncodableVector aSN1EncodableVector = new ASN1EncodableVector(3);
    aSN1EncodableVector.add(this.certificationRequestInfo);
    aSN1EncodableVector.add(this.signatureAlgorithm);
    aSN1EncodableVector.add(this.signature);
    return new DERSequence(aSN1EncodableVector);
  }
}
