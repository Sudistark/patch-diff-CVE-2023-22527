package org.bouncycastle.asn1;

public abstract class ASN1External extends ASN1Primitive {
  protected ASN1ObjectIdentifier directReference;
  
  protected ASN1Integer indirectReference;
  
  protected ASN1Primitive dataValueDescriptor;
  
  protected int encoding;
  
  protected ASN1Primitive externalContent;
  
  public ASN1External(ASN1EncodableVector paramASN1EncodableVector) {
    byte b = 0;
    ASN1Primitive aSN1Primitive = getObjFromVector(paramASN1EncodableVector, b);
    if (aSN1Primitive instanceof ASN1ObjectIdentifier) {
      this.directReference = (ASN1ObjectIdentifier)aSN1Primitive;
      aSN1Primitive = getObjFromVector(paramASN1EncodableVector, ++b);
    } 
    if (aSN1Primitive instanceof ASN1Integer) {
      this.indirectReference = (ASN1Integer)aSN1Primitive;
      aSN1Primitive = getObjFromVector(paramASN1EncodableVector, ++b);
    } 
    if (!(aSN1Primitive instanceof ASN1TaggedObject)) {
      this.dataValueDescriptor = aSN1Primitive;
      aSN1Primitive = getObjFromVector(paramASN1EncodableVector, ++b);
    } 
    if (paramASN1EncodableVector.size() != b + 1)
      throw new IllegalArgumentException("input vector too large"); 
    if (!(aSN1Primitive instanceof ASN1TaggedObject))
      throw new IllegalArgumentException("No tagged object found in vector. Structure doesn't seem to be of type External"); 
    ASN1TaggedObject aSN1TaggedObject = (ASN1TaggedObject)aSN1Primitive;
    setEncoding(aSN1TaggedObject.getTagNo());
    this.externalContent = aSN1TaggedObject.getObject();
  }
  
  private ASN1Primitive getObjFromVector(ASN1EncodableVector paramASN1EncodableVector, int paramInt) {
    if (paramASN1EncodableVector.size() <= paramInt)
      throw new IllegalArgumentException("too few objects in input vector"); 
    return paramASN1EncodableVector.get(paramInt).toASN1Primitive();
  }
  
  public ASN1External(ASN1ObjectIdentifier paramASN1ObjectIdentifier, ASN1Integer paramASN1Integer, ASN1Primitive paramASN1Primitive, DERTaggedObject paramDERTaggedObject) { this(paramASN1ObjectIdentifier, paramASN1Integer, paramASN1Primitive, paramDERTaggedObject.getTagNo(), paramDERTaggedObject.toASN1Primitive()); }
  
  public ASN1External(ASN1ObjectIdentifier paramASN1ObjectIdentifier, ASN1Integer paramASN1Integer, ASN1Primitive paramASN1Primitive1, int paramInt, ASN1Primitive paramASN1Primitive2) {
    setDirectReference(paramASN1ObjectIdentifier);
    setIndirectReference(paramASN1Integer);
    setDataValueDescriptor(paramASN1Primitive1);
    setEncoding(paramInt);
    setExternalContent(paramASN1Primitive2.toASN1Primitive());
  }
  
  ASN1Primitive toDERObject() { return new DERExternal(this.directReference, this.indirectReference, this.dataValueDescriptor, this.encoding, this.externalContent); }
  
  ASN1Primitive toDLObject() { return new DLExternal(this.directReference, this.indirectReference, this.dataValueDescriptor, this.encoding, this.externalContent); }
  
  public int hashCode() {
    null = 0;
    if (this.directReference != null)
      null = this.directReference.hashCode(); 
    if (this.indirectReference != null)
      null ^= this.indirectReference.hashCode(); 
    if (this.dataValueDescriptor != null)
      null ^= this.dataValueDescriptor.hashCode(); 
    return this.externalContent.hashCode();
  }
  
  boolean isConstructed() { return true; }
  
  int encodedLength() { return getEncoded().length; }
  
  boolean asn1Equals(ASN1Primitive paramASN1Primitive) {
    if (!(paramASN1Primitive instanceof ASN1External))
      return false; 
    if (this == paramASN1Primitive)
      return true; 
    ASN1External aSN1External = (ASN1External)paramASN1Primitive;
    return (this.directReference != null && (aSN1External.directReference == null || !aSN1External.directReference.equals(this.directReference))) ? false : ((this.indirectReference != null && (aSN1External.indirectReference == null || !aSN1External.indirectReference.equals(this.indirectReference))) ? false : ((this.dataValueDescriptor != null && (aSN1External.dataValueDescriptor == null || !aSN1External.dataValueDescriptor.equals(this.dataValueDescriptor))) ? false : this.externalContent.equals(aSN1External.externalContent)));
  }
  
  public ASN1Primitive getDataValueDescriptor() { return this.dataValueDescriptor; }
  
  public ASN1ObjectIdentifier getDirectReference() { return this.directReference; }
  
  public int getEncoding() { return this.encoding; }
  
  public ASN1Primitive getExternalContent() { return this.externalContent; }
  
  public ASN1Integer getIndirectReference() { return this.indirectReference; }
  
  private void setDataValueDescriptor(ASN1Primitive paramASN1Primitive) { this.dataValueDescriptor = paramASN1Primitive; }
  
  private void setDirectReference(ASN1ObjectIdentifier paramASN1ObjectIdentifier) { this.directReference = paramASN1ObjectIdentifier; }
  
  private void setEncoding(int paramInt) {
    if (paramInt < 0 || paramInt > 2)
      throw new IllegalArgumentException("invalid encoding value: " + paramInt); 
    this.encoding = paramInt;
  }
  
  private void setExternalContent(ASN1Primitive paramASN1Primitive) { this.externalContent = paramASN1Primitive; }
  
  private void setIndirectReference(ASN1Integer paramASN1Integer) { this.indirectReference = paramASN1Integer; }
}
