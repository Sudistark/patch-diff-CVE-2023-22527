package org.bouncycastle.asn1;

import java.io.IOException;
import java.util.Date;
import org.bouncycastle.util.Strings;

public class DERGeneralizedTime extends ASN1GeneralizedTime {
  public DERGeneralizedTime(byte[] paramArrayOfByte) { super(paramArrayOfByte); }
  
  public DERGeneralizedTime(Date paramDate) { super(paramDate); }
  
  public DERGeneralizedTime(String paramString) { super(paramString); }
  
  private byte[] getDERTime() {
    if (this.time[this.time.length - 1] == 90) {
      if (!hasMinutes()) {
        byte[] arrayOfByte = new byte[this.time.length + 4];
        System.arraycopy(this.time, 0, arrayOfByte, 0, this.time.length - 1);
        System.arraycopy(Strings.toByteArray("0000Z"), 0, arrayOfByte, this.time.length - 1, 5);
        return arrayOfByte;
      } 
      if (!hasSeconds()) {
        byte[] arrayOfByte = new byte[this.time.length + 2];
        System.arraycopy(this.time, 0, arrayOfByte, 0, this.time.length - 1);
        System.arraycopy(Strings.toByteArray("00Z"), 0, arrayOfByte, this.time.length - 1, 3);
        return arrayOfByte;
      } 
      if (hasFractionalSeconds()) {
        int i;
        for (i = this.time.length - 2; i > 0 && this.time[i] == 48; i--);
        if (this.time[i] == 46) {
          byte[] arrayOfByte1 = new byte[i + 1];
          System.arraycopy(this.time, 0, arrayOfByte1, 0, i);
          arrayOfByte1[i] = 90;
          return arrayOfByte1;
        } 
        byte[] arrayOfByte = new byte[i + 2];
        System.arraycopy(this.time, 0, arrayOfByte, 0, i + 1);
        arrayOfByte[i + 1] = 90;
        return arrayOfByte;
      } 
      return this.time;
    } 
    return this.time;
  }
  
  int encodedLength() {
    int i = getDERTime().length;
    return 1 + StreamUtil.calculateBodyLength(i) + i;
  }
  
  void encode(ASN1OutputStream paramASN1OutputStream, boolean paramBoolean) throws IOException { paramASN1OutputStream.writeEncoded(paramBoolean, 24, getDERTime()); }
  
  ASN1Primitive toDERObject() { return this; }
  
  ASN1Primitive toDLObject() { return this; }
}
