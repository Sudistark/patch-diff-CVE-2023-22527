package org.bouncycastle.asn1.ess;

import org.bouncycastle.asn1.ASN1EncodableVector;
import org.bouncycastle.asn1.ASN1Object;
import org.bouncycastle.asn1.ASN1Primitive;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.DERSequence;
import org.bouncycastle.asn1.x509.PolicyInformation;

public class SigningCertificateV2 extends ASN1Object {
  ASN1Sequence certs;
  
  ASN1Sequence policies;
  
  public static SigningCertificateV2 getInstance(Object paramObject) { return (paramObject == null || paramObject instanceof SigningCertificateV2) ? (SigningCertificateV2)paramObject : ((paramObject instanceof ASN1Sequence) ? new SigningCertificateV2((ASN1Sequence)paramObject) : null); }
  
  private SigningCertificateV2(ASN1Sequence paramASN1Sequence) {
    if (paramASN1Sequence.size() < 1 || paramASN1Sequence.size() > 2)
      throw new IllegalArgumentException("Bad sequence size: " + paramASN1Sequence.size()); 
    this.certs = ASN1Sequence.getInstance(paramASN1Sequence.getObjectAt(0));
    if (paramASN1Sequence.size() > 1)
      this.policies = ASN1Sequence.getInstance(paramASN1Sequence.getObjectAt(1)); 
  }
  
  public SigningCertificateV2(ESSCertIDv2 paramESSCertIDv2) { this.certs = new DERSequence(paramESSCertIDv2); }
  
  public SigningCertificateV2(ESSCertIDv2[] paramArrayOfESSCertIDv2) { this.certs = new DERSequence(paramArrayOfESSCertIDv2); }
  
  public SigningCertificateV2(ESSCertIDv2[] paramArrayOfESSCertIDv2, PolicyInformation[] paramArrayOfPolicyInformation) {
    this.certs = new DERSequence(paramArrayOfESSCertIDv2);
    if (paramArrayOfPolicyInformation != null)
      this.policies = new DERSequence(paramArrayOfPolicyInformation); 
  }
  
  public ESSCertIDv2[] getCerts() {
    ESSCertIDv2[] arrayOfESSCertIDv2 = new ESSCertIDv2[this.certs.size()];
    for (byte b = 0; b != this.certs.size(); b++)
      arrayOfESSCertIDv2[b] = ESSCertIDv2.getInstance(this.certs.getObjectAt(b)); 
    return arrayOfESSCertIDv2;
  }
  
  public PolicyInformation[] getPolicies() {
    if (this.policies == null)
      return null; 
    PolicyInformation[] arrayOfPolicyInformation = new PolicyInformation[this.policies.size()];
    for (byte b = 0; b != this.policies.size(); b++)
      arrayOfPolicyInformation[b] = PolicyInformation.getInstance(this.policies.getObjectAt(b)); 
    return arrayOfPolicyInformation;
  }
  
  public ASN1Primitive toASN1Primitive() {
    ASN1EncodableVector aSN1EncodableVector = new ASN1EncodableVector(2);
    aSN1EncodableVector.add(this.certs);
    if (this.policies != null)
      aSN1EncodableVector.add(this.policies); 
    return new DERSequence(aSN1EncodableVector);
  }
}
