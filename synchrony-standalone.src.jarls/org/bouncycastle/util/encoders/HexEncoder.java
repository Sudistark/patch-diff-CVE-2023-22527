package org.bouncycastle.util.encoders;

import java.io.IOException;
import java.io.OutputStream;

public class HexEncoder implements Encoder {
  protected final byte[] encodingTable = { 
      48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 
      97, 98, 99, 100, 101, 102 };
  
  protected final byte[] decodingTable = new byte[128];
  
  protected void initialiseDecodingTable() {
    byte b;
    for (b = 0; b < this.decodingTable.length; b++)
      this.decodingTable[b] = -1; 
    for (b = 0; b < this.encodingTable.length; b++)
      this.decodingTable[this.encodingTable[b]] = (byte)b; 
    this.decodingTable[65] = this.decodingTable[97];
    this.decodingTable[66] = this.decodingTable[98];
    this.decodingTable[67] = this.decodingTable[99];
    this.decodingTable[68] = this.decodingTable[100];
    this.decodingTable[69] = this.decodingTable[101];
    this.decodingTable[70] = this.decodingTable[102];
  }
  
  public HexEncoder() { initialiseDecodingTable(); }
  
  public int encode(byte[] paramArrayOfByte1, int paramInt1, int paramInt2, byte[] paramArrayOfByte2, int paramInt3) throws IOException {
    int i = paramInt1;
    int j = paramInt1 + paramInt2;
    int k = paramInt3;
    while (i < j) {
      byte b = paramArrayOfByte1[i++] & 0xFF;
      paramArrayOfByte2[k++] = this.encodingTable[b >>> 4];
      paramArrayOfByte2[k++] = this.encodingTable[b & 0xF];
    } 
    return k - paramInt3;
  }
  
  public int getEncodedLength(int paramInt) { return paramInt * 2; }
  
  public int getMaxDecodedLength(int paramInt) { return paramInt / 2; }
  
  public int encode(byte[] paramArrayOfByte, int paramInt1, int paramInt2, OutputStream paramOutputStream) throws IOException {
    byte[] arrayOfByte = new byte[72];
    while (paramInt2 > 0) {
      int i = Math.min(36, paramInt2);
      int j = encode(paramArrayOfByte, paramInt1, i, arrayOfByte, 0);
      paramOutputStream.write(arrayOfByte, 0, j);
      paramInt1 += i;
      paramInt2 -= i;
    } 
    return paramInt2 * 2;
  }
  
  private static boolean ignore(char paramChar) { return (paramChar == '\n' || paramChar == '\r' || paramChar == '\t' || paramChar == ' '); }
  
  public int decode(byte[] paramArrayOfByte, int paramInt1, int paramInt2, OutputStream paramOutputStream) throws IOException {
    byte b1 = 0;
    byte[] arrayOfByte = new byte[36];
    byte b2 = 0;
    int i;
    for (i = paramInt1 + paramInt2; i > paramInt1 && ignore((char)paramArrayOfByte[i - 1]); i--);
    int j = paramInt1;
    while (j < i) {
      while (j < i && ignore((char)paramArrayOfByte[j]))
        j++; 
      byte b3 = this.decodingTable[paramArrayOfByte[j++]];
      while (j < i && ignore((char)paramArrayOfByte[j]))
        j++; 
      byte b4 = this.decodingTable[paramArrayOfByte[j++]];
      if ((b3 | b4) < 0)
        throw new IOException("invalid characters encountered in Hex data"); 
      arrayOfByte[b2++] = (byte)(b3 << 4 | b4);
      if (b2 == arrayOfByte.length) {
        paramOutputStream.write(arrayOfByte);
        b2 = 0;
      } 
      b1++;
    } 
    if (b2 > 0)
      paramOutputStream.write(arrayOfByte, 0, b2); 
    return b1;
  }
  
  public int decode(String paramString, OutputStream paramOutputStream) throws IOException {
    byte b1 = 0;
    byte[] arrayOfByte = new byte[36];
    byte b2 = 0;
    int i;
    for (i = paramString.length(); i > 0 && ignore(paramString.charAt(i - 1)); i--);
    byte b3 = 0;
    while (b3 < i) {
      while (b3 < i && ignore(paramString.charAt(b3)))
        b3++; 
      byte b4 = this.decodingTable[paramString.charAt(b3++)];
      while (b3 < i && ignore(paramString.charAt(b3)))
        b3++; 
      byte b5 = this.decodingTable[paramString.charAt(b3++)];
      if ((b4 | b5) < 0)
        throw new IOException("invalid characters encountered in Hex string"); 
      arrayOfByte[b2++] = (byte)(b4 << 4 | b5);
      if (b2 == arrayOfByte.length) {
        paramOutputStream.write(arrayOfByte);
        b2 = 0;
      } 
      b1++;
    } 
    if (b2 > 0)
      paramOutputStream.write(arrayOfByte, 0, b2); 
    return b1;
  }
  
  byte[] decodeStrict(String paramString, int paramInt1, int paramInt2) throws IOException {
    if (null == paramString)
      throw new NullPointerException("'str' cannot be null"); 
    if (paramInt1 < 0 || paramInt2 < 0 || paramInt1 > paramString.length() - paramInt2)
      throw new IndexOutOfBoundsException("invalid offset and/or length specified"); 
    if (0 != (paramInt2 & true))
      throw new IOException("a hexadecimal encoding must have an even number of characters"); 
    int i = paramInt2 >>> 1;
    byte[] arrayOfByte = new byte[i];
    int j = paramInt1;
    for (byte b = 0; b < i; b++) {
      byte b1 = this.decodingTable[paramString.charAt(j++)];
      byte b2 = this.decodingTable[paramString.charAt(j++)];
      byte b3 = b1 << 4 | b2;
      if (b3 < 0)
        throw new IOException("invalid characters encountered in Hex string"); 
      arrayOfByte[b] = (byte)b3;
    } 
    return arrayOfByte;
  }
}
