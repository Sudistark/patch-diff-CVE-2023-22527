package org.bouncycastle.pkcs.jcajce;

import java.security.Provider;
import java.security.SecureRandom;
import javax.crypto.Mac;
import javax.crypto.spec.PBEParameterSpec;
import org.bouncycastle.asn1.ASN1ObjectIdentifier;
import org.bouncycastle.asn1.DERNull;
import org.bouncycastle.asn1.oiw.OIWObjectIdentifiers;
import org.bouncycastle.asn1.x509.AlgorithmIdentifier;
import org.bouncycastle.jcajce.PKCS12Key;
import org.bouncycastle.jcajce.util.DefaultJcaJceHelper;
import org.bouncycastle.jcajce.util.JcaJceHelper;
import org.bouncycastle.jcajce.util.NamedJcaJceHelper;
import org.bouncycastle.jcajce.util.ProviderJcaJceHelper;
import org.bouncycastle.operator.MacCalculator;
import org.bouncycastle.operator.OperatorCreationException;
import org.bouncycastle.pkcs.PKCS12MacCalculatorBuilder;

public class JcePKCS12MacCalculatorBuilder implements PKCS12MacCalculatorBuilder {
  private JcaJceHelper helper = new DefaultJcaJceHelper();
  
  private ASN1ObjectIdentifier algorithm;
  
  private SecureRandom random;
  
  private int saltLength;
  
  private int iterationCount = 1024;
  
  public JcePKCS12MacCalculatorBuilder() { this(OIWObjectIdentifiers.idSHA1); }
  
  public JcePKCS12MacCalculatorBuilder(ASN1ObjectIdentifier paramASN1ObjectIdentifier) { this.algorithm = paramASN1ObjectIdentifier; }
  
  public JcePKCS12MacCalculatorBuilder setProvider(Provider paramProvider) {
    this.helper = new ProviderJcaJceHelper(paramProvider);
    return this;
  }
  
  public JcePKCS12MacCalculatorBuilder setProvider(String paramString) {
    this.helper = new NamedJcaJceHelper(paramString);
    return this;
  }
  
  public JcePKCS12MacCalculatorBuilder setIterationCount(int paramInt) {
    this.iterationCount = paramInt;
    return this;
  }
  
  public AlgorithmIdentifier getDigestAlgorithmIdentifier() { return new AlgorithmIdentifier(this.algorithm, DERNull.INSTANCE); }
  
  public MacCalculator build(char[] paramArrayOfChar) throws OperatorCreationException {
    if (this.random == null)
      this.random = new SecureRandom(); 
    try {
      Mac mac = this.helper.createMac(this.algorithm.getId());
      this.saltLength = mac.getMacLength();
      byte[] arrayOfByte = new byte[this.saltLength];
      this.random.nextBytes(arrayOfByte);
      PBEParameterSpec pBEParameterSpec = new PBEParameterSpec(arrayOfByte, this.iterationCount);
      PKCS12Key pKCS12Key = new PKCS12Key(paramArrayOfChar);
      mac.init(pKCS12Key, pBEParameterSpec);
      return new Object(this, arrayOfByte, mac, pKCS12Key);
    } catch (Exception exception) {
      throw new OperatorCreationException("unable to create MAC calculator: " + exception.getMessage(), exception);
    } 
  }
}
