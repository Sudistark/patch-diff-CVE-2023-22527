package org.bouncycastle.cms;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.HashMap;
import org.bouncycastle.asn1.ASN1EncodableVector;
import org.bouncycastle.asn1.BEROctetString;
import org.bouncycastle.asn1.DEROctetString;
import org.bouncycastle.asn1.DERSet;
import org.bouncycastle.asn1.DLSet;
import org.bouncycastle.asn1.cms.AttributeTable;
import org.bouncycastle.asn1.cms.AuthEnvelopedData;
import org.bouncycastle.asn1.cms.CMSObjectIdentifiers;
import org.bouncycastle.asn1.cms.ContentInfo;
import org.bouncycastle.asn1.cms.EncryptedContentInfo;
import org.bouncycastle.asn1.x509.AlgorithmIdentifier;
import org.bouncycastle.operator.GenericKey;
import org.bouncycastle.operator.OutputAEADEncryptor;

public class CMSAuthEnvelopedDataGenerator extends CMSAuthEnvelopedGenerator {
  private CMSAuthEnvelopedData doGenerate(CMSTypedData paramCMSTypedData, OutputAEADEncryptor paramOutputAEADEncryptor) throws CMSException {
    ASN1EncodableVector aSN1EncodableVector = new ASN1EncodableVector();
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    DERSet dERSet = null;
    try {
      OutputStream outputStream = paramOutputAEADEncryptor.getOutputStream(byteArrayOutputStream);
      paramCMSTypedData.write(outputStream);
      if (this.authAttrsGenerator != null) {
        AttributeTable attributeTable = this.authAttrsGenerator.getAttributes(new HashMap());
        dERSet = new DERSet(attributeTable.toASN1EncodableVector());
        paramOutputAEADEncryptor.getAADStream().write(dERSet.getEncoded("DER"));
      } 
      outputStream.close();
    } catch (IOException iOException) {
      throw new CMSException("unable to process authenticated content: " + iOException.getMessage(), iOException);
    } 
    byte[] arrayOfByte1 = byteArrayOutputStream.toByteArray();
    byte[] arrayOfByte2 = paramOutputAEADEncryptor.getMAC();
    AlgorithmIdentifier algorithmIdentifier = paramOutputAEADEncryptor.getAlgorithmIdentifier();
    BEROctetString bEROctetString = new BEROctetString(arrayOfByte1);
    GenericKey genericKey = paramOutputAEADEncryptor.getKey();
    for (RecipientInfoGenerator recipientInfoGenerator : this.recipientInfoGenerators)
      aSN1EncodableVector.add(recipientInfoGenerator.generate(genericKey)); 
    EncryptedContentInfo encryptedContentInfo = new EncryptedContentInfo(paramCMSTypedData.getContentType(), algorithmIdentifier, bEROctetString);
    DLSet dLSet = null;
    if (this.unauthAttrsGenerator != null) {
      AttributeTable attributeTable = this.unauthAttrsGenerator.getAttributes(new HashMap());
      dLSet = new DLSet(attributeTable.toASN1EncodableVector());
    } 
    ContentInfo contentInfo = new ContentInfo(CMSObjectIdentifiers.authEnvelopedData, new AuthEnvelopedData(this.originatorInfo, new DERSet(aSN1EncodableVector), encryptedContentInfo, dERSet, new DEROctetString(arrayOfByte2), dLSet));
    return new CMSAuthEnvelopedData(contentInfo);
  }
  
  public CMSAuthEnvelopedData generate(CMSTypedData paramCMSTypedData, OutputAEADEncryptor paramOutputAEADEncryptor) throws CMSException { return doGenerate(paramCMSTypedData, paramOutputAEADEncryptor); }
}
