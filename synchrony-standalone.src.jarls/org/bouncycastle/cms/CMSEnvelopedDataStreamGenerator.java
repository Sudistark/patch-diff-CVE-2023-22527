package org.bouncycastle.cms;

import java.io.IOException;
import java.io.OutputStream;
import org.bouncycastle.asn1.ASN1EncodableVector;
import org.bouncycastle.asn1.ASN1Integer;
import org.bouncycastle.asn1.ASN1ObjectIdentifier;
import org.bouncycastle.asn1.BERSequenceGenerator;
import org.bouncycastle.asn1.BERSet;
import org.bouncycastle.asn1.DERSet;
import org.bouncycastle.asn1.DERTaggedObject;
import org.bouncycastle.asn1.DLSet;
import org.bouncycastle.asn1.cms.CMSObjectIdentifiers;
import org.bouncycastle.asn1.cms.EnvelopedData;
import org.bouncycastle.asn1.x509.AlgorithmIdentifier;
import org.bouncycastle.operator.GenericKey;
import org.bouncycastle.operator.OutputEncryptor;

public class CMSEnvelopedDataStreamGenerator extends CMSEnvelopedGenerator {
  private int _bufferSize;
  
  private boolean _berEncodeRecipientSet;
  
  public void setBufferSize(int paramInt) { this._bufferSize = paramInt; }
  
  public void setBEREncodeRecipients(boolean paramBoolean) { this._berEncodeRecipientSet = paramBoolean; }
  
  private ASN1Integer getVersion(ASN1EncodableVector paramASN1EncodableVector) { return (this.unprotectedAttributeGenerator != null) ? new ASN1Integer(EnvelopedData.calculateVersion(this.originatorInfo, new DLSet(paramASN1EncodableVector), new DLSet())) : new ASN1Integer(EnvelopedData.calculateVersion(this.originatorInfo, new DLSet(paramASN1EncodableVector), null)); }
  
  private OutputStream doOpen(ASN1ObjectIdentifier paramASN1ObjectIdentifier, OutputStream paramOutputStream, OutputEncryptor paramOutputEncryptor) throws IOException, CMSException {
    ASN1EncodableVector aSN1EncodableVector = new ASN1EncodableVector();
    GenericKey genericKey = paramOutputEncryptor.getKey();
    for (RecipientInfoGenerator recipientInfoGenerator : this.recipientInfoGenerators)
      aSN1EncodableVector.add(recipientInfoGenerator.generate(genericKey)); 
    return open(paramASN1ObjectIdentifier, paramOutputStream, aSN1EncodableVector, paramOutputEncryptor);
  }
  
  protected OutputStream open(ASN1ObjectIdentifier paramASN1ObjectIdentifier, OutputStream paramOutputStream, ASN1EncodableVector paramASN1EncodableVector, OutputEncryptor paramOutputEncryptor) throws IOException {
    BERSequenceGenerator bERSequenceGenerator1 = new BERSequenceGenerator(paramOutputStream);
    bERSequenceGenerator1.addObject(CMSObjectIdentifiers.envelopedData);
    BERSequenceGenerator bERSequenceGenerator2 = new BERSequenceGenerator(bERSequenceGenerator1.getRawOutputStream(), 0, true);
    bERSequenceGenerator2.addObject(getVersion(paramASN1EncodableVector));
    if (this.originatorInfo != null)
      bERSequenceGenerator2.addObject(new DERTaggedObject(false, 0, this.originatorInfo)); 
    if (this._berEncodeRecipientSet) {
      bERSequenceGenerator2.getRawOutputStream().write((new BERSet(paramASN1EncodableVector)).getEncoded());
    } else {
      bERSequenceGenerator2.getRawOutputStream().write((new DERSet(paramASN1EncodableVector)).getEncoded());
    } 
    BERSequenceGenerator bERSequenceGenerator3 = new BERSequenceGenerator(bERSequenceGenerator2.getRawOutputStream());
    bERSequenceGenerator3.addObject(paramASN1ObjectIdentifier);
    AlgorithmIdentifier algorithmIdentifier = paramOutputEncryptor.getAlgorithmIdentifier();
    bERSequenceGenerator3.getRawOutputStream().write(algorithmIdentifier.getEncoded());
    OutputStream outputStream = CMSUtils.createBEROctetOutputStream(bERSequenceGenerator3.getRawOutputStream(), 0, false, this._bufferSize);
    return new CmsEnvelopedDataOutputStream(this, paramOutputEncryptor, outputStream, bERSequenceGenerator1, bERSequenceGenerator2, bERSequenceGenerator3);
  }
  
  protected OutputStream open(OutputStream paramOutputStream, ASN1EncodableVector paramASN1EncodableVector, OutputEncryptor paramOutputEncryptor) throws CMSException {
    try {
      DERSet dERSet;
      BERSequenceGenerator bERSequenceGenerator1 = new BERSequenceGenerator(paramOutputStream);
      bERSequenceGenerator1.addObject(CMSObjectIdentifiers.envelopedData);
      BERSequenceGenerator bERSequenceGenerator2 = new BERSequenceGenerator(bERSequenceGenerator1.getRawOutputStream(), 0, true);
      if (this._berEncodeRecipientSet) {
        dERSet = new BERSet(paramASN1EncodableVector);
      } else {
        dERSet = new DERSet(paramASN1EncodableVector);
      } 
      bERSequenceGenerator2.addObject(getVersion(paramASN1EncodableVector));
      if (this.originatorInfo != null)
        bERSequenceGenerator2.addObject(new DERTaggedObject(false, 0, this.originatorInfo)); 
      bERSequenceGenerator2.getRawOutputStream().write(dERSet.getEncoded());
      BERSequenceGenerator bERSequenceGenerator3 = new BERSequenceGenerator(bERSequenceGenerator2.getRawOutputStream());
      bERSequenceGenerator3.addObject(CMSObjectIdentifiers.data);
      AlgorithmIdentifier algorithmIdentifier = paramOutputEncryptor.getAlgorithmIdentifier();
      bERSequenceGenerator3.getRawOutputStream().write(algorithmIdentifier.getEncoded());
      OutputStream outputStream = CMSUtils.createBEROctetOutputStream(bERSequenceGenerator3.getRawOutputStream(), 0, false, this._bufferSize);
      return new CmsEnvelopedDataOutputStream(this, paramOutputEncryptor, outputStream, bERSequenceGenerator1, bERSequenceGenerator2, bERSequenceGenerator3);
    } catch (IOException iOException) {
      throw new CMSException("exception decoding algorithm parameters.", iOException);
    } 
  }
  
  public OutputStream open(OutputStream paramOutputStream, OutputEncryptor paramOutputEncryptor) throws CMSException, IOException { return doOpen(new ASN1ObjectIdentifier(CMSObjectIdentifiers.data.getId()), paramOutputStream, paramOutputEncryptor); }
  
  public OutputStream open(ASN1ObjectIdentifier paramASN1ObjectIdentifier, OutputStream paramOutputStream, OutputEncryptor paramOutputEncryptor) throws IOException, CMSException { return doOpen(paramASN1ObjectIdentifier, paramOutputStream, paramOutputEncryptor); }
}
