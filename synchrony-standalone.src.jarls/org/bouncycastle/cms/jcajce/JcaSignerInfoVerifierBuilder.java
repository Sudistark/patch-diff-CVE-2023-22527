package org.bouncycastle.cms.jcajce;

import java.security.Provider;
import java.security.PublicKey;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import org.bouncycastle.cert.X509CertificateHolder;
import org.bouncycastle.cms.CMSSignatureAlgorithmNameGenerator;
import org.bouncycastle.cms.DefaultCMSSignatureAlgorithmNameGenerator;
import org.bouncycastle.cms.SignerInformationVerifier;
import org.bouncycastle.operator.DefaultSignatureAlgorithmIdentifierFinder;
import org.bouncycastle.operator.DigestCalculatorProvider;
import org.bouncycastle.operator.OperatorCreationException;
import org.bouncycastle.operator.SignatureAlgorithmIdentifierFinder;

public class JcaSignerInfoVerifierBuilder {
  private Helper helper = new Helper(this, null);
  
  private DigestCalculatorProvider digestProvider;
  
  private CMSSignatureAlgorithmNameGenerator sigAlgNameGen = new DefaultCMSSignatureAlgorithmNameGenerator();
  
  private SignatureAlgorithmIdentifierFinder sigAlgIDFinder = new DefaultSignatureAlgorithmIdentifierFinder();
  
  public JcaSignerInfoVerifierBuilder(DigestCalculatorProvider paramDigestCalculatorProvider) { this.digestProvider = paramDigestCalculatorProvider; }
  
  public JcaSignerInfoVerifierBuilder setProvider(Provider paramProvider) {
    this.helper = new ProviderHelper(this, paramProvider);
    return this;
  }
  
  public JcaSignerInfoVerifierBuilder setProvider(String paramString) {
    this.helper = new NamedHelper(this, paramString);
    return this;
  }
  
  public JcaSignerInfoVerifierBuilder setSignatureAlgorithmNameGenerator(CMSSignatureAlgorithmNameGenerator paramCMSSignatureAlgorithmNameGenerator) {
    this.sigAlgNameGen = paramCMSSignatureAlgorithmNameGenerator;
    return this;
  }
  
  public JcaSignerInfoVerifierBuilder setSignatureAlgorithmFinder(SignatureAlgorithmIdentifierFinder paramSignatureAlgorithmIdentifierFinder) {
    this.sigAlgIDFinder = paramSignatureAlgorithmIdentifierFinder;
    return this;
  }
  
  public SignerInformationVerifier build(X509CertificateHolder paramX509CertificateHolder) throws OperatorCreationException, CertificateException { return new SignerInformationVerifier(this.sigAlgNameGen, this.sigAlgIDFinder, this.helper.createContentVerifierProvider(paramX509CertificateHolder), this.digestProvider); }
  
  public SignerInformationVerifier build(X509Certificate paramX509Certificate) throws OperatorCreationException { return new SignerInformationVerifier(this.sigAlgNameGen, this.sigAlgIDFinder, this.helper.createContentVerifierProvider(paramX509Certificate), this.digestProvider); }
  
  public SignerInformationVerifier build(PublicKey paramPublicKey) throws OperatorCreationException { return new SignerInformationVerifier(this.sigAlgNameGen, this.sigAlgIDFinder, this.helper.createContentVerifierProvider(paramPublicKey), this.digestProvider); }
}
