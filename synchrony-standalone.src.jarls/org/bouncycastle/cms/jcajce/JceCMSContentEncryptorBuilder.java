package org.bouncycastle.cms.jcajce;

import java.security.AccessController;
import java.security.AlgorithmParameters;
import java.security.Provider;
import java.security.SecureRandom;
import org.bouncycastle.asn1.ASN1Encodable;
import org.bouncycastle.asn1.ASN1ObjectIdentifier;
import org.bouncycastle.asn1.DERNull;
import org.bouncycastle.asn1.oiw.OIWObjectIdentifiers;
import org.bouncycastle.asn1.pkcs.PKCSObjectIdentifiers;
import org.bouncycastle.asn1.x509.AlgorithmIdentifier;
import org.bouncycastle.cms.CMSException;
import org.bouncycastle.operator.DefaultSecretKeySizeProvider;
import org.bouncycastle.operator.OutputEncryptor;
import org.bouncycastle.operator.SecretKeySizeProvider;

public class JceCMSContentEncryptorBuilder {
  private static final SecretKeySizeProvider KEY_SIZE_PROVIDER = DefaultSecretKeySizeProvider.INSTANCE;
  
  private final ASN1ObjectIdentifier encryptionOID;
  
  private final int keySize;
  
  private EnvelopedDataHelper helper = new EnvelopedDataHelper(new DefaultJcaJceExtHelper());
  
  private SecureRandom random;
  
  private AlgorithmIdentifier algorithmIdentifier;
  
  private AlgorithmParameters algorithmParameters;
  
  public JceCMSContentEncryptorBuilder(ASN1ObjectIdentifier paramASN1ObjectIdentifier) { this(paramASN1ObjectIdentifier, KEY_SIZE_PROVIDER.getKeySize(paramASN1ObjectIdentifier)); }
  
  public JceCMSContentEncryptorBuilder(ASN1ObjectIdentifier paramASN1ObjectIdentifier, int paramInt) {
    this.encryptionOID = paramASN1ObjectIdentifier;
    int i = KEY_SIZE_PROVIDER.getKeySize(paramASN1ObjectIdentifier);
    if (paramASN1ObjectIdentifier.equals(PKCSObjectIdentifiers.des_EDE3_CBC)) {
      if (paramInt != 168 && paramInt != i)
        throw new IllegalArgumentException("incorrect keySize for encryptionOID passed to builder."); 
      this.keySize = 168;
    } else if (paramASN1ObjectIdentifier.equals(OIWObjectIdentifiers.desCBC)) {
      if (paramInt != 56 && paramInt != i)
        throw new IllegalArgumentException("incorrect keySize for encryptionOID passed to builder."); 
      this.keySize = 56;
    } else {
      if (i > 0 && i != paramInt)
        throw new IllegalArgumentException("incorrect keySize for encryptionOID passed to builder."); 
      this.keySize = paramInt;
    } 
  }
  
  public JceCMSContentEncryptorBuilder(AlgorithmIdentifier paramAlgorithmIdentifier) {
    this(paramAlgorithmIdentifier.getAlgorithm(), KEY_SIZE_PROVIDER.getKeySize(paramAlgorithmIdentifier.getAlgorithm()));
    this.algorithmIdentifier = paramAlgorithmIdentifier;
  }
  
  public JceCMSContentEncryptorBuilder setProvider(Provider paramProvider) {
    this.helper = new EnvelopedDataHelper(new ProviderJcaJceExtHelper(paramProvider));
    return this;
  }
  
  public JceCMSContentEncryptorBuilder setProvider(String paramString) {
    this.helper = new EnvelopedDataHelper(new NamedJcaJceExtHelper(paramString));
    return this;
  }
  
  public JceCMSContentEncryptorBuilder setSecureRandom(SecureRandom paramSecureRandom) {
    this.random = paramSecureRandom;
    return this;
  }
  
  public JceCMSContentEncryptorBuilder setAlgorithmParameters(AlgorithmParameters paramAlgorithmParameters) {
    this.algorithmParameters = paramAlgorithmParameters;
    return this;
  }
  
  public OutputEncryptor build() throws CMSException {
    if (this.algorithmParameters != null)
      return this.helper.isAuthEnveloped(this.encryptionOID) ? new CMSAuthOutputEncryptor(this, this.encryptionOID, this.keySize, this.algorithmParameters, this.random) : new CMSOutputEncryptor(this, this.encryptionOID, this.keySize, this.algorithmParameters, this.random); 
    if (this.algorithmIdentifier != null) {
      ASN1Encodable aSN1Encodable = this.algorithmIdentifier.getParameters();
      if (aSN1Encodable != null && !aSN1Encodable.equals(DERNull.INSTANCE))
        try {
          this.algorithmParameters = this.helper.createAlgorithmParameters(this.algorithmIdentifier.getAlgorithm());
          this.algorithmParameters.init(aSN1Encodable.toASN1Primitive().getEncoded());
        } catch (Exception exception) {
          throw new CMSException("unable to process provided algorithmIdentifier: " + exception.toString(), exception);
        }  
    } 
    return this.helper.isAuthEnveloped(this.encryptionOID) ? new CMSAuthOutputEncryptor(this, this.encryptionOID, this.keySize, this.algorithmParameters, this.random) : new CMSOutputEncryptor(this, this.encryptionOID, this.keySize, this.algorithmParameters, this.random);
  }
  
  private static boolean checkForAEAD() { return ((Boolean)AccessController.doPrivileged(new Object())).booleanValue(); }
}
