package org.bouncycastle.cms;

import java.io.IOException;
import java.io.OutputStream;
import org.bouncycastle.asn1.ASN1Integer;
import org.bouncycastle.asn1.ASN1ObjectIdentifier;
import org.bouncycastle.asn1.BERSequenceGenerator;
import org.bouncycastle.asn1.cms.CMSObjectIdentifiers;
import org.bouncycastle.operator.OutputCompressor;

public class CMSCompressedDataStreamGenerator {
  public static final String ZLIB = "1.2.840.113549.1.9.16.3.8";
  
  private int _bufferSize;
  
  public void setBufferSize(int paramInt) { this._bufferSize = paramInt; }
  
  public OutputStream open(OutputStream paramOutputStream, OutputCompressor paramOutputCompressor) throws IOException { return open(CMSObjectIdentifiers.data, paramOutputStream, paramOutputCompressor); }
  
  public OutputStream open(ASN1ObjectIdentifier paramASN1ObjectIdentifier, OutputStream paramOutputStream, OutputCompressor paramOutputCompressor) throws IOException {
    BERSequenceGenerator bERSequenceGenerator1 = new BERSequenceGenerator(paramOutputStream);
    bERSequenceGenerator1.addObject(CMSObjectIdentifiers.compressedData);
    BERSequenceGenerator bERSequenceGenerator2 = new BERSequenceGenerator(bERSequenceGenerator1.getRawOutputStream(), 0, true);
    bERSequenceGenerator2.addObject(new ASN1Integer(0L));
    bERSequenceGenerator2.addObject(paramOutputCompressor.getAlgorithmIdentifier());
    BERSequenceGenerator bERSequenceGenerator3 = new BERSequenceGenerator(bERSequenceGenerator2.getRawOutputStream());
    bERSequenceGenerator3.addObject(paramASN1ObjectIdentifier);
    OutputStream outputStream = CMSUtils.createBEROctetOutputStream(bERSequenceGenerator3.getRawOutputStream(), 0, true, this._bufferSize);
    return new CmsCompressedOutputStream(this, paramOutputCompressor.getOutputStream(outputStream), bERSequenceGenerator1, bERSequenceGenerator2, bERSequenceGenerator3);
  }
}
