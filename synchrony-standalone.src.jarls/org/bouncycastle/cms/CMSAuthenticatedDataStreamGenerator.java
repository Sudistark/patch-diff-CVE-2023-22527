package org.bouncycastle.cms;

import java.io.IOException;
import java.io.OutputStream;
import org.bouncycastle.asn1.ASN1EncodableVector;
import org.bouncycastle.asn1.ASN1Integer;
import org.bouncycastle.asn1.ASN1ObjectIdentifier;
import org.bouncycastle.asn1.BERSequenceGenerator;
import org.bouncycastle.asn1.BERSet;
import org.bouncycastle.asn1.DERSet;
import org.bouncycastle.asn1.DERTaggedObject;
import org.bouncycastle.asn1.cms.AuthenticatedData;
import org.bouncycastle.asn1.cms.CMSObjectIdentifiers;
import org.bouncycastle.asn1.x509.AlgorithmIdentifier;
import org.bouncycastle.operator.DigestCalculator;
import org.bouncycastle.operator.MacCalculator;
import org.bouncycastle.util.io.TeeOutputStream;

public class CMSAuthenticatedDataStreamGenerator extends CMSAuthenticatedGenerator {
  private int bufferSize;
  
  private boolean berEncodeRecipientSet;
  
  private MacCalculator macCalculator;
  
  public void setBufferSize(int paramInt) { this.bufferSize = paramInt; }
  
  public void setBEREncodeRecipients(boolean paramBoolean) { this.berEncodeRecipientSet = paramBoolean; }
  
  public OutputStream open(OutputStream paramOutputStream, MacCalculator paramMacCalculator) throws CMSException { return open(CMSObjectIdentifiers.data, paramOutputStream, paramMacCalculator); }
  
  public OutputStream open(OutputStream paramOutputStream, MacCalculator paramMacCalculator, DigestCalculator paramDigestCalculator) throws CMSException { return open(CMSObjectIdentifiers.data, paramOutputStream, paramMacCalculator, paramDigestCalculator); }
  
  public OutputStream open(ASN1ObjectIdentifier paramASN1ObjectIdentifier, OutputStream paramOutputStream, MacCalculator paramMacCalculator) throws CMSException { return open(paramASN1ObjectIdentifier, paramOutputStream, paramMacCalculator, null); }
  
  public OutputStream open(ASN1ObjectIdentifier paramASN1ObjectIdentifier, OutputStream paramOutputStream, MacCalculator paramMacCalculator, DigestCalculator paramDigestCalculator) throws CMSException {
    this.macCalculator = paramMacCalculator;
    try {
      TeeOutputStream teeOutputStream;
      ASN1EncodableVector aSN1EncodableVector = new ASN1EncodableVector();
      for (RecipientInfoGenerator recipientInfoGenerator : this.recipientInfoGenerators)
        aSN1EncodableVector.add(recipientInfoGenerator.generate(paramMacCalculator.getKey())); 
      BERSequenceGenerator bERSequenceGenerator1 = new BERSequenceGenerator(paramOutputStream);
      bERSequenceGenerator1.addObject(CMSObjectIdentifiers.authenticatedData);
      BERSequenceGenerator bERSequenceGenerator2 = new BERSequenceGenerator(bERSequenceGenerator1.getRawOutputStream(), 0, true);
      bERSequenceGenerator2.addObject(new ASN1Integer(AuthenticatedData.calculateVersion(this.originatorInfo)));
      if (this.originatorInfo != null)
        bERSequenceGenerator2.addObject(new DERTaggedObject(false, 0, this.originatorInfo)); 
      if (this.berEncodeRecipientSet) {
        bERSequenceGenerator2.getRawOutputStream().write((new BERSet(aSN1EncodableVector)).getEncoded());
      } else {
        bERSequenceGenerator2.getRawOutputStream().write((new DERSet(aSN1EncodableVector)).getEncoded());
      } 
      AlgorithmIdentifier algorithmIdentifier = paramMacCalculator.getAlgorithmIdentifier();
      bERSequenceGenerator2.getRawOutputStream().write(algorithmIdentifier.getEncoded());
      if (paramDigestCalculator != null)
        bERSequenceGenerator2.addObject(new DERTaggedObject(false, 1, paramDigestCalculator.getAlgorithmIdentifier())); 
      BERSequenceGenerator bERSequenceGenerator3 = new BERSequenceGenerator(bERSequenceGenerator2.getRawOutputStream());
      bERSequenceGenerator3.addObject(paramASN1ObjectIdentifier);
      OutputStream outputStream = CMSUtils.createBEROctetOutputStream(bERSequenceGenerator3.getRawOutputStream(), 0, false, this.bufferSize);
      if (paramDigestCalculator != null) {
        teeOutputStream = new TeeOutputStream(outputStream, paramDigestCalculator.getOutputStream());
      } else {
        teeOutputStream = new TeeOutputStream(outputStream, paramMacCalculator.getOutputStream());
      } 
      return new CmsAuthenticatedDataOutputStream(this, paramMacCalculator, paramDigestCalculator, paramASN1ObjectIdentifier, teeOutputStream, bERSequenceGenerator1, bERSequenceGenerator2, bERSequenceGenerator3);
    } catch (IOException iOException) {
      throw new CMSException("exception decoding algorithm parameters.", iOException);
    } 
  }
}
