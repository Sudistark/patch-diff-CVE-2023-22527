package org.bouncycastle.cms;

import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import org.bouncycastle.asn1.ASN1Integer;
import org.bouncycastle.asn1.ASN1ObjectIdentifier;
import org.bouncycastle.asn1.ASN1TaggedObject;
import org.bouncycastle.asn1.BERSequenceGenerator;
import org.bouncycastle.asn1.cms.CMSObjectIdentifiers;
import org.bouncycastle.asn1.cms.SignerInfo;
import org.bouncycastle.asn1.x509.AlgorithmIdentifier;

public class CMSSignedDataStreamGenerator extends CMSSignedGenerator {
  private int _bufferSize;
  
  public void setBufferSize(int paramInt) { this._bufferSize = paramInt; }
  
  public OutputStream open(OutputStream paramOutputStream) throws IOException { return open(paramOutputStream, false); }
  
  public OutputStream open(OutputStream paramOutputStream, boolean paramBoolean) throws IOException { return open(CMSObjectIdentifiers.data, paramOutputStream, paramBoolean); }
  
  public OutputStream open(OutputStream paramOutputStream1, boolean paramBoolean, OutputStream paramOutputStream2) throws IOException { return open(CMSObjectIdentifiers.data, paramOutputStream1, paramBoolean, paramOutputStream2); }
  
  public OutputStream open(ASN1ObjectIdentifier paramASN1ObjectIdentifier, OutputStream paramOutputStream, boolean paramBoolean) throws IOException { return open(paramASN1ObjectIdentifier, paramOutputStream, paramBoolean, null); }
  
  public OutputStream open(ASN1ObjectIdentifier paramASN1ObjectIdentifier, OutputStream paramOutputStream1, boolean paramBoolean, OutputStream paramOutputStream2) throws IOException {
    BERSequenceGenerator bERSequenceGenerator1 = new BERSequenceGenerator(paramOutputStream1);
    bERSequenceGenerator1.addObject(CMSObjectIdentifiers.signedData);
    BERSequenceGenerator bERSequenceGenerator2 = new BERSequenceGenerator(bERSequenceGenerator1.getRawOutputStream(), 0, true);
    bERSequenceGenerator2.addObject(calculateVersion(paramASN1ObjectIdentifier));
    HashSet hashSet = new HashSet();
    for (SignerInformation signerInformation : this._signers)
      CMSUtils.addDigestAlgs(hashSet, signerInformation, this.digestAlgIdFinder); 
    for (SignerInfoGenerator signerInfoGenerator : this.signerGens)
      hashSet.add(signerInfoGenerator.getDigestAlgorithm()); 
    bERSequenceGenerator2.getRawOutputStream().write(CMSUtils.convertToBERSet(hashSet).getEncoded());
    BERSequenceGenerator bERSequenceGenerator3 = new BERSequenceGenerator(bERSequenceGenerator2.getRawOutputStream());
    bERSequenceGenerator3.addObject(paramASN1ObjectIdentifier);
    OutputStream outputStream1 = paramBoolean ? CMSUtils.createBEROctetOutputStream(bERSequenceGenerator3.getRawOutputStream(), 0, true, this._bufferSize) : null;
    OutputStream outputStream2 = CMSUtils.getSafeTeeOutputStream(paramOutputStream2, outputStream1);
    OutputStream outputStream3 = CMSUtils.attachSignersToOutputStream(this.signerGens, outputStream2);
    return new CmsSignedDataOutputStream(this, outputStream3, paramASN1ObjectIdentifier, bERSequenceGenerator1, bERSequenceGenerator2, bERSequenceGenerator3);
  }
  
  public List<AlgorithmIdentifier> getDigestAlgorithms() {
    ArrayList arrayList = new ArrayList();
    for (SignerInformation signerInformation : this._signers) {
      AlgorithmIdentifier algorithmIdentifier = CMSSignedHelper.INSTANCE.fixDigestAlgID(signerInformation.getDigestAlgorithmID(), this.digestAlgIdFinder);
      arrayList.add(algorithmIdentifier);
    } 
    for (SignerInfoGenerator signerInfoGenerator : this.signerGens)
      arrayList.add(signerInfoGenerator.getDigestAlgorithm()); 
    return arrayList;
  }
  
  private ASN1Integer calculateVersion(ASN1ObjectIdentifier paramASN1ObjectIdentifier) {
    boolean bool1 = false;
    boolean bool2 = false;
    boolean bool3 = false;
    boolean bool4 = false;
    if (this.certs != null)
      for (Object object : this.certs) {
        if (object instanceof ASN1TaggedObject) {
          ASN1TaggedObject aSN1TaggedObject = (ASN1TaggedObject)object;
          if (aSN1TaggedObject.getTagNo() == 1) {
            bool3 = true;
            continue;
          } 
          if (aSN1TaggedObject.getTagNo() == 2) {
            bool4 = true;
            continue;
          } 
          if (aSN1TaggedObject.getTagNo() == 3)
            bool1 = true; 
        } 
      }  
    if (bool1)
      return new ASN1Integer(5L); 
    if (this.crls != null)
      for (Object object : this.crls) {
        if (object instanceof ASN1TaggedObject)
          bool2 = true; 
      }  
    return bool2 ? new ASN1Integer(5L) : (bool4 ? new ASN1Integer(4L) : (bool3 ? new ASN1Integer(3L) : (checkForVersion3(this._signers, this.signerGens) ? new ASN1Integer(3L) : (!CMSObjectIdentifiers.data.equals(paramASN1ObjectIdentifier) ? new ASN1Integer(3L) : new ASN1Integer(1L)))));
  }
  
  private boolean checkForVersion3(List paramList1, List paramList2) {
    null = paramList1.iterator();
    while (null.hasNext()) {
      SignerInfo signerInfo = SignerInfo.getInstance(((SignerInformation)null.next()).toASN1Structure());
      if (signerInfo.getVersion().intValueExact() == 3)
        return true; 
    } 
    for (SignerInfoGenerator signerInfoGenerator : paramList2) {
      if (signerInfoGenerator.getGeneratedVersion() == 3)
        return true; 
    } 
    return false;
  }
}
