package org.bouncycastle.cert.crmf.jcajce;

import java.security.Provider;
import java.security.SecureRandom;
import org.bouncycastle.asn1.ASN1ObjectIdentifier;
import org.bouncycastle.cert.crmf.CRMFException;
import org.bouncycastle.jcajce.util.DefaultJcaJceHelper;
import org.bouncycastle.jcajce.util.NamedJcaJceHelper;
import org.bouncycastle.jcajce.util.ProviderJcaJceHelper;
import org.bouncycastle.operator.DefaultSecretKeySizeProvider;
import org.bouncycastle.operator.OutputEncryptor;
import org.bouncycastle.operator.SecretKeySizeProvider;

public class JceCRMFEncryptorBuilder {
  private static final SecretKeySizeProvider KEY_SIZE_PROVIDER = DefaultSecretKeySizeProvider.INSTANCE;
  
  private final ASN1ObjectIdentifier encryptionOID;
  
  private final int keySize;
  
  private CRMFHelper helper = new CRMFHelper(new DefaultJcaJceHelper());
  
  private SecureRandom random;
  
  public JceCRMFEncryptorBuilder(ASN1ObjectIdentifier paramASN1ObjectIdentifier) { this(paramASN1ObjectIdentifier, -1); }
  
  public JceCRMFEncryptorBuilder(ASN1ObjectIdentifier paramASN1ObjectIdentifier, int paramInt) {
    this.encryptionOID = paramASN1ObjectIdentifier;
    this.keySize = paramInt;
  }
  
  public JceCRMFEncryptorBuilder setProvider(Provider paramProvider) {
    this.helper = new CRMFHelper(new ProviderJcaJceHelper(paramProvider));
    return this;
  }
  
  public JceCRMFEncryptorBuilder setProvider(String paramString) {
    this.helper = new CRMFHelper(new NamedJcaJceHelper(paramString));
    return this;
  }
  
  public JceCRMFEncryptorBuilder setSecureRandom(SecureRandom paramSecureRandom) {
    this.random = paramSecureRandom;
    return this;
  }
  
  public OutputEncryptor build() throws CRMFException { return new CRMFOutputEncryptor(this, this.encryptionOID, this.keySize, this.random); }
}
