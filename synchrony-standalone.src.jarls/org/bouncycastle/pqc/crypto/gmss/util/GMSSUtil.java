package org.bouncycastle.pqc.crypto.gmss.util;

public class GMSSUtil {
  public byte[] intToBytesLittleEndian(int paramInt) {
    byte[] arrayOfByte = new byte[4];
    arrayOfByte[0] = (byte)(paramInt & 0xFF);
    arrayOfByte[1] = (byte)(paramInt >> 8 & 0xFF);
    arrayOfByte[2] = (byte)(paramInt >> 16 & 0xFF);
    arrayOfByte[3] = (byte)(paramInt >> 24 & 0xFF);
    return arrayOfByte;
  }
  
  public int bytesToIntLittleEndian(byte[] paramArrayOfByte) { return paramArrayOfByte[0] & 0xFF | (paramArrayOfByte[1] & 0xFF) << 8 | (paramArrayOfByte[2] & 0xFF) << 16 | (paramArrayOfByte[3] & 0xFF) << 24; }
  
  public int bytesToIntLittleEndian(byte[] paramArrayOfByte, int paramInt) { return paramArrayOfByte[paramInt++] & 0xFF | (paramArrayOfByte[paramInt++] & 0xFF) << 8 | (paramArrayOfByte[paramInt++] & 0xFF) << 16 | (paramArrayOfByte[paramInt] & 0xFF) << 24; }
  
  public byte[] concatenateArray(byte[][] paramArrayOfByte) {
    byte[] arrayOfByte = new byte[paramArrayOfByte.length * paramArrayOfByte[0].length];
    int i = 0;
    for (byte b = 0; b < paramArrayOfByte.length; b++) {
      System.arraycopy(paramArrayOfByte[b], 0, arrayOfByte, i, paramArrayOfByte[b].length);
      i += paramArrayOfByte[b].length;
    } 
    return arrayOfByte;
  }
  
  public void printArray(String paramString, byte[][] paramArrayOfByte) {
    System.out.println(paramString);
    byte b1 = 0;
    for (byte b2 = 0; b2 < paramArrayOfByte.length; b2++) {
      for (byte b = 0; b < paramArrayOfByte[0].length; b++) {
        System.out.println(b1 + "; " + paramArrayOfByte[b2][b]);
        b1++;
      } 
    } 
  }
  
  public void printArray(String paramString, byte[] paramArrayOfByte) {
    System.out.println(paramString);
    byte b1 = 0;
    for (byte b2 = 0; b2 < paramArrayOfByte.length; b2++) {
      System.out.println(b1 + "; " + paramArrayOfByte[b2]);
      b1++;
    } 
  }
  
  public boolean testPowerOfTwo(int paramInt) {
    boolean bool;
    for (bool = true; bool < paramInt; bool <<= true);
    return (paramInt == bool);
  }
  
  public int getLog(int paramInt) {
    byte b1 = 1;
    byte b2 = 2;
    while (b2 < paramInt) {
      b2 <<= 1;
      b1++;
    } 
    return b1;
  }
}
