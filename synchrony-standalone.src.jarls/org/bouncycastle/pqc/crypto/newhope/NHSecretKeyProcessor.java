package org.bouncycastle.pqc.crypto.newhope;

import org.bouncycastle.crypto.Xof;
import org.bouncycastle.crypto.digests.SHAKEDigest;
import org.bouncycastle.util.Arrays;

public class NHSecretKeyProcessor {
  private final Xof xof = new SHAKEDigest(256);
  
  private NHSecretKeyProcessor(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2) {
    this.xof.update(paramArrayOfByte1, 0, paramArrayOfByte1.length);
    if (paramArrayOfByte2 != null)
      this.xof.update(paramArrayOfByte2, 0, paramArrayOfByte2.length); 
    Arrays.fill(paramArrayOfByte1, (byte)0);
  }
  
  public byte[] processKey(byte[] paramArrayOfByte) {
    byte[] arrayOfByte = new byte[paramArrayOfByte.length];
    this.xof.doFinal(arrayOfByte, 0, arrayOfByte.length);
    xor(paramArrayOfByte, arrayOfByte);
    Arrays.fill(arrayOfByte, (byte)0);
    return paramArrayOfByte;
  }
  
  private static void xor(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2) {
    for (byte b = 0; b != paramArrayOfByte1.length; b++)
      paramArrayOfByte1[b] = (byte)(paramArrayOfByte1[b] ^ paramArrayOfByte2[b]); 
  }
}
