package org.bouncycastle.pqc.jcajce.provider.util;

import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.InvalidParameterException;
import java.security.Key;
import java.security.SecureRandom;
import java.security.spec.AlgorithmParameterSpec;
import javax.crypto.ShortBufferException;
import org.bouncycastle.crypto.CryptoServicesRegistrar;

public abstract class AsymmetricHybridCipher extends CipherSpiExt {
  protected AlgorithmParameterSpec paramSpec;
  
  protected final void setMode(String paramString) {}
  
  protected final void setPadding(String paramString) {}
  
  public final byte[] getIV() { return null; }
  
  public final int getBlockSize() { return 0; }
  
  public final AlgorithmParameterSpec getParameters() { return this.paramSpec; }
  
  public final int getOutputSize(int paramInt) { return (this.opMode == 1) ? encryptOutputSize(paramInt) : decryptOutputSize(paramInt); }
  
  public final void initEncrypt(Key paramKey) throws InvalidKeyException {
    try {
      initEncrypt(paramKey, null, CryptoServicesRegistrar.getSecureRandom());
    } catch (InvalidAlgorithmParameterException invalidAlgorithmParameterException) {
      throw new InvalidParameterException("This cipher needs algorithm parameters for initialization (cannot be null).");
    } 
  }
  
  public final void initEncrypt(Key paramKey, SecureRandom paramSecureRandom) throws InvalidKeyException {
    try {
      initEncrypt(paramKey, null, paramSecureRandom);
    } catch (InvalidAlgorithmParameterException invalidAlgorithmParameterException) {
      throw new InvalidParameterException("This cipher needs algorithm parameters for initialization (cannot be null).");
    } 
  }
  
  public final void initEncrypt(Key paramKey, AlgorithmParameterSpec paramAlgorithmParameterSpec) throws InvalidKeyException, InvalidAlgorithmParameterException { initEncrypt(paramKey, paramAlgorithmParameterSpec, CryptoServicesRegistrar.getSecureRandom()); }
  
  public final void initEncrypt(Key paramKey, AlgorithmParameterSpec paramAlgorithmParameterSpec, SecureRandom paramSecureRandom) throws InvalidKeyException, InvalidAlgorithmParameterException {
    this.opMode = 1;
    initCipherEncrypt(paramKey, paramAlgorithmParameterSpec, paramSecureRandom);
  }
  
  public final void initDecrypt(Key paramKey) throws InvalidKeyException {
    try {
      initDecrypt(paramKey, null);
    } catch (InvalidAlgorithmParameterException invalidAlgorithmParameterException) {
      throw new InvalidParameterException("This cipher needs algorithm parameters for initialization (cannot be null).");
    } 
  }
  
  public final void initDecrypt(Key paramKey, AlgorithmParameterSpec paramAlgorithmParameterSpec) throws InvalidKeyException, InvalidAlgorithmParameterException {
    this.opMode = 2;
    initCipherDecrypt(paramKey, paramAlgorithmParameterSpec);
  }
  
  public abstract byte[] update(byte[] paramArrayOfByte, int paramInt1, int paramInt2);
  
  public final int update(byte[] paramArrayOfByte1, int paramInt1, int paramInt2, byte[] paramArrayOfByte2, int paramInt3) throws ShortBufferException {
    if (paramArrayOfByte2.length < getOutputSize(paramInt2))
      throw new ShortBufferException("output"); 
    byte[] arrayOfByte = update(paramArrayOfByte1, paramInt1, paramInt2);
    System.arraycopy(arrayOfByte, 0, paramArrayOfByte2, paramInt3, arrayOfByte.length);
    return arrayOfByte.length;
  }
  
  public abstract byte[] doFinal(byte[] paramArrayOfByte, int paramInt1, int paramInt2);
  
  public final int doFinal(byte[] paramArrayOfByte1, int paramInt1, int paramInt2, byte[] paramArrayOfByte2, int paramInt3) throws ShortBufferException {
    if (paramArrayOfByte2.length < getOutputSize(paramInt2))
      throw new ShortBufferException("Output buffer too short."); 
    byte[] arrayOfByte = doFinal(paramArrayOfByte1, paramInt1, paramInt2);
    System.arraycopy(arrayOfByte, 0, paramArrayOfByte2, paramInt3, arrayOfByte.length);
    return arrayOfByte.length;
  }
  
  protected abstract int encryptOutputSize(int paramInt);
  
  protected abstract int decryptOutputSize(int paramInt);
  
  protected abstract void initCipherEncrypt(Key paramKey, AlgorithmParameterSpec paramAlgorithmParameterSpec, SecureRandom paramSecureRandom) throws InvalidKeyException, InvalidAlgorithmParameterException;
  
  protected abstract void initCipherDecrypt(Key paramKey, AlgorithmParameterSpec paramAlgorithmParameterSpec) throws InvalidKeyException, InvalidAlgorithmParameterException;
}
