package org.bouncycastle.pqc.jcajce.provider.newhope;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import org.bouncycastle.asn1.x509.SubjectPublicKeyInfo;
import org.bouncycastle.crypto.CipherParameters;
import org.bouncycastle.pqc.crypto.newhope.NHPublicKeyParameters;
import org.bouncycastle.pqc.crypto.util.PublicKeyFactory;
import org.bouncycastle.pqc.crypto.util.SubjectPublicKeyInfoFactory;
import org.bouncycastle.pqc.jcajce.interfaces.NHPublicKey;
import org.bouncycastle.util.Arrays;

public class BCNHPublicKey implements NHPublicKey {
  private static final long serialVersionUID = 1L;
  
  private NHPublicKeyParameters params;
  
  public BCNHPublicKey(NHPublicKeyParameters paramNHPublicKeyParameters) { this.params = paramNHPublicKeyParameters; }
  
  public BCNHPublicKey(SubjectPublicKeyInfo paramSubjectPublicKeyInfo) throws IOException { init(paramSubjectPublicKeyInfo); }
  
  private void init(SubjectPublicKeyInfo paramSubjectPublicKeyInfo) throws IOException { this.params = (NHPublicKeyParameters)PublicKeyFactory.createKey(paramSubjectPublicKeyInfo); }
  
  public boolean equals(Object paramObject) {
    if (paramObject == null || !(paramObject instanceof BCNHPublicKey))
      return false; 
    BCNHPublicKey bCNHPublicKey = (BCNHPublicKey)paramObject;
    return Arrays.areEqual(this.params.getPubData(), bCNHPublicKey.params.getPubData());
  }
  
  public int hashCode() { return Arrays.hashCode(this.params.getPubData()); }
  
  public final String getAlgorithm() { return "NH"; }
  
  public byte[] getEncoded() {
    try {
      SubjectPublicKeyInfo subjectPublicKeyInfo = SubjectPublicKeyInfoFactory.createSubjectPublicKeyInfo(this.params);
      return subjectPublicKeyInfo.getEncoded();
    } catch (IOException iOException) {
      return null;
    } 
  }
  
  public String getFormat() { return "X.509"; }
  
  public byte[] getPublicData() { return this.params.getPubData(); }
  
  CipherParameters getKeyParams() { return this.params; }
  
  private void readObject(ObjectInputStream paramObjectInputStream) throws IOException, ClassNotFoundException {
    paramObjectInputStream.defaultReadObject();
    byte[] arrayOfByte = (byte[])paramObjectInputStream.readObject();
    init(SubjectPublicKeyInfo.getInstance(arrayOfByte));
  }
  
  private void writeObject(ObjectOutputStream paramObjectOutputStream) throws IOException {
    paramObjectOutputStream.defaultWriteObject();
    paramObjectOutputStream.writeObject(getEncoded());
  }
}
