package org.bouncycastle.crypto.generators;

import java.math.BigInteger;
import java.security.SecureRandom;
import org.bouncycastle.crypto.digests.SHA256Digest;
import org.bouncycastle.crypto.params.CramerShoupParameters;
import org.bouncycastle.crypto.params.DHParameters;

public class CramerShoupParametersGenerator {
  private static final BigInteger ONE = BigInteger.valueOf(1L);
  
  private int size;
  
  private int certainty;
  
  private SecureRandom random;
  
  public void init(int paramInt1, int paramInt2, SecureRandom paramSecureRandom) {
    this.size = paramInt1;
    this.certainty = paramInt2;
    this.random = paramSecureRandom;
  }
  
  public CramerShoupParameters generateParameters() {
    BigInteger[] arrayOfBigInteger = ParametersHelper.generateSafePrimes(this.size, this.certainty, this.random);
    BigInteger bigInteger1 = arrayOfBigInteger[1];
    BigInteger bigInteger2 = ParametersHelper.selectGenerator(bigInteger1, this.random);
    BigInteger bigInteger3;
    for (bigInteger3 = ParametersHelper.selectGenerator(bigInteger1, this.random); bigInteger2.equals(bigInteger3); bigInteger3 = ParametersHelper.selectGenerator(bigInteger1, this.random));
    return new CramerShoupParameters(bigInteger1, bigInteger2, bigInteger3, new SHA256Digest());
  }
  
  public CramerShoupParameters generateParameters(DHParameters paramDHParameters) {
    BigInteger bigInteger1 = paramDHParameters.getP();
    BigInteger bigInteger2 = paramDHParameters.getG();
    BigInteger bigInteger3;
    for (bigInteger3 = ParametersHelper.selectGenerator(bigInteger1, this.random); bigInteger2.equals(bigInteger3); bigInteger3 = ParametersHelper.selectGenerator(bigInteger1, this.random));
    return new CramerShoupParameters(bigInteger1, bigInteger2, bigInteger3, new SHA256Digest());
  }
}
