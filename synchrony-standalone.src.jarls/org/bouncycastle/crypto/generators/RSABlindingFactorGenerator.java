package org.bouncycastle.crypto.generators;

import java.math.BigInteger;
import java.security.SecureRandom;
import org.bouncycastle.crypto.CipherParameters;
import org.bouncycastle.crypto.CryptoServicesRegistrar;
import org.bouncycastle.crypto.params.ParametersWithRandom;
import org.bouncycastle.crypto.params.RSAKeyParameters;
import org.bouncycastle.util.BigIntegers;

public class RSABlindingFactorGenerator {
  private static BigInteger ZERO;
  
  private static BigInteger ONE = (ZERO = BigInteger.valueOf(0L)).valueOf(1L);
  
  private RSAKeyParameters key;
  
  private SecureRandom random;
  
  public void init(CipherParameters paramCipherParameters) {
    if (paramCipherParameters instanceof ParametersWithRandom) {
      ParametersWithRandom parametersWithRandom = (ParametersWithRandom)paramCipherParameters;
      this.key = (RSAKeyParameters)parametersWithRandom.getParameters();
      this.random = parametersWithRandom.getRandom();
    } else {
      this.key = (RSAKeyParameters)paramCipherParameters;
      this.random = CryptoServicesRegistrar.getSecureRandom();
    } 
    if (this.key instanceof org.bouncycastle.crypto.params.RSAPrivateCrtKeyParameters)
      throw new IllegalArgumentException("generator requires RSA public key"); 
  }
  
  public BigInteger generateBlindingFactor() {
    BigInteger bigInteger3;
    BigInteger bigInteger2;
    if (this.key == null)
      throw new IllegalStateException("generator not initialised"); 
    BigInteger bigInteger1 = this.key.getModulus();
    int i = bigInteger1.bitLength() - 1;
    do {
      bigInteger2 = BigIntegers.createRandomBigInteger(i, this.random);
      bigInteger3 = bigInteger2.gcd(bigInteger1);
    } while (bigInteger2.equals(ZERO) || bigInteger2.equals(ONE) || !bigInteger3.equals(ONE));
    return bigInteger2;
  }
}
