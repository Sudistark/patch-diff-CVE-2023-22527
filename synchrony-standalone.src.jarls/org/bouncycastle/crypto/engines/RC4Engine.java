package org.bouncycastle.crypto.engines;

import org.bouncycastle.crypto.CipherParameters;
import org.bouncycastle.crypto.DataLengthException;
import org.bouncycastle.crypto.OutputLengthException;
import org.bouncycastle.crypto.StreamCipher;
import org.bouncycastle.crypto.params.KeyParameter;

public class RC4Engine implements StreamCipher {
  private static final int STATE_LENGTH = 256;
  
  private byte[] engineState = null;
  
  private int x = 0;
  
  private int y = 0;
  
  private byte[] workingKey = null;
  
  public void init(boolean paramBoolean, CipherParameters paramCipherParameters) {
    if (paramCipherParameters instanceof KeyParameter) {
      this.workingKey = ((KeyParameter)paramCipherParameters).getKey();
      setKey(this.workingKey);
      return;
    } 
    throw new IllegalArgumentException("invalid parameter passed to RC4 init - " + paramCipherParameters.getClass().getName());
  }
  
  public String getAlgorithmName() { return "RC4"; }
  
  public byte returnByte(byte paramByte) {
    this.x = this.x + 1 & 0xFF;
    this.y = this.engineState[this.x] + this.y & 0xFF;
    byte b = this.engineState[this.x];
    this.engineState[this.x] = this.engineState[this.y];
    this.engineState[this.y] = b;
    return (byte)(paramByte ^ this.engineState[this.engineState[this.x] + this.engineState[this.y] & 0xFF]);
  }
  
  public int processBytes(byte[] paramArrayOfByte1, int paramInt1, int paramInt2, byte[] paramArrayOfByte2, int paramInt3) {
    if (paramInt1 + paramInt2 > paramArrayOfByte1.length)
      throw new DataLengthException("input buffer too short"); 
    if (paramInt3 + paramInt2 > paramArrayOfByte2.length)
      throw new OutputLengthException("output buffer too short"); 
    for (int i = 0; i < paramInt2; i++) {
      this.x = this.x + 1 & 0xFF;
      this.y = this.engineState[this.x] + this.y & 0xFF;
      byte b = this.engineState[this.x];
      this.engineState[this.x] = this.engineState[this.y];
      this.engineState[this.y] = b;
      paramArrayOfByte2[i + paramInt3] = (byte)(paramArrayOfByte1[i + paramInt1] ^ this.engineState[this.engineState[this.x] + this.engineState[this.y] & 0xFF]);
    } 
    return paramInt2;
  }
  
  public void reset() { setKey(this.workingKey); }
  
  private void setKey(byte[] paramArrayOfByte) {
    this.workingKey = paramArrayOfByte;
    this.x = 0;
    this.y = 0;
    if (this.engineState == null)
      this.engineState = new byte[256]; 
    int i;
    for (i = 0; i < 256; i++)
      this.engineState[i] = (byte)i; 
    i = 0;
    byte b = 0;
    for (byte b1 = 0; b1 < 'Ä€'; b1++) {
      b = (paramArrayOfByte[i] & 0xFF) + this.engineState[b1] + b & 0xFF;
      byte b2 = this.engineState[b1];
      this.engineState[b1] = this.engineState[b];
      this.engineState[b] = b2;
      i = (i + 1) % paramArrayOfByte.length;
    } 
  }
}
