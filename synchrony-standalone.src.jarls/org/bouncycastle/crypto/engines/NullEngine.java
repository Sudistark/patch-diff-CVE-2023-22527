package org.bouncycastle.crypto.engines;

import org.bouncycastle.crypto.BlockCipher;
import org.bouncycastle.crypto.CipherParameters;
import org.bouncycastle.crypto.DataLengthException;
import org.bouncycastle.crypto.OutputLengthException;

public class NullEngine implements BlockCipher {
  private boolean initialised;
  
  protected static final int DEFAULT_BLOCK_SIZE = 1;
  
  private final int blockSize;
  
  public NullEngine() { this(1); }
  
  public NullEngine(int paramInt) { this.blockSize = paramInt; }
  
  public void init(boolean paramBoolean, CipherParameters paramCipherParameters) throws IllegalArgumentException { this.initialised = true; }
  
  public String getAlgorithmName() { return "Null"; }
  
  public int getBlockSize() { return this.blockSize; }
  
  public int processBlock(byte[] paramArrayOfByte1, int paramInt1, byte[] paramArrayOfByte2, int paramInt2) throws DataLengthException, IllegalStateException {
    if (!this.initialised)
      throw new IllegalStateException("Null engine not initialised"); 
    if (paramInt1 + this.blockSize > paramArrayOfByte1.length)
      throw new DataLengthException("input buffer too short"); 
    if (paramInt2 + this.blockSize > paramArrayOfByte2.length)
      throw new OutputLengthException("output buffer too short"); 
    for (int i = 0; i < this.blockSize; i++)
      paramArrayOfByte2[paramInt2 + i] = paramArrayOfByte1[paramInt1 + i]; 
    return this.blockSize;
  }
  
  public void reset() {}
}
