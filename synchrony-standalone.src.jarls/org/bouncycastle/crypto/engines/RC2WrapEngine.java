package org.bouncycastle.crypto.engines;

import java.security.SecureRandom;
import org.bouncycastle.crypto.CipherParameters;
import org.bouncycastle.crypto.CryptoServicesRegistrar;
import org.bouncycastle.crypto.Digest;
import org.bouncycastle.crypto.InvalidCipherTextException;
import org.bouncycastle.crypto.Wrapper;
import org.bouncycastle.crypto.modes.CBCBlockCipher;
import org.bouncycastle.crypto.params.ParametersWithIV;
import org.bouncycastle.crypto.params.ParametersWithRandom;
import org.bouncycastle.crypto.util.DigestFactory;
import org.bouncycastle.util.Arrays;

public class RC2WrapEngine implements Wrapper {
  private CBCBlockCipher engine;
  
  private CipherParameters param;
  
  private ParametersWithIV paramPlusIV;
  
  private byte[] iv;
  
  private boolean forWrapping;
  
  private SecureRandom sr;
  
  private static final byte[] IV2 = { 74, -35, -94, 44, 121, -24, 33, 5 };
  
  Digest sha1 = DigestFactory.createSHA1();
  
  byte[] digest = new byte[20];
  
  public void init(boolean paramBoolean, CipherParameters paramCipherParameters) {
    this.forWrapping = paramBoolean;
    this.engine = new CBCBlockCipher(new RC2Engine());
    if (paramCipherParameters instanceof ParametersWithRandom) {
      ParametersWithRandom parametersWithRandom = (ParametersWithRandom)paramCipherParameters;
      this.sr = parametersWithRandom.getRandom();
      paramCipherParameters = parametersWithRandom.getParameters();
    } else {
      this.sr = CryptoServicesRegistrar.getSecureRandom();
    } 
    if (paramCipherParameters instanceof ParametersWithIV) {
      this.paramPlusIV = (ParametersWithIV)paramCipherParameters;
      this.iv = this.paramPlusIV.getIV();
      this.param = this.paramPlusIV.getParameters();
      if (this.forWrapping) {
        if (this.iv == null || this.iv.length != 8)
          throw new IllegalArgumentException("IV is not 8 octets"); 
      } else {
        throw new IllegalArgumentException("You should not supply an IV for unwrapping");
      } 
    } else {
      this.param = paramCipherParameters;
      if (this.forWrapping) {
        this.iv = new byte[8];
        this.sr.nextBytes(this.iv);
        this.paramPlusIV = new ParametersWithIV(this.param, this.iv);
      } 
    } 
  }
  
  public String getAlgorithmName() { return "RC2"; }
  
  public byte[] wrap(byte[] paramArrayOfByte, int paramInt1, int paramInt2) {
    if (!this.forWrapping)
      throw new IllegalStateException("Not initialized for wrapping"); 
    int i = paramInt2 + 1;
    if (i % 8 != 0)
      i += 8 - i % 8; 
    byte[] arrayOfByte1 = new byte[i];
    arrayOfByte1[0] = (byte)paramInt2;
    System.arraycopy(paramArrayOfByte, paramInt1, arrayOfByte1, 1, paramInt2);
    byte[] arrayOfByte2 = new byte[arrayOfByte1.length - paramInt2 - 1];
    if (arrayOfByte2.length > 0) {
      this.sr.nextBytes(arrayOfByte2);
      System.arraycopy(arrayOfByte2, 0, arrayOfByte1, paramInt2 + 1, arrayOfByte2.length);
    } 
    byte[] arrayOfByte3 = calculateCMSKeyChecksum(arrayOfByte1);
    byte[] arrayOfByte4 = new byte[arrayOfByte1.length + arrayOfByte3.length];
    System.arraycopy(arrayOfByte1, 0, arrayOfByte4, 0, arrayOfByte1.length);
    System.arraycopy(arrayOfByte3, 0, arrayOfByte4, arrayOfByte1.length, arrayOfByte3.length);
    byte[] arrayOfByte5 = new byte[arrayOfByte4.length];
    System.arraycopy(arrayOfByte4, 0, arrayOfByte5, 0, arrayOfByte4.length);
    int j = arrayOfByte4.length / this.engine.getBlockSize();
    int k = arrayOfByte4.length % this.engine.getBlockSize();
    if (k != 0)
      throw new IllegalStateException("Not multiple of block length"); 
    this.engine.init(true, this.paramPlusIV);
    for (int m = 0; m < j; m++) {
      int i1 = m * this.engine.getBlockSize();
      this.engine.processBlock(arrayOfByte5, i1, arrayOfByte5, i1);
    } 
    byte[] arrayOfByte6 = new byte[this.iv.length + arrayOfByte5.length];
    System.arraycopy(this.iv, 0, arrayOfByte6, 0, this.iv.length);
    System.arraycopy(arrayOfByte5, 0, arrayOfByte6, this.iv.length, arrayOfByte5.length);
    byte[] arrayOfByte7 = new byte[arrayOfByte6.length];
    for (byte b = 0; b < arrayOfByte6.length; b++)
      arrayOfByte7[b] = arrayOfByte6[arrayOfByte6.length - b + true]; 
    ParametersWithIV parametersWithIV = new ParametersWithIV(this.param, IV2);
    this.engine.init(true, parametersWithIV);
    for (int n = 0; n < j + 1; n++) {
      int i1 = n * this.engine.getBlockSize();
      this.engine.processBlock(arrayOfByte7, i1, arrayOfByte7, i1);
    } 
    return arrayOfByte7;
  }
  
  public byte[] unwrap(byte[] paramArrayOfByte, int paramInt1, int paramInt2) {
    if (this.forWrapping)
      throw new IllegalStateException("Not set for unwrapping"); 
    if (paramArrayOfByte == null)
      throw new InvalidCipherTextException("Null pointer as ciphertext"); 
    if (paramInt2 % this.engine.getBlockSize() != 0)
      throw new InvalidCipherTextException("Ciphertext not multiple of " + this.engine.getBlockSize()); 
    ParametersWithIV parametersWithIV = new ParametersWithIV(this.param, IV2);
    this.engine.init(false, parametersWithIV);
    byte[] arrayOfByte1 = new byte[paramInt2];
    System.arraycopy(paramArrayOfByte, paramInt1, arrayOfByte1, 0, paramInt2);
    for (int i = 0; i < arrayOfByte1.length / this.engine.getBlockSize(); i++) {
      int k = i * this.engine.getBlockSize();
      this.engine.processBlock(arrayOfByte1, k, arrayOfByte1, k);
    } 
    byte[] arrayOfByte2 = new byte[arrayOfByte1.length];
    for (byte b = 0; b < arrayOfByte1.length; b++)
      arrayOfByte2[b] = arrayOfByte1[arrayOfByte1.length - b + true]; 
    this.iv = new byte[8];
    byte[] arrayOfByte3 = new byte[arrayOfByte2.length - 8];
    System.arraycopy(arrayOfByte2, 0, this.iv, 0, 8);
    System.arraycopy(arrayOfByte2, 8, arrayOfByte3, 0, arrayOfByte2.length - 8);
    this.paramPlusIV = new ParametersWithIV(this.param, this.iv);
    this.engine.init(false, this.paramPlusIV);
    byte[] arrayOfByte4 = new byte[arrayOfByte3.length];
    System.arraycopy(arrayOfByte3, 0, arrayOfByte4, 0, arrayOfByte3.length);
    for (int j = 0; j < arrayOfByte4.length / this.engine.getBlockSize(); j++) {
      int k = j * this.engine.getBlockSize();
      this.engine.processBlock(arrayOfByte4, k, arrayOfByte4, k);
    } 
    byte[] arrayOfByte5 = new byte[arrayOfByte4.length - 8];
    byte[] arrayOfByte6 = new byte[8];
    System.arraycopy(arrayOfByte4, 0, arrayOfByte5, 0, arrayOfByte4.length - 8);
    System.arraycopy(arrayOfByte4, arrayOfByte4.length - 8, arrayOfByte6, 0, 8);
    if (!checkCMSKeyChecksum(arrayOfByte5, arrayOfByte6))
      throw new InvalidCipherTextException("Checksum inside ciphertext is corrupted"); 
    if (arrayOfByte5.length - (arrayOfByte5[0] & 0xFF) + 1 > 7)
      throw new InvalidCipherTextException("too many pad bytes (" + (arrayOfByte5.length - (arrayOfByte5[0] & 0xFF) + 1) + ")"); 
    byte[] arrayOfByte7 = new byte[arrayOfByte5[0]];
    System.arraycopy(arrayOfByte5, 1, arrayOfByte7, 0, arrayOfByte7.length);
    return arrayOfByte7;
  }
  
  private byte[] calculateCMSKeyChecksum(byte[] paramArrayOfByte) {
    byte[] arrayOfByte = new byte[8];
    this.sha1.update(paramArrayOfByte, 0, paramArrayOfByte.length);
    this.sha1.doFinal(this.digest, 0);
    System.arraycopy(this.digest, 0, arrayOfByte, 0, 8);
    return arrayOfByte;
  }
  
  private boolean checkCMSKeyChecksum(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2) { return Arrays.constantTimeAreEqual(calculateCMSKeyChecksum(paramArrayOfByte1), paramArrayOfByte2); }
}
