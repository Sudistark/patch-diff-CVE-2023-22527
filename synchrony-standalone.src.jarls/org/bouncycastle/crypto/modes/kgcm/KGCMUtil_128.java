package org.bouncycastle.crypto.modes.kgcm;

import org.bouncycastle.math.raw.Interleave;

public class KGCMUtil_128 {
  public static final int SIZE = 2;
  
  public static void add(long[] paramArrayOfLong1, long[] paramArrayOfLong2, long[] paramArrayOfLong3) {
    paramArrayOfLong3[0] = paramArrayOfLong1[0] ^ paramArrayOfLong2[0];
    paramArrayOfLong3[1] = paramArrayOfLong1[1] ^ paramArrayOfLong2[1];
  }
  
  public static void copy(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    paramArrayOfLong2[0] = paramArrayOfLong1[0];
    paramArrayOfLong2[1] = paramArrayOfLong1[1];
  }
  
  public static boolean equal(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    long l = 0L;
    l |= paramArrayOfLong1[0] ^ paramArrayOfLong2[0];
    l |= paramArrayOfLong1[1] ^ paramArrayOfLong2[1];
    return (l == 0L);
  }
  
  public static void multiply(long[] paramArrayOfLong1, long[] paramArrayOfLong2, long[] paramArrayOfLong3) {
    long l1 = paramArrayOfLong1[0];
    long l2 = paramArrayOfLong1[1];
    long l3 = paramArrayOfLong2[0];
    long l4 = paramArrayOfLong2[1];
    long l5 = 0L;
    long l6 = 0L;
    long l7 = 0L;
    for (byte b = 0; b < 64; b++) {
      long l8 = -(l1 & 0x1L);
      l1 >>>= true;
      l5 ^= l3 & l8;
      l6 ^= l4 & l8;
      long l9 = -(l2 & 0x1L);
      l2 >>>= true;
      l6 ^= l3 & l9;
      l7 ^= l4 & l9;
      long l10 = l4 >> 63;
      l4 = l4 << true | l3 >>> 63;
      l3 = l3 << true ^ l10 & 0x87L;
    } 
    l5 ^= l7 ^ l7 << true ^ l7 << 2 ^ l7 << 7;
    l6 ^= l7 >>> 63 ^ l7 >>> 62 ^ l7 >>> 57;
    paramArrayOfLong3[0] = l5;
    paramArrayOfLong3[1] = l6;
  }
  
  public static void multiplyX(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    long l1 = paramArrayOfLong1[0];
    long l2 = paramArrayOfLong1[1];
    long l3 = l2 >> 63;
    paramArrayOfLong2[0] = l1 << true ^ l3 & 0x87L;
    paramArrayOfLong2[1] = l2 << true | l1 >>> 63;
  }
  
  public static void multiplyX8(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    long l1 = paramArrayOfLong1[0];
    long l2 = paramArrayOfLong1[1];
    long l3 = l2 >>> 56;
    paramArrayOfLong2[0] = l1 << 8 ^ l3 ^ l3 << true ^ l3 << 2 ^ l3 << 7;
    paramArrayOfLong2[1] = l2 << 8 | l1 >>> 56;
  }
  
  public static void one(long[] paramArrayOfLong) {
    paramArrayOfLong[0] = 1L;
    paramArrayOfLong[1] = 0L;
  }
  
  public static void square(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    long[] arrayOfLong = new long[4];
    Interleave.expand64To128(paramArrayOfLong1[0], arrayOfLong, 0);
    Interleave.expand64To128(paramArrayOfLong1[1], arrayOfLong, 2);
    long l1 = arrayOfLong[0];
    long l2 = arrayOfLong[1];
    long l3 = arrayOfLong[2];
    long l4 = arrayOfLong[3];
    l2 ^= l4 ^ l4 << true ^ l4 << 2 ^ l4 << 7;
    l3 ^= l4 >>> 63 ^ l4 >>> 62 ^ l4 >>> 57;
    l1 ^= l3 ^ l3 << true ^ l3 << 2 ^ l3 << 7;
    l2 ^= l3 >>> 63 ^ l3 >>> 62 ^ l3 >>> 57;
    paramArrayOfLong2[0] = l1;
    paramArrayOfLong2[1] = l2;
  }
  
  public static void x(long[] paramArrayOfLong) {
    paramArrayOfLong[0] = 2L;
    paramArrayOfLong[1] = 0L;
  }
  
  public static void zero(long[] paramArrayOfLong) {
    paramArrayOfLong[0] = 0L;
    paramArrayOfLong[1] = 0L;
  }
}
