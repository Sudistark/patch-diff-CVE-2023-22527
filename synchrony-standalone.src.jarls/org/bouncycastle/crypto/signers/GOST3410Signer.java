package org.bouncycastle.crypto.signers;

import java.math.BigInteger;
import java.security.SecureRandom;
import org.bouncycastle.crypto.CipherParameters;
import org.bouncycastle.crypto.CryptoServicesRegistrar;
import org.bouncycastle.crypto.DSAExt;
import org.bouncycastle.crypto.params.GOST3410KeyParameters;
import org.bouncycastle.crypto.params.GOST3410Parameters;
import org.bouncycastle.crypto.params.GOST3410PrivateKeyParameters;
import org.bouncycastle.crypto.params.GOST3410PublicKeyParameters;
import org.bouncycastle.crypto.params.ParametersWithRandom;
import org.bouncycastle.util.Arrays;
import org.bouncycastle.util.BigIntegers;

public class GOST3410Signer implements DSAExt {
  GOST3410KeyParameters key;
  
  SecureRandom random;
  
  public void init(boolean paramBoolean, CipherParameters paramCipherParameters) {
    if (paramBoolean) {
      if (paramCipherParameters instanceof ParametersWithRandom) {
        ParametersWithRandom parametersWithRandom = (ParametersWithRandom)paramCipherParameters;
        this.random = parametersWithRandom.getRandom();
        this.key = (GOST3410PrivateKeyParameters)parametersWithRandom.getParameters();
      } else {
        this.random = CryptoServicesRegistrar.getSecureRandom();
        this.key = (GOST3410PrivateKeyParameters)paramCipherParameters;
      } 
    } else {
      this.key = (GOST3410PublicKeyParameters)paramCipherParameters;
    } 
  }
  
  public BigInteger getOrder() { return this.key.getParameters().getQ(); }
  
  public BigInteger[] generateSignature(byte[] paramArrayOfByte) {
    BigInteger bigInteger2;
    byte[] arrayOfByte = Arrays.reverse(paramArrayOfByte);
    BigInteger bigInteger1 = new BigInteger(1, arrayOfByte);
    GOST3410Parameters gOST3410Parameters = this.key.getParameters();
    do {
      bigInteger2 = BigIntegers.createRandomBigInteger(gOST3410Parameters.getQ().bitLength(), this.random);
    } while (bigInteger2.compareTo(gOST3410Parameters.getQ()) >= 0);
    BigInteger bigInteger3 = gOST3410Parameters.getA().modPow(bigInteger2, gOST3410Parameters.getP()).mod(gOST3410Parameters.getQ());
    BigInteger bigInteger4 = bigInteger2.multiply(bigInteger1).add(((GOST3410PrivateKeyParameters)this.key).getX().multiply(bigInteger3)).mod(gOST3410Parameters.getQ());
    BigInteger[] arrayOfBigInteger = new BigInteger[2];
    arrayOfBigInteger[0] = bigInteger3;
    arrayOfBigInteger[1] = bigInteger4;
    return arrayOfBigInteger;
  }
  
  public boolean verifySignature(byte[] paramArrayOfByte, BigInteger paramBigInteger1, BigInteger paramBigInteger2) {
    byte[] arrayOfByte = Arrays.reverse(paramArrayOfByte);
    BigInteger bigInteger1 = new BigInteger(1, arrayOfByte);
    GOST3410Parameters gOST3410Parameters = this.key.getParameters();
    BigInteger bigInteger2 = BigInteger.valueOf(0L);
    if (bigInteger2.compareTo(paramBigInteger1) >= 0 || gOST3410Parameters.getQ().compareTo(paramBigInteger1) <= 0)
      return false; 
    if (bigInteger2.compareTo(paramBigInteger2) >= 0 || gOST3410Parameters.getQ().compareTo(paramBigInteger2) <= 0)
      return false; 
    BigInteger bigInteger3 = bigInteger1.modPow(gOST3410Parameters.getQ().subtract(new BigInteger("2")), gOST3410Parameters.getQ());
    BigInteger bigInteger4 = paramBigInteger2.multiply(bigInteger3).mod(gOST3410Parameters.getQ());
    BigInteger bigInteger5 = gOST3410Parameters.getQ().subtract(paramBigInteger1).multiply(bigInteger3).mod(gOST3410Parameters.getQ());
    bigInteger4 = gOST3410Parameters.getA().modPow(bigInteger4, gOST3410Parameters.getP());
    bigInteger5 = ((GOST3410PublicKeyParameters)this.key).getY().modPow(bigInteger5, gOST3410Parameters.getP());
    BigInteger bigInteger6 = bigInteger4.multiply(bigInteger5).mod(gOST3410Parameters.getP()).mod(gOST3410Parameters.getQ());
    return bigInteger6.equals(paramBigInteger1);
  }
}
