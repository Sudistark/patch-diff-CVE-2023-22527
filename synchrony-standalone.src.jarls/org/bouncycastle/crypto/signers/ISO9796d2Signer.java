package org.bouncycastle.crypto.signers;

import org.bouncycastle.crypto.AsymmetricBlockCipher;
import org.bouncycastle.crypto.CipherParameters;
import org.bouncycastle.crypto.CryptoException;
import org.bouncycastle.crypto.Digest;
import org.bouncycastle.crypto.InvalidCipherTextException;
import org.bouncycastle.crypto.SignerWithRecovery;
import org.bouncycastle.crypto.params.RSAKeyParameters;
import org.bouncycastle.util.Arrays;

public class ISO9796d2Signer implements SignerWithRecovery {
  public static final int TRAILER_IMPLICIT = 188;
  
  public static final int TRAILER_RIPEMD160 = 12748;
  
  public static final int TRAILER_RIPEMD128 = 13004;
  
  public static final int TRAILER_SHA1 = 13260;
  
  public static final int TRAILER_SHA256 = 13516;
  
  public static final int TRAILER_SHA512 = 13772;
  
  public static final int TRAILER_SHA384 = 14028;
  
  public static final int TRAILER_WHIRLPOOL = 14284;
  
  private Digest digest;
  
  private AsymmetricBlockCipher cipher;
  
  private int trailer;
  
  private int keyBits;
  
  private byte[] block;
  
  private byte[] mBuf;
  
  private int messageLength;
  
  private boolean fullMessage;
  
  private byte[] recoveredMessage;
  
  private byte[] preSig;
  
  private byte[] preBlock;
  
  public ISO9796d2Signer(AsymmetricBlockCipher paramAsymmetricBlockCipher, Digest paramDigest, boolean paramBoolean) {
    this.cipher = paramAsymmetricBlockCipher;
    this.digest = paramDigest;
    if (paramBoolean) {
      this.trailer = 188;
    } else {
      Integer integer = ISOTrailers.getTrailer(paramDigest);
      if (integer != null) {
        this.trailer = integer.intValue();
      } else {
        throw new IllegalArgumentException("no valid trailer for digest: " + paramDigest.getAlgorithmName());
      } 
    } 
  }
  
  public ISO9796d2Signer(AsymmetricBlockCipher paramAsymmetricBlockCipher, Digest paramDigest) { this(paramAsymmetricBlockCipher, paramDigest, false); }
  
  public void init(boolean paramBoolean, CipherParameters paramCipherParameters) {
    RSAKeyParameters rSAKeyParameters = (RSAKeyParameters)paramCipherParameters;
    this.cipher.init(paramBoolean, rSAKeyParameters);
    this.keyBits = rSAKeyParameters.getModulus().bitLength();
    this.block = new byte[(this.keyBits + 7) / 8];
    if (this.trailer == 188) {
      this.mBuf = new byte[this.block.length - this.digest.getDigestSize() - 2];
    } else {
      this.mBuf = new byte[this.block.length - this.digest.getDigestSize() - 3];
    } 
    reset();
  }
  
  private boolean isSameAs(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2) {
    boolean bool = true;
    if (this.messageLength > this.mBuf.length) {
      if (this.mBuf.length > paramArrayOfByte2.length)
        bool = false; 
      for (byte b = 0; b != this.mBuf.length; b++) {
        if (paramArrayOfByte1[b] != paramArrayOfByte2[b])
          bool = false; 
      } 
    } else {
      if (this.messageLength != paramArrayOfByte2.length)
        bool = false; 
      for (byte b = 0; b != paramArrayOfByte2.length; b++) {
        if (paramArrayOfByte1[b] != paramArrayOfByte2[b])
          bool = false; 
      } 
    } 
    return bool;
  }
  
  private void clearBlock(byte[] paramArrayOfByte) {
    for (byte b = 0; b != paramArrayOfByte.length; b++)
      paramArrayOfByte[b] = 0; 
  }
  
  public void updateWithRecoveredMessage(byte[] paramArrayOfByte) {
    byte[] arrayOfByte = this.cipher.processBlock(paramArrayOfByte, 0, paramArrayOfByte.length);
    if ((arrayOfByte[0] & 0xC0 ^ 0x40) != 0)
      throw new InvalidCipherTextException("malformed signature"); 
    if ((arrayOfByte[arrayOfByte.length - 1] & 0xF ^ 0xC) != 0)
      throw new InvalidCipherTextException("malformed signature"); 
    int i = 0;
    if ((arrayOfByte[arrayOfByte.length - 1] & 0xFF ^ 0xBC) == 0) {
      i = 1;
    } else {
      byte b = (arrayOfByte[arrayOfByte.length - 2] & 0xFF) << 8 | arrayOfByte[arrayOfByte.length - 1] & 0xFF;
      Integer integer = ISOTrailers.getTrailer(this.digest);
      if (integer != null) {
        int m = integer.intValue();
        if (b != m && (m != 15052 || b != 16588))
          throw new IllegalStateException("signer initialised with wrong digest for trailer " + b); 
      } else {
        throw new IllegalArgumentException("unrecognised hash in signature");
      } 
      i = 2;
    } 
    int j = 0;
    for (j = 0; j != arrayOfByte.length && (arrayOfByte[j] & 0xF ^ 0xA) != 0; j++);
    j++;
    int k = arrayOfByte.length - i - this.digest.getDigestSize();
    if (k - j <= 0)
      throw new InvalidCipherTextException("malformed block"); 
    if ((arrayOfByte[0] & 0x20) == 0) {
      this.fullMessage = true;
      this.recoveredMessage = new byte[k - j];
      System.arraycopy(arrayOfByte, j, this.recoveredMessage, 0, this.recoveredMessage.length);
    } else {
      this.fullMessage = false;
      this.recoveredMessage = new byte[k - j];
      System.arraycopy(arrayOfByte, j, this.recoveredMessage, 0, this.recoveredMessage.length);
    } 
    this.preSig = paramArrayOfByte;
    this.preBlock = arrayOfByte;
    this.digest.update(this.recoveredMessage, 0, this.recoveredMessage.length);
    this.messageLength = this.recoveredMessage.length;
    System.arraycopy(this.recoveredMessage, 0, this.mBuf, 0, this.recoveredMessage.length);
  }
  
  public void update(byte paramByte) {
    this.digest.update(paramByte);
    if (this.messageLength < this.mBuf.length)
      this.mBuf[this.messageLength] = paramByte; 
    this.messageLength++;
  }
  
  public void update(byte[] paramArrayOfByte, int paramInt1, int paramInt2) {
    while (paramInt2 > 0 && this.messageLength < this.mBuf.length) {
      update(paramArrayOfByte[paramInt1]);
      paramInt1++;
      paramInt2--;
    } 
    this.digest.update(paramArrayOfByte, paramInt1, paramInt2);
    this.messageLength += paramInt2;
  }
  
  public void reset() {
    this.digest.reset();
    this.messageLength = 0;
    clearBlock(this.mBuf);
    if (this.recoveredMessage != null)
      clearBlock(this.recoveredMessage); 
    this.recoveredMessage = null;
    this.fullMessage = false;
    if (this.preSig != null) {
      this.preSig = null;
      clearBlock(this.preBlock);
      this.preBlock = null;
    } 
  }
  
  public byte[] generateSignature() throws CryptoException {
    int i = this.digest.getDigestSize();
    int j = 0;
    int k = 0;
    if (this.trailer == 188) {
      j = 8;
      k = this.block.length - i - 1;
      this.digest.doFinal(this.block, k);
      this.block[this.block.length - 1] = -68;
    } else {
      j = 16;
      k = this.block.length - i - 2;
      this.digest.doFinal(this.block, k);
      this.block[this.block.length - 2] = (byte)(this.trailer >>> 8);
      this.block[this.block.length - 1] = (byte)this.trailer;
    } 
    byte b = 0;
    int m = (i + this.messageLength) * 8 + j + 4 - this.keyBits;
    if (m > 0) {
      int n = this.messageLength - (m + 7) / 8;
      b = 96;
      k -= n;
      System.arraycopy(this.mBuf, 0, this.block, k, n);
      this.recoveredMessage = new byte[n];
    } else {
      b = 64;
      k -= this.messageLength;
      System.arraycopy(this.mBuf, 0, this.block, k, this.messageLength);
      this.recoveredMessage = new byte[this.messageLength];
    } 
    if (k - 1 > 0) {
      for (int n = k - 1; n != 0; n--)
        this.block[n] = -69; 
      this.block[k - 1] = (byte)(this.block[k - 1] ^ true);
      this.block[0] = 11;
      this.block[0] = (byte)(this.block[0] | b);
    } else {
      this.block[0] = 10;
      this.block[0] = (byte)(this.block[0] | b);
    } 
    byte[] arrayOfByte = this.cipher.processBlock(this.block, 0, this.block.length);
    this.fullMessage = ((b & 0x20) == 0);
    System.arraycopy(this.mBuf, 0, this.recoveredMessage, 0, this.recoveredMessage.length);
    this.messageLength = 0;
    clearBlock(this.mBuf);
    clearBlock(this.block);
    return arrayOfByte;
  }
  
  public boolean verifySignature(byte[] paramArrayOfByte) {
    byte[] arrayOfByte1 = null;
    if (this.preSig == null) {
      try {
        arrayOfByte1 = this.cipher.processBlock(paramArrayOfByte, 0, paramArrayOfByte.length);
      } catch (Exception exception) {
        return false;
      } 
    } else {
      if (!Arrays.areEqual(this.preSig, paramArrayOfByte))
        throw new IllegalStateException("updateWithRecoveredMessage called on different signature"); 
      arrayOfByte1 = this.preBlock;
      this.preSig = null;
      this.preBlock = null;
    } 
    if ((arrayOfByte1[0] & 0xC0 ^ 0x40) != 0)
      return returnFalse(arrayOfByte1); 
    if ((arrayOfByte1[arrayOfByte1.length - 1] & 0xF ^ 0xC) != 0)
      return returnFalse(arrayOfByte1); 
    int i = 0;
    if ((arrayOfByte1[arrayOfByte1.length - 1] & 0xFF ^ 0xBC) == 0) {
      i = 1;
    } else {
      byte b = (arrayOfByte1[arrayOfByte1.length - 2] & 0xFF) << 8 | arrayOfByte1[arrayOfByte1.length - 1] & 0xFF;
      Integer integer = ISOTrailers.getTrailer(this.digest);
      if (integer != null) {
        int m = integer.intValue();
        if (b != m && (m != 15052 || b != 16588))
          throw new IllegalStateException("signer initialised with wrong digest for trailer " + b); 
      } else {
        throw new IllegalArgumentException("unrecognised hash in signature");
      } 
      i = 2;
    } 
    int j = 0;
    for (j = 0; j != arrayOfByte1.length && (arrayOfByte1[j] & 0xF ^ 0xA) != 0; j++);
    j++;
    byte[] arrayOfByte2 = new byte[this.digest.getDigestSize()];
    int k = arrayOfByte1.length - i - arrayOfByte2.length;
    if (k - j <= 0)
      return returnFalse(arrayOfByte1); 
    if ((arrayOfByte1[0] & 0x20) == 0) {
      this.fullMessage = true;
      if (this.messageLength > k - j)
        return returnFalse(arrayOfByte1); 
      this.digest.reset();
      this.digest.update(arrayOfByte1, j, k - j);
      this.digest.doFinal(arrayOfByte2, 0);
      boolean bool = true;
      for (int m = 0; m != arrayOfByte2.length; m++) {
        arrayOfByte1[k + m] = (byte)(arrayOfByte1[k + m] ^ arrayOfByte2[m]);
        if (arrayOfByte1[k + m] != 0)
          bool = false; 
      } 
      if (!bool)
        return returnFalse(arrayOfByte1); 
      this.recoveredMessage = new byte[k - j];
      System.arraycopy(arrayOfByte1, j, this.recoveredMessage, 0, this.recoveredMessage.length);
    } else {
      this.fullMessage = false;
      this.digest.doFinal(arrayOfByte2, 0);
      boolean bool = true;
      for (int m = 0; m != arrayOfByte2.length; m++) {
        arrayOfByte1[k + m] = (byte)(arrayOfByte1[k + m] ^ arrayOfByte2[m]);
        if (arrayOfByte1[k + m] != 0)
          bool = false; 
      } 
      if (!bool)
        return returnFalse(arrayOfByte1); 
      this.recoveredMessage = new byte[k - j];
      System.arraycopy(arrayOfByte1, j, this.recoveredMessage, 0, this.recoveredMessage.length);
    } 
    if (this.messageLength != 0 && !isSameAs(this.mBuf, this.recoveredMessage))
      return returnFalse(arrayOfByte1); 
    clearBlock(this.mBuf);
    clearBlock(arrayOfByte1);
    this.messageLength = 0;
    return true;
  }
  
  private boolean returnFalse(byte[] paramArrayOfByte) {
    this.messageLength = 0;
    clearBlock(this.mBuf);
    clearBlock(paramArrayOfByte);
    return false;
  }
  
  public boolean hasFullMessage() { return this.fullMessage; }
  
  public byte[] getRecoveredMessage() throws CryptoException { return this.recoveredMessage; }
}
