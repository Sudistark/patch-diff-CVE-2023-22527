package org.bouncycastle.math.ec.custom.sec;

import java.math.BigInteger;
import java.security.SecureRandom;
import org.bouncycastle.math.raw.Mod;
import org.bouncycastle.math.raw.Nat;
import org.bouncycastle.math.raw.Nat160;
import org.bouncycastle.util.Pack;

public class SecP160R1Field {
  private static final long M = 4294967295L;
  
  static final int[] P = { Integer.MAX_VALUE, -1, -1, -1, -1 };
  
  private static final int[] PExt = { 1, 1073741825, 0, 0, 0, -2, -2, -1, -1, -1 };
  
  private static final int[] PExtInv = { -1, -1073741826, -1, -1, -1, 1, 1 };
  
  private static final int P4 = -1;
  
  private static final int PExt9 = -1;
  
  private static final int PInv = -2147483647;
  
  public static void add(int[] paramArrayOfInt1, int[] paramArrayOfInt2, int[] paramArrayOfInt3) {
    int i = Nat160.add(paramArrayOfInt1, paramArrayOfInt2, paramArrayOfInt3);
    if (i != 0 || (paramArrayOfInt3[4] == -1 && Nat160.gte(paramArrayOfInt3, P)))
      Nat.addWordTo(5, -2147483647, paramArrayOfInt3); 
  }
  
  public static void addExt(int[] paramArrayOfInt1, int[] paramArrayOfInt2, int[] paramArrayOfInt3) {
    int i = Nat.add(10, paramArrayOfInt1, paramArrayOfInt2, paramArrayOfInt3);
    if ((i != 0 || (paramArrayOfInt3[9] == -1 && Nat.gte(10, paramArrayOfInt3, PExt))) && Nat.addTo(PExtInv.length, PExtInv, paramArrayOfInt3) != 0)
      Nat.incAt(10, paramArrayOfInt3, PExtInv.length); 
  }
  
  public static void addOne(int[] paramArrayOfInt1, int[] paramArrayOfInt2) {
    int i = Nat.inc(5, paramArrayOfInt1, paramArrayOfInt2);
    if (i != 0 || (paramArrayOfInt2[4] == -1 && Nat160.gte(paramArrayOfInt2, P)))
      Nat.addWordTo(5, -2147483647, paramArrayOfInt2); 
  }
  
  public static int[] fromBigInteger(BigInteger paramBigInteger) {
    int[] arrayOfInt = Nat160.fromBigInteger(paramBigInteger);
    if (arrayOfInt[4] == -1 && Nat160.gte(arrayOfInt, P))
      Nat160.subFrom(P, arrayOfInt); 
    return arrayOfInt;
  }
  
  public static void half(int[] paramArrayOfInt1, int[] paramArrayOfInt2) {
    if ((paramArrayOfInt1[0] & true) == 0) {
      Nat.shiftDownBit(5, paramArrayOfInt1, 0, paramArrayOfInt2);
    } else {
      int i = Nat160.add(paramArrayOfInt1, P, paramArrayOfInt2);
      Nat.shiftDownBit(5, paramArrayOfInt2, i);
    } 
  }
  
  public static void inv(int[] paramArrayOfInt1, int[] paramArrayOfInt2) { Mod.checkedModOddInverse(P, paramArrayOfInt1, paramArrayOfInt2); }
  
  public static int isZero(int[] paramArrayOfInt) {
    int i = 0;
    for (byte b = 0; b < 5; b++)
      i |= paramArrayOfInt[b]; 
    i = i >>> 1 | i & true;
    return i - 1 >> 31;
  }
  
  public static void multiply(int[] paramArrayOfInt1, int[] paramArrayOfInt2, int[] paramArrayOfInt3) {
    int[] arrayOfInt = Nat160.createExt();
    Nat160.mul(paramArrayOfInt1, paramArrayOfInt2, arrayOfInt);
    reduce(arrayOfInt, paramArrayOfInt3);
  }
  
  public static void multiplyAddToExt(int[] paramArrayOfInt1, int[] paramArrayOfInt2, int[] paramArrayOfInt3) {
    int i = Nat160.mulAddTo(paramArrayOfInt1, paramArrayOfInt2, paramArrayOfInt3);
    if ((i != 0 || (paramArrayOfInt3[9] == -1 && Nat.gte(10, paramArrayOfInt3, PExt))) && Nat.addTo(PExtInv.length, PExtInv, paramArrayOfInt3) != 0)
      Nat.incAt(10, paramArrayOfInt3, PExtInv.length); 
  }
  
  public static void negate(int[] paramArrayOfInt1, int[] paramArrayOfInt2) {
    if (0 != isZero(paramArrayOfInt1)) {
      Nat160.sub(P, P, paramArrayOfInt2);
    } else {
      Nat160.sub(P, paramArrayOfInt1, paramArrayOfInt2);
    } 
  }
  
  public static void random(SecureRandom paramSecureRandom, int[] paramArrayOfInt) {
    byte[] arrayOfByte = new byte[20];
    do {
      paramSecureRandom.nextBytes(arrayOfByte);
      Pack.littleEndianToInt(arrayOfByte, 0, paramArrayOfInt, 0, 5);
    } while (0 == Nat.lessThan(5, paramArrayOfInt, P));
  }
  
  public static void randomMult(SecureRandom paramSecureRandom, int[] paramArrayOfInt) {
    do {
      random(paramSecureRandom, paramArrayOfInt);
    } while (0 != isZero(paramArrayOfInt));
  }
  
  public static void reduce(int[] paramArrayOfInt1, int[] paramArrayOfInt2) {
    long l1 = paramArrayOfInt1[5] & 0xFFFFFFFFL;
    long l2 = paramArrayOfInt1[6] & 0xFFFFFFFFL;
    long l3 = paramArrayOfInt1[7] & 0xFFFFFFFFL;
    long l4 = paramArrayOfInt1[8] & 0xFFFFFFFFL;
    long l5 = paramArrayOfInt1[9] & 0xFFFFFFFFL;
    long l6 = 0L;
    l6 += (paramArrayOfInt1[0] & 0xFFFFFFFFL) + l1 + (l1 << 31);
    paramArrayOfInt2[0] = (int)l6;
    l6 >>>= 32;
    l6 += (paramArrayOfInt1[1] & 0xFFFFFFFFL) + l2 + (l2 << 31);
    paramArrayOfInt2[1] = (int)l6;
    l6 >>>= 32;
    l6 += (paramArrayOfInt1[2] & 0xFFFFFFFFL) + l3 + (l3 << 31);
    paramArrayOfInt2[2] = (int)l6;
    l6 >>>= 32;
    l6 += (paramArrayOfInt1[3] & 0xFFFFFFFFL) + l4 + (l4 << 31);
    paramArrayOfInt2[3] = (int)l6;
    l6 >>>= 32;
    l6 += (paramArrayOfInt1[4] & 0xFFFFFFFFL) + l5 + (l5 << 31);
    paramArrayOfInt2[4] = (int)l6;
    l6 >>>= 32;
    reduce32((int)l6, paramArrayOfInt2);
  }
  
  public static void reduce32(int paramInt, int[] paramArrayOfInt) {
    if ((paramInt != 0 && Nat160.mulWordsAdd(-2147483647, paramInt, paramArrayOfInt, 0) != 0) || (paramArrayOfInt[4] == -1 && Nat160.gte(paramArrayOfInt, P)))
      Nat.addWordTo(5, -2147483647, paramArrayOfInt); 
  }
  
  public static void square(int[] paramArrayOfInt1, int[] paramArrayOfInt2) {
    int[] arrayOfInt = Nat160.createExt();
    Nat160.square(paramArrayOfInt1, arrayOfInt);
    reduce(arrayOfInt, paramArrayOfInt2);
  }
  
  public static void squareN(int[] paramArrayOfInt1, int paramInt, int[] paramArrayOfInt2) {
    int[] arrayOfInt = Nat160.createExt();
    Nat160.square(paramArrayOfInt1, arrayOfInt);
    reduce(arrayOfInt, paramArrayOfInt2);
    while (--paramInt > 0) {
      Nat160.square(paramArrayOfInt2, arrayOfInt);
      reduce(arrayOfInt, paramArrayOfInt2);
    } 
  }
  
  public static void subtract(int[] paramArrayOfInt1, int[] paramArrayOfInt2, int[] paramArrayOfInt3) {
    int i = Nat160.sub(paramArrayOfInt1, paramArrayOfInt2, paramArrayOfInt3);
    if (i != 0)
      Nat.subWordFrom(5, -2147483647, paramArrayOfInt3); 
  }
  
  public static void subtractExt(int[] paramArrayOfInt1, int[] paramArrayOfInt2, int[] paramArrayOfInt3) {
    int i = Nat.sub(10, paramArrayOfInt1, paramArrayOfInt2, paramArrayOfInt3);
    if (i != 0 && Nat.subFrom(PExtInv.length, PExtInv, paramArrayOfInt3) != 0)
      Nat.decAt(10, paramArrayOfInt3, PExtInv.length); 
  }
  
  public static void twice(int[] paramArrayOfInt1, int[] paramArrayOfInt2) {
    int i = Nat.shiftUpBit(5, paramArrayOfInt1, 0, paramArrayOfInt2);
    if (i != 0 || (paramArrayOfInt2[4] == -1 && Nat160.gte(paramArrayOfInt2, P)))
      Nat.addWordTo(5, -2147483647, paramArrayOfInt2); 
  }
}
