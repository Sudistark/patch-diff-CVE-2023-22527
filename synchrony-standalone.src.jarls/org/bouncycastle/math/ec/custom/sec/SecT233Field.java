package org.bouncycastle.math.ec.custom.sec;

import java.math.BigInteger;
import org.bouncycastle.math.raw.Interleave;
import org.bouncycastle.math.raw.Nat;
import org.bouncycastle.math.raw.Nat256;

public class SecT233Field {
  private static final long M41 = 2199023255551L;
  
  private static final long M59 = 576460752303423487L;
  
  public static void add(long[] paramArrayOfLong1, long[] paramArrayOfLong2, long[] paramArrayOfLong3) {
    paramArrayOfLong3[0] = paramArrayOfLong1[0] ^ paramArrayOfLong2[0];
    paramArrayOfLong3[1] = paramArrayOfLong1[1] ^ paramArrayOfLong2[1];
    paramArrayOfLong3[2] = paramArrayOfLong1[2] ^ paramArrayOfLong2[2];
    paramArrayOfLong3[3] = paramArrayOfLong1[3] ^ paramArrayOfLong2[3];
  }
  
  public static void addExt(long[] paramArrayOfLong1, long[] paramArrayOfLong2, long[] paramArrayOfLong3) {
    paramArrayOfLong3[0] = paramArrayOfLong1[0] ^ paramArrayOfLong2[0];
    paramArrayOfLong3[1] = paramArrayOfLong1[1] ^ paramArrayOfLong2[1];
    paramArrayOfLong3[2] = paramArrayOfLong1[2] ^ paramArrayOfLong2[2];
    paramArrayOfLong3[3] = paramArrayOfLong1[3] ^ paramArrayOfLong2[3];
    paramArrayOfLong3[4] = paramArrayOfLong1[4] ^ paramArrayOfLong2[4];
    paramArrayOfLong3[5] = paramArrayOfLong1[5] ^ paramArrayOfLong2[5];
    paramArrayOfLong3[6] = paramArrayOfLong1[6] ^ paramArrayOfLong2[6];
    paramArrayOfLong3[7] = paramArrayOfLong1[7] ^ paramArrayOfLong2[7];
  }
  
  public static void addOne(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    paramArrayOfLong2[0] = paramArrayOfLong1[0] ^ 0x1L;
    paramArrayOfLong2[1] = paramArrayOfLong1[1];
    paramArrayOfLong2[2] = paramArrayOfLong1[2];
    paramArrayOfLong2[3] = paramArrayOfLong1[3];
  }
  
  private static void addTo(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    paramArrayOfLong2[0] = paramArrayOfLong2[0] ^ paramArrayOfLong1[0];
    paramArrayOfLong2[1] = paramArrayOfLong2[1] ^ paramArrayOfLong1[1];
    paramArrayOfLong2[2] = paramArrayOfLong2[2] ^ paramArrayOfLong1[2];
    paramArrayOfLong2[3] = paramArrayOfLong2[3] ^ paramArrayOfLong1[3];
  }
  
  public static long[] fromBigInteger(BigInteger paramBigInteger) { return Nat.fromBigInteger64(233, paramBigInteger); }
  
  public static void halfTrace(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    long[] arrayOfLong = Nat256.createExt64();
    Nat256.copy64(paramArrayOfLong1, paramArrayOfLong2);
    for (boolean bool = true; bool < 'Ã©'; bool += true) {
      implSquare(paramArrayOfLong2, arrayOfLong);
      reduce(arrayOfLong, paramArrayOfLong2);
      implSquare(paramArrayOfLong2, arrayOfLong);
      reduce(arrayOfLong, paramArrayOfLong2);
      addTo(paramArrayOfLong1, paramArrayOfLong2);
    } 
  }
  
  public static void invert(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    if (Nat256.isZero64(paramArrayOfLong1))
      throw new IllegalStateException(); 
    long[] arrayOfLong1 = Nat256.create64();
    long[] arrayOfLong2 = Nat256.create64();
    square(paramArrayOfLong1, arrayOfLong1);
    multiply(arrayOfLong1, paramArrayOfLong1, arrayOfLong1);
    square(arrayOfLong1, arrayOfLong1);
    multiply(arrayOfLong1, paramArrayOfLong1, arrayOfLong1);
    squareN(arrayOfLong1, 3, arrayOfLong2);
    multiply(arrayOfLong2, arrayOfLong1, arrayOfLong2);
    square(arrayOfLong2, arrayOfLong2);
    multiply(arrayOfLong2, paramArrayOfLong1, arrayOfLong2);
    squareN(arrayOfLong2, 7, arrayOfLong1);
    multiply(arrayOfLong1, arrayOfLong2, arrayOfLong1);
    squareN(arrayOfLong1, 14, arrayOfLong2);
    multiply(arrayOfLong2, arrayOfLong1, arrayOfLong2);
    square(arrayOfLong2, arrayOfLong2);
    multiply(arrayOfLong2, paramArrayOfLong1, arrayOfLong2);
    squareN(arrayOfLong2, 29, arrayOfLong1);
    multiply(arrayOfLong1, arrayOfLong2, arrayOfLong1);
    squareN(arrayOfLong1, 58, arrayOfLong2);
    multiply(arrayOfLong2, arrayOfLong1, arrayOfLong2);
    squareN(arrayOfLong2, 116, arrayOfLong1);
    multiply(arrayOfLong1, arrayOfLong2, arrayOfLong1);
    square(arrayOfLong1, paramArrayOfLong2);
  }
  
  public static void multiply(long[] paramArrayOfLong1, long[] paramArrayOfLong2, long[] paramArrayOfLong3) {
    long[] arrayOfLong = Nat256.createExt64();
    implMultiply(paramArrayOfLong1, paramArrayOfLong2, arrayOfLong);
    reduce(arrayOfLong, paramArrayOfLong3);
  }
  
  public static void multiplyAddToExt(long[] paramArrayOfLong1, long[] paramArrayOfLong2, long[] paramArrayOfLong3) {
    long[] arrayOfLong = Nat256.createExt64();
    implMultiply(paramArrayOfLong1, paramArrayOfLong2, arrayOfLong);
    addExt(paramArrayOfLong3, arrayOfLong, paramArrayOfLong3);
  }
  
  public static void reduce(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    long l1 = paramArrayOfLong1[0];
    long l2 = paramArrayOfLong1[1];
    long l3 = paramArrayOfLong1[2];
    long l4 = paramArrayOfLong1[3];
    long l5 = paramArrayOfLong1[4];
    long l6 = paramArrayOfLong1[5];
    long l7 = paramArrayOfLong1[6];
    long l8 = paramArrayOfLong1[7];
    l4 ^= l8 << 23;
    l5 ^= l8 >>> 41 ^ l8 << 33;
    l6 ^= l8 >>> 31;
    l3 ^= l7 << 23;
    l4 ^= l7 >>> 41 ^ l7 << 33;
    l5 ^= l7 >>> 31;
    l2 ^= l6 << 23;
    l3 ^= l6 >>> 41 ^ l6 << 33;
    l4 ^= l6 >>> 31;
    l1 ^= l5 << 23;
    l2 ^= l5 >>> 41 ^ l5 << 33;
    l3 ^= l5 >>> 31;
    long l9 = l4 >>> 41;
    paramArrayOfLong2[0] = l1 ^ l9;
    paramArrayOfLong2[1] = l2 ^ l9 << 10;
    paramArrayOfLong2[2] = l3;
    paramArrayOfLong2[3] = l4 & 0x1FFFFFFFFFFL;
  }
  
  public static void reduce23(long[] paramArrayOfLong, int paramInt) {
    long l1 = paramArrayOfLong[paramInt + 3];
    long l2 = l1 >>> 41;
    paramArrayOfLong[paramInt] = paramArrayOfLong[paramInt] ^ l2;
    paramArrayOfLong[paramInt + 1] = paramArrayOfLong[paramInt + 1] ^ l2 << 10;
    paramArrayOfLong[paramInt + 3] = l1 & 0x1FFFFFFFFFFL;
  }
  
  public static void sqrt(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    long l1 = Interleave.unshuffle(paramArrayOfLong1[0]);
    long l2 = Interleave.unshuffle(paramArrayOfLong1[1]);
    long l3 = l1 & 0xFFFFFFFFL | l2 << 32;
    long l4 = l1 >>> 32 | l2 & 0xFFFFFFFF00000000L;
    l1 = Interleave.unshuffle(paramArrayOfLong1[2]);
    l2 = Interleave.unshuffle(paramArrayOfLong1[3]);
    long l5 = l1 & 0xFFFFFFFFL | l2 << 32;
    long l6 = l1 >>> 32 | l2 & 0xFFFFFFFF00000000L;
    long l7 = l6 >>> 27;
    l6 ^= (l4 >>> 27 | l6 << 37);
    l4 ^= l4 << 37;
    long[] arrayOfLong = Nat256.createExt64();
    int[] arrayOfInt = { 32, 117, 191 };
    for (byte b = 0; b < arrayOfInt.length; b++) {
      int i = arrayOfInt[b] >>> 6;
      int j = arrayOfInt[b] & 0x3F;
      arrayOfLong[i] = arrayOfLong[i] ^ l4 << j;
      arrayOfLong[i + 1] = arrayOfLong[i + 1] ^ (l6 << j | l4 >>> -j);
      arrayOfLong[i + 2] = arrayOfLong[i + 2] ^ (l7 << j | l6 >>> -j);
      arrayOfLong[i + 3] = arrayOfLong[i + 3] ^ l7 >>> -j;
    } 
    reduce(arrayOfLong, paramArrayOfLong2);
    paramArrayOfLong2[0] = paramArrayOfLong2[0] ^ l3;
    paramArrayOfLong2[1] = paramArrayOfLong2[1] ^ l5;
  }
  
  public static void square(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    long[] arrayOfLong = Nat256.createExt64();
    implSquare(paramArrayOfLong1, arrayOfLong);
    reduce(arrayOfLong, paramArrayOfLong2);
  }
  
  public static void squareAddToExt(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    long[] arrayOfLong = Nat256.createExt64();
    implSquare(paramArrayOfLong1, arrayOfLong);
    addExt(paramArrayOfLong2, arrayOfLong, paramArrayOfLong2);
  }
  
  public static void squareN(long[] paramArrayOfLong1, int paramInt, long[] paramArrayOfLong2) {
    long[] arrayOfLong = Nat256.createExt64();
    implSquare(paramArrayOfLong1, arrayOfLong);
    reduce(arrayOfLong, paramArrayOfLong2);
    while (--paramInt > 0) {
      implSquare(paramArrayOfLong2, arrayOfLong);
      reduce(arrayOfLong, paramArrayOfLong2);
    } 
  }
  
  public static int trace(long[] paramArrayOfLong) { return (int)(paramArrayOfLong[0] ^ paramArrayOfLong[2] >>> 31) & true; }
  
  protected static void implCompactExt(long[] paramArrayOfLong) {
    long l1 = paramArrayOfLong[0];
    long l2 = paramArrayOfLong[1];
    long l3 = paramArrayOfLong[2];
    long l4 = paramArrayOfLong[3];
    long l5 = paramArrayOfLong[4];
    long l6 = paramArrayOfLong[5];
    long l7 = paramArrayOfLong[6];
    long l8 = paramArrayOfLong[7];
    paramArrayOfLong[0] = l1 ^ l2 << 59;
    paramArrayOfLong[1] = l2 >>> 5 ^ l3 << 54;
    paramArrayOfLong[2] = l3 >>> 10 ^ l4 << 49;
    paramArrayOfLong[3] = l4 >>> 15 ^ l5 << 44;
    paramArrayOfLong[4] = l5 >>> 20 ^ l6 << 39;
    paramArrayOfLong[5] = l6 >>> 25 ^ l7 << 34;
    paramArrayOfLong[6] = l7 >>> 30 ^ l8 << 29;
    paramArrayOfLong[7] = l8 >>> 35;
  }
  
  protected static void implExpand(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    long l1 = paramArrayOfLong1[0];
    long l2 = paramArrayOfLong1[1];
    long l3 = paramArrayOfLong1[2];
    long l4 = paramArrayOfLong1[3];
    paramArrayOfLong2[0] = l1 & 0x7FFFFFFFFFFFFFFL;
    paramArrayOfLong2[1] = (l1 >>> 59 ^ l2 << 5) & 0x7FFFFFFFFFFFFFFL;
    paramArrayOfLong2[2] = (l2 >>> 54 ^ l3 << 10) & 0x7FFFFFFFFFFFFFFL;
    paramArrayOfLong2[3] = l3 >>> 49 ^ l4 << 15;
  }
  
  protected static void implMultiply(long[] paramArrayOfLong1, long[] paramArrayOfLong2, long[] paramArrayOfLong3) {
    long[] arrayOfLong1 = new long[4];
    long[] arrayOfLong2 = new long[4];
    implExpand(paramArrayOfLong1, arrayOfLong1);
    implExpand(paramArrayOfLong2, arrayOfLong2);
    long[] arrayOfLong3 = new long[8];
    implMulwAcc(arrayOfLong3, arrayOfLong1[0], arrayOfLong2[0], paramArrayOfLong3, 0);
    implMulwAcc(arrayOfLong3, arrayOfLong1[1], arrayOfLong2[1], paramArrayOfLong3, 1);
    implMulwAcc(arrayOfLong3, arrayOfLong1[2], arrayOfLong2[2], paramArrayOfLong3, 2);
    implMulwAcc(arrayOfLong3, arrayOfLong1[3], arrayOfLong2[3], paramArrayOfLong3, 3);
    byte b;
    for (b = 5; b > 0; b--)
      paramArrayOfLong3[b] = paramArrayOfLong3[b] ^ paramArrayOfLong3[b - 1]; 
    implMulwAcc(arrayOfLong3, arrayOfLong1[0] ^ arrayOfLong1[1], arrayOfLong2[0] ^ arrayOfLong2[1], paramArrayOfLong3, 1);
    implMulwAcc(arrayOfLong3, arrayOfLong1[2] ^ arrayOfLong1[3], arrayOfLong2[2] ^ arrayOfLong2[3], paramArrayOfLong3, 3);
    for (b = 7; b > 1; b--)
      paramArrayOfLong3[b] = paramArrayOfLong3[b] ^ paramArrayOfLong3[b - 2]; 
    long l1 = arrayOfLong1[0] ^ arrayOfLong1[2];
    long l2 = arrayOfLong1[1] ^ arrayOfLong1[3];
    long l3 = arrayOfLong2[0] ^ arrayOfLong2[2];
    long l4 = arrayOfLong2[1] ^ arrayOfLong2[3];
    implMulwAcc(arrayOfLong3, l1 ^ l2, l3 ^ l4, paramArrayOfLong3, 3);
    long[] arrayOfLong4 = new long[3];
    implMulwAcc(arrayOfLong3, l1, l3, arrayOfLong4, 0);
    implMulwAcc(arrayOfLong3, l2, l4, arrayOfLong4, 1);
    long l5 = arrayOfLong4[0];
    long l6 = arrayOfLong4[1];
    long l7 = arrayOfLong4[2];
    paramArrayOfLong3[2] = paramArrayOfLong3[2] ^ l5;
    paramArrayOfLong3[3] = paramArrayOfLong3[3] ^ l5 ^ l6;
    paramArrayOfLong3[4] = paramArrayOfLong3[4] ^ l7 ^ l6;
    paramArrayOfLong3[5] = paramArrayOfLong3[5] ^ l7;
    implCompactExt(paramArrayOfLong3);
  }
  
  protected static void implMulwAcc(long[] paramArrayOfLong1, long paramLong1, long paramLong2, long[] paramArrayOfLong2, int paramInt) {
    paramArrayOfLong1[1] = paramLong2;
    paramArrayOfLong1[2] = paramArrayOfLong1[1] << true;
    paramArrayOfLong1[3] = paramArrayOfLong1[2] ^ paramLong2;
    paramArrayOfLong1[4] = paramArrayOfLong1[2] << true;
    paramArrayOfLong1[5] = paramArrayOfLong1[4] ^ paramLong2;
    paramArrayOfLong1[6] = paramArrayOfLong1[3] << true;
    paramArrayOfLong1[7] = paramArrayOfLong1[6] ^ paramLong2;
    int i = (int)paramLong1;
    long l1 = 0L;
    long l2 = paramArrayOfLong1[i & 0x7] ^ paramArrayOfLong1[i >>> 3 & 0x7] << 3;
    byte b = 54;
    do {
      i = (int)(paramLong1 >>> b);
      long l = paramArrayOfLong1[i & 0x7] ^ paramArrayOfLong1[i >>> 3 & 0x7] << 3;
      l2 ^= l << b;
      l1 ^= l >>> -b;
      b -= 6;
    } while (b > 0);
    paramArrayOfLong2[paramInt] = paramArrayOfLong2[paramInt] ^ l2 & 0x7FFFFFFFFFFFFFFL;
    paramArrayOfLong2[paramInt + 1] = paramArrayOfLong2[paramInt + 1] ^ l2 >>> 59 ^ l1 << 5;
  }
  
  protected static void implSquare(long[] paramArrayOfLong1, long[] paramArrayOfLong2) { Interleave.expand64To128(paramArrayOfLong1, 0, 4, paramArrayOfLong2, 0); }
}
