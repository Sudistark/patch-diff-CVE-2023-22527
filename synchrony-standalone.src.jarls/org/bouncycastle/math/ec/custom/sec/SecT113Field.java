package org.bouncycastle.math.ec.custom.sec;

import java.math.BigInteger;
import org.bouncycastle.math.raw.Interleave;
import org.bouncycastle.math.raw.Nat;
import org.bouncycastle.math.raw.Nat128;

public class SecT113Field {
  private static final long M49 = 562949953421311L;
  
  private static final long M57 = 144115188075855871L;
  
  public static void add(long[] paramArrayOfLong1, long[] paramArrayOfLong2, long[] paramArrayOfLong3) {
    paramArrayOfLong3[0] = paramArrayOfLong1[0] ^ paramArrayOfLong2[0];
    paramArrayOfLong3[1] = paramArrayOfLong1[1] ^ paramArrayOfLong2[1];
  }
  
  public static void addExt(long[] paramArrayOfLong1, long[] paramArrayOfLong2, long[] paramArrayOfLong3) {
    paramArrayOfLong3[0] = paramArrayOfLong1[0] ^ paramArrayOfLong2[0];
    paramArrayOfLong3[1] = paramArrayOfLong1[1] ^ paramArrayOfLong2[1];
    paramArrayOfLong3[2] = paramArrayOfLong1[2] ^ paramArrayOfLong2[2];
    paramArrayOfLong3[3] = paramArrayOfLong1[3] ^ paramArrayOfLong2[3];
  }
  
  public static void addOne(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    paramArrayOfLong2[0] = paramArrayOfLong1[0] ^ 0x1L;
    paramArrayOfLong2[1] = paramArrayOfLong1[1];
  }
  
  private static void addTo(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    paramArrayOfLong2[0] = paramArrayOfLong2[0] ^ paramArrayOfLong1[0];
    paramArrayOfLong2[1] = paramArrayOfLong2[1] ^ paramArrayOfLong1[1];
  }
  
  public static long[] fromBigInteger(BigInteger paramBigInteger) { return Nat.fromBigInteger64(113, paramBigInteger); }
  
  public static void halfTrace(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    long[] arrayOfLong = Nat128.createExt64();
    Nat128.copy64(paramArrayOfLong1, paramArrayOfLong2);
    for (boolean bool = true; bool < 113; bool += true) {
      implSquare(paramArrayOfLong2, arrayOfLong);
      reduce(arrayOfLong, paramArrayOfLong2);
      implSquare(paramArrayOfLong2, arrayOfLong);
      reduce(arrayOfLong, paramArrayOfLong2);
      addTo(paramArrayOfLong1, paramArrayOfLong2);
    } 
  }
  
  public static void invert(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    if (Nat128.isZero64(paramArrayOfLong1))
      throw new IllegalStateException(); 
    long[] arrayOfLong1 = Nat128.create64();
    long[] arrayOfLong2 = Nat128.create64();
    square(paramArrayOfLong1, arrayOfLong1);
    multiply(arrayOfLong1, paramArrayOfLong1, arrayOfLong1);
    square(arrayOfLong1, arrayOfLong1);
    multiply(arrayOfLong1, paramArrayOfLong1, arrayOfLong1);
    squareN(arrayOfLong1, 3, arrayOfLong2);
    multiply(arrayOfLong2, arrayOfLong1, arrayOfLong2);
    square(arrayOfLong2, arrayOfLong2);
    multiply(arrayOfLong2, paramArrayOfLong1, arrayOfLong2);
    squareN(arrayOfLong2, 7, arrayOfLong1);
    multiply(arrayOfLong1, arrayOfLong2, arrayOfLong1);
    squareN(arrayOfLong1, 14, arrayOfLong2);
    multiply(arrayOfLong2, arrayOfLong1, arrayOfLong2);
    squareN(arrayOfLong2, 28, arrayOfLong1);
    multiply(arrayOfLong1, arrayOfLong2, arrayOfLong1);
    squareN(arrayOfLong1, 56, arrayOfLong2);
    multiply(arrayOfLong2, arrayOfLong1, arrayOfLong2);
    square(arrayOfLong2, paramArrayOfLong2);
  }
  
  public static void multiply(long[] paramArrayOfLong1, long[] paramArrayOfLong2, long[] paramArrayOfLong3) {
    long[] arrayOfLong = new long[8];
    implMultiply(paramArrayOfLong1, paramArrayOfLong2, arrayOfLong);
    reduce(arrayOfLong, paramArrayOfLong3);
  }
  
  public static void multiplyAddToExt(long[] paramArrayOfLong1, long[] paramArrayOfLong2, long[] paramArrayOfLong3) {
    long[] arrayOfLong = new long[8];
    implMultiply(paramArrayOfLong1, paramArrayOfLong2, arrayOfLong);
    addExt(paramArrayOfLong3, arrayOfLong, paramArrayOfLong3);
  }
  
  public static void reduce(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    long l1 = paramArrayOfLong1[0];
    long l2 = paramArrayOfLong1[1];
    long l3 = paramArrayOfLong1[2];
    long l4 = paramArrayOfLong1[3];
    l2 ^= l4 << 15 ^ l4 << 24;
    l3 ^= l4 >>> 49 ^ l4 >>> 40;
    l1 ^= l3 << 15 ^ l3 << 24;
    l2 ^= l3 >>> 49 ^ l3 >>> 40;
    long l5 = l2 >>> 49;
    paramArrayOfLong2[0] = l1 ^ l5 ^ l5 << 9;
    paramArrayOfLong2[1] = l2 & 0x1FFFFFFFFFFFFL;
  }
  
  public static void reduce15(long[] paramArrayOfLong, int paramInt) {
    long l1 = paramArrayOfLong[paramInt + 1];
    long l2 = l1 >>> 49;
    paramArrayOfLong[paramInt] = paramArrayOfLong[paramInt] ^ l2 ^ l2 << 9;
    paramArrayOfLong[paramInt + 1] = l1 & 0x1FFFFFFFFFFFFL;
  }
  
  public static void sqrt(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    long l1 = Interleave.unshuffle(paramArrayOfLong1[0]);
    long l2 = Interleave.unshuffle(paramArrayOfLong1[1]);
    long l3 = l1 & 0xFFFFFFFFL | l2 << 32;
    long l4 = l1 >>> 32 | l2 & 0xFFFFFFFF00000000L;
    paramArrayOfLong2[0] = l3 ^ l4 << 57 ^ l4 << 5;
    paramArrayOfLong2[1] = l4 >>> 7 ^ l4 >>> 59;
  }
  
  public static void square(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    long[] arrayOfLong = Nat128.createExt64();
    implSquare(paramArrayOfLong1, arrayOfLong);
    reduce(arrayOfLong, paramArrayOfLong2);
  }
  
  public static void squareAddToExt(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    long[] arrayOfLong = Nat128.createExt64();
    implSquare(paramArrayOfLong1, arrayOfLong);
    addExt(paramArrayOfLong2, arrayOfLong, paramArrayOfLong2);
  }
  
  public static void squareN(long[] paramArrayOfLong1, int paramInt, long[] paramArrayOfLong2) {
    long[] arrayOfLong = Nat128.createExt64();
    implSquare(paramArrayOfLong1, arrayOfLong);
    reduce(arrayOfLong, paramArrayOfLong2);
    while (--paramInt > 0) {
      implSquare(paramArrayOfLong2, arrayOfLong);
      reduce(arrayOfLong, paramArrayOfLong2);
    } 
  }
  
  public static int trace(long[] paramArrayOfLong) { return (int)paramArrayOfLong[0] & true; }
  
  protected static void implMultiply(long[] paramArrayOfLong1, long[] paramArrayOfLong2, long[] paramArrayOfLong3) {
    long l1 = paramArrayOfLong1[0];
    long l2 = paramArrayOfLong1[1];
    l2 = (l1 >>> 57 ^ l2 << 7) & 0x1FFFFFFFFFFFFFFL;
    l1 &= 0x1FFFFFFFFFFFFFFL;
    long l3 = paramArrayOfLong2[0];
    long l4 = paramArrayOfLong2[1];
    l4 = (l3 >>> 57 ^ l4 << 7) & 0x1FFFFFFFFFFFFFFL;
    l3 &= 0x1FFFFFFFFFFFFFFL;
    long[] arrayOfLong1 = paramArrayOfLong3;
    long[] arrayOfLong2 = new long[6];
    implMulw(arrayOfLong1, l1, l3, arrayOfLong2, 0);
    implMulw(arrayOfLong1, l2, l4, arrayOfLong2, 2);
    implMulw(arrayOfLong1, l1 ^ l2, l3 ^ l4, arrayOfLong2, 4);
    long l5 = arrayOfLong2[1] ^ arrayOfLong2[2];
    long l6 = arrayOfLong2[0];
    long l7 = arrayOfLong2[3];
    long l8 = arrayOfLong2[4] ^ l6 ^ l5;
    long l9 = arrayOfLong2[5] ^ l7 ^ l5;
    paramArrayOfLong3[0] = l6 ^ l8 << 57;
    paramArrayOfLong3[1] = l8 >>> 7 ^ l9 << 50;
    paramArrayOfLong3[2] = l9 >>> 14 ^ l7 << 43;
    paramArrayOfLong3[3] = l7 >>> 21;
  }
  
  protected static void implMulw(long[] paramArrayOfLong1, long paramLong1, long paramLong2, long[] paramArrayOfLong2, int paramInt) {
    paramArrayOfLong1[1] = paramLong2;
    paramArrayOfLong1[2] = paramArrayOfLong1[1] << true;
    paramArrayOfLong1[3] = paramArrayOfLong1[2] ^ paramLong2;
    paramArrayOfLong1[4] = paramArrayOfLong1[2] << true;
    paramArrayOfLong1[5] = paramArrayOfLong1[4] ^ paramLong2;
    paramArrayOfLong1[6] = paramArrayOfLong1[3] << true;
    paramArrayOfLong1[7] = paramArrayOfLong1[6] ^ paramLong2;
    int i = (int)paramLong1;
    long l1 = 0L;
    long l2 = paramArrayOfLong1[i & 0x7];
    byte b = 48;
    do {
      i = (int)(paramLong1 >>> b);
      long l = paramArrayOfLong1[i & 0x7] ^ paramArrayOfLong1[i >>> 3 & 0x7] << 3 ^ paramArrayOfLong1[i >>> 6 & 0x7] << 6;
      l2 ^= l << b;
      l1 ^= l >>> -b;
      b -= 9;
    } while (b > 0);
    l1 ^= (paramLong1 & 0x100804020100800L & paramLong2 << 7 >> 63) >>> 8;
    paramArrayOfLong2[paramInt] = l2 & 0x1FFFFFFFFFFFFFFL;
    paramArrayOfLong2[paramInt + 1] = l2 >>> 57 ^ l1 << 7;
  }
  
  protected static void implSquare(long[] paramArrayOfLong1, long[] paramArrayOfLong2) { Interleave.expand64To128(paramArrayOfLong1, 0, 2, paramArrayOfLong2, 0); }
}
