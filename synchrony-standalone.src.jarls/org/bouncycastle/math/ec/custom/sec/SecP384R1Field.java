package org.bouncycastle.math.ec.custom.sec;

import java.math.BigInteger;
import java.security.SecureRandom;
import org.bouncycastle.math.raw.Mod;
import org.bouncycastle.math.raw.Nat;
import org.bouncycastle.math.raw.Nat384;
import org.bouncycastle.util.Pack;

public class SecP384R1Field {
  private static final long M = 4294967295L;
  
  static final int[] P = { 
      -1, 0, 0, -1, -2, -1, -1, -1, -1, -1, 
      -1, -1 };
  
  private static final int[] PExt = { 
      1, -2, 0, 2, 0, -2, 0, 2, 1, 0, 
      0, 0, -2, 1, 0, -2, -3, -1, -1, -1, 
      -1, -1, -1, -1 };
  
  private static final int[] PExtInv = { 
      -1, 1, -1, -3, -1, 1, -1, -3, -2, -1, 
      -1, -1, 1, -2, -1, 1, 2 };
  
  private static final int P11 = -1;
  
  private static final int PExt23 = -1;
  
  public static void add(int[] paramArrayOfInt1, int[] paramArrayOfInt2, int[] paramArrayOfInt3) {
    int i = Nat.add(12, paramArrayOfInt1, paramArrayOfInt2, paramArrayOfInt3);
    if (i != 0 || (paramArrayOfInt3[11] == -1 && Nat.gte(12, paramArrayOfInt3, P)))
      addPInvTo(paramArrayOfInt3); 
  }
  
  public static void addExt(int[] paramArrayOfInt1, int[] paramArrayOfInt2, int[] paramArrayOfInt3) {
    int i = Nat.add(24, paramArrayOfInt1, paramArrayOfInt2, paramArrayOfInt3);
    if ((i != 0 || (paramArrayOfInt3[23] == -1 && Nat.gte(24, paramArrayOfInt3, PExt))) && Nat.addTo(PExtInv.length, PExtInv, paramArrayOfInt3) != 0)
      Nat.incAt(24, paramArrayOfInt3, PExtInv.length); 
  }
  
  public static void addOne(int[] paramArrayOfInt1, int[] paramArrayOfInt2) {
    int i = Nat.inc(12, paramArrayOfInt1, paramArrayOfInt2);
    if (i != 0 || (paramArrayOfInt2[11] == -1 && Nat.gte(12, paramArrayOfInt2, P)))
      addPInvTo(paramArrayOfInt2); 
  }
  
  public static int[] fromBigInteger(BigInteger paramBigInteger) {
    int[] arrayOfInt = Nat.fromBigInteger(384, paramBigInteger);
    if (arrayOfInt[11] == -1 && Nat.gte(12, arrayOfInt, P))
      Nat.subFrom(12, P, arrayOfInt); 
    return arrayOfInt;
  }
  
  public static void half(int[] paramArrayOfInt1, int[] paramArrayOfInt2) {
    if ((paramArrayOfInt1[0] & true) == 0) {
      Nat.shiftDownBit(12, paramArrayOfInt1, 0, paramArrayOfInt2);
    } else {
      int i = Nat.add(12, paramArrayOfInt1, P, paramArrayOfInt2);
      Nat.shiftDownBit(12, paramArrayOfInt2, i);
    } 
  }
  
  public static void inv(int[] paramArrayOfInt1, int[] paramArrayOfInt2) { Mod.checkedModOddInverse(P, paramArrayOfInt1, paramArrayOfInt2); }
  
  public static int isZero(int[] paramArrayOfInt) {
    int i = 0;
    for (byte b = 0; b < 12; b++)
      i |= paramArrayOfInt[b]; 
    i = i >>> 1 | i & true;
    return i - 1 >> 31;
  }
  
  public static void multiply(int[] paramArrayOfInt1, int[] paramArrayOfInt2, int[] paramArrayOfInt3) {
    int[] arrayOfInt = Nat.create(24);
    Nat384.mul(paramArrayOfInt1, paramArrayOfInt2, arrayOfInt);
    reduce(arrayOfInt, paramArrayOfInt3);
  }
  
  public static void negate(int[] paramArrayOfInt1, int[] paramArrayOfInt2) {
    if (0 != isZero(paramArrayOfInt1)) {
      Nat.sub(12, P, P, paramArrayOfInt2);
    } else {
      Nat.sub(12, P, paramArrayOfInt1, paramArrayOfInt2);
    } 
  }
  
  public static void random(SecureRandom paramSecureRandom, int[] paramArrayOfInt) {
    byte[] arrayOfByte = new byte[48];
    do {
      paramSecureRandom.nextBytes(arrayOfByte);
      Pack.littleEndianToInt(arrayOfByte, 0, paramArrayOfInt, 0, 12);
    } while (0 == Nat.lessThan(12, paramArrayOfInt, P));
  }
  
  public static void randomMult(SecureRandom paramSecureRandom, int[] paramArrayOfInt) {
    do {
      random(paramSecureRandom, paramArrayOfInt);
    } while (0 != isZero(paramArrayOfInt));
  }
  
  public static void reduce(int[] paramArrayOfInt1, int[] paramArrayOfInt2) {
    long l1 = paramArrayOfInt1[16] & 0xFFFFFFFFL;
    long l2 = paramArrayOfInt1[17] & 0xFFFFFFFFL;
    long l3 = paramArrayOfInt1[18] & 0xFFFFFFFFL;
    long l4 = paramArrayOfInt1[19] & 0xFFFFFFFFL;
    long l5 = paramArrayOfInt1[20] & 0xFFFFFFFFL;
    long l6 = paramArrayOfInt1[21] & 0xFFFFFFFFL;
    long l7 = paramArrayOfInt1[22] & 0xFFFFFFFFL;
    long l8 = paramArrayOfInt1[23] & 0xFFFFFFFFL;
    long l9 = (paramArrayOfInt1[12] & 0xFFFFFFFFL) + l5 - 1L;
    long l10 = (paramArrayOfInt1[13] & 0xFFFFFFFFL) + l7;
    long l11 = (paramArrayOfInt1[14] & 0xFFFFFFFFL) + l7 + l8;
    long l12 = (paramArrayOfInt1[15] & 0xFFFFFFFFL) + l8;
    long l13 = l2 + l6;
    long l14 = l6 - l8;
    long l15 = l7 - l8;
    long l16 = l9 + l14;
    long l17 = 0L;
    l17 += (paramArrayOfInt1[0] & 0xFFFFFFFFL) + l16;
    paramArrayOfInt2[0] = (int)l17;
    l17 >>= 32;
    l17 += (paramArrayOfInt1[1] & 0xFFFFFFFFL) + l8 - l9 + l10;
    paramArrayOfInt2[1] = (int)l17;
    l17 >>= 32;
    l17 += (paramArrayOfInt1[2] & 0xFFFFFFFFL) - l6 - l10 + l11;
    paramArrayOfInt2[2] = (int)l17;
    l17 >>= 32;
    l17 += (paramArrayOfInt1[3] & 0xFFFFFFFFL) - l11 + l12 + l16;
    paramArrayOfInt2[3] = (int)l17;
    l17 >>= 32;
    l17 += (paramArrayOfInt1[4] & 0xFFFFFFFFL) + l1 + l6 + l10 - l12 + l16;
    paramArrayOfInt2[4] = (int)l17;
    l17 >>= 32;
    l17 += (paramArrayOfInt1[5] & 0xFFFFFFFFL) - l1 + l10 + l11 + l13;
    paramArrayOfInt2[5] = (int)l17;
    l17 >>= 32;
    l17 += (paramArrayOfInt1[6] & 0xFFFFFFFFL) + l3 - l2 + l11 + l12;
    paramArrayOfInt2[6] = (int)l17;
    l17 >>= 32;
    l17 += (paramArrayOfInt1[7] & 0xFFFFFFFFL) + l1 + l4 - l3 + l12;
    paramArrayOfInt2[7] = (int)l17;
    l17 >>= 32;
    l17 += (paramArrayOfInt1[8] & 0xFFFFFFFFL) + l1 + l2 + l5 - l4;
    paramArrayOfInt2[8] = (int)l17;
    l17 >>= 32;
    l17 += (paramArrayOfInt1[9] & 0xFFFFFFFFL) + l3 - l5 + l13;
    paramArrayOfInt2[9] = (int)l17;
    l17 >>= 32;
    l17 += (paramArrayOfInt1[10] & 0xFFFFFFFFL) + l3 + l4 - l14 + l15;
    paramArrayOfInt2[10] = (int)l17;
    l17 >>= 32;
    l17 += (paramArrayOfInt1[11] & 0xFFFFFFFFL) + l4 + l5 - l15;
    paramArrayOfInt2[11] = (int)l17;
    l17 >>= 32;
    l17++;
    reduce32((int)l17, paramArrayOfInt2);
  }
  
  public static void reduce32(int paramInt, int[] paramArrayOfInt) {
    long l = 0L;
    if (paramInt != 0) {
      long l1 = paramInt & 0xFFFFFFFFL;
      l += (paramArrayOfInt[0] & 0xFFFFFFFFL) + l1;
      paramArrayOfInt[0] = (int)l;
      l >>= 32;
      l += (paramArrayOfInt[1] & 0xFFFFFFFFL) - l1;
      paramArrayOfInt[1] = (int)l;
      l >>= 32;
      if (l != 0L) {
        l += (paramArrayOfInt[2] & 0xFFFFFFFFL);
        paramArrayOfInt[2] = (int)l;
        l >>= 32;
      } 
      l += (paramArrayOfInt[3] & 0xFFFFFFFFL) + l1;
      paramArrayOfInt[3] = (int)l;
      l >>= 32;
      l += (paramArrayOfInt[4] & 0xFFFFFFFFL) + l1;
      paramArrayOfInt[4] = (int)l;
      l >>= 32;
    } 
    if ((l != 0L && Nat.incAt(12, paramArrayOfInt, 5) != 0) || (paramArrayOfInt[11] == -1 && Nat.gte(12, paramArrayOfInt, P)))
      addPInvTo(paramArrayOfInt); 
  }
  
  public static void square(int[] paramArrayOfInt1, int[] paramArrayOfInt2) {
    int[] arrayOfInt = Nat.create(24);
    Nat384.square(paramArrayOfInt1, arrayOfInt);
    reduce(arrayOfInt, paramArrayOfInt2);
  }
  
  public static void squareN(int[] paramArrayOfInt1, int paramInt, int[] paramArrayOfInt2) {
    int[] arrayOfInt = Nat.create(24);
    Nat384.square(paramArrayOfInt1, arrayOfInt);
    reduce(arrayOfInt, paramArrayOfInt2);
    while (--paramInt > 0) {
      Nat384.square(paramArrayOfInt2, arrayOfInt);
      reduce(arrayOfInt, paramArrayOfInt2);
    } 
  }
  
  public static void subtract(int[] paramArrayOfInt1, int[] paramArrayOfInt2, int[] paramArrayOfInt3) {
    int i = Nat.sub(12, paramArrayOfInt1, paramArrayOfInt2, paramArrayOfInt3);
    if (i != 0)
      subPInvFrom(paramArrayOfInt3); 
  }
  
  public static void subtractExt(int[] paramArrayOfInt1, int[] paramArrayOfInt2, int[] paramArrayOfInt3) {
    int i = Nat.sub(24, paramArrayOfInt1, paramArrayOfInt2, paramArrayOfInt3);
    if (i != 0 && Nat.subFrom(PExtInv.length, PExtInv, paramArrayOfInt3) != 0)
      Nat.decAt(24, paramArrayOfInt3, PExtInv.length); 
  }
  
  public static void twice(int[] paramArrayOfInt1, int[] paramArrayOfInt2) {
    int i = Nat.shiftUpBit(12, paramArrayOfInt1, 0, paramArrayOfInt2);
    if (i != 0 || (paramArrayOfInt2[11] == -1 && Nat.gte(12, paramArrayOfInt2, P)))
      addPInvTo(paramArrayOfInt2); 
  }
  
  private static void addPInvTo(int[] paramArrayOfInt) {
    long l = (paramArrayOfInt[0] & 0xFFFFFFFFL) + 1L;
    paramArrayOfInt[0] = (int)l;
    l >>= 32;
    l += (paramArrayOfInt[1] & 0xFFFFFFFFL) - 1L;
    paramArrayOfInt[1] = (int)l;
    l >>= 32;
    if (l != 0L) {
      l += (paramArrayOfInt[2] & 0xFFFFFFFFL);
      paramArrayOfInt[2] = (int)l;
      l >>= 32;
    } 
    l += (paramArrayOfInt[3] & 0xFFFFFFFFL) + 1L;
    paramArrayOfInt[3] = (int)l;
    l >>= 32;
    l += (paramArrayOfInt[4] & 0xFFFFFFFFL) + 1L;
    paramArrayOfInt[4] = (int)l;
    l >>= 32;
    if (l != 0L)
      Nat.incAt(12, paramArrayOfInt, 5); 
  }
  
  private static void subPInvFrom(int[] paramArrayOfInt) {
    long l = (paramArrayOfInt[0] & 0xFFFFFFFFL) - 1L;
    paramArrayOfInt[0] = (int)l;
    l >>= 32;
    l += (paramArrayOfInt[1] & 0xFFFFFFFFL) + 1L;
    paramArrayOfInt[1] = (int)l;
    l >>= 32;
    if (l != 0L) {
      l += (paramArrayOfInt[2] & 0xFFFFFFFFL);
      paramArrayOfInt[2] = (int)l;
      l >>= 32;
    } 
    l += (paramArrayOfInt[3] & 0xFFFFFFFFL) - 1L;
    paramArrayOfInt[3] = (int)l;
    l >>= 32;
    l += (paramArrayOfInt[4] & 0xFFFFFFFFL) - 1L;
    paramArrayOfInt[4] = (int)l;
    l >>= 32;
    if (l != 0L)
      Nat.decAt(12, paramArrayOfInt, 5); 
  }
}
