package org.bouncycastle.math.ec.custom.sec;

import java.math.BigInteger;
import org.bouncycastle.math.raw.Interleave;
import org.bouncycastle.math.raw.Nat;
import org.bouncycastle.math.raw.Nat448;

public class SecT409Field {
  private static final long M25 = 33554431L;
  
  private static final long M59 = 576460752303423487L;
  
  public static void add(long[] paramArrayOfLong1, long[] paramArrayOfLong2, long[] paramArrayOfLong3) {
    paramArrayOfLong3[0] = paramArrayOfLong1[0] ^ paramArrayOfLong2[0];
    paramArrayOfLong3[1] = paramArrayOfLong1[1] ^ paramArrayOfLong2[1];
    paramArrayOfLong3[2] = paramArrayOfLong1[2] ^ paramArrayOfLong2[2];
    paramArrayOfLong3[3] = paramArrayOfLong1[3] ^ paramArrayOfLong2[3];
    paramArrayOfLong3[4] = paramArrayOfLong1[4] ^ paramArrayOfLong2[4];
    paramArrayOfLong3[5] = paramArrayOfLong1[5] ^ paramArrayOfLong2[5];
    paramArrayOfLong3[6] = paramArrayOfLong1[6] ^ paramArrayOfLong2[6];
  }
  
  public static void addExt(long[] paramArrayOfLong1, long[] paramArrayOfLong2, long[] paramArrayOfLong3) {
    for (byte b = 0; b < 13; b++)
      paramArrayOfLong3[b] = paramArrayOfLong1[b] ^ paramArrayOfLong2[b]; 
  }
  
  public static void addOne(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    paramArrayOfLong2[0] = paramArrayOfLong1[0] ^ 0x1L;
    paramArrayOfLong2[1] = paramArrayOfLong1[1];
    paramArrayOfLong2[2] = paramArrayOfLong1[2];
    paramArrayOfLong2[3] = paramArrayOfLong1[3];
    paramArrayOfLong2[4] = paramArrayOfLong1[4];
    paramArrayOfLong2[5] = paramArrayOfLong1[5];
    paramArrayOfLong2[6] = paramArrayOfLong1[6];
  }
  
  private static void addTo(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    paramArrayOfLong2[0] = paramArrayOfLong2[0] ^ paramArrayOfLong1[0];
    paramArrayOfLong2[1] = paramArrayOfLong2[1] ^ paramArrayOfLong1[1];
    paramArrayOfLong2[2] = paramArrayOfLong2[2] ^ paramArrayOfLong1[2];
    paramArrayOfLong2[3] = paramArrayOfLong2[3] ^ paramArrayOfLong1[3];
    paramArrayOfLong2[4] = paramArrayOfLong2[4] ^ paramArrayOfLong1[4];
    paramArrayOfLong2[5] = paramArrayOfLong2[5] ^ paramArrayOfLong1[5];
    paramArrayOfLong2[6] = paramArrayOfLong2[6] ^ paramArrayOfLong1[6];
  }
  
  public static long[] fromBigInteger(BigInteger paramBigInteger) { return Nat.fromBigInteger64(409, paramBigInteger); }
  
  public static void halfTrace(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    long[] arrayOfLong = Nat.create64(13);
    Nat448.copy64(paramArrayOfLong1, paramArrayOfLong2);
    for (boolean bool = true; bool < 'Æ™'; bool += true) {
      implSquare(paramArrayOfLong2, arrayOfLong);
      reduce(arrayOfLong, paramArrayOfLong2);
      implSquare(paramArrayOfLong2, arrayOfLong);
      reduce(arrayOfLong, paramArrayOfLong2);
      addTo(paramArrayOfLong1, paramArrayOfLong2);
    } 
  }
  
  public static void invert(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    if (Nat448.isZero64(paramArrayOfLong1))
      throw new IllegalStateException(); 
    long[] arrayOfLong1 = Nat448.create64();
    long[] arrayOfLong2 = Nat448.create64();
    long[] arrayOfLong3 = Nat448.create64();
    square(paramArrayOfLong1, arrayOfLong1);
    squareN(arrayOfLong1, 1, arrayOfLong2);
    multiply(arrayOfLong1, arrayOfLong2, arrayOfLong1);
    squareN(arrayOfLong2, 1, arrayOfLong2);
    multiply(arrayOfLong1, arrayOfLong2, arrayOfLong1);
    squareN(arrayOfLong1, 3, arrayOfLong2);
    multiply(arrayOfLong1, arrayOfLong2, arrayOfLong1);
    squareN(arrayOfLong1, 6, arrayOfLong2);
    multiply(arrayOfLong1, arrayOfLong2, arrayOfLong1);
    squareN(arrayOfLong1, 12, arrayOfLong2);
    multiply(arrayOfLong1, arrayOfLong2, arrayOfLong3);
    squareN(arrayOfLong3, 24, arrayOfLong1);
    squareN(arrayOfLong1, 24, arrayOfLong2);
    multiply(arrayOfLong1, arrayOfLong2, arrayOfLong1);
    squareN(arrayOfLong1, 48, arrayOfLong2);
    multiply(arrayOfLong1, arrayOfLong2, arrayOfLong1);
    squareN(arrayOfLong1, 96, arrayOfLong2);
    multiply(arrayOfLong1, arrayOfLong2, arrayOfLong1);
    squareN(arrayOfLong1, 192, arrayOfLong2);
    multiply(arrayOfLong1, arrayOfLong2, arrayOfLong1);
    multiply(arrayOfLong1, arrayOfLong3, paramArrayOfLong2);
  }
  
  public static void multiply(long[] paramArrayOfLong1, long[] paramArrayOfLong2, long[] paramArrayOfLong3) {
    long[] arrayOfLong = Nat448.createExt64();
    implMultiply(paramArrayOfLong1, paramArrayOfLong2, arrayOfLong);
    reduce(arrayOfLong, paramArrayOfLong3);
  }
  
  public static void multiplyAddToExt(long[] paramArrayOfLong1, long[] paramArrayOfLong2, long[] paramArrayOfLong3) {
    long[] arrayOfLong = Nat448.createExt64();
    implMultiply(paramArrayOfLong1, paramArrayOfLong2, arrayOfLong);
    addExt(paramArrayOfLong3, arrayOfLong, paramArrayOfLong3);
  }
  
  public static void reduce(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    long l1 = paramArrayOfLong1[0];
    long l2 = paramArrayOfLong1[1];
    long l3 = paramArrayOfLong1[2];
    long l4 = paramArrayOfLong1[3];
    long l5 = paramArrayOfLong1[4];
    long l6 = paramArrayOfLong1[5];
    long l7 = paramArrayOfLong1[6];
    long l8 = paramArrayOfLong1[7];
    long l9 = paramArrayOfLong1[12];
    l6 ^= l9 << 39;
    l7 ^= l9 >>> 25 ^ l9 << 62;
    l8 ^= l9 >>> 2;
    l9 = paramArrayOfLong1[11];
    l5 ^= l9 << 39;
    l6 ^= l9 >>> 25 ^ l9 << 62;
    l7 ^= l9 >>> 2;
    l9 = paramArrayOfLong1[10];
    l4 ^= l9 << 39;
    l5 ^= l9 >>> 25 ^ l9 << 62;
    l6 ^= l9 >>> 2;
    l9 = paramArrayOfLong1[9];
    l3 ^= l9 << 39;
    l4 ^= l9 >>> 25 ^ l9 << 62;
    l5 ^= l9 >>> 2;
    l9 = paramArrayOfLong1[8];
    l2 ^= l9 << 39;
    l3 ^= l9 >>> 25 ^ l9 << 62;
    l4 ^= l9 >>> 2;
    l9 = l8;
    l1 ^= l9 << 39;
    l2 ^= l9 >>> 25 ^ l9 << 62;
    l3 ^= l9 >>> 2;
    long l10 = l7 >>> 25;
    paramArrayOfLong2[0] = l1 ^ l10;
    paramArrayOfLong2[1] = l2 ^ l10 << 23;
    paramArrayOfLong2[2] = l3;
    paramArrayOfLong2[3] = l4;
    paramArrayOfLong2[4] = l5;
    paramArrayOfLong2[5] = l6;
    paramArrayOfLong2[6] = l7 & 0x1FFFFFFL;
  }
  
  public static void reduce39(long[] paramArrayOfLong, int paramInt) {
    long l1 = paramArrayOfLong[paramInt + 6];
    long l2 = l1 >>> 25;
    paramArrayOfLong[paramInt] = paramArrayOfLong[paramInt] ^ l2;
    paramArrayOfLong[paramInt + 1] = paramArrayOfLong[paramInt + 1] ^ l2 << 23;
    paramArrayOfLong[paramInt + 6] = l1 & 0x1FFFFFFL;
  }
  
  public static void sqrt(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    long l1 = Interleave.unshuffle(paramArrayOfLong1[0]);
    long l2 = Interleave.unshuffle(paramArrayOfLong1[1]);
    long l3 = l1 & 0xFFFFFFFFL | l2 << 32;
    long l4 = l1 >>> 32 | l2 & 0xFFFFFFFF00000000L;
    l1 = Interleave.unshuffle(paramArrayOfLong1[2]);
    l2 = Interleave.unshuffle(paramArrayOfLong1[3]);
    long l5 = l1 & 0xFFFFFFFFL | l2 << 32;
    long l6 = l1 >>> 32 | l2 & 0xFFFFFFFF00000000L;
    l1 = Interleave.unshuffle(paramArrayOfLong1[4]);
    l2 = Interleave.unshuffle(paramArrayOfLong1[5]);
    long l7 = l1 & 0xFFFFFFFFL | l2 << 32;
    long l8 = l1 >>> 32 | l2 & 0xFFFFFFFF00000000L;
    l1 = Interleave.unshuffle(paramArrayOfLong1[6]);
    long l9 = l1 & 0xFFFFFFFFL;
    long l10 = l1 >>> 32;
    paramArrayOfLong2[0] = l3 ^ l4 << 44;
    paramArrayOfLong2[1] = l5 ^ l6 << 44 ^ l4 >>> 20;
    paramArrayOfLong2[2] = l7 ^ l8 << 44 ^ l6 >>> 20;
    paramArrayOfLong2[3] = l9 ^ l10 << 44 ^ l8 >>> 20 ^ l4 << 13;
    paramArrayOfLong2[4] = l10 >>> 20 ^ l6 << 13 ^ l4 >>> 51;
    paramArrayOfLong2[5] = l8 << 13 ^ l6 >>> 51;
    paramArrayOfLong2[6] = l10 << 13 ^ l8 >>> 51;
  }
  
  public static void square(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    long[] arrayOfLong = Nat.create64(13);
    implSquare(paramArrayOfLong1, arrayOfLong);
    reduce(arrayOfLong, paramArrayOfLong2);
  }
  
  public static void squareAddToExt(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    long[] arrayOfLong = Nat.create64(13);
    implSquare(paramArrayOfLong1, arrayOfLong);
    addExt(paramArrayOfLong2, arrayOfLong, paramArrayOfLong2);
  }
  
  public static void squareN(long[] paramArrayOfLong1, int paramInt, long[] paramArrayOfLong2) {
    long[] arrayOfLong = Nat.create64(13);
    implSquare(paramArrayOfLong1, arrayOfLong);
    reduce(arrayOfLong, paramArrayOfLong2);
    while (--paramInt > 0) {
      implSquare(paramArrayOfLong2, arrayOfLong);
      reduce(arrayOfLong, paramArrayOfLong2);
    } 
  }
  
  public static int trace(long[] paramArrayOfLong) { return (int)paramArrayOfLong[0] & true; }
  
  protected static void implCompactExt(long[] paramArrayOfLong) {
    long l1 = paramArrayOfLong[0];
    long l2 = paramArrayOfLong[1];
    long l3 = paramArrayOfLong[2];
    long l4 = paramArrayOfLong[3];
    long l5 = paramArrayOfLong[4];
    long l6 = paramArrayOfLong[5];
    long l7 = paramArrayOfLong[6];
    long l8 = paramArrayOfLong[7];
    long l9 = paramArrayOfLong[8];
    long l10 = paramArrayOfLong[9];
    long l11 = paramArrayOfLong[10];
    long l12 = paramArrayOfLong[11];
    long l13 = paramArrayOfLong[12];
    long l14 = paramArrayOfLong[13];
    paramArrayOfLong[0] = l1 ^ l2 << 59;
    paramArrayOfLong[1] = l2 >>> 5 ^ l3 << 54;
    paramArrayOfLong[2] = l3 >>> 10 ^ l4 << 49;
    paramArrayOfLong[3] = l4 >>> 15 ^ l5 << 44;
    paramArrayOfLong[4] = l5 >>> 20 ^ l6 << 39;
    paramArrayOfLong[5] = l6 >>> 25 ^ l7 << 34;
    paramArrayOfLong[6] = l7 >>> 30 ^ l8 << 29;
    paramArrayOfLong[7] = l8 >>> 35 ^ l9 << 24;
    paramArrayOfLong[8] = l9 >>> 40 ^ l10 << 19;
    paramArrayOfLong[9] = l10 >>> 45 ^ l11 << 14;
    paramArrayOfLong[10] = l11 >>> 50 ^ l12 << 9;
    paramArrayOfLong[11] = l12 >>> 55 ^ l13 << 4 ^ l14 << 63;
    paramArrayOfLong[12] = l14 >>> true;
  }
  
  protected static void implExpand(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    long l1 = paramArrayOfLong1[0];
    long l2 = paramArrayOfLong1[1];
    long l3 = paramArrayOfLong1[2];
    long l4 = paramArrayOfLong1[3];
    long l5 = paramArrayOfLong1[4];
    long l6 = paramArrayOfLong1[5];
    long l7 = paramArrayOfLong1[6];
    paramArrayOfLong2[0] = l1 & 0x7FFFFFFFFFFFFFFL;
    paramArrayOfLong2[1] = (l1 >>> 59 ^ l2 << 5) & 0x7FFFFFFFFFFFFFFL;
    paramArrayOfLong2[2] = (l2 >>> 54 ^ l3 << 10) & 0x7FFFFFFFFFFFFFFL;
    paramArrayOfLong2[3] = (l3 >>> 49 ^ l4 << 15) & 0x7FFFFFFFFFFFFFFL;
    paramArrayOfLong2[4] = (l4 >>> 44 ^ l5 << 20) & 0x7FFFFFFFFFFFFFFL;
    paramArrayOfLong2[5] = (l5 >>> 39 ^ l6 << 25) & 0x7FFFFFFFFFFFFFFL;
    paramArrayOfLong2[6] = l6 >>> 34 ^ l7 << 30;
  }
  
  protected static void implMultiply(long[] paramArrayOfLong1, long[] paramArrayOfLong2, long[] paramArrayOfLong3) {
    long[] arrayOfLong1 = new long[7];
    long[] arrayOfLong2 = new long[7];
    implExpand(paramArrayOfLong1, arrayOfLong1);
    implExpand(paramArrayOfLong2, arrayOfLong2);
    long[] arrayOfLong3 = new long[8];
    for (byte b = 0; b < 7; b++)
      implMulwAcc(arrayOfLong3, arrayOfLong1[b], arrayOfLong2[b], paramArrayOfLong3, b << true); 
    long l1 = paramArrayOfLong3[0];
    long l2 = paramArrayOfLong3[1];
    l1 ^= paramArrayOfLong3[2];
    paramArrayOfLong3[1] = l1 ^ l2;
    l2 ^= paramArrayOfLong3[3];
    l1 ^= paramArrayOfLong3[4];
    paramArrayOfLong3[2] = l1 ^ l2;
    l2 ^= paramArrayOfLong3[5];
    l1 ^= paramArrayOfLong3[6];
    paramArrayOfLong3[3] = l1 ^ l2;
    l2 ^= paramArrayOfLong3[7];
    l1 ^= paramArrayOfLong3[8];
    paramArrayOfLong3[4] = l1 ^ l2;
    l2 ^= paramArrayOfLong3[9];
    l1 ^= paramArrayOfLong3[10];
    paramArrayOfLong3[5] = l1 ^ l2;
    l2 ^= paramArrayOfLong3[11];
    l1 ^= paramArrayOfLong3[12];
    paramArrayOfLong3[6] = l1 ^ l2;
    l2 ^= paramArrayOfLong3[13];
    long l3 = l1 ^ l2;
    paramArrayOfLong3[7] = paramArrayOfLong3[0] ^ l3;
    paramArrayOfLong3[8] = paramArrayOfLong3[1] ^ l3;
    paramArrayOfLong3[9] = paramArrayOfLong3[2] ^ l3;
    paramArrayOfLong3[10] = paramArrayOfLong3[3] ^ l3;
    paramArrayOfLong3[11] = paramArrayOfLong3[4] ^ l3;
    paramArrayOfLong3[12] = paramArrayOfLong3[5] ^ l3;
    paramArrayOfLong3[13] = paramArrayOfLong3[6] ^ l3;
    implMulwAcc(arrayOfLong3, arrayOfLong1[0] ^ arrayOfLong1[1], arrayOfLong2[0] ^ arrayOfLong2[1], paramArrayOfLong3, 1);
    implMulwAcc(arrayOfLong3, arrayOfLong1[0] ^ arrayOfLong1[2], arrayOfLong2[0] ^ arrayOfLong2[2], paramArrayOfLong3, 2);
    implMulwAcc(arrayOfLong3, arrayOfLong1[0] ^ arrayOfLong1[3], arrayOfLong2[0] ^ arrayOfLong2[3], paramArrayOfLong3, 3);
    implMulwAcc(arrayOfLong3, arrayOfLong1[1] ^ arrayOfLong1[2], arrayOfLong2[1] ^ arrayOfLong2[2], paramArrayOfLong3, 3);
    implMulwAcc(arrayOfLong3, arrayOfLong1[0] ^ arrayOfLong1[4], arrayOfLong2[0] ^ arrayOfLong2[4], paramArrayOfLong3, 4);
    implMulwAcc(arrayOfLong3, arrayOfLong1[1] ^ arrayOfLong1[3], arrayOfLong2[1] ^ arrayOfLong2[3], paramArrayOfLong3, 4);
    implMulwAcc(arrayOfLong3, arrayOfLong1[0] ^ arrayOfLong1[5], arrayOfLong2[0] ^ arrayOfLong2[5], paramArrayOfLong3, 5);
    implMulwAcc(arrayOfLong3, arrayOfLong1[1] ^ arrayOfLong1[4], arrayOfLong2[1] ^ arrayOfLong2[4], paramArrayOfLong3, 5);
    implMulwAcc(arrayOfLong3, arrayOfLong1[2] ^ arrayOfLong1[3], arrayOfLong2[2] ^ arrayOfLong2[3], paramArrayOfLong3, 5);
    implMulwAcc(arrayOfLong3, arrayOfLong1[0] ^ arrayOfLong1[6], arrayOfLong2[0] ^ arrayOfLong2[6], paramArrayOfLong3, 6);
    implMulwAcc(arrayOfLong3, arrayOfLong1[1] ^ arrayOfLong1[5], arrayOfLong2[1] ^ arrayOfLong2[5], paramArrayOfLong3, 6);
    implMulwAcc(arrayOfLong3, arrayOfLong1[2] ^ arrayOfLong1[4], arrayOfLong2[2] ^ arrayOfLong2[4], paramArrayOfLong3, 6);
    implMulwAcc(arrayOfLong3, arrayOfLong1[1] ^ arrayOfLong1[6], arrayOfLong2[1] ^ arrayOfLong2[6], paramArrayOfLong3, 7);
    implMulwAcc(arrayOfLong3, arrayOfLong1[2] ^ arrayOfLong1[5], arrayOfLong2[2] ^ arrayOfLong2[5], paramArrayOfLong3, 7);
    implMulwAcc(arrayOfLong3, arrayOfLong1[3] ^ arrayOfLong1[4], arrayOfLong2[3] ^ arrayOfLong2[4], paramArrayOfLong3, 7);
    implMulwAcc(arrayOfLong3, arrayOfLong1[2] ^ arrayOfLong1[6], arrayOfLong2[2] ^ arrayOfLong2[6], paramArrayOfLong3, 8);
    implMulwAcc(arrayOfLong3, arrayOfLong1[3] ^ arrayOfLong1[5], arrayOfLong2[3] ^ arrayOfLong2[5], paramArrayOfLong3, 8);
    implMulwAcc(arrayOfLong3, arrayOfLong1[3] ^ arrayOfLong1[6], arrayOfLong2[3] ^ arrayOfLong2[6], paramArrayOfLong3, 9);
    implMulwAcc(arrayOfLong3, arrayOfLong1[4] ^ arrayOfLong1[5], arrayOfLong2[4] ^ arrayOfLong2[5], paramArrayOfLong3, 9);
    implMulwAcc(arrayOfLong3, arrayOfLong1[4] ^ arrayOfLong1[6], arrayOfLong2[4] ^ arrayOfLong2[6], paramArrayOfLong3, 10);
    implMulwAcc(arrayOfLong3, arrayOfLong1[5] ^ arrayOfLong1[6], arrayOfLong2[5] ^ arrayOfLong2[6], paramArrayOfLong3, 11);
    implCompactExt(paramArrayOfLong3);
  }
  
  protected static void implMulwAcc(long[] paramArrayOfLong1, long paramLong1, long paramLong2, long[] paramArrayOfLong2, int paramInt) {
    paramArrayOfLong1[1] = paramLong2;
    paramArrayOfLong1[2] = paramArrayOfLong1[1] << true;
    paramArrayOfLong1[3] = paramArrayOfLong1[2] ^ paramLong2;
    paramArrayOfLong1[4] = paramArrayOfLong1[2] << true;
    paramArrayOfLong1[5] = paramArrayOfLong1[4] ^ paramLong2;
    paramArrayOfLong1[6] = paramArrayOfLong1[3] << true;
    paramArrayOfLong1[7] = paramArrayOfLong1[6] ^ paramLong2;
    int i = (int)paramLong1;
    long l1 = 0L;
    long l2 = paramArrayOfLong1[i & 0x7] ^ paramArrayOfLong1[i >>> 3 & 0x7] << 3;
    byte b = 54;
    do {
      i = (int)(paramLong1 >>> b);
      long l = paramArrayOfLong1[i & 0x7] ^ paramArrayOfLong1[i >>> 3 & 0x7] << 3;
      l2 ^= l << b;
      l1 ^= l >>> -b;
      b -= 6;
    } while (b > 0);
    paramArrayOfLong2[paramInt] = paramArrayOfLong2[paramInt] ^ l2 & 0x7FFFFFFFFFFFFFFL;
    paramArrayOfLong2[paramInt + 1] = paramArrayOfLong2[paramInt + 1] ^ l2 >>> 59 ^ l1 << 5;
  }
  
  protected static void implSquare(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    Interleave.expand64To128(paramArrayOfLong1, 0, 6, paramArrayOfLong2, 0);
    paramArrayOfLong2[12] = Interleave.expand32to64((int)paramArrayOfLong1[6]);
  }
}
