package org.bouncycastle.math.ec.custom.sec;

import java.math.BigInteger;
import java.security.SecureRandom;
import org.bouncycastle.math.ec.ECConstants;
import org.bouncycastle.math.ec.ECCurve;
import org.bouncycastle.math.ec.ECFieldElement;
import org.bouncycastle.math.ec.ECLookupTable;
import org.bouncycastle.math.ec.ECPoint;
import org.bouncycastle.math.raw.Nat128;

public class SecP128R1Curve extends ECCurve.AbstractFp {
  public static final BigInteger q = SecP128R1FieldElement.Q;
  
  private static final int SECP128R1_DEFAULT_COORDS = 2;
  
  private static final ECFieldElement[] SECP128R1_AFFINE_ZS = { new SecP128R1FieldElement(ECConstants.ONE) };
  
  protected SecP128R1Point infinity = new SecP128R1Point(this, null, null);
  
  public SecP128R1Curve() { super(q); }
  
  protected ECCurve cloneCurve() { return new SecP128R1Curve(); }
  
  public boolean supportsCoordinateSystem(int paramInt) {
    switch (paramInt) {
      case 2:
        return true;
    } 
    return false;
  }
  
  public BigInteger getQ() { return q; }
  
  public int getFieldSize() { return q.bitLength(); }
  
  public ECFieldElement fromBigInteger(BigInteger paramBigInteger) { return new SecP128R1FieldElement(paramBigInteger); }
  
  protected ECPoint createRawPoint(ECFieldElement paramECFieldElement1, ECFieldElement paramECFieldElement2) { return new SecP128R1Point(this, paramECFieldElement1, paramECFieldElement2); }
  
  protected ECPoint createRawPoint(ECFieldElement paramECFieldElement1, ECFieldElement paramECFieldElement2, ECFieldElement[] paramArrayOfECFieldElement) { return new SecP128R1Point(this, paramECFieldElement1, paramECFieldElement2, paramArrayOfECFieldElement); }
  
  public ECPoint getInfinity() { return this.infinity; }
  
  public ECLookupTable createCacheSafeLookupTable(ECPoint[] paramArrayOfECPoint, int paramInt1, int paramInt2) {
    int[] arrayOfInt = new int[paramInt2 * 4 * 2];
    byte b = 0;
    for (int i = 0; i < paramInt2; i++) {
      ECPoint eCPoint = paramArrayOfECPoint[paramInt1 + i];
      Nat128.copy(((SecP128R1FieldElement)eCPoint.getRawXCoord()).x, 0, arrayOfInt, b);
      b += 4;
      Nat128.copy(((SecP128R1FieldElement)eCPoint.getRawYCoord()).x, 0, arrayOfInt, b);
      b += 4;
    } 
    return new Object(this, paramInt2, arrayOfInt);
  }
  
  public ECFieldElement randomFieldElement(SecureRandom paramSecureRandom) {
    int[] arrayOfInt = Nat128.create();
    SecP128R1Field.random(paramSecureRandom, arrayOfInt);
    return new SecP128R1FieldElement(arrayOfInt);
  }
  
  public ECFieldElement randomFieldElementMult(SecureRandom paramSecureRandom) {
    int[] arrayOfInt = Nat128.create();
    SecP128R1Field.randomMult(paramSecureRandom, arrayOfInt);
    return new SecP128R1FieldElement(arrayOfInt);
  }
}
