package org.bouncycastle.mail.smime.examples;

import java.io.FileInputStream;
import java.security.KeyPairGenerator;
import java.security.PublicKey;
import java.security.SecureRandom;
import java.security.Security;
import java.security.cert.CertStore;
import java.security.cert.CertificateFactory;
import java.security.cert.CollectionCertStoreParameters;
import java.security.cert.PKIXParameters;
import java.security.cert.TrustAnchor;
import java.security.cert.X509CRL;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Locale;
import java.util.Properties;
import javax.mail.Session;
import javax.mail.internet.MimeMessage;
import javax.security.auth.x500.X500Principal;
import org.bouncycastle.asn1.ASN1Primitive;
import org.bouncycastle.asn1.x509.Extension;
import org.bouncycastle.cert.jcajce.JcaX509ExtensionUtils;
import org.bouncycastle.cms.SignerInformation;
import org.bouncycastle.i18n.ErrorBundle;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.bouncycastle.mail.smime.validator.SignedMailValidator;
import org.bouncycastle.x509.PKIXCertPathReviewer;

public class ValidateSignedMail {
  public static final boolean useCaCerts = false;
  
  public static final int TITLE = 0;
  
  public static final int TEXT = 1;
  
  public static final int SUMMARY = 2;
  
  public static final int DETAIL = 3;
  
  static int dbgLvl = 3;
  
  private static final String RESOURCE_NAME = "org.bouncycastle.mail.smime.validator.SignedMailValidatorMessages";
  
  public static void main(String[] paramArrayOfString) throws Exception {
    Security.addProvider(new BouncyCastleProvider());
    Properties properties = System.getProperties();
    Session session = Session.getDefaultInstance(properties, null);
    MimeMessage mimeMessage = new MimeMessage(session, new FileInputStream("signed.message"));
    HashSet hashSet = new HashSet();
    TrustAnchor trustAnchor = getTrustAnchor("trustanchor");
    if (trustAnchor == null) {
      System.out.println("no trustanchor file found, using a dummy trustanchor");
      trustAnchor = getDummyTrustAnchor();
    } 
    hashSet.add(trustAnchor);
    PKIXParameters pKIXParameters = new PKIXParameters(hashSet);
    ArrayList arrayList = new ArrayList();
    X509CRL x509CRL = loadCRL("crl.file");
    if (x509CRL != null)
      arrayList.add(x509CRL); 
    CertStore certStore = CertStore.getInstance("Collection", new CollectionCertStoreParameters(arrayList), "BC");
    pKIXParameters.addCertStore(certStore);
    pKIXParameters.setRevocationEnabled(true);
    verifySignedMail(mimeMessage, pKIXParameters);
  }
  
  public static void verifySignedMail(MimeMessage paramMimeMessage, PKIXParameters paramPKIXParameters) throws Exception {
    Locale locale = Locale.ENGLISH;
    SignedMailValidator signedMailValidator = new SignedMailValidator(paramMimeMessage, paramPKIXParameters);
    for (SignerInformation signerInformation : signedMailValidator.getSignerInformationStore().getSigners()) {
      SignedMailValidator.ValidationResult validationResult = signedMailValidator.getValidationResult(signerInformation);
      if (validationResult.isValidSignature()) {
        ErrorBundle errorBundle = new ErrorBundle("org.bouncycastle.mail.smime.validator.SignedMailValidatorMessages", "SignedMailValidator.sigValid");
        System.out.println(errorBundle.getText(locale));
      } else {
        ErrorBundle errorBundle = new ErrorBundle("org.bouncycastle.mail.smime.validator.SignedMailValidatorMessages", "SignedMailValidator.sigInvalid");
        System.out.println(errorBundle.getText(locale));
        System.out.println("Errors:");
        for (ErrorBundle errorBundle1 : validationResult.getErrors()) {
          if (dbgLvl == 3) {
            System.out.println("\t\t" + errorBundle1.getDetail(locale));
            continue;
          } 
          System.out.println("\t\t" + errorBundle1.getText(locale));
        } 
      } 
      if (!validationResult.getNotifications().isEmpty()) {
        System.out.println("Notifications:");
        for (ErrorBundle errorBundle : validationResult.getNotifications()) {
          if (dbgLvl == 3) {
            System.out.println("\t\t" + errorBundle.getDetail(locale));
            continue;
          } 
          System.out.println("\t\t" + errorBundle.getText(locale));
        } 
      } 
      PKIXCertPathReviewer pKIXCertPathReviewer = validationResult.getCertPathReview();
      if (pKIXCertPathReviewer != null) {
        if (pKIXCertPathReviewer.isValidCertPath()) {
          System.out.println("Certificate path valid");
        } else {
          System.out.println("Certificate path invalid");
        } 
        System.out.println("\nCertificate path validation results:");
        System.out.println("Errors:");
        for (ErrorBundle errorBundle : pKIXCertPathReviewer.getErrors(-1)) {
          if (dbgLvl == 3) {
            System.out.println("\t\t" + errorBundle.getDetail(locale));
            continue;
          } 
          System.out.println("\t\t" + errorBundle.getText(locale));
        } 
        System.out.println("Notifications:");
        for (ErrorBundle errorBundle : pKIXCertPathReviewer.getNotifications(-1))
          System.out.println("\t" + errorBundle.getText(locale)); 
        Iterator iterator = pKIXCertPathReviewer.getCertPath().getCertificates().iterator();
        for (byte b = 0; iterator.hasNext(); b++) {
          X509Certificate x509Certificate = (X509Certificate)iterator.next();
          System.out.println("\nCertificate " + b + "\n========");
          System.out.println("Issuer: " + x509Certificate.getIssuerDN().getName());
          System.out.println("Subject: " + x509Certificate.getSubjectDN().getName());
          System.out.println("\tErrors:");
          for (ErrorBundle errorBundle : pKIXCertPathReviewer.getErrors(b)) {
            if (dbgLvl == 3) {
              System.out.println("\t\t" + errorBundle.getDetail(locale));
              continue;
            } 
            System.out.println("\t\t" + errorBundle.getText(locale));
          } 
          System.out.println("\tNotifications:");
          for (ErrorBundle errorBundle : pKIXCertPathReviewer.getNotifications(b)) {
            if (dbgLvl == 3) {
              System.out.println("\t\t" + errorBundle.getDetail(locale));
              continue;
            } 
            System.out.println("\t\t" + errorBundle.getText(locale));
          } 
        } 
      } 
    } 
  }
  
  protected static TrustAnchor getTrustAnchor(String paramString) throws Exception {
    X509Certificate x509Certificate = loadCert(paramString);
    if (x509Certificate != null) {
      byte[] arrayOfByte = x509Certificate.getExtensionValue(Extension.nameConstraints.getId());
      if (arrayOfByte != null) {
        ASN1Primitive aSN1Primitive = JcaX509ExtensionUtils.parseExtensionValue(arrayOfByte);
        return new TrustAnchor(x509Certificate, aSN1Primitive.toASN1Primitive().getEncoded("DER"));
      } 
      return new TrustAnchor(x509Certificate, null);
    } 
    return null;
  }
  
  protected static X509Certificate loadCert(String paramString) {
    X509Certificate x509Certificate = null;
    try {
      FileInputStream fileInputStream = new FileInputStream(paramString);
      CertificateFactory certificateFactory = CertificateFactory.getInstance("X.509", "BC");
      x509Certificate = (X509Certificate)certificateFactory.generateCertificate(fileInputStream);
    } catch (Exception exception) {
      System.out.println("certfile \"" + paramString + "\" not found - classpath is " + System.getProperty("java.class.path"));
    } 
    return x509Certificate;
  }
  
  protected static X509CRL loadCRL(String paramString) {
    X509CRL x509CRL = null;
    try {
      FileInputStream fileInputStream = new FileInputStream(paramString);
      CertificateFactory certificateFactory = CertificateFactory.getInstance("X.509", "BC");
      x509CRL = (X509CRL)certificateFactory.generateCRL(fileInputStream);
    } catch (Exception exception) {
      System.out.println("crlfile \"" + paramString + "\" not found - classpath is " + System.getProperty("java.class.path"));
    } 
    return x509CRL;
  }
  
  private static TrustAnchor getDummyTrustAnchor() throws Exception {
    X500Principal x500Principal = new X500Principal("CN=Dummy Trust Anchor");
    KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA", "BC");
    keyPairGenerator.initialize(1024, new SecureRandom());
    PublicKey publicKey = keyPairGenerator.generateKeyPair().getPublic();
    return new TrustAnchor(x500Principal, publicKey, null);
  }
}
