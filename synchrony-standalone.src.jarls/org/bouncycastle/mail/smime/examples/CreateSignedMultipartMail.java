package org.bouncycastle.mail.smime.examples;

import java.io.FileOutputStream;
import java.io.IOException;
import java.math.BigInteger;
import java.security.GeneralSecurityException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.SecureRandom;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.Date;
import java.util.Properties;
import javax.mail.Message;
import javax.mail.Session;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import org.bouncycastle.asn1.ASN1EncodableVector;
import org.bouncycastle.asn1.cms.AttributeTable;
import org.bouncycastle.asn1.cms.IssuerAndSerialNumber;
import org.bouncycastle.asn1.smime.SMIMECapabilitiesAttribute;
import org.bouncycastle.asn1.smime.SMIMECapability;
import org.bouncycastle.asn1.smime.SMIMECapabilityVector;
import org.bouncycastle.asn1.smime.SMIMEEncryptionKeyPreferenceAttribute;
import org.bouncycastle.asn1.x500.X500Name;
import org.bouncycastle.asn1.x509.X509Extension;
import org.bouncycastle.cert.jcajce.JcaCertStore;
import org.bouncycastle.cert.jcajce.JcaX509CertificateConverter;
import org.bouncycastle.cert.jcajce.JcaX509ExtensionUtils;
import org.bouncycastle.cert.jcajce.JcaX509v3CertificateBuilder;
import org.bouncycastle.cms.jcajce.JcaSimpleSignerInfoGeneratorBuilder;
import org.bouncycastle.mail.smime.SMIMESignedGenerator;
import org.bouncycastle.operator.OperatorCreationException;
import org.bouncycastle.operator.jcajce.JcaContentSignerBuilder;

public class CreateSignedMultipartMail {
  static int serialNo = 1;
  
  static X509Certificate makeCertificate(KeyPair paramKeyPair1, String paramString1, KeyPair paramKeyPair2, String paramString2) throws GeneralSecurityException, IOException, OperatorCreationException {
    PublicKey publicKey1 = paramKeyPair1.getPublic();
    PrivateKey privateKey = paramKeyPair2.getPrivate();
    PublicKey publicKey2 = paramKeyPair2.getPublic();
    JcaX509ExtensionUtils jcaX509ExtensionUtils = new JcaX509ExtensionUtils();
    JcaX509v3CertificateBuilder jcaX509v3CertificateBuilder = new JcaX509v3CertificateBuilder(new X500Name(paramString2), BigInteger.valueOf(serialNo++), new Date(System.currentTimeMillis()), new Date(System.currentTimeMillis() + 8640000000L), new X500Name(paramString1), publicKey1);
    jcaX509v3CertificateBuilder.addExtension(X509Extension.subjectKeyIdentifier, false, jcaX509ExtensionUtils.createSubjectKeyIdentifier(publicKey1));
    jcaX509v3CertificateBuilder.addExtension(X509Extension.authorityKeyIdentifier, false, jcaX509ExtensionUtils.createAuthorityKeyIdentifier(publicKey2));
    return (new JcaX509CertificateConverter()).setProvider("BC").getCertificate(jcaX509v3CertificateBuilder.build((new JcaContentSignerBuilder("MD5withRSA")).setProvider("BC").build(privateKey)));
  }
  
  public static void main(String[] paramArrayOfString) throws Exception {
    KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA", "BC");
    keyPairGenerator.initialize(1024, new SecureRandom());
    String str1 = "O=Bouncy Castle, C=AU";
    KeyPair keyPair1 = keyPairGenerator.generateKeyPair();
    X509Certificate x509Certificate1 = makeCertificate(keyPair1, str1, keyPair1, str1);
    String str2 = "CN=Eric H. Echidna, E=eric@bouncycastle.org, O=Bouncy Castle, C=AU";
    KeyPair keyPair2 = keyPairGenerator.generateKeyPair();
    X509Certificate x509Certificate2 = makeCertificate(keyPair2, str2, keyPair1, str1);
    ArrayList arrayList = new ArrayList();
    arrayList.add(x509Certificate2);
    arrayList.add(x509Certificate1);
    JcaCertStore jcaCertStore = new JcaCertStore(arrayList);
    ASN1EncodableVector aSN1EncodableVector = new ASN1EncodableVector();
    SMIMECapabilityVector sMIMECapabilityVector = new SMIMECapabilityVector();
    sMIMECapabilityVector.addCapability(SMIMECapability.dES_EDE3_CBC);
    sMIMECapabilityVector.addCapability(SMIMECapability.rC2_CBC, 128);
    sMIMECapabilityVector.addCapability(SMIMECapability.dES_CBC);
    aSN1EncodableVector.add(new SMIMECapabilitiesAttribute(sMIMECapabilityVector));
    IssuerAndSerialNumber issuerAndSerialNumber = new IssuerAndSerialNumber(new X500Name(str1), x509Certificate2.getSerialNumber());
    aSN1EncodableVector.add(new SMIMEEncryptionKeyPreferenceAttribute(issuerAndSerialNumber));
    SMIMESignedGenerator sMIMESignedGenerator = new SMIMESignedGenerator();
    sMIMESignedGenerator.addSignerInfoGenerator((new JcaSimpleSignerInfoGeneratorBuilder()).setProvider("BC").setSignedAttributeGenerator(new AttributeTable(aSN1EncodableVector)).build("SHA1withRSA", keyPair2.getPrivate(), x509Certificate2));
    sMIMESignedGenerator.addCertificates(jcaCertStore);
    MimeBodyPart mimeBodyPart1 = new MimeBodyPart();
    mimeBodyPart1.setText("Hello part 1!");
    MimeBodyPart mimeBodyPart2 = new MimeBodyPart();
    mimeBodyPart2.setText("Hello part 2!");
    MimeMultipart mimeMultipart1 = new MimeMultipart();
    mimeMultipart1.addBodyPart(mimeBodyPart1);
    mimeMultipart1.addBodyPart(mimeBodyPart2);
    MimeBodyPart mimeBodyPart3 = new MimeBodyPart();
    mimeBodyPart3.setContent(mimeMultipart1);
    MimeMultipart mimeMultipart2 = sMIMESignedGenerator.generate(mimeBodyPart3);
    Properties properties = System.getProperties();
    Session session = Session.getDefaultInstance(properties, null);
    InternetAddress internetAddress1 = new InternetAddress("\"Eric H. Echidna\"<eric@bouncycastle.org>");
    InternetAddress internetAddress2 = new InternetAddress("example@bouncycastle.org");
    MimeMessage mimeMessage = new MimeMessage(session);
    mimeMessage.setFrom(internetAddress1);
    mimeMessage.setRecipient(Message.RecipientType.TO, internetAddress2);
    mimeMessage.setSubject("example signed message");
    mimeMessage.setContent(mimeMultipart2, mimeMultipart2.getContentType());
    mimeMessage.saveChanges();
    mimeMessage.writeTo(new FileOutputStream("signed.message"));
  }
}
