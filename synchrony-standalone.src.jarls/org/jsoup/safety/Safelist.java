package org.jsoup.safety;

import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import org.jsoup.helper.Validate;
import org.jsoup.internal.Normalizer;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Element;

public class Safelist {
  private static final String All = ":all";
  
  public static Safelist none() { return new Safelist(); }
  
  public static Safelist simpleText() {
    return (new Safelist())
      .addTags(new String[] { "b", "em", "i", "strong", "u" });
  }
  
  public static Safelist basic() {
    return (new Safelist())
      .addTags(new String[] { 
          "a", "b", "blockquote", "br", "cite", "code", "dd", "dl", "dt", "em", 
          "i", "li", "ol", "p", "pre", "q", "small", "span", "strike", "strong", 
          "sub", "sup", "u", "ul" }).addAttributes("a", new String[] { "href" }).addAttributes("blockquote", new String[] { "cite" }).addAttributes("q", new String[] { "cite" }).addProtocols("a", "href", new String[] { "ftp", "http", "https", "mailto" }).addProtocols("blockquote", "cite", new String[] { "http", "https" }).addProtocols("cite", "cite", new String[] { "http", "https" }).addEnforcedAttribute("a", "rel", "nofollow");
  }
  
  public static Safelist basicWithImages() {
    return basic()
      .addTags(new String[] { "img" }).addAttributes("img", new String[] { "align", "alt", "height", "src", "title", "width" }).addProtocols("img", "src", new String[] { "http", "https" });
  }
  
  public static Safelist relaxed() {
    return (new Safelist())
      .addTags(new String[] { 
          "a", "b", "blockquote", "br", "caption", "cite", "code", "col", "colgroup", "dd", 
          "div", "dl", "dt", "em", "h1", "h2", "h3", "h4", "h5", "h6", 
          "i", "img", "li", "ol", "p", "pre", "q", "small", "span", "strike", 
          "strong", "sub", "sup", "table", "tbody", "td", "tfoot", "th", "thead", "tr", 
          "u", "ul" }).addAttributes("a", new String[] { "href", "title" }).addAttributes("blockquote", new String[] { "cite" }).addAttributes("col", new String[] { "span", "width" }).addAttributes("colgroup", new String[] { "span", "width" }).addAttributes("img", new String[] { "align", "alt", "height", "src", "title", "width" }).addAttributes("ol", new String[] { "start", "type" }).addAttributes("q", new String[] { "cite" }).addAttributes("table", new String[] { "summary", "width" }).addAttributes("td", new String[] { "abbr", "axis", "colspan", "rowspan", "width" }).addAttributes("th", new String[] { "abbr", "axis", "colspan", "rowspan", "scope", "width" }).addAttributes("ul", new String[] { "type" }).addProtocols("a", "href", new String[] { "ftp", "http", "https", "mailto" }).addProtocols("blockquote", "cite", new String[] { "http", "https" }).addProtocols("cite", "cite", new String[] { "http", "https" }).addProtocols("img", "src", new String[] { "http", "https" }).addProtocols("q", "cite", new String[] { "http", "https" });
  }
  
  private final Set<TagName> tagNames = new HashSet();
  
  private final Map<TagName, Set<AttributeKey>> attributes = new HashMap();
  
  private final Map<TagName, Map<AttributeKey, AttributeValue>> enforcedAttributes = new HashMap();
  
  private final Map<TagName, Map<AttributeKey, Set<Protocol>>> protocols = new HashMap();
  
  private boolean preserveRelativeLinks = false;
  
  public Safelist() {}
  
  public Safelist(Safelist copy) {
    this();
    this.tagNames.addAll(copy.tagNames);
    for (Map.Entry<TagName, Set<AttributeKey>> copyTagAttributes : copy.attributes.entrySet())
      this.attributes.put((TagName)copyTagAttributes.getKey(), new HashSet((Collection)copyTagAttributes.getValue())); 
    for (Map.Entry<TagName, Map<AttributeKey, AttributeValue>> enforcedEntry : copy.enforcedAttributes.entrySet())
      this.enforcedAttributes.put((TagName)enforcedEntry.getKey(), new HashMap((Map)enforcedEntry.getValue())); 
    for (Map.Entry<TagName, Map<AttributeKey, Set<Protocol>>> protocolsEntry : copy.protocols.entrySet()) {
      Map<AttributeKey, Set<Protocol>> attributeProtocolsCopy = new HashMap<AttributeKey, Set<Protocol>>();
      for (Map.Entry<AttributeKey, Set<Protocol>> attributeProtocols : ((Map)protocolsEntry.getValue()).entrySet())
        attributeProtocolsCopy.put((AttributeKey)attributeProtocols.getKey(), new HashSet((Collection)attributeProtocols.getValue())); 
      this.protocols.put((TagName)protocolsEntry.getKey(), attributeProtocolsCopy);
    } 
    this.preserveRelativeLinks = copy.preserveRelativeLinks;
  }
  
  public Safelist addTags(String... tags) {
    Validate.notNull(tags);
    for (String tagName : tags) {
      Validate.notEmpty(tagName);
      this.tagNames.add(TagName.valueOf(tagName));
    } 
    return this;
  }
  
  public Safelist removeTags(String... tags) {
    Validate.notNull(tags);
    for (String tag : tags) {
      Validate.notEmpty(tag);
      TagName tagName = TagName.valueOf(tag);
      if (this.tagNames.remove(tagName)) {
        this.attributes.remove(tagName);
        this.enforcedAttributes.remove(tagName);
        this.protocols.remove(tagName);
      } 
    } 
    return this;
  }
  
  public Safelist addAttributes(String tag, String... attributes) {
    Validate.notEmpty(tag);
    Validate.notNull(attributes);
    Validate.isTrue((attributes.length > 0), "No attribute names supplied.");
    TagName tagName = TagName.valueOf(tag);
    this.tagNames.add(tagName);
    Set<AttributeKey> attributeSet = new HashSet<AttributeKey>();
    for (String key : attributes) {
      Validate.notEmpty(key);
      attributeSet.add(AttributeKey.valueOf(key));
    } 
    if (this.attributes.containsKey(tagName)) {
      Set<AttributeKey> currentSet = (Set)this.attributes.get(tagName);
      currentSet.addAll(attributeSet);
    } else {
      this.attributes.put(tagName, attributeSet);
    } 
    return this;
  }
  
  public Safelist removeAttributes(String tag, String... attributes) {
    Validate.notEmpty(tag);
    Validate.notNull(attributes);
    Validate.isTrue((attributes.length > 0), "No attribute names supplied.");
    TagName tagName = TagName.valueOf(tag);
    Set<AttributeKey> attributeSet = new HashSet<AttributeKey>();
    for (String key : attributes) {
      Validate.notEmpty(key);
      attributeSet.add(AttributeKey.valueOf(key));
    } 
    if (this.tagNames.contains(tagName) && this.attributes.containsKey(tagName)) {
      Set<AttributeKey> currentSet = (Set)this.attributes.get(tagName);
      currentSet.removeAll(attributeSet);
      if (currentSet.isEmpty())
        this.attributes.remove(tagName); 
    } 
    if (tag.equals(":all")) {
      Iterator<Map.Entry<TagName, Set<AttributeKey>>> it = this.attributes.entrySet().iterator();
      while (it.hasNext()) {
        Map.Entry<TagName, Set<AttributeKey>> entry = (Map.Entry)it.next();
        Set<AttributeKey> currentSet = (Set)entry.getValue();
        currentSet.removeAll(attributeSet);
        if (currentSet.isEmpty())
          it.remove(); 
      } 
    } 
    return this;
  }
  
  public Safelist addEnforcedAttribute(String tag, String attribute, String value) {
    Validate.notEmpty(tag);
    Validate.notEmpty(attribute);
    Validate.notEmpty(value);
    TagName tagName = TagName.valueOf(tag);
    this.tagNames.add(tagName);
    AttributeKey attrKey = AttributeKey.valueOf(attribute);
    AttributeValue attrVal = AttributeValue.valueOf(value);
    if (this.enforcedAttributes.containsKey(tagName)) {
      ((Map)this.enforcedAttributes.get(tagName)).put(attrKey, attrVal);
    } else {
      Map<AttributeKey, AttributeValue> attrMap = new HashMap<AttributeKey, AttributeValue>();
      attrMap.put(attrKey, attrVal);
      this.enforcedAttributes.put(tagName, attrMap);
    } 
    return this;
  }
  
  public Safelist removeEnforcedAttribute(String tag, String attribute) {
    Validate.notEmpty(tag);
    Validate.notEmpty(attribute);
    TagName tagName = TagName.valueOf(tag);
    if (this.tagNames.contains(tagName) && this.enforcedAttributes.containsKey(tagName)) {
      AttributeKey attrKey = AttributeKey.valueOf(attribute);
      Map<AttributeKey, AttributeValue> attrMap = (Map)this.enforcedAttributes.get(tagName);
      attrMap.remove(attrKey);
      if (attrMap.isEmpty())
        this.enforcedAttributes.remove(tagName); 
    } 
    return this;
  }
  
  public Safelist preserveRelativeLinks(boolean preserve) {
    this.preserveRelativeLinks = preserve;
    return this;
  }
  
  public Safelist addProtocols(String tag, String attribute, String... protocols) {
    Set<Protocol> protSet;
    Map<AttributeKey, Set<Protocol>> attrMap;
    Validate.notEmpty(tag);
    Validate.notEmpty(attribute);
    Validate.notNull(protocols);
    TagName tagName = TagName.valueOf(tag);
    AttributeKey attrKey = AttributeKey.valueOf(attribute);
    if (this.protocols.containsKey(tagName)) {
      attrMap = (Map)this.protocols.get(tagName);
    } else {
      attrMap = new HashMap<AttributeKey, Set<Protocol>>();
      this.protocols.put(tagName, attrMap);
    } 
    if (attrMap.containsKey(attrKey)) {
      protSet = (Set)attrMap.get(attrKey);
    } else {
      protSet = new HashSet<Protocol>();
      attrMap.put(attrKey, protSet);
    } 
    for (String protocol : protocols) {
      Validate.notEmpty(protocol);
      Protocol prot = Protocol.valueOf(protocol);
      protSet.add(prot);
    } 
    return this;
  }
  
  public Safelist removeProtocols(String tag, String attribute, String... removeProtocols) {
    Validate.notEmpty(tag);
    Validate.notEmpty(attribute);
    Validate.notNull(removeProtocols);
    TagName tagName = TagName.valueOf(tag);
    AttributeKey attr = AttributeKey.valueOf(attribute);
    Validate.isTrue(this.protocols.containsKey(tagName), "Cannot remove a protocol that is not set.");
    Map<AttributeKey, Set<Protocol>> tagProtocols = (Map)this.protocols.get(tagName);
    Validate.isTrue(tagProtocols.containsKey(attr), "Cannot remove a protocol that is not set.");
    Set<Protocol> attrProtocols = (Set)tagProtocols.get(attr);
    for (String protocol : removeProtocols) {
      Validate.notEmpty(protocol);
      attrProtocols.remove(Protocol.valueOf(protocol));
    } 
    if (attrProtocols.isEmpty()) {
      tagProtocols.remove(attr);
      if (tagProtocols.isEmpty())
        this.protocols.remove(tagName); 
    } 
    return this;
  }
  
  protected boolean isSafeTag(String tag) { return this.tagNames.contains(TagName.valueOf(tag)); }
  
  protected boolean isSafeAttribute(String tagName, Element el, Attribute attr) {
    TagName tag = TagName.valueOf(tagName);
    AttributeKey key = AttributeKey.valueOf(attr.getKey());
    Set<AttributeKey> okSet = (Set)this.attributes.get(tag);
    if (okSet != null && okSet.contains(key)) {
      if (this.protocols.containsKey(tag)) {
        Map<AttributeKey, Set<Protocol>> attrProts = (Map)this.protocols.get(tag);
        return (!attrProts.containsKey(key) || testValidProtocol(el, attr, (Set)attrProts.get(key)));
      } 
      return true;
    } 
    Map<AttributeKey, AttributeValue> enforcedSet = (Map)this.enforcedAttributes.get(tag);
    if (enforcedSet != null) {
      Attributes expect = getEnforcedAttributes(tagName);
      String attrKey = attr.getKey();
      if (expect.hasKeyIgnoreCase(attrKey))
        return expect.getIgnoreCase(attrKey).equals(attr.getValue()); 
    } 
    return (!tagName.equals(":all") && isSafeAttribute(":all", el, attr));
  }
  
  private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {
    String value = el.absUrl(attr.getKey());
    if (value.length() == 0)
      value = attr.getValue(); 
    if (!this.preserveRelativeLinks)
      attr.setValue(value); 
    for (Protocol protocol : protocols) {
      String prot = protocol.toString();
      if (prot.equals("#")) {
        if (isValidAnchor(value))
          return true; 
        continue;
      } 
      prot = prot + ":";
      if (Normalizer.lowerCase(value).startsWith(prot))
        return true; 
    } 
    return false;
  }
  
  private boolean isValidAnchor(String value) { return (value.startsWith("#") && !value.matches(".*\\s.*")); }
  
  Attributes getEnforcedAttributes(String tagName) {
    Attributes attrs = new Attributes();
    TagName tag = TagName.valueOf(tagName);
    if (this.enforcedAttributes.containsKey(tag)) {
      Map<AttributeKey, AttributeValue> keyVals = (Map)this.enforcedAttributes.get(tag);
      for (Map.Entry<AttributeKey, AttributeValue> entry : keyVals.entrySet())
        attrs.put(((AttributeKey)entry.getKey()).toString(), ((AttributeValue)entry.getValue()).toString()); 
    } 
    return attrs;
  }
}
