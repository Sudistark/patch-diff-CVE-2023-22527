package org.jsoup.safety;

import java.util.List;
import org.jsoup.helper.Validate;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.NodeTraversor;

public class Cleaner {
  private final Safelist safelist;
  
  public Cleaner(Safelist safelist) {
    Validate.notNull(safelist);
    this.safelist = safelist;
  }
  
  public Document clean(Document dirtyDocument) {
    Validate.notNull(dirtyDocument);
    Document clean = Document.createShell(dirtyDocument.baseUri());
    copySafeNodes(dirtyDocument.body(), clean.body());
    clean.outputSettings(dirtyDocument.outputSettings().clone());
    return clean;
  }
  
  public boolean isValid(Document dirtyDocument) {
    Validate.notNull(dirtyDocument);
    Document clean = Document.createShell(dirtyDocument.baseUri());
    int numDiscarded = copySafeNodes(dirtyDocument.body(), clean.body());
    return (numDiscarded == 0 && dirtyDocument
      .head().childNodes().isEmpty());
  }
  
  public boolean isValidBodyHtml(String bodyHtml) {
    Document clean = Document.createShell("");
    Document dirty = Document.createShell("");
    ParseErrorList errorList = ParseErrorList.tracking(1);
    List<Node> nodes = Parser.parseFragment(bodyHtml, dirty.body(), "", errorList);
    dirty.body().insertChildren(0, nodes);
    int numDiscarded = copySafeNodes(dirty.body(), clean.body());
    return (numDiscarded == 0 && errorList.isEmpty());
  }
  
  private int copySafeNodes(Element source, Element dest) {
    CleaningVisitor cleaningVisitor = new CleaningVisitor(this, source, dest, null);
    NodeTraversor.traverse(cleaningVisitor, source);
    return CleaningVisitor.access$300(cleaningVisitor);
  }
  
  private ElementMeta createSafeElement(Element sourceEl) {
    String sourceTag = sourceEl.tagName();
    Attributes destAttrs = new Attributes();
    Element dest = new Element(Tag.valueOf(sourceTag), sourceEl.baseUri(), destAttrs);
    int numDiscarded = 0;
    Attributes sourceAttrs = sourceEl.attributes();
    for (Attribute sourceAttr : sourceAttrs) {
      if (this.safelist.isSafeAttribute(sourceTag, sourceEl, sourceAttr)) {
        destAttrs.put(sourceAttr);
        continue;
      } 
      numDiscarded++;
    } 
    Attributes enforcedAttrs = this.safelist.getEnforcedAttributes(sourceTag);
    destAttrs.addAll(enforcedAttrs);
    if (sourceEl.sourceRange().isTracked())
      sourceEl.sourceRange().track(dest, true); 
    if (sourceEl.endSourceRange().isTracked())
      sourceEl.endSourceRange().track(dest, false); 
    return new ElementMeta(dest, numDiscarded);
  }
}
