package org.jsoup.select;

import java.util.Collection;
import java.util.IdentityHashMap;
import javax.annotation.Nullable;
import org.jsoup.helper.Validate;
import org.jsoup.nodes.Element;

public class Selector {
  public static Elements select(String query, Element root) {
    Validate.notEmpty(query);
    return select(QueryParser.parse(query), root);
  }
  
  public static Elements select(Evaluator evaluator, Element root) {
    Validate.notNull(evaluator);
    Validate.notNull(root);
    return Collector.collect(evaluator, root);
  }
  
  public static Elements select(String query, Iterable<Element> roots) {
    Validate.notEmpty(query);
    Validate.notNull(roots);
    Evaluator evaluator = QueryParser.parse(query);
    Elements elements = new Elements();
    IdentityHashMap<Element, Boolean> seenElements = new IdentityHashMap<Element, Boolean>();
    for (Element root : roots) {
      Elements found = select(evaluator, root);
      for (Element el : found) {
        if (seenElements.put(el, Boolean.TRUE) == null)
          elements.add(el); 
      } 
    } 
    return elements;
  }
  
  static Elements filterOut(Collection<Element> elements, Collection<Element> outs) {
    Elements output = new Elements();
    for (Element el : elements) {
      boolean found = false;
      for (Element out : outs) {
        if (el.equals(out)) {
          found = true;
          break;
        } 
      } 
      if (!found)
        output.add(el); 
    } 
    return output;
  }
  
  @Nullable
  public static Element selectFirst(String cssQuery, Element root) {
    Validate.notEmpty(cssQuery);
    return Collector.findFirst(QueryParser.parse(cssQuery), root);
  }
}
