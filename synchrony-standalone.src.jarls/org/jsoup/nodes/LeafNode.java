package org.jsoup.nodes;

import java.util.List;

abstract class LeafNode extends Node {
  Object value;
  
  protected final boolean hasAttributes() { return this.value instanceof Attributes; }
  
  public final Attributes attributes() {
    ensureAttributes();
    return (Attributes)this.value;
  }
  
  private void ensureAttributes() {
    if (!hasAttributes()) {
      Object coreValue = this.value;
      Attributes attributes = new Attributes();
      this.value = attributes;
      if (coreValue != null)
        attributes.put(nodeName(), (String)coreValue); 
    } 
  }
  
  String coreValue() { return attr(nodeName()); }
  
  void coreValue(String value) { attr(nodeName(), value); }
  
  public String attr(String key) {
    if (!hasAttributes())
      return nodeName().equals(key) ? (String)this.value : ""; 
    return super.attr(key);
  }
  
  public Node attr(String key, String value) {
    if (!hasAttributes() && key.equals(nodeName())) {
      this.value = value;
    } else {
      ensureAttributes();
      super.attr(key, value);
    } 
    return this;
  }
  
  public boolean hasAttr(String key) {
    ensureAttributes();
    return super.hasAttr(key);
  }
  
  public Node removeAttr(String key) {
    ensureAttributes();
    return super.removeAttr(key);
  }
  
  public String absUrl(String key) {
    ensureAttributes();
    return super.absUrl(key);
  }
  
  public String baseUri() { return hasParent() ? parent().baseUri() : ""; }
  
  protected void doSetBaseUri(String baseUri) {}
  
  public int childNodeSize() { return 0; }
  
  public Node empty() { return this; }
  
  protected List<Node> ensureChildNodes() { return EmptyNodes; }
  
  protected LeafNode doClone(Node parent) {
    LeafNode clone = (LeafNode)super.doClone(parent);
    if (hasAttributes())
      clone.value = ((Attributes)this.value).clone(); 
    return clone;
  }
}
