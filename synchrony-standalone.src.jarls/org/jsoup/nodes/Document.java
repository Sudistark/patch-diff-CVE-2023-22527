package org.jsoup.nodes;

import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.Nullable;
import org.jsoup.Connection;
import org.jsoup.Jsoup;
import org.jsoup.helper.Validate;
import org.jsoup.internal.StringUtil;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;

public class Document extends Element {
  @Nullable
  private Connection connection;
  
  private OutputSettings outputSettings = new OutputSettings();
  
  private Parser parser;
  
  private QuirksMode quirksMode = QuirksMode.noQuirks;
  
  private final String location;
  
  private boolean updateMetaCharset = false;
  
  public Document(String baseUri) {
    super(Tag.valueOf("#root", ParseSettings.htmlDefault), baseUri);
    this.location = baseUri;
    this.parser = Parser.htmlParser();
  }
  
  public static Document createShell(String baseUri) {
    Validate.notNull(baseUri);
    Document doc = new Document(baseUri);
    doc.parser = doc.parser();
    Element html = doc.appendElement("html");
    html.appendElement("head");
    html.appendElement("body");
    return doc;
  }
  
  public String location() { return this.location; }
  
  public Connection connection() {
    if (this.connection == null)
      return Jsoup.newSession(); 
    return this.connection;
  }
  
  @Nullable
  public DocumentType documentType() {
    for (Node node : this.childNodes) {
      if (node instanceof DocumentType)
        return (DocumentType)node; 
      if (!(node instanceof LeafNode))
        break; 
    } 
    return null;
  }
  
  private Element htmlEl() {
    for (Element el : childElementsList()) {
      if (el.normalName().equals("html"))
        return el; 
    } 
    return appendElement("html");
  }
  
  public Element head() {
    Element html = htmlEl();
    for (Element el : html.childElementsList()) {
      if (el.normalName().equals("head"))
        return el; 
    } 
    return html.prependElement("head");
  }
  
  public Element body() {
    Element html = htmlEl();
    for (Element el : html.childElementsList()) {
      if ("body".equals(el.normalName()) || "frameset".equals(el.normalName()))
        return el; 
    } 
    return html.appendElement("body");
  }
  
  public List<FormElement> forms() { return select("form").forms(); }
  
  public FormElement expectForm(String cssQuery) {
    Elements els = select(cssQuery);
    for (Element el : els) {
      if (el instanceof FormElement)
        return (FormElement)el; 
    } 
    Validate.fail("No form elements matched the query '%s' in the document.", new Object[] { cssQuery });
    return null;
  }
  
  public String title() {
    Element titleEl = head().selectFirst(titleEval);
    return (titleEl != null) ? StringUtil.normaliseWhitespace(titleEl.text()).trim() : "";
  }
  
  private static final Evaluator titleEval = new Evaluator.Tag("title");
  
  public void title(String title) {
    Validate.notNull(title);
    Element titleEl = head().selectFirst(titleEval);
    if (titleEl == null)
      titleEl = head().appendElement("title"); 
    titleEl.text(title);
  }
  
  public Element createElement(String tagName) { return new Element(Tag.valueOf(tagName, ParseSettings.preserveCase), baseUri()); }
  
  @Deprecated
  public Document normalise() {
    Element htmlEl = htmlEl();
    Element head = head();
    body();
    normaliseTextNodes(head);
    normaliseTextNodes(htmlEl);
    normaliseTextNodes(this);
    normaliseStructure("head", htmlEl);
    normaliseStructure("body", htmlEl);
    ensureMetaCharsetElement();
    return this;
  }
  
  private void normaliseTextNodes(Element element) {
    List<Node> toMove = new ArrayList<Node>();
    for (Node node : element.childNodes) {
      if (node instanceof TextNode) {
        TextNode tn = (TextNode)node;
        if (!tn.isBlank())
          toMove.add(tn); 
      } 
    } 
    for (int i = toMove.size() - 1; i >= 0; i--) {
      Node node = (Node)toMove.get(i);
      element.removeChild(node);
      body().prependChild(new TextNode(" "));
      body().prependChild(node);
    } 
  }
  
  private void normaliseStructure(String tag, Element htmlEl) {
    Elements elements = getElementsByTag(tag);
    Element master = elements.first();
    if (elements.size() > 1) {
      List<Node> toMove = new ArrayList<Node>();
      for (int i = 1; i < elements.size(); i++) {
        Node dupe = (Node)elements.get(i);
        toMove.addAll(dupe.ensureChildNodes());
        dupe.remove();
      } 
      for (Node dupe : toMove)
        master.appendChild(dupe); 
    } 
    if (master.parent() != null && !master.parent().equals(htmlEl))
      htmlEl.appendChild(master); 
  }
  
  public String outerHtml() { return html(); }
  
  public Element text(String text) {
    body().text(text);
    return this;
  }
  
  public String nodeName() { return "#document"; }
  
  public void charset(Charset charset) {
    updateMetaCharsetElement(true);
    this.outputSettings.charset(charset);
    ensureMetaCharsetElement();
  }
  
  public Charset charset() { return this.outputSettings.charset(); }
  
  public void updateMetaCharsetElement(boolean update) { this.updateMetaCharset = update; }
  
  public boolean updateMetaCharsetElement() { return this.updateMetaCharset; }
  
  public Document clone() {
    Document clone = (Document)super.clone();
    clone.outputSettings = this.outputSettings.clone();
    return clone;
  }
  
  public Document shallowClone() {
    Document clone = new Document(baseUri());
    if (this.attributes != null)
      clone.attributes = this.attributes.clone(); 
    clone.outputSettings = this.outputSettings.clone();
    return clone;
  }
  
  private void ensureMetaCharsetElement() {
    if (this.updateMetaCharset) {
      OutputSettings.Syntax syntax = outputSettings().syntax();
      if (syntax == OutputSettings.Syntax.html) {
        Element metaCharset = selectFirst("meta[charset]");
        if (metaCharset != null) {
          metaCharset.attr("charset", charset().displayName());
        } else {
          head().appendElement("meta").attr("charset", charset().displayName());
        } 
        select("meta[name=charset]").remove();
      } else if (syntax == OutputSettings.Syntax.xml) {
        Node node = (Node)ensureChildNodes().get(0);
        if (node instanceof XmlDeclaration) {
          XmlDeclaration decl = (XmlDeclaration)node;
          if (decl.name().equals("xml")) {
            decl.attr("encoding", charset().displayName());
            if (decl.hasAttr("version"))
              decl.attr("version", "1.0"); 
          } else {
            decl = new XmlDeclaration("xml", false);
            decl.attr("version", "1.0");
            decl.attr("encoding", charset().displayName());
            prependChild(decl);
          } 
        } else {
          XmlDeclaration decl = new XmlDeclaration("xml", false);
          decl.attr("version", "1.0");
          decl.attr("encoding", charset().displayName());
          prependChild(decl);
        } 
      } 
    } 
  }
  
  public OutputSettings outputSettings() { return this.outputSettings; }
  
  public Document outputSettings(OutputSettings outputSettings) {
    Validate.notNull(outputSettings);
    this.outputSettings = outputSettings;
    return this;
  }
  
  public QuirksMode quirksMode() { return this.quirksMode; }
  
  public Document quirksMode(QuirksMode quirksMode) {
    this.quirksMode = quirksMode;
    return this;
  }
  
  public Parser parser() { return this.parser; }
  
  public Document parser(Parser parser) {
    this.parser = parser;
    return this;
  }
  
  public Document connection(Connection connection) {
    Validate.notNull(connection);
    this.connection = connection;
    return this;
  }
}
