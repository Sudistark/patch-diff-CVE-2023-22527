package org.writequit.tigris;

import java.io.IOException;
import java.io.InputStream;
import java.io.PushbackInputStream;

public class JSONStringEscapingInputStream extends PushbackInputStream {
  private final int BS = 8;
  
  private final int TAB = 9;
  
  private final int LF = 10;
  
  private final int FF = 12;
  
  private final int CR = 13;
  
  public JSONStringEscapingInputStream(InputStream paramInputStream) { super(paramInputStream, 5); }
  
  public int read() throws IOException {
    if (this.pos != this.buf.length)
      return super.read(); 
    int i = super.read();
    if (i == -1)
      return -1; 
    switch (i) {
      case 8:
        unread(98);
        return 92;
      case 9:
        unread(116);
        return 92;
      case 10:
        unread(110);
        return 92;
      case 12:
        unread(102);
        return 92;
      case 13:
        unread(114);
        return 92;
      case 34:
        unread(34);
        return 92;
      case 92:
        unread(92);
        return 92;
    } 
    if (i < 32) {
      String str = Integer.toHexString(i);
      for (int j = 0; j < 4; j++) {
        if (j < str.length()) {
          unread(str.codePointAt(str.length() - 1 - j));
        } else {
          unread(48);
        } 
      } 
      unread(117);
      return 92;
    } 
    return i;
  }
  
  public int read(byte[] paramArrayOfByte) throws IOException { return read(paramArrayOfByte, 0, paramArrayOfByte.length); }
  
  public int read(byte[] paramArrayOfByte, int paramInt1, int paramInt2) throws IOException {
    if (paramInt2 == 0)
      return 0; 
    int i = read();
    if (i == -1)
      return -1; 
    int j;
    for (j = paramInt1; j < paramInt2 && i != -1; j++) {
      paramArrayOfByte[j] = (byte)i;
      i = read();
    } 
    return j - paramInt1;
  }
  
  public long skip(long paramLong) throws IOException { return super.skip(paramLong); }
  
  public int available() throws IOException { return super.available(); }
}
