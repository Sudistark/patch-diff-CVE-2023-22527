package org.apache.log4j.helpers;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import org.apache.log4j.Layout;

public class PatternParser {
  private static final char LEFT_BRACKET = '{';
  
  private static final char RIGHT_BRACKET = '}';
  
  private static final char N_CHAR = 'n';
  
  private static final char DOT_CHAR = '.';
  
  private static final char DASH_CHAR = '-';
  
  private static final char ESCAPE_CHAR = '%';
  
  private static final int LITERAL_STATE = 0;
  
  private static final int CONVERTER_STATE = 1;
  
  private static final int DOT_STATE = 3;
  
  private static final int MIN_STATE = 4;
  
  private static final int MAX_STATE = 5;
  
  static final int FULL_LOCATION_CONVERTER = 1000;
  
  static final int METHOD_LOCATION_CONVERTER = 1001;
  
  static final int CLASS_LOCATION_CONVERTER = 1002;
  
  static final int LINE_LOCATION_CONVERTER = 1003;
  
  static final int FILE_LOCATION_CONVERTER = 1004;
  
  static final int RELATIVE_TIME_CONVERTER = 2000;
  
  static final int THREAD_CONVERTER = 2001;
  
  static final int LEVEL_CONVERTER = 2002;
  
  static final int NDC_CONVERTER = 2003;
  
  static final int MESSAGE_CONVERTER = 2004;
  
  int state;
  
  protected StringBuffer currentLiteral;
  
  protected int patternLength;
  
  protected int i;
  
  PatternConverter head;
  
  PatternConverter tail;
  
  protected FormattingInfo formattingInfo;
  
  protected String pattern;
  
  public PatternParser(String pattern) {
    this.currentLiteral = new StringBuffer(32);
    this.formattingInfo = new FormattingInfo();
    this.pattern = pattern;
    this.patternLength = pattern.length();
    this.state = 0;
  }
  
  private void addToList(PatternConverter pc) {
    if (this.head == null) {
      this.head = this.tail = pc;
    } else {
      this.tail.next = pc;
      this.tail = pc;
    } 
  }
  
  protected String extractOption() {
    if (this.i < this.patternLength && this.pattern.charAt(this.i) == '{') {
      int end = this.pattern.indexOf('}', this.i);
      if (end > this.i) {
        String r = this.pattern.substring(this.i + 1, end);
        this.i = end + 1;
        return r;
      } 
    } 
    return null;
  }
  
  protected int extractPrecisionOption() {
    String opt = extractOption();
    int r = 0;
    if (opt != null)
      try {
        r = Integer.parseInt(opt);
        if (r <= 0) {
          LogLog.error("Precision option (" + opt + ") isn't a positive integer.");
          r = 0;
        } 
      } catch (NumberFormatException e) {
        LogLog.error("Category option \"" + opt + "\" not a decimal integer.", e);
      }  
    return r;
  }
  
  public PatternConverter parse() {
    this.i = 0;
    while (this.i < this.patternLength) {
      char c = this.pattern.charAt(this.i++);
      switch (this.state) {
        case 0:
          if (this.i == this.patternLength) {
            this.currentLiteral.append(c);
            continue;
          } 
          if (c == '%') {
            switch (this.pattern.charAt(this.i)) {
              case '%':
                this.currentLiteral.append(c);
                this.i++;
                continue;
              case 'n':
                this.currentLiteral.append(Layout.LINE_SEP);
                this.i++;
                continue;
            } 
            if (this.currentLiteral.length() != 0)
              addToList(new LiteralPatternConverter(this.currentLiteral.toString())); 
            this.currentLiteral.setLength(0);
            this.currentLiteral.append(c);
            this.state = 1;
            this.formattingInfo.reset();
            continue;
          } 
          this.currentLiteral.append(c);
        case 1:
          this.currentLiteral.append(c);
          switch (c) {
            case '-':
              this.formattingInfo.leftAlign = true;
              continue;
            case '.':
              this.state = 3;
              continue;
          } 
          if (c >= '0' && c <= '9') {
            this.formattingInfo.min = c - '0';
            this.state = 4;
            continue;
          } 
          finalizeConverter(c);
        case 4:
          this.currentLiteral.append(c);
          if (c >= '0' && c <= '9') {
            this.formattingInfo.min = this.formattingInfo.min * 10 + c - '0';
            continue;
          } 
          if (c == '.') {
            this.state = 3;
            continue;
          } 
          finalizeConverter(c);
        case 3:
          this.currentLiteral.append(c);
          if (c >= '0' && c <= '9') {
            this.formattingInfo.max = c - '0';
            this.state = 5;
            continue;
          } 
          LogLog.error("Error occured in position " + this.i + ".\n Was expecting digit, instead got char \"" + c + "\".");
          this.state = 0;
        case 5:
          this.currentLiteral.append(c);
          if (c >= '0' && c <= '9') {
            this.formattingInfo.max = this.formattingInfo.max * 10 + c - '0';
            continue;
          } 
          finalizeConverter(c);
          this.state = 0;
      } 
    } 
    if (this.currentLiteral.length() != 0)
      addToList(new LiteralPatternConverter(this.currentLiteral.toString())); 
    return this.head;
  }
  
  protected void finalizeConverter(char c) {
    String xOpt, dOpt;
    DateFormat df;
    String dateFormatStr;
    DatePatternConverter datePatternConverter;
    BasicPatternConverter basicPatternConverter1;
    MDCPatternConverter mDCPatternConverter;
    ClassNamePatternConverter classNamePatternConverter;
    CategoryPatternConverter categoryPatternConverter;
    LocationPatternConverter locationPatternConverter1;
    BasicPatternConverter basicPatternConverter2;
    LiteralPatternConverter literalPatternConverter;
    LocationPatternConverter locationPatternConverter2;
    PatternConverter pc = null;
    switch (c) {
      case 'c':
        categoryPatternConverter = new CategoryPatternConverter(this, this.formattingInfo, extractPrecisionOption());
        this.currentLiteral.setLength(0);
        break;
      case 'C':
        classNamePatternConverter = new ClassNamePatternConverter(this, this.formattingInfo, extractPrecisionOption());
        this.currentLiteral.setLength(0);
        break;
      case 'd':
        dateFormatStr = "ISO8601";
        dOpt = extractOption();
        if (dOpt != null)
          dateFormatStr = dOpt; 
        if (dateFormatStr.equalsIgnoreCase("ISO8601")) {
          df = new ISO8601DateFormat();
        } else if (dateFormatStr.equalsIgnoreCase("ABSOLUTE")) {
          df = new AbsoluteTimeDateFormat();
        } else if (dateFormatStr.equalsIgnoreCase("DATE")) {
          df = new DateTimeDateFormat();
        } else {
          try {
            df = new SimpleDateFormat(dateFormatStr);
          } catch (IllegalArgumentException e) {
            LogLog.error("Could not instantiate SimpleDateFormat with " + dateFormatStr, e);
            df = (DateFormat)OptionConverter.instantiateByClassName("org.apache.log4j.helpers.ISO8601DateFormat", DateFormat.class, null);
          } 
        } 
        datePatternConverter = new DatePatternConverter(this.formattingInfo, df);
        this.currentLiteral.setLength(0);
        break;
      case 'F':
        locationPatternConverter2 = new LocationPatternConverter(this, this.formattingInfo, 1004);
        this.currentLiteral.setLength(0);
        break;
      case 'l':
        locationPatternConverter2 = new LocationPatternConverter(this, this.formattingInfo, 1000);
        this.currentLiteral.setLength(0);
        break;
      case 'L':
        locationPatternConverter2 = new LocationPatternConverter(this, this.formattingInfo, 1003);
        this.currentLiteral.setLength(0);
        break;
      case 'm':
        basicPatternConverter2 = new BasicPatternConverter(this.formattingInfo, 2004);
        this.currentLiteral.setLength(0);
        break;
      case 'M':
        locationPatternConverter1 = new LocationPatternConverter(this, this.formattingInfo, 1001);
        this.currentLiteral.setLength(0);
        break;
      case 'p':
        basicPatternConverter1 = new BasicPatternConverter(this.formattingInfo, 2002);
        this.currentLiteral.setLength(0);
        break;
      case 'r':
        basicPatternConverter1 = new BasicPatternConverter(this.formattingInfo, 2000);
        this.currentLiteral.setLength(0);
        break;
      case 't':
        basicPatternConverter1 = new BasicPatternConverter(this.formattingInfo, 2001);
        this.currentLiteral.setLength(0);
        break;
      case 'x':
        basicPatternConverter1 = new BasicPatternConverter(this.formattingInfo, 2003);
        this.currentLiteral.setLength(0);
        break;
      case 'X':
        xOpt = extractOption();
        mDCPatternConverter = new MDCPatternConverter(this.formattingInfo, xOpt);
        this.currentLiteral.setLength(0);
        break;
      default:
        LogLog.error("Unexpected char [" + c + "] at position " + this.i + " in conversion patterrn.");
        literalPatternConverter = new LiteralPatternConverter(this.currentLiteral.toString());
        this.currentLiteral.setLength(0);
        break;
    } 
    addConverter(literalPatternConverter);
  }
  
  protected void addConverter(PatternConverter pc) {
    this.currentLiteral.setLength(0);
    addToList(pc);
    this.state = 0;
    this.formattingInfo.reset();
  }
}
