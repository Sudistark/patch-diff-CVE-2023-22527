package org.apache.log4j.helpers;

import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.atomic.AtomicBoolean;

public class COWArrayList<E> extends Object implements List<E> {
  AtomicBoolean fresh;
  
  CopyOnWriteArrayList<E> underlyingList;
  
  E[] ourCopy;
  
  final E[] modelArray;
  
  public COWArrayList(E[] modelArray) {
    this.fresh = new AtomicBoolean(false);
    this.underlyingList = new CopyOnWriteArrayList();
    this.modelArray = modelArray;
  }
  
  public int size() { return this.underlyingList.size(); }
  
  public boolean isEmpty() { return this.underlyingList.isEmpty(); }
  
  public boolean contains(Object o) { return this.underlyingList.contains(o); }
  
  public Iterator<E> iterator() { return this.underlyingList.iterator(); }
  
  private void refreshCopyIfNecessary() {
    if (!isFresh())
      refreshCopy(); 
  }
  
  private boolean isFresh() { return this.fresh.get(); }
  
  private void refreshCopy() {
    this.ourCopy = this.underlyingList.toArray(this.modelArray);
    this.fresh.set(true);
  }
  
  public Object[] toArray() {
    refreshCopyIfNecessary();
    return this.ourCopy;
  }
  
  public <T> T[] toArray(T[] a) {
    refreshCopyIfNecessary();
    return (T[])(Object[])this.ourCopy;
  }
  
  public E[] asTypedArray() {
    refreshCopyIfNecessary();
    return (E[])this.ourCopy;
  }
  
  private void markAsStale() { this.fresh.set(false); }
  
  public void addIfAbsent(E e) {
    this.underlyingList.addIfAbsent(e);
    markAsStale();
  }
  
  public boolean add(E e) {
    boolean result = this.underlyingList.add(e);
    markAsStale();
    return result;
  }
  
  public boolean remove(Object o) {
    boolean result = this.underlyingList.remove(o);
    markAsStale();
    return result;
  }
  
  public boolean containsAll(Collection<?> c) { return this.underlyingList.containsAll(c); }
  
  public boolean addAll(Collection<? extends E> c) {
    markAsStale();
    return this.underlyingList.addAll(c);
  }
  
  public boolean addAll(int index, Collection<? extends E> col) {
    markAsStale();
    return this.underlyingList.addAll(index, col);
  }
  
  public boolean removeAll(Collection<?> col) {
    markAsStale();
    return this.underlyingList.removeAll(col);
  }
  
  public boolean retainAll(Collection<?> col) {
    markAsStale();
    return this.underlyingList.retainAll(col);
  }
  
  public void clear() {
    markAsStale();
    this.underlyingList.clear();
  }
  
  public E get(int index) {
    refreshCopyIfNecessary();
    return (E)this.ourCopy[index];
  }
  
  public E set(int index, E element) {
    markAsStale();
    return (E)this.underlyingList.set(index, element);
  }
  
  public void add(int index, E element) {
    markAsStale();
    this.underlyingList.add(index, element);
  }
  
  public E remove(int index) {
    markAsStale();
    return (E)this.underlyingList.remove(index);
  }
  
  public int indexOf(Object o) { return this.underlyingList.indexOf(o); }
  
  public int lastIndexOf(Object o) { return this.underlyingList.lastIndexOf(o); }
  
  public ListIterator<E> listIterator() { return this.underlyingList.listIterator(); }
  
  public ListIterator<E> listIterator(int index) { return this.underlyingList.listIterator(index); }
  
  public List<E> subList(int fromIndex, int toIndex) { return this.underlyingList.subList(fromIndex, toIndex); }
}
