package org.apache.log4j.net;

import java.io.IOException;
import java.io.InputStream;
import java.io.InvalidClassException;
import java.io.ObjectInputStream;
import java.io.ObjectStreamClass;
import java.util.ArrayList;
import java.util.List;

public class HardenedObjectInputStream extends ObjectInputStream {
  static final String ARRAY_CLASS_PREFIX = "[L";
  
  final List<String> whitelistedClassNames;
  
  static final String[] JAVA_PACKAGES = { "java.lang", "java.util", "[Ljava.lang" };
  
  public HardenedObjectInputStream(InputStream in, String[] whilelist) throws IOException {
    super(in);
    this.whitelistedClassNames = new ArrayList();
    if (whilelist != null)
      for (int i = 0; i < whilelist.length; i++)
        this.whitelistedClassNames.add(whilelist[i]);  
  }
  
  public HardenedObjectInputStream(InputStream in, List<String> whitelist) throws IOException {
    super(in);
    this.whitelistedClassNames = new ArrayList();
    this.whitelistedClassNames.addAll(whitelist);
  }
  
  protected Class<?> resolveClass(ObjectStreamClass anObjectStreamClass) throws IOException, ClassNotFoundException {
    String incomingClassName = anObjectStreamClass.getName();
    if (!isWhitelisted(incomingClassName))
      throw new InvalidClassException("Unauthorized deserialization attempt", incomingClassName); 
    return super.resolveClass(anObjectStreamClass);
  }
  
  private boolean isWhitelisted(String incomingClassName) {
    for (int i = 0; i < JAVA_PACKAGES.length; i++) {
      if (incomingClassName.startsWith(JAVA_PACKAGES[i]))
        return true; 
    } 
    for (String whiteListed : this.whitelistedClassNames) {
      if (incomingClassName.equals(whiteListed))
        return true; 
    } 
    return false;
  }
  
  protected void addToWhitelist(List<String> additionalAuthorizedClasses) { this.whitelistedClassNames.addAll(additionalAuthorizedClasses); }
}
