package org.apache.commons.codec.language.bm;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.EnumMap;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;
import org.apache.commons.codec.Resources;

public class Rule {
  public static final RPattern ALL_STRINGS_RMATCHER = input -> true;
  
  public static final String ALL = "ALL";
  
  private static final String DOUBLE_QUOTE = "\"";
  
  private static final String HASH_INCLUDE = "#include";
  
  private static final int HASH_INCLUDE_LENGTH = "#include".length();
  
  private static final Map<NameType, Map<RuleType, Map<String, Map<String, List<Rule>>>>> RULES = new EnumMap(NameType.class);
  
  private final RPattern lContext;
  
  private final String pattern;
  
  private final PhonemeExpr phoneme;
  
  private final RPattern rContext;
  
  static  {
    for (NameType s : NameType.values()) {
      Map<RuleType, Map<String, Map<String, List<Rule>>>> rts = new EnumMap<RuleType, Map<String, Map<String, List<Rule>>>>(RuleType.class);
      for (RuleType rt : RuleType.values()) {
        Map<String, Map<String, List<Rule>>> rs = new HashMap<String, Map<String, List<Rule>>>();
        Languages ls = Languages.getInstance(s);
        ls.getLanguages().forEach(l -> {
              try (Scanner scanner = createScanner(s, rt, l)) {
                rs.put(l, parseRules(scanner, createResourceName(s, rt, l)));
              } catch (IllegalStateException e) {
                throw new IllegalStateException("Problem processing " + createResourceName(s, rt, l), e);
              } 
            });
        if (!rt.equals(RuleType.RULES))
          try (Scanner scanner = createScanner(s, rt, "common")) {
            rs.put("common", parseRules(scanner, createResourceName(s, rt, "common")));
          }  
        rts.put(rt, Collections.unmodifiableMap(rs));
      } 
      RULES.put(s, Collections.unmodifiableMap(rts));
    } 
  }
  
  private static boolean contains(CharSequence chars, char input) { return chars.chars().anyMatch(c -> (c == input)); }
  
  private static String createResourceName(NameType nameType, RuleType rt, String lang) {
    return String.format("org/apache/commons/codec/language/bm/%s_%s_%s.txt", new Object[] { nameType
          .getName(), rt.getName(), lang });
  }
  
  private static Scanner createScanner(NameType nameType, RuleType rt, String lang) {
    String resName = createResourceName(nameType, rt, lang);
    return new Scanner(Resources.getInputStream(resName), "UTF-8");
  }
  
  private static Scanner createScanner(String lang) {
    String resName = String.format("org/apache/commons/codec/language/bm/%s.txt", new Object[] { lang });
    return new Scanner(Resources.getInputStream(resName), "UTF-8");
  }
  
  private static boolean endsWith(CharSequence input, CharSequence suffix) {
    int suffixLength = suffix.length();
    int inputLength = input.length();
    if (suffixLength > inputLength)
      return false; 
    for (int i = inputLength - 1, j = suffixLength - 1; j >= 0; i--, j--) {
      if (input.charAt(i) != suffix.charAt(j))
        return false; 
    } 
    return true;
  }
  
  public static List<Rule> getInstance(NameType nameType, RuleType rt, Languages.LanguageSet langs) {
    Map<String, List<Rule>> ruleMap = getInstanceMap(nameType, rt, langs);
    List<Rule> allRules = new ArrayList<Rule>();
    ruleMap.values().forEach(rules -> allRules.addAll(rules));
    return allRules;
  }
  
  public static List<Rule> getInstance(NameType nameType, RuleType rt, String lang) { return getInstance(nameType, rt, Languages.LanguageSet.from(new HashSet(Arrays.asList(new String[] { lang })))); }
  
  public static Map<String, List<Rule>> getInstanceMap(NameType nameType, RuleType rt, Languages.LanguageSet langs) { return langs.isSingleton() ? getInstanceMap(nameType, rt, langs.getAny()) : 
      getInstanceMap(nameType, rt, "any"); }
  
  public static Map<String, List<Rule>> getInstanceMap(NameType nameType, RuleType rt, String lang) {
    Map<String, List<Rule>> rules = (Map)((Map)((Map)RULES.get(nameType)).get(rt)).get(lang);
    if (rules == null)
      throw new IllegalArgumentException(String.format("No rules found for %s, %s, %s.", new Object[] { nameType
              .getName(), rt.getName(), lang })); 
    return rules;
  }
  
  private static Phoneme parsePhoneme(String ph) {
    int open = ph.indexOf("[");
    if (open >= 0) {
      if (!ph.endsWith("]"))
        throw new IllegalArgumentException("Phoneme expression contains a '[' but does not end in ']'"); 
      String before = ph.substring(0, open);
      String in = ph.substring(open + 1, ph.length() - 1);
      Set<String> langs = new HashSet<String>(Arrays.asList(in.split("[+]")));
      return new Phoneme(before, Languages.LanguageSet.from(langs));
    } 
    return new Phoneme(ph, Languages.ANY_LANGUAGE);
  }
  
  private static PhonemeExpr parsePhonemeExpr(String ph) {
    if (ph.startsWith("(")) {
      if (!ph.endsWith(")"))
        throw new IllegalArgumentException("Phoneme starts with '(' so must end with ')'"); 
      List<Phoneme> phs = new ArrayList<Phoneme>();
      String body = ph.substring(1, ph.length() - 1);
      for (String part : body.split("[|]"))
        phs.add(parsePhoneme(part)); 
      if (body.startsWith("|") || body.endsWith("|"))
        phs.add(new Phoneme("", Languages.ANY_LANGUAGE)); 
      return new PhonemeList(phs);
    } 
    return parsePhoneme(ph);
  }
  
  private static Map<String, List<Rule>> parseRules(Scanner scanner, String location) {
    Map<String, List<Rule>> lines = new HashMap<String, List<Rule>>();
    int currentLine = 0;
    boolean inMultilineComment = false;
    while (scanner.hasNextLine()) {
      currentLine++;
      String rawLine = scanner.nextLine();
      String line = rawLine;
      if (inMultilineComment) {
        if (line.endsWith("*/"))
          inMultilineComment = false; 
        continue;
      } 
      if (line.startsWith("/*")) {
        inMultilineComment = true;
        continue;
      } 
      int cmtI = line.indexOf("//");
      if (cmtI >= 0)
        line = line.substring(0, cmtI); 
      line = line.trim();
      if (line.isEmpty())
        continue; 
      if (line.startsWith("#include")) {
        String incl = line.substring(HASH_INCLUDE_LENGTH).trim();
        if (incl.contains(" "))
          throw new IllegalArgumentException("Malformed import statement '" + rawLine + "' in " + location); 
        try (Scanner hashIncludeScanner = createScanner(incl)) {
          lines.putAll(parseRules(hashIncludeScanner, location + "->" + incl));
          if (hashIncludeScanner != null) {
            if (null != null)
              try {
                hashIncludeScanner.close();
                continue;
              } catch (Throwable throwable) {
                null.addSuppressed(throwable);
                continue;
              }  
            hashIncludeScanner.close();
          } 
        } 
      } 
      String[] parts = line.split("\\s+");
      if (parts.length != 4)
        throw new IllegalArgumentException("Malformed rule statement split into " + parts.length + " parts: " + rawLine + " in " + location); 
      try {
        String pat = stripQuotes(parts[0]);
        String lCon = stripQuotes(parts[1]);
        String rCon = stripQuotes(parts[2]);
        PhonemeExpr ph = parsePhonemeExpr(stripQuotes(parts[3]));
        int cLine = currentLine;
        Object object = new Object(pat, lCon, rCon, ph, cLine, location, pat, lCon, rCon);
        String patternKey = object.pattern.substring(0, 1);
        List<Rule> rules = (List)lines.computeIfAbsent(patternKey, k -> new ArrayList());
        rules.add(object);
      } catch (IllegalArgumentException e) {
        throw new IllegalStateException("Problem parsing line '" + currentLine + "' in " + location, e);
      } 
    } 
    return lines;
  }
  
  private static RPattern pattern(String regex) {
    boolean startsWith = regex.startsWith("^");
    boolean endsWith = regex.endsWith("$");
    String content = regex.substring(startsWith ? 1 : 0, endsWith ? (regex.length() - 1) : regex.length());
    boolean boxes = content.contains("[");
    if (!boxes) {
      if (startsWith && endsWith) {
        if (content.isEmpty())
          return input -> (input.length() == 0); 
        return input -> input.equals(content);
      } 
      if ((startsWith || endsWith) && content.isEmpty())
        return ALL_STRINGS_RMATCHER; 
      if (startsWith)
        return input -> startsWith(input, content); 
      if (endsWith)
        return input -> endsWith(input, content); 
    } else {
      boolean startsWithBox = content.startsWith("[");
      boolean endsWithBox = content.endsWith("]");
      if (startsWithBox && endsWithBox) {
        String boxContent = content.substring(1, content.length() - 1);
        if (!boxContent.contains("[")) {
          boolean negate = boxContent.startsWith("^");
          if (negate)
            boxContent = boxContent.substring(1); 
          String bContent = boxContent;
          boolean shouldMatch = !negate;
          if (startsWith && endsWith)
            return input -> (input.length() == 1 && contains(bContent, input.charAt(0)) == shouldMatch); 
          if (startsWith)
            return input -> (input.length() > 0 && contains(bContent, input.charAt(0)) == shouldMatch); 
          if (endsWith)
            return input -> (input.length() > 0 && 
              contains(bContent, input.charAt(input.length() - 1)) == shouldMatch); 
        } 
      } 
    } 
    return new Object(regex);
  }
  
  private static boolean startsWith(CharSequence input, CharSequence prefix) {
    if (prefix.length() > input.length())
      return false; 
    for (int i = 0; i < prefix.length(); i++) {
      if (input.charAt(i) != prefix.charAt(i))
        return false; 
    } 
    return true;
  }
  
  private static String stripQuotes(String str) {
    if (str.startsWith("\""))
      str = str.substring(1); 
    if (str.endsWith("\""))
      str = str.substring(0, str.length() - 1); 
    return str;
  }
  
  public Rule(String pattern, String lContext, String rContext, PhonemeExpr phoneme) {
    this.pattern = pattern;
    this.lContext = pattern(lContext + "$");
    this.rContext = pattern("^" + rContext);
    this.phoneme = phoneme;
  }
  
  public RPattern getLContext() { return this.lContext; }
  
  public String getPattern() { return this.pattern; }
  
  public PhonemeExpr getPhoneme() { return this.phoneme; }
  
  public RPattern getRContext() { return this.rContext; }
  
  public boolean patternAndContextMatches(CharSequence input, int i) {
    if (i < 0)
      throw new IndexOutOfBoundsException("Can not match pattern at negative indexes"); 
    int patternLength = this.pattern.length();
    int ipl = i + patternLength;
    if (ipl > input.length())
      return false; 
    if (!input.subSequence(i, ipl).equals(this.pattern))
      return false; 
    if (!this.rContext.isMatch(input.subSequence(ipl, input.length())))
      return false; 
    return this.lContext.isMatch(input.subSequence(0, i));
  }
}
