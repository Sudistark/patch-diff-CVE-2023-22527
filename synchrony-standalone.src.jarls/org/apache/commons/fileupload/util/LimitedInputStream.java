package org.apache.commons.fileupload.util;

import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;

public abstract class LimitedInputStream extends FilterInputStream implements Closeable {
  private final long sizeMax;
  
  private long count;
  
  private boolean closed;
  
  public LimitedInputStream(InputStream inputStream, long pSizeMax) {
    super(inputStream);
    this.sizeMax = pSizeMax;
  }
  
  protected abstract void raiseError(long paramLong1, long paramLong2) throws IOException;
  
  private void checkLimit() throws IOException {
    if (this.count > this.sizeMax)
      raiseError(this.sizeMax, this.count); 
  }
  
  public int read() throws IOException {
    int res = super.read();
    if (res != -1) {
      this.count++;
      checkLimit();
    } 
    return res;
  }
  
  public int read(byte[] b, int off, int len) throws IOException {
    int res = super.read(b, off, len);
    if (res > 0) {
      this.count += res;
      checkLimit();
    } 
    return res;
  }
  
  public boolean isClosed() throws IOException { return this.closed; }
  
  public void close() throws IOException {
    this.closed = true;
    super.close();
  }
}
