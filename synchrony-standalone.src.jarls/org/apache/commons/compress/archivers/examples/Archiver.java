package org.apache.commons.compress.archivers.examples;

import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.nio.channels.Channels;
import java.nio.channels.FileChannel;
import java.nio.channels.SeekableByteChannel;
import java.nio.file.FileVisitOption;
import java.nio.file.Files;
import java.nio.file.LinkOption;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.util.EnumSet;
import org.apache.commons.compress.archivers.ArchiveException;
import org.apache.commons.compress.archivers.ArchiveOutputStream;
import org.apache.commons.compress.archivers.ArchiveStreamFactory;
import org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;

public class Archiver {
  public static final EnumSet<FileVisitOption> EMPTY_FileVisitOption = EnumSet.noneOf(FileVisitOption.class);
  
  public void create(ArchiveOutputStream target, File directory) throws IOException { create(target, directory.toPath(), EMPTY_FileVisitOption, new LinkOption[0]); }
  
  public void create(ArchiveOutputStream target, Path directory) throws IOException { create(target, directory, EMPTY_FileVisitOption, new LinkOption[0]); }
  
  public void create(ArchiveOutputStream target, Path directory, EnumSet<FileVisitOption> fileVisitOptions, LinkOption... linkOptions) throws IOException {
    Files.walkFileTree(directory, fileVisitOptions, 2147483647, new ArchiverFileVisitor(target, directory, linkOptions, null));
    target.finish();
  }
  
  public void create(SevenZOutputFile target, File directory) throws IOException { create(target, directory.toPath()); }
  
  public void create(SevenZOutputFile target, Path directory) throws IOException {
    Files.walkFileTree(directory, new Object(this, null, directory, new LinkOption[0], directory, target));
    target.finish();
  }
  
  public void create(String format, File target, File directory) throws IOException, ArchiveException { create(format, target.toPath(), directory.toPath()); }
  
  @Deprecated
  public void create(String format, OutputStream target, File directory) throws IOException, ArchiveException { create(format, target, directory, CloseableConsumer.NULL_CONSUMER); }
  
  public void create(String format, OutputStream target, File directory, CloseableConsumer closeableConsumer) throws IOException, ArchiveException {
    CloseableConsumerAdapter c = new CloseableConsumerAdapter(closeableConsumer);
    try {
      create((ArchiveOutputStream)c.track(ArchiveStreamFactory.DEFAULT.createArchiveOutputStream(format, target)), directory);
      c.close();
    } catch (Throwable throwable) {
      try {
        c.close();
      } catch (Throwable throwable1) {
        throwable.addSuppressed(throwable1);
      } 
      throw throwable;
    } 
  }
  
  public void create(String format, Path target, Path directory) throws IOException, ArchiveException {
    if (prefersSeekableByteChannel(format)) {
      SeekableByteChannel channel = FileChannel.open(target, new OpenOption[] { StandardOpenOption.WRITE, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING });
      try {
        create(format, channel, directory);
        if (channel != null)
          channel.close(); 
        return;
      } catch (Throwable throwable) {
        if (channel != null)
          try {
            channel.close();
          } catch (Throwable throwable1) {
            throwable.addSuppressed(throwable1);
          }  
        throw throwable;
      } 
    } 
    ArchiveOutputStream outputStream = ArchiveStreamFactory.DEFAULT.createArchiveOutputStream(format, 
        Files.newOutputStream(target, new OpenOption[0]));
    try {
      create(outputStream, directory, EMPTY_FileVisitOption, new LinkOption[0]);
      if (outputStream != null)
        outputStream.close(); 
    } catch (Throwable throwable) {
      if (outputStream != null)
        try {
          outputStream.close();
        } catch (Throwable throwable1) {
          throwable.addSuppressed(throwable1);
        }  
      throw throwable;
    } 
  }
  
  @Deprecated
  public void create(String format, SeekableByteChannel target, File directory) throws IOException, ArchiveException { create(format, target, directory, CloseableConsumer.NULL_CONSUMER); }
  
  public void create(String format, SeekableByteChannel target, File directory, CloseableConsumer closeableConsumer) throws IOException, ArchiveException {
    CloseableConsumerAdapter c = new CloseableConsumerAdapter(closeableConsumer);
    try {
      if (!prefersSeekableByteChannel(format)) {
        create(format, (OutputStream)c.track(Channels.newOutputStream(target)), directory);
      } else if ("zip".equalsIgnoreCase(format)) {
        create((ArchiveOutputStream)c.track(new ZipArchiveOutputStream(target)), directory);
      } else if ("7z".equalsIgnoreCase(format)) {
        create((SevenZOutputFile)c.track(new SevenZOutputFile(target)), directory);
      } else {
        throw new ArchiveException("Don't know how to handle format " + format);
      } 
      c.close();
    } catch (Throwable throwable) {
      try {
        c.close();
      } catch (Throwable throwable1) {
        throwable.addSuppressed(throwable1);
      } 
      throw throwable;
    } 
  }
  
  public void create(String format, SeekableByteChannel target, Path directory) throws IOException {
    if ("7z".equalsIgnoreCase(format)) {
      SevenZOutputFile sevenZFile = new SevenZOutputFile(target);
      try {
        create(sevenZFile, directory);
        sevenZFile.close();
      } catch (Throwable throwable) {
        try {
          sevenZFile.close();
        } catch (Throwable throwable1) {
          throwable.addSuppressed(throwable1);
        } 
        throw throwable;
      } 
    } else if ("zip".equalsIgnoreCase(format)) {
      ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(target);
      try {
        create(zipArchiveOutputStream, directory, EMPTY_FileVisitOption, new LinkOption[0]);
        zipArchiveOutputStream.close();
      } catch (Throwable throwable) {
        try {
          zipArchiveOutputStream.close();
        } catch (Throwable throwable1) {
          throwable.addSuppressed(throwable1);
        } 
        throw throwable;
      } 
    } else {
      throw new IllegalStateException(format);
    } 
  }
  
  private boolean prefersSeekableByteChannel(String format) {
    return ("zip".equalsIgnoreCase(format) || "7z"
      .equalsIgnoreCase(format));
  }
}
