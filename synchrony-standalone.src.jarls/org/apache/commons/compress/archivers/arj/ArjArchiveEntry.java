package org.apache.commons.compress.archivers.arj;

import java.io.File;
import java.util.Date;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipUtil;

public class ArjArchiveEntry implements ArchiveEntry {
  private final LocalFileHeader localFileHeader;
  
  public ArjArchiveEntry() { this.localFileHeader = new LocalFileHeader(); }
  
  ArjArchiveEntry(LocalFileHeader localFileHeader) { this.localFileHeader = localFileHeader; }
  
  public boolean equals(Object obj) {
    if (this == obj)
      return true; 
    if (obj == null || getClass() != obj.getClass())
      return false; 
    ArjArchiveEntry other = (ArjArchiveEntry)obj;
    return this.localFileHeader.equals(other.localFileHeader);
  }
  
  public int getHostOs() { return this.localFileHeader.hostOS; }
  
  public Date getLastModifiedDate() {
    long ts = isHostOsUnix() ? (this.localFileHeader.dateTimeModified * 1000L) : ZipUtil.dosToJavaTime(0xFFFFFFFFL & this.localFileHeader.dateTimeModified);
    return new Date(ts);
  }
  
  int getMethod() { return this.localFileHeader.method; }
  
  public int getMode() { return this.localFileHeader.fileAccessMode; }
  
  public String getName() {
    if ((this.localFileHeader.arjFlags & 0x10) != 0)
      return this.localFileHeader.name.replace("/", File.separator); 
    return this.localFileHeader.name;
  }
  
  public long getSize() { return this.localFileHeader.originalSize; }
  
  public int getUnixMode() { return isHostOsUnix() ? getMode() : 0; }
  
  public int hashCode() {
    String name = getName();
    return (name == null) ? 0 : name.hashCode();
  }
  
  public boolean isDirectory() { return (this.localFileHeader.fileType == 3); }
  
  public boolean isHostOsUnix() { return (getHostOs() == 2 || getHostOs() == 8); }
}
