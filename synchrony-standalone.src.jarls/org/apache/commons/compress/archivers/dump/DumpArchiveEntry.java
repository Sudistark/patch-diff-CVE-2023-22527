package org.apache.commons.compress.archivers.dump;

import java.util.Collections;
import java.util.Date;
import java.util.Set;
import org.apache.commons.compress.archivers.ArchiveEntry;

public class DumpArchiveEntry implements ArchiveEntry {
  private String name;
  
  static DumpArchiveEntry parse(byte[] buffer) {
    DumpArchiveEntry entry = new DumpArchiveEntry();
    TapeSegmentHeader header = entry.header;
    TapeSegmentHeader.access$002(header, DumpArchiveConstants.SEGMENT_TYPE.find(DumpArchiveUtil.convert32(buffer, 0)));
    TapeSegmentHeader.access$102(header, DumpArchiveUtil.convert32(buffer, 12));
    entry.ino = TapeSegmentHeader.access$202(header, DumpArchiveUtil.convert32(buffer, 20));
    int m = DumpArchiveUtil.convert16(buffer, 32);
    entry.setType(TYPE.find(m >> 12 & 0xF));
    entry.setMode(m);
    entry.nlink = DumpArchiveUtil.convert16(buffer, 34);
    entry.setSize(DumpArchiveUtil.convert64(buffer, 40));
    long t = 1000L * DumpArchiveUtil.convert32(buffer, 48) + (DumpArchiveUtil.convert32(buffer, 52) / 1000);
    entry.setAccessTime(new Date(t));
    t = 1000L * DumpArchiveUtil.convert32(buffer, 56) + (DumpArchiveUtil.convert32(buffer, 60) / 1000);
    entry.setLastModifiedDate(new Date(t));
    t = 1000L * DumpArchiveUtil.convert32(buffer, 64) + (DumpArchiveUtil.convert32(buffer, 68) / 1000);
    entry.ctime = t;
    entry.generation = DumpArchiveUtil.convert32(buffer, 140);
    entry.setUserId(DumpArchiveUtil.convert32(buffer, 144));
    entry.setGroupId(DumpArchiveUtil.convert32(buffer, 148));
    TapeSegmentHeader.access$302(header, DumpArchiveUtil.convert32(buffer, 160));
    TapeSegmentHeader.access$402(header, 0);
    for (int i = 0; i < 512 && i < TapeSegmentHeader.access$300(header); i++) {
      if (buffer[164 + i] == 0)
        TapeSegmentHeader.access$408(header); 
    } 
    System.arraycopy(buffer, 164, TapeSegmentHeader.access$500(header), 0, 512);
    entry.volume = header.getVolume();
    return entry;
  }
  
  private TYPE type = TYPE.UNKNOWN;
  
  private int mode;
  
  private Set<PERMISSION> permissions = Collections.emptySet();
  
  private long size;
  
  private long atime;
  
  private long mtime;
  
  private int uid;
  
  private int gid;
  
  private final DumpArchiveSummary summary = null;
  
  private final TapeSegmentHeader header = new TapeSegmentHeader();
  
  private String simpleName;
  
  private String originalName;
  
  private int volume;
  
  private long offset;
  
  private int ino;
  
  private int nlink;
  
  private long ctime;
  
  private int generation;
  
  private boolean isDeleted;
  
  public DumpArchiveEntry() {}
  
  public DumpArchiveEntry(String name, String simpleName) {
    setName(name);
    this.simpleName = simpleName;
  }
  
  protected DumpArchiveEntry(String name, String simpleName, int ino, TYPE type) {
    setType(type);
    setName(name);
    this.simpleName = simpleName;
    this.ino = ino;
    this.offset = 0L;
  }
  
  public boolean equals(Object o) {
    if (o == this)
      return true; 
    if (o == null || !o.getClass().equals(getClass()))
      return false; 
    DumpArchiveEntry rhs = (DumpArchiveEntry)o;
    if (this.ino != rhs.ino)
      return false; 
    if ((this.summary == null && rhs.summary != null) || (this.summary != null && 
      !this.summary.equals(rhs.summary)))
      return false; 
    return true;
  }
  
  public Date getAccessTime() { return new Date(this.atime); }
  
  public Date getCreationTime() { return new Date(this.ctime); }
  
  long getEntrySize() { return this.size; }
  
  public int getGeneration() { return this.generation; }
  
  public int getGroupId() { return this.gid; }
  
  public int getHeaderCount() { return this.header.getCount(); }
  
  public int getHeaderHoles() { return this.header.getHoles(); }
  
  public DumpArchiveConstants.SEGMENT_TYPE getHeaderType() { return this.header.getType(); }
  
  public int getIno() { return this.header.getIno(); }
  
  public Date getLastModifiedDate() { return new Date(this.mtime); }
  
  public int getMode() { return this.mode; }
  
  public String getName() { return this.name; }
  
  public int getNlink() { return this.nlink; }
  
  public long getOffset() { return this.offset; }
  
  String getOriginalName() { return this.originalName; }
  
  public Set<PERMISSION> getPermissions() { return this.permissions; }
  
  public String getSimpleName() { return this.simpleName; }
  
  public long getSize() { return isDirectory() ? -1L : this.size; }
  
  public TYPE getType() { return this.type; }
  
  public int getUserId() { return this.uid; }
  
  public int getVolume() { return this.volume; }
  
  public int hashCode() { return this.ino; }
  
  public boolean isBlkDev() { return (this.type == TYPE.BLKDEV); }
  
  public boolean isChrDev() { return (this.type == TYPE.CHRDEV); }
  
  public boolean isDeleted() { return this.isDeleted; }
  
  public boolean isDirectory() { return (this.type == TYPE.DIRECTORY); }
  
  public boolean isFifo() { return (this.type == TYPE.FIFO); }
  
  public boolean isFile() { return (this.type == TYPE.FILE); }
  
  public boolean isSocket() { return (this.type == TYPE.SOCKET); }
  
  public boolean isSparseRecord(int idx) { return ((this.header.getCdata(idx) & true) == 0); }
  
  public void setAccessTime(Date atime) { this.atime = atime.getTime(); }
  
  public void setCreationTime(Date ctime) { this.ctime = ctime.getTime(); }
  
  public void setDeleted(boolean isDeleted) { this.isDeleted = isDeleted; }
  
  public void setGeneration(int generation) { this.generation = generation; }
  
  public void setGroupId(int gid) { this.gid = gid; }
  
  public void setLastModifiedDate(Date mtime) { this.mtime = mtime.getTime(); }
  
  public void setMode(int mode) {
    this.mode = mode & 0xFFF;
    this.permissions = PERMISSION.find(mode);
  }
  
  public final void setName(String name) {
    this.originalName = name;
    if (name != null) {
      if (isDirectory() && !name.endsWith("/"))
        name = name + "/"; 
      if (name.startsWith("./"))
        name = name.substring(2); 
    } 
    this.name = name;
  }
  
  public void setNlink(int nlink) { this.nlink = nlink; }
  
  public void setOffset(long offset) { this.offset = offset; }
  
  protected void setSimpleName(String simpleName) { this.simpleName = simpleName; }
  
  public void setSize(long size) { this.size = size; }
  
  public void setType(TYPE type) { this.type = type; }
  
  public void setUserId(int uid) { this.uid = uid; }
  
  public void setVolume(int volume) { this.volume = volume; }
  
  public String toString() { return getName(); }
  
  void update(byte[] buffer) {
    TapeSegmentHeader.access$102(this.header, DumpArchiveUtil.convert32(buffer, 16));
    TapeSegmentHeader.access$302(this.header, DumpArchiveUtil.convert32(buffer, 160));
    TapeSegmentHeader.access$402(this.header, 0);
    for (int i = 0; i < 512 && i < TapeSegmentHeader.access$300(this.header); i++) {
      if (buffer[164 + i] == 0)
        TapeSegmentHeader.access$408(this.header); 
    } 
    System.arraycopy(buffer, 164, TapeSegmentHeader.access$500(this.header), 0, 512);
  }
}
