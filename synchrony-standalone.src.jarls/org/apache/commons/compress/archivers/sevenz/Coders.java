package org.apache.commons.compress.archivers.sevenz;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Arrays;
import java.util.Map;

class Coders {
  private static final Map<SevenZMethod, AbstractCoder> CODER_MAP = new Object();
  
  static InputStream addDecoder(String archiveName, InputStream is, long uncompressedLength, Coder coder, byte[] password, int maxMemoryLimitInKb) throws IOException {
    AbstractCoder cb = findByMethod(SevenZMethod.byId(coder.decompressionMethodId));
    if (cb == null)
      throw new IOException("Unsupported compression method " + 
          Arrays.toString(coder.decompressionMethodId) + " used in " + archiveName); 
    return cb.decode(archiveName, is, uncompressedLength, coder, password, maxMemoryLimitInKb);
  }
  
  static OutputStream addEncoder(OutputStream out, SevenZMethod method, Object options) throws IOException {
    AbstractCoder cb = findByMethod(method);
    if (cb == null)
      throw new IOException("Unsupported compression method " + method); 
    return cb.encode(out, options);
  }
  
  static AbstractCoder findByMethod(SevenZMethod method) { return (AbstractCoder)CODER_MAP.get(method); }
}
