package org.apache.commons.compress.archivers.sevenz;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

class AES256SHA256Decoder extends AbstractCoder {
  static byte[] sha256Password(byte[] password, int numCyclesPower, byte[] salt) {
    MessageDigest digest;
    try {
      digest = MessageDigest.getInstance("SHA-256");
    } catch (NoSuchAlgorithmException noSuchAlgorithmException) {
      throw new IllegalStateException("SHA-256 is unsupported by your Java implementation", noSuchAlgorithmException);
    } 
    byte[] extra = new byte[8];
    long j;
    for (j = 0L; j < 1L << numCyclesPower; j++) {
      digest.update(salt);
      digest.update(password);
      digest.update(extra);
      for (int k = 0; k < extra.length; k++) {
        extra[k] = (byte)(extra[k] + 1);
        if (extra[k] != 0)
          break; 
      } 
    } 
    return digest.digest();
  }
  
  static byte[] sha256Password(char[] password, int numCyclesPower, byte[] salt) { return sha256Password(utf16Decode(password), numCyclesPower, salt); }
  
  static byte[] utf16Decode(char[] chars) {
    if (chars == null)
      return null; 
    ByteBuffer encoded = StandardCharsets.UTF_16LE.encode(CharBuffer.wrap(chars));
    if (encoded.hasArray())
      return encoded.array(); 
    byte[] e = new byte[encoded.remaining()];
    encoded.get(e);
    return e;
  }
  
  AES256SHA256Decoder() { super(new Class[] { AES256Options.class }); }
  
  InputStream decode(String archiveName, InputStream in, long uncompressedLength, Coder coder, byte[] passwordBytes, int maxMemoryLimitInKb) { return new Object(this, coder, archiveName, passwordBytes, in); }
  
  OutputStream encode(OutputStream out, Object options) throws IOException {
    AES256Options opts = (AES256Options)options;
    return new Object(this, out, opts);
  }
  
  byte[] getOptionsAsProperties(Object options) throws IOException {
    AES256Options opts = (AES256Options)options;
    byte[] props = new byte[2 + opts.getSalt().length + opts.getIv().length];
    props[0] = (byte)(opts.getNumCyclesPower() | ((opts.getSalt().length == 0) ? 0 : 128) | ((opts.getIv().length == 0) ? 0 : 64));
    if (opts.getSalt().length != 0 || opts.getIv().length != 0) {
      props[1] = (byte)(((opts.getSalt().length == 0) ? 0 : (opts.getSalt().length - 1)) << 4 | ((opts.getIv().length == 0) ? 0 : (opts.getIv().length - 1)));
      System.arraycopy(opts.getSalt(), 0, props, 2, opts.getSalt().length);
      System.arraycopy(opts.getIv(), 0, props, 2 + opts.getSalt().length, opts.getIv().length);
    } 
    return props;
  }
}
