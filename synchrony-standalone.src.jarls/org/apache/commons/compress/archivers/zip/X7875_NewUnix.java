package org.apache.commons.compress.archivers.zip;

import java.io.Serializable;
import java.math.BigInteger;
import java.util.Arrays;
import java.util.zip.ZipException;
import org.apache.commons.compress.utils.ByteUtils;

public class X7875_NewUnix implements ZipExtraField, Cloneable, Serializable {
  private static final ZipShort HEADER_ID = new ZipShort(30837);
  
  private static final ZipShort ZERO = new ZipShort(0);
  
  private static final BigInteger ONE_THOUSAND = BigInteger.valueOf(1000L);
  
  private static final long serialVersionUID = 1L;
  
  private int version;
  
  private BigInteger uid;
  
  private BigInteger gid;
  
  static byte[] trimLeadingZeroesForceMinLength(byte[] array) {
    if (array == null)
      return null; 
    int pos = 0;
    for (byte b : array) {
      if (b != 0)
        break; 
      pos++;
    } 
    int MIN_LENGTH = 1;
    byte[] trimmedArray = new byte[Math.max(1, array.length - pos)];
    int startPos = trimmedArray.length - array.length - pos;
    System.arraycopy(array, pos, trimmedArray, startPos, trimmedArray.length - startPos);
    return trimmedArray;
  }
  
  public X7875_NewUnix() {
    this.version = 1;
    reset();
  }
  
  public Object clone() throws CloneNotSupportedException { return super.clone(); }
  
  public boolean equals(Object o) {
    if (o instanceof X7875_NewUnix) {
      X7875_NewUnix xf = (X7875_NewUnix)o;
      return (this.version == xf.version && this.uid.equals(xf.uid) && this.gid.equals(xf.gid));
    } 
    return false;
  }
  
  public byte[] getCentralDirectoryData() { return ByteUtils.EMPTY_BYTE_ARRAY; }
  
  public ZipShort getCentralDirectoryLength() { return ZERO; }
  
  public long getGID() { return ZipUtil.bigToLong(this.gid); }
  
  public ZipShort getHeaderId() { return HEADER_ID; }
  
  public byte[] getLocalFileDataData() {
    byte[] uidBytes = this.uid.toByteArray();
    byte[] gidBytes = this.gid.toByteArray();
    uidBytes = trimLeadingZeroesForceMinLength(uidBytes);
    int uidBytesLen = (uidBytes != null) ? uidBytes.length : 0;
    gidBytes = trimLeadingZeroesForceMinLength(gidBytes);
    int gidBytesLen = (gidBytes != null) ? gidBytes.length : 0;
    byte[] data = new byte[3 + uidBytesLen + gidBytesLen];
    if (uidBytes != null)
      ZipUtil.reverse(uidBytes); 
    if (gidBytes != null)
      ZipUtil.reverse(gidBytes); 
    int pos = 0;
    data[pos++] = ZipUtil.unsignedIntToSignedByte(this.version);
    data[pos++] = ZipUtil.unsignedIntToSignedByte(uidBytesLen);
    if (uidBytes != null)
      System.arraycopy(uidBytes, 0, data, pos, uidBytesLen); 
    pos += uidBytesLen;
    data[pos++] = ZipUtil.unsignedIntToSignedByte(gidBytesLen);
    if (gidBytes != null)
      System.arraycopy(gidBytes, 0, data, pos, gidBytesLen); 
    return data;
  }
  
  public ZipShort getLocalFileDataLength() {
    byte[] b = trimLeadingZeroesForceMinLength(this.uid.toByteArray());
    int uidSize = (b == null) ? 0 : b.length;
    b = trimLeadingZeroesForceMinLength(this.gid.toByteArray());
    int gidSize = (b == null) ? 0 : b.length;
    return new ZipShort(3 + uidSize + gidSize);
  }
  
  public long getUID() { return ZipUtil.bigToLong(this.uid); }
  
  public int hashCode() {
    hc = -1234567 * this.version;
    hc ^= Integer.rotateLeft(this.uid.hashCode(), 16);
    return this.gid.hashCode();
  }
  
  public void parseFromCentralDirectoryData(byte[] buffer, int offset, int length) throws ZipException {}
  
  public void parseFromLocalFileData(byte[] data, int offset, int length) throws ZipException {
    reset();
    if (length < 3)
      throw new ZipException("X7875_NewUnix length is too short, only " + length + " bytes"); 
    this.version = ZipUtil.signedByteToUnsignedInt(data[offset++]);
    int uidSize = ZipUtil.signedByteToUnsignedInt(data[offset++]);
    if (uidSize + 3 > length)
      throw new ZipException("X7875_NewUnix invalid: uidSize " + uidSize + " doesn't fit into " + length + " bytes"); 
    byte[] uidBytes = Arrays.copyOfRange(data, offset, offset + uidSize);
    offset += uidSize;
    this.uid = new BigInteger(1, ZipUtil.reverse(uidBytes));
    int gidSize = ZipUtil.signedByteToUnsignedInt(data[offset++]);
    if (uidSize + 3 + gidSize > length)
      throw new ZipException("X7875_NewUnix invalid: gidSize " + gidSize + " doesn't fit into " + length + " bytes"); 
    byte[] gidBytes = Arrays.copyOfRange(data, offset, offset + gidSize);
    this.gid = new BigInteger(1, ZipUtil.reverse(gidBytes));
  }
  
  private void reset() {
    this.uid = ONE_THOUSAND;
    this.gid = ONE_THOUSAND;
  }
  
  public void setGID(long l) { this.gid = ZipUtil.longToBig(l); }
  
  public void setUID(long l) { this.uid = ZipUtil.longToBig(l); }
  
  public String toString() { return "0x7875 Zip Extra Field: UID=" + this.uid + " GID=" + this.gid; }
}
