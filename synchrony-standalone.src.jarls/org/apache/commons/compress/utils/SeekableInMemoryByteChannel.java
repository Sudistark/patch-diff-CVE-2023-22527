package org.apache.commons.compress.utils;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.ClosedChannelException;
import java.nio.channels.SeekableByteChannel;
import java.util.Arrays;
import java.util.concurrent.atomic.AtomicBoolean;

public class SeekableInMemoryByteChannel implements SeekableByteChannel {
  private static final int NAIVE_RESIZE_LIMIT = 1073741823;
  
  private byte[] data;
  
  private final AtomicBoolean closed;
  
  private int position;
  
  private int size;
  
  public SeekableInMemoryByteChannel() { this(ByteUtils.EMPTY_BYTE_ARRAY); }
  
  public SeekableInMemoryByteChannel(byte[] data) {
    this.closed = new AtomicBoolean();
    this.data = data;
    this.size = data.length;
  }
  
  public SeekableInMemoryByteChannel(int size) { this(new byte[size]); }
  
  public byte[] array() { return this.data; }
  
  public void close() { this.closed.set(true); }
  
  private void ensureOpen() {
    if (!isOpen())
      throw new ClosedChannelException(); 
  }
  
  public boolean isOpen() { return !this.closed.get(); }
  
  public long position() { return this.position; }
  
  public SeekableByteChannel position(long newPosition) throws IOException {
    ensureOpen();
    if (newPosition < 0L || newPosition > 2147483647L)
      throw new IOException("Position has to be in range 0.. 2147483647"); 
    this.position = (int)newPosition;
    return this;
  }
  
  public int read(ByteBuffer buf) throws IOException {
    ensureOpen();
    int wanted = buf.remaining();
    int possible = this.size - this.position;
    if (possible <= 0)
      return -1; 
    if (wanted > possible)
      wanted = possible; 
    buf.put(this.data, this.position, wanted);
    this.position += wanted;
    return wanted;
  }
  
  private void resize(int newLength) {
    int len = this.data.length;
    if (len <= 0)
      len = 1; 
    if (newLength < 1073741823) {
      while (len < newLength)
        len <<= 1; 
    } else {
      len = newLength;
    } 
    this.data = Arrays.copyOf(this.data, len);
  }
  
  public long size() { return this.size; }
  
  public SeekableByteChannel truncate(long newSize) throws IOException {
    if (newSize < 0L || newSize > 2147483647L)
      throw new IllegalArgumentException("Size has to be in range 0.. 2147483647"); 
    if (this.size > newSize)
      this.size = (int)newSize; 
    if (this.position > newSize)
      this.position = (int)newSize; 
    return this;
  }
  
  public int write(ByteBuffer b) throws IOException {
    ensureOpen();
    int wanted = b.remaining();
    int possibleWithoutResize = this.size - this.position;
    if (wanted > possibleWithoutResize) {
      int newSize = this.position + wanted;
      if (newSize < 0) {
        resize(2147483647);
        wanted = Integer.MAX_VALUE - this.position;
      } else {
        resize(newSize);
      } 
    } 
    b.get(this.data, this.position, wanted);
    this.position += wanted;
    if (this.size < this.position)
      this.size = this.position; 
    return wanted;
  }
}
