package org.apache.commons.compress.utils;

import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Objects;
import java.util.zip.Checksum;

public class ChecksumCalculatingInputStream extends FilterInputStream {
  private final Checksum checksum;
  
  public ChecksumCalculatingInputStream(Checksum checksum, InputStream inputStream) {
    super((InputStream)Objects.requireNonNull(inputStream, "inputStream"));
    this.checksum = (Checksum)Objects.requireNonNull(checksum, "checksum");
  }
  
  public long getValue() { return this.checksum.getValue(); }
  
  public int read() throws IOException {
    int ret = this.in.read();
    if (ret >= 0)
      this.checksum.update(ret); 
    return ret;
  }
  
  public int read(byte[] b, int off, int len) throws IOException {
    if (len == 0)
      return 0; 
    int ret = this.in.read(b, off, len);
    if (ret >= 0)
      this.checksum.update(b, off, ret); 
    return ret;
  }
  
  public long skip(long n) throws IOException {
    if (read() >= 0)
      return 1L; 
    return 0L;
  }
}
