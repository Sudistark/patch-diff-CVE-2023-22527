package org.apache.commons.compress.harmony.unpack200.bytecode;

import java.io.DataOutputStream;
import java.io.IOException;
import java.util.Objects;
import org.apache.commons.compress.harmony.unpack200.SegmentUtils;

public class CPNameAndType extends ConstantPoolEntry {
  CPUTF8 descriptor;
  
  int descriptorIndex;
  
  CPUTF8 name;
  
  int nameIndex;
  
  private boolean hashCodeComputed;
  
  private int cachedHashCode;
  
  public CPNameAndType(CPUTF8 name, CPUTF8 descriptor, int globalIndex) {
    super((byte)12, globalIndex);
    this.name = (CPUTF8)Objects.requireNonNull(name, "name");
    this.descriptor = (CPUTF8)Objects.requireNonNull(descriptor, "descriptor");
  }
  
  public boolean equals(Object obj) {
    if (this == obj)
      return true; 
    if (obj == null)
      return false; 
    if (getClass() != obj.getClass())
      return false; 
    CPNameAndType other = (CPNameAndType)obj;
    if (!this.descriptor.equals(other.descriptor))
      return false; 
    if (!this.name.equals(other.name))
      return false; 
    return true;
  }
  
  private void generateHashCode() {
    this.hashCodeComputed = true;
    int PRIME = 31;
    int result = 1;
    result = 31 * result + this.descriptor.hashCode();
    result = 31 * result + this.name.hashCode();
    this.cachedHashCode = result;
  }
  
  protected ClassFileEntry[] getNestedClassFileEntries() { return new ClassFileEntry[] { this.name, this.descriptor }; }
  
  public int hashCode() {
    if (!this.hashCodeComputed)
      generateHashCode(); 
    return this.cachedHashCode;
  }
  
  public int invokeInterfaceCount() { return 1 + SegmentUtils.countInvokeInterfaceArgs(this.descriptor.underlyingString()); }
  
  protected void resolve(ClassConstantPool pool) {
    super.resolve(pool);
    this.descriptorIndex = pool.indexOf(this.descriptor);
    this.nameIndex = pool.indexOf(this.name);
  }
  
  public String toString() { return "NameAndType: " + this.name + "(" + this.descriptor + ")"; }
  
  protected void writeBody(DataOutputStream dos) throws IOException {
    dos.writeShort(this.nameIndex);
    dos.writeShort(this.descriptorIndex);
  }
}
