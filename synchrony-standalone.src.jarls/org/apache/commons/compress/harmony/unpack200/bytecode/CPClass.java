package org.apache.commons.compress.harmony.unpack200.bytecode;

import java.io.DataOutputStream;
import java.io.IOException;
import java.util.Objects;

public class CPClass extends ConstantPoolEntry {
  private int index;
  
  public String name;
  
  private final CPUTF8 utf8;
  
  private boolean hashCodeComputed;
  
  private int cachedHashCode;
  
  public CPClass(CPUTF8 name, int globalIndex) {
    super((byte)7, globalIndex);
    this.name = ((CPUTF8)Objects.requireNonNull(name, "name")).underlyingString();
    this.utf8 = name;
  }
  
  public boolean equals(Object obj) {
    if (this == obj)
      return true; 
    if (obj == null)
      return false; 
    if (getClass() != obj.getClass())
      return false; 
    CPClass other = (CPClass)obj;
    return this.utf8.equals(other.utf8);
  }
  
  private void generateHashCode() {
    this.hashCodeComputed = true;
    this.cachedHashCode = this.utf8.hashCode();
  }
  
  public String getName() { return this.name; }
  
  protected ClassFileEntry[] getNestedClassFileEntries() { return new ClassFileEntry[] { this.utf8 }; }
  
  public int hashCode() {
    if (!this.hashCodeComputed)
      generateHashCode(); 
    return this.cachedHashCode;
  }
  
  protected void resolve(ClassConstantPool pool) {
    super.resolve(pool);
    this.index = pool.indexOf(this.utf8);
  }
  
  public String toString() { return "Class: " + getName(); }
  
  protected void writeBody(DataOutputStream dos) throws IOException { dos.writeShort(this.index); }
}
