package org.apache.commons.compress.harmony.unpack200.bytecode;

import java.io.DataOutputStream;
import java.io.IOException;

public class EnclosingMethodAttribute extends Attribute {
  private static CPUTF8 attributeName;
  
  private int classIndex;
  
  private int methodIndex;
  
  private final CPClass cpClass;
  
  private final CPNameAndType method;
  
  public static void setAttributeName(CPUTF8 cpUTF8Value) { attributeName = cpUTF8Value; }
  
  public EnclosingMethodAttribute(CPClass cpClass, CPNameAndType method) {
    super(attributeName);
    this.cpClass = cpClass;
    this.method = method;
  }
  
  protected int getLength() { return 4; }
  
  protected ClassFileEntry[] getNestedClassFileEntries() {
    if (this.method != null)
      return new ClassFileEntry[] { attributeName, this.cpClass, this.method }; 
    return new ClassFileEntry[] { attributeName, this.cpClass };
  }
  
  protected void resolve(ClassConstantPool pool) {
    super.resolve(pool);
    this.cpClass.resolve(pool);
    this.classIndex = pool.indexOf(this.cpClass);
    if (this.method != null) {
      this.method.resolve(pool);
      this.methodIndex = pool.indexOf(this.method);
    } else {
      this.methodIndex = 0;
    } 
  }
  
  public String toString() { return "EnclosingMethod"; }
  
  protected void writeBody(DataOutputStream dos) throws IOException {
    dos.writeShort(this.classIndex);
    dos.writeShort(this.methodIndex);
  }
}
