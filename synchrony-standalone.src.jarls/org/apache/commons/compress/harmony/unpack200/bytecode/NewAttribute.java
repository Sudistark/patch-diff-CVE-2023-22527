package org.apache.commons.compress.harmony.unpack200.bytecode;

import java.io.DataOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class NewAttribute extends BCIRenumberedAttribute {
  private final List<Integer> lengths = new ArrayList();
  
  private final List<Object> body = new ArrayList();
  
  private ClassConstantPool pool;
  
  private final int layoutIndex;
  
  public NewAttribute(CPUTF8 attributeName, int layoutIndex) {
    super(attributeName);
    this.layoutIndex = layoutIndex;
  }
  
  public void addBCIndex(int length, int value) {
    this.lengths.add(Integer.valueOf(length));
    this.body.add(new BCIndex(value));
  }
  
  public void addBCLength(int length, int value) {
    this.lengths.add(Integer.valueOf(length));
    this.body.add(new BCLength(value));
  }
  
  public void addBCOffset(int length, int value) {
    this.lengths.add(Integer.valueOf(length));
    this.body.add(new BCOffset(value));
  }
  
  public void addInteger(int length, long value) {
    this.lengths.add(Integer.valueOf(length));
    this.body.add(Long.valueOf(value));
  }
  
  public void addToBody(int length, Object value) {
    this.lengths.add(Integer.valueOf(length));
    this.body.add(value);
  }
  
  public int getLayoutIndex() { return this.layoutIndex; }
  
  protected int getLength() {
    int length = 0;
    for (Integer len : this.lengths)
      length += len.intValue(); 
    return length;
  }
  
  protected ClassFileEntry[] getNestedClassFileEntries() {
    int total = 1;
    for (Object element : this.body) {
      if (element instanceof ClassFileEntry)
        total++; 
    } 
    ClassFileEntry[] nested = new ClassFileEntry[total];
    nested[0] = getAttributeName();
    int i = 1;
    for (Object element : this.body) {
      if (element instanceof ClassFileEntry) {
        nested[i] = (ClassFileEntry)element;
        i++;
      } 
    } 
    return nested;
  }
  
  protected int[] getStartPCs() { return null; }
  
  public void renumber(List<Integer> byteCodeOffsets) {
    if (!this.renumbered) {
      Object previous = null;
      for (Object obj : this.body) {
        if (obj instanceof BCIndex) {
          BCIndex bcIndex = (BCIndex)obj;
          bcIndex.setActualValue(((Integer)byteCodeOffsets.get(BCIndex.access$100(bcIndex))).intValue());
        } else if (obj instanceof BCOffset) {
          BCOffset bcOffset = (BCOffset)obj;
          if (previous instanceof BCIndex) {
            int index = BCIndex.access$100((BCIndex)previous) + BCOffset.access$200(bcOffset);
            bcOffset.setIndex(index);
            bcOffset.setActualValue(((Integer)byteCodeOffsets.get(index)).intValue());
          } else if (previous instanceof BCOffset) {
            int index = BCOffset.access$300((BCOffset)previous) + BCOffset.access$200(bcOffset);
            bcOffset.setIndex(index);
            bcOffset.setActualValue(((Integer)byteCodeOffsets.get(index)).intValue());
          } else {
            bcOffset.setActualValue(((Integer)byteCodeOffsets.get(BCOffset.access$200(bcOffset))).intValue());
          } 
        } else if (obj instanceof BCLength) {
          BCLength bcLength = (BCLength)obj;
          BCIndex prevIndex = (BCIndex)previous;
          int index = BCIndex.access$100(prevIndex) + BCLength.access$400(bcLength);
          int actualLength = ((Integer)byteCodeOffsets.get(index)).intValue() - prevIndex.actualValue;
          bcLength.setActualValue(actualLength);
        } 
        previous = obj;
      } 
      this.renumbered = true;
    } 
  }
  
  protected void resolve(ClassConstantPool pool) {
    super.resolve(pool);
    for (Object element : this.body) {
      if (element instanceof ClassFileEntry)
        ((ClassFileEntry)element).resolve(pool); 
    } 
    this.pool = pool;
  }
  
  public String toString() { return this.attributeName.underlyingString(); }
  
  protected void writeBody(DataOutputStream dos) throws IOException {
    for (int i = 0; i < this.lengths.size(); i++) {
      int length = ((Integer)this.lengths.get(i)).intValue();
      Object obj = this.body.get(i);
      long value = 0L;
      if (obj instanceof Long) {
        value = ((Long)obj).longValue();
      } else if (obj instanceof ClassFileEntry) {
        value = this.pool.indexOf((ClassFileEntry)obj);
      } else if (obj instanceof AbstractBcValue) {
        value = ((AbstractBcValue)obj).actualValue;
      } 
      switch (length) {
        case 1:
          dos.writeByte((int)value);
          break;
        case 2:
          dos.writeShort((int)value);
          break;
        case 4:
          dos.writeInt((int)value);
          break;
        case 8:
          dos.writeLong(value);
          break;
      } 
    } 
  }
}
