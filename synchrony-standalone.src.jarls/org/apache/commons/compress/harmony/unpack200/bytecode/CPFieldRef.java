package org.apache.commons.compress.harmony.unpack200.bytecode;

import java.io.DataOutputStream;
import java.io.IOException;
import java.util.Objects;

public class CPFieldRef extends ConstantPoolEntry {
  CPClass className;
  
  int classNameIndex;
  
  private final CPNameAndType nameAndType;
  
  int nameAndTypeIndex;
  
  private boolean hashCodeComputed;
  
  private int cachedHashCode;
  
  public CPFieldRef(CPClass className, CPNameAndType descriptor, int globalIndex) {
    super((byte)9, globalIndex);
    this.className = className;
    this.nameAndType = descriptor;
  }
  
  public boolean equals(Object obj) {
    if (this == obj)
      return true; 
    if (obj == null)
      return false; 
    if (getClass() != obj.getClass())
      return false; 
    CPFieldRef other = (CPFieldRef)obj;
    if (!Objects.equals(this.className, other.className))
      return false; 
    if (!Objects.equals(this.nameAndType, other.nameAndType))
      return false; 
    return true;
  }
  
  private void generateHashCode() {
    this.hashCodeComputed = true;
    int PRIME = 31;
    int result = 1;
    result = 31 * result + ((this.className == null) ? 0 : this.className.hashCode());
    result = 31 * result + ((this.nameAndType == null) ? 0 : this.nameAndType.hashCode());
    this.cachedHashCode = result;
  }
  
  protected ClassFileEntry[] getNestedClassFileEntries() { return new ClassFileEntry[] { this.className, this.nameAndType }; }
  
  public int hashCode() {
    if (!this.hashCodeComputed)
      generateHashCode(); 
    return this.cachedHashCode;
  }
  
  protected void resolve(ClassConstantPool pool) {
    super.resolve(pool);
    this.nameAndTypeIndex = pool.indexOf(this.nameAndType);
    this.classNameIndex = pool.indexOf(this.className);
  }
  
  public String toString() { return "FieldRef: " + this.className + "#" + this.nameAndType; }
  
  protected void writeBody(DataOutputStream dos) throws IOException {
    dos.writeShort(this.classNameIndex);
    dos.writeShort(this.nameAndTypeIndex);
  }
}
