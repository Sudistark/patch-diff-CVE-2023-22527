package org.apache.commons.compress.harmony.unpack200.bytecode;

import java.io.DataOutputStream;
import java.io.IOException;

public abstract class ClassFileEntry {
  protected static final ClassFileEntry[] NONE = new ClassFileEntry[0];
  
  private boolean resolved;
  
  protected abstract void doWrite(DataOutputStream paramDataOutputStream) throws IOException;
  
  public abstract boolean equals(Object paramObject);
  
  protected ClassFileEntry[] getNestedClassFileEntries() { return NONE; }
  
  public abstract int hashCode();
  
  protected int objectHashCode() { return super.hashCode(); }
  
  protected void resolve(ClassConstantPool pool) { this.resolved = true; }
  
  public abstract String toString();
  
  public final void write(DataOutputStream dos) throws IOException {
    if (!this.resolved)
      throw new IllegalStateException("Entry has not been resolved"); 
    doWrite(dos);
  }
}
