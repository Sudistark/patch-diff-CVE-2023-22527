package org.apache.commons.compress.harmony.unpack200;

import java.util.IdentityHashMap;
import java.util.List;

public class SegmentConstantPoolArrayCache {
  protected IdentityHashMap<String[], CachedArray> knownArrays = new IdentityHashMap(1000);
  
  protected List<Integer> lastIndexes;
  
  protected String[] lastArray;
  
  protected String lastKey;
  
  protected boolean arrayIsCached(String[] array) {
    CachedArray cachedArray = (CachedArray)this.knownArrays.get(array);
    return (cachedArray != null && cachedArray.lastKnownSize() == array.length);
  }
  
  protected void cacheArray(String[] array) {
    if (arrayIsCached(array))
      throw new IllegalArgumentException("Trying to cache an array that already exists"); 
    this.knownArrays.put(array, new CachedArray(this, array));
    this.lastArray = null;
  }
  
  public List<Integer> indexesForArrayKey(String[] array, String key) {
    if (!arrayIsCached(array))
      cacheArray(array); 
    if (this.lastArray == array && this.lastKey == key)
      return this.lastIndexes; 
    this.lastArray = array;
    this.lastKey = key;
    this.lastIndexes = ((CachedArray)this.knownArrays.get(array)).indexesForKey(key);
    return this.lastIndexes;
  }
}
