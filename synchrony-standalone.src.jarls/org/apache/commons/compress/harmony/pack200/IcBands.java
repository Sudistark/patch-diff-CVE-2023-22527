package org.apache.commons.compress.harmony.pack200;

import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

public class IcBands extends BandSet {
  private final Set<IcTuple> innerClasses = new TreeSet();
  
  private final CpBands cpBands;
  
  private int bit16Count = 0;
  
  private final Map<String, List<IcTuple>> outerToInner = new HashMap();
  
  public IcBands(SegmentHeader segmentHeader, CpBands cpBands, int effort) {
    super(effort, segmentHeader);
    this.cpBands = cpBands;
  }
  
  public void addInnerClass(String name, String outerName, String innerName, int flags) {
    if (outerName != null || innerName != null) {
      if (namesArePredictable(name, outerName, innerName)) {
        IcTuple innerClass = new IcTuple(this, this.cpBands.getCPClass(name), flags, null, null);
        addToMap(outerName, innerClass);
        this.innerClasses.add(innerClass);
      } else {
        flags |= 0x10000;
        IcTuple icTuple = new IcTuple(this, this.cpBands.getCPClass(name), flags, this.cpBands.getCPClass(outerName), this.cpBands.getCPUtf8(innerName));
        boolean added = this.innerClasses.add(icTuple);
        if (added) {
          this.bit16Count++;
          addToMap(outerName, icTuple);
        } 
      } 
    } else {
      IcTuple innerClass = new IcTuple(this, this.cpBands.getCPClass(name), flags, null, null);
      addToMap(getOuter(name), innerClass);
      this.innerClasses.add(innerClass);
    } 
  }
  
  private void addToMap(String outerName, IcTuple icTuple) {
    List<IcTuple> tuples = (List)this.outerToInner.get(outerName);
    if (tuples == null) {
      tuples = new ArrayList<IcTuple>();
      this.outerToInner.put(outerName, tuples);
      tuples.add(icTuple);
    } else {
      for (IcTuple tuple : tuples) {
        if (icTuple.equals(tuple))
          return; 
      } 
      tuples.add(icTuple);
    } 
  }
  
  public void finaliseBands() { this.segmentHeader.setIc_count(this.innerClasses.size()); }
  
  public IcTuple getIcTuple(CPClass inner) {
    for (IcTuple icTuple : this.innerClasses) {
      if (icTuple.C.equals(inner))
        return icTuple; 
    } 
    return null;
  }
  
  public List<IcTuple> getInnerClassesForOuter(String outerClassName) { return (List)this.outerToInner.get(outerClassName); }
  
  private String getOuter(String name) { return name.substring(0, name.lastIndexOf('$')); }
  
  private boolean namesArePredictable(String name, String outerName, String innerName) { return (name.equals(outerName + '$' + innerName) && innerName.indexOf('$') == -1); }
  
  public void pack(OutputStream outputStream) throws IOException, Pack200Exception {
    PackingUtils.log("Writing internal class bands...");
    int[] ic_this_class = new int[this.innerClasses.size()];
    int[] ic_flags = new int[this.innerClasses.size()];
    int[] ic_outer_class = new int[this.bit16Count];
    int[] ic_name = new int[this.bit16Count];
    int index2 = 0;
    List<IcTuple> innerClassesList = new ArrayList<IcTuple>(this.innerClasses);
    for (int i = 0; i < ic_this_class.length; i++) {
      IcTuple icTuple = (IcTuple)innerClassesList.get(i);
      ic_this_class[i] = icTuple.C.getIndex();
      ic_flags[i] = icTuple.F;
      if ((icTuple.F & 0x10000) != 0) {
        ic_outer_class[index2] = (icTuple.C2 == null) ? 0 : (icTuple.C2.getIndex() + 1);
        ic_name[index2] = (icTuple.N == null) ? 0 : (icTuple.N.getIndex() + 1);
        index2++;
      } 
    } 
    byte[] encodedBand = encodeBandInt("ic_this_class", ic_this_class, Codec.UDELTA5);
    outputStream.write(encodedBand);
    PackingUtils.log("Wrote " + encodedBand.length + " bytes from ic_this_class[" + ic_this_class.length + "]");
    encodedBand = encodeBandInt("ic_flags", ic_flags, Codec.UNSIGNED5);
    outputStream.write(encodedBand);
    PackingUtils.log("Wrote " + encodedBand.length + " bytes from ic_flags[" + ic_flags.length + "]");
    encodedBand = encodeBandInt("ic_outer_class", ic_outer_class, Codec.DELTA5);
    outputStream.write(encodedBand);
    PackingUtils.log("Wrote " + encodedBand.length + " bytes from ic_outer_class[" + ic_outer_class.length + "]");
    encodedBand = encodeBandInt("ic_name", ic_name, Codec.DELTA5);
    outputStream.write(encodedBand);
    PackingUtils.log("Wrote " + encodedBand.length + " bytes from ic_name[" + ic_name.length + "]");
  }
}
