package org.apache.commons.compress.harmony.pack200;

import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.stream.IntStream;

public abstract class BandSet {
  private static final int[] effortThresholds = { 0, 0, 1000, 500, 100, 100, 100, 100, 100, 0 };
  
  protected final SegmentHeader segmentHeader;
  
  final int effort;
  
  private long[] canonicalLargest;
  
  private long[] canonicalSmallest;
  
  public BandSet(int effort, SegmentHeader header) {
    this.effort = effort;
    this.segmentHeader = header;
  }
  
  private BandAnalysisResults analyseBand(String name, int[] band, BHSDCodec defaultCodec) throws Pack200Exception {
    BandAnalysisResults results = new BandAnalysisResults(this);
    if (this.canonicalLargest == null) {
      this.canonicalLargest = new long[116];
      this.canonicalSmallest = new long[116];
      for (int i = 1; i < this.canonicalLargest.length; i++) {
        this.canonicalLargest[i] = CodecEncoding.getCanonicalCodec(i).largest();
        this.canonicalSmallest[i] = CodecEncoding.getCanonicalCodec(i).smallest();
      } 
    } 
    BandData bandData = new BandData(this, band);
    byte[] encoded = defaultCodec.encode(band);
    BandAnalysisResults.access$002(results, encoded);
    if (encoded.length <= band.length + 23 - 2 * this.effort)
      return results; 
    if (!bandData.anyNegatives() && BandData.access$100(bandData) <= Codec.BYTE1.largest()) {
      BandAnalysisResults.access$002(results, Codec.BYTE1.encode(band));
      BandAnalysisResults.access$202(results, Codec.BYTE1);
      return results;
    } 
    if (this.effort > 3 && !name.equals("POPULATION")) {
      int numDistinctValues = bandData.numDistinctValues();
      float distinctValuesAsProportion = numDistinctValues / band.length;
      if (numDistinctValues < 100 || distinctValuesAsProportion < 0.02D || (this.effort > 6 && distinctValuesAsProportion < 0.04D)) {
        encodeWithPopulationCodec(name, band, defaultCodec, bandData, results);
        if (timeToStop(results))
          return results; 
      } 
    } 
    List<BHSDCodec[]> codecFamiliesToTry = new ArrayList<BHSDCodec[]>();
    if (bandData.mainlyPositiveDeltas() && bandData.mainlySmallDeltas())
      codecFamiliesToTry.add(CanonicalCodecFamilies.deltaUnsignedCodecs2); 
    if (bandData.wellCorrelated()) {
      if (bandData.mainlyPositiveDeltas()) {
        codecFamiliesToTry.add(CanonicalCodecFamilies.deltaUnsignedCodecs1);
        codecFamiliesToTry.add(CanonicalCodecFamilies.deltaUnsignedCodecs3);
        codecFamiliesToTry.add(CanonicalCodecFamilies.deltaUnsignedCodecs4);
        codecFamiliesToTry.add(CanonicalCodecFamilies.deltaUnsignedCodecs5);
        codecFamiliesToTry.add(CanonicalCodecFamilies.nonDeltaUnsignedCodecs1);
        codecFamiliesToTry.add(CanonicalCodecFamilies.nonDeltaUnsignedCodecs3);
        codecFamiliesToTry.add(CanonicalCodecFamilies.nonDeltaUnsignedCodecs4);
        codecFamiliesToTry.add(CanonicalCodecFamilies.nonDeltaUnsignedCodecs5);
        codecFamiliesToTry.add(CanonicalCodecFamilies.nonDeltaUnsignedCodecs2);
      } else {
        codecFamiliesToTry.add(CanonicalCodecFamilies.deltaSignedCodecs1);
        codecFamiliesToTry.add(CanonicalCodecFamilies.deltaSignedCodecs3);
        codecFamiliesToTry.add(CanonicalCodecFamilies.deltaSignedCodecs2);
        codecFamiliesToTry.add(CanonicalCodecFamilies.deltaSignedCodecs4);
        codecFamiliesToTry.add(CanonicalCodecFamilies.deltaSignedCodecs5);
        codecFamiliesToTry.add(CanonicalCodecFamilies.nonDeltaSignedCodecs1);
        codecFamiliesToTry.add(CanonicalCodecFamilies.nonDeltaSignedCodecs2);
      } 
    } else if (bandData.anyNegatives()) {
      codecFamiliesToTry.add(CanonicalCodecFamilies.nonDeltaSignedCodecs1);
      codecFamiliesToTry.add(CanonicalCodecFamilies.nonDeltaSignedCodecs2);
      codecFamiliesToTry.add(CanonicalCodecFamilies.deltaSignedCodecs1);
      codecFamiliesToTry.add(CanonicalCodecFamilies.deltaSignedCodecs2);
      codecFamiliesToTry.add(CanonicalCodecFamilies.deltaSignedCodecs3);
      codecFamiliesToTry.add(CanonicalCodecFamilies.deltaSignedCodecs4);
      codecFamiliesToTry.add(CanonicalCodecFamilies.deltaSignedCodecs5);
    } else {
      codecFamiliesToTry.add(CanonicalCodecFamilies.nonDeltaUnsignedCodecs1);
      codecFamiliesToTry.add(CanonicalCodecFamilies.nonDeltaUnsignedCodecs3);
      codecFamiliesToTry.add(CanonicalCodecFamilies.nonDeltaUnsignedCodecs4);
      codecFamiliesToTry.add(CanonicalCodecFamilies.nonDeltaUnsignedCodecs5);
      codecFamiliesToTry.add(CanonicalCodecFamilies.nonDeltaUnsignedCodecs2);
      codecFamiliesToTry.add(CanonicalCodecFamilies.deltaUnsignedCodecs1);
      codecFamiliesToTry.add(CanonicalCodecFamilies.deltaUnsignedCodecs3);
      codecFamiliesToTry.add(CanonicalCodecFamilies.deltaUnsignedCodecs4);
      codecFamiliesToTry.add(CanonicalCodecFamilies.deltaUnsignedCodecs5);
    } 
    if (name.equalsIgnoreCase("cpint"))
      System.out.print(""); 
    for (BHSDCodec[] family : codecFamiliesToTry) {
      tryCodecs(name, band, defaultCodec, bandData, results, encoded, family);
      if (timeToStop(results))
        break; 
    } 
    return results;
  }
  
  protected int[] cpEntryListToArray(List<? extends ConstantPoolEntry> list) {
    int[] array = new int[list.size()];
    for (int i = 0; i < array.length; i++) {
      array[i] = ((ConstantPoolEntry)list.get(i)).getIndex();
      if (array[i] < 0)
        throw new IllegalArgumentException("Index should be > 0"); 
    } 
    return array;
  }
  
  protected int[] cpEntryOrNullListToArray(List<? extends ConstantPoolEntry> list) {
    int[] array = new int[list.size()];
    for (int j = 0; j < array.length; j++) {
      ConstantPoolEntry cpEntry = (ConstantPoolEntry)list.get(j);
      array[j] = (cpEntry == null) ? 0 : (cpEntry.getIndex() + 1);
      if (cpEntry != null && cpEntry.getIndex() < 0)
        throw new IllegalArgumentException("Index should be > 0"); 
    } 
    return array;
  }
  
  public byte[] encodeBandInt(String name, int[] ints, BHSDCodec defaultCodec) throws Pack200Exception {
    byte[] encodedBand = null;
    if (this.effort > 1 && ints.length >= effortThresholds[this.effort]) {
      BandAnalysisResults results = analyseBand(name, ints, defaultCodec);
      Codec betterCodec = BandAnalysisResults.access$200(results);
      encodedBand = BandAnalysisResults.access$000(results);
      if (betterCodec != null) {
        if (betterCodec instanceof BHSDCodec) {
          int[] specifierBand = CodecEncoding.getSpecifier(betterCodec, defaultCodec);
          int specifier = specifierBand[0];
          if (specifierBand.length > 1)
            for (int i = 1; i < specifierBand.length; i++)
              this.segmentHeader.appendBandCodingSpecifier(specifierBand[i]);  
          if (defaultCodec.isSigned()) {
            specifier = -1 - specifier;
          } else {
            specifier += defaultCodec.getL();
          } 
          byte[] specifierEncoded = defaultCodec.encode(new int[] { specifier });
          byte[] band = new byte[specifierEncoded.length + encodedBand.length];
          System.arraycopy(specifierEncoded, 0, band, 0, specifierEncoded.length);
          System.arraycopy(encodedBand, 0, band, specifierEncoded.length, encodedBand.length);
          return band;
        } 
        if (betterCodec instanceof PopulationCodec) {
          Objects.requireNonNull(this.segmentHeader);
          IntStream.of(BandAnalysisResults.access$300(results)).forEach(this.segmentHeader::appendBandCodingSpecifier);
          return encodedBand;
        } 
        if (betterCodec instanceof RunCodec);
      } 
    } 
    if (ints.length > 0) {
      if (encodedBand == null)
        encodedBand = defaultCodec.encode(ints); 
      int first = ints[0];
      if (defaultCodec.getB() != 1) {
        if (defaultCodec.isSigned() && first >= -256 && first <= -1) {
          int specifier = -1 - CodecEncoding.getSpecifierForDefaultCodec(defaultCodec);
          byte[] specifierEncoded = defaultCodec.encode(new int[] { specifier });
          byte[] band = new byte[specifierEncoded.length + encodedBand.length];
          System.arraycopy(specifierEncoded, 0, band, 0, specifierEncoded.length);
          System.arraycopy(encodedBand, 0, band, specifierEncoded.length, encodedBand.length);
          return band;
        } 
        if (!defaultCodec.isSigned() && first >= defaultCodec.getL() && first <= defaultCodec.getL() + 255) {
          int specifier = CodecEncoding.getSpecifierForDefaultCodec(defaultCodec) + defaultCodec.getL();
          byte[] specifierEncoded = defaultCodec.encode(new int[] { specifier });
          byte[] band = new byte[specifierEncoded.length + encodedBand.length];
          System.arraycopy(specifierEncoded, 0, band, 0, specifierEncoded.length);
          System.arraycopy(encodedBand, 0, band, specifierEncoded.length, encodedBand.length);
          return band;
        } 
      } 
      return encodedBand;
    } 
    return new byte[0];
  }
  
  protected byte[] encodeFlags(String name, long[] flags, BHSDCodec loCodec, BHSDCodec hiCodec, boolean haveHiFlags) throws Pack200Exception {
    if (!haveHiFlags) {
      int[] loBits = new int[flags.length];
      Arrays.setAll(loBits, i -> (int)flags[i]);
      return encodeBandInt(name, loBits, loCodec);
    } 
    int[] hiBits = new int[flags.length];
    int[] loBits = new int[flags.length];
    for (int i = 0; i < flags.length; i++) {
      long l = flags[i];
      hiBits[i] = (int)(l >> 32);
      loBits[i] = (int)l;
    } 
    byte[] hi = encodeBandInt(name, hiBits, hiCodec);
    byte[] lo = encodeBandInt(name, loBits, loCodec);
    byte[] total = new byte[hi.length + lo.length];
    System.arraycopy(hi, 0, total, 0, hi.length);
    System.arraycopy(lo, 0, total, hi.length + 1, lo.length);
    return total;
  }
  
  protected byte[] encodeFlags(String name, long[][] flags, BHSDCodec loCodec, BHSDCodec hiCodec, boolean haveHiFlags) throws Pack200Exception { return encodeFlags(name, flatten(flags), loCodec, hiCodec, haveHiFlags); }
  
  public byte[] encodeScalar(int value, BHSDCodec codec) throws Pack200Exception { return codec.encode(value); }
  
  public byte[] encodeScalar(int[] band, BHSDCodec codec) throws Pack200Exception { return codec.encode(band); }
  
  private void encodeWithPopulationCodec(String name, int[] band, BHSDCodec defaultCodec, BandData bandData, BandAnalysisResults results) throws Pack200Exception {
    byte[] tokensEncoded;
    BandAnalysisResults.access$412(results, 3);
    Map<Integer, Integer> distinctValues = BandData.access$500(bandData);
    List<Integer> favored = new ArrayList<Integer>();
    distinctValues.forEach((k, v) -> {
          if (v.intValue() > 2 || distinctValues.size() < 256)
            favored.add(k); 
        });
    if (distinctValues.size() > 255)
      favored.sort((arg0, arg1) -> ((Integer)distinctValues.get(arg1)).compareTo((Integer)distinctValues.get(arg0))); 
    Map<Integer, Integer> favoredToIndex = new HashMap<Integer, Integer>();
    for (int i = 0; i < favored.size(); i++)
      favoredToIndex.put((Integer)favored.get(i), Integer.valueOf(i)); 
    IntList unfavoured = new IntList();
    int[] tokens = new int[band.length];
    for (int i = 0; i < band.length; i++) {
      Integer favouredIndex = (Integer)favoredToIndex.get(Integer.valueOf(band[i]));
      if (favouredIndex == null) {
        tokens[i] = 0;
        unfavoured.add(band[i]);
      } else {
        tokens[i] = favouredIndex.intValue() + 1;
      } 
    } 
    favored.add((Integer)favored.get(favored.size() - 1));
    int[] favouredBand = integerListToArray(favored);
    int[] unfavouredBand = unfavoured.toArray();
    BandAnalysisResults favouredResults = analyseBand("POPULATION", favouredBand, defaultCodec);
    BandAnalysisResults unfavouredResults = analyseBand("POPULATION", unfavouredBand, defaultCodec);
    int tdefL = 0;
    int l = 0;
    BHSDCodec bHSDCodec = null;
    int k = favored.size() - 1;
    if (k < 256) {
      tdefL = 1;
      tokensEncoded = Codec.BYTE1.encode(tokens);
    } else {
      BandAnalysisResults tokenResults = analyseBand("POPULATION", tokens, defaultCodec);
      bHSDCodec = BandAnalysisResults.access$200(tokenResults);
      tokensEncoded = BandAnalysisResults.access$000(tokenResults);
      if (bHSDCodec == null)
        bHSDCodec = defaultCodec; 
      l = ((BHSDCodec)bHSDCodec).getL();
      int h = ((BHSDCodec)bHSDCodec).getH();
      int s = ((BHSDCodec)bHSDCodec).getS();
      int b = ((BHSDCodec)bHSDCodec).getB();
      int d = ((BHSDCodec)bHSDCodec).isDelta() ? 1 : 0;
      if (s == 0 && d == 0) {
        boolean canUseTDefL = true;
        if (b > 1) {
          BHSDCodec oneLowerB = new BHSDCodec(b - 1, h);
          if (oneLowerB.largest() >= k)
            canUseTDefL = false; 
        } 
        if (canUseTDefL)
          switch (l) {
            case 4:
              tdefL = 1;
              break;
            case 8:
              tdefL = 2;
              break;
            case 16:
              tdefL = 3;
              break;
            case 32:
              tdefL = 4;
              break;
            case 64:
              tdefL = 5;
              break;
            case 128:
              tdefL = 6;
              break;
            case 192:
              tdefL = 7;
              break;
            case 224:
              tdefL = 8;
              break;
            case 240:
              tdefL = 9;
              break;
            case 248:
              tdefL = 10;
              break;
            case 252:
              tdefL = 11;
              break;
          }  
      } 
    } 
    byte[] favouredEncoded = BandAnalysisResults.access$000(favouredResults);
    byte[] unfavouredEncoded = BandAnalysisResults.access$000(unfavouredResults);
    Codec favouredCodec = BandAnalysisResults.access$200(favouredResults);
    Codec unfavouredCodec = BandAnalysisResults.access$200(unfavouredResults);
    int specifier = '' + ((favouredCodec == null) ? '\001' : Character.MIN_VALUE) + 4 * tdefL + ((unfavouredCodec == null) ? 2 : 0);
    IntList extraBandMetadata = new IntList(3);
    if (favouredCodec != null) {
      Objects.requireNonNull(extraBandMetadata);
      IntStream.of(CodecEncoding.getSpecifier(favouredCodec, null)).forEach(extraBandMetadata::add);
    } 
    if (tdefL == 0) {
      Objects.requireNonNull(extraBandMetadata);
      IntStream.of(CodecEncoding.getSpecifier(bHSDCodec, null)).forEach(extraBandMetadata::add);
    } 
    if (unfavouredCodec != null) {
      Objects.requireNonNull(extraBandMetadata);
      IntStream.of(CodecEncoding.getSpecifier(unfavouredCodec, null)).forEach(extraBandMetadata::add);
    } 
    int[] extraMetadata = extraBandMetadata.toArray();
    byte[] extraMetadataEncoded = Codec.UNSIGNED5.encode(extraMetadata);
    if (defaultCodec.isSigned()) {
      specifier = -1 - specifier;
    } else {
      specifier += defaultCodec.getL();
    } 
    byte[] firstValueEncoded = defaultCodec.encode(new int[] { specifier });
    int totalBandLength = firstValueEncoded.length + favouredEncoded.length + tokensEncoded.length + unfavouredEncoded.length;
    if (totalBandLength + extraMetadataEncoded.length < BandAnalysisResults.access$000(results).length) {
      BandAnalysisResults.access$612(results, BandAnalysisResults.access$000(results).length - totalBandLength + extraMetadataEncoded.length);
      byte[] encodedBand = new byte[totalBandLength];
      System.arraycopy(firstValueEncoded, 0, encodedBand, 0, firstValueEncoded.length);
      System.arraycopy(favouredEncoded, 0, encodedBand, firstValueEncoded.length, favouredEncoded.length);
      System.arraycopy(tokensEncoded, 0, encodedBand, firstValueEncoded.length + favouredEncoded.length, tokensEncoded.length);
      System.arraycopy(unfavouredEncoded, 0, encodedBand, firstValueEncoded.length + favouredEncoded.length + tokensEncoded.length, unfavouredEncoded.length);
      BandAnalysisResults.access$002(results, encodedBand);
      BandAnalysisResults.access$302(results, extraMetadata);
      if (l != 0) {
        BandAnalysisResults.access$202(results, new PopulationCodec(favouredCodec, l, unfavouredCodec));
      } else {
        BandAnalysisResults.access$202(results, new PopulationCodec(favouredCodec, bHSDCodec, unfavouredCodec));
      } 
    } 
  }
  
  private long[] flatten(long[][] flags) {
    int totalSize = 0;
    for (long[] flag : flags)
      totalSize += flag.length; 
    long[] flatArray = new long[totalSize];
    int index = 0;
    for (long[] flag : flags) {
      for (long element : flag) {
        flatArray[index] = element;
        index++;
      } 
    } 
    return flatArray;
  }
  
  protected int[] integerListToArray(List<Integer> integerList) { return integerList.stream().mapToInt(Integer::intValue).toArray(); }
  
  protected long[] longListToArray(List<Long> longList) { return longList.stream().mapToLong(Long::longValue).toArray(); }
  
  private boolean timeToStop(BandAnalysisResults results) {
    if (this.effort > 6)
      return (BandAnalysisResults.access$400(results) >= this.effort * 2); 
    return (BandAnalysisResults.access$400(results) >= this.effort);
  }
  
  private void tryCodecs(String name, int[] band, BHSDCodec defaultCodec, BandData bandData, BandAnalysisResults results, byte[] encoded, BHSDCodec[] potentialCodecs) throws Pack200Exception {
    for (BHSDCodec potential : potentialCodecs) {
      if (potential.equals(defaultCodec))
        return; 
      if (potential.isDelta()) {
        if (potential.largest() >= BandData.access$700(bandData) && potential.smallest() <= BandData.access$800(bandData) && potential
          .largest() >= BandData.access$100(bandData) && potential.smallest() <= BandData.access$900(bandData)) {
          byte[] encoded2 = potential.encode(band);
          BandAnalysisResults.access$408(results);
          byte[] specifierEncoded = defaultCodec.encode(CodecEncoding.getSpecifier(potential, null));
          int saved = encoded.length - encoded2.length - specifierEncoded.length;
          if (saved > BandAnalysisResults.access$600(results)) {
            BandAnalysisResults.access$202(results, potential);
            BandAnalysisResults.access$002(results, encoded2);
            BandAnalysisResults.access$602(results, saved);
          } 
        } 
      } else if (potential.largest() >= BandData.access$100(bandData) && potential.smallest() <= BandData.access$900(bandData)) {
        byte[] encoded2 = potential.encode(band);
        BandAnalysisResults.access$408(results);
        byte[] specifierEncoded = defaultCodec.encode(CodecEncoding.getSpecifier(potential, null));
        int saved = encoded.length - encoded2.length - specifierEncoded.length;
        if (saved > BandAnalysisResults.access$600(results)) {
          BandAnalysisResults.access$202(results, potential);
          BandAnalysisResults.access$002(results, encoded2);
          BandAnalysisResults.access$602(results, saved);
        } 
      } 
      if (timeToStop(results))
        return; 
    } 
  }
  
  public abstract void pack(OutputStream paramOutputStream) throws IOException, Pack200Exception;
}
