package org.apache.commons.compress.compressors.zstandard;

import org.apache.commons.compress.utils.OsgiUtils;

public class ZstdUtils {
  private static final byte[] ZSTANDARD_FRAME_MAGIC = { 40, -75, 47, -3 };
  
  private static final byte[] SKIPPABLE_FRAME_MAGIC = { 42, 77, 24 };
  
  static  {
    setCacheZstdAvailablity(!OsgiUtils.isRunningInOsgiEnvironment());
  }
  
  static CachedAvailability getCachedZstdAvailability() { return cachedZstdAvailability; }
  
  private static boolean internalIsZstdCompressionAvailable() {
    try {
      Class.forName("com.github.luben.zstd.ZstdInputStream");
      return true;
    } catch (NoClassDefFoundError|Exception error) {
      return false;
    } 
  }
  
  public static boolean isZstdCompressionAvailable() {
    cachedResult = cachedZstdAvailability;
    if (cachedResult != CachedAvailability.DONT_CACHE)
      return (cachedResult == CachedAvailability.CACHED_AVAILABLE); 
    return internalIsZstdCompressionAvailable();
  }
  
  public static boolean matches(byte[] signature, int length) {
    if (length < ZSTANDARD_FRAME_MAGIC.length)
      return false; 
    boolean isZstandard = true;
    for (int i = 0; i < ZSTANDARD_FRAME_MAGIC.length; i++) {
      if (signature[i] != ZSTANDARD_FRAME_MAGIC[i]) {
        isZstandard = false;
        break;
      } 
    } 
    if (isZstandard)
      return true; 
    if (80 == (signature[0] & 0xF0)) {
      for (int i = 0; i < SKIPPABLE_FRAME_MAGIC.length; i++) {
        if (signature[i + 1] != SKIPPABLE_FRAME_MAGIC[i])
          return false; 
      } 
      return true;
    } 
    return false;
  }
  
  public static void setCacheZstdAvailablity(boolean doCache) {
    if (!doCache) {
      cachedZstdAvailability = CachedAvailability.DONT_CACHE;
    } else if (cachedZstdAvailability == CachedAvailability.DONT_CACHE) {
      boolean hasZstd = internalIsZstdCompressionAvailable();
      cachedZstdAvailability = hasZstd ? CachedAvailability.CACHED_AVAILABLE : CachedAvailability.CACHED_UNAVAILABLE;
    } 
  }
}
