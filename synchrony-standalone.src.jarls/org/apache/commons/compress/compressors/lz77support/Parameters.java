package org.apache.commons.compress.compressors.lz77support;

public final class Parameters {
  public static final int TRUE_MIN_BACK_REFERENCE_LENGTH = 3;
  
  private final int windowSize;
  
  private final int minBackReferenceLength;
  
  private final int maxBackReferenceLength;
  
  private final int maxOffset;
  
  private final int maxLiteralLength;
  
  private final int niceBackReferenceLength;
  
  private final int maxCandidates;
  
  private final int lazyThreshold;
  
  private final boolean lazyMatching;
  
  public static Builder builder(int windowSize) { return new Builder(windowSize, null); }
  
  private static boolean isPowerOfTwo(int x) { return ((x & x - 1) == 0); }
  
  private Parameters(int windowSize, int minBackReferenceLength, int maxBackReferenceLength, int maxOffset, int maxLiteralLength, int niceBackReferenceLength, int maxCandidates, boolean lazyMatching, int lazyThreshold) {
    this.windowSize = windowSize;
    this.minBackReferenceLength = minBackReferenceLength;
    this.maxBackReferenceLength = maxBackReferenceLength;
    this.maxOffset = maxOffset;
    this.maxLiteralLength = maxLiteralLength;
    this.niceBackReferenceLength = niceBackReferenceLength;
    this.maxCandidates = maxCandidates;
    this.lazyMatching = lazyMatching;
    this.lazyThreshold = lazyThreshold;
  }
  
  public boolean getLazyMatching() { return this.lazyMatching; }
  
  public int getLazyMatchingThreshold() { return this.lazyThreshold; }
  
  public int getMaxBackReferenceLength() { return this.maxBackReferenceLength; }
  
  public int getMaxCandidates() { return this.maxCandidates; }
  
  public int getMaxLiteralLength() { return this.maxLiteralLength; }
  
  public int getMaxOffset() { return this.maxOffset; }
  
  public int getMinBackReferenceLength() { return this.minBackReferenceLength; }
  
  public int getNiceBackReferenceLength() { return this.niceBackReferenceLength; }
  
  public int getWindowSize() { return this.windowSize; }
}
