package org.apache.commons.compress.compressors.snappy;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import org.apache.commons.compress.compressors.CompressorOutputStream;
import org.apache.commons.compress.compressors.lz77support.Parameters;
import org.apache.commons.compress.utils.ByteUtils;

public class FramedSnappyCompressorOutputStream extends CompressorOutputStream {
  private static final int MAX_COMPRESSED_BUFFER_SIZE = 65536;
  
  private final OutputStream out;
  
  private final Parameters params;
  
  private final PureJavaCrc32C checksum;
  
  private final byte[] oneByte;
  
  private final byte[] buffer;
  
  private int currentIndex;
  
  private final ByteUtils.ByteConsumer consumer;
  
  static long mask(long x) {
    x = x >> 15 | x << 17;
    x += 2726488792L;
    return 4294967295L;
  }
  
  public FramedSnappyCompressorOutputStream(OutputStream out) throws IOException {
    this(out, SnappyCompressorOutputStream.createParameterBuilder(32768)
        .build());
  }
  
  public FramedSnappyCompressorOutputStream(OutputStream out, Parameters params) throws IOException {
    this.checksum = new PureJavaCrc32C();
    this.oneByte = new byte[1];
    this.buffer = new byte[65536];
    this.out = out;
    this.params = params;
    this.consumer = new ByteUtils.OutputStreamByteConsumer(out);
    out.write(FramedSnappyCompressorInputStream.SZ_SIGNATURE);
  }
  
  public void close() throws IOException {
    try {
      finish();
    } finally {
      this.out.close();
    } 
  }
  
  public void finish() throws IOException {
    if (this.currentIndex > 0)
      flushBuffer(); 
  }
  
  private void flushBuffer() throws IOException {
    this.out.write(0);
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    SnappyCompressorOutputStream snappyCompressorOutputStream = new SnappyCompressorOutputStream(baos, this.currentIndex, this.params);
    try {
      snappyCompressorOutputStream.write(this.buffer, 0, this.currentIndex);
      snappyCompressorOutputStream.close();
    } catch (Throwable throwable) {
      try {
        snappyCompressorOutputStream.close();
      } catch (Throwable throwable1) {
        throwable.addSuppressed(throwable1);
      } 
      throw throwable;
    } 
    byte[] b = baos.toByteArray();
    writeLittleEndian(3, b.length + 4L);
    writeCrc();
    this.out.write(b);
    this.currentIndex = 0;
  }
  
  public void write(byte[] data, int off, int len) throws IOException {
    if (this.currentIndex + len > 65536) {
      flushBuffer();
      while (len > 65536) {
        System.arraycopy(data, off, this.buffer, 0, 65536);
        off += 65536;
        len -= 65536;
        this.currentIndex = 65536;
        flushBuffer();
      } 
    } 
    System.arraycopy(data, off, this.buffer, this.currentIndex, len);
    this.currentIndex += len;
  }
  
  public void write(int b) throws IOException {
    this.oneByte[0] = (byte)(b & 0xFF);
    write(this.oneByte);
  }
  
  private void writeCrc() throws IOException {
    this.checksum.update(this.buffer, 0, this.currentIndex);
    writeLittleEndian(4, mask(this.checksum.getValue()));
    this.checksum.reset();
  }
  
  private void writeLittleEndian(int numBytes, long num) throws IOException { ByteUtils.toLittleEndian(this.consumer, num, numBytes); }
}
