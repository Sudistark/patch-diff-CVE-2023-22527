package org.apache.commons.compress.compressors.brotli;

import org.apache.commons.compress.utils.OsgiUtils;

public class BrotliUtils {
  static  {
    setCacheBrotliAvailablity(!OsgiUtils.isRunningInOsgiEnvironment());
  }
  
  static CachedAvailability getCachedBrotliAvailability() { return cachedBrotliAvailability; }
  
  private static boolean internalIsBrotliCompressionAvailable() {
    try {
      Class.forName("org.brotli.dec.BrotliInputStream");
      return true;
    } catch (NoClassDefFoundError|Exception error) {
      return false;
    } 
  }
  
  public static boolean isBrotliCompressionAvailable() {
    cachedResult = cachedBrotliAvailability;
    if (cachedResult != CachedAvailability.DONT_CACHE)
      return (cachedResult == CachedAvailability.CACHED_AVAILABLE); 
    return internalIsBrotliCompressionAvailable();
  }
  
  public static void setCacheBrotliAvailablity(boolean doCache) {
    if (!doCache) {
      cachedBrotliAvailability = CachedAvailability.DONT_CACHE;
    } else if (cachedBrotliAvailability == CachedAvailability.DONT_CACHE) {
      boolean hasBrotli = internalIsBrotliCompressionAvailable();
      cachedBrotliAvailability = hasBrotli ? CachedAvailability.CACHED_AVAILABLE : CachedAvailability.CACHED_UNAVAILABLE;
    } 
  }
}
