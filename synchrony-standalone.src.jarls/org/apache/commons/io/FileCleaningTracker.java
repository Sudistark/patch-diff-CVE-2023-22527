package org.apache.commons.io;

import java.io.File;
import java.lang.ref.ReferenceQueue;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Objects;

public class FileCleaningTracker {
  ReferenceQueue<Object> q = new ReferenceQueue();
  
  final Collection<Tracker> trackers = Collections.synchronizedSet(new HashSet());
  
  final List<String> deleteFailures = Collections.synchronizedList(new ArrayList());
  
  Thread reaper;
  
  private void addTracker(String path, Object marker, FileDeleteStrategy deleteStrategy) {
    if (this.exitWhenFinished)
      throw new IllegalStateException("No new trackers can be added once exitWhenFinished() is called"); 
    if (this.reaper == null) {
      this.reaper = new Reaper(this);
      this.reaper.start();
    } 
    this.trackers.add(new Tracker(path, deleteStrategy, marker, this.q));
  }
  
  public void exitWhenFinished() {
    this.exitWhenFinished = true;
    if (this.reaper != null)
      synchronized (this.reaper) {
        this.reaper.interrupt();
      }  
  }
  
  public List<String> getDeleteFailures() { return this.deleteFailures; }
  
  public int getTrackCount() { return this.trackers.size(); }
  
  public void track(File file, Object marker) { track(file, marker, null); }
  
  public void track(File file, Object marker, FileDeleteStrategy deleteStrategy) {
    Objects.requireNonNull(file, "file");
    addTracker(file.getPath(), marker, deleteStrategy);
  }
  
  public void track(Path file, Object marker) { track(file, marker, null); }
  
  public void track(Path file, Object marker, FileDeleteStrategy deleteStrategy) {
    Objects.requireNonNull(file, "file");
    addTracker(file.toAbsolutePath().toString(), marker, deleteStrategy);
  }
  
  public void track(String path, Object marker) { track(path, marker, null); }
  
  public void track(String path, Object marker, FileDeleteStrategy deleteStrategy) {
    Objects.requireNonNull(path, "path");
    addTracker(path, marker, deleteStrategy);
  }
}
