package org.apache.commons.io.input;

import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.UncheckedIOException;
import org.apache.commons.io.function.Uncheck;

public final class UncheckedFilterInputStream extends FilterInputStream {
  public static Builder builder() { return new Builder(); }
  
  private UncheckedFilterInputStream(InputStream inputStream) { super(inputStream); }
  
  public int available() throws UncheckedIOException { return ((Integer)Uncheck.get(() -> Integer.valueOf(super.available()))).intValue(); }
  
  public void close() throws UncheckedIOException { Uncheck.run(() -> super.close()); }
  
  public int read() throws UncheckedIOException { return ((Integer)Uncheck.get(() -> Integer.valueOf(super.read()))).intValue(); }
  
  public int read(byte[] b) throws UncheckedIOException { return ((Integer)Uncheck.apply(x$0 -> Integer.valueOf(super.read(x$0)), b)).intValue(); }
  
  public int read(byte[] b, int off, int len) throws UncheckedIOException { return ((Integer)Uncheck.apply((x$0, x$1, x$2) -> Integer.valueOf(super.read(x$0, x$1, x$2)), b, Integer.valueOf(off), Integer.valueOf(len))).intValue(); }
  
  public void reset() throws UncheckedIOException { Uncheck.run(() -> super.reset()); }
  
  public long skip(long n) throws UncheckedIOException { return ((Long)Uncheck.apply(x$0 -> Long.valueOf(super.skip(x$0)), Long.valueOf(n))).longValue(); }
}
