package org.apache.commons.io.input;

import java.io.InputStream;
import java.time.Duration;
import java.util.Objects;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;
import org.apache.commons.io.output.QueueOutputStream;

public class QueueInputStream extends InputStream {
  private final BlockingQueue<Integer> blockingQueue;
  
  private final long timeoutNanos;
  
  public static Builder builder() { return new Builder(); }
  
  public QueueInputStream() { this(new LinkedBlockingQueue()); }
  
  @Deprecated
  public QueueInputStream(BlockingQueue<Integer> blockingQueue) { this(blockingQueue, Duration.ZERO); }
  
  private QueueInputStream(BlockingQueue<Integer> blockingQueue, Duration timeout) {
    this.blockingQueue = (BlockingQueue)Objects.requireNonNull(blockingQueue, "blockingQueue");
    this.timeoutNanos = ((Duration)Objects.requireNonNull(timeout, "timeout")).toNanos();
  }
  
  BlockingQueue<Integer> getBlockingQueue() { return this.blockingQueue; }
  
  Duration getTimeout() { return Duration.ofNanos(this.timeoutNanos); }
  
  public QueueOutputStream newQueueOutputStream() { return new QueueOutputStream(this.blockingQueue); }
  
  public int read() {
    try {
      Integer value = (Integer)this.blockingQueue.poll(this.timeoutNanos, TimeUnit.NANOSECONDS);
      return (value == null) ? -1 : (0xFF & value.intValue());
    } catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new IllegalStateException(e);
    } 
  }
}
