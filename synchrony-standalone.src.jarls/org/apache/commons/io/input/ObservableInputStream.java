package org.apache.commons.io.input;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.apache.commons.io.IOUtils;
import org.apache.commons.io.function.IOConsumer;

public class ObservableInputStream extends ProxyInputStream {
  private final List<Observer> observers;
  
  public ObservableInputStream(InputStream inputStream) { this(inputStream, new ArrayList()); }
  
  private ObservableInputStream(InputStream inputStream, List<Observer> observers) {
    super(inputStream);
    this.observers = observers;
  }
  
  public ObservableInputStream(InputStream inputStream, Observer... observers) { this(inputStream, Arrays.asList(observers)); }
  
  public void add(Observer observer) { this.observers.add(observer); }
  
  public void close() throws IOException {
    IOException ioe = null;
    try {
      super.close();
    } catch (IOException e) {
      ioe = e;
    } 
    if (ioe == null) {
      noteClosed();
    } else {
      noteError(ioe);
    } 
  }
  
  public void consume() throws IOException { IOUtils.consume(this); }
  
  private void forEachObserver(IOConsumer<Observer> action) throws IOException { IOConsumer.forAll(action, this.observers); }
  
  public List<Observer> getObservers() { return this.observers; }
  
  protected void noteClosed() throws IOException { forEachObserver(Observer::closed); }
  
  protected void noteDataByte(int value) throws IOException { forEachObserver(observer -> observer.data(value)); }
  
  protected void noteDataBytes(byte[] buffer, int offset, int length) throws IOException { forEachObserver(observer -> observer.data(buffer, offset, length)); }
  
  protected void noteError(IOException exception) throws IOException { forEachObserver(observer -> observer.error(exception)); }
  
  protected void noteFinished() throws IOException { forEachObserver(Observer::finished); }
  
  private void notify(byte[] buffer, int offset, int result, IOException ioe) throws IOException {
    if (ioe != null) {
      noteError(ioe);
      throw ioe;
    } 
    if (result == -1) {
      noteFinished();
    } else if (result > 0) {
      noteDataBytes(buffer, offset, result);
    } 
  }
  
  public int read() throws IOException {
    int result = 0;
    IOException ioe = null;
    try {
      result = super.read();
    } catch (IOException ex) {
      ioe = ex;
    } 
    if (ioe != null) {
      noteError(ioe);
      throw ioe;
    } 
    if (result == -1) {
      noteFinished();
    } else {
      noteDataByte(result);
    } 
    return result;
  }
  
  public int read(byte[] buffer) throws IOException {
    int result = 0;
    IOException ioe = null;
    try {
      result = super.read(buffer);
    } catch (IOException ex) {
      ioe = ex;
    } 
    notify(buffer, 0, result, ioe);
    return result;
  }
  
  public int read(byte[] buffer, int offset, int length) throws IOException {
    int result = 0;
    IOException ioe = null;
    try {
      result = super.read(buffer, offset, length);
    } catch (IOException ex) {
      ioe = ex;
    } 
    notify(buffer, offset, result, ioe);
    return result;
  }
  
  public void remove(Observer observer) { this.observers.remove(observer); }
  
  public void removeAllObservers() throws IOException { this.observers.clear(); }
}
