package org.apache.commons.io.build;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Writer;
import java.nio.charset.Charset;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.util.function.IntUnaryOperator;
import org.apache.commons.io.Charsets;
import org.apache.commons.io.file.PathUtils;

public abstract class AbstractStreamBuilder<T, B extends AbstractStreamBuilder<T, B>> extends AbstractOriginSupplier<T, B> {
  private static final int DEFAULT_MAX_VALUE = 2147483647;
  
  public AbstractStreamBuilder() {
    this.bufferSize = 8192;
    this.bufferSizeDefault = 8192;
    this.bufferSizeMax = Integer.MAX_VALUE;
    this.charset = Charset.defaultCharset();
    this.charsetDefault = Charset.defaultCharset();
    this.openOptions = DEFAULT_OPEN_OPTIONS;
    this.defaultSizeChecker = (size -> (size > this.bufferSizeMax) ? throwIae(size, this.bufferSizeMax) : size);
    this.bufferSizeChecker = this.defaultSizeChecker;
  }
  
  private static final OpenOption[] DEFAULT_OPEN_OPTIONS = PathUtils.EMPTY_OPEN_OPTION_ARRAY;
  
  private int bufferSize;
  
  private int bufferSizeDefault;
  
  private int bufferSizeMax;
  
  private Charset charset;
  
  private Charset charsetDefault;
  
  private OpenOption[] openOptions;
  
  private final IntUnaryOperator defaultSizeChecker;
  
  private IntUnaryOperator bufferSizeChecker;
  
  private int checkBufferSize(int size) { return this.bufferSizeChecker.applyAsInt(size); }
  
  protected int getBufferSize() { return this.bufferSize; }
  
  protected int getBufferSizeDefault() { return this.bufferSizeDefault; }
  
  protected CharSequence getCharSequence() throws IOException { return checkOrigin().getCharSequence(getCharset()); }
  
  public Charset getCharset() { return this.charset; }
  
  protected Charset getCharsetDefault() { return this.charsetDefault; }
  
  protected InputStream getInputStream() throws IOException { return checkOrigin().getInputStream(getOpenOptions()); }
  
  protected OpenOption[] getOpenOptions() { return this.openOptions; }
  
  protected OutputStream getOutputStream() throws IOException { return checkOrigin().getOutputStream(getOpenOptions()); }
  
  protected Path getPath() { return checkOrigin().getPath(); }
  
  protected Writer getWriter() throws IOException { return checkOrigin().getWriter(getCharset(), getOpenOptions()); }
  
  public B setBufferSize(int bufferSize) {
    this.bufferSize = checkBufferSize((bufferSize > 0) ? bufferSize : this.bufferSizeDefault);
    return (B)(AbstractStreamBuilder)asThis();
  }
  
  public B setBufferSize(Integer bufferSize) {
    setBufferSize((bufferSize != null) ? bufferSize.intValue() : this.bufferSizeDefault);
    return (B)(AbstractStreamBuilder)asThis();
  }
  
  public B setBufferSizeChecker(IntUnaryOperator bufferSizeChecker) {
    this.bufferSizeChecker = (bufferSizeChecker != null) ? bufferSizeChecker : this.defaultSizeChecker;
    return (B)(AbstractStreamBuilder)asThis();
  }
  
  protected B setBufferSizeDefault(int bufferSizeDefault) {
    this.bufferSizeDefault = bufferSizeDefault;
    return (B)(AbstractStreamBuilder)asThis();
  }
  
  public B setBufferSizeMax(int bufferSizeMax) {
    this.bufferSizeMax = (bufferSizeMax > 0) ? bufferSizeMax : Integer.MAX_VALUE;
    return (B)(AbstractStreamBuilder)asThis();
  }
  
  public B setCharset(Charset charset) {
    this.charset = Charsets.toCharset(charset, this.charsetDefault);
    return (B)(AbstractStreamBuilder)asThis();
  }
  
  public B setCharset(String charset) { return (B)setCharset(Charsets.toCharset(charset, this.charsetDefault)); }
  
  protected B setCharsetDefault(Charset defaultCharset) {
    this.charsetDefault = defaultCharset;
    return (B)(AbstractStreamBuilder)asThis();
  }
  
  public B setOpenOptions(OpenOption... openOptions) {
    this.openOptions = (openOptions != null) ? openOptions : DEFAULT_OPEN_OPTIONS;
    return (B)(AbstractStreamBuilder)asThis();
  }
  
  private int throwIae(int size, int max) { throw new IllegalArgumentException(String.format("Request %,d exceeds maximum %,d", new Object[] { Integer.valueOf(size), Integer.valueOf(max) })); }
}
