package org.apache.commons.io.output;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

public class ByteArrayOutputStream extends AbstractByteArrayOutputStream {
  public static InputStream toBufferedInputStream(InputStream input) throws IOException { return toBufferedInputStream(input, 1024); }
  
  public static InputStream toBufferedInputStream(InputStream input, int size) throws IOException {
    ByteArrayOutputStream output = new ByteArrayOutputStream(size);
    try {
      output.write(input);
      InputStream inputStream = output.toInputStream();
      output.close();
      return inputStream;
    } catch (Throwable throwable) {
      try {
        output.close();
      } catch (Throwable throwable1) {
        throwable.addSuppressed(throwable1);
      } 
      throw throwable;
    } 
  }
  
  public ByteArrayOutputStream() { this(1024); }
  
  public ByteArrayOutputStream(int size) {
    if (size < 0)
      throw new IllegalArgumentException("Negative initial size: " + size); 
    synchronized (this) {
      needNewBuffer(size);
    } 
  }
  
  public void reset() { resetImpl(); }
  
  public int size() { return this.count; }
  
  public byte[] toByteArray() { return toByteArrayImpl(); }
  
  public InputStream toInputStream() { return toInputStream(java.io.ByteArrayInputStream::new); }
  
  public void write(byte[] b, int off, int len) {
    if (off < 0 || off > b.length || len < 0 || off + len > b.length || off + len < 0)
      throw new IndexOutOfBoundsException(); 
    if (len == 0)
      return; 
    synchronized (this) {
      writeImpl(b, off, len);
    } 
  }
  
  public int write(InputStream in) throws IOException { return writeImpl(in); }
  
  public void write(int b) { writeImpl(b); }
  
  public void writeTo(OutputStream out) throws IOException { writeToImpl(out); }
}
