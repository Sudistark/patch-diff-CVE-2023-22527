package org.apache.commons.io.output;

import java.io.IOException;
import java.io.Writer;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Objects;
import java.util.stream.Stream;
import org.apache.commons.io.IOExceptionList;
import org.apache.commons.io.function.IOConsumer;

public class FilterCollectionWriter extends Writer {
  protected final Collection<Writer> EMPTY_WRITERS;
  
  protected final Collection<Writer> writers;
  
  protected FilterCollectionWriter(Collection<Writer> writers) {
    this.EMPTY_WRITERS = Collections.emptyList();
    this.writers = (writers == null) ? this.EMPTY_WRITERS : writers;
  }
  
  protected FilterCollectionWriter(Writer... writers) {
    this.EMPTY_WRITERS = Collections.emptyList();
    this.writers = (writers == null) ? this.EMPTY_WRITERS : Arrays.asList(writers);
  }
  
  public Writer append(char c) throws IOException { return forAllWriters(w -> w.append(c)); }
  
  public Writer append(CharSequence csq) throws IOException { return forAllWriters(w -> w.append(csq)); }
  
  public Writer append(CharSequence csq, int start, int end) throws IOException { return forAllWriters(w -> w.append(csq, start, end)); }
  
  public void close() throws IOException { forAllWriters(Writer::close); }
  
  public void flush() throws IOException { forAllWriters(Writer::flush); }
  
  private FilterCollectionWriter forAllWriters(IOConsumer<Writer> action) throws IOExceptionList {
    IOConsumer.forAll(action, writers());
    return this;
  }
  
  public void write(char[] cbuf) throws IOException { forAllWriters(w -> w.write(cbuf)); }
  
  public void write(char[] cbuf, int off, int len) throws IOException { forAllWriters(w -> w.write(cbuf, off, len)); }
  
  public void write(int c) throws IOException { forAllWriters(w -> w.write(c)); }
  
  public void write(String str) throws IOException { forAllWriters(w -> w.write(str)); }
  
  public void write(String str, int off, int len) throws IOException { forAllWriters(w -> w.write(str, off, len)); }
  
  private Stream<Writer> writers() { return this.writers.stream().filter(Objects::nonNull); }
}
