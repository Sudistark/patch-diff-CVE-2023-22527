package org.apache.commons.io.filefilter;

import java.io.File;
import java.io.Serializable;
import java.nio.file.FileVisitResult;
import java.nio.file.Path;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.stream.Stream;

public class OrFileFilter extends AbstractFileFilter implements ConditionalFileFilter, Serializable {
  private static final long serialVersionUID = 5767770777065432721L;
  
  private final List<IOFileFilter> fileFilters;
  
  public OrFileFilter() { this(0); }
  
  private OrFileFilter(ArrayList<IOFileFilter> initialList) { this.fileFilters = (List)Objects.requireNonNull(initialList, "initialList"); }
  
  private OrFileFilter(int initialCapacity) { this(new ArrayList(initialCapacity)); }
  
  public OrFileFilter(IOFileFilter... fileFilters) {
    this((IOFileFilter[])Objects.requireNonNull(fileFilters, "fileFilters").length);
    addFileFilter(fileFilters);
  }
  
  public OrFileFilter(IOFileFilter filter1, IOFileFilter filter2) {
    this(2);
    addFileFilter(filter1);
    addFileFilter(filter2);
  }
  
  public OrFileFilter(List<IOFileFilter> fileFilters) { this(new ArrayList((Collection)Objects.requireNonNull(fileFilters, "fileFilters"))); }
  
  public boolean accept(File file) { return this.fileFilters.stream().anyMatch(fileFilter -> fileFilter.accept(file)); }
  
  public boolean accept(File file, String name) { return this.fileFilters.stream().anyMatch(fileFilter -> fileFilter.accept(file, name)); }
  
  public FileVisitResult accept(Path file, BasicFileAttributes attributes) { return toDefaultFileVisitResult(this.fileFilters.stream().anyMatch(fileFilter -> (fileFilter.accept(file, attributes) == FileVisitResult.CONTINUE))); }
  
  public void addFileFilter(IOFileFilter fileFilter) { this.fileFilters.add((IOFileFilter)Objects.requireNonNull(fileFilter, "fileFilter")); }
  
  public void addFileFilter(IOFileFilter... fileFilters) { Stream.of((IOFileFilter[])Objects.requireNonNull(fileFilters, "fileFilters")).forEach(this::addFileFilter); }
  
  public List<IOFileFilter> getFileFilters() { return Collections.unmodifiableList(this.fileFilters); }
  
  public boolean removeFileFilter(IOFileFilter fileFilter) { return this.fileFilters.remove(fileFilter); }
  
  public void setFileFilters(List<IOFileFilter> fileFilters) {
    this.fileFilters.clear();
    this.fileFilters.addAll((Collection)Objects.requireNonNull(fileFilters, "fileFilters"));
  }
  
  public String toString() {
    StringBuilder buffer = new StringBuilder();
    buffer.append(super.toString());
    buffer.append("(");
    append(this.fileFilters, buffer);
    buffer.append(")");
    return buffer.toString();
  }
}
