package org.apache.commons.io.filefilter;

import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.io.Serializable;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;
import java.nio.charset.Charset;
import java.nio.file.FileVisitResult;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.Arrays;
import java.util.Objects;
import org.apache.commons.io.RandomAccessFileMode;
import org.apache.commons.io.RandomAccessFiles;

public class MagicNumberFileFilter extends AbstractFileFilter implements Serializable {
  private static final long serialVersionUID = -547733176983104172L;
  
  private final byte[] magicNumbers;
  
  private final long byteOffset;
  
  public MagicNumberFileFilter(byte[] magicNumber) { this(magicNumber, 0L); }
  
  public MagicNumberFileFilter(byte[] magicNumbers, long offset) {
    Objects.requireNonNull(magicNumbers, "magicNumbers");
    if (magicNumbers.length == 0)
      throw new IllegalArgumentException("The magic number must contain at least one byte"); 
    if (offset < 0L)
      throw new IllegalArgumentException("The offset cannot be negative"); 
    this.magicNumbers = (byte[])magicNumbers.clone();
    this.byteOffset = offset;
  }
  
  public MagicNumberFileFilter(String magicNumber) { this(magicNumber, 0L); }
  
  public MagicNumberFileFilter(String magicNumber, long offset) {
    Objects.requireNonNull(magicNumber, "magicNumber");
    if (magicNumber.isEmpty())
      throw new IllegalArgumentException("The magic number must contain at least one byte"); 
    if (offset < 0L)
      throw new IllegalArgumentException("The offset cannot be negative"); 
    this.magicNumbers = magicNumber.getBytes(Charset.defaultCharset());
    this.byteOffset = offset;
  }
  
  public boolean accept(File file) {
    if (file != null && file.isFile() && file.canRead())
      try {
        RandomAccessFile randomAccessFile = RandomAccessFileMode.READ_ONLY.create(file);
        try {
          boolean bool = Arrays.equals(this.magicNumbers, RandomAccessFiles.read(randomAccessFile, this.byteOffset, this.magicNumbers.length));
          if (randomAccessFile != null)
            randomAccessFile.close(); 
          return bool;
        } catch (Throwable throwable) {
          if (randomAccessFile != null)
            try {
              randomAccessFile.close();
            } catch (Throwable throwable1) {
              throwable.addSuppressed(throwable1);
            }  
          throw throwable;
        } 
      } catch (IOException iOException) {} 
    return false;
  }
  
  public FileVisitResult accept(Path file, BasicFileAttributes attributes) {
    if (file != null && Files.isRegularFile(file, new java.nio.file.LinkOption[0]) && Files.isReadable(file))
      try {
        FileChannel fileChannel = FileChannel.open(file, new java.nio.file.OpenOption[0]);
        try {
          ByteBuffer byteBuffer = ByteBuffer.allocate(this.magicNumbers.length);
          fileChannel.position(this.byteOffset);
          int read = fileChannel.read(byteBuffer);
          if (read != this.magicNumbers.length) {
            FileVisitResult fileVisitResult1 = FileVisitResult.TERMINATE;
            if (fileChannel != null)
              fileChannel.close(); 
            return fileVisitResult1;
          } 
          FileVisitResult fileVisitResult = toFileVisitResult(Arrays.equals(this.magicNumbers, byteBuffer.array()));
          if (fileChannel != null)
            fileChannel.close(); 
          return fileVisitResult;
        } catch (Throwable throwable) {
          if (fileChannel != null)
            try {
              fileChannel.close();
            } catch (Throwable throwable1) {
              throwable.addSuppressed(throwable1);
            }  
          throw throwable;
        } 
      } catch (IOException iOException) {} 
    return FileVisitResult.TERMINATE;
  }
  
  public String toString() {
    StringBuilder builder = new StringBuilder(super.toString());
    builder.append("(");
    builder.append(new String(this.magicNumbers, Charset.defaultCharset()));
    builder.append(",");
    builder.append(this.byteOffset);
    builder.append(")");
    return builder.toString();
  }
}
