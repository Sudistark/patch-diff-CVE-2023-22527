package org.apache.commons.io.filefilter;

import java.io.File;
import java.io.Serializable;
import java.nio.file.FileVisitResult;
import java.nio.file.Path;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.List;
import java.util.Objects;
import java.util.stream.Stream;
import org.apache.commons.io.FilenameUtils;
import org.apache.commons.io.IOCase;

public class WildcardFileFilter extends AbstractFileFilter implements Serializable {
  private static final long serialVersionUID = -7426486598995782105L;
  
  private final String[] wildcards;
  
  private final IOCase ioCase;
  
  public static Builder builder() { return new Builder(); }
  
  private static <T> T requireWildcards(T wildcards) { return (T)Objects.requireNonNull(wildcards, "wildcards"); }
  
  private WildcardFileFilter(IOCase ioCase, String... wildcards) {
    this.wildcards = (String[])((String[])requireWildcards(wildcards)).clone();
    this.ioCase = IOCase.value(ioCase, IOCase.SENSITIVE);
  }
  
  @Deprecated
  public WildcardFileFilter(List<String> wildcards) { this(wildcards, IOCase.SENSITIVE); }
  
  @Deprecated
  public WildcardFileFilter(List<String> wildcards, IOCase ioCase) { this(ioCase, (String[])((List)requireWildcards(wildcards)).toArray(EMPTY_STRING_ARRAY)); }
  
  @Deprecated
  public WildcardFileFilter(String wildcard) { this(IOCase.SENSITIVE, new String[] { (String)requireWildcards(wildcard) }); }
  
  @Deprecated
  public WildcardFileFilter(String... wildcards) { this(IOCase.SENSITIVE, wildcards); }
  
  @Deprecated
  public WildcardFileFilter(String wildcard, IOCase ioCase) { this(ioCase, new String[] { wildcard }); }
  
  @Deprecated
  public WildcardFileFilter(String[] wildcards, IOCase ioCase) { this(ioCase, wildcards); }
  
  public boolean accept(File file) { return accept(file.getName()); }
  
  public boolean accept(File dir, String name) { return accept(name); }
  
  public FileVisitResult accept(Path file, BasicFileAttributes attributes) { return toFileVisitResult(accept(Objects.toString(file.getFileName(), null))); }
  
  private boolean accept(String name) { return Stream.of(this.wildcards).anyMatch(wildcard -> FilenameUtils.wildcardMatch(name, wildcard, this.ioCase)); }
  
  public String toString() {
    StringBuilder buffer = new StringBuilder();
    buffer.append(super.toString());
    buffer.append("(");
    append(this.wildcards, buffer);
    buffer.append(")");
    return buffer.toString();
  }
}
