package org.apache.commons.io.function;

import java.io.IOException;
import java.util.Iterator;
import java.util.Objects;
import java.util.Spliterator;
import java.util.stream.BaseStream;

class UncheckedIOBaseStream<T, S extends IOBaseStream<T, S, B>, B extends BaseStream<T, B>> extends Object implements BaseStream<T, B> {
  private final S delegate;
  
  UncheckedIOBaseStream(S delegate) { this.delegate = delegate; }
  
  public void close() { this.delegate.close(); }
  
  public boolean isParallel() { return this.delegate.isParallel(); }
  
  public Iterator<T> iterator() { return this.delegate.iterator().asIterator(); }
  
  public B onClose(Runnable closeHandler) { Objects.requireNonNull(this.delegate);
    return (B)((IOBaseStream)Uncheck.apply(this.delegate::onClose, () -> closeHandler.run())).unwrap(); }
  
  public B parallel() { return (B)this.delegate.parallel().unwrap(); }
  
  public B sequential() { return (B)this.delegate.sequential().unwrap(); }
  
  public Spliterator<T> spliterator() { return this.delegate.spliterator().unwrap(); }
  
  public B unordered() { return (B)this.delegate.unordered().unwrap(); }
}
