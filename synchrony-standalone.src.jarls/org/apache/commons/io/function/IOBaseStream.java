package org.apache.commons.io.function;

import java.io.Closeable;
import java.io.IOException;
import java.util.stream.BaseStream;

public interface IOBaseStream<T, S extends IOBaseStream<T, S, B>, B extends BaseStream<T, B>> extends Closeable {
  default BaseStream<T, B> asBaseStream() { return new UncheckedIOBaseStream(this); }
  
  default void close() { unwrap().close(); }
  
  default boolean isParallel() { return unwrap().isParallel(); }
  
  default IOIterator<T> iterator() { return IOIteratorAdapter.adapt(unwrap().iterator()); }
  
  default S onClose(IORunnable closeHandler) throws IOException { return (S)wrap(unwrap().onClose(() -> Erase.run(closeHandler))); }
  
  default S parallel() { return (S)(isParallel() ? this : wrap(unwrap().parallel())); }
  
  default S sequential() { return (S)(isParallel() ? wrap(unwrap().sequential()) : this); }
  
  default IOSpliterator<T> spliterator() { return IOSpliteratorAdapter.adapt(unwrap().spliterator()); }
  
  default S unordered() { return (S)wrap(unwrap().unordered()); }
  
  B unwrap();
  
  S wrap(B paramB);
}
