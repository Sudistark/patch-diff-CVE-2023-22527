package org.apache.commons.io.function;

import java.util.Comparator;
import java.util.Objects;
import java.util.Spliterator;
import java.util.function.Consumer;

final class UncheckedIOSpliterator<T> extends Object implements Spliterator<T> {
  private final IOSpliterator<T> delegate;
  
  UncheckedIOSpliterator(IOSpliterator<T> delegate) { this.delegate = (IOSpliterator)Objects.requireNonNull(delegate, "delegate"); }
  
  public int characteristics() { return this.delegate.characteristics(); }
  
  public long estimateSize() { return this.delegate.estimateSize(); }
  
  public void forEachRemaining(Consumer<? super T> action) { Objects.requireNonNull(this.delegate);
    Objects.requireNonNull(action);
    Uncheck.accept(this.delegate::forEachRemaining, action::accept); }
  
  public Comparator<? super T> getComparator() { return this.delegate.getComparator().asComparator(); }
  
  public long getExactSizeIfKnown() { return this.delegate.getExactSizeIfKnown(); }
  
  public boolean hasCharacteristics(int characteristics) { return this.delegate.hasCharacteristics(characteristics); }
  
  public boolean tryAdvance(Consumer<? super T> action) { Objects.requireNonNull(this.delegate);
    Objects.requireNonNull(action);
    return ((Boolean)Uncheck.apply(this.delegate::tryAdvance, action::accept)).booleanValue(); }
  
  public Spliterator<T> trySplit() { Objects.requireNonNull(this.delegate);
    return ((IOSpliterator)Uncheck.get(this.delegate::trySplit)).unwrap(); }
}
