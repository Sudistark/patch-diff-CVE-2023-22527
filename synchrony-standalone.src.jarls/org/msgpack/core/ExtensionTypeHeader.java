package org.msgpack.core;

public class ExtensionTypeHeader {
  private final byte type;
  
  private final int length;
  
  public ExtensionTypeHeader(byte paramByte, int paramInt) {
    Preconditions.checkArgument((paramInt >= 0), "length must be >= 0");
    this.type = paramByte;
    this.length = paramInt;
  }
  
  public static byte checkedCastToByte(int paramInt) {
    Preconditions.checkArgument((-128 <= paramInt && paramInt <= 127), "Extension type code must be within the range of byte");
    return (byte)paramInt;
  }
  
  public byte getType() { return this.type; }
  
  public boolean isTimestampType() { return (this.type == -1); }
  
  public int getLength() { return this.length; }
  
  public int hashCode() { return (this.type + 31) * 31 + this.length; }
  
  public boolean equals(Object paramObject) {
    if (paramObject instanceof ExtensionTypeHeader) {
      ExtensionTypeHeader extensionTypeHeader = (ExtensionTypeHeader)paramObject;
      return (this.type == extensionTypeHeader.type && this.length == extensionTypeHeader.length);
    } 
    return false;
  }
  
  public String toString() { return String.format("ExtensionTypeHeader(type:%d, length:%,d)", new Object[] { Byte.valueOf(this.type), Integer.valueOf(this.length) }); }
}
