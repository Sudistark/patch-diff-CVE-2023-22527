package org.msgpack.core.buffer;

import org.msgpack.core.Preconditions;

public class ArrayBufferInput implements MessageBufferInput {
  private MessageBuffer buffer;
  
  private boolean isEmpty;
  
  public ArrayBufferInput(MessageBuffer paramMessageBuffer) {
    this.buffer = paramMessageBuffer;
    if (paramMessageBuffer == null) {
      this.isEmpty = true;
    } else {
      this.isEmpty = false;
    } 
  }
  
  public ArrayBufferInput(byte[] paramArrayOfByte) { this(paramArrayOfByte, 0, paramArrayOfByte.length); }
  
  public ArrayBufferInput(byte[] paramArrayOfByte, int paramInt1, int paramInt2) { this(MessageBuffer.wrap((byte[])Preconditions.checkNotNull(paramArrayOfByte, "input array is null"), paramInt1, paramInt2)); }
  
  public MessageBuffer reset(MessageBuffer paramMessageBuffer) {
    MessageBuffer messageBuffer = this.buffer;
    this.buffer = paramMessageBuffer;
    if (paramMessageBuffer == null) {
      this.isEmpty = true;
    } else {
      this.isEmpty = false;
    } 
    return messageBuffer;
  }
  
  public void reset(byte[] paramArrayOfByte) { reset(MessageBuffer.wrap((byte[])Preconditions.checkNotNull(paramArrayOfByte, "input array is null"))); }
  
  public void reset(byte[] paramArrayOfByte, int paramInt1, int paramInt2) { reset(MessageBuffer.wrap((byte[])Preconditions.checkNotNull(paramArrayOfByte, "input array is null"), paramInt1, paramInt2)); }
  
  public MessageBuffer next() {
    if (this.isEmpty)
      return null; 
    this.isEmpty = true;
    return this.buffer;
  }
  
  public void close() {
    this.buffer = null;
    this.isEmpty = true;
  }
}
