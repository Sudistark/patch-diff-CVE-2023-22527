package org.msgpack.core.buffer;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.channels.FileChannel;
import org.msgpack.core.Preconditions;

public class InputStreamBufferInput implements MessageBufferInput {
  private InputStream in;
  
  private final byte[] buffer;
  
  public static MessageBufferInput newBufferInput(InputStream paramInputStream) {
    Preconditions.checkNotNull(paramInputStream, "InputStream is null");
    if (paramInputStream instanceof FileInputStream) {
      FileChannel fileChannel = ((FileInputStream)paramInputStream).getChannel();
      if (fileChannel != null)
        return new ChannelBufferInput(fileChannel); 
    } 
    return new InputStreamBufferInput(paramInputStream);
  }
  
  public InputStreamBufferInput(InputStream paramInputStream) { this(paramInputStream, 8192); }
  
  public InputStreamBufferInput(InputStream paramInputStream, int paramInt) {
    this.in = (InputStream)Preconditions.checkNotNull(paramInputStream, "input is null");
    this.buffer = new byte[paramInt];
  }
  
  public InputStream reset(InputStream paramInputStream) throws IOException {
    InputStream inputStream = this.in;
    this.in = paramInputStream;
    return inputStream;
  }
  
  public MessageBuffer next() throws IOException {
    int i = this.in.read(this.buffer);
    if (i == -1)
      return null; 
    return MessageBuffer.wrap(this.buffer, 0, i);
  }
  
  public void close() throws IOException { this.in.close(); }
}
