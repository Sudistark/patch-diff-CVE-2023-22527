package org.msgpack.jackson.dataformat;

import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.io.IOContext;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Writer;
import java.util.Arrays;
import org.msgpack.core.MessagePack;
import org.msgpack.core.annotations.VisibleForTesting;

public class MessagePackFactory extends JsonFactory {
  private static final long serialVersionUID = 2578263992015504347L;
  
  private final MessagePack.PackerConfig packerConfig;
  
  private boolean reuseResourceInGenerator;
  
  private boolean reuseResourceInParser;
  
  private ExtensionTypeCustomDeserializers extTypeCustomDesers;
  
  public MessagePackFactory() { this(MessagePack.DEFAULT_PACKER_CONFIG); }
  
  public MessagePackFactory(MessagePack.PackerConfig paramPackerConfig) {
    this.reuseResourceInGenerator = true;
    this.reuseResourceInParser = true;
    this.packerConfig = paramPackerConfig;
  }
  
  public MessagePackFactory(MessagePackFactory paramMessagePackFactory) {
    super(paramMessagePackFactory, null);
    this.reuseResourceInGenerator = true;
    this.reuseResourceInParser = true;
    this.packerConfig = paramMessagePackFactory.packerConfig.clone();
    this.reuseResourceInGenerator = paramMessagePackFactory.reuseResourceInGenerator;
    this.reuseResourceInParser = paramMessagePackFactory.reuseResourceInParser;
    if (paramMessagePackFactory.extTypeCustomDesers != null)
      this.extTypeCustomDesers = new ExtensionTypeCustomDeserializers(paramMessagePackFactory.extTypeCustomDesers); 
  }
  
  public MessagePackFactory setReuseResourceInGenerator(boolean paramBoolean) {
    this.reuseResourceInGenerator = paramBoolean;
    return this;
  }
  
  public MessagePackFactory setReuseResourceInParser(boolean paramBoolean) {
    this.reuseResourceInParser = paramBoolean;
    return this;
  }
  
  public MessagePackFactory setExtTypeCustomDesers(ExtensionTypeCustomDeserializers paramExtensionTypeCustomDeserializers) {
    this.extTypeCustomDesers = paramExtensionTypeCustomDeserializers;
    return this;
  }
  
  public JsonGenerator createGenerator(OutputStream paramOutputStream, JsonEncoding paramJsonEncoding) throws IOException { return new MessagePackGenerator(this._generatorFeatures, this._objectCodec, paramOutputStream, this.packerConfig, this.reuseResourceInGenerator); }
  
  public JsonGenerator createGenerator(File paramFile, JsonEncoding paramJsonEncoding) throws IOException { return createGenerator(new FileOutputStream(paramFile), paramJsonEncoding); }
  
  public JsonGenerator createGenerator(Writer paramWriter) throws IOException { throw new UnsupportedOperationException(); }
  
  public JsonParser createParser(byte[] paramArrayOfByte) throws IOException, JsonParseException {
    IOContext iOContext = _createContext(paramArrayOfByte, false);
    return _createParser(paramArrayOfByte, 0, paramArrayOfByte.length, iOContext);
  }
  
  public JsonParser createParser(InputStream paramInputStream) throws IOException, JsonParseException {
    IOContext iOContext = _createContext(paramInputStream, false);
    return _createParser(paramInputStream, iOContext);
  }
  
  protected MessagePackParser _createParser(InputStream paramInputStream, IOContext paramIOContext) throws IOException {
    MessagePackParser messagePackParser = new MessagePackParser(paramIOContext, this._parserFeatures, this._objectCodec, paramInputStream, this.reuseResourceInParser);
    if (this.extTypeCustomDesers != null)
      messagePackParser.setExtensionTypeCustomDeserializers(this.extTypeCustomDesers); 
    return messagePackParser;
  }
  
  protected JsonParser _createParser(byte[] paramArrayOfByte, int paramInt1, int paramInt2, IOContext paramIOContext) throws IOException, JsonParseException {
    if (paramInt1 != 0 || paramInt2 != paramArrayOfByte.length)
      paramArrayOfByte = Arrays.copyOfRange(paramArrayOfByte, paramInt1, paramInt1 + paramInt2); 
    MessagePackParser messagePackParser = new MessagePackParser(paramIOContext, this._parserFeatures, this._objectCodec, paramArrayOfByte, this.reuseResourceInParser);
    if (this.extTypeCustomDesers != null)
      messagePackParser.setExtensionTypeCustomDeserializers(this.extTypeCustomDesers); 
    return messagePackParser;
  }
  
  public JsonFactory copy() { return new MessagePackFactory(this); }
  
  @VisibleForTesting
  MessagePack.PackerConfig getPackerConfig() { return this.packerConfig; }
  
  @VisibleForTesting
  boolean isReuseResourceInGenerator() { return this.reuseResourceInGenerator; }
  
  @VisibleForTesting
  boolean isReuseResourceInParser() { return this.reuseResourceInParser; }
  
  @VisibleForTesting
  ExtensionTypeCustomDeserializers getExtTypeCustomDesers() { return this.extTypeCustomDesers; }
  
  public String getFormatName() { return "msgpack"; }
}
