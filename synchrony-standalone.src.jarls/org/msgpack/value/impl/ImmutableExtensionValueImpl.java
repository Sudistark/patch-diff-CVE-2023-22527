package org.msgpack.value.impl;

import java.io.IOException;
import java.util.Arrays;
import org.msgpack.core.MessagePacker;
import org.msgpack.value.ExtensionValue;
import org.msgpack.value.ImmutableArrayValue;
import org.msgpack.value.ImmutableBinaryValue;
import org.msgpack.value.ImmutableBooleanValue;
import org.msgpack.value.ImmutableExtensionValue;
import org.msgpack.value.ImmutableFloatValue;
import org.msgpack.value.ImmutableIntegerValue;
import org.msgpack.value.ImmutableMapValue;
import org.msgpack.value.ImmutableNilValue;
import org.msgpack.value.ImmutableNumberValue;
import org.msgpack.value.ImmutableRawValue;
import org.msgpack.value.ImmutableStringValue;
import org.msgpack.value.ImmutableTimestampValue;
import org.msgpack.value.ImmutableValue;
import org.msgpack.value.Value;
import org.msgpack.value.ValueType;

public class ImmutableExtensionValueImpl extends AbstractImmutableValue implements ImmutableExtensionValue {
  private final byte type;
  
  private final byte[] data;
  
  public ImmutableExtensionValueImpl(byte paramByte, byte[] paramArrayOfByte) {
    this.type = paramByte;
    this.data = paramArrayOfByte;
  }
  
  public ValueType getValueType() { return ValueType.EXTENSION; }
  
  public ImmutableExtensionValue immutableValue() { return this; }
  
  public ImmutableExtensionValue asExtensionValue() { return this; }
  
  public byte getType() { return this.type; }
  
  public byte[] getData() { return this.data; }
  
  public void writeTo(MessagePacker paramMessagePacker) throws IOException {
    paramMessagePacker.packExtensionTypeHeader(this.type, this.data.length);
    paramMessagePacker.writePayload(this.data);
  }
  
  public boolean equals(Object paramObject) {
    if (paramObject == this)
      return true; 
    if (!(paramObject instanceof Value))
      return false; 
    Value value = (Value)paramObject;
    if (!value.isExtensionValue())
      return false; 
    ExtensionValue extensionValue = value.asExtensionValue();
    return (this.type == extensionValue.getType() && Arrays.equals(this.data, extensionValue.getData()));
  }
  
  public int hashCode() {
    byte b = 31 + this.type;
    for (byte b1 : this.data)
      b = 31 * b + b1; 
    return b;
  }
  
  public String toJson() {
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append('[');
    stringBuilder.append(Byte.toString(this.type));
    stringBuilder.append(",\"");
    for (byte b : this.data)
      stringBuilder.append(Integer.toString(b, 16)); 
    stringBuilder.append("\"]");
    return stringBuilder.toString();
  }
  
  public String toString() {
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append('(');
    stringBuilder.append(Byte.toString(this.type));
    stringBuilder.append(",0x");
    for (byte b : this.data)
      stringBuilder.append(Integer.toString(b, 16)); 
    stringBuilder.append(")");
    return stringBuilder.toString();
  }
}
