package org.msgpack.value.impl;

import java.io.IOException;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.msgpack.core.MessagePacker;
import org.msgpack.value.FloatValue;
import org.msgpack.value.ImmutableArrayValue;
import org.msgpack.value.ImmutableBinaryValue;
import org.msgpack.value.ImmutableBooleanValue;
import org.msgpack.value.ImmutableExtensionValue;
import org.msgpack.value.ImmutableFloatValue;
import org.msgpack.value.ImmutableIntegerValue;
import org.msgpack.value.ImmutableMapValue;
import org.msgpack.value.ImmutableNilValue;
import org.msgpack.value.ImmutableNumberValue;
import org.msgpack.value.ImmutableRawValue;
import org.msgpack.value.ImmutableStringValue;
import org.msgpack.value.ImmutableTimestampValue;
import org.msgpack.value.ImmutableValue;
import org.msgpack.value.NumberValue;
import org.msgpack.value.Value;
import org.msgpack.value.ValueType;

public class ImmutableDoubleValueImpl extends AbstractImmutableValue implements ImmutableFloatValue {
  private final double value;
  
  public ImmutableDoubleValueImpl(double paramDouble) { this.value = paramDouble; }
  
  public ValueType getValueType() { return ValueType.FLOAT; }
  
  public ImmutableDoubleValueImpl immutableValue() { return this; }
  
  public ImmutableNumberValue asNumberValue() { return this; }
  
  public ImmutableFloatValue asFloatValue() { return this; }
  
  public byte toByte() { return (byte)(int)this.value; }
  
  public short toShort() { return (short)(int)this.value; }
  
  public int toInt() { return (int)this.value; }
  
  public long toLong() { return (long)this.value; }
  
  public BigInteger toBigInteger() { return (new BigDecimal(this.value)).toBigInteger(); }
  
  public float toFloat() { return (float)this.value; }
  
  public double toDouble() { return this.value; }
  
  public void writeTo(MessagePacker paramMessagePacker) throws IOException { paramMessagePacker.packDouble(this.value); }
  
  public boolean equals(Object paramObject) {
    if (paramObject == this)
      return true; 
    if (!(paramObject instanceof Value))
      return false; 
    Value value1 = (Value)paramObject;
    if (!value1.isFloatValue())
      return false; 
    return (this.value == value1.asFloatValue().toDouble());
  }
  
  public int hashCode() {
    long l = Double.doubleToLongBits(this.value);
    return (int)(l ^ l >>> 32);
  }
  
  public String toJson() {
    if (Double.isNaN(this.value) || Double.isInfinite(this.value))
      return "null"; 
    return Double.toString(this.value);
  }
  
  public String toString() { return Double.toString(this.value); }
}
