package org.msgpack.value.impl;

import java.io.IOException;
import java.time.Instant;
import java.util.Arrays;
import org.msgpack.core.MessagePacker;
import org.msgpack.core.buffer.MessageBuffer;
import org.msgpack.value.ExtensionValue;
import org.msgpack.value.ImmutableArrayValue;
import org.msgpack.value.ImmutableBinaryValue;
import org.msgpack.value.ImmutableBooleanValue;
import org.msgpack.value.ImmutableExtensionValue;
import org.msgpack.value.ImmutableFloatValue;
import org.msgpack.value.ImmutableIntegerValue;
import org.msgpack.value.ImmutableMapValue;
import org.msgpack.value.ImmutableNilValue;
import org.msgpack.value.ImmutableNumberValue;
import org.msgpack.value.ImmutableRawValue;
import org.msgpack.value.ImmutableStringValue;
import org.msgpack.value.ImmutableTimestampValue;
import org.msgpack.value.ImmutableValue;
import org.msgpack.value.TimestampValue;
import org.msgpack.value.Value;
import org.msgpack.value.ValueType;

public class ImmutableTimestampValueImpl extends AbstractImmutableValue implements ImmutableExtensionValue, ImmutableTimestampValue {
  private final Instant instant;
  
  private byte[] data;
  
  public ImmutableTimestampValueImpl(Instant paramInstant) { this.instant = paramInstant; }
  
  public boolean isTimestampValue() { return true; }
  
  public byte getType() { return -1; }
  
  public ValueType getValueType() { return ValueType.EXTENSION; }
  
  public ImmutableTimestampValue immutableValue() { return this; }
  
  public ImmutableExtensionValue asExtensionValue() { return this; }
  
  public ImmutableTimestampValue asTimestampValue() { return this; }
  
  public byte[] getData() {
    if (this.data == null) {
      byte[] arrayOfByte;
      long l = getEpochSecond();
      int i = getNano();
      if (l >>> 34 == 0L) {
        long l1 = (i << 34) | l;
        if ((l1 & 0xFFFFFFFF00000000L) == 0L) {
          arrayOfByte = new byte[4];
          MessageBuffer.wrap(arrayOfByte).putInt(0, (int)l);
        } else {
          arrayOfByte = new byte[8];
          MessageBuffer.wrap(arrayOfByte).putLong(0, l1);
        } 
      } else {
        arrayOfByte = new byte[12];
        MessageBuffer messageBuffer = MessageBuffer.wrap(arrayOfByte);
        messageBuffer.putInt(0, i);
        messageBuffer.putLong(4, l);
      } 
      this.data = arrayOfByte;
    } 
    return this.data;
  }
  
  public long getEpochSecond() { return this.instant.getEpochSecond(); }
  
  public int getNano() { return this.instant.getNano(); }
  
  public long toEpochMillis() { return this.instant.toEpochMilli(); }
  
  public Instant toInstant() { return this.instant; }
  
  public void writeTo(MessagePacker paramMessagePacker) throws IOException { paramMessagePacker.packTimestamp(this.instant); }
  
  public boolean equals(Object paramObject) {
    if (paramObject == this)
      return true; 
    if (!(paramObject instanceof Value))
      return false; 
    Value value = (Value)paramObject;
    if (!value.isExtensionValue())
      return false; 
    ExtensionValue extensionValue = value.asExtensionValue();
    if (extensionValue instanceof TimestampValue) {
      TimestampValue timestampValue = (TimestampValue)extensionValue;
      return this.instant.equals(timestampValue.toInstant());
    } 
    return (-1 == extensionValue.getType() && Arrays.equals(getData(), extensionValue.getData()));
  }
  
  public int hashCode() {
    null = -1;
    null *= 31;
    return this.instant.hashCode();
  }
  
  public String toJson() { return "\"" + toInstant().toString() + "\""; }
  
  public String toString() { return toInstant().toString(); }
}
