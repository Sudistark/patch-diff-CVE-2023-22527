package org.msgpack.value.impl;

import java.io.IOException;
import java.math.BigInteger;
import org.msgpack.core.MessageFormat;
import org.msgpack.core.MessageIntegerOverflowException;
import org.msgpack.core.MessagePacker;
import org.msgpack.value.ImmutableArrayValue;
import org.msgpack.value.ImmutableBinaryValue;
import org.msgpack.value.ImmutableBooleanValue;
import org.msgpack.value.ImmutableExtensionValue;
import org.msgpack.value.ImmutableFloatValue;
import org.msgpack.value.ImmutableIntegerValue;
import org.msgpack.value.ImmutableMapValue;
import org.msgpack.value.ImmutableNilValue;
import org.msgpack.value.ImmutableNumberValue;
import org.msgpack.value.ImmutableRawValue;
import org.msgpack.value.ImmutableStringValue;
import org.msgpack.value.ImmutableTimestampValue;
import org.msgpack.value.ImmutableValue;
import org.msgpack.value.IntegerValue;
import org.msgpack.value.NumberValue;
import org.msgpack.value.Value;
import org.msgpack.value.ValueType;

public class ImmutableBigIntegerValueImpl extends AbstractImmutableValue implements ImmutableIntegerValue {
  private final BigInteger value;
  
  public static MessageFormat mostSuccinctMessageFormat(IntegerValue paramIntegerValue) {
    if (paramIntegerValue.isInByteRange())
      return MessageFormat.INT8; 
    if (paramIntegerValue.isInShortRange())
      return MessageFormat.INT16; 
    if (paramIntegerValue.isInIntRange())
      return MessageFormat.INT32; 
    if (paramIntegerValue.isInLongRange())
      return MessageFormat.INT64; 
    return MessageFormat.UINT64;
  }
  
  public ImmutableBigIntegerValueImpl(BigInteger paramBigInteger) { this.value = paramBigInteger; }
  
  private static final BigInteger BYTE_MIN = BigInteger.valueOf(-128L);
  
  private static final BigInteger BYTE_MAX = BigInteger.valueOf(127L);
  
  private static final BigInteger SHORT_MIN = BigInteger.valueOf(-32768L);
  
  private static final BigInteger SHORT_MAX = BigInteger.valueOf(32767L);
  
  private static final BigInteger INT_MIN = BigInteger.valueOf(-2147483648L);
  
  private static final BigInteger INT_MAX = BigInteger.valueOf(2147483647L);
  
  private static final BigInteger LONG_MIN = BigInteger.valueOf(Float.MIN_VALUE);
  
  private static final BigInteger LONG_MAX = BigInteger.valueOf(Float.MAX_VALUE);
  
  public ValueType getValueType() { return ValueType.INTEGER; }
  
  public ImmutableIntegerValue immutableValue() { return this; }
  
  public ImmutableNumberValue asNumberValue() { return this; }
  
  public ImmutableIntegerValue asIntegerValue() { return this; }
  
  public byte toByte() { return this.value.byteValue(); }
  
  public short toShort() { return this.value.shortValue(); }
  
  public int toInt() { return this.value.intValue(); }
  
  public long toLong() { return this.value.longValue(); }
  
  public BigInteger toBigInteger() { return this.value; }
  
  public float toFloat() { return this.value.floatValue(); }
  
  public double toDouble() { return this.value.doubleValue(); }
  
  public boolean isInByteRange() { return (0 <= this.value.compareTo(BYTE_MIN) && this.value.compareTo(BYTE_MAX) <= 0); }
  
  public boolean isInShortRange() { return (0 <= this.value.compareTo(SHORT_MIN) && this.value.compareTo(SHORT_MAX) <= 0); }
  
  public boolean isInIntRange() { return (0 <= this.value.compareTo(INT_MIN) && this.value.compareTo(INT_MAX) <= 0); }
  
  public boolean isInLongRange() { return (0 <= this.value.compareTo(LONG_MIN) && this.value.compareTo(LONG_MAX) <= 0); }
  
  public MessageFormat mostSuccinctMessageFormat() { return mostSuccinctMessageFormat(this); }
  
  public byte asByte() {
    if (!isInByteRange())
      throw new MessageIntegerOverflowException(this.value); 
    return this.value.byteValue();
  }
  
  public short asShort() {
    if (!isInShortRange())
      throw new MessageIntegerOverflowException(this.value); 
    return this.value.shortValue();
  }
  
  public int asInt() {
    if (!isInIntRange())
      throw new MessageIntegerOverflowException(this.value); 
    return this.value.intValue();
  }
  
  public long asLong() {
    if (!isInLongRange())
      throw new MessageIntegerOverflowException(this.value); 
    return this.value.longValue();
  }
  
  public BigInteger asBigInteger() { return this.value; }
  
  public void writeTo(MessagePacker paramMessagePacker) throws IOException { paramMessagePacker.packBigInteger(this.value); }
  
  public boolean equals(Object paramObject) {
    if (paramObject == this)
      return true; 
    if (!(paramObject instanceof Value))
      return false; 
    Value value1 = (Value)paramObject;
    if (!value1.isIntegerValue())
      return false; 
    IntegerValue integerValue = value1.asIntegerValue();
    return this.value.equals(integerValue.toBigInteger());
  }
  
  public int hashCode() {
    if (INT_MIN.compareTo(this.value) <= 0 && this.value.compareTo(INT_MAX) <= 0)
      return (int)this.value.longValue(); 
    if (LONG_MIN.compareTo(this.value) <= 0 && this.value
      .compareTo(LONG_MAX) <= 0) {
      long l = this.value.longValue();
      return (int)(l ^ l >>> 32);
    } 
    return this.value.hashCode();
  }
  
  public String toJson() { return this.value.toString(); }
  
  public String toString() { return toJson(); }
}
