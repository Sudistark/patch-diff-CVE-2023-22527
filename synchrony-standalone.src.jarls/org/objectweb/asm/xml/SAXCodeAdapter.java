package org.objectweb.asm.xml;

import java.util.HashMap;
import java.util.Map;
import org.objectweb.asm.AnnotationVisitor;
import org.objectweb.asm.Handle;
import org.objectweb.asm.Label;
import org.objectweb.asm.MethodVisitor;
import org.objectweb.asm.Type;
import org.objectweb.asm.util.Printer;
import org.xml.sax.helpers.AttributesImpl;

public final class SAXCodeAdapter extends MethodVisitor {
  static final String[] TYPES = { "top", "int", "float", "double", "long", "null", "uninitializedThis" };
  
  SAXAdapter sa;
  
  private final Map labelNames;
  
  public SAXCodeAdapter(SAXAdapter paramSAXAdapter, int paramInt) {
    super(262144);
    this.sa = paramSAXAdapter;
    this.labelNames = new HashMap();
    if ((paramInt & 0x700) == 0)
      paramSAXAdapter.addStart("code", new AttributesImpl()); 
  }
  
  public final void visitCode() {}
  
  public void visitFrame(int paramInt1, int paramInt2, Object[] paramArrayOfObject1, int paramInt3, Object[] paramArrayOfObject2) {
    AttributesImpl attributesImpl = new AttributesImpl();
    switch (paramInt1) {
      case -1:
      case 0:
        if (paramInt1 == -1) {
          attributesImpl.addAttribute("", "type", "type", "", "NEW");
        } else {
          attributesImpl.addAttribute("", "type", "type", "", "FULL");
        } 
        this.sa.addStart("frame", attributesImpl);
        appendFrameTypes(true, paramInt2, paramArrayOfObject1);
        appendFrameTypes(false, paramInt3, paramArrayOfObject2);
        break;
      case 1:
        attributesImpl.addAttribute("", "type", "type", "", "APPEND");
        this.sa.addStart("frame", attributesImpl);
        appendFrameTypes(true, paramInt2, paramArrayOfObject1);
        break;
      case 2:
        attributesImpl.addAttribute("", "type", "type", "", "CHOP");
        attributesImpl.addAttribute("", "count", "count", "", Integer.toString(paramInt2));
        this.sa.addStart("frame", attributesImpl);
        break;
      case 3:
        attributesImpl.addAttribute("", "type", "type", "", "SAME");
        this.sa.addStart("frame", attributesImpl);
        break;
      case 4:
        attributesImpl.addAttribute("", "type", "type", "", "SAME1");
        this.sa.addStart("frame", attributesImpl);
        appendFrameTypes(false, 1, paramArrayOfObject2);
        break;
    } 
    this.sa.addEnd("frame");
  }
  
  private void appendFrameTypes(boolean paramBoolean, int paramInt, Object[] paramArrayOfObject) {
    for (byte b = 0; b < paramInt; b++) {
      Object object = paramArrayOfObject[b];
      AttributesImpl attributesImpl = new AttributesImpl();
      if (object instanceof String) {
        attributesImpl.addAttribute("", "type", "type", "", (String)object);
      } else if (object instanceof Integer) {
        attributesImpl.addAttribute("", "type", "type", "", TYPES[((Integer)object).intValue()]);
      } else {
        attributesImpl.addAttribute("", "type", "type", "", "uninitialized");
        attributesImpl.addAttribute("", "label", "label", "", getLabel((Label)object));
      } 
      this.sa.addElement(paramBoolean ? "local" : "stack", attributesImpl);
    } 
  }
  
  public final void visitInsn(int paramInt) { this.sa.addElement(Printer.OPCODES[paramInt], new AttributesImpl()); }
  
  public final void visitIntInsn(int paramInt1, int paramInt2) {
    AttributesImpl attributesImpl = new AttributesImpl();
    attributesImpl.addAttribute("", "value", "value", "", Integer.toString(paramInt2));
    this.sa.addElement(Printer.OPCODES[paramInt1], attributesImpl);
  }
  
  public final void visitVarInsn(int paramInt1, int paramInt2) {
    AttributesImpl attributesImpl = new AttributesImpl();
    attributesImpl.addAttribute("", "var", "var", "", Integer.toString(paramInt2));
    this.sa.addElement(Printer.OPCODES[paramInt1], attributesImpl);
  }
  
  public final void visitTypeInsn(int paramInt, String paramString) {
    AttributesImpl attributesImpl = new AttributesImpl();
    attributesImpl.addAttribute("", "desc", "desc", "", paramString);
    this.sa.addElement(Printer.OPCODES[paramInt], attributesImpl);
  }
  
  public final void visitFieldInsn(int paramInt, String paramString1, String paramString2, String paramString3) {
    AttributesImpl attributesImpl = new AttributesImpl();
    attributesImpl.addAttribute("", "owner", "owner", "", paramString1);
    attributesImpl.addAttribute("", "name", "name", "", paramString2);
    attributesImpl.addAttribute("", "desc", "desc", "", paramString3);
    this.sa.addElement(Printer.OPCODES[paramInt], attributesImpl);
  }
  
  public final void visitMethodInsn(int paramInt, String paramString1, String paramString2, String paramString3) {
    AttributesImpl attributesImpl = new AttributesImpl();
    attributesImpl.addAttribute("", "owner", "owner", "", paramString1);
    attributesImpl.addAttribute("", "name", "name", "", paramString2);
    attributesImpl.addAttribute("", "desc", "desc", "", paramString3);
    this.sa.addElement(Printer.OPCODES[paramInt], attributesImpl);
  }
  
  public void visitInvokeDynamicInsn(String paramString1, String paramString2, Handle paramHandle, Object... paramVarArgs) {
    AttributesImpl attributesImpl = new AttributesImpl();
    attributesImpl.addAttribute("", "name", "name", "", paramString1);
    attributesImpl.addAttribute("", "desc", "desc", "", paramString2);
    attributesImpl.addAttribute("", "bsm", "bsm", "", SAXClassAdapter.encode(paramHandle.toString()));
    this.sa.addStart("INVOKEDYNAMIC", attributesImpl);
    for (byte b = 0; b < paramVarArgs.length; b++)
      this.sa.addElement("bsmArg", getConstantAttribute(paramVarArgs[b])); 
    this.sa.addEnd("INVOKEDYNAMIC");
  }
  
  public final void visitJumpInsn(int paramInt, Label paramLabel) {
    AttributesImpl attributesImpl = new AttributesImpl();
    attributesImpl.addAttribute("", "label", "label", "", getLabel(paramLabel));
    this.sa.addElement(Printer.OPCODES[paramInt], attributesImpl);
  }
  
  public final void visitLabel(Label paramLabel) {
    AttributesImpl attributesImpl = new AttributesImpl();
    attributesImpl.addAttribute("", "name", "name", "", getLabel(paramLabel));
    this.sa.addElement("Label", attributesImpl);
  }
  
  public final void visitLdcInsn(Object paramObject) { this.sa.addElement(Printer.OPCODES[18], getConstantAttribute(paramObject)); }
  
  private static AttributesImpl getConstantAttribute(Object paramObject) {
    AttributesImpl attributesImpl = new AttributesImpl();
    attributesImpl.addAttribute("", "cst", "cst", "", SAXClassAdapter.encode(paramObject.toString()));
    attributesImpl.addAttribute("", "desc", "desc", "", Type.getDescriptor(paramObject.getClass()));
    return attributesImpl;
  }
  
  public final void visitIincInsn(int paramInt1, int paramInt2) {
    AttributesImpl attributesImpl = new AttributesImpl();
    attributesImpl.addAttribute("", "var", "var", "", Integer.toString(paramInt1));
    attributesImpl.addAttribute("", "inc", "inc", "", Integer.toString(paramInt2));
    this.sa.addElement(Printer.OPCODES[132], attributesImpl);
  }
  
  public final void visitTableSwitchInsn(int paramInt1, int paramInt2, Label paramLabel, Label... paramVarArgs) {
    AttributesImpl attributesImpl = new AttributesImpl();
    attributesImpl.addAttribute("", "min", "min", "", Integer.toString(paramInt1));
    attributesImpl.addAttribute("", "max", "max", "", Integer.toString(paramInt2));
    attributesImpl.addAttribute("", "dflt", "dflt", "", getLabel(paramLabel));
    String str = Printer.OPCODES[170];
    this.sa.addStart(str, attributesImpl);
    for (byte b = 0; b < paramVarArgs.length; b++) {
      AttributesImpl attributesImpl1 = new AttributesImpl();
      attributesImpl1.addAttribute("", "name", "name", "", getLabel(paramVarArgs[b]));
      this.sa.addElement("label", attributesImpl1);
    } 
    this.sa.addEnd(str);
  }
  
  public final void visitLookupSwitchInsn(Label paramLabel, int[] paramArrayOfInt, Label[] paramArrayOfLabel) {
    AttributesImpl attributesImpl = new AttributesImpl();
    attributesImpl.addAttribute("", "dflt", "dflt", "", getLabel(paramLabel));
    String str = Printer.OPCODES[171];
    this.sa.addStart(str, attributesImpl);
    for (byte b = 0; b < paramArrayOfLabel.length; b++) {
      AttributesImpl attributesImpl1 = new AttributesImpl();
      attributesImpl1.addAttribute("", "name", "name", "", getLabel(paramArrayOfLabel[b]));
      attributesImpl1.addAttribute("", "key", "key", "", Integer.toString(paramArrayOfInt[b]));
      this.sa.addElement("label", attributesImpl1);
    } 
    this.sa.addEnd(str);
  }
  
  public final void visitMultiANewArrayInsn(String paramString, int paramInt) {
    AttributesImpl attributesImpl = new AttributesImpl();
    attributesImpl.addAttribute("", "desc", "desc", "", paramString);
    attributesImpl.addAttribute("", "dims", "dims", "", Integer.toString(paramInt));
    this.sa.addElement(Printer.OPCODES[197], attributesImpl);
  }
  
  public final void visitTryCatchBlock(Label paramLabel1, Label paramLabel2, Label paramLabel3, String paramString) {
    AttributesImpl attributesImpl = new AttributesImpl();
    attributesImpl.addAttribute("", "start", "start", "", getLabel(paramLabel1));
    attributesImpl.addAttribute("", "end", "end", "", getLabel(paramLabel2));
    attributesImpl.addAttribute("", "handler", "handler", "", getLabel(paramLabel3));
    if (paramString != null)
      attributesImpl.addAttribute("", "type", "type", "", paramString); 
    this.sa.addElement("TryCatch", attributesImpl);
  }
  
  public final void visitMaxs(int paramInt1, int paramInt2) {
    AttributesImpl attributesImpl = new AttributesImpl();
    attributesImpl.addAttribute("", "maxStack", "maxStack", "", Integer.toString(paramInt1));
    attributesImpl.addAttribute("", "maxLocals", "maxLocals", "", Integer.toString(paramInt2));
    this.sa.addElement("Max", attributesImpl);
    this.sa.addEnd("code");
  }
  
  public void visitLocalVariable(String paramString1, String paramString2, String paramString3, Label paramLabel1, Label paramLabel2, int paramInt) {
    AttributesImpl attributesImpl = new AttributesImpl();
    attributesImpl.addAttribute("", "name", "name", "", paramString1);
    attributesImpl.addAttribute("", "desc", "desc", "", paramString2);
    if (paramString3 != null)
      attributesImpl.addAttribute("", "signature", "signature", "", SAXClassAdapter.encode(paramString3)); 
    attributesImpl.addAttribute("", "start", "start", "", getLabel(paramLabel1));
    attributesImpl.addAttribute("", "end", "end", "", getLabel(paramLabel2));
    attributesImpl.addAttribute("", "var", "var", "", Integer.toString(paramInt));
    this.sa.addElement("LocalVar", attributesImpl);
  }
  
  public final void visitLineNumber(int paramInt, Label paramLabel) {
    AttributesImpl attributesImpl = new AttributesImpl();
    attributesImpl.addAttribute("", "line", "line", "", Integer.toString(paramInt));
    attributesImpl.addAttribute("", "start", "start", "", getLabel(paramLabel));
    this.sa.addElement("LineNumber", attributesImpl);
  }
  
  public AnnotationVisitor visitAnnotationDefault() { return new SAXAnnotationAdapter(this.sa, "annotationDefault", 0, null, null); }
  
  public AnnotationVisitor visitAnnotation(String paramString, boolean paramBoolean) { return new SAXAnnotationAdapter(this.sa, "annotation", paramBoolean ? 1 : -1, null, paramString); }
  
  public AnnotationVisitor visitParameterAnnotation(int paramInt, String paramString, boolean paramBoolean) { return new SAXAnnotationAdapter(this.sa, "parameterAnnotation", paramBoolean ? 1 : -1, paramInt, paramString); }
  
  public void visitEnd() { this.sa.addEnd("method"); }
  
  private final String getLabel(Label paramLabel) {
    String str = (String)this.labelNames.get(paramLabel);
    if (str == null) {
      str = Integer.toString(this.labelNames.size());
      this.labelNames.put(paramLabel, str);
    } 
    return str;
  }
}
