package org.objectweb.asm.xml;

import org.objectweb.asm.AnnotationVisitor;
import org.objectweb.asm.ClassVisitor;
import org.objectweb.asm.FieldVisitor;
import org.objectweb.asm.MethodVisitor;
import org.xml.sax.ContentHandler;
import org.xml.sax.helpers.AttributesImpl;

public final class SAXClassAdapter extends ClassVisitor {
  SAXAdapter sa;
  
  private final boolean singleDocument;
  
  public SAXClassAdapter(ContentHandler paramContentHandler, boolean paramBoolean) {
    super(262144);
    this.sa = new SAXAdapter(paramContentHandler);
    this.singleDocument = paramBoolean;
    if (!paramBoolean)
      this.sa.addDocumentStart(); 
  }
  
  public void visitSource(String paramString1, String paramString2) {
    AttributesImpl attributesImpl = new AttributesImpl();
    if (paramString1 != null)
      attributesImpl.addAttribute("", "file", "file", "", encode(paramString1)); 
    if (paramString2 != null)
      attributesImpl.addAttribute("", "debug", "debug", "", encode(paramString2)); 
    this.sa.addElement("source", attributesImpl);
  }
  
  public void visitOuterClass(String paramString1, String paramString2, String paramString3) {
    AttributesImpl attributesImpl = new AttributesImpl();
    attributesImpl.addAttribute("", "owner", "owner", "", paramString1);
    if (paramString2 != null)
      attributesImpl.addAttribute("", "name", "name", "", paramString2); 
    if (paramString3 != null)
      attributesImpl.addAttribute("", "desc", "desc", "", paramString3); 
    this.sa.addElement("outerclass", attributesImpl);
  }
  
  public AnnotationVisitor visitAnnotation(String paramString, boolean paramBoolean) { return new SAXAnnotationAdapter(this.sa, "annotation", paramBoolean ? 1 : -1, null, paramString); }
  
  public void visit(int paramInt1, int paramInt2, String paramString1, String paramString2, String paramString3, String[] paramArrayOfString) {
    StringBuffer stringBuffer = new StringBuffer();
    appendAccess(paramInt2 | 0x40000, stringBuffer);
    AttributesImpl attributesImpl = new AttributesImpl();
    attributesImpl.addAttribute("", "access", "access", "", stringBuffer.toString());
    if (paramString1 != null)
      attributesImpl.addAttribute("", "name", "name", "", paramString1); 
    if (paramString2 != null)
      attributesImpl.addAttribute("", "signature", "signature", "", encode(paramString2)); 
    if (paramString3 != null)
      attributesImpl.addAttribute("", "parent", "parent", "", paramString3); 
    attributesImpl.addAttribute("", "major", "major", "", Integer.toString(paramInt1 & 0xFFFF));
    attributesImpl.addAttribute("", "minor", "minor", "", Integer.toString(paramInt1 >>> 16));
    this.sa.addStart("class", attributesImpl);
    this.sa.addStart("interfaces", new AttributesImpl());
    if (paramArrayOfString != null && paramArrayOfString.length > 0)
      for (byte b = 0; b < paramArrayOfString.length; b++) {
        AttributesImpl attributesImpl1 = new AttributesImpl();
        attributesImpl1.addAttribute("", "name", "name", "", paramArrayOfString[b]);
        this.sa.addElement("interface", attributesImpl1);
      }  
    this.sa.addEnd("interfaces");
  }
  
  public FieldVisitor visitField(int paramInt, String paramString1, String paramString2, String paramString3, Object paramObject) {
    StringBuffer stringBuffer = new StringBuffer();
    appendAccess(paramInt | 0x80000, stringBuffer);
    AttributesImpl attributesImpl = new AttributesImpl();
    attributesImpl.addAttribute("", "access", "access", "", stringBuffer.toString());
    attributesImpl.addAttribute("", "name", "name", "", paramString1);
    attributesImpl.addAttribute("", "desc", "desc", "", paramString2);
    if (paramString3 != null)
      attributesImpl.addAttribute("", "signature", "signature", "", encode(paramString3)); 
    if (paramObject != null)
      attributesImpl.addAttribute("", "value", "value", "", encode(paramObject.toString())); 
    return new SAXFieldAdapter(this.sa, attributesImpl);
  }
  
  public MethodVisitor visitMethod(int paramInt, String paramString1, String paramString2, String paramString3, String[] paramArrayOfString) {
    StringBuffer stringBuffer = new StringBuffer();
    appendAccess(paramInt, stringBuffer);
    AttributesImpl attributesImpl = new AttributesImpl();
    attributesImpl.addAttribute("", "access", "access", "", stringBuffer.toString());
    attributesImpl.addAttribute("", "name", "name", "", paramString1);
    attributesImpl.addAttribute("", "desc", "desc", "", paramString2);
    if (paramString3 != null)
      attributesImpl.addAttribute("", "signature", "signature", "", paramString3); 
    this.sa.addStart("method", attributesImpl);
    this.sa.addStart("exceptions", new AttributesImpl());
    if (paramArrayOfString != null && paramArrayOfString.length > 0)
      for (byte b = 0; b < paramArrayOfString.length; b++) {
        AttributesImpl attributesImpl1 = new AttributesImpl();
        attributesImpl1.addAttribute("", "name", "name", "", paramArrayOfString[b]);
        this.sa.addElement("exception", attributesImpl1);
      }  
    this.sa.addEnd("exceptions");
    return new SAXCodeAdapter(this.sa, paramInt);
  }
  
  public final void visitInnerClass(String paramString1, String paramString2, String paramString3, int paramInt) {
    StringBuffer stringBuffer = new StringBuffer();
    appendAccess(paramInt | 0x100000, stringBuffer);
    AttributesImpl attributesImpl = new AttributesImpl();
    attributesImpl.addAttribute("", "access", "access", "", stringBuffer.toString());
    if (paramString1 != null)
      attributesImpl.addAttribute("", "name", "name", "", paramString1); 
    if (paramString2 != null)
      attributesImpl.addAttribute("", "outerName", "outerName", "", paramString2); 
    if (paramString3 != null)
      attributesImpl.addAttribute("", "innerName", "innerName", "", paramString3); 
    this.sa.addElement("innerclass", attributesImpl);
  }
  
  public final void visitEnd() {
    this.sa.addEnd("class");
    if (!this.singleDocument)
      this.sa.addDocumentEnd(); 
  }
  
  static final String encode(String paramString) {
    StringBuffer stringBuffer = new StringBuffer();
    for (byte b = 0; b < paramString.length(); b++) {
      char c = paramString.charAt(b);
      if (c == '\\') {
        stringBuffer.append("\\\\");
      } else if (c < ' ' || c > '') {
        stringBuffer.append("\\u");
        if (c < '\020') {
          stringBuffer.append("000");
        } else if (c < 'Ā') {
          stringBuffer.append("00");
        } else if (c < 'က') {
          stringBuffer.append('0');
        } 
        stringBuffer.append(Integer.toString(c, 16));
      } else {
        stringBuffer.append(c);
      } 
    } 
    return stringBuffer.toString();
  }
  
  static void appendAccess(int paramInt, StringBuffer paramStringBuffer) {
    if ((paramInt & true) != 0)
      paramStringBuffer.append("public "); 
    if ((paramInt & 0x2) != 0)
      paramStringBuffer.append("private "); 
    if ((paramInt & 0x4) != 0)
      paramStringBuffer.append("protected "); 
    if ((paramInt & 0x10) != 0)
      paramStringBuffer.append("final "); 
    if ((paramInt & 0x8) != 0)
      paramStringBuffer.append("static "); 
    if ((paramInt & 0x20) != 0)
      if ((paramInt & 0x40000) == 0) {
        paramStringBuffer.append("synchronized ");
      } else {
        paramStringBuffer.append("super ");
      }  
    if ((paramInt & 0x40) != 0)
      if ((paramInt & 0x80000) == 0) {
        paramStringBuffer.append("bridge ");
      } else {
        paramStringBuffer.append("volatile ");
      }  
    if ((paramInt & 0x80) != 0)
      if ((paramInt & 0x80000) == 0) {
        paramStringBuffer.append("varargs ");
      } else {
        paramStringBuffer.append("transient ");
      }  
    if ((paramInt & 0x100) != 0)
      paramStringBuffer.append("native "); 
    if ((paramInt & 0x800) != 0)
      paramStringBuffer.append("strict "); 
    if ((paramInt & 0x200) != 0)
      paramStringBuffer.append("interface "); 
    if ((paramInt & 0x400) != 0)
      paramStringBuffer.append("abstract "); 
    if ((paramInt & 0x1000) != 0)
      paramStringBuffer.append("synthetic "); 
    if ((paramInt & 0x2000) != 0)
      paramStringBuffer.append("annotation "); 
    if ((paramInt & 0x4000) != 0)
      paramStringBuffer.append("enum "); 
    if ((paramInt & 0x20000) != 0)
      paramStringBuffer.append("deprecated "); 
  }
}
