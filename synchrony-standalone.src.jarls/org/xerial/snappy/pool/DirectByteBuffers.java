package org.xerial.snappy.pool;

import java.lang.invoke.MethodHandle;
import java.nio.ByteBuffer;
import java.security.AccessController;
import java.util.logging.Level;
import java.util.logging.Logger;

final class DirectByteBuffers {
  static final Class<? extends ByteBuffer> DIRECT_BUFFER_CLAZZ = lookupClassQuietly("java.nio.DirectByteBuffer");
  
  static final MethodHandle CLEAN_HANDLE;
  
  static  {
    MethodHandle methodHandle = null;
    try {
      Object object = new Object();
      methodHandle = (MethodHandle)AccessController.doPrivileged(object);
    } catch (Throwable throwable) {
      Logger.getLogger(DirectByteBuffers.class.getName()).log(Level.FINE, "Exception occurred attempting to lookup Sun specific DirectByteBuffer cleaner classes.", throwable);
    } 
    CLEAN_HANDLE = methodHandle;
  }
  
  private static Class<?> lookupClassQuietly(String paramString) {
    try {
      return DirectByteBuffers.class.getClassLoader().loadClass(paramString);
    } catch (Throwable throwable) {
      Logger.getLogger(DirectByteBuffers.class.getName()).log(Level.FINE, "Did not find requested class: " + paramString, throwable);
      return null;
    } 
  }
  
  static boolean nonNull(Object paramObject) { return (paramObject != null); }
  
  public static void releaseDirectByteBuffer(ByteBuffer paramByteBuffer) {
    assert paramByteBuffer != null && paramByteBuffer.isDirect();
    if (CLEAN_HANDLE != null && DIRECT_BUFFER_CLAZZ.isInstance(paramByteBuffer))
      try {
        Object object = new Object(paramByteBuffer);
        AccessController.doPrivileged(object);
      } catch (Throwable throwable) {
        Logger.getLogger(DirectByteBuffers.class.getName()).log(Level.FINE, "Exception occurred attempting to clean up Sun specific DirectByteBuffer.", throwable);
      }  
  }
}
