package org.xerial.snappy;

import java.io.IOException;
import java.nio.ByteBuffer;

public class SnappyNative implements SnappyApi {
  public native String nativeLibraryVersion();
  
  public native long rawCompress(long paramLong1, long paramLong2, long paramLong3) throws IOException;
  
  public native long rawUncompress(long paramLong1, long paramLong2, long paramLong3) throws IOException;
  
  public native int rawCompress(ByteBuffer paramByteBuffer1, int paramInt1, int paramInt2, ByteBuffer paramByteBuffer2, int paramInt3) throws IOException;
  
  public native int rawCompress(Object paramObject1, int paramInt1, int paramInt2, Object paramObject2, int paramInt3) throws IOException;
  
  public native int rawUncompress(ByteBuffer paramByteBuffer1, int paramInt1, int paramInt2, ByteBuffer paramByteBuffer2, int paramInt3) throws IOException;
  
  public native int rawUncompress(Object paramObject1, int paramInt1, int paramInt2, Object paramObject2, int paramInt3) throws IOException;
  
  public native int maxCompressedLength(int paramInt);
  
  public native int uncompressedLength(ByteBuffer paramByteBuffer, int paramInt1, int paramInt2) throws IOException;
  
  public native int uncompressedLength(Object paramObject, int paramInt1, int paramInt2) throws IOException;
  
  public native long uncompressedLength(long paramLong1, long paramLong2) throws IOException;
  
  public native boolean isValidCompressedBuffer(ByteBuffer paramByteBuffer, int paramInt1, int paramInt2) throws IOException;
  
  public native boolean isValidCompressedBuffer(Object paramObject, int paramInt1, int paramInt2) throws IOException;
  
  public native boolean isValidCompressedBuffer(long paramLong1, long paramLong2, long paramLong3) throws IOException;
  
  public native void arrayCopy(Object paramObject1, int paramInt1, int paramInt2, Object paramObject2, int paramInt3) throws IOException;
  
  public void throw_error(int paramInt) throws IOException { throw new IOException(String.format("%s(%d)", new Object[] { SnappyErrorCode.getErrorMessage(paramInt), Integer.valueOf(paramInt) })); }
}
