package org.xerial.snappy;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.Enumeration;
import java.util.Properties;
import java.util.UUID;
import org.xerial.snappy.pure.PureJavaSnappy;

public class SnappyLoader {
  public static final String SNAPPY_SYSTEM_PROPERTIES_FILE = "org-xerial-snappy.properties";
  
  public static final String KEY_SNAPPY_LIB_PATH = "org.xerial.snappy.lib.path";
  
  public static final String KEY_SNAPPY_LIB_NAME = "org.xerial.snappy.lib.name";
  
  public static final String KEY_SNAPPY_PUREJAVA = "org.xerial.snappy.purejava";
  
  public static final String KEY_SNAPPY_TEMPDIR = "org.xerial.snappy.tempdir";
  
  public static final String KEY_SNAPPY_USE_SYSTEMLIB = "org.xerial.snappy.use.systemlib";
  
  public static final String KEY_SNAPPY_DISABLE_BUNDLED_LIBS = "org.xerial.snappy.disable.bundled.libs";
  
  private static boolean isLoaded = false;
  
  private static File nativeLibFile = null;
  
  static void cleanUpExtractedNativeLib() {
    if (nativeLibFile != null && nativeLibFile.exists()) {
      boolean bool = nativeLibFile.delete();
      if (!bool);
      snappyApi = null;
      bitshuffleApi = null;
    } 
  }
  
  static void setSnappyApi(SnappyApi paramSnappyApi) { snappyApi = paramSnappyApi; }
  
  private static void loadSnappySystemProperties() {
    try {
      InputStream inputStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("org-xerial-snappy.properties");
      if (inputStream == null)
        return; 
      Properties properties = new Properties();
      properties.load(inputStream);
      inputStream.close();
      Enumeration enumeration = properties.propertyNames();
      while (enumeration.hasMoreElements()) {
        String str = (String)enumeration.nextElement();
        if (str.startsWith("org.xerial.snappy.") && 
          System.getProperty(str) == null)
          System.setProperty(str, properties.getProperty(str)); 
      } 
    } catch (Throwable throwable) {
      System.err.println("Could not load 'org-xerial-snappy.properties' from classpath: " + throwable
          .toString());
    } 
  }
  
  static  {
    loadSnappySystemProperties();
  }
  
  static boolean isPureJava() { return (snappyApi != null && PureJavaSnappy.class.isAssignableFrom(snappyApi.getClass())); }
  
  static SnappyApi loadSnappyApi() {
    if (snappyApi != null)
      return snappyApi; 
    try {
      if (Boolean.parseBoolean(System.getProperty("org.xerial.snappy.purejava", "false"))) {
        setSnappyApi(new PureJavaSnappy());
      } else {
        loadNativeLibrary();
        setSnappyApi(new SnappyNative());
      } 
    } catch (Throwable throwable) {
      setSnappyApi(new PureJavaSnappy());
    } 
    return snappyApi;
  }
  
  static BitShuffleNative loadBitShuffleApi() {
    if (bitshuffleApi != null)
      return bitshuffleApi; 
    loadNativeLibrary();
    bitshuffleApi = new BitShuffleNative();
    return bitshuffleApi;
  }
  
  private static void loadNativeLibrary() {
    if (!isLoaded) {
      try {
        nativeLibFile = findNativeLibrary();
        if (nativeLibFile != null) {
          System.load(nativeLibFile.getAbsolutePath());
        } else {
          System.loadLibrary("snappyjava");
        } 
      } catch (Exception exception) {
        exception.printStackTrace();
        throw new SnappyError(SnappyErrorCode.FAILED_TO_LOAD_NATIVE_LIBRARY, exception.getMessage());
      } 
      isLoaded = true;
    } 
  }
  
  private static boolean contentsEquals(InputStream paramInputStream1, InputStream paramInputStream2) throws IOException {
    if (!(paramInputStream1 instanceof BufferedInputStream))
      paramInputStream1 = new BufferedInputStream(paramInputStream1); 
    if (!(paramInputStream2 instanceof BufferedInputStream))
      paramInputStream2 = new BufferedInputStream(paramInputStream2); 
    int i = paramInputStream1.read();
    while (i != -1) {
      int k = paramInputStream2.read();
      if (i != k)
        return false; 
      i = paramInputStream1.read();
    } 
    int j = paramInputStream2.read();
    return (j == -1);
  }
  
  private static File extractLibraryFile(String paramString1, String paramString2, String paramString3) {
    String str1 = paramString1 + "/" + paramString2;
    String str2 = UUID.randomUUID().toString();
    String str3 = String.format("snappy-%s-%s-%s", new Object[] { getVersion(), str2, paramString2 });
    file = new File(paramString3, str3);
    try {
      inputStream1 = null;
      fileOutputStream = null;
      try {
        inputStream1 = SnappyLoader.class.getResourceAsStream(str1);
        try {
          fileOutputStream = new FileOutputStream(file);
          byte[] arrayOfByte = new byte[8192];
          int i = 0;
          while ((i = inputStream1.read(arrayOfByte)) != -1)
            fileOutputStream.write(arrayOfByte, 0, i); 
        } finally {
          if (fileOutputStream != null)
            fileOutputStream.close(); 
        } 
      } finally {
        if (inputStream1 != null)
          inputStream1.close(); 
        file.deleteOnExit();
      } 
      boolean bool = (file.setReadable(true) && file.setWritable(true, true) && file.setExecutable(true)) ? 1 : 0;
      if (!bool);
      inputStream2 = null;
      fileInputStream = null;
      try {
        inputStream2 = SnappyLoader.class.getResourceAsStream(str1);
        fileInputStream = new FileInputStream(file);
        if (!contentsEquals(inputStream2, fileInputStream))
          throw new SnappyError(SnappyErrorCode.FAILED_TO_LOAD_NATIVE_LIBRARY, String.format("Failed to write a native library file at %s", new Object[] { file })); 
      } finally {
        if (inputStream2 != null)
          inputStream2.close(); 
        if (fileInputStream != null)
          fileInputStream.close(); 
      } 
      return new File(paramString3, str3);
    } catch (IOException iOException) {
      iOException.printStackTrace(System.err);
      return null;
    } 
  }
  
  static File findNativeLibrary() {
    boolean bool1 = Boolean.parseBoolean(System.getProperty("org.xerial.snappy.use.systemlib", "false"));
    boolean bool2 = Boolean.parseBoolean(System.getProperty("org.xerial.snappy.disable.bundled.libs", "false"));
    if (bool1 || bool2)
      return null; 
    String str1 = System.getProperty("org.xerial.snappy.lib.path");
    String str2 = System.getProperty("org.xerial.snappy.lib.name");
    if (str2 == null)
      str2 = System.mapLibraryName("snappyjava"); 
    if (str1 != null) {
      File file1 = new File(str1, str2);
      if (file1.exists())
        return file1; 
    } 
    str1 = "/org/xerial/snappy/native/" + OSInfo.getNativeLibFolderPathForCurrentOS();
    boolean bool3 = hasResource(str1 + "/" + str2);
    if (!bool3 && 
      OSInfo.getOSName().equals("Mac")) {
      String str = "libsnappyjava.dylib";
      if (hasResource(str1 + "/" + str)) {
        str2 = str;
        bool3 = true;
      } 
    } 
    if (!bool3) {
      String str = String.format("no native library is found for os.name=%s and os.arch=%s", new Object[] { OSInfo.getOSName(), OSInfo.getArchName() });
      throw new SnappyError(SnappyErrorCode.FAILED_TO_LOAD_NATIVE_LIBRARY, str);
    } 
    File file = new File(System.getProperty("org.xerial.snappy.tempdir", System.getProperty("java.io.tmpdir")));
    if (!file.exists()) {
      boolean bool = file.mkdirs();
      if (!bool);
    } 
    return extractLibraryFile(str1, str2, file.getAbsolutePath());
  }
  
  private static boolean hasResource(String paramString) { return (SnappyLoader.class.getResource(paramString) != null); }
  
  public static String getVersion() {
    URL uRL = SnappyLoader.class.getResource("/META-INF/maven/org.xerial.snappy/snappy-java/pom.properties");
    if (uRL == null)
      uRL = SnappyLoader.class.getResource("/org/xerial/snappy/VERSION"); 
    String str = "unknown";
    try {
      if (uRL != null) {
        Properties properties = new Properties();
        properties.load(uRL.openStream());
        str = properties.getProperty("version", str);
        if (str.equals("unknown"))
          str = properties.getProperty("SNAPPY_VERSION", str); 
        str = str.trim().replaceAll("[^0-9M\\.]", "");
      } 
    } catch (IOException iOException) {
      System.err.println(iOException);
    } 
    return str;
  }
}
