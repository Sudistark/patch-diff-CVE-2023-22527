package org.xerial.snappy;

import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Arrays;

public class SnappyCodec {
  static final byte[] MAGIC_HEADER = { -126, 83, 78, 65, 80, 80, 89, 0 };
  
  public static final int MAGIC_LEN = MAGIC_HEADER.length;
  
  public static final int HEADER_SIZE = MAGIC_LEN + 8;
  
  public static final int MAGIC_HEADER_HEAD = SnappyOutputStream.readInt(MAGIC_HEADER, 0);
  
  public static final int DEFAULT_VERSION = 1;
  
  public static final int MINIMUM_COMPATIBLE_VERSION = 1;
  
  public static final SnappyCodec currentHeader;
  
  public final byte[] magic;
  
  public final int version;
  
  public final int compatibleVersion;
  
  private final byte[] headerArray;
  
  static  {
    assert MAGIC_HEADER_HEAD < 0;
    currentHeader = new SnappyCodec(MAGIC_HEADER, 1, 1);
  }
  
  private SnappyCodec(byte[] paramArrayOfByte, int paramInt1, int paramInt2) {
    this.magic = paramArrayOfByte;
    this.version = paramInt1;
    this.compatibleVersion = paramInt2;
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(HEADER_SIZE);
    DataOutputStream dataOutputStream = new DataOutputStream(byteArrayOutputStream);
    try {
      dataOutputStream.write(paramArrayOfByte, 0, MAGIC_LEN);
      dataOutputStream.writeInt(paramInt1);
      dataOutputStream.writeInt(paramInt2);
      dataOutputStream.close();
    } catch (IOException iOException) {
      throw new RuntimeException(iOException);
    } 
    this.headerArray = byteArrayOutputStream.toByteArray();
  }
  
  public static byte[] getMagicHeader() { return (byte[])MAGIC_HEADER.clone(); }
  
  public String toString() { return String.format("version:%d, compatible version:%d", new Object[] { Integer.valueOf(this.version), Integer.valueOf(this.compatibleVersion) }); }
  
  public static int headerSize() { return HEADER_SIZE; }
  
  public int writeHeader(byte[] paramArrayOfByte, int paramInt) {
    System.arraycopy(this.headerArray, 0, paramArrayOfByte, paramInt, this.headerArray.length);
    return this.headerArray.length;
  }
  
  public int writeHeader(OutputStream paramOutputStream) throws IOException {
    paramOutputStream.write(this.headerArray, 0, this.headerArray.length);
    return this.headerArray.length;
  }
  
  public boolean isValidMagicHeader() { return Arrays.equals(MAGIC_HEADER, this.magic); }
  
  public static boolean hasMagicHeaderPrefix(byte[] paramArrayOfByte) {
    int i = Math.min(MAGIC_LEN, paramArrayOfByte.length);
    byte b = 0;
    while (b < i) {
      if (paramArrayOfByte[b] != MAGIC_HEADER[b])
        return false; 
      b++;
    } 
    return true;
  }
  
  public static SnappyCodec readHeader(InputStream paramInputStream) throws IOException {
    DataInputStream dataInputStream = new DataInputStream(paramInputStream);
    byte[] arrayOfByte = new byte[MAGIC_LEN];
    dataInputStream.readFully(arrayOfByte, 0, MAGIC_LEN);
    int i = dataInputStream.readInt();
    int j = dataInputStream.readInt();
    return new SnappyCodec(arrayOfByte, i, j);
  }
}
