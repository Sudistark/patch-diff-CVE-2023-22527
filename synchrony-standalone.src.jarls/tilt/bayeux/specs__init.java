package tilt.bayeux;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class specs__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final Keyword const__4;
  
  public static final AFn const__5;
  
  public static final Var const__6;
  
  public static final Keyword const__7;
  
  public static final AFn const__8;
  
  public static final Var const__9;
  
  public static final Keyword const__10;
  
  public static final AFn const__11;
  
  public static final Keyword const__12;
  
  public static final AFn const__13;
  
  public static final Var const__14;
  
  public static final Keyword const__15;
  
  public static final AFn const__16;
  
  public static final Keyword const__17;
  
  public static final Keyword const__18;
  
  public static final Keyword const__19;
  
  public static final Keyword const__20;
  
  public static final Keyword const__21;
  
  public static final AFn const__22;
  
  public static final Var const__23;
  
  public static final Keyword const__24;
  
  public static final Keyword const__25;
  
  public static final Keyword const__26;
  
  public static final Keyword const__27;
  
  public static final Object const__28;
  
  public static final Var const__29;
  
  public static final Keyword const__30;
  
  public static final AFn const__31;
  
  public static final Keyword const__32;
  
  public static final Keyword const__33;
  
  public static final Keyword const__34;
  
  public static final Keyword const__35;
  
  public static final Keyword const__36;
  
  public static final Keyword const__37;
  
  public static final AFn const__38;
  
  public static final Keyword const__39;
  
  public static final Keyword const__40;
  
  public static final AFn const__41;
  
  public static final Keyword const__42;
  
  public static final Keyword const__43;
  
  public static final AFn const__44;
  
  public static final Keyword const__45;
  
  public static final Keyword const__46;
  
  public static final Keyword const__47;
  
  public static final Keyword const__48;
  
  public static final Keyword const__49;
  
  public static final Keyword const__50;
  
  public static final AFn const__51;
  
  public static final Var const__52;
  
  public static final Keyword const__53;
  
  public static final Object const__54;
  
  public static final AFn const__55;
  
  public static final AFn const__56;
  
  public static final AFn const__57;
  
  public static final AFn const__58;
  
  public static final Keyword const__59;
  
  public static final AFn const__60;
  
  public static final Var const__61;
  
  public static final Keyword const__62;
  
  public static final AFn const__63;
  
  public static final Keyword const__64;
  
  public static final AFn const__65;
  
  public static final Keyword const__66;
  
  public static final Object const__67;
  
  public static final AFn const__68;
  
  public static final AFn const__69;
  
  public static final AFn const__70;
  
  public static final AFn const__71;
  
  public static final AFn const__72;
  
  public static final ISeq const__73;
  
  public static final Var const__74;
  
  public static final Var const__75;
  
  public static final Object const__76;
  
  public static final Var const__77;
  
  public static final AFn const__79;
  
  public static final Var const__80;
  
  public static final AFn const__81;
  
  public static final Object const__82;
  
  public static final AFn const__83;
  
  public static final ISeq const__84;
  
  public static final Object const__85;
  
  public static final AFn const__86;
  
  public static final AFn const__87;
  
  public static final Object const__88;
  
  public static final AFn const__89;
  
  public static final ISeq const__90;
  
  public static final Object const__91;
  
  public static final AFn const__92;
  
  public static final AFn const__93;
  
  public static final Object const__94;
  
  public static final AFn const__95;
  
  public static final ISeq const__96;
  
  public static final Object const__97;
  
  public static final AFn const__99;
  
  public static final AFn const__100;
  
  public static final AFn const__101;
  
  public static final Object const__102;
  
  public static final AFn const__103;
  
  public static final AFn const__104;
  
  public static void load() { LockingTransaction.runInTransaction((Callable)new specs.fn__66951()); }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "tilt.bayeux.specs");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("clojure.spec.alpha", "def-impl");
    const__4 = (Keyword)RT.keyword("tilt.bayeux.specs", "timeout-fn");
    const__5 = (AFn)Symbol.intern("clojure.core", "fn?");
    const__6 = (Var)RT.var("clojure.core", "fn?");
    const__7 = (Keyword)RT.keyword("tilt.bayeux.specs", "ms");
    const__8 = (AFn)Symbol.intern("clojure.core", "integer?");
    const__9 = (Var)RT.var("clojure.core", "integer?");
    const__10 = (Keyword)RT.keyword("tilt.bayeux.specs", "buf-size");
    const__11 = (AFn)Symbol.intern("clojure.core", "integer?");
    const__12 = (Keyword)RT.keyword("tilt.bayeux.specs", "messages-chan");
    const__13 = (AFn)Symbol.intern("tilt.utils", "chan?");
    const__14 = (Var)RT.var("tilt.utils", "chan?");
    const__15 = (Keyword)RT.keyword("tilt.bayeux.specs", "requests-chan");
    const__16 = (AFn)Symbol.intern("tilt.utils", "chan?");
    const__17 = (Keyword)RT.keyword("tilt.bayeux.specs", "wait-timeout-ms");
    const__18 = (Keyword)RT.keyword("tilt.bayeux.specs", "wait-timeout");
    const__19 = (Keyword)RT.keyword("tilt.bayeux.specs", "inactive-timeout-ms");
    const__20 = (Keyword)RT.keyword("tilt.bayeux.specs", "inactive-timeout");
    const__21 = (Keyword)RT.keyword("tilt.bayeux.specs", "only-meat-connect-delivery");
    const__22 = (AFn)Symbol.intern("clojure.core", "boolean?");
    const__23 = (Var)RT.var("clojure.core", "boolean?");
    const__24 = (Keyword)RT.keyword("tilt.bayeux.specs", "up-buf-size");
    const__25 = (Keyword)RT.keyword("tilt.bayeux.specs", "down-buf-size");
    const__26 = (Keyword)RT.keyword("tilt.bayeux.specs", "requests-buf-size");
    const__27 = (Keyword)RT.keyword("tilt.bayeux.specs", "session-config");
    const__28 = PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "keys"), RT.keyword(null, "req-un"), RT.vector(new Object[] { RT.keyword("tilt.bayeux.specs", "wait-timeout-ms"), RT.keyword("tilt.bayeux.specs", "wait-timeout"), RT.keyword("tilt.bayeux.specs", "inactive-timeout-ms"), RT.keyword("tilt.bayeux.specs", "inactive-timeout"), RT.keyword("tilt.bayeux.specs", "only-meta-connect-delivery"), RT.keyword("tilt.bayeux.specs", "up-buf-size"), RT.keyword("tilt.bayeux.specs", "down-buf-size"), RT.keyword("tilt.bayeux.specs", "requests-buf-size") }) }));
    const__29 = (Var)RT.var("clojure.spec.alpha", "map-spec-impl");
    const__30 = (Keyword)RT.keyword(null, "req-un");
    const__31 = (AFn)RT.vector(new Object[] { RT.keyword("tilt.bayeux.specs", "wait-timeout-ms"), RT.keyword("tilt.bayeux.specs", "wait-timeout"), RT.keyword("tilt.bayeux.specs", "inactive-timeout-ms"), RT.keyword("tilt.bayeux.specs", "inactive-timeout"), RT.keyword("tilt.bayeux.specs", "only-meta-connect-delivery"), RT.keyword("tilt.bayeux.specs", "up-buf-size"), RT.keyword("tilt.bayeux.specs", "down-buf-size"), RT.keyword("tilt.bayeux.specs", "requests-buf-size") });
    const__32 = (Keyword)RT.keyword(null, "opt-un");
    const__33 = (Keyword)RT.keyword(null, "gfn");
    const__34 = (Keyword)RT.keyword(null, "pred-exprs");
    const__35 = (Keyword)RT.keyword(null, "keys-pred");
    const__36 = (Keyword)RT.keyword(null, "opt-keys");
    const__37 = (Keyword)RT.keyword(null, "req-specs");
    const__38 = (AFn)RT.vector(new Object[] { RT.keyword("tilt.bayeux.specs", "wait-timeout-ms"), RT.keyword("tilt.bayeux.specs", "wait-timeout"), RT.keyword("tilt.bayeux.specs", "inactive-timeout-ms"), RT.keyword("tilt.bayeux.specs", "inactive-timeout"), RT.keyword("tilt.bayeux.specs", "only-meta-connect-delivery"), RT.keyword("tilt.bayeux.specs", "up-buf-size"), RT.keyword("tilt.bayeux.specs", "down-buf-size"), RT.keyword("tilt.bayeux.specs", "requests-buf-size") });
    const__39 = (Keyword)RT.keyword(null, "req");
    const__40 = (Keyword)RT.keyword(null, "req-keys");
    const__41 = (AFn)RT.vector(new Object[] { RT.keyword(null, "wait-timeout-ms"), RT.keyword(null, "wait-timeout"), RT.keyword(null, "inactive-timeout-ms"), RT.keyword(null, "inactive-timeout"), RT.keyword(null, "only-meta-connect-delivery"), RT.keyword(null, "up-buf-size"), RT.keyword(null, "down-buf-size"), RT.keyword(null, "requests-buf-size") });
    const__42 = (Keyword)RT.keyword(null, "opt-specs");
    const__43 = (Keyword)RT.keyword(null, "pred-forms");
    const__44 = (AFn)RT.vector(new Object[] { PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "map?"), Symbol.intern(null, "%") })) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "contains?"), Symbol.intern(null, "%"), RT.keyword(null, "wait-timeout-ms") })) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "contains?"), Symbol.intern(null, "%"), RT.keyword(null, "wait-timeout") })) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "contains?"), Symbol.intern(null, "%"), RT.keyword(null, "inactive-timeout-ms") })) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "contains?"), Symbol.intern(null, "%"), RT.keyword(null, "inactive-timeout") })) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "contains?"), Symbol.intern(null, "%"), RT.keyword(null, "only-meta-connect-delivery") })) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "contains?"), Symbol.intern(null, "%"), RT.keyword(null, "up-buf-size") })) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "contains?"), Symbol.intern(null, "%"), RT.keyword(null, "down-buf-size") })) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "contains?"), Symbol.intern(null, "%"), RT.keyword(null, "requests-buf-size") })) })) });
    const__45 = (Keyword)RT.keyword(null, "opt");
    const__46 = (Keyword)RT.keyword("tilt.bayeux.specs", "up");
    const__47 = (Keyword)RT.keyword("tilt.bayeux.specs", "down");
    const__48 = (Keyword)RT.keyword("tilt.bayeux.specs", "poll");
    const__49 = (Keyword)RT.keyword("tilt.bayeux.specs", "requests");
    const__50 = (Keyword)RT.keyword("tilt.bayeux.specs", "client-id");
    const__51 = (AFn)Symbol.intern("clojure.core", "string?");
    const__52 = (Var)RT.var("clojure.core", "string?");
    const__53 = (Keyword)RT.keyword("tilt.bayeux.specs", "session");
    const__54 = PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "keys"), RT.keyword(null, "req-un"), Tuple.create(RT.keyword("tilt.bayeux.specs", "up"), RT.keyword("tilt.bayeux.specs", "down"), RT.keyword("tilt.bayeux.specs", "poll"), RT.keyword("tilt.bayeux.specs", "requests"), RT.keyword("tilt.bayeux.specs", "client-id"), RT.keyword("tilt.bayeux.specs", "session-config")) }));
    const__55 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.specs", "up"), RT.keyword("tilt.bayeux.specs", "down"), RT.keyword("tilt.bayeux.specs", "poll"), RT.keyword("tilt.bayeux.specs", "requests"), RT.keyword("tilt.bayeux.specs", "client-id"), RT.keyword("tilt.bayeux.specs", "session-config"));
    const__56 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.specs", "up"), RT.keyword("tilt.bayeux.specs", "down"), RT.keyword("tilt.bayeux.specs", "poll"), RT.keyword("tilt.bayeux.specs", "requests"), RT.keyword("tilt.bayeux.specs", "client-id"), RT.keyword("tilt.bayeux.specs", "session-config"));
    const__57 = (AFn)Tuple.create(RT.keyword(null, "up"), RT.keyword(null, "down"), RT.keyword(null, "poll"), RT.keyword(null, "requests"), RT.keyword(null, "client-id"), RT.keyword(null, "session-config"));
    const__58 = (AFn)RT.vector(new Object[] { PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "map?"), Symbol.intern(null, "%") })) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "contains?"), Symbol.intern(null, "%"), RT.keyword(null, "up") })) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "contains?"), Symbol.intern(null, "%"), RT.keyword(null, "down") })) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "contains?"), Symbol.intern(null, "%"), RT.keyword(null, "poll") })) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "contains?"), Symbol.intern(null, "%"), RT.keyword(null, "requests") })) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "contains?"), Symbol.intern(null, "%"), RT.keyword(null, "client-id") })) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "contains?"), Symbol.intern(null, "%"), RT.keyword(null, "session-config") })) })) });
    const__59 = (Keyword)RT.keyword("tilt.bayeux.specs", "sessions-ref");
    const__60 = (AFn)Symbol.intern("tilt.utils", "atom?");
    const__61 = (Var)RT.var("tilt.utils", "atom?");
    const__62 = (Keyword)RT.keyword("tilt.bayeux.specs", "max-sessions");
    const__63 = (AFn)Symbol.intern("clojure.core", "integer?");
    const__64 = (Keyword)RT.keyword("tilt.bayeux.specs", "accept");
    const__65 = (AFn)Symbol.intern("clojure.core", "fn?");
    const__66 = (Keyword)RT.keyword("tilt.bayeux.specs", "server");
    const__67 = PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "keys"), RT.keyword(null, "req-un"), Tuple.create(RT.keyword("tilt.bayeux.specs", "accept"), RT.keyword("tilt.bayeux.specs", "max-sessions"), RT.keyword("tilt.bayeux.specs", "sessions-ref")) }));
    const__68 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.specs", "accept"), RT.keyword("tilt.bayeux.specs", "max-sessions"), RT.keyword("tilt.bayeux.specs", "sessions-ref"));
    const__69 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.specs", "accept"), RT.keyword("tilt.bayeux.specs", "max-sessions"), RT.keyword("tilt.bayeux.specs", "sessions-ref"));
    const__70 = (AFn)Tuple.create(RT.keyword(null, "accept"), RT.keyword(null, "max-sessions"), RT.keyword(null, "sessions-ref"));
    const__71 = (AFn)Tuple.create(PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "map?"), Symbol.intern(null, "%") })) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "contains?"), Symbol.intern(null, "%"), RT.keyword(null, "accept") })) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "contains?"), Symbol.intern(null, "%"), RT.keyword(null, "max-sessions") })) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "contains?"), Symbol.intern(null, "%"), RT.keyword(null, "sessions-ref") })) })));
    const__72 = (AFn)Symbol.intern("tilt.bayeux.specs", "session-config");
    const__73 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "fspec"), RT.keyword(null, "args"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "cat"), RT.keyword(null, "opts"), Symbol.intern("clojure.core", "map?") })), RT.keyword(null, "ret"), RT.keyword("tilt.bayeux.specs", "session-config") }));
    const__74 = (Var)RT.var("clojure.spec.alpha", "fspec-impl");
    const__75 = (Var)RT.var("clojure.spec.alpha", "spec-impl");
    const__76 = PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "cat"), RT.keyword(null, "opts"), Symbol.intern("clojure.core", "map?") }));
    const__77 = (Var)RT.var("clojure.spec.alpha", "cat-impl");
    const__79 = (AFn)Tuple.create(RT.keyword(null, "opts"));
    const__80 = (Var)RT.var("clojure.core", "map?");
    const__81 = (AFn)Tuple.create(Symbol.intern("clojure.core", "map?"));
    const__82 = PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "cat"), RT.keyword(null, "opts"), Symbol.intern("clojure.core", "map?") }));
    const__83 = (AFn)Symbol.intern("tilt.bayeux.specs", "session");
    const__84 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "fspec"), RT.keyword(null, "args"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "cat"), RT.keyword(null, "opts"), Symbol.intern("clojure.core", "map?") })), RT.keyword(null, "ret"), RT.keyword("tilt.bayeux.specs", "session") }));
    const__85 = PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "cat"), RT.keyword(null, "opts"), Symbol.intern("clojure.core", "map?") }));
    const__86 = (AFn)Tuple.create(RT.keyword(null, "opts"));
    const__87 = (AFn)Tuple.create(Symbol.intern("clojure.core", "map?"));
    const__88 = PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "cat"), RT.keyword(null, "opts"), Symbol.intern("clojure.core", "map?") }));
    const__89 = (AFn)Symbol.intern("tilt.bayeux.specs", "server");
    const__90 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "fspec"), RT.keyword(null, "args"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "cat"), RT.keyword(null, "opts"), Symbol.intern("clojure.core", "map?") })), RT.keyword(null, "ret"), RT.keyword("tilt.bayeux.specs", "server") }));
    const__91 = PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "cat"), RT.keyword(null, "opts"), Symbol.intern("clojure.core", "map?") }));
    const__92 = (AFn)Tuple.create(RT.keyword(null, "opts"));
    const__93 = (AFn)Tuple.create(Symbol.intern("clojure.core", "map?"));
    const__94 = PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "cat"), RT.keyword(null, "opts"), Symbol.intern("clojure.core", "map?") }));
    const__95 = (AFn)Symbol.intern("tilt.bayeux.specs", "run-session");
    const__96 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "fspec"), RT.keyword(null, "args"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "cat"), RT.keyword(null, "session"), RT.keyword("tilt.bayeux.specs", "session") })), RT.keyword(null, "ret"), Symbol.intern("tilt.utils", "chan?") }));
    const__97 = PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "cat"), RT.keyword(null, "session"), RT.keyword("tilt.bayeux.specs", "session") }));
    const__99 = (AFn)Tuple.create(RT.keyword(null, "session"));
  }
  
  public static void __init1() {
    const__100 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.specs", "session"));
    const__101 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.specs", "session"));
    const__102 = PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "cat"), RT.keyword(null, "session"), RT.keyword("tilt.bayeux.specs", "session") }));
    const__103 = (AFn)Symbol.intern("tilt.utils", "chan?");
    const__104 = (AFn)Symbol.intern("tilt.utils", "chan?");
  }
  
  static  {
    __init0();
    __init1();
    Compiler.pushNSandLoader(RT.classForName("tilt.bayeux.specs__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
