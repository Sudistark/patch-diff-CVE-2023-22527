package tilt.bayeux;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IPersistentMap;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentHashSet;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class protocol__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__11;
  
  public static final Var const__12;
  
  public static final AFn const__15;
  
  public static final Var const__16;
  
  public static final AFn const__19;
  
  public static final Var const__20;
  
  public static final AFn const__23;
  
  public static final Var const__24;
  
  public static final AFn const__27;
  
  public static final Var const__28;
  
  public static final AFn const__31;
  
  public static final Var const__32;
  
  public static final AFn const__35;
  
  public static final Var const__36;
  
  public static final AFn const__39;
  
  public static final Var const__40;
  
  public static final AFn const__43;
  
  public static final Var const__44;
  
  public static final AFn const__47;
  
  public static final Var const__48;
  
  public static final AFn const__51;
  
  public static final Var const__52;
  
  public static final AFn const__55;
  
  public static final Var const__56;
  
  public static final AFn const__59;
  
  public static final Var const__60;
  
  public static final AFn const__63;
  
  public static final Var const__64;
  
  public static final Keyword const__65;
  
  public static final AFn const__66;
  
  public static final Var const__67;
  
  public static final Keyword const__68;
  
  public static final AFn const__69;
  
  public static final Keyword const__70;
  
  public static final AFn const__71;
  
  public static final Keyword const__72;
  
  public static final Object const__73;
  
  public static final Var const__74;
  
  public static final AFn const__75;
  
  public static final Keyword const__76;
  
  public static final Object const__77;
  
  public static final Keyword const__78;
  
  public static final Keyword const__79;
  
  public static final Keyword const__80;
  
  public static final Keyword const__81;
  
  public static final AFn const__82;
  
  public static final Keyword const__83;
  
  public static final AFn const__84;
  
  public static final Keyword const__85;
  
  public static final AFn const__86;
  
  public static final Keyword const__87;
  
  public static final AFn const__88;
  
  public static final Keyword const__89;
  
  public static final AFn const__90;
  
  public static final Var const__91;
  
  public static final Keyword const__92;
  
  public static final AFn const__93;
  
  public static final Var const__94;
  
  public static final Keyword const__95;
  
  public static final Object const__96;
  
  public static final Var const__97;
  
  public static final AFn const__100;
  
  public static final AFn const__101;
  
  public static final AFn const__102;
  
  public static final Object const__103;
  
  public static final Keyword const__104;
  
  public static final AFn const__105;
  
  public static final Keyword const__106;
  
  public static final AFn const__107;
  
  public static final Var const__108;
  
  public static final Keyword const__109;
  
  public static final AFn const__110;
  
  public static final Var const__111;
  
  public static final Keyword const__112;
  
  public static final AFn const__113;
  
  public static final Keyword const__114;
  
  public static final Object const__115;
  
  public static final AFn const__116;
  
  public static final Object const__117;
  
  public static final Keyword const__118;
  
  public static final AFn const__119;
  
  public static final Keyword const__120;
  
  public static final AFn const__121;
  
  public static final AFn const__122;
  
  public static final Keyword const__123;
  
  public static final Object const__124;
  
  public static final Var const__125;
  
  public static final Keyword const__126;
  
  public static final Keyword const__127;
  
  public static final AFn const__128;
  
  public static final Keyword const__129;
  
  public static final Keyword const__130;
  
  public static final Keyword const__131;
  
  public static final Keyword const__132;
  
  public static final AFn const__133;
  
  public static final Keyword const__134;
  
  public static final Keyword const__135;
  
  public static final Keyword const__136;
  
  public static final Keyword const__137;
  
  public static final AFn const__138;
  
  public static final Keyword const__139;
  
  public static final AFn const__140;
  
  public static final Keyword const__141;
  
  public static final Keyword const__142;
  
  public static final Object const__143;
  
  public static final Var const__144;
  
  public static final AFn const__145;
  
  public static final AFn const__146;
  
  public static final AFn const__147;
  
  public static final AFn const__148;
  
  public static final AFn const__149;
  
  public static final AFn const__150;
  
  public static final AFn const__151;
  
  public static final AFn const__152;
  
  public static final Keyword const__153;
  
  public static final Keyword const__154;
  
  public static final Object const__155;
  
  public static final AFn const__156;
  
  public static final AFn const__157;
  
  public static final AFn const__158;
  
  public static final AFn const__159;
  
  public static final AFn const__160;
  
  public static final AFn const__161;
  
  public static final AFn const__162;
  
  public static final AFn const__163;
  
  public static final Keyword const__164;
  
  public static final Keyword const__165;
  
  public static final Object const__166;
  
  public static final AFn const__167;
  
  public static final AFn const__168;
  
  public static final AFn const__169;
  
  public static final AFn const__170;
  
  public static final AFn const__171;
  
  public static final AFn const__172;
  
  public static final AFn const__173;
  
  public static final AFn const__174;
  
  public static final Keyword const__175;
  
  public static final Object const__176;
  
  public static final AFn const__179;
  
  public static final AFn const__180;
  
  public static final AFn const__181;
  
  public static final Keyword const__182;
  
  public static final Object const__183;
  
  public static final AFn const__184;
  
  public static final AFn const__185;
  
  public static final AFn const__186;
  
  public static final AFn const__187;
  
  public static final AFn const__188;
  
  public static final AFn const__189;
  
  public static final AFn const__190;
  
  public static final AFn const__191;
  
  public static final Keyword const__192;
  
  public static final Object const__193;
  
  public static final AFn const__194;
  
  public static final AFn const__195;
  
  public static final AFn const__196;
  
  public static final AFn const__197;
  
  public static final AFn const__198;
  
  public static final AFn const__199;
  
  public static final AFn const__200;
  
  public static final AFn const__201;
  
  public static final Keyword const__202;
  
  public static final Object const__203;
  
  public static final AFn const__204;
  
  public static final AFn const__205;
  
  public static final AFn const__206;
  
  public static final AFn const__207;
  
  public static final AFn const__208;
  
  public static final AFn const__209;
  
  public static final AFn const__210;
  
  public static final AFn const__211;
  
  public static final Keyword const__212;
  
  public static final Object const__213;
  
  public static final AFn const__214;
  
  public static final AFn const__215;
  
  public static final AFn const__216;
  
  public static final AFn const__217;
  
  public static final AFn const__218;
  
  public static final AFn const__219;
  
  public static final AFn const__220;
  
  public static final AFn const__221;
  
  public static final Keyword const__222;
  
  public static final Object const__223;
  
  public static final AFn const__224;
  
  public static final AFn const__225;
  
  public static final AFn const__226;
  
  public static final AFn const__227;
  
  public static final AFn const__228;
  
  public static final AFn const__229;
  
  public static final AFn const__230;
  
  public static final AFn const__231;
  
  public static final Keyword const__232;
  
  public static final Object const__233;
  
  public static final AFn const__234;
  
  public static final AFn const__235;
  
  public static final AFn const__236;
  
  public static final AFn const__237;
  
  public static final AFn const__238;
  
  public static final AFn const__239;
  
  public static final AFn const__240;
  
  public static final AFn const__241;
  
  public static final Keyword const__242;
  
  public static final Object const__243;
  
  public static final AFn const__244;
  
  public static final AFn const__245;
  
  public static final AFn const__246;
  
  public static final AFn const__247;
  
  public static final AFn const__248;
  
  public static final AFn const__249;
  
  public static final AFn const__250;
  
  public static final AFn const__251;
  
  public static final Keyword const__252;
  
  public static final Object const__253;
  
  public static final AFn const__254;
  
  public static final AFn const__255;
  
  public static final AFn const__256;
  
  public static final AFn const__257;
  
  public static final AFn const__258;
  
  public static final AFn const__259;
  
  public static final AFn const__260;
  
  public static final AFn const__261;
  
  public static final Keyword const__262;
  
  public static final Object const__263;
  
  public static final AFn const__264;
  
  public static final AFn const__265;
  
  public static final AFn const__266;
  
  public static final AFn const__267;
  
  public static final AFn const__268;
  
  public static final AFn const__269;
  
  public static final AFn const__270;
  
  public static final AFn const__271;
  
  public static final Keyword const__272;
  
  public static final Object const__273;
  
  public static final AFn const__274;
  
  public static final AFn const__275;
  
  public static final AFn const__276;
  
  public static final AFn const__277;
  
  public static final AFn const__278;
  
  public static final AFn const__279;
  
  public static final AFn const__280;
  
  public static final AFn const__281;
  
  public static final Var const__282;
  
  public static final AFn const__286;
  
  public static final Var const__287;
  
  public static final Keyword const__288;
  
  public static final Keyword const__289;
  
  public static final Object const__290;
  
  public static final Var const__291;
  
  public static final AFn const__292;
  
  public static final Var const__293;
  
  public static final Keyword const__294;
  
  public static final Object const__295;
  
  public static final AFn const__296;
  
  public static final Keyword const__297;
  
  public static final Object const__298;
  
  public static final AFn const__299;
  
  public static final AFn const__300;
  
  public static final AFn const__301;
  
  public static final AFn const__302;
  
  public static final AFn const__303;
  
  public static final AFn const__304;
  
  public static final AFn const__305;
  
  public static final AFn const__306;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new protocol.fn__31644());
    const__3.setMeta((IPersistentMap)const__11);
    const__3.bindRoot(new protocol.get_EQ_());
    const__12.setMeta((IPersistentMap)const__15);
    const__12.bindRoot(new protocol.get_QMARK_());
    const__16.setMeta((IPersistentMap)const__19);
    const__16.bindRoot(new protocol.meta_channel_QMARK_());
    const__20.setMeta((IPersistentMap)const__23);
    const__20.bindRoot(new protocol.service_channel_QMARK_());
    const__24.setMeta((IPersistentMap)const__27);
    const__24.bindRoot(new protocol.broadcast_channel_QMARK_());
    const__28.setMeta((IPersistentMap)const__31);
    const__28.bindRoot(new protocol.subscribe_message_QMARK_());
    const__32.setMeta((IPersistentMap)const__35);
    const__32.bindRoot(new protocol.handshake_message_QMARK_());
    const__36.setMeta((IPersistentMap)const__39);
    const__36.bindRoot(new protocol.connect_message_QMARK_());
    const__40.setMeta((IPersistentMap)const__43);
    const__40.bindRoot(new protocol.disconnect_message_QMARK_());
    const__44.setMeta((IPersistentMap)const__47);
    const__44.bindRoot(new protocol.anon_publish_message_QMARK_());
    const__48.setMeta((IPersistentMap)const__51);
    const__48.bindRoot(new protocol.message_connection_state());
    const__52.setMeta((IPersistentMap)const__55);
    const__52.bindRoot(new protocol.compare_version());
    const__56.setMeta((IPersistentMap)const__59);
    const__56.bindRoot(new protocol.format_error());
    const__60.setMeta((IPersistentMap)const__63);
    const__60.bindRoot(new protocol.error_code());
    const__282.setMeta((IPersistentMap)const__286);
    const__282.bindRoot(new protocol.channel_dispatch_value());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "tilt.bayeux.protocol");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("tilt.bayeux.protocol", "get=");
    const__11 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "key"), Symbol.intern(null, "v")) })), RT.keyword(null, "line"), Integer.valueOf(6), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/protocol.clj" });
    const__12 = (Var)RT.var("tilt.bayeux.protocol", "get?");
    const__15 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "key"), Symbol.intern(null, "pred")) })), RT.keyword(null, "line"), Integer.valueOf(7), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/protocol.clj" });
    const__16 = (Var)RT.var("tilt.bayeux.protocol", "meta-channel?");
    const__19 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "channel")) })), RT.keyword(null, "line"), Integer.valueOf(11), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/protocol.clj" });
    const__20 = (Var)RT.var("tilt.bayeux.protocol", "service-channel?");
    const__23 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "channel")) })), RT.keyword(null, "line"), Integer.valueOf(15), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/protocol.clj" });
    const__24 = (Var)RT.var("tilt.bayeux.protocol", "broadcast-channel?");
    const__27 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "channel")) })), RT.keyword(null, "line"), Integer.valueOf(19), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/protocol.clj" });
    const__28 = (Var)RT.var("tilt.bayeux.protocol", "subscribe-message?");
    const__31 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "message")) })), RT.keyword(null, "line"), Integer.valueOf(23), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/protocol.clj" });
    const__32 = (Var)RT.var("tilt.bayeux.protocol", "handshake-message?");
    const__35 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "message")) })), RT.keyword(null, "line"), Integer.valueOf(26), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/protocol.clj" });
    const__36 = (Var)RT.var("tilt.bayeux.protocol", "connect-message?");
    const__39 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "message")) })), RT.keyword(null, "line"), Integer.valueOf(29), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/protocol.clj" });
    const__40 = (Var)RT.var("tilt.bayeux.protocol", "disconnect-message?");
    const__43 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "message")) })), RT.keyword(null, "line"), Integer.valueOf(32), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/protocol.clj" });
    const__44 = (Var)RT.var("tilt.bayeux.protocol", "anon-publish-message?");
    const__47 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "message")) })), RT.keyword(null, "line"), Integer.valueOf(35), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/protocol.clj" });
    const__48 = (Var)RT.var("tilt.bayeux.protocol", "message-connection-state");
    const__51 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "message")) })), RT.keyword(null, "line"), Integer.valueOf(39), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/protocol.clj" });
    const__52 = (Var)RT.var("tilt.bayeux.protocol", "compare-version");
    const__55 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "version-a"), Symbol.intern(null, "version-b")) })), RT.keyword(null, "line"), Integer.valueOf(49), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/protocol.clj" });
    const__56 = (Var)RT.var("tilt.bayeux.protocol", "format-error");
    const__59 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "code"), Symbol.intern(null, "args"), Symbol.intern(null, "message")) })) })), RT.keyword(null, "line"), Integer.valueOf(63), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/protocol.clj" });
    const__60 = (Var)RT.var("tilt.bayeux.protocol", "error-code");
    const__63 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "error-str")) })), RT.keyword(null, "line"), Integer.valueOf(66), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/protocol.clj" });
    const__64 = (Var)RT.var("clojure.spec.alpha", "def-impl");
    const__65 = (Keyword)RT.keyword("tilt.bayeux.protocol", "channel");
    const__66 = (AFn)Symbol.intern("clojure.core", "string?");
    const__67 = (Var)RT.var("clojure.core", "string?");
    const__68 = (Keyword)RT.keyword("tilt.bayeux.protocol", "version");
    const__69 = (AFn)Symbol.intern("clojure.core", "string?");
    const__70 = (Keyword)RT.keyword("tilt.bayeux.protocol", "minimumVersion");
    const__71 = (AFn)Symbol.intern("clojure.core", "string?");
    const__72 = (Keyword)RT.keyword("tilt.bayeux.protocol", "supportedConnectionTypes");
    const__73 = PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "coll-of"), Symbol.intern("clojure.core", "string?") }));
    const__74 = (Var)RT.var("clojure.spec.alpha", "every-impl");
    const__75 = (AFn)Symbol.intern(null, "string?");
    const__76 = (Keyword)RT.keyword("clojure.spec.alpha", "describe");
    const__77 = PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "coll-of"), Symbol.intern("clojure.core", "string?") }));
    const__78 = (Keyword)RT.keyword("clojure.spec.alpha", "conform-all");
    const__79 = (Keyword)RT.keyword("clojure.spec.alpha", "cpred");
    const__80 = (Keyword)RT.keyword("clojure.spec.alpha", "kind-form");
    const__81 = (Keyword)RT.keyword("tilt.bayeux.protocol", "connectionType");
    const__82 = (AFn)Symbol.intern("clojure.core", "string?");
    const__83 = (Keyword)RT.keyword("tilt.bayeux.protocol", "clientId");
    const__84 = (AFn)Symbol.intern("clojure.core", "string?");
    const__85 = (Keyword)RT.keyword("tilt.bayeux.protocol", "id");
    const__86 = (AFn)Symbol.intern("clojure.core", "string?");
    const__87 = (Keyword)RT.keyword("tilt.bayeux.protocol", "timestamp");
    const__88 = (AFn)Symbol.intern("clojure.core", "string?");
    const__89 = (Keyword)RT.keyword("tilt.bayeux.protocol", "data");
    const__90 = (AFn)Symbol.intern("clojure.core", "any?");
    const__91 = (Var)RT.var("clojure.core", "any?");
    const__92 = (Keyword)RT.keyword("tilt.bayeux.protocol", "successful");
    const__93 = (AFn)Symbol.intern("clojure.core", "boolean?");
    const__94 = (Var)RT.var("clojure.core", "boolean?");
    const__95 = (Keyword)RT.keyword("tilt.bayeux.protocol", "subscription");
    const__96 = PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "or"), RT.keyword(null, "string"), Symbol.intern("clojure.core", "string?"), RT.keyword(null, "coll"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "coll-of"), Symbol.intern("clojure.core", "string?") })) }));
    const__97 = (Var)RT.var("clojure.spec.alpha", "or-spec-impl");
  }
  
  public static void __init1() {
    const__100 = (AFn)Tuple.create(RT.keyword(null, "string"), RT.keyword(null, "coll"));
    const__101 = (AFn)Tuple.create(Symbol.intern("clojure.core", "string?"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "coll-of"), Symbol.intern("clojure.core", "string?") })));
    const__102 = (AFn)Symbol.intern(null, "string?");
    const__103 = PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "coll-of"), Symbol.intern("clojure.core", "string?") }));
    const__104 = (Keyword)RT.keyword("tilt.bayeux.protocol", "error");
    const__105 = (AFn)Symbol.intern("clojure.core", "string?");
    const__106 = (Keyword)RT.keyword("tilt.bayeux.protocol", "ext");
    const__107 = (AFn)Symbol.intern("clojure.core", "map?");
    const__108 = (Var)RT.var("clojure.core", "map?");
    const__109 = (Keyword)RT.keyword("tilt.bayeux.protocol", "timeout");
    const__110 = (AFn)Symbol.intern("clojure.core", "integer?");
    const__111 = (Var)RT.var("clojure.core", "integer?");
    const__112 = (Keyword)RT.keyword("tilt.bayeux.protocol", "interval");
    const__113 = (AFn)Symbol.intern("clojure.core", "integer?");
    const__114 = (Keyword)RT.keyword("tilt.bayeux.protocol", "hosts");
    const__115 = PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "coll-of"), Symbol.intern("clojure.core", "string?") }));
    const__116 = (AFn)Symbol.intern(null, "string?");
    const__117 = PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "coll-of"), Symbol.intern("clojure.core", "string?") }));
    const__118 = (Keyword)RT.keyword("tilt.bayeux.protocol", "multiple-clients");
    const__119 = (AFn)Symbol.intern("clojure.core", "boolean?");
    const__120 = (Keyword)RT.keyword("tilt.bayeux.protocol", "reconnect");
    const__121 = (AFn)PersistentHashSet.create(new Object[] { "retry", "none", "handshake" });
    const__122 = (AFn)PersistentHashSet.create(new Object[] { "retry", "none", "handshake" });
    const__123 = (Keyword)RT.keyword("tilt.bayeux.protocol", "advice");
    const__124 = PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "keys"), RT.keyword(null, "opt-un"), Tuple.create(RT.keyword("tilt.bayeux.protocol", "reconnect"), RT.keyword("tilt.bayeux.protocol", "timeout"), RT.keyword("tilt.bayeux.protocol", "interval"), RT.keyword("tilt.bayeux.protocol", "multiple-clients"), RT.keyword("tilt.bayeux.protocol", "hosts")) }));
    const__125 = (Var)RT.var("clojure.spec.alpha", "map-spec-impl");
    const__126 = (Keyword)RT.keyword(null, "req-un");
    const__127 = (Keyword)RT.keyword(null, "opt-un");
    const__128 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "reconnect"), RT.keyword("tilt.bayeux.protocol", "timeout"), RT.keyword("tilt.bayeux.protocol", "interval"), RT.keyword("tilt.bayeux.protocol", "multiple-clients"), RT.keyword("tilt.bayeux.protocol", "hosts"));
    const__129 = (Keyword)RT.keyword(null, "gfn");
    const__130 = (Keyword)RT.keyword(null, "pred-exprs");
    const__131 = (Keyword)RT.keyword(null, "keys-pred");
    const__132 = (Keyword)RT.keyword(null, "opt-keys");
    const__133 = (AFn)Tuple.create(RT.keyword(null, "reconnect"), RT.keyword(null, "timeout"), RT.keyword(null, "interval"), RT.keyword(null, "multiple-clients"), RT.keyword(null, "hosts"));
    const__134 = (Keyword)RT.keyword(null, "req-specs");
    const__135 = (Keyword)RT.keyword(null, "req");
    const__136 = (Keyword)RT.keyword(null, "req-keys");
    const__137 = (Keyword)RT.keyword(null, "opt-specs");
    const__138 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "reconnect"), RT.keyword("tilt.bayeux.protocol", "timeout"), RT.keyword("tilt.bayeux.protocol", "interval"), RT.keyword("tilt.bayeux.protocol", "multiple-clients"), RT.keyword("tilt.bayeux.protocol", "hosts"));
    const__139 = (Keyword)RT.keyword(null, "pred-forms");
    const__140 = (AFn)Tuple.create(PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "map?"), Symbol.intern(null, "%") })) })));
    const__141 = (Keyword)RT.keyword(null, "opt");
    const__142 = (Keyword)RT.keyword("tilt.bayeux.protocol", "handshake");
    const__143 = PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "->"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "keys"), RT.keyword(null, "req-un"), Tuple.create(RT.keyword("tilt.bayeux.protocol", "channel"), RT.keyword("tilt.bayeux.protocol", "version"), RT.keyword("tilt.bayeux.protocol", "supportedConnectionTypes")), RT.keyword(null, "opt-un"), Tuple.create(RT.keyword("tilt.bayeux.protocol", "minimumVersion"), RT.keyword("tilt.bayeux.protocol", "ext"), RT.keyword("tilt.bayeux.protocol", "id")) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "and"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("tilt.bayeux.protocol", "get="), RT.keyword(null, "channel"), "/meta/handshake" })) })) }));
    const__144 = (Var)RT.var("clojure.spec.alpha", "and-spec-impl");
    const__145 = (AFn)Tuple.create(PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "keys"), RT.keyword(null, "req-un"), Tuple.create(RT.keyword("tilt.bayeux.protocol", "channel"), RT.keyword("tilt.bayeux.protocol", "version"), RT.keyword("tilt.bayeux.protocol", "supportedConnectionTypes")), RT.keyword(null, "opt-un"), Tuple.create(RT.keyword("tilt.bayeux.protocol", "minimumVersion"), RT.keyword("tilt.bayeux.protocol", "ext"), RT.keyword("tilt.bayeux.protocol", "id")) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("tilt.bayeux.protocol", "get="), RT.keyword(null, "channel"), "/meta/handshake" })));
    const__146 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "channel"), RT.keyword("tilt.bayeux.protocol", "version"), RT.keyword("tilt.bayeux.protocol", "supportedConnectionTypes"));
    const__147 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "minimumVersion"), RT.keyword("tilt.bayeux.protocol", "ext"), RT.keyword("tilt.bayeux.protocol", "id"));
    const__148 = (AFn)Tuple.create(RT.keyword(null, "minimumVersion"), RT.keyword(null, "ext"), RT.keyword(null, "id"));
    const__149 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "channel"), RT.keyword("tilt.bayeux.protocol", "version"), RT.keyword("tilt.bayeux.protocol", "supportedConnectionTypes"));
    const__150 = (AFn)Tuple.create(RT.keyword(null, "channel"), RT.keyword(null, "version"), RT.keyword(null, "supportedConnectionTypes"));
    const__151 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "minimumVersion"), RT.keyword("tilt.bayeux.protocol", "ext"), RT.keyword("tilt.bayeux.protocol", "id"));
    const__152 = (AFn)Tuple.create(PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "map?"), Symbol.intern(null, "%") })) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "contains?"), Symbol.intern(null, "%"), RT.keyword(null, "channel") })) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "contains?"), Symbol.intern(null, "%"), RT.keyword(null, "version") })) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "contains?"), Symbol.intern(null, "%"), RT.keyword(null, "supportedConnectionTypes") })) })));
    const__153 = (Keyword)RT.keyword(null, "channel");
    const__154 = (Keyword)RT.keyword("tilt.bayeux.protocol", "handshake-success");
    const__155 = PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "->"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "keys"), RT.keyword(null, "req-un"), Tuple.create(RT.keyword("tilt.bayeux.protocol", "channel"), RT.keyword("tilt.bayeux.protocol", "version"), RT.keyword("tilt.bayeux.protocol", "supportedConnectionTypes"), RT.keyword("tilt.bayeux.protocol", "clientId"), RT.keyword("tilt.bayeux.protocol", "successful")), RT.keyword(null, "opt-un"), Tuple.create(RT.keyword("tilt.bayeux.protocol", "minimumVersion"), RT.keyword("tilt.bayeux.protocol", "advice"), RT.keyword("tilt.bayeux.protocol", "ext"), RT.keyword("tilt.bayeux.protocol", "id"), RT.keyword("tilt.bayeux.protocol", "authSuccessful")) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "and"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("tilt.bayeux.protocol", "get="), RT.keyword(null, "channel"), "/meta/handshake" })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("tilt.bayeux.protocol", "get="), RT.keyword(null, "successful"), Boolean.TRUE })) })) }));
    const__156 = (AFn)Tuple.create(PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "keys"), RT.keyword(null, "req-un"), Tuple.create(RT.keyword("tilt.bayeux.protocol", "channel"), RT.keyword("tilt.bayeux.protocol", "version"), RT.keyword("tilt.bayeux.protocol", "supportedConnectionTypes"), RT.keyword("tilt.bayeux.protocol", "clientId"), RT.keyword("tilt.bayeux.protocol", "successful")), RT.keyword(null, "opt-un"), Tuple.create(RT.keyword("tilt.bayeux.protocol", "minimumVersion"), RT.keyword("tilt.bayeux.protocol", "advice"), RT.keyword("tilt.bayeux.protocol", "ext"), RT.keyword("tilt.bayeux.protocol", "id"), RT.keyword("tilt.bayeux.protocol", "authSuccessful")) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("tilt.bayeux.protocol", "get="), RT.keyword(null, "channel"), "/meta/handshake" })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("tilt.bayeux.protocol", "get="), RT.keyword(null, "successful"), Boolean.TRUE })));
    const__157 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "channel"), RT.keyword("tilt.bayeux.protocol", "version"), RT.keyword("tilt.bayeux.protocol", "supportedConnectionTypes"), RT.keyword("tilt.bayeux.protocol", "clientId"), RT.keyword("tilt.bayeux.protocol", "successful"));
    const__158 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "minimumVersion"), RT.keyword("tilt.bayeux.protocol", "advice"), RT.keyword("tilt.bayeux.protocol", "ext"), RT.keyword("tilt.bayeux.protocol", "id"), RT.keyword("tilt.bayeux.protocol", "authSuccessful"));
    const__159 = (AFn)Tuple.create(RT.keyword(null, "minimumVersion"), RT.keyword(null, "advice"), RT.keyword(null, "ext"), RT.keyword(null, "id"), RT.keyword(null, "authSuccessful"));
    const__160 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "channel"), RT.keyword("tilt.bayeux.protocol", "version"), RT.keyword("tilt.bayeux.protocol", "supportedConnectionTypes"), RT.keyword("tilt.bayeux.protocol", "clientId"), RT.keyword("tilt.bayeux.protocol", "successful"));
    const__161 = (AFn)Tuple.create(RT.keyword(null, "channel"), RT.keyword(null, "version"), RT.keyword(null, "supportedConnectionTypes"), RT.keyword(null, "clientId"), RT.keyword(null, "successful"));
    const__162 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "minimumVersion"), RT.keyword("tilt.bayeux.protocol", "advice"), RT.keyword("tilt.bayeux.protocol", "ext"), RT.keyword("tilt.bayeux.protocol", "id"), RT.keyword("tilt.bayeux.protocol", "authSuccessful"));
    const__163 = (AFn)Tuple.create(PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "map?"), Symbol.intern(null, "%") })) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "contains?"), Symbol.intern(null, "%"), RT.keyword(null, "channel") })) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "contains?"), Symbol.intern(null, "%"), RT.keyword(null, "version") })) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "contains?"), Symbol.intern(null, "%"), RT.keyword(null, "supportedConnectionTypes") })) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "contains?"), Symbol.intern(null, "%"), RT.keyword(null, "clientId") })) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "contains?"), Symbol.intern(null, "%"), RT.keyword(null, "successful") })) })));
    const__164 = (Keyword)RT.keyword(null, "successful");
    const__165 = (Keyword)RT.keyword("tilt.bayeux.protocol", "handshake-error");
    const__166 = PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "->"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "keys"), RT.keyword(null, "req-un"), Tuple.create(RT.keyword("tilt.bayeux.protocol", "channel"), RT.keyword("tilt.bayeux.protocol", "successful"), RT.keyword("tilt.bayeux.protocol", "error")), RT.keyword(null, "opt-un"), Tuple.create(RT.keyword("tilt.bayeux.protocol", "supportedConnectionTypes"), RT.keyword("tilt.bayeux.protocol", "advice"), RT.keyword("tilt.bayeux.protocol", "version"), RT.keyword("tilt.bayeux.protocol", "minimumVersion"), RT.keyword("tilt.bayeux.protocol", "ext"), RT.keyword("tilt.bayeux.protocol", "id")) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "and"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("tilt.bayeux.protocol", "get="), RT.keyword(null, "channel"), "/meta/handshake" })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("tilt.bayeux.protocol", "get="), RT.keyword(null, "successful"), Boolean.FALSE })) })) }));
    const__167 = (AFn)Tuple.create(PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "keys"), RT.keyword(null, "req-un"), Tuple.create(RT.keyword("tilt.bayeux.protocol", "channel"), RT.keyword("tilt.bayeux.protocol", "successful"), RT.keyword("tilt.bayeux.protocol", "error")), RT.keyword(null, "opt-un"), Tuple.create(RT.keyword("tilt.bayeux.protocol", "supportedConnectionTypes"), RT.keyword("tilt.bayeux.protocol", "advice"), RT.keyword("tilt.bayeux.protocol", "version"), RT.keyword("tilt.bayeux.protocol", "minimumVersion"), RT.keyword("tilt.bayeux.protocol", "ext"), RT.keyword("tilt.bayeux.protocol", "id")) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("tilt.bayeux.protocol", "get="), RT.keyword(null, "channel"), "/meta/handshake" })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("tilt.bayeux.protocol", "get="), RT.keyword(null, "successful"), Boolean.FALSE })));
    const__168 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "channel"), RT.keyword("tilt.bayeux.protocol", "successful"), RT.keyword("tilt.bayeux.protocol", "error"));
    const__169 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "supportedConnectionTypes"), RT.keyword("tilt.bayeux.protocol", "advice"), RT.keyword("tilt.bayeux.protocol", "version"), RT.keyword("tilt.bayeux.protocol", "minimumVersion"), RT.keyword("tilt.bayeux.protocol", "ext"), RT.keyword("tilt.bayeux.protocol", "id"));
    const__170 = (AFn)Tuple.create(RT.keyword(null, "supportedConnectionTypes"), RT.keyword(null, "advice"), RT.keyword(null, "version"), RT.keyword(null, "minimumVersion"), RT.keyword(null, "ext"), RT.keyword(null, "id"));
    const__171 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "channel"), RT.keyword("tilt.bayeux.protocol", "successful"), RT.keyword("tilt.bayeux.protocol", "error"));
    const__172 = (AFn)Tuple.create(RT.keyword(null, "channel"), RT.keyword(null, "successful"), RT.keyword(null, "error"));
    const__173 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "supportedConnectionTypes"), RT.keyword("tilt.bayeux.protocol", "advice"), RT.keyword("tilt.bayeux.protocol", "version"), RT.keyword("tilt.bayeux.protocol", "minimumVersion"), RT.keyword("tilt.bayeux.protocol", "ext"), RT.keyword("tilt.bayeux.protocol", "id"));
    const__174 = (AFn)Tuple.create(PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "map?"), Symbol.intern(null, "%") })) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "contains?"), Symbol.intern(null, "%"), RT.keyword(null, "channel") })) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "contains?"), Symbol.intern(null, "%"), RT.keyword(null, "successful") })) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "contains?"), Symbol.intern(null, "%"), RT.keyword(null, "error") })) })));
    const__175 = (Keyword)RT.keyword("tilt.bayeux.protocol", "handshake-response");
    const__176 = PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "or"), RT.keyword(null, "success"), RT.keyword("tilt.bayeux.protocol", "handshake-success"), RT.keyword(null, "error"), RT.keyword("tilt.bayeux.protocol", "handshake-error") }));
    const__179 = (AFn)Tuple.create(RT.keyword(null, "success"), RT.keyword(null, "error"));
    const__180 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "handshake-success"), RT.keyword("tilt.bayeux.protocol", "handshake-error"));
    const__181 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "handshake-success"), RT.keyword("tilt.bayeux.protocol", "handshake-error"));
    const__182 = (Keyword)RT.keyword("tilt.bayeux.protocol", "connect");
    const__183 = PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "->"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "keys"), RT.keyword(null, "req-un"), Tuple.create(RT.keyword("tilt.bayeux.protocol", "channel"), RT.keyword("tilt.bayeux.protocol", "clientId"), RT.keyword("tilt.bayeux.protocol", "connectionType")), RT.keyword(null, "opt-un"), Tuple.create(RT.keyword("tilt.bayeux.protocol", "ext"), RT.keyword("tilt.bayeux.protocol", "id"), RT.keyword("tilt.bayeux.protocol", "advice")) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "and"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("tilt.bayeux.protocol", "get="), RT.keyword(null, "channel"), "/meta/connect" })) })) }));
    const__184 = (AFn)Tuple.create(PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "keys"), RT.keyword(null, "req-un"), Tuple.create(RT.keyword("tilt.bayeux.protocol", "channel"), RT.keyword("tilt.bayeux.protocol", "clientId"), RT.keyword("tilt.bayeux.protocol", "connectionType")), RT.keyword(null, "opt-un"), Tuple.create(RT.keyword("tilt.bayeux.protocol", "ext"), RT.keyword("tilt.bayeux.protocol", "id"), RT.keyword("tilt.bayeux.protocol", "advice")) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("tilt.bayeux.protocol", "get="), RT.keyword(null, "channel"), "/meta/connect" })));
    const__185 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "channel"), RT.keyword("tilt.bayeux.protocol", "clientId"), RT.keyword("tilt.bayeux.protocol", "connectionType"));
    const__186 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "ext"), RT.keyword("tilt.bayeux.protocol", "id"), RT.keyword("tilt.bayeux.protocol", "advice"));
    const__187 = (AFn)Tuple.create(RT.keyword(null, "ext"), RT.keyword(null, "id"), RT.keyword(null, "advice"));
    const__188 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "channel"), RT.keyword("tilt.bayeux.protocol", "clientId"), RT.keyword("tilt.bayeux.protocol", "connectionType"));
    const__189 = (AFn)Tuple.create(RT.keyword(null, "channel"), RT.keyword(null, "clientId"), RT.keyword(null, "connectionType"));
    const__190 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "ext"), RT.keyword("tilt.bayeux.protocol", "id"), RT.keyword("tilt.bayeux.protocol", "advice"));
    const__191 = (AFn)Tuple.create(PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "map?"), Symbol.intern(null, "%") })) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "contains?"), Symbol.intern(null, "%"), RT.keyword(null, "channel") })) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "contains?"), Symbol.intern(null, "%"), RT.keyword(null, "clientId") })) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "contains?"), Symbol.intern(null, "%"), RT.keyword(null, "connectionType") })) })));
    const__192 = (Keyword)RT.keyword("tilt.bayeux.protocol", "connect-response");
    const__193 = PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "->"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "keys"), RT.keyword(null, "req-un"), Tuple.create(RT.keyword("tilt.bayeux.protocol", "channel"), RT.keyword("tilt.bayeux.protocol", "successful")), RT.keyword(null, "opt-un"), Tuple.create(RT.keyword("tilt.bayeux.protocol", "error"), RT.keyword("tilt.bayeux.protocol", "advice"), RT.keyword("tilt.bayeux.protocol", "ext"), RT.keyword("tilt.bayeux.protocol", "clientId"), RT.keyword("tilt.bayeux.protocol", "id")) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "and"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("tilt.bayeux.protocol", "get="), RT.keyword(null, "channel"), "/meta/connect" })) })) }));
    const__194 = (AFn)Tuple.create(PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "keys"), RT.keyword(null, "req-un"), Tuple.create(RT.keyword("tilt.bayeux.protocol", "channel"), RT.keyword("tilt.bayeux.protocol", "successful")), RT.keyword(null, "opt-un"), Tuple.create(RT.keyword("tilt.bayeux.protocol", "error"), RT.keyword("tilt.bayeux.protocol", "advice"), RT.keyword("tilt.bayeux.protocol", "ext"), RT.keyword("tilt.bayeux.protocol", "clientId"), RT.keyword("tilt.bayeux.protocol", "id")) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("tilt.bayeux.protocol", "get="), RT.keyword(null, "channel"), "/meta/connect" })));
    const__195 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "channel"), RT.keyword("tilt.bayeux.protocol", "successful"));
    const__196 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "error"), RT.keyword("tilt.bayeux.protocol", "advice"), RT.keyword("tilt.bayeux.protocol", "ext"), RT.keyword("tilt.bayeux.protocol", "clientId"), RT.keyword("tilt.bayeux.protocol", "id"));
    const__197 = (AFn)Tuple.create(RT.keyword(null, "error"), RT.keyword(null, "advice"), RT.keyword(null, "ext"), RT.keyword(null, "clientId"), RT.keyword(null, "id"));
    const__198 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "channel"), RT.keyword("tilt.bayeux.protocol", "successful"));
    const__199 = (AFn)Tuple.create(RT.keyword(null, "channel"), RT.keyword(null, "successful"));
  }
  
  public static void __init2() {
    const__200 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "error"), RT.keyword("tilt.bayeux.protocol", "advice"), RT.keyword("tilt.bayeux.protocol", "ext"), RT.keyword("tilt.bayeux.protocol", "clientId"), RT.keyword("tilt.bayeux.protocol", "id"));
    const__201 = (AFn)Tuple.create(PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "map?"), Symbol.intern(null, "%") })) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "contains?"), Symbol.intern(null, "%"), RT.keyword(null, "channel") })) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "contains?"), Symbol.intern(null, "%"), RT.keyword(null, "successful") })) })));
    const__202 = (Keyword)RT.keyword("tilt.bayeux.protocol", "disconnect");
    const__203 = PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "->"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "keys"), RT.keyword(null, "req-un"), Tuple.create(RT.keyword("tilt.bayeux.protocol", "channel"), RT.keyword("tilt.bayeux.protocol", "clientId")), RT.keyword(null, "opt-un"), Tuple.create(RT.keyword("tilt.bayeux.protocol", "ext"), RT.keyword("tilt.bayeux.protocol", "id")) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "and"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("tilt.bayeux.protocol", "get="), RT.keyword(null, "channel"), "/meta/disconnect" })) })) }));
    const__204 = (AFn)Tuple.create(PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "keys"), RT.keyword(null, "req-un"), Tuple.create(RT.keyword("tilt.bayeux.protocol", "channel"), RT.keyword("tilt.bayeux.protocol", "clientId")), RT.keyword(null, "opt-un"), Tuple.create(RT.keyword("tilt.bayeux.protocol", "ext"), RT.keyword("tilt.bayeux.protocol", "id")) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("tilt.bayeux.protocol", "get="), RT.keyword(null, "channel"), "/meta/disconnect" })));
    const__205 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "channel"), RT.keyword("tilt.bayeux.protocol", "clientId"));
    const__206 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "ext"), RT.keyword("tilt.bayeux.protocol", "id"));
    const__207 = (AFn)Tuple.create(RT.keyword(null, "ext"), RT.keyword(null, "id"));
    const__208 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "channel"), RT.keyword("tilt.bayeux.protocol", "clientId"));
    const__209 = (AFn)Tuple.create(RT.keyword(null, "channel"), RT.keyword(null, "clientId"));
    const__210 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "ext"), RT.keyword("tilt.bayeux.protocol", "id"));
    const__211 = (AFn)Tuple.create(PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "map?"), Symbol.intern(null, "%") })) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "contains?"), Symbol.intern(null, "%"), RT.keyword(null, "channel") })) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "contains?"), Symbol.intern(null, "%"), RT.keyword(null, "clientId") })) })));
    const__212 = (Keyword)RT.keyword("tilt.bayeux.protocol", "disconnect-response");
    const__213 = PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "->"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "keys"), RT.keyword(null, "req-un"), Tuple.create(RT.keyword("tilt.bayeux.protocol", "channel"), RT.keyword("tilt.bayeux.protocol", "successful")), RT.keyword(null, "opt-un"), Tuple.create(RT.keyword("tilt.bayeux.protocol", "clientId"), RT.keyword("tilt.bayeux.protocol", "error"), RT.keyword("tilt.bayeux.protocol", "ext"), RT.keyword("tilt.bayeux.protocol", "id")) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "and"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("tilt.bayeux.protocol", "get="), RT.keyword(null, "channel"), "/meta/disconnect" })) })) }));
    const__214 = (AFn)Tuple.create(PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "keys"), RT.keyword(null, "req-un"), Tuple.create(RT.keyword("tilt.bayeux.protocol", "channel"), RT.keyword("tilt.bayeux.protocol", "successful")), RT.keyword(null, "opt-un"), Tuple.create(RT.keyword("tilt.bayeux.protocol", "clientId"), RT.keyword("tilt.bayeux.protocol", "error"), RT.keyword("tilt.bayeux.protocol", "ext"), RT.keyword("tilt.bayeux.protocol", "id")) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("tilt.bayeux.protocol", "get="), RT.keyword(null, "channel"), "/meta/disconnect" })));
    const__215 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "channel"), RT.keyword("tilt.bayeux.protocol", "successful"));
    const__216 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "clientId"), RT.keyword("tilt.bayeux.protocol", "error"), RT.keyword("tilt.bayeux.protocol", "ext"), RT.keyword("tilt.bayeux.protocol", "id"));
    const__217 = (AFn)Tuple.create(RT.keyword(null, "clientId"), RT.keyword(null, "error"), RT.keyword(null, "ext"), RT.keyword(null, "id"));
    const__218 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "channel"), RT.keyword("tilt.bayeux.protocol", "successful"));
    const__219 = (AFn)Tuple.create(RT.keyword(null, "channel"), RT.keyword(null, "successful"));
    const__220 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "clientId"), RT.keyword("tilt.bayeux.protocol", "error"), RT.keyword("tilt.bayeux.protocol", "ext"), RT.keyword("tilt.bayeux.protocol", "id"));
    const__221 = (AFn)Tuple.create(PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "map?"), Symbol.intern(null, "%") })) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "contains?"), Symbol.intern(null, "%"), RT.keyword(null, "channel") })) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "contains?"), Symbol.intern(null, "%"), RT.keyword(null, "successful") })) })));
    const__222 = (Keyword)RT.keyword("tilt.bayeux.protocol", "subscribe");
    const__223 = PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "->"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "keys"), RT.keyword(null, "req-un"), Tuple.create(RT.keyword("tilt.bayeux.protocol", "channel"), RT.keyword("tilt.bayeux.protocol", "clientId"), RT.keyword("tilt.bayeux.protocol", "subscription")), RT.keyword(null, "opt-un"), Tuple.create(RT.keyword("tilt.bayeux.protocol", "ext"), RT.keyword("tilt.bayeux.protocol", "id")) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "and"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("tilt.bayeux.protocol", "get="), RT.keyword(null, "channel"), "/meta/subscribe" })) })) }));
    const__224 = (AFn)Tuple.create(PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "keys"), RT.keyword(null, "req-un"), Tuple.create(RT.keyword("tilt.bayeux.protocol", "channel"), RT.keyword("tilt.bayeux.protocol", "clientId"), RT.keyword("tilt.bayeux.protocol", "subscription")), RT.keyword(null, "opt-un"), Tuple.create(RT.keyword("tilt.bayeux.protocol", "ext"), RT.keyword("tilt.bayeux.protocol", "id")) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("tilt.bayeux.protocol", "get="), RT.keyword(null, "channel"), "/meta/subscribe" })));
    const__225 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "channel"), RT.keyword("tilt.bayeux.protocol", "clientId"), RT.keyword("tilt.bayeux.protocol", "subscription"));
    const__226 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "ext"), RT.keyword("tilt.bayeux.protocol", "id"));
    const__227 = (AFn)Tuple.create(RT.keyword(null, "ext"), RT.keyword(null, "id"));
    const__228 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "channel"), RT.keyword("tilt.bayeux.protocol", "clientId"), RT.keyword("tilt.bayeux.protocol", "subscription"));
    const__229 = (AFn)Tuple.create(RT.keyword(null, "channel"), RT.keyword(null, "clientId"), RT.keyword(null, "subscription"));
    const__230 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "ext"), RT.keyword("tilt.bayeux.protocol", "id"));
    const__231 = (AFn)Tuple.create(PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "map?"), Symbol.intern(null, "%") })) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "contains?"), Symbol.intern(null, "%"), RT.keyword(null, "channel") })) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "contains?"), Symbol.intern(null, "%"), RT.keyword(null, "clientId") })) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "contains?"), Symbol.intern(null, "%"), RT.keyword(null, "subscription") })) })));
    const__232 = (Keyword)RT.keyword("tilt.bayeux.protocol", "subscribe-response");
    const__233 = PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "->"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "keys"), RT.keyword(null, "req-un"), Tuple.create(RT.keyword("tilt.bayeux.protocol", "channel"), RT.keyword("tilt.bayeux.protocol", "successful"), RT.keyword("tilt.bayeux.protocol", "subscription")), RT.keyword(null, "opt-un"), Tuple.create(RT.keyword("tilt.bayeux.protocol", "error"), RT.keyword("tilt.bayeux.protocol", "advice"), RT.keyword("tilt.bayeux.protocol", "ext"), RT.keyword("tilt.bayeux.protocol", "clientId"), RT.keyword("tilt.bayeux.protocol", "id")) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "and"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("tilt.bayeux.protocol", "get="), RT.keyword(null, "channel"), "/meta/subscribe" })) })) }));
    const__234 = (AFn)Tuple.create(PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "keys"), RT.keyword(null, "req-un"), Tuple.create(RT.keyword("tilt.bayeux.protocol", "channel"), RT.keyword("tilt.bayeux.protocol", "successful"), RT.keyword("tilt.bayeux.protocol", "subscription")), RT.keyword(null, "opt-un"), Tuple.create(RT.keyword("tilt.bayeux.protocol", "error"), RT.keyword("tilt.bayeux.protocol", "advice"), RT.keyword("tilt.bayeux.protocol", "ext"), RT.keyword("tilt.bayeux.protocol", "clientId"), RT.keyword("tilt.bayeux.protocol", "id")) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("tilt.bayeux.protocol", "get="), RT.keyword(null, "channel"), "/meta/subscribe" })));
    const__235 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "channel"), RT.keyword("tilt.bayeux.protocol", "successful"), RT.keyword("tilt.bayeux.protocol", "subscription"));
    const__236 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "error"), RT.keyword("tilt.bayeux.protocol", "advice"), RT.keyword("tilt.bayeux.protocol", "ext"), RT.keyword("tilt.bayeux.protocol", "clientId"), RT.keyword("tilt.bayeux.protocol", "id"));
    const__237 = (AFn)Tuple.create(RT.keyword(null, "error"), RT.keyword(null, "advice"), RT.keyword(null, "ext"), RT.keyword(null, "clientId"), RT.keyword(null, "id"));
    const__238 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "channel"), RT.keyword("tilt.bayeux.protocol", "successful"), RT.keyword("tilt.bayeux.protocol", "subscription"));
    const__239 = (AFn)Tuple.create(RT.keyword(null, "channel"), RT.keyword(null, "successful"), RT.keyword(null, "subscription"));
    const__240 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "error"), RT.keyword("tilt.bayeux.protocol", "advice"), RT.keyword("tilt.bayeux.protocol", "ext"), RT.keyword("tilt.bayeux.protocol", "clientId"), RT.keyword("tilt.bayeux.protocol", "id"));
    const__241 = (AFn)Tuple.create(PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "map?"), Symbol.intern(null, "%") })) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "contains?"), Symbol.intern(null, "%"), RT.keyword(null, "channel") })) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "contains?"), Symbol.intern(null, "%"), RT.keyword(null, "successful") })) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "contains?"), Symbol.intern(null, "%"), RT.keyword(null, "subscription") })) })));
    const__242 = (Keyword)RT.keyword("tilt.bayeux.protocol", "unsubscribe");
    const__243 = PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "->"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "keys"), RT.keyword(null, "req-un"), Tuple.create(RT.keyword("tilt.bayeux.protocol", "channel"), RT.keyword("tilt.bayeux.protocol", "clientId"), RT.keyword("tilt.bayeux.protocol", "subscription")), RT.keyword(null, "opt-un"), Tuple.create(RT.keyword("tilt.bayeux.protocol", "ext"), RT.keyword("tilt.bayeux.protocol", "id")) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "and"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("tilt.bayeux.protocol", "get="), RT.keyword(null, "channel"), "/meta/unsubscribe" })) })) }));
    const__244 = (AFn)Tuple.create(PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "keys"), RT.keyword(null, "req-un"), Tuple.create(RT.keyword("tilt.bayeux.protocol", "channel"), RT.keyword("tilt.bayeux.protocol", "clientId"), RT.keyword("tilt.bayeux.protocol", "subscription")), RT.keyword(null, "opt-un"), Tuple.create(RT.keyword("tilt.bayeux.protocol", "ext"), RT.keyword("tilt.bayeux.protocol", "id")) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("tilt.bayeux.protocol", "get="), RT.keyword(null, "channel"), "/meta/unsubscribe" })));
    const__245 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "channel"), RT.keyword("tilt.bayeux.protocol", "clientId"), RT.keyword("tilt.bayeux.protocol", "subscription"));
    const__246 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "ext"), RT.keyword("tilt.bayeux.protocol", "id"));
    const__247 = (AFn)Tuple.create(RT.keyword(null, "ext"), RT.keyword(null, "id"));
    const__248 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "channel"), RT.keyword("tilt.bayeux.protocol", "clientId"), RT.keyword("tilt.bayeux.protocol", "subscription"));
    const__249 = (AFn)Tuple.create(RT.keyword(null, "channel"), RT.keyword(null, "clientId"), RT.keyword(null, "subscription"));
    const__250 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "ext"), RT.keyword("tilt.bayeux.protocol", "id"));
    const__251 = (AFn)Tuple.create(PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "map?"), Symbol.intern(null, "%") })) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "contains?"), Symbol.intern(null, "%"), RT.keyword(null, "channel") })) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "contains?"), Symbol.intern(null, "%"), RT.keyword(null, "clientId") })) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "contains?"), Symbol.intern(null, "%"), RT.keyword(null, "subscription") })) })));
    const__252 = (Keyword)RT.keyword("tilt.bayeux.protocol", "unsubscribe-response");
    const__253 = PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "->"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "keys"), RT.keyword(null, "req-un"), Tuple.create(RT.keyword("tilt.bayeux.protocol", "channel"), RT.keyword("tilt.bayeux.protocol", "successful"), RT.keyword("tilt.bayeux.protocol", "subscription")), RT.keyword(null, "opt-un"), Tuple.create(RT.keyword("tilt.bayeux.protocol", "error"), RT.keyword("tilt.bayeux.protocol", "advice"), RT.keyword("tilt.bayeux.protocol", "ext"), RT.keyword("tilt.bayeux.protocol", "clientId"), RT.keyword("tilt.bayeux.protocol", "id")) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "and"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("tilt.bayeux.protocol", "get="), RT.keyword(null, "channel"), "/meta/unsubscribe" })) })) }));
    const__254 = (AFn)Tuple.create(PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "keys"), RT.keyword(null, "req-un"), Tuple.create(RT.keyword("tilt.bayeux.protocol", "channel"), RT.keyword("tilt.bayeux.protocol", "successful"), RT.keyword("tilt.bayeux.protocol", "subscription")), RT.keyword(null, "opt-un"), Tuple.create(RT.keyword("tilt.bayeux.protocol", "error"), RT.keyword("tilt.bayeux.protocol", "advice"), RT.keyword("tilt.bayeux.protocol", "ext"), RT.keyword("tilt.bayeux.protocol", "clientId"), RT.keyword("tilt.bayeux.protocol", "id")) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("tilt.bayeux.protocol", "get="), RT.keyword(null, "channel"), "/meta/unsubscribe" })));
    const__255 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "channel"), RT.keyword("tilt.bayeux.protocol", "successful"), RT.keyword("tilt.bayeux.protocol", "subscription"));
    const__256 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "error"), RT.keyword("tilt.bayeux.protocol", "advice"), RT.keyword("tilt.bayeux.protocol", "ext"), RT.keyword("tilt.bayeux.protocol", "clientId"), RT.keyword("tilt.bayeux.protocol", "id"));
    const__257 = (AFn)Tuple.create(RT.keyword(null, "error"), RT.keyword(null, "advice"), RT.keyword(null, "ext"), RT.keyword(null, "clientId"), RT.keyword(null, "id"));
    const__258 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "channel"), RT.keyword("tilt.bayeux.protocol", "successful"), RT.keyword("tilt.bayeux.protocol", "subscription"));
    const__259 = (AFn)Tuple.create(RT.keyword(null, "channel"), RT.keyword(null, "successful"), RT.keyword(null, "subscription"));
    const__260 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "error"), RT.keyword("tilt.bayeux.protocol", "advice"), RT.keyword("tilt.bayeux.protocol", "ext"), RT.keyword("tilt.bayeux.protocol", "clientId"), RT.keyword("tilt.bayeux.protocol", "id"));
    const__261 = (AFn)Tuple.create(PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "map?"), Symbol.intern(null, "%") })) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "contains?"), Symbol.intern(null, "%"), RT.keyword(null, "channel") })) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "contains?"), Symbol.intern(null, "%"), RT.keyword(null, "successful") })) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "contains?"), Symbol.intern(null, "%"), RT.keyword(null, "subscription") })) })));
    const__262 = (Keyword)RT.keyword("tilt.bayeux.protocol", "publish");
    const__263 = PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "->"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "keys"), RT.keyword(null, "req-un"), Tuple.create(RT.keyword("tilt.bayeux.protocol", "channel"), RT.keyword("tilt.bayeux.protocol", "data")), RT.keyword(null, "opt-un"), Tuple.create(RT.keyword("tilt.bayeux.protocol", "clientId"), RT.keyword("tilt.bayeux.protocol", "ext"), RT.keyword("tilt.bayeux.protocol", "id")) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "and"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("tilt.bayeux.protocol", "get?"), RT.keyword(null, "channel"), Symbol.intern("tilt.bayeux.protocol", "broadcast-channel?") })) })) }));
    const__264 = (AFn)Tuple.create(PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "keys"), RT.keyword(null, "req-un"), Tuple.create(RT.keyword("tilt.bayeux.protocol", "channel"), RT.keyword("tilt.bayeux.protocol", "data")), RT.keyword(null, "opt-un"), Tuple.create(RT.keyword("tilt.bayeux.protocol", "clientId"), RT.keyword("tilt.bayeux.protocol", "ext"), RT.keyword("tilt.bayeux.protocol", "id")) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("tilt.bayeux.protocol", "get?"), RT.keyword(null, "channel"), Symbol.intern("tilt.bayeux.protocol", "broadcast-channel?") })));
    const__265 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "channel"), RT.keyword("tilt.bayeux.protocol", "data"));
    const__266 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "clientId"), RT.keyword("tilt.bayeux.protocol", "ext"), RT.keyword("tilt.bayeux.protocol", "id"));
    const__267 = (AFn)Tuple.create(RT.keyword(null, "clientId"), RT.keyword(null, "ext"), RT.keyword(null, "id"));
    const__268 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "channel"), RT.keyword("tilt.bayeux.protocol", "data"));
    const__269 = (AFn)Tuple.create(RT.keyword(null, "channel"), RT.keyword(null, "data"));
    const__270 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "clientId"), RT.keyword("tilt.bayeux.protocol", "ext"), RT.keyword("tilt.bayeux.protocol", "id"));
    const__271 = (AFn)Tuple.create(PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "map?"), Symbol.intern(null, "%") })) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "contains?"), Symbol.intern(null, "%"), RT.keyword(null, "channel") })) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "contains?"), Symbol.intern(null, "%"), RT.keyword(null, "data") })) })));
    const__272 = (Keyword)RT.keyword("tilt.bayeux.protocol", "publish-response");
    const__273 = PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "->"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "keys"), RT.keyword(null, "req-un"), Tuple.create(RT.keyword("tilt.bayeux.protocol", "channel"), RT.keyword("tilt.bayeux.protocol", "successful")), RT.keyword(null, "opt-un"), Tuple.create(RT.keyword("tilt.bayeux.protocol", "id"), RT.keyword("tilt.bayeux.protocol", "error"), RT.keyword("tilt.bayeux.protocol", "ext")) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "and"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("tilt.bayeux.protocol", "get?"), RT.keyword(null, "channel"), Symbol.intern("tilt.bayeux.protocol", "broadcast-channel?") })) })) }));
    const__274 = (AFn)Tuple.create(PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "keys"), RT.keyword(null, "req-un"), Tuple.create(RT.keyword("tilt.bayeux.protocol", "channel"), RT.keyword("tilt.bayeux.protocol", "successful")), RT.keyword(null, "opt-un"), Tuple.create(RT.keyword("tilt.bayeux.protocol", "id"), RT.keyword("tilt.bayeux.protocol", "error"), RT.keyword("tilt.bayeux.protocol", "ext")) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("tilt.bayeux.protocol", "get?"), RT.keyword(null, "channel"), Symbol.intern("tilt.bayeux.protocol", "broadcast-channel?") })));
    const__275 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "channel"), RT.keyword("tilt.bayeux.protocol", "successful"));
    const__276 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "id"), RT.keyword("tilt.bayeux.protocol", "error"), RT.keyword("tilt.bayeux.protocol", "ext"));
    const__277 = (AFn)Tuple.create(RT.keyword(null, "id"), RT.keyword(null, "error"), RT.keyword(null, "ext"));
    const__278 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "channel"), RT.keyword("tilt.bayeux.protocol", "successful"));
    const__279 = (AFn)Tuple.create(RT.keyword(null, "channel"), RT.keyword(null, "successful"));
    const__280 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "id"), RT.keyword("tilt.bayeux.protocol", "error"), RT.keyword("tilt.bayeux.protocol", "ext"));
    const__281 = (AFn)Tuple.create(PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "map?"), Symbol.intern(null, "%") })) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "contains?"), Symbol.intern(null, "%"), RT.keyword(null, "channel") })) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "contains?"), Symbol.intern(null, "%"), RT.keyword(null, "successful") })) })));
    const__282 = (Var)RT.var("tilt.bayeux.protocol", "channel-dispatch-value");
    const__286 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "channel")), RT.keyword(null, "as"), Symbol.intern(null, "message") })) })), RT.keyword(null, "line"), Integer.valueOf(263), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/protocol.clj" });
    const__287 = (Var)RT.var("tilt.bayeux.protocol", "request-spec");
    const__288 = (Keyword)RT.keyword(null, "default");
    const__289 = (Keyword)RT.keyword("tilt.bayeux.protocol", "request");
    const__290 = PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "multi-spec"), Symbol.intern("tilt.bayeux.protocol", "request-spec"), RT.keyword(null, "channel") }));
    const__291 = (Var)RT.var("clojure.spec.alpha", "multi-spec-impl");
    const__292 = (AFn)Symbol.intern("tilt.bayeux.protocol", "request-spec");
    const__293 = (Var)RT.var("tilt.bayeux.protocol", "response-spec");
    const__294 = (Keyword)RT.keyword("tilt.bayeux.protocol", "response");
    const__295 = PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "multi-spec"), Symbol.intern("tilt.bayeux.protocol", "response-spec"), RT.keyword(null, "channel") }));
    const__296 = (AFn)Symbol.intern("tilt.bayeux.protocol", "response-spec");
    const__297 = (Keyword)RT.keyword("tilt.bayeux.protocol", "delivery");
    const__298 = PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "->"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "keys"), RT.keyword(null, "req-un"), Tuple.create(RT.keyword("tilt.bayeux.protocol", "channel"), RT.keyword("tilt.bayeux.protocol", "data")), RT.keyword(null, "opt-un"), Tuple.create(RT.keyword("tilt.bayeux.protocol", "id"), RT.keyword("tilt.bayeux.protocol", "ext"), RT.keyword("tilt.bayeux.protocol", "advice")) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "and"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("tilt.bayeux.protocol", "get?"), RT.keyword(null, "channel"), Symbol.intern("tilt.bayeux.protocol", "broadcast-channel?") })) })) }));
    const__299 = (AFn)Tuple.create(PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "keys"), RT.keyword(null, "req-un"), Tuple.create(RT.keyword("tilt.bayeux.protocol", "channel"), RT.keyword("tilt.bayeux.protocol", "data")), RT.keyword(null, "opt-un"), Tuple.create(RT.keyword("tilt.bayeux.protocol", "id"), RT.keyword("tilt.bayeux.protocol", "ext"), RT.keyword("tilt.bayeux.protocol", "advice")) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("tilt.bayeux.protocol", "get?"), RT.keyword(null, "channel"), Symbol.intern("tilt.bayeux.protocol", "broadcast-channel?") })));
  }
  
  public static void __init3() {
    const__300 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "channel"), RT.keyword("tilt.bayeux.protocol", "data"));
    const__301 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "id"), RT.keyword("tilt.bayeux.protocol", "ext"), RT.keyword("tilt.bayeux.protocol", "advice"));
    const__302 = (AFn)Tuple.create(RT.keyword(null, "id"), RT.keyword(null, "ext"), RT.keyword(null, "advice"));
    const__303 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "channel"), RT.keyword("tilt.bayeux.protocol", "data"));
    const__304 = (AFn)Tuple.create(RT.keyword(null, "channel"), RT.keyword(null, "data"));
    const__305 = (AFn)Tuple.create(RT.keyword("tilt.bayeux.protocol", "id"), RT.keyword("tilt.bayeux.protocol", "ext"), RT.keyword("tilt.bayeux.protocol", "advice"));
    const__306 = (AFn)Tuple.create(PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "map?"), Symbol.intern(null, "%") })) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "contains?"), Symbol.intern(null, "%"), RT.keyword(null, "channel") })) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "contains?"), Symbol.intern(null, "%"), RT.keyword(null, "data") })) })));
  }
  
  static  {
    __init0();
    __init1();
    __init2();
    __init3();
    Compiler.pushNSandLoader(RT.classForName("tilt.bayeux.protocol__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
