package tilt.bayeux;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class response__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__12;
  
  public static final Var const__13;
  
  public static final AFn const__16;
  
  public static final Var const__17;
  
  public static final AFn const__20;
  
  public static final Var const__21;
  
  public static final AFn const__24;
  
  public static final Var const__25;
  
  public static final AFn const__28;
  
  public static final Var const__29;
  
  public static final AFn const__31;
  
  public static final Object const__32;
  
  public static final Var const__33;
  
  public static final AFn const__35;
  
  public static final Object const__36;
  
  public static final Var const__37;
  
  public static final AFn const__40;
  
  public static final Var const__41;
  
  public static final AFn const__43;
  
  public static final Object const__44;
  
  public static final Var const__45;
  
  public static final AFn const__47;
  
  public static final Object const__48;
  
  public static final Var const__49;
  
  public static final AFn const__51;
  
  public static final Object const__52;
  
  public static final Var const__53;
  
  public static final AFn const__55;
  
  public static final Object const__56;
  
  public static final Var const__57;
  
  public static final AFn const__59;
  
  public static final Object const__60;
  
  public static final Var const__61;
  
  public static final AFn const__64;
  
  public static final Var const__65;
  
  public static final AFn const__67;
  
  public static final Object const__68;
  
  public static final Var const__69;
  
  public static final AFn const__71;
  
  public static final Object const__72;
  
  public static final Var const__73;
  
  public static final AFn const__75;
  
  public static final Object const__76;
  
  public static final Var const__77;
  
  public static final AFn const__80;
  
  public static final Var const__81;
  
  public static final AFn const__84;
  
  public static final Var const__85;
  
  public static final AFn const__88;
  
  public static final Var const__89;
  
  public static final AFn const__92;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new response.fn__31911());
    const__3.setMeta((IPersistentMap)const__12);
    const__3.bindRoot(new response.service_error());
    const__13.setMeta((IPersistentMap)const__16);
    const__13.bindRoot(new response.generic_response());
    const__17.setMeta((IPersistentMap)const__20);
    const__17.bindRoot(new response.generic_error());
    const__21.setMeta((IPersistentMap)const__24);
    const__21.bindRoot(new response.generic_success());
    const__25.setMeta((IPersistentMap)const__28);
    const__25.bindRoot(new response.error_map());
    const__29.setMeta((IPersistentMap)const__31);
    const__29



































      
      .bindRoot(((IFn)const__25.getRawRoot()).invoke(const__32, "Minimum version not satisfied"));
    const__33.setMeta((IPersistentMap)const__35);
    const__33

      
      .bindRoot(((IFn)const__25.getRawRoot()).invoke(const__36, "No support for any of the given transports"));
    const__37.setMeta((IPersistentMap)const__40);
    const__37.bindRoot(new response.invalid_message_error());
    const__41.setMeta((IPersistentMap)const__43);
    const__41




      
      .bindRoot(((IFn)const__25.getRawRoot()).invoke(const__44, "No client id"));
    const__45.setMeta((IPersistentMap)const__47);
    const__45

      
      .bindRoot(((IFn)const__25.getRawRoot()).invoke(const__48, "Client id not recognized"));
    const__49.setMeta((IPersistentMap)const__51);
    const__49

      
      .bindRoot(((IFn)const__25.getRawRoot()).invoke(const__52, "Can't mix valid and invalid messages"));
    const__53.setMeta((IPersistentMap)const__55);
    const__53

      
      .bindRoot(((IFn)const__25.getRawRoot()).invoke(const__56, "Client ids in a single request must be identical"));
    const__57.setMeta((IPersistentMap)const__59);
    const__57

      
      .bindRoot(((IFn)const__25.getRawRoot()).invoke(const__60, "Publish messages without clientId and other kinds of requests must not be mixed."));
    const__61.setMeta((IPersistentMap)const__64);
    const__61.bindRoot(new response.other_error());
    const__65.setMeta((IPersistentMap)const__67);
    const__65




      
      .bindRoot(((IFn)const__25.getRawRoot()).invoke(const__68, "Session closed"));
    const__69.setMeta((IPersistentMap)const__71);
    const__69

      
      .bindRoot(((IFn)const__25.getRawRoot()).invoke(const__72, "Too many messages"));
    const__73.setMeta((IPersistentMap)const__75);
    const__73

      
      .bindRoot(((IFn)const__25.getRawRoot()).invoke(const__76, "Too many sessions"));
    const__77.setMeta((IPersistentMap)const__80);
    const__77.bindRoot(new response.error_response());
    const__81.setMeta((IPersistentMap)const__84);
    const__81.bindRoot(new response.success_response());
    const__85.setMeta((IPersistentMap)const__88);
    const__85.bindRoot(new response.handshake_error());
    const__89.setMeta((IPersistentMap)const__92);
    const__89.bindRoot(new response.handshake_success());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "tilt.bayeux.response");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("tilt.bayeux.response", "service-error");
    const__12 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "error-map")) })), RT.keyword(null, "doc"), "Errors that happen that aren't associated with a particular channel", RT.keyword(null, "line"), Integer.valueOf(4), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/response.clj" });
    const__13 = (Var)RT.var("tilt.bayeux.response", "generic-response");
    const__16 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "message")) })), RT.keyword(null, "line"), Integer.valueOf(12), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/response.clj" });
    const__17 = (Var)RT.var("tilt.bayeux.response", "generic-error");
    const__20 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "message"), Symbol.intern(null, "error-map")) })), RT.keyword(null, "line"), Integer.valueOf(19), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/response.clj" });
    const__21 = (Var)RT.var("tilt.bayeux.response", "generic-success");
    const__24 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "message")) })), RT.keyword(null, "line"), Integer.valueOf(24), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/response.clj" });
    const__25 = (Var)RT.var("tilt.bayeux.response", "error-map");
    const__28 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "code"), Symbol.intern(null, "message"), Symbol.intern(null, "&"), Symbol.intern(null, "args")) })), RT.keyword(null, "line"), Integer.valueOf(28), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/response.clj" });
    const__29 = (Var)RT.var("tilt.bayeux.response", "minimum-version-not-satisfied-error");
    const__31 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(37), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/response.clj" });
    const__32 = Long.valueOf(300L);
    const__33 = (Var)RT.var("tilt.bayeux.response", "no-transport-intersection-error");
    const__35 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(40), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/response.clj" });
    const__36 = Long.valueOf(301L);
    const__37 = (Var)RT.var("tilt.bayeux.response", "invalid-message-error");
    const__40 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "explanation")) })), RT.keyword(null, "line"), Integer.valueOf(43), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/response.clj" });
    const__41 = (Var)RT.var("tilt.bayeux.response", "no-client-id-error");
    const__43 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(46), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/response.clj" });
    const__44 = Long.valueOf(401L);
    const__45 = (Var)RT.var("tilt.bayeux.response", "client-id-not-recognized-error");
    const__47 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(49), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/response.clj" });
    const__48 = Long.valueOf(402L);
    const__49 = (Var)RT.var("tilt.bayeux.response", "mixed-valid-and-invalid-messages");
    const__51 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(52), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/response.clj" });
    const__52 = Long.valueOf(403L);
    const__53 = (Var)RT.var("tilt.bayeux.response", "mixed-client-ids-error");
    const__55 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(55), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/response.clj" });
    const__56 = Long.valueOf(404L);
    const__57 = (Var)RT.var("tilt.bayeux.response", "mixed-anon-and-identified-publish-messages-error");
    const__59 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(58), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/response.clj" });
    const__60 = Long.valueOf(405L);
    const__61 = (Var)RT.var("tilt.bayeux.response", "other-error");
    const__64 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "reason")) })), RT.keyword(null, "line"), Integer.valueOf(61), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/response.clj" });
    const__65 = (Var)RT.var("tilt.bayeux.response", "session-closed-error");
    const__67 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(64), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/response.clj" });
    const__68 = Long.valueOf(501L);
    const__69 = (Var)RT.var("tilt.bayeux.response", "too-many-messages-error");
    const__71 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(67), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/response.clj" });
    const__72 = Long.valueOf(502L);
    const__73 = (Var)RT.var("tilt.bayeux.response", "too-many-sessions-error");
    const__75 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(70), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/response.clj" });
    const__76 = Long.valueOf(503L);
    const__77 = (Var)RT.var("tilt.bayeux.response", "error-response");
    const__80 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "message"), Symbol.intern(null, "error-map")) })), RT.keyword(null, "line"), Integer.valueOf(73), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/response.clj" });
    const__81 = (Var)RT.var("tilt.bayeux.response", "success-response");
    const__84 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "message")) })), RT.keyword(null, "line"), Integer.valueOf(83), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/response.clj" });
    const__85 = (Var)RT.var("tilt.bayeux.response", "handshake-error");
    const__88 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "message"), Symbol.intern(null, "error-map"), RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "version"), Symbol.intern(null, "supported-connection-types")), RT.keyword(null, "as"), Symbol.intern(null, "server-capabilities") })) })), RT.keyword(null, "line"), Integer.valueOf(93), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/response.clj" });
    const__89 = (Var)RT.var("tilt.bayeux.response", "handshake-success");
    const__92 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "message"), Symbol.intern(null, "client-id"), RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "version"), Symbol.intern(null, "supported-connection-types")), RT.keyword(null, "as"), Symbol.intern(null, "server-capabilities") })) })), RT.keyword(null, "line"), Integer.valueOf(99), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/response.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("tilt.bayeux.response__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
