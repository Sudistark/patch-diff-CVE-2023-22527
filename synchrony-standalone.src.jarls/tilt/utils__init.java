package tilt;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class utils__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__11;
  
  public static final Var const__12;
  
  public static final AFn const__17;
  
  public static final Var const__18;
  
  public static final Var const__19;
  
  public static final AFn const__22;
  
  public static final Var const__23;
  
  public static final AFn const__26;
  
  public static final Var const__27;
  
  public static final AFn const__29;
  
  public static final Var const__30;
  
  public static final AFn const__34;
  
  public static final Var const__35;
  
  public static final AFn const__38;
  
  public static final Var const__39;
  
  public static final AFn const__42;
  
  public static final Var const__43;
  
  public static final AFn const__46;
  
  public static final Var const__47;
  
  public static final AFn const__50;
  
  public static final Var const__51;
  
  public static final AFn const__54;
  
  public static final Var const__55;
  
  public static final AFn const__58;
  
  public static final Var const__59;
  
  public static final AFn const__62;
  
  public static final Var const__63;
  
  public static final AFn const__66;
  
  public static final Var const__67;
  
  public static final AFn const__70;
  
  public static final Var const__71;
  
  public static final AFn const__73;
  
  public static final Var const__74;
  
  public static final AFn const__76;
  
  public static final Var const__77;
  
  public static final AFn const__80;
  
  public static final Var const__81;
  
  public static final AFn const__84;
  
  public static final Var const__85;
  
  public static final AFn const__88;
  
  public static final Var const__89;
  
  public static final AFn const__92;
  
  public static final Var const__93;
  
  public static final AFn const__95;
  
  public static final AFn const__96;
  
  public static final Var const__97;
  
  public static final AFn const__100;
  
  public static final Var const__101;
  
  public static final AFn const__104;
  
  public static final Var const__105;
  
  public static final AFn const__107;
  
  public static final AFn const__113;
  
  public static final Var const__114;
  
  public static final AFn const__117;
  
  public static final Var const__118;
  
  public static final AFn const__121;
  
  public static final Var const__122;
  
  public static final AFn const__125;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new utils.fn__31127());
    const__3.setMeta((IPersistentMap)const__11);
    const__3.bindRoot(new utils.bind__GT_());
    ((Var)const__3)









      
      .setMacro();
    const__12.setMeta((IPersistentMap)const__17);
    const__12


      
      .bindRoot(((IFn)const__18.getRawRoot()).invoke());
    const__19.setMeta((IPersistentMap)const__22);
    const__19.bindRoot(new utils.random_bytes());
    const__23.setMeta((IPersistentMap)const__26);
    const__23.bindRoot(new utils.random_hash());
    const__27.setMeta((IPersistentMap)const__29);
    const__27








      
      .bindRoot(((IFn)const__19.getRawRoot()).invoke());
    const__30.setMeta((IPersistentMap)const__34);
    const__30.bindRoot(new utils.secure_random_key_bytes());
    const__35.setMeta((IPersistentMap)const__38);
    const__35.bindRoot(new utils.secure_random_key_string());
    const__39.setMeta((IPersistentMap)const__42);
    const__39.bindRoot(new utils.deferred__GT_chan());
    const__43.setMeta((IPersistentMap)const__46);
    const__43.bindRoot(new utils.chan__GT_deferred());
    const__47.setMeta((IPersistentMap)const__50);
    const__47.bindRoot(new utils.update_pempty());
    const__51.setMeta((IPersistentMap)const__54);
    const__51.bindRoot(new utils.swap_some_BANG_());
    const__55.setMeta((IPersistentMap)const__58);
    const__55.bindRoot(new utils.ensure_set());
    const__59.setMeta((IPersistentMap)const__62);
    const__59.bindRoot(new utils.blocking_chan());
    const__63.setMeta((IPersistentMap)const__66);
    const__63.bindRoot(new utils.split_push_pull());
    const__67.setMeta((IPersistentMap)const__70);
    const__67.bindRoot(new utils.merge_defaults());
    const__71.setMeta((IPersistentMap)const__73);
    const__71.bindRoot(new utils.chan_QMARK_());
    const__74.setMeta((IPersistentMap)const__76);
    const__74.bindRoot(new utils.atom_QMARK_());
    const__77.setMeta((IPersistentMap)const__80);
    const__77.bindRoot(new utils.transducer_append());
    const__81.setMeta((IPersistentMap)const__84);
    const__81.bindRoot(new utils.preflight_request_QMARK_());
    const__85.setMeta((IPersistentMap)const__88);
    const__85.bindRoot(new utils.handle_preflight_request());
    const__89.setMeta((IPersistentMap)const__92);
    const__89.bindRoot(new utils.wrap_preflight_handler());
    const__93.setMeta((IPersistentMap)const__95);
    const__93.bindRoot(const__96);
    const__97.setMeta((IPersistentMap)const__100);
    const__97.bindRoot(new utils.wrap_simple_cors());
    const__101.setMeta((IPersistentMap)const__104);
    const__101.bindRoot(new utils.wrap_async());
    const__105.setMeta((IPersistentMap)const__107);
    const__105.bindRoot(const__113);
    const__114.setMeta((IPersistentMap)const__117);
    const__114.bindRoot(new utils.json_content_type_QMARK_());
    const__118.setMeta((IPersistentMap)const__121);
    const__118.bindRoot(new utils.websocket_request_QMARK_());
    const__122.setMeta((IPersistentMap)const__125);
    const__122.bindRoot(new utils.add_jitter());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "tilt.utils");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("tilt.utils", "bind->");
    const__11 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "value"), Symbol.intern(null, "sym"), Symbol.intern(null, "&"), Symbol.intern(null, "forms")) })), RT.keyword(null, "line"), Integer.valueOf(12), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/utils.clj" });
    const__12 = (Var)RT.var("tilt.utils", "secure-random-source");
    const__17 = (AFn)RT.map(new Object[] { RT.keyword(null, "tag"), RT.classForName("java.security.SecureRandom"), RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(15), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/utils.clj" });
    const__18 = (Var)RT.var("ginga.random", "get-secure-random");
    const__19 = (Var)RT.var("tilt.utils", "random-bytes");
    const__22 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(18), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/utils.clj" });
    const__23 = (Var)RT.var("tilt.utils", "random-hash");
    const__26 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(23), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/utils.clj" });
    const__27 = (Var)RT.var("tilt.utils", "secure-key-salt");
    const__29 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(26), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/utils.clj" });
    const__30 = (Var)RT.var("tilt.utils", "secure-random-key-bytes");
    const__34 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "bytes")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "bytes") }))) })), RT.keyword(null, "doc"), "Given a random key in the form of bytes, make it secure to use in\n  hashmaps or similar by running it through a hashing function with a\n  salt that changes on each restart.\n\n  References:\n  https://www.google.com/?q=random+hashing\n  https://martin.kleppmann.com/2012/06/18/java-hashcode-unsafe-for-distributed-systems.html\n  http://lemire.me/blog/2012/01/17/use-random-hashing-if-you-care-about-security/\n  https://events.ccc.de/congress/2012/Fahrplan/events/5152.en.html\n\n  https://www.google.com/?q=hashtable+lookup+timing+attack\n  https://gdtr.wordpress.com/2012/08/07/leaking-information-with-timing-attacks-on-hashtables-part-1/\n  https://news.ycombinator.com/item?id=8690405", RT.keyword(null, "line"), Integer.valueOf(28), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/utils.clj" });
    const__35 = (Var)RT.var("tilt.utils", "secure-random-key-string");
    const__38 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "str")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") }))) })), RT.keyword(null, "line"), Integer.valueOf(47), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/utils.clj" });
    const__39 = (Var)RT.var("tilt.utils", "deferred->chan");
    const__42 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "d")) })), RT.keyword(null, "line"), Integer.valueOf(50), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/utils.clj" });
    const__43 = (Var)RT.var("tilt.utils", "chan->deferred");
    const__46 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ch")) })), RT.keyword(null, "line"), Integer.valueOf(65), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/utils.clj" });
    const__47 = (Var)RT.var("tilt.utils", "update-pempty");
    const__50 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "k"), Symbol.intern(null, "f"), Symbol.intern(null, "&"), Symbol.intern(null, "args")) })), RT.keyword(null, "line"), Integer.valueOf(73), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/utils.clj" });
    const__51 = (Var)RT.var("tilt.utils", "swap-some!");
    const__54 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ref"), Symbol.intern(null, "f"), Symbol.intern(null, "&"), Symbol.intern(null, "args")) })), RT.keyword(null, "doc"), "Like clojure.core/swap!, but aborts and returns nil if either the value in ref is nil or f returns nil.", RT.keyword(null, "line"), Integer.valueOf(76), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/utils.clj" });
    const__55 = (Var)RT.var("tilt.utils", "ensure-set");
    const__58 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "coll")) })), RT.keyword(null, "line"), Integer.valueOf(86), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/utils.clj" });
    const__59 = (Var)RT.var("tilt.utils", "blocking-chan");
    const__62 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(89), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/utils.clj" });
    const__63 = (Var)RT.var("tilt.utils", "split-push-pull");
    const__66 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "compose"), Symbol.intern(null, "stop?"), Symbol.intern(null, "delay-ms")), RT.keyword(null, "as"), Symbol.intern(null, "opts") }), Symbol.intern(null, "from"), Symbol.intern(null, "push"), Symbol.intern(null, "pull")) })), RT.keyword(null, "doc"), "Alternately tries to put values taken from `from` onto `push` or\n  `pull`. It starts with offering a value to `pull` and switches to\n  `push` after `delay-ms`.\n\n  Any values received from `from` when there is already an offer in\n  progress will be composed into a single value using `compose`. Given\n  the current value, `stop?` indicates whether to stop taking from\n  `from` until an offer to `push` or `pull` succeeds.\n\n  A consumer can use the push/pull alternation to batch values in a\n  stream based on a timeout, while retaining the option to take from\n  pull to break a timeout (e.g. because a send window suddenly opened).", RT.keyword(null, "line"), Integer.valueOf(92), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/utils.clj" });
    const__67 = (Var)RT.var("tilt.utils", "merge-defaults");
    const__70 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "defaults")) })), RT.keyword(null, "line"), Integer.valueOf(125), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/utils.clj" });
    const__71 = (Var)RT.var("tilt.utils", "chan?");
    const__73 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(132), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/utils.clj" });
    const__74 = (Var)RT.var("tilt.utils", "atom?");
    const__76 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(133), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/utils.clj" });
    const__77 = (Var)RT.var("tilt.utils", "transducer-append");
    const__80 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "values")) })), RT.keyword(null, "line"), Integer.valueOf(135), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/utils.clj" });
    const__81 = (Var)RT.var("tilt.utils", "preflight-request?");
    const__84 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "request")) })), RT.keyword(null, "line"), Integer.valueOf(142), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/utils.clj" });
    const__85 = (Var)RT.var("tilt.utils", "handle-preflight-request");
    const__88 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.map(new Object[] { Symbol.intern(null, "acr-headers"), "access-control-request-headers", Symbol.intern(null, "acr-method"), "access-control-request-method", Symbol.intern(null, "origin"), "origin" }), RT.keyword(null, "headers"), RT.keyword(null, "as"), Symbol.intern(null, "request") })) })), RT.keyword(null, "doc"), "https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS\n  Doesn't handle the vary header as per spec. No other implementation I looked at does it either, so we'll ignore it for now.", RT.keyword(null, "line"), Integer.valueOf(145), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/utils.clj" });
    const__89 = (Var)RT.var("tilt.utils", "wrap-preflight-handler");
    const__92 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "h")) })), RT.keyword(null, "line"), Integer.valueOf(160), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/utils.clj" });
    const__93 = (Var)RT.var("tilt.utils", "p3p-header");
    const__95 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "This header is necessary to get IE11 to accept third party\n  cookies (such as a load-balancer sticky-session cookie). If this\n  header is not present, IE11 will block all withCredentials requests\n  that have a cookie set. This header will override any manual setting\n  in IE11, except the \"block all cookies\" (highest) setting.\n\n  This header doesn't help with Safari, which also blocks 3rd party\n  cookies by default.", RT.keyword(null, "line"), Integer.valueOf(167), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/utils.clj" });
    const__96 = (AFn)RT.map(new Object[] { "p3p", "CP=\"This is not a P3P policy! See http://www.atlassian.com/company/privacy for more info.\"" });
    const__97 = (Var)RT.var("tilt.utils", "wrap-simple-cors");
  }
  
  public static void __init1() {
    const__100 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "handler")) })), RT.keyword(null, "doc"), "https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS\n  Doesn't handle the vary header as per spec. No other implementation I looked at does it either, so we'll ignore it for now.", RT.keyword(null, "line"), Integer.valueOf(178), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/utils.clj" });
    const__101 = (Var)RT.var("tilt.utils", "wrap-async");
    const__104 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "handler")) })), RT.keyword(null, "line"), Integer.valueOf(192), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/utils.clj" });
    const__105 = (Var)RT.var("tilt.utils", "method-not-allowed-response");
    const__107 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(197), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/utils.clj" });
    const__113 = (AFn)RT.map(new Object[] { RT.keyword(null, "status"), Long.valueOf(405L), RT.keyword(null, "headers"), RT.map(new Object[] { "Content-Type", "text/plain" }), RT.keyword(null, "body"), "Method not allowed" });
    const__114 = (Var)RT.var("tilt.utils", "json-content-type?");
    const__117 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "request-response")) })), RT.keyword(null, "line"), Integer.valueOf(202), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/utils.clj" });
    const__118 = (Var)RT.var("tilt.utils", "websocket-request?");
    const__121 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "request")) })), RT.keyword(null, "line"), Integer.valueOf(210), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/utils.clj" });
    const__122 = (Var)RT.var("tilt.utils", "add-jitter");
    const__125 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "base-ms"), Symbol.intern(null, "jitter-ms")) })), RT.keyword(null, "line"), Integer.valueOf(223), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/utils.clj" });
  }
  
  static  {
    __init0();
    __init1();
    Compiler.pushNSandLoader(RT.classForName("tilt.utils__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
