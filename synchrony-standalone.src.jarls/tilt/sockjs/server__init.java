package tilt.sockjs;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.Delay;
import clojure.lang.IFn;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class server__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__9;
  
  public static final Var const__10;
  
  public static final AFn const__12;
  
  public static final Var const__13;
  
  public static final AFn const__15;
  
  public static final Var const__16;
  
  public static final Var const__17;
  
  public static final AFn const__19;
  
  public static final Var const__20;
  
  public static final Var const__21;
  
  public static final Var const__22;
  
  public static final Var const__23;
  
  public static final AFn const__27;
  
  public static final Var const__28;
  
  public static final AFn const__31;
  
  public static final Var const__32;
  
  public static final AFn const__35;
  
  public static final Var const__36;
  
  public static final AFn const__40;
  
  public static final Var const__41;
  
  public static final AFn const__44;
  
  public static final Var const__45;
  
  public static final AFn const__48;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new server.fn__58839());
    const__3.setMeta((IPersistentMap)const__9);
    const__3.bindRoot("o");
    const__10.setMeta((IPersistentMap)const__12);
    const__10.bindRoot("c[3000,\"Go away!\"]");
    const__13.setMeta((IPersistentMap)const__15);
    const__13















      
      .bindRoot(((IFn)const__16.getRawRoot()).invoke(new server.fn__58841()));
    const__17.setMeta((IPersistentMap)const__19);
    const__17


      
      .bindRoot(((IFn)const__20.getRawRoot()).invoke(((IFn)const__21.getRawRoot()).invoke(new server.fn__58843()), ((IFn)const__22.getRawRoot())
          
          .invoke(Tuple.create(const__10.getRawRoot()))));
    const__23.setMeta((IPersistentMap)const__27);
    const__23.bindRoot(new server.session());
    const__28.setMeta((IPersistentMap)const__31);
    const__28.bindRoot(new server.make_sockjs_ws_handler());
    const__32.setMeta((IPersistentMap)const__35);
    const__32.bindRoot(new Delay((IFn)new server.fn__58904()));
    const__36.setMeta((IPersistentMap)const__40);
    const__36.bindRoot(new server.entropy());
    const__41.setMeta((IPersistentMap)const__44);
    const__41.bindRoot(new server.make_info_handler());
    const__45.setMeta((IPersistentMap)const__48);
    const__45.bindRoot(new server.handler());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "tilt.sockjs.server");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("tilt.sockjs.server", "open-message");
    const__9 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(14), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/sockjs/server.clj" });
    const__10 = (Var)RT.var("tilt.sockjs.server", "close-message");
    const__12 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(15), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/sockjs/server.clj" });
    const__13 = (Var)RT.var("tilt.sockjs.server", "sockjs-up-xf");
    const__15 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(17), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/sockjs/server.clj" });
    const__16 = (Var)RT.var("clojure.core", "mapcat");
    const__17 = (Var)RT.var("tilt.sockjs.server", "sockjs-down-xf");
    const__19 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(21), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/sockjs/server.clj" });
    const__20 = (Var)RT.var("clojure.core", "comp");
    const__21 = (Var)RT.var("clojure.core", "map");
    const__22 = (Var)RT.var("tilt.utils", "transducer-append");
    const__23 = (Var)RT.var("tilt.sockjs.server", "session");
    const__27 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "up"), Symbol.intern(null, "down")), RT.keyword(null, "as"), Symbol.intern(null, "session") })) })), RT.keyword(null, "line"), Integer.valueOf(26), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/sockjs/server.clj" });
    const__28 = (Var)RT.var("tilt.sockjs.server", "make-sockjs-ws-handler");
    const__31 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "accept")), RT.keyword(null, "as"), Symbol.intern(null, "opts") })) })), RT.keyword(null, "line"), Integer.valueOf(29), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/sockjs/server.clj" });
    const__32 = (Var)RT.var("tilt.sockjs.server", "secure-random");
    const__35 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(63), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/sockjs/server.clj" });
    const__36 = (Var)RT.var("tilt.sockjs.server", "entropy");
    const__40 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "doc"), "'Info url must supply a good, unpredictable random number from the range <0; 2^32-1> to feed the browser.'", RT.keyword(null, "line"), Integer.valueOf(66), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/sockjs/server.clj" });
    const__41 = (Var)RT.var("tilt.sockjs.server", "make-info-handler");
    const__44 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(74), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/sockjs/server.clj" });
    const__45 = (Var)RT.var("tilt.sockjs.server", "handler");
    const__48 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "accept"), Symbol.intern(null, "prefix")), RT.keyword(null, "as"), Symbol.intern(null, "opts") })) })), RT.keyword(null, "line"), Integer.valueOf(85), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/sockjs/server.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("tilt.sockjs.server__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
