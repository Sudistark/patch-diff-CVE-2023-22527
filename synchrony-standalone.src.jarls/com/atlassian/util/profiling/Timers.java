package com.atlassian.util.profiling;

import com.atlassian.annotations.Internal;
import com.atlassian.util.profiling.strategy.MetricStrategy;
import com.atlassian.util.profiling.strategy.ProfilerStrategy;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Objects;
import javax.annotation.Nonnull;
import javax.annotation.ParametersAreNonnullByDefault;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@ParametersAreNonnullByDefault
@Internal
public class Timers {
  private static final ProfilerConfiguration CONFIGURATION = new ProfilerConfiguration();
  
  private static final Logger log = LoggerFactory.getLogger(Timers.class);
  
  private Timers() { throw new UnsupportedOperationException("Timers is an utility class and should not be instantiated"); }
  
  @Nonnull
  public static Timer concat(Timer... timers) { return new CompositeTimer(timers, null); }
  
  @Nonnull
  public static ProfilerConfiguration getConfiguration() { return CONFIGURATION; }
  
  public static void onRequestEnd() {
    for (ProfilerStrategy strategy : StrategiesRegistry.getProfilerStrategies()) {
      try {
        strategy.onRequestEnd();
      } catch (Exception e) {
        log.warn("Error cleaning up profiler state for {}", strategy.getClass().getName(), e);
      } 
    } 
    for (MetricStrategy strategy : StrategiesRegistry.getMetricStrategies()) {
      try {
        strategy.onRequestEnd();
      } catch (Exception e) {
        log.warn("Error cleaning up metrics state for {}", strategy.getClass().getName(), e);
      } 
    } 
  }
  
  @Nonnull
  public static Ticker start(String name) {
    if (CONFIGURATION.isEnabled())
      return timer(name).start(new String[0]); 
    return Ticker.NO_OP;
  }
  
  @Nonnull
  public static Ticker startWithMetric(String timerName) {
    if (CONFIGURATION.isEnabled())
      return timerWithMetric(timerName).start(new String[0]); 
    return Metrics.startTimer(timerName);
  }
  
  @Deprecated
  @Nonnull
  public static Ticker startWithMetric(String timerName, String metricName) {
    if (CONFIGURATION.isEnabled())
      return timerWithMetric(timerName, metricName).start(new String[0]); 
    return Metrics.startTimer(metricName);
  }
  
  @Deprecated
  @Nonnull
  public static Ticker startWithMetric(String timerName, RequiredMetricTag... metricTags) {
    if (CONFIGURATION.isEnabled())
      return timerWithMetric(timerName, metricTags).start(new String[0]); 
    return Metrics.startTimer(timerName, metricTags);
  }
  
  @Deprecated
  @Nonnull
  public static Ticker startWithMetric(String timerName, String metricName, RequiredMetricTag... metricTags) {
    if (CONFIGURATION.isEnabled())
      return timerWithMetric(timerName, metricName, metricTags).start(new String[0]); 
    return Metrics.startTimer(metricName, metricTags);
  }
  
  @Nonnull
  public static Timer timer(String name) { return new DefaultTimer((String)Objects.requireNonNull(name, "name")); }
  
  @Deprecated
  @Nonnull
  public static Timer timerWithMetric(String traceName, String metricName) { return timerWithMetric(traceName, metricName, Collections.emptySet()); }
  
  @Deprecated
  @Nonnull
  public static Timer timerWithMetric(String traceName, String metricName, RequiredMetricTag... tags) { return timerWithMetric(traceName, metricName, Arrays.asList(tags)); }
  
  @Deprecated
  @Nonnull
  public static Timer timerWithMetric(String traceName, String metricName, Collection<MetricTag.RequiredMetricTag> tags) { return timerWithMetric(traceName, Metrics.timer(metricName, tags)); }
  
  @Nonnull
  public static Timer timerWithMetric(String traceName, Metrics.Builder metricBuilder) { return timerWithMetric(traceName, metricBuilder.timer()); }
  
  @Nonnull
  public static Timer timerWithMetric(String traceName, MetricTimer metricTimer) {
    Timer timer = timer(traceName);
    return new Object(timer, metricTimer);
  }
  
  @Nonnull
  public static Timer timerWithMetric(String name) { return timerWithMetric(name, name); }
  
  @Deprecated
  @Nonnull
  public static Timer timerWithMetric(String name, Collection<MetricTag.RequiredMetricTag> tags) { return timerWithMetric(name, name, tags); }
  
  @Deprecated
  @Nonnull
  public static Timer timerWithMetric(String name, RequiredMetricTag... tags) { return timerWithMetric(name, name, Arrays.asList(tags)); }
}
