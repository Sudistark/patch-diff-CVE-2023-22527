package com.atlassian.util.profiling.filters;

import com.atlassian.annotations.Internal;
import com.atlassian.util.profiling.Ticker;
import com.atlassian.util.profiling.Timers;
import java.io.IOException;
import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;

@Internal
public class RequestProfilingFilter implements Filter {
  private static final String ACTIVATE_PARAM = "activate.param";
  
  private String activateParameterName;
  
  public void destroy() {}
  
  public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {
    try {
      if (this.activateParameterName == null || request.getParameter(this.activateParameterName) == null) {
        chain.doFilter(request, response);
      } else {
        String timerName = ((HttpServletRequest)request).getRequestURI();
        try(Ticker ignored = Timers.getConfiguration().enableForThread(); 
            Ticker ignored2 = Timers.start(timerName)) {
          chain.doFilter(request, response);
        } 
      } 
    } finally {
      Timers.onRequestEnd();
    } 
  }
  
  public void init(FilterConfig filterConfig) {
    if (filterConfig != null) {
      String param = filterConfig.getInitParameter("activate.param");
      if (param != null && !param.trim().isEmpty())
        this.activateParameterName = param.trim(); 
    } 
  }
}
