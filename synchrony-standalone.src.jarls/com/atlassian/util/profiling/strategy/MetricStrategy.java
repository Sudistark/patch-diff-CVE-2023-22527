package com.atlassian.util.profiling.strategy;

import com.atlassian.annotations.Internal;
import com.atlassian.util.profiling.MetricKey;
import com.atlassian.util.profiling.MetricsConfiguration;
import com.atlassian.util.profiling.MetricsFilter;
import com.atlassian.util.profiling.Ticker;
import java.time.Duration;
import java.util.concurrent.TimeUnit;
import javax.annotation.Nonnull;
import javax.annotation.ParametersAreNonnullByDefault;

@ParametersAreNonnullByDefault
@Internal
public interface MetricStrategy {
  default void onRequestEnd() {}
  
  default void setConfiguration(MetricsConfiguration configuration) {}
  
  @Nonnull
  Ticker startTimer(String paramString);
  
  @Nonnull
  default Ticker startTimer(MetricKey metricKey) { return startTimer(metricKey.getMetricName()); }
  
  @Nonnull
  default Ticker startLongRunningTimer(String metricName) { return Ticker.NO_OP; }
  
  @Nonnull
  default Ticker startLongRunningTimer(MetricKey metricKey) { return Ticker.NO_OP; }
  
  default void incrementCounter(MetricKey metricKey, long deltaValue) {}
  
  void updateHistogram(String paramString, long paramLong);
  
  default void updateHistogram(MetricKey metricKey, long value) { updateHistogram(metricKey.getMetricName(), value); }
  
  void updateTimer(String paramString, long paramLong, TimeUnit paramTimeUnit);
  
  default void updateTimer(MetricKey metricKey, Duration time) { updateTimer(metricKey.getMetricName(), time.toNanos(), TimeUnit.NANOSECONDS); }
  
  default void cleanupMetrics(MetricsFilter filter) {}
}
