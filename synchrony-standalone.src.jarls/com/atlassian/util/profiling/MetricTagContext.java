package com.atlassian.util.profiling;

import com.atlassian.annotations.Internal;
import com.atlassian.profiling.metrics.api.context.ContextFragment;
import com.atlassian.profiling.metrics.api.tags.OptionalTag;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;
import javax.annotation.Nonnull;

@Internal
public class MetricTagContext {
  private static final InheritableThreadLocal<Set<MetricTag.OptionalMetricTag>> threadLocal = new Object();
  
  @Nonnull
  public static ContextFragment put(@Nonnull OptionalTag... tags) {
    Objects.requireNonNull(tags, "tags");
    List<Closeable> closeableList = (List)Arrays.stream(tags).map(tag -> MetricTag.optionalOf(tag.getKey(), tag.getValue())).map(MetricTagContext::put).collect(Collectors.toList());
    return () -> closeableList.forEach(ContextFragment::close);
  }
  
  public static Closeable put(MetricTag.OptionalMetricTag tag) {
    Set<MetricTag.OptionalMetricTag> set = getOrCreateLocalSet();
    if (set.add(tag))
      return () -> set.remove(tag); 
    return () -> {
      
      };
  }
  
  @Nonnull
  public static Set<MetricTag.OptionalMetricTag> getAll() {
    set = (Set)threadLocal.get();
    return (set == null) ? Collections.emptySet() : new HashSet(set);
  }
  
  private static Set<MetricTag.OptionalMetricTag> getOrCreateLocalSet() {
    set = (Set)threadLocal.get();
    if (set == null)
      threadLocal.set(set = new HashSet()); 
    return set;
  }
}
