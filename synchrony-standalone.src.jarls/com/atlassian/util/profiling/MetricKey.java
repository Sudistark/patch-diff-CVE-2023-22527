package com.atlassian.util.profiling;

import com.atlassian.annotations.Internal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Objects;
import java.util.stream.Collectors;
import javax.annotation.Nonnull;
import javax.annotation.ParametersAreNonnullByDefault;
import javax.annotation.concurrent.Immutable;

@ParametersAreNonnullByDefault
@Immutable
@Internal
public final class MetricKey {
  private final String metricName;
  
  private final Collection<MetricTag.RequiredMetricTag> tags;
  
  private MetricKey(String metricName, Collection<MetricTag.RequiredMetricTag> tags) {
    this.metricName = (String)Objects.requireNonNull(metricName);
    this.tags = tags;
  }
  
  @Nonnull
  public String getMetricName() { return this.metricName; }
  
  @Nonnull
  public Collection<MetricTag.RequiredMetricTag> getTags() { return this.tags; }
  
  public String toString() { return this.tags.isEmpty() ? this.metricName : (this.metricName + getFormattedTags()); }
  
  private String getFormattedTags() { return (String)this.tags.stream().map(MetricTag::toString).collect(Collectors.joining(",", "[", "]")); }
  
  public boolean equals(Object o) {
    if (this == o)
      return true; 
    if (!(o instanceof MetricKey))
      return false; 
    MetricKey metricKey = (MetricKey)o;
    return (this.metricName.equals(metricKey.metricName) && this.tags
      .equals(metricKey.tags));
  }
  
  public int hashCode() { return Objects.hash(new Object[] { this.metricName, this.tags }); }
  
  public static MetricKey metricKey(String metricName) { return metricKey(metricName, Collections.emptyList()); }
  
  public static MetricKey metricKey(String metricName, Collection<MetricTag.RequiredMetricTag> tags) { return new MetricKey(metricName, new ArrayList(tags)); }
  
  public static MetricKey metricKey(String metricName, RequiredMetricTag... tags) { return metricKey(metricName, Arrays.asList(tags)); }
}
