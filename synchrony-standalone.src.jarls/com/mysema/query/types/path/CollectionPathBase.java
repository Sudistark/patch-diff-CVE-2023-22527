package com.mysema.query.types.path;

import com.mysema.query.types.ExpressionException;
import com.mysema.query.types.Path;
import com.mysema.query.types.PathImpl;
import com.mysema.query.types.PathMetadata;
import com.mysema.query.types.expr.CollectionExpressionBase;
import com.mysema.query.types.expr.SimpleExpression;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.util.Collection;
import javax.annotation.Nullable;

public abstract class CollectionPathBase<C extends Collection<E>, E, Q extends SimpleExpression<? super E>> extends CollectionExpressionBase<C, E> implements Path<C> {
  private static final long serialVersionUID = -9004995667633601298L;
  
  private final PathInits inits;
  
  public CollectionPathBase(PathImpl<C> mixin, PathInits inits) {
    super(mixin);
    this.inits = inits;
  }
  
  public abstract Q any();
  
  protected Q newInstance(Class<Q> queryType, PathMetadata<?> pm) {
    try {
      if (this.constructor == null)
        if (Constants.isTyped(queryType)) {
          try {
            this.constructor = queryType.getConstructor(new Class[] { Class.class, PathMetadata.class, PathInits.class });
            this.usePathInits = true;
          } catch (NoSuchMethodException e) {
            this.constructor = queryType.getConstructor(new Class[] { Class.class, PathMetadata.class });
          } 
        } else {
          try {
            this.constructor = queryType.getConstructor(new Class[] { PathMetadata.class, PathInits.class });
            this.usePathInits = true;
          } catch (NoSuchMethodException e) {
            this.constructor = queryType.getConstructor(new Class[] { PathMetadata.class });
          } 
        }  
      if (Constants.isTyped(queryType)) {
        if (this.usePathInits)
          return (Q)(SimpleExpression)this.constructor.newInstance(new Object[] { getElementType(), pm, this.inits }); 
        return (Q)(SimpleExpression)this.constructor.newInstance(new Object[] { getElementType(), pm });
      } 
      if (this.usePathInits)
        return (Q)(SimpleExpression)this.constructor.newInstance(new Object[] { pm, this.inits }); 
      return (Q)(SimpleExpression)this.constructor.newInstance(new Object[] { pm });
    } catch (NoSuchMethodException e) {
      throw new ExpressionException(e);
    } catch (InstantiationException e) {
      throw new ExpressionException(e);
    } catch (IllegalAccessException e) {
      throw new ExpressionException(e);
    } catch (InvocationTargetException e) {
      throw new ExpressionException(e);
    } 
  }
}
