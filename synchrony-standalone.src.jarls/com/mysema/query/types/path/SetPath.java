package com.mysema.query.types.path;

import com.mysema.query.types.ParametrizedPathImpl;
import com.mysema.query.types.Path;
import com.mysema.query.types.PathImpl;
import com.mysema.query.types.PathMetadata;
import com.mysema.query.types.PathMetadataFactory;
import com.mysema.query.types.Visitor;
import com.mysema.query.types.expr.SimpleExpression;
import java.lang.reflect.AnnotatedElement;
import java.util.Set;
import javax.annotation.Nullable;

public class SetPath<E, Q extends SimpleExpression<? super E>> extends CollectionPathBase<Set<E>, E, Q> {
  private static final long serialVersionUID = 4145848445507037373L;
  
  private final Class<E> elementType;
  
  private final PathImpl<Set<E>> pathMixin;
  
  @Nullable
  private Q any;
  
  private final Class<Q> queryType;
  
  public SetPath(Class<? super E> type, Class<Q> queryType, String variable) { this(type, queryType, PathMetadataFactory.forVariable(variable)); }
  
  public SetPath(Class<? super E> type, Class<Q> queryType, Path<?> parent, String property) { this(type, queryType, PathMetadataFactory.forProperty(parent, property)); }
  
  public SetPath(Class<? super E> type, Class<Q> queryType, PathMetadata<?> metadata) { this(type, queryType, metadata, PathInits.DIRECT); }
  
  public SetPath(Class<? super E> type, Class<Q> queryType, PathMetadata<?> metadata, PathInits inits) {
    super(new ParametrizedPathImpl(Set.class, metadata, new Class[] { type }), inits);
    this.elementType = type;
    this.queryType = queryType;
    this.pathMixin = (PathImpl)this.mixin;
  }
  
  public final <R, C> R accept(Visitor<R, C> v, C context) { return (R)v.visit(this.pathMixin, context); }
  
  public Q any() {
    if (this.any == null)
      this.any = newInstance(this.queryType, PathMetadataFactory.forCollectionAny(this)); 
    return (Q)this.any;
  }
  
  public Class<E> getElementType() { return this.elementType; }
  
  public PathMetadata<?> getMetadata() { return this.pathMixin.getMetadata(); }
  
  public Path<?> getRoot() { return this.pathMixin.getRoot(); }
  
  public AnnotatedElement getAnnotatedElement() { return this.pathMixin.getAnnotatedElement(); }
  
  public Class<?> getParameter(int index) {
    if (index == 0)
      return this.elementType; 
    throw new IndexOutOfBoundsException(String.valueOf(index));
  }
}
