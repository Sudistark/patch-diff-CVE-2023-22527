package com.mysema.query.types.query;

import com.mysema.query.QueryMetadata;
import com.mysema.query.types.Ops;
import com.mysema.query.types.SubQueryExpressionImpl;
import com.mysema.query.types.Visitor;
import com.mysema.query.types.expr.BooleanExpression;
import com.mysema.query.types.expr.BooleanOperation;
import javax.annotation.Nullable;

public final class BooleanSubQuery extends BooleanExpression implements ExtendedSubQueryExpression<Boolean> {
  private static final long serialVersionUID = -64156984110154969L;
  
  private final SubQueryExpressionImpl<Boolean> subQueryMixin;
  
  public BooleanSubQuery(QueryMetadata md) {
    super(new SubQueryExpressionImpl(Boolean.class, md));
    this.subQueryMixin = (SubQueryExpressionImpl)this.mixin;
  }
  
  public <R, C> R accept(Visitor<R, C> v, C context) { return (R)v.visit(this, context); }
  
  public BooleanExpression exists() {
    if (this.exists == null)
      this.exists = BooleanOperation.create(Ops.EXISTS, this.mixin); 
    return this.exists;
  }
  
  public QueryMetadata getMetadata() { return this.subQueryMixin.getMetadata(); }
  
  public BooleanExpression notExists() { return exists().not(); }
}
