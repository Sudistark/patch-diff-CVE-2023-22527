package com.mysema.query.types;

import com.google.common.collect.ImmutableSet;
import java.util.Set;

public final class Ops {
  private static final String NS = Ops.class.getName();
  
  public static final Operator<Boolean> EQ = new OperatorImpl(NS, "EQ");
  
  public static final Operator<Boolean> NE = new OperatorImpl(NS, "NE");
  
  public static final Operator<Boolean> IS_NULL = new OperatorImpl(NS, "IS_NULL");
  
  public static final Operator<Boolean> IS_NOT_NULL = new OperatorImpl(NS, "IS_NOT_NULL");
  
  public static final Operator<Boolean> INSTANCE_OF = new OperatorImpl(NS, "INSTANCE_OF");
  
  public static final Operator<Number> NUMCAST = new OperatorImpl(NS, "NUMCAST");
  
  public static final Operator<String> STRING_CAST = new OperatorImpl(NS, "STRING_CAST");
  
  public static final Operator<Object> ALIAS = new OperatorImpl(NS, "ALIAS");
  
  public static final Operator<Object> LIST = new OperatorImpl(NS, "LIST");
  
  public static final Operator<Object> SINGLETON = new OperatorImpl(NS, "SINGLETON");
  
  public static final Operator<Integer> ORDINAL = new OperatorImpl(NS, "ORDINAL");
  
  public static final Operator<Object> WRAPPED = new OperatorImpl(NS, "WRAPPED");
  
  public static final Operator<Object> ORDER = new OperatorImpl(NS, "ORDER");
  
  public static final Operator<Boolean> IN = new OperatorImpl(NS, "IN");
  
  public static final Operator<Boolean> NOT_IN = new OperatorImpl(NS, "NOT_IN");
  
  public static final Operator<Boolean> COL_IS_EMPTY = new OperatorImpl(NS, "COL_IS_EMPTY");
  
  public static final Operator<Number> COL_SIZE = new OperatorImpl(NS, "COL_SIZE");
  
  public static final Operator<Number> ARRAY_SIZE = new OperatorImpl(NS, "ARRAY_SIZE");
  
  public static final Operator<Boolean> CONTAINS_KEY = new OperatorImpl(NS, "CONTAINS_KEY");
  
  public static final Operator<Boolean> CONTAINS_VALUE = new OperatorImpl(NS, "CONTAINS_VALUE");
  
  public static final Operator<Number> MAP_SIZE = new OperatorImpl(NS, "MAP_SIZE");
  
  public static final Operator<Boolean> MAP_IS_EMPTY = new OperatorImpl(NS, "MAP_IS_EMPTY");
  
  public static final Operator<Boolean> AND = new OperatorImpl(NS, "AND");
  
  public static final Operator<Boolean> NOT = new OperatorImpl(NS, "NOT");
  
  public static final Operator<Boolean> OR = new OperatorImpl(NS, "OR");
  
  public static final Operator<Boolean> XNOR = new OperatorImpl(NS, "XNOR");
  
  public static final Operator<Boolean> XOR = new OperatorImpl(NS, "XOR");
  
  public static final Operator<Boolean> BETWEEN = new OperatorImpl(NS, "BETWEEN");
  
  public static final Operator<Boolean> GOE = new OperatorImpl(NS, "GOE");
  
  public static final Operator<Boolean> GT = new OperatorImpl(NS, "GT");
  
  public static final Operator<Boolean> LOE = new OperatorImpl(NS, "LOE");
  
  public static final Operator<Boolean> LT = new OperatorImpl(NS, "LT");
  
  public static final Operator<Number> NEGATE = new OperatorImpl(NS, "NEGATE");
  
  public static final Operator<Number> ADD = new OperatorImpl(NS, "ADD");
  
  public static final Operator<Number> DIV = new OperatorImpl(NS, "DIV");
  
  public static final Operator<Number> MULT = new OperatorImpl(NS, "MULT");
  
  public static final Operator<Number> SUB = new OperatorImpl(NS, "SUB");
  
  public static final Operator<Number> MOD = new OperatorImpl(NS, "MOD");
  
  public static final Operator<Character> CHAR_AT = new OperatorImpl(NS, "CHAR_AT");
  
  public static final Operator<String> CONCAT = new OperatorImpl(NS, "CONCAT");
  
  public static final Operator<String> LOWER = new OperatorImpl(NS, "LOWER");
  
  public static final Operator<String> SUBSTR_1ARG = new OperatorImpl(NS, "SUBSTR_1ARG");
  
  public static final Operator<String> SUBSTR_2ARGS = new OperatorImpl(NS, "SUBSTR_2ARGS");
  
  public static final Operator<String> TRIM = new OperatorImpl(NS, "TRIM");
  
  public static final Operator<String> UPPER = new OperatorImpl(NS, "UPPER");
  
  public static final Operator<Boolean> MATCHES = new OperatorImpl(NS, "MATCHES");
  
  public static final Operator<Boolean> MATCHES_IC = new OperatorImpl(NS, "MATCHES_IC");
  
  public static final Operator<Number> STRING_LENGTH = new OperatorImpl(NS, "STRING_LENGTH");
  
  public static final Operator<Boolean> STRING_IS_EMPTY = new OperatorImpl(NS, "STRING_IS_EMPTY");
  
  public static final Operator<Boolean> STARTS_WITH = new OperatorImpl(NS, "STARTS_WITH");
  
  public static final Operator<Boolean> STARTS_WITH_IC = new OperatorImpl(NS, "STARTS_WITH_IC");
  
  public static final Operator<Number> INDEX_OF_2ARGS = new OperatorImpl(NS, "INDEX_OF_2ARGS");
  
  public static final Operator<Number> INDEX_OF = new OperatorImpl(NS, "INDEX_OF");
  
  public static final Operator<Boolean> EQ_IGNORE_CASE = new OperatorImpl(NS, "EQ_IGNORE_CASE");
  
  public static final Operator<Boolean> ENDS_WITH = new OperatorImpl(NS, "ENDS_WITH");
  
  public static final Operator<Boolean> ENDS_WITH_IC = new OperatorImpl(NS, "ENDS_WITH_IC");
  
  public static final Operator<Boolean> STRING_CONTAINS = new OperatorImpl(NS, "STRING_CONTAINS");
  
  public static final Operator<Boolean> STRING_CONTAINS_IC = new OperatorImpl(NS, "STRING_CONTAINS_IC");
  
  public static final Operator<Boolean> LIKE = new OperatorImpl(NS, "LIKE");
  
  public static final Operator<Boolean> LIKE_IC = new OperatorImpl(NS, "LIKE_IC");
  
  public static final Operator<Boolean> LIKE_ESCAPE = new OperatorImpl(NS, "LIKE_ESCAPE");
  
  public static final Operator<Boolean> LIKE_ESCAPE_IC = new OperatorImpl(NS, "LIKE_ESCAPE_IC");
  
  public static final Operator<Object> CASE = new OperatorImpl(NS, "CASE");
  
  public static final Operator<Object> CASE_WHEN = new OperatorImpl(NS, "CASE_WHEN");
  
  public static final Operator<Object> CASE_ELSE = new OperatorImpl(NS, "CASE_ELSE");
  
  public static final Operator<Object> CASE_EQ = new OperatorImpl(NS, "CASE_EQ");
  
  public static final Operator<Object> CASE_EQ_WHEN = new OperatorImpl(NS, "CASE_EQ_WHEN");
  
  public static final Operator<Object> CASE_EQ_ELSE = new OperatorImpl(NS, "CASE_EQ_ELSE");
  
  public static final Operator<Object> COALESCE = new OperatorImpl(NS, "COALESCE");
  
  public static final Operator<Object> NULLIF = new OperatorImpl(NS, "NULLIF");
  
  public static final Operator<Boolean> EXISTS = new OperatorImpl(NS, "EXISTS");
  
  public static final Set<Operator<?>> equalsOps = ImmutableSet.of(EQ);
  
  public static final Set<Operator<?>> notEqualsOps = ImmutableSet.of(NE);
  
  public static final Set<Operator<?>> compareOps = ImmutableSet.of(EQ, NE, LT, GT, GOE, LOE, new Operator[0]);
  
  public static final Set<Operator<?>> aggOps = ImmutableSet.of(AggOps.AVG_AGG, AggOps.COUNT_AGG, AggOps.COUNT_DISTINCT_AGG, AggOps.MAX_AGG, AggOps.MIN_AGG, AggOps.SUM_AGG, new Operator[0]);
}
