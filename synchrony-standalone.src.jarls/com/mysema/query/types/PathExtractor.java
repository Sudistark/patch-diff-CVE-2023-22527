package com.mysema.query.types;

import java.util.List;

public final class PathExtractor extends Object implements Visitor<Path<?>, Void> {
  public static final PathExtractor DEFAULT = new PathExtractor();
  
  public Path<?> visit(Constant<?> expr, Void context) { return null; }
  
  public Path<?> visit(FactoryExpression<?> expr, Void context) { return visit(expr.getArgs()); }
  
  public Path<?> visit(Operation<?> expr, Void context) { return visit(expr.getArgs()); }
  
  public Path<?> visit(ParamExpression<?> expr, Void context) { return null; }
  
  public Path<?> visit(Path<?> expr, Void context) { return expr; }
  
  public Path<?> visit(SubQueryExpression<?> expr, Void context) { return null; }
  
  public Path<?> visit(TemplateExpression<?> expr, Void context) { return visit(expr.getArgs()); }
  
  private Path<?> visit(List<?> exprs) {
    for (Object e : exprs) {
      if (e instanceof Expression) {
        Path<?> path = (Path)((Expression)e).accept(this, null);
        if (path != null)
          return path; 
      } 
    } 
    return null;
  }
}
