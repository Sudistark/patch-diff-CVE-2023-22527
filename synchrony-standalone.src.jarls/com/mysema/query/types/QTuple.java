package com.mysema.query.types;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Maps;
import com.mysema.query.Tuple;
import java.util.List;
import java.util.Map;
import javax.annotation.concurrent.Immutable;

@Immutable
public class QTuple extends FactoryExpressionBase<Tuple> {
  private static final long serialVersionUID = -2640616030595420465L;
  
  private final ImmutableList<Expression<?>> args;
  
  private final ImmutableMap<Expression<?>, Integer> bindings;
  
  private static ImmutableMap<Expression<?>, Integer> createBindings(List<Expression<?>> exprs) {
    Map<Expression<?>, Integer> map = Maps.newHashMap();
    for (int i = 0; i < exprs.size(); i++) {
      Expression<?> e = (Expression)exprs.get(i);
      if (e instanceof Operation && ((Operation)e).getOperator() == Ops.ALIAS)
        map.put(((Operation)e).getArg(1), Integer.valueOf(i)); 
      map.put(e, Integer.valueOf(i));
    } 
    return ImmutableMap.copyOf(map);
  }
  
  public QTuple(Expression... args) {
    super(Tuple.class);
    this.args = ImmutableList.copyOf(args);
    this.bindings = createBindings(this.args);
  }
  
  public QTuple(ImmutableList<Expression<?>> args) {
    super(Tuple.class);
    this.args = args;
    this.bindings = createBindings(this.args);
  }
  
  public QTuple(Expression[]... args) {
    super(Tuple.class);
    ImmutableList.Builder<Expression<?>> builder = ImmutableList.builder();
    for (Expression[] exprs : args)
      builder.add(exprs); 
    this.args = builder.build();
    this.bindings = createBindings(this.args);
  }
  
  public Tuple newInstance(Object... a) { return new TupleImpl(this, a, null); }
  
  public <R, C> R accept(Visitor<R, C> v, C context) { return (R)v.visit(this, context); }
  
  public boolean equals(Object obj) {
    if (obj == this)
      return true; 
    if (obj instanceof FactoryExpression) {
      FactoryExpression<?> c = (FactoryExpression)obj;
      return (this.args.equals(c.getArgs()) && getType().equals(c.getType()));
    } 
    return false;
  }
  
  public List<Expression<?>> getArgs() { return this.args; }
}
