package com.mysema.query.types;

import java.io.ObjectStreamException;
import java.lang.reflect.Field;
import javax.annotation.concurrent.Immutable;

@Immutable
public final class OperatorImpl<T> extends Object implements Operator<T> {
  private static final long serialVersionUID = -2435035383548549877L;
  
  private final String id;
  
  private final int hashCode;
  
  public OperatorImpl(String ns, String local) { this(ns + "#" + local); }
  
  private OperatorImpl(String id) {
    this.id = id;
    this.hashCode = id.hashCode();
  }
  
  public String getId() { return this.id; }
  
  public String toString() { return this.id; }
  
  public int hashCode() { return this.hashCode; }
  
  private Object readResolve() throws ObjectStreamException {
    try {
      String[] names = this.id.split("#");
      Field opField = Class.forName(names[0]).getField(names[1]);
      return opField.get(null);
    } catch (NoSuchFieldException e) {
      throw new RuntimeException(e);
    } catch (ClassNotFoundException e) {
      throw new RuntimeException(e);
    } catch (IllegalAccessException e) {
      throw new RuntimeException(e);
    } 
  }
}
