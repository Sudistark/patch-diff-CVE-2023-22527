package com.mysema.query.types;

import com.google.common.collect.ImmutableList;
import java.util.List;
import javax.annotation.concurrent.Immutable;

@Immutable
public class TemplateExpressionImpl<T> extends ExpressionBase<T> implements TemplateExpression<T> {
  private static final long serialVersionUID = 6951623726800809083L;
  
  private final ImmutableList<?> args;
  
  private final Template template;
  
  public static <C> Expression<C> create(Class<C> cl, String template) { return new TemplateExpressionImpl(cl, TemplateFactory.DEFAULT.create(template), ImmutableList.of()); }
  
  public static <C> Expression<C> create(Class<C> cl, String template, Object one) { return new TemplateExpressionImpl(cl, TemplateFactory.DEFAULT.create(template), ImmutableList.of(one)); }
  
  public static <C> Expression<C> create(Class<C> cl, String template, Object one, Object two) { return new TemplateExpressionImpl(cl, TemplateFactory.DEFAULT.create(template), ImmutableList.of(one, two)); }
  
  public static <C> Expression<C> create(Class<C> cl, String template, Object... args) { return new TemplateExpressionImpl(cl, TemplateFactory.DEFAULT.create(template), args); }
  
  public static <C> Expression<C> create(Class<C> cl, Template template, Object... args) { return new TemplateExpressionImpl(cl, template, args); }
  
  protected TemplateExpressionImpl(Class<? extends T> type, Template template, Object... args) { this(type, template, ImmutableList.copyOf(args)); }
  
  public TemplateExpressionImpl(Class<? extends T> type, Template template, ImmutableList<?> args) {
    super(type);
    this.args = args;
    this.template = template;
  }
  
  public final Object getArg(int index) { return getArgs().get(index); }
  
  public final List<?> getArgs() { return this.args; }
  
  public final Template getTemplate() { return this.template; }
  
  public final boolean equals(Object o) {
    if (o == this)
      return true; 
    if (o instanceof TemplateExpression) {
      TemplateExpression<?> c = (TemplateExpression)o;
      return (c.getTemplate().equals(this.template) && c
        .getType().equals(getType()) && c
        .getArgs().equals(this.args));
    } 
    return false;
  }
  
  public final <R, C> R accept(Visitor<R, C> v, C context) { return (R)v.visit(this, context); }
}
