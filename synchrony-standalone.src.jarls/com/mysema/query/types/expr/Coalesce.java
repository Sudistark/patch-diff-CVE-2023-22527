package com.mysema.query.types.expr;

import com.mysema.query.types.ConstantImpl;
import com.mysema.query.types.Expression;
import com.mysema.query.types.ExpressionUtils;
import com.mysema.query.types.MutableExpressionBase;
import com.mysema.query.types.Ops;
import com.mysema.query.types.OrderSpecifier;
import com.mysema.query.types.Path;
import com.mysema.query.types.PathImpl;
import com.mysema.query.types.Visitor;
import java.util.ArrayList;
import java.util.List;

public class Coalesce<T extends Comparable> extends MutableExpressionBase<T> {
  private static final long serialVersionUID = 445439522266250417L;
  
  private final List<Expression<? extends T>> exprs = new ArrayList();
  
  public Coalesce(Class<? extends T> type, Expression... exprs) {
    super(type);
    for (Expression expr : exprs)
      add(expr); 
  }
  
  public Coalesce(Expression... exprs) { this((exprs.length > 0) ? exprs[0].getType() : Object.class, exprs); }
  
  public <R, C> R accept(Visitor<R, C> v, C context) { return (R)getValue().accept(v, context); }
  
  public ComparableExpression<T> getValue() {
    if (this.value == null)
      this.value = ComparableOperation.create(getType(), Ops.COALESCE, new Expression[] { getExpressionList() }); 
    return this.value;
  }
  
  public DslExpression<T> as(Path<T> alias) { return DslOperation.create(getType(), Ops.ALIAS, this, alias); }
  
  public DslExpression<T> as(String alias) { return as(new PathImpl(getType(), alias)); }
  
  public final Coalesce<T> add(Expression<T> expr) {
    this.value = null;
    this.exprs.add(expr);
    return this;
  }
  
  public OrderSpecifier<T> asc() { return getValue().asc(); }
  
  public OrderSpecifier<T> desc() { return getValue().desc(); }
  
  public final Coalesce<T> add(T constant) { return add(ConstantImpl.create(constant)); }
  
  public BooleanExpression asBoolean() { return BooleanOperation.create(Ops.COALESCE, getExpressionList()); }
  
  public DateExpression<T> asDate() { return DateOperation.create(getType(), Ops.COALESCE, getExpressionList()); }
  
  public DateTimeExpression<T> asDateTime() { return DateTimeOperation.create(getType(), Ops.COALESCE, getExpressionList()); }
  
  public EnumExpression<?> asEnum() { return EnumOperation.create(getType(), Ops.COALESCE, getExpressionList()); }
  
  public NumberExpression<?> asNumber() { return NumberOperation.create(getType(), Ops.COALESCE, getExpressionList()); }
  
  public StringExpression asString() { return StringOperation.create(Ops.COALESCE, getExpressionList()); }
  
  public TimeExpression<T> asTime() { return TimeOperation.create(getType(), Ops.COALESCE, getExpressionList()); }
  
  private Expression<?> getExpressionList() { return ExpressionUtils.list(getType(), this.exprs); }
  
  public boolean equals(Object o) {
    if (o == this)
      return true; 
    if (o instanceof Coalesce) {
      Coalesce<?> c = (Coalesce)o;
      return c.exprs.equals(this.exprs);
    } 
    return false;
  }
}
