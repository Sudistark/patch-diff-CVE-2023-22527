package com.mysema.query.types.expr;

import com.mysema.query.types.Expression;
import com.mysema.query.types.ExpressionUtils;
import com.mysema.query.types.Ops;
import com.mysema.query.types.Path;
import com.mysema.query.types.PathImpl;
import com.mysema.query.types.Predicate;
import javax.annotation.Nullable;

public abstract class BooleanExpression extends ComparableExpression<Boolean> implements Predicate {
  private static final long serialVersionUID = 3797956062512074164L;
  
  @Nullable
  public static BooleanExpression allOf(BooleanExpression... exprs) {
    BooleanExpression rv = null;
    for (BooleanExpression b : exprs)
      rv = (rv == null) ? b : rv.and(b); 
    return rv;
  }
  
  @Nullable
  public static BooleanExpression anyOf(BooleanExpression... exprs) {
    BooleanExpression rv = null;
    for (BooleanExpression b : exprs)
      rv = (rv == null) ? b : rv.or(b); 
    return rv;
  }
  
  public BooleanExpression(Expression<Boolean> mixin) { super(mixin); }
  
  public BooleanExpression as(Path<Boolean> alias) { return BooleanOperation.create(Ops.ALIAS, this.mixin, alias); }
  
  public BooleanExpression as(String alias) { return as(new PathImpl(Boolean.class, alias)); }
  
  public BooleanExpression and(@Nullable Predicate right) {
    right = (Predicate)ExpressionUtils.extract(right);
    if (right != null)
      return BooleanOperation.create(Ops.AND, this.mixin, right); 
    return this;
  }
  
  public BooleanExpression andAnyOf(Predicate... predicates) { return and(ExpressionUtils.anyOf(predicates)); }
  
  public BooleanExpression not() {
    if (this.not == null)
      this.not = BooleanOperation.create(Ops.NOT, this); 
    return this.not;
  }
  
  public BooleanExpression or(@Nullable Predicate right) {
    right = (Predicate)ExpressionUtils.extract(right);
    if (right != null)
      return BooleanOperation.create(Ops.OR, this.mixin, right); 
    return this;
  }
  
  public BooleanExpression orAllOf(Predicate... predicates) { return or(ExpressionUtils.allOf(predicates)); }
  
  public BooleanExpression isTrue() { return eq(Boolean.valueOf(true)); }
  
  public BooleanExpression isFalse() { return eq(Boolean.valueOf(false)); }
  
  public BooleanExpression eq(Boolean right) {
    if (right.booleanValue()) {
      if (this.eqTrue == null)
        this.eqTrue = super.eq(Boolean.valueOf(true)); 
      return this.eqTrue;
    } 
    if (this.eqFalse == null)
      this.eqFalse = super.eq(Boolean.valueOf(false)); 
    return this.eqFalse;
  }
}
