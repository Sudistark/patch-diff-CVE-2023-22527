package com.mysema.query.types.expr;

import com.mysema.query.types.ConstantImpl;
import com.mysema.query.types.Expression;
import com.mysema.query.types.Ops;
import com.mysema.query.types.Order;
import com.mysema.query.types.OrderSpecifier;
import javax.annotation.Nullable;

public abstract class ComparableExpressionBase<T extends Comparable> extends SimpleExpression<T> {
  private static final long serialVersionUID = 1460921109546656911L;
  
  public ComparableExpressionBase(Expression<T> mixin) { super(mixin); }
  
  public final OrderSpecifier<T> asc() {
    if (this.asc == null)
      this.asc = new OrderSpecifier(Order.ASC, this.mixin); 
    return this.asc;
  }
  
  public final Coalesce<T> coalesce(Expression... exprs) {
    Coalesce<T> coalesce = new Coalesce<T>(getType(), new Expression[] { this.mixin });
    for (Expression expr : exprs)
      coalesce.add(expr); 
    return coalesce;
  }
  
  public final Coalesce<T> coalesce(T... args) {
    Coalesce<T> coalesce = new Coalesce<T>(getType(), new Expression[] { this.mixin });
    for (T arg : args)
      coalesce.add(arg); 
    return coalesce;
  }
  
  public <A extends Number & Comparable<? super A>> NumberExpression<A> castToNum(Class<A> type) { return NumberOperation.create(type, Ops.NUMCAST, this.mixin, ConstantImpl.create(type)); }
  
  public final OrderSpecifier<T> desc() {
    if (this.desc == null)
      this.desc = new OrderSpecifier(Order.DESC, this.mixin); 
    return this.desc;
  }
  
  public StringExpression stringValue() {
    if (this.stringCast == null)
      this.stringCast = StringOperation.create(Ops.STRING_CAST, this.mixin); 
    return this.stringCast;
  }
}
