package com.mysema.query.types.expr;

import com.google.common.collect.ImmutableList;
import com.mysema.query.types.Expression;
import com.mysema.query.types.Operation;
import com.mysema.query.types.Operator;
import com.mysema.query.types.Ops;
import com.mysema.query.types.Predicate;
import com.mysema.query.types.PredicateOperation;
import com.mysema.query.types.Visitor;
import java.util.List;

public class BooleanOperation extends BooleanExpression implements Operation<Boolean> {
  private static final long serialVersionUID = 7432281499861357581L;
  
  private final PredicateOperation opMixin;
  
  public static BooleanExpression create(Operator<? super Boolean> op, Expression<?> one) { return new BooleanOperation(op, ImmutableList.of(one)); }
  
  public static BooleanExpression create(Operator<? super Boolean> op, Expression<?> one, Expression<?> two) { return new BooleanOperation(op, ImmutableList.of(one, two)); }
  
  public static BooleanExpression create(Operator<? super Boolean> op, Expression... args) { return new BooleanOperation(op, args); }
  
  protected BooleanOperation(Operator<? super Boolean> op, Expression... args) { this(op, ImmutableList.copyOf(args)); }
  
  protected BooleanOperation(Operator<? super Boolean> op, ImmutableList<Expression<?>> args) {
    super(new PredicateOperation(op, args));
    this.opMixin = (PredicateOperation)this.mixin;
  }
  
  public final <R, C> R accept(Visitor<R, C> v, C context) { return (R)v.visit(this.opMixin, context); }
  
  public Expression<?> getArg(int index) { return this.opMixin.getArg(index); }
  
  public List<Expression<?>> getArgs() { return this.opMixin.getArgs(); }
  
  public Operator<? super Boolean> getOperator() { return this.opMixin.getOperator(); }
  
  public BooleanExpression not() {
    if (this.opMixin.getOperator() == Ops.NOT && this.opMixin.getArg(0) instanceof BooleanExpression)
      return (BooleanExpression)this.opMixin.getArg(0); 
    return super.not();
  }
}
