package com.mysema.query.group;

import com.mysema.commons.lang.CloseableIterator;
import com.mysema.query.Projectable;
import com.mysema.query.Tuple;
import com.mysema.query.types.Expression;
import com.mysema.query.types.FactoryExpression;
import com.mysema.query.types.FactoryExpressionUtils;
import com.mysema.query.types.QTuple;

public class GroupByIterate<K, V> extends AbstractGroupByTransformer<K, CloseableIterator<V>> {
  GroupByIterate(Expression<K> key, Expression... expressions) { super(key, expressions); }
  
  public CloseableIterator<V> transform(Projectable projectable) {
    FactoryExpression<Tuple> expr = FactoryExpressionUtils.wrap(new QTuple(this.expressions));
    boolean hasGroups = false;
    for (Expression<?> e : expr.getArgs())
      hasGroups |= e instanceof GroupExpression; 
    if (hasGroups)
      expr = withoutGroupExpressions(expr); 
    CloseableIterator<Tuple> iter = projectable.iterate(expr);
    return new Object(this, iter);
  }
  
  protected V transform(Group group) { return (V)group; }
}
