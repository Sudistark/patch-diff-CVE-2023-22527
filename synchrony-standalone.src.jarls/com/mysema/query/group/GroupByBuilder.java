package com.mysema.query.group;

import com.mysema.commons.lang.CloseableIterator;
import com.mysema.query.ResultTransformer;
import com.mysema.query.types.Expression;
import com.mysema.query.types.FactoryExpression;
import com.mysema.query.types.FactoryExpressionUtils;
import java.util.List;
import java.util.Map;

public class GroupByBuilder<K> extends Object {
  private final Expression<K> key;
  
  public GroupByBuilder(Expression<K> key) { this.key = key; }
  
  public ResultTransformer<Map<K, Group>> as(Expression... expressions) { return new GroupByMap(this.key, expressions); }
  
  public ResultTransformer<CloseableIterator<Group>> iterate(Expression... expressions) { return new GroupByIterate(this.key, expressions); }
  
  public ResultTransformer<List<Group>> list(Expression... expressions) { return new GroupByList(this.key, expressions); }
  
  public <V> ResultTransformer<Map<K, V>> as(Expression<V> expression) {
    Expression<V> lookup = getLookup(expression);
    return new Object(this, this.key, new Expression[] { expression }, lookup);
  }
  
  public <V> ResultTransformer<CloseableIterator<V>> iterate(Expression<V> expression) {
    Expression<V> lookup = getLookup(expression);
    return new Object(this, this.key, new Expression[] { expression }, lookup);
  }
  
  public <V> ResultTransformer<List<V>> list(Expression<V> expression) {
    Expression<V> lookup = getLookup(expression);
    return new Object(this, this.key, new Expression[] { expression }, lookup);
  }
  
  private <V> Expression<V> getLookup(Expression<V> expression) {
    if (expression instanceof GroupExpression)
      return ((GroupExpression)expression).getExpression(); 
    return expression;
  }
  
  public <V> ResultTransformer<Map<K, V>> as(FactoryExpression<V> expression) {
    FactoryExpression<?> transformation = FactoryExpressionUtils.wrap(expression);
    List<Expression<?>> args = transformation.getArgs();
    return new Object(this, this.key, (Expression[])args.toArray(new Expression[args.size()]), transformation);
  }
  
  public <V> ResultTransformer<CloseableIterator<V>> iterate(FactoryExpression<V> expression) {
    FactoryExpression<?> transformation = FactoryExpressionUtils.wrap(expression);
    List<Expression<?>> args = transformation.getArgs();
    return new Object(this, this.key, (Expression[])args.toArray(new Expression[args.size()]), transformation);
  }
  
  public <V> ResultTransformer<List<V>> list(FactoryExpression<V> expression) {
    FactoryExpression<?> transformation = FactoryExpressionUtils.wrap(expression);
    List<Expression<?>> args = transformation.getArgs();
    return new Object(this, this.key, (Expression[])args.toArray(new Expression[args.size()]), transformation);
  }
}
