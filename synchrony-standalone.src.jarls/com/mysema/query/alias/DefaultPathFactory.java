package com.mysema.query.alias;

import com.mysema.query.types.Path;
import com.mysema.query.types.PathMetadata;
import com.mysema.query.types.path.ArrayPath;
import com.mysema.query.types.path.BooleanPath;
import com.mysema.query.types.path.CollectionPath;
import com.mysema.query.types.path.ComparableEntityPath;
import com.mysema.query.types.path.ComparablePath;
import com.mysema.query.types.path.DatePath;
import com.mysema.query.types.path.DateTimePath;
import com.mysema.query.types.path.EntityPathBase;
import com.mysema.query.types.path.EnumPath;
import com.mysema.query.types.path.ListPath;
import com.mysema.query.types.path.MapPath;
import com.mysema.query.types.path.NumberPath;
import com.mysema.query.types.path.SetPath;
import com.mysema.query.types.path.SimplePath;
import com.mysema.query.types.path.StringPath;
import com.mysema.query.types.path.TimePath;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class DefaultPathFactory implements PathFactory {
  public <T> Path<T[]> createArrayPath(Class<T[]> arrayType, PathMetadata<?> metadata) { return new ArrayPath(arrayType, metadata); }
  
  public Path<Boolean> createBooleanPath(PathMetadata<?> metadata) { return new BooleanPath(metadata); }
  
  public <E> Path<Collection<E>> createCollectionPath(Class<E> elementType, PathMetadata<?> metadata) { return new CollectionPath(elementType, EntityPathBase.class, metadata); }
  
  public <T extends Comparable<?>> Path<T> createComparablePath(Class<T> type, PathMetadata<?> metadata) { return new ComparablePath(type, metadata); }
  
  public <T extends Comparable<?>> Path<T> createDatePath(Class<T> type, PathMetadata<?> metadata) { return new DatePath(type, metadata); }
  
  public <T extends Comparable<?>> Path<T> createDateTimePath(Class<T> type, PathMetadata<?> metadata) { return new DateTimePath(type, metadata); }
  
  public <T> Path<T> createEntityPath(Class<T> type, PathMetadata<?> metadata) {
    if (Comparable.class.isAssignableFrom(type))
      return new ComparableEntityPath(type, metadata); 
    return new EntityPathBase(type, metadata);
  }
  
  public <T extends Enum<T>> Path<T> createEnumPath(Class<T> type, PathMetadata<?> metadata) { return new EnumPath(type, metadata); }
  
  public <E> Path<List<E>> createListPath(Class<E> elementType, PathMetadata<?> metadata) { return new ListPath(elementType, EntityPathBase.class, metadata); }
  
  public <K, V> Path<Map<K, V>> createMapPath(Class<K> keyType, Class<V> valueType, PathMetadata<?> metadata) { return new MapPath(keyType, valueType, EntityPathBase.class, metadata); }
  
  public <T extends Number & Comparable<T>> Path<T> createNumberPath(Class<T> type, PathMetadata<?> metadata) { return new NumberPath(type, metadata); }
  
  public <E> Path<Set<E>> createSetPath(Class<E> elementType, PathMetadata<?> metadata) { return new SetPath(elementType, EntityPathBase.class, metadata); }
  
  public <T> Path<T> createSimplePath(Class<T> type, PathMetadata<?> metadata) { return new SimplePath(type, metadata); }
  
  public Path<String> createStringPath(PathMetadata<?> metadata) { return new StringPath(metadata); }
  
  public <T extends Comparable<?>> Path<T> createTimePath(Class<T> type, PathMetadata<?> metadata) { return new TimePath(type, metadata); }
}
