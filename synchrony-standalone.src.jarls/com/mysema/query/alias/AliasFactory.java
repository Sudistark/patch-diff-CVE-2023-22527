package com.mysema.query.alias;

import com.google.common.cache.CacheBuilder;
import com.google.common.cache.LoadingCache;
import com.mysema.commons.lang.Pair;
import com.mysema.query.QueryException;
import com.mysema.query.types.EntityPath;
import com.mysema.query.types.Expression;
import java.util.concurrent.ExecutionException;
import javax.annotation.Nullable;
import net.sf.cglib.proxy.Enhancer;

public class AliasFactory {
  private final ThreadLocal<Expression<?>> current;
  
  private final PathFactory pathFactory;
  
  private final TypeSystem typeSystem;
  
  private final LoadingCache<Pair<Class<?>, String>, EntityPath<?>> pathCache;
  
  private final LoadingCache<Pair<Class<?>, Expression<?>>, ManagedObject> proxyCache;
  
  public AliasFactory(PathFactory pathFactory, TypeSystem typeSystem) {
    this.current = new ThreadLocal();
    this
      .proxyCache = CacheBuilder.newBuilder().build(new Object(this));
    this.pathFactory = pathFactory;
    this.typeSystem = typeSystem;
    this.pathCache = CacheBuilder.newBuilder().build(new Object(this, pathFactory));
  }
  
  public <A> A createAliasForExpr(Class<A> cl, Expression<? extends A> expr) {
    try {
      return (A)this.proxyCache.get(Pair.of(cl, expr));
    } catch (ExecutionException e) {
      throw new QueryException(e);
    } 
  }
  
  public <A> A createAliasForProperty(Class<A> cl, Object parent, Expression<?> path) { return (A)createProxy(cl, path); }
  
  public <A> A createAliasForVariable(Class<A> cl, String var) {
    try {
      Expression<?> path = (Expression)this.pathCache.get(Pair.of(cl, var));
      return (A)this.proxyCache.get(Pair.of(cl, path));
    } catch (ExecutionException e) {
      throw new QueryException(e);
    } 
  }
  
  protected <A> A createProxy(Class<A> cl, Expression<?> path) {
    Enhancer enhancer = new Enhancer();
    enhancer.setClassLoader(AliasFactory.class.getClassLoader());
    if (cl.isInterface()) {
      enhancer.setInterfaces(new Class[] { cl, ManagedObject.class });
    } else {
      enhancer.setSuperclass(cl);
      enhancer.setInterfaces(new Class[] { ManagedObject.class });
    } 
    PropertyAccessInvocationHandler propertyAccessInvocationHandler = new PropertyAccessInvocationHandler(path, this, this.pathFactory, this.typeSystem);
    enhancer.setCallback(propertyAccessInvocationHandler);
    return (A)enhancer.create();
  }
  
  @Nullable
  public <A extends Expression<?>> A getCurrent() { return (A)(Expression)this.current.get(); }
  
  @Nullable
  public <A extends Expression<?>> A getCurrentAndReset() {
    A rv = (A)getCurrent();
    reset();
    return rv;
  }
  
  public void reset() { this.current.set(null); }
  
  public void setCurrent(Expression<?> expr) { this.current.set(expr); }
}
