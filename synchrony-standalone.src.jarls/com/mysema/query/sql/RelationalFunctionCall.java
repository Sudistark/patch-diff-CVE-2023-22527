package com.mysema.query.sql;

import com.mysema.query.types.Template;
import com.mysema.query.types.TemplateExpression;
import com.mysema.query.types.TemplateExpressionImpl;
import com.mysema.query.types.TemplateFactory;
import com.mysema.query.types.Visitor;
import com.mysema.query.types.expr.SimpleExpression;
import java.util.List;

public class RelationalFunctionCall<T> extends SimpleExpression<T> implements TemplateExpression<T> {
  private static final long serialVersionUID = 256739044928186923L;
  
  private final TemplateExpression<T> templateMixin;
  
  private static Template createTemplate(String function, int argCount) {
    StringBuilder builder = new StringBuilder();
    builder.append(function);
    builder.append("(");
    for (int i = 0; i < argCount; i++) {
      if (i > 0)
        builder.append(", "); 
      builder.append("{" + i + "}");
    } 
    builder.append(")");
    return TemplateFactory.DEFAULT.create(builder.toString());
  }
  
  public static <T> RelationalFunctionCall<T> create(Class<? extends T> type, String function, Object... args) { return new RelationalFunctionCall(type, function, args); }
  
  public RelationalFunctionCall(Class<? extends T> type, String function, Object... args) {
    super(TemplateExpressionImpl.create(type, createTemplate(function, args.length), args));
    this.templateMixin = (TemplateExpression)this.mixin;
  }
  
  public final <R, C> R accept(Visitor<R, C> v, C context) { return (R)v.visit(this, context); }
  
  public Object getArg(int index) { return this.templateMixin.getArg(index); }
  
  public List<?> getArgs() { return this.templateMixin.getArgs(); }
  
  public Template getTemplate() { return this.templateMixin.getTemplate(); }
}
