package com.mysema.query.sql;

import com.mysema.query.QueryFlag;
import com.mysema.query.QueryMetadata;
import com.mysema.query.QueryModifiers;
import com.mysema.query.support.Expressions;

public class SQLServer2012Templates extends SQLServerTemplates {
  public static final SQLServer2012Templates DEFAULT = new SQLServer2012Templates();
  
  private String topTemplate = "top {0s} ";
  
  private String limitOffsetTemplate = "\noffset {1} rows fetch next {0} rows only";
  
  private String offsetTemplate = "\noffset {0} rows";
  
  public static SQLTemplates.Builder builder() { return new Object(); }
  
  public SQLServer2012Templates() { this('\\', false); }
  
  public SQLServer2012Templates(boolean quote) { this('\\', quote); }
  
  public SQLServer2012Templates(char escape, boolean quote) { super(escape, quote); }
  
  public void serialize(QueryMetadata metadata, boolean forCountRow, SQLSerializer context) {
    if (!forCountRow && metadata.getModifiers().isRestricting() && metadata.getOrderBy().isEmpty() && 
      !metadata.getJoins().isEmpty()) {
      QueryModifiers mod = metadata.getModifiers();
      if (mod.getOffset() == null) {
        metadata = metadata.clone();
        metadata.addFlag(new QueryFlag(QueryFlag.Position.AFTER_SELECT, 
              Expressions.template(Integer.class, this.topTemplate, new Object[] { mod.getLimit() })));
        context.serializeForQuery(metadata, forCountRow);
      } else {
        throw new IllegalStateException("offset not supported without order by");
      } 
    } else {
      context.serializeForQuery(metadata, forCountRow);
    } 
    if (!metadata.getFlags().isEmpty())
      context.serialize(QueryFlag.Position.END, metadata.getFlags()); 
  }
  
  protected void serializeModifiers(QueryMetadata metadata, SQLSerializer context) {
    if (!metadata.getOrderBy().isEmpty()) {
      QueryModifiers mod = metadata.getModifiers();
      if (mod.getLimit() == null) {
        context.handle(this.offsetTemplate, new Object[] { mod.getOffset() });
      } else if (mod.getOffset() == null) {
        context.handle(this.limitOffsetTemplate, new Object[] { mod.getLimit(), Integer.valueOf(0) });
      } else {
        context.handle(this.limitOffsetTemplate, new Object[] { mod.getLimit(), mod.getOffset() });
      } 
    } 
  }
}
