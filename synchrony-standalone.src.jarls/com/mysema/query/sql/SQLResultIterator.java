package com.mysema.query.sql;

import com.mysema.commons.lang.CloseableIterator;
import com.mysema.query.QueryException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.NoSuchElementException;
import javax.annotation.Nullable;

public abstract class SQLResultIterator<T> extends Object implements CloseableIterator<T> {
  @Nullable
  private Boolean next;
  
  private final Configuration configuration;
  
  private final ResultSet rs;
  
  private final Statement stmt;
  
  public SQLResultIterator(Configuration conf, Statement stmt, ResultSet rs) {
    this.next = null;
    this.configuration = conf;
    this.stmt = stmt;
    this.rs = rs;
  }
  
  public void close() {
    try {
      try {
        if (this.rs != null)
          this.rs.close(); 
      } finally {
        if (this.stmt != null)
          this.stmt.close(); 
      } 
    } catch (SQLException e) {
      throw this.configuration.translate(e);
    } 
  }
  
  public boolean hasNext() {
    if (this.next == null)
      try {
        this.next = Boolean.valueOf(this.rs.next());
      } catch (SQLException e) {
        close();
        throw this.configuration.translate(e);
      }  
    return this.next.booleanValue();
  }
  
  public T next() {
    if (hasNext()) {
      this.next = null;
      try {
        return (T)produceNext(this.rs);
      } catch (SQLException e) {
        close();
        throw this.configuration.translate(e);
      } catch (Exception e) {
        close();
        throw new QueryException(e);
      } 
    } 
    throw new NoSuchElementException();
  }
  
  protected abstract T produceNext(ResultSet paramResultSet) throws Exception;
  
  public void remove() {
    try {
      this.rs.deleteRow();
    } catch (SQLException e) {
      close();
      throw this.configuration.translate(e);
    } 
  }
}
