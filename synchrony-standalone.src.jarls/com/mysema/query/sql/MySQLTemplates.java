package com.mysema.query.sql;

import com.google.common.collect.ImmutableSet;
import com.mysema.query.types.Operator;
import com.mysema.query.types.Ops;
import java.util.Set;

public class MySQLTemplates extends SQLTemplates {
  protected static final Set<String> MYSQL_RESERVED_WORDS = ImmutableSet.of("ACCESSIBLE", "ADD", "ALL", "ALTER", "ANALYZE", "AND", new String[] { 
        "AS", "ASC", "ASENSITIVE", "BEFORE", "BETWEEN", "BIGINT", "BINARY", "BLOB", "BOTH", "BY", 
        "CALL", "CASCADE", "CASE", "CHANGE", "CHAR", "CHARACTER", "CHECK", "COLLATE", "COLUMN", "CONDITION", 
        "CONSTRAINT", "CONTINUE", "CONVERT", "CREATE", "CROSS", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", "CURSOR", 
        "DATABASE", "DATABASES", "DAY_HOUR", "DAY_MICROSECOND", "DAY_MINUTE", "DAY_SECOND", "DEC", "DECIMAL", "DECLARE", "DEFAULT", 
        "DELAYED", "DELETE", "DESC", "DESCRIBE", "DETERMINISTIC", "DISTINCT", "DISTINCTROW", "DIV", "DOUBLE", "DROP", 
        "DUAL", "EACH", "ELSE", "ELSEIF", "ENCLOSED", "ESCAPED", "EXISTS", "EXIT", "EXPLAIN", "FALSE", 
        "FETCH", "FLOAT", "FLOAT4", "FLOAT8", "FOR", "FORCE", "FOREIGN", "FROM", "FULLTEXT", "GRANT", 
        "GROUP", "HAVING", "HIGH_PRIORITY", "HOUR_MICROSECOND", "HOUR_MINUTE", "HOUR_SECOND", "IF", "IGNORE", "IN", "INDEX", 
        "INFILE", "INNER", "INOUT", "INSENSITIVE", "INSERT", "INT", "INT1", "INT2", "INT3", "INT4", 
        "INT8", "INTEGER", "INTERVAL", "INTO", "IS", "ITERATE", "JOIN", "KEY", "KEYS", "KILL", 
        "LEADING", "LEAVE", "LEFT", "LIKE", "LIMIT", "LINEAR", "LINES", "LOAD", "LOCALTIME", "LOCALTIMESTAMP", 
        "LOCK", "LONG", "LONGBLOB", "LONGTEXT", "LOOP", "LOW_PRIORITY", "MASTER_SSL_VERIFY_SERVER_CERT", "MATCH", "MAXVALUE", "MEDIUMBLOB", 
        "MEDIUMINT", "MEDIUMTEXT", "MIDDLEINT", "MINUTE_MICROSECOND", "MINUTE_SECOND", "MOD", "MODIFIES", "NATURAL", "NOT", "NO_WRITE_TO_BINLOG", 
        "NULL", "NUMERIC", "ON", "OPTIMIZE", "OPTION", "OPTIONALLY", "OR", "ORDER", "OUT", "OUTER", 
        "OUTFILE", "PRECISION", "PRIMARY", "PROCEDURE", "PURGE", "RANGE", "READ", "READS", "READ_WRITE", "REAL", 
        "REFERENCES", "REGEXP", "RELEASE", "RENAME", "REPEAT", "REPLACE", "REQUIRE", "RESIGNAL", "RESTRICT", "RETURN", 
        "REVOKE", "RIGHT", "RLIKE", "SCHEMA", "SCHEMAS", "SECOND_MICROSECOND", "SELECT", "SENSITIVE", "SEPARATOR", "SET", 
        "SHOW", "SIGNAL", "SMALLINT", "SPATIAL", "SPECIFIC", "SQL", "SQLEXCEPTION", "SQLSTATE", "SQLWARNING", "SQL_BIG_RESULT", 
        "SQL_CALC_FOUND_ROWS", "SQL_SMALL_RESULT", "SSL", "STARTING", "STRAIGHT_JOIN", "TABLE", "TERMINATED", "THEN", "TINYBLOB", "TINYINT", 
        "TINYTEXT", "TO", "TRAILING", "TRIGGER", "TRUE", "UNDO", "UNION", "UNIQUE", "UNLOCK", "UNSIGNED", 
        "UPDATE", "USAGE", "USE", "USING", "UTC_DATE", "UTC_TIME", "UTC_TIMESTAMP", "VALUES", "VARBINARY", "VARCHAR", 
        "VARCHARACTER", "VARYING", "WHEN", "WHERE", "WHILE", "WITH", "WRITE", "XOR", "YEAR_MONTH", "ZEROFILL" });
  
  public static final MySQLTemplates DEFAULT = new MySQLTemplates();
  
  public static SQLTemplates.Builder builder() { return new Object(); }
  
  public MySQLTemplates() { this('\\', false); }
  
  public MySQLTemplates(boolean quote) { this('\\', quote); }
  
  public MySQLTemplates(char escape, boolean quote) {
    super(MYSQL_RESERVED_WORDS, "`", escape, quote);
    setArraysSupported(false);
    setParameterMetadataAvailable(false);
    setLimitRequired(true);
    setSupportsUnquotedReservedWordsAsIdentifier(true);
    setNullsFirst(null);
    setNullsLast(null);
    setPrecedence(50, new Operator[] { Ops.EQ, Ops.EQ_IGNORE_CASE, Ops.NE });
    setPrecedence(70, new Operator[] { Ops.BETWEEN });
    add(Ops.MOD, "{0} % {1}", 30);
    add(Ops.CONCAT, "concat({0}, {1})", -1);
    add(Ops.StringOps.LPAD, "lpad({0},{1},' ')");
    add(Ops.StringOps.RPAD, "rpad({0},{1},' ')");
    if (escape == '\\') {
      add(Ops.LIKE, "{0} like {1}");
      add(Ops.ENDS_WITH, "{0} like {%1}");
      add(Ops.ENDS_WITH_IC, "{0l} like {%%1}");
      add(Ops.STARTS_WITH, "{0} like {1%}");
      add(Ops.STARTS_WITH_IC, "{0l} like {1%%}");
      add(Ops.STRING_CONTAINS, "{0} like {%1%}");
      add(Ops.STRING_CONTAINS_IC, "{0l} like {%%1%%}");
    } 
    add(Ops.MathOps.LOG, "log({1},{0})");
    add(Ops.MathOps.COSH, "(exp({0}) + exp({0} * -1)) / 2");
    add(Ops.MathOps.COTH, "(exp({0} * 2) + 1) / (exp({0} * 2) - 1)");
    add(Ops.MathOps.SINH, "(exp({0}) - exp({0} * -1)) / 2");
    add(Ops.MathOps.TANH, "(exp({0} * 2) - 1) / (exp({0} * 2) + 1)");
    add(Ops.AggOps.BOOLEAN_ANY, "bit_or({0})", 0);
    add(Ops.AggOps.BOOLEAN_ALL, "bit_and({0})", 0);
    add(Ops.DateTimeOps.DAY_OF_WEEK, "dayofweek({0})");
    add(Ops.DateTimeOps.DAY_OF_YEAR, "dayofyear({0})");
    add(Ops.DateTimeOps.YEAR_MONTH, "extract(year_month from {0})");
    add(Ops.DateTimeOps.YEAR_WEEK, "yearweek({0})");
    add(Ops.DateTimeOps.ADD_YEARS, "date_add({0}, interval {1s} year)");
    add(Ops.DateTimeOps.ADD_MONTHS, "date_add({0}, interval {1s} month)");
    add(Ops.DateTimeOps.ADD_WEEKS, "date_add({0}, interval {1s} week)");
    add(Ops.DateTimeOps.ADD_DAYS, "date_add({0}, interval {1s} day)");
    add(Ops.DateTimeOps.ADD_HOURS, "date_add({0}, interval {1s} hour)");
    add(Ops.DateTimeOps.ADD_MINUTES, "date_add({0}, interval {1s} minute)");
    add(Ops.DateTimeOps.ADD_SECONDS, "date_add({0}, interval {1s} second)");
    add(Ops.DateTimeOps.DIFF_YEARS, "timestampdiff(year,{0},{1})");
    add(Ops.DateTimeOps.DIFF_MONTHS, "timestampdiff(month,{0},{1})");
    add(Ops.DateTimeOps.DIFF_WEEKS, "timestampdiff(week,{0},{1})");
    add(Ops.DateTimeOps.DIFF_DAYS, "timestampdiff(day,{0},{1})");
    add(Ops.DateTimeOps.DIFF_HOURS, "timestampdiff(hour,{0},{1})");
    add(Ops.DateTimeOps.DIFF_MINUTES, "timestampdiff(minute,{0},{1})");
    add(Ops.DateTimeOps.DIFF_SECONDS, "timestampdiff(second,{0},{1})");
    add(Ops.DateTimeOps.TRUNC_YEAR, "str_to_date(concat(date_format({0},'%Y'),'-1-1'),'%Y-%m-%d')");
    add(Ops.DateTimeOps.TRUNC_MONTH, "str_to_date(concat(date_format({0},'%Y-%m'),'-1'),'%Y-%m-%d')");
    add(Ops.DateTimeOps.TRUNC_WEEK, "str_to_date(concat(date_format({0},'%Y-%u'),'-2'),'%Y-%u-%w')");
    add(Ops.DateTimeOps.TRUNC_DAY, "str_to_date(date_format({0},'%Y-%m-%d'),'%Y-%m-%d')");
    add(Ops.DateTimeOps.TRUNC_HOUR, "str_to_date(date_format({0},'%Y-%m-%d %k'),'%Y-%m-%d %k')");
    add(Ops.DateTimeOps.TRUNC_MINUTE, "str_to_date(date_format({0},'%Y-%m-%d %k:%i'),'%Y-%m-%d %k:%i')");
    add(Ops.DateTimeOps.TRUNC_SECOND, "str_to_date(date_format({0},'%Y-%m-%d %k:%i:%s'),'%Y-%m-%d %k:%i:%s')");
    addTypeNameToCode("bool", -7, true);
    addTypeNameToCode("tinyint unsigned", -6);
    addTypeNameToCode("bigint unsigned", -5);
    addTypeNameToCode("long varbinary", -4, true);
    addTypeNameToCode("mediumblob", -4);
    addTypeNameToCode("longblob", -4);
    addTypeNameToCode("blob", -4);
    addTypeNameToCode("tinyblob", -4);
    addTypeNameToCode("long varchar", -1, true);
    addTypeNameToCode("mediumtext", -1);
    addTypeNameToCode("longtext", -1);
    addTypeNameToCode("text", -1);
    addTypeNameToCode("tinytext", -1);
    addTypeNameToCode("integer unsigned", 4);
    addTypeNameToCode("int", 4);
    addTypeNameToCode("int unsigned", 4);
    addTypeNameToCode("mediumint", 4);
    addTypeNameToCode("mediumint unsigned", 4);
    addTypeNameToCode("smallint unsigned", 5);
    addTypeNameToCode("float", 7, true);
    addTypeNameToCode("double precision", 8, true);
    addTypeNameToCode("real", 8);
    addTypeNameToCode("enum", 12);
    addTypeNameToCode("set", 12);
    addTypeNameToCode("datetime", 93, true);
  }
  
  public String escapeLiteral(String str) {
    StringBuilder builder = new StringBuilder();
    for (char ch : super.escapeLiteral(str).toCharArray()) {
      if (ch == '\\')
        builder.append("\\"); 
      builder.append(ch);
    } 
    return builder.toString();
  }
  
  public String getCastTypeNameForCode(int code) {
    switch (code) {
      case -6:
      case -5:
      case 4:
      case 5:
        return "signed";
      case 3:
      case 6:
      case 7:
      case 8:
        return "decimal";
      case 12:
        return "char";
    } 
    return super.getCastTypeNameForCode(code);
  }
}
