package com.mysema.query.sql;

import com.mysema.query.QueryMetadata;
import com.mysema.query.QueryModifiers;
import com.mysema.query.types.Operator;
import com.mysema.query.types.Ops;

public class FirebirdTemplates extends SQLTemplates {
  public static final FirebirdTemplates DEFAULT = new FirebirdTemplates();
  
  private String limitOffsetTemplate = "\nrows {0} to {1}";
  
  private String limitTemplate = "\nrows {0}";
  
  private String offsetTemplate = "\nrows {0} to 2147483647";
  
  public static SQLTemplates.Builder builder() { return new Object(); }
  
  public FirebirdTemplates() { this('\\', false); }
  
  public FirebirdTemplates(boolean quote) { this('\\', quote); }
  
  public FirebirdTemplates(char escape, boolean quote) {
    super("\"", escape, quote);
    setDummyTable("RDB$DATABASE");
    setUnionsWrapped(false);
    setWrapSelectParameters(true);
    setArraysSupported(false);
    setPrecedence(50, new Operator[] { Ops.EQ, Ops.EQ_IGNORE_CASE, Ops.NE });
    add(Ops.CONCAT, "{0} || {1}", 19);
    add(Ops.CHAR_AT, "cast(substring({0} from {1s}+1 for 1) as char)");
    add(Ops.SUBSTR_1ARG, "substring({0} from {1s}+1)");
    add(Ops.SUBSTR_2ARGS, "substring({0} from {1s}+1 for {2s}-{1s})");
    add(Ops.INDEX_OF, "position({1},{0})-1", 40);
    add(Ops.INDEX_OF_2ARGS, "position({1},{0},{2s}+1)-1", 40);
    add(Ops.StringOps.LOCATE, "position({0},{1})");
    add(Ops.StringOps.LOCATE2, "position({0},{1},{2})");
    add(Ops.STRING_LENGTH, "char_length({0})");
    add(Ops.STRING_IS_EMPTY, "char_length({0}) = 0");
    add(Ops.AggOps.BOOLEAN_ANY, "any({0})");
    add(Ops.AggOps.BOOLEAN_ALL, "all({0})");
    add(Ops.MathOps.LOG, "log({1},{0})");
    add(Ops.MathOps.COSH, "(exp({0}) + exp({0} * -1)) / 2");
    add(Ops.MathOps.COTH, "(exp({0} * 2) + 1) / (exp({0} * 2) - 1)");
    add(Ops.MathOps.SINH, "(exp({0}) - exp({0} * -1)) / 2");
    add(Ops.MathOps.TANH, "(exp({0} * 2) - 1) / (exp({0} * 2) + 1)");
    add(Ops.MathOps.DEG, "{0} / pi() * 180.0", 30);
    add(Ops.MathOps.RAD, "({0} / 180.0) * pi()", 30);
    add(Ops.DateTimeOps.DATE, "cast({0} as date)");
    add(Ops.DateTimeOps.MILLISECOND, "extract(millisecond from {0})");
    add(Ops.DateTimeOps.YEAR_MONTH, "extract(year from {0}) * 100 + extract(month from {0})", 40);
    add(Ops.DateTimeOps.YEAR_WEEK, "extract(year from {0}) * 100 + extract(week from {0})", 40);
    add(Ops.DateTimeOps.DAY_OF_WEEK, "extract(weekday from {0})");
    add(Ops.DateTimeOps.DAY_OF_MONTH, "extract(day from {0})");
    add(Ops.DateTimeOps.ADD_YEARS, "dateadd(year,{1},{0})");
    add(Ops.DateTimeOps.ADD_MONTHS, "dateadd(month,{1},{0})");
    add(Ops.DateTimeOps.ADD_WEEKS, "dateadd(week,{1},{0})");
    add(Ops.DateTimeOps.ADD_DAYS, "dateadd(day,{1},{0})");
    add(Ops.DateTimeOps.ADD_HOURS, "dateadd(hour,{1},{0})");
    add(Ops.DateTimeOps.ADD_MINUTES, "dateadd(minute,{1},{0})");
    add(Ops.DateTimeOps.ADD_SECONDS, "dateadd(second,{1},{0})");
    add(Ops.DateTimeOps.DIFF_YEARS, "datediff(year,{0},{1})");
    add(Ops.DateTimeOps.DIFF_MONTHS, "datediff(month,{0},{1})");
    add(Ops.DateTimeOps.DIFF_WEEKS, "datediff(week,{0},{1})");
    add(Ops.DateTimeOps.DIFF_DAYS, "datediff(day,{0},{1})");
    add(Ops.DateTimeOps.DIFF_HOURS, "datediff(hour,{0},{1})");
    add(Ops.DateTimeOps.DIFF_MINUTES, "datediff(minute,{0},{1})");
    add(Ops.DateTimeOps.DIFF_SECONDS, "datediff(second,{0},{1})");
    add(Ops.DateTimeOps.TRUNC_YEAR, "cast(extract(year from {0}) || '-1-1' as date)");
    add(Ops.DateTimeOps.TRUNC_MONTH, "cast(substring(cast({0} as char(100)) from 1 for 7) || '-1' as date)");
    add(Ops.DateTimeOps.TRUNC_DAY, "cast(substring(cast({0} as char(100)) from 1 for 10) as date)");
    add(Ops.DateTimeOps.TRUNC_HOUR, "cast(substring(cast({0} as char(100)) from 1 for 13) || ':00:00' as timestamp)");
    add(Ops.DateTimeOps.TRUNC_MINUTE, "cast(substring(cast({0} as char(100)) from 1 for 16) || ':00' as timestamp)");
    add(Ops.DateTimeOps.TRUNC_SECOND, "cast(substring(cast({0} as char(100)) from 1 for 19) as timestamp)");
    addTypeNameToCode("smallint", 16, true);
    addTypeNameToCode("smallint", -7, true);
    addTypeNameToCode("smallint", -6, true);
    addTypeNameToCode("decimal", 8, true);
    addTypeNameToCode("blob sub_type 0", -4);
    addTypeNameToCode("blob sub_type 1", -1);
    addTypeNameToCode("double precision", 8);
    addTypeNameToCode("array", 1111);
    addTypeNameToCode("blob sub_type 0", 2004);
  }
  
  public String getCastTypeNameForCode(int code) {
    if (code == 12)
      return "varchar(256)"; 
    return super.getCastTypeNameForCode(code);
  }
  
  protected void serializeModifiers(QueryMetadata metadata, SQLSerializer context) {
    QueryModifiers mod = metadata.getModifiers();
    if (mod.isRestricting())
      if (mod.getLimit() != null) {
        if (mod.getOffset() != null) {
          context.handle(this.limitOffsetTemplate, new Object[] { Long.valueOf(mod.getOffset().longValue() + 1L), Long.valueOf(mod.getOffset().longValue() + mod.getLimit().longValue()) });
        } else {
          context.handle(this.limitTemplate, new Object[] { mod.getLimit() });
        } 
      } else {
        context.handle(this.offsetTemplate, new Object[] { Long.valueOf(mod.getOffset().longValue() + 1L) });
      }  
  }
}
