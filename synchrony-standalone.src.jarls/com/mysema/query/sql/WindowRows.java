package com.mysema.query.sql;

import com.google.common.collect.Lists;
import com.mysema.query.types.ConstantImpl;
import com.mysema.query.types.Expression;
import java.util.List;

public class WindowRows<A> extends Object {
  private static final String AND = " and";
  
  private static final String BETWEEN = " between";
  
  private static final String CURRENT_ROW = " current row";
  
  private static final String FOLLOWING = " following";
  
  private static final String PRECEDING = " preceding";
  
  private static final String UNBOUNDED = " unbounded";
  
  private final WindowFunction<A> rv;
  
  private final StringBuilder str;
  
  private final List<Expression<?>> args;
  
  private int offset;
  
  public WindowRows(WindowFunction<A> windowFunction, String prefix, int offset) {
    this.str = new StringBuilder();
    this.args = Lists.newArrayList();
    this.rv = windowFunction;
    this.offset = offset;
    this.str.append(prefix);
  }
  
  public Between between() {
    this.str.append(" between");
    return new Between(this);
  }
  
  public WindowFunction<A> unboundedPreceding() {
    this.str.append(" unbounded");
    this.str.append(" preceding");
    return this.rv.withRowsOrRange(this.str.toString(), this.args);
  }
  
  public WindowFunction<A> currentRow() {
    this.str.append(" current row");
    return this.rv.withRowsOrRange(this.str.toString(), this.args);
  }
  
  public WindowFunction<A> preceding(Expression<Integer> expr) {
    this.args.add(expr);
    this.str.append(" preceding");
    this.str.append(" {" + this.offset++ + "}");
    return this.rv.withRowsOrRange(this.str.toString(), this.args);
  }
  
  public WindowFunction<A> preceding(int i) { return preceding(ConstantImpl.create(i)); }
}
