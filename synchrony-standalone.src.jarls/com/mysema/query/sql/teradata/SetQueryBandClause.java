package com.mysema.query.sql.teradata;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.Maps;
import com.mysema.query.sql.Configuration;
import com.mysema.query.sql.SQLBindings;
import com.mysema.query.sql.SQLTemplates;
import com.mysema.query.sql.dml.AbstractSQLClause;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;

public class SetQueryBandClause extends AbstractSQLClause<SetQueryBandClause> {
  private final Connection connection;
  
  private boolean forSession = true;
  
  private final Map<String, String> values = Maps.newLinkedHashMap();
  
  private String queryString;
  
  private String parameter;
  
  public SetQueryBandClause(Connection connection, SQLTemplates templates) { this(connection, new Configuration(templates)); }
  
  public SetQueryBandClause(Connection connection, Configuration configuration) {
    super(configuration);
    this.connection = connection;
  }
  
  public SetQueryBandClause forSession() {
    this.queryString = null;
    this.forSession = true;
    return this;
  }
  
  public SetQueryBandClause forTransaction() {
    this.queryString = null;
    this.forSession = false;
    return this;
  }
  
  public SetQueryBandClause set(String key, String value) {
    this.queryString = null;
    this.values.put(key, value);
    return this;
  }
  
  public SetQueryBandClause set(Map<String, String> values) {
    this.queryString = null;
    this.values.putAll(values);
    return this;
  }
  
  public long execute() {
    stmt = null;
    try {
      stmt = this.connection.prepareStatement(toString());
      if (this.parameter != null)
        stmt.setString(1, this.parameter); 
      return 1L;
    } catch (SQLException e) {
      ImmutableList immutableList = (this.parameter != null) ? ImmutableList.of(this.parameter) : ImmutableList.of();
      throw this.configuration.translate(this.queryString, immutableList, e);
    } finally {
      if (stmt != null)
        close(stmt); 
    } 
  }
  
  public List<SQLBindings> getSQL() {
    SQLBindings bindings;
    if (this.configuration.getUseLiterals() || this.forSession) {
      bindings = new SQLBindings(toString(), ImmutableList.of());
    } else {
      bindings = new SQLBindings(toString(), ImmutableList.of(this.parameter));
    } 
    return ImmutableList.of(bindings);
  }
  
  public String toString() {
    if (this.queryString == null) {
      StringBuilder builder = new StringBuilder();
      for (Map.Entry<String, String> entry : this.values.entrySet()) {
        builder.append((String)entry.getKey()).append("=").append((String)entry.getValue());
        builder.append(";");
      } 
      if (this.configuration.getUseLiterals() || this.forSession) {
        this
          .queryString = "set query_band='" + this.configuration.getTemplates().escapeLiteral(builder.toString()) + (this.forSession ? "' for session" : "' for transaction");
        this.parameter = null;
      } else {
        this.queryString = "set query_band=?" + (this.forSession ? " for session" : " for transaction");
        this.parameter = builder.toString();
      } 
    } 
    return this.queryString;
  }
  
  public int getBatchCount() { return 0; }
}
