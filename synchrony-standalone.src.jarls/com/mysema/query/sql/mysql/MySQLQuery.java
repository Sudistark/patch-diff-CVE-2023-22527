package com.mysema.query.sql.mysql;

import com.google.common.base.Joiner;
import com.mysema.query.DefaultQueryMetadata;
import com.mysema.query.JoinFlag;
import com.mysema.query.QueryFlag;
import com.mysema.query.QueryMetadata;
import com.mysema.query.sql.AbstractSQLQuery;
import com.mysema.query.sql.Configuration;
import com.mysema.query.sql.MySQLTemplates;
import com.mysema.query.sql.SQLTemplates;
import java.io.File;
import java.sql.Connection;

public class MySQLQuery extends AbstractSQLQuery<MySQLQuery> {
  private static final String WITH_ROLLUP = "\nwith rollup ";
  
  private static final String STRAIGHT_JOIN = "straight_join ";
  
  private static final String SQL_SMALL_RESULT = "sql_small_result ";
  
  private static final String SQL_NO_CACHE = "sql_no_cache ";
  
  private static final String LOCK_IN_SHARE_MODE = "\nlock in share mode ";
  
  private static final String HIGH_PRIORITY = "high_priority ";
  
  private static final String SQL_CALC_FOUND_ROWS = "sql_calc_found_rows ";
  
  private static final String SQL_CACHE = "sql_cache ";
  
  private static final String SQL_BUFFER_RESULT = "sql_buffer_result ";
  
  private static final String SQL_BIG_RESULT = "sql_big_result ";
  
  private static final Joiner JOINER = Joiner.on(", ");
  
  public MySQLQuery(Connection conn) { this(conn, new Configuration(new MySQLTemplates()), new DefaultQueryMetadata()); }
  
  public MySQLQuery(Connection conn, SQLTemplates templates) { this(conn, new Configuration(templates), new DefaultQueryMetadata()); }
  
  public MySQLQuery(Connection conn, Configuration configuration) { this(conn, configuration, new DefaultQueryMetadata()); }
  
  public MySQLQuery(Connection conn, Configuration configuration, QueryMetadata metadata) { super(conn, configuration, metadata); }
  
  public MySQLQuery bigResult() { return (MySQLQuery)addFlag(QueryFlag.Position.AFTER_SELECT, "sql_big_result "); }
  
  public MySQLQuery bufferResult() { return (MySQLQuery)addFlag(QueryFlag.Position.AFTER_SELECT, "sql_buffer_result "); }
  
  public MySQLQuery cache() { return (MySQLQuery)addFlag(QueryFlag.Position.AFTER_SELECT, "sql_cache "); }
  
  public MySQLQuery calcFoundRows() { return (MySQLQuery)addFlag(QueryFlag.Position.AFTER_SELECT, "sql_calc_found_rows "); }
  
  public MySQLQuery highPriority() { return (MySQLQuery)addFlag(QueryFlag.Position.AFTER_SELECT, "high_priority "); }
  
  public MySQLQuery into(String var) { return (MySQLQuery)addFlag(QueryFlag.Position.END, "\ninto " + var); }
  
  public MySQLQuery intoDumpfile(File file) { return (MySQLQuery)addFlag(QueryFlag.Position.END, "\ninto dumpfile '" + file.getPath() + "'"); }
  
  public MySQLQuery intoOutfile(File file) { return (MySQLQuery)addFlag(QueryFlag.Position.END, "\ninto outfile '" + file.getPath() + "'"); }
  
  public MySQLQuery lockInShareMode() { return (MySQLQuery)addFlag(QueryFlag.Position.END, "\nlock in share mode "); }
  
  public MySQLQuery noCache() { return (MySQLQuery)addFlag(QueryFlag.Position.AFTER_SELECT, "sql_no_cache "); }
  
  public MySQLQuery smallResult() { return (MySQLQuery)addFlag(QueryFlag.Position.AFTER_SELECT, "sql_small_result "); }
  
  public MySQLQuery straightJoin() { return (MySQLQuery)addFlag(QueryFlag.Position.AFTER_SELECT, "straight_join "); }
  
  public MySQLQuery forceIndex(String... indexes) { return (MySQLQuery)addJoinFlag(" force index (" + JOINER.join(indexes) + ")", JoinFlag.Position.END); }
  
  public MySQLQuery ignoreIndex(String... indexes) { return (MySQLQuery)addJoinFlag(" ignore index (" + JOINER.join(indexes) + ")", JoinFlag.Position.END); }
  
  public MySQLQuery useIndex(String... indexes) { return (MySQLQuery)addJoinFlag(" use index (" + JOINER.join(indexes) + ")", JoinFlag.Position.END); }
  
  public MySQLQuery withRollup() { return (MySQLQuery)addFlag(QueryFlag.Position.AFTER_GROUP_BY, "\nwith rollup "); }
  
  public MySQLQuery clone(Connection conn) {
    MySQLQuery q = new MySQLQuery(conn, getConfiguration(), getMetadata().clone());
    q.clone(this);
    return q;
  }
}
