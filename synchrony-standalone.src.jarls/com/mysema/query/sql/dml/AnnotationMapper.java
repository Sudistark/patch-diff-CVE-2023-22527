package com.mysema.query.sql.dml;

import com.mysema.query.QueryException;
import com.mysema.query.sql.Column;
import com.mysema.query.sql.ColumnMetadata;
import com.mysema.query.sql.RelationalPath;
import com.mysema.query.sql.types.Null;
import com.mysema.query.types.Path;
import com.mysema.util.ReflectionUtils;
import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Map;

public class AnnotationMapper extends Object implements Mapper<Object> {
  public static final AnnotationMapper DEFAULT = new AnnotationMapper(false);
  
  public static final AnnotationMapper WITH_NULL_BINDINGS = new AnnotationMapper(true);
  
  private final boolean withNullBindings;
  
  public AnnotationMapper() { this(false); }
  
  public AnnotationMapper(boolean withNullBindings) { this.withNullBindings = withNullBindings; }
  
  public Map<Path<?>, Object> createMap(RelationalPath<?> path, Object object) {
    try {
      Map<String, Path<?>> columnToPath = new HashMap<String, Path<?>>();
      for (Path<?> column : path.getColumns())
        columnToPath.put(ColumnMetadata.getName(column), column); 
      Map<Path<?>, Object> values = new HashMap<Path<?>, Object>();
      for (Field field : ReflectionUtils.getFields(object.getClass())) {
        Column ann = (Column)field.getAnnotation(Column.class);
        if (ann != null) {
          field.setAccessible(true);
          Object propertyValue = field.get(object);
          if (propertyValue != null) {
            if (columnToPath.containsKey(ann.value()))
              values.put(columnToPath.get(ann.value()), propertyValue); 
            continue;
          } 
          if (this.withNullBindings)
            values.put(columnToPath.get(ann.value()), Null.DEFAULT); 
        } 
      } 
      return values;
    } catch (IllegalAccessException e) {
      throw new QueryException(e);
    } 
  }
}
