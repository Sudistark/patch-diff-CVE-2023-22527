package com.mysema.query.sql.dml;

import com.google.common.collect.Maps;
import com.mysema.query.sql.RelationalPath;
import com.mysema.query.sql.types.Null;
import com.mysema.query.types.Path;
import com.mysema.util.BeanMap;
import java.util.Map;

public class BeanMapper extends AbstractMapper<Object> {
  public static final BeanMapper DEFAULT = new BeanMapper(false);
  
  public static final BeanMapper WITH_NULL_BINDINGS = new BeanMapper(true);
  
  private final boolean withNullBindings;
  
  public BeanMapper() { this(false); }
  
  public BeanMapper(boolean withNullBindings) { this.withNullBindings = withNullBindings; }
  
  public Map<Path<?>, Object> createMap(RelationalPath<?> entity, Object bean) {
    Map<Path<?>, Object> values = Maps.newLinkedHashMap();
    BeanMap beanMap = new BeanMap(bean);
    Map<String, Path<?>> columns = getColumns(entity);
    for (Map.Entry<String, Path<?>> entry : columns.entrySet()) {
      Path<?> path = (Path)entry.getValue();
      if (beanMap.containsKey(entry.getKey())) {
        Object value = beanMap.get(entry.getKey());
        if (value != null) {
          values.put(path, value);
          continue;
        } 
        if (this.withNullBindings && !isPrimaryKeyColumn(entity, path))
          values.put(path, Null.DEFAULT); 
      } 
    } 
    return values;
  }
}
