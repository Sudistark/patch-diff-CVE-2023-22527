package com.mysema.query.sql.support;

import com.google.common.base.Function;
import com.google.common.base.Joiner;
import com.google.common.base.StandardSystemProperty;
import com.google.common.collect.Lists;
import com.mysema.query.QueryException;
import java.sql.SQLException;
import java.util.ArrayList;

class JavaSE6SQLExceptionWrapper extends SQLExceptionWrapper {
  public RuntimeException wrap(SQLException exception) {
    Iterable<Throwable> linkedSQLExceptions = getLinkedSQLExceptions(exception);
    return new QueryException(new WrappedSQLCauseException(linkedSQLExceptions, exception, null));
  }
  
  public RuntimeException wrap(String message, SQLException exception) {
    Iterable<Throwable> linkedSQLExceptions = getLinkedSQLExceptions(exception);
    return new QueryException(message, new WrappedSQLCauseException(linkedSQLExceptions, exception, null));
  }
  
  private static Iterable<Throwable> getLinkedSQLExceptions(SQLException exception) {
    ArrayList<Throwable> rv = Lists.newArrayList();
    SQLException nextException = exception.getNextException();
    while (nextException != null) {
      rv.add(nextException);
      nextException = nextException.getNextException();
    } 
    return rv;
  }
  
  private static final Joiner lineJoiner = Joiner.on(StandardSystemProperty.LINE_SEPARATOR.value());
  
  private static final Function<Throwable, String> exceptionMessageFunction = new Object();
}
