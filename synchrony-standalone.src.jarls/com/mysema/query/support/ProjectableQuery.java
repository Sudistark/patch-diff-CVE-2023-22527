package com.mysema.query.support;

import com.mysema.commons.lang.CloseableIterator;
import com.mysema.commons.lang.IteratorAdapter;
import com.mysema.query.NonUniqueResultException;
import com.mysema.query.Projectable;
import com.mysema.query.ResultTransformer;
import com.mysema.query.Tuple;
import com.mysema.query.types.Expression;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

public abstract class ProjectableQuery<Q extends ProjectableQuery<Q>> extends QueryBase<Q> implements Projectable {
  public ProjectableQuery(QueryMixin<Q> queryMixin) { super(queryMixin); }
  
  public List<Tuple> list(Expression... args) { return IteratorAdapter.asList(iterate(args)); }
  
  public <RT> List<RT> list(Expression<RT> projection) { return IteratorAdapter.asList(iterate(projection)); }
  
  public final <K, V> Map<K, V> map(Expression<K> key, Expression<V> value) {
    List<Tuple> list = list(new Expression[] { key, value });
    Map<K, V> results = new LinkedHashMap<K, V>(list.size());
    for (Tuple row : list)
      results.put(row.get(key), row.get(value)); 
    return results;
  }
  
  public final boolean notExists() { return !exists(); }
  
  public final Tuple singleResult(Expression... args) { return ((ProjectableQuery)limit(1L)).uniqueResult(args); }
  
  public final <RT> RT singleResult(Expression<RT> expr) { return (RT)((ProjectableQuery)limit(1L)).uniqueResult(expr); }
  
  public <T> T transform(ResultTransformer<T> transformer) { return (T)transformer.transform(this); }
  
  @Nullable
  protected <T> T uniqueResult(CloseableIterator<T> it) {
    try {
      if (it.hasNext()) {
        T rv = (T)it.next();
        if (it.hasNext())
          throw new NonUniqueResultException(); 
        return rv;
      } 
      object = null;
      return (T)object;
    } finally {
      it.close();
    } 
  }
}
