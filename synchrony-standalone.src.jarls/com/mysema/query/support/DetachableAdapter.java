package com.mysema.query.support;

import com.mysema.query.Detachable;
import com.mysema.query.Tuple;
import com.mysema.query.types.Expression;
import com.mysema.query.types.Predicate;
import com.mysema.query.types.expr.BooleanExpression;
import com.mysema.query.types.expr.ComparableExpression;
import com.mysema.query.types.expr.DateExpression;
import com.mysema.query.types.expr.DateTimeExpression;
import com.mysema.query.types.expr.NumberExpression;
import com.mysema.query.types.expr.StringExpression;
import com.mysema.query.types.expr.TimeExpression;
import com.mysema.query.types.query.BooleanSubQuery;
import com.mysema.query.types.query.ComparableSubQuery;
import com.mysema.query.types.query.DateSubQuery;
import com.mysema.query.types.query.DateTimeSubQuery;
import com.mysema.query.types.query.ListSubQuery;
import com.mysema.query.types.query.NumberSubQuery;
import com.mysema.query.types.query.SimpleSubQuery;
import com.mysema.query.types.query.StringSubQuery;
import com.mysema.query.types.query.TimeSubQuery;
import javax.annotation.Nullable;

public class DetachableAdapter implements Detachable {
  @Nullable
  private Detachable detachable;
  
  public DetachableAdapter() {}
  
  public DetachableAdapter(Detachable detachable) { this.detachable = detachable; }
  
  public NumberSubQuery<Long> count() { return this.detachable.count(); }
  
  public BooleanExpression exists() { return this.detachable.exists(); }
  
  public Detachable getDetachable() { return this.detachable; }
  
  public ListSubQuery<Tuple> list(Expression<?> first, Expression<?> second, Expression... rest) { return this.detachable.list(new Object[] { first, second, rest }); }
  
  public ListSubQuery<Tuple> list(Expression... args) { return this.detachable.list(args); }
  
  public <RT> ListSubQuery<RT> list(Expression<RT> projection) { return this.detachable.list(projection); }
  
  public ListSubQuery<Tuple> list(Object... args) { return this.detachable.list(args); }
  
  public BooleanExpression notExists() { return this.detachable.notExists(); }
  
  protected void setDetachable(Detachable detachable) { this.detachable = detachable; }
  
  public <RT extends Comparable<?>> ComparableSubQuery<RT> unique(ComparableExpression<RT> projection) { return this.detachable.unique(projection); }
  
  public <RT extends Comparable<?>> DateSubQuery<RT> unique(DateExpression<RT> projection) { return this.detachable.unique(projection); }
  
  public <RT extends Comparable<?>> DateTimeSubQuery<RT> unique(DateTimeExpression<RT> projection) { return this.detachable.unique(projection); }
  
  public SimpleSubQuery<Tuple> unique(Expression<?> first, Expression<?> second, Expression... rest) { return this.detachable.unique(new Object[] { first, second, rest }); }
  
  public SimpleSubQuery<Tuple> unique(Expression... args) { return this.detachable.unique(args); }
  
  public <RT> SimpleSubQuery<RT> unique(Expression<RT> projection) { return this.detachable.unique(projection); }
  
  public <RT extends Number & Comparable<?>> NumberSubQuery<RT> unique(NumberExpression<RT> projection) { return this.detachable.unique(projection); }
  
  public BooleanSubQuery unique(Predicate projection) { return this.detachable.unique(projection); }
  
  public StringSubQuery unique(StringExpression projection) { return this.detachable.unique(projection); }
  
  public <RT extends Comparable<?>> TimeSubQuery<RT> unique(TimeExpression<RT> projection) { return this.detachable.unique(projection); }
  
  public SimpleSubQuery<Tuple> unique(Object... args) { return this.detachable.unique(args); }
}
