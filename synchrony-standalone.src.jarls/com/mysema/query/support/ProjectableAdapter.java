package com.mysema.query.support;

import com.mysema.commons.lang.CloseableIterator;
import com.mysema.query.Projectable;
import com.mysema.query.ResultTransformer;
import com.mysema.query.SearchResults;
import com.mysema.query.Tuple;
import com.mysema.query.types.Expression;
import java.util.List;
import java.util.Map;

public class ProjectableAdapter<P extends Projectable> extends Object implements Projectable {
  private final P projectable;
  
  public ProjectableAdapter(P projectable) { this.projectable = projectable; }
  
  protected P getProjectable() { return (P)this.projectable; }
  
  public long count() { return this.projectable.count(); }
  
  public boolean exists() { return this.projectable.exists(); }
  
  public boolean notExists() { return this.projectable.notExists(); }
  
  public CloseableIterator<Tuple> iterate(Expression... args) { return this.projectable.iterate(args); }
  
  public <RT> CloseableIterator<RT> iterate(Expression<RT> projection) { return this.projectable.iterate(projection); }
  
  public List<Tuple> list(Expression[] args) { return this.projectable.list(args); }
  
  public <RT> List<RT> list(Expression<RT> projection) { return this.projectable.list(projection); }
  
  public SearchResults<Tuple> listResults(Expression... args) { return this.projectable.listResults(args); }
  
  public <RT> SearchResults<RT> listResults(Expression<RT> expr) { return this.projectable.listResults(expr); }
  
  public <K, V> Map<K, V> map(Expression<K> key, Expression<V> value) { return this.projectable.map(key, value); }
  
  public String toString() { return this.projectable.toString(); }
  
  public Tuple singleResult(Expression... args) { return this.projectable.singleResult(args); }
  
  public <RT> RT singleResult(Expression<RT> expr) { return (RT)this.projectable.singleResult(expr); }
  
  public <T> T transform(ResultTransformer<T> transformer) { return (T)this.projectable.transform(transformer); }
  
  public Tuple uniqueResult(Expression... args) { return this.projectable.uniqueResult(args); }
  
  public <RT> RT uniqueResult(Expression<RT> expr) { return (RT)this.projectable.uniqueResult(expr); }
}
