package com.mysema.query.support;

import com.google.common.collect.ImmutableList;
import com.mysema.query.types.CollectionExpression;
import com.mysema.query.types.Constant;
import com.mysema.query.types.Expression;
import com.mysema.query.types.ExpressionUtils;
import com.mysema.query.types.FactoryExpression;
import com.mysema.query.types.Operation;
import com.mysema.query.types.OperationImpl;
import com.mysema.query.types.ParamExpression;
import com.mysema.query.types.Path;
import com.mysema.query.types.PathImpl;
import com.mysema.query.types.PathMetadata;
import com.mysema.query.types.PathMetadataFactory;
import com.mysema.query.types.PathType;
import com.mysema.query.types.Predicate;
import com.mysema.query.types.PredicateOperation;
import com.mysema.query.types.SubQueryExpression;
import com.mysema.query.types.TemplateExpression;
import com.mysema.query.types.TemplateExpressionImpl;
import com.mysema.query.types.Templates;
import com.mysema.query.types.Visitor;
import com.mysema.query.types.expr.BooleanExpression;
import com.mysema.query.types.path.EntityPathBase;
import com.mysema.query.types.path.ListPath;
import com.mysema.query.types.template.BooleanTemplate;

public class CollectionAnyVisitor extends Object implements Visitor<Expression<?>, Context> {
  @Deprecated
  public static final Templates TEMPLATES = new Object();
  
  public static final CollectionAnyVisitor DEFAULT = new CollectionAnyVisitor();
  
  private static <T> Path<T> replaceParent(Path<T> path, Path<?> parent) {
    PathMetadata<?> metadata = new PathMetadata<?>(parent, path.getMetadata().getElement(), path.getMetadata().getPathType());
    if (path instanceof CollectionExpression) {
      CollectionExpression<?, ?> col = (CollectionExpression)path;
      return new ListPath(col.getParameter(0), com.mysema.query.types.path.SimplePath.class, metadata);
    } 
    return new PathImpl(path.getType(), metadata);
  }
  
  public Expression<?> visit(Constant<?> expr, Context context) { return expr; }
  
  public Expression<?> visit(TemplateExpression<?> expr, Context context) {
    Object[] args = new Object[expr.getArgs().size()];
    for (int i = 0; i < args.length; i++) {
      Context c = new Context();
      if (expr.getArg(i) instanceof Expression) {
        args[i] = ((Expression)expr.getArg(i)).accept(this, c);
      } else {
        args[i] = expr.getArg(i);
      } 
      context.add(c);
    } 
    if (context.replace) {
      if (expr.getType().equals(Boolean.class)) {
        BooleanExpression booleanExpression = BooleanTemplate.create(expr.getTemplate(), args);
        return !context.paths.isEmpty() ? exists(context, booleanExpression) : booleanExpression;
      } 
      return TemplateExpressionImpl.create(expr.getType(), expr.getTemplate(), args);
    } 
    return expr;
  }
  
  public Expression<?> visit(FactoryExpression<?> expr, Context context) { return expr; }
  
  public Expression<?> visit(Operation<?> expr, Context context) {
    Expression[] args = new Expression[expr.getArgs().size()];
    for (int i = 0; i < args.length; i++) {
      Context c = new Context();
      args[i] = (Expression)expr.getArg(i).accept(this, c);
      context.add(c);
    } 
    if (context.replace) {
      if (expr.getType().equals(Boolean.class)) {
        PredicateOperation predicateOperation = new PredicateOperation(expr.getOperator(), ImmutableList.copyOf(args));
        return !context.paths.isEmpty() ? exists(context, predicateOperation) : predicateOperation;
      } 
      return new OperationImpl(expr.getType(), expr.getOperator(), ImmutableList.copyOf(args));
    } 
    return expr;
  }
  
  protected Predicate exists(Context c, Predicate condition) { return condition; }
  
  public Expression<?> visit(Path<?> expr, Context context) {
    PathImpl pathImpl;
    if (expr.getMetadata().getPathType() == PathType.COLLECTION_ANY) {
      Path<?> parent = (Path)expr.getMetadata().getParent().accept(this, context);
      pathImpl = new PathImpl(expr.getType(), PathMetadataFactory.forCollectionAny(parent));
      EntityPathBase entityPathBase = new EntityPathBase(pathImpl.getType(), ExpressionUtils.createRootVariable(pathImpl));
      context.add(pathImpl, entityPathBase);
      return entityPathBase;
    } 
    if (pathImpl.getMetadata().getParent() != null) {
      Context c = new Context();
      Path<?> parent = (Path)pathImpl.getMetadata().getParent().accept(this, c);
      if (c.replace) {
        context.add(c);
        return replaceParent(pathImpl, parent);
      } 
    } 
    return pathImpl;
  }
  
  public Expression<?> visit(SubQueryExpression<?> expr, Context context) { return expr; }
  
  public Expression<?> visit(ParamExpression<?> expr, Context context) { return expr; }
}
