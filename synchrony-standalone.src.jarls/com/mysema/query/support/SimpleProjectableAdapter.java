package com.mysema.query.support;

import com.mysema.commons.lang.CloseableIterator;
import com.mysema.query.FilteredClause;
import com.mysema.query.Projectable;
import com.mysema.query.QueryModifiers;
import com.mysema.query.SearchResults;
import com.mysema.query.SimpleProjectable;
import com.mysema.query.SimpleQuery;
import com.mysema.query.types.Expression;
import com.mysema.query.types.OrderSpecifier;
import com.mysema.query.types.ParamExpression;
import com.mysema.query.types.Predicate;
import java.util.List;

public class SimpleProjectableAdapter<T> extends Object implements SimpleQuery<SimpleProjectableAdapter<T>>, SimpleProjectable<T> {
  private final Projectable projectable;
  
  private final Expression<T> projection;
  
  private final SimpleQuery<?> query;
  
  public <Q extends SimpleQuery<?> & Projectable> SimpleProjectableAdapter(Q query, Expression<T> projection) { this(query, (Projectable)query, projection); }
  
  public SimpleProjectableAdapter(SimpleQuery<?> query, Projectable projectable, Expression<T> projection) {
    this.query = query;
    this.projectable = projectable;
    this.projection = projection;
  }
  
  public boolean exists() { return this.projectable.exists(); }
  
  public boolean notExists() { return this.projectable.notExists(); }
  
  public long count() { return this.projectable.count(); }
  
  public SimpleProjectableAdapter<T> distinct() {
    this.query.distinct();
    return this;
  }
  
  public SimpleProjectableAdapter<T> limit(long limit) {
    this.query.limit(limit);
    return this;
  }
  
  public CloseableIterator<T> iterate() { return this.projectable.iterate(this.projection); }
  
  public List<T> list() { return this.projectable.list(this.projection); }
  
  public SearchResults<T> listResults() { return this.projectable.listResults(this.projection); }
  
  public SimpleProjectableAdapter<T> offset(long offset) {
    this.query.offset(offset);
    return this;
  }
  
  public SimpleProjectableAdapter<T> orderBy(OrderSpecifier... o) {
    this.query.orderBy(o);
    return this;
  }
  
  public SimpleProjectableAdapter<T> restrict(QueryModifiers modifiers) {
    this.query.restrict(modifiers);
    return this;
  }
  
  public <P> SimpleProjectableAdapter<T> set(ParamExpression<P> param, P value) {
    this.query.set(param, value);
    return this;
  }
  
  public String toString() { return this.query.toString(); }
  
  public T singleResult() { return (T)this.projectable.singleResult(this.projection); }
  
  public T uniqueResult() { return (T)this.projectable.uniqueResult(this.projection); }
  
  public SimpleProjectableAdapter<T> where(Predicate... e) {
    this.query.where(e);
    return this;
  }
}
