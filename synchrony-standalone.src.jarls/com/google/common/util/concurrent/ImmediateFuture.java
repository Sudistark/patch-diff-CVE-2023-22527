package com.google.common.util.concurrent;

import com.google.common.annotations.GwtCompatible;
import com.google.common.base.Preconditions;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Executor;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;

@ElementTypesAreNonnullByDefault
@GwtCompatible
class ImmediateFuture<V> extends Object implements ListenableFuture<V> {
  static final ListenableFuture<?> NULL = new ImmediateFuture(null);
  
  private static final Logger log = Logger.getLogger(ImmediateFuture.class.getName());
  
  @ParametricNullness
  private final V value;
  
  ImmediateFuture(@ParametricNullness V value) { this.value = value; }
  
  public void addListener(Runnable listener, Executor executor) {
    Preconditions.checkNotNull(listener, "Runnable was null.");
    Preconditions.checkNotNull(executor, "Executor was null.");
    try {
      executor.execute(listener);
    } catch (RuntimeException e) {
      log.log(Level.SEVERE, "RuntimeException while executing runnable " + listener + " with executor " + executor, e);
    } 
  }
  
  public boolean cancel(boolean mayInterruptIfRunning) { return false; }
  
  @ParametricNullness
  public V get() { return (V)this.value; }
  
  @ParametricNullness
  public V get(long timeout, TimeUnit unit) throws ExecutionException {
    Preconditions.checkNotNull(unit);
    return (V)get();
  }
  
  public boolean isCancelled() { return false; }
  
  public boolean isDone() { return true; }
  
  public String toString() { return super.toString() + "[status=SUCCESS, result=[" + this.value + "]]"; }
}
