package com.google.common.util.concurrent;

import com.google.common.annotations.GwtIncompatible;
import com.google.common.annotations.J2ktIncompatible;
import com.google.common.base.Preconditions;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Executor;
import java.util.logging.Logger;

@ElementTypesAreNonnullByDefault
@J2ktIncompatible
@GwtIncompatible
final class ListenerCallQueue<L> extends Object {
  private static final Logger logger = Logger.getLogger(ListenerCallQueue.class.getName());
  
  private final List<PerListenerQueue<L>> listeners = Collections.synchronizedList(new ArrayList());
  
  public void addListener(L listener, Executor executor) {
    Preconditions.checkNotNull(listener, "listener");
    Preconditions.checkNotNull(executor, "executor");
    this.listeners.add(new PerListenerQueue(listener, executor));
  }
  
  public void enqueue(Event<L> event) { enqueueHelper(event, event); }
  
  public void enqueue(Event<L> event, String label) { enqueueHelper(event, label); }
  
  private void enqueueHelper(Event<L> event, Object label) {
    Preconditions.checkNotNull(event, "event");
    Preconditions.checkNotNull(label, "label");
    synchronized (this.listeners) {
      for (PerListenerQueue<L> queue : this.listeners)
        queue.add(event, label); 
    } 
  }
  
  public void dispatch() {
    for (int i = 0; i < this.listeners.size(); i++)
      ((PerListenerQueue)this.listeners.get(i)).dispatch(); 
  }
}
