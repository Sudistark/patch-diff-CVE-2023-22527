package com.google.common.util.concurrent;

import com.google.common.annotations.GwtCompatible;
import com.google.common.annotations.GwtIncompatible;
import com.google.common.annotations.J2ktIncompatible;
import com.google.common.base.Function;
import com.google.common.base.Preconditions;
import com.google.errorprone.annotations.DoNotMock;
import java.time.Duration;
import java.util.concurrent.Executor;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

@DoNotMock("Use FluentFuture.from(Futures.immediate*Future) or SettableFuture")
@ElementTypesAreNonnullByDefault
@GwtCompatible(emulated = true)
public abstract class FluentFuture<V> extends GwtFluentFutureCatchingSpecialization<V> {
  public static <V> FluentFuture<V> from(ListenableFuture<V> future) {
    return (future instanceof FluentFuture) ? 
      (FluentFuture)future : 
      new ForwardingFluentFuture(future);
  }
  
  @Deprecated
  public static <V> FluentFuture<V> from(FluentFuture<V> future) { return (FluentFuture)Preconditions.checkNotNull(future); }
  
  @J2ktIncompatible
  @GwtIncompatible("AVAILABLE but requires exceptionType to be Throwable.class")
  public final <X extends Throwable> FluentFuture<V> catching(Class<X> exceptionType, Function<? super X, ? extends V> fallback, Executor executor) { return (FluentFuture)Futures.catching(this, exceptionType, fallback, executor); }
  
  @J2ktIncompatible
  @GwtIncompatible("AVAILABLE but requires exceptionType to be Throwable.class")
  public final <X extends Throwable> FluentFuture<V> catchingAsync(Class<X> exceptionType, AsyncFunction<? super X, ? extends V> fallback, Executor executor) { return (FluentFuture)Futures.catchingAsync(this, exceptionType, fallback, executor); }
  
  @J2ktIncompatible
  @GwtIncompatible
  public final FluentFuture<V> withTimeout(Duration timeout, ScheduledExecutorService scheduledExecutor) { return withTimeout(Internal.toNanosSaturated(timeout), TimeUnit.NANOSECONDS, scheduledExecutor); }
  
  @J2ktIncompatible
  @GwtIncompatible
  public final FluentFuture<V> withTimeout(long timeout, TimeUnit unit, ScheduledExecutorService scheduledExecutor) { return (FluentFuture)Futures.withTimeout(this, timeout, unit, scheduledExecutor); }
  
  public final <T> FluentFuture<T> transformAsync(AsyncFunction<? super V, T> function, Executor executor) { return (FluentFuture)Futures.transformAsync(this, function, executor); }
  
  public final <T> FluentFuture<T> transform(Function<? super V, T> function, Executor executor) { return (FluentFuture)Futures.transform(this, function, executor); }
  
  public final void addCallback(FutureCallback<? super V> callback, Executor executor) { Futures.addCallback(this, callback, executor); }
}
