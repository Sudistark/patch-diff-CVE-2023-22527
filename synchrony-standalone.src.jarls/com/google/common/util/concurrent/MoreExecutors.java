package com.google.common.util.concurrent;

import com.google.common.annotations.GwtCompatible;
import com.google.common.annotations.GwtIncompatible;
import com.google.common.annotations.J2ktIncompatible;
import com.google.common.base.Preconditions;
import com.google.common.base.Supplier;
import com.google.common.base.Throwables;
import com.google.common.collect.Lists;
import com.google.common.collect.Queues;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import java.lang.reflect.InvocationTargetException;
import java.time.Duration;
import java.util.Collection;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Executor;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

@ElementTypesAreNonnullByDefault
@GwtCompatible(emulated = true)
public final class MoreExecutors {
  @J2ktIncompatible
  @GwtIncompatible
  public static ExecutorService getExitingExecutorService(ThreadPoolExecutor executor, Duration terminationTimeout) {
    return getExitingExecutorService(executor, 
        Internal.toNanosSaturated(terminationTimeout), TimeUnit.NANOSECONDS);
  }
  
  @J2ktIncompatible
  @GwtIncompatible
  public static ExecutorService getExitingExecutorService(ThreadPoolExecutor executor, long terminationTimeout, TimeUnit timeUnit) { return (new Application()).getExitingExecutorService(executor, terminationTimeout, timeUnit); }
  
  @J2ktIncompatible
  @GwtIncompatible
  public static ExecutorService getExitingExecutorService(ThreadPoolExecutor executor) { return (new Application()).getExitingExecutorService(executor); }
  
  @J2ktIncompatible
  @GwtIncompatible
  public static ScheduledExecutorService getExitingScheduledExecutorService(ScheduledThreadPoolExecutor executor, Duration terminationTimeout) {
    return getExitingScheduledExecutorService(executor, 
        Internal.toNanosSaturated(terminationTimeout), TimeUnit.NANOSECONDS);
  }
  
  @J2ktIncompatible
  @GwtIncompatible
  public static ScheduledExecutorService getExitingScheduledExecutorService(ScheduledThreadPoolExecutor executor, long terminationTimeout, TimeUnit timeUnit) {
    return (new Application())
      .getExitingScheduledExecutorService(executor, terminationTimeout, timeUnit);
  }
  
  @J2ktIncompatible
  @GwtIncompatible
  public static ScheduledExecutorService getExitingScheduledExecutorService(ScheduledThreadPoolExecutor executor) { return (new Application()).getExitingScheduledExecutorService(executor); }
  
  @J2ktIncompatible
  @GwtIncompatible
  public static void addDelayedShutdownHook(ExecutorService service, Duration terminationTimeout) { addDelayedShutdownHook(service, Internal.toNanosSaturated(terminationTimeout), TimeUnit.NANOSECONDS); }
  
  @J2ktIncompatible
  @GwtIncompatible
  public static void addDelayedShutdownHook(ExecutorService service, long terminationTimeout, TimeUnit timeUnit) { (new Application()).addDelayedShutdownHook(service, terminationTimeout, timeUnit); }
  
  @J2ktIncompatible
  @GwtIncompatible
  private static void useDaemonThreadFactory(ThreadPoolExecutor executor) {
    executor.setThreadFactory((new ThreadFactoryBuilder())
        
        .setDaemon(true)
        .setThreadFactory(executor.getThreadFactory())
        .build());
  }
  
  @J2ktIncompatible
  @GwtIncompatible
  public static ListeningExecutorService newDirectExecutorService() { return new DirectExecutorService(null); }
  
  public static Executor directExecutor() { return DirectExecutor.INSTANCE; }
  
  @J2ktIncompatible
  @GwtIncompatible
  public static Executor newSequentialExecutor(Executor delegate) { return new SequentialExecutor(delegate); }
  
  @J2ktIncompatible
  @GwtIncompatible
  public static ListeningExecutorService listeningDecorator(ExecutorService delegate) {
    return (delegate instanceof ListeningExecutorService) ? 
      (ListeningExecutorService)delegate : (
      (delegate instanceof ScheduledExecutorService) ? 
      new ScheduledListeningDecorator((ScheduledExecutorService)delegate) : 
      new ListeningDecorator(delegate));
  }
  
  @J2ktIncompatible
  @GwtIncompatible
  public static ListeningScheduledExecutorService listeningDecorator(ScheduledExecutorService delegate) {
    return (delegate instanceof ListeningScheduledExecutorService) ? 
      (ListeningScheduledExecutorService)delegate : 
      new ScheduledListeningDecorator(delegate);
  }
  
  @ParametricNullness
  @J2ktIncompatible
  @GwtIncompatible
  static <T> T invokeAnyImpl(ListeningExecutorService executorService, Collection<? extends Callable<T>> tasks, boolean timed, Duration timeout) throws InterruptedException, ExecutionException, TimeoutException { return (T)invokeAnyImpl(executorService, tasks, timed, 
        Internal.toNanosSaturated(timeout), TimeUnit.NANOSECONDS); }
  
  @ParametricNullness
  @J2ktIncompatible
  @GwtIncompatible
  static <T> T invokeAnyImpl(ListeningExecutorService executorService, Collection<? extends Callable<T>> tasks, boolean timed, long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {
    Preconditions.checkNotNull(executorService);
    Preconditions.checkNotNull(unit);
    int ntasks = tasks.size();
    Preconditions.checkArgument((ntasks > 0));
    futures = Lists.newArrayListWithCapacity(ntasks);
    BlockingQueue<Future<T>> futureQueue = Queues.newLinkedBlockingQueue();
    long timeoutNanos = unit.toNanos(timeout);
  }
  
  @J2ktIncompatible
  @GwtIncompatible
  private static <T> ListenableFuture<T> submitAndAddQueueListener(ListeningExecutorService executorService, Callable<T> task, BlockingQueue<Future<T>> queue) {
    ListenableFuture<T> future = executorService.submit(task);
    future.addListener(new Object(queue, future), 





        
        directExecutor());
    return future;
  }
  
  @J2ktIncompatible
  @GwtIncompatible
  public static ThreadFactory platformThreadFactory() {
    if (!isAppEngineWithApiClasses())
      return Executors.defaultThreadFactory(); 
    try {
      return 
        (ThreadFactory)Class.forName("com.google.appengine.api.ThreadManager")
        .getMethod("currentRequestThreadFactory", new Class[0])
        .invoke(null, new Object[0]);
    } catch (IllegalAccessException e) {
      throw new RuntimeException("Couldn't invoke ThreadManager.currentRequestThreadFactory", e);
    } catch (ClassNotFoundException e) {
      throw new RuntimeException("Couldn't invoke ThreadManager.currentRequestThreadFactory", e);
    } catch (NoSuchMethodException e) {
      throw new RuntimeException("Couldn't invoke ThreadManager.currentRequestThreadFactory", e);
    } catch (InvocationTargetException e) {
      throw Throwables.propagate(e.getCause());
    } 
  }
  
  @J2ktIncompatible
  @GwtIncompatible
  private static boolean isAppEngineWithApiClasses() {
    if (System.getProperty("com.google.appengine.runtime.environment") == null)
      return false; 
    try {
      Class.forName("com.google.appengine.api.utils.SystemProperty");
    } catch (ClassNotFoundException e) {
      return false;
    } 
    try {
      return 
        
        (Class.forName("com.google.apphosting.api.ApiProxy").getMethod("getCurrentEnvironment", new Class[false]).invoke(null, new Object[false]) != null);
    } catch (ClassNotFoundException e) {
      return false;
    } catch (InvocationTargetException e) {
      return false;
    } catch (IllegalAccessException e) {
      return false;
    } catch (NoSuchMethodException e) {
      return false;
    } 
  }
  
  @J2ktIncompatible
  @GwtIncompatible
  static Thread newThread(String name, Runnable runnable) {
    Preconditions.checkNotNull(name);
    Preconditions.checkNotNull(runnable);
    Thread result = (Thread)Objects.requireNonNull(platformThreadFactory().newThread(runnable));
    try {
      result.setName(name);
    } catch (SecurityException securityException) {}
    return result;
  }
  
  @J2ktIncompatible
  @GwtIncompatible
  static Executor renamingDecorator(Executor executor, Supplier<String> nameSupplier) {
    Preconditions.checkNotNull(executor);
    Preconditions.checkNotNull(nameSupplier);
    return new Object(executor, nameSupplier);
  }
  
  @J2ktIncompatible
  @GwtIncompatible
  static ExecutorService renamingDecorator(ExecutorService service, Supplier<String> nameSupplier) {
    Preconditions.checkNotNull(service);
    Preconditions.checkNotNull(nameSupplier);
    return new Object(service, nameSupplier);
  }
  
  @J2ktIncompatible
  @GwtIncompatible
  static ScheduledExecutorService renamingDecorator(ScheduledExecutorService service, Supplier<String> nameSupplier) {
    Preconditions.checkNotNull(service);
    Preconditions.checkNotNull(nameSupplier);
    return new Object(service, nameSupplier);
  }
  
  @CanIgnoreReturnValue
  @J2ktIncompatible
  @GwtIncompatible
  public static boolean shutdownAndAwaitTermination(ExecutorService service, Duration timeout) { return shutdownAndAwaitTermination(service, Internal.toNanosSaturated(timeout), TimeUnit.NANOSECONDS); }
  
  @CanIgnoreReturnValue
  @J2ktIncompatible
  @GwtIncompatible
  public static boolean shutdownAndAwaitTermination(ExecutorService service, long timeout, TimeUnit unit) {
    long halfTimeoutNanos = unit.toNanos(timeout) / 2L;
    service.shutdown();
    try {
      if (!service.awaitTermination(halfTimeoutNanos, TimeUnit.NANOSECONDS)) {
        service.shutdownNow();
        service.awaitTermination(halfTimeoutNanos, TimeUnit.NANOSECONDS);
      } 
    } catch (InterruptedException ie) {
      Thread.currentThread().interrupt();
      service.shutdownNow();
    } 
    return service.isTerminated();
  }
  
  static Executor rejectionPropagatingExecutor(Executor delegate, AbstractFuture<?> future) {
    Preconditions.checkNotNull(delegate);
    Preconditions.checkNotNull(future);
    if (delegate == directExecutor())
      return delegate; 
    return new Object(delegate, future);
  }
}
