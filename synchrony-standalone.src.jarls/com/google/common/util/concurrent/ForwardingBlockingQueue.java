package com.google.common.util.concurrent;

import com.google.common.annotations.GwtIncompatible;
import com.google.common.annotations.J2ktIncompatible;
import com.google.common.collect.ForwardingQueue;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import java.util.Collection;
import java.util.Queue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.TimeUnit;
import javax.annotation.CheckForNull;

@ElementTypesAreNonnullByDefault
@J2ktIncompatible
@GwtIncompatible
public abstract class ForwardingBlockingQueue<E> extends ForwardingQueue<E> implements BlockingQueue<E> {
  @CanIgnoreReturnValue
  public int drainTo(Collection<? super E> c, int maxElements) { return delegate().drainTo(c, maxElements); }
  
  @CanIgnoreReturnValue
  public int drainTo(Collection<? super E> c) { return delegate().drainTo(c); }
  
  @CanIgnoreReturnValue
  public boolean offer(E e, long timeout, TimeUnit unit) throws InterruptedException { return delegate().offer(e, timeout, unit); }
  
  @CheckForNull
  @CanIgnoreReturnValue
  public E poll(long timeout, TimeUnit unit) throws InterruptedException { return (E)delegate().poll(timeout, unit); }
  
  public void put(E e) throws InterruptedException { delegate().put(e); }
  
  public int remainingCapacity() { return delegate().remainingCapacity(); }
  
  @CanIgnoreReturnValue
  public E take() throws InterruptedException { return (E)delegate().take(); }
  
  protected abstract BlockingQueue<E> delegate();
}
