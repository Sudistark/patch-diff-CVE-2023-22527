package com.google.common.util.concurrent;

import com.google.common.annotations.GwtIncompatible;
import com.google.common.annotations.J2ktIncompatible;
import com.google.common.base.Supplier;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.Lists;
import com.google.common.math.IntMath;
import java.math.RoundingMode;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Semaphore;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReadWriteLock;
import java.util.concurrent.locks.ReentrantLock;

@ElementTypesAreNonnullByDefault
@J2ktIncompatible
@GwtIncompatible
public abstract class Striped<L> extends Object {
  private static final int LARGE_LAZY_CUTOFF = 1024;
  
  private static final int ALL_SET = -1;
  
  private Striped() {}
  
  public Iterable<L> bulkGet(Iterable<? extends Object> keys) {
    List<Object> result = Lists.newArrayList(keys);
    if (result.isEmpty())
      return ImmutableList.of(); 
    int[] stripes = new int[result.size()];
    for (int i = 0; i < result.size(); i++)
      stripes[i] = indexFor(result.get(i)); 
    Arrays.sort(stripes);
    int previousStripe = stripes[0];
    result.set(0, getAt(previousStripe));
    for (int i = 1; i < result.size(); i++) {
      int currentStripe = stripes[i];
      if (currentStripe == previousStripe) {
        result.set(i, result.get(i - 1));
      } else {
        result.set(i, getAt(currentStripe));
        previousStripe = currentStripe;
      } 
    } 
    List<L> asStripes = result;
    return Collections.unmodifiableList(asStripes);
  }
  
  static <L> Striped<L> custom(int stripes, Supplier<L> supplier) { return new CompactStriped(stripes, supplier, null); }
  
  public static Striped<Lock> lock(int stripes) { return custom(stripes, PaddedLock::new); }
  
  public static Striped<Lock> lazyWeakLock(int stripes) { return lazy(stripes, () -> new ReentrantLock(false)); }
  
  private static <L> Striped<L> lazy(int stripes, Supplier<L> supplier) {
    return (stripes < 1024) ? 
      new SmallLazyStriped(stripes, supplier) : 
      new LargeLazyStriped(stripes, supplier);
  }
  
  public static Striped<Semaphore> semaphore(int stripes, int permits) { return custom(stripes, () -> new PaddedSemaphore(permits)); }
  
  public static Striped<Semaphore> lazyWeakSemaphore(int stripes, int permits) { return lazy(stripes, () -> new Semaphore(permits, false)); }
  
  public static Striped<ReadWriteLock> readWriteLock(int stripes) { return custom(stripes, java.util.concurrent.locks.ReentrantReadWriteLock::new); }
  
  public static Striped<ReadWriteLock> lazyWeakReadWriteLock(int stripes) { return lazy(stripes, WeakSafeReadWriteLock::new); }
  
  private static int ceilToPowerOfTwo(int x) { return 1 << IntMath.log2(x, RoundingMode.CEILING); }
  
  private static int smear(int hashCode) {
    hashCode ^= hashCode >>> 20 ^ hashCode >>> 12;
    return hashCode ^ hashCode >>> 7 ^ hashCode >>> 4;
  }
  
  public abstract L get(Object paramObject);
  
  public abstract L getAt(int paramInt);
  
  abstract int indexFor(Object paramObject);
  
  public abstract int size();
}
