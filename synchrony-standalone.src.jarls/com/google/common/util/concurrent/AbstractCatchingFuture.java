package com.google.common.util.concurrent;

import com.google.common.annotations.GwtCompatible;
import com.google.common.base.Function;
import com.google.common.base.Preconditions;
import com.google.common.util.concurrent.internal.InternalFutureFailureAccess;
import com.google.common.util.concurrent.internal.InternalFutures;
import com.google.errorprone.annotations.ForOverride;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Executor;
import javax.annotation.CheckForNull;

@ElementTypesAreNonnullByDefault
@GwtCompatible
abstract class AbstractCatchingFuture<V, X extends Throwable, F, T> extends FluentFuture.TrustedFuture<V> implements Runnable {
  @CheckForNull
  ListenableFuture<? extends V> inputFuture;
  
  @CheckForNull
  Class<X> exceptionType;
  
  @CheckForNull
  F fallback;
  
  static <V, X extends Throwable> ListenableFuture<V> create(ListenableFuture<? extends V> input, Class<X> exceptionType, Function<? super X, ? extends V> fallback, Executor executor) {
    CatchingFuture<V, X> future = new CatchingFuture<V, X>(input, exceptionType, fallback);
    input.addListener(future, MoreExecutors.rejectionPropagatingExecutor(executor, future));
    return future;
  }
  
  static <X extends Throwable, V> ListenableFuture<V> create(ListenableFuture<? extends V> input, Class<X> exceptionType, AsyncFunction<? super X, ? extends V> fallback, Executor executor) {
    AsyncCatchingFuture<V, X> future = new AsyncCatchingFuture<V, X>(input, exceptionType, fallback);
    input.addListener(future, MoreExecutors.rejectionPropagatingExecutor(executor, future));
    return future;
  }
  
  AbstractCatchingFuture(ListenableFuture<? extends V> inputFuture, Class<X> exceptionType, F fallback) {
    this.inputFuture = (ListenableFuture)Preconditions.checkNotNull(inputFuture);
    this.exceptionType = (Class)Preconditions.checkNotNull(exceptionType);
    this.fallback = Preconditions.checkNotNull(fallback);
  }
  
  public final void run() {
    T fallbackResult;
    ListenableFuture<? extends V> localInputFuture = this.inputFuture;
    Class<X> localExceptionType = this.exceptionType;
    F localFallback = (F)this.fallback;
    if (((localInputFuture == null) ? 1 : 0) | ((localExceptionType == null) ? 1 : 0) | ((localFallback == null) ? 1 : 0) || 
      
      isCancelled())
      return; 
    this.inputFuture = null;
    V sourceResult = null;
    Throwable throwable = null;
    try {
      if (localInputFuture instanceof InternalFutureFailureAccess)
        throwable = InternalFutures.tryInternalFastPathGetFailure((InternalFutureFailureAccess)localInputFuture); 
      if (throwable == null)
        sourceResult = (V)Futures.getDone(localInputFuture); 
    } catch (ExecutionException e) {
      throwable = e.getCause();
      if (throwable == null)
        throwable = new NullPointerException("Future type " + localInputFuture.getClass() + " threw " + e.getClass() + " without a cause"); 
    } catch (RuntimeException|Error e) {
      throwable = e;
    } 
    if (throwable == null) {
      set(NullnessCasts.uncheckedCastNullableTToT(sourceResult));
      return;
    } 
    if (!Platform.isInstanceOfThrowableClass(throwable, localExceptionType)) {
      setFuture(localInputFuture);
      return;
    } 
    X castThrowable = (X)throwable;
    try {
      fallbackResult = (T)doFallback(localFallback, castThrowable);
    } catch (Throwable t) {
      Platform.restoreInterruptIfIsInterruptedException(t);
      setException(t);
      return;
    } finally {
      this.exceptionType = null;
      this.fallback = null;
    } 
    setResult(fallbackResult);
  }
  
  @CheckForNull
  protected String pendingToString() {
    ListenableFuture<? extends V> localInputFuture = this.inputFuture;
    Class<X> localExceptionType = this.exceptionType;
    F localFallback = (F)this.fallback;
    String superString = super.pendingToString();
    String resultString = "";
    if (localInputFuture != null)
      resultString = "inputFuture=[" + localInputFuture + "], "; 
    if (localExceptionType != null && localFallback != null)
      return resultString + "exceptionType=[" + localExceptionType + "], fallback=[" + localFallback + "]"; 
    if (superString != null)
      return resultString + superString; 
    return null;
  }
  
  @ParametricNullness
  @ForOverride
  abstract T doFallback(F paramF, X paramX) throws Exception;
  
  @ForOverride
  abstract void setResult(@ParametricNullness T paramT);
  
  protected final void afterDone() {
    maybePropagateCancellationTo(this.inputFuture);
    this.inputFuture = null;
    this.exceptionType = null;
    this.fallback = null;
  }
}
