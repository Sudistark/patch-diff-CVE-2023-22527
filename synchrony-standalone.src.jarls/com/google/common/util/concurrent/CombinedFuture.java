package com.google.common.util.concurrent;

import com.google.common.annotations.GwtCompatible;
import com.google.common.collect.ImmutableCollection;
import java.util.concurrent.Callable;
import java.util.concurrent.Executor;
import javax.annotation.CheckForNull;

@ElementTypesAreNonnullByDefault
@GwtCompatible
final class CombinedFuture<V> extends AggregateFuture<Object, V> {
  @CheckForNull
  private CombinedFutureInterruptibleTask<?> task;
  
  CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>> futures, boolean allMustSucceed, Executor listenerExecutor, AsyncCallable<V> callable) {
    super(futures, allMustSucceed, false);
    this.task = new AsyncCallableInterruptibleTask(this, callable, listenerExecutor);
    init();
  }
  
  CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>> futures, boolean allMustSucceed, Executor listenerExecutor, Callable<V> callable) {
    super(futures, allMustSucceed, false);
    this.task = new CallableInterruptibleTask(this, callable, listenerExecutor);
    init();
  }
  
  void collectOneValue(int index, @CheckForNull Object returnValue) {}
  
  void handleAllCompleted() {
    CombinedFutureInterruptibleTask<?> localTask = this.task;
    if (localTask != null)
      localTask.execute(); 
  }
  
  void releaseResources(AggregateFuture.ReleaseResourcesReason reason) {
    super.releaseResources(reason);
    if (reason == AggregateFuture.ReleaseResourcesReason.OUTPUT_FUTURE_DONE)
      this.task = null; 
  }
  
  protected void interruptTask() {
    CombinedFutureInterruptibleTask<?> localTask = this.task;
    if (localTask != null)
      localTask.interruptTask(); 
  }
}
