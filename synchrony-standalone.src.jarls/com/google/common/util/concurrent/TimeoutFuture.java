package com.google.common.util.concurrent;

import com.google.common.annotations.GwtIncompatible;
import com.google.common.annotations.J2ktIncompatible;
import com.google.common.base.Preconditions;
import java.util.concurrent.Future;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;
import javax.annotation.CheckForNull;

@ElementTypesAreNonnullByDefault
@J2ktIncompatible
@GwtIncompatible
final class TimeoutFuture<V> extends FluentFuture.TrustedFuture<V> {
  @CheckForNull
  private ListenableFuture<V> delegateRef;
  
  @CheckForNull
  private ScheduledFuture<?> timer;
  
  static <V> ListenableFuture<V> create(ListenableFuture<V> delegate, long time, TimeUnit unit, ScheduledExecutorService scheduledExecutor) {
    TimeoutFuture<V> result = new TimeoutFuture<V>(delegate);
    Fire<V> fire = new Fire<V>(result);
    result.timer = scheduledExecutor.schedule(fire, time, unit);
    delegate.addListener(fire, MoreExecutors.directExecutor());
    return result;
  }
  
  private TimeoutFuture(ListenableFuture<V> delegate) { this.delegateRef = (ListenableFuture)Preconditions.checkNotNull(delegate); }
  
  @CheckForNull
  protected String pendingToString() {
    ListenableFuture<? extends V> localInputFuture = this.delegateRef;
    ScheduledFuture<?> localTimer = this.timer;
    if (localInputFuture != null) {
      String message = "inputFuture=[" + localInputFuture + "]";
      if (localTimer != null) {
        long delay = localTimer.getDelay(TimeUnit.MILLISECONDS);
        if (delay > 0L)
          message = message + ", remaining delay=[" + delay + " ms]"; 
      } 
      return message;
    } 
    return null;
  }
  
  protected void afterDone() {
    maybePropagateCancellationTo(this.delegateRef);
    Future<?> localTimer = this.timer;
    if (localTimer != null)
      localTimer.cancel(false); 
    this.delegateRef = null;
    this.timer = null;
  }
}
