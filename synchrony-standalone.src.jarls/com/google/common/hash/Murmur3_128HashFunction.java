package com.google.common.hash;

import com.google.errorprone.annotations.Immutable;
import java.io.Serializable;
import javax.annotation.CheckForNull;

@Immutable
@ElementTypesAreNonnullByDefault
final class Murmur3_128HashFunction extends AbstractHashFunction implements Serializable {
  static final HashFunction MURMUR3_128 = new Murmur3_128HashFunction(0);
  
  static final HashFunction GOOD_FAST_HASH_128 = new Murmur3_128HashFunction(Hashing.GOOD_FAST_HASH_SEED);
  
  private final int seed;
  
  private static final long serialVersionUID = 0L;
  
  Murmur3_128HashFunction(int seed) { this.seed = seed; }
  
  public int bits() { return 128; }
  
  public Hasher newHasher() { return new Murmur3_128Hasher(this.seed); }
  
  public String toString() { return "Hashing.murmur3_128(" + this.seed + ")"; }
  
  public boolean equals(@CheckForNull Object object) {
    if (object instanceof Murmur3_128HashFunction) {
      Murmur3_128HashFunction other = (Murmur3_128HashFunction)object;
      return (this.seed == other.seed);
    } 
    return false;
  }
  
  public int hashCode() { return getClass().hashCode() ^ this.seed; }
}
