package com.google.common.hash;

import com.google.common.base.Preconditions;
import com.google.errorprone.annotations.Immutable;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.charset.Charset;

@Immutable
@ElementTypesAreNonnullByDefault
abstract class AbstractNonStreamingHashFunction extends AbstractHashFunction {
  public Hasher newHasher() { return newHasher(32); }
  
  public Hasher newHasher(int expectedInputSize) {
    Preconditions.checkArgument((expectedInputSize >= 0));
    return new BufferingHasher(this, expectedInputSize);
  }
  
  public HashCode hashInt(int input) { return hashBytes(ByteBuffer.allocate(4).order(ByteOrder.LITTLE_ENDIAN).putInt(input).array()); }
  
  public HashCode hashLong(long input) { return hashBytes(ByteBuffer.allocate(8).order(ByteOrder.LITTLE_ENDIAN).putLong(input).array()); }
  
  public HashCode hashUnencodedChars(CharSequence input) {
    int len = input.length();
    ByteBuffer buffer = ByteBuffer.allocate(len * 2).order(ByteOrder.LITTLE_ENDIAN);
    for (int i = 0; i < len; i++)
      buffer.putChar(input.charAt(i)); 
    return hashBytes(buffer.array());
  }
  
  public HashCode hashString(CharSequence input, Charset charset) { return hashBytes(input.toString().getBytes(charset)); }
  
  public abstract HashCode hashBytes(byte[] paramArrayOfByte, int paramInt1, int paramInt2);
  
  public HashCode hashBytes(ByteBuffer input) { return newHasher(input.remaining()).putBytes(input).hash(); }
}
