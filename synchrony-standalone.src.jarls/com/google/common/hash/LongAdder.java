package com.google.common.hash;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;

@ElementTypesAreNonnullByDefault
final class LongAdder extends Striped64 implements Serializable, LongAddable {
  private static final long serialVersionUID = 7249069246863182397L;
  
  final long fn(long v, long x) { return v + x; }
  
  public void add(long x) {
    boolean uncontended = true;
    Striped64.Cell[] arrayOfCell;
    long b, v;
    int[] hc;
    Striped64.Cell a;
    int n;
    if (((arrayOfCell = this.cells) != null || !casBase(b = this.base, b + x)) && ((hc = (int[])threadHashCode.get()) == null || arrayOfCell == null || (n = arrayOfCell.length) < 1 || (a = arrayOfCell[n - true & hc[false]]) == null || 


      
      !(uncontended = a.cas(v = a.value, v + x))))
      retryUpdate(x, hc, uncontended); 
  }
  
  public void increment() { add(1L); }
  
  public void decrement() { add(-1L); }
  
  public long sum() {
    long sum = this.base;
    Striped64.Cell[] arrayOfCell = this.cells;
    if (arrayOfCell != null) {
      int n = arrayOfCell.length;
      for (int i = 0; i < n; i++) {
        Striped64.Cell a = arrayOfCell[i];
        if (a != null)
          sum += a.value; 
      } 
    } 
    return sum;
  }
  
  public void reset() { internalReset(0L); }
  
  public long sumThenReset() {
    long sum = this.base;
    Striped64.Cell[] arrayOfCell = this.cells;
    this.base = 0L;
    if (arrayOfCell != null) {
      int n = arrayOfCell.length;
      for (int i = 0; i < n; i++) {
        Striped64.Cell a = arrayOfCell[i];
        if (a != null) {
          sum += a.value;
          a.value = 0L;
        } 
      } 
    } 
    return sum;
  }
  
  public String toString() { return Long.toString(sum()); }
  
  public long longValue() { return sum(); }
  
  public int intValue() { return (int)sum(); }
  
  public float floatValue() { return (float)sum(); }
  
  public double doubleValue() { return sum(); }
  
  private void writeObject(ObjectOutputStream s) throws IOException {
    s.defaultWriteObject();
    s.writeLong(sum());
  }
  
  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {
    s.defaultReadObject();
    this.busy = 0;
    this.cells = null;
    this.base = s.readLong();
  }
}
