package com.google.common.base;

import com.google.common.annotations.GwtCompatible;
import com.google.common.annotations.GwtIncompatible;
import com.google.common.annotations.J2ktIncompatible;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import java.time.Duration;
import java.util.concurrent.TimeUnit;

@ElementTypesAreNonnullByDefault
@GwtCompatible(emulated = true)
public final class Stopwatch {
  private final Ticker ticker;
  
  private boolean isRunning;
  
  private long elapsedNanos;
  
  private long startTick;
  
  public static Stopwatch createUnstarted() { return new Stopwatch(); }
  
  public static Stopwatch createUnstarted(Ticker ticker) { return new Stopwatch(ticker); }
  
  public static Stopwatch createStarted() { return (new Stopwatch()).start(); }
  
  public static Stopwatch createStarted(Ticker ticker) { return (new Stopwatch(ticker)).start(); }
  
  Stopwatch() { this.ticker = Ticker.systemTicker(); }
  
  Stopwatch(Ticker ticker) { this.ticker = (Ticker)Preconditions.checkNotNull(ticker, "ticker"); }
  
  public boolean isRunning() { return this.isRunning; }
  
  @CanIgnoreReturnValue
  public Stopwatch start() {
    Preconditions.checkState(!this.isRunning, "This stopwatch is already running.");
    this.isRunning = true;
    this.startTick = this.ticker.read();
    return this;
  }
  
  @CanIgnoreReturnValue
  public Stopwatch stop() {
    long tick = this.ticker.read();
    Preconditions.checkState(this.isRunning, "This stopwatch is already stopped.");
    this.isRunning = false;
    this.elapsedNanos += tick - this.startTick;
    return this;
  }
  
  @CanIgnoreReturnValue
  public Stopwatch reset() {
    this.elapsedNanos = 0L;
    this.isRunning = false;
    return this;
  }
  
  private long elapsedNanos() { return this.isRunning ? (this.ticker.read() - this.startTick + this.elapsedNanos) : this.elapsedNanos; }
  
  public long elapsed(TimeUnit desiredUnit) { return desiredUnit.convert(elapsedNanos(), TimeUnit.NANOSECONDS); }
  
  @J2ktIncompatible
  @GwtIncompatible
  public Duration elapsed() { return Duration.ofNanos(elapsedNanos()); }
  
  public String toString() {
    long nanos = elapsedNanos();
    TimeUnit unit = chooseUnit(nanos);
    double value = nanos / TimeUnit.NANOSECONDS.convert(1L, unit);
    return Platform.formatCompact4Digits(value) + " " + abbreviate(unit);
  }
  
  private static TimeUnit chooseUnit(long nanos) {
    if (TimeUnit.DAYS.convert(nanos, TimeUnit.NANOSECONDS) > 0L)
      return TimeUnit.DAYS; 
    if (TimeUnit.HOURS.convert(nanos, TimeUnit.NANOSECONDS) > 0L)
      return TimeUnit.HOURS; 
    if (TimeUnit.MINUTES.convert(nanos, TimeUnit.NANOSECONDS) > 0L)
      return TimeUnit.MINUTES; 
    if (TimeUnit.SECONDS.convert(nanos, TimeUnit.NANOSECONDS) > 0L)
      return TimeUnit.SECONDS; 
    if (TimeUnit.MILLISECONDS.convert(nanos, TimeUnit.NANOSECONDS) > 0L)
      return TimeUnit.MILLISECONDS; 
    if (TimeUnit.MICROSECONDS.convert(nanos, TimeUnit.NANOSECONDS) > 0L)
      return TimeUnit.MICROSECONDS; 
    return TimeUnit.NANOSECONDS;
  }
  
  private static String abbreviate(TimeUnit unit) {
    switch (null.$SwitchMap$java$util$concurrent$TimeUnit[unit.ordinal()]) {
      case 1:
        return "ns";
      case 2:
        return "Î¼s";
      case 3:
        return "ms";
      case 4:
        return "s";
      case 5:
        return "min";
      case 6:
        return "h";
      case 7:
        return "d";
    } 
    throw new AssertionError();
  }
}
