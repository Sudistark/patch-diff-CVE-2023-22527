package com.google.common.collect;

import com.google.common.annotations.GwtCompatible;
import com.google.common.base.Function;
import com.google.common.base.Preconditions;
import com.google.common.base.Predicate;
import java.util.Collection;
import java.util.Comparator;
import java.util.List;
import javax.annotation.CheckForNull;

@ElementTypesAreNonnullByDefault
@GwtCompatible
public final class Collections2 {
  public static <E> Collection<E> filter(Collection<E> unfiltered, Predicate<? super E> predicate) {
    if (unfiltered instanceof FilteredCollection)
      return ((FilteredCollection)unfiltered).createCombined(predicate); 
    return new FilteredCollection((Collection)Preconditions.checkNotNull(unfiltered), (Predicate)Preconditions.checkNotNull(predicate));
  }
  
  static boolean safeContains(Collection<?> collection, @CheckForNull Object object) {
    Preconditions.checkNotNull(collection);
    try {
      return collection.contains(object);
    } catch (ClassCastException|NullPointerException e) {
      return false;
    } 
  }
  
  static boolean safeRemove(Collection<?> collection, @CheckForNull Object object) {
    Preconditions.checkNotNull(collection);
    try {
      return collection.remove(object);
    } catch (ClassCastException|NullPointerException e) {
      return false;
    } 
  }
  
  public static <F, T> Collection<T> transform(Collection<F> fromCollection, Function<? super F, T> function) { return new TransformedCollection(fromCollection, function); }
  
  static boolean containsAllImpl(Collection<?> self, Collection<?> c) {
    for (Object o : c) {
      if (!self.contains(o))
        return false; 
    } 
    return true;
  }
  
  static String toStringImpl(Collection<?> collection) {
    StringBuilder sb = newStringBuilderForCollection(collection.size()).append('[');
    boolean first = true;
    for (Object o : collection) {
      if (!first)
        sb.append(", "); 
      first = false;
      if (o == collection) {
        sb.append("(this Collection)");
        continue;
      } 
      sb.append(o);
    } 
    return sb.append(']').toString();
  }
  
  static StringBuilder newStringBuilderForCollection(int size) {
    CollectPreconditions.checkNonnegative(size, "size");
    return new StringBuilder((int)Math.min(size * 8L, 1073741824L));
  }
  
  public static <E extends Comparable<? super E>> Collection<List<E>> orderedPermutations(Iterable<E> elements) { return orderedPermutations(elements, Ordering.natural()); }
  
  public static <E> Collection<List<E>> orderedPermutations(Iterable<E> elements, Comparator<? super E> comparator) { return new OrderedPermutationCollection(elements, comparator); }
  
  public static <E> Collection<List<E>> permutations(Collection<E> elements) { return new PermutationCollection(ImmutableList.copyOf(elements)); }
  
  private static boolean isPermutation(List<?> first, List<?> second) {
    if (first.size() != second.size())
      return false; 
    HashMultiset hashMultiset1 = HashMultiset.create(first);
    HashMultiset hashMultiset2 = HashMultiset.create(second);
    return hashMultiset1.equals(hashMultiset2);
  }
}
