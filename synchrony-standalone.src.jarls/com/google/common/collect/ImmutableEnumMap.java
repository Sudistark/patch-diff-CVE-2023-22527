package com.google.common.collect;

import com.google.common.annotations.GwtCompatible;
import com.google.common.annotations.J2ktIncompatible;
import com.google.common.base.Preconditions;
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.util.EnumMap;
import java.util.Map;
import java.util.Spliterator;
import java.util.function.BiConsumer;
import javax.annotation.CheckForNull;

@ElementTypesAreNonnullByDefault
@GwtCompatible(serializable = true, emulated = true)
final class ImmutableEnumMap<K extends Enum<K>, V> extends ImmutableMap.IteratorBasedImmutableMap<K, V> {
  private final EnumMap<K, V> delegate;
  
  static <K extends Enum<K>, V> ImmutableMap<K, V> asImmutable(EnumMap<K, V> map) {
    Map.Entry<K, V> entry;
    switch (map.size()) {
      case 0:
        return ImmutableMap.of();
      case 1:
        entry = (Map.Entry)Iterables.getOnlyElement(map.entrySet());
        return ImmutableMap.of((Enum)entry.getKey(), entry.getValue());
    } 
    return new ImmutableEnumMap(map);
  }
  
  private ImmutableEnumMap(EnumMap<K, V> delegate) {
    this.delegate = delegate;
    Preconditions.checkArgument(!delegate.isEmpty());
  }
  
  UnmodifiableIterator<K> keyIterator() { return Iterators.unmodifiableIterator(this.delegate.keySet().iterator()); }
  
  Spliterator<K> keySpliterator() { return this.delegate.keySet().spliterator(); }
  
  public int size() { return this.delegate.size(); }
  
  public boolean containsKey(@CheckForNull Object key) { return this.delegate.containsKey(key); }
  
  @CheckForNull
  public V get(@CheckForNull Object key) { return (V)this.delegate.get(key); }
  
  public boolean equals(@CheckForNull Object object) {
    if (object == this)
      return true; 
    if (object instanceof ImmutableEnumMap)
      object = ((ImmutableEnumMap)object).delegate; 
    return this.delegate.equals(object);
  }
  
  UnmodifiableIterator<Map.Entry<K, V>> entryIterator() { return Maps.unmodifiableEntryIterator(this.delegate.entrySet().iterator()); }
  
  Spliterator<Map.Entry<K, V>> entrySpliterator() { return CollectSpliterators.map(this.delegate.entrySet().spliterator(), Maps::unmodifiableEntry); }
  
  public void forEach(BiConsumer<? super K, ? super V> action) { this.delegate.forEach(action); }
  
  boolean isPartialView() { return false; }
  
  @J2ktIncompatible
  Object writeReplace() { return new EnumSerializedForm(this.delegate); }
  
  @J2ktIncompatible
  private void readObject(ObjectInputStream stream) throws InvalidObjectException { throw new InvalidObjectException("Use EnumSerializedForm"); }
}
