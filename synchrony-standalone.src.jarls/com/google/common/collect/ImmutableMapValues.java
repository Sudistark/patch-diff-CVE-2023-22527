package com.google.common.collect;

import com.google.common.annotations.GwtCompatible;
import com.google.common.annotations.GwtIncompatible;
import com.google.common.base.Preconditions;
import java.util.Iterator;
import java.util.Map;
import java.util.Spliterator;
import java.util.function.Consumer;
import javax.annotation.CheckForNull;

@ElementTypesAreNonnullByDefault
@GwtCompatible(emulated = true)
final class ImmutableMapValues<K, V> extends ImmutableCollection<V> {
  private final ImmutableMap<K, V> map;
  
  ImmutableMapValues(ImmutableMap<K, V> map) { this.map = map; }
  
  public int size() { return this.map.size(); }
  
  public UnmodifiableIterator<V> iterator() { return new Object(this); }
  
  public Spliterator<V> spliterator() { return CollectSpliterators.map(this.map.entrySet().spliterator(), Map.Entry::getValue); }
  
  public boolean contains(@CheckForNull Object object) { return (object != null && Iterators.contains(iterator(), object)); }
  
  boolean isPartialView() { return true; }
  
  public ImmutableList<V> asList() {
    ImmutableList<Map.Entry<K, V>> entryList = this.map.entrySet().asList();
    return new Object(this, entryList);
  }
  
  @GwtIncompatible
  public void forEach(Consumer<? super V> action) {
    Preconditions.checkNotNull(action);
    this.map.forEach((k, v) -> action.accept(v));
  }
}
