package com.google.common.collect;

import com.google.common.annotations.GwtCompatible;
import com.google.common.annotations.J2ktIncompatible;
import com.google.common.base.Preconditions;
import com.google.common.math.IntMath;
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.math.RoundingMode;
import java.util.Collection;
import java.util.EnumSet;
import java.util.Iterator;
import java.util.Set;
import java.util.stream.Collector;
import javax.annotation.CheckForNull;

@ElementTypesAreNonnullByDefault
@GwtCompatible(serializable = true, emulated = true)
public abstract class ImmutableSet<E> extends ImmutableCollection<E> implements Set<E> {
  static final int SPLITERATOR_CHARACTERISTICS = 1297;
  
  static final int MAX_TABLE_SIZE = 1073741824;
  
  private static final double DESIRED_LOAD_FACTOR = 0.7D;
  
  private static final int CUTOFF = 751619276;
  
  public static <E> Collector<E, ?, ImmutableSet<E>> toImmutableSet() { return CollectCollectors.toImmutableSet(); }
  
  public static <E> ImmutableSet<E> of() { return RegularImmutableSet.EMPTY; }
  
  public static <E> ImmutableSet<E> of(E element) { return new SingletonImmutableSet(element); }
  
  public static <E> ImmutableSet<E> of(E e1, E e2) { return construct(2, 2, new Object[] { e1, e2 }); }
  
  public static <E> ImmutableSet<E> of(E e1, E e2, E e3) { return construct(3, 3, new Object[] { e1, e2, e3 }); }
  
  public static <E> ImmutableSet<E> of(E e1, E e2, E e3, E e4) { return construct(4, 4, new Object[] { e1, e2, e3, e4 }); }
  
  public static <E> ImmutableSet<E> of(E e1, E e2, E e3, E e4, E e5) { return construct(5, 5, new Object[] { e1, e2, e3, e4, e5 }); }
  
  @SafeVarargs
  public static <E> ImmutableSet<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E... others) {
    Preconditions.checkArgument((others.length <= 2147483641), "the total number of elements must fit in an int");
    int paramCount = 6;
    Object[] elements = new Object[6 + others.length];
    elements[0] = e1;
    elements[1] = e2;
    elements[2] = e3;
    elements[3] = e4;
    elements[4] = e5;
    elements[5] = e6;
    System.arraycopy(others, 0, elements, 6, others.length);
    return construct(elements.length, elements.length, elements);
  }
  
  private static <E> ImmutableSet<E> constructUnknownDuplication(int n, Object... elements) {
    return construct(n, 
        
        Math.max(4, 
          
          IntMath.sqrt(n, RoundingMode.CEILING)), elements);
  }
  
  private static <E> ImmutableSet<E> construct(int n, int expectedSize, Object... elements) {
    E elem;
    switch (n) {
      case 0:
        return of();
      case 1:
        elem = (E)elements[0];
        return of(elem);
    } 
    SetBuilderImpl setBuilderImpl = new RegularSetBuilderImpl(expectedSize);
    for (int i = 0; i < n; i++) {
      E e = (E)Preconditions.checkNotNull(elements[i]);
      setBuilderImpl = setBuilderImpl.add(e);
    } 
    return setBuilderImpl.review().build();
  }
  
  public static <E> ImmutableSet<E> copyOf(Collection<? extends E> elements) {
    if (elements instanceof ImmutableSet && !(elements instanceof java.util.SortedSet)) {
      ImmutableSet<E> set = (ImmutableSet)elements;
      if (!set.isPartialView())
        return set; 
    } else if (elements instanceof EnumSet) {
      return copyOfEnumSet((EnumSet)elements);
    } 
    Object[] array = elements.toArray();
    if (elements instanceof Set)
      return construct(array.length, array.length, array); 
    return constructUnknownDuplication(array.length, array);
  }
  
  public static <E> ImmutableSet<E> copyOf(Iterable<? extends E> elements) {
    return (elements instanceof Collection) ? 
      copyOf((Collection)elements) : 
      copyOf(elements.iterator());
  }
  
  public static <E> ImmutableSet<E> copyOf(Iterator<? extends E> elements) {
    if (!elements.hasNext())
      return of(); 
    E first = (E)elements.next();
    if (!elements.hasNext())
      return of(first); 
    return (new Builder()).add(first).addAll(elements).build();
  }
  
  public static <E> ImmutableSet<E> copyOf(E[] elements) {
    switch (elements.length) {
      case 0:
        return of();
      case 1:
        return of(elements[0]);
    } 
    return constructUnknownDuplication(elements.length, (Object[])elements.clone());
  }
  
  private static ImmutableSet copyOfEnumSet(EnumSet enumSet) { return ImmutableEnumSet.asImmutable(EnumSet.copyOf(enumSet)); }
  
  boolean isHashCodeFast() { return false; }
  
  public boolean equals(@CheckForNull Object object) {
    if (object == this)
      return true; 
    if (object instanceof ImmutableSet && 
      isHashCodeFast() && ((ImmutableSet)object)
      .isHashCodeFast() && 
      hashCode() != object.hashCode())
      return false; 
    return Sets.equalsImpl(this, object);
  }
  
  public int hashCode() { return Sets.hashCodeImpl(this); }
  
  @J2ktIncompatible
  Object writeReplace() { return new SerializedForm(toArray()); }
  
  @J2ktIncompatible
  private void readObject(ObjectInputStream stream) throws InvalidObjectException { throw new InvalidObjectException("Use SerializedForm"); }
  
  public static <E> Builder<E> builder() { return new Builder(); }
  
  public static <E> Builder<E> builderWithExpectedSize(int expectedSize) {
    CollectPreconditions.checkNonnegative(expectedSize, "expectedSize");
    return new Builder(expectedSize);
  }
  
  static int chooseTableSize(int setSize) {
    setSize = Math.max(setSize, 2);
    if (setSize < 751619276) {
      int tableSize = Integer.highestOneBit(setSize - 1) << 1;
      while (tableSize * 0.7D < setSize)
        tableSize <<= 1; 
      return tableSize;
    } 
    Preconditions.checkArgument((setSize < 1073741824), "collection too large");
    return 1073741824;
  }
  
  public abstract UnmodifiableIterator<E> iterator();
}
