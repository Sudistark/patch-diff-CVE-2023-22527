package com.google.common.collect;

import com.google.common.annotations.GwtCompatible;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import java.math.BigInteger;
import java.util.NoSuchElementException;
import javax.annotation.CheckForNull;

@ElementTypesAreNonnullByDefault
@GwtCompatible
public abstract class DiscreteDomain<C extends Comparable> extends Object {
  final boolean supportsFastOffset;
  
  public static DiscreteDomain<Integer> integers() { return IntegerDomain.access$000(); }
  
  public static DiscreteDomain<Long> longs() { return LongDomain.access$200(); }
  
  public static DiscreteDomain<BigInteger> bigIntegers() { return BigIntegerDomain.access$300(); }
  
  protected DiscreteDomain() { this(false); }
  
  private DiscreteDomain(boolean supportsFastOffset) { this.supportsFastOffset = supportsFastOffset; }
  
  C offset(C origin, long distance) {
    C current = origin;
    CollectPreconditions.checkNonnegative(distance, "distance");
    long i;
    for (i = 0L; i < distance; i++) {
      current = (C)next(current);
      if (current == null)
        throw new IllegalArgumentException("overflowed computing offset(" + origin + ", " + distance + ")"); 
    } 
    return current;
  }
  
  @CanIgnoreReturnValue
  public C minValue() { throw new NoSuchElementException(); }
  
  @CanIgnoreReturnValue
  public C maxValue() { throw new NoSuchElementException(); }
  
  @CheckForNull
  public abstract C next(C paramC);
  
  @CheckForNull
  public abstract C previous(C paramC);
  
  public abstract long distance(C paramC1, C paramC2);
}
