package com.google.common.collect;

import com.google.common.annotations.GwtCompatible;
import com.google.common.annotations.GwtIncompatible;
import com.google.common.base.Function;
import com.google.common.base.Objects;
import com.google.common.base.Optional;
import com.google.common.base.Preconditions;
import com.google.common.base.Predicate;
import com.google.common.base.Predicates;
import com.google.common.primitives.Ints;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import java.util.Arrays;
import java.util.Collection;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.NoSuchElementException;
import javax.annotation.CheckForNull;

@ElementTypesAreNonnullByDefault
@GwtCompatible(emulated = true)
public final class Iterators {
  static <T> UnmodifiableIterator<T> emptyIterator() { return emptyListIterator(); }
  
  static <T> UnmodifiableListIterator<T> emptyListIterator() { return ArrayItr.EMPTY; }
  
  static <T> Iterator<T> emptyModifiableIterator() { return EmptyModifiableIterator.INSTANCE; }
  
  public static <T> UnmodifiableIterator<T> unmodifiableIterator(Iterator<? extends T> iterator) {
    Preconditions.checkNotNull(iterator);
    if (iterator instanceof UnmodifiableIterator)
      return (UnmodifiableIterator)iterator; 
    return new Object(iterator);
  }
  
  @Deprecated
  public static <T> UnmodifiableIterator<T> unmodifiableIterator(UnmodifiableIterator<T> iterator) { return (UnmodifiableIterator)Preconditions.checkNotNull(iterator); }
  
  public static int size(Iterator<?> iterator) {
    long count = 0L;
    while (iterator.hasNext()) {
      iterator.next();
      count++;
    } 
    return Ints.saturatedCast(count);
  }
  
  public static boolean contains(Iterator<?> iterator, @CheckForNull Object element) {
    if (element == null) {
      while (iterator.hasNext()) {
        if (iterator.next() == null)
          return true; 
      } 
    } else {
      while (iterator.hasNext()) {
        if (element.equals(iterator.next()))
          return true; 
      } 
    } 
    return false;
  }
  
  @CanIgnoreReturnValue
  public static boolean removeAll(Iterator<?> removeFrom, Collection<?> elementsToRemove) {
    Preconditions.checkNotNull(elementsToRemove);
    boolean result = false;
    while (removeFrom.hasNext()) {
      if (elementsToRemove.contains(removeFrom.next())) {
        removeFrom.remove();
        result = true;
      } 
    } 
    return result;
  }
  
  @CanIgnoreReturnValue
  public static <T> boolean removeIf(Iterator<T> removeFrom, Predicate<? super T> predicate) {
    Preconditions.checkNotNull(predicate);
    boolean modified = false;
    while (removeFrom.hasNext()) {
      if (predicate.apply(removeFrom.next())) {
        removeFrom.remove();
        modified = true;
      } 
    } 
    return modified;
  }
  
  @CanIgnoreReturnValue
  public static boolean retainAll(Iterator<?> removeFrom, Collection<?> elementsToRetain) {
    Preconditions.checkNotNull(elementsToRetain);
    boolean result = false;
    while (removeFrom.hasNext()) {
      if (!elementsToRetain.contains(removeFrom.next())) {
        removeFrom.remove();
        result = true;
      } 
    } 
    return result;
  }
  
  public static boolean elementsEqual(Iterator<?> iterator1, Iterator<?> iterator2) {
    while (iterator1.hasNext()) {
      if (!iterator2.hasNext())
        return false; 
      Object o1 = iterator1.next();
      Object o2 = iterator2.next();
      if (!Objects.equal(o1, o2))
        return false; 
    } 
    return !iterator2.hasNext();
  }
  
  public static String toString(Iterator<?> iterator) {
    StringBuilder sb = (new StringBuilder()).append('[');
    boolean first = true;
    while (iterator.hasNext()) {
      if (!first)
        sb.append(", "); 
      first = false;
      sb.append(iterator.next());
    } 
    return sb.append(']').toString();
  }
  
  @ParametricNullness
  public static <T> T getOnlyElement(Iterator<T> iterator) {
    T first = (T)iterator.next();
    if (!iterator.hasNext())
      return first; 
    StringBuilder sb = (new StringBuilder()).append("expected one element but was: <").append(first);
    for (int i = 0; i < 4 && iterator.hasNext(); i++)
      sb.append(", ").append(iterator.next()); 
    if (iterator.hasNext())
      sb.append(", ..."); 
    sb.append('>');
    throw new IllegalArgumentException(sb.toString());
  }
  
  @ParametricNullness
  public static <T> T getOnlyElement(Iterator<? extends T> iterator, @ParametricNullness T defaultValue) { return (T)(iterator.hasNext() ? getOnlyElement(iterator) : defaultValue); }
  
  @GwtIncompatible
  public static <T> T[] toArray(Iterator<? extends T> iterator, Class<T> type) {
    List<T> list = Lists.newArrayList(iterator);
    return (T[])Iterables.toArray(list, type);
  }
  
  @CanIgnoreReturnValue
  public static <T> boolean addAll(Collection<T> addTo, Iterator<? extends T> iterator) {
    Preconditions.checkNotNull(addTo);
    Preconditions.checkNotNull(iterator);
    boolean wasModified = false;
    while (iterator.hasNext())
      wasModified |= addTo.add(iterator.next()); 
    return wasModified;
  }
  
  public static int frequency(Iterator<?> iterator, @CheckForNull Object element) {
    int count = 0;
    while (contains(iterator, element))
      count++; 
    return count;
  }
  
  public static <T> Iterator<T> cycle(Iterable<T> iterable) {
    Preconditions.checkNotNull(iterable);
    return new Object(iterable);
  }
  
  @SafeVarargs
  public static <T> Iterator<T> cycle(T... elements) { return cycle(Lists.newArrayList(elements)); }
  
  private static <I extends Iterator<?>> Iterator<I> consumingForArray(I... elements) { return new Object(elements); }
  
  public static <T> Iterator<T> concat(Iterator<? extends T> a, Iterator<? extends T> b) {
    Preconditions.checkNotNull(a);
    Preconditions.checkNotNull(b);
    return concat(consumingForArray(new Iterator[] { a, b }));
  }
  
  public static <T> Iterator<T> concat(Iterator<? extends T> a, Iterator<? extends T> b, Iterator<? extends T> c) {
    Preconditions.checkNotNull(a);
    Preconditions.checkNotNull(b);
    Preconditions.checkNotNull(c);
    return concat(consumingForArray(new Iterator[] { a, b, c }));
  }
  
  public static <T> Iterator<T> concat(Iterator<? extends T> a, Iterator<? extends T> b, Iterator<? extends T> c, Iterator<? extends T> d) {
    Preconditions.checkNotNull(a);
    Preconditions.checkNotNull(b);
    Preconditions.checkNotNull(c);
    Preconditions.checkNotNull(d);
    return concat(consumingForArray(new Iterator[] { a, b, c, d }));
  }
  
  public static <T> Iterator<T> concat(Iterator... inputs) { return concatNoDefensiveCopy((Iterator[])Arrays.copyOf(inputs, inputs.length)); }
  
  public static <T> Iterator<T> concat(Iterator<? extends Iterator<? extends T>> inputs) { return new ConcatenatedIterator(inputs); }
  
  static <T> Iterator<T> concatNoDefensiveCopy(Iterator... inputs) {
    for (Iterator<? extends T> input : (Iterator[])Preconditions.checkNotNull(inputs))
      Preconditions.checkNotNull(input); 
    return concat(consumingForArray(inputs));
  }
  
  public static <T> UnmodifiableIterator<List<T>> partition(Iterator<T> iterator, int size) { return partitionImpl(iterator, size, false); }
  
  public static <T> UnmodifiableIterator<List<T>> paddedPartition(Iterator<T> iterator, int size) { return partitionImpl(iterator, size, true); }
  
  private static <T> UnmodifiableIterator<List<T>> partitionImpl(Iterator<T> iterator, int size, boolean pad) {
    Preconditions.checkNotNull(iterator);
    Preconditions.checkArgument((size > 0));
    return new Object(iterator, size, pad);
  }
  
  public static <T> UnmodifiableIterator<T> filter(Iterator<T> unfiltered, Predicate<? super T> retainIfTrue) {
    Preconditions.checkNotNull(unfiltered);
    Preconditions.checkNotNull(retainIfTrue);
    return new Object(unfiltered, retainIfTrue);
  }
  
  @GwtIncompatible
  public static <T> UnmodifiableIterator<T> filter(Iterator<?> unfiltered, Class<T> desiredType) { return filter(unfiltered, Predicates.instanceOf(desiredType)); }
  
  public static <T> boolean any(Iterator<T> iterator, Predicate<? super T> predicate) { return (indexOf(iterator, predicate) != -1); }
  
  public static <T> boolean all(Iterator<T> iterator, Predicate<? super T> predicate) {
    Preconditions.checkNotNull(predicate);
    while (iterator.hasNext()) {
      T element = (T)iterator.next();
      if (!predicate.apply(element))
        return false; 
    } 
    return true;
  }
  
  @ParametricNullness
  public static <T> T find(Iterator<T> iterator, Predicate<? super T> predicate) {
    Preconditions.checkNotNull(iterator);
    Preconditions.checkNotNull(predicate);
    while (iterator.hasNext()) {
      T t = (T)iterator.next();
      if (predicate.apply(t))
        return t; 
    } 
    throw new NoSuchElementException();
  }
  
  @CheckForNull
  public static <T> T find(Iterator<? extends T> iterator, Predicate<? super T> predicate, @CheckForNull T defaultValue) {
    Preconditions.checkNotNull(iterator);
    Preconditions.checkNotNull(predicate);
    while (iterator.hasNext()) {
      T t = (T)iterator.next();
      if (predicate.apply(t))
        return t; 
    } 
    return defaultValue;
  }
  
  public static <T> Optional<T> tryFind(Iterator<T> iterator, Predicate<? super T> predicate) {
    Preconditions.checkNotNull(iterator);
    Preconditions.checkNotNull(predicate);
    while (iterator.hasNext()) {
      T t = (T)iterator.next();
      if (predicate.apply(t))
        return Optional.of(t); 
    } 
    return Optional.absent();
  }
  
  public static <T> int indexOf(Iterator<T> iterator, Predicate<? super T> predicate) {
    Preconditions.checkNotNull(predicate, "predicate");
    for (int i = 0; iterator.hasNext(); i++) {
      T current = (T)iterator.next();
      if (predicate.apply(current))
        return i; 
    } 
    return -1;
  }
  
  public static <F, T> Iterator<T> transform(Iterator<F> fromIterator, Function<? super F, ? extends T> function) {
    Preconditions.checkNotNull(function);
    return new Object(fromIterator, function);
  }
  
  @ParametricNullness
  public static <T> T get(Iterator<T> iterator, int position) {
    checkNonnegative(position);
    int skipped = advance(iterator, position);
    if (!iterator.hasNext())
      throw new IndexOutOfBoundsException("position (" + position + ") must be less than the number of elements that remained (" + skipped + ")"); 
    return (T)iterator.next();
  }
  
  @ParametricNullness
  public static <T> T get(Iterator<? extends T> iterator, int position, @ParametricNullness T defaultValue) {
    checkNonnegative(position);
    advance(iterator, position);
    return (T)getNext(iterator, defaultValue);
  }
  
  static void checkNonnegative(int position) {
    if (position < 0)
      throw new IndexOutOfBoundsException("position (" + position + ") must not be negative"); 
  }
  
  @ParametricNullness
  public static <T> T getNext(Iterator<? extends T> iterator, @ParametricNullness T defaultValue) { return (T)(iterator.hasNext() ? iterator.next() : defaultValue); }
  
  @ParametricNullness
  public static <T> T getLast(Iterator<T> iterator) {
    T current;
    do {
      current = (T)iterator.next();
    } while (iterator.hasNext());
    return current;
  }
  
  @ParametricNullness
  public static <T> T getLast(Iterator<? extends T> iterator, @ParametricNullness T defaultValue) { return (T)(iterator.hasNext() ? getLast(iterator) : defaultValue); }
  
  @CanIgnoreReturnValue
  public static int advance(Iterator<?> iterator, int numberToAdvance) {
    Preconditions.checkNotNull(iterator);
    Preconditions.checkArgument((numberToAdvance >= 0), "numberToAdvance must be nonnegative");
    int i;
    for (i = 0; i < numberToAdvance && iterator.hasNext(); i++)
      iterator.next(); 
    return i;
  }
  
  public static <T> Iterator<T> limit(Iterator<T> iterator, int limitSize) {
    Preconditions.checkNotNull(iterator);
    Preconditions.checkArgument((limitSize >= 0), "limit is negative");
    return new Object(limitSize, iterator);
  }
  
  public static <T> Iterator<T> consumingIterator(Iterator<T> iterator) {
    Preconditions.checkNotNull(iterator);
    return new Object(iterator);
  }
  
  @CheckForNull
  static <T> T pollNext(Iterator<T> iterator) {
    if (iterator.hasNext()) {
      T result = (T)iterator.next();
      iterator.remove();
      return result;
    } 
    return null;
  }
  
  static void clear(Iterator<?> iterator) {
    Preconditions.checkNotNull(iterator);
    while (iterator.hasNext()) {
      iterator.next();
      iterator.remove();
    } 
  }
  
  @SafeVarargs
  public static <T> UnmodifiableIterator<T> forArray(T... array) { return forArray(array, 0, array.length, 0); }
  
  static <T> UnmodifiableListIterator<T> forArray(T[] array, int offset, int length, int index) {
    Preconditions.checkArgument((length >= 0));
    int end = offset + length;
    Preconditions.checkPositionIndexes(offset, end, array.length);
    Preconditions.checkPositionIndex(index, length);
    if (length == 0)
      return emptyListIterator(); 
    return new ArrayItr(array, offset, length, index);
  }
  
  public static <T> UnmodifiableIterator<T> singletonIterator(@ParametricNullness T value) { return new Object(value); }
  
  public static <T> UnmodifiableIterator<T> forEnumeration(Enumeration<T> enumeration) {
    Preconditions.checkNotNull(enumeration);
    return new Object(enumeration);
  }
  
  public static <T> Enumeration<T> asEnumeration(Iterator<T> iterator) {
    Preconditions.checkNotNull(iterator);
    return new Object(iterator);
  }
  
  public static <T> PeekingIterator<T> peekingIterator(Iterator<? extends T> iterator) {
    if (iterator instanceof PeekingImpl)
      return (PeekingImpl)iterator; 
    return new PeekingImpl(iterator);
  }
  
  @Deprecated
  public static <T> PeekingIterator<T> peekingIterator(PeekingIterator<T> iterator) { return (PeekingIterator)Preconditions.checkNotNull(iterator); }
  
  public static <T> UnmodifiableIterator<T> mergeSorted(Iterable<? extends Iterator<? extends T>> iterators, Comparator<? super T> comparator) {
    Preconditions.checkNotNull(iterators, "iterators");
    Preconditions.checkNotNull(comparator, "comparator");
    return new MergingIterator(iterators, comparator);
  }
  
  static <T> ListIterator<T> cast(Iterator<T> iterator) { return (ListIterator)iterator; }
}
