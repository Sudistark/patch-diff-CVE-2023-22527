package com.google.common.collect;

import com.google.common.annotations.GwtCompatible;
import com.google.common.annotations.GwtIncompatible;
import com.google.common.annotations.J2ktIncompatible;
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.util.Map;
import javax.annotation.CheckForNull;

@ElementTypesAreNonnullByDefault
@GwtCompatible(emulated = true)
abstract class ImmutableMapEntrySet<K, V> extends ImmutableSet.CachingAsList<Map.Entry<K, V>> {
  abstract ImmutableMap<K, V> map();
  
  public int size() { return map().size(); }
  
  public boolean contains(@CheckForNull Object object) {
    if (object instanceof Map.Entry) {
      Map.Entry<?, ?> entry = (Map.Entry)object;
      V value = (V)map().get(entry.getKey());
      return (value != null && value.equals(entry.getValue()));
    } 
    return false;
  }
  
  boolean isPartialView() { return map().isPartialView(); }
  
  @GwtIncompatible
  boolean isHashCodeFast() { return map().isHashCodeFast(); }
  
  public int hashCode() { return map().hashCode(); }
  
  @GwtIncompatible
  @J2ktIncompatible
  Object writeReplace() { return new EntrySetSerializedForm(map()); }
  
  @GwtIncompatible
  @J2ktIncompatible
  private void readObject(ObjectInputStream stream) throws InvalidObjectException { throw new InvalidObjectException("Use EntrySetSerializedForm"); }
}
