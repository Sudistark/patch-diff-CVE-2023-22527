package com.google.common.collect;

import com.google.common.annotations.GwtCompatible;
import com.google.common.primitives.Booleans;
import java.io.Serializable;
import javax.annotation.CheckForNull;

@ElementTypesAreNonnullByDefault
@GwtCompatible
abstract class Cut<C extends Comparable> extends Object implements Comparable<Cut<C>>, Serializable {
  final C endpoint;
  
  private static final long serialVersionUID = 0L;
  
  Cut(C endpoint) { this.endpoint = endpoint; }
  
  Cut<C> canonical(DiscreteDomain<C> domain) { return this; }
  
  public int compareTo(Cut<C> that) {
    if (that == belowAll())
      return 1; 
    if (that == aboveAll())
      return -1; 
    int result = Range.compareOrThrow(this.endpoint, that.endpoint);
    if (result != 0)
      return result; 
    return Booleans.compare(this instanceof AboveValue, that instanceof AboveValue);
  }
  
  C endpoint() { return (C)this.endpoint; }
  
  public boolean equals(@CheckForNull Object obj) {
    if (obj instanceof Cut) {
      Cut<C> that = (Cut)obj;
      try {
        int compareResult = compareTo(that);
        return (compareResult == 0);
      } catch (ClassCastException wastNotComparableToOurType) {
        return false;
      } 
    } 
    return false;
  }
  
  static <C extends Comparable> Cut<C> belowAll() { return BelowAll.access$000(); }
  
  static <C extends Comparable> Cut<C> aboveAll() { return AboveAll.access$100(); }
  
  static <C extends Comparable> Cut<C> belowValue(C endpoint) { return new BelowValue(endpoint); }
  
  static <C extends Comparable> Cut<C> aboveValue(C endpoint) { return new AboveValue(endpoint); }
  
  abstract boolean isLessThan(C paramC);
  
  abstract BoundType typeAsLowerBound();
  
  abstract BoundType typeAsUpperBound();
  
  abstract Cut<C> withLowerBoundType(BoundType paramBoundType, DiscreteDomain<C> paramDiscreteDomain);
  
  abstract Cut<C> withUpperBoundType(BoundType paramBoundType, DiscreteDomain<C> paramDiscreteDomain);
  
  abstract void describeAsLowerBound(StringBuilder paramStringBuilder);
  
  abstract void describeAsUpperBound(StringBuilder paramStringBuilder);
  
  @CheckForNull
  abstract C leastValueAbove(DiscreteDomain<C> paramDiscreteDomain);
  
  @CheckForNull
  abstract C greatestValueBelow(DiscreteDomain<C> paramDiscreteDomain);
  
  public abstract int hashCode();
}
