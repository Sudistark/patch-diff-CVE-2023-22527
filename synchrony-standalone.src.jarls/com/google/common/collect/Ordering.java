package com.google.common.collect;

import com.google.common.annotations.GwtCompatible;
import com.google.common.annotations.J2ktIncompatible;
import com.google.common.base.Function;
import com.google.common.base.Preconditions;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

@ElementTypesAreNonnullByDefault
@GwtCompatible
public abstract class Ordering<T> extends Object implements Comparator<T> {
  static final int LEFT_IS_GREATER = 1;
  
  static final int RIGHT_IS_GREATER = -1;
  
  @GwtCompatible(serializable = true)
  public static <C extends Comparable> Ordering<C> natural() { return NaturalOrdering.INSTANCE; }
  
  @GwtCompatible(serializable = true)
  public static <T> Ordering<T> from(Comparator<T> comparator) {
    return (comparator instanceof Ordering) ? 
      (Ordering)comparator : 
      new ComparatorOrdering(comparator);
  }
  
  @Deprecated
  @GwtCompatible(serializable = true)
  public static <T> Ordering<T> from(Ordering<T> ordering) { return (Ordering)Preconditions.checkNotNull(ordering); }
  
  @GwtCompatible(serializable = true)
  public static <T> Ordering<T> explicit(List<T> valuesInOrder) { return new ExplicitOrdering(valuesInOrder); }
  
  @GwtCompatible(serializable = true)
  public static <T> Ordering<T> explicit(T leastValue, T... remainingValuesInOrder) { return explicit(Lists.asList(leastValue, remainingValuesInOrder)); }
  
  @GwtCompatible(serializable = true)
  public static Ordering<Object> allEqual() { return AllEqualOrdering.INSTANCE; }
  
  @GwtCompatible(serializable = true)
  public static Ordering<Object> usingToString() { return UsingToStringOrdering.INSTANCE; }
  
  @J2ktIncompatible
  public static Ordering<Object> arbitrary() { return ArbitraryOrderingHolder.ARBITRARY_ORDERING; }
  
  @GwtCompatible(serializable = true)
  public <S extends T> Ordering<S> reverse() { return new ReverseOrdering(this); }
  
  @GwtCompatible(serializable = true)
  public <S extends T> Ordering<S> nullsFirst() { return new NullsFirstOrdering(this); }
  
  @GwtCompatible(serializable = true)
  public <S extends T> Ordering<S> nullsLast() { return new NullsLastOrdering(this); }
  
  @GwtCompatible(serializable = true)
  public <F> Ordering<F> onResultOf(Function<F, ? extends T> function) { return new ByFunctionOrdering(function, this); }
  
  <T2 extends T> Ordering<Map.Entry<T2, ?>> onKeys() { return onResultOf(Maps.keyFunction()); }
  
  @GwtCompatible(serializable = true)
  public <U extends T> Ordering<U> compound(Comparator<? super U> secondaryComparator) { return new CompoundOrdering(this, (Comparator)Preconditions.checkNotNull(secondaryComparator)); }
  
  @GwtCompatible(serializable = true)
  public static <T> Ordering<T> compound(Iterable<? extends Comparator<? super T>> comparators) { return new CompoundOrdering(comparators); }
  
  @GwtCompatible(serializable = true)
  public <S extends T> Ordering<Iterable<S>> lexicographical() { return new LexicographicalOrdering(this); }
  
  public abstract int compare(@ParametricNullness T paramT1, @ParametricNullness T paramT2);
  
  @ParametricNullness
  public <E extends T> E min(Iterator<E> iterator) {
    E minSoFar = (E)iterator.next();
    while (iterator.hasNext())
      minSoFar = (E)min(minSoFar, iterator.next()); 
    return minSoFar;
  }
  
  @ParametricNullness
  public <E extends T> E min(Iterable<E> iterable) { return (E)min(iterable.iterator()); }
  
  @ParametricNullness
  public <E extends T> E min(@ParametricNullness E a, @ParametricNullness E b) { return (compare(a, b) <= 0) ? a : b; }
  
  @ParametricNullness
  public <E extends T> E min(@ParametricNullness E a, @ParametricNullness E b, @ParametricNullness E c, E... rest) {
    E minSoFar = (E)min(min(a, b), c);
    for (E r : rest)
      minSoFar = (E)min(minSoFar, r); 
    return minSoFar;
  }
  
  @ParametricNullness
  public <E extends T> E max(Iterator<E> iterator) {
    E maxSoFar = (E)iterator.next();
    while (iterator.hasNext())
      maxSoFar = (E)max(maxSoFar, iterator.next()); 
    return maxSoFar;
  }
  
  @ParametricNullness
  public <E extends T> E max(Iterable<E> iterable) { return (E)max(iterable.iterator()); }
  
  @ParametricNullness
  public <E extends T> E max(@ParametricNullness E a, @ParametricNullness E b) { return (compare(a, b) >= 0) ? a : b; }
  
  @ParametricNullness
  public <E extends T> E max(@ParametricNullness E a, @ParametricNullness E b, @ParametricNullness E c, E... rest) {
    E maxSoFar = (E)max(max(a, b), c);
    for (E r : rest)
      maxSoFar = (E)max(maxSoFar, r); 
    return maxSoFar;
  }
  
  public <E extends T> List<E> leastOf(Iterable<E> iterable, int k) {
    if (iterable instanceof Collection) {
      Collection<E> collection = (Collection)iterable;
      if (collection.size() <= 2L * k) {
        E[] array = (E[])collection.toArray();
        Arrays.sort(array, this);
        if (array.length > k)
          array = (E[])Arrays.copyOf(array, k); 
        return Collections.unmodifiableList(Arrays.asList(array));
      } 
    } 
    return leastOf(iterable.iterator(), k);
  }
  
  public <E extends T> List<E> leastOf(Iterator<E> iterator, int k) {
    Preconditions.checkNotNull(iterator);
    CollectPreconditions.checkNonnegative(k, "k");
    if (k == 0 || !iterator.hasNext())
      return Collections.emptyList(); 
    if (k >= 1073741823) {
      ArrayList<E> list = Lists.newArrayList(iterator);
      Collections.sort(list, this);
      if (list.size() > k)
        list.subList(k, list.size()).clear(); 
      list.trimToSize();
      return Collections.unmodifiableList(list);
    } 
    TopKSelector<E> selector = TopKSelector.least(k, this);
    selector.offerAll(iterator);
    return selector.topK();
  }
  
  public <E extends T> List<E> greatestOf(Iterable<E> iterable, int k) { return reverse().leastOf(iterable, k); }
  
  public <E extends T> List<E> greatestOf(Iterator<E> iterator, int k) { return reverse().leastOf(iterator, k); }
  
  public <E extends T> List<E> sortedCopy(Iterable<E> elements) {
    E[] array = (E[])Iterables.toArray(elements);
    Arrays.sort(array, this);
    return Lists.newArrayList(Arrays.asList(array));
  }
  
  public <E extends T> ImmutableList<E> immutableSortedCopy(Iterable<E> elements) { return ImmutableList.sortedCopyOf(this, elements); }
  
  public boolean isOrdered(Iterable<? extends T> iterable) {
    Iterator<? extends T> it = iterable.iterator();
    if (it.hasNext()) {
      T prev = (T)it.next();
      while (it.hasNext()) {
        T next = (T)it.next();
        if (compare(prev, next) > 0)
          return false; 
        prev = next;
      } 
    } 
    return true;
  }
  
  public boolean isStrictlyOrdered(Iterable<? extends T> iterable) {
    Iterator<? extends T> it = iterable.iterator();
    if (it.hasNext()) {
      T prev = (T)it.next();
      while (it.hasNext()) {
        T next = (T)it.next();
        if (compare(prev, next) >= 0)
          return false; 
        prev = next;
      } 
    } 
    return true;
  }
  
  @Deprecated
  public int binarySearch(List<? extends T> sortedList, @ParametricNullness T key) { return Collections.binarySearch(sortedList, key, this); }
}
