package com.google.common.collect;

import com.google.common.annotations.GwtCompatible;
import com.google.common.annotations.VisibleForTesting;
import com.google.errorprone.annotations.concurrent.LazyInit;
import com.google.j2objc.annotations.RetainedWith;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Objects;
import javax.annotation.CheckForNull;

@ElementTypesAreNonnullByDefault
@GwtCompatible(emulated = true)
final class JdkBackedImmutableBiMap<K, V> extends ImmutableBiMap<K, V> {
  private final ImmutableList<Map.Entry<K, V>> entries;
  
  private final Map<K, V> forwardDelegate;
  
  private final Map<V, K> backwardDelegate;
  
  @LazyInit
  @CheckForNull
  @RetainedWith
  private JdkBackedImmutableBiMap<V, K> inverse;
  
  @VisibleForTesting
  static <K, V> ImmutableBiMap<K, V> create(int n, Entry[] entryArray) {
    Map<K, V> forwardDelegate = Maps.newHashMapWithExpectedSize(n);
    Map<V, K> backwardDelegate = Maps.newHashMapWithExpectedSize(n);
    for (int i = 0; i < n; i++) {
      ImmutableMapEntry immutableMapEntry = RegularImmutableMap.makeImmutable((Map.Entry)Objects.requireNonNull(entryArray[i]));
      entryArray[i] = immutableMapEntry;
      V oldValue = (V)forwardDelegate.putIfAbsent(immutableMapEntry.getKey(), immutableMapEntry.getValue());
      if (oldValue != null)
        throw conflictException("key", immutableMapEntry.getKey() + "=" + oldValue, entryArray[i]); 
      K oldKey = (K)backwardDelegate.putIfAbsent(immutableMapEntry.getValue(), immutableMapEntry.getKey());
      if (oldKey != null)
        throw conflictException("value", oldKey + "=" + immutableMapEntry.getValue(), entryArray[i]); 
    } 
    ImmutableList<Map.Entry<K, V>> entryList = ImmutableList.asImmutableList(entryArray, n);
    return new JdkBackedImmutableBiMap(entryList, forwardDelegate, backwardDelegate);
  }
  
  private JdkBackedImmutableBiMap(ImmutableList<Map.Entry<K, V>> entries, Map<K, V> forwardDelegate, Map<V, K> backwardDelegate) {
    this.entries = entries;
    this.forwardDelegate = forwardDelegate;
    this.backwardDelegate = backwardDelegate;
  }
  
  public int size() { return this.entries.size(); }
  
  public ImmutableBiMap<V, K> inverse() {
    JdkBackedImmutableBiMap<V, K> result = this.inverse;
    if (result == null) {
      this.inverse = result = new JdkBackedImmutableBiMap<V, K>(new InverseEntries(this, null), this.backwardDelegate, this.forwardDelegate);
      result.inverse = this;
    } 
    return result;
  }
  
  @CheckForNull
  public V get(@CheckForNull Object key) { return (V)this.forwardDelegate.get(key); }
  
  ImmutableSet<Map.Entry<K, V>> createEntrySet() { return new ImmutableMapEntrySet.RegularEntrySet(this, this.entries); }
  
  ImmutableSet<K> createKeySet() { return new ImmutableMapKeySet(this); }
  
  boolean isPartialView() { return false; }
}
