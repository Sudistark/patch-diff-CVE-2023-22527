package com.google.common.collect;

import com.google.common.annotations.GwtCompatible;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import java.util.Map;
import java.util.concurrent.ConcurrentMap;
import javax.annotation.CheckForNull;

@ElementTypesAreNonnullByDefault
@GwtCompatible
public abstract class ForwardingConcurrentMap<K, V> extends ForwardingMap<K, V> implements ConcurrentMap<K, V> {
  @CheckForNull
  @CanIgnoreReturnValue
  public V putIfAbsent(K key, V value) { return (V)delegate().putIfAbsent(key, value); }
  
  @CanIgnoreReturnValue
  public boolean remove(@CheckForNull Object key, @CheckForNull Object value) { return delegate().remove(key, value); }
  
  @CheckForNull
  @CanIgnoreReturnValue
  public V replace(K key, V value) { return (V)delegate().replace(key, value); }
  
  @CanIgnoreReturnValue
  public boolean replace(K key, V oldValue, V newValue) { return delegate().replace(key, oldValue, newValue); }
  
  protected abstract ConcurrentMap<K, V> delegate();
}
