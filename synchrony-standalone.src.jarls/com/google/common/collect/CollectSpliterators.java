package com.google.common.collect;

import com.google.common.annotations.GwtCompatible;
import com.google.common.base.Preconditions;
import java.util.Comparator;
import java.util.Spliterator;
import java.util.function.Function;
import java.util.function.IntFunction;
import java.util.function.Predicate;
import java.util.stream.IntStream;
import javax.annotation.CheckForNull;

@ElementTypesAreNonnullByDefault
@GwtCompatible
final class CollectSpliterators {
  static <T> Spliterator<T> indexed(int size, int extraCharacteristics, IntFunction<T> function) { return indexed(size, extraCharacteristics, function, null); }
  
  static <T> Spliterator<T> indexed(int size, int extraCharacteristics, IntFunction<T> function, @CheckForNull Comparator<? super T> comparator) {
    if (comparator != null)
      Preconditions.checkArgument(((extraCharacteristics & 0x4) != 0)); 
    return new WithCharacteristics(IntStream.range(0, size).spliterator(), function, extraCharacteristics, comparator);
  }
  
  static <InElementT, OutElementT> Spliterator<OutElementT> map(Spliterator<InElementT> fromSpliterator, Function<? super InElementT, ? extends OutElementT> function) {
    Preconditions.checkNotNull(fromSpliterator);
    Preconditions.checkNotNull(function);
    return new Object(fromSpliterator, function);
  }
  
  static <T> Spliterator<T> filter(Spliterator<T> fromSpliterator, Predicate<? super T> predicate) {
    Preconditions.checkNotNull(fromSpliterator);
    Preconditions.checkNotNull(predicate);
    return new Splitr(fromSpliterator, predicate);
  }
  
  static <InElementT, OutElementT> Spliterator<OutElementT> flatMap(Spliterator<InElementT> fromSpliterator, Function<? super InElementT, Spliterator<OutElementT>> function, int topCharacteristics, long topSize) {
    Preconditions.checkArgument(((topCharacteristics & 0x4000) == 0), "flatMap does not support SUBSIZED characteristic");
    Preconditions.checkArgument(((topCharacteristics & 0x4) == 0), "flatMap does not support SORTED characteristic");
    Preconditions.checkNotNull(fromSpliterator);
    Preconditions.checkNotNull(function);
    return new FlatMapSpliteratorOfObject(null, fromSpliterator, function, topCharacteristics, topSize);
  }
  
  static <InElementT> Spliterator.OfInt flatMapToInt(Spliterator<InElementT> fromSpliterator, Function<? super InElementT, Spliterator.OfInt> function, int topCharacteristics, long topSize) {
    Preconditions.checkArgument(((topCharacteristics & 0x4000) == 0), "flatMap does not support SUBSIZED characteristic");
    Preconditions.checkArgument(((topCharacteristics & 0x4) == 0), "flatMap does not support SORTED characteristic");
    Preconditions.checkNotNull(fromSpliterator);
    Preconditions.checkNotNull(function);
    return new FlatMapSpliteratorOfInt(null, fromSpliterator, function, topCharacteristics, topSize);
  }
  
  static <InElementT> Spliterator.OfLong flatMapToLong(Spliterator<InElementT> fromSpliterator, Function<? super InElementT, Spliterator.OfLong> function, int topCharacteristics, long topSize) {
    Preconditions.checkArgument(((topCharacteristics & 0x4000) == 0), "flatMap does not support SUBSIZED characteristic");
    Preconditions.checkArgument(((topCharacteristics & 0x4) == 0), "flatMap does not support SORTED characteristic");
    Preconditions.checkNotNull(fromSpliterator);
    Preconditions.checkNotNull(function);
    return new FlatMapSpliteratorOfLong(null, fromSpliterator, function, topCharacteristics, topSize);
  }
  
  static <InElementT> Spliterator.OfDouble flatMapToDouble(Spliterator<InElementT> fromSpliterator, Function<? super InElementT, Spliterator.OfDouble> function, int topCharacteristics, long topSize) {
    Preconditions.checkArgument(((topCharacteristics & 0x4000) == 0), "flatMap does not support SUBSIZED characteristic");
    Preconditions.checkArgument(((topCharacteristics & 0x4) == 0), "flatMap does not support SORTED characteristic");
    Preconditions.checkNotNull(fromSpliterator);
    Preconditions.checkNotNull(function);
    return new FlatMapSpliteratorOfDouble(null, fromSpliterator, function, topCharacteristics, topSize);
  }
}
