package com.google.common.cache;

import com.google.common.annotations.GwtIncompatible;
import com.google.common.collect.ImmutableMap;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import java.util.concurrent.ExecutionException;

@ElementTypesAreNonnullByDefault
@GwtIncompatible
public abstract class ForwardingLoadingCache<K, V> extends ForwardingCache<K, V> implements LoadingCache<K, V> {
  @CanIgnoreReturnValue
  public V get(K key) throws ExecutionException { return (V)delegate().get(key); }
  
  @CanIgnoreReturnValue
  public V getUnchecked(K key) throws ExecutionException { return (V)delegate().getUnchecked(key); }
  
  @CanIgnoreReturnValue
  public ImmutableMap<K, V> getAll(Iterable<? extends K> keys) throws ExecutionException { return delegate().getAll(keys); }
  
  public V apply(K key) throws ExecutionException { return (V)delegate().apply(key); }
  
  public void refresh(K key) { delegate().refresh(key); }
  
  protected abstract LoadingCache<K, V> delegate();
}
