package com.google.common.io;

import com.google.common.annotations.GwtIncompatible;
import com.google.common.annotations.J2ktIncompatible;
import com.google.common.annotations.VisibleForTesting;
import com.google.common.base.Preconditions;
import com.google.common.base.Throwables;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import java.io.Closeable;
import java.io.IOException;
import java.util.ArrayDeque;
import java.util.Deque;
import javax.annotation.CheckForNull;

@ElementTypesAreNonnullByDefault
@J2ktIncompatible
@GwtIncompatible
public final class Closer implements Closeable {
  private static final Suppressor SUPPRESSOR;
  
  @VisibleForTesting
  final Suppressor suppressor;
  
  private final Deque<Closeable> stack;
  
  @CheckForNull
  private Throwable thrown;
  
  static  {
    suppressingSuppressor = SuppressingSuppressor.tryCreate();
    SUPPRESSOR = (suppressingSuppressor == null) ? LoggingSuppressor.INSTANCE : suppressingSuppressor;
  }
  
  public static Closer create() { return new Closer(SUPPRESSOR); }
  
  @VisibleForTesting
  Closer(Suppressor suppressor) {
    this.stack = new ArrayDeque(4);
    this.suppressor = (Suppressor)Preconditions.checkNotNull(suppressor);
  }
  
  @ParametricNullness
  @CanIgnoreReturnValue
  public <C extends Closeable> C register(@ParametricNullness C closeable) {
    if (closeable != null)
      this.stack.addFirst(closeable); 
    return closeable;
  }
  
  public RuntimeException rethrow(Throwable e) throws IOException {
    Preconditions.checkNotNull(e);
    this.thrown = e;
    Throwables.propagateIfPossible(e, IOException.class);
    throw new RuntimeException(e);
  }
  
  public <X extends Exception> RuntimeException rethrow(Throwable e, Class<X> declaredType) throws IOException, X {
    Preconditions.checkNotNull(e);
    this.thrown = e;
    Throwables.propagateIfPossible(e, IOException.class);
    Throwables.propagateIfPossible(e, declaredType);
    throw new RuntimeException(e);
  }
  
  public <X1 extends Exception, X2 extends Exception> RuntimeException rethrow(Throwable e, Class<X1> declaredType1, Class<X2> declaredType2) throws IOException, X1, X2 {
    Preconditions.checkNotNull(e);
    this.thrown = e;
    Throwables.propagateIfPossible(e, IOException.class);
    Throwables.propagateIfPossible(e, declaredType1, declaredType2);
    throw new RuntimeException(e);
  }
  
  public void close() throws IOException {
    Throwable throwable = this.thrown;
    while (!this.stack.isEmpty()) {
      Closeable closeable = (Closeable)this.stack.removeFirst();
      try {
        closeable.close();
      } catch (Throwable e) {
        if (throwable == null) {
          throwable = e;
          continue;
        } 
        this.suppressor.suppress(closeable, throwable, e);
      } 
    } 
    if (this.thrown == null && throwable != null) {
      Throwables.propagateIfPossible(throwable, IOException.class);
      throw new AssertionError(throwable);
    } 
  }
}
