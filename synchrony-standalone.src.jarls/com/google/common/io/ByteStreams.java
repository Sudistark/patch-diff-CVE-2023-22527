package com.google.common.io;

import com.google.common.annotations.GwtIncompatible;
import com.google.common.annotations.J2ktIncompatible;
import com.google.common.base.Preconditions;
import com.google.common.math.IntMath;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;
import java.nio.channels.ReadableByteChannel;
import java.nio.channels.WritableByteChannel;
import java.util.ArrayDeque;
import java.util.Arrays;
import java.util.Queue;

@ElementTypesAreNonnullByDefault
@J2ktIncompatible
@GwtIncompatible
public final class ByteStreams {
  private static final int BUFFER_SIZE = 8192;
  
  private static final int ZERO_COPY_CHUNK_SIZE = 524288;
  
  private static final int MAX_ARRAY_LEN = 2147483639;
  
  private static final int TO_BYTE_ARRAY_DEQUE_SIZE = 20;
  
  static byte[] createBuffer() { return new byte[8192]; }
  
  @CanIgnoreReturnValue
  public static long copy(InputStream from, OutputStream to) throws IOException {
    Preconditions.checkNotNull(from);
    Preconditions.checkNotNull(to);
    byte[] buf = createBuffer();
    long total = 0L;
    while (true) {
      int r = from.read(buf);
      if (r == -1)
        break; 
      to.write(buf, 0, r);
      total += r;
    } 
    return total;
  }
  
  @CanIgnoreReturnValue
  public static long copy(ReadableByteChannel from, WritableByteChannel to) throws IOException {
    Preconditions.checkNotNull(from);
    Preconditions.checkNotNull(to);
    if (from instanceof FileChannel) {
      long copied;
      FileChannel sourceChannel = (FileChannel)from;
      long oldPosition = sourceChannel.position();
      long position = oldPosition;
      do {
        copied = sourceChannel.transferTo(position, 524288L, to);
        position += copied;
        sourceChannel.position(position);
      } while (copied > 0L || position < sourceChannel.size());
      return position - oldPosition;
    } 
    ByteBuffer buf = ByteBuffer.wrap(createBuffer());
    long total = 0L;
    while (from.read(buf) != -1) {
      Java8Compatibility.flip(buf);
      while (buf.hasRemaining())
        total += to.write(buf); 
      Java8Compatibility.clear(buf);
    } 
    return total;
  }
  
  private static byte[] toByteArrayInternal(InputStream in, Queue<byte[]> bufs, int totalLen) throws IOException {
    int initialBufferSize = Math.min(8192, Math.max(128, Integer.highestOneBit(totalLen) * 2));
    int bufSize = initialBufferSize;
    for (; totalLen < 2147483639; 
      bufSize = IntMath.saturatedMultiply(bufSize, (bufSize < 4096) ? 4 : 2)) {
      byte[] buf = new byte[Math.min(bufSize, 2147483639 - totalLen)];
      bufs.add(buf);
      int off = 0;
      while (off < buf.length) {
        int r = in.read(buf, off, buf.length - off);
        if (r == -1)
          return combineBuffers(bufs, totalLen); 
        off += r;
        totalLen += r;
      } 
    } 
    if (in.read() == -1)
      return combineBuffers(bufs, 2147483639); 
    throw new OutOfMemoryError("input is too large to fit in a byte array");
  }
  
  private static byte[] combineBuffers(Queue<byte[]> bufs, int totalLen) {
    if (bufs.isEmpty())
      return new byte[0]; 
    byte[] result = (byte[])bufs.remove();
    if (result.length == totalLen)
      return result; 
    int remaining = totalLen - result.length;
    result = Arrays.copyOf(result, totalLen);
    while (remaining > 0) {
      byte[] buf = (byte[])bufs.remove();
      int bytesToCopy = Math.min(remaining, buf.length);
      int resultOffset = totalLen - remaining;
      System.arraycopy(buf, 0, result, resultOffset, bytesToCopy);
      remaining -= bytesToCopy;
    } 
    return result;
  }
  
  public static byte[] toByteArray(InputStream in) throws IOException {
    Preconditions.checkNotNull(in);
    return toByteArrayInternal(in, new ArrayDeque(20), 0);
  }
  
  static byte[] toByteArray(InputStream in, long expectedSize) throws IOException {
    Preconditions.checkArgument((expectedSize >= 0L), "expectedSize (%s) must be non-negative", expectedSize);
    if (expectedSize > 2147483639L)
      throw new OutOfMemoryError(expectedSize + " bytes is too large to fit in a byte array"); 
    byte[] bytes = new byte[(int)expectedSize];
    int remaining = (int)expectedSize;
    while (remaining > 0) {
      int off = (int)expectedSize - remaining;
      int read = in.read(bytes, off, remaining);
      if (read == -1)
        return Arrays.copyOf(bytes, off); 
      remaining -= read;
    } 
    int b = in.read();
    if (b == -1)
      return bytes; 
    Queue<byte[]> bufs = new ArrayDeque<byte[]>(22);
    bufs.add(bytes);
    bufs.add(new byte[] { (byte)b });
    return toByteArrayInternal(in, bufs, bytes.length + 1);
  }
  
  @CanIgnoreReturnValue
  public static long exhaust(InputStream in) throws IOException {
    long total = 0L;
    byte[] buf = createBuffer();
    long read;
    while ((read = in.read(buf)) != -1L)
      total += read; 
    return total;
  }
  
  public static ByteArrayDataInput newDataInput(byte[] bytes) { return newDataInput(new ByteArrayInputStream(bytes)); }
  
  public static ByteArrayDataInput newDataInput(byte[] bytes, int start) {
    Preconditions.checkPositionIndex(start, bytes.length);
    return newDataInput(new ByteArrayInputStream(bytes, start, bytes.length - start));
  }
  
  public static ByteArrayDataInput newDataInput(ByteArrayInputStream byteArrayInputStream) { return new ByteArrayDataInputStream((ByteArrayInputStream)Preconditions.checkNotNull(byteArrayInputStream)); }
  
  public static ByteArrayDataOutput newDataOutput() { return newDataOutput(new ByteArrayOutputStream()); }
  
  public static ByteArrayDataOutput newDataOutput(int size) {
    if (size < 0)
      throw new IllegalArgumentException(String.format("Invalid size: %s", new Object[] { Integer.valueOf(size) })); 
    return newDataOutput(new ByteArrayOutputStream(size));
  }
  
  public static ByteArrayDataOutput newDataOutput(ByteArrayOutputStream byteArrayOutputStream) { return new ByteArrayDataOutputStream((ByteArrayOutputStream)Preconditions.checkNotNull(byteArrayOutputStream)); }
  
  private static final OutputStream NULL_OUTPUT_STREAM = new Object();
  
  public static OutputStream nullOutputStream() { return NULL_OUTPUT_STREAM; }
  
  public static InputStream limit(InputStream in, long limit) { return new LimitedInputStream(in, limit); }
  
  public static void readFully(InputStream in, byte[] b) throws IOException { readFully(in, b, 0, b.length); }
  
  public static void readFully(InputStream in, byte[] b, int off, int len) throws IOException {
    int read = read(in, b, off, len);
    if (read != len)
      throw new EOFException("reached end of stream after reading " + read + " bytes; " + len + " bytes expected"); 
  }
  
  public static void skipFully(InputStream in, long n) throws IOException {
    long skipped = skipUpTo(in, n);
    if (skipped < n)
      throw new EOFException("reached end of stream after skipping " + skipped + " bytes; " + n + " bytes expected"); 
  }
  
  static long skipUpTo(InputStream in, long n) throws IOException {
    long totalSkipped = 0L;
    byte[] buf = null;
    while (totalSkipped < n) {
      long remaining = n - totalSkipped;
      long skipped = skipSafely(in, remaining);
      if (skipped == 0L) {
        int skip = (int)Math.min(remaining, 8192L);
        if (buf == null)
          buf = new byte[skip]; 
        if ((skipped = in.read(buf, 0, skip)) == -1L)
          break; 
      } 
      totalSkipped += skipped;
    } 
    return totalSkipped;
  }
  
  private static long skipSafely(InputStream in, long n) throws IOException {
    int available = in.available();
    return (available == 0) ? 0L : in.skip(Math.min(available, n));
  }
  
  @ParametricNullness
  @CanIgnoreReturnValue
  public static <T> T readBytes(InputStream input, ByteProcessor<T> processor) throws IOException {
    int read;
    Preconditions.checkNotNull(input);
    Preconditions.checkNotNull(processor);
    byte[] buf = createBuffer();
    do {
      read = input.read(buf);
    } while (read != -1 && processor.processBytes(buf, 0, read));
    return (T)processor.getResult();
  }
  
  @CanIgnoreReturnValue
  public static int read(InputStream in, byte[] b, int off, int len) throws IOException {
    Preconditions.checkNotNull(in);
    Preconditions.checkNotNull(b);
    if (len < 0)
      throw new IndexOutOfBoundsException(String.format("len (%s) cannot be negative", new Object[] { Integer.valueOf(len) })); 
    Preconditions.checkPositionIndexes(off, off + len, b.length);
    int total = 0;
    while (total < len) {
      int result = in.read(b, off + total, len - total);
      if (result == -1)
        break; 
      total += result;
    } 
    return total;
  }
}
