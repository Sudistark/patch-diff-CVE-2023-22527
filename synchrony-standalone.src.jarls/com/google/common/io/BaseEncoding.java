package com.google.common.io;

import com.google.common.annotations.GwtCompatible;
import com.google.common.annotations.GwtIncompatible;
import com.google.common.annotations.J2ktIncompatible;
import com.google.common.base.Preconditions;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Reader;
import java.io.Writer;

@ElementTypesAreNonnullByDefault
@GwtCompatible(emulated = true)
public abstract class BaseEncoding {
  public String encode(byte[] bytes) { return encode(bytes, 0, bytes.length); }
  
  public final String encode(byte[] bytes, int off, int len) {
    Preconditions.checkPositionIndexes(off, off + len, bytes.length);
    StringBuilder result = new StringBuilder(maxEncodedSize(len));
    try {
      encodeTo(result, bytes, off, len);
    } catch (IOException impossible) {
      throw new AssertionError(impossible);
    } 
    return result.toString();
  }
  
  @J2ktIncompatible
  @GwtIncompatible
  public abstract OutputStream encodingStream(Writer paramWriter);
  
  @J2ktIncompatible
  @GwtIncompatible
  public final ByteSink encodingSink(CharSink encodedSink) {
    Preconditions.checkNotNull(encodedSink);
    return new Object(this, encodedSink);
  }
  
  private static byte[] extract(byte[] result, int length) {
    if (length == result.length)
      return result; 
    byte[] trunc = new byte[length];
    System.arraycopy(result, 0, trunc, 0, length);
    return trunc;
  }
  
  public abstract boolean canDecode(CharSequence paramCharSequence);
  
  public final byte[] decode(CharSequence chars) {
    try {
      return decodeChecked(chars);
    } catch (DecodingException badInput) {
      throw new IllegalArgumentException(badInput);
    } 
  }
  
  final byte[] decodeChecked(CharSequence chars) {
    chars = trimTrailingPadding(chars);
    byte[] tmp = new byte[maxDecodedSize(chars.length())];
    int len = decodeTo(tmp, chars);
    return extract(tmp, len);
  }
  
  @J2ktIncompatible
  @GwtIncompatible
  public abstract InputStream decodingStream(Reader paramReader);
  
  @J2ktIncompatible
  @GwtIncompatible
  public final ByteSource decodingSource(CharSource encodedSource) {
    Preconditions.checkNotNull(encodedSource);
    return new Object(this, encodedSource);
  }
  
  abstract int maxEncodedSize(int paramInt);
  
  abstract void encodeTo(Appendable paramAppendable, byte[] paramArrayOfByte, int paramInt1, int paramInt2) throws IOException;
  
  abstract int maxDecodedSize(int paramInt);
  
  abstract int decodeTo(byte[] paramArrayOfByte, CharSequence paramCharSequence) throws DecodingException;
  
  CharSequence trimTrailingPadding(CharSequence chars) { return (CharSequence)Preconditions.checkNotNull(chars); }
  
  private static final BaseEncoding BASE64 = new Base64Encoding("base64()", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", 
      
      Character.valueOf('='));
  
  public abstract BaseEncoding omitPadding();
  
  public abstract BaseEncoding withPadChar(char paramChar);
  
  public abstract BaseEncoding withSeparator(String paramString, int paramInt);
  
  public abstract BaseEncoding upperCase();
  
  public abstract BaseEncoding lowerCase();
  
  public abstract BaseEncoding ignoreCase();
  
  public static BaseEncoding base64() { return BASE64; }
  
  private static final BaseEncoding BASE64_URL = new Base64Encoding("base64Url()", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_", 
      
      Character.valueOf('='));
  
  public static BaseEncoding base64Url() { return BASE64_URL; }
  
  private static final BaseEncoding BASE32 = new StandardBaseEncoding("base32()", "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567", 
      Character.valueOf('='));
  
  public static BaseEncoding base32() { return BASE32; }
  
  private static final BaseEncoding BASE32_HEX = new StandardBaseEncoding("base32Hex()", "0123456789ABCDEFGHIJKLMNOPQRSTUV", 
      Character.valueOf('='));
  
  public static BaseEncoding base32Hex() { return BASE32_HEX; }
  
  private static final BaseEncoding BASE16 = new Base16Encoding("base16()", "0123456789ABCDEF");
  
  public static BaseEncoding base16() { return BASE16; }
  
  @J2ktIncompatible
  @GwtIncompatible
  static Reader ignoringReader(Reader delegate, String toIgnore) {
    Preconditions.checkNotNull(delegate);
    Preconditions.checkNotNull(toIgnore);
    return new Object(delegate, toIgnore);
  }
  
  static Appendable separatingAppendable(Appendable delegate, String separator, int afterEveryChars) {
    Preconditions.checkNotNull(delegate);
    Preconditions.checkNotNull(separator);
    Preconditions.checkArgument((afterEveryChars > 0));
    return new Object(afterEveryChars, delegate, separator);
  }
  
  @J2ktIncompatible
  @GwtIncompatible
  static Writer separatingWriter(Writer delegate, String separator, int afterEveryChars) {
    Appendable separatingAppendable = separatingAppendable(delegate, separator, afterEveryChars);
    return new Object(separatingAppendable, delegate);
  }
}
