package com.google.common.primitives;

import com.google.common.annotations.GwtCompatible;
import com.google.common.base.Converter;
import com.google.common.base.Preconditions;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import javax.annotation.CheckForNull;

@ElementTypesAreNonnullByDefault
@GwtCompatible
public final class Longs {
  public static final int BYTES = 8;
  
  public static final long MAX_POWER_OF_TWO = 4611686018427387904L;
  
  public static int hashCode(long value) { return (int)(value ^ value >>> 32); }
  
  public static int compare(long a, long b) { return (a < b) ? -1 : ((a > b) ? 1 : 0); }
  
  public static boolean contains(long[] array, long target) {
    for (long value : array) {
      if (value == target)
        return true; 
    } 
    return false;
  }
  
  public static int indexOf(long[] array, long target) { return indexOf(array, target, 0, array.length); }
  
  private static int indexOf(long[] array, long target, int start, int end) {
    for (int i = start; i < end; i++) {
      if (array[i] == target)
        return i; 
    } 
    return -1;
  }
  
  public static int indexOf(long[] array, long[] target) {
    Preconditions.checkNotNull(array, "array");
    Preconditions.checkNotNull(target, "target");
    if (target.length == 0)
      return 0; 
    for (int i = 0; i < array.length - target.length + 1; i++) {
      int j = 0;
      while (true) {
        if (j < target.length) {
          if (array[i + j] != target[j])
            break; 
          j++;
          continue;
        } 
        return i;
      } 
    } 
    return -1;
  }
  
  public static int lastIndexOf(long[] array, long target) { return lastIndexOf(array, target, 0, array.length); }
  
  private static int lastIndexOf(long[] array, long target, int start, int end) {
    for (int i = end - 1; i >= start; i--) {
      if (array[i] == target)
        return i; 
    } 
    return -1;
  }
  
  public static long min(long... array) {
    Preconditions.checkArgument((array.length > 0));
    long min = array[0];
    for (int i = 1; i < array.length; i++) {
      if (array[i] < min)
        min = array[i]; 
    } 
    return min;
  }
  
  public static long max(long... array) {
    Preconditions.checkArgument((array.length > 0));
    long max = array[0];
    for (int i = 1; i < array.length; i++) {
      if (array[i] > max)
        max = array[i]; 
    } 
    return max;
  }
  
  public static long constrainToRange(long value, long min, long max) {
    Preconditions.checkArgument((min <= max), "min (%s) must be less than or equal to max (%s)", min, max);
    return Math.min(Math.max(value, min), max);
  }
  
  public static long[] concat(long[]... arrays) {
    long length = 0L;
    for (long[] array : arrays)
      length += array.length; 
    long[] result = new long[checkNoOverflow(length)];
    int pos = 0;
    for (long[] array : arrays) {
      System.arraycopy(array, 0, result, pos, array.length);
      pos += array.length;
    } 
    return result;
  }
  
  private static int checkNoOverflow(long result) {
    Preconditions.checkArgument((result == (int)result), "the total number of elements (%s) in the arrays must fit in an int", result);
    return (int)result;
  }
  
  public static byte[] toByteArray(long value) {
    byte[] result = new byte[8];
    for (int i = 7; i >= 0; i--) {
      result[i] = (byte)(int)(value & 0xFFL);
      value >>= 8;
    } 
    return result;
  }
  
  public static long fromByteArray(byte[] bytes) {
    Preconditions.checkArgument((bytes.length >= 8), "array too small: %s < %s", bytes.length, 8);
    return fromBytes(bytes[0], bytes[1], bytes[2], bytes[3], bytes[4], bytes[5], bytes[6], bytes[7]);
  }
  
  public static long fromBytes(byte b1, byte b2, byte b3, byte b4, byte b5, byte b6, byte b7, byte b8) { return (b1 & 0xFFL) << 56 | (b2 & 0xFFL) << 48 | (b3 & 0xFFL) << 40 | (b4 & 0xFFL) << 32 | (b5 & 0xFFL) << 24 | (b6 & 0xFFL) << 16 | (b7 & 0xFFL) << 8 | b8 & 0xFFL; }
  
  @CheckForNull
  public static Long tryParse(String string) { return tryParse(string, 10); }
  
  @CheckForNull
  public static Long tryParse(String string, int radix) {
    if (((String)Preconditions.checkNotNull(string)).isEmpty())
      return null; 
    if (radix < 2 || radix > 36)
      throw new IllegalArgumentException("radix must be between MIN_RADIX and MAX_RADIX but was " + radix); 
    boolean negative = (string.charAt(0) == '-');
    int index = negative ? 1 : 0;
    if (index == string.length())
      return null; 
    int digit = AsciiDigits.digit(string.charAt(index++));
    if (digit < 0 || digit >= radix)
      return null; 
    long accum = -digit;
    long cap = Float.MIN_VALUE / radix;
    while (index < string.length()) {
      digit = AsciiDigits.digit(string.charAt(index++));
      if (digit < 0 || digit >= radix || accum < cap)
        return null; 
      accum *= radix;
      if (accum < Float.MIN_VALUE + digit)
        return null; 
      accum -= digit;
    } 
    if (negative)
      return Long.valueOf(accum); 
    if (accum == Float.MIN_VALUE)
      return null; 
    return Long.valueOf(-accum);
  }
  
  public static Converter<String, Long> stringConverter() { return LongConverter.INSTANCE; }
  
  public static long[] ensureCapacity(long[] array, int minLength, int padding) {
    Preconditions.checkArgument((minLength >= 0), "Invalid minLength: %s", minLength);
    Preconditions.checkArgument((padding >= 0), "Invalid padding: %s", padding);
    return (array.length < minLength) ? Arrays.copyOf(array, minLength + padding) : array;
  }
  
  public static String join(String separator, long... array) {
    Preconditions.checkNotNull(separator);
    if (array.length == 0)
      return ""; 
    StringBuilder builder = new StringBuilder(array.length * 10);
    builder.append(array[0]);
    for (int i = 1; i < array.length; i++)
      builder.append(separator).append(array[i]); 
    return builder.toString();
  }
  
  public static Comparator<long[]> lexicographicalComparator() { return LexicographicalComparator.INSTANCE; }
  
  public static void sortDescending(long[] array) {
    Preconditions.checkNotNull(array);
    sortDescending(array, 0, array.length);
  }
  
  public static void sortDescending(long[] array, int fromIndex, int toIndex) {
    Preconditions.checkNotNull(array);
    Preconditions.checkPositionIndexes(fromIndex, toIndex, array.length);
    Arrays.sort(array, fromIndex, toIndex);
    reverse(array, fromIndex, toIndex);
  }
  
  public static void reverse(long[] array) {
    Preconditions.checkNotNull(array);
    reverse(array, 0, array.length);
  }
  
  public static void reverse(long[] array, int fromIndex, int toIndex) {
    Preconditions.checkNotNull(array);
    Preconditions.checkPositionIndexes(fromIndex, toIndex, array.length);
    for (int i = fromIndex, j = toIndex - 1; i < j; i++, j--) {
      long tmp = array[i];
      array[i] = array[j];
      array[j] = tmp;
    } 
  }
  
  public static void rotate(long[] array, int distance) { rotate(array, distance, 0, array.length); }
  
  public static void rotate(long[] array, int distance, int fromIndex, int toIndex) {
    Preconditions.checkNotNull(array);
    Preconditions.checkPositionIndexes(fromIndex, toIndex, array.length);
    if (array.length <= 1)
      return; 
    int length = toIndex - fromIndex;
    int m = -distance % length;
    m = (m < 0) ? (m + length) : m;
    int newFirstIndex = m + fromIndex;
    if (newFirstIndex == fromIndex)
      return; 
    reverse(array, fromIndex, newFirstIndex);
    reverse(array, newFirstIndex, toIndex);
    reverse(array, fromIndex, toIndex);
  }
  
  public static long[] toArray(Collection<? extends Number> collection) {
    if (collection instanceof LongArrayAsList)
      return ((LongArrayAsList)collection).toLongArray(); 
    Object[] boxedArray = collection.toArray();
    int len = boxedArray.length;
    long[] array = new long[len];
    for (int i = 0; i < len; i++)
      array[i] = ((Number)Preconditions.checkNotNull(boxedArray[i])).longValue(); 
    return array;
  }
  
  public static List<Long> asList(long... backingArray) {
    if (backingArray.length == 0)
      return Collections.emptyList(); 
    return new LongArrayAsList(backingArray);
  }
}
