package com.google.common.graph;

import com.google.common.base.Preconditions;
import java.util.Collections;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import javax.annotation.CheckForNull;

@ElementTypesAreNonnullByDefault
abstract class AbstractUndirectedNetworkConnections<N, E> extends Object implements NetworkConnections<N, E> {
  final Map<E, N> incidentEdgeMap;
  
  AbstractUndirectedNetworkConnections(Map<E, N> incidentEdgeMap) { this.incidentEdgeMap = (Map)Preconditions.checkNotNull(incidentEdgeMap); }
  
  public Set<N> predecessors() { return adjacentNodes(); }
  
  public Set<N> successors() { return adjacentNodes(); }
  
  public Set<E> incidentEdges() { return Collections.unmodifiableSet(this.incidentEdgeMap.keySet()); }
  
  public Set<E> inEdges() { return incidentEdges(); }
  
  public Set<E> outEdges() { return incidentEdges(); }
  
  public N adjacentNode(E edge) { return (N)Objects.requireNonNull(this.incidentEdgeMap.get(edge)); }
  
  @CheckForNull
  public N removeInEdge(E edge, boolean isSelfLoop) {
    if (!isSelfLoop)
      return (N)removeOutEdge(edge); 
    return null;
  }
  
  public N removeOutEdge(E edge) {
    N previousNode = (N)this.incidentEdgeMap.remove(edge);
    return (N)Objects.requireNonNull(previousNode);
  }
  
  public void addInEdge(E edge, N node, boolean isSelfLoop) {
    if (!isSelfLoop)
      addOutEdge(edge, node); 
  }
  
  public void addOutEdge(E edge, N node) {
    N previousNode = (N)this.incidentEdgeMap.put(edge, node);
    Preconditions.checkState((previousNode == null));
  }
}
