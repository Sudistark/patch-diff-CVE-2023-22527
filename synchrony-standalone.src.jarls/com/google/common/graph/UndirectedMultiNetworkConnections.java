package com.google.common.graph;

import com.google.common.base.Preconditions;
import com.google.common.collect.HashMultiset;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Multiset;
import com.google.errorprone.annotations.concurrent.LazyInit;
import java.lang.ref.Reference;
import java.lang.ref.SoftReference;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import javax.annotation.CheckForNull;

@ElementTypesAreNonnullByDefault
final class UndirectedMultiNetworkConnections<N, E> extends AbstractUndirectedNetworkConnections<N, E> {
  @CheckForNull
  @LazyInit
  private Reference<Multiset<N>> adjacentNodesReference;
  
  private UndirectedMultiNetworkConnections(Map<E, N> incidentEdges) { super(incidentEdges); }
  
  static <N, E> UndirectedMultiNetworkConnections<N, E> of() { return new UndirectedMultiNetworkConnections(new HashMap(2, 1.0F)); }
  
  static <N, E> UndirectedMultiNetworkConnections<N, E> ofImmutable(Map<E, N> incidentEdges) { return new UndirectedMultiNetworkConnections(ImmutableMap.copyOf(incidentEdges)); }
  
  public Set<N> adjacentNodes() { return Collections.unmodifiableSet(adjacentNodesMultiset().elementSet()); }
  
  private Multiset<N> adjacentNodesMultiset() {
    HashMultiset hashMultiset = (Multiset)getReference(this.adjacentNodesReference);
    if (hashMultiset == null) {
      hashMultiset = HashMultiset.create(this.incidentEdgeMap.values());
      this.adjacentNodesReference = new SoftReference(hashMultiset);
    } 
    return hashMultiset;
  }
  
  public Set<E> edgesConnecting(N node) { return new Object(this, this.incidentEdgeMap, node, node); }
  
  @CheckForNull
  public N removeInEdge(E edge, boolean isSelfLoop) {
    if (!isSelfLoop)
      return (N)removeOutEdge(edge); 
    return null;
  }
  
  public N removeOutEdge(E edge) {
    N node = (N)super.removeOutEdge(edge);
    Multiset<N> adjacentNodes = (Multiset)getReference(this.adjacentNodesReference);
    if (adjacentNodes != null)
      Preconditions.checkState(adjacentNodes.remove(node)); 
    return node;
  }
  
  public void addInEdge(E edge, N node, boolean isSelfLoop) {
    if (!isSelfLoop)
      addOutEdge(edge, node); 
  }
  
  public void addOutEdge(E edge, N node) {
    super.addOutEdge(edge, node);
    Multiset<N> adjacentNodes = (Multiset)getReference(this.adjacentNodesReference);
    if (adjacentNodes != null)
      Preconditions.checkState(adjacentNodes.add(node)); 
  }
  
  @CheckForNull
  private static <T> T getReference(@CheckForNull Reference<T> reference) { return (T)((reference == null) ? null : reference.get()); }
}
