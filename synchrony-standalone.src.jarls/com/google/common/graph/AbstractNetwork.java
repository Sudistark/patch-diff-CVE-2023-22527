package com.google.common.graph;

import com.google.common.annotations.Beta;
import com.google.common.base.Preconditions;
import com.google.common.base.Predicate;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Maps;
import com.google.common.collect.Sets;
import com.google.common.math.IntMath;
import java.util.Collections;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import javax.annotation.CheckForNull;

@ElementTypesAreNonnullByDefault
@Beta
public abstract class AbstractNetwork<N, E> extends Object implements Network<N, E> {
  public Graph<N> asGraph() { return new Object(this); }
  
  public int degree(N node) {
    if (isDirected())
      return IntMath.saturatedAdd(inEdges(node).size(), outEdges(node).size()); 
    return IntMath.saturatedAdd(incidentEdges(node).size(), edgesConnecting(node, node).size());
  }
  
  public int inDegree(N node) { return isDirected() ? inEdges(node).size() : degree(node); }
  
  public int outDegree(N node) { return isDirected() ? outEdges(node).size() : degree(node); }
  
  public Set<E> adjacentEdges(E edge) {
    EndpointPair<N> endpointPair = incidentNodes(edge);
    Sets.SetView setView = Sets.union(incidentEdges(endpointPair.nodeU()), incidentEdges(endpointPair.nodeV()));
    return Sets.difference(setView, ImmutableSet.of(edge));
  }
  
  public Set<E> edgesConnecting(N nodeU, N nodeV) {
    Set<E> outEdgesU = outEdges(nodeU);
    Set<E> inEdgesV = inEdges(nodeV);
    return (outEdgesU.size() <= inEdgesV.size()) ? 
      Collections.unmodifiableSet(Sets.filter(outEdgesU, connectedPredicate(nodeU, nodeV))) : 
      Collections.unmodifiableSet(Sets.filter(inEdgesV, connectedPredicate(nodeV, nodeU)));
  }
  
  public Set<E> edgesConnecting(EndpointPair<N> endpoints) {
    validateEndpoints(endpoints);
    return edgesConnecting(endpoints.nodeU(), endpoints.nodeV());
  }
  
  private Predicate<E> connectedPredicate(N nodePresent, N nodeToCheck) { return new Object(this, nodePresent, nodeToCheck); }
  
  public Optional<E> edgeConnecting(N nodeU, N nodeV) { return Optional.ofNullable(edgeConnectingOrNull(nodeU, nodeV)); }
  
  public Optional<E> edgeConnecting(EndpointPair<N> endpoints) {
    validateEndpoints(endpoints);
    return edgeConnecting(endpoints.nodeU(), endpoints.nodeV());
  }
  
  @CheckForNull
  public E edgeConnectingOrNull(N nodeU, N nodeV) {
    Set<E> edgesConnecting = edgesConnecting(nodeU, nodeV);
    switch (edgesConnecting.size()) {
      case 0:
        return null;
      case 1:
        return (E)edgesConnecting.iterator().next();
    } 
    throw new IllegalArgumentException(String.format("Cannot call edgeConnecting() when parallel edges exist between %s and %s. Consider calling edgesConnecting() instead.", new Object[] { nodeU, nodeV }));
  }
  
  @CheckForNull
  public E edgeConnectingOrNull(EndpointPair<N> endpoints) {
    validateEndpoints(endpoints);
    return (E)edgeConnectingOrNull(endpoints.nodeU(), endpoints.nodeV());
  }
  
  public boolean hasEdgeConnecting(N nodeU, N nodeV) {
    Preconditions.checkNotNull(nodeU);
    Preconditions.checkNotNull(nodeV);
    return (nodes().contains(nodeU) && successors(nodeU).contains(nodeV));
  }
  
  public boolean hasEdgeConnecting(EndpointPair<N> endpoints) {
    Preconditions.checkNotNull(endpoints);
    if (!isOrderingCompatible(endpoints))
      return false; 
    return hasEdgeConnecting(endpoints.nodeU(), endpoints.nodeV());
  }
  
  protected final void validateEndpoints(EndpointPair<?> endpoints) {
    Preconditions.checkNotNull(endpoints);
    Preconditions.checkArgument(isOrderingCompatible(endpoints), "Mismatch: endpoints' ordering is not compatible with directionality of the graph");
  }
  
  protected final boolean isOrderingCompatible(EndpointPair<?> endpoints) { return (endpoints.isOrdered() == isDirected()); }
  
  public final boolean equals(@CheckForNull Object obj) {
    if (obj == this)
      return true; 
    if (!(obj instanceof Network))
      return false; 
    Network<?, ?> other = (Network)obj;
    return (isDirected() == other.isDirected() && 
      nodes().equals(other.nodes()) && 
      edgeIncidentNodesMap(this).equals(edgeIncidentNodesMap(other)));
  }
  
  public final int hashCode() { return edgeIncidentNodesMap(this).hashCode(); }
  
  public String toString() {
    return "isDirected: " + 
      isDirected() + ", allowsParallelEdges: " + 
      
      allowsParallelEdges() + ", allowsSelfLoops: " + 
      
      allowsSelfLoops() + ", nodes: " + 
      
      nodes() + ", edges: " + 
      
      edgeIncidentNodesMap(this);
  }
  
  private static <N, E> Map<E, EndpointPair<N>> edgeIncidentNodesMap(Network<N, E> network) { Objects.requireNonNull(network);
    return Maps.asMap(network.edges(), network::incidentNodes); }
}
