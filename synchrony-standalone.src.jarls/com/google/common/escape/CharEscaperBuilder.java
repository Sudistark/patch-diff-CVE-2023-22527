package com.google.common.escape;

import com.google.common.annotations.GwtCompatible;
import com.google.common.base.Preconditions;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import java.util.HashMap;
import java.util.Map;

@ElementTypesAreNonnullByDefault
@GwtCompatible
public final class CharEscaperBuilder {
  private int max = -1;
  
  private final Map<Character, String> map = new HashMap();
  
  @CanIgnoreReturnValue
  public CharEscaperBuilder addEscape(char c, String r) {
    this.map.put(Character.valueOf(c), (String)Preconditions.checkNotNull(r));
    if (c > this.max)
      this.max = c; 
    return this;
  }
  
  @CanIgnoreReturnValue
  public CharEscaperBuilder addEscapes(char[] cs, String r) {
    Preconditions.checkNotNull(r);
    for (char c : cs)
      addEscape(c, r); 
    return this;
  }
  
  public char[][] toArray() {
    char[][] result = new char[this.max + 1][];
    for (Map.Entry<Character, String> entry : this.map.entrySet())
      result[((Character)entry.getKey()).charValue()] = ((String)entry.getValue()).toCharArray(); 
    return result;
  }
  
  public Escaper toEscaper() { return new CharArrayDecorator(toArray()); }
}
