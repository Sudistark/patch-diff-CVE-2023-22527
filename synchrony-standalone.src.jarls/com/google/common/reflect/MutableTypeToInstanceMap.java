package com.google.common.reflect;

import com.google.common.collect.ForwardingMap;
import com.google.common.collect.Maps;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import com.google.errorprone.annotations.DoNotCall;
import java.util.Map;
import java.util.Set;
import javax.annotation.CheckForNull;

@ElementTypesAreNonnullByDefault
public final class MutableTypeToInstanceMap<B> extends ForwardingMap<TypeToken<? extends B>, B> implements TypeToInstanceMap<B> {
  private final Map<TypeToken<? extends B>, B> backingMap = Maps.newHashMap();
  
  @CheckForNull
  public <T extends B> T getInstance(Class<T> type) { return (T)trustedGet(TypeToken.of(type)); }
  
  @CheckForNull
  public <T extends B> T getInstance(TypeToken<T> type) { return (T)trustedGet(type.rejectTypeVariables()); }
  
  @CheckForNull
  @CanIgnoreReturnValue
  public <T extends B> T putInstance(Class<T> type, @ParametricNullness T value) { return (T)trustedPut(TypeToken.of(type), value); }
  
  @CheckForNull
  @CanIgnoreReturnValue
  public <T extends B> T putInstance(TypeToken<T> type, @ParametricNullness T value) { return (T)trustedPut(type.rejectTypeVariables(), value); }
  
  @Deprecated
  @CheckForNull
  @CanIgnoreReturnValue
  @DoNotCall("Always throws UnsupportedOperationException")
  public B put(TypeToken<? extends B> key, @ParametricNullness B value) { throw new UnsupportedOperationException("Please use putInstance() instead."); }
  
  @Deprecated
  @DoNotCall("Always throws UnsupportedOperationException")
  public void putAll(Map<? extends TypeToken<? extends B>, ? extends B> map) { throw new UnsupportedOperationException("Please use putInstance() instead."); }
  
  public Set<Map.Entry<TypeToken<? extends B>, B>> entrySet() { return UnmodifiableEntry.transformEntries(super.entrySet()); }
  
  protected Map<TypeToken<? extends B>, B> delegate() { return this.backingMap; }
  
  @CheckForNull
  private <T extends B> T trustedPut(TypeToken<T> type, @ParametricNullness T value) { return (T)this.backingMap.put(type, value); }
  
  @CheckForNull
  private <T extends B> T trustedGet(TypeToken<T> type) { return (T)this.backingMap.get(type); }
}
