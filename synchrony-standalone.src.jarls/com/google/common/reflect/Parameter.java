package com.google.common.reflect;

import com.google.common.base.Preconditions;
import com.google.common.collect.FluentIterable;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.UnmodifiableIterator;
import java.lang.annotation.Annotation;
import java.lang.reflect.AnnotatedElement;
import java.lang.reflect.AnnotatedType;
import java.util.Objects;
import javax.annotation.CheckForNull;

@ElementTypesAreNonnullByDefault
public final class Parameter implements AnnotatedElement {
  private final Invokable<?, ?> declaration;
  
  private final int position;
  
  private final TypeToken<?> type;
  
  private final ImmutableList<Annotation> annotations;
  
  private final Object annotatedType;
  
  Parameter(Invokable<?, ?> declaration, int position, TypeToken<?> type, Annotation[] annotations, Object annotatedType) {
    this.declaration = declaration;
    this.position = position;
    this.type = type;
    this.annotations = ImmutableList.copyOf(annotations);
    this.annotatedType = annotatedType;
  }
  
  public TypeToken<?> getType() { return this.type; }
  
  public Invokable<?, ?> getDeclaringInvokable() { return this.declaration; }
  
  public boolean isAnnotationPresent(Class<? extends Annotation> annotationType) { return (getAnnotation(annotationType) != null); }
  
  @CheckForNull
  public <A extends Annotation> A getAnnotation(Class<A> annotationType) {
    Preconditions.checkNotNull(annotationType);
    for (UnmodifiableIterator unmodifiableIterator = this.annotations.iterator(); unmodifiableIterator.hasNext(); ) {
      Annotation annotation = (Annotation)unmodifiableIterator.next();
      if (annotationType.isInstance(annotation))
        return (A)(Annotation)annotationType.cast(annotation); 
    } 
    return null;
  }
  
  public Annotation[] getAnnotations() { return getDeclaredAnnotations(); }
  
  public <A extends Annotation> A[] getAnnotationsByType(Class<A> annotationType) { return (A[])getDeclaredAnnotationsByType(annotationType); }
  
  public Annotation[] getDeclaredAnnotations() { return (Annotation[])this.annotations.toArray(new Annotation[0]); }
  
  @CheckForNull
  public <A extends Annotation> A getDeclaredAnnotation(Class<A> annotationType) {
    Preconditions.checkNotNull(annotationType);
    return (A)(Annotation)FluentIterable.from(this.annotations).filter(annotationType).first().orNull();
  }
  
  public <A extends Annotation> A[] getDeclaredAnnotationsByType(Class<A> annotationType) {
    A[] result = (A[])(Annotation[])FluentIterable.from(this.annotations).filter(annotationType).toArray(annotationType);
    return result;
  }
  
  @IgnoreJRERequirement
  public AnnotatedType getAnnotatedType() { return (AnnotatedType)Objects.requireNonNull((AnnotatedType)this.annotatedType); }
  
  public boolean equals(@CheckForNull Object obj) {
    if (obj instanceof Parameter) {
      Parameter that = (Parameter)obj;
      return (this.position == that.position && this.declaration.equals(that.declaration));
    } 
    return false;
  }
  
  public int hashCode() { return this.position; }
  
  public String toString() { return this.type + " arg" + this.position; }
}
