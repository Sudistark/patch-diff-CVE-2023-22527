package com.google.common.reflect;

import com.google.common.collect.ForwardingMap;
import com.google.common.collect.ImmutableMap;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import com.google.errorprone.annotations.DoNotCall;
import java.util.Map;
import javax.annotation.CheckForNull;

@ElementTypesAreNonnullByDefault
public final class ImmutableTypeToInstanceMap<B> extends ForwardingMap<TypeToken<? extends B>, B> implements TypeToInstanceMap<B> {
  private final ImmutableMap<TypeToken<? extends B>, B> delegate;
  
  public static <B> ImmutableTypeToInstanceMap<B> of() { return new ImmutableTypeToInstanceMap(ImmutableMap.of()); }
  
  public static <B> Builder<B> builder() { return new Builder(null); }
  
  private ImmutableTypeToInstanceMap(ImmutableMap<TypeToken<? extends B>, B> delegate) { this.delegate = delegate; }
  
  @CheckForNull
  public <T extends B> T getInstance(TypeToken<T> type) { return (T)trustedGet(type.rejectTypeVariables()); }
  
  @CheckForNull
  public <T extends B> T getInstance(Class<T> type) { return (T)trustedGet(TypeToken.of(type)); }
  
  @Deprecated
  @CheckForNull
  @CanIgnoreReturnValue
  @DoNotCall("Always throws UnsupportedOperationException")
  public <T extends B> T putInstance(TypeToken<T> type, T value) { throw new UnsupportedOperationException(); }
  
  @Deprecated
  @CheckForNull
  @CanIgnoreReturnValue
  @DoNotCall("Always throws UnsupportedOperationException")
  public <T extends B> T putInstance(Class<T> type, T value) { throw new UnsupportedOperationException(); }
  
  @Deprecated
  @CheckForNull
  @CanIgnoreReturnValue
  @DoNotCall("Always throws UnsupportedOperationException")
  public B put(TypeToken<? extends B> key, B value) { throw new UnsupportedOperationException(); }
  
  @Deprecated
  @DoNotCall("Always throws UnsupportedOperationException")
  public void putAll(Map<? extends TypeToken<? extends B>, ? extends B> map) { throw new UnsupportedOperationException(); }
  
  protected Map<TypeToken<? extends B>, B> delegate() { return this.delegate; }
  
  @CheckForNull
  private <T extends B> T trustedGet(TypeToken<T> type) { return (T)this.delegate.get(type); }
}
