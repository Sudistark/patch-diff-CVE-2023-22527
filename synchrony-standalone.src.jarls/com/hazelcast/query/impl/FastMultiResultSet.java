package com.hazelcast.query.impl;

import com.hazelcast.nio.serialization.Data;
import java.util.AbstractSet;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class FastMultiResultSet extends AbstractSet<QueryableEntry> implements MultiResultSet {
  private Set<Object> index;
  
  private final List<Map<Data, QueryableEntry>> resultSets = new ArrayList();
  
  public void addResultSet(Map<Data, QueryableEntry> resultSet) { this.resultSets.add(resultSet); }
  
  public boolean contains(Object o) {
    QueryableEntry entry = (QueryableEntry)o;
    if (this.index != null)
      return checkFromIndex(entry); 
    if (this.resultSets.size() > 3) {
      this.index = new HashSet();
      for (Map<Data, QueryableEntry> result : this.resultSets) {
        for (QueryableEntry queryableEntry : result.values())
          this.index.add(queryableEntry.getKeyData()); 
      } 
      return checkFromIndex(entry);
    } 
    for (Map<Data, QueryableEntry> resultSet : this.resultSets) {
      if (resultSet.containsKey(entry.getKeyData()))
        return true; 
    } 
    return false;
  }
  
  private boolean checkFromIndex(QueryableEntry entry) { return this.index.contains(entry.getKeyData()); }
  
  public Iterator<QueryableEntry> iterator() { return new It(this); }
  
  public boolean add(QueryableEntry obj) { throw new UnsupportedOperationException(); }
  
  public int size() {
    int size = 0;
    for (Map<Data, QueryableEntry> resultSet : this.resultSets)
      size += resultSet.size(); 
    return size;
  }
}
