package com.hazelcast.query.impl;

import com.hazelcast.query.Predicate;
import com.hazelcast.util.Preconditions;
import java.util.AbstractSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class AndResultSet extends AbstractSet<QueryableEntry> {
  private static final int SIZE_UNINITIALIZED = -1;
  
  private final Set<QueryableEntry> setSmallest;
  
  private final List<Set<QueryableEntry>> otherIndexedResults;
  
  private final List<Predicate> lsNoIndexPredicates;
  
  private int cachedSize;
  
  public AndResultSet(Set<QueryableEntry> setSmallest, List<Set<QueryableEntry>> otherIndexedResults, List<Predicate> lsNoIndexPredicates) {
    this.setSmallest = (Set)Preconditions.isNotNull(setSmallest, "setSmallest");
    this.otherIndexedResults = otherIndexedResults;
    this.lsNoIndexPredicates = lsNoIndexPredicates;
    this.cachedSize = -1;
  }
  
  public boolean contains(Object o) {
    if (!this.setSmallest.contains(o))
      return false; 
    if (this.otherIndexedResults != null)
      for (Set<QueryableEntry> otherIndexedResult : this.otherIndexedResults) {
        if (!otherIndexedResult.contains(o))
          return false; 
      }  
    if (this.lsNoIndexPredicates != null)
      for (Predicate noIndexPredicate : this.lsNoIndexPredicates) {
        if (!noIndexPredicate.apply((Map.Entry)o))
          return false; 
      }  
    return true;
  }
  
  public Iterator<QueryableEntry> iterator() { return new It(this); }
  
  public int size() {
    if (this.cachedSize == -1) {
      int calculatedSize = 0;
      for (Iterator<QueryableEntry> it = iterator(); it.hasNext(); it.next())
        calculatedSize++; 
      this.cachedSize = calculatedSize;
    } 
    return this.cachedSize;
  }
  
  public int estimatedSize() {
    if (this.cachedSize == -1) {
      if (this.setSmallest == null)
        return 0; 
      return this.setSmallest.size();
    } 
    return this.cachedSize;
  }
}
