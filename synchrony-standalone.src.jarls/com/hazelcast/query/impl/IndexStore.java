package com.hazelcast.query.impl;

import com.hazelcast.core.TypeConverter;
import com.hazelcast.monitor.impl.IndexOperationStats;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.query.Predicate;
import java.util.Set;

public interface IndexStore {
  Comparable canonicalizeQueryArgumentScalar(Comparable paramComparable);
  
  void insert(Object paramObject, QueryableEntry paramQueryableEntry, IndexOperationStats paramIndexOperationStats);
  
  void update(Object paramObject1, Object paramObject2, QueryableEntry paramQueryableEntry, IndexOperationStats paramIndexOperationStats);
  
  void remove(Object paramObject1, Data paramData, Object paramObject2, IndexOperationStats paramIndexOperationStats);
  
  void clear();
  
  void destroy();
  
  boolean isEvaluateOnly();
  
  boolean canEvaluate(Class<? extends Predicate> paramClass);
  
  Set<QueryableEntry> evaluate(Predicate paramPredicate, TypeConverter paramTypeConverter);
  
  Set<QueryableEntry> getRecords(Comparable paramComparable);
  
  Set<QueryableEntry> getRecords(Set<Comparable> paramSet);
  
  Set<QueryableEntry> getRecords(Comparison paramComparison, Comparable paramComparable);
  
  Set<QueryableEntry> getRecords(Comparable paramComparable1, boolean paramBoolean1, Comparable paramComparable2, boolean paramBoolean2);
}
