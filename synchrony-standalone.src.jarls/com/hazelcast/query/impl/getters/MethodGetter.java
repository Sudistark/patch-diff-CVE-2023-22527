package com.hazelcast.query.impl.getters;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

final class MethodGetter extends AbstractMultiValueGetter {
  private final Method method;
  
  MethodGetter(Getter parent, Method method, String modifierSuffix, Class resultType) {
    super(parent, modifierSuffix, method.getReturnType(), resultType);
    this.method = method;
  }
  
  protected Object extractFrom(Object object) throws IllegalAccessException, InvocationTargetException {
    try {
      return this.method.invoke(object, new Object[0]);
    } catch (IllegalArgumentException e) {
      throw new IllegalArgumentException(composeAttributeValueExtractionFailedMessage(this.method), e);
    } 
  }
  
  boolean isCacheable() { return true; }
  
  public String toString() { return "MethodGetter [parent=" + this.parent + ", method=" + this.method.getName() + ", modifier = " + getModifier() + "]"; }
}
