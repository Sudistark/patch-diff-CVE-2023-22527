package com.hazelcast.query.impl;

import java.util.HashMap;
import java.util.Map;

public final class IndexHeapMemoryCostUtil {
  private static final int BASE_ARRAY_COST = 16;
  
  private static final int BASE_STRING_COST = 40;
  
  private static final int BASE_BIG_INTEGER_COST = 56;
  
  private static final int BASE_BIG_DECIMAL_COST = 40;
  
  private static final int BASE_CONCURRENT_HASH_MAP_COST = 80;
  
  private static final int BASE_CONCURRENT_SKIP_LIST_MAP_COST = 48;
  
  private static final int DATE_COST = 24;
  
  private static final int SQL_TIMESTAMP_COST = 32;
  
  private static final int CONCURRENT_HASH_MAP_ENTRY_COST = 32;
  
  private static final int CONCURRENT_SKIP_LIST_MAP_ENTRY_COST = 24;
  
  private static final int QUERY_ENTRY_COST = 32;
  
  private static final int CACHED_QUERYABLE_ENTRY_COST = 40;
  
  private static final Map<Class, Integer> KNOWN_FINAL_CLASSES_COSTS = new HashMap();
  
  private static final int ROUGH_BIG_INTEGER_COST = 72;
  
  private static final int ROUGH_BIG_DECIMAL_COST = 112;
  
  private static final int ROUGH_UNKNOWN_CLASS_COST = 24;
  
  static  {
    KNOWN_FINAL_CLASSES_COSTS.put(Boolean.class, Integer.valueOf(16));
    KNOWN_FINAL_CLASSES_COSTS.put(Character.class, Integer.valueOf(16));
    KNOWN_FINAL_CLASSES_COSTS.put(Byte.class, Integer.valueOf(16));
    KNOWN_FINAL_CLASSES_COSTS.put(Short.class, Integer.valueOf(16));
    KNOWN_FINAL_CLASSES_COSTS.put(Integer.class, Integer.valueOf(16));
    KNOWN_FINAL_CLASSES_COSTS.put(Long.class, Integer.valueOf(24));
    KNOWN_FINAL_CLASSES_COSTS.put(Float.class, Integer.valueOf(16));
    KNOWN_FINAL_CLASSES_COSTS.put(Double.class, Integer.valueOf(24));
    KNOWN_FINAL_CLASSES_COSTS.put(java.util.UUID.class, Integer.valueOf(32));
  }
  
  public static long estimateValueCost(Object value) {
    if (value == null)
      return 0L; 
    Class<?> clazz = value.getClass();
    Integer cost = (Integer)KNOWN_FINAL_CLASSES_COSTS.get(clazz);
    if (cost != null)
      return cost.intValue(); 
    if (value instanceof String)
      return 40L + ((String)value).length() * 2L; 
    if (value instanceof java.sql.Timestamp)
      return 32L; 
    if (value instanceof java.util.Date)
      return 24L; 
    if (clazz.isEnum())
      return 0L; 
    if (value instanceof java.math.BigDecimal)
      return 112L; 
    if (value instanceof java.math.BigInteger)
      return 72L; 
    return 24L;
  }
  
  public static long estimateMapCost(long size, boolean ordered, boolean usesCachedQueryableEntries) {
    long queryableEntriesCost;
    long mapCost;
    if (ordered) {
      mapCost = 48L + size * 24L;
    } else {
      mapCost = 80L + size * 32L;
    } 
    if (usesCachedQueryableEntries) {
      queryableEntriesCost = size * 40L;
    } else {
      queryableEntriesCost = size * 32L;
    } 
    return mapCost + queryableEntriesCost;
  }
}
