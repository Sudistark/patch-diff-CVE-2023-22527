package com.hazelcast.query.impl.predicates;

import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.BinaryInterface;
import com.hazelcast.query.Predicate;
import com.hazelcast.query.VisitablePredicate;
import com.hazelcast.query.impl.Comparables;
import com.hazelcast.query.impl.Index;
import com.hazelcast.query.impl.Indexes;
import com.hazelcast.query.impl.QueryContext;
import com.hazelcast.query.impl.QueryableEntry;
import java.io.IOException;
import java.util.Set;

@BinaryInterface
public class EqualPredicate extends AbstractIndexAwarePredicate implements NegatablePredicate, RangePredicate, VisitablePredicate {
  private static final long serialVersionUID = 1L;
  
  protected Comparable value;
  
  public EqualPredicate() {}
  
  public EqualPredicate(String attribute) { super(attribute); }
  
  public EqualPredicate(String attribute, Comparable value) {
    super(attribute);
    this.value = value;
  }
  
  public Predicate accept(Visitor visitor, Indexes indexes) { return visitor.visit(this, indexes); }
  
  public Set<QueryableEntry> filter(QueryContext queryContext) {
    Index index = matchIndex(queryContext, QueryContext.IndexMatchHint.PREFER_UNORDERED);
    if (index == null)
      return null; 
    return index.getRecords(this.value);
  }
  
  protected boolean applyForSingleAttributeValue(Comparable attributeValue) {
    if (attributeValue == null)
      return PredicateUtils.isNull(this.value); 
    this.value = convert(attributeValue, this.value);
    attributeValue = (Comparable)convertEnumValue(attributeValue);
    return Comparables.equal(attributeValue, this.value);
  }
  
  public void writeData(ObjectDataOutput out) throws IOException {
    super.writeData(out);
    out.writeObject(this.value);
  }
  
  public void readData(ObjectDataInput in) throws IOException {
    super.readData(in);
    this.value = (Comparable)in.readObject();
  }
  
  public boolean equals(Object o) {
    if (this == o)
      return true; 
    if (!super.equals(o))
      return false; 
    if (!(o instanceof EqualPredicate))
      return false; 
    EqualPredicate that = (EqualPredicate)o;
    if (!that.canEqual(this))
      return false; 
    return (this.value != null) ? this.value.equals(that.value) : ((that.value == null) ? 1 : 0);
  }
  
  public boolean canEqual(Object other) { return other instanceof EqualPredicate; }
  
  public int hashCode() {
    result = super.hashCode();
    return 31 * result + ((this.value != null) ? this.value.hashCode() : 0);
  }
  
  public String toString() { return this.attributeName + "=" + this.value; }
  
  public Predicate negate() { return new NotEqualPredicate(this.attributeName, this.value); }
  
  public int getId() { return 3; }
  
  public String getAttribute() { return this.attributeName; }
  
  public Comparable getFrom() { return this.value; }
  
  public boolean isFromInclusive() { return true; }
  
  public Comparable getTo() { return this.value; }
  
  public boolean isToInclusive() { return true; }
}
