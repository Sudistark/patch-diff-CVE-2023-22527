package com.hazelcast.query.impl.predicates;

import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.BinaryInterface;
import com.hazelcast.query.Predicate;
import com.hazelcast.query.VisitablePredicate;
import com.hazelcast.query.impl.Comparables;
import com.hazelcast.query.impl.Index;
import com.hazelcast.query.impl.Indexes;
import com.hazelcast.query.impl.QueryContext;
import com.hazelcast.query.impl.QueryableEntry;
import com.hazelcast.util.SetUtil;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import java.io.IOException;
import java.util.Arrays;
import java.util.Set;

@BinaryInterface
public class InPredicate extends AbstractIndexAwarePredicate implements VisitablePredicate {
  private static final long serialVersionUID = 1L;
  
  Comparable[] values;
  
  public InPredicate() {}
  
  public InPredicate(String attribute, Comparable... values) {
    super(attribute);
    if (values == null)
      throw new NullPointerException("Array can't be null"); 
    this.values = values;
  }
  
  @SuppressFBWarnings({"EI_EXPOSE_REP"})
  public Comparable[] getValues() { return this.values; }
  
  public Predicate accept(Visitor visitor, Indexes indexes) { return visitor.visit(this, indexes); }
  
  protected boolean applyForSingleAttributeValue(Comparable attributeValue) {
    Set<Comparable> set = this.convertedInValues;
    if (attributeValue == null && set == null) {
      Boolean valuesContainNull = this.valuesContainNull;
      if (valuesContainNull != null)
        return valuesContainNull.booleanValue(); 
      for (Comparable value : this.values) {
        if (PredicateUtils.isNull(value)) {
          this.valuesContainNull = Boolean.valueOf(true);
          return true;
        } 
      } 
      this.valuesContainNull = Boolean.valueOf(false);
      return false;
    } 
    attributeValue = (Comparable)convertEnumValue(attributeValue);
    if (set == null) {
      set = SetUtil.createHashSet(this.values.length);
      for (Comparable value : this.values) {
        Comparable converted = convert(attributeValue, value);
        if (PredicateUtils.isNull(converted))
          converted = null; 
        set.add(Comparables.canonicalizeForHashLookup(converted));
      } 
      this.convertedInValues = set;
    } 
    return set.contains(Comparables.canonicalizeForHashLookup(attributeValue));
  }
  
  public Set<QueryableEntry> filter(QueryContext queryContext) {
    Index index = matchIndex(queryContext, QueryContext.IndexMatchHint.PREFER_UNORDERED);
    if (index != null)
      return index.getRecords(this.values); 
    return null;
  }
  
  public void writeData(ObjectDataOutput out) throws IOException {
    super.writeData(out);
    out.writeInt(this.values.length);
    for (Object value : this.values)
      out.writeObject(value); 
  }
  
  public void readData(ObjectDataInput in) throws IOException {
    super.readData(in);
    int len = in.readInt();
    this.values = new Comparable[len];
    for (int i = 0; i < len; i++)
      this.values[i] = (Comparable)in.readObject(); 
  }
  
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append(this.attributeName);
    sb.append(" IN (");
    for (int i = 0; i < this.values.length; i++) {
      if (i > 0)
        sb.append(","); 
      sb.append(this.values[i]);
    } 
    sb.append(")");
    return sb.toString();
  }
  
  public int getId() { return 7; }
  
  public boolean equals(Object o) {
    if (this == o)
      return true; 
    if (!super.equals(o))
      return false; 
    if (!(o instanceof InPredicate))
      return false; 
    InPredicate that = (InPredicate)o;
    if (!that.canEqual(this))
      return false; 
    return Arrays.equals(this.values, that.values);
  }
  
  public boolean canEqual(Object other) { return other instanceof InPredicate; }
  
  public int hashCode() {
    result = super.hashCode();
    return 31 * result + Arrays.hashCode(this.values);
  }
}
