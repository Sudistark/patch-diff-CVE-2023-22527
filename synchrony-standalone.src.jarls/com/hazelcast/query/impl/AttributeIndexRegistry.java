package com.hazelcast.query.impl;

import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

public class AttributeIndexRegistry {
  private final ConcurrentMap<String, Record> registry = new ConcurrentHashMap();
  
  public void register(InternalIndex index) {
    String[] components = index.getComponents();
    String firstComponent = components[0];
    Record record = (Record)this.registry.get(firstComponent);
    if (record == null) {
      record = new Record(null);
      this.registry.put(firstComponent, record);
    } 
    if (index.isOrdered()) {
      if (record.orderedWorseThan(index))
        record.ordered = (components.length == 1) ? index : new FirstComponentDecorator(index); 
    } else if (record.unorderedWorseThan(index)) {
      record.unordered = index;
    } 
  }
  
  public InternalIndex match(String attribute, QueryContext.IndexMatchHint matchHint) {
    InternalIndex unordered, ordered;
    Record record = (Record)this.registry.get(attribute);
    if (record == null)
      return null; 
    switch (null.$SwitchMap$com$hazelcast$query$impl$QueryContext$IndexMatchHint[matchHint.ordinal()]) {
      case 1:
      case 2:
        ordered = record.ordered;
        return (ordered == null) ? record.unordered : ordered;
      case 3:
        unordered = record.unordered;
        return (unordered == null) ? record.ordered : unordered;
    } 
    throw new IllegalStateException("unexpected match hint: " + matchHint);
  }
  
  public void clear() { this.registry.clear(); }
}
