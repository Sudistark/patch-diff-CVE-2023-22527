package com.hazelcast.query.impl.bitmap;

final class SparseBitSet {
  public static final int ARRAY_STORAGE_32_MAX_SIZE = 513;
  
  public static final int ARRAY_STORAGE_16_MAX_SIZE = 4096;
  
  private static final long INT_PREFIX_MASK = -4294967296L;
  
  private static final long INT_POSTFIX_MASK = 4294967295L;
  
  private static final long SHORT_PREFIX_MASK = 4294901760L;
  
  private static final long INT_PREFIX_SHORT_POSTFIX_MASK = -4294901761L;
  
  private static final long INT_PREFIX_SHORT_PREFIX_MASK = -65536L;
  
  private static final long SHORT_POSTFIX_MASK = 65535L;
  
  private final SparseIntArray<Storage32> storages = new SparseIntArray();
  
  private int lastPrefix = -1;
  
  private Storage32 lastStorage;
  
  public void add(long member) {
    assert member >= 0L;
    int prefix = (int)(member >>> 32);
    if (prefix == this.lastPrefix) {
      Storage32 newStorage = this.lastStorage.add((int)member);
      if (newStorage != this.lastStorage) {
        this.lastStorage = newStorage;
        this.storages.set(prefix, newStorage);
      } 
    } else {
      this.lastPrefix = prefix;
      Storage32 storage = (Storage32)this.storages.get(prefix);
      if (storage == null) {
        ArrayStorage32 arrayStorage32 = new ArrayStorage32((int)member);
        this.lastStorage = arrayStorage32;
        this.storages.set(prefix, arrayStorage32);
      } else {
        Storage32 newStorage = storage.add((int)member);
        if (newStorage == storage) {
          this.lastStorage = storage;
        } else {
          this.lastStorage = newStorage;
          this.storages.set(prefix, newStorage);
        } 
      } 
    } 
  }
  
  public boolean remove(long member) {
    assert member >= 0L;
    int prefix = (int)(member >>> 32);
    if (prefix == this.lastPrefix) {
      if (this.lastStorage.remove((int)member)) {
        this.lastPrefix = -1;
        this.lastStorage = null;
        return this.storages.clear(prefix);
      } 
      return false;
    } 
    Storage32 storage = (Storage32)this.storages.get(prefix);
    if (storage == null)
      return false; 
    if (storage.remove((int)member)) {
      this.lastPrefix = -1;
      this.lastStorage = null;
      return this.storages.clear(prefix);
    } 
    this.lastPrefix = prefix;
    this.lastStorage = storage;
    return false;
  }
  
  public AscendingLongIterator iterator() { return new IteratorImpl(this.storages); }
}
