package com.hazelcast.query.impl.bitmap;

final class SparseArray<E> extends Object {
  private static final long INT_PREFIX_MASK = -4294967296L;
  
  private final SparseIntArray<SparseIntArray<E>> storages = new SparseIntArray();
  
  private int lastPrefix = -1;
  
  private SparseIntArray<E> lastStorage;
  
  public void set(long index, E value) {
    assert index >= 0L;
    assert value != null;
    int prefix = (int)(index >>> 32);
    if (prefix == this.lastPrefix) {
      this.lastStorage.set((int)index, value);
    } else {
      this.lastPrefix = prefix;
      SparseIntArray<E> storage = (SparseIntArray)this.storages.get(prefix);
      if (storage == null) {
        SparseIntArray<E> createdStorage = new SparseIntArray<E>();
        createdStorage.set((int)index, value);
        this.lastStorage = createdStorage;
        this.storages.set(prefix, createdStorage);
      } else {
        storage.set((int)index, value);
        this.lastStorage = storage;
      } 
    } 
  }
  
  public void clear(long index) {
    assert index >= 0L;
    int prefix = (int)(index >>> 32);
    if (prefix == this.lastPrefix) {
      if (this.lastStorage.clear((int)index)) {
        this.lastPrefix = -1;
        this.lastStorage = null;
        this.storages.clear(prefix);
      } 
    } else {
      SparseIntArray<E> storage = (SparseIntArray)this.storages.get(prefix);
      if (storage != null)
        if (storage.clear((int)index)) {
          this.storages.clear(prefix);
        } else {
          this.lastPrefix = prefix;
          this.lastStorage = storage;
        }  
    } 
  }
  
  public void clear() {
    this.lastPrefix = -1;
    this.lastStorage = null;
    this.storages.clear();
  }
  
  public Iterator<E> iterator() { return new IteratorImpl(this.storages); }
}
