package com.hazelcast.query.impl;

import com.hazelcast.internal.json.NonTerminalJsonValue;
import com.hazelcast.monitor.impl.IndexOperationStats;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.query.impl.getters.MultiResult;
import java.util.List;

public abstract class BaseSingleValueIndexStore extends BaseIndexStore {
  private boolean multiResultHasToDetectDuplicates;
  
  BaseSingleValueIndexStore(IndexCopyBehavior copyOn) { super(copyOn); }
  
  abstract Object insertInternal(Comparable paramComparable, QueryableEntry paramQueryableEntry);
  
  abstract Object removeInternal(Comparable paramComparable, Data paramData);
  
  final MultiResultSet createMultiResultSet() { return this.multiResultHasToDetectDuplicates ? new DuplicateDetectingMultiResult() : new FastMultiResultSet(); }
  
  public final void insert(Object value, QueryableEntry record, IndexOperationStats operationStats) {
    takeWriteLock();
    try {
      unwrapAndInsertToIndex(value, record, operationStats);
    } finally {
      releaseWriteLock();
    } 
  }
  
  public final void update(Object oldValue, Object newValue, QueryableEntry entry, IndexOperationStats operationStats) {
    takeWriteLock();
    try {
      Data indexKey = entry.getKeyData();
      unwrapAndRemoveFromIndex(oldValue, indexKey, operationStats);
      unwrapAndInsertToIndex(newValue, entry, operationStats);
    } finally {
      releaseWriteLock();
    } 
  }
  
  public final void remove(Object value, Data entryKey, Object entryValue, IndexOperationStats operationStats) {
    takeWriteLock();
    try {
      unwrapAndRemoveFromIndex(value, entryKey, operationStats);
    } finally {
      releaseWriteLock();
    } 
  }
  
  public void destroy() {}
  
  private void unwrapAndInsertToIndex(Object newValue, QueryableEntry record, IndexOperationStats operationStats) {
    if (newValue == NonTerminalJsonValue.INSTANCE)
      return; 
    if (newValue instanceof MultiResult) {
      this.multiResultHasToDetectDuplicates = true;
      List<Object> results = ((MultiResult)newValue).getResults();
      for (Object o : results) {
        Comparable sanitizedValue = sanitizeValue(o);
        Object oldValue = insertInternal(sanitizedValue, record);
        operationStats.onEntryAdded(oldValue, newValue);
      } 
    } else {
      Comparable sanitizedValue = sanitizeValue(newValue);
      Object oldValue = insertInternal(sanitizedValue, record);
      operationStats.onEntryAdded(oldValue, newValue);
    } 
  }
  
  private void unwrapAndRemoveFromIndex(Object oldValue, Data indexKey, IndexOperationStats operationStats) {
    if (oldValue == NonTerminalJsonValue.INSTANCE)
      return; 
    if (oldValue instanceof MultiResult) {
      List<Object> results = ((MultiResult)oldValue).getResults();
      for (Object o : results) {
        Comparable sanitizedValue = sanitizeValue(o);
        Object removedValue = removeInternal(sanitizedValue, indexKey);
        operationStats.onEntryRemoved(removedValue);
      } 
    } else {
      Comparable sanitizedValue = sanitizeValue(oldValue);
      Object removedValue = removeInternal(sanitizedValue, indexKey);
      operationStats.onEntryRemoved(removedValue);
    } 
  }
}
