package com.hazelcast.topic.impl.reliable;

import com.hazelcast.config.ReliableTopicConfig;
import com.hazelcast.core.DistributedObject;
import com.hazelcast.monitor.LocalTopicStats;
import com.hazelcast.monitor.impl.LocalTopicStatsImpl;
import com.hazelcast.spi.ManagedService;
import com.hazelcast.spi.NodeEngine;
import com.hazelcast.spi.RemoteService;
import com.hazelcast.spi.StatisticsAwareService;
import com.hazelcast.util.ConcurrencyUtil;
import com.hazelcast.util.ConstructorFunction;
import com.hazelcast.util.MapUtil;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

public class ReliableTopicService implements ManagedService, RemoteService, StatisticsAwareService {
  public static final String SERVICE_NAME = "hz:impl:reliableTopicService";
  
  private final ConcurrentMap<String, LocalTopicStatsImpl> statsMap;
  
  private final ConstructorFunction<String, LocalTopicStatsImpl> localTopicStatsConstructorFunction;
  
  private final NodeEngine nodeEngine;
  
  public ReliableTopicService(NodeEngine nodeEngine) {
    this.statsMap = new ConcurrentHashMap();
    this.localTopicStatsConstructorFunction = new Object(this);
    this.nodeEngine = nodeEngine;
  }
  
  public DistributedObject createDistributedObject(String objectName) {
    ReliableTopicConfig topicConfig = this.nodeEngine.getConfig().findReliableTopicConfig(objectName);
    return new ReliableTopicProxy(objectName, this.nodeEngine, this, topicConfig);
  }
  
  public void destroyDistributedObject(String objectName) { this.statsMap.remove(objectName); }
  
  public LocalTopicStatsImpl getLocalTopicStats(String name) { return (LocalTopicStatsImpl)ConcurrencyUtil.getOrPutSynchronized(this.statsMap, name, this.statsMap, this.localTopicStatsConstructorFunction); }
  
  public Map<String, LocalTopicStats> getStats() {
    Map<String, LocalTopicStats> topicStats = MapUtil.createHashMap(this.statsMap.size());
    for (Map.Entry<String, LocalTopicStatsImpl> queueStat : this.statsMap.entrySet())
      topicStats.put(queueStat.getKey(), queueStat.getValue()); 
    return topicStats;
  }
  
  public void init(NodeEngine nodeEngine, Properties properties) {}
  
  public void reset() { this.statsMap.clear(); }
  
  public void shutdown(boolean terminate) { reset(); }
}
