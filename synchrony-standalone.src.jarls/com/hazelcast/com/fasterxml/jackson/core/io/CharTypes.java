package com.hazelcast.com.fasterxml.jackson.core.io;

import java.util.Arrays;

public final class CharTypes {
  private static final char[] HC = "0123456789ABCDEF".toCharArray();
  
  private static final byte[] HB;
  
  private static final int[] sInputCodes;
  
  private static final int[] sInputCodesUTF8;
  
  private static final int[] sInputCodesJsNames;
  
  private static final int[] sInputCodesUtf8JsNames;
  
  private static final int[] sInputCodesComment;
  
  private static final int[] sInputCodesWS;
  
  private static final int[] sOutputEscapes128;
  
  private static final int[] sHexValues;
  
  static  {
    len = HC.length;
    HB = new byte[len];
    for (int i = 0; i < len; i++)
      HB[i] = (byte)HC[i]; 
    int[] arrayOfInt2 = new int[256];
    for (int i = 0; i < 32; i++)
      arrayOfInt2[i] = -1; 
    arrayOfInt2[34] = 1;
    arrayOfInt2[92] = 1;
    sInputCodes = arrayOfInt2;
    int[] arrayOfInt1 = new int[sInputCodes.length];
    System.arraycopy(sInputCodes, 0, arrayOfInt1, 0, arrayOfInt1.length);
    for (int c = 128; c < 256; c++) {
      int code;
      if ((c & 0xE0) == 192) {
        code = 2;
      } else if ((c & 0xF0) == 224) {
        code = 3;
      } else if ((c & 0xF8) == 240) {
        code = 4;
      } else {
        code = -1;
      } 
      arrayOfInt1[c] = code;
    } 
    sInputCodesUTF8 = arrayOfInt1;
    table = new int[256];
    Arrays.fill(table, -1);
    for (int i = 33; i < 256; i++) {
      if (Character.isJavaIdentifierPart((char)i))
        table[i] = 0; 
    } 
    table[64] = 0;
    table[35] = 0;
    table[42] = 0;
    table[45] = 0;
    table[43] = 0;
    sInputCodesJsNames = table;
    buf = new int[256];
    System.arraycopy(sInputCodesJsNames, 0, buf, 0, buf.length);
    Arrays.fill(buf, 128, 128, 0);
    sInputCodesUtf8JsNames = buf;
    buf = new int[256];
    System.arraycopy(sInputCodesUTF8, 128, buf, 128, 128);
    Arrays.fill(buf, 0, 32, -1);
    buf[9] = 0;
    buf[10] = 10;
    buf[13] = 13;
    buf[42] = 42;
    sInputCodesComment = buf;
    table = new int[256];
    System.arraycopy(sInputCodesUTF8, 128, table, 128, 128);
    Arrays.fill(table, 0, 32, -1);
    table[32] = 1;
    table[9] = 1;
    table[10] = 10;
    table[13] = 13;
    table[47] = 47;
    table[35] = 35;
    sInputCodesWS = table;
    table = new int[128];
    for (int i = 0; i < 32; i++)
      table[i] = -1; 
    table[34] = 34;
    table[92] = 92;
    table[8] = 98;
    table[9] = 116;
    table[12] = 102;
    table[10] = 110;
    table[13] = 114;
    sOutputEscapes128 = table;
    sHexValues = new int[256];
    Arrays.fill(sHexValues, -1);
    byte b;
    for (b = 0; b < 10; b++)
      sHexValues[48 + b] = b; 
    for (b = 0; b < 6; b++) {
      sHexValues[97 + b] = 10 + b;
      sHexValues[65 + b] = 10 + b;
    } 
  }
  
  public static int[] getInputCodeLatin1() { return sInputCodes; }
  
  public static int[] getInputCodeUtf8() { return sInputCodesUTF8; }
  
  public static int[] getInputCodeLatin1JsNames() { return sInputCodesJsNames; }
  
  public static int[] getInputCodeUtf8JsNames() { return sInputCodesUtf8JsNames; }
  
  public static int[] getInputCodeComment() { return sInputCodesComment; }
  
  public static int[] getInputCodeWS() { return sInputCodesWS; }
  
  public static int[] get7BitOutputEscapes() { return sOutputEscapes128; }
  
  public static int[] get7BitOutputEscapes(int quoteChar) {
    if (quoteChar == 34)
      return sOutputEscapes128; 
    return AltEscapes.instance.escapesFor(quoteChar);
  }
  
  public static int charToHex(int ch) { return sHexValues[ch & 0xFF]; }
  
  public static void appendQuoted(StringBuilder sb, String content) {
    int[] escCodes = sOutputEscapes128;
    int escLen = escCodes.length;
    for (int i = 0, len = content.length(); i < len; i++) {
      char c = content.charAt(i);
      if (c >= escLen || escCodes[c] == 0) {
        sb.append(c);
      } else {
        sb.append('\\');
        int escCode = escCodes[c];
        if (escCode < 0) {
          sb.append('u');
          sb.append('0');
          sb.append('0');
          char c1 = c;
          sb.append(HC[c1 >> '\004']);
          sb.append(HC[c1 & 0xF]);
        } else {
          sb.append((char)escCode);
        } 
      } 
    } 
  }
  
  public static char[] copyHexChars() { return (char[])HC.clone(); }
  
  public static byte[] copyHexBytes() { return (byte[])HB.clone(); }
}
