package com.hazelcast.spi;

import com.hazelcast.nio.Address;
import com.hazelcast.util.Preconditions;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

public final class CallsPerMember implements LiveOperations {
  private final Address localAddress;
  
  private final Map<Address, CategorizedCallIds> callIdsByMember;
  
  public CallsPerMember(Address localAddress) {
    this.callIdsByMember = new HashMap();
    this.localAddress = (Address)Preconditions.checkNotNull(localAddress, "local address can't be null");
  }
  
  public void add(Address address, long callId) {
    if (callId == 0L)
      return; 
    if (address == null)
      address = this.localAddress; 
    (getOrCreateCallIdsForMember(address)).liveOps.add(Long.valueOf(callId));
  }
  
  public void addOpToCancel(Address address, long callId) { (getOrCreateCallIdsForMember(address)).opsToCancel.add(Long.valueOf(callId)); }
  
  public Set<Address> addresses() { return this.callIdsByMember.keySet(); }
  
  public OperationControl toOpControl(Address address) {
    CategorizedCallIds callIds = (CategorizedCallIds)this.callIdsByMember.get(address);
    if (callIds == null)
      throw new IllegalArgumentException("Address not recognized as a member of this cluster: " + address); 
    return new OperationControl(toArray(callIds.liveOps), toArray(callIds.opsToCancel));
  }
  
  public void clear() { this.callIdsByMember.clear(); }
  
  public void ensureMember(Address address) { getOrCreateCallIdsForMember(address); }
  
  public CategorizedCallIds getOrCreateCallIdsForMember(Address address) {
    CategorizedCallIds callIds = (CategorizedCallIds)this.callIdsByMember.get(address);
    if (callIds == null) {
      callIds = new CategorizedCallIds(null);
      this.callIdsByMember.put(address, callIds);
    } 
    return callIds;
  }
  
  private static long[] toArray(List<Long> longs) {
    long[] array = new long[longs.size()];
    for (int k = 0; k < array.length; k++)
      array[k] = ((Long)longs.get(k)).longValue(); 
    return array;
  }
}
