package com.hazelcast.spi.partition;

import com.hazelcast.core.MigrationListener;
import com.hazelcast.nio.Address;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.partition.PartitionLostListener;
import com.hazelcast.spi.CoreService;
import java.util.List;
import java.util.Map;

public interface IPartitionService extends CoreService {
  public static final String SERVICE_NAME = "hz:core:partitionService";
  
  Address getPartitionOwner(int paramInt);
  
  Address getPartitionOwnerOrWait(int paramInt);
  
  IPartition getPartition(int paramInt);
  
  IPartition getPartition(int paramInt, boolean paramBoolean);
  
  int getPartitionId(Data paramData);
  
  int getPartitionId(Object paramObject);
  
  int getPartitionCount();
  
  List<Integer> getMemberPartitions(Address paramAddress);
  
  Map<Address, List<Integer>> getMemberPartitionsMap();
  
  String addMigrationListener(MigrationListener paramMigrationListener);
  
  boolean removeMigrationListener(String paramString);
  
  String addPartitionLostListener(PartitionLostListener paramPartitionLostListener);
  
  String addLocalPartitionLostListener(PartitionLostListener paramPartitionLostListener);
  
  boolean removePartitionLostListener(String paramString);
  
  long getMigrationQueueSize();
  
  boolean isMemberStateSafe();
  
  int getMaxAllowedBackupCount();
  
  int getPartitionStateVersion();
  
  boolean hasOnGoingMigration();
  
  boolean hasOnGoingMigrationLocal();
  
  boolean isPartitionOwner(int paramInt);
  
  IPartition[] getPartitions();
}
