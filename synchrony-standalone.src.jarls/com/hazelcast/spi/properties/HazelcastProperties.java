package com.hazelcast.spi.properties;

import com.hazelcast.config.Config;
import java.util.Collections;
import java.util.Properties;
import java.util.Set;
import java.util.concurrent.TimeUnit;

public class HazelcastProperties {
  private final Set<String> keys;
  
  private final Properties properties = new Properties();
  
  public HazelcastProperties(Config config) { this(config.getProperties()); }
  
  public HazelcastProperties(Properties nullableProperties) {
    if (nullableProperties != null)
      this.properties.putAll(nullableProperties); 
    this.keys = Collections.unmodifiableSet(this.properties.keySet());
  }
  
  public Set<String> keySet() { return this.keys; }
  
  public String get(String key) { return (String)this.properties.get(key); }
  
  public String getString(HazelcastProperty property) {
    String value = this.properties.getProperty(property.getName());
    if (value != null)
      return value; 
    value = property.getSystemProperty();
    if (value != null)
      return value; 
    HazelcastProperty parent = property.getParent();
    if (parent != null)
      return getString(parent); 
    String deprecatedName = property.getDeprecatedName();
    if (deprecatedName != null) {
      value = get(deprecatedName);
      if (value == null)
        value = System.getProperty(deprecatedName); 
      if (value != null) {
        System.err.print("Don't use deprecated '" + deprecatedName + "' but use '" + property
            .getName() + "' instead. The former name will be removed in the next Hazelcast release.");
        return value;
      } 
    } 
    return property.getDefaultValue();
  }
  
  public boolean containsKey(HazelcastProperty property) {
    if (property == null)
      return false; 
    return (containsKey(property.getName()) || 
      containsKey(property.getParent()) || 
      containsKey(property.getDeprecatedName()));
  }
  
  private boolean containsKey(String propertyName) {
    if (propertyName == null)
      return false; 
    return (this.properties.containsKey(propertyName) || 
      System.getProperty(propertyName) != null);
  }
  
  public boolean getBoolean(HazelcastProperty property) { return Boolean.valueOf(getString(property)).booleanValue(); }
  
  public int getInteger(HazelcastProperty property) { return Integer.parseInt(getString(property)); }
  
  public long getLong(HazelcastProperty property) { return Long.parseLong(getString(property)); }
  
  public float getFloat(HazelcastProperty property) { return Float.valueOf(getString(property)).floatValue(); }
  
  public double getDouble(HazelcastProperty property) { return Double.valueOf(getString(property)).doubleValue(); }
  
  public long getNanos(HazelcastProperty property) {
    TimeUnit timeUnit = property.getTimeUnit();
    return timeUnit.toNanos(getLong(property));
  }
  
  public long getMillis(HazelcastProperty property) {
    TimeUnit timeUnit = property.getTimeUnit();
    return timeUnit.toMillis(getLong(property));
  }
  
  public long getPositiveMillisOrDefault(HazelcastProperty property) { return getPositiveMillisOrDefault(property, Long.parseLong(property.getDefaultValue())); }
  
  public long getPositiveMillisOrDefault(HazelcastProperty property, long defaultValue) {
    long millis = getMillis(property);
    return (millis > 0L) ? millis : defaultValue;
  }
  
  public int getSeconds(HazelcastProperty property) {
    TimeUnit timeUnit = property.getTimeUnit();
    return (int)timeUnit.toSeconds(getLong(property));
  }
  
  public <E extends Enum> E getEnum(HazelcastProperty property, Class<E> enumClazz) {
    String value = getString(property);
    Enum[] arrayOfEnum;
    int i;
    byte b;
    for (arrayOfEnum = (Enum[])enumClazz.getEnumConstants(), i = arrayOfEnum.length, b = 0; b < i; ) {
      E enumConstant = (E)arrayOfEnum[b];
      if (enumConstant.name().equalsIgnoreCase(value))
        return enumConstant; 
      b++;
    } 
    throw new IllegalArgumentException(String.format("value '%s' for property '%s' is not a valid %s value", new Object[] { value, property
            .getName(), enumClazz.getName() }));
  }
}
