package com.hazelcast.spi.merge;

import com.hazelcast.config.InvalidConfigurationException;
import com.hazelcast.spi.NodeEngine;
import com.hazelcast.util.ConcurrencyUtil;
import com.hazelcast.util.ConstructorFunction;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

public final class SplitBrainMergePolicyProvider {
  private static final Map<String, SplitBrainMergePolicy> OUT_OF_THE_BOX_MERGE_POLICIES = new HashMap();
  
  private final NodeEngine nodeEngine;
  
  private final ConcurrentMap<String, SplitBrainMergePolicy> mergePolicyMap;
  
  private final ConstructorFunction<String, SplitBrainMergePolicy> policyConstructorFunction;
  
  static  {
    addPolicy(DiscardMergePolicy.class, new DiscardMergePolicy());
    addPolicy(ExpirationTimeMergePolicy.class, new ExpirationTimeMergePolicy());
    addPolicy(HigherHitsMergePolicy.class, new HigherHitsMergePolicy());
    addPolicy(HyperLogLogMergePolicy.class, new HyperLogLogMergePolicy());
    addPolicy(LatestAccessMergePolicy.class, new LatestAccessMergePolicy());
    addPolicy(LatestUpdateMergePolicy.class, new LatestUpdateMergePolicy());
    addPolicy(PassThroughMergePolicy.class, new PassThroughMergePolicy());
    addPolicy(PutIfAbsentMergePolicy.class, new PutIfAbsentMergePolicy());
  }
  
  public SplitBrainMergePolicyProvider(NodeEngine nodeEngine) {
    this.mergePolicyMap = new ConcurrentHashMap();
    this.policyConstructorFunction = new Object(this);
    this.nodeEngine = nodeEngine;
    this.mergePolicyMap.putAll(OUT_OF_THE_BOX_MERGE_POLICIES);
  }
  
  public SplitBrainMergePolicy getMergePolicy(String className) {
    if (className == null)
      throw new InvalidConfigurationException("Class name is mandatory!"); 
    return (SplitBrainMergePolicy)ConcurrencyUtil.getOrPutIfAbsent(this.mergePolicyMap, className, this.policyConstructorFunction);
  }
  
  private static <T extends SplitBrainMergePolicy> void addPolicy(Class<T> clazz, T policy) {
    OUT_OF_THE_BOX_MERGE_POLICIES.put(clazz.getName(), policy);
    OUT_OF_THE_BOX_MERGE_POLICIES.put(clazz.getSimpleName(), policy);
  }
}
