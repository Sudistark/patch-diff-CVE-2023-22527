package com.hazelcast.spi.discovery.multicast.impl;

import com.hazelcast.logging.ILogger;
import com.hazelcast.nio.IOUtil;
import java.io.ByteArrayInputStream;
import java.io.ObjectInputStream;
import java.net.DatagramPacket;
import java.net.MulticastSocket;

public class MulticastDiscoveryReceiver {
  private static final int DATAGRAM_BUFFER_SIZE = 65536;
  
  private final MulticastSocket multicastSocket;
  
  private final DatagramPacket datagramPacketReceive;
  
  private final ILogger logger;
  
  public MulticastDiscoveryReceiver(MulticastSocket multicastSocket, ILogger logger) {
    this.datagramPacketReceive = new DatagramPacket(new byte[65536], 65536);
    this.multicastSocket = multicastSocket;
    this.logger = logger;
  }
  
  public MulticastMemberInfo receive() {
    in = null;
    bis = null;
    try {
      this.multicastSocket.receive(this.datagramPacketReceive);
      byte[] data = this.datagramPacketReceive.getData();
      bis = new ByteArrayInputStream(data);
      in = new ObjectInputStream(bis);
      Object o = in.readObject();
      MulticastMemberInfo multicastMemberInfo = (MulticastMemberInfo)o;
      return multicastMemberInfo;
    } catch (Exception e) {
      if (this.logger.isFinestEnabled())
        this.logger.finest("Couldn't get member info from multicast channel " + e.getMessage()); 
    } finally {
      IOUtil.closeResource(bis);
      IOUtil.closeResource(in);
    } 
    return null;
  }
}
