package com.hazelcast.spi;

import com.hazelcast.logging.ILogger;
import com.hazelcast.logging.Logger;
import com.hazelcast.nio.Address;
import com.hazelcast.nio.Connection;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.DataSerializable;
import com.hazelcast.util.EmptyStatement;
import com.hazelcast.util.StringUtil;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import java.io.IOException;
import java.util.concurrent.atomic.AtomicLongFieldUpdater;
import java.util.logging.Level;

public abstract class Operation implements DataSerializable {
  public static final int GENERIC_PARTITION_ID = -1;
  
  static final int BITMASK_VALIDATE_TARGET = 1;
  
  static final int BITMASK_CALLER_UUID_SET = 2;
  
  static final int BITMASK_REPLICA_INDEX_SET = 4;
  
  static final int BITMASK_WAIT_TIMEOUT_SET = 8;
  
  static final int BITMASK_PARTITION_ID_32_BIT = 16;
  
  static final int BITMASK_CALL_TIMEOUT_64_BIT = 32;
  
  static final int BITMASK_SERVICE_NAME_SET = 64;
  
  private static final AtomicLongFieldUpdater<Operation> CALL_ID = AtomicLongFieldUpdater.newUpdater(Operation.class, "callId");
  
  private String serviceName;
  
  private int partitionId;
  
  private int replicaIndex;
  
  private short flags;
  
  private long invocationTime;
  
  private long callTimeout;
  
  private long waitTimeout;
  
  private String callerUuid;
  
  private NodeEngine nodeEngine;
  
  private Object service;
  
  private Address callerAddress;
  
  private Connection connection;
  
  private OperationResponseHandler responseHandler;
  
  protected Operation() {
    this.partitionId = -1;
    this.invocationTime = -1L;
    this.callTimeout = Float.MAX_VALUE;
    this.waitTimeout = -1L;
    setFlag(true, 1);
    setFlag(true, 32);
  }
  
  public boolean executedLocally() { return this.nodeEngine.getThisAddress().equals(this.callerAddress); }
  
  public boolean isUrgent() { return this instanceof UrgentSystemOperation; }
  
  public void beforeRun() {}
  
  public void run() {}
  
  public CallStatus call() throws Exception {
    if (this instanceof BlockingOperation) {
      BlockingOperation blockingOperation = (BlockingOperation)this;
      if (blockingOperation.shouldWait())
        return CallStatus.WAIT; 
    } 
    run();
    return returnsResponse() ? CallStatus.DONE_RESPONSE : CallStatus.DONE_VOID;
  }
  
  public void afterRun() {}
  
  public boolean returnsResponse() { return true; }
  
  public Object getResponse() { return null; }
  
  String getRawServiceName() { return this.serviceName; }
  
  public String getServiceName() { return this.serviceName; }
  
  @SuppressFBWarnings({"ES_COMPARING_PARAMETER_STRING_WITH_EQ"})
  public final Operation setServiceName(String serviceName) {
    if (serviceName == getServiceName())
      return this; 
    this.serviceName = serviceName;
    setFlag((serviceName != null), 64);
    return this;
  }
  
  public final int getPartitionId() { return this.partitionId; }
  
  public final Operation setPartitionId(int partitionId) {
    this.partitionId = partitionId;
    setFlag((partitionId > 32767), 16);
    return this;
  }
  
  public final int getReplicaIndex() { return this.replicaIndex; }
  
  public final Operation setReplicaIndex(int replicaIndex) {
    if (replicaIndex < 0 || replicaIndex >= 7)
      throw new IllegalArgumentException("Replica index is out of range [0-6]: " + replicaIndex); 
    setFlag((replicaIndex != 0), 4);
    this.replicaIndex = replicaIndex;
    return this;
  }
  
  public final long getCallId() { return Math.abs(this.callId); }
  
  final boolean isActive() { return (this.callId > 0L); }
  
  final boolean deactivate() {
    long c = this.callId;
    if (c <= 0L)
      return false; 
    if (CALL_ID.compareAndSet(this, c, -c))
      return true; 
    if (this.callId > 0L)
      throw new IllegalStateException("Operation concurrently re-activated while executing deactivate(). " + this); 
    return false;
  }
  
  final void setCallId(long newId) {
    if (newId <= 0L)
      throw new IllegalArgumentException(String.format("Attempted to set non-positive call ID %d on %s", new Object[] { Long.valueOf(newId), this })); 
    long c = this.callId;
    if (c > 0L)
      throw new IllegalStateException(String.format("Attempt to overwrite the call ID of an active operation: current %d, requested %d. %s", new Object[] { Long.valueOf(this.callId), Long.valueOf(newId), this })); 
    if (!CALL_ID.compareAndSet(this, c, newId))
      throw new IllegalStateException(String.format("Concurrent modification of call ID. Initially observed %d, then attempted to set %d, then observed %d. %s", new Object[] { Long.valueOf(c), Long.valueOf(newId), Long.valueOf(this.callId), this })); 
    onSetCallId(newId);
  }
  
  protected void onSetCallId(long callId) {}
  
  public boolean validatesTarget() { return isFlagSet(1); }
  
  public final Operation setValidateTarget(boolean validateTarget) {
    setFlag(validateTarget, 1);
    return this;
  }
  
  public final NodeEngine getNodeEngine() { return this.nodeEngine; }
  
  public final Operation setNodeEngine(NodeEngine nodeEngine) {
    this.nodeEngine = nodeEngine;
    return this;
  }
  
  public final <T> T getService() {
    if (this.service == null) {
      String name = (this.serviceName != null) ? this.serviceName : getServiceName();
      this.service = this.nodeEngine.getService(name);
    } 
    return (T)this.service;
  }
  
  public final Operation setService(Object service) {
    this.service = service;
    return this;
  }
  
  public final Address getCallerAddress() { return this.callerAddress; }
  
  final Operation setCallerAddress(Address callerAddress) {
    this.callerAddress = callerAddress;
    return this;
  }
  
  public final Connection getConnection() { return this.connection; }
  
  final Operation setConnection(Connection connection) {
    this.connection = connection;
    return this;
  }
  
  public final OperationResponseHandler getOperationResponseHandler() { return this.responseHandler; }
  
  public final Operation setOperationResponseHandler(OperationResponseHandler responseHandler) {
    this.responseHandler = responseHandler;
    return this;
  }
  
  public final void sendResponse(Object value) {
    OperationResponseHandler responseHandler = getOperationResponseHandler();
    if (responseHandler == null) {
      if (value instanceof Throwable) {
        getLogger().warning("Missing responseHandler for " + toString(), (Throwable)value);
      } else {
        getLogger().warning("Missing responseHandler for " + toString() + " value[" + value + "]");
      } 
    } else {
      responseHandler.sendResponse(this, value);
    } 
  }
  
  public final long getInvocationTime() { return this.invocationTime; }
  
  final Operation setInvocationTime(long invocationTime) {
    this.invocationTime = invocationTime;
    return this;
  }
  
  public final long getCallTimeout() { return this.callTimeout; }
  
  final Operation setCallTimeout(long callTimeout) {
    this.callTimeout = callTimeout;
    setFlag((callTimeout > 2147483647L), 32);
    return this;
  }
  
  public final long getWaitTimeout() { return this.waitTimeout; }
  
  public final void setWaitTimeout(long timeout) {
    this.waitTimeout = timeout;
    setFlag((timeout != -1L), 8);
  }
  
  public ExceptionAction onInvocationException(Throwable throwable) { return (throwable instanceof com.hazelcast.spi.exception.RetryableException) ? ExceptionAction.RETRY_INVOCATION : ExceptionAction.THROW_EXCEPTION; }
  
  public String getCallerUuid() { return this.callerUuid; }
  
  public Operation setCallerUuid(String callerUuid) {
    this.callerUuid = callerUuid;
    setFlag((callerUuid != null), 2);
    return this;
  }
  
  protected final ILogger getLogger() {
    NodeEngine ne = this.nodeEngine;
    return (ne != null) ? ne.getLogger(getClass()) : Logger.getLogger(getClass());
  }
  
  void setFlag(boolean value, int bitmask) {
    if (value) {
      this.flags = (short)(this.flags | bitmask);
    } else {
      this.flags = (short)(this.flags & (bitmask ^ 0xFFFFFFFF));
    } 
  }
  
  boolean isFlagSet(int bitmask) { return ((this.flags & bitmask) != 0); }
  
  short getFlags() { return this.flags; }
  
  public void onExecutionFailure(Throwable e) {}
  
  public void logError(Throwable e) {
    ILogger logger = getLogger();
    if (e instanceof com.hazelcast.spi.exception.SilentException) {
      logger.finest(e.getMessage(), e);
    } else if (e instanceof com.hazelcast.spi.exception.RetryableException) {
      Level level = returnsResponse() ? Level.FINEST : Level.WARNING;
      if (logger.isLoggable(level))
        logger.log(level, e.getClass().getName() + ": " + e.getMessage()); 
    } else if (e instanceof OutOfMemoryError) {
      try {
        logger.severe(e.getMessage(), e);
      } catch (Throwable ignored) {
        EmptyStatement.ignore(ignored);
      } 
    } else {
      Level level = (this.nodeEngine != null && this.nodeEngine.isRunning()) ? Level.SEVERE : Level.FINEST;
      if (logger.isLoggable(level))
        logger.log(level, e.getMessage(), e); 
    } 
  }
  
  public final void writeData(ObjectDataOutput out) throws IOException {
    out.writeLong(this.callId);
    if (!isFlagSet(64) && requiresExplicitServiceName()) {
      String explicitServiceName = getServiceName();
      if (explicitServiceName != null) {
        this.serviceName = explicitServiceName;
        setFlag(true, 64);
      } 
    } 
    out.writeShort(this.flags);
    if (isFlagSet(64))
      out.writeUTF(this.serviceName); 
    if (isFlagSet(16)) {
      out.writeInt(this.partitionId);
    } else {
      out.writeShort(this.partitionId);
    } 
    if (isFlagSet(4))
      out.writeByte(this.replicaIndex); 
    out.writeLong(this.invocationTime);
    if (isFlagSet(32)) {
      out.writeLong(this.callTimeout);
    } else {
      out.writeInt((int)this.callTimeout);
    } 
    if (isFlagSet(8))
      out.writeLong(this.waitTimeout); 
    if (isFlagSet(2))
      out.writeUTF(this.callerUuid); 
    writeInternal(out);
  }
  
  public final void readData(ObjectDataInput in) throws IOException {
    this.callId = in.readLong();
    this.flags = in.readShort();
    if (isFlagSet(64))
      this.serviceName = in.readUTF(); 
    if (isFlagSet(16)) {
      this.partitionId = in.readInt();
    } else {
      this.partitionId = in.readShort();
    } 
    if (isFlagSet(4))
      this.replicaIndex = in.readByte(); 
    this.invocationTime = in.readLong();
    if (isFlagSet(32)) {
      this.callTimeout = in.readLong();
    } else {
      this.callTimeout = in.readInt();
    } 
    if (isFlagSet(8))
      this.waitTimeout = in.readLong(); 
    if (isFlagSet(2))
      this.callerUuid = in.readUTF(); 
    readInternal(in);
  }
  
  protected boolean requiresExplicitServiceName() { return false; }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {}
  
  protected void readInternal(ObjectDataInput in) throws IOException {}
  
  protected void toString(StringBuilder sb) {}
  
  public String toString() {
    StringBuilder sb = (new StringBuilder(getClass().getName())).append('{');
    sb.append("serviceName='").append(getServiceName()).append('\'');
    sb.append(", identityHash=").append(System.identityHashCode(this));
    sb.append(", partitionId=").append(this.partitionId);
    sb.append(", replicaIndex=").append(this.replicaIndex);
    sb.append(", callId=").append(this.callId);
    sb.append(", invocationTime=").append(this.invocationTime).append(" (").append(StringUtil.timeToString(this.invocationTime)).append(")");
    sb.append(", waitTimeout=").append(this.waitTimeout);
    sb.append(", callTimeout=").append(this.callTimeout);
    toString(sb);
    sb.append('}');
    return sb.toString();
  }
}
