package com.hazelcast.spi.impl.sequence;

import com.hazelcast.util.Preconditions;
import java.util.concurrent.atomic.AtomicLongArray;

public abstract class AbstractCallIdSequence implements CallIdSequence {
  private static final int INDEX_HEAD = 7;
  
  private static final int INDEX_TAIL = 15;
  
  private final AtomicLongArray longs;
  
  private final int maxConcurrentInvocations;
  
  public AbstractCallIdSequence(int maxConcurrentInvocations) {
    this.longs = new AtomicLongArray(24);
    Preconditions.checkPositive(maxConcurrentInvocations, "maxConcurrentInvocations should be a positive number. maxConcurrentInvocations=" + maxConcurrentInvocations);
    this.maxConcurrentInvocations = maxConcurrentInvocations;
  }
  
  public long next() {
    if (!hasSpace())
      handleNoSpaceLeft(); 
    return forceNext();
  }
  
  protected abstract void handleNoSpaceLeft();
  
  public long getLastCallId() { return this.longs.get(7); }
  
  public int getMaxConcurrentInvocations() { return this.maxConcurrentInvocations; }
  
  public void complete() {
    long newTail = this.longs.incrementAndGet(15);
    assert newTail <= this.longs.get(7);
  }
  
  public long forceNext() { return this.longs.incrementAndGet(7); }
  
  long getTail() { return this.longs.get(15); }
  
  protected boolean hasSpace() { return (concurrentInvocations() < this.maxConcurrentInvocations); }
  
  public long concurrentInvocations() { return this.longs.get(7) - this.longs.get(15); }
}
