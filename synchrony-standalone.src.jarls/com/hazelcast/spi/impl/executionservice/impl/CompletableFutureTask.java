package com.hazelcast.spi.impl.executionservice.impl;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

class CompletableFutureTask implements Runnable {
  private final List<CompletableFutureEntry> entries = new ArrayList();
  
  private final Lock entriesLock = new ReentrantLock();
  
  <V> void registerCompletableFutureEntry(CompletableFutureEntry<V> entry) {
    this.entriesLock.lock();
    try {
      this.entries.add(entry);
    } finally {
      this.entriesLock.unlock();
    } 
  }
  
  public void run() {
    List<CompletableFutureEntry> removableEntries = removableEntries();
    removeEntries(removableEntries);
  }
  
  private void removeEntries(List<CompletableFutureEntry> removableEntries) {
    if (removableEntries.isEmpty())
      return; 
    this.entriesLock.lock();
    try {
      this.entries.removeAll(removableEntries);
    } finally {
      this.entriesLock.unlock();
    } 
  }
  
  private List<CompletableFutureEntry> removableEntries() {
    CompletableFutureEntry[] entries = copyEntries();
    List<CompletableFutureEntry> removableEntries = Collections.EMPTY_LIST;
    for (CompletableFutureEntry entry : entries) {
      if (entry.processState()) {
        if (removableEntries.isEmpty())
          removableEntries = new ArrayList<CompletableFutureEntry>(entries.length / 2); 
        removableEntries.add(entry);
      } 
    } 
    return removableEntries;
  }
  
  private CompletableFutureEntry[] copyEntries() {
    CompletableFutureEntry[] copy;
    if (this.entries.isEmpty())
      return new CompletableFutureEntry[0]; 
    this.entriesLock.lock();
    try {
      copy = new CompletableFutureEntry[this.entries.size()];
      copy = (CompletableFutureEntry[])this.entries.toArray(copy);
    } finally {
      this.entriesLock.unlock();
    } 
    return copy;
  }
  
  public String toString() { return "CompletableFutureTask{}"; }
}
