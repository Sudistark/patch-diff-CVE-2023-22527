package com.hazelcast.spi.impl.operationservice.impl.operations;

import com.hazelcast.logging.ILogger;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import com.hazelcast.spi.CallStatus;
import com.hazelcast.spi.Operation;
import com.hazelcast.spi.OperationFactory;
import com.hazelcast.spi.impl.SpiDataSerializerHook;
import com.hazelcast.spi.impl.operationservice.InternalOperationService;
import com.hazelcast.spi.impl.operationservice.impl.responses.ErrorResponse;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import java.io.IOException;

public final class PartitionIteratingOperation extends Operation implements IdentifiedDataSerializable {
  private static final Object NULL = new Object();
  
  private static final PartitionResponse EMPTY_RESPONSE = new PartitionResponse(new int[0], new Object[0]);
  
  private OperationFactory operationFactory;
  
  private int[] partitions;
  
  public PartitionIteratingOperation() {}
  
  @SuppressFBWarnings({"EI_EXPOSE_REP2"})
  public PartitionIteratingOperation(OperationFactory operationFactory, int[] partitions) {
    this.operationFactory = operationFactory;
    this.partitions = partitions;
  }
  
  public OperationFactory getOperationFactory() { return this.operationFactory; }
  
  public CallStatus call() { return new OffloadImpl(this, null); }
  
  public void onExecutionFailure(Throwable cause) {
    sendResponse(new ErrorResponse(cause, getCallId(), isUrgent()));
    getLogger().severe(cause);
  }
  
  private InternalOperationService getOperationService() { return (InternalOperationService)getNodeEngine().getOperationService(); }
  
  public int getFactoryId() { return SpiDataSerializerHook.F_ID; }
  
  public int getId() { return 3; }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeObject(this.operationFactory);
    out.writeIntArray(this.partitions);
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    this.operationFactory = (OperationFactory)in.readObject();
    this.partitions = in.readIntArray();
  }
  
  protected void toString(StringBuilder sb) {
    super.toString(sb);
    sb.append(", operationFactory=").append(this.operationFactory);
  }
}
