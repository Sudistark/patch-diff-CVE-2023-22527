package com.hazelcast.spi.impl.operationservice.impl;

import com.hazelcast.core.Member;
import com.hazelcast.cp.CPGroupId;
import com.hazelcast.cp.CPMember;
import com.hazelcast.cp.internal.IndeterminateOperationStateAware;
import com.hazelcast.nio.Address;
import com.hazelcast.spi.ExceptionAction;
import com.hazelcast.spi.Operation;

public class RaftInvocation extends Invocation<CPMember> {
  private final RaftInvocationContext raftInvocationContext;
  
  private final CPGroupId groupId;
  
  public RaftInvocation(Invocation.Context context, RaftInvocationContext raftInvocationContext, CPGroupId groupId, Operation op, int retryCount, long retryPauseMillis, long callTimeoutMillis) { this(context, raftInvocationContext, groupId, op, retryCount, retryPauseMillis, callTimeoutMillis, true); }
  
  public RaftInvocation(Invocation.Context context, RaftInvocationContext raftInvocationContext, CPGroupId groupId, Operation op, int retryCount, long retryPauseMillis, long callTimeoutMillis, boolean deserializeResponse) {
    super(context, op, null, retryCount, retryPauseMillis, callTimeoutMillis, deserializeResponse, null);
    this.raftInvocationContext = raftInvocationContext;
    this.groupId = groupId;
    int partitionId = context.partitionService.getPartitionId(Long.valueOf(groupId.id()));
    op.setPartitionId(partitionId);
  }
  
  CPMember getInvocationTarget() {
    CPMember target = getTargetEndpoint();
    this.lastInvocationEndpoint = target;
    return target;
  }
  
  Address toTargetAddress(CPMember target) { return target.getAddress(); }
  
  Member toTargetMember(CPMember target) { return this.context.clusterService.getMember(target.getAddress()); }
  
  void notifyNormalResponse(Object value, int expectedBackups) {
    if (!(value instanceof com.hazelcast.core.IndeterminateOperationState) && this.indeterminateException != null && isRetryable(value))
      value = this.indeterminateException; 
    super.notifyNormalResponse(value, expectedBackups);
    this.raftInvocationContext.setKnownLeader(this.groupId, this.lastInvocationEndpoint);
  }
  
  void notifyError(Object error) {
    if (error instanceof Throwable && ((Throwable)error)
      .getCause() instanceof com.hazelcast.core.LocalMemberResetException)
      return; 
    super.notifyError(error);
  }
  
  protected ExceptionAction onException(Throwable t) {
    this.raftInvocationContext.updateKnownLeaderOnFailure(this.groupId, t);
    if (t instanceof com.hazelcast.core.IndeterminateOperationState) {
      if (isRetryableOnIndeterminateOperationState()) {
        if (this.indeterminateException == null)
          this.indeterminateException = t; 
        return ExceptionAction.RETRY_INVOCATION;
      } 
      if (shouldFailOnIndeterminateOperationState())
        return ExceptionAction.THROW_EXCEPTION; 
      if (this.indeterminateException == null)
        this.indeterminateException = t; 
    } 
    return isRetryable(t) ? ExceptionAction.RETRY_INVOCATION : this.op.onInvocationException(t);
  }
  
  private boolean isRetryable(Object cause) { return (cause instanceof com.hazelcast.cp.exception.NotLeaderException || cause instanceof com.hazelcast.cp.exception.LeaderDemotedException || cause instanceof com.hazelcast.cp.exception.StaleAppendRequestException || cause instanceof com.hazelcast.core.MemberLeftException || cause instanceof com.hazelcast.spi.exception.CallerNotMemberException || cause instanceof com.hazelcast.spi.exception.TargetNotMemberException); }
  
  boolean skipTimeoutDetection() { return false; }
  
  private CPMember getTargetEndpoint() {
    CPMember target = this.raftInvocationContext.getKnownLeader(this.groupId);
    if (target != null)
      return target; 
    RaftInvocationContext.MemberCursor cursor = this.memberCursor;
    if (cursor == null || !cursor.advance()) {
      cursor = this.raftInvocationContext.newMemberCursor(this.groupId);
      if (!cursor.advance())
        return null; 
      this.memberCursor = cursor;
    } 
    return cursor.get();
  }
  
  private boolean isRetryableOnIndeterminateOperationState() {
    if (this.op instanceof IndeterminateOperationStateAware)
      return ((IndeterminateOperationStateAware)this.op).isRetryableOnIndeterminateOperationState(); 
    return false;
  }
  
  protected boolean shouldFailOnIndeterminateOperationState() { return this.raftInvocationContext.shouldFailOnIndeterminateOperationState(); }
}
