package com.hazelcast.spi.impl.proxyservice.impl.operations;

import com.hazelcast.logging.ILogger;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import com.hazelcast.spi.ExecutionService;
import com.hazelcast.spi.NodeEngine;
import com.hazelcast.spi.Operation;
import com.hazelcast.spi.impl.SpiDataSerializerHook;
import com.hazelcast.spi.impl.proxyservice.impl.ProxyInfo;
import com.hazelcast.spi.impl.proxyservice.impl.ProxyRegistry;
import com.hazelcast.spi.impl.proxyservice.impl.ProxyServiceImpl;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;

public class PostJoinProxyOperation extends Operation implements IdentifiedDataSerializable {
  private Collection<ProxyInfo> proxies;
  
  public PostJoinProxyOperation() {}
  
  public PostJoinProxyOperation(Collection<ProxyInfo> proxies) { this.proxies = proxies; }
  
  public void run() {
    if (this.proxies == null || this.proxies.size() <= 0)
      return; 
    NodeEngine nodeEngine = getNodeEngine();
    ProxyServiceImpl proxyService = (ProxyServiceImpl)getService();
    ExecutionService executionService = nodeEngine.getExecutionService();
    for (ProxyInfo proxy : this.proxies) {
      ProxyRegistry registry = proxyService.getOrCreateRegistry(proxy.getServiceName());
      try {
        executionService.execute("hz:system", new CreateProxyTask(this, registry, proxy));
      } catch (Throwable t) {
        logProxyCreationFailure(proxy, t);
      } 
    } 
  }
  
  private void logProxyCreationFailure(ProxyInfo proxy, Throwable t) { getLogger().severe("Cannot create proxy [" + proxy.getServiceName() + ":" + proxy.getObjectName() + "]!", t); }
  
  public String getServiceName() { return "hz:core:proxyService"; }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    int len = (this.proxies != null) ? this.proxies.size() : 0;
    out.writeInt(len);
    if (len > 0)
      for (ProxyInfo proxy : this.proxies) {
        out.writeUTF(proxy.getServiceName());
        out.writeObject(proxy.getObjectName());
      }  
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    int len = in.readInt();
    if (len > 0) {
      this.proxies = new ArrayList(len);
      for (int i = 0; i < len; i++) {
        ProxyInfo proxy = new ProxyInfo(in.readUTF(), (String)in.readObject());
        this.proxies.add(proxy);
      } 
    } 
  }
  
  public int getFactoryId() { return SpiDataSerializerHook.F_ID; }
  
  public int getId() { return 16; }
}
