package com.hazelcast.spi.impl.proxyservice.impl;

import com.hazelcast.core.DistributedObject;
import com.hazelcast.spi.InitializingObject;
import com.hazelcast.util.ExceptionUtil;

public class DistributedObjectFuture {
  boolean isSetAndInitialized() { return (this.proxy != null || this.error != null); }
  
  public DistributedObject get() {
    if (this.proxy != null)
      return this.proxy; 
    if (this.error != null)
      throw ExceptionUtil.rethrow(this.error); 
    boolean interrupted = waitUntilSetAndInitialized();
    if (interrupted)
      Thread.currentThread().interrupt(); 
    if (this.proxy != null)
      return this.proxy; 
    throw ExceptionUtil.rethrow(this.error);
  }
  
  private boolean waitUntilSetAndInitialized() {
    boolean interrupted = false;
    synchronized (this) {
      while (this.proxy == null && this.error == null) {
        if (this.rawProxy != null) {
          initialize();
          break;
        } 
        try {
          wait();
        } catch (InterruptedException e) {
          interrupted = true;
        } 
      } 
    } 
    return interrupted;
  }
  
  private void initialize() {
    synchronized (this) {
      try {
        InitializingObject o = (InitializingObject)this.rawProxy;
        o.initialize();
        this.proxy = this.rawProxy;
      } catch (Throwable e) {
        this.error = e;
      } 
      notifyAll();
    } 
  }
  
  void set(DistributedObject o, boolean initialized) {
    if (o == null)
      throw new IllegalArgumentException("Proxy should not be null!"); 
    synchronized (this) {
      if (!initialized && o instanceof InitializingObject) {
        this.rawProxy = o;
      } else {
        this.proxy = o;
      } 
      notifyAll();
    } 
  }
  
  void setError(Throwable t) {
    if (t == null)
      throw new IllegalArgumentException("Error should not be null!"); 
    if (this.proxy != null)
      throw new IllegalStateException("Proxy is already set! Proxy: " + this.proxy + ", error: " + t); 
    synchronized (this) {
      this.error = t;
      notifyAll();
    } 
  }
}
