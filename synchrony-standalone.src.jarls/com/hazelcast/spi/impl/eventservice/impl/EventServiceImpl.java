package com.hazelcast.spi.impl.eventservice.impl;

import com.hazelcast.core.ICompletableFuture;
import com.hazelcast.instance.EndpointQualifier;
import com.hazelcast.instance.MemberImpl;
import com.hazelcast.internal.cluster.ClusterService;
import com.hazelcast.internal.metrics.MetricsProvider;
import com.hazelcast.internal.metrics.MetricsRegistry;
import com.hazelcast.internal.metrics.Probe;
import com.hazelcast.internal.metrics.ProbeLevel;
import com.hazelcast.internal.serialization.InternalSerializationService;
import com.hazelcast.internal.util.InvocationUtil;
import com.hazelcast.internal.util.counters.MwCounter;
import com.hazelcast.logging.ILogger;
import com.hazelcast.nio.Address;
import com.hazelcast.nio.Connection;
import com.hazelcast.nio.EndpointManager;
import com.hazelcast.nio.Packet;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.EventFilter;
import com.hazelcast.spi.EventRegistration;
import com.hazelcast.spi.InternalCompletableFuture;
import com.hazelcast.spi.Operation;
import com.hazelcast.spi.impl.NodeEngineImpl;
import com.hazelcast.spi.impl.eventservice.InternalEventService;
import com.hazelcast.spi.impl.eventservice.impl.operations.DeregistrationOperationSupplier;
import com.hazelcast.spi.impl.eventservice.impl.operations.OnJoinRegistrationOperation;
import com.hazelcast.spi.impl.eventservice.impl.operations.RegistrationOperationSupplier;
import com.hazelcast.spi.impl.eventservice.impl.operations.SendEventOperation;
import com.hazelcast.spi.properties.GroupProperty;
import com.hazelcast.spi.properties.HazelcastProperties;
import com.hazelcast.util.EmptyStatement;
import com.hazelcast.util.ExceptionUtil;
import com.hazelcast.util.ThreadUtil;
import com.hazelcast.util.UuidUtil;
import com.hazelcast.util.executor.StripedExecutor;
import com.hazelcast.util.function.Supplier;
import java.io.Closeable;
import java.io.IOException;
import java.util.Collection;
import java.util.Collections;
import java.util.LinkedList;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.RejectedExecutionException;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;

public class EventServiceImpl implements InternalEventService, MetricsProvider {
  public static final String SERVICE_NAME = "hz:core:eventService";
  
  public static final String EVENT_SYNC_FREQUENCY_PROP = "hazelcast.event.sync.frequency";
  
  private static final EventRegistration[] EMPTY_REGISTRATIONS = new EventRegistration[0];
  
  private static final int EVENT_SYNC_FREQUENCY = 100000;
  
  private static final int SEND_RETRY_COUNT = 50;
  
  private static final int WARNING_LOG_FREQUENCY = 1000;
  
  private static final int MAX_RETRIES = 100;
  
  final ILogger logger;
  
  final NodeEngineImpl nodeEngine;
  
  private final ConcurrentMap<String, EventServiceSegment> segments;
  
  private final StripedExecutor eventExecutor;
  
  private final long eventQueueTimeoutMs;
  
  @Probe(name = "threadCount")
  private final int eventThreadCount;
  
  @Probe(name = "queueCapacity")
  private final int eventQueueCapacity;
  
  @Probe(name = "totalFailureCount")
  private final MwCounter totalFailures;
  
  @Probe(name = "rejectedCount")
  private final MwCounter rejectedCount;
  
  @Probe(name = "syncDeliveryFailureCount")
  private final MwCounter syncDeliveryFailureCount;
  
  private final int sendEventSyncTimeoutMillis;
  
  private final InternalSerializationService serializationService;
  
  private final int eventSyncFrequency;
  
  public EventServiceImpl(NodeEngineImpl nodeEngine) {
    this
      .totalFailures = MwCounter.newMwCounter();
    this
      .rejectedCount = MwCounter.newMwCounter();
    this
      .syncDeliveryFailureCount = MwCounter.newMwCounter();
    this.nodeEngine = nodeEngine;
    this.serializationService = (InternalSerializationService)nodeEngine.getSerializationService();
    this.logger = nodeEngine.getLogger(com.hazelcast.spi.EventService.class.getName());
    HazelcastProperties hazelcastProperties = nodeEngine.getProperties();
    this.eventThreadCount = hazelcastProperties.getInteger(GroupProperty.EVENT_THREAD_COUNT);
    this.eventQueueCapacity = hazelcastProperties.getInteger(GroupProperty.EVENT_QUEUE_CAPACITY);
    this.eventQueueTimeoutMs = hazelcastProperties.getMillis(GroupProperty.EVENT_QUEUE_TIMEOUT_MILLIS);
    this.sendEventSyncTimeoutMillis = hazelcastProperties.getInteger(GroupProperty.EVENT_SYNC_TIMEOUT_MILLIS);
    this.eventSyncFrequency = loadEventSyncFrequency();
    this
      
      .eventExecutor = new StripedExecutor(nodeEngine.getNode().getLogger(EventServiceImpl.class), ThreadUtil.createThreadName(nodeEngine.getHazelcastInstance().getName(), "event"), this.eventThreadCount, this.eventQueueCapacity);
    this.segments = new ConcurrentHashMap();
  }
  
  private static int loadEventSyncFrequency() {
    try {
      eventSyncFrequency = Integer.parseInt(System.getProperty("hazelcast.event.sync.frequency"));
      if (eventSyncFrequency <= 0)
        eventSyncFrequency = 100000; 
      return eventSyncFrequency;
    } catch (Exception e) {
      return 100000;
    } 
  }
  
  public void provideMetrics(MetricsRegistry registry) { registry.scanAndRegister(this, "event"); }
  
  public void close(EventRegistration eventRegistration) {
    Registration registration = (Registration)eventRegistration;
    Object listener = registration.getListener();
    if (!(listener instanceof Closeable))
      return; 
    try {
      ((Closeable)listener).close();
    } catch (IOException e) {
      EmptyStatement.ignore(e);
    } 
  }
  
  public int getEventThreadCount() { return this.eventThreadCount; }
  
  public int getEventQueueCapacity() { return this.eventQueueCapacity; }
  
  @Probe(name = "eventQueueSize", level = ProbeLevel.MANDATORY)
  public int getEventQueueSize() { return this.eventExecutor.getWorkQueueSize(); }
  
  @Probe(level = ProbeLevel.MANDATORY)
  private long eventsProcessed() { return this.eventExecutor.processedCount(); }
  
  public EventRegistration registerLocalListener(String serviceName, String topic, Object listener) { return registerListenerInternal(serviceName, topic, TrueEventFilter.INSTANCE, listener, true); }
  
  public EventRegistration registerLocalListener(String serviceName, String topic, EventFilter filter, Object listener) { return registerListenerInternal(serviceName, topic, filter, listener, true); }
  
  public EventRegistration registerListener(String serviceName, String topic, Object listener) { return registerListenerInternal(serviceName, topic, TrueEventFilter.INSTANCE, listener, false); }
  
  public EventRegistration registerListener(String serviceName, String topic, EventFilter filter, Object listener) { return registerListenerInternal(serviceName, topic, filter, listener, false); }
  
  private EventRegistration registerListenerInternal(String serviceName, String topic, EventFilter filter, Object listener, boolean localOnly) {
    if (listener == null)
      throw new IllegalArgumentException("Listener required!"); 
    if (filter == null)
      throw new IllegalArgumentException("EventFilter required!"); 
    EventServiceSegment segment = getSegment(serviceName, true);
    String id = UuidUtil.newUnsecureUuidString();
    Registration reg = new Registration(id, serviceName, topic, filter, this.nodeEngine.getThisAddress(), listener, localOnly);
    if (!segment.addRegistration(topic, reg))
      return null; 
    if (!localOnly) {
      RegistrationOperationSupplier registrationOperationSupplier = new RegistrationOperationSupplier(reg, this.nodeEngine.getClusterService());
      invokeOnAllMembers(registrationOperationSupplier);
    } 
    return reg;
  }
  
  public boolean handleRegistration(Registration reg) {
    if (this.nodeEngine.getThisAddress().equals(reg.getSubscriber()))
      return false; 
    EventServiceSegment segment = getSegment(reg.getServiceName(), true);
    return segment.addRegistration(reg.getTopic(), reg);
  }
  
  public boolean deregisterListener(String serviceName, String topic, Object id) {
    EventServiceSegment segment = getSegment(serviceName, false);
    if (segment == null)
      return false; 
    Registration reg = segment.removeRegistration(topic, String.valueOf(id));
    if (reg != null && !reg.isLocalOnly()) {
      DeregistrationOperationSupplier deregistrationOperationSupplier = new DeregistrationOperationSupplier(reg, this.nodeEngine.getClusterService());
      invokeOnAllMembers(deregistrationOperationSupplier);
    } 
    return (reg != null);
  }
  
  private void invokeOnAllMembers(Supplier<Operation> operationSupplier) {
    ICompletableFuture<Object> future = InvocationUtil.invokeOnStableClusterSerial(this.nodeEngine, operationSupplier, 100);
    try {
      future.get();
    } catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw ExceptionUtil.rethrow(e);
    } catch (ExecutionException e) {
      throw ExceptionUtil.rethrow(e);
    } 
  }
  
  public void deregisterAllListeners(String serviceName, String topic) {
    EventServiceSegment segment = getSegment(serviceName, false);
    if (segment != null)
      segment.removeRegistrations(topic); 
  }
  
  public StripedExecutor getEventExecutor() { return this.eventExecutor; }
  
  public EventRegistration[] getRegistrationsAsArray(String serviceName, String topic) {
    EventServiceSegment segment = getSegment(serviceName, false);
    if (segment == null)
      return EMPTY_REGISTRATIONS; 
    Collection<Registration> registrations = segment.getRegistrations(topic, false);
    if (registrations == null || registrations.isEmpty())
      return EMPTY_REGISTRATIONS; 
    return (EventRegistration[])registrations.toArray(new Registration[0]);
  }
  
  public Collection<EventRegistration> getRegistrations(String serviceName, String topic) {
    EventServiceSegment segment = getSegment(serviceName, false);
    if (segment == null)
      return Collections.emptySet(); 
    Collection<Registration> registrations = segment.getRegistrations(topic, false);
    if (registrations == null || registrations.isEmpty())
      return Collections.emptySet(); 
    return Collections.unmodifiableCollection(registrations);
  }
  
  public boolean hasEventRegistration(String serviceName, String topic) {
    EventServiceSegment segment = getSegment(serviceName, false);
    if (segment == null)
      return false; 
    return segment.hasRegistration(topic);
  }
  
  public void publishEvent(String serviceName, String topic, Object event, int orderKey) {
    Collection<EventRegistration> registrations = getRegistrations(serviceName, topic);
    publishEvent(serviceName, registrations, event, orderKey);
  }
  
  public void publishEvent(String serviceName, EventRegistration registration, Object event, int orderKey) {
    if (!(registration instanceof Registration))
      throw new IllegalArgumentException(); 
    if (isLocal(registration)) {
      executeLocal(serviceName, event, registration, orderKey);
    } else {
      EventEnvelope eventEnvelope = new EventEnvelope(registration.getId(), serviceName, event);
      sendEvent(registration.getSubscriber(), eventEnvelope, orderKey);
    } 
  }
  
  public void publishEvent(String serviceName, Collection<EventRegistration> registrations, Object event, int orderKey) {
    Data eventData = null;
    for (EventRegistration registration : registrations) {
      if (!(registration instanceof Registration))
        throw new IllegalArgumentException(); 
      if (isLocal(registration)) {
        executeLocal(serviceName, event, registration, orderKey);
        continue;
      } 
      if (eventData == null)
        eventData = this.serializationService.toData(event); 
      EventEnvelope eventEnvelope = new EventEnvelope(registration.getId(), serviceName, eventData);
      sendEvent(registration.getSubscriber(), eventEnvelope, orderKey);
    } 
  }
  
  public void publishRemoteEvent(String serviceName, Collection<EventRegistration> registrations, Object event, int orderKey) {
    if (registrations.isEmpty())
      return; 
    Data eventData = this.serializationService.toData(event);
    for (EventRegistration registration : registrations) {
      if (!(registration instanceof Registration))
        throw new IllegalArgumentException(); 
      if (isLocal(registration))
        continue; 
      EventEnvelope eventEnvelope = new EventEnvelope(registration.getId(), serviceName, eventData);
      sendEvent(registration.getSubscriber(), eventEnvelope, orderKey);
    } 
  }
  
  private void executeLocal(String serviceName, Object event, EventRegistration registration, int orderKey) {
    if (!this.nodeEngine.isRunning())
      return; 
    Registration reg = (Registration)registration;
    try {
      if (reg.getListener() != null) {
        this.eventExecutor.execute(new LocalEventDispatcher(this, serviceName, event, reg.getListener(), orderKey, this.eventQueueTimeoutMs));
      } else {
        this.logger.warning("Something seems wrong! Listener instance is null! -> " + reg);
      } 
    } catch (RejectedExecutionException e) {
      this.rejectedCount.inc();
      if (this.eventExecutor.isLive())
        logFailure("EventQueue overloaded! %s failed to publish to %s:%s", new Object[] { event, reg
              .getServiceName(), reg.getTopic() }); 
    } 
  }
  
  private void sendEvent(Address subscriber, EventEnvelope eventEnvelope, int orderKey) {
    String serviceName = eventEnvelope.getServiceName();
    EventServiceSegment segment = getSegment(serviceName, true);
    boolean sync = (segment.incrementPublish() % this.eventSyncFrequency == 0L);
    if (sync) {
      SendEventOperation op = new SendEventOperation(eventEnvelope, orderKey);
      InternalCompletableFuture internalCompletableFuture = this.nodeEngine.getOperationService().createInvocationBuilder(serviceName, op, subscriber).setTryCount(50).invoke();
      try {
        internalCompletableFuture.get(this.sendEventSyncTimeoutMillis, TimeUnit.MILLISECONDS);
      } catch (Exception e) {
        this.syncDeliveryFailureCount.inc();
        if (this.logger.isFinestEnabled())
          this.logger.finest("Sync event delivery failed. Event: " + eventEnvelope, e); 
      } 
    } else {
      Packet packet = (new Packet(this.serializationService.toBytes(eventEnvelope), orderKey)).setPacketType(Packet.Type.EVENT);
      EndpointManager em = this.nodeEngine.getNode().getNetworkingService().getEndpointManager(EndpointQualifier.MEMBER);
      if (!em.transmit(packet, subscriber) && 
        this.nodeEngine.isRunning())
        logFailure("Failed to send event packet to: %s, connection might not be alive.", new Object[] { subscriber }); 
    } 
  }
  
  public EventServiceSegment getSegment(String service, boolean forceCreate) {
    EventServiceSegment segment = (EventServiceSegment)this.segments.get(service);
    if (segment == null && forceCreate) {
      EventServiceSegment newSegment = new EventServiceSegment(service, this.nodeEngine.getService(service));
      EventServiceSegment existingSegment = (EventServiceSegment)this.segments.putIfAbsent(service, newSegment);
      if (existingSegment == null) {
        segment = newSegment;
        this.nodeEngine.getMetricsRegistry().scanAndRegister(newSegment, "event.[" + service + "]");
      } else {
        segment = existingSegment;
      } 
    } 
    return segment;
  }
  
  boolean isLocal(EventRegistration reg) { return this.nodeEngine.getThisAddress().equals(reg.getSubscriber()); }
  
  public void executeEventCallback(Runnable callback) {
    if (!this.nodeEngine.isRunning())
      return; 
    try {
      this.eventExecutor.execute(callback);
    } catch (RejectedExecutionException e) {
      this.rejectedCount.inc();
      if (this.eventExecutor.isLive())
        logFailure("EventQueue overloaded! Failed to execute event callback: %s", new Object[] { callback }); 
    } 
  }
  
  public void accept(Packet packet) {
    try {
      this.eventExecutor.execute(new RemoteEventProcessor(this, packet));
    } catch (RejectedExecutionException e) {
      this.rejectedCount.inc();
      if (this.eventExecutor.isLive()) {
        Connection conn = packet.getConn();
        String endpoint = (conn.getEndPoint() != null) ? conn.getEndPoint().toString() : conn.toString();
        logFailure("EventQueue overloaded! Failed to process event packet sent from: %s", new Object[] { endpoint });
      } 
    } 
  }
  
  public Operation getPreJoinOperation() { return getOnJoinRegistrationOperation(); }
  
  public Operation getPostJoinOperation() {
    ClusterService clusterService = this.nodeEngine.getClusterService();
    return clusterService.isMaster() ? null : getOnJoinRegistrationOperation();
  }
  
  private OnJoinRegistrationOperation getOnJoinRegistrationOperation() {
    Collection<Registration> registrations = new LinkedList<Registration>();
    for (EventServiceSegment segment : this.segments.values())
      segment.collectRemoteRegistrations(registrations); 
    return registrations.isEmpty() ? null : new OnJoinRegistrationOperation(registrations);
  }
  
  public void shutdown() {
    this.logger.finest("Stopping event executor...");
    this.eventExecutor.shutdown();
    for (EventServiceSegment segment : this.segments.values())
      segment.clear(); 
    this.segments.clear();
  }
  
  public void onMemberLeft(MemberImpl member) {
    Address address = member.getAddress();
    for (EventServiceSegment segment : this.segments.values())
      segment.onMemberLeft(address); 
  }
  
  private void logFailure(String message, Object... args) {
    this.totalFailures.inc();
    long total = this.totalFailures.get();
    Level level = (total % 1000L == 0L) ? Level.WARNING : Level.FINEST;
    if (this.logger.isLoggable(level))
      this.logger.log(level, String.format(message, args)); 
  }
}
