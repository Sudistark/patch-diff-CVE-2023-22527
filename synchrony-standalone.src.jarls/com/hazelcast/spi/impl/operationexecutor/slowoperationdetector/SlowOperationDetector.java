package com.hazelcast.spi.impl.operationexecutor.slowoperationdetector;

import com.hazelcast.internal.management.dto.SlowOperationDTO;
import com.hazelcast.logging.ILogger;
import com.hazelcast.logging.LoggingService;
import com.hazelcast.spi.impl.operationexecutor.OperationRunner;
import com.hazelcast.spi.properties.GroupProperty;
import com.hazelcast.spi.properties.HazelcastProperties;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;

public final class SlowOperationDetector {
  private static final int FULL_LOG_FREQUENCY = 100;
  
  private static final long ONE_SECOND_IN_NANOS = TimeUnit.SECONDS.toNanos(1L);
  
  private static final long SLOW_OPERATION_THREAD_MAX_WAIT_TIME_TO_FINISH = TimeUnit.SECONDS.toMillis(10L);
  
  private final ConcurrentHashMap<Integer, SlowOperationLog> slowOperationLogs;
  
  private final StringBuilder stackTraceStringBuilder;
  
  private final ILogger logger;
  
  private final long slowOperationThresholdNanos;
  
  private final long logPurgeIntervalNanos;
  
  private final long logRetentionNanos;
  
  private final boolean isStackTraceLoggingEnabled;
  
  private final OperationRunner[] genericOperationRunners;
  
  private final OperationRunner[] partitionOperationRunners;
  
  private final CurrentOperationData[] genericCurrentOperationData;
  
  private final CurrentOperationData[] partitionCurrentOperationData;
  
  private final DetectorThread detectorThread;
  
  private final boolean enabled;
  
  private boolean isFirstLog;
  
  @SuppressFBWarnings({"EI_EXPOSE_REP2"})
  public SlowOperationDetector(LoggingService loggingServices, OperationRunner[] genericOperationRunners, OperationRunner[] partitionOperationRunners, HazelcastProperties hazelcastProperties, String hzName) {
    this.slowOperationLogs = new ConcurrentHashMap();
    this.stackTraceStringBuilder = new StringBuilder();
    this.isFirstLog = true;
    this.logger = loggingServices.getLogger(SlowOperationDetector.class);
    this.slowOperationThresholdNanos = hazelcastProperties.getNanos(GroupProperty.SLOW_OPERATION_DETECTOR_THRESHOLD_MILLIS);
    this.logPurgeIntervalNanos = hazelcastProperties.getNanos(GroupProperty.SLOW_OPERATION_DETECTOR_LOG_PURGE_INTERVAL_SECONDS);
    this.logRetentionNanos = hazelcastProperties.getNanos(GroupProperty.SLOW_OPERATION_DETECTOR_LOG_RETENTION_SECONDS);
    this.isStackTraceLoggingEnabled = hazelcastProperties.getBoolean(GroupProperty.SLOW_OPERATION_DETECTOR_STACK_TRACE_LOGGING_ENABLED);
    this.genericOperationRunners = genericOperationRunners;
    this.partitionOperationRunners = partitionOperationRunners;
    this.genericCurrentOperationData = initCurrentOperationData(genericOperationRunners);
    this.partitionCurrentOperationData = initCurrentOperationData(partitionOperationRunners);
    this.enabled = hazelcastProperties.getBoolean(GroupProperty.SLOW_OPERATION_DETECTOR_ENABLED);
    this.detectorThread = newDetectorThread(hzName);
  }
  
  public List<SlowOperationDTO> getSlowOperationDTOs() {
    List<SlowOperationDTO> slowOperationDTOs = new ArrayList<SlowOperationDTO>(this.slowOperationLogs.size());
    for (SlowOperationLog slowOperationLog : this.slowOperationLogs.values())
      slowOperationDTOs.add(slowOperationLog.createDTO()); 
    return slowOperationDTOs;
  }
  
  public void start() {
    if (this.enabled) {
      this.detectorThread.start();
    } else {
      this.logger.warning("The SlowOperationDetector is disabled! Slow operations will not be reported.");
    } 
  }
  
  public void shutdown() { DetectorThread.access$000(this.detectorThread); }
  
  private CurrentOperationData[] initCurrentOperationData(OperationRunner[] operationRunners) {
    CurrentOperationData[] arrayOfCurrentOperationData = new CurrentOperationData[operationRunners.length];
    for (int i = 0; i < arrayOfCurrentOperationData.length; i++) {
      arrayOfCurrentOperationData[i] = new CurrentOperationData(null);
      CurrentOperationData.access$202(arrayOfCurrentOperationData[i], -1);
    } 
    return arrayOfCurrentOperationData;
  }
  
  private DetectorThread newDetectorThread(String hzName) { return new DetectorThread(this, hzName, null); }
}
