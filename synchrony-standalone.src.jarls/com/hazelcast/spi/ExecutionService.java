package com.hazelcast.spi;

import com.hazelcast.core.ICompletableFuture;
import com.hazelcast.util.executor.ExecutorType;
import com.hazelcast.util.executor.ManagedExecutorService;
import java.util.concurrent.Callable;
import java.util.concurrent.Future;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.TimeUnit;

public interface ExecutionService {
  public static final String SYSTEM_EXECUTOR = "hz:system";
  
  public static final String ASYNC_EXECUTOR = "hz:async";
  
  public static final String SCHEDULED_EXECUTOR = "hz:scheduled";
  
  public static final String CLIENT_EXECUTOR = "hz:client";
  
  public static final String CLIENT_QUERY_EXECUTOR = "hz:client-query";
  
  public static final String CLIENT_MANAGEMENT_EXECUTOR = "hz:client-management";
  
  public static final String CLIENT_BLOCKING_EXECUTOR = "hz:client-blocking-tasks";
  
  public static final String QUERY_EXECUTOR = "hz:query";
  
  public static final String IO_EXECUTOR = "hz:io";
  
  public static final String OFFLOADABLE_EXECUTOR = "hz:offloadable";
  
  public static final String MAP_LOADER_EXECUTOR = "hz:map-load";
  
  public static final String MAP_LOAD_ALL_KEYS_EXECUTOR = "hz:map-loadAllKeys";
  
  ManagedExecutorService register(String paramString, int paramInt1, int paramInt2, ExecutorType paramExecutorType);
  
  ManagedExecutorService register(String paramString, int paramInt1, int paramInt2, ThreadFactory paramThreadFactory);
  
  ManagedExecutorService getExecutor(String paramString);
  
  void shutdownExecutor(String paramString);
  
  void execute(String paramString, Runnable paramRunnable);
  
  Future<?> submit(String paramString, Runnable paramRunnable);
  
  <T> Future<T> submit(String paramString, Callable<T> paramCallable);
  
  ScheduledFuture<?> schedule(Runnable paramRunnable, long paramLong, TimeUnit paramTimeUnit);
  
  ScheduledFuture<?> schedule(String paramString, Runnable paramRunnable, long paramLong, TimeUnit paramTimeUnit);
  
  ScheduledFuture<?> scheduleWithRepetition(Runnable paramRunnable, long paramLong1, long paramLong2, TimeUnit paramTimeUnit);
  
  ScheduledFuture<?> scheduleWithRepetition(String paramString, Runnable paramRunnable, long paramLong1, long paramLong2, TimeUnit paramTimeUnit);
  
  TaskScheduler getGlobalTaskScheduler();
  
  TaskScheduler getTaskScheduler(String paramString);
  
  <V> ICompletableFuture<V> asCompletableFuture(Future<V> paramFuture);
}
