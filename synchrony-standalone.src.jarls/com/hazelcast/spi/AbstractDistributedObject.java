package com.hazelcast.spi;

import com.hazelcast.core.DistributedObject;
import com.hazelcast.core.HazelcastInstanceNotActiveException;
import com.hazelcast.core.PartitioningStrategy;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.partition.strategy.StringPartitioningStrategy;
import com.hazelcast.version.Version;

public abstract class AbstractDistributedObject<S extends RemoteService> extends Object implements DistributedObject {
  protected static final PartitioningStrategy PARTITIONING_STRATEGY = StringPartitioningStrategy.INSTANCE;
  
  protected AbstractDistributedObject(NodeEngine nodeEngine, S service) {
    this.nodeEngine = nodeEngine;
    this.service = service;
  }
  
  protected String getDistributedObjectName() { return getName(); }
  
  protected Data getNameAsPartitionAwareData() {
    String name = getDistributedObjectName();
    return getNodeEngine().getSerializationService().toData(name, PARTITIONING_STRATEGY);
  }
  
  public String getPartitionKey() { return StringPartitioningStrategy.getPartitionKey(getDistributedObjectName()); }
  
  public final void destroy() {
    if (preDestroy()) {
      NodeEngine engine = getNodeEngine();
      ProxyService proxyService = engine.getProxyService();
      proxyService.destroyDistributedObject(getServiceName(), getDistributedObjectName());
      postDestroy();
    } 
  }
  
  protected final Data toData(Object object) { return getNodeEngine().toData(object); }
  
  protected final <E> InternalCompletableFuture<E> invokeOnPartition(Operation operation) { return getNodeEngine().getOperationService().invokeOnPartition(operation); }
  
  protected final int getPartitionId(Data key) { return getNodeEngine().getPartitionService().getPartitionId(key); }
  
  protected boolean preDestroy() { return true; }
  
  protected void postDestroy() {}
  
  public final NodeEngine getNodeEngine() {
    NodeEngine engine = this.nodeEngine;
    lifecycleCheck(engine);
    return engine;
  }
  
  private void lifecycleCheck(NodeEngine engine) {
    if (engine == null || !engine.isRunning())
      throwNotActiveException(); 
  }
  
  protected void throwNotActiveException() { throw new HazelcastInstanceNotActiveException(); }
  
  public final S getService() {
    S s = (S)this.service;
    if (s == null)
      throw new HazelcastInstanceNotActiveException(); 
    return s;
  }
  
  public final OperationService getOperationService() { return getNodeEngine().getOperationService(); }
  
  public abstract String getServiceName();
  
  public final void invalidate() {
    this.nodeEngine = null;
    this.service = null;
  }
  
  public boolean equals(Object o) {
    if (this == o)
      return true; 
    if (o == null || getClass() != o.getClass())
      return false; 
    AbstractDistributedObject that = (AbstractDistributedObject)o;
    Object name = getDistributedObjectName();
    if ((name != null) ? !name.equals(that.getDistributedObjectName()) : (that.getDistributedObjectName() != null))
      return false; 
    String serviceName = getServiceName();
    if ((serviceName != null) ? !serviceName.equals(that.getServiceName()) : (that.getServiceName() != null))
      return false; 
    return true;
  }
  
  public int hashCode() {
    result = (getServiceName() != null) ? getServiceName().hashCode() : 0;
    return 31 * result + ((getDistributedObjectName() != null) ? getDistributedObjectName().hashCode() : 0);
  }
  
  public String toString() { return getClass().getName() + '{' + "service=" + getServiceName() + ", name=" + getName() + '}'; }
  
  protected boolean isClusterVersionLessThan(Version version) {
    Version clusterVersion = getNodeEngine().getClusterService().getClusterVersion();
    return clusterVersion.isLessThan(version);
  }
  
  protected boolean isClusterVersionUnknownOrLessThan(Version version) {
    Version clusterVersion = getNodeEngine().getClusterService().getClusterVersion();
    return clusterVersion.isUnknownOrLessThan(version);
  }
  
  protected boolean isClusterVersionLessOrEqual(Version version) {
    Version clusterVersion = getNodeEngine().getClusterService().getClusterVersion();
    return clusterVersion.isLessOrEqual(version);
  }
  
  protected boolean isClusterVersionUnknownOrLessOrEqual(Version version) {
    Version clusterVersion = getNodeEngine().getClusterService().getClusterVersion();
    return clusterVersion.isUnknownOrLessOrEqual(version);
  }
  
  protected boolean isClusterVersionGreaterThan(Version version) {
    Version clusterVersion = getNodeEngine().getClusterService().getClusterVersion();
    return clusterVersion.isGreaterThan(version);
  }
  
  protected boolean isClusterVersionUnknownOrGreaterThan(Version version) {
    Version clusterVersion = getNodeEngine().getClusterService().getClusterVersion();
    return clusterVersion.isUnknownOrGreaterThan(version);
  }
  
  protected boolean isClusterVersionGreaterOrEqual(Version version) {
    Version clusterVersion = getNodeEngine().getClusterService().getClusterVersion();
    return clusterVersion.isGreaterOrEqual(version);
  }
  
  protected boolean isClusterVersionUnknownOrGreaterOrEqual(Version version) {
    Version clusterVersion = getNodeEngine().getClusterService().getClusterVersion();
    return clusterVersion.isUnknownOrGreaterOrEqual(version);
  }
  
  protected boolean isClusterVersionEqualTo(Version version) {
    Version clusterVersion = getNodeEngine().getClusterService().getClusterVersion();
    return clusterVersion.isEqualTo(version);
  }
  
  protected boolean isClusterVersionUnknown() {
    Version clusterVersion = getNodeEngine().getClusterService().getClusterVersion();
    return clusterVersion.isUnknown();
  }
}
