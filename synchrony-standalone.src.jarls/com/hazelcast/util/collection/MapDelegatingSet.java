package com.hazelcast.util.collection;

import com.hazelcast.util.function.Predicate;
import com.hazelcast.util.function.Supplier;
import java.util.AbstractSet;
import java.util.Iterator;
import java.util.Map;

public final class MapDelegatingSet<V> extends AbstractSet<V> {
  private final Map<?, ?> delegate;
  
  private final Supplier<Iterator<V>> iterator;
  
  private final Predicate contains;
  
  public MapDelegatingSet(Map<?, ?> delegate, Supplier<Iterator<V>> iterator, Predicate contains) {
    this.delegate = delegate;
    this.iterator = iterator;
    this.contains = contains;
  }
  
  public int size() { return this.delegate.size(); }
  
  public boolean isEmpty() { return this.delegate.isEmpty(); }
  
  public boolean contains(Object o) { return this.contains.test(o); }
  
  public Iterator<V> iterator() { return (Iterator)this.iterator.get(); }
  
  public void clear() { this.delegate.clear(); }
}
