package com.hazelcast.util;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

public final class ItemCounter<T> extends Object {
  private final Map<T, MutableLong> map = new HashMap();
  
  private long total;
  
  public long total() { return this.total; }
  
  public Set<T> keySet() { return this.map.keySet(); }
  
  public List<T> descendingKeys() {
    List<T> list = new ArrayList<T>(this.map.keySet());
    Collections.sort(list, new Object(this));
    return list;
  }
  
  public long get(T item) {
    MutableLong count = (MutableLong)this.map.get(item);
    return (count == null) ? 0L : count.value;
  }
  
  public void set(T item, long value) {
    MutableLong entry = (MutableLong)this.map.get(item);
    if (entry == null) {
      entry = MutableLong.valueOf(value);
      this.map.put(item, entry);
      this.total += value;
    } else {
      this.total -= entry.value;
      this.total += value;
      entry.value = value;
    } 
  }
  
  public void inc(T item) { add(item, 1L); }
  
  public void add(T item, long delta) {
    MutableLong entry = (MutableLong)this.map.get(item);
    if (entry == null) {
      entry = MutableLong.valueOf(delta);
      this.map.put(item, entry);
    } else {
      entry.value += delta;
    } 
    this.total += delta;
  }
  
  public void reset() {
    for (MutableLong entry : this.map.values())
      entry.value = 0L; 
    this.total = 0L;
  }
  
  public void clear() {
    this.map.clear();
    this.total = 0L;
  }
  
  public long getAndSet(T item, long value) {
    MutableLong entry = (MutableLong)this.map.get(item);
    if (entry == null) {
      entry = MutableLong.valueOf(value);
      this.map.put(item, entry);
      this.total += value;
      return 0L;
    } 
    long oldValue = entry.value;
    this.total = this.total - oldValue + value;
    entry.value = value;
    return oldValue;
  }
  
  public void remove(T item) {
    MutableLong entry = (MutableLong)this.map.remove(item);
    this.total -= ((entry == null) ? 0L : entry.value);
  }
  
  public boolean equals(Object o) {
    if (this == o)
      return true; 
    if (o == null || getClass() != o.getClass())
      return false; 
    ItemCounter that = (ItemCounter)o;
    if (!this.map.equals(that.map))
      return false; 
    return true;
  }
  
  public int hashCode() { return this.map.hashCode(); }
  
  public String toString() { return this.map.toString(); }
}
