package com.hazelcast.util;

import com.hazelcast.core.IFunction;
import java.util.Collections;
import java.util.Iterator;

public final class IterableUtil {
  public static <T> T getFirst(Iterable<T> iterable, T defaultValue) {
    Iterator<T> iterator = iterable.iterator();
    return (T)(iterator.hasNext() ? iterator.next() : defaultValue);
  }
  
  public static <T, R> Iterable<R> map(Iterable<T> iterable, IFunction<T, R> mapper) { return new Object(iterable, mapper); }
  
  public static <T, R> Iterator<R> map(Iterator<T> iterator, IFunction<T, R> mapper) { return new Object(iterator, mapper); }
  
  public static <T, R> Iterator<R> limit(Iterator<R> iterator, int limit) { return new Object(limit, iterator); }
  
  public static <T> Iterable<T> nullToEmpty(Iterable<T> iterable) { return (iterable == null) ? Collections.emptyList() : iterable; }
}
