package com.hazelcast.util;

import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

public class StateMachine<T extends Enum<T>> extends Object {
  private Map<T, Set<T>> transitions;
  
  private T currentState;
  
  public StateMachine(T initialState) {
    this.transitions = new HashMap();
    this.currentState = initialState;
  }
  
  public static <T extends Enum<T>> StateMachine<T> of(T initialState) { return new StateMachine(initialState); }
  
  public StateMachine<T> withTransition(T from, T to, T... moreTo) {
    this.transitions.put(from, EnumSet.of(to, moreTo));
    return this;
  }
  
  public StateMachine<T> next(T nextState) throws IllegalStateException {
    Set<T> allowed = (Set)this.transitions.get(this.currentState);
    Preconditions.checkNotNull(allowed, "No transitions from state " + this.currentState);
    Preconditions.checkState(allowed.contains(nextState), "Transition not allowed from state " + this.currentState + " to " + nextState);
    this.currentState = nextState;
    return this;
  }
  
  public void nextOrStay(T nextState) {
    if (!is(nextState, new Enum[0]))
      next(nextState); 
  }
  
  public boolean is(T state, T... otherStates) { return EnumSet.of(state, otherStates).contains(this.currentState); }
  
  public String toString() { return "StateMachine{state=" + this.currentState + "}"; }
}
