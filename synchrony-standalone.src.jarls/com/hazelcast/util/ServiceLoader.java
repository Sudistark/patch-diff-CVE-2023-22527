package com.hazelcast.util;

import com.hazelcast.logging.ILogger;
import com.hazelcast.logging.Logger;
import com.hazelcast.nio.IOUtil;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.URI;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

public final class ServiceLoader {
  private static final boolean URLDEFINITION_COMPAT = Boolean.getBoolean("hazelcast.compat.classloading.urldefinition");
  
  private static final boolean USE_CLASSLOADING_FALLBACK = Boolean.getBoolean("hazelcast.compat.classloading.hooks.fallback");
  
  private static final ILogger LOGGER = Logger.getLogger(ServiceLoader.class);
  
  private static final String IGNORED_GLASSFISH_MAGIC_CLASSLOADER = "com.sun.enterprise.v3.server.APIClassLoaderServiceImpl$APIClassLoader";
  
  public static <T> T load(Class<T> clazz, String factoryId, ClassLoader classLoader) throws Exception {
    Iterator<T> iterator = iterator(clazz, factoryId, classLoader);
    if (iterator.hasNext())
      return (T)iterator.next(); 
    return null;
  }
  
  public static <T> Iterator<T> iterator(Class<T> expectedType, String factoryId, ClassLoader classLoader) throws Exception {
    Iterator<Class<T>> classIterator = classIterator(expectedType, factoryId, classLoader);
    return new NewInstanceIterator(classIterator);
  }
  
  public static <T> Iterator<Class<T>> classIterator(Class<T> expectedType, String factoryId, ClassLoader classLoader) throws Exception {
    Set<ServiceDefinition> serviceDefinitions = getServiceDefinitions(factoryId, classLoader);
    return new ClassIterator(serviceDefinitions, expectedType);
  }
  
  private static Set<ServiceDefinition> getServiceDefinitions(String factoryId, ClassLoader classLoader) {
    List<ClassLoader> classLoaders = selectClassLoaders(classLoader);
    Set<URLDefinition> factoryUrls = new HashSet<URLDefinition>();
    for (ClassLoader selectedClassLoader : classLoaders)
      factoryUrls.addAll(collectFactoryUrls(factoryId, selectedClassLoader)); 
    Set<ServiceDefinition> serviceDefinitions = new HashSet<ServiceDefinition>();
    for (URLDefinition urlDefinition : factoryUrls)
      serviceDefinitions.addAll(parse(urlDefinition)); 
    if (serviceDefinitions.isEmpty())
      Logger.getLogger(ServiceLoader.class).finest("Service loader could not load 'META-INF/services/" + factoryId + "'. It may be empty or does not exist."); 
    return serviceDefinitions;
  }
  
  private static Set<URLDefinition> collectFactoryUrls(String factoryId, ClassLoader classLoader) {
    String resourceName = "META-INF/services/" + factoryId;
    try {
      Enumeration<URL> configs = classLoader.getResources(resourceName);
      Set<URLDefinition> urlDefinitions = new HashSet<URLDefinition>();
      while (configs.hasMoreElements()) {
        URL url = (URL)configs.nextElement();
        String externalForm = url.toExternalForm().replace(" ", "%20").replace("^", "%5e");
        URI uri = new URI(externalForm);
        if (!classLoader.getClass().getName().equals("com.sun.enterprise.v3.server.APIClassLoaderServiceImpl$APIClassLoader"))
          urlDefinitions.add(new URLDefinition(uri, classLoader, null)); 
      } 
      return urlDefinitions;
    } catch (Exception e) {
      LOGGER.severe(e);
      return Collections.emptySet();
    } 
  }
  
  private static Set<ServiceDefinition> parse(URLDefinition urlDefinition) {
    try {
      Set<ServiceDefinition> names = new HashSet<ServiceDefinition>();
      r = null;
      try {
        URL url = URLDefinition.access$100(urlDefinition).toURL();
        r = new BufferedReader(new InputStreamReader(url.openStream(), "UTF-8"));
        while (true) {
          String line = r.readLine();
          if (line == null)
            break; 
          int comment = line.indexOf('#');
          if (comment >= 0)
            line = line.substring(0, comment); 
          String name = line.trim();
          if (name.length() == 0)
            continue; 
          names.add(new ServiceDefinition(name, URLDefinition.access$200(urlDefinition)));
        } 
      } finally {
        IOUtil.closeResource(r);
      } 
      return names;
    } catch (Exception e) {
      LOGGER.severe(e);
      return Collections.emptySet();
    } 
  }
  
  static List<ClassLoader> selectClassLoaders(ClassLoader classLoader) {
    List<ClassLoader> classLoaders = new ArrayList<ClassLoader>();
    if (classLoader != null)
      classLoaders.add(classLoader); 
    ClassLoader tccl = Thread.currentThread().getContextClassLoader();
    if (tccl != null && tccl != classLoader)
      classLoaders.add(tccl); 
    ClassLoader coreClassLoader = ServiceLoader.class.getClassLoader();
    if (coreClassLoader != classLoader && coreClassLoader != tccl)
      classLoaders.add(coreClassLoader); 
    try {
      Class<?> hzClientClass = Class.forName("com.hazelcast.client.HazelcastClient");
      ClassLoader clientClassLoader = hzClientClass.getClassLoader();
      if (clientClassLoader != classLoader && clientClassLoader != tccl && clientClassLoader != coreClassLoader)
        classLoaders.add(clientClassLoader); 
    } catch (ClassNotFoundException ignore) {
      EmptyStatement.ignore(ignore);
    } 
    return classLoaders;
  }
}
