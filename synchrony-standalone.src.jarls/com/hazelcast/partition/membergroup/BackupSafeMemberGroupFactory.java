package com.hazelcast.partition.membergroup;

import com.hazelcast.core.Member;
import java.util.Collection;
import java.util.Iterator;
import java.util.Set;

abstract class BackupSafeMemberGroupFactory implements MemberGroupFactory {
  public final Collection<MemberGroup> createMemberGroups(Collection<? extends Member> members) {
    Collection<MemberGroup> groups = createInternalMemberGroups(members);
    if (groups.size() == 1 && members.size() > 1) {
      MemberGroup group1 = (MemberGroup)groups.iterator().next();
      DefaultMemberGroup defaultMemberGroup = new DefaultMemberGroup();
      int sizePerGroup = group1.size() / 2;
      Iterator<Member> iter = group1.iterator();
      while (defaultMemberGroup.size() < sizePerGroup && iter.hasNext()) {
        defaultMemberGroup.addMember((Member)iter.next());
        iter.remove();
      } 
      groups.add(defaultMemberGroup);
    } 
    return groups;
  }
  
  protected abstract Set<MemberGroup> createInternalMemberGroups(Collection<? extends Member> paramCollection);
}
