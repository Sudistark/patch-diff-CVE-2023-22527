package com.hazelcast.config;

import com.hazelcast.instance.EndpointQualifier;
import com.hazelcast.instance.ProtocolType;
import com.hazelcast.spi.annotation.Beta;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

@Beta
public class AdvancedNetworkConfig {
  private boolean enabled;
  
  private final Map<EndpointQualifier, EndpointConfig> endpointConfigs;
  
  private JoinConfig join;
  
  private IcmpFailureDetectorConfig icmpFailureDetectorConfig;
  
  private MemberAddressProviderConfig memberAddressProviderConfig;
  
  public AdvancedNetworkConfig() {
    this.endpointConfigs = new ConcurrentHashMap();
    this.join = new JoinConfig();
    this.memberAddressProviderConfig = new MemberAddressProviderConfig();
    this.endpointConfigs.put(EndpointQualifier.MEMBER, (new ServerSocketEndpointConfig()).setProtocolType(ProtocolType.MEMBER));
  }
  
  public MemberAddressProviderConfig getMemberAddressProviderConfig() { return this.memberAddressProviderConfig; }
  
  public AdvancedNetworkConfig setMemberAddressProviderConfig(MemberAddressProviderConfig memberAddressProviderConfig) {
    this.memberAddressProviderConfig = memberAddressProviderConfig;
    return this;
  }
  
  public AdvancedNetworkConfig addWanEndpointConfig(EndpointConfig endpointConfig) {
    endpointConfig.setProtocolType(ProtocolType.WAN);
    this.endpointConfigs.put(endpointConfig.getQualifier(), endpointConfig);
    return this;
  }
  
  public AdvancedNetworkConfig setMemberEndpointConfig(ServerSocketEndpointConfig serverSocketEndpointConfig) {
    serverSocketEndpointConfig.setProtocolType(ProtocolType.MEMBER);
    this.endpointConfigs.put(EndpointQualifier.MEMBER, serverSocketEndpointConfig);
    return this;
  }
  
  public AdvancedNetworkConfig setClientEndpointConfig(ServerSocketEndpointConfig serverSocketEndpointConfig) {
    serverSocketEndpointConfig.setProtocolType(ProtocolType.CLIENT);
    this.endpointConfigs.put(EndpointQualifier.CLIENT, serverSocketEndpointConfig);
    return this;
  }
  
  public AdvancedNetworkConfig setRestEndpointConfig(RestServerEndpointConfig restServerEndpointConfig) {
    restServerEndpointConfig.setProtocolType(ProtocolType.REST);
    this.endpointConfigs.put(EndpointQualifier.REST, restServerEndpointConfig);
    return this;
  }
  
  public AdvancedNetworkConfig setMemcacheEndpointConfig(ServerSocketEndpointConfig memcacheEndpointConfig) {
    memcacheEndpointConfig.setProtocolType(ProtocolType.MEMCACHE);
    this.endpointConfigs.put(EndpointQualifier.MEMCACHE, memcacheEndpointConfig);
    return this;
  }
  
  public Map<EndpointQualifier, EndpointConfig> getEndpointConfigs() { return this.endpointConfigs; }
  
  public AdvancedNetworkConfig setEndpointConfigs(Map<EndpointQualifier, EndpointConfig> endpointConfigs) {
    for (Map.Entry<EndpointQualifier, EndpointConfig> entry : endpointConfigs.entrySet())
      ((EndpointConfig)entry.getValue()).setProtocolType(((EndpointQualifier)entry.getKey()).getType()); 
    for (ProtocolType protocolType : ProtocolType.values()) {
      int count = countEndpointConfigs(endpointConfigs, protocolType);
      if (count > protocolType.getServerSocketCardinality())
        throw new InvalidConfigurationException("Protocol type " + protocolType + " does not allow more than " + protocolType
            .getServerSocketCardinality() + " server sockets but " + count + " were defined"); 
    } 
    this.endpointConfigs.clear();
    this.endpointConfigs.putAll(endpointConfigs);
    return this;
  }
  
  public boolean isEnabled() { return this.enabled; }
  
  public AdvancedNetworkConfig setEnabled(boolean enabled) {
    this.enabled = enabled;
    return this;
  }
  
  public JoinConfig getJoin() { return this.join; }
  
  public AdvancedNetworkConfig setJoin(JoinConfig join) {
    this.join = join;
    return this;
  }
  
  public AdvancedNetworkConfig setIcmpFailureDetectorConfig(IcmpFailureDetectorConfig icmpFailureDetectorConfig) {
    this.icmpFailureDetectorConfig = icmpFailureDetectorConfig;
    return this;
  }
  
  public IcmpFailureDetectorConfig getIcmpFailureDetectorConfig() { return this.icmpFailureDetectorConfig; }
  
  public RestServerEndpointConfig getRestEndpointConfig() { return (RestServerEndpointConfig)this.endpointConfigs.get(EndpointQualifier.REST); }
  
  public String toString() { return "AdvancedNetworkConfig{isEnabled=" + this.enabled + ", join=" + this.join + ", memberAddressProvider=" + this.memberAddressProviderConfig + ", endpointConfigs=" + this.endpointConfigs + ", icmpFailureDetectorConfig=" + this.icmpFailureDetectorConfig + '}'; }
  
  private static int countEndpointConfigs(Map<EndpointQualifier, EndpointConfig> endpointConfigs, ProtocolType protocolType) {
    int count = 0;
    for (EndpointQualifier qualifier : endpointConfigs.keySet()) {
      if (qualifier.getType() == protocolType)
        count++; 
    } 
    return count;
  }
}
