package com.hazelcast.config;

import com.hazelcast.nio.serialization.BinaryInterface;
import java.util.Collections;
import java.util.List;
import java.util.Set;
import javax.cache.configuration.CacheEntryListenerConfiguration;
import javax.cache.configuration.Factory;
import javax.cache.expiry.ExpiryPolicy;
import javax.cache.integration.CacheLoader;
import javax.cache.integration.CacheWriter;

@BinaryInterface
public class CacheConfigReadOnly<K, V> extends CacheConfig<K, V> {
  CacheConfigReadOnly(CacheConfig config) { super(config); }
  
  public CacheEvictionConfig getEvictionConfig() {
    CacheEvictionConfig evictionConfig = super.getEvictionConfig();
    if (evictionConfig == null)
      return null; 
    return evictionConfig.getAsReadOnly();
  }
  
  public WanReplicationRef getWanReplicationRef() {
    WanReplicationRef wanReplicationRef = super.getWanReplicationRef();
    if (wanReplicationRef == null)
      return null; 
    return wanReplicationRef.getAsReadOnly();
  }
  
  public String getQuorumName() { return super.getQuorumName(); }
  
  public Iterable<CacheEntryListenerConfiguration<K, V>> getCacheEntryListenerConfigurations() {
    Iterable<CacheEntryListenerConfiguration<K, V>> listenerConfigurations = super.getCacheEntryListenerConfigurations();
    return Collections.unmodifiableSet((Set)listenerConfigurations);
  }
  
  public CacheConfig<K, V> addCacheEntryListenerConfiguration(CacheEntryListenerConfiguration<K, V> cacheEntryListenerConfiguration) { throw throwReadOnly(); }
  
  public CacheConfig<K, V> removeCacheEntryListenerConfiguration(CacheEntryListenerConfiguration<K, V> cacheEntryListenerConfiguration) { throw throwReadOnly(); }
  
  public CacheConfig<K, V> setName(String name) { throw throwReadOnly(); }
  
  public CacheConfig<K, V> setManagerPrefix(String managerPrefix) { throw throwReadOnly(); }
  
  public CacheConfig<K, V> setUriString(String uriString) { throw throwReadOnly(); }
  
  public CacheConfig<K, V> setBackupCount(int backupCount) { throw throwReadOnly(); }
  
  public CacheConfig<K, V> setAsyncBackupCount(int asyncBackupCount) { throw throwReadOnly(); }
  
  public CacheConfig<K, V> setEvictionConfig(EvictionConfig evictionConfig) { throw throwReadOnly(); }
  
  public CacheConfig<K, V> setInMemoryFormat(InMemoryFormat inMemoryFormat) { throw throwReadOnly(); }
  
  public CacheConfig<K, V> setManagementEnabled(boolean enabled) { throw throwReadOnly(); }
  
  public CacheConfiguration<K, V> setStatisticsEnabled(boolean enabled) { throw throwReadOnly(); }
  
  public CacheConfig<K, V> setTypes(Class<K> keyType, Class<V> valueType) { throw throwReadOnly(); }
  
  public CacheConfig<K, V> setStoreByValue(boolean storeByValue) { throw throwReadOnly(); }
  
  public CacheConfig<K, V> setWanReplicationRef(WanReplicationRef wanReplicationRef) { throw throwReadOnly(); }
  
  public CacheConfig<K, V> setQuorumName(String quorumName) { throw throwReadOnly(); }
  
  public CacheConfiguration<K, V> setHotRestartConfig(HotRestartConfig hotRestartConfig) { throw throwReadOnly(); }
  
  public CacheConfig<K, V> setPartitionLostListenerConfigs(List<CachePartitionLostListenerConfig> partitionLostListenerConfigs) { throw throwReadOnly(); }
  
  public void setMergePolicy(String mergePolicy) { throw throwReadOnly(); }
  
  public CacheConfiguration<K, V> setExpiryPolicyFactory(Factory<? extends ExpiryPolicy> expiryPolicyFactory) { throw throwReadOnly(); }
  
  public CacheConfiguration<K, V> setCacheLoaderFactory(Factory<? extends CacheLoader<K, V>> cacheLoaderFactory) { throw throwReadOnly(); }
  
  public CacheConfiguration<K, V> setCacheWriterFactory(Factory<? extends CacheWriter<? super K, ? super V>> cacheWriterFactory) { throw throwReadOnly(); }
  
  public CacheConfiguration<K, V> setWriteThrough(boolean isWriteThrough) { throw throwReadOnly(); }
  
  public CacheConfiguration<K, V> setReadThrough(boolean isReadThrough) { throw throwReadOnly(); }
  
  public void setDisablePerEntryInvalidationEvents(boolean disablePerEntryInvalidationEvents) { throw throwReadOnly(); }
  
  private UnsupportedOperationException throwReadOnly() { throw new UnsupportedOperationException("This config is read-only"); }
}
