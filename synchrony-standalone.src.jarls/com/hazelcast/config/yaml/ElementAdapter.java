package com.hazelcast.config.yaml;

import com.hazelcast.internal.yaml.MutableYamlScalar;
import com.hazelcast.internal.yaml.YamlCollection;
import com.hazelcast.internal.yaml.YamlMapping;
import com.hazelcast.internal.yaml.YamlNode;
import com.hazelcast.internal.yaml.YamlScalar;
import com.hazelcast.internal.yaml.YamlSequence;
import org.w3c.dom.Attr;
import org.w3c.dom.DOMException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.TypeInfo;
import org.w3c.dom.UserDataHandler;

public class ElementAdapter implements Element {
  private final YamlNode yamlNode;
  
  ElementAdapter(YamlNode yamlNode) { this.yamlNode = yamlNode; }
  
  public YamlNode getYamlNode() { return this.yamlNode; }
  
  public String getNodeName() { return this.yamlNode.nodeName(); }
  
  public String getNodeValue() {
    if (this.yamlNode instanceof YamlScalar) {
      Object nodeValue = ((YamlScalar)this.yamlNode).nodeValue();
      return (nodeValue != null) ? nodeValue.toString() : null;
    } 
    return null;
  }
  
  public void setNodeValue(String nodeValue) throws DOMException {
    if (this.yamlNode instanceof MutableYamlScalar) {
      ((MutableYamlScalar)this.yamlNode).setValue(nodeValue);
    } else {
      throw new UnsupportedOperationException();
    } 
  }
  
  public short getNodeType() { return 1; }
  
  public Node getParentNode() { return W3cDomUtil.asW3cNode(this.yamlNode.parent()); }
  
  public NodeList getChildNodes() {
    if (!hasChildNodes())
      return EmptyNodeList.emptyNodeList(); 
    if (this.yamlNode instanceof YamlMapping)
      return new NodeListMappingAdapter((YamlMapping)this.yamlNode); 
    if (this.yamlNode instanceof YamlSequence)
      return new NodeListSequenceAdapter((YamlSequence)this.yamlNode); 
    return new NodeListScalarAdapter((YamlScalar)this.yamlNode);
  }
  
  public Node getFirstChild() { throw new UnsupportedOperationException(); }
  
  public Node getLastChild() { throw new UnsupportedOperationException(); }
  
  public Node getPreviousSibling() { throw new UnsupportedOperationException(); }
  
  public Node getNextSibling() { throw new UnsupportedOperationException(); }
  
  public NamedNodeMap getAttributes() {
    if (this.yamlNode instanceof YamlMapping)
      return new NamedNodeMapAdapter((YamlMapping)this.yamlNode); 
    return EmptyNamedNodeMap.emptyNamedNodeMap();
  }
  
  public Document getOwnerDocument() { throw new UnsupportedOperationException(); }
  
  public Node insertBefore(Node newChild, Node refChild) throws DOMException { throw new UnsupportedOperationException(); }
  
  public Node replaceChild(Node newChild, Node oldChild) throws DOMException { throw new UnsupportedOperationException(); }
  
  public Node removeChild(Node oldChild) throws DOMException { throw new UnsupportedOperationException(); }
  
  public Node appendChild(Node newChild) throws DOMException { throw new UnsupportedOperationException(); }
  
  public boolean hasChildNodes() { return ((this.yamlNode instanceof YamlCollection && ((YamlCollection)this.yamlNode).childCount() > 0) || this.yamlNode instanceof YamlScalar); }
  
  public Node cloneNode(boolean deep) { throw new UnsupportedOperationException(); }
  
  public void normalize() { throw new UnsupportedOperationException(); }
  
  public boolean isSupported(String feature, String version) { throw new UnsupportedOperationException(); }
  
  public String getNamespaceURI() { throw new UnsupportedOperationException(); }
  
  public String getPrefix() { throw new UnsupportedOperationException(); }
  
  public void setPrefix(String prefix) throws DOMException { throw new UnsupportedOperationException(); }
  
  public String getLocalName() { return getNodeName(); }
  
  public boolean hasAttributes() { throw new UnsupportedOperationException(); }
  
  public String getBaseURI() { throw new UnsupportedOperationException(); }
  
  public short compareDocumentPosition(Node other) throws DOMException { throw new UnsupportedOperationException(); }
  
  public String getTextContent() { return getNodeValue(); }
  
  public void setTextContent(String textContent) throws DOMException { throw new UnsupportedOperationException(); }
  
  public boolean isSameNode(Node other) { throw new UnsupportedOperationException(); }
  
  public String lookupPrefix(String namespaceURI) { throw new UnsupportedOperationException(); }
  
  public boolean isDefaultNamespace(String namespaceURI) { throw new UnsupportedOperationException(); }
  
  public String lookupNamespaceURI(String prefix) { throw new UnsupportedOperationException(); }
  
  public boolean isEqualNode(Node arg) { throw new UnsupportedOperationException(); }
  
  public Object getFeature(String feature, String version) { throw new UnsupportedOperationException(); }
  
  public Object setUserData(String key, Object data, UserDataHandler handler) { throw new UnsupportedOperationException(); }
  
  public Object getUserData(String key) { throw new UnsupportedOperationException(); }
  
  public String getTagName() { return getNodeName(); }
  
  public String getAttribute(String name) {
    if (this.yamlNode instanceof YamlMapping) {
      YamlScalar yamlScalar = ((YamlMapping)this.yamlNode).childAsScalar(name);
      if (yamlScalar != null)
        return yamlScalar.nodeValue().toString(); 
    } 
    return "";
  }
  
  public void setAttribute(String name, String value) throws DOMException { throw new UnsupportedOperationException(); }
  
  public void removeAttribute(String name) throws DOMException { throw new UnsupportedOperationException(); }
  
  public Attr getAttributeNode(String name) { throw new UnsupportedOperationException(); }
  
  public Attr setAttributeNode(Attr newAttr) throws DOMException { throw new UnsupportedOperationException(); }
  
  public Attr removeAttributeNode(Attr oldAttr) throws DOMException { throw new UnsupportedOperationException(); }
  
  public NodeList getElementsByTagName(String name) {
    Node element = getAttributes().getNamedItem(name);
    return W3cDomUtil.asNodeList(element);
  }
  
  public String getAttributeNS(String namespaceURI, String localName) throws DOMException { throw new UnsupportedOperationException(); }
  
  public void setAttributeNS(String namespaceURI, String qualifiedName, String value) throws DOMException { throw new UnsupportedOperationException(); }
  
  public void removeAttributeNS(String namespaceURI, String localName) throws DOMException { throw new UnsupportedOperationException(); }
  
  public Attr getAttributeNodeNS(String namespaceURI, String localName) throws DOMException { throw new UnsupportedOperationException(); }
  
  public Attr setAttributeNodeNS(Attr newAttr) throws DOMException { throw new UnsupportedOperationException(); }
  
  public NodeList getElementsByTagNameNS(String namespaceURI, String localName) throws DOMException { throw new UnsupportedOperationException(); }
  
  public boolean hasAttribute(String name) { return (getAttributes().getNamedItem(name) != null); }
  
  public boolean hasAttributeNS(String namespaceURI, String localName) { throw new UnsupportedOperationException(); }
  
  public TypeInfo getSchemaTypeInfo() { throw new UnsupportedOperationException(); }
  
  public void setIdAttribute(String name, boolean isId) throws DOMException { throw new UnsupportedOperationException(); }
  
  public void setIdAttributeNS(String namespaceURI, String localName, boolean isId) throws DOMException { throw new UnsupportedOperationException(); }
  
  public void setIdAttributeNode(Attr idAttr, boolean isId) throws DOMException { throw new UnsupportedOperationException(); }
}
