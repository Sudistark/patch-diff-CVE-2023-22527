package com.hazelcast.config;

import com.hazelcast.config.yaml.W3cDomUtil;
import com.hazelcast.config.yaml.YamlDomChecker;
import com.hazelcast.internal.yaml.YamlLoader;
import com.hazelcast.internal.yaml.YamlMapping;
import com.hazelcast.internal.yaml.YamlUtil;
import com.hazelcast.nio.IOUtil;
import com.hazelcast.util.ExceptionUtil;
import com.hazelcast.util.Preconditions;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.Properties;
import org.w3c.dom.Node;

public class YamlConfigBuilder extends AbstractYamlConfigBuilder implements ConfigBuilder {
  private final InputStream in;
  
  private File configurationFile;
  
  private URL configurationUrl;
  
  public YamlConfigBuilder(String yamlFileName) throws FileNotFoundException {
    this(new FileInputStream(yamlFileName));
    this.configurationFile = new File(yamlFileName);
  }
  
  public YamlConfigBuilder(InputStream inputStream) {
    Preconditions.checkTrue((inputStream != null), "inputStream can't be null");
    this.in = inputStream;
  }
  
  public YamlConfigBuilder(URL url) throws IOException {
    Preconditions.checkNotNull(url, "URL is null!");
    this.in = url.openStream();
    this.configurationUrl = url;
  }
  
  public YamlConfigBuilder() { this((YamlConfigLocator)null); }
  
  public YamlConfigBuilder(YamlConfigLocator locator) {
    if (locator == null) {
      locator = new YamlConfigLocator(true);
      locator.locateEverywhere();
    } 
    this.in = locator.getIn();
    this.configurationFile = locator.getConfigurationFile();
    this.configurationUrl = locator.getConfigurationUrl();
  }
  
  public Config build() { return build(new Config()); }
  
  Config build(Config config) {
    YamlUtil.ensureRunningOnJava8OrHigher();
    config.setConfigurationFile(this.configurationFile);
    config.setConfigurationUrl(this.configurationUrl);
    try {
      parseAndBuildConfig(config);
    } catch (Exception e) {
      throw ExceptionUtil.rethrow(e);
    } finally {
      IOUtil.closeResource(this.in);
    } 
    return config;
  }
  
  private void parseAndBuildConfig(Config config) throws Exception {
    YamlMapping yamlRootNode;
    try {
      yamlRootNode = (YamlMapping)YamlLoader.load(this.in);
    } catch (Exception ex) {
      throw new InvalidConfigurationException("Invalid YAML configuration", ex);
    } 
    YamlMapping yamlMapping = yamlRootNode.childAsMapping(ConfigSections.HAZELCAST.name);
    if (yamlMapping == null)
      throw new InvalidConfigurationException("No mapping with hazelcast key is found in the provided configuration"); 
    YamlDomChecker.check(yamlMapping);
    Node w3cRootNode = W3cDomUtil.asW3cNode(yamlMapping);
    replaceVariables(w3cRootNode);
    importDocuments(yamlMapping);
    (new YamlMemberDomConfigProcessor(true, config)).buildConfig(w3cRootNode);
  }
  
  public YamlConfigBuilder setProperties(Properties properties) {
    setPropertiesInternal(properties);
    return this;
  }
  
  protected String getConfigRoot() { return ConfigSections.HAZELCAST.name; }
}
