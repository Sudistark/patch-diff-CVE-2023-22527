package com.hazelcast.config;

import com.hazelcast.map.eviction.MapEvictionPolicy;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class MapConfigReadOnly extends MapConfig {
  MapConfigReadOnly(MapConfig config) { super(config); }
  
  public MaxSizeConfig getMaxSizeConfig() {
    MaxSizeConfig maxSizeConfig = super.getMaxSizeConfig();
    if (maxSizeConfig == null)
      return null; 
    return maxSizeConfig.getAsReadOnly();
  }
  
  public WanReplicationRef getWanReplicationRef() {
    WanReplicationRef wanReplicationRef = super.getWanReplicationRef();
    if (wanReplicationRef == null)
      return null; 
    return wanReplicationRef.getAsReadOnly();
  }
  
  public List<EntryListenerConfig> getEntryListenerConfigs() {
    List<EntryListenerConfig> listenerConfigs = super.getEntryListenerConfigs();
    List<EntryListenerConfig> readOnlyListenerConfigs = new ArrayList<EntryListenerConfig>(listenerConfigs.size());
    for (EntryListenerConfig listenerConfig : listenerConfigs)
      readOnlyListenerConfigs.add(listenerConfig.getAsReadOnly()); 
    return Collections.unmodifiableList(readOnlyListenerConfigs);
  }
  
  public List<MapPartitionLostListenerConfig> getPartitionLostListenerConfigs() {
    List<MapPartitionLostListenerConfig> listenerConfigs = super.getPartitionLostListenerConfigs();
    List<MapPartitionLostListenerConfig> readOnlyListenerConfigs = new ArrayList<MapPartitionLostListenerConfig>(listenerConfigs.size());
    for (MapPartitionLostListenerConfig listenerConfig : listenerConfigs)
      readOnlyListenerConfigs.add(listenerConfig.getAsReadOnly()); 
    return Collections.unmodifiableList(readOnlyListenerConfigs);
  }
  
  public List<MapIndexConfig> getMapIndexConfigs() {
    List<MapIndexConfig> mapIndexConfigs = super.getMapIndexConfigs();
    List<MapIndexConfig> readOnlyMapIndexConfigs = new ArrayList<MapIndexConfig>(mapIndexConfigs.size());
    for (MapIndexConfig mapIndexConfig : mapIndexConfigs)
      readOnlyMapIndexConfigs.add(mapIndexConfig.getAsReadOnly()); 
    return Collections.unmodifiableList(readOnlyMapIndexConfigs);
  }
  
  public PartitioningStrategyConfig getPartitioningStrategyConfig() {
    PartitioningStrategyConfig partitioningStrategyConfig = super.getPartitioningStrategyConfig();
    if (partitioningStrategyConfig == null)
      return null; 
    return partitioningStrategyConfig.getAsReadOnly();
  }
  
  public MapStoreConfig getMapStoreConfig() {
    MapStoreConfig mapStoreConfig = super.getMapStoreConfig();
    if (mapStoreConfig == null)
      return null; 
    return mapStoreConfig.getAsReadOnly();
  }
  
  public NearCacheConfig getNearCacheConfig() {
    NearCacheConfig nearCacheConfig = super.getNearCacheConfig();
    if (nearCacheConfig == null)
      return null; 
    return nearCacheConfig.getAsReadOnly();
  }
  
  public List<QueryCacheConfig> getQueryCacheConfigs() {
    List<QueryCacheConfig> queryCacheConfigs = super.getQueryCacheConfigs();
    List<QueryCacheConfig> readOnlyOnes = new ArrayList<QueryCacheConfig>(queryCacheConfigs.size());
    for (QueryCacheConfig config : queryCacheConfigs)
      readOnlyOnes.add(config.getAsReadOnly()); 
    return Collections.unmodifiableList(readOnlyOnes);
  }
  
  public MapConfig setHotRestartConfig(HotRestartConfig hotRestartConfig) { throw throwReadOnly(); }
  
  public MapConfig setName(String name) { throw throwReadOnly(); }
  
  public MapConfig setInMemoryFormat(InMemoryFormat inMemoryFormat) { throw throwReadOnly(); }
  
  public MapConfig setBackupCount(int backupCount) { throw throwReadOnly(); }
  
  public MapConfig setAsyncBackupCount(int asyncBackupCount) { throw throwReadOnly(); }
  
  public MapConfig setEvictionPercentage(int evictionPercentage) { throw throwReadOnly(); }
  
  public MapConfig setMinEvictionCheckMillis(long checkIfEvictableAfterMillis) { throw throwReadOnly(); }
  
  public MapConfig setTimeToLiveSeconds(int timeToLiveSeconds) { throw throwReadOnly(); }
  
  public MapConfig setMaxIdleSeconds(int maxIdleSeconds) { throw throwReadOnly(); }
  
  public MapConfig setMaxSizeConfig(MaxSizeConfig maxSizeConfig) { throw throwReadOnly(); }
  
  public MapConfig setEvictionPolicy(EvictionPolicy evictionPolicy) { throw throwReadOnly(); }
  
  public MapConfig setMapEvictionPolicy(MapEvictionPolicy mapEvictionPolicy) { throw throwReadOnly(); }
  
  public MapConfig setMapStoreConfig(MapStoreConfig mapStoreConfig) { throw throwReadOnly(); }
  
  public MapConfig setNearCacheConfig(NearCacheConfig nearCacheConfig) { throw throwReadOnly(); }
  
  public MapConfig setMergePolicy(String mergePolicy) { throw throwReadOnly(); }
  
  public MapConfig setMergePolicyConfig(MergePolicyConfig mergePolicyConfig) { throw throwReadOnly(); }
  
  public MapConfig setStatisticsEnabled(boolean statisticsEnabled) { throw throwReadOnly(); }
  
  public MapConfig setReadBackupData(boolean readBackupData) { throw throwReadOnly(); }
  
  public MapConfig setWanReplicationRef(WanReplicationRef wanReplicationRef) { throw throwReadOnly(); }
  
  public MapConfig addEntryListenerConfig(EntryListenerConfig listenerConfig) { throw throwReadOnly(); }
  
  public MapConfig setEntryListenerConfigs(List<EntryListenerConfig> listenerConfigs) { throw throwReadOnly(); }
  
  public MapConfig addMapIndexConfig(MapIndexConfig mapIndexConfig) { throw throwReadOnly(); }
  
  public MapConfig setMapIndexConfigs(List<MapIndexConfig> mapIndexConfigs) { throw throwReadOnly(); }
  
  public MapConfig setPartitioningStrategyConfig(PartitioningStrategyConfig partitioningStrategyConfig) { throw throwReadOnly(); }
  
  public MapConfig setOptimizeQueries(boolean optimizeQueries) { throw throwReadOnly(); }
  
  public MapConfig setPartitionLostListenerConfigs(List<MapPartitionLostListenerConfig> listenerConfigs) { throw throwReadOnly(); }
  
  public MapConfig setMapAttributeConfigs(List<MapAttributeConfig> mapAttributeConfigs) { throw throwReadOnly(); }
  
  public void setQueryCacheConfigs(List<QueryCacheConfig> queryCacheConfigs) { throw throwReadOnly(); }
  
  public MapConfig setCacheDeserializedValues(CacheDeserializedValues cacheDeserializedValues) { throw throwReadOnly(); }
  
  public MapConfig setQuorumName(String quorumName) { throw throwReadOnly(); }
  
  private UnsupportedOperationException throwReadOnly() { throw new UnsupportedOperationException("This config is read-only"); }
}
