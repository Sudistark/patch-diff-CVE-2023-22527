package com.hazelcast.config;

import com.hazelcast.instance.EndpointQualifier;
import com.hazelcast.instance.ProtocolType;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.Set;

public class RestServerEndpointConfig extends ServerSocketEndpointConfig {
  private final Set<RestEndpointGroup> enabledGroups = Collections.synchronizedSet(EnumSet.noneOf(RestEndpointGroup.class));
  
  public RestServerEndpointConfig() {
    for (RestEndpointGroup eg : RestEndpointGroup.values()) {
      if (eg.isEnabledByDefault())
        this.enabledGroups.add(eg); 
    } 
  }
  
  public final ProtocolType getProtocolType() { return ProtocolType.REST; }
  
  public EndpointQualifier getQualifier() { return EndpointQualifier.REST; }
  
  public RestServerEndpointConfig enableAllGroups() { return enableGroups(RestEndpointGroup.values()); }
  
  public RestServerEndpointConfig enableGroups(RestEndpointGroup... endpointGroups) {
    if (endpointGroups != null)
      this.enabledGroups.addAll(Arrays.asList(endpointGroups)); 
    return this;
  }
  
  public RestServerEndpointConfig disableAllGroups() {
    this.enabledGroups.clear();
    return this;
  }
  
  public RestServerEndpointConfig disableGroups(RestEndpointGroup... endpointGroups) {
    if (endpointGroups != null)
      this.enabledGroups.removeAll(Arrays.asList(endpointGroups)); 
    return this;
  }
  
  public boolean isEnabledAndNotEmpty() { return !this.enabledGroups.isEmpty(); }
  
  public Set<RestEndpointGroup> getEnabledGroups() { return new HashSet(this.enabledGroups); }
  
  public boolean isGroupEnabled(RestEndpointGroup group) { return this.enabledGroups.contains(group); }
  
  public void setEnabledGroups(Collection<RestEndpointGroup> groups) {
    this.enabledGroups.clear();
    if (groups != null)
      this.enabledGroups.addAll(groups); 
  }
  
  public RestServerEndpointConfig setPublicAddress(String publicAddress) {
    super.setPublicAddress(publicAddress);
    return this;
  }
  
  public RestServerEndpointConfig setPort(int port) {
    super.setPort(port);
    return this;
  }
  
  public RestServerEndpointConfig setPortAutoIncrement(boolean portAutoIncrement) {
    super.setPortAutoIncrement(portAutoIncrement);
    return this;
  }
  
  public RestServerEndpointConfig setReuseAddress(boolean reuseAddress) {
    super.setReuseAddress(reuseAddress);
    return this;
  }
  
  public RestServerEndpointConfig setName(String name) {
    super.setName(name);
    return this;
  }
  
  public RestServerEndpointConfig setOutboundPortDefinitions(Collection<String> outboundPortDefs) {
    super.setOutboundPortDefinitions(outboundPortDefs);
    return this;
  }
  
  public RestServerEndpointConfig setOutboundPorts(Collection<Integer> outboundPorts) {
    super.setOutboundPorts(outboundPorts);
    return this;
  }
  
  public RestServerEndpointConfig setInterfaces(InterfacesConfig interfaces) {
    super.setInterfaces(interfaces);
    return this;
  }
  
  public RestServerEndpointConfig setSocketBufferDirect(boolean socketBufferDirect) {
    super.setSocketBufferDirect(socketBufferDirect);
    return this;
  }
  
  public RestServerEndpointConfig setSocketKeepAlive(boolean socketKeepAlive) {
    super.setSocketKeepAlive(socketKeepAlive);
    return this;
  }
  
  public RestServerEndpointConfig setSocketTcpNoDelay(boolean socketTcpNoDelay) {
    super.setSocketTcpNoDelay(socketTcpNoDelay);
    return this;
  }
  
  public RestServerEndpointConfig setSocketSendBufferSizeKb(int socketSendBufferSizeKb) {
    super.setSocketSendBufferSizeKb(socketSendBufferSizeKb);
    return this;
  }
  
  public RestServerEndpointConfig setSocketRcvBufferSizeKb(int socketRcvBufferSizeKb) {
    super.setSocketRcvBufferSizeKb(socketRcvBufferSizeKb);
    return this;
  }
  
  public RestServerEndpointConfig setSocketLingerSeconds(int socketLingerSeconds) {
    super.setSocketLingerSeconds(socketLingerSeconds);
    return this;
  }
  
  public RestServerEndpointConfig setSocketConnectTimeoutSeconds(int socketConnectTimeoutSeconds) {
    super.setSocketConnectTimeoutSeconds(socketConnectTimeoutSeconds);
    return this;
  }
  
  public RestServerEndpointConfig setSocketInterceptorConfig(SocketInterceptorConfig socketInterceptorConfig) {
    super.setSocketInterceptorConfig(socketInterceptorConfig);
    return this;
  }
  
  public RestServerEndpointConfig setSSLConfig(SSLConfig sslConfig) {
    super.setSSLConfig(sslConfig);
    return this;
  }
  
  public RestServerEndpointConfig setSymmetricEncryptionConfig(SymmetricEncryptionConfig symmetricEncryptionConfig) {
    super.setSymmetricEncryptionConfig(symmetricEncryptionConfig);
    return this;
  }
  
  public RestServerEndpointConfig addOutboundPortDefinition(String portDef) {
    super.addOutboundPortDefinition(portDef);
    return this;
  }
  
  public RestServerEndpointConfig addOutboundPort(int port) {
    super.addOutboundPort(port);
    return this;
  }
  
  public String toString() { return "RestServerEndpointConfig{enabledGroups=" + this.enabledGroups + "}"; }
}
