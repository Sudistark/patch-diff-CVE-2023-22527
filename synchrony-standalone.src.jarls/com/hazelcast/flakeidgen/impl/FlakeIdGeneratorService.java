package com.hazelcast.flakeidgen.impl;

import com.hazelcast.core.DistributedObject;
import com.hazelcast.monitor.LocalFlakeIdGeneratorStats;
import com.hazelcast.monitor.impl.LocalFlakeIdGeneratorStatsImpl;
import com.hazelcast.spi.ManagedService;
import com.hazelcast.spi.NodeEngine;
import com.hazelcast.spi.RemoteService;
import com.hazelcast.spi.StatisticsAwareService;
import com.hazelcast.util.ConcurrencyUtil;
import com.hazelcast.util.ConstructorFunction;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.ConcurrentHashMap;

public class FlakeIdGeneratorService extends Object implements ManagedService, RemoteService, StatisticsAwareService<LocalFlakeIdGeneratorStats> {
  public static final String SERVICE_NAME = "hz:impl:flakeIdGeneratorService";
  
  private NodeEngine nodeEngine;
  
  private final ConcurrentHashMap<String, LocalFlakeIdGeneratorStatsImpl> statsMap;
  
  private final ConstructorFunction<String, LocalFlakeIdGeneratorStatsImpl> localFlakeIdStatsConstructorFunction;
  
  public FlakeIdGeneratorService(NodeEngine nodeEngine) {
    this.statsMap = new ConcurrentHashMap();
    this.localFlakeIdStatsConstructorFunction = new Object(this);
    this.nodeEngine = nodeEngine;
  }
  
  public void init(NodeEngine nodeEngine, Properties properties) { this.nodeEngine = nodeEngine; }
  
  public void reset() { this.statsMap.clear(); }
  
  public void shutdown(boolean terminate) { reset(); }
  
  public DistributedObject createDistributedObject(String name) { return new FlakeIdGeneratorProxy(name, this.nodeEngine, this); }
  
  public void destroyDistributedObject(String name) { this.statsMap.remove(name); }
  
  public Map<String, LocalFlakeIdGeneratorStats> getStats() { return new HashMap(this.statsMap); }
  
  public void updateStatsForBatch(String name, int batchSize) { getLocalFlakeIdStats(name).update(batchSize); }
  
  private LocalFlakeIdGeneratorStatsImpl getLocalFlakeIdStats(String name) { return (LocalFlakeIdGeneratorStatsImpl)ConcurrencyUtil.getOrPutIfAbsent(this.statsMap, name, this.localFlakeIdStatsConstructorFunction); }
}
