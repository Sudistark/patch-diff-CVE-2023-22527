package com.hazelcast.aggregation.impl;

import com.hazelcast.aggregation.Aggregator;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import com.hazelcast.util.MapUtil;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import java.io.IOException;
import java.util.Set;

@SuppressFBWarnings({"SE_BAD_FIELD"})
public final class DistinctValuesAggregator<I, R> extends AbstractAggregator<I, R, Set<R>> implements IdentifiedDataSerializable {
  private CanonicalizingHashSet<R> values = new CanonicalizingHashSet();
  
  public DistinctValuesAggregator(String attributePath) { super(attributePath); }
  
  public void accumulateExtracted(I entry, R value) { this.values.addInternal(value); }
  
  public void combine(Aggregator aggregator) {
    DistinctValuesAggregator distinctValuesAggregator = (DistinctValuesAggregator)aggregator;
    this.values.addAllInternal(distinctValuesAggregator.values);
  }
  
  public Set<R> aggregate() { return this.values; }
  
  public int getFactoryId() { return AggregatorDataSerializerHook.F_ID; }
  
  public int getId() { return 5; }
  
  public void writeData(ObjectDataOutput out) throws IOException {
    out.writeUTF(this.attributePath);
    out.writeInt(this.values.size());
    for (Object value : this.values)
      out.writeObject(value); 
  }
  
  public void readData(ObjectDataInput in) throws IOException {
    this.attributePath = in.readUTF();
    int count = in.readInt();
    this.values = new CanonicalizingHashSet(MapUtil.calculateInitialCapacity(count));
    for (int i = 0; i < count; i++) {
      R value = (R)in.readObject();
      this.values.addInternal(value);
    } 
  }
  
  public DistinctValuesAggregator() {}
}
