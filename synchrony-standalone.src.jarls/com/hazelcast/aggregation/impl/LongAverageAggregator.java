package com.hazelcast.aggregation.impl;

import com.hazelcast.aggregation.Aggregator;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import com.hazelcast.query.impl.Numbers;
import java.io.IOException;

public final class LongAverageAggregator<I> extends AbstractAggregator<I, Number, Double> implements IdentifiedDataSerializable {
  private long sum;
  
  private long count;
  
  public LongAverageAggregator() {}
  
  public LongAverageAggregator(String attributePath) { super(attributePath); }
  
  public void accumulateExtracted(I entry, Number value) {
    this.count++;
    this.sum += Numbers.asLongExactly(value);
  }
  
  public void combine(Aggregator aggregator) {
    LongAverageAggregator longAverageAggregator = (LongAverageAggregator)aggregator;
    this.sum += longAverageAggregator.sum;
    this.count += longAverageAggregator.count;
  }
  
  public Double aggregate() {
    if (this.count == 0L)
      return null; 
    return Double.valueOf(this.sum / this.count);
  }
  
  public int getFactoryId() { return AggregatorDataSerializerHook.F_ID; }
  
  public int getId() { return 12; }
  
  public void writeData(ObjectDataOutput out) throws IOException {
    out.writeUTF(this.attributePath);
    out.writeLong(this.sum);
    out.writeLong(this.count);
  }
  
  public void readData(ObjectDataInput in) throws IOException {
    this.attributePath = in.readUTF();
    this.sum = in.readLong();
    this.count = in.readLong();
  }
}
