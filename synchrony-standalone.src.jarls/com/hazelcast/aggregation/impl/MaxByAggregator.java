package com.hazelcast.aggregation.impl;

import com.hazelcast.aggregation.Aggregator;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import com.hazelcast.query.impl.Comparables;
import java.io.IOException;

public final class MaxByAggregator<I> extends AbstractAggregator<I, Comparable, I> implements IdentifiedDataSerializable {
  private Comparable maxValue;
  
  private I maxEntry;
  
  public MaxByAggregator() {}
  
  public MaxByAggregator(String attributePath) { super(attributePath); }
  
  public void accumulateExtracted(I entry, Comparable value) {
    if (isCurrentlyLessThan(value)) {
      this.maxValue = value;
      this.maxEntry = entry;
    } 
  }
  
  private boolean isCurrentlyLessThan(Comparable otherValue) {
    if (otherValue == null)
      return false; 
    return (this.maxValue == null || Comparables.compare(this.maxValue, otherValue) < 0);
  }
  
  public void combine(Aggregator aggregator) {
    MaxByAggregator<I> maxAggregator = (MaxByAggregator)aggregator;
    Comparable valueFromOtherAggregator = maxAggregator.maxValue;
    if (isCurrentlyLessThan(valueFromOtherAggregator)) {
      this.maxValue = valueFromOtherAggregator;
      this.maxEntry = maxAggregator.maxEntry;
    } 
  }
  
  public I aggregate() { return (I)this.maxEntry; }
  
  public int getFactoryId() { return AggregatorDataSerializerHook.F_ID; }
  
  public int getId() { return 17; }
  
  public void writeData(ObjectDataOutput out) throws IOException {
    out.writeUTF(this.attributePath);
    out.writeObject(this.maxValue);
    out.writeObject(this.maxEntry);
  }
  
  public void readData(ObjectDataInput in) throws IOException {
    this.attributePath = in.readUTF();
    this.maxValue = (Comparable)in.readObject();
    this.maxEntry = in.readObject();
  }
}
