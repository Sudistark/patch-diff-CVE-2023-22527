package com.hazelcast.client.impl;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.DefaultMessageTaskFactoryProvider;
import com.hazelcast.client.impl.protocol.MessageTaskFactory;
import com.hazelcast.client.impl.protocol.MessageTaskFactoryProvider;
import com.hazelcast.client.impl.protocol.task.MessageTask;
import com.hazelcast.client.impl.protocol.task.NoSuchMessageTask;
import com.hazelcast.instance.Node;
import com.hazelcast.nio.Connection;
import com.hazelcast.spi.NodeEngine;
import com.hazelcast.spi.impl.NodeEngineImpl;
import com.hazelcast.util.ExceptionUtil;
import com.hazelcast.util.ServiceLoader;
import java.lang.reflect.Constructor;
import java.util.Iterator;

public class CompositeMessageTaskFactory implements MessageTaskFactory {
  private static final String FACTORY_ID = "com.hazelcast.client.impl.protocol.MessageTaskFactoryProvider";
  
  private final Node node;
  
  private final NodeEngine nodeEngine;
  
  private final MessageTaskFactory[] factories;
  
  public CompositeMessageTaskFactory(NodeEngine nodeEngine) {
    this.factories = new MessageTaskFactory[32767];
    this.nodeEngine = nodeEngine;
    this.node = ((NodeEngineImpl)nodeEngine).getNode();
    loadProvider(new DefaultMessageTaskFactoryProvider(this.nodeEngine));
    loadServices();
  }
  
  private void loadProvider(MessageTaskFactoryProvider provider) {
    MessageTaskFactory[] providerFactories = provider.getFactories();
    for (int idx = 0; idx < providerFactories.length; idx++) {
      if (providerFactories[idx] != null)
        this.factories[idx] = providerFactories[idx]; 
    } 
  }
  
  private void loadServices() {
    try {
      ClassLoader classLoader = this.node.getConfigClassLoader();
      Iterator<Class<MessageTaskFactoryProvider>> iter = ServiceLoader.classIterator(MessageTaskFactoryProvider.class, "com.hazelcast.client.impl.protocol.MessageTaskFactoryProvider", classLoader);
      while (iter.hasNext()) {
        Class<MessageTaskFactoryProvider> clazz = (Class)iter.next();
        Constructor<MessageTaskFactoryProvider> constructor = clazz.getDeclaredConstructor(new Class[] { NodeEngine.class });
        MessageTaskFactoryProvider messageTaskProvider = (MessageTaskFactoryProvider)constructor.newInstance(new Object[] { this.nodeEngine });
        loadProvider(messageTaskProvider);
      } 
    } catch (Throwable e) {
      throw ExceptionUtil.rethrow(e);
    } 
  }
  
  public MessageTask create(ClientMessage clientMessage, Connection connection) {
    try {
      MessageTaskFactory factory = this.factories[clientMessage.getMessageType()];
      if (factory != null)
        return factory.create(clientMessage, connection); 
    } catch (Exception e) {
      ExceptionUtil.rethrow(e);
    } 
    return new NoSuchMessageTask(clientMessage, this.node, connection);
  }
}
