package com.hazelcast.client.impl.protocol.util;

import com.hazelcast.internal.memory.GlobalMemoryAccessorRegistry;
import com.hazelcast.nio.Bits;
import com.hazelcast.util.collection.ArrayUtils;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressFBWarnings({"EI_EXPOSE_REP", "EI_EXPOSE_REP2"})
public class UnsafeBuffer implements ClientProtocolBuffer {
  private static final String DISABLE_BOUNDS_CHECKS_PROP_NAME = "hazelcast.disable.bounds.checks";
  
  private static final boolean SHOULD_BOUNDS_CHECK = !Boolean.getBoolean("hazelcast.disable.bounds.checks");
  
  private static final ByteOrder NATIVE_BYTE_ORDER = ByteOrder.nativeOrder();
  
  private static final ByteOrder PROTOCOL_BYTE_ORDER = ByteOrder.LITTLE_ENDIAN;
  
  private static final long ARRAY_BASE_OFFSET = GlobalMemoryAccessorRegistry.MEM.arrayBaseOffset(byte[].class);
  
  private byte[] byteArray;
  
  private long addressOffset;
  
  private int capacity;
  
  public UnsafeBuffer(byte[] buffer) { wrap(buffer); }
  
  public void wrap(byte[] buffer) {
    this.addressOffset = ARRAY_BASE_OFFSET;
    this.capacity = buffer.length;
    this.byteArray = buffer;
  }
  
  public byte[] byteArray() { return this.byteArray; }
  
  public int capacity() { return this.capacity; }
  
  public long getLong(int index) {
    boundsCheck(index, 8);
    long bits = GlobalMemoryAccessorRegistry.MEM.getLong(this.byteArray, this.addressOffset + index);
    if (NATIVE_BYTE_ORDER != PROTOCOL_BYTE_ORDER)
      bits = Long.reverseBytes(bits); 
    return bits;
  }
  
  public void putLong(int index, long value) {
    boundsCheck(index, 8);
    long bits = value;
    if (NATIVE_BYTE_ORDER != PROTOCOL_BYTE_ORDER)
      bits = Long.reverseBytes(bits); 
    GlobalMemoryAccessorRegistry.MEM.putLong(this.byteArray, this.addressOffset + index, bits);
  }
  
  public int getInt(int index) {
    boundsCheck(index, 4);
    int bits = GlobalMemoryAccessorRegistry.MEM.getInt(this.byteArray, this.addressOffset + index);
    if (NATIVE_BYTE_ORDER != PROTOCOL_BYTE_ORDER)
      bits = Integer.reverseBytes(bits); 
    return bits;
  }
  
  public void putInt(int index, int value) {
    boundsCheck(index, 4);
    int bits = value;
    if (NATIVE_BYTE_ORDER != PROTOCOL_BYTE_ORDER)
      bits = Integer.reverseBytes(bits); 
    GlobalMemoryAccessorRegistry.MEM.putInt(this.byteArray, this.addressOffset + index, bits);
  }
  
  public short getShort(int index) {
    boundsCheck(index, 2);
    short bits = GlobalMemoryAccessorRegistry.MEM.getShort(this.byteArray, this.addressOffset + index);
    if (NATIVE_BYTE_ORDER != PROTOCOL_BYTE_ORDER)
      bits = Short.reverseBytes(bits); 
    return bits;
  }
  
  public void putShort(int index, short value) {
    boundsCheck(index, 2);
    short bits = value;
    if (NATIVE_BYTE_ORDER != PROTOCOL_BYTE_ORDER)
      bits = Short.reverseBytes(bits); 
    GlobalMemoryAccessorRegistry.MEM.putShort(this.byteArray, this.addressOffset + index, bits);
  }
  
  public byte getByte(int index) {
    boundsCheck(index, 1);
    return GlobalMemoryAccessorRegistry.MEM.getByte(this.byteArray, this.addressOffset + index);
  }
  
  public void putByte(int index, byte value) {
    boundsCheck(index, 1);
    GlobalMemoryAccessorRegistry.MEM.putByte(this.byteArray, this.addressOffset + index, value);
  }
  
  public void getBytes(int index, byte[] dst) { getBytes(index, dst, 0, dst.length); }
  
  public void getBytes(int index, byte[] dst, int offset, int length) {
    boundsCheck(index, length);
    boundsCheck(dst, offset, length);
    GlobalMemoryAccessorRegistry.MEM.copyMemory(this.byteArray, this.addressOffset + index, dst, ARRAY_BASE_OFFSET + offset, length);
  }
  
  public void putBytes(int index, byte[] src) { putBytes(index, src, 0, src.length); }
  
  public void putBytes(int index, byte[] src, int offset, int length) {
    boundsCheck(index, length);
    boundsCheck(src, offset, length);
    GlobalMemoryAccessorRegistry.MEM.copyMemory(src, ARRAY_BASE_OFFSET + offset, this.byteArray, this.addressOffset + index, length);
  }
  
  public void putBytes(int index, ByteBuffer src, int length) {
    if (src.isDirect()) {
      src.get(this.byteArray, index, length);
    } else {
      putBytes(index, src.array(), src.position(), length);
      src.position(src.position() + length);
    } 
  }
  
  public String getStringUtf8(int offset, int length) {
    byte[] stringInBytes = new byte[length];
    getBytes(offset + 4, stringInBytes);
    return new String(stringInBytes, Bits.UTF_8);
  }
  
  public int putStringUtf8(int index, String value) { return putStringUtf8(index, value, 2147483647); }
  
  public int putStringUtf8(int index, String value, int maxEncodedSize) {
    byte[] bytes = value.getBytes(Bits.UTF_8);
    if (bytes.length > maxEncodedSize)
      throw new IllegalArgumentException("Encoded string larger than maximum size: " + maxEncodedSize); 
    putInt(index, bytes.length);
    putBytes(index + 4, bytes);
    return 4 + bytes.length;
  }
  
  private void boundsCheck(int index, int length) {
    if (SHOULD_BOUNDS_CHECK)
      ArrayUtils.boundsCheck(this.capacity, index, length); 
  }
  
  private static void boundsCheck(byte[] buffer, int index, int length) {
    if (SHOULD_BOUNDS_CHECK)
      ArrayUtils.boundsCheck(buffer.length, index, length); 
  }
}
