package com.hazelcast.client.impl.protocol.util;

import com.hazelcast.nio.Bits;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

public class SafeBuffer implements ClientProtocolBuffer {
  private ByteBuffer byteBuffer;
  
  public SafeBuffer(byte[] buffer) { wrap(buffer); }
  
  public void putLong(int index, long value) { this.byteBuffer.putLong(index, value); }
  
  public void putInt(int index, int value) { this.byteBuffer.putInt(index, value); }
  
  public void putShort(int index, short value) { this.byteBuffer.putShort(index, value); }
  
  public void putByte(int index, byte value) { this.byteBuffer.put(index, value); }
  
  public void putBytes(int index, byte[] src) { putBytes(index, src, 0, src.length); }
  
  public void putBytes(int index, byte[] src, int offset, int length) {
    this.byteBuffer.position(index);
    this.byteBuffer.put(src, offset, length);
  }
  
  public void putBytes(int index, ByteBuffer src, int length) {
    this.byteBuffer.position(index);
    if (src.isDirect()) {
      int oldLimit = src.limit();
      src.limit(src.position() + length);
      this.byteBuffer.put(src);
      src.limit(oldLimit);
    } else {
      this.byteBuffer.put(src.array(), src.position(), length);
      src.position(src.position() + length);
    } 
  }
  
  public int putStringUtf8(int index, String value) { return putStringUtf8(index, value, 2147483647); }
  
  public int putStringUtf8(int index, String value, int maxEncodedSize) {
    byte[] bytes = value.getBytes(Bits.UTF_8);
    if (bytes.length > maxEncodedSize)
      throw new IllegalArgumentException("Encoded string larger than maximum size: " + maxEncodedSize); 
    putInt(index, bytes.length);
    putBytes(index + 4, bytes);
    return 4 + bytes.length;
  }
  
  public void wrap(byte[] buffer) {
    this.byteBuffer = ByteBuffer.wrap(buffer);
    this.byteBuffer.order(ByteOrder.LITTLE_ENDIAN);
  }
  
  public byte[] byteArray() { return this.byteBuffer.array(); }
  
  public int capacity() { return this.byteBuffer.capacity(); }
  
  public long getLong(int index) { return this.byteBuffer.getLong(index); }
  
  public int getInt(int index) { return this.byteBuffer.getInt(index); }
  
  public short getShort(int index) { return this.byteBuffer.getShort(index); }
  
  public byte getByte(int index) { return this.byteBuffer.get(index); }
  
  public void getBytes(int index, byte[] dst) { getBytes(index, dst, 0, dst.length); }
  
  public void getBytes(int index, byte[] dst, int offset, int length) {
    this.byteBuffer.position(index);
    this.byteBuffer.get(dst, offset, length);
  }
  
  public String getStringUtf8(int offset, int length) {
    byte[] stringInBytes = new byte[length];
    getBytes(offset + 4, stringInBytes);
    return new String(stringInBytes, Bits.UTF_8);
  }
}
