package com.hazelcast.client.impl.protocol.task.ringbuffer;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.RingbufferHeadSequenceCodec;
import com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask;
import com.hazelcast.instance.Node;
import com.hazelcast.nio.Connection;
import com.hazelcast.ringbuffer.impl.operations.GenericOperation;
import com.hazelcast.security.permission.RingBufferPermission;
import com.hazelcast.spi.Operation;
import java.security.Permission;

public class RingbufferHeadSequenceMessageTask extends AbstractPartitionMessageTask<RingbufferHeadSequenceCodec.RequestParameters> {
  public RingbufferHeadSequenceMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected Operation prepareOperation() { return new GenericOperation(((RingbufferHeadSequenceCodec.RequestParameters)this.parameters).name, (byte)2); }
  
  protected RingbufferHeadSequenceCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return RingbufferHeadSequenceCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return RingbufferHeadSequenceCodec.encodeResponse(((Long)response).longValue()); }
  
  public String getServiceName() { return "hz:impl:ringbufferService"; }
  
  public Object[] getParameters() { return null; }
  
  public Permission getRequiredPermission() { return new RingBufferPermission(((RingbufferHeadSequenceCodec.RequestParameters)this.parameters).name, new String[] { "read" }); }
  
  public String getMethodName() { return "headSequence"; }
  
  public String getDistributedObjectName() { return ((RingbufferHeadSequenceCodec.RequestParameters)this.parameters).name; }
}
