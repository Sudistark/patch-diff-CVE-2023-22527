package com.hazelcast.client.impl.protocol.task.ringbuffer;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.RingbufferCapacityCodec;
import com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask;
import com.hazelcast.instance.Node;
import com.hazelcast.nio.Connection;
import com.hazelcast.ringbuffer.impl.operations.GenericOperation;
import com.hazelcast.security.permission.RingBufferPermission;
import com.hazelcast.spi.Operation;
import java.security.Permission;

public class RingbufferCapacityMessageTask extends AbstractPartitionMessageTask<RingbufferCapacityCodec.RequestParameters> {
  public RingbufferCapacityMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected Operation prepareOperation() { return new GenericOperation(((RingbufferCapacityCodec.RequestParameters)this.parameters).name, (byte)4); }
  
  protected RingbufferCapacityCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return RingbufferCapacityCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return RingbufferCapacityCodec.encodeResponse(((Long)response).longValue()); }
  
  public String getServiceName() { return "hz:impl:ringbufferService"; }
  
  public Object[] getParameters() { return null; }
  
  public Permission getRequiredPermission() { return new RingBufferPermission(((RingbufferCapacityCodec.RequestParameters)this.parameters).name, new String[] { "read" }); }
  
  public String getMethodName() { return "capacity"; }
  
  public String getDistributedObjectName() { return ((RingbufferCapacityCodec.RequestParameters)this.parameters).name; }
}
