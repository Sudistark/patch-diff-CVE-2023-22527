package com.hazelcast.client.impl.protocol.task.set;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.SetIsEmptyCodec;
import com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask;
import com.hazelcast.collection.impl.collection.operations.CollectionIsEmptyOperation;
import com.hazelcast.instance.Node;
import com.hazelcast.nio.Connection;
import com.hazelcast.security.permission.SetPermission;
import com.hazelcast.spi.Operation;
import java.security.Permission;

public class SetIsEmptyMessageTask extends AbstractPartitionMessageTask<SetIsEmptyCodec.RequestParameters> {
  public SetIsEmptyMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected Operation prepareOperation() { return new CollectionIsEmptyOperation(((SetIsEmptyCodec.RequestParameters)this.parameters).name); }
  
  protected SetIsEmptyCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return SetIsEmptyCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return SetIsEmptyCodec.encodeResponse(((Boolean)response).booleanValue()); }
  
  public String getServiceName() { return "hz:impl:setService"; }
  
  public Object[] getParameters() { return null; }
  
  public Permission getRequiredPermission() { return new SetPermission(((SetIsEmptyCodec.RequestParameters)this.parameters).name, new String[] { "read" }); }
  
  public String getMethodName() { return "isEmpty"; }
  
  public String getDistributedObjectName() { return ((SetIsEmptyCodec.RequestParameters)this.parameters).name; }
}
