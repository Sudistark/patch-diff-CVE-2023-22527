package com.hazelcast.client.impl.protocol.task.cardinality;

import com.hazelcast.cardinality.impl.operations.AggregateOperation;
import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.CardinalityEstimatorAddCodec;
import com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask;
import com.hazelcast.instance.Node;
import com.hazelcast.nio.Connection;
import com.hazelcast.security.permission.CardinalityEstimatorPermission;
import com.hazelcast.spi.Operation;
import java.security.Permission;

public class CardinalityEstimatorAddMessageTask extends AbstractPartitionMessageTask<CardinalityEstimatorAddCodec.RequestParameters> {
  public CardinalityEstimatorAddMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected Operation prepareOperation() { return new AggregateOperation(((CardinalityEstimatorAddCodec.RequestParameters)this.parameters).name, ((CardinalityEstimatorAddCodec.RequestParameters)this.parameters).hash); }
  
  protected CardinalityEstimatorAddCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return CardinalityEstimatorAddCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return CardinalityEstimatorAddCodec.encodeResponse(); }
  
  public String getServiceName() { return "hz:impl:cardinalityEstimatorService"; }
  
  public Permission getRequiredPermission() { return new CardinalityEstimatorPermission(((CardinalityEstimatorAddCodec.RequestParameters)this.parameters).name, new String[] { "modify" }); }
  
  public String getDistributedObjectName() { return ((CardinalityEstimatorAddCodec.RequestParameters)this.parameters).name; }
  
  public String getMethodName() { return "add"; }
  
  public Object[] getParameters() { return new Object[] { ((CardinalityEstimatorAddCodec.RequestParameters)this.parameters).name, Long.valueOf(((CardinalityEstimatorAddCodec.RequestParameters)this.parameters).hash) }; }
}
