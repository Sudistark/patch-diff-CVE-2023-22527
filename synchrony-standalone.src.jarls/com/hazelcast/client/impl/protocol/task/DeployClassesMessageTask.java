package com.hazelcast.client.impl.protocol.task;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.ClientDeployClassesCodec;
import com.hazelcast.core.Member;
import com.hazelcast.instance.Node;
import com.hazelcast.internal.usercodedeployment.impl.operation.DeployClassesOperation;
import com.hazelcast.nio.Connection;
import com.hazelcast.security.permission.UserCodeDeploymentPermission;
import com.hazelcast.spi.Operation;
import com.hazelcast.util.function.Supplier;
import java.security.Permission;
import java.util.Collection;
import java.util.Map;

public class DeployClassesMessageTask extends AbstractMultiTargetMessageTask<ClientDeployClassesCodec.RequestParameters> implements Supplier<Operation> {
  public DeployClassesMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  public Operation get() { return new DeployClassesOperation(((ClientDeployClassesCodec.RequestParameters)this.parameters).classDefinitions); }
  
  protected Supplier<Operation> createOperationSupplier() { return this; }
  
  protected Object reduce(Map<Member, Object> map) throws Throwable {
    for (Object result : map.values()) {
      if (result instanceof Throwable && !(result instanceof com.hazelcast.core.MemberLeftException))
        throw (Throwable)result; 
    } 
    return null;
  }
  
  public Collection<Member> getTargets() { return this.nodeEngine.getClusterService().getMembers(); }
  
  protected ClientDeployClassesCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return ClientDeployClassesCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return ClientDeployClassesCodec.encodeResponse(); }
  
  public String getServiceName() { return "user-code-deployment-service"; }
  
  public String getDistributedObjectName() { return null; }
  
  public String getMethodName() { return null; }
  
  public Permission getRequiredPermission() { return new UserCodeDeploymentPermission(new String[] { "deploy" }); }
  
  public Object[] getParameters() { return null; }
}
