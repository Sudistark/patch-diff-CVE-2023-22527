package com.hazelcast.client.impl.protocol.task.dynamicconfig;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.DynamicConfigAddExecutorConfigCodec;
import com.hazelcast.config.ExecutorConfig;
import com.hazelcast.instance.Node;
import com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig;
import com.hazelcast.nio.Connection;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;

public class AddExecutorConfigMessageTask extends AbstractAddConfigMessageTask<DynamicConfigAddExecutorConfigCodec.RequestParameters> {
  public AddExecutorConfigMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected DynamicConfigAddExecutorConfigCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return DynamicConfigAddExecutorConfigCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return DynamicConfigAddExecutorConfigCodec.encodeResponse(); }
  
  protected IdentifiedDataSerializable getConfig() {
    ExecutorConfig config = new ExecutorConfig(((DynamicConfigAddExecutorConfigCodec.RequestParameters)this.parameters).name, ((DynamicConfigAddExecutorConfigCodec.RequestParameters)this.parameters).poolSize);
    config.setQueueCapacity(((DynamicConfigAddExecutorConfigCodec.RequestParameters)this.parameters).queueCapacity);
    config.setStatisticsEnabled(((DynamicConfigAddExecutorConfigCodec.RequestParameters)this.parameters).statisticsEnabled);
    return config;
  }
  
  public String getMethodName() { return "addExecutorConfig"; }
  
  protected boolean checkStaticConfigDoesNotExist(IdentifiedDataSerializable config) {
    DynamicConfigurationAwareConfig nodeConfig = (DynamicConfigurationAwareConfig)this.nodeEngine.getConfig();
    ExecutorConfig executorConfig = (ExecutorConfig)config;
    return nodeConfig.checkStaticConfigDoesNotExist(nodeConfig.getStaticConfig().getExecutorConfigs(), executorConfig
        .getName(), executorConfig);
  }
}
