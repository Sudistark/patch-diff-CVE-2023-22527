package com.hazelcast.client.impl.protocol.task;

import com.hazelcast.client.impl.ClientPartitionListenerService;
import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.ClientAddPartitionListenerCodec;
import com.hazelcast.instance.Node;
import com.hazelcast.internal.partition.InternalPartitionService;
import com.hazelcast.nio.Connection;
import com.hazelcast.util.UuidUtil;
import java.security.Permission;

public class AddPartitionListenerMessageTask extends AbstractCallableMessageTask<ClientAddPartitionListenerCodec.RequestParameters> {
  public AddPartitionListenerMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected Object call() {
    InternalPartitionService internalPartitionService = (InternalPartitionService)getService("hz:core:partitionService");
    internalPartitionService.firstArrangement();
    ClientPartitionListenerService service = this.clientEngine.getPartitionListenerService();
    service.registerPartitionListener(this.endpoint, this.clientMessage.getCorrelationId());
    this.endpoint.addDestroyAction(UuidUtil.newUnsecureUUID().toString(), new Object(this, service));
    return Boolean.valueOf(true);
  }
  
  protected ClientAddPartitionListenerCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return ClientAddPartitionListenerCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return ClientAddPartitionListenerCodec.encodeResponse(); }
  
  public String getServiceName() { return "hz:core:clusterService"; }
  
  public String getDistributedObjectName() { return null; }
  
  public String getMethodName() { return null; }
  
  public Object[] getParameters() { return null; }
  
  public Permission getRequiredPermission() { return null; }
}
