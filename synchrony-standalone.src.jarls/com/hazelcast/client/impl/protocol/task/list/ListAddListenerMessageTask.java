package com.hazelcast.client.impl.protocol.task.list;

import com.hazelcast.client.impl.ClientEndpoint;
import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.ListAddListenerCodec;
import com.hazelcast.client.impl.protocol.task.AbstractCallableMessageTask;
import com.hazelcast.client.impl.protocol.task.ListenerMessageTask;
import com.hazelcast.collection.impl.collection.CollectionEventFilter;
import com.hazelcast.core.ItemListener;
import com.hazelcast.instance.Node;
import com.hazelcast.nio.Connection;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.security.permission.ListPermission;
import com.hazelcast.spi.EventRegistration;
import com.hazelcast.spi.EventService;
import java.security.Permission;

public class ListAddListenerMessageTask extends AbstractCallableMessageTask<ListAddListenerCodec.RequestParameters> implements ListenerMessageTask {
  public ListAddListenerMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected Object call() {
    EventRegistration registration;
    Data partitionKey = this.serializationService.toData(((ListAddListenerCodec.RequestParameters)this.parameters).name);
    ItemListener listener = createItemListener(this.endpoint, partitionKey);
    EventService eventService = this.clientEngine.getEventService();
    CollectionEventFilter filter = new CollectionEventFilter(((ListAddListenerCodec.RequestParameters)this.parameters).includeValue);
    if (((ListAddListenerCodec.RequestParameters)this.parameters).localOnly) {
      registration = eventService.registerLocalListener(getServiceName(), ((ListAddListenerCodec.RequestParameters)this.parameters).name, filter, listener);
    } else {
      registration = eventService.registerListener(getServiceName(), ((ListAddListenerCodec.RequestParameters)this.parameters).name, filter, listener);
    } 
    String registrationId = registration.getId();
    this.endpoint.addListenerDestroyAction(getServiceName(), ((ListAddListenerCodec.RequestParameters)this.parameters).name, registrationId);
    return registrationId;
  }
  
  private ItemListener createItemListener(ClientEndpoint endpoint, Data partitionKey) { return new Object(this, endpoint, partitionKey); }
  
  protected ListAddListenerCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return ListAddListenerCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return ListAddListenerCodec.encodeResponse((String)response); }
  
  public String getServiceName() { return "hz:impl:listService"; }
  
  public Object[] getParameters() { return new Object[] { null, Boolean.valueOf(((ListAddListenerCodec.RequestParameters)this.parameters).includeValue) }; }
  
  public Permission getRequiredPermission() { return new ListPermission(((ListAddListenerCodec.RequestParameters)this.parameters).name, new String[] { "listen" }); }
  
  public String getMethodName() { return "addItemListener"; }
  
  public String getDistributedObjectName() { return ((ListAddListenerCodec.RequestParameters)this.parameters).name; }
}
