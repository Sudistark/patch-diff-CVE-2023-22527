package com.hazelcast.client.impl.protocol.task.transaction;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.XATransactionClearRemoteCodec;
import com.hazelcast.client.impl.protocol.task.AbstractCallableMessageTask;
import com.hazelcast.instance.Node;
import com.hazelcast.internal.partition.InternalPartitionService;
import com.hazelcast.nio.Connection;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.security.permission.TransactionPermission;
import com.hazelcast.spi.InvocationBuilder;
import com.hazelcast.spi.impl.operationservice.InternalOperationService;
import com.hazelcast.transaction.impl.xa.operations.ClearRemoteTransactionOperation;
import java.security.Permission;

public class XAClearRemoteTransactionMessageTask extends AbstractCallableMessageTask<XATransactionClearRemoteCodec.RequestParameters> {
  private static final int TRY_COUNT = 100;
  
  public XAClearRemoteTransactionMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected XATransactionClearRemoteCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return XATransactionClearRemoteCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return XATransactionClearRemoteCodec.encodeResponse(); }
  
  protected Object call() throws Exception {
    InternalOperationService operationService = this.nodeEngine.getOperationService();
    InternalPartitionService partitionService = this.nodeEngine.getPartitionService();
    Data xidData = this.serializationService.toData(((XATransactionClearRemoteCodec.RequestParameters)this.parameters).xid);
    ClearRemoteTransactionOperation clearRemoteTransactionOperation = new ClearRemoteTransactionOperation(xidData);
    clearRemoteTransactionOperation.setCallerUuid(this.endpoint.getUuid());
    int partitionId = partitionService.getPartitionId(xidData);
    InvocationBuilder builder = operationService.createInvocationBuilder(getServiceName(), clearRemoteTransactionOperation, partitionId);
    builder.setTryCount(100).setResultDeserialized(false);
    builder.invoke();
    return XATransactionClearRemoteCodec.encodeResponse();
  }
  
  public String getServiceName() { return "hz:impl:xaService"; }
  
  public String getDistributedObjectName() { return null; }
  
  public String getMethodName() { return null; }
  
  public Object[] getParameters() { return null; }
  
  public Permission getRequiredPermission() { return new TransactionPermission(); }
}
