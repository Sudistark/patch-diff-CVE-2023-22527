package com.hazelcast.client.impl.protocol.task.multimap;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.MultiMapAddEntryListenerCodec;
import com.hazelcast.instance.Node;
import com.hazelcast.nio.Connection;
import com.hazelcast.nio.serialization.Data;

public class MultiMapAddEntryListenerMessageTask extends AbstractMultiMapAddEntryListenerMessageTask<MultiMapAddEntryListenerCodec.RequestParameters> {
  public MultiMapAddEntryListenerMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected boolean shouldIncludeValue() { return ((MultiMapAddEntryListenerCodec.RequestParameters)this.parameters).includeValue; }
  
  protected boolean isLocalOnly() { return ((MultiMapAddEntryListenerCodec.RequestParameters)this.parameters).localOnly; }
  
  protected ClientMessage encodeEvent(Data key, Data value, Data oldValue, int type, String uuid, int numberOfEntriesAffected) { return MultiMapAddEntryListenerCodec.encodeEntryEvent(key, value, oldValue, null, type, uuid, numberOfEntriesAffected); }
  
  protected MultiMapAddEntryListenerCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return MultiMapAddEntryListenerCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return MultiMapAddEntryListenerCodec.encodeResponse((String)response); }
  
  public String getDistributedObjectName() { return ((MultiMapAddEntryListenerCodec.RequestParameters)this.parameters).name; }
  
  public Object[] getParameters() { return new Object[] { null, Boolean.valueOf(((MultiMapAddEntryListenerCodec.RequestParameters)this.parameters).includeValue) }; }
}
