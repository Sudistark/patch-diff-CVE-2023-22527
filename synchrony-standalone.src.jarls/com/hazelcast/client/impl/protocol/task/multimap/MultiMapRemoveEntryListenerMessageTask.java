package com.hazelcast.client.impl.protocol.task.multimap;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.MultiMapRemoveEntryListenerCodec;
import com.hazelcast.client.impl.protocol.task.AbstractRemoveListenerMessageTask;
import com.hazelcast.instance.Node;
import com.hazelcast.multimap.impl.MultiMapService;
import com.hazelcast.nio.Connection;
import com.hazelcast.security.permission.MultiMapPermission;
import java.security.Permission;

public class MultiMapRemoveEntryListenerMessageTask extends AbstractRemoveListenerMessageTask<MultiMapRemoveEntryListenerCodec.RequestParameters> {
  public MultiMapRemoveEntryListenerMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected boolean deRegisterListener() {
    MultiMapService service = (MultiMapService)getService("hz:impl:multiMapService");
    return service.removeListener(((MultiMapRemoveEntryListenerCodec.RequestParameters)this.parameters).name, ((MultiMapRemoveEntryListenerCodec.RequestParameters)this.parameters).registrationId);
  }
  
  protected String getRegistrationId() { return ((MultiMapRemoveEntryListenerCodec.RequestParameters)this.parameters).registrationId; }
  
  protected MultiMapRemoveEntryListenerCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return MultiMapRemoveEntryListenerCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return MultiMapRemoveEntryListenerCodec.encodeResponse(((Boolean)response).booleanValue()); }
  
  public String getServiceName() { return "hz:impl:multiMapService"; }
  
  public Permission getRequiredPermission() { return new MultiMapPermission(((MultiMapRemoveEntryListenerCodec.RequestParameters)this.parameters).name, new String[] { "listen" }); }
  
  public String getDistributedObjectName() { return ((MultiMapRemoveEntryListenerCodec.RequestParameters)this.parameters).name; }
  
  public String getMethodName() { return "removeEntryListener"; }
}
