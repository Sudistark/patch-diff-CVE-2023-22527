package com.hazelcast.client.impl.protocol.task.multimap;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.MultiMapClearCodec;
import com.hazelcast.client.impl.protocol.task.AbstractAllPartitionsMessageTask;
import com.hazelcast.core.EntryEventType;
import com.hazelcast.instance.Node;
import com.hazelcast.multimap.impl.MultiMapService;
import com.hazelcast.multimap.impl.operations.MultiMapOperationFactory;
import com.hazelcast.nio.Connection;
import com.hazelcast.security.permission.MultiMapPermission;
import com.hazelcast.spi.OperationFactory;
import java.security.Permission;
import java.util.Map;

public class MultiMapClearMessageTask extends AbstractAllPartitionsMessageTask<MultiMapClearCodec.RequestParameters> {
  public MultiMapClearMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected OperationFactory createOperationFactory() { return new MultiMapOperationFactory(((MultiMapClearCodec.RequestParameters)this.parameters).name, MultiMapOperationFactory.OperationFactoryType.CLEAR); }
  
  protected Object reduce(Map<Integer, Object> map) {
    int totalAffectedEntries = 0;
    for (Object affectedEntries : map.values())
      totalAffectedEntries += ((Integer)affectedEntries).intValue(); 
    MultiMapService service = (MultiMapService)getService("hz:impl:multiMapService");
    service.publishMultiMapEvent(((MultiMapClearCodec.RequestParameters)this.parameters).name, EntryEventType.CLEAR_ALL, totalAffectedEntries);
    return null;
  }
  
  protected MultiMapClearCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return MultiMapClearCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return MultiMapClearCodec.encodeResponse(); }
  
  public String getServiceName() { return "hz:impl:multiMapService"; }
  
  public Permission getRequiredPermission() { return new MultiMapPermission(((MultiMapClearCodec.RequestParameters)this.parameters).name, new String[] { "remove" }); }
  
  public String getDistributedObjectName() { return ((MultiMapClearCodec.RequestParameters)this.parameters).name; }
  
  public String getMethodName() { return "clear"; }
  
  public Object[] getParameters() { return null; }
}
