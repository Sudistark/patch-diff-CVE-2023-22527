package com.hazelcast.client.impl.protocol.task.multimap;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.MultiMapRemoveCodec;
import com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask;
import com.hazelcast.instance.Node;
import com.hazelcast.multimap.impl.MultiMapRecord;
import com.hazelcast.multimap.impl.operations.MultiMapResponse;
import com.hazelcast.multimap.impl.operations.RemoveAllOperation;
import com.hazelcast.nio.Connection;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.security.permission.MultiMapPermission;
import com.hazelcast.spi.Operation;
import java.security.Permission;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

public class MultiMapRemoveMessageTask extends AbstractPartitionMessageTask<MultiMapRemoveCodec.RequestParameters> {
  public MultiMapRemoveMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected Operation prepareOperation() { return new RemoveAllOperation(((MultiMapRemoveCodec.RequestParameters)this.parameters).name, ((MultiMapRemoveCodec.RequestParameters)this.parameters).key, ((MultiMapRemoveCodec.RequestParameters)this.parameters).threadId); }
  
  protected MultiMapRemoveCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return MultiMapRemoveCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) {
    MultiMapResponse multiMapResponse = (MultiMapResponse)response;
    Collection<MultiMapRecord> collection = multiMapResponse.getCollection();
    List<Data> resultCollection = new ArrayList<Data>(collection.size());
    for (MultiMapRecord multiMapRecord : collection)
      resultCollection.add(this.serializationService.toData(multiMapRecord.getObject())); 
    return MultiMapRemoveCodec.encodeResponse(resultCollection);
  }
  
  public String getServiceName() { return "hz:impl:multiMapService"; }
  
  public String getDistributedObjectName() { return ((MultiMapRemoveCodec.RequestParameters)this.parameters).name; }
  
  public Permission getRequiredPermission() { return new MultiMapPermission(((MultiMapRemoveCodec.RequestParameters)this.parameters).name, new String[] { "remove" }); }
  
  public String getMethodName() { return "remove"; }
  
  public Object[] getParameters() { return new Object[] { ((MultiMapRemoveCodec.RequestParameters)this.parameters).key }; }
}
