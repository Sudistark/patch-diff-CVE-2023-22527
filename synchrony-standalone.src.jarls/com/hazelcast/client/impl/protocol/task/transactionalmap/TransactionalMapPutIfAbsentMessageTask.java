package com.hazelcast.client.impl.protocol.task.transactionalmap;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.TransactionalMapPutIfAbsentCodec;
import com.hazelcast.client.impl.protocol.task.AbstractTransactionalMessageTask;
import com.hazelcast.core.TransactionalMap;
import com.hazelcast.instance.Node;
import com.hazelcast.nio.Connection;
import com.hazelcast.security.permission.MapPermission;
import com.hazelcast.transaction.TransactionContext;
import java.security.Permission;

public class TransactionalMapPutIfAbsentMessageTask extends AbstractTransactionalMessageTask<TransactionalMapPutIfAbsentCodec.RequestParameters> {
  public TransactionalMapPutIfAbsentMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected Object innerCall() throws Exception {
    TransactionContext context = this.endpoint.getTransactionContext(((TransactionalMapPutIfAbsentCodec.RequestParameters)this.parameters).txnId);
    TransactionalMap map = context.getMap(((TransactionalMapPutIfAbsentCodec.RequestParameters)this.parameters).name);
    Object response = map.putIfAbsent(((TransactionalMapPutIfAbsentCodec.RequestParameters)this.parameters).key, ((TransactionalMapPutIfAbsentCodec.RequestParameters)this.parameters).value);
    return this.serializationService.toData(response);
  }
  
  protected long getClientThreadId() { return ((TransactionalMapPutIfAbsentCodec.RequestParameters)this.parameters).threadId; }
  
  protected TransactionalMapPutIfAbsentCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return TransactionalMapPutIfAbsentCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return TransactionalMapPutIfAbsentCodec.encodeResponse(this.serializationService.toData(response)); }
  
  public String getServiceName() { return "hz:impl:mapService"; }
  
  public Permission getRequiredPermission() { return new MapPermission(((TransactionalMapPutIfAbsentCodec.RequestParameters)this.parameters).name, new String[] { "put", "lock" }); }
  
  public String getDistributedObjectName() { return ((TransactionalMapPutIfAbsentCodec.RequestParameters)this.parameters).name; }
  
  public String getMethodName() { return "putIfAbsent"; }
  
  public Object[] getParameters() { return new Object[] { ((TransactionalMapPutIfAbsentCodec.RequestParameters)this.parameters).key, ((TransactionalMapPutIfAbsentCodec.RequestParameters)this.parameters).value }; }
}
