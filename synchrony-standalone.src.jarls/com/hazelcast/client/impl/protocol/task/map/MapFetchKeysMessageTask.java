package com.hazelcast.client.impl.protocol.task.map;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.MapFetchKeysCodec;
import com.hazelcast.instance.Node;
import com.hazelcast.map.impl.iterator.MapKeysWithCursor;
import com.hazelcast.map.impl.operation.MapOperationProvider;
import com.hazelcast.nio.Connection;
import com.hazelcast.spi.Operation;
import java.security.Permission;
import java.util.Collections;

public class MapFetchKeysMessageTask extends AbstractMapPartitionMessageTask<MapFetchKeysCodec.RequestParameters> {
  public MapFetchKeysMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected Operation prepareOperation() {
    MapOperationProvider operationProvider = getMapOperationProvider(((MapFetchKeysCodec.RequestParameters)this.parameters).name);
    return operationProvider.createFetchKeysOperation(((MapFetchKeysCodec.RequestParameters)this.parameters).name, ((MapFetchKeysCodec.RequestParameters)this.parameters).tableIndex, ((MapFetchKeysCodec.RequestParameters)this.parameters).batch);
  }
  
  protected MapFetchKeysCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return MapFetchKeysCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) {
    if (response == null)
      return MapFetchKeysCodec.encodeResponse(0, Collections.emptyList()); 
    MapKeysWithCursor mapKeysWithCursor = (MapKeysWithCursor)response;
    return MapFetchKeysCodec.encodeResponse(mapKeysWithCursor.getNextTableIndexToReadFrom(), mapKeysWithCursor.getBatch());
  }
  
  public String getServiceName() { return "hz:impl:mapService"; }
  
  public Permission getRequiredPermission() { return null; }
  
  public String getDistributedObjectName() { return ((MapFetchKeysCodec.RequestParameters)this.parameters).name; }
  
  public String getMethodName() { return "iterator"; }
  
  public Object[] getParameters() { return new Object[0]; }
}
