package com.hazelcast.client.impl.protocol.task.map;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.MapIsEmptyCodec;
import com.hazelcast.client.impl.protocol.task.AbstractAllPartitionsMessageTask;
import com.hazelcast.instance.Node;
import com.hazelcast.map.impl.LocalMapStatsUtil;
import com.hazelcast.map.impl.MapService;
import com.hazelcast.map.impl.MapServiceContext;
import com.hazelcast.map.impl.operation.IsEmptyOperationFactory;
import com.hazelcast.nio.Connection;
import com.hazelcast.security.permission.MapPermission;
import com.hazelcast.spi.OperationFactory;
import java.security.Permission;
import java.util.Map;

public class MapIsEmptyMessageTask extends AbstractAllPartitionsMessageTask<MapIsEmptyCodec.RequestParameters> {
  public MapIsEmptyMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected OperationFactory createOperationFactory() { return new IsEmptyOperationFactory(((MapIsEmptyCodec.RequestParameters)this.parameters).name); }
  
  protected Object reduce(Map<Integer, Object> map) {
    MapService mapService = (MapService)getService("hz:impl:mapService");
    MapServiceContext mapServiceContext = mapService.getMapServiceContext();
    boolean response = true;
    for (Object result : map.values()) {
      boolean isEmpty = ((Boolean)mapServiceContext.toObject(result)).booleanValue();
      if (!isEmpty)
        response = false; 
    } 
    LocalMapStatsUtil.incrementOtherOperationsCount(mapService, ((MapIsEmptyCodec.RequestParameters)this.parameters).name);
    return Boolean.valueOf(response);
  }
  
  protected MapIsEmptyCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return MapIsEmptyCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return MapIsEmptyCodec.encodeResponse(((Boolean)response).booleanValue()); }
  
  public String getServiceName() { return "hz:impl:mapService"; }
  
  public Permission getRequiredPermission() { return new MapPermission(((MapIsEmptyCodec.RequestParameters)this.parameters).name, new String[] { "read" }); }
  
  public String getDistributedObjectName() { return ((MapIsEmptyCodec.RequestParameters)this.parameters).name; }
  
  public String getMethodName() { return "isEmpty"; }
  
  public Object[] getParameters() { return null; }
}
