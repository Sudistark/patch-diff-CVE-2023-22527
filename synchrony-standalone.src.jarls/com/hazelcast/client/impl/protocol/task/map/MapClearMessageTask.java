package com.hazelcast.client.impl.protocol.task.map;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.MapClearCodec;
import com.hazelcast.core.EntryEventType;
import com.hazelcast.instance.Node;
import com.hazelcast.map.impl.LocalMapStatsProvider;
import com.hazelcast.map.impl.MapContainer;
import com.hazelcast.map.impl.MapService;
import com.hazelcast.map.impl.MapServiceContext;
import com.hazelcast.map.impl.event.MapEventPublisher;
import com.hazelcast.map.impl.operation.MapOperationProvider;
import com.hazelcast.nio.Address;
import com.hazelcast.nio.Connection;
import com.hazelcast.security.permission.MapPermission;
import com.hazelcast.spi.OperationFactory;
import java.security.Permission;
import java.util.Map;

public class MapClearMessageTask extends AbstractMapAllPartitionsMessageTask<MapClearCodec.RequestParameters> {
  public MapClearMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected OperationFactory createOperationFactory() {
    MapOperationProvider operationProvider = getOperationProvider(((MapClearCodec.RequestParameters)this.parameters).name);
    return operationProvider.createClearOperationFactory(((MapClearCodec.RequestParameters)this.parameters).name);
  }
  
  protected Object reduce(Map<Integer, Object> map) {
    int clearedTotal = 0;
    for (Object affectedEntries : map.values())
      clearedTotal += ((Integer)affectedEntries).intValue(); 
    MapService service = (MapService)getService("hz:impl:mapService");
    MapServiceContext mapServiceContext = service.getMapServiceContext();
    if (clearedTotal > 0) {
      Address thisAddress = this.nodeEngine.getThisAddress();
      MapEventPublisher mapEventPublisher = mapServiceContext.getMapEventPublisher();
      mapEventPublisher.publishMapEvent(thisAddress, ((MapClearCodec.RequestParameters)this.parameters).name, EntryEventType.CLEAR_ALL, clearedTotal);
    } 
    MapService mapService = (MapService)getService("hz:impl:mapService");
    MapContainer mapContainer = mapService.getMapServiceContext().getMapContainer(((MapClearCodec.RequestParameters)this.parameters).name);
    if (mapContainer.getMapConfig().isStatisticsEnabled()) {
      LocalMapStatsProvider localMapStatsProvider = mapServiceContext.getLocalMapStatsProvider();
      localMapStatsProvider.getLocalMapStatsImpl(((MapClearCodec.RequestParameters)this.parameters).name).incrementOtherOperations();
    } 
    return null;
  }
  
  protected MapClearCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return MapClearCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return MapClearCodec.encodeResponse(); }
  
  public String getServiceName() { return "hz:impl:mapService"; }
  
  public Permission getRequiredPermission() { return new MapPermission(((MapClearCodec.RequestParameters)this.parameters).name, new String[] { "remove" }); }
  
  public String getDistributedObjectName() { return ((MapClearCodec.RequestParameters)this.parameters).name; }
  
  public String getMethodName() { return "clear"; }
  
  public Object[] getParameters() { return null; }
}
