package com.hazelcast.client.impl.protocol.task.map;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.ContinuousQueryMadePublishableCodec;
import com.hazelcast.client.impl.protocol.task.AbstractAllPartitionsMessageTask;
import com.hazelcast.instance.Node;
import com.hazelcast.map.impl.querycache.subscriber.operation.MadePublishableOperationFactory;
import com.hazelcast.nio.Connection;
import com.hazelcast.spi.OperationFactory;
import java.security.Permission;
import java.util.Map;

public class MapMadePublishableMessageTask extends AbstractAllPartitionsMessageTask<ContinuousQueryMadePublishableCodec.RequestParameters> {
  public MapMadePublishableMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected ContinuousQueryMadePublishableCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return ContinuousQueryMadePublishableCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return ContinuousQueryMadePublishableCodec.encodeResponse(((Boolean)response).booleanValue()); }
  
  public String getServiceName() { return "hz:impl:mapService"; }
  
  public Permission getRequiredPermission() { return null; }
  
  public String getDistributedObjectName() { return ((ContinuousQueryMadePublishableCodec.RequestParameters)this.parameters).mapName; }
  
  public String getMethodName() { return null; }
  
  public Object[] getParameters() { return null; }
  
  protected OperationFactory createOperationFactory() { return new MadePublishableOperationFactory(((ContinuousQueryMadePublishableCodec.RequestParameters)this.parameters).mapName, ((ContinuousQueryMadePublishableCodec.RequestParameters)this.parameters).cacheName); }
  
  protected Object reduce(Map<Integer, Object> map) { return Boolean.valueOf(!map.containsValue(Boolean.FALSE)); }
}
