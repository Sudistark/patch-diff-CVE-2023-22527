package com.hazelcast.client.impl.protocol.task.map;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.MapGetAllCodec;
import com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask;
import com.hazelcast.instance.Node;
import com.hazelcast.map.impl.MapContainer;
import com.hazelcast.map.impl.MapEntries;
import com.hazelcast.map.impl.MapService;
import com.hazelcast.map.impl.operation.GetAllOperation;
import com.hazelcast.nio.Connection;
import com.hazelcast.security.permission.MapPermission;
import com.hazelcast.spi.Operation;
import java.security.Permission;

public class MapGetAllMessageTask extends AbstractPartitionMessageTask<MapGetAllCodec.RequestParameters> {
  public MapGetAllMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected Operation prepareOperation() { return new GetAllOperation(((MapGetAllCodec.RequestParameters)this.parameters).name, ((MapGetAllCodec.RequestParameters)this.parameters).keys); }
  
  public String getServiceName() { return "hz:impl:mapService"; }
  
  protected MapGetAllCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return MapGetAllCodec.decodeRequest(clientMessage); }
  
  protected void beforeProcess() { this.startTimeNanos = System.nanoTime(); }
  
  protected void beforeResponse() {
    long latencyNanos = System.nanoTime() - this.startTimeNanos;
    MapService mapService = (MapService)getService("hz:impl:mapService");
    MapContainer mapContainer = mapService.getMapServiceContext().getMapContainer(((MapGetAllCodec.RequestParameters)this.parameters).name);
    if (mapContainer.getMapConfig().isStatisticsEnabled())
      mapService.getMapServiceContext().getLocalMapStatsProvider().getLocalMapStatsImpl(((MapGetAllCodec.RequestParameters)this.parameters).name)
        .incrementGetLatencyNanos(((MapGetAllCodec.RequestParameters)this.parameters).keys.size(), latencyNanos); 
  }
  
  protected ClientMessage encodeResponse(Object response) { return MapGetAllCodec.encodeResponse(((MapEntries)response).entries()); }
  
  public Permission getRequiredPermission() { return new MapPermission(((MapGetAllCodec.RequestParameters)this.parameters).name, new String[] { "read" }); }
  
  public String getDistributedObjectName() { return ((MapGetAllCodec.RequestParameters)this.parameters).name; }
  
  public String getMethodName() { return "getAll"; }
  
  public Object[] getParameters() { return new Object[] { ((MapGetAllCodec.RequestParameters)this.parameters).keys }; }
}
