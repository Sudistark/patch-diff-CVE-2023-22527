package com.hazelcast.client.impl.protocol.task.map;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.MapTryLockCodec;
import com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask;
import com.hazelcast.concurrent.lock.operations.LockOperation;
import com.hazelcast.instance.Node;
import com.hazelcast.map.impl.MapService;
import com.hazelcast.nio.Connection;
import com.hazelcast.security.permission.MapPermission;
import com.hazelcast.spi.ObjectNamespace;
import com.hazelcast.spi.Operation;
import java.security.Permission;
import java.util.concurrent.TimeUnit;

public class MapTryLockMessageTask extends AbstractPartitionMessageTask<MapTryLockCodec.RequestParameters> {
  public MapTryLockMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected Operation prepareOperation() { return new LockOperation(getNamespace(), ((MapTryLockCodec.RequestParameters)this.parameters).key, ((MapTryLockCodec.RequestParameters)this.parameters).threadId, ((MapTryLockCodec.RequestParameters)this.parameters).lease, ((MapTryLockCodec.RequestParameters)this.parameters).timeout, ((MapTryLockCodec.RequestParameters)this.parameters).referenceId); }
  
  protected MapTryLockCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return MapTryLockCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return MapTryLockCodec.encodeResponse(((Boolean)response).booleanValue()); }
  
  public String getServiceName() { return "hz:impl:lockService"; }
  
  public String getDistributedObjectType() { return "hz:impl:mapService"; }
  
  public Permission getRequiredPermission() { return new MapPermission(((MapTryLockCodec.RequestParameters)this.parameters).name, new String[] { "lock" }); }
  
  private ObjectNamespace getNamespace() { return MapService.getObjectNamespace(((MapTryLockCodec.RequestParameters)this.parameters).name); }
  
  public String getDistributedObjectName() { return ((MapTryLockCodec.RequestParameters)this.parameters).name; }
  
  public String getMethodName() { return "tryLock"; }
  
  public Object[] getParameters() {
    if (((MapTryLockCodec.RequestParameters)this.parameters).timeout == 0L)
      return new Object[] { ((MapTryLockCodec.RequestParameters)this.parameters).key }; 
    return new Object[] { ((MapTryLockCodec.RequestParameters)this.parameters).key, Long.valueOf(((MapTryLockCodec.RequestParameters)this.parameters).timeout), TimeUnit.MILLISECONDS };
  }
}
