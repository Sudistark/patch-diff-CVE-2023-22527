package com.hazelcast.client.impl.protocol.task.map;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.MapExecuteOnAllKeysCodec;
import com.hazelcast.instance.Node;
import com.hazelcast.map.EntryProcessor;
import com.hazelcast.map.impl.MapEntries;
import com.hazelcast.map.impl.MapService;
import com.hazelcast.map.impl.operation.MapOperationProvider;
import com.hazelcast.nio.Connection;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.security.permission.MapPermission;
import com.hazelcast.spi.OperationFactory;
import java.security.Permission;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class MapExecuteOnAllKeysMessageTask extends AbstractMapAllPartitionsMessageTask<MapExecuteOnAllKeysCodec.RequestParameters> {
  public MapExecuteOnAllKeysMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected OperationFactory createOperationFactory() {
    MapOperationProvider operationProvider = getOperationProvider(((MapExecuteOnAllKeysCodec.RequestParameters)this.parameters).name);
    EntryProcessor entryProcessor = (EntryProcessor)this.serializationService.toObject(((MapExecuteOnAllKeysCodec.RequestParameters)this.parameters).entryProcessor);
    return operationProvider.createPartitionWideEntryOperationFactory(((MapExecuteOnAllKeysCodec.RequestParameters)this.parameters).name, entryProcessor);
  }
  
  protected Object reduce(Map<Integer, Object> map) {
    List<Map.Entry<Data, Data>> dataMap = new ArrayList<Map.Entry<Data, Data>>();
    MapService mapService = (MapService)getService("hz:impl:mapService");
    for (Object o : map.values()) {
      if (o != null) {
        MapEntries entries = (MapEntries)mapService.getMapServiceContext().toObject(o);
        entries.putAllToList(dataMap);
      } 
    } 
    return dataMap;
  }
  
  protected MapExecuteOnAllKeysCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return MapExecuteOnAllKeysCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return MapExecuteOnAllKeysCodec.encodeResponse((List)response); }
  
  public String getServiceName() { return "hz:impl:mapService"; }
  
  public Permission getRequiredPermission() { return new MapPermission(((MapExecuteOnAllKeysCodec.RequestParameters)this.parameters).name, new String[] { "put", "remove" }); }
  
  public String getDistributedObjectName() { return ((MapExecuteOnAllKeysCodec.RequestParameters)this.parameters).name; }
  
  public String getMethodName() { return "executeOnEntries"; }
  
  public Object[] getParameters() { return new Object[] { ((MapExecuteOnAllKeysCodec.RequestParameters)this.parameters).entryProcessor }; }
}
