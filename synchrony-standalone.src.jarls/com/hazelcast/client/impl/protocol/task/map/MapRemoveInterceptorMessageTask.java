package com.hazelcast.client.impl.protocol.task.map;

import com.hazelcast.client.impl.RemoveInterceptorOperationSupplier;
import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.MapRemoveInterceptorCodec;
import com.hazelcast.client.impl.protocol.task.AbstractMultiTargetMessageTask;
import com.hazelcast.core.Member;
import com.hazelcast.instance.Node;
import com.hazelcast.nio.Connection;
import com.hazelcast.security.permission.MapPermission;
import com.hazelcast.spi.Operation;
import com.hazelcast.util.function.Supplier;
import java.security.Permission;
import java.util.Collection;
import java.util.Map;

public class MapRemoveInterceptorMessageTask extends AbstractMultiTargetMessageTask<MapRemoveInterceptorCodec.RequestParameters> {
  public MapRemoveInterceptorMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected Supplier<Operation> createOperationSupplier() { return new RemoveInterceptorOperationSupplier(((MapRemoveInterceptorCodec.RequestParameters)this.parameters).id, ((MapRemoveInterceptorCodec.RequestParameters)this.parameters).name); }
  
  protected Object reduce(Map<Member, Object> map) throws Throwable {
    for (Object result : map.values()) {
      if (result instanceof Throwable)
        throw (Throwable)result; 
    } 
    return Boolean.valueOf(true);
  }
  
  public Collection<Member> getTargets() { return this.nodeEngine.getClusterService().getMembers(); }
  
  protected MapRemoveInterceptorCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return MapRemoveInterceptorCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return MapRemoveInterceptorCodec.encodeResponse(((Boolean)response).booleanValue()); }
  
  public String getServiceName() { return "hz:impl:mapService"; }
  
  public Permission getRequiredPermission() { return new MapPermission(((MapRemoveInterceptorCodec.RequestParameters)this.parameters).name, new String[] { "intercept" }); }
  
  public String getDistributedObjectName() { return ((MapRemoveInterceptorCodec.RequestParameters)this.parameters).name; }
  
  public String getMethodName() { return "removeInterceptor"; }
  
  public Object[] getParameters() { return new Object[] { ((MapRemoveInterceptorCodec.RequestParameters)this.parameters).id }; }
}
