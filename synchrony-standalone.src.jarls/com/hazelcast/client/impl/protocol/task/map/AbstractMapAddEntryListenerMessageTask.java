package com.hazelcast.client.impl.protocol.task.map;

import com.hazelcast.client.impl.ClientEndpoint;
import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.task.AbstractCallableMessageTask;
import com.hazelcast.client.impl.protocol.task.ListenerMessageTask;
import com.hazelcast.instance.Node;
import com.hazelcast.map.impl.MapService;
import com.hazelcast.map.impl.MapServiceContext;
import com.hazelcast.nio.Connection;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.security.permission.MapPermission;
import com.hazelcast.spi.EventFilter;
import java.security.Permission;

public abstract class AbstractMapAddEntryListenerMessageTask<Parameter> extends AbstractCallableMessageTask<Parameter> implements ListenerMessageTask {
  public AbstractMapAddEntryListenerMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected Object call() {
    String registrationId;
    MapService mapService = (MapService)getService("hz:impl:mapService");
    Object listener = newMapListener();
    MapServiceContext mapServiceContext = mapService.getMapServiceContext();
    String name = getDistributedObjectName();
    EventFilter eventFilter = getEventFilter();
    if (isLocalOnly()) {
      registrationId = mapServiceContext.addLocalEventListener(listener, eventFilter, name);
    } else {
      registrationId = mapServiceContext.addEventListener(listener, eventFilter, name);
    } 
    this.endpoint.addListenerDestroyAction("hz:impl:mapService", name, registrationId);
    return registrationId;
  }
  
  protected Object newMapListener() { return new ClientMapListener(this, null); }
  
  public String getServiceName() { return "hz:impl:mapService"; }
  
  public String getMethodName() { return "addEntryListener"; }
  
  public Permission getRequiredPermission() { return new MapPermission(getDistributedObjectName(), new String[] { "listen" }); }
  
  protected abstract EventFilter getEventFilter();
  
  protected abstract boolean isLocalOnly();
  
  protected abstract ClientMessage encodeEvent(Data paramData1, Data paramData2, Data paramData3, Data paramData4, int paramInt1, String paramString, int paramInt2);
}
