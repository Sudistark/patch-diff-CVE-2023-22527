package com.hazelcast.client.impl.protocol.task.map;

import com.hazelcast.aggregation.Aggregator;
import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.instance.Node;
import com.hazelcast.map.impl.query.QueryResult;
import com.hazelcast.map.impl.query.QueryResultUtils;
import com.hazelcast.map.impl.query.Result;
import com.hazelcast.nio.Connection;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.query.Predicate;
import com.hazelcast.query.TruePredicate;
import com.hazelcast.util.IterationType;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Set;

public abstract class DefaultMapProjectMessageTask<P> extends AbstractMapQueryMessageTask<P, QueryResult, QueryResult, List<Data>> {
  public DefaultMapProjectMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected IterationType getIterationType() { return IterationType.VALUE; }
  
  protected Aggregator<?, ?> getAggregator() { return null; }
  
  protected Predicate getPredicate() { return TruePredicate.INSTANCE; }
  
  protected void extractAndAppendResult(Collection<QueryResult> results, QueryResult result) { results.add(result); }
  
  protected List<Data> reduce(Collection<QueryResult> results) {
    if (results.isEmpty())
      return Collections.emptyList(); 
    QueryResult combinedResult = null;
    for (QueryResult result : results) {
      if (combinedResult == null) {
        combinedResult = result;
        continue;
      } 
      combinedResult.combine(result);
    } 
    Set result = QueryResultUtils.transformToSet(this.nodeEngine.getSerializationService(), combinedResult, 
        getPredicate(), IterationType.VALUE, false, true);
    List<Data> serialized = new ArrayList<Data>(result.size());
    for (Object row : result)
      serialized.add((Data)row); 
    return serialized;
  }
}
