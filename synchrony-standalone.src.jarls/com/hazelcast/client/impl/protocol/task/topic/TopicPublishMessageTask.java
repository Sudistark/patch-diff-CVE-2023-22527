package com.hazelcast.client.impl.protocol.task.topic;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.TopicPublishCodec;
import com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask;
import com.hazelcast.instance.Node;
import com.hazelcast.nio.Connection;
import com.hazelcast.security.permission.TopicPermission;
import com.hazelcast.spi.Operation;
import com.hazelcast.topic.impl.PublishOperation;
import java.security.Permission;

public class TopicPublishMessageTask extends AbstractPartitionMessageTask<TopicPublishCodec.RequestParameters> {
  public TopicPublishMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected Operation prepareOperation() { return new PublishOperation(((TopicPublishCodec.RequestParameters)this.parameters).name, ((TopicPublishCodec.RequestParameters)this.parameters).message); }
  
  protected TopicPublishCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return TopicPublishCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return TopicPublishCodec.encodeResponse(); }
  
  public String getServiceName() { return "hz:impl:topicService"; }
  
  public Permission getRequiredPermission() { return new TopicPermission(((TopicPublishCodec.RequestParameters)this.parameters).name, new String[] { "publish" }); }
  
  public String getDistributedObjectName() { return ((TopicPublishCodec.RequestParameters)this.parameters).name; }
  
  public String getMethodName() { return "publish"; }
  
  public Object[] getParameters() { return new Object[] { ((TopicPublishCodec.RequestParameters)this.parameters).message }; }
}
