package com.hazelcast.client.impl.protocol.task.atomiclong;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.AtomicLongCompareAndSetCodec;
import com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask;
import com.hazelcast.concurrent.atomiclong.operations.CompareAndSetOperation;
import com.hazelcast.instance.Node;
import com.hazelcast.nio.Connection;
import com.hazelcast.security.permission.AtomicLongPermission;
import com.hazelcast.spi.Operation;
import java.security.Permission;

public class AtomicLongCompareAndSetMessageTask extends AbstractPartitionMessageTask<AtomicLongCompareAndSetCodec.RequestParameters> {
  public AtomicLongCompareAndSetMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected Operation prepareOperation() { return new CompareAndSetOperation(((AtomicLongCompareAndSetCodec.RequestParameters)this.parameters).name, ((AtomicLongCompareAndSetCodec.RequestParameters)this.parameters).expected, ((AtomicLongCompareAndSetCodec.RequestParameters)this.parameters).updated); }
  
  protected AtomicLongCompareAndSetCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return AtomicLongCompareAndSetCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return AtomicLongCompareAndSetCodec.encodeResponse(((Boolean)response).booleanValue()); }
  
  public String getServiceName() { return "hz:impl:atomicLongService"; }
  
  public Permission getRequiredPermission() { return new AtomicLongPermission(((AtomicLongCompareAndSetCodec.RequestParameters)this.parameters).name, new String[] { "modify" }); }
  
  public String getDistributedObjectName() { return ((AtomicLongCompareAndSetCodec.RequestParameters)this.parameters).name; }
  
  public String getMethodName() { return "compareAndSet"; }
  
  public Object[] getParameters() { return new Object[] { Long.valueOf(((AtomicLongCompareAndSetCodec.RequestParameters)this.parameters).expected), Long.valueOf(((AtomicLongCompareAndSetCodec.RequestParameters)this.parameters).updated) }; }
}
