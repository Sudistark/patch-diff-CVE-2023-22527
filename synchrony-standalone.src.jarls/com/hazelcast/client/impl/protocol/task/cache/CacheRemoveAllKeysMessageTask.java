package com.hazelcast.client.impl.protocol.task.cache;

import com.hazelcast.cache.impl.CacheClearResponse;
import com.hazelcast.cache.impl.CacheOperationProvider;
import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.CacheRemoveAllKeysCodec;
import com.hazelcast.instance.Node;
import com.hazelcast.nio.Connection;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.security.permission.CachePermission;
import com.hazelcast.spi.OperationFactory;
import java.security.Permission;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import javax.cache.CacheException;

public class CacheRemoveAllKeysMessageTask extends AbstractCacheAllPartitionsTask<CacheRemoveAllKeysCodec.RequestParameters> {
  public CacheRemoveAllKeysMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected CacheRemoveAllKeysCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return CacheRemoveAllKeysCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return CacheRemoveAllKeysCodec.encodeResponse(); }
  
  protected OperationFactory createOperationFactory() {
    CacheOperationProvider operationProvider = getOperationProvider(((CacheRemoveAllKeysCodec.RequestParameters)this.parameters).name);
    Set<Data> keys = new HashSet<Data>(((CacheRemoveAllKeysCodec.RequestParameters)this.parameters).keys);
    return operationProvider.createRemoveAllOperationFactory(keys, Integer.valueOf(((CacheRemoveAllKeysCodec.RequestParameters)this.parameters).completionId));
  }
  
  protected ClientMessage reduce(Map<Integer, Object> map) {
    for (Map.Entry<Integer, Object> entry : map.entrySet()) {
      if (entry.getValue() == null)
        continue; 
      CacheClearResponse cacheClearResponse = (CacheClearResponse)this.nodeEngine.toObject(entry.getValue());
      Object response = cacheClearResponse.getResponse();
      if (response instanceof CacheException)
        throw (CacheException)response; 
    } 
    return null;
  }
  
  public Permission getRequiredPermission() { return new CachePermission(((CacheRemoveAllKeysCodec.RequestParameters)this.parameters).name, new String[] { "remove" }); }
  
  public String getDistributedObjectName() { return ((CacheRemoveAllKeysCodec.RequestParameters)this.parameters).name; }
  
  public Object[] getParameters() { return new Object[] { ((CacheRemoveAllKeysCodec.RequestParameters)this.parameters).keys }; }
  
  public String getMethodName() { return "removeAll"; }
}
