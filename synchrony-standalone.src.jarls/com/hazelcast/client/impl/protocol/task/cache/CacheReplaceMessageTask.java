package com.hazelcast.client.impl.protocol.task.cache;

import com.hazelcast.cache.impl.CacheOperationProvider;
import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.CacheReplaceCodec;
import com.hazelcast.instance.Node;
import com.hazelcast.nio.Connection;
import com.hazelcast.security.permission.CachePermission;
import com.hazelcast.spi.Operation;
import java.security.Permission;
import javax.cache.expiry.ExpiryPolicy;

public class CacheReplaceMessageTask extends AbstractCacheMessageTask<CacheReplaceCodec.RequestParameters> {
  public CacheReplaceMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected Operation prepareOperation() {
    CacheOperationProvider operationProvider = getOperationProvider(((CacheReplaceCodec.RequestParameters)this.parameters).name);
    ExpiryPolicy expiryPolicy = (ExpiryPolicy)this.serializationService.toObject(((CacheReplaceCodec.RequestParameters)this.parameters).expiryPolicy);
    return operationProvider
      .createReplaceOperation(((CacheReplaceCodec.RequestParameters)this.parameters).key, ((CacheReplaceCodec.RequestParameters)this.parameters).oldValue, ((CacheReplaceCodec.RequestParameters)this.parameters).newValue, expiryPolicy, ((CacheReplaceCodec.RequestParameters)this.parameters).completionId);
  }
  
  protected CacheReplaceCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return CacheReplaceCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return CacheReplaceCodec.encodeResponse(this.serializationService.toData(response)); }
  
  public Permission getRequiredPermission() { return new CachePermission(((CacheReplaceCodec.RequestParameters)this.parameters).name, new String[] { "put" }); }
  
  public String getDistributedObjectName() { return ((CacheReplaceCodec.RequestParameters)this.parameters).name; }
  
  public Object[] getParameters() {
    if (((CacheReplaceCodec.RequestParameters)this.parameters).expiryPolicy == null && ((CacheReplaceCodec.RequestParameters)this.parameters).oldValue != null)
      return new Object[] { ((CacheReplaceCodec.RequestParameters)this.parameters).key, ((CacheReplaceCodec.RequestParameters)this.parameters).oldValue, ((CacheReplaceCodec.RequestParameters)this.parameters).newValue }; 
    if (((CacheReplaceCodec.RequestParameters)this.parameters).oldValue == null && ((CacheReplaceCodec.RequestParameters)this.parameters).expiryPolicy == null)
      return new Object[] { ((CacheReplaceCodec.RequestParameters)this.parameters).key, ((CacheReplaceCodec.RequestParameters)this.parameters).newValue }; 
    if (((CacheReplaceCodec.RequestParameters)this.parameters).oldValue == null && ((CacheReplaceCodec.RequestParameters)this.parameters).expiryPolicy != null)
      return new Object[] { ((CacheReplaceCodec.RequestParameters)this.parameters).key, ((CacheReplaceCodec.RequestParameters)this.parameters).newValue, ((CacheReplaceCodec.RequestParameters)this.parameters).expiryPolicy }; 
    return new Object[] { ((CacheReplaceCodec.RequestParameters)this.parameters).key, ((CacheReplaceCodec.RequestParameters)this.parameters).oldValue, ((CacheReplaceCodec.RequestParameters)this.parameters).newValue, ((CacheReplaceCodec.RequestParameters)this.parameters).expiryPolicy };
  }
  
  public String getMethodName() { return "replace"; }
}
