package com.hazelcast.client.impl.protocol.task.cache;

import com.hazelcast.cache.impl.CacheService;
import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.CacheAddEntryListenerCodec;
import com.hazelcast.client.impl.protocol.task.AbstractCallableMessageTask;
import com.hazelcast.client.impl.protocol.task.ListenerMessageTask;
import com.hazelcast.instance.Node;
import com.hazelcast.nio.Connection;
import com.hazelcast.security.permission.CachePermission;
import java.security.Permission;

public class CacheAddEntryListenerMessageTask extends AbstractCallableMessageTask<CacheAddEntryListenerCodec.RequestParameters> implements ListenerMessageTask {
  public CacheAddEntryListenerMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected Object call() {
    CacheService service = (CacheService)getService("hz:impl:cacheService");
    CacheEntryListener cacheEntryListener = new CacheEntryListener(this.endpoint, this, null);
    String registrationId = service.registerListener(((CacheAddEntryListenerCodec.RequestParameters)this.parameters).name, cacheEntryListener, cacheEntryListener, ((CacheAddEntryListenerCodec.RequestParameters)this.parameters).localOnly);
    this.endpoint.addDestroyAction(registrationId, new Object(this, service, registrationId));
    return registrationId;
  }
  
  protected CacheAddEntryListenerCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return CacheAddEntryListenerCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return CacheAddEntryListenerCodec.encodeResponse((String)response); }
  
  public String getDistributedObjectName() { return ((CacheAddEntryListenerCodec.RequestParameters)this.parameters).name; }
  
  public Object[] getParameters() { return null; }
  
  public String getServiceName() { return "hz:impl:cacheService"; }
  
  public Permission getRequiredPermission() { return new CachePermission(((CacheAddEntryListenerCodec.RequestParameters)this.parameters).name, new String[] { "listen" }); }
  
  public String getMethodName() { return "registerCacheEntryListener"; }
}
