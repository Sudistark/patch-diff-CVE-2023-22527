package com.hazelcast.client.impl.protocol.task.cache;

import com.hazelcast.cache.impl.journal.CacheEventJournalReadOperation;
import com.hazelcast.cache.journal.EventJournalCacheEvent;
import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.CacheEventJournalReadCodec;
import com.hazelcast.instance.Node;
import com.hazelcast.nio.Connection;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.ringbuffer.impl.ReadResultSetImpl;
import com.hazelcast.security.permission.CachePermission;
import com.hazelcast.spi.Operation;
import com.hazelcast.util.function.Function;
import com.hazelcast.util.function.Predicate;
import java.security.Permission;
import java.util.ArrayList;
import java.util.List;

public class CacheEventJournalReadTask<K, V, T> extends AbstractCacheMessageTask<CacheEventJournalReadCodec.RequestParameters> {
  public CacheEventJournalReadTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected Operation prepareOperation() {
    Function<? super EventJournalCacheEvent<K, V>, T> projection = (Function)this.serializationService.toObject(((CacheEventJournalReadCodec.RequestParameters)this.parameters).projection);
    Predicate<? super EventJournalCacheEvent<K, V>> predicate = (Predicate)this.serializationService.toObject(((CacheEventJournalReadCodec.RequestParameters)this.parameters).predicate);
    return new CacheEventJournalReadOperation(((CacheEventJournalReadCodec.RequestParameters)this.parameters).name, ((CacheEventJournalReadCodec.RequestParameters)this.parameters).startSequence, ((CacheEventJournalReadCodec.RequestParameters)this.parameters).minSize, ((CacheEventJournalReadCodec.RequestParameters)this.parameters).maxSize, predicate, projection);
  }
  
  protected CacheEventJournalReadCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return CacheEventJournalReadCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) {
    ReadResultSetImpl resultSet = (ReadResultSetImpl)this.nodeEngine.getSerializationService().toObject(response);
    List<Data> items = new ArrayList<Data>(resultSet.size());
    long[] seqs = new long[resultSet.size()];
    Data[] dataItems = resultSet.getDataItems();
    for (int k = 0; k < resultSet.size(); k++) {
      items.add(dataItems[k]);
      seqs[k] = resultSet.getSequence(k);
    } 
    return CacheEventJournalReadCodec.encodeResponse(resultSet
        .readCount(), items, seqs, resultSet.getNextSequenceToReadFrom());
  }
  
  public final String getServiceName() { return "hz:impl:cacheService"; }
  
  public Permission getRequiredPermission() { return new CachePermission(((CacheEventJournalReadCodec.RequestParameters)this.parameters).name, new String[] { "read" }); }
  
  public String getDistributedObjectName() { return ((CacheEventJournalReadCodec.RequestParameters)this.parameters).name; }
  
  public String getMethodName() { return "readFromEventJournal"; }
  
  public Object[] getParameters() {
    return new Object[] { Long.valueOf(((CacheEventJournalReadCodec.RequestParameters)this.parameters).startSequence), Integer.valueOf(((CacheEventJournalReadCodec.RequestParameters)this.parameters).maxSize), Integer.valueOf(getPartitionId()), ((CacheEventJournalReadCodec.RequestParameters)this.parameters).predicate, ((CacheEventJournalReadCodec.RequestParameters)this.parameters).projection };
  }
}
