package com.hazelcast.client.impl.protocol.task.cache;

import com.hazelcast.cache.impl.CacheService;
import com.hazelcast.cache.impl.event.CachePartitionLostEventFilter;
import com.hazelcast.cache.impl.event.InternalCachePartitionLostListenerAdapter;
import com.hazelcast.client.impl.ClientEndpoint;
import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.CacheAddPartitionLostListenerCodec;
import com.hazelcast.client.impl.protocol.task.AbstractCallableMessageTask;
import com.hazelcast.client.impl.protocol.task.ListenerMessageTask;
import com.hazelcast.instance.Node;
import com.hazelcast.nio.Connection;
import com.hazelcast.spi.EventRegistration;
import com.hazelcast.spi.EventService;
import java.security.Permission;

public class CacheAddPartitionLostListenerMessageTask extends AbstractCallableMessageTask<CacheAddPartitionLostListenerCodec.RequestParameters> implements ListenerMessageTask {
  public CacheAddPartitionLostListenerMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected Object call() {
    EventRegistration registration;
    Object object = new Object(this);
    InternalCachePartitionLostListenerAdapter listenerAdapter = new InternalCachePartitionLostListenerAdapter(object);
    CachePartitionLostEventFilter cachePartitionLostEventFilter = new CachePartitionLostEventFilter();
    CacheService service = (CacheService)getService("hz:impl:cacheService");
    EventService eventService = service.getNodeEngine().getEventService();
    if (((CacheAddPartitionLostListenerCodec.RequestParameters)this.parameters).localOnly) {
      registration = eventService.registerLocalListener("hz:impl:cacheService", ((CacheAddPartitionLostListenerCodec.RequestParameters)this.parameters).name, cachePartitionLostEventFilter, listenerAdapter);
    } else {
      registration = eventService.registerListener("hz:impl:cacheService", ((CacheAddPartitionLostListenerCodec.RequestParameters)this.parameters).name, cachePartitionLostEventFilter, listenerAdapter);
    } 
    String registrationId = registration.getId();
    this.endpoint.addListenerDestroyAction("hz:impl:cacheService", ((CacheAddPartitionLostListenerCodec.RequestParameters)this.parameters).name, registrationId);
    return registrationId;
  }
  
  protected CacheAddPartitionLostListenerCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return CacheAddPartitionLostListenerCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return CacheAddPartitionLostListenerCodec.encodeResponse((String)response); }
  
  public String getServiceName() { return "hz:impl:cacheService"; }
  
  public String getMethodName() { return "addCachePartitionLostListener"; }
  
  public Object[] getParameters() { return null; }
  
  public Permission getRequiredPermission() { return null; }
  
  public String getDistributedObjectName() { return ((CacheAddPartitionLostListenerCodec.RequestParameters)this.parameters).name; }
}
