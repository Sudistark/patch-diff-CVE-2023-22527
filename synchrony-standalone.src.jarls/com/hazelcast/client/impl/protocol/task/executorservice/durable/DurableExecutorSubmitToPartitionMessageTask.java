package com.hazelcast.client.impl.protocol.task.executorservice.durable;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.DurableExecutorSubmitToPartitionCodec;
import com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask;
import com.hazelcast.core.ExecutionCallback;
import com.hazelcast.durableexecutor.impl.operations.TaskOperation;
import com.hazelcast.instance.Node;
import com.hazelcast.nio.Connection;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.security.SecureCallable;
import com.hazelcast.security.SecurityContext;
import com.hazelcast.spi.Operation;
import java.security.Permission;
import java.util.concurrent.Callable;
import javax.security.auth.Subject;

public class DurableExecutorSubmitToPartitionMessageTask extends AbstractPartitionMessageTask<DurableExecutorSubmitToPartitionCodec.RequestParameters> implements ExecutionCallback {
  public DurableExecutorSubmitToPartitionMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected Operation prepareOperation() {
    SecurityContext securityContext = this.clientEngine.getSecurityContext();
    Data callableData = ((DurableExecutorSubmitToPartitionCodec.RequestParameters)this.parameters).callable;
    if (securityContext != null) {
      Subject subject = this.endpoint.getSubject();
      Callable callable = (Callable)this.serializationService.toObject(((DurableExecutorSubmitToPartitionCodec.RequestParameters)this.parameters).callable);
      SecureCallable secureCallable = securityContext.createSecureCallable(subject, callable);
      callableData = this.serializationService.toData(secureCallable);
    } 
    return new TaskOperation(((DurableExecutorSubmitToPartitionCodec.RequestParameters)this.parameters).name, callableData);
  }
  
  protected DurableExecutorSubmitToPartitionCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return DurableExecutorSubmitToPartitionCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return DurableExecutorSubmitToPartitionCodec.encodeResponse(((Integer)response).intValue()); }
  
  public String getServiceName() { return "hz:impl:durableExecutorService"; }
  
  public Permission getRequiredPermission() { return null; }
  
  public String getDistributedObjectName() { return ((DurableExecutorSubmitToPartitionCodec.RequestParameters)this.parameters).name; }
  
  public String getMethodName() { return null; }
  
  public Object[] getParameters() { return null; }
}
