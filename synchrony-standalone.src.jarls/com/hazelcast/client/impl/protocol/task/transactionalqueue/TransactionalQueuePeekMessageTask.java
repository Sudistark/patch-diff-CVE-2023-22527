package com.hazelcast.client.impl.protocol.task.transactionalqueue;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.TransactionalQueuePeekCodec;
import com.hazelcast.client.impl.protocol.task.AbstractTransactionalMessageTask;
import com.hazelcast.core.TransactionalQueue;
import com.hazelcast.instance.Node;
import com.hazelcast.nio.Connection;
import com.hazelcast.security.permission.QueuePermission;
import com.hazelcast.transaction.TransactionContext;
import java.security.Permission;
import java.util.concurrent.TimeUnit;

public class TransactionalQueuePeekMessageTask extends AbstractTransactionalMessageTask<TransactionalQueuePeekCodec.RequestParameters> {
  public TransactionalQueuePeekMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected Object innerCall() throws Exception {
    TransactionContext context = this.endpoint.getTransactionContext(((TransactionalQueuePeekCodec.RequestParameters)this.parameters).txnId);
    TransactionalQueue queue = context.getQueue(((TransactionalQueuePeekCodec.RequestParameters)this.parameters).name);
    Object item = queue.peek(((TransactionalQueuePeekCodec.RequestParameters)this.parameters).timeout, TimeUnit.MILLISECONDS);
    return this.serializationService.toData(item);
  }
  
  protected long getClientThreadId() { return ((TransactionalQueuePeekCodec.RequestParameters)this.parameters).threadId; }
  
  protected TransactionalQueuePeekCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return TransactionalQueuePeekCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return TransactionalQueuePeekCodec.encodeResponse(this.serializationService.toData(response)); }
  
  public String getServiceName() { return "hz:impl:queueService"; }
  
  public Permission getRequiredPermission() { return new QueuePermission(((TransactionalQueuePeekCodec.RequestParameters)this.parameters).name, new String[] { "read" }); }
  
  public String getDistributedObjectName() { return ((TransactionalQueuePeekCodec.RequestParameters)this.parameters).name; }
  
  public String getMethodName() { return "peek"; }
  
  public Object[] getParameters() { return new Object[] { Long.valueOf(((TransactionalQueuePeekCodec.RequestParameters)this.parameters).timeout), TimeUnit.MILLISECONDS }; }
}
