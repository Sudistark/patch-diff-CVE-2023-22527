package com.hazelcast.client.impl.protocol.task.transactionalqueue;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.TransactionalQueueTakeCodec;
import com.hazelcast.client.impl.protocol.task.AbstractTransactionalMessageTask;
import com.hazelcast.core.TransactionalQueue;
import com.hazelcast.instance.Node;
import com.hazelcast.nio.Connection;
import com.hazelcast.security.permission.QueuePermission;
import com.hazelcast.transaction.TransactionContext;
import java.security.Permission;

public class TransactionalQueueTakeMessageTask extends AbstractTransactionalMessageTask<TransactionalQueueTakeCodec.RequestParameters> {
  public TransactionalQueueTakeMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected Object innerCall() throws Exception {
    TransactionContext context = this.endpoint.getTransactionContext(((TransactionalQueueTakeCodec.RequestParameters)this.parameters).txnId);
    TransactionalQueue queue = context.getQueue(((TransactionalQueueTakeCodec.RequestParameters)this.parameters).name);
    Object item = queue.take();
    return this.serializationService.toData(item);
  }
  
  protected long getClientThreadId() { return ((TransactionalQueueTakeCodec.RequestParameters)this.parameters).threadId; }
  
  protected TransactionalQueueTakeCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return TransactionalQueueTakeCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return TransactionalQueueTakeCodec.encodeResponse(this.serializationService.toData(response)); }
  
  public String getServiceName() { return "hz:impl:queueService"; }
  
  public Permission getRequiredPermission() { return new QueuePermission(((TransactionalQueueTakeCodec.RequestParameters)this.parameters).name, new String[] { "remove" }); }
  
  public String getDistributedObjectName() { return ((TransactionalQueueTakeCodec.RequestParameters)this.parameters).name; }
  
  public String getMethodName() { return "take"; }
  
  public Object[] getParameters() { return null; }
}
