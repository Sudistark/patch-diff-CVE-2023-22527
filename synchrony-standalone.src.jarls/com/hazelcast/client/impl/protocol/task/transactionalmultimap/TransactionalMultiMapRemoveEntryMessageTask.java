package com.hazelcast.client.impl.protocol.task.transactionalmultimap;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapRemoveEntryCodec;
import com.hazelcast.client.impl.protocol.task.AbstractTransactionalMessageTask;
import com.hazelcast.core.TransactionalMultiMap;
import com.hazelcast.instance.Node;
import com.hazelcast.nio.Connection;
import com.hazelcast.security.permission.MultiMapPermission;
import com.hazelcast.transaction.TransactionContext;
import java.security.Permission;

public class TransactionalMultiMapRemoveEntryMessageTask extends AbstractTransactionalMessageTask<TransactionalMultiMapRemoveEntryCodec.RequestParameters> {
  public TransactionalMultiMapRemoveEntryMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected Object innerCall() throws Exception {
    TransactionContext context = this.endpoint.getTransactionContext(((TransactionalMultiMapRemoveEntryCodec.RequestParameters)this.parameters).txnId);
    TransactionalMultiMap<Object, Object> multiMap = context.getMultiMap(((TransactionalMultiMapRemoveEntryCodec.RequestParameters)this.parameters).name);
    return Boolean.valueOf(multiMap.remove(((TransactionalMultiMapRemoveEntryCodec.RequestParameters)this.parameters).key, ((TransactionalMultiMapRemoveEntryCodec.RequestParameters)this.parameters).value));
  }
  
  protected long getClientThreadId() { return ((TransactionalMultiMapRemoveEntryCodec.RequestParameters)this.parameters).threadId; }
  
  protected TransactionalMultiMapRemoveEntryCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return TransactionalMultiMapRemoveEntryCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return TransactionalMultiMapRemoveEntryCodec.encodeResponse(((Boolean)response).booleanValue()); }
  
  public String getServiceName() { return "hz:impl:multiMapService"; }
  
  public Permission getRequiredPermission() { return new MultiMapPermission(((TransactionalMultiMapRemoveEntryCodec.RequestParameters)this.parameters).name, new String[] { "put" }); }
  
  public String getDistributedObjectName() { return ((TransactionalMultiMapRemoveEntryCodec.RequestParameters)this.parameters).name; }
  
  public String getMethodName() { return "removeEntry"; }
  
  public Object[] getParameters() { return new Object[] { ((TransactionalMultiMapRemoveEntryCodec.RequestParameters)this.parameters).key, ((TransactionalMultiMapRemoveEntryCodec.RequestParameters)this.parameters).value }; }
}
