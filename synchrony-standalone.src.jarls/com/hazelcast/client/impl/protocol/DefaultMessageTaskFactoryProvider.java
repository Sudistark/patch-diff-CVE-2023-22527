package com.hazelcast.client.impl.protocol;

import com.hazelcast.client.impl.protocol.codec.AtomicLongAddAndGetCodec;
import com.hazelcast.client.impl.protocol.codec.AtomicLongAlterAndGetCodec;
import com.hazelcast.client.impl.protocol.codec.AtomicLongAlterCodec;
import com.hazelcast.client.impl.protocol.codec.AtomicLongApplyCodec;
import com.hazelcast.client.impl.protocol.codec.AtomicLongCompareAndSetCodec;
import com.hazelcast.client.impl.protocol.codec.AtomicLongDecrementAndGetCodec;
import com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndAddCodec;
import com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndAlterCodec;
import com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndIncrementCodec;
import com.hazelcast.client.impl.protocol.codec.AtomicLongGetAndSetCodec;
import com.hazelcast.client.impl.protocol.codec.AtomicLongGetCodec;
import com.hazelcast.client.impl.protocol.codec.AtomicLongIncrementAndGetCodec;
import com.hazelcast.client.impl.protocol.codec.AtomicLongSetCodec;
import com.hazelcast.client.impl.protocol.codec.AtomicReferenceAlterAndGetCodec;
import com.hazelcast.client.impl.protocol.codec.AtomicReferenceAlterCodec;
import com.hazelcast.client.impl.protocol.codec.AtomicReferenceApplyCodec;
import com.hazelcast.client.impl.protocol.codec.AtomicReferenceClearCodec;
import com.hazelcast.client.impl.protocol.codec.AtomicReferenceCompareAndSetCodec;
import com.hazelcast.client.impl.protocol.codec.AtomicReferenceContainsCodec;
import com.hazelcast.client.impl.protocol.codec.AtomicReferenceGetAndAlterCodec;
import com.hazelcast.client.impl.protocol.codec.AtomicReferenceGetAndSetCodec;
import com.hazelcast.client.impl.protocol.codec.AtomicReferenceGetCodec;
import com.hazelcast.client.impl.protocol.codec.AtomicReferenceIsNullCodec;
import com.hazelcast.client.impl.protocol.codec.AtomicReferenceSetAndGetCodec;
import com.hazelcast.client.impl.protocol.codec.AtomicReferenceSetCodec;
import com.hazelcast.client.impl.protocol.codec.CPAtomicLongAddAndGetCodec;
import com.hazelcast.client.impl.protocol.codec.CPAtomicLongAlterCodec;
import com.hazelcast.client.impl.protocol.codec.CPAtomicLongApplyCodec;
import com.hazelcast.client.impl.protocol.codec.CPAtomicLongCompareAndSetCodec;
import com.hazelcast.client.impl.protocol.codec.CPAtomicLongGetAndAddCodec;
import com.hazelcast.client.impl.protocol.codec.CPAtomicLongGetAndSetCodec;
import com.hazelcast.client.impl.protocol.codec.CPAtomicLongGetCodec;
import com.hazelcast.client.impl.protocol.codec.CPAtomicRefApplyCodec;
import com.hazelcast.client.impl.protocol.codec.CPAtomicRefCompareAndSetCodec;
import com.hazelcast.client.impl.protocol.codec.CPAtomicRefContainsCodec;
import com.hazelcast.client.impl.protocol.codec.CPAtomicRefGetCodec;
import com.hazelcast.client.impl.protocol.codec.CPAtomicRefSetCodec;
import com.hazelcast.client.impl.protocol.codec.CPCountDownLatchAwaitCodec;
import com.hazelcast.client.impl.protocol.codec.CPCountDownLatchCountDownCodec;
import com.hazelcast.client.impl.protocol.codec.CPCountDownLatchGetCountCodec;
import com.hazelcast.client.impl.protocol.codec.CPCountDownLatchGetRoundCodec;
import com.hazelcast.client.impl.protocol.codec.CPCountDownLatchTrySetCountCodec;
import com.hazelcast.client.impl.protocol.codec.CPFencedLockGetLockOwnershipCodec;
import com.hazelcast.client.impl.protocol.codec.CPFencedLockLockCodec;
import com.hazelcast.client.impl.protocol.codec.CPFencedLockTryLockCodec;
import com.hazelcast.client.impl.protocol.codec.CPFencedLockUnlockCodec;
import com.hazelcast.client.impl.protocol.codec.CPGroupCreateCPGroupCodec;
import com.hazelcast.client.impl.protocol.codec.CPGroupDestroyCPObjectCodec;
import com.hazelcast.client.impl.protocol.codec.CPSemaphoreAcquireCodec;
import com.hazelcast.client.impl.protocol.codec.CPSemaphoreAvailablePermitsCodec;
import com.hazelcast.client.impl.protocol.codec.CPSemaphoreChangeCodec;
import com.hazelcast.client.impl.protocol.codec.CPSemaphoreDrainCodec;
import com.hazelcast.client.impl.protocol.codec.CPSemaphoreGetSemaphoreTypeCodec;
import com.hazelcast.client.impl.protocol.codec.CPSemaphoreInitCodec;
import com.hazelcast.client.impl.protocol.codec.CPSemaphoreReleaseCodec;
import com.hazelcast.client.impl.protocol.codec.CPSessionCloseSessionCodec;
import com.hazelcast.client.impl.protocol.codec.CPSessionCreateSessionCodec;
import com.hazelcast.client.impl.protocol.codec.CPSessionGenerateThreadIdCodec;
import com.hazelcast.client.impl.protocol.codec.CPSessionHeartbeatSessionCodec;
import com.hazelcast.client.impl.protocol.codec.CacheAddEntryListenerCodec;
import com.hazelcast.client.impl.protocol.codec.CacheAddInvalidationListenerCodec;
import com.hazelcast.client.impl.protocol.codec.CacheAddNearCacheInvalidationListenerCodec;
import com.hazelcast.client.impl.protocol.codec.CacheAddPartitionLostListenerCodec;
import com.hazelcast.client.impl.protocol.codec.CacheAssignAndGetUuidsCodec;
import com.hazelcast.client.impl.protocol.codec.CacheClearCodec;
import com.hazelcast.client.impl.protocol.codec.CacheContainsKeyCodec;
import com.hazelcast.client.impl.protocol.codec.CacheCreateConfigCodec;
import com.hazelcast.client.impl.protocol.codec.CacheDestroyCodec;
import com.hazelcast.client.impl.protocol.codec.CacheEntryProcessorCodec;
import com.hazelcast.client.impl.protocol.codec.CacheEventJournalReadCodec;
import com.hazelcast.client.impl.protocol.codec.CacheEventJournalSubscribeCodec;
import com.hazelcast.client.impl.protocol.codec.CacheFetchNearCacheInvalidationMetadataCodec;
import com.hazelcast.client.impl.protocol.codec.CacheGetAllCodec;
import com.hazelcast.client.impl.protocol.codec.CacheGetAndRemoveCodec;
import com.hazelcast.client.impl.protocol.codec.CacheGetAndReplaceCodec;
import com.hazelcast.client.impl.protocol.codec.CacheGetCodec;
import com.hazelcast.client.impl.protocol.codec.CacheGetConfigCodec;
import com.hazelcast.client.impl.protocol.codec.CacheIterateCodec;
import com.hazelcast.client.impl.protocol.codec.CacheIterateEntriesCodec;
import com.hazelcast.client.impl.protocol.codec.CacheListenerRegistrationCodec;
import com.hazelcast.client.impl.protocol.codec.CacheLoadAllCodec;
import com.hazelcast.client.impl.protocol.codec.CacheManagementConfigCodec;
import com.hazelcast.client.impl.protocol.codec.CachePutAllCodec;
import com.hazelcast.client.impl.protocol.codec.CachePutCodec;
import com.hazelcast.client.impl.protocol.codec.CachePutIfAbsentCodec;
import com.hazelcast.client.impl.protocol.codec.CacheRemoveAllCodec;
import com.hazelcast.client.impl.protocol.codec.CacheRemoveAllKeysCodec;
import com.hazelcast.client.impl.protocol.codec.CacheRemoveCodec;
import com.hazelcast.client.impl.protocol.codec.CacheRemoveEntryListenerCodec;
import com.hazelcast.client.impl.protocol.codec.CacheRemoveInvalidationListenerCodec;
import com.hazelcast.client.impl.protocol.codec.CacheRemovePartitionLostListenerCodec;
import com.hazelcast.client.impl.protocol.codec.CacheReplaceCodec;
import com.hazelcast.client.impl.protocol.codec.CacheSetExpiryPolicyCodec;
import com.hazelcast.client.impl.protocol.codec.CacheSizeCodec;
import com.hazelcast.client.impl.protocol.codec.CardinalityEstimatorAddCodec;
import com.hazelcast.client.impl.protocol.codec.CardinalityEstimatorEstimateCodec;
import com.hazelcast.client.impl.protocol.codec.ClientAddDistributedObjectListenerCodec;
import com.hazelcast.client.impl.protocol.codec.ClientAddMembershipListenerCodec;
import com.hazelcast.client.impl.protocol.codec.ClientAddPartitionListenerCodec;
import com.hazelcast.client.impl.protocol.codec.ClientAddPartitionLostListenerCodec;
import com.hazelcast.client.impl.protocol.codec.ClientAuthenticationCodec;
import com.hazelcast.client.impl.protocol.codec.ClientAuthenticationCustomCodec;
import com.hazelcast.client.impl.protocol.codec.ClientCreateProxiesCodec;
import com.hazelcast.client.impl.protocol.codec.ClientCreateProxyCodec;
import com.hazelcast.client.impl.protocol.codec.ClientDeployClassesCodec;
import com.hazelcast.client.impl.protocol.codec.ClientDestroyProxyCodec;
import com.hazelcast.client.impl.protocol.codec.ClientGetDistributedObjectsCodec;
import com.hazelcast.client.impl.protocol.codec.ClientGetPartitionsCodec;
import com.hazelcast.client.impl.protocol.codec.ClientIsFailoverSupportedCodec;
import com.hazelcast.client.impl.protocol.codec.ClientPingCodec;
import com.hazelcast.client.impl.protocol.codec.ClientRemoveAllListenersCodec;
import com.hazelcast.client.impl.protocol.codec.ClientRemoveDistributedObjectListenerCodec;
import com.hazelcast.client.impl.protocol.codec.ClientRemovePartitionLostListenerCodec;
import com.hazelcast.client.impl.protocol.codec.ClientStatisticsCodec;
import com.hazelcast.client.impl.protocol.codec.ConditionAwaitCodec;
import com.hazelcast.client.impl.protocol.codec.ConditionBeforeAwaitCodec;
import com.hazelcast.client.impl.protocol.codec.ConditionSignalAllCodec;
import com.hazelcast.client.impl.protocol.codec.ConditionSignalCodec;
import com.hazelcast.client.impl.protocol.codec.ContinuousQueryAddListenerCodec;
import com.hazelcast.client.impl.protocol.codec.ContinuousQueryDestroyCacheCodec;
import com.hazelcast.client.impl.protocol.codec.ContinuousQueryMadePublishableCodec;
import com.hazelcast.client.impl.protocol.codec.ContinuousQueryPublisherCreateCodec;
import com.hazelcast.client.impl.protocol.codec.ContinuousQueryPublisherCreateWithValueCodec;
import com.hazelcast.client.impl.protocol.codec.ContinuousQuerySetReadCursorCodec;
import com.hazelcast.client.impl.protocol.codec.CountDownLatchAwaitCodec;
import com.hazelcast.client.impl.protocol.codec.CountDownLatchCountDownCodec;
import com.hazelcast.client.impl.protocol.codec.CountDownLatchGetCountCodec;
import com.hazelcast.client.impl.protocol.codec.CountDownLatchTrySetCountCodec;
import com.hazelcast.client.impl.protocol.codec.DurableExecutorDisposeResultCodec;
import com.hazelcast.client.impl.protocol.codec.DurableExecutorIsShutdownCodec;
import com.hazelcast.client.impl.protocol.codec.DurableExecutorRetrieveAndDisposeResultCodec;
import com.hazelcast.client.impl.protocol.codec.DurableExecutorRetrieveResultCodec;
import com.hazelcast.client.impl.protocol.codec.DurableExecutorShutdownCodec;
import com.hazelcast.client.impl.protocol.codec.DurableExecutorSubmitToPartitionCodec;
import com.hazelcast.client.impl.protocol.codec.DynamicConfigAddCacheConfigCodec;
import com.hazelcast.client.impl.protocol.codec.DynamicConfigAddCardinalityEstimatorConfigCodec;
import com.hazelcast.client.impl.protocol.codec.DynamicConfigAddDurableExecutorConfigCodec;
import com.hazelcast.client.impl.protocol.codec.DynamicConfigAddEventJournalConfigCodec;
import com.hazelcast.client.impl.protocol.codec.DynamicConfigAddExecutorConfigCodec;
import com.hazelcast.client.impl.protocol.codec.DynamicConfigAddFlakeIdGeneratorConfigCodec;
import com.hazelcast.client.impl.protocol.codec.DynamicConfigAddListConfigCodec;
import com.hazelcast.client.impl.protocol.codec.DynamicConfigAddLockConfigCodec;
import com.hazelcast.client.impl.protocol.codec.DynamicConfigAddMapConfigCodec;
import com.hazelcast.client.impl.protocol.codec.DynamicConfigAddMerkleTreeConfigCodec;
import com.hazelcast.client.impl.protocol.codec.DynamicConfigAddMultiMapConfigCodec;
import com.hazelcast.client.impl.protocol.codec.DynamicConfigAddPNCounterConfigCodec;
import com.hazelcast.client.impl.protocol.codec.DynamicConfigAddQueueConfigCodec;
import com.hazelcast.client.impl.protocol.codec.DynamicConfigAddReliableTopicConfigCodec;
import com.hazelcast.client.impl.protocol.codec.DynamicConfigAddReplicatedMapConfigCodec;
import com.hazelcast.client.impl.protocol.codec.DynamicConfigAddRingbufferConfigCodec;
import com.hazelcast.client.impl.protocol.codec.DynamicConfigAddScheduledExecutorConfigCodec;
import com.hazelcast.client.impl.protocol.codec.DynamicConfigAddSemaphoreConfigCodec;
import com.hazelcast.client.impl.protocol.codec.DynamicConfigAddSetConfigCodec;
import com.hazelcast.client.impl.protocol.codec.DynamicConfigAddTopicConfigCodec;
import com.hazelcast.client.impl.protocol.codec.ExecutorServiceCancelOnAddressCodec;
import com.hazelcast.client.impl.protocol.codec.ExecutorServiceCancelOnPartitionCodec;
import com.hazelcast.client.impl.protocol.codec.ExecutorServiceIsShutdownCodec;
import com.hazelcast.client.impl.protocol.codec.ExecutorServiceShutdownCodec;
import com.hazelcast.client.impl.protocol.codec.ExecutorServiceSubmitToAddressCodec;
import com.hazelcast.client.impl.protocol.codec.ExecutorServiceSubmitToPartitionCodec;
import com.hazelcast.client.impl.protocol.codec.FlakeIdGeneratorNewIdBatchCodec;
import com.hazelcast.client.impl.protocol.codec.ListAddAllCodec;
import com.hazelcast.client.impl.protocol.codec.ListAddAllWithIndexCodec;
import com.hazelcast.client.impl.protocol.codec.ListAddCodec;
import com.hazelcast.client.impl.protocol.codec.ListAddListenerCodec;
import com.hazelcast.client.impl.protocol.codec.ListAddWithIndexCodec;
import com.hazelcast.client.impl.protocol.codec.ListClearCodec;
import com.hazelcast.client.impl.protocol.codec.ListCompareAndRemoveAllCodec;
import com.hazelcast.client.impl.protocol.codec.ListCompareAndRetainAllCodec;
import com.hazelcast.client.impl.protocol.codec.ListContainsAllCodec;
import com.hazelcast.client.impl.protocol.codec.ListContainsCodec;
import com.hazelcast.client.impl.protocol.codec.ListGetAllCodec;
import com.hazelcast.client.impl.protocol.codec.ListGetCodec;
import com.hazelcast.client.impl.protocol.codec.ListIndexOfCodec;
import com.hazelcast.client.impl.protocol.codec.ListIsEmptyCodec;
import com.hazelcast.client.impl.protocol.codec.ListIteratorCodec;
import com.hazelcast.client.impl.protocol.codec.ListLastIndexOfCodec;
import com.hazelcast.client.impl.protocol.codec.ListListIteratorCodec;
import com.hazelcast.client.impl.protocol.codec.ListRemoveCodec;
import com.hazelcast.client.impl.protocol.codec.ListRemoveListenerCodec;
import com.hazelcast.client.impl.protocol.codec.ListRemoveWithIndexCodec;
import com.hazelcast.client.impl.protocol.codec.ListSetCodec;
import com.hazelcast.client.impl.protocol.codec.ListSizeCodec;
import com.hazelcast.client.impl.protocol.codec.ListSubCodec;
import com.hazelcast.client.impl.protocol.codec.LockForceUnlockCodec;
import com.hazelcast.client.impl.protocol.codec.LockGetLockCountCodec;
import com.hazelcast.client.impl.protocol.codec.LockGetRemainingLeaseTimeCodec;
import com.hazelcast.client.impl.protocol.codec.LockIsLockedByCurrentThreadCodec;
import com.hazelcast.client.impl.protocol.codec.LockIsLockedCodec;
import com.hazelcast.client.impl.protocol.codec.LockLockCodec;
import com.hazelcast.client.impl.protocol.codec.LockTryLockCodec;
import com.hazelcast.client.impl.protocol.codec.LockUnlockCodec;
import com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerCodec;
import com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerToKeyCodec;
import com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerToKeyWithPredicateCodec;
import com.hazelcast.client.impl.protocol.codec.MapAddEntryListenerWithPredicateCodec;
import com.hazelcast.client.impl.protocol.codec.MapAddIndexCodec;
import com.hazelcast.client.impl.protocol.codec.MapAddInterceptorCodec;
import com.hazelcast.client.impl.protocol.codec.MapAddNearCacheEntryListenerCodec;
import com.hazelcast.client.impl.protocol.codec.MapAddNearCacheInvalidationListenerCodec;
import com.hazelcast.client.impl.protocol.codec.MapAddPartitionLostListenerCodec;
import com.hazelcast.client.impl.protocol.codec.MapAggregateCodec;
import com.hazelcast.client.impl.protocol.codec.MapAggregateWithPredicateCodec;
import com.hazelcast.client.impl.protocol.codec.MapAssignAndGetUuidsCodec;
import com.hazelcast.client.impl.protocol.codec.MapClearCodec;
import com.hazelcast.client.impl.protocol.codec.MapClearNearCacheCodec;
import com.hazelcast.client.impl.protocol.codec.MapContainsKeyCodec;
import com.hazelcast.client.impl.protocol.codec.MapContainsValueCodec;
import com.hazelcast.client.impl.protocol.codec.MapDeleteCodec;
import com.hazelcast.client.impl.protocol.codec.MapEntriesWithPagingPredicateCodec;
import com.hazelcast.client.impl.protocol.codec.MapEntriesWithPredicateCodec;
import com.hazelcast.client.impl.protocol.codec.MapEntrySetCodec;
import com.hazelcast.client.impl.protocol.codec.MapEventJournalReadCodec;
import com.hazelcast.client.impl.protocol.codec.MapEventJournalSubscribeCodec;
import com.hazelcast.client.impl.protocol.codec.MapEvictAllCodec;
import com.hazelcast.client.impl.protocol.codec.MapEvictCodec;
import com.hazelcast.client.impl.protocol.codec.MapExecuteOnAllKeysCodec;
import com.hazelcast.client.impl.protocol.codec.MapExecuteOnKeyCodec;
import com.hazelcast.client.impl.protocol.codec.MapExecuteOnKeysCodec;
import com.hazelcast.client.impl.protocol.codec.MapExecuteWithPredicateCodec;
import com.hazelcast.client.impl.protocol.codec.MapFetchEntriesCodec;
import com.hazelcast.client.impl.protocol.codec.MapFetchKeysCodec;
import com.hazelcast.client.impl.protocol.codec.MapFetchNearCacheInvalidationMetadataCodec;
import com.hazelcast.client.impl.protocol.codec.MapFetchWithQueryCodec;
import com.hazelcast.client.impl.protocol.codec.MapFlushCodec;
import com.hazelcast.client.impl.protocol.codec.MapForceUnlockCodec;
import com.hazelcast.client.impl.protocol.codec.MapGetAllCodec;
import com.hazelcast.client.impl.protocol.codec.MapGetCodec;
import com.hazelcast.client.impl.protocol.codec.MapGetEntryViewCodec;
import com.hazelcast.client.impl.protocol.codec.MapIsEmptyCodec;
import com.hazelcast.client.impl.protocol.codec.MapIsLockedCodec;
import com.hazelcast.client.impl.protocol.codec.MapKeySetCodec;
import com.hazelcast.client.impl.protocol.codec.MapKeySetWithPagingPredicateCodec;
import com.hazelcast.client.impl.protocol.codec.MapKeySetWithPredicateCodec;
import com.hazelcast.client.impl.protocol.codec.MapLoadAllCodec;
import com.hazelcast.client.impl.protocol.codec.MapLoadGivenKeysCodec;
import com.hazelcast.client.impl.protocol.codec.MapLockCodec;
import com.hazelcast.client.impl.protocol.codec.MapProjectCodec;
import com.hazelcast.client.impl.protocol.codec.MapProjectWithPredicateCodec;
import com.hazelcast.client.impl.protocol.codec.MapPutAllCodec;
import com.hazelcast.client.impl.protocol.codec.MapPutCodec;
import com.hazelcast.client.impl.protocol.codec.MapPutIfAbsentCodec;
import com.hazelcast.client.impl.protocol.codec.MapPutIfAbsentWithMaxIdleCodec;
import com.hazelcast.client.impl.protocol.codec.MapPutTransientCodec;
import com.hazelcast.client.impl.protocol.codec.MapPutTransientWithMaxIdleCodec;
import com.hazelcast.client.impl.protocol.codec.MapPutWithMaxIdleCodec;
import com.hazelcast.client.impl.protocol.codec.MapReduceCancelCodec;
import com.hazelcast.client.impl.protocol.codec.MapReduceForCustomCodec;
import com.hazelcast.client.impl.protocol.codec.MapReduceForListCodec;
import com.hazelcast.client.impl.protocol.codec.MapReduceForMapCodec;
import com.hazelcast.client.impl.protocol.codec.MapReduceForMultiMapCodec;
import com.hazelcast.client.impl.protocol.codec.MapReduceForSetCodec;
import com.hazelcast.client.impl.protocol.codec.MapReduceJobProcessInformationCodec;
import com.hazelcast.client.impl.protocol.codec.MapRemoveAllCodec;
import com.hazelcast.client.impl.protocol.codec.MapRemoveCodec;
import com.hazelcast.client.impl.protocol.codec.MapRemoveEntryListenerCodec;
import com.hazelcast.client.impl.protocol.codec.MapRemoveIfSameCodec;
import com.hazelcast.client.impl.protocol.codec.MapRemoveInterceptorCodec;
import com.hazelcast.client.impl.protocol.codec.MapRemovePartitionLostListenerCodec;
import com.hazelcast.client.impl.protocol.codec.MapReplaceCodec;
import com.hazelcast.client.impl.protocol.codec.MapReplaceIfSameCodec;
import com.hazelcast.client.impl.protocol.codec.MapSetCodec;
import com.hazelcast.client.impl.protocol.codec.MapSetTtlCodec;
import com.hazelcast.client.impl.protocol.codec.MapSetWithMaxIdleCodec;
import com.hazelcast.client.impl.protocol.codec.MapSizeCodec;
import com.hazelcast.client.impl.protocol.codec.MapSubmitToKeyCodec;
import com.hazelcast.client.impl.protocol.codec.MapTryLockCodec;
import com.hazelcast.client.impl.protocol.codec.MapTryPutCodec;
import com.hazelcast.client.impl.protocol.codec.MapTryRemoveCodec;
import com.hazelcast.client.impl.protocol.codec.MapUnlockCodec;
import com.hazelcast.client.impl.protocol.codec.MapValuesCodec;
import com.hazelcast.client.impl.protocol.codec.MapValuesWithPagingPredicateCodec;
import com.hazelcast.client.impl.protocol.codec.MapValuesWithPredicateCodec;
import com.hazelcast.client.impl.protocol.codec.MultiMapAddEntryListenerCodec;
import com.hazelcast.client.impl.protocol.codec.MultiMapAddEntryListenerToKeyCodec;
import com.hazelcast.client.impl.protocol.codec.MultiMapClearCodec;
import com.hazelcast.client.impl.protocol.codec.MultiMapContainsEntryCodec;
import com.hazelcast.client.impl.protocol.codec.MultiMapContainsKeyCodec;
import com.hazelcast.client.impl.protocol.codec.MultiMapContainsValueCodec;
import com.hazelcast.client.impl.protocol.codec.MultiMapDeleteCodec;
import com.hazelcast.client.impl.protocol.codec.MultiMapEntrySetCodec;
import com.hazelcast.client.impl.protocol.codec.MultiMapForceUnlockCodec;
import com.hazelcast.client.impl.protocol.codec.MultiMapGetCodec;
import com.hazelcast.client.impl.protocol.codec.MultiMapIsLockedCodec;
import com.hazelcast.client.impl.protocol.codec.MultiMapKeySetCodec;
import com.hazelcast.client.impl.protocol.codec.MultiMapLockCodec;
import com.hazelcast.client.impl.protocol.codec.MultiMapPutCodec;
import com.hazelcast.client.impl.protocol.codec.MultiMapRemoveCodec;
import com.hazelcast.client.impl.protocol.codec.MultiMapRemoveEntryCodec;
import com.hazelcast.client.impl.protocol.codec.MultiMapRemoveEntryListenerCodec;
import com.hazelcast.client.impl.protocol.codec.MultiMapSizeCodec;
import com.hazelcast.client.impl.protocol.codec.MultiMapTryLockCodec;
import com.hazelcast.client.impl.protocol.codec.MultiMapUnlockCodec;
import com.hazelcast.client.impl.protocol.codec.MultiMapValueCountCodec;
import com.hazelcast.client.impl.protocol.codec.MultiMapValuesCodec;
import com.hazelcast.client.impl.protocol.codec.PNCounterAddCodec;
import com.hazelcast.client.impl.protocol.codec.PNCounterGetCodec;
import com.hazelcast.client.impl.protocol.codec.PNCounterGetConfiguredReplicaCountCodec;
import com.hazelcast.client.impl.protocol.codec.QueueAddAllCodec;
import com.hazelcast.client.impl.protocol.codec.QueueAddListenerCodec;
import com.hazelcast.client.impl.protocol.codec.QueueClearCodec;
import com.hazelcast.client.impl.protocol.codec.QueueCompareAndRemoveAllCodec;
import com.hazelcast.client.impl.protocol.codec.QueueCompareAndRetainAllCodec;
import com.hazelcast.client.impl.protocol.codec.QueueContainsAllCodec;
import com.hazelcast.client.impl.protocol.codec.QueueContainsCodec;
import com.hazelcast.client.impl.protocol.codec.QueueDrainToCodec;
import com.hazelcast.client.impl.protocol.codec.QueueDrainToMaxSizeCodec;
import com.hazelcast.client.impl.protocol.codec.QueueIsEmptyCodec;
import com.hazelcast.client.impl.protocol.codec.QueueIteratorCodec;
import com.hazelcast.client.impl.protocol.codec.QueueOfferCodec;
import com.hazelcast.client.impl.protocol.codec.QueuePeekCodec;
import com.hazelcast.client.impl.protocol.codec.QueuePollCodec;
import com.hazelcast.client.impl.protocol.codec.QueuePutCodec;
import com.hazelcast.client.impl.protocol.codec.QueueRemainingCapacityCodec;
import com.hazelcast.client.impl.protocol.codec.QueueRemoveCodec;
import com.hazelcast.client.impl.protocol.codec.QueueRemoveListenerCodec;
import com.hazelcast.client.impl.protocol.codec.QueueSizeCodec;
import com.hazelcast.client.impl.protocol.codec.QueueTakeCodec;
import com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerCodec;
import com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerToKeyCodec;
import com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerToKeyWithPredicateCodec;
import com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddEntryListenerWithPredicateCodec;
import com.hazelcast.client.impl.protocol.codec.ReplicatedMapAddNearCacheEntryListenerCodec;
import com.hazelcast.client.impl.protocol.codec.ReplicatedMapClearCodec;
import com.hazelcast.client.impl.protocol.codec.ReplicatedMapContainsKeyCodec;
import com.hazelcast.client.impl.protocol.codec.ReplicatedMapContainsValueCodec;
import com.hazelcast.client.impl.protocol.codec.ReplicatedMapEntrySetCodec;
import com.hazelcast.client.impl.protocol.codec.ReplicatedMapGetCodec;
import com.hazelcast.client.impl.protocol.codec.ReplicatedMapIsEmptyCodec;
import com.hazelcast.client.impl.protocol.codec.ReplicatedMapKeySetCodec;
import com.hazelcast.client.impl.protocol.codec.ReplicatedMapPutAllCodec;
import com.hazelcast.client.impl.protocol.codec.ReplicatedMapPutCodec;
import com.hazelcast.client.impl.protocol.codec.ReplicatedMapRemoveCodec;
import com.hazelcast.client.impl.protocol.codec.ReplicatedMapRemoveEntryListenerCodec;
import com.hazelcast.client.impl.protocol.codec.ReplicatedMapSizeCodec;
import com.hazelcast.client.impl.protocol.codec.ReplicatedMapValuesCodec;
import com.hazelcast.client.impl.protocol.codec.RingbufferAddAllCodec;
import com.hazelcast.client.impl.protocol.codec.RingbufferAddCodec;
import com.hazelcast.client.impl.protocol.codec.RingbufferCapacityCodec;
import com.hazelcast.client.impl.protocol.codec.RingbufferHeadSequenceCodec;
import com.hazelcast.client.impl.protocol.codec.RingbufferReadManyCodec;
import com.hazelcast.client.impl.protocol.codec.RingbufferReadOneCodec;
import com.hazelcast.client.impl.protocol.codec.RingbufferRemainingCapacityCodec;
import com.hazelcast.client.impl.protocol.codec.RingbufferSizeCodec;
import com.hazelcast.client.impl.protocol.codec.RingbufferTailSequenceCodec;
import com.hazelcast.client.impl.protocol.codec.ScheduledExecutorCancelFromAddressCodec;
import com.hazelcast.client.impl.protocol.codec.ScheduledExecutorCancelFromPartitionCodec;
import com.hazelcast.client.impl.protocol.codec.ScheduledExecutorDisposeFromAddressCodec;
import com.hazelcast.client.impl.protocol.codec.ScheduledExecutorDisposeFromPartitionCodec;
import com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetAllScheduledFuturesCodec;
import com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetDelayFromAddressCodec;
import com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetDelayFromPartitionCodec;
import com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetResultFromAddressCodec;
import com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetResultFromPartitionCodec;
import com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetStatsFromAddressCodec;
import com.hazelcast.client.impl.protocol.codec.ScheduledExecutorGetStatsFromPartitionCodec;
import com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsCancelledFromAddressCodec;
import com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsCancelledFromPartitionCodec;
import com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsDoneFromAddressCodec;
import com.hazelcast.client.impl.protocol.codec.ScheduledExecutorIsDoneFromPartitionCodec;
import com.hazelcast.client.impl.protocol.codec.ScheduledExecutorShutdownCodec;
import com.hazelcast.client.impl.protocol.codec.ScheduledExecutorSubmitToAddressCodec;
import com.hazelcast.client.impl.protocol.codec.ScheduledExecutorSubmitToPartitionCodec;
import com.hazelcast.client.impl.protocol.codec.SemaphoreAcquireCodec;
import com.hazelcast.client.impl.protocol.codec.SemaphoreAvailablePermitsCodec;
import com.hazelcast.client.impl.protocol.codec.SemaphoreDrainPermitsCodec;
import com.hazelcast.client.impl.protocol.codec.SemaphoreIncreasePermitsCodec;
import com.hazelcast.client.impl.protocol.codec.SemaphoreInitCodec;
import com.hazelcast.client.impl.protocol.codec.SemaphoreReducePermitsCodec;
import com.hazelcast.client.impl.protocol.codec.SemaphoreReleaseCodec;
import com.hazelcast.client.impl.protocol.codec.SemaphoreTryAcquireCodec;
import com.hazelcast.client.impl.protocol.codec.SetAddAllCodec;
import com.hazelcast.client.impl.protocol.codec.SetAddCodec;
import com.hazelcast.client.impl.protocol.codec.SetAddListenerCodec;
import com.hazelcast.client.impl.protocol.codec.SetClearCodec;
import com.hazelcast.client.impl.protocol.codec.SetCompareAndRemoveAllCodec;
import com.hazelcast.client.impl.protocol.codec.SetCompareAndRetainAllCodec;
import com.hazelcast.client.impl.protocol.codec.SetContainsAllCodec;
import com.hazelcast.client.impl.protocol.codec.SetContainsCodec;
import com.hazelcast.client.impl.protocol.codec.SetGetAllCodec;
import com.hazelcast.client.impl.protocol.codec.SetIsEmptyCodec;
import com.hazelcast.client.impl.protocol.codec.SetRemoveCodec;
import com.hazelcast.client.impl.protocol.codec.SetRemoveListenerCodec;
import com.hazelcast.client.impl.protocol.codec.SetSizeCodec;
import com.hazelcast.client.impl.protocol.codec.TopicAddMessageListenerCodec;
import com.hazelcast.client.impl.protocol.codec.TopicPublishCodec;
import com.hazelcast.client.impl.protocol.codec.TopicRemoveMessageListenerCodec;
import com.hazelcast.client.impl.protocol.codec.TransactionCommitCodec;
import com.hazelcast.client.impl.protocol.codec.TransactionCreateCodec;
import com.hazelcast.client.impl.protocol.codec.TransactionRollbackCodec;
import com.hazelcast.client.impl.protocol.codec.TransactionalListAddCodec;
import com.hazelcast.client.impl.protocol.codec.TransactionalListRemoveCodec;
import com.hazelcast.client.impl.protocol.codec.TransactionalListSizeCodec;
import com.hazelcast.client.impl.protocol.codec.TransactionalMapContainsKeyCodec;
import com.hazelcast.client.impl.protocol.codec.TransactionalMapDeleteCodec;
import com.hazelcast.client.impl.protocol.codec.TransactionalMapGetCodec;
import com.hazelcast.client.impl.protocol.codec.TransactionalMapGetForUpdateCodec;
import com.hazelcast.client.impl.protocol.codec.TransactionalMapIsEmptyCodec;
import com.hazelcast.client.impl.protocol.codec.TransactionalMapKeySetCodec;
import com.hazelcast.client.impl.protocol.codec.TransactionalMapKeySetWithPredicateCodec;
import com.hazelcast.client.impl.protocol.codec.TransactionalMapPutCodec;
import com.hazelcast.client.impl.protocol.codec.TransactionalMapPutIfAbsentCodec;
import com.hazelcast.client.impl.protocol.codec.TransactionalMapRemoveCodec;
import com.hazelcast.client.impl.protocol.codec.TransactionalMapRemoveIfSameCodec;
import com.hazelcast.client.impl.protocol.codec.TransactionalMapReplaceCodec;
import com.hazelcast.client.impl.protocol.codec.TransactionalMapReplaceIfSameCodec;
import com.hazelcast.client.impl.protocol.codec.TransactionalMapSetCodec;
import com.hazelcast.client.impl.protocol.codec.TransactionalMapSizeCodec;
import com.hazelcast.client.impl.protocol.codec.TransactionalMapValuesCodec;
import com.hazelcast.client.impl.protocol.codec.TransactionalMapValuesWithPredicateCodec;
import com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapGetCodec;
import com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapPutCodec;
import com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapRemoveCodec;
import com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapRemoveEntryCodec;
import com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapSizeCodec;
import com.hazelcast.client.impl.protocol.codec.TransactionalMultiMapValueCountCodec;
import com.hazelcast.client.impl.protocol.codec.TransactionalQueueOfferCodec;
import com.hazelcast.client.impl.protocol.codec.TransactionalQueuePeekCodec;
import com.hazelcast.client.impl.protocol.codec.TransactionalQueuePollCodec;
import com.hazelcast.client.impl.protocol.codec.TransactionalQueueSizeCodec;
import com.hazelcast.client.impl.protocol.codec.TransactionalQueueTakeCodec;
import com.hazelcast.client.impl.protocol.codec.TransactionalSetAddCodec;
import com.hazelcast.client.impl.protocol.codec.TransactionalSetRemoveCodec;
import com.hazelcast.client.impl.protocol.codec.TransactionalSetSizeCodec;
import com.hazelcast.client.impl.protocol.codec.XATransactionClearRemoteCodec;
import com.hazelcast.client.impl.protocol.codec.XATransactionCollectTransactionsCodec;
import com.hazelcast.client.impl.protocol.codec.XATransactionCommitCodec;
import com.hazelcast.client.impl.protocol.codec.XATransactionCreateCodec;
import com.hazelcast.client.impl.protocol.codec.XATransactionFinalizeCodec;
import com.hazelcast.client.impl.protocol.codec.XATransactionPrepareCodec;
import com.hazelcast.client.impl.protocol.codec.XATransactionRollbackCodec;
import com.hazelcast.instance.Node;
import com.hazelcast.spi.NodeEngine;
import com.hazelcast.spi.impl.NodeEngineImpl;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;

public class DefaultMessageTaskFactoryProvider implements MessageTaskFactoryProvider {
  private final MessageTaskFactory[] factories;
  
  private final Node node;
  
  public DefaultMessageTaskFactoryProvider(NodeEngine nodeEngine) {
    this.factories = new MessageTaskFactory[32767];
    this.node = ((NodeEngineImpl)nodeEngine).getNode();
    initFactories();
  }
  
  public void initFactories() {
    this.factories[SetRemoveListenerCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[SetClearCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[SetCompareAndRemoveAllCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[SetContainsAllCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[SetIsEmptyCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[SetAddAllCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[SetAddCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[SetCompareAndRetainAllCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[SetGetAllCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[SetRemoveCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[SetAddListenerCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[SetContainsCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[SetSizeCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[RingbufferReadOneCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[RingbufferAddAllCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[RingbufferCapacityCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[RingbufferTailSequenceCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[RingbufferAddCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[RingbufferRemainingCapacityCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[RingbufferReadManyCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[RingbufferHeadSequenceCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[RingbufferSizeCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[LockUnlockCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[LockIsLockedCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[LockForceUnlockCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[LockGetRemainingLeaseTimeCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[LockIsLockedByCurrentThreadCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[LockLockCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[LockTryLockCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[LockGetLockCountCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CacheClearCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CacheAssignAndGetUuidsCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CacheFetchNearCacheInvalidationMetadataCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CacheReplaceCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CacheContainsKeyCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CacheCreateConfigCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CacheGetAndReplaceCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CacheGetAllCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CachePutCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CacheAddInvalidationListenerCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CacheAddNearCacheInvalidationListenerCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CachePutAllCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CacheSetExpiryPolicyCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CacheLoadAllCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CacheListenerRegistrationCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CacheAddEntryListenerCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CacheRemoveEntryListenerCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CacheRemoveInvalidationListenerCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CacheDestroyCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CacheRemoveCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CacheEntryProcessorCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CacheGetAndRemoveCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CacheManagementConfigCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CachePutIfAbsentCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CacheRemoveAllCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CacheRemoveAllKeysCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CacheIterateCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CacheAddPartitionLostListenerCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CacheGetConfigCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CacheGetCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CacheRemovePartitionLostListenerCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CacheSizeCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CacheIterateEntriesCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CacheEventJournalSubscribeCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CacheEventJournalReadCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapReduceJobProcessInformationCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapReduceCancelCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapReduceForCustomCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapReduceForMapCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapReduceForListCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapReduceForSetCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapReduceForMultiMapCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ReplicatedMapSizeCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ReplicatedMapRemoveEntryListenerCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ReplicatedMapAddEntryListenerToKeyWithPredicateCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ReplicatedMapIsEmptyCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ReplicatedMapPutAllCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ReplicatedMapContainsKeyCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ReplicatedMapContainsValueCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ReplicatedMapAddNearCacheEntryListenerCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ReplicatedMapGetCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ReplicatedMapAddEntryListenerWithPredicateCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ReplicatedMapAddEntryListenerToKeyCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ReplicatedMapRemoveCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ReplicatedMapClearCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ReplicatedMapValuesCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ReplicatedMapEntrySetCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ReplicatedMapPutCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ReplicatedMapAddEntryListenerCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ReplicatedMapKeySetCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[AtomicLongApplyCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[AtomicLongDecrementAndGetCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[AtomicLongGetAndAddCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[AtomicLongAlterAndGetCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[AtomicLongAddAndGetCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[AtomicLongGetCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[AtomicLongCompareAndSetCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[AtomicLongSetCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[AtomicLongAlterCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[AtomicLongIncrementAndGetCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[AtomicLongGetAndSetCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[AtomicLongGetAndAlterCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[AtomicLongGetAndIncrementCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[SemaphoreDrainPermitsCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[SemaphoreAvailablePermitsCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[SemaphoreInitCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[SemaphoreAcquireCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[SemaphoreReducePermitsCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[SemaphoreIncreasePermitsCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[SemaphoreTryAcquireCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[SemaphoreReleaseCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[TransactionalListSizeCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[TransactionalListRemoveCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[TransactionalListAddCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[TransactionalMultiMapPutCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[TransactionalMultiMapRemoveEntryCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[TransactionalMultiMapGetCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[TransactionalMultiMapRemoveCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[TransactionalMultiMapSizeCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[TransactionalMultiMapValueCountCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ConditionSignalCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ConditionBeforeAwaitCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ConditionAwaitCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ConditionSignalAllCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ListGetAllCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ListListIteratorCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ListSetCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ListAddAllWithIndexCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ListCompareAndRemoveAllCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ListGetCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ListRemoveListenerCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ListRemoveWithIndexCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ListAddListenerCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ListIteratorCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ListClearCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ListAddAllCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ListAddCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ListAddWithIndexCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ListLastIndexOfCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ListRemoveCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ListSubCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ListContainsCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ListIndexOfCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ListSizeCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ListContainsAllCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ListIsEmptyCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ListCompareAndRetainAllCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CountDownLatchAwaitCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CountDownLatchCountDownCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CountDownLatchGetCountCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CountDownLatchTrySetCountCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[TransactionalQueueSizeCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[TransactionalQueueOfferCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[TransactionalQueuePeekCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[TransactionalQueuePollCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[TransactionalQueueTakeCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MultiMapClearCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MultiMapGetCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MultiMapRemoveEntryCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MultiMapContainsKeyCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MultiMapSizeCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MultiMapAddEntryListenerToKeyCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MultiMapAddEntryListenerCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MultiMapRemoveCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MultiMapTryLockCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MultiMapIsLockedCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MultiMapContainsValueCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MultiMapKeySetCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MultiMapPutCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MultiMapEntrySetCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MultiMapValueCountCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MultiMapUnlockCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MultiMapLockCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MultiMapRemoveEntryListenerCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MultiMapContainsEntryCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MultiMapForceUnlockCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MultiMapValuesCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MultiMapDeleteCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[AtomicReferenceClearCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[AtomicReferenceCompareAndSetCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[AtomicReferenceGetAndAlterCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[AtomicReferenceGetCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[AtomicReferenceGetAndSetCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[AtomicReferenceApplyCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[AtomicReferenceIsNullCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[AtomicReferenceSetCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[AtomicReferenceAlterAndGetCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[AtomicReferenceSetAndGetCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[AtomicReferenceAlterCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[AtomicReferenceContainsCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[TopicPublishCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[TopicAddMessageListenerCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[TopicRemoveMessageListenerCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[TransactionalMapValuesCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[TransactionalMapSizeCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[TransactionalMapPutIfAbsentCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[TransactionalMapRemoveCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[TransactionalMapGetCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[TransactionalMapGetForUpdateCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[TransactionalMapIsEmptyCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[TransactionalMapKeySetCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[TransactionalMapKeySetWithPredicateCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[TransactionalMapReplaceIfSameCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[TransactionalMapContainsKeyCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[TransactionalMapRemoveIfSameCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[TransactionalMapSetCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[TransactionalMapReplaceCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[TransactionalMapPutCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[TransactionalMapDeleteCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[TransactionalMapValuesWithPredicateCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ExecutorServiceCancelOnPartitionCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ExecutorServiceSubmitToPartitionCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ExecutorServiceCancelOnAddressCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ExecutorServiceIsShutdownCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ExecutorServiceShutdownCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ExecutorServiceSubmitToAddressCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[DurableExecutorSubmitToPartitionCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[DurableExecutorIsShutdownCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[DurableExecutorShutdownCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[DurableExecutorRetrieveResultCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[DurableExecutorDisposeResultCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[DurableExecutorRetrieveAndDisposeResultCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[TransactionCreateCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[XATransactionClearRemoteCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[XATransactionFinalizeCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[TransactionCommitCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[XATransactionCollectTransactionsCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[XATransactionPrepareCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[XATransactionCreateCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[TransactionRollbackCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[XATransactionCommitCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[XATransactionRollbackCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[TransactionalSetSizeCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[TransactionalSetAddCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[TransactionalSetRemoveCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapEntriesWithPagingPredicateCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapClearNearCacheCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapAddEntryListenerCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapAssignAndGetUuidsCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapFetchNearCacheInvalidationMetadataCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapRemoveIfSameCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapAddInterceptorCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapEntriesWithPredicateCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapPutTransientCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapContainsValueCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapIsEmptyCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapReplaceCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapRemoveInterceptorCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapAddNearCacheEntryListenerCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapAddNearCacheInvalidationListenerCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapExecuteOnAllKeysCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapFlushCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapSetCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapTryLockCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapAddEntryListenerToKeyCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapEntrySetCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapClearCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapLockCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapGetEntryViewCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapRemovePartitionLostListenerCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapLoadGivenKeysCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapExecuteWithPredicateCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapRemoveAllCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapPutIfAbsentCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapTryRemoveCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapPutCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapUnlockCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapSizeCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapValuesWithPredicateCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapAddEntryListenerToKeyWithPredicateCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapEvictCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapGetAllCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapForceUnlockCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapLoadAllCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapAddIndexCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapExecuteOnKeyCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapKeySetWithPagingPredicateCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapRemoveEntryListenerCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapIsLockedCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapEvictAllCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapSubmitToKeyCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapValuesCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapAddEntryListenerWithPredicateCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapDeleteCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapAddPartitionLostListenerCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapPutAllCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapRemoveCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapKeySetWithPredicateCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapExecuteOnKeysCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapReplaceIfSameCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapContainsKeyCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapTryPutCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapValuesWithPagingPredicateCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapGetCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapKeySetCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapFetchKeysCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapFetchEntriesCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapAggregateCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapAggregateWithPredicateCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapProjectCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapProjectWithPredicateCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapFetchWithQueryCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapEventJournalSubscribeCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapEventJournalReadCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapSetTtlCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapSetWithMaxIdleCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapPutWithMaxIdleCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapPutIfAbsentWithMaxIdleCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[MapPutTransientWithMaxIdleCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ClientAddPartitionLostListenerCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ClientRemovePartitionLostListenerCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ClientCreateProxyCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ClientGetDistributedObjectsCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ClientAddDistributedObjectListenerCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ClientDestroyProxyCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ClientPingCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ClientAddMembershipListenerCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ClientAuthenticationCustomCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ClientRemoveAllListenersCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ClientRemoveDistributedObjectListenerCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ClientGetPartitionsCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ClientAuthenticationCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ClientStatisticsCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ClientDeployClassesCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ClientAddPartitionListenerCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ClientCreateProxiesCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ClientIsFailoverSupportedCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[QueueCompareAndRemoveAllCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[QueueContainsAllCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[QueueAddAllCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[QueueTakeCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[QueueAddListenerCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[QueueCompareAndRetainAllCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[QueueOfferCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[QueuePeekCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[QueueRemoveCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[QueueIsEmptyCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[QueueIteratorCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[QueueSizeCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[QueuePutCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[QueueContainsCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[QueuePollCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[QueueDrainToCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[QueueRemoveListenerCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[QueueRemainingCapacityCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[QueueClearCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[QueueDrainToMaxSizeCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CardinalityEstimatorAddCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CardinalityEstimatorEstimateCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ScheduledExecutorSubmitToPartitionCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ScheduledExecutorSubmitToAddressCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ScheduledExecutorShutdownCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ScheduledExecutorDisposeFromPartitionCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ScheduledExecutorDisposeFromAddressCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ScheduledExecutorCancelFromPartitionCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ScheduledExecutorCancelFromAddressCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ScheduledExecutorIsDoneFromPartitionCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ScheduledExecutorIsDoneFromAddressCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ScheduledExecutorGetDelayFromPartitionCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ScheduledExecutorGetDelayFromAddressCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ScheduledExecutorGetStatsFromPartitionCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ScheduledExecutorGetStatsFromAddressCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ScheduledExecutorGetResultFromPartitionCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ScheduledExecutorGetResultFromAddressCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ScheduledExecutorGetAllScheduledFuturesCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ScheduledExecutorIsCancelledFromPartitionCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ScheduledExecutorIsCancelledFromAddressCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ContinuousQueryDestroyCacheCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ContinuousQueryPublisherCreateCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ContinuousQuerySetReadCursorCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ContinuousQueryAddListenerCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ContinuousQueryMadePublishableCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[ContinuousQueryPublisherCreateWithValueCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[DynamicConfigAddMultiMapConfigCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[DynamicConfigAddCardinalityEstimatorConfigCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[DynamicConfigAddExecutorConfigCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[DynamicConfigAddDurableExecutorConfigCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[DynamicConfigAddScheduledExecutorConfigCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[DynamicConfigAddRingbufferConfigCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[DynamicConfigAddLockConfigCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[DynamicConfigAddListConfigCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[DynamicConfigAddSetConfigCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[DynamicConfigAddSemaphoreConfigCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[DynamicConfigAddTopicConfigCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[DynamicConfigAddReplicatedMapConfigCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[DynamicConfigAddQueueConfigCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[DynamicConfigAddMapConfigCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[DynamicConfigAddReliableTopicConfigCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[DynamicConfigAddCacheConfigCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[DynamicConfigAddEventJournalConfigCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[DynamicConfigAddFlakeIdGeneratorConfigCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[DynamicConfigAddPNCounterConfigCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[FlakeIdGeneratorNewIdBatchCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[PNCounterGetCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[PNCounterAddCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[PNCounterGetConfiguredReplicaCountCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[DynamicConfigAddMerkleTreeConfigCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CPGroupCreateCPGroupCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CPGroupDestroyCPObjectCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CPSessionCreateSessionCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CPSessionHeartbeatSessionCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CPSessionCloseSessionCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CPSessionGenerateThreadIdCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CPAtomicLongAddAndGetCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CPAtomicLongCompareAndSetCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CPAtomicLongGetAndAddCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CPAtomicLongGetCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CPAtomicLongGetAndSetCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CPAtomicLongApplyCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CPAtomicLongAlterCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CPAtomicRefApplyCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CPAtomicRefSetCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CPAtomicRefContainsCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CPAtomicRefGetCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CPAtomicRefCompareAndSetCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CPCountDownLatchAwaitCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CPCountDownLatchCountDownCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CPCountDownLatchGetCountCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CPCountDownLatchGetRoundCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CPCountDownLatchTrySetCountCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CPFencedLockLockCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CPFencedLockTryLockCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CPFencedLockUnlockCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CPFencedLockGetLockOwnershipCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CPSemaphoreAcquireCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CPSemaphoreAvailablePermitsCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CPSemaphoreChangeCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CPSemaphoreDrainCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CPSemaphoreGetSemaphoreTypeCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CPSemaphoreInitCodec.RequestParameters.TYPE.id()] = new Object(this);
    this.factories[CPSemaphoreReleaseCodec.RequestParameters.TYPE.id()] = new Object(this);
  }
  
  @SuppressFBWarnings({"MS_EXPOSE_REP", "EI_EXPOSE_REP"})
  public MessageTaskFactory[] getFactories() { return this.factories; }
}
