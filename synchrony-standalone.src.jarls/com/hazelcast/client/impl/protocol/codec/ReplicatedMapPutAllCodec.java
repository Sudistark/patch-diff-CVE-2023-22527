package com.hazelcast.client.impl.protocol.codec;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.nio.serialization.Data;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;

@SuppressFBWarnings({"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD"})
public final class ReplicatedMapPutAllCodec {
  public static final ReplicatedMapMessageType REQUEST_TYPE = ReplicatedMapMessageType.REPLICATEDMAP_PUTALL;
  
  public static final int RESPONSE_TYPE = 100;
  
  public static ClientMessage encodeRequest(String name, Collection<Map.Entry<Data, Data>> entries) {
    int requiredDataSize = RequestParameters.calculateDataSize(name, entries);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(REQUEST_TYPE.id());
    clientMessage.setRetryable(false);
    clientMessage.setAcquiresResource(false);
    clientMessage.setOperationName("ReplicatedMap.putAll");
    clientMessage.set(name);
    clientMessage.set(entries.size());
    for (Map.Entry<Data, Data> entries_item : entries) {
      Data entries_itemKey = (Data)entries_item.getKey();
      Data entries_itemVal = (Data)entries_item.getValue();
      clientMessage.set(entries_itemKey);
      clientMessage.set(entries_itemVal);
    } 
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static RequestParameters decodeRequest(ClientMessage clientMessage) {
    RequestParameters parameters = new RequestParameters();
    String name = null;
    name = clientMessage.getStringUtf8();
    parameters.name = name;
    List<Map.Entry<Data, Data>> entries = null;
    int entries_size = clientMessage.getInt();
    entries = new ArrayList<Map.Entry<Data, Data>>(entries_size);
    for (int entries_index = 0; entries_index < entries_size; entries_index++) {
      Data entries_item_key = clientMessage.getData();
      Data entries_item_val = clientMessage.getData();
      Map.Entry<Data, Data> entries_item = new AbstractMap.SimpleEntry<Data, Data>(entries_item_key, entries_item_val);
      entries.add(entries_item);
    } 
    parameters.entries = entries;
    return parameters;
  }
  
  public static ClientMessage encodeResponse() {
    requiredDataSize = ResponseParameters.calculateDataSize();
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(100);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static ResponseParameters decodeResponse(ClientMessage clientMessage) { return new ResponseParameters(); }
}
