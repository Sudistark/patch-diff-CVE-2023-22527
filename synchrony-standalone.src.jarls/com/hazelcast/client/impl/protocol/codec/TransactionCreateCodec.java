package com.hazelcast.client.impl.protocol.codec;

import com.hazelcast.client.impl.protocol.ClientMessage;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;

@SuppressFBWarnings({"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD"})
public final class TransactionCreateCodec {
  public static final TransactionMessageType REQUEST_TYPE = TransactionMessageType.TRANSACTION_CREATE;
  
  public static final int RESPONSE_TYPE = 104;
  
  public static ClientMessage encodeRequest(long timeout, int durability, int transactionType, long threadId) {
    int requiredDataSize = RequestParameters.calculateDataSize(timeout, durability, transactionType, threadId);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(REQUEST_TYPE.id());
    clientMessage.setRetryable(false);
    clientMessage.setAcquiresResource(true);
    clientMessage.setOperationName("Transaction.create");
    clientMessage.set(timeout);
    clientMessage.set(durability);
    clientMessage.set(transactionType);
    clientMessage.set(threadId);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static RequestParameters decodeRequest(ClientMessage clientMessage) {
    RequestParameters parameters = new RequestParameters();
    long timeout = 0L;
    timeout = clientMessage.getLong();
    parameters.timeout = timeout;
    int durability = 0;
    durability = clientMessage.getInt();
    parameters.durability = durability;
    int transactionType = 0;
    transactionType = clientMessage.getInt();
    parameters.transactionType = transactionType;
    long threadId = 0L;
    threadId = clientMessage.getLong();
    parameters.threadId = threadId;
    return parameters;
  }
  
  public static ClientMessage encodeResponse(String response) {
    int requiredDataSize = ResponseParameters.calculateDataSize(response);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(104);
    clientMessage.set(response);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static ResponseParameters decodeResponse(ClientMessage clientMessage) {
    ResponseParameters parameters = new ResponseParameters();
    String response = null;
    response = clientMessage.getStringUtf8();
    parameters.response = response;
    return parameters;
  }
}
