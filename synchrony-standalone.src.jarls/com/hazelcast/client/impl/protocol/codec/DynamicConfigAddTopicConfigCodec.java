package com.hazelcast.client.impl.protocol.codec;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.task.dynamicconfig.ListenerConfigHolder;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

@SuppressFBWarnings({"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD"})
public final class DynamicConfigAddTopicConfigCodec {
  public static final DynamicConfigMessageType REQUEST_TYPE = DynamicConfigMessageType.DYNAMICCONFIG_ADDTOPICCONFIG;
  
  public static final int RESPONSE_TYPE = 100;
  
  public static ClientMessage encodeRequest(String name, boolean globalOrderingEnabled, boolean statisticsEnabled, boolean multiThreadingEnabled, Collection<ListenerConfigHolder> listenerConfigs) {
    int requiredDataSize = RequestParameters.calculateDataSize(name, globalOrderingEnabled, statisticsEnabled, multiThreadingEnabled, listenerConfigs);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(REQUEST_TYPE.id());
    clientMessage.setRetryable(false);
    clientMessage.setAcquiresResource(false);
    clientMessage.setOperationName("DynamicConfig.addTopicConfig");
    clientMessage.set(name);
    clientMessage.set(globalOrderingEnabled);
    clientMessage.set(statisticsEnabled);
    clientMessage.set(multiThreadingEnabled);
    if (listenerConfigs == null) {
      boolean listenerConfigs_isNull = true;
      clientMessage.set(listenerConfigs_isNull);
    } else {
      boolean listenerConfigs_isNull = false;
      clientMessage.set(listenerConfigs_isNull);
      clientMessage.set(listenerConfigs.size());
      for (ListenerConfigHolder listenerConfigs_item : listenerConfigs)
        ListenerConfigCodec.encode(listenerConfigs_item, clientMessage); 
    } 
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static RequestParameters decodeRequest(ClientMessage clientMessage) {
    RequestParameters parameters = new RequestParameters();
    if (clientMessage.isComplete())
      return parameters; 
    String name = null;
    name = clientMessage.getStringUtf8();
    parameters.name = name;
    boolean globalOrderingEnabled = false;
    globalOrderingEnabled = clientMessage.getBoolean();
    parameters.globalOrderingEnabled = globalOrderingEnabled;
    boolean statisticsEnabled = false;
    statisticsEnabled = clientMessage.getBoolean();
    parameters.statisticsEnabled = statisticsEnabled;
    boolean multiThreadingEnabled = false;
    multiThreadingEnabled = clientMessage.getBoolean();
    parameters.multiThreadingEnabled = multiThreadingEnabled;
    List<ListenerConfigHolder> listenerConfigs = null;
    boolean listenerConfigs_isNull = clientMessage.getBoolean();
    if (!listenerConfigs_isNull) {
      int listenerConfigs_size = clientMessage.getInt();
      listenerConfigs = new ArrayList<ListenerConfigHolder>(listenerConfigs_size);
      for (int listenerConfigs_index = 0; listenerConfigs_index < listenerConfigs_size; listenerConfigs_index++) {
        ListenerConfigHolder listenerConfigs_item = ListenerConfigCodec.decode(clientMessage);
        listenerConfigs.add(listenerConfigs_item);
      } 
      parameters.listenerConfigs = listenerConfigs;
    } 
    return parameters;
  }
  
  public static ClientMessage encodeResponse() {
    requiredDataSize = ResponseParameters.calculateDataSize();
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(100);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static ResponseParameters decodeResponse(ClientMessage clientMessage) { return new ResponseParameters(); }
}
