package com.hazelcast.client.impl.protocol.codec;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.nio.Address;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;

@SuppressFBWarnings({"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD"})
public final class ClientAddPartitionLostListenerCodec {
  public static final ClientMessageType REQUEST_TYPE = ClientMessageType.CLIENT_ADDPARTITIONLOSTLISTENER;
  
  public static final int RESPONSE_TYPE = 104;
  
  public static ClientMessage encodeRequest(boolean localOnly) {
    int requiredDataSize = RequestParameters.calculateDataSize(localOnly);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(REQUEST_TYPE.id());
    clientMessage.setRetryable(false);
    clientMessage.setAcquiresResource(false);
    clientMessage.setOperationName("Client.addPartitionLostListener");
    clientMessage.set(localOnly);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static RequestParameters decodeRequest(ClientMessage clientMessage) {
    RequestParameters parameters = new RequestParameters();
    boolean localOnly = false;
    localOnly = clientMessage.getBoolean();
    parameters.localOnly = localOnly;
    return parameters;
  }
  
  public static ClientMessage encodeResponse(String response) {
    int requiredDataSize = ResponseParameters.calculateDataSize(response);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(104);
    clientMessage.set(response);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static ResponseParameters decodeResponse(ClientMessage clientMessage) {
    ResponseParameters parameters = new ResponseParameters();
    String response = null;
    response = clientMessage.getStringUtf8();
    parameters.response = response;
    return parameters;
  }
  
  public static ClientMessage encodePartitionLostEvent(int partitionId, int lostBackupCount, Address source) {
    int dataSize = ClientMessage.HEADER_SIZE;
    dataSize += 4;
    dataSize += 4;
    dataSize++;
    if (source != null)
      dataSize += AddressCodec.calculateDataSize(source); 
    ClientMessage clientMessage = ClientMessage.createForEncode(dataSize);
    clientMessage.setMessageType(206);
    clientMessage.addFlag((short)1);
    clientMessage.set(partitionId);
    clientMessage.set(lostBackupCount);
    if (source == null) {
      boolean source_isNull = true;
      clientMessage.set(source_isNull);
    } else {
      boolean source_isNull = false;
      clientMessage.set(source_isNull);
      AddressCodec.encode(source, clientMessage);
    } 
    clientMessage.updateFrameLength();
    return clientMessage;
  }
}
