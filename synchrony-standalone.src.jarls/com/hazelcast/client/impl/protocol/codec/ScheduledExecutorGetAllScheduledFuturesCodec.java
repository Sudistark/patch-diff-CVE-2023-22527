package com.hazelcast.client.impl.protocol.codec;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.core.Member;
import com.hazelcast.scheduledexecutor.ScheduledTaskHandler;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;

@SuppressFBWarnings({"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD"})
public final class ScheduledExecutorGetAllScheduledFuturesCodec {
  public static final ScheduledExecutorMessageType REQUEST_TYPE = ScheduledExecutorMessageType.SCHEDULEDEXECUTOR_GETALLSCHEDULEDFUTURES;
  
  public static final int RESPONSE_TYPE = 121;
  
  public static ClientMessage encodeRequest(String schedulerName) {
    int requiredDataSize = RequestParameters.calculateDataSize(schedulerName);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(REQUEST_TYPE.id());
    clientMessage.setRetryable(true);
    clientMessage.setAcquiresResource(false);
    clientMessage.setOperationName("ScheduledExecutor.getAllScheduledFutures");
    clientMessage.set(schedulerName);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static RequestParameters decodeRequest(ClientMessage clientMessage) {
    RequestParameters parameters = new RequestParameters();
    if (clientMessage.isComplete())
      return parameters; 
    String schedulerName = null;
    schedulerName = clientMessage.getStringUtf8();
    parameters.schedulerName = schedulerName;
    return parameters;
  }
  
  public static ClientMessage encodeResponse(Collection<Map.Entry<Member, List<ScheduledTaskHandler>>> handlers) {
    int requiredDataSize = ResponseParameters.calculateDataSize(handlers);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(121);
    clientMessage.set(handlers.size());
    for (Map.Entry<Member, List<ScheduledTaskHandler>> handlers_item : handlers) {
      Member handlers_itemKey = (Member)handlers_item.getKey();
      List<ScheduledTaskHandler> handlers_itemVal = (List)handlers_item.getValue();
      MemberCodec.encode(handlers_itemKey, clientMessage);
      clientMessage.set(handlers_itemVal.size());
      for (ScheduledTaskHandler handlers_itemVal_item : handlers_itemVal)
        ScheduledTaskHandlerCodec.encode(handlers_itemVal_item, clientMessage); 
    } 
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static ResponseParameters decodeResponse(ClientMessage clientMessage) {
    ResponseParameters parameters = new ResponseParameters();
    List<Map.Entry<Member, List<ScheduledTaskHandler>>> handlers = null;
    int handlers_size = clientMessage.getInt();
    handlers = new ArrayList<Map.Entry<Member, List<ScheduledTaskHandler>>>(handlers_size);
    for (int handlers_index = 0; handlers_index < handlers_size; handlers_index++) {
      Member handlers_item_key = MemberCodec.decode(clientMessage);
      int handlers_item_val_size = clientMessage.getInt();
      List<ScheduledTaskHandler> handlers_item_val = new ArrayList<ScheduledTaskHandler>(handlers_item_val_size);
      for (int handlers_item_val_index = 0; handlers_item_val_index < handlers_item_val_size; handlers_item_val_index++) {
        ScheduledTaskHandler handlers_item_val_item = ScheduledTaskHandlerCodec.decode(clientMessage);
        handlers_item_val.add(handlers_item_val_item);
      } 
      Map.Entry<Member, List<ScheduledTaskHandler>> handlers_item = new AbstractMap.SimpleEntry<Member, List<ScheduledTaskHandler>>(handlers_item_key, handlers_item_val);
      handlers.add(handlers_item);
    } 
    parameters.handlers = handlers;
    return parameters;
  }
}
