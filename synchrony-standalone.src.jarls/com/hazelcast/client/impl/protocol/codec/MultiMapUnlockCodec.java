package com.hazelcast.client.impl.protocol.codec;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.nio.serialization.Data;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;

@SuppressFBWarnings({"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD"})
public final class MultiMapUnlockCodec {
  public static final MultiMapMessageType REQUEST_TYPE = MultiMapMessageType.MULTIMAP_UNLOCK;
  
  public static final int RESPONSE_TYPE = 100;
  
  public static ClientMessage encodeRequest(String name, Data key, long threadId) {
    int requiredDataSize = RequestParameters.calculateDataSize(name, key, threadId);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(REQUEST_TYPE.id());
    clientMessage.setRetryable(true);
    clientMessage.setAcquiresResource(false);
    clientMessage.setOperationName("MultiMap.unlock");
    clientMessage.set(name);
    clientMessage.set(key);
    clientMessage.set(threadId);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static ClientMessage encodeRequest(String name, Data key, long threadId, long referenceId) {
    int requiredDataSize = RequestParameters.calculateDataSize(name, key, threadId, referenceId);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(REQUEST_TYPE.id());
    clientMessage.setRetryable(true);
    clientMessage.setAcquiresResource(false);
    clientMessage.setOperationName("MultiMap.unlock");
    clientMessage.set(name);
    clientMessage.set(key);
    clientMessage.set(threadId);
    clientMessage.set(referenceId);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static RequestParameters decodeRequest(ClientMessage clientMessage) {
    RequestParameters parameters = new RequestParameters();
    String name = null;
    name = clientMessage.getStringUtf8();
    parameters.name = name;
    Data key = null;
    key = clientMessage.getData();
    parameters.key = key;
    long threadId = 0L;
    threadId = clientMessage.getLong();
    parameters.threadId = threadId;
    if (clientMessage.isComplete())
      return parameters; 
    long referenceId = 0L;
    referenceId = clientMessage.getLong();
    parameters.referenceId = referenceId;
    parameters.referenceIdExist = true;
    return parameters;
  }
  
  public static ClientMessage encodeResponse() {
    requiredDataSize = ResponseParameters.calculateDataSize();
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(100);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static ResponseParameters decodeResponse(ClientMessage clientMessage) { return new ResponseParameters(); }
}
