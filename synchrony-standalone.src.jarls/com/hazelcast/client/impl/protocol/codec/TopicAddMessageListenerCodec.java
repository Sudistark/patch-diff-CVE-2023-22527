package com.hazelcast.client.impl.protocol.codec;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.util.ParameterUtil;
import com.hazelcast.nio.serialization.Data;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;

@SuppressFBWarnings({"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD"})
public final class TopicAddMessageListenerCodec {
  public static final TopicMessageType REQUEST_TYPE = TopicMessageType.TOPIC_ADDMESSAGELISTENER;
  
  public static final int RESPONSE_TYPE = 104;
  
  public static ClientMessage encodeRequest(String name, boolean localOnly) {
    int requiredDataSize = RequestParameters.calculateDataSize(name, localOnly);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(REQUEST_TYPE.id());
    clientMessage.setRetryable(false);
    clientMessage.setAcquiresResource(false);
    clientMessage.setOperationName("Topic.addMessageListener");
    clientMessage.set(name);
    clientMessage.set(localOnly);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static RequestParameters decodeRequest(ClientMessage clientMessage) {
    RequestParameters parameters = new RequestParameters();
    String name = null;
    name = clientMessage.getStringUtf8();
    parameters.name = name;
    boolean localOnly = false;
    localOnly = clientMessage.getBoolean();
    parameters.localOnly = localOnly;
    return parameters;
  }
  
  public static ClientMessage encodeResponse(String response) {
    int requiredDataSize = ResponseParameters.calculateDataSize(response);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(104);
    clientMessage.set(response);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static ResponseParameters decodeResponse(ClientMessage clientMessage) {
    ResponseParameters parameters = new ResponseParameters();
    String response = null;
    response = clientMessage.getStringUtf8();
    parameters.response = response;
    return parameters;
  }
  
  public static ClientMessage encodeTopicEvent(Data item, long publishTime, String uuid) {
    int dataSize = ClientMessage.HEADER_SIZE;
    dataSize += ParameterUtil.calculateDataSize(item);
    dataSize += 8;
    dataSize += ParameterUtil.calculateDataSize(uuid);
    ClientMessage clientMessage = ClientMessage.createForEncode(dataSize);
    clientMessage.setMessageType(205);
    clientMessage.addFlag((short)1);
    clientMessage.set(item);
    clientMessage.set(publishTime);
    clientMessage.set(uuid);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
}
