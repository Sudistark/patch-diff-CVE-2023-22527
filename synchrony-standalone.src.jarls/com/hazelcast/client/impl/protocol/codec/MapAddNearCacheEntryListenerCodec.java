package com.hazelcast.client.impl.protocol.codec;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.util.ParameterUtil;
import com.hazelcast.nio.serialization.Data;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import java.util.Collection;
import java.util.UUID;

@SuppressFBWarnings({"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD"})
public final class MapAddNearCacheEntryListenerCodec {
  public static final MapMessageType REQUEST_TYPE = MapMessageType.MAP_ADDNEARCACHEENTRYLISTENER;
  
  public static final int RESPONSE_TYPE = 104;
  
  public static ClientMessage encodeRequest(String name, int listenerFlags, boolean localOnly) {
    int requiredDataSize = RequestParameters.calculateDataSize(name, listenerFlags, localOnly);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(REQUEST_TYPE.id());
    clientMessage.setRetryable(false);
    clientMessage.setAcquiresResource(false);
    clientMessage.setOperationName("Map.addNearCacheEntryListener");
    clientMessage.set(name);
    clientMessage.set(listenerFlags);
    clientMessage.set(localOnly);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static RequestParameters decodeRequest(ClientMessage clientMessage) {
    RequestParameters parameters = new RequestParameters();
    String name = null;
    name = clientMessage.getStringUtf8();
    parameters.name = name;
    int listenerFlags = 0;
    listenerFlags = clientMessage.getInt();
    parameters.listenerFlags = listenerFlags;
    boolean localOnly = false;
    localOnly = clientMessage.getBoolean();
    parameters.localOnly = localOnly;
    return parameters;
  }
  
  public static ClientMessage encodeResponse(String response) {
    int requiredDataSize = ResponseParameters.calculateDataSize(response);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(104);
    clientMessage.set(response);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static ResponseParameters decodeResponse(ClientMessage clientMessage) {
    ResponseParameters parameters = new ResponseParameters();
    String response = null;
    response = clientMessage.getStringUtf8();
    parameters.response = response;
    return parameters;
  }
  
  public static ClientMessage encodeIMapInvalidationEvent(Data key, String sourceUuid, UUID partitionUuid, long sequence) {
    int dataSize = ClientMessage.HEADER_SIZE;
    dataSize++;
    if (key != null)
      dataSize += ParameterUtil.calculateDataSize(key); 
    dataSize += ParameterUtil.calculateDataSize(sourceUuid);
    dataSize += UUIDCodec.calculateDataSize(partitionUuid);
    dataSize += 8;
    ClientMessage clientMessage = ClientMessage.createForEncode(dataSize);
    clientMessage.setMessageType(215);
    clientMessage.addFlag((short)1);
    if (key == null) {
      boolean key_isNull = true;
      clientMessage.set(key_isNull);
    } else {
      boolean key_isNull = false;
      clientMessage.set(key_isNull);
      clientMessage.set(key);
    } 
    clientMessage.set(sourceUuid);
    UUIDCodec.encode(partitionUuid, clientMessage);
    clientMessage.set(sequence);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static ClientMessage encodeIMapBatchInvalidationEvent(Collection<Data> keys, Collection<String> sourceUuids, Collection<UUID> partitionUuids, Collection<Long> sequences) {
    int dataSize = ClientMessage.HEADER_SIZE;
    dataSize += 4;
    for (Data keys_item : keys)
      dataSize += ParameterUtil.calculateDataSize(keys_item); 
    dataSize += 4;
    for (String sourceUuids_item : sourceUuids)
      dataSize += ParameterUtil.calculateDataSize(sourceUuids_item); 
    dataSize += 4;
    for (UUID partitionUuids_item : partitionUuids)
      dataSize += UUIDCodec.calculateDataSize(partitionUuids_item); 
    dataSize += 4;
    for (Long sequences_item : sequences)
      dataSize += ParameterUtil.calculateDataSize(sequences_item); 
    ClientMessage clientMessage = ClientMessage.createForEncode(dataSize);
    clientMessage.setMessageType(216);
    clientMessage.addFlag((short)1);
    clientMessage.set(keys.size());
    for (Data keys_item : keys)
      clientMessage.set(keys_item); 
    clientMessage.set(sourceUuids.size());
    for (String sourceUuids_item : sourceUuids)
      clientMessage.set(sourceUuids_item); 
    clientMessage.set(partitionUuids.size());
    for (UUID partitionUuids_item : partitionUuids)
      UUIDCodec.encode(partitionUuids_item, clientMessage); 
    clientMessage.set(sequences.size());
    for (Long sequences_item : sequences)
      clientMessage.set(sequences_item.longValue()); 
    clientMessage.updateFrameLength();
    return clientMessage;
  }
}
