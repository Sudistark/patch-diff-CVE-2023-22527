package com.hazelcast.client.impl.protocol.codec;

import com.hazelcast.cache.impl.CacheEventData;
import com.hazelcast.client.impl.protocol.ClientMessage;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import java.util.Collection;

@SuppressFBWarnings({"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD"})
public final class CacheAddEntryListenerCodec {
  public static final CacheMessageType REQUEST_TYPE = CacheMessageType.CACHE_ADDENTRYLISTENER;
  
  public static final int RESPONSE_TYPE = 104;
  
  public static ClientMessage encodeRequest(String name, boolean localOnly) {
    int requiredDataSize = RequestParameters.calculateDataSize(name, localOnly);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(REQUEST_TYPE.id());
    clientMessage.setRetryable(false);
    clientMessage.setAcquiresResource(false);
    clientMessage.setOperationName("Cache.addEntryListener");
    clientMessage.set(name);
    clientMessage.set(localOnly);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static RequestParameters decodeRequest(ClientMessage clientMessage) {
    RequestParameters parameters = new RequestParameters();
    String name = null;
    name = clientMessage.getStringUtf8();
    parameters.name = name;
    boolean localOnly = false;
    localOnly = clientMessage.getBoolean();
    parameters.localOnly = localOnly;
    return parameters;
  }
  
  public static ClientMessage encodeResponse(String response) {
    int requiredDataSize = ResponseParameters.calculateDataSize(response);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(104);
    clientMessage.set(response);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static ResponseParameters decodeResponse(ClientMessage clientMessage) {
    ResponseParameters parameters = new ResponseParameters();
    String response = null;
    response = clientMessage.getStringUtf8();
    parameters.response = response;
    return parameters;
  }
  
  public static ClientMessage encodeCacheEvent(int type, Collection<CacheEventData> keys, int completionId) {
    int dataSize = ClientMessage.HEADER_SIZE;
    dataSize += 4;
    dataSize += 4;
    for (CacheEventData keys_item : keys)
      dataSize += CacheEventDataCodec.calculateDataSize(keys_item); 
    dataSize += 4;
    ClientMessage clientMessage = ClientMessage.createForEncode(dataSize);
    clientMessage.setMessageType(210);
    clientMessage.addFlag((short)1);
    clientMessage.set(type);
    clientMessage.set(keys.size());
    for (CacheEventData keys_item : keys)
      CacheEventDataCodec.encode(keys_item, clientMessage); 
    clientMessage.set(completionId);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
}
