package com.hazelcast.client.impl.protocol.codec;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.task.dynamicconfig.ListenerConfigHolder;
import com.hazelcast.client.impl.protocol.task.dynamicconfig.MapStoreConfigHolder;
import com.hazelcast.client.impl.protocol.task.dynamicconfig.NearCacheConfigHolder;
import com.hazelcast.client.impl.protocol.task.dynamicconfig.QueryCacheConfigHolder;
import com.hazelcast.config.HotRestartConfig;
import com.hazelcast.config.MapAttributeConfig;
import com.hazelcast.config.MapIndexConfig;
import com.hazelcast.config.WanReplicationRef;
import com.hazelcast.nio.serialization.Data;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

@SuppressFBWarnings({"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD"})
public final class DynamicConfigAddMapConfigCodec {
  public static final DynamicConfigMessageType REQUEST_TYPE = DynamicConfigMessageType.DYNAMICCONFIG_ADDMAPCONFIG;
  
  public static final int RESPONSE_TYPE = 100;
  
  public static ClientMessage encodeRequest(String name, int backupCount, int asyncBackupCount, int timeToLiveSeconds, int maxIdleSeconds, String evictionPolicy, boolean readBackupData, String cacheDeserializedValues, String mergePolicy, String inMemoryFormat, Collection<ListenerConfigHolder> listenerConfigs, Collection<ListenerConfigHolder> partitionLostListenerConfigs, boolean statisticsEnabled, String quorumName, Data mapEvictionPolicy, String maxSizeConfigMaxSizePolicy, int maxSizeConfigSize, MapStoreConfigHolder mapStoreConfig, NearCacheConfigHolder nearCacheConfig, WanReplicationRef wanReplicationRef, Collection<MapIndexConfig> mapIndexConfigs, Collection<MapAttributeConfig> mapAttributeConfigs, Collection<QueryCacheConfigHolder> queryCacheConfigs, String partitioningStrategyClassName, Data partitioningStrategyImplementation, HotRestartConfig hotRestartConfig) {
    int requiredDataSize = RequestParameters.calculateDataSize(name, backupCount, asyncBackupCount, timeToLiveSeconds, maxIdleSeconds, evictionPolicy, readBackupData, cacheDeserializedValues, mergePolicy, inMemoryFormat, listenerConfigs, partitionLostListenerConfigs, statisticsEnabled, quorumName, mapEvictionPolicy, maxSizeConfigMaxSizePolicy, maxSizeConfigSize, mapStoreConfig, nearCacheConfig, wanReplicationRef, mapIndexConfigs, mapAttributeConfigs, queryCacheConfigs, partitioningStrategyClassName, partitioningStrategyImplementation, hotRestartConfig);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(REQUEST_TYPE.id());
    clientMessage.setRetryable(false);
    clientMessage.setAcquiresResource(false);
    clientMessage.setOperationName("DynamicConfig.addMapConfig");
    clientMessage.set(name);
    clientMessage.set(backupCount);
    clientMessage.set(asyncBackupCount);
    clientMessage.set(timeToLiveSeconds);
    clientMessage.set(maxIdleSeconds);
    clientMessage.set(evictionPolicy);
    clientMessage.set(readBackupData);
    clientMessage.set(cacheDeserializedValues);
    clientMessage.set(mergePolicy);
    clientMessage.set(inMemoryFormat);
    if (listenerConfigs == null) {
      boolean listenerConfigs_isNull = true;
      clientMessage.set(listenerConfigs_isNull);
    } else {
      boolean listenerConfigs_isNull = false;
      clientMessage.set(listenerConfigs_isNull);
      clientMessage.set(listenerConfigs.size());
      for (ListenerConfigHolder listenerConfigs_item : listenerConfigs)
        ListenerConfigCodec.encode(listenerConfigs_item, clientMessage); 
    } 
    if (partitionLostListenerConfigs == null) {
      boolean partitionLostListenerConfigs_isNull = true;
      clientMessage.set(partitionLostListenerConfigs_isNull);
    } else {
      boolean partitionLostListenerConfigs_isNull = false;
      clientMessage.set(partitionLostListenerConfigs_isNull);
      clientMessage.set(partitionLostListenerConfigs.size());
      for (ListenerConfigHolder partitionLostListenerConfigs_item : partitionLostListenerConfigs)
        ListenerConfigCodec.encode(partitionLostListenerConfigs_item, clientMessage); 
    } 
    clientMessage.set(statisticsEnabled);
    if (quorumName == null) {
      boolean quorumName_isNull = true;
      clientMessage.set(quorumName_isNull);
    } else {
      boolean quorumName_isNull = false;
      clientMessage.set(quorumName_isNull);
      clientMessage.set(quorumName);
    } 
    if (mapEvictionPolicy == null) {
      boolean mapEvictionPolicy_isNull = true;
      clientMessage.set(mapEvictionPolicy_isNull);
    } else {
      boolean mapEvictionPolicy_isNull = false;
      clientMessage.set(mapEvictionPolicy_isNull);
      clientMessage.set(mapEvictionPolicy);
    } 
    clientMessage.set(maxSizeConfigMaxSizePolicy);
    clientMessage.set(maxSizeConfigSize);
    if (mapStoreConfig == null) {
      boolean mapStoreConfig_isNull = true;
      clientMessage.set(mapStoreConfig_isNull);
    } else {
      boolean mapStoreConfig_isNull = false;
      clientMessage.set(mapStoreConfig_isNull);
      MapStoreConfigCodec.encode(mapStoreConfig, clientMessage);
    } 
    if (nearCacheConfig == null) {
      boolean nearCacheConfig_isNull = true;
      clientMessage.set(nearCacheConfig_isNull);
    } else {
      boolean nearCacheConfig_isNull = false;
      clientMessage.set(nearCacheConfig_isNull);
      NearCacheConfigCodec.encode(nearCacheConfig, clientMessage);
    } 
    if (wanReplicationRef == null) {
      boolean wanReplicationRef_isNull = true;
      clientMessage.set(wanReplicationRef_isNull);
    } else {
      boolean wanReplicationRef_isNull = false;
      clientMessage.set(wanReplicationRef_isNull);
      WanReplicationRefCodec.encode(wanReplicationRef, clientMessage);
    } 
    if (mapIndexConfigs == null) {
      boolean mapIndexConfigs_isNull = true;
      clientMessage.set(mapIndexConfigs_isNull);
    } else {
      boolean mapIndexConfigs_isNull = false;
      clientMessage.set(mapIndexConfigs_isNull);
      clientMessage.set(mapIndexConfigs.size());
      for (MapIndexConfig mapIndexConfigs_item : mapIndexConfigs)
        MapIndexConfigCodec.encode(mapIndexConfigs_item, clientMessage); 
    } 
    if (mapAttributeConfigs == null) {
      boolean mapAttributeConfigs_isNull = true;
      clientMessage.set(mapAttributeConfigs_isNull);
    } else {
      boolean mapAttributeConfigs_isNull = false;
      clientMessage.set(mapAttributeConfigs_isNull);
      clientMessage.set(mapAttributeConfigs.size());
      for (MapAttributeConfig mapAttributeConfigs_item : mapAttributeConfigs)
        MapAttributeConfigCodec.encode(mapAttributeConfigs_item, clientMessage); 
    } 
    if (queryCacheConfigs == null) {
      boolean queryCacheConfigs_isNull = true;
      clientMessage.set(queryCacheConfigs_isNull);
    } else {
      boolean queryCacheConfigs_isNull = false;
      clientMessage.set(queryCacheConfigs_isNull);
      clientMessage.set(queryCacheConfigs.size());
      for (QueryCacheConfigHolder queryCacheConfigs_item : queryCacheConfigs)
        QueryCacheConfigCodec.encode(queryCacheConfigs_item, clientMessage); 
    } 
    if (partitioningStrategyClassName == null) {
      boolean partitioningStrategyClassName_isNull = true;
      clientMessage.set(partitioningStrategyClassName_isNull);
    } else {
      boolean partitioningStrategyClassName_isNull = false;
      clientMessage.set(partitioningStrategyClassName_isNull);
      clientMessage.set(partitioningStrategyClassName);
    } 
    if (partitioningStrategyImplementation == null) {
      boolean partitioningStrategyImplementation_isNull = true;
      clientMessage.set(partitioningStrategyImplementation_isNull);
    } else {
      boolean partitioningStrategyImplementation_isNull = false;
      clientMessage.set(partitioningStrategyImplementation_isNull);
      clientMessage.set(partitioningStrategyImplementation);
    } 
    if (hotRestartConfig == null) {
      boolean hotRestartConfig_isNull = true;
      clientMessage.set(hotRestartConfig_isNull);
    } else {
      boolean hotRestartConfig_isNull = false;
      clientMessage.set(hotRestartConfig_isNull);
      HotRestartConfigCodec.encode(hotRestartConfig, clientMessage);
    } 
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static ClientMessage encodeRequest(String name, int backupCount, int asyncBackupCount, int timeToLiveSeconds, int maxIdleSeconds, String evictionPolicy, boolean readBackupData, String cacheDeserializedValues, String mergePolicy, String inMemoryFormat, Collection<ListenerConfigHolder> listenerConfigs, Collection<ListenerConfigHolder> partitionLostListenerConfigs, boolean statisticsEnabled, String quorumName, Data mapEvictionPolicy, String maxSizeConfigMaxSizePolicy, int maxSizeConfigSize, MapStoreConfigHolder mapStoreConfig, NearCacheConfigHolder nearCacheConfig, WanReplicationRef wanReplicationRef, Collection<MapIndexConfig> mapIndexConfigs, Collection<MapAttributeConfig> mapAttributeConfigs, Collection<QueryCacheConfigHolder> queryCacheConfigs, String partitioningStrategyClassName, Data partitioningStrategyImplementation, HotRestartConfig hotRestartConfig, int mergeBatchSize) {
    int requiredDataSize = RequestParameters.calculateDataSize(name, backupCount, asyncBackupCount, timeToLiveSeconds, maxIdleSeconds, evictionPolicy, readBackupData, cacheDeserializedValues, mergePolicy, inMemoryFormat, listenerConfigs, partitionLostListenerConfigs, statisticsEnabled, quorumName, mapEvictionPolicy, maxSizeConfigMaxSizePolicy, maxSizeConfigSize, mapStoreConfig, nearCacheConfig, wanReplicationRef, mapIndexConfigs, mapAttributeConfigs, queryCacheConfigs, partitioningStrategyClassName, partitioningStrategyImplementation, hotRestartConfig, mergeBatchSize);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(REQUEST_TYPE.id());
    clientMessage.setRetryable(false);
    clientMessage.setAcquiresResource(false);
    clientMessage.setOperationName("DynamicConfig.addMapConfig");
    clientMessage.set(name);
    clientMessage.set(backupCount);
    clientMessage.set(asyncBackupCount);
    clientMessage.set(timeToLiveSeconds);
    clientMessage.set(maxIdleSeconds);
    clientMessage.set(evictionPolicy);
    clientMessage.set(readBackupData);
    clientMessage.set(cacheDeserializedValues);
    clientMessage.set(mergePolicy);
    clientMessage.set(inMemoryFormat);
    if (listenerConfigs == null) {
      boolean listenerConfigs_isNull = true;
      clientMessage.set(listenerConfigs_isNull);
    } else {
      boolean listenerConfigs_isNull = false;
      clientMessage.set(listenerConfigs_isNull);
      clientMessage.set(listenerConfigs.size());
      for (ListenerConfigHolder listenerConfigs_item : listenerConfigs)
        ListenerConfigCodec.encode(listenerConfigs_item, clientMessage); 
    } 
    if (partitionLostListenerConfigs == null) {
      boolean partitionLostListenerConfigs_isNull = true;
      clientMessage.set(partitionLostListenerConfigs_isNull);
    } else {
      boolean partitionLostListenerConfigs_isNull = false;
      clientMessage.set(partitionLostListenerConfigs_isNull);
      clientMessage.set(partitionLostListenerConfigs.size());
      for (ListenerConfigHolder partitionLostListenerConfigs_item : partitionLostListenerConfigs)
        ListenerConfigCodec.encode(partitionLostListenerConfigs_item, clientMessage); 
    } 
    clientMessage.set(statisticsEnabled);
    if (quorumName == null) {
      boolean quorumName_isNull = true;
      clientMessage.set(quorumName_isNull);
    } else {
      boolean quorumName_isNull = false;
      clientMessage.set(quorumName_isNull);
      clientMessage.set(quorumName);
    } 
    if (mapEvictionPolicy == null) {
      boolean mapEvictionPolicy_isNull = true;
      clientMessage.set(mapEvictionPolicy_isNull);
    } else {
      boolean mapEvictionPolicy_isNull = false;
      clientMessage.set(mapEvictionPolicy_isNull);
      clientMessage.set(mapEvictionPolicy);
    } 
    clientMessage.set(maxSizeConfigMaxSizePolicy);
    clientMessage.set(maxSizeConfigSize);
    if (mapStoreConfig == null) {
      boolean mapStoreConfig_isNull = true;
      clientMessage.set(mapStoreConfig_isNull);
    } else {
      boolean mapStoreConfig_isNull = false;
      clientMessage.set(mapStoreConfig_isNull);
      MapStoreConfigCodec.encode(mapStoreConfig, clientMessage);
    } 
    if (nearCacheConfig == null) {
      boolean nearCacheConfig_isNull = true;
      clientMessage.set(nearCacheConfig_isNull);
    } else {
      boolean nearCacheConfig_isNull = false;
      clientMessage.set(nearCacheConfig_isNull);
      NearCacheConfigCodec.encode(nearCacheConfig, clientMessage);
    } 
    if (wanReplicationRef == null) {
      boolean wanReplicationRef_isNull = true;
      clientMessage.set(wanReplicationRef_isNull);
    } else {
      boolean wanReplicationRef_isNull = false;
      clientMessage.set(wanReplicationRef_isNull);
      WanReplicationRefCodec.encode(wanReplicationRef, clientMessage);
    } 
    if (mapIndexConfigs == null) {
      boolean mapIndexConfigs_isNull = true;
      clientMessage.set(mapIndexConfigs_isNull);
    } else {
      boolean mapIndexConfigs_isNull = false;
      clientMessage.set(mapIndexConfigs_isNull);
      clientMessage.set(mapIndexConfigs.size());
      for (MapIndexConfig mapIndexConfigs_item : mapIndexConfigs)
        MapIndexConfigCodec.encode(mapIndexConfigs_item, clientMessage); 
    } 
    if (mapAttributeConfigs == null) {
      boolean mapAttributeConfigs_isNull = true;
      clientMessage.set(mapAttributeConfigs_isNull);
    } else {
      boolean mapAttributeConfigs_isNull = false;
      clientMessage.set(mapAttributeConfigs_isNull);
      clientMessage.set(mapAttributeConfigs.size());
      for (MapAttributeConfig mapAttributeConfigs_item : mapAttributeConfigs)
        MapAttributeConfigCodec.encode(mapAttributeConfigs_item, clientMessage); 
    } 
    if (queryCacheConfigs == null) {
      boolean queryCacheConfigs_isNull = true;
      clientMessage.set(queryCacheConfigs_isNull);
    } else {
      boolean queryCacheConfigs_isNull = false;
      clientMessage.set(queryCacheConfigs_isNull);
      clientMessage.set(queryCacheConfigs.size());
      for (QueryCacheConfigHolder queryCacheConfigs_item : queryCacheConfigs)
        QueryCacheConfigCodec.encode(queryCacheConfigs_item, clientMessage); 
    } 
    if (partitioningStrategyClassName == null) {
      boolean partitioningStrategyClassName_isNull = true;
      clientMessage.set(partitioningStrategyClassName_isNull);
    } else {
      boolean partitioningStrategyClassName_isNull = false;
      clientMessage.set(partitioningStrategyClassName_isNull);
      clientMessage.set(partitioningStrategyClassName);
    } 
    if (partitioningStrategyImplementation == null) {
      boolean partitioningStrategyImplementation_isNull = true;
      clientMessage.set(partitioningStrategyImplementation_isNull);
    } else {
      boolean partitioningStrategyImplementation_isNull = false;
      clientMessage.set(partitioningStrategyImplementation_isNull);
      clientMessage.set(partitioningStrategyImplementation);
    } 
    if (hotRestartConfig == null) {
      boolean hotRestartConfig_isNull = true;
      clientMessage.set(hotRestartConfig_isNull);
    } else {
      boolean hotRestartConfig_isNull = false;
      clientMessage.set(hotRestartConfig_isNull);
      HotRestartConfigCodec.encode(hotRestartConfig, clientMessage);
    } 
    clientMessage.set(mergeBatchSize);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static ClientMessage encodeRequest(String name, int backupCount, int asyncBackupCount, int timeToLiveSeconds, int maxIdleSeconds, String evictionPolicy, boolean readBackupData, String cacheDeserializedValues, String mergePolicy, String inMemoryFormat, Collection<ListenerConfigHolder> listenerConfigs, Collection<ListenerConfigHolder> partitionLostListenerConfigs, boolean statisticsEnabled, String quorumName, Data mapEvictionPolicy, String maxSizeConfigMaxSizePolicy, int maxSizeConfigSize, MapStoreConfigHolder mapStoreConfig, NearCacheConfigHolder nearCacheConfig, WanReplicationRef wanReplicationRef, Collection<MapIndexConfig> mapIndexConfigs, Collection<MapAttributeConfig> mapAttributeConfigs, Collection<QueryCacheConfigHolder> queryCacheConfigs, String partitioningStrategyClassName, Data partitioningStrategyImplementation, HotRestartConfig hotRestartConfig, int mergeBatchSize, int metadataPolicy) {
    int requiredDataSize = RequestParameters.calculateDataSize(name, backupCount, asyncBackupCount, timeToLiveSeconds, maxIdleSeconds, evictionPolicy, readBackupData, cacheDeserializedValues, mergePolicy, inMemoryFormat, listenerConfigs, partitionLostListenerConfigs, statisticsEnabled, quorumName, mapEvictionPolicy, maxSizeConfigMaxSizePolicy, maxSizeConfigSize, mapStoreConfig, nearCacheConfig, wanReplicationRef, mapIndexConfigs, mapAttributeConfigs, queryCacheConfigs, partitioningStrategyClassName, partitioningStrategyImplementation, hotRestartConfig, mergeBatchSize, metadataPolicy);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(REQUEST_TYPE.id());
    clientMessage.setRetryable(false);
    clientMessage.setAcquiresResource(false);
    clientMessage.setOperationName("DynamicConfig.addMapConfig");
    clientMessage.set(name);
    clientMessage.set(backupCount);
    clientMessage.set(asyncBackupCount);
    clientMessage.set(timeToLiveSeconds);
    clientMessage.set(maxIdleSeconds);
    clientMessage.set(evictionPolicy);
    clientMessage.set(readBackupData);
    clientMessage.set(cacheDeserializedValues);
    clientMessage.set(mergePolicy);
    clientMessage.set(inMemoryFormat);
    if (listenerConfigs == null) {
      boolean listenerConfigs_isNull = true;
      clientMessage.set(listenerConfigs_isNull);
    } else {
      boolean listenerConfigs_isNull = false;
      clientMessage.set(listenerConfigs_isNull);
      clientMessage.set(listenerConfigs.size());
      for (ListenerConfigHolder listenerConfigs_item : listenerConfigs)
        ListenerConfigCodec.encode(listenerConfigs_item, clientMessage); 
    } 
    if (partitionLostListenerConfigs == null) {
      boolean partitionLostListenerConfigs_isNull = true;
      clientMessage.set(partitionLostListenerConfigs_isNull);
    } else {
      boolean partitionLostListenerConfigs_isNull = false;
      clientMessage.set(partitionLostListenerConfigs_isNull);
      clientMessage.set(partitionLostListenerConfigs.size());
      for (ListenerConfigHolder partitionLostListenerConfigs_item : partitionLostListenerConfigs)
        ListenerConfigCodec.encode(partitionLostListenerConfigs_item, clientMessage); 
    } 
    clientMessage.set(statisticsEnabled);
    if (quorumName == null) {
      boolean quorumName_isNull = true;
      clientMessage.set(quorumName_isNull);
    } else {
      boolean quorumName_isNull = false;
      clientMessage.set(quorumName_isNull);
      clientMessage.set(quorumName);
    } 
    if (mapEvictionPolicy == null) {
      boolean mapEvictionPolicy_isNull = true;
      clientMessage.set(mapEvictionPolicy_isNull);
    } else {
      boolean mapEvictionPolicy_isNull = false;
      clientMessage.set(mapEvictionPolicy_isNull);
      clientMessage.set(mapEvictionPolicy);
    } 
    clientMessage.set(maxSizeConfigMaxSizePolicy);
    clientMessage.set(maxSizeConfigSize);
    if (mapStoreConfig == null) {
      boolean mapStoreConfig_isNull = true;
      clientMessage.set(mapStoreConfig_isNull);
    } else {
      boolean mapStoreConfig_isNull = false;
      clientMessage.set(mapStoreConfig_isNull);
      MapStoreConfigCodec.encode(mapStoreConfig, clientMessage);
    } 
    if (nearCacheConfig == null) {
      boolean nearCacheConfig_isNull = true;
      clientMessage.set(nearCacheConfig_isNull);
    } else {
      boolean nearCacheConfig_isNull = false;
      clientMessage.set(nearCacheConfig_isNull);
      NearCacheConfigCodec.encode(nearCacheConfig, clientMessage);
    } 
    if (wanReplicationRef == null) {
      boolean wanReplicationRef_isNull = true;
      clientMessage.set(wanReplicationRef_isNull);
    } else {
      boolean wanReplicationRef_isNull = false;
      clientMessage.set(wanReplicationRef_isNull);
      WanReplicationRefCodec.encode(wanReplicationRef, clientMessage);
    } 
    if (mapIndexConfigs == null) {
      boolean mapIndexConfigs_isNull = true;
      clientMessage.set(mapIndexConfigs_isNull);
    } else {
      boolean mapIndexConfigs_isNull = false;
      clientMessage.set(mapIndexConfigs_isNull);
      clientMessage.set(mapIndexConfigs.size());
      for (MapIndexConfig mapIndexConfigs_item : mapIndexConfigs)
        MapIndexConfigCodec.encode(mapIndexConfigs_item, clientMessage); 
    } 
    if (mapAttributeConfigs == null) {
      boolean mapAttributeConfigs_isNull = true;
      clientMessage.set(mapAttributeConfigs_isNull);
    } else {
      boolean mapAttributeConfigs_isNull = false;
      clientMessage.set(mapAttributeConfigs_isNull);
      clientMessage.set(mapAttributeConfigs.size());
      for (MapAttributeConfig mapAttributeConfigs_item : mapAttributeConfigs)
        MapAttributeConfigCodec.encode(mapAttributeConfigs_item, clientMessage); 
    } 
    if (queryCacheConfigs == null) {
      boolean queryCacheConfigs_isNull = true;
      clientMessage.set(queryCacheConfigs_isNull);
    } else {
      boolean queryCacheConfigs_isNull = false;
      clientMessage.set(queryCacheConfigs_isNull);
      clientMessage.set(queryCacheConfigs.size());
      for (QueryCacheConfigHolder queryCacheConfigs_item : queryCacheConfigs)
        QueryCacheConfigCodec.encode(queryCacheConfigs_item, clientMessage); 
    } 
    if (partitioningStrategyClassName == null) {
      boolean partitioningStrategyClassName_isNull = true;
      clientMessage.set(partitioningStrategyClassName_isNull);
    } else {
      boolean partitioningStrategyClassName_isNull = false;
      clientMessage.set(partitioningStrategyClassName_isNull);
      clientMessage.set(partitioningStrategyClassName);
    } 
    if (partitioningStrategyImplementation == null) {
      boolean partitioningStrategyImplementation_isNull = true;
      clientMessage.set(partitioningStrategyImplementation_isNull);
    } else {
      boolean partitioningStrategyImplementation_isNull = false;
      clientMessage.set(partitioningStrategyImplementation_isNull);
      clientMessage.set(partitioningStrategyImplementation);
    } 
    if (hotRestartConfig == null) {
      boolean hotRestartConfig_isNull = true;
      clientMessage.set(hotRestartConfig_isNull);
    } else {
      boolean hotRestartConfig_isNull = false;
      clientMessage.set(hotRestartConfig_isNull);
      HotRestartConfigCodec.encode(hotRestartConfig, clientMessage);
    } 
    clientMessage.set(mergeBatchSize);
    clientMessage.set(metadataPolicy);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static RequestParameters decodeRequest(ClientMessage clientMessage) {
    RequestParameters parameters = new RequestParameters();
    if (clientMessage.isComplete())
      return parameters; 
    String name = null;
    name = clientMessage.getStringUtf8();
    parameters.name = name;
    int backupCount = 0;
    backupCount = clientMessage.getInt();
    parameters.backupCount = backupCount;
    int asyncBackupCount = 0;
    asyncBackupCount = clientMessage.getInt();
    parameters.asyncBackupCount = asyncBackupCount;
    int timeToLiveSeconds = 0;
    timeToLiveSeconds = clientMessage.getInt();
    parameters.timeToLiveSeconds = timeToLiveSeconds;
    int maxIdleSeconds = 0;
    maxIdleSeconds = clientMessage.getInt();
    parameters.maxIdleSeconds = maxIdleSeconds;
    String evictionPolicy = null;
    evictionPolicy = clientMessage.getStringUtf8();
    parameters.evictionPolicy = evictionPolicy;
    boolean readBackupData = false;
    readBackupData = clientMessage.getBoolean();
    parameters.readBackupData = readBackupData;
    String cacheDeserializedValues = null;
    cacheDeserializedValues = clientMessage.getStringUtf8();
    parameters.cacheDeserializedValues = cacheDeserializedValues;
    String mergePolicy = null;
    mergePolicy = clientMessage.getStringUtf8();
    parameters.mergePolicy = mergePolicy;
    String inMemoryFormat = null;
    inMemoryFormat = clientMessage.getStringUtf8();
    parameters.inMemoryFormat = inMemoryFormat;
    List<ListenerConfigHolder> listenerConfigs = null;
    boolean listenerConfigs_isNull = clientMessage.getBoolean();
    if (!listenerConfigs_isNull) {
      int listenerConfigs_size = clientMessage.getInt();
      listenerConfigs = new ArrayList<ListenerConfigHolder>(listenerConfigs_size);
      for (int listenerConfigs_index = 0; listenerConfigs_index < listenerConfigs_size; listenerConfigs_index++) {
        ListenerConfigHolder listenerConfigs_item = ListenerConfigCodec.decode(clientMessage);
        listenerConfigs.add(listenerConfigs_item);
      } 
      parameters.listenerConfigs = listenerConfigs;
    } 
    List<ListenerConfigHolder> partitionLostListenerConfigs = null;
    boolean partitionLostListenerConfigs_isNull = clientMessage.getBoolean();
    if (!partitionLostListenerConfigs_isNull) {
      int partitionLostListenerConfigs_size = clientMessage.getInt();
      partitionLostListenerConfigs = new ArrayList<ListenerConfigHolder>(partitionLostListenerConfigs_size);
      for (int partitionLostListenerConfigs_index = 0; partitionLostListenerConfigs_index < partitionLostListenerConfigs_size; partitionLostListenerConfigs_index++) {
        ListenerConfigHolder partitionLostListenerConfigs_item = ListenerConfigCodec.decode(clientMessage);
        partitionLostListenerConfigs.add(partitionLostListenerConfigs_item);
      } 
      parameters.partitionLostListenerConfigs = partitionLostListenerConfigs;
    } 
    boolean statisticsEnabled = false;
    statisticsEnabled = clientMessage.getBoolean();
    parameters.statisticsEnabled = statisticsEnabled;
    String quorumName = null;
    boolean quorumName_isNull = clientMessage.getBoolean();
    if (!quorumName_isNull) {
      quorumName = clientMessage.getStringUtf8();
      parameters.quorumName = quorumName;
    } 
    Data mapEvictionPolicy = null;
    boolean mapEvictionPolicy_isNull = clientMessage.getBoolean();
    if (!mapEvictionPolicy_isNull) {
      mapEvictionPolicy = clientMessage.getData();
      parameters.mapEvictionPolicy = mapEvictionPolicy;
    } 
    String maxSizeConfigMaxSizePolicy = null;
    maxSizeConfigMaxSizePolicy = clientMessage.getStringUtf8();
    parameters.maxSizeConfigMaxSizePolicy = maxSizeConfigMaxSizePolicy;
    int maxSizeConfigSize = 0;
    maxSizeConfigSize = clientMessage.getInt();
    parameters.maxSizeConfigSize = maxSizeConfigSize;
    MapStoreConfigHolder mapStoreConfig = null;
    boolean mapStoreConfig_isNull = clientMessage.getBoolean();
    if (!mapStoreConfig_isNull) {
      mapStoreConfig = MapStoreConfigCodec.decode(clientMessage);
      parameters.mapStoreConfig = mapStoreConfig;
    } 
    NearCacheConfigHolder nearCacheConfig = null;
    boolean nearCacheConfig_isNull = clientMessage.getBoolean();
    if (!nearCacheConfig_isNull) {
      nearCacheConfig = NearCacheConfigCodec.decode(clientMessage);
      parameters.nearCacheConfig = nearCacheConfig;
    } 
    WanReplicationRef wanReplicationRef = null;
    boolean wanReplicationRef_isNull = clientMessage.getBoolean();
    if (!wanReplicationRef_isNull) {
      wanReplicationRef = WanReplicationRefCodec.decode(clientMessage);
      parameters.wanReplicationRef = wanReplicationRef;
    } 
    List<MapIndexConfig> mapIndexConfigs = null;
    boolean mapIndexConfigs_isNull = clientMessage.getBoolean();
    if (!mapIndexConfigs_isNull) {
      int mapIndexConfigs_size = clientMessage.getInt();
      mapIndexConfigs = new ArrayList<MapIndexConfig>(mapIndexConfigs_size);
      for (int mapIndexConfigs_index = 0; mapIndexConfigs_index < mapIndexConfigs_size; mapIndexConfigs_index++) {
        MapIndexConfig mapIndexConfigs_item = MapIndexConfigCodec.decode(clientMessage);
        mapIndexConfigs.add(mapIndexConfigs_item);
      } 
      parameters.mapIndexConfigs = mapIndexConfigs;
    } 
    List<MapAttributeConfig> mapAttributeConfigs = null;
    boolean mapAttributeConfigs_isNull = clientMessage.getBoolean();
    if (!mapAttributeConfigs_isNull) {
      int mapAttributeConfigs_size = clientMessage.getInt();
      mapAttributeConfigs = new ArrayList<MapAttributeConfig>(mapAttributeConfigs_size);
      for (int mapAttributeConfigs_index = 0; mapAttributeConfigs_index < mapAttributeConfigs_size; mapAttributeConfigs_index++) {
        MapAttributeConfig mapAttributeConfigs_item = MapAttributeConfigCodec.decode(clientMessage);
        mapAttributeConfigs.add(mapAttributeConfigs_item);
      } 
      parameters.mapAttributeConfigs = mapAttributeConfigs;
    } 
    List<QueryCacheConfigHolder> queryCacheConfigs = null;
    boolean queryCacheConfigs_isNull = clientMessage.getBoolean();
    if (!queryCacheConfigs_isNull) {
      int queryCacheConfigs_size = clientMessage.getInt();
      queryCacheConfigs = new ArrayList<QueryCacheConfigHolder>(queryCacheConfigs_size);
      for (int queryCacheConfigs_index = 0; queryCacheConfigs_index < queryCacheConfigs_size; queryCacheConfigs_index++) {
        QueryCacheConfigHolder queryCacheConfigs_item = QueryCacheConfigCodec.decode(clientMessage);
        queryCacheConfigs.add(queryCacheConfigs_item);
      } 
      parameters.queryCacheConfigs = queryCacheConfigs;
    } 
    String partitioningStrategyClassName = null;
    boolean partitioningStrategyClassName_isNull = clientMessage.getBoolean();
    if (!partitioningStrategyClassName_isNull) {
      partitioningStrategyClassName = clientMessage.getStringUtf8();
      parameters.partitioningStrategyClassName = partitioningStrategyClassName;
    } 
    Data partitioningStrategyImplementation = null;
    boolean partitioningStrategyImplementation_isNull = clientMessage.getBoolean();
    if (!partitioningStrategyImplementation_isNull) {
      partitioningStrategyImplementation = clientMessage.getData();
      parameters.partitioningStrategyImplementation = partitioningStrategyImplementation;
    } 
    HotRestartConfig hotRestartConfig = null;
    boolean hotRestartConfig_isNull = clientMessage.getBoolean();
    if (!hotRestartConfig_isNull) {
      hotRestartConfig = HotRestartConfigCodec.decode(clientMessage);
      parameters.hotRestartConfig = hotRestartConfig;
    } 
    if (clientMessage.isComplete())
      return parameters; 
    int mergeBatchSize = 0;
    mergeBatchSize = clientMessage.getInt();
    parameters.mergeBatchSize = mergeBatchSize;
    parameters.mergeBatchSizeExist = true;
    if (clientMessage.isComplete())
      return parameters; 
    int metadataPolicy = 0;
    metadataPolicy = clientMessage.getInt();
    parameters.metadataPolicy = metadataPolicy;
    parameters.metadataPolicyExist = true;
    return parameters;
  }
  
  public static ClientMessage encodeResponse() {
    requiredDataSize = ResponseParameters.calculateDataSize();
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(100);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static ResponseParameters decodeResponse(ClientMessage clientMessage) { return new ResponseParameters(); }
}
