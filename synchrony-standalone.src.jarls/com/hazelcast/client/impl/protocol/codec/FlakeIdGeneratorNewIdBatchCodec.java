package com.hazelcast.client.impl.protocol.codec;

import com.hazelcast.client.impl.protocol.ClientMessage;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;

@SuppressFBWarnings({"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD"})
public final class FlakeIdGeneratorNewIdBatchCodec {
  public static final FlakeIdGeneratorMessageType REQUEST_TYPE = FlakeIdGeneratorMessageType.FLAKEIDGENERATOR_NEWIDBATCH;
  
  public static final int RESPONSE_TYPE = 126;
  
  public static ClientMessage encodeRequest(String name, int batchSize) {
    int requiredDataSize = RequestParameters.calculateDataSize(name, batchSize);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(REQUEST_TYPE.id());
    clientMessage.setRetryable(true);
    clientMessage.setAcquiresResource(false);
    clientMessage.setOperationName("FlakeIdGenerator.newIdBatch");
    clientMessage.set(name);
    clientMessage.set(batchSize);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static RequestParameters decodeRequest(ClientMessage clientMessage) {
    RequestParameters parameters = new RequestParameters();
    if (clientMessage.isComplete())
      return parameters; 
    String name = null;
    name = clientMessage.getStringUtf8();
    parameters.name = name;
    int batchSize = 0;
    batchSize = clientMessage.getInt();
    parameters.batchSize = batchSize;
    return parameters;
  }
  
  public static ClientMessage encodeResponse(long base, long increment, int batchSize) {
    int requiredDataSize = ResponseParameters.calculateDataSize(base, increment, batchSize);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(126);
    clientMessage.set(base);
    clientMessage.set(increment);
    clientMessage.set(batchSize);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static ResponseParameters decodeResponse(ClientMessage clientMessage) {
    ResponseParameters parameters = new ResponseParameters();
    long base = 0L;
    base = clientMessage.getLong();
    parameters.base = base;
    long increment = 0L;
    increment = clientMessage.getLong();
    parameters.increment = increment;
    int batchSize = 0;
    batchSize = clientMessage.getInt();
    parameters.batchSize = batchSize;
    return parameters;
  }
}
