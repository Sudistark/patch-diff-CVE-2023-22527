package com.hazelcast.client.impl.protocol.codec;

import com.hazelcast.client.impl.protocol.ClientMessage;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;

@SuppressFBWarnings({"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD"})
public final class DynamicConfigAddDurableExecutorConfigCodec {
  public static final DynamicConfigMessageType REQUEST_TYPE = DynamicConfigMessageType.DYNAMICCONFIG_ADDDURABLEEXECUTORCONFIG;
  
  public static final int RESPONSE_TYPE = 100;
  
  public static ClientMessage encodeRequest(String name, int poolSize, int durability, int capacity) {
    int requiredDataSize = RequestParameters.calculateDataSize(name, poolSize, durability, capacity);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(REQUEST_TYPE.id());
    clientMessage.setRetryable(false);
    clientMessage.setAcquiresResource(false);
    clientMessage.setOperationName("DynamicConfig.addDurableExecutorConfig");
    clientMessage.set(name);
    clientMessage.set(poolSize);
    clientMessage.set(durability);
    clientMessage.set(capacity);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static ClientMessage encodeRequest(String name, int poolSize, int durability, int capacity, String quorumName) {
    int requiredDataSize = RequestParameters.calculateDataSize(name, poolSize, durability, capacity, quorumName);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(REQUEST_TYPE.id());
    clientMessage.setRetryable(false);
    clientMessage.setAcquiresResource(false);
    clientMessage.setOperationName("DynamicConfig.addDurableExecutorConfig");
    clientMessage.set(name);
    clientMessage.set(poolSize);
    clientMessage.set(durability);
    clientMessage.set(capacity);
    if (quorumName == null) {
      boolean quorumName_isNull = true;
      clientMessage.set(quorumName_isNull);
    } else {
      boolean quorumName_isNull = false;
      clientMessage.set(quorumName_isNull);
      clientMessage.set(quorumName);
    } 
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static RequestParameters decodeRequest(ClientMessage clientMessage) {
    RequestParameters parameters = new RequestParameters();
    if (clientMessage.isComplete())
      return parameters; 
    String name = null;
    name = clientMessage.getStringUtf8();
    parameters.name = name;
    int poolSize = 0;
    poolSize = clientMessage.getInt();
    parameters.poolSize = poolSize;
    int durability = 0;
    durability = clientMessage.getInt();
    parameters.durability = durability;
    int capacity = 0;
    capacity = clientMessage.getInt();
    parameters.capacity = capacity;
    if (clientMessage.isComplete())
      return parameters; 
    String quorumName = null;
    boolean quorumName_isNull = clientMessage.getBoolean();
    if (!quorumName_isNull) {
      quorumName = clientMessage.getStringUtf8();
      parameters.quorumName = quorumName;
    } 
    parameters.quorumNameExist = true;
    return parameters;
  }
  
  public static ClientMessage encodeResponse() {
    requiredDataSize = ResponseParameters.calculateDataSize();
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(100);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static ResponseParameters decodeResponse(ClientMessage clientMessage) { return new ResponseParameters(); }
}
