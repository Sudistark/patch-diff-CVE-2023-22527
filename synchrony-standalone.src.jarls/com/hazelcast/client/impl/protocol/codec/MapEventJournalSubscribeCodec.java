package com.hazelcast.client.impl.protocol.codec;

import com.hazelcast.client.impl.protocol.ClientMessage;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;

@SuppressFBWarnings({"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD"})
public final class MapEventJournalSubscribeCodec {
  public static final MapMessageType REQUEST_TYPE = MapMessageType.MAP_EVENTJOURNALSUBSCRIBE;
  
  public static final int RESPONSE_TYPE = 125;
  
  public static ClientMessage encodeRequest(String name) {
    int requiredDataSize = RequestParameters.calculateDataSize(name);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(REQUEST_TYPE.id());
    clientMessage.setRetryable(true);
    clientMessage.setAcquiresResource(false);
    clientMessage.setOperationName("Map.eventJournalSubscribe");
    clientMessage.set(name);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static RequestParameters decodeRequest(ClientMessage clientMessage) {
    RequestParameters parameters = new RequestParameters();
    if (clientMessage.isComplete())
      return parameters; 
    String name = null;
    name = clientMessage.getStringUtf8();
    parameters.name = name;
    return parameters;
  }
  
  public static ClientMessage encodeResponse(long oldestSequence, long newestSequence) {
    int requiredDataSize = ResponseParameters.calculateDataSize(oldestSequence, newestSequence);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(125);
    clientMessage.set(oldestSequence);
    clientMessage.set(newestSequence);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static ResponseParameters decodeResponse(ClientMessage clientMessage) {
    ResponseParameters parameters = new ResponseParameters();
    long oldestSequence = 0L;
    oldestSequence = clientMessage.getLong();
    parameters.oldestSequence = oldestSequence;
    long newestSequence = 0L;
    newestSequence = clientMessage.getLong();
    parameters.newestSequence = newestSequence;
    return parameters;
  }
}
