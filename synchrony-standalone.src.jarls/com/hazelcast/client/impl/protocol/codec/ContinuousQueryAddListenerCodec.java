package com.hazelcast.client.impl.protocol.codec;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.util.ParameterUtil;
import com.hazelcast.map.impl.querycache.event.QueryCacheEventData;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import java.util.Collection;

@SuppressFBWarnings({"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD"})
public final class ContinuousQueryAddListenerCodec {
  public static final ContinuousQueryMessageType REQUEST_TYPE = ContinuousQueryMessageType.CONTINUOUSQUERY_ADDLISTENER;
  
  public static final int RESPONSE_TYPE = 104;
  
  public static ClientMessage encodeRequest(String listenerName, boolean localOnly) {
    int requiredDataSize = RequestParameters.calculateDataSize(listenerName, localOnly);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(REQUEST_TYPE.id());
    clientMessage.setRetryable(false);
    clientMessage.setAcquiresResource(false);
    clientMessage.setOperationName("ContinuousQuery.addListener");
    clientMessage.set(listenerName);
    clientMessage.set(localOnly);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static RequestParameters decodeRequest(ClientMessage clientMessage) {
    RequestParameters parameters = new RequestParameters();
    String listenerName = null;
    listenerName = clientMessage.getStringUtf8();
    parameters.listenerName = listenerName;
    boolean localOnly = false;
    localOnly = clientMessage.getBoolean();
    parameters.localOnly = localOnly;
    return parameters;
  }
  
  public static ClientMessage encodeResponse(String response) {
    int requiredDataSize = ResponseParameters.calculateDataSize(response);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(104);
    clientMessage.set(response);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static ResponseParameters decodeResponse(ClientMessage clientMessage) {
    ResponseParameters parameters = new ResponseParameters();
    String response = null;
    response = clientMessage.getStringUtf8();
    parameters.response = response;
    return parameters;
  }
  
  public static ClientMessage encodeQueryCacheSingleEvent(QueryCacheEventData data) {
    int dataSize = ClientMessage.HEADER_SIZE;
    dataSize += QueryCacheEventDataCodec.calculateDataSize(data);
    ClientMessage clientMessage = ClientMessage.createForEncode(dataSize);
    clientMessage.setMessageType(212);
    clientMessage.addFlag((short)1);
    QueryCacheEventDataCodec.encode(data, clientMessage);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static ClientMessage encodeQueryCacheBatchEvent(Collection<QueryCacheEventData> events, String source, int partitionId) {
    int dataSize = ClientMessage.HEADER_SIZE;
    dataSize += 4;
    for (QueryCacheEventData events_item : events)
      dataSize += QueryCacheEventDataCodec.calculateDataSize(events_item); 
    dataSize += ParameterUtil.calculateDataSize(source);
    dataSize += 4;
    ClientMessage clientMessage = ClientMessage.createForEncode(dataSize);
    clientMessage.setMessageType(213);
    clientMessage.addFlag((short)1);
    clientMessage.set(events.size());
    for (QueryCacheEventData events_item : events)
      QueryCacheEventDataCodec.encode(events_item, clientMessage); 
    clientMessage.set(source);
    clientMessage.set(partitionId);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
}
