package com.hazelcast.client.impl.protocol.codec;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.task.dynamicconfig.ListenerConfigHolder;
import com.hazelcast.client.impl.protocol.util.ParameterUtil;
import com.hazelcast.nio.serialization.Data;

public final class ListenerConfigCodec {
  public static ListenerConfigHolder decode(ClientMessage clientMessage) {
    byte listenerType = clientMessage.getByte();
    boolean isNullListenerImplementation = clientMessage.getBoolean();
    Data implementation = null;
    String className = null;
    if (!isNullListenerImplementation)
      implementation = clientMessage.getData(); 
    boolean isNullClassName = clientMessage.getBoolean();
    if (!isNullClassName)
      className = clientMessage.getStringUtf8(); 
    boolean local = clientMessage.getBoolean();
    boolean includeValue = clientMessage.getBoolean();
    if (className == null)
      return new ListenerConfigHolder(listenerType, implementation, includeValue, local); 
    return new ListenerConfigHolder(listenerType, className, includeValue, local);
  }
  
  public static void encode(ListenerConfigHolder listenerConfigHolder, ClientMessage clientMessage) {
    clientMessage.set((byte)listenerConfigHolder.getListenerType());
    boolean isNullImplementation = (listenerConfigHolder.getListenerImplementation() == null);
    clientMessage.set(isNullImplementation);
    if (!isNullImplementation)
      clientMessage.set(listenerConfigHolder.getListenerImplementation()); 
    boolean isNullClassName = (listenerConfigHolder.getClassName() == null);
    clientMessage.set(isNullClassName);
    if (!isNullClassName)
      clientMessage.set(listenerConfigHolder.getClassName()); 
    clientMessage.set(listenerConfigHolder.isLocal()).set(listenerConfigHolder.isIncludeValue());
  }
  
  public static int calculateDataSize(ListenerConfigHolder listenerConfig) {
    boolean hasImplementation = (listenerConfig.getListenerImplementation() != null);
    int dataSize = 4;
    if (hasImplementation) {
      dataSize += ParameterUtil.calculateDataSize(listenerConfig.getListenerImplementation());
    } else {
      dataSize += ParameterUtil.calculateDataSize(listenerConfig.getClassName());
    } 
    return dataSize;
  }
}
