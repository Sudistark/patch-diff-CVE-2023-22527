package com.hazelcast.client.impl.protocol.codec;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.nio.serialization.Data;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

@SuppressFBWarnings({"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD"})
public final class RingbufferAddAllCodec {
  public static final RingbufferMessageType REQUEST_TYPE = RingbufferMessageType.RINGBUFFER_ADDALL;
  
  public static final int RESPONSE_TYPE = 103;
  
  public static ClientMessage encodeRequest(String name, Collection<Data> valueList, int overflowPolicy) {
    int requiredDataSize = RequestParameters.calculateDataSize(name, valueList, overflowPolicy);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(REQUEST_TYPE.id());
    clientMessage.setRetryable(false);
    clientMessage.setAcquiresResource(false);
    clientMessage.setOperationName("Ringbuffer.addAll");
    clientMessage.set(name);
    clientMessage.set(valueList.size());
    for (Data valueList_item : valueList)
      clientMessage.set(valueList_item); 
    clientMessage.set(overflowPolicy);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static RequestParameters decodeRequest(ClientMessage clientMessage) {
    RequestParameters parameters = new RequestParameters();
    String name = null;
    name = clientMessage.getStringUtf8();
    parameters.name = name;
    List<Data> valueList = null;
    int valueList_size = clientMessage.getInt();
    valueList = new ArrayList<Data>(valueList_size);
    for (int valueList_index = 0; valueList_index < valueList_size; valueList_index++) {
      Data valueList_item = clientMessage.getData();
      valueList.add(valueList_item);
    } 
    parameters.valueList = valueList;
    int overflowPolicy = 0;
    overflowPolicy = clientMessage.getInt();
    parameters.overflowPolicy = overflowPolicy;
    return parameters;
  }
  
  public static ClientMessage encodeResponse(long response) {
    int requiredDataSize = ResponseParameters.calculateDataSize(response);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(103);
    clientMessage.set(response);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static ResponseParameters decodeResponse(ClientMessage clientMessage) {
    ResponseParameters parameters = new ResponseParameters();
    long response = 0L;
    response = clientMessage.getLong();
    parameters.response = response;
    return parameters;
  }
}
