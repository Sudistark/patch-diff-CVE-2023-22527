package com.hazelcast.client.impl.protocol.codec;

import com.hazelcast.client.impl.protocol.ClientMessage;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.UUID;

@SuppressFBWarnings({"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD"})
public final class MapAssignAndGetUuidsCodec {
  public static final MapMessageType REQUEST_TYPE = MapMessageType.MAP_ASSIGNANDGETUUIDS;
  
  public static final int RESPONSE_TYPE = 123;
  
  public static ClientMessage encodeRequest() {
    requiredDataSize = RequestParameters.calculateDataSize();
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(REQUEST_TYPE.id());
    clientMessage.setRetryable(true);
    clientMessage.setAcquiresResource(false);
    clientMessage.setOperationName("Map.assignAndGetUuids");
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static RequestParameters decodeRequest(ClientMessage clientMessage) { return new RequestParameters(); }
  
  public static ClientMessage encodeResponse(Collection<Map.Entry<Integer, UUID>> partitionUuidList) {
    int requiredDataSize = ResponseParameters.calculateDataSize(partitionUuidList);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(123);
    clientMessage.set(partitionUuidList.size());
    for (Map.Entry<Integer, UUID> partitionUuidList_item : partitionUuidList) {
      Integer partitionUuidList_itemKey = (Integer)partitionUuidList_item.getKey();
      UUID partitionUuidList_itemVal = (UUID)partitionUuidList_item.getValue();
      clientMessage.set(partitionUuidList_itemKey.intValue());
      UUIDCodec.encode(partitionUuidList_itemVal, clientMessage);
    } 
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static ResponseParameters decodeResponse(ClientMessage clientMessage) {
    ResponseParameters parameters = new ResponseParameters();
    List<Map.Entry<Integer, UUID>> partitionUuidList = null;
    int partitionUuidList_size = clientMessage.getInt();
    partitionUuidList = new ArrayList<Map.Entry<Integer, UUID>>(partitionUuidList_size);
    for (int partitionUuidList_index = 0; partitionUuidList_index < partitionUuidList_size; partitionUuidList_index++) {
      Integer partitionUuidList_item_key = Integer.valueOf(clientMessage.getInt());
      UUID partitionUuidList_item_val = UUIDCodec.decode(clientMessage);
      Map.Entry<Integer, UUID> partitionUuidList_item = new AbstractMap.SimpleEntry<Integer, UUID>(partitionUuidList_item_key, partitionUuidList_item_val);
      partitionUuidList.add(partitionUuidList_item);
    } 
    parameters.partitionUuidList = partitionUuidList;
    return parameters;
  }
}
