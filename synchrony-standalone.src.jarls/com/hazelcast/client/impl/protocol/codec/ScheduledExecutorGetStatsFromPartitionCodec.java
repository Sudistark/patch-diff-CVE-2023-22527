package com.hazelcast.client.impl.protocol.codec;

import com.hazelcast.client.impl.protocol.ClientMessage;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;

@SuppressFBWarnings({"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD"})
public final class ScheduledExecutorGetStatsFromPartitionCodec {
  public static final ScheduledExecutorMessageType REQUEST_TYPE = ScheduledExecutorMessageType.SCHEDULEDEXECUTOR_GETSTATSFROMPARTITION;
  
  public static final int RESPONSE_TYPE = 120;
  
  public static ClientMessage encodeRequest(String schedulerName, String taskName) {
    int requiredDataSize = RequestParameters.calculateDataSize(schedulerName, taskName);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(REQUEST_TYPE.id());
    clientMessage.setRetryable(true);
    clientMessage.setAcquiresResource(false);
    clientMessage.setOperationName("ScheduledExecutor.getStatsFromPartition");
    clientMessage.set(schedulerName);
    clientMessage.set(taskName);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static RequestParameters decodeRequest(ClientMessage clientMessage) {
    RequestParameters parameters = new RequestParameters();
    if (clientMessage.isComplete())
      return parameters; 
    String schedulerName = null;
    schedulerName = clientMessage.getStringUtf8();
    parameters.schedulerName = schedulerName;
    String taskName = null;
    taskName = clientMessage.getStringUtf8();
    parameters.taskName = taskName;
    return parameters;
  }
  
  public static ClientMessage encodeResponse(long lastIdleTimeNanos, long totalIdleTimeNanos, long totalRuns, long totalRunTimeNanos) {
    int requiredDataSize = ResponseParameters.calculateDataSize(lastIdleTimeNanos, totalIdleTimeNanos, totalRuns, totalRunTimeNanos);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(120);
    clientMessage.set(lastIdleTimeNanos);
    clientMessage.set(totalIdleTimeNanos);
    clientMessage.set(totalRuns);
    clientMessage.set(totalRunTimeNanos);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static ClientMessage encodeResponse(long lastIdleTimeNanos, long totalIdleTimeNanos, long totalRuns, long totalRunTimeNanos, long lastRunDurationNanos) {
    int requiredDataSize = ResponseParameters.calculateDataSize(lastIdleTimeNanos, totalIdleTimeNanos, totalRuns, totalRunTimeNanos, lastRunDurationNanos);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(120);
    clientMessage.set(lastIdleTimeNanos);
    clientMessage.set(totalIdleTimeNanos);
    clientMessage.set(totalRuns);
    clientMessage.set(totalRunTimeNanos);
    clientMessage.set(lastRunDurationNanos);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static ResponseParameters decodeResponse(ClientMessage clientMessage) {
    ResponseParameters parameters = new ResponseParameters();
    long lastIdleTimeNanos = 0L;
    lastIdleTimeNanos = clientMessage.getLong();
    parameters.lastIdleTimeNanos = lastIdleTimeNanos;
    long totalIdleTimeNanos = 0L;
    totalIdleTimeNanos = clientMessage.getLong();
    parameters.totalIdleTimeNanos = totalIdleTimeNanos;
    long totalRuns = 0L;
    totalRuns = clientMessage.getLong();
    parameters.totalRuns = totalRuns;
    long totalRunTimeNanos = 0L;
    totalRunTimeNanos = clientMessage.getLong();
    parameters.totalRunTimeNanos = totalRunTimeNanos;
    if (clientMessage.isComplete())
      return parameters; 
    long lastRunDurationNanos = 0L;
    lastRunDurationNanos = clientMessage.getLong();
    parameters.lastRunDurationNanos = lastRunDurationNanos;
    parameters.lastRunDurationNanosExist = true;
    return parameters;
  }
}
