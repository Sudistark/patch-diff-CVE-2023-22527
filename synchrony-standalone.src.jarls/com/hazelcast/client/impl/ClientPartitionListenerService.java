package com.hazelcast.client.impl;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.ClientAddPartitionListenerCodec;
import com.hazelcast.instance.EndpointQualifier;
import com.hazelcast.instance.MemberImpl;
import com.hazelcast.internal.partition.PartitionReplica;
import com.hazelcast.internal.partition.PartitionTableView;
import com.hazelcast.nio.Address;
import com.hazelcast.nio.Connection;
import com.hazelcast.spi.impl.NodeEngineImpl;
import com.hazelcast.util.scheduler.CoalescingDelayedTrigger;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

public class ClientPartitionListenerService {
  private static final long UPDATE_DELAY_MS = 100L;
  
  private static final long UPDATE_MAX_DELAY_MS = 500L;
  
  private final Map<ClientEndpoint, Long> partitionListeningEndpoints;
  
  private final NodeEngineImpl nodeEngine;
  
  private final boolean advancedNetworkConfigEnabled;
  
  private final CoalescingDelayedTrigger delayedPartitionUpdateTrigger;
  
  ClientPartitionListenerService(NodeEngineImpl nodeEngine) {
    this.partitionListeningEndpoints = new ConcurrentHashMap();
    this.nodeEngine = nodeEngine;
    this.advancedNetworkConfigEnabled = nodeEngine.getConfig().getAdvancedNetworkConfig().isEnabled();
    this.delayedPartitionUpdateTrigger = new CoalescingDelayedTrigger(nodeEngine.getExecutionService(), 100L, 500L, new PushPartitionTableUpdate(this, null));
  }
  
  public void onPartitionStateChange() { this.delayedPartitionUpdateTrigger.executeWithDelay(); }
  
  private void pushPartitionStateChange() {
    PartitionTableView partitionTableView = this.nodeEngine.getPartitionService().createPartitionTableView();
    Collection<Map.Entry<Address, List<Integer>>> partitions = getPartitions(partitionTableView);
    int partitionStateVersion = partitionTableView.getVersion();
    for (Map.Entry<ClientEndpoint, Long> entry : this.partitionListeningEndpoints.entrySet()) {
      ClientMessage clientMessage = getPartitionsMessage(partitions, partitionStateVersion);
      Long correlationId = (Long)entry.getValue();
      clientMessage.setCorrelationId(correlationId.longValue());
      ClientEndpoint clientEndpoint = (ClientEndpoint)entry.getKey();
      Connection connection = clientEndpoint.getConnection();
      connection.write(clientMessage);
    } 
  }
  
  private ClientMessage getPartitionsMessage(Collection<Map.Entry<Address, List<Integer>>> partitions, int partitionStateVersion) {
    ClientMessage clientMessage = ClientAddPartitionListenerCodec.encodePartitionsEvent(partitions, partitionStateVersion);
    clientMessage.addFlag((short)192);
    clientMessage.setVersion((short)1);
    return clientMessage;
  }
  
  public void registerPartitionListener(ClientEndpoint clientEndpoint, long correlationId) {
    this.partitionListeningEndpoints.put(clientEndpoint, Long.valueOf(correlationId));
    PartitionTableView partitionTableView = this.nodeEngine.getPartitionService().createPartitionTableView();
    Collection<Map.Entry<Address, List<Integer>>> partitions = getPartitions(partitionTableView);
    int partitionStateVersion = partitionTableView.getVersion();
    ClientMessage clientMessage = getPartitionsMessage(partitions, partitionStateVersion);
    clientMessage.setCorrelationId(correlationId);
    clientEndpoint.getConnection().write(clientMessage);
  }
  
  public void deregisterPartitionListener(ClientEndpoint clientEndpoint) { this.partitionListeningEndpoints.remove(clientEndpoint); }
  
  public Collection<Map.Entry<Address, List<Integer>>> getPartitions(PartitionTableView partitionTableView) {
    Map<Address, List<Integer>> partitionsMap = new HashMap<Address, List<Integer>>();
    int partitionCount = partitionTableView.getLength();
    for (int partitionId = 0; partitionId < partitionCount; partitionId++) {
      PartitionReplica owner = partitionTableView.getReplica(partitionId, 0);
      if (owner == null) {
        partitionsMap.clear();
        return partitionsMap.entrySet();
      } 
      Address clientOwnerAddress = clientAddressOf(owner.address());
      if (clientOwnerAddress == null) {
        partitionsMap.clear();
        return partitionsMap.entrySet();
      } 
      List<Integer> indexes = (List)partitionsMap.get(clientOwnerAddress);
      if (indexes == null) {
        indexes = new LinkedList<Integer>();
        partitionsMap.put(clientOwnerAddress, indexes);
      } 
      indexes.add(Integer.valueOf(partitionId));
    } 
    return partitionsMap.entrySet();
  }
  
  private Address clientAddressOf(Address memberAddress) {
    if (!this.advancedNetworkConfigEnabled)
      return memberAddress; 
    MemberImpl memberImpl = this.nodeEngine.getClusterService().getMember(memberAddress);
    if (memberImpl != null)
      return (Address)memberImpl.getAddressMap().get(EndpointQualifier.CLIENT); 
    return null;
  }
  
  public Map<ClientEndpoint, Long> getPartitionListeningEndpoints() { return this.partitionListeningEndpoints; }
}
