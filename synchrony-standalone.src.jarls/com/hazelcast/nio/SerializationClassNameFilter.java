package com.hazelcast.nio;

import com.hazelcast.config.ClassFilter;
import com.hazelcast.config.JavaSerializationFilterConfig;
import com.hazelcast.util.Preconditions;

public final class SerializationClassNameFilter implements ClassNameFilter {
  private static final String DESERIALIZATION_ERROR = "Resolving class %s is not allowed.";
  
  public SerializationClassNameFilter(JavaSerializationFilterConfig config) {
    Preconditions.checkNotNull(config, "JavaSerializationFilterConfig has to be provided");
    this.blacklist = config.getBlacklist();
    this.whitelist = config.getWhitelist();
    this.useDefaultWhitelist = !config.isDefaultsDisabled();
  }
  
  public void filter(String className) throws SecurityException {
    if (this.blacklist.isListed(className))
      throw new SecurityException(String.format("Resolving class %s is not allowed.", new Object[] { className })); 
    if (this.useDefaultWhitelist || !this.whitelist.isEmpty()) {
      if (this.whitelist.isListed(className) || (this.useDefaultWhitelist && DEFAULT_WHITELIST
        .isListed(className)))
        return; 
      throw new SecurityException(String.format("Resolving class %s is not allowed.", new Object[] { className }));
    } 
  }
  
  private static final ClassFilter DEFAULT_WHITELIST = new ClassFilter();
  
  private final ClassFilter blacklist;
  
  private final ClassFilter whitelist;
  
  private final boolean useDefaultWhitelist;
  
  static  {
    DEFAULT_WHITELIST.addPrefixes(new String[] { "com.hazelcast.", "java", "[" });
  }
}
