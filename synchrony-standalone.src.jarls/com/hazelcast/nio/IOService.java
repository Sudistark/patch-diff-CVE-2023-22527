package com.hazelcast.nio;

import com.hazelcast.client.impl.ClientEngine;
import com.hazelcast.config.MemcacheProtocolConfig;
import com.hazelcast.config.RestApiConfig;
import com.hazelcast.config.SSLConfig;
import com.hazelcast.config.SymmetricEncryptionConfig;
import com.hazelcast.instance.EndpointQualifier;
import com.hazelcast.internal.ascii.TextCommandService;
import com.hazelcast.internal.networking.InboundHandler;
import com.hazelcast.internal.networking.OutboundHandler;
import com.hazelcast.internal.serialization.InternalSerializationService;
import com.hazelcast.logging.LoggingService;
import com.hazelcast.nio.tcp.TcpIpConnection;
import com.hazelcast.spi.EventService;
import com.hazelcast.spi.annotation.PrivateApi;
import com.hazelcast.spi.properties.HazelcastProperties;
import java.io.IOException;
import java.net.Socket;
import java.util.Collection;
import java.util.Map;

@PrivateApi
public interface IOService {
  public static final int KILO_BYTE = 1024;
  
  boolean isActive();
  
  HazelcastProperties properties();
  
  String getHazelcastName();
  
  LoggingService getLoggingService();
  
  Address getThisAddress();
  
  Map<EndpointQualifier, Address> getThisAddresses();
  
  void onFatalError(Exception paramException);
  
  SymmetricEncryptionConfig getSymmetricEncryptionConfig(EndpointQualifier paramEndpointQualifier);
  
  RestApiConfig getRestApiConfig();
  
  MemcacheProtocolConfig getMemcacheProtocolConfig();
  
  SSLConfig getSSLConfig(EndpointQualifier paramEndpointQualifier);
  
  ClientEngine getClientEngine();
  
  TextCommandService getTextCommandService();
  
  void removeEndpoint(Address paramAddress);
  
  void onSuccessfulConnection(Address paramAddress);
  
  void onFailedConnection(Address paramAddress);
  
  void shouldConnectTo(Address paramAddress);
  
  boolean isSocketBind();
  
  boolean isSocketBindAny();
  
  void interceptSocket(EndpointQualifier paramEndpointQualifier, Socket paramSocket, boolean paramBoolean) throws IOException;
  
  boolean isSocketInterceptorEnabled(EndpointQualifier paramEndpointQualifier);
  
  int getSocketConnectTimeoutSeconds(EndpointQualifier paramEndpointQualifier);
  
  long getConnectionMonitorInterval();
  
  int getConnectionMonitorMaxFaults();
  
  void onDisconnect(Address paramAddress, Throwable paramThrowable);
  
  void executeAsync(Runnable paramRunnable);
  
  EventService getEventService();
  
  Collection<Integer> getOutboundPorts(EndpointQualifier paramEndpointQualifier);
  
  InternalSerializationService getSerializationService();
  
  MemberSocketInterceptor getSocketInterceptor(EndpointQualifier paramEndpointQualifier);
  
  InboundHandler[] createInboundHandlers(EndpointQualifier paramEndpointQualifier, TcpIpConnection paramTcpIpConnection);
  
  OutboundHandler[] createOutboundHandlers(EndpointQualifier paramEndpointQualifier, TcpIpConnection paramTcpIpConnection);
}
