package com.hazelcast.nio;

import com.hazelcast.client.impl.ClientEngine;
import com.hazelcast.config.AdvancedNetworkConfig;
import com.hazelcast.config.Config;
import com.hazelcast.config.EndpointConfig;
import com.hazelcast.config.MemcacheProtocolConfig;
import com.hazelcast.config.NetworkConfig;
import com.hazelcast.config.RestApiConfig;
import com.hazelcast.config.RestEndpointGroup;
import com.hazelcast.config.RestServerEndpointConfig;
import com.hazelcast.config.SSLConfig;
import com.hazelcast.config.SocketInterceptorConfig;
import com.hazelcast.config.SymmetricEncryptionConfig;
import com.hazelcast.instance.EndpointQualifier;
import com.hazelcast.instance.Node;
import com.hazelcast.instance.NodeState;
import com.hazelcast.internal.ascii.TextCommandService;
import com.hazelcast.internal.cluster.impl.ClusterServiceImpl;
import com.hazelcast.internal.config.ConfigValidator;
import com.hazelcast.internal.networking.InboundHandler;
import com.hazelcast.internal.networking.OutboundHandler;
import com.hazelcast.internal.serialization.InternalSerializationService;
import com.hazelcast.logging.LoggingService;
import com.hazelcast.nio.tcp.TcpIpConnection;
import com.hazelcast.spi.EventService;
import com.hazelcast.spi.annotation.PrivateApi;
import com.hazelcast.spi.impl.NodeEngineImpl;
import com.hazelcast.spi.properties.GroupProperty;
import com.hazelcast.spi.properties.HazelcastProperties;
import com.hazelcast.util.AddressUtil;
import com.hazelcast.util.ThreadUtil;
import java.io.IOException;
import java.net.Socket;
import java.util.Collection;
import java.util.Collections;
import java.util.Map;
import java.util.concurrent.TimeUnit;

@PrivateApi
public class NodeIOService implements IOService {
  private final Node node;
  
  private final NodeEngineImpl nodeEngine;
  
  private final RestApiConfig restApiConfig;
  
  private final MemcacheProtocolConfig memcacheProtocolConfig;
  
  public NodeIOService(Node node, NodeEngineImpl nodeEngine) {
    this.node = node;
    this.nodeEngine = nodeEngine;
    this.restApiConfig = initRestApiConfig(node.getProperties(), node.getConfig());
    this.memcacheProtocolConfig = initMemcacheProtocolConfig(node.getProperties(), node.getConfig());
  }
  
  private static RestApiConfig initRestApiConfig(HazelcastProperties properties, Config config) {
    boolean isAdvancedNetwork = config.getAdvancedNetworkConfig().isEnabled();
    RestApiConfig restApiConfig = config.getNetworkConfig().getRestApiConfig();
    boolean isRestConfigPresent = isAdvancedNetwork ? ((config.getAdvancedNetworkConfig().getEndpointConfigs().get(EndpointQualifier.REST) != null)) : ((restApiConfig != null));
    if (isRestConfigPresent) {
      ConfigValidator.ensurePropertyNotConfigured(properties, GroupProperty.REST_ENABLED);
      ConfigValidator.ensurePropertyNotConfigured(properties, GroupProperty.HTTP_HEALTHCHECK_ENABLED);
    } 
    if (isRestConfigPresent && isAdvancedNetwork) {
      restApiConfig = new RestApiConfig();
      restApiConfig.setEnabled(true);
      RestServerEndpointConfig restServerEndpointConfig = config.getAdvancedNetworkConfig().getRestEndpointConfig();
      restApiConfig.setEnabledGroups(restServerEndpointConfig.getEnabledGroups());
    } else if (!isRestConfigPresent) {
      restApiConfig = new RestApiConfig();
      if (ConfigValidator.checkAndLogPropertyDeprecated(properties, GroupProperty.REST_ENABLED)) {
        restApiConfig.setEnabled(true);
        restApiConfig.enableAllGroups();
      } 
      if (ConfigValidator.checkAndLogPropertyDeprecated(properties, GroupProperty.HTTP_HEALTHCHECK_ENABLED)) {
        restApiConfig.setEnabled(true);
        restApiConfig.enableGroups(new RestEndpointGroup[] { RestEndpointGroup.HEALTH_CHECK });
      } 
    } 
    return restApiConfig;
  }
  
  private static MemcacheProtocolConfig initMemcacheProtocolConfig(HazelcastProperties properties, Config config) {
    boolean isAdvancedNetwork = config.getAdvancedNetworkConfig().isEnabled();
    MemcacheProtocolConfig memcacheProtocolConfig = config.getNetworkConfig().getMemcacheProtocolConfig();
    boolean isMemcacheConfigPresent = isAdvancedNetwork ? ((config.getAdvancedNetworkConfig().getEndpointConfigs().get(EndpointQualifier.MEMCACHE) != null)) : ((memcacheProtocolConfig != null));
    if (isMemcacheConfigPresent)
      ConfigValidator.ensurePropertyNotConfigured(properties, GroupProperty.MEMCACHE_ENABLED); 
    if (isMemcacheConfigPresent && isAdvancedNetwork) {
      memcacheProtocolConfig = new MemcacheProtocolConfig();
      memcacheProtocolConfig.setEnabled(true);
    } else if (!isMemcacheConfigPresent) {
      memcacheProtocolConfig = new MemcacheProtocolConfig();
      if (ConfigValidator.checkAndLogPropertyDeprecated(properties, GroupProperty.MEMCACHE_ENABLED))
        memcacheProtocolConfig.setEnabled(true); 
    } 
    return memcacheProtocolConfig;
  }
  
  public HazelcastProperties properties() { return this.node.getProperties(); }
  
  public String getHazelcastName() { return this.node.hazelcastInstance.getName(); }
  
  public LoggingService getLoggingService() { return this.nodeEngine.getLoggingService(); }
  
  public boolean isActive() { return (this.node.getState() != NodeState.SHUT_DOWN); }
  
  public Address getThisAddress() { return this.node.getThisAddress(); }
  
  public Map<EndpointQualifier, Address> getThisAddresses() { return this.nodeEngine.getLocalMember().getAddressMap(); }
  
  public void onFatalError(Exception e) {
    String hzName = this.nodeEngine.getHazelcastInstance().getName();
    Object object = new Object(this, ThreadUtil.createThreadName(hzName, "io.error.shutdown"));
    object.start();
  }
  
  public SocketInterceptorConfig getSocketInterceptorConfig(EndpointQualifier endpointQualifier) {
    AdvancedNetworkConfig advancedNetworkConfig = this.node.getConfig().getAdvancedNetworkConfig();
    if (advancedNetworkConfig.isEnabled()) {
      EndpointConfig config = (EndpointConfig)advancedNetworkConfig.getEndpointConfigs().get(endpointQualifier);
      return (config != null) ? config.getSocketInterceptorConfig() : null;
    } 
    return this.node.getConfig().getNetworkConfig().getSocketInterceptorConfig();
  }
  
  public SymmetricEncryptionConfig getSymmetricEncryptionConfig(EndpointQualifier endpointQualifier) {
    AdvancedNetworkConfig advancedNetworkConfig = this.node.getConfig().getAdvancedNetworkConfig();
    if (advancedNetworkConfig.isEnabled()) {
      EndpointConfig config = (EndpointConfig)advancedNetworkConfig.getEndpointConfigs().get(endpointQualifier);
      return (config != null) ? config.getSymmetricEncryptionConfig() : null;
    } 
    return this.node.getConfig().getNetworkConfig().getSymmetricEncryptionConfig();
  }
  
  public SSLConfig getSSLConfig(EndpointQualifier endpointQualifier) {
    AdvancedNetworkConfig advancedNetworkConfig = this.node.getConfig().getAdvancedNetworkConfig();
    if (advancedNetworkConfig.isEnabled()) {
      EndpointConfig config = (EndpointConfig)advancedNetworkConfig.getEndpointConfigs().get(endpointQualifier);
      return (config != null) ? config.getSSLConfig() : null;
    } 
    return this.node.getConfig().getNetworkConfig().getSSLConfig();
  }
  
  public ClientEngine getClientEngine() { return this.node.clientEngine; }
  
  public TextCommandService getTextCommandService() { return this.node.getTextCommandService(); }
  
  public void removeEndpoint(Address endPoint) { this.nodeEngine.getExecutionService().execute("hz:io", new Object(this, endPoint)); }
  
  public void onDisconnect(Address endpoint, Throwable cause) {
    if (cause == null)
      return; 
    if (this.node.clusterService.getMember(endpoint) != null)
      this.nodeEngine.getExecutionService().execute("hz:io", new ReconnectionTask(this, endpoint)); 
  }
  
  public void onSuccessfulConnection(Address address) {
    if (!this.node.getClusterService().isJoined())
      this.node.getJoiner().unblacklist(address); 
  }
  
  public void onFailedConnection(Address address) {
    ClusterServiceImpl clusterServiceImpl = this.node.clusterService;
    if (!clusterServiceImpl.isJoined()) {
      this.node.getJoiner().blacklist(address, false);
    } else if (clusterServiceImpl.getMember(address) != null) {
      this.nodeEngine.getExecutionService().schedule("hz:io", new ReconnectionTask(this, address), 
          getConnectionMonitorInterval(), TimeUnit.MILLISECONDS);
    } 
  }
  
  public void shouldConnectTo(Address address) {
    if (this.node.getThisAddress().equals(address))
      throw new RuntimeException("Connecting to self! " + address); 
  }
  
  public boolean isSocketBind() { return this.node.getProperties().getBoolean(GroupProperty.SOCKET_CLIENT_BIND); }
  
  public boolean isSocketBindAny() { return this.node.getProperties().getBoolean(GroupProperty.SOCKET_CLIENT_BIND_ANY); }
  
  public void interceptSocket(EndpointQualifier endpointQualifier, Socket socket, boolean onAccept) throws IOException {
    socket.getChannel().configureBlocking(true);
    if (!isSocketInterceptorEnabled(endpointQualifier))
      return; 
    MemberSocketInterceptor memberSocketInterceptor = getSocketInterceptor(endpointQualifier);
    if (memberSocketInterceptor == null)
      return; 
    if (onAccept) {
      memberSocketInterceptor.onAccept(socket);
    } else {
      memberSocketInterceptor.onConnect(socket);
    } 
  }
  
  public boolean isSocketInterceptorEnabled(EndpointQualifier endpointQualifier) {
    SocketInterceptorConfig socketInterceptorConfig = getSocketInterceptorConfig(endpointQualifier);
    return (socketInterceptorConfig != null && socketInterceptorConfig.isEnabled());
  }
  
  public int getSocketConnectTimeoutSeconds(EndpointQualifier endpointQualifier) {
    AdvancedNetworkConfig advancedNetworkConfig = this.node.getConfig().getAdvancedNetworkConfig();
    if (advancedNetworkConfig.isEnabled()) {
      EndpointConfig config = (EndpointConfig)advancedNetworkConfig.getEndpointConfigs().get(endpointQualifier);
      return (config != null) ? config.getSocketConnectTimeoutSeconds() : 0;
    } 
    return this.node.getProperties().getSeconds(GroupProperty.SOCKET_CONNECT_TIMEOUT_SECONDS);
  }
  
  public long getConnectionMonitorInterval() { return this.node.getProperties().getMillis(GroupProperty.CONNECTION_MONITOR_INTERVAL); }
  
  public int getConnectionMonitorMaxFaults() { return this.node.getProperties().getInteger(GroupProperty.CONNECTION_MONITOR_MAX_FAULTS); }
  
  public void executeAsync(Runnable runnable) { this.nodeEngine.getExecutionService().execute("hz:io", runnable); }
  
  public EventService getEventService() { return this.nodeEngine.getEventService(); }
  
  public InternalSerializationService getSerializationService() { return this.node.getSerializationService(); }
  
  public MemberSocketInterceptor getSocketInterceptor(EndpointQualifier endpointQualifier) { return this.node.getNodeExtension().getSocketInterceptor(endpointQualifier); }
  
  public InboundHandler[] createInboundHandlers(EndpointQualifier qualifier, TcpIpConnection connection) { return this.node.getNodeExtension().createInboundHandlers(qualifier, connection, this); }
  
  public OutboundHandler[] createOutboundHandlers(EndpointQualifier qualifier, TcpIpConnection connection) { return this.node.getNodeExtension().createOutboundHandlers(qualifier, connection, this); }
  
  public Collection<Integer> getOutboundPorts(EndpointQualifier endpointQualifier) {
    AdvancedNetworkConfig advancedNetworkConfig = this.node.getConfig().getAdvancedNetworkConfig();
    if (advancedNetworkConfig.isEnabled()) {
      EndpointConfig endpointConfig = (EndpointConfig)advancedNetworkConfig.getEndpointConfigs().get(endpointQualifier);
      Collection<Integer> outboundPorts = (endpointConfig != null) ? endpointConfig.getOutboundPorts() : Collections.emptyList();
      Collection<String> outboundPortDefinitions = (endpointConfig != null) ? endpointConfig.getOutboundPortDefinitions() : Collections.emptyList();
      return AddressUtil.getOutboundPorts(outboundPorts, outboundPortDefinitions);
    } 
    NetworkConfig networkConfig = this.node.getConfig().getNetworkConfig();
    Collection<Integer> outboundPorts = networkConfig.getOutboundPorts();
    Collection<String> outboundPortDefinitions = networkConfig.getOutboundPortDefinitions();
    return AddressUtil.getOutboundPorts(outboundPorts, outboundPortDefinitions);
  }
  
  public RestApiConfig getRestApiConfig() { return this.restApiConfig; }
  
  public MemcacheProtocolConfig getMemcacheProtocolConfig() { return this.memcacheProtocolConfig; }
}
