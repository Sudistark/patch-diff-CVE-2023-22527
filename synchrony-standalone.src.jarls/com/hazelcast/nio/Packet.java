package com.hazelcast.nio;

import com.hazelcast.internal.networking.OutboundFrame;
import com.hazelcast.internal.serialization.impl.HeapData;
import com.hazelcast.spi.annotation.PrivateApi;

@PrivateApi
public final class Packet extends HeapData implements OutboundFrame {
  public static final byte VERSION = 4;
  
  public static final int FLAG_URGENT = 16;
  
  private static final int FLAG_TYPE0 = 1;
  
  private static final int FLAG_TYPE1 = 4;
  
  private static final int FLAG_TYPE2 = 32;
  
  public static final int FLAG_OP_RESPONSE = 2;
  
  public static final int FLAG_OP_CONTROL = 64;
  
  public static final int FLAG_JET_FLOW_CONTROL = 2;
  
  private char flags;
  
  private int partitionId;
  
  private Connection conn;
  
  public Packet() {}
  
  public Packet(byte[] payload) { this(payload, -1); }
  
  public Packet(byte[] payload, int partitionId) {
    super(payload);
    this.partitionId = partitionId;
  }
  
  public Connection getConn() { return this.conn; }
  
  public Packet setConn(Connection conn) {
    this.conn = conn;
    return this;
  }
  
  public Type getPacketType() { return Type.fromFlags(this.flags); }
  
  public Packet setPacketType(Type type) {
    int nonTypeFlags = this.flags & 0xFFFFFFDA;
    resetFlagsTo(type.headerEncoding | nonTypeFlags);
    return this;
  }
  
  public Packet raiseFlags(int flagsToRaise) {
    this.flags = (char)(this.flags | flagsToRaise);
    return this;
  }
  
  public Packet resetFlagsTo(int flagsToSet) {
    this.flags = (char)flagsToSet;
    return this;
  }
  
  public boolean isFlagRaised(int flagsToCheck) { return isFlagRaised(this.flags, flagsToCheck); }
  
  private static boolean isFlagRaised(char flags, int flagsToCheck) { return ((flags & flagsToCheck) != '\000'); }
  
  public char getFlags() { return this.flags; }
  
  public int getPartitionId() { return this.partitionId; }
  
  public boolean isUrgent() { return isFlagRaised(16); }
  
  public int getFrameLength() { return ((this.payload != null) ? totalSize() : 0) + 11; }
  
  public boolean equals(Object o) {
    if (this == o)
      return true; 
    if (!(o instanceof Packet))
      return false; 
    Packet packet = (Packet)o;
    if (!super.equals(packet))
      return false; 
    if (this.flags != packet.flags)
      return false; 
    return (this.partitionId == packet.partitionId);
  }
  
  public int hashCode() {
    result = super.hashCode();
    result = 31 * result + this.flags;
    return 31 * result + this.partitionId;
  }
  
  public String toString() {
    Type type = getPacketType();
    return "Packet{partitionId=" + this.partitionId + ", frameLength=" + 
      
      getFrameLength() + ", conn=" + this.conn + ", rawFlags=" + 
      
      Integer.toBinaryString(this.flags) + ", isUrgent=" + 
      isUrgent() + ", packetType=" + type
      .name() + ", typeSpecificFlags=" + type
      .describeFlags(this.flags) + '}';
  }
}
