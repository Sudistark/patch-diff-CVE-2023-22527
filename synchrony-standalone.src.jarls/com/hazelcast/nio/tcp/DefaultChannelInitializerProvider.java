package com.hazelcast.nio.tcp;

import com.hazelcast.config.AdvancedNetworkConfig;
import com.hazelcast.config.Config;
import com.hazelcast.config.EndpointConfig;
import com.hazelcast.config.SSLConfig;
import com.hazelcast.instance.BuildInfoProvider;
import com.hazelcast.instance.EndpointQualifier;
import com.hazelcast.internal.networking.ChannelInitializer;
import com.hazelcast.internal.networking.ChannelInitializerProvider;
import com.hazelcast.nio.IOService;
import com.hazelcast.nio.ascii.TextChannelInitializer;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

public class DefaultChannelInitializerProvider implements ChannelInitializerProvider {
  protected final IOService ioService;
  
  private final ChannelInitializer uniChannelInitializer;
  
  private final Config config;
  
  public DefaultChannelInitializerProvider(IOService ioService, Config config) {
    checkSslConfigAvailability(config);
    this.ioService = ioService;
    this.uniChannelInitializer = new UnifiedChannelInitializer(ioService);
    this.config = config;
  }
  
  public ChannelInitializer provide(EndpointQualifier qualifier) { return this.initializerMap.isEmpty() ? provideUnifiedChannelInitializer() : (ChannelInitializer)this.initializerMap.get(qualifier); }
  
  public void init() {
    AdvancedNetworkConfig advancedNetworkConfig = this.config.getAdvancedNetworkConfig();
    if (!advancedNetworkConfig.isEnabled() || advancedNetworkConfig
      .getEndpointConfigs().isEmpty()) {
      this.initializerMap = Collections.emptyMap();
      return;
    } 
    Map<EndpointQualifier, ChannelInitializer> map = new HashMap<EndpointQualifier, ChannelInitializer>();
    for (EndpointConfig endpointConfig : advancedNetworkConfig.getEndpointConfigs().values()) {
      checkSslConfigAvailability(endpointConfig.getSSLConfig());
      switch (null.$SwitchMap$com$hazelcast$instance$ProtocolType[endpointConfig.getProtocolType().ordinal()]) {
        case 1:
          map.put(EndpointQualifier.MEMBER, provideMemberChannelInitializer(endpointConfig));
          continue;
        case 2:
          map.put(EndpointQualifier.CLIENT, provideClientChannelInitializer(endpointConfig));
          continue;
        case 3:
          map.put(EndpointQualifier.REST, provideTextChannelInitializer(endpointConfig, true));
          continue;
        case 4:
          map.put(EndpointQualifier.MEMCACHE, provideTextChannelInitializer(endpointConfig, false));
          continue;
        case 5:
          map.put(endpointConfig.getQualifier(), provideMemberChannelInitializer(endpointConfig));
          continue;
      } 
      throw new IllegalStateException("Cannot build channel initializer for protocol type " + endpointConfig
          .getProtocolType());
    } 
    this.initializerMap = map;
  }
  
  protected ChannelInitializer provideUnifiedChannelInitializer() { return this.uniChannelInitializer; }
  
  protected ChannelInitializer provideMemberChannelInitializer(EndpointConfig endpointConfig) { return new MemberChannelInitializer(this.ioService, endpointConfig); }
  
  protected ChannelInitializer provideClientChannelInitializer(EndpointConfig endpointConfig) { return new ClientChannelInitializer(this.ioService, endpointConfig); }
  
  protected ChannelInitializer provideTextChannelInitializer(EndpointConfig endpointConfig, boolean rest) { return new TextChannelInitializer(this.ioService, endpointConfig, rest); }
  
  protected ChannelInitializer provideWanChannelInitializer(EndpointConfig endpointConfig) { throw new UnsupportedOperationException("TODO"); }
  
  private void checkSslConfigAvailability(Config config) {
    if (config.getAdvancedNetworkConfig().isEnabled())
      return; 
    SSLConfig sslConfig = config.getNetworkConfig().getSSLConfig();
    checkSslConfigAvailability(sslConfig);
  }
  
  private void checkSslConfigAvailability(SSLConfig sslConfig) {
    if (sslConfig != null && sslConfig.isEnabled() && 
      !BuildInfoProvider.getBuildInfo().isEnterprise())
      throw new IllegalStateException("SSL/TLS requires Hazelcast Enterprise Edition"); 
  }
}
