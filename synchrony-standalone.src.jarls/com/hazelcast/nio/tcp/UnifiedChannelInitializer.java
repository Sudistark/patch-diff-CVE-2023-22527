package com.hazelcast.nio.tcp;

import com.hazelcast.internal.networking.Channel;
import com.hazelcast.internal.networking.ChannelInitializer;
import com.hazelcast.internal.networking.ChannelOption;
import com.hazelcast.internal.networking.ChannelOptions;
import com.hazelcast.internal.networking.InboundHandler;
import com.hazelcast.internal.networking.OutboundHandler;
import com.hazelcast.nio.IOService;
import com.hazelcast.spi.properties.GroupProperty;
import com.hazelcast.spi.properties.HazelcastProperties;

public class UnifiedChannelInitializer implements ChannelInitializer {
  private final IOService ioService;
  
  private final HazelcastProperties props;
  
  public UnifiedChannelInitializer(IOService ioService) {
    this.props = ioService.properties();
    this.ioService = ioService;
  }
  
  public void initChannel(Channel channel) {
    ChannelOptions config = channel.options();
    config.setOption(ChannelOption.DIRECT_BUF, Boolean.valueOf(this.props.getBoolean(GroupProperty.SOCKET_BUFFER_DIRECT)))
      .setOption(ChannelOption.TCP_NODELAY, Boolean.valueOf(this.props.getBoolean(GroupProperty.SOCKET_NO_DELAY)))
      .setOption(ChannelOption.SO_KEEPALIVE, Boolean.valueOf(this.props.getBoolean(GroupProperty.SOCKET_KEEP_ALIVE)))
      .setOption(ChannelOption.SO_SNDBUF, Integer.valueOf(this.props.getInteger(GroupProperty.SOCKET_SEND_BUFFER_SIZE) * 1024))
      .setOption(ChannelOption.SO_RCVBUF, Integer.valueOf(this.props.getInteger(GroupProperty.SOCKET_RECEIVE_BUFFER_SIZE) * 1024))
      .setOption(ChannelOption.SO_LINGER, Integer.valueOf(this.props.getSeconds(GroupProperty.SOCKET_LINGER_SECONDS)));
    UnifiedProtocolEncoder encoder = new UnifiedProtocolEncoder(this.ioService);
    UnifiedProtocolDecoder decoder = new UnifiedProtocolDecoder(this.ioService, encoder);
    channel.outboundPipeline().addLast(new OutboundHandler[] { encoder });
    channel.inboundPipeline().addLast(new InboundHandler[] { decoder });
  }
}
