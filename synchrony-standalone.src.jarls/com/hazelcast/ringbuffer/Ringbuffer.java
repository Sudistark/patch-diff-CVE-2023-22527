package com.hazelcast.ringbuffer;

import com.hazelcast.core.DistributedObject;
import com.hazelcast.core.ICompletableFuture;
import com.hazelcast.core.IFunction;
import java.util.Collection;

public interface Ringbuffer<E> extends DistributedObject {
  long capacity();
  
  long size();
  
  long tailSequence();
  
  long headSequence();
  
  long remainingCapacity();
  
  long add(E paramE);
  
  ICompletableFuture<Long> addAsync(E paramE, OverflowPolicy paramOverflowPolicy);
  
  E readOne(long paramLong) throws InterruptedException;
  
  ICompletableFuture<Long> addAllAsync(Collection<? extends E> paramCollection, OverflowPolicy paramOverflowPolicy);
  
  ICompletableFuture<ReadResultSet<E>> readManyAsync(long paramLong, int paramInt1, int paramInt2, IFunction<E, Boolean> paramIFunction);
}
