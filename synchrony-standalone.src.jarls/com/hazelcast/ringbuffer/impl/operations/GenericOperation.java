package com.hazelcast.ringbuffer.impl.operations;

import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.ringbuffer.impl.RingbufferContainer;
import com.hazelcast.spi.ReadonlyOperation;
import java.io.IOException;

public class GenericOperation extends AbstractRingBufferOperation implements ReadonlyOperation {
  public static final byte OPERATION_SIZE = 0;
  
  public static final byte OPERATION_TAIL = 1;
  
  public static final byte OPERATION_HEAD = 2;
  
  public static final byte OPERATION_REMAINING_CAPACITY = 3;
  
  public static final byte OPERATION_CAPACITY = 4;
  
  byte operation;
  
  private long result;
  
  public GenericOperation() {}
  
  public GenericOperation(String name, byte operation) {
    super(name);
    this.operation = operation;
  }
  
  public void run() {
    RingbufferContainer ringbuffer = getRingBufferContainer();
    switch (this.operation) {
      case 0:
        this.result = ringbuffer.size();
        return;
      case 2:
        this.result = ringbuffer.headSequence();
        return;
      case 1:
        this.result = ringbuffer.tailSequence();
        return;
      case 3:
        this.result = ringbuffer.remainingCapacity();
        return;
      case 4:
        this.result = ringbuffer.getCapacity();
        return;
    } 
    throw new IllegalStateException("Unrecognized operation:" + this.operation);
  }
  
  public Long getResponse() { return Long.valueOf(this.result); }
  
  public int getId() { return 1; }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeByte(this.operation);
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    this.operation = in.readByte();
  }
}
