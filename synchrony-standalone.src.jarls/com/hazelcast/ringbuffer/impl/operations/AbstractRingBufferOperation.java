package com.hazelcast.ringbuffer.impl.operations;

import com.hazelcast.logging.ILogger;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import com.hazelcast.ringbuffer.impl.RingbufferContainer;
import com.hazelcast.ringbuffer.impl.RingbufferDataSerializerHook;
import com.hazelcast.ringbuffer.impl.RingbufferService;
import com.hazelcast.spi.NamedOperation;
import com.hazelcast.spi.ObjectNamespace;
import com.hazelcast.spi.Operation;
import com.hazelcast.spi.PartitionAwareOperation;
import com.hazelcast.spi.ServiceNamespace;
import com.hazelcast.spi.ServiceNamespaceAware;
import java.io.IOException;

public abstract class AbstractRingBufferOperation extends Operation implements NamedOperation, IdentifiedDataSerializable, PartitionAwareOperation, ServiceNamespaceAware {
  protected String name;
  
  public AbstractRingBufferOperation() {}
  
  public AbstractRingBufferOperation(String name) { this.name = name; }
  
  public String getServiceName() { return "hz:impl:ringbufferService"; }
  
  public String getName() { return this.name; }
  
  RingbufferContainer getRingBufferContainer() {
    RingbufferService service = (RingbufferService)getService();
    ObjectNamespace ns = RingbufferService.getRingbufferNamespace(this.name);
    RingbufferContainer ringbuffer = service.getContainerOrNull(getPartitionId(), ns);
    if (ringbuffer == null)
      ringbuffer = service.getOrCreateContainer(getPartitionId(), ns, service.getRingbufferConfig(this.name)); 
    ringbuffer.cleanup();
    return ringbuffer;
  }
  
  public void logError(Throwable e) {
    if (e instanceof com.hazelcast.ringbuffer.StaleSequenceException) {
      ILogger logger = getLogger();
      if (logger.isFinestEnabled()) {
        logger.finest(e.getMessage(), e);
      } else if (logger.isFineEnabled()) {
        logger.fine(e.getClass().getSimpleName() + ": " + e.getMessage());
      } 
    } else {
      super.logError(e);
    } 
  }
  
  public int getFactoryId() { return RingbufferDataSerializerHook.F_ID; }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeUTF(this.name);
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    this.name = in.readUTF();
  }
  
  protected void toString(StringBuilder sb) {
    super.toString(sb);
    sb.append(", name=").append(this.name);
  }
  
  public ObjectNamespace getServiceNamespace() { return getRingBufferContainer().getNamespace(); }
}
