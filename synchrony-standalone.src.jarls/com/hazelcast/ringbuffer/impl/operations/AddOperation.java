package com.hazelcast.ringbuffer.impl.operations;

import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.ringbuffer.OverflowPolicy;
import com.hazelcast.ringbuffer.impl.RingbufferContainer;
import com.hazelcast.spi.BackupAwareOperation;
import com.hazelcast.spi.Notifier;
import com.hazelcast.spi.Operation;
import com.hazelcast.spi.WaitNotifyKey;
import com.hazelcast.spi.impl.MutatingOperation;
import java.io.IOException;

public class AddOperation extends AbstractRingBufferOperation implements Notifier, BackupAwareOperation, MutatingOperation {
  private Data item;
  
  private long resultSequence;
  
  private OverflowPolicy overflowPolicy;
  
  public AddOperation() {}
  
  public AddOperation(String name, Data item, OverflowPolicy overflowPolicy) {
    super(name);
    this.item = item;
    this.overflowPolicy = overflowPolicy;
  }
  
  public void run() {
    RingbufferContainer ringbuffer = getRingBufferContainer();
    if (this.overflowPolicy == OverflowPolicy.FAIL && 
      ringbuffer.remainingCapacity() < 1L) {
      this.resultSequence = -1L;
      return;
    } 
    this.resultSequence = ringbuffer.add(this.item);
  }
  
  public WaitNotifyKey getNotifiedKey() {
    RingbufferContainer ringbuffer = getRingBufferContainer();
    return ringbuffer.getRingEmptyWaitNotifyKey();
  }
  
  public boolean shouldNotify() { return (this.resultSequence != -1L); }
  
  public boolean shouldBackup() { return (this.resultSequence != -1L); }
  
  public int getSyncBackupCount() {
    RingbufferContainer ringbuffer = getRingBufferContainer();
    return ringbuffer.getConfig().getBackupCount();
  }
  
  public int getAsyncBackupCount() {
    RingbufferContainer ringbuffer = getRingBufferContainer();
    return ringbuffer.getConfig().getAsyncBackupCount();
  }
  
  public Operation getBackupOperation() { return new AddBackupOperation(this.name, this.resultSequence, this.item); }
  
  public Long getResponse() { return Long.valueOf(this.resultSequence); }
  
  public int getId() { return 3; }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeData(this.item);
    out.writeInt(this.overflowPolicy.getId());
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    this.item = in.readData();
    this.overflowPolicy = OverflowPolicy.getById(in.readInt());
  }
}
