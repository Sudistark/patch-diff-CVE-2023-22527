package com.hazelcast.replicatedmap.impl.operation;

import com.hazelcast.nio.Address;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.replicatedmap.impl.ReplicatedMapEventPublishingService;
import com.hazelcast.replicatedmap.impl.ReplicatedMapService;
import com.hazelcast.replicatedmap.impl.record.ReplicatedRecordStore;
import com.hazelcast.spi.PartitionAwareOperation;
import com.hazelcast.spi.impl.MutatingOperation;
import java.io.IOException;

public class RemoveOperation extends AbstractReplicatedMapOperation implements PartitionAwareOperation, MutatingOperation {
  private ReplicatedMapService service;
  
  private Data oldValue;
  
  public RemoveOperation() {}
  
  public RemoveOperation(String name, Data key) {
    this.name = name;
    this.key = key;
  }
  
  public void run() {
    this.service = (ReplicatedMapService)getService();
    ReplicatedRecordStore store = this.service.getReplicatedRecordStore(this.name, true, getPartitionId());
    Object removed = store.remove(this.key);
    this.oldValue = getNodeEngine().toData(removed);
    this.response = new VersionResponsePair(removed, store.getVersion());
    Address thisAddress = getNodeEngine().getThisAddress();
    if (!getCallerAddress().equals(thisAddress))
      sendUpdateCallerOperation(true); 
  }
  
  public void afterRun() {
    sendReplicationOperation(true);
    ReplicatedMapEventPublishingService eventPublishingService = this.service.getEventPublishingService();
    eventPublishingService.fireEntryListenerEvent(this.key, this.oldValue, null, this.name, getCallerAddress());
  }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    out.writeUTF(this.name);
    out.writeData(this.key);
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    this.name = in.readUTF();
    this.key = in.readData();
  }
  
  public int getId() { return 7; }
}
