package com.hazelcast.replicatedmap.impl.operation;

import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.replicatedmap.impl.ReplicatedMapService;
import com.hazelcast.replicatedmap.impl.client.ReplicatedMapEntries;
import com.hazelcast.replicatedmap.impl.record.ReplicatedRecord;
import com.hazelcast.replicatedmap.impl.record.ReplicatedRecordStore;
import com.hazelcast.spi.ReadonlyOperation;
import com.hazelcast.spi.serialization.SerializationService;
import java.io.IOException;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;

public class EntrySetOperation extends AbstractNamedSerializableOperation implements ReadonlyOperation {
  private String name;
  
  private Object response;
  
  public EntrySetOperation() {}
  
  public EntrySetOperation(String name) { this.name = name; }
  
  public void run() {
    ReplicatedMapService service = (ReplicatedMapService)getService();
    Collection<ReplicatedRecordStore> stores = service.getAllReplicatedRecordStores(this.name);
    List<Map.Entry<Object, ReplicatedRecord>> entries = new ArrayList<Map.Entry<Object, ReplicatedRecord>>();
    for (ReplicatedRecordStore store : stores)
      entries.addAll(store.entrySet(false)); 
    ArrayList<Map.Entry<Data, Data>> dataEntries = new ArrayList<Map.Entry<Data, Data>>(entries.size());
    SerializationService serializationService = getNodeEngine().getSerializationService();
    for (Map.Entry<Object, ReplicatedRecord> entry : entries) {
      Data key = serializationService.toData(entry.getKey());
      Data value = serializationService.toData(((ReplicatedRecord)entry.getValue()).getValue());
      dataEntries.add(new AbstractMap.SimpleImmutableEntry(key, value));
    } 
    this.response = new ReplicatedMapEntries(dataEntries);
  }
  
  public Object getResponse() { return this.response; }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException { out.writeUTF(this.name); }
  
  protected void readInternal(ObjectDataInput in) throws IOException { this.name = in.readUTF(); }
  
  public int getId() { return 15; }
  
  public String getName() { return this.name; }
}
