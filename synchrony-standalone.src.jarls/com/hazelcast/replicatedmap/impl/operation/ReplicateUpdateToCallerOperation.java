package com.hazelcast.replicatedmap.impl.operation;

import com.hazelcast.logging.ILogger;
import com.hazelcast.nio.Address;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.replicatedmap.impl.ReplicatedMapEventPublishingService;
import com.hazelcast.replicatedmap.impl.ReplicatedMapService;
import com.hazelcast.replicatedmap.impl.record.ReplicatedRecordStore;
import com.hazelcast.spi.PartitionAwareOperation;
import com.hazelcast.spi.impl.operationservice.impl.OperationServiceImpl;
import java.io.IOException;
import java.util.concurrent.TimeUnit;

public class ReplicateUpdateToCallerOperation extends AbstractSerializableOperation implements PartitionAwareOperation {
  private String name;
  
  private long callId;
  
  private Data dataKey;
  
  private Data dataValue;
  
  private VersionResponsePair response;
  
  private long ttl;
  
  private boolean isRemove;
  
  public ReplicateUpdateToCallerOperation() {}
  
  public ReplicateUpdateToCallerOperation(String name, long callId, Data dataKey, Data dataValue, VersionResponsePair response, long ttl, boolean isRemove) {
    this.name = name;
    this.callId = callId;
    this.dataKey = dataKey;
    this.dataValue = dataValue;
    this.response = response;
    this.ttl = ttl;
    this.isRemove = isRemove;
  }
  
  public void run() {
    ILogger logger = getLogger();
    ReplicatedMapService service = (ReplicatedMapService)getService();
    ReplicatedRecordStore store = service.getReplicatedRecordStore(this.name, true, getPartitionId());
    long currentVersion = store.getVersion();
    long updateVersion = this.response.getVersion();
    if (currentVersion >= updateVersion) {
      if (logger.isFineEnabled())
        logger.fine("Rejecting stale update received for replicated map '" + this.name + "' (partitionId " + getPartitionId() + ") (current version " + currentVersion + ") (update version " + updateVersion + ")"); 
      return;
    } 
    Object key = store.marshall(this.dataKey);
    Object value = store.marshall(this.dataValue);
    if (this.isRemove) {
      store.removeWithVersion(key, updateVersion);
    } else {
      store.putWithVersion(key, value, this.ttl, TimeUnit.MILLISECONDS, true, updateVersion);
    } 
    publishEvent();
  }
  
  public void afterRun() { notifyCaller(); }
  
  private void publishEvent() {
    ReplicatedMapService service = (ReplicatedMapService)getService();
    ReplicatedMapEventPublishingService eventPublishingService = service.getEventPublishingService();
    Address thisAddress = getNodeEngine().getThisAddress();
    Data dataOldValue = getNodeEngine().toData(this.response.getResponse());
    if (this.isRemove) {
      eventPublishingService.fireEntryListenerEvent(this.dataKey, dataOldValue, null, this.name, thisAddress);
    } else {
      eventPublishingService.fireEntryListenerEvent(this.dataKey, dataOldValue, this.dataValue, this.name, thisAddress);
    } 
  }
  
  private void notifyCaller() {
    OperationServiceImpl operationService = (OperationServiceImpl)getNodeEngine().getOperationService();
    operationService.getBackupHandler().notifyBackupComplete(this.callId);
  }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    out.writeUTF(this.name);
    out.writeLong(this.callId);
    out.writeData(this.dataKey);
    out.writeData(this.dataValue);
    this.response.writeData(out);
    out.writeLong(this.ttl);
    out.writeBoolean(this.isRemove);
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    this.name = in.readUTF();
    this.callId = in.readLong();
    this.dataKey = in.readData();
    this.dataValue = in.readData();
    this.response = new VersionResponsePair();
    this.response.readData(in);
    this.ttl = in.readLong();
    this.isRemove = in.readBoolean();
  }
  
  public int getId() { return 4; }
}
