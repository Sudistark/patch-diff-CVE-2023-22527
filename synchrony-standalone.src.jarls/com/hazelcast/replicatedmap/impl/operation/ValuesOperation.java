package com.hazelcast.replicatedmap.impl.operation;

import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.replicatedmap.impl.ReplicatedMapService;
import com.hazelcast.replicatedmap.impl.client.ReplicatedMapValueCollection;
import com.hazelcast.replicatedmap.impl.record.ReplicatedRecord;
import com.hazelcast.replicatedmap.impl.record.ReplicatedRecordStore;
import com.hazelcast.spi.ReadonlyOperation;
import com.hazelcast.spi.serialization.SerializationService;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;

public class ValuesOperation extends AbstractNamedSerializableOperation implements ReadonlyOperation {
  private String name;
  
  private Object response;
  
  public ValuesOperation() {}
  
  public ValuesOperation(String name) { this.name = name; }
  
  public void run() {
    ReplicatedMapService service = (ReplicatedMapService)getService();
    Collection<ReplicatedRecordStore> stores = service.getAllReplicatedRecordStores(this.name);
    Collection<ReplicatedRecord> values = new ArrayList<ReplicatedRecord>();
    for (ReplicatedRecordStore store : stores)
      values.addAll(store.values(false)); 
    Collection<Data> dataValues = new ArrayList<Data>(values.size());
    SerializationService serializationService = getNodeEngine().getSerializationService();
    for (ReplicatedRecord value : values)
      dataValues.add(serializationService.toData(value.getValue())); 
    this.response = new ReplicatedMapValueCollection(dataValues);
  }
  
  public Object getResponse() { return this.response; }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException { out.writeUTF(this.name); }
  
  protected void readInternal(ObjectDataInput in) throws IOException { this.name = in.readUTF(); }
  
  public int getId() { return 22; }
  
  public String getName() { return this.name; }
}
