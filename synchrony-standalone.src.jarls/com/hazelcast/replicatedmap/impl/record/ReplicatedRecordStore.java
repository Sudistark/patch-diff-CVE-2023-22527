package com.hazelcast.replicatedmap.impl.record;

import com.hazelcast.replicatedmap.merge.ReplicatedMapMergePolicy;
import com.hazelcast.spi.merge.SplitBrainMergePolicy;
import com.hazelcast.spi.merge.SplitBrainMergeTypes;
import com.hazelcast.util.scheduler.ScheduledEntry;
import java.util.Collection;
import java.util.Comparator;
import java.util.Iterator;
import java.util.Set;
import java.util.concurrent.TimeUnit;

public interface ReplicatedRecordStore {
  String getName();
  
  int getPartitionId();
  
  Object remove(Object paramObject);
  
  Object removeWithVersion(Object paramObject, long paramLong);
  
  void evict(Object paramObject);
  
  Object get(Object paramObject);
  
  Object put(Object paramObject1, Object paramObject2);
  
  Object put(Object paramObject1, Object paramObject2, long paramLong, TimeUnit paramTimeUnit, boolean paramBoolean);
  
  Object putWithVersion(Object paramObject1, Object paramObject2, long paramLong1, TimeUnit paramTimeUnit, boolean paramBoolean, long paramLong2);
  
  boolean containsKey(Object paramObject);
  
  boolean containsValue(Object paramObject);
  
  ReplicatedRecord getReplicatedRecord(Object paramObject);
  
  Set keySet(boolean paramBoolean);
  
  Collection values(boolean paramBoolean);
  
  Collection values(Comparator paramComparator);
  
  Set entrySet(boolean paramBoolean);
  
  int size();
  
  void clear();
  
  void clearWithVersion(long paramLong);
  
  void reset();
  
  boolean isEmpty();
  
  Object unmarshall(Object paramObject);
  
  Object marshall(Object paramObject);
  
  void destroy();
  
  long getVersion();
  
  boolean isStale(long paramLong);
  
  Iterator<ReplicatedRecord> recordIterator();
  
  void putRecords(Collection<RecordMigrationInfo> paramCollection, long paramLong);
  
  InternalReplicatedMapStorage getStorage();
  
  ScheduledEntry<Object, Object> cancelTtlEntry(Object paramObject);
  
  boolean scheduleTtlEntry(long paramLong, Object paramObject1, Object paramObject2);
  
  boolean isLoaded();
  
  void setLoaded(boolean paramBoolean);
  
  boolean merge(SplitBrainMergeTypes.ReplicatedMapMergeTypes paramReplicatedMapMergeTypes, SplitBrainMergePolicy<Object, SplitBrainMergeTypes.ReplicatedMapMergeTypes> paramSplitBrainMergePolicy);
  
  boolean merge(Object paramObject, ReplicatedMapEntryView paramReplicatedMapEntryView, ReplicatedMapMergePolicy paramReplicatedMapMergePolicy);
}
