package com.hazelcast.aws.utility;

import com.hazelcast.logging.ILogger;
import com.hazelcast.logging.Logger;
import java.io.InputStream;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

public final class CloudyUtility {
  private static final String NODE_ITEM = "item";
  
  private static final String NODE_VALUE = "value";
  
  private static final String NODE_KEY = "key";
  
  private static final ILogger LOGGER = Logger.getLogger(CloudyUtility.class);
  
  public static Map<String, String> unmarshalTheResponse(InputStream stream) {
    try {
      DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
      dbf.setNamespaceAware(true);
      dbf.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
      DocumentBuilder builder = dbf.newDocumentBuilder();
      Document doc = builder.parse(stream);
      Element element = doc.getDocumentElement();
      NodeHolder elementNodeHolder = new NodeHolder(element);
      Map<String, String> addresses = new LinkedHashMap<String, String>();
      List<NodeHolder> reservationSet = elementNodeHolder.getSubNodes("reservationset");
      for (NodeHolder reservation : reservationSet) {
        List<NodeHolder> items = reservation.getSubNodes("item");
        for (NodeHolder item : items) {
          NodeHolder instancesSet = item.getFirstSubNode("instancesset");
          addresses.putAll(instancesSet.getAddresses());
        } 
      } 
      return addresses;
    } catch (Exception e) {
      LOGGER.warning(e);
      return new LinkedHashMap();
    } 
  }
}
