package com.hazelcast.osgi.impl;

import com.hazelcast.cardinality.CardinalityEstimator;
import com.hazelcast.config.Config;
import com.hazelcast.config.GroupConfig;
import com.hazelcast.core.ClientService;
import com.hazelcast.core.Cluster;
import com.hazelcast.core.DistributedObject;
import com.hazelcast.core.DistributedObjectListener;
import com.hazelcast.core.Endpoint;
import com.hazelcast.core.HazelcastInstance;
import com.hazelcast.core.IAtomicLong;
import com.hazelcast.core.IAtomicReference;
import com.hazelcast.core.ICacheManager;
import com.hazelcast.core.ICountDownLatch;
import com.hazelcast.core.IExecutorService;
import com.hazelcast.core.IList;
import com.hazelcast.core.ILock;
import com.hazelcast.core.IMap;
import com.hazelcast.core.IQueue;
import com.hazelcast.core.ISemaphore;
import com.hazelcast.core.ISet;
import com.hazelcast.core.ITopic;
import com.hazelcast.core.IdGenerator;
import com.hazelcast.core.LifecycleService;
import com.hazelcast.core.MultiMap;
import com.hazelcast.core.PartitionService;
import com.hazelcast.core.ReplicatedMap;
import com.hazelcast.cp.CPSubsystem;
import com.hazelcast.crdt.pncounter.PNCounter;
import com.hazelcast.durableexecutor.DurableExecutorService;
import com.hazelcast.flakeidgen.FlakeIdGenerator;
import com.hazelcast.logging.LoggingService;
import com.hazelcast.mapreduce.JobTracker;
import com.hazelcast.osgi.HazelcastOSGiInstance;
import com.hazelcast.osgi.HazelcastOSGiService;
import com.hazelcast.quorum.QuorumService;
import com.hazelcast.ringbuffer.Ringbuffer;
import com.hazelcast.scheduledexecutor.IScheduledExecutorService;
import com.hazelcast.transaction.HazelcastXAResource;
import com.hazelcast.transaction.TransactionContext;
import com.hazelcast.transaction.TransactionException;
import com.hazelcast.transaction.TransactionOptions;
import com.hazelcast.transaction.TransactionalTask;
import com.hazelcast.util.StringUtil;
import java.util.Collection;
import java.util.concurrent.ConcurrentMap;

class HazelcastOSGiInstanceImpl implements HazelcastOSGiInstance {
  private final HazelcastInstance delegatedInstance;
  
  private final HazelcastOSGiService ownerService;
  
  public HazelcastOSGiInstanceImpl(HazelcastInstance delegatedInstance, HazelcastOSGiService ownerService) {
    this.delegatedInstance = delegatedInstance;
    this.ownerService = ownerService;
  }
  
  public String getName() { return this.delegatedInstance.getName(); }
  
  public <E> IQueue<E> getQueue(String name) { return this.delegatedInstance.getQueue(name); }
  
  public <E> ITopic<E> getTopic(String name) { return this.delegatedInstance.getTopic(name); }
  
  public <E> ISet<E> getSet(String name) { return this.delegatedInstance.getSet(name); }
  
  public <E> IList<E> getList(String name) { return this.delegatedInstance.getList(name); }
  
  public <K, V> IMap<K, V> getMap(String name) { return this.delegatedInstance.getMap(name); }
  
  public <K, V> ReplicatedMap<K, V> getReplicatedMap(String name) { return this.delegatedInstance.getReplicatedMap(name); }
  
  public JobTracker getJobTracker(String name) { return this.delegatedInstance.getJobTracker(name); }
  
  public <K, V> MultiMap<K, V> getMultiMap(String name) { return this.delegatedInstance.getMultiMap(name); }
  
  public ILock getLock(String key) { return this.delegatedInstance.getLock(key); }
  
  public <E> Ringbuffer<E> getRingbuffer(String name) { return this.delegatedInstance.getRingbuffer(name); }
  
  public <E> ITopic<E> getReliableTopic(String name) { return this.delegatedInstance.getReliableTopic(name); }
  
  public ICacheManager getCacheManager() { return this.delegatedInstance.getCacheManager(); }
  
  public Cluster getCluster() { return this.delegatedInstance.getCluster(); }
  
  public Endpoint getLocalEndpoint() { return this.delegatedInstance.getLocalEndpoint(); }
  
  public IExecutorService getExecutorService(String name) { return this.delegatedInstance.getExecutorService(name); }
  
  public DurableExecutorService getDurableExecutorService(String name) { return this.delegatedInstance.getDurableExecutorService(name); }
  
  public <T> T executeTransaction(TransactionalTask<T> task) throws TransactionException { return (T)this.delegatedInstance.executeTransaction(task); }
  
  public <T> T executeTransaction(TransactionOptions options, TransactionalTask<T> task) throws TransactionException { return (T)this.delegatedInstance.executeTransaction(options, task); }
  
  public TransactionContext newTransactionContext() { return this.delegatedInstance.newTransactionContext(); }
  
  public TransactionContext newTransactionContext(TransactionOptions options) { return this.delegatedInstance.newTransactionContext(options); }
  
  public IdGenerator getIdGenerator(String name) { return this.delegatedInstance.getIdGenerator(name); }
  
  public FlakeIdGenerator getFlakeIdGenerator(String name) { return this.delegatedInstance.getFlakeIdGenerator(name); }
  
  public IAtomicLong getAtomicLong(String name) { return this.delegatedInstance.getAtomicLong(name); }
  
  public <E> IAtomicReference<E> getAtomicReference(String name) { return this.delegatedInstance.getAtomicReference(name); }
  
  public ICountDownLatch getCountDownLatch(String name) { return this.delegatedInstance.getCountDownLatch(name); }
  
  public ISemaphore getSemaphore(String name) { return this.delegatedInstance.getSemaphore(name); }
  
  public Collection<DistributedObject> getDistributedObjects() { return this.delegatedInstance.getDistributedObjects(); }
  
  public String addDistributedObjectListener(DistributedObjectListener distributedObjectListener) { return this.delegatedInstance.addDistributedObjectListener(distributedObjectListener); }
  
  public boolean removeDistributedObjectListener(String registrationId) { return this.delegatedInstance.removeDistributedObjectListener(registrationId); }
  
  public Config getConfig() { return this.delegatedInstance.getConfig(); }
  
  public PartitionService getPartitionService() { return this.delegatedInstance.getPartitionService(); }
  
  public QuorumService getQuorumService() { return this.delegatedInstance.getQuorumService(); }
  
  public ClientService getClientService() { return this.delegatedInstance.getClientService(); }
  
  public LoggingService getLoggingService() { return this.delegatedInstance.getLoggingService(); }
  
  public LifecycleService getLifecycleService() { return this.delegatedInstance.getLifecycleService(); }
  
  public <T extends DistributedObject> T getDistributedObject(String serviceName, String name) { return (T)this.delegatedInstance.getDistributedObject(serviceName, name); }
  
  public ConcurrentMap<String, Object> getUserContext() { return this.delegatedInstance.getUserContext(); }
  
  public HazelcastXAResource getXAResource() { return this.delegatedInstance.getXAResource(); }
  
  public CardinalityEstimator getCardinalityEstimator(String name) { return this.delegatedInstance.getCardinalityEstimator(name); }
  
  public PNCounter getPNCounter(String name) { return this.delegatedInstance.getPNCounter(name); }
  
  public IScheduledExecutorService getScheduledExecutorService(String name) { return this.delegatedInstance.getScheduledExecutorService(name); }
  
  public CPSubsystem getCPSubsystem() { return this.delegatedInstance.getCPSubsystem(); }
  
  public void shutdown() { this.delegatedInstance.shutdown(); }
  
  public HazelcastInstance getDelegatedInstance() { return this.delegatedInstance; }
  
  public HazelcastOSGiService getOwnerService() { return this.ownerService; }
  
  public boolean equals(Object o) {
    if (this == o)
      return true; 
    if (o == null || getClass() != o.getClass())
      return false; 
    HazelcastOSGiInstanceImpl that = (HazelcastOSGiInstanceImpl)o;
    if (!this.delegatedInstance.equals(that.delegatedInstance))
      return false; 
    if (!this.ownerService.equals(that.ownerService))
      return false; 
    return true;
  }
  
  public int hashCode() {
    result = this.ownerService.hashCode();
    return 31 * result + this.delegatedInstance.hashCode();
  }
  
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("HazelcastOSGiInstanceImpl");
    sb.append("{delegatedInstance='").append(this.delegatedInstance).append('\'');
    Config config = getConfig();
    GroupConfig groupConfig = config.getGroupConfig();
    if (groupConfig != null && !StringUtil.isNullOrEmpty(groupConfig.getName()))
      sb.append(", groupName=").append(groupConfig.getName()); 
    sb.append(", ownerServiceId=").append(this.ownerService.getId());
    sb.append('}');
    return sb.toString();
  }
}
