package com.hazelcast.osgi.impl;

import com.hazelcast.config.Config;
import com.hazelcast.config.GroupConfig;
import com.hazelcast.config.XmlConfigBuilder;
import com.hazelcast.core.Hazelcast;
import com.hazelcast.core.HazelcastInstance;
import com.hazelcast.logging.ILogger;
import com.hazelcast.logging.Logger;
import com.hazelcast.osgi.HazelcastOSGiInstance;
import com.hazelcast.util.ExceptionUtil;
import com.hazelcast.util.StringUtil;
import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import org.osgi.framework.Bundle;
import org.osgi.framework.BundleContext;
import org.osgi.framework.ServiceRegistration;

class HazelcastOSGiServiceImpl implements HazelcastInternalOSGiService {
  private static final ILogger LOGGER = Logger.getLogger(com.hazelcast.osgi.HazelcastOSGiService.class);
  
  private final Object serviceMutex;
  
  private final Bundle ownerBundle;
  
  private final BundleContext ownerBundleContext;
  
  private final String id;
  
  private final ConcurrentMap<HazelcastOSGiInstance, ServiceRegistration> instanceServiceRegistrationMap;
  
  private final ConcurrentMap<String, HazelcastOSGiInstance> instanceMap;
  
  private ServiceRegistration serviceRegistration;
  
  public HazelcastOSGiServiceImpl(Bundle ownerBundle) { this(ownerBundle, DEFAULT_ID); }
  
  public HazelcastOSGiServiceImpl(Bundle ownerBundle, String id) {
    this.serviceMutex = new Object();
    this.instanceServiceRegistrationMap = new ConcurrentHashMap();
    this.instanceMap = new ConcurrentHashMap();
    this.ownerBundle = ownerBundle;
    this.ownerBundleContext = ownerBundle.getBundleContext();
    this.id = id;
  }
  
  private void checkActive() {
    if (!isActive())
      throw new IllegalStateException("Hazelcast OSGI Service is not active!"); 
  }
  
  private boolean shouldSetGroupName(GroupConfig groupConfig) {
    if ((groupConfig == null || 
      StringUtil.isNullOrEmpty(groupConfig.getName()) || "dev"
      .equals(groupConfig.getName())) && 
      !Boolean.getBoolean("hazelcast.osgi.grouping.disabled"))
      return true; 
    return false;
  }
  
  private Config getConfig(Config config) {
    if (config == null)
      config = (new XmlConfigBuilder()).build(); 
    GroupConfig groupConfig = config.getGroupConfig();
    if (shouldSetGroupName(groupConfig)) {
      String groupName = this.id;
      if (groupConfig == null) {
        config.setGroupConfig(new GroupConfig(groupName));
      } else {
        groupConfig.setName(groupName);
      } 
    } 
    return config;
  }
  
  private HazelcastInstance createHazelcastInstance(Config config) { return Hazelcast.newHazelcastInstance(getConfig(config)); }
  
  private HazelcastOSGiInstance registerInstance(HazelcastInstance instance) {
    HazelcastOSGiInstanceImpl hazelcastOSGiInstanceImpl;
    if (instance instanceof HazelcastOSGiInstance) {
      hazelcastOSGiInstanceImpl = (HazelcastOSGiInstance)instance;
    } else {
      hazelcastOSGiInstanceImpl = new HazelcastOSGiInstanceImpl(instance, this);
    } 
    if (!Boolean.getBoolean("hazelcast.osgi.register.disabled")) {
      ServiceRegistration serviceRegistration = this.ownerBundleContext.registerService(HazelcastInstance.class.getName(), hazelcastOSGiInstanceImpl, null);
      this.instanceServiceRegistrationMap.put(hazelcastOSGiInstanceImpl, serviceRegistration);
    } 
    this.instanceMap.put(instance.getName(), hazelcastOSGiInstanceImpl);
    return hazelcastOSGiInstanceImpl;
  }
  
  private void deregisterInstance(HazelcastOSGiInstance hazelcastOSGiInstance) {
    this.instanceMap.remove(hazelcastOSGiInstance.getName());
    ServiceRegistration serviceRegistration = (ServiceRegistration)this.instanceServiceRegistrationMap.remove(hazelcastOSGiInstance);
    if (serviceRegistration != null) {
      this.ownerBundleContext.ungetService(serviceRegistration.getReference());
      serviceRegistration.unregister();
    } 
  }
  
  private void shutdownDefaultHazelcastInstanceIfActive() {
    if (this.hazelcastInstance != null) {
      shutdownHazelcastInstanceInternalSafely(this.hazelcastInstance);
      this.hazelcastInstance = null;
    } 
  }
  
  private void shutdownAllInternal() {
    for (HazelcastOSGiInstance instance : this.instanceMap.values())
      shutdownHazelcastInstanceInternalSafely(instance); 
    shutdownDefaultHazelcastInstanceIfActive();
  }
  
  public String getId() { return this.id; }
  
  public Bundle getOwnerBundle() { return this.ownerBundle; }
  
  public boolean isActive() { return (this.ownerBundle.getState() == 32); }
  
  public void activate() {
    synchronized (this.serviceMutex) {
      if (this.ownerBundle.getState() == 8)
        try {
          if (this.hazelcastInstance != null) {
            LOGGER.warning("Default Hazelcast instance should be null while activating service!");
            shutdownDefaultHazelcastInstanceIfActive();
          } 
          if (Boolean.getBoolean("hazelcast.osgi.start")) {
            this
              .hazelcastInstance = new HazelcastOSGiInstanceImpl(createHazelcastInstance(null), this);
            LOGGER.info("Default Hazelcast instance has been created");
          } 
          if (this.hazelcastInstance != null && !Boolean.getBoolean("hazelcast.osgi.register.disabled")) {
            registerInstance(this.hazelcastInstance);
            LOGGER.info("Default Hazelcast instance has been registered as OSGI service");
          } 
          this
            .serviceRegistration = this.ownerBundleContext.registerService(com.hazelcast.osgi.HazelcastOSGiService.class.getName(), this, null);
          LOGGER.info(this + " has been registered as OSGI service and activated now");
        } catch (Throwable t) {
          shutdownDefaultHazelcastInstanceIfActive();
          ExceptionUtil.rethrow(t);
        }  
    } 
  }
  
  public void deactivate() {
    synchronized (this.serviceMutex) {
      if (this.ownerBundle.getState() == 16)
        try {
          shutdownAllInternal();
          try {
            this.ownerBundleContext.ungetService(this.serviceRegistration.getReference());
            this.serviceRegistration.unregister();
          } catch (Throwable t) {
            LOGGER.finest("Error occurred while deregistering " + this, t);
          } 
          LOGGER.info(this + " has been deregistered as OSGI service and deactivated");
        } finally {
          this.serviceRegistration = null;
        }  
    } 
  }
  
  public HazelcastOSGiInstance getDefaultHazelcastInstance() {
    checkActive();
    return this.hazelcastInstance;
  }
  
  public HazelcastOSGiInstance newHazelcastInstance(Config config) {
    synchronized (this.serviceMutex) {
      checkActive();
      return registerInstance(createHazelcastInstance(config));
    } 
  }
  
  public HazelcastOSGiInstance newHazelcastInstance() {
    synchronized (this.serviceMutex) {
      checkActive();
      return registerInstance(createHazelcastInstance(null));
    } 
  }
  
  public HazelcastOSGiInstance getHazelcastInstanceByName(String instanceName) {
    checkActive();
    return (HazelcastOSGiInstance)this.instanceMap.get(instanceName);
  }
  
  public Set<HazelcastOSGiInstance> getAllHazelcastInstances() {
    checkActive();
    return new HashSet(this.instanceMap.values());
  }
  
  public void shutdownHazelcastInstance(HazelcastOSGiInstance instance) {
    synchronized (this.serviceMutex) {
      checkActive();
      shutdownHazelcastInstanceInternal(instance);
    } 
  }
  
  private void shutdownHazelcastInstanceInternal(HazelcastOSGiInstance instance) {
    try {
      deregisterInstance(instance);
    } catch (Throwable t) {
      LOGGER.finest("Error occurred while deregistering " + instance, t);
    } 
    instance.shutdown();
  }
  
  private void shutdownHazelcastInstanceInternalSafely(HazelcastOSGiInstance instance) {
    try {
      shutdownHazelcastInstanceInternal(instance);
    } catch (Throwable t) {
      LOGGER.finest("Error occurred while shutting down " + instance, t);
    } 
  }
  
  public void shutdownAll() {
    synchronized (this.serviceMutex) {
      checkActive();
      shutdownAllInternal();
    } 
  }
  
  public String toString() {
    return "HazelcastOSGiServiceImpl{ownerBundle=" + this.ownerBundle + ", hazelcastInstance=" + this.hazelcastInstance + ", active=" + 

      
      isActive() + ", id=" + this.id + '}';
  }
}
