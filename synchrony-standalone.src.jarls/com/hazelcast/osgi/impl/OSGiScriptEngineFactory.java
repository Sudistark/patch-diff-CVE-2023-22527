package com.hazelcast.osgi.impl;

import java.util.List;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineFactory;

public class OSGiScriptEngineFactory implements ScriptEngineFactory {
  private ScriptEngineFactory factory;
  
  private ClassLoader contextClassLoader;
  
  public OSGiScriptEngineFactory(ScriptEngineFactory factory, ClassLoader contextClassLoader) {
    this.factory = factory;
    this.contextClassLoader = contextClassLoader;
  }
  
  public String getEngineName() { return this.factory.getEngineName(); }
  
  public String getEngineVersion() { return this.factory.getEngineVersion(); }
  
  public List<String> getExtensions() { return this.factory.getExtensions(); }
  
  public String getLanguageName() { return this.factory.getLanguageName(); }
  
  public String getLanguageVersion() { return this.factory.getLanguageVersion(); }
  
  public String getMethodCallSyntax(String obj, String m, String... args) { return this.factory.getMethodCallSyntax(obj, m, args); }
  
  public List<String> getMimeTypes() { return this.factory.getMimeTypes(); }
  
  public List<String> getNames() { return this.factory.getNames(); }
  
  public String getOutputStatement(String toDisplay) { return this.factory.getOutputStatement(toDisplay); }
  
  public Object getParameter(String key) { return this.factory.getParameter(key); }
  
  public String getProgram(String... statements) { return this.factory.getProgram(statements); }
  
  public ScriptEngine getScriptEngine() {
    ScriptEngine engine;
    if (this.contextClassLoader == null) {
      engine = this.factory.getScriptEngine();
    } else {
      Thread currentThread = Thread.currentThread();
      ClassLoader old = currentThread.getContextClassLoader();
      currentThread.setContextClassLoader(this.contextClassLoader);
      engine = this.factory.getScriptEngine();
      currentThread.setContextClassLoader(old);
    } 
    return engine;
  }
}
