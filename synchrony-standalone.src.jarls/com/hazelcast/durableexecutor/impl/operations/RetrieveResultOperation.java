package com.hazelcast.durableexecutor.impl.operations;

import com.hazelcast.core.HazelcastException;
import com.hazelcast.durableexecutor.impl.DurableExecutorContainer;
import com.hazelcast.nio.Bits;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.spi.BlockingOperation;
import com.hazelcast.spi.ReadonlyOperation;
import com.hazelcast.spi.WaitNotifyKey;
import java.io.IOException;

public class RetrieveResultOperation extends AbstractDurableExecutorOperation implements BlockingOperation, ReadonlyOperation {
  private int sequence;
  
  private Object result;
  
  public RetrieveResultOperation() {}
  
  public RetrieveResultOperation(String name, int sequence) {
    super(name);
    this.sequence = sequence;
  }
  
  public void run() {
    DurableExecutorContainer executorContainer = getExecutorContainer();
    this.result = executorContainer.retrieveResult(this.sequence);
  }
  
  public Object getResponse() { return this.result; }
  
  public WaitNotifyKey getWaitKey() {
    long uniqueId = Bits.combineToLong(getPartitionId(), this.sequence);
    return new DurableExecutorWaitNotifyKey(this.name, uniqueId);
  }
  
  public boolean shouldWait() {
    DurableExecutorContainer executorContainer = getExecutorContainer();
    return executorContainer.shouldWait(this.sequence);
  }
  
  public void onWaitExpire() { sendResponse(new HazelcastException()); }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeInt(this.sequence);
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    this.sequence = in.readInt();
  }
  
  public int getId() { return 5; }
}
