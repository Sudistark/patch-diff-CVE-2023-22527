package com.hazelcast.durableexecutor.impl.operations;

import com.hazelcast.durableexecutor.impl.DurableExecutorContainer;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.BackupAwareOperation;
import com.hazelcast.spi.Operation;
import com.hazelcast.spi.impl.MutatingOperation;
import java.io.IOException;
import java.util.concurrent.Callable;

public class TaskOperation extends AbstractDurableExecutorOperation implements BackupAwareOperation, MutatingOperation {
  private Data callableData;
  
  private int sequence;
  
  private Callable callable;
  
  public TaskOperation() {}
  
  public TaskOperation(String name, Data callableData) {
    super(name);
    this.callableData = callableData;
  }
  
  public void run() {
    this.callable = (Callable)getNodeEngine().toObject(this.callableData);
    DurableExecutorContainer executorContainer = getExecutorContainer();
    this.sequence = executorContainer.execute(this.callable);
  }
  
  public Object getResponse() { return Integer.valueOf(this.sequence); }
  
  public Operation getBackupOperation() { return new TaskBackupOperation(this.name, this.sequence, this.callableData); }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeData(this.callableData);
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    this.callableData = in.readData();
  }
  
  public int getId() { return 8; }
}
