package com.hazelcast.security;

import com.hazelcast.nio.serialization.BinaryInterface;
import com.hazelcast.nio.serialization.Portable;
import com.hazelcast.nio.serialization.PortableReader;
import com.hazelcast.nio.serialization.PortableWriter;
import java.io.IOException;

@BinaryInterface
public abstract class AbstractCredentials implements Credentials, Portable {
  private static final long serialVersionUID = 3587995040707072446L;
  
  private String endpoint;
  
  private String principal;
  
  public AbstractCredentials() {}
  
  public AbstractCredentials(String principal) { this.principal = principal; }
  
  public final String getEndpoint() { return this.endpoint; }
  
  public final void setEndpoint(String endpoint) { this.endpoint = endpoint; }
  
  public String getPrincipal() { return this.principal; }
  
  public void setPrincipal(String principal) { this.principal = principal; }
  
  public int hashCode() {
    int prime = 31;
    int result = 1;
    if (this.principal == null) {
      result = 31 * result;
    } else {
      result = 31 * result + this.principal.hashCode();
    } 
    return result;
  }
  
  public boolean equals(Object obj) {
    if (this == obj)
      return true; 
    if (obj == null)
      return false; 
    if (getClass() != obj.getClass())
      return false; 
    AbstractCredentials other = (AbstractCredentials)obj;
    if (this.principal == null) {
      if (other.principal != null)
        return false; 
    } else if (!this.principal.equals(other.principal)) {
      return false;
    } 
    return true;
  }
  
  public final void writePortable(PortableWriter writer) throws IOException {
    writer.writeUTF("principal", this.principal);
    writer.writeUTF("endpoint", this.endpoint);
    writePortableInternal(writer);
  }
  
  public final void readPortable(PortableReader reader) throws IOException {
    this.principal = reader.readUTF("principal");
    this.endpoint = reader.readUTF("endpoint");
    readPortableInternal(reader);
  }
  
  protected abstract void writePortableInternal(PortableWriter paramPortableWriter) throws IOException;
  
  protected abstract void readPortableInternal(PortableReader paramPortableReader) throws IOException;
}
