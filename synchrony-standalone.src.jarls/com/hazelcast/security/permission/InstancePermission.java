package com.hazelcast.security.permission;

import com.hazelcast.config.matcher.WildcardConfigPatternMatcher;
import java.security.Permission;

public abstract class InstancePermission extends ClusterPermission {
  protected static final int NONE = 0;
  
  protected static final int CREATE = 1;
  
  protected static final int DESTROY = 2;
  
  private static final WildcardConfigPatternMatcher CONFIG_PATTERN_MATCHER = new WildcardConfigPatternMatcher();
  
  protected final int mask;
  
  protected final String actions;
  
  public InstancePermission(String name, String... actions) {
    super(name);
    if (name == null || "".equals(name))
      throw new IllegalArgumentException("Permission name is mandatory!"); 
    this.mask = initMask(actions);
    StringBuilder s = new StringBuilder();
    for (String action : actions)
      s.append(action).append(" "); 
    if (s.length() > 0)
      s.setLength(s.length() - 1); 
    this.actions = s.toString();
  }
  
  protected abstract int initMask(String[] paramArrayOfString);
  
  public boolean implies(Permission permission) {
    if (getClass() != permission.getClass())
      return false; 
    InstancePermission that = (InstancePermission)permission;
    boolean maskTest = ((this.mask & that.mask) == that.mask);
    if (!maskTest)
      return false; 
    return CONFIG_PATTERN_MATCHER.matches(getName(), that.getName());
  }
  
  public String getActions() { return this.actions; }
  
  public int hashCode() {
    result = super.hashCode();
    result = 31 * result + this.mask;
    return 31 * result + this.actions.hashCode();
  }
  
  public boolean equals(Object obj) {
    if (this == obj)
      return true; 
    if (obj == null)
      return false; 
    if (getClass() != obj.getClass())
      return false; 
    InstancePermission other = (InstancePermission)obj;
    if (getName() == null && other.getName() != null)
      return false; 
    if (!getName().equals(other.getName()))
      return false; 
    if (this.mask != other.mask)
      return false; 
    return true;
  }
}
