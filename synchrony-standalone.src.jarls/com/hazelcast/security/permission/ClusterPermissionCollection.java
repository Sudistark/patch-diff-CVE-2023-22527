package com.hazelcast.security.permission;

import java.security.Permission;
import java.security.PermissionCollection;
import java.util.Collections;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

public class ClusterPermissionCollection extends PermissionCollection {
  final Set<Permission> perms = new HashSet();
  
  final Class<? extends Permission> permClass;
  
  public ClusterPermissionCollection() { this.permClass = null; }
  
  public ClusterPermissionCollection(Class<? extends Permission> permClass) { this.permClass = permClass; }
  
  public void add(Permission permission) {
    if (isReadOnly())
      throw new SecurityException("ClusterPermissionCollection is read-only!"); 
    boolean shouldAdd = ((this.permClass != null && this.permClass.equals(permission.getClass())) || permission instanceof ClusterPermission);
    if (shouldAdd && !implies(permission))
      this.perms.add(permission); 
  }
  
  public void add(PermissionCollection permissions) {
    if (isReadOnly())
      throw new SecurityException("ClusterPermissionCollection is read-only!"); 
    if (permissions instanceof ClusterPermissionCollection)
      for (Permission p : ((ClusterPermissionCollection)permissions).perms)
        add(p);  
  }
  
  public boolean implies(Permission permission) {
    for (Permission p : this.perms) {
      if (p.implies(permission))
        return true; 
    } 
    return false;
  }
  
  public void compact() {
    if (isReadOnly())
      throw new SecurityException("ClusterPermissionCollection is read-only!"); 
    Iterator<Permission> iter = this.perms.iterator();
    while (iter.hasNext()) {
      Permission perm = (Permission)iter.next();
      boolean implies = false;
      for (Permission p : this.perms) {
        if (p != perm && p.implies(perm)) {
          implies = true;
          break;
        } 
      } 
      if (implies)
        iter.remove(); 
    } 
    setReadOnly();
  }
  
  public Enumeration<Permission> elements() { return Collections.enumeration(this.perms); }
  
  public Set<Permission> getPermissions() { return Collections.unmodifiableSet(this.perms); }
  
  public String toString() { return "ClusterPermissionCollection [permClass=" + this.permClass + "]"; }
}
