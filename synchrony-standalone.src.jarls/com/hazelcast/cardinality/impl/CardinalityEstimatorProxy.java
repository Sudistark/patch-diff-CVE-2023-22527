package com.hazelcast.cardinality.impl;

import com.hazelcast.cardinality.CardinalityEstimator;
import com.hazelcast.cardinality.impl.operations.AggregateOperation;
import com.hazelcast.cardinality.impl.operations.EstimateOperation;
import com.hazelcast.core.ICompletableFuture;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.AbstractDistributedObject;
import com.hazelcast.spi.InternalCompletableFuture;
import com.hazelcast.spi.NodeEngine;
import com.hazelcast.spi.Operation;
import com.hazelcast.util.Preconditions;

public class CardinalityEstimatorProxy extends AbstractDistributedObject<CardinalityEstimatorService> implements CardinalityEstimator {
  private final String name;
  
  private final int partitionId;
  
  CardinalityEstimatorProxy(String name, NodeEngine nodeEngine, CardinalityEstimatorService service) {
    super(nodeEngine, service);
    this.name = name;
    this.partitionId = nodeEngine.getPartitionService().getPartitionId(getNameAsPartitionAwareData());
  }
  
  public int getPartitionId() { return this.partitionId; }
  
  public String getName() { return this.name; }
  
  public String getServiceName() { return "hz:impl:cardinalityEstimatorService"; }
  
  public void add(Object obj) { addAsync(obj).join(); }
  
  public long estimate() { return ((Long)estimateAsync().join()).longValue(); }
  
  public InternalCompletableFuture<Void> addAsync(Object obj) {
    Preconditions.checkNotNull(obj, "Object is null.");
    Data data = getNodeEngine().getSerializationService().toData(obj);
    Operation operation = (new AggregateOperation(this.name, data.hash64())).setPartitionId(this.partitionId);
    return invokeOnPartition(operation);
  }
  
  public InternalCompletableFuture<Long> estimateAsync() {
    Operation operation = (new EstimateOperation(this.name)).setPartitionId(this.partitionId);
    return invokeOnPartition(operation);
  }
  
  public String toString() { return "CardinalityEstimator{name='" + this.name + '\'' + '}'; }
}
