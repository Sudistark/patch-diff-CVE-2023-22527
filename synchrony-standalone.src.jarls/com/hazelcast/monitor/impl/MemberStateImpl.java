package com.hazelcast.monitor.impl;

import com.hazelcast.instance.EndpointQualifier;
import com.hazelcast.instance.ProtocolType;
import com.hazelcast.internal.json.JsonArray;
import com.hazelcast.internal.json.JsonObject;
import com.hazelcast.internal.json.JsonValue;
import com.hazelcast.internal.management.JsonSerializable;
import com.hazelcast.internal.management.dto.AdvancedNetworkStatsDTO;
import com.hazelcast.internal.management.dto.ClientEndPointDTO;
import com.hazelcast.internal.management.dto.ClusterHotRestartStatusDTO;
import com.hazelcast.internal.management.dto.MXBeansDTO;
import com.hazelcast.monitor.HotRestartState;
import com.hazelcast.monitor.LocalCacheStats;
import com.hazelcast.monitor.LocalExecutorStats;
import com.hazelcast.monitor.LocalFlakeIdGeneratorStats;
import com.hazelcast.monitor.LocalMapStats;
import com.hazelcast.monitor.LocalMemoryStats;
import com.hazelcast.monitor.LocalMultiMapStats;
import com.hazelcast.monitor.LocalOperationStats;
import com.hazelcast.monitor.LocalPNCounterStats;
import com.hazelcast.monitor.LocalQueueStats;
import com.hazelcast.monitor.LocalReplicatedMapStats;
import com.hazelcast.monitor.LocalTopicStats;
import com.hazelcast.monitor.LocalWanStats;
import com.hazelcast.monitor.MemberPartitionState;
import com.hazelcast.monitor.MemberState;
import com.hazelcast.monitor.NodeState;
import com.hazelcast.monitor.WanSyncState;
import com.hazelcast.nio.Address;
import com.hazelcast.util.EmptyStatement;
import com.hazelcast.util.JsonUtil;
import java.net.UnknownHostException;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;

public class MemberStateImpl implements MemberState {
  private String address;
  
  private String uuid;
  
  private String cpMemberUuid;
  
  private Map<EndpointQualifier, Address> endpoints = new HashMap();
  
  private Map<String, Long> runtimeProps = new HashMap();
  
  private Map<String, LocalMapStats> mapStats = new HashMap();
  
  private Map<String, LocalMultiMapStats> multiMapStats = new HashMap();
  
  private Map<String, LocalQueueStats> queueStats = new HashMap();
  
  private Map<String, LocalTopicStats> topicStats = new HashMap();
  
  private Map<String, LocalTopicStats> reliableTopicStats = new HashMap();
  
  private Map<String, LocalPNCounterStats> pnCounterStats = new HashMap();
  
  private Map<String, LocalExecutorStats> executorStats = new HashMap();
  
  private Map<String, LocalReplicatedMapStats> replicatedMapStats = new HashMap();
  
  private Map<String, LocalCacheStats> cacheStats = new HashMap();
  
  private Map<String, LocalWanStats> wanStats = new HashMap();
  
  private Map<String, LocalFlakeIdGeneratorStats> flakeIdGeneratorStats = new HashMap();
  
  private Collection<ClientEndPointDTO> clients = new HashSet();
  
  private Map<String, String> clientStats = new HashMap();
  
  private MXBeansDTO beans = new MXBeansDTO();
  
  private LocalMemoryStats memoryStats = new LocalMemoryStatsImpl();
  
  private MemberPartitionState memberPartitionState = new MemberPartitionStateImpl();
  
  private LocalOperationStats operationStats = new LocalOperationStatsImpl();
  
  private NodeState nodeState = new NodeStateImpl();
  
  private HotRestartState hotRestartState = new HotRestartStateImpl();
  
  private ClusterHotRestartStatusDTO clusterHotRestartStatus = new ClusterHotRestartStatusDTO();
  
  private WanSyncState wanSyncState = new WanSyncStateImpl();
  
  private AdvancedNetworkStatsDTO inboundNetworkStats = new AdvancedNetworkStatsDTO();
  
  private AdvancedNetworkStatsDTO outboundNetworkStats = new AdvancedNetworkStatsDTO();
  
  public Map<String, Long> getRuntimeProps() { return this.runtimeProps; }
  
  public void setRuntimeProps(Map<String, Long> runtimeProps) { this.runtimeProps = runtimeProps; }
  
  public LocalMapStats getLocalMapStats(String mapName) { return (LocalMapStats)this.mapStats.get(mapName); }
  
  public LocalMultiMapStats getLocalMultiMapStats(String mapName) { return (LocalMultiMapStats)this.multiMapStats.get(mapName); }
  
  public LocalQueueStats getLocalQueueStats(String queueName) { return (LocalQueueStats)this.queueStats.get(queueName); }
  
  public LocalTopicStats getLocalTopicStats(String topicName) { return (LocalTopicStats)this.topicStats.get(topicName); }
  
  public LocalTopicStats getReliableLocalTopicStats(String reliableTopicName) { return (LocalTopicStats)this.reliableTopicStats.get(reliableTopicName); }
  
  public LocalPNCounterStats getLocalPNCounterStats(String pnCounterName) { return (LocalPNCounterStats)this.pnCounterStats.get(pnCounterName); }
  
  public LocalReplicatedMapStats getLocalReplicatedMapStats(String replicatedMapName) { return (LocalReplicatedMapStats)this.replicatedMapStats.get(replicatedMapName); }
  
  public LocalExecutorStats getLocalExecutorStats(String executorName) { return (LocalExecutorStats)this.executorStats.get(executorName); }
  
  public LocalCacheStats getLocalCacheStats(String cacheName) { return (LocalCacheStats)this.cacheStats.get(cacheName); }
  
  public LocalWanStats getLocalWanStats(String schemeName) { return (LocalWanStats)this.wanStats.get(schemeName); }
  
  public LocalFlakeIdGeneratorStats getLocalFlakeIdGeneratorStats(String flakeIdName) { return (LocalFlakeIdGeneratorStats)this.flakeIdGeneratorStats.get(flakeIdName); }
  
  public String getAddress() { return this.address; }
  
  public void setAddress(String address) { this.address = address; }
  
  public String getUuid() { return this.uuid; }
  
  public void setUuid(String uuid) { this.uuid = uuid; }
  
  public String getCpMemberUuid() { return this.cpMemberUuid; }
  
  public void setCpMemberUuid(String cpMemberUuid) { this.cpMemberUuid = cpMemberUuid; }
  
  public Map<EndpointQualifier, Address> getEndpoints() { return this.endpoints; }
  
  public void setEndpoints(Map<EndpointQualifier, Address> addressMap) { this.endpoints = addressMap; }
  
  public void putLocalMapStats(String name, LocalMapStats localMapStats) { this.mapStats.put(name, localMapStats); }
  
  public void putLocalMultiMapStats(String name, LocalMultiMapStats localMultiMapStats) { this.multiMapStats.put(name, localMultiMapStats); }
  
  public void putLocalQueueStats(String name, LocalQueueStats localQueueStats) { this.queueStats.put(name, localQueueStats); }
  
  public void putLocalReplicatedMapStats(String name, LocalReplicatedMapStats localReplicatedMapStats) { this.replicatedMapStats.put(name, localReplicatedMapStats); }
  
  public void putLocalTopicStats(String name, LocalTopicStats localTopicStats) { this.topicStats.put(name, localTopicStats); }
  
  public void putLocalReliableTopicStats(String name, LocalTopicStats localTopicStats) { this.reliableTopicStats.put(name, localTopicStats); }
  
  public void putLocalPNCounterStats(String name, LocalPNCounterStats localPNCounterStats) { this.pnCounterStats.put(name, localPNCounterStats); }
  
  public void putLocalExecutorStats(String name, LocalExecutorStats localExecutorStats) { this.executorStats.put(name, localExecutorStats); }
  
  public void putLocalCacheStats(String name, LocalCacheStats localCacheStats) { this.cacheStats.put(name, localCacheStats); }
  
  public void putLocalWanStats(String name, LocalWanStats localWanStats) { this.wanStats.put(name, localWanStats); }
  
  public void putLocalFlakeIdStats(String name, LocalFlakeIdGeneratorStats localFlakeIdStats) { this.flakeIdGeneratorStats.put(name, localFlakeIdStats); }
  
  public Collection<ClientEndPointDTO> getClients() { return this.clients; }
  
  public MXBeansDTO getMXBeans() { return this.beans; }
  
  public void setBeans(MXBeansDTO beans) { this.beans = beans; }
  
  public void setClients(Collection<ClientEndPointDTO> clients) { this.clients = clients; }
  
  public LocalMemoryStats getLocalMemoryStats() { return this.memoryStats; }
  
  public void setLocalMemoryStats(LocalMemoryStats memoryStats) { this.memoryStats = memoryStats; }
  
  public LocalOperationStats getOperationStats() { return this.operationStats; }
  
  public void setOperationStats(LocalOperationStats operationStats) { this.operationStats = operationStats; }
  
  public MemberPartitionState getMemberPartitionState() { return this.memberPartitionState; }
  
  public NodeState getNodeState() { return this.nodeState; }
  
  public void setNodeState(NodeState nodeState) { this.nodeState = nodeState; }
  
  public HotRestartState getHotRestartState() { return this.hotRestartState; }
  
  public void setHotRestartState(HotRestartState hotRestartState) { this.hotRestartState = hotRestartState; }
  
  public ClusterHotRestartStatusDTO getClusterHotRestartStatus() { return this.clusterHotRestartStatus; }
  
  public void setClusterHotRestartStatus(ClusterHotRestartStatusDTO clusterHotRestartStatus) { this.clusterHotRestartStatus = clusterHotRestartStatus; }
  
  public WanSyncState getWanSyncState() { return this.wanSyncState; }
  
  public void setWanSyncState(WanSyncState wanSyncState) { this.wanSyncState = wanSyncState; }
  
  public Map<String, String> getClientStats() { return this.clientStats; }
  
  public void setClientStats(Map<String, String> clientStats) { this.clientStats = clientStats; }
  
  public AdvancedNetworkStatsDTO getInboundNetworkStats() { return this.inboundNetworkStats; }
  
  public void setInboundNetworkStats(AdvancedNetworkStatsDTO inboundNetworkStats) { this.inboundNetworkStats = inboundNetworkStats; }
  
  public AdvancedNetworkStatsDTO getOutboundNetworkStats() { return this.outboundNetworkStats; }
  
  public void setOutboundNetworkStats(AdvancedNetworkStatsDTO outboundNetworkStats) { this.outboundNetworkStats = outboundNetworkStats; }
  
  public JsonObject toJson() {
    JsonObject root = new JsonObject();
    root.add("address", this.address);
    root.add("uuid", this.uuid);
    root.add("cpMemberUuid", this.cpMemberUuid);
    JsonArray endpoints = new JsonArray();
    for (Map.Entry<EndpointQualifier, Address> entry : this.endpoints.entrySet()) {
      JsonObject address = new JsonObject();
      address.set("host", ((Address)entry.getValue()).getHost());
      address.set("port", ((Address)entry.getValue()).getPort());
      JsonObject endpoint = new JsonObject();
      endpoint.set("protocol", ((EndpointQualifier)entry.getKey()).getType().name());
      endpoint.set("address", address);
      if (((EndpointQualifier)entry.getKey()).getIdentifier() != null)
        endpoint.set("id", ((EndpointQualifier)entry.getKey()).getIdentifier()); 
      endpoints.add(endpoint);
    } 
    root.add("endpoints", endpoints);
    serializeMap(root, "mapStats", this.mapStats);
    serializeMap(root, "multiMapStats", this.multiMapStats);
    serializeMap(root, "replicatedMapStats", this.replicatedMapStats);
    serializeMap(root, "queueStats", this.queueStats);
    serializeMap(root, "topicStats", this.topicStats);
    serializeMap(root, "reliableTopicStats", this.reliableTopicStats);
    serializeMap(root, "pnCounterStats", this.pnCounterStats);
    serializeMap(root, "executorStats", this.executorStats);
    serializeMap(root, "cacheStats", this.cacheStats);
    serializeMap(root, "wanStats", this.wanStats);
    serializeMap(root, "flakeIdStats", this.flakeIdGeneratorStats);
    JsonObject runtimePropsObject = new JsonObject();
    for (Map.Entry<String, Long> entry : this.runtimeProps.entrySet())
      runtimePropsObject.add((String)entry.getKey(), ((Long)entry.getValue()).longValue()); 
    root.add("runtimeProps", runtimePropsObject);
    JsonArray clientsArray = new JsonArray();
    for (ClientEndPointDTO client : this.clients)
      clientsArray.add(client.toJson()); 
    root.add("clients", clientsArray);
    root.add("beans", this.beans.toJson());
    root.add("memoryStats", this.memoryStats.toJson());
    root.add("operationStats", this.operationStats.toJson());
    root.add("memberPartitionState", this.memberPartitionState.toJson());
    root.add("nodeState", this.nodeState.toJson());
    root.add("hotRestartState", this.hotRestartState.toJson());
    root.add("clusterHotRestartStatus", this.clusterHotRestartStatus.toJson());
    root.add("wanSyncState", this.wanSyncState.toJson());
    JsonObject clientStatsObject = new JsonObject();
    for (Map.Entry<String, String> entry : this.clientStats.entrySet())
      clientStatsObject.add((String)entry.getKey(), (String)entry.getValue()); 
    root.add("clientStats", clientStatsObject);
    root.add("inboundNetworkStats", this.inboundNetworkStats.toJson());
    root.add("outboundNetworkStats", this.outboundNetworkStats.toJson());
    return root;
  }
  
  private static void serializeMap(JsonObject root, String key, Map<String, ? extends JsonSerializable> map) {
    JsonObject jsonObject = new JsonObject();
    for (Map.Entry<String, ? extends JsonSerializable> e : map.entrySet())
      jsonObject.add((String)e.getKey(), ((JsonSerializable)e.getValue()).toJson()); 
    root.add(key, jsonObject);
  }
  
  public void fromJson(JsonObject json) {
    this.address = JsonUtil.getString(json, "address");
    this.uuid = JsonUtil.getString(json, "uuid", null);
    this.cpMemberUuid = JsonUtil.getString(json, "cpMemberUuid", null);
    JsonArray endpoints = JsonUtil.getArray(json, "endpoints");
    for (JsonValue obj : endpoints) {
      JsonObject endpoint = obj.asObject();
      String id = endpoint.getString("id", null);
      ProtocolType type = ProtocolType.valueOf(endpoint.getString("protocol", "MEMBER"));
      JsonValue addr = endpoint.get("address");
      String host = addr.asObject().getString("host", "");
      int port = addr.asObject().getInt("port", 0);
      EndpointQualifier qualifier = EndpointQualifier.resolve(type, id);
      Address address = null;
      try {
        address = new Address(host, port);
      } catch (UnknownHostException e) {
        EmptyStatement.ignore(e);
      } 
      this.endpoints.put(qualifier, address);
    } 
    for (JsonObject.Member next : JsonUtil.getObject(json, "mapStats")) {
      LocalMapStatsImpl stats = new LocalMapStatsImpl();
      stats.fromJson(next.getValue().asObject());
      this.mapStats.put(next.getName(), stats);
    } 
    for (JsonObject.Member next : JsonUtil.getObject(json, "multiMapStats")) {
      LocalMultiMapStatsImpl stats = new LocalMultiMapStatsImpl();
      stats.fromJson(next.getValue().asObject());
      this.multiMapStats.put(next.getName(), stats);
    } 
    for (JsonObject.Member next : JsonUtil.getObject(json, "replicatedMapStats", new JsonObject())) {
      LocalReplicatedMapStatsImpl localReplicatedMapStatsImpl = new LocalReplicatedMapStatsImpl();
      localReplicatedMapStatsImpl.fromJson(next.getValue().asObject());
      this.replicatedMapStats.put(next.getName(), localReplicatedMapStatsImpl);
    } 
    for (JsonObject.Member next : JsonUtil.getObject(json, "queueStats")) {
      LocalQueueStatsImpl stats = new LocalQueueStatsImpl();
      stats.fromJson(next.getValue().asObject());
      this.queueStats.put(next.getName(), stats);
    } 
    for (JsonObject.Member next : JsonUtil.getObject(json, "topicStats")) {
      LocalTopicStatsImpl stats = new LocalTopicStatsImpl();
      stats.fromJson(next.getValue().asObject());
      this.topicStats.put(next.getName(), stats);
    } 
    for (JsonObject.Member next : JsonUtil.getObject(json, "reliableTopicStats")) {
      LocalTopicStatsImpl stats = new LocalTopicStatsImpl();
      stats.fromJson(next.getValue().asObject());
      this.reliableTopicStats.put(next.getName(), stats);
    } 
    for (JsonObject.Member next : JsonUtil.getObject(json, "pnCounterStats")) {
      LocalPNCounterStatsImpl stats = new LocalPNCounterStatsImpl();
      stats.fromJson(next.getValue().asObject());
      this.pnCounterStats.put(next.getName(), stats);
    } 
    for (JsonObject.Member next : JsonUtil.getObject(json, "executorStats")) {
      LocalExecutorStatsImpl stats = new LocalExecutorStatsImpl();
      stats.fromJson(next.getValue().asObject());
      this.executorStats.put(next.getName(), stats);
    } 
    for (JsonObject.Member next : JsonUtil.getObject(json, "cacheStats", new JsonObject())) {
      LocalCacheStatsImpl localCacheStatsImpl = new LocalCacheStatsImpl();
      localCacheStatsImpl.fromJson(next.getValue().asObject());
      this.cacheStats.put(next.getName(), localCacheStatsImpl);
    } 
    for (JsonObject.Member next : JsonUtil.getObject(json, "wanStats", new JsonObject())) {
      LocalWanStatsImpl localWanStatsImpl = new LocalWanStatsImpl();
      localWanStatsImpl.fromJson(next.getValue().asObject());
      this.wanStats.put(next.getName(), localWanStatsImpl);
    } 
    for (JsonObject.Member next : JsonUtil.getObject(json, "flakeIdStats", new JsonObject())) {
      LocalFlakeIdGeneratorStatsImpl localFlakeIdGeneratorStatsImpl = new LocalFlakeIdGeneratorStatsImpl();
      localFlakeIdGeneratorStatsImpl.fromJson(next.getValue().asObject());
      this.flakeIdGeneratorStats.put(next.getName(), localFlakeIdGeneratorStatsImpl);
    } 
    for (JsonObject.Member next : JsonUtil.getObject(json, "runtimeProps"))
      this.runtimeProps.put(next.getName(), Long.valueOf(next.getValue().asLong())); 
    JsonArray jsonClients = JsonUtil.getArray(json, "clients");
    for (JsonValue jsonClient : jsonClients) {
      ClientEndPointDTO client = new ClientEndPointDTO();
      client.fromJson(jsonClient.asObject());
      this.clients.add(client);
    } 
    this.beans = new MXBeansDTO();
    this.beans.fromJson(JsonUtil.getObject(json, "beans"));
    JsonObject jsonMemoryStats = JsonUtil.getObject(json, "memoryStats", null);
    if (jsonMemoryStats != null)
      this.memoryStats.fromJson(jsonMemoryStats); 
    JsonObject jsonOperationStats = JsonUtil.getObject(json, "operationStats", null);
    if (jsonOperationStats != null)
      this.operationStats.fromJson(jsonOperationStats); 
    JsonObject jsonMemberPartitionState = JsonUtil.getObject(json, "memberPartitionState", null);
    if (jsonMemberPartitionState != null) {
      this.memberPartitionState = new MemberPartitionStateImpl();
      this.memberPartitionState.fromJson(jsonMemberPartitionState);
    } 
    JsonObject jsonNodeState = JsonUtil.getObject(json, "nodeState", null);
    if (jsonNodeState != null) {
      this.nodeState = new NodeStateImpl();
      this.nodeState.fromJson(jsonNodeState);
    } 
    JsonObject jsonHotRestartState = JsonUtil.getObject(json, "hotRestartState", null);
    if (jsonHotRestartState != null) {
      this.hotRestartState = new HotRestartStateImpl();
      this.hotRestartState.fromJson(jsonHotRestartState);
    } 
    JsonObject jsonClusterHotRestartStatus = JsonUtil.getObject(json, "clusterHotRestartStatus", null);
    if (jsonClusterHotRestartStatus != null) {
      this.clusterHotRestartStatus = new ClusterHotRestartStatusDTO();
      this.clusterHotRestartStatus.fromJson(jsonClusterHotRestartStatus);
    } 
    JsonObject jsonWanSyncState = JsonUtil.getObject(json, "wanSyncState", null);
    if (jsonWanSyncState != null) {
      this.wanSyncState = new WanSyncStateImpl();
      this.wanSyncState.fromJson(jsonWanSyncState);
    } 
    for (JsonObject.Member next : JsonUtil.getObject(json, "clientStats"))
      this.clientStats.put(next.getName(), next.getValue().asString()); 
    JsonObject jsonInboundNetworkStats = JsonUtil.getObject(json, "inboundNetworkStats", null);
    if (jsonInboundNetworkStats != null) {
      this.inboundNetworkStats = new AdvancedNetworkStatsDTO();
      this.inboundNetworkStats.fromJson(jsonInboundNetworkStats);
    } 
    JsonObject jsonOutboundNetworkStats = JsonUtil.getObject(json, "outboundNetworkStats", null);
    if (jsonOutboundNetworkStats != null) {
      this.outboundNetworkStats = new AdvancedNetworkStatsDTO();
      this.outboundNetworkStats.fromJson(jsonOutboundNetworkStats);
    } 
  }
  
  public String toString() { return "MemberStateImpl{address=" + this.address + ", uuid=" + this.uuid + ", cpMemberUuid=" + this.cpMemberUuid + ", runtimeProps=" + this.runtimeProps + ", mapStats=" + this.mapStats + ", multiMapStats=" + this.multiMapStats + ", replicatedMapStats=" + this.replicatedMapStats + ", queueStats=" + this.queueStats + ", topicStats=" + this.topicStats + ", reliableTopicStats=" + this.reliableTopicStats + ", pnCounterStats=" + this.pnCounterStats + ", executorStats=" + this.executorStats + ", cacheStats=" + this.cacheStats + ", memoryStats=" + this.memoryStats + ", operationStats=" + this.operationStats + ", memberPartitionState=" + this.memberPartitionState + ", nodeState=" + this.nodeState + ", hotRestartState=" + this.hotRestartState + ", clusterHotRestartStatus=" + this.clusterHotRestartStatus + ", wanSyncState=" + this.wanSyncState + ", flakeIdStats=" + this.flakeIdGeneratorStats + ", clientStats=" + this.clientStats + ", inboundNetworkStats=" + this.inboundNetworkStats + ", outboundNetworkStats=" + this.outboundNetworkStats + '}'; }
}
