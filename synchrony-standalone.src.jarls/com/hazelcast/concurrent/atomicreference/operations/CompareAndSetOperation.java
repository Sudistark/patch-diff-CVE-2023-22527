package com.hazelcast.concurrent.atomicreference.operations;

import com.hazelcast.concurrent.atomicreference.AtomicReferenceContainer;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.Operation;
import com.hazelcast.spi.impl.MutatingOperation;
import java.io.IOException;

public class CompareAndSetOperation extends AtomicReferenceBackupAwareOperation implements MutatingOperation {
  private Data expect;
  
  private Data update;
  
  private boolean returnValue;
  
  public CompareAndSetOperation() {}
  
  public CompareAndSetOperation(String name, Data expect, Data update) {
    super(name);
    this.expect = expect;
    this.update = update;
  }
  
  public void run() {
    AtomicReferenceContainer container = getReferenceContainer();
    this.returnValue = container.compareAndSet(this.expect, this.update);
    this.shouldBackup = this.returnValue;
  }
  
  public Object getResponse() { return Boolean.valueOf(this.returnValue); }
  
  public boolean shouldBackup() { return this.shouldBackup; }
  
  public Operation getBackupOperation() { return new SetBackupOperation(this.name, this.update); }
  
  public int getId() { return 3; }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeData(this.expect);
    out.writeData(this.update);
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    this.expect = in.readData();
    this.update = in.readData();
  }
}
