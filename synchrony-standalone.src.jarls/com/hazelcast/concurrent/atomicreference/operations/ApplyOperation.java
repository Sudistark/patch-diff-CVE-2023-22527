package com.hazelcast.concurrent.atomicreference.operations;

import com.hazelcast.concurrent.atomicreference.AtomicReferenceContainer;
import com.hazelcast.core.IFunction;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.NodeEngine;
import com.hazelcast.spi.impl.MutatingOperation;
import java.io.IOException;

public class ApplyOperation extends AbstractAtomicReferenceOperation implements MutatingOperation {
  protected Data function;
  
  protected Data returnValue;
  
  public ApplyOperation() {}
  
  public ApplyOperation(String name, Data function) {
    super(name);
    this.function = function;
  }
  
  public void run() {
    NodeEngine nodeEngine = getNodeEngine();
    IFunction f = (IFunction)nodeEngine.toObject(this.function);
    AtomicReferenceContainer container = getReferenceContainer();
    Object input = nodeEngine.toObject(container.get());
    Object output = f.apply(input);
    this.returnValue = nodeEngine.toData(output);
  }
  
  public Object getResponse() { return this.returnValue; }
  
  public int getId() { return 2; }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeData(this.function);
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    this.function = in.readData();
  }
}
