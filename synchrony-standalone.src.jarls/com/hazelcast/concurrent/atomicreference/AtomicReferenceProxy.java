package com.hazelcast.concurrent.atomicreference;

import com.hazelcast.concurrent.atomicreference.operations.AlterAndGetOperation;
import com.hazelcast.concurrent.atomicreference.operations.AlterOperation;
import com.hazelcast.concurrent.atomicreference.operations.ApplyOperation;
import com.hazelcast.concurrent.atomicreference.operations.CompareAndSetOperation;
import com.hazelcast.concurrent.atomicreference.operations.ContainsOperation;
import com.hazelcast.concurrent.atomicreference.operations.GetAndAlterOperation;
import com.hazelcast.concurrent.atomicreference.operations.GetAndSetOperation;
import com.hazelcast.concurrent.atomicreference.operations.GetOperation;
import com.hazelcast.concurrent.atomicreference.operations.IsNullOperation;
import com.hazelcast.concurrent.atomicreference.operations.SetAndGetOperation;
import com.hazelcast.concurrent.atomicreference.operations.SetOperation;
import com.hazelcast.core.AsyncAtomicReference;
import com.hazelcast.core.ICompletableFuture;
import com.hazelcast.core.IFunction;
import com.hazelcast.spi.AbstractDistributedObject;
import com.hazelcast.spi.InternalCompletableFuture;
import com.hazelcast.spi.NodeEngine;
import com.hazelcast.spi.Operation;
import com.hazelcast.util.Preconditions;

public class AtomicReferenceProxy<E> extends AbstractDistributedObject<AtomicReferenceService> implements AsyncAtomicReference<E> {
  private final String name;
  
  private final int partitionId;
  
  public AtomicReferenceProxy(String name, NodeEngine nodeEngine, AtomicReferenceService service) {
    super(nodeEngine, service);
    this.name = name;
    this.partitionId = nodeEngine.getPartitionService().getPartitionId(getNameAsPartitionAwareData());
  }
  
  public void alter(IFunction<E, E> function) { alterAsync(function).join(); }
  
  public InternalCompletableFuture<Void> alterAsync(IFunction<E, E> function) {
    Preconditions.isNotNull(function, "function");
    Operation operation = (new AlterOperation(this.name, toData(function))).setPartitionId(this.partitionId);
    return invokeOnPartition(operation);
  }
  
  public InternalCompletableFuture<Void> asyncAlter(IFunction<E, E> function) { return alterAsync(function); }
  
  public E alterAndGet(IFunction<E, E> function) { return (E)alterAndGetAsync(function).join(); }
  
  public InternalCompletableFuture<E> alterAndGetAsync(IFunction<E, E> function) {
    Preconditions.isNotNull(function, "function");
    Operation operation = (new AlterAndGetOperation(this.name, toData(function))).setPartitionId(this.partitionId);
    return invokeOnPartition(operation);
  }
  
  public InternalCompletableFuture<E> asyncAlterAndGet(IFunction<E, E> function) { return alterAndGetAsync(function); }
  
  public E getAndAlter(IFunction<E, E> function) { return (E)getAndAlterAsync(function).join(); }
  
  public InternalCompletableFuture<E> getAndAlterAsync(IFunction<E, E> function) {
    Preconditions.isNotNull(function, "function");
    Operation operation = (new GetAndAlterOperation(this.name, toData(function))).setPartitionId(this.partitionId);
    return invokeOnPartition(operation);
  }
  
  public InternalCompletableFuture<E> asyncGetAndAlter(IFunction<E, E> function) { return getAndAlterAsync(function); }
  
  public <R> R apply(IFunction<E, R> function) { return (R)applyAsync(function).join(); }
  
  public <R> InternalCompletableFuture<R> applyAsync(IFunction<E, R> function) {
    Preconditions.isNotNull(function, "function");
    Operation operation = (new ApplyOperation(this.name, toData(function))).setPartitionId(this.partitionId);
    return invokeOnPartition(operation);
  }
  
  public <R> InternalCompletableFuture<R> asyncApply(IFunction<E, R> function) { return applyAsync(function); }
  
  public void clear() { clearAsync().join(); }
  
  public InternalCompletableFuture<Void> clearAsync() { return setAsync(null); }
  
  public InternalCompletableFuture<Void> asyncClear() { return clearAsync(); }
  
  public boolean compareAndSet(E expect, E update) { return ((Boolean)compareAndSetAsync(expect, update).join()).booleanValue(); }
  
  public InternalCompletableFuture<Boolean> compareAndSetAsync(E expect, E update) {
    Operation operation = (new CompareAndSetOperation(this.name, toData(expect), toData(update))).setPartitionId(this.partitionId);
    return invokeOnPartition(operation);
  }
  
  public InternalCompletableFuture<Boolean> asyncCompareAndSet(E expect, E update) { return compareAndSetAsync(expect, update); }
  
  public E get() { return (E)getAsync().join(); }
  
  public InternalCompletableFuture<E> getAsync() {
    Operation operation = (new GetOperation(this.name)).setPartitionId(this.partitionId);
    return invokeOnPartition(operation);
  }
  
  public InternalCompletableFuture<E> asyncGet() { return getAsync(); }
  
  public boolean contains(E expected) { return ((Boolean)containsAsync(expected).join()).booleanValue(); }
  
  public InternalCompletableFuture<Boolean> containsAsync(E expected) {
    Operation operation = (new ContainsOperation(this.name, toData(expected))).setPartitionId(this.partitionId);
    return invokeOnPartition(operation);
  }
  
  public InternalCompletableFuture<Boolean> asyncContains(E value) { return containsAsync(value); }
  
  public void set(E newValue) { setAsync(newValue).join(); }
  
  public InternalCompletableFuture<Void> setAsync(E newValue) {
    Operation operation = (new SetOperation(this.name, toData(newValue))).setPartitionId(this.partitionId);
    return invokeOnPartition(operation);
  }
  
  public InternalCompletableFuture<Void> asyncSet(E newValue) {
    Operation operation = (new SetOperation(this.name, toData(newValue))).setPartitionId(this.partitionId);
    return invokeOnPartition(operation);
  }
  
  public E getAndSet(E newValue) { return (E)getAndSetAsync(newValue).join(); }
  
  public InternalCompletableFuture<E> getAndSetAsync(E newValue) {
    Operation operation = (new GetAndSetOperation(this.name, toData(newValue))).setPartitionId(this.partitionId);
    return invokeOnPartition(operation);
  }
  
  public InternalCompletableFuture<E> asyncGetAndSet(E newValue) { return getAndSetAsync(newValue); }
  
  public E setAndGet(E update) { return (E)asyncSetAndGet(update).join(); }
  
  public InternalCompletableFuture<E> asyncSetAndGet(E update) {
    Operation operation = (new SetAndGetOperation(this.name, toData(update))).setPartitionId(this.partitionId);
    return invokeOnPartition(operation);
  }
  
  public boolean isNull() { return ((Boolean)isNullAsync().join()).booleanValue(); }
  
  public InternalCompletableFuture<Boolean> isNullAsync() {
    Operation operation = (new IsNullOperation(this.name)).setPartitionId(this.partitionId);
    return invokeOnPartition(operation);
  }
  
  public InternalCompletableFuture<Boolean> asyncIsNull() { return isNullAsync(); }
  
  public String getName() { return this.name; }
  
  public int getPartitionId() { return this.partitionId; }
  
  public String getServiceName() { return "hz:impl:atomicReferenceService"; }
  
  public String toString() { return "IAtomicReference{name='" + this.name + '\'' + '}'; }
}
