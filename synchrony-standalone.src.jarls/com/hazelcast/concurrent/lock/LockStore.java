package com.hazelcast.concurrent.lock;

import com.hazelcast.nio.serialization.Data;
import java.util.Set;

public interface LockStore {
  boolean lock(Data paramData, String paramString, long paramLong1, long paramLong2, long paramLong3);
  
  boolean localLock(Data paramData, String paramString, long paramLong1, long paramLong2, long paramLong3);
  
  boolean txnLock(Data paramData, String paramString, long paramLong1, long paramLong2, long paramLong3, boolean paramBoolean);
  
  boolean extendLeaseTime(Data paramData, String paramString, long paramLong1, long paramLong2);
  
  boolean unlock(Data paramData, String paramString, long paramLong1, long paramLong2);
  
  boolean isLocked(Data paramData);
  
  boolean isLockedBy(Data paramData, String paramString, long paramLong);
  
  int getLockCount(Data paramData);
  
  int getLockedEntryCount();
  
  long getRemainingLeaseTime(Data paramData);
  
  boolean canAcquireLock(Data paramData, String paramString, long paramLong);
  
  boolean shouldBlockReads(Data paramData);
  
  Set<Data> getLockedKeys();
  
  boolean forceUnlock(Data paramData);
  
  String getOwnerInfo(Data paramData);
}
