package com.hazelcast.concurrent.lock.operations;

import com.hazelcast.concurrent.lock.LockStoreImpl;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.BackupAwareOperation;
import com.hazelcast.spi.Notifier;
import com.hazelcast.spi.ObjectNamespace;
import com.hazelcast.spi.Operation;
import com.hazelcast.spi.WaitNotifyKey;
import com.hazelcast.spi.impl.MutatingOperation;
import java.io.IOException;

public class BeforeAwaitOperation extends AbstractLockOperation implements Notifier, BackupAwareOperation, MutatingOperation {
  private String conditionId;
  
  public BeforeAwaitOperation() {}
  
  public BeforeAwaitOperation(ObjectNamespace namespace, Data key, long threadId, String conditionId) {
    super(namespace, key, threadId);
    this.conditionId = conditionId;
  }
  
  public BeforeAwaitOperation(ObjectNamespace namespace, Data key, long threadId, String conditionId, long referenceId) {
    super(namespace, key, threadId);
    this.conditionId = conditionId;
    setReferenceCallId(referenceId);
  }
  
  public void beforeRun() {
    LockStoreImpl lockStore = getLockStore();
    boolean isLockOwner = lockStore.isLockedBy(this.key, getCallerUuid(), this.threadId);
    ensureOwner(lockStore, isLockOwner);
  }
  
  private void ensureOwner(LockStoreImpl lockStore, boolean isLockOwner) {
    if (!isLockOwner)
      throw new IllegalMonitorStateException("Current thread is not owner of the lock! -> " + lockStore
          .getOwnerInfo(this.key)); 
  }
  
  public void run() {
    LockStoreImpl lockStore = getLockStore();
    lockStore.addAwait(this.key, this.conditionId, getCallerUuid(), this.threadId);
    lockStore.unlock(this.key, getCallerUuid(), this.threadId, getReferenceCallId());
  }
  
  public boolean shouldNotify() { return true; }
  
  public boolean shouldBackup() { return true; }
  
  public Operation getBackupOperation() { return new BeforeAwaitBackupOperation(this.namespace, this.key, this.threadId, this.conditionId, getCallerUuid()); }
  
  public WaitNotifyKey getNotifiedKey() {
    LockStoreImpl lockStore = getLockStore();
    return lockStore.getNotifiedKey(this.key);
  }
  
  public int getId() { return 6; }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeUTF(this.conditionId);
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    this.conditionId = in.readUTF();
  }
}
