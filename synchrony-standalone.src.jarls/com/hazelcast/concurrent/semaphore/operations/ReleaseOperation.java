package com.hazelcast.concurrent.semaphore.operations;

import com.hazelcast.concurrent.semaphore.SemaphoreContainer;
import com.hazelcast.concurrent.semaphore.SemaphoreWaitNotifyKey;
import com.hazelcast.spi.Notifier;
import com.hazelcast.spi.Operation;
import com.hazelcast.spi.WaitNotifyKey;
import com.hazelcast.spi.impl.MutatingOperation;

public class ReleaseOperation extends SemaphoreBackupAwareOperation implements Notifier, MutatingOperation {
  public ReleaseOperation() {}
  
  public ReleaseOperation(String name, int permitCount) { super(name, permitCount); }
  
  public void run() {
    SemaphoreContainer semaphoreContainer = getSemaphoreContainer();
    semaphoreContainer.release(getCallerUuid(), this.permitCount);
    this.response = Boolean.valueOf(true);
  }
  
  public boolean shouldNotify() { return (this.permitCount > 0); }
  
  public WaitNotifyKey getNotifiedKey() { return new SemaphoreWaitNotifyKey(this.name, "acquire"); }
  
  public boolean shouldBackup() { return (this.permitCount > 0); }
  
  public Operation getBackupOperation() { return new ReleaseBackupOperation(this.name, this.permitCount, getCallerUuid()); }
  
  public int getId() { return 12; }
}
