package com.hazelcast.concurrent.countdownlatch.operations;

import com.hazelcast.concurrent.countdownlatch.CountDownLatchContainer;
import com.hazelcast.concurrent.countdownlatch.CountDownLatchDataSerializerHook;
import com.hazelcast.concurrent.countdownlatch.CountDownLatchService;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import com.hazelcast.spi.Operation;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;

public class CountDownLatchReplicationOperation extends Operation implements IdentifiedDataSerializable {
  private Collection<CountDownLatchContainer> data;
  
  public CountDownLatchReplicationOperation() {}
  
  public CountDownLatchReplicationOperation(Collection<CountDownLatchContainer> data) { this.data = data; }
  
  public void run() {
    if (this.data == null)
      return; 
    CountDownLatchService service = (CountDownLatchService)getService();
    for (CountDownLatchContainer container : this.data)
      service.add(container); 
  }
  
  public String getServiceName() { return "hz:impl:countDownLatchService"; }
  
  public int getFactoryId() { return CountDownLatchDataSerializerHook.F_ID; }
  
  public int getId() { return 3; }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    int len = (this.data != null) ? this.data.size() : 0;
    out.writeInt(len);
    if (len > 0)
      for (CountDownLatchContainer container : this.data)
        container.writeData(out);  
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    int len = in.readInt();
    if (len > 0) {
      this.data = new ArrayList(len);
      for (int i = 0; i < len; i++) {
        CountDownLatchContainer container = new CountDownLatchContainer();
        container.readData(in);
        this.data.add(container);
      } 
    } 
  }
}
