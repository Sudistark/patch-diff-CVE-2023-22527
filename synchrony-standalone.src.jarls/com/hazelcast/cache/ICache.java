package com.hazelcast.cache;

import com.hazelcast.cache.impl.event.CachePartitionLostListener;
import com.hazelcast.core.ICompletableFuture;
import com.hazelcast.core.PrefixedDistributedObject;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import javax.cache.Cache;
import javax.cache.expiry.ExpiryPolicy;

public interface ICache<K, V> extends Cache<K, V>, PrefixedDistributedObject {
  boolean setExpiryPolicy(K paramK, ExpiryPolicy paramExpiryPolicy);
  
  void setExpiryPolicy(Set<? extends K> paramSet, ExpiryPolicy paramExpiryPolicy);
  
  ICompletableFuture<V> getAsync(K paramK);
  
  ICompletableFuture<V> getAsync(K paramK, ExpiryPolicy paramExpiryPolicy);
  
  ICompletableFuture<Void> putAsync(K paramK, V paramV);
  
  ICompletableFuture<Void> putAsync(K paramK, V paramV, ExpiryPolicy paramExpiryPolicy);
  
  ICompletableFuture<Boolean> putIfAbsentAsync(K paramK, V paramV);
  
  ICompletableFuture<Boolean> putIfAbsentAsync(K paramK, V paramV, ExpiryPolicy paramExpiryPolicy);
  
  ICompletableFuture<V> getAndPutAsync(K paramK, V paramV);
  
  ICompletableFuture<V> getAndPutAsync(K paramK, V paramV, ExpiryPolicy paramExpiryPolicy);
  
  ICompletableFuture<Boolean> removeAsync(K paramK);
  
  ICompletableFuture<Boolean> removeAsync(K paramK, V paramV);
  
  ICompletableFuture<V> getAndRemoveAsync(K paramK);
  
  ICompletableFuture<Boolean> replaceAsync(K paramK, V paramV);
  
  ICompletableFuture<Boolean> replaceAsync(K paramK, V paramV, ExpiryPolicy paramExpiryPolicy);
  
  ICompletableFuture<Boolean> replaceAsync(K paramK, V paramV1, V paramV2);
  
  ICompletableFuture<Boolean> replaceAsync(K paramK, V paramV1, V paramV2, ExpiryPolicy paramExpiryPolicy);
  
  ICompletableFuture<V> getAndReplaceAsync(K paramK, V paramV);
  
  ICompletableFuture<V> getAndReplaceAsync(K paramK, V paramV, ExpiryPolicy paramExpiryPolicy);
  
  V get(K paramK, ExpiryPolicy paramExpiryPolicy);
  
  Map<K, V> getAll(Set<? extends K> paramSet, ExpiryPolicy paramExpiryPolicy);
  
  void put(K paramK, V paramV, ExpiryPolicy paramExpiryPolicy);
  
  V getAndPut(K paramK, V paramV, ExpiryPolicy paramExpiryPolicy);
  
  void putAll(Map<? extends K, ? extends V> paramMap, ExpiryPolicy paramExpiryPolicy);
  
  boolean putIfAbsent(K paramK, V paramV, ExpiryPolicy paramExpiryPolicy);
  
  boolean replace(K paramK, V paramV1, V paramV2, ExpiryPolicy paramExpiryPolicy);
  
  boolean replace(K paramK, V paramV, ExpiryPolicy paramExpiryPolicy);
  
  V getAndReplace(K paramK, V paramV, ExpiryPolicy paramExpiryPolicy);
  
  int size();
  
  void destroy();
  
  boolean isDestroyed();
  
  CacheStatistics getLocalCacheStatistics();
  
  String addPartitionLostListener(CachePartitionLostListener paramCachePartitionLostListener);
  
  boolean removePartitionLostListener(String paramString);
  
  Iterator<Cache.Entry<K, V>> iterator(int paramInt);
}
