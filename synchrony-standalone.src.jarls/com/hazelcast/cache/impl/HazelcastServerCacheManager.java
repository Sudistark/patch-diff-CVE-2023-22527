package com.hazelcast.cache.impl;

import com.hazelcast.cache.impl.merge.policy.CacheMergePolicyProvider;
import com.hazelcast.cache.impl.operation.CacheGetConfigOperation;
import com.hazelcast.cache.impl.operation.CacheManagementConfigOperation;
import com.hazelcast.config.CacheConfig;
import com.hazelcast.core.HazelcastInstance;
import com.hazelcast.core.Member;
import com.hazelcast.instance.HazelcastInstanceCacheManager;
import com.hazelcast.instance.HazelcastInstanceImpl;
import com.hazelcast.instance.HazelcastInstanceProxy;
import com.hazelcast.internal.config.ConfigValidator;
import com.hazelcast.internal.config.MergePolicyValidator;
import com.hazelcast.spi.InternalCompletableFuture;
import com.hazelcast.spi.NodeEngine;
import com.hazelcast.spi.OperationService;
import com.hazelcast.util.FutureUtil;
import com.hazelcast.util.Preconditions;
import java.net.URI;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Properties;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

public class HazelcastServerCacheManager extends AbstractHazelcastCacheManager {
  private final HazelcastInstanceImpl instance;
  
  private final NodeEngine nodeEngine;
  
  private final CacheService cacheService;
  
  public HazelcastServerCacheManager(HazelcastServerCachingProvider cachingProvider, HazelcastInstance hazelcastInstance, URI uri, ClassLoader classLoader, Properties properties) {
    super(cachingProvider, hazelcastInstance, uri, classLoader, properties);
    if (hazelcastInstance instanceof HazelcastInstanceProxy) {
      this.instance = ((HazelcastInstanceProxy)hazelcastInstance).getOriginal();
    } else {
      this.instance = (HazelcastInstanceImpl)hazelcastInstance;
    } 
    this.nodeEngine = this.instance.node.getNodeEngine();
    this.cacheService = (CacheService)this.nodeEngine.getService("hz:impl:cacheService");
  }
  
  public void enableManagement(String cacheName, boolean enabled) {
    ensureOpen();
    Preconditions.checkNotNull(cacheName, "cacheName cannot be null");
    String cacheNameWithPrefix = getCacheNameWithPrefix(cacheName);
    this.cacheService.setManagementEnabled(null, cacheNameWithPrefix, enabled);
    enableStatisticManagementOnOtherNodes(cacheName, false, enabled);
  }
  
  public void enableStatistics(String cacheName, boolean enabled) {
    ensureOpen();
    Preconditions.checkNotNull(cacheName, "cacheName cannot be null");
    String cacheNameWithPrefix = getCacheNameWithPrefix(cacheName);
    this.cacheService.setStatisticsEnabled(null, cacheNameWithPrefix, enabled);
    enableStatisticManagementOnOtherNodes(cacheName, true, enabled);
  }
  
  private void enableStatisticManagementOnOtherNodes(String cacheName, boolean statOrMan, boolean enabled) {
    String cacheNameWithPrefix = getCacheNameWithPrefix(cacheName);
    OperationService operationService = this.nodeEngine.getOperationService();
    Collection<Future> futures = new ArrayList<Future>();
    for (Member member : this.nodeEngine.getClusterService().getMembers()) {
      if (!member.localMember()) {
        CacheManagementConfigOperation op = new CacheManagementConfigOperation(cacheNameWithPrefix, statOrMan, enabled);
        InternalCompletableFuture internalCompletableFuture = operationService.invokeOnTarget("hz:impl:cacheService", op, member.getAddress());
        futures.add(internalCompletableFuture);
      } 
    } 
    FutureUtil.waitWithDeadline(futures, 60L, TimeUnit.SECONDS);
  }
  
  protected <K, V> void addCacheConfigIfAbsent(CacheConfig<K, V> cacheConfig) { this.cacheService.putCacheConfigIfAbsent(cacheConfig); }
  
  protected <K, V> CacheConfig<K, V> findCacheConfig(String cacheName, String simpleCacheName) {
    CacheConfig<K, V> config = this.cacheService.getCacheConfig(cacheName);
    if (config == null) {
      config = this.cacheService.findCacheConfig(simpleCacheName);
      if (config != null) {
        config.setManagerPrefix(cacheName.substring(0, cacheName.lastIndexOf(simpleCacheName)));
      } else {
        config = getCacheConfig(cacheName, simpleCacheName);
      } 
    } 
    if (config != null)
      createCacheConfig(cacheName, config); 
    return config;
  }
  
  protected <K, V> void createCacheConfig(String cacheName, CacheConfig<K, V> config) { this.cacheService.createCacheConfigOnAllMembers(PreJoinCacheConfig.of(config)); }
  
  protected <K, V> ICacheInternal<K, V> createCacheProxy(CacheConfig<K, V> cacheConfig) {
    HazelcastInstanceCacheManager cacheManager = this.instance.getCacheManager();
    CacheProxy<K, V> cacheProxy = (CacheProxy)cacheManager.getCacheByFullName(cacheConfig.getNameWithPrefix());
    cacheProxy.setCacheManager(this);
    return cacheProxy;
  }
  
  protected <K, V> CacheConfig<K, V> getCacheConfig(String cacheNameWithPrefix, String cacheName) {
    CacheGetConfigOperation op = new CacheGetConfigOperation(cacheNameWithPrefix, cacheName);
    int partitionId = this.nodeEngine.getPartitionService().getPartitionId(cacheNameWithPrefix);
    InternalCompletableFuture<CacheConfig<K, V>> f = this.nodeEngine.getOperationService().invokeOnPartition("hz:impl:cacheService", op, partitionId);
    return (CacheConfig)f.join();
  }
  
  protected void removeCacheConfigFromLocal(String cacheNameWithPrefix) {
    this.cacheService.deleteCacheConfig(cacheNameWithPrefix);
    super.removeCacheConfigFromLocal(cacheNameWithPrefix);
  }
  
  protected <K, V> void validateCacheConfig(CacheConfig<K, V> cacheConfig) {
    CacheMergePolicyProvider mergePolicyProvider = this.cacheService.getMergePolicyProvider();
    ConfigValidator.checkCacheConfig(cacheConfig, mergePolicyProvider);
    Object mergePolicy = mergePolicyProvider.getMergePolicy(cacheConfig.getMergePolicy());
    MergePolicyValidator.checkMergePolicySupportsInMemoryFormat(cacheConfig.getName(), mergePolicy, cacheConfig.getInMemoryFormat(), true, this.nodeEngine
        .getLogger(com.hazelcast.cache.HazelcastCacheManager.class));
  }
  
  public <T> T unwrap(Class<T> clazz) {
    if (HazelcastServerCacheManager.class.isAssignableFrom(clazz))
      return (T)this; 
    throw new IllegalArgumentException();
  }
  
  protected void postClose() {
    if (this.properties.getProperty("hazelcast.config.location") != null)
      this.hazelcastInstance.shutdown(); 
  }
  
  protected void onShuttingDown() { close(); }
  
  public ICacheService getCacheService() { return this.cacheService; }
}
