package com.hazelcast.cache.impl.operation;

import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.Operation;
import java.io.IOException;
import javax.cache.expiry.ExpiryPolicy;

public class CachePutOperation extends MutatingCacheOperation {
  private Data value;
  
  private boolean get;
  
  private ExpiryPolicy expiryPolicy;
  
  public CachePutOperation() {}
  
  public CachePutOperation(String cacheNameWithPrefix, Data key, Data value, ExpiryPolicy expiryPolicy, boolean get, int completionId) {
    super(cacheNameWithPrefix, key, completionId);
    this.value = value;
    this.expiryPolicy = expiryPolicy;
    this.get = get;
  }
  
  public void run() {
    if (this.get) {
      this.response = this.recordStore.getAndPut(this.key, this.value, this.expiryPolicy, getCallerUuid(), this.completionId);
      this.backupRecord = this.recordStore.getRecord(this.key);
    } else {
      this.backupRecord = this.recordStore.put(this.key, this.value, this.expiryPolicy, getCallerUuid(), this.completionId);
    } 
  }
  
  public void afterRun() {
    publishWanUpdate(this.key, this.backupRecord);
    super.afterRun();
  }
  
  public boolean shouldBackup() { return (this.backupRecord != null); }
  
  public Operation getBackupOperation() { return new CachePutBackupOperation(this.name, this.key, this.backupRecord); }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeBoolean(this.get);
    out.writeObject(this.expiryPolicy);
    out.writeData(this.value);
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    this.get = in.readBoolean();
    this.expiryPolicy = (ExpiryPolicy)in.readObject();
    this.value = in.readData();
  }
  
  public int getId() { return 3; }
}
