package com.hazelcast.cache.impl.operation;

import com.hazelcast.cache.impl.record.CacheRecord;
import com.hazelcast.instance.MemberImpl;
import com.hazelcast.internal.cluster.Versions;
import com.hazelcast.nio.Address;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.BackupAwareOperation;
import com.hazelcast.spi.Operation;
import com.hazelcast.spi.impl.MutatingOperation;
import com.hazelcast.spi.impl.operationservice.TargetAware;
import com.hazelcast.util.MapUtil;
import com.hazelcast.version.Version;
import java.io.IOException;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.cache.expiry.ExpiryPolicy;

public class CachePutAllOperation extends CacheOperation implements BackupAwareOperation, MutableOperation, MutatingOperation, TargetAware {
  private List<Map.Entry<Data, Data>> entries;
  
  private ExpiryPolicy expiryPolicy;
  
  private int completionId;
  
  private Map<Data, CacheRecord> backupRecords;
  
  private Address target;
  
  public CachePutAllOperation() {}
  
  public CachePutAllOperation(String cacheNameWithPrefix, List<Map.Entry<Data, Data>> entries, ExpiryPolicy expiryPolicy, int completionId) {
    super(cacheNameWithPrefix);
    this.entries = entries;
    this.expiryPolicy = expiryPolicy;
    this.completionId = completionId;
  }
  
  public int getCompletionId() { return this.completionId; }
  
  public void setCompletionId(int completionId) { this.completionId = completionId; }
  
  public void run() {
    String callerUuid = getCallerUuid();
    this.backupRecords = MapUtil.createHashMap(this.entries.size());
    for (Map.Entry<Data, Data> entry : this.entries) {
      Data key = (Data)entry.getKey();
      Data value = (Data)entry.getValue();
      CacheRecord backupRecord = this.recordStore.put(key, value, this.expiryPolicy, callerUuid, this.completionId);
      if (backupRecord != null) {
        this.backupRecords.put(key, backupRecord);
        publishWanUpdate(key, backupRecord);
      } 
    } 
  }
  
  public boolean shouldBackup() { return !this.backupRecords.isEmpty(); }
  
  public Operation getBackupOperation() { return new CachePutAllBackupOperation(this.name, this.backupRecords); }
  
  public int getId() { return 37; }
  
  public void setTarget(Address address) { this.target = address; }
  
  protected boolean requiresExplicitServiceName() {
    MemberImpl memberImpl = getNodeEngine().getClusterService().getMember(this.target);
    if (memberImpl == null)
      return false; 
    Version memberVersion = memberImpl.getVersion().asVersion();
    return memberVersion.isLessThan(Versions.V3_11);
  }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeObject(this.expiryPolicy);
    out.writeInt(this.completionId);
    out.writeInt(this.entries.size());
    for (Map.Entry<Data, Data> entry : this.entries) {
      out.writeData((Data)entry.getKey());
      out.writeData((Data)entry.getValue());
    } 
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    this.expiryPolicy = (ExpiryPolicy)in.readObject();
    this.completionId = in.readInt();
    int size = in.readInt();
    this.entries = new ArrayList(size);
    for (int i = 0; i < size; i++) {
      Data key = in.readData();
      Data value = in.readData();
      this.entries.add(new AbstractMap.SimpleImmutableEntry(key, value));
    } 
  }
}
