package com.hazelcast.cache.impl.operation;

import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.Operation;
import java.io.IOException;
import javax.cache.expiry.ExpiryPolicy;

public class CacheReplaceOperation extends MutatingCacheOperation {
  private Data newValue;
  
  private Data oldValue;
  
  private ExpiryPolicy expiryPolicy;
  
  public CacheReplaceOperation() {}
  
  public CacheReplaceOperation(String cacheNameWithPrefix, Data key, Data oldValue, Data newValue, ExpiryPolicy expiryPolicy, int completionId) {
    super(cacheNameWithPrefix, key, completionId);
    this.newValue = newValue;
    this.oldValue = oldValue;
    this.expiryPolicy = expiryPolicy;
  }
  
  public void run() {
    if (this.oldValue == null) {
      this.response = Boolean.valueOf(this.recordStore.replace(this.key, this.newValue, this.expiryPolicy, getCallerUuid(), this.completionId));
    } else {
      this.response = Boolean.valueOf(this.recordStore.replace(this.key, this.oldValue, this.newValue, this.expiryPolicy, getCallerUuid(), this.completionId));
    } 
    if (Boolean.TRUE.equals(this.response))
      this.backupRecord = this.recordStore.getRecord(this.key); 
  }
  
  public void afterRun() {
    if (Boolean.TRUE.equals(this.response))
      publishWanUpdate(this.key, this.backupRecord); 
    super.afterRun();
  }
  
  public boolean shouldBackup() { return (Boolean.TRUE.equals(this.response) && this.backupRecord != null); }
  
  public Operation getBackupOperation() { return new CachePutBackupOperation(this.name, this.key, this.backupRecord); }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeData(this.newValue);
    out.writeData(this.oldValue);
    out.writeObject(this.expiryPolicy);
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    this.newValue = in.readData();
    this.oldValue = in.readData();
    this.expiryPolicy = (ExpiryPolicy)in.readObject();
  }
  
  public int getId() { return 7; }
}
