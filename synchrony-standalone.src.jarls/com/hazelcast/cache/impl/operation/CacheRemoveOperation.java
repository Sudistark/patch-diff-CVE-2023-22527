package com.hazelcast.cache.impl.operation;

import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.Operation;
import java.io.IOException;

public class CacheRemoveOperation extends MutatingCacheOperation {
  private Data oldValue;
  
  public CacheRemoveOperation() {}
  
  public CacheRemoveOperation(String cacheNameWithPrefix, Data key, Data oldValue, int completionId) {
    super(cacheNameWithPrefix, key, completionId);
    this.oldValue = oldValue;
  }
  
  public void run() {
    if (this.oldValue == null) {
      this.response = Boolean.valueOf(this.recordStore.remove(this.key, getCallerUuid(), null, this.completionId));
    } else {
      this.response = Boolean.valueOf(this.recordStore.remove(this.key, this.oldValue, getCallerUuid(), null, this.completionId));
    } 
  }
  
  public void afterRun() {
    if (Boolean.TRUE.equals(this.response))
      publishWanRemove(this.key); 
    super.afterRun();
  }
  
  public boolean shouldBackup() { return Boolean.TRUE.equals(this.response); }
  
  public Operation getBackupOperation() { return new CacheRemoveBackupOperation(this.name, this.key); }
  
  public int getId() { return 5; }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeData(this.oldValue);
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    this.oldValue = in.readData();
  }
}
