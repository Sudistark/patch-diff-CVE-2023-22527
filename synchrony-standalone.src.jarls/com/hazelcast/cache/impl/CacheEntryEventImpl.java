package com.hazelcast.cache.impl;

import com.hazelcast.cache.ICache;
import javax.cache.event.CacheEntryEvent;
import javax.cache.event.EventType;

public class CacheEntryEventImpl<K, V> extends CacheEntryEvent<K, V> {
  private final K key;
  
  private final V newValue;
  
  private final V oldValue;
  
  public CacheEntryEventImpl(ICache<K, V> source, EventType eventType, K key, V newValue, V oldValue) {
    super(source, eventType);
    this.key = key;
    this.newValue = newValue;
    this.oldValue = oldValue;
  }
  
  public V getOldValue() { return (V)this.oldValue; }
  
  public boolean isOldValueAvailable() { return (this.oldValue != null); }
  
  public K getKey() { return (K)this.key; }
  
  public V getValue() { return (V)this.newValue; }
  
  public <T> T unwrap(Class<T> clazz) {
    if (clazz.isAssignableFrom(getClass()))
      return (T)clazz.cast(this); 
    throw new IllegalArgumentException("Unwrapping to " + clazz + " is not supported by this implementation");
  }
  
  public String toString() {
    return "CacheEntryEventImpl{eventType=" + 
      getEventType() + ", key=" + this.key + ", newValue=" + this.newValue + ", oldValue=" + this.oldValue + ", source=" + 


      
      getSource() + '}';
  }
}
