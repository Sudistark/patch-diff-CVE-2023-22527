package com.hazelcast.cache.impl.record;

import com.hazelcast.config.InMemoryFormat;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.serialization.SerializationService;

public class CacheRecordFactory<R extends CacheRecord> extends Object {
  protected InMemoryFormat inMemoryFormat;
  
  protected SerializationService serializationService;
  
  public CacheRecordFactory(InMemoryFormat inMemoryFormat, SerializationService serializationService) {
    this.inMemoryFormat = inMemoryFormat;
    this.serializationService = serializationService;
  }
  
  public R newRecordWithExpiry(Object value, long creationTime, long expiryTime) {
    Object objectValue;
    Data dataValue;
    R record;
    switch (null.$SwitchMap$com$hazelcast$config$InMemoryFormat[this.inMemoryFormat.ordinal()]) {
      case 1:
        dataValue = this.serializationService.toData(value);
        return (R)createCacheDataRecord(dataValue, creationTime, expiryTime);
      case 2:
        objectValue = this.serializationService.toObject(value);
        return (R)createCacheObjectRecord(objectValue, creationTime, expiryTime);
      case 3:
        throw new IllegalArgumentException("Native storage format is supported in Hazelcast Enterprise only. Make sure you have Hazelcast Enterprise JARs on your classpath!");
    } 
    throw new IllegalArgumentException("Invalid storage format: " + this.inMemoryFormat);
  }
  
  protected CacheRecord createCacheDataRecord(Data dataValue, long creationTime, long expiryTime) { return new CacheDataRecord(dataValue, creationTime, expiryTime); }
  
  protected CacheRecord createCacheObjectRecord(Object objectValue, long creationTime, long expiryTime) { return new CacheObjectRecord(objectValue, creationTime, expiryTime); }
  
  public static boolean isExpiredAt(long expirationTime, long now) { return (expirationTime > -1L && expirationTime <= now); }
}
