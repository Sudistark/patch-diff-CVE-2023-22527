package com.hazelcast.cache.impl.journal;

import com.hazelcast.cache.impl.CacheDataSerializerHook;
import com.hazelcast.cache.journal.EventJournalCacheEvent;
import com.hazelcast.ringbuffer.impl.ReadResultSetImpl;
import com.hazelcast.spi.serialization.SerializationService;
import com.hazelcast.util.function.Function;
import com.hazelcast.util.function.Predicate;

public class CacheEventJournalReadResultSetImpl<K, V, T> extends ReadResultSetImpl<InternalEventJournalCacheEvent, T> {
  public CacheEventJournalReadResultSetImpl() {}
  
  CacheEventJournalReadResultSetImpl(int minSize, int maxSize, SerializationService serializationService, Predicate<? super EventJournalCacheEvent<K, V>> predicate, Function<? super EventJournalCacheEvent<K, V>, ? extends T> projection) { super(minSize, maxSize, serializationService, (predicate == null) ? null : new Object(predicate), (projection == null) ? null : new ProjectionAdapter(projection)); }
  
  public void addItem(long seq, Object item) {
    InternalEventJournalCacheEvent e = (InternalEventJournalCacheEvent)item;
    DeserializingEventJournalCacheEvent<K, V> deserialisingEvent = new DeserializingEventJournalCacheEvent<K, V>(this.serializationService, e);
    super.addItem(seq, deserialisingEvent);
  }
  
  public int getFactoryId() { return CacheDataSerializerHook.F_ID; }
  
  public int getId() { return 60; }
}
