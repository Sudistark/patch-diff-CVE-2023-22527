package com.hazelcast.cache.impl;

import com.hazelcast.config.AbstractCacheConfig;
import com.hazelcast.config.CacheConfig;
import com.hazelcast.config.CacheConfigAccessor;
import com.hazelcast.internal.cluster.Versions;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import com.hazelcast.nio.serialization.impl.Versioned;
import com.hazelcast.spi.serialization.SerializationService;
import com.hazelcast.spi.tenantcontrol.TenantControl;
import java.io.IOException;
import javax.cache.configuration.CacheEntryListenerConfiguration;

public class PreJoinCacheConfig<K, V> extends CacheConfig<K, V> implements Versioned, IdentifiedDataSerializable {
  public PreJoinCacheConfig() {}
  
  public PreJoinCacheConfig(CacheConfig cacheConfig) { this(cacheConfig, true); }
  
  public PreJoinCacheConfig(CacheConfig cacheConfig, boolean resolved) { cacheConfig.copy(this, resolved); }
  
  protected void writeKeyValueTypes(ObjectDataOutput out) throws IOException {
    out.writeUTF(getKeyClassName());
    out.writeUTF(getValueClassName());
  }
  
  protected void readKeyValueTypes(ObjectDataInput in) throws IOException {
    setKeyClassName(in.readUTF());
    setValueClassName(in.readUTF());
  }
  
  protected void writeTenant(ObjectDataOutput out) throws IOException {
    if (out.getVersion().isGreaterOrEqual(Versions.V3_12))
      out.writeObject(CacheConfigAccessor.getTenantControl(this)); 
  }
  
  protected void readTenant(ObjectDataInput in) throws IOException {
    if (in.getVersion().isGreaterOrEqual(Versions.V3_12)) {
      TenantControl tc = (TenantControl)in.readObject();
      CacheConfigAccessor.setTenantControl(this, tc);
    } 
  }
  
  protected void writeFactories(ObjectDataOutput out) throws IOException {
    SerializationService serializationService = out.getSerializationService();
    out.writeData(this.cacheLoaderFactory.getSerializedValue(serializationService));
    out.writeData(this.cacheWriterFactory.getSerializedValue(serializationService));
    out.writeData(this.expiryPolicyFactory.getSerializedValue(serializationService));
  }
  
  protected void readFactories(ObjectDataInput in) throws IOException {
    this.cacheLoaderFactory = DeferredValue.withSerializedValue(in.readData());
    this.cacheWriterFactory = DeferredValue.withSerializedValue(in.readData());
    this.expiryPolicyFactory = DeferredValue.withSerializedValue(in.readData());
  }
  
  protected void writeListenerConfigurations(ObjectDataOutput out) throws IOException {
    out.writeInt(this.listenerConfigurations.size());
    for (DeferredValue<CacheEntryListenerConfiguration<K, V>> config : this.listenerConfigurations)
      out.writeData(config.getSerializedValue(out.getSerializationService())); 
  }
  
  protected void readListenerConfigurations(ObjectDataInput in) throws IOException {
    int size = in.readInt();
    this.listenerConfigurations = createConcurrentSet();
    for (int i = 0; i < size; i++) {
      DeferredValue<CacheEntryListenerConfiguration<K, V>> serializedConfig = DeferredValue.withSerializedValue(in.readData());
      this.listenerConfigurations.add(serializedConfig);
    } 
  }
  
  public int getFactoryId() { return CacheDataSerializerHook.F_ID; }
  
  public int getId() { return 61; }
  
  CacheConfig asCacheConfig() { return copy(new CacheConfig(), false); }
  
  protected boolean keyValueTypesEqual(AbstractCacheConfig that) {
    if (!getKeyClassName().equals(that.getKeyClassName()))
      return false; 
    if (!getValueClassName().equals(that.getValueClassName()))
      return false; 
    return true;
  }
  
  public static CacheConfig asCacheConfig(CacheConfig cacheConfig) {
    if (!(cacheConfig instanceof PreJoinCacheConfig))
      return cacheConfig; 
    return ((PreJoinCacheConfig)cacheConfig).asCacheConfig();
  }
  
  public static PreJoinCacheConfig of(CacheConfig cacheConfig) {
    if (cacheConfig instanceof PreJoinCacheConfig)
      return (PreJoinCacheConfig)cacheConfig; 
    return new PreJoinCacheConfig(cacheConfig, false);
  }
}
