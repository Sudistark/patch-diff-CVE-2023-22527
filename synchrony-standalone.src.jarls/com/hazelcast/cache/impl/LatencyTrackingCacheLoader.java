package com.hazelcast.cache.impl;

import com.hazelcast.internal.diagnostics.StoreLatencyPlugin;
import java.util.Map;
import javax.cache.integration.CacheLoader;
import javax.cache.integration.CacheLoaderException;

public class LatencyTrackingCacheLoader<K, V> extends Object implements CacheLoader<K, V> {
  static final String KEY = "CacheLoaderLatency";
  
  private final CacheLoader<K, V> delegate;
  
  private final StoreLatencyPlugin.LatencyProbe loadProbe;
  
  private final StoreLatencyPlugin.LatencyProbe loadAllProbe;
  
  public LatencyTrackingCacheLoader(CacheLoader<K, V> delegate, StoreLatencyPlugin plugin, String cacheName) {
    this.delegate = delegate;
    this.loadProbe = plugin.newProbe("CacheLoaderLatency", cacheName, "load");
    this.loadAllProbe = plugin.newProbe("CacheLoaderLatency", cacheName, "loadAll");
  }
  
  public V load(K k) throws CacheLoaderException {
    startNanos = System.nanoTime();
    try {
      object = this.delegate.load(k);
      return (V)object;
    } finally {
      this.loadProbe.recordValue(System.nanoTime() - startNanos);
    } 
  }
  
  public Map<K, V> loadAll(Iterable<? extends K> iterable) throws CacheLoaderException {
    startNanos = System.nanoTime();
    try {
      return this.delegate.loadAll(iterable);
    } finally {
      this.loadAllProbe.recordValue(System.nanoTime() - startNanos);
    } 
  }
}
