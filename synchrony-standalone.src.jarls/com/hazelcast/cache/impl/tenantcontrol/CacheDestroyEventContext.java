package com.hazelcast.cache.impl.tenantcontrol;

import com.hazelcast.cache.impl.CacheDataSerializerHook;
import com.hazelcast.cache.impl.CacheProxy;
import com.hazelcast.cache.impl.CacheService;
import com.hazelcast.config.CacheConfig;
import com.hazelcast.config.CacheConfigAccessor;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import com.hazelcast.spi.tenantcontrol.DestroyEventContext;
import com.hazelcast.spi.tenantcontrol.TenantControl;
import java.io.IOException;
import javax.cache.Cache;

public class CacheDestroyEventContext extends Object implements DestroyEventContext<Cache>, IdentifiedDataSerializable {
  private String cacheName;
  
  public CacheDestroyEventContext() {}
  
  public CacheDestroyEventContext(String cacheName) { this.cacheName = cacheName; }
  
  public void destroy(Cache context) {
    if (context instanceof CacheProxy) {
      CacheProxy cache = (CacheProxy)context;
      CacheService cacheService = (CacheService)cache.getService();
      CacheConfig cacheConfig = cacheService.getCacheConfig(cache.getPrefixedName());
      CacheConfigAccessor.setTenantControl(cacheConfig, TenantControl.NOOP_TENANT_CONTROL);
    } 
  }
  
  public Class<? extends Cache> getContextType() { return Cache.class; }
  
  public int getFactoryId() { return CacheDataSerializerHook.F_ID; }
  
  public int getId() { return 70; }
  
  public void writeData(ObjectDataOutput out) throws IOException { out.writeUTF(this.cacheName); }
  
  public void readData(ObjectDataInput in) throws IOException { this.cacheName = in.readUTF(); }
  
  public String getDistributedObjectName() { return this.cacheName; }
  
  public String getServiceName() { return "hz:impl:cacheService"; }
}
