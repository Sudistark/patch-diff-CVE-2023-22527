package com.hazelcast.mapreduce.impl.operation;

import com.hazelcast.mapreduce.impl.MapReduceDataSerializerHook;
import com.hazelcast.mapreduce.impl.MapReduceService;
import com.hazelcast.mapreduce.impl.task.JobSupervisor;
import com.hazelcast.mapreduce.impl.task.MemberAssigningJobProcessInformationImpl;

public class RequestMemberIdAssignment extends ProcessingOperation {
  public RequestMemberIdAssignment() {}
  
  public RequestMemberIdAssignment(String name, String jobId) { super(name, jobId); }
  
  public Object getResponse() { return this.result; }
  
  public void run() {
    MapReduceService mapReduceService = (MapReduceService)getService();
    JobSupervisor supervisor = mapReduceService.getJobSupervisor(getName(), getJobId());
    if (supervisor == null) {
      this.result = new RequestPartitionResult(RequestPartitionResult.ResultState.NO_SUPERVISOR, -1);
      return;
    } 
    MemberAssigningJobProcessInformationImpl processInformation = getProcessInformation(supervisor);
    int memberId = processInformation.assignMemberId(getCallerAddress(), getCallerUuid(), supervisor.getConfiguration());
    if (memberId == -1) {
      this.result = new RequestPartitionResult(RequestPartitionResult.ResultState.NO_MORE_PARTITIONS, -1);
      return;
    } 
    this.result = new RequestPartitionResult(RequestPartitionResult.ResultState.SUCCESSFUL, memberId);
  }
  
  public int getFactoryId() { return MapReduceDataSerializerHook.F_ID; }
  
  public int getId() { return 13; }
  
  private MemberAssigningJobProcessInformationImpl getProcessInformation(JobSupervisor supervisor) { return (MemberAssigningJobProcessInformationImpl)supervisor.getJobProcessInformation(); }
}
