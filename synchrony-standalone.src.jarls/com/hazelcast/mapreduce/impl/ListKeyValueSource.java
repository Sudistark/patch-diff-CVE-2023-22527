package com.hazelcast.mapreduce.impl;

import com.hazelcast.collection.impl.collection.CollectionItem;
import com.hazelcast.collection.impl.list.ListContainer;
import com.hazelcast.collection.impl.list.ListService;
import com.hazelcast.internal.partition.InternalPartitionService;
import com.hazelcast.mapreduce.KeyValueSource;
import com.hazelcast.nio.Address;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.BinaryInterface;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import com.hazelcast.partition.strategy.StringAndPartitionAwarePartitioningStrategy;
import com.hazelcast.spi.NodeEngine;
import com.hazelcast.spi.impl.NodeEngineImpl;
import com.hazelcast.spi.serialization.SerializationService;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

@BinaryInterface
public class ListKeyValueSource<V> extends KeyValueSource<String, V> implements IdentifiedDataSerializable {
  private final MapReduceSimpleEntry<String, V> simpleEntry = new MapReduceSimpleEntry();
  
  private String listName;
  
  private SerializationService ss;
  
  private Iterator<CollectionItem> iterator;
  
  private CollectionItem nextElement;
  
  public ListKeyValueSource(String listName) { this.listName = listName; }
  
  public String getListName() { return this.listName; }
  
  public boolean open(NodeEngine nodeEngine) {
    NodeEngineImpl nei = (NodeEngineImpl)nodeEngine;
    this.ss = nei.getSerializationService();
    Address thisAddress = nei.getThisAddress();
    InternalPartitionService internalPartitionService = nei.getPartitionService();
    Data data = this.ss.toData(this.listName, StringAndPartitionAwarePartitioningStrategy.INSTANCE);
    int partitionId = internalPartitionService.getPartitionId(data);
    Address partitionOwner = internalPartitionService.getPartitionOwner(partitionId);
    if (partitionOwner == null)
      return false; 
    if (thisAddress.equals(partitionOwner)) {
      ListService listService = (ListService)nei.getService("hz:impl:listService");
      ListContainer listContainer = listService.getOrCreateContainer(this.listName, false);
      List<CollectionItem> items = new ArrayList<CollectionItem>(listContainer.getCollection());
      this.iterator = items.iterator();
    } 
    return true;
  }
  
  public boolean hasNext() {
    boolean hasNext = (this.iterator == null) ? false : this.iterator.hasNext();
    this.nextElement = hasNext ? (CollectionItem)this.iterator.next() : null;
    return hasNext;
  }
  
  public String key() { return this.listName; }
  
  public Map.Entry<String, V> element() {
    Object value = this.nextElement.getValue();
    if (value != null)
      value = this.ss.toObject(value); 
    this.simpleEntry.setKey(this.listName);
    this.simpleEntry.setValue(value);
    return this.simpleEntry;
  }
  
  public boolean reset() {
    this.iterator = null;
    this.nextElement = null;
    return true;
  }
  
  public void close() {
    this.iterator = null;
    this.nextElement = null;
  }
  
  public void writeData(ObjectDataOutput out) throws IOException { out.writeUTF(this.listName); }
  
  public void readData(ObjectDataInput in) throws IOException { this.listName = in.readUTF(); }
  
  public int getFactoryId() { return MapReduceDataSerializerHook.F_ID; }
  
  public int getId() { return 18; }
  
  public ListKeyValueSource() {}
}
