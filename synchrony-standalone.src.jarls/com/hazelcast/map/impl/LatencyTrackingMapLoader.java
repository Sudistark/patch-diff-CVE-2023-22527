package com.hazelcast.map.impl;

import com.hazelcast.core.MapLoader;
import com.hazelcast.internal.diagnostics.StoreLatencyPlugin;
import java.util.Collection;
import java.util.Map;

public class LatencyTrackingMapLoader<K, V> extends Object implements MapLoader<K, V> {
  static final String KEY = "MapStoreLatency";
  
  private final StoreLatencyPlugin.LatencyProbe loadProbe;
  
  private final StoreLatencyPlugin.LatencyProbe loadAllKeysProbe;
  
  private final StoreLatencyPlugin.LatencyProbe loadAllProbe;
  
  private final MapLoader<K, V> delegate;
  
  public LatencyTrackingMapLoader(MapLoader<K, V> delegate, StoreLatencyPlugin plugin, String mapName) {
    this.delegate = delegate;
    this.loadProbe = plugin.newProbe("MapStoreLatency", mapName, "load");
    this.loadAllProbe = plugin.newProbe("MapStoreLatency", mapName, "loadAll");
    this.loadAllKeysProbe = plugin.newProbe("MapStoreLatency", mapName, "loadAllKeys");
  }
  
  public V load(K key) {
    startNanos = System.nanoTime();
    try {
      object = this.delegate.load(key);
      return (V)object;
    } finally {
      this.loadProbe.recordValue(System.nanoTime() - startNanos);
    } 
  }
  
  public Map<K, V> loadAll(Collection<K> keys) {
    startNanos = System.nanoTime();
    try {
      return this.delegate.loadAll(keys);
    } finally {
      this.loadAllProbe.recordValue(System.nanoTime() - startNanos);
    } 
  }
  
  public Iterable<K> loadAllKeys() {
    startNanos = System.nanoTime();
    try {
      return this.delegate.loadAllKeys();
    } finally {
      this.loadAllKeysProbe.recordValue(System.nanoTime() - startNanos);
    } 
  }
}
