package com.hazelcast.map.impl.mapstore.writebehind;

import com.hazelcast.map.impl.mapstore.writebehind.entry.DelayedEntry;
import java.util.concurrent.atomic.AtomicInteger;

public final class WriteBehindQueues {
  public static WriteBehindQueue<DelayedEntry> createBoundedWriteBehindQueue(int maxCapacity, AtomicInteger counter) {
    WriteBehindQueue<DelayedEntry> queue = createCyclicWriteBehindQueue();
    WriteBehindQueue<DelayedEntry> boundedQueue = createBoundedWriteBehindQueue(maxCapacity, counter, queue);
    return createSynchronizedWriteBehindQueue(boundedQueue);
  }
  
  public static WriteBehindQueue<DelayedEntry> createDefaultWriteBehindQueue() {
    queue = createCoalescedWriteBehindQueue();
    return createSynchronizedWriteBehindQueue(queue);
  }
  
  private static <T> WriteBehindQueue<T> createSynchronizedWriteBehindQueue(WriteBehindQueue<T> queue) { return new SynchronizedWriteBehindQueue(queue); }
  
  private static WriteBehindQueue<DelayedEntry> createCoalescedWriteBehindQueue() { return new CoalescedWriteBehindQueue(); }
  
  private static WriteBehindQueue<DelayedEntry> createCyclicWriteBehindQueue() { return new CyclicWriteBehindQueue(); }
  
  private static <T> WriteBehindQueue<T> createBoundedWriteBehindQueue(int maxCapacity, AtomicInteger counter, WriteBehindQueue<T> queue) { return new BoundedWriteBehindQueue(maxCapacity, counter, queue); }
}
