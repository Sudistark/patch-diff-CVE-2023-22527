package com.hazelcast.map.impl.mapstore.writebehind;

import com.hazelcast.config.MapStoreConfig;
import com.hazelcast.core.MapStore;
import com.hazelcast.logging.ILogger;
import com.hazelcast.map.impl.mapstore.MapStoreContext;
import com.hazelcast.spi.serialization.SerializationService;
import java.util.List;

abstract class AbstractWriteBehindProcessor<T> extends Object implements WriteBehindProcessor<T> {
  protected final int writeBatchSize;
  
  protected final boolean writeCoalescing;
  
  protected final ILogger logger;
  
  protected final MapStore mapStore;
  
  private final SerializationService serializationService;
  
  AbstractWriteBehindProcessor(MapStoreContext mapStoreContext) {
    this.serializationService = mapStoreContext.getSerializationService();
    this.mapStore = mapStoreContext.getMapStoreWrapper();
    this.logger = mapStoreContext.getLogger(DefaultWriteBehindProcessor.class);
    MapStoreConfig mapStoreConfig = mapStoreContext.getMapStoreConfig();
    this.writeBatchSize = mapStoreConfig.getWriteBatchSize();
    this.writeCoalescing = mapStoreConfig.isWriteCoalescing();
  }
  
  protected Object toObject(Object obj) { return this.serializationService.toObject(obj); }
  
  protected List<T> getBatchChunk(List<T> list, int batchSize, int chunkNumber) {
    if (list == null || list.isEmpty())
      return null; 
    int start = chunkNumber * batchSize;
    int end = Math.min(start + batchSize, list.size());
    if (start >= end)
      return null; 
    return list.subList(start, end);
  }
}
