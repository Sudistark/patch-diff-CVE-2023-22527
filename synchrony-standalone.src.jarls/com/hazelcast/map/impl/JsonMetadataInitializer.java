package com.hazelcast.map.impl;

import com.hazelcast.com.fasterxml.jackson.core.JsonFactory;
import com.hazelcast.com.fasterxml.jackson.core.JsonParser;
import com.hazelcast.json.internal.JsonSchemaHelper;
import com.hazelcast.nio.serialization.Data;
import java.io.ByteArrayInputStream;
import java.io.IOException;

public class JsonMetadataInitializer implements MetadataInitializer {
  public static final JsonMetadataInitializer INSTANCE = new JsonMetadataInitializer();
  
  private static final int UTF_CHAR_COUNT_FIELD_SIZE = 4;
  
  private static final JsonFactory FACTORY = new JsonFactory();
  
  public Object createFromData(Data data) throws IOException {
    if (data.isJson()) {
      parser = FACTORY.createParser(new ByteArrayInputStream(data.toByteArray(), 12, data
            .dataSize() - 4));
      try {
        return JsonSchemaHelper.createSchema(parser);
      } finally {
        parser.close();
      } 
    } 
    return null;
  }
  
  public Object createFromObject(Object obj) throws IOException {
    if (obj instanceof com.hazelcast.core.HazelcastJsonValue) {
      String str = obj.toString();
      parser = FACTORY.createParser(str);
      try {
        return JsonSchemaHelper.createSchema(parser);
      } finally {
        parser.close();
      } 
    } 
    return null;
  }
}
