package com.hazelcast.map.impl.query;

import com.hazelcast.aggregation.Aggregator;
import com.hazelcast.map.impl.MapDataSerializerHook;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.query.PagingPredicate;
import com.hazelcast.query.impl.QueryableEntry;
import com.hazelcast.spi.serialization.SerializationService;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Map;

public class AggregationResult extends Object implements Result<AggregationResult> {
  private Aggregator aggregator;
  
  private Collection<Integer> partitionIds;
  
  private final SerializationService serializationService;
  
  public AggregationResult() { this.serializationService = null; }
  
  public AggregationResult(Aggregator aggregator, SerializationService serializationService) {
    this.aggregator = aggregator;
    this.serializationService = serializationService;
  }
  
  public <R> Aggregator<?, R> getAggregator() { return this.aggregator; }
  
  public Collection<Integer> getPartitionIds() { return this.partitionIds; }
  
  public void combine(AggregationResult result) {
    Collection<Integer> otherPartitionIds = result.getPartitionIds();
    if (otherPartitionIds == null)
      return; 
    if (this.partitionIds == null)
      this.partitionIds = new ArrayList(otherPartitionIds.size()); 
    this.partitionIds.addAll(otherPartitionIds);
    this.aggregator.combine(result.aggregator);
  }
  
  public void onCombineFinished() {
    if (this.aggregator != null)
      this.aggregator.onCombinationFinished(); 
  }
  
  public void add(QueryableEntry entry) { this.aggregator.accumulate(entry); }
  
  public AggregationResult createSubResult() {
    Aggregator aggregatorClone = (Aggregator)this.serializationService.toObject(this.serializationService.toData(this.aggregator));
    return new AggregationResult(aggregatorClone, this.serializationService);
  }
  
  public void orderAndLimit(PagingPredicate pagingPredicate, Map.Entry<Integer, Map.Entry> nearestAnchorEntry) {}
  
  public void completeConstruction(Collection<Integer> partitionIds) { setPartitionIds(partitionIds); }
  
  public void setPartitionIds(Collection<Integer> partitionIds) { this.partitionIds = new ArrayList(partitionIds); }
  
  public int getFactoryId() { return MapDataSerializerHook.F_ID; }
  
  public int getId() { return 115; }
  
  public void writeData(ObjectDataOutput out) throws IOException {
    int partitionSize = (this.partitionIds == null) ? 0 : this.partitionIds.size();
    out.writeInt(partitionSize);
    if (partitionSize > 0)
      for (Integer partitionId : this.partitionIds)
        out.writeInt(partitionId.intValue());  
    out.writeObject(this.aggregator);
  }
  
  public void readData(ObjectDataInput in) throws IOException {
    int partitionSize = in.readInt();
    if (partitionSize > 0) {
      this.partitionIds = new ArrayList(partitionSize);
      for (int i = 0; i < partitionSize; i++)
        this.partitionIds.add(Integer.valueOf(in.readInt())); 
    } 
    this.aggregator = (Aggregator)in.readObject();
  }
}
