package com.hazelcast.map.impl.journal;

import com.hazelcast.map.impl.MapDataSerializerHook;
import com.hazelcast.map.journal.EventJournalMapEvent;
import com.hazelcast.ringbuffer.impl.ReadResultSetImpl;
import com.hazelcast.spi.serialization.SerializationService;
import com.hazelcast.util.function.Function;
import com.hazelcast.util.function.Predicate;

public class MapEventJournalReadResultSetImpl<K, V, T> extends ReadResultSetImpl<InternalEventJournalMapEvent, T> {
  public MapEventJournalReadResultSetImpl() {}
  
  MapEventJournalReadResultSetImpl(int minSize, int maxSize, SerializationService serializationService, Predicate<? super EventJournalMapEvent<K, V>> predicate, Function<? super EventJournalMapEvent<K, V>, ? extends T> projection) { super(minSize, maxSize, serializationService, (predicate == null) ? null : new Object(predicate), (projection == null) ? null : new ProjectionAdapter(projection)); }
  
  public void addItem(long seq, Object item) {
    InternalEventJournalMapEvent e = (InternalEventJournalMapEvent)item;
    DeserializingEventJournalMapEvent<K, V> deserialisingEvent = new DeserializingEventJournalMapEvent<K, V>(this.serializationService, e);
    super.addItem(seq, deserialisingEvent);
  }
  
  public int getFactoryId() { return MapDataSerializerHook.F_ID; }
  
  public int getId() { return 145; }
}
