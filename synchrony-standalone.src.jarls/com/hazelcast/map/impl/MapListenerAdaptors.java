package com.hazelcast.map.impl;

import com.hazelcast.core.EntryEventType;
import com.hazelcast.map.listener.MapListener;
import com.hazelcast.util.ConstructorFunction;
import java.util.EnumMap;
import java.util.Map;

public final class MapListenerAdaptors {
  private static final Map<EntryEventType, ConstructorFunction<MapListener, ListenerAdapter>> CONSTRUCTORS = new EnumMap(EntryEventType.class);
  
  private static final ConstructorFunction<MapListener, ListenerAdapter> ENTRY_ADDED_LISTENER_ADAPTER_CONSTRUCTOR = new Object();
  
  private static final ConstructorFunction<MapListener, ListenerAdapter> ENTRY_REMOVED_LISTENER_ADAPTER_CONSTRUCTOR = new Object();
  
  private static final ConstructorFunction<MapListener, ListenerAdapter> ENTRY_EVICTED_LISTENER_ADAPTER_CONSTRUCTOR = new Object();
  
  private static final ConstructorFunction<MapListener, ListenerAdapter> ENTRY_UPDATED_LISTENER_ADAPTER_CONSTRUCTOR = new Object();
  
  private static final ConstructorFunction<MapListener, ListenerAdapter> MAP_EVICTED_LISTENER_ADAPTER_CONSTRUCTOR = new Object();
  
  private static final ConstructorFunction<MapListener, ListenerAdapter> MAP_CLEARED_LISTENER_ADAPTER_CONSTRUCTOR = new Object();
  
  private static final ConstructorFunction<MapListener, ListenerAdapter> ENTRY_MERGED_LISTENER_ADAPTER_CONSTRUCTOR = new Object();
  
  private static final ConstructorFunction<MapListener, ListenerAdapter> INVALIDATION_LISTENER = new Object();
  
  private static final ConstructorFunction<MapListener, ListenerAdapter> ENTRY_EXPIRED_LISTENER_ADAPTER_CONSTRUCTOR = new Object();
  
  private static final ConstructorFunction<MapListener, ListenerAdapter> ENTRY_LOADED_LISTENER_ADAPTER_CONSTRUCTOR = new Object();
  
  static  {
    CONSTRUCTORS.put(EntryEventType.ADDED, ENTRY_ADDED_LISTENER_ADAPTER_CONSTRUCTOR);
    CONSTRUCTORS.put(EntryEventType.LOADED, ENTRY_LOADED_LISTENER_ADAPTER_CONSTRUCTOR);
    CONSTRUCTORS.put(EntryEventType.REMOVED, ENTRY_REMOVED_LISTENER_ADAPTER_CONSTRUCTOR);
    CONSTRUCTORS.put(EntryEventType.EVICTED, ENTRY_EVICTED_LISTENER_ADAPTER_CONSTRUCTOR);
    CONSTRUCTORS.put(EntryEventType.UPDATED, ENTRY_UPDATED_LISTENER_ADAPTER_CONSTRUCTOR);
    CONSTRUCTORS.put(EntryEventType.MERGED, ENTRY_MERGED_LISTENER_ADAPTER_CONSTRUCTOR);
    CONSTRUCTORS.put(EntryEventType.EXPIRED, ENTRY_EXPIRED_LISTENER_ADAPTER_CONSTRUCTOR);
    CONSTRUCTORS.put(EntryEventType.EVICT_ALL, MAP_EVICTED_LISTENER_ADAPTER_CONSTRUCTOR);
    CONSTRUCTORS.put(EntryEventType.CLEAR_ALL, MAP_CLEARED_LISTENER_ADAPTER_CONSTRUCTOR);
    CONSTRUCTORS.put(EntryEventType.INVALIDATION, INVALIDATION_LISTENER);
  }
  
  public static ListenerAdapter[] createListenerAdapters(MapListener mapListener) {
    EntryEventType[] values = EntryEventType.values();
    ListenerAdapter[] listenerAdapters = new ListenerAdapter[values.length];
    for (EntryEventType eventType : values)
      listenerAdapters[eventType.ordinal()] = createListenerAdapter(eventType, mapListener); 
    return listenerAdapters;
  }
  
  private static ListenerAdapter createListenerAdapter(EntryEventType eventType, MapListener mapListener) {
    ConstructorFunction<MapListener, ListenerAdapter> constructorFunction = (ConstructorFunction)CONSTRUCTORS.get(eventType);
    if (constructorFunction == null)
      throw new IllegalArgumentException("First, define a ListenerAdapter for the event EntryEventType." + eventType); 
    return (ListenerAdapter)constructorFunction.createNew(mapListener);
  }
  
  static ListenerAdapter createMapListenerAdaptor(MapListener mapListener) { return new InternalMapListenerAdapter(mapListener); }
  
  public static Map<EntryEventType, ConstructorFunction<MapListener, ListenerAdapter>> getConstructors() { return CONSTRUCTORS; }
}
