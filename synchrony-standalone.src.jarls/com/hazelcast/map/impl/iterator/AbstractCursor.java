package com.hazelcast.map.impl.iterator;

import com.hazelcast.map.impl.MapDataSerializerHook;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public abstract class AbstractCursor<T> extends Object implements IdentifiedDataSerializable {
  private List<T> objects;
  
  private int nextTableIndexToReadFrom;
  
  public AbstractCursor() {}
  
  public AbstractCursor(List<T> entries, int nextTableIndexToReadFrom) {
    this.objects = entries;
    this.nextTableIndexToReadFrom = nextTableIndexToReadFrom;
  }
  
  public List<T> getBatch() { return this.objects; }
  
  public int getNextTableIndexToReadFrom() { return this.nextTableIndexToReadFrom; }
  
  public int getFactoryId() { return MapDataSerializerHook.F_ID; }
  
  abstract void writeElement(ObjectDataOutput paramObjectDataOutput, T paramT) throws IOException;
  
  abstract T readElement(ObjectDataInput paramObjectDataInput) throws IOException;
  
  public void writeData(ObjectDataOutput out) throws IOException {
    out.writeInt(this.nextTableIndexToReadFrom);
    int size = this.objects.size();
    out.writeInt(size);
    for (T entry : this.objects)
      writeElement(out, entry); 
  }
  
  public void readData(ObjectDataInput in) throws IOException {
    this.nextTableIndexToReadFrom = in.readInt();
    int size = in.readInt();
    this.objects = new ArrayList(size);
    for (int i = 0; i < size; i++)
      this.objects.add(readElement(in)); 
  }
}
