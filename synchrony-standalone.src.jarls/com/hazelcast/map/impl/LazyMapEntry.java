package com.hazelcast.map.impl;

import com.hazelcast.internal.serialization.InternalSerializationService;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import com.hazelcast.query.impl.CachedQueryEntry;
import com.hazelcast.query.impl.getters.Extractors;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.Map;

public class LazyMapEntry<K, V> extends CachedQueryEntry<K, V> implements Serializable, IdentifiedDataSerializable {
  private static final long serialVersionUID = 0L;
  
  private boolean modified;
  
  public LazyMapEntry() {}
  
  public LazyMapEntry(Data key, Object value, InternalSerializationService serializationService) { this(key, value, serializationService, null); }
  
  public LazyMapEntry(Data key, Object value, InternalSerializationService serializationService, Extractors extractors) { init(serializationService, key, value, extractors); }
  
  public V setValue(V value) {
    this.modified = true;
    V oldValue = (V)getValue();
    this.valueObject = value;
    this.valueData = null;
    return oldValue;
  }
  
  public void remove() {
    this.modified = true;
    this.valueObject = null;
    this.valueData = null;
  }
  
  public boolean hasNullValue() { return (this.valueObject == null && this.valueData == null); }
  
  public boolean isModified() { return this.modified; }
  
  public boolean equals(Object o) {
    if (!(o instanceof Map.Entry))
      return false; 
    Map.Entry<?, ?> e = (Map.Entry)o;
    return (eq(getKey(), e.getKey()) && eq(getValue(), e.getValue()));
  }
  
  private static boolean eq(Object o1, Object o2) { return (o1 == null) ? ((o2 == null)) : o1.equals(o2); }
  
  public int hashCode() { return ((getKey() == null) ? 0 : getKey().hashCode()) ^ (
      (getValue() == null) ? 0 : getValue().hashCode()); }
  
  public String toString() { return getKey() + "=" + getValue(); }
  
  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
    in.defaultReadObject();
    this.keyObject = in.readObject();
    this.valueObject = in.readObject();
  }
  
  private void writeObject(ObjectOutputStream out) throws IOException {
    out.defaultWriteObject();
    out.writeObject(getKey());
    out.writeObject(getValue());
  }
  
  public void readData(ObjectDataInput in) throws IOException {
    this.keyObject = in.readObject();
    this.valueObject = in.readObject();
  }
  
  public void writeData(ObjectDataOutput out) throws IOException {
    out.writeObject(getKey());
    out.writeObject(getValue());
  }
  
  public int getFactoryId() { return MapDataSerializerHook.F_ID; }
  
  public int getId() { return 131; }
}
