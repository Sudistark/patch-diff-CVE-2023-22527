package com.hazelcast.map.impl.tx;

import com.hazelcast.logging.ILogger;
import com.hazelcast.map.impl.operation.KeyBasedMapOperation;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.BackupAwareOperation;
import com.hazelcast.spi.Operation;
import com.hazelcast.spi.impl.MutatingOperation;
import com.hazelcast.transaction.TransactionException;
import java.io.IOException;

public class TxnPrepareOperation extends KeyBasedMapOperation implements BackupAwareOperation, MutatingOperation {
  private static final long LOCK_TTL_MILLIS = 10000L;
  
  private String ownerUuid;
  
  protected TxnPrepareOperation(int partitionId, String name, Data dataKey, String ownerUuid) {
    super(name, dataKey);
    setPartitionId(partitionId);
    this.ownerUuid = ownerUuid;
  }
  
  public TxnPrepareOperation() {}
  
  public void run() {
    if (!this.recordStore.extendLock(getKey(), this.ownerUuid, getThreadId(), 10000L)) {
      ILogger logger = getLogger();
      if (logger.isFinestEnabled())
        logger.finest("Locked: [" + this.recordStore.isLocked(getKey()) + "], key: [" + getKey() + ']'); 
      throw new TransactionException("Lock is not owned by the transaction! [" + this.recordStore
          .getLockOwnerInfo(getKey()) + ']');
    } 
  }
  
  public void logError(Throwable e) {
    if (e instanceof TransactionException) {
      ILogger logger = getLogger();
      if (logger.isFinestEnabled())
        logger.finest("failed to execute:" + this, e); 
      return;
    } 
    super.logError(e);
  }
  
  public Object getResponse() { return Boolean.valueOf(true); }
  
  public boolean shouldBackup() { return true; }
  
  public final Operation getBackupOperation() { return new TxnPrepareBackupOperation(this.name, this.dataKey, this.ownerUuid, getThreadId()); }
  
  public final int getAsyncBackupCount() { return this.mapContainer.getAsyncBackupCount(); }
  
  public final int getSyncBackupCount() { return this.mapContainer.getBackupCount(); }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeUTF(this.ownerUuid);
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    this.ownerUuid = in.readUTF();
  }
  
  protected void toString(StringBuilder sb) {
    super.toString(sb);
    sb.append(", ownerUuid=").append(this.ownerUuid);
  }
  
  public int getId() { return 67; }
}
