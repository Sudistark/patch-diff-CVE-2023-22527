package com.hazelcast.map.impl.tx;

import com.hazelcast.map.impl.operation.KeyBasedMapOperation;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.BackupOperation;
import com.hazelcast.transaction.TransactionException;
import java.io.IOException;

public class TxnPrepareBackupOperation extends KeyBasedMapOperation implements BackupOperation {
  private static final long LOCK_TTL_MILLIS = 10000L;
  
  private String lockOwner;
  
  private long lockThreadId;
  
  protected TxnPrepareBackupOperation(String name, Data dataKey, String lockOwner, long lockThreadId) {
    super(name, dataKey);
    this.lockOwner = lockOwner;
    this.lockThreadId = lockThreadId;
  }
  
  public TxnPrepareBackupOperation() {}
  
  public void run() {
    if (!this.recordStore.txnLock(getKey(), this.lockOwner, this.lockThreadId, getCallId(), 10000L, true))
      throw new TransactionException("Lock is not owned by the transaction! Caller: " + this.lockOwner + ", Owner: " + this.recordStore
          .getLockOwnerInfo(getKey())); 
  }
  
  public Object getResponse() { return Boolean.TRUE; }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeUTF(this.lockOwner);
    out.writeLong(this.lockThreadId);
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    this.lockOwner = in.readUTF();
    this.lockThreadId = in.readLong();
  }
  
  public int getId() { return 68; }
}
