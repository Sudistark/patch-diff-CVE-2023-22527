package com.hazelcast.map.impl;

import com.hazelcast.spi.ClientAwareService;
import com.hazelcast.spi.EventPublishingService;
import com.hazelcast.spi.ManagedService;
import com.hazelcast.spi.NodeEngine;
import com.hazelcast.spi.PartitionAwareService;
import com.hazelcast.spi.PostJoinAwareService;
import com.hazelcast.spi.RemoteService;
import com.hazelcast.spi.ReplicationSupportingService;
import com.hazelcast.spi.SplitBrainHandlerService;
import com.hazelcast.spi.StatisticsAwareService;
import com.hazelcast.spi.TransactionalService;
import com.hazelcast.spi.impl.CountingMigrationAwareService;
import com.hazelcast.util.Preconditions;

abstract class AbstractMapServiceFactory implements MapServiceFactory {
  abstract ManagedService createManagedService();
  
  abstract CountingMigrationAwareService createMigrationAwareService();
  
  abstract TransactionalService createTransactionalService();
  
  abstract RemoteService createRemoteService();
  
  abstract EventPublishingService createEventPublishingService();
  
  abstract PostJoinAwareService createPostJoinAwareService();
  
  abstract SplitBrainHandlerService createSplitBrainHandlerService();
  
  abstract ReplicationSupportingService createReplicationSupportingService();
  
  abstract StatisticsAwareService createStatisticsAwareService();
  
  abstract PartitionAwareService createPartitionAwareService();
  
  abstract ClientAwareService createClientAwareService();
  
  abstract MapQuorumAwareService createQuorumAwareService();
  
  public MapService createMapService() {
    NodeEngine nodeEngine = getNodeEngine();
    MapServiceContext mapServiceContext = getMapServiceContext();
    ManagedService managedService = createManagedService();
    CountingMigrationAwareService migrationAwareService = createMigrationAwareService();
    TransactionalService transactionalService = createTransactionalService();
    RemoteService remoteService = createRemoteService();
    EventPublishingService eventPublishingService = createEventPublishingService();
    PostJoinAwareService postJoinAwareService = createPostJoinAwareService();
    SplitBrainHandlerService splitBrainHandlerService = createSplitBrainHandlerService();
    ReplicationSupportingService replicationSupportingService = createReplicationSupportingService();
    StatisticsAwareService statisticsAwareService = createStatisticsAwareService();
    PartitionAwareService partitionAwareService = createPartitionAwareService();
    MapQuorumAwareService quorumAwareService = createQuorumAwareService();
    ClientAwareService clientAwareService = createClientAwareService();
    Preconditions.checkNotNull(nodeEngine, "nodeEngine should not be null");
    Preconditions.checkNotNull(mapServiceContext, "mapServiceContext should not be null");
    Preconditions.checkNotNull(managedService, "managedService should not be null");
    Preconditions.checkNotNull(migrationAwareService, "migrationAwareService should not be null");
    Preconditions.checkNotNull(transactionalService, "transactionalService should not be null");
    Preconditions.checkNotNull(remoteService, "remoteService should not be null");
    Preconditions.checkNotNull(eventPublishingService, "eventPublishingService should not be null");
    Preconditions.checkNotNull(postJoinAwareService, "postJoinAwareService should not be null");
    Preconditions.checkNotNull(splitBrainHandlerService, "splitBrainHandlerService should not be null");
    Preconditions.checkNotNull(replicationSupportingService, "replicationSupportingService should not be null");
    Preconditions.checkNotNull(statisticsAwareService, "statisticsAwareService should not be null");
    Preconditions.checkNotNull(partitionAwareService, "partitionAwareService should not be null");
    Preconditions.checkNotNull(quorumAwareService, "quorumAwareService should not be null");
    Preconditions.checkNotNull(clientAwareService, "clientAwareService should not be null");
    MapService mapService = new MapService();
    mapService.managedService = managedService;
    mapService.migrationAwareService = migrationAwareService;
    mapService.transactionalService = transactionalService;
    mapService.remoteService = remoteService;
    mapService.eventPublishingService = eventPublishingService;
    mapService.postJoinAwareService = postJoinAwareService;
    mapService.splitBrainHandlerService = splitBrainHandlerService;
    mapService.replicationSupportingService = replicationSupportingService;
    mapService.statisticsAwareService = statisticsAwareService;
    mapService.mapServiceContext = mapServiceContext;
    mapService.partitionAwareService = partitionAwareService;
    mapService.quorumAwareService = quorumAwareService;
    mapService.clientAwareService = clientAwareService;
    mapServiceContext.setService(mapService);
    return mapService;
  }
}
