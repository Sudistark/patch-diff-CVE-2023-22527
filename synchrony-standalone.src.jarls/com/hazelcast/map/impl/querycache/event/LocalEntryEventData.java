package com.hazelcast.map.impl.querycache.event;

import com.hazelcast.map.impl.event.EventData;
import com.hazelcast.nio.Address;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.BinaryInterface;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.serialization.SerializationService;
import java.io.IOException;

@BinaryInterface
public class LocalEntryEventData<K, V> extends Object implements EventData {
  private K key;
  
  private V value;
  
  private V oldValue;
  
  private String source;
  
  private int eventType;
  
  private Data keyData;
  
  private Data valueData;
  
  private Data oldValueData;
  
  private final SerializationService serializationService;
  
  private final int partitionId;
  
  public LocalEntryEventData(SerializationService serializationService, String source, int eventType, Object key, Object oldValue, Object value, int partitionId) {
    this.serializationService = serializationService;
    this.partitionId = partitionId;
    if (key instanceof Data) {
      this.keyData = (Data)key;
    } else {
      this.key = key;
    } 
    if (value instanceof Data) {
      this.valueData = (Data)value;
    } else {
      this.value = value;
    } 
    if (oldValue instanceof Data) {
      this.oldValueData = (Data)oldValue;
    } else {
      this.oldValue = oldValue;
    } 
    this.source = source;
    this.eventType = eventType;
  }
  
  public V getValue() {
    if (this.value == null && this.serializationService != null)
      this.value = this.serializationService.toObject(this.valueData); 
    return (V)this.value;
  }
  
  public V getOldValue() {
    if (this.oldValue == null && this.serializationService != null)
      this.oldValue = this.serializationService.toObject(this.oldValueData); 
    return (V)this.oldValue;
  }
  
  public K getKey() {
    if (this.key == null && this.serializationService != null)
      this.key = this.serializationService.toObject(this.keyData); 
    return (K)this.key;
  }
  
  public Data getKeyData() {
    if (this.keyData == null && this.serializationService != null)
      this.keyData = this.serializationService.toData(this.key); 
    return this.keyData;
  }
  
  public Data getValueData() {
    if (this.valueData == null && this.serializationService != null)
      this.valueData = this.serializationService.toData(this.value); 
    return this.valueData;
  }
  
  public Data getOldValueData() {
    if (this.oldValueData == null && this.serializationService != null)
      this.oldValueData = this.serializationService.toData(this.oldValue); 
    return this.oldValueData;
  }
  
  public String getSource() { return this.source; }
  
  public String getMapName() { throw new UnsupportedOperationException(); }
  
  public Address getCaller() { throw new UnsupportedOperationException(); }
  
  public int getEventType() { return this.eventType; }
  
  public int getPartitionId() { return this.partitionId; }
  
  public LocalEntryEventData<K, V> cloneWithoutValue() { return new LocalEntryEventData(this.serializationService, this.source, this.eventType, this.key, null, null, this.partitionId); }
  
  public void writeData(ObjectDataOutput out) throws IOException { throw new UnsupportedOperationException(); }
  
  public void readData(ObjectDataInput in) throws IOException { throw new UnsupportedOperationException(); }
  
  public String toString() {
    return "LocalEntryEventData{eventType=" + this.eventType + ", key=" + 
      
      getKey() + ", source='" + this.source + '\'' + '}';
  }
}
