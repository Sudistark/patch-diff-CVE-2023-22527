package com.hazelcast.map.impl.querycache.publisher;

import com.hazelcast.map.impl.querycache.QueryCacheContext;
import com.hazelcast.map.impl.querycache.Registry;
import com.hazelcast.util.ConcurrencyUtil;
import com.hazelcast.util.ConstructorFunction;
import java.util.Collections;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

public class MapPublisherRegistry extends Object implements Registry<String, PublisherRegistry> {
  private final ConstructorFunction<String, PublisherRegistry> registryConstructorFunction;
  
  private final QueryCacheContext context;
  
  private final ConcurrentMap<String, PublisherRegistry> cachePublishersPerIMap;
  
  public MapPublisherRegistry(QueryCacheContext context) {
    this.registryConstructorFunction = new Object(this);
    this.context = context;
    this.cachePublishersPerIMap = new ConcurrentHashMap();
  }
  
  public PublisherRegistry getOrCreate(String mapName) { return (PublisherRegistry)ConcurrencyUtil.getOrPutIfAbsent(this.cachePublishersPerIMap, mapName, this.registryConstructorFunction); }
  
  public PublisherRegistry getOrNull(String mapName) { return (PublisherRegistry)this.cachePublishersPerIMap.get(mapName); }
  
  public Map<String, PublisherRegistry> getAll() { return Collections.unmodifiableMap(this.cachePublishersPerIMap); }
  
  public PublisherRegistry remove(String id) { return (PublisherRegistry)this.cachePublishersPerIMap.remove(id); }
  
  private PublisherRegistry createPublisherRegistry(String mapName) { return new PublisherRegistry(this.context, mapName); }
}
