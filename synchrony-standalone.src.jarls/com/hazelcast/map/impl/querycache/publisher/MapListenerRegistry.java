package com.hazelcast.map.impl.querycache.publisher;

import com.hazelcast.map.impl.querycache.QueryCacheContext;
import com.hazelcast.map.impl.querycache.Registry;
import com.hazelcast.util.ConcurrencyUtil;
import com.hazelcast.util.ConstructorFunction;
import java.util.Collections;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

public class MapListenerRegistry extends Object implements Registry<String, QueryCacheListenerRegistry> {
  private final ConstructorFunction<String, QueryCacheListenerRegistry> registryConstructorFunction;
  
  private final QueryCacheContext context;
  
  private final ConcurrentMap<String, QueryCacheListenerRegistry> listeners;
  
  public MapListenerRegistry(QueryCacheContext context) {
    this.registryConstructorFunction = new Object(this);
    this.listeners = new ConcurrentHashMap();
    this.context = context;
  }
  
  public QueryCacheListenerRegistry getOrCreate(String mapName) { return (QueryCacheListenerRegistry)ConcurrencyUtil.getOrPutIfAbsent(this.listeners, mapName, this.registryConstructorFunction); }
  
  public QueryCacheListenerRegistry getOrNull(String mapName) { return (QueryCacheListenerRegistry)this.listeners.get(mapName); }
  
  public Map<String, QueryCacheListenerRegistry> getAll() { return Collections.unmodifiableMap(this.listeners); }
  
  public QueryCacheListenerRegistry remove(String id) { return (QueryCacheListenerRegistry)this.listeners.remove(id); }
}
