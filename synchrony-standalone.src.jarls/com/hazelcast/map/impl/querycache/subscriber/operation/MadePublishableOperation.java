package com.hazelcast.map.impl.querycache.subscriber.operation;

import com.hazelcast.logging.ILogger;
import com.hazelcast.logging.Logger;
import com.hazelcast.map.impl.MapDataSerializerHook;
import com.hazelcast.map.impl.MapService;
import com.hazelcast.map.impl.MapServiceContext;
import com.hazelcast.map.impl.operation.MapOperation;
import com.hazelcast.map.impl.querycache.QueryCacheContext;
import com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo;
import com.hazelcast.map.impl.querycache.publisher.PartitionAccumulatorRegistry;
import com.hazelcast.map.impl.querycache.utils.QueryCacheUtil;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import java.io.IOException;

public class MadePublishableOperation extends MapOperation {
  private final ILogger logger = Logger.getLogger(getClass());
  
  private String cacheId;
  
  private boolean done;
  
  public MadePublishableOperation() {}
  
  public MadePublishableOperation(String mapName, String cacheId) {
    super(mapName);
    this.cacheId = cacheId;
  }
  
  public void run() { setPublishable(); }
  
  private void setPublishable() {
    PartitionAccumulatorRegistry registry = QueryCacheUtil.getAccumulatorRegistryOrNull(getContext(), this.name, this.cacheId);
    if (registry == null)
      return; 
    AccumulatorInfo info = registry.getInfo();
    info.setPublishable(true);
    if (this.logger.isFinestEnabled())
      this.logger.finest("Accumulator was made publishable for map=" + getName()); 
    this.done = true;
  }
  
  private QueryCacheContext getContext() {
    MapService service = (MapService)getService();
    MapServiceContext mapServiceContext = service.getMapServiceContext();
    return mapServiceContext.getQueryCacheContext();
  }
  
  public Object getResponse() { return Boolean.valueOf(this.done); }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeUTF(this.cacheId);
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    this.cacheId = in.readUTF();
  }
  
  public int getFactoryId() { return MapDataSerializerHook.F_ID; }
  
  public int getId() { return 124; }
}
