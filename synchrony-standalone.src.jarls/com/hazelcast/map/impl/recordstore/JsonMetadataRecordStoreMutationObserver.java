package com.hazelcast.map.impl.recordstore;

import com.hazelcast.internal.serialization.InternalSerializationService;
import com.hazelcast.map.impl.MetadataInitializer;
import com.hazelcast.map.impl.record.Record;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.query.Metadata;
import com.hazelcast.util.EmptyStatement;
import com.hazelcast.util.ExceptionUtil;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import java.io.IOException;

public class JsonMetadataRecordStoreMutationObserver extends Object implements RecordStoreMutationObserver<Record> {
  private InternalSerializationService serializationService;
  
  private MetadataInitializer metadataInitializer;
  
  public JsonMetadataRecordStoreMutationObserver(InternalSerializationService serializationService, MetadataInitializer metadataInitializer) {
    this.serializationService = serializationService;
    this.metadataInitializer = metadataInitializer;
  }
  
  public void onClear() {}
  
  public void onPutRecord(Data key, Record record) { onPutInternal(record); }
  
  public void onReplicationPutRecord(Data key, Record record) { onPutInternal(record); }
  
  public void onUpdateRecord(Data key, Record record, Object newValue) { updateValueMetadataIfNeccessary(record, newValue); }
  
  public void onRemoveRecord(Data key, Record record) {}
  
  public void onEvictRecord(Data key, Record record) {}
  
  public void onLoadRecord(Data key, Record record) { onPutInternal(record); }
  
  public void onDestroy(boolean internal) {}
  
  public void onReset() {}
  
  protected Metadata getMetadata(Record record) { return record.getMetadata(); }
  
  protected void setMetadata(Record record, Metadata metadata) { record.setMetadata(metadata); }
  
  protected void removeMetadata(Record record) { record.setMetadata(null); }
  
  private void onPutInternal(Record record) {
    Metadata metadata = initializeMetadata(record.getKey(), record.getValue());
    if (metadata != null)
      setMetadata(record, metadata); 
  }
  
  @SuppressFBWarnings({"NP_LOAD_OF_KNOWN_NULL_VALUE"})
  private void updateValueMetadataIfNeccessary(Record record, Object updateValue) {
    Object valueMetadata = null;
    try {
      if (record.getValue() instanceof Data) {
        valueMetadata = this.metadataInitializer.createFromData(this.serializationService.toData(updateValue));
      } else {
        valueMetadata = this.metadataInitializer.createFromObject(this.serializationService.toObject(updateValue));
      } 
    } catch (IOException e) {
      EmptyStatement.ignore(e);
    } catch (Exception e) {
      throw ExceptionUtil.rethrow(e);
    } 
    if (valueMetadata != null) {
      Metadata existing = getMetadata(record);
      if (existing == null) {
        existing = new Metadata();
        setMetadata(record, existing);
      } 
      existing.setValueMetadata(valueMetadata);
    } else {
      Metadata existing = getMetadata(record);
      if (existing != null)
        if (existing.getKeyMetadata() == null) {
          removeMetadata(record);
        } else {
          existing.setValueMetadata(valueMetadata);
        }  
    } 
  }
  
  private Metadata initializeMetadata(Data key, Object value) {
    try {
      Object valueMetadata, keyMetadata = this.metadataInitializer.createFromData(key);
      if (value instanceof Data) {
        valueMetadata = this.metadataInitializer.createFromData((Data)value);
      } else {
        valueMetadata = this.metadataInitializer.createFromObject(value);
      } 
      if (keyMetadata != null || valueMetadata != null) {
        Metadata metadata = new Metadata();
        metadata.setKeyMetadata(keyMetadata);
        metadata.setValueMetadata(valueMetadata);
        return metadata;
      } 
      return null;
    } catch (IOException e) {
      return null;
    } catch (Exception e) {
      throw ExceptionUtil.rethrow(e);
    } 
  }
}
