package com.hazelcast.map.impl.recordstore;

import com.hazelcast.map.impl.record.Record;
import com.hazelcast.nio.serialization.Data;
import java.util.Collection;
import java.util.LinkedList;

class CompositeRecordStoreMutationObserver<R extends Record> extends Object implements RecordStoreMutationObserver<R> {
  private final Collection<RecordStoreMutationObserver<R>> mutationObservers;
  
  CompositeRecordStoreMutationObserver(Collection<RecordStoreMutationObserver<R>> mutationObservers) {
    this.mutationObservers = new LinkedList();
    this.mutationObservers.addAll(mutationObservers);
  }
  
  public void onClear() {
    for (RecordStoreMutationObserver<R> mutationObserver : this.mutationObservers)
      mutationObserver.onClear(); 
  }
  
  public void onPutRecord(Data key, R record) {
    for (RecordStoreMutationObserver<R> mutationObserver : this.mutationObservers)
      mutationObserver.onPutRecord(key, record); 
  }
  
  public void onReplicationPutRecord(Data key, R record) {
    for (RecordStoreMutationObserver<R> mutationObserver : this.mutationObservers)
      mutationObserver.onReplicationPutRecord(key, record); 
  }
  
  public void onUpdateRecord(Data key, R record, Object newValue) {
    for (RecordStoreMutationObserver<R> mutationObserver : this.mutationObservers)
      mutationObserver.onUpdateRecord(key, record, newValue); 
  }
  
  public void onRemoveRecord(Data key, R record) {
    for (RecordStoreMutationObserver<R> mutationObserver : this.mutationObservers)
      mutationObserver.onRemoveRecord(key, record); 
  }
  
  public void onEvictRecord(Data key, R record) {
    for (RecordStoreMutationObserver<R> mutationObserver : this.mutationObservers)
      mutationObserver.onEvictRecord(key, record); 
  }
  
  public void onLoadRecord(Data key, R record) {
    for (RecordStoreMutationObserver<R> mutationObserver : this.mutationObservers)
      mutationObserver.onLoadRecord(key, record); 
  }
  
  public void onDestroy(boolean internal) {
    for (RecordStoreMutationObserver<R> mutationObserver : this.mutationObservers)
      mutationObserver.onDestroy(internal); 
  }
  
  public void onReset() {
    for (RecordStoreMutationObserver<R> mutationObserver : this.mutationObservers)
      mutationObserver.onReset(); 
  }
}
