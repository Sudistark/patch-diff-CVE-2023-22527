package com.hazelcast.map.impl.recordstore;

import com.hazelcast.core.EntryView;
import com.hazelcast.map.impl.EntryCostEstimator;
import com.hazelcast.map.impl.iterator.MapEntriesWithCursor;
import com.hazelcast.map.impl.iterator.MapKeysWithCursor;
import com.hazelcast.map.impl.record.Record;
import com.hazelcast.spi.serialization.SerializationService;
import java.util.Collection;
import java.util.Iterator;

public interface Storage<K, R> {
  void put(K paramK, R paramR);
  
  void updateRecordValue(K paramK, R paramR, Object paramObject);
  
  R get(K paramK);
  
  R getIfSameKey(K paramK);
  
  void removeRecord(R paramR);
  
  boolean containsKey(K paramK);
  
  Collection<R> values();
  
  Iterator<R> mutationTolerantIterator();
  
  int size();
  
  boolean isEmpty();
  
  void clear(boolean paramBoolean);
  
  void destroy(boolean paramBoolean);
  
  EntryCostEstimator getEntryCostEstimator();
  
  void setEntryCostEstimator(EntryCostEstimator paramEntryCostEstimator);
  
  void disposeDeferredBlocks();
  
  Iterable<EntryView> getRandomSamples(int paramInt);
  
  MapKeysWithCursor fetchKeys(int paramInt1, int paramInt2);
  
  MapEntriesWithCursor fetchEntries(int paramInt1, int paramInt2, SerializationService paramSerializationService);
  
  Record extractRecordFromLazy(EntryView paramEntryView);
}
