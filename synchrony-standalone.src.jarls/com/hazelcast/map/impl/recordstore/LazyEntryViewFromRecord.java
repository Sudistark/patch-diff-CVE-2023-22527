package com.hazelcast.map.impl.recordstore;

import com.hazelcast.core.EntryView;
import com.hazelcast.map.impl.record.Record;
import com.hazelcast.spi.serialization.SerializationService;
import com.hazelcast.util.SampleableConcurrentHashMap;

public class LazyEntryViewFromRecord<R extends Record> extends SampleableConcurrentHashMap.SamplingEntry implements EntryView {
  private Object key;
  
  private Object value;
  
  private R record;
  
  private SerializationService serializationService;
  
  public LazyEntryViewFromRecord(R record, SerializationService serializationService) {
    super(record.getKey(), record);
    this.record = record;
    this.serializationService = serializationService;
  }
  
  public Object getKey() {
    if (this.key == null)
      this.key = this.serializationService.toObject(this.record.getKey()); 
    return this.key;
  }
  
  public Object getValue() {
    if (this.value == null)
      this.value = this.serializationService.toObject(this.record.getValue()); 
    return this.value;
  }
  
  public long getCost() { return this.record.getCost(); }
  
  public long getCreationTime() { return this.record.getCreationTime(); }
  
  public long getExpirationTime() { return this.record.getExpirationTime(); }
  
  public long getHits() { return this.record.getHits(); }
  
  public long getLastAccessTime() { return this.record.getLastAccessTime(); }
  
  public long getLastStoredTime() { return this.record.getLastStoredTime(); }
  
  public long getLastUpdateTime() { return this.record.getLastUpdateTime(); }
  
  public long getVersion() { return this.record.getVersion(); }
  
  public long getTtl() { return this.record.getTtl(); }
  
  public Long getMaxIdle() { return Long.valueOf(this.record.getMaxIdle()); }
  
  public Record getRecord() { return this.record; }
  
  public boolean equals(Object o) {
    if (this == o)
      return true; 
    if (!(o instanceof EntryView))
      return false; 
    EntryView that = (EntryView)o;
    return (getKey().equals(that.getKey()) && 
      getValue().equals(that.getValue()) && 
      getVersion() == that.getVersion() && 
      getCost() == that.getCost() && 
      getCreationTime() == that.getCreationTime() && 
      getExpirationTime() == that.getExpirationTime() && 
      getHits() == that.getHits() && 
      getLastAccessTime() == that.getLastAccessTime() && 
      getLastStoredTime() == that.getLastStoredTime() && 
      getLastUpdateTime() == that.getLastUpdateTime() && 
      getTtl() == that.getTtl());
  }
  
  public int hashCode() {
    result = super.hashCode();
    result = 31 * result + getKey().hashCode();
    result = 31 * result + getValue().hashCode();
    long cost = getCost();
    long creationTime = getCreationTime();
    long expirationTime = getExpirationTime();
    long hits = getHits();
    long lastAccessTime = getLastAccessTime();
    long lastStoredTime = getLastStoredTime();
    long lastUpdateTime = getLastUpdateTime();
    long version = getVersion();
    long ttl = getTtl();
    result = 31 * result + (int)(cost ^ cost >>> 32);
    result = 31 * result + (int)(creationTime ^ creationTime >>> 32);
    result = 31 * result + (int)(expirationTime ^ expirationTime >>> 32);
    result = 31 * result + (int)(hits ^ hits >>> 32);
    result = 31 * result + (int)(lastAccessTime ^ lastAccessTime >>> 32);
    result = 31 * result + (int)(lastStoredTime ^ lastStoredTime >>> 32);
    result = 31 * result + (int)(lastUpdateTime ^ lastUpdateTime >>> 32);
    result = 31 * result + (int)(version ^ version >>> 32);
    return 31 * result + (int)(ttl ^ ttl >>> 32);
  }
  
  public String toString() {
    return "EntryView{key=" + getKey() + ", value=" + 
      getValue() + ", cost=" + 
      getCost() + ", version=" + 
      getVersion() + ", creationTime=" + 
      getCreationTime() + ", expirationTime=" + 
      getExpirationTime() + ", hits=" + 
      getHits() + ", lastAccessTime=" + 
      getLastAccessTime() + ", lastStoredTime=" + 
      getLastStoredTime() + ", lastUpdateTime=" + 
      getLastUpdateTime() + ", ttl=" + 
      getTtl() + '}';
  }
}
