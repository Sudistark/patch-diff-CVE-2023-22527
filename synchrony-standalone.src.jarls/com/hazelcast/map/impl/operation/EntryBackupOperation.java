package com.hazelcast.map.impl.operation;

import com.hazelcast.core.HazelcastInstance;
import com.hazelcast.core.HazelcastInstanceAware;
import com.hazelcast.map.EntryBackupProcessor;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.BackupOperation;
import java.io.IOException;

public class EntryBackupOperation extends KeyBasedMapOperation implements BackupOperation {
  private EntryBackupProcessor entryProcessor;
  
  public EntryBackupOperation() {}
  
  public EntryBackupOperation(String name, Data dataKey, EntryBackupProcessor entryProcessor) {
    super(name, dataKey);
    this.entryProcessor = entryProcessor;
  }
  
  public void innerBeforeRun() {
    super.innerBeforeRun();
    if (this.entryProcessor instanceof HazelcastInstanceAware) {
      HazelcastInstance hazelcastInstance = getNodeEngine().getHazelcastInstance();
      ((HazelcastInstanceAware)this.entryProcessor).setHazelcastInstance(hazelcastInstance);
    } 
  }
  
  public void run() { EntryOperator.operator(this, this.entryProcessor)
      .operateOnKey(this.dataKey).doPostOperateOps(); }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    this.entryProcessor = (EntryBackupProcessor)in.readObject();
  }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeObject(this.entryProcessor);
  }
  
  public int getId() { return 19; }
}
