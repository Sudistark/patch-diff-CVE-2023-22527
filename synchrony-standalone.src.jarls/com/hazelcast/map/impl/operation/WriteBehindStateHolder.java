package com.hazelcast.map.impl.operation;

import com.hazelcast.config.MapConfig;
import com.hazelcast.map.impl.MapContainer;
import com.hazelcast.map.impl.MapDataSerializerHook;
import com.hazelcast.map.impl.MapService;
import com.hazelcast.map.impl.MapServiceContext;
import com.hazelcast.map.impl.PartitionContainer;
import com.hazelcast.map.impl.mapstore.writebehind.WriteBehindQueue;
import com.hazelcast.map.impl.mapstore.writebehind.WriteBehindStore;
import com.hazelcast.map.impl.mapstore.writebehind.entry.DelayedEntries;
import com.hazelcast.map.impl.mapstore.writebehind.entry.DelayedEntry;
import com.hazelcast.map.impl.recordstore.RecordStore;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import com.hazelcast.spi.ObjectNamespace;
import com.hazelcast.spi.ServiceNamespace;
import com.hazelcast.util.MapUtil;
import java.io.IOException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Queue;

public class WriteBehindStateHolder implements IdentifiedDataSerializable {
  private MapReplicationOperation mapReplicationOperation;
  
  private Map<String, List<DelayedEntry>> delayedEntries;
  
  private Map<String, Queue<WriteBehindStore.Sequence>> flushSequences;
  
  public WriteBehindStateHolder() {}
  
  public WriteBehindStateHolder(MapReplicationOperation mapReplicationOperation) { this.mapReplicationOperation = mapReplicationOperation; }
  
  void prepare(PartitionContainer container, Collection<ServiceNamespace> namespaces, int replicaIndex) {
    int size = namespaces.size();
    this.flushSequences = MapUtil.createHashMap(size);
    this.delayedEntries = MapUtil.createHashMap(size);
    for (ServiceNamespace namespace : namespaces) {
      ObjectNamespace mapNamespace = (ObjectNamespace)namespace;
      String mapName = mapNamespace.getObjectName();
      RecordStore recordStore = container.getRecordStore(mapName);
      if (recordStore == null)
        continue; 
      MapContainer mapContainer = recordStore.getMapContainer();
      MapConfig mapConfig = mapContainer.getMapConfig();
      if (mapConfig.getTotalBackupCount() < replicaIndex || 
        !mapContainer.getMapStoreContext().isWriteBehindMapStoreEnabled())
        continue; 
      WriteBehindStore mapDataStore = (WriteBehindStore)recordStore.getMapDataStore();
      WriteBehindQueue<DelayedEntry> writeBehindQueue = mapDataStore.getWriteBehindQueue();
      List<DelayedEntry> entries = writeBehindQueue.asList();
      if (entries == null || entries.isEmpty())
        continue; 
      this.delayedEntries.put(mapName, entries);
      this.flushSequences.put(mapName, new ArrayDeque(mapDataStore.getFlushSequences()));
    } 
  }
  
  void applyState() {
    for (Map.Entry<String, List<DelayedEntry>> entry : this.delayedEntries.entrySet()) {
      String mapName = (String)entry.getKey();
      RecordStore recordStore = this.mapReplicationOperation.getRecordStore(mapName);
      WriteBehindStore mapDataStore = (WriteBehindStore)recordStore.getMapDataStore();
      mapDataStore.reset();
      mapDataStore.setFlushSequences((Queue)this.flushSequences.get(mapName));
      Collection<DelayedEntry> replicatedEntries = (Collection)entry.getValue();
      for (DelayedEntry delayedEntry : replicatedEntries) {
        mapDataStore.add(delayedEntry);
        mapDataStore.setSequence(delayedEntry.getSequence());
      } 
    } 
  }
  
  public void writeData(ObjectDataOutput out) throws IOException {
    MapService mapService = (MapService)this.mapReplicationOperation.getService();
    MapServiceContext mapServiceContext = mapService.getMapServiceContext();
    out.writeInt(this.delayedEntries.size());
    for (Map.Entry<String, List<DelayedEntry>> entry : this.delayedEntries.entrySet()) {
      out.writeUTF((String)entry.getKey());
      List<DelayedEntry> delayedEntryList = (List)entry.getValue();
      out.writeInt(delayedEntryList.size());
      for (DelayedEntry e : delayedEntryList) {
        Data key = mapServiceContext.toData(e.getKey());
        Data value = mapServiceContext.toData(e.getValue());
        out.writeData(key);
        out.writeData(value);
        out.writeLong(e.getStoreTime());
        out.writeInt(e.getPartitionId());
        out.writeLong(e.getSequence());
      } 
    } 
    out.writeInt(this.flushSequences.size());
    for (Map.Entry<String, Queue<WriteBehindStore.Sequence>> entry : this.flushSequences.entrySet()) {
      out.writeUTF((String)entry.getKey());
      Queue<WriteBehindStore.Sequence> queue = (Queue)entry.getValue();
      out.writeInt(queue.size());
      for (WriteBehindStore.Sequence sequence : queue) {
        out.writeLong(sequence.getSequence());
        out.writeBoolean(sequence.isFullFlush());
      } 
    } 
  }
  
  public void readData(ObjectDataInput in) throws IOException {
    int size = in.readInt();
    this.delayedEntries = MapUtil.createHashMap(size);
    for (int i = 0; i < size; i++) {
      String mapName = in.readUTF();
      int listSize = in.readInt();
      List<DelayedEntry> delayedEntriesList = new ArrayList<DelayedEntry>(listSize);
      for (int j = 0; j < listSize; j++) {
        Data key = in.readData();
        Data value = in.readData();
        long storeTime = in.readLong();
        int partitionId = in.readInt();
        long sequence = in.readLong();
        DelayedEntry<Data, Data> entry = DelayedEntries.createDefault(key, value, storeTime, partitionId);
        entry.setSequence(sequence);
        delayedEntriesList.add(entry);
      } 
      this.delayedEntries.put(mapName, delayedEntriesList);
    } 
    int expectedSize = in.readInt();
    this.flushSequences = MapUtil.createHashMap(expectedSize);
    for (int i = 0; i < expectedSize; i++) {
      String mapName = in.readUTF();
      int setSize = in.readInt();
      Queue<WriteBehindStore.Sequence> queue = new ArrayDeque<WriteBehindStore.Sequence>(setSize);
      for (int j = 0; j < setSize; j++)
        queue.add(new WriteBehindStore.Sequence(in.readLong(), in.readBoolean())); 
      this.flushSequences.put(mapName, queue);
    } 
  }
  
  public int getFactoryId() { return MapDataSerializerHook.F_ID; }
  
  public int getId() { return 114; }
}
