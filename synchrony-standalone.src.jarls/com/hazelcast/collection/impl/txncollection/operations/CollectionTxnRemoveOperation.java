package com.hazelcast.collection.impl.txncollection.operations;

import com.hazelcast.collection.impl.collection.CollectionContainer;
import com.hazelcast.collection.impl.collection.CollectionItem;
import com.hazelcast.collection.impl.collection.operations.CollectionBackupAwareOperation;
import com.hazelcast.collection.impl.txncollection.CollectionTxnOperation;
import com.hazelcast.core.ItemEventType;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.spi.Operation;
import com.hazelcast.spi.impl.MutatingOperation;
import java.io.IOException;

public class CollectionTxnRemoveOperation extends CollectionBackupAwareOperation implements CollectionTxnOperation, MutatingOperation {
  private long itemId;
  
  private CollectionItem item;
  
  public CollectionTxnRemoveOperation() {}
  
  public CollectionTxnRemoveOperation(String name, long itemId) {
    super(name);
    this.itemId = itemId;
  }
  
  public boolean shouldBackup() { return true; }
  
  public Operation getBackupOperation() { return new CollectionTxnRemoveBackupOperation(this.name, this.itemId); }
  
  public void run() {
    CollectionContainer collectionContainer = getOrCreateContainer();
    this.item = collectionContainer.commitRemove(this.itemId);
  }
  
  public void afterRun() {
    if (this.item != null)
      publishEvent(ItemEventType.REMOVED, this.item.getValue()); 
  }
  
  public long getItemId() { return this.itemId; }
  
  public boolean isRemoveOperation() { return true; }
  
  public int getId() { return 28; }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeLong(this.itemId);
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    this.itemId = in.readLong();
  }
}
