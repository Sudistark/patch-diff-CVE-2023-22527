package com.hazelcast.collection.impl.txnqueue;

import com.hazelcast.collection.impl.queue.QueueService;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.NodeEngine;
import com.hazelcast.transaction.impl.Transaction;
import com.hazelcast.util.Preconditions;
import java.util.concurrent.TimeUnit;

public class TransactionalQueueProxy<E> extends TransactionalQueueProxySupport<E> {
  public TransactionalQueueProxy(NodeEngine nodeEngine, QueueService service, String name, Transaction tx) { super(nodeEngine, service, name, tx); }
  
  public boolean offer(E e) {
    try {
      return offer(e, 0L, TimeUnit.MILLISECONDS);
    } catch (InterruptedException ignored) {
      Thread.currentThread().interrupt();
      return false;
    } 
  }
  
  public boolean offer(E e, long timeout, TimeUnit unit) throws InterruptedException {
    Preconditions.checkNotNull(e, "Offered item should not be null.");
    Preconditions.checkNotNull(unit, "TimeUnit should not be null.");
    checkTransactionState();
    Data data = getNodeEngine().toData(e);
    return offerInternal(data, unit.toMillis(timeout));
  }
  
  public E take() throws InterruptedException { return (E)poll(-1L, TimeUnit.MILLISECONDS); }
  
  public E poll() throws InterruptedException {
    try {
      return (E)poll(0L, TimeUnit.MILLISECONDS);
    } catch (InterruptedException ignored) {
      Thread.currentThread().interrupt();
      return null;
    } 
  }
  
  public E poll(long timeout, TimeUnit unit) throws InterruptedException {
    Preconditions.checkNotNull(unit, "TimeUnit should not be null.");
    checkTransactionState();
    Data data = pollInternal(unit.toMillis(timeout));
    return (E)toObjectIfNeeded(data);
  }
  
  public E peek() throws InterruptedException {
    try {
      return (E)peek(0L, TimeUnit.MILLISECONDS);
    } catch (InterruptedException ignored) {
      Thread.currentThread().interrupt();
      return null;
    } 
  }
  
  public E peek(long timeout, TimeUnit unit) throws InterruptedException {
    Preconditions.checkNotNull(unit, "TimeUnit should not be null.");
    checkTransactionState();
    Data data = peekInternal(unit.toMillis(timeout));
    return (E)toObjectIfNeeded(data);
  }
  
  public String toString() { return "TransactionalQueue{name=" + this.name + '}'; }
}
