package com.hazelcast.collection.impl.txnqueue.operations;

import com.hazelcast.collection.impl.queue.QueueContainer;
import com.hazelcast.collection.impl.queue.operations.QueueBackupAwareOperation;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.spi.BlockingOperation;
import com.hazelcast.spi.Operation;
import com.hazelcast.spi.WaitNotifyKey;
import com.hazelcast.spi.impl.MutatingOperation;
import java.io.IOException;

public class TxnReserveOfferOperation extends QueueBackupAwareOperation implements BlockingOperation, MutatingOperation {
  private int txSize;
  
  private String transactionId;
  
  public TxnReserveOfferOperation() {}
  
  public TxnReserveOfferOperation(String name, long timeoutMillis, int txSize, String transactionId) {
    super(name, timeoutMillis);
    this.txSize = txSize;
    this.transactionId = transactionId;
  }
  
  public void run() {
    QueueContainer queueContainer = getContainer();
    if (queueContainer.hasEnoughCapacity(this.txSize + 1))
      this.response = Long.valueOf(queueContainer.txnOfferReserve(this.transactionId)); 
  }
  
  public WaitNotifyKey getWaitKey() {
    QueueContainer queueContainer = getContainer();
    return queueContainer.getOfferWaitNotifyKey();
  }
  
  public boolean shouldWait() {
    QueueContainer queueContainer = getContainer();
    return (getWaitTimeout() != 0L && !queueContainer.hasEnoughCapacity(this.txSize + 1));
  }
  
  public void onWaitExpire() { sendResponse(null); }
  
  public boolean shouldBackup() { return (this.response != null); }
  
  public Operation getBackupOperation() { return new TxnReserveOfferBackupOperation(this.name, ((Long)this.response).longValue(), this.transactionId); }
  
  public int getId() { return 29; }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeInt(this.txSize);
    out.writeUTF(this.transactionId);
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    this.txSize = in.readInt();
    this.transactionId = in.readUTF();
  }
}
