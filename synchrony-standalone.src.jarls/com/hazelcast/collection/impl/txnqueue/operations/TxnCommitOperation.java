package com.hazelcast.collection.impl.txnqueue.operations;

import com.hazelcast.collection.impl.CollectionTxnUtil;
import com.hazelcast.collection.impl.queue.QueueContainer;
import com.hazelcast.collection.impl.queue.operations.QueueBackupAwareOperation;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.spi.Notifier;
import com.hazelcast.spi.Operation;
import com.hazelcast.spi.WaitNotifyKey;
import java.io.IOException;
import java.util.List;

public class TxnCommitOperation extends QueueBackupAwareOperation implements Notifier {
  private List<Operation> operationList;
  
  private List<Operation> backupList;
  
  private long shouldNotify;
  
  public TxnCommitOperation() {}
  
  public TxnCommitOperation(int partitionId, String name, List<Operation> operationList) {
    super(name);
    setPartitionId(partitionId);
    this.operationList = operationList;
  }
  
  public void beforeRun() {
    super.beforeRun();
    CollectionTxnUtil.before(this.operationList, this);
  }
  
  public void run() {
    this.backupList = CollectionTxnUtil.run(this.operationList);
    for (Operation operation : this.operationList) {
      if (operation instanceof Notifier) {
        boolean shouldNotify = ((Notifier)operation).shouldNotify();
        if (shouldNotify)
          this.shouldNotify += ((operation instanceof TxnPollOperation) ? 1L : -1L); 
      } 
    } 
  }
  
  public void afterRun() {
    super.beforeRun();
    CollectionTxnUtil.after(this.operationList);
  }
  
  public boolean shouldBackup() { return !this.backupList.isEmpty(); }
  
  public Operation getBackupOperation() { return new TxnCommitBackupOperation(this.name, this.backupList); }
  
  public boolean shouldNotify() { return (this.shouldNotify != 0L); }
  
  public WaitNotifyKey getNotifiedKey() {
    QueueContainer queueContainer = getContainer();
    if (CollectionTxnUtil.isRemove(this.shouldNotify))
      return queueContainer.getOfferWaitNotifyKey(); 
    return queueContainer.getPollWaitNotifyKey();
  }
  
  public int getId() { return 42; }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    CollectionTxnUtil.write(out, this.operationList);
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    this.operationList = CollectionTxnUtil.read(in);
  }
}
