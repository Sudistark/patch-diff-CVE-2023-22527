package com.hazelcast.collection.impl.queue;

import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import com.hazelcast.util.Clock;
import java.io.IOException;

public class QueueItem extends Object implements IdentifiedDataSerializable, Comparable<QueueItem> {
  protected long itemId;
  
  protected Data data;
  
  protected final long creationTime = Clock.currentTimeMillis();
  
  protected QueueContainer container;
  
  public QueueItem(QueueContainer container, long itemId, Data data) {
    this();
    this.container = container;
    this.itemId = itemId;
    this.data = data;
  }
  
  public Data getData() {
    if (this.data == null && this.container != null)
      this.data = this.container.getDataFromMap(this.itemId); 
    return this.data;
  }
  
  public void setData(Data data) { this.data = data; }
  
  public long getItemId() { return this.itemId; }
  
  public void setItemId(long itemId) { this.itemId = itemId; }
  
  public long getCreationTime() { return this.creationTime; }
  
  public QueueContainer getContainer() { return this.container; }
  
  public int getFactoryId() { return QueueDataSerializerHook.F_ID; }
  
  public int getId() { return 17; }
  
  public void writeData(ObjectDataOutput out) throws IOException {
    out.writeLong(this.itemId);
    out.writeData(this.data);
  }
  
  public void readData(ObjectDataInput in) throws IOException {
    this.itemId = in.readLong();
    this.data = in.readData();
  }
  
  public int compareTo(QueueItem o) {
    if (this.itemId < o.getItemId())
      return -1; 
    if (this.itemId > o.getItemId())
      return 1; 
    return 0;
  }
  
  public boolean equals(Object o) {
    if (this == o)
      return true; 
    if (!(o instanceof QueueItem))
      return false; 
    QueueItem item = (QueueItem)o;
    if (this.itemId != item.itemId)
      return false; 
    if ((this.data != null) ? !this.data.equals(item.data) : (item.data != null))
      return false; 
    return true;
  }
  
  public int hashCode() {
    result = (int)(this.itemId ^ this.itemId >>> 32);
    return 31 * result + ((this.data != null) ? this.data.hashCode() : 0);
  }
  
  public QueueItem() {}
}
