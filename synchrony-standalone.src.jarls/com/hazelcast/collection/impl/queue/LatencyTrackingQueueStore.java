package com.hazelcast.collection.impl.queue;

import com.hazelcast.core.QueueStore;
import com.hazelcast.internal.diagnostics.StoreLatencyPlugin;
import java.util.Collection;
import java.util.Map;
import java.util.Set;

public class LatencyTrackingQueueStore<T> extends Object implements QueueStore<T> {
  static final String KEY = "QueueStoreLatency";
  
  private final StoreLatencyPlugin.LatencyProbe loadProbe;
  
  private final StoreLatencyPlugin.LatencyProbe loadAllKeysProbe;
  
  private final StoreLatencyPlugin.LatencyProbe loadAllProbe;
  
  private final StoreLatencyPlugin.LatencyProbe deleteProbe;
  
  private final StoreLatencyPlugin.LatencyProbe deleteAllProbe;
  
  private final StoreLatencyPlugin.LatencyProbe storeProbe;
  
  private final StoreLatencyPlugin.LatencyProbe storeAllProbe;
  
  private final QueueStore<T> delegate;
  
  public LatencyTrackingQueueStore(QueueStore<T> delegate, StoreLatencyPlugin plugin, String queueName) {
    this.delegate = delegate;
    this.loadProbe = plugin.newProbe("QueueStoreLatency", queueName, "load");
    this.loadAllProbe = plugin.newProbe("QueueStoreLatency", queueName, "loadAll");
    this.loadAllKeysProbe = plugin.newProbe("QueueStoreLatency", queueName, "loadAllKeys");
    this.deleteProbe = plugin.newProbe("QueueStoreLatency", queueName, "delete");
    this.deleteAllProbe = plugin.newProbe("QueueStoreLatency", queueName, "deleteAll");
    this.storeProbe = plugin.newProbe("QueueStoreLatency", queueName, "store");
    this.storeAllProbe = plugin.newProbe("QueueStoreLatency", queueName, "storeAll");
  }
  
  public void store(Long key, T value) {
    startNanos = System.nanoTime();
    try {
      this.delegate.store(key, value);
    } finally {
      this.storeProbe.recordValue(System.nanoTime() - startNanos);
    } 
  }
  
  public void storeAll(Map<Long, T> map) {
    startNanos = System.nanoTime();
    try {
      this.delegate.storeAll(map);
    } finally {
      this.storeAllProbe.recordValue(System.nanoTime() - startNanos);
    } 
  }
  
  public void delete(Long key) {
    startNanos = System.nanoTime();
    try {
      this.delegate.delete(key);
    } finally {
      this.deleteProbe.recordValue(System.nanoTime() - startNanos);
    } 
  }
  
  public void deleteAll(Collection<Long> keys) {
    startNanos = System.nanoTime();
    try {
      this.delegate.deleteAll(keys);
    } finally {
      this.deleteAllProbe.recordValue(System.nanoTime() - startNanos);
    } 
  }
  
  public T load(Long key) {
    startNanos = System.nanoTime();
    try {
      object = this.delegate.load(key);
      return (T)object;
    } finally {
      this.loadProbe.recordValue(System.nanoTime() - startNanos);
    } 
  }
  
  public Map<Long, T> loadAll(Collection<Long> keys) {
    startNanos = System.nanoTime();
    try {
      return this.delegate.loadAll(keys);
    } finally {
      this.loadAllProbe.recordValue(System.nanoTime() - startNanos);
    } 
  }
  
  public Set<Long> loadAllKeys() {
    startNanos = System.nanoTime();
    try {
      return this.delegate.loadAllKeys();
    } finally {
      this.loadAllKeysProbe.recordValue(System.nanoTime() - startNanos);
    } 
  }
}
