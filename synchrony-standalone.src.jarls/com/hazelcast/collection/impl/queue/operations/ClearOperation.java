package com.hazelcast.collection.impl.queue.operations;

import com.hazelcast.collection.impl.queue.QueueContainer;
import com.hazelcast.core.ItemEventType;
import com.hazelcast.monitor.impl.LocalQueueStatsImpl;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.Notifier;
import com.hazelcast.spi.Operation;
import com.hazelcast.spi.WaitNotifyKey;
import com.hazelcast.spi.impl.MutatingOperation;
import java.util.Map;

public class ClearOperation extends QueueBackupAwareOperation implements Notifier, MutatingOperation {
  private Map<Long, Data> dataMap;
  
  public ClearOperation() {}
  
  public ClearOperation(String name) { super(name); }
  
  public void run() {
    QueueContainer queueContainer = getContainer();
    this.dataMap = queueContainer.clear();
    this.response = Boolean.valueOf(true);
  }
  
  public void afterRun() {
    LocalQueueStatsImpl stats = getQueueService().getLocalQueueStatsImpl(this.name);
    stats.incrementOtherOperations();
    for (Data data : this.dataMap.values())
      publishEvent(ItemEventType.REMOVED, data); 
  }
  
  public Operation getBackupOperation() { return new ClearBackupOperation(this.name, this.dataMap.keySet()); }
  
  public boolean shouldBackup() { return Boolean.TRUE.equals(Boolean.valueOf(!this.dataMap.isEmpty())); }
  
  public boolean shouldNotify() { return Boolean.TRUE.equals(Boolean.valueOf(!this.dataMap.isEmpty())); }
  
  public WaitNotifyKey getNotifiedKey() { return getContainer().getOfferWaitNotifyKey(); }
  
  public int getId() { return 8; }
}
