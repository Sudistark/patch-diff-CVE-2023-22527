package com.hazelcast.collection.impl.queue.operations;

import com.hazelcast.collection.impl.queue.QueueContainer;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.BackupOperation;
import com.hazelcast.util.MapUtil;
import java.io.IOException;
import java.util.Map;

public class AddAllBackupOperation extends QueueOperation implements BackupOperation {
  private Map<Long, Data> dataMap;
  
  public AddAllBackupOperation() {}
  
  public AddAllBackupOperation(String name, Map<Long, Data> dataMap) {
    super(name);
    this.dataMap = dataMap;
  }
  
  public void run() {
    QueueContainer queueContainer = getContainer();
    queueContainer.addAllBackup(this.dataMap);
  }
  
  public int getId() { return 5; }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeInt(this.dataMap.size());
    for (Map.Entry<Long, Data> entry : this.dataMap.entrySet()) {
      long itemId = ((Long)entry.getKey()).longValue();
      Data value = (Data)entry.getValue();
      out.writeLong(itemId);
      out.writeData(value);
    } 
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    int size = in.readInt();
    this.dataMap = MapUtil.createHashMap(size);
    for (int i = 0; i < size; i++) {
      long itemId = in.readLong();
      Data value = in.readData();
      this.dataMap.put(Long.valueOf(itemId), value);
    } 
  }
}
