package com.hazelcast.collection.impl.collection.operations;

import com.hazelcast.collection.impl.collection.CollectionContainer;
import com.hazelcast.core.ItemEventType;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.Operation;
import com.hazelcast.spi.impl.MutatingOperation;
import java.io.IOException;

public class CollectionAddOperation extends CollectionBackupAwareOperation implements MutatingOperation {
  protected Data value;
  
  protected long itemId = -1L;
  
  public CollectionAddOperation() {}
  
  public CollectionAddOperation(String name, Data value) {
    super(name);
    this.value = value;
  }
  
  public boolean shouldBackup() { return (this.itemId != -1L); }
  
  public Operation getBackupOperation() { return new CollectionAddBackupOperation(this.name, this.itemId, this.value); }
  
  public void run() {
    if (hasEnoughCapacity(1)) {
      CollectionContainer collectionContainer = getOrCreateContainer();
      this.itemId = collectionContainer.add(this.value);
    } 
    this.response = Boolean.valueOf((this.itemId != -1L));
  }
  
  public void afterRun() {
    if (this.itemId != -1L)
      publishEvent(ItemEventType.ADDED, this.value); 
  }
  
  public int getId() { return 1; }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeData(this.value);
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    this.value = in.readData();
  }
}
