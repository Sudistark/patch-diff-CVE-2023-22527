package com.hazelcast.collection.impl.collection.operations;

import com.hazelcast.collection.impl.collection.CollectionContainer;
import com.hazelcast.collection.impl.collection.CollectionDataSerializerHook;
import com.hazelcast.collection.impl.collection.CollectionService;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import com.hazelcast.spi.Operation;
import java.io.IOException;
import java.util.Map;

public abstract class CollectionReplicationOperation extends Operation implements IdentifiedDataSerializable {
  protected Map<String, CollectionContainer> migrationData;
  
  public CollectionReplicationOperation() {}
  
  public CollectionReplicationOperation(Map<String, CollectionContainer> migrationData, int partitionId, int replicaIndex) {
    setPartitionId(partitionId).setReplicaIndex(replicaIndex);
    this.migrationData = migrationData;
  }
  
  public void run() {
    CollectionService service = (CollectionService)getService();
    for (Map.Entry<String, CollectionContainer> entry : this.migrationData.entrySet()) {
      String name = (String)entry.getKey();
      CollectionContainer container = (CollectionContainer)entry.getValue();
      container.init(getNodeEngine());
      service.addContainer(name, container);
    } 
  }
  
  public int getFactoryId() { return CollectionDataSerializerHook.F_ID; }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    out.writeInt(this.migrationData.size());
    for (Map.Entry<String, CollectionContainer> entry : this.migrationData.entrySet()) {
      out.writeUTF((String)entry.getKey());
      CollectionContainer container = (CollectionContainer)entry.getValue();
      container.writeData(out);
    } 
  }
}
