package com.hazelcast.collection.impl.collection.operations;

import com.hazelcast.collection.impl.collection.CollectionContainer;
import com.hazelcast.collection.impl.collection.CollectionItem;
import com.hazelcast.core.ItemEventType;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.Operation;
import com.hazelcast.spi.impl.MutatingOperation;
import java.io.IOException;

public class CollectionRemoveOperation extends CollectionBackupAwareOperation implements MutatingOperation {
  private Data value;
  
  private long itemId = -1L;
  
  public CollectionRemoveOperation() {}
  
  public CollectionRemoveOperation(String name, Data value) {
    super(name);
    this.value = value;
  }
  
  public void run() {
    this.response = Boolean.valueOf(false);
    CollectionContainer collectionContainer = getOrCreateContainer();
    CollectionItem item = collectionContainer.remove(this.value);
    if (item != null) {
      this.response = Boolean.valueOf(true);
      this.itemId = item.getItemId();
    } 
  }
  
  public void afterRun() {
    if (this.itemId != -1L)
      publishEvent(ItemEventType.REMOVED, this.value); 
  }
  
  public boolean shouldBackup() { return (this.itemId != -1L); }
  
  public Operation getBackupOperation() { return new CollectionRemoveBackupOperation(this.name, this.itemId); }
  
  public int getId() { return 5; }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeData(this.value);
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    this.value = in.readData();
  }
}
