package com.hazelcast.collection.impl.collection.operations;

import com.hazelcast.collection.impl.collection.CollectionContainer;
import com.hazelcast.core.ItemEventType;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.Operation;
import com.hazelcast.spi.impl.MutatingOperation;
import com.hazelcast.util.SetUtil;
import java.io.IOException;
import java.util.Map;
import java.util.Set;

public class CollectionCompareAndRemoveOperation extends CollectionBackupAwareOperation implements MutatingOperation {
  private boolean retain;
  
  private Set<Data> valueSet;
  
  private Map<Long, Data> itemIdMap;
  
  public CollectionCompareAndRemoveOperation() {}
  
  public CollectionCompareAndRemoveOperation(String name, boolean retain, Set<Data> valueSet) {
    super(name);
    this.retain = retain;
    this.valueSet = valueSet;
  }
  
  public boolean shouldBackup() { return !this.itemIdMap.isEmpty(); }
  
  public Operation getBackupOperation() { return new CollectionClearBackupOperation(this.name, this.itemIdMap.keySet()); }
  
  public void run() {
    CollectionContainer collectionContainer = getOrCreateContainer();
    this.itemIdMap = collectionContainer.compareAndRemove(this.retain, this.valueSet);
    this.response = Boolean.valueOf(!this.itemIdMap.isEmpty());
  }
  
  public void afterRun() {
    for (Data value : this.itemIdMap.values())
      publishEvent(ItemEventType.REMOVED, value); 
  }
  
  public int getId() { return 19; }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeBoolean(this.retain);
    out.writeInt(this.valueSet.size());
    for (Data value : this.valueSet)
      out.writeData(value); 
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    this.retain = in.readBoolean();
    int size = in.readInt();
    this.valueSet = SetUtil.createHashSet(size);
    for (int i = 0; i < size; i++) {
      Data value = in.readData();
      this.valueSet.add(value);
    } 
  }
}
