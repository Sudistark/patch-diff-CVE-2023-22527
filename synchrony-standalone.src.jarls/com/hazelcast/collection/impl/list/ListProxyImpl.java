package com.hazelcast.collection.impl.list;

import com.hazelcast.collection.impl.collection.AbstractCollectionProxyImpl;
import com.hazelcast.collection.impl.list.operations.ListAddAllOperation;
import com.hazelcast.collection.impl.list.operations.ListAddOperation;
import com.hazelcast.collection.impl.list.operations.ListGetOperation;
import com.hazelcast.collection.impl.list.operations.ListIndexOfOperation;
import com.hazelcast.collection.impl.list.operations.ListRemoveOperation;
import com.hazelcast.collection.impl.list.operations.ListSetOperation;
import com.hazelcast.collection.impl.list.operations.ListSubOperation;
import com.hazelcast.config.CollectionConfig;
import com.hazelcast.core.IList;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.NodeEngine;
import com.hazelcast.spi.impl.SerializableList;
import com.hazelcast.spi.impl.UnmodifiableLazyList;
import com.hazelcast.spi.serialization.SerializationService;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;

public class ListProxyImpl<E> extends AbstractCollectionProxyImpl<ListService, E> implements IList<E> {
  protected ListProxyImpl(String name, NodeEngine nodeEngine, ListService service) { super(name, nodeEngine, service); }
  
  protected CollectionConfig getConfig(NodeEngine nodeEngine) { return nodeEngine.getConfig().findListConfig(this.name); }
  
  public void add(int index, E e) {
    checkObjectNotNull(e);
    checkIndexNotNegative(index);
    Data value = getNodeEngine().toData(e);
    ListAddOperation operation = new ListAddOperation(this.name, index, value);
    invoke(operation);
  }
  
  public E get(int index) {
    checkIndexNotNegative(index);
    ListGetOperation operation = new ListGetOperation(this.name, index);
    return (E)invoke(operation);
  }
  
  public E set(int index, E element) {
    checkObjectNotNull(element);
    checkIndexNotNegative(index);
    Data value = getNodeEngine().toData(element);
    ListSetOperation operation = new ListSetOperation(this.name, index, value);
    return (E)invoke(operation);
  }
  
  public E remove(int index) {
    checkIndexNotNegative(index);
    ListRemoveOperation operation = new ListRemoveOperation(this.name, index);
    return (E)invoke(operation);
  }
  
  public int indexOf(Object o) { return indexOfInternal(false, o); }
  
  public int lastIndexOf(Object o) { return indexOfInternal(true, o); }
  
  private int indexOfInternal(boolean last, Object o) {
    checkObjectNotNull(o);
    Data value = getNodeEngine().toData(o);
    ListIndexOfOperation operation = new ListIndexOfOperation(this.name, last, value);
    Integer result = (Integer)invoke(operation);
    return result.intValue();
  }
  
  public boolean addAll(int index, Collection<? extends E> c) {
    checkObjectNotNull(c);
    checkIndexNotNegative(index);
    List<Data> valueList = new ArrayList<Data>(c.size());
    NodeEngine nodeEngine = getNodeEngine();
    for (E e : c) {
      checkObjectNotNull(e);
      valueList.add(nodeEngine.toData(e));
    } 
    ListAddAllOperation operation = new ListAddAllOperation(this.name, index, valueList);
    Boolean result = (Boolean)invoke(operation);
    return result.booleanValue();
  }
  
  public ListIterator<E> listIterator() { return listIterator(0); }
  
  public ListIterator<E> listIterator(int index) {
    List<E> list = subList(-1, -1);
    return list.listIterator(index);
  }
  
  public List<E> subList(int fromIndex, int toIndex) {
    ListSubOperation operation = new ListSubOperation(this.name, fromIndex, toIndex);
    SerializableList result = (SerializableList)invoke(operation);
    List<Data> collection = result.getCollection();
    SerializationService serializationService = getNodeEngine().getSerializationService();
    return new UnmodifiableLazyList(collection, serializationService);
  }
  
  public Iterator<E> iterator() { return listIterator(0); }
  
  public Object[] toArray() { return subList(-1, -1).toArray(); }
  
  public <T> T[] toArray(T[] a) {
    checkObjectNotNull(a);
    return (T[])subList(-1, -1).toArray(a);
  }
  
  public String getServiceName() { return "hz:impl:listService"; }
}
