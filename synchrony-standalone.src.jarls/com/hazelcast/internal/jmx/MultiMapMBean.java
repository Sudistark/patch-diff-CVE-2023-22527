package com.hazelcast.internal.jmx;

import com.hazelcast.core.MultiMap;
import com.hazelcast.internal.jmx.suppliers.LocalMultiMapStatsSupplier;
import com.hazelcast.monitor.LocalMultiMapStats;

@ManagedDescription("MultiMap")
public class MultiMapMBean extends HazelcastMBean<MultiMap> {
  private final LocalStatsDelegate<LocalMultiMapStats> localMultiMapStatsDelegate;
  
  protected MultiMapMBean(MultiMap managedObject, ManagementService service) {
    super(managedObject, service);
    this.objectName = service.createObjectName("MultiMap", managedObject.getName());
    LocalMultiMapStatsSupplier localMultiMapStatsSupplier1 = new LocalMultiMapStatsSupplier(managedObject);
    this.localMultiMapStatsDelegate = new LocalStatsDelegate(localMultiMapStatsSupplier1, this.updateIntervalSec);
  }
  
  @ManagedAnnotation("localOwnedEntryCount")
  @ManagedDescription("number of entries owned on this member")
  public long getLocalOwnedEntryCount() { return ((LocalMultiMapStats)this.localMultiMapStatsDelegate.getLocalStats()).getOwnedEntryCount(); }
  
  @ManagedAnnotation("localBackupEntryCount")
  @ManagedDescription("the number of backup entries hold on this member")
  public long getLocalBackupEntryCount() { return ((LocalMultiMapStats)this.localMultiMapStatsDelegate.getLocalStats()).getBackupEntryCount(); }
  
  @ManagedAnnotation("localBackupCount")
  @ManagedDescription("the number of backups per entry on this member")
  public int getLocalBackupCount() { return ((LocalMultiMapStats)this.localMultiMapStatsDelegate.getLocalStats()).getBackupCount(); }
  
  @ManagedAnnotation("localOwnedEntryMemoryCost")
  @ManagedDescription("memory cost (number of bytes) of owned entries on this member")
  public long getLocalOwnedEntryMemoryCost() { return ((LocalMultiMapStats)this.localMultiMapStatsDelegate.getLocalStats()).getOwnedEntryMemoryCost(); }
  
  @ManagedAnnotation("localBackupEntryMemoryCost")
  @ManagedDescription("memory cost (number of bytes) of backup entries on this member.")
  public long getLocalBackupEntryMemoryCost() { return ((LocalMultiMapStats)this.localMultiMapStatsDelegate.getLocalStats()).getBackupEntryMemoryCost(); }
  
  @ManagedAnnotation("localCreationTime")
  @ManagedDescription("the creation time of this map on this member.")
  public long getLocalCreationTime() { return ((LocalMultiMapStats)this.localMultiMapStatsDelegate.getLocalStats()).getCreationTime(); }
  
  @ManagedAnnotation("localLastAccessTime")
  @ManagedDescription("the last access (read) time of the locally owned entries.")
  public long getLocalLastAccessTime() { return ((LocalMultiMapStats)this.localMultiMapStatsDelegate.getLocalStats()).getLastAccessTime(); }
  
  @ManagedAnnotation("localLastUpdateTime")
  @ManagedDescription("the last update time of the locally owned entries.")
  public long getLocalLastUpdateTime() { return ((LocalMultiMapStats)this.localMultiMapStatsDelegate.getLocalStats()).getLastUpdateTime(); }
  
  @ManagedAnnotation("localHits")
  @ManagedDescription("the number of hits (reads) of the locally owned entries.")
  public long getLocalHits() { return ((LocalMultiMapStats)this.localMultiMapStatsDelegate.getLocalStats()).getHits(); }
  
  @ManagedAnnotation("localLockedEntryCount")
  @ManagedDescription("the number of currently locked locally owned keys.")
  public long getLocalLockedEntryCount() { return ((LocalMultiMapStats)this.localMultiMapStatsDelegate.getLocalStats()).getLockedEntryCount(); }
  
  @ManagedAnnotation("localDirtyEntryCount")
  @ManagedDescription("the number of entries that the member owns and are dirty on this member")
  public long getLocalDirtyEntryCount() { return ((LocalMultiMapStats)this.localMultiMapStatsDelegate.getLocalStats()).getDirtyEntryCount(); }
  
  @ManagedAnnotation("localPutOperationCount")
  @ManagedDescription("the number of put operations on this member")
  public long getLocalPutOperationCount() { return ((LocalMultiMapStats)this.localMultiMapStatsDelegate.getLocalStats()).getPutOperationCount(); }
  
  @ManagedAnnotation("localGetOperationCount")
  @ManagedDescription("number of get operations on this member")
  public long getLocalGetOperationCount() { return ((LocalMultiMapStats)this.localMultiMapStatsDelegate.getLocalStats()).getGetOperationCount(); }
  
  @ManagedAnnotation("localRemoveOperationCount")
  @ManagedDescription("number of remove operations on this member")
  public long getLocalRemoveOperationCount() { return ((LocalMultiMapStats)this.localMultiMapStatsDelegate.getLocalStats()).getRemoveOperationCount(); }
  
  @ManagedAnnotation("localTotalPutLatency")
  @ManagedDescription("the total latency of put operations. To get the average latency, divide to number of puts")
  public long getLocalTotalPutLatency() { return ((LocalMultiMapStats)this.localMultiMapStatsDelegate.getLocalStats()).getTotalPutLatency(); }
  
  @ManagedAnnotation("localTotalGetLatency")
  @ManagedDescription("the total latency of get operations. To get the average latency, divide to number of gets")
  public long getLocalTotalGetLatency() { return ((LocalMultiMapStats)this.localMultiMapStatsDelegate.getLocalStats()).getTotalGetLatency(); }
  
  @ManagedAnnotation("localTotalRemoveLatency")
  @ManagedDescription("the total latency of remove operations. To get the average latency, divide to number of gets")
  public long getLocalTotalRemoveLatency() { return ((LocalMultiMapStats)this.localMultiMapStatsDelegate.getLocalStats()).getTotalRemoveLatency(); }
  
  @ManagedAnnotation("localMaxPutLatency")
  @ManagedDescription("the maximum latency of put operations. To get the average latency, divide to number of puts")
  public long getLocalMaxPutLatency() { return ((LocalMultiMapStats)this.localMultiMapStatsDelegate.getLocalStats()).getMaxPutLatency(); }
  
  @ManagedAnnotation("localMaxGetLatency")
  @ManagedDescription("the maximum latency of get operations. To get the average latency, divide to number of gets")
  public long getLocalMaxGetLatency() { return ((LocalMultiMapStats)this.localMultiMapStatsDelegate.getLocalStats()).getMaxGetLatency(); }
  
  @ManagedAnnotation("localMaxRemoveLatency")
  @ManagedDescription("the maximum latency of remove operations. To get the average latency, divide to number of gets")
  public long getMaxRemoveLatency() { return ((LocalMultiMapStats)this.localMultiMapStatsDelegate.getLocalStats()).getMaxRemoveLatency(); }
  
  @ManagedAnnotation("localEventOperationCount")
  @ManagedDescription("number of events received on this member")
  public long getLocalEventOperationCount() { return ((LocalMultiMapStats)this.localMultiMapStatsDelegate.getLocalStats()).getEventOperationCount(); }
  
  @ManagedAnnotation("localOtherOperationCount")
  @ManagedDescription("the total number of other operations on this member")
  public long getLocalOtherOperationCount() { return ((LocalMultiMapStats)this.localMultiMapStatsDelegate.getLocalStats()).getOtherOperationCount(); }
  
  @ManagedAnnotation("localTotal")
  @ManagedDescription("the total number of operations on this member")
  public long localTotal() { return ((LocalMultiMapStats)this.localMultiMapStatsDelegate.getLocalStats()).total(); }
  
  @ManagedAnnotation("name")
  public String getName() { return ((MultiMap)this.managedObject).getName(); }
  
  @ManagedAnnotation(value = "clear", operation = true)
  public void clear() { ((MultiMap)this.managedObject).clear(); }
  
  @ManagedAnnotation("size")
  public int getSize() { return ((MultiMap)this.managedObject).size(); }
  
  @ManagedAnnotation("config")
  @ManagedDescription("MultiMapConfig")
  public String getConfig() { return this.service.instance.getConfig().findMultiMapConfig(((MultiMap)this.managedObject).getName()).toString(); }
}
