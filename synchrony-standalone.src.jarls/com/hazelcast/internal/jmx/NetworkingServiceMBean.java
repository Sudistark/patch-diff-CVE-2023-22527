package com.hazelcast.internal.jmx;

import com.hazelcast.core.HazelcastInstance;
import com.hazelcast.instance.EndpointQualifier;
import com.hazelcast.nio.EndpointManager;
import com.hazelcast.nio.NetworkingService;
import com.hazelcast.util.MapUtil;
import java.util.Map;

@ManagedDescription("HazelcastInstance.NetworkingService")
public class NetworkingServiceMBean extends HazelcastMBean<NetworkingService> {
  private static final int PROPERTY_COUNT = 3;
  
  public NetworkingServiceMBean(HazelcastInstance hazelcastInstance, NetworkingService ns, ManagementService service) {
    super(ns, service);
    Map<String, String> properties = MapUtil.createHashMap(3);
    properties.put("type", ManagementService.quote("HazelcastInstance.NetworkingService"));
    properties.put("instance", ManagementService.quote(hazelcastInstance.getName()));
    properties.put("name", ManagementService.quote(hazelcastInstance.getName()));
    setObjectName(properties);
  }
  
  public NetworkingService getNetworkingService() { return (NetworkingService)this.managedObject; }
  
  @ManagedAnnotation("clientConnectionCount")
  @ManagedDescription("Current number of client connections")
  public int getCurrentClientConnections() {
    EndpointManager cem = getNetworkingService().getEndpointManager(EndpointQualifier.CLIENT);
    if (cem == null)
      return -1; 
    return cem.getActiveConnections().size();
  }
  
  @ManagedAnnotation("activeConnectionCount")
  @ManagedDescription("Current number of active connections")
  public int getActiveConnectionCount() { return getNetworkingService().getAggregateEndpointManager().getActiveConnections().size(); }
  
  @ManagedAnnotation("connectionCount")
  @ManagedDescription("Current number of connections")
  public int getConnectionCount() { return getNetworkingService().getAggregateEndpointManager().getConnections().size(); }
}
