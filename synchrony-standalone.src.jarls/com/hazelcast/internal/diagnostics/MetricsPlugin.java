package com.hazelcast.internal.diagnostics;

import com.hazelcast.internal.metrics.MetricsRegistry;
import com.hazelcast.logging.ILogger;
import com.hazelcast.spi.impl.NodeEngineImpl;
import com.hazelcast.spi.properties.HazelcastProperties;
import com.hazelcast.spi.properties.HazelcastProperty;
import java.util.concurrent.TimeUnit;

public class MetricsPlugin extends DiagnosticsPlugin {
  public static final HazelcastProperty PERIOD_SECONDS = new HazelcastProperty("hazelcast.diagnostics.metrics.period.seconds", 
      Integer.valueOf(60), TimeUnit.SECONDS);
  
  private final MetricsRegistry metricsRegistry;
  
  private final long periodMillis;
  
  private final ProbeRendererImpl probeRenderer = new ProbeRendererImpl(null);
  
  public MetricsPlugin(NodeEngineImpl nodeEngine) { this(nodeEngine.getLogger(MetricsPlugin.class), nodeEngine.getMetricsRegistry(), nodeEngine.getProperties()); }
  
  public MetricsPlugin(ILogger logger, MetricsRegistry metricsRegistry, HazelcastProperties properties) {
    super(logger);
    this.metricsRegistry = metricsRegistry;
    this.periodMillis = properties.getMillis(PERIOD_SECONDS);
  }
  
  public void onStart() { this.logger.info("Plugin:active, period-millis:" + this.periodMillis); }
  
  public long getPeriodMillis() { return this.periodMillis; }
  
  public void run(DiagnosticsLogWriter writer) {
    ProbeRendererImpl.access$102(this.probeRenderer, writer);
    ProbeRendererImpl.access$202(this.probeRenderer, System.currentTimeMillis());
    this.metricsRegistry.render(this.probeRenderer);
    ProbeRendererImpl.access$102(this.probeRenderer, null);
  }
}
