package com.hazelcast.internal.diagnostics;

import com.hazelcast.spi.impl.NodeEngineImpl;
import com.hazelcast.spi.impl.operationexecutor.OperationExecutor;
import com.hazelcast.spi.impl.operationservice.InternalOperationService;
import com.hazelcast.spi.impl.operationservice.impl.OperationServiceImpl;
import com.hazelcast.spi.properties.HazelcastProperties;
import com.hazelcast.spi.properties.HazelcastProperty;
import com.hazelcast.util.ItemCounter;
import java.util.concurrent.TimeUnit;

public class OperationThreadSamplerPlugin extends DiagnosticsPlugin {
  public static final HazelcastProperty PERIOD_SECONDS = new HazelcastProperty("hazelcast.diagnostics.operationthreadsamples.period.seconds", 
      Integer.valueOf(0), TimeUnit.SECONDS);
  
  public static final HazelcastProperty SAMPLER_PERIOD_MILLIS = new HazelcastProperty("hazelcast.diagnostics.operationthreadsamples.sampler.period.millis", 
      Integer.valueOf(100), TimeUnit.MILLISECONDS);
  
  public static final HazelcastProperty INCLUDE_NAME = new HazelcastProperty("hazelcast.diagnostics.operationthreadsamples.includeName", false);
  
  public static final float HUNDRED = 100.0F;
  
  private final long periodMillis;
  
  private final long samplerPeriodMillis;
  
  private final ItemCounter<String> partitionSpecificSamples = new ItemCounter();
  
  private final ItemCounter<String> genericSamples = new ItemCounter();
  
  private final OperationExecutor executor;
  
  private final NodeEngineImpl nodeEngine;
  
  private final boolean includeName;
  
  public OperationThreadSamplerPlugin(NodeEngineImpl nodeEngine) {
    super(nodeEngine.getLogger(OperationThreadSamplerPlugin.class));
    this.nodeEngine = nodeEngine;
    InternalOperationService operationService = nodeEngine.getOperationService();
    this.executor = ((OperationServiceImpl)operationService).getOperationExecutor();
    HazelcastProperties props = nodeEngine.getProperties();
    this.periodMillis = props.getMillis(PERIOD_SECONDS);
    this.samplerPeriodMillis = props.getMillis(SAMPLER_PERIOD_MILLIS);
    this.includeName = props.getBoolean(INCLUDE_NAME);
  }
  
  public long getPeriodMillis() { return this.periodMillis; }
  
  public void onStart() {
    this.logger.info("Plugin:active: period-millis:" + this.periodMillis + " sampler-period-millis:" + this.samplerPeriodMillis);
    (new SampleThread(this, null)).start();
  }
  
  public void run(DiagnosticsLogWriter writer) {
    writer.startSection("OperationThreadSamples");
    write(writer, "Partition", this.partitionSpecificSamples);
    write(writer, "Generic", this.genericSamples);
    writer.endSection();
  }
  
  private void write(DiagnosticsLogWriter writer, String text, ItemCounter<String> samples) {
    writer.startSection(text);
    long total = samples.total();
    for (String name : samples.descendingKeys()) {
      long s = samples.get(name);
      writer.writeKeyValueEntry(name, s + " " + (100.0F * (float)s / (float)total) + "%");
    } 
    writer.endSection();
  }
}
