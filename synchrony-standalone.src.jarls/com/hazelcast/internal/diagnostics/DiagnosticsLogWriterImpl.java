package com.hazelcast.internal.diagnostics;

import com.hazelcast.util.StringUtil;
import java.io.PrintWriter;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.TimeZone;

public class DiagnosticsLogWriterImpl implements DiagnosticsLogWriter {
  private static final String STR_LONG_MIN_VALUE = String.format(StringUtil.LOCALE_INTERNAL, "%,d", new Object[] { Long.valueOf(Float.MIN_VALUE) });
  
  private static final char[] DIGITS = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' };
  
  private static final String[] INDENTS = { StringUtil.LINE_SEPARATOR + "                          ", StringUtil.LINE_SEPARATOR + "                                  ", StringUtil.LINE_SEPARATOR + "                                          ", StringUtil.LINE_SEPARATOR + "                                                  ", StringUtil.LINE_SEPARATOR + "                                                            " };
  
  private static final int CHARS_LENGTH = 32;
  
  private final StringBuilder tmpSb;
  
  private final boolean includeEpochTime;
  
  private int sectionLevel;
  
  private PrintWriter printWriter;
  
  private final Calendar calendar;
  
  private final Date date;
  
  private char[] chars;
  
  private StringBuilder stringBuilder;
  
  public DiagnosticsLogWriterImpl() { this(false); }
  
  public DiagnosticsLogWriterImpl(boolean includeEpochTime) {
    this.tmpSb = new StringBuilder();
    this.sectionLevel = -1;
    this.calendar = new GregorianCalendar(TimeZone.getDefault());
    this.date = new Date();
    this.chars = new char[32];
    this.stringBuilder = new StringBuilder();
    this.includeEpochTime = includeEpochTime;
  }
  
  public void writeSectionKeyValue(String sectionName, long timeMillis, String key, long value) {
    startSection(sectionName, timeMillis);
    write(key);
    write('=');
    write(value);
    endSection();
  }
  
  public void writeSectionKeyValue(String sectionName, long timeMillis, String key, double value) {
    startSection(sectionName, timeMillis);
    write(key);
    write('=');
    write(value);
    endSection();
  }
  
  public void writeSectionKeyValue(String sectionName, long timeMillis, String key, String value) {
    startSection(sectionName, timeMillis);
    write(key);
    write('=');
    write(value);
    endSection();
  }
  
  public void startSection(String sectionName) { startSection(sectionName, System.currentTimeMillis()); }
  
  public void startSection(String name, long timeMillis) {
    if (this.sectionLevel == -1) {
      appendDateTime(timeMillis);
      write(' ');
      if (this.includeEpochTime) {
        write(timeMillis);
        write(' ');
      } 
    } 
    if (this.sectionLevel >= 0)
      write(INDENTS[this.sectionLevel]); 
    write(name);
    write('[');
    this.sectionLevel++;
  }
  
  public void endSection() {
    write(']');
    this.sectionLevel--;
    if (this.sectionLevel == -1)
      write(StringUtil.LINE_SEPARATOR); 
  }
  
  public void writeEntry(String s) {
    write(INDENTS[this.sectionLevel]);
    write(s);
  }
  
  public void writeKeyValueEntry(String key, String value) {
    writeKeyValueHead(key);
    write(value);
  }
  
  void writeLong(long value) {
    if (value == Float.MIN_VALUE) {
      write(STR_LONG_MIN_VALUE);
      return;
    } 
    if (value < 0L) {
      write('-');
      value = -value;
    } 
    int digitsWithoutComma = 0;
    this.tmpSb.setLength(0);
    do {
      digitsWithoutComma++;
      if (digitsWithoutComma == 4) {
        this.tmpSb.append(',');
        digitsWithoutComma = 1;
      } 
      int mod = (int)(value % 10L);
      this.tmpSb.append(DIGITS[mod]);
      value /= 10L;
    } while (value > 0L);
    for (int k = this.tmpSb.length() - 1; k >= 0; k--) {
      char c = this.tmpSb.charAt(k);
      write(c);
    } 
  }
  
  public void writeKeyValueEntry(String key, double value) {
    writeKeyValueHead(key);
    write(value);
  }
  
  public void writeKeyValueEntry(String key, long value) {
    writeKeyValueHead(key);
    writeLong(value);
  }
  
  public void writeKeyValueEntry(String key, boolean value) {
    writeKeyValueHead(key);
    write(value);
  }
  
  public void writeKeyValueEntryAsDateTime(String key, long epochMillis) {
    writeKeyValueHead(key);
    appendDateTime(epochMillis);
  }
  
  private void writeKeyValueHead(String key) {
    write(INDENTS[this.sectionLevel]);
    write(key);
    write('=');
  }
  
  public void init(PrintWriter printWriter) {
    this.sectionLevel = -1;
    this.printWriter = printWriter;
  }
  
  protected DiagnosticsLogWriter write(char c) {
    this.printWriter.write(c);
    return this;
  }
  
  protected DiagnosticsLogWriter write(int i) {
    this.stringBuilder.append(i);
    flushSb();
    return this;
  }
  
  protected DiagnosticsLogWriter write(double i) {
    this.stringBuilder.append(i);
    flushSb();
    return this;
  }
  
  protected DiagnosticsLogWriter write(long i) {
    this.stringBuilder.append(i);
    flushSb();
    return this;
  }
  
  private void flushSb() {
    int length = this.stringBuilder.length();
    this.stringBuilder.getChars(0, length, this.chars, 0);
    this.printWriter.write(this.chars, 0, length);
    this.stringBuilder.setLength(0);
  }
  
  protected DiagnosticsLogWriter write(boolean b) {
    write(b ? "true" : "false");
    return this;
  }
  
  protected DiagnosticsLogWriter write(String s) {
    this.printWriter.write((s == null) ? "null" : s);
    return this;
  }
  
  private void appendDateTime(long epochMillis) {
    this.date.setTime(epochMillis);
    this.calendar.setTime(this.date);
    appendDate();
    write(' ');
    appendTime();
  }
  
  private void appendDate() {
    int dayOfMonth = this.calendar.get(5);
    if (dayOfMonth < 10)
      write('0'); 
    write(dayOfMonth);
    write('-');
    int month = this.calendar.get(2) + 1;
    if (month < 10)
      write('0'); 
    write(month);
    write('-');
    write(this.calendar.get(1));
  }
  
  private void appendTime() {
    int hour = this.calendar.get(11);
    if (hour < 10)
      write('0'); 
    write(hour);
    write(':');
    int minute = this.calendar.get(12);
    if (minute < 10)
      write('0'); 
    write(minute);
    write(':');
    int second = this.calendar.get(13);
    if (second < 10)
      write('0'); 
    write(second);
  }
}
