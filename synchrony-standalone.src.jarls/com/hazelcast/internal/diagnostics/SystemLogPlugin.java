package com.hazelcast.internal.diagnostics;

import com.hazelcast.core.HazelcastInstance;
import com.hazelcast.core.LifecycleEvent;
import com.hazelcast.core.Member;
import com.hazelcast.core.MembershipEvent;
import com.hazelcast.core.MigrationEvent;
import com.hazelcast.instance.NodeExtension;
import com.hazelcast.logging.ILogger;
import com.hazelcast.nio.Address;
import com.hazelcast.nio.Connection;
import com.hazelcast.nio.ConnectionListenable;
import com.hazelcast.spi.impl.NodeEngineImpl;
import com.hazelcast.spi.properties.HazelcastProperties;
import com.hazelcast.spi.properties.HazelcastProperty;
import com.hazelcast.version.Version;
import java.util.Queue;
import java.util.Set;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.TimeUnit;

public class SystemLogPlugin extends DiagnosticsPlugin {
  public static final HazelcastProperty ENABLED = new HazelcastProperty("hazelcast.diagnostics.systemlog.enabled", "true");
  
  public static final HazelcastProperty LOG_PARTITIONS = new HazelcastProperty("hazelcast.diagnostics.systemlog.partitions", "false");
  
  private static final long PERIOD_MILLIS = TimeUnit.SECONDS.toMillis(1L);
  
  private final Queue<Object> logQueue = new ConcurrentLinkedQueue();
  
  private final ConnectionListenable connectionObservable;
  
  private final HazelcastInstance hazelcastInstance;
  
  private final Address thisAddress;
  
  private final boolean logPartitions;
  
  private final boolean enabled;
  
  private final NodeExtension nodeExtension;
  
  public SystemLogPlugin(NodeEngineImpl nodeEngine) {
    this(nodeEngine.getProperties(), 
        (nodeEngine.getNode()).networkingService.getAggregateEndpointManager(), nodeEngine
        .getHazelcastInstance(), nodeEngine
        .getLogger(SystemLogPlugin.class), nodeEngine
        .getNode().getNodeExtension());
  }
  
  public SystemLogPlugin(HazelcastProperties properties, ConnectionListenable connectionObservable, HazelcastInstance hazelcastInstance, ILogger logger) { this(properties, connectionObservable, hazelcastInstance, logger, null); }
  
  public SystemLogPlugin(HazelcastProperties properties, ConnectionListenable connectionObservable, HazelcastInstance hazelcastInstance, ILogger logger, NodeExtension nodeExtension) {
    super(logger);
    this.connectionObservable = connectionObservable;
    this.hazelcastInstance = hazelcastInstance;
    this.thisAddress = getThisAddress(hazelcastInstance);
    this.logPartitions = properties.getBoolean(LOG_PARTITIONS);
    this.enabled = properties.getBoolean(ENABLED);
    this.nodeExtension = nodeExtension;
  }
  
  private Address getThisAddress(HazelcastInstance hazelcastInstance) {
    try {
      return hazelcastInstance.getCluster().getLocalMember().getAddress();
    } catch (UnsupportedOperationException e) {
      return null;
    } 
  }
  
  public long getPeriodMillis() {
    if (!this.enabled)
      return 0L; 
    return PERIOD_MILLIS;
  }
  
  public void onStart() {
    this.logger.info("Plugin:active: logPartitions:" + this.logPartitions);
    this.connectionObservable.addConnectionListener(new ConnectionListenerImpl(this, null));
    this.hazelcastInstance.getCluster().addMembershipListener(new MembershipListenerImpl(this, null));
    if (this.logPartitions)
      this.hazelcastInstance.getPartitionService().addMigrationListener(new MigrationListenerImpl(this, null)); 
    this.hazelcastInstance.getLifecycleService().addLifecycleListener(new LifecycleListenerImpl(this, null));
    if (this.nodeExtension != null)
      this.nodeExtension.registerListener(new ClusterVersionListenerImpl(this, null)); 
  }
  
  public void run(DiagnosticsLogWriter writer) {
    while (true) {
      Object item = this.logQueue.poll();
      if (item == null)
        return; 
      if (item instanceof LifecycleEvent) {
        render(writer, (LifecycleEvent)item);
        continue;
      } 
      if (item instanceof MembershipEvent) {
        render(writer, (MembershipEvent)item);
        continue;
      } 
      if (item instanceof MigrationEvent) {
        render(writer, (MigrationEvent)item);
        continue;
      } 
      if (item instanceof ConnectionEvent) {
        ConnectionEvent event = (ConnectionEvent)item;
        render(writer, event);
        continue;
      } 
      if (item instanceof Version)
        render(writer, (Version)item); 
    } 
  }
  
  private void render(DiagnosticsLogWriter writer, LifecycleEvent event) {
    writer.startSection("Lifecycle");
    writer.writeEntry(event.getState().name());
    writer.endSection();
  }
  
  private void render(DiagnosticsLogWriter writer, MembershipEvent event) {
    switch (event.getEventType()) {
      case 1:
        writer.startSection("MemberAdded");
        break;
      case 2:
        writer.startSection("MemberRemoved");
        break;
      default:
        return;
    } 
    writer.writeKeyValueEntry("member", event.getMember().getAddress().toString());
    writer.startSection("Members");
    Set<Member> members = event.getMembers();
    if (members != null) {
      boolean first = true;
      for (Member member : members) {
        if (member.getAddress().equals(this.thisAddress)) {
          if (first) {
            writer.writeEntry(member.getAddress().toString() + ":this:master");
          } else {
            writer.writeEntry(member.getAddress().toString() + ":this");
          } 
        } else if (first) {
          writer.writeEntry(member.getAddress().toString() + ":master");
        } else {
          writer.writeEntry(member.getAddress().toString());
        } 
        first = false;
      } 
    } 
    writer.endSection();
    writer.endSection();
  }
  
  private void render(DiagnosticsLogWriter writer, MigrationEvent event) {
    switch (null.$SwitchMap$com$hazelcast$core$MigrationEvent$MigrationStatus[event.getStatus().ordinal()]) {
      case 1:
        writer.startSection("MigrationStarted");
        break;
      case 2:
        writer.startSection("MigrationCompleted");
        break;
      case 3:
        writer.startSection("MigrationFailed");
        break;
      default:
        return;
    } 
    Member oldOwner = event.getOldOwner();
    writer.writeKeyValueEntry("oldOwner", (oldOwner == null) ? "null" : oldOwner.getAddress().toString());
    writer.writeKeyValueEntry("newOwner", event.getNewOwner().getAddress().toString());
    writer.writeKeyValueEntry("partitionId", event.getPartitionId());
    writer.endSection();
  }
  
  private void render(DiagnosticsLogWriter writer, ConnectionEvent event) {
    if (event.added) {
      writer.startSection("ConnectionAdded");
    } else {
      writer.startSection("ConnectionRemoved");
    } 
    Connection connection = event.connection;
    writer.writeEntry(connection.toString());
    writer.writeKeyValueEntry("type", connection.getType().name());
    writer.writeKeyValueEntry("isAlive", connection.isAlive());
    if (!event.added) {
      String closeReason = connection.getCloseReason();
      Throwable closeCause = connection.getCloseCause();
      if (closeReason == null && closeCause != null)
        closeReason = closeCause.getMessage(); 
      writer.writeKeyValueEntry("closeReason", (closeReason == null) ? "Unknown" : closeReason);
      if (closeCause != null) {
        writer.startSection("CloseCause");
        String s = closeCause.getClass().getName();
        String message = closeCause.getMessage();
        writer.writeEntry((message != null) ? (s + ": " + message) : s);
        for (StackTraceElement element : closeCause.getStackTrace())
          writer.writeEntry(element.toString()); 
        writer.endSection();
      } 
    } 
    writer.endSection();
  }
  
  private void render(DiagnosticsLogWriter writer, Version version) {
    writer.startSection("ClusterVersionChanged");
    writer.writeEntry(version.toString());
    writer.endSection();
  }
}
