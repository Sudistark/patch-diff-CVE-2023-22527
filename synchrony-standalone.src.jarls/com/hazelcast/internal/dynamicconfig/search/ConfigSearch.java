package com.hazelcast.internal.dynamicconfig.search;

import com.hazelcast.config.Config;
import com.hazelcast.config.ConfigPatternMatcher;
import com.hazelcast.internal.dynamicconfig.ConfigurationService;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;

public final class ConfigSearch {
  private static final Map<Class, ConfigSupplier> CONFIG_SUPPLIERS = new ConcurrentHashMap();
  
  static  {
    CONFIG_SUPPLIERS.put(com.hazelcast.config.MapConfig.class, new Object());
    CONFIG_SUPPLIERS.put(com.hazelcast.config.CacheSimpleConfig.class, new Object());
    CONFIG_SUPPLIERS.put(com.hazelcast.config.QueueConfig.class, new Object());
    CONFIG_SUPPLIERS.put(com.hazelcast.config.LockConfig.class, new Object());
    CONFIG_SUPPLIERS.put(com.hazelcast.config.ListConfig.class, new Object());
    CONFIG_SUPPLIERS.put(com.hazelcast.config.SetConfig.class, new Object());
    CONFIG_SUPPLIERS.put(com.hazelcast.config.MultiMapConfig.class, new Object());
    CONFIG_SUPPLIERS.put(com.hazelcast.config.ReplicatedMapConfig.class, new Object());
    CONFIG_SUPPLIERS.put(com.hazelcast.config.RingbufferConfig.class, new Object());
    CONFIG_SUPPLIERS.put(com.hazelcast.config.AtomicLongConfig.class, new Object());
    CONFIG_SUPPLIERS.put(com.hazelcast.config.AtomicReferenceConfig.class, new Object());
    CONFIG_SUPPLIERS.put(com.hazelcast.config.CountDownLatchConfig.class, new Object());
    CONFIG_SUPPLIERS.put(com.hazelcast.config.TopicConfig.class, new Object());
    CONFIG_SUPPLIERS.put(com.hazelcast.config.ReliableTopicConfig.class, new Object());
    CONFIG_SUPPLIERS.put(com.hazelcast.config.ExecutorConfig.class, new Object());
    CONFIG_SUPPLIERS.put(com.hazelcast.config.DurableExecutorConfig.class, new Object());
    CONFIG_SUPPLIERS.put(com.hazelcast.config.ScheduledExecutorConfig.class, new Object());
    CONFIG_SUPPLIERS.put(com.hazelcast.config.CardinalityEstimatorConfig.class, new Object());
    CONFIG_SUPPLIERS.put(com.hazelcast.config.SemaphoreConfig.class, new Object());
    CONFIG_SUPPLIERS.put(com.hazelcast.config.FlakeIdGeneratorConfig.class, new Object());
    CONFIG_SUPPLIERS.put(com.hazelcast.config.PNCounterConfig.class, new Object());
  }
  
  @Nullable
  public static <T extends com.hazelcast.nio.serialization.IdentifiedDataSerializable> ConfigSupplier<T> supplierFor(@Nonnull Class<T> cls) { return (ConfigSupplier)CONFIG_SUPPLIERS.get(cls); }
  
  @Nonnull
  public static <T extends com.hazelcast.nio.serialization.IdentifiedDataSerializable> Searcher<T> searcherFor(@Nonnull Config staticConfig, @Nonnull ConfigurationService configurationService, @Nonnull ConfigPatternMatcher configPatternMatcher, boolean isStaticFirst) { return isStaticFirst ? new StaticFirstSearcher(configurationService, staticConfig, configPatternMatcher) : new DynamicFirstSearcher(configurationService, staticConfig, configPatternMatcher); }
}
