package com.hazelcast.internal.nearcache.impl.invalidation;

import com.hazelcast.util.ConcurrencyUtil;
import com.hazelcast.util.ConstructorFunction;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.atomic.AtomicLongArray;

public class MetaDataGenerator {
  private final int partitionCount;
  
  private final ConstructorFunction<String, AtomicLongArray> sequenceGeneratorConstructor = new Object(this);
  
  private final ConcurrentMap<Integer, UUID> uuids = new ConcurrentHashMap();
  
  private final ConcurrentMap<String, AtomicLongArray> sequenceGenerators = new ConcurrentHashMap();
  
  private final ConstructorFunction<Integer, UUID> uuidConstructor = new Object(this);
  
  public MetaDataGenerator(int partitionCount) {
    assert partitionCount > 0;
    this.partitionCount = partitionCount;
  }
  
  public long currentSequence(String name, int partitionId) {
    AtomicLongArray sequences = (AtomicLongArray)this.sequenceGenerators.get(name);
    if (sequences == null)
      return 0L; 
    return sequences.get(partitionId);
  }
  
  public long nextSequence(String name, int partitionId) { return sequenceGenerator(name).incrementAndGet(partitionId); }
  
  public void setCurrentSequence(String name, int partitionId, long sequence) { sequenceGenerator(name).set(partitionId, sequence); }
  
  private AtomicLongArray sequenceGenerator(String name) { return (AtomicLongArray)ConcurrencyUtil.getOrPutIfAbsent(this.sequenceGenerators, name, this.sequenceGeneratorConstructor); }
  
  public UUID getOrCreateUuid(int partitionId) { return (UUID)ConcurrencyUtil.getOrPutIfAbsent(this.uuids, Integer.valueOf(partitionId), this.uuidConstructor); }
  
  public UUID getUuidOrNull(int partitionId) { return (UUID)this.uuids.get(Integer.valueOf(partitionId)); }
  
  public void setUuid(int partitionId, UUID uuid) { this.uuids.put(Integer.valueOf(partitionId), uuid); }
  
  public void removeUuidAndSequence(int partitionId) {
    this.uuids.remove(Integer.valueOf(partitionId));
    for (AtomicLongArray sequences : this.sequenceGenerators.values())
      sequences.set(partitionId, 0L); 
  }
  
  public void destroyMetaDataFor(String dataStructureName) { this.sequenceGenerators.remove(dataStructureName); }
  
  public void regenerateUuid(int partitionId) { this.uuids.put(Integer.valueOf(partitionId), this.uuidConstructor.createNew(Integer.valueOf(partitionId))); }
  
  public void resetSequence(String name, int partitionId) { sequenceGenerator(name).set(partitionId, 0L); }
  
  public ConcurrentMap<String, AtomicLongArray> getSequenceGenerators() { return this.sequenceGenerators; }
}
