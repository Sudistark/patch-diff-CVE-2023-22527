package com.hazelcast.internal.eviction;

import com.hazelcast.config.EvictionPolicy;
import com.hazelcast.internal.eviction.impl.comparator.LFUEvictionPolicyComparator;
import com.hazelcast.internal.eviction.impl.comparator.LRUEvictionPolicyComparator;
import com.hazelcast.internal.eviction.impl.comparator.RandomEvictionPolicyComparator;
import com.hazelcast.internal.eviction.impl.evaluator.EvictionPolicyEvaluator;
import com.hazelcast.nio.ClassLoaderUtil;
import com.hazelcast.util.ExceptionUtil;
import com.hazelcast.util.Preconditions;
import com.hazelcast.util.StringUtil;

public final class EvictionPolicyEvaluatorProvider {
  private static EvictionPolicyComparator createEvictionPolicyComparator(EvictionPolicy evictionPolicy) {
    switch (null.$SwitchMap$com$hazelcast$config$EvictionPolicy[evictionPolicy.ordinal()]) {
      case 1:
        return new LRUEvictionPolicyComparator();
      case 2:
        return new LFUEvictionPolicyComparator();
      case 3:
        return new RandomEvictionPolicyComparator();
      case 4:
        return null;
    } 
    throw new IllegalArgumentException("Unsupported eviction policy: " + evictionPolicy);
  }
  
  public static <A, E extends Evictable> EvictionPolicyEvaluator<A, E> getEvictionPolicyEvaluator(EvictionConfiguration evictionConfig, ClassLoader classLoader) {
    EvictionPolicyComparator evictionPolicyComparator;
    Preconditions.checkNotNull(evictionConfig);
    String evictionPolicyComparatorClassName = evictionConfig.getComparatorClassName();
    if (!StringUtil.isNullOrEmpty(evictionPolicyComparatorClassName)) {
      try {
        evictionPolicyComparator = (EvictionPolicyComparator)ClassLoaderUtil.newInstance(classLoader, evictionPolicyComparatorClassName);
      } catch (Exception e) {
        throw ExceptionUtil.rethrow(e);
      } 
    } else {
      EvictionPolicyComparator comparator = evictionConfig.getComparator();
      if (comparator != null) {
        evictionPolicyComparator = comparator;
      } else {
        evictionPolicyComparator = createEvictionPolicyComparator(evictionConfig.getEvictionPolicy());
      } 
    } 
    return new EvictionPolicyEvaluator(evictionPolicyComparator);
  }
}
