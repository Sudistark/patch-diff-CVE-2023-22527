package com.hazelcast.internal.eviction;

import com.hazelcast.util.Preconditions;

public abstract class CompositeEvictionChecker implements EvictionChecker {
  protected final EvictionChecker[] evictionCheckers;
  
  protected CompositeEvictionChecker(EvictionChecker... evictionCheckers) { this.evictionCheckers = evictionCheckers; }
  
  public static CompositeEvictionChecker newCompositeEvictionChecker(CompositionOperator compositionOperator, EvictionChecker... evictionCheckers) {
    Preconditions.isNotNull(compositionOperator, "composition");
    Preconditions.isNotNull(evictionCheckers, "evictionCheckers");
    if (evictionCheckers.length == 0)
      throw new IllegalArgumentException("EvictionCheckers cannot be empty!"); 
    switch (null.$SwitchMap$com$hazelcast$internal$eviction$CompositeEvictionChecker$CompositionOperator[compositionOperator.ordinal()]) {
      case 1:
        return new CompositeEvictionCheckerWithAndComposition(evictionCheckers, null);
      case 2:
        return new CompositeEvictionCheckerWithOrComposition(evictionCheckers, null);
    } 
    throw new IllegalArgumentException("Invalid composition operator: " + compositionOperator);
  }
}
