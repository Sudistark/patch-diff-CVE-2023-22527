package com.hazelcast.internal.eviction.impl.evaluator;

import com.hazelcast.internal.eviction.Evictable;
import com.hazelcast.internal.eviction.EvictionCandidate;
import com.hazelcast.internal.eviction.EvictionPolicyComparator;
import com.hazelcast.internal.eviction.Expirable;
import com.hazelcast.util.Clock;
import java.util.Iterator;

public class EvictionPolicyEvaluator<A, E extends Evictable> extends Object {
  private final EvictionPolicyComparator evictionPolicyComparator;
  
  public EvictionPolicyEvaluator(EvictionPolicyComparator evictionPolicyComparator) { this.evictionPolicyComparator = evictionPolicyComparator; }
  
  public EvictionPolicyComparator getEvictionPolicyComparator() { return this.evictionPolicyComparator; }
  
  public <C extends EvictionCandidate<A, E>> C evaluate(Iterable<C> evictionCandidates) {
    C selectedEvictionCandidate = null;
    long now = Clock.currentTimeMillis();
    for (Iterator iterator = evictionCandidates.iterator(); iterator.hasNext(); ) {
      C currentEvictionCandidate = (C)(EvictionCandidate)iterator.next();
      if (selectedEvictionCandidate == null) {
        selectedEvictionCandidate = currentEvictionCandidate;
        continue;
      } 
      E evictable = (E)currentEvictionCandidate.getEvictable();
      if (isExpired(now, evictable))
        return currentEvictionCandidate; 
      int comparisonResult = this.evictionPolicyComparator.compare(selectedEvictionCandidate, currentEvictionCandidate);
      if (comparisonResult == 1)
        selectedEvictionCandidate = currentEvictionCandidate; 
    } 
    return selectedEvictionCandidate;
  }
  
  private boolean isExpired(long now, Evictable evictable) {
    boolean expired = false;
    if (evictable instanceof Expirable) {
      Expirable expirable = (Expirable)evictable;
      expired = expirable.isExpiredAt(now);
    } 
    return expired;
  }
}
