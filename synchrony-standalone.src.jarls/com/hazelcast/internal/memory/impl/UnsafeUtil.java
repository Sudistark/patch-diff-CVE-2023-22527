package com.hazelcast.internal.memory.impl;

import com.hazelcast.logging.ILogger;
import com.hazelcast.logging.Logger;
import com.hazelcast.util.QuickMath;
import java.security.AccessController;
import sun.misc.Unsafe;

public final class UnsafeUtil {
  public static final boolean UNSAFE_AVAILABLE;
  
  public static final Unsafe UNSAFE;
  
  private static final ILogger LOGGER = Logger.getLogger(UnsafeUtil.class);
  
  static  {
    try {
      unsafe = findUnsafe();
      if (unsafe != null)
        checkUnsafeInstance(unsafe); 
    } catch (Throwable t) {
      unsafe = null;
      logFailureToFindUnsafeDueTo(t);
    } 
    UNSAFE = unsafe;
    UNSAFE_AVAILABLE = (UNSAFE != null);
  }
  
  private static Unsafe findUnsafe() {
    try {
      return Unsafe.getUnsafe();
    } catch (SecurityException se) {
      return (Unsafe)AccessController.doPrivileged(new Object());
    } 
  }
  
  private static void checkUnsafeInstance(Unsafe unsafe) {
    long arrayBaseOffset = unsafe.arrayBaseOffset(byte[].class);
    byte[] buffer = new byte[(int)arrayBaseOffset + 16];
    unsafe.putByte(buffer, arrayBaseOffset, (byte)0);
    unsafe.putBoolean(buffer, arrayBaseOffset, false);
    unsafe.putChar(buffer, QuickMath.normalize(arrayBaseOffset, 2), '0');
    unsafe.putShort(buffer, QuickMath.normalize(arrayBaseOffset, 2), (short)1);
    unsafe.putInt(buffer, QuickMath.normalize(arrayBaseOffset, 4), 2);
    unsafe.putFloat(buffer, QuickMath.normalize(arrayBaseOffset, 4), 3.0F);
    unsafe.putLong(buffer, QuickMath.normalize(arrayBaseOffset, 8), 4L);
    unsafe.putDouble(buffer, QuickMath.normalize(arrayBaseOffset, 8), 5.0D);
    unsafe.copyMemory(new byte[buffer.length], arrayBaseOffset, buffer, arrayBaseOffset, buffer.length);
  }
  
  private static void logFailureToFindUnsafeDueTo(Throwable reason) {
    if (LOGGER.isFinestEnabled()) {
      LOGGER.finest("Unable to get an instance of Unsafe. Unsafe-based operations will be unavailable", reason);
    } else {
      LOGGER.warning("Unable to get an instance of Unsafe. Unsafe-based operations will be unavailable");
    } 
  }
}
