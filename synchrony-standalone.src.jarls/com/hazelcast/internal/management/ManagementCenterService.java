package com.hazelcast.internal.management;

import com.hazelcast.config.ManagementCenterConfig;
import com.hazelcast.core.Member;
import com.hazelcast.instance.HazelcastInstanceImpl;
import com.hazelcast.internal.ascii.rest.HttpCommand;
import com.hazelcast.internal.json.JsonObject;
import com.hazelcast.internal.management.events.Event;
import com.hazelcast.internal.management.operation.UpdateManagementCenterUrlOperation;
import com.hazelcast.logging.ILogger;
import com.hazelcast.nio.Address;
import com.hazelcast.spi.InternalCompletableFuture;
import com.hazelcast.spi.Operation;
import com.hazelcast.spi.impl.operationservice.InternalOperationService;
import com.hazelcast.util.EmptyStatement;
import com.hazelcast.util.ExceptionUtil;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Collection;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicReference;

public class ManagementCenterService {
  private static final int HTTP_SUCCESS = 200;
  
  private static final int HTTP_NOT_MODIFIED = 304;
  
  private static final int CONNECTION_TIMEOUT_MILLIS = 5000;
  
  private static final long SLEEP_BETWEEN_POLL_MILLIS = 1000L;
  
  private static final long DEFAULT_UPDATE_INTERVAL = 3000L;
  
  private static final long EVENT_SEND_INTERVAL_MILLIS = 1000L;
  
  private final HazelcastInstanceImpl instance;
  
  private final TaskPollThread taskPollThread;
  
  private final StateSendThread stateSendThread;
  
  private final PrepareStateThread prepareStateThread;
  
  private final EventSendThread eventSendThread;
  
  private final ILogger logger;
  
  private final ConsoleCommandHandler commandHandler;
  
  private final ManagementCenterConfig managementCenterConfig;
  
  private final AtomicBoolean isRunning;
  
  private final TimedMemberStateFactory timedMemberStateFactory;
  
  private final ManagementCenterConnectionFactory connectionFactory;
  
  private final AtomicReference<TimedMemberState> timedMemberState;
  
  private final BlockingQueue<Event> events;
  
  public ManagementCenterService(HazelcastInstanceImpl instance) {
    this.isRunning = new AtomicBoolean(false);
    this.timedMemberState = new AtomicReference();
    this.events = new LinkedBlockingQueue();
    this.instance = instance;
    this.logger = instance.node.getLogger(ManagementCenterService.class);
    this.managementCenterConfig = getManagementCenterConfig();
    this.managementCenterUrl = getManagementCenterUrl();
    this.commandHandler = new ConsoleCommandHandler(instance);
    this.taskPollThread = new TaskPollThread(this);
    this.stateSendThread = new StateSendThread(this, null);
    this.prepareStateThread = new PrepareStateThread(this, null);
    this.eventSendThread = new EventSendThread(this, null);
    this.timedMemberStateFactory = instance.node.getNodeExtension().createTimedMemberStateFactory(instance);
    this.connectionFactory = instance.node.getNodeExtension().getManagementCenterConnectionFactory();
    if (this.managementCenterConfig.isEnabled()) {
      this.instance.getCluster().addMembershipListener(new MemberListenerImpl(this));
      start();
    } 
  }
  
  private String getManagementCenterUrl() { return this.managementCenterConfig.getUrl(); }
  
  private ManagementCenterConfig getManagementCenterConfig() {
    ManagementCenterConfig config = this.instance.node.config.getManagementCenterConfig();
    if (config == null)
      throw new IllegalStateException("ManagementCenterConfig can't be null!"); 
    return config;
  }
  
  static String cleanupUrl(String url) {
    if (url == null)
      return null; 
    return url.endsWith("/") ? url : (url + '/');
  }
  
  private void start() {
    if (this.managementCenterUrl == null) {
      this.logger.warning("Can't start Hazelcast Management Center Service: web-server URL is null!");
      return;
    } 
    if (!this.isRunning.compareAndSet(false, true))
      return; 
    this.timedMemberStateFactory.init();
    try {
      if (this.connectionFactory != null)
        this.connectionFactory.init(this.managementCenterConfig.getMutualAuthConfig()); 
    } catch (Exception e) {
      throw ExceptionUtil.rethrow(e);
    } 
    this.taskPollThread.start();
    this.prepareStateThread.start();
    this.stateSendThread.start();
    this.eventSendThread.start();
    this.logger.info("Hazelcast will connect to Hazelcast Management Center on address: \n" + this.managementCenterUrl);
  }
  
  public void shutdown() {
    if (!this.isRunning.compareAndSet(true, false))
      return; 
    this.logger.info("Shutting down Hazelcast Management Center Service");
    try {
      interruptThread(this.stateSendThread);
      interruptThread(this.taskPollThread);
      interruptThread(this.prepareStateThread);
      interruptThread(this.eventSendThread);
    } catch (Throwable ignored) {
      EmptyStatement.ignore(ignored);
    } 
  }
  
  public byte[] clusterWideUpdateManagementCenterUrl(String newUrl) {
    try {
      Collection<Member> memberList = this.instance.node.clusterService.getMembers();
      for (Member member : memberList)
        send(member.getAddress(), new UpdateManagementCenterUrlOperation(newUrl)); 
      return HttpCommand.RES_204;
    } catch (Throwable throwable) {
      this.logger.warning("New Management Center url cannot be assigned.", throwable);
      return HttpCommand.RES_500;
    } 
  }
  
  public void updateManagementCenterUrl(String newUrl) {
    if (newUrl == null)
      return; 
    if (newUrl.equals(this.managementCenterUrl))
      return; 
    this.managementCenterUrl = newUrl;
    if (!isRunning())
      start(); 
    this.urlChanged = true;
    this.logger.info("Management Center URL has changed. Hazelcast will connect to Management Center on address:\n" + this.managementCenterUrl);
  }
  
  private void interruptThread(Thread thread) {
    if (thread != null)
      thread.interrupt(); 
  }
  
  public InternalCompletableFuture<Object> callOnAddress(Address address, Operation operation) {
    InternalOperationService internalOperationService = this.instance.node.nodeEngine.getOperationService();
    return internalOperationService.invokeOnTarget("hz:impl:mapService", operation, address);
  }
  
  public InternalCompletableFuture<Object> callOnThis(Operation operation) { return callOnAddress(this.instance.node.getThisAddress(), operation); }
  
  public JsonObject syncCallOnThis(Operation operation) {
    InternalCompletableFuture<Object> future = callOnThis(operation);
    JsonObject result = new JsonObject();
    try {
      Object operationResult = future.get();
      if (operationResult == null) {
        result.add("result", "success");
      } else {
        result.add("result", operationResult.toString());
      } 
    } catch (ExecutionException e) {
      result.add("result", e.getMessage());
      result.add("stackTrace", ExceptionUtil.toString(e));
    } catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      result.add("result", e.getMessage());
      result.add("stackTrace", ExceptionUtil.toString(e));
    } 
    return result;
  }
  
  public InternalCompletableFuture<Object> callOnMember(Member member, Operation operation) { return callOnAddress(member.getAddress(), operation); }
  
  public static Object resolveFuture(Future<Object> future) {
    try {
      return future.get();
    } catch (Throwable t) {
      return ExceptionUtil.toString(t);
    } 
  }
  
  public void send(Address address, Operation operation) {
    InternalOperationService internalOperationService = this.instance.node.nodeEngine.getOperationService();
    internalOperationService.createInvocationBuilder("hz:impl:mapService", operation, address).invoke();
  }
  
  public HazelcastInstanceImpl getHazelcastInstance() { return this.instance; }
  
  public ConsoleCommandHandler getCommandHandler() { return this.commandHandler; }
  
  public void log(Event event) {
    if (this.managementCenterConfig.isEnabled() && isRunning())
      this.events.add(event); 
  }
  
  private boolean isRunning() { return this.isRunning.get(); }
  
  private boolean post(HttpURLConnection connection) throws IOException {
    int responseCode = connection.getResponseCode();
    if (responseCode != 200 && !this.manCenterConnectionLost)
      this.logger.warning("Failed to send response, responseCode:" + responseCode + " url:" + connection.getURL()); 
    return (responseCode == 200);
  }
  
  private HttpURLConnection openJsonConnection(URL url) throws IOException {
    if (this.logger.isFinestEnabled())
      this.logger.finest("Opening connection to Management Center:" + url); 
    HttpURLConnection connection = (HttpURLConnection)((this.connectionFactory != null) ? this.connectionFactory.openConnection(url) : url.openConnection());
    connection.setDoOutput(true);
    connection.setConnectTimeout(5000);
    connection.setReadTimeout(5000);
    connection.setRequestProperty("Accept", "application/json");
    connection.setRequestProperty("Content-Type", "application/json");
    connection.setRequestMethod("POST");
    return connection;
  }
  
  private static void sleepIfPossible(long updateIntervalMs, long elapsedMs) throws InterruptedException {
    long sleepTimeMs = updateIntervalMs - elapsedMs;
    if (sleepTimeMs > 0L)
      Thread.sleep(sleepTimeMs); 
  }
  
  private void log(String msg, Throwable t) {
    if (this.logger.isFinestEnabled()) {
      this.logger.finest(msg, t);
    } else {
      this.logger.info(msg);
    } 
  }
}
