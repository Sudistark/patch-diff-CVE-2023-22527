package com.hazelcast.internal.cluster.fd;

import com.hazelcast.core.Member;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

public class DeadlineClusterFailureDetector implements ClusterFailureDetector {
  private final long maxNoHeartbeatMillis;
  
  private final ConcurrentMap<Member, Long> heartbeatTimes;
  
  public DeadlineClusterFailureDetector(long maxNoHeartbeatMillis) {
    this.heartbeatTimes = new ConcurrentHashMap();
    this.maxNoHeartbeatMillis = maxNoHeartbeatMillis;
  }
  
  public void heartbeat(Member member, long timestamp) { this.heartbeatTimes.put(member, Long.valueOf(timestamp)); }
  
  public boolean isAlive(Member member, long timestamp) {
    long hb = lastHeartbeat(member);
    return (hb + this.maxNoHeartbeatMillis > timestamp);
  }
  
  public long lastHeartbeat(Member member) {
    Long hb = (Long)this.heartbeatTimes.get(member);
    return (hb != null) ? hb.longValue() : 0L;
  }
  
  public double suspicionLevel(Member member, long timestamp) { return isAlive(member, timestamp) ? 0.0D : 1.0D; }
  
  public void remove(Member member) { this.heartbeatTimes.remove(member); }
  
  public void reset() { this.heartbeatTimes.clear(); }
}
