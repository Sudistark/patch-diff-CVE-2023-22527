package com.hazelcast.internal.cluster.impl.operations;

import com.hazelcast.cluster.ClusterState;
import com.hazelcast.core.Member;
import com.hazelcast.instance.MemberImpl;
import com.hazelcast.instance.Node;
import com.hazelcast.internal.cluster.impl.ClusterServiceImpl;
import com.hazelcast.internal.cluster.impl.SplitBrainJoinMessage;
import com.hazelcast.logging.ILogger;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.spi.impl.NodeEngineImpl;
import java.io.IOException;

public class SplitBrainMergeValidationOp extends AbstractJoinOperation {
  private SplitBrainJoinMessage request;
  
  private SplitBrainJoinMessage response;
  
  private Member suspectedCaller;
  
  public SplitBrainMergeValidationOp() {}
  
  public SplitBrainMergeValidationOp(SplitBrainJoinMessage request) { this.request = request; }
  
  public void run() {
    NodeEngineImpl nodeEngine = (NodeEngineImpl)getNodeEngine();
    Node node = nodeEngine.getNode();
    if (!preCheck(node))
      return; 
    if (!masterCheck())
      return; 
    if (this.request != null) {
      ILogger logger = getLogger();
      if (checkSplitBrainJoinMessage())
        this.response = node.createSplitBrainJoinMessage(); 
      if (logger.isFineEnabled())
        logger.fine("Returning " + this.response + " to " + getCallerAddress()); 
    } 
  }
  
  public void afterRun() {
    if (this.suspectedCaller != null) {
      ClusterServiceImpl service = (ClusterServiceImpl)getService();
      String reason = "Removing " + this.suspectedCaller + ", since it thinks it's already split from this cluster and looking to merge.";
      service.suspectMember(this.suspectedCaller, reason, true);
    } 
  }
  
  private boolean preCheck(Node node) {
    ILogger logger = getLogger();
    ClusterServiceImpl clusterServiceImpl = node.getClusterService();
    if (!clusterServiceImpl.isJoined()) {
      logger.info("Ignoring join check from " + getCallerAddress() + ", because this node is not joined to a cluster yet...");
      return false;
    } 
    if (!node.isRunning()) {
      logger.info("Ignoring join check from " + getCallerAddress() + " because this node is not active...");
      return false;
    } 
    ClusterState clusterState = clusterServiceImpl.getClusterState();
    if (!clusterState.isJoinAllowed()) {
      logger.info("Ignoring join check from " + getCallerAddress() + " because cluster is in " + clusterState + " state...");
      return false;
    } 
    return true;
  }
  
  private boolean masterCheck() {
    ILogger logger = getLogger();
    ClusterServiceImpl service = (ClusterServiceImpl)getService();
    if (service.isMaster()) {
      MemberImpl memberImpl = service.getMembershipManager().getMember(this.request.getAddress(), this.request.getUuid());
      if (memberImpl != null) {
        logger.info("Removing " + this.suspectedCaller + ", since it thinks it's already split from this cluster and looking to merge.");
        this.suspectedCaller = memberImpl;
      } 
      return true;
    } 
    logger.info("Ignoring join check from " + getCallerAddress() + ", because this node is not master...");
    return false;
  }
  
  private boolean checkSplitBrainJoinMessage() {
    ClusterServiceImpl service = (ClusterServiceImpl)getService();
    ILogger logger = getLogger();
    try {
      if (!service.getClusterJoinManager().validateJoinMessage(this.request))
        return false; 
      if (!service.getClusterVersion().equals(this.request.getClusterVersion())) {
        logger.info("Join check from " + getCallerAddress() + " failed validation due to incompatible version,remote cluster version is " + this.request
            .getClusterVersion() + ", this cluster is " + service
            .getClusterVersion());
        return false;
      } 
      SplitBrainJoinMessage.SplitBrainMergeCheckResult result = service.getClusterJoinManager().shouldMerge(this.request);
      if (result == SplitBrainJoinMessage.SplitBrainMergeCheckResult.REMOTE_NODE_SHOULD_MERGE)
        return service.getMembershipManager().verifySplitBrainMergeMemberListVersion(this.request); 
      return (result != SplitBrainJoinMessage.SplitBrainMergeCheckResult.CANNOT_MERGE);
    } catch (Exception e) {
      if (logger.isFineEnabled())
        logger.fine("Could not validate split-brain join message! -> " + e.getMessage()); 
      return false;
    } 
  }
  
  public Object getResponse() { return this.response; }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    this.request = new SplitBrainJoinMessage();
    this.request.readData(in);
  }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException { this.request.writeData(out); }
  
  public int getId() { return 13; }
}
