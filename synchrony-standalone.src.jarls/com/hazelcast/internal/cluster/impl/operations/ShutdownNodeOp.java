package com.hazelcast.internal.cluster.impl.operations;

import com.hazelcast.cluster.ClusterState;
import com.hazelcast.internal.cluster.impl.ClusterServiceImpl;
import com.hazelcast.logging.ILogger;
import com.hazelcast.spi.impl.AllowedDuringPassiveState;
import com.hazelcast.spi.impl.NodeEngineImpl;
import com.hazelcast.util.ThreadUtil;

public class ShutdownNodeOp extends AbstractClusterOperation implements AllowedDuringPassiveState {
  public void run() {
    ClusterServiceImpl clusterService = (ClusterServiceImpl)getService();
    ILogger logger = getLogger();
    ClusterState clusterState = clusterService.getClusterState();
    if (clusterState == ClusterState.PASSIVE) {
      NodeEngineImpl nodeEngine = (NodeEngineImpl)getNodeEngine();
      if (nodeEngine.isRunning()) {
        logger.info("Shutting down node in cluster passive state. Requested by: " + getCallerAddress());
        (new Thread(new Object(this, nodeEngine), 




            
            ThreadUtil.createThreadName(nodeEngine.getHazelcastInstance().getName(), ".clusterShutdown"))).start();
      } else {
        logger.info("Node is already shutting down. NodeState: " + nodeEngine.getNode().getState());
      } 
    } else {
      logger.severe("Can not shut down node because cluster is in " + clusterState + " state. Requested by: " + 
          getCallerAddress());
    } 
  }
  
  public int getId() { return 25; }
}
