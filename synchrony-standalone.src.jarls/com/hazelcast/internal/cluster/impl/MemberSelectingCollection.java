package com.hazelcast.internal.cluster.impl;

import com.hazelcast.core.Member;
import com.hazelcast.core.MemberSelector;
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;

public final class MemberSelectingCollection<M extends Member> extends Object implements Collection<M> {
  private final Collection<M> members;
  
  private final MemberSelector selector;
  
  public MemberSelectingCollection(Collection<M> members, MemberSelector selector) {
    this.members = members;
    this.selector = selector;
  }
  
  public int size() { return count(this.members, this.selector); }
  
  public static <M extends Member> int count(Collection<M> members, MemberSelector memberSelector) {
    int size = 0;
    for (Iterator iterator = members.iterator(); iterator.hasNext(); ) {
      M member = (M)(Member)iterator.next();
      if (memberSelector.select(member))
        size++; 
    } 
    return size;
  }
  
  public boolean isEmpty() { return !iterator().hasNext(); }
  
  public boolean contains(Object o) {
    for (Iterator iterator = this.members.iterator(); iterator.hasNext(); ) {
      M member = (M)(Member)iterator.next();
      if (this.selector.select(member) && o.equals(member))
        return true; 
    } 
    return false;
  }
  
  public Iterator<M> iterator() { return new MemberSelectingIterator(this); }
  
  public Object[] toArray() {
    List<Object> result = new ArrayList<Object>();
    for (Iterator iterator = this.members.iterator(); iterator.hasNext(); ) {
      M member = (M)(Member)iterator.next();
      if (this.selector.select(member))
        result.add(member); 
    } 
    return result.toArray(new Object[0]);
  }
  
  public <T> T[] toArray(T[] a) {
    List<Object> result = new ArrayList<Object>();
    for (Iterator iterator = this.members.iterator(); iterator.hasNext(); ) {
      M member = (M)(Member)iterator.next();
      if (this.selector.select(member))
        result.add(member); 
    } 
    if (a.length != result.size())
      a = (T[])(Object[])Array.newInstance(a.getClass().getComponentType(), result.size()); 
    for (int i = 0; i < a.length; i++)
      a[i] = result.get(i); 
    return a;
  }
  
  public boolean add(M member) { throw new UnsupportedOperationException(); }
  
  public boolean remove(Object o) { throw new UnsupportedOperationException(); }
  
  public boolean containsAll(Collection<?> c) {
    for (Object o : c) {
      if (!contains(o))
        return false; 
    } 
    return true;
  }
  
  public boolean addAll(Collection<? extends M> c) { throw new UnsupportedOperationException(); }
  
  public boolean removeAll(Collection<?> c) { throw new UnsupportedOperationException(); }
  
  public boolean retainAll(Collection<?> c) { throw new UnsupportedOperationException(); }
  
  public void clear() { throw new UnsupportedOperationException(); }
}
