package com.hazelcast.internal.cluster.impl;

import com.hazelcast.cluster.Joiner;
import com.hazelcast.instance.MemberImpl;
import com.hazelcast.instance.Node;
import com.hazelcast.logging.ILogger;
import com.hazelcast.nio.Address;

public class NodeMulticastListener implements MulticastListener {
  private final Node node;
  
  private final ILogger logger;
  
  private ConfigCheck ourConfig;
  
  public NodeMulticastListener(Node node) {
    this.node = node;
    this.logger = node.getLogger(NodeMulticastListener.class.getName());
    this.ourConfig = node.createConfigCheck();
  }
  
  public void onMessage(Object msg) {
    if (!isValidJoinMessage(msg)) {
      logDroppedMessage(msg);
      return;
    } 
    JoinMessage joinMessage = (JoinMessage)msg;
    if (this.node.isRunning() && this.node.getClusterService().isJoined()) {
      handleActiveAndJoined(joinMessage);
    } else {
      handleNotActiveOrNotJoined(joinMessage);
    } 
  }
  
  private void logDroppedMessage(Object msg) {
    if (this.logger.isFineEnabled())
      this.logger.fine("Dropped: " + msg); 
  }
  
  private void handleActiveAndJoined(JoinMessage joinMessage) {
    if (!(joinMessage instanceof JoinRequest)) {
      logDroppedMessage(joinMessage);
      return;
    } 
    ClusterServiceImpl clusterService = this.node.getClusterService();
    Address masterAddress = clusterService.getMasterAddress();
    if (clusterService.isMaster()) {
      JoinMessage response = new JoinMessage((byte)4, this.node.getBuildInfo().getBuildNumber(), this.node.getVersion(), this.node.getThisAddress(), this.node.getThisUuid(), this.node.isLiteMember(), this.node.createConfigCheck());
      this.node.multicastService.send(response);
    } else if (joinMessage.getAddress().equals(masterAddress)) {
      MemberImpl master = this.node.getClusterService().getMember(masterAddress);
      if (master != null && !master.getUuid().equals(joinMessage.getUuid())) {
        String message = "New join request has been received from current master. Suspecting " + masterAddress;
        this.logger.warning(message);
        clusterService.suspectMember(master, message, false);
      } 
    } 
  }
  
  private void handleNotActiveOrNotJoined(JoinMessage joinMessage) {
    if (isJoinRequest(joinMessage)) {
      Joiner joiner = this.node.getJoiner();
      if (joiner instanceof MulticastJoiner) {
        MulticastJoiner multicastJoiner = (MulticastJoiner)joiner;
        multicastJoiner.onReceivedJoinRequest((JoinRequest)joinMessage);
      } else {
        logDroppedMessage(joinMessage);
      } 
    } else {
      Address address = joinMessage.getAddress();
      if (this.node.getJoiner().isBlacklisted(address)) {
        logDroppedMessage(joinMessage);
        return;
      } 
      ClusterServiceImpl clusterService = this.node.getClusterService();
      if (!clusterService.isJoined() && clusterService.getMasterAddress() == null) {
        clusterService.setMasterAddressToJoin(joinMessage.getAddress());
      } else {
        logDroppedMessage(joinMessage);
      } 
    } 
  }
  
  private boolean isJoinRequest(JoinMessage joinMessage) { return joinMessage instanceof JoinRequest; }
  
  private boolean isJoinMessage(Object msg) { return (msg != null && msg instanceof JoinMessage && !(msg instanceof SplitBrainJoinMessage)); }
  
  private boolean isValidJoinMessage(Object msg) {
    if (!isJoinMessage(msg))
      return false; 
    JoinMessage joinMessage = (JoinMessage)msg;
    if (isMessageToSelf(joinMessage))
      return false; 
    ConfigCheck theirConfig = joinMessage.getConfigCheck();
    if (!this.ourConfig.isSameGroup(theirConfig))
      return false; 
    return true;
  }
  
  private boolean isMessageToSelf(JoinMessage joinMessage) {
    Address thisAddress = this.node.getThisAddress();
    return (thisAddress == null || thisAddress.equals(joinMessage.getAddress()));
  }
}
