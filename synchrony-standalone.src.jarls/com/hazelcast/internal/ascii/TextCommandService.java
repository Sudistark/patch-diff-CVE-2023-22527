package com.hazelcast.internal.ascii;

import com.hazelcast.instance.Node;
import com.hazelcast.internal.ascii.memcache.Stats;
import java.util.Map;
import java.util.Set;

public interface TextCommandService {
  boolean offer(String paramString, Object paramObject);
  
  Object poll(String paramString, int paramInt);
  
  Object poll(String paramString);
  
  void processRequest(TextCommand paramTextCommand);
  
  void sendResponse(TextCommand paramTextCommand);
  
  Object get(String paramString1, String paramString2);
  
  Map<String, Object> getAll(String paramString, Set<String> paramSet);
  
  byte[] getByteArray(String paramString1, String paramString2);
  
  Object put(String paramString1, String paramString2, Object paramObject);
  
  Object put(String paramString1, String paramString2, Object paramObject, int paramInt);
  
  Object putIfAbsent(String paramString1, String paramString2, Object paramObject, int paramInt);
  
  Object replace(String paramString1, String paramString2, Object paramObject);
  
  void lock(String paramString1, String paramString2) throws InterruptedException;
  
  void unlock(String paramString1, String paramString2) throws InterruptedException;
  
  int getAdjustedTTLSeconds(int paramInt);
  
  long incrementDeleteHitCount(int paramInt);
  
  long incrementDeleteMissCount();
  
  long incrementGetHitCount();
  
  long incrementGetMissCount();
  
  long incrementSetCount();
  
  long incrementIncHitCount();
  
  long incrementIncMissCount();
  
  long incrementDecrHitCount();
  
  long incrementDecrMissCount();
  
  long incrementTouchCount();
  
  int size(String paramString);
  
  Object delete(String paramString1, String paramString2);
  
  void deleteAll(String paramString);
  
  Stats getStats();
  
  Node getNode();
  
  byte[] toByteArray(Object paramObject);
  
  void stop();
}
