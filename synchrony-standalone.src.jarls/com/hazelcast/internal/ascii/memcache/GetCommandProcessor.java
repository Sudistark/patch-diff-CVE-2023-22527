package com.hazelcast.internal.ascii.memcache;

import com.hazelcast.internal.ascii.TextCommandService;

public class GetCommandProcessor extends MemcacheCommandProcessor<GetCommand> {
  private final EntryConverter entryConverter;
  
  public GetCommandProcessor(TextCommandService textCommandService, EntryConverter entryConverter) {
    super(textCommandService);
    this.entryConverter = entryConverter;
  }
  
  @Deprecated
  public void handle(GetCommand getCommand) {
    String memcacheKey = getCommand.getKey();
    MapNameAndKeyPair mapNameAndKeyPair = MemcacheUtils.parseMemcacheKey(memcacheKey);
    Object value = this.textCommandService.get(mapNameAndKeyPair.getMapName(), mapNameAndKeyPair.getKey());
    MemcacheEntry entry = this.entryConverter.toEntry(memcacheKey, value);
    if (entry != null) {
      this.textCommandService.incrementGetHitCount();
    } else {
      this.textCommandService.incrementGetMissCount();
    } 
    getCommand.setValue(entry);
    this.textCommandService.sendResponse(getCommand);
  }
  
  public void handleRejection(GetCommand getCommand) {
    getCommand.setValue(null);
    this.textCommandService.sendResponse(getCommand);
  }
}
