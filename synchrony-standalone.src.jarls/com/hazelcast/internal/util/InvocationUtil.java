package com.hazelcast.internal.util;

import com.hazelcast.core.ICompletableFuture;
import com.hazelcast.internal.cluster.ClusterService;
import com.hazelcast.internal.util.futures.ChainingFuture;
import com.hazelcast.internal.util.iterator.RestartingMemberIterator;
import com.hazelcast.logging.ILogger;
import com.hazelcast.spi.ExecutionService;
import com.hazelcast.spi.NodeEngine;
import com.hazelcast.spi.Operation;
import com.hazelcast.util.IterableUtil;
import com.hazelcast.util.executor.CompletedFuture;
import com.hazelcast.util.executor.ManagedExecutorService;
import com.hazelcast.util.function.Supplier;
import java.util.Iterator;

public final class InvocationUtil {
  public static ICompletableFuture<Object> invokeOnStableClusterSerial(NodeEngine nodeEngine, Supplier<? extends Operation> operationSupplier, int maxRetries) {
    ClusterService clusterService = nodeEngine.getClusterService();
    if (!clusterService.isJoined())
      return new CompletedFuture(null, null, new CallerRunsExecutor(null)); 
    RestartingMemberIterator memberIterator = new RestartingMemberIterator(clusterService, maxRetries);
    InvokeOnMemberFunction invokeOnMemberFunction = new InvokeOnMemberFunction(operationSupplier, nodeEngine, memberIterator);
    Iterator<ICompletableFuture<Object>> invocationIterator = IterableUtil.map(memberIterator, invokeOnMemberFunction);
    ILogger logger = nodeEngine.getLogger(ChainingFuture.class);
    ExecutionService executionService = nodeEngine.getExecutionService();
    ManagedExecutorService executor = executionService.getExecutor("hz:async");
    return new ChainingFuture(invocationIterator, executor, memberIterator, logger);
  }
  
  public static LocalRetryableExecution executeLocallyWithRetry(NodeEngine nodeEngine, Operation operation) {
    if (operation.getOperationResponseHandler() != null)
      throw new IllegalArgumentException("Operation must not have a response handler set"); 
    if (!operation.returnsResponse())
      throw new IllegalArgumentException("Operation must return a response"); 
    if (operation.validatesTarget())
      throw new IllegalArgumentException("Operation must not validate the target"); 
    LocalRetryableExecution execution = new LocalRetryableExecution(nodeEngine, operation);
    execution.run();
    return execution;
  }
}
