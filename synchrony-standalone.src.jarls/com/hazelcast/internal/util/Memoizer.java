package com.hazelcast.internal.util;

import com.hazelcast.util.ConcurrencyUtil;
import com.hazelcast.util.ConstructorFunction;
import com.hazelcast.util.ContextMutexFactory;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

public class Memoizer<K, V> extends Object {
  public static final Object NULL_OBJECT = new Object();
  
  private final ConcurrentMap<K, V> cache;
  
  private final ContextMutexFactory cacheMutexFactory;
  
  private final ConstructorFunction<K, V> constructorFunction;
  
  public Memoizer(ConstructorFunction<K, V> calculationFunction) {
    this.cache = new ConcurrentHashMap();
    this.cacheMutexFactory = new ContextMutexFactory();
    this.constructorFunction = calculationFunction;
  }
  
  public V getOrCalculate(K key) {
    V value = (V)ConcurrencyUtil.getOrPutSynchronized(this.cache, key, this.cacheMutexFactory, this.constructorFunction);
    return (value == NULL_OBJECT) ? null : value;
  }
  
  public void remove(K key) { this.cache.remove(key); }
}
