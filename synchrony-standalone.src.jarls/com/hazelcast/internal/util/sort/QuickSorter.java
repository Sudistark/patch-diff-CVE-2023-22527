package com.hazelcast.internal.util.sort;

public abstract class QuickSorter {
  public final void sort(long startIndex, long length) { quickSort(startIndex, length - 1L); }
  
  protected abstract void loadPivot(long paramLong);
  
  protected abstract boolean isLessThanPivot(long paramLong);
  
  protected abstract boolean isGreaterThanPivot(long paramLong);
  
  protected abstract void swap(long paramLong1, long paramLong2);
  
  private void quickSort(long lo, long hi) {
    if (lo >= hi)
      return; 
    long p = partition(lo, hi);
    quickSort(lo, p);
    quickSort(p + 1L, hi);
  }
  
  private long partition(long lo, long hi) {
    loadPivot(lo + hi >>> true);
    long i = lo - 1L;
    long j = hi + 1L;
    while (true) {
      i++;
      if (!isLessThanPivot(i)) {
        do {
          j--;
        } while (isGreaterThanPivot(j));
        if (i >= j)
          return j; 
        swap(i, j);
      } 
    } 
  }
}
