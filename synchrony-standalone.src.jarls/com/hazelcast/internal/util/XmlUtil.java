package com.hazelcast.internal.util;

import com.hazelcast.logging.ILogger;
import com.hazelcast.logging.Logger;
import com.hazelcast.nio.IOUtil;
import java.io.StringReader;
import java.io.StringWriter;
import javax.annotation.Nullable;
import javax.xml.transform.ErrorListener;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import org.xml.sax.SAXException;

public final class XmlUtil {
  public static final String SYSTEM_PROPERTY_IGNORE_XXE_PROTECTION_FAILURES = "hazelcast.ignoreXxeProtectionFailures";
  
  private static final ILogger LOGGER = Logger.getLogger(XmlUtil.class);
  
  public static TransformerFactory getTransformerFactory() {
    transformerFactory = TransformerFactory.newInstance();
    setAttribute(transformerFactory, "http://javax.xml.XMLConstants/property/accessExternalDTD");
    setAttribute(transformerFactory, "http://javax.xml.XMLConstants/property/accessExternalStylesheet");
    return transformerFactory;
  }
  
  public static SchemaFactory getSchemaFactory() throws SAXException {
    schemaFactory = SchemaFactory.newInstance("http://www.w3.org/2001/XMLSchema");
    setProperty(schemaFactory, "http://javax.xml.XMLConstants/property/accessExternalSchema");
    setProperty(schemaFactory, "http://javax.xml.XMLConstants/property/accessExternalDTD");
    return schemaFactory;
  }
  
  public static String format(@Nullable String input, int indent) throws IllegalArgumentException {
    if (input == null || indent < 0)
      return input; 
    if (indent == 0)
      throw new IllegalArgumentException("Indentation must not be 0."); 
    xmlOutput = null;
    try {
      Source xmlInput = new StreamSource(new StringReader(input));
      xmlOutput = new StreamResult(new StringWriter());
      TransformerFactory transformerFactory = getTransformerFactory();
      try {
        transformerFactory.setAttribute("indent-number", Integer.valueOf(indent));
      } catch (IllegalArgumentException e) {
        if (LOGGER.isFinestEnabled())
          LOGGER.finest("Failed to set indent-number attribute; cause: " + e.getMessage()); 
      } 
      Transformer transformer = transformerFactory.newTransformer();
      transformer.setErrorListener(ThrowingErrorListener.INSTANCE);
      transformer.setOutputProperty("omit-xml-declaration", "yes");
      transformer.setOutputProperty("encoding", "UTF-8");
      transformer.setOutputProperty("indent", "yes");
      try {
        transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", Integer.toString(indent));
      } catch (IllegalArgumentException e) {
        if (LOGGER.isFinestEnabled())
          LOGGER.finest("Failed to set indent-amount property; cause: " + e.getMessage()); 
      } 
      transformer.transform(xmlInput, xmlOutput);
      return xmlOutput.getWriter().toString();
    } catch (Exception e) {
      LOGGER.warning(e);
      return input;
    } finally {
      if (xmlOutput != null)
        IOUtil.closeResource(xmlOutput.getWriter()); 
    } 
  }
  
  public ErrorListener getErrorListener() { return ThrowingErrorListener.INSTANCE; }
  
  static void setAttribute(TransformerFactory transformerFactory, String attributeName) {
    try {
      transformerFactory.setAttribute(attributeName, "");
    } catch (IllegalArgumentException iae) {
      if (Boolean.getBoolean("hazelcast.ignoreXxeProtectionFailures")) {
        LOGGER.warning("Enabling XXE protection failed. The attribute " + attributeName + " is not supported by the TransformerFactory. The " + "hazelcast.ignoreXxeProtectionFailures" + " system property is used so the XML processing continues in the UNSECURE mode with XXE protection disabled!!!");
      } else {
        LOGGER.severe("Enabling XXE protection failed. The attribute " + attributeName + " is not supported by the TransformerFactory. This usually mean an outdated XML processor is present on the classpath (e.g. Xerces, Xalan). If you are not able to resolve the issue by fixing the classpath, the " + "hazelcast.ignoreXxeProtectionFailures" + " system property can be used to disable XML External Entity protections. We don't recommend disabling the XXE as such the XML processor configuration is unsecure!!!", iae);
        throw iae;
      } 
    } 
  }
  
  static void setProperty(SchemaFactory schemaFactory, String propertyName) throws SAXException {
    try {
      schemaFactory.setProperty(propertyName, "");
    } catch (SAXException e) {
      if (Boolean.getBoolean("hazelcast.ignoreXxeProtectionFailures")) {
        LOGGER.warning("Enabling XXE protection failed. The property " + propertyName + " is not supported by the SchemaFactory. The " + "hazelcast.ignoreXxeProtectionFailures" + " system property is used so the XML processing continues in the UNSECURE mode with XXE protection disabled!!!");
      } else {
        LOGGER.severe("Enabling XXE protection failed. The property " + propertyName + " is not supported by the SchemaFactory. This usually mean an outdated XML processor is present on the classpath (e.g. Xerces, Xalan). If you are not able to resolve the issue by fixing the classpath, the " + "hazelcast.ignoreXxeProtectionFailures" + " system property can be used to disable XML External Entity protections. We don't recommend disabling the XXE as such the XML processor configuration is unsecure!!!", e);
        throw e;
      } 
    } 
  }
}
