package com.hazelcast.internal.adapter;

import com.hazelcast.core.HazelcastInstance;
import com.hazelcast.core.ICompletableFuture;
import com.hazelcast.core.IMap;
import com.hazelcast.core.TransactionalMap;
import com.hazelcast.map.EntryProcessor;
import com.hazelcast.monitor.LocalMapStats;
import com.hazelcast.query.Predicate;
import com.hazelcast.transaction.TransactionContext;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import javax.cache.expiry.ExpiryPolicy;
import javax.cache.integration.CompletionListener;
import javax.cache.processor.EntryProcessor;
import javax.cache.processor.EntryProcessorException;
import javax.cache.processor.EntryProcessorResult;

public class TransactionalMapDataStructureAdapter<K, V> extends Object implements DataStructureAdapter<K, V> {
  private final HazelcastInstance hazelcastInstance;
  
  private final String name;
  
  private TransactionContext transactionContext;
  
  private TransactionalMap<K, V> transactionalMap;
  
  public TransactionalMapDataStructureAdapter(HazelcastInstance hazelcastInstance, String name) {
    this.hazelcastInstance = hazelcastInstance;
    this.name = name;
  }
  
  public int size() {
    begin();
    int size = this.transactionalMap.size();
    commit();
    return size;
  }
  
  public V get(K key) {
    begin();
    V value = (V)this.transactionalMap.get(key);
    commit();
    return value;
  }
  
  @MethodNotAvailable
  public ICompletableFuture<V> getAsync(K key) { throw new MethodNotAvailableException(); }
  
  public void set(K key, V value) {
    begin();
    this.transactionalMap.set(key, value);
    commit();
  }
  
  @MethodNotAvailable
  public ICompletableFuture<Void> setAsync(K key, V value) { throw new MethodNotAvailableException(); }
  
  @MethodNotAvailable
  public ICompletableFuture<Void> setAsync(K key, V value, long ttl, TimeUnit timeunit) { throw new MethodNotAvailableException(); }
  
  @MethodNotAvailable
  public ICompletableFuture<Void> setAsync(K key, V value, ExpiryPolicy expiryPolicy) { throw new MethodNotAvailableException(); }
  
  public V put(K key, V value) {
    begin();
    V oldValue = (V)this.transactionalMap.put(key, value);
    commit();
    return oldValue;
  }
  
  @MethodNotAvailable
  public ICompletableFuture<V> putAsync(K key, V value) { throw new MethodNotAvailableException(); }
  
  @MethodNotAvailable
  public ICompletableFuture<V> putAsync(K key, V value, long ttl, TimeUnit timeunit) { throw new MethodNotAvailableException(); }
  
  @MethodNotAvailable
  public ICompletableFuture<V> putAsync(K key, V value, ExpiryPolicy expiryPolicy) { throw new MethodNotAvailableException(); }
  
  @MethodNotAvailable
  public void putTransient(K key, V value, long ttl, TimeUnit timeunit) { throw new MethodNotAvailableException(); }
  
  public boolean putIfAbsent(K key, V value) {
    begin();
    V oldValue = (V)this.transactionalMap.putIfAbsent(key, value);
    commit();
    return (oldValue == null);
  }
  
  @MethodNotAvailable
  public ICompletableFuture<Boolean> putIfAbsentAsync(K key, V value) { throw new MethodNotAvailableException(); }
  
  @MethodNotAvailable
  public void setTtl(K key, long duration, TimeUnit timeUnit) { throw new MethodNotAvailableException(); }
  
  public V replace(K key, V newValue) {
    begin();
    V oldValue = (V)this.transactionalMap.replace(key, newValue);
    commit();
    return oldValue;
  }
  
  public boolean replace(K key, V oldValue, V newValue) {
    begin();
    boolean result = this.transactionalMap.replace(key, oldValue, newValue);
    commit();
    return result;
  }
  
  public V remove(K key) {
    begin();
    V oldValue = (V)this.transactionalMap.remove(key);
    commit();
    return oldValue;
  }
  
  public boolean remove(K key, V oldValue) {
    begin();
    boolean result = this.transactionalMap.remove(key, oldValue);
    commit();
    return result;
  }
  
  @MethodNotAvailable
  public ICompletableFuture<V> removeAsync(K key) { throw new MethodNotAvailableException(); }
  
  public void delete(K key) {
    begin();
    this.transactionalMap.delete(key);
    commit();
  }
  
  @MethodNotAvailable
  public ICompletableFuture<Boolean> deleteAsync(K key) { throw new MethodNotAvailableException(); }
  
  @MethodNotAvailable
  public boolean evict(K key) { throw new MethodNotAvailableException(); }
  
  @MethodNotAvailable
  public <T> T invoke(K key, EntryProcessor<K, V, T> entryProcessor, Object... arguments) throws EntryProcessorException { throw new MethodNotAvailableException(); }
  
  @MethodNotAvailable
  public Object executeOnKey(K key, EntryProcessor entryProcessor) { throw new MethodNotAvailableException(); }
  
  @MethodNotAvailable
  public Map<K, Object> executeOnKeys(Set<K> keys, EntryProcessor entryProcessor) { throw new MethodNotAvailableException(); }
  
  @MethodNotAvailable
  public Map<K, Object> executeOnEntries(EntryProcessor entryProcessor) { throw new MethodNotAvailableException(); }
  
  @MethodNotAvailable
  public Map<K, Object> executeOnEntries(EntryProcessor entryProcessor, Predicate predicate) { throw new MethodNotAvailableException(); }
  
  @MethodNotAvailable
  public Map<K, V> getAll(Set<K> keys) { throw new MethodNotAvailableException(); }
  
  @MethodNotAvailable
  public void putAll(Map<K, V> map) { throw new MethodNotAvailableException(); }
  
  @MethodNotAvailable
  public void removeAll() { throw new MethodNotAvailableException(); }
  
  @MethodNotAvailable
  public void removeAll(Set<K> keys) { throw new MethodNotAvailableException(); }
  
  @MethodNotAvailable
  public void evictAll() { throw new MethodNotAvailableException(); }
  
  @MethodNotAvailable
  public <T> Map<K, EntryProcessorResult<T>> invokeAll(Set<? extends K> keys, EntryProcessor<K, V, T> entryProcessor, Object... arguments) { throw new MethodNotAvailableException(); }
  
  @MethodNotAvailable
  public void clear() { throw new MethodNotAvailableException(); }
  
  @MethodNotAvailable
  public void close() { throw new MethodNotAvailableException(); }
  
  public void destroy() {
    begin();
    this.transactionalMap.destroy();
    commit();
  }
  
  @MethodNotAvailable
  public void setExpiryPolicy(Set<K> keys, ExpiryPolicy expiryPolicy) { throw new MethodNotAvailableException(); }
  
  @MethodNotAvailable
  public boolean setExpiryPolicy(K key, ExpiryPolicy expiryPolicy) { throw new MethodNotAvailableException(); }
  
  @MethodNotAvailable
  public LocalMapStats getLocalMapStats() { throw new MethodNotAvailableException(); }
  
  public boolean containsKey(K key) {
    begin();
    boolean result = this.transactionalMap.containsKey(key);
    commit();
    return result;
  }
  
  @MethodNotAvailable
  public void loadAll(boolean replaceExistingValues) { throw new MethodNotAvailableException(); }
  
  @MethodNotAvailable
  public void loadAll(Set<K> keys, boolean replaceExistingValues) { throw new MethodNotAvailableException(); }
  
  @MethodNotAvailable
  public void loadAll(Set<? extends K> keys, boolean replaceExistingValues, CompletionListener completionListener) { throw new MethodNotAvailableException(); }
  
  public IMap<K, V> getMap() { return this.hazelcastInstance.getMap(this.name); }
  
  private void begin() {
    this.transactionContext = this.hazelcastInstance.newTransactionContext();
    this.transactionContext.beginTransaction();
    this.transactionalMap = this.transactionContext.getMap(this.name);
  }
  
  private void commit() {
    this.transactionContext.commitTransaction();
    this.transactionContext = null;
    this.transactionalMap = null;
  }
}
