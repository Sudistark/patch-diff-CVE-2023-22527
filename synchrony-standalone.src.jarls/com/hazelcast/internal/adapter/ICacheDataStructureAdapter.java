package com.hazelcast.internal.adapter;

import com.hazelcast.cache.ICache;
import com.hazelcast.core.ICompletableFuture;
import com.hazelcast.map.EntryProcessor;
import com.hazelcast.monitor.LocalMapStats;
import com.hazelcast.query.Predicate;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import javax.cache.expiry.ExpiryPolicy;
import javax.cache.integration.CompletionListener;
import javax.cache.processor.EntryProcessor;
import javax.cache.processor.EntryProcessorException;
import javax.cache.processor.EntryProcessorResult;

public class ICacheDataStructureAdapter<K, V> extends Object implements DataStructureAdapter<K, V> {
  private final ICache<K, V> cache;
  
  public ICacheDataStructureAdapter(ICache<K, V> cache) { this.cache = cache; }
  
  public int size() { return this.cache.size(); }
  
  public V get(K key) { return (V)this.cache.get(key); }
  
  public ICompletableFuture<V> getAsync(K key) { return this.cache.getAsync(key); }
  
  public void set(K key, V value) { this.cache.put(key, value); }
  
  public ICompletableFuture<Void> setAsync(K key, V value) { return this.cache.putAsync(key, value); }
  
  @MethodNotAvailable
  public ICompletableFuture<Void> setAsync(K key, V value, long ttl, TimeUnit timeunit) { throw new MethodNotAvailableException(); }
  
  public ICompletableFuture<Void> setAsync(K key, V value, ExpiryPolicy expiryPolicy) { return this.cache.putAsync(key, value, expiryPolicy); }
  
  public V put(K key, V value) { return (V)this.cache.getAndPut(key, value); }
  
  public ICompletableFuture<V> putAsync(K key, V value) { return this.cache.getAndPutAsync(key, value); }
  
  @MethodNotAvailable
  public ICompletableFuture<V> putAsync(K key, V value, long time, TimeUnit unit) { throw new MethodNotAvailableException(); }
  
  public ICompletableFuture<V> putAsync(K key, V value, ExpiryPolicy expiryPolicy) { return this.cache.getAndPutAsync(key, value, expiryPolicy); }
  
  @MethodNotAvailable
  public void putTransient(K key, V value, long ttl, TimeUnit timeunit) { throw new MethodNotAvailableException(); }
  
  public boolean putIfAbsent(K key, V value) { return this.cache.putIfAbsent(key, value); }
  
  public ICompletableFuture<Boolean> putIfAbsentAsync(K key, V value) { return this.cache.putIfAbsentAsync(key, value); }
  
  @MethodNotAvailable
  public void setTtl(K key, long duration, TimeUnit timeUnit) { throw new MethodNotAvailableException(); }
  
  public V replace(K key, V newValue) { return (V)this.cache.getAndReplace(key, newValue); }
  
  public boolean replace(K key, V oldValue, V newValue) { return this.cache.replace(key, oldValue, newValue); }
  
  public V remove(K key) { return (V)this.cache.getAndRemove(key); }
  
  public boolean remove(K key, V oldValue) { return this.cache.remove(key, oldValue); }
  
  public ICompletableFuture<V> removeAsync(K key) { return this.cache.getAndRemoveAsync(key); }
  
  public void delete(K key) { this.cache.remove(key); }
  
  public ICompletableFuture<Boolean> deleteAsync(K key) { return this.cache.removeAsync(key); }
  
  @MethodNotAvailable
  public boolean evict(K key) { throw new MethodNotAvailableException(); }
  
  public <T> T invoke(K key, EntryProcessor<K, V, T> entryProcessor, Object... arguments) throws EntryProcessorException { return (T)this.cache.invoke(key, entryProcessor, arguments); }
  
  @MethodNotAvailable
  public Object executeOnKey(K key, EntryProcessor entryProcessor) { throw new MethodNotAvailableException(); }
  
  @MethodNotAvailable
  public Map<K, Object> executeOnKeys(Set<K> keys, EntryProcessor entryProcessor) { throw new MethodNotAvailableException(); }
  
  @MethodNotAvailable
  public Map<K, Object> executeOnEntries(EntryProcessor entryProcessor) { throw new MethodNotAvailableException(); }
  
  @MethodNotAvailable
  public Map<K, Object> executeOnEntries(EntryProcessor entryProcessor, Predicate predicate) { throw new MethodNotAvailableException(); }
  
  public boolean containsKey(K key) { return this.cache.containsKey(key); }
  
  @MethodNotAvailable
  public void loadAll(boolean replaceExistingValues) { throw new MethodNotAvailableException(); }
  
  @MethodNotAvailable
  public void loadAll(Set<K> keys, boolean replaceExistingValues) { throw new MethodNotAvailableException(); }
  
  public void loadAll(Set<? extends K> keys, boolean replaceExistingValues, CompletionListener completionListener) { this.cache.loadAll(keys, replaceExistingValues, completionListener); }
  
  public Map<K, V> getAll(Set<K> keys) { return this.cache.getAll(keys); }
  
  public void putAll(Map<K, V> map) { this.cache.putAll(map); }
  
  public void removeAll() { this.cache.removeAll(); }
  
  public void removeAll(Set<K> keys) { this.cache.removeAll(keys); }
  
  @MethodNotAvailable
  public void evictAll() { throw new MethodNotAvailableException(); }
  
  public <T> Map<K, EntryProcessorResult<T>> invokeAll(Set<? extends K> keys, EntryProcessor<K, V, T> entryProcessor, Object... arguments) { return this.cache.invokeAll(keys, entryProcessor, arguments); }
  
  public void clear() { this.cache.clear(); }
  
  public void close() { this.cache.close(); }
  
  public void destroy() { this.cache.destroy(); }
  
  public void setExpiryPolicy(Set<K> keys, ExpiryPolicy expiryPolicy) { this.cache.setExpiryPolicy(keys, expiryPolicy); }
  
  public boolean setExpiryPolicy(K key, ExpiryPolicy expiryPolicy) { return this.cache.setExpiryPolicy(key, expiryPolicy); }
  
  @MethodNotAvailable
  public LocalMapStats getLocalMapStats() { throw new MethodNotAvailableException(); }
}
