package com.hazelcast.internal.adapter;

import com.hazelcast.core.ICompletableFuture;
import com.hazelcast.core.ReplicatedMap;
import com.hazelcast.map.EntryProcessor;
import com.hazelcast.monitor.LocalMapStats;
import com.hazelcast.query.Predicate;
import com.hazelcast.util.MapUtil;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import javax.cache.expiry.ExpiryPolicy;
import javax.cache.integration.CompletionListener;
import javax.cache.processor.EntryProcessor;
import javax.cache.processor.EntryProcessorException;
import javax.cache.processor.EntryProcessorResult;

public class ReplicatedMapDataStructureAdapter<K, V> extends Object implements DataStructureAdapter<K, V> {
  private final ReplicatedMap<K, V> map;
  
  public ReplicatedMapDataStructureAdapter(ReplicatedMap<K, V> map) { this.map = map; }
  
  public int size() { return this.map.size(); }
  
  public V get(K key) { return (V)this.map.get(key); }
  
  @MethodNotAvailable
  public ICompletableFuture<V> getAsync(K key) { throw new MethodNotAvailableException(); }
  
  @MethodNotAvailable
  public void set(K key, V value) { throw new MethodNotAvailableException(); }
  
  @MethodNotAvailable
  public ICompletableFuture<Void> setAsync(K key, V value) { throw new MethodNotAvailableException(); }
  
  @MethodNotAvailable
  public ICompletableFuture<Void> setAsync(K key, V value, long ttl, TimeUnit timeunit) { throw new MethodNotAvailableException(); }
  
  @MethodNotAvailable
  public ICompletableFuture<Void> setAsync(K key, V value, ExpiryPolicy expiryPolicy) { throw new MethodNotAvailableException(); }
  
  public V put(K key, V value) { return (V)this.map.put(key, value); }
  
  @MethodNotAvailable
  public ICompletableFuture<V> putAsync(K key, V value) { throw new MethodNotAvailableException(); }
  
  @MethodNotAvailable
  public ICompletableFuture<V> putAsync(K key, V value, long ttl, TimeUnit timeunit) { throw new MethodNotAvailableException(); }
  
  @MethodNotAvailable
  public ICompletableFuture<V> putAsync(K key, V value, ExpiryPolicy expiryPolicy) { throw new MethodNotAvailableException(); }
  
  @MethodNotAvailable
  public void putTransient(K key, V value, long ttl, TimeUnit timeunit) { throw new MethodNotAvailableException(); }
  
  @MethodNotAvailable
  public boolean putIfAbsent(K key, V value) { throw new MethodNotAvailableException(); }
  
  @MethodNotAvailable
  public ICompletableFuture<Boolean> putIfAbsentAsync(K key, V value) { throw new MethodNotAvailableException(); }
  
  @MethodNotAvailable
  public void setTtl(K key, long duration, TimeUnit timeUnit) { throw new MethodNotAvailableException(); }
  
  @MethodNotAvailable
  public V replace(K key, V newValue) { throw new MethodNotAvailableException(); }
  
  @MethodNotAvailable
  public boolean replace(K key, V oldValue, V newValue) { throw new MethodNotAvailableException(); }
  
  public V remove(K key) { return (V)this.map.remove(key); }
  
  @MethodNotAvailable
  public boolean remove(K key, V oldValue) { throw new MethodNotAvailableException(); }
  
  @MethodNotAvailable
  public ICompletableFuture<V> removeAsync(K key) { throw new MethodNotAvailableException(); }
  
  @MethodNotAvailable
  public void delete(K key) { throw new MethodNotAvailableException(); }
  
  @MethodNotAvailable
  public ICompletableFuture<Boolean> deleteAsync(K key) { throw new MethodNotAvailableException(); }
  
  @MethodNotAvailable
  public boolean evict(K key) { throw new MethodNotAvailableException(); }
  
  @MethodNotAvailable
  public <T> T invoke(K key, EntryProcessor<K, V, T> entryProcessor, Object... arguments) throws EntryProcessorException { throw new MethodNotAvailableException(); }
  
  @MethodNotAvailable
  public Object executeOnKey(K key, EntryProcessor entryProcessor) { throw new MethodNotAvailableException(); }
  
  @MethodNotAvailable
  public Map<K, Object> executeOnKeys(Set<K> keys, EntryProcessor entryProcessor) { throw new MethodNotAvailableException(); }
  
  @MethodNotAvailable
  public Map<K, Object> executeOnEntries(EntryProcessor entryProcessor) { throw new MethodNotAvailableException(); }
  
  @MethodNotAvailable
  public Map<K, Object> executeOnEntries(EntryProcessor entryProcessor, Predicate predicate) { throw new MethodNotAvailableException(); }
  
  public boolean containsKey(K key) { return this.map.containsKey(key); }
  
  @MethodNotAvailable
  public void loadAll(boolean replaceExistingValues) { throw new MethodNotAvailableException(); }
  
  @MethodNotAvailable
  public void loadAll(Set<K> keys, boolean replaceExistingValues) { throw new MethodNotAvailableException(); }
  
  @MethodNotAvailable
  public void loadAll(Set<? extends K> keys, boolean replaceExistingValues, CompletionListener completionListener) { throw new MethodNotAvailableException(); }
  
  public Map<K, V> getAll(Set<K> keys) {
    Map<K, V> result = MapUtil.createHashMap(keys.size());
    for (K key : keys)
      result.put(key, this.map.get(key)); 
    return result;
  }
  
  public void putAll(Map<K, V> map) { this.map.putAll(map); }
  
  @MethodNotAvailable
  public void removeAll() { throw new MethodNotAvailableException(); }
  
  @MethodNotAvailable
  public void removeAll(Set<K> keys) { throw new MethodNotAvailableException(); }
  
  @MethodNotAvailable
  public void evictAll() { throw new MethodNotAvailableException(); }
  
  @MethodNotAvailable
  public <T> Map<K, EntryProcessorResult<T>> invokeAll(Set<? extends K> keys, EntryProcessor<K, V, T> entryProcessor, Object... arguments) { throw new MethodNotAvailableException(); }
  
  public void clear() { this.map.clear(); }
  
  @MethodNotAvailable
  public void close() { throw new MethodNotAvailableException(); }
  
  public void destroy() { this.map.destroy(); }
  
  @MethodNotAvailable
  public void setExpiryPolicy(Set<K> keys, ExpiryPolicy expiryPolicy) { throw new MethodNotAvailableException(); }
  
  @MethodNotAvailable
  public boolean setExpiryPolicy(K key, ExpiryPolicy expiryPolicy) { throw new MethodNotAvailableException(); }
  
  @MethodNotAvailable
  public LocalMapStats getLocalMapStats() { throw new MethodNotAvailableException(); }
}
