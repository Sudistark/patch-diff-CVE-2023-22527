package com.hazelcast.internal.partition.operation;

import com.hazelcast.core.MigrationEvent;
import com.hazelcast.internal.partition.MigrationInfo;
import com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl;
import com.hazelcast.internal.partition.impl.PartitionStateManager;
import com.hazelcast.logging.ILogger;
import com.hazelcast.spi.MigrationAwareService;
import com.hazelcast.spi.PartitionMigrationEvent;

final class BeforePromotionOperation extends AbstractPromotionOperation {
  private Runnable beforePromotionsCallback;
  
  public BeforePromotionOperation() { super(null); }
  
  BeforePromotionOperation(MigrationInfo migrationInfo, Runnable beforePromotionsCallback) {
    super(migrationInfo);
    this.beforePromotionsCallback = beforePromotionsCallback;
  }
  
  public void beforeRun() {
    sendMigrationEvent(MigrationEvent.MigrationStatus.STARTED);
    InternalPartitionServiceImpl service = (InternalPartitionServiceImpl)getService();
    PartitionStateManager partitionStateManager = service.getPartitionStateManager();
    if (!partitionStateManager.trySetMigratingFlag(getPartitionId()))
      throw new IllegalStateException("Cannot set migrating flag, probably previous migration's finalization is not completed yet."); 
  }
  
  public void run() {
    ILogger logger = getLogger();
    if (logger.isFinestEnabled())
      logger.finest("Running before promotion for " + getPartitionMigrationEvent()); 
    PartitionMigrationEvent event = getPartitionMigrationEvent();
    for (MigrationAwareService service : getMigrationAwareServices()) {
      try {
        service.beforeMigration(event);
      } catch (Throwable e) {
        logger.warning("While promoting " + getPartitionMigrationEvent(), e);
      } 
    } 
  }
  
  public void afterRun() {
    if (this.beforePromotionsCallback != null)
      this.beforePromotionsCallback.run(); 
  }
}
