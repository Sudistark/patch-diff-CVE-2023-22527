package com.hazelcast.internal.partition.operation;

import com.hazelcast.internal.partition.MigrationCycleOperation;
import com.hazelcast.internal.partition.ReplicaErrorLogger;
import com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl;
import com.hazelcast.internal.partition.impl.PartitionReplicaManager;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.impl.Versioned;
import com.hazelcast.spi.BackupOperation;
import com.hazelcast.spi.PartitionAwareOperation;
import com.hazelcast.spi.ServiceNamespace;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;

public class PartitionReplicaSyncRetryResponse extends AbstractPartitionOperation implements PartitionAwareOperation, BackupOperation, MigrationCycleOperation, Versioned {
  private Collection<ServiceNamespace> namespaces;
  
  public PartitionReplicaSyncRetryResponse() { this.namespaces = Collections.emptySet(); }
  
  public PartitionReplicaSyncRetryResponse(Collection<ServiceNamespace> namespaces) { this.namespaces = namespaces; }
  
  public void run() {
    InternalPartitionServiceImpl partitionService = (InternalPartitionServiceImpl)getService();
    int partitionId = getPartitionId();
    int replicaIndex = getReplicaIndex();
    PartitionReplicaManager replicaManager = partitionService.getReplicaManager();
    for (ServiceNamespace namespace : this.namespaces)
      replicaManager.clearReplicaSyncRequest(partitionId, namespace, replicaIndex); 
  }
  
  public boolean returnsResponse() { return false; }
  
  public boolean validatesTarget() { return false; }
  
  public String getServiceName() { return "hz:core:partitionService"; }
  
  public void logError(Throwable e) { ReplicaErrorLogger.log(e, getLogger()); }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    out.writeInt(this.namespaces.size());
    for (ServiceNamespace namespace : this.namespaces)
      out.writeObject(namespace); 
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    int len = in.readInt();
    this.namespaces = new ArrayList(len);
    for (int i = 0; i < len; i++) {
      ServiceNamespace ns = (ServiceNamespace)in.readObject();
      this.namespaces.add(ns);
    } 
  }
  
  public int getId() { return 13; }
}
