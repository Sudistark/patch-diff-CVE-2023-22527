package com.hazelcast.internal.partition.operation;

import com.hazelcast.internal.partition.MigrationCycleOperation;
import com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl;
import com.hazelcast.logging.ILogger;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import java.io.IOException;

public final class PartitionStateVersionCheckOperation extends AbstractPartitionOperation implements MigrationCycleOperation {
  private int version;
  
  private boolean stale;
  
  public PartitionStateVersionCheckOperation() {}
  
  public PartitionStateVersionCheckOperation(int version) { this.version = version; }
  
  public void run() {
    InternalPartitionServiceImpl partitionService = (InternalPartitionServiceImpl)getService();
    int currentVersion = partitionService.getPartitionStateVersion();
    if (currentVersion < this.version) {
      this.stale = true;
      ILogger logger = getLogger();
      if (logger.isFineEnabled())
        logger.fine("Partition table is stale! Current version: " + currentVersion + ", master version: " + this.version); 
    } 
  }
  
  public Object getResponse() { return Boolean.valueOf(!this.stale); }
  
  public String getServiceName() { return "hz:core:partitionService"; }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    this.version = in.readInt();
  }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeInt(this.version);
  }
  
  public int getId() { return 23; }
}
