package com.hazelcast.internal.metrics.metricsets;

import com.hazelcast.internal.metrics.MetricsRegistry;
import com.hazelcast.internal.metrics.ProbeLevel;
import com.hazelcast.util.Preconditions;
import com.hazelcast.util.SetUtil;
import java.util.Collections;
import java.util.Set;
import java.util.concurrent.TimeUnit;

public final class GarbageCollectionMetricSet {
  private static final Set<String> YOUNG_GC;
  
  private static final Set<String> OLD_GC;
  
  private static final int PUBLISH_FREQUENCY_SECONDS = 1;
  
  static  {
    youngGC = SetUtil.createHashSet(4);
    youngGC.add("PS Scavenge");
    youngGC.add("ParNew");
    youngGC.add("G1 Young Generation");
    youngGC.add("Copy");
    YOUNG_GC = Collections.unmodifiableSet(youngGC);
    Set<String> oldGC = SetUtil.createHashSet(5);
    oldGC.add("PS MarkSweep");
    oldGC.add("ConcurrentMarkSweep");
    oldGC.add("G1 Old Generation");
    oldGC.add("G1 Mixed Generation");
    oldGC.add("MarkSweepCompact");
    OLD_GC = Collections.unmodifiableSet(oldGC);
  }
  
  public static void register(MetricsRegistry metricsRegistry) {
    Preconditions.checkNotNull(metricsRegistry, "metricsRegistry");
    GcStats stats = new GcStats();
    metricsRegistry.scheduleAtFixedRate(stats, 1L, TimeUnit.SECONDS, ProbeLevel.MANDATORY);
    metricsRegistry.scanAndRegister(stats, "gc");
  }
}
