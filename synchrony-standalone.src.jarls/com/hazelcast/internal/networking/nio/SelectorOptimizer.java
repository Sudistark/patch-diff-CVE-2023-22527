package com.hazelcast.internal.networking.nio;

import com.hazelcast.core.HazelcastException;
import com.hazelcast.logging.ILogger;
import com.hazelcast.util.Preconditions;
import java.io.IOException;
import java.lang.reflect.Field;
import java.nio.channels.Selector;

public final class SelectorOptimizer {
  static final String SELECTOR_IMPL = "sun.nio.ch.SelectorImpl";
  
  static Selector newSelector(ILogger logger) {
    Selector selector;
    Preconditions.checkNotNull(logger, "logger");
    try {
      selector = Selector.open();
    } catch (IOException e) {
      throw new HazelcastException("Failed to open a Selector", e);
    } 
    boolean optimize = Boolean.parseBoolean(System.getProperty("hazelcast.io.optimizeselector", "true"));
    if (optimize)
      optimize(selector, logger); 
    return selector;
  }
  
  static SelectionKeysSet optimize(Selector selector, ILogger logger) {
    Preconditions.checkNotNull(selector, "selector");
    Preconditions.checkNotNull(logger, "logger");
    try {
      SelectionKeysSet set = new SelectionKeysSet();
      Class<?> selectorImplClass = findOptimizableSelectorClass(selector);
      if (selectorImplClass == null)
        return null; 
      Field selectedKeysField = selectorImplClass.getDeclaredField("selectedKeys");
      selectedKeysField.setAccessible(true);
      Field publicSelectedKeysField = selectorImplClass.getDeclaredField("publicSelectedKeys");
      publicSelectedKeysField.setAccessible(true);
      selectedKeysField.set(selector, set);
      publicSelectedKeysField.set(selector, set);
      logger.finest("Optimized Selector: " + selector.getClass().getName());
      return set;
    } catch (Throwable t) {
      logger.finest("Failed to optimize Selector: " + selector.getClass().getName(), t);
      return null;
    } 
  }
  
  static Class<?> findOptimizableSelectorClass(Selector selector) throws ClassNotFoundException {
    Class<?> selectorImplClass = Class.forName("sun.nio.ch.SelectorImpl", false, SelectorOptimizer.class.getClassLoader());
    if (!selectorImplClass.isAssignableFrom(selector.getClass()))
      return null; 
    return selectorImplClass;
  }
}
