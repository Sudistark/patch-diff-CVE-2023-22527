package com.hazelcast.internal.serialization.impl;

import com.hazelcast.internal.serialization.InternalSerializationService;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.HazelcastSerializationException;
import com.hazelcast.nio.serialization.Serializer;
import com.hazelcast.nio.serialization.StreamSerializer;
import com.hazelcast.nio.serialization.TypedStreamDeserializer;
import java.io.IOException;

class StreamSerializerAdapter implements SerializerAdapter {
  protected final InternalSerializationService service;
  
  protected final StreamSerializer serializer;
  
  public StreamSerializerAdapter(InternalSerializationService service, StreamSerializer serializer) {
    this.service = service;
    this.serializer = serializer;
  }
  
  public void write(ObjectDataOutput out, Object object) throws IOException { this.serializer.write(out, object); }
  
  public Object read(ObjectDataInput in) throws IOException { return this.serializer.read(in); }
  
  public Object read(ObjectDataInput in, Class aClass) throws IOException {
    if (!(this.serializer instanceof TypedStreamDeserializer))
      throw new HazelcastSerializationException(toString() + " is not implementing the " + TypedStreamDeserializer.class + " interface. Please implement this interface to deserialize for class " + aClass); 
    TypedStreamDeserializer deserializer = (TypedStreamDeserializer)this.serializer;
    return deserializer.read(in, aClass);
  }
  
  public int getTypeId() { return this.serializer.getTypeId(); }
  
  public void destroy() { this.serializer.destroy(); }
  
  public Serializer getImpl() { return this.serializer; }
  
  public String toString() { return "StreamSerializerAdapter{serializer=" + this.serializer + '}'; }
  
  public boolean equals(Object o) {
    if (this == o)
      return true; 
    if (o == null || getClass() != o.getClass())
      return false; 
    StreamSerializerAdapter that = (StreamSerializerAdapter)o;
    if ((this.serializer != null) ? !this.serializer.equals(that.serializer) : (that.serializer != null))
      return false; 
    return true;
  }
  
  public int hashCode() { return (this.serializer != null) ? this.serializer.hashCode() : 0; }
}
