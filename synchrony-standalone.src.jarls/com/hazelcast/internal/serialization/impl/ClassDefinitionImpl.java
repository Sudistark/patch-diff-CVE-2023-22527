package com.hazelcast.internal.serialization.impl;

import com.hazelcast.nio.serialization.ClassDefinition;
import com.hazelcast.nio.serialization.FieldDefinition;
import com.hazelcast.nio.serialization.FieldType;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;

public class ClassDefinitionImpl implements ClassDefinition {
  private final int factoryId;
  
  private final int classId;
  
  private int version;
  
  private final Map<String, FieldDefinition> fieldDefinitionsMap;
  
  public ClassDefinitionImpl(int factoryId, int classId, int version) {
    this.version = -1;
    this.fieldDefinitionsMap = new LinkedHashMap();
    this.factoryId = factoryId;
    this.classId = classId;
    this.version = version;
  }
  
  public void addFieldDef(FieldDefinitionImpl fd) { this.fieldDefinitionsMap.put(fd.getName(), fd); }
  
  public FieldDefinition getField(String name) { return (FieldDefinition)this.fieldDefinitionsMap.get(name); }
  
  public FieldDefinition getField(int fieldIndex) {
    if (fieldIndex < 0 || fieldIndex >= this.fieldDefinitionsMap.size())
      throw new IndexOutOfBoundsException("Index: " + fieldIndex + ", Size: " + this.fieldDefinitionsMap.size()); 
    for (FieldDefinition fieldDefinition : this.fieldDefinitionsMap.values()) {
      if (fieldIndex == fieldDefinition.getIndex())
        return fieldDefinition; 
    } 
    throw new IndexOutOfBoundsException("Index: " + fieldIndex + ", Size: " + this.fieldDefinitionsMap.size());
  }
  
  public boolean hasField(String fieldName) { return this.fieldDefinitionsMap.containsKey(fieldName); }
  
  public Set<String> getFieldNames() { return new HashSet(this.fieldDefinitionsMap.keySet()); }
  
  public FieldType getFieldType(String fieldName) {
    FieldDefinition fd = getField(fieldName);
    if (fd != null)
      return fd.getType(); 
    throw new IllegalArgumentException("Unknown field: " + fieldName);
  }
  
  public int getFieldClassId(String fieldName) {
    FieldDefinition fd = getField(fieldName);
    if (fd != null)
      return fd.getClassId(); 
    throw new IllegalArgumentException("Unknown field: " + fieldName);
  }
  
  public int getFieldCount() { return this.fieldDefinitionsMap.size(); }
  
  public final int getFactoryId() { return this.factoryId; }
  
  public final int getClassId() { return this.classId; }
  
  public final int getVersion() { return this.version; }
  
  void setVersionIfNotSet(int version) {
    if (getVersion() < 0)
      this.version = version; 
  }
  
  public boolean equals(Object o) {
    if (this == o)
      return true; 
    if (o == null || getClass() != o.getClass())
      return false; 
    ClassDefinitionImpl that = (ClassDefinitionImpl)o;
    if (this.factoryId != that.factoryId)
      return false; 
    if (this.classId != that.classId)
      return false; 
    if (this.version != that.version)
      return false; 
    return this.fieldDefinitionsMap.equals(that.fieldDefinitionsMap);
  }
  
  public int hashCode() {
    result = this.classId;
    return 31 * result + this.version;
  }
  
  public String toString() {
    return "ClassDefinition{factoryId=" + this.factoryId + ", classId=" + this.classId + ", version=" + this.version + ", fieldDefinitions=" + this.fieldDefinitionsMap


      
      .values() + '}';
  }
}
