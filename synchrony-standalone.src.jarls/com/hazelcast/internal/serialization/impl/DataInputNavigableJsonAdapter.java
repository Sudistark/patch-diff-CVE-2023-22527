package com.hazelcast.internal.serialization.impl;

import com.hazelcast.com.fasterxml.jackson.core.JsonFactory;
import com.hazelcast.com.fasterxml.jackson.core.JsonParser;
import com.hazelcast.internal.json.JsonReducedValueParser;
import com.hazelcast.internal.json.JsonValue;
import com.hazelcast.nio.BufferObjectDataInput;
import com.hazelcast.query.impl.getters.JsonPathCursor;
import java.io.IOException;

public class DataInputNavigableJsonAdapter extends NavigableJsonInputAdapter {
  private final int initialOffset;
  
  private BufferObjectDataInput input;
  
  public DataInputNavigableJsonAdapter(BufferObjectDataInput input, int initialOffset) {
    this.input = input;
    this.input.position(initialOffset);
    this.initialOffset = initialOffset;
  }
  
  public void position(int position) { this.input.position(position + this.initialOffset); }
  
  public int position() { return this.input.position() - this.initialOffset; }
  
  public void reset() { this.input.position(this.initialOffset); }
  
  public boolean isAttributeName(JsonPathCursor cursor) {
    try {
      byte[] nameBytes = cursor.getCurrentAsUTF8();
      if (!isQuote())
        return false; 
      for (int i = 0; i < nameBytes.length; i++) {
        if (nameBytes[i] != this.input.readByte())
          return false; 
      } 
      return isQuote();
    } catch (IOException e) {
      return false;
    } 
  }
  
  public JsonValue parseValue(JsonReducedValueParser parser, int offset) throws IOException {
    this.input.position(offset + this.initialOffset);
    return parser.parse(new UTF8Reader(this.input));
  }
  
  public JsonParser createParser(JsonFactory factory) throws IOException { return factory.createParser(SerializationUtil.convertToInputStream(this.input, this.initialOffset)); }
  
  private boolean isQuote() throws IOException { return (this.input.readByte() == 34); }
}
