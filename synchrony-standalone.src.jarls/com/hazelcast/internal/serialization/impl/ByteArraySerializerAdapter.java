package com.hazelcast.internal.serialization.impl;

import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.ByteArraySerializer;
import com.hazelcast.nio.serialization.HazelcastSerializationException;
import com.hazelcast.nio.serialization.Serializer;
import com.hazelcast.nio.serialization.TypedByteArrayDeserializer;
import java.io.IOException;

class ByteArraySerializerAdapter implements SerializerAdapter {
  protected final ByteArraySerializer serializer;
  
  public ByteArraySerializerAdapter(ByteArraySerializer serializer) { this.serializer = serializer; }
  
  public void write(ObjectDataOutput out, Object object) throws IOException {
    byte[] bytes = this.serializer.write(object);
    out.writeByteArray(bytes);
  }
  
  public Object read(ObjectDataInput in) throws IOException {
    byte[] bytes = in.readByteArray();
    if (bytes == null)
      return null; 
    return this.serializer.read(bytes);
  }
  
  public Object read(ObjectDataInput in, Class aClass) throws IOException {
    byte[] bytes = in.readByteArray();
    if (bytes == null)
      return null; 
    if (!(this.serializer instanceof TypedByteArrayDeserializer))
      throw new HazelcastSerializationException(this.serializer + " is not implementing the " + TypedByteArrayDeserializer.class + " interface. Please implement this interface to deserialize for class " + aClass); 
    TypedByteArrayDeserializer deserializer = (TypedByteArrayDeserializer)this.serializer;
    return deserializer.read(bytes, aClass);
  }
  
  public int getTypeId() { return this.serializer.getTypeId(); }
  
  public void destroy() { this.serializer.destroy(); }
  
  public Serializer getImpl() { return this.serializer; }
  
  public String toString() { return "SerializerAdapter{serializer=" + this.serializer + '}'; }
  
  public boolean equals(Object o) {
    if (this == o)
      return true; 
    if (o == null || getClass() != o.getClass())
      return false; 
    ByteArraySerializerAdapter that = (ByteArraySerializerAdapter)o;
    if ((this.serializer != null) ? !this.serializer.equals(that.serializer) : (that.serializer != null))
      return false; 
    return true;
  }
  
  public int hashCode() { return (this.serializer != null) ? this.serializer.hashCode() : 0; }
}
