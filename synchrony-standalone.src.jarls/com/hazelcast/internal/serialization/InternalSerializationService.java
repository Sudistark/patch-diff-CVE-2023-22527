package com.hazelcast.internal.serialization;

import com.hazelcast.core.PartitioningStrategy;
import com.hazelcast.nio.BufferObjectDataInput;
import com.hazelcast.nio.BufferObjectDataOutput;
import com.hazelcast.nio.Disposable;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.nio.serialization.DataType;
import com.hazelcast.nio.serialization.PortableReader;
import com.hazelcast.spi.serialization.SerializationService;
import java.io.IOException;
import java.nio.ByteOrder;

public interface InternalSerializationService extends SerializationService, Disposable {
  public static final byte VERSION_1 = 1;
  
  byte[] toBytes(Object paramObject);
  
  byte[] toBytes(Object paramObject, int paramInt, boolean paramBoolean);
  
  <B extends Data> B toData(Object paramObject, DataType paramDataType);
  
  <B extends Data> B toData(Object paramObject, DataType paramDataType, PartitioningStrategy paramPartitioningStrategy);
  
  <B extends Data> B convertData(Data paramData, DataType paramDataType);
  
  void writeObject(ObjectDataOutput paramObjectDataOutput, Object paramObject);
  
  <T> T readObject(ObjectDataInput paramObjectDataInput);
  
  <T> T readObject(ObjectDataInput paramObjectDataInput, Class paramClass);
  
  void disposeData(Data paramData);
  
  BufferObjectDataInput createObjectDataInput(byte[] paramArrayOfByte);
  
  BufferObjectDataInput createObjectDataInput(Data paramData);
  
  BufferObjectDataOutput createObjectDataOutput(int paramInt);
  
  BufferObjectDataOutput createObjectDataOutput();
  
  PortableReader createPortableReader(Data paramData) throws IOException;
  
  PortableContext getPortableContext();
  
  ClassLoader getClassLoader();
  
  ByteOrder getByteOrder();
  
  byte getVersion();
}
