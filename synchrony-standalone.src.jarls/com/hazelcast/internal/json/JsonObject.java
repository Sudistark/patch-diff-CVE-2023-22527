package com.hazelcast.internal.json;

import com.hazelcast.nio.serialization.SerializableByConvention;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.Reader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;

@SerializableByConvention
public class JsonObject extends JsonValue implements Iterable<JsonObject.Member> {
  private static final long serialVersionUID = -1139160206104439809L;
  
  private final List<String> names;
  
  private final List<JsonValue> values;
  
  private HashIndexTable table;
  
  public JsonObject() {
    this.names = new ArrayList();
    this.values = new ArrayList();
    this.table = new HashIndexTable();
  }
  
  public JsonObject(JsonObject object) { this(object, false); }
  
  private JsonObject(JsonObject object, boolean unmodifiable) {
    if (object == null)
      throw new NullPointerException("object is null"); 
    if (unmodifiable) {
      this.names = Collections.unmodifiableList(object.names);
      this.values = Collections.unmodifiableList(object.values);
    } else {
      this.names = new ArrayList(object.names);
      this.values = new ArrayList(object.values);
    } 
    this.table = new HashIndexTable();
    updateHashIndex();
  }
  
  @Deprecated
  public static JsonObject readFrom(Reader reader) throws IOException { return JsonValue.readFrom(reader).asObject(); }
  
  @Deprecated
  public static JsonObject readFrom(String string) { return JsonValue.readFrom(string).asObject(); }
  
  public static JsonObject unmodifiableObject(JsonObject object) { return new JsonObject(object, true); }
  
  public JsonObject add(String name, int value) {
    add(name, Json.value(value));
    return this;
  }
  
  public JsonObject add(String name, long value) {
    add(name, Json.value(value));
    return this;
  }
  
  public JsonObject add(String name, float value) {
    add(name, Json.value(value));
    return this;
  }
  
  public JsonObject add(String name, double value) {
    add(name, Json.value(value));
    return this;
  }
  
  public JsonObject add(String name, boolean value) {
    add(name, Json.value(value));
    return this;
  }
  
  public JsonObject add(String name, String value) {
    add(name, Json.value(value));
    return this;
  }
  
  public JsonObject add(String name, JsonValue value) {
    if (name == null)
      throw new NullPointerException("name is null"); 
    if (value == null)
      throw new NullPointerException("value is null"); 
    this.table.add(name, this.names.size());
    this.names.add(name);
    this.values.add(value);
    return this;
  }
  
  public JsonObject set(String name, int value) {
    set(name, Json.value(value));
    return this;
  }
  
  public JsonObject set(String name, long value) {
    set(name, Json.value(value));
    return this;
  }
  
  public JsonObject set(String name, float value) {
    set(name, Json.value(value));
    return this;
  }
  
  public JsonObject set(String name, double value) {
    set(name, Json.value(value));
    return this;
  }
  
  public JsonObject set(String name, boolean value) {
    set(name, Json.value(value));
    return this;
  }
  
  public JsonObject set(String name, String value) {
    set(name, Json.value(value));
    return this;
  }
  
  public JsonObject set(String name, JsonValue value) {
    if (name == null)
      throw new NullPointerException("name is null"); 
    if (value == null)
      throw new NullPointerException("value is null"); 
    int index = indexOf(name);
    if (index != -1) {
      this.values.set(index, value);
    } else {
      this.table.add(name, this.names.size());
      this.names.add(name);
      this.values.add(value);
    } 
    return this;
  }
  
  public JsonObject remove(String name) {
    if (name == null)
      throw new NullPointerException("name is null"); 
    int index = indexOf(name);
    if (index != -1) {
      this.table.remove(index);
      this.names.remove(index);
      this.values.remove(index);
    } 
    return this;
  }
  
  public JsonObject merge(JsonObject object) {
    if (object == null)
      throw new NullPointerException("object is null"); 
    for (Member member : object)
      set(Member.access$000(member), Member.access$100(member)); 
    return this;
  }
  
  public JsonValue get(String name) {
    if (name == null)
      throw new NullPointerException("name is null"); 
    int index = indexOf(name);
    return (index != -1) ? (JsonValue)this.values.get(index) : null;
  }
  
  public int getInt(String name, int defaultValue) {
    JsonValue value = get(name);
    return (value != null) ? value.asInt() : defaultValue;
  }
  
  public long getLong(String name, long defaultValue) {
    JsonValue value = get(name);
    return (value != null) ? value.asLong() : defaultValue;
  }
  
  public float getFloat(String name, float defaultValue) {
    JsonValue value = get(name);
    return (value != null) ? value.asFloat() : defaultValue;
  }
  
  public double getDouble(String name, double defaultValue) {
    JsonValue value = get(name);
    return (value != null) ? value.asDouble() : defaultValue;
  }
  
  public boolean getBoolean(String name, boolean defaultValue) {
    JsonValue value = get(name);
    return (value != null) ? value.asBoolean() : defaultValue;
  }
  
  public String getString(String name, String defaultValue) {
    JsonValue value = get(name);
    return (value != null) ? value.asString() : defaultValue;
  }
  
  public int size() { return this.names.size(); }
  
  public boolean isEmpty() { return this.names.isEmpty(); }
  
  public List<String> names() { return Collections.unmodifiableList(this.names); }
  
  public Iterator<Member> iterator() {
    Iterator<String> namesIterator = this.names.iterator();
    Iterator<JsonValue> valuesIterator = this.values.iterator();
    return new Object(this, namesIterator, valuesIterator);
  }
  
  void write(JsonWriter writer) throws IOException {
    writer.writeObjectOpen();
    Iterator<String> namesIterator = this.names.iterator();
    Iterator<JsonValue> valuesIterator = this.values.iterator();
    if (namesIterator.hasNext()) {
      writer.writeMemberName((String)namesIterator.next());
      writer.writeMemberSeparator();
      ((JsonValue)valuesIterator.next()).write(writer);
      while (namesIterator.hasNext()) {
        writer.writeObjectSeparator();
        writer.writeMemberName((String)namesIterator.next());
        writer.writeMemberSeparator();
        ((JsonValue)valuesIterator.next()).write(writer);
      } 
    } 
    writer.writeObjectClose();
  }
  
  public boolean isObject() { return true; }
  
  public JsonObject asObject() { return this; }
  
  public int hashCode() {
    result = 1;
    result = 31 * result + this.names.hashCode();
    return 31 * result + this.values.hashCode();
  }
  
  public boolean equals(Object obj) {
    if (this == obj)
      return true; 
    if (obj == null)
      return false; 
    if (getClass() != obj.getClass())
      return false; 
    JsonObject other = (JsonObject)obj;
    return (this.names.equals(other.names) && this.values.equals(other.values));
  }
  
  int indexOf(String name) {
    int index = this.table.get(name);
    if (index != -1 && name.equals(this.names.get(index)))
      return index; 
    return this.names.lastIndexOf(name);
  }
  
  private void readObject(ObjectInputStream inputStream) throws IOException, ClassNotFoundException {
    inputStream.defaultReadObject();
    this.table = new HashIndexTable();
    updateHashIndex();
  }
  
  private void updateHashIndex() {
    int size = this.names.size();
    for (int i = 0; i < size; i++)
      this.table.add((String)this.names.get(i), i); 
  }
}
