package com.hazelcast.kubernetes;

import com.hazelcast.core.HazelcastException;
import com.hazelcast.logging.ILogger;
import com.hazelcast.logging.Logger;
import com.hazelcast.util.ExceptionUtil;
import java.util.List;
import java.util.concurrent.Callable;

final class RetryUtils {
  static final long INITIAL_BACKOFF_MS = 1500L;
  
  static final long MAX_BACKOFF_MS = 300000L;
  
  static final double BACKOFF_MULTIPLIER = 1.5D;
  
  private static final ILogger LOGGER = Logger.getLogger(RetryUtils.class);
  
  private static final long MS_IN_SECOND = 1000L;
  
  public static <T> T retry(Callable<T> callable, int retries, List<String> nonRetryableKeywords) {
    int retryCount = 0;
    while (true) {
      try {
        return (T)callable.call();
      } catch (Exception e) {
        retryCount++;
        if (retryCount > retries || containsAnyOf(e, nonRetryableKeywords))
          throw ExceptionUtil.rethrow(e); 
        long waitIntervalMs = backoffIntervalForRetry(retryCount);
        LOGGER.warning(
            String.format("Couldn't discover Hazelcast members using Kubernetes API, [%s] retrying in %s seconds...", new Object[] { Integer.valueOf(retryCount), Long.valueOf(waitIntervalMs / 1000L) }));
        sleep(waitIntervalMs);
      } 
    } 
  }
  
  private static boolean containsAnyOf(Exception e, List<String> nonRetryableKeywords) {
    Throwable currentException = e;
    while (currentException != null) {
      String exceptionMessage = currentException.getMessage();
      for (String keyword : nonRetryableKeywords) {
        if (exceptionMessage != null && exceptionMessage.contains(keyword))
          return true; 
      } 
      currentException = currentException.getCause();
    } 
    return false;
  }
  
  private static long backoffIntervalForRetry(int retryCount) {
    long result = 1500L;
    for (int i = 1; i < retryCount; i++) {
      result = (long)(result * 1.5D);
      if (result > 300000L)
        return 300000L; 
    } 
    return result;
  }
  
  private static void sleep(long millis) {
    try {
      Thread.sleep(millis);
    } catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new HazelcastException(e);
    } 
  }
}
