package com.hazelcast.org.snakeyaml.engine.v2.common;

import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

public final class CharConstants {
  private static final String ALPHA_S = "abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-_";
  
  private static final String LINEBR_S = "\n\r";
  
  private static final String NULL_OR_LINEBR_S = "\000\n\r";
  
  private static final String NULL_BL_LINEBR_S = " \000\n\r";
  
  private static final String NULL_BL_T_LINEBR_S = "\t \000\n\r";
  
  private static final String NULL_BL_T_S = "\000 \t";
  
  private static final String URI_CHARS_S = "abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-_-;/?:@&=+$,_.!~*'()[]%";
  
  public static final CharConstants LINEBR = new CharConstants("\n\r");
  
  public static final CharConstants NULL_OR_LINEBR = new CharConstants("\000\n\r");
  
  public static final CharConstants NULL_BL_LINEBR = new CharConstants(" \000\n\r");
  
  public static final CharConstants NULL_BL_T_LINEBR = new CharConstants("\t \000\n\r");
  
  public static final CharConstants NULL_BL_T = new CharConstants("\000 \t");
  
  public static final CharConstants URI_CHARS = new CharConstants("abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-_-;/?:@&=+$,_.!~*'()[]%");
  
  public static final CharConstants ALPHA = new CharConstants("abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-_");
  
  private static final int ASCII_SIZE = 128;
  
  boolean[] contains;
  
  public static final Map<Integer, Character> ESCAPE_REPLACEMENTS;
  
  public static final Map<Character, Integer> ESCAPES;
  
  public static final Map<Character, Integer> ESCAPE_CODES;
  
  private CharConstants(String content) {
    this.contains = new boolean[128];
    Arrays.fill(this.contains, false);
    for (int i = 0; i < content.length(); i++) {
      int c = content.codePointAt(i);
      this.contains[c] = true;
    } 
  }
  
  public boolean has(int c) { return (c < 128 && this.contains[c]); }
  
  public boolean hasNo(int c) { return !has(c); }
  
  public boolean has(int c, String additional) { return (has(c) || additional.indexOf(c) != -1); }
  
  public boolean hasNo(int c, String additional) { return !has(c, additional); }
  
  static  {
    escapeReplacements = new HashMap();
    Map<Character, Integer> escapes = new HashMap<Character, Integer>();
    escapeReplacements.put(Integer.valueOf(48), Character.valueOf(false));
    escapeReplacements.put(Integer.valueOf(97), Character.valueOf('\007'));
    escapeReplacements.put(Integer.valueOf(98), Character.valueOf('\b'));
    escapeReplacements.put(Integer.valueOf(116), Character.valueOf('\t'));
    escapeReplacements.put(Integer.valueOf(110), Character.valueOf('\n'));
    escapeReplacements.put(Integer.valueOf(118), Character.valueOf('\013'));
    escapeReplacements.put(Integer.valueOf(102), Character.valueOf('\f'));
    escapeReplacements.put(Integer.valueOf(114), Character.valueOf('\r'));
    escapeReplacements.put(Integer.valueOf(101), Character.valueOf('\033'));
    escapeReplacements.put(Integer.valueOf(32), Character.valueOf(' '));
    escapeReplacements.put(Integer.valueOf(34), Character.valueOf('"'));
    escapeReplacements.put(Integer.valueOf(47), Character.valueOf('/'));
    escapeReplacements.put(Integer.valueOf(92), Character.valueOf('\\'));
    escapeReplacements.put(Integer.valueOf(78), Character.valueOf(''));
    escapeReplacements.put(Integer.valueOf(95), Character.valueOf(' '));
    escapeReplacements.put(Integer.valueOf(76), Character.valueOf(' '));
    escapeReplacements.put(Integer.valueOf(80), Character.valueOf(' '));
    escapeReplacements.entrySet().stream()
      .filter(entry -> (((Integer)entry.getKey()).intValue() != 32 && ((Integer)entry.getKey()).intValue() != 47))
      .forEach(entry -> (Integer)escapes.put(entry.getValue(), entry.getKey()));
    ESCAPE_REPLACEMENTS = Collections.unmodifiableMap(escapeReplacements);
    ESCAPES = Collections.unmodifiableMap(escapes);
    Map<Character, Integer> escapeCodes = new HashMap<Character, Integer>();
    escapeCodes.put(Character.valueOf('x'), Integer.valueOf(2));
    escapeCodes.put(Character.valueOf('u'), Integer.valueOf(4));
    escapeCodes.put(Character.valueOf('U'), Integer.valueOf(8));
    ESCAPE_CODES = Collections.unmodifiableMap(escapeCodes);
  }
}
