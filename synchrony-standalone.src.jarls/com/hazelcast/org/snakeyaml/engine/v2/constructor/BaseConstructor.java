package com.hazelcast.org.snakeyaml.engine.v2.constructor;

import com.hazelcast.org.snakeyaml.engine.v2.api.ConstructNode;
import com.hazelcast.org.snakeyaml.engine.v2.api.LoadSettings;
import com.hazelcast.org.snakeyaml.engine.v2.exceptions.ConstructorException;
import com.hazelcast.org.snakeyaml.engine.v2.exceptions.YamlEngineException;
import com.hazelcast.org.snakeyaml.engine.v2.nodes.MappingNode;
import com.hazelcast.org.snakeyaml.engine.v2.nodes.Node;
import com.hazelcast.org.snakeyaml.engine.v2.nodes.NodeTuple;
import com.hazelcast.org.snakeyaml.engine.v2.nodes.ScalarNode;
import com.hazelcast.org.snakeyaml.engine.v2.nodes.SequenceNode;
import com.hazelcast.org.snakeyaml.engine.v2.nodes.Tag;
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;

public abstract class BaseConstructor {
  protected LoadSettings settings;
  
  protected final Map<Tag, ConstructNode> tagConstructors;
  
  final Map<Node, Object> constructedObjects;
  
  private final Set<Node> recursiveObjects;
  
  private final ArrayList<RecursiveTuple<Map<Object, Object>, RecursiveTuple<Object, Object>>> maps2fill;
  
  private final ArrayList<RecursiveTuple<Set<Object>, Object>> sets2fill;
  
  public BaseConstructor(LoadSettings settings) {
    this.settings = settings;
    this.tagConstructors = new HashMap();
    this.constructedObjects = new HashMap();
    this.recursiveObjects = new HashSet();
    this.maps2fill = new ArrayList();
    this.sets2fill = new ArrayList();
  }
  
  public Object constructSingleDocument(Optional<Node> optionalNode) {
    if (!optionalNode.isPresent() || Tag.NULL.equals(((Node)optionalNode.get()).getTag())) {
      ConstructNode construct = (ConstructNode)this.tagConstructors.get(Tag.NULL);
      return construct.construct((Node)optionalNode.orElse(null));
    } 
    return construct((Node)optionalNode.get());
  }
  
  protected Object construct(Node node) {
    try {
      Object data = constructObject(node);
      fillRecursive();
      return data;
    } catch (YamlEngineException e) {
      throw e;
    } catch (RuntimeException e) {
      throw new YamlEngineException(e);
    } finally {
      this.constructedObjects.clear();
      this.recursiveObjects.clear();
    } 
  }
  
  private void fillRecursive() {
    if (!this.maps2fill.isEmpty()) {
      for (RecursiveTuple<Map<Object, Object>, RecursiveTuple<Object, Object>> entry : this.maps2fill) {
        RecursiveTuple<Object, Object> keyValueTuple = (RecursiveTuple)entry.getValue2();
        ((Map)entry.getValue1()).put(keyValueTuple.getValue1(), keyValueTuple.getValue2());
      } 
      this.maps2fill.clear();
    } 
    if (!this.sets2fill.isEmpty()) {
      for (RecursiveTuple<Set<Object>, Object> value : this.sets2fill)
        ((Set)value.getValue1()).add(value.getValue2()); 
      this.sets2fill.clear();
    } 
  }
  
  protected Object constructObject(Node node) {
    Objects.requireNonNull(node, "Node cannot be null");
    if (this.constructedObjects.containsKey(node))
      return this.constructedObjects.get(node); 
    return constructObjectNoCheck(node);
  }
  
  protected Object constructObjectNoCheck(Node node) {
    if (this.recursiveObjects.contains(node))
      throw new ConstructorException(null, Optional.empty(), "found unconstructable recursive node", node
          .getStartMark()); 
    this.recursiveObjects.add(node);
    ConstructNode constructor = (ConstructNode)findConstructorFor(node).orElseThrow(() -> new ConstructorException(null, Optional.empty(), "could not determine a constructor for the tag " + node
          .getTag(), node.getStartMark()));
    Object data = this.constructedObjects.containsKey(node) ? this.constructedObjects.get(node) : constructor.construct(node);
    this.constructedObjects.put(node, data);
    this.recursiveObjects.remove(node);
    if (node.isRecursive())
      constructor.constructRecursive(node, data); 
    return data;
  }
  
  protected Optional<ConstructNode> findConstructorFor(Node node) {
    Tag tag = node.getTag();
    if (this.settings.getTagConstructors().containsKey(tag))
      return Optional.of(this.settings.getTagConstructors().get(tag)); 
    if (this.tagConstructors.containsKey(tag))
      return Optional.of(this.tagConstructors.get(tag)); 
    return Optional.empty();
  }
  
  protected String constructScalar(ScalarNode node) { return node.getValue(); }
  
  protected List<Object> createDefaultList(int initSize) { return new ArrayList(initSize); }
  
  protected Set<Object> createDefaultSet(int initSize) { return new LinkedHashSet(initSize); }
  
  protected Map<Object, Object> createDefaultMap(int initSize) { return new LinkedHashMap(initSize); }
  
  protected Object createArray(Class<?> type, int size) { return Array.newInstance(type.getComponentType(), size); }
  
  protected List<Object> constructSequence(SequenceNode node) {
    List<Object> result = (List)this.settings.getDefaultList().apply(node.getValue().size());
    constructSequenceStep2(node, result);
    return result;
  }
  
  protected void constructSequenceStep2(SequenceNode node, Collection<Object> collection) {
    for (Node child : node.getValue())
      collection.add(constructObject(child)); 
  }
  
  protected Set<Object> constructSet(MappingNode node) {
    Set<Object> set = (Set)this.settings.getDefaultSet().apply(node.getValue().size());
    constructSet2ndStep(node, set);
    return set;
  }
  
  protected Map<Object, Object> constructMapping(MappingNode node) {
    Map<Object, Object> mapping = (Map)this.settings.getDefaultMap().apply(node.getValue().size());
    constructMapping2ndStep(node, mapping);
    return mapping;
  }
  
  protected void constructMapping2ndStep(MappingNode node, Map<Object, Object> mapping) {
    List<NodeTuple> nodeValue = node.getValue();
    for (NodeTuple tuple : nodeValue) {
      Node keyNode = tuple.getKeyNode();
      Node valueNode = tuple.getValueNode();
      Object key = constructObject(keyNode);
      if (key != null)
        try {
          key.hashCode();
        } catch (Exception e) {
          throw new ConstructorException("while constructing a mapping", node
              .getStartMark(), "found unacceptable key " + key, tuple
              .getKeyNode().getStartMark(), e);
        }  
      Object value = constructObject(valueNode);
      if (keyNode.isRecursive()) {
        if (this.settings.getAllowRecursiveKeys()) {
          postponeMapFilling(mapping, key, value);
          continue;
        } 
        throw new YamlEngineException("Recursive key for mapping is detected but it is not configured to be allowed.");
      } 
      mapping.put(key, value);
    } 
  }
  
  protected void postponeMapFilling(Map<Object, Object> mapping, Object key, Object value) { this.maps2fill.add(0, new RecursiveTuple(mapping, new RecursiveTuple(key, value))); }
  
  protected void constructSet2ndStep(MappingNode node, Set<Object> set) {
    List<NodeTuple> nodeValue = node.getValue();
    for (NodeTuple tuple : nodeValue) {
      Node keyNode = tuple.getKeyNode();
      Object key = constructObject(keyNode);
      if (key != null)
        try {
          key.hashCode();
        } catch (Exception e) {
          throw new ConstructorException("while constructing a Set", node.getStartMark(), "found unacceptable key " + key, tuple
              .getKeyNode().getStartMark(), e);
        }  
      if (keyNode.isRecursive()) {
        if (this.settings.getAllowRecursiveKeys()) {
          postponeSetFilling(set, key);
          continue;
        } 
        throw new YamlEngineException("Recursive key for mapping is detected but it is not configured to be allowed.");
      } 
      set.add(key);
    } 
  }
  
  protected void postponeSetFilling(Set<Object> set, Object key) { this.sets2fill.add(0, new RecursiveTuple(set, key)); }
}
