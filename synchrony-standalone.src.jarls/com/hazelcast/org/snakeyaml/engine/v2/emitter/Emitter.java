package com.hazelcast.org.snakeyaml.engine.v2.emitter;

import com.hazelcast.org.snakeyaml.engine.v2.api.DumpSettings;
import com.hazelcast.org.snakeyaml.engine.v2.api.StreamDataWriter;
import com.hazelcast.org.snakeyaml.engine.v2.common.Anchor;
import com.hazelcast.org.snakeyaml.engine.v2.common.ArrayStack;
import com.hazelcast.org.snakeyaml.engine.v2.common.CharConstants;
import com.hazelcast.org.snakeyaml.engine.v2.common.ScalarStyle;
import com.hazelcast.org.snakeyaml.engine.v2.common.SpecVersion;
import com.hazelcast.org.snakeyaml.engine.v2.events.CollectionStartEvent;
import com.hazelcast.org.snakeyaml.engine.v2.events.Event;
import com.hazelcast.org.snakeyaml.engine.v2.events.MappingStartEvent;
import com.hazelcast.org.snakeyaml.engine.v2.events.NodeEvent;
import com.hazelcast.org.snakeyaml.engine.v2.events.ScalarEvent;
import com.hazelcast.org.snakeyaml.engine.v2.events.SequenceStartEvent;
import com.hazelcast.org.snakeyaml.engine.v2.exceptions.EmitterException;
import com.hazelcast.org.snakeyaml.engine.v2.exceptions.YamlEngineException;
import com.hazelcast.org.snakeyaml.engine.v2.scanner.StreamReader;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Optional;
import java.util.Queue;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.regex.Pattern;

public final class Emitter implements Emitable {
  private static final Map<Character, String> ESCAPE_REPLACEMENTS = new HashMap();
  
  public static final int MIN_INDENT = 1;
  
  public static final int MAX_INDENT = 10;
  
  private static final String SPACE = " ";
  
  private static final Map<String, String> DEFAULT_TAG_PREFIXES;
  
  private final StreamDataWriter stream;
  
  private final ArrayStack<EmitterState> states;
  
  private EmitterState state;
  
  private final Queue<Event> events;
  
  private Event event;
  
  private final ArrayStack<Integer> indents;
  
  private Integer indent;
  
  private int flowLevel;
  
  private boolean rootContext;
  
  private boolean mappingContext;
  
  private boolean simpleKeyContext;
  
  private int column;
  
  private boolean whitespace;
  
  private boolean indention;
  
  private boolean openEnded;
  
  private Boolean canonical;
  
  private Boolean multiLineFlow;
  
  private boolean allowUnicode;
  
  private int bestIndent;
  
  private int indicatorIndent;
  
  private int bestWidth;
  
  private String bestLineBreak;
  
  private boolean splitLines;
  
  private int maxSimpleKeyLength;
  
  private Map<String, String> tagPrefixes;
  
  private Optional<Anchor> preparedAnchor;
  
  private String preparedTag;
  
  private ScalarAnalysis analysis;
  
  private Optional<ScalarStyle> scalarStyle;
  
  private static final Pattern HANDLE_FORMAT;
  
  static  {
    ESCAPE_REPLACEMENTS.put(Character.valueOf(false), "0");
    ESCAPE_REPLACEMENTS.put(Character.valueOf('\007'), "a");
    ESCAPE_REPLACEMENTS.put(Character.valueOf('\b'), "b");
    ESCAPE_REPLACEMENTS.put(Character.valueOf('\t'), "t");
    ESCAPE_REPLACEMENTS.put(Character.valueOf('\n'), "n");
    ESCAPE_REPLACEMENTS.put(Character.valueOf('\013'), "v");
    ESCAPE_REPLACEMENTS.put(Character.valueOf('\f'), "f");
    ESCAPE_REPLACEMENTS.put(Character.valueOf('\r'), "r");
    ESCAPE_REPLACEMENTS.put(Character.valueOf('\033'), "e");
    ESCAPE_REPLACEMENTS.put(Character.valueOf('"'), "\"");
    ESCAPE_REPLACEMENTS.put(Character.valueOf('\\'), "\\");
    ESCAPE_REPLACEMENTS.put(Character.valueOf(''), "N");
    ESCAPE_REPLACEMENTS.put(Character.valueOf(' '), "_");
    ESCAPE_REPLACEMENTS.put(Character.valueOf(' '), "L");
    ESCAPE_REPLACEMENTS.put(Character.valueOf(' '), "P");
    DEFAULT_TAG_PREFIXES = new LinkedHashMap();
    DEFAULT_TAG_PREFIXES.put("!", "!");
    DEFAULT_TAG_PREFIXES.put("tag:yaml.org,2002:", "!!");
    HANDLE_FORMAT = Pattern.compile("^![-_\\w]*!$");
  }
  
  public Emitter(DumpSettings opts, StreamDataWriter stream) {
    this.stream = stream;
    this.states = new ArrayStack(100);
    this.state = new ExpectStreamStart(this, null);
    this.events = new ArrayBlockingQueue(100);
    this.event = null;
    this.indents = new ArrayStack(10);
    this.indent = null;
    this.flowLevel = 0;
    this.mappingContext = false;
    this.simpleKeyContext = false;
    this.column = 0;
    this.whitespace = true;
    this.indention = true;
    this.openEnded = false;
    this.canonical = Boolean.valueOf(opts.isCanonical());
    this.multiLineFlow = Boolean.valueOf(opts.isMultiLineFlow());
    this.allowUnicode = opts.isUseUnicodeEncoding();
    this.bestIndent = 2;
    if (opts.getIndent() > 1 && opts.getIndent() < 10)
      this.bestIndent = opts.getIndent(); 
    this.indicatorIndent = opts.getIndicatorIndent();
    this.bestWidth = 80;
    if (opts.getWidth() > this.bestIndent * 2)
      this.bestWidth = opts.getWidth(); 
    this.bestLineBreak = opts.getBestLineBreak();
    this.splitLines = opts.isSplitLines();
    this.maxSimpleKeyLength = opts.getMaxSimpleKeyLength();
    this.tagPrefixes = new LinkedHashMap();
    this.preparedAnchor = Optional.empty();
    this.preparedTag = null;
    this.analysis = null;
    this.scalarStyle = Optional.empty();
  }
  
  public void emit(Event event) {
    this.events.add(event);
    while (!needMoreEvents()) {
      this.event = (Event)this.events.poll();
      this.state.expect();
      this.event = null;
    } 
  }
  
  private boolean needMoreEvents() {
    if (this.events.isEmpty())
      return true; 
    Event nextEvent = (Event)this.events.peek();
    if (nextEvent.getEventId() == Event.ID.DocumentStart)
      return needEvents(1); 
    if (nextEvent.getEventId() == Event.ID.SequenceStart)
      return needEvents(2); 
    if (nextEvent.getEventId() == Event.ID.MappingStart)
      return needEvents(3); 
    return false;
  }
  
  private boolean needEvents(int count) {
    int level = 0;
    Iterator<Event> iter = this.events.iterator();
    iter.next();
    while (iter.hasNext()) {
      Event nextEvent = (Event)iter.next();
      if (nextEvent.getEventId() == Event.ID.DocumentStart || nextEvent instanceof CollectionStartEvent) {
        level++;
      } else if (nextEvent.getEventId() == Event.ID.DocumentEnd || nextEvent instanceof com.hazelcast.org.snakeyaml.engine.v2.events.CollectionEndEvent) {
        level--;
      } else if (nextEvent.getEventId() == Event.ID.StreamEnd) {
        level = -1;
      } 
      if (level < 0)
        return false; 
    } 
    return (this.events.size() < count + 1);
  }
  
  private void increaseIndent(boolean isFlow, boolean indentless) {
    this.indents.push(this.indent);
    if (this.indent == null) {
      if (isFlow) {
        this.indent = Integer.valueOf(this.bestIndent);
      } else {
        this.indent = Integer.valueOf(0);
      } 
    } else if (!indentless) {
      Emitter emitter = this;
      emitter.indent = Integer.valueOf(emitter.indent.intValue() + this.bestIndent);
    } 
  }
  
  private void expectNode(boolean root, boolean mapping, boolean simpleKey) {
    this.rootContext = root;
    this.mappingContext = mapping;
    this.simpleKeyContext = simpleKey;
    if (this.event.getEventId() == Event.ID.Alias) {
      expectAlias();
    } else if (this.event.getEventId() == Event.ID.Scalar || this.event.getEventId() == Event.ID.SequenceStart || this.event.getEventId() == Event.ID.MappingStart) {
      processAnchor("&");
      processTag();
      handleNodeEvent(this.event.getEventId());
    } else {
      throw new EmitterException("expected NodeEvent, but got " + this.event);
    } 
  }
  
  private void handleNodeEvent(Event.ID id) {
    switch (null.$SwitchMap$org$snakeyaml$engine$v2$events$Event$ID[id.ordinal()]) {
      case 1:
        expectScalar();
        return;
      case 2:
        if (this.flowLevel != 0 || this.canonical.booleanValue() || ((SequenceStartEvent)this.event).isFlow() || checkEmptySequence()) {
          expectFlowSequence();
        } else {
          expectBlockSequence();
        } 
        return;
      case 3:
        if (this.flowLevel != 0 || this.canonical.booleanValue() || ((MappingStartEvent)this.event).isFlow() || checkEmptyMapping()) {
          expectFlowMapping();
        } else {
          expectBlockMapping();
        } 
        return;
    } 
    throw new IllegalStateException();
  }
  
  private void expectAlias() {
    if (this.event instanceof com.hazelcast.org.snakeyaml.engine.v2.events.AliasEvent) {
      processAnchor("*");
      this.state = (EmitterState)this.states.pop();
    } else {
      throw new EmitterException("Expecting Alias.");
    } 
  }
  
  private void expectScalar() {
    increaseIndent(true, false);
    processScalar();
    this.indent = (Integer)this.indents.pop();
    this.state = (EmitterState)this.states.pop();
  }
  
  private void expectFlowSequence() {
    writeIndicator("[", true, true, false);
    this.flowLevel++;
    increaseIndent(true, false);
    if (this.multiLineFlow.booleanValue())
      writeIndent(); 
    this.state = new ExpectFirstFlowSequenceItem(this, null);
  }
  
  private void expectFlowMapping() {
    writeIndicator("{", true, true, false);
    this.flowLevel++;
    increaseIndent(true, false);
    if (this.multiLineFlow.booleanValue())
      writeIndent(); 
    this.state = new ExpectFirstFlowMappingKey(this, null);
  }
  
  private void expectBlockSequence() {
    boolean indentless = (this.mappingContext && !this.indention);
    increaseIndent(false, indentless);
    this.state = new ExpectFirstBlockSequenceItem(this, null);
  }
  
  private void expectBlockMapping() {
    increaseIndent(false, false);
    this.state = new ExpectFirstBlockMappingKey(this, null);
  }
  
  private boolean checkEmptySequence() {
    return (this.event.getEventId() == Event.ID.SequenceStart && !this.events.isEmpty() && ((Event)this.events.peek()).getEventId() == Event.ID.SequenceEnd);
  }
  
  private boolean checkEmptyMapping() {
    return (this.event.getEventId() == Event.ID.MappingStart && !this.events.isEmpty() && ((Event)this.events.peek()).getEventId() == Event.ID.MappingEnd);
  }
  
  private boolean checkSimpleKey() {
    int length = 0;
    if (this.event instanceof NodeEvent) {
      Optional<Anchor> anchorOpt = ((NodeEvent)this.event).getAnchor();
      if (anchorOpt.isPresent()) {
        if (!this.preparedAnchor.isPresent())
          this.preparedAnchor = anchorOpt; 
        length += ((Anchor)anchorOpt.get()).getValue().length();
      } 
    } 
    Optional<String> tag = Optional.empty();
    if (this.event.getEventId() == Event.ID.Scalar) {
      tag = ((ScalarEvent)this.event).getTag();
    } else if (this.event instanceof CollectionStartEvent) {
      tag = ((CollectionStartEvent)this.event).getTag();
    } 
    if (tag.isPresent()) {
      if (this.preparedTag == null)
        this.preparedTag = prepareTag((String)tag.get()); 
      length += this.preparedTag.length();
    } 
    if (this.event.getEventId() == Event.ID.Scalar) {
      if (this.analysis == null)
        this.analysis = analyzeScalar(((ScalarEvent)this.event).getValue()); 
      length += this.analysis.getScalar().length();
    } 
    return (length < this.maxSimpleKeyLength && (this.event.getEventId() == Event.ID.Alias || (this.event.getEventId() == Event.ID.Scalar && !this.analysis.isEmpty() && !this.analysis.isMultiline()) || checkEmptySequence() || checkEmptyMapping()));
  }
  
  private void processAnchor(String indicator) {
    NodeEvent ev = (NodeEvent)this.event;
    Optional<Anchor> anchorOption = ev.getAnchor();
    if (anchorOption.isPresent()) {
      Anchor anchor = (Anchor)anchorOption.get();
      if (!this.preparedAnchor.isPresent())
        this.preparedAnchor = anchorOption; 
      writeIndicator(indicator + anchor, true, false, false);
    } 
    this.preparedAnchor = Optional.empty();
  }
  
  private void processTag() {
    Optional<String> tag;
    if (this.event.getEventId() == Event.ID.Scalar) {
      ScalarEvent ev = (ScalarEvent)this.event;
      tag = ev.getTag();
      if (!this.scalarStyle.isPresent())
        this.scalarStyle = chooseScalarStyle(ev); 
      if ((!this.canonical.booleanValue() || !tag.isPresent()) && ((!this.scalarStyle.isPresent() && ev.getImplicit().canOmitTagInPlainScalar()) || (this.scalarStyle.isPresent() && ev.getImplicit().canOmitTagInNonPlainScalar()))) {
        this.preparedTag = null;
        return;
      } 
      if (ev.getImplicit().canOmitTagInPlainScalar() && !tag.isPresent()) {
        tag = Optional.of("!");
        this.preparedTag = null;
      } 
    } else {
      CollectionStartEvent ev = (CollectionStartEvent)this.event;
      tag = ev.getTag();
      if ((!this.canonical.booleanValue() || !tag.isPresent()) && ev.isImplicit()) {
        this.preparedTag = null;
        return;
      } 
    } 
    if (!tag.isPresent())
      throw new EmitterException("tag is not specified"); 
    if (this.preparedTag == null)
      this.preparedTag = prepareTag((String)tag.get()); 
    writeIndicator(this.preparedTag, true, false, false);
    this.preparedTag = null;
  }
  
  private Optional<ScalarStyle> chooseScalarStyle(ScalarEvent ev) {
    if (this.analysis == null)
      this.analysis = analyzeScalar(ev.getValue()); 
    if ((!ev.isPlain() && ev.getScalarStyle() == ScalarStyle.DOUBLE_QUOTED) || this.canonical.booleanValue())
      return Optional.of(ScalarStyle.DOUBLE_QUOTED); 
    if (ev.isPlain() && ev.getImplicit().canOmitTagInPlainScalar() && (!this.simpleKeyContext || (!this.analysis.isEmpty() && !this.analysis.isMultiline())) && ((this.flowLevel != 0 && this.analysis.isAllowFlowPlain()) || (this.flowLevel == 0 && this.analysis.isAllowBlockPlain())))
      return Optional.empty(); 
    if (!ev.isPlain() && (ev.getScalarStyle() == ScalarStyle.LITERAL || ev.getScalarStyle() == ScalarStyle.FOLDED) && this.flowLevel == 0 && !this.simpleKeyContext && this.analysis.isAllowBlock())
      return Optional.of(ev.getScalarStyle()); 
    if ((ev.isPlain() || ev.getScalarStyle() == ScalarStyle.SINGLE_QUOTED) && this.analysis.isAllowSingleQuoted() && (!this.simpleKeyContext || !this.analysis.isMultiline()))
      return Optional.of(ScalarStyle.SINGLE_QUOTED); 
    return Optional.of(ScalarStyle.DOUBLE_QUOTED);
  }
  
  private void processScalar() {
    ScalarEvent ev = (ScalarEvent)this.event;
    if (this.analysis == null)
      this.analysis = analyzeScalar(ev.getValue()); 
    if (!this.scalarStyle.isPresent())
      this.scalarStyle = chooseScalarStyle(ev); 
    boolean split = (!this.simpleKeyContext && this.splitLines);
    if (!this.scalarStyle.isPresent()) {
      writePlain(this.analysis.getScalar(), split);
    } else {
      switch (null.$SwitchMap$org$snakeyaml$engine$v2$common$ScalarStyle[((ScalarStyle)this.scalarStyle.get()).ordinal()]) {
        case 1:
          writeDoubleQuoted(this.analysis.getScalar(), split);
          break;
        case 2:
          writeSingleQuoted(this.analysis.getScalar(), split);
          break;
        case 3:
          writeFolded(this.analysis.getScalar(), split);
          break;
        case 4:
          writeLiteral(this.analysis.getScalar());
          break;
        default:
          throw new YamlEngineException("Unexpected scalarStyle: " + this.scalarStyle);
      } 
    } 
    this.analysis = null;
    this.scalarStyle = Optional.empty();
  }
  
  private String prepareVersion(SpecVersion version) {
    if (version.getMajor() != 1)
      throw new EmitterException("unsupported YAML version: " + version); 
    return version.getRepresentation();
  }
  
  private String prepareTagHandle(String handle) {
    if (handle.length() == 0)
      throw new EmitterException("tag handle must not be empty"); 
    if (handle.charAt(0) != '!' || handle.charAt(handle.length() - 1) != '!')
      throw new EmitterException("tag handle must start and end with '!': " + handle); 
    if (!"!".equals(handle) && !HANDLE_FORMAT.matcher(handle).matches())
      throw new EmitterException("invalid character in the tag handle: " + handle); 
    return handle;
  }
  
  private String prepareTagPrefix(String prefix) {
    if (prefix.length() == 0)
      throw new EmitterException("tag prefix must not be empty"); 
    StringBuilder chunks = new StringBuilder();
    int start = 0;
    int end = 0;
    if (prefix.charAt(0) == '!')
      end = 1; 
    while (end < prefix.length())
      end++; 
    if (start < end)
      chunks.append(prefix.substring(start, end)); 
    return chunks.toString();
  }
  
  private String prepareTag(String tag) {
    if (tag.length() == 0)
      throw new EmitterException("tag must not be empty"); 
    if ("!".equals(tag))
      return tag; 
    String handle = null;
    String suffix = tag;
    for (String prefix : this.tagPrefixes.keySet()) {
      if (tag.startsWith(prefix) && ("!".equals(prefix) || prefix.length() < tag.length()))
        handle = prefix; 
    } 
    if (handle != null) {
      suffix = tag.substring(handle.length());
      handle = (String)this.tagPrefixes.get(handle);
    } 
    int end = suffix.length();
    String suffixText = (end > 0) ? suffix.substring(0, end) : "";
    if (handle != null)
      return handle + suffixText; 
    return "!<" + suffixText + ">";
  }
  
  private ScalarAnalysis analyzeScalar(String scalar) {
    if (scalar.length() == 0)
      return new ScalarAnalysis(scalar, true, false, false, true, true, false); 
    boolean blockIndicators = false;
    boolean flowIndicators = false;
    boolean lineBreaks = false;
    boolean specialCharacters = false;
    boolean leadingSpace = false;
    boolean leadingBreak = false;
    boolean trailingSpace = false;
    boolean trailingBreak = false;
    boolean breakSpace = false;
    boolean spaceBreak = false;
    if (scalar.startsWith("---") || scalar.startsWith("...")) {
      blockIndicators = true;
      flowIndicators = true;
    } 
    boolean preceededByWhitespace = true;
    boolean followedByWhitespace = (scalar.length() == 1 || CharConstants.NULL_BL_T_LINEBR.has(scalar.codePointAt(1)));
    boolean previousSpace = false;
    boolean previousBreak = false;
    int index = 0;
    while (index < scalar.length()) {
      int c = scalar.codePointAt(index);
      if (index == 0) {
        if ("#,[]{}&*!|>'\"%@`".indexOf(c) != -1) {
          flowIndicators = true;
          blockIndicators = true;
        } 
        if (c == 63 || c == 58) {
          flowIndicators = true;
          if (followedByWhitespace)
            blockIndicators = true; 
        } 
        if (c == 45 && followedByWhitespace) {
          flowIndicators = true;
          blockIndicators = true;
        } 
      } else {
        if (",?[]{}".indexOf(c) != -1)
          flowIndicators = true; 
        if (c == 58) {
          flowIndicators = true;
          if (followedByWhitespace)
            blockIndicators = true; 
        } 
        if (c == 35 && preceededByWhitespace) {
          flowIndicators = true;
          blockIndicators = true;
        } 
      } 
      boolean isLineBreak = CharConstants.LINEBR.has(c);
      if (isLineBreak)
        lineBreaks = true; 
      if (c != 10 && (32 > c || c > 126))
        if (c == 133 || (c >= 160 && c <= 55295) || (c >= 57344 && c <= 65533) || (c >= 65536 && c <= 1114111)) {
          if (!this.allowUnicode)
            specialCharacters = true; 
        } else {
          specialCharacters = true;
        }  
      if (c == 32) {
        if (index == 0)
          leadingSpace = true; 
        if (index == scalar.length() - 1)
          trailingSpace = true; 
        if (previousBreak)
          breakSpace = true; 
        previousSpace = true;
        previousBreak = false;
      } else if (isLineBreak) {
        if (index == 0)
          leadingBreak = true; 
        if (index == scalar.length() - 1)
          trailingBreak = true; 
        if (previousSpace)
          spaceBreak = true; 
        previousSpace = false;
        previousBreak = true;
      } else {
        previousSpace = false;
        previousBreak = false;
      } 
      index += Character.charCount(c);
      preceededByWhitespace = (CharConstants.NULL_BL_T.has(c) || isLineBreak);
      followedByWhitespace = true;
      if (index + 1 < scalar.length()) {
        int nextIndex = index + Character.charCount(scalar.codePointAt(index));
        if (nextIndex < scalar.length())
          followedByWhitespace = (CharConstants.NULL_BL_T.has(scalar.codePointAt(nextIndex)) || isLineBreak); 
      } 
    } 
    boolean allowFlowPlain = true;
    boolean allowBlockPlain = true;
    boolean allowSingleQuoted = true;
    boolean allowBlock = true;
    if (leadingSpace || leadingBreak || trailingSpace || trailingBreak)
      allowFlowPlain = allowBlockPlain = false; 
    if (trailingSpace)
      allowBlock = false; 
    if (breakSpace)
      allowFlowPlain = allowBlockPlain = allowSingleQuoted = false; 
    if (spaceBreak || specialCharacters)
      allowFlowPlain = allowBlockPlain = allowSingleQuoted = allowBlock = false; 
    if (lineBreaks)
      allowFlowPlain = false; 
    if (flowIndicators)
      allowFlowPlain = false; 
    if (blockIndicators)
      allowBlockPlain = false; 
    return new ScalarAnalysis(scalar, false, lineBreaks, allowFlowPlain, allowBlockPlain, allowSingleQuoted, allowBlock);
  }
  
  void flushStream() { this.stream.flush(); }
  
  void writeStreamStart() {}
  
  void writeStreamEnd() { flushStream(); }
  
  void writeIndicator(String indicator, boolean needWhitespace, boolean whitespace, boolean indentation) {
    if (!this.whitespace && needWhitespace) {
      this.column++;
      this.stream.write(" ");
    } 
    this.whitespace = whitespace;
    this.indention = (this.indention && indentation);
    this.column += indicator.length();
    this.openEnded = false;
    this.stream.write(indicator);
  }
  
  void writeIndent() {
    int indentToWrite;
    if (this.indent != null) {
      indentToWrite = this.indent.intValue();
    } else {
      indentToWrite = 0;
    } 
    if (!this.indention || this.column > indentToWrite || (this.column == indentToWrite && !this.whitespace))
      writeLineBreak(null); 
    writeWhitespace(indentToWrite - this.column);
  }
  
  private void writeWhitespace(int length) {
    if (length <= 0)
      return; 
    this.whitespace = true;
    for (int i = 0; i < length; i++)
      this.stream.write(" "); 
    this.column += length;
  }
  
  private void writeLineBreak(String data) {
    this.whitespace = true;
    this.indention = true;
    this.column = 0;
    if (data == null) {
      this.stream.write(this.bestLineBreak);
    } else {
      this.stream.write(data);
    } 
  }
  
  void writeVersionDirective(String versionText) {
    this.stream.write("%YAML ");
    this.stream.write(versionText);
    writeLineBreak(null);
  }
  
  void writeTagDirective(String handleText, String prefixText) {
    this.stream.write("%TAG ");
    this.stream.write(handleText);
    this.stream.write(" ");
    this.stream.write(prefixText);
    writeLineBreak(null);
  }
  
  private void writeSingleQuoted(String text, boolean split) {
    writeIndicator("'", true, false, false);
    boolean spaces = false;
    boolean breaks = false;
    int start = 0;
    int end = 0;
    while (end <= text.length()) {
      char ch = Character.MIN_VALUE;
      if (end < text.length())
        ch = text.charAt(end); 
      if (spaces) {
        if (ch == '\000' || ch != ' ') {
          if (start + 1 == end && this.column > this.bestWidth && split && start != 0 && end != text
            .length()) {
            writeIndent();
          } else {
            int len = end - start;
            this.column += len;
            this.stream.write(text, start, len);
          } 
          start = end;
        } 
      } else if (breaks) {
        if (ch == '\000' || CharConstants.LINEBR.hasNo(ch)) {
          if (text.charAt(start) == '\n')
            writeLineBreak(null); 
          String data = text.substring(start, end);
          for (char br : data.toCharArray()) {
            if (br == '\n') {
              writeLineBreak(null);
            } else {
              writeLineBreak(String.valueOf(br));
            } 
          } 
          writeIndent();
          start = end;
        } 
      } else if (CharConstants.LINEBR.has(ch, "\000 '") && 
        start < end) {
        int len = end - start;
        this.column += len;
        this.stream.write(text, start, len);
        start = end;
      } 
      if (ch == '\'') {
        this.column += 2;
        this.stream.write("''");
        start = end + 1;
      } 
      if (ch != '\000') {
        spaces = (ch == ' ');
        breaks = CharConstants.LINEBR.has(ch);
      } 
      end++;
    } 
    writeIndicator("'", false, false, false);
  }
  
  private void writeDoubleQuoted(String text, boolean split) {
    writeIndicator("\"", true, false, false);
    int start = 0;
    int end = 0;
    while (end <= text.length()) {
      Character ch = null;
      if (end < text.length())
        ch = Character.valueOf(text.charAt(end)); 
      if (ch == null || "\"\\  ﻿".indexOf(ch.charValue()) != -1 || ' ' > ch
        .charValue() || ch.charValue() > '~') {
        if (start < end) {
          int len = end - start;
          this.column += len;
          this.stream.write(text, start, len);
          start = end;
        } 
        if (ch != null) {
          String data;
          if (ESCAPE_REPLACEMENTS.containsKey(ch)) {
            data = "\\" + (String)ESCAPE_REPLACEMENTS.get(ch);
          } else if (!this.allowUnicode || !StreamReader.isPrintable(ch.charValue())) {
            if (ch.charValue() <= 'ÿ') {
              String s = "0" + Integer.toString(ch.charValue(), 16);
              data = "\\x" + s.substring(s.length() - 2);
            } else if (ch.charValue() >= '?' && ch.charValue() <= '?') {
              if (end + 1 < text.length()) {
                Character ch2 = Character.valueOf(text.charAt(++end));
                String s = "000" + Long.toHexString(Character.toCodePoint(ch.charValue(), ch2.charValue()));
                data = "\\U" + s.substring(s.length() - 8);
              } else {
                String s = "000" + Integer.toString(ch.charValue(), 16);
                data = "\\u" + s.substring(s.length() - 4);
              } 
            } else {
              String s = "000" + Integer.toString(ch.charValue(), 16);
              data = "\\u" + s.substring(s.length() - 4);
            } 
          } else {
            data = String.valueOf(ch);
          } 
          this.column += data.length();
          this.stream.write(data);
          start = end + 1;
        } 
      } 
      if (0 < end && end < text.length() - 1 && (ch.charValue() == ' ' || start >= end) && this.column + end - start > this.bestWidth && split) {
        String data;
        if (start >= end) {
          data = "\\";
        } else {
          data = text.substring(start, end) + "\\";
        } 
        if (start < end)
          start = end; 
        this.column += data.length();
        this.stream.write(data);
        writeIndent();
        this.whitespace = false;
        this.indention = false;
        if (text.charAt(start) == ' ') {
          data = "\\";
          this.column += data.length();
          this.stream.write(data);
        } 
      } 
      end++;
    } 
    writeIndicator("\"", false, false, false);
  }
  
  private String determineBlockHints(String text) {
    StringBuilder hints = new StringBuilder();
    if (CharConstants.LINEBR.has(text.charAt(0), " "))
      hints.append(this.bestIndent); 
    char ch1 = text.charAt(text.length() - 1);
    if (CharConstants.LINEBR.hasNo(ch1)) {
      hints.append("-");
    } else if (text.length() == 1 || CharConstants.LINEBR.has(text.charAt(text.length() - 2))) {
      hints.append("+");
    } 
    return hints.toString();
  }
  
  void writeFolded(String text, boolean split) {
    String hints = determineBlockHints(text);
    writeIndicator(">" + hints, true, false, false);
    if (hints.length() > 0 && hints.charAt(hints.length() - 1) == '+')
      this.openEnded = true; 
    writeLineBreak(null);
    boolean leadingSpace = true;
    boolean spaces = false;
    boolean breaks = true;
    int start = 0;
    int end = 0;
    while (end <= text.length()) {
      char ch = Character.MIN_VALUE;
      if (end < text.length())
        ch = text.charAt(end); 
      if (breaks) {
        if (ch == '\000' || CharConstants.LINEBR.hasNo(ch)) {
          if (!leadingSpace && ch != '\000' && ch != ' ' && text.charAt(start) == '\n')
            writeLineBreak(null); 
          leadingSpace = (ch == ' ');
          String data = text.substring(start, end);
          for (char br : data.toCharArray()) {
            if (br == '\n') {
              writeLineBreak(null);
            } else {
              writeLineBreak(String.valueOf(br));
            } 
          } 
          if (ch != '\000')
            writeIndent(); 
          start = end;
        } 
      } else if (spaces) {
        if (ch != ' ') {
          if (start + 1 == end && this.column > this.bestWidth && split) {
            writeIndent();
          } else {
            int len = end - start;
            this.column += len;
            this.stream.write(text, start, len);
          } 
          start = end;
        } 
      } else if (CharConstants.LINEBR.has(ch, "\000 ")) {
        int len = end - start;
        this.column += len;
        this.stream.write(text, start, len);
        if (ch == '\000')
          writeLineBreak(null); 
        start = end;
      } 
      if (ch != '\000') {
        breaks = CharConstants.LINEBR.has(ch);
        spaces = (ch == ' ');
      } 
      end++;
    } 
  }
  
  void writeLiteral(String text) {
    String hints = determineBlockHints(text);
    writeIndicator("|" + hints, true, false, false);
    if (hints.length() > 0 && hints.charAt(hints.length() - 1) == '+')
      this.openEnded = true; 
    writeLineBreak(null);
    boolean breaks = true;
    int start = 0;
    int end = 0;
    while (end <= text.length()) {
      char ch = Character.MIN_VALUE;
      if (end < text.length())
        ch = text.charAt(end); 
      if (breaks) {
        if (ch == '\000' || CharConstants.LINEBR.hasNo(ch)) {
          String data = text.substring(start, end);
          for (char br : data.toCharArray()) {
            if (br == '\n') {
              writeLineBreak(null);
            } else {
              writeLineBreak(String.valueOf(br));
            } 
          } 
          if (ch != '\000')
            writeIndent(); 
          start = end;
        } 
      } else if (ch == '\000' || CharConstants.LINEBR.has(ch)) {
        this.stream.write(text, start, end - start);
        if (ch == '\000')
          writeLineBreak(null); 
        start = end;
      } 
      if (ch != '\000')
        breaks = CharConstants.LINEBR.has(ch); 
      end++;
    } 
  }
  
  void writePlain(String text, boolean split) {
    if (this.rootContext)
      this.openEnded = true; 
    if (text.length() == 0)
      return; 
    if (!this.whitespace) {
      this.column++;
      this.stream.write(" ");
    } 
    this.whitespace = false;
    this.indention = false;
    boolean spaces = false;
    boolean breaks = false;
    int start = 0;
    int end = 0;
    while (end <= text.length()) {
      char ch = Character.MIN_VALUE;
      if (end < text.length())
        ch = text.charAt(end); 
      if (spaces) {
        if (ch != ' ') {
          if (start + 1 == end && this.column > this.bestWidth && split) {
            writeIndent();
            this.whitespace = false;
            this.indention = false;
          } else {
            int len = end - start;
            this.column += len;
            this.stream.write(text, start, len);
          } 
          start = end;
        } 
      } else if (breaks) {
        if (CharConstants.LINEBR.hasNo(ch)) {
          if (text.charAt(start) == '\n')
            writeLineBreak(null); 
          String data = text.substring(start, end);
          for (char br : data.toCharArray()) {
            if (br == '\n') {
              writeLineBreak(null);
            } else {
              writeLineBreak(String.valueOf(br));
            } 
          } 
          writeIndent();
          this.whitespace = false;
          this.indention = false;
          start = end;
        } 
      } else if (CharConstants.LINEBR.has(ch, "\000 ")) {
        int len = end - start;
        this.column += len;
        this.stream.write(text, start, len);
        start = end;
      } 
      if (ch != '\000') {
        spaces = (ch == ' ');
        breaks = CharConstants.LINEBR.has(ch);
      } 
      end++;
    } 
  }
}
