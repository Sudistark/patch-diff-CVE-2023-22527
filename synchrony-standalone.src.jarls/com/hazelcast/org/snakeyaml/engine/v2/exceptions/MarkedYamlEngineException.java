package com.hazelcast.org.snakeyaml.engine.v2.exceptions;

import java.util.Objects;
import java.util.Optional;

public class MarkedYamlEngineException extends YamlEngineException {
  private final String context;
  
  private final Optional<Mark> contextMark;
  
  private final String problem;
  
  private final Optional<Mark> problemMark;
  
  protected MarkedYamlEngineException(String context, Optional<Mark> contextMark, String problem, Optional<Mark> problemMark, Throwable cause) {
    super(context + "; " + problem + "; " + problemMark, cause);
    Objects.requireNonNull(contextMark, "contextMark must be provided");
    Objects.requireNonNull(problemMark, "problemMark must be provided");
    this.context = context;
    this.contextMark = contextMark;
    this.problem = problem;
    this.problemMark = problemMark;
  }
  
  protected MarkedYamlEngineException(String context, Optional<Mark> contextMark, String problem, Optional<Mark> problemMark) { this(context, contextMark, problem, problemMark, null); }
  
  public String getMessage() { return toString(); }
  
  public String toString() {
    StringBuilder lines = new StringBuilder();
    if (this.context != null) {
      lines.append(this.context);
      lines.append("\n");
    } 
    if (this.contextMark.isPresent() && (this.problem == null || 
      !this.problemMark.isPresent() || ((Mark)this.contextMark
      .get()).getName().equals(((Mark)this.problemMark.get()).getName()) || ((Mark)this.contextMark
      .get()).getLine() != ((Mark)this.problemMark.get()).getLine() || ((Mark)this.contextMark.get())
      .getColumn() != ((Mark)this.problemMark.get()).getColumn())) {
      lines.append(((Mark)this.contextMark.get()).toString());
      lines.append("\n");
    } 
    if (this.problem != null) {
      lines.append(this.problem);
      lines.append("\n");
    } 
    if (this.problemMark.isPresent()) {
      lines.append(((Mark)this.problemMark.get()).toString());
      lines.append("\n");
    } 
    return lines.toString();
  }
  
  public String getContext() { return this.context; }
  
  public Optional<Mark> getContextMark() { return this.contextMark; }
  
  public String getProblem() { return this.problem; }
  
  public Optional<Mark> getProblemMark() { return this.problemMark; }
}
