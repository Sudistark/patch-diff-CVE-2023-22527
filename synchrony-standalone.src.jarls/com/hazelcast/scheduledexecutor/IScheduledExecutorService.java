package com.hazelcast.scheduledexecutor;

import com.hazelcast.core.DistributedObject;
import com.hazelcast.core.Member;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.concurrent.TimeUnit;

public interface IScheduledExecutorService extends DistributedObject {
  IScheduledFuture<?> schedule(Runnable paramRunnable, long paramLong, TimeUnit paramTimeUnit);
  
  <V> IScheduledFuture<V> schedule(Callable<V> paramCallable, long paramLong, TimeUnit paramTimeUnit);
  
  IScheduledFuture<?> scheduleAtFixedRate(Runnable paramRunnable, long paramLong1, long paramLong2, TimeUnit paramTimeUnit);
  
  IScheduledFuture<?> scheduleOnMember(Runnable paramRunnable, Member paramMember, long paramLong, TimeUnit paramTimeUnit);
  
  <V> IScheduledFuture<V> scheduleOnMember(Callable<V> paramCallable, Member paramMember, long paramLong, TimeUnit paramTimeUnit);
  
  IScheduledFuture<?> scheduleOnMemberAtFixedRate(Runnable paramRunnable, Member paramMember, long paramLong1, long paramLong2, TimeUnit paramTimeUnit);
  
  IScheduledFuture<?> scheduleOnKeyOwner(Runnable paramRunnable, Object paramObject, long paramLong, TimeUnit paramTimeUnit);
  
  <V> IScheduledFuture<V> scheduleOnKeyOwner(Callable<V> paramCallable, Object paramObject, long paramLong, TimeUnit paramTimeUnit);
  
  IScheduledFuture<?> scheduleOnKeyOwnerAtFixedRate(Runnable paramRunnable, Object paramObject, long paramLong1, long paramLong2, TimeUnit paramTimeUnit);
  
  Map<Member, IScheduledFuture<?>> scheduleOnAllMembers(Runnable paramRunnable, long paramLong, TimeUnit paramTimeUnit);
  
  <V> Map<Member, IScheduledFuture<V>> scheduleOnAllMembers(Callable<V> paramCallable, long paramLong, TimeUnit paramTimeUnit);
  
  Map<Member, IScheduledFuture<?>> scheduleOnAllMembersAtFixedRate(Runnable paramRunnable, long paramLong1, long paramLong2, TimeUnit paramTimeUnit);
  
  Map<Member, IScheduledFuture<?>> scheduleOnMembers(Runnable paramRunnable, Collection<Member> paramCollection, long paramLong, TimeUnit paramTimeUnit);
  
  <V> Map<Member, IScheduledFuture<V>> scheduleOnMembers(Callable<V> paramCallable, Collection<Member> paramCollection, long paramLong, TimeUnit paramTimeUnit);
  
  Map<Member, IScheduledFuture<?>> scheduleOnMembersAtFixedRate(Runnable paramRunnable, Collection<Member> paramCollection, long paramLong1, long paramLong2, TimeUnit paramTimeUnit);
  
  <V> IScheduledFuture<V> getScheduledFuture(ScheduledTaskHandler paramScheduledTaskHandler);
  
  <V> Map<Member, List<IScheduledFuture<V>>> getAllScheduledFutures();
  
  void shutdown();
}
