package com.hazelcast.scheduledexecutor.impl.operations;

import com.hazelcast.core.HazelcastException;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.scheduledexecutor.ScheduledTaskHandler;
import com.hazelcast.scheduledexecutor.impl.ScheduledExecutorWaitNotifyKey;
import com.hazelcast.spi.BlockingOperation;
import com.hazelcast.spi.ReadonlyOperation;
import com.hazelcast.spi.WaitNotifyKey;
import java.io.IOException;

public class GetResultOperation<V> extends AbstractSchedulerOperation implements BlockingOperation, ReadonlyOperation {
  private String taskName;
  
  private ScheduledTaskHandler handler;
  
  private Object result;
  
  public GetResultOperation() {}
  
  public GetResultOperation(ScheduledTaskHandler handler) {
    super(handler.getSchedulerName());
    this.taskName = handler.getTaskName();
    this.handler = handler;
  }
  
  public void run() { this.result = getContainer().get(this.taskName); }
  
  public Object getResponse() { return this.result; }
  
  public WaitNotifyKey getWaitKey() { return new ScheduledExecutorWaitNotifyKey(getSchedulerName(), this.handler.toUrn()); }
  
  public boolean shouldWait() { return getContainer().shouldParkGetResult(this.taskName); }
  
  public void onWaitExpire() { sendResponse(new HazelcastException()); }
  
  public int getId() { return 10; }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeUTF(this.taskName);
    out.writeUTF(this.handler.toUrn());
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    this.taskName = in.readUTF();
    this.handler = ScheduledTaskHandler.of(in.readUTF());
  }
}
