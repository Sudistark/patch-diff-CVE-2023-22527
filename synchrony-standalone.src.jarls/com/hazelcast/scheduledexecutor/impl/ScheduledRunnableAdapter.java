package com.hazelcast.scheduledexecutor.impl;

import com.hazelcast.core.ManagedContext;
import com.hazelcast.core.PartitionAware;
import com.hazelcast.instance.Node;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import com.hazelcast.scheduledexecutor.NamedTask;
import com.hazelcast.scheduledexecutor.StatefulTask;
import com.hazelcast.spi.NodeAware;
import java.io.IOException;
import java.util.Map;
import java.util.concurrent.Callable;

public class ScheduledRunnableAdapter<V> extends Object implements IdentifiedDataSerializable, Callable<V>, NodeAware, PartitionAware, NamedTask, StatefulTask {
  private Runnable task;
  
  public ScheduledRunnableAdapter() {}
  
  public ScheduledRunnableAdapter(Runnable task) { this.task = task; }
  
  public Runnable getRunnable() { return this.task; }
  
  public void setRunnable(Runnable runnable) { this.task = runnable; }
  
  public V call() throws Exception {
    this.task.run();
    return null;
  }
  
  public Object getPartitionKey() {
    if (this.task instanceof PartitionAware)
      return ((PartitionAware)this.task).getPartitionKey(); 
    return null;
  }
  
  public void setNode(Node node) {
    ManagedContext managedContext = node.getSerializationService().getManagedContext();
    managedContext.initialize(this.task);
  }
  
  public String getName() {
    if (this.task instanceof NamedTask)
      return ((NamedTask)this.task).getName(); 
    return null;
  }
  
  public void save(Map snapshot) {
    if (this.task instanceof StatefulTask)
      ((StatefulTask)this.task).save(snapshot); 
  }
  
  public void load(Map snapshot) {
    if (this.task instanceof StatefulTask)
      ((StatefulTask)this.task).load(snapshot); 
  }
  
  public void writeData(ObjectDataOutput out) throws IOException { out.writeObject(this.task); }
  
  public void readData(ObjectDataInput in) throws IOException { this.task = (Runnable)in.readObject(); }
  
  public int getFactoryId() { return ScheduledExecutorDataSerializerHook.F_ID; }
  
  public int getId() { return 4; }
  
  public String toString() { return "ScheduledRunnableAdapter{task=" + this.task + '}'; }
}
