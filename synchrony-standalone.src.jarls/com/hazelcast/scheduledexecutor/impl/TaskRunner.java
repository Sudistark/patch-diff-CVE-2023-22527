package com.hazelcast.scheduledexecutor.impl;

import com.hazelcast.scheduledexecutor.StatefulTask;
import com.hazelcast.scheduledexecutor.impl.operations.ResultReadyNotifyOperation;
import com.hazelcast.util.ExceptionUtil;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.logging.Level;

class TaskRunner<V> extends Object implements Callable<V>, Runnable {
  private final ScheduledExecutorContainer container;
  
  private final String taskName;
  
  private final Callable<V> original;
  
  private final ScheduledTaskDescriptor descriptor;
  
  private final ScheduledTaskStatisticsImpl statistics;
  
  private boolean initted;
  
  private ScheduledTaskResult resolution;
  
  TaskRunner(ScheduledExecutorContainer container, ScheduledTaskDescriptor descriptor) {
    this.container = container;
    this.descriptor = descriptor;
    this.original = descriptor.getDefinition().getCommand();
    this.taskName = descriptor.getDefinition().getName();
    this.statistics = descriptor.getStatsSnapshot();
    this.statistics.onInit();
  }
  
  public V call() throws Exception {
    beforeRun();
    try {
      V result = (V)this.original.call();
      if (TaskDefinition.Type.SINGLE_RUN.equals(this.descriptor.getDefinition().getType()))
        this.resolution = new ScheduledTaskResult(result); 
      return result;
    } catch (Throwable t) {
      this.container.log(Level.WARNING, this.taskName, "Exception occurred during run", t);
      this.resolution = new ScheduledTaskResult(t);
      throw ExceptionUtil.rethrow(t);
    } finally {
      afterRun();
    } 
  }
  
  public void run() {
    try {
      call();
    } catch (Exception e) {
      throw ExceptionUtil.rethrow(e);
    } 
  }
  
  private void initOnce() {
    if (this.initted)
      return; 
    Map snapshot = this.descriptor.getState();
    if (this.original instanceof StatefulTask && !snapshot.isEmpty())
      ((StatefulTask)this.original).load(snapshot); 
    this.initted = true;
  }
  
  private void beforeRun() {
    this.container.log(Level.FINEST, this.taskName, "Entering running mode");
    try {
      initOnce();
      this.statistics.onBeforeRun();
    } catch (Exception ex) {
      this.container.log(Level.WARNING, this.taskName, "Unexpected exception during beforeRun occurred", ex);
    } 
  }
  
  private void afterRun() {
    try {
      this.statistics.onAfterRun();
      Map state = new HashMap();
      if (this.original instanceof StatefulTask)
        ((StatefulTask)this.original).save(state); 
      this.container.publishTaskState(this.taskName, state, this.statistics.snapshot(), this.resolution);
    } catch (Exception ex) {
      this.container.log(Level.WARNING, this.taskName, "Unexpected exception during afterRun occurred", ex);
    } finally {
      notifyResultReady();
    } 
    this.container.log(Level.FINEST, this.taskName, "Exiting running mode");
  }
  
  private void notifyResultReady() {
    ResultReadyNotifyOperation resultReadyNotifyOperation = new ResultReadyNotifyOperation(this.container.offprintHandler(this.taskName));
    this.container.createInvocationBuilder(resultReadyNotifyOperation).setCallTimeout(Float.MAX_VALUE).invoke();
  }
}
