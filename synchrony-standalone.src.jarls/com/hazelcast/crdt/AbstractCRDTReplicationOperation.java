package com.hazelcast.crdt;

import com.hazelcast.internal.partition.MigrationCycleOperation;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import com.hazelcast.spi.Operation;
import com.hazelcast.util.MapUtil;
import java.io.IOException;
import java.util.Map;

public abstract class AbstractCRDTReplicationOperation<T extends IdentifiedDataSerializable> extends Operation implements IdentifiedDataSerializable, MigrationCycleOperation {
  private Map<String, T> replicationData;
  
  protected AbstractCRDTReplicationOperation() {}
  
  public AbstractCRDTReplicationOperation(Map<String, T> replicationData) { this.replicationData = replicationData; }
  
  public void run() {
    CRDTReplicationAwareService<T> service = (CRDTReplicationAwareService)getService();
    for (Map.Entry<String, T> entry : this.replicationData.entrySet())
      service.merge((String)entry.getKey(), entry.getValue()); 
  }
  
  public void afterRun() {
    super.afterRun();
    CRDTReplicationMigrationService replicationMigrationService = (CRDTReplicationMigrationService)getNodeEngine().getService("hz:impl:CRDTReplicationMigrationService");
    replicationMigrationService.scheduleMigrationTask(0L);
  }
  
  public int getFactoryId() { return CRDTDataSerializerHook.F_ID; }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    out.writeInt(this.replicationData.size());
    for (Map.Entry<String, T> entry : this.replicationData.entrySet()) {
      out.writeUTF((String)entry.getKey());
      out.writeObject(entry.getValue());
    } 
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    int mapSize = in.readInt();
    this.replicationData = MapUtil.createHashMap(mapSize);
    for (int i = 0; i < mapSize; i++) {
      String name = in.readUTF();
      T crdt = (T)(IdentifiedDataSerializable)in.readObject();
      this.replicationData.put(name, crdt);
    } 
  }
}
