package com.hazelcast.crdt;

import com.hazelcast.cluster.impl.VectorClock;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

class ReplicatedVectorClocks {
  private ConcurrentMap<ReplicatedVectorClockId, Map<String, VectorClock>> replicatedVectorClocks = new ConcurrentHashMap();
  
  public Map<String, VectorClock> getReplicatedVectorClock(String serviceName, String memberUUID) {
    ReplicatedVectorClockId id = new ReplicatedVectorClockId(serviceName, memberUUID);
    Map<String, VectorClock> clocks = (Map)this.replicatedVectorClocks.get(id);
    return (clocks != null) ? clocks : Collections.emptyMap();
  }
  
  public void setReplicatedVectorClocks(String serviceName, String memberUUID, Map<String, VectorClock> vectorClocks) { this.replicatedVectorClocks.put(new ReplicatedVectorClockId(serviceName, memberUUID), 
        Collections.unmodifiableMap(vectorClocks)); }
  
  public Map<String, VectorClock> getLatestReplicatedVectorClock(String serviceName) {
    HashMap<String, VectorClock> latestVectorClocks = new HashMap<String, VectorClock>();
    for (Map.Entry<ReplicatedVectorClockId, Map<String, VectorClock>> clockEntry : this.replicatedVectorClocks.entrySet()) {
      ReplicatedVectorClockId id = (ReplicatedVectorClockId)clockEntry.getKey();
      Map<String, VectorClock> clock = (Map)clockEntry.getValue();
      if (id.serviceName.equals(serviceName))
        for (Map.Entry<String, VectorClock> crdtReplicatedClocks : clock.entrySet()) {
          String crdtName = (String)crdtReplicatedClocks.getKey();
          VectorClock vectorClock = (VectorClock)crdtReplicatedClocks.getValue();
          VectorClock latestVectorClock = (VectorClock)latestVectorClocks.get(crdtName);
          if (latestVectorClock == null || vectorClock.isAfter(latestVectorClock))
            latestVectorClocks.put(crdtName, vectorClock); 
        }  
    } 
    return latestVectorClocks;
  }
}
