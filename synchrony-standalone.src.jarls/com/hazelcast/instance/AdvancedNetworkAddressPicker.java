package com.hazelcast.instance;

import com.hazelcast.config.AdvancedNetworkConfig;
import com.hazelcast.config.Config;
import com.hazelcast.config.EndpointConfig;
import com.hazelcast.config.InterfacesConfig;
import com.hazelcast.config.ServerSocketEndpointConfig;
import com.hazelcast.config.TcpIpConfig;
import com.hazelcast.logging.ILogger;
import com.hazelcast.nio.Address;
import java.nio.channels.ServerSocketChannel;
import java.util.HashMap;
import java.util.Map;

class AdvancedNetworkAddressPicker implements AddressPicker {
  private final AdvancedNetworkConfig advancedNetworkConfig;
  
  private final Map<EndpointQualifier, AddressPicker> pickers;
  
  AdvancedNetworkAddressPicker(Config config, ILogger logger) {
    this.pickers = new HashMap();
    this.advancedNetworkConfig = config.getAdvancedNetworkConfig();
    for (EndpointConfig endpointConfig : this.advancedNetworkConfig.getEndpointConfigs().values()) {
      if (endpointConfig instanceof ServerSocketEndpointConfig) {
        ServerSocketEndpointConfig serverSocketEndpointConfig = (ServerSocketEndpointConfig)endpointConfig;
        EndpointQualifier endpointQualifier = serverSocketEndpointConfig.getQualifier();
        TcpIpConfig tcpIpConfig = this.advancedNetworkConfig.getJoin().getTcpIpConfig();
        InterfacesConfig interfacesConfig = serverSocketEndpointConfig.getInterfaces();
        String publicAddressConfig = serverSocketEndpointConfig.getPublicAddress();
        boolean isReuseAddress = serverSocketEndpointConfig.isReuseAddress();
        boolean isPortAutoIncrement = serverSocketEndpointConfig.isPortAutoIncrement();
        int port = serverSocketEndpointConfig.getPort();
        int portCount = serverSocketEndpointConfig.getPortCount();
        DefaultAddressPicker defaultAddressPicker = new DefaultAddressPicker(config, endpointQualifier, interfacesConfig, tcpIpConfig, isReuseAddress, isPortAutoIncrement, port, portCount, publicAddressConfig, logger);
        this.pickers.put(endpointConfig.getQualifier(), defaultAddressPicker);
      } 
    } 
  }
  
  public void pickAddress() throws Exception {
    for (AddressPicker picker : this.pickers.values())
      picker.pickAddress(); 
  }
  
  public Address getBindAddress() { throw new UnsupportedOperationException(); }
  
  public Address getBindAddress(EndpointQualifier qualifier) { return ((AddressPicker)this.pickers.get(qualifier)).getBindAddress(qualifier); }
  
  public Address getPublicAddress() { throw new UnsupportedOperationException(); }
  
  public Address getPublicAddress(EndpointQualifier qualifier) { return ((AddressPicker)this.pickers.get(qualifier)).getPublicAddress(qualifier); }
  
  public Map<EndpointQualifier, Address> getPublicAddressMap() {
    Map<EndpointQualifier, Address> pubAddressMap = new HashMap<EndpointQualifier, Address>(this.pickers.size());
    for (Map.Entry<EndpointQualifier, AddressPicker> entry : this.pickers.entrySet())
      pubAddressMap.put(entry.getKey(), ((AddressPicker)entry.getValue()).getPublicAddress((EndpointQualifier)entry.getKey())); 
    return pubAddressMap;
  }
  
  public ServerSocketChannel getServerSocketChannel() { throw new UnsupportedOperationException(); }
  
  public ServerSocketChannel getServerSocketChannel(EndpointQualifier qualifier) { return ((AddressPicker)this.pickers.get(qualifier)).getServerSocketChannel(qualifier); }
  
  public Map<EndpointQualifier, ServerSocketChannel> getServerSocketChannels() {
    Map<EndpointQualifier, ServerSocketChannel> channels = new HashMap<EndpointQualifier, ServerSocketChannel>(this.pickers.size());
    for (Map.Entry<EndpointQualifier, AddressPicker> entry : this.pickers.entrySet())
      channels.put(entry.getKey(), ((AddressPicker)entry.getValue()).getServerSocketChannel((EndpointQualifier)entry.getKey())); 
    return channels;
  }
}
