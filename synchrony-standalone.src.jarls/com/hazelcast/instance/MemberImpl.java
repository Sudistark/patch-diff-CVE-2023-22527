package com.hazelcast.instance;

import com.hazelcast.cluster.MemberAttributeOperationType;
import com.hazelcast.core.HazelcastInstance;
import com.hazelcast.core.HazelcastInstanceAware;
import com.hazelcast.core.Member;
import com.hazelcast.logging.ILogger;
import com.hazelcast.nio.Address;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import com.hazelcast.spi.Operation;
import com.hazelcast.spi.annotation.PrivateApi;
import com.hazelcast.spi.impl.NodeEngineImpl;
import com.hazelcast.spi.impl.operationservice.InternalOperationService;
import com.hazelcast.util.ExceptionUtil;
import com.hazelcast.util.Preconditions;
import com.hazelcast.util.function.Supplier;
import com.hazelcast.version.MemberVersion;
import java.util.Collections;
import java.util.Map;

@PrivateApi
public final class MemberImpl extends AbstractMember implements Member, HazelcastInstanceAware, IdentifiedDataSerializable {
  public static final int NA_MEMBER_LIST_JOIN_VERSION = -1;
  
  private boolean localMember;
  
  public MemberImpl(Address address, MemberVersion version, boolean localMember) { this(Collections.singletonMap(EndpointQualifier.MEMBER, address), version, localMember, null, null, false, -1, null); }
  
  public MemberImpl(Address address, MemberVersion version, boolean localMember, String uuid) { this(Collections.singletonMap(EndpointQualifier.MEMBER, address), version, localMember, uuid, null, false, -1, null); }
  
  public MemberImpl(MemberImpl member) {
    super(member);
    this.localMember = member.localMember;
    this.memberListJoinVersion = member.memberListJoinVersion;
    this.instance = member.instance;
  }
  
  private MemberImpl(Map<EndpointQualifier, Address> addresses, MemberVersion version, boolean localMember, String uuid, Map<String, Object> attributes, boolean liteMember, int memberListJoinVersion, HazelcastInstanceImpl instance) {
    super(addresses, version, uuid, attributes, liteMember);
    this.memberListJoinVersion = memberListJoinVersion;
    this.localMember = localMember;
    this.instance = instance;
  }
  
  protected ILogger getLogger() { return this.logger; }
  
  public void setHazelcastInstance(HazelcastInstance hazelcastInstance) {
    if (hazelcastInstance instanceof HazelcastInstanceImpl) {
      this.instance = (HazelcastInstanceImpl)hazelcastInstance;
      this.localMember = this.instance.node.address.equals(this.address);
      this.logger = this.instance.node.getLogger(getClass().getName());
    } 
  }
  
  public boolean localMember() { return this.localMember; }
  
  public String getStringAttribute(String key) { return (String)getAttribute(key); }
  
  public void setStringAttribute(String key, String value) { setAttribute(key, value); }
  
  public Boolean getBooleanAttribute(String key) { return (Boolean)getAttribute(key); }
  
  public void setBooleanAttribute(String key, boolean value) { setAttribute(key, Boolean.valueOf(value)); }
  
  public Byte getByteAttribute(String key) { return (Byte)getAttribute(key); }
  
  public void setByteAttribute(String key, byte value) { setAttribute(key, Byte.valueOf(value)); }
  
  public Short getShortAttribute(String key) { return (Short)getAttribute(key); }
  
  public void setShortAttribute(String key, short value) { setAttribute(key, Short.valueOf(value)); }
  
  public Integer getIntAttribute(String key) { return (Integer)getAttribute(key); }
  
  public void setIntAttribute(String key, int value) { setAttribute(key, Integer.valueOf(value)); }
  
  public Long getLongAttribute(String key) { return (Long)getAttribute(key); }
  
  public void setLongAttribute(String key, long value) { setAttribute(key, Long.valueOf(value)); }
  
  public Float getFloatAttribute(String key) { return (Float)getAttribute(key); }
  
  public void setFloatAttribute(String key, float value) { setAttribute(key, Float.valueOf(value)); }
  
  public Double getDoubleAttribute(String key) { return (Double)getAttribute(key); }
  
  public void setDoubleAttribute(String key, double value) { setAttribute(key, Double.valueOf(value)); }
  
  public void removeAttribute(String key) {
    ensureLocalMember();
    Preconditions.isNotNull(key, "key");
    Object value = this.attributes.remove(key);
    if (value == null)
      return; 
    if (this.instance != null)
      invokeOnAllMembers(new MemberAttributeOperationSupplier(this, MemberAttributeOperationType.REMOVE, key, null)); 
  }
  
  public void setMemberListJoinVersion(int memberListJoinVersion) { this.memberListJoinVersion = memberListJoinVersion; }
  
  public int getMemberListJoinVersion() { return this.memberListJoinVersion; }
  
  private void ensureLocalMember() {
    if (!this.localMember)
      throw new UnsupportedOperationException("Attributes on remote members must not be changed"); 
  }
  
  private void setAttribute(String key, Object value) {
    ensureLocalMember();
    Preconditions.isNotNull(key, "key");
    Preconditions.isNotNull(value, "value");
    Object oldValue = this.attributes.put(key, value);
    if (value.equals(oldValue))
      return; 
    if (this.instance != null)
      invokeOnAllMembers(new MemberAttributeOperationSupplier(this, MemberAttributeOperationType.PUT, key, value)); 
  }
  
  private void invokeOnAllMembers(Supplier<Operation> operationSupplier) {
    NodeEngineImpl nodeEngine = this.instance.node.nodeEngine;
    InternalOperationService internalOperationService = nodeEngine.getOperationService();
    try {
      for (Member member : nodeEngine.getClusterService().getMembers()) {
        if (!member.localMember()) {
          internalOperationService.invokeOnTarget("hz:core:clusterService", (Operation)operationSupplier.get(), member.getAddress());
          continue;
        } 
        internalOperationService.execute((Operation)operationSupplier.get());
      } 
    } catch (Throwable t) {
      throw ExceptionUtil.rethrow(t);
    } 
  }
  
  public int getFactoryId() { return 0; }
  
  public int getId() { return 2; }
  
  public MemberImpl() {}
}
