package com.hazelcast.multimap.impl.txn;

import com.hazelcast.multimap.impl.MultiMapRecord;
import com.hazelcast.multimap.impl.MultiMapService;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.NodeEngine;
import com.hazelcast.transaction.TransactionException;
import com.hazelcast.transaction.impl.Transaction;
import java.util.ArrayList;
import java.util.Collection;

public class TransactionalMultiMapProxy<K, V> extends TransactionalMultiMapProxySupport<K, V> {
  public TransactionalMultiMapProxy(NodeEngine nodeEngine, MultiMapService service, String name, Transaction tx) { super(nodeEngine, service, name, tx); }
  
  public boolean put(K key, V value) throws TransactionException {
    checkTransactionActive();
    Data dataKey = getNodeEngine().toData(key);
    Data dataValue = getNodeEngine().toData(value);
    return putInternal(dataKey, dataValue);
  }
  
  public Collection<V> get(K key) {
    checkTransactionActive();
    Data dataKey = getNodeEngine().toData(key);
    Collection<MultiMapRecord> coll = getInternal(dataKey);
    Collection<V> collection = new ArrayList<V>(coll.size());
    for (MultiMapRecord record : coll)
      collection.add(toObjectIfNeeded(record.getObject())); 
    return collection;
  }
  
  public boolean remove(Object key, Object value) {
    checkTransactionActive();
    Data dataKey = getNodeEngine().toData(key);
    Data dataValue = getNodeEngine().toData(value);
    return removeInternal(dataKey, dataValue);
  }
  
  public Collection<V> remove(Object key) {
    checkTransactionActive();
    Data dataKey = getNodeEngine().toData(key);
    Collection<MultiMapRecord> coll = removeAllInternal(dataKey);
    Collection<V> result = new ArrayList<V>(coll.size());
    for (MultiMapRecord record : coll)
      result.add(toObjectIfNeeded(record.getObject())); 
    return result;
  }
  
  public int valueCount(K key) {
    checkTransactionActive();
    Data dataKey = getNodeEngine().toData(key);
    return valueCountInternal(dataKey);
  }
  
  public String toString() { return "TransactionalMultiMap{name=" + getName() + '}'; }
}
