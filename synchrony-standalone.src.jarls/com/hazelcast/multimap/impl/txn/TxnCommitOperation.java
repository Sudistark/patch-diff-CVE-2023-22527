package com.hazelcast.multimap.impl.txn;

import com.hazelcast.multimap.impl.operations.AbstractBackupAwareMultiMapOperation;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.BackupAwareOperation;
import com.hazelcast.spi.Notifier;
import com.hazelcast.spi.Operation;
import com.hazelcast.spi.WaitNotifyKey;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class TxnCommitOperation extends AbstractBackupAwareMultiMapOperation implements Notifier {
  private List<Operation> opList;
  
  private boolean notify = true;
  
  public TxnCommitOperation() {}
  
  public TxnCommitOperation(int partitionId, String name, Data dataKey, long threadId, List<Operation> opList) {
    super(name, dataKey, threadId);
    setPartitionId(partitionId);
    this.opList = opList;
  }
  
  public void run() {
    for (Operation op : this.opList) {
      op.setNodeEngine(getNodeEngine())
        .setServiceName(getServiceName())
        .setPartitionId(getPartitionId());
      op.beforeRun();
      op.run();
      op.afterRun();
    } 
    getOrCreateContainer().unlock(this.dataKey, getCallerUuid(), this.threadId, getCallId());
  }
  
  public boolean shouldBackup() { return this.notify; }
  
  public Operation getBackupOperation() {
    List<Operation> backupOpList = new ArrayList<Operation>();
    for (Operation operation : this.opList) {
      if (operation instanceof BackupAwareOperation) {
        BackupAwareOperation backupAwareOperation = (BackupAwareOperation)operation;
        if (backupAwareOperation.shouldBackup())
          backupOpList.add(backupAwareOperation.getBackupOperation()); 
      } 
    } 
    return new TxnCommitBackupOperation(this.name, this.dataKey, backupOpList, getCallerUuid(), this.threadId);
  }
  
  public boolean shouldNotify() { return this.notify; }
  
  public WaitNotifyKey getNotifiedKey() { return getWaitKey(); }
  
  public int getId() { return 28; }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeInt(this.opList.size());
    for (Operation op : this.opList)
      out.writeObject(op); 
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    int size = in.readInt();
    this.opList = new ArrayList(size);
    for (int i = 0; i < size; i++)
      this.opList.add((Operation)in.readObject()); 
  }
}
