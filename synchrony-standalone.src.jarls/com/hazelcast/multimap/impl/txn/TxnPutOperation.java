package com.hazelcast.multimap.impl.txn;

import com.hazelcast.core.EntryEventType;
import com.hazelcast.multimap.impl.MultiMapContainer;
import com.hazelcast.multimap.impl.MultiMapRecord;
import com.hazelcast.multimap.impl.MultiMapService;
import com.hazelcast.multimap.impl.MultiMapValue;
import com.hazelcast.multimap.impl.operations.AbstractKeyBasedMultiMapOperation;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.BackupAwareOperation;
import com.hazelcast.spi.Operation;
import com.hazelcast.spi.impl.MutatingOperation;
import java.io.IOException;
import java.util.Collection;

public class TxnPutOperation extends AbstractKeyBasedMultiMapOperation implements BackupAwareOperation, MutatingOperation {
  private long recordId;
  
  private Data value;
  
  private long startTimeNanos;
  
  public TxnPutOperation() {}
  
  public TxnPutOperation(String name, Data dataKey, Data value, long recordId) {
    super(name, dataKey);
    this.recordId = recordId;
    this.value = value;
  }
  
  public void run() {
    this.startTimeNanos = System.nanoTime();
    MultiMapContainer container = getOrCreateContainer();
    MultiMapValue multiMapValue = container.getOrCreateMultiMapValue(this.dataKey);
    if (multiMapValue.containsRecordId(this.recordId)) {
      this.response = Boolean.valueOf(false);
      return;
    } 
    this.response = Boolean.valueOf(true);
    container.update();
    Collection<MultiMapRecord> coll = multiMapValue.getCollection(false);
    MultiMapRecord record = new MultiMapRecord(this.recordId, isBinary() ? this.value : toObject(this.value));
    coll.add(record);
  }
  
  public void afterRun() {
    long elapsed = Math.max(0L, System.nanoTime() - this.startTimeNanos);
    MultiMapService service = (MultiMapService)getService();
    service.getLocalMultiMapStatsImpl(this.name).incrementPutLatencyNanos(elapsed);
    if (Boolean.TRUE.equals(this.response))
      publishEvent(EntryEventType.ADDED, this.dataKey, this.value, null); 
  }
  
  public long getRecordId() { return this.recordId; }
  
  public boolean shouldBackup() { return Boolean.TRUE.equals(this.response); }
  
  public Operation getBackupOperation() { return new TxnPutBackupOperation(this.name, this.dataKey, this.recordId, this.value); }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeLong(this.recordId);
    out.writeData(this.value);
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    this.recordId = in.readLong();
    this.value = in.readData();
  }
  
  public int getId() { return 33; }
}
