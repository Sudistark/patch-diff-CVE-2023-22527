package com.hazelcast.multimap.impl.txn;

import com.hazelcast.multimap.impl.MultiMapContainer;
import com.hazelcast.multimap.impl.operations.AbstractKeyBasedMultiMapOperation;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.nio.serialization.impl.Versioned;
import com.hazelcast.spi.BackupOperation;
import com.hazelcast.transaction.TransactionException;
import java.io.IOException;

public class TxnPrepareBackupOperation extends AbstractKeyBasedMultiMapOperation implements BackupOperation, Versioned {
  private String caller;
  
  public TxnPrepareBackupOperation() {}
  
  public TxnPrepareBackupOperation(String name, Data dataKey, long threadId, String caller) {
    super(name, dataKey, threadId);
    this.caller = caller;
  }
  
  public void run() {
    MultiMapContainer container = getOrCreateContainerWithoutAccess();
    if (!container.txnLock(this.dataKey, this.caller, this.threadId, getCallId(), TxnPrepareOperation.LOCK_EXTENSION_TIME_IN_MILLIS, true))
      throw new TransactionException("Lock is not owned by the transaction! -> " + container
          .getLockOwnerInfo(this.dataKey)); 
  }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeUTF(this.caller);
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    this.caller = in.readUTF();
  }
  
  public int getId() { return 31; }
}
