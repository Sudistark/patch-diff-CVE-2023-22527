package com.hazelcast.multimap.impl.txn;

import com.hazelcast.multimap.impl.MultiMapContainer;
import com.hazelcast.multimap.impl.operations.AbstractBackupAwareMultiMapOperation;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.nio.serialization.impl.Versioned;
import com.hazelcast.spi.Operation;
import com.hazelcast.transaction.TransactionException;
import java.util.concurrent.TimeUnit;

public class TxnPrepareOperation extends AbstractBackupAwareMultiMapOperation implements Versioned {
  static final long LOCK_EXTENSION_TIME_IN_MILLIS = TimeUnit.SECONDS.toMillis(10L);
  
  public TxnPrepareOperation() {}
  
  public TxnPrepareOperation(int partitionId, String name, Data dataKey, long threadId) {
    super(name, dataKey, threadId);
    setPartitionId(partitionId);
  }
  
  public void run() {
    MultiMapContainer container = getOrCreateContainer();
    if (!container.extendLock(this.dataKey, getCallerUuid(), this.threadId, LOCK_EXTENSION_TIME_IN_MILLIS))
      throw new TransactionException("Lock is not owned by the transaction! -> " + container
          .getLockOwnerInfo(this.dataKey)); 
    this.response = Boolean.valueOf(true);
  }
  
  public boolean shouldBackup() { return true; }
  
  public boolean shouldWait() { return false; }
  
  public Operation getBackupOperation() { return new TxnPrepareBackupOperation(this.name, this.dataKey, this.threadId, getCallerUuid()); }
  
  public int getId() { return 32; }
}
