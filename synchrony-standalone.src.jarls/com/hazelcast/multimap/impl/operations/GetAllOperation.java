package com.hazelcast.multimap.impl.operations;

import com.hazelcast.concurrent.lock.LockWaitNotifyKey;
import com.hazelcast.core.OperationTimeoutException;
import com.hazelcast.multimap.impl.MultiMapContainer;
import com.hazelcast.multimap.impl.MultiMapRecord;
import com.hazelcast.multimap.impl.MultiMapValue;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.BlockingOperation;
import com.hazelcast.spi.DistributedObjectNamespace;
import com.hazelcast.spi.ReadonlyOperation;
import com.hazelcast.spi.WaitNotifyKey;
import java.util.Collection;

public class GetAllOperation extends AbstractKeyBasedMultiMapOperation implements BlockingOperation, ReadonlyOperation {
  public GetAllOperation() {}
  
  public GetAllOperation(String name, Data dataKey) { super(name, dataKey); }
  
  public void run() {
    MultiMapContainer container = getOrCreateContainer();
    MultiMapValue multiMapValue = container.getMultiMapValueOrNull(this.dataKey);
    Collection<MultiMapRecord> coll = null;
    if (multiMapValue != null) {
      multiMapValue.incrementHit();
      coll = multiMapValue.getCollection(executedLocally());
    } 
    this.response = new MultiMapResponse(coll, getValueCollectionType(container));
  }
  
  public int getId() { return 11; }
  
  public WaitNotifyKey getWaitKey() { return new LockWaitNotifyKey(new DistributedObjectNamespace("hz:impl:multiMapService", this.name), this.dataKey); }
  
  public boolean shouldWait() {
    MultiMapContainer container = getOrCreateContainer();
    if (container.isTransactionallyLocked(this.dataKey))
      return !container.canAcquireLock(this.dataKey, getCallerUuid(), this.threadId); 
    return false;
  }
  
  public void onWaitExpire() { sendResponse(new OperationTimeoutException("Cannot read transactionally locked entry!")); }
}
