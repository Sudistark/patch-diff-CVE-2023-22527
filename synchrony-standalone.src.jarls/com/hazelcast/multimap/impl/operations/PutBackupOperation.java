package com.hazelcast.multimap.impl.operations;

import com.hazelcast.multimap.impl.MultiMapContainer;
import com.hazelcast.multimap.impl.MultiMapRecord;
import com.hazelcast.multimap.impl.MultiMapValue;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.BackupOperation;
import java.io.IOException;
import java.util.Collection;
import java.util.List;

public class PutBackupOperation extends AbstractKeyBasedMultiMapOperation implements BackupOperation {
  private long recordId;
  
  private Data value;
  
  private int index;
  
  public PutBackupOperation() {}
  
  public PutBackupOperation(String name, Data dataKey, Data value, long recordId, int index) {
    super(name, dataKey);
    this.value = value;
    this.recordId = recordId;
    this.index = index;
  }
  
  public void run() {
    MultiMapContainer container = getOrCreateContainerWithoutAccess();
    MultiMapValue multiMapValue = container.getOrCreateMultiMapValue(this.dataKey);
    Collection<MultiMapRecord> collection = multiMapValue.getCollection(false);
    MultiMapRecord record = new MultiMapRecord(this.recordId, isBinary() ? this.value : toObject(this.value));
    if (this.index == -1) {
      this.response = Boolean.valueOf(collection.add(record));
    } else {
      try {
        ((List)collection).add(this.index, record);
        this.response = Boolean.valueOf(true);
      } catch (IndexOutOfBoundsException e) {
        this.response = e;
      } 
    } 
  }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeLong(this.recordId);
    out.writeInt(this.index);
    out.writeData(this.value);
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    this.recordId = in.readLong();
    this.index = in.readInt();
    this.value = in.readData();
  }
  
  public int getId() { return 15; }
}
