package com.hazelcast.multimap.impl;

import com.hazelcast.config.MergePolicyConfig;
import com.hazelcast.spi.NodeEngine;
import com.hazelcast.spi.impl.merge.AbstractContainerCollector;
import java.util.Collection;
import java.util.Iterator;

class MultiMapContainerCollector extends AbstractContainerCollector<MultiMapContainer> {
  private final MultiMapPartitionContainer[] partitionContainers;
  
  MultiMapContainerCollector(NodeEngine nodeEngine, MultiMapPartitionContainer[] partitionContainers) {
    super(nodeEngine);
    this.partitionContainers = partitionContainers;
  }
  
  protected Iterator<MultiMapContainer> containerIterator(int partitionId) {
    MultiMapPartitionContainer partitionContainer = this.partitionContainers[partitionId];
    if (partitionContainer == null)
      return new AbstractContainerCollector.EmptyIterator(this); 
    return partitionContainer.containerMap.values().iterator();
  }
  
  protected MergePolicyConfig getMergePolicyConfig(MultiMapContainer container) { return container.getConfig().getMergePolicyConfig(); }
  
  protected void destroy(MultiMapContainer container) { container.destroy(); }
  
  protected void destroyBackup(MultiMapContainer container) { container.destroy(); }
  
  protected int getMergingValueCount() {
    int size = 0;
    for (Collection<MultiMapContainer> containers : getCollectedContainers().values()) {
      for (MultiMapContainer container : containers)
        size += container.size(); 
    } 
    return size;
  }
}
