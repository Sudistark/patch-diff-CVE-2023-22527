package com.hazelcast.multimap.impl;

import com.hazelcast.core.EntryEvent;
import com.hazelcast.core.EntryListener;
import com.hazelcast.core.IMapEvent;
import com.hazelcast.core.MapEvent;
import com.hazelcast.core.Member;
import com.hazelcast.instance.MemberImpl;
import com.hazelcast.internal.cluster.ClusterService;
import com.hazelcast.logging.ILogger;
import com.hazelcast.logging.Logger;
import com.hazelcast.map.impl.DataAwareEntryEvent;
import com.hazelcast.map.impl.event.EntryEventData;
import com.hazelcast.map.impl.event.EventData;
import com.hazelcast.map.impl.event.MapEventData;

class MultiMapEventsDispatcher {
  private final ILogger logger;
  
  private final ClusterService clusterService;
  
  private final MultiMapService multiMapService;
  
  MultiMapEventsDispatcher(MultiMapService multiMapService, ClusterService clusterService) {
    this.logger = Logger.getLogger(MultiMapEventsDispatcher.class);
    this.multiMapService = multiMapService;
    this.clusterService = clusterService;
  }
  
  private void incrementEventStats(IMapEvent event) { this.multiMapService.getLocalMultiMapStatsImpl(event.getName()).incrementReceivedEvents(); }
  
  public void dispatchEvent(EventData eventData, EntryListener listener) {
    if (eventData instanceof EntryEventData) {
      dispatchEntryEventData(eventData, listener);
    } else if (eventData instanceof MapEventData) {
      dispatchMapEventData(eventData, listener);
    } else {
      throw new IllegalArgumentException("Unknown multimap event data");
    } 
  }
  
  private void dispatchMapEventData(EventData eventData, EntryListener listener) {
    MapEventData mapEventData = (MapEventData)eventData;
    Member member = getMemberOrNull(eventData);
    if (member == null)
      return; 
    MapEvent event = createMapEvent(mapEventData, member);
    dispatch0(event, listener);
    incrementEventStats(event);
  }
  
  private MapEvent createMapEvent(MapEventData mapEventData, Member member) {
    return new MapEvent(mapEventData.getMapName(), member, mapEventData
        .getEventType(), mapEventData.getNumberOfEntries());
  }
  
  private void dispatchEntryEventData(EventData eventData, EntryListener listener) {
    EntryEventData entryEventData = (EntryEventData)eventData;
    Member member = getMemberOrNull(eventData);
    DataAwareEntryEvent dataAwareEntryEvent = createDataAwareEntryEvent(entryEventData, member);
    dispatch0(dataAwareEntryEvent, listener);
    incrementEventStats(dataAwareEntryEvent);
  }
  
  private Member getMemberOrNull(EventData eventData) {
    MemberImpl memberImpl = this.clusterService.getMember(eventData.getCaller());
    if (memberImpl == null && 
      this.logger.isInfoEnabled())
      this.logger.info("Dropping event " + eventData + " from unknown address:" + eventData.getCaller()); 
    return memberImpl;
  }
  
  private DataAwareEntryEvent createDataAwareEntryEvent(EntryEventData entryEventData, Member member) {
    return new DataAwareEntryEvent(member, entryEventData.getEventType(), entryEventData.getMapName(), entryEventData
        .getDataKey(), entryEventData.getDataNewValue(), entryEventData
        .getDataOldValue(), entryEventData.getDataMergingValue(), this.multiMapService
        .getSerializationService());
  }
  
  private void dispatch0(IMapEvent event, EntryListener listener) {
    switch (null.$SwitchMap$com$hazelcast$core$EntryEventType[event.getEventType().ordinal()]) {
      case 1:
        listener.entryAdded((EntryEvent)event);
        return;
      case 2:
        listener.entryRemoved((EntryEvent)event);
        return;
      case 3:
        listener.mapCleared((MapEvent)event);
        return;
    } 
    throw new IllegalArgumentException("Invalid event type: " + event.getEventType());
  }
}
