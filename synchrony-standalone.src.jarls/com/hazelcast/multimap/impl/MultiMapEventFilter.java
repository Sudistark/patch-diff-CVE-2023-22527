package com.hazelcast.multimap.impl;

import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import com.hazelcast.spi.EventFilter;
import java.io.IOException;

public class MultiMapEventFilter implements EventFilter, IdentifiedDataSerializable {
  boolean includeValue;
  
  Data key;
  
  public MultiMapEventFilter() {}
  
  public MultiMapEventFilter(boolean includeValue, Data key) {
    this.includeValue = includeValue;
    this.key = key;
  }
  
  public boolean isIncludeValue() { return this.includeValue; }
  
  public Data getKey() { return this.key; }
  
  public void writeData(ObjectDataOutput out) throws IOException {
    out.writeBoolean(this.includeValue);
    out.writeData(this.key);
  }
  
  public void readData(ObjectDataInput in) throws IOException {
    this.includeValue = in.readBoolean();
    this.key = in.readData();
  }
  
  public boolean eval(Object arg) { return false; }
  
  public boolean equals(Object o) {
    if (this == o)
      return true; 
    if (o == null || getClass() != o.getClass())
      return false; 
    MultiMapEventFilter that = (MultiMapEventFilter)o;
    if (this.includeValue != that.includeValue)
      return false; 
    if ((this.key != null) ? !this.key.equals(that.key) : (that.key != null))
      return false; 
    return true;
  }
  
  public int hashCode() {
    result = this.includeValue ? 1 : 0;
    return 31 * result + ((this.key != null) ? this.key.hashCode() : 0);
  }
  
  public int getFactoryId() { return MultiMapDataSerializerHook.F_ID; }
  
  public int getId() { return 43; }
}
