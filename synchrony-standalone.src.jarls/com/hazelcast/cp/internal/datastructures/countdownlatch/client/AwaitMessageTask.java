package com.hazelcast.cp.internal.datastructures.countdownlatch.client;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.CPCountDownLatchAwaitCodec;
import com.hazelcast.cp.internal.client.AbstractCPMessageTask;
import com.hazelcast.cp.internal.datastructures.countdownlatch.operation.AwaitOp;
import com.hazelcast.instance.Node;
import com.hazelcast.nio.Connection;
import com.hazelcast.security.permission.CountDownLatchPermission;
import java.security.Permission;
import java.util.concurrent.TimeUnit;

public class AwaitMessageTask extends AbstractCPMessageTask<CPCountDownLatchAwaitCodec.RequestParameters> {
  public AwaitMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected void processMessage() { invoke(((CPCountDownLatchAwaitCodec.RequestParameters)this.parameters).groupId, new AwaitOp(((CPCountDownLatchAwaitCodec.RequestParameters)this.parameters).name, ((CPCountDownLatchAwaitCodec.RequestParameters)this.parameters).invocationUid, ((CPCountDownLatchAwaitCodec.RequestParameters)this.parameters).timeoutMs)); }
  
  protected CPCountDownLatchAwaitCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return CPCountDownLatchAwaitCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return CPCountDownLatchAwaitCodec.encodeResponse(((Boolean)response).booleanValue()); }
  
  public String getServiceName() { return "hz:raft:countDownLatchService"; }
  
  public Permission getRequiredPermission() { return new CountDownLatchPermission(((CPCountDownLatchAwaitCodec.RequestParameters)this.parameters).name, new String[] { "read" }); }
  
  public String getDistributedObjectName() { return ((CPCountDownLatchAwaitCodec.RequestParameters)this.parameters).name; }
  
  public String getMethodName() { return "await"; }
  
  public Object[] getParameters() { return new Object[] { Long.valueOf(((CPCountDownLatchAwaitCodec.RequestParameters)this.parameters).timeoutMs), TimeUnit.MILLISECONDS }; }
}
