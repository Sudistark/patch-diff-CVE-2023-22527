package com.hazelcast.cp.internal.datastructures.countdownlatch;

import com.hazelcast.cp.CPGroupId;
import com.hazelcast.cp.internal.datastructures.spi.blocking.BlockingResource;
import com.hazelcast.cp.internal.datastructures.spi.blocking.ResourceRegistry;
import com.hazelcast.cp.internal.util.Tuple2;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import java.util.Collection;
import java.util.Map;
import java.util.UUID;

public class RaftCountDownLatchRegistry extends ResourceRegistry<AwaitInvocationKey, RaftCountDownLatch> implements IdentifiedDataSerializable {
  RaftCountDownLatchRegistry() {}
  
  RaftCountDownLatchRegistry(CPGroupId groupId) { super(groupId); }
  
  protected RaftCountDownLatch createNewResource(CPGroupId groupId, String name) { return new RaftCountDownLatch(groupId, name); }
  
  protected RaftCountDownLatchRegistry cloneForSnapshot() {
    RaftCountDownLatchRegistry clone = new RaftCountDownLatchRegistry();
    clone.groupId = this.groupId;
    for (Map.Entry<String, RaftCountDownLatch> e : this.resources.entrySet())
      clone.resources.put(e.getKey(), ((RaftCountDownLatch)e.getValue()).cloneForSnapshot()); 
    clone.destroyedNames.addAll(this.destroyedNames);
    clone.waitTimeouts.putAll(this.waitTimeouts);
    return clone;
  }
  
  boolean trySetCount(String name, int count) { return ((RaftCountDownLatch)getOrInitResource(name)).trySetCount(count); }
  
  Tuple2<Integer, Collection<AwaitInvocationKey>> countDown(String name, UUID invocationUuid, int expectedRound) {
    RaftCountDownLatch latch = (RaftCountDownLatch)getOrInitResource(name);
    Tuple2<Integer, Collection<AwaitInvocationKey>> t = latch.countDown(invocationUuid, expectedRound);
    for (AwaitInvocationKey key : (Collection)t.element2)
      removeWaitKey(name, key); 
    return t;
  }
  
  boolean await(String name, AwaitInvocationKey key, long timeoutMs) {
    boolean success = ((RaftCountDownLatch)getOrInitResource(name)).await(key, (timeoutMs > 0L));
    if (!success)
      addWaitKey(name, key, timeoutMs); 
    return success;
  }
  
  int getRemainingCount(String name) { return ((RaftCountDownLatch)getOrInitResource(name)).getRemainingCount(); }
  
  int getRound(String name) { return ((RaftCountDownLatch)getOrInitResource(name)).getRound(); }
  
  public int getFactoryId() { return RaftCountDownLatchDataSerializerHook.F_ID; }
  
  public int getId() { return 1; }
}
