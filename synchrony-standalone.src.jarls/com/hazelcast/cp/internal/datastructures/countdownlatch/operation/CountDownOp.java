package com.hazelcast.cp.internal.datastructures.countdownlatch.operation;

import com.hazelcast.cp.CPGroupId;
import com.hazelcast.cp.internal.IndeterminateOperationStateAware;
import com.hazelcast.cp.internal.datastructures.countdownlatch.RaftCountDownLatchService;
import com.hazelcast.cp.internal.util.UUIDSerializationUtil;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import java.io.IOException;
import java.util.UUID;

public class CountDownOp extends AbstractCountDownLatchOp implements IndeterminateOperationStateAware {
  private UUID invocationUid;
  
  private int expectedRound;
  
  public CountDownOp() {}
  
  public CountDownOp(String name, UUID invocationUid, int expectedRound) {
    super(name);
    this.invocationUid = invocationUid;
    this.expectedRound = expectedRound;
  }
  
  public Object run(CPGroupId groupId, long commitIndex) {
    RaftCountDownLatchService service = (RaftCountDownLatchService)getService();
    return Integer.valueOf(service.countDown(groupId, this.name, this.invocationUid, this.expectedRound));
  }
  
  public boolean isRetryableOnIndeterminateOperationState() { return true; }
  
  public int getId() { return 5; }
  
  public void writeData(ObjectDataOutput out) throws IOException {
    super.writeData(out);
    UUIDSerializationUtil.writeUUID(out, this.invocationUid);
    out.writeInt(this.expectedRound);
  }
  
  public void readData(ObjectDataInput in) throws IOException {
    super.readData(in);
    this.invocationUid = UUIDSerializationUtil.readUUID(in);
    this.expectedRound = in.readInt();
  }
  
  protected void toString(StringBuilder sb) {
    super.toString(sb);
    sb.append(", invocationUid=").append(this.invocationUid)
      .append(", expectedRound=").append(this.expectedRound);
  }
}
