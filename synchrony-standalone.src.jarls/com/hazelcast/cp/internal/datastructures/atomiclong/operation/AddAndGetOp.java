package com.hazelcast.cp.internal.datastructures.atomiclong.operation;

import com.hazelcast.cp.CPGroupId;
import com.hazelcast.cp.internal.IndeterminateOperationStateAware;
import com.hazelcast.cp.internal.datastructures.atomiclong.RaftAtomicLong;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import java.io.IOException;

public class AddAndGetOp extends AbstractAtomicLongOp implements IndeterminateOperationStateAware {
  private long delta;
  
  public AddAndGetOp() {}
  
  public AddAndGetOp(String name, long delta) {
    super(name);
    this.delta = delta;
  }
  
  public Object run(CPGroupId groupId, long commitIndex) {
    RaftAtomicLong atomic = getAtomicLong(groupId);
    return Long.valueOf(atomic.addAndGet(this.delta));
  }
  
  public boolean isRetryableOnIndeterminateOperationState() { return (this.delta == 0L); }
  
  public void writeData(ObjectDataOutput out) throws IOException {
    super.writeData(out);
    out.writeLong(this.delta);
  }
  
  public void readData(ObjectDataInput in) throws IOException {
    super.readData(in);
    this.delta = in.readLong();
  }
  
  public int getId() { return 1; }
  
  protected void toString(StringBuilder sb) {
    super.toString(sb);
    sb.append(", delta=").append(this.delta);
  }
}
