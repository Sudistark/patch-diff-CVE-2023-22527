package com.hazelcast.cp.internal.datastructures.atomicref.operation;

import com.hazelcast.cp.CPGroupId;
import com.hazelcast.cp.internal.datastructures.atomicref.RaftAtomicRef;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import java.io.IOException;

public class CompareAndSetOp extends AbstractAtomicRefOp implements IdentifiedDataSerializable {
  private Data expectedValue;
  
  private Data newValue;
  
  public CompareAndSetOp() {}
  
  public CompareAndSetOp(String name, Data expectedValue, Data newValue) {
    super(name);
    this.expectedValue = expectedValue;
    this.newValue = newValue;
  }
  
  public Object run(CPGroupId groupId, long commitIndex) {
    RaftAtomicRef ref = getAtomicRef(groupId);
    boolean contains = ref.contains(this.expectedValue);
    if (contains)
      ref.set(this.newValue); 
    return Boolean.valueOf(contains);
  }
  
  public int getId() { return 3; }
  
  public void writeData(ObjectDataOutput out) throws IOException {
    super.writeData(out);
    out.writeData(this.expectedValue);
    out.writeData(this.newValue);
  }
  
  public void readData(ObjectDataInput in) throws IOException {
    super.readData(in);
    this.expectedValue = in.readData();
    this.newValue = in.readData();
  }
}
