package com.hazelcast.cp.internal.datastructures.atomicref.operation;

import com.hazelcast.core.IFunction;
import com.hazelcast.cp.CPGroupId;
import com.hazelcast.cp.internal.datastructures.atomicref.RaftAtomicRef;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import com.hazelcast.spi.NodeEngine;
import com.hazelcast.util.Preconditions;
import java.io.IOException;

public class ApplyOp extends AbstractAtomicRefOp implements IdentifiedDataSerializable {
  private Data function;
  
  private ReturnValueType returnValueType;
  
  private boolean alter;
  
  public ApplyOp() {}
  
  public ApplyOp(String name, Data function, ReturnValueType returnValueType, boolean alter) {
    super(name);
    Preconditions.checkNotNull(function);
    Preconditions.checkNotNull(returnValueType);
    this.function = function;
    this.returnValueType = returnValueType;
    this.alter = alter;
  }
  
  public Object run(CPGroupId groupId, long commitIndex) {
    RaftAtomicRef ref = getAtomicRef(groupId);
    Data currentData = ref.get();
    Data newData = callFunction(currentData);
    if (this.alter)
      ref.set(newData); 
    if (this.returnValueType == ReturnValueType.NO_RETURN_VALUE)
      return null; 
    return (this.returnValueType == ReturnValueType.RETURN_OLD_VALUE) ? currentData : newData;
  }
  
  private Data callFunction(Data currentData) {
    NodeEngine nodeEngine = getNodeEngine();
    IFunction func = (IFunction)nodeEngine.toObject(this.function);
    Object input = nodeEngine.toObject(currentData);
    Object output = func.apply(input);
    return nodeEngine.toData(output);
  }
  
  public int getId() { return 2; }
  
  public void writeData(ObjectDataOutput out) throws IOException {
    super.writeData(out);
    out.writeData(this.function);
    out.writeUTF(this.returnValueType.name());
    out.writeBoolean(this.alter);
  }
  
  public void readData(ObjectDataInput in) throws IOException {
    super.readData(in);
    this.function = in.readData();
    this.returnValueType = ReturnValueType.valueOf(in.readUTF());
    this.alter = in.readBoolean();
  }
}
