package com.hazelcast.cp.internal.datastructures.atomicref.client;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.CPAtomicRefApplyCodec;
import com.hazelcast.cp.internal.client.AbstractCPMessageTask;
import com.hazelcast.cp.internal.datastructures.atomicref.operation.ApplyOp;
import com.hazelcast.instance.Node;
import com.hazelcast.nio.Connection;
import com.hazelcast.security.permission.AtomicReferencePermission;
import java.security.Permission;

public class ApplyMessageTask extends AbstractCPMessageTask<CPAtomicRefApplyCodec.RequestParameters> {
  public ApplyMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected void processMessage() {
    ApplyOp.ReturnValueType returnValueType = ApplyOp.ReturnValueType.fromValue(((CPAtomicRefApplyCodec.RequestParameters)this.parameters).returnValueType);
    invoke(((CPAtomicRefApplyCodec.RequestParameters)this.parameters).groupId, new ApplyOp(((CPAtomicRefApplyCodec.RequestParameters)this.parameters).name, ((CPAtomicRefApplyCodec.RequestParameters)this.parameters).function, returnValueType, ((CPAtomicRefApplyCodec.RequestParameters)this.parameters).alter));
  }
  
  protected CPAtomicRefApplyCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return CPAtomicRefApplyCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return CPAtomicRefApplyCodec.encodeResponse(this.serializationService.toData(response)); }
  
  public String getServiceName() { return "hz:raft:atomicRefService"; }
  
  public Permission getRequiredPermission() { return new AtomicReferencePermission(((CPAtomicRefApplyCodec.RequestParameters)this.parameters).name, new String[] { "modify" }); }
  
  public String getDistributedObjectName() { return ((CPAtomicRefApplyCodec.RequestParameters)this.parameters).name; }
  
  public String getMethodName() {
    if (((CPAtomicRefApplyCodec.RequestParameters)this.parameters).alter) {
      if (((CPAtomicRefApplyCodec.RequestParameters)this.parameters).returnValueType == ApplyOp.ReturnValueType.RETURN_OLD_VALUE.value())
        return "getAndAlter"; 
      if (((CPAtomicRefApplyCodec.RequestParameters)this.parameters).returnValueType == ApplyOp.ReturnValueType.RETURN_NEW_VALUE.value())
        return "alterAndGet"; 
      return "alter";
    } 
    return "apply";
  }
  
  public Object[] getParameters() { return new Object[] { ((CPAtomicRefApplyCodec.RequestParameters)this.parameters).function }; }
}
