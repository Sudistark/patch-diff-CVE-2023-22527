package com.hazelcast.cp.internal.datastructures.atomicref.client;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.CPAtomicRefCompareAndSetCodec;
import com.hazelcast.cp.internal.client.AbstractCPMessageTask;
import com.hazelcast.cp.internal.datastructures.atomicref.operation.CompareAndSetOp;
import com.hazelcast.instance.Node;
import com.hazelcast.nio.Connection;
import com.hazelcast.security.permission.AtomicReferencePermission;
import java.security.Permission;

public class CompareAndSetMessageTask extends AbstractCPMessageTask<CPAtomicRefCompareAndSetCodec.RequestParameters> {
  public CompareAndSetMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected void processMessage() {
    CompareAndSetOp compareAndSetOp = new CompareAndSetOp(((CPAtomicRefCompareAndSetCodec.RequestParameters)this.parameters).name, ((CPAtomicRefCompareAndSetCodec.RequestParameters)this.parameters).oldValue, ((CPAtomicRefCompareAndSetCodec.RequestParameters)this.parameters).newValue);
    invoke(((CPAtomicRefCompareAndSetCodec.RequestParameters)this.parameters).groupId, compareAndSetOp);
  }
  
  protected CPAtomicRefCompareAndSetCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return CPAtomicRefCompareAndSetCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return CPAtomicRefCompareAndSetCodec.encodeResponse(((Boolean)response).booleanValue()); }
  
  public String getServiceName() { return "hz:raft:atomicRefService"; }
  
  public Permission getRequiredPermission() { return new AtomicReferencePermission(((CPAtomicRefCompareAndSetCodec.RequestParameters)this.parameters).name, new String[] { "modify" }); }
  
  public String getDistributedObjectName() { return ((CPAtomicRefCompareAndSetCodec.RequestParameters)this.parameters).name; }
  
  public String getMethodName() { return "compareAndSet"; }
  
  public Object[] getParameters() { return new Object[] { ((CPAtomicRefCompareAndSetCodec.RequestParameters)this.parameters).oldValue, ((CPAtomicRefCompareAndSetCodec.RequestParameters)this.parameters).newValue }; }
}
