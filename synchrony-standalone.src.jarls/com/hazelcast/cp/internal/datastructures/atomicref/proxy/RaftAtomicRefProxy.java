package com.hazelcast.cp.internal.datastructures.atomicref.proxy;

import com.hazelcast.core.IAtomicReference;
import com.hazelcast.core.ICompletableFuture;
import com.hazelcast.core.IFunction;
import com.hazelcast.cp.CPGroupId;
import com.hazelcast.cp.internal.RaftGroupId;
import com.hazelcast.cp.internal.RaftInvocationManager;
import com.hazelcast.cp.internal.RaftService;
import com.hazelcast.cp.internal.datastructures.atomicref.operation.ApplyOp;
import com.hazelcast.cp.internal.datastructures.atomicref.operation.CompareAndSetOp;
import com.hazelcast.cp.internal.datastructures.atomicref.operation.ContainsOp;
import com.hazelcast.cp.internal.datastructures.atomicref.operation.GetOp;
import com.hazelcast.cp.internal.datastructures.atomicref.operation.SetOp;
import com.hazelcast.cp.internal.datastructures.spi.operation.DestroyRaftObjectOp;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.InternalCompletableFuture;
import com.hazelcast.spi.NodeEngine;
import com.hazelcast.spi.serialization.SerializationService;
import com.hazelcast.util.Preconditions;

public class RaftAtomicRefProxy<T> extends Object implements IAtomicReference<T> {
  private final RaftInvocationManager invocationManager;
  
  private final SerializationService serializationService;
  
  private final RaftGroupId groupId;
  
  private final String proxyName;
  
  private final String objectName;
  
  public RaftAtomicRefProxy(NodeEngine nodeEngine, RaftGroupId groupId, String proxyName, String objectName) {
    RaftService service = (RaftService)nodeEngine.getService("hz:core:raft");
    this.invocationManager = service.getInvocationManager();
    this.serializationService = nodeEngine.getSerializationService();
    this.groupId = groupId;
    this.proxyName = proxyName;
    this.objectName = objectName;
  }
  
  public boolean compareAndSet(T expect, T update) { return ((Boolean)compareAndSetAsync(expect, update).join()).booleanValue(); }
  
  public T get() { return (T)getAsync().join(); }
  
  public void set(T newValue) { setAsync(newValue).join(); }
  
  public T getAndSet(T newValue) { return (T)getAndSetAsync(newValue).join(); }
  
  public T setAndGet(T update) {
    set(update);
    return update;
  }
  
  public boolean isNull() { return ((Boolean)isNullAsync().join()).booleanValue(); }
  
  public void clear() { clearAsync().join(); }
  
  public boolean contains(T value) { return ((Boolean)containsAsync(value).join()).booleanValue(); }
  
  public void alter(IFunction<T, T> function) { alterAsync(function).join(); }
  
  public T alterAndGet(IFunction<T, T> function) { return (T)alterAndGetAsync(function).join(); }
  
  public T getAndAlter(IFunction<T, T> function) { return (T)getAndAlterAsync(function).join(); }
  
  public <R> R apply(IFunction<T, R> function) { return (R)applyAsync(function).join(); }
  
  public InternalCompletableFuture<Boolean> compareAndSetAsync(T expect, T update) { return this.invocationManager.invoke(this.groupId, new CompareAndSetOp(this.objectName, toData(expect), toData(update))); }
  
  public InternalCompletableFuture<T> getAsync() { return this.invocationManager.invoke(this.groupId, new GetOp(this.objectName)); }
  
  public InternalCompletableFuture<Void> setAsync(T newValue) { return this.invocationManager.invoke(this.groupId, new SetOp(this.objectName, toData(newValue), false)); }
  
  public InternalCompletableFuture<T> getAndSetAsync(T newValue) { return this.invocationManager.invoke(this.groupId, new SetOp(this.objectName, toData(newValue), true)); }
  
  public InternalCompletableFuture<Boolean> isNullAsync() { return containsAsync(null); }
  
  public InternalCompletableFuture<Void> clearAsync() { return setAsync(null); }
  
  public InternalCompletableFuture<Boolean> containsAsync(T expected) { return this.invocationManager.invoke(this.groupId, new ContainsOp(this.objectName, toData(expected))); }
  
  public InternalCompletableFuture<Void> alterAsync(IFunction<T, T> function) {
    Preconditions.checkTrue((function != null), "Function cannot be null");
    return this.invocationManager.invoke(this.groupId, new ApplyOp(this.objectName, toData(function), ApplyOp.ReturnValueType.NO_RETURN_VALUE, true));
  }
  
  public InternalCompletableFuture<T> alterAndGetAsync(IFunction<T, T> function) {
    Preconditions.checkTrue((function != null), "Function cannot be null");
    return this.invocationManager.invoke(this.groupId, new ApplyOp(this.objectName, toData(function), ApplyOp.ReturnValueType.RETURN_NEW_VALUE, true));
  }
  
  public InternalCompletableFuture<T> getAndAlterAsync(IFunction<T, T> function) {
    Preconditions.checkTrue((function != null), "Function cannot be null");
    return this.invocationManager.invoke(this.groupId, new ApplyOp(this.objectName, toData(function), ApplyOp.ReturnValueType.RETURN_OLD_VALUE, true));
  }
  
  public <R> InternalCompletableFuture<R> applyAsync(IFunction<T, R> function) {
    Preconditions.checkTrue((function != null), "Function cannot be null");
    return this.invocationManager.invoke(this.groupId, new ApplyOp(this.objectName, toData(function), ApplyOp.ReturnValueType.RETURN_NEW_VALUE, false));
  }
  
  public String getPartitionKey() { throw new UnsupportedOperationException(); }
  
  public String getName() { return this.proxyName; }
  
  public String getServiceName() { return "hz:raft:atomicRefService"; }
  
  public void destroy() { this.invocationManager.invoke(this.groupId, new DestroyRaftObjectOp(getServiceName(), this.objectName)).join(); }
  
  public CPGroupId getGroupId() { return this.groupId; }
  
  private Data toData(Object value) { return this.serializationService.toData(value); }
}
