package com.hazelcast.cp.internal.datastructures.lock.client;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.CPFencedLockTryLockCodec;
import com.hazelcast.cp.internal.client.AbstractCPMessageTask;
import com.hazelcast.cp.internal.datastructures.lock.operation.TryLockOp;
import com.hazelcast.instance.Node;
import com.hazelcast.nio.Connection;
import com.hazelcast.security.permission.LockPermission;
import java.security.Permission;
import java.util.concurrent.TimeUnit;

public class TryLockMessageTask extends AbstractCPMessageTask<CPFencedLockTryLockCodec.RequestParameters> {
  public TryLockMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected void processMessage() {
    TryLockOp tryLockOp = new TryLockOp(((CPFencedLockTryLockCodec.RequestParameters)this.parameters).name, ((CPFencedLockTryLockCodec.RequestParameters)this.parameters).sessionId, ((CPFencedLockTryLockCodec.RequestParameters)this.parameters).threadId, ((CPFencedLockTryLockCodec.RequestParameters)this.parameters).invocationUid, ((CPFencedLockTryLockCodec.RequestParameters)this.parameters).timeoutMs);
    invoke(((CPFencedLockTryLockCodec.RequestParameters)this.parameters).groupId, tryLockOp);
  }
  
  protected CPFencedLockTryLockCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return CPFencedLockTryLockCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return CPFencedLockTryLockCodec.encodeResponse(((Long)response).longValue()); }
  
  public String getServiceName() { return "hz:raft:lockService"; }
  
  public Permission getRequiredPermission() { return new LockPermission(((CPFencedLockTryLockCodec.RequestParameters)this.parameters).name, new String[] { "lock" }); }
  
  public String getDistributedObjectName() { return ((CPFencedLockTryLockCodec.RequestParameters)this.parameters).name; }
  
  public String getMethodName() { return "tryLock"; }
  
  public Object[] getParameters() { return new Object[] { Long.valueOf(((CPFencedLockTryLockCodec.RequestParameters)this.parameters).timeoutMs), TimeUnit.MILLISECONDS }; }
}
