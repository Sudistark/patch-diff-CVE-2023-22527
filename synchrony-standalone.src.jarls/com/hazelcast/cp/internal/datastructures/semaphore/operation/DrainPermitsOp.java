package com.hazelcast.cp.internal.datastructures.semaphore.operation;

import com.hazelcast.cp.CPGroupId;
import com.hazelcast.cp.internal.IndeterminateOperationStateAware;
import com.hazelcast.cp.internal.datastructures.semaphore.RaftSemaphoreService;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import java.io.IOException;
import java.util.UUID;

public class DrainPermitsOp extends AbstractSemaphoreOp implements IndeterminateOperationStateAware {
  public DrainPermitsOp() {}
  
  public DrainPermitsOp(String name, long sessionId, long threadId, UUID invocationUid) { super(name, sessionId, threadId, invocationUid); }
  
  public Object run(CPGroupId groupId, long commitIndex) {
    RaftSemaphoreService service = (RaftSemaphoreService)getService();
    return Integer.valueOf(service.drainPermits(groupId, this.name, commitIndex, getSemaphoreEndpoint(), this.invocationUid));
  }
  
  public boolean isRetryableOnIndeterminateOperationState() { return (this.sessionId != -1L); }
  
  public int getId() { return 8; }
}
