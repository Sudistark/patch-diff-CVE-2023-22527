package com.hazelcast.cp.internal.datastructures.semaphore.operation;

import com.hazelcast.cp.CPGroupId;
import com.hazelcast.cp.internal.IndeterminateOperationStateAware;
import com.hazelcast.cp.internal.RaftOp;
import com.hazelcast.cp.internal.datastructures.semaphore.RaftSemaphoreDataSerializerHook;
import com.hazelcast.cp.internal.datastructures.semaphore.RaftSemaphoreService;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import java.io.IOException;

public class AvailablePermitsOp extends RaftOp implements IndeterminateOperationStateAware, IdentifiedDataSerializable {
  private String name;
  
  public AvailablePermitsOp() {}
  
  public AvailablePermitsOp(String name) { this.name = name; }
  
  public Object run(CPGroupId groupId, long commitIndex) {
    RaftSemaphoreService service = (RaftSemaphoreService)getService();
    return Integer.valueOf(service.availablePermits(groupId, this.name));
  }
  
  public boolean isRetryableOnIndeterminateOperationState() { return true; }
  
  protected String getServiceName() { return "hz:raft:semaphoreService"; }
  
  public int getFactoryId() { return RaftSemaphoreDataSerializerHook.F_ID; }
  
  public int getId() { return 6; }
  
  public void writeData(ObjectDataOutput out) throws IOException { out.writeUTF(this.name); }
  
  public void readData(ObjectDataInput in) throws IOException { this.name = in.readUTF(); }
  
  protected void toString(StringBuilder sb) { sb.append(", name=").append(this.name); }
}
