package com.hazelcast.cp.internal.datastructures.semaphore.operation;

import com.hazelcast.cp.CPGroupId;
import com.hazelcast.cp.internal.IndeterminateOperationStateAware;
import com.hazelcast.cp.internal.RaftOp;
import com.hazelcast.cp.internal.datastructures.semaphore.RaftSemaphoreDataSerializerHook;
import com.hazelcast.cp.internal.datastructures.semaphore.RaftSemaphoreService;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import java.io.IOException;

public class InitSemaphoreOp extends RaftOp implements IndeterminateOperationStateAware, IdentifiedDataSerializable {
  private String name;
  
  private int permits;
  
  public InitSemaphoreOp() {}
  
  public InitSemaphoreOp(String name, int permits) {
    this.name = name;
    this.permits = permits;
  }
  
  public Object run(CPGroupId groupId, long commitIndex) {
    RaftSemaphoreService service = (RaftSemaphoreService)getService();
    return Boolean.valueOf(service.initSemaphore(groupId, this.name, this.permits));
  }
  
  public boolean isRetryableOnIndeterminateOperationState() { return false; }
  
  protected String getServiceName() { return "hz:raft:semaphoreService"; }
  
  public int getFactoryId() { return RaftSemaphoreDataSerializerHook.F_ID; }
  
  public int getId() { return 9; }
  
  public void writeData(ObjectDataOutput out) throws IOException {
    out.writeUTF(this.name);
    out.writeInt(this.permits);
  }
  
  public void readData(ObjectDataInput in) throws IOException {
    this.name = in.readUTF();
    this.permits = in.readInt();
  }
  
  protected void toString(StringBuilder sb) { sb.append(", name=").append(this.name)
      .append(", permits=").append(this.permits); }
}
