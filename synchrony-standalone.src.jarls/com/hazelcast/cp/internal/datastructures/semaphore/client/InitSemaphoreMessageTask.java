package com.hazelcast.cp.internal.datastructures.semaphore.client;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.CPSemaphoreInitCodec;
import com.hazelcast.cp.internal.client.AbstractCPMessageTask;
import com.hazelcast.cp.internal.datastructures.semaphore.operation.InitSemaphoreOp;
import com.hazelcast.instance.Node;
import com.hazelcast.nio.Connection;
import com.hazelcast.security.permission.SemaphorePermission;
import java.security.Permission;

public class InitSemaphoreMessageTask extends AbstractCPMessageTask<CPSemaphoreInitCodec.RequestParameters> {
  public InitSemaphoreMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected void processMessage() { invoke(((CPSemaphoreInitCodec.RequestParameters)this.parameters).groupId, new InitSemaphoreOp(((CPSemaphoreInitCodec.RequestParameters)this.parameters).name, ((CPSemaphoreInitCodec.RequestParameters)this.parameters).permits)); }
  
  protected CPSemaphoreInitCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return CPSemaphoreInitCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return CPSemaphoreInitCodec.encodeResponse(((Boolean)response).booleanValue()); }
  
  public String getServiceName() { return "hz:raft:semaphoreService"; }
  
  public Permission getRequiredPermission() { return new SemaphorePermission(((CPSemaphoreInitCodec.RequestParameters)this.parameters).name, new String[] { "release" }); }
  
  public String getDistributedObjectName() { return ((CPSemaphoreInitCodec.RequestParameters)this.parameters).name; }
  
  public String getMethodName() { return "init"; }
  
  public Object[] getParameters() { return new Object[] { Integer.valueOf(((CPSemaphoreInitCodec.RequestParameters)this.parameters).permits) }; }
}
