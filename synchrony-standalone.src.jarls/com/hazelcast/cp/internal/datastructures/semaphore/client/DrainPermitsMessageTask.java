package com.hazelcast.cp.internal.datastructures.semaphore.client;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.CPSemaphoreDrainCodec;
import com.hazelcast.cp.internal.client.AbstractCPMessageTask;
import com.hazelcast.cp.internal.datastructures.semaphore.operation.DrainPermitsOp;
import com.hazelcast.instance.Node;
import com.hazelcast.nio.Connection;
import com.hazelcast.security.permission.SemaphorePermission;
import java.security.Permission;

public class DrainPermitsMessageTask extends AbstractCPMessageTask<CPSemaphoreDrainCodec.RequestParameters> {
  public DrainPermitsMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected void processMessage() {
    DrainPermitsOp drainPermitsOp = new DrainPermitsOp(((CPSemaphoreDrainCodec.RequestParameters)this.parameters).name, ((CPSemaphoreDrainCodec.RequestParameters)this.parameters).sessionId, ((CPSemaphoreDrainCodec.RequestParameters)this.parameters).threadId, ((CPSemaphoreDrainCodec.RequestParameters)this.parameters).invocationUid);
    invoke(((CPSemaphoreDrainCodec.RequestParameters)this.parameters).groupId, drainPermitsOp);
  }
  
  protected CPSemaphoreDrainCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return CPSemaphoreDrainCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return CPSemaphoreDrainCodec.encodeResponse(((Integer)response).intValue()); }
  
  public String getServiceName() { return "hz:raft:semaphoreService"; }
  
  public Permission getRequiredPermission() { return new SemaphorePermission(((CPSemaphoreDrainCodec.RequestParameters)this.parameters).name, new String[] { "acquire" }); }
  
  public String getDistributedObjectName() { return ((CPSemaphoreDrainCodec.RequestParameters)this.parameters).name; }
  
  public String getMethodName() { return "drainPermits"; }
  
  public Object[] getParameters() { return new Object[0]; }
}
