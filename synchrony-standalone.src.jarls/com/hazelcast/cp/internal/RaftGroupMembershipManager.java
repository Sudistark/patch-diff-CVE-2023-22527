package com.hazelcast.cp.internal;

import com.hazelcast.cp.internal.raft.QueryPolicy;
import com.hazelcast.logging.ILogger;
import com.hazelcast.spi.ExecutionService;
import com.hazelcast.spi.InternalCompletableFuture;
import com.hazelcast.spi.NodeEngine;
import java.util.concurrent.TimeUnit;

class RaftGroupMembershipManager {
  static final long MANAGEMENT_TASK_PERIOD_IN_MILLIS = TimeUnit.SECONDS.toMillis(1L);
  
  private static final long CHECK_LOCAL_RAFT_NODES_TASK_PERIOD_IN_MILLIS = TimeUnit.SECONDS.toMillis(10L);
  
  private final NodeEngine nodeEngine;
  
  private final RaftService raftService;
  
  private final ILogger logger;
  
  RaftGroupMembershipManager(NodeEngine nodeEngine, RaftService raftService) {
    this.nodeEngine = nodeEngine;
    this.logger = nodeEngine.getLogger(getClass());
    this.raftService = raftService;
  }
  
  void init() {
    if (this.raftService.getLocalCPMember() == null)
      return; 
    this.invocationManager = this.raftService.getInvocationManager();
    ExecutionService executionService = this.nodeEngine.getExecutionService();
    executionService.scheduleWithRepetition(new RaftGroupDestroyHandlerTask(this, null), MANAGEMENT_TASK_PERIOD_IN_MILLIS, MANAGEMENT_TASK_PERIOD_IN_MILLIS, TimeUnit.MILLISECONDS);
    executionService.scheduleWithRepetition(new RaftGroupMembershipChangeHandlerTask(this, null), MANAGEMENT_TASK_PERIOD_IN_MILLIS, MANAGEMENT_TASK_PERIOD_IN_MILLIS, TimeUnit.MILLISECONDS);
    executionService.scheduleWithRepetition(new CheckLocalRaftNodesTask(this, null), CHECK_LOCAL_RAFT_NODES_TASK_PERIOD_IN_MILLIS, CHECK_LOCAL_RAFT_NODES_TASK_PERIOD_IN_MILLIS, TimeUnit.MILLISECONDS);
  }
  
  private boolean skipRunningTask() { return !this.raftService.getMetadataGroupManager().isMetadataGroupLeader(); }
  
  private <T> InternalCompletableFuture<T> queryMetadata(RaftOp op) { return this.invocationManager.query(this.raftService.getMetadataGroupId(), op, QueryPolicy.LEADER_LOCAL); }
}
