package com.hazelcast.cp.internal.operation;

import com.hazelcast.core.ExecutionCallback;
import com.hazelcast.core.ICompletableFuture;
import com.hazelcast.cp.CPGroupId;
import com.hazelcast.cp.exception.CPGroupDestroyedException;
import com.hazelcast.cp.exception.NotLeaderException;
import com.hazelcast.cp.internal.RaftService;
import com.hazelcast.cp.internal.RaftSystemOperation;
import com.hazelcast.cp.internal.raft.impl.RaftNode;
import com.hazelcast.cp.internal.raft.impl.RaftNodeStatus;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import com.hazelcast.spi.Operation;
import java.io.IOException;

public abstract class RaftReplicateOp extends Operation implements IdentifiedDataSerializable, RaftSystemOperation, ExecutionCallback {
  private CPGroupId groupId;
  
  RaftReplicateOp() {}
  
  RaftReplicateOp(CPGroupId groupId) { this.groupId = groupId; }
  
  public final void run() {
    RaftService service = (RaftService)getService();
    RaftNode raftNode = service.getOrInitRaftNode(this.groupId);
    if (raftNode == null) {
      if (service.isRaftGroupDestroyed(this.groupId)) {
        sendResponse(new CPGroupDestroyedException(this.groupId));
      } else {
        sendResponse(new NotLeaderException(this.groupId, service.getLocalCPMember(), null));
      } 
      return;
    } 
    if (raftNode.getStatus() == RaftNodeStatus.STEPPED_DOWN) {
      service.stepDownRaftNode(this.groupId);
      sendResponse(new NotLeaderException(this.groupId, service.getLocalCPMember(), null));
      return;
    } 
    replicate(raftNode).andThen(this);
  }
  
  protected abstract ICompletableFuture replicate(RaftNode paramRaftNode);
  
  public void onResponse(Object response) { sendResponse(response); }
  
  public void onFailure(Throwable t) { sendResponse(t); }
  
  public final boolean returnsResponse() { return false; }
  
  public final boolean validatesTarget() { return false; }
  
  public final String getServiceName() { return "hz:core:raft"; }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeObject(this.groupId);
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    this.groupId = (CPGroupId)in.readObject();
  }
  
  protected void toString(StringBuilder sb) {
    super.toString(sb);
    sb.append(", groupId=").append(this.groupId);
  }
}
