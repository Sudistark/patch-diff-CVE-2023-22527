package com.hazelcast.transaction.impl.xa.operations;

import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.spi.BackupAwareOperation;
import com.hazelcast.spi.NodeEngine;
import com.hazelcast.spi.Operation;
import com.hazelcast.transaction.impl.TransactionLogRecord;
import com.hazelcast.transaction.impl.xa.SerializableXID;
import com.hazelcast.transaction.impl.xa.XAService;
import com.hazelcast.transaction.impl.xa.XATransaction;
import java.io.IOException;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;

public class PutRemoteTransactionOperation extends AbstractXAOperation implements BackupAwareOperation {
  private final List<TransactionLogRecord> records = new LinkedList();
  
  private SerializableXID xid;
  
  private String txnId;
  
  private String txOwnerUuid;
  
  private long timeoutMillis;
  
  private long startTime;
  
  public PutRemoteTransactionOperation() {}
  
  public PutRemoteTransactionOperation(Collection<TransactionLogRecord> logs, String txnId, SerializableXID xid, String txOwnerUuid, long timeoutMillis, long startTime) {
    this.records.addAll(logs);
    this.txnId = txnId;
    this.xid = xid;
    this.txOwnerUuid = txOwnerUuid;
    this.timeoutMillis = timeoutMillis;
    this.startTime = startTime;
  }
  
  public void run() {
    XAService xaService = (XAService)getService();
    NodeEngine nodeEngine = getNodeEngine();
    XATransaction transaction = new XATransaction(nodeEngine, this.records, this.txnId, this.xid, this.txOwnerUuid, this.timeoutMillis, this.startTime);
    xaService.putTransaction(transaction);
  }
  
  public boolean shouldBackup() { return true; }
  
  public int getSyncBackupCount() { return 0; }
  
  public int getAsyncBackupCount() { return 1; }
  
  public Operation getBackupOperation() { return new PutRemoteTransactionBackupOperation(this.records, this.txnId, this.xid, this.txOwnerUuid, this.timeoutMillis, this.startTime); }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    out.writeUTF(this.txnId);
    out.writeObject(this.xid);
    out.writeUTF(this.txOwnerUuid);
    out.writeLong(this.timeoutMillis);
    out.writeLong(this.startTime);
    int len = this.records.size();
    out.writeInt(len);
    if (len > 0)
      for (TransactionLogRecord record : this.records)
        out.writeObject(record);  
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    this.txnId = in.readUTF();
    this.xid = (SerializableXID)in.readObject();
    this.txOwnerUuid = in.readUTF();
    this.timeoutMillis = in.readLong();
    this.startTime = in.readLong();
    int len = in.readInt();
    if (len > 0)
      for (int i = 0; i < len; i++) {
        TransactionLogRecord record = (TransactionLogRecord)in.readObject();
        this.records.add(record);
      }  
  }
  
  public int getId() { return 16; }
}
