package com.hazelcast.transaction.impl.xa.operations;

import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.BackupAwareOperation;
import com.hazelcast.spi.Operation;
import com.hazelcast.transaction.impl.xa.SerializableXID;
import com.hazelcast.transaction.impl.xa.XAService;
import java.io.IOException;

public class ClearRemoteTransactionOperation extends AbstractXAOperation implements BackupAwareOperation {
  private Data xidData;
  
  private SerializableXID xid;
  
  public ClearRemoteTransactionOperation() {}
  
  public ClearRemoteTransactionOperation(Data xidData) { this.xidData = xidData; }
  
  public void beforeRun() { this.xid = (SerializableXID)getNodeEngine().toObject(this.xidData); }
  
  public void run() {
    XAService xaService = (XAService)getService();
    xaService.removeTransactions(this.xid);
  }
  
  public boolean shouldBackup() { return true; }
  
  public int getSyncBackupCount() { return 0; }
  
  public int getAsyncBackupCount() { return 1; }
  
  public Operation getBackupOperation() { return new ClearRemoteTransactionBackupOperation(this.xidData); }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException { out.writeData(this.xidData); }
  
  protected void readInternal(ObjectDataInput in) throws IOException { this.xidData = in.readData(); }
  
  public int getId() { return 10; }
}
