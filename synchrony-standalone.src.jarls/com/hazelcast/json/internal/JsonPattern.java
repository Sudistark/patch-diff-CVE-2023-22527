package com.hazelcast.json.internal;

import java.util.ArrayList;
import java.util.List;

public class JsonPattern {
  private final List<Integer> pattern;
  
  private boolean containsAny;
  
  public JsonPattern() { this(new ArrayList()); }
  
  public JsonPattern(List<Integer> list) { this.pattern = list; }
  
  public JsonPattern(JsonPattern other) { this(new ArrayList(other.pattern)); }
  
  public int get(int index) { return ((Integer)this.pattern.get(index)).intValue(); }
  
  public void add(int patternItem) { this.pattern.add(Integer.valueOf(patternItem)); }
  
  public void addAny() { this.containsAny = true; }
  
  public void add(JsonPattern other) { this.pattern.addAll(other.pattern); }
  
  public boolean hasAny() { return this.containsAny; }
  
  public int depth() { return this.pattern.size(); }
  
  public boolean equals(Object o) {
    if (this == o)
      return true; 
    if (o == null || getClass() != o.getClass())
      return false; 
    JsonPattern pattern1 = (JsonPattern)o;
    if (this.containsAny != pattern1.containsAny)
      return false; 
    return (this.pattern != null) ? this.pattern.equals(pattern1.pattern) : ((pattern1.pattern == null) ? 1 : 0);
  }
  
  public int hashCode() {
    result = (this.pattern != null) ? this.pattern.hashCode() : 0;
    return 31 * result + (this.containsAny ? 1 : 0);
  }
  
  public String toString() { return "JsonPattern{pattern=" + this.pattern + ", containsAny=" + this.containsAny + '}'; }
}
