package com.hazelcast.quorum.impl;

import com.hazelcast.config.ConfigurationException;
import com.hazelcast.config.QuorumConfig;
import com.hazelcast.config.QuorumListenerConfig;
import com.hazelcast.core.Member;
import com.hazelcast.nio.ClassLoaderUtil;
import com.hazelcast.quorum.HeartbeatAware;
import com.hazelcast.quorum.PingAware;
import com.hazelcast.quorum.Quorum;
import com.hazelcast.quorum.QuorumEvent;
import com.hazelcast.quorum.QuorumFunction;
import com.hazelcast.quorum.QuorumListener;
import com.hazelcast.quorum.QuorumService;
import com.hazelcast.quorum.QuorumType;
import com.hazelcast.spi.EventPublishingService;
import com.hazelcast.spi.EventService;
import com.hazelcast.spi.MemberAttributeServiceEvent;
import com.hazelcast.spi.MembershipAwareService;
import com.hazelcast.spi.MembershipServiceEvent;
import com.hazelcast.spi.NamedOperation;
import com.hazelcast.spi.Operation;
import com.hazelcast.spi.QuorumAwareService;
import com.hazelcast.spi.ServiceNamespace;
import com.hazelcast.spi.ServiceNamespaceAware;
import com.hazelcast.spi.impl.NodeEngineImpl;
import com.hazelcast.spi.impl.executionservice.InternalExecutionService;
import com.hazelcast.spi.properties.GroupProperty;
import com.hazelcast.spi.properties.HazelcastProperties;
import com.hazelcast.util.ExceptionUtil;
import com.hazelcast.util.Preconditions;
import com.hazelcast.util.executor.ExecutorType;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

public class QuorumServiceImpl extends Object implements EventPublishingService<QuorumEvent, QuorumListener>, MembershipAwareService, QuorumService, HeartbeatAware, PingAware {
  public static final String SERVICE_NAME = "hz:impl:quorumService";
  
  private static final String QUORUM_EXECUTOR = "hz:quorum";
  
  private final NodeEngineImpl nodeEngine;
  
  private final EventService eventService;
  
  public QuorumServiceImpl(NodeEngineImpl nodeEngine) {
    this.nodeEngine = nodeEngine;
    this.eventService = nodeEngine.getEventService();
  }
  
  public void start() {
    this.quorums = Collections.unmodifiableMap(initializeQuorums());
    scanQuorums();
    initializeListeners();
    if (isInactive())
      return; 
    InternalExecutionService executionService = this.nodeEngine.getExecutionService();
    executionService.register("hz:quorum", 1, 2147483647, ExecutorType.CACHED);
    long heartbeatInterval = this.nodeEngine.getProperties().getSeconds(GroupProperty.HEARTBEAT_INTERVAL_SECONDS);
    executionService.scheduleWithRepetition("hz:quorum", new UpdateQuorums(this), heartbeatInterval, heartbeatInterval, TimeUnit.SECONDS);
  }
  
  private Map<String, QuorumImpl> initializeQuorums() {
    Map<String, QuorumImpl> quorums = new HashMap<String, QuorumImpl>();
    for (QuorumConfig quorumConfig : this.nodeEngine.getConfig().getQuorumConfigs().values()) {
      validateQuorumConfig(quorumConfig);
      if (!quorumConfig.isEnabled())
        continue; 
      QuorumImpl quorum = new QuorumImpl(quorumConfig, this.nodeEngine);
      quorums.put(quorumConfig.getName(), quorum);
    } 
    return quorums;
  }
  
  private void validateQuorumConfig(QuorumConfig quorumConfig) {
    if (quorumConfig.getQuorumFunctionImplementation() == null)
      return; 
    QuorumFunction quorumFunction = quorumConfig.getQuorumFunctionImplementation();
    if (quorumFunction instanceof ProbabilisticQuorumFunction) {
      validateQuorumParameters(quorumConfig.getName(), ((ProbabilisticQuorumFunction)quorumFunction)
          .getAcceptableHeartbeatPauseMillis(), "acceptable heartbeat pause");
    } else if (quorumFunction instanceof RecentlyActiveQuorumFunction) {
      validateQuorumParameters(quorumConfig.getName(), ((RecentlyActiveQuorumFunction)quorumFunction)
          .getHeartbeatToleranceMillis(), "heartbeat tolerance");
    } 
  }
  
  private void validateQuorumParameters(String quorumName, long value, String parameterName) {
    HazelcastProperties nodeProperties = this.nodeEngine.getProperties();
    long maxNoHeartbeatMillis = nodeProperties.getMillis(GroupProperty.MAX_NO_HEARTBEAT_SECONDS);
    long heartbeatIntervalMillis = nodeProperties.getMillis(GroupProperty.HEARTBEAT_INTERVAL_SECONDS);
    if (value > maxNoHeartbeatMillis)
      throw new ConfigurationException("This member is configured with maximum no-heartbeat duration " + maxNoHeartbeatMillis + " millis. For the quorum '" + quorumName + "' to be effective, set " + parameterName + " to a lower value. Currently configured value is " + value + ", reconfigure to a value lower than " + maxNoHeartbeatMillis + "."); 
    if (value < heartbeatIntervalMillis)
      throw new ConfigurationException("Quorum '" + quorumName + "' is misconfigured: the value of acceptable heartbeat pause (" + value + ") must be greater than the configured heartbeat interval (" + heartbeatIntervalMillis + "), otherwise quorum will be always absent."); 
  }
  
  private void initializeListeners() {
    for (Map.Entry<String, QuorumConfig> configEntry : this.nodeEngine.getConfig().getQuorumConfigs().entrySet()) {
      QuorumConfig config = (QuorumConfig)configEntry.getValue();
      String instanceName = (String)configEntry.getKey();
      for (QuorumListenerConfig listenerConfig : config.getListenerConfigs())
        initializeListenerInternal(instanceName, listenerConfig); 
    } 
  }
  
  private void initializeListenerInternal(String instanceName, QuorumListenerConfig listenerConfig) {
    QuorumListener listener = null;
    if (listenerConfig.getImplementation() != null) {
      listener = listenerConfig.getImplementation();
    } else if (listenerConfig.getClassName() != null) {
      try {
        listener = (QuorumListener)ClassLoaderUtil.newInstance(this.nodeEngine.getConfigClassLoader(), listenerConfig.getClassName());
      } catch (Exception e) {
        throw ExceptionUtil.rethrow(e);
      } 
    } 
    if (listener != null)
      addQuorumListener(instanceName, listener); 
  }
  
  private void scanQuorums() {
    for (QuorumImpl quorum : this.quorums.values()) {
      if (quorum.isHeartbeatAware())
        this.heartbeatAware = true; 
      if (quorum.isPingAware())
        this.pingAware = true; 
    } 
  }
  
  private boolean isInactive() { return this.quorums.isEmpty(); }
  
  public void addQuorumListener(String name, QuorumListener listener) { this.eventService.registerLocalListener("hz:impl:quorumService", name, listener); }
  
  public void ensureQuorumPresent(Operation op) {
    if (isInactive())
      return; 
    QuorumImpl quorum = findQuorum(op);
    if (quorum == null)
      return; 
    quorum.ensureQuorumPresent(op);
  }
  
  public void ensureQuorumPresent(String quorumName, QuorumType requiredQuorumPermissionType) {
    if (isInactive() || quorumName == null)
      return; 
    QuorumImpl definedQuorum = (QuorumImpl)this.quorums.get(quorumName);
    if (definedQuorum == null)
      return; 
    QuorumType definedQuorumType = definedQuorum.getConfig().getType();
    switch (null.$SwitchMap$com$hazelcast$quorum$QuorumType[requiredQuorumPermissionType.ordinal()]) {
      case 1:
        if (definedQuorumType.equals(QuorumType.WRITE) || definedQuorumType.equals(QuorumType.READ_WRITE))
          definedQuorum.ensureQuorumPresent(); 
        return;
      case 2:
        if (definedQuorumType.equals(QuorumType.READ) || definedQuorumType.equals(QuorumType.READ_WRITE))
          definedQuorum.ensureQuorumPresent(); 
        return;
      case 3:
        if (definedQuorumType.equals(QuorumType.READ_WRITE))
          definedQuorum.ensureQuorumPresent(); 
        return;
    } 
    throw new IllegalStateException("Unhandled quorum type: " + requiredQuorumPermissionType);
  }
  
  private QuorumImpl findQuorum(Operation op) {
    if (!isNamedOperation(op) || !isQuorumAware(op))
      return null; 
    String quorumName = getQuorumName(op);
    if (quorumName == null)
      return null; 
    return (QuorumImpl)this.quorums.get(quorumName);
  }
  
  private String getQuorumName(Operation op) {
    QuorumAwareService service;
    if (op instanceof ServiceNamespaceAware) {
      ServiceNamespace serviceNamespace = ((ServiceNamespaceAware)op).getServiceNamespace();
      service = (QuorumAwareService)this.nodeEngine.getService(serviceNamespace.getServiceName());
    } else {
      service = (QuorumAwareService)op.getService();
    } 
    String name = ((NamedOperation)op).getName();
    return service.getQuorumName(name);
  }
  
  private boolean isQuorumAware(Operation op) { return op.getService() instanceof QuorumAwareService; }
  
  private boolean isNamedOperation(Operation op) { return op instanceof NamedOperation; }
  
  public void dispatchEvent(QuorumEvent event, QuorumListener listener) { listener.onChange(event); }
  
  public void memberAdded(MembershipServiceEvent event) {
    if (isInactive() || event.getMember().localMember())
      return; 
    this.nodeEngine.getExecutionService().execute("hz:quorum", new UpdateQuorums(this, event));
  }
  
  public void memberRemoved(MembershipServiceEvent event) {
    if (isInactive())
      return; 
    this.nodeEngine.getExecutionService().execute("hz:quorum", new UpdateQuorums(this, event));
  }
  
  public void memberAttributeChanged(MemberAttributeServiceEvent event) {}
  
  public Quorum getQuorum(String quorumName) {
    Preconditions.checkNotNull(quorumName, "quorumName cannot be null!");
    Quorum quorum = (Quorum)this.quorums.get(quorumName);
    if (quorum == null)
      throw new IllegalArgumentException("No quorum configuration named [ " + quorumName + " ] is found!"); 
    return quorum;
  }
  
  public void onHeartbeat(Member member, long timestamp) {
    if (isInactive() || !this.heartbeatAware)
      return; 
    this.nodeEngine.getExecutionService().execute("hz:quorum", new OnHeartbeat(this, member, timestamp));
  }
  
  public void onPingLost(Member member) {
    if (isInactive() || !this.pingAware)
      return; 
    this.nodeEngine.getExecutionService().execute("hz:quorum", new OnPing(this, member, false));
  }
  
  public void onPingRestored(Member member) {
    if (isInactive() || !this.pingAware)
      return; 
    this.nodeEngine.getExecutionService().execute("hz:quorum", new OnPing(this, member, true));
  }
}
