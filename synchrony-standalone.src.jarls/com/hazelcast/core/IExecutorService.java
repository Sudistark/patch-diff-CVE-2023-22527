package com.hazelcast.core;

import com.hazelcast.monitor.LocalExecutorStats;
import java.util.Collection;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Future;

public interface IExecutorService extends ExecutorService, DistributedObject {
  void execute(Runnable paramRunnable, MemberSelector paramMemberSelector);
  
  void executeOnKeyOwner(Runnable paramRunnable, Object paramObject);
  
  void executeOnMember(Runnable paramRunnable, Member paramMember);
  
  void executeOnMembers(Runnable paramRunnable, Collection<Member> paramCollection);
  
  void executeOnMembers(Runnable paramRunnable, MemberSelector paramMemberSelector);
  
  void executeOnAllMembers(Runnable paramRunnable);
  
  <T> Future<T> submit(Callable<T> paramCallable, MemberSelector paramMemberSelector);
  
  <T> Future<T> submitToKeyOwner(Callable<T> paramCallable, Object paramObject);
  
  <T> Future<T> submitToMember(Callable<T> paramCallable, Member paramMember);
  
  <T> Map<Member, Future<T>> submitToMembers(Callable<T> paramCallable, Collection<Member> paramCollection);
  
  <T> Map<Member, Future<T>> submitToMembers(Callable<T> paramCallable, MemberSelector paramMemberSelector);
  
  <T> Map<Member, Future<T>> submitToAllMembers(Callable<T> paramCallable);
  
  <T> void submit(Runnable paramRunnable, ExecutionCallback<T> paramExecutionCallback);
  
  <T> void submit(Runnable paramRunnable, MemberSelector paramMemberSelector, ExecutionCallback<T> paramExecutionCallback);
  
  <T> void submitToKeyOwner(Runnable paramRunnable, Object paramObject, ExecutionCallback<T> paramExecutionCallback);
  
  <T> void submitToMember(Runnable paramRunnable, Member paramMember, ExecutionCallback<T> paramExecutionCallback);
  
  void submitToMembers(Runnable paramRunnable, Collection<Member> paramCollection, MultiExecutionCallback paramMultiExecutionCallback);
  
  void submitToMembers(Runnable paramRunnable, MemberSelector paramMemberSelector, MultiExecutionCallback paramMultiExecutionCallback);
  
  void submitToAllMembers(Runnable paramRunnable, MultiExecutionCallback paramMultiExecutionCallback);
  
  <T> void submit(Callable<T> paramCallable, ExecutionCallback<T> paramExecutionCallback);
  
  <T> void submit(Callable<T> paramCallable, MemberSelector paramMemberSelector, ExecutionCallback<T> paramExecutionCallback);
  
  <T> void submitToKeyOwner(Callable<T> paramCallable, Object paramObject, ExecutionCallback<T> paramExecutionCallback);
  
  <T> void submitToMember(Callable<T> paramCallable, Member paramMember, ExecutionCallback<T> paramExecutionCallback);
  
  <T> void submitToMembers(Callable<T> paramCallable, Collection<Member> paramCollection, MultiExecutionCallback paramMultiExecutionCallback);
  
  <T> void submitToMembers(Callable<T> paramCallable, MemberSelector paramMemberSelector, MultiExecutionCallback paramMultiExecutionCallback);
  
  <T> void submitToAllMembers(Callable<T> paramCallable, MultiExecutionCallback paramMultiExecutionCallback);
  
  LocalExecutorStats getLocalExecutorStats();
}
