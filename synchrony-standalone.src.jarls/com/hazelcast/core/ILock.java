package com.hazelcast.core;

import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;

@Deprecated
public interface ILock extends Lock, DistributedObject {
  @Deprecated
  Object getKey();
  
  void lock();
  
  boolean tryLock();
  
  boolean tryLock(long paramLong, TimeUnit paramTimeUnit) throws InterruptedException;
  
  boolean tryLock(long paramLong1, TimeUnit paramTimeUnit1, long paramLong2, TimeUnit paramTimeUnit2) throws InterruptedException;
  
  void unlock();
  
  void lock(long paramLong, TimeUnit paramTimeUnit);
  
  void forceUnlock();
  
  Condition newCondition();
  
  ICondition newCondition(String paramString);
  
  boolean isLocked();
  
  boolean isLockedByCurrentThread();
  
  int getLockCount();
  
  long getRemainingLeaseTime();
}
