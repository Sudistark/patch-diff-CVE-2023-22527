package com.hazelcast.memory;

public class DefaultMemoryStats implements MemoryStats {
  private final Runtime runtime = Runtime.getRuntime();
  
  private final DefaultGarbageCollectorStats gcStats = new DefaultGarbageCollectorStats();
  
  public final long getTotalPhysical() { return MemoryStatsSupport.totalPhysicalMemory(); }
  
  public final long getFreePhysical() { return MemoryStatsSupport.freePhysicalMemory(); }
  
  public final long getMaxHeap() { return this.runtime.maxMemory(); }
  
  public final long getCommittedHeap() { return this.runtime.totalMemory(); }
  
  public final long getUsedHeap() { return this.runtime.totalMemory() - this.runtime.freeMemory(); }
  
  public final long getFreeHeap() { return this.runtime.freeMemory(); }
  
  public long getMaxNative() { return 0L; }
  
  public long getCommittedNative() { return 0L; }
  
  public long getUsedNative() { return 0L; }
  
  public long getFreeNative() { return 0L; }
  
  public long getMaxMetadata() { return 0L; }
  
  public long getUsedMetadata() { return 0L; }
  
  public GarbageCollectorStats getGCStats() {
    GCStatsSupport.fill(this.gcStats);
    return this.gcStats;
  }
  
  public String toString() {
    return "MemoryStats{Total Physical: " + 
      MemorySize.toPrettyString(getTotalPhysical()) + ", Free Physical: " + 
      MemorySize.toPrettyString(getFreePhysical()) + ", Max Heap: " + 
      MemorySize.toPrettyString(getMaxHeap()) + ", Committed Heap: " + 
      MemorySize.toPrettyString(getCommittedHeap()) + ", Used Heap: " + 
      MemorySize.toPrettyString(getUsedHeap()) + ", Free Heap: " + 
      MemorySize.toPrettyString(getFreeHeap()) + ", " + 
      getGCStats() + '}';
  }
}
