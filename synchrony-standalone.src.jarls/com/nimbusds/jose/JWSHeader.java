package com.nimbusds.jose;

import com.nimbusds.jose.jwk.JWK;
import com.nimbusds.jose.util.Base64;
import com.nimbusds.jose.util.Base64URL;
import com.nimbusds.jose.util.JSONObjectUtils;
import com.nimbusds.jose.util.X509CertChainUtils;
import java.net.URI;
import java.text.ParseException;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import net.jcip.annotations.Immutable;
import net.minidev.json.JSONObject;

@Immutable
public final class JWSHeader extends CommonSEHeader {
  private static final long serialVersionUID = 1L;
  
  private static final Set<String> REGISTERED_PARAMETER_NAMES;
  
  private final boolean b64;
  
  static  {
    p = new HashSet();
    p.add("alg");
    p.add("jku");
    p.add("jwk");
    p.add("x5u");
    p.add("x5t");
    p.add("x5t#S256");
    p.add("x5c");
    p.add("kid");
    p.add("typ");
    p.add("cty");
    p.add("crit");
    p.add("b64");
    REGISTERED_PARAMETER_NAMES = Collections.unmodifiableSet(p);
  }
  
  public JWSHeader(JWSAlgorithm alg) { this(alg, null, null, null, null, null, null, null, null, null, null, true, null, null); }
  
  @Deprecated
  public JWSHeader(JWSAlgorithm alg, JOSEObjectType typ, String cty, Set<String> crit, URI jku, JWK jwk, URI x5u, Base64URL x5t, Base64URL x5t256, List<Base64> x5c, String kid, Map<String, Object> customParams, Base64URL parsedBase64URL) { this(alg, typ, cty, crit, jku, jwk, x5u, x5t, x5t256, x5c, kid, true, customParams, parsedBase64URL); }
  
  public JWSHeader(JWSAlgorithm alg, JOSEObjectType typ, String cty, Set<String> crit, URI jku, JWK jwk, URI x5u, Base64URL x5t, Base64URL x5t256, List<Base64> x5c, String kid, boolean b64, Map<String, Object> customParams, Base64URL parsedBase64URL) {
    super(alg, typ, cty, crit, jku, jwk, x5u, x5t, x5t256, x5c, kid, customParams, parsedBase64URL);
    if (alg.getName().equals(Algorithm.NONE.getName()))
      throw new IllegalArgumentException("The JWS algorithm \"alg\" cannot be \"none\""); 
    this.b64 = b64;
  }
  
  public JWSHeader(JWSHeader jwsHeader) {
    this(jwsHeader
        .getAlgorithm(), jwsHeader
        .getType(), jwsHeader
        .getContentType(), jwsHeader
        .getCriticalParams(), jwsHeader
        .getJWKURL(), jwsHeader
        .getJWK(), jwsHeader
        .getX509CertURL(), jwsHeader
        .getX509CertThumbprint(), jwsHeader
        .getX509CertSHA256Thumbprint(), jwsHeader
        .getX509CertChain(), jwsHeader
        .getKeyID(), jwsHeader
        .getCustomParams(), jwsHeader
        .getParsedBase64URL());
  }
  
  public static Set<String> getRegisteredParameterNames() { return REGISTERED_PARAMETER_NAMES; }
  
  public JWSAlgorithm getAlgorithm() { return (JWSAlgorithm)super.getAlgorithm(); }
  
  public boolean isBase64URLEncodePayload() { return this.b64; }
  
  public Set<String> getIncludedParams() {
    Set<String> includedParams = super.getIncludedParams();
    if (!isBase64URLEncodePayload())
      includedParams.add("b64"); 
    return includedParams;
  }
  
  public JSONObject toJSONObject() {
    JSONObject o = super.toJSONObject();
    if (!isBase64URLEncodePayload())
      o.put("b64", Boolean.valueOf(false)); 
    return o;
  }
  
  public static JWSHeader parse(JSONObject jsonObject) throws ParseException { return parse(jsonObject, null); }
  
  public static JWSHeader parse(JSONObject jsonObject, Base64URL parsedBase64URL) throws ParseException {
    Algorithm alg = Header.parseAlgorithm(jsonObject);
    if (!(alg instanceof JWSAlgorithm))
      throw new ParseException("Not a JWS header", 0); 
    Builder header = (new Builder((JWSAlgorithm)alg)).parsedBase64URL(parsedBase64URL);
    for (String name : jsonObject.keySet()) {
      if ("alg".equals(name))
        continue; 
      if ("typ".equals(name)) {
        String typValue = JSONObjectUtils.getString(jsonObject, name);
        if (typValue != null)
          header = header.type(new JOSEObjectType(typValue)); 
        continue;
      } 
      if ("cty".equals(name)) {
        header = header.contentType(JSONObjectUtils.getString(jsonObject, name));
        continue;
      } 
      if ("crit".equals(name)) {
        List<String> critValues = JSONObjectUtils.getStringList(jsonObject, name);
        if (critValues != null)
          header = header.criticalParams(new HashSet(critValues)); 
        continue;
      } 
      if ("jku".equals(name)) {
        header = header.jwkURL(JSONObjectUtils.getURI(jsonObject, name));
        continue;
      } 
      if ("jwk".equals(name)) {
        JSONObject jwkObject = JSONObjectUtils.getJSONObject(jsonObject, name);
        if (jwkObject != null)
          header = header.jwk(JWK.parse(jwkObject)); 
        continue;
      } 
      if ("x5u".equals(name)) {
        header = header.x509CertURL(JSONObjectUtils.getURI(jsonObject, name));
        continue;
      } 
      if ("x5t".equals(name)) {
        header = header.x509CertThumbprint(Base64URL.from(JSONObjectUtils.getString(jsonObject, name)));
        continue;
      } 
      if ("x5t#S256".equals(name)) {
        header = header.x509CertSHA256Thumbprint(Base64URL.from(JSONObjectUtils.getString(jsonObject, name)));
        continue;
      } 
      if ("x5c".equals(name)) {
        header = header.x509CertChain(X509CertChainUtils.toBase64List(JSONObjectUtils.getJSONArray(jsonObject, name)));
        continue;
      } 
      if ("kid".equals(name)) {
        header = header.keyID(JSONObjectUtils.getString(jsonObject, name));
        continue;
      } 
      if ("b64".equals(name)) {
        header = header.base64URLEncodePayload(JSONObjectUtils.getBoolean(jsonObject, name));
        continue;
      } 
      header = header.customParam(name, jsonObject.get(name));
    } 
    return header.build();
  }
  
  public static JWSHeader parse(String jsonString) throws ParseException { return parse(jsonString, null); }
  
  public static JWSHeader parse(String jsonString, Base64URL parsedBase64URL) throws ParseException { return parse(JSONObjectUtils.parse(jsonString, 10000), parsedBase64URL); }
  
  public static JWSHeader parse(Base64URL base64URL) throws ParseException { return parse(base64URL.decodeToString(), base64URL); }
}
