package com.nimbusds.jose.crypto;

import com.nimbusds.jose.JOSEException;
import com.nimbusds.jose.JWECryptoParts;
import com.nimbusds.jose.JWEEncrypter;
import com.nimbusds.jose.JWEHeader;
import com.nimbusds.jose.crypto.impl.ECDH;
import com.nimbusds.jose.crypto.impl.ECDHCryptoProvider;
import com.nimbusds.jose.jwk.Curve;
import com.nimbusds.jose.jwk.ECKey;
import java.security.GeneralSecurityException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.Provider;
import java.security.interfaces.ECPrivateKey;
import java.security.interfaces.ECPublicKey;
import java.security.spec.ECParameterSpec;
import java.util.Collections;
import java.util.LinkedHashSet;
import java.util.Set;
import javax.crypto.SecretKey;
import net.jcip.annotations.ThreadSafe;

@ThreadSafe
public class ECDHEncrypter extends ECDHCryptoProvider implements JWEEncrypter {
  public static final Set<Curve> SUPPORTED_ELLIPTIC_CURVES;
  
  private final ECPublicKey publicKey;
  
  private final SecretKey contentEncryptionKey;
  
  static  {
    curves = new LinkedHashSet();
    curves.add(Curve.P_256);
    curves.add(Curve.P_384);
    curves.add(Curve.P_521);
    SUPPORTED_ELLIPTIC_CURVES = Collections.unmodifiableSet(curves);
  }
  
  public ECDHEncrypter(ECPublicKey publicKey) throws JOSEException { this(publicKey, null); }
  
  public ECDHEncrypter(ECKey ecJWK) throws JOSEException {
    super(ecJWK.getCurve());
    this.publicKey = ecJWK.toECPublicKey();
    this.contentEncryptionKey = null;
  }
  
  public ECDHEncrypter(ECPublicKey publicKey, SecretKey contentEncryptionKey) throws JOSEException {
    super(Curve.forECParameterSpec(publicKey.getParams()));
    this.publicKey = publicKey;
    if (contentEncryptionKey != null) {
      if (contentEncryptionKey.getAlgorithm() == null || !contentEncryptionKey.getAlgorithm().equals("AES"))
        throw new IllegalArgumentException("The algorithm of the content encryption key (CEK) must be AES"); 
      this.contentEncryptionKey = contentEncryptionKey;
    } else {
      this.contentEncryptionKey = null;
    } 
  }
  
  public ECPublicKey getPublicKey() { return this.publicKey; }
  
  public Set<Curve> supportedEllipticCurves() { return SUPPORTED_ELLIPTIC_CURVES; }
  
  public JWECryptoParts encrypt(JWEHeader header, byte[] clearText) throws JOSEException {
    KeyPair ephemeralKeyPair = generateEphemeralKeyPair(this.publicKey.getParams());
    ECPublicKey ephemeralPublicKey = (ECPublicKey)ephemeralKeyPair.getPublic();
    ECPrivateKey ephemeralPrivateKey = (ECPrivateKey)ephemeralKeyPair.getPrivate();
    JWEHeader updatedHeader = (new JWEHeader.Builder(header)).ephemeralPublicKey((new ECKey.Builder(getCurve(), ephemeralPublicKey)).build()).build();
    SecretKey Z = ECDH.deriveSharedSecret(this.publicKey, ephemeralPrivateKey, 

        
        getJCAContext().getKeyEncryptionProvider());
    return encryptWithZ(updatedHeader, Z, clearText, this.contentEncryptionKey);
  }
  
  private KeyPair generateEphemeralKeyPair(ECParameterSpec ecParameterSpec) throws JOSEException {
    Provider keProvider = getJCAContext().getKeyEncryptionProvider();
    try {
      KeyPairGenerator generator;
      if (keProvider != null) {
        generator = KeyPairGenerator.getInstance("EC", keProvider);
      } else {
        generator = KeyPairGenerator.getInstance("EC");
      } 
      generator.initialize(ecParameterSpec);
      return generator.generateKeyPair();
    } catch (NoSuchAlgorithmException|java.security.InvalidAlgorithmParameterException e) {
      throw new JOSEException("Couldn't generate ephemeral EC key pair: " + e.getMessage(), e);
    } 
  }
}
