package com.nimbusds.jose.crypto.impl;

import com.nimbusds.jose.EncryptionMethod;
import com.nimbusds.jose.JWEAlgorithm;
import com.nimbusds.jose.KeyLengthException;
import com.nimbusds.jose.jca.JWEJCAContext;
import com.nimbusds.jose.util.ByteUtils;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;
import javax.crypto.SecretKey;

public abstract class AESCryptoProvider extends BaseJWEProvider {
  public static final Set<JWEAlgorithm> SUPPORTED_ALGORITHMS;
  
  public static final Set<EncryptionMethod> SUPPORTED_ENCRYPTION_METHODS = ContentCryptoProvider.SUPPORTED_ENCRYPTION_METHODS;
  
  public static final Map<Integer, Set<JWEAlgorithm>> COMPATIBLE_ALGORITHMS;
  
  private final SecretKey kek;
  
  static  {
    algs = new LinkedHashSet();
    algs.add(JWEAlgorithm.A128KW);
    algs.add(JWEAlgorithm.A192KW);
    algs.add(JWEAlgorithm.A256KW);
    algs.add(JWEAlgorithm.A128GCMKW);
    algs.add(JWEAlgorithm.A192GCMKW);
    algs.add(JWEAlgorithm.A256GCMKW);
    SUPPORTED_ALGORITHMS = Collections.unmodifiableSet(algs);
    Map<Integer, Set<JWEAlgorithm>> algsMap = new HashMap<Integer, Set<JWEAlgorithm>>();
    Set<JWEAlgorithm> bit128Algs = new HashSet<JWEAlgorithm>();
    Set<JWEAlgorithm> bit192Algs = new HashSet<JWEAlgorithm>();
    Set<JWEAlgorithm> bit256Algs = new HashSet<JWEAlgorithm>();
    bit128Algs.add(JWEAlgorithm.A128GCMKW);
    bit128Algs.add(JWEAlgorithm.A128KW);
    bit192Algs.add(JWEAlgorithm.A192GCMKW);
    bit192Algs.add(JWEAlgorithm.A192KW);
    bit256Algs.add(JWEAlgorithm.A256GCMKW);
    bit256Algs.add(JWEAlgorithm.A256KW);
    algsMap.put(Integer.valueOf(128), Collections.unmodifiableSet(bit128Algs));
    algsMap.put(Integer.valueOf(192), Collections.unmodifiableSet(bit192Algs));
    algsMap.put(Integer.valueOf(256), Collections.unmodifiableSet(bit256Algs));
    COMPATIBLE_ALGORITHMS = Collections.unmodifiableMap(algsMap);
  }
  
  private static Set<JWEAlgorithm> getCompatibleJWEAlgorithms(int kekLength) throws KeyLengthException {
    Set<JWEAlgorithm> algs = (Set)COMPATIBLE_ALGORITHMS.get(Integer.valueOf(kekLength));
    if (algs == null)
      throw new KeyLengthException("The Key Encryption Key length must be 128 bits (16 bytes), 192 bits (24 bytes) or 256 bits (32 bytes)"); 
    return algs;
  }
  
  protected AESCryptoProvider(SecretKey kek) throws KeyLengthException {
    super(getCompatibleJWEAlgorithms(ByteUtils.bitLength(kek.getEncoded())), ContentCryptoProvider.SUPPORTED_ENCRYPTION_METHODS);
    this.kek = kek;
  }
  
  public SecretKey getKey() { return this.kek; }
}
