package com.nimbusds.jose.crypto.impl;

import com.nimbusds.jose.JOSEException;
import com.nimbusds.jose.util.ByteUtils;
import com.nimbusds.jose.util.Container;
import com.nimbusds.jose.util.KeyUtils;
import java.security.AlgorithmParameters;
import java.security.GeneralSecurityException;
import java.security.NoSuchAlgorithmException;
import java.security.Provider;
import java.security.SecureRandom;
import java.security.spec.InvalidParameterSpecException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.SecretKey;
import javax.crypto.spec.GCMParameterSpec;
import net.jcip.annotations.ThreadSafe;

@ThreadSafe
public class AESGCM {
  public static final int IV_BIT_LENGTH = 96;
  
  public static final int AUTH_TAG_BIT_LENGTH = 128;
  
  public static byte[] generateIV(SecureRandom randomGen) {
    byte[] bytes = new byte[12];
    randomGen.nextBytes(bytes);
    return bytes;
  }
  
  public static AuthenticatedCipherText encrypt(SecretKey secretKey, Container<byte[]> ivContainer, byte[] plainText, byte[] authData, Provider provider) throws JOSEException {
    byte[] cipherOutput;
    Cipher cipher;
    SecretKey aesKey = KeyUtils.toAESKey(secretKey);
    byte[] iv = (byte[])ivContainer.get();
    try {
      if (provider != null) {
        cipher = Cipher.getInstance("AES/GCM/NoPadding", provider);
      } else {
        cipher = Cipher.getInstance("AES/GCM/NoPadding");
      } 
      cipherOutput = new GCMParameterSpec(128, iv);
      cipher.init(1, aesKey, cipherOutput);
    } catch (NoSuchAlgorithmException|javax.crypto.NoSuchPaddingException|java.security.InvalidKeyException|java.security.InvalidAlgorithmParameterException e) {
      throw new JOSEException("Couldn't create AES/GCM/NoPadding cipher: " + cipherOutput.getMessage(), cipherOutput);
    } catch (NoClassDefFoundError e) {
      return LegacyAESGCM.encrypt(aesKey, iv, plainText, authData);
    } 
    cipher.updateAAD(authData);
    try {
      cipherOutput = cipher.doFinal(plainText);
    } catch (IllegalBlockSizeException|javax.crypto.BadPaddingException e) {
      throw new JOSEException("Couldn't encrypt with AES/GCM/NoPadding: " + e.getMessage(), e);
    } 
    int tagPos = cipherOutput.length - ByteUtils.byteLength(128);
    byte[] cipherText = ByteUtils.subArray(cipherOutput, 0, tagPos);
    byte[] authTag = ByteUtils.subArray(cipherOutput, tagPos, ByteUtils.byteLength(128));
    ivContainer.set(actualIVOf(cipher));
    return new AuthenticatedCipherText(cipherText, authTag);
  }
  
  private static byte[] actualIVOf(Cipher cipher) throws JOSEException {
    GCMParameterSpec actualParams = actualParamsOf(cipher);
    byte[] iv = actualParams.getIV();
    int tLen = actualParams.getTLen();
    validate(iv, tLen);
    return iv;
  }
  
  private static void validate(byte[] iv, int authTagLength) throws JOSEException {
    if (ByteUtils.safeBitLength(iv) != 96)
      throw new JOSEException(String.format("IV length of %d bits is required, got %d", new Object[] { Integer.valueOf(96), Integer.valueOf(ByteUtils.safeBitLength(iv)) })); 
    if (authTagLength != 128)
      throw new JOSEException(String.format("Authentication tag length of %d bits is required, got %d", new Object[] { Integer.valueOf(128), Integer.valueOf(authTagLength) })); 
  }
  
  private static GCMParameterSpec actualParamsOf(Cipher cipher) throws JOSEException {
    AlgorithmParameters algorithmParameters = cipher.getParameters();
    if (algorithmParameters == null)
      throw new JOSEException("AES GCM ciphers are expected to make use of algorithm parameters"); 
    try {
      return (GCMParameterSpec)algorithmParameters.getParameterSpec(GCMParameterSpec.class);
    } catch (InvalidParameterSpecException shouldNotHappen) {
      throw new JOSEException(shouldNotHappen.getMessage(), shouldNotHappen);
    } 
  }
  
  public static byte[] decrypt(SecretKey secretKey, byte[] iv, byte[] cipherText, byte[] authData, byte[] authTag, Provider provider) throws JOSEException {
    Cipher cipher;
    SecretKey aesKey = KeyUtils.toAESKey(secretKey);
    try {
      if (provider != null) {
        cipher = Cipher.getInstance("AES/GCM/NoPadding", provider);
      } else {
        cipher = Cipher.getInstance("AES/GCM/NoPadding");
      } 
      GCMParameterSpec gcmSpec = new GCMParameterSpec(128, iv);
      cipher.init(2, aesKey, gcmSpec);
    } catch (NoSuchAlgorithmException|javax.crypto.NoSuchPaddingException|java.security.InvalidKeyException|java.security.InvalidAlgorithmParameterException e) {
      throw new JOSEException("Couldn't create AES/GCM/NoPadding cipher: " + e.getMessage(), e);
    } catch (NoClassDefFoundError e) {
      return LegacyAESGCM.decrypt(aesKey, iv, cipherText, authData, authTag);
    } 
    cipher.updateAAD(authData);
    try {
      return cipher.doFinal(ByteUtils.concat(new byte[][] { cipherText, authTag }));
    } catch (IllegalBlockSizeException|javax.crypto.BadPaddingException e) {
      throw new JOSEException("AES/GCM/NoPadding decryption failed: " + e.getMessage(), e);
    } 
  }
}
