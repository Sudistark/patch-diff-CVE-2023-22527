package com.nimbusds.jose.proc;

import com.nimbusds.jose.Algorithm;
import com.nimbusds.jose.EncryptionMethod;
import com.nimbusds.jose.JOSEObject;
import com.nimbusds.jose.JWEObject;
import com.nimbusds.jose.JWSObject;
import java.net.URI;
import java.util.Set;

public class JOSEMatcher {
  private final Set<Class<? extends JOSEObject>> classes;
  
  private final Set<Algorithm> algs;
  
  private final Set<EncryptionMethod> encs;
  
  private final Set<URI> jkus;
  
  private final Set<String> kids;
  
  public JOSEMatcher(Set<Class<? extends JOSEObject>> classes, Set<Algorithm> algs, Set<EncryptionMethod> encs, Set<URI> jkus, Set<String> kids) {
    this.classes = classes;
    this.algs = algs;
    this.encs = encs;
    this.jkus = jkus;
    this.kids = kids;
  }
  
  public Set<Class<? extends JOSEObject>> getJOSEClasses() { return this.classes; }
  
  public Set<Algorithm> getAlgorithms() { return this.algs; }
  
  public Set<EncryptionMethod> getEncryptionMethods() { return this.encs; }
  
  public Set<URI> getJWKURLs() { return this.jkus; }
  
  public Set<String> getKeyIDs() { return this.kids; }
  
  public boolean matches(JOSEObject joseObject) {
    if (this.classes != null) {
      boolean pass = false;
      for (Class<? extends JOSEObject> c : this.classes) {
        if (c != null && c.isInstance(joseObject))
          pass = true; 
      } 
      if (!pass)
        return false; 
    } 
    if (this.algs != null && !this.algs.contains(joseObject.getHeader().getAlgorithm()))
      return false; 
    if (this.encs != null) {
      if (!(joseObject instanceof JWEObject))
        return false; 
      JWEObject jweObject = (JWEObject)joseObject;
      if (!this.encs.contains(jweObject.getHeader().getEncryptionMethod()))
        return false; 
    } 
    if (this.jkus != null) {
      URI jku;
      if (joseObject instanceof JWSObject) {
        jku = ((JWSObject)joseObject).getHeader().getJWKURL();
      } else if (joseObject instanceof JWEObject) {
        jku = ((JWEObject)joseObject).getHeader().getJWKURL();
      } else {
        jku = null;
      } 
      if (!this.jkus.contains(jku))
        return false; 
    } 
    if (this.kids != null) {
      String kid;
      if (joseObject instanceof JWSObject) {
        kid = ((JWSObject)joseObject).getHeader().getKeyID();
      } else if (joseObject instanceof JWEObject) {
        kid = ((JWEObject)joseObject).getHeader().getKeyID();
      } else {
        kid = null;
      } 
      if (!this.kids.contains(kid))
        return false; 
    } 
    return true;
  }
}
