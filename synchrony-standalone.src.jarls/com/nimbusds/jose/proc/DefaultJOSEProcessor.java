package com.nimbusds.jose.proc;

import com.nimbusds.jose.JOSEException;
import com.nimbusds.jose.JOSEObject;
import com.nimbusds.jose.JWEDecrypter;
import com.nimbusds.jose.JWEObject;
import com.nimbusds.jose.JWSObject;
import com.nimbusds.jose.JWSVerifier;
import com.nimbusds.jose.Payload;
import com.nimbusds.jose.PlainObject;
import com.nimbusds.jose.crypto.factories.DefaultJWEDecrypterFactory;
import com.nimbusds.jose.crypto.factories.DefaultJWSVerifierFactory;
import java.security.Key;
import java.text.ParseException;
import java.util.List;
import java.util.ListIterator;
import net.jcip.annotations.ThreadSafe;

@ThreadSafe
public class DefaultJOSEProcessor<C extends SecurityContext> extends Object implements ConfigurableJOSEProcessor<C> {
  private JOSEObjectTypeVerifier<C> jwsTypeVerifier = DefaultJOSEObjectTypeVerifier.JOSE;
  
  private JOSEObjectTypeVerifier<C> jweTypeVerifier = DefaultJOSEObjectTypeVerifier.JOSE;
  
  private JWSKeySelector<C> jwsKeySelector;
  
  private JWEKeySelector<C> jweKeySelector;
  
  private JWSVerifierFactory jwsVerifierFactory = new DefaultJWSVerifierFactory();
  
  private JWEDecrypterFactory jweDecrypterFactory = new DefaultJWEDecrypterFactory();
  
  public JOSEObjectTypeVerifier<C> getJWSTypeVerifier() { return this.jwsTypeVerifier; }
  
  public void setJWSTypeVerifier(JOSEObjectTypeVerifier<C> jwsTypeVerifier) { this.jwsTypeVerifier = jwsTypeVerifier; }
  
  public JWSKeySelector<C> getJWSKeySelector() { return this.jwsKeySelector; }
  
  public void setJWSKeySelector(JWSKeySelector<C> jwsKeySelector) { this.jwsKeySelector = jwsKeySelector; }
  
  public JOSEObjectTypeVerifier<C> getJWETypeVerifier() { return this.jweTypeVerifier; }
  
  public void setJWETypeVerifier(JOSEObjectTypeVerifier<C> jweTypeVerifier) { this.jweTypeVerifier = jweTypeVerifier; }
  
  public JWEKeySelector<C> getJWEKeySelector() { return this.jweKeySelector; }
  
  public void setJWEKeySelector(JWEKeySelector<C> jweKeySelector) { this.jweKeySelector = jweKeySelector; }
  
  public JWSVerifierFactory getJWSVerifierFactory() { return this.jwsVerifierFactory; }
  
  public void setJWSVerifierFactory(JWSVerifierFactory factory) { this.jwsVerifierFactory = factory; }
  
  public JWEDecrypterFactory getJWEDecrypterFactory() { return this.jweDecrypterFactory; }
  
  public void setJWEDecrypterFactory(JWEDecrypterFactory factory) { this.jweDecrypterFactory = factory; }
  
  public Payload process(String compactJOSE, C context) throws ParseException, BadJOSEException, JOSEException { return process(JOSEObject.parse(compactJOSE), context); }
  
  public Payload process(JOSEObject joseObject, C context) throws BadJOSEException, JOSEException {
    if (joseObject instanceof JWSObject)
      return process((JWSObject)joseObject, context); 
    if (joseObject instanceof JWEObject)
      return process((JWEObject)joseObject, context); 
    if (joseObject instanceof PlainObject)
      return process((PlainObject)joseObject, context); 
    throw new JOSEException("Unexpected JOSE object type: " + joseObject.getClass());
  }
  
  public Payload process(PlainObject plainObject, C context) throws BadJOSEException {
    if (this.jwsTypeVerifier == null)
      throw new BadJOSEException("Unsecured (plain) JOSE object rejected: No JWS header \"typ\" (type) verifier is configured"); 
    this.jwsTypeVerifier.verify(plainObject.getHeader().getType(), context);
    throw new BadJOSEException("Unsecured (plain) JOSE objects are rejected, extend class to handle");
  }
  
  public Payload process(JWSObject jwsObject, C context) throws BadJOSEException, JOSEException {
    if (this.jwsTypeVerifier == null)
      throw new BadJOSEException("JWS object rejected: No JWS header \"typ\" (type) verifier is configured"); 
    this.jwsTypeVerifier.verify(jwsObject.getHeader().getType(), context);
    if (getJWSKeySelector() == null)
      throw new BadJOSEException("JWS object rejected: No JWS key selector is configured"); 
    if (getJWSVerifierFactory() == null)
      throw new JOSEException("No JWS verifier is configured"); 
    List<? extends Key> keyCandidates = getJWSKeySelector().selectJWSKeys(jwsObject.getHeader(), context);
    if (keyCandidates == null || keyCandidates.isEmpty())
      throw new BadJOSEException("JWS object rejected: Another algorithm expected, or no matching key(s) found"); 
    ListIterator<? extends Key> it = keyCandidates.listIterator();
    while (it.hasNext()) {
      JWSVerifier verifier = getJWSVerifierFactory().createJWSVerifier(jwsObject.getHeader(), (Key)it.next());
      if (verifier == null)
        continue; 
      boolean validSignature = jwsObject.verify(verifier);
      if (validSignature)
        return jwsObject.getPayload(); 
      if (!it.hasNext())
        throw new BadJWSException("JWS object rejected: Invalid signature"); 
    } 
    throw new BadJOSEException("JWS object rejected: No matching verifier(s) found");
  }
  
  public Payload process(JWEObject jweObject, C context) throws BadJOSEException, JOSEException {
    if (this.jweTypeVerifier == null)
      throw new BadJOSEException("JWE object rejected: No JWE header \"typ\" (type) verifier is configured"); 
    this.jweTypeVerifier.verify(jweObject.getHeader().getType(), context);
    if (getJWEKeySelector() == null)
      throw new BadJOSEException("JWE object rejected: No JWE key selector is configured"); 
    if (getJWEDecrypterFactory() == null)
      throw new JOSEException("No JWE decrypter is configured"); 
    List<? extends Key> keyCandidates = getJWEKeySelector().selectJWEKeys(jweObject.getHeader(), context);
    if (keyCandidates == null || keyCandidates.isEmpty())
      throw new BadJOSEException("JWE object rejected: Another algorithm expected, or no matching key(s) found"); 
    ListIterator<? extends Key> it = keyCandidates.listIterator();
    while (it.hasNext()) {
      JWEDecrypter decrypter = getJWEDecrypterFactory().createJWEDecrypter(jweObject.getHeader(), (Key)it.next());
      if (decrypter == null)
        continue; 
      try {
        jweObject.decrypt(decrypter);
      } catch (JOSEException e) {
        if (it.hasNext())
          continue; 
        throw new BadJWEException("JWE object rejected: " + e.getMessage(), e);
      } 
      if ("JWT".equalsIgnoreCase(jweObject.getHeader().getContentType())) {
        JWSObject nestedJWS = jweObject.getPayload().toJWSObject();
        if (nestedJWS == null)
          return jweObject.getPayload(); 
        return process(nestedJWS, context);
      } 
      return jweObject.getPayload();
    } 
    throw new BadJOSEException("JWE object rejected: No matching decrypter(s) found");
  }
}
