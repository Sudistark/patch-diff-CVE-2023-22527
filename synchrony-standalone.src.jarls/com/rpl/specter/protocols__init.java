package com.rpl.specter;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class protocols__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Object const__3;
  
  public static final Var const__4;
  
  public static final Var const__5;
  
  public static final Var const__6;
  
  public static final Keyword const__7;
  
  public static final Var const__8;
  
  public static final ISeq const__9;
  
  public static final Var const__10;
  
  public static final Var const__11;
  
  public static final AFn const__15;
  
  public static final Keyword const__16;
  
  public static final AFn const__17;
  
  public static final Keyword const__18;
  
  public static final Keyword const__19;
  
  public static final AFn const__22;
  
  public static final Keyword const__23;
  
  public static final Var const__24;
  
  public static final Var const__25;
  
  public static final Var const__26;
  
  public static final AFn const__27;
  
  public static final AFn const__28;
  
  public static final Keyword const__29;
  
  public static final AFn const__30;
  
  public static final AFn const__31;
  
  public static final Var const__32;
  
  public static final AFn const__33;
  
  public static final Object const__34;
  
  public static final Var const__35;
  
  public static final ISeq const__36;
  
  public static final AFn const__38;
  
  public static final AFn const__39;
  
  public static final AFn const__41;
  
  public static final AFn const__42;
  
  public static final AFn const__43;
  
  public static final AFn const__44;
  
  public static final Object const__45;
  
  public static final Var const__46;
  
  public static final ISeq const__47;
  
  public static final AFn const__49;
  
  public static final AFn const__50;
  
  public static final AFn const__52;
  
  public static final AFn const__53;
  
  public static final AFn const__54;
  
  public static final AFn const__55;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new protocols.fn__41987());
    new Object[2][0] = ((IFn)const__24.getRawRoot()).invoke(const__25.get(), ((IFn)const__26.getRawRoot()).invoke(const__53, ((IFn)const__11.getRawRoot()).invoke(const__54, RT.mapUniqueKeys(new Object[] { const__29, const__46 }))));
    new Object[2][1] = new protocols.fn__42053();
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "com.rpl.specter.protocols");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = RT.classForName("com.rpl.specter.protocols.RichNavigator");
    const__4 = (Var)RT.var("clojure.core", "alter-meta!");
    const__5 = (Var)RT.var("com.rpl.specter.protocols", "RichNavigator");
    const__6 = (Var)RT.var("clojure.core", "assoc");
    const__7 = (Keyword)RT.keyword(null, "doc");
    const__8 = (Var)RT.var("clojure.core", "assert-same-protocol");
    const__9 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "select*")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "An implementation of `select*` must call `next-fn` on each\n     subvalue of `structure`. The result of `select*` is specified\n     as follows:\n\n     1. `NONE` if `next-fn` never called\n     2. `NONE` if all calls to `next-fn` return `NONE`\n     3. Otherwise, any non-`NONE` return value from calling `next-fn`\n     ", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "vals"), Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })) })), ((IObj)Symbol.intern(null, "transform*")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "An implementation of `transform*` must use `next-fn` to transform\n     any subvalues of `structure` and then merge those transformed values\n     back into `structure`. Everything else in `structure` must be unchanged.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "vals"), Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })) })) }));
    const__10 = (Var)RT.var("clojure.core", "alter-var-root");
    const__11 = (Var)RT.var("clojure.core", "merge");
    const__15 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "com.rpl.specter.protocols.RichNavigator"), RT.keyword(null, "on-interface"), RT.classForName("com.rpl.specter.protocols.RichNavigator"), RT.keyword(null, "doc"), "Do not use this protocol directly. All navigators must be created using macros\n  in com.rpl.specter namespace." });
    const__16 = (Keyword)RT.keyword(null, "sigs");
    const__17 = (AFn)RT.map(new Object[] { RT.keyword(null, "select*"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "select*")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "An implementation of `select*` must call `next-fn` on each\n     subvalue of `structure`. The result of `select*` is specified\n     as follows:\n\n     1. `NONE` if `next-fn` never called\n     2. `NONE` if all calls to `next-fn` return `NONE`\n     3. Otherwise, any non-`NONE` return value from calling `next-fn`\n     ", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "vals"), Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "vals"), Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "doc"), "An implementation of `select*` must call `next-fn` on each\n     subvalue of `structure`. The result of `select*` is specified\n     as follows:\n\n     1. `NONE` if `next-fn` never called\n     2. `NONE` if all calls to `next-fn` return `NONE`\n     3. Otherwise, any non-`NONE` return value from calling `next-fn`\n     " }), RT.keyword(null, "transform*"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "transform*")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "An implementation of `transform*` must use `next-fn` to transform\n     any subvalues of `structure` and then merge those transformed values\n     back into `structure`. Everything else in `structure` must be unchanged.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "vals"), Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "vals"), Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "doc"), "An implementation of `transform*` must use `next-fn` to transform\n     any subvalues of `structure` and then merge those transformed values\n     back into `structure`. Everything else in `structure` must be unchanged." }) });
    const__18 = (Keyword)RT.keyword(null, "var");
    const__19 = (Keyword)RT.keyword(null, "method-map");
    const__22 = (AFn)RT.map(new Object[] { RT.keyword(null, "transform*"), RT.keyword(null, "transform*"), RT.keyword(null, "select*"), RT.keyword(null, "select*") });
    const__23 = (Keyword)RT.keyword(null, "method-builders");
    const__24 = (Var)RT.var("clojure.core", "intern");
    const__25 = (Var)RT.var("clojure.core", "*ns*");
    const__26 = (Var)RT.var("clojure.core", "with-meta");
    const__27 = (AFn)((IObj)Symbol.intern(null, "select*")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "An implementation of `select*` must call `next-fn` on each\n     subvalue of `structure`. The result of `select*` is specified\n     as follows:\n\n     1. `NONE` if `next-fn` never called\n     2. `NONE` if all calls to `next-fn` return `NONE`\n     3. Otherwise, any non-`NONE` return value from calling `next-fn`\n     ", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "vals"), Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })) }));
    const__28 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "select*")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "An implementation of `select*` must call `next-fn` on each\n     subvalue of `structure`. The result of `select*` is specified\n     as follows:\n\n     1. `NONE` if `next-fn` never called\n     2. `NONE` if all calls to `next-fn` return `NONE`\n     3. Otherwise, any non-`NONE` return value from calling `next-fn`\n     ", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "vals"), Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "vals"), Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "doc"), "An implementation of `select*` must call `next-fn` on each\n     subvalue of `structure`. The result of `select*` is specified\n     as follows:\n\n     1. `NONE` if `next-fn` never called\n     2. `NONE` if all calls to `next-fn` return `NONE`\n     3. Otherwise, any non-`NONE` return value from calling `next-fn`\n     " });
    const__29 = (Keyword)RT.keyword(null, "protocol");
    const__30 = (AFn)((IObj)Symbol.intern(null, "transform*")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "An implementation of `transform*` must use `next-fn` to transform\n     any subvalues of `structure` and then merge those transformed values\n     back into `structure`. Everything else in `structure` must be unchanged.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "vals"), Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })) }));
    const__31 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "transform*")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "An implementation of `transform*` must use `next-fn` to transform\n     any subvalues of `structure` and then merge those transformed values\n     back into `structure`. Everything else in `structure` must be unchanged.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "vals"), Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "vals"), Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "doc"), "An implementation of `transform*` must use `next-fn` to transform\n     any subvalues of `structure` and then merge those transformed values\n     back into `structure`. Everything else in `structure` must be unchanged." });
    const__32 = (Var)RT.var("clojure.core", "-reset-methods");
    const__33 = (AFn)Symbol.intern(null, "RichNavigator");
    const__34 = RT.classForName("com.rpl.specter.protocols.Collector");
    const__35 = (Var)RT.var("com.rpl.specter.protocols", "Collector");
    const__36 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "collect-val")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "structure")) })) })) }));
    const__38 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "com.rpl.specter.protocols.Collector"), RT.keyword(null, "on-interface"), RT.classForName("com.rpl.specter.protocols.Collector"), RT.keyword(null, "doc"), "Do not use this protocol directly. All navigators must be created using\n  macros in com.rpl.specter namespace." });
    const__39 = (AFn)RT.map(new Object[] { RT.keyword(null, "collect-val"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "collect-val")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "structure")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "structure")) })), RT.keyword(null, "doc"), null }) });
    const__41 = (AFn)RT.map(new Object[] { RT.keyword(null, "collect-val"), RT.keyword(null, "collect-val") });
    const__42 = (AFn)((IObj)Symbol.intern(null, "collect-val")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "structure")) })) }));
    const__43 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "collect-val")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "structure")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "structure")) })), RT.keyword(null, "doc"), null });
    const__44 = (AFn)Symbol.intern(null, "Collector");
    const__45 = RT.classForName("com.rpl.specter.protocols.ImplicitNav");
    const__46 = (Var)RT.var("com.rpl.specter.protocols", "ImplicitNav");
    const__47 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "implicit-nav")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "obj")) })) })) }));
    const__49 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "com.rpl.specter.protocols.ImplicitNav"), RT.keyword(null, "on-interface"), RT.classForName("com.rpl.specter.protocols.ImplicitNav") });
    const__50 = (AFn)RT.map(new Object[] { RT.keyword(null, "implicit-nav"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "implicit-nav")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "obj")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "obj")) })), RT.keyword(null, "doc"), null }) });
    const__52 = (AFn)RT.map(new Object[] { RT.keyword(null, "implicit-nav"), RT.keyword(null, "implicit-nav") });
    const__53 = (AFn)((IObj)Symbol.intern(null, "implicit-nav")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "obj")) })) }));
    const__54 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "implicit-nav")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "obj")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "obj")) })), RT.keyword(null, "doc"), null });
    const__55 = (AFn)Symbol.intern(null, "ImplicitNav");
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("com.rpl.specter.protocols__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
