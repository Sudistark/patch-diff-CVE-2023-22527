package com.rpl.specter;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class navs__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__11;
  
  public static final Var const__12;
  
  public static final AFn const__15;
  
  public static final Var const__16;
  
  public static final AFn const__19;
  
  public static final Var const__20;
  
  public static final AFn const__24;
  
  public static final Object const__25;
  
  public static final Var const__26;
  
  public static final Var const__27;
  
  public static final Var const__28;
  
  public static final Keyword const__29;
  
  public static final Var const__30;
  
  public static final ISeq const__31;
  
  public static final Var const__32;
  
  public static final Var const__33;
  
  public static final AFn const__37;
  
  public static final Keyword const__38;
  
  public static final AFn const__39;
  
  public static final Keyword const__40;
  
  public static final Keyword const__41;
  
  public static final Keyword const__42;
  
  public static final AFn const__43;
  
  public static final Keyword const__44;
  
  public static final Var const__45;
  
  public static final Var const__46;
  
  public static final Var const__47;
  
  public static final AFn const__48;
  
  public static final AFn const__49;
  
  public static final Keyword const__50;
  
  public static final Var const__51;
  
  public static final AFn const__52;
  
  public static final Var const__53;
  
  public static final AFn const__56;
  
  public static final Var const__57;
  
  public static final AFn const__61;
  
  public static final Var const__62;
  
  public static final AFn const__65;
  
  public static final Var const__66;
  
  public static final AFn const__69;
  
  public static final Var const__70;
  
  public static final AFn const__73;
  
  public static final Var const__74;
  
  public static final Object const__75;
  
  public static final Object const__76;
  
  public static final Object const__77;
  
  public static final Object const__78;
  
  public static final Object const__79;
  
  public static final Object const__80;
  
  public static final Object const__81;
  
  public static final Object const__82;
  
  public static final Object const__83;
  
  public static final Var const__84;
  
  public static final ISeq const__85;
  
  public static final AFn const__87;
  
  public static final AFn const__88;
  
  public static final Keyword const__89;
  
  public static final Keyword const__90;
  
  public static final AFn const__91;
  
  public static final AFn const__92;
  
  public static final AFn const__93;
  
  public static final AFn const__94;
  
  public static final AFn const__95;
  
  public static final AFn const__96;
  
  public static final Var const__97;
  
  public static final AFn const__100;
  
  public static final Var const__101;
  
  public static final AFn const__104;
  
  public static final Var const__105;
  
  public static final AFn const__108;
  
  public static final Var const__109;
  
  public static final AFn const__111;
  
  public static final Var const__112;
  
  public static final Var const__113;
  
  public static final AFn const__116;
  
  public static final Var const__117;
  
  public static final AFn const__120;
  
  public static final Var const__121;
  
  public static final AFn const__124;
  
  public static final Object const__125;
  
  public static final Var const__126;
  
  public static final ISeq const__127;
  
  public static final AFn const__129;
  
  public static final AFn const__130;
  
  public static final Keyword const__131;
  
  public static final Keyword const__132;
  
  public static final Keyword const__133;
  
  public static final Keyword const__134;
  
  public static final AFn const__135;
  
  public static final AFn const__136;
  
  public static final AFn const__137;
  
  public static final AFn const__138;
  
  public static final AFn const__139;
  
  public static final AFn const__140;
  
  public static final AFn const__141;
  
  public static final AFn const__142;
  
  public static final AFn const__143;
  
  public static final AFn const__144;
  
  public static final Object const__145;
  
  public static final Var const__146;
  
  public static final ISeq const__147;
  
  public static final AFn const__149;
  
  public static final AFn const__150;
  
  public static final Keyword const__151;
  
  public static final Keyword const__152;
  
  public static final AFn const__153;
  
  public static final AFn const__154;
  
  public static final AFn const__155;
  
  public static final AFn const__156;
  
  public static final AFn const__157;
  
  public static final AFn const__158;
  
  public static final Object const__159;
  
  public static final Var const__160;
  
  public static final ISeq const__161;
  
  public static final AFn const__163;
  
  public static final AFn const__164;
  
  public static final Keyword const__165;
  
  public static final Keyword const__166;
  
  public static final AFn const__167;
  
  public static final AFn const__168;
  
  public static final AFn const__169;
  
  public static final AFn const__170;
  
  public static final AFn const__171;
  
  public static final AFn const__172;
  
  public static final Object const__173;
  
  public static final Var const__174;
  
  public static final ISeq const__175;
  
  public static final AFn const__177;
  
  public static final AFn const__178;
  
  public static final Keyword const__179;
  
  public static final AFn const__180;
  
  public static final AFn const__181;
  
  public static final AFn const__182;
  
  public static final AFn const__183;
  
  public static final Var const__184;
  
  public static final AFn const__188;
  
  public static final Var const__189;
  
  public static final AFn const__191;
  
  public static final AFn const__194;
  
  public static final AFn const__197;
  
  public static final Var const__198;
  
  public static final AFn const__200;
  
  public static final Var const__201;
  
  public static final Var const__202;
  
  public static final AFn const__205;
  
  public static final Var const__206;
  
  public static final AFn const__209;
  
  public static final Var const__210;
  
  public static final AFn const__213;
  
  public static final Var const__214;
  
  public static final AFn const__217;
  
  public static final Object const__218;
  
  public static final Object const__219;
  
  public static final Var const__220;
  
  public static final AFn const__223;
  
  public static final Var const__224;
  
  public static final AFn const__226;
  
  public static final Var const__227;
  
  public static final AFn const__229;
  
  public static final Var const__230;
  
  public static final AFn const__232;
  
  public static final Var const__233;
  
  public static final AFn const__236;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new navs.fn__43081());
    const__3.setMeta((IPersistentMap)const__11);
    const__3.bindRoot(new navs.not_selected_QMARK__STAR_());
    const__12.setMeta((IPersistentMap)const__15);
    const__12.bindRoot(new navs.selected_QMARK__STAR_());
    const__16.setMeta((IPersistentMap)const__19);
    const__16.bindRoot(new navs.all_select());
    const__20.setMeta((IPersistentMap)const__24);
    const__20.bindRoot(new navs.queue_QMARK_());
    const__53.setMeta((IPersistentMap)const__56);
    const__53.bindRoot(new navs.void_transformed_kv_pair_QMARK_());
    const__57.setMeta((IPersistentMap)const__61);
    const__57.bindRoot(new navs.non_transient_map_all_transform());
    const__62.setMeta((IPersistentMap)const__65);
    const__62.bindRoot(new navs.not_NONE_QMARK_());
    const__66.setMeta((IPersistentMap)const__69);
    const__66.bindRoot(new navs.all_transform_list());
    const__70.setMeta((IPersistentMap)const__73);
    const__70.bindRoot(new navs.all_transform_record());
    const__97.setMeta((IPersistentMap)const__100);
    const__97.bindRoot(new navs.map_vals_non_transient_transform());
    const__101.setMeta((IPersistentMap)const__104);
    const__101.bindRoot(new navs.map_keys_non_transient_transform());
    const__105.setMeta((IPersistentMap)const__108);
    const__105.bindRoot(new navs.srange_select());
    const__109.setMeta((IPersistentMap)const__111);
    const__109.bindRoot(const__112.getRawRoot());
    const__113.setMeta((IPersistentMap)const__116);
    const__113.bindRoot(new navs.extract_basic_filter_fn());
    const__117.setMeta((IPersistentMap)const__120);
    const__117.bindRoot(new navs.if_select());
    const__121.setMeta((IPersistentMap)const__124);
    const__121.bindRoot(new navs.if_transform());
    const__184.setMeta((IPersistentMap)const__188);
    const__189.setMeta((IPersistentMap)const__191);
    const__184.setMeta((IPersistentMap)const__194);
    const__184.bindRoot(new navs.PosNavigator_select_STAR_());
    const__189.setMeta((IPersistentMap)const__197);
    const__189.bindRoot(new navs.PosNavigator_transform_STAR_());
    const__198.setMeta((IPersistentMap)const__200);
    const__198

      
      .bindRoot(((IFn)const__201.getRawRoot()).invoke(new navs.fn__43387()));
    const__202.setMeta((IPersistentMap)const__205);
    const__202.bindRoot(new navs.update_first_list());
    const__206.setMeta((IPersistentMap)const__209);
    const__206.bindRoot(new navs.update_last_list());
    const__210.setMeta((IPersistentMap)const__213);
    const__210.bindRoot(new navs.vec_count());
    const__214.setMeta((IPersistentMap)const__217);
    const__214.bindRoot(new navs.transient_vec_count());
    const__220.setMeta((IPersistentMap)const__223);
    const__220.bindRoot(new navs.do_keypath_transform());
    const__224.setMeta((IPersistentMap)const__226);
    const__224





















      
      .bindRoot(((IFn)const__201.getRawRoot()).invoke(new navs.fn__43441()));
    const__227.setMeta((IPersistentMap)const__229);
    const__227










      
      .bindRoot(((IFn)const__201.getRawRoot()).invoke(new navs.fn__43445()));
    const__230.setMeta((IPersistentMap)const__232);
    const__230












      
      .bindRoot(((IFn)const__201.getRawRoot()).invoke(new navs.fn__43449()));
    const__233.setMeta((IPersistentMap)const__236);
    const__233.bindRoot(new navs.invoke_end_fn());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "com.rpl.specter.navs");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("com.rpl.specter.navs", "not-selected?*");
    const__11 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "compiled-path"), Symbol.intern(null, "vals"), Symbol.intern(null, "structure")) })), RT.keyword(null, "line"), Integer.valueOf(14), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/navs.cljc" });
    const__12 = (Var)RT.var("com.rpl.specter.navs", "selected?*");
    const__15 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "compiled-path"), Symbol.intern(null, "vals"), Symbol.intern(null, "structure")) })), RT.keyword(null, "line"), Integer.valueOf(20), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/navs.cljc" });
    const__16 = (Var)RT.var("com.rpl.specter.navs", "all-select");
    const__19 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "line"), Integer.valueOf(25), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/navs.cljc" });
    const__20 = (Var)RT.var("com.rpl.specter.navs", "queue?");
    const__24 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "coll")) })), RT.keyword(null, "line"), Integer.valueOf(31), RT.keyword(null, "column"), Integer.valueOf(4), RT.keyword(null, "file"), "com/rpl/specter/navs.cljc" });
    const__25 = RT.classForName("com.rpl.specter.navs.AllTransformProtocol");
    const__26 = (Var)RT.var("clojure.core", "alter-meta!");
    const__27 = (Var)RT.var("com.rpl.specter.navs", "AllTransformProtocol");
    const__28 = (Var)RT.var("clojure.core", "assoc");
    const__29 = (Keyword)RT.keyword(null, "doc");
    const__30 = (Var)RT.var("clojure.core", "assert-same-protocol");
    const__31 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "all-transform")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })) })) }));
    const__32 = (Var)RT.var("clojure.core", "alter-var-root");
    const__33 = (Var)RT.var("clojure.core", "merge");
    const__37 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "com.rpl.specter.navs.AllTransformProtocol"), RT.keyword(null, "on-interface"), RT.classForName("com.rpl.specter.navs.AllTransformProtocol") });
    const__38 = (Keyword)RT.keyword(null, "sigs");
    const__39 = (AFn)RT.map(new Object[] { RT.keyword(null, "all-transform"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "all-transform")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "doc"), null }) });
    const__40 = (Keyword)RT.keyword(null, "var");
    const__41 = (Keyword)RT.keyword(null, "method-map");
    const__42 = (Keyword)RT.keyword(null, "all-transform");
    const__43 = (AFn)RT.map(new Object[] { RT.keyword(null, "all-transform"), RT.keyword(null, "all-transform") });
    const__44 = (Keyword)RT.keyword(null, "method-builders");
    const__45 = (Var)RT.var("clojure.core", "intern");
    const__46 = (Var)RT.var("clojure.core", "*ns*");
    const__47 = (Var)RT.var("clojure.core", "with-meta");
    const__48 = (AFn)((IObj)Symbol.intern(null, "all-transform")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })) }));
    const__49 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "all-transform")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "doc"), null });
    const__50 = (Keyword)RT.keyword(null, "protocol");
    const__51 = (Var)RT.var("clojure.core", "-reset-methods");
    const__52 = (AFn)Symbol.intern(null, "AllTransformProtocol");
    const__53 = (Var)RT.var("com.rpl.specter.navs", "void-transformed-kv-pair?");
    const__56 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "newkv")) })), RT.keyword(null, "line"), Integer.valueOf(42), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/navs.cljc" });
    const__57 = (Var)RT.var("com.rpl.specter.navs", "non-transient-map-all-transform");
    const__61 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn"), Symbol.intern(null, "empty-map")) })), RT.keyword(null, "line"), Integer.valueOf(45), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/navs.cljc" });
    const__62 = (Var)RT.var("com.rpl.specter.navs", "not-NONE?");
    const__65 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "v")) })), RT.keyword(null, "line"), Integer.valueOf(56), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/navs.cljc" });
    const__66 = (Var)RT.var("com.rpl.specter.navs", "all-transform-list");
    const__69 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "line"), Integer.valueOf(60), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/navs.cljc" });
    const__70 = (Var)RT.var("com.rpl.specter.navs", "all-transform-record");
    const__73 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "line"), Integer.valueOf(63), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/navs.cljc" });
    const__74 = (Var)RT.var("clojure.core", "extend");
    const__75 = RT.classForName("java.lang.Object");
    const__76 = RT.classForName("clojure.lang.PersistentTreeMap");
    const__77 = RT.classForName("clojure.lang.PersistentArrayMap");
    const__78 = RT.classForName("clojure.lang.PersistentHashSet");
    const__79 = RT.classForName("clojure.lang.PersistentHashMap");
    const__80 = RT.classForName("clojure.lang.IPersistentVector");
    const__81 = RT.classForName("clojure.lang.MapEntry");
    const__82 = RT.classForName("clojure.lang.IRecord");
    const__83 = RT.classForName("com.rpl.specter.navs.MapTransformProtocol");
    const__84 = (Var)RT.var("com.rpl.specter.navs", "MapTransformProtocol");
    const__85 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "map-vals-transform")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })) })), ((IObj)Symbol.intern(null, "map-keys-transform")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })) })) }));
    const__87 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "com.rpl.specter.navs.MapTransformProtocol"), RT.keyword(null, "on-interface"), RT.classForName("com.rpl.specter.navs.MapTransformProtocol") });
    const__88 = (AFn)RT.map(new Object[] { RT.keyword(null, "map-vals-transform"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "map-vals-transform")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "doc"), null }), RT.keyword(null, "map-keys-transform"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "map-keys-transform")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "doc"), null }) });
    const__89 = (Keyword)RT.keyword(null, "map-vals-transform");
    const__90 = (Keyword)RT.keyword(null, "map-keys-transform");
    const__91 = (AFn)RT.map(new Object[] { RT.keyword(null, "map-vals-transform"), RT.keyword(null, "map-vals-transform"), RT.keyword(null, "map-keys-transform"), RT.keyword(null, "map-keys-transform") });
    const__92 = (AFn)((IObj)Symbol.intern(null, "map-vals-transform")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })) }));
    const__93 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "map-vals-transform")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "doc"), null });
    const__94 = (AFn)((IObj)Symbol.intern(null, "map-keys-transform")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })) }));
    const__95 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "map-keys-transform")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "doc"), null });
    const__96 = (AFn)Symbol.intern(null, "MapTransformProtocol");
    const__97 = (Var)RT.var("com.rpl.specter.navs", "map-vals-non-transient-transform");
  }
  
  public static void __init1() {
    const__100 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "empty-map"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "line"), Integer.valueOf(229), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/navs.cljc" });
    const__101 = (Var)RT.var("com.rpl.specter.navs", "map-keys-non-transient-transform");
    const__104 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "empty-map"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "line"), Integer.valueOf(239), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/navs.cljc" });
    const__105 = (Var)RT.var("com.rpl.specter.navs", "srange-select");
    const__108 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "start"), Symbol.intern(null, "end"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "line"), Integer.valueOf(375), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/navs.cljc" });
    const__109 = (Var)RT.var("com.rpl.specter.navs", "srange-transform");
    const__111 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(382), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/navs.cljc" });
    const__112 = (Var)RT.var("com.rpl.specter.impl", "srange-transform*");
    const__113 = (Var)RT.var("com.rpl.specter.navs", "extract-basic-filter-fn");
    const__116 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "path")) })), RT.keyword(null, "line"), Integer.valueOf(385), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/navs.cljc" });
    const__117 = (Var)RT.var("com.rpl.specter.navs", "if-select");
    const__120 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "vals"), Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn"), Symbol.intern(null, "then-tester"), Symbol.intern(null, "then-nav"), Symbol.intern(null, "else-nav")) })), RT.keyword(null, "line"), Integer.valueOf(401), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/navs.cljc" });
    const__121 = (Var)RT.var("com.rpl.specter.navs", "if-transform");
    const__124 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "vals"), Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn"), Symbol.intern(null, "then-tester"), Symbol.intern(null, "then-nav"), Symbol.intern(null, "else-nav")) })), RT.keyword(null, "line"), Integer.valueOf(410), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/navs.cljc" });
    const__125 = RT.classForName("com.rpl.specter.navs.AddExtremes");
    const__126 = (Var)RT.var("com.rpl.specter.navs", "AddExtremes");
    const__127 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "append-all")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "elements")) })) })), ((IObj)Symbol.intern(null, "prepend-all")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "elements")) })) })), ((IObj)Symbol.intern(null, "append-one")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "elem")) })) })), ((IObj)Symbol.intern(null, "prepend-one")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "elem")) })) })) }));
    const__129 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "com.rpl.specter.navs.AddExtremes"), RT.keyword(null, "on-interface"), RT.classForName("com.rpl.specter.navs.AddExtremes") });
    const__130 = (AFn)RT.map(new Object[] { RT.keyword(null, "append-all"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "append-all")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "elements")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "elements")) })), RT.keyword(null, "doc"), null }), RT.keyword(null, "prepend-all"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "prepend-all")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "elements")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "elements")) })), RT.keyword(null, "doc"), null }), RT.keyword(null, "append-one"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "append-one")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "elem")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "elem")) })), RT.keyword(null, "doc"), null }), RT.keyword(null, "prepend-one"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "prepend-one")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "elem")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "elem")) })), RT.keyword(null, "doc"), null }) });
    const__131 = (Keyword)RT.keyword(null, "prepend-one");
    const__132 = (Keyword)RT.keyword(null, "append-all");
    const__133 = (Keyword)RT.keyword(null, "append-one");
    const__134 = (Keyword)RT.keyword(null, "prepend-all");
    const__135 = (AFn)RT.map(new Object[] { RT.keyword(null, "prepend-one"), RT.keyword(null, "prepend-one"), RT.keyword(null, "append-all"), RT.keyword(null, "append-all"), RT.keyword(null, "append-one"), RT.keyword(null, "append-one"), RT.keyword(null, "prepend-all"), RT.keyword(null, "prepend-all") });
    const__136 = (AFn)((IObj)Symbol.intern(null, "append-all")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "elements")) })) }));
    const__137 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "append-all")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "elements")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "elements")) })), RT.keyword(null, "doc"), null });
    const__138 = (AFn)((IObj)Symbol.intern(null, "prepend-all")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "elements")) })) }));
    const__139 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "prepend-all")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "elements")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "elements")) })), RT.keyword(null, "doc"), null });
    const__140 = (AFn)((IObj)Symbol.intern(null, "prepend-one")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "elem")) })) }));
    const__141 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "prepend-one")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "elem")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "elem")) })), RT.keyword(null, "doc"), null });
    const__142 = (AFn)((IObj)Symbol.intern(null, "append-one")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "elem")) })) }));
    const__143 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "append-one")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "elem")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "elem")) })), RT.keyword(null, "doc"), null });
    const__144 = (AFn)Symbol.intern(null, "AddExtremes");
    const__145 = RT.classForName("com.rpl.specter.navs.UpdateExtremes");
    const__146 = (Var)RT.var("com.rpl.specter.navs", "UpdateExtremes");
    const__147 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "update-first")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s"), Symbol.intern(null, "afn")) })) })), ((IObj)Symbol.intern(null, "update-last")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s"), Symbol.intern(null, "afn")) })) })) }));
    const__149 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "com.rpl.specter.navs.UpdateExtremes"), RT.keyword(null, "on-interface"), RT.classForName("com.rpl.specter.navs.UpdateExtremes") });
    const__150 = (AFn)RT.map(new Object[] { RT.keyword(null, "update-first"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "update-first")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s"), Symbol.intern(null, "afn")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s"), Symbol.intern(null, "afn")) })), RT.keyword(null, "doc"), null }), RT.keyword(null, "update-last"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "update-last")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s"), Symbol.intern(null, "afn")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s"), Symbol.intern(null, "afn")) })), RT.keyword(null, "doc"), null }) });
    const__151 = (Keyword)RT.keyword(null, "update-last");
    const__152 = (Keyword)RT.keyword(null, "update-first");
    const__153 = (AFn)RT.map(new Object[] { RT.keyword(null, "update-last"), RT.keyword(null, "update-last"), RT.keyword(null, "update-first"), RT.keyword(null, "update-first") });
    const__154 = (AFn)((IObj)Symbol.intern(null, "update-first")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s"), Symbol.intern(null, "afn")) })) }));
    const__155 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "update-first")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s"), Symbol.intern(null, "afn")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s"), Symbol.intern(null, "afn")) })), RT.keyword(null, "doc"), null });
    const__156 = (AFn)((IObj)Symbol.intern(null, "update-last")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s"), Symbol.intern(null, "afn")) })) }));
    const__157 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "update-last")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s"), Symbol.intern(null, "afn")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s"), Symbol.intern(null, "afn")) })), RT.keyword(null, "doc"), null });
    const__158 = (AFn)Symbol.intern(null, "UpdateExtremes");
    const__159 = RT.classForName("com.rpl.specter.navs.GetExtremes");
    const__160 = (Var)RT.var("com.rpl.specter.navs", "GetExtremes");
    const__161 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "get-first")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })) })), ((IObj)Symbol.intern(null, "get-last")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })) })) }));
    const__163 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "com.rpl.specter.navs.GetExtremes"), RT.keyword(null, "on-interface"), RT.classForName("com.rpl.specter.navs.GetExtremes") });
    const__164 = (AFn)RT.map(new Object[] { RT.keyword(null, "get-first"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "get-first")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })), RT.keyword(null, "doc"), null }), RT.keyword(null, "get-last"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "get-last")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })), RT.keyword(null, "doc"), null }) });
    const__165 = (Keyword)RT.keyword(null, "get-first");
    const__166 = (Keyword)RT.keyword(null, "get-last");
    const__167 = (AFn)RT.map(new Object[] { RT.keyword(null, "get-first"), RT.keyword(null, "get-first"), RT.keyword(null, "get-last"), RT.keyword(null, "get-last") });
    const__168 = (AFn)((IObj)Symbol.intern(null, "get-last")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })) }));
    const__169 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "get-last")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })), RT.keyword(null, "doc"), null });
    const__170 = (AFn)((IObj)Symbol.intern(null, "get-first")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })) }));
    const__171 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "get-first")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })), RT.keyword(null, "doc"), null });
    const__172 = (AFn)Symbol.intern(null, "GetExtremes");
    const__173 = RT.classForName("com.rpl.specter.navs.FastEmpty");
    const__174 = (Var)RT.var("com.rpl.specter.navs", "FastEmpty");
    const__175 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "fast-empty?")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })) })) }));
    const__177 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "com.rpl.specter.navs.FastEmpty"), RT.keyword(null, "on-interface"), RT.classForName("com.rpl.specter.navs.FastEmpty") });
    const__178 = (AFn)RT.map(new Object[] { RT.keyword(null, "fast-empty?"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "fast-empty?")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })), RT.keyword(null, "doc"), null }) });
    const__179 = (Keyword)RT.keyword(null, "fast-empty?");
    const__180 = (AFn)RT.map(new Object[] { RT.keyword(null, "fast-empty?"), RT.keyword(null, "fast-empty?") });
    const__181 = (AFn)((IObj)Symbol.intern(null, "fast-empty?")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })) }));
    const__182 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "fast-empty?")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })), RT.keyword(null, "doc"), null });
    const__183 = (AFn)Symbol.intern(null, "FastEmpty");
    const__184 = (Var)RT.var("com.rpl.specter.navs", "PosNavigator-select*");
    const__188 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(477), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/navs.cljc" });
    const__189 = (Var)RT.var("com.rpl.specter.navs", "PosNavigator-transform*");
    const__191 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(477), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/navs.cljc" });
    const__194 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "getter"), Symbol.intern(null, "updater"), Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "line"), Integer.valueOf(477), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/navs.cljc" });
    const__197 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "getter"), Symbol.intern(null, "updater"), Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "line"), Integer.valueOf(477), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/navs.cljc" });
    const__198 = (Var)RT.var("com.rpl.specter.navs", "PosNavigator");
  }
  
  public static void __init2() {
    const__200 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(477), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/navs.cljc" });
    const__201 = (Var)RT.var("com.rpl.specter.impl", "direct-nav-obj");
    const__202 = (Var)RT.var("com.rpl.specter.navs", "update-first-list");
    const__205 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "l"), Symbol.intern(null, "afn")) })), RT.keyword(null, "line"), Integer.valueOf(488), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/navs.cljc" });
    const__206 = (Var)RT.var("com.rpl.specter.navs", "update-last-list");
    const__209 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "l"), Symbol.intern(null, "afn")) })), RT.keyword(null, "line"), Integer.valueOf(495), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/navs.cljc" });
    const__210 = (Var)RT.var("com.rpl.specter.navs", "vec-count");
    const__213 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "v")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "clojure.lang.IPersistentVector") }))) })), RT.keyword(null, "line"), Integer.valueOf(504), RT.keyword(null, "column"), Integer.valueOf(4), RT.keyword(null, "file"), "com/rpl/specter/navs.cljc" });
    const__214 = (Var)RT.var("com.rpl.specter.navs", "transient-vec-count");
    const__217 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "v")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "clojure.lang.ITransientVector") }))) })), RT.keyword(null, "line"), Integer.valueOf(514), RT.keyword(null, "column"), Integer.valueOf(4), RT.keyword(null, "file"), "com/rpl/specter/navs.cljc" });
    const__218 = RT.classForName("java.lang.String");
    const__219 = RT.classForName("clojure.lang.ITransientVector");
    const__220 = (Var)RT.var("com.rpl.specter.navs", "do-keypath-transform");
    const__223 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "vals"), Symbol.intern(null, "structure"), Symbol.intern(null, "key"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "line"), Integer.valueOf(629), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/navs.cljc" });
    const__224 = (Var)RT.var("com.rpl.specter.navs", "keypath*");
    const__226 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Navigates to the specified key, navigating to nil if it does not exist.\n          Setting the value to NONE will remove it from the collection.", RT.keyword(null, "line"), Integer.valueOf(637), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/navs.cljc" });
    const__227 = (Var)RT.var("com.rpl.specter.navs", "must*");
    const__229 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Navigates to the key only if it exists in the map. Setting the value to NONE\n          will remove it from the collection.", RT.keyword(null, "line"), Integer.valueOf(649), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/navs.cljc" });
    const__230 = (Var)RT.var("com.rpl.specter.navs", "nthpath*");
    const__232 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(663), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/navs.cljc" });
    const__233 = (Var)RT.var("com.rpl.specter.navs", "invoke-end-fn");
    const__236 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "end-fn"), Symbol.intern(null, "structure"), Symbol.intern(null, "start")) })), RT.keyword(null, "line"), Integer.valueOf(689), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/navs.cljc" });
  }
  
  static  {
    __init0();
    __init1();
    __init2();
    Compiler.pushNSandLoader(RT.classForName("com.rpl.specter.navs__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
