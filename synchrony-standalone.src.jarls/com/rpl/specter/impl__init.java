package com.rpl.specter;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class impl__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__9;
  
  public static final Keyword const__10;
  
  public static final Var const__11;
  
  public static final AFn const__15;
  
  public static final Var const__16;
  
  public static final AFn const__20;
  
  public static final Var const__21;
  
  public static final AFn const__26;
  
  public static final Var const__27;
  
  public static final AFn const__30;
  
  public static final Var const__31;
  
  public static final AFn const__35;
  
  public static final Var const__36;
  
  public static final AFn const__39;
  
  public static final Var const__40;
  
  public static final AFn const__43;
  
  public static final Var const__44;
  
  public static final AFn const__47;
  
  public static final Var const__48;
  
  public static final AFn const__51;
  
  public static final Var const__52;
  
  public static final AFn const__55;
  
  public static final Var const__56;
  
  public static final AFn const__59;
  
  public static final Var const__60;
  
  public static final AFn const__63;
  
  public static final Var const__64;
  
  public static final AFn const__67;
  
  public static final Object const__68;
  
  public static final Var const__69;
  
  public static final Var const__70;
  
  public static final Var const__71;
  
  public static final Keyword const__72;
  
  public static final Var const__73;
  
  public static final ISeq const__74;
  
  public static final Var const__75;
  
  public static final Var const__76;
  
  public static final AFn const__80;
  
  public static final Keyword const__81;
  
  public static final AFn const__82;
  
  public static final Keyword const__83;
  
  public static final Keyword const__84;
  
  public static final Keyword const__85;
  
  public static final AFn const__86;
  
  public static final Keyword const__87;
  
  public static final Var const__88;
  
  public static final Var const__89;
  
  public static final Var const__90;
  
  public static final AFn const__91;
  
  public static final AFn const__92;
  
  public static final Keyword const__93;
  
  public static final Var const__94;
  
  public static final AFn const__95;
  
  public static final Var const__96;
  
  public static final AFn const__99;
  
  public static final Var const__100;
  
  public static final AFn const__103;
  
  public static final Var const__104;
  
  public static final AFn const__107;
  
  public static final Object const__108;
  
  public static final Var const__109;
  
  public static final ISeq const__110;
  
  public static final AFn const__112;
  
  public static final AFn const__113;
  
  public static final Keyword const__114;
  
  public static final AFn const__115;
  
  public static final AFn const__116;
  
  public static final AFn const__117;
  
  public static final AFn const__118;
  
  public static final Var const__119;
  
  public static final Object const__120;
  
  public static final Object const__121;
  
  public static final Var const__122;
  
  public static final AFn const__124;
  
  public static final AFn const__127;
  
  public static final Var const__128;
  
  public static final AFn const__131;
  
  public static final Var const__132;
  
  public static final AFn const__135;
  
  public static final Var const__136;
  
  public static final AFn const__139;
  
  public static final Var const__140;
  
  public static final AFn const__143;
  
  public static final Var const__144;
  
  public static final AFn const__147;
  
  public static final Var const__148;
  
  public static final AFn const__151;
  
  public static final Var const__152;
  
  public static final AFn const__155;
  
  public static final Var const__156;
  
  public static final AFn const__159;
  
  public static final Var const__160;
  
  public static final AFn const__163;
  
  public static final Var const__164;
  
  public static final AFn const__167;
  
  public static final Var const__168;
  
  public static final AFn const__171;
  
  public static final Var const__172;
  
  public static final AFn const__175;
  
  public static final Var const__176;
  
  public static final AFn const__179;
  
  public static final Var const__180;
  
  public static final AFn const__183;
  
  public static final Var const__184;
  
  public static final AFn const__187;
  
  public static final Var const__188;
  
  public static final AFn const__191;
  
  public static final Var const__192;
  
  public static final AFn const__195;
  
  public static final Var const__196;
  
  public static final AFn const__199;
  
  public static final Var const__200;
  
  public static final AFn const__203;
  
  public static final Var const__204;
  
  public static final AFn const__207;
  
  public static final Var const__208;
  
  public static final AFn const__211;
  
  public static final Var const__212;
  
  public static final AFn const__215;
  
  public static final Var const__216;
  
  public static final AFn const__219;
  
  public static final Var const__220;
  
  public static final AFn const__223;
  
  public static final Var const__224;
  
  public static final AFn const__227;
  
  public static final Var const__228;
  
  public static final AFn const__231;
  
  public static final Var const__232;
  
  public static final AFn const__235;
  
  public static final Var const__236;
  
  public static final AFn const__239;
  
  public static final Var const__240;
  
  public static final AFn const__244;
  
  public static final Var const__245;
  
  public static final AFn const__248;
  
  public static final Var const__249;
  
  public static final AFn const__252;
  
  public static final Var const__253;
  
  public static final AFn const__256;
  
  public static final Var const__257;
  
  public static final AFn const__260;
  
  public static final Var const__261;
  
  public static final AFn const__264;
  
  public static final Var const__265;
  
  public static final AFn const__268;
  
  public static final Var const__269;
  
  public static final AFn const__272;
  
  public static final Var const__273;
  
  public static final AFn const__276;
  
  public static final Var const__277;
  
  public static final AFn const__280;
  
  public static final Var const__281;
  
  public static final AFn const__284;
  
  public static final Var const__285;
  
  public static final AFn const__288;
  
  public static final Var const__289;
  
  public static final AFn const__292;
  
  public static final Var const__293;
  
  public static final AFn const__296;
  
  public static final Var const__297;
  
  public static final AFn const__301;
  
  public static final Var const__302;
  
  public static final AFn const__305;
  
  public static final Var const__306;
  
  public static final AFn const__309;
  
  public static final Var const__310;
  
  public static final AFn const__313;
  
  public static final Var const__314;
  
  public static final AFn const__317;
  
  public static final Var const__318;
  
  public static final AFn const__321;
  
  public static final Var const__322;
  
  public static final AFn const__325;
  
  public static final Var const__326;
  
  public static final AFn const__329;
  
  public static final Var const__330;
  
  public static final AFn const__333;
  
  public static final Var const__334;
  
  public static final AFn const__337;
  
  public static final Var const__338;
  
  public static final AFn const__341;
  
  public static final Var const__342;
  
  public static final AFn const__345;
  
  public static final Var const__346;
  
  public static final AFn const__349;
  
  public static final Var const__350;
  
  public static final AFn const__353;
  
  public static final Var const__354;
  
  public static final AFn const__357;
  
  public static final Var const__358;
  
  public static final AFn const__361;
  
  public static final Var const__362;
  
  public static final AFn const__365;
  
  public static final Var const__366;
  
  public static final AFn const__369;
  
  public static final Var const__370;
  
  public static final AFn const__373;
  
  public static final Var const__374;
  
  public static final AFn const__377;
  
  public static final AFn const__380;
  
  public static final Var const__381;
  
  public static final AFn const__384;
  
  public static final Var const__385;
  
  public static final AFn const__387;
  
  public static final Var const__388;
  
  public static final AFn const__391;
  
  public static final Var const__392;
  
  public static final AFn const__395;
  
  public static final Var const__396;
  
  public static final AFn const__399;
  
  public static final Var const__400;
  
  public static final AFn const__403;
  
  public static final Var const__404;
  
  public static final AFn const__407;
  
  public static final Var const__408;
  
  public static final AFn const__411;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new impl.fn__42192());
    const__3.setMeta((IPersistentMap)const__9);
    const__3.bindRoot(const__10);
    const__11.setMeta((IPersistentMap)const__15);
    const__11.bindRoot(new impl.spy());
    const__16.setMeta((IPersistentMap)const__20);
    const__16.bindRoot(new impl.smart_str_STAR_());
    const__21.setMeta((IPersistentMap)const__26);
    const__21.bindRoot(new impl.smart_str());
    const__27.setMeta((IPersistentMap)const__30);
    const__27.bindRoot(new impl.fast_constantly());
    const__31.setMeta((IPersistentMap)const__35);
    const__31.bindRoot(new impl.throw_STAR_());
    ((Var)const__31)


















































      
      .setMacro();
    const__36.setMeta((IPersistentMap)const__39);
    const__36.bindRoot(new impl.throw_illegal());
    ((Var)const__36)



      
      .setMacro();
    const__40.setMeta((IPersistentMap)const__43);
    const__40.bindRoot(new impl.cljs_analyzer_macroexpand_1());
    const__44.setMeta((IPersistentMap)const__47);
    const__44.bindRoot(new impl.clj_macroexpand_all());
    const__48.setMeta((IPersistentMap)const__51);
    const__48.bindRoot(new impl.intern_STAR_());
    const__52.setMeta((IPersistentMap)const__55);
    const__52.bindRoot(new impl.fast_object_array());
    ((Var)const__52)









































      
      .setMacro();
    const__56.setMeta((IPersistentMap)const__59);
    const__56.bindRoot(new impl.benchmark());
    const__60.setMeta((IPersistentMap)const__63);
    const__60.bindRoot(new impl.exec_select_STAR_());
    ((Var)const__60)









      
      .setMacro();
    const__64.setMeta((IPersistentMap)const__67);
    const__64.bindRoot(new impl.exec_transform_STAR_());
    ((Var)const__64)












      
      .setMacro();
    const__96.setMeta((IPersistentMap)const__99);
    const__96.bindRoot(new impl.rich_nav_QMARK_());
    const__100.setMeta((IPersistentMap)const__103);
    const__100.bindRoot(new impl.comp_paths_STAR_());
    const__104.setMeta((IPersistentMap)const__107);
    const__104.bindRoot(new impl.coerce_object());
    const__122.setMeta((IPersistentMap)const__124);
    const__122.bindRoot(((IObj)new impl.reify__42255(null)).withMeta((IPersistentMap)const__127));
    const__128.setMeta((IPersistentMap)const__131);
    const__128.bindRoot(new impl.combine_two_navs());
    const__132.setMeta((IPersistentMap)const__135);
    const__132.bindRoot(new impl.mutable_cell());
    const__136.setMeta((IPersistentMap)const__139);
    const__136.bindRoot(new impl.set_cell_BANG_());
    const__140.setMeta((IPersistentMap)const__143);
    const__140.bindRoot(new impl.get_cell());
    const__144.setMeta((IPersistentMap)const__147);
    const__144.bindRoot(new impl.update_cell_BANG_());
    const__148.setMeta((IPersistentMap)const__151);
    const__148.bindRoot(new impl.compiled_traverse_with_vals_STAR_());
    ((Var)const__148)







































































      
      .setMacro();
    const__152.setMeta((IPersistentMap)const__155);
    const__152.bindRoot(new impl.compiled_traverse_STAR_());
    const__156.setMeta((IPersistentMap)const__159);
    const__156.bindRoot(new impl.do_compiled_traverse_STAR_());
    const__160.setMeta((IPersistentMap)const__163);
    const__160.bindRoot(new impl.call_reduce_interface());
    const__164.setMeta((IPersistentMap)const__167);
    const__164.bindRoot(new impl.do_compiled_traverse());
    const__168.setMeta((IPersistentMap)const__171);
    const__168.bindRoot(new impl.compiled_traverse_all_STAR_());
    const__172.setMeta((IPersistentMap)const__175);
    const__172.bindRoot(new impl.compiled_select_STAR_());
    const__176.setMeta((IPersistentMap)const__179);
    const__176.bindRoot(new impl.compiled_select_one_STAR_());
    const__180.setMeta((IPersistentMap)const__183);
    const__180.bindRoot(new impl.compiled_select_one_BANG__STAR_());
    const__184.setMeta((IPersistentMap)const__187);
    const__184.bindRoot(new impl.compiled_select_any_STAR_());
    const__188.setMeta((IPersistentMap)const__191);
    const__188.bindRoot(new impl.compiled_select_first_STAR_());
    const__192.setMeta((IPersistentMap)const__195);
    const__192.bindRoot(new impl.compiled_selected_any_QMARK__STAR_());
    const__196.setMeta((IPersistentMap)const__199);
    const__196.bindRoot(new impl.terminal_STAR_());
    const__200.setMeta((IPersistentMap)const__203);
    const__200.bindRoot(new impl.compiled_transform_STAR_());
    const__204.setMeta((IPersistentMap)const__207);
    const__204.bindRoot(new impl.compiled_vtransform_STAR_());
    const__208.setMeta((IPersistentMap)const__211);
    const__208.bindRoot(new impl.fn_invocation_QMARK_());
    const__212.setMeta((IPersistentMap)const__215);
    const__212.bindRoot(new impl.dynamic_param_QMARK_());
    const__216.setMeta((IPersistentMap)const__219);
    const__216.bindRoot(new impl.static_path_QMARK_());
    const__220.setMeta((IPersistentMap)const__223);
    const__220.bindRoot(new impl.late_path());
    const__224.setMeta((IPersistentMap)const__227);
    const__224.bindRoot(new impl.cached_path_info_precompiled());
    const__228.setMeta((IPersistentMap)const__231);
    const__228.bindRoot(new impl.cached_path_info_dynamic_QMARK_());
    const__232.setMeta((IPersistentMap)const__235);
    const__232.bindRoot(new impl.filter_select());
    const__236.setMeta((IPersistentMap)const__239);
    const__236.bindRoot(new impl.filter_transform());
    const__240.setMeta((IPersistentMap)const__244);
    const__240.bindRoot(new impl.pred_STAR_());
    const__245.setMeta((IPersistentMap)const__248);
    const__245.bindRoot(new impl.collected_QMARK__STAR_());
    const__249.setMeta((IPersistentMap)const__252);
    const__249.bindRoot(new impl.cell_nav());
    const__253.setMeta((IPersistentMap)const__256);
    const__253.bindRoot(new impl.local_declarepath());
    const__257.setMeta((IPersistentMap)const__260);
    const__257.bindRoot(new impl.providepath_STAR_());
    const__261.setMeta((IPersistentMap)const__264);
    const__261.bindRoot(new impl.gensyms());
    const__265.setMeta((IPersistentMap)const__268);
    const__265.bindRoot(new impl.comp_navs());
    const__269.setMeta((IPersistentMap)const__272);
    const__269.bindRoot(new impl.srange_transform_STAR_());
    const__273.setMeta((IPersistentMap)const__276);
    const__273.bindRoot(new impl.matching_indices());
    const__277.setMeta((IPersistentMap)const__280);
    const__277.bindRoot(new impl.matching_ranges());
    const__281.setMeta((IPersistentMap)const__284);
    const__281.bindRoot(new impl.continuous_subseqs_transform_STAR_());
    const__285.setMeta((IPersistentMap)const__288);
    const__285.bindRoot(new impl.codewalk_until());
    const__289.setMeta((IPersistentMap)const__292);
    const__289.bindRoot(new impl.walk_select());
    const__293.setMeta((IPersistentMap)const__296);
    const__293.bindRoot(new impl.walk_until());
    const__297.setDynamic(true).setMeta((IPersistentMap)const__301);
    const__302.setMeta((IPersistentMap)const__305);
    const__302.bindRoot(new impl.closed_code());
    const__306.setMeta((IPersistentMap)const__309);
    const__306.bindRoot(new impl.coerce_nav());
    const__310.setMeta((IPersistentMap)const__313);
    const__310.bindRoot(new impl.dynamic_var_QMARK_());
    const__314.setMeta((IPersistentMap)const__317);
    const__314.bindRoot(new impl.direct_nav_obj());
    const__318.setMeta((IPersistentMap)const__321);
    const__318.bindRoot(new impl.maybe_direct_nav());
    const__322.setMeta((IPersistentMap)const__325);
    const__322.bindRoot(new impl.original_obj());
    const__326.setMeta((IPersistentMap)const__329);
    const__326.bindRoot(new impl.direct_nav_QMARK_());
    const__330.setMeta((IPersistentMap)const__333);
    const__330.bindRoot(new impl.all_static_QMARK_());
    const__334.setMeta((IPersistentMap)const__337);
    const__334.bindRoot(new impl.late_resolved_fn());
    const__338.setMeta((IPersistentMap)const__341);
    const__338.bindRoot(new impl.preserve_map());
    const__342.setMeta((IPersistentMap)const__345);
    const__342.bindRoot(new impl.magic_precompilation_STAR_());
    const__346.setMeta((IPersistentMap)const__349);
    const__346.bindRoot(new impl.static_combine());
    const__350.setMeta((IPersistentMap)const__353);
    const__350.bindRoot(new impl.static_fn_code());
    const__354.setMeta((IPersistentMap)const__357);
    const__354.bindRoot(new impl.dynamic_fn_code());
    const__358.setMeta((IPersistentMap)const__361);
    const__358.bindRoot(new impl.dynamic_val_code());
    const__362.setMeta((IPersistentMap)const__365);
    const__362.bindRoot(new impl.static_val_code());
    const__366.setMeta((IPersistentMap)const__369);
    const__370.setMeta((IPersistentMap)const__373);
    const__370.bindRoot(new impl.dynamic__GT_code());
    const__374.setMeta((IPersistentMap)const__377);
    const__374.bindRoot(new impl.resolve_arg_code());
    const__366.setMeta((IPersistentMap)const__380);
    const__366.bindRoot(new impl.resolve_nav_code());
    const__381.setMeta((IPersistentMap)const__384);
    const__381.bindRoot(new impl.used_locals());
    const__385.setDynamic(true).setMeta((IPersistentMap)const__387);
    const__385.setDynamic(true).bindRoot(Boolean.FALSE);
    const__388.setMeta((IPersistentMap)const__391);
    const__388.bindRoot(new impl.mk_dynamic_path_maker());
    const__392.setMeta((IPersistentMap)const__395);
    const__392.bindRoot(new impl.magic_precompilation());
    const__396.setMeta((IPersistentMap)const__399);
    const__396.bindRoot(new impl.compiled_setval_STAR_());
    const__400.setMeta((IPersistentMap)const__403);
    const__400.bindRoot(new impl.compiled_replace_in_STAR_());
    const__404.setMeta((IPersistentMap)const__407);
    const__404.bindRoot(new impl.multi_transform_error_fn());
    const__408.setMeta((IPersistentMap)const__411);
    const__408.bindRoot(new impl.compiled_multi_transform_STAR_());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "com.rpl.specter.impl");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("com.rpl.specter.impl", "NONE");
    const__9 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(22), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__10 = (Keyword)RT.keyword("com.rpl.specter.impl", "NONE");
    const__11 = (Var)RT.var("com.rpl.specter.impl", "spy");
    const__15 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "e")) })), RT.keyword(null, "line"), Integer.valueOf(24), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__16 = (Var)RT.var("com.rpl.specter.impl", "smart-str*");
    const__20 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "o")) })), RT.keyword(null, "line"), Integer.valueOf(29), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__21 = (Var)RT.var("com.rpl.specter.impl", "smart-str");
    const__26 = (AFn)RT.map(new Object[] { RT.keyword(null, "tag"), RT.classForName("java.lang.String"), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "elems")) })), RT.keyword(null, "line"), Integer.valueOf(34), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__27 = (Var)RT.var("com.rpl.specter.impl", "fast-constantly");
    const__30 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "v")) })), RT.keyword(null, "line"), Integer.valueOf(37), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__31 = (Var)RT.var("com.rpl.specter.impl", "throw*");
    const__35 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "etype"), Symbol.intern(null, "&"), Symbol.intern(null, "args")) })), RT.keyword(null, "line"), Integer.valueOf(53), RT.keyword(null, "column"), Integer.valueOf(4), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__36 = (Var)RT.var("com.rpl.specter.impl", "throw-illegal");
    const__39 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "args")) })), RT.keyword(null, "line"), Integer.valueOf(58), RT.keyword(null, "column"), Integer.valueOf(4), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__40 = (Var)RT.var("com.rpl.specter.impl", "cljs-analyzer-macroexpand-1");
    const__43 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(72), RT.keyword(null, "column"), Integer.valueOf(4), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__44 = (Var)RT.var("com.rpl.specter.impl", "clj-macroexpand-all");
    const__47 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "form")) })), RT.keyword(null, "line"), Integer.valueOf(83), RT.keyword(null, "column"), Integer.valueOf(4), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__48 = (Var)RT.var("com.rpl.specter.impl", "intern*");
    const__51 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ns"), Symbol.intern(null, "name"), Symbol.intern(null, "val")) })), RT.keyword(null, "line"), Integer.valueOf(93), RT.keyword(null, "column"), Integer.valueOf(4), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__52 = (Var)RT.var("com.rpl.specter.impl", "fast-object-array");
    const__55 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "i")) })), RT.keyword(null, "line"), Integer.valueOf(101), RT.keyword(null, "column"), Integer.valueOf(4), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__56 = (Var)RT.var("com.rpl.specter.impl", "benchmark");
    const__59 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "iters"), Symbol.intern(null, "afn")) })), RT.keyword(null, "line"), Integer.valueOf(105), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__60 = (Var)RT.var("com.rpl.specter.impl", "exec-select*");
    const__63 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "&"), Symbol.intern(null, "args")) })), RT.keyword(null, "line"), Integer.valueOf(112), RT.keyword(null, "column"), Integer.valueOf(4), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__64 = (Var)RT.var("com.rpl.specter.impl", "exec-transform*");
    const__67 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "&"), Symbol.intern(null, "args")) })), RT.keyword(null, "line"), Integer.valueOf(126), RT.keyword(null, "column"), Integer.valueOf(4), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__68 = RT.classForName("com.rpl.specter.impl.PathComposer");
    const__69 = (Var)RT.var("clojure.core", "alter-meta!");
    const__70 = (Var)RT.var("com.rpl.specter.impl", "PathComposer");
    const__71 = (Var)RT.var("clojure.core", "assoc");
    const__72 = (Keyword)RT.keyword(null, "doc");
    const__73 = (Var)RT.var("clojure.core", "assert-same-protocol");
    const__74 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "do-comp-paths")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "paths")) })) })) }));
    const__75 = (Var)RT.var("clojure.core", "alter-var-root");
    const__76 = (Var)RT.var("clojure.core", "merge");
    const__80 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "com.rpl.specter.impl.PathComposer"), RT.keyword(null, "on-interface"), RT.classForName("com.rpl.specter.impl.PathComposer") });
    const__81 = (Keyword)RT.keyword(null, "sigs");
    const__82 = (AFn)RT.map(new Object[] { RT.keyword(null, "do-comp-paths"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "do-comp-paths")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "paths")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "paths")) })), RT.keyword(null, "doc"), null }) });
    const__83 = (Keyword)RT.keyword(null, "var");
    const__84 = (Keyword)RT.keyword(null, "method-map");
    const__85 = (Keyword)RT.keyword(null, "do-comp-paths");
    const__86 = (AFn)RT.map(new Object[] { RT.keyword(null, "do-comp-paths"), RT.keyword(null, "do-comp-paths") });
    const__87 = (Keyword)RT.keyword(null, "method-builders");
    const__88 = (Var)RT.var("clojure.core", "intern");
    const__89 = (Var)RT.var("clojure.core", "*ns*");
    const__90 = (Var)RT.var("clojure.core", "with-meta");
    const__91 = (AFn)((IObj)Symbol.intern(null, "do-comp-paths")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "paths")) })) }));
    const__92 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "do-comp-paths")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "paths")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "paths")) })), RT.keyword(null, "doc"), null });
    const__93 = (Keyword)RT.keyword(null, "protocol");
    const__94 = (Var)RT.var("clojure.core", "-reset-methods");
    const__95 = (AFn)Symbol.intern(null, "PathComposer");
    const__96 = (Var)RT.var("com.rpl.specter.impl", "rich-nav?");
    const__99 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "n")) })), RT.keyword(null, "line"), Integer.valueOf(141), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
  }
  
  public static void __init1() {
    const__100 = (Var)RT.var("com.rpl.specter.impl", "comp-paths*");
    const__103 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "p")) })), RT.keyword(null, "line"), Integer.valueOf(145), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__104 = (Var)RT.var("com.rpl.specter.impl", "coerce-object");
    const__107 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })), RT.keyword(null, "line"), Integer.valueOf(148), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__108 = RT.classForName("com.rpl.specter.impl.CoercePath");
    const__109 = (Var)RT.var("com.rpl.specter.impl", "CoercePath");
    const__110 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "coerce-path")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })) }));
    const__112 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "com.rpl.specter.impl.CoercePath"), RT.keyword(null, "on-interface"), RT.classForName("com.rpl.specter.impl.CoercePath") });
    const__113 = (AFn)RT.map(new Object[] { RT.keyword(null, "coerce-path"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "coerce-path")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })), RT.keyword(null, "doc"), null }) });
    const__114 = (Keyword)RT.keyword(null, "coerce-path");
    const__115 = (AFn)RT.map(new Object[] { RT.keyword(null, "coerce-path"), RT.keyword(null, "coerce-path") });
    const__116 = (AFn)((IObj)Symbol.intern(null, "coerce-path")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) }));
    const__117 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "coerce-path")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })), RT.keyword(null, "doc"), null });
    const__118 = (AFn)Symbol.intern(null, "CoercePath");
    const__119 = (Var)RT.var("clojure.core", "extend");
    const__120 = RT.classForName("java.util.List");
    const__121 = RT.classForName("java.lang.Object");
    const__122 = (Var)RT.var("com.rpl.specter.impl", "STAY*");
    const__124 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(186), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__127 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(187), RT.keyword(null, "column"), Integer.valueOf(3) });
    const__128 = (Var)RT.var("com.rpl.specter.impl", "combine-two-navs");
    const__131 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "nav1"), Symbol.intern(null, "nav2")) })), RT.keyword(null, "line"), Integer.valueOf(193), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__132 = (Var)RT.var("com.rpl.specter.impl", "mutable-cell");
    const__135 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(), Tuple.create(Symbol.intern(null, "v")) })), RT.keyword(null, "line"), Integer.valueOf(237), RT.keyword(null, "column"), Integer.valueOf(4), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__136 = (Var)RT.var("com.rpl.specter.impl", "set-cell!");
    const__139 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "c")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "MutableCell") })), Symbol.intern(null, "v")) })), RT.keyword(null, "line"), Integer.valueOf(249), RT.keyword(null, "column"), Integer.valueOf(4), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__140 = (Var)RT.var("com.rpl.specter.impl", "get-cell");
    const__143 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "c")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "MutableCell") }))) })), RT.keyword(null, "line"), Integer.valueOf(259), RT.keyword(null, "column"), Integer.valueOf(4), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__144 = (Var)RT.var("com.rpl.specter.impl", "update-cell!");
    const__147 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "cell"), Symbol.intern(null, "afn")) })), RT.keyword(null, "line"), Integer.valueOf(270), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__148 = (Var)RT.var("com.rpl.specter.impl", "compiled-traverse-with-vals*");
    const__151 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "path"), Symbol.intern(null, "result-fn"), Symbol.intern(null, "vals"), Symbol.intern(null, "structure")) })), RT.keyword(null, "line"), Integer.valueOf(277), RT.keyword(null, "column"), Integer.valueOf(4), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__152 = (Var)RT.var("com.rpl.specter.impl", "compiled-traverse*");
    const__155 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "path"), Symbol.intern(null, "result-fn"), Symbol.intern(null, "structure")) })), RT.keyword(null, "line"), Integer.valueOf(299), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__156 = (Var)RT.var("com.rpl.specter.impl", "do-compiled-traverse*");
    const__159 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "apath"), Symbol.intern(null, "structure")) })), RT.keyword(null, "line"), Integer.valueOf(302), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__160 = (Var)RT.var("com.rpl.specter.impl", "call-reduce-interface");
    const__163 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "traverser")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "clojure.lang.IReduce") })), Symbol.intern(null, "afn"), Symbol.intern(null, "start")) })), RT.keyword(null, "line"), Integer.valueOf(324), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__164 = (Var)RT.var("com.rpl.specter.impl", "do-compiled-traverse");
    const__167 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "apath"), Symbol.intern(null, "structure")) })), RT.keyword(null, "line"), Integer.valueOf(333), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__168 = (Var)RT.var("com.rpl.specter.impl", "compiled-traverse-all*");
    const__171 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "path")) })), RT.keyword(null, "line"), Integer.valueOf(345), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__172 = (Var)RT.var("com.rpl.specter.impl", "compiled-select*");
    const__175 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "path"), Symbol.intern(null, "structure")) })), RT.keyword(null, "line"), Integer.valueOf(360), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__176 = (Var)RT.var("com.rpl.specter.impl", "compiled-select-one*");
    const__179 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "path"), Symbol.intern(null, "structure")) })), RT.keyword(null, "line"), Integer.valueOf(369), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__180 = (Var)RT.var("com.rpl.specter.impl", "compiled-select-one!*");
    const__183 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "path"), Symbol.intern(null, "structure")) })), RT.keyword(null, "line"), Integer.valueOf(384), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__184 = (Var)RT.var("com.rpl.specter.impl", "compiled-select-any*");
    const__187 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "path"), Symbol.intern(null, "structure")), Tuple.create(Symbol.intern(null, "path"), Symbol.intern(null, "vals"), Symbol.intern(null, "structure")) })), RT.keyword(null, "line"), Integer.valueOf(399), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__188 = (Var)RT.var("com.rpl.specter.impl", "compiled-select-first*");
    const__191 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "path"), Symbol.intern(null, "structure")) })), RT.keyword(null, "line"), Integer.valueOf(404), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__192 = (Var)RT.var("com.rpl.specter.impl", "compiled-selected-any?*");
    const__195 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "path"), Symbol.intern(null, "structure")) })), RT.keyword(null, "line"), Integer.valueOf(411), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__196 = (Var)RT.var("com.rpl.specter.impl", "terminal*");
    const__199 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "afn"), Symbol.intern(null, "vals"), Symbol.intern(null, "structure")) })), RT.keyword(null, "line"), Integer.valueOf(414), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
  }
  
  public static void __init2() {
    const__200 = (Var)RT.var("com.rpl.specter.impl", "compiled-transform*");
    const__203 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "nav"), Symbol.intern(null, "transform-fn"), Symbol.intern(null, "structure")) })), RT.keyword(null, "line"), Integer.valueOf(421), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__204 = (Var)RT.var("com.rpl.specter.impl", "compiled-vtransform*");
    const__207 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "nav"), Symbol.intern(null, "transform-fn"), Symbol.intern(null, "structure")) })), RT.keyword(null, "line"), Integer.valueOf(426), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__208 = (Var)RT.var("com.rpl.specter.impl", "fn-invocation?");
    const__211 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f")) })), RT.keyword(null, "line"), Integer.valueOf(429), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__212 = (Var)RT.var("com.rpl.specter.impl", "dynamic-param?");
    const__215 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "o")) })), RT.keyword(null, "line"), Integer.valueOf(459), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__216 = (Var)RT.var("com.rpl.specter.impl", "static-path?");
    const__219 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "path")) })), RT.keyword(null, "line"), Integer.valueOf(462), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__220 = (Var)RT.var("com.rpl.specter.impl", "late-path");
    const__223 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "path")) })), RT.keyword(null, "line"), Integer.valueOf(467), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__224 = (Var)RT.var("com.rpl.specter.impl", "cached-path-info-precompiled");
    const__227 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "c")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "CachedPathInfo") }))) })), RT.keyword(null, "line"), Integer.valueOf(481), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__228 = (Var)RT.var("com.rpl.specter.impl", "cached-path-info-dynamic?");
    const__231 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "c")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "CachedPathInfo") }))) })), RT.keyword(null, "line"), Integer.valueOf(484), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__232 = (Var)RT.var("com.rpl.specter.impl", "filter-select");
    const__235 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "afn"), Symbol.intern(null, "vals"), Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "line"), Integer.valueOf(488), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__236 = (Var)RT.var("com.rpl.specter.impl", "filter-transform");
    const__239 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "afn"), Symbol.intern(null, "vals"), Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "line"), Integer.valueOf(493), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__240 = (Var)RT.var("com.rpl.specter.impl", "pred*");
    const__244 = (AFn)RT.map(new Object[] { RT.keyword(null, "direct-nav"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "afn")) })), RT.keyword(null, "line"), Integer.valueOf(498), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__245 = (Var)RT.var("com.rpl.specter.impl", "collected?*");
    const__248 = (AFn)RT.map(new Object[] { RT.keyword(null, "direct-nav"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "afn")) })), RT.keyword(null, "line"), Integer.valueOf(509), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__249 = (Var)RT.var("com.rpl.specter.impl", "cell-nav");
    const__252 = (AFn)RT.map(new Object[] { RT.keyword(null, "direct-nav"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "cell")) })), RT.keyword(null, "line"), Integer.valueOf(520), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__253 = (Var)RT.var("com.rpl.specter.impl", "local-declarepath");
    const__256 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(527), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__257 = (Var)RT.var("com.rpl.specter.impl", "providepath*");
    const__260 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "declared"), Symbol.intern(null, "compiled-path")) })), RT.keyword(null, "line"), Integer.valueOf(531), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__261 = (Var)RT.var("com.rpl.specter.impl", "gensyms");
    const__264 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "amt")) })), RT.keyword(null, "line"), Integer.valueOf(537), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__265 = (Var)RT.var("com.rpl.specter.impl", "comp-navs");
    const__268 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { 
                Tuple.create(), Tuple.create(Symbol.intern(null, "nav1__42076__auto__")), Tuple.create(Symbol.intern(null, "nav1__42076__auto__"), Symbol.intern(null, "nav2__42077__auto__")), Tuple.create(Symbol.intern(null, "G__42561"), Symbol.intern(null, "G__42562"), Symbol.intern(null, "G__42563")), Tuple.create(Symbol.intern(null, "G__42564"), Symbol.intern(null, "G__42565"), Symbol.intern(null, "G__42566"), Symbol.intern(null, "G__42567")), Tuple.create(Symbol.intern(null, "G__42568"), Symbol.intern(null, "G__42569"), Symbol.intern(null, "G__42570"), Symbol.intern(null, "G__42571"), Symbol.intern(null, "G__42572")), Tuple.create(Symbol.intern(null, "G__42573"), Symbol.intern(null, "G__42574"), Symbol.intern(null, "G__42575"), Symbol.intern(null, "G__42576"), Symbol.intern(null, "G__42577"), Symbol.intern(null, "G__42578")), RT.vector(new Object[] { Symbol.intern(null, "G__42579"), Symbol.intern(null, "G__42580"), Symbol.intern(null, "G__42581"), Symbol.intern(null, "G__42582"), Symbol.intern(null, "G__42583"), Symbol.intern(null, "G__42584"), Symbol.intern(null, "G__42585") }), RT.vector(new Object[] { Symbol.intern(null, "G__42586"), Symbol.intern(null, "G__42587"), Symbol.intern(null, "G__42588"), Symbol.intern(null, "G__42589"), Symbol.intern(null, "G__42590"), Symbol.intern(null, "G__42591"), Symbol.intern(null, "G__42592"), Symbol.intern(null, "G__42593") }), RT.vector(new Object[] { Symbol.intern(null, "G__42594"), Symbol.intern(null, "G__42595"), Symbol.intern(null, "G__42596"), Symbol.intern(null, "G__42597"), Symbol.intern(null, "G__42598"), Symbol.intern(null, "G__42599"), Symbol.intern(null, "G__42600"), Symbol.intern(null, "G__42601"), Symbol.intern(null, "G__42602") }), 
                RT.vector(new Object[] { Symbol.intern(null, "G__42603"), Symbol.intern(null, "G__42604"), Symbol.intern(null, "G__42605"), Symbol.intern(null, "G__42606"), Symbol.intern(null, "G__42607"), Symbol.intern(null, "G__42608"), Symbol.intern(null, "G__42609"), Symbol.intern(null, "G__42610"), Symbol.intern(null, "G__42611"), Symbol.intern(null, "G__42612") }), RT.vector(new Object[] { 
                    Symbol.intern(null, "G__42613"), Symbol.intern(null, "G__42614"), Symbol.intern(null, "G__42615"), Symbol.intern(null, "G__42616"), Symbol.intern(null, "G__42617"), Symbol.intern(null, "G__42618"), Symbol.intern(null, "G__42619"), Symbol.intern(null, "G__42620"), Symbol.intern(null, "G__42621"), Symbol.intern(null, "G__42622"), 
                    Symbol.intern(null, "G__42623") }), RT.vector(new Object[] { 
                    Symbol.intern(null, "G__42624"), Symbol.intern(null, "G__42625"), Symbol.intern(null, "G__42626"), Symbol.intern(null, "G__42627"), Symbol.intern(null, "G__42628"), Symbol.intern(null, "G__42629"), Symbol.intern(null, "G__42630"), Symbol.intern(null, "G__42631"), Symbol.intern(null, "G__42632"), Symbol.intern(null, "G__42633"), 
                    Symbol.intern(null, "G__42634"), Symbol.intern(null, "G__42635") }), RT.vector(new Object[] { 
                    Symbol.intern(null, "G__42636"), Symbol.intern(null, "G__42637"), Symbol.intern(null, "G__42638"), Symbol.intern(null, "G__42639"), Symbol.intern(null, "G__42640"), Symbol.intern(null, "G__42641"), Symbol.intern(null, "G__42642"), Symbol.intern(null, "G__42643"), Symbol.intern(null, "G__42644"), Symbol.intern(null, "G__42645"), 
                    Symbol.intern(null, "G__42646"), Symbol.intern(null, "G__42647"), Symbol.intern(null, "G__42648") }), RT.vector(new Object[] { 
                    Symbol.intern(null, "G__42649"), Symbol.intern(null, "G__42650"), Symbol.intern(null, "G__42651"), Symbol.intern(null, "G__42652"), Symbol.intern(null, "G__42653"), Symbol.intern(null, "G__42654"), Symbol.intern(null, "G__42655"), Symbol.intern(null, "G__42656"), Symbol.intern(null, "G__42657"), Symbol.intern(null, "G__42658"), 
                    Symbol.intern(null, "G__42659"), Symbol.intern(null, "G__42660"), Symbol.intern(null, "G__42661"), Symbol.intern(null, "G__42662") }), RT.vector(new Object[] { 
                    Symbol.intern(null, "G__42663"), Symbol.intern(null, "G__42664"), Symbol.intern(null, "G__42665"), Symbol.intern(null, "G__42666"), Symbol.intern(null, "G__42667"), Symbol.intern(null, "G__42668"), Symbol.intern(null, "G__42669"), Symbol.intern(null, "G__42670"), Symbol.intern(null, "G__42671"), Symbol.intern(null, "G__42672"), 
                    Symbol.intern(null, "G__42673"), Symbol.intern(null, "G__42674"), Symbol.intern(null, "G__42675"), Symbol.intern(null, "G__42676"), Symbol.intern(null, "G__42677") }), RT.vector(new Object[] { 
                    Symbol.intern(null, "G__42678"), Symbol.intern(null, "G__42679"), Symbol.intern(null, "G__42680"), Symbol.intern(null, "G__42681"), Symbol.intern(null, "G__42682"), Symbol.intern(null, "G__42683"), Symbol.intern(null, "G__42684"), Symbol.intern(null, "G__42685"), Symbol.intern(null, "G__42686"), Symbol.intern(null, "G__42687"), 
                    Symbol.intern(null, "G__42688"), Symbol.intern(null, "G__42689"), Symbol.intern(null, "G__42690"), Symbol.intern(null, "G__42691"), Symbol.intern(null, "G__42692"), Symbol.intern(null, "G__42693") }), RT.vector(new Object[] { 
                    Symbol.intern(null, "G__42694"), Symbol.intern(null, "G__42695"), Symbol.intern(null, "G__42696"), Symbol.intern(null, "G__42697"), Symbol.intern(null, "G__42698"), Symbol.intern(null, "G__42699"), Symbol.intern(null, "G__42700"), Symbol.intern(null, "G__42701"), Symbol.intern(null, "G__42702"), Symbol.intern(null, "G__42703"), 
                    Symbol.intern(null, "G__42704"), Symbol.intern(null, "G__42705"), Symbol.intern(null, "G__42706"), Symbol.intern(null, "G__42707"), Symbol.intern(null, "G__42708"), Symbol.intern(null, "G__42709"), Symbol.intern(null, "G__42710") }), RT.vector(new Object[] { 
                    Symbol.intern(null, "G__42711"), Symbol.intern(null, "G__42712"), Symbol.intern(null, "G__42713"), Symbol.intern(null, "G__42714"), Symbol.intern(null, "G__42715"), Symbol.intern(null, "G__42716"), Symbol.intern(null, "G__42717"), Symbol.intern(null, "G__42718"), Symbol.intern(null, "G__42719"), Symbol.intern(null, "G__42720"), 
                    Symbol.intern(null, "G__42721"), Symbol.intern(null, "G__42722"), Symbol.intern(null, "G__42723"), Symbol.intern(null, "G__42724"), Symbol.intern(null, "G__42725"), Symbol.intern(null, "G__42726"), Symbol.intern(null, "G__42727"), Symbol.intern(null, "G__42728") }), RT.vector(new Object[] { 
                    Symbol.intern(null, "G__42729"), Symbol.intern(null, "G__42730"), Symbol.intern(null, "G__42731"), Symbol.intern(null, "G__42732"), Symbol.intern(null, "G__42733"), Symbol.intern(null, "G__42734"), Symbol.intern(null, "G__42735"), Symbol.intern(null, "G__42736"), Symbol.intern(null, "G__42737"), Symbol.intern(null, "G__42738"), 
                    Symbol.intern(null, "G__42739"), Symbol.intern(null, "G__42740"), Symbol.intern(null, "G__42741"), Symbol.intern(null, "G__42742"), Symbol.intern(null, "G__42743"), Symbol.intern(null, "G__42744"), Symbol.intern(null, "G__42745"), Symbol.intern(null, "G__42746"), Symbol.intern(null, "G__42747") }), 
                RT.vector(new Object[] { 
                    Symbol.intern(null, "G__42542"), Symbol.intern(null, "G__42543"), Symbol.intern(null, "G__42544"), Symbol.intern(null, "G__42545"), Symbol.intern(null, "G__42546"), Symbol.intern(null, "G__42547"), Symbol.intern(null, "G__42548"), Symbol.intern(null, "G__42549"), Symbol.intern(null, "G__42550"), Symbol.intern(null, "G__42551"), 
                    Symbol.intern(null, "G__42552"), Symbol.intern(null, "G__42553"), Symbol.intern(null, "G__42554"), Symbol.intern(null, "G__42555"), Symbol.intern(null, "G__42556"), Symbol.intern(null, "G__42557"), Symbol.intern(null, "G__42558"), Symbol.intern(null, "G__42559"), Symbol.intern(null, "G__42560"), Symbol.intern(null, "&"), 
                    Symbol.intern(null, "rest__42078__auto__") }) })), RT.keyword(null, "line"), Integer.valueOf(540), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__269 = (Var)RT.var("com.rpl.specter.impl", "srange-transform*");
    const__272 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "start"), Symbol.intern(null, "end"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "line"), Integer.valueOf(542), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__273 = (Var)RT.var("com.rpl.specter.impl", "matching-indices");
    const__276 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "aseq"), Symbol.intern(null, "p")) })), RT.keyword(null, "line"), Integer.valueOf(559), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__277 = (Var)RT.var("com.rpl.specter.impl", "matching-ranges");
    const__280 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "aseq"), Symbol.intern(null, "p")) })), RT.keyword(null, "line"), Integer.valueOf(562), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__281 = (Var)RT.var("com.rpl.specter.impl", "continuous-subseqs-transform*");
    const__284 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pred"), Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "line"), Integer.valueOf(579), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__285 = (Var)RT.var("com.rpl.specter.impl", "codewalk-until");
    const__288 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pred"), Symbol.intern(null, "on-match-fn"), Symbol.intern(null, "structure")) })), RT.keyword(null, "line"), Integer.valueOf(586), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__289 = (Var)RT.var("com.rpl.specter.impl", "walk-select");
    const__292 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pred"), Symbol.intern(null, "continue-fn"), Symbol.intern(null, "structure")) })), RT.keyword(null, "line"), Integer.valueOf(594), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__293 = (Var)RT.var("com.rpl.specter.impl", "walk-until");
    const__296 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pred"), Symbol.intern(null, "on-match-fn"), Symbol.intern(null, "structure")) })), RT.keyword(null, "line"), Integer.valueOf(608), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__297 = (Var)RT.var("com.rpl.specter.impl", "*tmp-closure*");
  }
  
  public static void __init3() {
    const__301 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(616), RT.keyword(null, "column"), Integer.valueOf(5), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__302 = (Var)RT.var("com.rpl.specter.impl", "closed-code");
    const__305 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "closure"), Symbol.intern(null, "body")) })), RT.keyword(null, "line"), Integer.valueOf(617), RT.keyword(null, "column"), Integer.valueOf(5), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__306 = (Var)RT.var("com.rpl.specter.impl", "coerce-nav");
    const__309 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "o")) })), RT.keyword(null, "line"), Integer.valueOf(650), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__310 = (Var)RT.var("com.rpl.specter.impl", "dynamic-var?");
    const__313 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "v")) })), RT.keyword(null, "line"), Integer.valueOf(662), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__314 = (Var)RT.var("com.rpl.specter.impl", "direct-nav-obj");
    const__317 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "o")) })), RT.keyword(null, "line"), Integer.valueOf(668), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__318 = (Var)RT.var("com.rpl.specter.impl", "maybe-direct-nav");
    const__321 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "obj"), Symbol.intern(null, "direct-nav?")) })), RT.keyword(null, "line"), Integer.valueOf(671), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__322 = (Var)RT.var("com.rpl.specter.impl", "original-obj");
    const__325 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "o")) })), RT.keyword(null, "line"), Integer.valueOf(676), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__326 = (Var)RT.var("com.rpl.specter.impl", "direct-nav?");
    const__329 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "o")) })), RT.keyword(null, "line"), Integer.valueOf(682), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__330 = (Var)RT.var("com.rpl.specter.impl", "all-static?");
    const__333 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "params")) })), RT.keyword(null, "line"), Integer.valueOf(685), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__334 = (Var)RT.var("com.rpl.specter.impl", "late-resolved-fn");
    const__337 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "afn")) })), RT.keyword(null, "line"), Integer.valueOf(688), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__338 = (Var)RT.var("com.rpl.specter.impl", "preserve-map");
    const__341 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "afn"), Symbol.intern(null, "o")) })), RT.keyword(null, "line"), Integer.valueOf(695), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__342 = (Var)RT.var("com.rpl.specter.impl", "magic-precompilation*");
    const__345 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "o")) })), RT.keyword(null, "line"), Integer.valueOf(700), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__346 = (Var)RT.var("com.rpl.specter.impl", "static-combine");
    const__349 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "o")), Tuple.create(Symbol.intern(null, "o"), Symbol.intern(null, "nav-pos?")) })), RT.keyword(null, "line"), Integer.valueOf(736), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__350 = (Var)RT.var("com.rpl.specter.impl", "static-fn-code");
    const__353 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "afn"), Symbol.intern(null, "args")) })), RT.keyword(null, "line"), Integer.valueOf(789), RT.keyword(null, "column"), Integer.valueOf(4), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__354 = (Var)RT.var("com.rpl.specter.impl", "dynamic-fn-code");
    const__357 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "afn"), Symbol.intern(null, "args")) })), RT.keyword(null, "line"), Integer.valueOf(797), RT.keyword(null, "column"), Integer.valueOf(4), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__358 = (Var)RT.var("com.rpl.specter.impl", "dynamic-val-code");
    const__361 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "code"), Symbol.intern(null, "possible-params")) })), RT.keyword(null, "line"), Integer.valueOf(805), RT.keyword(null, "column"), Integer.valueOf(4), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__362 = (Var)RT.var("com.rpl.specter.impl", "static-val-code");
    const__365 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "o")) })), RT.keyword(null, "line"), Integer.valueOf(818), RT.keyword(null, "column"), Integer.valueOf(4), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__366 = (Var)RT.var("com.rpl.specter.impl", "resolve-nav-code");
    const__369 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(828), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__370 = (Var)RT.var("com.rpl.specter.impl", "dynamic->code");
    const__373 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "o")) })), RT.keyword(null, "line"), Integer.valueOf(830), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__374 = (Var)RT.var("com.rpl.specter.impl", "resolve-arg-code");
    const__377 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "o"), Symbol.intern(null, "possible-params")) })), RT.keyword(null, "line"), Integer.valueOf(834), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__380 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "o"), Symbol.intern(null, "possible-params")) })), RT.keyword(null, "line"), Integer.valueOf(858), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__381 = (Var)RT.var("com.rpl.specter.impl", "used-locals");
    const__384 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "locals-set"), Symbol.intern(null, "form")) })), RT.keyword(null, "line"), Integer.valueOf(888), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__385 = (Var)RT.var("com.rpl.specter.impl", "*DEBUG-INLINE-CACHING*");
    const__387 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(898), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__388 = (Var)RT.var("com.rpl.specter.impl", "mk-dynamic-path-maker");
    const__391 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "resolved-code"), Symbol.intern(null, "ns-str"), Symbol.intern(null, "used-locals-list"), Symbol.intern(null, "possible-param")) })), RT.keyword(null, "line"), Integer.valueOf(908), RT.keyword(null, "column"), Integer.valueOf(4), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__392 = (Var)RT.var("com.rpl.specter.impl", "magic-precompilation");
    const__395 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "path"), Symbol.intern(null, "ns-str"), Symbol.intern(null, "used-locals-list"), Symbol.intern(null, "possible-params")) })), RT.keyword(null, "line"), Integer.valueOf(936), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__396 = (Var)RT.var("com.rpl.specter.impl", "compiled-setval*");
    const__399 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "path"), Symbol.intern(null, "val"), Symbol.intern(null, "structure")) })), RT.keyword(null, "line"), Integer.valueOf(957), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
  }
  
  public static void __init4() {
    const__400 = (Var)RT.var("com.rpl.specter.impl", "compiled-replace-in*");
    const__403 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "path"), Symbol.intern(null, "transform-fn"), Symbol.intern(null, "structure"), Symbol.intern(null, "&"), RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "merge-fn")), RT.keyword(null, "or"), RT.map(new Object[] { Symbol.intern(null, "merge-fn"), Symbol.intern(null, "concat") }) })) })), RT.keyword(null, "line"), Integer.valueOf(960), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__404 = (Var)RT.var("com.rpl.specter.impl", "multi-transform-error-fn");
    const__407 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "nav")) })), RT.keyword(null, "line"), Integer.valueOf(977), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
    const__408 = (Var)RT.var("com.rpl.specter.impl", "compiled-multi-transform*");
    const__411 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "path"), Symbol.intern(null, "structure")) })), RT.keyword(null, "line"), Integer.valueOf(982), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter/impl.cljc" });
  }
  
  static  {
    __init0();
    __init1();
    __init2();
    __init3();
    __init4();
    Compiler.pushNSandLoader(RT.classForName("com.rpl.specter.impl__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
