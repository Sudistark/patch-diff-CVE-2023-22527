package com.rpl;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IPersistentMap;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentHashSet;
import clojure.lang.PersistentList;
import clojure.lang.PersistentVector;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class specter__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__12;
  
  public static final Var const__13;
  
  public static final AFn const__16;
  
  public static final Var const__17;
  
  public static final AFn const__21;
  
  public static final Var const__22;
  
  public static final AFn const__24;
  
  public static final Var const__25;
  
  public static final Var const__26;
  
  public static final Var const__27;
  
  public static final AFn const__29;
  
  public static final Var const__30;
  
  public static final AFn const__32;
  
  public static final Var const__33;
  
  public static final AFn const__34;
  
  public static final Var const__35;
  
  public static final AFn const__37;
  
  public static final Var const__38;
  
  public static final AFn const__39;
  
  public static final Var const__40;
  
  public static final AFn const__42;
  
  public static final Var const__43;
  
  public static final AFn const__44;
  
  public static final Var const__45;
  
  public static final AFn const__48;
  
  public static final Var const__49;
  
  public static final AFn const__52;
  
  public static final Var const__53;
  
  public static final AFn const__56;
  
  public static final Var const__57;
  
  public static final AFn const__60;
  
  public static final Var const__61;
  
  public static final AFn const__64;
  
  public static final Var const__65;
  
  public static final AFn const__68;
  
  public static final Var const__69;
  
  public static final AFn const__72;
  
  public static final Var const__73;
  
  public static final AFn const__76;
  
  public static final Var const__77;
  
  public static final AFn const__80;
  
  public static final Var const__81;
  
  public static final AFn const__84;
  
  public static final Var const__85;
  
  public static final AFn const__89;
  
  public static final Var const__90;
  
  public static final AFn const__93;
  
  public static final Var const__94;
  
  public static final AFn const__97;
  
  public static final Var const__98;
  
  public static final AFn const__101;
  
  public static final Var const__102;
  
  public static final AFn const__105;
  
  public static final Var const__106;
  
  public static final AFn const__109;
  
  public static final Var const__110;
  
  public static final AFn const__113;
  
  public static final Var const__114;
  
  public static final AFn const__117;
  
  public static final Var const__118;
  
  public static final AFn const__121;
  
  public static final Var const__122;
  
  public static final AFn const__125;
  
  public static final Var const__126;
  
  public static final AFn const__129;
  
  public static final Var const__130;
  
  public static final AFn const__133;
  
  public static final Var const__134;
  
  public static final AFn const__137;
  
  public static final Var const__138;
  
  public static final AFn const__141;
  
  public static final Var const__142;
  
  public static final AFn const__145;
  
  public static final Var const__146;
  
  public static final AFn const__149;
  
  public static final Var const__150;
  
  public static final AFn const__153;
  
  public static final Var const__154;
  
  public static final AFn const__157;
  
  public static final Var const__158;
  
  public static final AFn const__161;
  
  public static final Var const__162;
  
  public static final AFn const__165;
  
  public static final Var const__166;
  
  public static final AFn const__169;
  
  public static final Var const__170;
  
  public static final AFn const__173;
  
  public static final Var const__174;
  
  public static final AFn const__177;
  
  public static final Var const__178;
  
  public static final AFn const__181;
  
  public static final Var const__182;
  
  public static final AFn const__185;
  
  public static final Var const__186;
  
  public static final AFn const__189;
  
  public static final Var const__190;
  
  public static final AFn const__193;
  
  public static final Var const__194;
  
  public static final AFn const__197;
  
  public static final Var const__198;
  
  public static final AFn const__201;
  
  public static final Var const__202;
  
  public static final AFn const__206;
  
  public static final Var const__207;
  
  public static final AFn const__210;
  
  public static final Var const__211;
  
  public static final AFn const__213;
  
  public static final Var const__214;
  
  public static final Var const__215;
  
  public static final AFn const__218;
  
  public static final Var const__219;
  
  public static final AFn const__221;
  
  public static final Var const__222;
  
  public static final Var const__223;
  
  public static final AFn const__226;
  
  public static final Var const__227;
  
  public static final AFn const__229;
  
  public static final Var const__230;
  
  public static final Var const__231;
  
  public static final AFn const__234;
  
  public static final Var const__235;
  
  public static final AFn const__237;
  
  public static final Var const__238;
  
  public static final Var const__239;
  
  public static final AFn const__242;
  
  public static final Var const__243;
  
  public static final AFn const__245;
  
  public static final Var const__246;
  
  public static final Var const__247;
  
  public static final AFn const__249;
  
  public static final Var const__250;
  
  public static final Var const__251;
  
  public static final AFn const__254;
  
  public static final Var const__255;
  
  public static final AFn const__257;
  
  public static final Var const__258;
  
  public static final Var const__259;
  
  public static final AFn const__262;
  
  public static final Var const__263;
  
  public static final AFn const__265;
  
  public static final Var const__266;
  
  public static final Var const__267;
  
  public static final AFn const__270;
  
  public static final Var const__271;
  
  public static final AFn const__273;
  
  public static final Var const__274;
  
  public static final Var const__275;
  
  public static final AFn const__278;
  
  public static final Var const__279;
  
  public static final AFn const__281;
  
  public static final Var const__282;
  
  public static final Var const__283;
  
  public static final AFn const__285;
  
  public static final Var const__286;
  
  public static final Var const__287;
  
  public static final AFn const__290;
  
  public static final Var const__291;
  
  public static final AFn const__293;
  
  public static final Var const__294;
  
  public static final Var const__295;
  
  public static final AFn const__298;
  
  public static final Var const__299;
  
  public static final AFn const__301;
  
  public static final Var const__302;
  
  public static final Var const__303;
  
  public static final AFn const__306;
  
  public static final Var const__307;
  
  public static final AFn const__309;
  
  public static final Var const__310;
  
  public static final Var const__311;
  
  public static final AFn const__314;
  
  public static final Var const__315;
  
  public static final AFn const__317;
  
  public static final Var const__318;
  
  public static final Var const__319;
  
  public static final AFn const__321;
  
  public static final Var const__322;
  
  public static final Var const__323;
  
  public static final AFn const__325;
  
  public static final Var const__326;
  
  public static final Var const__327;
  
  public static final AFn const__329;
  
  public static final Var const__330;
  
  public static final Var const__331;
  
  public static final Keyword const__332;
  
  public static final Var const__333;
  
  public static final AFn const__335;
  
  public static final Var const__336;
  
  public static final Var const__337;
  
  public static final AFn const__341;
  
  public static final Var const__342;
  
  public static final AFn const__344;
  
  public static final AFn const__347;
  
  public static final AFn const__350;
  
  public static final Var const__351;
  
  public static final AFn const__353;
  
  public static final Var const__354;
  
  public static final AFn const__356;
  
  public static final Var const__357;
  
  public static final Var const__358;
  
  public static final AFn const__360;
  
  public static final Var const__361;
  
  public static final Var const__362;
  
  public static final AFn const__364;
  
  public static final Var const__365;
  
  public static final AFn const__369;
  
  public static final Var const__370;
  
  public static final AFn const__372;
  
  public static final Var const__373;
  
  public static final AFn const__375;
  
  public static final AFn const__378;
  
  public static final AFn const__381;
  
  public static final Var const__382;
  
  public static final AFn const__384;
  
  public static final Var const__385;
  
  public static final AFn const__387;
  
  public static final Var const__388;
  
  public static final AFn const__390;
  
  public static final AFn const__393;
  
  public static final AFn const__396;
  
  public static final Var const__397;
  
  public static final AFn const__399;
  
  public static final Var const__400;
  
  public static final AFn const__402;
  
  public static final Var const__403;
  
  public static final AFn const__405;
  
  public static final AFn const__408;
  
  public static final AFn const__411;
  
  public static final Var const__412;
  
  public static final AFn const__414;
  
  public static final Var const__415;
  
  public static final AFn const__417;
  
  public static final Var const__418;
  
  public static final AFn const__420;
  
  public static final AFn const__423;
  
  public static final AFn const__426;
  
  public static final Var const__427;
  
  public static final AFn const__429;
  
  public static final Var const__430;
  
  public static final AFn const__432;
  
  public static final Var const__433;
  
  public static final AFn const__435;
  
  public static final Var const__436;
  
  public static final Var const__437;
  
  public static final Var const__438;
  
  public static final Var const__439;
  
  public static final AFn const__441;
  
  public static final Var const__442;
  
  public static final Var const__443;
  
  public static final Var const__444;
  
  public static final AFn const__446;
  
  public static final Var const__447;
  
  public static final AFn const__449;
  
  public static final AFn const__452;
  
  public static final AFn const__455;
  
  public static final Var const__456;
  
  public static final AFn const__458;
  
  public static final Var const__459;
  
  public static final AFn const__461;
  
  public static final Var const__462;
  
  public static final AFn const__464;
  
  public static final AFn const__467;
  
  public static final AFn const__470;
  
  public static final Var const__471;
  
  public static final AFn const__473;
  
  public static final Var const__474;
  
  public static final AFn const__476;
  
  public static final Var const__477;
  
  public static final AFn const__479;
  
  public static final AFn const__482;
  
  public static final AFn const__485;
  
  public static final Var const__486;
  
  public static final AFn const__488;
  
  public static final Var const__489;
  
  public static final AFn const__491;
  
  public static final Var const__492;
  
  public static final AFn const__494;
  
  public static final AFn const__497;
  
  public static final AFn const__500;
  
  public static final Var const__501;
  
  public static final AFn const__503;
  
  public static final Var const__504;
  
  public static final AFn const__506;
  
  public static final Var const__507;
  
  public static final AFn const__509;
  
  public static final AFn const__512;
  
  public static final AFn const__515;
  
  public static final Var const__516;
  
  public static final AFn const__518;
  
  public static final Var const__519;
  
  public static final AFn const__521;
  
  public static final Var const__522;
  
  public static final AFn const__524;
  
  public static final AFn const__527;
  
  public static final AFn const__530;
  
  public static final Var const__531;
  
  public static final AFn const__533;
  
  public static final Var const__534;
  
  public static final AFn const__536;
  
  public static final Var const__537;
  
  public static final AFn const__539;
  
  public static final AFn const__542;
  
  public static final AFn const__545;
  
  public static final Var const__546;
  
  public static final AFn const__548;
  
  public static final Var const__549;
  
  public static final AFn const__551;
  
  public static final Var const__552;
  
  public static final AFn const__554;
  
  public static final AFn const__557;
  
  public static final AFn const__560;
  
  public static final Var const__561;
  
  public static final AFn const__563;
  
  public static final Var const__564;
  
  public static final AFn const__566;
  
  public static final Var const__567;
  
  public static final AFn const__569;
  
  public static final AFn const__572;
  
  public static final AFn const__575;
  
  public static final Var const__576;
  
  public static final AFn const__578;
  
  public static final Var const__579;
  
  public static final AFn const__581;
  
  public static final Var const__582;
  
  public static final AFn const__584;
  
  public static final AFn const__587;
  
  public static final AFn const__590;
  
  public static final Var const__591;
  
  public static final AFn const__593;
  
  public static final Var const__594;
  
  public static final AFn const__596;
  
  public static final Var const__597;
  
  public static final AFn const__599;
  
  public static final Var const__600;
  
  public static final AFn const__602;
  
  public static final Var const__603;
  
  public static final AFn const__605;
  
  public static final Var const__606;
  
  public static final Var const__607;
  
  public static final AFn const__609;
  
  public static final Var const__610;
  
  public static final Var const__611;
  
  public static final AFn const__613;
  
  public static final Var const__614;
  
  public static final Var const__615;
  
  public static final AFn const__617;
  
  public static final Var const__618;
  
  public static final AFn const__620;
  
  public static final Var const__621;
  
  public static final AFn const__623;
  
  public static final Var const__624;
  
  public static final AFn const__626;
  
  public static final AFn const__629;
  
  public static final AFn const__632;
  
  public static final Var const__633;
  
  public static final AFn const__635;
  
  public static final Var const__636;
  
  public static final AFn const__638;
  
  public static final Object const__639;
  
  public static final Var const__640;
  
  public static final AFn const__642;
  
  public static final Var const__643;
  
  public static final AFn const__645;
  
  public static final Var const__646;
  
  public static final AFn const__648;
  
  public static final AFn const__651;
  
  public static final AFn const__654;
  
  public static final Var const__655;
  
  public static final AFn const__657;
  
  public static final Var const__658;
  
  public static final AFn const__660;
  
  public static final Var const__661;
  
  public static final AFn const__663;
  
  public static final AFn const__666;
  
  public static final AFn const__669;
  
  public static final Var const__670;
  
  public static final AFn const__672;
  
  public static final Var const__673;
  
  public static final AFn const__675;
  
  public static final Var const__676;
  
  public static final AFn const__678;
  
  public static final AFn const__681;
  
  public static final AFn const__684;
  
  public static final Var const__685;
  
  public static final AFn const__687;
  
  public static final Var const__688;
  
  public static final AFn const__690;
  
  public static final Var const__691;
  
  public static final AFn const__693;
  
  public static final Var const__694;
  
  public static final AFn const__696;
  
  public static final Var const__697;
  
  public static final AFn const__699;
  
  public static final Var const__700;
  
  public static final AFn const__702;
  
  public static final Var const__703;
  
  public static final AFn const__705;
  
  public static final Var const__706;
  
  public static final Var const__707;
  
  public static final AFn const__710;
  
  public static final Var const__711;
  
  public static final AFn const__714;
  
  public static final Var const__715;
  
  public static final AFn const__718;
  
  public static final Var const__719;
  
  public static final AFn const__722;
  
  public static final Var const__723;
  
  public static final AFn const__726;
  
  public static final Var const__727;
  
  public static final Var const__728;
  
  public static final Keyword const__729;
  
  public static final Object const__730;
  
  public static final Object const__731;
  
  public static final Object const__732;
  
  public static final Object const__733;
  
  public static final Object const__734;
  
  public static final Object const__735;
  
  public static final Object const__736;
  
  public static final Object const__737;
  
  public static final Object const__738;
  
  public static final Var const__739;
  
  public static final AFn const__741;
  
  public static final Var const__742;
  
  public static final AFn const__744;
  
  public static final AFn const__747;
  
  public static final AFn const__750;
  
  public static final Var const__751;
  
  public static final AFn const__753;
  
  public static final Var const__754;
  
  public static final AFn const__756;
  
  public static final Var const__757;
  
  public static final AFn const__759;
  
  public static final Var const__760;
  
  public static final AFn const__762;
  
  public static final Var const__763;
  
  public static final AFn const__765;
  
  public static final Var const__766;
  
  public static final AFn const__768;
  
  public static final AFn const__771;
  
  public static final AFn const__774;
  
  public static final Var const__775;
  
  public static final AFn const__777;
  
  public static final Var const__778;
  
  public static final AFn const__780;
  
  public static final Var const__781;
  
  public static final AFn const__783;
  
  public static final AFn const__786;
  
  public static final AFn const__789;
  
  public static final Var const__790;
  
  public static final AFn const__792;
  
  public static final Var const__793;
  
  public static final AFn const__795;
  
  public static final Var const__796;
  
  public static final AFn const__798;
  
  public static final AFn const__801;
  
  public static final AFn const__804;
  
  public static final Var const__805;
  
  public static final AFn const__807;
  
  public static final Var const__808;
  
  public static final AFn const__810;
  
  public static final Var const__811;
  
  public static final AFn const__813;
  
  public static final Var const__814;
  
  public static final AFn const__816;
  
  public static final Var const__817;
  
  public static final AFn const__819;
  
  public static final Var const__820;
  
  public static final AFn const__822;
  
  public static final Var const__823;
  
  public static final AFn const__825;
  
  public static final Var const__826;
  
  public static final AFn const__828;
  
  public static final Var const__829;
  
  public static final AFn const__831;
  
  public static final Var const__832;
  
  public static final AFn const__834;
  
  public static final Var const__835;
  
  public static final AFn const__837;
  
  public static final Var const__838;
  
  public static final AFn const__840;
  
  public static final Var const__841;
  
  public static final AFn const__843;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new specter.fn__43483());
    const__3.setMeta((IPersistentMap)const__12);
    const__3.bindRoot(new specter.static_path_QMARK_());
    const__13.setMeta((IPersistentMap)const__16);
    const__13.bindRoot(new specter.wrap_dynamic_nav());
    const__17.setMeta((IPersistentMap)const__21);
    const__17.bindRoot(new specter.defmacroalias());
    ((Var)const__17)






















































      
      .setMacro();
    const__22.setMeta((IPersistentMap)const__24);
    const__22.bindRoot(const__25);
    const__30.setMeta((IPersistentMap)const__32);
    const__30.bindRoot(const__33);
    const__35.setMeta((IPersistentMap)const__37);
    const__35.bindRoot(const__38);
    const__40.setMeta((IPersistentMap)const__42);
    const__40.bindRoot(const__43);
    const__45.setMeta((IPersistentMap)const__48);
    const__45.bindRoot(new specter.collector());
    ((Var)const__45)
      
      .setMacro();
    const__49.setMeta((IPersistentMap)const__52);
    const__49.bindRoot(new specter.defcollector());
    ((Var)const__49)





      
      .setMacro();
    const__53.setMeta((IPersistentMap)const__56);
    const__53.bindRoot(new specter.late_bound_operation());
    const__57.setMeta((IPersistentMap)const__60);
    const__57.bindRoot(new specter.late_bound_nav());
    ((Var)const__57)












      
      .setMacro();
    const__61.setMeta((IPersistentMap)const__64);
    const__61.bindRoot(new specter.late_bound_collector());
    ((Var)const__61)

      
      .setMacro();
    const__65.setMeta((IPersistentMap)const__68);
    const__65.bindRoot(new specter.late_bound_richnav());
    ((Var)const__65)

      
      .setMacro();
    const__69.setMeta((IPersistentMap)const__72);
    const__69.bindRoot(new specter.with_inline_debug());
    ((Var)const__69)

      
      .setMacro();
    const__73.setMeta((IPersistentMap)const__76);
    const__73.bindRoot(new specter.declarepath());
    ((Var)const__73)


      
      .setMacro();
    const__77.setMeta((IPersistentMap)const__80);
    const__77.bindRoot(new specter.providepath());
    ((Var)const__77)

      
      .setMacro();
    const__81.setMeta((IPersistentMap)const__84);
    const__81.bindRoot(new specter.recursive_path());
    ((Var)const__81)

      
      .setMacro();
    const__85.setMeta((IPersistentMap)const__89);
    const__85.bindRoot(new specter.name_with_attributes());
    const__90.setMeta((IPersistentMap)const__93);
    const__90.bindRoot(new specter.dynamicnav());
    ((Var)const__90)



































      
      .setMacro();
    const__94.setMeta((IPersistentMap)const__97);
    const__94.bindRoot(new specter.defdynamicnav());
    ((Var)const__94)

      
      .setMacro();
    const__98.setMeta((IPersistentMap)const__101);
    const__98.bindRoot(new specter.ic_prepare_path());
    const__102.setMeta((IPersistentMap)const__105);
    const__102.bindRoot(new specter.ic_possible_params());
    const__106.setMeta((IPersistentMap)const__109);
    const__106.bindRoot(new specter.cljs_macroexpand());
    const__110.setMeta((IPersistentMap)const__113);
    const__110.bindRoot(new specter.cljs_macroexpand_all_STAR_());
    const__114.setMeta((IPersistentMap)const__117);
    const__114.bindRoot(new specter.cljs_macroexpand_all());
    const__118.setMeta((IPersistentMap)const__121);
    const__118.bindRoot(new specter.path());
    ((Var)const__118)



















































































      
      .setMacro();
    const__122.setMeta((IPersistentMap)const__125);
    const__122.bindRoot(new specter.select());
    ((Var)const__122)













































































      
      .setMacro();
    const__126.setMeta((IPersistentMap)const__129);
    const__126.bindRoot(new specter.select_one_BANG_());
    ((Var)const__126)




      
      .setMacro();
    const__130.setMeta((IPersistentMap)const__133);
    const__130.bindRoot(new specter.select_one());
    ((Var)const__130)




      
      .setMacro();
    const__134.setMeta((IPersistentMap)const__137);
    const__134.bindRoot(new specter.select_first());
    ((Var)const__134)




      
      .setMacro();
    const__138.setMeta((IPersistentMap)const__141);
    const__138.bindRoot(new specter.select_any());
    ((Var)const__138)




      
      .setMacro();
    const__142.setMeta((IPersistentMap)const__145);
    const__142.bindRoot(new specter.selected_any_QMARK_());
    ((Var)const__142)





      
      .setMacro();
    const__146.setMeta((IPersistentMap)const__149);
    const__146.bindRoot(new specter.transform());
    ((Var)const__146)




      
      .setMacro();
    const__150.setMeta((IPersistentMap)const__153);
    const__150.bindRoot(new specter.vtransform());
    ((Var)const__150)





      
      .setMacro();
    const__154.setMeta((IPersistentMap)const__157);
    const__154.bindRoot(new specter.multi_transform());
    ((Var)const__154)




      
      .setMacro();
    const__158.setMeta((IPersistentMap)const__161);
    const__158.bindRoot(new specter.setval());
    ((Var)const__158)








      
      .setMacro();
    const__162.setMeta((IPersistentMap)const__165);
    const__162.bindRoot(new specter.traverse());
    ((Var)const__162)




      
      .setMacro();
    const__166.setMeta((IPersistentMap)const__169);
    const__166.bindRoot(new specter.traverse_all());
    ((Var)const__166)





      
      .setMacro();
    const__170.setMeta((IPersistentMap)const__173);
    const__170.bindRoot(new specter.replace_in());
    ((Var)const__170)



      
      .setMacro();
    const__174.setMeta((IPersistentMap)const__177);
    const__174.bindRoot(new specter.collected_QMARK_());
    ((Var)const__174)








      
      .setMacro();
    const__178.setMeta((IPersistentMap)const__181);
    const__178.bindRoot(new specter.protpath_sym());
    const__182.setMeta((IPersistentMap)const__185);
    const__182.bindRoot(new specter.protpath_meth_sym());
    const__186.setMeta((IPersistentMap)const__189);
    const__186.bindRoot(new specter.defprotocolpath());
    ((Var)const__186)














      
      .setMacro();
    const__190.setMeta((IPersistentMap)const__193);
    const__190.bindRoot(new specter.satisfies_protpath_QMARK_());
    ((Var)const__190)


































      
      .setMacro();
    const__194.setMeta((IPersistentMap)const__197);
    const__194.bindRoot(new specter.extend_protocolpath_STAR_());
    const__198.setMeta((IPersistentMap)const__201);
    const__198.bindRoot(new specter.extend_protocolpath());
    ((Var)const__198)








      
      .setMacro();
    const__202.setMeta((IPersistentMap)const__206);
    const__202.bindRoot(new specter.end_fn());
    ((Var)const__202)







      
      .setMacro();
    const__207.setMeta((IPersistentMap)const__210);
    const__207.bindRoot(new specter.comp_paths());
    const__211.setMeta((IPersistentMap)const__213);
    const__211.bindRoot(const__214.getRawRoot());
    const__215.setMeta((IPersistentMap)const__218);
    const__215.bindRoot(new specter.select_STAR_());
    const__219.setMeta((IPersistentMap)const__221);
    const__219.bindRoot(const__222.getRawRoot());
    const__223.setMeta((IPersistentMap)const__226);
    const__223.bindRoot(new specter.select_one_STAR_());
    const__227.setMeta((IPersistentMap)const__229);
    const__227.bindRoot(const__230.getRawRoot());
    const__231.setMeta((IPersistentMap)const__234);
    const__231.bindRoot(new specter.select_one_BANG__STAR_());
    const__235.setMeta((IPersistentMap)const__237);
    const__235.bindRoot(const__238.getRawRoot());
    const__239.setMeta((IPersistentMap)const__242);
    const__239.bindRoot(new specter.select_first_STAR_());
    const__243.setMeta((IPersistentMap)const__245);
    const__243.bindRoot(const__246.getRawRoot());
    const__247.setMeta((IPersistentMap)const__249);
    const__247.bindRoot(const__250.getRawRoot());
    const__251.setMeta((IPersistentMap)const__254);
    const__251.bindRoot(new specter.select_any_STAR_());
    const__255.setMeta((IPersistentMap)const__257);
    const__255.bindRoot(const__258.getRawRoot());
    const__259.setMeta((IPersistentMap)const__262);
    const__259.bindRoot(new specter.selected_any_QMARK__STAR_());
    const__263.setMeta((IPersistentMap)const__265);
    const__263.bindRoot(const__266.getRawRoot());
    const__267.setMeta((IPersistentMap)const__270);
    const__267.bindRoot(new specter.traverse_STAR_());
    const__271.setMeta((IPersistentMap)const__273);
    const__271.bindRoot(const__274.getRawRoot());
    const__275.setMeta((IPersistentMap)const__278);
    const__275.bindRoot(new specter.traverse_all_STAR_());
    const__279.setMeta((IPersistentMap)const__281);
    const__279.bindRoot(const__282.getRawRoot());
    const__283.setMeta((IPersistentMap)const__285);
    const__283.bindRoot(const__286.getRawRoot());
    const__287.setMeta((IPersistentMap)const__290);
    const__287.bindRoot(new specter.transform_STAR_());
    const__291.setMeta((IPersistentMap)const__293);
    const__291.bindRoot(const__294.getRawRoot());
    const__295.setMeta((IPersistentMap)const__298);
    const__295.bindRoot(new specter.multi_transform_STAR_());
    const__299.setMeta((IPersistentMap)const__301);
    const__299.bindRoot(const__302.getRawRoot());
    const__303.setMeta((IPersistentMap)const__306);
    const__303.bindRoot(new specter.setval_STAR_());
    const__307.setMeta((IPersistentMap)const__309);
    const__307.bindRoot(const__310.getRawRoot());
    const__311.setMeta((IPersistentMap)const__314);
    const__311.bindRoot(new specter.replace_in_STAR_());
    const__315.setMeta((IPersistentMap)const__317);
    const__315.bindRoot(const__318.getRawRoot());
    const__319.setMeta((IPersistentMap)const__321);
    const__319.bindRoot(const__322.getRawRoot());
    const__323.setMeta((IPersistentMap)const__325);
    const__323.bindRoot(const__326.getRawRoot());
    const__327.setMeta((IPersistentMap)const__329);
    const__327














































































































































      
      .bindRoot(((IFn)const__330.getRawRoot()).invoke(((IFn)const__13.getRawRoot()).invoke(new specter.fn__43629()), const__331.getRawRoot(), const__332, Boolean.TRUE));
    const__333.setMeta((IPersistentMap)const__335);
    const__333.bindRoot(const__336.getRawRoot());
    const__337.setMeta((IPersistentMap)const__341);
    const__342.setMeta((IPersistentMap)const__344);
    const__337.setMeta((IPersistentMap)const__347);
    const__337.bindRoot(new specter.STOP_select_STAR_());
    const__342.setMeta((IPersistentMap)const__350);
    const__342.bindRoot(new specter.STOP_transform_STAR_());
    const__351.setMeta((IPersistentMap)const__353);
    const__351.bindRoot(new specter.reify__43635(null));
    const__354.setMeta((IPersistentMap)const__356);
    const__354.bindRoot(const__357.getRawRoot());
    const__358.setMeta((IPersistentMap)const__360);
    const__358





































      
      .bindRoot(((IFn)const__361.getRawRoot()).invoke(new specter.fn__43641()));
    const__362.setMeta((IPersistentMap)const__364);
    const__362











      
      .bindRoot(((IFn)const__361.getRawRoot()).invoke(new specter.fn__43645()));
    const__365.setMeta((IPersistentMap)const__369);
    const__365.bindRoot(new specter.terminal_val());
    const__370.setMeta((IPersistentMap)const__372);
    const__373.setMeta((IPersistentMap)const__375);
    const__370.setMeta((IPersistentMap)const__378);
    const__370.bindRoot(new specter.ALL_select_STAR_());
    const__373.setMeta((IPersistentMap)const__381);
    const__373.bindRoot(new specter.ALL_transform_STAR_());
    const__382.setMeta((IPersistentMap)const__384);
    const__382.bindRoot(new specter.reify__43652(null));
    const__385.setMeta((IPersistentMap)const__387);
    const__388.setMeta((IPersistentMap)const__390);
    const__385.setMeta((IPersistentMap)const__393);
    const__385.bindRoot(new specter.ALL_WITH_META_select_STAR_());
    const__388.setMeta((IPersistentMap)const__396);
    const__388.bindRoot(new specter.ALL_WITH_META_transform_STAR_());
    const__397.setMeta((IPersistentMap)const__399);
    const__397.bindRoot(new specter.reify__43660(null));
    const__400.setMeta((IPersistentMap)const__402);
    const__403.setMeta((IPersistentMap)const__405);
    const__400.setMeta((IPersistentMap)const__408);
    const__400.bindRoot(new specter.MAP_VALS_select_STAR_());
    const__403.setMeta((IPersistentMap)const__411);
    const__403.bindRoot(new specter.MAP_VALS_transform_STAR_());
    const__412.setMeta((IPersistentMap)const__414);
    const__412.bindRoot(new specter.reify__43671(null));
    const__415.setMeta((IPersistentMap)const__417);
    const__418.setMeta((IPersistentMap)const__420);
    const__415.setMeta((IPersistentMap)const__423);
    const__415.bindRoot(new specter.MAP_KEYS_select_STAR_());
    const__418.setMeta((IPersistentMap)const__426);
    const__418.bindRoot(new specter.MAP_KEYS_transform_STAR_());
    const__427.setMeta((IPersistentMap)const__429);
    const__427.bindRoot(new specter.reify__43685(null));
    const__430.setMeta((IPersistentMap)const__432);
    const__430.bindRoot(new specter.reify__43694(null));
    const__433.setMeta((IPersistentMap)const__435);
    const__433
































































      
      .bindRoot(((IFn)const__436.getRawRoot()).invoke(const__437.getRawRoot(), const__438.getRawRoot()));
    const__439.setMeta((IPersistentMap)const__441);
    const__439




      
      .bindRoot(((IFn)const__436.getRawRoot()).invoke(const__442.getRawRoot(), const__443.getRawRoot()));
    const__444.setMeta((IPersistentMap)const__446);
    const__447.setMeta((IPersistentMap)const__449);
    const__444.setMeta((IPersistentMap)const__452);
    const__444.bindRoot(new specter.srange_dynamic_select_STAR_());
    const__447.setMeta((IPersistentMap)const__455);
    const__447.bindRoot(new specter.srange_dynamic_transform_STAR_());
    const__456.setMeta((IPersistentMap)const__458);
    const__456
      
      .bindRoot(((IFn)const__361.getRawRoot()).invoke(new specter.fn__43698()));
    const__459.setMeta((IPersistentMap)const__461);
    const__462.setMeta((IPersistentMap)const__464);
    const__459.setMeta((IPersistentMap)const__467);
    const__459.bindRoot(new specter.srange_select_STAR_());
    const__462.setMeta((IPersistentMap)const__470);
    const__462.bindRoot(new specter.srange_transform_STAR_());
    const__471.setMeta((IPersistentMap)const__473);
    const__471












      
      .bindRoot(((IFn)const__361.getRawRoot()).invoke(new specter.fn__43708()));
    const__474.setMeta((IPersistentMap)const__476);
    const__477.setMeta((IPersistentMap)const__479);
    const__474.setMeta((IPersistentMap)const__482);
    const__474.bindRoot(new specter.continuous_subseqs_select_STAR_());
    const__477.setMeta((IPersistentMap)const__485);
    const__477.bindRoot(new specter.continuous_subseqs_transform_STAR_());
    const__486.setMeta((IPersistentMap)const__488);
    const__486









      
      .bindRoot(((IFn)const__361.getRawRoot()).invoke(new specter.fn__43725()));
    const__489.setMeta((IPersistentMap)const__491);
    const__492.setMeta((IPersistentMap)const__494);
    const__489.setMeta((IPersistentMap)const__497);
    const__489.bindRoot(new specter.BEGINNING_select_STAR_());
    const__492.setMeta((IPersistentMap)const__500);
    const__492.bindRoot(new specter.BEGINNING_transform_STAR_());
    const__501.setMeta((IPersistentMap)const__503);
    const__501.bindRoot(new specter.reify__43742(null));
    const__504.setMeta((IPersistentMap)const__506);
    const__507.setMeta((IPersistentMap)const__509);
    const__504.setMeta((IPersistentMap)const__512);
    const__504.bindRoot(new specter.END_select_STAR_());
    const__507.setMeta((IPersistentMap)const__515);
    const__507.bindRoot(new specter.END_transform_STAR_());
    const__516.setMeta((IPersistentMap)const__518);
    const__516.bindRoot(new specter.reify__43750(null));
    const__519.setMeta((IPersistentMap)const__521);
    const__522.setMeta((IPersistentMap)const__524);
    const__519.setMeta((IPersistentMap)const__527);
    const__519.bindRoot(new specter.NONE_ELEM_select_STAR_());
    const__522.setMeta((IPersistentMap)const__530);
    const__522.bindRoot(new specter.NONE_ELEM_transform_STAR_());
    const__531.setMeta((IPersistentMap)const__533);
    const__531.bindRoot(new specter.reify__43758(null));
    const__534.setMeta((IPersistentMap)const__536);
    const__537.setMeta((IPersistentMap)const__539);
    const__534.setMeta((IPersistentMap)const__542);
    const__534.bindRoot(new specter.BEFORE_ELEM_select_STAR_());
    const__537.setMeta((IPersistentMap)const__545);
    const__537.bindRoot(new specter.BEFORE_ELEM_transform_STAR_());
    const__546.setMeta((IPersistentMap)const__548);
    const__546.bindRoot(new specter.reify__43766(null));
    const__549.setMeta((IPersistentMap)const__551);
    const__552.setMeta((IPersistentMap)const__554);
    const__549.setMeta((IPersistentMap)const__557);
    const__549.bindRoot(new specter.AFTER_ELEM_select_STAR_());
    const__552.setMeta((IPersistentMap)const__560);
    const__552.bindRoot(new specter.AFTER_ELEM_transform_STAR_());
    const__561.setMeta((IPersistentMap)const__563);
    const__561.bindRoot(new specter.reify__43774(null));
    const__564.setMeta((IPersistentMap)const__566);
    const__567.setMeta((IPersistentMap)const__569);
    const__564.setMeta((IPersistentMap)const__572);
    const__564.bindRoot(new specter.subset_select_STAR_());
    const__567.setMeta((IPersistentMap)const__575);
    const__567.bindRoot(new specter.subset_transform_STAR_());
    const__576.setMeta((IPersistentMap)const__578);
    const__576

















































































      
      .bindRoot(((IFn)const__361.getRawRoot()).invoke(new specter.fn__43782()));
    const__579.setMeta((IPersistentMap)const__581);
    const__582.setMeta((IPersistentMap)const__584);
    const__579.setMeta((IPersistentMap)const__587);
    const__579.bindRoot(new specter.submap_select_STAR_());
    const__582.setMeta((IPersistentMap)const__590);
    const__582.bindRoot(new specter.submap_transform_STAR_());
    const__591.setMeta((IPersistentMap)const__593);
    const__591














      
      .bindRoot(((IFn)const__361.getRawRoot()).invoke(new specter.fn__43792()));
    const__594.setMeta((IPersistentMap)const__596);
    const__594













      
      .bindRoot(((IFn)const__330.getRawRoot()).invoke(((IFn)const__13.getRawRoot()).invoke(new specter.fn__43800()), const__331.getRawRoot(), const__332, Boolean.TRUE));
    const__597.setMeta((IPersistentMap)const__599);
    const__597



























      
      .bindRoot(((IFn)const__361.getRawRoot()).invoke(new specter.fn__43814()));
    const__600.setMeta((IPersistentMap)const__602);
    const__600




















      
      .bindRoot(((IFn)const__361.getRawRoot()).invoke(new specter.fn__43818()));
    const__603.setMeta((IPersistentMap)const__605);
    const__603






















      
      .bindRoot(((IFn)const__327.getRawRoot()).invoke(const__606.getRawRoot()));
    const__607.setMeta((IPersistentMap)const__609);
    const__607




      
      .bindRoot(((IFn)const__327.getRawRoot()).invoke(const__610.getRawRoot()));
    const__611.setMeta((IPersistentMap)const__613);
    const__611



      
      .bindRoot(((IFn)const__327.getRawRoot()).invoke(const__614.getRawRoot()));
    const__615.setMeta((IPersistentMap)const__617);
    const__615
      
      .bindRoot(((IFn)const__361.getRawRoot()).invoke(new specter.fn__43822()));
    const__618.setMeta((IPersistentMap)const__620);
    const__618













      
      .bindRoot(((IFn)const__361.getRawRoot()).invoke(new specter.fn__43836()));
    const__621.setMeta((IPersistentMap)const__623);
    const__624.setMeta((IPersistentMap)const__626);
    const__621.setMeta((IPersistentMap)const__629);
    const__621.bindRoot(new specter.indexed_vals_select_STAR_());
    const__624.setMeta((IPersistentMap)const__632);
    const__624.bindRoot(new specter.indexed_vals_transform_STAR_());
    const__633.setMeta((IPersistentMap)const__635);
    const__633





































      
      .bindRoot(((IFn)const__361.getRawRoot()).invoke(new specter.fn__43914()));
    const__636.setMeta((IPersistentMap)const__638);
    const__636





































      
      .bindRoot(((IFn)const__633.getRawRoot()).invoke(const__639));
    const__640.setMeta((IPersistentMap)const__642);
    const__640
      
      .bindRoot(((IFn)const__361.getRawRoot()).invoke(new specter.fn__43966()));
    const__643.setMeta((IPersistentMap)const__645);
    const__646.setMeta((IPersistentMap)const__648);
    const__643.setMeta((IPersistentMap)const__651);
    const__643.bindRoot(new specter.parser_select_STAR_());
    const__646.setMeta((IPersistentMap)const__654);
    const__646.bindRoot(new specter.parser_transform_STAR_());
    const__655.setMeta((IPersistentMap)const__657);
    const__655








      
      .bindRoot(((IFn)const__361.getRawRoot()).invoke(new specter.fn__43972()));
    const__658.setMeta((IPersistentMap)const__660);
    const__661.setMeta((IPersistentMap)const__663);
    const__658.setMeta((IPersistentMap)const__666);
    const__658.bindRoot(new specter.ATOM_select_STAR_());
    const__661.setMeta((IPersistentMap)const__669);
    const__661.bindRoot(new specter.ATOM_transform_STAR_());
    const__670.setMeta((IPersistentMap)const__672);
    const__670.bindRoot(new specter.reify__43982(null));
    const__673.setMeta((IPersistentMap)const__675);
    const__676.setMeta((IPersistentMap)const__678);
    const__673.setMeta((IPersistentMap)const__681);
    const__673.bindRoot(new specter.regex_nav_select_STAR_());
    const__676.setMeta((IPersistentMap)const__684);
    const__676.bindRoot(new specter.regex_nav_transform_STAR_());
    const__685.setMeta((IPersistentMap)const__687);
    const__685





















      
      .bindRoot(((IFn)const__361.getRawRoot()).invoke(new specter.fn__43993()));
    const__688.setMeta((IPersistentMap)const__690);
    const__688





      
      .bindRoot(((IFn)const__330.getRawRoot()).invoke(((IFn)const__13.getRawRoot()).invoke(new specter.fn__44006()), const__331.getRawRoot(), const__332, Boolean.TRUE));
    const__691.setMeta((IPersistentMap)const__693);
    const__691



















      
      .bindRoot(((IFn)const__330.getRawRoot()).invoke(((IFn)const__13.getRawRoot()).invoke(new specter.fn__44021()), const__331.getRawRoot(), const__332, Boolean.TRUE));
    const__694.setMeta((IPersistentMap)const__696);
    const__694















      
      .bindRoot(((IFn)const__330.getRawRoot()).invoke(((IFn)const__13.getRawRoot()).invoke(new specter.fn__44036()), const__331.getRawRoot(), const__332, Boolean.TRUE));
    const__697.setMeta((IPersistentMap)const__699);
    const__697









      
      .bindRoot(((IFn)const__330.getRawRoot()).invoke(((IFn)const__13.getRawRoot()).invoke(new specter.fn__44038()), const__331.getRawRoot(), const__332, Boolean.TRUE));
    const__700.setMeta((IPersistentMap)const__702);
    const__700









      
      .bindRoot(((IFn)const__330.getRawRoot()).invoke(((IFn)const__13.getRawRoot()).invoke(new specter.fn__44050()), const__331.getRawRoot(), const__332, Boolean.TRUE));
    const__703.setMeta((IPersistentMap)const__705);
    const__703.bindRoot(const__706.getRawRoot());
    const__707.setMeta((IPersistentMap)const__710);
    const__707.bindRoot(new specter.pred_EQ_());
    const__711.setMeta((IPersistentMap)const__714);
    const__711.bindRoot(new specter.pred_LT_());
    const__715.setMeta((IPersistentMap)const__718);
    const__715.bindRoot(new specter.pred_GT_());
    const__719.setMeta((IPersistentMap)const__722);
    const__719.bindRoot(new specter.pred_LT__EQ_());
    const__723.setMeta((IPersistentMap)const__726);
    const__723.bindRoot(new specter.pred_GT__EQ_());
    const__739.setMeta((IPersistentMap)const__741);
    const__742.setMeta((IPersistentMap)const__744);
    const__739.setMeta((IPersistentMap)const__747);
    const__739.bindRoot(new specter.nil__GT_val_select_STAR_());
    const__742.setMeta((IPersistentMap)const__750);
    const__742.bindRoot(new specter.nil__GT_val_transform_STAR_());
    const__751.setMeta((IPersistentMap)const__753);
    const__751


      
      .bindRoot(((IFn)const__361.getRawRoot()).invoke(new specter.fn__44104()));
    const__754.setMeta((IPersistentMap)const__756);
    const__754












      
      .bindRoot(((IFn)const__751.getRawRoot()).invoke(PersistentHashSet.EMPTY));
    const__757.setMeta((IPersistentMap)const__759);
    const__757




      
      .bindRoot(((IFn)const__751.getRawRoot()).invoke(PersistentList.EMPTY));
    const__760.setMeta((IPersistentMap)const__762);
    const__760




      
      .bindRoot(((IFn)const__751.getRawRoot()).invoke(PersistentVector.EMPTY));
    const__763.setMeta((IPersistentMap)const__765);
    const__766.setMeta((IPersistentMap)const__768);
    const__763.setMeta((IPersistentMap)const__771);
    const__763.bindRoot(new specter.META_select_STAR_());
    const__766.setMeta((IPersistentMap)const__774);
    const__766.bindRoot(new specter.META_transform_STAR_());
    const__775.setMeta((IPersistentMap)const__777);
    const__775.bindRoot(new specter.reify__44114(null));
    const__778.setMeta((IPersistentMap)const__780);
    const__781.setMeta((IPersistentMap)const__783);
    const__778.setMeta((IPersistentMap)const__786);
    const__778.bindRoot(new specter.NAME_select_STAR_());
    const__781.setMeta((IPersistentMap)const__789);
    const__781.bindRoot(new specter.NAME_transform_STAR_());
    const__790.setMeta((IPersistentMap)const__792);
    const__790.bindRoot(new specter.reify__44122(null));
    const__793.setMeta((IPersistentMap)const__795);
    const__796.setMeta((IPersistentMap)const__798);
    const__793.setMeta((IPersistentMap)const__801);
    const__793.bindRoot(new specter.NAMESPACE_select_STAR_());
    const__796.setMeta((IPersistentMap)const__804);
    const__796.bindRoot(new specter.NAMESPACE_transform_STAR_());
    const__805.setMeta((IPersistentMap)const__807);
    const__805.bindRoot(new specter.reify__44130(null));
    const__808.setMeta((IPersistentMap)const__810);
    const__808



































      
      .bindRoot(((IFn)const__330.getRawRoot()).invoke(((IFn)const__13.getRawRoot()).invoke(new specter.fn__44136()), const__331.getRawRoot(), const__332, Boolean.TRUE));
    const__811.setMeta((IPersistentMap)const__813);
    const__811








      
      .bindRoot(((IFn)const__330.getRawRoot()).invoke(((IFn)const__13.getRawRoot()).invoke(new specter.fn__44144()), const__331.getRawRoot(), const__332, Boolean.TRUE));
    const__814.setMeta((IPersistentMap)const__816);
    const__814








      
      .bindRoot(((IFn)const__361.getRawRoot()).invoke(new specter.fn__44152()));
    const__817.setMeta((IPersistentMap)const__819);
    const__817











      
      .bindRoot(((IFn)const__330.getRawRoot()).invoke(((IFn)const__13.getRawRoot()).invoke(new specter.fn__44156()), const__331.getRawRoot(), const__332, Boolean.TRUE));
    const__820.setMeta((IPersistentMap)const__822);
    const__820.bindRoot(new specter.reify__44170(null));
    const__823.setMeta((IPersistentMap)const__825);
    const__823






















      
      .bindRoot(((IFn)const__330.getRawRoot()).invoke(((IFn)const__13.getRawRoot()).invoke(new specter.fn__44174()), const__331.getRawRoot(), const__332, Boolean.TRUE));
    const__826.setMeta((IPersistentMap)const__828);
    const__826











































      
      .bindRoot(((IFn)const__330.getRawRoot()).invoke(((IFn)const__13.getRawRoot()).invoke(new specter.fn__44193()), const__331.getRawRoot(), const__332, Boolean.TRUE));
    const__829.setMeta((IPersistentMap)const__831);
    const__829













      
      .bindRoot(((IFn)const__330.getRawRoot()).invoke(((IFn)const__13.getRawRoot()).invoke(new specter.fn__44201()), const__331.getRawRoot(), const__332, Boolean.TRUE));
    const__832.setMeta((IPersistentMap)const__834);
    const__832






















      
      .bindRoot(((IFn)const__330.getRawRoot()).invoke(((IFn)const__13.getRawRoot()).invoke(new specter.fn__44213()), const__331.getRawRoot(), const__332, Boolean.TRUE));
    const__835.setMeta((IPersistentMap)const__837);
    const__835




      
      .bindRoot(((IFn)const__330.getRawRoot()).invoke(((IFn)const__13.getRawRoot()).invoke(new specter.fn__44215()), const__331.getRawRoot(), const__332, Boolean.TRUE));
    const__838.setMeta((IPersistentMap)const__840);
    const__838









      
      .bindRoot(((IFn)const__361.getRawRoot()).invoke(new specter.fn__44217()));
    const__841.setMeta((IPersistentMap)const__843);
    const__841






      
      .bindRoot(((IFn)const__361.getRawRoot()).invoke(new specter.fn__44229()));
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "com.rpl.specter");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("com.rpl.specter", "static-path?");
    const__12 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "path")) })), RT.keyword(null, "line"), Integer.valueOf(35), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__13 = (Var)RT.var("com.rpl.specter", "wrap-dynamic-nav");
    const__16 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f")) })), RT.keyword(null, "line"), Integer.valueOf(41), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__17 = (Var)RT.var("com.rpl.specter", "defmacroalias");
    const__21 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "name"), Symbol.intern(null, "target")) })), RT.keyword(null, "line"), Integer.valueOf(57), RT.keyword(null, "column"), Integer.valueOf(6), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__22 = (Var)RT.var("com.rpl.specter", "richnav");
    const__24 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(62), RT.keyword(null, "column"), Integer.valueOf(6), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__25 = (Var)RT.var("com.rpl.specter.macros", "richnav");
    const__26 = (Var)RT.var("clojure.core", "alter-meta!");
    const__27 = (Var)RT.var("clojure.core", "merge");
    const__29 = (AFn)RT.map(new Object[] { RT.keyword(null, "macro"), Boolean.TRUE });
    const__30 = (Var)RT.var("com.rpl.specter", "nav");
    const__32 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(63), RT.keyword(null, "column"), Integer.valueOf(6), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__33 = (Var)RT.var("com.rpl.specter.macros", "nav");
    const__34 = (AFn)RT.map(new Object[] { RT.keyword(null, "macro"), Boolean.TRUE });
    const__35 = (Var)RT.var("com.rpl.specter", "defnav");
    const__37 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(64), RT.keyword(null, "column"), Integer.valueOf(6), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__38 = (Var)RT.var("com.rpl.specter.macros", "defnav");
    const__39 = (AFn)RT.map(new Object[] { RT.keyword(null, "macro"), Boolean.TRUE });
    const__40 = (Var)RT.var("com.rpl.specter", "defrichnav");
    const__42 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(65), RT.keyword(null, "column"), Integer.valueOf(6), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__43 = (Var)RT.var("com.rpl.specter.macros", "defrichnav");
    const__44 = (AFn)RT.map(new Object[] { RT.keyword(null, "macro"), Boolean.TRUE });
    const__45 = (Var)RT.var("com.rpl.specter", "collector");
    const__48 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "params"), Tuple.create(Symbol.intern(null, "_"), Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "structure-sym")), Symbol.intern(null, "&"), Symbol.intern(null, "body"))) })), RT.keyword(null, "line"), Integer.valueOf(67), RT.keyword(null, "column"), Integer.valueOf(6), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__49 = (Var)RT.var("com.rpl.specter", "defcollector");
    const__52 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "name"), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "line"), Integer.valueOf(74), RT.keyword(null, "column"), Integer.valueOf(6), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__53 = (Var)RT.var("com.rpl.specter", "late-bound-operation");
    const__56 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "bindings"), Symbol.intern(null, "builder-op"), Symbol.intern(null, "impls")) })), RT.keyword(null, "line"), Integer.valueOf(78), RT.keyword(null, "column"), Integer.valueOf(6), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__57 = (Var)RT.var("com.rpl.specter", "late-bound-nav");
    const__60 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "bindings"), Symbol.intern(null, "&"), Symbol.intern(null, "impls")) })), RT.keyword(null, "line"), Integer.valueOf(88), RT.keyword(null, "column"), Integer.valueOf(6), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__61 = (Var)RT.var("com.rpl.specter", "late-bound-collector");
    const__64 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "bindings"), Symbol.intern(null, "impl")) })), RT.keyword(null, "line"), Integer.valueOf(91), RT.keyword(null, "column"), Integer.valueOf(6), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__65 = (Var)RT.var("com.rpl.specter", "late-bound-richnav");
    const__68 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "bindings"), Symbol.intern(null, "&"), Symbol.intern(null, "impls")) })), RT.keyword(null, "line"), Integer.valueOf(94), RT.keyword(null, "column"), Integer.valueOf(6), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__69 = (Var)RT.var("com.rpl.specter", "with-inline-debug");
    const__72 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "line"), Integer.valueOf(97), RT.keyword(null, "column"), Integer.valueOf(6), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__73 = (Var)RT.var("com.rpl.specter", "declarepath");
    const__76 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "name")) })), RT.keyword(null, "line"), Integer.valueOf(101), RT.keyword(null, "column"), Integer.valueOf(6), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__77 = (Var)RT.var("com.rpl.specter", "providepath");
    const__80 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "name"), Symbol.intern(null, "apath")) })), RT.keyword(null, "line"), Integer.valueOf(104), RT.keyword(null, "column"), Integer.valueOf(6), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__81 = (Var)RT.var("com.rpl.specter", "recursive-path");
    const__84 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "params"), Symbol.intern(null, "self-sym"), Symbol.intern(null, "path")) })), RT.keyword(null, "line"), Integer.valueOf(107), RT.keyword(null, "column"), Integer.valueOf(6), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__85 = (Var)RT.var("com.rpl.specter", "name-with-attributes");
    const__89 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "name"), Symbol.intern(null, "macro-args")) })), RT.keyword(null, "doc"), "To be used in macro definitions.\n       Handles optional docstrings and attribute maps for a name to be defined\n       in a list of macro arguments. If the first macro argument is a string,\n       it is added as a docstring to name and removed from the macro argument\n       list. If afterwards the first macro argument is a map, its entries are\n       added to the name's metadata map and the map is removed from the\n       macro argument list. The return value is a vector containing the name\n       with its extended metadata map and the list of unprocessed macro\n       arguments.", RT.keyword(null, "line"), Integer.valueOf(119), RT.keyword(null, "column"), Integer.valueOf(6), 
          RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__90 = (Var)RT.var("com.rpl.specter", "dynamicnav");
    const__93 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "args")) })), RT.keyword(null, "line"), Integer.valueOf(144), RT.keyword(null, "column"), Integer.valueOf(6), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__94 = (Var)RT.var("com.rpl.specter", "defdynamicnav");
    const__97 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "name"), Symbol.intern(null, "&"), Symbol.intern(null, "args")) })), RT.keyword(null, "doc"), "Defines a function that can choose what navigator to use at runtime based on\n        the dynamic context. The arguments will either be static values or\n        objects satisfying `dynamic-param?`. Use `late-bound-nav` to produce a runtime\n        navigator that uses the values of the dynamic params. See `selected?` for\n        an illustrative example of dynamic navs.", RT.keyword(null, "line"), Integer.valueOf(147), RT.keyword(null, "column"), Integer.valueOf(6), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__98 = (Var)RT.var("com.rpl.specter", "ic-prepare-path");
  }
  
  public static void __init1() {
    const__101 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "locals-set"), Symbol.intern(null, "path")) })), RT.keyword(null, "line"), Integer.valueOf(158), RT.keyword(null, "column"), Integer.valueOf(6), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__102 = (Var)RT.var("com.rpl.specter", "ic-possible-params");
    const__105 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "path")) })), RT.keyword(null, "line"), Integer.valueOf(193), RT.keyword(null, "column"), Integer.valueOf(6), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__106 = (Var)RT.var("com.rpl.specter", "cljs-macroexpand");
    const__109 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "env"), Symbol.intern(null, "form")) })), RT.keyword(null, "line"), Integer.valueOf(212), RT.keyword(null, "column"), Integer.valueOf(6), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__110 = (Var)RT.var("com.rpl.specter", "cljs-macroexpand-all*");
    const__113 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "env"), Symbol.intern(null, "form")) })), RT.keyword(null, "line"), Integer.valueOf(219), RT.keyword(null, "column"), Integer.valueOf(6), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__114 = (Var)RT.var("com.rpl.specter", "cljs-macroexpand-all");
    const__117 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "env"), Symbol.intern(null, "form")) })), RT.keyword(null, "line"), Integer.valueOf(227), RT.keyword(null, "column"), Integer.valueOf(6), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__118 = (Var)RT.var("com.rpl.specter", "path");
    const__121 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "path")) })), RT.keyword(null, "doc"), "Same as calling comp-paths, except it caches the composition of the static parts\n       of the path for later re-use (when possible). For almost all idiomatic uses\n       of Specter provides huge speedup. This macro is automatically used by the\n       select/transform/setval/replace-in/etc. macros.", RT.keyword(null, "line"), Integer.valueOf(232), RT.keyword(null, "column"), Integer.valueOf(6), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__122 = (Var)RT.var("com.rpl.specter", "select");
    const__125 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "apath"), Symbol.intern(null, "structure")) })), RT.keyword(null, "doc"), "Navigates to and returns a sequence of all the elements specified by the path.\n       This macro will do inline caching of the path.", RT.keyword(null, "line"), Integer.valueOf(311), RT.keyword(null, "column"), Integer.valueOf(6), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__126 = (Var)RT.var("com.rpl.specter", "select-one!");
    const__129 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "apath"), Symbol.intern(null, "structure")) })), RT.keyword(null, "doc"), "Returns exactly one element, throws exception if zero or multiple elements found.\n        This macro will do inline caching of the path.", RT.keyword(null, "line"), Integer.valueOf(317), RT.keyword(null, "column"), Integer.valueOf(6), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__130 = (Var)RT.var("com.rpl.specter", "select-one");
    const__133 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "apath"), Symbol.intern(null, "structure")) })), RT.keyword(null, "doc"), "Like select, but returns either one element or nil. Throws exception if multiple elements found.\n        This macro will do inline caching of the path.", RT.keyword(null, "line"), Integer.valueOf(323), RT.keyword(null, "column"), Integer.valueOf(6), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__134 = (Var)RT.var("com.rpl.specter", "select-first");
    const__137 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "apath"), Symbol.intern(null, "structure")) })), RT.keyword(null, "doc"), "Returns first element found.\n        This macro will do inline caching of the path.", RT.keyword(null, "line"), Integer.valueOf(329), RT.keyword(null, "column"), Integer.valueOf(6), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__138 = (Var)RT.var("com.rpl.specter", "select-any");
    const__141 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "apath"), Symbol.intern(null, "structure")) })), RT.keyword(null, "doc"), "Returns any element found or [[NONE]] if nothing selected. This is the most\n       efficient of the various selection operations.\n       This macro will do inline caching of the path.", RT.keyword(null, "line"), Integer.valueOf(335), RT.keyword(null, "column"), Integer.valueOf(6), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__142 = (Var)RT.var("com.rpl.specter", "selected-any?");
    const__145 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "apath"), Symbol.intern(null, "structure")) })), RT.keyword(null, "doc"), "Returns true if any element was selected, false otherwise.\n       This macro will do inline caching of the path.", RT.keyword(null, "line"), Integer.valueOf(342), RT.keyword(null, "column"), Integer.valueOf(6), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__146 = (Var)RT.var("com.rpl.specter", "transform");
    const__149 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "apath"), Symbol.intern(null, "transform-fn"), Symbol.intern(null, "structure")) })), RT.keyword(null, "doc"), "Navigates to each value specified by the path and replaces it by the result of running\n       the transform-fn on it.\n       This macro will do inline caching of the path.", RT.keyword(null, "line"), Integer.valueOf(348), RT.keyword(null, "column"), Integer.valueOf(6), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__150 = (Var)RT.var("com.rpl.specter", "vtransform");
    const__153 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "apath"), Symbol.intern(null, "transform-fn"), Symbol.intern(null, "structure")) })), RT.keyword(null, "doc"), "Navigates to each value specified by the path and replaces it by the result of running\n       the transform-fn on two arguments: the collected values as a vector, and the navigated value.", RT.keyword(null, "line"), Integer.valueOf(355), RT.keyword(null, "column"), Integer.valueOf(6), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__154 = (Var)RT.var("com.rpl.specter", "multi-transform");
    const__157 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "apath"), Symbol.intern(null, "structure")) })), RT.keyword(null, "doc"), "Just like `transform` but expects transform functions to be specified\n       inline in the path using `terminal` or `vterminal`. Error is thrown if navigation finishes\n       at a non-terminal navigator. `terminal-val` is a wrapper around `terminal` and is\n       the `multi-transform` equivalent of `setval`.\n       This macro will do inline caching of the path.", RT.keyword(null, "line"), Integer.valueOf(361), RT.keyword(null, "column"), Integer.valueOf(6), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__158 = (Var)RT.var("com.rpl.specter", "setval");
    const__161 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "apath"), Symbol.intern(null, "aval"), Symbol.intern(null, "structure")) })), RT.keyword(null, "doc"), "Navigates to each value specified by the path and replaces it by `aval`.\n       This macro will do inline caching of the path.", RT.keyword(null, "line"), Integer.valueOf(371), RT.keyword(null, "column"), Integer.valueOf(6), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__162 = (Var)RT.var("com.rpl.specter", "traverse");
    const__165 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "apath"), Symbol.intern(null, "structure")) })), RT.keyword(null, "doc"), "Return a reducible object that traverses over `structure` to every element\n       specified by the path.\n       This macro will do inline caching of the path.", RT.keyword(null, "line"), Integer.valueOf(377), RT.keyword(null, "column"), Integer.valueOf(6), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__166 = (Var)RT.var("com.rpl.specter", "traverse-all");
    const__169 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "apath")) })), RT.keyword(null, "doc"), "Returns a transducer that traverses over each element with the given path.", RT.keyword(null, "line"), Integer.valueOf(384), RT.keyword(null, "column"), Integer.valueOf(6), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__170 = (Var)RT.var("com.rpl.specter", "replace-in");
    const__173 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "apath"), Symbol.intern(null, "transform-fn"), Symbol.intern(null, "structure"), Symbol.intern(null, "&"), Symbol.intern(null, "args")) })), RT.keyword(null, "doc"), "Similar to transform, except returns a pair of [transformed-structure sequence-of-user-ret].\n       The transform-fn in this case is expected to return [ret user-ret]. ret is\n       what's used to transform the data structure, while user-ret will be added to the user-ret sequence\n       in the final return. replace-in is useful for situations where you need to know the specific values\n       of what was transformed in the data structure.\n       This macro will do inline caching of the path.", RT.keyword(null, "line"), Integer.valueOf(389), RT.keyword(null, "column"), Integer.valueOf(6), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__174 = (Var)RT.var("com.rpl.specter", "collected?");
    const__177 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "params"), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "doc"), "Creates a filter function navigator that takes in all the collected values\n       as input. For arguments, can use `(collected? [a b] ...)` syntax to look\n       at each collected value as individual arguments, or `(collected? v ...)` syntax\n       to capture all the collected values as a single vector.", RT.keyword(null, "line"), Integer.valueOf(399), RT.keyword(null, "column"), Integer.valueOf(6), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__178 = (Var)RT.var("com.rpl.specter", "protpath-sym");
    const__181 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "name")) })), RT.keyword(null, "line"), Integer.valueOf(408), RT.keyword(null, "column"), Integer.valueOf(6), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__182 = (Var)RT.var("com.rpl.specter", "protpath-meth-sym");
    const__185 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "name")) })), RT.keyword(null, "line"), Integer.valueOf(411), RT.keyword(null, "column"), Integer.valueOf(6), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__186 = (Var)RT.var("com.rpl.specter", "defprotocolpath");
    const__189 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "name")), Tuple.create(Symbol.intern(null, "name"), Symbol.intern(null, "params")) })), RT.keyword(null, "doc"), "Defines a navigator that chooses the path to take based on the type\n       of the value at the current point. May be specified with parameters to\n       specify that all extensions must require that number of parameters.\n\n       Currently not available for ClojureScript.\n\n       Example of usage:\n       (defrecord SingleAccount [funds])\n       (defrecord FamilyAccount [single-accounts])\n\n       (defprotocolpath FundsPath)\n       (extend-protocolpath FundsPath\n         SingleAccount :funds\n         FamilyAccount [ALL FundsPath]\n         )\n     ", RT.keyword(null, "line"), Integer.valueOf(415), RT.keyword(null, "column"), Integer.valueOf(6), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__190 = (Var)RT.var("com.rpl.specter", "satisfies-protpath?");
    const__193 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "protpath"), Symbol.intern(null, "o")) })), RT.keyword(null, "line"), Integer.valueOf(451), RT.keyword(null, "column"), Integer.valueOf(6), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__194 = (Var)RT.var("com.rpl.specter", "extend-protocolpath*");
    const__197 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "protpath-prot"), Symbol.intern(null, "extensions")) })), RT.keyword(null, "line"), Integer.valueOf(454), RT.keyword(null, "column"), Integer.valueOf(6), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__198 = (Var)RT.var("com.rpl.specter", "extend-protocolpath");
  }
  
  public static void __init2() {
    const__201 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "protpath"), Symbol.intern(null, "&"), Symbol.intern(null, "extensions")) })), RT.keyword(null, "doc"), "Used in conjunction with `defprotocolpath`. See [[defprotocolpath]].", RT.keyword(null, "line"), Integer.valueOf(461), RT.keyword(null, "column"), Integer.valueOf(6), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__202 = (Var)RT.var("com.rpl.specter", "end-fn");
    const__206 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "args")) })), RT.keyword(null, "line"), Integer.valueOf(470), RT.keyword(null, "column"), Integer.valueOf(5), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__207 = (Var)RT.var("com.rpl.specter", "comp-paths");
    const__210 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "apath")) })), RT.keyword(null, "doc"), "Returns a compiled version of the given path for use with\n   compiled-{select/transform/setval/etc.} functions.", RT.keyword(null, "line"), Integer.valueOf(477), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__211 = (Var)RT.var("com.rpl.specter", "compiled-select");
    const__213 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Version of select that takes in a path precompiled with comp-paths", RT.keyword(null, "line"), Integer.valueOf(485), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__214 = (Var)RT.var("com.rpl.specter.impl", "compiled-select*");
    const__215 = (Var)RT.var("com.rpl.specter", "select*");
    const__218 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "path"), Symbol.intern(null, "structure")) })), RT.keyword(null, "doc"), "Navigates to and returns a sequence of all the elements specified by the path.", RT.keyword(null, "line"), Integer.valueOf(488), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__219 = (Var)RT.var("com.rpl.specter", "compiled-select-one");
    const__221 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Version of select-one that takes in a path precompiled with comp-paths", RT.keyword(null, "line"), Integer.valueOf(494), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__222 = (Var)RT.var("com.rpl.specter.impl", "compiled-select-one*");
    const__223 = (Var)RT.var("com.rpl.specter", "select-one*");
    const__226 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "path"), Symbol.intern(null, "structure")) })), RT.keyword(null, "doc"), "Like select, but returns either one element or nil. Throws exception if multiple elements found", RT.keyword(null, "line"), Integer.valueOf(497), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__227 = (Var)RT.var("com.rpl.specter", "compiled-select-one!");
    const__229 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Version of select-one! that takes in a path precompiled with comp-paths", RT.keyword(null, "line"), Integer.valueOf(502), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__230 = (Var)RT.var("com.rpl.specter.impl", "compiled-select-one!*");
    const__231 = (Var)RT.var("com.rpl.specter", "select-one!*");
    const__234 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "path"), Symbol.intern(null, "structure")) })), RT.keyword(null, "doc"), "Returns exactly one element, throws exception if zero or multiple elements found", RT.keyword(null, "line"), Integer.valueOf(505), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__235 = (Var)RT.var("com.rpl.specter", "compiled-select-first");
    const__237 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Version of select-first that takes in a path precompiled with comp-paths", RT.keyword(null, "line"), Integer.valueOf(510), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__238 = (Var)RT.var("com.rpl.specter.impl", "compiled-select-first*");
    const__239 = (Var)RT.var("com.rpl.specter", "select-first*");
    const__242 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "path"), Symbol.intern(null, "structure")) })), RT.keyword(null, "doc"), "Returns first element found.", RT.keyword(null, "line"), Integer.valueOf(514), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__243 = (Var)RT.var("com.rpl.specter", "compiled-select-any");
    const__245 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Version of select-any that takes in a path precompiled with comp-paths", RT.keyword(null, "line"), Integer.valueOf(519), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__246 = (Var)RT.var("com.rpl.specter.impl", "compiled-select-any*");
    const__247 = (Var)RT.var("com.rpl.specter", "NONE");
    const__249 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Global value used to indicate no elements selected during\n             [[select-any]].", RT.keyword(null, "line"), Integer.valueOf(522), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__250 = (Var)RT.var("com.rpl.specter.impl", "NONE");
    const__251 = (Var)RT.var("com.rpl.specter", "select-any*");
    const__254 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "path"), Symbol.intern(null, "structure")) })), RT.keyword(null, "doc"), "Returns any element found or [[NONE]] if nothing selected. This is the most\n   efficient of the various selection operations.", RT.keyword(null, "line"), Integer.valueOf(526), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__255 = (Var)RT.var("com.rpl.specter", "compiled-selected-any?");
    const__257 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Version of selected-any? that takes in a path precompiled with comp-paths", RT.keyword(null, "line"), Integer.valueOf(532), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__258 = (Var)RT.var("com.rpl.specter.impl", "compiled-selected-any?*");
    const__259 = (Var)RT.var("com.rpl.specter", "selected-any?*");
    const__262 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "path"), Symbol.intern(null, "structure")) })), RT.keyword(null, "doc"), "Returns true if any element was selected, false otherwise.", RT.keyword(null, "line"), Integer.valueOf(535), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__263 = (Var)RT.var("com.rpl.specter", "compiled-traverse");
    const__265 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Version of traverse that takes in a path precompiled with comp-paths", RT.keyword(null, "line"), Integer.valueOf(542), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__266 = (Var)RT.var("com.rpl.specter.impl", "do-compiled-traverse");
    const__267 = (Var)RT.var("com.rpl.specter", "traverse*");
    const__270 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "apath"), Symbol.intern(null, "structure")) })), RT.keyword(null, "doc"), "Return a reducible object that traverses over `structure` to every element\n   specified by the path", RT.keyword(null, "line"), Integer.valueOf(545), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__271 = (Var)RT.var("com.rpl.specter", "compiled-traverse-all");
    const__273 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Version of traverse-all that takes in a path precompiled with comp-paths", RT.keyword(null, "line"), Integer.valueOf(551), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__274 = (Var)RT.var("com.rpl.specter.impl", "compiled-traverse-all*");
    const__275 = (Var)RT.var("com.rpl.specter", "traverse-all*");
    const__278 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "apath")) })), RT.keyword(null, "doc"), "Returns a transducer that traverses over each element with the given path.", RT.keyword(null, "line"), Integer.valueOf(554), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__279 = (Var)RT.var("com.rpl.specter", "compiled-transform");
    const__281 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Version of transform that takes in a path precompiled with comp-paths", RT.keyword(null, "line"), Integer.valueOf(561), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__282 = (Var)RT.var("com.rpl.specter.impl", "compiled-transform*");
    const__283 = (Var)RT.var("com.rpl.specter", "compiled-vtransform");
    const__285 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Version of vtransform that takes in a path precompiled with comp-paths", RT.keyword(null, "line"), Integer.valueOf(564), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__286 = (Var)RT.var("com.rpl.specter.impl", "compiled-vtransform*");
    const__287 = (Var)RT.var("com.rpl.specter", "transform*");
    const__290 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "path"), Symbol.intern(null, "transform-fn"), Symbol.intern(null, "structure")) })), RT.keyword(null, "doc"), "Navigates to each value specified by the path and replaces it by the result of running\n  the transform-fn on it", RT.keyword(null, "line"), Integer.valueOf(568), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__291 = (Var)RT.var("com.rpl.specter", "compiled-multi-transform");
    const__293 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Version of `multi-transform` that takes in a path precompiled with `comp-paths`", RT.keyword(null, "line"), Integer.valueOf(574), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__294 = (Var)RT.var("com.rpl.specter.impl", "compiled-multi-transform*");
    const__295 = (Var)RT.var("com.rpl.specter", "multi-transform*");
    const__298 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "path"), Symbol.intern(null, "structure")) })), RT.keyword(null, "doc"), "Just like `transform` but expects transform functions to be specified\n   inline in the path using `terminal` or `vterminal`. Error is thrown if navigation finishes\n   at a non-terminal navigator. `terminal-val` is a wrapper around `terminal` and is\n   the `multi-transform` equivalent of `setval`.", RT.keyword(null, "line"), Integer.valueOf(578), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__299 = (Var)RT.var("com.rpl.specter", "compiled-setval");
  }
  
  public static void __init3() {
    const__301 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Version of setval that takes in a path precompiled with comp-paths", RT.keyword(null, "line"), Integer.valueOf(587), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__302 = (Var)RT.var("com.rpl.specter.impl", "compiled-setval*");
    const__303 = (Var)RT.var("com.rpl.specter", "setval*");
    const__306 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "path"), Symbol.intern(null, "val"), Symbol.intern(null, "structure")) })), RT.keyword(null, "doc"), "Navigates to each value specified by the path and replaces it by val", RT.keyword(null, "line"), Integer.valueOf(590), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__307 = (Var)RT.var("com.rpl.specter", "compiled-replace-in");
    const__309 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Version of replace-in that takes in a path precompiled with comp-paths", RT.keyword(null, "line"), Integer.valueOf(595), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__310 = (Var)RT.var("com.rpl.specter.impl", "compiled-replace-in*");
    const__311 = (Var)RT.var("com.rpl.specter", "replace-in*");
    const__314 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "path"), Symbol.intern(null, "transform-fn"), Symbol.intern(null, "structure"), Symbol.intern(null, "&"), RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "merge-fn")), RT.keyword(null, "or"), RT.map(new Object[] { Symbol.intern(null, "merge-fn"), Symbol.intern(null, "concat") }) })) })), RT.keyword(null, "doc"), "Similar to transform, except returns a pair of [transformed-structure sequence-of-user-ret].\n   The transform-fn in this case is expected to return [ret user-ret]. ret is\n   what's used to transform the data structure, while user-ret will be added to the user-ret sequence\n   in the final return. replace-in is useful for situations where you need to know the specific values\n   of what was transformed in the data structure.", RT.keyword(null, "line"), Integer.valueOf(598), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__315 = (Var)RT.var("com.rpl.specter", "late-path");
    const__317 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(609), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__318 = (Var)RT.var("com.rpl.specter.impl", "late-path");
    const__319 = (Var)RT.var("com.rpl.specter", "dynamic-param?");
    const__321 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(610), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__322 = (Var)RT.var("com.rpl.specter.impl", "dynamic-param?");
    const__323 = (Var)RT.var("com.rpl.specter", "late-resolved-fn");
    const__325 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(611), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__326 = (Var)RT.var("com.rpl.specter.impl", "late-resolved-fn");
    const__327 = (Var)RT.var("com.rpl.specter", "eachnav");
    const__329 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Turns a navigator that takes one argument into a navigator that takes\n          many arguments and uses the same navigator with each argument. There\n          is no performance cost to using this. See implementation of `keypath`", RT.keyword(null, "line"), Integer.valueOf(614), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__330 = (Var)RT.var("clojure.core", "vary-meta");
    const__331 = (Var)RT.var("clojure.core", "assoc");
    const__332 = (Keyword)RT.keyword(null, "dynamicnav");
    const__333 = (Var)RT.var("com.rpl.specter", "local-declarepath");
    const__335 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(627), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__336 = (Var)RT.var("com.rpl.specter.impl", "local-declarepath");
    const__337 = (Var)RT.var("com.rpl.specter", "STOP-select*");
    const__341 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(631), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__342 = (Var)RT.var("com.rpl.specter", "STOP-transform*");
    const__344 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(631), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__347 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "line"), Integer.valueOf(631), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__350 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "line"), Integer.valueOf(631), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__351 = (Var)RT.var("com.rpl.specter", "STOP");
    const__353 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Stops navigation at this point. For selection returns nothing and for\n          transformation returns the structure unchanged", RT.keyword(null, "line"), Integer.valueOf(631), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__354 = (Var)RT.var("com.rpl.specter", "STAY");
    const__356 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Stays navigated at the current point. Essentially a no-op navigator.", RT.keyword(null, "line"), Integer.valueOf(643), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__357 = (Var)RT.var("com.rpl.specter.impl", "STAY*");
    const__358 = (Var)RT.var("com.rpl.specter", "terminal");
    const__360 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Defines an endpoint in the navigation the transform function run. The transform\n          function works just like it does in `transform`, with collected values\n          given as the first arguments", RT.keyword(null, "line"), Integer.valueOf(648), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__361 = (Var)RT.var("com.rpl.specter.impl", "direct-nav-obj");
    const__362 = (Var)RT.var("com.rpl.specter", "vterminal");
    const__364 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Defines an endpoint in the navigation the transform function run.The transform\n          function works differently than it does in `transform`. Rather than receive\n          collected vals spliced in as the first arguments to the function, this function\n          always takes two arguemnts. The first is all collected vals in a vector, and\n          the second is the navigated value.", RT.keyword(null, "line"), Integer.valueOf(659), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__365 = (Var)RT.var("com.rpl.specter", "terminal-val");
    const__369 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "direct-nav"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "v")) })), RT.keyword(null, "doc"), "Like `terminal` but specifies a val to set at the location regardless of\n   the collected values or the value at the location.", RT.keyword(null, "line"), Integer.valueOf(672), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__370 = (Var)RT.var("com.rpl.specter", "ALL-select*");
    const__372 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(678), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__373 = (Var)RT.var("com.rpl.specter", "ALL-transform*");
    const__375 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(678), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__378 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "line"), Integer.valueOf(678), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__381 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "line"), Integer.valueOf(678), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__382 = (Var)RT.var("com.rpl.specter", "ALL");
    const__384 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Navigate to every element of the collection. For maps navigates to\n          a vector of `[key value]`.", RT.keyword(null, "line"), Integer.valueOf(678), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__385 = (Var)RT.var("com.rpl.specter", "ALL-WITH-META-select*");
    const__387 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(688), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__388 = (Var)RT.var("com.rpl.specter", "ALL-WITH-META-transform*");
    const__390 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(688), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__393 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "line"), Integer.valueOf(688), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__396 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "line"), Integer.valueOf(688), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__397 = (Var)RT.var("com.rpl.specter", "ALL-WITH-META");
    const__399 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Same as ALL, except maintains metadata on the structure.", RT.keyword(null, "line"), Integer.valueOf(688), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
  }
  
  public static void __init4() {
    const__400 = (Var)RT.var("com.rpl.specter", "MAP-VALS-select*");
    const__402 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(701), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__403 = (Var)RT.var("com.rpl.specter", "MAP-VALS-transform*");
    const__405 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(701), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__408 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "line"), Integer.valueOf(701), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__411 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "line"), Integer.valueOf(701), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__412 = (Var)RT.var("com.rpl.specter", "MAP-VALS");
    const__414 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Navigate to each value of the map. This is more efficient than\n          navigating via [ALL LAST]", RT.keyword(null, "line"), Integer.valueOf(701), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__415 = (Var)RT.var("com.rpl.specter", "MAP-KEYS-select*");
    const__417 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(712), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__418 = (Var)RT.var("com.rpl.specter", "MAP-KEYS-transform*");
    const__420 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(712), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__423 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "line"), Integer.valueOf(712), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__426 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "line"), Integer.valueOf(712), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__427 = (Var)RT.var("com.rpl.specter", "MAP-KEYS");
    const__429 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Navigate to each key of the map. This is more efficient than\n          navigating via [ALL FIRST]", RT.keyword(null, "line"), Integer.valueOf(712), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__430 = (Var)RT.var("com.rpl.specter", "VAL");
    const__432 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(724), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__433 = (Var)RT.var("com.rpl.specter", "LAST");
    const__435 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Navigate to the last element of the collection. If the collection is\n          empty navigation is stopped at this point.", RT.keyword(null, "line"), Integer.valueOf(728), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__436 = (Var)RT.var("com.rpl.specter.navs", "PosNavigator");
    const__437 = (Var)RT.var("com.rpl.specter.navs", "get-last");
    const__438 = (Var)RT.var("com.rpl.specter.navs", "update-last");
    const__439 = (Var)RT.var("com.rpl.specter", "FIRST");
    const__441 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Navigate to the first element of the collection. If the collection is\n          empty navigation is stopped at this point.", RT.keyword(null, "line"), Integer.valueOf(734), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__442 = (Var)RT.var("com.rpl.specter.navs", "get-first");
    const__443 = (Var)RT.var("com.rpl.specter.navs", "update-first");
    const__444 = (Var)RT.var("com.rpl.specter", "srange-dynamic-select*");
    const__446 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(740), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__447 = (Var)RT.var("com.rpl.specter", "srange-dynamic-transform*");
    const__449 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(740), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__452 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "start-index-fn"), Symbol.intern(null, "end-index-fn"), Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "line"), Integer.valueOf(740), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__455 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "start-index-fn"), Symbol.intern(null, "end-index-fn"), Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "line"), Integer.valueOf(740), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__456 = (Var)RT.var("com.rpl.specter", "srange-dynamic");
    const__458 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Uses start-index-fn and end-index-fn to determine the bounds of the subsequence\n          to select when navigating. `start-index-fn` takes in the structure as input. `end-index-fn`\n          can be one of two forms. If a regular function (e.g. defined with `fn`), it takes in only the structure as input. If a function defined using special `end-fn` macro, it takes in the structure and the result of `start-index-fn`.", RT.keyword(null, "line"), Integer.valueOf(740), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__459 = (Var)RT.var("com.rpl.specter", "srange-select*");
    const__461 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(754), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__462 = (Var)RT.var("com.rpl.specter", "srange-transform*");
    const__464 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(754), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__467 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "start"), Symbol.intern(null, "end"), Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "line"), Integer.valueOf(754), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__470 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "start"), Symbol.intern(null, "end"), Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "line"), Integer.valueOf(754), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__471 = (Var)RT.var("com.rpl.specter", "srange");
    const__473 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Navigates to the subsequence bound by the indexes start (inclusive)\n          and end (exclusive)", RT.keyword(null, "line"), Integer.valueOf(754), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__474 = (Var)RT.var("com.rpl.specter", "continuous-subseqs-select*");
    const__476 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(765), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__477 = (Var)RT.var("com.rpl.specter", "continuous-subseqs-transform*");
    const__479 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(765), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__482 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pred"), Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "line"), Integer.valueOf(765), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__485 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pred"), Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "line"), Integer.valueOf(765), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__486 = (Var)RT.var("com.rpl.specter", "continuous-subseqs");
    const__488 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Navigates to every continuous subsequence of elements matching `pred`", RT.keyword(null, "line"), Integer.valueOf(765), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__489 = (Var)RT.var("com.rpl.specter", "BEGINNING-select*");
    const__491 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(776), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__492 = (Var)RT.var("com.rpl.specter", "BEGINNING-transform*");
    const__494 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(776), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__497 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "line"), Integer.valueOf(776), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
  }
  
  public static void __init5() {
    const__500 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "line"), Integer.valueOf(776), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__501 = (Var)RT.var("com.rpl.specter", "BEGINNING");
    const__503 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Navigate to the empty subsequence before the first element of the collection.", RT.keyword(null, "line"), Integer.valueOf(776), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__504 = (Var)RT.var("com.rpl.specter", "END-select*");
    const__506 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(789), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__507 = (Var)RT.var("com.rpl.specter", "END-transform*");
    const__509 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(789), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__512 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "line"), Integer.valueOf(789), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__515 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "line"), Integer.valueOf(789), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__516 = (Var)RT.var("com.rpl.specter", "END");
    const__518 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Navigate to the empty subsequence after the last element of the collection.", RT.keyword(null, "line"), Integer.valueOf(789), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__519 = (Var)RT.var("com.rpl.specter", "NONE-ELEM-select*");
    const__521 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(801), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__522 = (Var)RT.var("com.rpl.specter", "NONE-ELEM-transform*");
    const__524 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(801), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__527 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "line"), Integer.valueOf(801), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__530 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "line"), Integer.valueOf(801), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__531 = (Var)RT.var("com.rpl.specter", "NONE-ELEM");
    const__533 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Navigate to 'void' elem in the set.\n          For transformations - if result is not `NONE`,\n          then add that value to the set.", RT.keyword(null, "line"), Integer.valueOf(801), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__534 = (Var)RT.var("com.rpl.specter", "BEFORE-ELEM-select*");
    const__536 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(818), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__537 = (Var)RT.var("com.rpl.specter", "BEFORE-ELEM-transform*");
    const__539 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(818), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__542 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "line"), Integer.valueOf(818), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__545 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "line"), Integer.valueOf(818), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__546 = (Var)RT.var("com.rpl.specter", "BEFORE-ELEM");
    const__548 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Navigate to 'void' element before the sequence.\n          For transformations – if result is not `NONE`,\n          then prepend that value.", RT.keyword(null, "line"), Integer.valueOf(818), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__549 = (Var)RT.var("com.rpl.specter", "AFTER-ELEM-select*");
    const__551 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(833), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__552 = (Var)RT.var("com.rpl.specter", "AFTER-ELEM-transform*");
    const__554 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(833), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__557 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "line"), Integer.valueOf(833), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__560 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "line"), Integer.valueOf(833), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__561 = (Var)RT.var("com.rpl.specter", "AFTER-ELEM");
    const__563 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Navigate to 'void' element after the sequence.\n          For transformations – if result is not `NONE`,\n          then append that value.", RT.keyword(null, "line"), Integer.valueOf(833), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__564 = (Var)RT.var("com.rpl.specter", "subset-select*");
    const__566 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(848), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__567 = (Var)RT.var("com.rpl.specter", "subset-transform*");
    const__569 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(848), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__572 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "aset"), Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "line"), Integer.valueOf(848), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__575 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "aset"), Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "line"), Integer.valueOf(848), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__576 = (Var)RT.var("com.rpl.specter", "subset");
    const__578 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Navigates to the specified subset (by taking an intersection).\n          In a transform, that subset in the original set is changed to the\n          new value of the subset.", RT.keyword(null, "line"), Integer.valueOf(848), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__579 = (Var)RT.var("com.rpl.specter", "submap-select*");
    const__581 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(864), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__582 = (Var)RT.var("com.rpl.specter", "submap-transform*");
    const__584 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(864), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__587 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m-keys"), Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "line"), Integer.valueOf(864), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__590 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m-keys"), Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "line"), Integer.valueOf(864), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__591 = (Var)RT.var("com.rpl.specter", "submap");
    const__593 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Navigates to the specified submap (using select-keys).\n          In a transform, that submap in the original map is changed to the new\n          value of the submap.", RT.keyword(null, "line"), Integer.valueOf(864), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__594 = (Var)RT.var("com.rpl.specter", "subselect");
    const__596 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Navigates to a sequence that contains the results of (select ...),\n  but is a view to the original structure that can be transformed.\n\n  Requires that the input navigators will walk the structure's\n  children in the same order when executed on \"select\" and then\n  \"transform\".\n\n  If transformed sequence is smaller than input sequence, missing entries\n  will be filled in with NONE, triggering removal if supported by that navigator.\n\n  Value collection (e.g. collect, collect-one) may not be used in the subpath.", RT.keyword(null, "line"), Integer.valueOf(879), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__597 = (Var)RT.var("com.rpl.specter", "map-key");
    const__599 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Navigates to the given key in the map (not to the value). Navigates only if the\n          key currently exists in the map. Can transform to NONE to remove the key/value\n          pair from the map.", RT.keyword(null, "line"), Integer.valueOf(908), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
  }
  
  public static void __init6() {
    const__600 = (Var)RT.var("com.rpl.specter", "set-elem");
    const__602 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Navigates to the given element in the set only if it exists in the set.\n          Can transform to NONE to remove the element from the set.", RT.keyword(null, "line"), Integer.valueOf(930), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__603 = (Var)RT.var("com.rpl.specter", "keypath");
    const__605 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Navigate to the specified keys one after another. If navigate to NONE,\n             that element is removed from the map or vector.", RT.keyword(null, "line"), Integer.valueOf(951), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__606 = (Var)RT.var("com.rpl.specter.navs", "keypath*");
    const__607 = (Var)RT.var("com.rpl.specter", "must");
    const__609 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Navigate to the specified keys one after another, only if they exist\n             in the data structure. If navigate to NONE, that element is removed\n             from the map or vector.", RT.keyword(null, "line"), Integer.valueOf(956), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__610 = (Var)RT.var("com.rpl.specter.navs", "must*");
    const__611 = (Var)RT.var("com.rpl.specter", "nthpath");
    const__613 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Navigate to the specified indices one after another. If navigate to\n            NONE, that element is removed from the sequence.", RT.keyword(null, "line"), Integer.valueOf(962), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__614 = (Var)RT.var("com.rpl.specter.navs", "nthpath*");
    const__615 = (Var)RT.var("com.rpl.specter", "before-index");
    const__617 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Navigates to the empty space between the index and the prior index. For select\n          navigates to NONE, and transforms to non-NONE insert at that position.", RT.keyword(null, "line"), Integer.valueOf(967), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__618 = (Var)RT.var("com.rpl.specter", "index-nav");
    const__620 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Navigates to the index of the sequence if within 0 and size. Transforms move element\n          at that index to the new index, shifting other elements in the sequence.", RT.keyword(null, "line"), Integer.valueOf(982), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__621 = (Var)RT.var("com.rpl.specter", "indexed-vals-select*");
    const__623 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(1021), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__624 = (Var)RT.var("com.rpl.specter", "indexed-vals-transform*");
    const__626 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(1021), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__629 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "start"), Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "line"), Integer.valueOf(1021), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__632 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "start"), Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "line"), Integer.valueOf(1021), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__633 = (Var)RT.var("com.rpl.specter", "indexed-vals");
    const__635 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Navigate to [index elem] pairs for each element in a sequence. The sequence will be indexed\n          starting from `start`. Changing index in transform has same effect as `index-nav`. Indices seen\n          during transform take into account any shifting from prior sequence elements changing indices.", RT.keyword(null, "line"), Integer.valueOf(1021), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__636 = (Var)RT.var("com.rpl.specter", "INDEXED-VALS");
    const__638 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "`indexed-vals` with a starting index of 0.", RT.keyword(null, "line"), Integer.valueOf(1057), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__639 = Long.valueOf(0L);
    const__640 = (Var)RT.var("com.rpl.specter", "view");
    const__642 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Navigates to result of running `afn` on the currently navigated value.", RT.keyword(null, "line"), Integer.valueOf(1062), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__643 = (Var)RT.var("com.rpl.specter", "parser-select*");
    const__645 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(1072), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__646 = (Var)RT.var("com.rpl.specter", "parser-transform*");
    const__648 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(1072), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__651 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "parse-fn"), Symbol.intern(null, "unparse-fn"), Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "line"), Integer.valueOf(1072), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__654 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "parse-fn"), Symbol.intern(null, "unparse-fn"), Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "line"), Integer.valueOf(1072), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__655 = (Var)RT.var("com.rpl.specter", "parser");
    const__657 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Navigate to the result of running `parse-fn` on the value. For\n          transforms, the transformed value then has `unparse-fn` run on\n          it to get the final value at this point.", RT.keyword(null, "line"), Integer.valueOf(1072), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__658 = (Var)RT.var("com.rpl.specter", "ATOM-select*");
    const__660 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(1084), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__661 = (Var)RT.var("com.rpl.specter", "ATOM-transform*");
    const__663 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(1084), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__666 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "line"), Integer.valueOf(1084), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__669 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "line"), Integer.valueOf(1084), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__670 = (Var)RT.var("com.rpl.specter", "ATOM");
    const__672 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Navigates to atom value.", RT.keyword(null, "line"), Integer.valueOf(1084), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__673 = (Var)RT.var("com.rpl.specter", "regex-nav-select*");
    const__675 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(1095), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__676 = (Var)RT.var("com.rpl.specter", "regex-nav-transform*");
    const__678 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(1095), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__681 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "re"), Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "line"), Integer.valueOf(1095), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__684 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "re"), Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "line"), Integer.valueOf(1095), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__685 = (Var)RT.var("com.rpl.specter", "regex-nav");
    const__687 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(1095), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__688 = (Var)RT.var("com.rpl.specter", "selected?");
    const__690 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Filters the current value based on whether a path finds anything.\n  e.g. (selected? :vals ALL even?) keeps the current element only if an\n  even number exists for the :vals key.", RT.keyword(null, "line"), Integer.valueOf(1102), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__691 = (Var)RT.var("com.rpl.specter", "not-selected?");
    const__693 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(1123), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__694 = (Var)RT.var("com.rpl.specter", "filterer");
    const__696 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Navigates to a view of the current sequence that only contains elements that\n  match the given path. An element matches the selector path if calling select\n  on that element with the path yields anything other than an empty sequence.\n\n  For transformation: `NONE` entries in the result sequence cause corresponding entries in\n  input to be removed. A result sequence smaller than the input sequence is equivalent to\n  padding the result sequence with `NONE` at the end until the same size as the input.", RT.keyword(null, "line"), Integer.valueOf(1140), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__697 = (Var)RT.var("com.rpl.specter", "transformed");
    const__699 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Navigates to a view of the current value by transforming it with the\n   specified path and update-fn.", RT.keyword(null, "line"), Integer.valueOf(1151), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
  }
  
  public static void __init7() {
    const__700 = (Var)RT.var("com.rpl.specter", "traversed");
    const__702 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Navigates to a view of the current value by transforming with a reduction over\n   the specified traversal.", RT.keyword(null, "line"), Integer.valueOf(1162), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__703 = (Var)RT.var("com.rpl.specter", "pred");
    const__705 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Keeps the element only if it matches the supplied predicate. Functions in paths\n          implicitly convert to this navigator.", RT.keyword(null, "direct-nav"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(1174), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__706 = (Var)RT.var("com.rpl.specter.impl", "pred*");
    const__707 = (Var)RT.var("com.rpl.specter", "pred=");
    const__710 = (AFn)RT.map(new Object[] { RT.keyword(null, "direct-nav"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "v")) })), RT.keyword(null, "line"), Integer.valueOf(1182), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__711 = (Var)RT.var("com.rpl.specter", "pred<");
    const__714 = (AFn)RT.map(new Object[] { RT.keyword(null, "direct-nav"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "v")) })), RT.keyword(null, "line"), Integer.valueOf(1183), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__715 = (Var)RT.var("com.rpl.specter", "pred>");
    const__718 = (AFn)RT.map(new Object[] { RT.keyword(null, "direct-nav"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "v")) })), RT.keyword(null, "line"), Integer.valueOf(1184), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__719 = (Var)RT.var("com.rpl.specter", "pred<=");
    const__722 = (AFn)RT.map(new Object[] { RT.keyword(null, "direct-nav"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "v")) })), RT.keyword(null, "line"), Integer.valueOf(1185), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__723 = (Var)RT.var("com.rpl.specter", "pred>=");
    const__726 = (AFn)RT.map(new Object[] { RT.keyword(null, "direct-nav"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "v")) })), RT.keyword(null, "line"), Integer.valueOf(1186), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__727 = (Var)RT.var("clojure.core", "extend");
    const__728 = (Var)RT.var("com.rpl.specter.protocols", "ImplicitNav");
    const__729 = (Keyword)RT.keyword(null, "implicit-nav");
    const__730 = RT.classForName("clojure.lang.Keyword");
    const__731 = RT.classForName("clojure.lang.Symbol");
    const__732 = RT.classForName("java.lang.String");
    const__733 = RT.classForName("java.lang.Number");
    const__734 = RT.classForName("java.lang.Character");
    const__735 = RT.classForName("java.lang.Boolean");
    const__736 = RT.classForName("clojure.lang.AFn");
    const__737 = RT.classForName("clojure.lang.PersistentHashSet");
    const__738 = RT.classForName("java.util.regex.Pattern");
    const__739 = (Var)RT.var("com.rpl.specter", "nil->val-select*");
    const__741 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(1228), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__742 = (Var)RT.var("com.rpl.specter", "nil->val-transform*");
    const__744 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(1228), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__747 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "v"), Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "line"), Integer.valueOf(1228), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__750 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "v"), Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "line"), Integer.valueOf(1228), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__751 = (Var)RT.var("com.rpl.specter", "nil->val");
    const__753 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Navigates to the provided val if the structure is nil. Otherwise it stays\n          navigated at the structure.", RT.keyword(null, "line"), Integer.valueOf(1228), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__754 = (Var)RT.var("com.rpl.specter", "NIL->SET");
    const__756 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Navigates to #{} if the value is nil. Otherwise it stays\n          navigated at the current value.", RT.keyword(null, "line"), Integer.valueOf(1238), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__757 = (Var)RT.var("com.rpl.specter", "NIL->LIST");
    const__759 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Navigates to '() if the value is nil. Otherwise it stays\n          navigated at the current value.", RT.keyword(null, "line"), Integer.valueOf(1244), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__760 = (Var)RT.var("com.rpl.specter", "NIL->VECTOR");
    const__762 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Navigates to [] if the value is nil. Otherwise it stays\n          navigated at the current value.", RT.keyword(null, "line"), Integer.valueOf(1250), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__763 = (Var)RT.var("com.rpl.specter", "META-select*");
    const__765 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(1256), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__766 = (Var)RT.var("com.rpl.specter", "META-transform*");
    const__768 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(1256), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__771 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "line"), Integer.valueOf(1256), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__774 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "line"), Integer.valueOf(1256), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__775 = (Var)RT.var("com.rpl.specter", "META");
    const__777 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Navigates to the metadata of the structure, or nil if\n  the structure has no metadata or may not contain metadata.", RT.keyword(null, "line"), Integer.valueOf(1256), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__778 = (Var)RT.var("com.rpl.specter", "NAME-select*");
    const__780 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(1265), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__781 = (Var)RT.var("com.rpl.specter", "NAME-transform*");
    const__783 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(1265), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__786 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "line"), Integer.valueOf(1265), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__789 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "line"), Integer.valueOf(1265), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__790 = (Var)RT.var("com.rpl.specter", "NAME");
    const__792 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Navigates to the name portion of the keyword or symbol", RT.keyword(null, "line"), Integer.valueOf(1265), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__793 = (Var)RT.var("com.rpl.specter", "NAMESPACE-select*");
    const__795 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(1278), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__796 = (Var)RT.var("com.rpl.specter", "NAMESPACE-transform*");
    const__798 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(1278), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
  }
  
  public static void __init8() {
    const__801 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "line"), Integer.valueOf(1278), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__804 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "structure"), Symbol.intern(null, "next-fn")) })), RT.keyword(null, "line"), Integer.valueOf(1278), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__805 = (Var)RT.var("com.rpl.specter", "NAMESPACE");
    const__807 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Navigates to the namespace portion of the keyword or symbol", RT.keyword(null, "line"), Integer.valueOf(1278), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__808 = (Var)RT.var("com.rpl.specter", "collect");
    const__810 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Adds the result of running select with the given path on the\n          current value to the collected vals.", RT.keyword(null, "line"), Integer.valueOf(1291), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__811 = (Var)RT.var("com.rpl.specter", "collect-one");
    const__813 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Adds the result of running select-one with the given path on the\n          current value to the collected vals.", RT.keyword(null, "line"), Integer.valueOf(1301), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__814 = (Var)RT.var("com.rpl.specter", "putval");
    const__816 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Adds an external value to the collected vals. Useful when additional arguments\n     are required to the transform function that would otherwise require partial\n     application or a wrapper function.\n\n     e.g., incrementing val at path [:a :b] by 3:\n     (transform [:a :b (putval 3)] + some-map)", RT.keyword(null, "line"), Integer.valueOf(1311), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__817 = (Var)RT.var("com.rpl.specter", "with-fresh-collected");
    const__819 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Continues navigating on the given path with the collected vals reset to []. Once\n     navigation leaves the scope of with-fresh-collected, the collected vals revert\n     to what they were before.", RT.keyword(null, "line"), Integer.valueOf(1324), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__820 = (Var)RT.var("com.rpl.specter", "DISPENSE");
    const__822 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Drops all collected values for subsequent navigation.", RT.keyword(null, "line"), Integer.valueOf(1339), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__823 = (Var)RT.var("com.rpl.specter", "if-path");
    const__825 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Like cond-path, but with if semantics.", RT.keyword(null, "line"), Integer.valueOf(1348), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__826 = (Var)RT.var("com.rpl.specter", "cond-path");
    const__828 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Takes in alternating cond-path path cond-path path...\n   Tests the structure if selecting with cond-path returns anything.\n   If so, it uses the following path for this portion of the navigation.\n   Otherwise, it tries the next cond-path. If nothing matches, then the structure\n   is not selected.", RT.keyword(null, "line"), Integer.valueOf(1393), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__829 = (Var)RT.var("com.rpl.specter", "multi-path");
    const__831 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "A path that branches on multiple paths. For updates,\n   applies updates to the paths in order.", RT.keyword(null, "line"), Integer.valueOf(1408), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__832 = (Var)RT.var("com.rpl.specter", "stay-then-continue");
    const__834 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Navigates to the current element and then navigates via the provided path.\n   This can be used to implement pre-order traversal.", RT.keyword(null, "line"), Integer.valueOf(1432), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__835 = (Var)RT.var("com.rpl.specter", "continue-then-stay");
    const__837 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Navigates to the provided path and then to the current element. This can be used\n   to implement post-order traversal.", RT.keyword(null, "line"), Integer.valueOf(1438), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__838 = (Var)RT.var("com.rpl.specter", "walker");
    const__840 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Navigate the data structure until reaching\n          a value for which `afn` returns truthy. Has\n          same semantics as clojure.walk.", RT.keyword(null, "line"), Integer.valueOf(1444), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
    const__841 = (Var)RT.var("com.rpl.specter", "codewalker");
    const__843 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Like `walker` but maintains metadata of any forms traversed.", RT.keyword(null, "line"), Integer.valueOf(1454), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "com/rpl/specter.cljc" });
  }
  
  static  {
    __init0();
    __init1();
    __init2();
    __init3();
    __init4();
    __init5();
    __init6();
    __init7();
    __init8();
    Compiler.pushNSandLoader(RT.classForName("com.rpl.specter__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
