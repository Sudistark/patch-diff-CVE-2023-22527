package com.fasterxml.jackson.databind.jsontype;

import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import java.io.Serializable;

public class DefaultBaseTypeLimitingValidator extends PolymorphicTypeValidator implements Serializable {
  private static final long serialVersionUID = 1L;
  
  public PolymorphicTypeValidator.Validity validateBaseType(MapperConfig<?> config, JavaType baseType) {
    if (isUnsafeBaseType(config, baseType))
      return PolymorphicTypeValidator.Validity.DENIED; 
    return PolymorphicTypeValidator.Validity.INDETERMINATE;
  }
  
  public PolymorphicTypeValidator.Validity validateSubClassName(MapperConfig<?> config, JavaType baseType, String subClassName) { return PolymorphicTypeValidator.Validity.INDETERMINATE; }
  
  public PolymorphicTypeValidator.Validity validateSubType(MapperConfig<?> config, JavaType baseType, JavaType subType) { return isSafeSubType(config, baseType, subType) ? PolymorphicTypeValidator.Validity.ALLOWED : PolymorphicTypeValidator.Validity.DENIED; }
  
  protected boolean isUnsafeBaseType(MapperConfig<?> config, JavaType baseType) { return UnsafeBaseTypes.instance.isUnsafeBaseType(baseType.getRawClass()); }
  
  protected boolean isSafeSubType(MapperConfig<?> config, JavaType baseType, JavaType subType) { return true; }
}
