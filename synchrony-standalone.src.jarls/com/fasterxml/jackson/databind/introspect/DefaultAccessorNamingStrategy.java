package com.fasterxml.jackson.databind.introspect;

import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.cfg.MapperConfig;

public class DefaultAccessorNamingStrategy extends AccessorNamingStrategy {
  protected final MapperConfig<?> _config;
  
  protected final AnnotatedClass _forClass;
  
  protected final BaseNameValidator _baseNameValidator;
  
  protected final boolean _stdBeanNaming;
  
  protected final boolean _isGettersNonBoolean;
  
  protected final String _getterPrefix;
  
  protected final String _isGetterPrefix;
  
  protected final String _mutatorPrefix;
  
  protected DefaultAccessorNamingStrategy(MapperConfig<?> config, AnnotatedClass forClass, String mutatorPrefix, String getterPrefix, String isGetterPrefix, BaseNameValidator baseNameValidator) {
    this._config = config;
    this._forClass = forClass;
    this._stdBeanNaming = config.isEnabled(MapperFeature.USE_STD_BEAN_NAMING);
    this._isGettersNonBoolean = config.isEnabled(MapperFeature.ALLOW_IS_GETTERS_FOR_NON_BOOLEAN);
    this._mutatorPrefix = mutatorPrefix;
    this._getterPrefix = getterPrefix;
    this._isGetterPrefix = isGetterPrefix;
    this._baseNameValidator = baseNameValidator;
  }
  
  public String findNameForIsGetter(AnnotatedMethod am, String name) {
    if (this._isGetterPrefix != null && (
      this._isGettersNonBoolean || _booleanType(am.getType())) && 
      name.startsWith(this._isGetterPrefix))
      return this._stdBeanNaming ? 
        stdManglePropertyName(name, this._isGetterPrefix.length()) : 
        legacyManglePropertyName(name, this._isGetterPrefix.length()); 
    return null;
  }
  
  private boolean _booleanType(JavaType type) {
    if (type.isReferenceType())
      type = type.getReferencedType(); 
    if (type.hasRawClass(boolean.class) || type
      .hasRawClass(Boolean.class) || type
      .hasRawClass(java.util.concurrent.atomic.AtomicBoolean.class))
      return true; 
    return false;
  }
  
  public String findNameForRegularGetter(AnnotatedMethod am, String name) {
    if (this._getterPrefix != null && name.startsWith(this._getterPrefix)) {
      if ("getCallbacks".equals(name)) {
        if (_isCglibGetCallbacks(am))
          return null; 
      } else if ("getMetaClass".equals(name)) {
        if (_isGroovyMetaClassGetter(am))
          return null; 
      } 
      return this._stdBeanNaming ? 
        stdManglePropertyName(name, this._getterPrefix.length()) : 
        legacyManglePropertyName(name, this._getterPrefix.length());
    } 
    return null;
  }
  
  public String findNameForMutator(AnnotatedMethod am, String name) {
    if (this._mutatorPrefix != null && name.startsWith(this._mutatorPrefix))
      return this._stdBeanNaming ? 
        stdManglePropertyName(name, this._mutatorPrefix.length()) : 
        legacyManglePropertyName(name, this._mutatorPrefix.length()); 
    return null;
  }
  
  public String modifyFieldName(AnnotatedField field, String name) { return name; }
  
  protected String legacyManglePropertyName(String basename, int offset) {
    int end = basename.length();
    if (end == offset)
      return null; 
    char c = basename.charAt(offset);
    if (this._baseNameValidator != null && 
      !this._baseNameValidator.accept(c, basename, offset))
      return null; 
    char d = Character.toLowerCase(c);
    if (c == d)
      return basename.substring(offset); 
    StringBuilder sb = new StringBuilder(end - offset);
    sb.append(d);
    int i = offset + 1;
    for (; i < end; i++) {
      c = basename.charAt(i);
      d = Character.toLowerCase(c);
      if (c == d) {
        sb.append(basename, i, end);
        break;
      } 
      sb.append(d);
    } 
    return sb.toString();
  }
  
  protected String stdManglePropertyName(String basename, int offset) {
    int end = basename.length();
    if (end == offset)
      return null; 
    char c0 = basename.charAt(offset);
    if (this._baseNameValidator != null && 
      !this._baseNameValidator.accept(c0, basename, offset))
      return null; 
    char c1 = Character.toLowerCase(c0);
    if (c0 == c1)
      return basename.substring(offset); 
    if (offset + 1 < end && 
      Character.isUpperCase(basename.charAt(offset + 1)))
      return basename.substring(offset); 
    StringBuilder sb = new StringBuilder(end - offset);
    sb.append(c1);
    sb.append(basename, offset + 1, end);
    return sb.toString();
  }
  
  protected boolean _isCglibGetCallbacks(AnnotatedMethod am) {
    Class<?> rt = am.getRawType();
    if (rt.isArray()) {
      Class<?> compType = rt.getComponentType();
      String className = compType.getName();
      if (className.contains(".cglib"))
        return (className.startsWith("net.sf.cglib") || className
          
          .startsWith("org.hibernate.repackage.cglib") || className
          
          .startsWith("org.springframework.cglib")); 
    } 
    return false;
  }
  
  protected boolean _isGroovyMetaClassGetter(AnnotatedMethod am) { return am.getRawType().getName().startsWith("groovy.lang"); }
}
