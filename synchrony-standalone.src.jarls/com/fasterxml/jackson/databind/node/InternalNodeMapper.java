package com.fasterxml.jackson.databind.node;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializable;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.databind.json.JsonMapper;
import java.io.IOException;

final class InternalNodeMapper {
  private static final JsonMapper JSON_MAPPER = new JsonMapper();
  
  private static final ObjectWriter STD_WRITER = JSON_MAPPER.writer();
  
  private static final ObjectWriter PRETTY_WRITER = JSON_MAPPER.writer()
    .withDefaultPrettyPrinter();
  
  private static final ObjectReader NODE_READER = JSON_MAPPER.readerFor(JsonNode.class);
  
  public static String nodeToString(BaseJsonNode n) {
    try {
      return STD_WRITER.writeValueAsString(_wrapper(n));
    } catch (IOException e) {
      throw new RuntimeException(e);
    } 
  }
  
  public static String nodeToPrettyString(BaseJsonNode n) {
    try {
      return PRETTY_WRITER.writeValueAsString(_wrapper(n));
    } catch (IOException e) {
      throw new RuntimeException(e);
    } 
  }
  
  public static byte[] valueToBytes(Object value) throws IOException { return JSON_MAPPER.writeValueAsBytes(value); }
  
  public static JsonNode bytesToNode(byte[] json) throws IOException { return (JsonNode)NODE_READER.readValue(json); }
  
  private static JsonSerializable _wrapper(BaseJsonNode root) { return new WrapperForSerializer(root); }
}
