package com.fasterxml.jackson.databind.ser.std;

import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.EnumValues;

public abstract class StdKeySerializers {
  protected static final JsonSerializer<Object> DEFAULT_KEY_SERIALIZER = new StdKeySerializer();
  
  protected static final JsonSerializer<Object> DEFAULT_STRING_SERIALIZER = new StringKeySerializer();
  
  public static JsonSerializer<Object> getStdKeySerializer(SerializationConfig config, Class<?> rawKeyType, boolean useDefault) {
    if (rawKeyType == null || rawKeyType == Object.class)
      return new Dynamic(); 
    if (rawKeyType == String.class)
      return DEFAULT_STRING_SERIALIZER; 
    if (rawKeyType.isPrimitive())
      rawKeyType = ClassUtil.wrapperType(rawKeyType); 
    if (rawKeyType == Integer.class)
      return new Default(5, rawKeyType); 
    if (rawKeyType == Long.class)
      return new Default(6, rawKeyType); 
    if (rawKeyType.isPrimitive() || Number.class.isAssignableFrom(rawKeyType))
      return new Default(8, rawKeyType); 
    if (rawKeyType == Class.class)
      return new Default(3, rawKeyType); 
    if (java.util.Date.class.isAssignableFrom(rawKeyType))
      return new Default(1, rawKeyType); 
    if (java.util.Calendar.class.isAssignableFrom(rawKeyType))
      return new Default(2, rawKeyType); 
    if (rawKeyType == java.util.UUID.class)
      return new Default(8, rawKeyType); 
    if (rawKeyType == byte[].class)
      return new Default(7, rawKeyType); 
    if (useDefault)
      return new Default(8, rawKeyType); 
    return null;
  }
  
  @Deprecated
  public static JsonSerializer<Object> getFallbackKeySerializer(SerializationConfig config, Class<?> rawKeyType) {
    if (rawKeyType != null) {
      if (rawKeyType == Enum.class)
        return new Dynamic(); 
      if (ClassUtil.isEnumType(rawKeyType))
        return EnumKeySerializer.construct(rawKeyType, 
            EnumValues.constructFromName(config, rawKeyType)); 
    } 
    return new Default(8, rawKeyType);
  }
  
  public static JsonSerializer<Object> getFallbackKeySerializer(SerializationConfig config, Class<?> rawKeyType, AnnotatedClass annotatedClass) {
    if (rawKeyType != null) {
      if (rawKeyType == Enum.class)
        return new Dynamic(); 
      if (ClassUtil.isEnumType(rawKeyType))
        return EnumKeySerializer.construct(rawKeyType, 
            EnumValues.constructFromName(config, rawKeyType), 
            EnumSerializer.constructEnumNamingStrategyValues(config, rawKeyType, annotatedClass)); 
    } 
    return new Default(8, rawKeyType);
  }
  
  @Deprecated
  public static JsonSerializer<Object> getDefault() { return DEFAULT_KEY_SERIALIZER; }
}
