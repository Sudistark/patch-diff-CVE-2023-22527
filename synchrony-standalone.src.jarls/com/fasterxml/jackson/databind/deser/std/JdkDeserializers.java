package com.fasterxml.jackson.databind.deser.std;

import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import java.util.HashSet;

public class JdkDeserializers {
  private static final HashSet<String> _classNames = new HashSet();
  
  static  {
    types = new Class[] { java.util.UUID.class, java.util.concurrent.atomic.AtomicBoolean.class, java.util.concurrent.atomic.AtomicInteger.class, java.util.concurrent.atomic.AtomicLong.class, StackTraceElement.class, java.nio.ByteBuffer.class, Void.class };
    for (Class<?> cls : types)
      _classNames.add(cls.getName()); 
    for (Class<?> cls : FromStringDeserializer.types())
      _classNames.add(cls.getName()); 
  }
  
  @Deprecated
  public static JsonDeserializer<?> find(Class<?> rawType, String clsName) throws JsonMappingException { return find(null, rawType, clsName); }
  
  public static JsonDeserializer<?> find(DeserializationContext ctxt, Class<?> rawType, String clsName) throws JsonMappingException {
    if (_classNames.contains(clsName)) {
      FromStringDeserializer fromStringDeserializer = FromStringDeserializer.findDeserializer(rawType);
      if (fromStringDeserializer != null)
        return fromStringDeserializer; 
      if (rawType == java.util.UUID.class)
        return new UUIDDeserializer(); 
      if (rawType == StackTraceElement.class)
        return StackTraceElementDeserializer.construct(ctxt); 
      if (rawType == java.util.concurrent.atomic.AtomicBoolean.class)
        return new AtomicBooleanDeserializer(); 
      if (rawType == java.util.concurrent.atomic.AtomicInteger.class)
        return new AtomicIntegerDeserializer(); 
      if (rawType == java.util.concurrent.atomic.AtomicLong.class)
        return new AtomicLongDeserializer(); 
      if (rawType == java.nio.ByteBuffer.class)
        return new ByteBufferDeserializer(); 
      if (rawType == Void.class)
        return NullifyingDeserializer.instance; 
    } 
    return null;
  }
  
  public static boolean hasDeserializerFor(Class<?> rawType) { return _classNames.contains(rawType.getName()); }
}
