package com.fasterxml.jackson.databind.deser;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.KeyDeserializer;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.deser.impl.JDKValueInstantiators;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.util.ClassUtil;
import java.io.IOException;
import java.io.Serializable;

public abstract class SettableAnyProperty implements Serializable {
  private static final long serialVersionUID = 1L;
  
  protected final BeanProperty _property;
  
  protected final AnnotatedMember _setter;
  
  protected final boolean _setterIsField;
  
  protected final JavaType _type;
  
  protected JsonDeserializer<Object> _valueDeserializer;
  
  protected final TypeDeserializer _valueTypeDeserializer;
  
  protected final KeyDeserializer _keyDeserializer;
  
  public SettableAnyProperty(BeanProperty property, AnnotatedMember setter, JavaType type, KeyDeserializer keyDeser, JsonDeserializer<Object> valueDeser, TypeDeserializer typeDeser) {
    this._property = property;
    this._setter = setter;
    this._type = type;
    this._valueDeserializer = valueDeser;
    this._valueTypeDeserializer = typeDeser;
    this._keyDeserializer = keyDeser;
    this._setterIsField = setter instanceof com.fasterxml.jackson.databind.introspect.AnnotatedField;
  }
  
  public static SettableAnyProperty constructForMethod(DeserializationContext ctxt, BeanProperty property, AnnotatedMember field, JavaType valueType, KeyDeserializer keyDeser, JsonDeserializer<Object> valueDeser, TypeDeserializer typeDeser) { return new MethodAnyProperty(property, field, valueType, keyDeser, valueDeser, typeDeser); }
  
  public static SettableAnyProperty constructForMapField(DeserializationContext ctxt, BeanProperty property, AnnotatedMember field, JavaType valueType, KeyDeserializer keyDeser, JsonDeserializer<Object> valueDeser, TypeDeserializer typeDeser) {
    Class<?> mapType = field.getRawType();
    if (mapType == java.util.Map.class)
      mapType = java.util.LinkedHashMap.class; 
    ValueInstantiator vi = JDKValueInstantiators.findStdValueInstantiator(ctxt.getConfig(), mapType);
    return new MapFieldAnyProperty(property, field, valueType, keyDeser, valueDeser, typeDeser, vi);
  }
  
  public static SettableAnyProperty constructForJsonNodeField(DeserializationContext ctxt, BeanProperty property, AnnotatedMember field, JavaType valueType, JsonDeserializer<Object> valueDeser) {
    return new JsonNodeFieldAnyProperty(property, field, valueType, valueDeser, ctxt
        
        .getNodeFactory());
  }
  
  public abstract SettableAnyProperty withValueDeserializer(JsonDeserializer<Object> paramJsonDeserializer);
  
  public void fixAccess(DeserializationConfig config) { this._setter.fixAccess(config
        .isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS)); }
  
  Object readResolve() {
    if (this._setter == null || this._setter.getAnnotated() == null)
      throw new IllegalArgumentException("Missing method/field (broken JDK (de)serialization?)"); 
    return this;
  }
  
  public BeanProperty getProperty() { return this._property; }
  
  public boolean hasValueDeserializer() { return (this._valueDeserializer != null); }
  
  public JavaType getType() { return this._type; }
  
  public String getPropertyName() { return this._property.getName(); }
  
  public void deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object instance, String propName) throws IOException {
    try {
      Object key = (this._keyDeserializer == null) ? propName : this._keyDeserializer.deserializeKey(propName, ctxt);
      set(instance, key, deserialize(p, ctxt));
    } catch (UnresolvedForwardReference reference) {
      if (this._valueDeserializer.getObjectIdReader() == null)
        throw JsonMappingException.from(p, "Unresolved forward reference but no identity info.", reference); 
      AnySetterReferring referring = new AnySetterReferring(this, reference, this._type.getRawClass(), instance, propName);
      reference.getRoid().appendReferring(referring);
    } 
  }
  
  public Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {
    if (p.hasToken(JsonToken.VALUE_NULL))
      return this._valueDeserializer.getNullValue(ctxt); 
    if (this._valueTypeDeserializer != null)
      return this._valueDeserializer.deserializeWithType(p, ctxt, this._valueTypeDeserializer); 
    return this._valueDeserializer.deserialize(p, ctxt);
  }
  
  public void set(Object instance, Object propName, Object value) throws IOException {
    try {
      _set(instance, propName, value);
    } catch (IOException e) {
      throw e;
    } catch (Exception e) {
      _throwAsIOE(e, propName, value);
    } 
  }
  
  protected abstract void _set(Object paramObject1, Object paramObject2, Object paramObject3) throws IOException;
  
  protected void _throwAsIOE(Exception e, Object propName, Object value) throws IOException {
    if (e instanceof IllegalArgumentException) {
      String actType = ClassUtil.classNameOf(value);
      StringBuilder msg = (new StringBuilder("Problem deserializing \"any-property\" '")).append(propName);
      msg.append("' of class " + getClassName() + " (expected type: ").append(this._type);
      msg.append("; actual type: ").append(actType).append(")");
      String origMsg = ClassUtil.exceptionMessage(e);
      if (origMsg != null) {
        msg.append(", problem: ").append(origMsg);
      } else {
        msg.append(" (no error message provided)");
      } 
      throw new JsonMappingException(null, msg.toString(), e);
    } 
    ClassUtil.throwIfIOE(e);
    ClassUtil.throwIfRTE(e);
    Throwable t = ClassUtil.getRootCause(e);
    throw new JsonMappingException(null, ClassUtil.exceptionMessage(t), t);
  }
  
  private String getClassName() { return ClassUtil.nameOf(this._setter.getDeclaringClass()); }
  
  public String toString() { return "[any property on class " + getClassName() + "]"; }
}
