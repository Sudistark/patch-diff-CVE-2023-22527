package com.fasterxml.jackson.databind.util;

import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonStreamContext;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.StreamReadConstraints;
import com.fasterxml.jackson.core.StreamWriteCapability;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.json.JsonWriteContext;
import com.fasterxml.jackson.core.util.JacksonFeatureSet;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.cfg.PackageVersion;
import java.io.IOException;
import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.math.BigInteger;

public class TokenBuffer extends JsonGenerator {
  protected static final int DEFAULT_GENERATOR_FEATURES = JsonGenerator.Feature.collectDefaults();
  
  protected ObjectCodec _objectCodec;
  
  protected JsonStreamContext _parentContext;
  
  protected int _generatorFeatures;
  
  protected StreamReadConstraints _streamReadConstraints;
  
  protected boolean _closed;
  
  protected boolean _hasNativeTypeIds;
  
  protected boolean _hasNativeObjectIds;
  
  protected boolean _mayHaveNativeIds;
  
  protected boolean _forceBigDecimal;
  
  protected Segment _first;
  
  protected Segment _last;
  
  protected int _appendAt;
  
  protected Object _typeId;
  
  protected Object _objectId;
  
  protected boolean _hasNativeId;
  
  protected JsonWriteContext _writeContext;
  
  public TokenBuffer(ObjectCodec codec, boolean hasNativeIds) {
    this._streamReadConstraints = StreamReadConstraints.defaults();
    this._hasNativeId = false;
    this._objectCodec = codec;
    this._generatorFeatures = DEFAULT_GENERATOR_FEATURES;
    this._writeContext = JsonWriteContext.createRootContext(null);
    this._first = this._last = new Segment();
    this._appendAt = 0;
    this._hasNativeTypeIds = hasNativeIds;
    this._hasNativeObjectIds = hasNativeIds;
    this._mayHaveNativeIds = (this._hasNativeTypeIds || this._hasNativeObjectIds);
  }
  
  public TokenBuffer(JsonParser p) { this(p, null); }
  
  public TokenBuffer(JsonParser p, DeserializationContext ctxt) {
    this._streamReadConstraints = StreamReadConstraints.defaults();
    this._hasNativeId = false;
    this._objectCodec = p.getCodec();
    this._streamReadConstraints = p.streamReadConstraints();
    this._parentContext = p.getParsingContext();
    this._generatorFeatures = DEFAULT_GENERATOR_FEATURES;
    this._writeContext = JsonWriteContext.createRootContext(null);
    this._first = this._last = new Segment();
    this._appendAt = 0;
    this._hasNativeTypeIds = p.canReadTypeId();
    this._hasNativeObjectIds = p.canReadObjectId();
    this._mayHaveNativeIds = (this._hasNativeTypeIds || this._hasNativeObjectIds);
    this
      ._forceBigDecimal = (ctxt == null) ? false : ctxt.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS);
  }
  
  @Deprecated
  public static TokenBuffer asCopyOfValue(JsonParser p) throws IOException {
    TokenBuffer b = new TokenBuffer(p);
    b.copyCurrentStructure(p);
    return b;
  }
  
  public TokenBuffer overrideParentContext(JsonStreamContext ctxt) {
    this._parentContext = ctxt;
    return this;
  }
  
  public TokenBuffer forceUseOfBigDecimal(boolean b) {
    this._forceBigDecimal = b;
    return this;
  }
  
  public Version version() { return PackageVersion.VERSION; }
  
  public JsonParser asParser() { return asParser(this._objectCodec); }
  
  public JsonParser asParserOnFirstToken() {
    JsonParser p = asParser(this._objectCodec);
    p.nextToken();
    return p;
  }
  
  public JsonParser asParser(ObjectCodec codec) { return new Parser(this._first, codec, this._hasNativeTypeIds, this._hasNativeObjectIds, this._parentContext, this._streamReadConstraints); }
  
  public JsonParser asParser(StreamReadConstraints streamReadConstraints) { return new Parser(this._first, this._objectCodec, this._hasNativeTypeIds, this._hasNativeObjectIds, this._parentContext, streamReadConstraints); }
  
  public JsonParser asParser(JsonParser src) {
    Parser p = new Parser(this._first, src.getCodec(), this._hasNativeTypeIds, this._hasNativeObjectIds, this._parentContext, src.streamReadConstraints());
    p.setLocation(src.getTokenLocation());
    return p;
  }
  
  public JsonToken firstToken() { return this._first.type(0); }
  
  public boolean isEmpty() { return (this._appendAt == 0 && this._first == this._last); }
  
  public TokenBuffer append(TokenBuffer other) throws IOException {
    if (!this._hasNativeTypeIds)
      this._hasNativeTypeIds = other.canWriteTypeId(); 
    if (!this._hasNativeObjectIds)
      this._hasNativeObjectIds = other.canWriteObjectId(); 
    this._mayHaveNativeIds = (this._hasNativeTypeIds || this._hasNativeObjectIds);
    JsonParser p = other.asParser();
    while (p.nextToken() != null)
      copyCurrentStructure(p); 
    return this;
  }
  
  public void serialize(JsonGenerator gen) throws IOException {
    Segment segment = this._first;
    int ptr = -1;
    boolean checkIds = this._mayHaveNativeIds;
    boolean hasIds = (checkIds && segment.hasIds());
    while (true) {
      Object ob, value, ob, n, n;
      if (++ptr >= 16) {
        ptr = 0;
        segment = segment.next();
        if (segment == null)
          break; 
        hasIds = (checkIds && segment.hasIds());
      } 
      JsonToken t = segment.type(ptr);
      if (t == null)
        break; 
      if (hasIds) {
        Object id = segment.findObjectId(ptr);
        if (id != null)
          gen.writeObjectId(id); 
        id = segment.findTypeId(ptr);
        if (id != null)
          gen.writeTypeId(id); 
      } 
      switch (null.$SwitchMap$com$fasterxml$jackson$core$JsonToken[t.ordinal()]) {
        case 1:
          gen.writeStartObject();
          continue;
        case 2:
          gen.writeEndObject();
          continue;
        case 3:
          gen.writeStartArray();
          continue;
        case 4:
          gen.writeEndArray();
          continue;
        case 5:
          ob = segment.get(ptr);
          if (ob instanceof SerializableString) {
            gen.writeFieldName((SerializableString)ob);
            continue;
          } 
          gen.writeFieldName((String)ob);
          continue;
        case 6:
          ob = segment.get(ptr);
          if (ob instanceof SerializableString) {
            gen.writeString((SerializableString)ob);
            continue;
          } 
          gen.writeString((String)ob);
          continue;
        case 7:
          n = segment.get(ptr);
          if (n instanceof Integer) {
            gen.writeNumber(((Integer)n).intValue());
            continue;
          } 
          if (n instanceof BigInteger) {
            gen.writeNumber((BigInteger)n);
            continue;
          } 
          if (n instanceof Long) {
            gen.writeNumber(((Long)n).longValue());
            continue;
          } 
          if (n instanceof Short) {
            gen.writeNumber(((Short)n).shortValue());
            continue;
          } 
          gen.writeNumber(((Number)n).intValue());
          continue;
        case 8:
          n = segment.get(ptr);
          if (n instanceof Double) {
            gen.writeNumber(((Double)n).doubleValue());
            continue;
          } 
          if (n instanceof BigDecimal) {
            gen.writeNumber((BigDecimal)n);
            continue;
          } 
          if (n instanceof Float) {
            gen.writeNumber(((Float)n).floatValue());
            continue;
          } 
          if (n == null) {
            gen.writeNull();
            continue;
          } 
          if (n instanceof String) {
            gen.writeNumber((String)n);
            continue;
          } 
          _reportError(String.format("Unrecognized value type for VALUE_NUMBER_FLOAT: %s, cannot serialize", new Object[] { n
                  
                  .getClass().getName() }));
          continue;
        case 9:
          gen.writeBoolean(true);
          continue;
        case 10:
          gen.writeBoolean(false);
          continue;
        case 11:
          gen.writeNull();
          continue;
        case 12:
          value = segment.get(ptr);
          if (value instanceof RawValue) {
            ((RawValue)value).serialize(gen);
            continue;
          } 
          if (value instanceof com.fasterxml.jackson.databind.JsonSerializable) {
            gen.writeObject(value);
            continue;
          } 
          gen.writeEmbeddedObject(value);
          continue;
      } 
      throw new RuntimeException("Internal error: should never end up through this code path");
    } 
  }
  
  public TokenBuffer deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {
    if (!p.hasToken(JsonToken.FIELD_NAME)) {
      copyCurrentStructure(p);
      return this;
    } 
    writeStartObject();
    JsonToken t;
    do {
      copyCurrentStructure(p);
    } while ((t = p.nextToken()) == JsonToken.FIELD_NAME);
    if (t != JsonToken.END_OBJECT)
      ctxt.reportWrongTokenException(TokenBuffer.class, JsonToken.END_OBJECT, "Expected END_OBJECT after copying contents of a JsonParser into TokenBuffer, got " + t, new Object[0]); 
    writeEndObject();
    return this;
  }
  
  public String toString() {
    int MAX_COUNT = 100;
    StringBuilder sb = new StringBuilder();
    sb.append("[TokenBuffer: ");
    JsonParser jp = asParser();
    int count = 0;
    boolean hasNativeIds = (this._hasNativeTypeIds || this._hasNativeObjectIds);
    while (true) {
      try {
        JsonToken t = jp.nextToken();
        if (t == null)
          break; 
        if (hasNativeIds)
          _appendNativeIds(sb); 
        if (count < 100) {
          if (count > 0)
            sb.append(", "); 
          sb.append(t.toString());
          if (t == JsonToken.FIELD_NAME) {
            sb.append('(');
            sb.append(jp.currentName());
            sb.append(')');
          } 
        } 
      } catch (IOException ioe) {
        throw new IllegalStateException(ioe);
      } 
      count++;
    } 
    if (count >= 100)
      sb.append(" ... (truncated ").append(count - 100).append(" entries)"); 
    sb.append(']');
    return sb.toString();
  }
  
  private final void _appendNativeIds(StringBuilder sb) {
    Object objectId = this._last.findObjectId(this._appendAt - 1);
    if (objectId != null)
      sb.append("[objectId=").append(String.valueOf(objectId)).append(']'); 
    Object typeId = this._last.findTypeId(this._appendAt - 1);
    if (typeId != null)
      sb.append("[typeId=").append(String.valueOf(typeId)).append(']'); 
  }
  
  public JsonGenerator enable(JsonGenerator.Feature f) {
    this._generatorFeatures |= f.getMask();
    return this;
  }
  
  public JsonGenerator disable(JsonGenerator.Feature f) {
    this._generatorFeatures &= (f.getMask() ^ 0xFFFFFFFF);
    return this;
  }
  
  public boolean isEnabled(JsonGenerator.Feature f) { return ((this._generatorFeatures & f.getMask()) != 0); }
  
  public int getFeatureMask() { return this._generatorFeatures; }
  
  @Deprecated
  public JsonGenerator setFeatureMask(int mask) {
    this._generatorFeatures = mask;
    return this;
  }
  
  public JsonGenerator overrideStdFeatures(int values, int mask) {
    int oldState = getFeatureMask();
    this._generatorFeatures = oldState & (mask ^ 0xFFFFFFFF) | values & mask;
    return this;
  }
  
  public JsonGenerator useDefaultPrettyPrinter() { return this; }
  
  public JsonGenerator setCodec(ObjectCodec oc) {
    this._objectCodec = oc;
    return this;
  }
  
  public ObjectCodec getCodec() { return this._objectCodec; }
  
  public final JsonWriteContext getOutputContext() { return this._writeContext; }
  
  public boolean canWriteBinaryNatively() { return true; }
  
  public JacksonFeatureSet<StreamWriteCapability> getWriteCapabilities() { return DEFAULT_WRITE_CAPABILITIES; }
  
  public void flush() throws IOException {}
  
  public void close() throws IOException { this._closed = true; }
  
  public boolean isClosed() { return this._closed; }
  
  public final void writeStartArray() throws IOException {
    this._writeContext.writeValue();
    _appendStartMarker(JsonToken.START_ARRAY);
    this._writeContext = this._writeContext.createChildArrayContext();
  }
  
  public void writeStartArray(Object forValue) throws IOException {
    this._writeContext.writeValue();
    _appendStartMarker(JsonToken.START_ARRAY);
    this._writeContext = this._writeContext.createChildArrayContext(forValue);
  }
  
  public void writeStartArray(Object forValue, int size) throws IOException {
    this._writeContext.writeValue();
    _appendStartMarker(JsonToken.START_ARRAY);
    this._writeContext = this._writeContext.createChildArrayContext(forValue);
  }
  
  public final void writeEndArray() throws IOException {
    _appendEndMarker(JsonToken.END_ARRAY);
    JsonWriteContext c = this._writeContext.getParent();
    if (c != null)
      this._writeContext = c; 
  }
  
  public final void writeStartObject() throws IOException {
    this._writeContext.writeValue();
    _appendStartMarker(JsonToken.START_OBJECT);
    this._writeContext = this._writeContext.createChildObjectContext();
  }
  
  public void writeStartObject(Object forValue) throws IOException {
    this._writeContext.writeValue();
    _appendStartMarker(JsonToken.START_OBJECT);
    JsonWriteContext ctxt = this._writeContext.createChildObjectContext(forValue);
    this._writeContext = ctxt;
  }
  
  public void writeStartObject(Object forValue, int size) throws IOException {
    this._writeContext.writeValue();
    _appendStartMarker(JsonToken.START_OBJECT);
    JsonWriteContext ctxt = this._writeContext.createChildObjectContext(forValue);
    this._writeContext = ctxt;
  }
  
  public final void writeEndObject() throws IOException {
    _appendEndMarker(JsonToken.END_OBJECT);
    JsonWriteContext c = this._writeContext.getParent();
    if (c != null)
      this._writeContext = c; 
  }
  
  public final void writeFieldName(String name) throws IOException {
    this._writeContext.writeFieldName(name);
    _appendFieldName(name);
  }
  
  public void writeFieldName(SerializableString name) throws IOException {
    this._writeContext.writeFieldName(name.getValue());
    _appendFieldName(name);
  }
  
  public void writeString(String text) throws IOException {
    if (text == null) {
      writeNull();
    } else {
      _appendValue(JsonToken.VALUE_STRING, text);
    } 
  }
  
  public void writeString(char[] text, int offset, int len) throws IOException { writeString(new String(text, offset, len)); }
  
  public void writeString(SerializableString text) throws IOException {
    if (text == null) {
      writeNull();
    } else {
      _appendValue(JsonToken.VALUE_STRING, text);
    } 
  }
  
  public void writeString(Reader reader, int len) throws IOException {
    if (reader == null)
      _reportError("null reader"); 
    int toRead = (len >= 0) ? len : Integer.MAX_VALUE;
    char[] buf = new char[1000];
    StringBuilder sb = new StringBuilder(1000);
    while (toRead > 0) {
      int toReadNow = Math.min(toRead, buf.length);
      int numRead = reader.read(buf, 0, toReadNow);
      if (numRead <= 0)
        break; 
      sb.append(buf, 0, numRead);
      toRead -= numRead;
    } 
    if (toRead > 0 && len >= 0)
      _reportError("Was not able to read enough from reader"); 
    _appendValue(JsonToken.VALUE_STRING, sb.toString());
  }
  
  public void writeRawUTF8String(byte[] text, int offset, int length) throws IOException { _reportUnsupportedOperation(); }
  
  public void writeUTF8String(byte[] text, int offset, int length) throws IOException { _reportUnsupportedOperation(); }
  
  public void writeRaw(String text) throws IOException { _reportUnsupportedOperation(); }
  
  public void writeRaw(String text, int offset, int len) throws IOException { _reportUnsupportedOperation(); }
  
  public void writeRaw(SerializableString text) throws IOException { _reportUnsupportedOperation(); }
  
  public void writeRaw(char[] text, int offset, int len) throws IOException { _reportUnsupportedOperation(); }
  
  public void writeRaw(char c) throws IOException { _reportUnsupportedOperation(); }
  
  public void writeRawValue(String text) throws IOException { _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text)); }
  
  public void writeRawValue(String text, int offset, int len) throws IOException {
    if (offset > 0 || len != text.length())
      text = text.substring(offset, offset + len); 
    _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));
  }
  
  public void writeRawValue(char[] text, int offset, int len) throws IOException { _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len)); }
  
  public void writeNumber(short i) throws IOException { _appendValue(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i)); }
  
  public void writeNumber(int i) throws IOException { _appendValue(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i)); }
  
  public void writeNumber(long l) throws IOException { _appendValue(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l)); }
  
  public void writeNumber(double d) throws IOException { _appendValue(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d)); }
  
  public void writeNumber(float f) throws IOException { _appendValue(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f)); }
  
  public void writeNumber(BigDecimal dec) throws IOException {
    if (dec == null) {
      writeNull();
    } else {
      _appendValue(JsonToken.VALUE_NUMBER_FLOAT, dec);
    } 
  }
  
  public void writeNumber(BigInteger v) throws IOException {
    if (v == null) {
      writeNull();
    } else {
      _appendValue(JsonToken.VALUE_NUMBER_INT, v);
    } 
  }
  
  public void writeNumber(String encodedValue) throws IOException { _appendValue(JsonToken.VALUE_NUMBER_FLOAT, encodedValue); }
  
  private void writeLazyInteger(Object encodedValue) throws IOException { _appendValue(JsonToken.VALUE_NUMBER_INT, encodedValue); }
  
  private void writeLazyDecimal(Object encodedValue) throws IOException { _appendValue(JsonToken.VALUE_NUMBER_FLOAT, encodedValue); }
  
  public void writeBoolean(boolean state) throws IOException { _appendValue(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE); }
  
  public void writeNull() throws IOException { _appendValue(JsonToken.VALUE_NULL); }
  
  public void writeObject(Object value) throws IOException {
    if (value == null) {
      writeNull();
      return;
    } 
    Class<?> raw = value.getClass();
    if (raw == byte[].class || value instanceof RawValue) {
      _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT, value);
      return;
    } 
    if (this._objectCodec == null) {
      _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT, value);
    } else {
      this._objectCodec.writeValue(this, value);
    } 
  }
  
  public void writeTree(TreeNode node) throws IOException {
    if (node == null) {
      writeNull();
      return;
    } 
    if (this._objectCodec == null) {
      _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT, node);
    } else {
      this._objectCodec.writeTree(this, node);
    } 
  }
  
  public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len) throws IOException {
    byte[] copy = new byte[len];
    System.arraycopy(data, offset, copy, 0, len);
    writeObject(copy);
  }
  
  public int writeBinary(Base64Variant b64variant, InputStream data, int dataLength) { throw new UnsupportedOperationException(); }
  
  public boolean canWriteTypeId() { return this._hasNativeTypeIds; }
  
  public boolean canWriteObjectId() { return this._hasNativeObjectIds; }
  
  public void writeTypeId(Object id) throws IOException {
    this._typeId = id;
    this._hasNativeId = true;
  }
  
  public void writeObjectId(Object id) throws IOException {
    this._objectId = id;
    this._hasNativeId = true;
  }
  
  public void writeEmbeddedObject(Object object) throws IOException { _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT, object); }
  
  public void copyCurrentEvent(JsonParser p) {
    if (this._mayHaveNativeIds)
      _checkNativeIds(p); 
    switch (null.$SwitchMap$com$fasterxml$jackson$core$JsonToken[p.currentToken().ordinal()]) {
      case 1:
        writeStartObject();
        return;
      case 2:
        writeEndObject();
        return;
      case 3:
        writeStartArray();
        return;
      case 4:
        writeEndArray();
        return;
      case 5:
        writeFieldName(p.currentName());
        return;
      case 6:
        if (p.hasTextCharacters()) {
          writeString(p.getTextCharacters(), p.getTextOffset(), p.getTextLength());
        } else {
          writeString(p.getText());
        } 
        return;
      case 7:
        switch (null.$SwitchMap$com$fasterxml$jackson$core$JsonParser$NumberType[p.getNumberType().ordinal()]) {
          case 1:
            writeNumber(p.getIntValue());
            return;
          case 2:
            writeLazyInteger(p.getNumberValueDeferred());
            return;
        } 
        writeNumber(p.getLongValue());
        return;
      case 8:
        writeLazyDecimal(p.getNumberValueDeferred());
        return;
      case 9:
        writeBoolean(true);
        return;
      case 10:
        writeBoolean(false);
        return;
      case 11:
        writeNull();
        return;
      case 12:
        writeObject(p.getEmbeddedObject());
        return;
    } 
    throw new RuntimeException("Internal error: unexpected token: " + p.currentToken());
  }
  
  public void copyCurrentStructure(JsonParser p) {
    JsonToken t = p.currentToken();
    if (t == JsonToken.FIELD_NAME) {
      if (this._mayHaveNativeIds)
        _checkNativeIds(p); 
      writeFieldName(p.currentName());
      t = p.nextToken();
    } else if (t == null) {
      throw new IllegalStateException("No token available from argument `JsonParser`");
    } 
    switch (null.$SwitchMap$com$fasterxml$jackson$core$JsonToken[t.ordinal()]) {
      case 3:
        if (this._mayHaveNativeIds)
          _checkNativeIds(p); 
        writeStartArray();
        _copyBufferContents(p);
        return;
      case 1:
        if (this._mayHaveNativeIds)
          _checkNativeIds(p); 
        writeStartObject();
        _copyBufferContents(p);
        return;
      case 4:
        writeEndArray();
        return;
      case 2:
        writeEndObject();
        return;
    } 
    _copyBufferValue(p, t);
  }
  
  protected void _copyBufferContents(JsonParser p) {
    int depth = 1;
    JsonToken t;
    while ((t = p.nextToken()) != null) {
      switch (null.$SwitchMap$com$fasterxml$jackson$core$JsonToken[t.ordinal()]) {
        case 5:
          if (this._mayHaveNativeIds)
            _checkNativeIds(p); 
          writeFieldName(p.currentName());
          continue;
        case 3:
          if (this._mayHaveNativeIds)
            _checkNativeIds(p); 
          writeStartArray();
          depth++;
          continue;
        case 1:
          if (this._mayHaveNativeIds)
            _checkNativeIds(p); 
          writeStartObject();
          depth++;
          continue;
        case 4:
          writeEndArray();
          if (--depth == 0)
            return; 
          continue;
        case 2:
          writeEndObject();
          if (--depth == 0)
            return; 
          continue;
      } 
      _copyBufferValue(p, t);
    } 
  }
  
  private void _copyBufferValue(JsonParser p, JsonToken t) throws IOException {
    if (this._mayHaveNativeIds)
      _checkNativeIds(p); 
    switch (null.$SwitchMap$com$fasterxml$jackson$core$JsonToken[t.ordinal()]) {
      case 6:
        if (p.hasTextCharacters()) {
          writeString(p.getTextCharacters(), p.getTextOffset(), p.getTextLength());
        } else {
          writeString(p.getText());
        } 
        return;
      case 7:
        switch (null.$SwitchMap$com$fasterxml$jackson$core$JsonParser$NumberType[p.getNumberType().ordinal()]) {
          case 1:
            writeNumber(p.getIntValue());
            return;
          case 2:
            writeLazyInteger(p.getNumberValueDeferred());
            return;
        } 
        writeNumber(p.getLongValue());
        return;
      case 8:
        writeLazyDecimal(p.getNumberValueDeferred());
        return;
      case 9:
        writeBoolean(true);
        return;
      case 10:
        writeBoolean(false);
        return;
      case 11:
        writeNull();
        return;
      case 12:
        writeObject(p.getEmbeddedObject());
        return;
    } 
    throw new RuntimeException("Internal error: unexpected token: " + t);
  }
  
  private final void _checkNativeIds(JsonParser p) {
    if ((this._typeId = p.getTypeId()) != null)
      this._hasNativeId = true; 
    if ((this._objectId = p.getObjectId()) != null)
      this._hasNativeId = true; 
  }
  
  protected final void _appendValue(JsonToken type) {
    Segment next;
    this._writeContext.writeValue();
    if (this._hasNativeId) {
      next = this._last.append(this._appendAt, type, this._objectId, this._typeId);
    } else {
      next = this._last.append(this._appendAt, type);
    } 
    if (next == null) {
      this._appendAt++;
    } else {
      this._last = next;
      this._appendAt = 1;
    } 
  }
  
  protected final void _appendValue(JsonToken type, Object value) {
    Segment next;
    this._writeContext.writeValue();
    if (this._hasNativeId) {
      next = this._last.append(this._appendAt, type, value, this._objectId, this._typeId);
    } else {
      next = this._last.append(this._appendAt, type, value);
    } 
    if (next == null) {
      this._appendAt++;
    } else {
      this._last = next;
      this._appendAt = 1;
    } 
  }
  
  protected final void _appendFieldName(Object value) throws IOException {
    Segment next;
    if (this._hasNativeId) {
      next = this._last.append(this._appendAt, JsonToken.FIELD_NAME, value, this._objectId, this._typeId);
    } else {
      next = this._last.append(this._appendAt, JsonToken.FIELD_NAME, value);
    } 
    if (next == null) {
      this._appendAt++;
    } else {
      this._last = next;
      this._appendAt = 1;
    } 
  }
  
  protected final void _appendStartMarker(JsonToken type) {
    Segment next;
    if (this._hasNativeId) {
      next = this._last.append(this._appendAt, type, this._objectId, this._typeId);
    } else {
      next = this._last.append(this._appendAt, type);
    } 
    if (next == null) {
      this._appendAt++;
    } else {
      this._last = next;
      this._appendAt = 1;
    } 
  }
  
  protected final void _appendEndMarker(JsonToken type) {
    Segment next = this._last.append(this._appendAt, type);
    if (next == null) {
      this._appendAt++;
    } else {
      this._last = next;
      this._appendAt = 1;
    } 
  }
  
  protected void _reportUnsupportedOperation() throws IOException { throw new UnsupportedOperationException("Called operation not supported for TokenBuffer"); }
}
