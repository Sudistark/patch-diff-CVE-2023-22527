package com.fasterxml.jackson.core.util;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.io.SerializedString;
import java.io.IOException;
import java.io.Serializable;

public class DefaultPrettyPrinter extends Object implements PrettyPrinter, Instantiatable<DefaultPrettyPrinter>, Serializable {
  private static final long serialVersionUID = 1L;
  
  public static final SerializedString DEFAULT_ROOT_VALUE_SEPARATOR = new SerializedString(" ");
  
  protected Indenter _arrayIndenter;
  
  protected Indenter _objectIndenter;
  
  protected final SerializableString _rootSeparator;
  
  protected boolean _spacesInObjectEntries;
  
  protected int _nesting;
  
  protected Separators _separators;
  
  protected String _objectFieldValueSeparatorWithSpaces;
  
  public DefaultPrettyPrinter() { this(DEFAULT_ROOT_VALUE_SEPARATOR); }
  
  public DefaultPrettyPrinter(String rootSeparator) { this((rootSeparator == null) ? null : new SerializedString(rootSeparator)); }
  
  public DefaultPrettyPrinter(SerializableString rootSeparator) {
    this._arrayIndenter = FixedSpaceIndenter.instance;
    this._objectIndenter = DefaultIndenter.SYSTEM_LINEFEED_INSTANCE;
    this._spacesInObjectEntries = true;
    this._rootSeparator = rootSeparator;
    withSeparators(DEFAULT_SEPARATORS);
  }
  
  public DefaultPrettyPrinter(DefaultPrettyPrinter base) { this(base, base._rootSeparator); }
  
  public DefaultPrettyPrinter(DefaultPrettyPrinter base, SerializableString rootSeparator) {
    this._arrayIndenter = FixedSpaceIndenter.instance;
    this._objectIndenter = DefaultIndenter.SYSTEM_LINEFEED_INSTANCE;
    this._spacesInObjectEntries = true;
    this._arrayIndenter = base._arrayIndenter;
    this._objectIndenter = base._objectIndenter;
    this._spacesInObjectEntries = base._spacesInObjectEntries;
    this._nesting = base._nesting;
    this._separators = base._separators;
    this._objectFieldValueSeparatorWithSpaces = base._objectFieldValueSeparatorWithSpaces;
    this._rootSeparator = rootSeparator;
  }
  
  public DefaultPrettyPrinter withRootSeparator(SerializableString rootSeparator) {
    if (this._rootSeparator == rootSeparator || (rootSeparator != null && rootSeparator
      .equals(this._rootSeparator)))
      return this; 
    return new DefaultPrettyPrinter(this, rootSeparator);
  }
  
  public DefaultPrettyPrinter withRootSeparator(String rootSeparator) { return withRootSeparator((rootSeparator == null) ? null : new SerializedString(rootSeparator)); }
  
  public void indentArraysWith(Indenter i) { this._arrayIndenter = (i == null) ? NopIndenter.instance : i; }
  
  public void indentObjectsWith(Indenter i) { this._objectIndenter = (i == null) ? NopIndenter.instance : i; }
  
  public DefaultPrettyPrinter withArrayIndenter(Indenter i) {
    NopIndenter nopIndenter;
    if (i == null)
      nopIndenter = NopIndenter.instance; 
    if (this._arrayIndenter == nopIndenter)
      return this; 
    DefaultPrettyPrinter pp = new DefaultPrettyPrinter(this);
    pp._arrayIndenter = nopIndenter;
    return pp;
  }
  
  public DefaultPrettyPrinter withObjectIndenter(Indenter i) {
    NopIndenter nopIndenter;
    if (i == null)
      nopIndenter = NopIndenter.instance; 
    if (this._objectIndenter == nopIndenter)
      return this; 
    DefaultPrettyPrinter pp = new DefaultPrettyPrinter(this);
    pp._objectIndenter = nopIndenter;
    return pp;
  }
  
  public DefaultPrettyPrinter withSpacesInObjectEntries() { return _withSpaces(true); }
  
  public DefaultPrettyPrinter withoutSpacesInObjectEntries() { return _withSpaces(false); }
  
  protected DefaultPrettyPrinter _withSpaces(boolean state) {
    if (this._spacesInObjectEntries == state)
      return this; 
    DefaultPrettyPrinter pp = new DefaultPrettyPrinter(this);
    pp._spacesInObjectEntries = state;
    return pp;
  }
  
  public DefaultPrettyPrinter withSeparators(Separators separators) {
    this._separators = separators;
    this._objectFieldValueSeparatorWithSpaces = " " + separators.getObjectFieldValueSeparator() + " ";
    return this;
  }
  
  public DefaultPrettyPrinter createInstance() {
    if (getClass() != DefaultPrettyPrinter.class)
      throw new IllegalStateException("Failed `createInstance()`: " + getClass().getName() + " does not override method; it has to"); 
    return new DefaultPrettyPrinter(this);
  }
  
  public void writeRootValueSeparator(JsonGenerator g) throws IOException {
    if (this._rootSeparator != null)
      g.writeRaw(this._rootSeparator); 
  }
  
  public void writeStartObject(JsonGenerator g) throws IOException {
    g.writeRaw('{');
    if (!this._objectIndenter.isInline())
      this._nesting++; 
  }
  
  public void beforeObjectEntries(JsonGenerator g) throws IOException { this._objectIndenter.writeIndentation(g, this._nesting); }
  
  public void writeObjectFieldValueSeparator(JsonGenerator g) throws IOException {
    if (this._spacesInObjectEntries) {
      g.writeRaw(this._objectFieldValueSeparatorWithSpaces);
    } else {
      g.writeRaw(this._separators.getObjectFieldValueSeparator());
    } 
  }
  
  public void writeObjectEntrySeparator(JsonGenerator g) throws IOException {
    g.writeRaw(this._separators.getObjectEntrySeparator());
    this._objectIndenter.writeIndentation(g, this._nesting);
  }
  
  public void writeEndObject(JsonGenerator g, int nrOfEntries) throws IOException {
    if (!this._objectIndenter.isInline())
      this._nesting--; 
    if (nrOfEntries > 0) {
      this._objectIndenter.writeIndentation(g, this._nesting);
    } else {
      g.writeRaw(' ');
    } 
    g.writeRaw('}');
  }
  
  public void writeStartArray(JsonGenerator g) throws IOException {
    if (!this._arrayIndenter.isInline())
      this._nesting++; 
    g.writeRaw('[');
  }
  
  public void beforeArrayValues(JsonGenerator g) throws IOException { this._arrayIndenter.writeIndentation(g, this._nesting); }
  
  public void writeArrayValueSeparator(JsonGenerator g) throws IOException {
    g.writeRaw(this._separators.getArrayValueSeparator());
    this._arrayIndenter.writeIndentation(g, this._nesting);
  }
  
  public void writeEndArray(JsonGenerator g, int nrOfValues) throws IOException {
    if (!this._arrayIndenter.isInline())
      this._nesting--; 
    if (nrOfValues > 0) {
      this._arrayIndenter.writeIndentation(g, this._nesting);
    } else {
      g.writeRaw(' ');
    } 
    g.writeRaw(']');
  }
}
