package com.mchange.util.impl;

import com.mchange.util.IntEnumeration;
import com.mchange.util.IntObjectMap;

public class IntObjectHash implements IntObjectMap {
  IOHRecord[] records;
  
  int init_capacity;
  
  float load_factor;
  
  int threshold;
  
  int size;
  
  public IntObjectHash(int paramInt, float paramFloat) {
    this.init_capacity = paramInt;
    this.load_factor = paramFloat;
    clear();
  }
  
  public IntObjectHash() { this(101, 0.75F); }
  
  public Object get(int paramInt) {
    int i = getIndex(paramInt);
    Object object = null;
    if (this.records[i] != null)
      object = this.records[i].get(paramInt); 
    return object;
  }
  
  public void put(int paramInt, Object paramObject) {
    if (paramObject == null)
      throw new NullPointerException("Null values not permitted."); 
    int i = getIndex(paramInt);
    if (this.records[i] == null)
      this.records[i] = new IOHRecord(i); 
    boolean bool = this.records[i].add(paramInt, paramObject, true);
    if (!bool)
      this.size++; 
    if (this.size > this.threshold)
      rehash(); 
  }
  
  public boolean putNoReplace(int paramInt, Object paramObject) {
    if (paramObject == null)
      throw new NullPointerException("Null values not permitted."); 
    int i = getIndex(paramInt);
    if (this.records[i] == null)
      this.records[i] = new IOHRecord(i); 
    boolean bool = this.records[i].add(paramInt, paramObject, false);
    if (bool)
      return false; 
    this.size++;
    if (this.size > this.threshold)
      rehash(); 
    return true;
  }
  
  public int getSize() { return this.size; }
  
  public boolean containsInt(int paramInt) {
    int i = getIndex(paramInt);
    return (this.records[i] != null && this.records[i].findInt(paramInt) != null);
  }
  
  private int getIndex(int paramInt) { return Math.abs(paramInt % this.records.length); }
  
  public Object remove(int paramInt) {
    IOHRecord iOHRecord = this.records[getIndex(paramInt)];
    Object object = (iOHRecord == null) ? null : iOHRecord.remove(paramInt);
    if (object != null)
      this.size--; 
    return object;
  }
  
  public void clear() {
    this.records = new IOHRecord[this.init_capacity];
    this.threshold = (int)(this.load_factor * this.init_capacity);
    this.size = 0;
  }
  
  public IntEnumeration ints() { return new Object(this); }
  
  protected void rehash() {
    IOHRecord[] arrayOfIOHRecord = new IOHRecord[this.records.length * 2];
    for (byte b = 0; b < this.records.length; b++) {
      if (this.records[b] != null) {
        arrayOfIOHRecord[b] = this.records[b];
        arrayOfIOHRecord[b * 2] = this.records[b].split(arrayOfIOHRecord.length);
      } 
    } 
    this.records = arrayOfIOHRecord;
    this.threshold = (int)(this.load_factor * this.records.length);
  }
}
