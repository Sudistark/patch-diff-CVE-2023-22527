package com.mchange.v2.resourcepool;

import com.mchange.v2.async.AsynchronousRunner;
import com.mchange.v2.async.CarefulRunnableQueue;
import com.mchange.v2.async.RunnableQueue;
import com.mchange.v2.async.ThreadPoolAsynchronousRunner;
import java.util.HashSet;
import java.util.Set;
import java.util.Timer;

public class BasicResourcePoolFactory extends ResourcePoolFactory {
  int start;
  
  int min;
  
  int max;
  
  int inc;
  
  int retry_attempts;
  
  int retry_delay;
  
  long idle_resource_test_period;
  
  long max_age;
  
  long max_idle_time;
  
  long excess_max_idle_time;
  
  long destroy_overdue_resc_time;
  
  long expiration_enforcement_delay;
  
  boolean break_on_acquisition_failure;
  
  boolean debug_store_checkout_stacktrace;
  
  boolean force_synchronous_checkins;
  
  AsynchronousRunner taskRunner;
  
  boolean taskRunner_is_external;
  
  RunnableQueue asyncEventQueue;
  
  boolean asyncEventQueue_is_external;
  
  Timer timer;
  
  boolean timer_is_external;
  
  int default_num_task_threads;
  
  Set liveChildren;
  
  public static BasicResourcePoolFactory createNoEventSupportInstance(int num_task_threads) { return createNoEventSupportInstance(null, null, num_task_threads); }
  
  public static BasicResourcePoolFactory createNoEventSupportInstance(AsynchronousRunner taskRunner, Timer timer) { return createNoEventSupportInstance(taskRunner, timer, 3); }
  
  private static BasicResourcePoolFactory createNoEventSupportInstance(AsynchronousRunner taskRunner, Timer timer, int default_num_task_threads) { return new BasicResourcePoolFactory(taskRunner, timer, default_num_task_threads, true); }
  
  BasicResourcePoolFactory() { this(null, null, null); }
  
  BasicResourcePoolFactory(AsynchronousRunner taskRunner, RunnableQueue asyncEventQueue, Timer timer) { this(taskRunner, asyncEventQueue, timer, 3); }
  
  BasicResourcePoolFactory(int num_task_threads) { this(null, null, null, num_task_threads); }
  
  BasicResourcePoolFactory(AsynchronousRunner taskRunner, Timer timer, int default_num_task_threads, boolean no_event_support) {
    this(taskRunner, null, timer, default_num_task_threads);
    if (no_event_support)
      this.asyncEventQueue_is_external = true; 
  }
  
  BasicResourcePoolFactory(AsynchronousRunner taskRunner, RunnableQueue asyncEventQueue, Timer timer, int default_num_task_threads) {
    this.start = -1;
    this.min = 1;
    this.max = 12;
    this.inc = 3;
    this.retry_attempts = -1;
    this.retry_delay = 1000;
    this.idle_resource_test_period = -1L;
    this.max_age = -1L;
    this.max_idle_time = -1L;
    this.excess_max_idle_time = -1L;
    this.destroy_overdue_resc_time = -1L;
    this.expiration_enforcement_delay = -1L;
    this.break_on_acquisition_failure = true;
    this.debug_store_checkout_stacktrace = false;
    this.force_synchronous_checkins = false;
    this.taskRunner = taskRunner;
    this.taskRunner_is_external = (taskRunner != null);
    this.asyncEventQueue = asyncEventQueue;
    this.asyncEventQueue_is_external = (asyncEventQueue != null);
    this.timer = timer;
    this.timer_is_external = (timer != null);
    this.default_num_task_threads = default_num_task_threads;
  }
  
  private void createThreadResources() {
    if (!this.taskRunner_is_external)
      this.taskRunner = new ThreadPoolAsynchronousRunner(this.default_num_task_threads, true); 
    if (!this.asyncEventQueue_is_external)
      this.asyncEventQueue = new CarefulRunnableQueue(true, false); 
    if (!this.timer_is_external)
      this.timer = new Timer(true); 
    this.liveChildren = new HashSet();
  }
  
  private void destroyThreadResources() {
    if (!this.taskRunner_is_external) {
      this.taskRunner.close();
      this.taskRunner = null;
    } 
    if (!this.asyncEventQueue_is_external) {
      this.asyncEventQueue.close();
      this.asyncEventQueue = null;
    } 
    if (!this.timer_is_external) {
      this.timer.cancel();
      this.timer = null;
    } 
    this.liveChildren = null;
  }
  
  void markBroken(BasicResourcePool pool) {
    if (this.liveChildren != null) {
      this.liveChildren.remove(pool);
      if (this.liveChildren.isEmpty())
        destroyThreadResources(); 
    } 
  }
  
  public void setStart(int start) { this.start = start; }
  
  public int getStart() throws ResourcePoolException { return this.start; }
  
  public void setMin(int min) { this.min = min; }
  
  public int getMin() throws ResourcePoolException { return this.min; }
  
  public void setMax(int max) { this.max = max; }
  
  public int getMax() throws ResourcePoolException { return this.max; }
  
  public void setIncrement(int inc) { this.inc = inc; }
  
  public int getIncrement() throws ResourcePoolException { return this.inc; }
  
  public void setAcquisitionRetryAttempts(int retry_attempts) { this.retry_attempts = retry_attempts; }
  
  public int getAcquisitionRetryAttempts() throws ResourcePoolException { return this.retry_attempts; }
  
  public void setAcquisitionRetryDelay(int retry_delay) { this.retry_delay = retry_delay; }
  
  public int getAcquisitionRetryDelay() throws ResourcePoolException { return this.retry_delay; }
  
  public void setIdleResourceTestPeriod(long test_period) { this.idle_resource_test_period = test_period; }
  
  public long getIdleResourceTestPeriod() { return this.idle_resource_test_period; }
  
  public void setResourceMaxAge(long max_age) { this.max_age = max_age; }
  
  public long getResourceMaxAge() { return this.max_age; }
  
  public void setResourceMaxIdleTime(long millis) { this.max_idle_time = millis; }
  
  public long getResourceMaxIdleTime() { return this.max_idle_time; }
  
  public void setExcessResourceMaxIdleTime(long millis) { this.excess_max_idle_time = millis; }
  
  public long getExcessResourceMaxIdleTime() { return this.excess_max_idle_time; }
  
  public long getDestroyOverdueResourceTime() { return this.destroy_overdue_resc_time; }
  
  public void setDestroyOverdueResourceTime(long millis) { this.destroy_overdue_resc_time = millis; }
  
  public void setExpirationEnforcementDelay(long expiration_enforcement_delay) { this.expiration_enforcement_delay = expiration_enforcement_delay; }
  
  public long getExpirationEnforcementDelay() { return this.expiration_enforcement_delay; }
  
  public void setBreakOnAcquisitionFailure(boolean break_on_acquisition_failure) throws ResourcePoolException { this.break_on_acquisition_failure = break_on_acquisition_failure; }
  
  public boolean getBreakOnAcquisitionFailure() throws ResourcePoolException { return this.break_on_acquisition_failure; }
  
  public void setDebugStoreCheckoutStackTrace(boolean debug_store_checkout_stacktrace) throws ResourcePoolException { this.debug_store_checkout_stacktrace = debug_store_checkout_stacktrace; }
  
  public boolean getDebugStoreCheckoutStackTrace() throws ResourcePoolException { return this.debug_store_checkout_stacktrace; }
  
  public void setForceSynchronousCheckins(boolean force_synchronous_checkins) throws ResourcePoolException { this.force_synchronous_checkins = force_synchronous_checkins; }
  
  public boolean getForceSynchronousCheckins() throws ResourcePoolException { return this.force_synchronous_checkins; }
  
  public ResourcePool createPool(ResourcePool.Manager mgr) throws ResourcePoolException {
    if (this.liveChildren == null)
      createThreadResources(); 
    BasicResourcePool basicResourcePool = new BasicResourcePool(mgr, this.start, this.min, this.max, this.inc, this.retry_attempts, this.retry_delay, this.idle_resource_test_period, this.max_age, this.max_idle_time, this.excess_max_idle_time, this.destroy_overdue_resc_time, this.expiration_enforcement_delay, this.break_on_acquisition_failure, this.debug_store_checkout_stacktrace, this.force_synchronous_checkins, this.taskRunner, this.asyncEventQueue, this.timer, this);
    this.liveChildren.add(basicResourcePool);
    return basicResourcePool;
  }
}
