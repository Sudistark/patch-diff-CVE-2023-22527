package com.mchange.v2.resourcepool;

import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

public class ResourcePoolEventSupport {
  ResourcePool source;
  
  Set mlisteners;
  
  public ResourcePoolEventSupport(ResourcePool source) {
    this.mlisteners = new HashSet();
    this.source = source;
  }
  
  public void addResourcePoolListener(ResourcePoolListener mlistener) { this.mlisteners.add(mlistener); }
  
  public void removeResourcePoolListener(ResourcePoolListener mlistener) { this.mlisteners.remove(mlistener); }
  
  public void fireResourceAcquired(Object resc, int pool_size, int available_size, int removed_but_unreturned_size) {
    if (!this.mlisteners.isEmpty()) {
      ResourcePoolEvent evt = new ResourcePoolEvent(this.source, resc, false, pool_size, available_size, removed_but_unreturned_size);
      for (Iterator i = this.mlisteners.iterator(); i.hasNext(); ) {
        ResourcePoolListener rpl = (ResourcePoolListener)i.next();
        rpl.resourceAcquired(evt);
      } 
    } 
  }
  
  public void fireResourceCheckedIn(Object resc, int pool_size, int available_size, int removed_but_unreturned_size) {
    if (!this.mlisteners.isEmpty()) {
      ResourcePoolEvent evt = new ResourcePoolEvent(this.source, resc, false, pool_size, available_size, removed_but_unreturned_size);
      for (Iterator i = this.mlisteners.iterator(); i.hasNext(); ) {
        ResourcePoolListener rpl = (ResourcePoolListener)i.next();
        rpl.resourceCheckedIn(evt);
      } 
    } 
  }
  
  public void fireResourceCheckedOut(Object resc, int pool_size, int available_size, int removed_but_unreturned_size) {
    if (!this.mlisteners.isEmpty()) {
      ResourcePoolEvent evt = new ResourcePoolEvent(this.source, resc, true, pool_size, available_size, removed_but_unreturned_size);
      for (Iterator i = this.mlisteners.iterator(); i.hasNext(); ) {
        ResourcePoolListener rpl = (ResourcePoolListener)i.next();
        rpl.resourceCheckedOut(evt);
      } 
    } 
  }
  
  public void fireResourceRemoved(Object resc, boolean checked_out_resource, int pool_size, int available_size, int removed_but_unreturned_size) {
    if (!this.mlisteners.isEmpty()) {
      ResourcePoolEvent evt = new ResourcePoolEvent(this.source, resc, checked_out_resource, pool_size, available_size, removed_but_unreturned_size);
      for (Iterator i = this.mlisteners.iterator(); i.hasNext(); ) {
        ResourcePoolListener rpl = (ResourcePoolListener)i.next();
        rpl.resourceRemoved(evt);
      } 
    } 
  }
}
