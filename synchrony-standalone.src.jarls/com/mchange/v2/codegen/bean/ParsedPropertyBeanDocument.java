package com.mchange.v2.codegen.bean;

import com.mchange.v1.xml.DomParseUtils;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

public class ParsedPropertyBeanDocument {
  static final String[] EMPTY_SA = new String[0];
  
  String packageName;
  
  int class_modifiers;
  
  String className;
  
  String superclassName;
  
  String[] interfaceNames = EMPTY_SA;
  
  String[] generalImports = EMPTY_SA;
  
  String[] specificImports = EMPTY_SA;
  
  Property[] properties;
  
  public ParsedPropertyBeanDocument(Document paramDocument) {
    Element element1 = paramDocument.getDocumentElement();
    this.packageName = DomParseUtils.allTextFromUniqueChild(element1, "package");
    Element element2 = DomParseUtils.uniqueImmediateChild(element1, "modifiers");
    if (element2 != null) {
      this.class_modifiers = parseModifiers(element2);
    } else {
      this.class_modifiers = 1;
    } 
    Element element3 = DomParseUtils.uniqueChild(element1, "imports");
    if (element3 != null) {
      this.generalImports = DomParseUtils.allTextFromImmediateChildElements(element3, "general");
      this.specificImports = DomParseUtils.allTextFromImmediateChildElements(element3, "specific");
    } 
    this.className = DomParseUtils.allTextFromUniqueChild(element1, "output-class");
    this.superclassName = DomParseUtils.allTextFromUniqueChild(element1, "extends");
    Element element4 = DomParseUtils.uniqueChild(element1, "implements");
    if (element4 != null)
      this.interfaceNames = DomParseUtils.allTextFromImmediateChildElements(element4, "interface"); 
    Element element5 = DomParseUtils.uniqueChild(element1, "properties");
    this.properties = findProperties(element5);
  }
  
  public ClassInfo getClassInfo() { return new Object(this); }
  
  public Property[] getProperties() { return (Property[])this.properties.clone(); }
  
  private Property[] findProperties(Element paramElement) {
    NodeList nodeList = DomParseUtils.immediateChildElementsByTagName(paramElement, "property");
    int i = nodeList.getLength();
    Property[] arrayOfProperty = new Property[i];
    for (byte b = 0; b < i; b++) {
      Element element1 = (Element)nodeList.item(b);
      int j = modifiersThroughParentElem(element1, "variable", 2);
      String str1 = DomParseUtils.allTextFromUniqueChild(element1, "name", true);
      String str2 = DomParseUtils.allTextFromUniqueChild(element1, "type", true);
      String str3 = DomParseUtils.allTextFromUniqueChild(element1, "defensive-copy", true);
      String str4 = DomParseUtils.allTextFromUniqueChild(element1, "default-value", true);
      int k = modifiersThroughParentElem(element1, "getter", 1);
      int m = modifiersThroughParentElem(element1, "setter", 1);
      Element element2 = DomParseUtils.uniqueChild(element1, "read-only");
      boolean bool1 = (element2 != null);
      Element element3 = DomParseUtils.uniqueChild(element1, "bound");
      boolean bool2 = (element3 != null);
      Element element4 = DomParseUtils.uniqueChild(element1, "constrained");
      boolean bool3 = (element4 != null);
      arrayOfProperty[b] = new SimpleProperty(j, str1, str2, str3, str4, k, m, bool1, bool2, bool3);
    } 
    return arrayOfProperty;
  }
  
  private static int modifiersThroughParentElem(Element paramElement, String paramString, int paramInt) {
    Element element = DomParseUtils.uniqueChild(paramElement, paramString);
    if (element != null) {
      Element element1 = DomParseUtils.uniqueChild(element, "modifiers");
      if (element1 != null)
        return parseModifiers(element1); 
      return paramInt;
    } 
    return paramInt;
  }
  
  private static int parseModifiers(Element paramElement) {
    char c = Character.MIN_VALUE;
    String[] arrayOfString = DomParseUtils.allTextFromImmediateChildElements(paramElement, "modifier", true);
    byte b;
    int i;
    for (b = 0, i = arrayOfString.length; b < i; b++) {
      String str = arrayOfString[b];
      if ("public".equals(str)) {
        c |= true;
      } else if ("protected".equals(str)) {
        c |= 0x4;
      } else if ("private".equals(str)) {
        c |= 0x2;
      } else if ("final".equals(str)) {
        c |= 0x10;
      } else if ("abstract".equals(str)) {
        c |= 0x400;
      } else if ("static".equals(str)) {
        c |= 0x8;
      } else if ("synchronized".equals(str)) {
        c |= 0x20;
      } else if ("volatile".equals(str)) {
        c |= 0x40;
      } else if ("transient".equals(str)) {
        c |= 0x80;
      } else if ("strictfp".equals(str)) {
        c |= 0x800;
      } else if ("native".equals(str)) {
        c |= 0x100;
      } else if ("interface".equals(str)) {
        c |= 0x200;
      } else {
        throw new IllegalArgumentException("Bad modifier: " + str);
      } 
    } 
    return c;
  }
}
