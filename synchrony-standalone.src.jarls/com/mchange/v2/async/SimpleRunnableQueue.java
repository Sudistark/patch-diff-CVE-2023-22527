package com.mchange.v2.async;

import java.util.LinkedList;
import java.util.List;

public class SimpleRunnableQueue implements RunnableQueue, Queuable {
  private List taskList;
  
  private Thread t;
  
  boolean gentle_close_requested;
  
  public SimpleRunnableQueue(boolean paramBoolean) {
    this.taskList = new LinkedList();
    this.t = new TaskThread(this);
    this.gentle_close_requested = false;
    this.t.setDaemon(paramBoolean);
    this.t.start();
  }
  
  public SimpleRunnableQueue() { this(true); }
  
  public RunnableQueue asRunnableQueue() { return this; }
  
  public void postRunnable(Runnable paramRunnable) {
    if (this.gentle_close_requested)
      throw new IllegalStateException("Attempted to post a task to a closed AsynchronousRunner."); 
    this.taskList.add(paramRunnable);
    notifyAll();
  }
  
  public void close(boolean paramBoolean) {
    if (paramBoolean) {
      this.t.interrupt();
    } else {
      this.gentle_close_requested = true;
    } 
  }
  
  public void close() { close(true); }
  
  private Runnable dequeueRunnable() {
    Runnable runnable = (Runnable)this.taskList.get(0);
    this.taskList.remove(0);
    return runnable;
  }
  
  private void awaitTask() {
    while (this.taskList.size() == 0) {
      if (this.gentle_close_requested)
        this.t.interrupt(); 
      wait();
    } 
  }
}
