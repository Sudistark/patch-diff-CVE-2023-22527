package com.mchange.v2.cfg;

import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Properties;

class CombinedMultiPropertiesConfig extends MultiPropertiesConfig {
  MultiPropertiesConfig[] configs;
  
  String[] resourcePaths;
  
  List parseMessages;
  
  CombinedMultiPropertiesConfig(MultiPropertiesConfig[] paramArrayOfMultiPropertiesConfig) {
    this.configs = paramArrayOfMultiPropertiesConfig;
    LinkedList linkedList1 = new LinkedList();
    for (int i = paramArrayOfMultiPropertiesConfig.length - 1; i >= 0; i--) {
      String[] arrayOfString = paramArrayOfMultiPropertiesConfig[i].getPropertiesResourcePaths();
      for (int k = arrayOfString.length - 1; k >= 0; k--) {
        String str = arrayOfString[k];
        if (!linkedList1.contains(str))
          linkedList1.add(0, str); 
      } 
    } 
    this.resourcePaths = (String[])linkedList1.toArray(new String[linkedList1.size()]);
    LinkedList linkedList2 = new LinkedList();
    byte b;
    int j;
    for (b = 0, j = paramArrayOfMultiPropertiesConfig.length; b < j; b++)
      linkedList2.addAll(paramArrayOfMultiPropertiesConfig[b].getDelayedLogItems()); 
    this.parseMessages = Collections.unmodifiableList(linkedList2);
  }
  
  private Map getPropsByResourcePaths() {
    HashMap hashMap = new HashMap();
    byte b;
    int i;
    for (b = 0, i = this.resourcePaths.length; b < i; b++) {
      String str = this.resourcePaths[b];
      hashMap.put(str, getPropertiesByResourcePath(str));
    } 
    return Collections.unmodifiableMap(hashMap);
  }
  
  public BasicMultiPropertiesConfig toBasic() {
    String[] arrayOfString = getPropertiesResourcePaths();
    Map map = getPropsByResourcePaths();
    List list = getDelayedLogItems();
    return new BasicMultiPropertiesConfig(arrayOfString, map, list);
  }
  
  public String[] getPropertiesResourcePaths() { return (String[])this.resourcePaths.clone(); }
  
  public Properties getPropertiesByResourcePath(String paramString) {
    Properties properties = new Properties();
    byte b;
    int i;
    for (b = 0, i = this.configs.length; b < i; b++) {
      MultiPropertiesConfig multiPropertiesConfig = this.configs[b];
      Properties properties1 = multiPropertiesConfig.getPropertiesByResourcePath(paramString);
      if (properties1 != null)
        properties.putAll(properties1); 
    } 
    return (properties.size() > 0) ? properties : null;
  }
  
  public Properties getPropertiesByPrefix(String paramString) {
    LinkedList linkedList = new LinkedList();
    for (int i = this.configs.length - 1; i >= 0; i--) {
      MultiPropertiesConfig multiPropertiesConfig = this.configs[i];
      Properties properties1 = multiPropertiesConfig.getPropertiesByPrefix(paramString);
      if (properties1 != null)
        linkedList.addAll(0, properties1.entrySet()); 
    } 
    if (linkedList.size() == 0)
      return null; 
    Properties properties = new Properties();
    for (Map.Entry entry : linkedList)
      properties.put(entry.getKey(), entry.getValue()); 
    return properties;
  }
  
  public String getProperty(String paramString) {
    for (int i = this.configs.length - 1; i >= 0; i--) {
      MultiPropertiesConfig multiPropertiesConfig = this.configs[i];
      String str = multiPropertiesConfig.getProperty(paramString);
      if (str != null)
        return str; 
    } 
    return null;
  }
  
  public List getDelayedLogItems() { return this.parseMessages; }
}
