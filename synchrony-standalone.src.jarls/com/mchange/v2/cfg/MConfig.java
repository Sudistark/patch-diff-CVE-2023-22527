package com.mchange.v2.cfg;

import com.mchange.v1.cachedstore.CachedStore;
import com.mchange.v1.cachedstore.CachedStoreException;
import com.mchange.v1.cachedstore.CachedStoreFactory;
import com.mchange.v1.cachedstore.CachedStoreUtils;
import com.mchange.v2.log.MLevel;
import com.mchange.v2.log.MLog;
import com.mchange.v2.log.MLogger;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public final class MConfig {
  private static final MLogger logger = MLog.getLogger(MConfig.class);
  
  private static final Map<DelayedLogItem.Level, MLevel> levelMap;
  
  static final CachedStore cache;
  
  static  {
    try {
      HashMap hashMap = new HashMap();
      for (DelayedLogItem.Level level : DelayedLogItem.Level.values())
        hashMap.put(level, (MLevel)MLevel.class.getField(level.toString()).get(null)); 
      levelMap = Collections.unmodifiableMap(hashMap);
    } catch (RuntimeException runtimeException) {
      runtimeException.printStackTrace();
      throw runtimeException;
    } catch (Exception exception) {
      exception.printStackTrace();
      throw new RuntimeException(exception);
    } 
    cache = CachedStoreUtils.synchronizedCachedStore(CachedStoreFactory.createNoCleanupCachedStore(new CSManager(null)));
  }
  
  public static MultiPropertiesConfig readVmConfig(String[] paramArrayOfString1, String[] paramArrayOfString2) {
    try {
      return (MultiPropertiesConfig)cache.find(new PathsKey(paramArrayOfString1, paramArrayOfString2));
    } catch (CachedStoreException cachedStoreException) {
      throw new RuntimeException(cachedStoreException);
    } 
  }
  
  public static MultiPropertiesConfig readVmConfig() { return readVmConfig(ConfigUtils.NO_PATHS, ConfigUtils.NO_PATHS); }
  
  public static MultiPropertiesConfig readConfig(String[] paramArrayOfString) {
    try {
      return (MultiPropertiesConfig)cache.find(new PathsKey(paramArrayOfString));
    } catch (CachedStoreException cachedStoreException) {
      throw new RuntimeException(cachedStoreException);
    } 
  }
  
  public static MultiPropertiesConfig combine(MultiPropertiesConfig[] paramArrayOfMultiPropertiesConfig) { return ConfigUtils.combine(paramArrayOfMultiPropertiesConfig); }
  
  public static void dumpToLogger(List<DelayedLogItem> paramList, MLogger paramMLogger) { for (DelayedLogItem delayedLogItem : paramList)
      dumpToLogger(delayedLogItem, paramMLogger);  }
  
  public static void dumpToLogger(DelayedLogItem paramDelayedLogItem, MLogger paramMLogger) { paramMLogger.log((MLevel)levelMap.get(paramDelayedLogItem.getLevel()), paramDelayedLogItem.getText(), paramDelayedLogItem.getException()); }
}
