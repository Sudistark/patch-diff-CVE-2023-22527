package com.mchange.v2.c3p0.codegen;

import com.mchange.v2.codegen.CodegenUtils;
import com.mchange.v2.codegen.IndentedWriter;
import com.mchange.v2.codegen.intfc.DelegatorGenerator;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.lang.reflect.Method;

public abstract class JdbcProxyGenerator extends DelegatorGenerator {
  private static final boolean PREMATURE_DETACH_DEBUG = false;
  
  JdbcProxyGenerator() {
    setGenerateInnerSetter(false);
    setGenerateInnerGetter(false);
    setGenerateNoArgConstructor(false);
    setGenerateWrappingConstructor(true);
    setClassModifiers(17);
    setMethodModifiers(17);
    setWrappingConstructorModifiers(0);
  }
  
  protected void generateDelegateCode(Class intfcl, String genclass, Method method, IndentedWriter iw) throws IOException { super.generateDelegateCode(intfcl, genclass, method, iw); }
  
  protected void generatePreDelegateCode(Class intfcl, String genclass, Method method, IndentedWriter iw) throws IOException {
    if (!jdbc4WrapperMethod(method.getName()))
      generateTryOpener(iw); 
  }
  
  protected void generatePostDelegateCode(Class intfcl, String genclass, Method method, IndentedWriter iw) throws IOException {
    if (!jdbc4WrapperMethod(method.getName()))
      generateTryCloserAndCatch(intfcl, genclass, method, iw); 
  }
  
  void generateTryOpener(IndentedWriter iw) throws IOException {
    iw.println("try");
    iw.println("{");
    iw.upIndent();
  }
  
  void generateTryCloserAndCatch(Class intfcl, String genclass, Method method, IndentedWriter iw) throws IOException {
    iw.downIndent();
    iw.println("}");
    iw.println("catch (NullPointerException exc)");
    iw.println("{");
    iw.upIndent();
    iw.println("if ( this.isDetached() )");
    iw.println("{");
    iw.upIndent();
    if ("close".equals(method.getName())) {
      iw.println("if (Debug.DEBUG && logger.isLoggable( MLevel.FINE ))");
      iw.println("{");
      iw.upIndent();
      iw.println("logger.log( MLevel.FINE, this + \": close() called more than once.\" );");
      iw.downIndent();
      iw.println("}");
    } else {
      iw.println("throw SqlUtils.toSQLException(\"You can't operate on a closed " + getInnerTypeName() + "!!!\", exc);");
    } 
    iw.downIndent();
    iw.println("}");
    iw.println("else throw exc;");
    iw.downIndent();
    iw.println("}");
    iw.println("catch (Exception exc)");
    iw.println("{");
    iw.upIndent();
    iw.println("if (! this.isDetached())");
    iw.println("{");
    iw.upIndent();
    iw.println("throw parentPooledConnection.handleThrowable( exc );");
    iw.downIndent();
    iw.println("}");
    iw.println("else throw SqlUtils.toSQLException( exc );");
    iw.downIndent();
    iw.println("}");
  }
  
  protected void generateExtraDeclarations(Class intfcl, String genclass, IndentedWriter iw) throws IOException {
    iw.println("private final static MLogger logger = MLog.getLogger( \"" + genclass + "\" );");
    iw.println();
    iw.println("volatile NewPooledConnection parentPooledConnection;");
    iw.println();
    iw.println("ConnectionEventListener cel = new ConnectionEventListener()");
    iw.println("{");
    iw.upIndent();
    iw.println("public void connectionErrorOccurred(ConnectionEvent evt)");
    iw.println("{ /* DON'T detach()... IGNORE -- this could be an ordinary error. Leave it to the PooledConnection to test, but leave proxies intact */ }");
    iw.println();
    iw.println("public void connectionClosed(ConnectionEvent evt)");
    iw.println("{ detach(); }");
    iw.downIndent();
    iw.println("};");
    iw.println();
    iw.println("void attach( NewPooledConnection parentPooledConnection )");
    iw.println("{");
    iw.upIndent();
    iw.println("this.parentPooledConnection = parentPooledConnection;");
    iw.println("parentPooledConnection.addConnectionEventListener( cel );");
    iw.downIndent();
    iw.println("}");
    iw.println();
    iw.println("private void detach()");
    iw.println("{");
    iw.upIndent();
    writeDetachBody(iw);
    iw.downIndent();
    iw.println("}");
    iw.println();
    iw.print(CodegenUtils.fqcnLastElement(genclass));
    iw.println("( " + CodegenUtils.simpleClassName(intfcl) + " inner, NewPooledConnection parentPooledConnection )");
    iw.println("{");
    iw.upIndent();
    iw.println("this( inner );");
    iw.println("attach( parentPooledConnection );");
    generateExtraConstructorCode(intfcl, genclass, iw);
    iw.downIndent();
    iw.println("}");
    iw.println();
    iw.println("boolean isDetached()");
    iw.println("{ return (this.parentPooledConnection == null); }");
    iw.println();
    iw.println("public String toString() { return super.toString() + \" [wrapping: \" + inner + \"]\"; }");
    iw.println();
    generateIsWrapperHelperMethods(intfcl, iw);
  }
  
  protected void writeDetachBody(IndentedWriter iw) throws IOException {
    iw.println("parentPooledConnection.removeConnectionEventListener( cel );");
    iw.println("parentPooledConnection = null;");
  }
  
  protected void generateExtraImports(IndentedWriter iw) throws IOException {
    iw.println("import java.sql.*;");
    iw.println("import javax.sql.*;");
    iw.println("import com.mchange.v2.log.*;");
    iw.println("import java.lang.reflect.Method;");
    iw.println("import com.mchange.v2.sql.SqlUtils;");
  }
  
  void generateExtraConstructorCode(Class intfcl, String genclass, IndentedWriter iw) throws IOException {}
  
  private static void generateIsWrapperHelperMethods(Class intfcl, IndentedWriter iw) throws IOException {
    iw.println("// helper methods for unwrap( ... ), isWrapperFor( ... )");
    iw.println("private boolean isWrapperForInner( Class intfcl )");
    iw.println("{ return ( " + intfcl.getName() + ".class == intfcl || intfcl.isAssignableFrom( inner.getClass() ) ); }");
    iw.println();
    iw.println("private boolean isWrapperForThis( Class intfcl )");
    iw.println("{ return intfcl.isAssignableFrom( this.getClass() ); }");
  }
  
  private static void generateWrapperDelegateCode(Class intfcl, String genclass, Method method, IndentedWriter iw) throws IOException {
    String mname = method.getName();
    if ("isWrapperFor".equals(mname)) {
      iw.println("return ( isWrapperForInner( a ) || isWrapperForThis( a ) );");
    } else if ("unwrap".equals(mname)) {
      iw.println("if (this.isWrapperForInner( a )) return inner.unwrap( a );");
      iw.println("if (this.isWrapperForThis( a )) return this;");
      iw.println("else throw new SQLException( this + \" is not a wrapper for or implementation of \" + a.getName());");
    } 
  }
  
  private static boolean jdbc4WrapperMethod(String mname) { return ("unwrap".equals(mname) || "isWrapperFor".equals(mname)); }
  
  public static void main(String[] argv) {
    try {
      if (argv.length != 1) {
        System.err.println("java " + JdbcProxyGenerator.class.getName() + " <source-root-directory>");
        return;
      } 
      File srcroot = new File(argv[0]);
      if (!srcroot.exists() || !srcroot.canWrite()) {
        System.err.println(JdbcProxyGenerator.class.getName() + " -- sourceroot: " + argv[0] + " must exist and be writable");
        return;
      } 
      NewProxyMetaDataGenerator newProxyMetaDataGenerator = new NewProxyMetaDataGenerator();
      NewProxyResultSetGenerator newProxyResultSetGenerator = new NewProxyResultSetGenerator();
      NewProxyAnyStatementGenerator newProxyAnyStatementGenerator = new NewProxyAnyStatementGenerator();
      NewProxyConnectionGenerator newProxyConnectionGenerator = new NewProxyConnectionGenerator();
      genclass(newProxyConnectionGenerator, java.sql.Connection.class, "com.mchange.v2.c3p0.impl.NewProxyConnection", srcroot);
      genclass(newProxyAnyStatementGenerator, java.sql.Statement.class, "com.mchange.v2.c3p0.impl.NewProxyStatement", srcroot);
      genclass(newProxyAnyStatementGenerator, java.sql.PreparedStatement.class, "com.mchange.v2.c3p0.impl.NewProxyPreparedStatement", srcroot);
      genclass(newProxyAnyStatementGenerator, java.sql.CallableStatement.class, "com.mchange.v2.c3p0.impl.NewProxyCallableStatement", srcroot);
      genclass(newProxyResultSetGenerator, java.sql.ResultSet.class, "com.mchange.v2.c3p0.impl.NewProxyResultSet", srcroot);
      genclass(newProxyMetaDataGenerator, java.sql.DatabaseMetaData.class, "com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData", srcroot);
    } catch (Exception e) {
      e.printStackTrace();
    } 
  }
  
  static void genclass(DelegatorGenerator dg, Class intfcl, String fqcn, File srcroot) throws IOException {
    File genDir = new File(srcroot, dirForFqcn(fqcn));
    if (!genDir.exists()) {
      System.err.println(JdbcProxyGenerator.class.getName() + " -- creating directory: " + genDir.getAbsolutePath());
      genDir.mkdirs();
    } 
    String fileName = CodegenUtils.fqcnLastElement(fqcn) + ".java";
    w = null;
    try {
      w = new BufferedWriter(new FileWriter(new File(genDir, fileName)));
      dg.writeDelegator(intfcl, fqcn, w);
      w.flush();
      System.err.println("Generated " + fileName);
    } finally {
      try {
        if (w != null)
          w.close(); 
      } catch (Exception e) {
        e.printStackTrace();
      } 
    } 
  }
  
  static String dirForFqcn(String fqcn) {
    int last_dot = fqcn.lastIndexOf('.');
    StringBuffer sb = new StringBuffer(fqcn.substring(0, last_dot + 1));
    for (int i = 0, len = sb.length(); i < len; i++) {
      if (sb.charAt(i) == '.')
        sb.setCharAt(i, '/'); 
    } 
    return sb.toString();
  }
  
  abstract String getInnerTypeName();
}
