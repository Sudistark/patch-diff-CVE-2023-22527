package com.mchange.v2.util;

import java.lang.ref.ReferenceQueue;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

public class DoubleWeakHashMap implements Map {
  HashMap inner;
  
  ReferenceQueue keyQ = new ReferenceQueue();
  
  ReferenceQueue valQ = new ReferenceQueue();
  
  CheckKeyHolder holder = new CheckKeyHolder();
  
  Set userKeySet = null;
  
  Collection valuesCollection = null;
  
  public DoubleWeakHashMap() { this.inner = new HashMap(); }
  
  public DoubleWeakHashMap(int paramInt) { this.inner = new HashMap(paramInt); }
  
  public DoubleWeakHashMap(int paramInt, float paramFloat) { this.inner = new HashMap(paramInt, paramFloat); }
  
  public DoubleWeakHashMap(Map paramMap) {
    this();
    putAll(paramMap);
  }
  
  public void cleanCleared() {
    WKey wKey;
    while ((wKey = (WKey)this.keyQ.poll()) != null)
      this.inner.remove(wKey); 
    WVal wVal;
    while ((wVal = (WVal)this.valQ.poll()) != null)
      this.inner.remove(wVal.getWKey()); 
  }
  
  public void clear() {
    cleanCleared();
    this.inner.clear();
  }
  
  public boolean containsKey(Object paramObject) {
    cleanCleared();
    try {
      return this.inner.containsKey(this.holder.set(paramObject));
    } finally {
      this.holder.clear();
    } 
  }
  
  public boolean containsValue(Object paramObject) {
    for (WVal wVal : this.inner.values()) {
      if (paramObject.equals(wVal.get()))
        return true; 
    } 
    return false;
  }
  
  public Set entrySet() {
    cleanCleared();
    return new UserEntrySet(this, null);
  }
  
  public Object get(Object paramObject) {
    try {
      cleanCleared();
      WVal wVal = (WVal)this.inner.get(this.holder.set(paramObject));
      return (wVal == null) ? null : wVal.get();
    } finally {
      this.holder.clear();
    } 
  }
  
  public boolean isEmpty() {
    cleanCleared();
    return this.inner.isEmpty();
  }
  
  public Set keySet() {
    cleanCleared();
    if (this.userKeySet == null)
      this.userKeySet = new UserKeySet(this); 
    return this.userKeySet;
  }
  
  public Object put(Object paramObject1, Object paramObject2) {
    cleanCleared();
    WVal wVal = doPut(paramObject1, paramObject2);
    if (wVal != null)
      return wVal.get(); 
    return null;
  }
  
  private WVal doPut(Object paramObject1, Object paramObject2) {
    WKey wKey = new WKey(paramObject1, this.keyQ);
    WVal wVal = new WVal(wKey, paramObject2, this.valQ);
    return (WVal)this.inner.put(wKey, wVal);
  }
  
  public void putAll(Map paramMap) {
    cleanCleared();
    for (Map.Entry entry : paramMap.entrySet())
      doPut(entry.getKey(), entry.getValue()); 
  }
  
  public Object remove(Object paramObject) {
    try {
      cleanCleared();
      WVal wVal = (WVal)this.inner.remove(this.holder.set(paramObject));
      return (wVal == null) ? null : wVal.get();
    } finally {
      this.holder.clear();
    } 
  }
  
  public int size() {
    cleanCleared();
    return this.inner.size();
  }
  
  public Collection values() {
    if (this.valuesCollection == null)
      this.valuesCollection = new ValuesCollection(this); 
    return this.valuesCollection;
  }
}
