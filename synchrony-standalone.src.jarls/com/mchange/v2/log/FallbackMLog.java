package com.mchange.v2.log;

import java.util.logging.Filter;

public final class FallbackMLog extends MLog {
  static final MLevel DEFAULT_CUTOFF_LEVEL;
  
  static final String SEP;
  
  private static MLevel overrideCutoffLevel = null;
  
  private static Filter globalFilter = null;
  
  private final MLogger nameless = new FallbackMLogger(this);
  
  static  {
    MLevel mLevel = null;
    String str = MLogConfig.getProperty("com.mchange.v2.log.FallbackMLog.DEFAULT_CUTOFF_LEVEL");
    if (str != null)
      mLevel = MLevel.fromSeverity(str); 
    if (mLevel == null)
      mLevel = MLevel.INFO; 
    DEFAULT_CUTOFF_LEVEL = mLevel;
    SEP = System.getProperty("line.separator");
  }
  
  public MLevel cutoffLevel() {
    if (overrideCutoffLevel != null)
      return overrideCutoffLevel; 
    return DEFAULT_CUTOFF_LEVEL;
  }
  
  public void overrideCutoffLevel(MLevel paramMLevel) { setOverrideCutoffLevel(paramMLevel); }
  
  public void setOverrideCutoffLevel(MLevel paramMLevel) { overrideCutoffLevel = paramMLevel; }
  
  public MLevel getOverrideCutoffLevel() { return overrideCutoffLevel; }
  
  private static Filter filterFromObject(Object paramObject) {
    if (paramObject instanceof Filter)
      return (Filter)paramObject; 
    if (paramObject instanceof Filter)
      return new Jdk14FilterAdapter((Filter)paramObject); 
    throw new IllegalArgumentException("Provided filter " + paramObject + " must be either a FallbackMLog.Filter or an instance of java.util.logging.Filter.");
  }
  
  public void setGlobalFilter(Object paramObject) { globalFilter = filterFromObject(paramObject); }
  
  public Object getGlobalFilter() {
    this;
    if (globalFilter instanceof Jdk14FilterAdapter) {
      this;
      return ((Jdk14FilterAdapter)globalFilter).getInner();
    } 
    this;
    return globalFilter;
  }
  
  private Filter _getGlobalFilter() { this;
    return globalFilter; }
  
  public MLogger getMLogger(String paramString) { return new FallbackMLogger(this, paramString); }
  
  public MLogger getMLogger() { return this.nameless; }
}
