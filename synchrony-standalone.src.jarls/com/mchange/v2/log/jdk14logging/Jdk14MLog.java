package com.mchange.v2.log.jdk14logging;

import com.mchange.v2.log.MLog;
import com.mchange.v2.log.MLogConfig;
import com.mchange.v2.log.MLogger;
import com.mchange.v2.util.DoubleWeakHashMap;
import java.util.Map;
import java.util.logging.LogManager;
import java.util.logging.Logger;

public final class Jdk14MLog extends MLog {
  static final String SUPPRESS_STACK_WALK_KEY = "com.mchange.v2.log.jdk14logging.suppressStackWalk";
  
  private static String[] UNKNOWN_ARRAY = { "UNKNOWN_CLASS", "UNKNOWN_METHOD" };
  
  private static final String CHECK_CLASS = "java.util.logging.Logger";
  
  private final Map namedLoggerMap;
  
  private static final boolean suppress_stack_walk;
  
  MLogger global;
  
  static  {
    String str = MLogConfig.getProperty("com.mchange.v2.log.jdk14logging.suppressStackWalk");
    if (str == null || (str = str.trim()).length() == 0) {
      suppress_stack_walk = false;
    } else if (str.equalsIgnoreCase("true")) {
      suppress_stack_walk = true;
    } else if (str.equalsIgnoreCase("false")) {
      suppress_stack_walk = false;
    } else {
      System.err.println("Bad value for com.mchange.v2.log.jdk14logging.suppressStackWalk: '" + str + "'; defaulting to 'false'.");
      suppress_stack_walk = false;
    } 
  }
  
  public Jdk14MLog() throws ClassNotFoundException {
    this.namedLoggerMap = new DoubleWeakHashMap();
    this.global = null;
    Class.forName("java.util.logging.Logger");
  }
  
  public MLogger getMLogger(String paramString) {
    paramString = paramString.intern();
    Jdk14MLogger jdk14MLogger = (MLogger)this.namedLoggerMap.get(paramString);
    if (jdk14MLogger == null) {
      Logger logger = Logger.getLogger(paramString);
      jdk14MLogger = new Jdk14MLogger(logger);
      this.namedLoggerMap.put(paramString, jdk14MLogger);
    } 
    return jdk14MLogger;
  }
  
  public MLogger getMLogger() {
    if (this.global == null)
      this.global = new Jdk14MLogger(LogManager.getLogManager().getLogger("global")); 
    return this.global;
  }
  
  private static String[] findCallingClassAndMethod() {
    StackTraceElement[] arrayOfStackTraceElement = (new Throwable()).getStackTrace();
    byte b;
    int i;
    for (b = 0, i = arrayOfStackTraceElement.length; b < i; b++) {
      StackTraceElement stackTraceElement = arrayOfStackTraceElement[b];
      String str = stackTraceElement.getClassName();
      if (str != null && !str.startsWith("com.mchange.v2.log.jdk14logging") && !str.startsWith("com.mchange.sc.v1.log"))
        return new String[] { stackTraceElement.getClassName(), stackTraceElement.getMethodName() }; 
    } 
    return UNKNOWN_ARRAY;
  }
}
