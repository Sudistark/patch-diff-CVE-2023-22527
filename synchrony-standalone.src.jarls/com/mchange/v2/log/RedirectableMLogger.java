package com.mchange.v2.log;

import java.lang.ref.WeakReference;
import java.util.HashSet;
import java.util.ResourceBundle;

final class RedirectableMLogger implements MLogger {
  private static HashSet weakRefSet = new HashSet();
  
  private String _name;
  
  private MLogger _inner;
  
  static RedirectableMLogger wrap(MLogger paramMLogger) {
    RedirectableMLogger redirectableMLogger = new RedirectableMLogger(paramMLogger);
    weakRefSet.add(new WeakReference(redirectableMLogger));
    return redirectableMLogger;
  }
  
  static void resetAll() {
    HashSet hashSet = (HashSet)weakRefSet.clone();
    for (WeakReference weakReference : hashSet) {
      RedirectableMLogger redirectableMLogger = (RedirectableMLogger)weakReference.get();
      if (redirectableMLogger == null) {
        weakRefSet.remove(weakReference);
        continue;
      } 
      redirectableMLogger.reset();
    } 
  }
  
  private void reset() { this._inner = null; }
  
  private MLogger inner() {
    if (this._inner == null)
      this._inner = MLog.getLogger(this._name); 
    return this._inner;
  }
  
  private RedirectableMLogger(MLogger paramMLogger) {
    this._inner = paramMLogger;
    this._name = paramMLogger.getName();
  }
  
  public String getName() { return inner().getName(); }
  
  public void log(MLevel paramMLevel, String paramString) { inner().log(paramMLevel, paramString); }
  
  public void log(MLevel paramMLevel, String paramString, Object paramObject) { inner().log(paramMLevel, paramString, paramObject); }
  
  public void log(MLevel paramMLevel, String paramString, Object[] paramArrayOfObject) { inner().log(paramMLevel, paramString, paramArrayOfObject); }
  
  public void log(MLevel paramMLevel, String paramString, Throwable paramThrowable) { inner().log(paramMLevel, paramString, paramThrowable); }
  
  public void logp(MLevel paramMLevel, String paramString1, String paramString2, String paramString3) { inner().logp(paramMLevel, paramString1, paramString2, paramString3); }
  
  public void logp(MLevel paramMLevel, String paramString1, String paramString2, String paramString3, Object paramObject) { inner().logp(paramMLevel, paramString1, paramString2, paramString3, paramObject); }
  
  public void logp(MLevel paramMLevel, String paramString1, String paramString2, String paramString3, Object[] paramArrayOfObject) { inner().logp(paramMLevel, paramString1, paramString2, paramString3, paramArrayOfObject); }
  
  public void logp(MLevel paramMLevel, String paramString1, String paramString2, String paramString3, Throwable paramThrowable) { inner().logp(paramMLevel, paramString1, paramString2, paramString3, paramThrowable); }
  
  public void logrb(MLevel paramMLevel, String paramString1, String paramString2, String paramString3, String paramString4) { inner().logrb(paramMLevel, paramString1, paramString2, paramString3, paramString4); }
  
  public void logrb(MLevel paramMLevel, String paramString1, String paramString2, String paramString3, String paramString4, Object paramObject) { inner().logrb(paramMLevel, paramString1, paramString2, paramString3, paramString4, paramObject); }
  
  public void logrb(MLevel paramMLevel, String paramString1, String paramString2, String paramString3, String paramString4, Object[] paramArrayOfObject) { inner().logrb(paramMLevel, paramString1, paramString2, paramString3, paramString4, paramArrayOfObject); }
  
  public void logrb(MLevel paramMLevel, String paramString1, String paramString2, String paramString3, String paramString4, Throwable paramThrowable) { inner().logrb(paramMLevel, paramString1, paramString2, paramString3, paramString4, paramThrowable); }
  
  public void entering(String paramString1, String paramString2) { inner().entering(paramString1, paramString2); }
  
  public void entering(String paramString1, String paramString2, Object paramObject) { inner().entering(paramString1, paramString2, paramObject); }
  
  public void entering(String paramString1, String paramString2, Object[] paramArrayOfObject) { inner().entering(paramString1, paramString2, paramArrayOfObject); }
  
  public void exiting(String paramString1, String paramString2) { inner().exiting(paramString1, paramString2); }
  
  public void exiting(String paramString1, String paramString2, Object paramObject) { inner().exiting(paramString1, paramString2, paramObject); }
  
  public void throwing(String paramString1, String paramString2, Throwable paramThrowable) { inner().throwing(paramString1, paramString2, paramThrowable); }
  
  public void severe(String paramString) { inner().severe(paramString); }
  
  public void warning(String paramString) { inner().warning(paramString); }
  
  public void info(String paramString) { inner().info(paramString); }
  
  public void config(String paramString) { inner().config(paramString); }
  
  public void fine(String paramString) { inner().fine(paramString); }
  
  public void finer(String paramString) { inner().finer(paramString); }
  
  public void finest(String paramString) { inner().finest(paramString); }
  
  public boolean isLoggable(MLevel paramMLevel) { return inner().isLoggable(paramMLevel); }
  
  public ResourceBundle getResourceBundle() { return inner().getResourceBundle(); }
  
  public String getResourceBundleName() { return inner().getResourceBundleName(); }
  
  public void setFilter(Object paramObject) throws SecurityException { inner().setFilter(paramObject); }
  
  public Object getFilter() { return inner().getFilter(); }
  
  public void setLevel(MLevel paramMLevel) throws SecurityException { inner().setLevel(paramMLevel); }
  
  public MLevel getLevel() { return inner().getLevel(); }
  
  public void addHandler(Object paramObject) throws SecurityException { inner().addHandler(paramObject); }
  
  public void removeHandler(Object paramObject) throws SecurityException { inner().removeHandler(paramObject); }
  
  public Object[] getHandlers() { return inner().getHandlers(); }
  
  public void setUseParentHandlers(boolean paramBoolean) { inner().setUseParentHandlers(paramBoolean); }
  
  public boolean getUseParentHandlers() { return inner().getUseParentHandlers(); }
}
