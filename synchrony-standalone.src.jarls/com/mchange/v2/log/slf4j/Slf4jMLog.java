package com.mchange.v2.log.slf4j;

import com.mchange.v2.log.FallbackMLog;
import com.mchange.v2.log.MLevel;
import com.mchange.v2.log.MLog;
import com.mchange.v2.log.MLogInitializationException;
import com.mchange.v2.log.MLogger;
import com.mchange.v2.log.NullMLogger;
import org.slf4j.ILoggerFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public final class Slf4jMLog extends MLog {
  static final Object[] EMPTY_OBJ_ARRAY = new Object[0];
  
  private static final int ALL_INTVAL = MLevel.ALL.intValue();
  
  private static final int CONFIG_INTVAL = MLevel.CONFIG.intValue();
  
  private static final int FINE_INTVAL = MLevel.FINE.intValue();
  
  private static final int FINER_INTVAL = MLevel.FINER.intValue();
  
  private static final int FINEST_INTVAL = MLevel.FINEST.intValue();
  
  private static final int INFO_INTVAL = MLevel.INFO.intValue();
  
  private static final int OFF_INTVAL = MLevel.OFF.intValue();
  
  private static final int SEVERE_INTVAL = MLevel.SEVERE.intValue();
  
  private static final int WARNING_INTVAL = MLevel.WARNING.intValue();
  
  static final String CHECK_CLASS = "org.slf4j.LoggerFactory";
  
  static final String DFLT_LOGGER_NAME = "global";
  
  public Slf4jMLog() throws ClassNotFoundException, MLogInitializationException {
    Class.forName("org.slf4j.LoggerFactory");
    ILoggerFactory iLoggerFactory = LoggerFactory.getILoggerFactory();
    if (iLoggerFactory == null || iLoggerFactory.getClass().getName() == "org.slf4j.helpers.NOPLoggerFactory")
      throw new MLogInitializationException("slf4j found no binding or threatened to use its (dangerously silent) NOPLogger. We consider the slf4j library not found."); 
  }
  
  public MLogger getMLogger(String paramString) {
    Logger logger = LoggerFactory.getLogger(paramString);
    if (logger == null) {
      fallbackWarn(" with name '" + paramString + "'");
      return NullMLogger.instance();
    } 
    return new Slf4jMLogger(logger);
  }
  
  public MLogger getMLogger() {
    Logger logger = LoggerFactory.getLogger("global");
    if (logger == null) {
      fallbackWarn(" (default, with name 'global')");
      return NullMLogger.instance();
    } 
    return new Slf4jMLogger(logger);
  }
  
  private void fallbackWarn(String paramString) { FallbackMLog.getLogger().warning("Could not create or find slf4j Logger" + paramString + ". Using NullMLogger. All messages sent to thislogger will be silently ignored. You might want to fix this."); }
}
