package com.mchange.v2.log.log4j2;

import com.mchange.v2.log.MLevel;
import com.mchange.v2.log.MLog;
import java.io.Serializable;
import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.core.Filter;
import org.apache.logging.log4j.core.Layout;
import org.apache.logging.log4j.core.LogEvent;
import org.apache.logging.log4j.core.appender.AbstractAppender;
import org.apache.logging.log4j.message.Message;

public class MLogAppender extends AbstractAppender {
  protected MLogAppender(String paramString, Filter paramFilter, Layout<? extends Serializable> paramLayout, boolean paramBoolean) {
    super(paramString, paramFilter, paramLayout, paramBoolean);
    start();
  }
  
  public MLogAppender(String paramString, Filter paramFilter) { this(paramString, paramFilter, null, false); }
  
  public MLogAppender(String paramString) { this(paramString, null); }
  
  private MLevel levelToMLevel(Level paramLevel) {
    if (paramLevel == Level.OFF)
      return MLevel.OFF; 
    if (paramLevel == Level.FATAL)
      return MLevel.SEVERE; 
    if (paramLevel == Level.ERROR)
      return MLevel.SEVERE; 
    if (paramLevel == Level.WARN)
      return MLevel.WARNING; 
    if (paramLevel == Level.INFO)
      return MLevel.INFO; 
    if (paramLevel == Level.DEBUG)
      return MLevel.DEBUG; 
    if (paramLevel == Level.TRACE)
      return MLevel.TRACE; 
    if (paramLevel == Level.ALL)
      return MLevel.ALL; 
    throw new IllegalArgumentException("Unknown log4j2 Level: " + paramLevel);
  }
  
  public final void append(LogEvent paramLogEvent) { MLog.getLogger(getName()).log(levelToMLevel(paramLogEvent.getLevel()), messageToString(paramLogEvent.getMessage()), paramLogEvent.getThrown()); }
  
  public String messageToString(Message paramMessage) { return paramMessage.getFormattedMessage(); }
}
