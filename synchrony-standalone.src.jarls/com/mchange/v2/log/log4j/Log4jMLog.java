package com.mchange.v2.log.log4j;

import com.mchange.v2.log.FallbackMLog;
import com.mchange.v2.log.MLog;
import com.mchange.v2.log.MLogger;
import com.mchange.v2.log.NullMLogger;
import org.apache.log4j.Logger;

public final class Log4jMLog extends MLog {
  static final String CHECK_CLASS = "org.apache.log4j.Logger";
  
  public Log4jMLog() throws ClassNotFoundException { Class.forName("org.apache.log4j.Logger"); }
  
  public MLogger getMLogger(String paramString) {
    Logger logger = Logger.getLogger(paramString);
    if (logger == null) {
      fallbackWarn(" with name '" + paramString + "'");
      return NullMLogger.instance();
    } 
    return new Log4jMLogger(logger);
  }
  
  public MLogger getMLogger(Class paramClass) {
    Logger logger = Logger.getLogger(paramClass);
    if (logger == null) {
      fallbackWarn(" for class '" + paramClass.getName() + "'");
      return NullMLogger.instance();
    } 
    return new Log4jMLogger(logger);
  }
  
  public MLogger getMLogger() {
    Logger logger = Logger.getRootLogger();
    if (logger == null) {
      fallbackWarn(" (root logger)");
      return NullMLogger.instance();
    } 
    return new Log4jMLogger(logger);
  }
  
  private void fallbackWarn(String paramString) { FallbackMLog.getLogger().warning("Could not create or find log4j Logger" + paramString + ". Using NullMLogger. All messages sent to thislogger will be silently ignored. You might want to fix this."); }
}
