package com.mchange.v2.beans.swing;

import java.beans.IntrospectionException;
import java.util.HashMap;
import java.util.Map;
import javax.swing.AbstractButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;

class PropertyBoundButtonGroup extends ButtonGroup {
  PropertyComponentBindingUtility pcbu;
  
  HostBindingInterface myHbi;
  
  WeChangedListener wcl;
  
  Map buttonsModelsToValues;
  
  Map valuesToButtonModels;
  
  JButton fakeButton;
  
  public PropertyBoundButtonGroup(Object paramObject, String paramString) throws IntrospectionException {
    this.wcl = new WeChangedListener(this);
    this.buttonsModelsToValues = new HashMap();
    this.valuesToButtonModels = new HashMap();
    this.fakeButton = new JButton();
    this.myHbi = new MyHbi(this);
    this.pcbu = new PropertyComponentBindingUtility(this.myHbi, paramObject, paramString, false);
    add(this.fakeButton, null);
    this.pcbu.resync();
  }
  
  public void add(AbstractButton paramAbstractButton, Object paramObject) {
    super.add(paramAbstractButton);
    this.buttonsModelsToValues.put(paramAbstractButton.getModel(), paramObject);
    this.valuesToButtonModels.put(paramObject, paramAbstractButton.getModel());
    paramAbstractButton.addActionListener(this.wcl);
    this.pcbu.resync();
  }
  
  public void add(AbstractButton paramAbstractButton) {
    System.err.println(this + "Warning: The button '" + paramAbstractButton + "' has been implicitly associated with a null value!");
    System.err.println("To avoid this warning, please use public void add(AbstractButton button, Object associatedValue)");
    System.err.println("instead of the single-argument add method.");
    super.add(paramAbstractButton);
    paramAbstractButton.addActionListener(this.wcl);
    this.pcbu.resync();
  }
  
  public void remove(AbstractButton paramAbstractButton) {
    paramAbstractButton.removeActionListener(this.wcl);
    super.remove(paramAbstractButton);
  }
}
