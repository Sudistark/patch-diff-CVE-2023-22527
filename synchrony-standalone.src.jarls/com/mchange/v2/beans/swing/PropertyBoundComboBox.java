package com.mchange.v2.beans.swing;

import java.beans.IntrospectionException;
import java.util.Collection;
import java.util.Iterator;
import javax.swing.BoxLayout;
import javax.swing.ComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JFrame;

public class PropertyBoundComboBox extends JComboBox {
  PropertyComponentBindingUtility pcbu;
  
  MyHbi myHbi;
  
  Object itemsSrc;
  
  Object nullObject;
  
  public PropertyBoundComboBox(Object paramObject1, String paramString, Object paramObject2, Object paramObject3) throws IntrospectionException {
    this.itemsSrc = null;
    this.nullObject = null;
    this.myHbi = new MyHbi(this);
    this.pcbu = new PropertyComponentBindingUtility(this.myHbi, paramObject1, paramString, false);
    this.nullObject = paramObject3;
    setItemsSrc(paramObject2);
  }
  
  public Object getItemsSrc() { return this.itemsSrc; }
  
  public void setItemsSrc(Object paramObject) {
    this.myHbi.suspendNotifications();
    removeAllItems();
    if (paramObject instanceof Object[]) {
      Object[] arrayOfObject = (Object[])paramObject;
      byte b;
      int i;
      for (b = 0, i = arrayOfObject.length; b < i; b++)
        addItem(arrayOfObject[b]); 
    } else if (paramObject instanceof Collection) {
      Collection collection = (Collection)paramObject;
      for (Iterator iterator = collection.iterator(); iterator.hasNext();)
        addItem(iterator.next()); 
    } else if (paramObject instanceof ComboBoxModel) {
      setModel((ComboBoxModel)paramObject);
    } else {
      throw new IllegalArgumentException("itemsSrc must be an Object[], a Collection, or a ComboBoxModel");
    } 
    this.itemsSrc = paramObject;
    this.pcbu.resync();
    this.myHbi.resumeNotifications();
  }
  
  public void setNullObject(Object paramObject) {
    this.nullObject = null;
    this.pcbu.resync();
  }
  
  public Object getNullObject() { return this.nullObject; }
  
  public static void main(String[] paramArrayOfString) {
    try {
      TestBean testBean = new TestBean();
      Object object = new Object();
      testBean.addPropertyChangeListener(object);
      PropertyBoundComboBox propertyBoundComboBox = new PropertyBoundComboBox(testBean, "theString", new String[] { "SELECT", "Frog", "Fish", "Puppy" }, "SELECT");
      PropertyBoundTextField propertyBoundTextField1 = new PropertyBoundTextField(testBean, "theInt", 5);
      PropertyBoundTextField propertyBoundTextField2 = new PropertyBoundTextField(testBean, "theFloat", 5);
      JFrame jFrame = new JFrame();
      BoxLayout boxLayout = new BoxLayout(jFrame.getContentPane(), 1);
      jFrame.getContentPane().setLayout(boxLayout);
      jFrame.getContentPane().add(propertyBoundComboBox);
      jFrame.getContentPane().add(propertyBoundTextField1);
      jFrame.getContentPane().add(propertyBoundTextField2);
      jFrame.pack();
      jFrame.show();
    } catch (Exception exception) {
      exception.printStackTrace();
    } 
  }
}
