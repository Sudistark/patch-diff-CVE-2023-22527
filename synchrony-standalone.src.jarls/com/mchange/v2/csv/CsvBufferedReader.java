package com.mchange.v2.csv;

import java.io.BufferedReader;
import java.io.IOException;
import java.util.stream.Stream;

public class CsvBufferedReader extends BufferedReader {
  private BufferedReader inner;
  
  public CsvBufferedReader(BufferedReader paramBufferedReader) {
    super(paramBufferedReader);
    this.inner = paramBufferedReader;
  }
  
  public String readLine() throws IOException {
    try {
      return FastCsvUtils.csvReadLine(this.inner);
    } catch (MalformedCsvException malformedCsvException) {
      throw new IOException("Badly formatted CSV file.", malformedCsvException);
    } 
  }
  
  public String[] readSplitLine() throws IOException, MalformedCsvException {
    String str = readLine();
    return (str == null) ? null : FastCsvUtils.splitRecord(str);
  }
  
  public int read() throws IOException { return this.inner.read(); }
  
  public int read(char[] paramArrayOfChar, int paramInt1, int paramInt2) throws IOException { return this.inner.read(paramArrayOfChar, paramInt1, paramInt2); }
  
  public long skip(long paramLong) throws IOException { return this.inner.skip(paramLong); }
  
  public boolean ready() throws IOException { return this.inner.ready(); }
  
  public boolean markSupported() throws IOException { return this.inner.markSupported(); }
  
  public void mark(int paramInt) throws IOException { this.inner.mark(paramInt); }
  
  public void reset() throws IOException { this.inner.reset(); }
  
  public void close() throws IOException { this.inner.close(); }
  
  public Stream<String> lines() { throw new UnsupportedOperationException("lines() not yet implemented for CsvBufferedReader!"); }
}
