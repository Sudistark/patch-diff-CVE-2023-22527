package com.mchange.v1.lang;

import java.lang.reflect.Proxy;
import java.util.HashSet;

public final class Synchronizer {
  public static Object createSynchronizedWrapper(Object paramObject) {
    Object object = new Object(paramObject);
    Class clazz = paramObject.getClass();
    return Proxy.newProxyInstance(clazz.getClassLoader(), 
        recurseFindInterfaces(clazz), object);
  }
  
  private static Class[] recurseFindInterfaces(Class paramClass) {
    HashSet hashSet = new HashSet();
    while (paramClass != null) {
      Class[] arrayOfClass1 = paramClass.getInterfaces();
      byte b;
      int i;
      for (b = 0, i = arrayOfClass1.length; b < i; b++)
        hashSet.add(arrayOfClass1[b]); 
      paramClass = paramClass.getSuperclass();
    } 
    Class[] arrayOfClass = new Class[hashSet.size()];
    hashSet.toArray(arrayOfClass);
    return arrayOfClass;
  }
}
