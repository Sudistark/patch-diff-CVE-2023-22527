package com.mchange.v1.util;

import com.mchange.v2.lang.ObjectUtils;

public final class ArrayUtils {
  public static int indexOf(Object[] paramArrayOfObject, Object paramObject) {
    byte b;
    int i;
    for (b = 0, i = paramArrayOfObject.length; b < i; b++) {
      if (paramObject.equals(paramArrayOfObject[b]))
        return b; 
    } 
    return -1;
  }
  
  public static int identityIndexOf(Object[] paramArrayOfObject, Object paramObject) {
    byte b;
    int i;
    for (b = 0, i = paramArrayOfObject.length; b < i; b++) {
      if (paramObject == paramArrayOfObject[b])
        return b; 
    } 
    return -1;
  }
  
  public static boolean startsWith(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2) {
    int i = paramArrayOfByte1.length;
    int j = paramArrayOfByte2.length;
    if (i < j)
      return false; 
    for (byte b = 0; b < j; b++) {
      if (paramArrayOfByte1[b] != paramArrayOfByte2[b])
        return false; 
    } 
    return true;
  }
  
  public static int hashArray(Object[] paramArrayOfObject) {
    int i = paramArrayOfObject.length;
    int j = i;
    for (byte b = 0; b < i; b++) {
      int k = ObjectUtils.hashOrZero(paramArrayOfObject[b]);
      int m = b % 32;
      int n = k >>> m;
      n |= k << 32 - m;
      j ^= n;
    } 
    return j;
  }
  
  public static int hashArray(int[] paramArrayOfInt) {
    int i = paramArrayOfInt.length;
    int j = i;
    for (byte b = 0; b < i; b++) {
      int k = paramArrayOfInt[b];
      int m = b % 32;
      int n = k >>> m;
      n |= k << 32 - m;
      j ^= n;
    } 
    return j;
  }
  
  public static int hashOrZeroArray(Object[] paramArrayOfObject) { return (paramArrayOfObject == null) ? 0 : hashArray(paramArrayOfObject); }
  
  public static int hashOrZeroArray(int[] paramArrayOfInt) { return (paramArrayOfInt == null) ? 0 : hashArray(paramArrayOfInt); }
  
  public static String stringifyContents(Object[] paramArrayOfObject) {
    StringBuffer stringBuffer = new StringBuffer();
    stringBuffer.append("[ ");
    byte b;
    int i;
    for (b = 0, i = paramArrayOfObject.length; b < i; b++) {
      if (b)
        stringBuffer.append(", "); 
      stringBuffer.append(paramArrayOfObject[b].toString());
    } 
    stringBuffer.append(" ]");
    return stringBuffer.toString();
  }
  
  private static String toString(String[] paramArrayOfString, int paramInt) {
    StringBuffer stringBuffer = new StringBuffer(paramInt);
    boolean bool = true;
    stringBuffer.append('[');
    byte b;
    int i;
    for (b = 0, i = paramArrayOfString.length; b < i; b++) {
      if (bool) {
        bool = false;
      } else {
        stringBuffer.append(',');
      } 
      stringBuffer.append(paramArrayOfString[b]);
    } 
    stringBuffer.append(']');
    return stringBuffer.toString();
  }
  
  public static String toString(boolean[] paramArrayOfBoolean) {
    String[] arrayOfString = new String[paramArrayOfBoolean.length];
    int i = 0;
    byte b;
    int j;
    for (b = 0, j = paramArrayOfBoolean.length; b < j; b++) {
      String str = String.valueOf(paramArrayOfBoolean[b]);
      i += str.length();
      arrayOfString[b] = str;
    } 
    return toString(arrayOfString, i + paramArrayOfBoolean.length + 1);
  }
  
  public static String toString(byte[] paramArrayOfByte) {
    String[] arrayOfString = new String[paramArrayOfByte.length];
    int i = 0;
    byte b;
    int j;
    for (b = 0, j = paramArrayOfByte.length; b < j; b++) {
      String str = String.valueOf(paramArrayOfByte[b]);
      i += str.length();
      arrayOfString[b] = str;
    } 
    return toString(arrayOfString, i + paramArrayOfByte.length + 1);
  }
  
  public static String toString(char[] paramArrayOfChar) {
    String[] arrayOfString = new String[paramArrayOfChar.length];
    int i = 0;
    byte b;
    int j;
    for (b = 0, j = paramArrayOfChar.length; b < j; b++) {
      String str = String.valueOf(paramArrayOfChar[b]);
      i += str.length();
      arrayOfString[b] = str;
    } 
    return toString(arrayOfString, i + paramArrayOfChar.length + 1);
  }
  
  public static String toString(short[] paramArrayOfShort) {
    String[] arrayOfString = new String[paramArrayOfShort.length];
    int i = 0;
    byte b;
    int j;
    for (b = 0, j = paramArrayOfShort.length; b < j; b++) {
      String str = String.valueOf(paramArrayOfShort[b]);
      i += str.length();
      arrayOfString[b] = str;
    } 
    return toString(arrayOfString, i + paramArrayOfShort.length + 1);
  }
  
  public static String toString(int[] paramArrayOfInt) {
    String[] arrayOfString = new String[paramArrayOfInt.length];
    int i = 0;
    byte b;
    int j;
    for (b = 0, j = paramArrayOfInt.length; b < j; b++) {
      String str = String.valueOf(paramArrayOfInt[b]);
      i += str.length();
      arrayOfString[b] = str;
    } 
    return toString(arrayOfString, i + paramArrayOfInt.length + 1);
  }
  
  public static String toString(long[] paramArrayOfLong) {
    String[] arrayOfString = new String[paramArrayOfLong.length];
    int i = 0;
    byte b;
    int j;
    for (b = 0, j = paramArrayOfLong.length; b < j; b++) {
      String str = String.valueOf(paramArrayOfLong[b]);
      i += str.length();
      arrayOfString[b] = str;
    } 
    return toString(arrayOfString, i + paramArrayOfLong.length + 1);
  }
  
  public static String toString(float[] paramArrayOfFloat) {
    String[] arrayOfString = new String[paramArrayOfFloat.length];
    int i = 0;
    byte b;
    int j;
    for (b = 0, j = paramArrayOfFloat.length; b < j; b++) {
      String str = String.valueOf(paramArrayOfFloat[b]);
      i += str.length();
      arrayOfString[b] = str;
    } 
    return toString(arrayOfString, i + paramArrayOfFloat.length + 1);
  }
  
  public static String toString(double[] paramArrayOfDouble) {
    String[] arrayOfString = new String[paramArrayOfDouble.length];
    int i = 0;
    byte b;
    int j;
    for (b = 0, j = paramArrayOfDouble.length; b < j; b++) {
      String str = String.valueOf(paramArrayOfDouble[b]);
      i += str.length();
      arrayOfString[b] = str;
    } 
    return toString(arrayOfString, i + paramArrayOfDouble.length + 1);
  }
  
  public static String toString(Object[] paramArrayOfObject) {
    String[] arrayOfString = new String[paramArrayOfObject.length];
    int i = 0;
    byte b;
    int j;
    for (b = 0, j = paramArrayOfObject.length; b < j; b++) {
      String str;
      Object object = paramArrayOfObject[b];
      if (object instanceof Object[]) {
        str = toString((Object[])object);
      } else if (object instanceof double[]) {
        str = toString((double[])object);
      } else if (object instanceof float[]) {
        str = toString((float[])object);
      } else if (object instanceof long[]) {
        str = toString((long[])object);
      } else if (object instanceof int[]) {
        str = toString((int[])object);
      } else if (object instanceof short[]) {
        str = toString((short[])object);
      } else if (object instanceof char[]) {
        str = toString((char[])object);
      } else if (object instanceof byte[]) {
        str = toString((byte[])object);
      } else if (object instanceof boolean[]) {
        str = toString((boolean[])object);
      } else {
        str = String.valueOf(paramArrayOfObject[b]);
      } 
      i += str.length();
      arrayOfString[b] = str;
    } 
    return toString(arrayOfString, i + paramArrayOfObject.length + 1);
  }
}
