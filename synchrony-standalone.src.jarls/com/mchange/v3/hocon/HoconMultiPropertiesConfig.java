package com.mchange.v3.hocon;

import com.mchange.v2.cfg.DelayedLogItem;
import com.mchange.v2.cfg.MultiPropertiesConfig;
import com.typesafe.config.Config;
import com.typesafe.config.ConfigList;
import com.typesafe.config.ConfigValue;
import com.typesafe.config.ConfigValueType;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Properties;

public class HoconMultiPropertiesConfig extends MultiPropertiesConfig {
  String quasiResourcePath;
  
  Properties props;
  
  List<DelayedLogItem> delayedLogItems;
  
  Map<String, Properties> propsByPrefix;
  
  public HoconMultiPropertiesConfig(String paramString, Config paramConfig) {
    this.delayedLogItems = new LinkedList();
    this.propsByPrefix = new HashMap();
    this.quasiResourcePath = paramString;
    this.props = propsForConfig(paramConfig);
  }
  
  private Properties propsForConfig(Config paramConfig) {
    Properties properties = new Properties();
    for (Map.Entry entry : paramConfig.entrySet()) {
      try {
        properties.put(entry.getKey(), asSimpleString((ConfigValue)entry.getValue()));
      } catch (IllegalArgumentException illegalArgumentException) {
        this.delayedLogItems.add(new DelayedLogItem(DelayedLogItem.Level.FINE, "For property '" + (String)entry.getKey() + "', " + illegalArgumentException.getMessage()));
      } 
    } 
    return properties;
  }
  
  private static String asSimpleString(ConfigValue paramConfigValue) throws IllegalArgumentException {
    int i;
    byte b;
    StringBuilder stringBuilder;
    ConfigList configList;
    ConfigValueType configValueType = paramConfigValue.valueType();
    switch (null.$SwitchMap$com$typesafe$config$ConfigValueType[configValueType.ordinal()]) {
      case 1:
      case 2:
      case 3:
        return String.valueOf(paramConfigValue.unwrapped());
      case 4:
        configList = (ConfigList)paramConfigValue;
        for (ConfigValue configValue : configList) {
          if (!isSimple(configValue))
            throw new IllegalArgumentException("value is a complex list, could not be rendered as a simple property: " + paramConfigValue); 
        } 
        stringBuilder = new StringBuilder();
        for (b = 0, i = configList.size(); b < i; b++) {
          if (b)
            stringBuilder.append(','); 
          stringBuilder.append(asSimpleString((ConfigValue)configList.get(b)));
        } 
        return stringBuilder.toString();
      case 5:
        throw new IllegalArgumentException("value is a ConfigValue object rather than an atom or list of atoms: " + paramConfigValue);
      case 6:
        throw new IllegalArgumentException("value is a null; will be excluded from the MultiPropertiesConfig: " + paramConfigValue);
    } 
    throw new IllegalArgumentException("value of an unexpected type: (value->" + paramConfigValue + ", type->" + configValueType + ")");
  }
  
  private static boolean isSimple(ConfigValue paramConfigValue) {
    ConfigValueType configValueType = paramConfigValue.valueType();
    switch (null.$SwitchMap$com$typesafe$config$ConfigValueType[configValueType.ordinal()]) {
      case 1:
      case 2:
      case 3:
        return true;
    } 
    return false;
  }
  
  public String[] getPropertiesResourcePaths() { return new String[] { this.quasiResourcePath }; }
  
  public Properties getPropertiesByResourcePath(String paramString) {
    if (paramString.equals(this.quasiResourcePath)) {
      Properties properties = new Properties();
      properties.putAll(this.props);
      return properties;
    } 
    return null;
  }
  
  public Properties getPropertiesByPrefix(String paramString) {
    Properties properties = (Properties)this.propsByPrefix.get(paramString);
    if (properties == null) {
      properties = new Properties();
      if ("".equals(paramString)) {
        properties.putAll(this.props);
      } else {
        String str = paramString + '.';
        for (Map.Entry entry : this.props.entrySet()) {
          String str1 = (String)entry.getKey();
          if (str1.startsWith(str))
            properties.put(str1, entry.getValue()); 
        } 
      } 
      this.propsByPrefix.put(paramString, properties);
    } 
    return properties;
  }
  
  public String getProperty(String paramString) { return (String)this.props.get(paramString); }
  
  public List getDelayedLogItems() { return this.delayedLogItems; }
}
