package com.mchange.v3.hocon;

import com.typesafe.config.Config;
import com.typesafe.config.ConfigException;
import com.typesafe.config.ConfigFactory;
import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Map;
import java.util.Properties;
import java.util.Set;

public final class HoconUtils {
  private static final String APPLICATION = "application";
  
  public static PropertiesConversion configToProperties(Config paramConfig) {
    Set set = paramConfig.entrySet();
    Properties properties = new Properties();
    HashSet hashSet = new HashSet();
    for (Map.Entry entry : set) {
      String str1 = (String)entry.getKey();
      String str2 = null;
      try {
        str2 = paramConfig.getString(str1);
      } catch (com.typesafe.config.ConfigException.WrongType wrongType) {
        hashSet.add(str1);
      } 
      if (str2 != null)
        properties.setProperty(str1, str2); 
    } 
    PropertiesConversion propertiesConversion = new PropertiesConversion();
    propertiesConversion.properties = properties;
    propertiesConversion.unrenderable = hashSet;
    return propertiesConversion;
  }
  
  public static Config applicationOrStandardSubstitute(ClassLoader paramClassLoader) throws SubstituteNotAvailableException {
    String str1 = "application";
    Config config = null;
    String str2;
    if ((str2 = System.getProperty("config.resource")) != null) {
      str1 = str2;
    } else if ((str2 = System.getProperty("config.file")) != null) {
      File file = new File(str2);
      if (file.exists()) {
        if (file.canRead()) {
          config = ConfigFactory.parseFile(file);
        } else {
          throw new SubstituteNotAvailableException(String.format("config.file '%s' (specified as a System property) is not readable.", new Object[] { file.getAbsolutePath() }));
        } 
      } else {
        throw new SubstituteNotAvailableException(String.format("Specified config.file '%s' (specified as a System property) does not exist.", new Object[] { file.getAbsolutePath() }));
      } 
    } else if ((str2 = System.getProperty("config.url")) != null) {
      try {
        config = ConfigFactory.parseURL(new URL(str2));
      } catch (MalformedURLException malformedURLException) {
        throw new SubstituteNotAvailableException(String.format("Specified config.url '%s' (specified as a System property) could not be parsed.", new Object[] { str2 }));
      } 
    } 
    if (config == null)
      config = ConfigFactory.parseResourcesAnySyntax(paramClassLoader, str1); 
    return config;
  }
  
  public static ConfigWithFallbackMessage applicationOrStandardSubstituteFallbackWithMessage(ClassLoader paramClassLoader) throws SubstituteNotAvailableException {
    try {
      return new ConfigWithFallbackMessage(applicationOrStandardSubstitute(paramClassLoader), null, null);
    } catch (SubstituteNotAvailableException substituteNotAvailableException) {
      return new ConfigWithFallbackMessage(ConfigFactory.parseResourcesAnySyntax(paramClassLoader, "application"), substituteNotAvailableException.getMessage() + " Falling back to standard application.(conf|json|properties).", null);
    } 
  }
  
  public static WarnedConfig customFileOrSpecifiedSourceWins(File paramFile) {
    ArrayList arrayList = new ArrayList();
    boolean bool = paramFile.exists();
    Properties properties = System.getProperties();
    boolean bool1 = (properties.containsKey("config.resource") || properties.containsKey("config.file") || properties.containsKey("config.url")) ? 1 : 0;
    if (bool1 && bool) {
      arrayList.add(createSpecifiedSourceWarning(paramFile, properties));
      return new WarnedConfig(ConfigFactory.load(), arrayList);
    } 
    if (!bool)
      return new WarnedConfig(ConfigFactory.load(), arrayList); 
    Config config = ConfigFactory.defaultOverrides().withFallback(ConfigFactory.parseFile(paramFile).withFallback(ConfigFactory.defaultApplication().withFallback(ConfigFactory.defaultReference())));
    return new WarnedConfig(config, arrayList);
  }
  
  private static String createSpecifiedSourceWarning(File paramFile, Properties paramProperties) {
    boolean bool = true;
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("Config file ");
    stringBuilder.append(paramFile.getAbsolutePath());
    stringBuilder.append(" will be ignored because a location has been explicitly set via System.properties. [");
    if (paramProperties.containsKey("config.resource")) {
      stringBuilder.append("config.resource=" + paramProperties.getProperty("config.resource"));
      bool = false;
    } 
    if (paramProperties.containsKey("config.file")) {
      if (!bool)
        stringBuilder.append(", "); 
      stringBuilder.append("config.file=" + paramProperties.getProperty("config.file"));
      bool = false;
    } 
    if (paramProperties.containsKey("config.url")) {
      if (!bool)
        stringBuilder.append(", "); 
      stringBuilder.append("config.url=" + paramProperties.getProperty("config.url"));
      bool = false;
    } 
    stringBuilder.append("]");
    return stringBuilder.toString();
  }
}
