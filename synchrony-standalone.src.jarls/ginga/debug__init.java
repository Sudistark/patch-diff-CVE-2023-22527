package ginga;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class debug__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__10;
  
  public static final Var const__11;
  
  public static final AFn const__13;
  
  public static final Var const__14;
  
  public static final AFn const__18;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new debug.fn__19233());
    const__3.setDynamic(true).setMeta((IPersistentMap)const__10);
    const__3.setDynamic(true).bindRoot(null);
    const__11.setDynamic(true).setMeta((IPersistentMap)const__13);
    const__11.setDynamic(true).bindRoot(Boolean.FALSE);
    const__14.setMeta((IPersistentMap)const__18);
    const__14.bindRoot(new debug.debug());
    ((Var)const__14)





      
      .setMacro();
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "ginga.debug");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("ginga.debug", "*out*");
    const__10 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(5), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/debug.clj" });
    const__11 = (Var)RT.var("ginga.debug", "*prn*");
    const__13 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(6), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/debug.clj" });
    const__14 = (Var)RT.var("ginga.debug", "debug");
    const__18 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(8), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/debug.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("ginga.debug__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
