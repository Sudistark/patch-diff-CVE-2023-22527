package ginga;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class tree__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__12;
  
  public static final Var const__13;
  
  public static final AFn const__16;
  
  public static final Var const__17;
  
  public static final AFn const__20;
  
  public static final Var const__21;
  
  public static final AFn const__24;
  
  public static final Var const__25;
  
  public static final AFn const__28;
  
  public static final Var const__29;
  
  public static final AFn const__32;
  
  public static final Var const__33;
  
  public static final AFn const__36;
  
  public static final Var const__37;
  
  public static final AFn const__40;
  
  public static final Var const__41;
  
  public static final Keyword const__43;
  
  public static final AFn const__45;
  
  public static final Var const__46;
  
  public static final AFn const__49;
  
  public static final Var const__50;
  
  public static final AFn const__53;
  
  public static final Var const__54;
  
  public static final AFn const__57;
  
  public static final Var const__58;
  
  public static final AFn const__61;
  
  public static final Var const__62;
  
  public static final AFn const__65;
  
  public static final Var const__66;
  
  public static final AFn const__69;
  
  public static final Object const__70;
  
  public static final Var const__71;
  
  public static final Var const__72;
  
  public static final Var const__73;
  
  public static final Var const__74;
  
  public static final ISeq const__75;
  
  public static final Var const__76;
  
  public static final Var const__77;
  
  public static final AFn const__81;
  
  public static final Keyword const__82;
  
  public static final AFn const__83;
  
  public static final Keyword const__84;
  
  public static final Keyword const__85;
  
  public static final AFn const__88;
  
  public static final Keyword const__89;
  
  public static final Var const__90;
  
  public static final Var const__91;
  
  public static final Var const__92;
  
  public static final AFn const__93;
  
  public static final AFn const__94;
  
  public static final Keyword const__95;
  
  public static final AFn const__96;
  
  public static final AFn const__97;
  
  public static final Var const__98;
  
  public static final AFn const__99;
  
  public static final Var const__100;
  
  public static final AFn const__102;
  
  public static final Var const__103;
  
  public static final Var const__104;
  
  public static final Var const__105;
  
  public static final AFn const__107;
  
  public static final Var const__108;
  
  public static final AFn const__110;
  
  public static final Var const__111;
  
  public static final Var const__112;
  
  public static final AFn const__114;
  
  public static final Var const__115;
  
  public static final AFn const__117;
  
  public static final Var const__118;
  
  public static final AFn const__120;
  
  public static final Var const__121;
  
  public static final AFn const__123;
  
  public static final Var const__124;
  
  public static final AFn const__126;
  
  public static final Var const__127;
  
  public static final AFn const__129;
  
  public static final Var const__130;
  
  public static final AFn const__132;
  
  public static final Var const__133;
  
  public static final AFn const__135;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new tree.fn__20610());
    const__3.setMeta((IPersistentMap)const__12);
    const__3.bindRoot(new tree.return_2());
    const__13.setMeta((IPersistentMap)const__16);
    const__13.bindRoot(new tree.replace_first());
    const__17.setMeta((IPersistentMap)const__20);
    const__17.bindRoot(new tree.prepost_reduce_STAR_());
    const__21.setMeta((IPersistentMap)const__24);
    const__21.bindRoot(new tree.nodes_STAR_());
    const__25.setMeta((IPersistentMap)const__28);
    const__25.bindRoot(new tree.contextual_postwalk_STAR_());
    const__29.setMeta((IPersistentMap)const__32);
    const__29.bindRoot(new tree.prepostwalk_STAR_());
    const__33.setMeta((IPersistentMap)const__36);
    const__33.bindRoot(new tree.postwalk_STAR_());
    const__37.setMeta((IPersistentMap)const__40);
    const__37.bindRoot(new tree.prewalk_STAR_());
    const__41.setMeta((IPersistentMap)const__45);
    const__41.bindRoot(new tree.postcat_STAR_());
    const__46.setMeta((IPersistentMap)const__49);
    const__46.bindRoot(new tree.lazy_precat_STAR_());
    const__50.setMeta((IPersistentMap)const__53);
    const__50.bindRoot(new tree.contextual_postcat_STAR_());
    const__54.setMeta((IPersistentMap)const__57);
    const__54.bindRoot(new tree.preprune_STAR_());
    const__58.setMeta((IPersistentMap)const__61);
    const__58.bindRoot(new tree.node_or_children());
    const__62.setMeta((IPersistentMap)const__65);
    const__62.bindRoot(new tree.preevict_STAR_());
    const__66.setMeta((IPersistentMap)const__69);
    const__66.bindRoot(new tree.postevict_STAR_());
    const__100.setMeta((IPersistentMap)const__102);
    const__100





      
      .bindRoot(((IFn)const__103.getRawRoot()).invoke(const__17.getRawRoot(), const__104.getRawRoot()));
    const__105.setMeta((IPersistentMap)const__107);
    const__105
      .bindRoot(((IFn)const__103.getRawRoot()).invoke(const__21.getRawRoot(), const__104.getRawRoot()));
    const__108.setMeta((IPersistentMap)const__110);
    const__108
      .bindRoot(((IFn)const__103.getRawRoot()).invoke(const__41.getRawRoot(), const__104.getRawRoot(), const__111.getRawRoot()));
    const__112.setMeta((IPersistentMap)const__114);
    const__112
      .bindRoot(((IFn)const__103.getRawRoot()).invoke(const__46.getRawRoot(), const__104.getRawRoot(), const__111.getRawRoot()));
    const__115.setMeta((IPersistentMap)const__117);
    const__115
      .bindRoot(((IFn)const__103.getRawRoot()).invoke(const__50.getRawRoot(), const__104.getRawRoot(), const__111.getRawRoot()));
    const__118.setMeta((IPersistentMap)const__120);
    const__118
      .bindRoot(((IFn)const__103.getRawRoot()).invoke(const__25.getRawRoot(), const__104.getRawRoot(), const__111.getRawRoot()));
    const__121.setMeta((IPersistentMap)const__123);
    const__121
      .bindRoot(((IFn)const__103.getRawRoot()).invoke(const__33.getRawRoot(), const__104.getRawRoot(), const__111.getRawRoot()));
    const__124.setMeta((IPersistentMap)const__126);
    const__124
      .bindRoot(((IFn)const__103.getRawRoot()).invoke(const__37.getRawRoot(), const__104.getRawRoot(), const__111.getRawRoot()));
    const__127.setMeta((IPersistentMap)const__129);
    const__127
      .bindRoot(((IFn)const__103.getRawRoot()).invoke(const__54.getRawRoot(), const__104.getRawRoot(), const__111.getRawRoot()));
    const__130.setMeta((IPersistentMap)const__132);
    const__130
      .bindRoot(((IFn)const__103.getRawRoot()).invoke(const__62.getRawRoot(), const__104.getRawRoot(), const__111.getRawRoot()));
    const__133.setMeta((IPersistentMap)const__135);
    const__133
      .bindRoot(((IFn)const__103.getRawRoot()).invoke(const__66.getRawRoot(), const__104.getRawRoot(), const__111.getRawRoot()));
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "ginga.tree");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("ginga.tree", "return-2");
    const__12 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "a"), Symbol.intern(null, "b")) })), RT.keyword(null, "line"), Integer.valueOf(5), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/tree.cljc" });
    const__13 = (Var)RT.var("ginga.tree", "replace-first");
    const__16 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "item"), Symbol.intern(null, "s")) })), RT.keyword(null, "line"), Integer.valueOf(6), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/tree.cljc" });
    const__17 = (Var)RT.var("ginga.tree", "prepost-reduce*");
    const__20 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "children"), Symbol.intern(null, "enter"), Symbol.intern(null, "leave"), Symbol.intern(null, "init"), Symbol.intern(null, "node")), RT.vector(new Object[] { Symbol.intern(null, "children"), Symbol.intern(null, "pre"), Symbol.intern(null, "pre-replace-first"), Symbol.intern(null, "enter"), Symbol.intern(null, "leave"), Symbol.intern(null, "init"), Symbol.intern(null, "node") }) })), RT.keyword(null, "line"), Integer.valueOf(8), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/tree.cljc" });
    const__21 = (Var)RT.var("ginga.tree", "nodes*");
    const__24 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "children"), Symbol.intern(null, "node")) })), RT.keyword(null, "line"), Integer.valueOf(26), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/tree.cljc" });
    const__25 = (Var)RT.var("ginga.tree", "contextual-postwalk*");
    const__28 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "children"), Symbol.intern(null, "with-children"), Symbol.intern(null, "post-leave"), Symbol.intern(null, "init"), Symbol.intern(null, "node")) })), RT.keyword(null, "line"), Integer.valueOf(29), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/tree.cljc" });
    const__29 = (Var)RT.var("ginga.tree", "prepostwalk*");
    const__32 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "children"), Symbol.intern(null, "with-children"), Symbol.intern(null, "pre"), Symbol.intern(null, "post"), Symbol.intern(null, "node")) })), RT.keyword(null, "line"), Integer.valueOf(46), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/tree.cljc" });
    const__33 = (Var)RT.var("ginga.tree", "postwalk*");
    const__36 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "children"), Symbol.intern(null, "with-children"), Symbol.intern(null, "post"), Symbol.intern(null, "node")) })), RT.keyword(null, "line"), Integer.valueOf(63), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/tree.cljc" });
    const__37 = (Var)RT.var("ginga.tree", "prewalk*");
    const__40 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "children"), Symbol.intern(null, "with-children"), Symbol.intern(null, "pre"), Symbol.intern(null, "node")) })), RT.keyword(null, "line"), Integer.valueOf(66), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/tree.cljc" });
    const__41 = (Var)RT.var("ginga.tree", "postcat*");
    const__43 = (Keyword)RT.keyword(null, "doc");
    const__45 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "children"), Symbol.intern(null, "with-children"), Symbol.intern(null, "post"), Symbol.intern(null, "node")) })), RT.keyword(null, "doc"), "Similar to postwalk, except post returns a sequence of zero or more\n  nodes and consequently postcat may return a sequence of zero or more\n  nodes.", RT.keyword(null, "line"), Integer.valueOf(69), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/tree.cljc" });
    const__46 = (Var)RT.var("ginga.tree", "lazy-precat*");
    const__49 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "children"), Symbol.intern(null, "with-children"), Symbol.intern(null, "pre"), Symbol.intern(null, "node")) })), RT.keyword(null, "line"), Integer.valueOf(79), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/tree.cljc" });
    const__50 = (Var)RT.var("ginga.tree", "contextual-postcat*");
    const__53 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "children"), Symbol.intern(null, "with-children"), Symbol.intern(null, "post-leave"), Symbol.intern(null, "init"), Symbol.intern(null, "node")) })), RT.keyword(null, "line"), Integer.valueOf(85), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/tree.cljc" });
    const__54 = (Var)RT.var("ginga.tree", "preprune*");
    const__57 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "children"), Symbol.intern(null, "with-children"), Symbol.intern(null, "pred"), Symbol.intern(null, "node")) })), RT.keyword(null, "doc"), "Tests each node with pred as the tree is descended into and removes\n  any node for which pred is true. Will not descend into pruned nodes.", RT.keyword(null, "line"), Integer.valueOf(91), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/tree.cljc" });
    const__58 = (Var)RT.var("ginga.tree", "node-or-children");
    const__61 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "children"), Symbol.intern(null, "pred"), Symbol.intern(null, "node")) })), RT.keyword(null, "line"), Integer.valueOf(102), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/tree.cljc" });
    const__62 = (Var)RT.var("ginga.tree", "preevict*");
    const__65 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "children"), Symbol.intern(null, "with-children"), Symbol.intern(null, "pred"), Symbol.intern(null, "node")) })), RT.keyword(null, "doc"), "Similar to preprune, but keeps an evicted node's children in place of\n  their parent.", RT.keyword(null, "line"), Integer.valueOf(107), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/tree.cljc" });
    const__66 = (Var)RT.var("ginga.tree", "postevict*");
    const__69 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "children"), Symbol.intern(null, "with-children"), Symbol.intern(null, "pred"), Symbol.intern(null, "node")) })), RT.keyword(null, "doc"), "Similar to preevict, but tests nodes as the tree is ascended.", RT.keyword(null, "line"), Integer.valueOf(118), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/tree.cljc" });
    const__70 = RT.classForName("ginga.tree.Node");
    const__71 = (Var)RT.var("clojure.core", "alter-meta!");
    const__72 = (Var)RT.var("ginga.tree", "Node");
    const__73 = (Var)RT.var("clojure.core", "assoc");
    const__74 = (Var)RT.var("clojure.core", "assert-same-protocol");
    const__75 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "children")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Gets the children of the given node.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "node")) })) })), ((IObj)Symbol.intern(null, "with-children")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Updates the children of the given node to the given child-nodes", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "node"), Symbol.intern(null, "child-nodes")) })) })) }));
    const__76 = (Var)RT.var("clojure.core", "alter-var-root");
    const__77 = (Var)RT.var("clojure.core", "merge");
    const__81 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "ginga.tree.Node"), RT.keyword(null, "on-interface"), RT.classForName("ginga.tree.Node"), RT.keyword(null, "doc"), "Functions for getting and updating children on a node." });
    const__82 = (Keyword)RT.keyword(null, "sigs");
    const__83 = (AFn)RT.map(new Object[] { RT.keyword(null, "children"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "children")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Gets the children of the given node.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "node")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "node")) })), RT.keyword(null, "doc"), "Gets the children of the given node." }), RT.keyword(null, "with-children"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "with-children")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Updates the children of the given node to the given child-nodes", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "node"), Symbol.intern(null, "child-nodes")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "node"), Symbol.intern(null, "child-nodes")) })), RT.keyword(null, "doc"), "Updates the children of the given node to the given child-nodes" }) });
    const__84 = (Keyword)RT.keyword(null, "var");
    const__85 = (Keyword)RT.keyword(null, "method-map");
    const__88 = (AFn)RT.map(new Object[] { RT.keyword(null, "children"), RT.keyword(null, "children"), RT.keyword(null, "with-children"), RT.keyword(null, "with-children") });
    const__89 = (Keyword)RT.keyword(null, "method-builders");
    const__90 = (Var)RT.var("clojure.core", "intern");
    const__91 = (Var)RT.var("clojure.core", "*ns*");
    const__92 = (Var)RT.var("clojure.core", "with-meta");
    const__93 = (AFn)((IObj)Symbol.intern(null, "children")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Gets the children of the given node.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "node")) })) }));
    const__94 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "children")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Gets the children of the given node.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "node")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "node")) })), RT.keyword(null, "doc"), "Gets the children of the given node." });
    const__95 = (Keyword)RT.keyword(null, "protocol");
    const__96 = (AFn)((IObj)Symbol.intern(null, "with-children")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Updates the children of the given node to the given child-nodes", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "node"), Symbol.intern(null, "child-nodes")) })) }));
    const__97 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "with-children")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Updates the children of the given node to the given child-nodes", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "node"), Symbol.intern(null, "child-nodes")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "node"), Symbol.intern(null, "child-nodes")) })), RT.keyword(null, "doc"), "Updates the children of the given node to the given child-nodes" });
    const__98 = (Var)RT.var("clojure.core", "-reset-methods");
    const__99 = (AFn)Symbol.intern(null, "Node");
  }
  
  public static void __init1() {
    const__100 = (Var)RT.var("ginga.tree", "prepost-reduce");
    const__102 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(131), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/tree.cljc" });
    const__103 = (Var)RT.var("clojure.core", "partial");
    const__104 = (Var)RT.var("ginga.tree", "children");
    const__105 = (Var)RT.var("ginga.tree", "nodes");
    const__107 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(132), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/tree.cljc" });
    const__108 = (Var)RT.var("ginga.tree", "postcat");
    const__110 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(133), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/tree.cljc" });
    const__111 = (Var)RT.var("ginga.tree", "with-children");
    const__112 = (Var)RT.var("ginga.tree", "lazy-precat");
    const__114 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(134), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/tree.cljc" });
    const__115 = (Var)RT.var("ginga.tree", "contextual-postcat");
    const__117 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(135), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/tree.cljc" });
    const__118 = (Var)RT.var("ginga.tree", "contextual-postwalk");
    const__120 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(136), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/tree.cljc" });
    const__121 = (Var)RT.var("ginga.tree", "postwalk");
    const__123 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(137), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/tree.cljc" });
    const__124 = (Var)RT.var("ginga.tree", "prewalk");
    const__126 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(138), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/tree.cljc" });
    const__127 = (Var)RT.var("ginga.tree", "preprune");
    const__129 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(139), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/tree.cljc" });
    const__130 = (Var)RT.var("ginga.tree", "preevict");
    const__132 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(140), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/tree.cljc" });
    const__133 = (Var)RT.var("ginga.tree", "postevict");
    const__135 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(141), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/tree.cljc" });
  }
  
  static  {
    __init0();
    __init1();
    Compiler.pushNSandLoader(RT.classForName("ginga.tree__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
