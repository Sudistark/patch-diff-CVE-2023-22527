package ginga.zip;

import clojure.lang.AFn;
import clojure.lang.APersistentMap;
import clojure.lang.Associative;
import clojure.lang.Counted;
import clojure.lang.IFn;
import clojure.lang.IHashEq;
import clojure.lang.IKeywordLookup;
import clojure.lang.ILookup;
import clojure.lang.ILookupThunk;
import clojure.lang.IMapEntry;
import clojure.lang.IObj;
import clojure.lang.IPersistentCollection;
import clojure.lang.IPersistentMap;
import clojure.lang.IPersistentVector;
import clojure.lang.IRecord;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.MapEntry;
import clojure.lang.Numbers;
import clojure.lang.PersistentHashSet;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.RecordIterator;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Util;
import clojure.lang.Var;
import java.io.Serializable;
import java.util.Arrays;
import java.util.Collection;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

public final class Zipper implements Nth, Backtrack, Edit, AsZipper, Traverse, IRecord, IHashEq, IObj, ILookup, IKeywordLookup, IPersistentMap, Map, Serializable {
  public final Object prevs;
  
  public final Object nexts;
  
  public final Object up;
  
  public final Object m;
  
  public final Object __meta;
  
  public final Object __extmap;
  
  int __hash;
  
  int __hasheq;
  
  private static Class __cached_class__0;
  
  private static Class __cached_class__1;
  
  private static Class __cached_class__2;
  
  private static Class __cached_class__3;
  
  private static Class __cached_class__4;
  
  private static Class __cached_class__5;
  
  private static Class __cached_class__6;
  
  public static final Var const__0 = (Var)RT.var("clojure.core", "set");
  
  public static final Var const__1 = (Var)RT.var("clojure.core", "vals");
  
  public static final Var const__2 = (Var)RT.var("clojure.core", "keys");
  
  public static final Var const__4 = (Var)RT.var("clojure.core", "some");
  
  public static final Var const__7 = (Var)RT.var("clojure.core", "contains?");
  
  public static final Keyword const__8 = (Keyword)RT.keyword(null, "m");
  
  public static final Keyword const__9 = (Keyword)RT.keyword(null, "nexts");
  
  public static final Keyword const__10 = (Keyword)RT.keyword(null, "up");
  
  public static final Keyword const__11 = (Keyword)RT.keyword(null, "prevs");
  
  public static final AFn const__12 = (AFn)PersistentHashSet.create(new Object[] { RT.keyword(null, "m"), RT.keyword(null, "nexts"), RT.keyword(null, "up"), RT.keyword(null, "prevs") });
  
  public static final Var const__13 = (Var)RT.var("clojure.core", "dissoc");
  
  public static final Var const__14 = (Var)RT.var("clojure.core", "with-meta");
  
  public static final Var const__15 = (Var)RT.var("clojure.core", "into");
  
  public static final Var const__16 = (Var)RT.var("clojure.core", "not-empty");
  
  public static final Var const__17 = (Var)RT.var("clojure.core", "identical?");
  
  public static final Var const__18 = (Var)RT.var("clojure.core", "assoc");
  
  public static final AFn const__19 = (AFn)Tuple.create(RT.keyword(null, "prevs"), RT.keyword(null, "nexts"), RT.keyword(null, "up"), RT.keyword(null, "m"));
  
  public static final Var const__20 = (Var)RT.var("clojure.core", "seq");
  
  public static final Var const__21 = (Var)RT.var("clojure.core", "concat");
  
  public static final Var const__22 = (Var)RT.var("clojure.core", "not");
  
  public static final Var const__23 = (Var)RT.var("clojure.core", "class");
  
  public static final Var const__24 = (Var)RT.var("clojure.core", "imap-cons");
  
  public static final Var const__25 = (Var)RT.var("clojure.core", "str");
  
  public static final Var const__34 = (Var)RT.var("clojure.core", "conj");
  
  public static final Var const__35 = (Var)RT.var("clojure.core", "first");
  
  public static final Var const__36 = (Var)RT.var("clojure.core", "next");
  
  public static final Var const__37 = (Var)RT.var("ginga.zip", "down-impl");
  
  public static final Var const__39 = (Var)RT.var("clojure.core", "pop");
  
  public static final Var const__40 = (Var)RT.var("clojure.core", "cons");
  
  public static final Var const__41 = (Var)RT.var("clojure.core", "peek");
  
  public static final Var const__42 = (Var)RT.var("clojure.core", "pr-str");
  
  public static final AFn const__43 = (AFn)Symbol.intern(null, "nexts");
  
  public static final AFn const__44 = (AFn)Symbol.intern(null, "nexts");
  
  public static final Var const__45 = (Var)RT.var("ginga.zip", "replace");
  
  public static final Var const__46 = (Var)RT.var("ginga.tree", "with-children");
  
  public static final Var const__47 = (Var)RT.var("ginga.zip", "node");
  
  public static final Var const__48 = (Var)RT.var("ginga.zip", "replace-next");
  
  public static final Var const__49 = (Var)RT.var("ginga.zip", "next");
  
  public static final Var const__50 = (Var)RT.var("ginga.core", "ensure-vector");
  
  public static final AFn const__51 = (AFn)Symbol.intern(null, "nexts");
  
  public static final Object const__52 = ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "seq"), Symbol.intern(null, "prevs") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(168), RT.keyword(null, "column"), Integer.valueOf(13) }));
  
  public static final Var const__53 = (Var)RT.var("ginga.core", "nth-iteration"), const__54 = (Var)RT.var("ginga.zip", "prev");
  
  public Zipper(Object paramObject1, Object paramObject2, Object paramObject3, Object paramObject4, Object paramObject5, Object paramObject6, int paramInt1, int paramInt2) { this.prevs = paramObject1;
    this.nexts = paramObject2;
    this.up = paramObject3;
    this.m = paramObject4;
    this.__meta = paramObject5;
    this.__extmap = paramObject6;
    this.__hash = paramInt1;
    this.__hasheq = paramInt2; }
  
  public Zipper(Object paramObject1, Object paramObject2, Object paramObject3, Object paramObject4) { this(paramObject1, paramObject2, paramObject3, paramObject4, null, null, 0, 0); }
  
  public Zipper(Object paramObject1, Object paramObject2, Object paramObject3, Object paramObject4, Object paramObject5, Object paramObject6) { this(paramObject1, paramObject2, paramObject3, paramObject4, paramObject5, paramObject6, 0, 0); }
  
  public static IPersistentVector getBasis() { return Tuple.create(Symbol.intern(null, "prevs"), Symbol.intern(null, "nexts"), Symbol.intern(null, "up"), Symbol.intern(null, "m")); }
  
  public static Zipper create(IPersistentMap paramIPersistentMap) {
    Object object1 = paramIPersistentMap.valAt(Keyword.intern("prevs"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("prevs"));
    Object object2 = paramIPersistentMap.valAt(Keyword.intern("nexts"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("nexts"));
    Object object3 = paramIPersistentMap.valAt(Keyword.intern("up"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("up"));
    Object object4 = paramIPersistentMap.valAt(Keyword.intern("m"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("m"));
    return new Zipper(object1, object2, object3, object4, null, RT.seqOrElse(paramIPersistentMap), 0, 0);
  }
  
  public Object as_zipper() { return this; }
  
  public Object nth_prev(Object n) { n = null;
    this = null;
    return ((IFn)const__53.getRawRoot()).invoke(n, const__54.getRawRoot(), this); }
  
  public Object nth_next(Object n) { n = null;
    this = null;
    return ((IFn)const__53.getRawRoot()).invoke(n, const__49.getRawRoot(), this); }
  
  public Object prev_remove() {
    if (((IFn)const__20.getRawRoot()).invoke(this.prevs) != null) {
      if (((IFn)const__20.getRawRoot()).invoke(this.prevs) != Boolean.FALSE) {
        null;
      } else {
        throw (Throwable)new AssertionError(((IFn)const__25.getRawRoot()).invoke("Assert failed: ", ((IFn)const__42.getRawRoot()).invoke(const__52)));
      } 
    } else {
      ((IFn)const__20.getRawRoot()).invoke(this.prevs);
      throw (Throwable)new AssertionError(((IFn)const__25.getRawRoot()).invoke("Assert failed: ", ((IFn)const__42.getRawRoot()).invoke(const__52)));
    } 
    return new Zipper(((IFn)const__39.getRawRoot()).invoke(this.prevs), this.nexts, this.up, Boolean.TRUE);
  }
  
  public Object remove() {
    if (this.nexts != null) {
      if (this.nexts != Boolean.FALSE) {
        null;
      } else {
        throw (Throwable)new AssertionError(((IFn)const__25.getRawRoot()).invoke("Assert failed: ", ((IFn)const__42.getRawRoot()).invoke(const__51)));
      } 
    } else {
      this.nexts;
      throw (Throwable)new AssertionError(((IFn)const__25.getRawRoot()).invoke("Assert failed: ", ((IFn)const__42.getRawRoot()).invoke(const__51)));
    } 
    return new Zipper(this.prevs, ((IFn)const__36.getRawRoot()).invoke(this.nexts), this.up, Boolean.TRUE);
  }
  
  public Object insert_next_STAR_(Object nodes) {
    if (((IFn)const__20.getRawRoot()).invoke(this.prevs) != null) {
      if (((IFn)const__20.getRawRoot()).invoke(this.prevs) != Boolean.FALSE)
        nodes = null; 
    } else {
      ((IFn)const__20.getRawRoot()).invoke(this.prevs);
    } 
    nodes = null;
    return new Zipper(((IFn)const__50.getRawRoot()).invoke(nodes), this.nexts, this.up, Boolean.TRUE);
  }
  
  public Object insert_next(Object node) { node = null;
    return new Zipper(((IFn)const__34.getRawRoot()).invoke(this.prevs, node), this.nexts, this.up, Boolean.TRUE); }
  
  public Object insert_STAR_(Object nodes) { nodes = null;
    return new Zipper(this.prevs, ((IFn)const__20.getRawRoot()).invoke(((IFn)const__21.getRawRoot()).invoke(nodes, this.nexts)), this.up, Boolean.TRUE); }
  
  public Object insert(Object node) { node = null;
    return new Zipper(this.prevs, ((IFn)const__40.getRawRoot()).invoke(node, this.nexts), this.up, Boolean.TRUE); }
  
  public Object up_next() { // Byte code:
    //   0: aload_0
    //   1: getfield m : Ljava/lang/Object;
    //   4: dup
    //   5: ifnull -> 459
    //   8: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   11: if_acmpeq -> 460
    //   14: aload_0
    //   15: getfield up : Ljava/lang/Object;
    //   18: astore_1
    //   19: aload_1
    //   20: aconst_null
    //   21: invokestatic identical : (Ljava/lang/Object;Ljava/lang/Object;)Z
    //   24: ifeq -> 32
    //   27: aconst_null
    //   28: goto -> 456
    //   31: athrow
    //   32: aload_1
    //   33: aconst_null
    //   34: astore_1
    //   35: dup
    //   36: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   39: getstatic ginga/zip/Zipper.__cached_class__5 : Ljava/lang/Class;
    //   42: if_acmpeq -> 59
    //   45: dup
    //   46: instanceof ginga/zip/Edit
    //   49: ifne -> 262
    //   52: dup
    //   53: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   56: putstatic ginga/zip/Zipper.__cached_class__5 : Ljava/lang/Class;
    //   59: getstatic ginga/zip/Zipper.const__48 : Lclojure/lang/Var;
    //   62: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   65: swap
    //   66: aload_0
    //   67: getfield up : Ljava/lang/Object;
    //   70: dup
    //   71: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   74: getstatic ginga/zip/Zipper.__cached_class__3 : Ljava/lang/Class;
    //   77: if_acmpeq -> 94
    //   80: dup
    //   81: instanceof ginga/zip/Traverse
    //   84: ifne -> 109
    //   87: dup
    //   88: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   91: putstatic ginga/zip/Zipper.__cached_class__3 : Ljava/lang/Class;
    //   94: getstatic ginga/zip/Zipper.const__47 : Lclojure/lang/Var;
    //   97: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   100: swap
    //   101: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   106: goto -> 117
    //   109: checkcast ginga/zip/Traverse
    //   112: invokeinterface node : ()Ljava/lang/Object;
    //   117: dup
    //   118: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   121: getstatic ginga/zip/Zipper.__cached_class__4 : Ljava/lang/Class;
    //   124: if_acmpeq -> 141
    //   127: dup
    //   128: instanceof ginga/tree/Node
    //   131: ifne -> 200
    //   134: dup
    //   135: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   138: putstatic ginga/zip/Zipper.__cached_class__4 : Ljava/lang/Class;
    //   141: getstatic ginga/zip/Zipper.const__46 : Lclojure/lang/Var;
    //   144: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   147: swap
    //   148: aload_0
    //   149: getfield nexts : Ljava/lang/Object;
    //   152: dup
    //   153: ifnull -> 187
    //   156: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   159: if_acmpeq -> 188
    //   162: getstatic ginga/zip/Zipper.const__15 : Lclojure/lang/Var;
    //   165: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   168: checkcast clojure/lang/IFn
    //   171: aload_0
    //   172: getfield prevs : Ljava/lang/Object;
    //   175: aload_0
    //   176: getfield nexts : Ljava/lang/Object;
    //   179: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   184: goto -> 192
    //   187: pop
    //   188: aload_0
    //   189: getfield prevs : Ljava/lang/Object;
    //   192: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   197: goto -> 252
    //   200: checkcast ginga/tree/Node
    //   203: aload_0
    //   204: getfield nexts : Ljava/lang/Object;
    //   207: dup
    //   208: ifnull -> 242
    //   211: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   214: if_acmpeq -> 243
    //   217: getstatic ginga/zip/Zipper.const__15 : Lclojure/lang/Var;
    //   220: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   223: checkcast clojure/lang/IFn
    //   226: aload_0
    //   227: getfield prevs : Ljava/lang/Object;
    //   230: aload_0
    //   231: getfield nexts : Ljava/lang/Object;
    //   234: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   239: goto -> 247
    //   242: pop
    //   243: aload_0
    //   244: getfield prevs : Ljava/lang/Object;
    //   247: invokeinterface with_children : (Ljava/lang/Object;)Ljava/lang/Object;
    //   252: aconst_null
    //   253: astore_0
    //   254: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   259: goto -> 456
    //   262: checkcast ginga/zip/Edit
    //   265: aload_0
    //   266: getfield up : Ljava/lang/Object;
    //   269: dup
    //   270: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   273: getstatic ginga/zip/Zipper.__cached_class__3 : Ljava/lang/Class;
    //   276: if_acmpeq -> 293
    //   279: dup
    //   280: instanceof ginga/zip/Traverse
    //   283: ifne -> 308
    //   286: dup
    //   287: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   290: putstatic ginga/zip/Zipper.__cached_class__3 : Ljava/lang/Class;
    //   293: getstatic ginga/zip/Zipper.const__47 : Lclojure/lang/Var;
    //   296: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   299: swap
    //   300: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   305: goto -> 316
    //   308: checkcast ginga/zip/Traverse
    //   311: invokeinterface node : ()Ljava/lang/Object;
    //   316: dup
    //   317: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   320: getstatic ginga/zip/Zipper.__cached_class__4 : Ljava/lang/Class;
    //   323: if_acmpeq -> 340
    //   326: dup
    //   327: instanceof ginga/tree/Node
    //   330: ifne -> 399
    //   333: dup
    //   334: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   337: putstatic ginga/zip/Zipper.__cached_class__4 : Ljava/lang/Class;
    //   340: getstatic ginga/zip/Zipper.const__46 : Lclojure/lang/Var;
    //   343: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   346: swap
    //   347: aload_0
    //   348: getfield nexts : Ljava/lang/Object;
    //   351: dup
    //   352: ifnull -> 386
    //   355: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   358: if_acmpeq -> 387
    //   361: getstatic ginga/zip/Zipper.const__15 : Lclojure/lang/Var;
    //   364: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   367: checkcast clojure/lang/IFn
    //   370: aload_0
    //   371: getfield prevs : Ljava/lang/Object;
    //   374: aload_0
    //   375: getfield nexts : Ljava/lang/Object;
    //   378: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   383: goto -> 391
    //   386: pop
    //   387: aload_0
    //   388: getfield prevs : Ljava/lang/Object;
    //   391: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   396: goto -> 451
    //   399: checkcast ginga/tree/Node
    //   402: aload_0
    //   403: getfield nexts : Ljava/lang/Object;
    //   406: dup
    //   407: ifnull -> 441
    //   410: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   413: if_acmpeq -> 442
    //   416: getstatic ginga/zip/Zipper.const__15 : Lclojure/lang/Var;
    //   419: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   422: checkcast clojure/lang/IFn
    //   425: aload_0
    //   426: getfield prevs : Ljava/lang/Object;
    //   429: aload_0
    //   430: getfield nexts : Ljava/lang/Object;
    //   433: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   438: goto -> 446
    //   441: pop
    //   442: aload_0
    //   443: getfield prevs : Ljava/lang/Object;
    //   446: invokeinterface with_children : (Ljava/lang/Object;)Ljava/lang/Object;
    //   451: invokeinterface replace_next : (Ljava/lang/Object;)Ljava/lang/Object;
    //   456: goto -> 530
    //   459: pop
    //   460: aload_0
    //   461: getfield up : Ljava/lang/Object;
    //   464: astore_1
    //   465: aload_1
    //   466: aconst_null
    //   467: invokestatic identical : (Ljava/lang/Object;Ljava/lang/Object;)Z
    //   470: ifeq -> 478
    //   473: aconst_null
    //   474: goto -> 530
    //   477: athrow
    //   478: aload_1
    //   479: aconst_null
    //   480: astore_1
    //   481: dup
    //   482: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   485: getstatic ginga/zip/Zipper.__cached_class__6 : Ljava/lang/Class;
    //   488: if_acmpeq -> 505
    //   491: dup
    //   492: instanceof ginga/zip/Traverse
    //   495: ifne -> 522
    //   498: dup
    //   499: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   502: putstatic ginga/zip/Zipper.__cached_class__6 : Ljava/lang/Class;
    //   505: getstatic ginga/zip/Zipper.const__49 : Lclojure/lang/Var;
    //   508: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   511: swap
    //   512: aconst_null
    //   513: astore_0
    //   514: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   519: goto -> 530
    //   522: checkcast ginga/zip/Traverse
    //   525: invokeinterface next : ()Ljava/lang/Object;
    //   530: areturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #107	-> 0
    //   #147	-> 0
    //   #148	-> 19
    //   #148	-> 21
    //   #148	-> 32
    //   #148	-> 66
    //   #148	-> 66
    //   #148	-> 101
    //   #149	-> 148
    //   #150	-> 168
    //   #150	-> 179
    //   #148	-> 192
    //   #149	-> 203
    //   #150	-> 223
    //   #150	-> 234
    //   #148	-> 252
    //   #148	-> 265
    //   #148	-> 265
    //   #148	-> 300
    //   #149	-> 347
    //   #150	-> 367
    //   #150	-> 378
    //   #148	-> 391
    //   #149	-> 402
    //   #150	-> 422
    //   #150	-> 433
    //   #152	-> 465
    //   #152	-> 467
    //   #152	-> 478
    //   #152	-> 512
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   19	437	1	G__21092	Ljava/lang/Object;
    //   465	65	1	G__21093	Ljava/lang/Object;
    //   0	530	0	this	Lginga/zip/Zipper; }
  
  public Object up() { // Byte code:
    //   0: aload_0
    //   1: getfield up : Ljava/lang/Object;
    //   4: astore_1
    //   5: aload_0
    //   6: getfield m : Ljava/lang/Object;
    //   9: dup
    //   10: ifnull -> 463
    //   13: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   16: if_acmpeq -> 464
    //   19: aload_1
    //   20: aconst_null
    //   21: astore_1
    //   22: astore_2
    //   23: aload_2
    //   24: aconst_null
    //   25: invokestatic identical : (Ljava/lang/Object;Ljava/lang/Object;)Z
    //   28: ifeq -> 36
    //   31: aconst_null
    //   32: goto -> 460
    //   35: athrow
    //   36: aload_2
    //   37: aconst_null
    //   38: astore_2
    //   39: dup
    //   40: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   43: getstatic ginga/zip/Zipper.__cached_class__2 : Ljava/lang/Class;
    //   46: if_acmpeq -> 63
    //   49: dup
    //   50: instanceof ginga/zip/Edit
    //   53: ifne -> 266
    //   56: dup
    //   57: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   60: putstatic ginga/zip/Zipper.__cached_class__2 : Ljava/lang/Class;
    //   63: getstatic ginga/zip/Zipper.const__45 : Lclojure/lang/Var;
    //   66: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   69: swap
    //   70: aload_0
    //   71: getfield up : Ljava/lang/Object;
    //   74: dup
    //   75: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   78: getstatic ginga/zip/Zipper.__cached_class__0 : Ljava/lang/Class;
    //   81: if_acmpeq -> 98
    //   84: dup
    //   85: instanceof ginga/zip/Traverse
    //   88: ifne -> 113
    //   91: dup
    //   92: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   95: putstatic ginga/zip/Zipper.__cached_class__0 : Ljava/lang/Class;
    //   98: getstatic ginga/zip/Zipper.const__47 : Lclojure/lang/Var;
    //   101: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   104: swap
    //   105: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   110: goto -> 121
    //   113: checkcast ginga/zip/Traverse
    //   116: invokeinterface node : ()Ljava/lang/Object;
    //   121: dup
    //   122: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   125: getstatic ginga/zip/Zipper.__cached_class__1 : Ljava/lang/Class;
    //   128: if_acmpeq -> 145
    //   131: dup
    //   132: instanceof ginga/tree/Node
    //   135: ifne -> 204
    //   138: dup
    //   139: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   142: putstatic ginga/zip/Zipper.__cached_class__1 : Ljava/lang/Class;
    //   145: getstatic ginga/zip/Zipper.const__46 : Lclojure/lang/Var;
    //   148: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   151: swap
    //   152: aload_0
    //   153: getfield nexts : Ljava/lang/Object;
    //   156: dup
    //   157: ifnull -> 191
    //   160: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   163: if_acmpeq -> 192
    //   166: getstatic ginga/zip/Zipper.const__15 : Lclojure/lang/Var;
    //   169: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   172: checkcast clojure/lang/IFn
    //   175: aload_0
    //   176: getfield prevs : Ljava/lang/Object;
    //   179: aload_0
    //   180: getfield nexts : Ljava/lang/Object;
    //   183: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   188: goto -> 196
    //   191: pop
    //   192: aload_0
    //   193: getfield prevs : Ljava/lang/Object;
    //   196: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   201: goto -> 256
    //   204: checkcast ginga/tree/Node
    //   207: aload_0
    //   208: getfield nexts : Ljava/lang/Object;
    //   211: dup
    //   212: ifnull -> 246
    //   215: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   218: if_acmpeq -> 247
    //   221: getstatic ginga/zip/Zipper.const__15 : Lclojure/lang/Var;
    //   224: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   227: checkcast clojure/lang/IFn
    //   230: aload_0
    //   231: getfield prevs : Ljava/lang/Object;
    //   234: aload_0
    //   235: getfield nexts : Ljava/lang/Object;
    //   238: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   243: goto -> 251
    //   246: pop
    //   247: aload_0
    //   248: getfield prevs : Ljava/lang/Object;
    //   251: invokeinterface with_children : (Ljava/lang/Object;)Ljava/lang/Object;
    //   256: aconst_null
    //   257: astore_0
    //   258: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   263: goto -> 460
    //   266: checkcast ginga/zip/Edit
    //   269: aload_0
    //   270: getfield up : Ljava/lang/Object;
    //   273: dup
    //   274: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   277: getstatic ginga/zip/Zipper.__cached_class__0 : Ljava/lang/Class;
    //   280: if_acmpeq -> 297
    //   283: dup
    //   284: instanceof ginga/zip/Traverse
    //   287: ifne -> 312
    //   290: dup
    //   291: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   294: putstatic ginga/zip/Zipper.__cached_class__0 : Ljava/lang/Class;
    //   297: getstatic ginga/zip/Zipper.const__47 : Lclojure/lang/Var;
    //   300: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   303: swap
    //   304: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   309: goto -> 320
    //   312: checkcast ginga/zip/Traverse
    //   315: invokeinterface node : ()Ljava/lang/Object;
    //   320: dup
    //   321: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   324: getstatic ginga/zip/Zipper.__cached_class__1 : Ljava/lang/Class;
    //   327: if_acmpeq -> 344
    //   330: dup
    //   331: instanceof ginga/tree/Node
    //   334: ifne -> 403
    //   337: dup
    //   338: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   341: putstatic ginga/zip/Zipper.__cached_class__1 : Ljava/lang/Class;
    //   344: getstatic ginga/zip/Zipper.const__46 : Lclojure/lang/Var;
    //   347: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   350: swap
    //   351: aload_0
    //   352: getfield nexts : Ljava/lang/Object;
    //   355: dup
    //   356: ifnull -> 390
    //   359: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   362: if_acmpeq -> 391
    //   365: getstatic ginga/zip/Zipper.const__15 : Lclojure/lang/Var;
    //   368: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   371: checkcast clojure/lang/IFn
    //   374: aload_0
    //   375: getfield prevs : Ljava/lang/Object;
    //   378: aload_0
    //   379: getfield nexts : Ljava/lang/Object;
    //   382: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   387: goto -> 395
    //   390: pop
    //   391: aload_0
    //   392: getfield prevs : Ljava/lang/Object;
    //   395: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   400: goto -> 455
    //   403: checkcast ginga/tree/Node
    //   406: aload_0
    //   407: getfield nexts : Ljava/lang/Object;
    //   410: dup
    //   411: ifnull -> 445
    //   414: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   417: if_acmpeq -> 446
    //   420: getstatic ginga/zip/Zipper.const__15 : Lclojure/lang/Var;
    //   423: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   426: checkcast clojure/lang/IFn
    //   429: aload_0
    //   430: getfield prevs : Ljava/lang/Object;
    //   433: aload_0
    //   434: getfield nexts : Ljava/lang/Object;
    //   437: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   442: goto -> 450
    //   445: pop
    //   446: aload_0
    //   447: getfield prevs : Ljava/lang/Object;
    //   450: invokeinterface with_children : (Ljava/lang/Object;)Ljava/lang/Object;
    //   455: invokeinterface replace : (Ljava/lang/Object;)Ljava/lang/Object;
    //   460: goto -> 467
    //   463: pop
    //   464: aload_1
    //   465: aconst_null
    //   466: astore_1
    //   467: areturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #107	-> 0
    //   #142	-> 5
    //   #142	-> 23
    //   #142	-> 25
    //   #142	-> 36
    //   #142	-> 70
    //   #142	-> 70
    //   #142	-> 105
    //   #143	-> 152
    //   #144	-> 172
    //   #144	-> 183
    //   #142	-> 196
    //   #143	-> 207
    //   #144	-> 227
    //   #144	-> 238
    //   #142	-> 256
    //   #142	-> 269
    //   #142	-> 269
    //   #142	-> 304
    //   #143	-> 351
    //   #144	-> 371
    //   #144	-> 382
    //   #142	-> 395
    //   #143	-> 406
    //   #144	-> 426
    //   #144	-> 437
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   23	437	2	G__21091	Ljava/lang/Object;
    //   5	462	1	G__21090	Ljava/lang/Object;
    //   0	467	0	this	Lginga/zip/Zipper; }
  
  public Object replace_next(Object node) {
    if (this.nexts != null) {
      if (this.nexts != Boolean.FALSE) {
        null;
      } else {
        throw (Throwable)new AssertionError(((IFn)const__25.getRawRoot()).invoke("Assert failed: ", ((IFn)const__42.getRawRoot()).invoke(const__44)));
      } 
    } else {
      this.nexts;
      throw (Throwable)new AssertionError(((IFn)const__25.getRawRoot()).invoke("Assert failed: ", ((IFn)const__42.getRawRoot()).invoke(const__44)));
    } 
    node = null;
    return new Zipper(((IFn)const__34.getRawRoot()).invoke(this.prevs, node), ((IFn)const__36.getRawRoot()).invoke(this.nexts), this.up, Boolean.TRUE);
  }
  
  public Object replace(Object node) {
    if (this.nexts != null) {
      if (this.nexts != Boolean.FALSE) {
        null;
      } else {
        throw (Throwable)new AssertionError(((IFn)const__25.getRawRoot()).invoke("Assert failed: ", ((IFn)const__42.getRawRoot()).invoke(const__43)));
      } 
    } else {
      this.nexts;
      throw (Throwable)new AssertionError(((IFn)const__25.getRawRoot()).invoke("Assert failed: ", ((IFn)const__42.getRawRoot()).invoke(const__43)));
    } 
    node = null;
    return new Zipper(this.prevs, ((IFn)const__40.getRawRoot()).invoke(node, ((IFn)const__36.getRawRoot()).invoke(this.nexts)), this.up, Boolean.TRUE);
  }
  
  public Object prev_node() { this = null;
    return ((IFn)const__41.getRawRoot()).invoke(this.prevs); }
  
  public Object prev() {
    if (((IFn)const__20.getRawRoot()).invoke(this.prevs) != null) {
      if (((IFn)const__20.getRawRoot()).invoke(this.prevs) != Boolean.FALSE);
    } else {
      ((IFn)const__20.getRawRoot()).invoke(this.prevs);
    } 
    return null;
  }
  
  public Object traverse() { return new Traverser(this.nexts, this.up); }
  
  public Object end_QMARK_() { this = null;
    return Util.identical(this.nexts, null) ? Boolean.TRUE : Boolean.FALSE; }
  
  public Object top_QMARK_() { this = null;
    return Util.identical(this.up, null) ? Boolean.TRUE : Boolean.FALSE; }
  
  public Object node() { this = null;
    return ((IFn)const__35.getRawRoot()).invoke(this.nexts); }
  
  public Object end() {
    return new Zipper(((IFn)const__15.getRawRoot()).invoke(this.prevs, this.nexts), null, this.up, this.m);
  }
  
  public Object down() { this = null;
    return ((IFn)const__37.getRawRoot()).invoke(this, ((IFn)const__35.getRawRoot()).invoke(this.nexts)); }
  
  public Object discard() { return this.up; }
  
  public Object next() {
    if (this.nexts != null) {
      if (this.nexts != Boolean.FALSE);
    } else {
      this.nexts;
    } 
    return null;
  }
  
  public int hasheq() {
    int hq__7768__auto__21096 = this.__hasheq, h__7769__auto__21095 = RT.intCast(0x727D92D4L ^ APersistentMap.mapHasheq((IPersistentMap)this));
    this.__hasheq = h__7769__auto__21095;
    return (hq__7768__auto__21096 == 0L) ? h__7769__auto__21095 : hq__7768__auto__21096;
  }
  
  public int hashCode() {
    int hash__7771__auto__21098 = this.__hash, h__7772__auto__21097 = APersistentMap.mapHash((IPersistentMap)this);
    this.__hash = h__7772__auto__21097;
    return (hash__7771__auto__21098 == 0L) ? h__7772__auto__21097 : hash__7771__auto__21098;
  }
  
  public boolean equals(Object G__21076) { G__21076 = null;
    return APersistentMap.mapEquals((IPersistentMap)this, G__21076); }
  
  public IPersistentMap meta() { return (IPersistentMap)this.__meta; }
  
  public IObj withMeta(IPersistentMap G__21076) { G__21076 = null;
    return (IObj)new Zipper(this.prevs, this.nexts, this.up, this.m, G__21076, this.__extmap, this.__hash, this.__hasheq); }
  
  public Object valAt(Object k__7777__auto__) { k__7777__auto__ = null;
    return ((ILookup)this).valAt(k__7777__auto__, null); }
  
  public Object valAt(Object k__7779__auto__, Object else__7780__auto__) {
    Object G__21089 = k__7779__auto__;
    switch (Util.hash(G__21089) >> 2 & 0x7) {
      case 2:
        if (G__21089 == const__9);
        break;
      case 4:
        if (G__21089 == const__8);
        break;
      case 6:
        if (G__21089 == const__11);
        break;
      case 7:
        if (G__21089 == const__10);
        break;
    } 
    k__7779__auto__ = null;
    else__7780__auto__ = null;
    this = null;
    return RT.get(this.__extmap, k__7779__auto__, else__7780__auto__);
  }
  
  public ILookupThunk getLookupThunk(Keyword k__7782__auto__) {
    Object gclass = ((IFn)const__23.getRawRoot()).invoke(this), G__21080 = k__7782__auto__ = null;
    switch (Util.hash(G__21080) >> 2 & 0x7) {
      case 2:
        if (G__21080 == const__9)
          gclass = null; 
        break;
      case 4:
        if (G__21080 == const__8)
          gclass = null; 
        break;
      case 6:
        if (G__21080 == const__11)
          gclass = null; 
        break;
      case 7:
        if (G__21080 == const__10)
          gclass = null; 
        break;
    } 
    return (ILookupThunk)null;
  }
  
  public int count() { return RT.intCast(Numbers.add(4L, RT.count(this.__extmap))); }
  
  public IPersistentCollection empty() { throw (Throwable)new UnsupportedOperationException((String)((IFn)const__25.getRawRoot()).invoke("Can't create empty: ", "ginga.zip.Zipper")); }
  
  public IPersistentCollection cons(Object e__7786__auto__) { e__7786__auto__ = null;
    this = null;
    return (IPersistentCollection)((IFn)const__24).invoke(this, e__7786__auto__); }
  
  public boolean equiv(Object G__21076) {
    boolean or__5516__auto__21103 = Util.identical(this, G__21076);
    Object G__21076 = G__21076 = null;
    boolean and__5514__auto__21102 = Util.equiv(this.prevs, ((Zipper)G__21076).prevs), and__5514__auto__21101 = Util.equiv(this.nexts, ((Zipper)G__21076).nexts), and__5514__auto__21100 = Util.equiv(this.up, ((Zipper)G__21076).up), and__5514__auto__21099 = Util.equiv(this.m, ((Zipper)G__21076).m);
    G__21076 = null;
    return RT.booleanCast(or__5516__auto__21103 ? (or__5516__auto__21103 ? Boolean.TRUE : Boolean.FALSE) : (Util.identical(((IFn)const__23.getRawRoot()).invoke(this), ((IFn)const__23.getRawRoot()).invoke(G__21076)) ? (and__5514__auto__21102 ? (and__5514__auto__21101 ? (and__5514__auto__21100 ? (and__5514__auto__21099 ? (Util.equiv(this.__extmap, ((Zipper)G__21076).__extmap) ? Boolean.TRUE : Boolean.FALSE) : (and__5514__auto__21099 ? Boolean.TRUE : Boolean.FALSE)) : (and__5514__auto__21100 ? Boolean.TRUE : Boolean.FALSE)) : (and__5514__auto__21101 ? Boolean.TRUE : Boolean.FALSE)) : (and__5514__auto__21102 ? Boolean.TRUE : Boolean.FALSE)) : null));
  }
  
  public boolean containsKey(Object k__7789__auto__) { k__7789__auto__ = null;
    this = null;
    return ((Boolean)((IFn)const__22.getRawRoot()).invoke(Util.identical(this, ((ILookup)this).valAt(k__7789__auto__, this)) ? Boolean.TRUE : Boolean.FALSE)).booleanValue(); }
  
  public IMapEntry entryAt(Object k__7791__auto__) {
    Object v__7792__auto__21104 = ((ILookup)this).valAt(k__7791__auto__, this);
    k__7791__auto__ = null;
    v__7792__auto__21104 = null;
    this = null;
    return (IMapEntry)(Util.identical(this, v__7792__auto__21104) ? null : MapEntry.create(k__7791__auto__, v__7792__auto__21104));
  }
  
  public ISeq seq() { this = null;
    return (ISeq)((IFn)const__20.getRawRoot()).invoke(((IFn)const__21.getRawRoot()).invoke(Tuple.create(MapEntry.create(const__11, this.prevs), MapEntry.create(const__9, this.nexts), MapEntry.create(const__10, this.up), MapEntry.create(const__8, this.m)), this.__extmap)); }
  
  public Iterator iterator() { return (Iterator)new RecordIterator((ILookup)this, (IPersistentVector)const__19, (Iterator)RT.iter(this.__extmap)); }
  
  public IPersistentMap assoc(Object k__7796__auto__, Object G__21076) {
    Object pred__21078 = const__17.getRawRoot(), expr__21079 = k__7796__auto__;
    if (((IFn)pred__21078).invoke(const__11, expr__21079) != null) {
      if (((IFn)pred__21078).invoke(const__11, expr__21079) != Boolean.FALSE)
        G__21076 = null; 
    } else {
      ((IFn)pred__21078).invoke(const__11, expr__21079);
    } 
    if (((IFn)pred__21078).invoke(const__9, expr__21079) != null) {
      if (((IFn)pred__21078).invoke(const__9, expr__21079) != Boolean.FALSE)
        G__21076 = null; 
    } else {
      ((IFn)pred__21078).invoke(const__9, expr__21079);
    } 
    if (((IFn)pred__21078).invoke(const__10, expr__21079) != null) {
      if (((IFn)pred__21078).invoke(const__10, expr__21079) != Boolean.FALSE)
        G__21076 = null; 
    } else {
      ((IFn)pred__21078).invoke(const__10, expr__21079);
    } 
    pred__21078 = null;
    expr__21079 = null;
    if (((IFn)pred__21078).invoke(const__8, expr__21079) != null) {
      if (((IFn)pred__21078).invoke(const__8, expr__21079) != Boolean.FALSE)
        G__21076 = null; 
    } else {
      ((IFn)pred__21078).invoke(const__8, expr__21079);
    } 
    k__7796__auto__ = null;
    G__21076 = null;
    return (IPersistentMap)new Zipper(this.prevs, this.nexts, this.up, this.m, this.__meta, ((IFn)const__18.getRawRoot()).invoke(this.__extmap, k__7796__auto__, G__21076));
  }
  
  public IPersistentMap without(Object k__7798__auto__) { if (((IFn)const__7.getRawRoot()).invoke(const__12, k__7798__auto__) != null) {
      if (((IFn)const__7.getRawRoot()).invoke(const__12, k__7798__auto__) != Boolean.FALSE) {
        k__7798__auto__ = null;
        this = null;
      } 
    } else {
      ((IFn)const__7.getRawRoot()).invoke(const__12, k__7798__auto__);
    } 
    k__7798__auto__ = null;
    return (IPersistentMap)new Zipper(this.prevs, this.nexts, this.up, this.m, this.__meta, ((IFn)const__16.getRawRoot()).invoke(((IFn)const__13.getRawRoot()).invoke(this.__extmap, k__7798__auto__))); }
  
  public int size() { this = null;
    return ((Counted)this).count(); }
  
  public boolean isEmpty() { return Util.equiv(0L, ((Counted)this).count()); }
  
  public boolean containsValue(Object v__7802__auto__) { v__7802__auto__ = null;
    return RT.booleanCast(((IFn)const__4.getRawRoot()).invoke(RT.set(new Object[] { v__7802__auto__ }, ), ((IFn)const__1.getRawRoot()).invoke(this))); }
  
  public Object get(Object k__7804__auto__) { k__7804__auto__ = null;
    return ((ILookup)this).valAt(k__7804__auto__); }
  
  public Object put(Object k__7806__auto__, Object v__7807__auto__) { throw (Throwable)new UnsupportedOperationException(); }
  
  public Object remove(Object k__7809__auto__) { throw (Throwable)new UnsupportedOperationException(); }
  
  public void putAll(Map m__7811__auto__) { throw (Throwable)new UnsupportedOperationException(); }
  
  public void clear() { throw (Throwable)new UnsupportedOperationException(); }
  
  public Set keySet() { this = null;
    return (Set)((IFn)const__0.getRawRoot()).invoke(((IFn)const__2.getRawRoot()).invoke(this)); }
  
  public Collection values() { this = null;
    return (Collection)((IFn)const__1.getRawRoot()).invoke(this); }
  
  public Set entrySet() { this = null;
    return (Set)((IFn)const__0.getRawRoot()).invoke(this); }
}
