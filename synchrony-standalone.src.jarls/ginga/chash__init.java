package ginga;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class chash__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__9;
  
  public static final Var const__10;
  
  public static final Var const__11;
  
  public static final AFn const__15;
  
  public static final Var const__16;
  
  public static final AFn const__19;
  
  public static final Var const__20;
  
  public static final AFn const__23;
  
  public static final Var const__24;
  
  public static final AFn const__27;
  
  public static final Var const__28;
  
  public static final AFn const__31;
  
  public static final Var const__32;
  
  public static final AFn const__35;
  
  public static final Var const__36;
  
  public static final AFn const__39;
  
  public static void load() { LockingTransaction.runInTransaction((Callable)new chash.fn__14582());
    const__3.setMeta((IPersistentMap)const__9);
    const__3.bindRoot(const__10.getRawRoot());
    const__11.setMeta((IPersistentMap)const__15);
    const__11.bindRoot(new chash.b64_hash());
    const__16.setMeta((IPersistentMap)const__19);
    const__16.bindRoot(new chash.replication_keys());
    const__20.setMeta((IPersistentMap)const__23);
    const__20.bindRoot(new chash.find_replica());
    const__24.setMeta((IPersistentMap)const__27);
    const__24.bindRoot(new chash.replica_ring());
    const__28.setMeta((IPersistentMap)const__31);
    const__28.bindRoot(new chash.add_node());
    const__32.setMeta((IPersistentMap)const__35);
    const__32.bindRoot(new chash.remove_node());
    const__36.setMeta((IPersistentMap)const__39);
    const__36.bindRoot(new chash.get_node()); }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "ginga.chash");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("ginga.chash", "ring");
    const__9 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(7), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/chash.clj" });
    const__10 = (Var)RT.var("clojure.core", "sorted-map");
    const__11 = (Var)RT.var("ginga.chash", "b64-hash");
    const__15 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "key")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") }))) })), RT.keyword(null, "line"), Integer.valueOf(9), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/chash.clj" });
    const__16 = (Var)RT.var("ginga.chash", "replication-keys");
    const__19 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "n"), ((IObj)Symbol.intern(null, "key")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") }))) })), RT.keyword(null, "line"), Integer.valueOf(17), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/chash.clj" });
    const__20 = (Var)RT.var("ginga.chash", "find-replica");
    const__23 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ring"), Symbol.intern(null, "hash")) })), RT.keyword(null, "line"), Integer.valueOf(21), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/chash.clj" });
    const__24 = (Var)RT.var("ginga.chash", "replica-ring");
    const__27 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "replication-factor")) })), RT.keyword(null, "line"), Integer.valueOf(25), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/chash.clj" });
    const__28 = (Var)RT.var("ginga.chash", "add-node");
    const__31 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "rring"), Symbol.intern(null, "key"), Symbol.intern(null, "node")) })), RT.keyword(null, "line"), Integer.valueOf(29), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/chash.clj" });
    const__32 = (Var)RT.var("ginga.chash", "remove-node");
    const__35 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "rring"), Symbol.intern(null, "key")) })), RT.keyword(null, "line"), Integer.valueOf(33), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/chash.clj" });
    const__36 = (Var)RT.var("ginga.chash", "get-node");
    const__39 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "rring"), Symbol.intern(null, "topic")) })), RT.keyword(null, "line"), Integer.valueOf(36), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/chash.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("ginga.chash__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
