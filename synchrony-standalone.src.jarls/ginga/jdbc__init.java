package ginga;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IPersistentMap;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentArrayMap;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class jdbc__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__11;
  
  public static final Keyword const__12;
  
  public static final Keyword const__13;
  
  public static final AFn const__15;
  
  public static final Var const__16;
  
  public static final AFn const__18;
  
  public static final Var const__19;
  
  public static final Var const__20;
  
  public static final AFn const__25;
  
  public static final Var const__26;
  
  public static final AFn const__29;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new jdbc.fn__20280());
    const__3.setMeta((IPersistentMap)const__11);
    const__3.bindRoot(RT.mapUniqueKeys(new Object[] { 
            "h2:mem", RT.mapUniqueKeys(new Object[] { const__12, "org.h2.Driver", const__13, PersistentArrayMap.EMPTY }), "mysql", RT.mapUniqueKeys(new Object[] { const__12, "com.mysql.jdbc.Driver", const__13, PersistentArrayMap.EMPTY }), "oracle:thin", RT.mapUniqueKeys(new Object[] { const__12, "oracle.jdbc.OracleDriver", const__13, PersistentArrayMap.EMPTY }), "postgresql", RT.mapUniqueKeys(new Object[] { const__12, "org.postgresql.Driver", const__13, PersistentArrayMap.EMPTY }), "sqlite", RT.mapUniqueKeys(new Object[] { const__12, "org.sqlite.JDBC", const__13, PersistentArrayMap.EMPTY }), 
            "mariadb", RT.mapUniqueKeys(new Object[] { const__12, "org.mariadb.jdbc.Driver", const__13, PersistentArrayMap.EMPTY }), "jtds:sqlserver", const__15, "h2:tcp", RT.mapUniqueKeys(new Object[] { const__12, "org.h2.Driver", const__13, PersistentArrayMap.EMPTY }), "derby", RT.mapUniqueKeys(new Object[] { const__12, "org.apache.derby.jdbc.EmbeddedDriver", const__13, PersistentArrayMap.EMPTY }), "sqlserver", RT.mapUniqueKeys(new Object[] { const__12, "com.microsoft.sqlserver.jdbc.SQLServerDriver", const__13, PersistentArrayMap.EMPTY }), 
            "hsqldb:mem", RT.mapUniqueKeys(new Object[] { const__12, "org.hsqldb.jdbcDriver", const__13, PersistentArrayMap.EMPTY }) }));
    const__16.setMeta((IPersistentMap)const__18);
    const__16


















      
      .bindRoot(((IFn)const__19.getRawRoot()).invoke("\n    <jdbc> = <'jdbc:'> protocol <':'> subname\n    protocol = 'hsqldb:mem' | 'h2:mem' | 'h2:tcp' | 'postgresql' | 'mysql' | 'mariadb' | 'oracle:thin' | 'oracle:oci' | 'jtds:sqlserver' | 'sqlserver'\n    subname = #'.*$' Epsilon\n    "));
    const__20.setMeta((IPersistentMap)const__25);
    const__20.bindRoot(new jdbc.transform_to_map());
    const__26.setMeta((IPersistentMap)const__29);
    const__26.bindRoot(new jdbc.parse_uri());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "ginga.jdbc");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("ginga.jdbc", "classnames");
    const__11 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "doc"), "Map of classnames to subprotocols, and any custom connection properties", RT.keyword(null, "line"), Integer.valueOf(7), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/jdbc.clj" });
    const__12 = (Keyword)RT.keyword(null, "driver");
    const__13 = (Keyword)RT.keyword(null, "properties");
    const__15 = (AFn)RT.map(new Object[] { RT.keyword(null, "driver"), "net.sourceforge.jtds.jdbc.Driver", RT.keyword(null, "properties"), RT.map(new Object[] { "prop.uselobs", "false", "uselobs", "false" }) });
    const__16 = (Var)RT.var("ginga.jdbc", "parse-jdbc-uri");
    const__18 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(20), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/jdbc.clj" });
    const__19 = (Var)RT.var("instaparse.core", "parser");
    const__20 = (Var)RT.var("ginga.jdbc", "transform-to-map");
    const__25 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "parsed")) })), RT.keyword(null, "line"), Integer.valueOf(27), RT.keyword(null, "column"), Integer.valueOf(2), RT.keyword(null, "file"), "ginga/jdbc.clj" });
    const__26 = (Var)RT.var("ginga.jdbc", "parse-uri");
    const__29 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "uri")) })), RT.keyword(null, "line"), Integer.valueOf(39), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/jdbc.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("ginga.jdbc__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
