package ginga;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class stack__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__9;
  
  public static final Var const__10;
  
  public static final AFn const__12;
  
  public static final Var const__13;
  
  public static final Var const__14;
  
  public static final AFn const__16;
  
  public static final Var const__17;
  
  public static final Var const__18;
  
  public static final AFn const__20;
  
  public static final Var const__21;
  
  public static final Var const__22;
  
  public static final AFn const__24;
  
  public static final Var const__25;
  
  public static final Var const__26;
  
  public static final AFn const__28;
  
  public static final Var const__29;
  
  public static final Var const__30;
  
  public static final AFn const__34;
  
  public static final Var const__35;
  
  public static final AFn const__38;
  
  public static final Var const__39;
  
  public static final AFn const__42;
  
  public static final Var const__43;
  
  public static final AFn const__46;
  
  public static final Var const__47;
  
  public static final AFn const__49;
  
  public static final Var const__50;
  
  public static final Var const__51;
  
  public static final AFn const__53;
  
  public static final Var const__54;
  
  public static void load() { LockingTransaction.runInTransaction((Callable)new stack.fn__20602());
    const__3.setMeta((IPersistentMap)const__9);
    const__3.bindRoot(null);
    const__10.setMeta((IPersistentMap)const__12);
    const__10.bindRoot(const__13.getRawRoot());
    const__14.setMeta((IPersistentMap)const__16);
    const__14.bindRoot(const__17.getRawRoot());
    const__18.setMeta((IPersistentMap)const__20);
    const__18.bindRoot(const__21.getRawRoot());
    const__22.setMeta((IPersistentMap)const__24);
    const__22.bindRoot(const__25.getRawRoot());
    const__26.setMeta((IPersistentMap)const__28);
    const__26.bindRoot(const__29.getRawRoot());
    const__30.setMeta((IPersistentMap)const__34);
    const__30.bindRoot(new stack.concat());
    const__35.setMeta((IPersistentMap)const__38);
    const__35.bindRoot(new stack.push());
    const__39.setMeta((IPersistentMap)const__42);
    const__39.bindRoot(new stack.replace());
    const__43.setMeta((IPersistentMap)const__46);
    const__43.bindRoot(new stack.edit());
    const__47.setMeta((IPersistentMap)const__49);
    const__47.bindRoot(const__50.getRawRoot());
    const__51.setMeta((IPersistentMap)const__53);
    const__51.bindRoot(const__54.getRawRoot()); }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "ginga.stack");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("ginga.stack", "empty");
    const__9 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(5), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/stack.cljc" });
    const__10 = (Var)RT.var("ginga.stack", "cast");
    const__12 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(6), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/stack.cljc" });
    const__13 = (Var)RT.var("clojure.core", "seq");
    const__14 = (Var)RT.var("ginga.stack", "pop");
    const__16 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(7), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/stack.cljc" });
    const__17 = (Var)RT.var("clojure.core", "next");
    const__18 = (Var)RT.var("ginga.stack", "peek");
    const__20 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(8), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/stack.cljc" });
    const__21 = (Var)RT.var("clojure.core", "first");
    const__22 = (Var)RT.var("ginga.stack", "into");
    const__24 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(9), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/stack.cljc" });
    const__25 = (Var)RT.var("clojure.core", "into");
    const__26 = (Var)RT.var("ginga.stack", "of");
    const__28 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(10), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/stack.cljc" });
    const__29 = (Var)RT.var("clojure.core", "list");
    const__30 = (Var)RT.var("ginga.stack", "concat");
    const__34 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "a"), Symbol.intern(null, "b")) })), RT.keyword(null, "line"), Integer.valueOf(11), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/stack.cljc" });
    const__35 = (Var)RT.var("ginga.stack", "push");
    const__38 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s"), Symbol.intern(null, "frame")) })), RT.keyword(null, "line"), Integer.valueOf(12), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/stack.cljc" });
    const__39 = (Var)RT.var("ginga.stack", "replace");
    const__42 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s"), Symbol.intern(null, "frame")) })), RT.keyword(null, "line"), Integer.valueOf(13), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/stack.cljc" });
    const__43 = (Var)RT.var("ginga.stack", "edit");
    const__46 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "stack")) })), RT.keyword(null, "line"), Integer.valueOf(14), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/stack.cljc" });
    const__47 = (Var)RT.var("ginga.stack", "empty?");
    const__49 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(16), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/stack.cljc" });
    const__50 = (Var)RT.var("clojure.core", "not");
    const__51 = (Var)RT.var("ginga.stack", "not-empty?");
    const__53 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(17), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/stack.cljc" });
    const__54 = (Var)RT.var("clojure.core", "identity");
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("ginga.stack__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
