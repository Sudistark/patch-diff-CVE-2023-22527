package ginga;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class async__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final Object const__4;
  
  public static final Var const__5;
  
  public static final Keyword const__6;
  
  public static final Var const__7;
  
  public static final AFn const__16;
  
  public static final Var const__17;
  
  public static final AFn const__20;
  
  public static final Var const__21;
  
  public static final AFn const__24;
  
  public static final Var const__25;
  
  public static final AFn const__27;
  
  public static final Var const__28;
  
  public static final Var const__29;
  
  public static final AFn const__32;
  
  public static final Var const__33;
  
  public static final AFn const__36;
  
  public static final Var const__37;
  
  public static final AFn const__40;
  
  public static final Var const__41;
  
  public static final AFn const__44;
  
  public static final Var const__45;
  
  public static final AFn const__48;
  
  public static final Var const__49;
  
  public static final AFn const__52;
  
  public static final Var const__53;
  
  public static final AFn const__56;
  
  public static final Var const__57;
  
  public static final AFn const__60;
  
  public static final Var const__61;
  
  public static final AFn const__64;
  
  public static final Var const__65;
  
  public static final AFn const__68;
  
  public static final Var const__69;
  
  public static final AFn const__72;
  
  public static final Var const__73;
  
  public static final AFn const__76;
  
  public static final Var const__77;
  
  public static final AFn const__80;
  
  public static final Var const__81;
  
  public static final AFn const__85;
  
  public static final Var const__86;
  
  public static final AFn const__89;
  
  public static final Var const__90;
  
  public static final AFn const__93;
  
  public static final Var const__94;
  
  public static final AFn const__97;
  
  public static final Var const__98;
  
  public static final AFn const__101;
  
  public static final Var const__102;
  
  public static final AFn const__106;
  
  public static final Var const__107;
  
  public static final AFn const__110;
  
  public static final Var const__111;
  
  public static final AFn const__114;
  
  public static final Var const__115;
  
  public static final AFn const__118;
  
  public static final Var const__119;
  
  public static final AFn const__122;
  
  public static final Var const__123;
  
  public static final AFn const__126;
  
  public static final Var const__127;
  
  public static final AFn const__130;
  
  public static final Var const__131;
  
  public static final AFn const__134;
  
  public static final Var const__135;
  
  public static final AFn const__138;
  
  public static final Var const__139;
  
  public static final AFn const__142;
  
  public static final Var const__143;
  
  public static final AFn const__146;
  
  public static final Var const__147;
  
  public static final AFn const__150;
  
  public static final Var const__151;
  
  public static final AFn const__154;
  
  public static final Var const__155;
  
  public static final AFn const__158;
  
  public static final Var const__159;
  
  public static final AFn const__162;
  
  public static final Var const__163;
  
  public static final AFn const__166;
  
  public static final Var const__167;
  
  public static final AFn const__170;
  
  public static final Var const__171;
  
  public static final AFn const__174;
  
  public static final Var const__175;
  
  public static final AFn const__178;
  
  public static final Var const__179;
  
  public static final AFn const__182;
  
  public static final Var const__183;
  
  public static final AFn const__186;
  
  public static final Var const__187;
  
  public static final AFn const__190;
  
  public static final Var const__191;
  
  public static final AFn const__194;
  
  public static final Var const__195;
  
  public static final AFn const__198;
  
  public static final Var const__199;
  
  public static final AFn const__202;
  
  public static final Var const__203;
  
  public static final AFn const__206;
  
  public static final Var const__207;
  
  public static final AFn const__210;
  
  public static final Var const__211;
  
  public static final AFn const__214;
  
  public static final Var const__215;
  
  public static final AFn const__218;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new async.fn__8699());
    const__7.setMeta((IPersistentMap)const__16);
    const__7.bindRoot(new async.go());
    ((Var)const__7)


      
      .setMacro();
    const__17.setMeta((IPersistentMap)const__20);
    const__17.bindRoot(new async.go_catchall());
    ((Var)const__17)





      
      .setMacro();
    const__21.setMeta((IPersistentMap)const__24);
    const__21.bindRoot(new async.go_catchall_logging());
    ((Var)const__21)



      
      .setMacro();
    const__25.setMeta((IPersistentMap)const__27);
    const__25.bindRoot(const__28.getRawRoot());
    const__29.setMeta((IPersistentMap)const__32);
    const__29.bindRoot(new async.make_promise());
    const__33.setMeta((IPersistentMap)const__36);
    const__33.bindRoot(new async.to_promise());
    const__37.setMeta((IPersistentMap)const__40);
    const__37.bindRoot(new async.go_promise());
    ((Var)const__37)



























      
      .setMacro();
    const__41.setMeta((IPersistentMap)const__44);
    const__41.bindRoot(new async.defn());
    ((Var)const__41)



      
      .setMacro();
    const__45.setMeta((IPersistentMap)const__48);
    const__45.bindRoot(new async.afn());
    ((Var)const__45)



      
      .setMacro();
    const__49.setMeta((IPersistentMap)const__52);
    const__49.bindRoot(new async.ignorable_async_ste_QMARK_());
    const__53.setMeta((IPersistentMap)const__56);
    const__53.bindRoot(new async.ignorable_async_ste_after_async_call_QMARK_());
    const__57.setMeta((IPersistentMap)const__60);
    const__57.bindRoot(new async.ste_as_map());
    const__61.setMeta((IPersistentMap)const__64);
    const__61.bindRoot(new async.collapse_state_machine_stes());
    const__65.setMeta((IPersistentMap)const__68);
    const__65.bindRoot(new async.chain_async_stacktrace());
    const__69.setMeta((IPersistentMap)const__72);
    const__69.bindRoot(new async.source_file());
    const__73.setMeta((IPersistentMap)const__76);
    const__73.bindRoot(new async._LT__QMARK_());
    ((Var)const__73)


































































      
      .setMacro();
    const__77.setMeta((IPersistentMap)const__80);
    const__77.bindRoot(new async._LT__QMARK__BANG_());
    ((Var)const__77)











      
      .setMacro();
    const__81.setMeta((IPersistentMap)const__85);
    const__81.bindRoot(new async.modify_alt_clauses());
    const__86.setMeta((IPersistentMap)const__89);
    const__86.bindRoot(new async.alt_QMARK_());
    ((Var)const__86)





















      
      .setMacro();
    const__90.setMeta((IPersistentMap)const__93);
    const__90.bindRoot(new async.cond_alt_BANG_());
    ((Var)const__90)










      
      .setMacro();
    const__94.setMeta((IPersistentMap)const__97);
    const__94.bindRoot(new async.fan_out());
    const__98.setMeta((IPersistentMap)const__101);
    const__98.bindRoot(new async.dochan());
    ((Var)const__98)
























































      
      .setMacro();
    const__102.setMeta((IPersistentMap)const__106);
    const__102.bindRoot(new async.process());
    const__107.setMeta((IPersistentMap)const__110);
    const__107.bindRoot(new async.process_async());
    const__111.setMeta((IPersistentMap)const__114);
    const__111.bindRoot(new async.put_wait_on_chan_BANG_());
    const__115.setMeta((IPersistentMap)const__118);
    const__115.bindRoot(new async.coerce_timeout());
    const__119.setMeta((IPersistentMap)const__122);
    const__119.bindRoot(new async.try_take_BANG_());
    const__123.setMeta((IPersistentMap)const__126);
    const__123.bindRoot(new async.try_put_BANG_());
    const__127.setMeta((IPersistentMap)const__130);
    const__127.bindRoot(new async.expect_BANG_());
    const__131.setMeta((IPersistentMap)const__134);
    const__131.bindRoot(new async.convey_BANG_());
    const__135.setMeta((IPersistentMap)const__138);
    const__135.bindRoot(new async.request_BANG_());
    const__139.setMeta((IPersistentMap)const__142);
    const__139.bindRoot(new async.offer_BANG_());
    ((Var)const__139)















































































































      
      .setMacro();
    const__143.setMeta((IPersistentMap)const__146);
    const__143.bindRoot(new async.retry_BANG_());
    const__147.setMeta((IPersistentMap)const__150);
    const__147.bindRoot(new async.timeout_loop());
    const__151.setMeta((IPersistentMap)const__154);
    const__151.bindRoot(new async.reduce());
    const__155.setMeta((IPersistentMap)const__158);
    const__155.bindRoot(new async.runchan());
    const__159.setMeta((IPersistentMap)const__162);
    const__159.bindRoot(new async.reduce_af());
    const__163.setMeta((IPersistentMap)const__166);
    const__163.bindRoot(new async.some_iteration());
    const__167.setMeta((IPersistentMap)const__170);
    const__167.bindRoot(new async.take_until());
    const__171.setMeta((IPersistentMap)const__174);
    const__171.bindRoot(new async.generate());
    const__175.setMeta((IPersistentMap)const__178);
    const__175.bindRoot(new async.ref_wait());
    const__179.setMeta((IPersistentMap)const__182);
    const__179.bindRoot(new async.ref_next());
    const__183.setMeta((IPersistentMap)const__186);
    const__183.bindRoot(new async.ref_subscribe());
    const__187.setMeta((IPersistentMap)const__190);
    const__187.bindRoot(new async.wrap());
    const__191.setMeta((IPersistentMap)const__194);
    const__191.bindRoot(new async.pipeline1());
    const__195.setMeta((IPersistentMap)const__198);
    const__195.bindRoot(new async.pipeline_into());
    const__199.setMeta((IPersistentMap)const__202);
    const__199.bindRoot(new async.compose());
    const__203.setMeta((IPersistentMap)const__206);
    const__203.bindRoot(new async.throttle());
    const__207.setMeta((IPersistentMap)const__210);
    const__207.bindRoot(new async.parallelize());
    const__211.setMeta((IPersistentMap)const__214);
    const__211.bindRoot(new async.all());
    const__215.setMeta((IPersistentMap)const__218);
    const__215.bindRoot(new async.make_connections());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "ginga.async");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("clojure.core", "extend");
    const__4 = RT.classForName("clojure.core.async.impl.channels.ManyToManyChannel");
    const__5 = (Var)RT.var("ginga.core", "Closable");
    const__6 = (Keyword)RT.keyword(null, "close");
    const__7 = (Var)RT.var("ginga.async", "go");
    const__16 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "doc"), "Like async/go, but works for both clj and cljs.", RT.keyword(null, "line"), Integer.valueOf(20), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async.cljc" });
    const__17 = (Var)RT.var("ginga.async", "go-catchall");
    const__20 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "doc"), "Sugar for (go (catchall ...))", RT.keyword(null, "line"), Integer.valueOf(27), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async.cljc" });
    const__21 = (Var)RT.var("ginga.async", "go-catchall-logging");
    const__24 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "doc"), "Like go-catchall, but logs errors.", RT.keyword(null, "line"), Integer.valueOf(32), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async.cljc" });
    const__25 = (Var)RT.var("ginga.async", "promise-chan");
    const__27 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(38), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async.cljc" });
    const__28 = (Var)RT.var("clojure.core.async", "promise-chan");
    const__29 = (Var)RT.var("ginga.async", "make-promise");
    const__32 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "value")) })), RT.keyword(null, "doc"), "Wraps a value in a promise-chan. Returns a closed promise-chan if the\n  given value is nil.", RT.keyword(null, "line"), Integer.valueOf(40), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async.cljc" });
    const__33 = (Var)RT.var("ginga.async", "to-promise");
    const__36 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ch")) })), RT.keyword(null, "doc"), "Does one take on the given channel and puts the result on a new\n  promise-chan. Closes the promise-chan if the given channel is closed.", RT.keyword(null, "line"), Integer.valueOf(50), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async.cljc" });
    const__37 = (Var)RT.var("ginga.async", "go-promise");
    const__40 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "doc"), "Like core.async/go but returns a promise-chan.", RT.keyword(null, "line"), Integer.valueOf(61), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async.cljc" });
    const__41 = (Var)RT.var("ginga.async", "defn");
    const__44 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "name"), Symbol.intern(null, "args"), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "doc"), "Shortcut for (defn [...] (go-catchall ...))", RT.keyword(null, "line"), Integer.valueOf(66), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async.cljc" });
    const__45 = (Var)RT.var("ginga.async", "afn");
    const__48 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "name"), Symbol.intern(null, "args"), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "doc"), "Shortcut for (fn [...] (go-catchall ...))", RT.keyword(null, "line"), Integer.valueOf(71), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async.cljc" });
    const__49 = (Var)RT.var("ginga.async", "ignorable-async-ste?");
    const__52 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "ste")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "StackTraceElement") }))) })), RT.keyword(null, "line"), Integer.valueOf(78), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async.cljc" });
    const__53 = (Var)RT.var("ginga.async", "ignorable-async-ste-after-async-call?");
    const__56 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "ste")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "StackTraceElement") }))) })), RT.keyword(null, "line"), Integer.valueOf(81), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async.cljc" });
    const__57 = (Var)RT.var("ginga.async", "ste-as-map");
    const__60 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "ste")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "StackTraceElement") }))) })), RT.keyword(null, "line"), Integer.valueOf(88), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async.cljc" });
    const__61 = (Var)RT.var("ginga.async", "collapse-state-machine-stes");
    const__64 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "stes")) })), RT.keyword(null, "line"), Integer.valueOf(94), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async.cljc" });
    const__65 = (Var)RT.var("ginga.async", "chain-async-stacktrace");
    const__68 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "e1")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Throwable") })), ((IObj)Symbol.intern(null, "e2")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Throwable") })), Symbol.intern(null, "ns"), Symbol.intern(null, "file"), Symbol.intern(null, "line")) })), RT.keyword(null, "line"), Integer.valueOf(102), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async.cljc" });
    const__69 = (Var)RT.var("ginga.async", "source-file");
    const__72 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "doc"), "referencing *file* directly in a macro gives undeclared var errors in clojurescript", RT.keyword(null, "line"), Integer.valueOf(134), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async.cljc" });
    const__73 = (Var)RT.var("ginga.async", "<?");
    const__76 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "port")) })), RT.keyword(null, "doc"), "Like <! but checks for error? values and throws the wrapped\n  exception.", RT.keyword(null, "line"), Integer.valueOf(139), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async.cljc" });
    const__77 = (Var)RT.var("ginga.async", "<?!");
    const__80 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "port")) })), RT.keyword(null, "doc"), "Like <? but blocks", RT.keyword(null, "line"), Integer.valueOf(152), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async.cljc" });
    const__81 = (Var)RT.var("ginga.async", "modify-alt-clauses");
    const__85 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "clauses")) })), RT.keyword(null, "line"), Integer.valueOf(161), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async.cljc" });
    const__86 = (Var)RT.var("ginga.async", "alt?");
    const__89 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "clauses")) })), RT.keyword(null, "doc"), "Like alt! but checks for error? values and throws the wrapped exception.", RT.keyword(null, "line"), Integer.valueOf(175), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async.cljc" });
    const__90 = (Var)RT.var("ginga.async", "cond-alt!");
    const__93 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "forms")) })), RT.keyword(null, "doc"), "Combines semantics of alt! and condp.\n\n  Given a series of `condition channel :>> expr` forms (where :>> is\n  optional) take from channel only if condition is true and evaluate\n  expression.\n\n  The :>> form will invoke the given expr as a unary function with\n  the value taken from the channel as its only argument.\n\n  Example:\n\n    (cond-alt!\n      :always chan1       ([messages] ...)\n      cond2   chan2       :>> (fn [messages] ...)\n      cond3   (timeout n) nil", RT.keyword(null, "line"), Integer.valueOf(187), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async.cljc" });
    const__94 = (Var)RT.var("ginga.async", "fan-out");
    const__97 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "in-ch"), Symbol.intern(null, "out-chs")) })), RT.keyword(null, "doc"), "Like async/mult, but takes all out-chs as arguments and doesn't drop\n  any messages. Closes out-chs when in-chan is closed.", RT.keyword(null, "line"), Integer.valueOf(233), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async.cljc" });
    const__98 = (Var)RT.var("ginga.async", "dochan");
  }
  
  public static void __init1() {
    const__101 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Tuple.create(Symbol.intern(null, "binding"), Symbol.intern(null, "port")), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "doc"), "Implements the go-loop/when-some pattern. Like doseq but for\n  channels.", RT.keyword(null, "line"), Integer.valueOf(245), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async.cljc" });
    const__102 = (Var)RT.var("ginga.async", "process");
    const__106 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "export"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "in-ch"), Symbol.intern(null, "&"), Symbol.intern(null, "args")) })), RT.keyword(null, "doc"), "The given function is invoked with every value taken from in-ch and\n  has presumably some side-effect.\n\n  Caveat emptor: doesn't allow for backpressure.", RT.keyword(null, "line"), Integer.valueOf(257), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "ginga/async.cljc" });
    const__107 = (Var)RT.var("ginga.async", "process-async");
    const__110 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "in-ch")) })), RT.keyword(null, "doc"), "Similar to process, except the given function takes an additional\n  `complete` function argument which has to be called with a non-false\n  argument to continue.", RT.keyword(null, "line"), Integer.valueOf(266), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async.cljc" });
    const__111 = (Var)RT.var("ginga.async", "put-wait-on-chan!");
    const__114 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ch"), Symbol.intern(null, "value")), Tuple.create(Symbol.intern(null, "ch"), Symbol.intern(null, "value"), Symbol.intern(null, "wait-ch")) })), RT.keyword(null, "doc"), "Like put! but returns a channel for backpressure. Similar to\n  (go (>! ch message)) but does the put immediately.", RT.keyword(null, "line"), Integer.valueOf(277), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async.cljc" });
    const__115 = (Var)RT.var("ginga.async", "coerce-timeout");
    const__118 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "chan-or-ms")) })), RT.keyword(null, "line"), Integer.valueOf(289), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async.cljc" });
    const__119 = (Var)RT.var("ginga.async", "try-take!");
    const__122 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "source"), Symbol.intern(null, "timeout")), Tuple.create(Symbol.intern(null, "source"), Symbol.intern(null, "default-val"), Symbol.intern(null, "timeout"), Symbol.intern(null, "timeout-val")) })), RT.keyword(null, "doc"), "Like manifold.stream/try-take! but for core.async channels\n\n   timeout     - a channel or a timeout in ms\n   default-val - returned if source is closed (default nil)\n   timeout-val - returned if operation times out (default nil)\n   returns the value if the operation succeeds or nil if it doesn't", RT.keyword(null, "line"), Integer.valueOf(294), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async.cljc" });
    const__123 = (Var)RT.var("ginga.async", "try-put!");
    const__126 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "sink"), Symbol.intern(null, "v"), Symbol.intern(null, "timeout")), Tuple.create(Symbol.intern(null, "sink"), Symbol.intern(null, "v"), Symbol.intern(null, "timeout"), Symbol.intern(null, "timeout-val")) })), RT.keyword(null, "doc"), "Like manifold.stream/try-put! but for core.async channels\n\n   timeout     - a channel or a timeout in ms\n   timeout-val - returned if operation times out (default false)\n   returns true or false depending on whether the operation succeeds", RT.keyword(null, "line"), Integer.valueOf(308), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async.cljc" });
    const__127 = (Var)RT.var("ginga.async", "expect!");
    const__130 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "in")), Tuple.create(Symbol.intern(null, "in"), Symbol.intern(null, "close-promise")) })), RT.keyword(null, "doc"), "Takes a message from in, raising an exception if in closes prematurely\n  or the given close-promise resolves.", RT.keyword(null, "line"), Integer.valueOf(321), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async.cljc" });
    const__131 = (Var)RT.var("ginga.async", "convey!");
    const__134 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "out"), Symbol.intern(null, "message")), Tuple.create(Symbol.intern(null, "out"), Symbol.intern(null, "message"), Symbol.intern(null, "close-promise")) })), RT.keyword(null, "doc"), "Puts a message on out, raising an exception if out closes prematurely\n  or the given close-promise resolves.", RT.keyword(null, "line"), Integer.valueOf(334), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async.cljc" });
    const__135 = (Var)RT.var("ginga.async", "request!");
    const__138 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "out"), Symbol.intern(null, "in"), Symbol.intern(null, "message"), Symbol.intern(null, "close-promise")) })), RT.keyword(null, "doc"), "Sends a message via out, and expects a response via in. If either out\n  or in are closed prematurely or the close-promise is resolved raises\n  an exception.", RT.keyword(null, "line"), Integer.valueOf(346), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async.cljc" });
    const__139 = (Var)RT.var("ginga.async", "offer!");
    const__142 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ch"), Symbol.intern(null, "v")) })), RT.keyword(null, "line"), Integer.valueOf(358), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async.cljc" });
    const__143 = (Var)RT.var("ginga.async", "retry!");
    const__146 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "ms"), Symbol.intern(null, "max"), Symbol.intern(null, "promise"), Symbol.intern(null, "retry?")), RT.keyword(null, "or"), RT.map(new Object[] { Symbol.intern(null, "ms"), Long.valueOf(0L), Symbol.intern(null, "max"), null, Symbol.intern(null, "promise"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "chan") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(372), RT.keyword(null, "column"), Integer.valueOf(19) })), Symbol.intern(null, "retry?"), Symbol.intern(null, "error?") }), RT.keyword(null, "as"), Symbol.intern(null, "retry-opts") }), Symbol.intern(null, "f"), Symbol.intern(null, "&"), Symbol.intern(null, "args")) })), RT.keyword(null, "doc"), "Invokes the given async function, and retries after the given number\n  of ms if retry? returns true for the result. max and promise can be\n  used to bound the number of retries , and either the last result will\n  be returned in case of max (which may be an error) or the value of the\n  promise will be returned if the promise resolves. By default, will\n  retry until a non-error result is returned.", RT.keyword(null, "line"), Integer.valueOf(362), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async.cljc" });
    const__147 = (Var)RT.var("ginga.async", "timeout-loop");
    const__150 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ms")), Tuple.create(Symbol.intern(null, "ms"), Symbol.intern(null, "ch")) })), RT.keyword(null, "doc"), "Returns a channel that will have a value put on it after at least\n  every ms milliseconds. The interval may drift and if a blocking\n  channel is given (the default), no new messages will be put on the\n  channel for the duration of a blocking put.", RT.keyword(null, "line"), Integer.valueOf(385), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async.cljc" });
    const__151 = (Var)RT.var("ginga.async", "reduce");
    const__154 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "ch")), Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "init"), Symbol.intern(null, "ch")) })), RT.keyword(null, "doc"), "Like async/reduce but supports <?.", RT.keyword(null, "line"), Integer.valueOf(399), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async.cljc" });
    const__155 = (Var)RT.var("ginga.async", "runchan");
    const__158 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ch")) })), RT.keyword(null, "doc"), "Like dorun but takes a channel and supports <?.\n\n  Returns a channel that will contain the error if any, or nil if all\n  values have been taken without error.", RT.keyword(null, "line"), Integer.valueOf(410), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async.cljc" });
    const__159 = (Var)RT.var("ginga.async", "reduce-af");
    const__162 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "init"), Symbol.intern(null, "ch")) })), RT.keyword(null, "doc"), "Like async/reduce but the given function (af = asynchronous function)\n  returns a channel with a single result put onto it. Supports <?.", RT.keyword(null, "line"), Integer.valueOf(418), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async.cljc" });
    const__163 = (Var)RT.var("ginga.async", "some-iteration");
    const__166 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pred?"), Symbol.intern(null, "f"), Symbol.intern(null, "init")) })), RT.keyword(null, "doc"), "Similar to ginga.core/some-iteration except f returns a\n  channel. Supports <?.", RT.keyword(null, "line"), Integer.valueOf(428), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async.cljc" });
    const__167 = (Var)RT.var("ginga.async", "take-until");
    const__170 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "until?"), Symbol.intern(null, "ch")) })), RT.keyword(null, "doc"), "Similar to clojure.core/take-until but takes from a channel. Supports <?.", RT.keyword(null, "line"), Integer.valueOf(438), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async.cljc" });
    const__171 = (Var)RT.var("ginga.async", "generate");
    const__174 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "init")) })), RT.keyword(null, "doc"), "Returns a channel containing the results of repeatedly calling\n   (<? (f prev-result | init)).\n\n   Similar to core/iterate but does not include init in the result, will\n   generate one item ahead of consumption, and a nil iteration will\n   close the channel.", RT.keyword(null, "line"), Integer.valueOf(450), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async.cljc" });
    const__175 = (Var)RT.var("ginga.async", "ref-wait");
    const__178 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ref"), Symbol.intern(null, "key"), Symbol.intern(null, "pred?")) })), RT.keyword(null, "doc"), "Returns a promise channel that will be resolved when the atom reaches\n  a state for which pred? returns true.", RT.keyword(null, "line"), Integer.valueOf(466), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async.cljc" });
    const__179 = (Var)RT.var("ginga.async", "ref-next");
    const__182 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ref")) })), RT.keyword(null, "doc"), "Like ginga.core/add-watch-once but returns a promise-chan that will\n  have the new value put onto it.", RT.keyword(null, "line"), Integer.valueOf(486), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async.cljc" });
    const__183 = (Var)RT.var("ginga.async", "ref-subscribe");
    const__186 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ref"), Symbol.intern(null, "k")), Tuple.create(Symbol.intern(null, "ref"), Symbol.intern(null, "k"), Symbol.intern(null, "buf")) })), RT.keyword(null, "doc"), "Attaches a watch to ref with key k and puts the old and new state\n  onto a channel. Returns the channel. Doesn't block. If no buffer is\n  given, uses a sliding buffer of size 1 by default. If a buffer is\n  given, it must be an unblocking-buffer?.", RT.keyword(null, "line"), Integer.valueOf(495), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async.cljc" });
    const__187 = (Var)RT.var("ginga.async", "wrap");
    const__190 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "to"), Symbol.intern(null, "xf")), Tuple.create(Symbol.intern(null, "to"), Symbol.intern(null, "xf"), Symbol.intern(null, "ex-handler")), Tuple.create(Symbol.intern(null, "to"), Symbol.intern(null, "buf-or-n"), Symbol.intern(null, "xf"), Symbol.intern(null, "ex-handler")) })), RT.keyword(null, "doc"), "Wrap a channel with a new channel having the given transducer and\n  optional exception handler.", RT.keyword(null, "line"), Integer.valueOf(509), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async.cljc" });
    const__191 = (Var)RT.var("ginga.async", "pipeline1");
    const__194 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "to"), Symbol.intern(null, "xf"), Symbol.intern(null, "from")), Tuple.create(Symbol.intern(null, "to"), Symbol.intern(null, "xf"), Symbol.intern(null, "from"), Symbol.intern(null, "close?"), Symbol.intern(null, "ex-handler")) })), RT.keyword(null, "doc"), "Like async/pipline, but with less overhead for the n == 1 case.", RT.keyword(null, "line"), Integer.valueOf(521), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async.cljc" });
    const__195 = (Var)RT.var("ginga.async", "pipeline-into");
    const__198 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "coll"), Symbol.intern(null, "xf"), Symbol.intern(null, "ch")) })), RT.keyword(null, "doc"), "Like pipeline but returns a channel containing the resulting\n  collection rather than a channel of results.", RT.keyword(null, "line"), Integer.valueOf(531), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async.cljc" });
    const__199 = (Var)RT.var("ginga.async", "compose");
  }
  
  public static void __init2() {
    const__202 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "compose"), Symbol.intern(null, "from"), Symbol.intern(null, "to")) })), RT.keyword(null, "doc"), "Takes from `from` and pipes into `to`. If `to` is blocked, will\n  compose values from `from` using compose into a single value until\n  `to` is unblocked.", RT.keyword(null, "line"), Integer.valueOf(537), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async.cljc" });
    const__203 = (Var)RT.var("ginga.async", "throttle");
    const__206 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ms"), Symbol.intern(null, "from"), Symbol.intern(null, "to")) })), RT.keyword(null, "doc"), "Takes from `from` at most every `ms` milliseconds and pipes the\n  result into `to`.", RT.keyword(null, "line"), Integer.valueOf(558), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async.cljc" });
    const__207 = (Var)RT.var("ginga.async", "parallelize");
    const__210 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "n"), Symbol.intern(null, "f"), Symbol.intern(null, "from")), Tuple.create(Symbol.intern(null, "n"), Symbol.intern(null, "f"), Symbol.intern(null, "to"), Symbol.intern(null, "from")), Tuple.create(Symbol.intern(null, "n"), Symbol.intern(null, "f"), Symbol.intern(null, "to"), Symbol.intern(null, "from"), Symbol.intern(null, "close?")) })), RT.keyword(null, "doc"), "Similar to core.async/pipeline-async but accepts an async function\n  that accepts a value and returns a channel.", RT.keyword(null, "line"), Integer.valueOf(571), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async.cljc" });
    const__211 = (Var)RT.var("ginga.async", "all");
    const__214 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "chs")) })), RT.keyword(null, "doc"), "Given a sequence of channels, returns a single channel that contains\n  a vector of values taken from them in the same order as the original\n  sequence.\n\n  Similar to (core.async/map vector) but does maximally a single take\n  and if any given chs are closed without producing a value, nil will be\n  used instead (go blocks).\n\n  Also, similar to (->> core.async/merge core.async/into) but preserves the\n  original order, and only considers a single result and therefore works\n  with promises or single-value channels that aren't closed (go blocks).\n\n  Supports <?", RT.keyword(null, "line"), Integer.valueOf(584), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async.cljc" });
    const__215 = (Var)RT.var("ginga.async", "make-connections");
    const__218 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "graph")), Tuple.create(Symbol.intern(null, "graph"), Symbol.intern(null, "xforms")), Tuple.create(Symbol.intern(null, "graph"), Symbol.intern(null, "xforms"), Symbol.intern(null, "channels")) })), RT.keyword(null, "line"), Integer.valueOf(613), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async.cljc" });
  }
  
  static  {
    __init0();
    __init1();
    __init2();
    Compiler.pushNSandLoader(RT.classForName("ginga.async__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
