package ginga.async;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class haywire__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__3;
  
  public static final AFn const__4;
  
  public static final Var const__5;
  
  public static final AFn const__12;
  
  public static final Object const__13;
  
  public static final Var const__14;
  
  public static final AFn const__18;
  
  public static final Var const__19;
  
  public static final AFn const__22;
  
  public static final Var const__23;
  
  public static final AFn const__26;
  
  public static final Var const__27;
  
  public static final AFn const__30;
  
  public static final Var const__31;
  
  public static final AFn const__34;
  
  public static final Var const__35;
  
  public static final AFn const__38;
  
  public static final Var const__39;
  
  public static final AFn const__42;
  
  public static final Var const__43;
  
  public static final AFn const__46;
  
  public static final Var const__47;
  
  public static final AFn const__50;
  
  public static final Var const__51;
  
  public static final AFn const__54;
  
  public static final Var const__55;
  
  public static final AFn const__58;
  
  public static final Var const__59;
  
  public static final AFn const__62;
  
  public static final Var const__63;
  
  public static final AFn const__66;
  
  public static final Var const__67;
  
  public static final AFn const__70;
  
  public static final Var const__71;
  
  public static final AFn const__74;
  
  public static final Var const__75;
  
  public static final AFn const__78;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new haywire.fn__10765());
    const__5.setMeta((IPersistentMap)const__12);
    const__5.bindRoot(const__13);
    const__14.setMeta((IPersistentMap)const__18);
    const__14.bindRoot(new haywire.inc_wraparound());
    const__19.setMeta((IPersistentMap)const__22);
    const__19.bindRoot(new haywire.sequence_follows_QMARK_());
    const__23.setMeta((IPersistentMap)const__26);
    const__23.bindRoot(new haywire.new_sequence());
    const__27.setMeta((IPersistentMap)const__30);
    const__27.bindRoot(new haywire.make_reorder_xf());
    const__31.setMeta((IPersistentMap)const__34);
    const__31.bindRoot(new haywire.win_msg());
    const__35.setMeta((IPersistentMap)const__38);
    const__35.bindRoot(new haywire.ping_msg());
    const__39.setMeta((IPersistentMap)const__42);
    const__39.bindRoot(new haywire.pong_msg());
    const__43.setMeta((IPersistentMap)const__46);
    const__43.bindRoot(new haywire.close_msg());
    const__47.setMeta((IPersistentMap)const__50);
    const__47.bindRoot(new haywire._STAR_msg());
    const__51.setMeta((IPersistentMap)const__54);
    const__51.bindRoot(new haywire.connection());
    const__55.setMeta((IPersistentMap)const__58);
    const__55.bindRoot(new haywire.disconnect());
    const__59.setMeta((IPersistentMap)const__62);
    const__59.bindRoot(new haywire.on_error());
    const__63.setMeta((IPersistentMap)const__66);
    const__63.bindRoot(new haywire.run_send_process());
    const__67.setMeta((IPersistentMap)const__70);
    const__67.bindRoot(new haywire.run_receive_process());
    const__71.setMeta((IPersistentMap)const__74);
    const__71.bindRoot(new haywire.run_dequeue_process());
    const__75.setMeta((IPersistentMap)const__78);
    const__75.bindRoot(new haywire.connect());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "ginga.async.haywire")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Supports bi-directional communication with channels over best-effort\n  delivery mechanisms." }));
    const__3 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Supports bi-directional communication with channels over best-effort\n  delivery mechanisms." });
    const__4 = (AFn)Symbol.intern(null, "clojure.core");
    const__5 = (Var)RT.var("ginga.async.haywire", "sequence-init");
    const__12 = (AFn)RT.map(new Object[] { RT.keyword(null, "const"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(21), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async/haywire.cljc" });
    const__13 = Long.valueOf(0L);
    const__14 = (Var)RT.var("ginga.async.haywire", "inc-wraparound");
    const__18 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "v")) })), RT.keyword(null, "line"), Integer.valueOf(25), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async/haywire.cljc" });
    const__19 = (Var)RT.var("ginga.async.haywire", "sequence-follows?");
    const__22 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "a"), Symbol.intern(null, "b")) })), RT.keyword(null, "line"), Integer.valueOf(30), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async/haywire.cljc" });
    const__23 = (Var)RT.var("ginga.async.haywire", "new-sequence");
    const__26 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ref")) })), RT.keyword(null, "line"), Integer.valueOf(33), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async/haywire.cljc" });
    const__27 = (Var)RT.var("ginga.async.haywire", "make-reorder-xf");
    const__30 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(36), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async/haywire.cljc" });
    const__31 = (Var)RT.var("ginga.async.haywire", "win-msg");
    const__34 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(), Tuple.create(Symbol.intern(null, "G__10771")) })), RT.keyword(null, "line"), Integer.valueOf(39), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async/haywire.cljc" });
    const__35 = (Var)RT.var("ginga.async.haywire", "ping-msg");
    const__38 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(), Tuple.create(Symbol.intern(null, "G__10804")) })), RT.keyword(null, "line"), Integer.valueOf(40), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async/haywire.cljc" });
    const__39 = (Var)RT.var("ginga.async.haywire", "pong-msg");
    const__42 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(), Tuple.create(Symbol.intern(null, "G__10831")) })), RT.keyword(null, "line"), Integer.valueOf(41), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async/haywire.cljc" });
    const__43 = (Var)RT.var("ginga.async.haywire", "close-msg");
    const__46 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(), Tuple.create(Symbol.intern(null, "G__10858")) })), RT.keyword(null, "line"), Integer.valueOf(42), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async/haywire.cljc" });
    const__47 = (Var)RT.var("ginga.async.haywire", "*msg");
    const__50 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(), Tuple.create(Symbol.intern(null, "G__10885")) })), RT.keyword(null, "line"), Integer.valueOf(43), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async/haywire.cljc" });
    const__51 = (Var)RT.var("ginga.async.haywire", "connection");
    const__54 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(), Tuple.create(Symbol.intern(null, "G__10915")) })), RT.keyword(null, "line"), Integer.valueOf(44), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async/haywire.cljc" });
    const__55 = (Var)RT.var("ginga.async.haywire", "disconnect");
    const__58 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "connection")) })), RT.keyword(null, "line"), Integer.valueOf(54), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async/haywire.cljc" });
    const__59 = (Var)RT.var("ginga.async.haywire", "on-error");
    const__62 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "connection")) })), RT.keyword(null, "line"), Integer.valueOf(60), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async/haywire.cljc" });
    const__63 = (Var)RT.var("ginga.async.haywire", "run-send-process");
    const__66 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "msg-size"), Symbol.intern(null, "connection")) })), RT.keyword(null, "line"), Integer.valueOf(63), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async/haywire.cljc" });
    const__67 = (Var)RT.var("ginga.async.haywire", "run-receive-process");
    const__70 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "buf-cnt"), Symbol.intern(null, "buf-size")), RT.keyword(null, "as"), Symbol.intern(null, "win-opts") }), Symbol.intern(null, "msg-size"), Symbol.intern(null, "connection")) })), RT.keyword(null, "line"), Integer.valueOf(79), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async/haywire.cljc" });
    const__71 = (Var)RT.var("ginga.async.haywire", "run-dequeue-process");
    const__74 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "msg-size"), Symbol.intern(null, "connection")) })), RT.keyword(null, "line"), Integer.valueOf(104), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async/haywire.cljc" });
    const__75 = (Var)RT.var("ginga.async.haywire", "connect");
    const__78 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "buf-cnt"), Symbol.intern(null, "buf-size"), Symbol.intern(null, "send-timeout-ms"), Symbol.intern(null, "immediate-send-factor")), RT.keyword(null, "as"), Symbol.intern(null, "win-opts") }), RT.keyword(null, "win-opts"), RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "ping-timeout-ms"), Symbol.intern(null, "pong-timeout-ms"), Symbol.intern(null, "msg-size")), RT.keyword(null, "or"), RT.map(new Object[] { Symbol.intern(null, "msg-size"), Symbol.intern("win", "size") }), RT.keyword(null, "as"), Symbol.intern(null, "connect-opts") }), Symbol.intern(null, "downstream"), Symbol.intern(null, "upstream"), Symbol.intern(null, "in"), Symbol.intern(null, "out")) })), RT.keyword(null, "doc"), "Caveat emptor: messages put on the in channel must be <= :buf-size\n  _of the remote end point_, otherwise an overflow error may be caused\n  on the remote end point.", RT.keyword(null, "line"), Integer.valueOf(114), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async/haywire.cljc" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("ginga.async.haywire__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
