package ginga.async;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class win__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Object const__3;
  
  public static final Var const__4;
  
  public static final Var const__5;
  
  public static final Var const__6;
  
  public static final Keyword const__7;
  
  public static final Var const__8;
  
  public static final ISeq const__9;
  
  public static final Var const__10;
  
  public static final Var const__11;
  
  public static final AFn const__15;
  
  public static final Keyword const__16;
  
  public static final AFn const__17;
  
  public static final Keyword const__18;
  
  public static final Keyword const__19;
  
  public static final Keyword const__20;
  
  public static final AFn const__21;
  
  public static final Keyword const__22;
  
  public static final Var const__23;
  
  public static final Var const__24;
  
  public static final Var const__25;
  
  public static final AFn const__26;
  
  public static final AFn const__27;
  
  public static final Keyword const__28;
  
  public static final Var const__29;
  
  public static final AFn const__30;
  
  public static final Var const__31;
  
  public static final Object const__32;
  
  public static final Var const__33;
  
  public static final AFn const__41;
  
  public static final Var const__42;
  
  public static final AFn const__45;
  
  public static final Var const__46;
  
  public static final AFn const__49;
  
  public static final Var const__50;
  
  public static final AFn const__53;
  
  public static final Var const__54;
  
  public static final AFn const__57;
  
  public static final Var const__58;
  
  public static final AFn const__61;
  
  public static final Var const__62;
  
  public static final AFn const__65;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new win.fn__10618());
    const__33.setMeta((IPersistentMap)const__41);
    const__33.bindRoot(new win.stats());
    const__42.setMeta((IPersistentMap)const__45);
    const__42.bindRoot(new win.stats_PLUS__EQ_());
    const__46.setMeta((IPersistentMap)const__49);
    const__46.bindRoot(new win.stats__EQ_());
    const__50.setMeta((IPersistentMap)const__53);
    const__50.bindRoot(new win.open_QMARK_());
    const__54.setMeta((IPersistentMap)const__57);
    const__54.bindRoot(new win.transition_QMARK_());
    const__58.setMeta((IPersistentMap)const__61);
    const__58.bindRoot(new win.swap_BANG__transition_QMARK_());
    const__62.setMeta((IPersistentMap)const__65);
    const__62.bindRoot(new win.make_send_watch());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "ginga.async.win");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = RT.classForName("ginga.async.win.Size");
    const__4 = (Var)RT.var("clojure.core", "alter-meta!");
    const__5 = (Var)RT.var("ginga.async.win", "Size");
    const__6 = (Var)RT.var("clojure.core", "assoc");
    const__7 = (Keyword)RT.keyword(null, "doc");
    const__8 = (Var)RT.var("clojure.core", "assert-same-protocol");
    const__9 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "size")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Returns the approximate size of an object that should be\n  deducted-from/added-to the receive window when sent/received.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "obj")) })) })) }));
    const__10 = (Var)RT.var("clojure.core", "alter-var-root");
    const__11 = (Var)RT.var("clojure.core", "merge");
    const__15 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "ginga.async.win.Size"), RT.keyword(null, "on-interface"), RT.classForName("ginga.async.win.Size") });
    const__16 = (Keyword)RT.keyword(null, "sigs");
    const__17 = (AFn)RT.map(new Object[] { RT.keyword(null, "size"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "size")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Returns the approximate size of an object that should be\n  deducted-from/added-to the receive window when sent/received.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "obj")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "obj")) })), RT.keyword(null, "doc"), "Returns the approximate size of an object that should be\n  deducted-from/added-to the receive window when sent/received." }) });
    const__18 = (Keyword)RT.keyword(null, "var");
    const__19 = (Keyword)RT.keyword(null, "method-map");
    const__20 = (Keyword)RT.keyword(null, "size");
    const__21 = (AFn)RT.map(new Object[] { RT.keyword(null, "size"), RT.keyword(null, "size") });
    const__22 = (Keyword)RT.keyword(null, "method-builders");
    const__23 = (Var)RT.var("clojure.core", "intern");
    const__24 = (Var)RT.var("clojure.core", "*ns*");
    const__25 = (Var)RT.var("clojure.core", "with-meta");
    const__26 = (AFn)((IObj)Symbol.intern(null, "size")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Returns the approximate size of an object that should be\n  deducted-from/added-to the receive window when sent/received.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "obj")) })) }));
    const__27 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "size")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Returns the approximate size of an object that should be\n  deducted-from/added-to the receive window when sent/received.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "obj")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "obj")) })), RT.keyword(null, "doc"), "Returns the approximate size of an object that should be\n  deducted-from/added-to the receive window when sent/received." });
    const__28 = (Keyword)RT.keyword(null, "protocol");
    const__29 = (Var)RT.var("clojure.core", "-reset-methods");
    const__30 = (AFn)Symbol.intern(null, "Size");
    const__31 = (Var)RT.var("clojure.core", "extend");
    const__32 = RT.classForName("java.lang.String");
    const__33 = (Var)RT.var("ginga.async.win", "stats");
    const__41 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(17), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async/win.cljc" });
    const__42 = (Var)RT.var("ginga.async.win", "stats+=");
    const__45 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Tuple.create(Symbol.intern(null, "cnt"), Symbol.intern(null, "size")), Symbol.intern(null, "inc-cnt"), Symbol.intern(null, "inc-size")) })), RT.keyword(null, "line"), Integer.valueOf(20), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async/win.cljc" });
    const__46 = (Var)RT.var("ginga.async.win", "stats-=");
    const__49 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Tuple.create(Symbol.intern(null, "cnt"), Symbol.intern(null, "size")), Symbol.intern(null, "dec-cnt"), Symbol.intern(null, "dec-size")) })), RT.keyword(null, "line"), Integer.valueOf(23), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async/win.cljc" });
    const__50 = (Var)RT.var("ginga.async.win", "open?");
    const__53 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Tuple.create(Symbol.intern(null, "cnt"), Symbol.intern(null, "size"), RT.keyword(null, "as"), Symbol.intern(null, "stats"))) })), RT.keyword(null, "line"), Integer.valueOf(26), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async/win.cljc" });
    const__54 = (Var)RT.var("ginga.async.win", "transition?");
    const__57 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "old-stats"), Symbol.intern(null, "new-stats")) })), RT.keyword(null, "line"), Integer.valueOf(29), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async/win.cljc" });
    const__58 = (Var)RT.var("ginga.async.win", "swap!-transition?");
    const__61 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "win-stats"), Symbol.intern(null, "f"), Symbol.intern(null, "cnt"), Symbol.intern(null, "size")) })), RT.keyword(null, "line"), Integer.valueOf(32), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async/win.cljc" });
    const__62 = (Var)RT.var("ginga.async.win", "make-send-watch");
    const__65 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "send-timeout-ms"), Symbol.intern(null, "immediate-send-factor"), Symbol.intern(null, "buf-cnt"), Symbol.intern(null, "buf-size")), RT.keyword(null, "as"), Symbol.intern(null, "win-opts") }), Symbol.intern(null, "send-window")) })), RT.keyword(null, "line"), Integer.valueOf(35), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async/win.cljc" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("ginga.async.win__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
