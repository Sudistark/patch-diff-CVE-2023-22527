package ginga;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.PersistentVector;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class core__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final Keyword const__6;
  
  public static final AFn const__12;
  
  public static final Var const__13;
  
  public static final AFn const__16;
  
  public static final Var const__17;
  
  public static final AFn const__20;
  
  public static final Var const__21;
  
  public static final AFn const__23;
  
  public static final Var const__24;
  
  public static final Var const__25;
  
  public static final Var const__26;
  
  public static final Var const__27;
  
  public static final AFn const__30;
  
  public static final Var const__31;
  
  public static final AFn const__34;
  
  public static final Var const__35;
  
  public static final AFn const__38;
  
  public static final Var const__39;
  
  public static final AFn const__42;
  
  public static final Var const__43;
  
  public static final AFn const__46;
  
  public static final Var const__47;
  
  public static final AFn const__50;
  
  public static final Var const__51;
  
  public static final AFn const__54;
  
  public static final Var const__55;
  
  public static final AFn const__58;
  
  public static final Var const__59;
  
  public static final AFn const__62;
  
  public static final Var const__63;
  
  public static final AFn const__65;
  
  public static final Var const__66;
  
  public static final Var const__67;
  
  public static final Var const__68;
  
  public static final Var const__69;
  
  public static final AFn const__72;
  
  public static final Var const__73;
  
  public static final AFn const__76;
  
  public static final Var const__77;
  
  public static final AFn const__80;
  
  public static final Object const__81;
  
  public static final Var const__82;
  
  public static final Var const__83;
  
  public static final Var const__84;
  
  public static final Var const__85;
  
  public static final ISeq const__86;
  
  public static final Var const__87;
  
  public static final Var const__88;
  
  public static final AFn const__92;
  
  public static final Keyword const__93;
  
  public static final AFn const__94;
  
  public static final Keyword const__95;
  
  public static final Keyword const__96;
  
  public static final AFn const__98;
  
  public static final Keyword const__99;
  
  public static final Var const__100;
  
  public static final Var const__101;
  
  public static final Var const__102;
  
  public static final AFn const__103;
  
  public static final AFn const__104;
  
  public static final Keyword const__105;
  
  public static final Var const__106;
  
  public static final AFn const__107;
  
  public static final Var const__108;
  
  public static final AFn const__111;
  
  public static final Var const__112;
  
  public static final AFn const__115;
  
  public static final Var const__116;
  
  public static final AFn const__119;
  
  public static final Var const__120;
  
  public static final AFn const__122;
  
  public static final Var const__123;
  
  public static final Var const__124;
  
  public static final AFn const__127;
  
  public static final Var const__128;
  
  public static final AFn const__131;
  
  public static final Var const__132;
  
  public static final AFn const__135;
  
  public static final Var const__136;
  
  public static final AFn const__139;
  
  public static final Var const__140;
  
  public static final AFn const__143;
  
  public static final Var const__144;
  
  public static final AFn const__147;
  
  public static final Var const__148;
  
  public static final AFn const__151;
  
  public static final Var const__152;
  
  public static final AFn const__155;
  
  public static final Var const__156;
  
  public static final AFn const__159;
  
  public static final Var const__160;
  
  public static final AFn const__163;
  
  public static final Var const__164;
  
  public static final AFn const__167;
  
  public static final Var const__168;
  
  public static final AFn const__171;
  
  public static final Var const__172;
  
  public static final AFn const__175;
  
  public static final Var const__176;
  
  public static final AFn const__179;
  
  public static final Var const__180;
  
  public static final AFn const__183;
  
  public static final Var const__184;
  
  public static final AFn const__187;
  
  public static final Var const__188;
  
  public static final AFn const__191;
  
  public static final Var const__192;
  
  public static final AFn const__195;
  
  public static final Var const__196;
  
  public static final AFn const__199;
  
  public static final Var const__200;
  
  public static final AFn const__203;
  
  public static final Var const__204;
  
  public static final AFn const__207;
  
  public static final Var const__208;
  
  public static final AFn const__211;
  
  public static final Var const__212;
  
  public static final AFn const__215;
  
  public static final Var const__216;
  
  public static final AFn const__219;
  
  public static final Var const__220;
  
  public static final AFn const__222;
  
  public static final Var const__223;
  
  public static final AFn const__226;
  
  public static final Var const__227;
  
  public static final AFn const__231;
  
  public static final Var const__232;
  
  public static final AFn const__235;
  
  public static final Var const__236;
  
  public static final AFn const__238;
  
  public static final Var const__239;
  
  public static final Var const__240;
  
  public static final AFn const__243;
  
  public static final Var const__244;
  
  public static final AFn const__247;
  
  public static final Var const__248;
  
  public static final AFn const__251;
  
  public static final Var const__252;
  
  public static final AFn const__255;
  
  public static final Var const__256;
  
  public static final AFn const__259;
  
  public static final Var const__260;
  
  public static final AFn const__263;
  
  public static final Var const__264;
  
  public static final AFn const__267;
  
  public static final Var const__268;
  
  public static final AFn const__271;
  
  public static final Var const__272;
  
  public static final AFn const__275;
  
  public static final Var const__276;
  
  public static final AFn const__279;
  
  public static final Var const__280;
  
  public static final AFn const__283;
  
  public static final Var const__284;
  
  public static final AFn const__287;
  
  public static final Var const__288;
  
  public static final AFn const__291;
  
  public static final Var const__292;
  
  public static final AFn const__295;
  
  public static final Var const__296;
  
  public static final AFn const__299;
  
  public static final Var const__300;
  
  public static final AFn const__303;
  
  public static final Var const__304;
  
  public static final AFn const__307;
  
  public static final Var const__308;
  
  public static final AFn const__311;
  
  public static final Var const__312;
  
  public static final AFn const__315;
  
  public static final Var const__316;
  
  public static final AFn const__319;
  
  public static final Var const__320;
  
  public static final AFn const__323;
  
  public static final Var const__324;
  
  public static final AFn const__327;
  
  public static final Object const__328;
  
  public static final Var const__329;
  
  public static final ISeq const__330;
  
  public static final AFn const__332;
  
  public static final AFn const__333;
  
  public static final AFn const__335;
  
  public static final AFn const__336;
  
  public static final AFn const__337;
  
  public static final AFn const__338;
  
  public static final Var const__339;
  
  public static final AFn const__342;
  
  public static final Var const__343;
  
  public static final AFn const__346;
  
  public static final Var const__347;
  
  public static final AFn const__350;
  
  public static final Var const__351;
  
  public static final AFn const__354;
  
  public static final Var const__355;
  
  public static final AFn const__358;
  
  public static final Var const__359;
  
  public static final AFn const__362;
  
  public static final Var const__363;
  
  public static final AFn const__366;
  
  public static final Var const__367;
  
  public static final AFn const__370;
  
  public static final Var const__371;
  
  public static final AFn const__374;
  
  public static final Var const__375;
  
  public static final AFn const__378;
  
  public static final Var const__379;
  
  public static final AFn const__382;
  
  public static final Var const__383;
  
  public static final AFn const__386;
  
  public static final Var const__387;
  
  public static final AFn const__390;
  
  public static final Var const__391;
  
  public static final AFn const__394;
  
  public static final Var const__395;
  
  public static final AFn const__398;
  
  public static final Var const__399;
  
  public static final AFn const__402;
  
  public static final Var const__403;
  
  public static final AFn const__406;
  
  public static final Var const__407;
  
  public static final AFn const__410;
  
  public static final Var const__411;
  
  public static final AFn const__414;
  
  public static final Var const__415;
  
  public static final AFn const__418;
  
  public static final Var const__419;
  
  public static final AFn const__422;
  
  public static final Var const__423;
  
  public static final AFn const__426;
  
  public static final Var const__427;
  
  public static final AFn const__431;
  
  public static final Var const__432;
  
  public static final AFn const__435;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new core.fn__8180());
    const__3.setMeta((IPersistentMap)const__12);
    const__3.bindRoot(new core.dissoc_in());
    const__13.setMeta((IPersistentMap)const__16);
    const__13.bindRoot(new core.ensure_vector());
    const__17.setMeta((IPersistentMap)const__20);
    const__17.bindRoot(new core.conjv());
    const__21.setMeta((IPersistentMap)const__23);
    const__21









































      
      .bindRoot(((IFn)const__24.getRawRoot()).invoke(const__25.getRawRoot(), ((IFn)const__26.getRawRoot()).invoke()));
    const__27.setMeta((IPersistentMap)const__30);
    const__27.bindRoot(new core.assoc_pnil());
    const__31.setMeta((IPersistentMap)const__34);
    const__31.bindRoot(new core.update_pnil());
    const__35.setMeta((IPersistentMap)const__38);
    const__35.bindRoot(new core.update_BANG_());
    const__39.setMeta((IPersistentMap)const__42);
    const__39.bindRoot(new core.ensure_entry());
    const__43.setMeta((IPersistentMap)const__46);
    const__43.bindRoot(new core.deep_merge());
    const__47.setMeta((IPersistentMap)const__50);
    const__47.bindRoot(new core.last_iteration());
    const__51.setMeta((IPersistentMap)const__54);
    const__51.bindRoot(new core.nth_iteration());
    const__55.setMeta((IPersistentMap)const__58);
    const__55.bindRoot(new core.some_iteration());
    const__59.setMeta((IPersistentMap)const__62);
    const__59.bindRoot(new core.unzip());
    const__63.setMeta((IPersistentMap)const__65);
    const__63















































































      
      .bindRoot(((IFn)const__66.getRawRoot()).invoke(const__67.getRawRoot(), const__68.getRawRoot()));
    const__69.setMeta((IPersistentMap)const__72);
    const__69.bindRoot(new core.flatten1());
    const__73.setMeta((IPersistentMap)const__76);
    const__73.bindRoot(new core.some_item());
    const__77.setMeta((IPersistentMap)const__80);
    const__77.bindRoot(new core.partial_method());
    const__108.setMeta((IPersistentMap)const__111);
    const__108.bindRoot(new core.queue());
    const__112.setMeta((IPersistentMap)const__115);
    const__112.bindRoot(new core.queue_QMARK_());
    const__116.setMeta((IPersistentMap)const__119);
    const__116.bindRoot(new core.regexp_QMARK_());
    const__120.setMeta((IPersistentMap)const__122);
    const__120





















      
      .bindRoot(((IFn)const__123.getRawRoot()).invoke(null));
    const__124.setMeta((IPersistentMap)const__127);
    const__124.bindRoot(new core.get_m());
    ((Var)const__124)
      
      .setMacro();
    const__128.setMeta((IPersistentMap)const__131);
    const__128.bindRoot(new core.defrecord_PLUS_());
    ((Var)const__128)






      
      .setMacro();
    const__132.setMeta((IPersistentMap)const__135);
    const__132.bindRoot(new core.f__GT_());
    ((Var)const__132)































      
      .setMacro();
    const__136.setMeta((IPersistentMap)const__139);
    const__136.bindRoot(new core.f__GT__GT_());
    ((Var)const__136)



      
      .setMacro();
    const__140.setMeta((IPersistentMap)const__143);
    const__140.bindRoot(new core.somef__GT_());
    ((Var)const__140)



      
      .setMacro();
    const__144.setMeta((IPersistentMap)const__147);
    const__144.bindRoot(new core.somef__GT__GT_());
    ((Var)const__144)



      
      .setMacro();
    const__148.setMeta((IPersistentMap)const__151);
    const__148.bindRoot(new core.cond__GT__PERCENT_());
    ((Var)const__148)



      
      .setMacro();
    const__152.setMeta((IPersistentMap)const__155);
    const__152.bindRoot(new core.cond__GT__GT__PERCENT_());
    ((Var)const__152)





      
      .setMacro();
    const__156.setMeta((IPersistentMap)const__159);
    const__156.bindRoot(new core.as__GT__PERCENT_());
    ((Var)const__156)



      
      .setMacro();
    const__160.setMeta((IPersistentMap)const__163);
    const__160.bindRoot(new core.let__GT_());
    ((Var)const__160)



      
      .setMacro();
    const__164.setMeta((IPersistentMap)const__167);
    const__164.bindRoot(new core.bind__GT_());
    ((Var)const__164)






      
      .setMacro();
    const__168.setMeta((IPersistentMap)const__171);
    const__168.bindRoot(new core.drop__GT_());
    ((Var)const__168)






      
      .setMacro();
    const__172.setMeta((IPersistentMap)const__175);
    const__172.bindRoot(new core.if_cljs());
    ((Var)const__172)



      
      .setMacro();
    const__176.setMeta((IPersistentMap)const__179);
    const__176.bindRoot(new core.try_catchall());
    ((Var)const__176)











      
      .setMacro();
    const__180.setMeta((IPersistentMap)const__183);
    const__180.bindRoot(new core.error());
    const__184.setMeta((IPersistentMap)const__187);
    const__184.bindRoot(new core.error_QMARK_());
    const__188.setMeta((IPersistentMap)const__191);
    const__188.bindRoot(new core.throwable());
    const__192.setMeta((IPersistentMap)const__195);
    const__192.bindRoot(new core.throw_map());
    const__196.setMeta((IPersistentMap)const__199);
    const__196.bindRoot(new core.catchall());
    ((Var)const__196)



























      
      .setMacro();
    const__200.setMeta((IPersistentMap)const__203);
    const__200.bindRoot(new core.delay_fn());
    ((Var)const__200)




      
      .setMacro();
    const__204.setMeta((IPersistentMap)const__207);
    const__204.bindRoot(new core.parse_int());
    const__208.setMeta((IPersistentMap)const__211);
    const__208.bindRoot(new core.auto_partial());
    ((Var)const__208)














      
      .setMacro();
    const__212.setMeta((IPersistentMap)const__215);
    const__212.bindRoot(new core.defnap());
    ((Var)const__212)






















      
      .setMacro();
    const__216.setMeta((IPersistentMap)const__219);
    const__216.bindRoot(new core.case_QMARK_());
    ((Var)const__216)











      
      .setMacro();
    const__220.setMeta((IPersistentMap)const__222);
    const__220.bindRoot(new core.make_array());
    const__223.setMeta((IPersistentMap)const__226);
    const__223.bindRoot(new core.preserving_reduced());
    const__227.setMeta((IPersistentMap)const__231);
    const__227.bindRoot(new core.contextual_return_result());
    const__232.setMeta((IPersistentMap)const__235);
    const__232.bindRoot(new core.contextual_return_persistent_result());
    const__236.setMeta((IPersistentMap)const__238);
    const__236






















      
      .bindRoot(((IFn)const__239.getRawRoot()).invoke(PersistentVector.EMPTY));
    const__240.setMeta((IPersistentMap)const__243);
    const__240.bindRoot(new core.contextual_transducer());
    const__244.setMeta((IPersistentMap)const__247);
    const__244.bindRoot(new core.contextual_buffering_transducer());
    const__248.setMeta((IPersistentMap)const__251);
    const__248.bindRoot(new core.stateful_transducer());
    const__252.setMeta((IPersistentMap)const__255);
    const__252.bindRoot(new core.buffering_transducer());
    const__256.setMeta((IPersistentMap)const__259);
    const__256.bindRoot(new core.contextual_map());
    const__260.setMeta((IPersistentMap)const__263);
    const__260.bindRoot(new core.contextual_mapcat());
    const__264.setMeta((IPersistentMap)const__267);
    const__264.bindRoot(new core.identity_xform());
    const__268.setMeta((IPersistentMap)const__271);
    const__268.bindRoot(new core.partition_at());
    const__272.setMeta((IPersistentMap)const__275);
    const__272.bindRoot(new core.partition_pairwise());
    const__276.setMeta((IPersistentMap)const__279);
    const__276.bindRoot(new core.mapcat_pairs());
    const__280.setMeta((IPersistentMap)const__283);
    const__280.bindRoot(new core.remove_all_pairs());
    const__284.setMeta((IPersistentMap)const__287);
    const__284.bindRoot(new core.reorder_xform());
    const__288.setMeta((IPersistentMap)const__291);
    const__288.bindRoot(new core.raise());
    const__292.setMeta((IPersistentMap)const__295);
    const__292.bindRoot(new core.no_op());
    const__296.setMeta((IPersistentMap)const__299);
    const__296.bindRoot(new core.take_until());
    const__300.setMeta((IPersistentMap)const__303);
    const__300.bindRoot(new core.reset_return_prev_BANG_());
    const__304.setMeta((IPersistentMap)const__307);
    const__304.bindRoot(new core.swap_return_prev_BANG_());
    const__308.setMeta((IPersistentMap)const__311);
    const__308.bindRoot(new core.swap_return_both_BANG_());
    const__312.setMeta((IPersistentMap)const__315);
    const__312.bindRoot(new core.swap_return_ctx_BANG_());
    const__316.setMeta((IPersistentMap)const__319);
    const__316.bindRoot(new core.add_watch_once());
    const__320.setMeta((IPersistentMap)const__323);
    const__320.bindRoot(new core.update_some());
    const__324.setMeta((IPersistentMap)const__327);
    const__324.bindRoot(new core.range_from());
    const__339.setMeta((IPersistentMap)const__342);
    const__339.bindRoot(new core.with_open());
    ((Var)const__339)

      
      .setMacro();
    const__343.setMeta((IPersistentMap)const__346);
    const__343.bindRoot(new core.vary_ex_data());
    const__347.setMeta((IPersistentMap)const__350);
    const__347.bindRoot(new core.with_rethrow_ctx());
    ((Var)const__347)


















      
      .setMacro();
    const__351.setMeta((IPersistentMap)const__354);
    const__351.bindRoot(new core.descending());
    const__355.setMeta((IPersistentMap)const__358);
    const__355.bindRoot(new core.some_index());
    const__359.setMeta((IPersistentMap)const__362);
    const__359.bindRoot(new core.replace_last());
    const__363.setMeta((IPersistentMap)const__366);
    const__363.bindRoot(new core.update_last());
    const__367.setMeta((IPersistentMap)const__370);
    const__367.bindRoot(new core.last_index_of());
    const__371.setMeta((IPersistentMap)const__374);
    const__371.bindRoot(new core.drop_last_while());
    const__375.setMeta((IPersistentMap)const__378);
    const__375.bindRoot(new core.dissoc_keys_with_nil_values());
    const__379.setMeta((IPersistentMap)const__382);
    const__379.bindRoot(new core.pad());
    const__383.setMeta((IPersistentMap)const__386);
    const__383.bindRoot(new core.memoized_apply());
    const__387.setMeta((IPersistentMap)const__390);
    const__387.bindRoot(new core.call());
    const__391.setMeta((IPersistentMap)const__394);
    const__391.bindRoot(new core.retry_QMARK_());
    const__395.setMeta((IPersistentMap)const__398);
    const__395.bindRoot(new core.with_retries());
    ((Var)const__395)



































































      
      .setMacro();
    const__399.setMeta((IPersistentMap)const__402);
    const__399.bindRoot(new core.duplicates());
    const__403.setMeta((IPersistentMap)const__406);
    const__403.bindRoot(new core.rotate());
    const__407.setMeta((IPersistentMap)const__410);
    const__407.bindRoot(new core.alist__GT_map());
    const__411.setMeta((IPersistentMap)const__414);
    const__411.bindRoot(new core.map_keys());
    const__415.setMeta((IPersistentMap)const__418);
    const__415.bindRoot(new core.map_vals());
    const__419.setMeta((IPersistentMap)const__422);
    const__419.bindRoot(new core.resize_map());
    const__423.setMeta((IPersistentMap)const__426);
    const__423.bindRoot(new core.sliding_resize());
    const__427.setMeta((IPersistentMap)const__431);
    const__427.bindRoot(new core.start_thread());
    const__432.setMeta((IPersistentMap)const__435);
    const__432.bindRoot(new core.loop_until());
    ((Var)const__432)


























































































      
      .setMacro();
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "ginga.core");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("ginga.core", "dissoc-in");
    const__6 = (Keyword)RT.keyword(null, "doc");
    const__12 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m"), Tuple.create(Symbol.intern(null, "k"), Symbol.intern(null, "&"), Symbol.intern(null, "ks"), RT.keyword(null, "as"), Symbol.intern(null, "keys"))) })), RT.keyword(null, "doc"), "Dissociates an entry from a nested associative structure returning a new\n  nested structure. keys is a sequence of keys. Any empty maps that result\n  will not be present in the new structure.", RT.keyword(null, "line"), Integer.valueOf(10), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__13 = (Var)RT.var("ginga.core", "ensure-vector");
    const__16 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "coll")) })), RT.keyword(null, "doc"), "Ensures that the given collection is a vector.\n  Will cast to a vector with vec if it isn't.\n  Useful to optimize the case when an algorithm accepts a coll but\n  needs a vector and happens to be given a vector.", RT.keyword(null, "line"), Integer.valueOf(25), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__17 = (Var)RT.var("ginga.core", "conjv");
    const__20 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "vector-or-nil"), Symbol.intern(null, "item"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "or"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "vector?"), Symbol.intern(null, "vector-or-nil") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(37), RT.keyword(null, "column"), Integer.valueOf(14) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "nil?"), Symbol.intern(null, "vector-or-nil") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(38), RT.keyword(null, "column"), Integer.valueOf(14) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(37), RT.keyword(null, "column"), Integer.valueOf(10) }))) })) })), RT.keyword(null, "doc"), "Like conj but interprets nil as the empty vector.", RT.keyword(null, "line"), Integer.valueOf(33), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__21 = (Var)RT.var("ginga.core", "conjset");
    const__23 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(42), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc", RT.keyword(null, "doc"), "Like conj but interprets nil as the empty set." });
    const__24 = (Var)RT.var("clojure.core", "fnil");
    const__25 = (Var)RT.var("clojure.core", "conj");
    const__26 = (Var)RT.var("clojure.core", "hash-set");
    const__27 = (Var)RT.var("ginga.core", "assoc-pnil");
    const__30 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "key"), Symbol.intern(null, "maybe-val")) })), RT.keyword(null, "doc"), "Like assoc but nil values dissoc (prune) from the map.", RT.keyword(null, "line"), Integer.valueOf(46), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__31 = (Var)RT.var("ginga.core", "update-pnil");
    const__34 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "key"), Symbol.intern(null, "f"), Symbol.intern(null, "&"), Symbol.intern(null, "args")) })), RT.keyword(null, "doc"), "Like update but nil values dissoc (prune) from the map.", RT.keyword(null, "line"), Integer.valueOf(53), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__35 = (Var)RT.var("ginga.core", "update!");
    const__38 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "k"), Symbol.intern(null, "f")), Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "k"), Symbol.intern(null, "f"), Symbol.intern(null, "x")), Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "k"), Symbol.intern(null, "f"), Symbol.intern(null, "x"), Symbol.intern(null, "&"), Symbol.intern(null, "more")) })), RT.keyword(null, "doc"), "Like clojure.core/update but uses assoc! and works with transients.", RT.keyword(null, "line"), Integer.valueOf(58), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__39 = (Var)RT.var("ginga.core", "ensure-entry");
    const__42 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "key"), Symbol.intern(null, "f"), Symbol.intern(null, "&"), Symbol.intern(null, "args")) })), RT.keyword(null, "doc"), "Ensures key is present in m, generating a new value by calling f with\n  the provided args if necessary.", RT.keyword(null, "line"), Integer.valueOf(67), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__43 = (Var)RT.var("ginga.core", "deep-merge");
    const__46 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "a"), Symbol.intern(null, "b"), Symbol.intern(null, "&"), Symbol.intern(null, "args")), Tuple.create(Symbol.intern(null, "a"), Symbol.intern(null, "b")) })), RT.keyword(null, "doc"), "Combines trees of maps and sequences recursively.\n\n  Maps  are merged,  sequential? things  are concatenated  (vectors stay\n  vectors), everything else is replaced.", RT.keyword(null, "line"), Integer.valueOf(73), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__47 = (Var)RT.var("ginga.core", "last-iteration");
    const__50 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "x")) })), RT.keyword(null, "doc"), "Iterates calls to the given function similar to clojure.core/iterate,\n  but instead of a sequence of results, returns the last truthy result.", RT.keyword(null, "line"), Integer.valueOf(88), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__51 = (Var)RT.var("ginga.core", "nth-iteration");
    const__54 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "n"), Symbol.intern(null, "f"), Symbol.intern(null, "x")) })), RT.keyword(null, "doc"), "The same as (-> (iterate f value) (nth n)).", RT.keyword(null, "line"), Integer.valueOf(97), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__55 = (Var)RT.var("ginga.core", "some-iteration");
    const__58 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pred"), Symbol.intern(null, "f"), Symbol.intern(null, "x")) })), RT.keyword(null, "doc"), "Iterates calls to the given function similar to clojure.core/iterate,\n  but instead of a sequence of results, returns the first result for\n  which the given predicate returns true.", RT.keyword(null, "line"), Integer.valueOf(105), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__59 = (Var)RT.var("ginga.core", "unzip");
    const__62 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })), RT.keyword(null, "doc"), "From a map or an association list, return [keys values].\n  Reverse of zip.", RT.keyword(null, "line"), Integer.valueOf(115), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__63 = (Var)RT.var("ginga.core", "zip");
    const__65 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(123), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc", RT.keyword(null, "doc"), "Like zipmap, except returns an association list." });
    const__66 = (Var)RT.var("clojure.core", "partial");
    const__67 = (Var)RT.var("clojure.core", "map");
    const__68 = (Var)RT.var("clojure.core", "vector");
    const__69 = (Var)RT.var("ginga.core", "flatten1");
    const__72 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "coll")) })), RT.keyword(null, "doc"), "Flattens one level of the given coll by concatenating its items.", RT.keyword(null, "line"), Integer.valueOf(127), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__73 = (Var)RT.var("ginga.core", "some-item");
    const__76 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pred?"), Symbol.intern(null, "coll")) })), RT.keyword(null, "doc"), "Like some, except returns the item instead of the test value.", RT.keyword(null, "line"), Integer.valueOf(132), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__77 = (Var)RT.var("ginga.core", "partial-method");
    const__80 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f")), Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "arg1")), Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "arg1"), Symbol.intern(null, "arg2")), Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "arg1"), Symbol.intern(null, "arg2"), Symbol.intern(null, "arg3")), Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "arg1"), Symbol.intern(null, "arg2"), Symbol.intern(null, "arg3"), Symbol.intern(null, "&"), Symbol.intern(null, "more")) })), RT.keyword(null, "doc"), "Like partial, but partially applies the arguments following the\n  first `this` argument.", RT.keyword(null, "line"), Integer.valueOf(137), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__81 = RT.classForName("ginga.core.KwType");
    const__82 = (Var)RT.var("clojure.core", "alter-meta!");
    const__83 = (Var)RT.var("ginga.core", "KwType");
    const__84 = (Var)RT.var("clojure.core", "assoc");
    const__85 = (Var)RT.var("clojure.core", "assert-same-protocol");
    const__86 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "kw-type")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "obj")) })) })) }));
    const__87 = (Var)RT.var("clojure.core", "alter-var-root");
    const__88 = (Var)RT.var("clojure.core", "merge");
    const__92 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "ginga.core.KwType"), RT.keyword(null, "on-interface"), RT.classForName("ginga.core.KwType"), RT.keyword(null, "doc"), "Gets the type of an object as a keyword" });
    const__93 = (Keyword)RT.keyword(null, "sigs");
    const__94 = (AFn)RT.map(new Object[] { RT.keyword(null, "kw-type"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "kw-type")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "obj")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "obj")) })), RT.keyword(null, "doc"), null }) });
    const__95 = (Keyword)RT.keyword(null, "var");
    const__96 = (Keyword)RT.keyword(null, "method-map");
    const__98 = (AFn)RT.map(new Object[] { RT.keyword(null, "kw-type"), RT.keyword(null, "kw-type") });
    const__99 = (Keyword)RT.keyword(null, "method-builders");
  }
  
  public static void __init1() {
    const__100 = (Var)RT.var("clojure.core", "intern");
    const__101 = (Var)RT.var("clojure.core", "*ns*");
    const__102 = (Var)RT.var("clojure.core", "with-meta");
    const__103 = (AFn)((IObj)Symbol.intern(null, "kw-type")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "obj")) })) }));
    const__104 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "kw-type")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "obj")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "obj")) })), RT.keyword(null, "doc"), null });
    const__105 = (Keyword)RT.keyword(null, "protocol");
    const__106 = (Var)RT.var("clojure.core", "-reset-methods");
    const__107 = (AFn)Symbol.intern(null, "KwType");
    const__108 = (Var)RT.var("ginga.core", "queue");
    const__111 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(), Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "items")) })), RT.keyword(null, "doc"), "Creates a new queue containing the given arguments.", RT.keyword(null, "line"), Integer.valueOf(154), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__112 = (Var)RT.var("ginga.core", "queue?");
    const__115 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "value")) })), RT.keyword(null, "doc"), "Tests whether the given argument is a queue.", RT.keyword(null, "line"), Integer.valueOf(161), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__116 = (Var)RT.var("ginga.core", "regexp?");
    const__119 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "r")) })), RT.keyword(null, "line"), Integer.valueOf(168), RT.keyword(null, "column"), Integer.valueOf(10), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__120 = (Var)RT.var("ginga.core", "lookup-sentinel");
    const__122 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(173), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__123 = (Var)RT.var("clojure.core", "atom");
    const__124 = (Var)RT.var("ginga.core", "get-m");
    const__127 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "map"), Symbol.intern(null, "key"), Symbol.intern(null, "not-found")) })), RT.keyword(null, "doc"), "Like core/get, but delays the evaluation of the not-found argument.", RT.keyword(null, "line"), Integer.valueOf(175), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__128 = (Var)RT.var("ginga.core", "defrecord+");
    const__131 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "name"), Symbol.intern(null, "field-spec"), Symbol.intern(null, "&"), Symbol.intern(null, "etc")) })), RT.keyword(null, "doc"), "Like defrecord, but defs a default constructor that instantiates the\n  record with default values.\n\n  (defrecord+ MyType [a {b 'b} {c 'c})\n\n  (my-type)\n  -> {:a nil :b 'b :c 'c}\n\n  (my-type {:a 'A :b 'B})\n  -> {:a 'A :b 'B :c 'c}", RT.keyword(null, "line"), Integer.valueOf(183), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__132 = (Var)RT.var("ginga.core", "f->");
    const__135 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "forms")) })), RT.keyword(null, "doc"), "Sugar for #(-> % ...).", RT.keyword(null, "line"), Integer.valueOf(216), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__136 = (Var)RT.var("ginga.core", "f->>");
    const__139 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "forms")) })), RT.keyword(null, "doc"), "Sugar for #(->> % ...).", RT.keyword(null, "line"), Integer.valueOf(221), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__140 = (Var)RT.var("ginga.core", "somef->");
    const__143 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "forms")) })), RT.keyword(null, "doc"), "Sugar for #(some-> % ...).", RT.keyword(null, "line"), Integer.valueOf(226), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__144 = (Var)RT.var("ginga.core", "somef->>");
    const__147 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "forms")) })), RT.keyword(null, "doc"), "Sugar for #(some->> % ...).", RT.keyword(null, "line"), Integer.valueOf(231), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__148 = (Var)RT.var("ginga.core", "cond->%");
    const__151 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "expr"), Symbol.intern(null, "&"), Symbol.intern(null, "forms")) })), RT.keyword(null, "doc"), "Like cond->, except binds the value to % when evaluating the condition.", RT.keyword(null, "line"), Integer.valueOf(236), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__152 = (Var)RT.var("ginga.core", "cond->>%");
    const__155 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "expr"), Symbol.intern(null, "&"), Symbol.intern(null, "forms")) })), RT.keyword(null, "doc"), "Like cond->%, but threads the last position.", RT.keyword(null, "line"), Integer.valueOf(243), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__156 = (Var)RT.var("ginga.core", "as->%");
    const__159 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "expr"), Symbol.intern(null, "&"), Symbol.intern(null, "forms")) })), RT.keyword(null, "doc"), "Sugar for (as-> % ...).", RT.keyword(null, "line"), Integer.valueOf(248), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__160 = (Var)RT.var("ginga.core", "let->");
    const__163 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "expr"), Symbol.intern(null, "bindings"), Symbol.intern(null, "&"), Symbol.intern(null, "clauses")) })), RT.keyword(null, "doc"), "Like -> but the second argument is a vector of bindings available in\n  all clauses.", RT.keyword(null, "line"), Integer.valueOf(253), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__164 = (Var)RT.var("ginga.core", "bind->");
    const__167 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "val"), Symbol.intern(null, "binding"), Symbol.intern(null, "&"), Symbol.intern(null, "forms")) })), RT.keyword(null, "doc"), "Like as-> but only binds once, has an implicit (-> val ...) around\n  the body and supports destructuring.", RT.keyword(null, "line"), Integer.valueOf(261), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__168 = (Var)RT.var("ginga.core", "drop->");
    const__171 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "val-ignored"), Symbol.intern(null, "&"), Symbol.intern(null, "forms")) })), RT.keyword(null, "doc"), "Drops the threaded-in value and continues with the first form.", RT.keyword(null, "line"), Integer.valueOf(269), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__172 = (Var)RT.var("ginga.core", "if-cljs");
    const__175 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "then"), Symbol.intern(null, "else")) })), RT.keyword(null, "doc"), "Return then in cljs context and else in clj contex.\n\n  To be used in other macros as part of the expansion because a macro\n  calling this directly is always executed in clj context.\n\n  correct:   (defmacro [...] `(if-cljs (...)))\n  incorrect: (defmacro [...] (if-cljs `(...))\n\n  See prismatics schema.macros/if-cljs.", RT.keyword(null, "line"), Integer.valueOf(274), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__176 = (Var)RT.var("ginga.core", "try-catchall");
    const__179 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "doc"), "See prismatic schema.macros/try-catchall.", RT.keyword(null, "line"), Integer.valueOf(287), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__180 = (Var)RT.var("ginga.core", "error");
    const__183 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "value")) })), RT.keyword(null, "doc"), "Puts an error into a box. Use deref to get it out again.", RT.keyword(null, "line"), Integer.valueOf(316), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__184 = (Var)RT.var("ginga.core", "error?");
    const__187 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "value")) })), RT.keyword(null, "doc"), "Tests whether the given value is a boxed error.", RT.keyword(null, "line"), Integer.valueOf(321), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__188 = (Var)RT.var("ginga.core", "throwable");
    const__191 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "message"), Symbol.intern(null, "cause")), RT.keyword(null, "as"), Symbol.intern(null, "data") })) })), RT.keyword(null, "doc"), "Turns a map into a throwable", RT.keyword(null, "line"), Integer.valueOf(326), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__192 = (Var)RT.var("ginga.core", "throw-map");
    const__195 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "data")) })), RT.keyword(null, "doc"), "Like throw, but calls ginga.core/throwable on the argument.", RT.keyword(null, "line"), Integer.valueOf(333), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__196 = (Var)RT.var("ginga.core", "catchall");
    const__199 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "doc"), "Evalutes body. If body causes an exception, catches it, and puts it\n   in a box.", RT.keyword(null, "line"), Integer.valueOf(338), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
  }
  
  public static void __init2() {
    const__200 = (Var)RT.var("ginga.core", "delay-fn");
    const__203 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "doc"), "Like delay, but returns an IFun instead of an IRef. Wraps a\n   computationally expensive expression that evalutes to a function with\n   another function which evaluates the expression the first time it is\n   called and caches it. Useful to optimize cljs startup time.", RT.keyword(null, "line"), Integer.valueOf(344), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__204 = (Var)RT.var("ginga.core", "parse-int");
    const__207 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "numeric-str")) })), RT.keyword(null, "doc"), "Parses the given string into an integer.\n   May throw or return NaN if a parsing error occurs.", RT.keyword(null, "line"), Integer.valueOf(353), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__208 = (Var)RT.var("ginga.core", "auto-partial");
    const__211 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "fdecl")) })), RT.keyword(null, "doc"), "Wraps a non-variadic fn declaration and adds partial arities.\n   (auto-partial (fn myfn [a b c] ...))\n   ->\n   (fn myfn ([a]   (fn [b c] (myfn a b c)))\n            ([a b] (fn [c]   (myfn a b c)))\n            ([a b c] ...))", RT.keyword(null, "line"), Integer.valueOf(360), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__212 = (Var)RT.var("ginga.core", "defnap");
    const__215 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "decl")) })), RT.keyword(null, "doc"), "Sugar for (def name (auto-partial (fn [...] ...))).", RT.keyword(null, "line"), Integer.valueOf(384), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__216 = (Var)RT.var("ginga.core", "case?");
    const__219 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "cases"), Symbol.intern(null, "expr")) })), RT.keyword(null, "doc"), "Like (contains? #{...} value) but uses clojure.core/case for\n  speed. Caveats of clojure.core/case apply.", RT.keyword(null, "line"), Integer.valueOf(397), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__220 = (Var)RT.var("ginga.core", "make-array");
    const__222 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(403), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__223 = (Var)RT.var("ginga.core", "preserving-reduced");
    const__226 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "rf")) })), RT.keyword(null, "line"), Integer.valueOf(408), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__227 = (Var)RT.var("ginga.core", "contextual-return-result");
    const__231 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "result")) })), RT.keyword(null, "line"), Integer.valueOf(415), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__232 = (Var)RT.var("ginga.core", "contextual-return-persistent-result");
    const__235 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "state"), Symbol.intern(null, "result")) })), RT.keyword(null, "line"), Integer.valueOf(418), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__236 = (Var)RT.var("ginga.core", "constantly-empty-vector");
    const__238 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(421), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__239 = (Var)RT.var("clojure.core", "constantly");
    const__240 = (Var)RT.var("ginga.core", "contextual-transducer");
    const__243 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "init-f"), Symbol.intern(null, "finalize-f"), Symbol.intern(null, "step-f")) })), RT.keyword(null, "doc"), "Creates a stateful transducer from three functions:\n\n  ()             -> (init-state)      ;; init-f\n  (state result) -> *                 ;; finalize-f\n  (state input)  -> (new-state input) ;; step-f\n\n  Caveat emptor: if finalize-f returns something other than it's result\n  argument, the transducer will only be compatible with transduce, but\n  not other transducer applying functions (into, sequence) that make\n  assumptions about the return value of the transducer.", RT.keyword(null, "line"), Integer.valueOf(423), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__244 = (Var)RT.var("ginga.core", "contextual-buffering-transducer");
    const__247 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "init-f"), Symbol.intern(null, "finalize-f"), Symbol.intern(null, "remaining-f"), Symbol.intern(null, "step-f")) })), RT.keyword(null, "doc"), "Similar to contextual-transducer, but allows the buffering/mapcatting\n  of inputs:\n\n  ()             -> (init-state)       ;; init-f\n  (state result) -> *                  ;; finalize-f\n  (state)        -> (remaining-inputs) ;; remaining-f\n  (state input)  -> (new-state inputs) ;; step-f\n\n  Same caveat emptor as in contextual-transducer applied.", RT.keyword(null, "line"), Integer.valueOf(448), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__248 = (Var)RT.var("ginga.core", "stateful-transducer");
    const__251 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "step-f"), Symbol.intern(null, "ctx")) })), RT.keyword(null, "doc"), "Like contextual-transducer but simplified.", RT.keyword(null, "line"), Integer.valueOf(482), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__252 = (Var)RT.var("ginga.core", "buffering-transducer");
    const__255 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "step-f"), Symbol.intern(null, "remaining-f"), Symbol.intern(null, "ctx")) })), RT.keyword(null, "doc"), "Like contextual-buffering-transducer but simplified.", RT.keyword(null, "line"), Integer.valueOf(489), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__256 = (Var)RT.var("ginga.core", "contextual-map");
    const__259 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "ctx"), Symbol.intern(null, "coll")) })), RT.keyword(null, "doc"), "Like map, but maintains a first context variable similar to reduce.", RT.keyword(null, "line"), Integer.valueOf(496), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__260 = (Var)RT.var("ginga.core", "contextual-mapcat");
    const__263 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "ctx"), Symbol.intern(null, "coll")) })), RT.keyword(null, "doc"), "Like mapcat, but maintains a first context variable similar to reduce.", RT.keyword(null, "line"), Integer.valueOf(504), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__264 = (Var)RT.var("ginga.core", "identity-xform");
    const__267 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "rf")) })), RT.keyword(null, "line"), Integer.valueOf(513), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__268 = (Var)RT.var("ginga.core", "partition-at");
    const__271 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pred?")) })), RT.keyword(null, "doc"), "Similar to partition-by, except starts a new partition when pred?\n  returns true.", RT.keyword(null, "line"), Integer.valueOf(519), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__272 = (Var)RT.var("ginga.core", "partition-pairwise");
    const__275 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pair?")) })), RT.keyword(null, "doc"), "Returns a transducer, similar to partition-by, but the predicate\n   takes two adjacent items in the collection and starts a new partition\n   when it returns false.", RT.keyword(null, "line"), Integer.valueOf(532), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__276 = (Var)RT.var("ginga.core", "mapcat-pairs");
    const__279 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "s")) })), RT.keyword(null, "doc"), "Like mapcat, but f will be called with two values, the previous\n  value, which is either the first value in s or the last value returned\n  by f, and the current value. The return value of f will replace the\n  previous value and the current value in the result sequence.", RT.keyword(null, "line"), Integer.valueOf(546), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__280 = (Var)RT.var("ginga.core", "remove-all-pairs");
    const__283 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pair?"), Symbol.intern(null, "s")) })), RT.keyword(null, "doc"), "Removes any two consecutive items for which pair? returns true. In a\n  sequence where b and c are pairs and a and d are pairs, will remove\n  both b and c and a and d. The result will not have any two consecutive\n  items for which pair? returns true.\n\n  Different from dedupe, as dedupe will only remove the second of a\n  matched pair not both.", RT.keyword(null, "line"), Integer.valueOf(561), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__284 = (Var)RT.var("ginga.core", "reorder-xform");
    const__287 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "key-fn"), Symbol.intern(null, "follows?"), Symbol.intern(null, "init")), Tuple.create(Symbol.intern(null, "comparator"), Symbol.intern(null, "key-fn"), Symbol.intern(null, "follows?"), Symbol.intern(null, "init")) })), RT.keyword(null, "doc"), "Creates a reordering transducer.\n\n  (key-fn value) - is used to derive keys from values,\n\n  (follows? key-precedes key-follows) - used to determine whether\n  two keys exactly precede/follow each other,\n\n  init - is passed to follows? in place of the first key of the\n  sequence.\n\n  If the stream contains duplicate keys, some duplicate values may be\n  discarded or otherwise prevent all remaining values in the sequence\n  from being processed.", RT.keyword(null, "line"), Integer.valueOf(572), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__288 = (Var)RT.var("ginga.core", "raise");
    const__291 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "print-args")) })), RT.keyword(null, "line"), Integer.valueOf(606), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__292 = (Var)RT.var("ginga.core", "no-op");
    const__295 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "_")) })), RT.keyword(null, "line"), Integer.valueOf(609), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__296 = (Var)RT.var("ginga.core", "take-until");
    const__299 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pred"), Symbol.intern(null, "coll")) })), RT.keyword(null, "line"), Integer.valueOf(613), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
  }
  
  public static void __init3() {
    const__300 = (Var)RT.var("ginga.core", "reset-return-prev!");
    const__303 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "atom"), Symbol.intern(null, "new-val")) })), RT.keyword(null, "doc"), "Like clojure.core/reset!, but returns the old value.", RT.keyword(null, "line"), Integer.valueOf(620), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__304 = (Var)RT.var("ginga.core", "swap-return-prev!");
    const__307 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "atom"), Symbol.intern(null, "f"), Symbol.intern(null, "&"), Symbol.intern(null, "args")) })), RT.keyword(null, "doc"), "Like clojure.core/swap!, but returns the old value.", RT.keyword(null, "line"), Integer.valueOf(629), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__308 = (Var)RT.var("ginga.core", "swap-return-both!");
    const__311 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "atom"), Symbol.intern(null, "f"), Symbol.intern(null, "&"), Symbol.intern(null, "args")) })), RT.keyword(null, "doc"), "Like clojure.core/swap!, but returns both old and new values.", RT.keyword(null, "line"), Integer.valueOf(638), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__312 = (Var)RT.var("ginga.core", "swap-return-ctx!");
    const__315 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "atom"), Symbol.intern(null, "f"), Symbol.intern(null, "&"), Symbol.intern(null, "args")) })), RT.keyword(null, "doc"), "Like clojure.core/swap!, but returns true only if the value in the\n  atom was changed by this call.", RT.keyword(null, "line"), Integer.valueOf(648), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__316 = (Var)RT.var("ginga.core", "add-watch-once");
    const__319 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ref"), Symbol.intern(null, "key"), Symbol.intern(null, "f")) })), RT.keyword(null, "doc"), "Like add-watch, but will invoke f only once the next time the atom\n  changes.", RT.keyword(null, "line"), Integer.valueOf(659), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__320 = (Var)RT.var("ginga.core", "update-some");
    const__323 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "k"), Symbol.intern(null, "f"), Symbol.intern(null, "&"), Symbol.intern(null, "args")) })), RT.keyword(null, "doc"), "Like update, but only updates the value if it exists and is non-nil.", RT.keyword(null, "line"), Integer.valueOf(669), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__324 = (Var)RT.var("ginga.core", "range-from");
    const__327 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "start")), Tuple.create(Symbol.intern(null, "start"), Symbol.intern(null, "step")) })), RT.keyword(null, "doc"), "Like range, but only takes a start value and no end value.", RT.keyword(null, "line"), Integer.valueOf(676), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__328 = RT.classForName("ginga.core.Closable");
    const__329 = (Var)RT.var("ginga.core", "Closable");
    const__330 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "close")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Closes a scoped resource.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })) }));
    const__332 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "ginga.core.Closable"), RT.keyword(null, "on-interface"), RT.classForName("ginga.core.Closable") });
    const__333 = (AFn)RT.map(new Object[] { RT.keyword(null, "close"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "close")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Closes a scoped resource.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })), RT.keyword(null, "doc"), "Closes a scoped resource." }) });
    const__335 = (AFn)RT.map(new Object[] { RT.keyword(null, "close"), RT.keyword(null, "close") });
    const__336 = (AFn)((IObj)Symbol.intern(null, "close")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Closes a scoped resource.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) }));
    const__337 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "close")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Closes a scoped resource.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })), RT.keyword(null, "doc"), "Closes a scoped resource." });
    const__338 = (AFn)Symbol.intern(null, "Closable");
    const__339 = (Var)RT.var("ginga.core", "with-open");
    const__342 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "bindings"), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "doc"), "Like clojure.core/with-open, but works with objects supporting either\n  java.io.Closeable or the ginga.core/Closable protocol.", RT.keyword(null, "line"), Integer.valueOf(689), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__343 = (Var)RT.var("ginga.core", "vary-ex-data");
    const__346 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "e")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Throwable") })), Symbol.intern(null, "fn"), Symbol.intern(null, "&"), Symbol.intern(null, "args")) })), RT.keyword(null, "line"), Integer.valueOf(704), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__347 = (Var)RT.var("ginga.core", "with-rethrow-ctx");
    const__350 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ctx"), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "line"), Integer.valueOf(709), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__351 = (Var)RT.var("ginga.core", "descending");
    const__354 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "a"), Symbol.intern(null, "b")) })), RT.keyword(null, "line"), Integer.valueOf(714), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__355 = (Var)RT.var("ginga.core", "some-index");
    const__358 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pred?"), Symbol.intern(null, "coll")) })), RT.keyword(null, "line"), Integer.valueOf(717), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__359 = (Var)RT.var("ginga.core", "replace-last");
    const__362 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "v"), Symbol.intern(null, "new")) })), RT.keyword(null, "line"), Integer.valueOf(720), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__363 = (Var)RT.var("ginga.core", "update-last");
    const__366 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "v"), Symbol.intern(null, "f")), Tuple.create(Symbol.intern(null, "v"), Symbol.intern(null, "f"), Symbol.intern(null, "a")), Tuple.create(Symbol.intern(null, "v"), Symbol.intern(null, "f"), Symbol.intern(null, "a"), Symbol.intern(null, "&"), Symbol.intern(null, "etc")) })), RT.keyword(null, "line"), Integer.valueOf(723), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__367 = (Var)RT.var("ginga.core", "last-index-of");
    const__370 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pred"), Symbol.intern(null, "v")) })), RT.keyword(null, "line"), Integer.valueOf(728), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__371 = (Var)RT.var("ginga.core", "drop-last-while");
    const__374 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pred"), Symbol.intern(null, "s")) })), RT.keyword(null, "line"), Integer.valueOf(735), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__375 = (Var)RT.var("ginga.core", "dissoc-keys-with-nil-values");
    const__378 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "a-map")) })), RT.keyword(null, "line"), Integer.valueOf(742), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__379 = (Var)RT.var("ginga.core", "pad");
    const__382 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "value"), Symbol.intern(null, "cnt"), Symbol.intern(null, "s")) })), RT.keyword(null, "line"), Integer.valueOf(747), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__383 = (Var)RT.var("ginga.core", "memoized-apply");
    const__386 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "cache"), Symbol.intern(null, "f"), Symbol.intern(null, "&"), Symbol.intern(null, "args")) })), RT.keyword(null, "doc"), "Similar in logic to clojure.core/memoize but exposes the cache.", RT.keyword(null, "line"), Integer.valueOf(755), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__387 = (Var)RT.var("ginga.core", "call");
    const__390 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f")) })), RT.keyword(null, "doc"), "Calls its argument. Like (f).", RT.keyword(null, "line"), Integer.valueOf(764), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__391 = (Var)RT.var("ginga.core", "retry?");
    const__394 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { Symbol.intern(null, "retry-error-condition"), RT.keyword(null, "when"), Symbol.intern(null, "retry-count"), RT.keyword(null, "count"), RT.keyword(null, "as"), Symbol.intern(null, "retry-opts") }), Symbol.intern(null, "retried"), Symbol.intern(null, "ex")) })), RT.keyword(null, "line"), Integer.valueOf(769), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__395 = (Var)RT.var("ginga.core", "with-retries");
    const__398 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "retry-opts"), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "doc"), "Given a map of retry options, retry the body if it produces an exception.\n\n  (with-retries {:when #(-> % ex-data :custom-property)\n                 :count 10}\n   ..)", RT.keyword(null, "line"), Integer.valueOf(778), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__399 = (Var)RT.var("ginga.core", "duplicates");
  }
  
  public static void __init4() {
    const__402 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "coll")) })), RT.keyword(null, "doc"), "Returns a sequence of duplicates in coll.", RT.keyword(null, "line"), Integer.valueOf(797), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__403 = (Var)RT.var("ginga.core", "rotate");
    const__406 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "n"), Symbol.intern(null, "coll")) })), RT.keyword(null, "doc"), "Rotates coll by n\n\n    (rotate 2 [1 2 3]) -> [3 1 2]\n\n  If n is greater than count of coll, returns a sequence of the values\n  in coll (unrotated).", RT.keyword(null, "line"), Integer.valueOf(804), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__407 = (Var)RT.var("ginga.core", "alist->map");
    const__410 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "alist")) })), RT.keyword(null, "doc"), "Turns an association list into a map with multi-valued values,\n  with the order of the values having the same order as in the\n  alist.\n\n    (alist->map [[:a 1] [:b 2] [:a 3]])\n    -> {:a [1 3] :b [2]}\n  ", RT.keyword(null, "line"), Integer.valueOf(815), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__411 = (Var)RT.var("ginga.core", "map-keys");
    const__414 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "m")) })), RT.keyword(null, "line"), Integer.valueOf(830), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__415 = (Var)RT.var("ginga.core", "map-vals");
    const__418 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "m")) })), RT.keyword(null, "line"), Integer.valueOf(837), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__419 = (Var)RT.var("ginga.core", "resize-map");
    const__422 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "max-size"), Symbol.intern(null, "m")) })), RT.keyword(null, "doc"), "Given a max-size, will prune the given map by dissocing the first n\n  keys where n is the number of entries in the map that exceed\n  max-size.", RT.keyword(null, "line"), Integer.valueOf(844), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__423 = (Var)RT.var("ginga.core", "sliding-resize");
    const__426 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "cnt"), Symbol.intern(null, "v")), ((IObj)Tuple.create(Symbol.intern(null, "maintain-cnt"), Symbol.intern(null, "resize-cnt"), Symbol.intern(null, "v"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "<="), Symbol.intern(null, "maintain-cnt"), Symbol.intern(null, "resize-cnt") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(860), RT.keyword(null, "column"), Integer.valueOf(11) }))) })) })), RT.keyword(null, "doc"), "Poor man's deque", RT.keyword(null, "line"), Integer.valueOf(855), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__427 = (Var)RT.var("ginga.core", "start-thread");
    const__431 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f")) })), RT.keyword(null, "line"), Integer.valueOf(867), RT.keyword(null, "column"), Integer.valueOf(4), RT.keyword(null, "file"), "ginga/core.cljc" });
    const__432 = (Var)RT.var("ginga.core", "loop-until");
    const__435 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pred?"), Symbol.intern(null, "bindings"), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "doc"), "Does a loop-recur until the given predicate returns true for the\n  value returned by body. Returns the value.", RT.keyword(null, "line"), Integer.valueOf(870), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/core.cljc" });
  }
  
  static  {
    __init0();
    __init1();
    __init2();
    __init3();
    __init4();
    Compiler.pushNSandLoader(RT.classForName("ginga.core__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
