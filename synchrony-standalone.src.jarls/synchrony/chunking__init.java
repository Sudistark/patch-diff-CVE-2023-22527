package synchrony;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.Numbers;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class chunking__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__11;
  
  public static final Var const__12;
  
  public static final AFn const__15;
  
  public static final Var const__16;
  
  public static final AFn const__19;
  
  public static final Var const__20;
  
  public static final AFn const__22;
  
  public static final Var const__23;
  
  public static final AFn const__26;
  
  public static final Var const__27;
  
  public static final AFn const__30;
  
  public static final Var const__31;
  
  public static final AFn const__34;
  
  public static final Var const__35;
  
  public static final AFn const__38;
  
  public static final Var const__39;
  
  public static final AFn const__42;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new chunking.fn__38137());
    const__3.setMeta((IPersistentMap)const__11);
    const__3.bindRoot(new chunking.chunked_data_QMARK_());
    const__12.setMeta((IPersistentMap)const__15);
    const__12.bindRoot(new chunking.split_bytes());
    const__16.setMeta((IPersistentMap)const__19);
    const__16.bindRoot(new chunking.join_bytes());
    const__20.setMeta((IPersistentMap)const__22);
    const__20
























      
      .bindRoot(Numbers.num(Long.MAX_VALUE));
    const__23.setMeta((IPersistentMap)const__26);
    const__23.bindRoot(new chunking.chunkit());
    const__27.setMeta((IPersistentMap)const__30);
    const__27.bindRoot(new chunking.unchunk());
    const__31.setMeta((IPersistentMap)const__34);
    const__31.bindRoot(new chunking.chunk_key());
    const__35.setMeta((IPersistentMap)const__38);
    const__35.bindRoot(new chunking.put_chunks_BANG_());
    const__39.setMeta((IPersistentMap)const__42);
    const__39.bindRoot(new chunking.get_chunks_by_key_BANG_());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "synchrony.chunking");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("synchrony.chunking", "chunked-data?");
    const__11 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "value")) })), RT.keyword(null, "line"), Integer.valueOf(10), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/chunking.clj" });
    const__12 = (Var)RT.var("synchrony.chunking", "split-bytes");
    const__15 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "n"), ((IObj)Symbol.intern(null, "bytes")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "bytes") }))) })), RT.keyword(null, "line"), Integer.valueOf(13), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/chunking.clj" });
    const__16 = (Var)RT.var("synchrony.chunking", "join-bytes");
    const__19 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "bytes-coll")) })), RT.keyword(null, "line"), Integer.valueOf(23), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/chunking.clj" });
    const__20 = (Var)RT.var("synchrony.chunking", "default-chunk-size");
    const__22 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(34), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/chunking.clj" });
    const__23 = (Var)RT.var("synchrony.chunking", "chunkit");
    const__26 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "chunk-size")), RT.keyword(null, "or"), RT.map(new Object[] { Symbol.intern(null, "chunk-size"), Symbol.intern(null, "default-chunk-size") }), RT.keyword(null, "as"), Symbol.intern(null, "chunking-opts") }), Symbol.intern(null, "chunk-key"), Symbol.intern(null, "data")) })), RT.keyword(null, "line"), Integer.valueOf(36), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/chunking.clj" });
    const__27 = (Var)RT.var("synchrony.chunking", "unchunk");
    const__30 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "chunked-data"), Symbol.intern(null, "chunks")) })), RT.keyword(null, "line"), Integer.valueOf(48), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/chunking.clj" });
    const__31 = (Var)RT.var("synchrony.chunking", "chunk-key");
    const__34 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "uid"), Symbol.intern(null, "index")) })), RT.keyword(null, "line"), Integer.valueOf(56), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/chunking.clj" });
    const__35 = (Var)RT.var("synchrony.chunking", "put-chunks!");
    const__38 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "store"), Symbol.intern(null, "parallelism")), RT.keyword(null, "or"), RT.map(new Object[] { Symbol.intern(null, "parallelism"), Long.valueOf(1L) }), RT.keyword(null, "as"), Symbol.intern(null, "chunking-opts") }), Symbol.intern(null, "key"), Symbol.intern(null, "chunks")) })), RT.keyword(null, "line"), Integer.valueOf(59), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/chunking.clj" });
    const__39 = (Var)RT.var("synchrony.chunking", "get-chunks-by-key!");
    const__42 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "store"), Symbol.intern(null, "parallelism")), RT.keyword(null, "or"), RT.map(new Object[] { Symbol.intern(null, "parallelism"), Long.valueOf(1L) }), RT.keyword(null, "as"), Symbol.intern(null, "chunking-opts") }), Symbol.intern(null, "chunk-key-count-datas")) })), RT.keyword(null, "line"), Integer.valueOf(68), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/chunking.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("synchrony.chunking__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
