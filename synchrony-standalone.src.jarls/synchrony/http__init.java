package synchrony;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IPersistentMap;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;
import java.util.regex.Pattern;

public class http__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final Object const__4;
  
  public static final Var const__5;
  
  public static final Keyword const__6;
  
  public static final Object const__7;
  
  public static final Var const__8;
  
  public static final AFn const__16;
  
  public static final Var const__17;
  
  public static final AFn const__20;
  
  public static final Var const__21;
  
  public static final AFn const__24;
  
  public static final Var const__25;
  
  public static final AFn const__28;
  
  public static final Var const__29;
  
  public static final AFn const__32;
  
  public static final Var const__33;
  
  public static final AFn const__36;
  
  public static final Var const__37;
  
  public static final AFn const__40;
  
  public static final Var const__41;
  
  public static final AFn const__44;
  
  public static final Var const__45;
  
  public static final AFn const__47;
  
  public static final Var const__48;
  
  public static final Var const__49;
  
  public static final Var const__50;
  
  public static final AFn const__53;
  
  public static final Var const__54;
  
  public static final AFn const__57;
  
  public static final Var const__58;
  
  public static final AFn const__61;
  
  public static final Var const__62;
  
  public static final AFn const__65;
  
  public static final Object const__66;
  
  public static final Var const__67;
  
  public static final AFn const__70;
  
  public static final Var const__71;
  
  public static final AFn const__73;
  
  public static final Var const__74;
  
  public static final AFn const__77;
  
  public static final Var const__78;
  
  public static final AFn const__81;
  
  public static final Var const__82;
  
  public static final AFn const__85;
  
  public static final Var const__86;
  
  public static final AFn const__89;
  
  public static final Var const__90;
  
  public static final AFn const__93;
  
  public static final Var const__94;
  
  public static final AFn const__97;
  
  public static final Var const__98;
  
  public static final AFn const__101;
  
  public static final Var const__102;
  
  public static final AFn const__105;
  
  public static final Var const__106;
  
  public static final AFn const__109;
  
  public static final Var const__110;
  
  public static final AFn const__113;
  
  public static final Var const__114;
  
  public static final AFn const__117;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new http.fn__63392());
    const__8.setMeta((IPersistentMap)const__16);
    const__8.bindRoot(new http.auth_tokens());
    const__17.setMeta((IPersistentMap)const__20);
    const__17.bindRoot(new http.log_secret_endpoint_not_secured());
    const__21.setMeta((IPersistentMap)const__24);
    const__21.bindRoot(new http.content_type_from_extension());
    const__25.setMeta((IPersistentMap)const__28);
    const__25.bindRoot(new http.read_resource());
    const__29.setMeta((IPersistentMap)const__32);
    const__29.bindRoot(new http.sign_jwt_handler());
    const__33.setMeta((IPersistentMap)const__36);
    const__33.bindRoot(new http.wrap_auth_token());
    const__37.setMeta((IPersistentMap)const__40);
    const__37.bindRoot(new http.auth_token_wrapper());
    const__41.setMeta((IPersistentMap)const__44);
    const__41.bindRoot(new http.heartbeat_handler());
    const__45.setMeta((IPersistentMap)const__47);
    const__45









































      
      .bindRoot(((IFn)const__48.getRawRoot()).invoke("/", const__49.getRawRoot(), "/deepcheck"));
    const__50.setMeta((IPersistentMap)const__53);
    const__50.bindRoot(new http.deepcheck_handler());
    const__54.setMeta((IPersistentMap)const__57);
    const__54.bindRoot(new http.entity_response_body());
    const__58.setMeta((IPersistentMap)const__61);
    const__58.bindRoot(new http.publish_handler());
    const__62.setMeta((IPersistentMap)const__65);
    const__62.bindRoot(const__66);
    const__67.setMeta((IPersistentMap)const__70);
    const__67.bindRoot(new http.valid_path_QMARK_());
    const__71.setMeta((IPersistentMap)const__73);
    const__71.bindRoot("public");
    const__74.setMeta((IPersistentMap)const__77);
    const__74.bindRoot(new http.resources_handler());
    const__78.setMeta((IPersistentMap)const__81);
    const__78.bindRoot(new http.internal_server_error_handler());
    const__82.setMeta((IPersistentMap)const__85);
    const__82.bindRoot(new http.errorlog_handler());
    const__86.setMeta((IPersistentMap)const__89);
    const__86.bindRoot(new http.match_ip());
    const__90.setMeta((IPersistentMap)const__93);
    const__90.bindRoot(new http.secret_handler());
    const__94.setMeta((IPersistentMap)const__97);
    const__94.bindRoot(new http.jwt_key_handler());
    const__98.setMeta((IPersistentMap)const__101);
    const__98.bindRoot(new http.api_routes());
    const__102.setMeta((IPersistentMap)const__105);
    const__102.bindRoot(new http.static_resource_whitelisted_QMARK_());
    const__106.setMeta((IPersistentMap)const__109);
    const__106.bindRoot(new http.site_routes());
    const__110.setMeta((IPersistentMap)const__113);
    const__110.bindRoot(new http.wrap_context_path());
    const__114.setMeta((IPersistentMap)const__117);
    const__114.bindRoot(new http.make_routes());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "synchrony.http");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("clojure.core", "extend");
    const__4 = RT.classForName("clojure.core.async.impl.channels.ManyToManyChannel");
    const__5 = (Var)RT.var("compojure.response", "Renderable");
    const__6 = (Keyword)RT.keyword(null, "render");
    const__7 = RT.classForName("clojure.lang.IDeref");
    const__8 = (Var)RT.var("synchrony.http", "auth-tokens");
    const__16 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(69), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/http.clj" });
    const__17 = (Var)RT.var("synchrony.http", "log-secret-endpoint-not-secured");
    const__20 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(77), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/http.clj" });
    const__21 = (Var)RT.var("synchrony.http", "content-type-from-extension");
    const__24 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "uri")) })), RT.keyword(null, "line"), Integer.valueOf(84), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/http.clj" });
    const__25 = (Var)RT.var("synchrony.http", "read-resource");
    const__28 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "path")) })), RT.keyword(null, "line"), Integer.valueOf(93), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/http.clj" });
    const__29 = (Var)RT.var("synchrony.http", "sign-jwt-handler");
    const__32 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "request")) })), RT.keyword(null, "line"), Integer.valueOf(99), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/http.clj" });
    const__33 = (Var)RT.var("synchrony.http", "wrap-auth-token");
    const__36 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "handler-fn")) })), RT.keyword(null, "line"), Integer.valueOf(106), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/http.clj" });
    const__37 = (Var)RT.var("synchrony.http", "auth-token-wrapper");
    const__40 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "client-response"), Symbol.intern(null, "handler-fn"), Symbol.intern(null, "&"), Symbol.intern(null, "params")) })), RT.keyword(null, "line"), Integer.valueOf(114), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/http.clj" });
    const__41 = (Var)RT.var("synchrony.http", "heartbeat-handler");
    const__44 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })), RT.keyword(null, "line"), Integer.valueOf(121), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/http.clj" });
    const__45 = (Var)RT.var("synchrony.http", "deepcheck-entity-id");
    const__47 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(124), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/http.clj" });
    const__48 = (Var)RT.var("clojure.core", "str");
    const__49 = (Var)RT.var("synchrony.credentials", "insecure-app-id");
    const__50 = (Var)RT.var("synchrony.http", "deepcheck-handler");
    const__53 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })), RT.keyword(null, "line"), Integer.valueOf(128), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/http.clj" });
    const__54 = (Var)RT.var("synchrony.http", "entity-response-body");
    const__57 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "entity")) })), RT.keyword(null, "line"), Integer.valueOf(152), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/http.clj" });
    const__58 = (Var)RT.var("synchrony.http", "publish-handler");
    const__61 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.map(new Object[] { Symbol.intern(null, "topic"), RT.keyword(null, "topic") }), RT.keyword(null, "params"), RT.map(new Object[] { Symbol.intern(null, "jwt"), "x-token" }), RT.keyword(null, "headers"), RT.keyword(null, "as"), Symbol.intern(null, "request") })) })), RT.keyword(null, "line"), Integer.valueOf(156), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/http.clj" });
    const__62 = (Var)RT.var("synchrony.http", "mostly-valid-path-re");
    const__65 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(202), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/http.clj", RT.keyword(null, "doc"), "Very restrictive pattern for security." });
    const__66 = Pattern.compile("^([a-zA-Z0-9\\._-]+/)*[a-zA-Z0-9\\._-]+\\.(?:html|js|css|png|jpg|gif|cur|svg|eot|ttf|woff|map|cljs|cljc)$");
    const__67 = (Var)RT.var("synchrony.http", "valid-path?");
    const__70 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "path")) })), RT.keyword(null, "line"), Integer.valueOf(210), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/http.clj" });
    const__71 = (Var)RT.var("synchrony.http", "public-folder");
    const__73 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(214), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/http.clj" });
    const__74 = (Var)RT.var("synchrony.http", "resources-handler");
    const__77 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "path")) }), RT.keyword(null, "params"), RT.keyword(null, "as"), Symbol.intern(null, "request") })) })), RT.keyword(null, "line"), Integer.valueOf(216), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/http.clj" });
    const__78 = (Var)RT.var("synchrony.http", "internal-server-error-handler");
    const__81 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })), RT.keyword(null, "line"), Integer.valueOf(226), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/http.clj" });
    const__82 = (Var)RT.var("synchrony.http", "errorlog-handler");
    const__85 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.map(new Object[] { Symbol.intern(null, "jwt"), "x-token" }), RT.keyword(null, "headers"), RT.keyword(null, "as"), Symbol.intern(null, "request") })) })), RT.keyword(null, "line"), Integer.valueOf(229), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/http.clj" });
    const__86 = (Var)RT.var("synchrony.http", "match-ip");
    const__89 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ip"), Symbol.intern(null, "pattern")) })), RT.keyword(null, "line"), Integer.valueOf(254), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/http.clj" });
    const__90 = (Var)RT.var("synchrony.http", "secret-handler");
    const__93 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "request")) })), RT.keyword(null, "line"), Integer.valueOf(259), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/http.clj" });
    const__94 = (Var)RT.var("synchrony.http", "jwt-key-handler");
    const__97 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(302), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/http.clj" });
    const__98 = (Var)RT.var("synchrony.http", "api-routes");
  }
  
  public static void __init1() {
    const__101 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(307), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/http.clj" });
    const__102 = (Var)RT.var("synchrony.http", "static-resource-whitelisted?");
    const__105 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "uri")) })), RT.keyword(null, "line"), Integer.valueOf(321), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/http.clj" });
    const__106 = (Var)RT.var("synchrony.http", "site-routes");
    const__109 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(327), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/http.clj" });
    const__110 = (Var)RT.var("synchrony.http", "wrap-context-path");
    const__113 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "routes")) })), RT.keyword(null, "line"), Integer.valueOf(342), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/http.clj" });
    const__114 = (Var)RT.var("synchrony.http", "make-routes");
    const__117 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(347), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/http.clj" });
  }
  
  static  {
    __init0();
    __init1();
    Compiler.pushNSandLoader(RT.classForName("synchrony.http__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
