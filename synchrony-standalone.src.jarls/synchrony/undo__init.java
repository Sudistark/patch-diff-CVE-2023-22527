package synchrony;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class undo__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__11;
  
  public static final Var const__12;
  
  public static final AFn const__15;
  
  public static final Var const__16;
  
  public static final AFn const__19;
  
  public static final Var const__20;
  
  public static final AFn const__23;
  
  public static final Var const__24;
  
  public static final AFn const__27;
  
  public static final Var const__28;
  
  public static final AFn const__31;
  
  public static final Var const__32;
  
  public static final AFn const__35;
  
  public static final Var const__36;
  
  public static final AFn const__40;
  
  public static final Var const__41;
  
  public static final AFn const__44;
  
  public static final Var const__45;
  
  public static final AFn const__48;
  
  public static final Var const__49;
  
  public static final AFn const__52;
  
  public static final Var const__53;
  
  public static final AFn const__56;
  
  public static final Var const__57;
  
  public static final AFn const__61;
  
  public static final Var const__62;
  
  public static final AFn const__65;
  
  public static final Var const__66;
  
  public static final AFn const__69;
  
  public static final Var const__70;
  
  public static final AFn const__73;
  
  public static final Var const__74;
  
  public static final AFn const__77;
  
  public static final Var const__78;
  
  public static final AFn const__81;
  
  public static final Var const__82;
  
  public static final AFn const__85;
  
  public static final Var const__86;
  
  public static final AFn const__89;
  
  public static final Var const__90;
  
  public static final AFn const__93;
  
  public static final Var const__94;
  
  public static final AFn const__97;
  
  public static final Var const__98;
  
  public static final AFn const__101;
  
  public static final Var const__102;
  
  public static final AFn const__105;
  
  public static final Var const__106;
  
  public static final AFn const__109;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new undo.fn__65431());
    const__3.setMeta((IPersistentMap)const__11);
    const__3.bindRoot(new undo.history());
    const__12.setMeta((IPersistentMap)const__15);
    const__12.bindRoot(new undo.tag_unredo());
    const__16.setMeta((IPersistentMap)const__19);
    const__16.bindRoot(new undo.tag_from_revision());
    const__20.setMeta((IPersistentMap)const__23);
    const__20.bindRoot(new undo.tag_undoable());
    const__24.setMeta((IPersistentMap)const__27);
    const__24.bindRoot(new undo.undoable_QMARK_());
    const__28.setMeta((IPersistentMap)const__31);
    const__28.bindRoot(new undo.tag_composable());
    const__32.setMeta((IPersistentMap)const__35);
    const__32.bindRoot(new undo.composable_QMARK_());
    const__36.setMeta((IPersistentMap)const__40);
    const__36.bindRoot(new undo.inverse_revision());
    const__41.setMeta((IPersistentMap)const__44);
    const__41.bindRoot(new undo.xform_with_selections());
    const__45.setMeta((IPersistentMap)const__48);
    const__45.bindRoot(new undo.compose_revisions_with_selections());
    const__49.setMeta((IPersistentMap)const__52);
    const__49.bindRoot(new undo.inverse_undoable_xf());
    const__53.setMeta((IPersistentMap)const__56);
    const__53.bindRoot(new undo.last_n());
    const__57.setMeta((IPersistentMap)const__61);
    const__57.bindRoot(new undo.drop_remote());
    const__62.setMeta((IPersistentMap)const__65);
    const__62.bindRoot(new undo.resize());
    const__66.setMeta((IPersistentMap)const__69);
    const__66.bindRoot(new undo.raise_undoable());
    const__70.setMeta((IPersistentMap)const__73);
    const__70.bindRoot(new undo.raiseable_QMARK_());
    const__74.setMeta((IPersistentMap)const__77);
    const__74.bindRoot(new undo.record_undoable());
    const__78.setMeta((IPersistentMap)const__81);
    const__78.bindRoot(new undo.record_remote());
    const__82.setMeta((IPersistentMap)const__85);
    const__82.bindRoot(new undo.raise_record_undoable());
    const__86.setMeta((IPersistentMap)const__89);
    const__86.bindRoot(new undo.record_revision());
    const__90.setMeta((IPersistentMap)const__93);
    const__90.bindRoot(new undo.history_key());
    const__94.setMeta((IPersistentMap)const__97);
    const__94.bindRoot(new undo.unredo());
    const__98.setMeta((IPersistentMap)const__101);
    const__98.bindRoot(new undo.can_unredo_QMARK_());
    const__102.setMeta((IPersistentMap)const__105);
    const__102.bindRoot(new undo.record());
    const__106.setMeta((IPersistentMap)const__109);
    const__106.bindRoot(new undo.new_level());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "synchrony.undo");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("synchrony.undo", "history");
    const__11 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(), Tuple.create(Symbol.intern(null, "G__65433")) })), RT.keyword(null, "line"), Integer.valueOf(16), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/undo.cljc" });
    const__12 = (Var)RT.var("synchrony.undo", "tag-unredo");
    const__15 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "revision"), Symbol.intern(null, "unredo")) })), RT.keyword(null, "line"), Integer.valueOf(19), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/undo.cljc" });
    const__16 = (Var)RT.var("synchrony.undo", "tag-from-revision");
    const__19 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "revision")) })), RT.keyword(null, "line"), Integer.valueOf(22), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/undo.cljc" });
    const__20 = (Var)RT.var("synchrony.undo", "tag-undoable");
    const__23 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "revision")) })), RT.keyword(null, "line"), Integer.valueOf(25), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/undo.cljc" });
    const__24 = (Var)RT.var("synchrony.undo", "undoable?");
    const__27 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "revision")) })), RT.keyword(null, "line"), Integer.valueOf(28), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/undo.cljc" });
    const__28 = (Var)RT.var("synchrony.undo", "tag-composable");
    const__31 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "revision"), Symbol.intern(null, "composable")) })), RT.keyword(null, "line"), Integer.valueOf(31), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/undo.cljc" });
    const__32 = (Var)RT.var("synchrony.undo", "composable?");
    const__35 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "revision")) })), RT.keyword(null, "line"), Integer.valueOf(34), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/undo.cljc" });
    const__36 = (Var)RT.var("synchrony.undo", "inverse-revision");
    const__40 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "revision"), Symbol.intern(null, "tree")) })), RT.keyword(null, "line"), Integer.valueOf(38), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/undo.cljc" });
    const__41 = (Var)RT.var("synchrony.undo", "xform-with-selections");
    const__44 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "a"), Symbol.intern(null, "b")) })), RT.keyword(null, "line"), Integer.valueOf(49), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/undo.cljc" });
    const__45 = (Var)RT.var("synchrony.undo", "compose-revisions-with-selections");
    const__48 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(), Tuple.create(Symbol.intern(null, "a-revision")), Tuple.create(Symbol.intern(null, "a-revision"), Symbol.intern(null, "b-revision")) })), RT.keyword(null, "line"), Integer.valueOf(73), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/undo.cljc" });
    const__49 = (Var)RT.var("synchrony.undo", "inverse-undoable-xf");
    const__52 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "tree")) })), RT.keyword(null, "line"), Integer.valueOf(87), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/undo.cljc" });
    const__53 = (Var)RT.var("synchrony.undo", "last-n");
    const__56 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "v"), Symbol.intern(null, "cnt")) })), RT.keyword(null, "line"), Integer.valueOf(96), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/undo.cljc" });
    const__57 = (Var)RT.var("synchrony.undo", "drop-remote");
    const__61 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "history")) })), RT.keyword(null, "doc"), "The first revision in a history must not be a remote revision to\n  ensure the redo history is emptied eventually.", RT.keyword(null, "line"), Integer.valueOf(99), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "synchrony/undo.cljc" });
    const__62 = (Var)RT.var("synchrony.undo", "resize");
    const__65 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "history")) })), RT.keyword(null, "line"), Integer.valueOf(108), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/undo.cljc" });
    const__66 = (Var)RT.var("synchrony.undo", "raise-undoable");
    const__69 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "history")) })), RT.keyword(null, "line"), Integer.valueOf(113), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/undo.cljc" });
    const__70 = (Var)RT.var("synchrony.undo", "raiseable?");
    const__73 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "history")) })), RT.keyword(null, "line"), Integer.valueOf(128), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/undo.cljc" });
    const__74 = (Var)RT.var("synchrony.undo", "record-undoable");
    const__77 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "history"), Symbol.intern(null, "revision")) })), RT.keyword(null, "line"), Integer.valueOf(133), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/undo.cljc" });
    const__78 = (Var)RT.var("synchrony.undo", "record-remote");
    const__81 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "history"), Symbol.intern(null, "revision")) })), RT.keyword(null, "line"), Integer.valueOf(141), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/undo.cljc" });
    const__82 = (Var)RT.var("synchrony.undo", "raise-record-undoable");
    const__85 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "history"), Symbol.intern(null, "revision")) })), RT.keyword(null, "line"), Integer.valueOf(149), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/undo.cljc" });
    const__86 = (Var)RT.var("synchrony.undo", "record-revision");
    const__89 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "undo-history"), Symbol.intern(null, "revision")) })), RT.keyword(null, "line"), Integer.valueOf(156), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/undo.cljc" });
    const__90 = (Var)RT.var("synchrony.undo", "history-key");
    const__93 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "unredo")) })), RT.keyword(null, "line"), Integer.valueOf(181), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/undo.cljc" });
    const__94 = (Var)RT.var("synchrony.undo", "unredo");
    const__97 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "unredo"), Symbol.intern(null, "undo-history")) })), RT.keyword(null, "doc"), "Generate an undo revision that applies on top of the current state\n  and an updated undo-history that reflects the undo.\n\n  The undo revision has to be recorded in the next call to record for it\n  to become redoable.\n\n  An important feature of this algorithm is that undoable revision are\n  transformed only against non-undoable revisions, and not against other\n  undoable revisions, which would give unexpected results.\n\n  See synchrony.history/backtrack for why the transformation logic works\n  the way it does.", RT.keyword(null, "line"), Integer.valueOf(186), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/undo.cljc" });
    const__98 = (Var)RT.var("synchrony.undo", "can-unredo?");
  }
  
  public static void __init1() {
    const__101 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "unredo"), Symbol.intern(null, "undo-history")) })), RT.keyword(null, "line"), Integer.valueOf(227), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/undo.cljc" });
    const__102 = (Var)RT.var("synchrony.undo", "record");
    const__105 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "undo-history"), Symbol.intern(null, "tree"), Symbol.intern(null, "revisions")) })), RT.keyword(null, "line"), Integer.valueOf(230), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/undo.cljc" });
    const__106 = (Var)RT.var("synchrony.undo", "new-level");
    const__109 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "undo-history")) })), RT.keyword(null, "line"), Integer.valueOf(236), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/undo.cljc" });
  }
  
  static  {
    __init0();
    __init1();
    Compiler.pushNSandLoader(RT.classForName("synchrony.undo__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
