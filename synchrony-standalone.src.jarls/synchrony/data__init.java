package synchrony;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.Numbers;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class data__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__10;
  
  public static final Var const__11;
  
  public static final AFn const__12;
  
  public static final Var const__13;
  
  public static final AFn const__14;
  
  public static final Var const__15;
  
  public static final AFn const__16;
  
  public static final Var const__17;
  
  public static final AFn const__18;
  
  public static final Var const__19;
  
  public static final AFn const__21;
  
  public static final Var const__22;
  
  public static final Var const__23;
  
  public static final Var const__24;
  
  public static final Var const__25;
  
  public static final Object const__26;
  
  public static final Var const__27;
  
  public static final Object const__28;
  
  public static final Var const__29;
  
  public static final AFn const__31;
  
  public static final Object const__32;
  
  public static final Var const__33;
  
  public static final AFn const__35;
  
  public static final Object const__36;
  
  public static final Var const__37;
  
  public static final AFn const__39;
  
  public static final Var const__43;
  
  public static final AFn const__45;
  
  public static final Object const__46;
  
  public static final Var const__47;
  
  public static final AFn const__51;
  
  public static final Var const__52;
  
  public static final AFn const__55;
  
  public static final Var const__56;
  
  public static final AFn const__59;
  
  public static final Var const__60;
  
  public static final AFn const__64;
  
  public static final Var const__65;
  
  public static final AFn const__68;
  
  public static final Var const__69;
  
  public static final AFn const__72;
  
  public static final Var const__73;
  
  public static final AFn const__76;
  
  public static final Var const__77;
  
  public static final AFn const__80;
  
  public static final Var const__81;
  
  public static final AFn const__84;
  
  public static final Var const__85;
  
  public static final AFn const__88;
  
  public static final Var const__89;
  
  public static final AFn const__92;
  
  public static final Var const__93;
  
  public static final AFn const__96;
  
  public static final Var const__97;
  
  public static final AFn const__100;
  
  public static final Var const__101;
  
  public static final AFn const__104;
  
  public static final Var const__105;
  
  public static final AFn const__108;
  
  public static final Var const__109;
  
  public static final AFn const__112;
  
  public static final Var const__113;
  
  public static final AFn const__116;
  
  public static final Var const__117;
  
  public static final AFn const__120;
  
  public static final Var const__121;
  
  public static final AFn const__124;
  
  public static final Var const__125;
  
  public static final AFn const__128;
  
  public static final Var const__129;
  
  public static final AFn const__132;
  
  public static final Var const__133;
  
  public static final AFn const__136;
  
  public static final Var const__137;
  
  public static final AFn const__140;
  
  public static final Var const__141;
  
  public static final AFn const__144;
  
  public static final Var const__145;
  
  public static final AFn const__148;
  
  public static final Var const__149;
  
  public static final AFn const__152;
  
  public static final Var const__153;
  
  public static final AFn const__156;
  
  public static final Var const__157;
  
  public static final AFn const__160;
  
  public static final AFn const__163;
  
  public static final AFn const__166;
  
  public static final Var const__167;
  
  public static final AFn const__170;
  
  public static final Var const__171;
  
  public static final AFn const__174;
  
  public static final Var const__175;
  
  public static final AFn const__178;
  
  public static final AFn const__181;
  
  public static final AFn const__184;
  
  public static final Var const__185;
  
  public static final AFn const__188;
  
  public static final Var const__189;
  
  public static final AFn const__192;
  
  public static final Var const__193;
  
  public static final AFn const__196;
  
  public static final Var const__197;
  
  public static final AFn const__199;
  
  public static final AFn const__203;
  
  public static final Var const__204;
  
  public static final AFn const__206;
  
  public static final AFn const__209;
  
  public static final Var const__210;
  
  public static final AFn const__213;
  
  public static final Var const__214;
  
  public static final AFn const__217;
  
  public static final Var const__218;
  
  public static final AFn const__221;
  
  public static final Var const__222;
  
  public static final AFn const__225;
  
  public static final AFn const__228;
  
  public static final Var const__229;
  
  public static final AFn const__232;
  
  public static final Var const__233;
  
  public static final AFn const__236;
  
  public static final Var const__237;
  
  public static final AFn const__240;
  
  public static final Var const__241;
  
  public static final AFn const__244;
  
  public static final Var const__245;
  
  public static final AFn const__248;
  
  public static final Var const__249;
  
  public static final AFn const__252;
  
  public static final Var const__253;
  
  public static final AFn const__256;
  
  public static final Var const__257;
  
  public static final AFn const__260;
  
  public static final Var const__261;
  
  public static final AFn const__264;
  
  public static final Var const__265;
  
  public static final AFn const__268;
  
  public static final Var const__269;
  
  public static final AFn const__272;
  
  public static final Var const__273;
  
  public static final AFn const__276;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new data.fn__44896());
    const__3.setMeta((IPersistentMap)const__10);
    const__11.setMeta((IPersistentMap)const__12);
    const__13.setMeta((IPersistentMap)const__14);
    const__15.setMeta((IPersistentMap)const__16);
    const__17.setMeta((IPersistentMap)const__18);
    const__19.setMeta((IPersistentMap)const__21);
    const__19







      
      .bindRoot(((IFn)const__22.getRawRoot()).invoke(const__23.getRawRoot(), ((IFn)const__24.getRawRoot())
          
          .invoke(((IFn)const__25.getRawRoot()).invoke(const__26), ((IFn)const__27.getRawRoot())
            .invoke(new data.fn__44975(), ((IFn)const__25.getRawRoot()).invoke(const__28)))));
    const__29.setMeta((IPersistentMap)const__31);
    const__29.bindRoot(const__32);
    const__33.setMeta((IPersistentMap)const__35);
    const__33.bindRoot(const__36);
    const__37.setMeta((IPersistentMap)const__39);
    const__37.bindRoot(Numbers.num(Numbers.multiply(1024L, 100L)));
    const__43.setMeta((IPersistentMap)const__45);
    const__43.bindRoot(const__46);
    const__47.setMeta((IPersistentMap)const__51);
    const__47.bindRoot(new data.crypto_key_from_passphrase());
    const__52.setMeta((IPersistentMap)const__55);
    const__52.bindRoot(new data.crypto_key_from_jwt());
    const__56.setMeta((IPersistentMap)const__59);
    const__56.bindRoot(new data.snapshot_key());
    const__60.setMeta((IPersistentMap)const__64);
    const__60.bindRoot(new data.evicted_partition_key());
    const__65.setMeta((IPersistentMap)const__68);
    const__65.bindRoot(new data.evicted_snapshots_key());
    const__69.setMeta((IPersistentMap)const__72);
    const__69.bindRoot(new data.event_bucket_key());
    const__73.setMeta((IPersistentMap)const__76);
    const__73.bindRoot(new data.master_snapshot_cache_key());
    const__77.setMeta((IPersistentMap)const__80);
    const__77.bindRoot(new data.cache_value());
    const__81.setMeta((IPersistentMap)const__84);
    const__81.bindRoot(new data.get_cached_value());
    const__85.setMeta((IPersistentMap)const__88);
    const__85.bindRoot(new data.cache_snapshot());
    const__89.setMeta((IPersistentMap)const__92);
    const__89.bindRoot(new data.get_cached_snapshot());
    const__93.setMeta((IPersistentMap)const__96);
    const__93.bindRoot(new data.cache_events());
    const__97.setMeta((IPersistentMap)const__100);
    const__97.bindRoot(new data.get_cached_events());
    const__101.setMeta((IPersistentMap)const__104);
    const__101.bindRoot(new data.put_snapshots_BANG_());
    const__105.setMeta((IPersistentMap)const__108);
    const__105.bindRoot(new data.get_snapshots_with_key_BANG_());
    const__109.setMeta((IPersistentMap)const__112);
    const__109.bindRoot(new data.snapshot_revision_QMARK_());
    const__113.setMeta((IPersistentMap)const__116);
    const__113.bindRoot(new data.snapshot_revisions());
    const__117.setMeta((IPersistentMap)const__120);
    const__117.bindRoot(new data.regenerate_snapshots_BANG_());
    const__121.setMeta((IPersistentMap)const__124);
    const__121.bindRoot(new data.persist_snapshots_BANG_());
    const__125.setMeta((IPersistentMap)const__128);
    const__125.bindRoot(new data.repair_snapshots_BANG_());
    const__129.setMeta((IPersistentMap)const__132);
    const__129.bindRoot(new data.get_snapshots_BANG_());
    const__133.setMeta((IPersistentMap)const__136);
    const__133.bindRoot(new data.get_partition_snapshots_BANG_());
    const__137.setMeta((IPersistentMap)const__140);
    const__137.bindRoot(new data.put_revisions_no_limit_BANG_());
    const__141.setMeta((IPersistentMap)const__144);
    const__141.bindRoot(new data.put_revisions_BANG_());
    const__145.setMeta((IPersistentMap)const__148);
    const__145.bindRoot(new data.get_max_part_no_qualify_BANG_());
    const__149.setMeta((IPersistentMap)const__152);
    const__149.bindRoot(new data.get_max_part_BANG_());
    const__153.setMeta((IPersistentMap)const__156);
    const__153.bindRoot(new data.get_max_part_id_BANG_());
    const__157.setMeta((IPersistentMap)const__160);
    const__157.bindRoot(new data.get_part_history_store_BANG_());
    const__11.setMeta((IPersistentMap)const__163);
    const__11.bindRoot(new data.get_part_no_qualify_BANG_());
    const__3.setMeta((IPersistentMap)const__166);
    const__3.bindRoot(new data.get_part_BANG_());
    const__167.setMeta((IPersistentMap)const__170);
    const__167.bindRoot(new data.event_data_from_partition());
    const__171.setMeta((IPersistentMap)const__174);
    const__171.bindRoot(new data.partition_from_event_data());
    const__175.setMeta((IPersistentMap)const__178);
    const__175.bindRoot(new data.put_evicted_partition_BANG_());
    const__17.setMeta((IPersistentMap)const__181);
    const__17.bindRoot(new data.get_evicted_snapshots_BANG_());
    const__15.setMeta((IPersistentMap)const__184);
    const__15.bindRoot(new data.get_evicted_partition_BANG_());
    const__185.setMeta((IPersistentMap)const__188);
    const__185.bindRoot(new data.evict_partition());
    const__189.setMeta((IPersistentMap)const__192);
    const__189.bindRoot(new data.get_snapshots_and_tree_given_part_BANG_());
    const__193.setMeta((IPersistentMap)const__196);
    const__193.bindRoot(new data.get_tree_given_part_BANG_());
    const__197.setMeta((IPersistentMap)const__199);
    const__197.bindRoot(const__203);
    const__204.setMeta((IPersistentMap)const__206);
    const__204.bindRoot(const__209);
    const__210.setMeta((IPersistentMap)const__213);
    const__210.bindRoot(new data.get_part_having_rev_BANG_());
    const__214.setMeta((IPersistentMap)const__217);
    const__214.bindRoot(new data.get_entity_at_master_head_BANG_());
    const__218.setMeta((IPersistentMap)const__221);
    const__218.bindRoot(new data.get_entity_at_master_head_updating_cache_BANG_());
    const__222.setMeta((IPersistentMap)const__225);
    const__222.bindRoot(new data.get_entity_at_master_head_caching_BANG_());
    const__13.setMeta((IPersistentMap)const__228);
    const__13.bindRoot(new data.get_tree_BANG_());
    const__229.setMeta((IPersistentMap)const__232);
    const__229.bindRoot(new data.parts_reversed_ch());
    const__233.setMeta((IPersistentMap)const__236);
    const__233.bindRoot(new data.get_revisions_from_BANG_());
    const__237.setMeta((IPersistentMap)const__240);
    const__237.bindRoot(new data.get_latest_master_rev_BANG_());
    const__241.setMeta((IPersistentMap)const__244);
    const__241.bindRoot(new data.track_put_revisions());
    const__245.setMeta((IPersistentMap)const__248);
    const__245.bindRoot(new data.track_new_partition());
    const__249.setMeta((IPersistentMap)const__252);
    const__249.bindRoot(new data.init_partitioning_state());
    const__253.setMeta((IPersistentMap)const__256);
    const__253.bindRoot(new data.get_max_snapshot_size());
    const__257.setMeta((IPersistentMap)const__260);
    const__257.bindRoot(new data.put_revisions_ensure_snapshot_BANG_());
    const__261.setMeta((IPersistentMap)const__264);
    const__261.bindRoot(new data.ensure_partition_level_unique_revs());
    const__265.setMeta((IPersistentMap)const__268);
    const__265.bindRoot(new data.put_revisions_partitioning_BANG_());
    const__269.setMeta((IPersistentMap)const__272);
    const__269.bindRoot(new data.get_entity_given_part());
    const__273.setMeta((IPersistentMap)const__276);
    const__273.bindRoot(new data.get_entity_BANG_());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "synchrony.data");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("synchrony.data", "get-part!");
    const__10 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(47), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__11 = (Var)RT.var("synchrony.data", "get-part-no-qualify!");
    const__12 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(47), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__13 = (Var)RT.var("synchrony.data", "get-tree!");
    const__14 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(47), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__15 = (Var)RT.var("synchrony.data", "get-evicted-partition!");
    const__16 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(47), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__17 = (Var)RT.var("synchrony.data", "get-evicted-snapshots!");
    const__18 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(47), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__19 = (Var)RT.var("synchrony.data", "size-metrics");
    const__21 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(53), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__22 = (Var)RT.var("clojure.core", "apply");
    const__23 = (Var)RT.var("clojure.core", "sorted-set");
    const__24 = (Var)RT.var("clojure.core", "concat");
    const__25 = (Var)RT.var("clojure.core", "range");
    const__26 = Long.valueOf(10L);
    const__27 = (Var)RT.var("clojure.core", "map");
    const__28 = Long.valueOf(32L);
    const__29 = (Var)RT.var("synchrony.data", "aes-gcm-iterations");
    const__31 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(59), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__32 = Long.valueOf(2048L);
    const__33 = (Var)RT.var("synchrony.data", "aes-key-size");
    const__35 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(60), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__36 = Long.valueOf(256L);
    const__37 = (Var)RT.var("synchrony.data", "default-partition-size");
    const__39 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(61), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__43 = (Var)RT.var("synchrony.data", "final-event-estimated-size");
    const__45 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(62), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__46 = Long.valueOf(1024L);
    const__47 = (Var)RT.var("synchrony.data", "crypto-key-from-passphrase");
    const__51 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "passphrase"), Symbol.intern(null, "entity-id")) })), RT.keyword(null, "line"), Integer.valueOf(64), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__52 = (Var)RT.var("synchrony.data", "crypto-key-from-jwt");
    const__55 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "jwt"), Symbol.intern(null, "entity-id"), Symbol.intern(null, "jwt-priv-key")) })), RT.keyword(null, "line"), Integer.valueOf(67), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__56 = (Var)RT.var("synchrony.data", "snapshot-key");
    const__59 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "entity-id"), Symbol.intern(null, "rev"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("h", "rev-partition"), Symbol.intern(null, "rev") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(77), RT.keyword(null, "column"), Integer.valueOf(10) }))) })) })), RT.keyword(null, "line"), Integer.valueOf(76), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__60 = (Var)RT.var("synchrony.data", "evicted-partition-key");
    const__64 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "entity-id"), Symbol.intern(null, "part-id")) })), RT.keyword(null, "line"), Integer.valueOf(80), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__65 = (Var)RT.var("synchrony.data", "evicted-snapshots-key");
    const__68 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "entity-id"), Symbol.intern(null, "part-id")) })), RT.keyword(null, "line"), Integer.valueOf(83), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__69 = (Var)RT.var("synchrony.data", "event-bucket-key");
    const__72 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "entity-id"), Symbol.intern(null, "part-id")) })), RT.keyword(null, "line"), Integer.valueOf(86), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__73 = (Var)RT.var("synchrony.data", "master-snapshot-cache-key");
    const__76 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "entity-id"), Symbol.intern(null, "part-id")) })), RT.keyword(null, "line"), Integer.valueOf(89), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__77 = (Var)RT.var("synchrony.data", "cache-value");
    const__80 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "cache-key"), Symbol.intern(null, "value")) })), RT.keyword(null, "line"), Integer.valueOf(94), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__81 = (Var)RT.var("synchrony.data", "get-cached-value");
    const__84 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "cache-key")) })), RT.keyword(null, "line"), Integer.valueOf(105), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__85 = (Var)RT.var("synchrony.data", "cache-snapshot");
    const__88 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "entity-desc"), Symbol.intern(null, "part-id"), Symbol.intern(null, "snapshot-data")) })), RT.keyword(null, "line"), Integer.valueOf(116), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__89 = (Var)RT.var("synchrony.data", "get-cached-snapshot");
    const__92 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "entity-desc"), Symbol.intern(null, "part-id")) })), RT.keyword(null, "line"), Integer.valueOf(122), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__93 = (Var)RT.var("synchrony.data", "cache-events");
    const__96 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "entity-desc"), Symbol.intern(null, "events"), Symbol.intern(null, "&"), RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "append")) })) })), RT.keyword(null, "line"), Integer.valueOf(127), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__97 = (Var)RT.var("synchrony.data", "get-cached-events");
  }
  
  public static void __init1() {
    const__100 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "entity-desc"), Symbol.intern(null, "part-id")) })), RT.keyword(null, "line"), Integer.valueOf(155), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__101 = (Var)RT.var("synchrony.data", "put-snapshots!");
    const__104 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "entity-desc"), Symbol.intern(null, "snapshot-key"), Symbol.intern(null, "snapshot-data")) })), RT.keyword(null, "line"), Integer.valueOf(173), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__105 = (Var)RT.var("synchrony.data", "get-snapshots-with-key!");
    const__108 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "entity-desc"), Symbol.intern(null, "s-key")) })), RT.keyword(null, "line"), Integer.valueOf(191), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__109 = (Var)RT.var("synchrony.data", "snapshot-revision?");
    const__112 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(RT.map(new Object[] { Tuple.create(Symbol.intern(null, "parent")), RT.keyword(null, "parents"), RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "rev")), RT.keyword(null, "as"), Symbol.intern(null, "revision") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "or"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "nil?"), Symbol.intern(null, "parent") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(204), RT.keyword(null, "column"), Integer.valueOf(14) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("h", "rev-partition"), Symbol.intern(null, "parent") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(204), RT.keyword(null, "column"), Integer.valueOf(28) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(204), RT.keyword(null, "column"), Integer.valueOf(10) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("h", "rev-partition"), Symbol.intern(null, "rev") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(205), RT.keyword(null, "column"), Integer.valueOf(10) }))) })) })), RT.keyword(null, "line"), Integer.valueOf(203), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__113 = (Var)RT.var("synchrony.data", "snapshot-revisions");
    const__116 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "part")) })), RT.keyword(null, "line"), Integer.valueOf(210), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__117 = (Var)RT.var("synchrony.data", "regenerate-snapshots!");
    const__120 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "entity-desc"), Symbol.intern(null, "rev"), Symbol.intern(null, "part")) })), RT.keyword(null, "line"), Integer.valueOf(215), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__121 = (Var)RT.var("synchrony.data", "persist-snapshots!");
    const__124 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "entity-desc"), Symbol.intern(null, "rev"), Symbol.intern(null, "snapshot-data")) })), RT.keyword(null, "line"), Integer.valueOf(229), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__125 = (Var)RT.var("synchrony.data", "repair-snapshots!");
    const__128 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "entity-desc"), Symbol.intern(null, "rev"), Symbol.intern(null, "part")) })), RT.keyword(null, "line"), Integer.valueOf(238), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__129 = (Var)RT.var("synchrony.data", "get-snapshots!");
    const__132 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "entity-desc"), Symbol.intern(null, "rev"), Symbol.intern(null, "part")) })), RT.keyword(null, "line"), Integer.valueOf(245), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__133 = (Var)RT.var("synchrony.data", "get-partition-snapshots!");
    const__136 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "entity-desc"), Symbol.intern(null, "part")) })), RT.keyword(null, "line"), Integer.valueOf(251), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__137 = (Var)RT.var("synchrony.data", "put-revisions-no-limit!");
    const__140 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { RT.vector(new Object[] { Symbol.intern(null, "entity-desc"), Symbol.intern(null, "ref"), Symbol.intern(null, "chunk-key"), Symbol.intern(null, "event-data"), Symbol.intern(null, "chunks"), Symbol.intern(null, "revisions"), Symbol.intern(null, "final?") }) })), RT.keyword(null, "line"), Integer.valueOf(265), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__141 = (Var)RT.var("synchrony.data", "put-revisions!");
    const__144 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "entity-desc"), Symbol.intern(null, "ref"), Symbol.intern(null, "revisions")) })), RT.keyword(null, "line"), Integer.valueOf(287), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__145 = (Var)RT.var("synchrony.data", "get-max-part-no-qualify!");
    const__148 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "entity-desc")) })), RT.keyword(null, "line"), Integer.valueOf(303), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__149 = (Var)RT.var("synchrony.data", "get-max-part!");
    const__152 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "entity-desc")) })), RT.keyword(null, "line"), Integer.valueOf(311), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__153 = (Var)RT.var("synchrony.data", "get-max-part-id!");
    const__156 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "entity-id")) })), RT.keyword(null, "line"), Integer.valueOf(316), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__157 = (Var)RT.var("synchrony.data", "get-part-history-store!");
    const__160 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "entity-desc"), Symbol.intern(null, "part-id")) })), RT.keyword(null, "line"), Integer.valueOf(320), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__163 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "entity-desc"), Symbol.intern(null, "part-id")) })), RT.keyword(null, "line"), Integer.valueOf(328), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__166 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "entity-desc"), Symbol.intern(null, "part-id")) })), RT.keyword(null, "line"), Integer.valueOf(333), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__167 = (Var)RT.var("synchrony.data", "event-data-from-partition");
    const__170 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "part")) })), RT.keyword(null, "line"), Integer.valueOf(343), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__171 = (Var)RT.var("synchrony.data", "partition-from-event-data");
    const__174 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "event-data"), Symbol.intern(null, "part-id")) })), RT.keyword(null, "line"), Integer.valueOf(349), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__175 = (Var)RT.var("synchrony.data", "put-evicted-partition!");
    const__178 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "entity-desc"), Symbol.intern(null, "part")) })), RT.keyword(null, "line"), Integer.valueOf(360), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__181 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "entity-desc"), Symbol.intern(null, "part-id")) })), RT.keyword(null, "line"), Integer.valueOf(371), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__184 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "entity-desc"), Symbol.intern(null, "part-id")) })), RT.keyword(null, "line"), Integer.valueOf(378), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__185 = (Var)RT.var("synchrony.data", "evict-partition");
    const__188 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "entity-desc"), Symbol.intern(null, "part-id")) })), RT.keyword(null, "line"), Integer.valueOf(387), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__189 = (Var)RT.var("synchrony.data", "get-snapshots-and-tree-given-part!");
    const__192 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "entity-desc"), Symbol.intern(null, "part"), Symbol.intern(null, "rev")) })), RT.keyword(null, "line"), Integer.valueOf(433), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__193 = (Var)RT.var("synchrony.data", "get-tree-given-part!");
    const__196 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "entity-desc"), Symbol.intern(null, "part"), Symbol.intern(null, "rev")) })), RT.keyword(null, "line"), Integer.valueOf(457), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__197 = (Var)RT.var("synchrony.data", "qualified-rev-error");
    const__199 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(462), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
  }
  
  public static void __init2() {
    const__203 = (AFn)RT.map(new Object[] { RT.keyword(null, "type"), RT.keyword("data.error", "qualified-rev"), RT.keyword(null, "mesasge"), "rev unexpectedly provides partition information" });
    const__204 = (Var)RT.var("synchrony.data", "unqualified-rev-error");
    const__206 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(466), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__209 = (AFn)RT.map(new Object[] { RT.keyword(null, "type"), RT.keyword("data.error", "unqualified-rev"), RT.keyword(null, "message"), "rev does not provide partition information" });
    const__210 = (Var)RT.var("synchrony.data", "get-part-having-rev!");
    const__213 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "entity-desc"), Symbol.intern(null, "rev")) })), RT.keyword(null, "line"), Integer.valueOf(470), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__214 = (Var)RT.var("synchrony.data", "get-entity-at-master-head!");
    const__217 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "entity-desc"), Symbol.intern(null, "part-id")) })), RT.keyword(null, "line"), Integer.valueOf(477), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__218 = (Var)RT.var("synchrony.data", "get-entity-at-master-head-updating-cache!");
    const__221 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "entity-desc"), Symbol.intern(null, "part-id")) })), RT.keyword(null, "line"), Integer.valueOf(490), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__222 = (Var)RT.var("synchrony.data", "get-entity-at-master-head-caching!");
    const__225 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "entity-desc"), Symbol.intern(null, "part-id")) })), RT.keyword(null, "line"), Integer.valueOf(500), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__228 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "entity-desc"), Symbol.intern(null, "rev")) })), RT.keyword(null, "line"), Integer.valueOf(523), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__229 = (Var)RT.var("synchrony.data", "parts-reversed-ch");
    const__232 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pred?"), Symbol.intern(null, "entity-desc")), Tuple.create(Symbol.intern(null, "pred?"), Symbol.intern(null, "entity-desc"), Symbol.intern(null, "part-id")) })), RT.keyword(null, "line"), Integer.valueOf(528), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__233 = (Var)RT.var("synchrony.data", "get-revisions-from!");
    const__236 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "entity-desc"), Symbol.intern(null, "from-rev")), Tuple.create(Symbol.intern(null, "entity-desc"), Symbol.intern(null, "from-rev"), Symbol.intern(null, "max-part-id")) })), RT.keyword(null, "line"), Integer.valueOf(558), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__237 = (Var)RT.var("synchrony.data", "get-latest-master-rev!");
    const__240 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "entity-desc")) })), RT.keyword(null, "line"), Integer.valueOf(579), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__241 = (Var)RT.var("synchrony.data", "track-put-revisions");
    const__244 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "state"), Symbol.intern(null, "revs-put"), Symbol.intern(null, "stored-size"), Symbol.intern(null, "events-put")) })), RT.keyword(null, "line"), Integer.valueOf(587), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__245 = (Var)RT.var("synchrony.data", "track-new-partition");
    const__248 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "state")) })), RT.keyword(null, "line"), Integer.valueOf(594), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__249 = (Var)RT.var("synchrony.data", "init-partitioning-state");
    const__252 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "part")), Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(601), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__253 = (Var)RT.var("synchrony.data", "get-max-snapshot-size");
    const__256 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(619), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__257 = (Var)RT.var("synchrony.data", "put-revisions-ensure-snapshot!");
    const__260 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "entity-desc"), Symbol.intern(null, "ref"), Symbol.intern(null, "revisions"), Symbol.intern(null, "state-by-rev"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "->>"), Symbol.intern(null, "revisions"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "mapcat"), RT.keyword(null, "parents") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(625), RT.keyword(null, "column"), Integer.valueOf(15) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "every?"), Symbol.intern("h", "rev-partition") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(626), RT.keyword(null, "column"), Integer.valueOf(15) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(624), RT.keyword(null, "column"), Integer.valueOf(10) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "->>"), Symbol.intern(null, "revisions"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "map"), RT.keyword(null, "rev") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(628), RT.keyword(null, "column"), Integer.valueOf(15) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "every?"), Symbol.intern("h", "rev-partition") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(629), RT.keyword(null, "column"), Integer.valueOf(15) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(627), RT.keyword(null, "column"), Integer.valueOf(10) }))) })) })), RT.keyword(null, "line"), Integer.valueOf(622), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__261 = (Var)RT.var("synchrony.data", "ensure-partition-level-unique-revs");
    const__264 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "partitioning-state"), Symbol.intern(null, "entity-desc"), Symbol.intern(null, "revs-to-put")) })), RT.keyword(null, "line"), Integer.valueOf(651), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__265 = (Var)RT.var("synchrony.data", "put-revisions-partitioning!");
    const__268 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "partitioning-state"), Symbol.intern(null, "entity-desc"), Symbol.intern(null, "revisions"), Symbol.intern(null, "state-by-rev")) })), RT.keyword(null, "line"), Integer.valueOf(660), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__269 = (Var)RT.var("synchrony.data", "get-entity-given-part");
    const__272 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "entity-desc"), Symbol.intern(null, "part"), Symbol.intern(null, "rev")) })), RT.keyword(null, "line"), Integer.valueOf(687), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
    const__273 = (Var)RT.var("synchrony.data", "get-entity!");
    const__276 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "entity-desc")), Tuple.create(Symbol.intern(null, "entity-desc"), Symbol.intern(null, "rev")) })), RT.keyword(null, "line"), Integer.valueOf(692), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data.clj" });
  }
  
  static  {
    __init0();
    __init1();
    __init2();
    Compiler.pushNSandLoader(RT.classForName("synchrony.data__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
