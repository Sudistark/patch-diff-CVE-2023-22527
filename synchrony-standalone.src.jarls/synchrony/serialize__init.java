package synchrony;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class serialize__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__12;
  
  public static final Var const__13;
  
  public static final AFn const__16;
  
  public static final Var const__17;
  
  public static final AFn const__20;
  
  public static final Var const__21;
  
  public static final AFn const__24;
  
  public static final Var const__25;
  
  public static final AFn const__28;
  
  public static final Var const__29;
  
  public static final AFn const__32;
  
  public static final Var const__33;
  
  public static final AFn const__35;
  
  public static final Keyword const__36;
  
  public static final Object const__37;
  
  public static final Keyword const__38;
  
  public static final Var const__39;
  
  public static final Keyword const__40;
  
  public static final Keyword const__41;
  
  public static final Var const__42;
  
  public static final Keyword const__43;
  
  public static final Var const__44;
  
  public static final Keyword const__45;
  
  public static final Keyword const__46;
  
  public static final Var const__47;
  
  public static final AFn const__49;
  
  public static final Var const__50;
  
  public static final Var const__51;
  
  public static final AFn const__54;
  
  public static final Var const__55;
  
  public static final AFn const__58;
  
  public static final Var const__59;
  
  public static final AFn const__62;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new serialize.fn__40836());
    const__3.setMeta((IPersistentMap)const__12);
    const__3.bindRoot(new serialize.valid_version_QMARK_());
    const__13.setMeta((IPersistentMap)const__16);
    const__13.bindRoot(new serialize.read_version_byte());
    const__17.setMeta((IPersistentMap)const__20);
    const__17.bindRoot(new serialize.make_versioned_byte_array_output_stream());
    const__21.setMeta((IPersistentMap)const__24);
    const__21.bindRoot(new serialize.version_PLUS_input_stream_from_versioned_bytes());
    const__25.setMeta((IPersistentMap)const__28);
    const__25.bindRoot(new serialize.serialize());
    const__29.setMeta((IPersistentMap)const__32);
    const__29.bindRoot(new serialize.deserialize());
    const__33.setMeta((IPersistentMap)const__35);
    const__33.bindRoot(RT.mapUniqueKeys(new Object[] { const__36, RT.mapUniqueKeys(new Object[] { const__37, RT.mapUniqueKeys(new Object[] { const__38, const__39.getRawRoot(), const__40, new serialize.fn__40850(), const__41, const__42.getRawRoot(), const__43, const__44.getRawRoot(), const__45, Boolean.TRUE }) }), const__46, const__37 }));
    const__47.setMeta((IPersistentMap)const__49);
    const__47




























































      
      .bindRoot(((IFn)const__50.getRawRoot()).invoke(const__33.getRawRoot(), Tuple.create(const__36, ((IFn)const__46).invoke(const__33.getRawRoot()))));
    const__51.setMeta((IPersistentMap)const__54);
    const__51.bindRoot(new serialize.with_default_encodings());
    const__55.setMeta((IPersistentMap)const__58);
    const__55.bindRoot(new serialize.deserialize_with_defaults());
    const__59.setMeta((IPersistentMap)const__62);
    const__59.bindRoot(new serialize.serialize_with_defaults());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "synchrony.serialize");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("synchrony.serialize", "valid-version?");
    const__12 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "version")) })), RT.keyword(null, "doc"), "A valid version can be any value less than 127. Values over 127 are\n  excluded so that we can ignore deprecated msgpack-serialized map objects\n  which have the high bit set.", RT.keyword(null, "line"), Integer.valueOf(10), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/serialize.clj" });
    const__13 = (Var)RT.var("synchrony.serialize", "read-version-byte");
    const__16 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "data")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "bytes") }))) })), RT.keyword(null, "line"), Integer.valueOf(17), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/serialize.clj" });
    const__17 = (Var)RT.var("synchrony.serialize", "make-versioned-byte-array-output-stream");
    const__20 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "version"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "valid-version?"), Symbol.intern(null, "version") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(21), RT.keyword(null, "column"), Integer.valueOf(10) }))) })) })), RT.keyword(null, "line"), Integer.valueOf(20), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/serialize.clj" });
    const__21 = (Var)RT.var("synchrony.serialize", "version+input-stream-from-versioned-bytes");
    const__24 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "data")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "bytes") }))) })), RT.keyword(null, "line"), Integer.valueOf(27), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/serialize.clj" });
    const__25 = (Var)RT.var("synchrony.serialize", "serialize");
    const__28 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "data"), Symbol.intern(null, "serialize-opts")) })), RT.keyword(null, "line"), Integer.valueOf(33), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/serialize.clj" });
    const__29 = (Var)RT.var("synchrony.serialize", "deserialize");
    const__32 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "data"), Symbol.intern(null, "serialize-opts")) })), RT.keyword(null, "line"), Integer.valueOf(42), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/serialize.clj" });
    const__33 = (Var)RT.var("synchrony.serialize", "default-serialize-opts");
    const__35 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(49), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/serialize.clj" });
    const__36 = (Keyword)RT.keyword(null, "versioned");
    const__37 = Long.valueOf(1L);
    const__38 = (Keyword)RT.keyword(null, "write-bytes");
    const__39 = (Var)RT.var("synchrony.codecs", "write-bytes");
    const__40 = (Keyword)RT.keyword(null, "read-bytes");
    const__41 = (Keyword)RT.keyword("codec.marshal", "marshaller");
    const__42 = (Var)RT.var("synchrony.marshal", "marshaller");
    const__43 = (Keyword)RT.keyword("codec.marshal", "unmarshaller");
    const__44 = (Var)RT.var("synchrony.marshal", "unmarshaller");
    const__45 = (Keyword)RT.keyword(null, "autodecode");
    const__46 = (Keyword)RT.keyword(null, "encode-version");
    const__47 = (Var)RT.var("synchrony.serialize", "default-encode-opts");
    const__49 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(61), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/serialize.clj" });
    const__50 = (Var)RT.var("clojure.core", "get-in");
    const__51 = (Var)RT.var("synchrony.serialize", "with-default-encodings");
    const__54 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "data"), Symbol.intern(null, "crypto-key")) })), RT.keyword(null, "line"), Integer.valueOf(65), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/serialize.clj" });
    const__55 = (Var)RT.var("synchrony.serialize", "deserialize-with-defaults");
    const__58 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "data")), Tuple.create(Symbol.intern(null, "data"), Symbol.intern(null, "serialize-opts")) })), RT.keyword(null, "line"), Integer.valueOf(75), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/serialize.clj" });
    const__59 = (Var)RT.var("synchrony.serialize", "serialize-with-defaults");
    const__62 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "data")), Tuple.create(Symbol.intern(null, "data"), Symbol.intern(null, "serialize-opts")) })), RT.keyword(null, "line"), Integer.valueOf(79), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/serialize.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("synchrony.serialize__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
