package synchrony;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class dsl__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__12;
  
  public static final Var const__13;
  
  public static final AFn const__16;
  
  public static final Var const__17;
  
  public static final AFn const__20;
  
  public static final Var const__21;
  
  public static final AFn const__25;
  
  public static final Var const__26;
  
  public static final AFn const__29;
  
  public static final Var const__30;
  
  public static final AFn const__33;
  
  public static final Var const__34;
  
  public static final AFn const__37;
  
  public static final Var const__38;
  
  public static final AFn const__41;
  
  public static final Var const__42;
  
  public static final AFn const__45;
  
  public static final Var const__46;
  
  public static final AFn const__49;
  
  public static final Var const__50;
  
  public static final AFn const__53;
  
  public static final Var const__54;
  
  public static final AFn const__57;
  
  public static final Var const__58;
  
  public static final AFn const__61;
  
  public static final Var const__62;
  
  public static final AFn const__65;
  
  public static final Var const__66;
  
  public static final AFn const__69;
  
  public static final Var const__70;
  
  public static final AFn const__73;
  
  public static final Var const__74;
  
  public static final AFn const__77;
  
  public static final Var const__78;
  
  public static final AFn const__81;
  
  public static final Var const__82;
  
  public static final AFn const__85;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new dsl.fn__36745());
    const__3.setMeta((IPersistentMap)const__12);
    const__3.bindRoot(new dsl.eval_tree());
    const__13.setMeta((IPersistentMap)const__16);
    const__13.bindRoot(new dsl.compile_tree());
    const__17.setMeta((IPersistentMap)const__20);
    const__17.bindRoot(new dsl.tree());
    ((Var)const__17)






















































      
      .setMacro();
    const__21.setMeta((IPersistentMap)const__25);
    const__21.bindRoot(new dsl.make_tree());
    const__26.setMeta((IPersistentMap)const__29);
    const__26.bindRoot(new dsl.length_xor_children_QMARK_());
    const__30.setMeta((IPersistentMap)const__33);
    const__30.bindRoot(new dsl.retain());
    const__34.setMeta((IPersistentMap)const__37);
    const__34.bindRoot(new dsl.delete());
    const__38.setMeta((IPersistentMap)const__41);
    const__38.bindRoot(new dsl.map_to_op_map());
    const__42.setMeta((IPersistentMap)const__45);
    const__42.bindRoot(new dsl.op_map_to_map());
    const__46.setMeta((IPersistentMap)const__49);
    const__46.bindRoot(new dsl.update());
    const__50.setMeta((IPersistentMap)const__53);
    const__50.bindRoot(new dsl.node_from_dsl());
    const__54.setMeta((IPersistentMap)const__57);
    const__54.bindRoot(new dsl.node_to_dsl());
    const__58.setMeta((IPersistentMap)const__61);
    const__58.bindRoot(new dsl.insert());
    const__62.setMeta((IPersistentMap)const__65);
    const__62.bindRoot(new dsl.source());
    const__66.setMeta((IPersistentMap)const__69);
    const__66.bindRoot(new dsl.target());
    const__70.setMeta((IPersistentMap)const__73);
    const__70.bindRoot(new dsl.tree_dsl());
    const__74.setMeta((IPersistentMap)const__77);
    const__74.bindRoot(new dsl.delta_dsl());
    const__78.setMeta((IPersistentMap)const__81);
    const__78.bindRoot(new dsl.dom_delta());
    ((Var)const__78)

























































































































































































      
      .setMacro();
    const__82.setMeta((IPersistentMap)const__85);
    const__82.bindRoot(new dsl.dom_tree());
    ((Var)const__82)








      
      .setMacro();
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "synchrony.dsl");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("synchrony.dsl", "eval-tree");
    const__12 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "node")) })), RT.keyword(null, "doc"), "Similar to compile-tree, except evaluates the dsl to avoid 'Method\n code too large!' errors that somtimes occur with big tree dsls and\n compile-tree.\n", RT.keyword(null, "line"), Integer.valueOf(16), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/dsl.cljc" });
    const__13 = (Var)RT.var("synchrony.dsl", "compile-tree");
    const__16 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "node")) })), RT.keyword(null, "line"), Integer.valueOf(39), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/dsl.cljc" });
    const__17 = (Var)RT.var("synchrony.dsl", "tree");
    const__20 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "line"), Integer.valueOf(57), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/dsl.cljc" });
    const__21 = (Var)RT.var("synchrony.dsl", "make-tree");
    const__25 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "node")) })), RT.keyword(null, "line"), Integer.valueOf(60), RT.keyword(null, "column"), Integer.valueOf(9), RT.keyword(null, "file"), "synchrony/dsl.cljc" });
    const__26 = (Var)RT.var("synchrony.dsl", "length-xor-children?");
    const__29 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "length-xor-children")) })), RT.keyword(null, "line"), Integer.valueOf(63), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/dsl.cljc" });
    const__30 = (Var)RT.var("synchrony.dsl", "retain");
    const__33 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "length-xor-children"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "length-xor-children?"), Symbol.intern(null, "length-xor-children") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(68), RT.keyword(null, "column"), Integer.valueOf(10) }))) })) })), RT.keyword(null, "line"), Integer.valueOf(67), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/dsl.cljc" });
    const__34 = (Var)RT.var("synchrony.dsl", "delete");
    const__37 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "length-xor-children"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "length-xor-children?"), Symbol.intern(null, "length-xor-children") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(81), RT.keyword(null, "column"), Integer.valueOf(10) }))) })) })), RT.keyword(null, "line"), Integer.valueOf(80), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/dsl.cljc" });
    const__38 = (Var)RT.var("synchrony.dsl", "map-to-op-map");
    const__41 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m")) })), RT.keyword(null, "line"), Integer.valueOf(93), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/dsl.cljc" });
    const__42 = (Var)RT.var("synchrony.dsl", "op-map-to-map");
    const__45 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m")) })), RT.keyword(null, "line"), Integer.valueOf(101), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/dsl.cljc" });
    const__46 = (Var)RT.var("synchrony.dsl", "update");
    const__49 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "diff"), Symbol.intern(null, "&"), Symbol.intern(null, "children")) })), RT.keyword(null, "line"), Integer.valueOf(112), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/dsl.cljc" });
    const__50 = (Var)RT.var("synchrony.dsl", "node-from-dsl");
    const__53 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "node")) })), RT.keyword(null, "line"), Integer.valueOf(122), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/dsl.cljc" });
    const__54 = (Var)RT.var("synchrony.dsl", "node-to-dsl");
    const__57 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "node")) })), RT.keyword(null, "line"), Integer.valueOf(137), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/dsl.cljc" });
    const__58 = (Var)RT.var("synchrony.dsl", "insert");
    const__61 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "node"), Symbol.intern(null, "&"), Symbol.intern(null, "children")) })), RT.keyword(null, "line"), Integer.valueOf(157), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/dsl.cljc" });
    const__62 = (Var)RT.var("synchrony.dsl", "source");
    const__65 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "id"), Symbol.intern(null, "&"), Symbol.intern(null, "children")) })), RT.keyword(null, "line"), Integer.valueOf(180), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/dsl.cljc" });
    const__66 = (Var)RT.var("synchrony.dsl", "target");
    const__69 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "id"), Symbol.intern(null, "&"), Symbol.intern(null, "etc")) })), RT.keyword(null, "line"), Integer.valueOf(186), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/dsl.cljc" });
    const__70 = (Var)RT.var("synchrony.dsl", "tree-dsl");
    const__73 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "tree")) })), RT.keyword(null, "line"), Integer.valueOf(192), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/dsl.cljc" });
    const__74 = (Var)RT.var("synchrony.dsl", "delta-dsl");
    const__77 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "delta")) })), RT.keyword(null, "line"), Integer.valueOf(205), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/dsl.cljc" });
    const__78 = (Var)RT.var("synchrony.dsl", "dom-delta");
    const__81 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "dsl")) })), RT.keyword(null, "line"), Integer.valueOf(244), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/dsl.cljc" });
    const__82 = (Var)RT.var("synchrony.dsl", "dom-tree");
    const__85 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "dsl")) })), RT.keyword(null, "line"), Integer.valueOf(254), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/dsl.cljc" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("synchrony.dsl__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
