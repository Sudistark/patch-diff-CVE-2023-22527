package synchrony.codecs;

import clojure.lang.APersistentMap;
import clojure.lang.Associative;
import clojure.lang.Counted;
import clojure.lang.IFn;
import clojure.lang.IHashEq;
import clojure.lang.IKeywordLookup;
import clojure.lang.ILookup;
import clojure.lang.ILookupThunk;
import clojure.lang.IMapEntry;
import clojure.lang.IObj;
import clojure.lang.IPersistentCollection;
import clojure.lang.IPersistentMap;
import clojure.lang.IPersistentVector;
import clojure.lang.IRecord;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.MapEntry;
import clojure.lang.Numbers;
import clojure.lang.PersistentHashSet;
import clojure.lang.PersistentVector;
import clojure.lang.RT;
import clojure.lang.RecordIterator;
import clojure.lang.Tuple;
import clojure.lang.Util;
import clojure.lang.Var;
import java.io.Serializable;
import java.util.Collection;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

public final class MsgpackDecoder implements DecodeData, IRecord, IHashEq, IObj, ILookup, IKeywordLookup, IPersistentMap, Map, Serializable {
  public final Object __meta;
  
  public final Object __extmap;
  
  int __hash;
  
  int __hasheq;
  
  public static final Var const__0 = (Var)RT.var("clojure.core", "set"), const__1 = (Var)RT.var("clojure.core", "vals"), const__2 = (Var)RT.var("clojure.core", "keys"), const__4 = (Var)RT.var("clojure.core", "some"), const__7 = (Var)RT.var("clojure.core", "contains?"), const__8 = (Var)RT.var("clojure.core", "dissoc"), const__9 = (Var)RT.var("clojure.core", "with-meta"), const__10 = (Var)RT.var("clojure.core", "into"), const__11 = (Var)RT.var("clojure.core", "not-empty"), const__12 = (Var)RT.var("clojure.core", "identical?"), const__13 = (Var)RT.var("clojure.core", "assoc"), const__14 = (Var)RT.var("clojure.core", "seq"), const__15 = (Var)RT.var("clojure.core", "concat"), const__16 = (Var)RT.var("clojure.core", "not"), const__17 = (Var)RT.var("clojure.core", "class"), const__18 = (Var)RT.var("clojure.core", "imap-cons"), const__19 = (Var)RT.var("clojure.core", "str"), const__28 = (Var)RT.var("synchrony.msgpack", "deserialize-msgpack");
  
  public MsgpackDecoder(Object paramObject1, Object paramObject2, int paramInt1, int paramInt2) { this.__meta = paramObject1;
    this.__extmap = paramObject2;
    this.__hash = paramInt1;
    this.__hasheq = paramInt2; }
  
  public MsgpackDecoder() { this(null, null, 0, 0); }
  
  public MsgpackDecoder(Object paramObject1, Object paramObject2) { this(paramObject1, paramObject2, 0, 0); }
  
  public static IPersistentVector getBasis() { return Tuple.create(); }
  
  public static MsgpackDecoder create(IPersistentMap paramIPersistentMap) { return new MsgpackDecoder(null, RT.seqOrElse(paramIPersistentMap), 0, 0); }
  
  public Object decode_data(Object data, Object decode_opts) { data = null;
    this = null;
    return ((IFn)const__28.getRawRoot()).invoke(data); }
  
  public int hasheq() {
    int hq__7768__auto__38763 = this.__hasheq, h__7769__auto__38762 = RT.intCast(0xFFFFFFFF823964DBL ^ APersistentMap.mapHasheq((IPersistentMap)this));
    this.__hasheq = h__7769__auto__38762;
    return (hq__7768__auto__38763 == 0L) ? h__7769__auto__38762 : hq__7768__auto__38763;
  }
  
  public int hashCode() {
    int hash__7771__auto__38765 = this.__hash, h__7772__auto__38764 = APersistentMap.mapHash((IPersistentMap)this);
    this.__hash = h__7772__auto__38764;
    return (hash__7771__auto__38765 == 0L) ? h__7772__auto__38764 : hash__7771__auto__38765;
  }
  
  public boolean equals(Object G__38755) { G__38755 = null;
    return APersistentMap.mapEquals((IPersistentMap)this, G__38755); }
  
  public IPersistentMap meta() { return (IPersistentMap)this.__meta; }
  
  public IObj withMeta(IPersistentMap G__38755) { G__38755 = null;
    return (IObj)new MsgpackDecoder(G__38755, this.__extmap, this.__hash, this.__hasheq); }
  
  public Object valAt(Object k__7777__auto__) { k__7777__auto__ = null;
    return ((ILookup)this).valAt(k__7777__auto__, null); }
  
  public Object valAt(Object k__7779__auto__, Object else__7780__auto__) { k__7779__auto__;
    k__7779__auto__ = null;
    else__7780__auto__ = null;
    this = null;
    return RT.get(this.__extmap, k__7779__auto__, else__7780__auto__); }
  
  public ILookupThunk getLookupThunk(Keyword k__7782__auto__) { ((IFn)const__17.getRawRoot()).invoke(this);
    k__7782__auto__ = null;
    k__7782__auto__;
    return (ILookupThunk)null; }
  
  public int count() { return RT.intCast(Numbers.add(0L, RT.count(this.__extmap))); }
  
  public IPersistentCollection empty() { throw (Throwable)new UnsupportedOperationException((String)((IFn)const__19.getRawRoot()).invoke("Can't create empty: ", "synchrony.codecs.MsgpackDecoder")); }
  
  public IPersistentCollection cons(Object e__7786__auto__) { e__7786__auto__ = null;
    this = null;
    return (IPersistentCollection)((IFn)const__18).invoke(this, e__7786__auto__); }
  
  public boolean equiv(Object G__38755) {
    boolean or__5516__auto__38766 = Util.identical(this, G__38755);
    Object G__38755 = G__38755 = null;
    G__38755 = null;
    return RT.booleanCast(or__5516__auto__38766 ? (or__5516__auto__38766 ? Boolean.TRUE : Boolean.FALSE) : (Util.identical(((IFn)const__17.getRawRoot()).invoke(this), ((IFn)const__17.getRawRoot()).invoke(G__38755)) ? (Util.equiv(this.__extmap, ((MsgpackDecoder)G__38755).__extmap) ? Boolean.TRUE : Boolean.FALSE) : null));
  }
  
  public boolean containsKey(Object k__7789__auto__) { k__7789__auto__ = null;
    this = null;
    return ((Boolean)((IFn)const__16.getRawRoot()).invoke(Util.identical(this, ((ILookup)this).valAt(k__7789__auto__, this)) ? Boolean.TRUE : Boolean.FALSE)).booleanValue(); }
  
  public IMapEntry entryAt(Object k__7791__auto__) {
    Object v__7792__auto__38767 = ((ILookup)this).valAt(k__7791__auto__, this);
    k__7791__auto__ = null;
    v__7792__auto__38767 = null;
    this = null;
    return (IMapEntry)(Util.identical(this, v__7792__auto__38767) ? null : MapEntry.create(k__7791__auto__, v__7792__auto__38767));
  }
  
  public ISeq seq() { this = null;
    return (ISeq)((IFn)const__14.getRawRoot()).invoke(((IFn)const__15.getRawRoot()).invoke(PersistentVector.EMPTY, this.__extmap)); }
  
  public Iterator iterator() { return (Iterator)new RecordIterator((ILookup)this, (IPersistentVector)PersistentVector.EMPTY, (Iterator)RT.iter(this.__extmap)); }
  
  public IPersistentMap assoc(Object k__7796__auto__, Object G__38755) { const__12.getRawRoot();
    k__7796__auto__;
    k__7796__auto__ = null;
    G__38755 = null;
    return (IPersistentMap)new MsgpackDecoder(this.__meta, ((IFn)const__13.getRawRoot()).invoke(this.__extmap, k__7796__auto__, G__38755)); }
  
  public IPersistentMap without(Object k__7798__auto__) { if (((IFn)const__7.getRawRoot()).invoke(PersistentHashSet.EMPTY, k__7798__auto__) != null) {
      if (((IFn)const__7.getRawRoot()).invoke(PersistentHashSet.EMPTY, k__7798__auto__) != Boolean.FALSE) {
        k__7798__auto__ = null;
        this = null;
      } 
    } else {
      ((IFn)const__7.getRawRoot()).invoke(PersistentHashSet.EMPTY, k__7798__auto__);
    } 
    k__7798__auto__ = null;
    return (IPersistentMap)new MsgpackDecoder(this.__meta, ((IFn)const__11.getRawRoot()).invoke(((IFn)const__8.getRawRoot()).invoke(this.__extmap, k__7798__auto__))); }
  
  public int size() { this = null;
    return ((Counted)this).count(); }
  
  public boolean isEmpty() { return Util.equiv(0L, ((Counted)this).count()); }
  
  public boolean containsValue(Object v__7802__auto__) { v__7802__auto__ = null;
    return RT.booleanCast(((IFn)const__4.getRawRoot()).invoke(RT.set(new Object[] { v__7802__auto__ }, ), ((IFn)const__1.getRawRoot()).invoke(this))); }
  
  public Object get(Object k__7804__auto__) { k__7804__auto__ = null;
    return ((ILookup)this).valAt(k__7804__auto__); }
  
  public Object put(Object k__7806__auto__, Object v__7807__auto__) { throw (Throwable)new UnsupportedOperationException(); }
  
  public Object remove(Object k__7809__auto__) { throw (Throwable)new UnsupportedOperationException(); }
  
  public void putAll(Map m__7811__auto__) { throw (Throwable)new UnsupportedOperationException(); }
  
  public void clear() { throw (Throwable)new UnsupportedOperationException(); }
  
  public Set keySet() { this = null;
    return (Set)((IFn)const__0.getRawRoot()).invoke(((IFn)const__2.getRawRoot()).invoke(this)); }
  
  public Collection values() { this = null;
    return (Collection)((IFn)const__1.getRawRoot()).invoke(this); }
  
  public Set entrySet() { this = null;
    return (Set)((IFn)const__0.getRawRoot()).invoke(this); }
}
