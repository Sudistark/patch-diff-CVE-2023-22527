package synchrony.data;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class snapshots__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__9;
  
  public static final Var const__10;
  
  public static final Var const__11;
  
  public static final AFn const__13;
  
  public static final Var const__14;
  
  public static final Var const__15;
  
  public static final AFn const__20;
  
  public static final Var const__21;
  
  public static final AFn const__24;
  
  public static final Var const__25;
  
  public static final AFn const__28;
  
  public static final Var const__29;
  
  public static final AFn const__32;
  
  public static final Var const__33;
  
  public static final AFn const__36;
  
  public static final Var const__37;
  
  public static final AFn const__40;
  
  public static final Var const__41;
  
  public static final AFn const__44;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new snapshots.fn__44851());
    const__3.setMeta((IPersistentMap)const__9);
    const__3.bindRoot(const__10.getRawRoot());
    const__11.setMeta((IPersistentMap)const__13);
    const__11.bindRoot(const__14.getRawRoot());
    const__15.setMeta((IPersistentMap)const__20);
    const__15.bindRoot(new snapshots.duplicate_key_error());
    const__21.setMeta((IPersistentMap)const__24);
    const__21.bindRoot(new snapshots.entity_id_from_key());
    const__25.setMeta((IPersistentMap)const__28);
    const__25.bindRoot(new snapshots.contentid_from_key());
    const__29.setMeta((IPersistentMap)const__32);
    const__29.bindRoot(new snapshots.put_BANG_());
    const__33.setMeta((IPersistentMap)const__36);
    const__33.bindRoot(new snapshots.get_BANG_());
    const__37.setMeta((IPersistentMap)const__40);
    const__37.bindRoot(new snapshots.delete_BANG_());
    const__41.setMeta((IPersistentMap)const__44);
    const__41.bindRoot(new snapshots.get_all_BANG_());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "synchrony.data.snapshots");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("synchrony.data.snapshots", "schema");
    const__9 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(28), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data/snapshots.clj" });
    const__10 = (Var)RT.var("synchrony.querydsl.db", "schema");
    const__11 = (Var)RT.var("synchrony.data.snapshots", "table");
    const__13 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(29), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data/snapshots.clj" });
    const__14 = (Var)RT.var("synchrony.querydsl.db", "snapshots-table");
    const__15 = (Var)RT.var("synchrony.data.snapshots", "duplicate-key-error");
    const__20 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "key"), Symbol.intern(null, "cause")) })), RT.keyword(null, "line"), Integer.valueOf(33), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data/snapshots.clj" });
    const__21 = (Var)RT.var("synchrony.data.snapshots", "entity-id-from-key");
    const__24 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "key")) })), RT.keyword(null, "line"), Integer.valueOf(36), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data/snapshots.clj" });
    const__25 = (Var)RT.var("synchrony.data.snapshots", "contentid-from-key");
    const__28 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "key")) })), RT.keyword(null, "line"), Integer.valueOf(39), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data/snapshots.clj" });
    const__29 = (Var)RT.var("synchrony.data.snapshots", "put!");
    const__32 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "k"), Symbol.intern(null, "v")) })), RT.keyword(null, "line"), Integer.valueOf(42), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data/snapshots.clj" });
    const__33 = (Var)RT.var("synchrony.data.snapshots", "get!");
    const__36 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "k")) })), RT.keyword(null, "line"), Integer.valueOf(65), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data/snapshots.clj" });
    const__37 = (Var)RT.var("synchrony.data.snapshots", "delete!");
    const__40 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "k")) })), RT.keyword(null, "line"), Integer.valueOf(78), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data/snapshots.clj" });
    const__41 = (Var)RT.var("synchrony.data.snapshots", "get-all!");
    const__44 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(89), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data/snapshots.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("synchrony.data.snapshots__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
