package synchrony.data;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class content_reconciliation__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__12;
  
  public static final Var const__13;
  
  public static final AFn const__16;
  
  public static final Var const__17;
  
  public static final AFn const__20;
  
  public static final Var const__21;
  
  public static final AFn const__24;
  
  public static void load() { LockingTransaction.runInTransaction((Callable)new content_reconciliation.fn__61066());
    const__3.setMeta((IPersistentMap)const__12);
    const__3.bindRoot(new content_reconciliation.confluence_rev_QMARK_());
    const__13.setMeta((IPersistentMap)const__16);
    const__13.bindRoot(new content_reconciliation.fetch_revisions_reversed());
    const__17.setMeta((IPersistentMap)const__20);
    const__17.bindRoot(new content_reconciliation.find_parent_candidate());
    const__21.setMeta((IPersistentMap)const__24);
    const__21.bindRoot(new content_reconciliation.process_revision_info()); }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "synchrony.data.content-reconciliation");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("synchrony.data.content-reconciliation", "confluence-rev?");
    const__12 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "rev")) })), RT.keyword(null, "doc"), "Confluence needs an extended sequence check across all content\n  reconciliation revisions to detect whether a recovery process needs to\n  be initiated. This covers the case where confluence is restored from a\n  backup, in which case the sequence check will fail and confluence will\n  reset the state of the document to its own version of the page.\n\n  TODO: This check can be removed together with Confluence's recovery\n  process when Synchrony becomes the source of truth for document\n  content.", RT.keyword(null, "line"), Integer.valueOf(12), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data/content_reconciliation.clj" });
    const__13 = (Var)RT.var("synchrony.data.content-reconciliation", "fetch-revisions-reversed");
    const__16 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "lower-bound?"), Symbol.intern(null, "entity-desc"), Symbol.intern(null, "upper-bound-part-id")) })), RT.keyword(null, "line"), Integer.valueOf(25), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data/content_reconciliation.clj" });
    const__17 = (Var)RT.var("synchrony.data.content-reconciliation", "find-parent-candidate");
    const__20 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "entity-desc"), Symbol.intern(null, "ancestor"), Symbol.intern(null, "rev")) })), RT.keyword(null, "line"), Integer.valueOf(40), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data/content_reconciliation.clj" });
    const__21 = (Var)RT.var("synchrony.data.content-reconciliation", "process-revision-info");
    const__24 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "entity-desc"), Symbol.intern(null, "revision-info")) })), RT.keyword(null, "line"), Integer.valueOf(108), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data/content_reconciliation.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("synchrony.data.content_reconciliation__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
