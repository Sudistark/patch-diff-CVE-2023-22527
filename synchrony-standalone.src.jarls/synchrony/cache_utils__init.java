package synchrony;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class cache_utils__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__9;
  
  public static final Var const__10;
  
  public static final Var const__11;
  
  public static final Var const__12;
  
  public static final Var const__13;
  
  public static final AFn const__18;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new cache_utils.fn__23714());
    const__3.setMeta((IPersistentMap)const__9);
    const__3


      
      .bindRoot(((IFn)const__10.getRawRoot()).invoke(const__11.getRawRoot(), const__12.getRawRoot()));
    const__13.setMeta((IPersistentMap)const__18);
    const__13.bindRoot(new cache_utils.refreshing_cached_fetch());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "synchrony.cache-utils");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("synchrony.cache-utils", "key");
    const__9 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(5), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/cache_utils.clj" });
    const__10 = (Var)RT.var("clojure.core", "comp");
    const__11 = (Var)RT.var("clojure.core", "seq");
    const__12 = (Var)RT.var("clojure.core", "list");
    const__13 = (Var)RT.var("synchrony.cache-utils", "refreshing-cached-fetch");
    const__18 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "cache"), Symbol.intern(null, "refresh-ms"), Symbol.intern(null, "now-ms-fn"), Symbol.intern(null, "cache?")), RT.keyword(null, "or"), RT.map(new Object[] { Symbol.intern(null, "cache?"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "constantly"), Boolean.TRUE }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(12), RT.keyword(null, "column"), Integer.valueOf(17) })) }), RT.keyword(null, "as"), Symbol.intern(null, "opts") }), Symbol.intern(null, "fetch-fn"), Symbol.intern(null, "&"), Symbol.intern(null, "args")) })), RT.keyword(null, "doc"), "Fetches a value using fetch-fn asynchronously and caches the\n  result. Refreshes the value after refresh-ms. Continues to serve the\n  old value until the refresh completes.", RT.keyword(null, "line"), Integer.valueOf(7), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/cache_utils.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("synchrony.cache_utils__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
