package synchrony.stream;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentArrayMap;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class type__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__9;
  
  public static final AFn const__112;
  
  public static final Var const__113;
  
  public static final AFn const__115;
  
  public static final Var const__116;
  
  public static final Var const__117;
  
  public static final AFn const__122;
  
  public static final Var const__123;
  
  public static final AFn const__126;
  
  public static final Var const__127;
  
  public static final AFn const__130;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new type.fn__64910());
    const__3.setMeta((IPersistentMap)const__9);
    const__3.bindRoot(const__112);
    const__113.setMeta((IPersistentMap)const__115);
    const__113






















































      
      .bindRoot(((IFn)const__116.getRawRoot()).invoke(new type.fn__64912(), PersistentArrayMap.EMPTY, const__3.getRawRoot()));
    const__117.setMeta((IPersistentMap)const__122);
    const__117.bindRoot(new type.to_message());
    const__123.setMeta((IPersistentMap)const__126);
    const__123.bindRoot(new type.empty_record());
    const__127.setMeta((IPersistentMap)const__130);
    const__127.bindRoot(new type.from_message());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "synchrony.stream.type");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("synchrony.stream.type", "types-to-tags");
    const__9 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(3), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/stream/type.clj" });
  }
  
  public static void __init1() {
    const__112 = (AFn)RT.map(new Object[] { 
          RT.classForName("ginga.async.multiplex.CloseOutMsg"), Long.valueOf(35L), RT.classForName("synchrony.history.Snapshot"), Long.valueOf(31L), RT.classForName("synchrony.operation.types.InsertVals"), Long.valueOf(26L), RT.classForName("synchrony.history.rev"), Long.valueOf(32L), RT.classForName("synchrony.history.History"), Long.valueOf(61L), 
          RT.classForName("synchrony.codecs.MarshalDecoder"), Long.valueOf(71L), RT.classForName("synchrony.operation.types.Insert"), Long.valueOf(25L), RT.classForName("synchrony.sync.messages.JoinRequest"), Long.valueOf(48L), RT.classForName("synchrony.sync.messages.Publish"), Long.valueOf(56L), RT.classForName("synchrony.operation.types.RetainRange"), Long.valueOf(21L), 
          RT.classForName("synchrony.operation.types.Target"), Long.valueOf(29L), RT.classForName("synchrony.operation.types.Replace"), Long.valueOf(27L), RT.classForName("synchrony.codecs.Aes256Gcm96Decoder"), Long.valueOf(73L), RT.classForName("synchrony.operation.types.Marker"), Long.valueOf(58L), RT.classForName("synchrony.sync.messages.AckMessage"), Long.valueOf(52L), 
          RT.classForName("synchrony.history.RevisionInfo"), Long.valueOf(60L), RT.classForName("ginga.async.multiplex.*Msg"), Long.valueOf(33L), RT.classForName("synchrony.sync.messages.Revision"), Long.valueOf(55L), RT.classForName("synchrony.data.types.SplitEventData"), Long.valueOf(68L), RT.classForName("synchrony.operation.types.SourceSeq"), Long.valueOf(28L), 
          RT.classForName("synchrony.sync.messages.LeaveRequest"), Long.valueOf(49L), RT.classForName("synchrony.chunking.ChunkedData"), Long.valueOf(65L), RT.classForName("synchrony.sync.messages.InitResponse"), Long.valueOf(47L), RT.classForName("ginga.async.haywire.WinMsg"), Long.valueOf(39L), RT.classForName("synchrony.codecs.SnappyDecoder"), Long.valueOf(72L), 
          RT.classForName("synchrony.sync.messages.TpRemoveRequest"), Long.valueOf(51L), RT.classForName("ginga.async.haywire.*Msg"), Long.valueOf(43L), RT.classForName("synchrony.codecs.EncodedData"), Long.valueOf(70L), RT.classForName("ginga.async.multiplex.WinMsg"), Long.valueOf(37L), RT.classForName("synchrony.sync.messages.Envelope"), Long.valueOf(44L), 
          RT.classForName("synchrony.operation.types.DeleteRange"), Long.valueOf(24L), RT.classForName("synchrony.codecs.MsgpackDecoder"), Long.valueOf(74L), RT.classForName("ginga.async.multiplex.CloseInMsg"), Long.valueOf(34L), RT.classForName("synchrony.history_store.part"), Long.valueOf(64L), RT.classForName("ginga.async.haywire.PongMsg"), Long.valueOf(41L), 
          RT.classForName("synchrony.sync.messages.ErrorMessage"), Long.valueOf(54L), RT.classForName("synchrony.sync.messages.TpRevisionRecord"), Long.valueOf(50L), RT.classForName("synchrony.codecs.ChunkingDecoder"), Long.valueOf(75L), RT.classForName("ginga.async.haywire.PingMsg"), Long.valueOf(40L), RT.classForName("synchrony.sync.messages.InitRequest"), Long.valueOf(46L), 
          RT.classForName("synchrony.data.types.SnapshotData"), Long.valueOf(69L), RT.classForName("synchrony.sync.messages.PingMessage"), Long.valueOf(53L), RT.classForName("synchrony.history_store.EventRef"), Long.valueOf(63L), RT.classForName("ginga.async.multiplex.OpenMsg"), Long.valueOf(36L), RT.classForName("synchrony.history_store.Event"), Long.valueOf(62L), 
          RT.classForName("synchrony.sync.messages.RevisionRecord"), Long.valueOf(45L), RT.classForName("synchrony.history.revision"), Long.valueOf(30L), RT.classForName("ginga.async.haywire.CloseMsg"), Long.valueOf(42L), RT.classForName("ginga.async.multiplex.ErrorMsg"), Long.valueOf(38L), RT.classForName("synchrony.data.types.MoreEventData"), Long.valueOf(67L), 
          RT.classForName("synchrony.data.types.EventData"), Long.valueOf(66L) });
    const__113 = (Var)RT.var("synchrony.stream.type", "tags-to-types");
    const__115 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(56), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/stream/type.clj" });
    const__116 = (Var)RT.var("clojure.core", "reduce-kv");
    const__117 = (Var)RT.var("synchrony.stream.type", "to-message");
    const__122 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "doc"), "converts map data into typed data\n \n   (-> [39 1 256 20000]\n       (marshal/from-wire)\n       (to-message))\n   => {:type :win, :seq 1, :cnt 256, :size 20000, :tag 39}\n \n   (-> [40 2]\n       (marshal/from-wire)\n       (to-message))\n   => {:type :ping, :seq 2, :tag 40}", RT.keyword(null, "line"), Integer.valueOf(62), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/stream/type.clj" });
    const__123 = (Var)RT.var("synchrony.stream.type", "empty-record");
    const__126 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "type")) })), RT.keyword(null, "doc"), "creates an empty record \n \n   (type (empty-record synchrony.sync.messages.Publish))\n   => synchrony.sync.messages.Publish", RT.keyword(null, "line"), Integer.valueOf(88), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/stream/type.clj" });
    const__127 = (Var)RT.var("synchrony.stream.type", "from-message");
    const__130 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "doc"), "converts map data into typed data\n   \n   (-> {:type :win, :seq 1, :cnt 256, :size 20000, :tag 39}\n       (from-message)\n       (marshal/to-wire))\n   => [39 1 256 20000]\n \n   (-> {:type :ping, :seq 2, :tag 40}\n       (from-message)\n       (marshal/to-wire))\n   => [40 2]", RT.keyword(null, "line"), Integer.valueOf(101), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/stream/type.clj" });
  }
  
  static  {
    __init0();
    __init1();
    Compiler.pushNSandLoader(RT.classForName("synchrony.stream.type__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
