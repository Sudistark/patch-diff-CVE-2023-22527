package synchrony.stream.layer;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class common__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__11;
  
  public static final Var const__12;
  
  public static final AFn const__15;
  
  public static final Var const__16;
  
  public static final AFn const__21;
  
  public static void load() { LockingTransaction.runInTransaction((Callable)new common.fn__64927());
    const__3.setMeta((IPersistentMap)const__11);
    const__3.bindRoot(new common.current_count());
    const__12.setMeta((IPersistentMap)const__15);
    const__12.bindRoot(new common.increment_count());
    const__16.setMeta((IPersistentMap)const__21);
    const__16.bindRoot(new common.transform_stream()); }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "synchrony.stream.layer.common");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("synchrony.stream.layer.common", "current-count");
    const__11 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "state")), RT.keyword(null, "as"), Symbol.intern(null, "conn") })) })), RT.keyword(null, "line"), Integer.valueOf(4), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/stream/layer/common.clj" });
    const__12 = (Var)RT.var("synchrony.stream.layer.common", "increment-count");
    const__15 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "state")), RT.keyword(null, "as"), Symbol.intern(null, "conn") })) })), RT.keyword(null, "line"), Integer.valueOf(8), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/stream/layer/common.clj" });
    const__16 = (Var)RT.var("synchrony.stream.layer.common", "transform-stream");
    const__21 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "base"), Symbol.intern(null, "source-trans"), Symbol.intern(null, "sink-trans")) })), RT.keyword(null, "doc"), "given a spliced stream, add an additional layer\n \n   (let [a-in (stream/stream)\n         a-out (stream/stream)\n         a (stream/splice a-out a-in)\n         b (transform-stream a inc dec)]\n     (stream/put! a-in 1)\n     (stream/put! b 1)\n    [@(stream/take! b)\n      @(stream/take! a-out)])\n   => [2 0]", RT.keyword(null, "added"), "0.1", RT.keyword(null, "line"), Integer.valueOf(13), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "synchrony/stream/layer/common.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("synchrony.stream.layer.common__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
