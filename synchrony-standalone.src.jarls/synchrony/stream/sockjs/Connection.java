package synchrony.stream.sockjs;

import clojure.lang.APersistentMap;
import clojure.lang.Associative;
import clojure.lang.Counted;
import clojure.lang.IFn;
import clojure.lang.IHashEq;
import clojure.lang.IKeywordLookup;
import clojure.lang.ILookup;
import clojure.lang.ILookupThunk;
import clojure.lang.IMapEntry;
import clojure.lang.IObj;
import clojure.lang.IPersistentCollection;
import clojure.lang.IPersistentMap;
import clojure.lang.IPersistentVector;
import clojure.lang.IRecord;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.KeywordLookupSite;
import clojure.lang.MapEntry;
import clojure.lang.Numbers;
import clojure.lang.PersistentHashSet;
import clojure.lang.PersistentVector;
import clojure.lang.RT;
import clojure.lang.RecordIterator;
import clojure.lang.Tuple;
import clojure.lang.Util;
import clojure.lang.Var;
import java.io.Serializable;
import java.util.Collection;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

public final class Connection implements IRecord, IHashEq, IObj, ILookup, IKeywordLookup, IPersistentMap, Map, Serializable {
  public final Object __meta;
  
  public final Object __extmap;
  
  int __hash;
  
  int __hasheq;
  
  public static final Var const__0 = (Var)RT.var("clojure.core", "set");
  
  public static final Var const__1 = (Var)RT.var("clojure.core", "vals");
  
  public static final Var const__2 = (Var)RT.var("clojure.core", "keys");
  
  public static final Var const__4 = (Var)RT.var("clojure.core", "some");
  
  public static final Var const__7 = (Var)RT.var("clojure.core", "contains?");
  
  public static final Var const__8 = (Var)RT.var("clojure.core", "dissoc");
  
  public static final Var const__9 = (Var)RT.var("clojure.core", "with-meta");
  
  public static final Var const__10 = (Var)RT.var("clojure.core", "into");
  
  public static final Var const__11 = (Var)RT.var("clojure.core", "not-empty");
  
  public static final Var const__12 = (Var)RT.var("clojure.core", "identical?");
  
  public static final Var const__13 = (Var)RT.var("clojure.core", "assoc");
  
  public static final Var const__14 = (Var)RT.var("clojure.core", "seq");
  
  public static final Var const__15 = (Var)RT.var("clojure.core", "concat");
  
  public static final Var const__16 = (Var)RT.var("clojure.core", "not");
  
  public static final Var const__17 = (Var)RT.var("clojure.core", "class");
  
  public static final Var const__18 = (Var)RT.var("clojure.core", "imap-cons");
  
  public static final Var const__19 = (Var)RT.var("clojure.core", "str");
  
  public static final Var const__28 = (Var)RT.var("clojure.core", "seq?");
  
  public static final Keyword const__29 = (Keyword)RT.keyword(null, "streams");
  
  public static final Keyword const__30 = (Keyword)RT.keyword(null, "state");
  
  public static final Var const__33 = (Var)RT.var("clojure.core", "deref");
  
  public static final Keyword const__34 = (Keyword)RT.keyword(null, "closed");
  
  public static final Keyword const__35 = (Keyword)RT.keyword(null, "open");
  
  static final KeywordLookupSite __site__0__;
  
  static ILookupThunk __thunk__0__ = __site__0__ = new KeywordLookupSite(RT.keyword(null, "raw"));
  
  public Connection(Object paramObject1, Object paramObject2, int paramInt1, int paramInt2) { this.__meta = paramObject1;
    this.__extmap = paramObject2;
    this.__hash = paramInt1;
    this.__hasheq = paramInt2; }
  
  public Connection() { this(null, null, 0, 0); }
  
  public Connection(Object paramObject1, Object paramObject2) { this(paramObject1, paramObject2, 0, 0); }
  
  public static IPersistentVector getBasis() { return Tuple.create(); }
  
  public static Connection create(IPersistentMap paramIPersistentMap) { return new Connection(null, RT.seqOrElse(paramIPersistentMap), 0, 0); }
  
  public String toString() { // Byte code:
    //   0: aload_0
    //   1: astore_1
    //   2: getstatic synchrony/stream/sockjs/Connection.const__28 : Lclojure/lang/Var;
    //   5: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   8: checkcast clojure/lang/IFn
    //   11: aload_1
    //   12: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   17: dup
    //   18: ifnull -> 53
    //   21: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   24: if_acmpeq -> 54
    //   27: getstatic synchrony/stream/sockjs/Connection.const__14 : Lclojure/lang/Var;
    //   30: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   33: checkcast clojure/lang/IFn
    //   36: aload_1
    //   37: aconst_null
    //   38: astore_1
    //   39: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   44: checkcast clojure/lang/ISeq
    //   47: invokestatic create : (Lclojure/lang/ISeq;)Lclojure/lang/PersistentHashMap;
    //   50: goto -> 57
    //   53: pop
    //   54: aload_1
    //   55: aconst_null
    //   56: astore_1
    //   57: astore_2
    //   58: aload_2
    //   59: getstatic synchrony/stream/sockjs/Connection.const__29 : Lclojure/lang/Keyword;
    //   62: invokestatic get : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   65: astore_3
    //   66: aload_2
    //   67: aconst_null
    //   68: astore_2
    //   69: getstatic synchrony/stream/sockjs/Connection.const__30 : Lclojure/lang/Keyword;
    //   72: invokestatic get : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   75: astore #4
    //   77: getstatic synchrony/stream/sockjs/Connection.const__19 : Lclojure/lang/Var;
    //   80: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   83: checkcast clojure/lang/IFn
    //   86: getstatic synchrony/stream/sockjs/Connection.__thunk__0__ : Lclojure/lang/ILookupThunk;
    //   89: dup
    //   90: getstatic synchrony/stream/sockjs/Connection.const__33 : Lclojure/lang/Var;
    //   93: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   96: checkcast clojure/lang/IFn
    //   99: aload_3
    //   100: aconst_null
    //   101: astore_3
    //   102: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   107: dup_x2
    //   108: invokeinterface get : (Ljava/lang/Object;)Ljava/lang/Object;
    //   113: dup_x2
    //   114: if_acmpeq -> 121
    //   117: pop
    //   118: goto -> 143
    //   121: swap
    //   122: pop
    //   123: dup
    //   124: getstatic synchrony/stream/sockjs/Connection.__site__0__ : Lclojure/lang/KeywordLookupSite;
    //   127: swap
    //   128: invokeinterface fault : (Ljava/lang/Object;)Lclojure/lang/ILookupThunk;
    //   133: dup
    //   134: putstatic synchrony/stream/sockjs/Connection.__thunk__0__ : Lclojure/lang/ILookupThunk;
    //   137: swap
    //   138: invokeinterface get : (Ljava/lang/Object;)Ljava/lang/Object;
    //   143: checkcast manifold/stream/core/IEventSink
    //   146: invokeinterface isClosed : ()Ljava/lang/Object;
    //   151: dup
    //   152: ifnull -> 167
    //   155: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   158: if_acmpeq -> 168
    //   161: getstatic synchrony/stream/sockjs/Connection.const__34 : Lclojure/lang/Keyword;
    //   164: goto -> 171
    //   167: pop
    //   168: getstatic synchrony/stream/sockjs/Connection.const__35 : Lclojure/lang/Keyword;
    //   171: getstatic synchrony/stream/sockjs/Connection.const__33 : Lclojure/lang/Var;
    //   174: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   177: checkcast clojure/lang/IFn
    //   180: aload #4
    //   182: aconst_null
    //   183: astore #4
    //   185: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   190: invokestatic create : (Ljava/lang/Object;Ljava/lang/Object;)Lclojure/lang/IPersistentVector;
    //   193: aconst_null
    //   194: astore_0
    //   195: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   200: checkcast java/lang/String
    //   203: areturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #11	-> 0
    //   #11	-> 2
    //   #11	-> 8
    //   #11	-> 12
    //   #11	-> 33
    //   #11	-> 39
    //   #11	-> 47
    //   #11	-> 62
    //   #11	-> 72
    //   #14	-> 83
    //   #14	-> 86
    //   #14	-> 86
    //   #14	-> 96
    //   #14	-> 102
    //   #14	-> 107
    //   #14	-> 146
    //   #14	-> 177
    //   #14	-> 185
    //   #14	-> 193
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   2	198	1	map__64948	Ljava/lang/Object;
    //   58	142	2	map__64948	Ljava/lang/Object;
    //   66	134	3	streams	Ljava/lang/Object;
    //   77	123	4	state	Ljava/lang/Object;
    //   0	203	0	this	Lsynchrony/stream/sockjs/Connection; }
  
  public int hasheq() {
    int hq__7768__auto__64951 = this.__hasheq, h__7769__auto__64950 = RT.intCast(0x7798C82AL ^ APersistentMap.mapHasheq((IPersistentMap)this));
    this.__hasheq = h__7769__auto__64950;
    return (hq__7768__auto__64951 == 0L) ? h__7769__auto__64950 : hq__7768__auto__64951;
  }
  
  public int hashCode() {
    int hash__7771__auto__64953 = this.__hash, h__7772__auto__64952 = APersistentMap.mapHash((IPersistentMap)this);
    this.__hash = h__7772__auto__64952;
    return (hash__7771__auto__64953 == 0L) ? h__7772__auto__64952 : hash__7771__auto__64953;
  }
  
  public boolean equals(Object G__64942) { G__64942 = null;
    return APersistentMap.mapEquals((IPersistentMap)this, G__64942); }
  
  public IPersistentMap meta() { return (IPersistentMap)this.__meta; }
  
  public IObj withMeta(IPersistentMap G__64942) { G__64942 = null;
    return (IObj)new Connection(G__64942, this.__extmap, this.__hash, this.__hasheq); }
  
  public Object valAt(Object k__7777__auto__) { k__7777__auto__ = null;
    return ((ILookup)this).valAt(k__7777__auto__, null); }
  
  public Object valAt(Object k__7779__auto__, Object else__7780__auto__) { k__7779__auto__;
    k__7779__auto__ = null;
    else__7780__auto__ = null;
    this = null;
    return RT.get(this.__extmap, k__7779__auto__, else__7780__auto__); }
  
  public ILookupThunk getLookupThunk(Keyword k__7782__auto__) { ((IFn)const__17.getRawRoot()).invoke(this);
    k__7782__auto__ = null;
    k__7782__auto__;
    return (ILookupThunk)null; }
  
  public int count() { return RT.intCast(Numbers.add(0L, RT.count(this.__extmap))); }
  
  public IPersistentCollection empty() { throw (Throwable)new UnsupportedOperationException((String)((IFn)const__19.getRawRoot()).invoke("Can't create empty: ", "synchrony.stream.sockjs.Connection")); }
  
  public IPersistentCollection cons(Object e__7786__auto__) { e__7786__auto__ = null;
    this = null;
    return (IPersistentCollection)((IFn)const__18).invoke(this, e__7786__auto__); }
  
  public boolean equiv(Object G__64942) {
    boolean or__5516__auto__64954 = Util.identical(this, G__64942);
    Object G__64942 = G__64942 = null;
    G__64942 = null;
    return RT.booleanCast(or__5516__auto__64954 ? (or__5516__auto__64954 ? Boolean.TRUE : Boolean.FALSE) : (Util.identical(((IFn)const__17.getRawRoot()).invoke(this), ((IFn)const__17.getRawRoot()).invoke(G__64942)) ? (Util.equiv(this.__extmap, ((Connection)G__64942).__extmap) ? Boolean.TRUE : Boolean.FALSE) : null));
  }
  
  public boolean containsKey(Object k__7789__auto__) { k__7789__auto__ = null;
    this = null;
    return ((Boolean)((IFn)const__16.getRawRoot()).invoke(Util.identical(this, ((ILookup)this).valAt(k__7789__auto__, this)) ? Boolean.TRUE : Boolean.FALSE)).booleanValue(); }
  
  public IMapEntry entryAt(Object k__7791__auto__) {
    Object v__7792__auto__64955 = ((ILookup)this).valAt(k__7791__auto__, this);
    k__7791__auto__ = null;
    v__7792__auto__64955 = null;
    this = null;
    return (IMapEntry)(Util.identical(this, v__7792__auto__64955) ? null : MapEntry.create(k__7791__auto__, v__7792__auto__64955));
  }
  
  public ISeq seq() { this = null;
    return (ISeq)((IFn)const__14.getRawRoot()).invoke(((IFn)const__15.getRawRoot()).invoke(PersistentVector.EMPTY, this.__extmap)); }
  
  public Iterator iterator() { return (Iterator)new RecordIterator((ILookup)this, (IPersistentVector)PersistentVector.EMPTY, (Iterator)RT.iter(this.__extmap)); }
  
  public IPersistentMap assoc(Object k__7796__auto__, Object G__64942) { const__12.getRawRoot();
    k__7796__auto__;
    k__7796__auto__ = null;
    G__64942 = null;
    return (IPersistentMap)new Connection(this.__meta, ((IFn)const__13.getRawRoot()).invoke(this.__extmap, k__7796__auto__, G__64942)); }
  
  public IPersistentMap without(Object k__7798__auto__) { if (((IFn)const__7.getRawRoot()).invoke(PersistentHashSet.EMPTY, k__7798__auto__) != null) {
      if (((IFn)const__7.getRawRoot()).invoke(PersistentHashSet.EMPTY, k__7798__auto__) != Boolean.FALSE) {
        k__7798__auto__ = null;
        this = null;
      } 
    } else {
      ((IFn)const__7.getRawRoot()).invoke(PersistentHashSet.EMPTY, k__7798__auto__);
    } 
    k__7798__auto__ = null;
    return (IPersistentMap)new Connection(this.__meta, ((IFn)const__11.getRawRoot()).invoke(((IFn)const__8.getRawRoot()).invoke(this.__extmap, k__7798__auto__))); }
  
  public int size() { this = null;
    return ((Counted)this).count(); }
  
  public boolean isEmpty() { return Util.equiv(0L, ((Counted)this).count()); }
  
  public boolean containsValue(Object v__7802__auto__) { v__7802__auto__ = null;
    return RT.booleanCast(((IFn)const__4.getRawRoot()).invoke(RT.set(new Object[] { v__7802__auto__ }, ), ((IFn)const__1.getRawRoot()).invoke(this))); }
  
  public Object get(Object k__7804__auto__) { k__7804__auto__ = null;
    return ((ILookup)this).valAt(k__7804__auto__); }
  
  public Object put(Object k__7806__auto__, Object v__7807__auto__) { throw (Throwable)new UnsupportedOperationException(); }
  
  public Object remove(Object k__7809__auto__) { throw (Throwable)new UnsupportedOperationException(); }
  
  public void putAll(Map m__7811__auto__) { throw (Throwable)new UnsupportedOperationException(); }
  
  public void clear() { throw (Throwable)new UnsupportedOperationException(); }
  
  public Set keySet() { this = null;
    return (Set)((IFn)const__0.getRawRoot()).invoke(((IFn)const__2.getRawRoot()).invoke(this)); }
  
  public Collection values() { this = null;
    return (Collection)((IFn)const__1.getRawRoot()).invoke(this); }
  
  public Set entrySet() { this = null;
    return (Set)((IFn)const__0.getRawRoot()).invoke(this); }
}
