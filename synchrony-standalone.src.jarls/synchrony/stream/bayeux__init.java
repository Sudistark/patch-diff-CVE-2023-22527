package synchrony.stream;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class bayeux__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final Object const__4;
  
  public static final Var const__5;
  
  public static final AFn const__13;
  
  public static final Var const__14;
  
  public static final AFn const__19;
  
  public static final Var const__20;
  
  public static final AFn const__23;
  
  public static final Var const__24;
  
  public static final AFn const__27;
  
  public static final Var const__28;
  
  public static final AFn const__31;
  
  public static final Var const__32;
  
  public static final AFn const__35;
  
  public static final Var const__36;
  
  public static final AFn const__39;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new bayeux.fn__65050());
    const__5.setMeta((IPersistentMap)const__13);
    const__5.bindRoot(new bayeux.connect_single());
    const__14.setMeta((IPersistentMap)const__19);
    const__14.bindRoot(new bayeux.connect());
    const__20.setMeta((IPersistentMap)const__23);
    const__20.bindRoot(new bayeux.destroy());
    const__24.setMeta((IPersistentMap)const__27);
    const__24.bindRoot(new bayeux.list_connections());
    const__28.setMeta((IPersistentMap)const__31);
    const__28.bindRoot(new bayeux.clear_connections());
    const__32.setMeta((IPersistentMap)const__35);
    const__32.bindRoot(new bayeux.closed_QMARK_());
    const__36.setMeta((IPersistentMap)const__39);
    const__36.bindRoot(new bayeux.clear_closed_connections());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "synchrony.stream.bayeux");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("clojure.core", "print-method");
    const__4 = RT.classForName("synchrony.stream.bayeux.Connection");
    const__5 = (Var)RT.var("synchrony.stream.bayeux", "connect-single");
    const__13 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(), Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "url")), RT.keyword(null, "as"), Symbol.intern(null, "config") })) })), RT.keyword(null, "line"), Integer.valueOf(29), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/stream/bayeux.clj" });
    const__14 = (Var)RT.var("synchrony.stream.bayeux", "connect");
    const__19 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(), Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "url")), RT.keyword(null, "as"), Symbol.intern(null, "config") })) })), RT.keyword(null, "doc"), "connect to a synchrony server websocket\n\n   (def conn (connect *config*))\n   @(stream/take! (-> conn\n                     :streams\n                     :data))\n   => [39 1 256 20000]\n\n   (clear-connections)\n   ", RT.keyword(null, "added"), "0.1", RT.keyword(null, "line"), Integer.valueOf(83), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "synchrony/stream/bayeux.clj" });
    const__20 = (Var)RT.var("synchrony.stream.bayeux", "destroy");
    const__23 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "conn")) })), RT.keyword(null, "line"), Integer.valueOf(102), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/stream/bayeux.clj" });
    const__24 = (Var)RT.var("synchrony.stream.bayeux", "list-connections");
    const__27 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "doc"), "list all connections that have been created", RT.keyword(null, "added"), "0.1", RT.keyword(null, "line"), Integer.valueOf(108), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "synchrony/stream/bayeux.clj" });
    const__28 = (Var)RT.var("synchrony.stream.bayeux", "clear-connections");
    const__31 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "doc"), "closes all created connections and clears the registry", RT.keyword(null, "added"), "0.1", RT.keyword(null, "line"), Integer.valueOf(114), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "synchrony/stream/bayeux.clj" });
    const__32 = (Var)RT.var("synchrony.stream.bayeux", "closed?");
    const__35 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "conn")) })), RT.keyword(null, "line"), Integer.valueOf(128), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/stream/bayeux.clj" });
    const__36 = (Var)RT.var("synchrony.stream.bayeux", "clear-closed-connections");
    const__39 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "doc"), "remove all closed connections and clears the registry", RT.keyword(null, "added"), "0.1", RT.keyword(null, "line"), Integer.valueOf(132), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "synchrony/stream/bayeux.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("synchrony.stream.bayeux__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
