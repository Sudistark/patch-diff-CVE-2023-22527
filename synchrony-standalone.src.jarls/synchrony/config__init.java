package synchrony;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.Numbers;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class config__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__9;
  
  public static final Var const__10;
  
  public static final Var const__11;
  
  public static final AFn const__16;
  
  public static final Var const__17;
  
  public static final AFn const__20;
  
  public static final Var const__21;
  
  public static final AFn const__24;
  
  public static final Var const__25;
  
  public static final AFn const__28;
  
  public static final Var const__29;
  
  public static final AFn const__32;
  
  public static final Var const__33;
  
  public static final AFn const__35;
  
  public static final Var const__36;
  
  public static final Var const__37;
  
  public static final Var const__38;
  
  public static final AFn const__40;
  
  public static final Var const__41;
  
  public static final Var const__42;
  
  public static final AFn const__44;
  
  public static final Var const__45;
  
  public static final Var const__46;
  
  public static final AFn const__48;
  
  public static final Var const__49;
  
  public static final AFn const__51;
  
  public static final Var const__52;
  
  public static final AFn const__54;
  
  public static final Var const__55;
  
  public static final AFn const__57;
  
  public static final Var const__62;
  
  public static final AFn const__65;
  
  public static final Var const__66;
  
  public static final AFn const__69;
  
  public static final Var const__70;
  
  public static final AFn const__73;
  
  public static final Var const__74;
  
  public static final AFn const__77;
  
  public static final Var const__78;
  
  public static final AFn const__81;
  
  public static final Var const__82;
  
  public static final AFn const__85;
  
  public static final Var const__86;
  
  public static final AFn const__90;
  
  public static final Var const__91;
  
  public static final AFn const__94;
  
  public static final Var const__95;
  
  public static final AFn const__98;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new config.fn__24091());
    const__3.setMeta((IPersistentMap)const__9);
    const__3.bindRoot(const__10.getRawRoot());
    const__11.setMeta((IPersistentMap)const__16);
    const__11.bindRoot(new config.raw_env());
    const__17.setMeta((IPersistentMap)const__20);
    const__17.bindRoot(new config.parsed_env());
    const__21.setMeta((IPersistentMap)const__24);
    const__21.bindRoot(new config.parse_comma_list());
    const__25.setMeta((IPersistentMap)const__28);
    const__25.bindRoot(new config.parse_comma_set());
    const__29.setMeta((IPersistentMap)const__32);
    const__29.bindRoot(new config.parse_bool());
    const__33.setMeta((IPersistentMap)const__35);
    const__33




























      
      .bindRoot(((IFn)const__36.getRawRoot()).invoke(const__17.getRawRoot(), const__37.getRawRoot()));
    const__38.setMeta((IPersistentMap)const__40);
    const__38
      .bindRoot(((IFn)const__36.getRawRoot()).invoke(const__17.getRawRoot(), const__41.getRawRoot()));
    const__42.setMeta((IPersistentMap)const__44);
    const__42
      .bindRoot(((IFn)const__36.getRawRoot()).invoke(const__17.getRawRoot(), const__45.getRawRoot()));
    const__46.setMeta((IPersistentMap)const__48);
    const__46
      .bindRoot(((IFn)const__36.getRawRoot()).invoke(const__17.getRawRoot(), const__21.getRawRoot()));
    const__49.setMeta((IPersistentMap)const__51);
    const__49
      .bindRoot(((IFn)const__36.getRawRoot()).invoke(const__17.getRawRoot(), const__25.getRawRoot()));
    const__52.setMeta((IPersistentMap)const__54);
    const__52
      .bindRoot(((IFn)const__36.getRawRoot()).invoke(const__17.getRawRoot(), const__29.getRawRoot()));
    const__55.setMeta((IPersistentMap)const__57);
    const__55

      
      .bindRoot(Numbers.num(Numbers.multiply(Numbers.multiply(16L, 1024L), 1024L)));
    const__62.setMeta((IPersistentMap)const__65);
    const__62.bindRoot(new config.raise_incomplete_configuration());
    const__66.setMeta((IPersistentMap)const__69);
    const__66.bindRoot(new config.load_config());
    const__70.setMeta((IPersistentMap)const__73);
    const__70.bindRoot(new config.config_start_BANG_());
    const__74.setMeta((IPersistentMap)const__77);
    const__74.bindRoot(new config.c_get());
    const__78.setMeta((IPersistentMap)const__81);
    const__78.bindRoot(new config.dev_mode_QMARK_());
    const__82.setMeta((IPersistentMap)const__85);
    const__82.bindRoot(new config.micros_QMARK_());
    const__86.setMeta((IPersistentMap)const__90);
    const__86.bindRoot(new config.btf_cluster_QMARK_());
    const__91.setMeta((IPersistentMap)const__94);
    const__91.bindRoot(new config.init_additional_file_logger_QMARK_());
    const__95.setMeta((IPersistentMap)const__98);
    const__95.bindRoot(new config.intercluster_tcp_connections_QMARK_());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "synchrony.config");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("synchrony.config", "env");
    const__9 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(8), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/config.clj" });
    const__10 = (Var)RT.var("environ.core", "env");
    const__11 = (Var)RT.var("synchrony.config", "raw-env");
    const__16 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "env-names")) })), RT.keyword(null, "line"), Integer.valueOf(10), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/config.clj" });
    const__17 = (Var)RT.var("synchrony.config", "parsed-env");
    const__20 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "parser"), Symbol.intern(null, "env-names"), Symbol.intern(null, "&"), Tuple.create(Symbol.intern(null, "default"))) })), RT.keyword(null, "line"), Integer.valueOf(16), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/config.clj" });
    const__21 = (Var)RT.var("synchrony.config", "parse-comma-list");
    const__24 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })), RT.keyword(null, "line"), Integer.valueOf(21), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/config.clj" });
    const__25 = (Var)RT.var("synchrony.config", "parse-comma-set");
    const__28 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })), RT.keyword(null, "line"), Integer.valueOf(28), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/config.clj" });
    const__29 = (Var)RT.var("synchrony.config", "parse-bool");
    const__32 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })), RT.keyword(null, "line"), Integer.valueOf(29), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/config.clj" });
    const__33 = (Var)RT.var("synchrony.config", "env-string");
    const__35 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(31), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/config.clj" });
    const__36 = (Var)RT.var("clojure.core", "partial");
    const__37 = (Var)RT.var("clojure.core", "identity");
    const__38 = (Var)RT.var("synchrony.config", "env-int");
    const__40 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(32), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/config.clj" });
    const__41 = (Var)RT.var("ginga.core", "parse-int");
    const__42 = (Var)RT.var("synchrony.config", "env-keyword");
    const__44 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(33), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/config.clj" });
    const__45 = (Var)RT.var("clojure.core", "keyword");
    const__46 = (Var)RT.var("synchrony.config", "env-comma-list");
    const__48 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(34), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/config.clj" });
    const__49 = (Var)RT.var("synchrony.config", "env-comma-set");
    const__51 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(35), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/config.clj" });
    const__52 = (Var)RT.var("synchrony.config", "env-boolean");
    const__54 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(36), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/config.clj" });
    const__55 = (Var)RT.var("synchrony.config", "max-snapshot-size");
    const__57 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(38), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/config.clj" });
    const__62 = (Var)RT.var("synchrony.config", "raise-incomplete-configuration");
    const__65 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(60), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/config.clj" });
    const__66 = (Var)RT.var("synchrony.config", "load-config");
    const__69 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(63), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/config.clj" });
    const__70 = (Var)RT.var("synchrony.config", "config-start!");
    const__73 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(138), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/config.clj" });
    const__74 = (Var)RT.var("synchrony.config", "c-get");
    const__77 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "ks")) })), RT.keyword(null, "line"), Integer.valueOf(142), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/config.clj" });
    const__78 = (Var)RT.var("synchrony.config", "dev-mode?");
    const__81 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(151), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/config.clj" });
    const__82 = (Var)RT.var("synchrony.config", "micros?");
    const__85 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(154), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/config.clj" });
    const__86 = (Var)RT.var("synchrony.config", "btf-cluster?");
    const__90 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "doc"), "Returns \"true\" if Synchrony runs in clustered mode BTF, \"false\" otherwise.", RT.keyword(null, "line"), Integer.valueOf(156), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/config.clj" });
    const__91 = (Var)RT.var("synchrony.config", "init-additional-file-logger?");
    const__94 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(161), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/config.clj" });
    const__95 = (Var)RT.var("synchrony.config", "intercluster-tcp-connections?");
    const__98 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "doc"), "Returns \"true\" if current configuration is \"hazelcast-btf\", and customer wants to run tcp-based inter-cluster\n  connections, \"false\" otherwise.", RT.keyword(null, "line"), Integer.valueOf(164), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/config.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("synchrony.config__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
