package synchrony;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;
import org.apache.log4j.LogManager;

public class logging__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__11;
  
  public static final AFn const__19;
  
  public static final Var const__20;
  
  public static final AFn const__22;
  
  public static final Var const__23;
  
  public static final AFn const__27;
  
  public static final Var const__28;
  
  public static final AFn const__31;
  
  public static final Var const__32;
  
  public static final AFn const__35;
  
  public static final Var const__36;
  
  public static final AFn const__39;
  
  public static final Var const__40;
  
  public static final AFn const__43;
  
  public static final Var const__44;
  
  public static final AFn const__47;
  
  public static final Var const__48;
  
  public static final AFn const__51;
  
  public static final Var const__52;
  
  public static final AFn const__54;
  
  public static final AFn const__57;
  
  public static final Var const__58;
  
  public static final AFn const__61;
  
  public static final Var const__62;
  
  public static final AFn const__65;
  
  public static final Var const__66;
  
  public static final AFn const__68;
  
  public static final Var const__69;
  
  public static final Var const__70;
  
  public static final AFn const__73;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new logging.fn__57534());
    const__3.setMeta((IPersistentMap)const__11);
    const__3.bindRoot(const__19);
    const__20.setMeta((IPersistentMap)const__22);
    const__20














      
      .bindRoot(LogManager.getRootLogger());
    const__23.setMeta((IPersistentMap)const__27);
    const__23.bindRoot(new logging.make_logging_factory());
    const__28.setMeta((IPersistentMap)const__31);
    const__28.bindRoot(new logging.make_xform_logging_factory());
    const__32.setMeta((IPersistentMap)const__35);
    const__32.bindRoot(new logging.make_filter_logging_factory());
    const__36.setMeta((IPersistentMap)const__39);
    const__36.bindRoot(new logging.xform_args__GT_map());
    const__40.setMeta((IPersistentMap)const__43);
    const__40.bindRoot(new logging.with_filter());
    ((Var)const__40)

















































      
      .setMacro();
    const__44.setMeta((IPersistentMap)const__47);
    const__44.bindRoot(new logging.silent());
    ((Var)const__44)



      
      .setMacro();
    const__48.setMeta((IPersistentMap)const__51);
    const__48.bindRoot(new logging.with_factory());
    ((Var)const__48)


      
      .setMacro();
    const__52.setMeta((IPersistentMap)const__54);
    const__52.bindRoot(((IObj)new logging.reify__57560(null)).withMeta((IPersistentMap)const__57));
    const__58.setMeta((IPersistentMap)const__61);
    const__58.bindRoot(new logging.format_log_message());
    const__62.setMeta((IPersistentMap)const__65);
    const__62.bindRoot(new logging.prepend_new_lines_with_tab());
    const__66.setMeta((IPersistentMap)const__68);
    const__66
















      
      .bindRoot(((IFn)const__28.getRawRoot()).invoke(new logging.fn__57568(), ((IFn)const__69.getRawRoot())






          
          .invoke()));
    const__70.setMeta((IPersistentMap)const__73);
    const__70.bindRoot(new logging.make_file_appender());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "synchrony.logging");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("synchrony.logging", "levels");
    const__11 = (AFn)RT.map(new Object[] { RT.keyword(null, "tag"), RT.classForName("java.util.List"), RT.keyword(null, "line"), Integer.valueOf(15), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/logging.clj" });
    const__19 = (AFn)RT.vector(new Object[] { RT.keyword(null, "trace"), RT.keyword(null, "debug"), RT.keyword(null, "info"), RT.keyword(null, "warn"), RT.keyword(null, "error"), RT.keyword(null, "fatal"), RT.keyword(null, "off") });
    const__20 = (Var)RT.var("synchrony.logging", "root-logger");
    const__22 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(17), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/logging.clj" });
    const__23 = (Var)RT.var("synchrony.logging", "make-logging-factory");
    const__27 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "log-fn"), Symbol.intern(null, "level")) })), RT.keyword(null, "line"), Integer.valueOf(19), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/logging.clj" });
    const__28 = (Var)RT.var("synchrony.logging", "make-xform-logging-factory");
    const__31 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "xform-fn"), Symbol.intern(null, "factory")) })), RT.keyword(null, "line"), Integer.valueOf(32), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/logging.clj" });
    const__32 = (Var)RT.var("synchrony.logging", "make-filter-logging-factory");
    const__35 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pred?"), Symbol.intern(null, "factory")) })), RT.keyword(null, "line"), Integer.valueOf(43), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/logging.clj" });
    const__36 = (Var)RT.var("synchrony.logging", "xform-args->map");
    const__39 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "throwable")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Throwable") })), Symbol.intern(null, "message")) })), RT.keyword(null, "line"), Integer.valueOf(55), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/logging.clj" });
    const__40 = (Var)RT.var("synchrony.logging", "with-filter");
    const__43 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pred?"), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "line"), Integer.valueOf(68), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/logging.clj" });
    const__44 = (Var)RT.var("synchrony.logging", "silent");
    const__47 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "line"), Integer.valueOf(73), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/logging.clj" });
    const__48 = (Var)RT.var("synchrony.logging", "with-factory");
    const__51 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "factory"), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "line"), Integer.valueOf(77), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/logging.clj" });
    const__52 = (Var)RT.var("synchrony.logging", "logging-uncaught-exception-handler");
    const__54 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(81), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/logging.clj" });
    const__57 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(82), RT.keyword(null, "column"), Integer.valueOf(3) });
    const__58 = (Var)RT.var("synchrony.logging", "format-log-message");
    const__61 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "message")), RT.keyword(null, "as"), Symbol.intern(null, "data") })) })), RT.keyword(null, "line"), Integer.valueOf(86), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/logging.clj" });
    const__62 = (Var)RT.var("synchrony.logging", "prepend-new-lines-with-tab");
    const__65 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "lines")) })), RT.keyword(null, "line"), Integer.valueOf(92), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/logging.clj" });
    const__66 = (Var)RT.var("synchrony.logging", "prod-logging-factory");
    const__68 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(94), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/logging.clj" });
    const__69 = (Var)RT.var("clojure.tools.logging.impl", "log4j-factory");
    const__70 = (Var)RT.var("synchrony.logging", "make-file-appender");
    const__73 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(105), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/logging.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("synchrony.logging__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
