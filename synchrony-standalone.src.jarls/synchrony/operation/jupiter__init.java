package synchrony.operation;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.PersistentVector;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class jupiter__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__3;
  
  public static final AFn const__4;
  
  public static final Var const__5;
  
  public static final AFn const__11;
  
  public static final Var const__12;
  
  public static final Keyword const__13;
  
  public static final Object const__14;
  
  public static final Keyword const__15;
  
  public static final Keyword const__16;
  
  public static final Keyword const__17;
  
  public static final Var const__18;
  
  public static final AFn const__23;
  
  public static final Var const__24;
  
  public static final AFn const__27;
  
  public static final Var const__28;
  
  public static final AFn const__31;
  
  public static final Var const__32;
  
  public static final AFn const__35;
  
  public static final Var const__36;
  
  public static final AFn const__39;
  
  public static final Var const__40;
  
  public static final AFn const__43;
  
  public static final Var const__44;
  
  public static final AFn const__47;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new jupiter.fn__41136());
    const__5.setMeta((IPersistentMap)const__11);
    const__5

      
      .bindRoot(((IFn)const__12.getRawRoot()).invoke(RT.mapUniqueKeys(new Object[] { const__13, const__14, const__15, const__14, const__16, const__14, const__17, PersistentVector.EMPTY })));
    const__18.setMeta((IPersistentMap)const__23);
    const__18.bindRoot(new jupiter.record_in_state());
    const__24.setMeta((IPersistentMap)const__27);
    const__24.bindRoot(new jupiter.record());
    const__28.setMeta((IPersistentMap)const__31);
    const__28.bindRoot(new jupiter.acknowledge());
    const__32.setMeta((IPersistentMap)const__35);
    const__32.bindRoot(new jupiter.assert_record_in_sequence());
    const__36.setMeta((IPersistentMap)const__39);
    const__36.bindRoot(new jupiter.transform());
    const__40.setMeta((IPersistentMap)const__43);
    const__40.bindRoot(new jupiter.hub_record());
    const__44.setMeta((IPersistentMap)const__47);
    const__44.bindRoot(new jupiter.hub_receive());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "synchrony.operation.jupiter")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Implements the Jupiter OT control algorithm." }));
    const__3 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Implements the Jupiter OT control algorithm." });
    const__4 = (AFn)Symbol.intern(null, "clojure.core");
    const__5 = (Var)RT.var("synchrony.operation.jupiter", "initial-state");
    const__11 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(10), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/jupiter.cljc" });
    const__12 = (Var)RT.var("synchrony.operation.jupiter", "map->tr-state");
    const__13 = (Keyword)RT.keyword(null, "local-cnt");
    const__14 = Long.valueOf(0L);
    const__15 = (Keyword)RT.keyword(null, "remot-cnt");
    const__16 = (Keyword)RT.keyword(null, "ack-cnt");
    const__17 = (Keyword)RT.keyword(null, "unacked");
    const__18 = (Var)RT.var("synchrony.operation.jupiter", "record-in-state");
    const__23 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "local-cs"), Symbol.intern(null, "state")) })), RT.keyword(null, "line"), Integer.valueOf(17), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/jupiter.cljc" });
    const__24 = (Var)RT.var("synchrony.operation.jupiter", "record");
    const__27 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "state"), Symbol.intern(null, "local-cs")) })), RT.keyword(null, "doc"), "Records the given local ops in the given state and returns a\n   record (two counters) to be transfered together with the ops to the\n   remote end so it can be transformed there.\n\n   A record provides the means to the transforming end to determine how\n   many of the transforming end's ops were seen by the recording end,\n   when the ops was generated/recorded.", RT.keyword(null, "line"), Integer.valueOf(22), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/jupiter.cljc" });
    const__28 = (Var)RT.var("synchrony.operation.jupiter", "acknowledge");
    const__31 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "state"), Symbol.intern(null, "remot-cnt")) })), RT.keyword(null, "line"), Integer.valueOf(36), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/jupiter.cljc" });
    const__32 = (Var)RT.var("synchrony.operation.jupiter", "assert-record-in-sequence");
    const__35 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "remot-record"), Symbol.intern(null, "state")) })), RT.keyword(null, "doc"), "We don't actually need to transfer local-cnt between end points\n   except for making this assertions that ensures we never receive an\n   operation out of sequence", RT.keyword(null, "line"), Integer.valueOf(42), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/jupiter.cljc" });
    const__36 = (Var)RT.var("synchrony.operation.jupiter", "transform");
    const__39 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "remot-cs"), Symbol.intern(null, "remot-record"), Symbol.intern(null, "state")) })), RT.keyword(null, "doc"), "Transforms the given remote ops against unacknowledged local ops in state.", RT.keyword(null, "line"), Integer.valueOf(54), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/jupiter.cljc" });
    const__40 = (Var)RT.var("synchrony.operation.jupiter", "hub-record");
    const__43 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "hub"), Symbol.intern(null, "revision")) })), RT.keyword(null, "line"), Integer.valueOf(67), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/jupiter.cljc" });
    const__44 = (Var)RT.var("synchrony.operation.jupiter", "hub-receive");
    const__47 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "hub"), Symbol.intern(null, "revision"), Symbol.intern(null, "tr-record"), Symbol.intern(null, "key")) })), RT.keyword(null, "line"), Integer.valueOf(76), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/jupiter.cljc" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("synchrony.operation.jupiter__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
