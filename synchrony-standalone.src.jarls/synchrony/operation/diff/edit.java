package synchrony.operation.diff;

import clojure.lang.AFn;
import clojure.lang.APersistentMap;
import clojure.lang.Associative;
import clojure.lang.Counted;
import clojure.lang.IFn;
import clojure.lang.IHashEq;
import clojure.lang.IKeywordLookup;
import clojure.lang.ILookup;
import clojure.lang.ILookupThunk;
import clojure.lang.IMapEntry;
import clojure.lang.IObj;
import clojure.lang.IPersistentCollection;
import clojure.lang.IPersistentMap;
import clojure.lang.IPersistentVector;
import clojure.lang.IRecord;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.MapEntry;
import clojure.lang.Numbers;
import clojure.lang.PersistentHashSet;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.RecordIterator;
import clojure.lang.Symbol;
import clojure.lang.Util;
import clojure.lang.Var;
import ginga.tree.Node;
import java.io.Serializable;
import java.util.Arrays;
import java.util.Collection;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

public final class edit implements Node, IRecord, IHashEq, IObj, ILookup, IKeywordLookup, IPersistentMap, Map, Serializable {
  public final Object operation;
  
  public final Object node_before;
  
  public final Object node_after;
  
  public final Object offset_before;
  
  public final Object offset_after;
  
  public final Object length;
  
  public final Object id;
  
  public final Object children;
  
  public final Object __meta;
  
  public final Object __extmap;
  
  int __hash;
  
  int __hasheq;
  
  public static final Var const__0 = (Var)RT.var("clojure.core", "set");
  
  public static final Var const__1 = (Var)RT.var("clojure.core", "vals");
  
  public static final Var const__2 = (Var)RT.var("clojure.core", "keys");
  
  public static final Var const__4 = (Var)RT.var("clojure.core", "some");
  
  public static final Var const__7 = (Var)RT.var("clojure.core", "contains?");
  
  public static final Keyword const__8 = (Keyword)RT.keyword(null, "offset-after");
  
  public static final Keyword const__9 = (Keyword)RT.keyword(null, "children");
  
  public static final Keyword const__10 = (Keyword)RT.keyword(null, "offset-before");
  
  public static final Keyword const__11 = (Keyword)RT.keyword(null, "node-after");
  
  public static final Keyword const__12 = (Keyword)RT.keyword(null, "node-before");
  
  public static final Keyword const__13 = (Keyword)RT.keyword(null, "operation");
  
  public static final Keyword const__14 = (Keyword)RT.keyword(null, "id");
  
  public static final Keyword const__15 = (Keyword)RT.keyword(null, "length");
  
  public static final AFn const__16 = (AFn)PersistentHashSet.create(new Object[] { RT.keyword(null, "offset-after"), RT.keyword(null, "children"), RT.keyword(null, "offset-before"), RT.keyword(null, "node-after"), RT.keyword(null, "node-before"), RT.keyword(null, "operation"), RT.keyword(null, "id"), RT.keyword(null, "length") });
  
  public static final Var const__17 = (Var)RT.var("clojure.core", "dissoc");
  
  public static final Var const__18 = (Var)RT.var("clojure.core", "with-meta");
  
  public static final Var const__19 = (Var)RT.var("clojure.core", "into");
  
  public static final Var const__20 = (Var)RT.var("clojure.core", "not-empty");
  
  public static final Var const__21 = (Var)RT.var("clojure.core", "identical?");
  
  public static final Var const__22 = (Var)RT.var("clojure.core", "assoc");
  
  public static final AFn const__23 = (AFn)RT.vector(new Object[] { RT.keyword(null, "operation"), RT.keyword(null, "node-before"), RT.keyword(null, "node-after"), RT.keyword(null, "offset-before"), RT.keyword(null, "offset-after"), RT.keyword(null, "length"), RT.keyword(null, "id"), RT.keyword(null, "children") });
  
  public static final Var const__24 = (Var)RT.var("clojure.core", "seq");
  
  public static final Var const__25 = (Var)RT.var("clojure.core", "concat");
  
  public static final Var const__26 = (Var)RT.var("clojure.core", "not");
  
  public static final Var const__27 = (Var)RT.var("clojure.core", "class");
  
  public static final Var const__28 = (Var)RT.var("clojure.core", "imap-cons");
  
  public static final Var const__29 = (Var)RT.var("clojure.core", "str");
  
  public static final Var const__38 = (Var)RT.var("clojure.core", "some?");
  
  public static final Var const__39 = (Var)RT.var("clojure.core", "pr-str");
  
  public static final Object const__40 = ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "some?"), Symbol.intern(null, "new-children") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(71), RT.keyword(null, "column"), Integer.valueOf(13) }));
  
  public edit(Object paramObject1, Object paramObject2, Object paramObject3, Object paramObject4, Object paramObject5, Object paramObject6, Object paramObject7, Object paramObject8, Object paramObject9, Object paramObject10, int paramInt1, int paramInt2) { this.operation = paramObject1;
    this.node_before = paramObject2;
    this.node_after = paramObject3;
    this.offset_before = paramObject4;
    this.offset_after = paramObject5;
    this.length = paramObject6;
    this.id = paramObject7;
    this.children = paramObject8;
    this.__meta = paramObject9;
    this.__extmap = paramObject10;
    this.__hash = paramInt1;
    this.__hasheq = paramInt2; }
  
  public edit(Object paramObject1, Object paramObject2, Object paramObject3, Object paramObject4, Object paramObject5, Object paramObject6, Object paramObject7, Object paramObject8) { this(paramObject1, paramObject2, paramObject3, paramObject4, paramObject5, paramObject6, paramObject7, paramObject8, null, null, 0, 0); }
  
  public edit(Object paramObject1, Object paramObject2, Object paramObject3, Object paramObject4, Object paramObject5, Object paramObject6, Object paramObject7, Object paramObject8, Object paramObject9, Object paramObject10) { this(paramObject1, paramObject2, paramObject3, paramObject4, paramObject5, paramObject6, paramObject7, paramObject8, paramObject9, paramObject10, 0, 0); }
  
  public static IPersistentVector getBasis() { return RT.vector(new Object[] { Symbol.intern(null, "operation"), Symbol.intern(null, "node-before"), Symbol.intern(null, "node-after"), Symbol.intern(null, "offset-before"), Symbol.intern(null, "offset-after"), Symbol.intern(null, "length"), Symbol.intern(null, "id"), Symbol.intern(null, "children") }); }
  
  public static edit create(IPersistentMap paramIPersistentMap) {
    Object object1 = paramIPersistentMap.valAt(Keyword.intern("operation"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("operation"));
    Object object2 = paramIPersistentMap.valAt(Keyword.intern("node-before"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("node-before"));
    Object object3 = paramIPersistentMap.valAt(Keyword.intern("node-after"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("node-after"));
    Object object4 = paramIPersistentMap.valAt(Keyword.intern("offset-before"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("offset-before"));
    Object object5 = paramIPersistentMap.valAt(Keyword.intern("offset-after"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("offset-after"));
    Object object6 = paramIPersistentMap.valAt(Keyword.intern("length"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("length"));
    Object object7 = paramIPersistentMap.valAt(Keyword.intern("id"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("id"));
    Object object8 = paramIPersistentMap.valAt(Keyword.intern("children"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("children"));
    return new edit(object1, object2, object3, object4, object5, object6, object7, object8, null, RT.seqOrElse(paramIPersistentMap), 0, 0);
  }
  
  public Object with_children(Object new_children) {
    if (((IFn)const__38.getRawRoot()).invoke(new_children) != null) {
      if (((IFn)const__38.getRawRoot()).invoke(new_children) != Boolean.FALSE) {
        null;
      } else {
        throw (Throwable)new AssertionError(((IFn)const__29.getRawRoot()).invoke("Assert failed: ", ((IFn)const__39.getRawRoot()).invoke(const__40)));
      } 
    } else {
      ((IFn)const__38.getRawRoot()).invoke(new_children);
      throw (Throwable)new AssertionError(((IFn)const__29.getRawRoot()).invoke("Assert failed: ", ((IFn)const__39.getRawRoot()).invoke(const__40)));
    } 
    new_children = null;
    this = null;
    return ((IFn)const__22.getRawRoot()).invoke(this, const__9, new_children);
  }
  
  public Object children() { return this.children; }
  
  public int hasheq() {
    int hq__7768__auto__41283 = this.__hasheq, h__7769__auto__41282 = RT.intCast(0xFFFFFFFFFF31E00DL ^ APersistentMap.mapHasheq((IPersistentMap)this));
    this.__hasheq = h__7769__auto__41282;
    return (hq__7768__auto__41283 == 0L) ? h__7769__auto__41282 : hq__7768__auto__41283;
  }
  
  public int hashCode() {
    int hash__7771__auto__41285 = this.__hash, h__7772__auto__41284 = APersistentMap.mapHash((IPersistentMap)this);
    this.__hash = h__7772__auto__41284;
    return (hash__7771__auto__41285 == 0L) ? h__7772__auto__41284 : hash__7771__auto__41285;
  }
  
  public boolean equals(Object G__41259) { G__41259 = null;
    return APersistentMap.mapEquals((IPersistentMap)this, G__41259); }
  
  public IPersistentMap meta() { return (IPersistentMap)this.__meta; }
  
  public IObj withMeta(IPersistentMap G__41259) { G__41259 = null;
    return (IObj)new edit(this.operation, this.node_before, this.node_after, this.offset_before, this.offset_after, this.length, this.id, this.children, G__41259, this.__extmap, this.__hash, this.__hasheq); }
  
  public Object valAt(Object k__7777__auto__) { k__7777__auto__ = null;
    return ((ILookup)this).valAt(k__7777__auto__, null); }
  
  public Object valAt(Object k__7779__auto__, Object else__7780__auto__) {
    Object G__41280 = k__7779__auto__;
    switch (Util.hash(G__41280) >> 6 & 0xF) {
      case 1:
        if (G__41280 == const__14);
        break;
      case 3:
        if (G__41280 == const__15);
        break;
      case 4:
        if (G__41280 == const__8);
        break;
      case 5:
        if (G__41280 == const__10);
        break;
      case 6:
        if (G__41280 == const__11);
        break;
      case 7:
        if (G__41280 == const__12);
        break;
      case 11:
        if (G__41280 == const__9);
        break;
      case 13:
        if (G__41280 == const__13);
        break;
    } 
    k__7779__auto__ = null;
    else__7780__auto__ = null;
    this = null;
    return RT.get(this.__extmap, k__7779__auto__, else__7780__auto__);
  }
  
  public ILookupThunk getLookupThunk(Keyword k__7782__auto__) {
    Object gclass = ((IFn)const__27.getRawRoot()).invoke(this), G__41263 = k__7782__auto__ = null;
    switch (Util.hash(G__41263) >> 6 & 0xF) {
      case 1:
        if (G__41263 == const__14)
          gclass = null; 
        break;
      case 3:
        if (G__41263 == const__15)
          gclass = null; 
        break;
      case 4:
        if (G__41263 == const__8)
          gclass = null; 
        break;
      case 5:
        if (G__41263 == const__10)
          gclass = null; 
        break;
      case 6:
        if (G__41263 == const__11)
          gclass = null; 
        break;
      case 7:
        if (G__41263 == const__12)
          gclass = null; 
        break;
      case 11:
        if (G__41263 == const__9)
          gclass = null; 
        break;
      case 13:
        if (G__41263 == const__13)
          gclass = null; 
        break;
    } 
    return (ILookupThunk)null;
  }
  
  public int count() { return RT.intCast(Numbers.add(8L, RT.count(this.__extmap))); }
  
  public IPersistentCollection empty() { throw (Throwable)new UnsupportedOperationException((String)((IFn)const__29.getRawRoot()).invoke("Can't create empty: ", "synchrony.operation.diff.edit")); }
  
  public IPersistentCollection cons(Object e__7786__auto__) { e__7786__auto__ = null;
    this = null;
    return (IPersistentCollection)((IFn)const__28).invoke(this, e__7786__auto__); }
  
  public boolean equiv(Object G__41259) {
    boolean or__5516__auto__41294 = Util.identical(this, G__41259);
    Object G__41259 = G__41259 = null;
    boolean and__5514__auto__41293 = Util.equiv(this.operation, ((edit)G__41259).operation), and__5514__auto__41292 = Util.equiv(this.node_before, ((edit)G__41259).node_before), and__5514__auto__41291 = Util.equiv(this.node_after, ((edit)G__41259).node_after), and__5514__auto__41290 = Util.equiv(this.offset_before, ((edit)G__41259).offset_before), and__5514__auto__41289 = Util.equiv(this.offset_after, ((edit)G__41259).offset_after), and__5514__auto__41288 = Util.equiv(this.length, ((edit)G__41259).length), and__5514__auto__41287 = Util.equiv(this.id, ((edit)G__41259).id), and__5514__auto__41286 = Util.equiv(this.children, ((edit)G__41259).children);
    G__41259 = null;
    return RT.booleanCast(or__5516__auto__41294 ? (or__5516__auto__41294 ? Boolean.TRUE : Boolean.FALSE) : (Util.identical(((IFn)const__27.getRawRoot()).invoke(this), ((IFn)const__27.getRawRoot()).invoke(G__41259)) ? (and__5514__auto__41293 ? (and__5514__auto__41292 ? (and__5514__auto__41291 ? (and__5514__auto__41290 ? (and__5514__auto__41289 ? (and__5514__auto__41288 ? (and__5514__auto__41287 ? (and__5514__auto__41286 ? (Util.equiv(this.__extmap, ((edit)G__41259).__extmap) ? Boolean.TRUE : Boolean.FALSE) : (and__5514__auto__41286 ? Boolean.TRUE : Boolean.FALSE)) : (and__5514__auto__41287 ? Boolean.TRUE : Boolean.FALSE)) : (and__5514__auto__41288 ? Boolean.TRUE : Boolean.FALSE)) : (and__5514__auto__41289 ? Boolean.TRUE : Boolean.FALSE)) : (and__5514__auto__41290 ? Boolean.TRUE : Boolean.FALSE)) : (and__5514__auto__41291 ? Boolean.TRUE : Boolean.FALSE)) : (and__5514__auto__41292 ? Boolean.TRUE : Boolean.FALSE)) : (and__5514__auto__41293 ? Boolean.TRUE : Boolean.FALSE)) : null));
  }
  
  public boolean containsKey(Object k__7789__auto__) { k__7789__auto__ = null;
    this = null;
    return ((Boolean)((IFn)const__26.getRawRoot()).invoke(Util.identical(this, ((ILookup)this).valAt(k__7789__auto__, this)) ? Boolean.TRUE : Boolean.FALSE)).booleanValue(); }
  
  public IMapEntry entryAt(Object k__7791__auto__) {
    Object v__7792__auto__41295 = ((ILookup)this).valAt(k__7791__auto__, this);
    k__7791__auto__ = null;
    v__7792__auto__41295 = null;
    this = null;
    return (IMapEntry)(Util.identical(this, v__7792__auto__41295) ? null : MapEntry.create(k__7791__auto__, v__7792__auto__41295));
  }
  
  public ISeq seq() { this = null;
    return (ISeq)((IFn)const__24.getRawRoot()).invoke(((IFn)const__25.getRawRoot()).invoke(RT.vector(new Object[] { MapEntry.create(const__13, this.operation), MapEntry.create(const__12, this.node_before), MapEntry.create(const__11, this.node_after), MapEntry.create(const__10, this.offset_before), MapEntry.create(const__8, this.offset_after), MapEntry.create(const__15, this.length), MapEntry.create(const__14, this.id), MapEntry.create(const__9, this.children) }), this.__extmap)); }
  
  public Iterator iterator() { return (Iterator)new RecordIterator((ILookup)this, (IPersistentVector)const__23, (Iterator)RT.iter(this.__extmap)); }
  
  public IPersistentMap assoc(Object k__7796__auto__, Object G__41259) {
    Object pred__41261 = const__21.getRawRoot(), expr__41262 = k__7796__auto__;
    if (((IFn)pred__41261).invoke(const__13, expr__41262) != null) {
      if (((IFn)pred__41261).invoke(const__13, expr__41262) != Boolean.FALSE)
        G__41259 = null; 
    } else {
      ((IFn)pred__41261).invoke(const__13, expr__41262);
    } 
    if (((IFn)pred__41261).invoke(const__12, expr__41262) != null) {
      if (((IFn)pred__41261).invoke(const__12, expr__41262) != Boolean.FALSE)
        G__41259 = null; 
    } else {
      ((IFn)pred__41261).invoke(const__12, expr__41262);
    } 
    if (((IFn)pred__41261).invoke(const__11, expr__41262) != null) {
      if (((IFn)pred__41261).invoke(const__11, expr__41262) != Boolean.FALSE)
        G__41259 = null; 
    } else {
      ((IFn)pred__41261).invoke(const__11, expr__41262);
    } 
    if (((IFn)pred__41261).invoke(const__10, expr__41262) != null) {
      if (((IFn)pred__41261).invoke(const__10, expr__41262) != Boolean.FALSE)
        G__41259 = null; 
    } else {
      ((IFn)pred__41261).invoke(const__10, expr__41262);
    } 
    if (((IFn)pred__41261).invoke(const__8, expr__41262) != null) {
      if (((IFn)pred__41261).invoke(const__8, expr__41262) != Boolean.FALSE)
        G__41259 = null; 
    } else {
      ((IFn)pred__41261).invoke(const__8, expr__41262);
    } 
    if (((IFn)pred__41261).invoke(const__15, expr__41262) != null) {
      if (((IFn)pred__41261).invoke(const__15, expr__41262) != Boolean.FALSE)
        G__41259 = null; 
    } else {
      ((IFn)pred__41261).invoke(const__15, expr__41262);
    } 
    if (((IFn)pred__41261).invoke(const__14, expr__41262) != null) {
      if (((IFn)pred__41261).invoke(const__14, expr__41262) != Boolean.FALSE)
        G__41259 = null; 
    } else {
      ((IFn)pred__41261).invoke(const__14, expr__41262);
    } 
    pred__41261 = null;
    expr__41262 = null;
    if (((IFn)pred__41261).invoke(const__9, expr__41262) != null) {
      if (((IFn)pred__41261).invoke(const__9, expr__41262) != Boolean.FALSE)
        G__41259 = null; 
    } else {
      ((IFn)pred__41261).invoke(const__9, expr__41262);
    } 
    k__7796__auto__ = null;
    G__41259 = null;
    return (IPersistentMap)new edit(this.operation, this.node_before, this.node_after, this.offset_before, this.offset_after, this.length, this.id, this.children, this.__meta, ((IFn)const__22.getRawRoot()).invoke(this.__extmap, k__7796__auto__, G__41259));
  }
  
  public IPersistentMap without(Object k__7798__auto__) { if (((IFn)const__7.getRawRoot()).invoke(const__16, k__7798__auto__) != null) {
      if (((IFn)const__7.getRawRoot()).invoke(const__16, k__7798__auto__) != Boolean.FALSE) {
        k__7798__auto__ = null;
        this = null;
      } 
    } else {
      ((IFn)const__7.getRawRoot()).invoke(const__16, k__7798__auto__);
    } 
    k__7798__auto__ = null;
    return (IPersistentMap)new edit(this.operation, this.node_before, this.node_after, this.offset_before, this.offset_after, this.length, this.id, this.children, this.__meta, ((IFn)const__20.getRawRoot()).invoke(((IFn)const__17.getRawRoot()).invoke(this.__extmap, k__7798__auto__))); }
  
  public int size() { this = null;
    return ((Counted)this).count(); }
  
  public boolean isEmpty() { return Util.equiv(0L, ((Counted)this).count()); }
  
  public boolean containsValue(Object v__7802__auto__) { v__7802__auto__ = null;
    return RT.booleanCast(((IFn)const__4.getRawRoot()).invoke(RT.set(new Object[] { v__7802__auto__ }, ), ((IFn)const__1.getRawRoot()).invoke(this))); }
  
  public Object get(Object k__7804__auto__) { k__7804__auto__ = null;
    return ((ILookup)this).valAt(k__7804__auto__); }
  
  public Object put(Object k__7806__auto__, Object v__7807__auto__) { throw (Throwable)new UnsupportedOperationException(); }
  
  public Object remove(Object k__7809__auto__) { throw (Throwable)new UnsupportedOperationException(); }
  
  public void putAll(Map m__7811__auto__) { throw (Throwable)new UnsupportedOperationException(); }
  
  public void clear() { throw (Throwable)new UnsupportedOperationException(); }
  
  public Set keySet() { this = null;
    return (Set)((IFn)const__0.getRawRoot()).invoke(((IFn)const__2.getRawRoot()).invoke(this)); }
  
  public Collection values() { this = null;
    return (Collection)((IFn)const__1.getRawRoot()).invoke(this); }
  
  public Set entrySet() { this = null;
    return (Set)((IFn)const__0.getRawRoot()).invoke(this); }
}
