package synchrony.operation.materialize_impl;

import clojure.lang.AFn;
import clojure.lang.APersistentMap;
import clojure.lang.Associative;
import clojure.lang.Counted;
import clojure.lang.IFn;
import clojure.lang.IHashEq;
import clojure.lang.IKeywordLookup;
import clojure.lang.ILookup;
import clojure.lang.ILookupThunk;
import clojure.lang.IMapEntry;
import clojure.lang.IObj;
import clojure.lang.IPersistentCollection;
import clojure.lang.IPersistentMap;
import clojure.lang.IPersistentVector;
import clojure.lang.IRecord;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.MapEntry;
import clojure.lang.Numbers;
import clojure.lang.PersistentHashSet;
import clojure.lang.RT;
import clojure.lang.RecordIterator;
import clojure.lang.Symbol;
import clojure.lang.Util;
import clojure.lang.Var;
import java.io.Serializable;
import java.util.Collection;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

public final class AbstractSequenceEditor implements EditVec, IRecord, IHashEq, IObj, ILookup, IKeywordLookup, IPersistentMap, Map, Serializable {
  public final Object subeditor;
  
  public final Object subvec_retain;
  
  public final Object subvec_delete;
  
  public final Object box_replace;
  
  public final Object box_new;
  
  public final Object adapt_new;
  
  public final Object finalize;
  
  public final Object create;
  
  public final Object item;
  
  public final Object subvecs;
  
  public final Object i;
  
  public final Object __meta;
  
  public final Object __extmap;
  
  int __hash;
  
  int __hasheq;
  
  public static final Var const__0 = (Var)RT.var("clojure.core", "set");
  
  public static final Var const__1 = (Var)RT.var("clojure.core", "vals");
  
  public static final Var const__2 = (Var)RT.var("clojure.core", "keys");
  
  public static final Var const__4 = (Var)RT.var("clojure.core", "some");
  
  public static final Var const__7 = (Var)RT.var("clojure.core", "contains?");
  
  public static final Keyword const__8 = (Keyword)RT.keyword(null, "create");
  
  public static final Keyword const__9 = (Keyword)RT.keyword(null, "item");
  
  public static final Keyword const__10 = (Keyword)RT.keyword(null, "adapt-new");
  
  public static final Keyword const__11 = (Keyword)RT.keyword(null, "subvecs");
  
  public static final Keyword const__12 = (Keyword)RT.keyword(null, "box-new");
  
  public static final Keyword const__13 = (Keyword)RT.keyword(null, "subeditor");
  
  public static final Keyword const__14 = (Keyword)RT.keyword(null, "box-replace");
  
  public static final Keyword const__15 = (Keyword)RT.keyword(null, "subvec-retain");
  
  public static final Keyword const__16 = (Keyword)RT.keyword(null, "subvec-delete");
  
  public static final Keyword const__17 = (Keyword)RT.keyword(null, "finalize");
  
  public static final Keyword const__18 = (Keyword)RT.keyword(null, "i");
  
  public static final AFn const__19 = (AFn)PersistentHashSet.create(new Object[] { 
        RT.keyword(null, "create"), RT.keyword(null, "item"), RT.keyword(null, "adapt-new"), RT.keyword(null, "subvecs"), RT.keyword(null, "box-new"), RT.keyword(null, "subeditor"), RT.keyword(null, "box-replace"), RT.keyword(null, "subvec-retain"), RT.keyword(null, "subvec-delete"), RT.keyword(null, "finalize"), 
        RT.keyword(null, "i") });
  
  public static final Var const__20 = (Var)RT.var("clojure.core", "dissoc");
  
  public static final Var const__21 = (Var)RT.var("clojure.core", "with-meta");
  
  public static final Var const__22 = (Var)RT.var("clojure.core", "into");
  
  public static final Var const__23 = (Var)RT.var("clojure.core", "not-empty");
  
  public static final Var const__24 = (Var)RT.var("clojure.core", "identical?");
  
  public static final Var const__25 = (Var)RT.var("clojure.core", "assoc");
  
  public static final AFn const__26 = (AFn)RT.vector(new Object[] { 
        RT.keyword(null, "subeditor"), RT.keyword(null, "subvec-retain"), RT.keyword(null, "subvec-delete"), RT.keyword(null, "box-replace"), RT.keyword(null, "box-new"), RT.keyword(null, "adapt-new"), RT.keyword(null, "finalize"), RT.keyword(null, "create"), RT.keyword(null, "item"), RT.keyword(null, "subvecs"), 
        RT.keyword(null, "i") });
  
  public static final Var const__27 = (Var)RT.var("clojure.core", "seq"), const__28 = (Var)RT.var("clojure.core", "concat"), const__29 = (Var)RT.var("clojure.core", "not"), const__30 = (Var)RT.var("clojure.core", "class"), const__31 = (Var)RT.var("clojure.core", "imap-cons"), const__32 = (Var)RT.var("clojure.core", "str"), const__41 = (Var)RT.var("clojure.core", "conj"), const__42 = (Var)RT.var("clojure.core", "not=");
  
  public AbstractSequenceEditor(Object paramObject1, Object paramObject2, Object paramObject3, Object paramObject4, Object paramObject5, Object paramObject6, Object paramObject7, Object paramObject8, Object paramObject9, Object paramObject10, Object paramObject11, Object paramObject12, Object paramObject13, int paramInt1, int paramInt2) { this.subeditor = paramObject1;
    this.subvec_retain = paramObject2;
    this.subvec_delete = paramObject3;
    this.box_replace = paramObject4;
    this.box_new = paramObject5;
    this.adapt_new = paramObject6;
    this.finalize = paramObject7;
    this.create = paramObject8;
    this.item = paramObject9;
    this.subvecs = paramObject10;
    this.i = paramObject11;
    this.__meta = paramObject12;
    this.__extmap = paramObject13;
    this.__hash = paramInt1;
    this.__hasheq = paramInt2; }
  
  public AbstractSequenceEditor(Object paramObject1, Object paramObject2, Object paramObject3, Object paramObject4, Object paramObject5, Object paramObject6, Object paramObject7, Object paramObject8, Object paramObject9, Object paramObject10, Object paramObject11) { this(paramObject1, paramObject2, paramObject3, paramObject4, paramObject5, paramObject6, paramObject7, paramObject8, paramObject9, paramObject10, paramObject11, null, null, 0, 0); }
  
  public AbstractSequenceEditor(Object paramObject1, Object paramObject2, Object paramObject3, Object paramObject4, Object paramObject5, Object paramObject6, Object paramObject7, Object paramObject8, Object paramObject9, Object paramObject10, Object paramObject11, Object paramObject12, Object paramObject13) { this(paramObject1, paramObject2, paramObject3, paramObject4, paramObject5, paramObject6, paramObject7, paramObject8, paramObject9, paramObject10, paramObject11, paramObject12, paramObject13, 0, 0); }
  
  public static IPersistentVector getBasis() { return RT.vector(new Object[] { 
          Symbol.intern(null, "subeditor"), Symbol.intern(null, "subvec-retain"), Symbol.intern(null, "subvec-delete"), Symbol.intern(null, "box-replace"), Symbol.intern(null, "box-new"), Symbol.intern(null, "adapt-new"), Symbol.intern(null, "finalize"), Symbol.intern(null, "create"), Symbol.intern(null, "item"), Symbol.intern(null, "subvecs"), 
          Symbol.intern(null, "i") }); }
  
  public static AbstractSequenceEditor create(IPersistentMap paramIPersistentMap) {
    Object object1 = paramIPersistentMap.valAt(Keyword.intern("subeditor"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("subeditor"));
    Object object2 = paramIPersistentMap.valAt(Keyword.intern("subvec-retain"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("subvec-retain"));
    Object object3 = paramIPersistentMap.valAt(Keyword.intern("subvec-delete"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("subvec-delete"));
    Object object4 = paramIPersistentMap.valAt(Keyword.intern("box-replace"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("box-replace"));
    Object object5 = paramIPersistentMap.valAt(Keyword.intern("box-new"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("box-new"));
    Object object6 = paramIPersistentMap.valAt(Keyword.intern("adapt-new"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("adapt-new"));
    Object object7 = paramIPersistentMap.valAt(Keyword.intern("finalize"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("finalize"));
    Object object8 = paramIPersistentMap.valAt(Keyword.intern("create"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("create"));
    Object object9 = paramIPersistentMap.valAt(Keyword.intern("item"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("item"));
    Object object10 = paramIPersistentMap.valAt(Keyword.intern("subvecs"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("subvecs"));
    Object object11 = paramIPersistentMap.valAt(Keyword.intern("i"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("i"));
    return new AbstractSequenceEditor(object1, object2, object3, object4, object5, object6, object7, object8, object9, object10, object11, null, RT.seqOrElse(paramIPersistentMap), 0, 0);
  }
  
  public Object vec_finalize() { // Byte code:
    //   0: getstatic synchrony/operation/materialize_impl/AbstractSequenceEditor.const__27 : Lclojure/lang/Var;
    //   3: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   6: checkcast clojure/lang/IFn
    //   9: aload_0
    //   10: getfield subvecs : Ljava/lang/Object;
    //   13: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   18: astore_1
    //   19: aload_1
    //   20: dup
    //   21: ifnull -> 36
    //   24: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   27: if_acmpeq -> 37
    //   30: aload_1
    //   31: aconst_null
    //   32: astore_1
    //   33: goto -> 56
    //   36: pop
    //   37: aload_0
    //   38: getfield i : Ljava/lang/Object;
    //   41: invokestatic isPos : (Ljava/lang/Object;)Z
    //   44: ifeq -> 53
    //   47: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   50: goto -> 56
    //   53: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   56: dup
    //   57: ifnull -> 125
    //   60: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   63: if_acmpeq -> 126
    //   66: aload_0
    //   67: getfield finalize : Ljava/lang/Object;
    //   70: checkcast clojure/lang/IFn
    //   73: aload_0
    //   74: getfield item : Ljava/lang/Object;
    //   77: getstatic synchrony/operation/materialize_impl/AbstractSequenceEditor.const__41 : Lclojure/lang/Var;
    //   80: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   83: checkcast clojure/lang/IFn
    //   86: aload_0
    //   87: getfield subvecs : Ljava/lang/Object;
    //   90: aload_0
    //   91: getfield subvec_retain : Ljava/lang/Object;
    //   94: checkcast clojure/lang/IFn
    //   97: aload_0
    //   98: getfield item : Ljava/lang/Object;
    //   101: aload_0
    //   102: getfield i : Ljava/lang/Object;
    //   105: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   110: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   115: aconst_null
    //   116: astore_0
    //   117: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   122: goto -> 130
    //   125: pop
    //   126: aload_0
    //   127: getfield item : Ljava/lang/Object;
    //   130: areturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #364	-> 0
    //   #400	-> 0
    //   #400	-> 6
    //   #400	-> 13
    //   #400	-> 19
    //   #401	-> 41
    //   #402	-> 70
    //   #402	-> 83
    //   #402	-> 94
    //   #402	-> 105
    //   #402	-> 110
    //   #402	-> 115
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   19	37	1	or__5516__auto__37649	Ljava/lang/Object;
    //   0	130	0	this	Lsynchrony/operation/materialize_impl/AbstractSequenceEditor; }
  
  public Object vec_delete(Object offset, Object length, Object op) { // Byte code:
    //   0: aload_0
    //   1: getfield create : Ljava/lang/Object;
    //   4: checkcast clojure/lang/IFn
    //   7: aload_0
    //   8: getfield item : Ljava/lang/Object;
    //   11: getstatic synchrony/operation/materialize_impl/AbstractSequenceEditor.const__41 : Lclojure/lang/Var;
    //   14: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   17: checkcast clojure/lang/IFn
    //   20: aload_0
    //   21: getfield subvecs : Ljava/lang/Object;
    //   24: astore #4
    //   26: getstatic synchrony/operation/materialize_impl/AbstractSequenceEditor.const__42 : Lclojure/lang/Var;
    //   29: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   32: checkcast clojure/lang/IFn
    //   35: aload_0
    //   36: getfield i : Ljava/lang/Object;
    //   39: aload_1
    //   40: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   45: dup
    //   46: ifnull -> 98
    //   49: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   52: if_acmpeq -> 99
    //   55: getstatic synchrony/operation/materialize_impl/AbstractSequenceEditor.const__41 : Lclojure/lang/Var;
    //   58: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   61: checkcast clojure/lang/IFn
    //   64: aload #4
    //   66: aconst_null
    //   67: astore #4
    //   69: aload_0
    //   70: getfield subvec_retain : Ljava/lang/Object;
    //   73: checkcast clojure/lang/IFn
    //   76: aload_0
    //   77: getfield item : Ljava/lang/Object;
    //   80: aload_0
    //   81: getfield i : Ljava/lang/Object;
    //   84: aload_1
    //   85: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   90: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   95: goto -> 104
    //   98: pop
    //   99: aload #4
    //   101: aconst_null
    //   102: astore #4
    //   104: aload_0
    //   105: getfield subvec_delete : Ljava/lang/Object;
    //   108: checkcast clojure/lang/IFn
    //   111: aload_0
    //   112: getfield item : Ljava/lang/Object;
    //   115: aload_1
    //   116: aload_1
    //   117: aload_2
    //   118: invokestatic add : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Number;
    //   121: aload_3
    //   122: aconst_null
    //   123: astore_3
    //   124: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   129: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   134: aload_1
    //   135: aconst_null
    //   136: astore_1
    //   137: aload_2
    //   138: aconst_null
    //   139: astore_2
    //   140: invokestatic add : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Number;
    //   143: aconst_null
    //   144: astore_0
    //   145: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   150: areturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #364	-> 0
    //   #394	-> 4
    //   #397	-> 17
    //   #396	-> 26
    //   #396	-> 32
    //   #396	-> 40
    //   #396	-> 61
    //   #396	-> 73
    //   #396	-> 85
    //   #396	-> 90
    //   #397	-> 108
    //   #397	-> 118
    //   #397	-> 124
    //   #397	-> 129
    //   #398	-> 140
    //   #394	-> 143
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   26	78	4	G__37647	Ljava/lang/Object;
    //   0	150	0	this	Lsynchrony/operation/materialize_impl/AbstractSequenceEditor;
    //   0	150	1	offset	Ljava/lang/Object;
    //   0	150	2	length	Ljava/lang/Object;
    //   0	150	3	op	Ljava/lang/Object; }
  
  public Object vec_insert_vals(Object offset, Object insert_items, Object op) { // Byte code:
    //   0: aload_0
    //   1: getfield create : Ljava/lang/Object;
    //   4: checkcast clojure/lang/IFn
    //   7: aload_0
    //   8: getfield item : Ljava/lang/Object;
    //   11: getstatic synchrony/operation/materialize_impl/AbstractSequenceEditor.const__41 : Lclojure/lang/Var;
    //   14: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   17: checkcast clojure/lang/IFn
    //   20: aload_0
    //   21: getfield subvecs : Ljava/lang/Object;
    //   24: astore #4
    //   26: getstatic synchrony/operation/materialize_impl/AbstractSequenceEditor.const__42 : Lclojure/lang/Var;
    //   29: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   32: checkcast clojure/lang/IFn
    //   35: aload_0
    //   36: getfield i : Ljava/lang/Object;
    //   39: aload_1
    //   40: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   45: dup
    //   46: ifnull -> 98
    //   49: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   52: if_acmpeq -> 99
    //   55: getstatic synchrony/operation/materialize_impl/AbstractSequenceEditor.const__41 : Lclojure/lang/Var;
    //   58: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   61: checkcast clojure/lang/IFn
    //   64: aload #4
    //   66: aconst_null
    //   67: astore #4
    //   69: aload_0
    //   70: getfield subvec_retain : Ljava/lang/Object;
    //   73: checkcast clojure/lang/IFn
    //   76: aload_0
    //   77: getfield item : Ljava/lang/Object;
    //   80: aload_0
    //   81: getfield i : Ljava/lang/Object;
    //   84: aload_1
    //   85: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   90: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   95: goto -> 104
    //   98: pop
    //   99: aload #4
    //   101: aconst_null
    //   102: astore #4
    //   104: aload_0
    //   105: getfield adapt_new : Ljava/lang/Object;
    //   108: checkcast clojure/lang/IFn
    //   111: aload_2
    //   112: aconst_null
    //   113: astore_2
    //   114: aload_3
    //   115: aconst_null
    //   116: astore_3
    //   117: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   122: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   127: aload_1
    //   128: aconst_null
    //   129: astore_1
    //   130: aconst_null
    //   131: astore_0
    //   132: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   137: areturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #364	-> 0
    //   #388	-> 4
    //   #391	-> 17
    //   #390	-> 26
    //   #390	-> 32
    //   #390	-> 40
    //   #390	-> 61
    //   #390	-> 73
    //   #390	-> 85
    //   #390	-> 90
    //   #391	-> 108
    //   #391	-> 117
    //   #391	-> 122
    //   #388	-> 130
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   26	78	4	G__37646	Ljava/lang/Object;
    //   0	137	0	this	Lsynchrony/operation/materialize_impl/AbstractSequenceEditor;
    //   0	137	1	offset	Ljava/lang/Object;
    //   0	137	2	insert_items	Ljava/lang/Object;
    //   0	137	3	op	Ljava/lang/Object; }
  
  public Object vec_insert(Object offset, Object insert_item) { // Byte code:
    //   0: aload_0
    //   1: getfield create : Ljava/lang/Object;
    //   4: checkcast clojure/lang/IFn
    //   7: aload_0
    //   8: getfield item : Ljava/lang/Object;
    //   11: getstatic synchrony/operation/materialize_impl/AbstractSequenceEditor.const__41 : Lclojure/lang/Var;
    //   14: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   17: checkcast clojure/lang/IFn
    //   20: aload_0
    //   21: getfield subvecs : Ljava/lang/Object;
    //   24: astore_3
    //   25: getstatic synchrony/operation/materialize_impl/AbstractSequenceEditor.const__42 : Lclojure/lang/Var;
    //   28: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   31: checkcast clojure/lang/IFn
    //   34: aload_0
    //   35: getfield i : Ljava/lang/Object;
    //   38: aload_1
    //   39: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   44: dup
    //   45: ifnull -> 95
    //   48: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   51: if_acmpeq -> 96
    //   54: getstatic synchrony/operation/materialize_impl/AbstractSequenceEditor.const__41 : Lclojure/lang/Var;
    //   57: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   60: checkcast clojure/lang/IFn
    //   63: aload_3
    //   64: aconst_null
    //   65: astore_3
    //   66: aload_0
    //   67: getfield subvec_retain : Ljava/lang/Object;
    //   70: checkcast clojure/lang/IFn
    //   73: aload_0
    //   74: getfield item : Ljava/lang/Object;
    //   77: aload_0
    //   78: getfield i : Ljava/lang/Object;
    //   81: aload_1
    //   82: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   87: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   92: goto -> 99
    //   95: pop
    //   96: aload_3
    //   97: aconst_null
    //   98: astore_3
    //   99: aload_0
    //   100: getfield box_new : Ljava/lang/Object;
    //   103: checkcast clojure/lang/IFn
    //   106: aload_2
    //   107: aconst_null
    //   108: astore_2
    //   109: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   114: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   119: aload_1
    //   120: aconst_null
    //   121: astore_1
    //   122: aconst_null
    //   123: astore_0
    //   124: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   129: areturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #364	-> 0
    //   #382	-> 4
    //   #385	-> 17
    //   #384	-> 25
    //   #384	-> 31
    //   #384	-> 39
    //   #384	-> 60
    //   #384	-> 70
    //   #384	-> 82
    //   #384	-> 87
    //   #385	-> 103
    //   #385	-> 109
    //   #385	-> 114
    //   #382	-> 122
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   25	74	3	G__37645	Ljava/lang/Object;
    //   0	129	0	this	Lsynchrony/operation/materialize_impl/AbstractSequenceEditor;
    //   0	129	1	offset	Ljava/lang/Object;
    //   0	129	2	insert_item	Ljava/lang/Object; }
  
  public Object vec_replace(Object offset, Object new_item) { // Byte code:
    //   0: aload_0
    //   1: getfield create : Ljava/lang/Object;
    //   4: checkcast clojure/lang/IFn
    //   7: aload_0
    //   8: getfield item : Ljava/lang/Object;
    //   11: getstatic synchrony/operation/materialize_impl/AbstractSequenceEditor.const__41 : Lclojure/lang/Var;
    //   14: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   17: checkcast clojure/lang/IFn
    //   20: aload_0
    //   21: getfield subvecs : Ljava/lang/Object;
    //   24: astore_3
    //   25: getstatic synchrony/operation/materialize_impl/AbstractSequenceEditor.const__42 : Lclojure/lang/Var;
    //   28: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   31: checkcast clojure/lang/IFn
    //   34: aload_0
    //   35: getfield i : Ljava/lang/Object;
    //   38: aload_1
    //   39: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   44: dup
    //   45: ifnull -> 95
    //   48: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   51: if_acmpeq -> 96
    //   54: getstatic synchrony/operation/materialize_impl/AbstractSequenceEditor.const__41 : Lclojure/lang/Var;
    //   57: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   60: checkcast clojure/lang/IFn
    //   63: aload_3
    //   64: aconst_null
    //   65: astore_3
    //   66: aload_0
    //   67: getfield subvec_retain : Ljava/lang/Object;
    //   70: checkcast clojure/lang/IFn
    //   73: aload_0
    //   74: getfield item : Ljava/lang/Object;
    //   77: aload_0
    //   78: getfield i : Ljava/lang/Object;
    //   81: aload_1
    //   82: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   87: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   92: goto -> 99
    //   95: pop
    //   96: aload_3
    //   97: aconst_null
    //   98: astore_3
    //   99: aload_0
    //   100: getfield box_replace : Ljava/lang/Object;
    //   103: checkcast clojure/lang/IFn
    //   106: aload_2
    //   107: aconst_null
    //   108: astore_2
    //   109: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   114: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   119: aload_1
    //   120: aconst_null
    //   121: astore_1
    //   122: invokestatic inc : (Ljava/lang/Object;)Ljava/lang/Number;
    //   125: aconst_null
    //   126: astore_0
    //   127: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   132: areturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #364	-> 0
    //   #376	-> 4
    //   #379	-> 17
    //   #378	-> 25
    //   #378	-> 31
    //   #378	-> 39
    //   #378	-> 60
    //   #378	-> 70
    //   #378	-> 82
    //   #378	-> 87
    //   #379	-> 103
    //   #379	-> 109
    //   #379	-> 114
    //   #380	-> 122
    //   #376	-> 125
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   25	74	3	G__37644	Ljava/lang/Object;
    //   0	132	0	this	Lsynchrony/operation/materialize_impl/AbstractSequenceEditor;
    //   0	132	1	offset	Ljava/lang/Object;
    //   0	132	2	new_item	Ljava/lang/Object; }
  
  public Object vec_subeditor(Object offset, Object item) { offset = null;
    item = null;
    this = null;
    return ((IFn)this.subeditor).invoke(this, offset, item); }
  
  public int hasheq() {
    int hq__7768__auto__37651 = this.__hasheq, h__7769__auto__37650 = RT.intCast(0x78FA9584L ^ APersistentMap.mapHasheq((IPersistentMap)this));
    this.__hasheq = h__7769__auto__37650;
    return (hq__7768__auto__37651 == 0L) ? h__7769__auto__37650 : hq__7768__auto__37651;
  }
  
  public int hashCode() {
    int hash__7771__auto__37653 = this.__hash, h__7772__auto__37652 = APersistentMap.mapHash((IPersistentMap)this);
    this.__hash = h__7772__auto__37652;
    return (hash__7771__auto__37653 == 0L) ? h__7772__auto__37652 : hash__7771__auto__37653;
  }
  
  public boolean equals(Object G__37616) { G__37616 = null;
    return APersistentMap.mapEquals((IPersistentMap)this, G__37616); }
  
  public IPersistentMap meta() { return (IPersistentMap)this.__meta; }
  
  public IObj withMeta(IPersistentMap G__37616) { G__37616 = null;
    return (IObj)new AbstractSequenceEditor(this.subeditor, this.subvec_retain, this.subvec_delete, this.box_replace, this.box_new, this.adapt_new, this.finalize, this.create, this.item, this.subvecs, this.i, G__37616, this.__extmap, this.__hash, this.__hasheq); }
  
  public Object valAt(Object k__7777__auto__) { k__7777__auto__ = null;
    return ((ILookup)this).valAt(k__7777__auto__, null); }
  
  public Object valAt(Object k__7779__auto__, Object else__7780__auto__) {
    Object G__37643 = k__7779__auto__;
    switch (Util.hash(G__37643) >> 2 & 0x1F) {
      case 0:
        if (G__37643 == const__13);
        break;
      case 4:
        if (G__37643 == const__14);
        break;
      case 5:
        if (G__37643 == const__17);
        break;
      case 7:
        if (G__37643 == const__10);
        break;
      case 12:
        if (G__37643 == const__18);
        break;
      case 13:
        if (G__37643 == const__12);
        break;
      case 14:
        if (G__37643 == const__11);
        break;
      case 15:
        if (G__37643 == const__8);
        break;
      case 17:
        if (G__37643 == const__16);
        break;
      case 25:
        if (G__37643 == const__9);
        break;
      case 29:
        if (G__37643 == const__15);
        break;
    } 
    k__7779__auto__ = null;
    else__7780__auto__ = null;
    this = null;
    return RT.get(this.__extmap, k__7779__auto__, else__7780__auto__);
  }
  
  public ILookupThunk getLookupThunk(Keyword k__7782__auto__) {
    Object gclass = ((IFn)const__30.getRawRoot()).invoke(this), G__37620 = k__7782__auto__ = null;
    switch (Util.hash(G__37620) >> 2 & 0x1F) {
      case 0:
        if (G__37620 == const__13)
          gclass = null; 
        break;
      case 4:
        if (G__37620 == const__14)
          gclass = null; 
        break;
      case 5:
        if (G__37620 == const__17)
          gclass = null; 
        break;
      case 7:
        if (G__37620 == const__10)
          gclass = null; 
        break;
      case 12:
        if (G__37620 == const__18)
          gclass = null; 
        break;
      case 13:
        if (G__37620 == const__12)
          gclass = null; 
        break;
      case 14:
        if (G__37620 == const__11)
          gclass = null; 
        break;
      case 15:
        if (G__37620 == const__8)
          gclass = null; 
        break;
      case 17:
        if (G__37620 == const__16)
          gclass = null; 
        break;
      case 25:
        if (G__37620 == const__9)
          gclass = null; 
        break;
      case 29:
        if (G__37620 == const__15)
          gclass = null; 
        break;
    } 
    return (ILookupThunk)null;
  }
  
  public int count() { return RT.intCast(Numbers.add(11L, RT.count(this.__extmap))); }
  
  public IPersistentCollection empty() { throw (Throwable)new UnsupportedOperationException((String)((IFn)const__32.getRawRoot()).invoke("Can't create empty: ", "synchrony.operation.materialize_impl.AbstractSequenceEditor")); }
  
  public IPersistentCollection cons(Object e__7786__auto__) { e__7786__auto__ = null;
    this = null;
    return (IPersistentCollection)((IFn)const__31).invoke(this, e__7786__auto__); }
  
  public boolean equiv(Object G__37616) {
    boolean or__5516__auto__37665 = Util.identical(this, G__37616);
    Object G__37616 = G__37616 = null;
    boolean and__5514__auto__37664 = Util.equiv(this.subeditor, ((AbstractSequenceEditor)G__37616).subeditor), and__5514__auto__37663 = Util.equiv(this.subvec_retain, ((AbstractSequenceEditor)G__37616).subvec_retain), and__5514__auto__37662 = Util.equiv(this.subvec_delete, ((AbstractSequenceEditor)G__37616).subvec_delete), and__5514__auto__37661 = Util.equiv(this.box_replace, ((AbstractSequenceEditor)G__37616).box_replace), and__5514__auto__37660 = Util.equiv(this.box_new, ((AbstractSequenceEditor)G__37616).box_new), and__5514__auto__37659 = Util.equiv(this.adapt_new, ((AbstractSequenceEditor)G__37616).adapt_new), and__5514__auto__37658 = Util.equiv(this.finalize, ((AbstractSequenceEditor)G__37616).finalize), and__5514__auto__37657 = Util.equiv(this.create, ((AbstractSequenceEditor)G__37616).create), and__5514__auto__37656 = Util.equiv(this.item, ((AbstractSequenceEditor)G__37616).item), and__5514__auto__37655 = Util.equiv(this.subvecs, ((AbstractSequenceEditor)G__37616).subvecs), and__5514__auto__37654 = Util.equiv(this.i, ((AbstractSequenceEditor)G__37616).i);
    G__37616 = null;
    return RT.booleanCast(or__5516__auto__37665 ? (or__5516__auto__37665 ? Boolean.TRUE : Boolean.FALSE) : (Util.identical(((IFn)const__30.getRawRoot()).invoke(this), ((IFn)const__30.getRawRoot()).invoke(G__37616)) ? (and__5514__auto__37664 ? (and__5514__auto__37663 ? (and__5514__auto__37662 ? (and__5514__auto__37661 ? (and__5514__auto__37660 ? (and__5514__auto__37659 ? (and__5514__auto__37658 ? (and__5514__auto__37657 ? (and__5514__auto__37656 ? (and__5514__auto__37655 ? (and__5514__auto__37654 ? (Util.equiv(this.__extmap, ((AbstractSequenceEditor)G__37616).__extmap) ? Boolean.TRUE : Boolean.FALSE) : (and__5514__auto__37654 ? Boolean.TRUE : Boolean.FALSE)) : (and__5514__auto__37655 ? Boolean.TRUE : Boolean.FALSE)) : (and__5514__auto__37656 ? Boolean.TRUE : Boolean.FALSE)) : (and__5514__auto__37657 ? Boolean.TRUE : Boolean.FALSE)) : (and__5514__auto__37658 ? Boolean.TRUE : Boolean.FALSE)) : (and__5514__auto__37659 ? Boolean.TRUE : Boolean.FALSE)) : (and__5514__auto__37660 ? Boolean.TRUE : Boolean.FALSE)) : (and__5514__auto__37661 ? Boolean.TRUE : Boolean.FALSE)) : (and__5514__auto__37662 ? Boolean.TRUE : Boolean.FALSE)) : (and__5514__auto__37663 ? Boolean.TRUE : Boolean.FALSE)) : (and__5514__auto__37664 ? Boolean.TRUE : Boolean.FALSE)) : null));
  }
  
  public boolean containsKey(Object k__7789__auto__) { k__7789__auto__ = null;
    this = null;
    return ((Boolean)((IFn)const__29.getRawRoot()).invoke(Util.identical(this, ((ILookup)this).valAt(k__7789__auto__, this)) ? Boolean.TRUE : Boolean.FALSE)).booleanValue(); }
  
  public IMapEntry entryAt(Object k__7791__auto__) {
    Object v__7792__auto__37666 = ((ILookup)this).valAt(k__7791__auto__, this);
    k__7791__auto__ = null;
    v__7792__auto__37666 = null;
    this = null;
    return (IMapEntry)(Util.identical(this, v__7792__auto__37666) ? null : MapEntry.create(k__7791__auto__, v__7792__auto__37666));
  }
  
  public ISeq seq() { this = null;
    return (ISeq)((IFn)const__27.getRawRoot()).invoke(((IFn)const__28.getRawRoot()).invoke(RT.vector(new Object[] { 
              MapEntry.create(const__13, this.subeditor), MapEntry.create(const__15, this.subvec_retain), MapEntry.create(const__16, this.subvec_delete), MapEntry.create(const__14, this.box_replace), MapEntry.create(const__12, this.box_new), MapEntry.create(const__10, this.adapt_new), MapEntry.create(const__17, this.finalize), MapEntry.create(const__8, this.create), MapEntry.create(const__9, this.item), MapEntry.create(const__11, this.subvecs), 
              MapEntry.create(const__18, this.i) }), this.__extmap)); }
  
  public Iterator iterator() { return (Iterator)new RecordIterator((ILookup)this, (IPersistentVector)const__26, (Iterator)RT.iter(this.__extmap)); }
  
  public IPersistentMap assoc(Object k__7796__auto__, Object G__37616) {
    Object pred__37618 = const__24.getRawRoot(), expr__37619 = k__7796__auto__;
    if (((IFn)pred__37618).invoke(const__13, expr__37619) != null) {
      if (((IFn)pred__37618).invoke(const__13, expr__37619) != Boolean.FALSE)
        G__37616 = null; 
    } else {
      ((IFn)pred__37618).invoke(const__13, expr__37619);
    } 
    if (((IFn)pred__37618).invoke(const__15, expr__37619) != null) {
      if (((IFn)pred__37618).invoke(const__15, expr__37619) != Boolean.FALSE)
        G__37616 = null; 
    } else {
      ((IFn)pred__37618).invoke(const__15, expr__37619);
    } 
    if (((IFn)pred__37618).invoke(const__16, expr__37619) != null) {
      if (((IFn)pred__37618).invoke(const__16, expr__37619) != Boolean.FALSE)
        G__37616 = null; 
    } else {
      ((IFn)pred__37618).invoke(const__16, expr__37619);
    } 
    if (((IFn)pred__37618).invoke(const__14, expr__37619) != null) {
      if (((IFn)pred__37618).invoke(const__14, expr__37619) != Boolean.FALSE)
        G__37616 = null; 
    } else {
      ((IFn)pred__37618).invoke(const__14, expr__37619);
    } 
    if (((IFn)pred__37618).invoke(const__12, expr__37619) != null) {
      if (((IFn)pred__37618).invoke(const__12, expr__37619) != Boolean.FALSE)
        G__37616 = null; 
    } else {
      ((IFn)pred__37618).invoke(const__12, expr__37619);
    } 
    if (((IFn)pred__37618).invoke(const__10, expr__37619) != null) {
      if (((IFn)pred__37618).invoke(const__10, expr__37619) != Boolean.FALSE)
        G__37616 = null; 
    } else {
      ((IFn)pred__37618).invoke(const__10, expr__37619);
    } 
    if (((IFn)pred__37618).invoke(const__17, expr__37619) != null) {
      if (((IFn)pred__37618).invoke(const__17, expr__37619) != Boolean.FALSE)
        G__37616 = null; 
    } else {
      ((IFn)pred__37618).invoke(const__17, expr__37619);
    } 
    if (((IFn)pred__37618).invoke(const__8, expr__37619) != null) {
      if (((IFn)pred__37618).invoke(const__8, expr__37619) != Boolean.FALSE)
        G__37616 = null; 
    } else {
      ((IFn)pred__37618).invoke(const__8, expr__37619);
    } 
    if (((IFn)pred__37618).invoke(const__9, expr__37619) != null) {
      if (((IFn)pred__37618).invoke(const__9, expr__37619) != Boolean.FALSE)
        G__37616 = null; 
    } else {
      ((IFn)pred__37618).invoke(const__9, expr__37619);
    } 
    if (((IFn)pred__37618).invoke(const__11, expr__37619) != null) {
      if (((IFn)pred__37618).invoke(const__11, expr__37619) != Boolean.FALSE)
        G__37616 = null; 
    } else {
      ((IFn)pred__37618).invoke(const__11, expr__37619);
    } 
    pred__37618 = null;
    expr__37619 = null;
    if (((IFn)pred__37618).invoke(const__18, expr__37619) != null) {
      if (((IFn)pred__37618).invoke(const__18, expr__37619) != Boolean.FALSE)
        G__37616 = null; 
    } else {
      ((IFn)pred__37618).invoke(const__18, expr__37619);
    } 
    k__7796__auto__ = null;
    G__37616 = null;
    return (IPersistentMap)new AbstractSequenceEditor(this.subeditor, this.subvec_retain, this.subvec_delete, this.box_replace, this.box_new, this.adapt_new, this.finalize, this.create, this.item, this.subvecs, this.i, this.__meta, ((IFn)const__25.getRawRoot()).invoke(this.__extmap, k__7796__auto__, G__37616));
  }
  
  public IPersistentMap without(Object k__7798__auto__) { if (((IFn)const__7.getRawRoot()).invoke(const__19, k__7798__auto__) != null) {
      if (((IFn)const__7.getRawRoot()).invoke(const__19, k__7798__auto__) != Boolean.FALSE) {
        k__7798__auto__ = null;
        this = null;
      } 
    } else {
      ((IFn)const__7.getRawRoot()).invoke(const__19, k__7798__auto__);
    } 
    k__7798__auto__ = null;
    return (IPersistentMap)new AbstractSequenceEditor(this.subeditor, this.subvec_retain, this.subvec_delete, this.box_replace, this.box_new, this.adapt_new, this.finalize, this.create, this.item, this.subvecs, this.i, this.__meta, ((IFn)const__23.getRawRoot()).invoke(((IFn)const__20.getRawRoot()).invoke(this.__extmap, k__7798__auto__))); }
  
  public int size() { this = null;
    return ((Counted)this).count(); }
  
  public boolean isEmpty() { return Util.equiv(0L, ((Counted)this).count()); }
  
  public boolean containsValue(Object v__7802__auto__) { v__7802__auto__ = null;
    return RT.booleanCast(((IFn)const__4.getRawRoot()).invoke(RT.set(new Object[] { v__7802__auto__ }, ), ((IFn)const__1.getRawRoot()).invoke(this))); }
  
  public Object get(Object k__7804__auto__) { k__7804__auto__ = null;
    return ((ILookup)this).valAt(k__7804__auto__); }
  
  public Object put(Object k__7806__auto__, Object v__7807__auto__) { throw (Throwable)new UnsupportedOperationException(); }
  
  public Object remove(Object k__7809__auto__) { throw (Throwable)new UnsupportedOperationException(); }
  
  public void putAll(Map m__7811__auto__) { throw (Throwable)new UnsupportedOperationException(); }
  
  public void clear() { throw (Throwable)new UnsupportedOperationException(); }
  
  public Set keySet() { this = null;
    return (Set)((IFn)const__0.getRawRoot()).invoke(((IFn)const__2.getRawRoot()).invoke(this)); }
  
  public Collection values() { this = null;
    return (Collection)((IFn)const__1.getRawRoot()).invoke(this); }
  
  public Set entrySet() { this = null;
    return (Set)((IFn)const__0.getRawRoot()).invoke(this); }
}
