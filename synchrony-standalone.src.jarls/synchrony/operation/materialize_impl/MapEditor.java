package synchrony.operation.materialize_impl;

import clojure.lang.IFn;
import clojure.lang.IPersistentVector;
import clojure.lang.IType;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Util;
import clojure.lang.Var;

public final class MapEditor implements EditMap, IType {
  public final Object item;
  
  private static Class __cached_class__0;
  
  public static final Var const__0 = (Var)RT.var("synchrony.operation.materialize-impl", "root-editor"), const__1 = (Var)RT.var("clojure.core", "assoc"), const__2 = (Var)RT.var("clojure.core", "dissoc");
  
  public MapEditor(Object paramObject) { this.item = paramObject; }
  
  public static IPersistentVector getBasis() { return Tuple.create(Symbol.intern(null, "item")); }
  
  public Object map_finalize() { return this.item; }
  
  public Object map_delete(Object key) { key = null;
    return new MapEditor(((IFn)const__2.getRawRoot()).invoke(this.item, key)); }
  
  public Object map_put(Object key, Object value) { key = null;
    value = null;
    return new MapEditor(((IFn)const__1.getRawRoot()).invoke(this.item, key, value)); }
  
  public Object map_subeditor(Object key, Object item) { item = null;
    if (Util.classOf(item) != __cached_class__0)
      if (!(item instanceof RootEditor)) {
        __cached_class__0 = Util.classOf(item);
      } else {
        return ((RootEditor)item).root_editor();
      }  
    this = null; }
}
