package synchrony.operation;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class materialize_impl__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Object const__3;
  
  public static final Var const__4;
  
  public static final Var const__5;
  
  public static final Var const__6;
  
  public static final Keyword const__7;
  
  public static final Var const__8;
  
  public static final ISeq const__9;
  
  public static final Var const__10;
  
  public static final Var const__11;
  
  public static final AFn const__15;
  
  public static final Keyword const__16;
  
  public static final AFn const__17;
  
  public static final Keyword const__18;
  
  public static final Keyword const__19;
  
  public static final AFn const__21;
  
  public static final Keyword const__22;
  
  public static final Var const__23;
  
  public static final Var const__24;
  
  public static final Var const__25;
  
  public static final AFn const__26;
  
  public static final AFn const__27;
  
  public static final Keyword const__28;
  
  public static final Var const__29;
  
  public static final AFn const__30;
  
  public static final Object const__31;
  
  public static final Var const__32;
  
  public static final ISeq const__33;
  
  public static final AFn const__35;
  
  public static final AFn const__36;
  
  public static final AFn const__43;
  
  public static final AFn const__44;
  
  public static final AFn const__45;
  
  public static final AFn const__46;
  
  public static final AFn const__47;
  
  public static final AFn const__48;
  
  public static final AFn const__49;
  
  public static final AFn const__50;
  
  public static final AFn const__51;
  
  public static final AFn const__52;
  
  public static final AFn const__53;
  
  public static final AFn const__54;
  
  public static final AFn const__55;
  
  public static final AFn const__56;
  
  public static final Object const__57;
  
  public static final Var const__58;
  
  public static final ISeq const__59;
  
  public static final AFn const__61;
  
  public static final AFn const__62;
  
  public static final AFn const__67;
  
  public static final AFn const__68;
  
  public static final AFn const__69;
  
  public static final AFn const__70;
  
  public static final AFn const__71;
  
  public static final AFn const__72;
  
  public static final AFn const__73;
  
  public static final AFn const__74;
  
  public static final AFn const__75;
  
  public static final AFn const__76;
  
  public static final Var const__77;
  
  public static final AFn const__84;
  
  public static final Var const__85;
  
  public static final Object const__86;
  
  public static final Var const__87;
  
  public static final AFn const__91;
  
  public static final Var const__92;
  
  public static final AFn const__95;
  
  public static final Var const__96;
  
  public static final AFn const__99;
  
  public static final Var const__100;
  
  public static final AFn const__103;
  
  public static final Var const__104;
  
  public static final AFn const__105;
  
  public static final Var const__106;
  
  public static final AFn const__109;
  
  public static final Var const__110;
  
  public static final AFn const__113;
  
  public static final Var const__114;
  
  public static final AFn const__117;
  
  public static final AFn const__120;
  
  public static final AFn const__123;
  
  public static final Var const__124;
  
  public static final AFn const__126;
  
  public static final Var const__127;
  
  public static final AFn const__129;
  
  public static final Var const__130;
  
  public static final AFn const__133;
  
  public static final Var const__134;
  
  public static final AFn const__137;
  
  public static final Var const__138;
  
  public static final AFn const__141;
  
  public static final AFn const__144;
  
  public static final AFn const__147;
  
  public static final Var const__148;
  
  public static final AFn const__151;
  
  public static final Var const__152;
  
  public static final AFn const__155;
  
  public static final Var const__156;
  
  public static final AFn const__159;
  
  public static final Var const__160;
  
  public static final AFn const__163;
  
  public static final Var const__164;
  
  public static final AFn const__167;
  
  public static final Var const__168;
  
  public static final AFn const__171;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new materialize_impl.fn__37358());
    const__77.setMeta((IPersistentMap)const__84);
    const__77




      
      .bindRoot(((IFn)const__85.getRawRoot()).invoke(const__86));
    const__87.setMeta((IPersistentMap)const__91);
    const__87.bindRoot(new materialize_impl.assert_unit_range_op());
    const__92.setMeta((IPersistentMap)const__95);
    const__92.bindRoot(new materialize_impl.invalid_multi_valued_map_op());
    const__96.setMeta((IPersistentMap)const__99);
    const__96.bindRoot(new materialize_impl.get_existing());
    const__100.setMeta((IPersistentMap)const__103);
    const__104.setMeta((IPersistentMap)const__105);
    const__106.setMeta((IPersistentMap)const__109);
    const__106.bindRoot(new materialize_impl.collect_seq_srcvecs_unit());
    const__110.setMeta((IPersistentMap)const__113);
    const__110.bindRoot(new materialize_impl.collect_unit());
    const__114.setMeta((IPersistentMap)const__117);
    const__114.bindRoot(new materialize_impl.collect_seq_step());
    const__100.setMeta((IPersistentMap)const__120);
    const__100.bindRoot(new materialize_impl.collect_map_srcvecs());
    const__104.setMeta((IPersistentMap)const__123);
    const__104.bindRoot(new materialize_impl.collect_seq_srcvecs());
    const__124.setMeta((IPersistentMap)const__126);
    const__127.setMeta((IPersistentMap)const__129);
    const__130.setMeta((IPersistentMap)const__133);
    const__130.bindRoot(new materialize_impl.edit_new());
    const__134.setMeta((IPersistentMap)const__137);
    const__134.bindRoot(new materialize_impl.edit_map_entry());
    const__138.setMeta((IPersistentMap)const__141);
    const__138.bindRoot(new materialize_impl.edit_vec_step());
    const__124.setMeta((IPersistentMap)const__144);
    const__124.bindRoot(new materialize_impl.edit_map());
    const__127.setMeta((IPersistentMap)const__147);
    const__127.bindRoot(new materialize_impl.edit_vec());
    const__148.setMeta((IPersistentMap)const__151);
    const__148.bindRoot(new materialize_impl.materialize());
    const__152.setMeta((IPersistentMap)const__155);
    const__152.bindRoot(new materialize_impl.vec_editor());
    const__156.setMeta((IPersistentMap)const__159);
    const__156.bindRoot(new materialize_impl.map_editor());
    const__160.setMeta((IPersistentMap)const__163);
    const__160.bindRoot(new materialize_impl.abstract_sequence_editor());
    const__164.setMeta((IPersistentMap)const__167);
    const__164.bindRoot(new materialize_impl.abstract_map_editor());
    const__168.setMeta((IPersistentMap)const__171);
    const__168.bindRoot(new materialize_impl.finalize_map());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "synchrony.operation.materialize-impl");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = RT.classForName("synchrony.operation.materialize_impl.RootEditor");
    const__4 = (Var)RT.var("clojure.core", "alter-meta!");
    const__5 = (Var)RT.var("synchrony.operation.materialize-impl", "RootEditor");
    const__6 = (Var)RT.var("clojure.core", "assoc");
    const__7 = (Keyword)RT.keyword(null, "doc");
    const__8 = (Var)RT.var("clojure.core", "assert-same-protocol");
    const__9 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "root-editor")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "val")) })) })) }));
    const__10 = (Var)RT.var("clojure.core", "alter-var-root");
    const__11 = (Var)RT.var("clojure.core", "merge");
    const__15 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "synchrony.operation.materialize_impl.RootEditor"), RT.keyword(null, "on-interface"), RT.classForName("synchrony.operation.materialize_impl.RootEditor") });
    const__16 = (Keyword)RT.keyword(null, "sigs");
    const__17 = (AFn)RT.map(new Object[] { RT.keyword(null, "root-editor"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "root-editor")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "val")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "val")) })), RT.keyword(null, "doc"), null }) });
    const__18 = (Keyword)RT.keyword(null, "var");
    const__19 = (Keyword)RT.keyword(null, "method-map");
    const__21 = (AFn)RT.map(new Object[] { RT.keyword(null, "root-editor"), RT.keyword(null, "root-editor") });
    const__22 = (Keyword)RT.keyword(null, "method-builders");
    const__23 = (Var)RT.var("clojure.core", "intern");
    const__24 = (Var)RT.var("clojure.core", "*ns*");
    const__25 = (Var)RT.var("clojure.core", "with-meta");
    const__26 = (AFn)((IObj)Symbol.intern(null, "root-editor")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "val")) })) }));
    const__27 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "root-editor")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "val")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "val")) })), RT.keyword(null, "doc"), null });
    const__28 = (Keyword)RT.keyword(null, "protocol");
    const__29 = (Var)RT.var("clojure.core", "-reset-methods");
    const__30 = (AFn)Symbol.intern(null, "RootEditor");
    const__31 = RT.classForName("synchrony.operation.materialize_impl.EditVec");
    const__32 = (Var)RT.var("synchrony.operation.materialize-impl", "EditVec");
    const__33 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "vec-subeditor")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor"), Symbol.intern(null, "offset"), Symbol.intern(null, "val")) })) })), ((IObj)Symbol.intern(null, "vec-replace")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor"), Symbol.intern(null, "offset"), Symbol.intern(null, "val")) })) })), ((IObj)Symbol.intern(null, "vec-insert-vals")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor"), Symbol.intern(null, "offset"), Symbol.intern(null, "vals"), Symbol.intern(null, "op")) })) })), ((IObj)Symbol.intern(null, "vec-insert")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor"), Symbol.intern(null, "offset"), Symbol.intern(null, "val")) })) })), ((IObj)Symbol.intern(null, "vec-delete")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor"), Symbol.intern(null, "offset"), Symbol.intern(null, "length"), Symbol.intern(null, "op")) })) })), ((IObj)Symbol.intern(null, "vec-finalize")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor")) })) })) }));
    const__35 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "synchrony.operation.materialize_impl.EditVec"), RT.keyword(null, "on-interface"), RT.classForName("synchrony.operation.materialize_impl.EditVec") });
    const__36 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "vec-subeditor"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "vec-subeditor")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor"), Symbol.intern(null, "offset"), Symbol.intern(null, "val")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor"), Symbol.intern(null, "offset"), Symbol.intern(null, "val")) })), RT.keyword(null, "doc"), null }), RT.keyword(null, "vec-replace"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "vec-replace")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor"), Symbol.intern(null, "offset"), Symbol.intern(null, "val")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor"), Symbol.intern(null, "offset"), Symbol.intern(null, "val")) })), RT.keyword(null, "doc"), null }), RT.keyword(null, "vec-insert-vals"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "vec-insert-vals")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor"), Symbol.intern(null, "offset"), Symbol.intern(null, "vals"), Symbol.intern(null, "op")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor"), Symbol.intern(null, "offset"), Symbol.intern(null, "vals"), Symbol.intern(null, "op")) })), RT.keyword(null, "doc"), null }), RT.keyword(null, "vec-insert"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "vec-insert")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor"), Symbol.intern(null, "offset"), Symbol.intern(null, "val")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor"), Symbol.intern(null, "offset"), Symbol.intern(null, "val")) })), RT.keyword(null, "doc"), null }), RT.keyword(null, "vec-delete"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "vec-delete")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor"), Symbol.intern(null, "offset"), Symbol.intern(null, "length"), Symbol.intern(null, "op")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor"), Symbol.intern(null, "offset"), Symbol.intern(null, "length"), Symbol.intern(null, "op")) })), RT.keyword(null, "doc"), null }), 
          RT.keyword(null, "vec-finalize"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "vec-finalize")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor")) })), RT.keyword(null, "doc"), null }) });
    const__43 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "vec-delete"), RT.keyword(null, "vec-delete"), RT.keyword(null, "vec-replace"), RT.keyword(null, "vec-replace"), RT.keyword(null, "vec-subeditor"), RT.keyword(null, "vec-subeditor"), RT.keyword(null, "vec-finalize"), RT.keyword(null, "vec-finalize"), RT.keyword(null, "vec-insert-vals"), RT.keyword(null, "vec-insert-vals"), 
          RT.keyword(null, "vec-insert"), RT.keyword(null, "vec-insert") });
    const__44 = (AFn)((IObj)Symbol.intern(null, "vec-finalize")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor")) })) }));
    const__45 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "vec-finalize")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor")) })), RT.keyword(null, "doc"), null });
    const__46 = (AFn)((IObj)Symbol.intern(null, "vec-delete")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor"), Symbol.intern(null, "offset"), Symbol.intern(null, "length"), Symbol.intern(null, "op")) })) }));
    const__47 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "vec-delete")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor"), Symbol.intern(null, "offset"), Symbol.intern(null, "length"), Symbol.intern(null, "op")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor"), Symbol.intern(null, "offset"), Symbol.intern(null, "length"), Symbol.intern(null, "op")) })), RT.keyword(null, "doc"), null });
    const__48 = (AFn)((IObj)Symbol.intern(null, "vec-insert")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor"), Symbol.intern(null, "offset"), Symbol.intern(null, "val")) })) }));
    const__49 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "vec-insert")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor"), Symbol.intern(null, "offset"), Symbol.intern(null, "val")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor"), Symbol.intern(null, "offset"), Symbol.intern(null, "val")) })), RT.keyword(null, "doc"), null });
    const__50 = (AFn)((IObj)Symbol.intern(null, "vec-subeditor")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor"), Symbol.intern(null, "offset"), Symbol.intern(null, "val")) })) }));
    const__51 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "vec-subeditor")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor"), Symbol.intern(null, "offset"), Symbol.intern(null, "val")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor"), Symbol.intern(null, "offset"), Symbol.intern(null, "val")) })), RT.keyword(null, "doc"), null });
    const__52 = (AFn)((IObj)Symbol.intern(null, "vec-insert-vals")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor"), Symbol.intern(null, "offset"), Symbol.intern(null, "vals"), Symbol.intern(null, "op")) })) }));
    const__53 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "vec-insert-vals")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor"), Symbol.intern(null, "offset"), Symbol.intern(null, "vals"), Symbol.intern(null, "op")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor"), Symbol.intern(null, "offset"), Symbol.intern(null, "vals"), Symbol.intern(null, "op")) })), RT.keyword(null, "doc"), null });
    const__54 = (AFn)((IObj)Symbol.intern(null, "vec-replace")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor"), Symbol.intern(null, "offset"), Symbol.intern(null, "val")) })) }));
    const__55 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "vec-replace")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor"), Symbol.intern(null, "offset"), Symbol.intern(null, "val")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor"), Symbol.intern(null, "offset"), Symbol.intern(null, "val")) })), RT.keyword(null, "doc"), null });
    const__56 = (AFn)Symbol.intern(null, "EditVec");
    const__57 = RT.classForName("synchrony.operation.materialize_impl.EditMap");
    const__58 = (Var)RT.var("synchrony.operation.materialize-impl", "EditMap");
    const__59 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "map-subeditor")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor"), Symbol.intern(null, "key"), Symbol.intern(null, "val")) })) })), ((IObj)Symbol.intern(null, "map-put")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor"), Symbol.intern(null, "key"), Symbol.intern(null, "val")) })) })), ((IObj)Symbol.intern(null, "map-delete")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor"), Symbol.intern(null, "key")) })) })), ((IObj)Symbol.intern(null, "map-finalize")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor")) })) })) }));
    const__61 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "synchrony.operation.materialize_impl.EditMap"), RT.keyword(null, "on-interface"), RT.classForName("synchrony.operation.materialize_impl.EditMap") });
    const__62 = (AFn)RT.map(new Object[] { RT.keyword(null, "map-subeditor"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "map-subeditor")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor"), Symbol.intern(null, "key"), Symbol.intern(null, "val")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor"), Symbol.intern(null, "key"), Symbol.intern(null, "val")) })), RT.keyword(null, "doc"), null }), RT.keyword(null, "map-put"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "map-put")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor"), Symbol.intern(null, "key"), Symbol.intern(null, "val")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor"), Symbol.intern(null, "key"), Symbol.intern(null, "val")) })), RT.keyword(null, "doc"), null }), RT.keyword(null, "map-delete"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "map-delete")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor"), Symbol.intern(null, "key")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor"), Symbol.intern(null, "key")) })), RT.keyword(null, "doc"), null }), RT.keyword(null, "map-finalize"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "map-finalize")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor")) })), RT.keyword(null, "doc"), null }) });
    const__67 = (AFn)RT.map(new Object[] { RT.keyword(null, "map-finalize"), RT.keyword(null, "map-finalize"), RT.keyword(null, "map-put"), RT.keyword(null, "map-put"), RT.keyword(null, "map-subeditor"), RT.keyword(null, "map-subeditor"), RT.keyword(null, "map-delete"), RT.keyword(null, "map-delete") });
    const__68 = (AFn)((IObj)Symbol.intern(null, "map-put")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor"), Symbol.intern(null, "key"), Symbol.intern(null, "val")) })) }));
    const__69 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "map-put")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor"), Symbol.intern(null, "key"), Symbol.intern(null, "val")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor"), Symbol.intern(null, "key"), Symbol.intern(null, "val")) })), RT.keyword(null, "doc"), null });
    const__70 = (AFn)((IObj)Symbol.intern(null, "map-subeditor")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor"), Symbol.intern(null, "key"), Symbol.intern(null, "val")) })) }));
    const__71 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "map-subeditor")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor"), Symbol.intern(null, "key"), Symbol.intern(null, "val")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor"), Symbol.intern(null, "key"), Symbol.intern(null, "val")) })), RT.keyword(null, "doc"), null });
    const__72 = (AFn)((IObj)Symbol.intern(null, "map-delete")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor"), Symbol.intern(null, "key")) })) }));
    const__73 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "map-delete")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor"), Symbol.intern(null, "key")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor"), Symbol.intern(null, "key")) })), RT.keyword(null, "doc"), null });
    const__74 = (AFn)((IObj)Symbol.intern(null, "map-finalize")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor")) })) }));
    const__75 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "map-finalize")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "editor")) })), RT.keyword(null, "doc"), null });
    const__76 = (AFn)Symbol.intern(null, "EditMap");
    const__77 = (Var)RT.var("synchrony.operation.materialize-impl", "not-found-value");
    const__84 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(27), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/materialize_impl.cljc" });
    const__85 = (Var)RT.var("ginga.core", "make-array");
    const__86 = Long.valueOf(0L);
    const__87 = (Var)RT.var("synchrony.operation.materialize-impl", "assert-unit-range-op");
    const__91 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "op")) })), RT.keyword(null, "line"), Integer.valueOf(29), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/materialize_impl.cljc" });
    const__92 = (Var)RT.var("synchrony.operation.materialize-impl", "invalid-multi-valued-map-op");
    const__95 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(32), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/materialize_impl.cljc" });
    const__96 = (Var)RT.var("synchrony.operation.materialize-impl", "get-existing");
    const__99 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "a-get"), Symbol.intern(null, "obj"), Symbol.intern(null, "key")) })), RT.keyword(null, "line"), Integer.valueOf(35), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/materialize_impl.cljc" });
  }
  
  public static void __init1() {
    const__100 = (Var)RT.var("synchrony.operation.materialize-impl", "collect-map-srcvecs");
    const__103 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(41), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/materialize_impl.cljc" });
    const__104 = (Var)RT.var("synchrony.operation.materialize-impl", "collect-seq-srcvecs");
    const__105 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(41), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/materialize_impl.cljc" });
    const__106 = (Var)RT.var("synchrony.operation.materialize-impl", "collect-seq-srcvecs-unit");
    const__109 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { RT.vector(new Object[] { Symbol.intern(null, "a-get"), Symbol.intern(null, "a-box"), Symbol.intern(null, "a-subvec"), Symbol.intern(null, "srcvecs"), Symbol.intern(null, "nodes"), Symbol.intern(null, "i"), Symbol.intern(null, "ops") }) })), RT.keyword(null, "line"), Integer.valueOf(44), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/materialize_impl.cljc" });
    const__110 = (Var)RT.var("synchrony.operation.materialize-impl", "collect-unit");
    const__113 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { RT.vector(new Object[] { Symbol.intern(null, "a-get"), Symbol.intern(null, "a-box"), Symbol.intern(null, "a-subvec"), Symbol.intern(null, "srcvecs"), Symbol.intern(null, "parent-node"), Symbol.intern(null, "k"), Symbol.intern(null, "op") }) })), RT.keyword(null, "line"), Integer.valueOf(49), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/materialize_impl.cljc" });
    const__114 = (Var)RT.var("synchrony.operation.materialize-impl", "collect-seq-step");
    const__117 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { RT.vector(new Object[] { Symbol.intern(null, "a-get"), Symbol.intern(null, "a-box"), Symbol.intern(null, "a-subvec"), Symbol.intern(null, "srcvecs"), Symbol.intern(null, "nodes"), Symbol.intern(null, "i"), Symbol.intern(null, "op") }) })), RT.keyword(null, "line"), Integer.valueOf(91), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/materialize_impl.cljc" });
    const__120 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "a-get"), Symbol.intern(null, "a-box"), Symbol.intern(null, "a-subvec"), Symbol.intern(null, "srcvecs"), Symbol.intern(null, "node"), Symbol.intern(null, "diff")) })), RT.keyword(null, "line"), Integer.valueOf(129), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/materialize_impl.cljc" });
    const__123 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { RT.vector(new Object[] { Symbol.intern(null, "a-get"), Symbol.intern(null, "a-box"), Symbol.intern(null, "a-subvec"), Symbol.intern(null, "srcvecs"), Symbol.intern(null, "nodes"), Symbol.intern(null, "i"), Symbol.intern(null, "ops") }) })), RT.keyword(null, "line"), Integer.valueOf(134), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/materialize_impl.cljc" });
    const__124 = (Var)RT.var("synchrony.operation.materialize-impl", "edit-map");
    const__126 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(139), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/materialize_impl.cljc" });
    const__127 = (Var)RT.var("synchrony.operation.materialize-impl", "edit-vec");
    const__129 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(139), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/materialize_impl.cljc" });
    const__130 = (Var)RT.var("synchrony.operation.materialize-impl", "edit-new");
    const__133 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { RT.vector(new Object[] { Symbol.intern(null, "editor"), Symbol.intern(null, "key"), Symbol.intern(null, "make-subeditor"), Symbol.intern(null, "a-get"), Symbol.intern(null, "a-count"), Symbol.intern(null, "srcvecs"), Symbol.intern(null, "sources"), Symbol.intern(null, "node"), Symbol.intern(null, "retain-op") }) })), RT.keyword(null, "line"), Integer.valueOf(142), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/materialize_impl.cljc" });
    const__134 = (Var)RT.var("synchrony.operation.materialize-impl", "edit-map-entry");
    const__137 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { RT.vector(new Object[] { Symbol.intern(null, "a-get"), Symbol.intern(null, "a-count"), Symbol.intern(null, "srcvecs"), Symbol.intern(null, "sources"), Symbol.intern(null, "node"), Symbol.intern(null, "k"), Symbol.intern(null, "editor"), Symbol.intern(null, "op") }) })), RT.keyword(null, "line"), Integer.valueOf(156), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/materialize_impl.cljc" });
    const__138 = (Var)RT.var("synchrony.operation.materialize-impl", "edit-vec-step");
    const__141 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { RT.vector(new Object[] { Symbol.intern(null, "a-get"), Symbol.intern(null, "a-count"), Symbol.intern(null, "srcvecs"), Symbol.intern(null, "sources"), Symbol.intern(null, "nodes"), Symbol.intern(null, "i"), Symbol.intern(null, "editor"), Symbol.intern(null, "op") }) })), RT.keyword(null, "line"), Integer.valueOf(232), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/materialize_impl.cljc" });
    const__144 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { RT.vector(new Object[] { Symbol.intern(null, "a-get"), Symbol.intern(null, "a-count"), Symbol.intern(null, "srcvecs"), Symbol.intern(null, "sources"), Symbol.intern(null, "node"), Symbol.intern(null, "editor"), Symbol.intern(null, "diff") }) })), RT.keyword(null, "line"), Integer.valueOf(297), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/materialize_impl.cljc" });
    const__147 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { RT.vector(new Object[] { Symbol.intern(null, "a-get"), Symbol.intern(null, "a-count"), Symbol.intern(null, "srcvecs"), Symbol.intern(null, "sources"), Symbol.intern(null, "nodes"), Symbol.intern(null, "i"), Symbol.intern(null, "editor"), Symbol.intern(null, "ops") }) })), RT.keyword(null, "line"), Integer.valueOf(303), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/materialize_impl.cljc" });
    const__148 = (Var)RT.var("synchrony.operation.materialize-impl", "materialize");
    const__151 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { RT.vector(new Object[] { Symbol.intern(null, "root-editor"), Symbol.intern(null, "a-get"), Symbol.intern(null, "a-box"), Symbol.intern(null, "a-subvec"), Symbol.intern(null, "a-count"), Symbol.intern(null, "tree"), Symbol.intern(null, "delta") }) })), RT.keyword(null, "line"), Integer.valueOf(310), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/materialize_impl.cljc" });
    const__152 = (Var)RT.var("synchrony.operation.materialize-impl", "vec-editor");
    const__155 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "item")) })), RT.keyword(null, "line"), Integer.valueOf(347), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/materialize_impl.cljc" });
    const__156 = (Var)RT.var("synchrony.operation.materialize-impl", "map-editor");
    const__159 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "item")) })), RT.keyword(null, "line"), Integer.valueOf(361), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/materialize_impl.cljc" });
    const__160 = (Var)RT.var("synchrony.operation.materialize-impl", "abstract-sequence-editor");
    const__163 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { RT.vector(new Object[] { Symbol.intern(null, "subeditor"), Symbol.intern(null, "subvec-retain"), Symbol.intern(null, "subvec-delete"), Symbol.intern(null, "box-replace"), Symbol.intern(null, "box-new"), Symbol.intern(null, "adapt-new"), Symbol.intern(null, "finalize") }) })), RT.keyword(null, "line"), Integer.valueOf(405), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/materialize_impl.cljc" });
    const__164 = (Var)RT.var("synchrony.operation.materialize-impl", "abstract-map-editor");
    const__167 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "subeditor"), Symbol.intern(null, "finalize")) })), RT.keyword(null, "line"), Integer.valueOf(435), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/materialize_impl.cljc" });
    const__168 = (Var)RT.var("synchrony.operation.materialize-impl", "finalize-map");
    const__171 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "item"), Symbol.intern(null, "entries"), Symbol.intern(null, "dissocs")) })), RT.keyword(null, "line"), Integer.valueOf(440), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/materialize_impl.cljc" });
  }
  
  static  {
    __init0();
    __init1();
    Compiler.pushNSandLoader(RT.classForName("synchrony.operation.materialize_impl__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
