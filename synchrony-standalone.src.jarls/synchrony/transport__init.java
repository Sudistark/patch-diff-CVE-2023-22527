package synchrony;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IPersistentMap;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.Numbers;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class transport__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__11;
  
  public static final Var const__12;
  
  public static final AFn const__15;
  
  public static final Var const__16;
  
  public static final AFn const__19;
  
  public static final Var const__23;
  
  public static final AFn const__25;
  
  public static final Object const__26;
  
  public static final Var const__27;
  
  public static final AFn const__29;
  
  public static final Object const__30;
  
  public static final Var const__31;
  
  public static final AFn const__33;
  
  public static final Var const__34;
  
  public static final AFn const__36;
  
  public static final Var const__38;
  
  public static final AFn const__40;
  
  public static final Object const__41;
  
  public static final Var const__42;
  
  public static final AFn const__44;
  
  public static final Keyword const__45;
  
  public static final AFn const__48;
  
  public static final Keyword const__49;
  
  public static final Var const__52;
  
  public static final Keyword const__55;
  
  public static final Var const__57;
  
  public static final AFn const__59;
  
  public static final AFn const__60;
  
  public static final Keyword const__61;
  
  public static final Var const__62;
  
  public static final Keyword const__63;
  
  public static final Object const__64;
  
  public static final Keyword const__65;
  
  public static final Object const__66;
  
  public static final Var const__67;
  
  public static final AFn const__69;
  
  public static final Var const__70;
  
  public static final Var const__71;
  
  public static final Keyword const__72;
  
  public static final Keyword const__73;
  
  public static final AFn const__76;
  
  public static final Var const__77;
  
  public static final AFn const__79;
  
  public static final Var const__85;
  
  public static final AFn const__87;
  
  public static final Var const__91;
  
  public static final AFn const__93;
  
  public static final AFn const__95;
  
  public static final Var const__96;
  
  public static final AFn const__99;
  
  public static final Var const__100;
  
  public static final AFn const__103;
  
  public static final Var const__104;
  
  public static final AFn const__107;
  
  public static final Var const__108;
  
  public static final AFn const__111;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new transport.fn__40709());
    const__3.setMeta((IPersistentMap)const__11);
    const__3.bindRoot(new transport.stringify_wire_msg());
    const__12.setMeta((IPersistentMap)const__15);
    const__12.bindRoot(new transport.parse_wire_msg());
    const__16.setMeta((IPersistentMap)const__19);
    const__16





















      
      .bindRoot(Numbers.num(Numbers.multiply(10L, 1000L)));
    const__23.setMeta((IPersistentMap)const__25);
    const__23.bindRoot(const__26);
    const__27.setMeta((IPersistentMap)const__29);
    const__27.bindRoot(const__30);
    const__31.setMeta((IPersistentMap)const__33);
    const__31.bindRoot(null);
    const__34.setMeta((IPersistentMap)const__36);
    const__34













      
      .bindRoot(Numbers.num(Numbers.multiply(4L, 5000L)));
    const__38.setMeta((IPersistentMap)const__40);
    const__38.bindRoot(const__41);
    const__42.setMeta((IPersistentMap)const__44);
    const__42





      
      .bindRoot(RT.mapUniqueKeys(new Object[] { const__45, const__48, const__49, Numbers.add(Numbers.multiply(10L, 1000L), ((IFn)const__52.getRawRoot()).invoke(Numbers.num(Numbers.multiply(5L, 1000L)))), const__55, Numbers.num(Numbers.multiply(10L, 1000L)) }));
    const__57.setMeta((IPersistentMap)const__59);
    const__57.bindRoot(RT.mapUniqueKeys(new Object[] { const__45, const__60, const__61, const__62.getRawRoot(), const__63, const__64, const__65, const__66 }));
    const__67.setMeta((IPersistentMap)const__69);
    const__67








      
      .bindRoot(((IFn)const__70.getRawRoot()).invoke(const__71.getRawRoot(), const__57.getRawRoot(), const__76));
    const__77.setMeta((IPersistentMap)const__79);
    const__77



      
      .bindRoot(((IFn)const__70.getRawRoot()).invoke(const__71.getRawRoot(), const__57.getRawRoot(), 
          
          RT.mapUniqueKeys(new Object[] { const__45, RT.mapUniqueKeys(new Object[] { const__72, Numbers.num(Numbers.multiply(1024L, 1024L)), const__73, Numbers.num(Numbers.multiply(Numbers.multiply(1024L, 1024L), 1024L)) }) })));
    const__85.setMeta((IPersistentMap)const__87);
    const__85.bindRoot(((IFn)const__70.getRawRoot()).invoke(const__71.getRawRoot(), const__42.getRawRoot(), 
          
          RT.mapUniqueKeys(new Object[] { const__45, RT.mapUniqueKeys(new Object[] { const__72, Numbers.num(Numbers.multiply(1024L, 1024L)), const__73, Numbers.num(Numbers.multiply(1024L, 5000L)) }) })));
    const__91.setMeta((IPersistentMap)const__93);
    const__91.bindRoot(((IFn)const__70.getRawRoot()).invoke(const__71.getRawRoot(), const__42.getRawRoot(), const__95));
    const__96.setMeta((IPersistentMap)const__99);
    const__96.bindRoot(new transport.sync_msg_in_xform());
    const__100.setMeta((IPersistentMap)const__103);
    const__100.bindRoot(new transport.sync_msg_out_xform());
    const__104.setMeta((IPersistentMap)const__107);
    const__104.bindRoot(new transport.make_haywire_connection());
    const__108.setMeta((IPersistentMap)const__111);
    const__108.bindRoot(new transport.aleph_cluster_accept());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "synchrony.transport");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("synchrony.transport", "stringify-wire-msg");
    const__11 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "msg")) })), RT.keyword(null, "line"), Integer.valueOf(14), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/transport.cljc" });
    const__12 = (Var)RT.var("synchrony.transport", "parse-wire-msg");
    const__15 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "msg")) })), RT.keyword(null, "line"), Integer.valueOf(19), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/transport.cljc" });
    const__16 = (Var)RT.var("synchrony.transport", "request-timeout-ms");
    const__19 = (AFn)RT.map(new Object[] { RT.keyword(null, "const"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(24), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/transport.cljc" });
    const__23 = (Var)RT.var("synchrony.transport", "max-message-size");
    const__25 = (AFn)RT.map(new Object[] { RT.keyword(null, "const"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(31), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/transport.cljc" });
    const__26 = Long.valueOf(5000L);
    const__27 = (Var)RT.var("synchrony.transport", "default-win-immediate-send-factor");
    const__29 = (AFn)RT.map(new Object[] { RT.keyword(null, "const"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(37), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/transport.cljc" });
    const__30 = Double.valueOf(0.6D);
    const__31 = (Var)RT.var("synchrony.transport", "default-win-send-timeout-ms");
    const__33 = (AFn)RT.map(new Object[] { RT.keyword(null, "const"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(38), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/transport.cljc" });
    const__34 = (Var)RT.var("synchrony.transport", "sockjs-server-buf-size");
    const__36 = (AFn)RT.map(new Object[] { RT.keyword(null, "const"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(39), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/transport.cljc" });
    const__38 = (Var)RT.var("synchrony.transport", "sockjs-server-buf-cnt");
    const__40 = (AFn)RT.map(new Object[] { RT.keyword(null, "const"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(40), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/transport.cljc" });
    const__41 = Long.valueOf(256L);
    const__42 = (Var)RT.var("synchrony.transport", "default-haywire-opts");
    const__44 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(42), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/transport.cljc" });
    const__45 = (Keyword)RT.keyword(null, "win-opts");
    const__48 = (AFn)RT.map(new Object[] { RT.keyword(null, "send-timeout-ms"), null, RT.keyword(null, "immediate-send-factor"), Double.valueOf(0.6D) });
    const__49 = (Keyword)RT.keyword(null, "ping-timeout-ms");
    const__52 = (Var)RT.var("clojure.core", "rand-int");
    const__55 = (Keyword)RT.keyword(null, "pong-timeout-ms");
    const__57 = (Var)RT.var("synchrony.transport", "default-multi-opts");
    const__59 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(48), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/transport.cljc" });
    const__60 = (AFn)RT.map(new Object[] { RT.keyword(null, "immediate-send-factor"), Double.valueOf(0.6D), RT.keyword(null, "send-timeout-ms"), null });
    const__61 = (Keyword)RT.keyword(null, "random");
    const__62 = (Var)RT.var("ginga.random", "id");
    const__63 = (Keyword)RT.keyword(null, "max-in-connections");
    const__64 = Long.valueOf(10000L);
    const__65 = (Keyword)RT.keyword(null, "max-out-connections");
    const__66 = Long.valueOf(10000L);
    const__67 = (Var)RT.var("synchrony.transport", "sockjs-server-multi-opts");
    const__69 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(55), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/transport.cljc" });
    const__70 = (Var)RT.var("clojure.core", "merge-with");
    const__71 = (Var)RT.var("clojure.core", "merge");
    const__72 = (Keyword)RT.keyword(null, "buf-cnt");
    const__73 = (Keyword)RT.keyword(null, "buf-size");
    const__76 = (AFn)RT.map(new Object[] { RT.keyword(null, "win-opts"), RT.map(new Object[] { RT.keyword(null, "buf-cnt"), Long.valueOf(256L), RT.keyword(null, "buf-size"), Long.valueOf(20000L) }) });
    const__77 = (Var)RT.var("synchrony.transport", "client-multi-opts");
    const__79 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(60), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/transport.cljc" });
    const__85 = (Var)RT.var("synchrony.transport", "client-haywire-opts");
    const__87 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(65), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/transport.cljc" });
    const__91 = (Var)RT.var("synchrony.transport", "server-haywire-opts");
    const__93 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(70), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/transport.cljc" });
    const__95 = (AFn)RT.map(new Object[] { RT.keyword(null, "win-opts"), RT.map(new Object[] { RT.keyword(null, "buf-size"), Long.valueOf(20000L), RT.keyword(null, "buf-cnt"), Long.valueOf(256L) }) });
    const__96 = (Var)RT.var("synchrony.transport", "sync-msg-in-xform");
    const__99 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(76), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/transport.cljc" });
  }
  
  public static void __init1() {
    const__100 = (Var)RT.var("synchrony.transport", "sync-msg-out-xform");
    const__103 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(81), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/transport.cljc" });
    const__104 = (Var)RT.var("synchrony.transport", "make-haywire-connection");
    const__107 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "haywire-opts")) })), RT.keyword(null, "line"), Integer.valueOf(86), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/transport.cljc" });
    const__108 = (Var)RT.var("synchrony.transport", "aleph-cluster-accept");
    const__111 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(115), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/transport.cljc" });
  }
  
  static  {
    __init0();
    __init1();
    Compiler.pushNSandLoader(RT.classForName("synchrony.transport__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
