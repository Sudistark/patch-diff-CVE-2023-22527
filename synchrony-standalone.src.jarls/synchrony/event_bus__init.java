package synchrony;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.Keyword;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;

public class event_bus__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__11;
  
  public static final Var const__12;
  
  public static final AFn const__15;
  
  public static final Var const__16;
  
  public static final AFn const__18;
  
  public static final Keyword const__19;
  
  public static final Var const__20;
  
  public static final Keyword const__21;
  
  public static final Object const__22;
  
  public static final Var const__23;
  
  public static final AFn const__25;
  
  public static final Var const__26;
  
  public static final Object const__27;
  
  public static final Var const__28;
  
  public static final AFn const__31;
  
  public static final Var const__32;
  
  public static final AFn const__35;
  
  public static final Var const__36;
  
  public static final AFn const__38;
  
  public static final Var const__39;
  
  public static final AFn const__42;
  
  public static final Var const__43;
  
  public static final AFn const__46;
  
  public static final Var const__47;
  
  public static final Var const__48;
  
  public static final Keyword const__49;
  
  public static final Var const__50;
  
  public static final Var const__51;
  
  public static final Var const__52;
  
  public static final AFn const__55;
  
  public static final Var const__56;
  
  public static final AFn const__59;
  
  public static final Var const__60;
  
  public static final AFn const__63;
  
  public static final Var const__64;
  
  public static final AFn const__67;
  
  public static final Var const__68;
  
  public static final AFn const__71;
  
  public static final Var const__72;
  
  public static final AFn const__75;
  
  public static final Var const__76;
  
  public static final AFn const__79;
  
  public static void load() { // Byte code:
    //   0: getstatic synchrony/event_bus__init.const__0 : Lclojure/lang/Var;
    //   3: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   6: checkcast clojure/lang/IFn
    //   9: getstatic synchrony/event_bus__init.const__1 : Lclojure/lang/AFn;
    //   12: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   17: new synchrony/event_bus$loading__6721__auto____40728
    //   20: dup
    //   21: invokespecial <init> : ()V
    //   24: checkcast clojure/lang/IFn
    //   27: invokeinterface invoke : ()Ljava/lang/Object;
    //   32: getstatic synchrony/event_bus__init.const__1 : Lclojure/lang/AFn;
    //   35: checkcast clojure/lang/Symbol
    //   38: getstatic synchrony/event_bus__init.const__2 : Lclojure/lang/AFn;
    //   41: invokevirtual equals : (Ljava/lang/Object;)Z
    //   44: ifeq -> 52
    //   47: aconst_null
    //   48: goto -> 67
    //   51: athrow
    //   52: new synchrony/event_bus$fn__54223
    //   55: dup
    //   56: invokespecial <init> : ()V
    //   59: checkcast java/util/concurrent/Callable
    //   62: invokestatic runInTransaction : (Ljava/util/concurrent/Callable;)Ljava/lang/Object;
    //   65: pop
    //   66: aconst_null
    //   67: getstatic synchrony/event_bus__init.const__3 : Lclojure/lang/Var;
    //   70: dup
    //   71: getstatic synchrony/event_bus__init.const__11 : Lclojure/lang/AFn;
    //   74: checkcast clojure/lang/IPersistentMap
    //   77: invokevirtual setMeta : (Lclojure/lang/IPersistentMap;)V
    //   80: dup
    //   81: new synchrony/event_bus$stream_from_opts
    //   84: dup
    //   85: invokespecial <init> : ()V
    //   88: invokevirtual bindRoot : (Ljava/lang/Object;)V
    //   91: getstatic synchrony/event_bus__init.const__12 : Lclojure/lang/Var;
    //   94: dup
    //   95: getstatic synchrony/event_bus__init.const__15 : Lclojure/lang/AFn;
    //   98: checkcast clojure/lang/IPersistentMap
    //   101: invokevirtual setMeta : (Lclojure/lang/IPersistentMap;)V
    //   104: dup
    //   105: new synchrony/event_bus$wrap_stream
    //   108: dup
    //   109: invokespecial <init> : ()V
    //   112: invokevirtual bindRoot : (Ljava/lang/Object;)V
    //   115: getstatic synchrony/event_bus__init.const__16 : Lclojure/lang/Var;
    //   118: dup
    //   119: getstatic synchrony/event_bus__init.const__18 : Lclojure/lang/AFn;
    //   122: checkcast clojure/lang/IPersistentMap
    //   125: invokevirtual setMeta : (Lclojure/lang/IPersistentMap;)V
    //   128: dup
    //   129: iconst_4
    //   130: anewarray java/lang/Object
    //   133: dup
    //   134: iconst_0
    //   135: getstatic synchrony/event_bus__init.const__19 : Lclojure/lang/Keyword;
    //   138: aastore
    //   139: dup
    //   140: iconst_1
    //   141: getstatic synchrony/event_bus__init.const__20 : Lclojure/lang/Var;
    //   144: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   147: checkcast clojure/lang/IFn
    //   150: new synchrony/event_bus$fn__54230
    //   153: dup
    //   154: invokespecial <init> : ()V
    //   157: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   162: aastore
    //   163: dup
    //   164: iconst_2
    //   165: getstatic synchrony/event_bus__init.const__21 : Lclojure/lang/Keyword;
    //   168: aastore
    //   169: dup
    //   170: iconst_3
    //   171: getstatic synchrony/event_bus__init.const__22 : Ljava/lang/Object;
    //   174: aastore
    //   175: invokestatic mapUniqueKeys : ([Ljava/lang/Object;)Lclojure/lang/IPersistentMap;
    //   178: invokevirtual bindRoot : (Ljava/lang/Object;)V
    //   181: getstatic synchrony/event_bus__init.const__23 : Lclojure/lang/Var;
    //   184: dup
    //   185: getstatic synchrony/event_bus__init.const__25 : Lclojure/lang/AFn;
    //   188: checkcast clojure/lang/IPersistentMap
    //   191: invokevirtual setMeta : (Lclojure/lang/IPersistentMap;)V
    //   194: dup
    //   195: iconst_4
    //   196: anewarray java/lang/Object
    //   199: dup
    //   200: iconst_0
    //   201: getstatic synchrony/event_bus__init.const__19 : Lclojure/lang/Keyword;
    //   204: aastore
    //   205: dup
    //   206: iconst_1
    //   207: getstatic synchrony/event_bus__init.const__20 : Lclojure/lang/Var;
    //   210: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   213: checkcast clojure/lang/IFn
    //   216: getstatic synchrony/event_bus__init.const__26 : Lclojure/lang/Var;
    //   219: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   222: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   227: aastore
    //   228: dup
    //   229: iconst_2
    //   230: getstatic synchrony/event_bus__init.const__21 : Lclojure/lang/Keyword;
    //   233: aastore
    //   234: dup
    //   235: iconst_3
    //   236: getstatic synchrony/event_bus__init.const__27 : Ljava/lang/Object;
    //   239: aastore
    //   240: invokestatic mapUniqueKeys : ([Ljava/lang/Object;)Lclojure/lang/IPersistentMap;
    //   243: invokevirtual bindRoot : (Ljava/lang/Object;)V
    //   246: getstatic synchrony/event_bus__init.const__28 : Lclojure/lang/Var;
    //   249: dup
    //   250: getstatic synchrony/event_bus__init.const__31 : Lclojure/lang/AFn;
    //   253: checkcast clojure/lang/IPersistentMap
    //   256: invokevirtual setMeta : (Lclojure/lang/IPersistentMap;)V
    //   259: dup
    //   260: new synchrony/event_bus$wrap_cluster_protocol
    //   263: dup
    //   264: invokespecial <init> : ()V
    //   267: invokevirtual bindRoot : (Ljava/lang/Object;)V
    //   270: getstatic synchrony/event_bus__init.const__32 : Lclojure/lang/Var;
    //   273: dup
    //   274: getstatic synchrony/event_bus__init.const__35 : Lclojure/lang/AFn;
    //   277: checkcast clojure/lang/IPersistentMap
    //   280: invokevirtual setMeta : (Lclojure/lang/IPersistentMap;)V
    //   283: dup
    //   284: new synchrony/event_bus$accept_cluster_connection
    //   287: dup
    //   288: invokespecial <init> : ()V
    //   291: invokevirtual bindRoot : (Ljava/lang/Object;)V
    //   294: getstatic synchrony/event_bus__init.const__36 : Lclojure/lang/Var;
    //   297: dup
    //   298: getstatic synchrony/event_bus__init.const__38 : Lclojure/lang/AFn;
    //   301: checkcast clojure/lang/IPersistentMap
    //   304: invokevirtual setMeta : (Lclojure/lang/IPersistentMap;)V
    //   307: dup
    //   308: ldc '/v1/cluster'
    //   310: invokevirtual bindRoot : (Ljava/lang/Object;)V
    //   313: getstatic synchrony/event_bus__init.const__39 : Lclojure/lang/Var;
    //   316: dup
    //   317: getstatic synchrony/event_bus__init.const__42 : Lclojure/lang/AFn;
    //   320: checkcast clojure/lang/IPersistentMap
    //   323: invokevirtual setMeta : (Lclojure/lang/IPersistentMap;)V
    //   326: dup
    //   327: new synchrony/event_bus$handle_websocket
    //   330: dup
    //   331: invokespecial <init> : ()V
    //   334: invokevirtual bindRoot : (Ljava/lang/Object;)V
    //   337: getstatic synchrony/event_bus__init.const__43 : Lclojure/lang/Var;
    //   340: dup
    //   341: getstatic synchrony/event_bus__init.const__46 : Lclojure/lang/AFn;
    //   344: checkcast clojure/lang/IPersistentMap
    //   347: invokevirtual setMeta : (Lclojure/lang/IPersistentMap;)V
    //   350: dup
    //   351: getstatic synchrony/event_bus__init.const__47 : Lclojure/lang/Var;
    //   354: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   357: checkcast clojure/lang/IFn
    //   360: getstatic synchrony/event_bus__init.const__48 : Lclojure/lang/Var;
    //   363: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   366: checkcast clojure/lang/IFn
    //   369: getstatic synchrony/event_bus__init.const__49 : Lclojure/lang/Keyword;
    //   372: getstatic synchrony/event_bus__init.const__50 : Lclojure/lang/Var;
    //   375: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   378: checkcast clojure/lang/IFn
    //   381: getstatic synchrony/event_bus__init.const__36 : Lclojure/lang/Var;
    //   384: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   387: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   392: dup
    //   393: ifnull -> 425
    //   396: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   399: if_acmpeq -> 426
    //   402: getstatic synchrony/event_bus__init.const__51 : Lclojure/lang/Var;
    //   405: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   408: checkcast clojure/lang/IFn
    //   411: getstatic synchrony/event_bus__init.const__36 : Lclojure/lang/Var;
    //   414: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   417: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   422: goto -> 432
    //   425: pop
    //   426: getstatic synchrony/event_bus__init.const__36 : Lclojure/lang/Var;
    //   429: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   432: new synchrony/event_bus$fn__54311
    //   435: dup
    //   436: invokespecial <init> : ()V
    //   439: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   444: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   449: invokevirtual bindRoot : (Ljava/lang/Object;)V
    //   452: getstatic synchrony/event_bus__init.const__52 : Lclojure/lang/Var;
    //   455: dup
    //   456: getstatic synchrony/event_bus__init.const__55 : Lclojure/lang/AFn;
    //   459: checkcast clojure/lang/IPersistentMap
    //   462: invokevirtual setMeta : (Lclojure/lang/IPersistentMap;)V
    //   465: dup
    //   466: new synchrony/event_bus$create_local_connection
    //   469: dup
    //   470: invokespecial <init> : ()V
    //   473: invokevirtual bindRoot : (Ljava/lang/Object;)V
    //   476: getstatic synchrony/event_bus__init.const__56 : Lclojure/lang/Var;
    //   479: dup
    //   480: getstatic synchrony/event_bus__init.const__59 : Lclojure/lang/AFn;
    //   483: checkcast clojure/lang/IPersistentMap
    //   486: invokevirtual setMeta : (Lclojure/lang/IPersistentMap;)V
    //   489: dup
    //   490: new synchrony/event_bus$ws_url
    //   493: dup
    //   494: invokespecial <init> : ()V
    //   497: invokevirtual bindRoot : (Ljava/lang/Object;)V
    //   500: getstatic synchrony/event_bus__init.const__60 : Lclojure/lang/Var;
    //   503: dup
    //   504: getstatic synchrony/event_bus__init.const__63 : Lclojure/lang/AFn;
    //   507: checkcast clojure/lang/IPersistentMap
    //   510: invokevirtual setMeta : (Lclojure/lang/IPersistentMap;)V
    //   513: dup
    //   514: new synchrony/event_bus$wrap_packetize
    //   517: dup
    //   518: invokespecial <init> : ()V
    //   521: invokevirtual bindRoot : (Ljava/lang/Object;)V
    //   524: getstatic synchrony/event_bus__init.const__64 : Lclojure/lang/Var;
    //   527: dup
    //   528: getstatic synchrony/event_bus__init.const__67 : Lclojure/lang/AFn;
    //   531: checkcast clojure/lang/IPersistentMap
    //   534: invokevirtual setMeta : (Lclojure/lang/IPersistentMap;)V
    //   537: dup
    //   538: new synchrony/event_bus$create_remote_tcp_connection
    //   541: dup
    //   542: invokespecial <init> : ()V
    //   545: invokevirtual bindRoot : (Ljava/lang/Object;)V
    //   548: getstatic synchrony/event_bus__init.const__68 : Lclojure/lang/Var;
    //   551: dup
    //   552: getstatic synchrony/event_bus__init.const__71 : Lclojure/lang/AFn;
    //   555: checkcast clojure/lang/IPersistentMap
    //   558: invokevirtual setMeta : (Lclojure/lang/IPersistentMap;)V
    //   561: dup
    //   562: new synchrony/event_bus$create_remote_ws_connection
    //   565: dup
    //   566: invokespecial <init> : ()V
    //   569: invokevirtual bindRoot : (Ljava/lang/Object;)V
    //   572: getstatic synchrony/event_bus__init.const__72 : Lclojure/lang/Var;
    //   575: dup
    //   576: getstatic synchrony/event_bus__init.const__75 : Lclojure/lang/AFn;
    //   579: checkcast clojure/lang/IPersistentMap
    //   582: invokevirtual setMeta : (Lclojure/lang/IPersistentMap;)V
    //   585: dup
    //   586: new synchrony/event_bus$create_connection
    //   589: dup
    //   590: invokespecial <init> : ()V
    //   593: invokevirtual bindRoot : (Ljava/lang/Object;)V
    //   596: getstatic synchrony/event_bus__init.const__76 : Lclojure/lang/Var;
    //   599: dup
    //   600: getstatic synchrony/event_bus__init.const__79 : Lclojure/lang/AFn;
    //   603: checkcast clojure/lang/IPersistentMap
    //   606: invokevirtual setMeta : (Lclojure/lang/IPersistentMap;)V
    //   609: dup
    //   610: new synchrony/event_bus$topic_connection
    //   613: dup
    //   614: invokespecial <init> : ()V
    //   617: invokevirtual bindRoot : (Ljava/lang/Object;)V
    //   620: return
    // Line number table:
    //   Java source line number -> byte code offset
    //   #1	-> 6
    //   #1	-> 12
    //   #1	-> 24
    //   #1	-> 27
    //   #1	-> 32
    //   #1	-> 41
    //   #1	-> 62
    //   #35	-> 147
    //   #35	-> 157
    //   #39	-> 213
    //   #39	-> 222
    //   #76	-> 357
    //   #75	-> 366
    //   #75	-> 372
    //   #75	-> 378
    //   #75	-> 387
    //   #75	-> 408
    //   #75	-> 417
    //   #75	-> 439
    //   #76	-> 444 }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "synchrony.event-bus");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("synchrony.event-bus", "stream-from-opts");
    const__11 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "xf"), Symbol.intern(null, "buf")), RT.keyword(null, "or"), RT.map(new Object[] { Symbol.intern(null, "buf"), Long.valueOf(1L) }), RT.keyword(null, "as"), Symbol.intern(null, "stream-opts") })) })), RT.keyword(null, "line"), Integer.valueOf(21), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/event_bus.clj" });
    const__12 = (Var)RT.var("synchrony.event-bus", "wrap-stream");
    const__15 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s"), Symbol.intern(null, "sink-opts"), Symbol.intern(null, "source-opts")) })), RT.keyword(null, "line"), Integer.valueOf(28), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/event_bus.clj" });
    const__16 = (Var)RT.var("synchrony.event-bus", "cluster-sink-xf");
    const__18 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(35), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/event_bus.clj" });
    const__19 = (Keyword)RT.keyword(null, "xf");
    const__20 = (Var)RT.var("clojure.core", "map");
    const__21 = (Keyword)RT.keyword(null, "buf");
    const__22 = Long.valueOf(256L);
    const__23 = (Var)RT.var("synchrony.event-bus", "cluster-source-xf");
    const__25 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(39), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/event_bus.clj" });
    const__26 = (Var)RT.var("synchrony.serialize", "deserialize-with-defaults");
    const__27 = Long.valueOf(256L);
    const__28 = (Var)RT.var("synchrony.event-bus", "wrap-cluster-protocol");
    const__31 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })), RT.keyword(null, "line"), Integer.valueOf(42), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/event_bus.clj" });
    const__32 = (Var)RT.var("synchrony.event-bus", "accept-cluster-connection");
    const__35 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })), RT.keyword(null, "line"), Integer.valueOf(48), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/event_bus.clj" });
    const__36 = (Var)RT.var("synchrony.event-bus", "http-path");
    const__38 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(55), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/event_bus.clj" });
    const__39 = (Var)RT.var("synchrony.event-bus", "handle-websocket");
    const__42 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "request")) })), RT.keyword(null, "line"), Integer.valueOf(57), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/event_bus.clj" });
    const__43 = (Var)RT.var("synchrony.event-bus", "cluster-handler");
    const__46 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(72), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/event_bus.clj", RT.keyword(null, "doc"), "This is web socket cluster handler, which is used to handle inter cluster connections and is used in http_server\n  component" });
    const__47 = (Var)RT.var("tilt.utils", "wrap-async");
    const__48 = (Var)RT.var("compojure.core", "make-route");
    const__49 = (Keyword)RT.keyword(null, "get");
    const__50 = (Var)RT.var("clojure.core", "string?");
    const__51 = (Var)RT.var("clout.core", "route-compile");
    const__52 = (Var)RT.var("synchrony.event-bus", "create-local-connection");
    const__55 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(78), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/event_bus.clj" });
    const__56 = (Var)RT.var("synchrony.event-bus", "ws-url");
    const__59 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "host"), Symbol.intern(null, "port"), Symbol.intern(null, "context-path")) })), RT.keyword(null, "line"), Integer.valueOf(84), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/event_bus.clj" });
    const__60 = (Var)RT.var("synchrony.event-bus", "wrap-packetize");
    const__63 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "spliced-s")) })), RT.keyword(null, "line"), Integer.valueOf(87), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/event_bus.clj" });
    const__64 = (Var)RT.var("synchrony.event-bus", "create-remote-tcp-connection");
    const__67 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "member")) })), RT.keyword(null, "line"), Integer.valueOf(90), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/event_bus.clj" });
    const__68 = (Var)RT.var("synchrony.event-bus", "create-remote-ws-connection");
    const__71 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "member")) })), RT.keyword(null, "line"), Integer.valueOf(98), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/event_bus.clj" });
    const__72 = (Var)RT.var("synchrony.event-bus", "create-connection");
    const__75 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "member")) })), RT.keyword(null, "line"), Integer.valueOf(110), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/event_bus.clj" });
    const__76 = (Var)RT.var("synchrony.event-bus", "topic-connection");
    const__79 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "topic")) })), RT.keyword(null, "line"), Integer.valueOf(125), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/event_bus.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("synchrony.event_bus__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
