package synchrony.middleware;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentHashSet;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class json__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__11;
  
  public static final Var const__12;
  
  public static final AFn const__14;
  
  public static final AFn const__20;
  
  public static final Var const__21;
  
  public static final AFn const__23;
  
  public static final AFn const__26;
  
  public static final Var const__27;
  
  public static final AFn const__29;
  
  public static final AFn const__30;
  
  public static final Var const__31;
  
  public static final AFn const__35;
  
  public static final Var const__36;
  
  public static final AFn const__39;
  
  public static final Var const__40;
  
  public static final AFn const__43;
  
  public static final Var const__44;
  
  public static final AFn const__48;
  
  public static final Var const__49;
  
  public static final AFn const__52;
  
  public static void load() { LockingTransaction.runInTransaction((Callable)new json.fn__60370());
    const__3.setMeta((IPersistentMap)const__11);
    const__3.bindRoot(new json.charset_supported_QMARK_());
    const__12.setMeta((IPersistentMap)const__14);
    const__12.bindRoot(const__20);
    const__21.setMeta((IPersistentMap)const__23);
    const__21.bindRoot(const__26);
    const__27.setMeta((IPersistentMap)const__29);
    const__27.bindRoot(const__30);
    const__31.setMeta((IPersistentMap)const__35);
    const__31.bindRoot(new json.json_request_QMARK_());
    const__36.setMeta((IPersistentMap)const__39);
    const__36.bindRoot(new json.maybe_slurp());
    const__40.setMeta((IPersistentMap)const__43);
    const__40.bindRoot(new json.parse_json());
    const__44.setMeta((IPersistentMap)const__48);
    const__44.bindRoot(new json.wrap_json_body());
    const__49.setMeta((IPersistentMap)const__52);
    const__49.bindRoot(new json.wrap_json_response()); }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "synchrony.middleware.json");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("synchrony.middleware.json", "charset-supported?");
    const__11 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "encoding")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") }))) })), RT.keyword(null, "line"), Integer.valueOf(11), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/middleware/json.clj" });
    const__12 = (Var)RT.var("synchrony.middleware.json", "default-malformed-response");
    const__14 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(17), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/middleware/json.clj" });
    const__20 = (AFn)RT.map(new Object[] { RT.keyword(null, "status"), Long.valueOf(400L), RT.keyword(null, "headers"), RT.map(new Object[] { "content-type", "text/plain" }), RT.keyword(null, "body"), "Malformed json in request body." });
    const__21 = (Var)RT.var("synchrony.middleware.json", "default-unsupported-charset-response");
    const__23 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(22), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/middleware/json.clj" });
    const__26 = (AFn)RT.map(new Object[] { RT.keyword(null, "status"), Long.valueOf(415L), RT.keyword(null, "headers"), RT.map(new Object[] { "content-type", "text/plain" }), RT.keyword(null, "body"), "Unsupported charset." });
    const__27 = (Var)RT.var("synchrony.middleware.json", "default-charsets");
    const__29 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(27), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/middleware/json.clj" });
    const__30 = (AFn)PersistentHashSet.create(new Object[] { "utf8", "utf-8" });
    const__31 = (Var)RT.var("synchrony.middleware.json", "json-request?");
    const__35 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "request")) })), RT.keyword(null, "line"), Integer.valueOf(30), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/middleware/json.clj" });
    const__36 = (Var)RT.var("synchrony.middleware.json", "maybe-slurp");
    const__39 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "data"), Symbol.intern(null, "charset")) })), RT.keyword(null, "line"), Integer.valueOf(34), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/middleware/json.clj" });
    const__40 = (Var)RT.var("synchrony.middleware.json", "parse-json");
    const__43 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "data"), Symbol.intern(null, "keywords?"), Symbol.intern(null, "charset")) })), RT.keyword(null, "line"), Integer.valueOf(42), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/middleware/json.clj" });
    const__44 = (Var)RT.var("synchrony.middleware.json", "wrap-json-body");
    const__48 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "handler"), Symbol.intern(null, "&"), Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "keywords?"), Symbol.intern(null, "charsets"), Symbol.intern(null, "malformed-response"), Symbol.intern(null, "unsupported-charset-response")), RT.keyword(null, "or"), RT.map(new Object[] { Symbol.intern(null, "malformed-response"), Symbol.intern(null, "default-malformed-response"), Symbol.intern(null, "unsupported-charset-response"), Symbol.intern(null, "default-unsupported-charset-response"), Symbol.intern(null, "charsets"), Symbol.intern(null, "default-charsets") }) }))) })), RT.keyword(null, "doc"), "Like ring.middleware.json/wrap-json-body but supports async handlers.", RT.keyword(null, "line"), Integer.valueOf(49), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/middleware/json.clj" });
    const__49 = (Var)RT.var("synchrony.middleware.json", "wrap-json-response");
    const__52 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "handler")) })), RT.keyword(null, "doc"), "Like ring.middleware.json/wrap-json-response but supports async handlers.", RT.keyword(null, "line"), Integer.valueOf(76), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/middleware/json.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("synchrony.middleware.json__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
