package synchrony.middleware;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class session__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__12;
  
  public static void load() { LockingTransaction.runInTransaction((Callable)new session.fn__60280());
    const__3.setMeta((IPersistentMap)const__12);
    const__3.bindRoot(new session.wrap_session()); }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "synchrony.middleware.session");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("synchrony.middleware.session", "wrap-session");
    const__12 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "handler")) })), RT.keyword(null, "doc"), "Reads in the current HTTP session map, and adds it to the :session key on\n  the request. If a :session key is added to the response by the handler, the\n  session is updated with the new value. If the value is nil, the session is\n  deleted.\n\n  Accepts the following options:\n\n  :store        - An implementation of the SessionStore protocol in the\n                  ring.middleware.session.store namespace. This determines how\n                  the session is stored. Defaults to in-memory storage using\n                  ring.middleware.session.store/memory-store.\n\n  :root         - The root path of the session. Any path above this will not be\n                  able to see this session. Equivalent to setting the cookie's\n                  path attribute. Defaults to \"/\".\n\n  :cookie-name  - The name of the cookie that holds the session key. Defaults to\n                  \"ring-session\"\n\n  :cookie-attrs - A map of attributes to associate with the session cookie.\n                  Defaults to {:http-only true}.", RT.keyword(null, "line"), Integer.valueOf(7), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/middleware/session.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("synchrony.middleware.session__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
