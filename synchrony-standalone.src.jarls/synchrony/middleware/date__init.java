package synchrony.middleware;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.Locale;
import java.util.concurrent.Callable;

public class date__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__9;
  
  public static final Var const__10;
  
  public static final Var const__11;
  
  public static final Var const__12;
  
  public static final Var const__13;
  
  public static final Var const__14;
  
  public static final AFn const__18;
  
  public static final Var const__19;
  
  public static final AFn const__22;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new date.fn__59748());
    const__3.setMeta((IPersistentMap)const__9);
    const__3









      
      .bindRoot(((IFn)const__10.getRawRoot()).invoke(((IFn)const__11.getRawRoot()).invoke(((IFn)const__12.getRawRoot()).invoke("EEE, dd MMM yyyy HH:mm:ss 'GMT'"), Locale.US), ((IFn)const__13.getRawRoot()).invoke("GMT")));
    const__14.setMeta((IPersistentMap)const__18);
    const__14.bindRoot(new date.format_http_time());
    const__19.setMeta((IPersistentMap)const__22);
    const__19.bindRoot(new date.wrap_date());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "synchrony.middleware.date");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("synchrony.middleware.date", "http-time-formatter");
    const__9 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(10), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/middleware/date.clj" });
    const__10 = (Var)RT.var("clj-time.format", "with-zone");
    const__11 = (Var)RT.var("clj-time.format", "with-locale");
    const__12 = (Var)RT.var("clj-time.format", "formatter");
    const__13 = (Var)RT.var("clj-time.core", "time-zone-for-id");
    const__14 = (Var)RT.var("synchrony.middleware.date", "format-http-time");
    const__18 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "datetime")) })), RT.keyword(null, "line"), Integer.valueOf(14), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/middleware/date.clj" });
    const__19 = (Var)RT.var("synchrony.middleware.date", "wrap-date");
    const__22 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f")) })), RT.keyword(null, "line"), Integer.valueOf(17), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/middleware/date.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("synchrony.middleware.date__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
