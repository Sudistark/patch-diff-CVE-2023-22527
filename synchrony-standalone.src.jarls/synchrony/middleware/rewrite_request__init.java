package synchrony.middleware;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentHashSet;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class rewrite_request__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__9;
  
  public static final AFn const__12;
  
  public static final Var const__13;
  
  public static final AFn const__15;
  
  public static final AFn const__16;
  
  public static final Var const__17;
  
  public static final AFn const__19;
  
  public static final AFn const__25;
  
  public static final Var const__26;
  
  public static final AFn const__30;
  
  public static final Var const__31;
  
  public static final AFn const__34;
  
  public static final Var const__35;
  
  public static final AFn const__38;
  
  public static final Var const__39;
  
  public static final AFn const__42;
  
  public static void load() { LockingTransaction.runInTransaction((Callable)new rewrite_request.fn__60589());
    const__3.setMeta((IPersistentMap)const__9);
    const__3.bindRoot(const__12);
    const__13.setMeta((IPersistentMap)const__15);
    const__13.bindRoot(const__16);
    const__17.setMeta((IPersistentMap)const__19);
    const__17.bindRoot(const__25);
    const__26.setMeta((IPersistentMap)const__30);
    const__26.bindRoot(new rewrite_request.rewrite_request_param_QMARK_());
    const__31.setMeta((IPersistentMap)const__34);
    const__31.bindRoot(new rewrite_request.wrap_alter_content_type());
    const__35.setMeta((IPersistentMap)const__38);
    const__35.bindRoot(new rewrite_request.wrap_alter_request());
    const__39.setMeta((IPersistentMap)const__42);
    const__39.bindRoot(new rewrite_request.wrap_rewrite_request()); }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "synchrony.middleware.rewrite-request");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("synchrony.middleware.rewrite-request", "default-allowed-methods");
    const__9 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(5), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/middleware/rewrite_request.clj" });
    const__12 = (AFn)PersistentHashSet.create(new Object[] { RT.keyword(null, "get"), RT.keyword(null, "put") });
    const__13 = (Var)RT.var("synchrony.middleware.rewrite-request", "default-allowed-headers");
    const__15 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(6), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/middleware/rewrite_request.clj" });
    const__16 = (AFn)PersistentHashSet.create(new Object[] { "content-type" });
    const__17 = (Var)RT.var("synchrony.middleware.rewrite-request", "default-unallowed-error");
    const__19 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(8), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/middleware/rewrite_request.clj" });
    const__25 = (AFn)RT.map(new Object[] { RT.keyword(null, "status"), Long.valueOf(400L), RT.keyword(null, "headers"), RT.map(new Object[] { "content-type", "text/plain" }), RT.keyword(null, "body"), "rewrite middleware doesn't allow the method or headers specified in the request body" });
    const__26 = (Var)RT.var("synchrony.middleware.rewrite-request", "rewrite-request-param?");
    const__30 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "request")) })), RT.keyword(null, "line"), Integer.valueOf(13), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/middleware/rewrite_request.clj" });
    const__31 = (Var)RT.var("synchrony.middleware.rewrite-request", "wrap-alter-content-type");
    const__34 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "handler"), Symbol.intern(null, "rewrite-request?")) })), RT.keyword(null, "line"), Integer.valueOf(16), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/middleware/rewrite_request.clj" });
    const__35 = (Var)RT.var("synchrony.middleware.rewrite-request", "wrap-alter-request");
    const__38 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "handler"), RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "rewrite-request?"), Symbol.intern(null, "allowed-methods"), Symbol.intern(null, "allowed-headers"), Symbol.intern(null, "unallowed-error")), RT.keyword(null, "or"), RT.map(new Object[] { Symbol.intern(null, "rewrite-request?"), Symbol.intern(null, "rewrite-request-param?"), Symbol.intern(null, "allowed-methods"), Symbol.intern(null, "default-allowed-methods"), Symbol.intern(null, "allowed-headers"), Symbol.intern(null, "default-allowed-headers"), Symbol.intern(null, "unallowed-error"), Symbol.intern(null, "default-unallowed-error") }) })) })), RT.keyword(null, "line"), Integer.valueOf(25), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/middleware/rewrite_request.clj" });
    const__39 = (Var)RT.var("synchrony.middleware.rewrite-request", "wrap-rewrite-request");
    const__42 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "handler"), Symbol.intern(null, "&"), Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "wrap-body"), Symbol.intern(null, "rewrite-request?"), Symbol.intern(null, "allowed-methods"), Symbol.intern(null, "allowed-headers"), Symbol.intern(null, "unallowed-error")), RT.keyword(null, "or"), RT.map(new Object[] { Symbol.intern(null, "wrap-body"), Symbol.intern(null, "wrap-json-body"), Symbol.intern(null, "rewrite-request?"), Symbol.intern(null, "rewrite-request-param?"), Symbol.intern(null, "allowed-methods"), Symbol.intern(null, "default-allowed-methods"), Symbol.intern(null, "allowed-headers"), Symbol.intern(null, "default-allowed-headers"), Symbol.intern(null, "unallowed-error"), Symbol.intern(null, "default-unallowed-error") }), RT.keyword(null, "as"), Symbol.intern(null, "opts") }))) })), RT.keyword(null, "line"), Integer.valueOf(53), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/middleware/rewrite_request.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("synchrony.middleware.rewrite_request__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
