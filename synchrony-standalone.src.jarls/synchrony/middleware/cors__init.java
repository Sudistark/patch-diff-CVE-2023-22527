package synchrony.middleware;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class cors__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__9;
  
  public static final Var const__10;
  
  public static final Object const__11;
  
  public static final Var const__12;
  
  public static final AFn const__17;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new cors.fn__59253());
    const__3.setMeta((IPersistentMap)const__9);
    const__3





      
      .bindRoot(RT.mapUniqueKeys(new Object[] { "Access-Control-Allow-Origin", "*", "Access-Control-Allow-Headers", "content-type, accept, x-token, x-atlassian-mau-ignore", "Access-Control-Allow-Methods", "GET, PUT, POST, OPTIONS", "Access-Control-Max-Age", ((IFn)const__10.getRawRoot()).invoke(const__11) }));
    const__12.setMeta((IPersistentMap)const__17);
    const__12.bindRoot(new cors.wrap_all_cors());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "synchrony.middleware.cors");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("synchrony.middleware.cors", "cors-headers");
    const__9 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(4), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/middleware/cors.clj" });
    const__10 = (Var)RT.var("clojure.core", "str");
    const__11 = Long.valueOf(86400L);
    const__12 = (Var)RT.var("synchrony.middleware.cors", "wrap-all-cors");
    const__17 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "handler")) })), RT.keyword(null, "doc"), "Allow requests from all origins", RT.keyword(null, "line"), Integer.valueOf(10), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/middleware/cors.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("synchrony.middleware.cors__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
