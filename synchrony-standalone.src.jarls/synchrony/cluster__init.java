package synchrony;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IPersistentMap;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentHashSet;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class cluster__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__11;
  
  public static final Var const__12;
  
  public static final AFn const__15;
  
  public static final Var const__16;
  
  public static final AFn const__18;
  
  public static final Keyword const__19;
  
  public static final Var const__20;
  
  public static final Keyword const__21;
  
  public static final Keyword const__22;
  
  public static final Var const__23;
  
  public static final AFn const__26;
  
  public static final Var const__27;
  
  public static final AFn const__29;
  
  public static final Var const__30;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new cluster.fn__40867());
    const__3.setMeta((IPersistentMap)const__11);
    const__3.bindRoot(new cluster.transition());
    const__12.setMeta((IPersistentMap)const__15);
    const__12.bindRoot(new cluster.member());
    const__16.setMeta((IPersistentMap)const__18);
    const__16
      
      .bindRoot(((IFn)const__12.getRawRoot()).invoke(RT.mapUniqueKeys(new Object[] { const__19, ((IFn)const__20.getRawRoot()).invoke(), const__21, "localhost", const__22, Boolean.TRUE })));
    const__23.setMeta((IPersistentMap)const__26);
    const__23.bindRoot(new cluster.set_disj());
    const__27.setMeta((IPersistentMap)const__29);
    const__27







      
      .bindRoot(((IFn)const__30.getRawRoot()).invoke(new cluster.fn__40928(), new cluster.fn__40937(), PersistentHashSet.EMPTY));
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "synchrony.cluster");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("synchrony.cluster", "transition");
    const__11 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(), Tuple.create(Symbol.intern(null, "G__40869")) })), RT.keyword(null, "line"), Integer.valueOf(6), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/cluster.clj" });
    const__12 = (Var)RT.var("synchrony.cluster", "member");
    const__15 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(), Tuple.create(Symbol.intern(null, "G__40895")) })), RT.keyword(null, "line"), Integer.valueOf(7), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/cluster.clj" });
    const__16 = (Var)RT.var("synchrony.cluster", "local-member");
    const__18 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(9), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/cluster.clj" });
    const__19 = (Keyword)RT.keyword(null, "member-id");
    const__20 = (Var)RT.var("ginga.random", "id");
    const__21 = (Keyword)RT.keyword(null, "host");
    const__22 = (Keyword)RT.keyword(null, "local?");
    const__23 = (Var)RT.var("synchrony.cluster", "set-disj");
    const__26 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "set-a"), Symbol.intern(null, "set-b")) })), RT.keyword(null, "line"), Integer.valueOf(13), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/cluster.clj" });
    const__27 = (Var)RT.var("synchrony.cluster", "members-to-transitions-xf");
    const__29 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(17), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/cluster.clj" });
    const__30 = (Var)RT.var("ginga.core", "buffering-transducer");
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("synchrony.cluster__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
