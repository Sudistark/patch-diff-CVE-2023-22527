package synchrony;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class kv_store__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Object const__3;
  
  public static final Var const__4;
  
  public static final Var const__5;
  
  public static final Var const__6;
  
  public static final Keyword const__7;
  
  public static final Var const__8;
  
  public static final ISeq const__9;
  
  public static final Var const__10;
  
  public static final Var const__11;
  
  public static final AFn const__15;
  
  public static final Keyword const__16;
  
  public static final AFn const__17;
  
  public static final Keyword const__18;
  
  public static final Keyword const__19;
  
  public static final AFn const__24;
  
  public static final Keyword const__25;
  
  public static final Var const__26;
  
  public static final Var const__27;
  
  public static final Var const__28;
  
  public static final AFn const__29;
  
  public static final AFn const__30;
  
  public static final Keyword const__31;
  
  public static final AFn const__32;
  
  public static final AFn const__33;
  
  public static final AFn const__34;
  
  public static final AFn const__35;
  
  public static final AFn const__36;
  
  public static final AFn const__37;
  
  public static final Var const__38;
  
  public static final AFn const__39;
  
  public static final Var const__40;
  
  public static final AFn const__48;
  
  public static final Var const__49;
  
  public static final AFn const__52;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new kv_store.fn__25397());
    const__40.setMeta((IPersistentMap)const__48);
    const__40.bindRoot(new kv_store.duplicate_key_error());
    const__49.setMeta((IPersistentMap)const__52);
    const__49.bindRoot(new kv_store.create_in_memory_store());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "synchrony.kv-store");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = RT.classForName("synchrony.kv_store.Store");
    const__4 = (Var)RT.var("clojure.core", "alter-meta!");
    const__5 = (Var)RT.var("synchrony.kv-store", "Store");
    const__6 = (Var)RT.var("clojure.core", "assoc");
    const__7 = (Keyword)RT.keyword(null, "doc");
    const__8 = (Var)RT.var("clojure.core", "assert-same-protocol");
    const__9 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "put!")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Puts the given value into the store, associating it with the given key.\n\n  If there is already a value with the given key, a duplicate-key-error\n  is thrown.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store"), Symbol.intern(null, "k"), Symbol.intern(null, "v")) })) })), ((IObj)Symbol.intern(null, "get!")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Gets the value associated with the given key from the store, or nil\n  if there is no such value.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store"), Symbol.intern(null, "k")) })) })), ((IObj)Symbol.intern(null, "get-all!")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store")) })) })), ((IObj)Symbol.intern(null, "delete!")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Deletes the given key and its associated value from the store. ", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store"), Symbol.intern(null, "k")) })) })) }));
    const__10 = (Var)RT.var("clojure.core", "alter-var-root");
    const__11 = (Var)RT.var("clojure.core", "merge");
    const__15 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "synchrony.kv_store.Store"), RT.keyword(null, "on-interface"), RT.classForName("synchrony.kv_store.Store") });
    const__16 = (Keyword)RT.keyword(null, "sigs");
    const__17 = (AFn)RT.map(new Object[] { RT.keyword(null, "put!"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "put!")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Puts the given value into the store, associating it with the given key.\n\n  If there is already a value with the given key, a duplicate-key-error\n  is thrown.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store"), Symbol.intern(null, "k"), Symbol.intern(null, "v")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store"), Symbol.intern(null, "k"), Symbol.intern(null, "v")) })), RT.keyword(null, "doc"), "Puts the given value into the store, associating it with the given key.\n\n  If there is already a value with the given key, a duplicate-key-error\n  is thrown." }), RT.keyword(null, "get!"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "get!")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Gets the value associated with the given key from the store, or nil\n  if there is no such value.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store"), Symbol.intern(null, "k")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store"), Symbol.intern(null, "k")) })), RT.keyword(null, "doc"), "Gets the value associated with the given key from the store, or nil\n  if there is no such value." }), RT.keyword(null, "get-all!"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "get-all!")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store")) })), RT.keyword(null, "doc"), null }), RT.keyword(null, "delete!"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "delete!")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Deletes the given key and its associated value from the store. ", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store"), Symbol.intern(null, "k")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store"), Symbol.intern(null, "k")) })), RT.keyword(null, "doc"), "Deletes the given key and its associated value from the store. " }) });
    const__18 = (Keyword)RT.keyword(null, "var");
    const__19 = (Keyword)RT.keyword(null, "method-map");
    const__24 = (AFn)RT.map(new Object[] { RT.keyword(null, "get!"), RT.keyword(null, "get!"), RT.keyword(null, "get-all!"), RT.keyword(null, "get-all!"), RT.keyword(null, "delete!"), RT.keyword(null, "delete!"), RT.keyword(null, "put!"), RT.keyword(null, "put!") });
    const__25 = (Keyword)RT.keyword(null, "method-builders");
    const__26 = (Var)RT.var("clojure.core", "intern");
    const__27 = (Var)RT.var("clojure.core", "*ns*");
    const__28 = (Var)RT.var("clojure.core", "with-meta");
    const__29 = (AFn)((IObj)Symbol.intern(null, "get!")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Gets the value associated with the given key from the store, or nil\n  if there is no such value.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store"), Symbol.intern(null, "k")) })) }));
    const__30 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "get!")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Gets the value associated with the given key from the store, or nil\n  if there is no such value.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store"), Symbol.intern(null, "k")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store"), Symbol.intern(null, "k")) })), RT.keyword(null, "doc"), "Gets the value associated with the given key from the store, or nil\n  if there is no such value." });
    const__31 = (Keyword)RT.keyword(null, "protocol");
    const__32 = (AFn)((IObj)Symbol.intern(null, "delete!")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Deletes the given key and its associated value from the store. ", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store"), Symbol.intern(null, "k")) })) }));
    const__33 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "delete!")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Deletes the given key and its associated value from the store. ", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store"), Symbol.intern(null, "k")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store"), Symbol.intern(null, "k")) })), RT.keyword(null, "doc"), "Deletes the given key and its associated value from the store. " });
    const__34 = (AFn)((IObj)Symbol.intern(null, "get-all!")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store")) })) }));
    const__35 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "get-all!")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store")) })), RT.keyword(null, "doc"), null });
    const__36 = (AFn)((IObj)Symbol.intern(null, "put!")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Puts the given value into the store, associating it with the given key.\n\n  If there is already a value with the given key, a duplicate-key-error\n  is thrown.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store"), Symbol.intern(null, "k"), Symbol.intern(null, "v")) })) }));
    const__37 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "put!")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Puts the given value into the store, associating it with the given key.\n\n  If there is already a value with the given key, a duplicate-key-error\n  is thrown.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store"), Symbol.intern(null, "k"), Symbol.intern(null, "v")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store"), Symbol.intern(null, "k"), Symbol.intern(null, "v")) })), RT.keyword(null, "doc"), "Puts the given value into the store, associating it with the given key.\n\n  If there is already a value with the given key, a duplicate-key-error\n  is thrown." });
    const__38 = (Var)RT.var("clojure.core", "-reset-methods");
    const__39 = (AFn)Symbol.intern(null, "Store");
    const__40 = (Var)RT.var("synchrony.kv-store", "duplicate-key-error");
    const__48 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "key")), Tuple.create(Symbol.intern(null, "key"), Symbol.intern(null, "cause")) })), RT.keyword(null, "line"), Integer.valueOf(20), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/kv_store.clj" });
    const__49 = (Var)RT.var("synchrony.kv-store", "create-in-memory-store");
    const__52 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "serialize"), Symbol.intern(null, "deserialize"), Symbol.intern(null, "data")), RT.keyword(null, "or"), RT.map(new Object[] { Symbol.intern(null, "serialize"), Symbol.intern(null, "identity"), Symbol.intern(null, "deserialize"), Symbol.intern(null, "identity") }), RT.keyword(null, "as"), Symbol.intern(null, "opts") }))) })), RT.keyword(null, "line"), Integer.valueOf(39), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/kv_store.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("synchrony.kv_store__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
