package synchrony.server.cluster;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class topic_ring__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__9;
  
  public static final Object const__10;
  
  public static final Var const__11;
  
  public static final AFn const__15;
  
  public static final Var const__16;
  
  public static final AFn const__19;
  
  public static final Var const__20;
  
  public static final AFn const__23;
  
  public static final Var const__24;
  
  public static final AFn const__27;
  
  public static final Var const__28;
  
  public static final AFn const__31;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new topic_ring.fn__41063());
    const__3.setMeta((IPersistentMap)const__9);
    const__3.bindRoot(const__10);
    const__11.setMeta((IPersistentMap)const__15);
    const__11.bindRoot(new topic_ring.update_ring_from_member_transition());
    const__16.setMeta((IPersistentMap)const__19);
    const__16.bindRoot(new topic_ring.get_ring_atom());
    const__20.setMeta((IPersistentMap)const__23);
    const__20.bindRoot(new topic_ring.handle_transition());
    const__24.setMeta((IPersistentMap)const__27);
    const__24.bindRoot(new topic_ring.get_node());
    const__28.setMeta((IPersistentMap)const__31);
    const__28.bindRoot(new topic_ring.topic_node());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "synchrony.server.cluster.topic-ring");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("synchrony.server.cluster.topic-ring", "replica-ring-replication-factor");
    const__9 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(10), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/server/cluster/topic_ring.clj" });
    const__10 = Long.valueOf(256L);
    const__11 = (Var)RT.var("synchrony.server.cluster.topic-ring", "update-ring-from-member-transition");
    const__15 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ring"), Symbol.intern(null, "transition")) })), RT.keyword(null, "line"), Integer.valueOf(15), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/server/cluster/topic_ring.clj" });
    const__16 = (Var)RT.var("synchrony.server.cluster.topic-ring", "get-ring-atom");
    const__19 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(21), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/server/cluster/topic_ring.clj" });
    const__20 = (Var)RT.var("synchrony.server.cluster.topic-ring", "handle-transition");
    const__23 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "transition")) })), RT.keyword(null, "line"), Integer.valueOf(24), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/server/cluster/topic_ring.clj" });
    const__24 = (Var)RT.var("synchrony.server.cluster.topic-ring", "get-node");
    const__27 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "topic")) })), RT.keyword(null, "line"), Integer.valueOf(32), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/server/cluster/topic_ring.clj" });
    const__28 = (Var)RT.var("synchrony.server.cluster.topic-ring", "topic-node");
    const__31 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "topic")) })), RT.keyword(null, "line"), Integer.valueOf(35), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/server/cluster/topic_ring.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("synchrony.server.cluster.topic_ring__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
