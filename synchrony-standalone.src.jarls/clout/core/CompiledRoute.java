package clout.core;

import clojure.lang.AFn;
import clojure.lang.APersistentMap;
import clojure.lang.Associative;
import clojure.lang.Counted;
import clojure.lang.IFn;
import clojure.lang.IHashEq;
import clojure.lang.IKeywordLookup;
import clojure.lang.ILookup;
import clojure.lang.ILookupThunk;
import clojure.lang.IMapEntry;
import clojure.lang.IObj;
import clojure.lang.IPersistentCollection;
import clojure.lang.IPersistentMap;
import clojure.lang.IPersistentVector;
import clojure.lang.IRecord;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.MapEntry;
import clojure.lang.Numbers;
import clojure.lang.PersistentHashSet;
import clojure.lang.RT;
import clojure.lang.RecordIterator;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Util;
import clojure.lang.Var;
import java.io.Serializable;
import java.util.Collection;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

public final class CompiledRoute implements Route, IRecord, IHashEq, IObj, ILookup, IKeywordLookup, IPersistentMap, Map, Serializable {
  public final Object source;
  
  public final Object re;
  
  public final Object keys;
  
  public final Object absolute_QMARK_;
  
  public final Object __meta;
  
  public final Object __extmap;
  
  int __hash;
  
  int __hasheq;
  
  public static final Var const__0 = (Var)RT.var("clojure.core", "set");
  
  public static final Var const__1 = (Var)RT.var("clojure.core", "vals");
  
  public static final Var const__2 = (Var)RT.var("clojure.core", "keys");
  
  public static final Var const__4 = (Var)RT.var("clojure.core", "some");
  
  public static final Var const__7 = (Var)RT.var("clojure.core", "contains?");
  
  public static final Keyword const__8 = (Keyword)RT.keyword(null, "re");
  
  public static final Keyword const__9 = (Keyword)RT.keyword(null, "source");
  
  public static final Keyword const__10 = (Keyword)RT.keyword(null, "keys");
  
  public static final Keyword const__11 = (Keyword)RT.keyword(null, "absolute?");
  
  public static final AFn const__12 = (AFn)PersistentHashSet.create(new Object[] { RT.keyword(null, "re"), RT.keyword(null, "source"), RT.keyword(null, "keys"), RT.keyword(null, "absolute?") });
  
  public static final Var const__13 = (Var)RT.var("clojure.core", "dissoc");
  
  public static final Var const__14 = (Var)RT.var("clojure.core", "with-meta");
  
  public static final Var const__15 = (Var)RT.var("clojure.core", "into");
  
  public static final Var const__16 = (Var)RT.var("clojure.core", "not-empty");
  
  public static final Var const__17 = (Var)RT.var("clojure.core", "identical?");
  
  public static final Var const__18 = (Var)RT.var("clojure.core", "assoc");
  
  public static final AFn const__19 = (AFn)Tuple.create(RT.keyword(null, "source"), RT.keyword(null, "re"), RT.keyword(null, "keys"), RT.keyword(null, "absolute?"));
  
  public static final Var const__20 = (Var)RT.var("clojure.core", "seq"), const__21 = (Var)RT.var("clojure.core", "concat"), const__22 = (Var)RT.var("clojure.core", "not"), const__23 = (Var)RT.var("clojure.core", "class"), const__24 = (Var)RT.var("clojure.core", "imap-cons"), const__25 = (Var)RT.var("clojure.core", "str"), const__34 = (Var)RT.var("clout.core", "request-url"), const__35 = (Var)RT.var("clout.core", "path-info"), const__36 = (Var)RT.var("clout.core", "re-match-groups"), const__37 = (Var)RT.var("clout.core", "assoc-keys-with-groups");
  
  public CompiledRoute(Object paramObject1, Object paramObject2, Object paramObject3, Object paramObject4, Object paramObject5, Object paramObject6, int paramInt1, int paramInt2) { this.source = paramObject1;
    this.re = paramObject2;
    this.keys = paramObject3;
    this.absolute_QMARK_ = paramObject4;
    this.__meta = paramObject5;
    this.__extmap = paramObject6;
    this.__hash = paramInt1;
    this.__hasheq = paramInt2; }
  
  public CompiledRoute(Object paramObject1, Object paramObject2, Object paramObject3, Object paramObject4) { this(paramObject1, paramObject2, paramObject3, paramObject4, null, null, 0, 0); }
  
  public CompiledRoute(Object paramObject1, Object paramObject2, Object paramObject3, Object paramObject4, Object paramObject5, Object paramObject6) { this(paramObject1, paramObject2, paramObject3, paramObject4, paramObject5, paramObject6, 0, 0); }
  
  public static IPersistentVector getBasis() { return Tuple.create(Symbol.intern(null, "source"), Symbol.intern(null, "re"), Symbol.intern(null, "keys"), Symbol.intern(null, "absolute?")); }
  
  public static CompiledRoute create(IPersistentMap paramIPersistentMap) {
    Object object1 = paramIPersistentMap.valAt(Keyword.intern("source"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("source"));
    Object object2 = paramIPersistentMap.valAt(Keyword.intern("re"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("re"));
    Object object3 = paramIPersistentMap.valAt(Keyword.intern("keys"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("keys"));
    Object object4 = paramIPersistentMap.valAt(Keyword.intern("absolute?"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("absolute?"));
    return new CompiledRoute(object1, object2, object3, object4, null, RT.seqOrElse(paramIPersistentMap), 0, 0);
  }
  
  public String toString() { return (String)this.source; }
  
  public Object route_matches(Object request) { // Byte code:
    //   0: aload_0
    //   1: getfield absolute_QMARK_ : Ljava/lang/Object;
    //   4: dup
    //   5: ifnull -> 34
    //   8: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   11: if_acmpeq -> 35
    //   14: getstatic clout/core/CompiledRoute.const__34 : Lclojure/lang/Var;
    //   17: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   20: checkcast clojure/lang/IFn
    //   23: aload_1
    //   24: aconst_null
    //   25: astore_1
    //   26: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   31: goto -> 52
    //   34: pop
    //   35: getstatic clout/core/CompiledRoute.const__35 : Lclojure/lang/Var;
    //   38: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   41: checkcast clojure/lang/IFn
    //   44: aload_1
    //   45: aconst_null
    //   46: astore_1
    //   47: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   52: astore_2
    //   53: getstatic clout/core/CompiledRoute.const__36 : Lclojure/lang/Var;
    //   56: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   59: checkcast clojure/lang/IFn
    //   62: aload_0
    //   63: getfield re : Ljava/lang/Object;
    //   66: aload_2
    //   67: aconst_null
    //   68: astore_2
    //   69: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   74: astore_3
    //   75: aload_3
    //   76: dup
    //   77: ifnull -> 112
    //   80: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   83: if_acmpeq -> 113
    //   86: getstatic clout/core/CompiledRoute.const__37 : Lclojure/lang/Var;
    //   89: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   92: checkcast clojure/lang/IFn
    //   95: aload_3
    //   96: aconst_null
    //   97: astore_3
    //   98: aload_0
    //   99: getfield keys : Ljava/lang/Object;
    //   102: aconst_null
    //   103: astore_0
    //   104: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   109: goto -> 114
    //   112: pop
    //   113: aconst_null
    //   114: areturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #56	-> 0
    //   #59	-> 0
    //   #60	-> 20
    //   #60	-> 26
    //   #61	-> 41
    //   #61	-> 47
    //   #62	-> 59
    //   #62	-> 69
    //   #63	-> 75
    //   #64	-> 92
    //   #64	-> 102
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   75	39	3	groups	Ljava/lang/Object;
    //   53	61	2	path_info	Ljava/lang/Object;
    //   0	114	0	this	Lclout/core/CompiledRoute;
    //   0	114	1	request	Ljava/lang/Object; }
  
  public int hasheq() {
    int hq__7768__auto__30675 = this.__hasheq, h__7769__auto__30674 = RT.intCast(0xFFFFFFFF9B0E8516L ^ APersistentMap.mapHasheq((IPersistentMap)this));
    this.__hasheq = h__7769__auto__30674;
    return (hq__7768__auto__30675 == 0L) ? h__7769__auto__30674 : hq__7768__auto__30675;
  }
  
  public int hashCode() {
    int hash__7771__auto__30677 = this.__hash, h__7772__auto__30676 = APersistentMap.mapHash((IPersistentMap)this);
    this.__hash = h__7772__auto__30676;
    return (hash__7771__auto__30677 == 0L) ? h__7772__auto__30676 : hash__7771__auto__30677;
  }
  
  public boolean equals(Object G__30659) { G__30659 = null;
    return APersistentMap.mapEquals((IPersistentMap)this, G__30659); }
  
  public IPersistentMap meta() { return (IPersistentMap)this.__meta; }
  
  public IObj withMeta(IPersistentMap G__30659) { G__30659 = null;
    return (IObj)new CompiledRoute(this.source, this.re, this.keys, this.absolute_QMARK_, G__30659, this.__extmap, this.__hash, this.__hasheq); }
  
  public Object valAt(Object k__7777__auto__) { k__7777__auto__ = null;
    return ((ILookup)this).valAt(k__7777__auto__, null); }
  
  public Object valAt(Object k__7779__auto__, Object else__7780__auto__) {
    Object G__30672 = k__7779__auto__;
    switch (Util.hash(G__30672) >> 4 & 0x3) {
      case 0:
        if (G__30672 == const__11);
        break;
      case 1:
        if (G__30672 == const__9);
        break;
      case 2:
        if (G__30672 == const__8);
        break;
      case 3:
        if (G__30672 == const__10);
        break;
    } 
    k__7779__auto__ = null;
    else__7780__auto__ = null;
    this = null;
    return RT.get(this.__extmap, k__7779__auto__, else__7780__auto__);
  }
  
  public ILookupThunk getLookupThunk(Keyword k__7782__auto__) {
    Object gclass = ((IFn)const__23.getRawRoot()).invoke(this), G__30663 = k__7782__auto__ = null;
    switch (Util.hash(G__30663) >> 4 & 0x3) {
      case 0:
        if (G__30663 == const__11)
          gclass = null; 
        break;
      case 1:
        if (G__30663 == const__9)
          gclass = null; 
        break;
      case 2:
        if (G__30663 == const__8)
          gclass = null; 
        break;
      case 3:
        if (G__30663 == const__10)
          gclass = null; 
        break;
    } 
    return (ILookupThunk)null;
  }
  
  public int count() { return RT.intCast(Numbers.add(4L, RT.count(this.__extmap))); }
  
  public IPersistentCollection empty() { throw (Throwable)new UnsupportedOperationException((String)((IFn)const__25.getRawRoot()).invoke("Can't create empty: ", "clout.core.CompiledRoute")); }
  
  public IPersistentCollection cons(Object e__7786__auto__) { e__7786__auto__ = null;
    this = null;
    return (IPersistentCollection)((IFn)const__24).invoke(this, e__7786__auto__); }
  
  public boolean equiv(Object G__30659) {
    boolean or__5516__auto__30682 = Util.identical(this, G__30659);
    Object G__30659 = G__30659 = null;
    boolean and__5514__auto__30681 = Util.equiv(this.source, ((CompiledRoute)G__30659).source), and__5514__auto__30680 = Util.equiv(this.re, ((CompiledRoute)G__30659).re), and__5514__auto__30679 = Util.equiv(this.keys, ((CompiledRoute)G__30659).keys), and__5514__auto__30678 = Util.equiv(this.absolute_QMARK_, ((CompiledRoute)G__30659).absolute_QMARK_);
    G__30659 = null;
    return RT.booleanCast(or__5516__auto__30682 ? (or__5516__auto__30682 ? Boolean.TRUE : Boolean.FALSE) : (Util.identical(((IFn)const__23.getRawRoot()).invoke(this), ((IFn)const__23.getRawRoot()).invoke(G__30659)) ? (and__5514__auto__30681 ? (and__5514__auto__30680 ? (and__5514__auto__30679 ? (and__5514__auto__30678 ? (Util.equiv(this.__extmap, ((CompiledRoute)G__30659).__extmap) ? Boolean.TRUE : Boolean.FALSE) : (and__5514__auto__30678 ? Boolean.TRUE : Boolean.FALSE)) : (and__5514__auto__30679 ? Boolean.TRUE : Boolean.FALSE)) : (and__5514__auto__30680 ? Boolean.TRUE : Boolean.FALSE)) : (and__5514__auto__30681 ? Boolean.TRUE : Boolean.FALSE)) : null));
  }
  
  public boolean containsKey(Object k__7789__auto__) { k__7789__auto__ = null;
    this = null;
    return ((Boolean)((IFn)const__22.getRawRoot()).invoke(Util.identical(this, ((ILookup)this).valAt(k__7789__auto__, this)) ? Boolean.TRUE : Boolean.FALSE)).booleanValue(); }
  
  public IMapEntry entryAt(Object k__7791__auto__) {
    Object v__7792__auto__30683 = ((ILookup)this).valAt(k__7791__auto__, this);
    k__7791__auto__ = null;
    v__7792__auto__30683 = null;
    this = null;
    return (IMapEntry)(Util.identical(this, v__7792__auto__30683) ? null : MapEntry.create(k__7791__auto__, v__7792__auto__30683));
  }
  
  public ISeq seq() { this = null;
    return (ISeq)((IFn)const__20.getRawRoot()).invoke(((IFn)const__21.getRawRoot()).invoke(Tuple.create(MapEntry.create(const__9, this.source), MapEntry.create(const__8, this.re), MapEntry.create(const__10, this.keys), MapEntry.create(const__11, this.absolute_QMARK_)), this.__extmap)); }
  
  public Iterator iterator() { return (Iterator)new RecordIterator((ILookup)this, (IPersistentVector)const__19, (Iterator)RT.iter(this.__extmap)); }
  
  public IPersistentMap assoc(Object k__7796__auto__, Object G__30659) {
    Object pred__30661 = const__17.getRawRoot(), expr__30662 = k__7796__auto__;
    if (((IFn)pred__30661).invoke(const__9, expr__30662) != null) {
      if (((IFn)pred__30661).invoke(const__9, expr__30662) != Boolean.FALSE)
        G__30659 = null; 
    } else {
      ((IFn)pred__30661).invoke(const__9, expr__30662);
    } 
    if (((IFn)pred__30661).invoke(const__8, expr__30662) != null) {
      if (((IFn)pred__30661).invoke(const__8, expr__30662) != Boolean.FALSE)
        G__30659 = null; 
    } else {
      ((IFn)pred__30661).invoke(const__8, expr__30662);
    } 
    if (((IFn)pred__30661).invoke(const__10, expr__30662) != null) {
      if (((IFn)pred__30661).invoke(const__10, expr__30662) != Boolean.FALSE)
        G__30659 = null; 
    } else {
      ((IFn)pred__30661).invoke(const__10, expr__30662);
    } 
    pred__30661 = null;
    expr__30662 = null;
    if (((IFn)pred__30661).invoke(const__11, expr__30662) != null) {
      if (((IFn)pred__30661).invoke(const__11, expr__30662) != Boolean.FALSE)
        G__30659 = null; 
    } else {
      ((IFn)pred__30661).invoke(const__11, expr__30662);
    } 
    k__7796__auto__ = null;
    G__30659 = null;
    return (IPersistentMap)new CompiledRoute(this.source, this.re, this.keys, this.absolute_QMARK_, this.__meta, ((IFn)const__18.getRawRoot()).invoke(this.__extmap, k__7796__auto__, G__30659));
  }
  
  public IPersistentMap without(Object k__7798__auto__) { if (((IFn)const__7.getRawRoot()).invoke(const__12, k__7798__auto__) != null) {
      if (((IFn)const__7.getRawRoot()).invoke(const__12, k__7798__auto__) != Boolean.FALSE) {
        k__7798__auto__ = null;
        this = null;
      } 
    } else {
      ((IFn)const__7.getRawRoot()).invoke(const__12, k__7798__auto__);
    } 
    k__7798__auto__ = null;
    return (IPersistentMap)new CompiledRoute(this.source, this.re, this.keys, this.absolute_QMARK_, this.__meta, ((IFn)const__16.getRawRoot()).invoke(((IFn)const__13.getRawRoot()).invoke(this.__extmap, k__7798__auto__))); }
  
  public int size() { this = null;
    return ((Counted)this).count(); }
  
  public boolean isEmpty() { return Util.equiv(0L, ((Counted)this).count()); }
  
  public boolean containsValue(Object v__7802__auto__) { v__7802__auto__ = null;
    return RT.booleanCast(((IFn)const__4.getRawRoot()).invoke(RT.set(new Object[] { v__7802__auto__ }, ), ((IFn)const__1.getRawRoot()).invoke(this))); }
  
  public Object get(Object k__7804__auto__) { k__7804__auto__ = null;
    return ((ILookup)this).valAt(k__7804__auto__); }
  
  public Object put(Object k__7806__auto__, Object v__7807__auto__) { throw (Throwable)new UnsupportedOperationException(); }
  
  public Object remove(Object k__7809__auto__) { throw (Throwable)new UnsupportedOperationException(); }
  
  public void putAll(Map m__7811__auto__) { throw (Throwable)new UnsupportedOperationException(); }
  
  public void clear() { throw (Throwable)new UnsupportedOperationException(); }
  
  public Set keySet() { this = null;
    return (Set)((IFn)const__0.getRawRoot()).invoke(((IFn)const__2.getRawRoot()).invoke(this)); }
  
  public Collection values() { this = null;
    return (Collection)((IFn)const__1.getRawRoot()).invoke(this); }
  
  public Set entrySet() { this = null;
    return (Set)((IFn)const__0.getRawRoot()).invoke(this); }
}
