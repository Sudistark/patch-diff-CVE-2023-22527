package clj_commons.byte_streams;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class graph__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__10;
  
  public static final AFn const__14;
  
  public static final Var const__15;
  
  public static final AFn const__18;
  
  public static final Var const__19;
  
  public static final AFn const__23;
  
  public static final Var const__24;
  
  public static final AFn const__27;
  
  public static final Var const__28;
  
  public static final AFn const__31;
  
  public static final Var const__32;
  
  public static final AFn const__35;
  
  public static final Object const__36;
  
  public static final Var const__37;
  
  public static final Var const__38;
  
  public static final Var const__39;
  
  public static final Keyword const__40;
  
  public static final Var const__41;
  
  public static final ISeq const__42;
  
  public static final Var const__43;
  
  public static final Var const__44;
  
  public static final AFn const__48;
  
  public static final Keyword const__49;
  
  public static final AFn const__50;
  
  public static final Keyword const__51;
  
  public static final Keyword const__52;
  
  public static final AFn const__59;
  
  public static final Keyword const__60;
  
  public static final Var const__61;
  
  public static final Var const__62;
  
  public static final Var const__63;
  
  public static final AFn const__64;
  
  public static final AFn const__65;
  
  public static final Keyword const__66;
  
  public static final AFn const__67;
  
  public static final AFn const__68;
  
  public static final AFn const__69;
  
  public static final AFn const__70;
  
  public static final AFn const__71;
  
  public static final AFn const__72;
  
  public static final AFn const__73;
  
  public static final AFn const__74;
  
  public static final AFn const__75;
  
  public static final AFn const__76;
  
  public static final Var const__77;
  
  public static final AFn const__78;
  
  public static final Var const__79;
  
  public static final AFn const__82;
  
  public static final Var const__83;
  
  public static final AFn const__86;
  
  public static final Var const__87;
  
  public static final AFn const__90;
  
  public static final Var const__91;
  
  public static final AFn const__93;
  
  public static final Var const__94;
  
  public static final Var const__95;
  
  public static final AFn const__98;
  
  public static final Var const__99;
  
  public static final AFn const__102;
  
  public static final Var const__103;
  
  public static final AFn const__106;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new graph.fn__26557());
    const__3.setMeta((IPersistentMap)const__10);
    const__3.setMeta((IPersistentMap)const__14);
    const__3.bindRoot(new graph.pprint_type());
    const__15.setMeta((IPersistentMap)const__18);
    const__15.bindRoot(new graph.type());
    const__19.setMeta((IPersistentMap)const__23);
    const__19.bindRoot(new graph.protocol_QMARK_());
    const__24.setMeta((IPersistentMap)const__27);
    const__24.bindRoot(new graph.canonicalize());
    const__28.setMeta((IPersistentMap)const__31);
    const__28.bindRoot(new graph.class_satisfies_QMARK_());
    const__32.setMeta((IPersistentMap)const__35);
    const__32.bindRoot(new graph.assignable_QMARK_());
    const__79.setMeta((IPersistentMap)const__82);
    const__79.bindRoot(new graph.implicit_conversions());
    const__83.setMeta((IPersistentMap)const__86);
    const__83.bindRoot(new graph.conversion_graph());
    const__87.setMeta((IPersistentMap)const__90);
    const__87.bindRoot(new graph.conj_path());
    const__91.setMeta((IPersistentMap)const__93);
    const__91














      
      .bindRoot(((IFn)const__94.getRawRoot()).invoke(new graph.fn__26752()));
    const__95.setMeta((IPersistentMap)const__98);
    const__95.bindRoot(new graph.closeable_seq());
    const__99.setMeta((IPersistentMap)const__102);
    const__99.bindRoot(new graph.conversion_fn());
    const__103.setMeta((IPersistentMap)const__106);
    const__103.bindRoot(new graph.seq_conversion_fn());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "clj-commons.byte-streams.graph");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("clj-commons.byte-streams.graph", "pprint-type");
    const__10 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(13), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_commons/byte_streams/graph.clj" });
    const__14 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "x")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Type") }))) })), RT.keyword(null, "line"), Integer.valueOf(39), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_commons/byte_streams/graph.clj" });
    const__15 = (Var)RT.var("clj-commons.byte-streams.graph", "type");
    const__18 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "t")), Tuple.create(Symbol.intern(null, "wrapper"), Symbol.intern(null, "t")) })), RT.keyword(null, "line"), Integer.valueOf(44), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_commons/byte_streams/graph.clj" });
    const__19 = (Var)RT.var("clj-commons.byte-streams.graph", "protocol?");
    const__23 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(55), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_commons/byte_streams/graph.clj" });
    const__24 = (Var)RT.var("clj-commons.byte-streams.graph", "canonicalize");
    const__27 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(58), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_commons/byte_streams/graph.clj" });
    const__28 = (Var)RT.var("clj-commons.byte-streams.graph", "class-satisfies?");
    const__31 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "protocol"), ((IObj)Symbol.intern(null, "c")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Class") }))) })), RT.keyword(null, "line"), Integer.valueOf(63), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_commons/byte_streams/graph.clj" });
    const__32 = (Var)RT.var("clj-commons.byte-streams.graph", "assignable?");
    const__35 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "a")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Type") })), ((IObj)Symbol.intern(null, "b")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Type") }))) })), RT.keyword(null, "line"), Integer.valueOf(71), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_commons/byte_streams/graph.clj" });
    const__36 = RT.classForName("clj_commons.byte_streams.graph.IConversionGraph");
    const__37 = (Var)RT.var("clojure.core", "alter-meta!");
    const__38 = (Var)RT.var("clj-commons.byte-streams.graph", "IConversionGraph");
    const__39 = (Var)RT.var("clojure.core", "assoc");
    const__40 = (Keyword)RT.keyword(null, "doc");
    const__41 = (Var)RT.var("clojure.core", "assert-same-protocol");
    const__42 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "assoc-conversion")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "src"), Symbol.intern(null, "dst"), Symbol.intern(null, "f"), Symbol.intern(null, "cost")) })) })), ((IObj)Symbol.intern(null, "equivalent-targets")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "dst")) })) })), ((IObj)Symbol.intern(null, "possible-sources")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })) })), ((IObj)Symbol.intern(null, "possible-targets")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })) })), ((IObj)Symbol.intern(null, "possible-conversions")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "src")) })) })), ((IObj)Symbol.intern(null, "conversion")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "src"), Symbol.intern(null, "dst")) })) })) }));
    const__43 = (Var)RT.var("clojure.core", "alter-var-root");
    const__44 = (Var)RT.var("clojure.core", "merge");
    const__48 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "clj_commons.byte_streams.graph.IConversionGraph"), RT.keyword(null, "on-interface"), RT.classForName("clj_commons.byte_streams.graph.IConversionGraph") });
    const__49 = (Keyword)RT.keyword(null, "sigs");
    const__50 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "assoc-conversion"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "assoc-conversion")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "src"), Symbol.intern(null, "dst"), Symbol.intern(null, "f"), Symbol.intern(null, "cost")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "src"), Symbol.intern(null, "dst"), Symbol.intern(null, "f"), Symbol.intern(null, "cost")) })), RT.keyword(null, "doc"), null }), RT.keyword(null, "equivalent-targets"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "equivalent-targets")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "dst")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "dst")) })), RT.keyword(null, "doc"), null }), RT.keyword(null, "possible-sources"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "possible-sources")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })), RT.keyword(null, "doc"), null }), RT.keyword(null, "possible-targets"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "possible-targets")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })), RT.keyword(null, "doc"), null }), RT.keyword(null, "possible-conversions"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "possible-conversions")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "src")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "src")) })), RT.keyword(null, "doc"), null }), 
          RT.keyword(null, "conversion"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "conversion")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "src"), Symbol.intern(null, "dst")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "src"), Symbol.intern(null, "dst")) })), RT.keyword(null, "doc"), null }) });
    const__51 = (Keyword)RT.keyword(null, "var");
    const__52 = (Keyword)RT.keyword(null, "method-map");
    const__59 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "possible-sources"), RT.keyword(null, "possible-sources"), RT.keyword(null, "conversion"), RT.keyword(null, "conversion"), RT.keyword(null, "equivalent-targets"), RT.keyword(null, "equivalent-targets"), RT.keyword(null, "assoc-conversion"), RT.keyword(null, "assoc-conversion"), RT.keyword(null, "possible-conversions"), RT.keyword(null, "possible-conversions"), 
          RT.keyword(null, "possible-targets"), RT.keyword(null, "possible-targets") });
    const__60 = (Keyword)RT.keyword(null, "method-builders");
    const__61 = (Var)RT.var("clojure.core", "intern");
    const__62 = (Var)RT.var("clojure.core", "*ns*");
    const__63 = (Var)RT.var("clojure.core", "with-meta");
    const__64 = (AFn)((IObj)Symbol.intern(null, "possible-conversions")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "src")) })) }));
    const__65 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "possible-conversions")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "src")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "src")) })), RT.keyword(null, "doc"), null });
    const__66 = (Keyword)RT.keyword(null, "protocol");
    const__67 = (AFn)((IObj)Symbol.intern(null, "possible-sources")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })) }));
    const__68 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "possible-sources")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })), RT.keyword(null, "doc"), null });
    const__69 = (AFn)((IObj)Symbol.intern(null, "assoc-conversion")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "src"), Symbol.intern(null, "dst"), Symbol.intern(null, "f"), Symbol.intern(null, "cost")) })) }));
    const__70 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "assoc-conversion")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "src"), Symbol.intern(null, "dst"), Symbol.intern(null, "f"), Symbol.intern(null, "cost")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "src"), Symbol.intern(null, "dst"), Symbol.intern(null, "f"), Symbol.intern(null, "cost")) })), RT.keyword(null, "doc"), null });
    const__71 = (AFn)((IObj)Symbol.intern(null, "equivalent-targets")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "dst")) })) }));
    const__72 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "equivalent-targets")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "dst")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "dst")) })), RT.keyword(null, "doc"), null });
    const__73 = (AFn)((IObj)Symbol.intern(null, "conversion")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "src"), Symbol.intern(null, "dst")) })) }));
    const__74 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "conversion")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "src"), Symbol.intern(null, "dst")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "src"), Symbol.intern(null, "dst")) })), RT.keyword(null, "doc"), null });
    const__75 = (AFn)((IObj)Symbol.intern(null, "possible-targets")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })) }));
    const__76 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "possible-targets")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })), RT.keyword(null, "doc"), null });
    const__77 = (Var)RT.var("clojure.core", "-reset-methods");
    const__78 = (AFn)Symbol.intern(null, "IConversionGraph");
    const__79 = (Var)RT.var("clj-commons.byte-streams.graph", "implicit-conversions");
    const__82 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "src")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Type") }))) })), RT.keyword(null, "line"), Integer.valueOf(94), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_commons/byte_streams/graph.clj" });
    const__83 = (Var)RT.var("clj-commons.byte-streams.graph", "conversion-graph");
    const__86 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(149), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_commons/byte_streams/graph.clj" });
    const__87 = (Var)RT.var("clj-commons.byte-streams.graph", "conj-path");
    const__90 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "p")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "ConversionPath") })), Symbol.intern(null, "src"), Symbol.intern(null, "dst"), ((IObj)Symbol.intern(null, "c")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Conversion") }))) })), RT.keyword(null, "line"), Integer.valueOf(162), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_commons/byte_streams/graph.clj" });
    const__91 = (Var)RT.var("clj-commons.byte-streams.graph", "conversion-path");
    const__93 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(169), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_commons/byte_streams/graph.clj" });
    const__94 = (Var)RT.var("clojure.core", "memoize");
    const__95 = (Var)RT.var("clj-commons.byte-streams.graph", "closeable-seq");
    const__98 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s"), Symbol.intern(null, "exhaustible?"), Symbol.intern(null, "close-fn")) })), RT.keyword(null, "line"), Integer.valueOf(192), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_commons/byte_streams/graph.clj" });
    const__99 = (Var)RT.var("clj-commons.byte-streams.graph", "conversion-fn");
  }
  
  public static void __init1() {
    const__102 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "g"), Symbol.intern(null, "src"), Symbol.intern(null, "dst")) })), RT.keyword(null, "line"), Integer.valueOf(227), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_commons/byte_streams/graph.clj" });
    const__103 = (Var)RT.var("clj-commons.byte-streams.graph", "seq-conversion-fn");
    const__106 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "g"), Symbol.intern(null, "convert"), Symbol.intern(null, "wrapper"), Symbol.intern(null, "dst")) })), RT.keyword(null, "line"), Integer.valueOf(280), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_commons/byte_streams/graph.clj" });
  }
  
  static  {
    __init0();
    __init1();
    Compiler.pushNSandLoader(RT.classForName("clj_commons.byte_streams.graph__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
