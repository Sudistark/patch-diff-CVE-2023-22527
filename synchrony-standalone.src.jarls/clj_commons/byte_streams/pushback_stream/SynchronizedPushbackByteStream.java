package clj_commons.byte_streams.pushback_stream;

import clj_commons.byte_streams.InputStream;
import clj_commons.primitive_math.Primitives;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.IPersistentVector;
import clojure.lang.IType;
import clojure.lang.Keyword;
import clojure.lang.Numbers;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Var;
import java.io.IOException;
import java.nio.Buffer;
import java.nio.ByteBuffer;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.concurrent.locks.Lock;

public final class SynchronizedPushbackByteStream implements PushbackStream, InputStream.Streamable, IType {
  public final Object lock;
  
  public final Object consumers;
  
  public final long buffer_capacity;
  
  int buffer_size;
  
  Object deferred;
  
  Object closed_QMARK_;
  
  public final Object buffer;
  
  public static final Object const__1 = Long.valueOf(1L);
  
  public static final Var const__3 = (Var)RT.var("clojure.core", "deref");
  
  public static final Object const__4 = Long.valueOf(0L);
  
  public static final Var const__9 = (Var)RT.var("manifold.deferred", "success-deferred");
  
  public static final Keyword const__11 = (Keyword)RT.keyword(null, "else");
  
  public static final Var const__12 = (Var)RT.var("manifold.deferred", "deferred"), const__14 = (Var)RT.var("clj-commons.byte-streams.pushback-stream", "trigger"), const__16 = (Var)RT.var("clj-commons.byte-streams.pushback-stream", "put"), const__18 = (Var)RT.var("clojure.core", "not"), const__19 = (Var)RT.var("manifold.deferred", "success!");
  
  public SynchronizedPushbackByteStream(Object paramObject1, Object paramObject2, long paramLong, int paramInt, Object paramObject3, Object paramObject4, Object paramObject5) { this.lock = paramObject1;
    this.consumers = paramObject2;
    this.buffer_capacity = paramLong;
    this.buffer_size = paramInt;
    this.deferred = paramObject3;
    this.closed_QMARK_ = paramObject4;
    this.buffer = paramObject5; }
  
  public static IPersistentVector getBasis() { return RT.vector(new Object[] { Symbol.intern(null, "lock"), ((IObj)Symbol.intern(null, "consumers")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "LinkedList") })), ((IObj)Symbol.intern(null, "buffer-capacity")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "long") })), ((IObj)Symbol.intern(null, "buffer-size")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "int"), RT.keyword(null, "unsynchronized-mutable"), Boolean.TRUE })), ((IObj)Symbol.intern(null, "deferred")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "unsynchronized-mutable"), Boolean.TRUE })), ((IObj)Symbol.intern(null, "closed?")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "unsynchronized-mutable"), Boolean.TRUE })), ((IObj)Symbol.intern(null, "buffer")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "LinkedList") })) }); }
  
  public void close() { // Byte code:
    //   0: aload_0
    //   1: getfield lock : Ljava/lang/Object;
    //   4: astore_1
    //   5: aload_1
    //   6: checkcast java/util/concurrent/locks/Lock
    //   9: invokeinterface lock : ()V
    //   14: aconst_null
    //   15: pop
    //   16: aload_0
    //   17: getfield closed_QMARK_ : Ljava/lang/Object;
    //   20: dup
    //   21: ifnull -> 34
    //   24: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   27: if_acmpeq -> 35
    //   30: aconst_null
    //   31: goto -> 45
    //   34: pop
    //   35: aload_0
    //   36: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   39: putfield closed_QMARK_ : Ljava/lang/Object;
    //   42: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   45: astore_2
    //   46: aload_1
    //   47: aconst_null
    //   48: astore_1
    //   49: checkcast java/util/concurrent/locks/Lock
    //   52: invokeinterface unlock : ()V
    //   57: aconst_null
    //   58: pop
    //   59: aload_2
    //   60: aconst_null
    //   61: astore_2
    //   62: dup
    //   63: ifnull -> 154
    //   66: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   69: if_acmpeq -> 155
    //   72: aload_0
    //   73: getfield consumers : Ljava/lang/Object;
    //   76: checkcast java/util/LinkedList
    //   79: invokevirtual poll : ()Ljava/lang/Object;
    //   82: astore_1
    //   83: aload_1
    //   84: dup
    //   85: ifnull -> 148
    //   88: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   91: if_acmpeq -> 149
    //   94: aload_1
    //   95: aconst_null
    //   96: astore_1
    //   97: astore_2
    //   98: aload_2
    //   99: checkcast clj_commons/byte_streams/pushback_stream/Consumption
    //   102: getfield buf : Ljava/lang/Object;
    //   105: astore_3
    //   106: getstatic clj_commons/byte_streams/pushback_stream/SynchronizedPushbackByteStream.const__19 : Lclojure/lang/Var;
    //   109: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   112: checkcast clojure/lang/IFn
    //   115: aload_2
    //   116: aconst_null
    //   117: astore_2
    //   118: checkcast clj_commons/byte_streams/pushback_stream/Consumption
    //   121: getfield deferred : Ljava/lang/Object;
    //   124: aload_3
    //   125: aconst_null
    //   126: astore_3
    //   127: checkcast java/nio/Buffer
    //   130: invokevirtual position : ()I
    //   133: invokestatic valueOf : (I)Ljava/lang/Integer;
    //   136: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   141: pop
    //   142: goto -> 72
    //   145: nop
    //   146: nop
    //   147: athrow
    //   148: pop
    //   149: aconst_null
    //   150: pop
    //   151: goto -> 157
    //   154: pop
    //   155: aconst_null
    //   156: pop
    //   157: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   160: pop
    //   161: return
    // Line number table:
    //   Java source line number -> byte code offset
    //   #90	-> 0
    //   #242	-> 0
    //   #242	-> 9
    //   #245	-> 16
    //   #242	-> 52
    //   #249	-> 79
    //   #249	-> 83
    //   #250	-> 99
    //   #251	-> 112
    //   #251	-> 118
    //   #251	-> 130
    //   #251	-> 136
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   46	16	2	x__14926__auto__27083	Ljava/lang/Object;
    //   5	57	1	lock__14925__auto__27084	Ljava/lang/Object;
    //   106	36	3	buf	Ljava/lang/Object;
    //   98	47	2	c	Ljava/lang/Object;
    //   83	68	1	temp__5735__auto__27085	Ljava/lang/Object;
    //   0	161	0	this	Lclj_commons/byte_streams/pushback_stream/SynchronizedPushbackByteStream; }
  
  public Object take(byte[] ary, int offset, int length, boolean eager_QMARK_) { // Byte code:
    //   0: aload_1
    //   1: aconst_null
    //   2: astore_1
    //   3: checkcast [B
    //   6: invokestatic wrap : ([B)Ljava/nio/ByteBuffer;
    //   9: checkcast java/nio/Buffer
    //   12: iload_2
    //   13: invokevirtual position : (I)Ljava/nio/Buffer;
    //   16: checkcast java/nio/Buffer
    //   19: iload_2
    //   20: i2l
    //   21: iload_3
    //   22: i2l
    //   23: ladd
    //   24: invokestatic uncheckedIntCast : (J)I
    //   27: invokevirtual limit : (I)Ljava/nio/Buffer;
    //   30: checkcast java/nio/ByteBuffer
    //   33: invokevirtual slice : ()Ljava/nio/ByteBuffer;
    //   36: astore #5
    //   38: aload_0
    //   39: getfield lock : Ljava/lang/Object;
    //   42: astore #6
    //   44: aload #6
    //   46: checkcast java/util/concurrent/locks/Lock
    //   49: invokeinterface lock : ()V
    //   54: aconst_null
    //   55: pop
    //   56: aload_0
    //   57: getfield buffer : Ljava/lang/Object;
    //   60: checkcast java/util/LinkedList
    //   63: invokevirtual peek : ()Ljava/lang/Object;
    //   66: astore #7
    //   68: aload #7
    //   70: dup
    //   71: ifnull -> 160
    //   74: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   77: if_acmpeq -> 161
    //   80: aload #7
    //   82: aconst_null
    //   83: astore #7
    //   85: astore #8
    //   87: getstatic clj_commons/byte_streams/pushback_stream/SynchronizedPushbackByteStream.const__16 : Lclojure/lang/Var;
    //   90: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   93: checkcast clojure/lang/IFn
    //   96: aload #8
    //   98: aload #5
    //   100: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   105: pop
    //   106: aload #8
    //   108: aconst_null
    //   109: astore #8
    //   111: checkcast java/nio/Buffer
    //   114: invokevirtual hasRemaining : ()Z
    //   117: ifeq -> 126
    //   120: aconst_null
    //   121: pop
    //   122: goto -> 137
    //   125: athrow
    //   126: aload_0
    //   127: getfield buffer : Ljava/lang/Object;
    //   130: checkcast java/util/LinkedList
    //   133: invokevirtual remove : ()Ljava/lang/Object;
    //   136: pop
    //   137: aload #5
    //   139: checkcast java/nio/Buffer
    //   142: invokevirtual hasRemaining : ()Z
    //   145: ifeq -> 155
    //   148: goto -> 56
    //   151: nop
    //   152: nop
    //   153: athrow
    //   154: athrow
    //   155: aconst_null
    //   156: pop
    //   157: goto -> 163
    //   160: pop
    //   161: aconst_null
    //   162: pop
    //   163: aload_0
    //   164: aload_0
    //   165: getfield buffer_size : I
    //   168: i2l
    //   169: aload #5
    //   171: checkcast java/nio/Buffer
    //   174: invokevirtual position : ()I
    //   177: i2l
    //   178: invokestatic subtract : (JJ)J
    //   181: l2i
    //   182: putfield buffer_size : I
    //   185: aload_0
    //   186: getfield buffer_size : I
    //   189: i2l
    //   190: aload_0
    //   191: getfield buffer_capacity : J
    //   194: invokestatic lte : (JJ)Z
    //   197: istore #7
    //   199: iload #7
    //   201: ifeq -> 212
    //   204: aload_0
    //   205: getfield deferred : Ljava/lang/Object;
    //   208: goto -> 226
    //   211: athrow
    //   212: iload #7
    //   214: ifeq -> 223
    //   217: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   220: goto -> 226
    //   223: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   226: dup
    //   227: ifnull -> 255
    //   230: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   233: if_acmpeq -> 256
    //   236: aload_0
    //   237: getfield deferred : Ljava/lang/Object;
    //   240: astore #7
    //   242: aload_0
    //   243: aconst_null
    //   244: putfield deferred : Ljava/lang/Object;
    //   247: aload #7
    //   249: aconst_null
    //   250: astore #7
    //   252: goto -> 257
    //   255: pop
    //   256: aconst_null
    //   257: aload_0
    //   258: getfield closed_QMARK_ : Ljava/lang/Object;
    //   261: astore #7
    //   263: aload #7
    //   265: dup
    //   266: ifnull -> 283
    //   269: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   272: if_acmpeq -> 284
    //   275: aload #7
    //   277: aconst_null
    //   278: astore #7
    //   280: goto -> 382
    //   283: pop
    //   284: aload #5
    //   286: checkcast java/nio/Buffer
    //   289: invokevirtual position : ()I
    //   292: i2l
    //   293: invokestatic isPos : (J)Z
    //   296: istore #8
    //   298: iload #8
    //   300: ifeq -> 368
    //   303: iload #4
    //   305: istore #9
    //   307: iload #9
    //   309: ifeq -> 330
    //   312: iload #9
    //   314: ifeq -> 323
    //   317: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   320: goto -> 326
    //   323: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   326: goto -> 364
    //   329: athrow
    //   330: getstatic clj_commons/byte_streams/pushback_stream/SynchronizedPushbackByteStream.const__18 : Lclojure/lang/Var;
    //   333: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   336: checkcast clojure/lang/IFn
    //   339: aload #5
    //   341: checkcast java/nio/Buffer
    //   344: invokevirtual hasRemaining : ()Z
    //   347: ifeq -> 356
    //   350: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   353: goto -> 359
    //   356: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   359: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   364: goto -> 382
    //   367: athrow
    //   368: iload #8
    //   370: ifeq -> 379
    //   373: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   376: goto -> 382
    //   379: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   382: dup
    //   383: ifnull -> 423
    //   386: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   389: if_acmpeq -> 424
    //   392: getstatic clj_commons/byte_streams/pushback_stream/SynchronizedPushbackByteStream.const__9 : Lclojure/lang/Var;
    //   395: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   398: checkcast clojure/lang/IFn
    //   401: aload #5
    //   403: aconst_null
    //   404: astore #5
    //   406: checkcast java/nio/Buffer
    //   409: invokevirtual position : ()I
    //   412: invokestatic valueOf : (I)Ljava/lang/Integer;
    //   415: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   420: goto -> 484
    //   423: pop
    //   424: getstatic clj_commons/byte_streams/pushback_stream/SynchronizedPushbackByteStream.const__12 : Lclojure/lang/Var;
    //   427: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   430: checkcast clojure/lang/IFn
    //   433: invokeinterface invoke : ()Ljava/lang/Object;
    //   438: astore #7
    //   440: aload_0
    //   441: getfield consumers : Ljava/lang/Object;
    //   444: checkcast java/util/LinkedList
    //   447: new clj_commons/byte_streams/pushback_stream/Consumption
    //   450: dup
    //   451: aload #5
    //   453: aconst_null
    //   454: astore #5
    //   456: aload #7
    //   458: iload #4
    //   460: invokespecial <init> : (Ljava/lang/Object;Ljava/lang/Object;Z)V
    //   463: invokevirtual add : (Ljava/lang/Object;)Z
    //   466: ifeq -> 475
    //   469: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   472: goto -> 478
    //   475: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   478: pop
    //   479: aload #7
    //   481: aconst_null
    //   482: astore #7
    //   484: invokestatic create : (Ljava/lang/Object;Ljava/lang/Object;)Lclojure/lang/IPersistentVector;
    //   487: astore #7
    //   489: aload #6
    //   491: aconst_null
    //   492: astore #6
    //   494: checkcast java/util/concurrent/locks/Lock
    //   497: invokeinterface unlock : ()V
    //   502: aconst_null
    //   503: pop
    //   504: aload #7
    //   506: aconst_null
    //   507: astore #7
    //   509: astore #6
    //   511: aload #6
    //   513: lconst_0
    //   514: invokestatic uncheckedIntCast : (J)I
    //   517: aconst_null
    //   518: invokestatic nth : (Ljava/lang/Object;ILjava/lang/Object;)Ljava/lang/Object;
    //   521: astore #7
    //   523: aload #6
    //   525: aconst_null
    //   526: astore #6
    //   528: lconst_1
    //   529: invokestatic uncheckedIntCast : (J)I
    //   532: aconst_null
    //   533: invokestatic nth : (Ljava/lang/Object;ILjava/lang/Object;)Ljava/lang/Object;
    //   536: astore #8
    //   538: aload #7
    //   540: dup
    //   541: ifnull -> 576
    //   544: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   547: if_acmpeq -> 577
    //   550: getstatic clj_commons/byte_streams/pushback_stream/SynchronizedPushbackByteStream.const__19 : Lclojure/lang/Var;
    //   553: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   556: checkcast clojure/lang/IFn
    //   559: aload #7
    //   561: aconst_null
    //   562: astore #7
    //   564: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   567: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   572: pop
    //   573: goto -> 579
    //   576: pop
    //   577: aconst_null
    //   578: pop
    //   579: aload #8
    //   581: aconst_null
    //   582: astore #8
    //   584: areturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #90	-> 0
    //   #202	-> 6
    //   #203	-> 13
    //   #204	-> 23
    //   #204	-> 27
    //   #202	-> 33
    //   #209	-> 49
    //   #214	-> 63
    //   #214	-> 68
    //   #215	-> 93
    //   #215	-> 100
    //   #216	-> 106
    //   #216	-> 114
    //   #217	-> 133
    //   #218	-> 137
    //   #218	-> 142
    //   #221	-> 174
    //   #221	-> 178
    //   #221	-> 181
    //   #223	-> 185
    //   #223	-> 194
    //   #223	-> 199
    //   #228	-> 257
    //   #228	-> 263
    //   #229	-> 289
    //   #229	-> 293
    //   #229	-> 298
    //   #230	-> 307
    //   #230	-> 336
    //   #230	-> 344
    //   #230	-> 359
    //   #231	-> 398
    //   #231	-> 409
    //   #231	-> 415
    //   #232	-> 430
    //   #232	-> 433
    //   #233	-> 463
    //   #209	-> 497
    //   #202	-> 518
    //   #202	-> 533
    //   #236	-> 538
    //   #237	-> 556
    //   #237	-> 567
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   87	70	8	in	Ljava/lang/Object;
    //   68	95	7	temp__5735__auto__27086	Ljava/lang/Object;
    //   199	27	7	and__5514__auto__27087	Z
    //   242	10	7	d	Ljava/lang/Object;
    //   307	57	9	or__5516__auto__27088	Z
    //   298	84	8	and__5514__auto__27089	Z
    //   263	119	7	or__5516__auto__27090	Ljava/lang/Object;
    //   440	44	7	d	Ljava/lang/Object;
    //   489	20	7	x__14926__auto__27091	Ljava/lang/Object;
    //   44	465	6	lock__14925__auto__27092	Ljava/lang/Object;
    //   38	546	5	out	Ljava/lang/Object;
    //   511	73	6	vec__27079	Ljava/lang/Object;
    //   523	61	7	put	Ljava/lang/Object;
    //   538	46	8	take	Ljava/lang/Object;
    //   0	584	0	this	Lclj_commons/byte_streams/pushback_stream/SynchronizedPushbackByteStream;
    //   0	584	1	ary	[B
    //   0	584	2	offset	I
    //   0	584	3	length	I
    //   0	584	4	eager_QMARK_	Z }
  
  public Object pushback(byte[] ary, int offset, int length) {
    ary = null;
    return ((PushbackStream)this).pushback(
        (ByteBuffer)((Buffer)((Buffer)ByteBuffer.wrap((byte[])ary))
        .position(offset))
        .limit(RT.uncheckedIntCast(offset + length)));
  }
  
  public Object pushback(ByteBuffer buf) {
    Object lock__14925__auto__27094 = this.lock;
    ((Lock)lock__14925__auto__27094).lock();
    null;
    Object consumers = ((IFn)new fn__27074(buf, this.consumers)).invoke();
    if (((Buffer)buf).hasRemaining()) {
      ((LinkedList)this.buffer).addLast(buf);
      null;
      buf = null;
      this.buffer_size = (int)Primitives.add(this.buffer_size, ((Buffer)buf).remaining());
    } else {
      null;
    } 
    Object x__14926__auto__27093 = consumers = null;
    lock__14925__auto__27094 = null;
    ((Lock)lock__14925__auto__27094).unlock();
    null;
    Object consumers = x__14926__auto__27093 = null, iterable27078 = consumers = null;
    iterable27078 = null;
    for (Object it__26485__auto__27095 = ((Iterable)iterable27078).iterator(); ((Iterator)it__26485__auto__27095).hasNext(); ) {
      Object c = ((Iterator)it__26485__auto__27095).next();
      c = null;
      ((IFn)const__14.getRawRoot()).invoke(c);
    } 
    return null;
  }
  
  public Object put(byte[] ary, int offset, int length) {
    ary = null;
    return ((PushbackStream)this).put((ByteBuffer)((Buffer)((Buffer)ByteBuffer.wrap((byte[])ary)).position(offset)).limit(RT.uncheckedIntCast(offset + length)));
  }
  
  public Object put(ByteBuffer buf) { // Byte code:
    //   0: aload_0
    //   1: getfield lock : Ljava/lang/Object;
    //   4: astore_2
    //   5: aload_2
    //   6: checkcast java/util/concurrent/locks/Lock
    //   9: invokeinterface lock : ()V
    //   14: aconst_null
    //   15: pop
    //   16: aload_0
    //   17: getfield closed_QMARK_ : Ljava/lang/Object;
    //   20: dup
    //   21: ifnull -> 54
    //   24: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   27: if_acmpeq -> 55
    //   30: aconst_null
    //   31: getstatic clj_commons/byte_streams/pushback_stream/SynchronizedPushbackByteStream.const__9 : Lclojure/lang/Var;
    //   34: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   37: checkcast clojure/lang/IFn
    //   40: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   43: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   48: invokestatic create : (Ljava/lang/Object;Ljava/lang/Object;)Lclojure/lang/IPersistentVector;
    //   51: goto -> 239
    //   54: pop
    //   55: new clj_commons/byte_streams/pushback_stream/SynchronizedPushbackByteStream$fn__27069
    //   58: dup
    //   59: aload_0
    //   60: getfield consumers : Ljava/lang/Object;
    //   63: aload_1
    //   64: invokespecial <init> : (Ljava/lang/Object;Ljava/lang/Object;)V
    //   67: checkcast clojure/lang/IFn
    //   70: invokeinterface invoke : ()Ljava/lang/Object;
    //   75: aload_1
    //   76: checkcast java/nio/Buffer
    //   79: invokevirtual hasRemaining : ()Z
    //   82: ifeq -> 136
    //   85: aload_0
    //   86: getfield buffer : Ljava/lang/Object;
    //   89: checkcast java/util/LinkedList
    //   92: aload_1
    //   93: invokevirtual add : (Ljava/lang/Object;)Z
    //   96: ifeq -> 105
    //   99: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   102: goto -> 108
    //   105: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   108: pop
    //   109: aload_0
    //   110: aload_0
    //   111: getfield buffer_size : I
    //   114: i2l
    //   115: aload_1
    //   116: aconst_null
    //   117: astore_1
    //   118: checkcast java/nio/Buffer
    //   121: invokevirtual remaining : ()I
    //   124: i2l
    //   125: invokestatic add : (JJ)J
    //   128: l2i
    //   129: putfield buffer_size : I
    //   132: goto -> 138
    //   135: athrow
    //   136: aconst_null
    //   137: pop
    //   138: aload_0
    //   139: getfield deferred : Ljava/lang/Object;
    //   142: dup
    //   143: ifnull -> 159
    //   146: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   149: if_acmpeq -> 160
    //   152: aload_0
    //   153: getfield deferred : Ljava/lang/Object;
    //   156: goto -> 236
    //   159: pop
    //   160: aload_0
    //   161: getfield buffer_size : I
    //   164: i2l
    //   165: aload_0
    //   166: getfield buffer_capacity : J
    //   169: invokestatic lte : (JJ)Z
    //   172: ifeq -> 196
    //   175: getstatic clj_commons/byte_streams/pushback_stream/SynchronizedPushbackByteStream.const__9 : Lclojure/lang/Var;
    //   178: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   181: checkcast clojure/lang/IFn
    //   184: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   187: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   192: goto -> 236
    //   195: athrow
    //   196: getstatic clj_commons/byte_streams/pushback_stream/SynchronizedPushbackByteStream.const__11 : Lclojure/lang/Keyword;
    //   199: dup
    //   200: ifnull -> 234
    //   203: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   206: if_acmpeq -> 235
    //   209: aload_0
    //   210: getstatic clj_commons/byte_streams/pushback_stream/SynchronizedPushbackByteStream.const__12 : Lclojure/lang/Var;
    //   213: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   216: checkcast clojure/lang/IFn
    //   219: invokeinterface invoke : ()Ljava/lang/Object;
    //   224: putfield deferred : Ljava/lang/Object;
    //   227: aload_0
    //   228: getfield deferred : Ljava/lang/Object;
    //   231: goto -> 236
    //   234: pop
    //   235: aconst_null
    //   236: invokestatic create : (Ljava/lang/Object;Ljava/lang/Object;)Lclojure/lang/IPersistentVector;
    //   239: astore_3
    //   240: aload_2
    //   241: aconst_null
    //   242: astore_2
    //   243: checkcast java/util/concurrent/locks/Lock
    //   246: invokeinterface unlock : ()V
    //   251: aconst_null
    //   252: pop
    //   253: aload_3
    //   254: aconst_null
    //   255: astore_3
    //   256: astore_2
    //   257: aload_2
    //   258: lconst_0
    //   259: invokestatic uncheckedIntCast : (J)I
    //   262: aconst_null
    //   263: invokestatic nth : (Ljava/lang/Object;ILjava/lang/Object;)Ljava/lang/Object;
    //   266: astore_3
    //   267: aload_2
    //   268: aconst_null
    //   269: astore_2
    //   270: lconst_1
    //   271: invokestatic uncheckedIntCast : (J)I
    //   274: aconst_null
    //   275: invokestatic nth : (Ljava/lang/Object;ILjava/lang/Object;)Ljava/lang/Object;
    //   278: astore #4
    //   280: aload_3
    //   281: dup
    //   282: ifnull -> 368
    //   285: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   288: if_acmpeq -> 369
    //   291: aload_3
    //   292: aconst_null
    //   293: astore_3
    //   294: astore #5
    //   296: aload #5
    //   298: aconst_null
    //   299: astore #5
    //   301: checkcast java/lang/Iterable
    //   304: invokeinterface iterator : ()Ljava/util/Iterator;
    //   309: astore #6
    //   311: aload #6
    //   313: checkcast java/util/Iterator
    //   316: invokeinterface hasNext : ()Z
    //   321: ifeq -> 363
    //   324: aload #6
    //   326: checkcast java/util/Iterator
    //   329: invokeinterface next : ()Ljava/lang/Object;
    //   334: astore #7
    //   336: getstatic clj_commons/byte_streams/pushback_stream/SynchronizedPushbackByteStream.const__14 : Lclojure/lang/Var;
    //   339: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   342: checkcast clojure/lang/IFn
    //   345: aload #7
    //   347: aconst_null
    //   348: astore #7
    //   350: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   355: pop
    //   356: goto -> 311
    //   359: nop
    //   360: nop
    //   361: athrow
    //   362: athrow
    //   363: aconst_null
    //   364: pop
    //   365: goto -> 371
    //   368: pop
    //   369: aconst_null
    //   370: pop
    //   371: aload #4
    //   373: aconst_null
    //   374: astore #4
    //   376: areturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #90	-> 0
    //   #125	-> 9
    //   #129	-> 16
    //   #131	-> 37
    //   #131	-> 43
    //   #133	-> 67
    //   #133	-> 70
    //   #143	-> 75
    //   #143	-> 79
    //   #144	-> 93
    //   #145	-> 121
    //   #145	-> 125
    //   #145	-> 128
    //   #147	-> 138
    //   #147	-> 160
    //   #152	-> 169
    //   #153	-> 181
    //   #153	-> 187
    //   #147	-> 196
    //   #156	-> 216
    //   #156	-> 219
    //   #125	-> 246
    //   #124	-> 263
    //   #124	-> 275
    //   #158	-> 280
    //   #159	-> 304
    //   #159	-> 311
    //   #159	-> 316
    //   #159	-> 329
    //   #160	-> 342
    //   #160	-> 350
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   240	16	3	x__14926__auto__27096	Ljava/lang/Object;
    //   5	251	2	lock__14925__auto__27097	Ljava/lang/Object;
    //   336	20	7	c	Ljava/lang/Object;
    //   296	69	5	iterable27073	Ljava/lang/Object;
    //   311	54	6	it__26485__auto__27098	Ljava/lang/Object;
    //   257	119	2	vec__27066	Ljava/lang/Object;
    //   267	109	3	consumers	Ljava/lang/Object;
    //   280	96	4	d	Ljava/lang/Object;
    //   0	376	0	this	Lclj_commons/byte_streams/pushback_stream/SynchronizedPushbackByteStream;
    //   0	376	1	buf	Ljava/nio/ByteBuffer; }
  
  public long skip(long n) { this = null;
    return ((Number)((IFn)const__3.getRawRoot()).invoke(((PushbackStream)this).take((byte[])Numbers.byte_array(Numbers.num(n)), RT.uncheckedIntCast(0L), RT.uncheckedIntCast(n), ((Boolean)Boolean.TRUE).booleanValue()))).longValue(); }
  
  public int read(byte[] ary, int offset, int length) throws IOException {
    ary = null;
    long n = RT.longCast(((IFn)const__3.getRawRoot()).invoke(((PushbackStream)this).take((byte[])ary, offset, length, ((Boolean)Boolean.TRUE).booleanValue())));
    return RT.intCast((n == 0L) ? -1L : n);
  }
  
  public int read() throws IOException {
    byte[] arrayOfByte = Numbers.byte_array(const__1);
    long len = RT.longCast(((IFn)const__3.getRawRoot()).invoke(((PushbackStream)this).take((byte[])arrayOfByte, RT.uncheckedIntCast(0L), RT.uncheckedIntCast(1L), ((Boolean)Boolean.TRUE).booleanValue())));
    arrayOfByte = null;
    return RT.intCast((len == 0L) ? -1L : Primitives.bitAnd(255L, RT.uncheckedLongCast((Number)RT.get(arrayOfByte, const__4))));
  }
  
  public int available() throws IOException { return this.buffer_size; }
}
