package clj_commons.byte_streams.pushback_stream;

import clj_commons.byte_streams.InputStream;
import clj_commons.primitive_math.Primitives;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.IPersistentVector;
import clojure.lang.IType;
import clojure.lang.Keyword;
import clojure.lang.Numbers;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Var;
import java.io.IOException;
import java.nio.Buffer;
import java.nio.ByteBuffer;
import java.util.Iterator;
import java.util.LinkedList;

public final class PushbackByteStream implements PushbackStream, InputStream.Streamable, IType {
  public final Object lock;
  
  public final Object consumers;
  
  public final long buffer_capacity;
  
  int buffer_size;
  
  Object deferred;
  
  Object closed_QMARK_;
  
  public final Object buffer;
  
  public static final Object const__1 = Long.valueOf(1L);
  
  public static final Var const__3 = (Var)RT.var("clojure.core", "deref");
  
  public static final Object const__4 = Long.valueOf(0L);
  
  public static final Var const__9 = (Var)RT.var("manifold.deferred", "success-deferred");
  
  public static final Keyword const__11 = (Keyword)RT.keyword(null, "else");
  
  public static final Var const__12 = (Var)RT.var("manifold.deferred", "deferred"), const__14 = (Var)RT.var("clj-commons.byte-streams.pushback-stream", "trigger"), const__16 = (Var)RT.var("clj-commons.byte-streams.pushback-stream", "put"), const__18 = (Var)RT.var("clojure.core", "not"), const__19 = (Var)RT.var("manifold.deferred", "success!");
  
  public PushbackByteStream(Object paramObject1, Object paramObject2, long paramLong, int paramInt, Object paramObject3, Object paramObject4, Object paramObject5) { this.lock = paramObject1;
    this.consumers = paramObject2;
    this.buffer_capacity = paramLong;
    this.buffer_size = paramInt;
    this.deferred = paramObject3;
    this.closed_QMARK_ = paramObject4;
    this.buffer = paramObject5; }
  
  public static IPersistentVector getBasis() { return RT.vector(new Object[] { Symbol.intern(null, "lock"), ((IObj)Symbol.intern(null, "consumers")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "LinkedList") })), ((IObj)Symbol.intern(null, "buffer-capacity")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "long") })), ((IObj)Symbol.intern(null, "buffer-size")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "int"), RT.keyword(null, "unsynchronized-mutable"), Boolean.TRUE })), ((IObj)Symbol.intern(null, "deferred")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "unsynchronized-mutable"), Boolean.TRUE })), ((IObj)Symbol.intern(null, "closed?")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "unsynchronized-mutable"), Boolean.TRUE })), ((IObj)Symbol.intern(null, "buffer")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "LinkedList") })) }); }
  
  public void close() { // Byte code:
    //   0: aload_0
    //   1: getfield closed_QMARK_ : Ljava/lang/Object;
    //   4: dup
    //   5: ifnull -> 18
    //   8: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   11: if_acmpeq -> 19
    //   14: aconst_null
    //   15: goto -> 29
    //   18: pop
    //   19: aload_0
    //   20: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   23: putfield closed_QMARK_ : Ljava/lang/Object;
    //   26: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   29: dup
    //   30: ifnull -> 121
    //   33: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   36: if_acmpeq -> 122
    //   39: aload_0
    //   40: getfield consumers : Ljava/lang/Object;
    //   43: checkcast java/util/LinkedList
    //   46: invokevirtual poll : ()Ljava/lang/Object;
    //   49: astore_1
    //   50: aload_1
    //   51: dup
    //   52: ifnull -> 115
    //   55: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   58: if_acmpeq -> 116
    //   61: aload_1
    //   62: aconst_null
    //   63: astore_1
    //   64: astore_2
    //   65: aload_2
    //   66: checkcast clj_commons/byte_streams/pushback_stream/Consumption
    //   69: getfield buf : Ljava/lang/Object;
    //   72: astore_3
    //   73: getstatic clj_commons/byte_streams/pushback_stream/PushbackByteStream.const__19 : Lclojure/lang/Var;
    //   76: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   79: checkcast clojure/lang/IFn
    //   82: aload_2
    //   83: aconst_null
    //   84: astore_2
    //   85: checkcast clj_commons/byte_streams/pushback_stream/Consumption
    //   88: getfield deferred : Ljava/lang/Object;
    //   91: aload_3
    //   92: aconst_null
    //   93: astore_3
    //   94: checkcast java/nio/Buffer
    //   97: invokevirtual position : ()I
    //   100: invokestatic valueOf : (I)Ljava/lang/Integer;
    //   103: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   108: pop
    //   109: goto -> 39
    //   112: nop
    //   113: nop
    //   114: athrow
    //   115: pop
    //   116: aconst_null
    //   117: pop
    //   118: goto -> 124
    //   121: pop
    //   122: aconst_null
    //   123: pop
    //   124: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   127: pop
    //   128: return
    // Line number table:
    //   Java source line number -> byte code offset
    //   #90	-> 0
    //   #242	-> 0
    //   #245	-> 0
    //   #249	-> 46
    //   #249	-> 50
    //   #250	-> 66
    //   #251	-> 79
    //   #251	-> 85
    //   #251	-> 97
    //   #251	-> 103
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   73	36	3	buf	Ljava/lang/Object;
    //   65	47	2	c	Ljava/lang/Object;
    //   50	68	1	temp__5735__auto__27054	Ljava/lang/Object;
    //   0	128	0	this	Lclj_commons/byte_streams/pushback_stream/PushbackByteStream; }
  
  public Object take(byte[] ary, int offset, int length, boolean eager_QMARK_) { // Byte code:
    //   0: aload_1
    //   1: aconst_null
    //   2: astore_1
    //   3: checkcast [B
    //   6: invokestatic wrap : ([B)Ljava/nio/ByteBuffer;
    //   9: checkcast java/nio/Buffer
    //   12: iload_2
    //   13: invokevirtual position : (I)Ljava/nio/Buffer;
    //   16: checkcast java/nio/Buffer
    //   19: iload_2
    //   20: i2l
    //   21: iload_3
    //   22: i2l
    //   23: ladd
    //   24: invokestatic uncheckedIntCast : (J)I
    //   27: invokevirtual limit : (I)Ljava/nio/Buffer;
    //   30: checkcast java/nio/ByteBuffer
    //   33: invokevirtual slice : ()Ljava/nio/ByteBuffer;
    //   36: astore #5
    //   38: aload_0
    //   39: getfield buffer : Ljava/lang/Object;
    //   42: checkcast java/util/LinkedList
    //   45: invokevirtual peek : ()Ljava/lang/Object;
    //   48: astore #6
    //   50: aload #6
    //   52: dup
    //   53: ifnull -> 142
    //   56: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   59: if_acmpeq -> 143
    //   62: aload #6
    //   64: aconst_null
    //   65: astore #6
    //   67: astore #7
    //   69: getstatic clj_commons/byte_streams/pushback_stream/PushbackByteStream.const__16 : Lclojure/lang/Var;
    //   72: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   75: checkcast clojure/lang/IFn
    //   78: aload #7
    //   80: aload #5
    //   82: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   87: pop
    //   88: aload #7
    //   90: aconst_null
    //   91: astore #7
    //   93: checkcast java/nio/Buffer
    //   96: invokevirtual hasRemaining : ()Z
    //   99: ifeq -> 108
    //   102: aconst_null
    //   103: pop
    //   104: goto -> 119
    //   107: athrow
    //   108: aload_0
    //   109: getfield buffer : Ljava/lang/Object;
    //   112: checkcast java/util/LinkedList
    //   115: invokevirtual remove : ()Ljava/lang/Object;
    //   118: pop
    //   119: aload #5
    //   121: checkcast java/nio/Buffer
    //   124: invokevirtual hasRemaining : ()Z
    //   127: ifeq -> 137
    //   130: goto -> 38
    //   133: nop
    //   134: nop
    //   135: athrow
    //   136: athrow
    //   137: aconst_null
    //   138: pop
    //   139: goto -> 145
    //   142: pop
    //   143: aconst_null
    //   144: pop
    //   145: aload_0
    //   146: aload_0
    //   147: getfield buffer_size : I
    //   150: i2l
    //   151: aload #5
    //   153: checkcast java/nio/Buffer
    //   156: invokevirtual position : ()I
    //   159: i2l
    //   160: invokestatic subtract : (JJ)J
    //   163: l2i
    //   164: putfield buffer_size : I
    //   167: aload_0
    //   168: getfield buffer_size : I
    //   171: i2l
    //   172: aload_0
    //   173: getfield buffer_capacity : J
    //   176: invokestatic lte : (JJ)Z
    //   179: istore #6
    //   181: iload #6
    //   183: ifeq -> 194
    //   186: aload_0
    //   187: getfield deferred : Ljava/lang/Object;
    //   190: goto -> 208
    //   193: athrow
    //   194: iload #6
    //   196: ifeq -> 205
    //   199: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   202: goto -> 208
    //   205: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   208: dup
    //   209: ifnull -> 237
    //   212: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   215: if_acmpeq -> 238
    //   218: aload_0
    //   219: getfield deferred : Ljava/lang/Object;
    //   222: astore #6
    //   224: aload_0
    //   225: aconst_null
    //   226: putfield deferred : Ljava/lang/Object;
    //   229: aload #6
    //   231: aconst_null
    //   232: astore #6
    //   234: goto -> 239
    //   237: pop
    //   238: aconst_null
    //   239: aload_0
    //   240: getfield closed_QMARK_ : Ljava/lang/Object;
    //   243: astore #6
    //   245: aload #6
    //   247: dup
    //   248: ifnull -> 265
    //   251: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   254: if_acmpeq -> 266
    //   257: aload #6
    //   259: aconst_null
    //   260: astore #6
    //   262: goto -> 364
    //   265: pop
    //   266: aload #5
    //   268: checkcast java/nio/Buffer
    //   271: invokevirtual position : ()I
    //   274: i2l
    //   275: invokestatic isPos : (J)Z
    //   278: istore #7
    //   280: iload #7
    //   282: ifeq -> 350
    //   285: iload #4
    //   287: istore #8
    //   289: iload #8
    //   291: ifeq -> 312
    //   294: iload #8
    //   296: ifeq -> 305
    //   299: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   302: goto -> 308
    //   305: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   308: goto -> 346
    //   311: athrow
    //   312: getstatic clj_commons/byte_streams/pushback_stream/PushbackByteStream.const__18 : Lclojure/lang/Var;
    //   315: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   318: checkcast clojure/lang/IFn
    //   321: aload #5
    //   323: checkcast java/nio/Buffer
    //   326: invokevirtual hasRemaining : ()Z
    //   329: ifeq -> 338
    //   332: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   335: goto -> 341
    //   338: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   341: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   346: goto -> 364
    //   349: athrow
    //   350: iload #7
    //   352: ifeq -> 361
    //   355: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   358: goto -> 364
    //   361: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   364: dup
    //   365: ifnull -> 405
    //   368: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   371: if_acmpeq -> 406
    //   374: getstatic clj_commons/byte_streams/pushback_stream/PushbackByteStream.const__9 : Lclojure/lang/Var;
    //   377: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   380: checkcast clojure/lang/IFn
    //   383: aload #5
    //   385: aconst_null
    //   386: astore #5
    //   388: checkcast java/nio/Buffer
    //   391: invokevirtual position : ()I
    //   394: invokestatic valueOf : (I)Ljava/lang/Integer;
    //   397: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   402: goto -> 466
    //   405: pop
    //   406: getstatic clj_commons/byte_streams/pushback_stream/PushbackByteStream.const__12 : Lclojure/lang/Var;
    //   409: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   412: checkcast clojure/lang/IFn
    //   415: invokeinterface invoke : ()Ljava/lang/Object;
    //   420: astore #6
    //   422: aload_0
    //   423: getfield consumers : Ljava/lang/Object;
    //   426: checkcast java/util/LinkedList
    //   429: new clj_commons/byte_streams/pushback_stream/Consumption
    //   432: dup
    //   433: aload #5
    //   435: aconst_null
    //   436: astore #5
    //   438: aload #6
    //   440: iload #4
    //   442: invokespecial <init> : (Ljava/lang/Object;Ljava/lang/Object;Z)V
    //   445: invokevirtual add : (Ljava/lang/Object;)Z
    //   448: ifeq -> 457
    //   451: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   454: goto -> 460
    //   457: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   460: pop
    //   461: aload #6
    //   463: aconst_null
    //   464: astore #6
    //   466: invokestatic create : (Ljava/lang/Object;Ljava/lang/Object;)Lclojure/lang/IPersistentVector;
    //   469: astore #6
    //   471: aload #6
    //   473: lconst_0
    //   474: invokestatic uncheckedIntCast : (J)I
    //   477: aconst_null
    //   478: invokestatic nth : (Ljava/lang/Object;ILjava/lang/Object;)Ljava/lang/Object;
    //   481: astore #7
    //   483: aload #6
    //   485: aconst_null
    //   486: astore #6
    //   488: lconst_1
    //   489: invokestatic uncheckedIntCast : (J)I
    //   492: aconst_null
    //   493: invokestatic nth : (Ljava/lang/Object;ILjava/lang/Object;)Ljava/lang/Object;
    //   496: astore #8
    //   498: aload #7
    //   500: dup
    //   501: ifnull -> 536
    //   504: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   507: if_acmpeq -> 537
    //   510: getstatic clj_commons/byte_streams/pushback_stream/PushbackByteStream.const__19 : Lclojure/lang/Var;
    //   513: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   516: checkcast clojure/lang/IFn
    //   519: aload #7
    //   521: aconst_null
    //   522: astore #7
    //   524: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   527: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   532: pop
    //   533: goto -> 539
    //   536: pop
    //   537: aconst_null
    //   538: pop
    //   539: aload #8
    //   541: aconst_null
    //   542: astore #8
    //   544: areturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #90	-> 0
    //   #202	-> 6
    //   #203	-> 13
    //   #204	-> 23
    //   #204	-> 27
    //   #202	-> 33
    //   #214	-> 45
    //   #214	-> 50
    //   #215	-> 75
    //   #215	-> 82
    //   #216	-> 88
    //   #216	-> 96
    //   #217	-> 115
    //   #218	-> 119
    //   #218	-> 124
    //   #221	-> 156
    //   #221	-> 160
    //   #221	-> 163
    //   #223	-> 167
    //   #223	-> 176
    //   #223	-> 181
    //   #228	-> 239
    //   #228	-> 245
    //   #229	-> 271
    //   #229	-> 275
    //   #229	-> 280
    //   #230	-> 289
    //   #230	-> 318
    //   #230	-> 326
    //   #230	-> 341
    //   #231	-> 380
    //   #231	-> 391
    //   #231	-> 397
    //   #232	-> 412
    //   #232	-> 415
    //   #233	-> 445
    //   #202	-> 478
    //   #202	-> 493
    //   #236	-> 498
    //   #237	-> 516
    //   #237	-> 527
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   69	70	7	in	Ljava/lang/Object;
    //   50	95	6	temp__5735__auto__27055	Ljava/lang/Object;
    //   181	27	6	and__5514__auto__27056	Z
    //   224	10	6	d	Ljava/lang/Object;
    //   289	57	8	or__5516__auto__27057	Z
    //   280	84	7	and__5514__auto__27058	Z
    //   245	119	6	or__5516__auto__27059	Ljava/lang/Object;
    //   422	44	6	d	Ljava/lang/Object;
    //   38	506	5	out	Ljava/lang/Object;
    //   471	73	6	vec__27050	Ljava/lang/Object;
    //   483	61	7	put	Ljava/lang/Object;
    //   498	46	8	take	Ljava/lang/Object;
    //   0	544	0	this	Lclj_commons/byte_streams/pushback_stream/PushbackByteStream;
    //   0	544	1	ary	[B
    //   0	544	2	offset	I
    //   0	544	3	length	I
    //   0	544	4	eager_QMARK_	Z }
  
  public Object pushback(byte[] ary, int offset, int length) {
    ary = null;
    return ((PushbackStream)this).pushback(
        (ByteBuffer)((Buffer)((Buffer)ByteBuffer.wrap((byte[])ary))
        .position(offset))
        .limit(RT.uncheckedIntCast(offset + length)));
  }
  
  public Object pushback(ByteBuffer buf) {
    Object consumers = ((IFn)new fn__27045(buf, this.consumers)).invoke();
    if (((Buffer)buf).hasRemaining()) {
      ((LinkedList)this.buffer).addLast(buf);
      null;
      buf = null;
      this.buffer_size = (int)Primitives.add(this.buffer_size, ((Buffer)buf).remaining());
    } else {
      null;
    } 
    Object consumers = consumers = null, iterable27049 = consumers = null;
    iterable27049 = null;
    for (Object it__26485__auto__27060 = ((Iterable)iterable27049).iterator(); ((Iterator)it__26485__auto__27060).hasNext(); ) {
      Object c = ((Iterator)it__26485__auto__27060).next();
      c = null;
      ((IFn)const__14.getRawRoot()).invoke(c);
    } 
    return null;
  }
  
  public Object put(byte[] ary, int offset, int length) {
    ary = null;
    return ((PushbackStream)this).put((ByteBuffer)((Buffer)((Buffer)ByteBuffer.wrap((byte[])ary)).position(offset)).limit(RT.uncheckedIntCast(offset + length)));
  }
  
  public Object put(ByteBuffer buf) { // Byte code:
    //   0: aload_0
    //   1: getfield closed_QMARK_ : Ljava/lang/Object;
    //   4: dup
    //   5: ifnull -> 38
    //   8: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   11: if_acmpeq -> 39
    //   14: aconst_null
    //   15: getstatic clj_commons/byte_streams/pushback_stream/PushbackByteStream.const__9 : Lclojure/lang/Var;
    //   18: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   21: checkcast clojure/lang/IFn
    //   24: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   27: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   32: invokestatic create : (Ljava/lang/Object;Ljava/lang/Object;)Lclojure/lang/IPersistentVector;
    //   35: goto -> 223
    //   38: pop
    //   39: new clj_commons/byte_streams/pushback_stream/PushbackByteStream$fn__27040
    //   42: dup
    //   43: aload_1
    //   44: aload_0
    //   45: getfield consumers : Ljava/lang/Object;
    //   48: invokespecial <init> : (Ljava/lang/Object;Ljava/lang/Object;)V
    //   51: checkcast clojure/lang/IFn
    //   54: invokeinterface invoke : ()Ljava/lang/Object;
    //   59: aload_1
    //   60: checkcast java/nio/Buffer
    //   63: invokevirtual hasRemaining : ()Z
    //   66: ifeq -> 120
    //   69: aload_0
    //   70: getfield buffer : Ljava/lang/Object;
    //   73: checkcast java/util/LinkedList
    //   76: aload_1
    //   77: invokevirtual add : (Ljava/lang/Object;)Z
    //   80: ifeq -> 89
    //   83: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   86: goto -> 92
    //   89: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   92: pop
    //   93: aload_0
    //   94: aload_0
    //   95: getfield buffer_size : I
    //   98: i2l
    //   99: aload_1
    //   100: aconst_null
    //   101: astore_1
    //   102: checkcast java/nio/Buffer
    //   105: invokevirtual remaining : ()I
    //   108: i2l
    //   109: invokestatic add : (JJ)J
    //   112: l2i
    //   113: putfield buffer_size : I
    //   116: goto -> 122
    //   119: athrow
    //   120: aconst_null
    //   121: pop
    //   122: aload_0
    //   123: getfield deferred : Ljava/lang/Object;
    //   126: dup
    //   127: ifnull -> 143
    //   130: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   133: if_acmpeq -> 144
    //   136: aload_0
    //   137: getfield deferred : Ljava/lang/Object;
    //   140: goto -> 220
    //   143: pop
    //   144: aload_0
    //   145: getfield buffer_size : I
    //   148: i2l
    //   149: aload_0
    //   150: getfield buffer_capacity : J
    //   153: invokestatic lte : (JJ)Z
    //   156: ifeq -> 180
    //   159: getstatic clj_commons/byte_streams/pushback_stream/PushbackByteStream.const__9 : Lclojure/lang/Var;
    //   162: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   165: checkcast clojure/lang/IFn
    //   168: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   171: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   176: goto -> 220
    //   179: athrow
    //   180: getstatic clj_commons/byte_streams/pushback_stream/PushbackByteStream.const__11 : Lclojure/lang/Keyword;
    //   183: dup
    //   184: ifnull -> 218
    //   187: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   190: if_acmpeq -> 219
    //   193: aload_0
    //   194: getstatic clj_commons/byte_streams/pushback_stream/PushbackByteStream.const__12 : Lclojure/lang/Var;
    //   197: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   200: checkcast clojure/lang/IFn
    //   203: invokeinterface invoke : ()Ljava/lang/Object;
    //   208: putfield deferred : Ljava/lang/Object;
    //   211: aload_0
    //   212: getfield deferred : Ljava/lang/Object;
    //   215: goto -> 220
    //   218: pop
    //   219: aconst_null
    //   220: invokestatic create : (Ljava/lang/Object;Ljava/lang/Object;)Lclojure/lang/IPersistentVector;
    //   223: astore_2
    //   224: aload_2
    //   225: lconst_0
    //   226: invokestatic uncheckedIntCast : (J)I
    //   229: aconst_null
    //   230: invokestatic nth : (Ljava/lang/Object;ILjava/lang/Object;)Ljava/lang/Object;
    //   233: astore_3
    //   234: aload_2
    //   235: aconst_null
    //   236: astore_2
    //   237: lconst_1
    //   238: invokestatic uncheckedIntCast : (J)I
    //   241: aconst_null
    //   242: invokestatic nth : (Ljava/lang/Object;ILjava/lang/Object;)Ljava/lang/Object;
    //   245: astore #4
    //   247: aload_3
    //   248: dup
    //   249: ifnull -> 335
    //   252: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   255: if_acmpeq -> 336
    //   258: aload_3
    //   259: aconst_null
    //   260: astore_3
    //   261: astore #5
    //   263: aload #5
    //   265: aconst_null
    //   266: astore #5
    //   268: checkcast java/lang/Iterable
    //   271: invokeinterface iterator : ()Ljava/util/Iterator;
    //   276: astore #6
    //   278: aload #6
    //   280: checkcast java/util/Iterator
    //   283: invokeinterface hasNext : ()Z
    //   288: ifeq -> 330
    //   291: aload #6
    //   293: checkcast java/util/Iterator
    //   296: invokeinterface next : ()Ljava/lang/Object;
    //   301: astore #7
    //   303: getstatic clj_commons/byte_streams/pushback_stream/PushbackByteStream.const__14 : Lclojure/lang/Var;
    //   306: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   309: checkcast clojure/lang/IFn
    //   312: aload #7
    //   314: aconst_null
    //   315: astore #7
    //   317: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   322: pop
    //   323: goto -> 278
    //   326: nop
    //   327: nop
    //   328: athrow
    //   329: athrow
    //   330: aconst_null
    //   331: pop
    //   332: goto -> 338
    //   335: pop
    //   336: aconst_null
    //   337: pop
    //   338: aload #4
    //   340: aconst_null
    //   341: astore #4
    //   343: areturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #90	-> 0
    //   #129	-> 0
    //   #131	-> 21
    //   #131	-> 27
    //   #133	-> 51
    //   #133	-> 54
    //   #143	-> 59
    //   #143	-> 63
    //   #144	-> 77
    //   #145	-> 105
    //   #145	-> 109
    //   #145	-> 112
    //   #147	-> 122
    //   #147	-> 144
    //   #152	-> 153
    //   #153	-> 165
    //   #153	-> 171
    //   #147	-> 180
    //   #156	-> 200
    //   #156	-> 203
    //   #124	-> 230
    //   #124	-> 242
    //   #158	-> 247
    //   #159	-> 271
    //   #159	-> 278
    //   #159	-> 283
    //   #159	-> 296
    //   #160	-> 309
    //   #160	-> 317
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   303	20	7	c	Ljava/lang/Object;
    //   263	69	5	iterable27044	Ljava/lang/Object;
    //   278	54	6	it__26485__auto__27061	Ljava/lang/Object;
    //   224	119	2	vec__27037	Ljava/lang/Object;
    //   234	109	3	consumers	Ljava/lang/Object;
    //   247	96	4	d	Ljava/lang/Object;
    //   0	343	0	this	Lclj_commons/byte_streams/pushback_stream/PushbackByteStream;
    //   0	343	1	buf	Ljava/nio/ByteBuffer; }
  
  public long skip(long n) { this = null;
    return ((Number)((IFn)const__3.getRawRoot()).invoke(((PushbackStream)this).take((byte[])Numbers.byte_array(Numbers.num(n)), RT.uncheckedIntCast(0L), RT.uncheckedIntCast(n), ((Boolean)Boolean.TRUE).booleanValue()))).longValue(); }
  
  public int read(byte[] ary, int offset, int length) throws IOException {
    ary = null;
    long n = RT.longCast(((IFn)const__3.getRawRoot()).invoke(((PushbackStream)this).take((byte[])ary, offset, length, ((Boolean)Boolean.TRUE).booleanValue())));
    return RT.intCast((n == 0L) ? -1L : n);
  }
  
  public int read() throws IOException {
    byte[] arrayOfByte = Numbers.byte_array(const__1);
    long len = RT.longCast(((IFn)const__3.getRawRoot()).invoke(((PushbackStream)this).take((byte[])arrayOfByte, RT.uncheckedIntCast(0L), RT.uncheckedIntCast(1L), ((Boolean)Boolean.TRUE).booleanValue())));
    arrayOfByte = null;
    return RT.intCast((len == 0L) ? -1L : Primitives.bitAnd(255L, RT.uncheckedLongCast((Number)RT.get(arrayOfByte, const__4))));
  }
  
  public int available() throws IOException { return this.buffer_size; }
}
