package clj_commons;

import clj_commons.byte_streams.Utils;
import clj_commons.byte_streams.graph.Type;
import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class byte_streams__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__11;
  
  public static final Var const__12;
  
  public static final Var const__14;
  
  public static final AFn const__18;
  
  public static final Var const__19;
  
  public static final AFn const__22;
  
  public static final Var const__23;
  
  public static final AFn const__26;
  
  public static final Var const__27;
  
  public static final AFn const__31;
  
  public static final Var const__32;
  
  public static final AFn const__35;
  
  public static final Var const__36;
  
  public static final AFn const__39;
  
  public static final Var const__40;
  
  public static final AFn const__43;
  
  public static final Var const__44;
  
  public static final AFn const__47;
  
  public static final Var const__48;
  
  public static final AFn const__50;
  
  public static final Var const__51;
  
  public static final Var const__52;
  
  public static final AFn const__55;
  
  public static final Var const__56;
  
  public static final AFn const__58;
  
  public static final Var const__59;
  
  public static final AFn const__61;
  
  public static final Var const__62;
  
  public static final AFn const__65;
  
  public static final AFn const__68;
  
  public static final Var const__69;
  
  public static final AFn const__72;
  
  public static final Var const__73;
  
  public static final AFn const__76;
  
  public static final Var const__77;
  
  public static final AFn const__79;
  
  public static final Var const__80;
  
  public static final AFn const__83;
  
  public static final Var const__84;
  
  public static final AFn const__86;
  
  public static final AFn const__89;
  
  public static final Var const__90;
  
  public static final AFn const__93;
  
  public static final Object const__94;
  
  public static final Object const__95;
  
  public static final Object const__96;
  
  public static final Object const__102;
  
  public static final Object const__103;
  
  public static final Var const__104;
  
  public static final Var const__105;
  
  public static final Var const__106;
  
  public static final AFn const__109;
  
  public static final AFn const__112;
  
  public static final AFn const__115;
  
  public static final Var const__116;
  
  public static final Var const__117;
  
  public static final Keyword const__118;
  
  public static final Var const__119;
  
  public static final Keyword const__120;
  
  public static final Var const__121;
  
  public static final AFn const__124;
  
  public static final Var const__125;
  
  public static final AFn const__129;
  
  public static final Var const__130;
  
  public static final AFn const__133;
  
  public static final Var const__134;
  
  public static final AFn const__137;
  
  public static final Var const__138;
  
  public static final AFn const__141;
  
  public static final Var const__142;
  
  public static final AFn const__145;
  
  public static final Var const__146;
  
  public static final AFn const__150;
  
  public static final Var const__151;
  
  public static final AFn const__154;
  
  public static final Var const__155;
  
  public static final AFn const__158;
  
  public static final Var const__159;
  
  public static final AFn const__162;
  
  public static final Var const__163;
  
  public static final AFn const__166;
  
  public static final Var const__167;
  
  public static final AFn const__170;
  
  public static final Var const__171;
  
  public static final AFn const__174;
  
  public static final Var const__175;
  
  public static final AFn const__178;
  
  public static final Var const__179;
  
  public static final AFn const__182;
  
  public static final Var const__183;
  
  public static final AFn const__186;
  
  public static final Var const__187;
  
  public static final AFn const__190;
  
  public static final Var const__191;
  
  public static final AFn const__194;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new byte_streams.fn__27186());
    const__3.setMeta((IPersistentMap)const__11);
    const__3
      
      .bindRoot(((IFn)const__12.getRawRoot()).invoke(Utils.byteArray(RT.intCast(0L))));
    const__14.setMeta((IPersistentMap)const__18);
    const__14.bindRoot(new byte_streams.seq_of());
    const__19.setMeta((IPersistentMap)const__22);
    const__19.bindRoot(new byte_streams.stream_of());
    const__23.setMeta((IPersistentMap)const__26);
    const__23.bindRoot(new byte_streams.vector_of());
    const__27.setMeta((IPersistentMap)const__31);
    const__27.bindRoot(new byte_streams.type_descriptor());
    const__32.setMeta((IPersistentMap)const__35);
    const__32.bindRoot(new byte_streams.normalize_type_descriptor());
    const__36.setMeta((IPersistentMap)const__39);
    const__36.bindRoot(new byte_streams.tag_metadata_for());
    const__40.setMeta((IPersistentMap)const__43);
    const__40.bindRoot(new byte_streams.def_conversion());
    ((Var)const__40)



















































      
      .setMacro();
    const__44.setMeta((IPersistentMap)const__47);
    const__44.bindRoot(new byte_streams.def_transfer());
    ((Var)const__44)
















      
      .setMacro();
    const__48.setMeta((IPersistentMap)const__50);
    const__48














      
      .bindRoot(((IFn)const__51.getRawRoot()).invoke(new byte_streams.fn__27220()));
    const__52.setMeta((IPersistentMap)const__55);
    const__56.setMeta((IPersistentMap)const__58);
    const__56





      
      .bindRoot(((IFn)const__51.getRawRoot()).invoke(new byte_streams.fn__27222()));
    const__59.setMeta((IPersistentMap)const__61);
    const__59



      
      .bindRoot(((IFn)const__51.getRawRoot()).invoke(new byte_streams.fn__27224()));
    const__62.setMeta((IPersistentMap)const__65);
    const__62.bindRoot(new byte_streams.conversion_path());
    const__52.setMeta((IPersistentMap)const__68);
    const__52.bindRoot(new byte_streams.convert());
    const__69.setMeta((IPersistentMap)const__72);
    const__69.bindRoot(new byte_streams.possible_conversions());
    const__73.setMeta((IPersistentMap)const__76);
    const__73.bindRoot(new byte_streams.default_transfer());
    const__77.setMeta((IPersistentMap)const__79);
    const__77


















      
      .bindRoot(((IFn)const__51.getRawRoot()).invoke(new byte_streams.this__27246()));
    const__80.setMeta((IPersistentMap)const__83);
    const__80.bindRoot(new byte_streams.transfer());
    const__84.setMeta((IPersistentMap)const__86);
    const__84.bindRoot(((IObj)new byte_streams.reify__27278(null)).withMeta((IPersistentMap)const__89));
    const__90.setMeta((IPersistentMap)const__93);
    const__90.bindRoot(new byte_streams.optimized_transfer_QMARK_());
    const__121.setMeta((IPersistentMap)const__124);
    const__121.bindRoot(new byte_streams.print_bytes());
    const__125.setMeta((IPersistentMap)const__129);
    const__125.bindRoot(new byte_streams.to_byte_buffer());
    const__130.setMeta((IPersistentMap)const__133);
    const__130.bindRoot(new byte_streams.to_byte_buffers());
    const__134.setMeta((IPersistentMap)const__137);
    const__134.bindRoot(new byte_streams.to_byte_array());
    const__138.setMeta((IPersistentMap)const__141);
    const__138.bindRoot(new byte_streams.to_byte_arrays());
    const__142.setMeta((IPersistentMap)const__145);
    const__142.bindRoot(new byte_streams.to_input_stream());
    const__146.setMeta((IPersistentMap)const__150);
    const__146.bindRoot(new byte_streams.to_data_input_stream());
    const__151.setMeta((IPersistentMap)const__154);
    const__151.bindRoot(new byte_streams.to_output_stream());
    const__155.setMeta((IPersistentMap)const__158);
    const__155.bindRoot(new byte_streams.to_char_sequence());
    const__159.setMeta((IPersistentMap)const__162);
    const__159.bindRoot(new byte_streams.to_readable_channel());
    const__163.setMeta((IPersistentMap)const__166);
    const__163.bindRoot(new byte_streams.to_string());
    const__167.setMeta((IPersistentMap)const__170);
    const__167.bindRoot(new byte_streams.to_reader());
    const__171.setMeta((IPersistentMap)const__174);
    const__171.bindRoot(new byte_streams.to_line_seq());
    const__175.setMeta((IPersistentMap)const__178);
    const__175.bindRoot(new byte_streams.to_byte_source());
    const__179.setMeta((IPersistentMap)const__182);
    const__179.bindRoot(new byte_streams.to_byte_sink());
    const__183.setMeta((IPersistentMap)const__186);
    const__183.bindRoot(new byte_streams.cmp_bufs());
    const__187.setMeta((IPersistentMap)const__190);
    const__187.bindRoot(new byte_streams.compare_bytes());
    const__191.setMeta((IPersistentMap)const__194);
    const__191.bindRoot(new byte_streams.bytes_EQ_());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "clj-commons.byte-streams");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("clj-commons.byte-streams", "byte-array-type");
    const__11 = (AFn)RT.map(new Object[] { RT.keyword(null, "const"), Boolean.TRUE, RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(53), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_commons/byte_streams.clj" });
    const__12 = (Var)RT.var("clojure.core", "class");
    const__14 = (Var)RT.var("clj-commons.byte-streams", "seq-of");
    const__18 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(55), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_commons/byte_streams.clj" });
    const__19 = (Var)RT.var("clj-commons.byte-streams", "stream-of");
    const__22 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(58), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_commons/byte_streams.clj" });
    const__23 = (Var)RT.var("clj-commons.byte-streams", "vector-of");
    const__26 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(61), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_commons/byte_streams.clj" });
    const__27 = (Var)RT.var("clj-commons.byte-streams", "type-descriptor");
    const__31 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "doc"), "Returns a descriptor of the type of the given instance.", RT.keyword(null, "line"), Integer.valueOf(64), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_commons/byte_streams.clj" });
    const__32 = (Var)RT.var("clj-commons.byte-streams", "normalize-type-descriptor");
    const__35 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(87), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_commons/byte_streams.clj" });
    const__36 = (Var)RT.var("clj-commons.byte-streams", "tag-metadata-for");
    const__39 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "src")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Type") }))) })), RT.keyword(null, "line"), Integer.valueOf(98), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_commons/byte_streams.clj" });
    const__40 = (Var)RT.var("clj-commons.byte-streams", "def-conversion");
    const__43 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Tuple.create(Symbol.intern(null, "src"), Symbol.intern(null, "dst"), RT.keyword(null, "as"), Symbol.intern(null, "conversion")), Symbol.intern(null, "params"), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "doc"), "Defines a conversion from one type to another.", RT.keyword(null, "line"), Integer.valueOf(106), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_commons/byte_streams.clj" });
    const__44 = (Var)RT.var("clj-commons.byte-streams", "def-transfer");
    const__47 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Tuple.create(Symbol.intern(null, "src"), Symbol.intern(null, "dst")), Symbol.intern(null, "params"), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "doc"), "Defines a byte transfer from one type to another.", RT.keyword(null, "line"), Integer.valueOf(124), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_commons/byte_streams.clj" });
    const__48 = (Var)RT.var("clj-commons.byte-streams", "converter");
    const__50 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(139), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_commons/byte_streams.clj" });
    const__51 = (Var)RT.var("clojure.core", "memoize");
    const__52 = (Var)RT.var("clj-commons.byte-streams", "convert");
    const__55 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(144), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_commons/byte_streams.clj" });
    const__56 = (Var)RT.var("clj-commons.byte-streams", "seq-converter");
    const__58 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(146), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_commons/byte_streams.clj" });
    const__59 = (Var)RT.var("clj-commons.byte-streams", "stream-converter");
    const__61 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(151), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_commons/byte_streams.clj" });
    const__62 = (Var)RT.var("clj-commons.byte-streams", "conversion-path");
    const__65 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "src"), Symbol.intern(null, "dst")) })), RT.keyword(null, "line"), Integer.valueOf(156), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_commons/byte_streams.clj" });
    const__68 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "dst")), Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "dst"), Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "Converts `x`, if possible, into type `dst`, which can be either a class or protocol.  If no such conversion\n   is possible, an IllegalArgumentException is thrown.  If `x` is a stream, then the `src` type must be explicitly\n   specified.\n\n   `options` is a map, whose available settings depend on what sort of transform is being performed:\n\n   `chunk-size`  - if a stream is being transformed into a sequence of discrete chunks, `:chunk-size` describes the\n                   size of the chunks, which default to 4096 bytes.\n\n   `encoding`    - if a string is being encoded or decoded, `:encoding` describes the charset that is used, which\n                   defaults to 'UTF-8'\n\n   `direct?`     - if a byte-buffer is being allocated, `:direct?` describes whether it should be a direct buffer,\n                   defaulting to false\n   `source-type` - overrides input type detection, required to convert a stream\n\n   (NB: if you need to convert a stream to a seq, or vice versa, but not the underlying byte type, you want\n   Manifold's `stream->seq` and `->source` instead)", RT.keyword(null, "line"), Integer.valueOf(162), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_commons/byte_streams.clj" });
    const__69 = (Var)RT.var("clj-commons.byte-streams", "possible-conversions");
    const__72 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "src")) })), RT.keyword(null, "doc"), "Returns a list of all possible conversion targets from value.", RT.keyword(null, "line"), Integer.valueOf(215), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_commons/byte_streams.clj" });
    const__73 = (Var)RT.var("clj-commons.byte-streams", "default-transfer");
    const__76 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "source"), Symbol.intern(null, "sink"), RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "chunk-size")), RT.keyword(null, "or"), RT.map(new Object[] { Symbol.intern(null, "chunk-size"), Long.valueOf(1024L) }), RT.keyword(null, "as"), Symbol.intern(null, "options") })) })), RT.keyword(null, "line"), Integer.valueOf(245), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_commons/byte_streams.clj" });
    const__77 = (Var)RT.var("clj-commons.byte-streams", "transfer-fn");
    const__79 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(252), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_commons/byte_streams.clj" });
    const__80 = (Var)RT.var("clj-commons.byte-streams", "transfer");
    const__83 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "source"), Symbol.intern(null, "sink")), Tuple.create(Symbol.intern(null, "source"), Symbol.intern(null, "sink"), Symbol.intern(null, "options")), Tuple.create(Symbol.intern(null, "source"), Symbol.intern(null, "source-type"), Symbol.intern(null, "sink"), Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "Transfers, if possible, all bytes from `source` into `sink`.  If this cannot be accomplished, an IllegalArgumentException is\n   thrown.\n\n   `options` is a map whose available settings depends on the source and sink types:\n\n   `chunk-size` - if a stream is being transformed into a sequence of discrete chunks, `:chunk-size` describes the\n                  size of the chunks, which default to 4096 bytes.\n\n   `encoding`   - if a string is being encoded or decoded, `:encoding` describes the charset that is used, which\n                  defaults to 'UTF-8'\n\n   `append?`    - if a file is being written to, `:append?` determines whether the bytes will overwrite the existing content\n                  or be appended to the end of the file.  This defaults to true.\n\n   `close?`     - whether the sink and source should be closed once the transfer is done, defaults to true.", RT.keyword(null, "line"), Integer.valueOf(300), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_commons/byte_streams.clj" });
    const__84 = (Var)RT.var("clj-commons.byte-streams", "dev-null");
    const__86 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Web-scale.", RT.keyword(null, "line"), Integer.valueOf(327), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_commons/byte_streams.clj" });
    const__89 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(328), RT.keyword(null, "column"), Integer.valueOf(3) });
    const__90 = (Var)RT.var("clj-commons.byte-streams", "optimized-transfer?");
    const__93 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "type-descriptor"), Symbol.intern(null, "sink-type")) })), RT.keyword(null, "doc"), "Returns true if an optimized transfer function exists for the given source and sink objects.", RT.keyword(null, "line"), Integer.valueOf(331), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_commons/byte_streams.clj" });
    const__94 = RT.classForName("java.io.InputStream");
    const__95 = RT.classForName("java.nio.ByteBuffer");
    const__96 = RT.classForName("java.nio.channels.ReadableByteChannel");
  }
  
  public static void __init1() {
    const__102 = RT.classForName("java.nio.channels.WritableByteChannel");
    const__103 = RT.classForName("java.io.OutputStream");
    const__104 = (Var)RT.var("clojure.core", "swap!");
    const__105 = (Var)RT.var("clj-commons.byte-streams", "src->dst->transfer");
    const__106 = (Var)RT.var("clojure.core", "assoc-in");
    const__109 = (AFn)Tuple.create(new Type(null, RT.classForName("java.nio.channels.ReadableByteChannel")), new Type(null, RT.classForName("java.io.File")));
    const__112 = (AFn)Tuple.create(new Type(null, RT.classForName("java.io.File")), new Type(null, RT.classForName("java.nio.channels.WritableByteChannel")));
    const__115 = (AFn)Tuple.create(new Type(null, RT.classForName("java.io.InputStream")), new Type(null, RT.classForName("java.io.OutputStream")));
    const__116 = (Var)RT.var("clojure.core", "extend");
    const__117 = (Var)RT.var("clj-commons.byte-streams.protocols", "ByteSink");
    const__118 = (Keyword)RT.keyword(null, "send-bytes!");
    const__119 = (Var)RT.var("clj-commons.byte-streams.protocols", "ByteSource");
    const__120 = (Keyword)RT.keyword(null, "take-bytes!");
    const__121 = (Var)RT.var("clj-commons.byte-streams", "print-bytes");
    const__124 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "bytes")) })), RT.keyword(null, "doc"), "Prints out the bytes in both hex and ASCII representations, 16 bytes per line.", RT.keyword(null, "line"), Integer.valueOf(756), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_commons/byte_streams.clj" });
    const__125 = (Var)RT.var("clj-commons.byte-streams", "to-byte-buffer");
    const__129 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "tag"), RT.classForName("java.nio.ByteBuffer"), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")), Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "Converts the object to a `java.nio.ByteBuffer`.", RT.keyword(null, "line"), Integer.valueOf(780), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clj_commons/byte_streams.clj" });
    const__130 = (Var)RT.var("clj-commons.byte-streams", "to-byte-buffers");
    const__133 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")), Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "Converts the object to a sequence of `java.nio.ByteBuffer`.", RT.keyword(null, "line"), Integer.valueOf(791), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_commons/byte_streams.clj" });
    const__134 = (Var)RT.var("clj-commons.byte-streams", "to-byte-array");
    const__137 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "tag"), "[B", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")), Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "Converts the object to a byte-array.", RT.keyword(null, "line"), Integer.valueOf(798), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clj_commons/byte_streams.clj" });
    const__138 = (Var)RT.var("clj-commons.byte-streams", "to-byte-arrays");
    const__141 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")), Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "Converts the object to a byte-array.", RT.keyword(null, "line"), Integer.valueOf(808), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_commons/byte_streams.clj" });
    const__142 = (Var)RT.var("clj-commons.byte-streams", "to-input-stream");
    const__145 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "tag"), RT.classForName("java.io.InputStream"), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")), Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "Converts the object to a `java.io.InputStream`.", RT.keyword(null, "line"), Integer.valueOf(815), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clj_commons/byte_streams.clj" });
    const__146 = (Var)RT.var("clj-commons.byte-streams", "to-data-input-stream");
    const__150 = (AFn)RT.map(new Object[] { RT.keyword(null, "tag"), RT.classForName("java.io.DataInputStream"), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")), Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "options")) })), RT.keyword(null, "line"), Integer.valueOf(825), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_commons/byte_streams.clj" });
    const__151 = (Var)RT.var("clj-commons.byte-streams", "to-output-stream");
    const__154 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "tag"), RT.classForName("java.io.InputStream"), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")), Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "Converts the object to a `java.io.OutputStream`.", RT.keyword(null, "line"), Integer.valueOf(833), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clj_commons/byte_streams.clj" });
    const__155 = (Var)RT.var("clj-commons.byte-streams", "to-char-sequence");
    const__158 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "tag"), RT.classForName("java.lang.CharSequence"), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")), Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "Converts to the object to a `java.lang.CharSequence`.", RT.keyword(null, "line"), Integer.valueOf(840), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clj_commons/byte_streams.clj" });
    const__159 = (Var)RT.var("clj-commons.byte-streams", "to-readable-channel");
    const__162 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "tag"), RT.classForName("java.nio.channels.ReadableByteChannel"), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")), Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "Converts the object to a `java.nio.ReadableByteChannel`", RT.keyword(null, "line"), Integer.valueOf(849), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clj_commons/byte_streams.clj" });
    const__163 = (Var)RT.var("clj-commons.byte-streams", "to-string");
    const__166 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "tag"), RT.classForName("java.lang.String"), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")), Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "Converts the object to a string.", RT.keyword(null, "line"), Integer.valueOf(856), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clj_commons/byte_streams.clj" });
    const__167 = (Var)RT.var("clj-commons.byte-streams", "to-reader");
    const__170 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")), Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "Converts the object to a java.io.Reader.", RT.keyword(null, "line"), Integer.valueOf(867), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_commons/byte_streams.clj" });
    const__171 = (Var)RT.var("clj-commons.byte-streams", "to-line-seq");
    const__174 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")), Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "Converts the object to a lazy sequence of newline-delimited strings.", RT.keyword(null, "line"), Integer.valueOf(874), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_commons/byte_streams.clj" });
    const__175 = (Var)RT.var("clj-commons.byte-streams", "to-byte-source");
    const__178 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")), Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "Converts the object to something that satisfies `ByteSource`.", RT.keyword(null, "line"), Integer.valueOf(890), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_commons/byte_streams.clj" });
    const__179 = (Var)RT.var("clj-commons.byte-streams", "to-byte-sink");
    const__182 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")), Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "Converts the object to something that satisfies `ByteSink`.", RT.keyword(null, "line"), Integer.valueOf(897), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_commons/byte_streams.clj" });
    const__183 = (Var)RT.var("clj-commons.byte-streams", "cmp-bufs");
    const__186 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(((IObj)Symbol.intern(null, "a'")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "ByteBuffer") })), ((IObj)Symbol.intern(null, "b'")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "ByteBuffer") })))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "long") })) })), RT.keyword(null, "line"), Integer.valueOf(906), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_commons/byte_streams.clj" });
    const__187 = (Var)RT.var("clj-commons.byte-streams", "compare-bytes");
    const__190 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "a"), Symbol.intern(null, "b"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "long") })) })), RT.keyword(null, "doc"), "Returns a comparison result for two byte streams.", RT.keyword(null, "line"), Integer.valueOf(950), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_commons/byte_streams.clj" });
    const__191 = (Var)RT.var("clj-commons.byte-streams", "bytes=");
    const__194 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "a"), Symbol.intern(null, "b")) })), RT.keyword(null, "doc"), "Returns true if the two byte streams are equivalent.", RT.keyword(null, "line"), Integer.valueOf(977), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_commons/byte_streams.clj" });
  }
  
  static  {
    __init0();
    __init1();
    Compiler.pushNSandLoader(RT.classForName("clj_commons.byte_streams__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
