package instaparse;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class transform__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__3;
  
  public static final AFn const__4;
  
  public static final Var const__5;
  
  public static final AFn const__13;
  
  public static final Var const__14;
  
  public static final AFn const__17;
  
  public static final Var const__18;
  
  public static final AFn const__22;
  
  public static final Var const__23;
  
  public static final AFn const__26;
  
  public static final Var const__27;
  
  public static final AFn const__30;
  
  public static void load() { LockingTransaction.runInTransaction((Callable)new transform.fn__19962());
    const__5.setMeta((IPersistentMap)const__13);
    const__5.bindRoot(new transform.map_preserving_meta());
    const__14.setMeta((IPersistentMap)const__17);
    const__14.bindRoot(new transform.merge_meta());
    const__18.setMeta((IPersistentMap)const__22);
    const__18.bindRoot(new transform.enlive_transform());
    const__23.setMeta((IPersistentMap)const__26);
    const__23.bindRoot(new transform.hiccup_transform());
    const__27.setMeta((IPersistentMap)const__30);
    const__27.bindRoot(new transform.transform()); }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "instaparse.transform")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Functions to transform parse trees" }));
    const__3 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Functions to transform parse trees" });
    const__4 = (AFn)Symbol.intern(null, "clojure.core");
    const__5 = (Var)RT.var("instaparse.transform", "map-preserving-meta");
    const__13 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "l")) })), RT.keyword(null, "line"), Integer.valueOf(6), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/transform.clj" });
    const__14 = (Var)RT.var("instaparse.transform", "merge-meta");
    const__17 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "obj"), Symbol.intern(null, "metamap")) })), RT.keyword(null, "doc"), "This variation of the merge-meta in gll does nothing if obj is not\nsomething that can have a metamap attached.", RT.keyword(null, "line"), Integer.valueOf(9), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/transform.clj" });
    const__18 = (Var)RT.var("instaparse.transform", "enlive-transform");
    const__22 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "transform-map"), Symbol.intern(null, "parse-tree")) })), RT.keyword(null, "line"), Integer.valueOf(18), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/transform.clj" });
    const__23 = (Var)RT.var("instaparse.transform", "hiccup-transform");
    const__26 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "transform-map"), Symbol.intern(null, "parse-tree")) })), RT.keyword(null, "line"), Integer.valueOf(33), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/transform.clj" });
    const__27 = (Var)RT.var("instaparse.transform", "transform");
    const__30 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "transform-map"), Symbol.intern(null, "parse-tree")) })), RT.keyword(null, "doc"), "Takes a transform map and a parse tree (or seq of parse-trees).\n   A transform map is a mapping from tags to \n   functions that take a node's contents and return\n   a replacement for the node, i.e.,\n   {:node-tag (fn [child1 child2 ...] node-replacement),\n    :another-node-tag (fn [child1 child2 ...] node-replacement)}", RT.keyword(null, "line"), Integer.valueOf(48), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/transform.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("instaparse.transform__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
