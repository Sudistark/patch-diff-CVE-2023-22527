package instaparse;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class viz__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__12;
  
  public static final Var const__13;
  
  public static final AFn const__15;
  
  public static final Var const__16;
  
  public static final AFn const__20;
  
  public static final Var const__21;
  
  public static final AFn const__24;
  
  public static final Var const__25;
  
  public static final AFn const__28;
  
  public static final Var const__29;
  
  public static final AFn const__32;
  
  public static final Var const__33;
  
  public static final AFn const__36;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new viz.fn__20059());
    const__3.setMeta((IPersistentMap)const__12);
    const__3.bindRoot(new viz.span());
    const__13.setMeta((IPersistentMap)const__15);
    const__13
















      
      .bindRoot(((IFn)new viz.fn__20063()).invoke());
    const__16.setMeta((IPersistentMap)const__20);
    const__16.bindRoot(new viz.hiccup_tree_viz());
    const__21.setMeta((IPersistentMap)const__24);
    const__21.bindRoot(new viz.enlive_tree_viz());
    const__25.setMeta((IPersistentMap)const__28);
    const__25.bindRoot(new viz.tree_type());
    const__29.setMeta((IPersistentMap)const__32);
    const__29.bindRoot(new viz.fake_root());
    const__33.setMeta((IPersistentMap)const__36);
    const__33.bindRoot(new viz.tree_viz());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "instaparse.viz");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("instaparse.viz", "span");
    const__12 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "tree")) })), RT.keyword(null, "doc"), "Takes a subtree of the parse tree and returns a [start-index end-index] pair\n   indicating the span of text parsed by this subtree.\n   start-index is inclusive and end-index is exclusive, as is customary\n   with substrings.\n   Returns nil if no span metadata is attached.", RT.keyword(null, "line"), Integer.valueOf(4), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/viz.clj" });
    const__13 = (Var)RT.var("instaparse.viz", "rhizome-newline");
    const__15 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(17), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/viz.clj" });
    const__16 = (Var)RT.var("instaparse.viz", "hiccup-tree-viz");
    const__20 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "mytree"), Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "visualize instaparse hiccup output as a rhizome graph. Requires rhizome: https://github.com/ztellman/rhizome", RT.keyword(null, "line"), Integer.valueOf(26), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "instaparse/viz.clj" });
    const__21 = (Var)RT.var("instaparse.viz", "enlive-tree-viz");
    const__24 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "mytree"), Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "visualize enlive trees", RT.keyword(null, "line"), Integer.valueOf(38), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "instaparse/viz.clj" });
    const__25 = (Var)RT.var("instaparse.viz", "tree-type");
    const__28 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "tree")) })), RT.keyword(null, "line"), Integer.valueOf(51), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/viz.clj" });
    const__29 = (Var)RT.var("instaparse.viz", "fake-root");
    const__32 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "children")) })), RT.keyword(null, "doc"), "Create a root for a rootless tree", RT.keyword(null, "line"), Integer.valueOf(60), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/viz.clj" });
    const__33 = (Var)RT.var("instaparse.viz", "tree-viz");
    const__36 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "tree"), Symbol.intern(null, "&"), RT.map(new Object[] { Symbol.intern(null, "output-file"), RT.keyword(null, "output-file"), Symbol.intern(null, "options"), RT.keyword(null, "options") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "not="), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "tree-type"), Symbol.intern(null, "tree") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(84), RT.keyword(null, "column"), Integer.valueOf(16) })), RT.keyword(null, "invalid") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(84), RT.keyword(null, "column"), Integer.valueOf(10) }))) })) })), RT.keyword(null, "doc"), "Creates a graphviz visualization of the parse tree.\n   Optional keyword arguments:\n   :output-file :buffered-image (return a java.awt.image.BufferedImage object)\n   or\n   :output-file output-file (will save the tree image to output-file)\n\n   :options options (options passed along to rhizome)\n\nImportant: This function will only work if you have added rhizome\nto your dependencies, and installed graphviz on your system.  \nSee https://github.com/ztellman/rhizome for more information.", RT.keyword(null, "line"), Integer.valueOf(71), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/viz.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("instaparse.viz__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
