package instaparse;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;
import java.util.regex.Pattern;

public class cfg__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__3;
  
  public static final AFn const__4;
  
  public static final Var const__5;
  
  public static final AFn const__12;
  
  public static final Keyword const__13;
  
  public static final Var const__14;
  
  public static final AFn const__18;
  
  public static final Var const__19;
  
  public static final AFn const__22;
  
  public static final Var const__23;
  
  public static final AFn const__25;
  
  public static final Object const__26;
  
  public static final Var const__27;
  
  public static final AFn const__29;
  
  public static final Object const__30;
  
  public static final Var const__31;
  
  public static final AFn const__33;
  
  public static final Object const__34;
  
  public static final Var const__35;
  
  public static final AFn const__37;
  
  public static final Object const__38;
  
  public static final Var const__39;
  
  public static final AFn const__41;
  
  public static final Object const__42;
  
  public static final Var const__43;
  
  public static final AFn const__45;
  
  public static final Var const__46;
  
  public static final AFn const__48;
  
  public static final Var const__49;
  
  public static final Var const__50;
  
  public static final Keyword const__51;
  
  public static final Var const__52;
  
  public static final AFn const__54;
  
  public static final Var const__55;
  
  public static final Keyword const__56;
  
  public static final Keyword const__57;
  
  public static final Var const__58;
  
  public static final Var const__59;
  
  public static final Keyword const__60;
  
  public static final Keyword const__61;
  
  public static final Var const__62;
  
  public static final Var const__63;
  
  public static final Keyword const__64;
  
  public static final Keyword const__65;
  
  public static final Keyword const__66;
  
  public static final Keyword const__67;
  
  public static final Var const__68;
  
  public static final Keyword const__69;
  
  public static final Keyword const__70;
  
  public static final Keyword const__71;
  
  public static final Keyword const__72;
  
  public static final Var const__73;
  
  public static final Keyword const__74;
  
  public static final Var const__75;
  
  public static final Keyword const__76;
  
  public static final Keyword const__77;
  
  public static final Keyword const__78;
  
  public static final Keyword const__79;
  
  public static final Keyword const__80;
  
  public static final Var const__81;
  
  public static final Keyword const__82;
  
  public static final Keyword const__83;
  
  public static final Keyword const__84;
  
  public static final Keyword const__85;
  
  public static final Keyword const__86;
  
  public static final Keyword const__87;
  
  public static final Var const__88;
  
  public static final AFn const__90;
  
  public static final Var const__91;
  
  public static final Var const__92;
  
  public static final AFn const__94;
  
  public static final Var const__95;
  
  public static final Var const__96;
  
  public static final AFn const__98;
  
  public static final Var const__99;
  
  public static final Var const__100;
  
  public static final AFn const__103;
  
  public static final Var const__104;
  
  public static final AFn const__108;
  
  public static final Var const__109;
  
  public static final AFn const__112;
  
  public static final Var const__113;
  
  public static final AFn const__116;
  
  public static final Var const__117;
  
  public static final AFn const__120;
  
  public static final Var const__121;
  
  public static final AFn const__124;
  
  public static final Var const__125;
  
  public static final AFn const__128;
  
  public static final Var const__129;
  
  public static final AFn const__132;
  
  public static final Var const__133;
  
  public static final AFn const__136;
  
  public static final Var const__137;
  
  public static final AFn const__140;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new cfg.fn__19914());
    const__5.setDynamic(true).setMeta((IPersistentMap)const__12);
    const__5.setDynamic(true).bindRoot(const__13);
    const__14.setMeta((IPersistentMap)const__18);
    const__14.bindRoot(new cfg.string_PLUS_());
    const__19.setMeta((IPersistentMap)const__22);
    const__19.bindRoot(new cfg.regex_doc());
    const__23.setMeta((IPersistentMap)const__25);
    const__23








































      
      .bindRoot(((IFn)const__19.getRawRoot()).invoke(const__26, "Single-quoted string"));
    const__27.setMeta((IPersistentMap)const__29);
    const__27
      .bindRoot(((IFn)const__19.getRawRoot()).invoke(const__30, "Single-quoted regexp"));
    const__31.setMeta((IPersistentMap)const__33);
    const__31
      .bindRoot(((IFn)const__19.getRawRoot()).invoke(const__34, "Double-quoted string"));
    const__35.setMeta((IPersistentMap)const__37);
    const__35
      .bindRoot(((IFn)const__19.getRawRoot()).invoke(const__38, "Double-quoted regexp"));
    const__39.setMeta((IPersistentMap)const__41);
    const__39.bindRoot(const__42);
    const__43.setMeta((IPersistentMap)const__45);
    const__43

      
      .bindRoot(((IFn)const__19.getRawRoot()).invoke("[,\\s]*", "optional whitespace"));
    const__46.setMeta((IPersistentMap)const__48);
    const__46
      
      .bindRoot(((IFn)const__49.getRawRoot()).invoke(((IFn)const__50.getRawRoot()).invoke(const__51)));
    const__52.setMeta((IPersistentMap)const__54);
    const__52

      
      .bindRoot(((IFn)const__55.getRawRoot()).invoke(const__56, 

































































          
          RT.mapUniqueKeys(new Object[] { 
              const__57, ((IFn)const__58.getRawRoot()).invoke(((IFn)const__49.getRawRoot()).invoke(((IFn)const__59.getRawRoot()).invoke("!")), const__46.getRawRoot(), ((IFn)const__50.getRawRoot())
                
                .invoke(const__60)), const__61, ((IFn)const__62.getRawRoot()).invoke(((IFn)const__58.getRawRoot()).invoke(const__46.getRawRoot(), ((IFn)const__63.getRawRoot()).invoke(((IFn)const__50.getRawRoot()).invoke(const__60), ((IFn)const__50.getRawRoot()).invoke(const__64), ((IFn)const__50.getRawRoot()).invoke(const__57)), const__46.getRawRoot())), const__65, ((IFn)const__58.getRawRoot()).invoke(((IFn)const__50.getRawRoot()).invoke(const__61), ((IFn)const__62.getRawRoot()).invoke(((IFn)const__58.getRawRoot()).invoke(const__46.getRawRoot(), ((IFn)const__49.getRawRoot()).invoke(((IFn)const__59.getRawRoot()).invoke("/")), const__46.getRawRoot(), ((IFn)const__50.getRawRoot()).invoke(const__61)))), const__66, ((IFn)const__63.getRawRoot()).invoke(((IFn)const__59.getRawRoot()).invoke(":"), ((IFn)const__59.getRawRoot()).invoke(":="), ((IFn)const__59.getRawRoot()).invoke("::="), ((IFn)const__59.getRawRoot()).invoke("=")), const__67, ((IFn)const__58.getRawRoot()).invoke(((IFn)const__50.getRawRoot()).invoke(const__61), ((IFn)const__68.getRawRoot()).invoke(((IFn)const__58.getRawRoot()).invoke(const__46.getRawRoot(), ((IFn)const__49.getRawRoot()).invoke(((IFn)const__59.getRawRoot()).invoke("|")), const__46.getRawRoot(), ((IFn)const__50.getRawRoot()).invoke(const__61)))), 
              const__64, ((IFn)const__58.getRawRoot()).invoke(((IFn)const__49.getRawRoot()).invoke(((IFn)const__59.getRawRoot()).invoke("&")), const__46.getRawRoot(), ((IFn)const__50.getRawRoot()).invoke(const__60)), const__69, ((IFn)const__58.getRawRoot()).invoke(((IFn)const__63.getRawRoot()).invoke(((IFn)const__50.getRawRoot()).invoke(const__70), ((IFn)const__50.getRawRoot()).invoke(const__71)), const__46.getRawRoot(), ((IFn)const__49.getRawRoot()).invoke(((IFn)const__50.getRawRoot()).invoke(const__66)), const__46.getRawRoot(), ((IFn)const__50.getRawRoot()).invoke(const__72), ((IFn)const__49.getRawRoot()).invoke(((IFn)const__63.getRawRoot()).invoke(((IFn)const__50.getRawRoot()).invoke(const__51), ((IFn)const__58.getRawRoot()).invoke(((IFn)const__50.getRawRoot()).invoke(const__51), ((IFn)const__63.getRawRoot()).invoke(((IFn)const__59.getRawRoot()).invoke(";"), ((IFn)const__59.getRawRoot()).invoke(".")), ((IFn)const__50.getRawRoot()).invoke(const__51))))), const__70, ((IFn)const__58.getRawRoot()).invoke(((IFn)const__73.getRawRoot()).invoke(((IFn)const__50.getRawRoot()).invoke(const__74)), ((IFn)const__75.getRawRoot()).invoke(((IFn)const__19.getRawRoot()).invoke("[^, \\r\\t\\n<>(){}\\[\\]+*?:=|'\"#&!;./]+", "Non-terminal"))), const__71, ((IFn)const__58.getRawRoot()).invoke(((IFn)const__49.getRawRoot()).invoke(((IFn)const__59.getRawRoot()).invoke("<")), const__46.getRawRoot(), ((IFn)const__50.getRawRoot()).invoke(const__70), const__46.getRawRoot(), ((IFn)const__49.getRawRoot()).invoke(((IFn)const__59.getRawRoot()).invoke(">"))), const__76, ((IFn)const__58.getRawRoot()).invoke(((IFn)const__75.getRawRoot()).invoke(const__39.getRawRoot()), ((IFn)const__68.getRawRoot()).invoke(((IFn)const__58.getRawRoot()).invoke(((IFn)const__50.getRawRoot()).invoke(const__77), ((IFn)const__75.getRawRoot()).invoke(const__39.getRawRoot())))), 
              const__78, ((IFn)const__63.getRawRoot()).invoke(((IFn)const__58.getRawRoot()).invoke(((IFn)const__49.getRawRoot()).invoke(((IFn)const__59.getRawRoot()).invoke("{")), const__46.getRawRoot(), ((IFn)const__50.getRawRoot()).invoke(const__72), const__46.getRawRoot(), ((IFn)const__49.getRawRoot()).invoke(((IFn)const__59.getRawRoot()).invoke("}"))), ((IFn)const__58.getRawRoot()).invoke(((IFn)const__50.getRawRoot()).invoke(const__60), const__46.getRawRoot(), ((IFn)const__49.getRawRoot()).invoke(((IFn)const__59.getRawRoot()).invoke("*")))), const__79, ((IFn)const__63.getRawRoot()).invoke(((IFn)const__75.getRawRoot()).invoke(const__23.getRawRoot()), ((IFn)const__75.getRawRoot()).invoke(const__31.getRawRoot())), const__80, ((IFn)const__81.getRawRoot()).invoke(((IFn)const__58.getRawRoot()).invoke(const__46.getRawRoot(), ((IFn)const__62.getRawRoot()).invoke(((IFn)const__50.getRawRoot()).invoke(const__69)))), const__82, ((IFn)const__58.getRawRoot()).invoke(((IFn)const__49.getRawRoot()).invoke(((IFn)const__59.getRawRoot()).invoke("<")), const__46.getRawRoot(), ((IFn)const__50.getRawRoot()).invoke(const__72), const__46.getRawRoot(), ((IFn)const__49.getRawRoot()).invoke(((IFn)const__59.getRawRoot()).invoke(">"))), const__83, ((IFn)const__58.getRawRoot()).invoke(((IFn)const__49.getRawRoot()).invoke(((IFn)const__59.getRawRoot()).invoke("(")), const__46.getRawRoot(), ((IFn)const__50.getRawRoot()).invoke(const__72), const__46.getRawRoot(), ((IFn)const__49.getRawRoot()).invoke(((IFn)const__59.getRawRoot()).invoke(")"))), 
              const__72, ((IFn)const__81.getRawRoot()).invoke(((IFn)const__63.getRawRoot()).invoke(((IFn)const__50.getRawRoot()).invoke(const__67), ((IFn)const__50.getRawRoot()).invoke(const__65))), const__84, ((IFn)const__63.getRawRoot()).invoke(((IFn)const__75.getRawRoot()).invoke(const__27.getRawRoot()), ((IFn)const__75.getRawRoot()).invoke(const__35.getRawRoot())), const__60, ((IFn)const__81.getRawRoot()).invoke(((IFn)const__63.getRawRoot()).invoke(((IFn)const__50.getRawRoot()).invoke(const__70), ((IFn)const__50.getRawRoot())
                  .invoke(const__79), ((IFn)const__50.getRawRoot())
                  .invoke(const__84), ((IFn)const__50.getRawRoot())
                  .invoke(const__85), ((IFn)const__50.getRawRoot())
                  .invoke(const__78), ((IFn)const__50.getRawRoot())
                  .invoke(const__86), ((IFn)const__50.getRawRoot())
                  .invoke(const__83), ((IFn)const__50.getRawRoot())
                  .invoke(const__82), ((IFn)const__50.getRawRoot())
                  .invoke(const__74))), const__77, ((IFn)const__58.getRawRoot()).invoke(((IFn)const__59.getRawRoot()).invoke("(*"), ((IFn)const__50.getRawRoot()).invoke(const__76), ((IFn)const__59.getRawRoot()).invoke("*)")), const__86, ((IFn)const__58.getRawRoot()).invoke(((IFn)const__50.getRawRoot()).invoke(const__60), const__46.getRawRoot(), ((IFn)const__49.getRawRoot()).invoke(((IFn)const__59.getRawRoot()).invoke("+"))), 
              const__74, ((IFn)const__63.getRawRoot()).invoke(((IFn)const__59.getRawRoot()).invoke("Epsilon"), ((IFn)const__59.getRawRoot()).invoke("epsilon"), ((IFn)const__59.getRawRoot()).invoke("EPSILON"), ((IFn)const__59.getRawRoot()).invoke("eps"), ((IFn)const__59.getRawRoot()).invoke("ε")), const__51, ((IFn)const__58.getRawRoot()).invoke(((IFn)const__75.getRawRoot()).invoke(const__43.getRawRoot()), ((IFn)const__68.getRawRoot()).invoke(((IFn)const__58.getRawRoot()).invoke(((IFn)const__50.getRawRoot()).invoke(const__77), ((IFn)const__75.getRawRoot()).invoke(const__43.getRawRoot())))), const__87, ((IFn)const__81.getRawRoot()).invoke(((IFn)const__63.getRawRoot()).invoke(((IFn)const__50.getRawRoot()).invoke(const__80), ((IFn)const__50.getRawRoot()).invoke(const__72))), const__85, ((IFn)const__63.getRawRoot()).invoke(((IFn)const__58.getRawRoot()).invoke(((IFn)const__49.getRawRoot()).invoke(((IFn)const__59.getRawRoot()).invoke("[")), const__46.getRawRoot(), ((IFn)const__50.getRawRoot()).invoke(const__72), const__46.getRawRoot(), ((IFn)const__49.getRawRoot()).invoke(((IFn)const__59.getRawRoot()).invoke("]"))), ((IFn)const__58.getRawRoot()).invoke(((IFn)const__50.getRawRoot()).invoke(const__60), const__46.getRawRoot(), ((IFn)const__49.getRawRoot()).invoke(((IFn)const__59.getRawRoot()).invoke("?")))) })));
    const__88.setMeta((IPersistentMap)const__90);
    const__88.bindRoot(const__91.getRawRoot());
    const__92.setMeta((IPersistentMap)const__94);
    const__92.bindRoot(const__95.getRawRoot());
    const__96.setMeta((IPersistentMap)const__98);
    const__96.bindRoot(const__99.getRawRoot());
    const__100.setMeta((IPersistentMap)const__103);
    const__100.bindRoot(new cfg.escape());
    const__104.setMeta((IPersistentMap)const__108);
    const__104.bindRoot(new cfg.wrap_reader());
    const__109.setMeta((IPersistentMap)const__112);
    const__109.bindRoot(new cfg.process_string());
    const__113.setMeta((IPersistentMap)const__116);
    const__113.bindRoot(new cfg.process_regexp());
    const__117.setMeta((IPersistentMap)const__120);
    const__117.bindRoot(new cfg.build_rule());
    const__121.setMeta((IPersistentMap)const__124);
    const__121.bindRoot(new cfg.seq_nt());
    const__125.setMeta((IPersistentMap)const__128);
    const__125.bindRoot(new cfg.check_grammar());
    const__129.setMeta((IPersistentMap)const__132);
    const__129.bindRoot(new cfg.build_parser());
    const__133.setMeta((IPersistentMap)const__136);
    const__133.bindRoot(new cfg.build_parser_from_combinators());
    const__137.setMeta((IPersistentMap)const__140);
    const__137.bindRoot(new cfg.ebnf());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "instaparse.cfg")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "This is the context free grammar that recognizes context free grammars." }));
    const__3 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "This is the context free grammar that recognizes context free grammars." });
    const__4 = (AFn)Symbol.intern(null, "clojure.core");
    const__5 = (Var)RT.var("instaparse.cfg", "*case-insensitive-literals*");
    const__12 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(15), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/cfg.clj", RT.keyword(null, "doc"), "Sets whether all string literal terminals in a built grammar\n  will be treated as case insensitive.\n\n  `true`: case-insensitive\n  `false`: case-sensitive\n  `:default`: case-sensitive for EBNF, case-insensitive for ABNF" });
    const__13 = (Keyword)RT.keyword(null, "default");
    const__14 = (Var)RT.var("instaparse.cfg", "string+");
    const__18 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s"), Symbol.intern(null, "ci-by-default?")) })), RT.keyword(null, "doc"), "Returns a string combinator that may be case-insensntive, based\n  on (in priority order):\n\n  1) the value of `*case-insensitive-literals*`, if it has been\n  overridden to a boolean\n  2) the supplied `ci-by-default?` parameter", RT.keyword(null, "line"), Integer.valueOf(24), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/cfg.clj" });
    const__19 = (Var)RT.var("instaparse.cfg", "regex-doc");
    const__22 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pattern-str"), Symbol.intern(null, "comment")) })), RT.keyword(null, "doc"), "Adds a comment to a Clojure regex, or no-op in ClojureScript", RT.keyword(null, "line"), Integer.valueOf(37), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/cfg.clj" });
    const__23 = (Var)RT.var("instaparse.cfg", "single-quoted-string");
    const__25 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(43), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/cfg.clj" });
    const__26 = Pattern.compile("'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'");
    const__27 = (Var)RT.var("instaparse.cfg", "single-quoted-regexp");
    const__29 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(44), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/cfg.clj" });
    const__30 = Pattern.compile("#'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'");
    const__31 = (Var)RT.var("instaparse.cfg", "double-quoted-string");
    const__33 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(45), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/cfg.clj" });
    const__34 = Pattern.compile("\\\"[^\\\"\\\\]*(?:\\\\.[^\\\"\\\\]*)*\\\"");
    const__35 = (Var)RT.var("instaparse.cfg", "double-quoted-regexp");
    const__37 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(46), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/cfg.clj" });
    const__38 = Pattern.compile("#\\\"[^\\\"\\\\]*(?:\\\\.[^\\\"\\\\]*)*\\\"");
    const__39 = (Var)RT.var("instaparse.cfg", "inside-comment");
    const__41 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(47), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/cfg.clj" });
    const__42 = Pattern.compile("(?s)(?:(?!(?:\\(\\*|\\*\\))).)*(?x) #Comment text");
    const__43 = (Var)RT.var("instaparse.cfg", "ws");
    const__45 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(49), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/cfg.clj" });
    const__46 = (Var)RT.var("instaparse.cfg", "opt-whitespace");
    const__48 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(51), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/cfg.clj" });
    const__49 = (Var)RT.var("instaparse.combinators-source", "hide");
    const__50 = (Var)RT.var("instaparse.combinators-source", "nt");
    const__51 = (Keyword)RT.keyword(null, "opt-whitespace");
    const__52 = (Var)RT.var("instaparse.cfg", "cfg");
    const__54 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(53), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/cfg.clj" });
    const__55 = (Var)RT.var("instaparse.reduction", "apply-standard-reductions");
    const__56 = (Keyword)RT.keyword(null, "hiccup");
    const__57 = (Keyword)RT.keyword(null, "neg");
    const__58 = (Var)RT.var("instaparse.combinators-source", "cat");
    const__59 = (Var)RT.var("instaparse.combinators-source", "string");
    const__60 = (Keyword)RT.keyword(null, "factor");
    const__61 = (Keyword)RT.keyword(null, "cat");
    const__62 = (Var)RT.var("instaparse.combinators-source", "plus");
    const__63 = (Var)RT.var("instaparse.combinators-source", "alt");
    const__64 = (Keyword)RT.keyword(null, "look");
    const__65 = (Keyword)RT.keyword(null, "ord");
    const__66 = (Keyword)RT.keyword(null, "rule-separator");
    const__67 = (Keyword)RT.keyword(null, "alt");
    const__68 = (Var)RT.var("instaparse.combinators-source", "star");
    const__69 = (Keyword)RT.keyword(null, "rule");
    const__70 = (Keyword)RT.keyword(null, "nt");
    const__71 = (Keyword)RT.keyword(null, "hide-nt");
    const__72 = (Keyword)RT.keyword(null, "alt-or-ord");
    const__73 = (Var)RT.var("instaparse.combinators-source", "neg");
    const__74 = (Keyword)RT.keyword(null, "epsilon");
    const__75 = (Var)RT.var("instaparse.combinators-source", "regexp");
    const__76 = (Keyword)RT.keyword(null, "inside-comment");
    const__77 = (Keyword)RT.keyword(null, "comment");
    const__78 = (Keyword)RT.keyword(null, "star");
    const__79 = (Keyword)RT.keyword(null, "string");
    const__80 = (Keyword)RT.keyword(null, "rules");
    const__81 = (Var)RT.var("instaparse.combinators-source", "hide-tag");
    const__82 = (Keyword)RT.keyword(null, "hide");
    const__83 = (Keyword)RT.keyword(null, "paren");
    const__84 = (Keyword)RT.keyword(null, "regexp");
    const__85 = (Keyword)RT.keyword(null, "opt");
    const__86 = (Keyword)RT.keyword(null, "plus");
    const__87 = (Keyword)RT.keyword(null, "rules-or-parser");
    const__88 = (Var)RT.var("instaparse.cfg", "tag");
    const__90 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(167), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/cfg.clj" });
    const__91 = (Var)RT.var("clojure.core", "first");
    const__92 = (Var)RT.var("instaparse.cfg", "contents");
    const__94 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(168), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/cfg.clj" });
    const__95 = (Var)RT.var("clojure.core", "next");
    const__96 = (Var)RT.var("instaparse.cfg", "content");
    const__98 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(169), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/cfg.clj" });
    const__99 = (Var)RT.var("clojure.core", "fnext");
  }
  
  public static void __init1() {
    const__100 = (Var)RT.var("instaparse.cfg", "escape");
    const__103 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })), RT.keyword(null, "doc"), "Converts escaped single-quotes to unescaped, and unescaped double-quotes to escaped", RT.keyword(null, "line"), Integer.valueOf(173), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/cfg.clj" });
    const__104 = (Var)RT.var("instaparse.cfg", "wrap-reader");
    const__108 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "reader")) })), RT.keyword(null, "line"), Integer.valueOf(194), RT.keyword(null, "column"), Integer.valueOf(4), RT.keyword(null, "file"), "instaparse/cfg.clj" });
    const__109 = (Var)RT.var("instaparse.cfg", "process-string");
    const__112 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })), RT.keyword(null, "doc"), "Converts single quoted string to double-quoted", RT.keyword(null, "line"), Integer.valueOf(220), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/cfg.clj" });
    const__113 = (Var)RT.var("instaparse.cfg", "process-regexp");
    const__116 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })), RT.keyword(null, "doc"), "Converts single quoted regexp to double-quoted", RT.keyword(null, "line"), Integer.valueOf(232), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/cfg.clj" });
    const__117 = (Var)RT.var("instaparse.cfg", "build-rule");
    const__120 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "tree")) })), RT.keyword(null, "doc"), "Convert one parsed rule from the grammar into combinators", RT.keyword(null, "line"), Integer.valueOf(248), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/cfg.clj" });
    const__121 = (Var)RT.var("instaparse.cfg", "seq-nt");
    const__124 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "parser")) })), RT.keyword(null, "doc"), "Returns a sequence of all non-terminals in a parser built from combinators.", RT.keyword(null, "line"), Integer.valueOf(273), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/cfg.clj" });
    const__125 = (Var)RT.var("instaparse.cfg", "check-grammar");
    const__128 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "grammar-map")) })), RT.keyword(null, "doc"), "Throw error if grammar uses any invalid non-terminals in its productions", RT.keyword(null, "line"), Integer.valueOf(284), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/cfg.clj" });
    const__129 = (Var)RT.var("instaparse.cfg", "build-parser");
    const__132 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "spec"), Symbol.intern(null, "output-format")) })), RT.keyword(null, "line"), Integer.valueOf(295), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/cfg.clj" });
    const__133 = (Var)RT.var("instaparse.cfg", "build-parser-from-combinators");
    const__136 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "grammar-map"), Symbol.intern(null, "output-format"), Symbol.intern(null, "start-production")) })), RT.keyword(null, "line"), Integer.valueOf(307), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/cfg.clj" });
    const__137 = (Var)RT.var("instaparse.cfg", "ebnf");
    const__140 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "spec"), Symbol.intern(null, "&"), RT.map(new Object[] { RT.keyword(null, "as"), Symbol.intern(null, "opts") })) })), RT.keyword(null, "doc"), "Takes an EBNF grammar specification string and returns the combinator version.\nIf you give it the right-hand side of a rule, it will return the combinator equivalent.\nIf you give it a series of rules, it will give you back a grammar map.\nUseful for combining with other combinators.", RT.keyword(null, "line"), Integer.valueOf(315), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/cfg.clj" });
  }
  
  static  {
    __init0();
    __init1();
    Compiler.pushNSandLoader(RT.classForName("instaparse.cfg__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
