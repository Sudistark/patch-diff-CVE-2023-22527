package instaparse;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import instaparse.gll.Failure;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class gll__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__3;
  
  public static final AFn const__4;
  
  public static final Var const__5;
  
  public static final AFn const__13;
  
  public static final Var const__14;
  
  public static final AFn const__17;
  
  public static final Var const__18;
  
  public static final AFn const__21;
  
  public static final Var const__22;
  
  public static final AFn const__25;
  
  public static final Var const__26;
  
  public static final AFn const__29;
  
  public static final Var const__30;
  
  public static final AFn const__33;
  
  public static final Var const__34;
  
  public static final AFn const__37;
  
  public static final Var const__38;
  
  public static final AFn const__41;
  
  public static final Var const__42;
  
  public static final AFn const__44;
  
  public static final Object const__45;
  
  public static final Var const__46;
  
  public static final AFn const__49;
  
  public static final Var const__50;
  
  public static final AFn const__51;
  
  public static final AFn const__55;
  
  public static final Var const__56;
  
  public static final AFn const__59;
  
  public static final Var const__60;
  
  public static final AFn const__62;
  
  public static final Var const__63;
  
  public static final AFn const__65;
  
  public static final Var const__66;
  
  public static final AFn const__68;
  
  public static final Var const__69;
  
  public static final AFn const__71;
  
  public static final Var const__72;
  
  public static final AFn const__74;
  
  public static final Var const__75;
  
  public static final AFn const__77;
  
  public static final Var const__78;
  
  public static final AFn const__80;
  
  public static final Var const__81;
  
  public static final AFn const__83;
  
  public static final Var const__84;
  
  public static final AFn const__86;
  
  public static final Var const__87;
  
  public static final AFn const__89;
  
  public static final Var const__90;
  
  public static final AFn const__92;
  
  public static final Var const__93;
  
  public static final AFn const__95;
  
  public static final Var const__96;
  
  public static final AFn const__98;
  
  public static final Var const__99;
  
  public static final AFn const__101;
  
  public static final Var const__102;
  
  public static final AFn const__104;
  
  public static final Var const__105;
  
  public static final AFn const__108;
  
  public static final Var const__109;
  
  public static final AFn const__111;
  
  public static final Var const__112;
  
  public static final AFn const__114;
  
  public static final Var const__115;
  
  public static final AFn const__117;
  
  public static final Var const__118;
  
  public static final AFn const__120;
  
  public static final Var const__121;
  
  public static final AFn const__123;
  
  public static final Var const__124;
  
  public static final AFn const__126;
  
  public static final Var const__127;
  
  public static final AFn const__129;
  
  public static final Var const__130;
  
  public static final AFn const__132;
  
  public static final Var const__133;
  
  public static final AFn const__135;
  
  public static final Var const__136;
  
  public static final AFn const__138;
  
  public static final Var const__139;
  
  public static final AFn const__141;
  
  public static final Var const__142;
  
  public static final AFn const__144;
  
  public static final Var const__145;
  
  public static final AFn const__147;
  
  public static final Var const__148;
  
  public static final AFn const__150;
  
  public static final Var const__151;
  
  public static final AFn const__154;
  
  public static final Var const__155;
  
  public static final Object const__156;
  
  public static final Var const__157;
  
  public static final AFn const__159;
  
  public static final Var const__160;
  
  public static final Var const__161;
  
  public static final AFn const__164;
  
  public static final AFn const__167;
  
  public static final Var const__168;
  
  public static final AFn const__171;
  
  public static final Var const__172;
  
  public static final AFn const__175;
  
  public static final Var const__176;
  
  public static final AFn const__179;
  
  public static final Var const__180;
  
  public static final AFn const__183;
  
  public static final Var const__184;
  
  public static final AFn const__187;
  
  public static final Var const__188;
  
  public static final AFn const__191;
  
  public static final Var const__192;
  
  public static final AFn const__195;
  
  public static final Var const__196;
  
  public static final AFn const__199;
  
  public static final Var const__200;
  
  public static final AFn const__203;
  
  public static final Var const__204;
  
  public static final AFn const__207;
  
  public static final Var const__208;
  
  public static final AFn const__211;
  
  public static final Var const__212;
  
  public static final AFn const__215;
  
  public static final Var const__216;
  
  public static final AFn const__219;
  
  public static final Var const__220;
  
  public static final AFn const__223;
  
  public static final Var const__224;
  
  public static final AFn const__227;
  
  public static final Var const__228;
  
  public static final AFn const__230;
  
  public static final Var const__231;
  
  public static final Var const__232;
  
  public static final Var const__233;
  
  public static final Var const__234;
  
  public static final AFn const__237;
  
  public static final Var const__238;
  
  public static final AFn const__241;
  
  public static final Var const__242;
  
  public static final AFn const__244;
  
  public static final Var const__245;
  
  public static final AFn const__248;
  
  public static final Var const__249;
  
  public static final AFn const__252;
  
  public static final Var const__253;
  
  public static final AFn const__256;
  
  public static final Var const__257;
  
  public static final AFn const__260;
  
  public static final Var const__261;
  
  public static final AFn const__264;
  
  public static final Var const__265;
  
  public static final AFn const__268;
  
  public static final Var const__269;
  
  public static final AFn const__272;
  
  public static final Var const__273;
  
  public static final AFn const__276;
  
  public static final Var const__277;
  
  public static final AFn const__280;
  
  public static final Var const__281;
  
  public static final AFn const__284;
  
  public static final Var const__285;
  
  public static final AFn const__288;
  
  public static final Var const__289;
  
  public static final AFn const__292;
  
  public static final AFn const__295;
  
  public static final AFn const__298;
  
  public static final Var const__299;
  
  public static final AFn const__302;
  
  public static final AFn const__305;
  
  public static final AFn const__308;
  
  public static final Var const__309;
  
  public static final AFn const__312;
  
  public static final Var const__313;
  
  public static final AFn const__316;
  
  public static final Var const__317;
  
  public static final AFn const__320;
  
  public static final AFn const__323;
  
  public static final AFn const__326;
  
  public static final Var const__327;
  
  public static final AFn const__330;
  
  public static final AFn const__333;
  
  public static final AFn const__336;
  
  public static final AFn const__339;
  
  public static final AFn const__342;
  
  public static final AFn const__345;
  
  public static final AFn const__348;
  
  public static final AFn const__351;
  
  public static final AFn const__354;
  
  public static final AFn const__357;
  
  public static final AFn const__360;
  
  public static final AFn const__363;
  
  public static final AFn const__366;
  
  public static final AFn const__369;
  
  public static final AFn const__372;
  
  public static final AFn const__375;
  
  public static final AFn const__378;
  
  public static final AFn const__381;
  
  public static final AFn const__384;
  
  public static final AFn const__387;
  
  public static final AFn const__390;
  
  public static final AFn const__393;
  
  public static final AFn const__396;
  
  public static final AFn const__399;
  
  public static final Var const__400;
  
  public static final AFn const__403;
  
  public static final Var const__404;
  
  public static final AFn const__407;
  
  public static final Var const__408;
  
  public static final AFn const__411;
  
  public static final AFn const__414;
  
  public static final Var const__415;
  
  public static final AFn const__418;
  
  public static final Var const__419;
  
  public static final AFn const__422;
  
  public static final Var const__423;
  
  public static final AFn const__426;
  
  public static final Var const__427;
  
  public static final AFn const__430;
  
  public static final Var const__431;
  
  public static final AFn const__434;
  
  public static final Var const__435;
  
  public static final AFn const__438;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new gll.fn__19584());
    const__5.setMeta((IPersistentMap)const__13);
    const__5.bindRoot(new gll.dprintln());
    ((Var)const__5)
      .setMacro();
    const__14.setMeta((IPersistentMap)const__17);
    const__14.bindRoot(new gll.dpprint());
    ((Var)const__14)
      
      .setMacro();
    const__18.setMeta((IPersistentMap)const__21);
    const__18.bindRoot(new gll.profile());
    ((Var)const__18)
      .setMacro();
    const__22.setDynamic(true).setMeta((IPersistentMap)const__25);
    const__22.setDynamic(true).bindRoot(Boolean.FALSE);
    const__26.setMeta((IPersistentMap)const__29);
    const__26.bindRoot(new gll.log());
    ((Var)const__26)
      
      .setMacro();
    const__30.setMeta((IPersistentMap)const__33);
    const__30.bindRoot(new gll.attach_diagnostic_meta());
    ((Var)const__30)

      
      .setMacro();
    const__34.setMeta((IPersistentMap)const__37);
    const__34.bindRoot(new gll.bind_trace());
    ((Var)const__34)


      
      .setMacro();
    const__38.setMeta((IPersistentMap)const__41);
    const__38.bindRoot(new gll.trace_or_false());
    ((Var)const__38)


      
      .setMacro();
    const__42.setDynamic(true).setMeta((IPersistentMap)const__44);
    const__42.setDynamic(true).bindRoot(const__45);
    const__46.setMeta((IPersistentMap)const__49);
    const__50.setMeta((IPersistentMap)const__51);
    const__50.setMeta((IPersistentMap)const__55);
    const__50.bindRoot(new gll.string_context());
    const__56.setMeta((IPersistentMap)const__59);
    const__56.bindRoot(new gll.get_parser());
    const__60.setMeta((IPersistentMap)const__62);
    const__63.setMeta((IPersistentMap)const__65);
    const__66.setMeta((IPersistentMap)const__68);
    const__69.setMeta((IPersistentMap)const__71);
    const__72.setMeta((IPersistentMap)const__74);
    const__75.setMeta((IPersistentMap)const__77);
    const__78.setMeta((IPersistentMap)const__80);
    const__81.setMeta((IPersistentMap)const__83);
    const__84.setMeta((IPersistentMap)const__86);
    const__87.setMeta((IPersistentMap)const__89);
    const__90.setMeta((IPersistentMap)const__92);
    const__93.setMeta((IPersistentMap)const__95);
    const__96.setMeta((IPersistentMap)const__98);
    const__99.setMeta((IPersistentMap)const__101);
    const__102.setMeta((IPersistentMap)const__104);
    const__105.setMeta((IPersistentMap)const__108);
    const__105.bindRoot(new gll._parse());
    const__109.setMeta((IPersistentMap)const__111);
    const__112.setMeta((IPersistentMap)const__114);
    const__115.setMeta((IPersistentMap)const__117);
    const__118.setMeta((IPersistentMap)const__120);
    const__121.setMeta((IPersistentMap)const__123);
    const__124.setMeta((IPersistentMap)const__126);
    const__127.setMeta((IPersistentMap)const__129);
    const__130.setMeta((IPersistentMap)const__132);
    const__133.setMeta((IPersistentMap)const__135);
    const__136.setMeta((IPersistentMap)const__138);
    const__139.setMeta((IPersistentMap)const__141);
    const__142.setMeta((IPersistentMap)const__144);
    const__145.setMeta((IPersistentMap)const__147);
    const__148.setMeta((IPersistentMap)const__150);
    const__151.setMeta((IPersistentMap)const__154);
    const__151.bindRoot(new gll._full_parse());
    const__157.setMeta((IPersistentMap)const__159);
    const__157












      
      .bindRoot(((IFn)const__160.getRawRoot()).invoke(new Failure(null, null)));
    const__161.setMeta((IPersistentMap)const__164);
    const__161.bindRoot(new gll.text__GT_segment());
    const__46.setMeta((IPersistentMap)const__167);
    const__46.bindRoot(new gll.sub_sequence());
    const__168.setMeta((IPersistentMap)const__171);
    const__168.bindRoot(new gll.make_tramp());
    const__172.setMeta((IPersistentMap)const__175);
    const__172.bindRoot(new gll.make_success());
    const__176.setMeta((IPersistentMap)const__179);
    const__176.bindRoot(new gll.total_success_QMARK_());
    const__180.setMeta((IPersistentMap)const__183);
    const__180.bindRoot(new gll.make_node());
    const__184.setMeta((IPersistentMap)const__187);
    const__184.bindRoot(new gll.push_stack());
    const__188.setMeta((IPersistentMap)const__191);
    const__188.bindRoot(new gll.push_message());
    const__192.setMeta((IPersistentMap)const__195);
    const__192.bindRoot(new gll.listener_exists_QMARK_());
    const__196.setMeta((IPersistentMap)const__199);
    const__196.bindRoot(new gll.full_listener_exists_QMARK_());
    const__200.setMeta((IPersistentMap)const__203);
    const__200.bindRoot(new gll.result_exists_QMARK_());
    const__204.setMeta((IPersistentMap)const__207);
    const__204.bindRoot(new gll.full_result_exists_QMARK_());
    const__208.setMeta((IPersistentMap)const__211);
    const__208.bindRoot(new gll.node_get());
    const__212.setMeta((IPersistentMap)const__215);
    const__212.bindRoot(new gll.safe_with_meta());
    const__216.setMeta((IPersistentMap)const__219);
    const__216.bindRoot(new gll.push_result());
    const__220.setMeta((IPersistentMap)const__223);
    const__220.bindRoot(new gll.push_listener());
    const__224.setMeta((IPersistentMap)const__227);
    const__224.bindRoot(new gll.push_full_listener());
    const__228.setMeta((IPersistentMap)const__230);
    const__228



















































































































































      
      .bindRoot(((IFn)const__231.getRawRoot()).invoke(const__232.getRawRoot(), const__233.getRawRoot()));
    const__234.setMeta((IPersistentMap)const__237);
    const__234.bindRoot(new gll.push_negative_listener());
    const__238.setMeta((IPersistentMap)const__241);
    const__238.bindRoot(new gll.success());
    ((Var)const__238)












      
      .setMacro();
    const__242.setMeta((IPersistentMap)const__244);
    const__245.setMeta((IPersistentMap)const__248);
    const__245.bindRoot(new gll.fail());
    const__249.setMeta((IPersistentMap)const__252);
    const__249.bindRoot(new gll.step());
    const__253.setMeta((IPersistentMap)const__256);
    const__253.bindRoot(new gll.run());
    const__257.setMeta((IPersistentMap)const__260);
    const__257.bindRoot(new gll.NodeListener());
    const__261.setMeta((IPersistentMap)const__264);
    const__261.bindRoot(new gll.LookListener());
    const__265.setMeta((IPersistentMap)const__268);
    const__265.bindRoot(new gll.CatListener());
    const__269.setMeta((IPersistentMap)const__272);
    const__269.bindRoot(new gll.CatFullListener());
    const__273.setMeta((IPersistentMap)const__276);
    const__273.bindRoot(new gll.PlusListener());
    const__277.setMeta((IPersistentMap)const__280);
    const__277.bindRoot(new gll.PlusFullListener());
    const__281.setMeta((IPersistentMap)const__284);
    const__281.bindRoot(new gll.RepListener());
    const__285.setMeta((IPersistentMap)const__288);
    const__285.bindRoot(new gll.RepFullListener());
    const__289.setMeta((IPersistentMap)const__292);
    const__289.bindRoot(new gll.TopListener());
    const__66.setMeta((IPersistentMap)const__295);
    const__66.bindRoot(new gll.string_parse());
    const__115.setMeta((IPersistentMap)const__298);
    const__115.bindRoot(new gll.string_full_parse());
    const__299.setMeta((IPersistentMap)const__302);
    const__299.bindRoot(new gll.equals_ignore_case());
    const__99.setMeta((IPersistentMap)const__305);
    const__99.bindRoot(new gll.string_case_insensitive_parse());
    const__145.setMeta((IPersistentMap)const__308);
    const__145.bindRoot(new gll.string_case_insensitive_full_parse());
    const__309.setMeta((IPersistentMap)const__312);
    const__309.bindRoot(new gll.single_char_code_at());
    const__313.setMeta((IPersistentMap)const__316);
    const__313.bindRoot(new gll.unicode_code_point_at());
    const__317.setMeta((IPersistentMap)const__320);
    const__317.bindRoot(new gll.code_point__GT_chars());
    const__102.setMeta((IPersistentMap)const__323);
    const__102.bindRoot(new gll.char_range_parse());
    const__148.setMeta((IPersistentMap)const__326);
    const__148.bindRoot(new gll.char_range_full_parse());
    const__327.setMeta((IPersistentMap)const__330);
    const__327.bindRoot(new gll.re_match_at_front());
    const__84.setMeta((IPersistentMap)const__333);
    const__84.bindRoot(new gll.regexp_parse());
    const__136.setMeta((IPersistentMap)const__336);
    const__136.bindRoot(new gll.regexp_full_parse());
    const__63.setMeta((IPersistentMap)const__339);
    const__63.bindRoot(new gll.cat_parse());
    const__112.setMeta((IPersistentMap)const__342);
    const__112.bindRoot(new gll.cat_full_parse());
    const__78.setMeta((IPersistentMap)const__345);
    const__78.bindRoot(new gll.plus_parse());
    const__127.setMeta((IPersistentMap)const__348);
    const__127.bindRoot(new gll.plus_full_parse());
    const__90.setMeta((IPersistentMap)const__351);
    const__90.bindRoot(new gll.rep_parse());
    const__133.setMeta((IPersistentMap)const__354);
    const__133.bindRoot(new gll.rep_full_parse());
    const__81.setMeta((IPersistentMap)const__357);
    const__81.bindRoot(new gll.star_parse());
    const__130.setMeta((IPersistentMap)const__360);
    const__130.bindRoot(new gll.star_full_parse());
    const__60.setMeta((IPersistentMap)const__363);
    const__60.bindRoot(new gll.alt_parse());
    const__109.setMeta((IPersistentMap)const__366);
    const__109.bindRoot(new gll.alt_full_parse());
    const__96.setMeta((IPersistentMap)const__369);
    const__96.bindRoot(new gll.ordered_alt_parse());
    const__142.setMeta((IPersistentMap)const__372);
    const__142.bindRoot(new gll.ordered_alt_full_parse());
    const__75.setMeta((IPersistentMap)const__375);
    const__75.bindRoot(new gll.opt_parse());
    const__124.setMeta((IPersistentMap)const__378);
    const__124.bindRoot(new gll.opt_full_parse());
    const__72.setMeta((IPersistentMap)const__381);
    const__72.bindRoot(new gll.non_terminal_parse());
    const__121.setMeta((IPersistentMap)const__384);
    const__121.bindRoot(new gll.non_terminal_full_parse());
    const__87.setMeta((IPersistentMap)const__387);
    const__87.bindRoot(new gll.lookahead_parse());
    const__139.setMeta((IPersistentMap)const__390);
    const__139.bindRoot(new gll.lookahead_full_parse());
    const__93.setMeta((IPersistentMap)const__393);
    const__93.bindRoot(new gll.negative_lookahead_parse());
    const__69.setMeta((IPersistentMap)const__396);
    const__69.bindRoot(new gll.epsilon_parse());
    const__118.setMeta((IPersistentMap)const__399);
    const__118.bindRoot(new gll.epsilon_full_parse());
    const__400.setMeta((IPersistentMap)const__403);
    const__400.bindRoot(new gll.start_parser());
    const__404.setMeta((IPersistentMap)const__407);
    const__404.bindRoot(new gll.parses());
    const__408.setMeta((IPersistentMap)const__411);
    const__408.bindRoot(new gll.parse());
    const__242.setMeta((IPersistentMap)const__414);
    const__242.bindRoot(new gll.build_node_with_meta());
    const__415.setMeta((IPersistentMap)const__418);
    const__415.bindRoot(new gll.build_total_failure_node());
    const__419.setMeta((IPersistentMap)const__422);
    const__419.bindRoot(new gll.parses_total_after_fail());
    const__423.setMeta((IPersistentMap)const__426);
    const__423.bindRoot(new gll.merge_meta());
    const__427.setMeta((IPersistentMap)const__430);
    const__427.bindRoot(new gll.parses_total());
    const__431.setMeta((IPersistentMap)const__434);
    const__431.bindRoot(new gll.parse_total_after_fail());
    const__435.setMeta((IPersistentMap)const__438);
    const__435.bindRoot(new gll.parse_total());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "instaparse.gll")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "The heart of the parsing mechanism.  Contains the trampoline structure,\n   the parsing dispatch function, the nodes where listeners are stored,\n   the different types of listeners, and the loop for executing the various\n   listeners and parse commands that are on the stack." }));
    const__3 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "The heart of the parsing mechanism.  Contains the trampoline structure,\n   the parsing dispatch function, the nodes where listeners are stored,\n   the different types of listeners, and the loop for executing the various\n   listeners and parse commands that are on the stack." });
    const__4 = (AFn)Symbol.intern(null, "clojure.core");
    const__5 = (Var)RT.var("instaparse.gll", "dprintln");
    const__13 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "line"), Integer.valueOf(66), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__14 = (Var)RT.var("instaparse.gll", "dpprint");
    const__17 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "line"), Integer.valueOf(68), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__18 = (Var)RT.var("instaparse.gll", "profile");
    const__21 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "line"), Integer.valueOf(72), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__22 = (Var)RT.var("instaparse.gll", "*trace*");
    const__25 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(91), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__26 = (Var)RT.var("instaparse.gll", "log");
    const__29 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "tramp"), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "line"), Integer.valueOf(92), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__30 = (Var)RT.var("instaparse.gll", "attach-diagnostic-meta");
    const__33 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "metadata")) })), RT.keyword(null, "line"), Integer.valueOf(95), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__34 = (Var)RT.var("instaparse.gll", "bind-trace");
    const__37 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "trace?"), Symbol.intern(null, "body")) })), RT.keyword(null, "line"), Integer.valueOf(99), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__38 = (Var)RT.var("instaparse.gll", "trace-or-false");
    const__41 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(103), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__42 = (Var)RT.var("instaparse.gll", "*diagnostic-char-lookahead*");
    const__44 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(109), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__45 = Long.valueOf(10L);
    const__46 = (Var)RT.var("instaparse.gll", "sub-sequence");
    const__49 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(111), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__50 = (Var)RT.var("instaparse.gll", "string-context");
    const__51 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(111), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__55 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "text")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "CharSequence") })), Symbol.intern(null, "index")) })), RT.keyword(null, "line"), Integer.valueOf(114), RT.keyword(null, "column"), Integer.valueOf(4), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__56 = (Var)RT.var("instaparse.gll", "get-parser");
    const__59 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "grammar"), Symbol.intern(null, "p")) })), RT.keyword(null, "line"), Integer.valueOf(127), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__60 = (Var)RT.var("instaparse.gll", "alt-parse");
    const__62 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(130), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__63 = (Var)RT.var("instaparse.gll", "cat-parse");
    const__65 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(130), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__66 = (Var)RT.var("instaparse.gll", "string-parse");
    const__68 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(130), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__69 = (Var)RT.var("instaparse.gll", "epsilon-parse");
    const__71 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(130), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__72 = (Var)RT.var("instaparse.gll", "non-terminal-parse");
    const__74 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(130), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__75 = (Var)RT.var("instaparse.gll", "opt-parse");
    const__77 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(130), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__78 = (Var)RT.var("instaparse.gll", "plus-parse");
    const__80 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(130), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__81 = (Var)RT.var("instaparse.gll", "star-parse");
    const__83 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(130), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__84 = (Var)RT.var("instaparse.gll", "regexp-parse");
    const__86 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(130), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__87 = (Var)RT.var("instaparse.gll", "lookahead-parse");
    const__89 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(130), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__90 = (Var)RT.var("instaparse.gll", "rep-parse");
    const__92 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(130), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__93 = (Var)RT.var("instaparse.gll", "negative-lookahead-parse");
    const__95 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(130), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__96 = (Var)RT.var("instaparse.gll", "ordered-alt-parse");
    const__98 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(130), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__99 = (Var)RT.var("instaparse.gll", "string-case-insensitive-parse");
  }
  
  public static void __init1() {
    const__101 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(130), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__102 = (Var)RT.var("instaparse.gll", "char-range-parse");
    const__104 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(130), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__105 = (Var)RT.var("instaparse.gll", "-parse");
    const__108 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "parser"), Symbol.intern(null, "index"), Symbol.intern(null, "tramp")) })), RT.keyword(null, "line"), Integer.valueOf(134), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__109 = (Var)RT.var("instaparse.gll", "alt-full-parse");
    const__111 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(155), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__112 = (Var)RT.var("instaparse.gll", "cat-full-parse");
    const__114 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(155), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__115 = (Var)RT.var("instaparse.gll", "string-full-parse");
    const__117 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(155), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__118 = (Var)RT.var("instaparse.gll", "epsilon-full-parse");
    const__120 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(155), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__121 = (Var)RT.var("instaparse.gll", "non-terminal-full-parse");
    const__123 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(155), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__124 = (Var)RT.var("instaparse.gll", "opt-full-parse");
    const__126 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(155), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__127 = (Var)RT.var("instaparse.gll", "plus-full-parse");
    const__129 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(155), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__130 = (Var)RT.var("instaparse.gll", "star-full-parse");
    const__132 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(155), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__133 = (Var)RT.var("instaparse.gll", "rep-full-parse");
    const__135 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(155), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__136 = (Var)RT.var("instaparse.gll", "regexp-full-parse");
    const__138 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(155), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__139 = (Var)RT.var("instaparse.gll", "lookahead-full-parse");
    const__141 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(155), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__142 = (Var)RT.var("instaparse.gll", "ordered-alt-full-parse");
    const__144 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(155), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__145 = (Var)RT.var("instaparse.gll", "string-case-insensitive-full-parse");
    const__147 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(155), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__148 = (Var)RT.var("instaparse.gll", "char-range-full-parse");
    const__150 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(155), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__151 = (Var)RT.var("instaparse.gll", "-full-parse");
    const__154 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "parser"), Symbol.intern(null, "index"), Symbol.intern(null, "tramp")) })), RT.keyword(null, "line"), Integer.valueOf(159), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__155 = (Var)RT.var("clojure.core", "print-method");
    const__156 = RT.classForName("instaparse.gll.Failure");
    const__157 = (Var)RT.var("instaparse.gll", "failure-type");
    const__159 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(197), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__160 = (Var)RT.var("clojure.core", "type");
    const__161 = (Var)RT.var("instaparse.gll", "text->segment");
    const__164 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "text")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "CharSequence") }))) })), RT.keyword(null, "doc"), "Converts text to a Segment, which has fast subsequencing", RT.keyword(null, "line"), Integer.valueOf(200), RT.keyword(null, "column"), Integer.valueOf(4), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__167 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(((IObj)Symbol.intern(null, "text")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "CharSequence") })), Symbol.intern(null, "start"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "java.lang.CharSequence") })), ((IObj)Tuple.create(((IObj)Symbol.intern(null, "text")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "CharSequence") })), Symbol.intern(null, "start"), Symbol.intern(null, "end"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "java.lang.CharSequence") })) })), RT.keyword(null, "doc"), "Like clojure.core/subs but consumes and returns a CharSequence", RT.keyword(null, "line"), Integer.valueOf(211), RT.keyword(null, "column"), Integer.valueOf(4), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__168 = (Var)RT.var("instaparse.gll", "make-tramp");
    const__171 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "grammar"), Symbol.intern(null, "text")), Tuple.create(Symbol.intern(null, "grammar"), Symbol.intern(null, "text"), Symbol.intern(null, "segment")), Tuple.create(Symbol.intern(null, "grammar"), Symbol.intern(null, "text"), Symbol.intern(null, "fail-index"), Symbol.intern(null, "node-builder")), Tuple.create(Symbol.intern(null, "grammar"), Symbol.intern(null, "text"), Symbol.intern(null, "segment"), Symbol.intern(null, "fail-index"), Symbol.intern(null, "node-builder")) })), RT.keyword(null, "line"), Integer.valueOf(233), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__172 = (Var)RT.var("instaparse.gll", "make-success");
    const__175 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "result"), Symbol.intern(null, "index")) })), RT.keyword(null, "line"), Integer.valueOf(244), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__176 = (Var)RT.var("instaparse.gll", "total-success?");
    const__179 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "tramp"), Symbol.intern(null, "s")) })), RT.keyword(null, "line"), Integer.valueOf(245), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__180 = (Var)RT.var("instaparse.gll", "make-node");
    const__183 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(255), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__184 = (Var)RT.var("instaparse.gll", "push-stack");
    const__187 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "tramp"), Symbol.intern(null, "item")) })), RT.keyword(null, "doc"), "Pushes an item onto the trampoline's stack", RT.keyword(null, "line"), Integer.valueOf(263), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__188 = (Var)RT.var("instaparse.gll", "push-message");
    const__191 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "tramp"), Symbol.intern(null, "listener"), Symbol.intern(null, "result")) })), RT.keyword(null, "doc"), "Pushes onto stack a message to a given listener about a result", RT.keyword(null, "line"), Integer.valueOf(269), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__192 = (Var)RT.var("instaparse.gll", "listener-exists?");
    const__195 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "tramp"), Symbol.intern(null, "node-key")) })), RT.keyword(null, "doc"), "Tests whether node already has a listener", RT.keyword(null, "line"), Integer.valueOf(286), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__196 = (Var)RT.var("instaparse.gll", "full-listener-exists?");
    const__199 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "tramp"), Symbol.intern(null, "node-key")) })), RT.keyword(null, "doc"), "Tests whether node already has a listener or full-listener", RT.keyword(null, "line"), Integer.valueOf(293), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
  }
  
  public static void __init2() {
    const__200 = (Var)RT.var("instaparse.gll", "result-exists?");
    const__203 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "tramp"), Symbol.intern(null, "node-key")) })), RT.keyword(null, "doc"), "Tests whether node has a result or full-result", RT.keyword(null, "line"), Integer.valueOf(301), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__204 = (Var)RT.var("instaparse.gll", "full-result-exists?");
    const__207 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "tramp"), Symbol.intern(null, "node-key")) })), RT.keyword(null, "doc"), "Tests whether node has a full-result", RT.keyword(null, "line"), Integer.valueOf(309), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__208 = (Var)RT.var("instaparse.gll", "node-get");
    const__211 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "tramp"), Symbol.intern(null, "node-key")) })), RT.keyword(null, "doc"), "Gets node if already exists, otherwise creates one", RT.keyword(null, "line"), Integer.valueOf(316), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__212 = (Var)RT.var("instaparse.gll", "safe-with-meta");
    const__215 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "obj"), Symbol.intern(null, "metamap")) })), RT.keyword(null, "line"), Integer.valueOf(327), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__216 = (Var)RT.var("instaparse.gll", "push-result");
    const__219 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "tramp"), Symbol.intern(null, "node-key"), Symbol.intern(null, "result")) })), RT.keyword(null, "doc"), "Pushes a result into the trampoline's node.\n   Categorizes as either result or full-result.\n   Schedules notification to all existing listeners of result\n   (Full listeners only get notified about full results)", RT.keyword(null, "line"), Integer.valueOf(333), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__220 = (Var)RT.var("instaparse.gll", "push-listener");
    const__223 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "tramp"), Symbol.intern(null, "node-key"), Symbol.intern(null, "listener")) })), RT.keyword(null, "doc"), "Pushes a listener into the trampoline's node.\n   Schedules notification to listener of all existing results.\n   Initiates parse if necessary", RT.keyword(null, "line"), Integer.valueOf(371), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__224 = (Var)RT.var("instaparse.gll", "push-full-listener");
    const__227 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "tramp"), Symbol.intern(null, "node-key"), Symbol.intern(null, "listener")) })), RT.keyword(null, "doc"), "Pushes a listener into the trampoline's node.\n   Schedules notification to listener of all existing full results.", RT.keyword(null, "line"), Integer.valueOf(389), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__228 = (Var)RT.var("instaparse.gll", "merge-negative-listeners");
    const__230 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(403), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__231 = (Var)RT.var("clojure.core", "partial");
    const__232 = (Var)RT.var("clojure.core", "merge-with");
    const__233 = (Var)RT.var("clojure.core", "into");
    const__234 = (Var)RT.var("instaparse.gll", "push-negative-listener");
    const__237 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "tramp"), Symbol.intern(null, "creator"), Symbol.intern(null, "negative-listener")) })), RT.keyword(null, "doc"), "Pushes a thunk onto the trampoline's negative-listener stack.", RT.keyword(null, "line"), Integer.valueOf(405), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__238 = (Var)RT.var("instaparse.gll", "success");
    const__241 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "tramp"), Symbol.intern(null, "node-key"), Symbol.intern(null, "result"), Symbol.intern(null, "end")) })), RT.keyword(null, "line"), Integer.valueOf(417), RT.keyword(null, "column"), Integer.valueOf(4), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__242 = (Var)RT.var("instaparse.gll", "build-node-with-meta");
    const__244 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(420), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__245 = (Var)RT.var("instaparse.gll", "fail");
    const__248 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "tramp"), Symbol.intern(null, "node-key"), Symbol.intern(null, "index"), Symbol.intern(null, "reason")) })), RT.keyword(null, "line"), Integer.valueOf(421), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__249 = (Var)RT.var("instaparse.gll", "step");
    const__252 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "stack")) })), RT.keyword(null, "doc"), "Executes one thing on the stack (not threadsafe)", RT.keyword(null, "line"), Integer.valueOf(443), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__253 = (Var)RT.var("instaparse.gll", "run");
    const__256 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "tramp")), Tuple.create(Symbol.intern(null, "tramp"), Symbol.intern(null, "found-result?")) })), RT.keyword(null, "doc"), "Executes the stack until exhausted", RT.keyword(null, "line"), Integer.valueOf(451), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__257 = (Var)RT.var("instaparse.gll", "NodeListener");
    const__260 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "node-key"), Symbol.intern(null, "tramp")) })), RT.keyword(null, "line"), Integer.valueOf(502), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__261 = (Var)RT.var("instaparse.gll", "LookListener");
    const__264 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "node-key"), Symbol.intern(null, "tramp")) })), RT.keyword(null, "line"), Integer.valueOf(508), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__265 = (Var)RT.var("instaparse.gll", "CatListener");
    const__268 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "results-so-far"), Symbol.intern(null, "parser-sequence"), Symbol.intern(null, "node-key"), Symbol.intern(null, "tramp")) })), RT.keyword(null, "line"), Integer.valueOf(518), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__269 = (Var)RT.var("instaparse.gll", "CatFullListener");
    const__272 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "results-so-far"), Symbol.intern(null, "parser-sequence"), Symbol.intern(null, "node-key"), Symbol.intern(null, "tramp")) })), RT.keyword(null, "line"), Integer.valueOf(531), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__273 = (Var)RT.var("instaparse.gll", "PlusListener");
    const__276 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "results-so-far"), Symbol.intern(null, "parser"), Symbol.intern(null, "prev-index"), Symbol.intern(null, "node-key"), Symbol.intern(null, "tramp")) })), RT.keyword(null, "line"), Integer.valueOf(554), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__277 = (Var)RT.var("instaparse.gll", "PlusFullListener");
    const__280 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "results-so-far"), Symbol.intern(null, "parser"), Symbol.intern(null, "prev-index"), Symbol.intern(null, "node-key"), Symbol.intern(null, "tramp")) })), RT.keyword(null, "line"), Integer.valueOf(566), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__281 = (Var)RT.var("instaparse.gll", "RepListener");
    const__284 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { RT.vector(new Object[] { Symbol.intern(null, "results-so-far"), Symbol.intern(null, "n-results-so-far"), Symbol.intern(null, "parser"), Symbol.intern(null, "m"), Symbol.intern(null, "n"), Symbol.intern(null, "prev-index"), Symbol.intern(null, "node-key"), Symbol.intern(null, "tramp") }) })), RT.keyword(null, "line"), Integer.valueOf(581), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__285 = (Var)RT.var("instaparse.gll", "RepFullListener");
    const__288 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { RT.vector(new Object[] { Symbol.intern(null, "results-so-far"), Symbol.intern(null, "n-results-so-far"), Symbol.intern(null, "parser"), Symbol.intern(null, "m"), Symbol.intern(null, "n"), Symbol.intern(null, "prev-index"), Symbol.intern(null, "node-key"), Symbol.intern(null, "tramp") }) })), RT.keyword(null, "line"), Integer.valueOf(595), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__289 = (Var)RT.var("instaparse.gll", "TopListener");
    const__292 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "tramp")) })), RT.keyword(null, "line"), Integer.valueOf(612), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__295 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "index"), Symbol.intern(null, "tramp")) })), RT.keyword(null, "line"), Integer.valueOf(618), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__298 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "index"), Symbol.intern(null, "tramp")) })), RT.keyword(null, "line"), Integer.valueOf(629), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__299 = (Var)RT.var("instaparse.gll", "equals-ignore-case");
  }
  
  public static void __init3() {
    const__302 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "s1")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") })), ((IObj)Symbol.intern(null, "s2")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") }))) })), RT.keyword(null, "line"), Integer.valueOf(641), RT.keyword(null, "column"), Integer.valueOf(4), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__305 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "index"), Symbol.intern(null, "tramp")) })), RT.keyword(null, "line"), Integer.valueOf(647), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__308 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "index"), Symbol.intern(null, "tramp")) })), RT.keyword(null, "line"), Integer.valueOf(658), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__309 = (Var)RT.var("instaparse.gll", "single-char-code-at");
    const__312 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "text")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "CharSequence") })), Symbol.intern(null, "index")) })), RT.keyword(null, "doc"), "Returns the int value of a single char at the given index,\n  assuming we're looking for up to 0xFFFF (the maximum value for a\n  UTF-16 single char).", RT.keyword(null, "line"), Integer.valueOf(670), RT.keyword(null, "column"), Integer.valueOf(4), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__313 = (Var)RT.var("instaparse.gll", "unicode-code-point-at");
    const__316 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "text")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "CharSequence") })), Symbol.intern(null, "index")) })), RT.keyword(null, "doc"), "Returns the unicode code point representing one or two chars at\n  the given index.", RT.keyword(null, "line"), Integer.valueOf(682), RT.keyword(null, "column"), Integer.valueOf(4), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__317 = (Var)RT.var("instaparse.gll", "code-point->chars");
    const__320 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "code-point")) })), RT.keyword(null, "doc"), "Takes a Unicode code point, and returns a string of one or two chars.", RT.keyword(null, "line"), Integer.valueOf(693), RT.keyword(null, "column"), Integer.valueOf(4), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__323 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "index"), Symbol.intern(null, "tramp")) })), RT.keyword(null, "line"), Integer.valueOf(702), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__326 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "index"), Symbol.intern(null, "tramp")) })), RT.keyword(null, "line"), Integer.valueOf(723), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__327 = (Var)RT.var("instaparse.gll", "re-match-at-front");
    const__330 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "regexp"), Symbol.intern(null, "text")) })), RT.keyword(null, "line"), Integer.valueOf(745), RT.keyword(null, "column"), Integer.valueOf(4), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__333 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "index"), Symbol.intern(null, "tramp")) })), RT.keyword(null, "line"), Integer.valueOf(757), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__336 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "index"), Symbol.intern(null, "tramp")) })), RT.keyword(null, "line"), Integer.valueOf(768), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__339 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "index"), Symbol.intern(null, "tramp")) })), RT.keyword(null, "line"), Integer.valueOf(780), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__342 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "index"), Symbol.intern(null, "tramp")) })), RT.keyword(null, "line"), Integer.valueOf(788), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__345 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "index"), Symbol.intern(null, "tramp")) })), RT.keyword(null, "line"), Integer.valueOf(796), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__348 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "index"), Symbol.intern(null, "tramp")) })), RT.keyword(null, "line"), Integer.valueOf(802), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__351 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "index"), Symbol.intern(null, "tramp")) })), RT.keyword(null, "line"), Integer.valueOf(808), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__354 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "index"), Symbol.intern(null, "tramp")) })), RT.keyword(null, "line"), Integer.valueOf(822), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__357 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "index"), Symbol.intern(null, "tramp")) })), RT.keyword(null, "line"), Integer.valueOf(836), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__360 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "index"), Symbol.intern(null, "tramp")) })), RT.keyword(null, "line"), Integer.valueOf(843), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__363 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "index"), Symbol.intern(null, "tramp")) })), RT.keyword(null, "line"), Integer.valueOf(852), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__366 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "index"), Symbol.intern(null, "tramp")) })), RT.keyword(null, "line"), Integer.valueOf(858), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__369 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "index"), Symbol.intern(null, "tramp")) })), RT.keyword(null, "line"), Integer.valueOf(864), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__372 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "index"), Symbol.intern(null, "tramp")) })), RT.keyword(null, "line"), Integer.valueOf(877), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__375 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "index"), Symbol.intern(null, "tramp")) })), RT.keyword(null, "line"), Integer.valueOf(890), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__378 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "index"), Symbol.intern(null, "tramp")) })), RT.keyword(null, "line"), Integer.valueOf(896), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__381 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "index"), Symbol.intern(null, "tramp")) })), RT.keyword(null, "line"), Integer.valueOf(904), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__384 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "index"), Symbol.intern(null, "tramp")) })), RT.keyword(null, "line"), Integer.valueOf(909), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__387 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "index"), Symbol.intern(null, "tramp")) })), RT.keyword(null, "line"), Integer.valueOf(914), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__390 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "index"), Symbol.intern(null, "tramp")) })), RT.keyword(null, "line"), Integer.valueOf(919), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__393 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "index"), Symbol.intern(null, "tramp")) })), RT.keyword(null, "line"), Integer.valueOf(934), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__396 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "index"), Symbol.intern(null, "tramp")) })), RT.keyword(null, "line"), Integer.valueOf(953), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__399 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "index"), Symbol.intern(null, "tramp")) })), RT.keyword(null, "line"), Integer.valueOf(955), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
  }
  
  public static void __init4() {
    const__400 = (Var)RT.var("instaparse.gll", "start-parser");
    const__403 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "tramp"), Symbol.intern(null, "parser"), Symbol.intern(null, "partial?")) })), RT.keyword(null, "line"), Integer.valueOf(963), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__404 = (Var)RT.var("instaparse.gll", "parses");
    const__407 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "grammar"), Symbol.intern(null, "start"), Symbol.intern(null, "text"), Symbol.intern(null, "partial?")) })), RT.keyword(null, "line"), Integer.valueOf(968), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__408 = (Var)RT.var("instaparse.gll", "parse");
    const__411 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "grammar"), Symbol.intern(null, "start"), Symbol.intern(null, "text"), Symbol.intern(null, "partial?")) })), RT.keyword(null, "line"), Integer.valueOf(978), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__414 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "node-builder"), Symbol.intern(null, "tag"), Symbol.intern(null, "content"), Symbol.intern(null, "start"), Symbol.intern(null, "end")) })), RT.keyword(null, "line"), Integer.valueOf(990), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__415 = (Var)RT.var("instaparse.gll", "build-total-failure-node");
    const__418 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "node-builder"), Symbol.intern(null, "start"), Symbol.intern(null, "text")) })), RT.keyword(null, "line"), Integer.valueOf(995), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__419 = (Var)RT.var("instaparse.gll", "parses-total-after-fail");
    const__422 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "grammar"), Symbol.intern(null, "start"), Symbol.intern(null, "text"), Symbol.intern(null, "fail-index"), Symbol.intern(null, "partial?"), Symbol.intern(null, "node-builder")) })), RT.keyword(null, "line"), Integer.valueOf(1002), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__423 = (Var)RT.var("instaparse.gll", "merge-meta");
    const__426 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "obj"), Symbol.intern(null, "metamap")) })), RT.keyword(null, "doc"), "A variation on with-meta that merges the existing metamap into the new metamap,\nrather than overwriting the metamap entirely.", RT.keyword(null, "line"), Integer.valueOf(1013), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__427 = (Var)RT.var("instaparse.gll", "parses-total");
    const__430 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "grammar"), Symbol.intern(null, "start"), Symbol.intern(null, "text"), Symbol.intern(null, "partial?"), Symbol.intern(null, "node-builder")) })), RT.keyword(null, "line"), Integer.valueOf(1019), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__431 = (Var)RT.var("instaparse.gll", "parse-total-after-fail");
    const__434 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "grammar"), Symbol.intern(null, "start"), Symbol.intern(null, "text"), Symbol.intern(null, "fail-index"), Symbol.intern(null, "partial?"), Symbol.intern(null, "node-builder")) })), RT.keyword(null, "line"), Integer.valueOf(1031), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
    const__435 = (Var)RT.var("instaparse.gll", "parse-total");
    const__438 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "grammar"), Symbol.intern(null, "start"), Symbol.intern(null, "text"), Symbol.intern(null, "partial?"), Symbol.intern(null, "node-builder")) })), RT.keyword(null, "line"), Integer.valueOf(1042), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/gll.clj" });
  }
  
  static  {
    __init0();
    __init1();
    __init2();
    __init3();
    __init4();
    Compiler.pushNSandLoader(RT.classForName("instaparse.gll__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
