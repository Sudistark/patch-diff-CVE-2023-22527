package instaparse;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IPersistentMap;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class reduction__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__11;
  
  public static final Var const__12;
  
  public static final AFn const__15;
  
  public static final Var const__16;
  
  public static final AFn const__18;
  
  public static final AFn const__21;
  
  public static final Var const__22;
  
  public static final AFn const__25;
  
  public static final Var const__26;
  
  public static final AFn const__29;
  
  public static final Var const__30;
  
  public static final AFn const__33;
  
  public static final Keyword const__34;
  
  public static final Keyword const__35;
  
  public static final Var const__36;
  
  public static final AFn const__38;
  
  public static final Var const__39;
  
  public static final AFn const__41;
  
  public static final Var const__42;
  
  public static final AFn const__45;
  
  public static final Var const__46;
  
  public static final AFn const__49;
  
  public static void load() { LockingTransaction.runInTransaction((Callable)new reduction.fn__19433());
    const__3.setMeta((IPersistentMap)const__11);
    const__3.bindRoot(new reduction.singleton_QMARK_());
    const__12.setMeta((IPersistentMap)const__15);
    const__12.bindRoot(new reduction.red());
    const__16.setMeta((IPersistentMap)const__18);
    const__16.bindRoot(const__21);
    const__22.setMeta((IPersistentMap)const__25);
    const__22.bindRoot(new reduction.HiccupNonTerminalReduction());
    const__26.setMeta((IPersistentMap)const__29);
    const__26.bindRoot(new reduction.EnliveNonTerminalReduction());
    const__30.setMeta((IPersistentMap)const__33);
    const__30.bindRoot(RT.mapUniqueKeys(new Object[] { const__34, const__22.getRawRoot(), const__35, const__26.getRawRoot() }));
    const__36.setMeta((IPersistentMap)const__38);
    const__36.bindRoot(RT.mapUniqueKeys(new Object[] { const__35, new reduction.fn__19440(), const__34, new reduction.fn__19442() }));
    const__39.setMeta((IPersistentMap)const__41);
    const__39.bindRoot(const__34);
    const__42.setMeta((IPersistentMap)const__45);
    const__42.bindRoot(new reduction.apply_reduction());
    const__46.setMeta((IPersistentMap)const__49);
    const__46.bindRoot(new reduction.apply_standard_reductions()); }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "instaparse.reduction");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("instaparse.reduction", "singleton?");
    const__11 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })), RT.keyword(null, "line"), Integer.valueOf(7), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/reduction.clj" });
    const__12 = (Var)RT.var("instaparse.reduction", "red");
    const__15 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "parser"), Symbol.intern(null, "f")) })), RT.keyword(null, "line"), Integer.valueOf(15), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/reduction.clj" });
    const__16 = (Var)RT.var("instaparse.reduction", "raw-non-terminal-reduction");
    const__18 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(19), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/reduction.clj" });
    const__21 = (AFn)RT.map(new Object[] { RT.keyword(null, "reduction-type"), RT.keyword(null, "raw") });
    const__22 = (Var)RT.var("instaparse.reduction", "HiccupNonTerminalReduction");
    const__25 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "key")) })), RT.keyword(null, "line"), Integer.valueOf(21), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/reduction.clj" });
    const__26 = (Var)RT.var("instaparse.reduction", "EnliveNonTerminalReduction");
    const__29 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "key")) })), RT.keyword(null, "line"), Integer.valueOf(24), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/reduction.clj" });
    const__30 = (Var)RT.var("instaparse.reduction", "reduction-types");
    const__33 = (AFn)RT.map(new Object[] { RT.keyword(null, "constant"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(27), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/reduction.clj" });
    const__34 = (Keyword)RT.keyword(null, "hiccup");
    const__35 = (Keyword)RT.keyword(null, "enlive");
    const__36 = (Var)RT.var("instaparse.reduction", "node-builders");
    const__38 = (AFn)RT.map(new Object[] { RT.keyword(null, "constant"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(31), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/reduction.clj" });
    const__39 = (Var)RT.var("instaparse.reduction", "standard-non-terminal-reduction");
    const__41 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(37), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/reduction.clj" });
    const__42 = (Var)RT.var("instaparse.reduction", "apply-reduction");
    const__45 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "result")) })), RT.keyword(null, "line"), Integer.valueOf(39), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/reduction.clj" });
    const__46 = (Var)RT.var("instaparse.reduction", "apply-standard-reductions");
    const__49 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "grammar")), Tuple.create(Symbol.intern(null, "reduction-type"), Symbol.intern(null, "grammar")) })), RT.keyword(null, "line"), Integer.valueOf(48), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/reduction.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("instaparse.reduction__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
