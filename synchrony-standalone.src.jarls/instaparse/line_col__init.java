package instaparse;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class line_col__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__12;
  
  public static final Var const__13;
  
  public static final AFn const__17;
  
  public static final Var const__18;
  
  public static final AFn const__21;
  
  public static final Var const__22;
  
  public static final AFn const__25;
  
  public static final Var const__26;
  
  public static final AFn const__29;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new line_col.fn__20162());
    const__3.setMeta((IPersistentMap)const__12);
    const__3.bindRoot(new line_col.advance_cursor());
    const__13.setMeta((IPersistentMap)const__17);
    const__13.bindRoot(new line_col.make_line_col_fn());
    const__18.setMeta((IPersistentMap)const__21);
    const__18.bindRoot(new line_col.hiccup_add_line_col_spans());
    const__22.setMeta((IPersistentMap)const__25);
    const__22.bindRoot(new line_col.enlive_add_line_col_spans());
    const__26.setMeta((IPersistentMap)const__29);
    const__26.bindRoot(new line_col.add_line_col_spans());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "instaparse.line-col");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("instaparse.line-col", "advance-cursor");
    const__12 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "cursor")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Cursor") })), ((IObj)Symbol.intern(null, "text")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") })), Symbol.intern(null, "new-index")) })), RT.keyword(null, "line"), Integer.valueOf(9), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/line_col.clj" });
    const__13 = (Var)RT.var("instaparse.line-col", "make-line-col-fn");
    const__17 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "text")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") }))) })), RT.keyword(null, "doc"), "Given a string `text`, returns a function that takes an index into the string,\nand returns a cursor, including line and column information.  For efficiency,\ninputs must be fed into the function in increasing order.", RT.keyword(null, "line"), Integer.valueOf(19), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "instaparse/line_col.clj" });
    const__18 = (Var)RT.var("instaparse.line-col", "hiccup-add-line-col-spans");
    const__21 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "line-col-fn"), Symbol.intern(null, "parse-tree")) })), RT.keyword(null, "line"), Integer.valueOf(29), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/line_col.clj" });
    const__22 = (Var)RT.var("instaparse.line-col", "enlive-add-line-col-spans");
    const__25 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "line-col-fn"), Symbol.intern(null, "parse-tree")) })), RT.keyword(null, "line"), Integer.valueOf(47), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/line_col.clj" });
    const__26 = (Var)RT.var("instaparse.line-col", "add-line-col-spans");
    const__29 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "text"), Symbol.intern(null, "parse-tree")) })), RT.keyword(null, "doc"), "Given a string `text` and a `parse-tree` for text, return parse tree\nwith its metadata annotated with line and column info. The info can\nthen be found in the metadata map under the keywords:\n \n:instaparse.gll/start-line, :instaparse.gll/start-column,\n:instaparse.gll/end-line, :instaparse.gll/end-column\n\nThe start is inclusive, the end is exclusive. Lines and columns are 1-based.", RT.keyword(null, "line"), Integer.valueOf(65), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/line_col.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("instaparse.line_col__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
