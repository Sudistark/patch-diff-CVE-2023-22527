package instaparse;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentHashSet;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class core__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final Keyword const__5;
  
  public static final Keyword const__7;
  
  public static final Keyword const__9;
  
  public static final AFn const__10;
  
  public static final Keyword const__11;
  
  public static final Var const__12;
  
  public static final Keyword const__13;
  
  public static final Keyword const__15;
  
  public static final AFn const__17;
  
  public static final Var const__18;
  
  public static final AFn const__20;
  
  public static final Keyword const__21;
  
  public static final Var const__22;
  
  public static final AFn const__25;
  
  public static final Var const__26;
  
  public static final AFn const__29;
  
  public static final Var const__30;
  
  public static final AFn const__31;
  
  public static final Var const__32;
  
  public static final AFn const__33;
  
  public static final Var const__34;
  
  public static final AFn const__38;
  
  public static final Var const__39;
  
  public static final AFn const__42;
  
  public static final Var const__43;
  
  public static final AFn const__46;
  
  public static final Var const__47;
  
  public static final Object const__48;
  
  public static final Var const__49;
  
  public static final AFn const__52;
  
  public static final Var const__53;
  
  public static final AFn const__57;
  
  public static final AFn const__60;
  
  public static final Var const__61;
  
  public static final AFn const__64;
  
  public static final AFn const__66;
  
  public static final Keyword const__67;
  
  public static final Keyword const__68;
  
  public static final AFn const__71;
  
  public static final Var const__72;
  
  public static final AFn const__75;
  
  public static final Var const__76;
  
  public static final AFn const__78;
  
  public static final Var const__79;
  
  public static final Var const__80;
  
  public static final Var const__81;
  
  public static final Var const__82;
  
  public static final Var const__83;
  
  public static final AFn const__85;
  
  public static final Var const__86;
  
  public static final Var const__87;
  
  public static final AFn const__89;
  
  public static final Var const__90;
  
  public static final Var const__91;
  
  public static final AFn const__94;
  
  public static final Var const__95;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new core.fn__20206());
    const__3.setDynamic(true).setMeta((IPersistentMap)const__10);
    const__3.setDynamic(true).bindRoot(const__11);
    const__12.setMeta((IPersistentMap)const__17);
    const__12.bindRoot(new core.set_default_output_format_BANG_());
    const__18.setDynamic(true).setMeta((IPersistentMap)const__20);
    const__18.setDynamic(true).bindRoot(const__21);
    const__22.setMeta((IPersistentMap)const__25);
    const__22.bindRoot(new core.set_default_input_format_BANG_());
    const__26.setMeta((IPersistentMap)const__29);
    const__30.setMeta((IPersistentMap)const__31);
    const__32.setMeta((IPersistentMap)const__33);
    const__34.setMeta((IPersistentMap)const__38);
    const__34.bindRoot(new core.unhide_parser());
    const__39.setMeta((IPersistentMap)const__42);
    const__39.bindRoot(new core.parse());
    const__43.setMeta((IPersistentMap)const__46);
    const__43.bindRoot(new core.parses());
    const__49.setMeta((IPersistentMap)const__52);
    const__49.bindRoot(new core.parser());
    const__53.setMeta((IPersistentMap)const__57);
    const__53.bindRoot(new core.defparser());
    ((Var)const__53)














































































































      
      .setMacro();
    const__26.setMeta((IPersistentMap)const__60);
    const__26.bindRoot(new core.failure_QMARK_());
    const__61.setMeta((IPersistentMap)const__64);
    const__61.bindRoot(new core.get_failure());
    const__30.setMeta((IPersistentMap)const__66);
    const__30








































































      
      .bindRoot(RT.mapUniqueKeys(new Object[] { const__67, ((IFn)const__49.getRawRoot()).invoke("whitespace = #'\\s+'"), const__68, ((IFn)const__49.getRawRoot()).invoke("whitespace = #'[,\\s]+'") }));
    const__32.setMeta((IPersistentMap)const__71);
    const__32.bindRoot(new core.enable_tracing_BANG_());
    const__72.setMeta((IPersistentMap)const__75);
    const__72.bindRoot(new core.disable_tracing_BANG_());
    const__76.setMeta((IPersistentMap)const__78);
    const__76.bindRoot(const__79.getRawRoot());
    const__83.setMeta((IPersistentMap)const__85);
    const__83.bindRoot(const__86.getRawRoot());
    const__87.setMeta((IPersistentMap)const__89);
    const__87.bindRoot(const__90.getRawRoot());
    const__91.setMeta((IPersistentMap)const__94);
    const__91.bindRoot(const__95.getRawRoot());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "instaparse.core");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("instaparse.core", "*default-output-format*");
    const__5 = (Keyword)RT.keyword(null, "line");
    const__7 = (Keyword)RT.keyword(null, "column");
    const__9 = (Keyword)RT.keyword(null, "file");
    const__10 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(19), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/core.clj" });
    const__11 = (Keyword)RT.keyword(null, "hiccup");
    const__12 = (Var)RT.var("instaparse.core", "set-default-output-format!");
    const__13 = (Keyword)RT.keyword(null, "arglists");
    const__15 = (Keyword)RT.keyword(null, "doc");
    const__17 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "type"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(((IObj)PersistentList.create(Arrays.asList(new Object[] { PersistentHashSet.create(new Object[] { RT.keyword(null, "hiccup"), RT.keyword(null, "enlive") }), Symbol.intern(null, "type") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(23), RT.keyword(null, "column"), Integer.valueOf(10) }))) })) })), RT.keyword(null, "doc"), "Changes the default output format.  Input should be :hiccup or :enlive", RT.keyword(null, "line"), Integer.valueOf(20), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/core.clj" });
    const__18 = (Var)RT.var("instaparse.core", "*default-input-format*");
    const__20 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(26), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/core.clj" });
    const__21 = (Keyword)RT.keyword(null, "ebnf");
    const__22 = (Var)RT.var("instaparse.core", "set-default-input-format!");
    const__25 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "type"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(((IObj)PersistentList.create(Arrays.asList(new Object[] { PersistentHashSet.create(new Object[] { RT.keyword(null, "ebnf"), RT.keyword(null, "abnf") }), Symbol.intern(null, "type") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(30), RT.keyword(null, "column"), Integer.valueOf(10) }))) })) })), RT.keyword(null, "doc"), "Changes the default input format.  Input should be :abnf or :ebnf", RT.keyword(null, "line"), Integer.valueOf(27), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/core.clj" });
    const__26 = (Var)RT.var("instaparse.core", "failure?");
    const__29 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(33), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/core.clj" });
    const__30 = (Var)RT.var("instaparse.core", "standard-whitespace-parsers");
    const__31 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(33), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/core.clj" });
    const__32 = (Var)RT.var("instaparse.core", "enable-tracing!");
    const__33 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(33), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/core.clj" });
    const__34 = (Var)RT.var("instaparse.core", "unhide-parser");
    const__38 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "parser"), Symbol.intern(null, "unhide")) })), RT.keyword(null, "line"), Integer.valueOf(35), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/core.clj" });
    const__39 = (Var)RT.var("instaparse.core", "parse");
    const__42 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "parser"), Symbol.intern(null, "text"), Symbol.intern(null, "&"), RT.map(new Object[] { RT.keyword(null, "as"), Symbol.intern(null, "options") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "contains?"), PersistentHashSet.create(new Object[] { null, RT.keyword(null, "tags"), RT.keyword(null, "content"), RT.keyword(null, "all") }), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "get"), Symbol.intern(null, "options"), RT.keyword(null, "unhide") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(62), RT.keyword(null, "column"), Integer.valueOf(48) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(62), RT.keyword(null, "column"), Integer.valueOf(10) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "contains?"), PersistentHashSet.create(new Object[] { null, RT.keyword(null, "memory") }), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "get"), Symbol.intern(null, "options"), RT.keyword(null, "optimize") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(63), RT.keyword(null, "column"), Integer.valueOf(36) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(63), RT.keyword(null, "column"), Integer.valueOf(10) }))) })) })), RT.keyword(null, "doc"), "Use parser to parse the text.  Returns first parse tree found\n   that completely parses the text.  If no parse tree is possible, returns\n   a Failure object.\n   \n   Optional keyword arguments:\n   :start :keyword  (where :keyword is name of starting production rule)\n   :partial true    (parses that don't consume the whole string are okay)\n   :total true      (if parse fails, embed failure node in tree)\n   :unhide <:tags or :content or :all> (for this parse, disable hiding)\n   :optimize :memory   (when possible, employ strategy to use less memory)\n\n   Clj only:\n   :trace true      (print diagnostic trace while parsing)", RT.keyword(null, "line"), Integer.valueOf(47), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/core.clj" });
    const__43 = (Var)RT.var("instaparse.core", "parses");
    const__46 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "parser"), Symbol.intern(null, "text"), Symbol.intern(null, "&"), RT.map(new Object[] { RT.keyword(null, "as"), Symbol.intern(null, "options") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "contains?"), PersistentHashSet.create(new Object[] { null, RT.keyword(null, "tags"), RT.keyword(null, "content"), RT.keyword(null, "all") }), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "get"), Symbol.intern(null, "options"), RT.keyword(null, "unhide") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(112), RT.keyword(null, "column"), Integer.valueOf(48) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(112), RT.keyword(null, "column"), Integer.valueOf(10) }))) })) })), RT.keyword(null, "doc"), "Use parser to parse the text.  Returns lazy seq of all parse trees\n   that completely parse the text.  If no parse tree is possible, returns\n   () with a Failure object attached as metadata.\n   \n   Optional keyword arguments:\n   :start :keyword  (where :keyword is name of starting production rule)\n   :partial true    (parses that don't consume the whole string are okay)\n   :total true      (if parse fails, embed failure node in tree)\n   :unhide <:tags or :content or :all> (for this parse, disable hiding)\n\n   Clj only:\n   :trace true      (print diagnostic trace while parsing)", RT.keyword(null, "line"), Integer.valueOf(98), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/core.clj" });
    const__47 = (Var)RT.var("clojure.core", "print-method");
    const__48 = RT.classForName("instaparse.core.Parser");
    const__49 = (Var)RT.var("instaparse.core", "parser");
    const__52 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "grammar-specification"), Symbol.intern(null, "&"), RT.map(new Object[] { RT.keyword(null, "as"), Symbol.intern(null, "options") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "contains?"), PersistentHashSet.create(new Object[] { null, RT.keyword(null, "ebnf"), RT.keyword(null, "abnf") }), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "get"), Symbol.intern(null, "options"), RT.keyword(null, "input-format") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(199), RT.keyword(null, "column"), Integer.valueOf(40) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(199), RT.keyword(null, "column"), Integer.valueOf(10) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "contains?"), PersistentHashSet.create(new Object[] { null, RT.keyword(null, "hiccup"), RT.keyword(null, "enlive") }), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "get"), Symbol.intern(null, "options"), RT.keyword(null, "output-format") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(200), RT.keyword(null, "column"), Integer.valueOf(44) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(200), RT.keyword(null, "column"), Integer.valueOf(10) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "let"), Tuple.create(Symbol.intern(null, "ws-parser"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "get"), Symbol.intern(null, "options"), RT.keyword(null, "auto-whitespace") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(201), RT.keyword(null, "column"), Integer.valueOf(26) }))), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "or"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "nil?"), Symbol.intern(null, "ws-parser") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(202), RT.keyword(null, "column"), Integer.valueOf(16) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "contains?"), Symbol.intern(null, "standard-whitespace-parsers"), Symbol.intern(null, "ws-parser") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(203), RT.keyword(null, "column"), Integer.valueOf(16) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "and"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "map?"), Symbol.intern(null, "ws-parser") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(205), RT.keyword(null, "column"), Integer.valueOf(18) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "contains?"), Symbol.intern(null, "ws-parser"), RT.keyword(null, "grammar") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(206), RT.keyword(null, "column"), Integer.valueOf(18) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "contains?"), Symbol.intern(null, "ws-parser"), RT.keyword(null, "start-production") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(207), RT.keyword(null, "column"), Integer.valueOf(18) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(204), RT.keyword(null, "column"), Integer.valueOf(16) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(202), RT.keyword(null, "column"), Integer.valueOf(12) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(201), RT.keyword(null, "column"), Integer.valueOf(10) }))) })) })), RT.keyword(null, "doc"), "Takes a string specification of a context-free grammar,\n  or a URI for a text file containing such a specification (Clj only),\n  or a map of parser combinators and returns a parser for that grammar.\n\n  Optional keyword arguments:\n  :input-format :ebnf\n  or\n  :input-format :abnf\n\n  :output-format :enlive\n  or\n  :output-format :hiccup\n\n  :start :keyword (where :keyword is name of starting production rule)\n\n  :string-ci true (treat all string literals as case insensitive)\n\n  :auto-whitespace (:standard or :comma)\n  or\n  :auto-whitespace custom-whitespace-parser\n\n  Clj only:\n  :no-slurp true (disables use of slurp to auto-detect whether\n                  input is a URI.  When using this option, input\n                  must be a grammar string or grammar map.  Useful\n                  for platforms where slurp is slow or not available.)", RT.keyword(null, "line"), Integer.valueOf(171), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/core.clj" });
    const__53 = (Var)RT.var("instaparse.core", "defparser");
    const__57 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "name"), Symbol.intern(null, "grammar"), Symbol.intern(null, "&"), RT.map(new Object[] { RT.keyword(null, "as"), Symbol.intern(null, "opts") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "or"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "nil?"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { RT.keyword(null, "input-format"), Symbol.intern(null, "opts") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(287), RT.keyword(null, "column"), Integer.valueOf(23) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(287), RT.keyword(null, "column"), Integer.valueOf(17) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "keyword?"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { RT.keyword(null, "input-format"), Symbol.intern(null, "opts") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(288), RT.keyword(null, "column"), Integer.valueOf(27) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(288), RT.keyword(null, "column"), Integer.valueOf(17) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(287), RT.keyword(null, "column"), Integer.valueOf(13) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "or"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "nil?"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { RT.keyword(null, "output-format"), Symbol.intern(null, "opts") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(289), RT.keyword(null, "column"), Integer.valueOf(23) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(289), RT.keyword(null, "column"), Integer.valueOf(17) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "keyword?"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { RT.keyword(null, "output-format"), Symbol.intern(null, "opts") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(290), RT.keyword(null, "column"), Integer.valueOf(27) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(290), RT.keyword(null, "column"), Integer.valueOf(17) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(289), RT.keyword(null, "column"), Integer.valueOf(13) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "contains?"), PersistentHashSet.create(new Object[] { null, Boolean.TRUE, Boolean.FALSE }), ((IObj)PersistentList.create(Arrays.asList(new Object[] { RT.keyword(null, "string-ci"), Symbol.intern(null, "opts") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(291), RT.keyword(null, "column"), Integer.valueOf(42) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(291), RT.keyword(null, "column"), Integer.valueOf(13) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "contains?"), PersistentHashSet.create(new Object[] { null, Boolean.TRUE, Boolean.FALSE }), ((IObj)PersistentList.create(Arrays.asList(new Object[] { RT.keyword(null, "no-slurp"), Symbol.intern(null, "opts") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(292), RT.keyword(null, "column"), Integer.valueOf(42) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(292), RT.keyword(null, "column"), Integer.valueOf(13) }))) })) })), RT.keyword(null, "doc"), "Takes a string specification of a context-free grammar,\n  or a string URI for a text file containing such a specification,\n  or a map/vector of parser combinators, and sets a variable to a parser for that grammar.\n\n  String specifications are processed at macro-time, not runtime, so this is an\n  appealing alternative to (def _ (parser \"...\")) for ClojureScript users.\n\n  Optional keyword arguments unique to `defparser`:\n  - :instaparse.abnf/case-insensitive true", RT.keyword(null, "line"), Integer.valueOf(274), RT.keyword(null, "column"), Integer.valueOf(4), RT.keyword(null, "file"), "instaparse/core.clj" });
    const__60 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "result")) })), RT.keyword(null, "doc"), "Tests whether a parse result is a failure.", RT.keyword(null, "line"), Integer.valueOf(328), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/core.clj" });
    const__61 = (Var)RT.var("instaparse.core", "get-failure");
    const__64 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "result")) })), RT.keyword(null, "doc"), "Extracts failure object from failed parse result.", RT.keyword(null, "line"), Integer.valueOf(335), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/core.clj" });
    const__66 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(346), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/core.clj" });
    const__67 = (Keyword)RT.keyword(null, "standard");
    const__68 = (Keyword)RT.keyword(null, "comma");
    const__71 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "doc"), "Recompiles instaparse with tracing enabled.\n  This is called implicitly the first time you invoke a parser with\n  `:trace true` so usually you will not need to call this directly.", RT.keyword(null, "line"), Integer.valueOf(351), RT.keyword(null, "column"), Integer.valueOf(4), RT.keyword(null, "file"), "instaparse/core.clj" });
    const__72 = (Var)RT.var("instaparse.core", "disable-tracing!");
    const__75 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "doc"), "Recompiles instaparse with tracing disabled.\n  Call this to restore regular performance characteristics, eliminating\n  the small performance hit imposed by tracing.", RT.keyword(null, "line"), Integer.valueOf(361), RT.keyword(null, "column"), Integer.valueOf(4), RT.keyword(null, "file"), "instaparse/core.clj" });
    const__76 = (Var)RT.var("instaparse.core", "transform");
    const__78 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(370), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/core.clj" });
    const__79 = (Var)RT.var("instaparse.transform", "transform");
    const__80 = (Var)RT.var("clojure.core", "alter-meta!");
    const__81 = (Var)RT.var("clojure.core", "assoc");
    const__82 = (Var)RT.var("clojure.core", "meta");
    const__83 = (Var)RT.var("instaparse.core", "add-line-and-column-info-to-metadata");
    const__85 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(372), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/core.clj" });
    const__86 = (Var)RT.var("instaparse.line-col", "add-line-col-spans");
    const__87 = (Var)RT.var("instaparse.core", "span");
    const__89 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(374), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/core.clj" });
    const__90 = (Var)RT.var("instaparse.viz", "span");
    const__91 = (Var)RT.var("instaparse.core", "visualize");
    const__94 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(376), RT.keyword(null, "column"), Integer.valueOf(9), RT.keyword(null, "file"), "instaparse/core.clj" });
    const__95 = (Var)RT.var("instaparse.viz", "tree-viz");
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("instaparse.core__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
