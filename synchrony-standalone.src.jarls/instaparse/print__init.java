package instaparse;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentHashSet;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class print__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__3;
  
  public static final AFn const__4;
  
  public static final Var const__5;
  
  public static final AFn const__12;
  
  public static final Var const__13;
  
  public static final AFn const__17;
  
  public static final Var const__18;
  
  public static final AFn const__20;
  
  public static final Var const__21;
  
  public static final AFn const__25;
  
  public static final Var const__26;
  
  public static final AFn const__29;
  
  public static final Var const__30;
  
  public static final AFn const__33;
  
  public static final Var const__34;
  
  public static final AFn const__38;
  
  public static final AFn const__41;
  
  public static final Var const__42;
  
  public static final AFn const__45;
  
  public static final Var const__46;
  
  public static final AFn const__49;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new print.fn__19362());
    const__5.setMeta((IPersistentMap)const__12);
    const__13.setMeta((IPersistentMap)const__17);
    const__13.bindRoot(new print.paren_for_tags());
    const__18.setMeta((IPersistentMap)const__20);
    const__18











      
      .bindRoot(((IFn)const__21.getRawRoot()).invoke(const__13.getRawRoot(), const__25));
    const__26.setMeta((IPersistentMap)const__29);
    const__26.bindRoot(new print.regexp_replace());
    const__30.setMeta((IPersistentMap)const__33);
    const__30.bindRoot(new print.regexp__GT_str());
    const__34.setMeta((IPersistentMap)const__38);
    const__34.bindRoot(new print.char_range__GT_str());
    const__5.setMeta((IPersistentMap)const__41);
    const__5.bindRoot(new print.combinators__GT_str());
    const__42.setMeta((IPersistentMap)const__45);
    const__42.bindRoot(new print.rule__GT_str());
    const__46.setMeta((IPersistentMap)const__49);
    const__46.bindRoot(new print.Parser__GT_str());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "instaparse.print")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Facilities for taking parsers and grammars, and converting them to strings.\n   Used for pretty-printing." }));
    const__3 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Facilities for taking parsers and grammars, and converting them to strings.\n   Used for pretty-printing." });
    const__4 = (AFn)Symbol.intern(null, "clojure.core");
    const__5 = (Var)RT.var("instaparse.print", "combinators->str");
    const__12 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(6), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/print.clj" });
    const__13 = (Var)RT.var("instaparse.print", "paren-for-tags");
    const__17 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "tag-set"), Symbol.intern(null, "hidden?"), Symbol.intern(null, "parser")) })), RT.keyword(null, "line"), Integer.valueOf(8), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/print.clj" });
    const__18 = (Var)RT.var("instaparse.print", "paren-for-compound");
    const__20 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(13), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/print.clj" });
    const__21 = (Var)RT.var("clojure.core", "partial");
    const__25 = (AFn)PersistentHashSet.create(new Object[] { RT.keyword(null, "cat"), RT.keyword(null, "ord"), RT.keyword(null, "alt") });
    const__26 = (Var)RT.var("instaparse.print", "regexp-replace");
    const__29 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })), RT.keyword(null, "doc"), "Replaces whitespace characters with escape sequences for better printing", RT.keyword(null, "line"), Integer.valueOf(16), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/print.clj" });
    const__30 = (Var)RT.var("instaparse.print", "regexp->str");
    const__33 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "r")) })), RT.keyword(null, "line"), Integer.valueOf(27), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/print.clj" });
    const__34 = (Var)RT.var("instaparse.print", "char-range->str");
    const__38 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "lo"), Symbol.intern(null, "hi")) })) })), RT.keyword(null, "line"), Integer.valueOf(36), RT.keyword(null, "column"), Integer.valueOf(4), RT.keyword(null, "file"), "instaparse/print.clj" });
    const__41 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "p")), Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "parser"), Symbol.intern(null, "parser1"), Symbol.intern(null, "parser2"), Symbol.intern(null, "parsers"), Symbol.intern(null, "tag")), RT.keyword(null, "as"), Symbol.intern(null, "p") }), Symbol.intern(null, "hidden?")) })), RT.keyword(null, "doc"), "Stringifies a parser built from combinators", RT.keyword(null, "line"), Integer.valueOf(53), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/print.clj" });
    const__42 = (Var)RT.var("instaparse.print", "rule->str");
    const__45 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "non-terminal"), Symbol.intern(null, "parser")) })), RT.keyword(null, "doc"), "Takes a non-terminal symbol and a parser built from combinators,\n   and returns a string for the rule.", RT.keyword(null, "line"), Integer.valueOf(82), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/print.clj" });
    const__46 = (Var)RT.var("instaparse.print", "Parser->str");
    const__49 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { Symbol.intern(null, "grammar"), RT.keyword(null, "grammar"), Symbol.intern(null, "start"), RT.keyword(null, "start-production") })) })), RT.keyword(null, "doc"), "Takes a Parser object, i.e., something with a grammar map and a start \n   production keyword, and stringifies it.", RT.keyword(null, "line"), Integer.valueOf(94), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/print.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("instaparse.print__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
