package instaparse.auto_flatten_seq;

import clojure.core.protocols.IKVReduce;
import clojure.lang.AFn;
import clojure.lang.APersistentVector;
import clojure.lang.Associative;
import clojure.lang.Counted;
import clojure.lang.IFn;
import clojure.lang.IHashEq;
import clojure.lang.ILookup;
import clojure.lang.IMapEntry;
import clojure.lang.IMeta;
import clojure.lang.IObj;
import clojure.lang.IPersistentCollection;
import clojure.lang.IPersistentMap;
import clojure.lang.IPersistentStack;
import clojure.lang.IPersistentVector;
import clojure.lang.ISeq;
import clojure.lang.IType;
import clojure.lang.Indexed;
import clojure.lang.Numbers;
import clojure.lang.PersistentVector;
import clojure.lang.RT;
import clojure.lang.Reversible;
import clojure.lang.Seqable;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Util;
import clojure.lang.Var;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;

public final class FlattenOnDemandVector implements Associative, Collection, GetVec, ILookup, Comparable, IPersistentCollection, IHashEq, IObj, IKVReduce, Reversible, IFn, IMeta, Counted, IPersistentVector, Seqable, IPersistentStack, List, Indexed, IType {
  public final Object v;
  
  public final int hashcode;
  
  public final int cnt;
  
  public final Object flat;
  
  private static Class __cached_class__0;
  
  private static Class __cached_class__1;
  
  private static Class __cached_class__2;
  
  private static Class __cached_class__3;
  
  private static Class __cached_class__4;
  
  private static Class __cached_class__5;
  
  private static Class __cached_class__6;
  
  private static Class __cached_class__7;
  
  private static Class __cached_class__8;
  
  private static Class __cached_class__9;
  
  private static Class __cached_class__10;
  
  private static Class __cached_class__11;
  
  private static Class __cached_class__12;
  
  private static Class __cached_class__13;
  
  private static Class __cached_class__14;
  
  private static Class __cached_class__15;
  
  private static Class __cached_class__16;
  
  private static Class __cached_class__17;
  
  private static Class __cached_class__18;
  
  private static Class __cached_class__19;
  
  private static Class __cached_class__20;
  
  private static Class __cached_class__21;
  
  private static Class __cached_class__22;
  
  private static Class __cached_class__23;
  
  private static Class __cached_class__24;
  
  private static Class __cached_class__25;
  
  private static Class __cached_class__26;
  
  public static final Var const__0 = (Var)RT.var("instaparse.auto-flatten-seq", "get-vec"), const__5 = (Var)RT.var("clojure.core", "not"), const__6 = (Var)RT.var("clojure.core", "deref"), const__7 = (Var)RT.var("clojure.core", "hash"), const__9 = (Var)RT.var("clojure.core", "with-meta"), const__10 = (Var)RT.var("clojure.core", "meta"), const__11 = (Var)RT.var("clojure.core", "ref"), const__13 = (Var)RT.var("clojure.core", "rseq"), const__14 = (Var)RT.var("clojure.core", "assoc"), const__15 = (Var)RT.var("clojure.core", "conj"), const__16 = (Var)RT.var("clojure.core", "seq"), const__17 = (Var)RT.var("clojure.core", "peek"), const__18 = (Var)RT.var("clojure.core", "pop");
  
  public FlattenOnDemandVector(Object paramObject1, int paramInt1, int paramInt2, Object paramObject2) { this.v = paramObject1;
    this.hashcode = paramInt1;
    this.cnt = paramInt2;
    this.flat = paramObject2; }
  
  public static IPersistentVector getBasis() { return Tuple.create(Symbol.intern(null, "v"), ((IObj)Symbol.intern(null, "hashcode")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "int") })), ((IObj)Symbol.intern(null, "cnt")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "int") })), Symbol.intern(null, "flat")); }
  
  public Object nth(int i, Object not_found) { if (Util.classOf(this) != __cached_class__26)
      if (!(this instanceof GetVec)) {
        __cached_class__26 = Util.classOf(this);
      } else {
        not_found = null;
        return ((PersistentVector)((GetVec)this).get_vec()).nth(i, not_found);
      }   }
  
  public Object nth(int i) { if (Util.classOf(this) != __cached_class__25)
      if (!(this instanceof GetVec)) {
        __cached_class__25 = Util.classOf(this);
      } else {
        return ((PersistentVector)((GetVec)this).get_vec()).nth(i);
      }   }
  
  public List subList(int a, int z) { if (Util.classOf(this) != __cached_class__24)
      if (!(this instanceof GetVec)) {
        __cached_class__24 = Util.classOf(this);
      } else {
        return (List)((APersistentVector)((GetVec)this).get_vec()).subList(a, z);
      }   }
  
  public ListIterator listIterator(int i) { if (Util.classOf(this) != __cached_class__23)
      if (!(this instanceof GetVec)) {
        __cached_class__23 = Util.classOf(this);
      } else {
        return (ListIterator)((APersistentVector)((GetVec)this).get_vec()).listIterator(i);
      }   }
  
  public ListIterator listIterator() { if (Util.classOf(this) != __cached_class__22)
      if (!(this instanceof GetVec)) {
        __cached_class__22 = Util.classOf(this);
      } else {
        return (ListIterator)((APersistentVector)((GetVec)this).get_vec()).listIterator(RT.intCast(0L));
      }   }
  
  public int lastIndexOf(Object o) { if (Util.classOf(this) != __cached_class__21)
      if (!(this instanceof GetVec)) {
        __cached_class__21 = Util.classOf(this);
      } else {
        o = null;
        this = null;
        return ((APersistentVector)((GetVec)this).get_vec()).lastIndexOf(o);
      }   }
  
  public int indexOf(Object o) { if (Util.classOf(this) != __cached_class__20)
      if (!(this instanceof GetVec)) {
        __cached_class__20 = Util.classOf(this);
      } else {
        o = null;
        this = null;
        return ((APersistentVector)((GetVec)this).get_vec()).indexOf(o);
      }   }
  
  public Object get(int i) { if (Util.classOf(this) != __cached_class__19)
      if (!(this instanceof GetVec)) {
        __cached_class__19 = Util.classOf(this);
      } else {
        this = null;
        return RT.nth(((GetVec)this).get_vec(), i);
      }   }
  
  public IPersistentStack pop() { if (Util.classOf(this) != __cached_class__18)
      if (!(this instanceof GetVec)) {
        __cached_class__18 = Util.classOf(this);
      } else {
        this = null;
        return (IPersistentStack)((IFn)const__18.getRawRoot()).invoke(((GetVec)this).get_vec());
      }   }
  
  public Object peek() { if (Util.classOf(this) != __cached_class__17)
      if (!(this instanceof GetVec)) {
        __cached_class__17 = Util.classOf(this);
      } else {
        this = null;
        return ((IFn)const__17.getRawRoot()).invoke(((GetVec)this).get_vec());
      }   }
  
  public ISeq seq() { if (Util.classOf(this) != __cached_class__16)
      if (!(this instanceof GetVec)) {
        __cached_class__16 = Util.classOf(this);
      } else {
        this = null;
        return (ISeq)((IFn)const__16.getRawRoot()).invoke(((GetVec)this).get_vec());
      }   }
  
  public IPersistentVector cons(Object obj) { if (Util.classOf(this) != __cached_class__15)
      if (!(this instanceof GetVec)) {
        __cached_class__15 = Util.classOf(this);
      } else {
        obj = null;
        this = null;
        return (IPersistentVector)((IFn)const__15.getRawRoot()).invoke(((GetVec)this).get_vec(), obj);
      }   }
  
  public int length() { return this.cnt; }
  
  public IPersistentVector assocN(int i, Object val) { if (Util.classOf(this) != __cached_class__14)
      if (!(this instanceof GetVec)) {
        __cached_class__14 = Util.classOf(this);
      } else {
        val = null;
        return (IPersistentVector)((PersistentVector)((GetVec)this).get_vec()).assocN(i, val);
      }   }
  
  public Associative assoc(Object i, Object val) { if (Util.classOf(this) != __cached_class__13)
      if (!(this instanceof GetVec)) {
        __cached_class__13 = Util.classOf(this);
      } else {
        i = null;
        val = null;
        this = null;
        return (Associative)((IFn)const__14.getRawRoot()).invoke(((GetVec)this).get_vec(), i, val);
      }   }
  
  public int count() { return this.cnt; }
  
  public IPersistentMap meta() { if (((IFn)const__6.getRawRoot()).invoke(this.flat) != null) {
      if (((IFn)const__6.getRawRoot()).invoke(this.flat) != Boolean.FALSE)
        this = null; 
    } else {
      ((IFn)const__6.getRawRoot()).invoke(this.flat);
    } 
    this = null;
    return (IPersistentMap)((IFn)const__10.getRawRoot()).invoke(((IFn)const__6.getRawRoot()).invoke(this.v)); }
  
  public Object applyTo(ISeq arglist) { if (Util.classOf(this) != __cached_class__12)
      if (!(this instanceof GetVec)) {
        __cached_class__12 = Util.classOf(this);
      } else {
        arglist = null;
        return ((AFn)((GetVec)this).get_vec()).applyTo((ISeq)arglist);
      }   }
  
  public Object invoke(Object arg) { if (Util.classOf(this) != __cached_class__11)
      if (!(this instanceof GetVec)) {
        __cached_class__11 = Util.classOf(this);
      } else {
        arg = null;
        return ((APersistentVector)((GetVec)this).get_vec()).invoke(arg);
      }   }
  
  public ISeq rseq() {
    if (this.cnt > 0L) {
      if (Util.classOf(this) != __cached_class__10)
        if (!(this instanceof GetVec)) {
          __cached_class__10 = Util.classOf(this);
        } else {
          this = null;
        }  
    } else {
      return (ISeq)null;
    } 
    this = null;
  }
  
  public IObj withMeta(IPersistentMap metamap) {
    if (((IFn)const__6.getRawRoot()).invoke(this.flat) != null) {
      if (((IFn)const__6.getRawRoot()).invoke(this.flat) != Boolean.FALSE)
        metamap = null; 
    } else {
      ((IFn)const__6.getRawRoot()).invoke(this.flat);
    } 
    metamap = null;
    return (IObj)new FlattenOnDemandVector(((IFn)const__11.getRawRoot()).invoke(((IFn)const__9.getRawRoot()).invoke(((IFn)const__6.getRawRoot()).invoke(this.v), metamap)), this.hashcode, this.cnt, ((IFn)const__11.getRawRoot()).invoke(((IFn)const__6.getRawRoot()).invoke(this.flat)));
  }
  
  public int hasheq() { return this.hashcode; }
  
  public IPersistentCollection empty() { this = null;
    return (IPersistentCollection)((IFn)const__9.getRawRoot()).invoke(PersistentVector.EMPTY, ((IFn)const__10.getRawRoot()).invoke(this)); }
  
  public boolean equiv(Object other) {
    boolean and__5514__auto__19349 = Numbers.equiv(this.hashcode, ((IFn)const__7.getRawRoot()).invoke(other));
    if (and__5514__auto__19349) {
      boolean and__5514__auto__19348 = Numbers.equiv(this.cnt, RT.count(other));
      if (and__5514__auto__19348) {
        if (Util.classOf(this) != __cached_class__9)
          if (!(this instanceof GetVec)) {
            __cached_class__9 = Util.classOf(this);
          } else {
            other = null;
          }  
      } else {
      
      } 
    } else {
      return and__5514__auto__19349;
    } 
    other = null;
  }
  
  public int compareTo(Object that) { if (Util.classOf(this) != __cached_class__8)
      if (!(this instanceof GetVec)) {
        __cached_class__8 = Util.classOf(this);
      } else {
        that = null;
        this = null;
        return ((APersistentVector)((GetVec)this).get_vec()).compareTo(that);
      }   }
  
  public Object valAt(Object key, Object not_found) { if (Util.classOf(this) != __cached_class__7)
      if (!(this instanceof GetVec)) {
        __cached_class__7 = Util.classOf(this);
      } else {
        key = null;
        not_found = null;
        return ((APersistentVector)((GetVec)this).get_vec()).valAt(key, not_found);
      }   }
  
  public Object valAt(Object key) { if (Util.classOf(this) != __cached_class__6)
      if (!(this instanceof GetVec)) {
        __cached_class__6 = Util.classOf(this);
      } else {
        key = null;
        return ((APersistentVector)((GetVec)this).get_vec()).valAt(key);
      }   }
  
  public Object[] toArray() { if (Util.classOf(this) != __cached_class__5)
      if (!(this instanceof GetVec)) {
        __cached_class__5 = Util.classOf(this);
      } else {
        return (Object[])((APersistentVector)((GetVec)this).get_vec()).toArray();
      }   }
  
  public int size() { return this.cnt; }
  
  public Iterator iterator() { if (Util.classOf(this) != __cached_class__4)
      if (!(this instanceof GetVec)) {
        __cached_class__4 = Util.classOf(this);
      } else {
        return (Iterator)((PersistentVector)((GetVec)this).get_vec()).iterator();
      }   }
  
  public Object kv_reduce(Object f, Object init) { if (Util.classOf(this) != __cached_class__3)
      if (!(this instanceof GetVec)) {
        __cached_class__3 = Util.classOf(this);
      } else {
        f = null;
        init = null;
        return ((PersistentVector)((GetVec)this).get_vec()).kvreduce((IFn)f, init);
      }   }
  
  public Object get_vec() { // Byte code:
    //   0: getstatic instaparse/auto_flatten_seq/FlattenOnDemandVector.const__5 : Lclojure/lang/Var;
    //   3: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   6: checkcast clojure/lang/IFn
    //   9: getstatic instaparse/auto_flatten_seq/FlattenOnDemandVector.const__6 : Lclojure/lang/Var;
    //   12: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   15: checkcast clojure/lang/IFn
    //   18: aload_0
    //   19: getfield flat : Ljava/lang/Object;
    //   22: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   27: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   32: dup
    //   33: ifnull -> 67
    //   36: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   39: if_acmpeq -> 68
    //   42: new instaparse/auto_flatten_seq/FlattenOnDemandVector$fn__19345
    //   45: dup
    //   46: aload_0
    //   47: getfield flat : Ljava/lang/Object;
    //   50: aload_0
    //   51: getfield v : Ljava/lang/Object;
    //   54: invokespecial <init> : (Ljava/lang/Object;Ljava/lang/Object;)V
    //   57: checkcast java/util/concurrent/Callable
    //   60: invokestatic runInTransaction : (Ljava/util/concurrent/Callable;)Ljava/lang/Object;
    //   63: pop
    //   64: goto -> 70
    //   67: pop
    //   68: aconst_null
    //   69: pop
    //   70: getstatic instaparse/auto_flatten_seq/FlattenOnDemandVector.const__6 : Lclojure/lang/Var;
    //   73: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   76: checkcast clojure/lang/IFn
    //   79: aload_0
    //   80: getfield flat : Ljava/lang/Object;
    //   83: aconst_null
    //   84: astore_0
    //   85: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   90: areturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #314	-> 0
    //   #320	-> 0
    //   #320	-> 6
    //   #320	-> 15
    //   #320	-> 22
    //   #320	-> 27
    //   #321	-> 60
    //   #314	-> 76
    //   #314	-> 83
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   0	90	0	this	Linstaparse/auto_flatten_seq/FlattenOnDemandVector; }
  
  public boolean equals(Object other) {
    boolean and__5514__auto__19353 = other instanceof FlattenOnDemandVector;
    boolean and__5514__auto__19352 = Numbers.equiv(this.hashcode, ((FlattenOnDemandVector)other).hashcode);
    boolean and__5514__auto__19351 = Numbers.equiv(this.cnt, ((FlattenOnDemandVector)other).cnt);
    boolean and__5514__auto__19350 = Util.equiv(this.v, ((FlattenOnDemandVector)other).v);
    other = null;
    return and__5514__auto__19353 ? (and__5514__auto__19352 ? (and__5514__auto__19351 ? (and__5514__auto__19350 ? Util.equiv(this.flat, ((FlattenOnDemandVector)other).flat) : and__5514__auto__19350) : and__5514__auto__19351) : and__5514__auto__19352) : and__5514__auto__19353;
  }
  
  public int hashCode() { return this.hashcode; }
  
  public String toString() { if (Util.classOf(this) != __cached_class__2)
      if (!(this instanceof GetVec)) {
        __cached_class__2 = Util.classOf(this);
      } else {
        return (String)((APersistentVector)((GetVec)this).get_vec()).toString();
      }   }
  
  public IMapEntry entryAt(Object k) { if (Util.classOf(this) != __cached_class__1)
      if (!(this instanceof GetVec)) {
        __cached_class__1 = Util.classOf(this);
      } else {
        k = null;
        return (IMapEntry)((APersistentVector)((GetVec)this).get_vec()).entryAt(k);
      }   }
  
  public boolean containsKey(Object k) { if (Util.classOf(this) != __cached_class__0)
      if (!(this instanceof GetVec)) {
        __cached_class__0 = Util.classOf(this);
      } else {
        k = null;
        this = null;
        return ((APersistentVector)((GetVec)this).get_vec()).containsKey(k);
      }   }
}
