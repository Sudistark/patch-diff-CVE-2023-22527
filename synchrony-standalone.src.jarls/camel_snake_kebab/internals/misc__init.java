package camel_snake_kebab.internals;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentHashSet;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class misc__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__11;
  
  public static final Var const__12;
  
  public static final AFn const__14;
  
  public static final AFn const__15;
  
  public static final Var const__16;
  
  public static final AFn const__19;
  
  public static void load() { LockingTransaction.runInTransaction((Callable)new misc.fn__60938());
    const__3.setMeta((IPersistentMap)const__11);
    const__3.bindRoot(new misc.convert_case());
    const__12.setMeta((IPersistentMap)const__14);
    const__12.bindRoot(const__15);
    const__16.setMeta((IPersistentMap)const__19);
    const__16.bindRoot(new misc.capitalize_http_header()); }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "camel-snake-kebab.internals.misc");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("camel-snake-kebab.internals.misc", "convert-case");
    const__11 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "first-fn"), Symbol.intern(null, "rest-fn"), Symbol.intern(null, "sep"), Symbol.intern(null, "s"), Symbol.intern(null, "&"), RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "separator")), RT.keyword(null, "or"), RT.map(new Object[] { Symbol.intern(null, "separator"), Symbol.intern(null, "generic-separator") }) })) })), RT.keyword(null, "line"), Integer.valueOf(5), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "camel_snake_kebab/internals/misc.cljc" });
    const__12 = (Var)RT.var("camel-snake-kebab.internals.misc", "upper-case-http-headers");
    const__14 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(10), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "camel_snake_kebab/internals/misc.cljc" });
    const__15 = (AFn)PersistentHashSet.create(new Object[] { 
          "WWW", "TE", "CSP", "CPU", "IP", "WAP", "HTTP", "DNT", "UA", "ATT", 
          "SSL", "MD5", "XSS" });
    const__16 = (Var)RT.var("camel-snake-kebab.internals.misc", "capitalize-http-header");
    const__19 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })), RT.keyword(null, "line"), Integer.valueOf(13), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "camel_snake_kebab/internals/misc.cljc" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("camel_snake_kebab.internals.misc__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
