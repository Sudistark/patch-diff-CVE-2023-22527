package camel_snake_kebab.internals;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class string_separator__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final Object const__4;
  
  public static final Var const__5;
  
  public static final Var const__6;
  
  public static final Var const__7;
  
  public static final Keyword const__8;
  
  public static final Var const__9;
  
  public static final ISeq const__10;
  
  public static final Var const__11;
  
  public static final Var const__12;
  
  public static final AFn const__16;
  
  public static final Keyword const__17;
  
  public static final AFn const__18;
  
  public static final Keyword const__19;
  
  public static final Keyword const__20;
  
  public static final AFn const__22;
  
  public static final Keyword const__23;
  
  public static final Var const__24;
  
  public static final Var const__25;
  
  public static final Var const__26;
  
  public static final AFn const__27;
  
  public static final AFn const__28;
  
  public static final Keyword const__29;
  
  public static final Var const__30;
  
  public static final AFn const__31;
  
  public static final Var const__32;
  
  public static final AFn const__40;
  
  public static final Var const__41;
  
  public static final AFn const__44;
  
  public static final Var const__45;
  
  public static final AFn const__47;
  
  public static final AFn const__50;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new string_separator.fn__60893());
    const__32.setMeta((IPersistentMap)const__40);
    const__32.bindRoot(new string_separator.classify_char());
    const__41.setMeta((IPersistentMap)const__44);
    const__41.bindRoot(new string_separator.generic_split());
    const__45.setMeta((IPersistentMap)const__47);
    const__45.bindRoot(((IObj)new string_separator.reify__60936(null)).withMeta((IPersistentMap)const__50));
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "camel-snake-kebab.internals.string-separator");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("clojure.core", "*warn-on-reflection*");
    const__4 = RT.classForName("camel_snake_kebab.internals.string_separator.StringSeparator");
    const__5 = (Var)RT.var("clojure.core", "alter-meta!");
    const__6 = (Var)RT.var("camel-snake-kebab.internals.string-separator", "StringSeparator");
    const__7 = (Var)RT.var("clojure.core", "assoc");
    const__8 = (Keyword)RT.keyword(null, "doc");
    const__9 = (Var)RT.var("clojure.core", "assert-same-protocol");
    const__10 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "split")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), ": StringSeparator -> String -> NonEmptySeq[String]", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "s")) })) })) }));
    const__11 = (Var)RT.var("clojure.core", "alter-var-root");
    const__12 = (Var)RT.var("clojure.core", "merge");
    const__16 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "camel_snake_kebab.internals.string_separator.StringSeparator"), RT.keyword(null, "on-interface"), RT.classForName("camel_snake_kebab.internals.string_separator.StringSeparator") });
    const__17 = (Keyword)RT.keyword(null, "sigs");
    const__18 = (AFn)RT.map(new Object[] { RT.keyword(null, "split"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "split")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), ": StringSeparator -> String -> NonEmptySeq[String]", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "s")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "s")) })), RT.keyword(null, "doc"), ": StringSeparator -> String -> NonEmptySeq[String]" }) });
    const__19 = (Keyword)RT.keyword(null, "var");
    const__20 = (Keyword)RT.keyword(null, "method-map");
    const__22 = (AFn)RT.map(new Object[] { RT.keyword(null, "split"), RT.keyword(null, "split") });
    const__23 = (Keyword)RT.keyword(null, "method-builders");
    const__24 = (Var)RT.var("clojure.core", "intern");
    const__25 = (Var)RT.var("clojure.core", "*ns*");
    const__26 = (Var)RT.var("clojure.core", "with-meta");
    const__27 = (AFn)((IObj)Symbol.intern(null, "split")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), ": StringSeparator -> String -> NonEmptySeq[String]", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "s")) })) }));
    const__28 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "split")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), ": StringSeparator -> String -> NonEmptySeq[String]", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "s")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "s")) })), RT.keyword(null, "doc"), ": StringSeparator -> String -> NonEmptySeq[String]" });
    const__29 = (Keyword)RT.keyword(null, "protocol");
    const__30 = (Var)RT.var("clojure.core", "-reset-methods");
    const__31 = (AFn)Symbol.intern(null, "StringSeparator");
    const__32 = (Var)RT.var("camel-snake-kebab.internals.string-separator", "classify-char");
    const__40 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "c")) })), RT.keyword(null, "line"), Integer.valueOf(33), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "camel_snake_kebab/internals/string_separator.cljc" });
    const__41 = (Var)RT.var("camel-snake-kebab.internals.string-separator", "generic-split");
    const__44 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ss")) })), RT.keyword(null, "line"), Integer.valueOf(41), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "camel_snake_kebab/internals/string_separator.cljc" });
    const__45 = (Var)RT.var("camel-snake-kebab.internals.string-separator", "generic-separator");
    const__47 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(68), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "camel_snake_kebab/internals/string_separator.cljc" });
    const__50 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(69), RT.keyword(null, "column"), Integer.valueOf(3) });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("camel_snake_kebab.internals.string_separator__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
