package cheshire;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class parse__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__10;
  
  public static final Var const__11;
  
  public static final AFn const__15;
  
  public static final Var const__16;
  
  public static final AFn const__21;
  
  public static final Var const__22;
  
  public static final AFn const__25;
  
  public static final Var const__26;
  
  public static final Var const__27;
  
  public static final Keyword const__28;
  
  public static final Var const__29;
  
  public static final AFn const__32;
  
  public static final Var const__33;
  
  public static final AFn const__36;
  
  public static final AFn const__39;
  
  public static final Var const__40;
  
  public static final AFn const__43;
  
  public static final Var const__44;
  
  public static final AFn const__47;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new parse.fn__29315());
    const__3.setMeta((IPersistentMap)const__10);
    const__11.setDynamic(true).setMeta((IPersistentMap)const__15);
    const__11.setDynamic(true).bindRoot(Boolean.FALSE);
    const__16.setMeta((IPersistentMap)const__21);
    const__16.bindRoot(new parse.tag());
    ((Var)const__16)








      
      .setMacro();
    const__22.setMeta((IPersistentMap)const__25);
    const__22.bindRoot(new parse.parse_object());
    const__29.setMeta((IPersistentMap)const__32);
    const__29.bindRoot(new parse.parse_array());
    const__33.setMeta((IPersistentMap)const__36);
    const__33.bindRoot(new parse.lazily_parse_array());
    const__3.setMeta((IPersistentMap)const__39);
    const__3.bindRoot(new parse.parse_STAR_());
    const__40.setMeta((IPersistentMap)const__43);
    const__40.bindRoot(new parse.parse_strict());
    const__44.setMeta((IPersistentMap)const__47);
    const__44.bindRoot(new parse.parse());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "cheshire.parse");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("cheshire.parse", "parse*");
    const__10 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(4), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "cheshire/parse.clj" });
    const__11 = (Var)RT.var("cheshire.parse", "*use-bigdecimals?*");
    const__15 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Flag to determine whether float values should be returned as\n             BigDecimals to retain precision. Defaults to false.", RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(6), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "cheshire/parse.clj" });
    const__16 = (Var)RT.var("cheshire.parse", "tag");
    const__21 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "obj")) })), RT.keyword(null, "line"), Integer.valueOf(11), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "cheshire/parse.clj" });
    const__22 = (Var)RT.var("cheshire.parse", "parse-object");
    const__25 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "jp")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "JsonParser") })), Symbol.intern(null, "key-fn"), Symbol.intern(null, "bd?"), Symbol.intern(null, "array-coerce-fn")) })), RT.keyword(null, "line"), Integer.valueOf(15), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "cheshire/parse.clj" });
    const__26 = (Var)RT.var("clojure.core", "alter-meta!");
    const__27 = (Var)RT.var("clojure.core", "assoc");
    const__28 = (Keyword)RT.keyword(null, "inline");
    const__29 = (Var)RT.var("cheshire.parse", "parse-array");
    const__32 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "jp")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "JsonParser") })), Symbol.intern(null, "key-fn"), Symbol.intern(null, "bd?"), Symbol.intern(null, "array-coerce-fn")) })), RT.keyword(null, "line"), Integer.valueOf(31), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "cheshire/parse.clj" });
    const__33 = (Var)RT.var("cheshire.parse", "lazily-parse-array");
    const__36 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "jp")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "JsonParser") })), Symbol.intern(null, "key-fn"), Symbol.intern(null, "bd?"), Symbol.intern(null, "array-coerce-fn")) })), RT.keyword(null, "line"), Integer.valueOf(46), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "cheshire/parse.clj" });
    const__39 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "jp")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "JsonParser") })), Symbol.intern(null, "key-fn"), Symbol.intern(null, "bd?"), Symbol.intern(null, "array-coerce-fn")) })), RT.keyword(null, "line"), Integer.valueOf(61), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "cheshire/parse.clj" });
    const__40 = (Var)RT.var("cheshire.parse", "parse-strict");
    const__43 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "jp")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "JsonParser") })), Symbol.intern(null, "key-fn"), Symbol.intern(null, "eof"), Symbol.intern(null, "array-coerce-fn")) })), RT.keyword(null, "line"), Integer.valueOf(78), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "cheshire/parse.clj" });
    const__44 = (Var)RT.var("cheshire.parse", "parse");
    const__47 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "jp")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "JsonParser") })), Symbol.intern(null, "key-fn"), Symbol.intern(null, "eof"), Symbol.intern(null, "array-coerce-fn")) })), RT.keyword(null, "line"), Integer.valueOf(86), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "cheshire/parse.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("cheshire.parse__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
