package cheshire;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class generate__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final Keyword const__2;
  
  public static final AFn const__3;
  
  public static final AFn const__4;
  
  public static final Var const__5;
  
  public static final AFn const__13;
  
  public static final Var const__14;
  
  public static final AFn const__18;
  
  public static final Object const__19;
  
  public static final Var const__20;
  
  public static final Var const__21;
  
  public static final Var const__22;
  
  public static final Var const__23;
  
  public static final ISeq const__24;
  
  public static final Var const__25;
  
  public static final Var const__26;
  
  public static final AFn const__30;
  
  public static final Keyword const__31;
  
  public static final AFn const__32;
  
  public static final Keyword const__33;
  
  public static final Keyword const__34;
  
  public static final AFn const__36;
  
  public static final Keyword const__37;
  
  public static final Var const__38;
  
  public static final Var const__39;
  
  public static final Var const__40;
  
  public static final AFn const__41;
  
  public static final AFn const__42;
  
  public static final Keyword const__43;
  
  public static final Var const__44;
  
  public static final AFn const__45;
  
  public static final Var const__46;
  
  public static final AFn const__49;
  
  public static final Keyword const__50;
  
  public static final Var const__51;
  
  public static final AFn const__54;
  
  public static final Var const__55;
  
  public static final AFn const__58;
  
  public static final Var const__59;
  
  public static final AFn const__62;
  
  public static final Var const__63;
  
  public static final AFn const__66;
  
  public static final Var const__67;
  
  public static final AFn const__70;
  
  public static final Var const__71;
  
  public static final AFn const__74;
  
  public static final Var const__75;
  
  public static final AFn const__78;
  
  public static final Var const__79;
  
  public static final AFn const__82;
  
  public static final Var const__83;
  
  public static final AFn const__86;
  
  public static final AFn const__89;
  
  public static final Var const__90;
  
  public static final AFn const__93;
  
  public static final Var const__94;
  
  public static final AFn const__97;
  
  public static final Var const__98;
  
  public static final AFn const__101;
  
  public static final Var const__102;
  
  public static final AFn const__105;
  
  public static final Var const__106;
  
  public static final AFn const__109;
  
  public static final Var const__110;
  
  public static final AFn const__113;
  
  public static final Var const__114;
  
  public static final AFn const__117;
  
  public static final Var const__118;
  
  public static final AFn const__121;
  
  public static final Var const__122;
  
  public static final AFn const__125;
  
  public static final Var const__126;
  
  public static final AFn const__129;
  
  public static final Var const__130;
  
  public static final AFn const__133;
  
  public static final Var const__134;
  
  public static final AFn const__137;
  
  public static final Var const__138;
  
  public static final AFn const__141;
  
  public static final Var const__142;
  
  public static final AFn const__145;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new generate.fn__28739());
    const__5.setDynamic(true).setMeta((IPersistentMap)const__13);
    const__14.setMeta((IPersistentMap)const__18);
    const__14.bindRoot(new generate.tag());
    ((Var)const__14)










      
      .setMacro();
    const__46.setMeta((IPersistentMap)const__49);
    const__46.bindRoot(new generate.write_string());
    const__51.setMeta((IPersistentMap)const__54);
    const__51.bindRoot(new generate.fail());
    ((Var)const__51)

      
      .setMacro();
    const__55.setMeta((IPersistentMap)const__58);
    const__55.bindRoot(new generate.number_dispatch());
    ((Var)const__55)






      
      .setMacro();
    const__59.setMeta((IPersistentMap)const__62);
    const__63.setMeta((IPersistentMap)const__66);
    const__63.bindRoot(new generate.generate_basic_map());
    const__67.setMeta((IPersistentMap)const__70);
    const__67.bindRoot(new generate.generate_key_fn_map());
    const__71.setMeta((IPersistentMap)const__74);
    const__71.bindRoot(new generate.generate_map());
    const__75.setMeta((IPersistentMap)const__78);
    const__75.bindRoot(new generate.generate_array());
    const__79.setMeta((IPersistentMap)const__82);
    const__79.bindRoot(new generate.i_QMARK_());
    ((Var)const__79)







      
      .setMacro();
    const__83.setMeta((IPersistentMap)const__86);
    const__83.bindRoot(new generate.byte_array_QMARK_());
    const__59.setMeta((IPersistentMap)const__89);
    const__59.bindRoot(new generate.generate());
    const__90.setMeta((IPersistentMap)const__93);
    const__90.bindRoot(new generate.encode_nil());
    const__94.setMeta((IPersistentMap)const__97);
    const__94.bindRoot(new generate.encode_str());
    const__98.setMeta((IPersistentMap)const__101);
    const__98.bindRoot(new generate.encode_number());
    const__102.setMeta((IPersistentMap)const__105);
    const__102.bindRoot(new generate.encode_long());
    const__106.setMeta((IPersistentMap)const__109);
    const__106.bindRoot(new generate.encode_int());
    const__110.setMeta((IPersistentMap)const__113);
    const__110.bindRoot(new generate.encode_ratio());
    const__114.setMeta((IPersistentMap)const__117);
    const__114.bindRoot(new generate.encode_seq());
    const__118.setMeta((IPersistentMap)const__121);
    const__118.bindRoot(new generate.encode_date());
    const__122.setMeta((IPersistentMap)const__125);
    const__122.bindRoot(new generate.encode_bool());
    const__126.setMeta((IPersistentMap)const__129);
    const__126.bindRoot(new generate.encode_named());
    const__130.setMeta((IPersistentMap)const__133);
    const__130.bindRoot(new generate.encode_map());
    const__134.setMeta((IPersistentMap)const__137);
    const__134.bindRoot(new generate.encode_symbol());
    const__138.setMeta((IPersistentMap)const__141);
    const__138.bindRoot(new generate.add_encoder());
    const__142.setMeta((IPersistentMap)const__145);
    const__142.bindRoot(new generate.remove_encoder());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "cheshire.generate")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Namespace used to generate JSON from Clojure data structures." }));
    const__2 = (Keyword)RT.keyword(null, "doc");
    const__3 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Namespace used to generate JSON from Clojure data structures." });
    const__4 = (AFn)Symbol.intern(null, "clojure.core");
    const__5 = (Var)RT.var("cheshire.generate", "*date-format*");
    const__13 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(11), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "cheshire/generate.clj" });
    const__14 = (Var)RT.var("cheshire.generate", "tag");
    const__18 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "obj")) })), RT.keyword(null, "line"), Integer.valueOf(13), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "cheshire/generate.clj" });
    const__19 = RT.classForName("cheshire.generate.JSONable");
    const__20 = (Var)RT.var("clojure.core", "alter-meta!");
    const__21 = (Var)RT.var("cheshire.generate", "JSONable");
    const__22 = (Var)RT.var("clojure.core", "assoc");
    const__23 = (Var)RT.var("clojure.core", "assert-same-protocol");
    const__24 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "to-json")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "t"), Symbol.intern(null, "jg")) })) })) }));
    const__25 = (Var)RT.var("clojure.core", "alter-var-root");
    const__26 = (Var)RT.var("clojure.core", "merge");
    const__30 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "cheshire.generate.JSONable"), RT.keyword(null, "on-interface"), RT.classForName("cheshire.generate.JSONable") });
    const__31 = (Keyword)RT.keyword(null, "sigs");
    const__32 = (AFn)RT.map(new Object[] { RT.keyword(null, "to-json"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "to-json")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "t"), Symbol.intern(null, "jg")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "t"), Symbol.intern(null, "jg")) })), RT.keyword(null, "doc"), null }) });
    const__33 = (Keyword)RT.keyword(null, "var");
    const__34 = (Keyword)RT.keyword(null, "method-map");
    const__36 = (AFn)RT.map(new Object[] { RT.keyword(null, "to-json"), RT.keyword(null, "to-json") });
    const__37 = (Keyword)RT.keyword(null, "method-builders");
    const__38 = (Var)RT.var("clojure.core", "intern");
    const__39 = (Var)RT.var("clojure.core", "*ns*");
    const__40 = (Var)RT.var("clojure.core", "with-meta");
    const__41 = (AFn)((IObj)Symbol.intern(null, "to-json")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "t"), Symbol.intern(null, "jg")) })) }));
    const__42 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "to-json")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "t"), Symbol.intern(null, "jg")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "t"), Symbol.intern(null, "jg")) })), RT.keyword(null, "doc"), null });
    const__43 = (Keyword)RT.keyword(null, "protocol");
    const__44 = (Var)RT.var("clojure.core", "-reset-methods");
    const__45 = (AFn)Symbol.intern(null, "JSONable");
    const__46 = (Var)RT.var("cheshire.generate", "write-string");
    const__49 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "jg")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "JsonGenerator") })), ((IObj)Symbol.intern(null, "str")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") }))) })), RT.keyword(null, "line"), Integer.valueOf(20), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "cheshire/generate.clj" });
    const__50 = (Keyword)RT.keyword(null, "inline");
    const__51 = (Var)RT.var("cheshire.generate", "fail");
    const__54 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "obj"), Symbol.intern(null, "jg"), ((IObj)Symbol.intern(null, "e")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Exception") }))) })), RT.keyword(null, "line"), Integer.valueOf(23), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "cheshire/generate.clj" });
    const__55 = (Var)RT.var("cheshire.generate", "number-dispatch");
    const__58 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "jg"), Symbol.intern(null, "obj"), Symbol.intern(null, "e")) })), RT.keyword(null, "line"), Integer.valueOf(31), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "cheshire/generate.clj" });
    const__59 = (Var)RT.var("cheshire.generate", "generate");
    const__62 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(57), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "cheshire/generate.clj" });
    const__63 = (Var)RT.var("cheshire.generate", "generate-basic-map");
    const__66 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "jg")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "JsonGenerator") })), Symbol.intern(null, "obj"), ((IObj)Symbol.intern(null, "date-format")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") })), ((IObj)Symbol.intern(null, "e")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Exception") }))) })), RT.keyword(null, "line"), Integer.valueOf(59), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "cheshire/generate.clj" });
    const__67 = (Var)RT.var("cheshire.generate", "generate-key-fn-map");
    const__70 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "jg")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "JsonGenerator") })), Symbol.intern(null, "obj"), ((IObj)Symbol.intern(null, "date-format")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") })), ((IObj)Symbol.intern(null, "e")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Exception") })), Symbol.intern(null, "key-fn")) })), RT.keyword(null, "line"), Integer.valueOf(73), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "cheshire/generate.clj" });
    const__71 = (Var)RT.var("cheshire.generate", "generate-map");
    const__74 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "jg")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "JsonGenerator") })), Symbol.intern(null, "obj"), ((IObj)Symbol.intern(null, "date-format")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") })), ((IObj)Symbol.intern(null, "e")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Exception") })), Symbol.intern(null, "key-fn")) })), RT.keyword(null, "line"), Integer.valueOf(90), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "cheshire/generate.clj" });
    const__75 = (Var)RT.var("cheshire.generate", "generate-array");
    const__78 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "jg")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "JsonGenerator") })), Symbol.intern(null, "obj"), ((IObj)Symbol.intern(null, "date-format")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") })), ((IObj)Symbol.intern(null, "e")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Exception") })), Symbol.intern(null, "key-fn")) })), RT.keyword(null, "line"), Integer.valueOf(96), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "cheshire/generate.clj" });
    const__79 = (Var)RT.var("cheshire.generate", "i?");
    const__82 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "k"), Symbol.intern(null, "obj")) })), RT.keyword(null, "doc"), "Just to shorten 'instance?' and for debugging.", RT.keyword(null, "line"), Integer.valueOf(105), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "cheshire/generate.clj" });
    const__83 = (Var)RT.var("cheshire.generate", "byte-array?");
    const__86 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "o")) })), RT.keyword(null, "line"), Integer.valueOf(111), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "cheshire/generate.clj" });
    const__89 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "jg")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "JsonGenerator") })), Symbol.intern(null, "obj"), ((IObj)Symbol.intern(null, "date-format")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") })), ((IObj)Symbol.intern(null, "ex")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Exception") })), Symbol.intern(null, "key-fn")) })), RT.keyword(null, "line"), Integer.valueOf(116), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "cheshire/generate.clj" });
    const__90 = (Var)RT.var("cheshire.generate", "encode-nil");
    const__93 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), ((IObj)Symbol.intern(null, "jg")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "JsonGenerator") }))) })), RT.keyword(null, "doc"), "Encode null to the json generator.", RT.keyword(null, "line"), Integer.valueOf(157), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "cheshire/generate.clj" });
    const__94 = (Var)RT.var("cheshire.generate", "encode-str");
    const__97 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "s")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") })), ((IObj)Symbol.intern(null, "jg")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "JsonGenerator") }))) })), RT.keyword(null, "doc"), "Encode a string to the json generator.", RT.keyword(null, "line"), Integer.valueOf(162), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "cheshire/generate.clj" });
    const__98 = (Var)RT.var("cheshire.generate", "encode-number");
  }
  
  public static void __init1() {
    const__101 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "n")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "java.lang.Number") })), ((IObj)Symbol.intern(null, "jg")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "JsonGenerator") }))) })), RT.keyword(null, "doc"), "Encode anything implementing java.lang.Number to the json generator.", RT.keyword(null, "line"), Integer.valueOf(167), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "cheshire/generate.clj" });
    const__102 = (Var)RT.var("cheshire.generate", "encode-long");
    const__105 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "n")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Long") })), ((IObj)Symbol.intern(null, "jg")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "JsonGenerator") }))) })), RT.keyword(null, "doc"), "Encode anything implementing java.lang.Number to the json generator.", RT.keyword(null, "line"), Integer.valueOf(172), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "cheshire/generate.clj" });
    const__106 = (Var)RT.var("cheshire.generate", "encode-int");
    const__109 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "n"), ((IObj)Symbol.intern(null, "jg")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "JsonGenerator") }))) })), RT.keyword(null, "doc"), "Encode anything implementing java.lang.Number to the json generator.", RT.keyword(null, "line"), Integer.valueOf(177), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "cheshire/generate.clj" });
    const__110 = (Var)RT.var("cheshire.generate", "encode-ratio");
    const__113 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "n")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "clojure.lang.Ratio") })), ((IObj)Symbol.intern(null, "jg")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "JsonGenerator") }))) })), RT.keyword(null, "doc"), "Encode a clojure.lang.Ratio to the json generator.", RT.keyword(null, "line"), Integer.valueOf(182), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "cheshire/generate.clj" });
    const__114 = (Var)RT.var("cheshire.generate", "encode-seq");
    const__117 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s"), ((IObj)Symbol.intern(null, "jg")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "JsonGenerator") }))) })), RT.keyword(null, "doc"), "Encode a seq to the json generator.", RT.keyword(null, "line"), Integer.valueOf(187), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "cheshire/generate.clj" });
    const__118 = (Var)RT.var("cheshire.generate", "encode-date");
    const__121 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "d")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Date") })), ((IObj)Symbol.intern(null, "jg")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "JsonGenerator") }))) })), RT.keyword(null, "doc"), "Encode a date object to the json generator.", RT.keyword(null, "line"), Integer.valueOf(195), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "cheshire/generate.clj" });
    const__122 = (Var)RT.var("cheshire.generate", "encode-bool");
    const__125 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "b")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Boolean") })), ((IObj)Symbol.intern(null, "jg")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "JsonGenerator") }))) })), RT.keyword(null, "doc"), "Encode a Boolean object to the json generator.", RT.keyword(null, "line"), Integer.valueOf(202), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "cheshire/generate.clj" });
    const__126 = (Var)RT.var("cheshire.generate", "encode-named");
    const__129 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "k")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "clojure.lang.Keyword") })), ((IObj)Symbol.intern(null, "jg")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "JsonGenerator") }))) })), RT.keyword(null, "doc"), "Encode a keyword to the json generator.", RT.keyword(null, "line"), Integer.valueOf(207), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "cheshire/generate.clj" });
    const__130 = (Var)RT.var("cheshire.generate", "encode-map");
    const__133 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "m")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "clojure.lang.IPersistentMap") })), ((IObj)Symbol.intern(null, "jg")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "JsonGenerator") }))) })), RT.keyword(null, "doc"), "Encode a clojure map to the json generator.", RT.keyword(null, "line"), Integer.valueOf(214), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "cheshire/generate.clj" });
    const__134 = (Var)RT.var("cheshire.generate", "encode-symbol");
    const__137 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "s")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "clojure.lang.Symbol") })), ((IObj)Symbol.intern(null, "jg")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "JsonGenerator") }))) })), RT.keyword(null, "doc"), "Encode a clojure symbol to the json generator.", RT.keyword(null, "line"), Integer.valueOf(227), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "cheshire/generate.clj" });
    const__138 = (Var)RT.var("cheshire.generate", "add-encoder");
    const__141 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "cls"), Symbol.intern(null, "encoder")) })), RT.keyword(null, "doc"), "Provide an encoder for a type not handled by Cheshire.\n\n   ex. (add-encoder java.net.URL encode-string)\n\n   See encode-str, encode-map, etc, in the cheshire.custom\n   namespace for encoder examples.", RT.keyword(null, "line"), Integer.valueOf(233), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "cheshire/generate.clj" });
    const__142 = (Var)RT.var("cheshire.generate", "remove-encoder");
    const__145 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "cls")) })), RT.keyword(null, "doc"), "Remove encoder for a given type.\n\n   ex. (remove-encoder java.net.URL)", RT.keyword(null, "line"), Integer.valueOf(245), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "cheshire/generate.clj" });
  }
  
  static  {
    __init0();
    __init1();
    Compiler.pushNSandLoader(RT.classForName("cheshire.generate__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
