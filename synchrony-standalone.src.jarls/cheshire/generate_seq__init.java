package cheshire;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class generate_seq__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__3;
  
  public static final AFn const__4;
  
  public static final Var const__5;
  
  public static final AFn const__13;
  
  public static final Var const__14;
  
  public static final Var const__15;
  
  public static final Keyword const__16;
  
  public static final Var const__17;
  
  public static final AFn const__20;
  
  public static final Var const__21;
  
  public static final AFn const__24;
  
  public static final Var const__25;
  
  public static final AFn const__28;
  
  public static final Var const__29;
  
  public static final AFn const__32;
  
  public static final Var const__33;
  
  public static final AFn const__36;
  
  public static final Var const__37;
  
  public static final AFn const__40;
  
  public static final Var const__41;
  
  public static final AFn const__44;
  
  public static final Var const__45;
  
  public static final AFn const__48;
  
  public static final AFn const__51;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new generate_seq.fn__29048());
    const__5.setMeta((IPersistentMap)const__13);
    const__5.bindRoot(new generate_seq.write_start_object());
    const__17.setMeta((IPersistentMap)const__20);
    const__17.bindRoot(new generate_seq.write_end_object());
    const__21.setMeta((IPersistentMap)const__24);
    const__21.bindRoot(new generate_seq.write_start_array());
    const__25.setMeta((IPersistentMap)const__28);
    const__25.bindRoot(new generate_seq.write_end_array());
    const__29.setMeta((IPersistentMap)const__32);
    const__33.setMeta((IPersistentMap)const__36);
    const__33.bindRoot(new generate_seq.generate_basic_map());
    const__37.setMeta((IPersistentMap)const__40);
    const__37.bindRoot(new generate_seq.generate_key_fn_map());
    const__41.setMeta((IPersistentMap)const__44);
    const__41.bindRoot(new generate_seq.generate_map());
    const__45.setMeta((IPersistentMap)const__48);
    const__45.bindRoot(new generate_seq.generate_array());
    const__29.setMeta((IPersistentMap)const__51);
    const__29.bindRoot(new generate_seq.generate());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "cheshire.generate-seq")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Namespace used to generate JSON from Clojure data structures in a\n  sequential way." }));
    const__3 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Namespace used to generate JSON from Clojure data structures in a\n  sequential way." });
    const__4 = (AFn)Symbol.intern(null, "clojure.core");
    const__5 = (Var)RT.var("cheshire.generate-seq", "write-start-object");
    const__13 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "jg")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "JsonGenerator") })), Symbol.intern(null, "wholeness")) })), RT.keyword(null, "line"), Integer.valueOf(14), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "cheshire/generate_seq.clj" });
    const__14 = (Var)RT.var("clojure.core", "alter-meta!");
    const__15 = (Var)RT.var("clojure.core", "assoc");
    const__16 = (Keyword)RT.keyword(null, "inline");
    const__17 = (Var)RT.var("cheshire.generate-seq", "write-end-object");
    const__20 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "jg")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "JsonGenerator") })), Symbol.intern(null, "wholeness")) })), RT.keyword(null, "line"), Integer.valueOf(18), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "cheshire/generate_seq.clj" });
    const__21 = (Var)RT.var("cheshire.generate-seq", "write-start-array");
    const__24 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "jg")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "JsonGenerator") })), Symbol.intern(null, "wholeness")) })), RT.keyword(null, "line"), Integer.valueOf(22), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "cheshire/generate_seq.clj" });
    const__25 = (Var)RT.var("cheshire.generate-seq", "write-end-array");
    const__28 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "jg")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "JsonGenerator") })), Symbol.intern(null, "wholeness")) })), RT.keyword(null, "line"), Integer.valueOf(26), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "cheshire/generate_seq.clj" });
    const__29 = (Var)RT.var("cheshire.generate-seq", "generate");
    const__32 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(30), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "cheshire/generate_seq.clj" });
    const__33 = (Var)RT.var("cheshire.generate-seq", "generate-basic-map");
    const__36 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "jg")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "JsonGenerator") })), Symbol.intern(null, "obj"), ((IObj)Symbol.intern(null, "date-format")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") })), ((IObj)Symbol.intern(null, "e")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Exception") })), Symbol.intern(null, "wholeness")) })), RT.keyword(null, "line"), Integer.valueOf(32), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "cheshire/generate_seq.clj" });
    const__37 = (Var)RT.var("cheshire.generate-seq", "generate-key-fn-map");
    const__40 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "jg")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "JsonGenerator") })), Symbol.intern(null, "obj"), ((IObj)Symbol.intern(null, "date-format")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") })), ((IObj)Symbol.intern(null, "e")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Exception") })), Symbol.intern(null, "key-fn"), Symbol.intern(null, "wholeness")) })), RT.keyword(null, "line"), Integer.valueOf(50), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "cheshire/generate_seq.clj" });
    const__41 = (Var)RT.var("cheshire.generate-seq", "generate-map");
    const__44 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "jg")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "JsonGenerator") })), Symbol.intern(null, "obj"), ((IObj)Symbol.intern(null, "date-format")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") })), ((IObj)Symbol.intern(null, "e")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Exception") })), Symbol.intern(null, "key-fn"), Symbol.intern(null, "wholeness")) })), RT.keyword(null, "line"), Integer.valueOf(71), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "cheshire/generate_seq.clj" });
    const__45 = (Var)RT.var("cheshire.generate-seq", "generate-array");
    const__48 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "jg")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "JsonGenerator") })), Symbol.intern(null, "obj"), ((IObj)Symbol.intern(null, "date-format")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") })), ((IObj)Symbol.intern(null, "e")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Exception") })), Symbol.intern(null, "key-fn"), Symbol.intern(null, "wholeness")) })), RT.keyword(null, "line"), Integer.valueOf(78), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "cheshire/generate_seq.clj" });
    const__51 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { RT.vector(new Object[] { ((IObj)Symbol.intern(null, "jg")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "JsonGenerator") })), Symbol.intern(null, "obj"), ((IObj)Symbol.intern(null, "date-format")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") })), ((IObj)Symbol.intern(null, "ex")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Exception") })), Symbol.intern(null, "key-fn"), Symbol.intern(null, "&"), RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "wholeness")) }) }) })), RT.keyword(null, "line"), Integer.valueOf(90), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "cheshire/generate_seq.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("cheshire.generate_seq__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
