package cheshire;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class factory__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__3;
  
  public static final AFn const__4;
  
  public static final Var const__5;
  
  public static final AFn const__11;
  
  public static final Var const__12;
  
  public static final AFn const__16;
  
  public static final Var const__17;
  
  public static final AFn const__20;
  
  public static final Var const__21;
  
  public static final AFn const__24;
  
  public static final Var const__25;
  
  public static final AFn const__30;
  
  public static final Var const__31;
  
  public static final AFn const__34;
  
  public static final Var const__35;
  
  public static final AFn const__38;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new factory.fn__28717());
    const__5.setMeta((IPersistentMap)const__11);
    const__5.bindRoot("yyyy-MM-dd'T'HH:mm:ss'Z'");
    const__12.setMeta((IPersistentMap)const__16);
    const__12.bindRoot(new factory.make_json_factory());
    const__17.setMeta((IPersistentMap)const__20);
    const__17.bindRoot(new factory.make_smile_factory());
    const__21.setMeta((IPersistentMap)const__24);
    const__21.bindRoot(new factory.make_cbor_factory());
    const__25.setDynamic(true).setMeta((IPersistentMap)const__30);
    const__25.setDynamic(true).bindRoot(null);
    const__31.setDynamic(true).setMeta((IPersistentMap)const__34);
    const__31.setDynamic(true).bindRoot(null);
    const__35.setDynamic(true).setMeta((IPersistentMap)const__38);
    const__35.setDynamic(true).bindRoot(null);
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "cheshire.factory")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Factories used for JSON/SMILE generation, used by both the core and\n custom generators." }));
    const__3 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Factories used for JSON/SMILE generation, used by both the core and\n custom generators." });
    const__4 = (AFn)Symbol.intern(null, "clojure.core");
    const__5 = (Var)RT.var("cheshire.factory", "default-date-format");
    const__11 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(11), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "cheshire/factory.clj" });
    const__12 = (Var)RT.var("cheshire.factory", "make-json-factory");
    const__16 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "opts"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "com.fasterxml.jackson.core.JsonFactory") })) })), RT.keyword(null, "line"), Integer.valueOf(27), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "cheshire/factory.clj" });
    const__17 = (Var)RT.var("cheshire.factory", "make-smile-factory");
    const__20 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "opts"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "com.fasterxml.jackson.dataformat.smile.SmileFactory") })) })), RT.keyword(null, "line"), Integer.valueOf(54), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "cheshire/factory.clj" });
    const__21 = (Var)RT.var("cheshire.factory", "make-cbor-factory");
    const__24 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "opts"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "com.fasterxml.jackson.dataformat.cbor.CBORFactory") })) })), RT.keyword(null, "line"), Integer.valueOf(81), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "cheshire/factory.clj" });
    const__25 = (Var)RT.var("cheshire.factory", "*json-factory*");
    const__30 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "tag"), RT.classForName("com.fasterxml.jackson.core.JsonFactory"), RT.keyword(null, "line"), Integer.valueOf(114), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "cheshire/factory.clj" });
    const__31 = (Var)RT.var("cheshire.factory", "*smile-factory*");
    const__34 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "tag"), RT.classForName("com.fasterxml.jackson.dataformat.smile.SmileFactory"), RT.keyword(null, "line"), Integer.valueOf(116), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "cheshire/factory.clj" });
    const__35 = (Var)RT.var("cheshire.factory", "*cbor-factory*");
    const__38 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "tag"), RT.classForName("com.fasterxml.jackson.dataformat.cbor.CBORFactory"), RT.keyword(null, "line"), Integer.valueOf(118), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "cheshire/factory.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("cheshire.factory__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
