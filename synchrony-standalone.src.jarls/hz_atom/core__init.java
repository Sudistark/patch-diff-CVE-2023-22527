package hz_atom;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class core__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__11;
  
  public static final Var const__12;
  
  public static final AFn const__15;
  
  public static final Var const__16;
  
  public static final AFn const__18;
  
  public static final Var const__19;
  
  public static final Object const__20;
  
  public static final Var const__21;
  
  public static final AFn const__24;
  
  public static final Var const__25;
  
  public static final AFn const__28;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new core.fn__21227());
    const__3.setMeta((IPersistentMap)const__11);
    const__3.bindRoot(new core.swap_hz_atom());
    const__12.setMeta((IPersistentMap)const__15);
    const__12.bindRoot(new core.validate());
    const__16.setMeta((IPersistentMap)const__18);
    const__16.bindRoot("atom");
    const__21.setMeta((IPersistentMap)const__24);
    const__21.bindRoot(new core.make_map_listener());
    const__25.setMeta((IPersistentMap)const__28);
    const__25.bindRoot(new core.hz_atom());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "hz-atom.core");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("hz-atom.core", "swap-hz-atom");
    const__11 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "hz-atom"), Symbol.intern(null, "f")) })), RT.keyword(null, "line"), Integer.valueOf(6), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "hz_atom/core.clj" });
    const__12 = (Var)RT.var("hz-atom.core", "validate");
    const__15 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "vf"), Symbol.intern(null, "val")) })), RT.keyword(null, "line"), Integer.valueOf(13), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "hz_atom/core.clj" });
    const__16 = (Var)RT.var("hz-atom.core", "hz-map-atom-key");
    const__18 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(23), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "hz_atom/core.clj" });
    const__19 = (Var)RT.var("clojure.core", "print-method");
    const__20 = RT.classForName("hz_atom.core.HazelcastAtom");
    const__21 = (Var)RT.var("hz-atom.core", "make-map-listener");
    const__24 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "the-hz-atom")) })), RT.keyword(null, "line"), Integer.valueOf(54), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "hz_atom/core.clj" });
    const__25 = (Var)RT.var("hz-atom.core", "hz-atom");
    const__28 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "hz"), Symbol.intern(null, "atom-name"), Symbol.intern(null, "initial-value")) })), RT.keyword(null, "line"), Integer.valueOf(61), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "hz_atom/core.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("hz_atom.core__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
