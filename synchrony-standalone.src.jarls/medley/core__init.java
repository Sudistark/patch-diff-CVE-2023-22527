package medley;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class core__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__3;
  
  public static final AFn const__4;
  
  public static final Var const__5;
  
  public static final AFn const__13;
  
  public static final Var const__14;
  
  public static final AFn const__17;
  
  public static final Var const__18;
  
  public static final AFn const__21;
  
  public static final Var const__22;
  
  public static final AFn const__26;
  
  public static final Var const__27;
  
  public static final AFn const__30;
  
  public static final Var const__31;
  
  public static final AFn const__34;
  
  public static final Var const__35;
  
  public static final AFn const__38;
  
  public static final Var const__39;
  
  public static final AFn const__42;
  
  public static final Var const__43;
  
  public static final AFn const__46;
  
  public static final Var const__47;
  
  public static final AFn const__50;
  
  public static final Var const__51;
  
  public static final AFn const__54;
  
  public static final Var const__55;
  
  public static final AFn const__58;
  
  public static final Var const__59;
  
  public static final AFn const__62;
  
  public static final Var const__63;
  
  public static final AFn const__66;
  
  public static final Var const__67;
  
  public static final AFn const__70;
  
  public static final Var const__71;
  
  public static final AFn const__74;
  
  public static final Var const__75;
  
  public static final AFn const__78;
  
  public static final Var const__79;
  
  public static final AFn const__82;
  
  public static final Var const__83;
  
  public static final AFn const__86;
  
  public static final Var const__87;
  
  public static final AFn const__90;
  
  public static final Var const__91;
  
  public static final AFn const__94;
  
  public static final Var const__95;
  
  public static final AFn const__98;
  
  public static final Var const__99;
  
  public static final AFn const__102;
  
  public static final Var const__103;
  
  public static final AFn const__106;
  
  public static final Var const__107;
  
  public static final AFn const__110;
  
  public static final Var const__111;
  
  public static final AFn const__114;
  
  public static final Var const__115;
  
  public static final AFn const__118;
  
  public static final Var const__119;
  
  public static final AFn const__122;
  
  public static final Var const__123;
  
  public static final AFn const__126;
  
  public static final Var const__127;
  
  public static final AFn const__130;
  
  public static final Var const__131;
  
  public static final AFn const__134;
  
  public static final Var const__135;
  
  public static final AFn const__138;
  
  public static final Var const__139;
  
  public static final AFn const__142;
  
  public static final Var const__143;
  
  public static final AFn const__146;
  
  public static final Var const__147;
  
  public static final AFn const__150;
  
  public static void load() { LockingTransaction.runInTransaction((Callable)new core.fn__30810());
    const__5.setMeta((IPersistentMap)const__13);
    const__5.bindRoot(new core.find_first());
    const__14.setMeta((IPersistentMap)const__17);
    const__14.bindRoot(new core.dissoc_in());
    const__18.setMeta((IPersistentMap)const__21);
    const__18.bindRoot(new core.assoc_some());
    const__22.setMeta((IPersistentMap)const__26);
    const__22.bindRoot(new core.editable_QMARK_());
    const__27.setMeta((IPersistentMap)const__30);
    const__27.bindRoot(new core.reduce_map());
    const__31.setMeta((IPersistentMap)const__34);
    const__31.bindRoot(new core.map_entry());
    const__35.setMeta((IPersistentMap)const__38);
    const__35.bindRoot(new core.map_kv());
    const__39.setMeta((IPersistentMap)const__42);
    const__39.bindRoot(new core.map_keys());
    const__43.setMeta((IPersistentMap)const__46);
    const__43.bindRoot(new core.map_vals());
    const__47.setMeta((IPersistentMap)const__50);
    const__47.bindRoot(new core.filter_kv());
    const__51.setMeta((IPersistentMap)const__54);
    const__51.bindRoot(new core.filter_keys());
    const__55.setMeta((IPersistentMap)const__58);
    const__55.bindRoot(new core.filter_vals());
    const__59.setMeta((IPersistentMap)const__62);
    const__59.bindRoot(new core.remove_kv());
    const__63.setMeta((IPersistentMap)const__66);
    const__63.bindRoot(new core.remove_keys());
    const__67.setMeta((IPersistentMap)const__70);
    const__67.bindRoot(new core.remove_vals());
    const__71.setMeta((IPersistentMap)const__74);
    const__71.bindRoot(new core.queue());
    const__75.setMeta((IPersistentMap)const__78);
    const__75.bindRoot(new core.queue_QMARK_());
    const__79.setMeta((IPersistentMap)const__82);
    const__79.bindRoot(new core.boolean_QMARK_());
    const__83.setMeta((IPersistentMap)const__86);
    const__83.bindRoot(new core.least());
    const__87.setMeta((IPersistentMap)const__90);
    const__87.bindRoot(new core.greatest());
    const__91.setMeta((IPersistentMap)const__94);
    const__91.bindRoot(new core.mapply());
    const__95.setMeta((IPersistentMap)const__98);
    const__95.bindRoot(new core.interleave_all());
    const__99.setMeta((IPersistentMap)const__102);
    const__99.bindRoot(new core.distinct_by());
    const__103.setMeta((IPersistentMap)const__106);
    const__103.bindRoot(new core.dedupe_by());
    const__107.setMeta((IPersistentMap)const__110);
    const__107.bindRoot(new core.take_upto());
    const__111.setMeta((IPersistentMap)const__114);
    const__111.bindRoot(new core.drop_upto());
    const__115.setMeta((IPersistentMap)const__118);
    const__115.bindRoot(new core.indexed());
    const__119.setMeta((IPersistentMap)const__122);
    const__119.bindRoot(new core.abs());
    const__123.setMeta((IPersistentMap)const__126);
    const__123.bindRoot(new core.deref_swap_BANG_());
    const__127.setMeta((IPersistentMap)const__130);
    const__127.bindRoot(new core.deref_reset_BANG_());
    const__131.setMeta((IPersistentMap)const__134);
    const__131.bindRoot(new core.ex_message());
    const__135.setMeta((IPersistentMap)const__138);
    const__135.bindRoot(new core.ex_cause());
    const__139.setMeta((IPersistentMap)const__142);
    const__139.bindRoot(new core.uuid_QMARK_());
    const__143.setMeta((IPersistentMap)const__146);
    const__143.bindRoot(new core.uuid());
    const__147.setMeta((IPersistentMap)const__150);
    const__147.bindRoot(new core.random_uuid()); }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "medley.core")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "A small collection of useful, mostly pure functions that might not look out\n  of place in the clojure.core namespace." }));
    const__3 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "A small collection of useful, mostly pure functions that might not look out\n  of place in the clojure.core namespace." });
    const__4 = (AFn)Symbol.intern(null, "clojure.core");
    const__5 = (Var)RT.var("medley.core", "find-first");
    const__13 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pred")), Tuple.create(Symbol.intern(null, "pred"), Symbol.intern(null, "coll")) })), RT.keyword(null, "doc"), "Finds the first item in a collection that matches a predicate.", RT.keyword(null, "line"), Integer.valueOf(6), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "medley/core.cljc" });
    const__14 = (Var)RT.var("medley.core", "dissoc-in");
    const__17 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "ks")) })), RT.keyword(null, "doc"), "Dissociate a value in a nested assocative structure, identified by a sequence\n  of keys. Any collections left empty by the operation will be dissociated from\n  their containing structures.", RT.keyword(null, "line"), Integer.valueOf(20), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "medley/core.cljc" });
    const__18 = (Var)RT.var("medley.core", "assoc-some");
    const__21 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "k"), Symbol.intern(null, "v")), Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "k"), Symbol.intern(null, "v"), Symbol.intern(null, "&"), Symbol.intern(null, "kvs")) })), RT.keyword(null, "doc"), "Associates a key with a value in a map, if and only if the value is not nil.", RT.keyword(null, "line"), Integer.valueOf(34), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "medley/core.cljc" });
    const__22 = (Var)RT.var("medley.core", "editable?");
    const__26 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "coll")) })), RT.keyword(null, "line"), Integer.valueOf(43), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "medley/core.cljc" });
    const__27 = (Var)RT.var("medley.core", "reduce-map");
    const__30 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "coll")) })), RT.keyword(null, "line"), Integer.valueOf(47), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "medley/core.cljc" });
    const__31 = (Var)RT.var("medley.core", "map-entry");
    const__34 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "k"), Symbol.intern(null, "v")) })), RT.keyword(null, "doc"), "Create a map entry for a key and value pair.", RT.keyword(null, "line"), Integer.valueOf(52), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "medley/core.cljc" });
    const__35 = (Var)RT.var("medley.core", "map-kv");
    const__38 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "coll")) })), RT.keyword(null, "doc"), "Maps a function over the key/value pairs of an associate collection. Expects\n  a function that takes two arguments, the key and value, and returns the new\n  key and value as a collection of two elements.", RT.keyword(null, "line"), Integer.valueOf(58), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "medley/core.cljc" });
    const__39 = (Var)RT.var("medley.core", "map-keys");
    const__42 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "coll")) })), RT.keyword(null, "doc"), "Maps a function over the keys of an associative collection.", RT.keyword(null, "line"), Integer.valueOf(65), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "medley/core.cljc" });
    const__43 = (Var)RT.var("medley.core", "map-vals");
    const__46 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "coll")) })), RT.keyword(null, "doc"), "Maps a function over the values of an associative collection.", RT.keyword(null, "line"), Integer.valueOf(70), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "medley/core.cljc" });
    const__47 = (Var)RT.var("medley.core", "filter-kv");
    const__50 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pred"), Symbol.intern(null, "coll")) })), RT.keyword(null, "doc"), "Returns a new associative collection of the items in coll for which\n  `(pred (key item) (val item))` returns true.", RT.keyword(null, "line"), Integer.valueOf(75), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "medley/core.cljc" });
    const__51 = (Var)RT.var("medley.core", "filter-keys");
    const__54 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pred"), Symbol.intern(null, "coll")) })), RT.keyword(null, "doc"), "Returns a new associative collection of the items in coll for which\n  `(pred (key item))` returns true.", RT.keyword(null, "line"), Integer.valueOf(81), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "medley/core.cljc" });
    const__55 = (Var)RT.var("medley.core", "filter-vals");
    const__58 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pred"), Symbol.intern(null, "coll")) })), RT.keyword(null, "doc"), "Returns a new associative collection of the items in coll for which\n  `(pred (val item))` returns true.", RT.keyword(null, "line"), Integer.valueOf(87), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "medley/core.cljc" });
    const__59 = (Var)RT.var("medley.core", "remove-kv");
    const__62 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pred"), Symbol.intern(null, "coll")) })), RT.keyword(null, "doc"), "Returns a new associative collection of the items in coll for which\n  `(pred (key item) (val item))` returns false.", RT.keyword(null, "line"), Integer.valueOf(93), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "medley/core.cljc" });
    const__63 = (Var)RT.var("medley.core", "remove-keys");
    const__66 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pred"), Symbol.intern(null, "coll")) })), RT.keyword(null, "doc"), "Returns a new associative collection of the items in coll for which\n  `(pred (key item))` returns false.", RT.keyword(null, "line"), Integer.valueOf(99), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "medley/core.cljc" });
    const__67 = (Var)RT.var("medley.core", "remove-vals");
    const__70 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pred"), Symbol.intern(null, "coll")) })), RT.keyword(null, "doc"), "Returns a new associative collection of the items in coll for which\n  `(pred (val item))` returns false.", RT.keyword(null, "line"), Integer.valueOf(105), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "medley/core.cljc" });
    const__71 = (Var)RT.var("medley.core", "queue");
    const__74 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(), Tuple.create(Symbol.intern(null, "coll")) })), RT.keyword(null, "doc"), "Creates an empty persistent queue, or one populated with a collection.", RT.keyword(null, "line"), Integer.valueOf(111), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "medley/core.cljc" });
    const__75 = (Var)RT.var("medley.core", "queue?");
    const__78 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "doc"), "Returns true if x implements clojure.lang.PersistentQueue.", RT.keyword(null, "line"), Integer.valueOf(117), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "medley/core.cljc" });
    const__79 = (Var)RT.var("medley.core", "boolean?");
    const__82 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "doc"), "Returns true if x is a boolean.", RT.keyword(null, "line"), Integer.valueOf(123), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "medley/core.cljc" });
    const__83 = (Var)RT.var("medley.core", "least");
    const__86 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "xs")) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(131), RT.keyword(null, "column"), Integer.valueOf(15) })), RT.keyword(null, "doc"), "Return the least argument (as defined by the compare function) in O(n) time.", RT.keyword(null, "line"), Integer.valueOf(129), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "medley/core.cljc" });
    const__87 = (Var)RT.var("medley.core", "greatest");
    const__90 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "xs")) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(139), RT.keyword(null, "column"), Integer.valueOf(15) })), RT.keyword(null, "doc"), "Find the greatest argument (as defined by the compare function) in O(n) time.", RT.keyword(null, "line"), Integer.valueOf(137), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "medley/core.cljc" });
    const__91 = (Var)RT.var("medley.core", "mapply");
    const__94 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "&"), Symbol.intern(null, "args")) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(150), RT.keyword(null, "column"), Integer.valueOf(15) })), RT.keyword(null, "doc"), "Applies a function f to the argument list formed by concatenating\n  everything but the last element of args with the last element of\n  args. This is useful for applying a function that accepts keyword\n  arguments to a map.", RT.keyword(null, "line"), Integer.valueOf(145), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "medley/core.cljc" });
    const__95 = (Var)RT.var("medley.core", "interleave-all");
    const__98 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "colls")) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(158), RT.keyword(null, "column"), Integer.valueOf(15) })), RT.keyword(null, "doc"), "Returns a lazy seq of the first item in each coll, then the second, etc.\n  Unlike `clojure.core/interleave`, the returned seq contains all items in the\n  supplied collections, even if the collections are different sizes.", RT.keyword(null, "line"), Integer.valueOf(154), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "medley/core.cljc" });
    const__99 = (Var)RT.var("medley.core", "distinct-by");
  }
  
  public static void __init1() {
    const__102 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f")), Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "coll")) })), RT.keyword(null, "doc"), "Returns a lazy sequence of the elements of coll, removing any elements that\n  return duplicate values when passed to a function f.", RT.keyword(null, "line"), Integer.valueOf(173), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "medley/core.cljc" });
    const__103 = (Var)RT.var("medley.core", "dedupe-by");
    const__106 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f")), Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "coll")) })), RT.keyword(null, "doc"), "Returns a lazy sequence of the elements of coll, removing any **consecutive**\n  elements that return duplicate values when passed to a function f.", RT.keyword(null, "line"), Integer.valueOf(200), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "medley/core.cljc" });
    const__107 = (Var)RT.var("medley.core", "take-upto");
    const__110 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pred")), Tuple.create(Symbol.intern(null, "pred"), Symbol.intern(null, "coll")) })), RT.keyword(null, "doc"), "Returns a lazy sequence of successive items from coll up to and including\n  the first item for which `(pred item)` returns true.", RT.keyword(null, "line"), Integer.valueOf(219), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "medley/core.cljc" });
    const__111 = (Var)RT.var("medley.core", "drop-upto");
    const__114 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pred")), Tuple.create(Symbol.intern(null, "pred"), Symbol.intern(null, "coll")) })), RT.keyword(null, "doc"), "Returns a lazy sequence of the items in coll starting *after* the first item\n  for which `(pred item)` returns true.", RT.keyword(null, "line"), Integer.valueOf(238), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "medley/core.cljc" });
    const__115 = (Var)RT.var("medley.core", "indexed");
    const__118 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(), Tuple.create(Symbol.intern(null, "coll")) })), RT.keyword(null, "doc"), "Returns an ordered, lazy sequence of vectors `[index item]`, where item is a\n  value in coll, and index its position starting from zero.", RT.keyword(null, "line"), Integer.valueOf(254), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "medley/core.cljc" });
    const__119 = (Var)RT.var("medley.core", "abs");
    const__122 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "doc"), "Returns the absolute value of a number.", RT.keyword(null, "line"), Integer.valueOf(268), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "medley/core.cljc" });
    const__123 = (Var)RT.var("medley.core", "deref-swap!");
    const__126 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "atom"), Symbol.intern(null, "f"), Symbol.intern(null, "&"), Symbol.intern(null, "args")) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(277), RT.keyword(null, "column"), Integer.valueOf(15) })), RT.keyword(null, "doc"), "Atomically swaps the value of the atom to be `(apply f x args)`, where x is\n  the current value of the atom, then returns the original value of the atom.\n  This function therefore acts like an atomic `deref` then `swap!`.", RT.keyword(null, "line"), Integer.valueOf(273), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "medley/core.cljc" });
    const__127 = (Var)RT.var("medley.core", "deref-reset!");
    const__130 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "atom"), Symbol.intern(null, "newval")) })), RT.keyword(null, "doc"), "Sets the value of the atom without regard for the current value, then returns\n  the original value of the atom. See also: [[deref-swap!]].", RT.keyword(null, "line"), Integer.valueOf(290), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "medley/core.cljc" });
    const__131 = (Var)RT.var("medley.core", "ex-message");
    const__134 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ex")) })), RT.keyword(null, "doc"), "Returns the message attached to the given Error/Throwable object. For all\n  other types returns nil. Same as `cljs.core/ex-message` except it works for\n  Clojure as well as ClojureScript.", RT.keyword(null, "line"), Integer.valueOf(296), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "medley/core.cljc" });
    const__135 = (Var)RT.var("medley.core", "ex-cause");
    const__138 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ex")) })), RT.keyword(null, "doc"), "Returns the cause attached to the given ExceptionInfo/Throwable object. For\n  all other types returns nil. Same as `cljs.core/ex-clause` except it works for\n  Clojure as well as ClojureScript.", RT.keyword(null, "line"), Integer.valueOf(304), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "medley/core.cljc" });
    const__139 = (Var)RT.var("medley.core", "uuid?");
    const__142 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "doc"), "Returns true if the value is a UUID.", RT.keyword(null, "line"), Integer.valueOf(312), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "medley/core.cljc" });
    const__143 = (Var)RT.var("medley.core", "uuid");
    const__146 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })), RT.keyword(null, "doc"), "Returns a UUID generated from the supplied string. Same as `cljs.core/uuid`\n  in ClojureScript, while in Clojure it returns a `java.util.UUID` object.", RT.keyword(null, "line"), Integer.valueOf(317), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "medley/core.cljc" });
    const__147 = (Var)RT.var("medley.core", "random-uuid");
    const__150 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "doc"), "Generates a new random UUID. Same as `cljs.core/random-uuid` except it works\n  for Clojure as well as ClojureScript.", RT.keyword(null, "line"), Integer.valueOf(324), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "medley/core.cljc" });
  }
  
  static  {
    __init0();
    __init1();
    Compiler.pushNSandLoader(RT.classForName("medley.core__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
