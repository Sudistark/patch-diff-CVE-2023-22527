package clojure;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class xml__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__4;
  
  public static final AFn const__5;
  
  public static final Var const__6;
  
  public static final AFn const__13;
  
  public static final Var const__14;
  
  public static final AFn const__16;
  
  public static final Var const__17;
  
  public static final AFn const__19;
  
  public static final Var const__20;
  
  public static final AFn const__22;
  
  public static final Var const__23;
  
  public static final AFn const__25;
  
  public static final Var const__26;
  
  public static final Keyword const__27;
  
  public static final Keyword const__28;
  
  public static final Keyword const__29;
  
  public static final Var const__30;
  
  public static final AFn const__32;
  
  public static final Var const__33;
  
  public static final Var const__34;
  
  public static final AFn const__36;
  
  public static final Var const__37;
  
  public static final AFn const__39;
  
  public static final Var const__40;
  
  public static final AFn const__42;
  
  public static final Var const__43;
  
  public static final AFn const__47;
  
  public static final Var const__48;
  
  public static final AFn const__52;
  
  public static final Var const__53;
  
  public static final AFn const__56;
  
  public static final Var const__57;
  
  public static final AFn const__60;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new xml.fn__9265());
    const__6.setDynamic(true).setMeta((IPersistentMap)const__13);
    const__14.setDynamic(true).setMeta((IPersistentMap)const__16);
    const__17.setDynamic(true).setMeta((IPersistentMap)const__19);
    const__20.setDynamic(true).setMeta((IPersistentMap)const__22);
    const__23.setMeta((IPersistentMap)const__25);
    const__23









      
      .bindRoot(((IFn)const__26.getRawRoot()).invoke(const__27, const__28, const__29));
    const__30.setMeta((IPersistentMap)const__32);
    const__30
      
      .bindRoot(((IFn)const__33.getRawRoot()).invoke(const__23.getRawRoot(), const__27));
    const__34.setMeta((IPersistentMap)const__36);
    const__34
      .bindRoot(((IFn)const__33.getRawRoot()).invoke(const__23.getRawRoot(), const__28));
    const__37.setMeta((IPersistentMap)const__39);
    const__37
      .bindRoot(((IFn)const__33.getRawRoot()).invoke(const__23.getRawRoot(), const__29));
    const__40.setMeta((IPersistentMap)const__42);
    const__40

      
      .bindRoot(((IFn)new xml.fn__9268()).invoke());
    const__43.setMeta((IPersistentMap)const__47);
    const__43.bindRoot(new xml.startparse_sax());
    const__48.setMeta((IPersistentMap)const__52);
    const__48.bindRoot(new xml.parse());
    const__53.setMeta((IPersistentMap)const__56);
    const__53.bindRoot(new xml.emit_element());
    const__57.setMeta((IPersistentMap)const__60);
    const__57.bindRoot(new xml.emit());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "clojure.xml")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "XML reading/writing.", RT.keyword(null, "author"), "Rich Hickey" }));
    const__4 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "XML reading/writing.", RT.keyword(null, "author"), "Rich Hickey" });
    const__5 = (AFn)Symbol.intern(null, "clojure.core");
    const__6 = (Var)RT.var("clojure.xml", "*stack*");
    const__13 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(15), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/xml.clj" });
    const__14 = (Var)RT.var("clojure.xml", "*current*");
    const__16 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(16), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/xml.clj" });
    const__17 = (Var)RT.var("clojure.xml", "*state*");
    const__19 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(17), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/xml.clj" });
    const__20 = (Var)RT.var("clojure.xml", "*sb*");
    const__22 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(18), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/xml.clj" });
    const__23 = (Var)RT.var("clojure.xml", "element");
    const__25 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(20), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/xml.clj" });
    const__26 = (Var)RT.var("clojure.core", "create-struct");
    const__27 = (Keyword)RT.keyword(null, "tag");
    const__28 = (Keyword)RT.keyword(null, "attrs");
    const__29 = (Keyword)RT.keyword(null, "content");
    const__30 = (Var)RT.var("clojure.xml", "tag");
    const__32 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(22), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/xml.clj" });
    const__33 = (Var)RT.var("clojure.core", "accessor");
    const__34 = (Var)RT.var("clojure.xml", "attrs");
    const__36 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(23), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/xml.clj" });
    const__37 = (Var)RT.var("clojure.xml", "content");
    const__39 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(24), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/xml.clj" });
    const__40 = (Var)RT.var("clojure.xml", "content-handler");
    const__42 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(26), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/xml.clj" });
    const__43 = (Var)RT.var("clojure.xml", "startparse-sax");
    const__47 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s"), Symbol.intern(null, "ch")) })), RT.keyword(null, "line"), Integer.valueOf(75), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/xml.clj" });
    const__48 = (Var)RT.var("clojure.xml", "parse");
    const__52 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")), Tuple.create(Symbol.intern(null, "s"), Symbol.intern(null, "startparse")) })), RT.keyword(null, "doc"), "Parses and loads the source s, which can be a File, InputStream or\n  String naming a URI. Returns a tree of the xml/element struct-map,\n  which has the keys :tag, :attrs, and :content. and accessor fns tag,\n  attrs, and content. Other parsers can be supplied by passing\n  startparse, a fn taking a source and a ContentHandler and returning\n  a parser", RT.keyword(null, "added"), "1.0", RT.keyword(null, "line"), Integer.valueOf(78), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/xml.clj" });
    const__53 = (Var)RT.var("clojure.xml", "emit-element");
    const__56 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "e")) })), RT.keyword(null, "line"), Integer.valueOf(95), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/xml.clj" });
    const__57 = (Var)RT.var("clojure.xml", "emit");
    const__60 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(111), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/xml.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("clojure.xml__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
