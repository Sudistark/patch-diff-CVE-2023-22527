package clojure;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class stacktrace__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__4;
  
  public static final AFn const__5;
  
  public static final Var const__6;
  
  public static final AFn const__15;
  
  public static final Var const__16;
  
  public static final AFn const__19;
  
  public static final Var const__20;
  
  public static final AFn const__23;
  
  public static final Var const__24;
  
  public static final AFn const__27;
  
  public static final Var const__28;
  
  public static final AFn const__31;
  
  public static final Var const__32;
  
  public static final AFn const__35;
  
  public static void load() { LockingTransaction.runInTransaction((Callable)new stacktrace.fn__9594());
    const__6.setMeta((IPersistentMap)const__15);
    const__6.bindRoot(new stacktrace.root_cause());
    const__16.setMeta((IPersistentMap)const__19);
    const__16.bindRoot(new stacktrace.print_trace_element());
    const__20.setMeta((IPersistentMap)const__23);
    const__20.bindRoot(new stacktrace.print_throwable());
    const__24.setMeta((IPersistentMap)const__27);
    const__24.bindRoot(new stacktrace.print_stack_trace());
    const__28.setMeta((IPersistentMap)const__31);
    const__28.bindRoot(new stacktrace.print_cause_trace());
    const__32.setMeta((IPersistentMap)const__35);
    const__32.bindRoot(new stacktrace.e()); }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "clojure.stacktrace")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Print stack traces oriented towards Clojure, not Java.", RT.keyword(null, "author"), "Stuart Sierra" }));
    const__4 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Print stack traces oriented towards Clojure, not Java.", RT.keyword(null, "author"), "Stuart Sierra" });
    const__5 = (AFn)Symbol.intern(null, "clojure.core");
    const__6 = (Var)RT.var("clojure.stacktrace", "root-cause");
    const__15 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "tr")) })), RT.keyword(null, "doc"), "Returns the last 'cause' Throwable in a chain of Throwables.", RT.keyword(null, "added"), "1.1", RT.keyword(null, "line"), Integer.valueOf(18), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/stacktrace.clj" });
    const__16 = (Var)RT.var("clojure.stacktrace", "print-trace-element");
    const__19 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "e")) })), RT.keyword(null, "doc"), "Prints a Clojure-oriented view of one element in a stack trace.", RT.keyword(null, "added"), "1.1", RT.keyword(null, "line"), Integer.valueOf(26), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/stacktrace.clj" });
    const__20 = (Var)RT.var("clojure.stacktrace", "print-throwable");
    const__23 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "tr")) })), RT.keyword(null, "doc"), "Prints the class and message of a Throwable. Prints the ex-data map\n  if present.", RT.keyword(null, "added"), "1.1", RT.keyword(null, "line"), Integer.valueOf(38), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/stacktrace.clj" });
    const__24 = (Var)RT.var("clojure.stacktrace", "print-stack-trace");
    const__27 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "tr")), Tuple.create(((IObj)Symbol.intern(null, "tr")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Throwable") })), Symbol.intern(null, "n")) })), RT.keyword(null, "doc"), "Prints a Clojure-oriented stack trace of tr, a Throwable.\n  Prints a maximum of n stack frames (default: unlimited).\n  Does not print chained exceptions (causes).", RT.keyword(null, "added"), "1.1", RT.keyword(null, "line"), Integer.valueOf(48), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/stacktrace.clj" });
    const__28 = (Var)RT.var("clojure.stacktrace", "print-cause-trace");
    const__31 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "tr")), Tuple.create(Symbol.intern(null, "tr"), Symbol.intern(null, "n")) })), RT.keyword(null, "doc"), "Like print-stack-trace but prints chained exceptions (causes).", RT.keyword(null, "added"), "1.1", RT.keyword(null, "line"), Integer.valueOf(70), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/stacktrace.clj" });
    const__32 = (Var)RT.var("clojure.stacktrace", "e");
    const__35 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "doc"), "REPL utility.  Prints a brief stack trace for the root cause of the\n  most recent exception.", RT.keyword(null, "added"), "1.1", RT.keyword(null, "line"), Integer.valueOf(80), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/stacktrace.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("clojure.stacktrace__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
