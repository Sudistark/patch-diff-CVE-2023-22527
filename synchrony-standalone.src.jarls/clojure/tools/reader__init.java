package clojure.tools;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentArrayMap;
import clojure.lang.PersistentHashSet;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class reader__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__4;
  
  public static final AFn const__5;
  
  public static final Var const__6;
  
  public static final AFn const__14;
  
  public static final Var const__15;
  
  public static final AFn const__16;
  
  public static final Var const__17;
  
  public static final AFn const__18;
  
  public static final Var const__19;
  
  public static final AFn const__21;
  
  public static final Var const__22;
  
  public static final AFn const__23;
  
  public static final Var const__24;
  
  public static final AFn const__25;
  
  public static final Var const__26;
  
  public static final AFn const__27;
  
  public static final Var const__28;
  
  public static final AFn const__29;
  
  public static final Var const__30;
  
  public static final AFn const__34;
  
  public static final Var const__35;
  
  public static final AFn const__38;
  
  public static final Var const__39;
  
  public static final AFn const__44;
  
  public static final Var const__45;
  
  public static final AFn const__47;
  
  public static final Var const__48;
  
  public static final AFn const__51;
  
  public static final Var const__52;
  
  public static final AFn const__55;
  
  public static final Var const__56;
  
  public static final AFn const__59;
  
  public static final Var const__60;
  
  public static final AFn const__63;
  
  public static final Var const__64;
  
  public static final AFn const__67;
  
  public static final Object const__69;
  
  public static final Var const__70;
  
  public static final AFn const__72;
  
  public static final Object const__73;
  
  public static final Var const__74;
  
  public static final AFn const__77;
  
  public static final Var const__78;
  
  public static final AFn const__81;
  
  public static final Var const__82;
  
  public static final AFn const__85;
  
  public static final Var const__86;
  
  public static final AFn const__88;
  
  public static final Var const__89;
  
  public static final AFn const__93;
  
  public static final Var const__94;
  
  public static final AFn const__97;
  
  public static final Var const__98;
  
  public static final AFn const__101;
  
  public static final Var const__102;
  
  public static final AFn const__105;
  
  public static final Var const__106;
  
  public static final AFn const__109;
  
  public static final Var const__110;
  
  public static final AFn const__113;
  
  public static final Var const__114;
  
  public static final AFn const__117;
  
  public static final Var const__118;
  
  public static final AFn const__121;
  
  public static final Var const__122;
  
  public static final AFn const__124;
  
  public static final Var const__125;
  
  public static final AFn const__128;
  
  public static final Var const__129;
  
  public static final AFn const__132;
  
  public static final Var const__133;
  
  public static final AFn const__136;
  
  public static final Var const__137;
  
  public static final AFn const__140;
  
  public static final Var const__141;
  
  public static final AFn const__144;
  
  public static final Var const__145;
  
  public static final AFn const__148;
  
  public static final Var const__149;
  
  public static final AFn const__151;
  
  public static final AFn const__154;
  
  public static final Var const__155;
  
  public static final AFn const__158;
  
  public static final Var const__159;
  
  public static final AFn const__162;
  
  public static final Var const__163;
  
  public static final AFn const__166;
  
  public static final Var const__167;
  
  public static final AFn const__170;
  
  public static final Var const__171;
  
  public static final AFn const__174;
  
  public static final Var const__175;
  
  public static final AFn const__177;
  
  public static final Var const__178;
  
  public static final AFn const__181;
  
  public static final Var const__182;
  
  public static final AFn const__185;
  
  public static final Var const__186;
  
  public static final AFn const__189;
  
  public static final Var const__190;
  
  public static final AFn const__192;
  
  public static final Var const__193;
  
  public static final AFn const__196;
  
  public static final Var const__197;
  
  public static final AFn const__200;
  
  public static final Var const__201;
  
  public static final AFn const__204;
  
  public static final AFn const__206;
  
  public static final Var const__207;
  
  public static final AFn const__210;
  
  public static final Var const__211;
  
  public static final AFn const__214;
  
  public static final Var const__215;
  
  public static final AFn const__217;
  
  public static final Var const__218;
  
  public static final AFn const__221;
  
  public static final Var const__222;
  
  public static final AFn const__224;
  
  public static final Var const__225;
  
  public static final AFn const__228;
  
  public static final Var const__229;
  
  public static final AFn const__232;
  
  public static final Var const__233;
  
  public static final AFn const__236;
  
  public static final Var const__237;
  
  public static final AFn const__240;
  
  public static final Var const__241;
  
  public static final AFn const__244;
  
  public static final Var const__245;
  
  public static final AFn const__248;
  
  public static final Var const__249;
  
  public static final AFn const__252;
  
  public static final Var const__253;
  
  public static final AFn const__256;
  
  public static final Var const__257;
  
  public static final AFn const__260;
  
  public static final AFn const__263;
  
  public static final Var const__264;
  
  public static final AFn const__267;
  
  public static final Var const__268;
  
  public static final AFn const__271;
  
  public static final AFn const__274;
  
  public static final AFn const__277;
  
  public static final Var const__278;
  
  public static final AFn const__281;
  
  public static final AFn const__284;
  
  public static final AFn const__286;
  
  public static final AFn const__288;
  
  public static final AFn const__290;
  
  public static final AFn const__292;
  
  public static final AFn const__294;
  
  public static final AFn const__295;
  
  public static final Var const__296;
  
  public static final AFn const__297;
  
  public static final Var const__298;
  
  public static final AFn const__301;
  
  public static final Var const__302;
  
  public static final AFn const__305;
  
  public static final Var const__306;
  
  public static final AFn const__309;
  
  public static final Var const__310;
  
  public static final AFn const__313;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new reader.fn__3557());
    const__6.setMeta((IPersistentMap)const__14);
    const__15.setMeta((IPersistentMap)const__16);
    const__17.setMeta((IPersistentMap)const__18);
    const__19.setDynamic(true).setMeta((IPersistentMap)const__21);
    const__22.setDynamic(true).setMeta((IPersistentMap)const__23);
    const__24.setDynamic(true).setMeta((IPersistentMap)const__25);
    const__26.setDynamic(true).setMeta((IPersistentMap)const__27);
    const__28.setMeta((IPersistentMap)const__29);
    const__30.setMeta((IPersistentMap)const__34);
    const__30.bindRoot(new reader.ns_name_STAR_());
    const__35.setMeta((IPersistentMap)const__38);
    const__35.bindRoot(new reader.macro_terminating_QMARK_());
    const__39.setMeta((IPersistentMap)const__44);
    const__39.bindRoot(new reader.read_token());
    const__45.setMeta((IPersistentMap)const__47);
    const__48.setMeta((IPersistentMap)const__51);
    const__48.bindRoot(new reader.read_dispatch());
    const__52.setMeta((IPersistentMap)const__55);
    const__52.bindRoot(new reader.read_unmatched_delimiter());
    const__56.setMeta((IPersistentMap)const__59);
    const__56.bindRoot(new reader.read_regex());
    const__60.setMeta((IPersistentMap)const__63);
    const__60.bindRoot(new reader.read_unicode_char());
    const__64.setMeta((IPersistentMap)const__67);
    const__64



























































































































      
      .bindRoot(Integer.valueOf(RT.intCast(const__69)));
    const__70.setMeta((IPersistentMap)const__72);
    const__70
      .bindRoot(Integer.valueOf(RT.intCast(const__73)));
    const__74.setMeta((IPersistentMap)const__77);
    const__74.bindRoot(new reader.read_char_STAR_());
    const__78.setMeta((IPersistentMap)const__81);
    const__78.bindRoot(new reader.starting_line_col_info());
    const__82.setMeta((IPersistentMap)const__85);
    const__82.bindRoot(new reader.ending_line_col_info());
    const__86.setDynamic(true).setMeta((IPersistentMap)const__88);
    const__86.setDynamic(true).bindRoot(Boolean.FALSE);
    const__89.setMeta((IPersistentMap)const__93);
    const__89.bindRoot(new reader.read_delimited());
    const__94.setMeta((IPersistentMap)const__97);
    const__94.bindRoot(new reader.read_list());
    const__98.setMeta((IPersistentMap)const__101);
    const__98.bindRoot(new reader.read_vector());
    const__102.setMeta((IPersistentMap)const__105);
    const__102.bindRoot(new reader.read_map());
    const__106.setMeta((IPersistentMap)const__109);
    const__106.bindRoot(new reader.read_number());
    const__110.setMeta((IPersistentMap)const__113);
    const__110.bindRoot(new reader.escape_char());
    const__114.setMeta((IPersistentMap)const__117);
    const__114.bindRoot(new reader.read_string_STAR_());
    const__118.setMeta((IPersistentMap)const__121);
    const__118.bindRoot(new reader.read_symbol());
    const__122.setDynamic(true).setMeta((IPersistentMap)const__124);
    const__122.setDynamic(true).bindRoot(null);
    const__125.setMeta((IPersistentMap)const__128);
    const__125.bindRoot(new reader.resolve_ns());
    const__129.setMeta((IPersistentMap)const__132);
    const__129.bindRoot(new reader.read_keyword());
    const__133.setMeta((IPersistentMap)const__136);
    const__133.bindRoot(new reader.wrapping_reader());
    const__137.setMeta((IPersistentMap)const__140);
    const__137.bindRoot(new reader.read_meta());
    const__141.setMeta((IPersistentMap)const__144);
    const__141.bindRoot(new reader.read_set());
    const__145.setMeta((IPersistentMap)const__148);
    const__145.bindRoot(new reader.read_discard());
    const__149.setMeta((IPersistentMap)const__151);
    const__149.bindRoot(const__154);
    const__155.setMeta((IPersistentMap)const__158);
    const__155.bindRoot(new reader.has_feature_QMARK_());
    const__159.setMeta((IPersistentMap)const__162);
    const__159.bindRoot(new reader.check_eof_error());
    const__163.setMeta((IPersistentMap)const__166);
    const__163.bindRoot(new reader.check_reserved_features());
    const__167.setMeta((IPersistentMap)const__170);
    const__167.bindRoot(new reader.check_invalid_read_cond());
    const__171.setMeta((IPersistentMap)const__174);
    const__171.bindRoot(new reader.read_suppress());
    const__175.setMeta((IPersistentMap)const__177);
    const__175.bindRoot(new Object());
    const__178.setMeta((IPersistentMap)const__181);
    const__178.bindRoot(new reader.match_feature());
    const__182.setMeta((IPersistentMap)const__185);
    const__182.bindRoot(new reader.read_cond_delimited());
    const__186.setMeta((IPersistentMap)const__189);
    const__186.bindRoot(new reader.read_cond());
    const__190.setDynamic(true).setMeta((IPersistentMap)const__192);
    const__193.setMeta((IPersistentMap)const__196);
    const__193.bindRoot(new reader.garg());
    const__197.setMeta((IPersistentMap)const__200);
    const__197.bindRoot(new reader.read_fn());
    const__201.setMeta((IPersistentMap)const__204);
    const__201.bindRoot(new reader.register_arg());
    const__118.setMeta((IPersistentMap)const__206);
    const__207.setMeta((IPersistentMap)const__210);
    const__207.bindRoot(new reader.read_arg());
    const__211.setMeta((IPersistentMap)const__214);
    const__211.bindRoot(new reader.read_eval());
    const__215.setDynamic(true).setMeta((IPersistentMap)const__217);
    const__215.setDynamic(true).bindRoot(null);
    const__218.setMeta((IPersistentMap)const__221);
    const__218.bindRoot(new reader.read_unquote());
    const__222.setMeta((IPersistentMap)const__224);
    const__225.setMeta((IPersistentMap)const__228);
    const__225.bindRoot(new reader.unquote_splicing_QMARK_());
    const__229.setMeta((IPersistentMap)const__232);
    const__229.bindRoot(new reader.unquote_QMARK_());
    const__233.setMeta((IPersistentMap)const__236);
    const__233.bindRoot(new reader.expand_list());
    const__237.setMeta((IPersistentMap)const__240);
    const__237.bindRoot(new reader.flatten_map());
    const__241.setMeta((IPersistentMap)const__244);
    const__241.bindRoot(new reader.register_gensym());
    const__245.setDynamic(true).setMeta((IPersistentMap)const__248);
    const__245.setDynamic(true).bindRoot(new reader.resolve_symbol());
    const__249.setMeta((IPersistentMap)const__252);
    const__249.bindRoot(new reader.add_meta());
    const__253.setMeta((IPersistentMap)const__256);
    const__253.bindRoot(new reader.syntax_quote_coll());
    const__257.setMeta((IPersistentMap)const__260);
    const__257.bindRoot(new reader.map_func());
    const__222.setMeta((IPersistentMap)const__263);
    const__222.bindRoot(new reader.syntax_quote_STAR_());
    const__264.setMeta((IPersistentMap)const__267);
    const__264.bindRoot(new reader.read_syntax_quote());
    const__268.setMeta((IPersistentMap)const__271);
    const__268.bindRoot(new reader.read_namespaced_map());
    const__15.setMeta((IPersistentMap)const__274);
    const__15.bindRoot(new reader.macros());
    const__17.setMeta((IPersistentMap)const__277);
    const__17.bindRoot(new reader.dispatch_macros());
    const__278.setMeta((IPersistentMap)const__281);
    const__278.bindRoot(new reader.read_ctor());
    const__45.setMeta((IPersistentMap)const__284);
    const__45.bindRoot(new reader.read_tagged());
    const__19.setDynamic(true).setMeta((IPersistentMap)const__286);
    const__19.setDynamic(true).bindRoot(Boolean.TRUE);
    const__22.setDynamic(true).setMeta((IPersistentMap)const__288);
    const__22.setDynamic(true).bindRoot(PersistentArrayMap.EMPTY);
    const__24.setDynamic(true).setMeta((IPersistentMap)const__290);
    const__24.setDynamic(true).bindRoot(null);
    const__26.setDynamic(true).setMeta((IPersistentMap)const__292);
    const__26.setDynamic(true).bindRoot(Boolean.FALSE);
    const__28.setMeta((IPersistentMap)const__294);
    const__28.bindRoot(RT.mapUniqueKeys(new Object[] { const__295, const__296, const__297, const__298 }));
    const__6.setMeta((IPersistentMap)const__301);
    const__6.bindRoot(new reader.read_STAR_());
    const__302.setMeta((IPersistentMap)const__305);
    const__302.bindRoot(new reader.read());
    const__306.setMeta((IPersistentMap)const__309);
    const__306.bindRoot(new reader.read_string());
    const__310.setMeta((IPersistentMap)const__313);
    const__310.bindRoot(new reader.syntax_quote());
    ((Var)const__310)





























































































































































































































































































































































































































































































































































































































































































































































































































      
      .setMacro();
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "clojure.tools.reader")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "A clojure reader in clojure", RT.keyword(null, "author"), "Bronsa" }));
    const__4 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "A clojure reader in clojure", RT.keyword(null, "author"), "Bronsa" });
    const__5 = (AFn)Symbol.intern(null, "clojure.core");
    const__6 = (Var)RT.var("clojure.tools.reader", "read*");
    const__14 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(32), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__15 = (Var)RT.var("clojure.tools.reader", "macros");
    const__16 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(32), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__17 = (Var)RT.var("clojure.tools.reader", "dispatch-macros");
    const__18 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(32), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__19 = (Var)RT.var("clojure.tools.reader", "*read-eval*");
    const__21 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(32), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__22 = (Var)RT.var("clojure.tools.reader", "*data-readers*");
    const__23 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(32), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__24 = (Var)RT.var("clojure.tools.reader", "*default-data-reader-fn*");
    const__25 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(32), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__26 = (Var)RT.var("clojure.tools.reader", "*suppress-read*");
    const__27 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(32), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__28 = (Var)RT.var("clojure.tools.reader", "default-data-readers");
    const__29 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(32), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__30 = (Var)RT.var("clojure.tools.reader", "ns-name*");
    const__34 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(40), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__35 = (Var)RT.var("clojure.tools.reader", "macro-terminating?");
    const__38 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ch")) })), RT.keyword(null, "line"), Integer.valueOf(45), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__39 = (Var)RT.var("clojure.tools.reader", "read-token");
    const__44 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "tag"), RT.classForName("java.lang.String"), RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "rdr"), Symbol.intern(null, "initch")) })), RT.keyword(null, "doc"), "Read in a single logical token from the reader", RT.keyword(null, "line"), Integer.valueOf(50), 
          RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__45 = (Var)RT.var("clojure.tools.reader", "read-tagged");
    const__47 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(64), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__48 = (Var)RT.var("clojure.tools.reader", "read-dispatch");
    const__51 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "rdr"), Symbol.intern(null, "_"), Symbol.intern(null, "opts"), Symbol.intern(null, "pending-forms")) })), RT.keyword(null, "line"), Integer.valueOf(66), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__52 = (Var)RT.var("clojure.tools.reader", "read-unmatched-delimiter");
    const__55 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "rdr"), Symbol.intern(null, "ch"), Symbol.intern(null, "opts"), Symbol.intern(null, "pending-forms")) })), RT.keyword(null, "line"), Integer.valueOf(74), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__56 = (Var)RT.var("clojure.tools.reader", "read-regex");
    const__59 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "rdr"), Symbol.intern(null, "ch"), Symbol.intern(null, "opts"), Symbol.intern(null, "pending-forms")) })), RT.keyword(null, "line"), Integer.valueOf(82), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__60 = (Var)RT.var("clojure.tools.reader", "read-unicode-char");
    const__63 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "token")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") })), ((IObj)Symbol.intern(null, "offset")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "long") })), ((IObj)Symbol.intern(null, "length")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "long") })), ((IObj)Symbol.intern(null, "base")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "long") }))), Tuple.create(Symbol.intern(null, "rdr"), Symbol.intern(null, "initch"), Symbol.intern(null, "base"), Symbol.intern(null, "length"), Symbol.intern(null, "exact?")) })), RT.keyword(null, "line"), Integer.valueOf(99), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__64 = (Var)RT.var("clojure.tools.reader", "upper-limit");
    const__67 = (AFn)RT.map(new Object[] { RT.keyword(null, "const"), Boolean.TRUE, RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(134), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__69 = Character.valueOf('퟿');
    const__70 = (Var)RT.var("clojure.tools.reader", "lower-limit");
    const__72 = (AFn)RT.map(new Object[] { RT.keyword(null, "const"), Boolean.TRUE, RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(135), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__73 = Character.valueOf('');
    const__74 = (Var)RT.var("clojure.tools.reader", "read-char*");
    const__77 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "rdr"), Symbol.intern(null, "backslash"), Symbol.intern(null, "opts"), Symbol.intern(null, "pending-forms")) })), RT.keyword(null, "doc"), "Read in a character literal", RT.keyword(null, "line"), Integer.valueOf(137), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__78 = (Var)RT.var("clojure.tools.reader", "starting-line-col-info");
    const__81 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "rdr")) })), RT.keyword(null, "line"), Integer.valueOf(178), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__82 = (Var)RT.var("clojure.tools.reader", "ending-line-col-info");
    const__85 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "rdr")) })), RT.keyword(null, "line"), Integer.valueOf(182), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__86 = (Var)RT.var("clojure.tools.reader", "*read-delim*");
    const__88 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(189), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__89 = (Var)RT.var("clojure.tools.reader", "read-delimited");
    const__93 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "tag"), RT.classForName("clojure.lang.PersistentVector"), RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "delim"), Symbol.intern(null, "rdr"), Symbol.intern(null, "opts"), Symbol.intern(null, "pending-forms")) })), RT.keyword(null, "doc"), "Reads and returns a collection ended with delim", RT.keyword(null, "line"), Integer.valueOf(190), 
          RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__94 = (Var)RT.var("clojure.tools.reader", "read-list");
    const__97 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "rdr"), Symbol.intern(null, "_"), Symbol.intern(null, "opts"), Symbol.intern(null, "pending-forms")) })), RT.keyword(null, "doc"), "Read in a list, including its location if the reader is an indexing reader", RT.keyword(null, "line"), Integer.valueOf(206), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__98 = (Var)RT.var("clojure.tools.reader", "read-vector");
  }
  
  public static void __init1() {
    const__101 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "rdr"), Symbol.intern(null, "_"), Symbol.intern(null, "opts"), Symbol.intern(null, "pending-forms")) })), RT.keyword(null, "doc"), "Read in a vector, including its location if the reader is an indexing reader", RT.keyword(null, "line"), Integer.valueOf(224), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__102 = (Var)RT.var("clojure.tools.reader", "read-map");
    const__105 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "rdr"), Symbol.intern(null, "_"), Symbol.intern(null, "opts"), Symbol.intern(null, "pending-forms")) })), RT.keyword(null, "doc"), "Read in a map, including its location if the reader is an indexing reader", RT.keyword(null, "line"), Integer.valueOf(240), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__106 = (Var)RT.var("clojure.tools.reader", "read-number");
    const__109 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "rdr"), Symbol.intern(null, "initch")) })), RT.keyword(null, "line"), Integer.valueOf(262), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__110 = (Var)RT.var("clojure.tools.reader", "escape-char");
    const__113 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "sb"), Symbol.intern(null, "rdr")) })), RT.keyword(null, "line"), Integer.valueOf(273), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__114 = (Var)RT.var("clojure.tools.reader", "read-string*");
    const__117 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "reader"), Symbol.intern(null, "_"), Symbol.intern(null, "opts"), Symbol.intern(null, "pending-forms")) })), RT.keyword(null, "line"), Integer.valueOf(294), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__118 = (Var)RT.var("clojure.tools.reader", "read-symbol");
    const__121 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "rdr"), Symbol.intern(null, "initch")) })), RT.keyword(null, "line"), Integer.valueOf(305), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__122 = (Var)RT.var("clojure.tools.reader", "*alias-map*");
    const__124 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(333), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj", RT.keyword(null, "doc"), "Map from ns alias to ns, if non-nil, it will be used to resolve read-time\n   ns aliases instead of (ns-aliases *ns*).\n\n   Defaults to nil" });
    const__125 = (Var)RT.var("clojure.tools.reader", "resolve-ns");
    const__128 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "sym")) })), RT.keyword(null, "line"), Integer.valueOf(340), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__129 = (Var)RT.var("clojure.tools.reader", "read-keyword");
    const__132 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "reader"), Symbol.intern(null, "initch"), Symbol.intern(null, "opts"), Symbol.intern(null, "pending-forms")) })), RT.keyword(null, "line"), Integer.valueOf(345), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__133 = (Var)RT.var("clojure.tools.reader", "wrapping-reader");
    const__136 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "sym")) })), RT.keyword(null, "doc"), "Returns a function which wraps a reader in a call to sym", RT.keyword(null, "line"), Integer.valueOf(365), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__137 = (Var)RT.var("clojure.tools.reader", "read-meta");
    const__140 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "rdr"), Symbol.intern(null, "_"), Symbol.intern(null, "opts"), Symbol.intern(null, "pending-forms")) })), RT.keyword(null, "doc"), "Read metadata and return the following object with the metadata applied", RT.keyword(null, "line"), Integer.valueOf(371), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__141 = (Var)RT.var("clojure.tools.reader", "read-set");
    const__144 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "rdr"), Symbol.intern(null, "_"), Symbol.intern(null, "opts"), Symbol.intern(null, "pending-forms")) })), RT.keyword(null, "line"), Integer.valueOf(389), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__145 = (Var)RT.var("clojure.tools.reader", "read-discard");
    const__148 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "rdr"), Symbol.intern(null, "_"), Symbol.intern(null, "opts"), Symbol.intern(null, "pending-forms")) })), RT.keyword(null, "doc"), "Read and discard the first object from rdr", RT.keyword(null, "line"), Integer.valueOf(406), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__149 = (Var)RT.var("clojure.tools.reader", "RESERVED_FEATURES");
    const__151 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(412), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__154 = (AFn)PersistentHashSet.create(new Object[] { RT.keyword(null, "else"), RT.keyword(null, "none") });
    const__155 = (Var)RT.var("clojure.tools.reader", "has-feature?");
    const__158 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "rdr"), Symbol.intern(null, "feature"), Symbol.intern(null, "opts")) })), RT.keyword(null, "line"), Integer.valueOf(414), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__159 = (Var)RT.var("clojure.tools.reader", "check-eof-error");
    const__162 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "form"), Symbol.intern(null, "rdr"), ((IObj)Symbol.intern(null, "first-line")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "long") }))) })), RT.keyword(null, "line"), Integer.valueOf(420), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__163 = (Var)RT.var("clojure.tools.reader", "check-reserved-features");
    const__166 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "rdr"), Symbol.intern(null, "form")) })), RT.keyword(null, "line"), Integer.valueOf(427), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__167 = (Var)RT.var("clojure.tools.reader", "check-invalid-read-cond");
    const__170 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "form"), Symbol.intern(null, "rdr"), ((IObj)Symbol.intern(null, "first-line")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "long") }))) })), RT.keyword(null, "line"), Integer.valueOf(432), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__171 = (Var)RT.var("clojure.tools.reader", "read-suppress");
    const__174 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "first-line"), Symbol.intern(null, "rdr"), Symbol.intern(null, "opts"), Symbol.intern(null, "pending-forms")) })), RT.keyword(null, "doc"), "Read next form and suppress. Return nil or READ_FINISHED.", RT.keyword(null, "line"), Integer.valueOf(439), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__175 = (Var)RT.var("clojure.tools.reader", "NO_MATCH");
    const__177 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(448), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__178 = (Var)RT.var("clojure.tools.reader", "match-feature");
    const__181 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "first-line"), Symbol.intern(null, "rdr"), Symbol.intern(null, "opts"), Symbol.intern(null, "pending-forms")) })), RT.keyword(null, "doc"), "Read next feature. If matched, read next form and return.\n   Otherwise, read and skip next form, returning READ_FINISHED or nil.", RT.keyword(null, "line"), Integer.valueOf(450), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__182 = (Var)RT.var("clojure.tools.reader", "read-cond-delimited");
    const__185 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "rdr"), Symbol.intern(null, "splicing"), Symbol.intern(null, "opts"), Symbol.intern(null, "pending-forms")) })), RT.keyword(null, "line"), Integer.valueOf(469), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__186 = (Var)RT.var("clojure.tools.reader", "read-cond");
    const__189 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "rdr"), Symbol.intern(null, "_"), Symbol.intern(null, "opts"), Symbol.intern(null, "pending-forms")) })), RT.keyword(null, "line"), Integer.valueOf(498), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__190 = (Var)RT.var("clojure.tools.reader", "arg-env");
    const__192 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(518), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__193 = (Var)RT.var("clojure.tools.reader", "garg");
    const__196 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "n")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "long") }))) })), RT.keyword(null, "doc"), "Get a symbol for an anonymous ?argument?", RT.keyword(null, "line"), Integer.valueOf(520), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__197 = (Var)RT.var("clojure.tools.reader", "read-fn");
  }
  
  public static void __init2() {
    const__200 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "rdr"), Symbol.intern(null, "_"), Symbol.intern(null, "opts"), Symbol.intern(null, "pending-forms")) })), RT.keyword(null, "line"), Integer.valueOf(526), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__201 = (Var)RT.var("clojure.tools.reader", "register-arg");
    const__204 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "n")) })), RT.keyword(null, "doc"), "Registers an argument to the arg-env", RT.keyword(null, "line"), Integer.valueOf(547), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__206 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(558), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__207 = (Var)RT.var("clojure.tools.reader", "read-arg");
    const__210 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "rdr"), Symbol.intern(null, "pct"), Symbol.intern(null, "opts"), Symbol.intern(null, "pending-forms")) })), RT.keyword(null, "line"), Integer.valueOf(560), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__211 = (Var)RT.var("clojure.tools.reader", "read-eval");
    const__214 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "rdr"), Symbol.intern(null, "_"), Symbol.intern(null, "opts"), Symbol.intern(null, "pending-forms")) })), RT.keyword(null, "doc"), "Evaluate a reader literal", RT.keyword(null, "line"), Integer.valueOf(581), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__215 = (Var)RT.var("clojure.tools.reader", "gensym-env");
    const__217 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(588), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__218 = (Var)RT.var("clojure.tools.reader", "read-unquote");
    const__221 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "rdr"), Symbol.intern(null, "comma"), Symbol.intern(null, "opts"), Symbol.intern(null, "pending-forms")) })), RT.keyword(null, "line"), Integer.valueOf(590), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__222 = (Var)RT.var("clojure.tools.reader", "syntax-quote*");
    const__224 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(597), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__225 = (Var)RT.var("clojure.tools.reader", "unquote-splicing?");
    const__228 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "form")) })), RT.keyword(null, "line"), Integer.valueOf(598), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__229 = (Var)RT.var("clojure.tools.reader", "unquote?");
    const__232 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "form")) })), RT.keyword(null, "line"), Integer.valueOf(602), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__233 = (Var)RT.var("clojure.tools.reader", "expand-list");
    const__236 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })), RT.keyword(null, "doc"), "Expand a list by resolving its syntax quotes and unquotes", RT.keyword(null, "line"), Integer.valueOf(606), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__237 = (Var)RT.var("clojure.tools.reader", "flatten-map");
    const__240 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "form")) })), RT.keyword(null, "doc"), "Flatten a map into a seq of alternate keys and values", RT.keyword(null, "line"), Integer.valueOf(620), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__241 = (Var)RT.var("clojure.tools.reader", "register-gensym");
    const__244 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "sym")) })), RT.keyword(null, "line"), Integer.valueOf(631), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__245 = (Var)RT.var("clojure.tools.reader", "resolve-symbol");
    const__248 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })), RT.keyword(null, "doc"), "Resolve a symbol s into its fully qualified namespace version", RT.keyword(null, "line"), Integer.valueOf(641), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__249 = (Var)RT.var("clojure.tools.reader", "add-meta");
    const__252 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "form"), Symbol.intern(null, "ret")) })), RT.keyword(null, "line"), Integer.valueOf(659), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__253 = (Var)RT.var("clojure.tools.reader", "syntax-quote-coll");
    const__256 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "type"), Symbol.intern(null, "coll")) })), RT.keyword(null, "line"), Integer.valueOf(665), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__257 = (Var)RT.var("clojure.tools.reader", "map-func");
    const__260 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "coll")) })), RT.keyword(null, "doc"), "Decide which map type to use, array-map if less than 16 elements", RT.keyword(null, "line"), Integer.valueOf(676), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__263 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "form")) })), RT.keyword(null, "line"), Integer.valueOf(683), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__264 = (Var)RT.var("clojure.tools.reader", "read-syntax-quote");
    const__267 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "rdr"), Symbol.intern(null, "backquote"), Symbol.intern(null, "opts"), Symbol.intern(null, "pending-forms")) })), RT.keyword(null, "line"), Integer.valueOf(739), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__268 = (Var)RT.var("clojure.tools.reader", "read-namespaced-map");
    const__271 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "rdr"), Symbol.intern(null, "_"), Symbol.intern(null, "opts"), Symbol.intern(null, "pending-forms")) })), RT.keyword(null, "line"), Integer.valueOf(745), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__274 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ch")) })), RT.keyword(null, "line"), Integer.valueOf(769), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__277 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ch")) })), RT.keyword(null, "line"), Integer.valueOf(790), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__278 = (Var)RT.var("clojure.tools.reader", "read-ctor");
    const__281 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "rdr"), Symbol.intern(null, "class-name"), Symbol.intern(null, "opts"), Symbol.intern(null, "pending-forms")) })), RT.keyword(null, "line"), Integer.valueOf(805), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__284 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "rdr"), Symbol.intern(null, "initch"), Symbol.intern(null, "opts"), Symbol.intern(null, "pending-forms")) })), RT.keyword(null, "line"), Integer.valueOf(838), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__286 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(857), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj", RT.keyword(null, "doc"), "Defaults to true.\n\n   ***WARNING***\n   This setting implies that the full power of the reader is in play,\n   including syntax that can cause code to execute. It should never be\n   used with untrusted sources. See also: clojure.tools.reader.edn/read.\n\n   When set to logical false in the thread-local binding,\n   the eval reader (#=) and *record/type literal syntax* are disabled in read/load.\n   Example (will fail): (binding [*read-eval* false] (read-string \"#=(* 2 21)\"))\n\n   When set to :unknown all reads will fail in contexts where *read-eval*\n   has not been explicitly bound to either true or false. This setting\n   can be a useful diagnostic tool to ensure that all of your reads\n   occur in considered contexts." });
    const__288 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(875), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj", RT.keyword(null, "doc"), "Map from reader tag symbols to data reader Vars.\n   Reader tags without namespace qualifiers are reserved for Clojure.\n   Default reader tags are defined in clojure.tools.reader/default-data-readers\n   and may be overridden by binding this Var." });
    const__290 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(882), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj", RT.keyword(null, "doc"), "When no data reader is found for a tag and *default-data-reader-fn*\n   is non-nil, it will be called with two arguments, the tag and the value.\n   If *default-data-reader-fn* is nil (the default value), an exception\n   will be thrown for the unknown tag." });
    const__292 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(889), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__294 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(891), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj", RT.keyword(null, "doc"), "Default map of data reader functions provided by Clojure.\n   May be overridden by binding *data-readers*" });
    const__295 = (AFn)Symbol.intern(null, "inst");
    const__296 = (Var)RT.var("clojure.tools.reader.default-data-readers", "read-instant-date");
    const__297 = (AFn)Symbol.intern(null, "uuid");
    const__298 = (Var)RT.var("clojure.tools.reader.default-data-readers", "default-uuid-reader");
  }
  
  public static void __init3() {
    const__301 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "reader"), Symbol.intern(null, "eof-error?"), Symbol.intern(null, "sentinel"), Symbol.intern(null, "opts"), Symbol.intern(null, "pending-forms")), Tuple.create(Symbol.intern(null, "reader"), Symbol.intern(null, "eof-error?"), Symbol.intern(null, "sentinel"), Symbol.intern(null, "return-on"), Symbol.intern(null, "opts"), Symbol.intern(null, "pending-forms")) })), RT.keyword(null, "line"), Integer.valueOf(897), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__302 = (Var)RT.var("clojure.tools.reader", "read");
    const__305 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Tuple.create(), Tuple.create(Symbol.intern(null, "reader")), Tuple.create(Symbol.intern(null, "opts"), Symbol.intern(null, "reader")), Tuple.create(Symbol.intern(null, "reader"), Symbol.intern(null, "eof-error?"), Symbol.intern(null, "eof-value")) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(962), RT.keyword(null, "column"), Integer.valueOf(15) })), RT.keyword(null, "doc"), "Reads the first object from an IPushbackReader or a java.io.PushbackReader.\n   Returns the object read. If EOF, throws if eof-error? is true.\n   Otherwise returns sentinel. If no stream is providen, *in* will be used.\n\n   Opts is a persistent map with valid keys:\n    :read-cond - :allow to process reader conditionals, or\n                 :preserve to keep all branches\n    :features - persistent set of feature keywords for reader conditionals\n    :eof - on eof, return value unless :eofthrow, then throw.\n           if not specified, will throw\n\n   ***WARNING***\n   Note that read can execute code (controlled by *read-eval*),\n   and as such should be used only with trusted sources.\n\n   To read data structures only, use clojure.tools.reader.edn/read\n\n   Note that the function signature of clojure.tools.reader/read and\n   clojure.tools.reader.edn/read is not the same for eof-handling", RT.keyword(null, "line"), Integer.valueOf(942), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__306 = (Var)RT.var("clojure.tools.reader", "read-string");
    const__309 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")), Tuple.create(Symbol.intern(null, "opts"), Symbol.intern(null, "s")) })), RT.keyword(null, "doc"), "Reads one object from the string s.\n   Returns nil when s is nil or empty.\n\n   ***WARNING***\n   Note that read-string can execute code (controlled by *read-eval*),\n   and as such should be used only with trusted sources.\n\n   To read data structures only, use clojure.tools.reader.edn/read-string\n\n   Note that the function signature of clojure.tools.reader/read-string and\n   clojure.tools.reader.edn/read-string is not the same for eof-handling", RT.keyword(null, "line"), Integer.valueOf(968), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
    const__310 = (Var)RT.var("clojure.tools.reader", "syntax-quote");
    const__313 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "form")) })), RT.keyword(null, "doc"), "Macro equivalent to the syntax-quote reader macro (`).", RT.keyword(null, "line"), Integer.valueOf(986), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader.clj" });
  }
  
  static  {
    __init0();
    __init1();
    __init2();
    __init3();
    Compiler.pushNSandLoader(RT.classForName("clojure.tools.reader__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
