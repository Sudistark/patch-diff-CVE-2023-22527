package clojure.tools.analyzer.passes;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IPersistentMap;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentHashSet;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class trim__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final Keyword const__4;
  
  public static final Var const__5;
  
  public static final Keyword const__6;
  
  public static final Keyword const__8;
  
  public static final Keyword const__10;
  
  public static final Object const__11;
  
  public static final Keyword const__12;
  
  public static final AFn const__13;
  
  public static final Keyword const__14;
  
  public static final Keyword const__15;
  
  public static final Keyword const__16;
  
  public static final Var const__17;
  
  public static final Object const__18;
  
  public static final Keyword const__19;
  
  public static final Keyword const__20;
  
  public static final Keyword const__21;
  
  public static final Keyword const__22;
  
  public static final Keyword const__23;
  
  public static final Keyword const__24;
  
  public static final Var const__25;
  
  public static final Object const__26;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new trim.fn__2077());
    const__5.setMeta((IPersistentMap)const__13);
    const__5.bindRoot(new trim.preserving_raw_forms());
    const__17.setMeta((IPersistentMap)RT.mapUniqueKeys(new Object[] { 
            const__6, const__18, const__19, "Trims the AST of unnecessary nodes, e.g. (do (do 1)) -> 1", const__20, RT.mapUniqueKeys(new Object[] { const__21, const__22, const__23, PersistentHashSet.EMPTY, const__24, RT.set(new Object[] { const__25 }) }), const__8, const__26, const__10, const__11, 
            const__12, "clojure/tools/analyzer/passes/trim.clj" }));
    const__17.bindRoot(new trim.trim());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "clojure.tools.analyzer.passes.trim");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("clojure.tools.analyzer.passes.trim", "-trim");
    const__4 = (Keyword)RT.keyword(null, "default");
    const__5 = (Var)RT.var("clojure.tools.analyzer.passes.trim", "preserving-raw-forms");
    const__6 = (Keyword)RT.keyword(null, "arglists");
    const__8 = (Keyword)RT.keyword(null, "line");
    const__10 = (Keyword)RT.keyword(null, "column");
    const__11 = Integer.valueOf(1);
    const__12 = (Keyword)RT.keyword(null, "file");
    const__13 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "form"), Symbol.intern(null, "raw-forms")), RT.keyword(null, "as"), Symbol.intern(null, "ast") }), Symbol.intern(null, "body")) })), RT.keyword(null, "line"), Integer.valueOf(17), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/passes/trim.clj" });
    const__14 = (Keyword)RT.keyword(null, "do");
    const__15 = (Keyword)RT.keyword(null, "let");
    const__16 = (Keyword)RT.keyword(null, "try");
    const__17 = (Var)RT.var("clojure.tools.analyzer.passes.trim", "trim");
    const__18 = PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ast")) }));
    const__19 = (Keyword)RT.keyword(null, "doc");
    const__20 = (Keyword)RT.keyword(null, "pass-info");
    const__21 = (Keyword)RT.keyword(null, "walk");
    const__22 = (Keyword)RT.keyword(null, "none");
    const__23 = (Keyword)RT.keyword(null, "depends");
    const__24 = (Keyword)RT.keyword(null, "after");
    const__25 = (Var)RT.var("clojure.tools.analyzer.passes.elide-meta", "elide-meta");
    const__26 = Integer.valueOf(46);
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("clojure.tools.analyzer.passes.trim__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
