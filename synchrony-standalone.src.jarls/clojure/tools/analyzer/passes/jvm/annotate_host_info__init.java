package clojure.tools.analyzer.passes.jvm;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IPersistentMap;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentHashSet;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class annotate_host_info__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final Keyword const__4;
  
  public static final Object const__5;
  
  public static final Keyword const__6;
  
  public static final Keyword const__7;
  
  public static final Keyword const__8;
  
  public static final Keyword const__9;
  
  public static final Keyword const__10;
  
  public static final Keyword const__11;
  
  public static final Var const__12;
  
  public static final Keyword const__13;
  
  public static final Object const__14;
  
  public static final Keyword const__15;
  
  public static final Object const__16;
  
  public static final Keyword const__17;
  
  public static void load() { LockingTransaction.runInTransaction((Callable)new annotate_host_info.fn__2260());
    const__3.setMeta((IPersistentMap)RT.mapUniqueKeys(new Object[] { 
            const__4, const__5, const__6, "Adds a :methods key to reify/deftype :methods info representing\n   the reflected informations for the required methods, replaces\n   (catch :default ..) forms with (catch Throwable ..)", const__7, RT.mapUniqueKeys(new Object[] { const__8, const__9, const__10, PersistentHashSet.EMPTY, const__11, RT.set(new Object[] { const__12 }) }), const__13, const__14, const__15, const__16, 
            const__17, "clojure/tools/analyzer/passes/jvm/annotate_host_info.clj" }));
    const__3.bindRoot(new annotate_host_info.annotate_host_info()); }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "clojure.tools.analyzer.passes.jvm.annotate-host-info");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("clojure.tools.analyzer.passes.jvm.annotate-host-info", "annotate-host-info");
    const__4 = (Keyword)RT.keyword(null, "arglists");
    const__5 = PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "op"), Symbol.intern(null, "methods"), Symbol.intern(null, "interfaces"), Symbol.intern(null, "class"), Symbol.intern(null, "env")), RT.keyword(null, "as"), Symbol.intern(null, "ast") })) }));
    const__6 = (Keyword)RT.keyword(null, "doc");
    const__7 = (Keyword)RT.keyword(null, "pass-info");
    const__8 = (Keyword)RT.keyword(null, "walk");
    const__9 = (Keyword)RT.keyword(null, "pre");
    const__10 = (Keyword)RT.keyword(null, "depends");
    const__11 = (Keyword)RT.keyword(null, "after");
    const__12 = (Var)RT.var("clojure.tools.analyzer.passes.elide-meta", "elide-meta");
    const__13 = (Keyword)RT.keyword(null, "line");
    const__14 = Integer.valueOf(20);
    const__15 = (Keyword)RT.keyword(null, "column");
    const__16 = Integer.valueOf(1);
    const__17 = (Keyword)RT.keyword(null, "file");
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("clojure.tools.analyzer.passes.jvm.annotate_host_info__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
