package clojure.tools.analyzer.passes.jvm;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IPersistentMap;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.PersistentVector;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class validate_loop_locals__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final Keyword const__6;
  
  public static final Keyword const__8;
  
  public static final Object const__9;
  
  public static final Keyword const__10;
  
  public static final AFn const__11;
  
  public static final Var const__12;
  
  public static final AFn const__14;
  
  public static final Var const__15;
  
  public static final AFn const__17;
  
  public static final Var const__18;
  
  public static final Keyword const__19;
  
  public static final AFn const__22;
  
  public static final Var const__23;
  
  public static final Keyword const__24;
  
  public static final Var const__25;
  
  public static final AFn const__28;
  
  public static final Keyword const__29;
  
  public static final Keyword const__30;
  
  public static final Var const__31;
  
  public static final AFn const__34;
  
  public static final Var const__35;
  
  public static final Keyword const__36;
  
  public static final Keyword const__37;
  
  public static final Keyword const__38;
  
  public static final Keyword const__39;
  
  public static final Var const__40;
  
  public static final Object const__41;
  
  public static final Keyword const__42;
  
  public static final Keyword const__43;
  
  public static final Keyword const__44;
  
  public static final Keyword const__45;
  
  public static final Keyword const__46;
  
  public static final Var const__47;
  
  public static final Keyword const__48;
  
  public static final Var const__49;
  
  public static final Var const__50;
  
  public static final Keyword const__51;
  
  public static final Var const__52;
  
  public static final Object const__53;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new validate_loop_locals.fn__2661());
    const__3.setDynamic(true).setMeta((IPersistentMap)const__11);
    const__3.setDynamic(true).bindRoot(null);
    const__12.setDynamic(true).setMeta((IPersistentMap)const__14);
    const__15.setDynamic(true).setMeta((IPersistentMap)const__17);
    const__15.setDynamic(true).bindRoot(PersistentVector.EMPTY);
    const__18.setMeta((IPersistentMap)const__22);
    const__18.bindRoot(new validate_loop_locals.find_mismatches());
    const__25.setMeta((IPersistentMap)const__28);
    const__25.bindRoot(new validate_loop_locals.dirty());
    const__31.setMeta((IPersistentMap)const__34);
    const__31.bindRoot(new validate_loop_locals._validate_loop_locals_STAR_());
    const__40.setMeta((IPersistentMap)RT.mapUniqueKeys(new Object[] { 
            const__19, const__41, const__42, "Returns a pass that validates the loop locals, calling analyze on the loop AST when\n   a mismatched loop-local is found", const__43, RT.mapUniqueKeys(new Object[] { const__44, const__45, const__46, RT.set(new Object[] { const__47 }), const__48, RT.set(new Object[] { const__47, const__49, const__50 }), const__51, RT.set(new Object[] { const__52 }) }), const__6, const__53, const__8, const__9, 
            const__10, "clojure/tools/analyzer/passes/jvm/validate_loop_locals.clj" }));
    const__40.bindRoot(new validate_loop_locals.validate_loop_locals());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "clojure.tools.analyzer.passes.jvm.validate-loop-locals");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("clojure.tools.analyzer.passes.jvm.validate-loop-locals", "validating");
    const__6 = (Keyword)RT.keyword(null, "line");
    const__8 = (Keyword)RT.keyword(null, "column");
    const__9 = Integer.valueOf(1);
    const__10 = (Keyword)RT.keyword(null, "file");
    const__11 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(18), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/passes/jvm/validate_loop_locals.clj" });
    const__12 = (Var)RT.var("clojure.tools.analyzer.passes.jvm.validate-loop-locals", "mismatch?");
    const__14 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(19), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/passes/jvm/validate_loop_locals.clj" });
    const__15 = (Var)RT.var("clojure.tools.analyzer.passes.jvm.validate-loop-locals", "*loop-locals*");
    const__17 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(20), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/passes/jvm/validate_loop_locals.clj" });
    const__18 = (Var)RT.var("clojure.tools.analyzer.passes.jvm.validate-loop-locals", "find-mismatches");
    const__19 = (Keyword)RT.keyword(null, "arglists");
    const__22 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "op"), Symbol.intern(null, "exprs")), RT.keyword(null, "as"), Symbol.intern(null, "ast") }), Symbol.intern(null, "bindings")) })), RT.keyword(null, "line"), Integer.valueOf(22), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/passes/jvm/validate_loop_locals.clj" });
    const__23 = (Var)RT.var("clojure.tools.analyzer.passes.jvm.validate-loop-locals", "-cleanup-dirty-nodes");
    const__24 = (Keyword)RT.keyword(null, "local");
    const__25 = (Var)RT.var("clojure.tools.analyzer.passes.jvm.validate-loop-locals", "dirty");
    const__28 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ast")) })), RT.keyword(null, "line"), Integer.valueOf(61), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/passes/jvm/validate_loop_locals.clj" });
    const__29 = (Keyword)RT.keyword(null, "do");
    const__30 = (Keyword)RT.keyword(null, "default");
    const__31 = (Var)RT.var("clojure.tools.analyzer.passes.jvm.validate-loop-locals", "-validate-loop-locals*");
    const__34 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "analyze"), RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "body"), Symbol.intern(null, "env"), Symbol.intern(null, "loop-id")), RT.keyword(null, "as"), Symbol.intern(null, "ast") }), Symbol.intern(null, "key")) })), RT.keyword(null, "line"), Integer.valueOf(81), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/passes/jvm/validate_loop_locals.clj" });
    const__35 = (Var)RT.var("clojure.tools.analyzer.passes.jvm.validate-loop-locals", "-validate-loop-locals");
    const__36 = (Keyword)RT.keyword(null, "loop");
    const__37 = (Keyword)RT.keyword(null, "fn-method");
    const__38 = (Keyword)RT.keyword(null, "method");
    const__39 = (Keyword)RT.keyword(null, "recur");
    const__40 = (Var)RT.var("clojure.tools.analyzer.passes.jvm.validate-loop-locals", "validate-loop-locals");
    const__41 = PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "analyze")) }));
    const__42 = (Keyword)RT.keyword(null, "doc");
    const__43 = (Keyword)RT.keyword(null, "pass-info");
    const__44 = (Keyword)RT.keyword(null, "walk");
    const__45 = (Keyword)RT.keyword(null, "post");
    const__46 = (Keyword)RT.keyword(null, "depends");
    const__47 = (Var)RT.var("clojure.tools.analyzer.passes.jvm.validate", "validate");
    const__48 = (Keyword)RT.keyword(null, "affects");
    const__49 = (Var)RT.var("clojure.tools.analyzer.passes.jvm.analyze-host-expr", "analyze-host-expr");
    const__50 = (Var)RT.var("clojure.tools.analyzer.passes.jvm.infer-tag", "infer-tag");
    const__51 = (Keyword)RT.keyword(null, "after");
    const__52 = (Var)RT.var("clojure.tools.analyzer.passes.jvm.classify-invoke", "classify-invoke");
    const__53 = Integer.valueOf(147);
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("clojure.tools.analyzer.passes.jvm.validate_loop_locals__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
