package clojure.tools.analyzer.passes.jvm;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IPersistentMap;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentHashSet;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class constant_lifter__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final Keyword const__4;
  
  public static final Keyword const__6;
  
  public static final Keyword const__8;
  
  public static final Object const__9;
  
  public static final Keyword const__10;
  
  public static final AFn const__11;
  
  public static final Var const__12;
  
  public static final Object const__13;
  
  public static final Keyword const__14;
  
  public static final Keyword const__15;
  
  public static final Keyword const__16;
  
  public static final Keyword const__17;
  
  public static final Keyword const__18;
  
  public static final Keyword const__19;
  
  public static final Var const__20;
  
  public static final Var const__21;
  
  public static final Object const__22;
  
  public static void load() { LockingTransaction.runInTransaction((Callable)new constant_lifter.fn__2200());
    const__3.setMeta((IPersistentMap)const__11);
    const__3.bindRoot(new constant_lifter.constant_lift_STAR_());
    const__12.setMeta((IPersistentMap)RT.mapUniqueKeys(new Object[] { 
            const__4, const__13, const__14, "Like clojure.tools.analyzer.passes.constant-lifter/constant-lift but\n   transforms also :var nodes where the var has :const in the metadata\n   into :const nodes and preserves tag info", const__15, RT.mapUniqueKeys(new Object[] { const__16, const__17, const__18, PersistentHashSet.EMPTY, const__19, RT.set(new Object[] { const__20, const__21 }) }), const__6, const__22, const__8, const__9, 
            const__10, "clojure/tools/analyzer/passes/jvm/constant_lifter.clj" }));
    const__12.bindRoot(new constant_lifter.constant_lift()); }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "clojure.tools.analyzer.passes.jvm.constant-lifter");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("clojure.tools.analyzer.passes.jvm.constant-lifter", "constant-lift*");
    const__4 = (Keyword)RT.keyword(null, "arglists");
    const__6 = (Keyword)RT.keyword(null, "line");
    const__8 = (Keyword)RT.keyword(null, "column");
    const__9 = Integer.valueOf(1);
    const__10 = (Keyword)RT.keyword(null, "file");
    const__11 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ast")) })), RT.keyword(null, "line"), Integer.valueOf(8), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/passes/jvm/constant_lifter.clj" });
    const__12 = (Var)RT.var("clojure.tools.analyzer.passes.jvm.constant-lifter", "constant-lift");
    const__13 = PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ast")) }));
    const__14 = (Keyword)RT.keyword(null, "doc");
    const__15 = (Keyword)RT.keyword(null, "pass-info");
    const__16 = (Keyword)RT.keyword(null, "walk");
    const__17 = (Keyword)RT.keyword(null, "post");
    const__18 = (Keyword)RT.keyword(null, "depends");
    const__19 = (Keyword)RT.keyword(null, "after");
    const__20 = (Var)RT.var("clojure.tools.analyzer.passes.elide-meta", "elide-meta");
    const__21 = (Var)RT.var("clojure.tools.analyzer.passes.jvm.analyze-host-expr", "analyze-host-expr");
    const__22 = Integer.valueOf(19);
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("clojure.tools.analyzer.passes.jvm.constant_lifter__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
