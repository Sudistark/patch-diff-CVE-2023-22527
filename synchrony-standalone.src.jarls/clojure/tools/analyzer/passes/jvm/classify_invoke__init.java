package clojure.tools.analyzer.passes.jvm;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IPersistentMap;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class classify_invoke__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final Keyword const__4;
  
  public static final Object const__5;
  
  public static final Keyword const__6;
  
  public static final Keyword const__7;
  
  public static final Keyword const__8;
  
  public static final Keyword const__9;
  
  public static final Keyword const__10;
  
  public static final Var const__11;
  
  public static final Keyword const__12;
  
  public static final Object const__13;
  
  public static final Keyword const__14;
  
  public static final Object const__15;
  
  public static final Keyword const__16;
  
  public static void load() { LockingTransaction.runInTransaction((Callable)new classify_invoke.fn__2641());
    const__3.setMeta((IPersistentMap)RT.mapUniqueKeys(new Object[] { 
            const__4, const__5, const__6, "If the AST node is an :invoke, check the node in function position,\n   * if it is a keyword, transform the node in a :keyword-invoke node;\n   * if it is the clojure.core/instance? var and the first argument is a\n     literal class, transform the node in a :instance? node to be inlined by\n     the emitter\n   * if it is a protocol function var, transform the node in a :protocol-invoke\n     node\n   * if it is a regular function with primitive type hints that match a\n     clojure.lang.IFn$[primitive interface], transform the node in a :prim-invoke\n     node", const__7, RT.mapUniqueKeys(new Object[] { const__8, const__9, const__10, RT.set(new Object[] { const__11 }) }), const__12, const__13, const__14, const__15, 
            const__16, "clojure/tools/analyzer/passes/jvm/classify_invoke.clj" }));
    const__3.bindRoot(new classify_invoke.classify_invoke()); }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "clojure.tools.analyzer.passes.jvm.classify-invoke");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("clojure.tools.analyzer.passes.jvm.classify-invoke", "classify-invoke");
    const__4 = (Keyword)RT.keyword(null, "arglists");
    const__5 = PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "op"), Symbol.intern(null, "args"), Symbol.intern(null, "tag"), Symbol.intern(null, "env"), Symbol.intern(null, "form")), RT.keyword(null, "as"), Symbol.intern(null, "ast") })) }));
    const__6 = (Keyword)RT.keyword(null, "doc");
    const__7 = (Keyword)RT.keyword(null, "pass-info");
    const__8 = (Keyword)RT.keyword(null, "walk");
    const__9 = (Keyword)RT.keyword(null, "post");
    const__10 = (Keyword)RT.keyword(null, "depends");
    const__11 = (Var)RT.var("clojure.tools.analyzer.passes.jvm.validate", "validate");
    const__12 = (Keyword)RT.keyword(null, "line");
    const__13 = Integer.valueOf(15);
    const__14 = (Keyword)RT.keyword(null, "column");
    const__15 = Integer.valueOf(1);
    const__16 = (Keyword)RT.keyword(null, "file");
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("clojure.tools.analyzer.passes.jvm.classify_invoke__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
