package clojure.tools.analyzer.passes.jvm;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IPersistentMap;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class annotate_loops__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__11;
  
  public static final Var const__12;
  
  public static final Keyword const__13;
  
  public static final Keyword const__14;
  
  public static final Keyword const__15;
  
  public static final Keyword const__16;
  
  public static final Keyword const__17;
  
  public static final Keyword const__18;
  
  public static final Keyword const__19;
  
  public static final Keyword const__20;
  
  public static final Var const__21;
  
  public static final AFn const__24;
  
  public static final Var const__25;
  
  public static final Keyword const__26;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new annotate_loops.fn__1170());
    const__3.setMeta((IPersistentMap)const__11);
    const__3.bindRoot(new annotate_loops._check_recur());
    const__21.setMeta((IPersistentMap)const__24);
    const__21.bindRoot(new annotate_loops._loops());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "clojure.tools.analyzer.passes.jvm.annotate-loops");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("clojure.tools.analyzer.passes.jvm.annotate-loops", "-check-recur");
    const__11 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ast"), Symbol.intern(null, "k")) })), RT.keyword(null, "line"), Integer.valueOf(27), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/passes/jvm/annotate_loops.clj" });
    const__12 = (Var)RT.var("clojure.tools.analyzer.passes.jvm.annotate-loops", "check-recur");
    const__13 = (Keyword)RT.keyword(null, "do");
    const__14 = (Keyword)RT.keyword(null, "let");
    const__15 = (Keyword)RT.keyword(null, "letfn");
    const__16 = (Keyword)RT.keyword(null, "if");
    const__17 = (Keyword)RT.keyword(null, "case");
    const__18 = (Keyword)RT.keyword(null, "case-then");
    const__19 = (Keyword)RT.keyword(null, "recur");
    const__20 = (Keyword)RT.keyword(null, "default");
    const__21 = (Var)RT.var("clojure.tools.analyzer.passes.jvm.annotate-loops", "-loops");
    const__24 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ast"), Symbol.intern(null, "loop-id")) })), RT.keyword(null, "line"), Integer.valueOf(75), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/passes/jvm/annotate_loops.clj" });
    const__25 = (Var)RT.var("clojure.tools.analyzer.passes.jvm.annotate-loops", "annotate-loops");
    const__26 = (Keyword)RT.keyword(null, "loop");
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("clojure.tools.analyzer.passes.jvm.annotate_loops__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
