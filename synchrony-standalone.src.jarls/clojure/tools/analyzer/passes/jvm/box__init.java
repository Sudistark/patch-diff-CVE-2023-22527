package clojure.tools.analyzer.passes.jvm;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IPersistentMap;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class box__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__11;
  
  public static final Var const__12;
  
  public static final AFn const__15;
  
  public static final Var const__16;
  
  public static final AFn const__19;
  
  public static final Var const__20;
  
  public static final Keyword const__21;
  
  public static final Keyword const__22;
  
  public static final Keyword const__23;
  
  public static final Keyword const__24;
  
  public static final Keyword const__25;
  
  public static final Keyword const__26;
  
  public static final Keyword const__27;
  
  public static final Keyword const__28;
  
  public static final Keyword const__29;
  
  public static final Keyword const__30;
  
  public static final Keyword const__31;
  
  public static final Keyword const__32;
  
  public static final Keyword const__33;
  
  public static final Keyword const__34;
  
  public static final Keyword const__35;
  
  public static final Keyword const__36;
  
  public static final Keyword const__37;
  
  public static final Keyword const__38;
  
  public static final Keyword const__39;
  
  public static final Keyword const__40;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new box.fn__2793());
    const__3.setMeta((IPersistentMap)const__11);
    const__3.bindRoot(new box.if_let_box());
    ((Var)const__3)



      
      .setMacro();
    const__12.setMeta((IPersistentMap)const__15);
    const__12.bindRoot(new box._box());
    const__16.setMeta((IPersistentMap)const__19);
    const__16.bindRoot(new box.boxed_QMARK_());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "clojure.tools.analyzer.passes.jvm.box");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("clojure.tools.analyzer.passes.jvm.box", "if-let-box");
    const__11 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "class"), Symbol.intern(null, "then"), Symbol.intern(null, "else")) })), RT.keyword(null, "line"), Integer.valueOf(21), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/passes/jvm/box.clj" });
    const__12 = (Var)RT.var("clojure.tools.analyzer.passes.jvm.box", "-box");
    const__15 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ast")) })), RT.keyword(null, "line"), Integer.valueOf(28), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/passes/jvm/box.clj" });
    const__16 = (Var)RT.var("clojure.tools.analyzer.passes.jvm.box", "boxed?");
    const__19 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "tag"), Symbol.intern(null, "expr")) })), RT.keyword(null, "line"), Integer.valueOf(34), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/passes/jvm/box.clj" });
    const__20 = (Var)RT.var("clojure.tools.analyzer.passes.jvm.box", "box");
    const__21 = (Keyword)RT.keyword(null, "instance-call");
    const__22 = (Keyword)RT.keyword(null, "static-call");
    const__23 = (Keyword)RT.keyword(null, "new");
    const__24 = (Keyword)RT.keyword(null, "instance-field");
    const__25 = (Keyword)RT.keyword(null, "def");
    const__26 = (Keyword)RT.keyword(null, "vector");
    const__27 = (Keyword)RT.keyword(null, "set");
    const__28 = (Keyword)RT.keyword(null, "map");
    const__29 = (Keyword)RT.keyword(null, "do");
    const__30 = (Keyword)RT.keyword(null, "quote");
    const__31 = (Keyword)RT.keyword(null, "protocol-invoke");
    const__32 = (Keyword)RT.keyword(null, "let");
    const__33 = (Keyword)RT.keyword(null, "letfn");
    const__34 = (Keyword)RT.keyword(null, "loop");
    const__35 = (Keyword)RT.keyword(null, "fn-method");
    const__36 = (Keyword)RT.keyword(null, "if");
    const__37 = (Keyword)RT.keyword(null, "case");
    const__38 = (Keyword)RT.keyword(null, "try");
    const__39 = (Keyword)RT.keyword(null, "invoke");
    const__40 = (Keyword)RT.keyword(null, "default");
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("clojure.tools.analyzer.passes.jvm.box__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
