package clojure.tools.analyzer.passes;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IPersistentMap;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentHashSet;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class cleanup__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final Keyword const__4;
  
  public static final Object const__5;
  
  public static final Keyword const__6;
  
  public static final Keyword const__7;
  
  public static final Keyword const__8;
  
  public static final Keyword const__9;
  
  public static final Keyword const__10;
  
  public static final Object const__11;
  
  public static final Keyword const__12;
  
  public static final Object const__13;
  
  public static final Keyword const__14;
  
  public static void load() { LockingTransaction.runInTransaction((Callable)new cleanup.fn__2013());
    const__3.setMeta((IPersistentMap)RT.mapUniqueKeys(new Object[] { const__4, const__5, const__6, RT.mapUniqueKeys(new Object[] { const__7, const__8, const__9, PersistentHashSet.EMPTY }), const__10, const__11, const__12, const__13, const__14, "clojure/tools/analyzer/passes/cleanup.clj" }));
    const__3.bindRoot(new cleanup.cleanup()); }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "clojure.tools.analyzer.passes.cleanup");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("clojure.tools.analyzer.passes.cleanup", "cleanup");
    const__4 = (Keyword)RT.keyword(null, "arglists");
    const__5 = PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ast")) }));
    const__6 = (Keyword)RT.keyword(null, "pass-info");
    const__7 = (Keyword)RT.keyword(null, "walk");
    const__8 = (Keyword)RT.keyword(null, "any");
    const__9 = (Keyword)RT.keyword(null, "depends");
    const__10 = (Keyword)RT.keyword(null, "line");
    const__11 = Integer.valueOf(11);
    const__12 = (Keyword)RT.keyword(null, "column");
    const__13 = Integer.valueOf(1);
    const__14 = (Keyword)RT.keyword(null, "file");
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("clojure.tools.analyzer.passes.cleanup__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
