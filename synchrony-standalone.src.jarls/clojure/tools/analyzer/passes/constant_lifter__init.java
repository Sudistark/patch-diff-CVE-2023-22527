package clojure.tools.analyzer.passes;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Var;
import java.util.concurrent.Callable;

public class constant_lifter__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final Keyword const__4;
  
  public static final Keyword const__5;
  
  public static final Keyword const__6;
  
  public static final Keyword const__7;
  
  public static void load() { LockingTransaction.runInTransaction((Callable)new constant_lifter.fn__2113()); }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "clojure.tools.analyzer.passes.constant-lifter");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("clojure.tools.analyzer.passes.constant-lifter", "constant-lift");
    const__4 = (Keyword)RT.keyword(null, "vector");
    const__5 = (Keyword)RT.keyword(null, "map");
    const__6 = (Keyword)RT.keyword(null, "set");
    const__7 = (Keyword)RT.keyword(null, "default");
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("clojure.tools.analyzer.passes.constant_lifter__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
