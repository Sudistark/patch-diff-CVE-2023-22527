package clojure.tools.reader.reader_types;

import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.IPersistentVector;
import clojure.lang.IType;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.io.Closeable;
import java.io.IOException;
import java.io.InputStream;

public final class InputStreamReader implements Reader, Closeable, IType {
  public final Object is;
  
  Object buf;
  
  public static final Var const__3 = (Var)RT.var("clojure.tools.reader.impl.utils", "char");
  
  public static final Object const__6 = Long.valueOf(1L);
  
  public InputStreamReader(Object paramObject1, Object paramObject2) { this.is = paramObject1;
    this.buf = paramObject2; }
  
  public static IPersistentVector getBasis() { return Tuple.create(((IObj)Symbol.intern(null, "is")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "InputStream") })), ((IObj)Symbol.intern(null, "buf")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), "[B", RT.keyword(null, "unsynchronized-mutable"), Boolean.TRUE }))); }
  
  public void close() throws IOException { ((InputStream)this.is)

















      
      .close();
    null; }
  
  public Object peek_char() { // Byte code:
    //   0: aload_0
    //   1: getfield buf : Ljava/lang/Object;
    //   4: dup
    //   5: ifnull -> 19
    //   8: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   11: if_acmpeq -> 20
    //   14: aconst_null
    //   15: pop
    //   16: goto -> 66
    //   19: pop
    //   20: aload_0
    //   21: getstatic clojure/tools/reader/reader_types/InputStreamReader.const__6 : Ljava/lang/Object;
    //   24: invokestatic byte_array : (Ljava/lang/Object;)[B
    //   27: putfield buf : Ljava/lang/Object;
    //   30: ldc2_w -1
    //   33: aload_0
    //   34: getfield is : Ljava/lang/Object;
    //   37: checkcast java/io/InputStream
    //   40: aload_0
    //   41: getfield buf : Ljava/lang/Object;
    //   44: checkcast [B
    //   47: invokevirtual read : ([B)I
    //   50: i2l
    //   51: lcmp
    //   52: ifne -> 64
    //   55: aload_0
    //   56: aconst_null
    //   57: putfield buf : Ljava/lang/Object;
    //   60: goto -> 66
    //   63: athrow
    //   64: aconst_null
    //   65: pop
    //   66: aload_0
    //   67: getfield buf : Ljava/lang/Object;
    //   70: dup
    //   71: ifnull -> 116
    //   74: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   77: if_acmpeq -> 117
    //   80: getstatic clojure/tools/reader/reader_types/InputStreamReader.const__3 : Lclojure/lang/Var;
    //   83: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   86: checkcast clojure/lang/IFn
    //   89: aload_0
    //   90: getfield buf : Ljava/lang/Object;
    //   93: checkcast [B
    //   96: lconst_0
    //   97: invokestatic intCast : (J)I
    //   100: invokestatic aget : ([BI)B
    //   103: invokestatic valueOf : (B)Ljava/lang/Byte;
    //   106: aconst_null
    //   107: astore_0
    //   108: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   113: goto -> 118
    //   116: pop
    //   117: aconst_null
    //   118: areturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #59	-> 0
    //   #70	-> 0
    //   #71	-> 24
    //   #72	-> 30
    //   #72	-> 30
    //   #72	-> 47
    //   #74	-> 66
    //   #75	-> 86
    //   #75	-> 97
    //   #75	-> 100
    //   #75	-> 106
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   0	118	0	this	Lclojure/tools/reader/reader_types/InputStreamReader; }
  
  public Object read_char() {
    if (this.buf != null) {
      if (this.buf != Boolean.FALSE) {
        byte c = (byte[])this.buf[RT.intCast(0L)];
        this.buf = null;
        this = null;
      } 
    } else {
      this.buf;
    } 
    int c = ((InputStream)this.is).read();
    this = null;
    return (c >= 0L) ? ((IFn)const__3.getRawRoot()).invoke(Integer.valueOf(c)) : null;
  }
}
