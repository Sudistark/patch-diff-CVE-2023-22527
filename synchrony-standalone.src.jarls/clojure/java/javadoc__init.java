package clojure.java;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class javadoc__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__4;
  
  public static final AFn const__5;
  
  public static final Var const__6;
  
  public static final AFn const__13;
  
  public static final Var const__14;
  
  public static final AFn const__16;
  
  public static final Var const__17;
  
  public static final AFn const__19;
  
  public static final Var const__20;
  
  public static final Var const__21;
  
  public static final Var const__22;
  
  public static final AFn const__24;
  
  public static final Var const__25;
  
  public static final AFn const__27;
  
  public static final Var const__28;
  
  public static final Var const__29;
  
  public static final AFn const__34;
  
  public static final Var const__35;
  
  public static final AFn const__38;
  
  public static final Var const__39;
  
  public static final AFn const__45;
  
  public static final Var const__46;
  
  public static final AFn const__49;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new javadoc.fn__11723());
    const__6.setDynamic(true).setMeta((IPersistentMap)const__13);
    const__6.setDynamic(true).bindRoot("http://www.google.com/search?btnI=I%27m%20Feeling%20Lucky&q=allinurl:");
    const__14.setDynamic(true).setMeta((IPersistentMap)const__16);
    const__14.setDynamic(true).bindRoot(Boolean.TRUE);
    const__17.setDynamic(true).setMeta((IPersistentMap)const__19);
    const__17.setDynamic(true)









      
      .bindRoot(((IFn)const__20.getRawRoot()).invoke(((IFn)const__21.getRawRoot()).invoke()));
    const__22.setDynamic(true).setMeta((IPersistentMap)const__24);
    const__22.setDynamic(true)

      
      .bindRoot(((IFn)new javadoc.fn__11726()).invoke());
    const__25.setDynamic(true).setMeta((IPersistentMap)const__27);
    const__25.setDynamic(true)






      
      .bindRoot(((IFn)const__20.getRawRoot()).invoke(((IFn)const__28.getRawRoot()).invoke("com.google.common.", "http://google.github.io/guava/releases/23.0/api/docs/", "java.", const__22.get(), "javax.", const__22.get(), "org.ietf.jgss.", const__22.get(), "org.omg.", const__22.get(), "org.w3c.dom.", const__22.get(), "org.xml.sax.", const__22.get(), "org.apache.commons.codec.", "http://commons.apache.org/proper/commons-codec/apidocs/", "org.apache.commons.io.", "http://commons.apache.org/proper/commons-io/javadocs/api-release/", "org.apache.commons.lang.", "http://commons.apache.org/proper/commons-lang/javadocs/api-2.6/", new Object[] { "org.apache.commons.lang3.", "http://commons.apache.org/proper/commons-lang/javadocs/api-release/" })));
    const__29.setMeta((IPersistentMap)const__34);
    const__29.bindRoot(new javadoc.add_local_javadoc());
    const__35.setMeta((IPersistentMap)const__38);
    const__35.bindRoot(new javadoc.add_remote_javadoc());
    const__39.setMeta((IPersistentMap)const__45);
    const__39.bindRoot(new javadoc.javadoc_url());
    const__46.setMeta((IPersistentMap)const__49);
    const__46.bindRoot(new javadoc.javadoc());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "clojure.java.javadoc")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "author"), "Christophe Grand, Stuart Sierra", RT.keyword(null, "doc"), "A repl helper to quickly open javadocs." }));
    const__4 = (AFn)RT.map(new Object[] { RT.keyword(null, "author"), "Christophe Grand, Stuart Sierra", RT.keyword(null, "doc"), "A repl helper to quickly open javadocs." });
    const__5 = (AFn)Symbol.intern(null, "clojure.core");
    const__6 = (Var)RT.var("clojure.java.javadoc", "*feeling-lucky-url*");
    const__13 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(16), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/java/javadoc.clj" });
    const__14 = (Var)RT.var("clojure.java.javadoc", "*feeling-lucky*");
    const__16 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(17), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/java/javadoc.clj" });
    const__17 = (Var)RT.var("clojure.java.javadoc", "*local-javadocs*");
    const__19 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(19), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/java/javadoc.clj" });
    const__20 = (Var)RT.var("clojure.core", "ref");
    const__21 = (Var)RT.var("clojure.core", "list");
    const__22 = (Var)RT.var("clojure.java.javadoc", "*core-java-api*");
    const__24 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(21), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/java/javadoc.clj" });
    const__25 = (Var)RT.var("clojure.java.javadoc", "*remote-javadocs*");
    const__27 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(29), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/java/javadoc.clj" });
    const__28 = (Var)RT.var("clojure.core", "sorted-map");
    const__29 = (Var)RT.var("clojure.java.javadoc", "add-local-javadoc");
    const__34 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "path")) })), RT.keyword(null, "doc"), "Adds to the list of local Javadoc paths.", RT.keyword(null, "added"), "1.2", RT.keyword(null, "line"), Integer.valueOf(43), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/java/javadoc.clj" });
    const__35 = (Var)RT.var("clojure.java.javadoc", "add-remote-javadoc");
    const__38 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "package-prefix"), Symbol.intern(null, "url")) })), RT.keyword(null, "doc"), "Adds to the list of remote Javadoc URLs.  package-prefix is the\n  beginning of the package name that has docs at this URL.", RT.keyword(null, "added"), "1.2", RT.keyword(null, "line"), Integer.valueOf(49), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/java/javadoc.clj" });
    const__39 = (Var)RT.var("clojure.java.javadoc", "javadoc-url");
    const__45 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "classname")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") }))) })), RT.keyword(null, "doc"), "Searches for a URL for the given class name.  Tries\n  *local-javadocs* first, then *remote-javadocs*.  Returns a string.", RT.keyword(null, "tag"), RT.classForName("java.lang.String"), RT.keyword(null, "added"), "1.2", 
          RT.keyword(null, "line"), Integer.valueOf(56), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/java/javadoc.clj" });
    const__46 = (Var)RT.var("clojure.java.javadoc", "javadoc");
    const__49 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "class-or-object")) })), RT.keyword(null, "doc"), "Opens a browser window displaying the javadoc for the argument.\n  Tries *local-javadocs* first, then *remote-javadocs*.", RT.keyword(null, "added"), "1.2", RT.keyword(null, "line"), Integer.valueOf(77), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/java/javadoc.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("clojure.java.javadoc__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
