package clojure.java;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class shell__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__4;
  
  public static final AFn const__5;
  
  public static final Var const__6;
  
  public static final AFn const__13;
  
  public static final Var const__14;
  
  public static final AFn const__16;
  
  public static final Var const__17;
  
  public static final AFn const__22;
  
  public static final Var const__23;
  
  public static final AFn const__26;
  
  public static final Var const__27;
  
  public static final AFn const__31;
  
  public static final Var const__32;
  
  public static final AFn const__35;
  
  public static final Var const__36;
  
  public static final AFn const__40;
  
  public static final Var const__41;
  
  public static final AFn const__44;
  
  public static final Var const__45;
  
  public static final AFn const__48;
  
  public static final Var const__49;
  
  public static final AFn const__52;
  
  public static final Var const__53;
  
  public static final AFn const__56;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new shell.fn__11678());
    const__6.setDynamic(true).setMeta((IPersistentMap)const__13);
    const__6.setDynamic(true).bindRoot(null);
    const__14.setDynamic(true).setMeta((IPersistentMap)const__16);
    const__14.setDynamic(true).bindRoot(null);
    const__17.setMeta((IPersistentMap)const__22);
    const__17.bindRoot(new shell.with_sh_dir());
    ((Var)const__17)










      
      .setMacro();
    const__23.setMeta((IPersistentMap)const__26);
    const__23.bindRoot(new shell.with_sh_env());
    ((Var)const__23)





      
      .setMacro();
    const__27.setMeta((IPersistentMap)const__31);
    const__27.bindRoot(new shell.aconcat());
    const__32.setMeta((IPersistentMap)const__35);
    const__32.bindRoot(new shell.parse_args());
    const__36.setMeta((IPersistentMap)const__40);
    const__36.bindRoot(new shell.as_env_strings());
    const__41.setMeta((IPersistentMap)const__44);
    const__41.bindRoot(new shell.stream_to_bytes());
    const__45.setMeta((IPersistentMap)const__48);
    const__45.bindRoot(new shell.stream_to_string());
    const__49.setMeta((IPersistentMap)const__52);
    const__49.bindRoot(new shell.stream_to_enc());
    const__53.setMeta((IPersistentMap)const__56);
    const__53.bindRoot(new shell.sh());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "clojure.java.shell")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "author"), "Chris Houser, Stuart Halloway", RT.keyword(null, "doc"), "Conveniently launch a sub-process providing its stdin and\ncollecting its stdout" }));
    const__4 = (AFn)RT.map(new Object[] { RT.keyword(null, "author"), "Chris Houser, Stuart Halloway", RT.keyword(null, "doc"), "Conveniently launch a sub-process providing its stdin and\ncollecting its stdout" });
    const__5 = (AFn)Symbol.intern(null, "clojure.core");
    const__6 = (Var)RT.var("clojure.java.shell", "*sh-dir*");
    const__13 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(18), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/java/shell.clj" });
    const__14 = (Var)RT.var("clojure.java.shell", "*sh-env*");
    const__16 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(19), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/java/shell.clj" });
    const__17 = (Var)RT.var("clojure.java.shell", "with-sh-dir");
    const__22 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "dir"), Symbol.intern(null, "&"), Symbol.intern(null, "forms")) })), RT.keyword(null, "doc"), "Sets the directory for use with sh, see sh for details.", RT.keyword(null, "added"), "1.2", RT.keyword(null, "line"), Integer.valueOf(21), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/java/shell.clj" });
    const__23 = (Var)RT.var("clojure.java.shell", "with-sh-env");
    const__26 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "env"), Symbol.intern(null, "&"), Symbol.intern(null, "forms")) })), RT.keyword(null, "doc"), "Sets the environment for use with sh, see sh for details.", RT.keyword(null, "added"), "1.2", RT.keyword(null, "line"), Integer.valueOf(28), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/java/shell.clj" });
    const__27 = (Var)RT.var("clojure.java.shell", "aconcat");
    const__31 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "type"), Symbol.intern(null, "&"), Symbol.intern(null, "xs")) })), RT.keyword(null, "doc"), "Concatenates arrays of given type.", RT.keyword(null, "line"), Integer.valueOf(35), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/java/shell.clj" });
    const__32 = (Var)RT.var("clojure.java.shell", "parse-args");
    const__35 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "args")) })), RT.keyword(null, "line"), Integer.valueOf(45), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/java/shell.clj" });
    const__36 = (Var)RT.var("clojure.java.shell", "as-env-strings");
    const__40 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "tag"), "[Ljava.lang.String;", RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "arg")) })), RT.keyword(null, "doc"), "Helper so that callers can pass a Clojure map for the :env to sh.", RT.keyword(null, "line"), Integer.valueOf(52), 
          RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/java/shell.clj" });
    const__41 = (Var)RT.var("clojure.java.shell", "stream-to-bytes");
    const__44 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "in")) })), RT.keyword(null, "line"), Integer.valueOf(60), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/java/shell.clj" });
    const__45 = (Var)RT.var("clojure.java.shell", "stream-to-string");
    const__48 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "in")), Tuple.create(Symbol.intern(null, "in"), Symbol.intern(null, "enc")) })), RT.keyword(null, "line"), Integer.valueOf(66), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/java/shell.clj" });
    const__49 = (Var)RT.var("clojure.java.shell", "stream-to-enc");
    const__52 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "stream"), Symbol.intern(null, "enc")) })), RT.keyword(null, "line"), Integer.valueOf(73), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/java/shell.clj" });
    const__53 = (Var)RT.var("clojure.java.shell", "sh");
    const__56 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "args")) })), RT.keyword(null, "doc"), "Passes the given strings to Runtime.exec() to launch a sub-process.\n\n  Options are\n\n  :in      may be given followed by any legal input source for\n           clojure.java.io/copy, e.g. InputStream, Reader, File, byte[],\n           or String, to be fed to the sub-process's stdin.\n  :in-enc  option may be given followed by a String, used as a character\n           encoding name (for example \"UTF-8\" or \"ISO-8859-1\") to\n           convert the input string specified by the :in option to the\n           sub-process's stdin.  Defaults to UTF-8.\n           If the :in option provides a byte array, then the bytes are passed\n           unencoded, and this option is ignored.\n  :out-enc option may be given followed by :bytes or a String. If a\n           String is given, it will be used as a character encoding\n           name (for example \"UTF-8\" or \"ISO-8859-1\") to convert\n           the sub-process's stdout to a String which is returned.\n           If :bytes is given, the sub-process's stdout will be stored\n           in a byte array and returned.  Defaults to UTF-8.\n  :env     override the process env with a map (or the underlying Java\n           String[] if you are a masochist).\n  :dir     override the process dir with a String or java.io.File.\n\n  You can bind :env or :dir for multiple operations using with-sh-env\n  and with-sh-dir.\n\n  sh returns a map of\n    :exit => sub-process's exit code\n    :out  => sub-process's stdout (as byte[] or String)\n    :err  => sub-process's stderr (String via platform default encoding)", RT.keyword(null, "added"), "1.2", RT.keyword(null, "line"), Integer.valueOf(79), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/java/shell.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("clojure.java.shell__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
