package clojure.test;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class junit__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__4;
  
  public static final AFn const__5;
  
  public static final Var const__6;
  
  public static final AFn const__13;
  
  public static final Var const__14;
  
  public static final Var const__15;
  
  public static final AFn const__16;
  
  public static final Var const__17;
  
  public static final AFn const__21;
  
  public static final Var const__22;
  
  public static final AFn const__25;
  
  public static final Var const__26;
  
  public static final AFn const__28;
  
  public static final Var const__29;
  
  public static final AFn const__32;
  
  public static final Var const__33;
  
  public static final AFn const__36;
  
  public static final Var const__37;
  
  public static final AFn const__40;
  
  public static final Var const__41;
  
  public static final AFn const__44;
  
  public static final Var const__45;
  
  public static final AFn const__48;
  
  public static final Var const__49;
  
  public static final AFn const__52;
  
  public static final Var const__53;
  
  public static final AFn const__56;
  
  public static final Var const__57;
  
  public static final AFn const__60;
  
  public static final Var const__61;
  
  public static final AFn const__64;
  
  public static final Var const__65;
  
  public static final AFn const__68;
  
  public static final Var const__69;
  
  public static final AFn const__72;
  
  public static final Var const__73;
  
  public static final AFn const__76;
  
  public static final Var const__77;
  
  public static final AFn const__80;
  
  public static final Var const__81;
  
  public static final AFn const__84;
  
  public static final Var const__85;
  
  public static final Keyword const__86;
  
  public static final Keyword const__87;
  
  public static final Keyword const__88;
  
  public static final Keyword const__89;
  
  public static final Keyword const__90;
  
  public static final Keyword const__91;
  
  public static final Keyword const__92;
  
  public static final Keyword const__93;
  
  public static final Var const__94;
  
  public static final AFn const__98;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new junit.fn__9823());
    const__6.setMeta((IPersistentMap)const__13);
    const__6

























      
      .bindRoot(((IFn)const__14.getRawRoot()).invoke("'<>\"&", ((IFn)const__15.getRawRoot()).invoke(new junit.fn__9826(), const__16)));
    const__17.setMeta((IPersistentMap)const__21);
    const__17.bindRoot(new junit.escape_xml());
    const__22.setDynamic(true).setMeta((IPersistentMap)const__25);
    const__26.setDynamic(true).setMeta((IPersistentMap)const__28);
    const__29.setMeta((IPersistentMap)const__32);
    const__29.bindRoot(new junit.indent());
    const__33.setMeta((IPersistentMap)const__36);
    const__33.bindRoot(new junit.start_element());
    const__37.setMeta((IPersistentMap)const__40);
    const__37.bindRoot(new junit.element_content());
    const__41.setMeta((IPersistentMap)const__44);
    const__41.bindRoot(new junit.finish_element());
    const__45.setMeta((IPersistentMap)const__48);
    const__45.bindRoot(new junit.test_name());
    const__49.setMeta((IPersistentMap)const__52);
    const__49.bindRoot(new junit.package_class());
    const__53.setMeta((IPersistentMap)const__56);
    const__53.bindRoot(new junit.start_case());
    const__57.setMeta((IPersistentMap)const__60);
    const__57.bindRoot(new junit.finish_case());
    const__61.setMeta((IPersistentMap)const__64);
    const__61.bindRoot(new junit.suite_attrs());
    const__65.setMeta((IPersistentMap)const__68);
    const__65.bindRoot(new junit.start_suite());
    const__69.setMeta((IPersistentMap)const__72);
    const__69.bindRoot(new junit.finish_suite());
    const__73.setMeta((IPersistentMap)const__76);
    const__73.bindRoot(new junit.message_el());
    const__77.setMeta((IPersistentMap)const__80);
    const__77.bindRoot(new junit.failure_el());
    const__81.setMeta((IPersistentMap)const__84);
    const__81.bindRoot(new junit.error_el());
    const__94.setMeta((IPersistentMap)const__98);
    const__94.bindRoot(new junit.with_junit_output());
    ((Var)const__94)
      
      .setMacro();
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "clojure.test.junit")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "clojure.test extension for JUnit-compatible XML output.\n\n  JUnit (http://junit.org/) is the most popular unit-testing library\n  for Java.  As such, tool support for JUnit output formats is\n  common.  By producing compatible output from tests, this tool\n  support can be exploited.\n\n  To use, wrap any calls to clojure.test/run-tests in the\n  with-junit-output macro, like this:\n\n    (use 'clojure.test)\n    (use 'clojure.test.junit)\n\n    (with-junit-output\n      (run-tests 'my.cool.library))\n\n  To write the output to a file, rebind clojure.test/*test-out* to\n  your own PrintWriter (perhaps opened using\n  clojure.java.io/writer).", RT.keyword(null, "author"), "Jason Sankey" }));
    const__4 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "clojure.test extension for JUnit-compatible XML output.\n\n  JUnit (http://junit.org/) is the most popular unit-testing library\n  for Java.  As such, tool support for JUnit output formats is\n  common.  By producing compatible output from tests, this tool\n  support can be exploited.\n\n  To use, wrap any calls to clojure.test/run-tests in the\n  with-junit-output macro, like this:\n\n    (use 'clojure.test)\n    (use 'clojure.test.junit)\n\n    (with-junit-output\n      (run-tests 'my.cool.library))\n\n  To write the output to a file, rebind clojure.test/*test-out* to\n  your own PrintWriter (perhaps opened using\n  clojure.java.io/writer).", RT.keyword(null, "author"), "Jason Sankey" });
    const__5 = (AFn)Symbol.intern(null, "clojure.core");
    const__6 = (Var)RT.var("clojure.test.junit", "escape-xml-map");
    const__13 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(42), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/test/junit.clj" });
    const__14 = (Var)RT.var("clojure.core", "zipmap");
    const__15 = (Var)RT.var("clojure.core", "map");
    const__16 = (AFn)Tuple.create(Symbol.intern(null, "apos"), Symbol.intern(null, "lt"), Symbol.intern(null, "gt"), Symbol.intern(null, "quot"), Symbol.intern(null, "amp"));
    const__17 = (Var)RT.var("clojure.test.junit", "escape-xml");
    const__21 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "text")) })), RT.keyword(null, "line"), Integer.valueOf(45), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/test/junit.clj" });
    const__22 = (Var)RT.var("clojure.test.junit", "*var-context*");
    const__25 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(48), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/test/junit.clj" });
    const__26 = (Var)RT.var("clojure.test.junit", "*depth*");
    const__28 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(49), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/test/junit.clj" });
    const__29 = (Var)RT.var("clojure.test.junit", "indent");
    const__32 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(51), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/test/junit.clj" });
    const__33 = (Var)RT.var("clojure.test.junit", "start-element");
    const__36 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "tag"), Symbol.intern(null, "pretty"), Symbol.intern(null, "&"), Tuple.create(Symbol.intern(null, "attrs"))) })), RT.keyword(null, "line"), Integer.valueOf(55), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/test/junit.clj" });
    const__37 = (Var)RT.var("clojure.test.junit", "element-content");
    const__40 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "content")) })), RT.keyword(null, "line"), Integer.valueOf(66), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/test/junit.clj" });
    const__41 = (Var)RT.var("clojure.test.junit", "finish-element");
    const__44 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "tag"), Symbol.intern(null, "pretty")) })), RT.keyword(null, "line"), Integer.valueOf(70), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/test/junit.clj" });
    const__45 = (Var)RT.var("clojure.test.junit", "test-name");
    const__48 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "vars")) })), RT.keyword(null, "line"), Integer.valueOf(77), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/test/junit.clj" });
    const__49 = (Var)RT.var("clojure.test.junit", "package-class");
    const__52 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "name")) })), RT.keyword(null, "line"), Integer.valueOf(82), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/test/junit.clj" });
    const__53 = (Var)RT.var("clojure.test.junit", "start-case");
    const__56 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "name"), Symbol.intern(null, "classname")) })), RT.keyword(null, "line"), Integer.valueOf(89), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/test/junit.clj" });
    const__57 = (Var)RT.var("clojure.test.junit", "finish-case");
    const__60 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(93), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/test/junit.clj" });
    const__61 = (Var)RT.var("clojure.test.junit", "suite-attrs");
    const__64 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "package"), Symbol.intern(null, "classname")) })), RT.keyword(null, "line"), Integer.valueOf(97), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/test/junit.clj" });
    const__65 = (Var)RT.var("clojure.test.junit", "start-suite");
    const__68 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "name")) })), RT.keyword(null, "line"), Integer.valueOf(104), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/test/junit.clj" });
    const__69 = (Var)RT.var("clojure.test.junit", "finish-suite");
    const__72 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(109), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/test/junit.clj" });
    const__73 = (Var)RT.var("clojure.test.junit", "message-el");
    const__76 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "tag"), Symbol.intern(null, "message"), Symbol.intern(null, "expected-str"), Symbol.intern(null, "actual-str")) })), RT.keyword(null, "line"), Integer.valueOf(113), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/test/junit.clj" });
    const__77 = (Var)RT.var("clojure.test.junit", "failure-el");
    const__80 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "message"), Symbol.intern(null, "expected"), Symbol.intern(null, "actual")) })), RT.keyword(null, "line"), Integer.valueOf(128), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/test/junit.clj" });
    const__81 = (Var)RT.var("clojure.test.junit", "error-el");
    const__84 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "message"), Symbol.intern(null, "expected"), Symbol.intern(null, "actual")) })), RT.keyword(null, "line"), Integer.valueOf(132), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/test/junit.clj" });
    const__85 = (Var)RT.var("clojure.test.junit", "junit-report");
    const__86 = (Keyword)RT.keyword(null, "begin-test-ns");
    const__87 = (Keyword)RT.keyword(null, "end-test-ns");
    const__88 = (Keyword)RT.keyword(null, "begin-test-var");
    const__89 = (Keyword)RT.keyword(null, "end-test-var");
    const__90 = (Keyword)RT.keyword(null, "pass");
    const__91 = (Keyword)RT.keyword(null, "fail");
    const__92 = (Keyword)RT.keyword(null, "error");
    const__93 = (Keyword)RT.keyword(null, "default");
    const__94 = (Var)RT.var("clojure.test.junit", "with-junit-output");
    const__98 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "doc"), "Execute body with modified test-is reporting functions that write\n  JUnit-compatible XML output.", RT.keyword(null, "added"), "1.1", RT.keyword(null, "line"), Integer.valueOf(182), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/test/junit.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("clojure.test.junit__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
