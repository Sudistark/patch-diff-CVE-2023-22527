package clojure.test;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class tap__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__4;
  
  public static final AFn const__5;
  
  public static final Var const__6;
  
  public static final AFn const__15;
  
  public static final Var const__16;
  
  public static final AFn const__19;
  
  public static final Var const__20;
  
  public static final AFn const__23;
  
  public static final Var const__24;
  
  public static final AFn const__27;
  
  public static final Var const__28;
  
  public static final Keyword const__29;
  
  public static final Var const__30;
  
  public static final AFn const__33;
  
  public static final Keyword const__34;
  
  public static final Keyword const__35;
  
  public static final Keyword const__36;
  
  public static final Keyword const__37;
  
  public static final Var const__38;
  
  public static final AFn const__41;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new tap.fn__9790());
    const__6.setMeta((IPersistentMap)const__15);
    const__6.bindRoot(new tap.print_tap_plan());
    const__16.setMeta((IPersistentMap)const__19);
    const__16.bindRoot(new tap.print_tap_diagnostic());
    const__20.setMeta((IPersistentMap)const__23);
    const__20.bindRoot(new tap.print_tap_pass());
    const__24.setMeta((IPersistentMap)const__27);
    const__24.bindRoot(new tap.print_tap_fail());
    const__30.setMeta((IPersistentMap)const__33);
    const__30.bindRoot(new tap.print_diagnostics());
    const__38.setMeta((IPersistentMap)const__41);
    const__38.bindRoot(new tap.with_tap_output());
    ((Var)const__38)



      
      .setMacro();
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "clojure.test.tap")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "clojure.test extensions for the Test Anything Protocol (TAP)\n\n  TAP is a simple text-based syntax for reporting test results.  TAP\n  was originally developed for Perl, and now has implementations in\n  several languages.  For more information on TAP, see\n  http://testanything.org/ and\n  http://search.cpan.org/~petdance/TAP-1.0.0/TAP.pm\n\n  To use this library, wrap any calls to\n  clojure.test/run-tests in the with-tap-output macro,\n  like this:\n\n    (use 'clojure.test)\n    (use 'clojure.test.tap)\n\n    (with-tap-output\n     (run-tests 'my.cool.library))", RT.keyword(null, "author"), "Stuart Sierra" }));
    const__4 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "clojure.test extensions for the Test Anything Protocol (TAP)\n\n  TAP is a simple text-based syntax for reporting test results.  TAP\n  was originally developed for Perl, and now has implementations in\n  several languages.  For more information on TAP, see\n  http://testanything.org/ and\n  http://search.cpan.org/~petdance/TAP-1.0.0/TAP.pm\n\n  To use this library, wrap any calls to\n  clojure.test/run-tests in the with-tap-output macro,\n  like this:\n\n    (use 'clojure.test)\n    (use 'clojure.test.tap)\n\n    (with-tap-output\n     (run-tests 'my.cool.library))", RT.keyword(null, "author"), "Stuart Sierra" });
    const__5 = (AFn)Symbol.intern(null, "clojure.core");
    const__6 = (Var)RT.var("clojure.test.tap", "print-tap-plan");
    const__15 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "n")) })), RT.keyword(null, "doc"), "Prints a TAP plan line like '1..n'.  n is the number of tests", RT.keyword(null, "added"), "1.1", RT.keyword(null, "line"), Integer.valueOf(45), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/test/tap.clj" });
    const__16 = (Var)RT.var("clojure.test.tap", "print-tap-diagnostic");
    const__19 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "data")) })), RT.keyword(null, "doc"), "Prints a TAP diagnostic line.  data is a (possibly multi-line)\n  string.", RT.keyword(null, "added"), "1.1", RT.keyword(null, "line"), Integer.valueOf(51), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/test/tap.clj" });
    const__20 = (Var)RT.var("clojure.test.tap", "print-tap-pass");
    const__23 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "msg")) })), RT.keyword(null, "doc"), "Prints a TAP 'ok' line.  msg is a string, with no line breaks", RT.keyword(null, "added"), "1.1", RT.keyword(null, "line"), Integer.valueOf(59), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/test/tap.clj" });
    const__24 = (Var)RT.var("clojure.test.tap", "print-tap-fail");
    const__27 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "msg")) })), RT.keyword(null, "doc"), "Prints a TAP 'not ok' line.  msg is a string, with no line breaks", RT.keyword(null, "added"), "1.1", RT.keyword(null, "line"), Integer.valueOf(65), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/test/tap.clj" });
    const__28 = (Var)RT.var("clojure.test.tap", "tap-report");
    const__29 = (Keyword)RT.keyword(null, "default");
    const__30 = (Var)RT.var("clojure.test.tap", "print-diagnostics");
    const__33 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "data")) })), RT.keyword(null, "line"), Integer.valueOf(78), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/test/tap.clj" });
    const__34 = (Keyword)RT.keyword(null, "pass");
    const__35 = (Keyword)RT.keyword(null, "error");
    const__36 = (Keyword)RT.keyword(null, "fail");
    const__37 = (Keyword)RT.keyword(null, "summary");
    const__38 = (Var)RT.var("clojure.test.tap", "with-tap-output");
    const__41 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "doc"), "Execute body with modified test reporting functions that produce\n  TAP output", RT.keyword(null, "added"), "1.1", RT.keyword(null, "line"), Integer.valueOf(117), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/test/tap.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("clojure.test.tap__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
