package clojure.lang;

public abstract class ATransientSet extends AFn implements ITransientSet {
  ATransientSet(ITransientMap impl) { this.impl = impl; }
  
  public int count() { return this.impl.count(); }
  
  public ITransientSet conj(Object val) {
    ITransientMap m = this.impl.assoc(val, val);
    if (m != this.impl)
      this.impl = m; 
    return this;
  }
  
  public boolean contains(Object key) { return (this != this.impl.valAt(key, this)); }
  
  public ITransientSet disjoin(Object key) {
    ITransientMap m = this.impl.without(key);
    if (m != this.impl)
      this.impl = m; 
    return this;
  }
  
  public Object get(Object key) { return this.impl.valAt(key); }
  
  public Object invoke(Object key, Object notFound) { return this.impl.valAt(key, notFound); }
  
  public Object invoke(Object key) { return this.impl.valAt(key); }
}
