package clojure.lang;

public abstract class AMapEntry extends APersistentVector implements IMapEntry {
  public Object nth(int i) {
    if (i == 0)
      return key(); 
    if (i == 1)
      return val(); 
    throw new IndexOutOfBoundsException();
  }
  
  private IPersistentVector asVector() { return LazilyPersistentVector.createOwning(new Object[] { key(), val() }); }
  
  public IPersistentVector assocN(int i, Object val) { return asVector().assocN(i, val); }
  
  public int count() { return 2; }
  
  public ISeq seq() { return asVector().seq(); }
  
  public IPersistentVector cons(Object o) { return asVector().cons(o); }
  
  public IPersistentCollection empty() { return null; }
  
  public IPersistentStack pop() { return LazilyPersistentVector.createOwning(new Object[] { key() }); }
  
  public Object setValue(Object value) { throw new UnsupportedOperationException(); }
}
