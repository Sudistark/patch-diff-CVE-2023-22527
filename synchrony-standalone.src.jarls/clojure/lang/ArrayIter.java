package clojure.lang;

import java.lang.reflect.Array;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class ArrayIter implements Iterator {
  final Object[] array;
  
  int i;
  
  public static Iterator EMPTY_ITERATOR = new Object();
  
  public static Iterator create() { return EMPTY_ITERATOR; }
  
  public static Iterator create(Object... array) {
    if (array == null || array.length == 0)
      return EMPTY_ITERATOR; 
    return new ArrayIter(array, 0);
  }
  
  public static Iterator createFromObject(Object array) {
    if (array == null || Array.getLength(array) == 0)
      return EMPTY_ITERATOR; 
    Class aclass = array.getClass();
    if (aclass == int[].class)
      return new ArrayIter_int((int[])array, 0); 
    if (aclass == float[].class)
      return new ArrayIter_float((float[])array, 0); 
    if (aclass == double[].class)
      return new ArrayIter_double((double[])array, 0); 
    if (aclass == long[].class)
      return new ArrayIter_long((long[])array, 0); 
    if (aclass == byte[].class)
      return new ArrayIter_byte((byte[])array, 0); 
    if (aclass == char[].class)
      return new ArrayIter_char((char[])array, 0); 
    if (aclass == short[].class)
      return new ArrayIter_short((short[])array, 0); 
    if (aclass == boolean[].class)
      return new ArrayIter_boolean((boolean[])array, 0); 
    return new ArrayIter(array, 0);
  }
  
  ArrayIter(Object array, int i) {
    this.i = i;
    this.array = (Object[])array;
  }
  
  public boolean hasNext() { return (this.array != null && this.i < this.array.length); }
  
  public Object next() {
    if (this.array != null && this.i < this.array.length)
      return this.array[this.i++]; 
    throw new NoSuchElementException();
  }
  
  public void remove() { throw new UnsupportedOperationException("remove() not supported"); }
}
