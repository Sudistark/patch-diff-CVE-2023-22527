package clojure.lang;

import java.math.BigDecimal;
import java.math.BigInteger;

public final class BigInt extends Number implements IHashEq {
  public final long lpart;
  
  public final BigInteger bipart;
  
  public static final BigInt ZERO = new BigInt(0L, null);
  
  public static final BigInt ONE = new BigInt(1L, null);
  
  public int hashCode() {
    if (this.bipart == null)
      return (int)(this.lpart ^ this.lpart >>> 32); 
    return this.bipart.hashCode();
  }
  
  public int hasheq() {
    if (this.bipart == null)
      return Murmur3.hashLong(this.lpart); 
    return this.bipart.hashCode();
  }
  
  public boolean equals(Object obj) {
    if (this == obj)
      return true; 
    if (obj instanceof BigInt) {
      BigInt o = (BigInt)obj;
      if (this.bipart == null)
        return (o.bipart == null && this.lpart == o.lpart); 
      return (o.bipart != null && this.bipart.equals(o.bipart));
    } 
    return false;
  }
  
  private BigInt(long lpart, BigInteger bipart) {
    this.lpart = lpart;
    this.bipart = bipart;
  }
  
  public static BigInt fromBigInteger(BigInteger val) {
    if (val.bitLength() < 64)
      return new BigInt(val.longValue(), null); 
    return new BigInt(0L, val);
  }
  
  public static BigInt fromLong(long val) { return new BigInt(val, null); }
  
  public BigInteger toBigInteger() {
    if (this.bipart == null)
      return BigInteger.valueOf(this.lpart); 
    return this.bipart;
  }
  
  public BigDecimal toBigDecimal() {
    if (this.bipart == null)
      return BigDecimal.valueOf(this.lpart); 
    return new BigDecimal(this.bipart);
  }
  
  public int intValue() {
    if (this.bipart == null)
      return (int)this.lpart; 
    return this.bipart.intValue();
  }
  
  public long longValue() {
    if (this.bipart == null)
      return this.lpart; 
    return this.bipart.longValue();
  }
  
  public float floatValue() {
    if (this.bipart == null)
      return (float)this.lpart; 
    return this.bipart.floatValue();
  }
  
  public double doubleValue() {
    if (this.bipart == null)
      return this.lpart; 
    return this.bipart.doubleValue();
  }
  
  public byte byteValue() {
    if (this.bipart == null)
      return (byte)(int)this.lpart; 
    return this.bipart.byteValue();
  }
  
  public short shortValue() {
    if (this.bipart == null)
      return (short)(int)this.lpart; 
    return this.bipart.shortValue();
  }
  
  public static BigInt valueOf(long val) { return new BigInt(val, null); }
  
  public String toString() {
    if (this.bipart == null)
      return String.valueOf(this.lpart); 
    return this.bipart.toString();
  }
  
  public int bitLength() { return toBigInteger().bitLength(); }
  
  public BigInt add(BigInt y) {
    if (this.bipart == null && y.bipart == null) {
      long ret = this.lpart + y.lpart;
      if ((ret ^ this.lpart) >= 0L || (ret ^ y.lpart) >= 0L)
        return valueOf(ret); 
    } 
    return fromBigInteger(toBigInteger().add(y.toBigInteger()));
  }
  
  public BigInt multiply(BigInt y) {
    if (this.bipart == null && y.bipart == null) {
      long ret = this.lpart * y.lpart;
      if (y.lpart == 0L || (ret / y.lpart == this.lpart && this.lpart != Float.MIN_VALUE))
        return valueOf(ret); 
    } 
    return fromBigInteger(toBigInteger().multiply(y.toBigInteger()));
  }
  
  public BigInt quotient(BigInt y) {
    if (this.bipart == null && y.bipart == null) {
      if (this.lpart == Float.MIN_VALUE && y.lpart == -1L)
        return fromBigInteger(toBigInteger().negate()); 
      return valueOf(this.lpart / y.lpart);
    } 
    return fromBigInteger(toBigInteger().divide(y.toBigInteger()));
  }
  
  public BigInt remainder(BigInt y) {
    if (this.bipart == null && y.bipart == null)
      return valueOf(this.lpart % y.lpart); 
    return fromBigInteger(toBigInteger().remainder(y.toBigInteger()));
  }
  
  public boolean lt(BigInt y) {
    if (this.bipart == null && y.bipart == null)
      return (this.lpart < y.lpart); 
    return (toBigInteger().compareTo(y.toBigInteger()) < 0);
  }
}
