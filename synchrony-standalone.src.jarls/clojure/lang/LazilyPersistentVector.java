package clojure.lang;

import java.util.Collection;

public class LazilyPersistentVector {
  public static IPersistentVector createOwning(Object... items) {
    if (items.length <= 32)
      return new PersistentVector(items.length, 5, PersistentVector.EMPTY_NODE, items); 
    return PersistentVector.create(items);
  }
  
  static int fcount(Object c) {
    if (c instanceof Counted)
      return ((Counted)c).count(); 
    return ((Collection)c).size();
  }
  
  public static IPersistentVector create(Object obj) {
    if (obj instanceof IReduceInit)
      return PersistentVector.create((IReduceInit)obj); 
    if (obj instanceof ISeq)
      return PersistentVector.create(RT.seq(obj)); 
    if (obj instanceof Iterable)
      return PersistentVector.create((Iterable)obj); 
    return createOwning(RT.toArray(obj));
  }
}
