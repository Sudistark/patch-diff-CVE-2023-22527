package clojure.lang;

import java.io.Serializable;
import java.util.Comparator;

public abstract class AFunction extends AFn implements IObj, Comparator, Fn, Serializable {
  public IPersistentMap meta() { return null; }
  
  public IObj withMeta(IPersistentMap meta) {
    if (meta == null)
      return this; 
    return new Object(this, meta);
  }
  
  public int compare(Object o1, Object o2) {
    Object o = invoke(o1, o2);
    if (o instanceof Boolean) {
      if (RT.booleanCast(o))
        return -1; 
      return RT.booleanCast(invoke(o2, o1)) ? 1 : 0;
    } 
    Number n = (Number)o;
    return n.intValue();
  }
}
