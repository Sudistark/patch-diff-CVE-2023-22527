package clojure;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class data__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final Keyword const__3;
  
  public static final AFn const__4;
  
  public static final AFn const__5;
  
  public static final Var const__6;
  
  public static final AFn const__13;
  
  public static final Var const__14;
  
  public static final AFn const__19;
  
  public static final Var const__20;
  
  public static final AFn const__23;
  
  public static final Var const__24;
  
  public static final AFn const__27;
  
  public static final Var const__28;
  
  public static final AFn const__31;
  
  public static final Var const__32;
  
  public static final AFn const__35;
  
  public static final Object const__36;
  
  public static final Var const__37;
  
  public static final Var const__38;
  
  public static final Var const__39;
  
  public static final Var const__40;
  
  public static final ISeq const__41;
  
  public static final Var const__42;
  
  public static final Var const__43;
  
  public static final AFn const__47;
  
  public static final Keyword const__48;
  
  public static final AFn const__49;
  
  public static final Keyword const__50;
  
  public static final Keyword const__51;
  
  public static final Keyword const__52;
  
  public static final AFn const__53;
  
  public static final Keyword const__54;
  
  public static final Var const__55;
  
  public static final Var const__56;
  
  public static final Var const__57;
  
  public static final AFn const__58;
  
  public static final AFn const__59;
  
  public static final Keyword const__60;
  
  public static final Var const__61;
  
  public static final AFn const__62;
  
  public static final Object const__63;
  
  public static final Var const__64;
  
  public static final ISeq const__65;
  
  public static final AFn const__67;
  
  public static final AFn const__68;
  
  public static final Keyword const__69;
  
  public static final AFn const__70;
  
  public static final AFn const__71;
  
  public static final AFn const__72;
  
  public static final AFn const__73;
  
  public static final Var const__74;
  
  public static final Object const__75;
  
  public static final Object const__76;
  
  public static final Object const__77;
  
  public static final Object const__78;
  
  public static final Var const__79;
  
  public static final AFn const__82;
  
  public static final AFn const__86;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new data.fn__11793());
    const__6.setMeta((IPersistentMap)const__13);
    const__14.setMeta((IPersistentMap)const__19);
    const__14.bindRoot(new data.atom_diff());
    const__20.setMeta((IPersistentMap)const__23);
    const__20.bindRoot(new data.vectorize());
    const__24.setMeta((IPersistentMap)const__27);
    const__24.bindRoot(new data.diff_associative_key());
    const__28.setMeta((IPersistentMap)const__31);
    const__28.bindRoot(new data.diff_associative());
    const__32.setMeta((IPersistentMap)const__35);
    const__32.bindRoot(new data.diff_sequential());
    const__79.setMeta((IPersistentMap)const__82);
    const__79.bindRoot(new data.as_set_value());
    const__6.setMeta((IPersistentMap)const__86);
    const__6.bindRoot(new data.diff());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "clojure.data")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "author"), "Stuart Halloway", RT.keyword(null, "doc"), "Non-core data functions." }));
    const__3 = (Keyword)RT.keyword(null, "doc");
    const__4 = (AFn)RT.map(new Object[] { RT.keyword(null, "author"), "Stuart Halloway", RT.keyword(null, "doc"), "Non-core data functions." });
    const__5 = (AFn)Symbol.intern(null, "clojure.core");
    const__6 = (Var)RT.var("clojure.data", "diff");
    const__13 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(15), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/data.clj" });
    const__14 = (Var)RT.var("clojure.data", "atom-diff");
    const__19 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "a"), Symbol.intern(null, "b")) })), RT.keyword(null, "doc"), "Internal helper for diff.", RT.keyword(null, "line"), Integer.valueOf(17), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/data.clj" });
    const__20 = (Var)RT.var("clojure.data", "vectorize");
    const__23 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m")) })), RT.keyword(null, "doc"), "Convert an associative-by-numeric-index collection into\n   an equivalent vector, with nil for any missing keys", RT.keyword(null, "line"), Integer.valueOf(23), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/data.clj" });
    const__24 = (Var)RT.var("clojure.data", "diff-associative-key");
    const__27 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "a"), Symbol.intern(null, "b"), Symbol.intern(null, "k")) })), RT.keyword(null, "doc"), "Diff associative things a and b, comparing only the key k.", RT.keyword(null, "line"), Integer.valueOf(33), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/data.clj" });
    const__28 = (Var)RT.var("clojure.data", "diff-associative");
    const__31 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "a"), Symbol.intern(null, "b"), Symbol.intern(null, "ks")) })), RT.keyword(null, "doc"), "Diff associative things a and b, comparing only keys in ks.", RT.keyword(null, "line"), Integer.valueOf(49), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/data.clj" });
    const__32 = (Var)RT.var("clojure.data", "diff-sequential");
    const__35 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "a"), Symbol.intern(null, "b")) })), RT.keyword(null, "line"), Integer.valueOf(60), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/data.clj" });
    const__36 = RT.classForName("clojure.data.EqualityPartition");
    const__37 = (Var)RT.var("clojure.core", "alter-meta!");
    const__38 = (Var)RT.var("clojure.data", "EqualityPartition");
    const__39 = (Var)RT.var("clojure.core", "assoc");
    const__40 = (Var)RT.var("clojure.core", "assert-same-protocol");
    const__41 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "equality-partition")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Implementation detail. Subject to change.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })) })) }));
    const__42 = (Var)RT.var("clojure.core", "alter-var-root");
    const__43 = (Var)RT.var("clojure.core", "merge");
    const__47 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "clojure.data.EqualityPartition"), RT.keyword(null, "on-interface"), RT.classForName("clojure.data.EqualityPartition"), RT.keyword(null, "doc"), "Implementation detail. Subject to change." });
    const__48 = (Keyword)RT.keyword(null, "sigs");
    const__49 = (AFn)RT.map(new Object[] { RT.keyword(null, "equality-partition"), RT.map(new Object[] { RT.keyword(null, "added"), "1.3", RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "equality-partition")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Implementation detail. Subject to change.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "doc"), "Implementation detail. Subject to change." }) });
    const__50 = (Keyword)RT.keyword(null, "var");
    const__51 = (Keyword)RT.keyword(null, "method-map");
    const__52 = (Keyword)RT.keyword(null, "equality-partition");
    const__53 = (AFn)RT.map(new Object[] { RT.keyword(null, "equality-partition"), RT.keyword(null, "equality-partition") });
    const__54 = (Keyword)RT.keyword(null, "method-builders");
    const__55 = (Var)RT.var("clojure.core", "intern");
    const__56 = (Var)RT.var("clojure.core", "*ns*");
    const__57 = (Var)RT.var("clojure.core", "with-meta");
    const__58 = (AFn)((IObj)Symbol.intern(null, "equality-partition")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Implementation detail. Subject to change.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })) }));
    const__59 = (AFn)RT.map(new Object[] { RT.keyword(null, "added"), "1.3", RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "equality-partition")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Implementation detail. Subject to change.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "doc"), "Implementation detail. Subject to change." });
    const__60 = (Keyword)RT.keyword(null, "protocol");
    const__61 = (Var)RT.var("clojure.core", "-reset-methods");
    const__62 = (AFn)((IObj)Symbol.intern(null, "EqualityPartition")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "added"), "1.3" }));
    const__63 = RT.classForName("clojure.data.Diff");
    const__64 = (Var)RT.var("clojure.data", "Diff");
    const__65 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "diff-similar")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Implementation detail. Subject to change.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "a"), Symbol.intern(null, "b")) })) })) }));
    const__67 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "clojure.data.Diff"), RT.keyword(null, "on-interface"), RT.classForName("clojure.data.Diff"), RT.keyword(null, "doc"), "Implementation detail. Subject to change." });
    const__68 = (AFn)RT.map(new Object[] { RT.keyword(null, "diff-similar"), RT.map(new Object[] { RT.keyword(null, "added"), "1.3", RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "diff-similar")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Implementation detail. Subject to change.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "a"), Symbol.intern(null, "b")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "a"), Symbol.intern(null, "b")) })), RT.keyword(null, "doc"), "Implementation detail. Subject to change." }) });
    const__69 = (Keyword)RT.keyword(null, "diff-similar");
    const__70 = (AFn)RT.map(new Object[] { RT.keyword(null, "diff-similar"), RT.keyword(null, "diff-similar") });
    const__71 = (AFn)((IObj)Symbol.intern(null, "diff-similar")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Implementation detail. Subject to change.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "a"), Symbol.intern(null, "b")) })) }));
    const__72 = (AFn)RT.map(new Object[] { RT.keyword(null, "added"), "1.3", RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "diff-similar")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Implementation detail. Subject to change.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "a"), Symbol.intern(null, "b")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "a"), Symbol.intern(null, "b")) })), RT.keyword(null, "doc"), "Implementation detail. Subject to change." });
    const__73 = (AFn)((IObj)Symbol.intern(null, "Diff")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "added"), "1.3" }));
    const__74 = (Var)RT.var("clojure.core", "extend");
    const__75 = RT.classForName("java.lang.Object");
    const__76 = RT.classForName("java.util.Set");
    const__77 = RT.classForName("java.util.List");
    const__78 = RT.classForName("java.util.Map");
    const__79 = (Var)RT.var("clojure.data", "as-set-value");
    const__82 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })), RT.keyword(null, "line"), Integer.valueOf(98), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/data.clj" });
    const__86 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "a"), Symbol.intern(null, "b")) })), RT.keyword(null, "doc"), "Recursively compares a and b, returning a tuple of\n  [things-only-in-a things-only-in-b things-in-both].\n  Comparison rules:\n\n  * For equal a and b, return [nil nil a].\n  * Maps are subdiffed where keys match and values differ.\n  * Sets are never subdiffed.\n  * All sequential things are treated as associative collections\n    by their indexes, with results returned as vectors.\n  * Everything else (including strings!) is treated as\n    an atom and compared for equality.", RT.keyword(null, "added"), "1.3", RT.keyword(null, "line"), Integer.valueOf(120), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/data.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("clojure.data__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
