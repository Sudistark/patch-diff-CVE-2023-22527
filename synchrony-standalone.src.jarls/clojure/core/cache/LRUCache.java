package clojure.core.cache;

import clojure.lang.Associative;
import clojure.lang.Counted;
import clojure.lang.IFn;
import clojure.lang.ILookup;
import clojure.lang.IMapEntry;
import clojure.lang.IPersistentCollection;
import clojure.lang.IPersistentMap;
import clojure.lang.IPersistentVector;
import clojure.lang.ISeq;
import clojure.lang.IType;
import clojure.lang.Numbers;
import clojure.lang.RT;
import clojure.lang.Seqable;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Util;
import clojure.lang.Var;
import java.util.Iterator;

public final class LRUCache implements Associative, CacheProtocol, ILookup, IPersistentCollection, Counted, IPersistentMap, Seqable, Iterable, IType {
  public final Object cache;
  
  public final Object lru;
  
  public final Object tick;
  
  public final Object limit;
  
  private static Class __cached_class__0;
  
  private static Class __cached_class__1;
  
  private static Class __cached_class__2;
  
  private static Class __cached_class__3;
  
  private static Class __cached_class__4;
  
  private static Class __cached_class__5;
  
  private static Class __cached_class__6;
  
  private static Class __cached_class__7;
  
  private static Class __cached_class__8;
  
  private static Class __cached_class__9;
  
  public static final Var const__0 = (Var)RT.var("clojure.core.cache", "has?");
  
  public static final Var const__1 = (Var)RT.var("clojure.core.cache", "lookup");
  
  public static final Var const__2 = (Var)RT.var("clojure.core", "str");
  
  public static final Object const__3 = Character.valueOf(',');
  
  public static final Object const__4 = Character.valueOf(' ');
  
  public static final Var const__5 = (Var)RT.var("clojure.core.cache", "seed");
  
  public static final Var const__6 = (Var)RT.var("clojure.core", "conj");
  
  public static final Var const__7 = (Var)RT.var("clojure.core", "empty");
  
  public static final Var const__10 = (Var)RT.var("clojure.core", "contains?");
  
  public static final Var const__12 = (Var)RT.var("clojure.core", "assoc");
  
  public static final Var const__15 = (Var)RT.var("clojure.core", "first");
  
  public static final Var const__16 = (Var)RT.var("clojure.core", "peek");
  
  public static final Var const__17 = (Var)RT.var("clojure.core", "dissoc");
  
  public static final Var const__18 = (Var)RT.var("clojure.core.cache", "build-leastness-queue");
  
  public static final Object const__19 = Long.valueOf(0L);
  
  public static final Var const__20 = (Var)RT.var("clojure.core.cache", "miss"), const__21 = (Var)RT.var("clojure.core.cache", "evict"), const__22 = (Var)RT.var("clojure.core", "seq");
  
  public LRUCache(Object paramObject1, Object paramObject2, Object paramObject3, Object paramObject4) { this.cache = paramObject1;
    this.lru = paramObject2;
    this.tick = paramObject3;
    this.limit = paramObject4; }
  
  public static IPersistentVector getBasis() { return Tuple.create(Symbol.intern(null, "cache"), Symbol.intern(null, "lru"), Symbol.intern(null, "tick"), Symbol.intern(null, "limit")); }
  
  public Iterator iterator() { return (Iterator)((Iterable)this.cache).iterator(); }
  
  public ISeq seq() { this = null;
    return (ISeq)((IFn)const__22.getRawRoot()).invoke(this.cache); }
  
  public IPersistentMap without(Object k__1491__auto__) { if (Util.classOf(this) != __cached_class__9)
      if (!(this instanceof CacheProtocol)) {
        __cached_class__9 = Util.classOf(this);
      } else {
        k__1491__auto__ = null;
        return (IPersistentMap)((CacheProtocol)this).evict(k__1491__auto__);
      }  
    k__1491__auto__ = null;
    this = null; }
  
  public IPersistentMap assoc(Object k__1491__auto__, Object v__1492__auto__) { if (Util.classOf(this) != __cached_class__8)
      if (!(this instanceof CacheProtocol)) {
        __cached_class__8 = Util.classOf(this);
      } else {
        k__1491__auto__ = null;
        v__1492__auto__ = null;
        return (IPersistentMap)((CacheProtocol)this).miss(k__1491__auto__, v__1492__auto__);
      }  
    k__1491__auto__ = null;
    v__1492__auto__ = null;
    this = null; }
  
  public int count() { return RT.count(this.cache); }
  
  public Object seed(Object base) { base = null;
    return new LRUCache(base, ((IFn)const__18.getRawRoot()).invoke(base, this.limit, const__19), const__19, this.limit); }
  
  public Object evict(Object key) {
    if (((IFn)const__10.getRawRoot()).invoke(this.cache, key) != null) {
      if (((IFn)const__10.getRawRoot()).invoke(this.cache, key) != Boolean.FALSE)
        key = null; 
    } else {
      ((IFn)const__10.getRawRoot()).invoke(this.cache, key);
    } 
    return this;
  }
  
  public Object miss(Object item, Object result) { // Byte code:
    //   0: aload_0
    //   1: getfield tick : Ljava/lang/Object;
    //   4: invokestatic inc : (Ljava/lang/Object;)Ljava/lang/Number;
    //   7: astore_3
    //   8: aload_0
    //   9: getfield lru : Ljava/lang/Object;
    //   12: invokestatic count : (Ljava/lang/Object;)I
    //   15: i2l
    //   16: aload_0
    //   17: getfield limit : Ljava/lang/Object;
    //   20: invokestatic gte : (JLjava/lang/Object;)Z
    //   23: ifeq -> 205
    //   26: getstatic clojure/core/cache/LRUCache.const__10 : Lclojure/lang/Var;
    //   29: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   32: checkcast clojure/lang/IFn
    //   35: aload_0
    //   36: getfield lru : Ljava/lang/Object;
    //   39: aload_1
    //   40: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   45: dup
    //   46: ifnull -> 59
    //   49: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   52: if_acmpeq -> 60
    //   55: aload_1
    //   56: goto -> 92
    //   59: pop
    //   60: getstatic clojure/core/cache/LRUCache.const__15 : Lclojure/lang/Var;
    //   63: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   66: checkcast clojure/lang/IFn
    //   69: getstatic clojure/core/cache/LRUCache.const__16 : Lclojure/lang/Var;
    //   72: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   75: checkcast clojure/lang/IFn
    //   78: aload_0
    //   79: getfield lru : Ljava/lang/Object;
    //   82: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   87: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   92: astore #4
    //   94: getstatic clojure/core/cache/LRUCache.const__12 : Lclojure/lang/Var;
    //   97: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   100: checkcast clojure/lang/IFn
    //   103: getstatic clojure/core/cache/LRUCache.const__17 : Lclojure/lang/Var;
    //   106: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   109: checkcast clojure/lang/IFn
    //   112: aload_0
    //   113: getfield cache : Ljava/lang/Object;
    //   116: aload #4
    //   118: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   123: aload_1
    //   124: aload_2
    //   125: aconst_null
    //   126: astore_2
    //   127: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   132: astore #5
    //   134: getstatic clojure/core/cache/LRUCache.const__12 : Lclojure/lang/Var;
    //   137: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   140: checkcast clojure/lang/IFn
    //   143: getstatic clojure/core/cache/LRUCache.const__17 : Lclojure/lang/Var;
    //   146: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   149: checkcast clojure/lang/IFn
    //   152: aload_0
    //   153: getfield lru : Ljava/lang/Object;
    //   156: aload #4
    //   158: aconst_null
    //   159: astore #4
    //   161: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   166: aload_1
    //   167: aconst_null
    //   168: astore_1
    //   169: aload_3
    //   170: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   175: astore #6
    //   177: new clojure/core/cache/LRUCache
    //   180: dup
    //   181: aload #5
    //   183: aconst_null
    //   184: astore #5
    //   186: aload #6
    //   188: aconst_null
    //   189: astore #6
    //   191: aload_3
    //   192: aconst_null
    //   193: astore_3
    //   194: aload_0
    //   195: getfield limit : Ljava/lang/Object;
    //   198: invokespecial <init> : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
    //   201: goto -> 263
    //   204: athrow
    //   205: new clojure/core/cache/LRUCache
    //   208: dup
    //   209: getstatic clojure/core/cache/LRUCache.const__12 : Lclojure/lang/Var;
    //   212: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   215: checkcast clojure/lang/IFn
    //   218: aload_0
    //   219: getfield cache : Ljava/lang/Object;
    //   222: aload_1
    //   223: aload_2
    //   224: aconst_null
    //   225: astore_2
    //   226: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   231: getstatic clojure/core/cache/LRUCache.const__12 : Lclojure/lang/Var;
    //   234: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   237: checkcast clojure/lang/IFn
    //   240: aload_0
    //   241: getfield lru : Ljava/lang/Object;
    //   244: aload_1
    //   245: aconst_null
    //   246: astore_1
    //   247: aload_3
    //   248: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   253: aload_3
    //   254: aconst_null
    //   255: astore_3
    //   256: aload_0
    //   257: getfield limit : Ljava/lang/Object;
    //   260: invokespecial <init> : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
    //   263: areturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #214	-> 0
    //   #231	-> 4
    //   #232	-> 8
    //   #232	-> 12
    //   #232	-> 20
    //   #233	-> 26
    //   #233	-> 32
    //   #233	-> 40
    //   #235	-> 66
    //   #235	-> 75
    //   #235	-> 82
    //   #235	-> 87
    //   #236	-> 100
    //   #236	-> 109
    //   #236	-> 118
    //   #236	-> 127
    //   #237	-> 140
    //   #237	-> 149
    //   #237	-> 161
    //   #237	-> 170
    //   #239	-> 215
    //   #239	-> 226
    //   #240	-> 237
    //   #240	-> 248
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   94	107	4	k	Ljava/lang/Object;
    //   134	67	5	c	Ljava/lang/Object;
    //   177	24	6	l	Ljava/lang/Object;
    //   8	255	3	tick_PLUS_	Ljava/lang/Object;
    //   0	263	0	this	Lclojure/core/cache/LRUCache;
    //   0	263	1	item	Ljava/lang/Object;
    //   0	263	2	result	Ljava/lang/Object; }
  
  public Object hit(Object item) {
    Object tick_PLUS_ = Numbers.inc(this.tick);
    if (((IFn)const__10.getRawRoot()).invoke(this.cache, item) != null) {
      if (((IFn)const__10.getRawRoot()).invoke(this.cache, item) != Boolean.FALSE)
        item = null; 
    } else {
      ((IFn)const__10.getRawRoot()).invoke(this.cache, item);
    } 
    tick_PLUS_ = null;
    return new LRUCache(this.cache, this.lru, tick_PLUS_, this.limit);
  }
  
  public Object has_QMARK_(Object item) { item = null;
    this = null;
    return ((IFn)const__10.getRawRoot()).invoke(this.cache, item); }
  
  public Object lookup(Object item, Object not_found) { item = null;
    not_found = null;
    this = null;
    return RT.get(this.cache, item, not_found); }
  
  public Object lookup(Object item) { item = null;
    this = null;
    return RT.get(this.cache, item); }
  
  public boolean equiv(Object other__1494__auto__) { other__1494__auto__ = null;
    return Util.equiv(other__1494__auto__, this.cache); }
  
  public IPersistentCollection empty() { if (Util.classOf(this) != __cached_class__7)
      if (!(this instanceof CacheProtocol)) {
        __cached_class__7 = Util.classOf(this);
      } else {
        return (IPersistentCollection)((CacheProtocol)this).seed(((IFn)const__7.getRawRoot()).invoke(this.cache));
      }  
    this = null; }
  
  public IPersistentCollection cons(Object elem__1493__auto__) { if (Util.classOf(this) != __cached_class__6)
      if (!(this instanceof CacheProtocol)) {
        __cached_class__6 = Util.classOf(this);
      } else {
        elem__1493__auto__ = null;
        return (IPersistentCollection)((CacheProtocol)this).seed(((IFn)const__6.getRawRoot()).invoke(this.cache, elem__1493__auto__));
      }  
    elem__1493__auto__ = null;
    this = null; }
  
  public Object valAt(Object key__1488__auto__, Object not_found__1489__auto__) { // Byte code:
    //   0: aload_0
    //   1: dup
    //   2: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   5: getstatic clojure/core/cache/LRUCache.__cached_class__4 : Ljava/lang/Class;
    //   8: if_acmpeq -> 25
    //   11: dup
    //   12: instanceof clojure/core/cache/CacheProtocol
    //   15: ifne -> 41
    //   18: dup
    //   19: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   22: putstatic clojure/core/cache/LRUCache.__cached_class__4 : Ljava/lang/Class;
    //   25: getstatic clojure/core/cache/LRUCache.const__0 : Lclojure/lang/Var;
    //   28: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   31: swap
    //   32: aload_1
    //   33: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   38: goto -> 50
    //   41: checkcast clojure/core/cache/CacheProtocol
    //   44: aload_1
    //   45: invokeinterface has_QMARK_ : (Ljava/lang/Object;)Ljava/lang/Object;
    //   50: dup
    //   51: ifnull -> 119
    //   54: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   57: if_acmpeq -> 120
    //   60: aload_0
    //   61: dup
    //   62: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   65: getstatic clojure/core/cache/LRUCache.__cached_class__5 : Ljava/lang/Class;
    //   68: if_acmpeq -> 85
    //   71: dup
    //   72: instanceof clojure/core/cache/CacheProtocol
    //   75: ifne -> 105
    //   78: dup
    //   79: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   82: putstatic clojure/core/cache/LRUCache.__cached_class__5 : Ljava/lang/Class;
    //   85: getstatic clojure/core/cache/LRUCache.const__1 : Lclojure/lang/Var;
    //   88: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   91: swap
    //   92: aload_1
    //   93: aconst_null
    //   94: astore_1
    //   95: aconst_null
    //   96: astore_0
    //   97: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   102: goto -> 116
    //   105: checkcast clojure/core/cache/CacheProtocol
    //   108: aload_1
    //   109: aconst_null
    //   110: astore_1
    //   111: invokeinterface lookup : (Ljava/lang/Object;)Ljava/lang/Object;
    //   116: goto -> 123
    //   119: pop
    //   120: aload_2
    //   121: aconst_null
    //   122: astore_2
    //   123: areturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #214	-> 0
    //   #214	-> 0
    //   #214	-> 0
    //   #214	-> 33
    //   #214	-> 60
    //   #214	-> 95
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   0	123	0	this	Lclojure/core/cache/LRUCache;
    //   0	123	1	key__1488__auto__	Ljava/lang/Object;
    //   0	123	2	not_found__1489__auto__	Ljava/lang/Object; }
  
  public Object valAt(Object key__1488__auto__) { if (Util.classOf(this) != __cached_class__3)
      if (!(this instanceof CacheProtocol)) {
        __cached_class__3 = Util.classOf(this);
      } else {
        key__1488__auto__ = null;
        return ((CacheProtocol)this).lookup(key__1488__auto__);
      }  
    key__1488__auto__ = null;
    this = null; }
  
  public String toString() { this = null;
    return (String)((IFn)const__2.getRawRoot()).invoke(this.cache, const__3, const__4, this.lru, const__3, const__4, this.tick, const__3, const__4, this.limit); }
  
  public IMapEntry entryAt(Object k__1491__auto__) { // Byte code:
    //   0: aload_0
    //   1: dup
    //   2: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   5: getstatic clojure/core/cache/LRUCache.__cached_class__1 : Ljava/lang/Class;
    //   8: if_acmpeq -> 25
    //   11: dup
    //   12: instanceof clojure/core/cache/CacheProtocol
    //   15: ifne -> 41
    //   18: dup
    //   19: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   22: putstatic clojure/core/cache/LRUCache.__cached_class__1 : Ljava/lang/Class;
    //   25: getstatic clojure/core/cache/LRUCache.const__0 : Lclojure/lang/Var;
    //   28: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   31: swap
    //   32: aload_1
    //   33: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   38: goto -> 50
    //   41: checkcast clojure/core/cache/CacheProtocol
    //   44: aload_1
    //   45: invokeinterface has_QMARK_ : (Ljava/lang/Object;)Ljava/lang/Object;
    //   50: dup
    //   51: ifnull -> 125
    //   54: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   57: if_acmpeq -> 126
    //   60: new clojure/lang/MapEntry
    //   63: dup
    //   64: aload_1
    //   65: aload_0
    //   66: dup
    //   67: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   70: getstatic clojure/core/cache/LRUCache.__cached_class__2 : Ljava/lang/Class;
    //   73: if_acmpeq -> 90
    //   76: dup
    //   77: instanceof clojure/core/cache/CacheProtocol
    //   80: ifne -> 108
    //   83: dup
    //   84: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   87: putstatic clojure/core/cache/LRUCache.__cached_class__2 : Ljava/lang/Class;
    //   90: getstatic clojure/core/cache/LRUCache.const__1 : Lclojure/lang/Var;
    //   93: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   96: swap
    //   97: aload_1
    //   98: aconst_null
    //   99: astore_1
    //   100: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   105: goto -> 119
    //   108: checkcast clojure/core/cache/CacheProtocol
    //   111: aload_1
    //   112: aconst_null
    //   113: astore_1
    //   114: invokeinterface lookup : (Ljava/lang/Object;)Ljava/lang/Object;
    //   119: invokespecial <init> : (Ljava/lang/Object;Ljava/lang/Object;)V
    //   122: goto -> 127
    //   125: pop
    //   126: aconst_null
    //   127: checkcast clojure/lang/IMapEntry
    //   130: areturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #214	-> 0
    //   #214	-> 0
    //   #214	-> 0
    //   #214	-> 33
    //   #214	-> 65
    //   #214	-> 100
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   0	130	0	this	Lclojure/core/cache/LRUCache;
    //   0	130	1	k__1491__auto__	Ljava/lang/Object; }
  
  public boolean containsKey(Object k__1491__auto__) { if (Util.classOf(this) != __cached_class__0)
      if (!(this instanceof CacheProtocol)) {
        __cached_class__0 = Util.classOf(this);
      } else {
        k__1491__auto__ = null;
        return ((Boolean)((CacheProtocol)this).has_QMARK_(k__1491__auto__)).booleanValue();
      }  
    k__1491__auto__ = null;
    this = null; }
}
