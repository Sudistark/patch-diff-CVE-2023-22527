package clojure.core.reducers;

import clojure.core.protocols.CollReduce;
import clojure.lang.Counted;
import clojure.lang.IFn;
import clojure.lang.IPersistentVector;
import clojure.lang.ISeq;
import clojure.lang.IType;
import clojure.lang.RT;
import clojure.lang.Seqable;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Util;
import clojure.lang.Var;

public final class Cat implements CollFold, Counted, Seqable, CollReduce, IType {
  public final Object cnt;
  
  public final Object left;
  
  public final Object right;
  
  private static Class __cached_class__0;
  
  private static Class __cached_class__1;
  
  private static Class __cached_class__2;
  
  public static final Var const__0 = (Var)RT.var("clojure.core", "concat"), const__1 = (Var)RT.var("clojure.core", "seq"), const__2 = (Var)RT.var("clojure.core.protocols", "coll-reduce"), const__3 = (Var)RT.var("clojure.core.reducers", "fjinvoke");
  
  public Cat(Object paramObject1, Object paramObject2, Object paramObject3) { this.cnt = paramObject1;
    this.left = paramObject2;
    this.right = paramObject3; }
  
  public static IPersistentVector getBasis() { return Tuple.create(Symbol.intern(null, "cnt"), Symbol.intern(null, "left"), Symbol.intern(null, "right")); }
  
  public Object coll_fold(Object n, Object combinef, Object reducef) { combinef = null;
    reducef = null;
    n = null;
    this = null;
    return ((IFn)const__3.getRawRoot()).invoke(new fn__43049(this.right, combinef, this.left, reducef, n)); }
  
  public Object coll_reduce(Object f1, Object init) {
    if (Util.classOf(this.right) != __cached_class__2)
      if (!(this.right instanceof CollReduce)) {
        __cached_class__2 = Util.classOf(this.right);
      } else {
        if (Util.classOf(this.left) != __cached_class__1)
          if (!(this.left instanceof CollReduce)) {
            __cached_class__1 = Util.classOf(this.left);
          } else {
            f1 = null;
            init = null;
          }  
        f1 = null;
        init = null;
      }  
    if (Util.classOf(this.left) != __cached_class__1)
      if (!(this.left instanceof CollReduce)) {
        __cached_class__1 = Util.classOf(this.left);
      } else {
        f1 = null;
        init = null;
        this = null;
      }  
    f1 = null;
    init = null;
  }
  
  public Object coll_reduce(Object f1) { if (Util.classOf(this) != __cached_class__0)
      if (!(this instanceof CollReduce)) {
        __cached_class__0 = Util.classOf(this);
      } else {
        f1 = null;
        return ((CollReduce)this).coll_reduce(f1, ((IFn)f1).invoke());
      }  
    f1 = null;
    this = null; }
  
  public ISeq seq() { this = null;
    return (ISeq)((IFn)const__0.getRawRoot()).invoke(((IFn)const__1.getRawRoot()).invoke(this.left), ((IFn)const__1.getRawRoot()).invoke(this.right)); }
  
  public int count() { return ((Number)this.cnt).intValue(); }
}
