package clojure.core;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentArrayMap;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class match__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__11;
  
  public static final Var const__12;
  
  public static final Var const__13;
  
  public static final AFn const__15;
  
  public static final Var const__16;
  
  public static final AFn const__18;
  
  public static final Var const__19;
  
  public static final AFn const__21;
  
  public static final Var const__22;
  
  public static final AFn const__24;
  
  public static final Var const__25;
  
  public static final AFn const__27;
  
  public static final Var const__28;
  
  public static final AFn const__30;
  
  public static final Keyword const__31;
  
  public static final Var const__32;
  
  public static final AFn const__34;
  
  public static final Var const__35;
  
  public static final AFn const__37;
  
  public static final Var const__38;
  
  public static final AFn const__40;
  
  public static final Var const__41;
  
  public static final AFn const__45;
  
  public static final Var const__46;
  
  public static final AFn const__49;
  
  public static final Var const__50;
  
  public static final AFn const__52;
  
  public static final Var const__53;
  
  public static final AFn const__55;
  
  public static final Var const__56;
  
  public static final AFn const__59;
  
  public static final Var const__60;
  
  public static final AFn const__63;
  
  public static final Var const__64;
  
  public static final Object const__65;
  
  public static final Var const__66;
  
  public static final Keyword const__67;
  
  public static final Var const__68;
  
  public static final AFn const__71;
  
  public static final Var const__72;
  
  public static final AFn const__75;
  
  public static final Var const__76;
  
  public static final AFn const__79;
  
  public static final Var const__80;
  
  public static final Keyword const__81;
  
  public static final Var const__82;
  
  public static final Var const__83;
  
  public static final AFn const__86;
  
  public static final Var const__87;
  
  public static final Var const__88;
  
  public static final Var const__89;
  
  public static final Var const__90;
  
  public static final Var const__91;
  
  public static final Var const__92;
  
  public static final Var const__93;
  
  public static final Var const__94;
  
  public static final Object const__95;
  
  public static final Var const__96;
  
  public static final Keyword const__97;
  
  public static final Keyword const__98;
  
  public static final Keyword const__99;
  
  public static final Var const__100;
  
  public static final AFn const__103;
  
  public static final Var const__104;
  
  public static final AFn const__107;
  
  public static final Var const__108;
  
  public static final Var const__109;
  
  public static final AFn const__111;
  
  public static final Var const__112;
  
  public static final AFn const__114;
  
  public static final Var const__115;
  
  public static final AFn const__118;
  
  public static final Var const__119;
  
  public static final AFn const__122;
  
  public static final Var const__123;
  
  public static final AFn const__126;
  
  public static final Var const__127;
  
  public static final AFn const__130;
  
  public static final Var const__131;
  
  public static final AFn const__134;
  
  public static final Keyword const__135;
  
  public static final Keyword const__136;
  
  public static final Var const__137;
  
  public static final AFn const__140;
  
  public static final Var const__141;
  
  public static final AFn const__144;
  
  public static final Var const__145;
  
  public static final AFn const__147;
  
  public static final Var const__148;
  
  public static final AFn const__151;
  
  public static final Var const__152;
  
  public static final AFn const__155;
  
  public static final Var const__156;
  
  public static final AFn const__159;
  
  public static final Var const__160;
  
  public static final AFn const__163;
  
  public static final Var const__164;
  
  public static final AFn const__167;
  
  public static final Var const__168;
  
  public static final AFn const__171;
  
  public static final Var const__172;
  
  public static final AFn const__175;
  
  public static final Var const__176;
  
  public static final AFn const__179;
  
  public static final Var const__180;
  
  public static final AFn const__183;
  
  public static final Var const__184;
  
  public static final AFn const__187;
  
  public static final Var const__188;
  
  public static final AFn const__191;
  
  public static final Var const__192;
  
  public static final AFn const__195;
  
  public static final Var const__196;
  
  public static final AFn const__199;
  
  public static final Var const__200;
  
  public static final AFn const__203;
  
  public static final Var const__204;
  
  public static final AFn const__207;
  
  public static final Var const__208;
  
  public static final AFn const__211;
  
  public static final Var const__212;
  
  public static final AFn const__215;
  
  public static final Var const__216;
  
  public static final AFn const__219;
  
  public static final Var const__220;
  
  public static final AFn const__223;
  
  public static final Var const__224;
  
  public static final AFn const__227;
  
  public static final Var const__228;
  
  public static final AFn const__231;
  
  public static final Var const__232;
  
  public static final AFn const__235;
  
  public static final Var const__236;
  
  public static final AFn const__239;
  
  public static final Var const__240;
  
  public static final AFn const__243;
  
  public static final Var const__244;
  
  public static final AFn const__246;
  
  public static final Var const__247;
  
  public static final AFn const__250;
  
  public static final Var const__251;
  
  public static final AFn const__254;
  
  public static final Var const__255;
  
  public static final AFn const__258;
  
  public static final Var const__259;
  
  public static final AFn const__262;
  
  public static final Var const__263;
  
  public static final AFn const__265;
  
  public static final Var const__266;
  
  public static final AFn const__268;
  
  public static final Var const__269;
  
  public static final AFn const__272;
  
  public static final Var const__273;
  
  public static final AFn const__276;
  
  public static final Var const__277;
  
  public static final AFn const__280;
  
  public static final Var const__281;
  
  public static final AFn const__283;
  
  public static final Var const__284;
  
  public static final AFn const__287;
  
  public static final Var const__288;
  
  public static final AFn const__291;
  
  public static final Var const__292;
  
  public static final AFn const__295;
  
  public static final Var const__296;
  
  public static final AFn const__299;
  
  public static final Var const__300;
  
  public static final AFn const__303;
  
  public static final Var const__304;
  
  public static final AFn const__307;
  
  public static final Var const__308;
  
  public static final AFn const__311;
  
  public static final Var const__312;
  
  public static final AFn const__315;
  
  public static final Var const__316;
  
  public static final AFn const__319;
  
  public static final Var const__320;
  
  public static final AFn const__323;
  
  public static final Var const__324;
  
  public static final AFn const__327;
  
  public static final Var const__328;
  
  public static final AFn const__331;
  
  public static final Var const__332;
  
  public static final AFn const__335;
  
  public static final Var const__336;
  
  public static final AFn const__339;
  
  public static final Var const__340;
  
  public static final AFn const__343;
  
  public static final AFn const__346;
  
  public static final AFn const__349;
  
  public static final AFn const__352;
  
  public static final Var const__353;
  
  public static final AFn const__356;
  
  public static final AFn const__359;
  
  public static final AFn const__362;
  
  public static final Var const__363;
  
  public static final Object const__364;
  
  public static final Var const__365;
  
  public static final AFn const__368;
  
  public static final AFn const__371;
  
  public static final Object const__372;
  
  public static final Var const__373;
  
  public static final AFn const__375;
  
  public static final Var const__376;
  
  public static final AFn const__378;
  
  public static final Var const__379;
  
  public static final AFn const__381;
  
  public static final Var const__382;
  
  public static final AFn const__385;
  
  public static final Var const__386;
  
  public static final AFn const__389;
  
  public static final Var const__390;
  
  public static final AFn const__393;
  
  public static final Var const__394;
  
  public static final AFn const__397;
  
  public static final Var const__398;
  
  public static final AFn const__401;
  
  public static final Var const__402;
  
  public static final AFn const__405;
  
  public static final Object const__407;
  
  public static final AFn const__410;
  
  public static final AFn const__413;
  
  public static final Var const__414;
  
  public static final AFn const__417;
  
  public static final AFn const__420;
  
  public static final Object const__421;
  
  public static final Var const__422;
  
  public static final AFn const__425;
  
  public static final Var const__426;
  
  public static final AFn const__429;
  
  public static final Var const__430;
  
  public static final AFn const__433;
  
  public static final Object const__434;
  
  public static final Var const__435;
  
  public static final AFn const__437;
  
  public static final Var const__438;
  
  public static final AFn const__440;
  
  public static final Var const__441;
  
  public static final AFn const__444;
  
  public static final Var const__445;
  
  public static final AFn const__448;
  
  public static final Var const__449;
  
  public static final AFn const__452;
  
  public static final Var const__453;
  
  public static final AFn const__456;
  
  public static final Var const__457;
  
  public static final AFn const__460;
  
  public static final Var const__461;
  
  public static final AFn const__464;
  
  public static final Var const__465;
  
  public static final AFn const__468;
  
  public static final Var const__469;
  
  public static final AFn const__472;
  
  public static final Var const__473;
  
  public static final AFn const__476;
  
  public static final Var const__477;
  
  public static final AFn const__480;
  
  public static final AFn const__483;
  
  public static final Object const__484;
  
  public static final Var const__485;
  
  public static final AFn const__487;
  
  public static final Var const__488;
  
  public static final AFn const__491;
  
  public static final Var const__492;
  
  public static final AFn const__495;
  
  public static final Var const__496;
  
  public static final AFn const__499;
  
  public static final Var const__500;
  
  public static final AFn const__503;
  
  public static final Var const__504;
  
  public static final AFn const__507;
  
  public static final Var const__508;
  
  public static final AFn const__511;
  
  public static final Var const__512;
  
  public static final AFn const__515;
  
  public static final Var const__516;
  
  public static final AFn const__519;
  
  public static final AFn const__522;
  
  public static final Object const__523;
  
  public static final Var const__524;
  
  public static final AFn const__527;
  
  public static final Var const__528;
  
  public static final AFn const__531;
  
  public static final Var const__532;
  
  public static final AFn const__535;
  
  public static final Var const__536;
  
  public static final AFn const__539;
  
  public static final Object const__540;
  
  public static final Var const__541;
  
  public static final AFn const__543;
  
  public static final Var const__544;
  
  public static final AFn const__547;
  
  public static final AFn const__550;
  
  public static final AFn const__553;
  
  public static final Object const__554;
  
  public static final Var const__555;
  
  public static final AFn const__557;
  
  public static final Var const__558;
  
  public static final AFn const__561;
  
  public static final Var const__562;
  
  public static final AFn const__565;
  
  public static final Var const__566;
  
  public static final AFn const__569;
  
  public static final AFn const__572;
  
  public static final Object const__573;
  
  public static final Var const__574;
  
  public static final AFn const__576;
  
  public static final Var const__577;
  
  public static final AFn const__580;
  
  public static final Var const__581;
  
  public static final AFn const__583;
  
  public static final Var const__584;
  
  public static final AFn const__587;
  
  public static final Var const__588;
  
  public static final AFn const__591;
  
  public static final AFn const__594;
  
  public static final Object const__595;
  
  public static final AFn const__597;
  
  public static final AFn const__599;
  
  public static final AFn const__602;
  
  public static final Keyword const__603;
  
  public static final AFn const__604;
  
  public static final AFn const__606;
  
  public static final AFn const__607;
  
  public static final AFn const__609;
  
  public static final Var const__610;
  
  public static final Keyword const__611;
  
  public static final Object const__612;
  
  public static final Object const__613;
  
  public static final Object const__614;
  
  public static final Object const__615;
  
  public static final Var const__616;
  
  public static final AFn const__619;
  
  public static final Var const__620;
  
  public static final Keyword const__621;
  
  public static final Var const__622;
  
  public static final AFn const__624;
  
  public static final AFn const__626;
  
  public static final Var const__627;
  
  public static final AFn const__629;
  
  public static final AFn const__631;
  
  public static final AFn const__633;
  
  public static final AFn const__635;
  
  public static final Keyword const__636;
  
  public static final AFn const__638;
  
  public static final AFn const__640;
  
  public static final AFn const__642;
  
  public static final AFn const__644;
  
  public static final AFn const__646;
  
  public static final AFn const__647;
  
  public static final AFn const__648;
  
  public static final AFn const__650;
  
  public static final Var const__651;
  
  public static final AFn const__655;
  
  public static final Var const__656;
  
  public static final AFn const__659;
  
  public static final Var const__660;
  
  public static final AFn const__663;
  
  public static final Var const__664;
  
  public static final AFn const__667;
  
  public static final Var const__668;
  
  public static final AFn const__671;
  
  public static final Var const__672;
  
  public static final AFn const__675;
  
  public static final Var const__676;
  
  public static final AFn const__679;
  
  public static final Var const__680;
  
  public static final AFn const__683;
  
  public static final Var const__684;
  
  public static final AFn const__687;
  
  public static final Var const__688;
  
  public static final AFn const__691;
  
  public static final Var const__692;
  
  public static final AFn const__695;
  
  public static final Var const__696;
  
  public static final AFn const__699;
  
  public static final Var const__700;
  
  public static final AFn const__703;
  
  public static final Var const__704;
  
  public static final AFn const__707;
  
  public static final Var const__708;
  
  public static final AFn const__711;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new match.fn__35810());
    const__3.setDynamic(true).setMeta((IPersistentMap)const__11);
    const__3.setDynamic(true)













































      
      .bindRoot(((IFn)const__12.getRawRoot()).invoke(Boolean.TRUE));
    const__13.setDynamic(true).setMeta((IPersistentMap)const__15);
    const__13.setDynamic(true).bindRoot(Boolean.FALSE);
    const__16.setDynamic(true).setMeta((IPersistentMap)const__18);
    const__19.setDynamic(true).setMeta((IPersistentMap)const__21);
    const__19.setDynamic(true).bindRoot(null);
    const__22.setDynamic(true).setMeta((IPersistentMap)const__24);
    const__25.setDynamic(true).setMeta((IPersistentMap)const__27);
    const__25.setDynamic(true).bindRoot(Boolean.FALSE);
    const__28.setDynamic(true).setMeta((IPersistentMap)const__30);
    const__28.setDynamic(true).bindRoot(const__31);
    const__32.setDynamic(true).setMeta((IPersistentMap)const__34);
    const__32.setDynamic(true).bindRoot(Boolean.FALSE);
    const__35.setDynamic(true).setMeta((IPersistentMap)const__37);
    const__35.setDynamic(true).bindRoot(Boolean.FALSE);
    const__38.setMeta((IPersistentMap)const__40);
    const__38.bindRoot(new Exception((String)"Could not find match."));
    const__41.setMeta((IPersistentMap)const__45);
    const__41.bindRoot(new match.backtrack_expr());
    const__46.setMeta((IPersistentMap)const__49);
    const__46.bindRoot(new match.backtrack_sym());
    const__50.setDynamic(true).setMeta((IPersistentMap)const__52);
    const__50.setDynamic(true).bindRoot(PersistentList.EMPTY);
    const__53.setDynamic(true).setMeta((IPersistentMap)const__55);
    const__53.setDynamic(true).bindRoot(Boolean.TRUE);
    const__56.setMeta((IPersistentMap)const__59);
    const__56.bindRoot(new match.warn());
    const__60.setMeta((IPersistentMap)const__63);
    const__60.bindRoot(new match.get_loop_locals());
    const__68.setMeta((IPersistentMap)const__71);
    const__68.bindRoot(new match.val_at_STAR_());
    const__72.setMeta((IPersistentMap)const__75);
    const__72.bindRoot(new match.val_at_expr());
    const__76.setMeta((IPersistentMap)const__79);
    const__76.bindRoot(new match.vector_type());
    const__83.setMeta((IPersistentMap)const__86);
    const__83.bindRoot(new match.with_tag());
    const__100.setMeta((IPersistentMap)const__103);
    const__104.setMeta((IPersistentMap)const__107);
    const__104.bindRoot(new match.constructor_QMARK_());
    const__109.setMeta((IPersistentMap)const__111);
    const__112.setMeta((IPersistentMap)const__114);
    const__115.setMeta((IPersistentMap)const__118);
    const__115.bindRoot(new match.pattern_row());
    const__119.setMeta((IPersistentMap)const__122);
    const__119.bindRoot(new match.update_pattern());
    const__123.setMeta((IPersistentMap)const__126);
    const__123.bindRoot(new match.all_wildcards_QMARK_());
    const__127.setMeta((IPersistentMap)const__130);
    const__127.bindRoot(new match.drop_nth_bind());
    const__131.setMeta((IPersistentMap)const__134);
    const__131.bindRoot(new match.leaf_node());
    const__137.setMeta((IPersistentMap)const__140);
    const__137.bindRoot(new match.fail_node());
    const__141.setMeta((IPersistentMap)const__144);
    const__141.bindRoot(new match.bind_node());
    const__145.setMeta((IPersistentMap)const__147);
    const__148.setMeta((IPersistentMap)const__151);
    const__148.bindRoot(new match.dag_clause_to_clj());
    const__152.setMeta((IPersistentMap)const__155);
    const__152.bindRoot(new match.catch_error());
    const__156.setMeta((IPersistentMap)const__159);
    const__156.bindRoot(new match.switch_node());
    const__160.setMeta((IPersistentMap)const__163);
    const__160.bindRoot(new match.first_column_QMARK_());
    const__164.setMeta((IPersistentMap)const__167);
    const__164.bindRoot(new match.empty_row_QMARK_());
    const__168.setMeta((IPersistentMap)const__171);
    const__168.bindRoot(new match.score_column());
    const__172.setMeta((IPersistentMap)const__175);
    const__172.bindRoot(new match.width());
    const__176.setMeta((IPersistentMap)const__179);
    const__176.bindRoot(new match.height());
    const__180.setMeta((IPersistentMap)const__183);
    const__180.bindRoot(new match.dim());
    const__184.setMeta((IPersistentMap)const__187);
    const__184.bindRoot(new match.empty_matrix_QMARK_());
    const__188.setMeta((IPersistentMap)const__191);
    const__188.bindRoot(new match.column());
    const__192.setMeta((IPersistentMap)const__195);
    const__192.bindRoot(new match.row());
    const__196.setMeta((IPersistentMap)const__199);
    const__196.bindRoot(new match.rows());
    const__200.setMeta((IPersistentMap)const__203);
    const__200.bindRoot(new match.pattern_at());
    const__204.setMeta((IPersistentMap)const__207);
    const__204.bindRoot(new match.action_for_row());
    const__208.setMeta((IPersistentMap)const__211);
    const__208.bindRoot(new match.occurrences());
    const__212.setMeta((IPersistentMap)const__215);
    const__212.bindRoot(new match.row_bindings());
    const__216.setMeta((IPersistentMap)const__219);
    const__216.bindRoot(new match.existential_pattern_QMARK_());
    const__220.setMeta((IPersistentMap)const__223);
    const__220.bindRoot(new match.wildcard_or_existential_QMARK_());
    const__224.setMeta((IPersistentMap)const__227);
    const__224.bindRoot(new match.constructors_above_QMARK_());
    const__228.setMeta((IPersistentMap)const__231);
    const__228.bindRoot(new match.pattern_score());
    const__232.setMeta((IPersistentMap)const__235);
    const__232.bindRoot(new match.useful_matrix());
    const__236.setMeta((IPersistentMap)const__239);
    const__236.bindRoot(new match.necessary_column());
    const__240.setMeta((IPersistentMap)const__243);
    const__240.bindRoot(new match.select());
    const__244.setMeta((IPersistentMap)const__246);
    const__247.setMeta((IPersistentMap)const__250);
    const__247.bindRoot(new match.specialize());
    const__251.setMeta((IPersistentMap)const__254);
    const__251.bindRoot(new match.pseudo_pattern_QMARK_());
    const__255.setMeta((IPersistentMap)const__258);
    const__255.bindRoot(new match.pseudo_patterns());
    const__259.setMeta((IPersistentMap)const__262);
    const__259.bindRoot(new match.column_splitter());
    const__263.setMeta((IPersistentMap)const__265);
    const__266.setMeta((IPersistentMap)const__268);
    const__269.setMeta((IPersistentMap)const__272);
    const__269.bindRoot(new match.return_split());
    const__273.setMeta((IPersistentMap)const__276);
    const__273.bindRoot(new match.matrix_splitter());
    const__277.setMeta((IPersistentMap)const__280);
    const__277.bindRoot(new match.group_rows());
    const__281.setMeta((IPersistentMap)const__283);
    const__284.setMeta((IPersistentMap)const__287);
    const__284.bindRoot(new match.non_local_literal_pattern_QMARK_());
    const__288.setMeta((IPersistentMap)const__291);
    const__288.bindRoot(new match.literal_case_matrix_splitter());
    const__292.setMeta((IPersistentMap)const__295);
    const__292.bindRoot(new match.default_case());
    const__296.setMeta((IPersistentMap)const__299);
    const__296.bindRoot(new match.cases());
    const__300.setMeta((IPersistentMap)const__303);
    const__300.bindRoot(new match.expression_QMARK_());
    const__304.setMeta((IPersistentMap)const__307);
    const__304.bindRoot(new match.bind_variables());
    const__308.setMeta((IPersistentMap)const__311);
    const__308.bindRoot(new match.root_bind_node());
    const__312.setMeta((IPersistentMap)const__315);
    const__312.bindRoot(new match.empty_rows_case());
    const__316.setMeta((IPersistentMap)const__319);
    const__316.bindRoot(new match.first_row_empty_case());
    const__320.setMeta((IPersistentMap)const__323);
    const__320.bindRoot(new match.first_row_wildcards_case());
    const__324.setMeta((IPersistentMap)const__327);
    const__324.bindRoot(new match.expand_matrix());
    const__328.setMeta((IPersistentMap)const__331);
    const__328.bindRoot(new match.split_matrix());
    const__332.setMeta((IPersistentMap)const__335);
    const__332.bindRoot(new match.first_column_chosen_case());
    const__336.setMeta((IPersistentMap)const__339);
    const__336.bindRoot(new match.other_column_chosen_case());
    const__340.setMeta((IPersistentMap)const__343);
    const__340.bindRoot(new match.choose_column());
    const__266.setMeta((IPersistentMap)const__346);
    const__266.bindRoot(new match.compile());
    const__263.setMeta((IPersistentMap)const__349);
    const__263.bindRoot(new match.pattern_matrix());
    const__244.setMeta((IPersistentMap)const__352);
    const__244.bindRoot(new match.default_specialize_matrix());
    const__353.setMeta((IPersistentMap)const__356);
    const__353.bindRoot(new match.wildcard_pattern());
    const__100.setMeta((IPersistentMap)const__359);
    const__100.bindRoot(new match.wildcard_pattern_QMARK_());
    const__112.setMeta((IPersistentMap)const__362);
    const__112.bindRoot(new match.named_wildcard_pattern_QMARK_());
    const__365.setMeta((IPersistentMap)const__368);
    const__365.bindRoot(new match.literal_pattern());
    const__281.setMeta((IPersistentMap)const__371);
    const__281.bindRoot(new match.literal_pattern_QMARK_());
    const__373.setMeta((IPersistentMap)const__375);
    const__376.setMeta((IPersistentMap)const__378);
    const__379.setMeta((IPersistentMap)const__381);
    const__382.setMeta((IPersistentMap)const__385);
    const__382.bindRoot(new match.specialize_seq_pattern_rest_row());
    const__386.setMeta((IPersistentMap)const__389);
    const__386.bindRoot(new match.specialize_seq_pattern_rest_matrix());
    const__390.setMeta((IPersistentMap)const__393);
    const__390.bindRoot(new match.seq_pattern_matrix_rest_ocrs());
    const__394.setMeta((IPersistentMap)const__397);
    const__394.bindRoot(new match.specialize_seq_pattern_row());
    const__398.setMeta((IPersistentMap)const__401);
    const__398.bindRoot(new match.specialize_seq_pattern_matrix());
    const__402.setMeta((IPersistentMap)const__405);
    const__402.bindRoot(new match.seq_pattern_matrix_ocrs());
    const__379.setMeta((IPersistentMap)const__410);
    const__379.bindRoot(new match.seq_pattern());
    const__373.setMeta((IPersistentMap)const__413);
    const__373.bindRoot(new match.seq_pattern_QMARK_());
    const__414.setMeta((IPersistentMap)const__417);
    const__414.bindRoot(new match.rest_pattern());
    const__376.setMeta((IPersistentMap)const__420);
    const__376.bindRoot(new match.rest_pattern_QMARK_());
    const__422.setMeta((IPersistentMap)const__425);
    const__422.bindRoot(new match.specialize_map_key_pattern_matrix());
    const__426.setMeta((IPersistentMap)const__429);
    const__426.bindRoot(new match.map_key_pattern());
    const__430.setMeta((IPersistentMap)const__433);
    const__430.bindRoot(new match.map_key_pattern_QMARK_());
    const__435.setMeta((IPersistentMap)const__437);
    const__438.setMeta((IPersistentMap)const__440);
    const__441.setMeta((IPersistentMap)const__444);
    const__441.bindRoot(new match.row_keys());
    const__445.setMeta((IPersistentMap)const__448);
    const__445.bindRoot(new match.get_all_keys());
    const__449.setMeta((IPersistentMap)const__452);
    const__449.bindRoot(new match.wrap_values());
    const__453.setMeta((IPersistentMap)const__456);
    const__453.bindRoot(new match.get_ocr_map());
    const__457.setMeta((IPersistentMap)const__460);
    const__457.bindRoot(new match.specialize_map_pattern_row());
    const__461.setMeta((IPersistentMap)const__464);
    const__461.bindRoot(new match.specialize_map_pattern_matrix());
    const__465.setMeta((IPersistentMap)const__468);
    const__465.bindRoot(new match.gen_map_pattern_ocr());
    const__469.setMeta((IPersistentMap)const__472);
    const__469.bindRoot(new match.map_pattern_matrix_ocr_sym());
    const__473.setMeta((IPersistentMap)const__476);
    const__473.bindRoot(new match.map_pattern_matrix_ocrs());
    const__477.setMeta((IPersistentMap)const__480);
    const__477.bindRoot(new match.map_pattern());
    const__435.setMeta((IPersistentMap)const__483);
    const__435.bindRoot(new match.map_pattern_QMARK_());
    const__485.setMeta((IPersistentMap)const__487);
    const__488.setMeta((IPersistentMap)const__491);
    const__488.bindRoot(new match.calc_rest_QMARK__and_min_size());
    const__492.setMeta((IPersistentMap)const__495);
    const__492.bindRoot(new match.specialize_vector_pattern_row());
    const__496.setMeta((IPersistentMap)const__499);
    const__496.bindRoot(new match.specialize_vector_pattern_row_non_rest());
    const__500.setMeta((IPersistentMap)const__503);
    const__500.bindRoot(new match.specialize_vector_pattern_matrix());
    const__504.setMeta((IPersistentMap)const__507);
    const__504.bindRoot(new match.vector_pattern_ocr_sym());
    const__508.setMeta((IPersistentMap)const__511);
    const__508.bindRoot(new match.vector_pattern_matrix_ocrs());
    const__512.setMeta((IPersistentMap)const__515);
    const__512.bindRoot(new match.array_tag());
    const__516.setMeta((IPersistentMap)const__519);
    const__516.bindRoot(new match.vector_pattern());
    const__485.setMeta((IPersistentMap)const__522);
    const__485.bindRoot(new match.vector_pattern_QMARK_());
    const__524.setMeta((IPersistentMap)const__527);
    const__524.bindRoot(new match.specialize_or_pattern_row());
    const__528.setMeta((IPersistentMap)const__531);
    const__528.bindRoot(new match.specialize_or_pattern_matrix());
    const__532.setMeta((IPersistentMap)const__535);
    const__532.bindRoot(new match.or_pattern());
    const__536.setMeta((IPersistentMap)const__539);
    const__536.bindRoot(new match.or_pattern_QMARK_());
    const__541.setMeta((IPersistentMap)const__543);
    const__544.setMeta((IPersistentMap)const__547);
    const__544.bindRoot(new match.specialize_guard_pattern_matrix());
    const__438.setMeta((IPersistentMap)const__550);
    const__438.bindRoot(new match.guard_pattern());
    const__541.setMeta((IPersistentMap)const__553);
    const__541.bindRoot(new match.guard_pattern_QMARK_());
    const__555.setMeta((IPersistentMap)const__557);
    const__558.setMeta((IPersistentMap)const__561);
    const__558.bindRoot(new match.app_pattern_matrix_ocrs());
    const__562.setMeta((IPersistentMap)const__565);
    const__562.bindRoot(new match.specialize_app_pattern_matrix());
    const__566.setMeta((IPersistentMap)const__569);
    const__566.bindRoot(new match.app_pattern());
    const__555.setMeta((IPersistentMap)const__572);
    const__555.bindRoot(new match.app_pattern_QMARK_());
    const__574.setMeta((IPersistentMap)const__576);
    const__574

















      
      .bindRoot(((IFn)const__12.getRawRoot()).invoke(PersistentArrayMap.EMPTY));
    const__577.setMeta((IPersistentMap)const__580);
    const__577.bindRoot(new match.defpred());
    ((Var)const__577)
      
      .setMacro();
    const__581.setMeta((IPersistentMap)const__583);
    const__584.setMeta((IPersistentMap)const__587);
    const__584.bindRoot(new match.specialize_predicate_pattern_matrix());
    const__588.setMeta((IPersistentMap)const__591);
    const__588.bindRoot(new match.predicate_pattern());
    const__581.setMeta((IPersistentMap)const__594);
    const__581.bindRoot(new match.predicate_pattern_QMARK_());
    const__616.setMeta((IPersistentMap)const__619);
    const__616.bindRoot(new match.emit_patterns());
    const__622.setMeta((IPersistentMap)const__624);
    const__532.setMeta((IPersistentMap)const__626);
    const__627.setMeta((IPersistentMap)const__629);
    const__438.setMeta((IPersistentMap)const__631);
    const__588.setMeta((IPersistentMap)const__633);
    const__516.setMeta((IPersistentMap)const__635);
    const__651.setMeta((IPersistentMap)const__655);
    const__651.bindRoot(new match.group_keywords());
    const__656.setMeta((IPersistentMap)const__659);
    const__656.bindRoot(new match.to_pattern_row());
    const__660.setMeta((IPersistentMap)const__663);
    const__660.bindRoot(new match.wildcards_and_duplicates());
    const__664.setMeta((IPersistentMap)const__667);
    const__664.bindRoot(new match.find_duplicate_wildcards());
    const__668.setMeta((IPersistentMap)const__671);
    const__668.bindRoot(new match.check_pattern());
    const__672.setMeta((IPersistentMap)const__675);
    const__672.bindRoot(new match.check_matrix_args());
    const__676.setMeta((IPersistentMap)const__679);
    const__676.bindRoot(new match.process_vars());
    const__680.setMeta((IPersistentMap)const__683);
    const__680.bindRoot(new match.emit_matrix());
    const__684.setMeta((IPersistentMap)const__687);
    const__684.bindRoot(new match.executable_form());
    const__688.setMeta((IPersistentMap)const__691);
    const__688.bindRoot(new match.recur_present_QMARK_());
    const__692.setMeta((IPersistentMap)const__695);
    const__692.bindRoot(new match.clj_form());
    const__696.setMeta((IPersistentMap)const__699);
    const__696.bindRoot(new match.match());
    ((Var)const__696)




























































































































































































































      
      .setMacro();
    const__700.setMeta((IPersistentMap)const__703);
    const__700.bindRoot(new match.matchv());
    ((Var)const__700)

























      
      .setMacro();
    const__704.setMeta((IPersistentMap)const__707);
    const__704.bindRoot(new match.matchm());
    ((Var)const__704)





      
      .setMacro();
    const__708.setMeta((IPersistentMap)const__711);
    const__708.bindRoot(new match.match_let());
    ((Var)const__708)















      
      .setMacro();
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "clojure.core.match");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("clojure.core.match", "*syntax-check*");
    const__11 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "doc"), "Enable syntax check of match macros", RT.keyword(null, "line"), Integer.valueOf(46), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__12 = (Var)RT.var("clojure.core", "atom");
    const__13 = (Var)RT.var("clojure.core.match", "*clojurescript*");
    const__15 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(50), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__16 = (Var)RT.var("clojure.core.match", "*line*");
    const__18 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(53), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__19 = (Var)RT.var("clojure.core.match", "*locals*");
    const__21 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(54), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__22 = (Var)RT.var("clojure.core.match", "*warned*");
    const__24 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(55), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__25 = (Var)RT.var("clojure.core.match", "*match-lookup*");
    const__27 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "doc"), "Allow map matching syntax to check for IMatchLookup", RT.keyword(null, "line"), Integer.valueOf(57), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__28 = (Var)RT.var("clojure.core.match", "*vector-type*");
    const__30 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "doc"), "Default vector type. Can be rebound allowing emission of\n             custom inline code for vector patterns, for example\n             type-hinted primitive array operations", RT.keyword(null, "line"), Integer.valueOf(61), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__31 = (Keyword)RT.keyword("clojure.core.match", "vector");
    const__32 = (Var)RT.var("clojure.core.match", "*recur-present*");
    const__34 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "doc"), "In the presence of recur we cannot apply code size optimizations", RT.keyword(null, "line"), Integer.valueOf(67), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__35 = (Var)RT.var("clojure.core.match", "*no-backtrack*");
    const__37 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "doc"), "Flag to optimize performance over code size.", RT.keyword(null, "line"), Integer.valueOf(71), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__38 = (Var)RT.var("clojure.core.match", "backtrack");
    const__40 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Pre-allocated exception used for backtracing", RT.keyword(null, "line"), Integer.valueOf(75), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__41 = (Var)RT.var("clojure.core.match", "backtrack-expr");
    const__45 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(78), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__46 = (Var)RT.var("clojure.core.match", "backtrack-sym");
    const__49 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(83), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__50 = (Var)RT.var("clojure.core.match", "*backtrack-stack*");
    const__52 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(88), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__53 = (Var)RT.var("clojure.core.match", "*root*");
    const__55 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(89), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__56 = (Var)RT.var("clojure.core.match", "warn");
    const__59 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "msg")) })), RT.keyword(null, "line"), Integer.valueOf(91), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__60 = (Var)RT.var("clojure.core.match", "get-loop-locals");
    const__63 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(99), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__64 = (Var)RT.var("clojure.core", "extend");
    const__65 = RT.classForName("clojure.lang.ILookup");
    const__66 = (Var)RT.var("clojure.core.match.protocols", "IMatchLookup");
    const__67 = (Keyword)RT.keyword(null, "val-at");
    const__68 = (Var)RT.var("clojure.core.match", "val-at*");
    const__71 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "k")), Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "k"), Symbol.intern(null, "not-found")) })), RT.keyword(null, "line"), Integer.valueOf(116), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__72 = (Var)RT.var("clojure.core.match", "val-at-expr");
    const__75 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "args")) })), RT.keyword(null, "line"), Integer.valueOf(120), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__76 = (Var)RT.var("clojure.core.match", "vector-type");
    const__79 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "t"), Symbol.intern(null, "&"), Symbol.intern(null, "r")) })), RT.keyword(null, "line"), Integer.valueOf(137), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__80 = (Var)RT.var("clojure.core.match", "check-size?");
    const__81 = (Keyword)RT.keyword(null, "default");
    const__82 = (Var)RT.var("clojure.core.match", "tag");
    const__83 = (Var)RT.var("clojure.core.match", "with-tag");
    const__86 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "t"), Symbol.intern(null, "ocr")) })), RT.keyword(null, "line"), Integer.valueOf(159), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__87 = (Var)RT.var("clojure.core.match", "test-inline");
    const__88 = (Var)RT.var("clojure.core.match", "test-with-size-inline");
    const__89 = (Var)RT.var("clojure.core.match", "test-with-min-size-inline");
    const__90 = (Var)RT.var("clojure.core.match", "count-inline");
    const__91 = (Var)RT.var("clojure.core.match", "nth-inline");
    const__92 = (Var)RT.var("clojure.core.match", "nth-offset-inline");
    const__93 = (Var)RT.var("clojure.core.match", "subvec-inline");
    const__94 = (Var)RT.var("clojure.core.match", "nthnext-inline");
    const__95 = RT.classForName("clojure.lang.IPersistentVector");
    const__96 = (Var)RT.var("clojure.core.match.protocols", "IVecMod");
    const__97 = (Keyword)RT.keyword(null, "prepend");
    const__98 = (Keyword)RT.keyword(null, "drop-nth");
    const__99 = (Keyword)RT.keyword(null, "swap");
  }
  
  public static void __init1() {
    const__100 = (Var)RT.var("clojure.core.match", "wildcard-pattern?");
    const__103 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(229), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__104 = (Var)RT.var("clojure.core.match", "constructor?");
    const__107 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "p")) })), RT.keyword(null, "line"), Integer.valueOf(231), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__108 = (Var)RT.var("clojure.core.match", "groupable?");
    const__109 = (Var)RT.var("clojure.core.match", "leaf-bind-expr");
    const__111 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(255), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__112 = (Var)RT.var("clojure.core.match", "named-wildcard-pattern?");
    const__114 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(255), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__115 = (Var)RT.var("clojure.core.match", "pattern-row");
    const__118 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ps"), Symbol.intern(null, "action")), Tuple.create(Symbol.intern(null, "ps"), Symbol.intern(null, "action"), Symbol.intern(null, "bindings")) })), RT.keyword(null, "line"), Integer.valueOf(325), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__119 = (Var)RT.var("clojure.core.match", "update-pattern");
    const__122 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "prow"), Symbol.intern(null, "i"), Symbol.intern(null, "p")) })), RT.keyword(null, "line"), Integer.valueOf(336), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__123 = (Var)RT.var("clojure.core.match", "all-wildcards?");
    const__126 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "prow")) })), RT.keyword(null, "line"), Integer.valueOf(339), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__127 = (Var)RT.var("clojure.core.match", "drop-nth-bind");
    const__130 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "prow"), Symbol.intern(null, "n"), Symbol.intern(null, "ocr")) })), RT.keyword(null, "line"), Integer.valueOf(342), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__131 = (Var)RT.var("clojure.core.match", "leaf-node");
    const__134 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "value")), Tuple.create(Symbol.intern(null, "value"), Symbol.intern(null, "bindings")) })), RT.keyword(null, "line"), Integer.valueOf(374), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__135 = (Keyword)RT.keyword(null, "seq");
    const__136 = (Keyword)RT.keyword(null, "map");
    const__137 = (Var)RT.var("clojure.core.match", "fail-node");
    const__140 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(406), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__141 = (Var)RT.var("clojure.core.match", "bind-node");
    const__144 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "bindings"), Symbol.intern(null, "node")) })), RT.keyword(null, "line"), Integer.valueOf(418), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__145 = (Var)RT.var("clojure.core.match", "to-source");
    const__147 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(424), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__148 = (Var)RT.var("clojure.core.match", "dag-clause-to-clj");
    const__151 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "occurrence"), Symbol.intern(null, "pattern"), Symbol.intern(null, "action")) })), RT.keyword(null, "line"), Integer.valueOf(426), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__152 = (Var)RT.var("clojure.core.match", "catch-error");
    const__155 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "line"), Integer.valueOf(432), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__156 = (Var)RT.var("clojure.core.match", "switch-node");
    const__159 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "occurrence"), Symbol.intern(null, "cases"), Symbol.intern(null, "default"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "sequential?"), Symbol.intern(null, "cases") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(478), RT.keyword(null, "column"), Integer.valueOf(11) }))) })) })), RT.keyword(null, "line"), Integer.valueOf(476), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__160 = (Var)RT.var("clojure.core.match", "first-column?");
    const__163 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "i")) })), RT.keyword(null, "line"), Integer.valueOf(484), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__164 = (Var)RT.var("clojure.core.match", "empty-row?");
    const__167 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "row")) })), RT.keyword(null, "line"), Integer.valueOf(486), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__168 = (Var)RT.var("clojure.core.match", "score-column");
    const__171 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "i"), Symbol.intern(null, "col")) })), RT.keyword(null, "line"), Integer.valueOf(491), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__172 = (Var)RT.var("clojure.core.match", "width");
    const__175 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { Symbol.intern(null, "rows"), RT.keyword(null, "rows") })) })), RT.keyword(null, "line"), Integer.valueOf(494), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__176 = (Var)RT.var("clojure.core.match", "height");
    const__179 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { Symbol.intern(null, "rows"), RT.keyword(null, "rows") })) })), RT.keyword(null, "line"), Integer.valueOf(499), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__180 = (Var)RT.var("clojure.core.match", "dim");
    const__183 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pm")) })), RT.keyword(null, "line"), Integer.valueOf(502), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__184 = (Var)RT.var("clojure.core.match", "empty-matrix?");
    const__187 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pm")) })), RT.keyword(null, "line"), Integer.valueOf(505), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__188 = (Var)RT.var("clojure.core.match", "column");
    const__191 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { Symbol.intern(null, "rows"), RT.keyword(null, "rows") }), Symbol.intern(null, "i")) })), RT.keyword(null, "line"), Integer.valueOf(508), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__192 = (Var)RT.var("clojure.core.match", "row");
    const__195 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { Symbol.intern(null, "rows"), RT.keyword(null, "rows") }), Symbol.intern(null, "j")) })), RT.keyword(null, "line"), Integer.valueOf(511), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__196 = (Var)RT.var("clojure.core.match", "rows");
    const__199 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { Symbol.intern(null, "rows"), RT.keyword(null, "rows") })) })), RT.keyword(null, "line"), Integer.valueOf(514), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
  }
  
  public static void __init2() {
    const__200 = (Var)RT.var("clojure.core.match", "pattern-at");
    const__203 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { Symbol.intern(null, "rows"), RT.keyword(null, "rows") }), Symbol.intern(null, "i"), Symbol.intern(null, "j")) })), RT.keyword(null, "line"), Integer.valueOf(516), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__204 = (Var)RT.var("clojure.core.match", "action-for-row");
    const__207 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { Symbol.intern(null, "rows"), RT.keyword(null, "rows") }), Symbol.intern(null, "j")) })), RT.keyword(null, "line"), Integer.valueOf(519), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__208 = (Var)RT.var("clojure.core.match", "occurrences");
    const__211 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pm")) })), RT.keyword(null, "line"), Integer.valueOf(522), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__212 = (Var)RT.var("clojure.core.match", "row-bindings");
    const__215 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "ocrs")) })), RT.keyword(null, "line"), Integer.valueOf(525), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__216 = (Var)RT.var("clojure.core.match", "existential-pattern?");
    const__219 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(531), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__220 = (Var)RT.var("clojure.core.match", "wildcard-or-existential?");
    const__223 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(534), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__224 = (Var)RT.var("clojure.core.match", "constructors-above?");
    const__227 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pm"), Symbol.intern(null, "i"), Symbol.intern(null, "j")) })), RT.keyword(null, "line"), Integer.valueOf(538), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__228 = (Var)RT.var("clojure.core.match", "pattern-score");
    const__231 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pm"), Symbol.intern(null, "i"), Symbol.intern(null, "j")) })), RT.keyword(null, "line"), Integer.valueOf(548), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__232 = (Var)RT.var("clojure.core.match", "useful-matrix");
    const__235 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pm")) })), RT.keyword(null, "line"), Integer.valueOf(561), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__236 = (Var)RT.var("clojure.core.match", "necessary-column");
    const__239 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pm")) })), RT.keyword(null, "line"), Integer.valueOf(569), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__240 = (Var)RT.var("clojure.core.match", "select");
    const__243 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pm")) })), RT.keyword(null, "line"), Integer.valueOf(579), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__244 = (Var)RT.var("clojure.core.match", "default-specialize-matrix");
    const__246 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(582), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__247 = (Var)RT.var("clojure.core.match", "specialize");
    const__250 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "matrix")), Tuple.create(Symbol.intern(null, "matrix"), Symbol.intern(null, "p")) })), RT.keyword(null, "line"), Integer.valueOf(584), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__251 = (Var)RT.var("clojure.core.match", "pseudo-pattern?");
    const__254 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(592), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__255 = (Var)RT.var("clojure.core.match", "pseudo-patterns");
    const__258 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "matrix"), Symbol.intern(null, "i")) })), RT.keyword(null, "line"), Integer.valueOf(595), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__259 = (Var)RT.var("clojure.core.match", "column-splitter");
    const__262 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "col")) })), RT.keyword(null, "line"), Integer.valueOf(598), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__263 = (Var)RT.var("clojure.core.match", "pattern-matrix");
    const__265 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(603), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__266 = (Var)RT.var("clojure.core.match", "compile");
    const__268 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(603), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__269 = (Var)RT.var("clojure.core.match", "return-split");
    const__272 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "S"), Symbol.intern(null, "D")) })), RT.keyword(null, "line"), Integer.valueOf(605), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__273 = (Var)RT.var("clojure.core.match", "matrix-splitter");
    const__276 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "matrix")) })), RT.keyword(null, "line"), Integer.valueOf(612), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__277 = (Var)RT.var("clojure.core.match", "group-rows");
    const__280 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "cs"), Symbol.intern(null, "rows")) })), RT.keyword(null, "line"), Integer.valueOf(620), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__281 = (Var)RT.var("clojure.core.match", "literal-pattern?");
    const__283 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(630), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__284 = (Var)RT.var("clojure.core.match", "non-local-literal-pattern?");
    const__287 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "p")) })), RT.keyword(null, "line"), Integer.valueOf(632), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__288 = (Var)RT.var("clojure.core.match", "literal-case-matrix-splitter");
    const__291 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "matrix")) })), RT.keyword(null, "line"), Integer.valueOf(636), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__292 = (Var)RT.var("clojure.core.match", "default-case");
    const__295 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "matrix")) })), RT.keyword(null, "line"), Integer.valueOf(660), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__296 = (Var)RT.var("clojure.core.match", "cases");
    const__299 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "matrix")) })), RT.keyword(null, "line"), Integer.valueOf(665), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
  }
  
  public static void __init3() {
    const__300 = (Var)RT.var("clojure.core.match", "expression?");
    const__303 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ocr")) })), RT.keyword(null, "line"), Integer.valueOf(677), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__304 = (Var)RT.var("clojure.core.match", "bind-variables");
    const__307 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ocrs")) })), RT.keyword(null, "line"), Integer.valueOf(680), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__308 = (Var)RT.var("clojure.core.match", "root-bind-node");
    const__311 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "matrix")) })), RT.keyword(null, "line"), Integer.valueOf(689), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__312 = (Var)RT.var("clojure.core.match", "empty-rows-case");
    const__315 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "doc"), "Case 1: If there are no pattern rows to match, then matching always fails", RT.keyword(null, "line"), Integer.valueOf(703), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__316 = (Var)RT.var("clojure.core.match", "first-row-empty-case");
    const__319 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "rows"), Symbol.intern(null, "ocr")) })), RT.keyword(null, "doc"), "Case 2: If the first row is empty then matching always succeeds \n  and yields the first action.", RT.keyword(null, "line"), Integer.valueOf(708), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__320 = (Var)RT.var("clojure.core.match", "first-row-wildcards-case");
    const__323 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "rows"), Symbol.intern(null, "ocrs")) })), RT.keyword(null, "doc"), "Case 2: If the first row is constituted by wildcards then matching\n  matching always succeeds and yields the first action.", RT.keyword(null, "line"), Integer.valueOf(718), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__324 = (Var)RT.var("clojure.core.match", "expand-matrix");
    const__327 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "matrix"), Symbol.intern(null, "col")) })), RT.keyword(null, "line"), Integer.valueOf(734), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__328 = (Var)RT.var("clojure.core.match", "split-matrix");
    const__331 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "matrix")) })), RT.keyword(null, "line"), Integer.valueOf(741), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__332 = (Var)RT.var("clojure.core.match", "first-column-chosen-case");
    const__335 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "matrix"), Symbol.intern(null, "col"), Symbol.intern(null, "ocrs")) })), RT.keyword(null, "doc"), "Case 3a: The first column is chosen. Compute and return a\n  switch/bind node with a default matrix case", RT.keyword(null, "line"), Integer.valueOf(750), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__336 = (Var)RT.var("clojure.core.match", "other-column-chosen-case");
    const__339 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "matrix"), Symbol.intern(null, "col")) })), RT.keyword(null, "doc"), "Case 3b: A column other than the first is chosen. Swap column \ncol with the first column and compile the result", RT.keyword(null, "line"), Integer.valueOf(773), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__340 = (Var)RT.var("clojure.core.match", "choose-column");
    const__343 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "matrix")) })), RT.keyword(null, "line"), Integer.valueOf(781), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__346 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "rows"), Symbol.intern(null, "ocrs")), RT.keyword(null, "as"), Symbol.intern(null, "pm") })) })), RT.keyword(null, "line"), Integer.valueOf(784), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__349 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "rows"), Symbol.intern(null, "ocrs")) })), RT.keyword(null, "line"), Integer.valueOf(816), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__352 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "p"), Symbol.intern(null, "matrix")) })), RT.keyword(null, "line"), Integer.valueOf(826), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__353 = (Var)RT.var("clojure.core.match", "wildcard-pattern");
    const__356 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(), ((IObj)Tuple.create(Symbol.intern(null, "sym"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "symbol?"), Symbol.intern(null, "sym") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(873), RT.keyword(null, "column"), Integer.valueOf(12) }))) })) })), RT.keyword(null, "line"), Integer.valueOf(870), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__359 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(878), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__362 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(884), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__363 = (Var)RT.var("clojure.core", "print-method");
    const__364 = RT.classForName("clojure.core.match.WildcardPattern");
    const__365 = (Var)RT.var("clojure.core.match", "literal-pattern");
    const__368 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "l")) })), RT.keyword(null, "line"), Integer.valueOf(942), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__371 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(945), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__372 = RT.classForName("clojure.core.match.LiteralPattern");
    const__373 = (Var)RT.var("clojure.core.match", "seq-pattern?");
    const__375 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(957), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__376 = (Var)RT.var("clojure.core.match", "rest-pattern?");
    const__378 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(957), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__379 = (Var)RT.var("clojure.core.match", "seq-pattern");
    const__381 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(957), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__382 = (Var)RT.var("clojure.core.match", "specialize-seq-pattern-rest-row");
    const__385 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "focr"), Symbol.intern(null, "row")) })), RT.keyword(null, "line"), Integer.valueOf(959), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__386 = (Var)RT.var("clojure.core.match", "specialize-seq-pattern-rest-matrix");
    const__389 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "rows"), Symbol.intern(null, "focr")) })), RT.keyword(null, "line"), Integer.valueOf(966), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__390 = (Var)RT.var("clojure.core.match", "seq-pattern-matrix-rest-ocrs");
    const__393 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ocrs"), Symbol.intern(null, "focr")) })), RT.keyword(null, "line"), Integer.valueOf(971), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__394 = (Var)RT.var("clojure.core.match", "specialize-seq-pattern-row");
    const__397 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "focr"), Symbol.intern(null, "row")) })), RT.keyword(null, "line"), Integer.valueOf(973), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__398 = (Var)RT.var("clojure.core.match", "specialize-seq-pattern-matrix");
  }
  
  public static void __init4() {
    const__401 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "rows"), Symbol.intern(null, "focr")) })), RT.keyword(null, "line"), Integer.valueOf(985), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__402 = (Var)RT.var("clojure.core.match", "seq-pattern-matrix-ocrs");
    const__405 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ocrs"), Symbol.intern(null, "focr")) })), RT.keyword(null, "line"), Integer.valueOf(990), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__407 = RT.classForName("clojure.core.match.SeqPattern");
    const__410 = (AFn)RT.map(new Object[] { RT.keyword(null, "tag"), RT.classForName("clojure.core.match.SeqPattern"), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "s"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "sequential?"), Symbol.intern(null, "s") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(1042), RT.keyword(null, "column"), Integer.valueOf(10) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "not"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "empty?"), Symbol.intern(null, "s") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(1043), RT.keyword(null, "column"), Integer.valueOf(15) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(1043), RT.keyword(null, "column"), Integer.valueOf(10) }))) })) })), RT.keyword(null, "line"), Integer.valueOf(1041), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__413 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(1046), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__414 = (Var)RT.var("clojure.core.match", "rest-pattern");
    const__417 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "p")) })), RT.keyword(null, "line"), Integer.valueOf(1061), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__420 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(1064), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__421 = RT.classForName("clojure.core.match.RestPattern");
    const__422 = (Var)RT.var("clojure.core.match", "specialize-map-key-pattern-matrix");
    const__425 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "rows")) })), RT.keyword(null, "line"), Integer.valueOf(1076), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__426 = (Var)RT.var("clojure.core.match", "map-key-pattern");
    const__429 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "p")) })), RT.keyword(null, "line"), Integer.valueOf(1097), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__430 = (Var)RT.var("clojure.core.match", "map-key-pattern?");
    const__433 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(1100), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__434 = RT.classForName("clojure.core.match.MapKeyPattern");
    const__435 = (Var)RT.var("clojure.core.match", "map-pattern?");
    const__437 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(1106), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__438 = (Var)RT.var("clojure.core.match", "guard-pattern");
    const__440 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(1106), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__441 = (Var)RT.var("clojure.core.match", "row-keys");
    const__444 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "row"), Symbol.intern(null, "env")) })), RT.keyword(null, "line"), Integer.valueOf(1108), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__445 = (Var)RT.var("clojure.core.match", "get-all-keys");
    const__448 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "rows"), Symbol.intern(null, "env")) })), RT.keyword(null, "line"), Integer.valueOf(1117), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__449 = (Var)RT.var("clojure.core.match", "wrap-values");
    const__452 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m")) })), RT.keyword(null, "line"), Integer.valueOf(1124), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__453 = (Var)RT.var("clojure.core.match", "get-ocr-map");
    const__456 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "p"), RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "only"), Symbol.intern(null, "all-keys"), Symbol.intern(null, "wc-map")) })) })), RT.keyword(null, "line"), Integer.valueOf(1131), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__457 = (Var)RT.var("clojure.core.match", "specialize-map-pattern-row");
    const__460 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "row"), RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "all-keys"), Symbol.intern(null, "only?"), Symbol.intern(null, "focr")), RT.keyword(null, "as"), Symbol.intern(null, "env") })) })), RT.keyword(null, "line"), Integer.valueOf(1141), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__461 = (Var)RT.var("clojure.core.match", "specialize-map-pattern-matrix");
    const__464 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "rows"), Symbol.intern(null, "env")) })), RT.keyword(null, "line"), Integer.valueOf(1160), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__465 = (Var)RT.var("clojure.core.match", "gen-map-pattern-ocr");
    const__468 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ocr"), Symbol.intern(null, "k")) })), RT.keyword(null, "line"), Integer.valueOf(1163), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__469 = (Var)RT.var("clojure.core.match", "map-pattern-matrix-ocr-sym");
    const__472 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "k"), Symbol.intern(null, "env")) })), RT.keyword(null, "line"), Integer.valueOf(1166), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__473 = (Var)RT.var("clojure.core.match", "map-pattern-matrix-ocrs");
    const__476 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ocrs"), Symbol.intern(null, "env")) })), RT.keyword(null, "line"), Integer.valueOf(1175), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__477 = (Var)RT.var("clojure.core.match", "map-pattern");
    const__480 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(), ((IObj)Tuple.create(Symbol.intern(null, "m"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "map?"), Symbol.intern(null, "m") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(1233), RT.keyword(null, "column"), Integer.valueOf(15) }))) })) })), RT.keyword(null, "line"), Integer.valueOf(1231), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__483 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(1236), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__484 = RT.classForName("clojure.core.match.MapPattern");
    const__485 = (Var)RT.var("clojure.core.match", "vector-pattern?");
    const__487 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(1248), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__488 = (Var)RT.var("clojure.core.match", "calc-rest?-and-min-size");
    const__491 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "rows"), Symbol.intern(null, "env")) })), RT.keyword(null, "line"), Integer.valueOf(1250), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__492 = (Var)RT.var("clojure.core.match", "specialize-vector-pattern-row");
    const__495 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "row"), RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "focr"), Symbol.intern(null, "min-size")) })) })), RT.keyword(null, "line"), Integer.valueOf(1259), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__496 = (Var)RT.var("clojure.core.match", "specialize-vector-pattern-row-non-rest");
    const__499 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "row"), RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "focr"), Symbol.intern(null, "min-size")) })) })), RT.keyword(null, "line"), Integer.valueOf(1267), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
  }
  
  public static void __init5() {
    const__500 = (Var)RT.var("clojure.core.match", "specialize-vector-pattern-matrix");
    const__503 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "rows"), Symbol.intern(null, "env")) })), RT.keyword(null, "line"), Integer.valueOf(1275), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__504 = (Var)RT.var("clojure.core.match", "vector-pattern-ocr-sym");
    const__507 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "pat"), Symbol.intern(null, "focr"), Symbol.intern(null, "tag")) }), Symbol.intern(null, "i")) })), RT.keyword(null, "line"), Integer.valueOf(1280), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__508 = (Var)RT.var("clojure.core.match", "vector-pattern-matrix-ocrs");
    const__511 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ocrs"), RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "focr"), Symbol.intern(null, "tag"), Symbol.intern(null, "min-size"), Symbol.intern(null, "rest?")), RT.keyword(null, "as"), Symbol.intern(null, "env") })) })), RT.keyword(null, "line"), Integer.valueOf(1292), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__512 = (Var)RT.var("clojure.core.match", "array-tag");
    const__515 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(1310), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__516 = (Var)RT.var("clojure.core.match", "vector-pattern");
    const__519 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(), Tuple.create(Symbol.intern(null, "v")), Tuple.create(Symbol.intern(null, "v"), Symbol.intern(null, "t")), Tuple.create(Symbol.intern(null, "v"), Symbol.intern(null, "t"), Symbol.intern(null, "offset")), ((IObj)Tuple.create(Symbol.intern(null, "v"), Symbol.intern(null, "t"), Symbol.intern(null, "offset"), Symbol.intern(null, "rest?"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "vector?"), Symbol.intern(null, "v") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(1398), RT.keyword(null, "column"), Integer.valueOf(12) }))) })) })), RT.keyword(null, "line"), Integer.valueOf(1392), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__522 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(1403), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__523 = RT.classForName("clojure.core.match.VectorPattern");
    const__524 = (Var)RT.var("clojure.core.match", "specialize-or-pattern-row");
    const__527 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "row"), Symbol.intern(null, "pat"), Symbol.intern(null, "ps")) })), RT.keyword(null, "line"), Integer.valueOf(1412), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__528 = (Var)RT.var("clojure.core.match", "specialize-or-pattern-matrix");
    const__531 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "rows"), Symbol.intern(null, "pat"), Symbol.intern(null, "ps")) })), RT.keyword(null, "line"), Integer.valueOf(1419), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__532 = (Var)RT.var("clojure.core.match", "or-pattern");
    const__535 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "p"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "vector?"), Symbol.intern(null, "p") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(1454), RT.keyword(null, "column"), Integer.valueOf(10) }))) })) })), RT.keyword(null, "line"), Integer.valueOf(1453), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__536 = (Var)RT.var("clojure.core.match", "or-pattern?");
    const__539 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(1457), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__540 = RT.classForName("clojure.core.match.OrPattern");
    const__541 = (Var)RT.var("clojure.core.match", "guard-pattern?");
    const__543 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(1470), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__544 = (Var)RT.var("clojure.core.match", "specialize-guard-pattern-matrix");
    const__547 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "rows")) })), RT.keyword(null, "line"), Integer.valueOf(1472), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__550 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "p"), Symbol.intern(null, "gs"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "set?"), Symbol.intern(null, "gs") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(1518), RT.keyword(null, "column"), Integer.valueOf(10) }))) })) })), RT.keyword(null, "line"), Integer.valueOf(1517), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__553 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(1521), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__554 = RT.classForName("clojure.core.match.GuardPattern");
    const__555 = (Var)RT.var("clojure.core.match", "app-pattern?");
    const__557 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(1534), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__558 = (Var)RT.var("clojure.core.match", "app-pattern-matrix-ocrs");
    const__561 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Tuple.create(Symbol.intern(null, "focr"), RT.keyword(null, "as"), Symbol.intern(null, "ocrs")), Symbol.intern(null, "form")) })), RT.keyword(null, "line"), Integer.valueOf(1540), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__562 = (Var)RT.var("clojure.core.match", "specialize-app-pattern-matrix");
    const__565 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "rows"), Symbol.intern(null, "form")) })), RT.keyword(null, "line"), Integer.valueOf(1547), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__566 = (Var)RT.var("clojure.core.match", "app-pattern");
    const__569 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "p"), Symbol.intern(null, "form")) })), RT.keyword(null, "line"), Integer.valueOf(1601), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__572 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(1604), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__573 = RT.classForName("clojure.core.match.AppPattern");
    const__574 = (Var)RT.var("clojure.core.match", "preds");
    const__576 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(1626), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__577 = (Var)RT.var("clojure.core.match", "defpred");
    const__580 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "name")), Tuple.create(Symbol.intern(null, "name"), Symbol.intern(null, "f")) })), RT.keyword(null, "line"), Integer.valueOf(1628), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__581 = (Var)RT.var("clojure.core.match", "predicate-pattern?");
    const__583 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(1634), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__584 = (Var)RT.var("clojure.core.match", "specialize-predicate-pattern-matrix");
    const__587 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "rows")) })), RT.keyword(null, "line"), Integer.valueOf(1636), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__588 = (Var)RT.var("clojure.core.match", "predicate-pattern");
    const__591 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "p"), Symbol.intern(null, "gs"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "set?"), Symbol.intern(null, "gs") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(1682), RT.keyword(null, "column"), Integer.valueOf(10) }))) })) })), RT.keyword(null, "line"), Integer.valueOf(1681), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__594 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(1685), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__595 = RT.classForName("clojure.core.match.PredicatePattern");
    const__597 = (AFn)Tuple.create(RT.keyword("clojure.core.match", "literal"), RT.keyword("clojure.core.match", "literal"));
    const__599 = (AFn)Tuple.create(RT.keyword("clojure.core.match", "guard"), RT.keyword("clojure.core.match", "guard"));
  }
  
  public static void __init6() {
    const__602 = (AFn)Tuple.create(RT.keyword("clojure.core.match", "predice"), RT.keyword("clojure.core.match", "predicate"));
    const__603 = (Keyword)RT.keyword("clojure.core.match", "map");
    const__604 = (AFn)Tuple.create(RT.keyword("clojure.core.match", "map"), RT.keyword("clojure.core.match", "map"));
    const__606 = (AFn)Tuple.create(RT.keyword("clojure.core.match", "or"), RT.keyword("clojure.core.match", "or"));
    const__607 = (AFn)Tuple.create(RT.keyword("clojure.core.match", "vector"), RT.keyword("clojure.core.match", "vector"));
    const__609 = (AFn)Tuple.create(RT.keyword("clojure.core.match", "app"), RT.keyword("clojure.core.match", "app"));
    const__610 = (Var)RT.var("clojure.core.match.protocols", "ISyntaxTag");
    const__611 = (Keyword)RT.keyword(null, "syntax-tag");
    const__612 = RT.classForName("clojure.lang.ISeq");
    const__613 = RT.classForName("clojure.lang.IPersistentMap");
    const__614 = RT.classForName("clojure.lang.Symbol");
    const__615 = RT.classForName("java.lang.Object");
    const__616 = (Var)RT.var("clojure.core.match", "emit-patterns");
    const__619 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ps"), Symbol.intern(null, "t")), Tuple.create(Symbol.intern(null, "ps"), Symbol.intern(null, "t"), Symbol.intern(null, "v")) })), RT.keyword(null, "line"), Integer.valueOf(1757), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__620 = (Var)RT.var("clojure.core.match", "emit-pattern");
    const__621 = (Keyword)RT.keyword("clojure.core.match", "symbol");
    const__622 = (Var)RT.var("clojure.core.match", "emit-pattern-for-syntax");
    const__624 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(1798), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__626 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(1798), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__627 = (Var)RT.var("clojure.core.match", "as-pattern");
    const__629 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(1798), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__631 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(1798), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__633 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(1798), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__635 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(1798), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__636 = (Keyword)RT.keyword("clojure.core.match", "seq");
    const__638 = (AFn)Tuple.create(RT.keyword(null, "or"), RT.keyword(null, "default"));
    const__640 = (AFn)Tuple.create(RT.keyword(null, "default"), RT.keyword(null, "as"));
    const__642 = (AFn)Tuple.create(RT.keyword(null, "default"), RT.keyword(null, "<<"));
    const__644 = (AFn)Tuple.create(RT.keyword(null, "default"), RT.keyword(null, "when"));
    const__646 = (AFn)Tuple.create(RT.keyword(null, "default"), RT.keyword(null, "guard"));
    const__647 = (AFn)Tuple.create(RT.keyword(null, "default"), RT.keyword(null, "seq"));
    const__648 = (AFn)Tuple.create(RT.keyword(null, "default"), RT.keyword("clojure.core.match", "vector"));
    const__650 = (AFn)Tuple.create(RT.keyword(null, "default"), RT.keyword(null, "only"));
    const__651 = (Var)RT.var("clojure.core.match", "group-keywords");
    const__655 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pattern")) })), RT.keyword(null, "doc"), "Returns a pattern with pattern-keywords (:when and :as) properly\n    grouped.  The original pattern may use the 'flattened' syntax.\n    For example, a 'flattened' pattern row like [a b :when even?] is\n    grouped as [a (b :when even?)].", RT.keyword(null, "line"), Integer.valueOf(1893), RT.keyword(null, "column"), Integer.valueOf(2), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__656 = (Var)RT.var("clojure.core.match", "to-pattern-row");
    const__659 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pat"), Symbol.intern(null, "action")) })), RT.keyword(null, "doc"), "Take an unprocessed pattern expression and an action expression and return\n   a pattern row of the processed pattern expression plus the action epxression.", RT.keyword(null, "line"), Integer.valueOf(1901), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__660 = (Var)RT.var("clojure.core.match", "wildcards-and-duplicates");
    const__663 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "patterns")) })), RT.keyword(null, "doc"), "Returns a vector of two elements: the set of all wildcards and the \n   set of duplicate wildcards.  The underbar _ is excluded from both.", RT.keyword(null, "line"), Integer.valueOf(1908), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__664 = (Var)RT.var("clojure.core.match", "find-duplicate-wildcards");
    const__667 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pattern")) })), RT.keyword(null, "line"), Integer.valueOf(1954), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__668 = (Var)RT.var("clojure.core.match", "check-pattern");
    const__671 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pat"), Symbol.intern(null, "vars"), Symbol.intern(null, "nvars"), Symbol.intern(null, "rownum")) })), RT.keyword(null, "line"), Integer.valueOf(1957), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__672 = (Var)RT.var("clojure.core.match", "check-matrix-args");
    const__675 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "vars"), Symbol.intern(null, "clauses")) })), RT.keyword(null, "line"), Integer.valueOf(1988), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__676 = (Var)RT.var("clojure.core.match", "process-vars");
    const__679 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "vars")) })), RT.keyword(null, "doc"), "Process the vars for the pattern matrix. If user provides an\n   expression, create a var and annotate via metadata with the\n   original expression.", RT.keyword(null, "line"), Integer.valueOf(2017), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__680 = (Var)RT.var("clojure.core.match", "emit-matrix");
    const__683 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "vars"), Symbol.intern(null, "clauses")), Tuple.create(Symbol.intern(null, "vars"), Symbol.intern(null, "clauses"), Symbol.intern(null, "default")) })), RT.keyword(null, "doc"), "Take the list of vars and sequence of unprocessed clauses and\n   return the pattern matrix. The pattern matrix contains the processed\n   pattern rows and the list of vars originally specified. Inserts\n   a last match - :else if provided by the user or a default match that\n   throws.", RT.keyword(null, "line"), Integer.valueOf(2029), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__684 = (Var)RT.var("clojure.core.match", "executable-form");
    const__687 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "node")) })), RT.keyword(null, "line"), Integer.valueOf(2060), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__688 = (Var)RT.var("clojure.core.match", "recur-present?");
    const__691 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "actions")) })), RT.keyword(null, "line"), Integer.valueOf(2066), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__692 = (Var)RT.var("clojure.core.match", "clj-form");
    const__695 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "vars"), Symbol.intern(null, "clauses")) })), RT.keyword(null, "line"), Integer.valueOf(2073), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__696 = (Var)RT.var("clojure.core.match", "match");
    const__699 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "vars"), Symbol.intern(null, "&"), Symbol.intern(null, "clauses")) })), RT.keyword(null, "doc"), "Pattern match a row of occurrences. Take a vector of occurrences, vars.\n  Clause question-answer syntax is like `cond`. Questions must be\n  wrapped in a vector, with same arity as vars. Last question can be :else,\n  which expands to a row of wildcards. Optionally may take a single\n  var not wrapped in a vector, questions then need not be wrapped in a\n  vector.\n  \n  Example:\n  (let [x 1\n        y 2]\n    (match [x y 3]\n      [1 2 3] :answer1\n      :else :default-answer))", RT.keyword(null, "line"), Integer.valueOf(2091), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
  }
  
  public static void __init7() {
    const__700 = (Var)RT.var("clojure.core.match", "matchv");
    const__703 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "type"), Symbol.intern(null, "vars"), Symbol.intern(null, "&"), Symbol.intern(null, "clauses")) })), RT.keyword(null, "line"), Integer.valueOf(2118), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__704 = (Var)RT.var("clojure.core.match", "matchm");
    const__707 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "vars"), Symbol.intern(null, "&"), Symbol.intern(null, "clauses")) })), RT.keyword(null, "doc"), "Same as match but supports IMatchLookup when\n  matching maps.", RT.keyword(null, "line"), Integer.valueOf(2125), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
    const__708 = (Var)RT.var("clojure.core.match", "match-let");
    const__711 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "bindings"), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "line"), Integer.valueOf(2142), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/match.clj" });
  }
  
  static  {
    __init0();
    __init1();
    __init2();
    __init3();
    __init4();
    __init5();
    __init6();
    __init7();
    Compiler.pushNSandLoader(RT.classForName("clojure.core.match__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
