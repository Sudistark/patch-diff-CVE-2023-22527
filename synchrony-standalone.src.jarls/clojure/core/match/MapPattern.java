package clojure.core.match;

import clojure.core.match.protocols.IPatternCompile;
import clojure.core.match.protocols.ISpecializeMatrix;
import clojure.lang.AFn;
import clojure.lang.IFn;
import clojure.lang.ILookup;
import clojure.lang.ILookupThunk;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.IPersistentVector;
import clojure.lang.IType;
import clojure.lang.Keyword;
import clojure.lang.KeywordLookupSite;
import clojure.lang.PersistentVector;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Util;
import clojure.lang.Var;

public final class MapPattern implements IPatternCompile, ILookup, IObj, ISpecializeMatrix, IType {
  public final Object m;
  
  public final Object _meta;
  
  public static final Var const__0 = (Var)RT.var("clojure.core", "str");
  
  public static final Keyword const__5 = (Keyword)RT.keyword(null, "m");
  
  public static final Keyword const__6 = (Keyword)RT.keyword("clojure.core.match", "tag");
  
  public static final Keyword const__7 = (Keyword)RT.keyword("clojure.core.match", "map");
  
  public static final Var const__8 = (Var)RT.var("clojure.core.match", "*clojurescript*");
  
  public static final Var const__9 = (Var)RT.var("clojure.core", "seq");
  
  public static final Var const__10 = (Var)RT.var("clojure.core", "concat");
  
  public static final Var const__11 = (Var)RT.var("clojure.core", "list");
  
  public static final AFn const__12 = (AFn)Symbol.intern("clojure.core", "satisfies?");
  
  public static final AFn const__13 = (AFn)Symbol.intern("cljs.core", "ILookup");
  
  public static final Var const__14 = (Var)RT.var("clojure.core.match", "*match-lookup*");
  
  public static final AFn const__15 = (AFn)Symbol.intern("clojure.core", "or");
  
  public static final AFn const__16 = (AFn)Symbol.intern("clojure.core", "instance?");
  
  public static final AFn const__17 = (AFn)Symbol.intern(null, "clojure.lang.ILookup");
  
  public static final AFn const__18 = (AFn)Symbol.intern("clojure.core", "satisfies?");
  
  public static final AFn const__19 = (AFn)Symbol.intern("clojure.core.match.protocols", "IMatchLookup");
  
  public static final Keyword const__20 = (Keyword)RT.keyword(null, "else");
  
  public static final AFn const__21 = (AFn)Symbol.intern("clojure.core", "instance?");
  
  public static final AFn const__22 = (AFn)Symbol.intern(null, "clojure.lang.ILookup");
  
  public static final Var const__23 = (Var)RT.var("clojure.core.match", "rows");
  
  public static final Var const__24 = (Var)RT.var("clojure.core.match", "occurrences");
  
  public static final Var const__25 = (Var)RT.var("clojure.core", "first");
  
  public static final Keyword const__26 = (Keyword)RT.keyword(null, "focr");
  
  public static final Keyword const__27 = (Keyword)RT.keyword(null, "only?");
  
  public static final Var const__28 = (Var)RT.var("clojure.core", "atom");
  
  public static final Var const__29 = (Var)RT.var("clojure.core.match", "get-all-keys");
  
  public static final Var const__30 = (Var)RT.var("clojure.core", "assoc");
  
  public static final Keyword const__31 = (Keyword)RT.keyword(null, "all-keys");
  
  public static final Keyword const__32 = (Keyword)RT.keyword(null, "wc-map");
  
  public static final Var const__33 = (Var)RT.var("clojure.core", "zipmap");
  
  public static final Var const__34 = (Var)RT.var("clojure.core", "repeatedly");
  
  public static final Var const__35 = (Var)RT.var("clojure.core.match", "wildcard-pattern");
  
  public static final Keyword const__36 = (Keyword)RT.keyword(null, "ocrs-map");
  
  public static final Var const__37 = (Var)RT.var("clojure.core", "map");
  
  public static final Var const__38 = (Var)RT.var("clojure.core.match", "specialize-map-pattern-matrix");
  
  public static final Var const__39 = (Var)RT.var("clojure.core.match", "map-pattern-matrix-ocrs");
  
  public static final Var const__40 = (Var)RT.var("clojure.core.match", "pattern-matrix");
  
  static final KeywordLookupSite __site__0__;
  
  static ILookupThunk __thunk__0__ = __site__0__ = new KeywordLookupSite(RT.keyword(null, "only"));
  
  static final KeywordLookupSite __site__1__;
  
  static ILookupThunk __thunk__1__ = __site__1__ = new KeywordLookupSite(RT.keyword(null, "m"));
  
  public MapPattern(Object paramObject1, Object paramObject2) { this.m = paramObject1;
    this._meta = paramObject2; }
  
  public static IPersistentVector getBasis() { return Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "_meta")); }
  
  public Object specialize_matrix(Object matrix) {
    Object rows = ((IFn)const__23.getRawRoot()).invoke(matrix);
    matrix = null;
    Object ocrs = ((IFn)const__24.getRawRoot()).invoke(matrix);
    Object focr = ((IFn)const__25.getRawRoot()).invoke(ocrs);
    Object env = RT.mapUniqueKeys(new Object[] { const__26, focr, const__27, ((IFn)const__28.getRawRoot()).invoke(Boolean.FALSE) });
    Object all_keys = ((IFn)const__29.getRawRoot()).invoke(rows, env);
    env = null;
    focr = null;
    all_keys = null;
    Object env_SINGLEQUOTE_ = ((IFn)const__30.getRawRoot()).invoke(env, const__31, all_keys, const__32, ((IFn)const__33.getRawRoot()).invoke(all_keys, ((IFn)const__34.getRawRoot()).invoke(const__35.getRawRoot())), const__36, ((IFn)const__33.getRawRoot()).invoke(all_keys, ((IFn)const__37.getRawRoot()).invoke(new fn__36374(focr), all_keys)));
    rows = null;
    Object nrows = ((IFn)const__38.getRawRoot()).invoke(rows, env_SINGLEQUOTE_);
    ocrs = null;
    env_SINGLEQUOTE_ = null;
    Object nocrs = ((IFn)const__39.getRawRoot()).invoke(ocrs, env_SINGLEQUOTE_);
    nrows = null;
    nocrs = null;
    this = null;
    return ((IFn)const__40.getRawRoot()).invoke(nrows, nocrs);
  }
  
  public Object to_source_STAR_(Object ocr) { if (const__8.get() != null) {
      if (const__8.get() != Boolean.FALSE) {
        ocr = null;
        this = null;
      } 
    } else {
      const__8.get();
    } 
    if (const__14.get() != null) {
      if (const__14.get() != Boolean.FALSE) {
        ocr = null;
        this = null;
      } 
    } else {
      const__14.get();
    } 
    if (const__20 != null) {
      if (const__20 != Boolean.FALSE) {
        ocr = null;
        this = null;
      } 
    } else {
      const__20;
    } 
    return null; }
  
  public Object valAt(Object k, Object not_found) {
    Object G__36373 = k = null;
    switch (Util.hash(G__36373) >> 2 & true) {
      case 0:
        if (G__36373 == const__5);
        break;
      case 1:
        if (G__36373 == const__6);
        break;
    } 
    return null;
  }
  
  public Object valAt(Object k) { k = null;
    return ((ILookup)this).valAt(k, null); }
  
  public IObj withMeta(IPersistentMap new_meta) { new_meta = null;
    return (IObj)new MapPattern(this.m, new_meta); }
  
  public IPersistentMap meta() { return (IPersistentMap)this._meta; }
  
  public boolean equals(Object other) {
    boolean and__5514__auto__36377 = other instanceof MapPattern;
    other = null;
    if (__thunk__1__ != __thunk__1__.get(other)) {
      other;
    } else {
      __thunk__1__.get(other);
    } 
    return and__5514__auto__36377 ? Util.equiv(this.m, (__thunk__1__ = __site__1__.fault(other)).get(other)) : and__5514__auto__36377;
  }
  
  public String toString() { if (__thunk__0__ != __thunk__0__.get(this._meta)) {
      this._meta;
    } else {
      __thunk__0__.get(this._meta);
    } 
    Object or__5516__auto__36378 = (__thunk__0__ = __site__0__.fault(this._meta)).get(this._meta);
    if (or__5516__auto__36378 != null) {
      if (or__5516__auto__36378 != Boolean.FALSE)
        or__5516__auto__36378 = null; 
    } else {
      or__5516__auto__36378;
    } 
    this = null;
    return (String)((IFn)const__0.getRawRoot()).invoke(this.m, " :only ", PersistentVector.EMPTY); }
}
