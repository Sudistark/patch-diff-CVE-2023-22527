package clojure.core.match;

import clojure.core.match.protocols.INodeCompile;
import clojure.lang.AFn;
import clojure.lang.APersistentMap;
import clojure.lang.Associative;
import clojure.lang.Counted;
import clojure.lang.IFn;
import clojure.lang.IHashEq;
import clojure.lang.IKeywordLookup;
import clojure.lang.ILookup;
import clojure.lang.ILookupThunk;
import clojure.lang.IMapEntry;
import clojure.lang.IObj;
import clojure.lang.IPersistentCollection;
import clojure.lang.IPersistentMap;
import clojure.lang.IPersistentVector;
import clojure.lang.IRecord;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.MapEntry;
import clojure.lang.Numbers;
import clojure.lang.PersistentHashSet;
import clojure.lang.PersistentVector;
import clojure.lang.RT;
import clojure.lang.RecordIterator;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Util;
import clojure.lang.Var;
import java.io.Serializable;
import java.util.Collection;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

public final class FailNode implements INodeCompile, IRecord, IHashEq, IObj, ILookup, IKeywordLookup, IPersistentMap, Map, Serializable {
  public final Object __meta;
  
  public final Object __extmap;
  
  int __hash;
  
  int __hasheq;
  
  public static final Var const__0 = (Var)RT.var("clojure.core", "set");
  
  public static final Var const__1 = (Var)RT.var("clojure.core", "vals");
  
  public static final Var const__2 = (Var)RT.var("clojure.core", "keys");
  
  public static final Var const__4 = (Var)RT.var("clojure.core", "some");
  
  public static final Var const__7 = (Var)RT.var("clojure.core", "contains?");
  
  public static final Var const__8 = (Var)RT.var("clojure.core", "dissoc");
  
  public static final Var const__9 = (Var)RT.var("clojure.core", "with-meta");
  
  public static final Var const__10 = (Var)RT.var("clojure.core", "into");
  
  public static final Var const__11 = (Var)RT.var("clojure.core", "not-empty");
  
  public static final Var const__12 = (Var)RT.var("clojure.core", "identical?");
  
  public static final Var const__13 = (Var)RT.var("clojure.core", "assoc");
  
  public static final Var const__14 = (Var)RT.var("clojure.core", "seq");
  
  public static final Var const__15 = (Var)RT.var("clojure.core", "concat");
  
  public static final Var const__16 = (Var)RT.var("clojure.core", "not");
  
  public static final Var const__17 = (Var)RT.var("clojure.core", "class");
  
  public static final Var const__18 = (Var)RT.var("clojure.core", "imap-cons");
  
  public static final Var const__19 = (Var)RT.var("clojure.core", "str");
  
  public static final Var const__28 = (Var)RT.var("clojure.core.match", "*recur-present*");
  
  public static final Var const__29 = (Var)RT.var("clojure.core", "list");
  
  public static final AFn const__30 = (AFn)Symbol.intern(null, "throw");
  
  public static final Var const__31 = (Var)RT.var("clojure.core.match", "*clojurescript*");
  
  public static final AFn const__32 = (AFn)Symbol.intern("js", "Error.");
  
  public static final AFn const__33 = (AFn)Symbol.intern("clojure.core", "str");
  
  public static final AFn const__34 = (AFn)Symbol.intern(null, "java.lang.Exception.");
  
  public static final AFn const__35 = (AFn)Symbol.intern("clojure.core", "str");
  
  public static final Var const__36 = (Var)RT.var("clojure.core.match", "backtrack-expr");
  
  public FailNode(Object paramObject1, Object paramObject2, int paramInt1, int paramInt2) { this.__meta = paramObject1;
    this.__extmap = paramObject2;
    this.__hash = paramInt1;
    this.__hasheq = paramInt2; }
  
  public FailNode() { this(null, null, 0, 0); }
  
  public FailNode(Object paramObject1, Object paramObject2) { this(paramObject1, paramObject2, 0, 0); }
  
  public static IPersistentVector getBasis() { return Tuple.create(); }
  
  public static FailNode create(IPersistentMap paramIPersistentMap) { return new FailNode(null, RT.seqOrElse(paramIPersistentMap), 0, 0); }
  
  public Object n_to_clj() { // Byte code:
    //   0: getstatic clojure/core/match/FailNode.const__28 : Lclojure/lang/Var;
    //   3: invokevirtual get : ()Ljava/lang/Object;
    //   6: dup
    //   7: ifnull -> 340
    //   10: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   13: if_acmpeq -> 341
    //   16: getstatic clojure/core/match/FailNode.const__14 : Lclojure/lang/Var;
    //   19: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   22: checkcast clojure/lang/IFn
    //   25: getstatic clojure/core/match/FailNode.const__15 : Lclojure/lang/Var;
    //   28: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   31: checkcast clojure/lang/IFn
    //   34: getstatic clojure/core/match/FailNode.const__29 : Lclojure/lang/Var;
    //   37: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   40: checkcast clojure/lang/IFn
    //   43: getstatic clojure/core/match/FailNode.const__30 : Lclojure/lang/AFn;
    //   46: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   51: getstatic clojure/core/match/FailNode.const__29 : Lclojure/lang/Var;
    //   54: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   57: checkcast clojure/lang/IFn
    //   60: getstatic clojure/core/match/FailNode.const__31 : Lclojure/lang/Var;
    //   63: invokevirtual get : ()Ljava/lang/Object;
    //   66: dup
    //   67: ifnull -> 199
    //   70: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   73: if_acmpeq -> 200
    //   76: getstatic clojure/core/match/FailNode.const__14 : Lclojure/lang/Var;
    //   79: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   82: checkcast clojure/lang/IFn
    //   85: getstatic clojure/core/match/FailNode.const__15 : Lclojure/lang/Var;
    //   88: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   91: checkcast clojure/lang/IFn
    //   94: getstatic clojure/core/match/FailNode.const__29 : Lclojure/lang/Var;
    //   97: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   100: checkcast clojure/lang/IFn
    //   103: getstatic clojure/core/match/FailNode.const__32 : Lclojure/lang/AFn;
    //   106: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   111: getstatic clojure/core/match/FailNode.const__29 : Lclojure/lang/Var;
    //   114: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   117: checkcast clojure/lang/IFn
    //   120: getstatic clojure/core/match/FailNode.const__14 : Lclojure/lang/Var;
    //   123: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   126: checkcast clojure/lang/IFn
    //   129: getstatic clojure/core/match/FailNode.const__15 : Lclojure/lang/Var;
    //   132: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   135: checkcast clojure/lang/IFn
    //   138: getstatic clojure/core/match/FailNode.const__29 : Lclojure/lang/Var;
    //   141: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   144: checkcast clojure/lang/IFn
    //   147: getstatic clojure/core/match/FailNode.const__33 : Lclojure/lang/AFn;
    //   150: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   155: getstatic clojure/core/match/FailNode.const__29 : Lclojure/lang/Var;
    //   158: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   161: checkcast clojure/lang/IFn
    //   164: ldc 'No match found.'
    //   166: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   171: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   176: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   181: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   186: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   191: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   196: goto -> 320
    //   199: pop
    //   200: getstatic clojure/core/match/FailNode.const__14 : Lclojure/lang/Var;
    //   203: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   206: checkcast clojure/lang/IFn
    //   209: getstatic clojure/core/match/FailNode.const__15 : Lclojure/lang/Var;
    //   212: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   215: checkcast clojure/lang/IFn
    //   218: getstatic clojure/core/match/FailNode.const__29 : Lclojure/lang/Var;
    //   221: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   224: checkcast clojure/lang/IFn
    //   227: getstatic clojure/core/match/FailNode.const__34 : Lclojure/lang/AFn;
    //   230: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   235: getstatic clojure/core/match/FailNode.const__29 : Lclojure/lang/Var;
    //   238: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   241: checkcast clojure/lang/IFn
    //   244: getstatic clojure/core/match/FailNode.const__14 : Lclojure/lang/Var;
    //   247: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   250: checkcast clojure/lang/IFn
    //   253: getstatic clojure/core/match/FailNode.const__15 : Lclojure/lang/Var;
    //   256: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   259: checkcast clojure/lang/IFn
    //   262: getstatic clojure/core/match/FailNode.const__29 : Lclojure/lang/Var;
    //   265: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   268: checkcast clojure/lang/IFn
    //   271: getstatic clojure/core/match/FailNode.const__35 : Lclojure/lang/AFn;
    //   274: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   279: getstatic clojure/core/match/FailNode.const__29 : Lclojure/lang/Var;
    //   282: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   285: checkcast clojure/lang/IFn
    //   288: ldc 'No match found.'
    //   290: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   295: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   300: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   305: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   310: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   315: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   320: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   325: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   330: aconst_null
    //   331: astore_0
    //   332: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   337: goto -> 357
    //   340: pop
    //   341: getstatic clojure/core/match/FailNode.const__36 : Lclojure/lang/Var;
    //   344: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   347: checkcast clojure/lang/IFn
    //   350: aconst_null
    //   351: astore_0
    //   352: invokeinterface invoke : ()Ljava/lang/Object;
    //   357: areturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #396	-> 0
    //   #399	-> 0
    //   #399	-> 22
    //   #399	-> 31
    //   #399	-> 40
    //   #399	-> 46
    //   #399	-> 57
    //   #401	-> 60
    //   #401	-> 82
    //   #401	-> 91
    //   #401	-> 100
    //   #401	-> 106
    //   #401	-> 117
    //   #401	-> 126
    //   #401	-> 135
    //   #401	-> 144
    //   #401	-> 150
    //   #401	-> 161
    //   #401	-> 166
    //   #401	-> 171
    //   #401	-> 176
    //   #401	-> 181
    //   #401	-> 186
    //   #401	-> 191
    //   #401	-> 206
    //   #401	-> 215
    //   #401	-> 224
    //   #401	-> 230
    //   #401	-> 241
    //   #401	-> 250
    //   #401	-> 259
    //   #401	-> 268
    //   #401	-> 274
    //   #401	-> 285
    //   #401	-> 290
    //   #401	-> 295
    //   #401	-> 300
    //   #401	-> 305
    //   #401	-> 310
    //   #401	-> 315
    //   #399	-> 320
    //   #399	-> 325
    //   #399	-> 330
    //   #404	-> 347
    //   #404	-> 350
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   0	357	0	this	Lclojure/core/match/FailNode; }
  
  public int hasheq() {
    int hq__7768__auto__35975 = this.__hasheq, h__7769__auto__35974 = RT.intCast(0x7BF92C66L ^ APersistentMap.mapHasheq((IPersistentMap)this));
    this.__hasheq = h__7769__auto__35974;
    return (hq__7768__auto__35975 == 0L) ? h__7769__auto__35974 : hq__7768__auto__35975;
  }
  
  public int hashCode() {
    int hash__7771__auto__35977 = this.__hash, h__7772__auto__35976 = APersistentMap.mapHash((IPersistentMap)this);
    this.__hash = h__7772__auto__35976;
    return (hash__7771__auto__35977 == 0L) ? h__7772__auto__35976 : hash__7771__auto__35977;
  }
  
  public boolean equals(Object G__35967) { G__35967 = null;
    return APersistentMap.mapEquals((IPersistentMap)this, G__35967); }
  
  public IPersistentMap meta() { return (IPersistentMap)this.__meta; }
  
  public IObj withMeta(IPersistentMap G__35967) { G__35967 = null;
    return (IObj)new FailNode(G__35967, this.__extmap, this.__hash, this.__hasheq); }
  
  public Object valAt(Object k__7777__auto__) { k__7777__auto__ = null;
    return ((ILookup)this).valAt(k__7777__auto__, null); }
  
  public Object valAt(Object k__7779__auto__, Object else__7780__auto__) { k__7779__auto__;
    k__7779__auto__ = null;
    else__7780__auto__ = null;
    this = null;
    return RT.get(this.__extmap, k__7779__auto__, else__7780__auto__); }
  
  public ILookupThunk getLookupThunk(Keyword k__7782__auto__) { ((IFn)const__17.getRawRoot()).invoke(this);
    k__7782__auto__ = null;
    k__7782__auto__;
    return (ILookupThunk)null; }
  
  public int count() { return RT.intCast(Numbers.add(0L, RT.count(this.__extmap))); }
  
  public IPersistentCollection empty() { throw (Throwable)new UnsupportedOperationException((String)((IFn)const__19.getRawRoot()).invoke("Can't create empty: ", "clojure.core.match.FailNode")); }
  
  public IPersistentCollection cons(Object e__7786__auto__) { e__7786__auto__ = null;
    this = null;
    return (IPersistentCollection)((IFn)const__18).invoke(this, e__7786__auto__); }
  
  public boolean equiv(Object G__35967) {
    boolean or__5516__auto__35978 = Util.identical(this, G__35967);
    Object G__35967 = G__35967 = null;
    G__35967 = null;
    return RT.booleanCast(or__5516__auto__35978 ? (or__5516__auto__35978 ? Boolean.TRUE : Boolean.FALSE) : (Util.identical(((IFn)const__17.getRawRoot()).invoke(this), ((IFn)const__17.getRawRoot()).invoke(G__35967)) ? (Util.equiv(this.__extmap, ((FailNode)G__35967).__extmap) ? Boolean.TRUE : Boolean.FALSE) : null));
  }
  
  public boolean containsKey(Object k__7789__auto__) { k__7789__auto__ = null;
    this = null;
    return ((Boolean)((IFn)const__16.getRawRoot()).invoke(Util.identical(this, ((ILookup)this).valAt(k__7789__auto__, this)) ? Boolean.TRUE : Boolean.FALSE)).booleanValue(); }
  
  public IMapEntry entryAt(Object k__7791__auto__) {
    Object v__7792__auto__35979 = ((ILookup)this).valAt(k__7791__auto__, this);
    k__7791__auto__ = null;
    v__7792__auto__35979 = null;
    this = null;
    return (IMapEntry)(Util.identical(this, v__7792__auto__35979) ? null : MapEntry.create(k__7791__auto__, v__7792__auto__35979));
  }
  
  public ISeq seq() { this = null;
    return (ISeq)((IFn)const__14.getRawRoot()).invoke(((IFn)const__15.getRawRoot()).invoke(PersistentVector.EMPTY, this.__extmap)); }
  
  public Iterator iterator() { return (Iterator)new RecordIterator((ILookup)this, (IPersistentVector)PersistentVector.EMPTY, (Iterator)RT.iter(this.__extmap)); }
  
  public IPersistentMap assoc(Object k__7796__auto__, Object G__35967) { const__12.getRawRoot();
    k__7796__auto__;
    k__7796__auto__ = null;
    G__35967 = null;
    return (IPersistentMap)new FailNode(this.__meta, ((IFn)const__13.getRawRoot()).invoke(this.__extmap, k__7796__auto__, G__35967)); }
  
  public IPersistentMap without(Object k__7798__auto__) { if (((IFn)const__7.getRawRoot()).invoke(PersistentHashSet.EMPTY, k__7798__auto__) != null) {
      if (((IFn)const__7.getRawRoot()).invoke(PersistentHashSet.EMPTY, k__7798__auto__) != Boolean.FALSE) {
        k__7798__auto__ = null;
        this = null;
      } 
    } else {
      ((IFn)const__7.getRawRoot()).invoke(PersistentHashSet.EMPTY, k__7798__auto__);
    } 
    k__7798__auto__ = null;
    return (IPersistentMap)new FailNode(this.__meta, ((IFn)const__11.getRawRoot()).invoke(((IFn)const__8.getRawRoot()).invoke(this.__extmap, k__7798__auto__))); }
  
  public int size() { this = null;
    return ((Counted)this).count(); }
  
  public boolean isEmpty() { return Util.equiv(0L, ((Counted)this).count()); }
  
  public boolean containsValue(Object v__7802__auto__) { v__7802__auto__ = null;
    return RT.booleanCast(((IFn)const__4.getRawRoot()).invoke(RT.set(new Object[] { v__7802__auto__ }, ), ((IFn)const__1.getRawRoot()).invoke(this))); }
  
  public Object get(Object k__7804__auto__) { k__7804__auto__ = null;
    return ((ILookup)this).valAt(k__7804__auto__); }
  
  public Object put(Object k__7806__auto__, Object v__7807__auto__) { throw (Throwable)new UnsupportedOperationException(); }
  
  public Object remove(Object k__7809__auto__) { throw (Throwable)new UnsupportedOperationException(); }
  
  public void putAll(Map m__7811__auto__) { throw (Throwable)new UnsupportedOperationException(); }
  
  public void clear() { throw (Throwable)new UnsupportedOperationException(); }
  
  public Set keySet() { this = null;
    return (Set)((IFn)const__0.getRawRoot()).invoke(((IFn)const__2.getRawRoot()).invoke(this)); }
  
  public Collection values() { this = null;
    return (Collection)((IFn)const__1.getRawRoot()).invoke(this); }
  
  public Set entrySet() { this = null;
    return (Set)((IFn)const__0.getRawRoot()).invoke(this); }
}
