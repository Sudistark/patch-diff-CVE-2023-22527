package clojure.core.match;

import clojure.core.match.protocols.IPatternCompile;
import clojure.lang.AFn;
import clojure.lang.IFn;
import clojure.lang.ILookup;
import clojure.lang.ILookupThunk;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.IPersistentVector;
import clojure.lang.IType;
import clojure.lang.Keyword;
import clojure.lang.KeywordLookupSite;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Util;
import clojure.lang.Var;

public final class LiteralPattern implements IPatternCompile, ILookup, IObj, IType {
  public final Object l;
  
  public final Object _meta;
  
  public static final Var const__1 = (Var)RT.var("clojure.core", "pr-str");
  
  public static final Keyword const__5 = (Keyword)RT.keyword(null, "l");
  
  public static final Keyword const__6 = (Keyword)RT.keyword("clojure.core.match", "tag");
  
  public static final Keyword const__7 = (Keyword)RT.keyword("clojure.core.match", "literal");
  
  public static final Var const__8 = (Var)RT.var("clojure.core", "seq");
  
  public static final Var const__9 = (Var)RT.var("clojure.core", "concat");
  
  public static final Var const__10 = (Var)RT.var("clojure.core", "list");
  
  public static final AFn const__11 = (AFn)Symbol.intern("clojure.core", "empty?");
  
  public static final Var const__12 = (Var)RT.var("clojure.core", "symbol?");
  
  public static final Var const__13 = (Var)RT.var("clojure.core", "not");
  
  public static final Var const__15 = (Var)RT.var("clojure.core", "meta");
  
  public static final AFn const__16 = (AFn)Symbol.intern("clojure.core", "=");
  
  public static final AFn const__17 = (AFn)Symbol.intern(null, "quote");
  
  public static final Var const__18 = (Var)RT.var("clojure.core.match", "*clojurescript*");
  
  public static final Var const__19 = (Var)RT.var("clojure.core", "number?");
  
  public static final Var const__20 = (Var)RT.var("clojure.core", "string?");
  
  public static final Var const__21 = (Var)RT.var("clojure.core", "true?");
  
  public static final Var const__22 = (Var)RT.var("clojure.core", "false?");
  
  public static final AFn const__23 = (AFn)Symbol.intern("clojure.core", "identical?");
  
  public static final Var const__24 = (Var)RT.var("clojure.core", "keyword?");
  
  public static final AFn const__25 = (AFn)Symbol.intern("cljs.core", "keyword-identical?");
  
  public static final Keyword const__26 = (Keyword)RT.keyword(null, "else");
  
  public static final AFn const__27 = (AFn)Symbol.intern("clojure.core", "=");
  
  static final KeywordLookupSite __site__0__;
  
  static ILookupThunk __thunk__0__ = __site__0__ = new KeywordLookupSite(RT.keyword(null, "l"));
  
  static final KeywordLookupSite __site__1__;
  
  static ILookupThunk __thunk__1__ = __site__1__ = new KeywordLookupSite(RT.keyword(null, "local"));
  
  public LiteralPattern(Object paramObject1, Object paramObject2) { this.l = paramObject1;
    this._meta = paramObject2; }
  
  public static IPersistentVector getBasis() { return Tuple.create(Symbol.intern(null, "l"), Symbol.intern(null, "_meta")); }
  
  public Object to_source_STAR_(Object ocr) { // Byte code:
    //   0: aload_0
    //   1: getfield l : Ljava/lang/Object;
    //   4: getstatic clojure/lang/PersistentList.EMPTY : Lclojure/lang/PersistentList$EmptyList;
    //   7: invokestatic equiv : (Ljava/lang/Object;Ljava/lang/Object;)Z
    //   10: ifeq -> 81
    //   13: getstatic clojure/core/match/LiteralPattern.const__8 : Lclojure/lang/Var;
    //   16: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   19: checkcast clojure/lang/IFn
    //   22: getstatic clojure/core/match/LiteralPattern.const__9 : Lclojure/lang/Var;
    //   25: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   28: checkcast clojure/lang/IFn
    //   31: getstatic clojure/core/match/LiteralPattern.const__10 : Lclojure/lang/Var;
    //   34: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   37: checkcast clojure/lang/IFn
    //   40: getstatic clojure/core/match/LiteralPattern.const__11 : Lclojure/lang/AFn;
    //   43: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   48: getstatic clojure/core/match/LiteralPattern.const__10 : Lclojure/lang/Var;
    //   51: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   54: checkcast clojure/lang/IFn
    //   57: aload_1
    //   58: aconst_null
    //   59: astore_1
    //   60: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   65: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   70: aconst_null
    //   71: astore_0
    //   72: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   77: goto -> 885
    //   80: athrow
    //   81: getstatic clojure/core/match/LiteralPattern.const__12 : Lclojure/lang/Var;
    //   84: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   87: checkcast clojure/lang/IFn
    //   90: aload_0
    //   91: getfield l : Ljava/lang/Object;
    //   94: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   99: astore_2
    //   100: aload_2
    //   101: dup
    //   102: ifnull -> 186
    //   105: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   108: if_acmpeq -> 187
    //   111: getstatic clojure/core/match/LiteralPattern.const__13 : Lclojure/lang/Var;
    //   114: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   117: checkcast clojure/lang/IFn
    //   120: getstatic clojure/core/match/LiteralPattern.__thunk__1__ : Lclojure/lang/ILookupThunk;
    //   123: dup
    //   124: getstatic clojure/core/match/LiteralPattern.const__15 : Lclojure/lang/Var;
    //   127: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   130: checkcast clojure/lang/IFn
    //   133: aload_0
    //   134: getfield l : Ljava/lang/Object;
    //   137: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   142: dup_x2
    //   143: invokeinterface get : (Ljava/lang/Object;)Ljava/lang/Object;
    //   148: dup_x2
    //   149: if_acmpeq -> 156
    //   152: pop
    //   153: goto -> 178
    //   156: swap
    //   157: pop
    //   158: dup
    //   159: getstatic clojure/core/match/LiteralPattern.__site__1__ : Lclojure/lang/KeywordLookupSite;
    //   162: swap
    //   163: invokeinterface fault : (Ljava/lang/Object;)Lclojure/lang/ILookupThunk;
    //   168: dup
    //   169: putstatic clojure/core/match/LiteralPattern.__thunk__1__ : Lclojure/lang/ILookupThunk;
    //   172: swap
    //   173: invokeinterface get : (Ljava/lang/Object;)Ljava/lang/Object;
    //   178: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   183: goto -> 190
    //   186: pop
    //   187: aload_2
    //   188: aconst_null
    //   189: astore_2
    //   190: dup
    //   191: ifnull -> 344
    //   194: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   197: if_acmpeq -> 345
    //   200: getstatic clojure/core/match/LiteralPattern.const__8 : Lclojure/lang/Var;
    //   203: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   206: checkcast clojure/lang/IFn
    //   209: getstatic clojure/core/match/LiteralPattern.const__9 : Lclojure/lang/Var;
    //   212: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   215: checkcast clojure/lang/IFn
    //   218: getstatic clojure/core/match/LiteralPattern.const__10 : Lclojure/lang/Var;
    //   221: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   224: checkcast clojure/lang/IFn
    //   227: getstatic clojure/core/match/LiteralPattern.const__16 : Lclojure/lang/AFn;
    //   230: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   235: getstatic clojure/core/match/LiteralPattern.const__10 : Lclojure/lang/Var;
    //   238: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   241: checkcast clojure/lang/IFn
    //   244: aload_1
    //   245: aconst_null
    //   246: astore_1
    //   247: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   252: getstatic clojure/core/match/LiteralPattern.const__10 : Lclojure/lang/Var;
    //   255: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   258: checkcast clojure/lang/IFn
    //   261: getstatic clojure/core/match/LiteralPattern.const__8 : Lclojure/lang/Var;
    //   264: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   267: checkcast clojure/lang/IFn
    //   270: getstatic clojure/core/match/LiteralPattern.const__9 : Lclojure/lang/Var;
    //   273: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   276: checkcast clojure/lang/IFn
    //   279: getstatic clojure/core/match/LiteralPattern.const__10 : Lclojure/lang/Var;
    //   282: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   285: checkcast clojure/lang/IFn
    //   288: getstatic clojure/core/match/LiteralPattern.const__17 : Lclojure/lang/AFn;
    //   291: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   296: getstatic clojure/core/match/LiteralPattern.const__10 : Lclojure/lang/Var;
    //   299: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   302: checkcast clojure/lang/IFn
    //   305: aload_0
    //   306: getfield l : Ljava/lang/Object;
    //   309: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   314: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   319: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   324: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   329: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   334: aconst_null
    //   335: astore_0
    //   336: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   341: goto -> 885
    //   344: pop
    //   345: getstatic clojure/core/match/LiteralPattern.const__18 : Lclojure/lang/Var;
    //   348: invokevirtual get : ()Ljava/lang/Object;
    //   351: astore_2
    //   352: aload_2
    //   353: dup
    //   354: ifnull -> 546
    //   357: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   360: if_acmpeq -> 547
    //   363: getstatic clojure/core/match/LiteralPattern.const__19 : Lclojure/lang/Var;
    //   366: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   369: checkcast clojure/lang/IFn
    //   372: aload_0
    //   373: getfield l : Ljava/lang/Object;
    //   376: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   381: astore_3
    //   382: aload_3
    //   383: dup
    //   384: ifnull -> 399
    //   387: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   390: if_acmpeq -> 400
    //   393: aload_3
    //   394: aconst_null
    //   395: astore_3
    //   396: goto -> 543
    //   399: pop
    //   400: getstatic clojure/core/match/LiteralPattern.const__20 : Lclojure/lang/Var;
    //   403: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   406: checkcast clojure/lang/IFn
    //   409: aload_0
    //   410: getfield l : Ljava/lang/Object;
    //   413: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   418: astore #4
    //   420: aload #4
    //   422: dup
    //   423: ifnull -> 440
    //   426: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   429: if_acmpeq -> 441
    //   432: aload #4
    //   434: aconst_null
    //   435: astore #4
    //   437: goto -> 543
    //   440: pop
    //   441: getstatic clojure/core/match/LiteralPattern.const__21 : Lclojure/lang/Var;
    //   444: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   447: checkcast clojure/lang/IFn
    //   450: aload_0
    //   451: getfield l : Ljava/lang/Object;
    //   454: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   459: astore #5
    //   461: aload #5
    //   463: dup
    //   464: ifnull -> 481
    //   467: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   470: if_acmpeq -> 482
    //   473: aload #5
    //   475: aconst_null
    //   476: astore #5
    //   478: goto -> 543
    //   481: pop
    //   482: getstatic clojure/core/match/LiteralPattern.const__22 : Lclojure/lang/Var;
    //   485: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   488: checkcast clojure/lang/IFn
    //   491: aload_0
    //   492: getfield l : Ljava/lang/Object;
    //   495: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   500: astore #6
    //   502: aload #6
    //   504: dup
    //   505: ifnull -> 522
    //   508: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   511: if_acmpeq -> 523
    //   514: aload #6
    //   516: aconst_null
    //   517: astore #6
    //   519: goto -> 543
    //   522: pop
    //   523: aload_0
    //   524: getfield l : Ljava/lang/Object;
    //   527: aconst_null
    //   528: invokestatic identical : (Ljava/lang/Object;Ljava/lang/Object;)Z
    //   531: ifeq -> 540
    //   534: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   537: goto -> 543
    //   540: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   543: goto -> 550
    //   546: pop
    //   547: aload_2
    //   548: aconst_null
    //   549: astore_2
    //   550: dup
    //   551: ifnull -> 645
    //   554: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   557: if_acmpeq -> 646
    //   560: getstatic clojure/core/match/LiteralPattern.const__8 : Lclojure/lang/Var;
    //   563: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   566: checkcast clojure/lang/IFn
    //   569: getstatic clojure/core/match/LiteralPattern.const__9 : Lclojure/lang/Var;
    //   572: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   575: checkcast clojure/lang/IFn
    //   578: getstatic clojure/core/match/LiteralPattern.const__10 : Lclojure/lang/Var;
    //   581: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   584: checkcast clojure/lang/IFn
    //   587: getstatic clojure/core/match/LiteralPattern.const__23 : Lclojure/lang/AFn;
    //   590: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   595: getstatic clojure/core/match/LiteralPattern.const__10 : Lclojure/lang/Var;
    //   598: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   601: checkcast clojure/lang/IFn
    //   604: aload_1
    //   605: aconst_null
    //   606: astore_1
    //   607: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   612: getstatic clojure/core/match/LiteralPattern.const__10 : Lclojure/lang/Var;
    //   615: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   618: checkcast clojure/lang/IFn
    //   621: aload_0
    //   622: getfield l : Ljava/lang/Object;
    //   625: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   630: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   635: aconst_null
    //   636: astore_0
    //   637: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   642: goto -> 885
    //   645: pop
    //   646: getstatic clojure/core/match/LiteralPattern.const__18 : Lclojure/lang/Var;
    //   649: invokevirtual get : ()Ljava/lang/Object;
    //   652: astore_2
    //   653: aload_2
    //   654: dup
    //   655: ifnull -> 685
    //   658: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   661: if_acmpeq -> 686
    //   664: getstatic clojure/core/match/LiteralPattern.const__24 : Lclojure/lang/Var;
    //   667: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   670: checkcast clojure/lang/IFn
    //   673: aload_0
    //   674: getfield l : Ljava/lang/Object;
    //   677: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   682: goto -> 689
    //   685: pop
    //   686: aload_2
    //   687: aconst_null
    //   688: astore_2
    //   689: dup
    //   690: ifnull -> 784
    //   693: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   696: if_acmpeq -> 785
    //   699: getstatic clojure/core/match/LiteralPattern.const__8 : Lclojure/lang/Var;
    //   702: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   705: checkcast clojure/lang/IFn
    //   708: getstatic clojure/core/match/LiteralPattern.const__9 : Lclojure/lang/Var;
    //   711: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   714: checkcast clojure/lang/IFn
    //   717: getstatic clojure/core/match/LiteralPattern.const__10 : Lclojure/lang/Var;
    //   720: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   723: checkcast clojure/lang/IFn
    //   726: getstatic clojure/core/match/LiteralPattern.const__25 : Lclojure/lang/AFn;
    //   729: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   734: getstatic clojure/core/match/LiteralPattern.const__10 : Lclojure/lang/Var;
    //   737: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   740: checkcast clojure/lang/IFn
    //   743: aload_1
    //   744: aconst_null
    //   745: astore_1
    //   746: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   751: getstatic clojure/core/match/LiteralPattern.const__10 : Lclojure/lang/Var;
    //   754: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   757: checkcast clojure/lang/IFn
    //   760: aload_0
    //   761: getfield l : Ljava/lang/Object;
    //   764: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   769: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   774: aconst_null
    //   775: astore_0
    //   776: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   781: goto -> 885
    //   784: pop
    //   785: getstatic clojure/core/match/LiteralPattern.const__26 : Lclojure/lang/Keyword;
    //   788: dup
    //   789: ifnull -> 883
    //   792: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   795: if_acmpeq -> 884
    //   798: getstatic clojure/core/match/LiteralPattern.const__8 : Lclojure/lang/Var;
    //   801: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   804: checkcast clojure/lang/IFn
    //   807: getstatic clojure/core/match/LiteralPattern.const__9 : Lclojure/lang/Var;
    //   810: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   813: checkcast clojure/lang/IFn
    //   816: getstatic clojure/core/match/LiteralPattern.const__10 : Lclojure/lang/Var;
    //   819: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   822: checkcast clojure/lang/IFn
    //   825: getstatic clojure/core/match/LiteralPattern.const__27 : Lclojure/lang/AFn;
    //   828: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   833: getstatic clojure/core/match/LiteralPattern.const__10 : Lclojure/lang/Var;
    //   836: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   839: checkcast clojure/lang/IFn
    //   842: aload_1
    //   843: aconst_null
    //   844: astore_1
    //   845: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   850: getstatic clojure/core/match/LiteralPattern.const__10 : Lclojure/lang/Var;
    //   853: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   856: checkcast clojure/lang/IFn
    //   859: aload_0
    //   860: getfield l : Ljava/lang/Object;
    //   863: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   868: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   873: aconst_null
    //   874: astore_0
    //   875: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   880: goto -> 885
    //   883: pop
    //   884: aconst_null
    //   885: areturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #898	-> 0
    //   #924	-> 0
    //   #925	-> 7
    //   #924	-> 19
    //   #924	-> 28
    //   #924	-> 37
    //   #924	-> 43
    //   #924	-> 54
    //   #924	-> 60
    //   #924	-> 65
    //   #924	-> 70
    //   #924	-> 81
    //   #928	-> 87
    //   #928	-> 94
    //   #928	-> 100
    //   #928	-> 117
    //   #928	-> 120
    //   #928	-> 130
    //   #928	-> 137
    //   #928	-> 142
    //   #928	-> 178
    //   #924	-> 206
    //   #924	-> 215
    //   #924	-> 224
    //   #924	-> 230
    //   #924	-> 241
    //   #924	-> 247
    //   #924	-> 258
    //   #924	-> 267
    //   #924	-> 276
    //   #924	-> 285
    //   #924	-> 291
    //   #924	-> 302
    //   #924	-> 309
    //   #924	-> 314
    //   #924	-> 319
    //   #924	-> 324
    //   #924	-> 329
    //   #924	-> 334
    //   #924	-> 345
    //   #931	-> 352
    //   #932	-> 369
    //   #932	-> 376
    //   #932	-> 382
    //   #932	-> 406
    //   #932	-> 413
    //   #932	-> 420
    //   #933	-> 447
    //   #933	-> 454
    //   #932	-> 461
    //   #933	-> 488
    //   #933	-> 495
    //   #932	-> 502
    //   #934	-> 528
    //   #924	-> 566
    //   #924	-> 575
    //   #924	-> 584
    //   #924	-> 590
    //   #924	-> 601
    //   #924	-> 607
    //   #924	-> 618
    //   #924	-> 625
    //   #924	-> 630
    //   #924	-> 635
    //   #924	-> 646
    //   #937	-> 653
    //   #937	-> 670
    //   #937	-> 677
    //   #924	-> 705
    //   #924	-> 714
    //   #924	-> 723
    //   #924	-> 729
    //   #924	-> 740
    //   #924	-> 746
    //   #924	-> 757
    //   #924	-> 764
    //   #924	-> 769
    //   #924	-> 774
    //   #924	-> 785
    //   #924	-> 804
    //   #924	-> 813
    //   #924	-> 822
    //   #924	-> 828
    //   #924	-> 839
    //   #924	-> 845
    //   #924	-> 856
    //   #924	-> 863
    //   #924	-> 868
    //   #924	-> 873
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   100	90	2	and__5514__auto__36246	Ljava/lang/Object;
    //   502	41	6	or__5516__auto__36247	Ljava/lang/Object;
    //   461	82	5	or__5516__auto__36248	Ljava/lang/Object;
    //   420	123	4	or__5516__auto__36249	Ljava/lang/Object;
    //   382	161	3	or__5516__auto__36250	Ljava/lang/Object;
    //   352	198	2	and__5514__auto__36251	Ljava/lang/Object;
    //   653	36	2	and__5514__auto__36252	Ljava/lang/Object;
    //   0	885	0	this	Lclojure/core/match/LiteralPattern;
    //   0	885	1	ocr	Ljava/lang/Object; }
  
  public Object valAt(Object k, Object not_found) {
    Object G__36244 = k = null;
    switch (Util.hash(G__36244) >> 0 & true) {
      case 0:
        if (G__36244 == const__6);
        break;
      case 1:
        if (G__36244 == const__5);
        break;
    } 
    return null;
  }
  
  public Object valAt(Object k) { k = null;
    return ((ILookup)this).valAt(k, null); }
  
  public IObj withMeta(IPersistentMap new_meta) { new_meta = null;
    return (IObj)new LiteralPattern(this.l, new_meta); }
  
  public IPersistentMap meta() { return (IPersistentMap)this._meta; }
  
  public boolean equals(Object other) {
    boolean and__5514__auto__36253 = other instanceof LiteralPattern;
    other = null;
    if (__thunk__0__ != __thunk__0__.get(other)) {
      other;
    } else {
      __thunk__0__.get(other);
    } 
    return and__5514__auto__36253 ? Util.equiv(this.l, (__thunk__0__ = __site__0__.fault(other)).get(other)) : and__5514__auto__36253;
  }
  
  public String toString() { this = null;
    return (String)(Util.identical(this.l, null) ? "nil" : ((IFn)const__1.getRawRoot()).invoke(this.l)); }
}
