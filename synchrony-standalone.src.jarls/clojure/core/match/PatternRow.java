package clojure.core.match;

import clojure.core.match.protocols.IVecMod;
import clojure.lang.Associative;
import clojure.lang.IFn;
import clojure.lang.ILookup;
import clojure.lang.ILookupThunk;
import clojure.lang.IPersistentCollection;
import clojure.lang.IPersistentVector;
import clojure.lang.ISeq;
import clojure.lang.IType;
import clojure.lang.Indexed;
import clojure.lang.Keyword;
import clojure.lang.KeywordLookupSite;
import clojure.lang.PersistentVector;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Util;
import clojure.lang.Var;

public final class PatternRow implements Associative, IVecMod, ISeq, ILookup, IPersistentCollection, IFn, Indexed, IType {
  public final Object ps;
  
  public final Object action;
  
  public final Object bindings;
  
  private static Class __cached_class__0;
  
  private static Class __cached_class__1;
  
  public static final Keyword const__3 = (Keyword)RT.keyword(null, "ps");
  
  public static final Keyword const__4 = (Keyword)RT.keyword(null, "action");
  
  public static final Keyword const__5 = (Keyword)RT.keyword(null, "bindings");
  
  public static final Var const__6 = (Var)RT.var("clojure.core.match.protocols", "drop-nth");
  
  public static final Var const__7 = (Var)RT.var("clojure.core", "into");
  
  public static final Var const__8 = (Var)RT.var("clojure.core.match.protocols", "swap");
  
  public static final Var const__9 = (Var)RT.var("clojure.core", "assoc");
  
  public static final Var const__11 = (Var)RT.var("clojure.core", "first");
  
  public static final Var const__12 = (Var)RT.var("clojure.core", "next");
  
  public static final Var const__13 = (Var)RT.var("clojure.core", "empty?");
  
  public static final Var const__14 = (Var)RT.var("clojure.core", "rest");
  
  public static final Var const__15 = (Var)RT.var("clojure.core", "seq");
  
  public static final Var const__17 = (Var)RT.var("clojure.core", "conj");
  
  static final KeywordLookupSite __site__0__;
  
  static ILookupThunk __thunk__0__ = __site__0__ = new KeywordLookupSite(RT.keyword(null, "ps"));
  
  static final KeywordLookupSite __site__1__;
  
  static ILookupThunk __thunk__1__ = __site__1__ = new KeywordLookupSite(RT.keyword(null, "action"));
  
  static final KeywordLookupSite __site__2__;
  
  static ILookupThunk __thunk__2__ = __site__2__ = new KeywordLookupSite(RT.keyword(null, "bindings"));
  
  public PatternRow(Object paramObject1, Object paramObject2, Object paramObject3) { this.ps = paramObject1;
    this.action = paramObject2;
    this.bindings = paramObject3; }
  
  public static IPersistentVector getBasis() { return Tuple.create(Symbol.intern(null, "ps"), Symbol.intern(null, "action"), Symbol.intern(null, "bindings")); }
  
  public boolean equiv(Object other) { other = null;
    this = null;
    return super.equals(other); }
  
  public ISeq cons(Object x) { x = null;
    return (ISeq)new PatternRow(((IFn)const__17.getRawRoot()).invoke(this.ps, x), this.action, this.bindings); }
  
  public Object invoke(Object n) { n = null;
    this = null;
    return RT.nth(this.ps, RT.intCast((Number)n)); }
  
  public Object valAt(Object k, Object not_found) {
    Object G__35908 = k = null;
    switch (Util.hash(G__35908) >> 4 & 0x3) {
      case 0:
        if (G__35908 == const__5);
        break;
      case 2:
        if (G__35908 == const__4);
        break;
      case 3:
        if (G__35908 == const__3);
        break;
    } 
    return null;
  }
  
  public Object valAt(Object k) { k = null;
    return ((ILookup)this).valAt(k, null); }
  
  public int count() {
    return RT.count(this.ps);
  }
  
  public ISeq seq() { this = null;
    return (ISeq)((IFn)const__15.getRawRoot()).invoke(this.ps); }
  
  public ISeq more() {
    if (((IFn)const__13.getRawRoot()).invoke(this.ps) != null) {
      if (((IFn)const__13.getRawRoot()).invoke(this.ps) != Boolean.FALSE);
    } else {
      ((IFn)const__13.getRawRoot()).invoke(this.ps);
    } 
    Object nps = ((IFn)const__14.getRawRoot()).invoke(this.ps);
    nps = null;
    return (ISeq)new PatternRow(nps, this.action, this.bindings);
  }
  
  public ISeq next() {
    Object temp__5733__auto__35910 = ((IFn)const__12.getRawRoot()).invoke(this.ps);
    if (temp__5733__auto__35910 != null) {
      if (temp__5733__auto__35910 != Boolean.FALSE) {
        Object nps = temp__5733__auto__35910 = null;
        nps = null;
      } 
    } else {
      temp__5733__auto__35910;
    } 
    return (ISeq)new PatternRow(PersistentVector.EMPTY, this.action, this.bindings);
  }
  
  public Object first() { this = null;
    return ((IFn)const__11.getRawRoot()).invoke(this.ps); }
  
  public Object nth(int i, Object x) { x = null;
    this = null;
    return RT.nth(this.ps, i, x); }
  
  public Object nth(int i) {
    this = null;
    return RT.nth(this.ps, i);
  }
  
  public Associative assoc(Object k, Object v) { k = null;
    v = null;
    return (Associative)new PatternRow(((IFn)const__9.getRawRoot()).invoke(this.ps, k, v), this.action, this.bindings); }
  
  public Object swap(Object n) { if (Util.classOf(this.ps) != __cached_class__1)
      if (!(this.ps instanceof IVecMod)) {
        __cached_class__1 = Util.classOf(this.ps);
      } else {
        n = null;
        return new PatternRow(((IVecMod)this.ps).swap(n), this.action, this.bindings);
      }  
    n = null; }
  
  public Object prepend(Object x) { x = null;
    return new PatternRow(((IFn)const__7.getRawRoot()).invoke(Tuple.create(x), this.ps), this.action, this.bindings); }
  
  public Object drop_nth(Object n) { if (Util.classOf(this.ps) != __cached_class__0)
      if (!(this.ps instanceof IVecMod)) {
        __cached_class__0 = Util.classOf(this.ps);
      } else {
        n = null;
        return new PatternRow(((IVecMod)this.ps).drop_nth(n), this.action, this.bindings);
      }  
    n = null; }
  
  public boolean equals(Object other) {
    boolean and__5514__auto__35913 = other instanceof PatternRow;
    if (__thunk__0__ != __thunk__0__.get(other)) {
      other;
    } else {
      __thunk__0__.get(other);
    } 
    boolean and__5514__auto__35912 = Util.equiv(this.ps, (__thunk__0__ = __site__0__.fault(other)).get(other));
    if (__thunk__1__ != __thunk__1__.get(other)) {
      other;
    } else {
      __thunk__1__.get(other);
    } 
    boolean and__5514__auto__35911 = Util.equiv(this.action, (__thunk__1__ = __site__1__.fault(other)).get(other));
    other = null;
    if (__thunk__2__ != __thunk__2__.get(other)) {
      other;
    } else {
      __thunk__2__.get(other);
    } 
    return and__5514__auto__35913 ? (and__5514__auto__35912 ? (and__5514__auto__35911 ? Util.equiv(this.bindings, (__thunk__2__ = __site__2__.fault(other)).get(other)) : and__5514__auto__35911) : and__5514__auto__35912) : and__5514__auto__35913;
  }
}
