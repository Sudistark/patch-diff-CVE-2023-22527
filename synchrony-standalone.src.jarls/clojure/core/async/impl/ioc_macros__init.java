package clojure.core.async.impl;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentHashSet;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class ioc_macros__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__3;
  
  public static final AFn const__4;
  
  public static final Var const__5;
  
  public static final Keyword const__6;
  
  public static final Keyword const__8;
  
  public static final Keyword const__10;
  
  public static final Object const__11;
  
  public static final Keyword const__12;
  
  public static final AFn const__13;
  
  public static final Var const__14;
  
  public static final Keyword const__15;
  
  public static final AFn const__17;
  
  public static final Object const__18;
  
  public static final Var const__19;
  
  public static final AFn const__21;
  
  public static final Object const__22;
  
  public static final Var const__23;
  
  public static final AFn const__25;
  
  public static final Object const__26;
  
  public static final Var const__27;
  
  public static final AFn const__29;
  
  public static final Object const__30;
  
  public static final Var const__31;
  
  public static final AFn const__33;
  
  public static final Object const__34;
  
  public static final Var const__35;
  
  public static final AFn const__37;
  
  public static final Object const__38;
  
  public static final Var const__39;
  
  public static final AFn const__41;
  
  public static final Object const__42;
  
  public static final Var const__43;
  
  public static final AFn const__46;
  
  public static final Var const__47;
  
  public static final AFn const__50;
  
  public static final Var const__51;
  
  public static final AFn const__54;
  
  public static final Var const__55;
  
  public static final Keyword const__57;
  
  public static final AFn const__59;
  
  public static final Var const__60;
  
  public static final AFn const__63;
  
  public static final Var const__64;
  
  public static final AFn const__67;
  
  public static final Var const__68;
  
  public static final AFn const__71;
  
  public static final Var const__72;
  
  public static final AFn const__75;
  
  public static final Var const__76;
  
  public static final AFn const__79;
  
  public static final Var const__80;
  
  public static final AFn const__83;
  
  public static final Var const__84;
  
  public static final AFn const__87;
  
  public static final Var const__88;
  
  public static final AFn const__91;
  
  public static final Var const__92;
  
  public static final AFn const__95;
  
  public static final Var const__96;
  
  public static final AFn const__99;
  
  public static final Var const__100;
  
  public static final AFn const__103;
  
  public static final Var const__104;
  
  public static final AFn const__107;
  
  public static final Var const__108;
  
  public static final AFn const__111;
  
  public static final Var const__112;
  
  public static final AFn const__115;
  
  public static final Var const__116;
  
  public static final AFn const__119;
  
  public static final Var const__120;
  
  public static final AFn const__123;
  
  public static final Object const__124;
  
  public static final Var const__125;
  
  public static final Var const__126;
  
  public static final Var const__127;
  
  public static final Var const__128;
  
  public static final ISeq const__129;
  
  public static final Var const__130;
  
  public static final Var const__131;
  
  public static final AFn const__135;
  
  public static final Keyword const__136;
  
  public static final AFn const__137;
  
  public static final Keyword const__138;
  
  public static final Keyword const__139;
  
  public static final AFn const__143;
  
  public static final Keyword const__144;
  
  public static final Var const__145;
  
  public static final Var const__146;
  
  public static final Var const__147;
  
  public static final AFn const__148;
  
  public static final AFn const__149;
  
  public static final Keyword const__150;
  
  public static final AFn const__151;
  
  public static final AFn const__152;
  
  public static final AFn const__153;
  
  public static final AFn const__154;
  
  public static final Var const__155;
  
  public static final AFn const__156;
  
  public static final Object const__157;
  
  public static final Var const__158;
  
  public static final ISeq const__159;
  
  public static final AFn const__161;
  
  public static final AFn const__162;
  
  public static final AFn const__164;
  
  public static final AFn const__165;
  
  public static final AFn const__166;
  
  public static final AFn const__167;
  
  public static final Object const__168;
  
  public static final Var const__169;
  
  public static final ISeq const__170;
  
  public static final AFn const__172;
  
  public static final AFn const__173;
  
  public static final AFn const__176;
  
  public static final AFn const__177;
  
  public static final AFn const__178;
  
  public static final AFn const__179;
  
  public static final AFn const__180;
  
  public static final AFn const__181;
  
  public static final Var const__182;
  
  public static final AFn const__186;
  
  public static final Var const__187;
  
  public static final AFn const__189;
  
  public static final Keyword const__190;
  
  public static final Var const__191;
  
  public static final AFn const__194;
  
  public static final Keyword const__195;
  
  public static final Keyword const__196;
  
  public static final Keyword const__197;
  
  public static final Keyword const__198;
  
  public static final Keyword const__199;
  
  public static final Keyword const__200;
  
  public static final Keyword const__201;
  
  public static final Keyword const__202;
  
  public static final Keyword const__203;
  
  public static final Keyword const__204;
  
  public static final Var const__205;
  
  public static final AFn const__208;
  
  public static final Var const__209;
  
  public static final AFn const__212;
  
  public static final Keyword const__213;
  
  public static final Keyword const__214;
  
  public static final Keyword const__215;
  
  public static final Keyword const__216;
  
  public static final Keyword const__217;
  
  public static final Keyword const__218;
  
  public static final Keyword const__219;
  
  public static final Keyword const__220;
  
  public static final Keyword const__221;
  
  public static final Keyword const__222;
  
  public static final Keyword const__223;
  
  public static final Keyword const__224;
  
  public static final Keyword const__225;
  
  public static final Keyword const__226;
  
  public static final Keyword const__227;
  
  public static final Keyword const__228;
  
  public static final Keyword const__229;
  
  public static final Var const__230;
  
  public static final AFn const__233;
  
  public static final Var const__234;
  
  public static final AFn const__237;
  
  public static final Var const__238;
  
  public static final AFn const__241;
  
  public static final Var const__242;
  
  public static final AFn const__245;
  
  public static final Var const__246;
  
  public static final AFn const__249;
  
  public static final Var const__250;
  
  public static final AFn const__253;
  
  public static final Var const__254;
  
  public static final AFn const__257;
  
  public static final Var const__258;
  
  public static final AFn const__261;
  
  public static final Var const__262;
  
  public static final AFn const__265;
  
  public static final Var const__266;
  
  public static final AFn const__269;
  
  public static final Var const__270;
  
  public static final AFn const__273;
  
  public static final Var const__274;
  
  public static final AFn const__277;
  
  public static final Var const__278;
  
  public static final AFn const__281;
  
  public static final Var const__282;
  
  public static final AFn const__285;
  
  public static final Var const__286;
  
  public static final AFn const__289;
  
  public static final Var const__290;
  
  public static final AFn const__293;
  
  public static final Var const__294;
  
  public static final AFn const__297;
  
  public static final Var const__298;
  
  public static final AFn const__301;
  
  public static final Var const__302;
  
  public static final AFn const__304;
  
  public static final AFn const__313;
  
  public static final Var const__314;
  
  public static final Object const__315;
  
  public static final Keyword const__316;
  
  public static final Keyword const__317;
  
  public static final Keyword const__318;
  
  public static final Keyword const__319;
  
  public static final Keyword const__320;
  
  public static final Var const__321;
  
  public static final Object const__322;
  
  public static final Var const__323;
  
  public static final Object const__324;
  
  public static final Object const__325;
  
  public static final Var const__326;
  
  public static final Object const__327;
  
  public static final Var const__328;
  
  public static final Object const__329;
  
  public static final Var const__330;
  
  public static final AFn const__333;
  
  public static final Var const__334;
  
  public static final AFn const__337;
  
  public static final Var const__338;
  
  public static final AFn const__341;
  
  public static final Var const__342;
  
  public static final AFn const__344;
  
  public static final Var const__345;
  
  public static final Var const__346;
  
  public static final Var const__347;
  
  public static final Var const__348;
  
  public static final AFn const__350;
  
  public static final Var const__351;
  
  public static final Var const__352;
  
  public static final AFn const__355;
  
  public static final Var const__356;
  
  public static final AFn const__359;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new ioc_macros.fn__3981());
    const__5.setMeta((IPersistentMap)const__13);
    const__5.bindRoot(new ioc_macros.debug());
    const__14.setMeta((IPersistentMap)const__17);
    const__14.bindRoot(const__18);
    const__19.setMeta((IPersistentMap)const__21);
    const__19.bindRoot(const__22);
    const__23.setMeta((IPersistentMap)const__25);
    const__23.bindRoot(const__26);
    const__27.setMeta((IPersistentMap)const__29);
    const__27.bindRoot(const__30);
    const__31.setMeta((IPersistentMap)const__33);
    const__31.bindRoot(const__34);
    const__35.setMeta((IPersistentMap)const__37);
    const__35.bindRoot(const__38);
    const__39.setMeta((IPersistentMap)const__41);
    const__39.bindRoot(const__42);
    const__43.setMeta((IPersistentMap)const__46);
    const__43.bindRoot(new ioc_macros.aset_object());
    const__47.setMeta((IPersistentMap)const__50);
    const__47.bindRoot(new ioc_macros.aget_object());
    const__51.setMeta((IPersistentMap)const__54);
    const__51.bindRoot(new ioc_macros.aset_all_BANG_());
    ((Var)const__51)


































      
      .setMacro();
    const__55.setMeta((IPersistentMap)const__59);
    const__55.bindRoot(new ioc_macros.gen_plan());
    ((Var)const__55)












      
      .setMacro();
    const__60.setMeta((IPersistentMap)const__63);
    const__60.bindRoot(new ioc_macros.get_plan());
    const__64.setMeta((IPersistentMap)const__67);
    const__64.bindRoot(new ioc_macros.push_binding());
    const__68.setMeta((IPersistentMap)const__71);
    const__68.bindRoot(new ioc_macros.push_alter_binding());
    const__72.setMeta((IPersistentMap)const__75);
    const__72.bindRoot(new ioc_macros.get_binding());
    const__76.setMeta((IPersistentMap)const__79);
    const__76.bindRoot(new ioc_macros.pop_binding());
    const__80.setMeta((IPersistentMap)const__83);
    const__80.bindRoot(new ioc_macros.no_op());
    const__84.setMeta((IPersistentMap)const__87);
    const__84.bindRoot(new ioc_macros.all());
    const__88.setMeta((IPersistentMap)const__91);
    const__88.bindRoot(new ioc_macros.assoc_in_plan());
    const__92.setMeta((IPersistentMap)const__95);
    const__92.bindRoot(new ioc_macros.update_in_plan());
    const__96.setMeta((IPersistentMap)const__99);
    const__96.bindRoot(new ioc_macros.get_in_plan());
    const__100.setMeta((IPersistentMap)const__103);
    const__100.bindRoot(new ioc_macros.print_plan());
    const__104.setMeta((IPersistentMap)const__107);
    const__104.bindRoot(new ioc_macros.set_block());
    const__108.setMeta((IPersistentMap)const__111);
    const__108.bindRoot(new ioc_macros.get_block());
    const__112.setMeta((IPersistentMap)const__115);
    const__112.bindRoot(new ioc_macros.add_block());
    const__116.setMeta((IPersistentMap)const__119);
    const__116.bindRoot(new ioc_macros.instruction_QMARK_());
    const__120.setMeta((IPersistentMap)const__123);
    const__120.bindRoot(new ioc_macros.add_instruction());
    const__182.setMeta((IPersistentMap)const__186);
    const__182.bindRoot(new ioc_macros.emit_clashing_binds());
    const__187.setMeta((IPersistentMap)const__189);
    const__187.bindRoot(null);
    const__191.setMeta((IPersistentMap)const__194);
    const__191.bindRoot(new ioc_macros.item_to_ssa());
    const__205.setMeta((IPersistentMap)const__208);
    const__205.bindRoot(new ioc_macros.var_name());
    const__209.setMeta((IPersistentMap)const__212);
    const__209.bindRoot(new ioc_macros.let_binding_to_ssa());
    const__230.setMeta((IPersistentMap)const__233);
    const__230.bindRoot(new ioc_macros.parse_to_state_machine());
    const__234.setMeta((IPersistentMap)const__237);
    const__234.bindRoot(new ioc_macros.index_instruction());
    const__238.setMeta((IPersistentMap)const__241);
    const__238.bindRoot(new ioc_macros.index_block());
    const__242.setMeta((IPersistentMap)const__245);
    const__242.bindRoot(new ioc_macros.index_state_machine());
    const__246.setMeta((IPersistentMap)const__249);
    const__246.bindRoot(new ioc_macros.id_for_inst());
    const__250.setMeta((IPersistentMap)const__253);
    const__250.bindRoot(new ioc_macros.persistent_value_QMARK_());
    const__254.setMeta((IPersistentMap)const__257);
    const__254.bindRoot(new ioc_macros.count_persistent_values());
    const__258.setMeta((IPersistentMap)const__261);
    const__258.bindRoot(new ioc_macros.build_block_preamble());
    const__262.setMeta((IPersistentMap)const__265);
    const__262.bindRoot(new ioc_macros.build_block_body());
    const__266.setMeta((IPersistentMap)const__269);
    const__266.bindRoot(new ioc_macros.build_new_state());
    const__270.setMeta((IPersistentMap)const__273);
    const__270.bindRoot(new ioc_macros.emit_state_machine());
    const__274.setMeta((IPersistentMap)const__277);
    const__274.bindRoot(new ioc_macros.finished_QMARK_());
    const__278.setMeta((IPersistentMap)const__281);
    const__278.bindRoot(new ioc_macros.fn_handler());
    const__282.setMeta((IPersistentMap)const__285);
    const__282.bindRoot(new ioc_macros.run_state_machine());
    const__286.setMeta((IPersistentMap)const__289);
    const__286.bindRoot(new ioc_macros.run_state_machine_wrapped());
    const__290.setMeta((IPersistentMap)const__293);
    const__290.bindRoot(new ioc_macros.take_BANG_());
    const__294.setMeta((IPersistentMap)const__297);
    const__294.bindRoot(new ioc_macros.put_BANG_());
    const__298.setMeta((IPersistentMap)const__301);
    const__298.bindRoot(new ioc_macros.return_chan());
    const__302.setMeta((IPersistentMap)const__304);
    const__302.bindRoot(const__313);
    const__314.setMeta((IPersistentMap)RT.mapUniqueKeys(new Object[] { const__6, const__315, const__316, RT.mapUniqueKeys(new Object[] { const__317, const__318, const__319, PersistentHashSet.EMPTY, const__320, const__321.getRawRoot() }), const__8, const__322, const__10, const__11, const__12, "clojure/core/async/impl/ioc_macros.clj" }));
    const__314.bindRoot(new ioc_macros.mark_transitions());
    const__323.setMeta((IPersistentMap)RT.mapUniqueKeys(new Object[] { const__6, const__324, const__316, RT.mapUniqueKeys(new Object[] { const__317, const__318, const__319, RT.set(new Object[] { const__314 }) }), const__8, const__325, const__10, const__11, const__12, "clojure/core/async/impl/ioc_macros.clj" }));
    const__323.bindRoot(new ioc_macros.propagate_transitions());
    const__326.setMeta((IPersistentMap)RT.mapUniqueKeys(new Object[] { const__6, const__327, const__316, RT.mapUniqueKeys(new Object[] { const__317, const__318, const__319, RT.set(new Object[] { const__328, const__323 }) }), const__8, const__329, const__10, const__11, const__12, "clojure/core/async/impl/ioc_macros.clj" }));
    const__326.bindRoot(new ioc_macros.propagate_recur());
    const__330.setMeta((IPersistentMap)const__333);
    const__330.bindRoot(new ioc_macros.nested_go_QMARK_());
    const__334.setMeta((IPersistentMap)const__337);
    const__334.bindRoot(new ioc_macros.make_env());
    const__338.setMeta((IPersistentMap)const__341);
    const__338.bindRoot(new ioc_macros.pdebug());
    const__342.setMeta((IPersistentMap)const__344);
    const__342



























































































































































































































































      
      .bindRoot(((IFn)const__345.getRawRoot()).invoke(((IFn)const__346.getRawRoot()).invoke(const__321.getRawRoot(), const__347), RT.set(new Object[] { const__314, const__323, const__326 })));
    const__348.setMeta((IPersistentMap)const__350);
    const__348




      
      .bindRoot(((IFn)const__351.getRawRoot()).invoke(const__342.getRawRoot()));
    const__352.setMeta((IPersistentMap)const__355);
    const__352.bindRoot(new ioc_macros.emit_hinted());
    const__356.setMeta((IPersistentMap)const__359);
    const__356.bindRoot(new ioc_macros.state_machine());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "clojure.core.async.impl.ioc-macros")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "skip-wiki"), Boolean.TRUE }));
    const__3 = (AFn)RT.map(new Object[] { RT.keyword(null, "skip-wiki"), Boolean.TRUE });
    const__4 = (AFn)Symbol.intern(null, "clojure.core");
    const__5 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "debug");
    const__6 = (Keyword)RT.keyword(null, "arglists");
    const__8 = (Keyword)RT.keyword(null, "line");
    const__10 = (Keyword)RT.keyword(null, "column");
    const__11 = Integer.valueOf(1);
    const__12 = (Keyword)RT.keyword(null, "file");
    const__13 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(29), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/ioc_macros.clj" });
    const__14 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "FN-IDX");
    const__15 = (Keyword)RT.keyword(null, "const");
    const__17 = (AFn)RT.map(new Object[] { RT.keyword(null, "const"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(34), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/ioc_macros.clj" });
    const__18 = Long.valueOf(0L);
    const__19 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "STATE-IDX");
    const__21 = (AFn)RT.map(new Object[] { RT.keyword(null, "const"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(35), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/ioc_macros.clj" });
    const__22 = Long.valueOf(1L);
    const__23 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "VALUE-IDX");
    const__25 = (AFn)RT.map(new Object[] { RT.keyword(null, "const"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(36), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/ioc_macros.clj" });
    const__26 = Long.valueOf(2L);
    const__27 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "BINDINGS-IDX");
    const__29 = (AFn)RT.map(new Object[] { RT.keyword(null, "const"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(37), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/ioc_macros.clj" });
    const__30 = Long.valueOf(3L);
    const__31 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "EXCEPTION-FRAMES");
    const__33 = (AFn)RT.map(new Object[] { RT.keyword(null, "const"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(38), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/ioc_macros.clj" });
    const__34 = Long.valueOf(4L);
    const__35 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "CURRENT-EXCEPTION");
    const__37 = (AFn)RT.map(new Object[] { RT.keyword(null, "const"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(39), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/ioc_macros.clj" });
    const__38 = Long.valueOf(5L);
    const__39 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "USER-START-IDX");
    const__41 = (AFn)RT.map(new Object[] { RT.keyword(null, "const"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(40), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/ioc_macros.clj" });
    const__42 = Long.valueOf(6L);
    const__43 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "aset-object");
    const__46 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "arr")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "AtomicReferenceArray") })), Symbol.intern(null, "idx"), ((IObj)Symbol.intern(null, "o")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Object") }))) })), RT.keyword(null, "line"), Integer.valueOf(42), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/ioc_macros.clj" });
    const__47 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "aget-object");
    const__50 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "arr")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "AtomicReferenceArray") })), Symbol.intern(null, "idx")) })), RT.keyword(null, "line"), Integer.valueOf(45), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/ioc_macros.clj" });
    const__51 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "aset-all!");
    const__54 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "arr"), Symbol.intern(null, "&"), Symbol.intern(null, "more")) })), RT.keyword(null, "line"), Integer.valueOf(48), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/ioc_macros.clj" });
    const__55 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "gen-plan");
    const__57 = (Keyword)RT.keyword(null, "doc");
    const__59 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "binds"), Symbol.intern(null, "id-expr")) })), RT.keyword(null, "doc"), "Allows a user to define a state monad binding plan.\n\n  (gen-plan\n    [_ (assoc-in-plan [:foo :bar] 42)\n     val (get-in-plan [:foo :bar])]\n    val)", RT.keyword(null, "line"), Integer.valueOf(62), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/ioc_macros.clj" });
    const__60 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "get-plan");
    const__63 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f")) })), RT.keyword(null, "doc"), "Returns the final [id state] from a plan. ", RT.keyword(null, "line"), Integer.valueOf(81), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/ioc_macros.clj" });
    const__64 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "push-binding");
    const__67 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "key"), Symbol.intern(null, "value")) })), RT.keyword(null, "doc"), "Sets the binding 'key' to value. This operation can be undone via pop-bindings.\n   Bindings are stored in the state hashmap.", RT.keyword(null, "line"), Integer.valueOf(86), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/ioc_macros.clj" });
    const__68 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "push-alter-binding");
    const__71 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "key"), Symbol.intern(null, "f"), Symbol.intern(null, "&"), Symbol.intern(null, "args")) })), RT.keyword(null, "doc"), "Pushes the result of (apply f old-value args) as current value of binding key", RT.keyword(null, "line"), Integer.valueOf(93), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/ioc_macros.clj" });
    const__72 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "get-binding");
    const__75 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "key")) })), RT.keyword(null, "doc"), "Gets the value of the current binding for key", RT.keyword(null, "line"), Integer.valueOf(100), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/ioc_macros.clj" });
    const__76 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "pop-binding");
    const__79 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "key")) })), RT.keyword(null, "doc"), "Removes the most recent binding for key", RT.keyword(null, "line"), Integer.valueOf(106), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/ioc_macros.clj" });
    const__80 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "no-op");
    const__83 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "doc"), "This function can be used inside a gen-plan when no operation is to be performed", RT.keyword(null, "line"), Integer.valueOf(113), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/ioc_macros.clj" });
    const__84 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "all");
    const__87 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "itms")) })), RT.keyword(null, "doc"), "Assumes that itms is a list of state monad function results, threads the state map\n  through all of them. Returns a vector of all the results.", RT.keyword(null, "line"), Integer.valueOf(119), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/ioc_macros.clj" });
    const__88 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "assoc-in-plan");
    const__91 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "path"), Symbol.intern(null, "val")) })), RT.keyword(null, "doc"), "Same as assoc-in, but for state hash map", RT.keyword(null, "line"), Integer.valueOf(131), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/ioc_macros.clj" });
    const__92 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "update-in-plan");
    const__95 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "path"), Symbol.intern(null, "f"), Symbol.intern(null, "&"), Symbol.intern(null, "args")) })), RT.keyword(null, "doc"), "Same as update-in, but for a state hash map", RT.keyword(null, "line"), Integer.valueOf(137), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/ioc_macros.clj" });
    const__96 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "get-in-plan");
    const__99 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "path")) })), RT.keyword(null, "doc"), "Same as get-in, but for a state hash map", RT.keyword(null, "line"), Integer.valueOf(143), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/ioc_macros.clj" });
  }
  
  public static void __init1() {
    const__100 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "print-plan");
    const__103 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(149), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/ioc_macros.clj" });
    const__104 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "set-block");
    const__107 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "block-id")) })), RT.keyword(null, "doc"), "Sets the current block being written to by the functions. The next add-instruction call will append to this block", RT.keyword(null, "line"), Integer.valueOf(154), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/ioc_macros.clj" });
    const__108 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "get-block");
    const__111 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "doc"), "Gets the current block", RT.keyword(null, "line"), Integer.valueOf(160), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/ioc_macros.clj" });
    const__112 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "add-block");
    const__115 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "doc"), "Adds a new block, returns its id, but does not change the current block (does not call set-block).", RT.keyword(null, "line"), Integer.valueOf(166), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/ioc_macros.clj" });
    const__116 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "instruction?");
    const__119 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(182), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/ioc_macros.clj" });
    const__120 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "add-instruction");
    const__123 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "inst")) })), RT.keyword(null, "doc"), "Appends an instruction to the current block. ", RT.keyword(null, "line"), Integer.valueOf(185), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/ioc_macros.clj" });
    const__124 = RT.classForName("clojure.core.async.impl.ioc_macros.IInstruction");
    const__125 = (Var)RT.var("clojure.core", "alter-meta!");
    const__126 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "IInstruction");
    const__127 = (Var)RT.var("clojure.core", "assoc");
    const__128 = (Var)RT.var("clojure.core", "assert-same-protocol");
    const__129 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "reads-from")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Returns a list of instructions this instruction reads from", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })), ((IObj)Symbol.intern(null, "writes-to")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Returns a list of instructions this instruction writes to", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })), ((IObj)Symbol.intern(null, "block-references")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Returns all the blocks this instruction references", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })) }));
    const__130 = (Var)RT.var("clojure.core", "alter-var-root");
    const__131 = (Var)RT.var("clojure.core", "merge");
    const__135 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "clojure.core.async.impl.ioc_macros.IInstruction"), RT.keyword(null, "on-interface"), RT.classForName("clojure.core.async.impl.ioc_macros.IInstruction") });
    const__136 = (Keyword)RT.keyword(null, "sigs");
    const__137 = (AFn)RT.map(new Object[] { RT.keyword(null, "reads-from"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "reads-from")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Returns a list of instructions this instruction reads from", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })), RT.keyword(null, "doc"), "Returns a list of instructions this instruction reads from" }), RT.keyword(null, "writes-to"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "writes-to")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Returns a list of instructions this instruction writes to", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })), RT.keyword(null, "doc"), "Returns a list of instructions this instruction writes to" }), RT.keyword(null, "block-references"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "block-references")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Returns all the blocks this instruction references", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })), RT.keyword(null, "doc"), "Returns all the blocks this instruction references" }) });
    const__138 = (Keyword)RT.keyword(null, "var");
    const__139 = (Keyword)RT.keyword(null, "method-map");
    const__143 = (AFn)RT.map(new Object[] { RT.keyword(null, "writes-to"), RT.keyword(null, "writes-to"), RT.keyword(null, "block-references"), RT.keyword(null, "block-references"), RT.keyword(null, "reads-from"), RT.keyword(null, "reads-from") });
    const__144 = (Keyword)RT.keyword(null, "method-builders");
    const__145 = (Var)RT.var("clojure.core", "intern");
    const__146 = (Var)RT.var("clojure.core", "*ns*");
    const__147 = (Var)RT.var("clojure.core", "with-meta");
    const__148 = (AFn)((IObj)Symbol.intern(null, "reads-from")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Returns a list of instructions this instruction reads from", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) }));
    const__149 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "reads-from")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Returns a list of instructions this instruction reads from", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })), RT.keyword(null, "doc"), "Returns a list of instructions this instruction reads from" });
    const__150 = (Keyword)RT.keyword(null, "protocol");
    const__151 = (AFn)((IObj)Symbol.intern(null, "writes-to")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Returns a list of instructions this instruction writes to", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) }));
    const__152 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "writes-to")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Returns a list of instructions this instruction writes to", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })), RT.keyword(null, "doc"), "Returns a list of instructions this instruction writes to" });
    const__153 = (AFn)((IObj)Symbol.intern(null, "block-references")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Returns all the blocks this instruction references", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) }));
    const__154 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "block-references")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Returns all the blocks this instruction references", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })), RT.keyword(null, "doc"), "Returns all the blocks this instruction references" });
    const__155 = (Var)RT.var("clojure.core", "-reset-methods");
    const__156 = (AFn)Symbol.intern(null, "IInstruction");
    const__157 = RT.classForName("clojure.core.async.impl.ioc_macros.IEmittableInstruction");
    const__158 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "IEmittableInstruction");
    const__159 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "emit-instruction")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Returns the clojure code that this instruction represents", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "state-sym")) })) })) }));
    const__161 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "clojure.core.async.impl.ioc_macros.IEmittableInstruction"), RT.keyword(null, "on-interface"), RT.classForName("clojure.core.async.impl.ioc_macros.IEmittableInstruction") });
    const__162 = (AFn)RT.map(new Object[] { RT.keyword(null, "emit-instruction"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "emit-instruction")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Returns the clojure code that this instruction represents", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "state-sym")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "state-sym")) })), RT.keyword(null, "doc"), "Returns the clojure code that this instruction represents" }) });
    const__164 = (AFn)RT.map(new Object[] { RT.keyword(null, "emit-instruction"), RT.keyword(null, "emit-instruction") });
    const__165 = (AFn)((IObj)Symbol.intern(null, "emit-instruction")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Returns the clojure code that this instruction represents", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "state-sym")) })) }));
    const__166 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "emit-instruction")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Returns the clojure code that this instruction represents", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "state-sym")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "state-sym")) })), RT.keyword(null, "doc"), "Returns the clojure code that this instruction represents" });
    const__167 = (AFn)Symbol.intern(null, "IEmittableInstruction");
    const__168 = RT.classForName("clojure.core.async.impl.ioc_macros.ITerminator");
    const__169 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "ITerminator");
    const__170 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "terminator-code")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Returns a unique symbol for this instruction", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })), ((IObj)Symbol.intern(null, "terminate-block")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Emites the code to terminate a given block", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "state-sym"), Symbol.intern(null, "custom-terminators")) })) })) }));
    const__172 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "clojure.core.async.impl.ioc_macros.ITerminator"), RT.keyword(null, "on-interface"), RT.classForName("clojure.core.async.impl.ioc_macros.ITerminator") });
    const__173 = (AFn)RT.map(new Object[] { RT.keyword(null, "terminator-code"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "terminator-code")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Returns a unique symbol for this instruction", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })), RT.keyword(null, "doc"), "Returns a unique symbol for this instruction" }), RT.keyword(null, "terminate-block"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "terminate-block")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Emites the code to terminate a given block", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "state-sym"), Symbol.intern(null, "custom-terminators")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "state-sym"), Symbol.intern(null, "custom-terminators")) })), RT.keyword(null, "doc"), "Emites the code to terminate a given block" }) });
    const__176 = (AFn)RT.map(new Object[] { RT.keyword(null, "terminator-code"), RT.keyword(null, "terminator-code"), RT.keyword(null, "terminate-block"), RT.keyword(null, "terminate-block") });
    const__177 = (AFn)((IObj)Symbol.intern(null, "terminate-block")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Emites the code to terminate a given block", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "state-sym"), Symbol.intern(null, "custom-terminators")) })) }));
    const__178 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "terminate-block")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Emites the code to terminate a given block", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "state-sym"), Symbol.intern(null, "custom-terminators")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "state-sym"), Symbol.intern(null, "custom-terminators")) })), RT.keyword(null, "doc"), "Emites the code to terminate a given block" });
    const__179 = (AFn)((IObj)Symbol.intern(null, "terminator-code")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Returns a unique symbol for this instruction", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) }));
    const__180 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "terminator-code")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Returns a unique symbol for this instruction", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })), RT.keyword(null, "doc"), "Returns a unique symbol for this instruction" });
    const__181 = (AFn)Symbol.intern(null, "ITerminator");
    const__182 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "emit-clashing-binds");
    const__186 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "recur-nodes"), Symbol.intern(null, "ids"), Symbol.intern(null, "clashes")) })), RT.keyword(null, "line"), Integer.valueOf(259), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/ioc_macros.clj" });
    const__187 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "-item-to-ssa");
    const__189 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(437), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/ioc_macros.clj" });
    const__190 = (Keyword)RT.keyword(null, "default");
    const__191 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "item-to-ssa");
    const__194 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ast")) })), RT.keyword(null, "line"), Integer.valueOf(447), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/ioc_macros.clj" });
    const__195 = (Keyword)RT.keyword(null, "invoke");
    const__196 = (Keyword)RT.keyword(null, "keyword-invoke");
    const__197 = (Keyword)RT.keyword(null, "protocol-invoke");
    const__198 = (Keyword)RT.keyword(null, "instance?");
    const__199 = (Keyword)RT.keyword(null, "prim-invoke");
  }
  
  public static void __init2() {
    const__200 = (Keyword)RT.keyword(null, "instance-call");
    const__201 = (Keyword)RT.keyword(null, "instance-field");
    const__202 = (Keyword)RT.keyword(null, "host-interop");
    const__203 = (Keyword)RT.keyword(null, "static-call");
    const__204 = (Keyword)RT.keyword(null, "set!");
    const__205 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "var-name");
    const__208 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "v")) })), RT.keyword(null, "line"), Integer.valueOf(527), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/ioc_macros.clj" });
    const__209 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "let-binding-to-ssa");
    const__212 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "name"), Symbol.intern(null, "init"), Symbol.intern(null, "form")) })) })), RT.keyword(null, "line"), Integer.valueOf(545), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/ioc_macros.clj" });
    const__213 = (Keyword)RT.keyword(null, "let");
    const__214 = (Keyword)RT.keyword(null, "loop");
    const__215 = (Keyword)RT.keyword(null, "do");
    const__216 = (Keyword)RT.keyword(null, "case");
    const__217 = (Keyword)RT.keyword(null, "quote");
    const__218 = (Keyword)RT.keyword(null, "try");
    const__219 = (Keyword)RT.keyword(null, "throw");
    const__220 = (Keyword)RT.keyword(null, "new");
    const__221 = (Keyword)RT.keyword(null, "recur");
    const__222 = (Keyword)RT.keyword(null, "if");
    const__223 = (Keyword)RT.keyword(null, "transition");
    const__224 = (Keyword)RT.keyword(null, "local");
    const__225 = (Keyword)RT.keyword(null, "map");
    const__226 = (Keyword)RT.keyword(null, "with-meta");
    const__227 = (Keyword)RT.keyword(null, "record");
    const__228 = (Keyword)RT.keyword(null, "vector");
    const__229 = (Keyword)RT.keyword(null, "set");
    const__230 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "parse-to-state-machine");
    const__233 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "body"), Symbol.intern(null, "terminators")) })), RT.keyword(null, "doc"), "Takes an sexpr and returns a hashmap that describes the execution flow of the sexpr as\n   a series of SSA style blocks.", RT.keyword(null, "line"), Integer.valueOf(827), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/ioc_macros.clj" });
    const__234 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "index-instruction");
    const__237 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "blk-id"), Symbol.intern(null, "idx"), Symbol.intern(null, "inst")) })), RT.keyword(null, "line"), Integer.valueOf(842), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/ioc_macros.clj" });
    const__238 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "index-block");
    const__241 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "idx"), Tuple.create(Symbol.intern(null, "blk-id"), Symbol.intern(null, "blk"))) })), RT.keyword(null, "line"), Integer.valueOf(855), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/ioc_macros.clj" });
    const__242 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "index-state-machine");
    const__245 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "machine")) })), RT.keyword(null, "line"), Integer.valueOf(858), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/ioc_macros.clj" });
    const__246 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "id-for-inst");
    const__249 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "sym")) })), RT.keyword(null, "line"), Integer.valueOf(861), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/ioc_macros.clj" });
    const__250 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "persistent-value?");
    const__253 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "index"), Symbol.intern(null, "value")) })), RT.keyword(null, "doc"), "Returns true if this value should be saved in the state hash map", RT.keyword(null, "line"), Integer.valueOf(869), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/ioc_macros.clj" });
    const__254 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "count-persistent-values");
    const__257 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "index")) })), RT.keyword(null, "line"), Integer.valueOf(876), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/ioc_macros.clj" });
    const__258 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "build-block-preamble");
    const__261 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "local-map"), Symbol.intern(null, "idx"), Symbol.intern(null, "state-sym"), Symbol.intern(null, "blk")) })), RT.keyword(null, "line"), Integer.valueOf(883), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/ioc_macros.clj" });
    const__262 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "build-block-body");
    const__265 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "state-sym"), Symbol.intern(null, "blk")) })), RT.keyword(null, "line"), Integer.valueOf(895), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/ioc_macros.clj" });
    const__266 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "build-new-state");
    const__269 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "local-map"), Symbol.intern(null, "idx"), Symbol.intern(null, "state-sym"), Symbol.intern(null, "blk")) })), RT.keyword(null, "line"), Integer.valueOf(900), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/ioc_macros.clj" });
    const__270 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "emit-state-machine");
    const__273 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "machine"), Symbol.intern(null, "num-user-params"), Symbol.intern(null, "custom-terminators")) })), RT.keyword(null, "line"), Integer.valueOf(912), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/ioc_macros.clj" });
    const__274 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "finished?");
    const__277 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "state-array")) })), RT.keyword(null, "doc"), "Returns true if the machine is in a finished state", RT.keyword(null, "line"), Integer.valueOf(953), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/ioc_macros.clj" });
    const__278 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "fn-handler");
    const__281 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f")) })), RT.keyword(null, "line"), Integer.valueOf(958), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/ioc_macros.clj" });
    const__282 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "run-state-machine");
    const__285 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "state")) })), RT.keyword(null, "line"), Integer.valueOf(972), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/ioc_macros.clj" });
    const__286 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "run-state-machine-wrapped");
    const__289 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "state")) })), RT.keyword(null, "line"), Integer.valueOf(975), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/ioc_macros.clj" });
    const__290 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "take!");
    const__293 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "state"), Symbol.intern(null, "blk"), Symbol.intern(null, "c")) })), RT.keyword(null, "line"), Integer.valueOf(982), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/ioc_macros.clj" });
    const__294 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "put!");
    const__297 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "state"), Symbol.intern(null, "blk"), Symbol.intern(null, "c"), Symbol.intern(null, "val")) })), RT.keyword(null, "line"), Integer.valueOf(991), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/ioc_macros.clj" });
    const__298 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "return-chan");
  }
  
  public static void __init3() {
    const__301 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "state"), Symbol.intern(null, "value")) })), RT.keyword(null, "line"), Integer.valueOf(999), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/ioc_macros.clj" });
    const__302 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "async-custom-terminators");
    const__304 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(1007), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/ioc_macros.clj" });
    const__313 = (AFn)RT.map(new Object[] { Symbol.intern("clojure.core.async", "<!"), Symbol.intern("clojure.core.async.impl.ioc-macros", "take!"), Symbol.intern("clojure.core.async", ">!"), Symbol.intern("clojure.core.async.impl.ioc-macros", "put!"), Symbol.intern("clojure.core.async", "alts!"), Symbol.intern("clojure.core.async", "ioc-alts!"), RT.keyword(null, "Return"), Symbol.intern("clojure.core.async.impl.ioc-macros", "return-chan") });
    const__314 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "mark-transitions");
    const__315 = PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "op"), Symbol.intern(null, "fn")), RT.keyword(null, "as"), Symbol.intern(null, "ast") })) }));
    const__316 = (Keyword)RT.keyword(null, "pass-info");
    const__317 = (Keyword)RT.keyword(null, "walk");
    const__318 = (Keyword)RT.keyword(null, "post");
    const__319 = (Keyword)RT.keyword(null, "depends");
    const__320 = (Keyword)RT.keyword(null, "after");
    const__321 = (Var)RT.var("clojure.tools.analyzer.jvm", "default-passes");
    const__322 = Integer.valueOf(1013);
    const__323 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "propagate-transitions");
    const__324 = PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "op")), RT.keyword(null, "as"), Symbol.intern(null, "ast") })) }));
    const__325 = Integer.valueOf(1025);
    const__326 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "propagate-recur");
    const__327 = PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ast")) }));
    const__328 = (Var)RT.var("clojure.tools.analyzer.passes.jvm.annotate-loops", "annotate-loops");
    const__329 = Integer.valueOf(1035);
    const__330 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "nested-go?");
    const__333 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "env")) })), RT.keyword(null, "line"), Integer.valueOf(1049), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/ioc_macros.clj" });
    const__334 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "make-env");
    const__337 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "input-env"), Symbol.intern(null, "crossing-env")) })), RT.keyword(null, "line"), Integer.valueOf(1052), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/ioc_macros.clj" });
    const__338 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "pdebug");
    const__341 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(1067), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/ioc_macros.clj" });
    const__342 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "passes");
    const__344 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(1072), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/ioc_macros.clj" });
    const__345 = (Var)RT.var("clojure.core", "into");
    const__346 = (Var)RT.var("clojure.core", "disj");
    const__347 = (Var)RT.var("clojure.tools.analyzer.passes.jvm.warn-on-reflection", "warn-on-reflection");
    const__348 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "run-passes");
    const__350 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(1077), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/ioc_macros.clj" });
    const__351 = (Var)RT.var("clojure.tools.analyzer.passes", "schedule");
    const__352 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "emit-hinted");
    const__355 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "local"), Symbol.intern(null, "tag"), Symbol.intern(null, "env")) })), RT.keyword(null, "line"), Integer.valueOf(1080), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/ioc_macros.clj" });
    const__356 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "state-machine");
    const__359 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "body"), Symbol.intern(null, "num-user-params"), Tuple.create(Symbol.intern(null, "crossing-env"), Symbol.intern(null, "env")), Symbol.intern(null, "user-transitions")) })), RT.keyword(null, "line"), Integer.valueOf(1096), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/ioc_macros.clj" });
  }
  
  static  {
    __init0();
    __init1();
    __init2();
    __init3();
    Compiler.pushNSandLoader(RT.classForName("clojure.core.async.impl.ioc_macros__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
