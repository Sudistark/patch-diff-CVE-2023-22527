package clojure.core.async.impl.buffers;

import clojure.core.async.impl.protocols.Buffer;
import clojure.core.async.impl.protocols.UnblockingBuffer;
import clojure.lang.Counted;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.IPersistentVector;
import clojure.lang.IType;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.LinkedList;

public final class SlidingBuffer implements UnblockingBuffer, Buffer, Counted, IType {
  public final Object buf;
  
  public final long n;
  
  private static Class __cached_class__0;
  
  public static final Var const__1 = (Var)RT.var("clojure.core.async.impl.protocols", "remove!");
  
  public SlidingBuffer(Object paramObject, long paramLong) { this.buf = paramObject;
    this.n = paramLong; }
  
  public static IPersistentVector getBasis() { return Tuple.create(((IObj)Symbol.intern(null, "buf")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "LinkedList") })), ((IObj)Symbol.intern(null, "n")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "long") }))); }
  
  public int count() { this = null;
    return ((LinkedList)this.buf).size(); }
  
  public Object close_buf_BANG_() { return null; }
  
  public Object add_BANG__STAR_(Object itm) { // Byte code:
    //   0: aload_0
    //   1: getfield buf : Ljava/lang/Object;
    //   4: checkcast java/util/LinkedList
    //   7: invokevirtual size : ()I
    //   10: i2l
    //   11: aload_0
    //   12: getfield n : J
    //   15: lcmp
    //   16: ifne -> 72
    //   19: aload_0
    //   20: dup
    //   21: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   24: getstatic clojure/core/async/impl/buffers/SlidingBuffer.__cached_class__0 : Ljava/lang/Class;
    //   27: if_acmpeq -> 44
    //   30: dup
    //   31: instanceof clojure/core/async/impl/protocols/Buffer
    //   34: ifne -> 59
    //   37: dup
    //   38: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   41: putstatic clojure/core/async/impl/buffers/SlidingBuffer.__cached_class__0 : Ljava/lang/Class;
    //   44: getstatic clojure/core/async/impl/buffers/SlidingBuffer.const__1 : Lclojure/lang/Var;
    //   47: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   50: swap
    //   51: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   56: goto -> 67
    //   59: checkcast clojure/core/async/impl/protocols/Buffer
    //   62: invokeinterface remove_BANG_ : ()Ljava/lang/Object;
    //   67: pop
    //   68: goto -> 74
    //   71: athrow
    //   72: aconst_null
    //   73: pop
    //   74: aload_0
    //   75: getfield buf : Ljava/lang/Object;
    //   78: checkcast java/util/LinkedList
    //   81: aload_1
    //   82: aconst_null
    //   83: astore_1
    //   84: invokevirtual addFirst : (Ljava/lang/Object;)V
    //   87: aconst_null
    //   88: pop
    //   89: aload_0
    //   90: areturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #53	-> 0
    //   #61	-> 0
    //   #61	-> 0
    //   #61	-> 7
    //   #62	-> 19
    //   #62	-> 51
    //   #63	-> 84
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   0	90	0	this	Lclojure/core/async/impl/buffers/SlidingBuffer;
    //   0	90	1	itm	Ljava/lang/Object; }
  
  public Object remove_BANG_() { return ((LinkedList)this.buf).removeLast(); }
  
  public Object full_QMARK_() { return Boolean.FALSE; }
}
