package clojure.core.async.impl.exec;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.Delay;
import clojure.lang.IFn;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class threadpool__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final Var const__4;
  
  public static final AFn const__12;
  
  public static final Var const__13;
  
  public static final AFn const__17;
  
  public static void load() { LockingTransaction.runInTransaction((Callable)new threadpool.fn__397());
    const__4.setMeta((IPersistentMap)const__12);
    const__4.bindRoot(new Delay((IFn)new threadpool.fn__399()));
    const__13.setMeta((IPersistentMap)const__17);
    const__13.bindRoot(new threadpool.thread_pool_executor()); }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "clojure.core.async.impl.exec.threadpool");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("clojure.core", "*warn-on-reflection*");
    const__4 = (Var)RT.var("clojure.core.async.impl.exec.threadpool", "pool-size");
    const__12 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(16), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/exec/threadpool.clj", RT.keyword(null, "doc"), "Value is set via clojure.core.async.pool-size system property; defaults to 8; uses a\n   delay so property can be set from code after core.async namespace is loaded but before\n   any use of the async thread pool." });
    const__13 = (Var)RT.var("clojure.core.async.impl.exec.threadpool", "thread-pool-executor");
    const__17 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(24), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/exec/threadpool.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("clojure.core.async.impl.exec.threadpool__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
