package clojure.core.async.impl.ioc_macros;

import clojure.lang.AFn;
import clojure.lang.APersistentMap;
import clojure.lang.Associative;
import clojure.lang.Counted;
import clojure.lang.IFn;
import clojure.lang.IHashEq;
import clojure.lang.IKeywordLookup;
import clojure.lang.ILookup;
import clojure.lang.ILookupThunk;
import clojure.lang.IMapEntry;
import clojure.lang.IObj;
import clojure.lang.IPersistentCollection;
import clojure.lang.IPersistentMap;
import clojure.lang.IPersistentVector;
import clojure.lang.IRecord;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.MapEntry;
import clojure.lang.Numbers;
import clojure.lang.PersistentHashSet;
import clojure.lang.PersistentVector;
import clojure.lang.RT;
import clojure.lang.RecordIterator;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Util;
import clojure.lang.Var;
import java.io.Serializable;
import java.util.Collection;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

public final class Case implements ITerminator, IInstruction, IRecord, IHashEq, IObj, ILookup, IKeywordLookup, IPersistentMap, Map, Serializable {
  public final Object val_id;
  
  public final Object test_vals;
  
  public final Object jmp_blocks;
  
  public final Object default_block;
  
  public final Object __meta;
  
  public final Object __extmap;
  
  int __hash;
  
  int __hasheq;
  
  public static final Var const__0 = (Var)RT.var("clojure.core", "set");
  
  public static final Var const__1 = (Var)RT.var("clojure.core", "vals");
  
  public static final Var const__2 = (Var)RT.var("clojure.core", "keys");
  
  public static final Var const__4 = (Var)RT.var("clojure.core", "some");
  
  public static final Var const__7 = (Var)RT.var("clojure.core", "contains?");
  
  public static final Keyword const__8 = (Keyword)RT.keyword(null, "jmp-blocks");
  
  public static final Keyword const__9 = (Keyword)RT.keyword(null, "test-vals");
  
  public static final Keyword const__10 = (Keyword)RT.keyword(null, "default-block");
  
  public static final Keyword const__11 = (Keyword)RT.keyword(null, "val-id");
  
  public static final AFn const__12 = (AFn)PersistentHashSet.create(new Object[] { RT.keyword(null, "jmp-blocks"), RT.keyword(null, "test-vals"), RT.keyword(null, "default-block"), RT.keyword(null, "val-id") });
  
  public static final Var const__13 = (Var)RT.var("clojure.core", "dissoc");
  
  public static final Var const__14 = (Var)RT.var("clojure.core", "with-meta");
  
  public static final Var const__15 = (Var)RT.var("clojure.core", "into");
  
  public static final Var const__16 = (Var)RT.var("clojure.core", "not-empty");
  
  public static final Var const__17 = (Var)RT.var("clojure.core", "identical?");
  
  public static final Var const__18 = (Var)RT.var("clojure.core", "assoc");
  
  public static final AFn const__19 = (AFn)Tuple.create(RT.keyword(null, "val-id"), RT.keyword(null, "test-vals"), RT.keyword(null, "jmp-blocks"), RT.keyword(null, "default-block"));
  
  public static final Var const__20 = (Var)RT.var("clojure.core", "seq");
  
  public static final Var const__21 = (Var)RT.var("clojure.core", "concat");
  
  public static final Var const__22 = (Var)RT.var("clojure.core", "not");
  
  public static final Var const__23 = (Var)RT.var("clojure.core", "class");
  
  public static final Var const__24 = (Var)RT.var("clojure.core", "imap-cons");
  
  public static final Var const__25 = (Var)RT.var("clojure.core", "str");
  
  public static final Var const__34 = (Var)RT.var("clojure.core", "list");
  
  public static final AFn const__35 = (AFn)Symbol.intern(null, "do");
  
  public static final AFn const__36 = (AFn)Symbol.intern("clojure.core", "case");
  
  public static final Var const__37 = (Var)RT.var("clojure.core", "mapcat");
  
  public static final Var const__38 = (Var)RT.var("clojure.core", "apply");
  
  public static final Var const__39 = (Var)RT.var("clojure.core", "vector");
  
  public static final AFn const__40 = (AFn)Symbol.intern(null, "do");
  
  public static final AFn const__41 = (AFn)Symbol.intern("clojure.core.async.impl.ioc-macros", "aset-all!");
  
  public static final Object const__42 = Long.valueOf(1L);
  
  public static final Keyword const__43 = (Keyword)RT.keyword(null, "recur");
  
  public Case(Object paramObject1, Object paramObject2, Object paramObject3, Object paramObject4, Object paramObject5, Object paramObject6, int paramInt1, int paramInt2) { this.val_id = paramObject1;
    this.test_vals = paramObject2;
    this.jmp_blocks = paramObject3;
    this.default_block = paramObject4;
    this.__meta = paramObject5;
    this.__extmap = paramObject6;
    this.__hash = paramInt1;
    this.__hasheq = paramInt2; }
  
  public Case(Object paramObject1, Object paramObject2, Object paramObject3, Object paramObject4) { this(paramObject1, paramObject2, paramObject3, paramObject4, null, null, 0, 0); }
  
  public Case(Object paramObject1, Object paramObject2, Object paramObject3, Object paramObject4, Object paramObject5, Object paramObject6) { this(paramObject1, paramObject2, paramObject3, paramObject4, paramObject5, paramObject6, 0, 0); }
  
  public static IPersistentVector getBasis() { return Tuple.create(Symbol.intern(null, "val-id"), Symbol.intern(null, "test-vals"), Symbol.intern(null, "jmp-blocks"), Symbol.intern(null, "default-block")); }
  
  public static Case create(IPersistentMap paramIPersistentMap) {
    Object object1 = paramIPersistentMap.valAt(Keyword.intern("val-id"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("val-id"));
    Object object2 = paramIPersistentMap.valAt(Keyword.intern("test-vals"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("test-vals"));
    Object object3 = paramIPersistentMap.valAt(Keyword.intern("jmp-blocks"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("jmp-blocks"));
    Object object4 = paramIPersistentMap.valAt(Keyword.intern("default-block"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("default-block"));
    return new Case(object1, object2, object3, object4, null, RT.seqOrElse(paramIPersistentMap), 0, 0);
  }
  
  public Object terminate_block(Object state_sym, Object _) { // Byte code:
    //   0: getstatic clojure/core/async/impl/ioc_macros/Case.const__20 : Lclojure/lang/Var;
    //   3: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   6: checkcast clojure/lang/IFn
    //   9: getstatic clojure/core/async/impl/ioc_macros/Case.const__21 : Lclojure/lang/Var;
    //   12: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   15: checkcast clojure/lang/IFn
    //   18: getstatic clojure/core/async/impl/ioc_macros/Case.const__34 : Lclojure/lang/Var;
    //   21: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   24: checkcast clojure/lang/IFn
    //   27: getstatic clojure/core/async/impl/ioc_macros/Case.const__35 : Lclojure/lang/AFn;
    //   30: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   35: getstatic clojure/core/async/impl/ioc_macros/Case.const__34 : Lclojure/lang/Var;
    //   38: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   41: checkcast clojure/lang/IFn
    //   44: getstatic clojure/core/async/impl/ioc_macros/Case.const__20 : Lclojure/lang/Var;
    //   47: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   50: checkcast clojure/lang/IFn
    //   53: getstatic clojure/core/async/impl/ioc_macros/Case.const__21 : Lclojure/lang/Var;
    //   56: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   59: checkcast clojure/lang/IFn
    //   62: getstatic clojure/core/async/impl/ioc_macros/Case.const__34 : Lclojure/lang/Var;
    //   65: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   68: checkcast clojure/lang/IFn
    //   71: getstatic clojure/core/async/impl/ioc_macros/Case.const__36 : Lclojure/lang/AFn;
    //   74: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   79: getstatic clojure/core/async/impl/ioc_macros/Case.const__34 : Lclojure/lang/Var;
    //   82: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   85: checkcast clojure/lang/IFn
    //   88: aload_0
    //   89: getfield val_id : Ljava/lang/Object;
    //   92: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   97: getstatic clojure/core/async/impl/ioc_macros/Case.const__21 : Lclojure/lang/Var;
    //   100: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   103: checkcast clojure/lang/IFn
    //   106: getstatic clojure/core/async/impl/ioc_macros/Case.const__37 : Lclojure/lang/Var;
    //   109: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   112: checkcast clojure/lang/IFn
    //   115: new clojure/core/async/impl/ioc_macros/Case$fn__4384
    //   118: dup
    //   119: aload_1
    //   120: invokespecial <init> : (Ljava/lang/Object;)V
    //   123: aload_0
    //   124: getfield test_vals : Ljava/lang/Object;
    //   127: aload_0
    //   128: getfield jmp_blocks : Ljava/lang/Object;
    //   131: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   136: aload_0
    //   137: getfield default_block : Ljava/lang/Object;
    //   140: dup
    //   141: ifnull -> 388
    //   144: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   147: if_acmpeq -> 389
    //   150: getstatic clojure/core/async/impl/ioc_macros/Case.const__38 : Lclojure/lang/Var;
    //   153: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   156: checkcast clojure/lang/IFn
    //   159: getstatic clojure/core/async/impl/ioc_macros/Case.const__39 : Lclojure/lang/Var;
    //   162: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   165: getstatic clojure/core/async/impl/ioc_macros/Case.const__20 : Lclojure/lang/Var;
    //   168: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   171: checkcast clojure/lang/IFn
    //   174: getstatic clojure/core/async/impl/ioc_macros/Case.const__21 : Lclojure/lang/Var;
    //   177: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   180: checkcast clojure/lang/IFn
    //   183: getstatic clojure/core/async/impl/ioc_macros/Case.const__34 : Lclojure/lang/Var;
    //   186: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   189: checkcast clojure/lang/IFn
    //   192: getstatic clojure/core/async/impl/ioc_macros/Case.const__20 : Lclojure/lang/Var;
    //   195: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   198: checkcast clojure/lang/IFn
    //   201: getstatic clojure/core/async/impl/ioc_macros/Case.const__21 : Lclojure/lang/Var;
    //   204: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   207: checkcast clojure/lang/IFn
    //   210: getstatic clojure/core/async/impl/ioc_macros/Case.const__34 : Lclojure/lang/Var;
    //   213: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   216: checkcast clojure/lang/IFn
    //   219: getstatic clojure/core/async/impl/ioc_macros/Case.const__40 : Lclojure/lang/AFn;
    //   222: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   227: getstatic clojure/core/async/impl/ioc_macros/Case.const__34 : Lclojure/lang/Var;
    //   230: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   233: checkcast clojure/lang/IFn
    //   236: getstatic clojure/core/async/impl/ioc_macros/Case.const__20 : Lclojure/lang/Var;
    //   239: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   242: checkcast clojure/lang/IFn
    //   245: getstatic clojure/core/async/impl/ioc_macros/Case.const__21 : Lclojure/lang/Var;
    //   248: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   251: checkcast clojure/lang/IFn
    //   254: getstatic clojure/core/async/impl/ioc_macros/Case.const__34 : Lclojure/lang/Var;
    //   257: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   260: checkcast clojure/lang/IFn
    //   263: getstatic clojure/core/async/impl/ioc_macros/Case.const__41 : Lclojure/lang/AFn;
    //   266: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   271: getstatic clojure/core/async/impl/ioc_macros/Case.const__34 : Lclojure/lang/Var;
    //   274: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   277: checkcast clojure/lang/IFn
    //   280: aload_1
    //   281: aconst_null
    //   282: astore_1
    //   283: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   288: getstatic clojure/core/async/impl/ioc_macros/Case.const__34 : Lclojure/lang/Var;
    //   291: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   294: checkcast clojure/lang/IFn
    //   297: getstatic clojure/core/async/impl/ioc_macros/Case.const__42 : Ljava/lang/Object;
    //   300: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   305: getstatic clojure/core/async/impl/ioc_macros/Case.const__34 : Lclojure/lang/Var;
    //   308: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   311: checkcast clojure/lang/IFn
    //   314: aload_0
    //   315: getfield default_block : Ljava/lang/Object;
    //   318: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   323: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   328: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   333: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   338: getstatic clojure/core/async/impl/ioc_macros/Case.const__34 : Lclojure/lang/Var;
    //   341: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   344: checkcast clojure/lang/IFn
    //   347: getstatic clojure/core/async/impl/ioc_macros/Case.const__43 : Lclojure/lang/Keyword;
    //   350: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   355: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   360: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   365: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   370: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   375: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   380: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   385: goto -> 390
    //   388: pop
    //   389: aconst_null
    //   390: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   395: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   400: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   405: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   410: getstatic clojure/core/async/impl/ioc_macros/Case.const__34 : Lclojure/lang/Var;
    //   413: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   416: checkcast clojure/lang/IFn
    //   419: getstatic clojure/core/async/impl/ioc_macros/Case.const__43 : Lclojure/lang/Keyword;
    //   422: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   427: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   432: aconst_null
    //   433: astore_0
    //   434: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   439: areturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #313	-> 0
    //   #313	-> 6
    //   #313	-> 15
    //   #313	-> 24
    //   #313	-> 30
    //   #313	-> 41
    //   #313	-> 50
    //   #313	-> 59
    //   #313	-> 68
    //   #313	-> 74
    //   #313	-> 85
    //   #313	-> 92
    //   #321	-> 103
    //   #321	-> 112
    //   #321	-> 131
    //   #325	-> 136
    //   #325	-> 156
    //   #325	-> 171
    //   #325	-> 180
    //   #325	-> 189
    //   #325	-> 198
    //   #325	-> 207
    //   #325	-> 216
    //   #325	-> 222
    //   #325	-> 233
    //   #325	-> 242
    //   #325	-> 251
    //   #325	-> 260
    //   #325	-> 266
    //   #325	-> 277
    //   #325	-> 283
    //   #325	-> 294
    //   #325	-> 300
    //   #325	-> 311
    //   #325	-> 318
    //   #325	-> 323
    //   #325	-> 328
    //   #325	-> 333
    //   #325	-> 344
    //   #325	-> 350
    //   #325	-> 355
    //   #325	-> 360
    //   #325	-> 365
    //   #325	-> 370
    //   #325	-> 375
    //   #325	-> 380
    //   #321	-> 390
    //   #313	-> 395
    //   #313	-> 400
    //   #313	-> 405
    //   #313	-> 416
    //   #313	-> 422
    //   #313	-> 427
    //   #313	-> 432
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   0	439	0	this	Lclojure/core/async/impl/ioc_macros/Case;
    //   0	439	1	state_sym	Ljava/lang/Object;
    //   0	439	2	_	Ljava/lang/Object; }
  
  public Object block_references() { return PersistentVector.EMPTY; }
  
  public Object writes_to() { return PersistentVector.EMPTY; }
  
  public Object reads_from() { return Tuple.create(this.val_id); }
  
  public int hasheq() {
    int hq__7768__auto__4388 = this.__hasheq, h__7769__auto__4387 = RT.intCast(0x63D9E4D4L ^ APersistentMap.mapHasheq((IPersistentMap)this));
    this.__hasheq = h__7769__auto__4387;
    return (hq__7768__auto__4388 == 0L) ? h__7769__auto__4387 : hq__7768__auto__4388;
  }
  
  public int hashCode() {
    int hash__7771__auto__4390 = this.__hash, h__7772__auto__4389 = APersistentMap.mapHash((IPersistentMap)this);
    this.__hash = h__7772__auto__4389;
    return (hash__7771__auto__4390 == 0L) ? h__7772__auto__4389 : hash__7771__auto__4390;
  }
  
  public boolean equals(Object G__4370) { G__4370 = null;
    return APersistentMap.mapEquals((IPersistentMap)this, G__4370); }
  
  public IPersistentMap meta() { return (IPersistentMap)this.__meta; }
  
  public IObj withMeta(IPersistentMap G__4370) { G__4370 = null;
    return (IObj)new Case(this.val_id, this.test_vals, this.jmp_blocks, this.default_block, G__4370, this.__extmap, this.__hash, this.__hasheq); }
  
  public Object valAt(Object k__7777__auto__) { k__7777__auto__ = null;
    return ((ILookup)this).valAt(k__7777__auto__, null); }
  
  public Object valAt(Object k__7779__auto__, Object else__7780__auto__) {
    Object G__4383 = k__7779__auto__;
    switch (Util.hash(G__4383) >> 1 & 0x3) {
      case 0:
        if (G__4383 == const__10);
        break;
      case 1:
        if (G__4383 == const__9);
        break;
      case 2:
        if (G__4383 == const__8);
        break;
      case 3:
        if (G__4383 == const__11);
        break;
    } 
    k__7779__auto__ = null;
    else__7780__auto__ = null;
    this = null;
    return RT.get(this.__extmap, k__7779__auto__, else__7780__auto__);
  }
  
  public ILookupThunk getLookupThunk(Keyword k__7782__auto__) {
    Object gclass = ((IFn)const__23.getRawRoot()).invoke(this), G__4374 = k__7782__auto__ = null;
    switch (Util.hash(G__4374) >> 1 & 0x3) {
      case 0:
        if (G__4374 == const__10)
          gclass = null; 
        break;
      case 1:
        if (G__4374 == const__9)
          gclass = null; 
        break;
      case 2:
        if (G__4374 == const__8)
          gclass = null; 
        break;
      case 3:
        if (G__4374 == const__11)
          gclass = null; 
        break;
    } 
    return (ILookupThunk)null;
  }
  
  public int count() { return RT.intCast(Numbers.add(4L, RT.count(this.__extmap))); }
  
  public IPersistentCollection empty() { throw (Throwable)new UnsupportedOperationException((String)((IFn)const__25.getRawRoot()).invoke("Can't create empty: ", "clojure.core.async.impl.ioc_macros.Case")); }
  
  public IPersistentCollection cons(Object e__7786__auto__) { e__7786__auto__ = null;
    this = null;
    return (IPersistentCollection)((IFn)const__24).invoke(this, e__7786__auto__); }
  
  public boolean equiv(Object G__4370) {
    boolean or__5516__auto__4395 = Util.identical(this, G__4370);
    Object G__4370 = G__4370 = null;
    boolean and__5514__auto__4394 = Util.equiv(this.val_id, ((Case)G__4370).val_id), and__5514__auto__4393 = Util.equiv(this.test_vals, ((Case)G__4370).test_vals), and__5514__auto__4392 = Util.equiv(this.jmp_blocks, ((Case)G__4370).jmp_blocks), and__5514__auto__4391 = Util.equiv(this.default_block, ((Case)G__4370).default_block);
    G__4370 = null;
    return RT.booleanCast(or__5516__auto__4395 ? (or__5516__auto__4395 ? Boolean.TRUE : Boolean.FALSE) : (Util.identical(((IFn)const__23.getRawRoot()).invoke(this), ((IFn)const__23.getRawRoot()).invoke(G__4370)) ? (and__5514__auto__4394 ? (and__5514__auto__4393 ? (and__5514__auto__4392 ? (and__5514__auto__4391 ? (Util.equiv(this.__extmap, ((Case)G__4370).__extmap) ? Boolean.TRUE : Boolean.FALSE) : (and__5514__auto__4391 ? Boolean.TRUE : Boolean.FALSE)) : (and__5514__auto__4392 ? Boolean.TRUE : Boolean.FALSE)) : (and__5514__auto__4393 ? Boolean.TRUE : Boolean.FALSE)) : (and__5514__auto__4394 ? Boolean.TRUE : Boolean.FALSE)) : null));
  }
  
  public boolean containsKey(Object k__7789__auto__) { k__7789__auto__ = null;
    this = null;
    return ((Boolean)((IFn)const__22.getRawRoot()).invoke(Util.identical(this, ((ILookup)this).valAt(k__7789__auto__, this)) ? Boolean.TRUE : Boolean.FALSE)).booleanValue(); }
  
  public IMapEntry entryAt(Object k__7791__auto__) {
    Object v__7792__auto__4396 = ((ILookup)this).valAt(k__7791__auto__, this);
    k__7791__auto__ = null;
    v__7792__auto__4396 = null;
    this = null;
    return (IMapEntry)(Util.identical(this, v__7792__auto__4396) ? null : MapEntry.create(k__7791__auto__, v__7792__auto__4396));
  }
  
  public ISeq seq() { this = null;
    return (ISeq)((IFn)const__20.getRawRoot()).invoke(((IFn)const__21.getRawRoot()).invoke(Tuple.create(MapEntry.create(const__11, this.val_id), MapEntry.create(const__9, this.test_vals), MapEntry.create(const__8, this.jmp_blocks), MapEntry.create(const__10, this.default_block)), this.__extmap)); }
  
  public Iterator iterator() { return (Iterator)new RecordIterator((ILookup)this, (IPersistentVector)const__19, (Iterator)RT.iter(this.__extmap)); }
  
  public IPersistentMap assoc(Object k__7796__auto__, Object G__4370) {
    Object pred__4372 = const__17.getRawRoot(), expr__4373 = k__7796__auto__;
    if (((IFn)pred__4372).invoke(const__11, expr__4373) != null) {
      if (((IFn)pred__4372).invoke(const__11, expr__4373) != Boolean.FALSE)
        G__4370 = null; 
    } else {
      ((IFn)pred__4372).invoke(const__11, expr__4373);
    } 
    if (((IFn)pred__4372).invoke(const__9, expr__4373) != null) {
      if (((IFn)pred__4372).invoke(const__9, expr__4373) != Boolean.FALSE)
        G__4370 = null; 
    } else {
      ((IFn)pred__4372).invoke(const__9, expr__4373);
    } 
    if (((IFn)pred__4372).invoke(const__8, expr__4373) != null) {
      if (((IFn)pred__4372).invoke(const__8, expr__4373) != Boolean.FALSE)
        G__4370 = null; 
    } else {
      ((IFn)pred__4372).invoke(const__8, expr__4373);
    } 
    pred__4372 = null;
    expr__4373 = null;
    if (((IFn)pred__4372).invoke(const__10, expr__4373) != null) {
      if (((IFn)pred__4372).invoke(const__10, expr__4373) != Boolean.FALSE)
        G__4370 = null; 
    } else {
      ((IFn)pred__4372).invoke(const__10, expr__4373);
    } 
    k__7796__auto__ = null;
    G__4370 = null;
    return (IPersistentMap)new Case(this.val_id, this.test_vals, this.jmp_blocks, this.default_block, this.__meta, ((IFn)const__18.getRawRoot()).invoke(this.__extmap, k__7796__auto__, G__4370));
  }
  
  public IPersistentMap without(Object k__7798__auto__) { if (((IFn)const__7.getRawRoot()).invoke(const__12, k__7798__auto__) != null) {
      if (((IFn)const__7.getRawRoot()).invoke(const__12, k__7798__auto__) != Boolean.FALSE) {
        k__7798__auto__ = null;
        this = null;
      } 
    } else {
      ((IFn)const__7.getRawRoot()).invoke(const__12, k__7798__auto__);
    } 
    k__7798__auto__ = null;
    return (IPersistentMap)new Case(this.val_id, this.test_vals, this.jmp_blocks, this.default_block, this.__meta, ((IFn)const__16.getRawRoot()).invoke(((IFn)const__13.getRawRoot()).invoke(this.__extmap, k__7798__auto__))); }
  
  public int size() { this = null;
    return ((Counted)this).count(); }
  
  public boolean isEmpty() { return Util.equiv(0L, ((Counted)this).count()); }
  
  public boolean containsValue(Object v__7802__auto__) { v__7802__auto__ = null;
    return RT.booleanCast(((IFn)const__4.getRawRoot()).invoke(RT.set(new Object[] { v__7802__auto__ }, ), ((IFn)const__1.getRawRoot()).invoke(this))); }
  
  public Object get(Object k__7804__auto__) { k__7804__auto__ = null;
    return ((ILookup)this).valAt(k__7804__auto__); }
  
  public Object put(Object k__7806__auto__, Object v__7807__auto__) { throw (Throwable)new UnsupportedOperationException(); }
  
  public Object remove(Object k__7809__auto__) { throw (Throwable)new UnsupportedOperationException(); }
  
  public void putAll(Map m__7811__auto__) { throw (Throwable)new UnsupportedOperationException(); }
  
  public void clear() { throw (Throwable)new UnsupportedOperationException(); }
  
  public Set keySet() { this = null;
    return (Set)((IFn)const__0.getRawRoot()).invoke(((IFn)const__2.getRawRoot()).invoke(this)); }
  
  public Collection values() { this = null;
    return (Collection)((IFn)const__1.getRawRoot()).invoke(this); }
  
  public Set entrySet() { this = null;
    return (Set)((IFn)const__0.getRawRoot()).invoke(this); }
}
