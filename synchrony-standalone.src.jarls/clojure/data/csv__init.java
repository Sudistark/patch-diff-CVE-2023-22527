package clojure.data;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class csv__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final Keyword const__3;
  
  public static final AFn const__4;
  
  public static final AFn const__5;
  
  public static final Var const__6;
  
  public static final AFn const__13;
  
  public static final Object const__15;
  
  public static final Var const__16;
  
  public static final AFn const__18;
  
  public static final Object const__19;
  
  public static final Var const__20;
  
  public static final AFn const__22;
  
  public static final Object const__23;
  
  public static final Var const__24;
  
  public static final AFn const__28;
  
  public static final Var const__29;
  
  public static final AFn const__32;
  
  public static final Var const__33;
  
  public static final AFn const__36;
  
  public static final Object const__37;
  
  public static final Var const__38;
  
  public static final Var const__39;
  
  public static final Var const__40;
  
  public static final Var const__41;
  
  public static final ISeq const__42;
  
  public static final Var const__43;
  
  public static final Var const__44;
  
  public static final AFn const__48;
  
  public static final Keyword const__49;
  
  public static final AFn const__50;
  
  public static final Keyword const__51;
  
  public static final Keyword const__52;
  
  public static final Keyword const__53;
  
  public static final AFn const__54;
  
  public static final Keyword const__55;
  
  public static final Var const__56;
  
  public static final Var const__57;
  
  public static final Var const__58;
  
  public static final AFn const__59;
  
  public static final AFn const__60;
  
  public static final Keyword const__61;
  
  public static final Var const__62;
  
  public static final AFn const__63;
  
  public static final Var const__64;
  
  public static final Object const__65;
  
  public static final Object const__66;
  
  public static final Object const__67;
  
  public static final Var const__68;
  
  public static final AFn const__71;
  
  public static final Var const__72;
  
  public static final AFn const__75;
  
  public static final Var const__76;
  
  public static final AFn const__79;
  
  public static final Var const__80;
  
  public static final AFn const__83;
  
  public static final Var const__84;
  
  public static final AFn const__87;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new csv.fn__64618());
    const__6.setMeta((IPersistentMap)const__13);
    const__6








      
      .bindRoot(Integer.valueOf(RT.intCast(const__15)));
    const__16.setMeta((IPersistentMap)const__18);
    const__16
      .bindRoot(Integer.valueOf(RT.intCast(const__19)));
    const__20.setMeta((IPersistentMap)const__22);
    const__20.bindRoot(const__23);
    const__24.setMeta((IPersistentMap)const__28);
    const__24.bindRoot(new csv.read_quoted_cell());
    const__29.setMeta((IPersistentMap)const__32);
    const__29.bindRoot(new csv.read_cell());
    const__33.setMeta((IPersistentMap)const__36);
    const__33.bindRoot(new csv.read_record());
    const__68.setMeta((IPersistentMap)const__71);
    const__68.bindRoot(new csv.read_csv());
    const__72.setMeta((IPersistentMap)const__75);
    const__72.bindRoot(new csv.write_cell());
    const__76.setMeta((IPersistentMap)const__79);
    const__76.bindRoot(new csv.write_record());
    const__80.setMeta((IPersistentMap)const__83);
    const__80.bindRoot(new csv.write_csv_STAR_());
    const__84.setMeta((IPersistentMap)const__87);
    const__84.bindRoot(new csv.write_csv());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "clojure.data.csv")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "author"), "Jonas Enlund", RT.keyword(null, "doc"), "Reading and writing comma separated values." }));
    const__3 = (Keyword)RT.keyword(null, "doc");
    const__4 = (AFn)RT.map(new Object[] { RT.keyword(null, "author"), "Jonas Enlund", RT.keyword(null, "doc"), "Reading and writing comma separated values." });
    const__5 = (AFn)Symbol.intern(null, "clojure.core");
    const__6 = (Var)RT.var("clojure.data.csv", "lf");
    const__13 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(19), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/data/csv.clj" });
    const__15 = Character.valueOf('\n');
    const__16 = (Var)RT.var("clojure.data.csv", "cr");
    const__18 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(20), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/data/csv.clj" });
    const__19 = Character.valueOf('\r');
    const__20 = (Var)RT.var("clojure.data.csv", "eof");
    const__22 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(21), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/data/csv.clj" });
    const__23 = Long.valueOf(-1L);
    const__24 = (Var)RT.var("clojure.data.csv", "read-quoted-cell");
    const__28 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "reader")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "PushbackReader") })), ((IObj)Symbol.intern(null, "sb")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "StringBuilder") })), Symbol.intern(null, "sep"), Symbol.intern(null, "quote")) })), RT.keyword(null, "line"), Integer.valueOf(23), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/data/csv.clj" });
    const__29 = (Var)RT.var("clojure.data.csv", "read-cell");
    const__32 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "reader")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "PushbackReader") })), ((IObj)Symbol.intern(null, "sb")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "StringBuilder") })), Symbol.intern(null, "sep"), Symbol.intern(null, "quote")) })), RT.keyword(null, "line"), Integer.valueOf(42), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/data/csv.clj" });
    const__33 = (Var)RT.var("clojure.data.csv", "read-record");
    const__36 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "reader"), Symbol.intern(null, "sep"), Symbol.intern(null, "quote")) })), RT.keyword(null, "line"), Integer.valueOf(58), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/data/csv.clj" });
    const__37 = RT.classForName("clojure.data.csv.Read_CSV_From");
    const__38 = (Var)RT.var("clojure.core", "alter-meta!");
    const__39 = (Var)RT.var("clojure.data.csv", "Read-CSV-From");
    const__40 = (Var)RT.var("clojure.core", "assoc");
    const__41 = (Var)RT.var("clojure.core", "assert-same-protocol");
    const__42 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "read-csv-from")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "input"), Symbol.intern(null, "sep"), Symbol.intern(null, "quote")) })) })) }));
    const__43 = (Var)RT.var("clojure.core", "alter-var-root");
    const__44 = (Var)RT.var("clojure.core", "merge");
    const__48 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "clojure.data.csv.Read_CSV_From"), RT.keyword(null, "on-interface"), RT.classForName("clojure.data.csv.Read_CSV_From") });
    const__49 = (Keyword)RT.keyword(null, "sigs");
    const__50 = (AFn)RT.map(new Object[] { RT.keyword(null, "read-csv-from"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "read-csv-from")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "input"), Symbol.intern(null, "sep"), Symbol.intern(null, "quote")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "input"), Symbol.intern(null, "sep"), Symbol.intern(null, "quote")) })), RT.keyword(null, "doc"), null }) });
    const__51 = (Keyword)RT.keyword(null, "var");
    const__52 = (Keyword)RT.keyword(null, "method-map");
    const__53 = (Keyword)RT.keyword(null, "read-csv-from");
    const__54 = (AFn)RT.map(new Object[] { RT.keyword(null, "read-csv-from"), RT.keyword(null, "read-csv-from") });
    const__55 = (Keyword)RT.keyword(null, "method-builders");
    const__56 = (Var)RT.var("clojure.core", "intern");
    const__57 = (Var)RT.var("clojure.core", "*ns*");
    const__58 = (Var)RT.var("clojure.core", "with-meta");
    const__59 = (AFn)((IObj)Symbol.intern(null, "read-csv-from")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "input"), Symbol.intern(null, "sep"), Symbol.intern(null, "quote")) })) }));
    const__60 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "read-csv-from")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "input"), Symbol.intern(null, "sep"), Symbol.intern(null, "quote")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "input"), Symbol.intern(null, "sep"), Symbol.intern(null, "quote")) })), RT.keyword(null, "doc"), null });
    const__61 = (Keyword)RT.keyword(null, "protocol");
    const__62 = (Var)RT.var("clojure.core", "-reset-methods");
    const__63 = (AFn)Symbol.intern(null, "Read-CSV-From");
    const__64 = (Var)RT.var("clojure.core", "extend");
    const__65 = RT.classForName("java.lang.String");
    const__66 = RT.classForName("java.io.Reader");
    const__67 = RT.classForName("java.io.PushbackReader");
    const__68 = (Var)RT.var("clojure.data.csv", "read-csv");
    const__71 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "input"), Symbol.intern(null, "&"), Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "Reads CSV-data from input (String or java.io.Reader) into a lazy\n  sequence of vectors.\n\n   Valid options are\n     :separator (default \\,)\n     :quote (default \\\")", RT.keyword(null, "line"), Integer.valueOf(87), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/data/csv.clj" });
    const__72 = (Var)RT.var("clojure.data.csv", "write-cell");
    const__75 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "writer")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Writer") })), Symbol.intern(null, "obj"), Symbol.intern(null, "sep"), Symbol.intern(null, "quote"), Symbol.intern(null, "quote?")) })), RT.keyword(null, "line"), Integer.valueOf(101), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/data/csv.clj" });
    const__76 = (Var)RT.var("clojure.data.csv", "write-record");
    const__79 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "writer")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Writer") })), Symbol.intern(null, "record"), Symbol.intern(null, "sep"), Symbol.intern(null, "quote"), Symbol.intern(null, "quote?")) })), RT.keyword(null, "line"), Integer.valueOf(111), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/data/csv.clj" });
    const__80 = (Var)RT.var("clojure.data.csv", "write-csv*");
    const__83 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "writer")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Writer") })), Symbol.intern(null, "records"), Symbol.intern(null, "sep"), Symbol.intern(null, "quote"), Symbol.intern(null, "quote?"), ((IObj)Symbol.intern(null, "newline")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") }))) })), RT.keyword(null, "line"), Integer.valueOf(119), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/data/csv.clj" });
    const__84 = (Var)RT.var("clojure.data.csv", "write-csv");
    const__87 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "writer"), Symbol.intern(null, "data"), Symbol.intern(null, "&"), Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "Writes data to writer in CSV-format.\n\n   Valid options are\n     :separator (Default \\,)\n     :quote (Default \\\")\n     :quote? (A predicate function which determines if a string should be quoted. Defaults to quoting only when necessary.)\n     :newline (:lf (default) or :cr+lf)", RT.keyword(null, "line"), Integer.valueOf(127), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/data/csv.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("clojure.data.csv__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
