package clojure.data.priority_map;

import clojure.lang.Associative;
import clojure.lang.IFn;
import clojure.lang.ILookup;
import clojure.lang.IMapEntry;
import clojure.lang.IObj;
import clojure.lang.IPersistentCollection;
import clojure.lang.IPersistentMap;
import clojure.lang.IPersistentStack;
import clojure.lang.IPersistentVector;
import clojure.lang.ISeq;
import clojure.lang.IType;
import clojure.lang.Keyword;
import clojure.lang.MapEntry;
import clojure.lang.MapEquivalence;
import clojure.lang.Numbers;
import clojure.lang.PersistentArrayMap;
import clojure.lang.RT;
import clojure.lang.Reversible;
import clojure.lang.SeqIterator;
import clojure.lang.Seqable;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Util;
import clojure.lang.Var;
import java.io.Serializable;
import java.util.Collection;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

public final class PersistentPriorityMap implements Iterable, ILookup, Map, IObj, Reversible, IFn, MapEquivalence, IPersistentMap, Serializable, IPersistentStack, IType {
  public final Object priority__GT_set_of_items;
  
  public final Object item__GT_priority;
  
  public final Object _meta;
  
  public final Object keyfn;
  
  public static final Var const__0 = (Var)RT.var("clojure.core", "str");
  
  public static final Var const__1 = (Var)RT.var("clojure.core", "seq");
  
  public static final Var const__5 = (Var)RT.var("clojure.core", "some");
  
  public static final Var const__6 = (Var)RT.var("clojure.core", "partial");
  
  public static final Var const__7 = (Var)RT.var("clojure.core", "=");
  
  public static final Var const__8 = (Var)RT.var("clojure.core", "vals");
  
  public static final Var const__9 = (Var)RT.var("clojure.core", "contains?");
  
  public static final Var const__10 = (Var)RT.var("clojure.core", "set");
  
  public static final Var const__11 = (Var)RT.var("clojure.core", "keys");
  
  public static final Var const__12 = (Var)RT.var("clojure.core", "rseq");
  
  public static final Var const__14 = (Var)RT.var("clojure.core", "assoc");
  
  public static final Var const__15 = (Var)RT.var("clojure.core", "dissoc");
  
  public static final Var const__16 = (Var)RT.var("clojure.core", "conj");
  
  public static final Var const__17 = (Var)RT.var("clojure.core", "meta");
  
  public static final Var const__18 = (Var)RT.var("clojure.core", "disj");
  
  public static final Var const__19 = (Var)RT.var("clojure.core", "empty");
  
  public static final Var const__20 = (Var)RT.var("clojure.core", "map?");
  
  public static final Var const__21 = (Var)RT.var("clojure.core", "into");
  
  public static final Keyword const__25 = (Keyword)RT.keyword("clojure.data.priority-map", "not-found");
  
  public static final Var const__26 = (Var)RT.var("clojure.core", "first"), const__27 = (Var)RT.var("clojure.core", "val"), const__28 = (Var)RT.var("clojure.core", "key");
  
  public PersistentPriorityMap(Object paramObject1, Object paramObject2, Object paramObject3, Object paramObject4) { this.priority__GT_set_of_items = paramObject1;
    this.item__GT_priority = paramObject2;
    this._meta = paramObject3;
    this.keyfn = paramObject4; }
  
  public static IPersistentVector getBasis() { return Tuple.create(Symbol.intern(null, "priority->set-of-items"), Symbol.intern(null, "item->priority"), Symbol.intern(null, "_meta"), Symbol.intern(null, "keyfn")); }
  
  public IPersistentStack pop() {
    if (((Map)this).isEmpty())
      throw (Throwable)new IllegalStateException((String)"Can't pop empty priority map"); 
    Object f = ((IFn)const__26.getRawRoot()).invoke(this.priority__GT_set_of_items);
    Object item_set = ((IFn)const__27.getRawRoot()).invoke(f);
    Object item = ((IFn)const__26.getRawRoot()).invoke(item_set);
    f = null;
    Object priority_key = ((IFn)const__28.getRawRoot()).invoke(f);
    priority_key = null;
    item = null;
    priority_key = null;
    item_set = null;
    item = null;
    return (IPersistentStack)((RT.count(item_set) == 1L) ? new PersistentPriorityMap(((IFn)const__15.getRawRoot()).invoke(this.priority__GT_set_of_items, priority_key), ((IFn)const__15.getRawRoot()).invoke(this.item__GT_priority, item), ((IFn)const__17.getRawRoot()).invoke(this), this.keyfn) : new PersistentPriorityMap(((IFn)const__14.getRawRoot()).invoke(this.priority__GT_set_of_items, priority_key, ((IFn)const__18.getRawRoot()).invoke(item_set, item)), ((IFn)const__15.getRawRoot()).invoke(this.item__GT_priority, item), ((IFn)const__17.getRawRoot())
        .invoke(this), this.keyfn));
  }
  
  public Object peek() {
    Object f = ((IFn)const__26.getRawRoot()).invoke(this.priority__GT_set_of_items);
    Object item = ((IFn)const__26.getRawRoot()).invoke(((IFn)const__27.getRawRoot()).invoke(f));
    if (this.keyfn != null) {
      if (this.keyfn != Boolean.FALSE)
        item = null; 
    } else {
      this.keyfn;
    } 
    item = null;
    f = null;
    return ((Map)this).isEmpty() ? null : new MapEntry(item, ((IFn)const__28.getRawRoot()).invoke(f));
  }
  
  public IPersistentMap without(Object item) { // Byte code:
    //   0: aload_0
    //   1: getfield item__GT_priority : Ljava/lang/Object;
    //   4: checkcast clojure/lang/IFn
    //   7: aload_1
    //   8: getstatic clojure/data/priority_map/PersistentPriorityMap.const__25 : Lclojure/lang/Keyword;
    //   11: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   16: astore_2
    //   17: aload_2
    //   18: getstatic clojure/data/priority_map/PersistentPriorityMap.const__25 : Lclojure/lang/Keyword;
    //   21: invokestatic equiv : (Ljava/lang/Object;Ljava/lang/Object;)Z
    //   24: ifeq -> 32
    //   27: aload_0
    //   28: goto -> 255
    //   31: athrow
    //   32: aload_0
    //   33: getfield keyfn : Ljava/lang/Object;
    //   36: dup
    //   37: ifnull -> 64
    //   40: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   43: if_acmpeq -> 65
    //   46: aload_0
    //   47: getfield keyfn : Ljava/lang/Object;
    //   50: checkcast clojure/lang/IFn
    //   53: aload_2
    //   54: aconst_null
    //   55: astore_2
    //   56: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   61: goto -> 68
    //   64: pop
    //   65: aload_2
    //   66: aconst_null
    //   67: astore_2
    //   68: astore_3
    //   69: aload_0
    //   70: getfield priority__GT_set_of_items : Ljava/lang/Object;
    //   73: checkcast clojure/lang/IFn
    //   76: aload_3
    //   77: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   82: astore #4
    //   84: aload #4
    //   86: invokestatic count : (Ljava/lang/Object;)I
    //   89: i2l
    //   90: lconst_1
    //   91: lcmp
    //   92: ifne -> 167
    //   95: new clojure/data/priority_map/PersistentPriorityMap
    //   98: dup
    //   99: getstatic clojure/data/priority_map/PersistentPriorityMap.const__15 : Lclojure/lang/Var;
    //   102: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   105: checkcast clojure/lang/IFn
    //   108: aload_0
    //   109: getfield priority__GT_set_of_items : Ljava/lang/Object;
    //   112: aload_3
    //   113: aconst_null
    //   114: astore_3
    //   115: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   120: getstatic clojure/data/priority_map/PersistentPriorityMap.const__15 : Lclojure/lang/Var;
    //   123: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   126: checkcast clojure/lang/IFn
    //   129: aload_0
    //   130: getfield item__GT_priority : Ljava/lang/Object;
    //   133: aload_1
    //   134: aconst_null
    //   135: astore_1
    //   136: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   141: getstatic clojure/data/priority_map/PersistentPriorityMap.const__17 : Lclojure/lang/Var;
    //   144: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   147: checkcast clojure/lang/IFn
    //   150: aload_0
    //   151: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   156: aload_0
    //   157: getfield keyfn : Ljava/lang/Object;
    //   160: invokespecial <init> : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
    //   163: goto -> 255
    //   166: athrow
    //   167: new clojure/data/priority_map/PersistentPriorityMap
    //   170: dup
    //   171: getstatic clojure/data/priority_map/PersistentPriorityMap.const__14 : Lclojure/lang/Var;
    //   174: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   177: checkcast clojure/lang/IFn
    //   180: aload_0
    //   181: getfield priority__GT_set_of_items : Ljava/lang/Object;
    //   184: aload_3
    //   185: aconst_null
    //   186: astore_3
    //   187: getstatic clojure/data/priority_map/PersistentPriorityMap.const__18 : Lclojure/lang/Var;
    //   190: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   193: checkcast clojure/lang/IFn
    //   196: aload #4
    //   198: aconst_null
    //   199: astore #4
    //   201: aload_1
    //   202: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   207: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   212: getstatic clojure/data/priority_map/PersistentPriorityMap.const__15 : Lclojure/lang/Var;
    //   215: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   218: checkcast clojure/lang/IFn
    //   221: aload_0
    //   222: getfield item__GT_priority : Ljava/lang/Object;
    //   225: aload_1
    //   226: aconst_null
    //   227: astore_1
    //   228: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   233: getstatic clojure/data/priority_map/PersistentPriorityMap.const__17 : Lclojure/lang/Var;
    //   236: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   239: checkcast clojure/lang/IFn
    //   242: aload_0
    //   243: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   248: aload_0
    //   249: getfield keyfn : Ljava/lang/Object;
    //   252: invokespecial <init> : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
    //   255: checkcast clojure/lang/IPersistentMap
    //   258: areturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #203	-> 0
    //   #285	-> 4
    //   #285	-> 11
    //   #286	-> 17
    //   #286	-> 21
    //   #289	-> 32
    //   #289	-> 50
    //   #289	-> 56
    //   #290	-> 73
    //   #290	-> 77
    //   #291	-> 84
    //   #291	-> 84
    //   #291	-> 86
    //   #293	-> 105
    //   #293	-> 115
    //   #294	-> 126
    //   #294	-> 136
    //   #295	-> 147
    //   #295	-> 151
    //   #299	-> 177
    //   #299	-> 193
    //   #299	-> 202
    //   #299	-> 207
    //   #300	-> 218
    //   #300	-> 228
    //   #301	-> 239
    //   #301	-> 243
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   69	186	3	priority_key	Ljava/lang/Object;
    //   84	171	4	item_set	Ljava/lang/Object;
    //   17	238	2	priority	Ljava/lang/Object;
    //   0	258	0	this	Lclojure/data/priority_map/PersistentPriorityMap;
    //   0	258	1	item	Ljava/lang/Object; }
  
  public ISeq seq() {
    if (this.keyfn != null) {
      if (this.keyfn != Boolean.FALSE) {
        Object iter__6305__auto__1357 = new iter__1304__1310(this.item__GT_priority);
        iter__6305__auto__1357 = null;
        this = null;
      } 
    } else {
      this.keyfn;
    } 
    Object iter__6305__auto__1358 = new iter__1330__1336();
    iter__6305__auto__1358 = null;
    this = null;
    return (ISeq)((IFn)const__1.getRawRoot()).invoke(((IFn)iter__6305__auto__1358).invoke(this.priority__GT_set_of_items));
  }
  
  public IMapEntry entryAt(Object k) {
    Object v = ((ILookup)this).valAt(k, this);
    k = null;
    v = null;
    return (IMapEntry)(Util.identical(v, this) ? null : new MapEntry(k, v));
  }
  
  public boolean containsKey(Object item) { item = null;
    this = null;
    return ((Boolean)((IFn)const__9.getRawRoot()).invoke(this.item__GT_priority, item)).booleanValue(); }
  
  public boolean equals(Object o) {
    boolean or__5516__auto__1359 = Util.identical(this, o);
    o = null;
    this = null;
    return or__5516__auto__1359 ? or__5516__auto__1359 : this.item__GT_priority.equals(o);
  }
  
  public int hashCode() { this = null;
    return this.item__GT_priority.hashCode(); }
  
  public boolean equiv(Object o) { o = null;
    return Util.equiv(this.item__GT_priority, o); }
  
  public IPersistentCollection cons(Object e) {
    if (((IFn)const__20.getRawRoot()).invoke(e) != null) {
      if (((IFn)const__20.getRawRoot()).invoke(e) != Boolean.FALSE) {
        e = null;
        this = null;
      } 
    } else {
      ((IFn)const__20.getRawRoot()).invoke(e);
    } 
    Object vec__1301 = e = null;
    Object item = RT.nth(vec__1301, RT.intCast(0L), null);
    vec__1301 = null;
    Object priority = RT.nth(vec__1301, RT.intCast(1L), null);
    item = null;
    priority = null;
    return (IPersistentCollection)((IPersistentMap)this).assoc(item, priority);
  }
  
  public IPersistentCollection empty() {
    return (IPersistentCollection)new PersistentPriorityMap(((IFn)const__19.getRawRoot()).invoke(this.priority__GT_set_of_items), PersistentArrayMap.EMPTY, this._meta, this.keyfn);
  }
  
  public IPersistentMap assoc(Object item, Object priority) { // Byte code:
    //   0: aload_0
    //   1: getfield item__GT_priority : Ljava/lang/Object;
    //   4: aload_1
    //   5: aconst_null
    //   6: invokestatic get : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   9: astore_3
    //   10: aload_3
    //   11: dup
    //   12: ifnull -> 386
    //   15: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   18: if_acmpeq -> 387
    //   21: aload_3
    //   22: aload_2
    //   23: invokestatic equiv : (Ljava/lang/Object;Ljava/lang/Object;)Z
    //   26: ifeq -> 34
    //   29: aload_0
    //   30: goto -> 383
    //   33: athrow
    //   34: aload_0
    //   35: getfield keyfn : Ljava/lang/Object;
    //   38: dup
    //   39: ifnull -> 64
    //   42: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   45: if_acmpeq -> 65
    //   48: aload_0
    //   49: getfield keyfn : Ljava/lang/Object;
    //   52: checkcast clojure/lang/IFn
    //   55: aload_2
    //   56: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   61: goto -> 66
    //   64: pop
    //   65: aload_2
    //   66: astore #4
    //   68: aload_0
    //   69: getfield keyfn : Ljava/lang/Object;
    //   72: dup
    //   73: ifnull -> 100
    //   76: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   79: if_acmpeq -> 101
    //   82: aload_0
    //   83: getfield keyfn : Ljava/lang/Object;
    //   86: checkcast clojure/lang/IFn
    //   89: aload_3
    //   90: aconst_null
    //   91: astore_3
    //   92: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   97: goto -> 104
    //   100: pop
    //   101: aload_3
    //   102: aconst_null
    //   103: astore_3
    //   104: astore #5
    //   106: aload_0
    //   107: getfield priority__GT_set_of_items : Ljava/lang/Object;
    //   110: aload #5
    //   112: invokestatic get : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   115: astore #6
    //   117: aload #6
    //   119: aconst_null
    //   120: astore #6
    //   122: invokestatic count : (Ljava/lang/Object;)I
    //   125: i2l
    //   126: lconst_1
    //   127: lcmp
    //   128: ifne -> 254
    //   131: new clojure/data/priority_map/PersistentPriorityMap
    //   134: dup
    //   135: getstatic clojure/data/priority_map/PersistentPriorityMap.const__14 : Lclojure/lang/Var;
    //   138: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   141: checkcast clojure/lang/IFn
    //   144: getstatic clojure/data/priority_map/PersistentPriorityMap.const__15 : Lclojure/lang/Var;
    //   147: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   150: checkcast clojure/lang/IFn
    //   153: aload_0
    //   154: getfield priority__GT_set_of_items : Ljava/lang/Object;
    //   157: aload #5
    //   159: aconst_null
    //   160: astore #5
    //   162: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   167: aload #4
    //   169: getstatic clojure/data/priority_map/PersistentPriorityMap.const__16 : Lclojure/lang/Var;
    //   172: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   175: checkcast clojure/lang/IFn
    //   178: aload_0
    //   179: getfield priority__GT_set_of_items : Ljava/lang/Object;
    //   182: aload #4
    //   184: aconst_null
    //   185: astore #4
    //   187: getstatic clojure/lang/PersistentHashSet.EMPTY : Lclojure/lang/PersistentHashSet;
    //   190: invokestatic get : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   193: aload_1
    //   194: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   199: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   204: getstatic clojure/data/priority_map/PersistentPriorityMap.const__14 : Lclojure/lang/Var;
    //   207: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   210: checkcast clojure/lang/IFn
    //   213: aload_0
    //   214: getfield item__GT_priority : Ljava/lang/Object;
    //   217: aload_1
    //   218: aconst_null
    //   219: astore_1
    //   220: aload_2
    //   221: aconst_null
    //   222: astore_2
    //   223: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   228: getstatic clojure/data/priority_map/PersistentPriorityMap.const__17 : Lclojure/lang/Var;
    //   231: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   234: checkcast clojure/lang/IFn
    //   237: aload_0
    //   238: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   243: aload_0
    //   244: getfield keyfn : Ljava/lang/Object;
    //   247: invokespecial <init> : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
    //   250: goto -> 383
    //   253: athrow
    //   254: new clojure/data/priority_map/PersistentPriorityMap
    //   257: dup
    //   258: getstatic clojure/data/priority_map/PersistentPriorityMap.const__14 : Lclojure/lang/Var;
    //   261: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   264: checkcast clojure/lang/IFn
    //   267: aload_0
    //   268: getfield priority__GT_set_of_items : Ljava/lang/Object;
    //   271: aload #5
    //   273: getstatic clojure/data/priority_map/PersistentPriorityMap.const__18 : Lclojure/lang/Var;
    //   276: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   279: checkcast clojure/lang/IFn
    //   282: aload_0
    //   283: getfield priority__GT_set_of_items : Ljava/lang/Object;
    //   286: aload #5
    //   288: aconst_null
    //   289: astore #5
    //   291: invokestatic get : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   294: aload_1
    //   295: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   300: aload #4
    //   302: getstatic clojure/data/priority_map/PersistentPriorityMap.const__16 : Lclojure/lang/Var;
    //   305: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   308: checkcast clojure/lang/IFn
    //   311: aload_0
    //   312: getfield priority__GT_set_of_items : Ljava/lang/Object;
    //   315: aload #4
    //   317: aconst_null
    //   318: astore #4
    //   320: getstatic clojure/lang/PersistentHashSet.EMPTY : Lclojure/lang/PersistentHashSet;
    //   323: invokestatic get : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   326: aload_1
    //   327: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   332: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   337: getstatic clojure/data/priority_map/PersistentPriorityMap.const__14 : Lclojure/lang/Var;
    //   340: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   343: checkcast clojure/lang/IFn
    //   346: aload_0
    //   347: getfield item__GT_priority : Ljava/lang/Object;
    //   350: aload_1
    //   351: aconst_null
    //   352: astore_1
    //   353: aload_2
    //   354: aconst_null
    //   355: astore_2
    //   356: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   361: getstatic clojure/data/priority_map/PersistentPriorityMap.const__17 : Lclojure/lang/Var;
    //   364: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   367: checkcast clojure/lang/IFn
    //   370: aload_0
    //   371: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   376: aload_0
    //   377: getfield keyfn : Ljava/lang/Object;
    //   380: invokespecial <init> : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
    //   383: goto -> 521
    //   386: pop
    //   387: aload_0
    //   388: getfield keyfn : Ljava/lang/Object;
    //   391: dup
    //   392: ifnull -> 417
    //   395: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   398: if_acmpeq -> 418
    //   401: aload_0
    //   402: getfield keyfn : Ljava/lang/Object;
    //   405: checkcast clojure/lang/IFn
    //   408: aload_2
    //   409: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   414: goto -> 419
    //   417: pop
    //   418: aload_2
    //   419: astore #4
    //   421: new clojure/data/priority_map/PersistentPriorityMap
    //   424: dup
    //   425: getstatic clojure/data/priority_map/PersistentPriorityMap.const__14 : Lclojure/lang/Var;
    //   428: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   431: checkcast clojure/lang/IFn
    //   434: aload_0
    //   435: getfield priority__GT_set_of_items : Ljava/lang/Object;
    //   438: aload #4
    //   440: getstatic clojure/data/priority_map/PersistentPriorityMap.const__16 : Lclojure/lang/Var;
    //   443: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   446: checkcast clojure/lang/IFn
    //   449: aload_0
    //   450: getfield priority__GT_set_of_items : Ljava/lang/Object;
    //   453: aload #4
    //   455: aconst_null
    //   456: astore #4
    //   458: getstatic clojure/lang/PersistentHashSet.EMPTY : Lclojure/lang/PersistentHashSet;
    //   461: invokestatic get : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   464: aload_1
    //   465: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   470: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   475: getstatic clojure/data/priority_map/PersistentPriorityMap.const__14 : Lclojure/lang/Var;
    //   478: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   481: checkcast clojure/lang/IFn
    //   484: aload_0
    //   485: getfield item__GT_priority : Ljava/lang/Object;
    //   488: aload_1
    //   489: aconst_null
    //   490: astore_1
    //   491: aload_2
    //   492: aconst_null
    //   493: astore_2
    //   494: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   499: getstatic clojure/data/priority_map/PersistentPriorityMap.const__17 : Lclojure/lang/Var;
    //   502: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   505: checkcast clojure/lang/IFn
    //   508: aload_0
    //   509: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   514: aload_0
    //   515: getfield keyfn : Ljava/lang/Object;
    //   518: invokespecial <init> : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
    //   521: checkcast clojure/lang/IPersistentMap
    //   524: areturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #203	-> 0
    //   #216	-> 6
    //   #217	-> 10
    //   #219	-> 21
    //   #219	-> 23
    //   #222	-> 34
    //   #222	-> 52
    //   #222	-> 56
    //   #223	-> 68
    //   #223	-> 86
    //   #223	-> 92
    //   #224	-> 112
    //   #225	-> 117
    //   #225	-> 117
    //   #225	-> 122
    //   #230	-> 141
    //   #230	-> 150
    //   #230	-> 162
    //   #231	-> 175
    //   #231	-> 190
    //   #231	-> 194
    //   #230	-> 199
    //   #232	-> 210
    //   #232	-> 223
    //   #233	-> 234
    //   #233	-> 238
    //   #238	-> 264
    //   #239	-> 279
    //   #239	-> 291
    //   #239	-> 295
    //   #240	-> 308
    //   #240	-> 323
    //   #240	-> 327
    //   #238	-> 332
    //   #241	-> 343
    //   #241	-> 356
    //   #242	-> 367
    //   #242	-> 371
    //   #245	-> 387
    //   #245	-> 405
    //   #245	-> 409
    //   #247	-> 431
    //   #248	-> 446
    //   #248	-> 461
    //   #248	-> 465
    //   #247	-> 470
    //   #249	-> 481
    //   #249	-> 494
    //   #250	-> 505
    //   #250	-> 509
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   68	315	4	priority_key	Ljava/lang/Object;
    //   106	277	5	current_priority_key	Ljava/lang/Object;
    //   117	266	6	item_set	Ljava/lang/Object;
    //   421	100	4	priority_key	Ljava/lang/Object;
    //   10	511	3	current_priority	Ljava/lang/Object;
    //   0	524	0	this	Lclojure/data/priority_map/PersistentPriorityMap;
    //   0	524	1	item	Ljava/lang/Object;
    //   0	524	2	priority	Ljava/lang/Object; }
  
  public int count() {
    return RT.count(this.item__GT_priority);
  }
  
  public Object invoke(Object k, Object not_found) { k = null;
    not_found = null;
    return ((ILookup)this).valAt(k, not_found); }
  
  public Object invoke(Object k) { k = null;
    return ((ILookup)this).valAt(k); }
  
  public ISeq rseq() {
    if (this.keyfn != null) {
      if (this.keyfn != Boolean.FALSE) {
        Object iter__6305__auto__1360 = new iter__1249__1255(this.item__GT_priority);
        iter__6305__auto__1360 = null;
        this = null;
      } 
    } else {
      this.keyfn;
    } 
    Object iter__6305__auto__1361 = new iter__1275__1281();
    iter__6305__auto__1361 = null;
    this = null;
    return (ISeq)((IFn)const__1.getRawRoot()).invoke(((IFn)iter__6305__auto__1361).invoke(((IFn)const__12.getRawRoot()).invoke(this.priority__GT_set_of_items)));
  }
  
  public IObj withMeta(IPersistentMap m) { m = null;
    return (IObj)new PersistentPriorityMap(this.priority__GT_set_of_items, this.item__GT_priority, m, this.keyfn); }
  
  public IPersistentMap meta() { return (IPersistentMap)this._meta; }
  
  public Set entrySet() { this = null;
    return (Set)((IFn)const__10.getRawRoot()).invoke(this); }
  
  public Collection values() { this = null;
    return (Collection)((IFn)const__8.getRawRoot()).invoke(this); }
  
  public Set keySet() { this = null;
    return (Set)((IFn)const__10.getRawRoot()).invoke(((IFn)const__11.getRawRoot()).invoke(this)); }
  
  public void clear() { throw (Throwable)new UnsupportedOperationException(); }
  
  public void putAll(Map m) { throw (Throwable)new UnsupportedOperationException(); }
  
  public Object remove(Object k) { throw (Throwable)new UnsupportedOperationException(); }
  
  public Object put(Object k, Object v) { throw (Throwable)new UnsupportedOperationException(); }
  
  public Object get(Object k) { k = null;
    return ((ILookup)this).valAt(k); }
  
  public boolean containsValue(Object v) {
    if (this.keyfn != null) {
      if (this.keyfn != Boolean.FALSE) {
        v = null;
        this = null;
      } 
    } else {
      this.keyfn;
    } 
    v = null;
    this = null;
    return ((Boolean)((IFn)const__9.getRawRoot()).invoke(this.priority__GT_set_of_items, v)).booleanValue();
  }
  
  public boolean isEmpty() {
    return Numbers.isZero(RT.count(this.item__GT_priority));
  }
  
  public int size() {
    return RT.count(this.item__GT_priority);
  }
  
  public Object valAt(Object item, Object not_found) { item = null;
    not_found = null;
    this = null;
    return RT.get(this.item__GT_priority, item, not_found); }
  
  public Object valAt(Object item) { item = null;
    this = null;
    return RT.get(this.item__GT_priority, item); }
  
  public Iterator iterator() {
    return (Iterator)new SeqIterator((ISeq)((IFn)const__1.getRawRoot()).invoke(this));
  }
  
  public String toString() { this = null;
    return (String)((IFn)const__0.getRawRoot()).invoke(((Seqable)this).seq()); }
}
