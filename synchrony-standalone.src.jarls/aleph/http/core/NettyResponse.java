package aleph.http.core;

import clojure.lang.Associative;
import clojure.lang.Counted;
import clojure.lang.IFn;
import clojure.lang.IHashEq;
import clojure.lang.ILookup;
import clojure.lang.IMapEntry;
import clojure.lang.IObj;
import clojure.lang.IPersistentCollection;
import clojure.lang.IPersistentMap;
import clojure.lang.IPersistentVector;
import clojure.lang.ISeq;
import clojure.lang.IType;
import clojure.lang.Keyword;
import clojure.lang.MapEquivalence;
import clojure.lang.PersistentArrayMap;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.SeqIterator;
import clojure.lang.Seqable;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Util;
import clojure.lang.Var;
import io.netty.handler.codec.http.HttpMessage;
import io.netty.handler.codec.http.HttpResponse;
import io.netty.handler.codec.http.HttpResponseStatus;
import io.netty.handler.codec.http.HttpUtil;
import java.util.Collection;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.Callable;
import potemkin.collections.PotemkinMap;
import potemkin.types.PotemkinType;

public final class NettyResponse implements Associative, Callable, Map, ILookup, PotemkinType, Runnable, IPersistentCollection, IHashEq, PotemkinMap, IObj, Iterator, IFn, MapEquivalence, Counted, IPersistentMap, ILookupNettyResponse, Seqable, IType {
  public final Object rsp;
  
  public final Object complete;
  
  public final Object body;
  
  public final Object key_set__28222__auto__;
  
  public final Object added__28223__auto__;
  
  public final Object meta__28224__auto__;
  
  private static Class __cached_class__0;
  
  private static Class __cached_class__1;
  
  private static Class __cached_class__2;
  
  private static Class __cached_class__3;
  
  private static Class __cached_class__4;
  
  private static Class __cached_class__5;
  
  private static Class __cached_class__6;
  
  private static Class __cached_class__7;
  
  private static Class __cached_class__8;
  
  private static Class __cached_class__9;
  
  private static Class __cached_class__10;
  
  public static final Var const__0 = (Var)RT.var("clojure.core", "conj");
  
  public static final Var const__1 = (Var)RT.var("clojure.core", "assoc");
  
  public static final Var const__2 = (Var)RT.var("potemkin.collections", "assoc*");
  
  public static final Var const__3 = (Var)RT.var("clojure.core", "disj");
  
  public static final Var const__4 = (Var)RT.var("clojure.core", "dissoc");
  
  public static final Var const__5 = (Var)RT.var("clojure.core", "reduce");
  
  public static final Object const__6 = Long.valueOf(0L);
  
  public static final Var const__7 = (Var)RT.var("clojure.core", "seq");
  
  public static final Var const__9 = (Var)RT.var("clojure.core", "hash-unordered-coll");
  
  public static final Var const__10 = (Var)RT.var("potemkin.collections", "with-meta*");
  
  public static final Var const__11 = (Var)RT.var("potemkin.collections", "get*");
  
  public static final Var const__12 = (Var)RT.var("clojure.core", "map");
  
  public static final Var const__13 = (Var)RT.var("clojure.core", "second");
  
  public static final Var const__14 = (Var)RT.var("potemkin.collections", "empty*");
  
  public static final Var const__15 = (Var)RT.var("potemkin.collections", "keys*");
  
  public static final Var const__18 = (Var)RT.var("clojure.core", "map?");
  
  public static final Var const__20 = (Var)RT.var("clojure.core", "into");
  
  public static final Var const__21 = (Var)RT.var("clojure.core", "str");
  
  public static final Var const__24 = (Var)RT.var("clojure.core", "contains?");
  
  public static final Var const__25 = (Var)RT.var("potemkin.collections", "dissoc*");
  
  public static final Var const__26 = (Var)RT.var("clojure.core", "set");
  
  public static final Keyword const__27 = (Keyword)RT.keyword(null, "else");
  
  public static final Var const__30 = (Var)RT.var("aleph.http.core", "headers->map");
  
  public static final Var const__31 = (Var)RT.var("clojure.core", "find");
  
  public static final Var const__32 = (Var)RT.var("clojure.core", "val");
  
  public static final Keyword const__33 = (Keyword)RT.keyword(null, "status");
  
  public static final Keyword const__34 = (Keyword)RT.keyword(null, "headers");
  
  public static final Keyword const__35 = (Keyword)RT.keyword("aleph", "complete");
  
  public static final Keyword const__36 = (Keyword)RT.keyword("aleph", "keep-alive?");
  
  public static final Keyword const__37 = (Keyword)RT.keyword(null, "body");
  
  public static final Var const__77 = (Var)RT.var("potemkin.collections", "meta*"), const__78 = (Var)RT.var("clojure.core", "empty?");
  
  public NettyResponse(Object paramObject1, Object paramObject2, Object paramObject3, Object paramObject4, Object paramObject5, Object paramObject6) { this.rsp = paramObject1;
    this.complete = paramObject2;
    this.body = paramObject3;
    this.key_set__28222__auto__ = paramObject4;
    this.added__28223__auto__ = paramObject5;
    this.meta__28224__auto__ = paramObject6; }
  
  public static IPersistentVector getBasis() { return Tuple.create(((IObj)Symbol.intern(null, "rsp")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "HttpResponse") })), Symbol.intern(null, "complete"), Symbol.intern(null, "body"), Symbol.intern(null, "key-set__28222__auto__"), Symbol.intern(null, "added__28223__auto__"), Symbol.intern(null, "meta__28224__auto__")); }
  
  public boolean isEmpty() { this = null;
    return ((Boolean)((IFn)const__78.getRawRoot()).invoke(this)).booleanValue(); }
  
  public int size() {
    return RT.count(this);
  }
  
  public Set entrySet() { this = null;
    return (Set)((IFn)const__26.getRawRoot()).invoke(((IFn)const__7.getRawRoot()).invoke(this)); }
  
  public Object invoke(Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _) { throw (Throwable)new RuntimeException((String)"Wrong number of args (13)"); }
  
  public Object invoke(Object k, Object default) { if (Util.classOf(this) != __cached_class__10)
      if (!(this instanceof PotemkinMap)) {
        __cached_class__10 = Util.classOf(this);
      } else {
        k = null;
        default = null;
        return ((PotemkinMap)this).get_STAR_(k, default);
      }  
    k = null;
    default = null;
    this = null; }
  
  public Object get__0() { this = null;
    return HttpUtil.isKeepAlive((HttpMessage)this.rsp) ? Boolean.TRUE : Boolean.FALSE; }
  
  public IPersistentMap meta() { if (Util.classOf(this) != __cached_class__9)
      if (!(this instanceof PotemkinMap)) {
        __cached_class__9 = Util.classOf(this);
      } else {
        return (IPersistentMap)((PotemkinMap)this).meta_STAR_();
      }  
    this = null; }
  
  public Object invoke(Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _) { throw (Throwable)new RuntimeException((String)"Wrong number of args (8)"); }
  
  public Object invoke(Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _) { throw (Throwable)new RuntimeException((String)"Wrong number of args (20)"); }
  
  public Object call() { return ((IFn)this).invoke(); }
  
  public Object applyTo(ISeq args__26399__auto__) {
    int cnt__26391__auto__28261 = RT.count(args__26399__auto__), G__28259 = cnt__26391__auto__28261;
    switch (G__28259) {
      case 0:
      
      case 1:
        args__26399__auto__ = null;
      case 2:
        args__26399__auto__ = null;
      case 3:
        args__26399__auto__ = null;
      case 4:
        args__26399__auto__ = null;
      case 5:
        args__26399__auto__ = null;
      case 6:
        args__26399__auto__ = null;
      case 7:
        args__26399__auto__ = null;
      case 8:
        args__26399__auto__ = null;
      case 9:
        args__26399__auto__ = null;
      case 10:
        args__26399__auto__ = null;
      case 11:
        args__26399__auto__ = null;
      case 12:
        args__26399__auto__ = null;
      case 13:
        args__26399__auto__ = null;
      case 14:
        args__26399__auto__ = null;
      case 15:
        args__26399__auto__ = null;
      case 16:
        args__26399__auto__ = null;
      case 17:
        args__26399__auto__ = null;
      case 18:
        args__26399__auto__ = null;
      case 19:
        args__26399__auto__ = null;
      case 20:
        args__26399__auto__ = null;
    } 
    throw (Throwable)new IllegalArgumentException((String)((IFn)const__21.getRawRoot()).invoke("No matching clause: ", Integer.valueOf(G__28259)));
  }
  
  public IPersistentMap assocEx(Object k, Object v) {
    if (((IFn)const__24.getRawRoot()).invoke(this, k) != null) {
      if (((IFn)const__24.getRawRoot()).invoke(this, k) != Boolean.FALSE)
        throw (Throwable)new Exception((String)"Key or value already present"); 
    } else {
      ((IFn)const__24.getRawRoot()).invoke(this, k);
    } 
    k = null;
    v = null;
    this = null;
    return (IPersistentMap)((IFn)const__1.getRawRoot()).invoke(this, k, v);
  }
  
  public IMapEntry entryAt(Object k) { if (((IFn)const__24.getRawRoot()).invoke(((Map)this).keySet(), k) != null) {
      if (((IFn)const__24.getRawRoot()).invoke(((Map)this).keySet(), k) != Boolean.FALSE)
        k = null; 
    } else {
      ((IFn)const__24.getRawRoot()).invoke(((Map)this).keySet(), k);
    } 
    return (IMapEntry)null; }
  
  public Object get_STAR_(Object key__26428__auto__, Object default_value__26429__auto__) {
    Object temp__5733__auto__28263 = ((IFn)const__31.getRawRoot()).invoke(this.added__28223__auto__, key__26428__auto__);
    if (temp__5733__auto__28263 != null) {
      if (temp__5733__auto__28263 != Boolean.FALSE) {
        Object e__26430__auto__28262 = temp__5733__auto__28263 = null;
        e__26430__auto__28262 = null;
        this = null;
      } 
    } else {
      temp__5733__auto__28263;
    } 
    if (((IFn)const__24.getRawRoot()).invoke(this.key_set__28222__auto__, key__26428__auto__) != null) {
      if (((IFn)const__24.getRawRoot()).invoke(this.key_set__28222__auto__, key__26428__auto__) != Boolean.FALSE) {
        Object G__28258 = key__26428__auto__ = null;
        switch (Util.hash(G__28258) >> 3 & 0x7) {
          case 0:
            if (G__28258 == const__33);
            break;
          case 2:
            if (G__28258 == const__34);
            break;
          case 3:
            if (G__28258 == const__35);
            break;
          case 6:
            if (G__28258 == const__36);
            break;
          case 7:
            if (G__28258 == const__37);
            break;
        } 
        return null;
      } 
    } else {
      ((IFn)const__24.getRawRoot()).invoke(this.key_set__28222__auto__, key__26428__auto__);
    } 
    return null;
  }
  
  public Object invoke(Object k) { if (Util.classOf(this) != __cached_class__8)
      if (!(this instanceof PotemkinMap)) {
        __cached_class__8 = Util.classOf(this);
      } else {
        k = null;
        return ((PotemkinMap)this).get_STAR_(k, null);
      }  
    k = null;
    this = null; }
  
  public Object get__2() { this = null;
    return ((IFn)const__30.getRawRoot()).invoke(((HttpMessage)this.rsp).headers()); }
  
  public Object invoke(Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _) { throw (Throwable)new RuntimeException((String)"Wrong number of args (16)"); }
  
  public Object invoke(Object _, Object _, Object _, Object _, Object _, Object _) { throw (Throwable)new RuntimeException((String)"Wrong number of args (6)"); }
  
  public Object invoke(Object _, Object _, Object _, Object _, Object _, Object _, Object _) { throw (Throwable)new RuntimeException((String)"Wrong number of args (7)"); }
  
  public void run() { ((IFn)this).invoke(); }
  
  public void putAll(Map _) { throw (Throwable)new UnsupportedOperationException(); }
  
  public IPersistentCollection cons(Object o) { // Byte code:
    //   0: getstatic aleph/http/core/NettyResponse.const__18 : Lclojure/lang/Var;
    //   3: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   6: checkcast clojure/lang/IFn
    //   9: aload_1
    //   10: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   15: dup
    //   16: ifnull -> 55
    //   19: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   22: if_acmpeq -> 56
    //   25: getstatic aleph/http/core/NettyResponse.const__5 : Lclojure/lang/Var;
    //   28: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   31: checkcast clojure/lang/IFn
    //   34: new aleph/http/core/NettyResponse$fn__28251
    //   37: dup
    //   38: invokespecial <init> : ()V
    //   41: aload_0
    //   42: aload_1
    //   43: aconst_null
    //   44: astore_1
    //   45: aconst_null
    //   46: astore_0
    //   47: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   52: goto -> 218
    //   55: pop
    //   56: aload_1
    //   57: instanceof java/util/Map
    //   60: ifeq -> 111
    //   63: getstatic aleph/http/core/NettyResponse.const__5 : Lclojure/lang/Var;
    //   66: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   69: checkcast clojure/lang/IFn
    //   72: new aleph/http/core/NettyResponse$fn__28253
    //   75: dup
    //   76: invokespecial <init> : ()V
    //   79: aload_0
    //   80: getstatic aleph/http/core/NettyResponse.const__20 : Lclojure/lang/Var;
    //   83: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   86: checkcast clojure/lang/IFn
    //   89: getstatic clojure/lang/PersistentArrayMap.EMPTY : Lclojure/lang/PersistentArrayMap;
    //   92: aload_1
    //   93: aconst_null
    //   94: astore_1
    //   95: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   100: aconst_null
    //   101: astore_0
    //   102: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   107: goto -> 218
    //   110: athrow
    //   111: getstatic aleph/http/core/NettyResponse.const__27 : Lclojure/lang/Keyword;
    //   114: dup
    //   115: ifnull -> 216
    //   118: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   121: if_acmpeq -> 217
    //   124: getstatic aleph/http/core/NettyResponse.const__7 : Lclojure/lang/Var;
    //   127: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   130: checkcast clojure/lang/IFn
    //   133: aload_1
    //   134: aconst_null
    //   135: astore_1
    //   136: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   141: astore_2
    //   142: aload_2
    //   143: dup
    //   144: ifnull -> 211
    //   147: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   150: if_acmpeq -> 212
    //   153: aload_2
    //   154: aconst_null
    //   155: astore_2
    //   156: astore_3
    //   157: aload_3
    //   158: lconst_0
    //   159: invokestatic intCast : (J)I
    //   162: aconst_null
    //   163: invokestatic nth : (Ljava/lang/Object;ILjava/lang/Object;)Ljava/lang/Object;
    //   166: astore #4
    //   168: aload_3
    //   169: aconst_null
    //   170: astore_3
    //   171: lconst_1
    //   172: invokestatic intCast : (J)I
    //   175: aconst_null
    //   176: invokestatic nth : (Ljava/lang/Object;ILjava/lang/Object;)Ljava/lang/Object;
    //   179: astore #5
    //   181: getstatic aleph/http/core/NettyResponse.const__1 : Lclojure/lang/Var;
    //   184: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   187: checkcast clojure/lang/IFn
    //   190: aload_0
    //   191: aload #4
    //   193: aconst_null
    //   194: astore #4
    //   196: aload #5
    //   198: aconst_null
    //   199: astore #5
    //   201: aconst_null
    //   202: astore_0
    //   203: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   208: goto -> 213
    //   211: pop
    //   212: aload_0
    //   213: goto -> 218
    //   216: pop
    //   217: aconst_null
    //   218: checkcast clojure/lang/IPersistentCollection
    //   221: areturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #227	-> 0
    //   #69	-> 0
    //   #70	-> 6
    //   #70	-> 10
    //   #71	-> 31
    //   #71	-> 45
    //   #69	-> 56
    //   #74	-> 69
    //   #74	-> 86
    //   #74	-> 95
    //   #74	-> 100
    //   #69	-> 111
    //   #77	-> 130
    //   #77	-> 136
    //   #77	-> 142
    //   #77	-> 163
    //   #77	-> 176
    //   #78	-> 187
    //   #78	-> 201
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   157	51	3	vec__28255	Ljava/lang/Object;
    //   168	40	4	k	Ljava/lang/Object;
    //   181	27	5	v	Ljava/lang/Object;
    //   142	71	2	temp__5733__auto__28264	Ljava/lang/Object;
    //   0	221	0	this	Laleph/http/core/NettyResponse;
    //   0	221	1	o	Ljava/lang/Object; }
  
  public Set keySet() { if (Util.classOf(this) != __cached_class__7)
      if (!(this instanceof PotemkinMap)) {
        __cached_class__7 = Util.classOf(this);
      } else {
        this = null;
        return (Set)((IFn)const__26.getRawRoot()).invoke(((PotemkinMap)this).keys_STAR_());
      }   }
  
  public Object invoke(Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _) { throw (Throwable)new RuntimeException((String)"Wrong number of args (14)"); }
  
  public IPersistentMap without(Object k) { if (Util.classOf(this) != __cached_class__6)
      if (!(this instanceof PotemkinMap)) {
        __cached_class__6 = Util.classOf(this);
      } else {
        k = null;
        return (IPersistentMap)((PotemkinMap)this).dissoc_STAR_(k);
      }  
    k = null;
    this = null; }
  
  public boolean containsKey(Object k) { k = null;
    this = null;
    return ((Boolean)((IFn)const__24.getRawRoot()).invoke(((Map)this).keySet(), k)).booleanValue(); }
  
  public Object invoke(Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _) { throw (Throwable)new RuntimeException((String)"Wrong number of args (19)"); }
  
  public boolean equals(Object x) {
    boolean or__5516__auto__28267 = Util.identical(this, x), or__5516__auto__28265 = x instanceof Map;
    Object and__5514__auto__28266 = or__5516__auto__28265 ? (or__5516__auto__28265 ? Boolean.TRUE : Boolean.FALSE) : ((IFn)const__18.getRawRoot()).invoke(x);
    if (and__5514__auto__28266 != null) {
      if (and__5514__auto__28266 != Boolean.FALSE) {
        x = null;
        this = null;
      } 
    } else {
      and__5514__auto__28266;
    } 
    and__5514__auto__28266 = null;
    return ((Boolean)(or__5516__auto__28267 ? (or__5516__auto__28267 ? Boolean.TRUE : Boolean.FALSE) : and__5514__auto__28266)).booleanValue();
  }
  
  public void clear() { throw (Throwable)new UnsupportedOperationException(); }
  
  public Object invoke(Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _) { throw (Throwable)new RuntimeException((String)"Wrong number of args (12)"); }
  
  public int count() { if (Util.classOf(this) != __cached_class__5)
      if (!(this instanceof PotemkinMap)) {
        __cached_class__5 = Util.classOf(this);
      } else {
        return RT.count(((PotemkinMap)this).keys_STAR_());
      }   }
  
  public String toString() { this = null;
    return (String)((IFn)const__21.getRawRoot()).invoke(((IFn)const__20.getRawRoot()).invoke(PersistentArrayMap.EMPTY, this)); }
  
  public boolean equiv(Object x) {
    boolean or__5516__auto__28268 = x instanceof Map;
    Object and__5514__auto__28269 = or__5516__auto__28268 ? (or__5516__auto__28268 ? Boolean.TRUE : Boolean.FALSE) : ((IFn)const__18.getRawRoot()).invoke(x);
    if (and__5514__auto__28269 != null) {
      if (and__5514__auto__28269 != Boolean.FALSE) {
        x = null;
        this = null;
      } 
    } else {
      and__5514__auto__28269;
    } 
    and__5514__auto__28269 = null;
    return ((Boolean)and__5514__auto__28269).booleanValue();
  }
  
  public ISeq seq() {
    if (Util.classOf(this) != __cached_class__4)
      if (!(this instanceof PotemkinMap)) {
        __cached_class__4 = Util.classOf(this);
      } else {
      
      }  
  }
  
  public Object with_meta_STAR_(Object x__26424__auto__) { x__26424__auto__ = null;
    return new NettyResponse(this.rsp, this.complete, this.body, this.key_set__28222__auto__, this.added__28223__auto__, x__26424__auto__); }
  
  public Object invoke(Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _) { throw (Throwable)new RuntimeException((String)"Wrong number of args (18)"); }
  
  public IPersistentCollection empty() { if (Util.classOf(this) != __cached_class__3)
      if (!(this instanceof PotemkinMap)) {
        __cached_class__3 = Util.classOf(this);
      } else {
        return (IPersistentCollection)((PotemkinMap)this).empty_STAR_();
      }  
    this = null; }
  
  public Collection values() { this = null;
    return (Collection)((IFn)const__12.getRawRoot()).invoke(const__13.getRawRoot(), ((IFn)const__7.getRawRoot()).invoke(this)); }
  
  public Object invoke(Object _, Object _, Object _, Object _) { throw (Throwable)new RuntimeException((String)"Wrong number of args (4)"); }
  
  public Object get__1() { return this.complete; }
  
  public Object keys_STAR_() { return this.key_set__28222__auto__; }
  
  public Object remove(Object _) { throw (Throwable)new UnsupportedOperationException(); }
  
  public Object invoke(Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _) { throw (Throwable)new RuntimeException((String)"Wrong number of args (10)"); }
  
  public Iterator iterator() { return (Iterator)new SeqIterator(this); }
  
  public Object get(Object k) { k = null;
    return ((ILookup)this).valAt(k); }
  
  public Object invoke() { throw (Throwable)new RuntimeException((String)"Wrong number of args (0)"); }
  
  public Object empty_STAR_() { return PersistentArrayMap.EMPTY; }
  
  public Object invoke(Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _) { throw (Throwable)new RuntimeException((String)"Wrong number of args (9)"); }
  
  public Object invoke(Object _, Object _, Object _) { throw (Throwable)new RuntimeException((String)"Wrong number of args (3)"); }
  
  public Object get__3() { return Integer.valueOf(((HttpResponseStatus)((HttpResponse)this.rsp).status()).code()); }
  
  public Object meta_STAR_() { return this.meta__28224__auto__; }
  
  public Object valAt(Object k, Object default) { if (Util.classOf(this) != __cached_class__2)
      if (!(this instanceof PotemkinMap)) {
        __cached_class__2 = Util.classOf(this);
      } else {
        k = null;
        default = null;
        return ((PotemkinMap)this).get_STAR_(k, default);
      }  
    k = null;
    default = null;
    this = null; }
  
  public Object invoke(Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _) { throw (Throwable)new RuntimeException((String)"Wrong number of args (17)"); }
  
  public IObj withMeta(IPersistentMap mta) { if (Util.classOf(this) != __cached_class__1)
      if (!(this instanceof PotemkinMap)) {
        __cached_class__1 = Util.classOf(this);
      } else {
        mta = null;
        return (IObj)((PotemkinMap)this).with_meta_STAR_(mta);
      }  
    mta = null;
    this = null; }
  
  public Object invoke(Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _) { throw (Throwable)new RuntimeException((String)"Wrong number of args (15)"); }
  
  public int hasheq() {
    Object or__5516__auto__28270 = ((IFn)const__7.getRawRoot()).invoke(this);
    if (or__5516__auto__28270 != null) {
      if (or__5516__auto__28270 != Boolean.FALSE)
        or__5516__auto__28270 = null; 
    } else {
      or__5516__auto__28270;
    } 
    return RT.intCast(((IFn.OL)const__9.getRawRoot()).invokePrim(PersistentList.EMPTY));
  }
  
  public int hashCode() { this = null;
    return ((Number)((IFn)const__5.getRawRoot()).invoke(new fn__28241(), const__6, ((IFn)const__7.getRawRoot()).invoke(this))).intValue(); }
  
  public Object dissoc_STAR_(Object key__26428__auto__) { key__26428__auto__ = null;
    return new NettyResponse(this.rsp, this.complete, this.body, ((IFn)const__3.getRawRoot()).invoke(this.key_set__28222__auto__, key__26428__auto__), ((IFn)const__4.getRawRoot()).invoke(this.added__28223__auto__, key__26428__auto__), this.meta__28224__auto__); }
  
  public Object put(Object _, Object _) { throw (Throwable)new UnsupportedOperationException(); }
  
  public Object invoke(Object _, Object _, Object _, Object _, Object _) { throw (Throwable)new RuntimeException((String)"Wrong number of args (5)"); }
  
  public Object invoke(Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _, Object _) { throw (Throwable)new RuntimeException((String)"Wrong number of args (11)"); }
  
  public IPersistentMap assoc(Object k, Object v) { if (Util.classOf(this) != __cached_class__0)
      if (!(this instanceof PotemkinMap)) {
        __cached_class__0 = Util.classOf(this);
      } else {
        k = null;
        v = null;
        return (IPersistentMap)((PotemkinMap)this).assoc_STAR_(k, v);
      }  
    k = null;
    v = null;
    this = null; }
  
  public Object assoc_STAR_(Object key__26428__auto__, Object value__26432__auto__) { key__26428__auto__ = null;
    value__26432__auto__ = null;
    return new NettyResponse(this.rsp, this.complete, this.body, ((IFn)const__0.getRawRoot()).invoke(this.key_set__28222__auto__, key__26428__auto__), ((IFn)const__1.getRawRoot()).invoke(this.added__28223__auto__, key__26428__auto__, value__26432__auto__), this.meta__28224__auto__); }
  
  public Object get__4() { return this.body; }
  
  public Object valAt(Object k) { k = null;
    return ((ILookup)this).valAt(k, null); }
}
