package aleph.http;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import io.netty.buffer.ByteBuf;
import io.netty.buffer.Unpooled;
import io.netty.handler.codec.http.DefaultFullHttpResponse;
import io.netty.handler.codec.http.HttpHeaders;
import io.netty.handler.codec.http.HttpMessage;
import io.netty.handler.codec.http.HttpResponseStatus;
import io.netty.handler.codec.http.HttpVersion;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class server__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__3;
  
  public static final AFn const__4;
  
  public static final Var const__5;
  
  public static final Var const__6;
  
  public static final AFn const__14;
  
  public static final Var const__15;
  
  public static final AFn const__20;
  
  public static final Var const__21;
  
  public static final AFn const__24;
  
  public static final Var const__25;
  
  public static final AFn const__28;
  
  public static final Var const__29;
  
  public static final AFn const__32;
  
  public static final Var const__33;
  
  public static final AFn const__36;
  
  public static final Var const__37;
  
  public static final AFn const__40;
  
  public static final Var const__41;
  
  public static final AFn const__46;
  
  public static final Var const__47;
  
  public static final AFn const__50;
  
  public static final Var const__51;
  
  public static final AFn const__54;
  
  public static final Var const__55;
  
  public static final AFn const__58;
  
  public static final Var const__59;
  
  public static final AFn const__62;
  
  public static final Var const__64;
  
  public static final AFn const__66;
  
  public static final Var const__67;
  
  public static final AFn const__70;
  
  public static final Var const__71;
  
  public static final AFn const__74;
  
  public static final Var const__75;
  
  public static final AFn const__78;
  
  public static final Var const__79;
  
  public static final AFn const__82;
  
  public static final Var const__83;
  
  public static final AFn const__86;
  
  public static final Var const__87;
  
  public static final AFn const__91;
  
  public static final Var const__92;
  
  public static final AFn const__95;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new server.fn__29972());
    const__6.setMeta((IPersistentMap)const__14);
    const__6.bindRoot(new server.rfc_1123_date_string());
    const__15.setMeta((IPersistentMap)const__20);
    const__15.bindRoot(new server.date_header_value());
    const__21.setMeta((IPersistentMap)const__24);
    const__21.bindRoot(new server.error_response());
    const__25.setMeta((IPersistentMap)const__28);
    const__25.bindRoot(new server.invalid_value_exception());
    const__29.setMeta((IPersistentMap)const__32);
    const__29.bindRoot(new server.handle_request());
    const__33.setMeta((IPersistentMap)const__36);
    const__33.bindRoot(new server.exception_handler());
    const__37.setMeta((IPersistentMap)const__40);
    const__37.bindRoot(new server.invalid_request_QMARK_());
    const__41.setMeta((IPersistentMap)const__46);
    const__41.bindRoot(new server.cause__GT_status());
    const__47.setMeta((IPersistentMap)const__50);
    const__47.bindRoot(new server.reject_invalid_request());
    const__51.setMeta((IPersistentMap)const__54);
    const__51.bindRoot(new server.ring_handler());
    const__55.setMeta((IPersistentMap)const__58);
    const__55.bindRoot(new server.raw_ring_handler());
    const__59.setMeta((IPersistentMap)const__62);
    const__59

































































































































































































































































































































































      
      .bindRoot(new DefaultFullHttpResponse((HttpVersion)HttpVersion.HTTP_1_1, (HttpResponseStatus)HttpResponseStatus.CONTINUE, (ByteBuf)Unpooled.EMPTY_BUFFER));
    HttpHeaders.setContentLength((HttpMessage)const__59.getRawRoot(), 0L);
    const__64.setMeta((IPersistentMap)const__66);
    const__64

      
      .bindRoot(new DefaultFullHttpResponse((HttpVersion)HttpVersion.HTTP_1_1, (HttpResponseStatus)HttpResponseStatus.EXPECTATION_FAILED, (ByteBuf)Unpooled.EMPTY_BUFFER));
    HttpHeaders.setContentLength((HttpMessage)const__64.getRawRoot(), 0L);
    const__67.setMeta((IPersistentMap)const__70);
    const__67.bindRoot(new server.new_continue_handler());
    const__71.setMeta((IPersistentMap)const__74);
    const__71.bindRoot(new server.pipeline_builder());
    const__75.setMeta((IPersistentMap)const__78);
    const__75.bindRoot(new server.start_server());
    const__79.setMeta((IPersistentMap)const__82);
    const__79.bindRoot(new server.websocket_server_handler());
    const__83.setMeta((IPersistentMap)const__86);
    const__83.bindRoot(new server.send_websocket_request_expected_BANG_());
    const__87.setMeta((IPersistentMap)const__91);
    const__87.bindRoot(new server.websocket_upgrade_request_QMARK_());
    const__92.setMeta((IPersistentMap)const__95);
    const__92.bindRoot(new server.initialize_websocket_handler());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "aleph.http.server")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE }));
    const__3 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE });
    const__4 = (AFn)Symbol.intern(null, "clojure.core");
    const__5 = (Var)RT.var("clojure.core", "*unchecked-math*");
    const__6 = (Var)RT.var("aleph.http.server", "rfc-1123-date-string");
    const__14 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(84), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/server.clj" });
    const__15 = (Var)RT.var("aleph.http.server", "date-header-value");
    const__20 = (AFn)RT.map(new Object[] { RT.keyword(null, "tag"), RT.classForName("java.lang.CharSequence"), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "ctx")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "ChannelHandlerContext") }))) })), RT.keyword(null, "line"), Integer.valueOf(94), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/server.clj" });
    const__21 = (Var)RT.var("aleph.http.server", "error-response");
    const__24 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "e")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Throwable") }))) })), RT.keyword(null, "line"), Integer.valueOf(106), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/server.clj" });
    const__25 = (Var)RT.var("aleph.http.server", "invalid-value-exception");
    const__28 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "req"), Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(146), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/server.clj" });
    const__29 = (Var)RT.var("aleph.http.server", "handle-request");
    const__32 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { RT.vector(new Object[] { ((IObj)Symbol.intern(null, "ctx")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "ChannelHandlerContext") })), Symbol.intern(null, "ssl?"), Symbol.intern(null, "handler"), Symbol.intern(null, "rejected-handler"), Symbol.intern(null, "error-handler"), Symbol.intern(null, "executor"), ((IObj)Symbol.intern(null, "req")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "HttpRequest") })), Symbol.intern(null, "previous-response"), Symbol.intern(null, "body"), Symbol.intern(null, "keep-alive?") }) })), RT.keyword(null, "line"), Integer.valueOf(159), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/server.clj" });
    const__33 = (Var)RT.var("aleph.http.server", "exception-handler");
    const__36 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ctx"), Symbol.intern(null, "ex")) })), RT.keyword(null, "line"), Integer.valueOf(218), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/server.clj" });
    const__37 = (Var)RT.var("aleph.http.server", "invalid-request?");
    const__40 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "req")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "HttpRequest") }))) })), RT.keyword(null, "line"), Integer.valueOf(228), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/server.clj" });
    const__41 = (Var)RT.var("aleph.http.server", "cause->status");
    const__46 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "tag"), RT.classForName("io.netty.handler.codec.http.HttpResponseStatus"), RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "cause")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Throwable") }))) })), RT.keyword(null, "line"), Integer.valueOf(231), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "aleph/http/server.clj" });
    const__47 = (Var)RT.var("aleph.http.server", "reject-invalid-request");
    const__50 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ctx"), ((IObj)Symbol.intern(null, "req")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "HttpRequest") }))) })), RT.keyword(null, "line"), Integer.valueOf(245), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/server.clj" });
    const__51 = (Var)RT.var("aleph.http.server", "ring-handler");
    const__54 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ssl?"), Symbol.intern(null, "handler"), Symbol.intern(null, "rejected-handler"), Symbol.intern(null, "error-handler"), Symbol.intern(null, "executor"), Symbol.intern(null, "buffer-capacity")) })), RT.keyword(null, "line"), Integer.valueOf(257), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/server.clj" });
    const__55 = (Var)RT.var("aleph.http.server", "raw-ring-handler");
    const__58 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ssl?"), Symbol.intern(null, "handler"), Symbol.intern(null, "rejected-handler"), Symbol.intern(null, "error-handler"), Symbol.intern(null, "executor"), Symbol.intern(null, "buffer-capacity")) })), RT.keyword(null, "line"), Integer.valueOf(396), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/server.clj" });
    const__59 = (Var)RT.var("aleph.http.server", "default-accept-response");
    const__62 = (AFn)RT.map(new Object[] { RT.keyword(null, "tag"), RT.classForName("io.netty.handler.codec.http.HttpResponse"), RT.keyword(null, "line"), Integer.valueOf(466), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/server.clj" });
    const__64 = (Var)RT.var("aleph.http.server", "default-expectation-failed-response");
    const__66 = (AFn)RT.map(new Object[] { RT.keyword(null, "tag"), RT.classForName("io.netty.handler.codec.http.HttpResponse"), RT.keyword(null, "line"), Integer.valueOf(473), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/server.clj" });
    const__67 = (Var)RT.var("aleph.http.server", "new-continue-handler");
    const__70 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "continue-handler"), Symbol.intern(null, "continue-executor"), Symbol.intern(null, "ssl?")) })), RT.keyword(null, "line"), Integer.valueOf(480), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/server.clj" });
    const__71 = (Var)RT.var("aleph.http.server", "pipeline-builder");
    const__74 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "handler"), Symbol.intern(null, "pipeline-transform"), RT.map(new Object[] { RT.keyword(null, "keys"), RT.vector(new Object[] { 
                          Symbol.intern(null, "executor"), Symbol.intern(null, "rejected-handler"), Symbol.intern(null, "error-handler"), Symbol.intern(null, "request-buffer-size"), Symbol.intern(null, "max-request-body-size"), Symbol.intern(null, "max-initial-line-length"), Symbol.intern(null, "max-header-size"), Symbol.intern(null, "max-chunk-size"), Symbol.intern(null, "validate-headers"), Symbol.intern(null, "initial-buffer-size"), 
                          Symbol.intern(null, "allow-duplicate-content-lengths"), Symbol.intern(null, "raw-stream?"), Symbol.intern(null, "ssl?"), Symbol.intern(null, "compression?"), Symbol.intern(null, "compression-level"), Symbol.intern(null, "idle-timeout"), Symbol.intern(null, "continue-handler"), Symbol.intern(null, "continue-executor") }), RT.keyword(null, "or"), RT.map(new Object[] { 
                          Symbol.intern(null, "idle-timeout"), Long.valueOf(0L), Symbol.intern(null, "allow-duplicate-content-lengths"), Boolean.FALSE, Symbol.intern(null, "initial-buffer-size"), Long.valueOf(128L), Symbol.intern(null, "max-chunk-size"), Long.valueOf(16384L), Symbol.intern(null, "max-header-size"), Long.valueOf(8192L), 
                          Symbol.intern(null, "max-initial-line-length"), Long.valueOf(8192L), Symbol.intern(null, "validate-headers"), Boolean.FALSE, Symbol.intern(null, "request-buffer-size"), Long.valueOf(16384L), Symbol.intern(null, "error-handler"), Symbol.intern(null, "error-response"), Symbol.intern(null, "compression?"), Boolean.FALSE }) })) })), RT.keyword(null, "line"), Integer.valueOf(518), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/server.clj" });
    const__75 = (Var)RT.var("aleph.http.server", "start-server");
    const__78 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "handler"), RT.map(new Object[] { RT.keyword(null, "keys"), RT.vector(new Object[] { 
                          Symbol.intern(null, "port"), Symbol.intern(null, "socket-address"), Symbol.intern(null, "executor"), Symbol.intern(null, "bootstrap-transform"), Symbol.intern(null, "pipeline-transform"), Symbol.intern(null, "ssl-context"), Symbol.intern(null, "manual-ssl?"), Symbol.intern(null, "shutdown-executor?"), Symbol.intern(null, "epoll?"), Symbol.intern(null, "transport"), 
                          Symbol.intern(null, "compression?"), Symbol.intern(null, "continue-handler"), Symbol.intern(null, "continue-executor"), Symbol.intern(null, "shutdown-timeout") }), RT.keyword(null, "or"), RT.map(new Object[] { 
                          Symbol.intern(null, "bootstrap-transform"), Symbol.intern(null, "identity"), Symbol.intern(null, "pipeline-transform"), Symbol.intern(null, "identity"), Symbol.intern(null, "shutdown-executor?"), Boolean.TRUE, Symbol.intern(null, "epoll?"), Boolean.FALSE, Symbol.intern(null, "compression?"), Boolean.FALSE, 
                          Symbol.intern(null, "shutdown-timeout"), Symbol.intern("netty", "default-shutdown-timeout") }), RT.keyword(null, "as"), Symbol.intern(null, "options") })) })), RT.keyword(null, "line"), Integer.valueOf(584), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/server.clj" });
    const__79 = (Var)RT.var("aleph.http.server", "websocket-server-handler");
    const__82 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "raw-stream?"), Symbol.intern(null, "ch"), Symbol.intern(null, "handshaker")), Tuple.create(Symbol.intern(null, "raw-stream?"), ((IObj)Symbol.intern(null, "ch")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Channel") })), ((IObj)Symbol.intern(null, "handshaker")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "WebSocketServerHandshaker") })), Symbol.intern(null, "heartbeats")) })), RT.keyword(null, "line"), Integer.valueOf(665), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/server.clj" });
    const__83 = (Var)RT.var("aleph.http.server", "send-websocket-request-expected!");
    const__86 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ch"), Symbol.intern(null, "ssl?")) })), RT.keyword(null, "line"), Integer.valueOf(780), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/server.clj" });
    const__87 = (Var)RT.var("aleph.http.server", "websocket-upgrade-request?");
    const__91 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "req")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "NettyRequest") }))) })), RT.keyword(null, "doc"), "Returns `true` if given request is an attempt to upgrade to websockets", RT.keyword(null, "line"), Integer.valueOf(790), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/server.clj" });
    const__92 = (Var)RT.var("aleph.http.server", "initialize-websocket-handler");
    const__95 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "req")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "NettyRequest") })), RT.map(new Object[] { RT.keyword(null, "keys"), RT.vector(new Object[] { Symbol.intern(null, "raw-stream?"), Symbol.intern(null, "headers"), Symbol.intern(null, "max-frame-payload"), Symbol.intern(null, "max-frame-size"), Symbol.intern(null, "allow-extensions?"), Symbol.intern(null, "compression?"), Symbol.intern(null, "pipeline-transform"), Symbol.intern(null, "heartbeats") }), RT.keyword(null, "or"), RT.map(new Object[] { Symbol.intern(null, "raw-stream?"), Boolean.FALSE, Symbol.intern(null, "max-frame-payload"), Long.valueOf(65536L), Symbol.intern(null, "max-frame-size"), Long.valueOf(1048576L), Symbol.intern(null, "allow-extensions?"), Boolean.FALSE, Symbol.intern(null, "compression?"), Boolean.FALSE }), RT.keyword(null, "as"), Symbol.intern(null, "options") })) })), RT.keyword(null, "line"), Integer.valueOf(802), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/server.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("aleph.http.server__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
