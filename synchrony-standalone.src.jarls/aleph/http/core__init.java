package aleph.http;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import io.netty.handler.codec.http.LastHttpContent;
import java.util.Arrays;
import java.util.concurrent.Callable;
import java.util.concurrent.ConcurrentHashMap;

public class core__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__3;
  
  public static final AFn const__4;
  
  public static final Var const__5;
  
  public static final AFn const__11;
  
  public static final Var const__12;
  
  public static final AFn const__16;
  
  public static final Var const__17;
  
  public static final AFn const__22;
  
  public static final Object const__65;
  
  public static final Var const__66;
  
  public static final AFn const__69;
  
  public static final Var const__70;
  
  public static final AFn const__73;
  
  public static final Var const__74;
  
  public static final AFn const__77;
  
  public static final Var const__78;
  
  public static final AFn const__81;
  
  public static final Var const__82;
  
  public static final AFn const__85;
  
  public static final Object const__93;
  
  public static final Object const__94;
  
  public static final Var const__95;
  
  public static final AFn const__98;
  
  public static final Var const__99;
  
  public static final AFn const__102;
  
  public static final Var const__103;
  
  public static final AFn const__106;
  
  public static final Var const__107;
  
  public static final AFn const__110;
  
  public static final Var const__111;
  
  public static final AFn const__114;
  
  public static final Var const__115;
  
  public static final AFn const__117;
  
  public static final Var const__118;
  
  public static final AFn const__121;
  
  public static final Var const__122;
  
  public static final AFn const__125;
  
  public static final Var const__126;
  
  public static final AFn const__128;
  
  public static final Object const__129;
  
  public static final Var const__130;
  
  public static final Object const__131;
  
  public static final Var const__132;
  
  public static final AFn const__135;
  
  public static final Var const__137;
  
  public static final AFn const__140;
  
  public static final Var const__141;
  
  public static final AFn const__144;
  
  public static final Var const__145;
  
  public static final AFn const__148;
  
  public static final Var const__149;
  
  public static final AFn const__153;
  
  public static final Var const__154;
  
  public static final AFn const__157;
  
  public static final Var const__158;
  
  public static final AFn const__161;
  
  public static final Var const__162;
  
  public static final AFn const__164;
  
  public static final Object const__165;
  
  public static final Var const__166;
  
  public static final AFn const__169;
  
  public static final Var const__170;
  
  public static final AFn const__173;
  
  public static final Var const__174;
  
  public static final AFn const__177;
  
  public static final Var const__178;
  
  public static final AFn const__181;
  
  public static final Var const__182;
  
  public static final AFn const__185;
  
  public static final Var const__186;
  
  public static final AFn const__189;
  
  public static final Var const__190;
  
  public static final AFn const__193;
  
  public static final Var const__194;
  
  public static final AFn const__197;
  
  public static final Var const__198;
  
  public static final AFn const__201;
  
  public static final Var const__202;
  
  public static final AFn const__206;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new core.fn__28098());
    const__5.setMeta((IPersistentMap)const__11);
    const__5

































































      
      .bindRoot(((IFn)new core.fn__28101()).invoke());
    const__12.setMeta((IPersistentMap)const__16);
    const__12.bindRoot(new ConcurrentHashMap());
    const__17.setMeta((IPersistentMap)const__22);
    const__17.bindRoot(new core.normalize_header_key());
    const__66.setMeta((IPersistentMap)const__69);
    const__66.bindRoot(new core.headers__GT_map());
    const__70.setMeta((IPersistentMap)const__73);
    const__70.bindRoot(new core.map__GT_headers_BANG_());
    const__74.setMeta((IPersistentMap)const__77);
    const__74.bindRoot(new core.ring_response__GT_netty_response());
    const__78.setMeta((IPersistentMap)const__81);
    const__78.bindRoot(new core.ring_request__GT_netty_request());
    const__82.setMeta((IPersistentMap)const__85);
    const__82.bindRoot(new core.ring_request__GT_full_netty_request());
    const__95.setMeta((IPersistentMap)const__98);
    const__95.bindRoot(new core.netty_request__GT_ring_request());
    const__99.setMeta((IPersistentMap)const__102);
    const__99.bindRoot(new core.netty_response__GT_ring_response());
    const__103.setMeta((IPersistentMap)const__106);
    const__103.bindRoot(new core.ring_request_ssl_session());
    const__107.setMeta((IPersistentMap)const__110);
    const__107.bindRoot(new core.has_content_length_QMARK_());
    const__111.setMeta((IPersistentMap)const__114);
    const__111.bindRoot(new core.try_set_content_length_BANG_());
    const__115.setMeta((IPersistentMap)const__117);
    const__115































      
      .bindRoot(LastHttpContent.EMPTY_LAST_CONTENT);
    const__118.setMeta((IPersistentMap)const__121);
    const__118.bindRoot(new core.chunked_writer_enabled_QMARK_());
    const__122.setMeta((IPersistentMap)const__125);
    const__122.bindRoot(new core.send_streaming_body());
    const__126.setMeta((IPersistentMap)const__128);
    const__126.bindRoot(const__129);
    const__132.setMeta((IPersistentMap)const__135);
    const__132.bindRoot(new core.http_file());
    const__137.setMeta((IPersistentMap)const__140);
    const__137.bindRoot(new core.send_chunked_file());
    const__141.setMeta((IPersistentMap)const__144);
    const__141.bindRoot(new core.send_chunked_body());
    const__145.setMeta((IPersistentMap)const__148);
    const__145.bindRoot(new core.send_file_region());
    const__149.setMeta((IPersistentMap)const__153);
    const__149.bindRoot(new core.file__GT_stream());
    const__154.setMeta((IPersistentMap)const__157);
    const__154.bindRoot(new core.send_file_body());
    const__158.setMeta((IPersistentMap)const__161);
    const__158.bindRoot(new core.send_contiguous_body());
    const__162.setMeta((IPersistentMap)const__164);
    const__162.bindRoot(const__165);
    const__166.setMeta((IPersistentMap)const__169);
    const__166.bindRoot(new core.resolve_pings_BANG_());
    const__170.setMeta((IPersistentMap)const__173);
    const__170.bindRoot(new core.websocket_message_coerce_fn());
    const__174.setMeta((IPersistentMap)const__177);
    const__174.bindRoot(new core.close_on_idle_handler());
    const__178.setMeta((IPersistentMap)const__181);
    const__178.bindRoot(new core.attach_idle_handlers());
    const__182.setMeta((IPersistentMap)const__185);
    const__182.bindRoot(new core.websocket_ping());
    const__186.setMeta((IPersistentMap)const__189);
    const__186.bindRoot(new core.websocket_close_BANG_());
    const__190.setMeta((IPersistentMap)const__193);
    const__190.bindRoot(new core.attach_heartbeats_handler());
    const__194.setMeta((IPersistentMap)const__197);
    const__194.bindRoot(new core.handle_heartbeat());
    const__198.setMeta((IPersistentMap)const__201);
    const__198.bindRoot(new core.decoder_failed_QMARK_());
    const__202.setMeta((IPersistentMap)const__206);
    const__202.bindRoot(new core.decoder_failure());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "aleph.http.core")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE }));
    const__3 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE });
    const__4 = (AFn)Symbol.intern(null, "clojure.core");
    const__5 = (Var)RT.var("aleph.http.core", "non-standard-keys");
    const__11 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(67), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/core.clj" });
    const__12 = (Var)RT.var("aleph.http.core", "cached-header-keys");
    const__16 = (AFn)RT.map(new Object[] { RT.keyword(null, "tag"), RT.classForName("java.util.concurrent.ConcurrentHashMap"), RT.keyword(null, "line"), Integer.valueOf(82), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/core.clj" });
    const__17 = (Var)RT.var("aleph.http.core", "normalize-header-key");
    const__22 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })), RT.keyword(null, "doc"), "Normalizes a header key to `Ab-Cd` format.", RT.keyword(null, "line"), Integer.valueOf(84), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/core.clj" });
    const__65 = RT.classForName("aleph.http.core.HeaderMap");
    const__66 = (Var)RT.var("aleph.http.core", "headers->map");
    const__69 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "h")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "HttpHeaders") }))) })), RT.keyword(null, "line"), Integer.valueOf(149), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/core.clj" });
    const__70 = (Var)RT.var("aleph.http.core", "map->headers!");
    const__73 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "h")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "HttpHeaders") })), Symbol.intern(null, "m")) })), RT.keyword(null, "line"), Integer.valueOf(152), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/core.clj" });
    const__74 = (Var)RT.var("aleph.http.core", "ring-response->netty-response");
    const__77 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m")) })), RT.keyword(null, "line"), Integer.valueOf(167), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/core.clj" });
    const__78 = (Var)RT.var("aleph.http.core", "ring-request->netty-request");
    const__81 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m")) })), RT.keyword(null, "line"), Integer.valueOf(178), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/core.clj" });
    const__82 = (Var)RT.var("aleph.http.core", "ring-request->full-netty-request");
    const__85 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m")) })), RT.keyword(null, "line"), Integer.valueOf(190), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/core.clj" });
    const__93 = RT.classForName("aleph.http.core.NettyRequest");
    const__94 = RT.classForName("aleph.http.core.NettyResponse");
    const__95 = (Var)RT.var("aleph.http.core", "netty-request->ring-request");
    const__98 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "req")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "HttpRequest") })), Symbol.intern(null, "ssl?"), Symbol.intern(null, "ch"), Symbol.intern(null, "body")) })), RT.keyword(null, "line"), Integer.valueOf(234), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/core.clj" });
    const__99 = (Var)RT.var("aleph.http.core", "netty-response->ring-response");
  }
  
  public static void __init1() {
    const__102 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "rsp"), Symbol.intern(null, "complete"), Symbol.intern(null, "body")) })), RT.keyword(null, "line"), Integer.valueOf(245), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/core.clj" });
    const__103 = (Var)RT.var("aleph.http.core", "ring-request-ssl-session");
    const__106 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "req")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "NettyRequest") }))) })), RT.keyword(null, "line"), Integer.valueOf(248), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/core.clj" });
    const__107 = (Var)RT.var("aleph.http.core", "has-content-length?");
    const__110 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "msg")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "HttpMessage") }))) })), RT.keyword(null, "line"), Integer.valueOf(253), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/core.clj" });
    const__111 = (Var)RT.var("aleph.http.core", "try-set-content-length!");
    const__114 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "msg")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "HttpMessage") })), ((IObj)Symbol.intern(null, "length")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "long") }))) })), RT.keyword(null, "line"), Integer.valueOf(256), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/core.clj" });
    const__115 = (Var)RT.var("aleph.http.core", "empty-last-content");
    const__117 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(260), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/core.clj" });
    const__118 = (Var)RT.var("aleph.http.core", "chunked-writer-enabled?");
    const__121 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "ch")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Channel") }))) })), RT.keyword(null, "line"), Integer.valueOf(272), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/core.clj" });
    const__122 = (Var)RT.var("aleph.http.core", "send-streaming-body");
    const__125 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ch"), ((IObj)Symbol.intern(null, "msg")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "HttpMessage") })), Symbol.intern(null, "body")) })), RT.keyword(null, "line"), Integer.valueOf(275), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/core.clj" });
    const__126 = (Var)RT.var("aleph.http.core", "default-chunk-size");
    const__128 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(354), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/core.clj" });
    const__129 = Long.valueOf(8192L);
    const__130 = (Var)RT.var("clojure.core", "print-method");
    const__131 = RT.classForName("aleph.http.core.HttpFile");
    const__132 = (Var)RT.var("aleph.http.core", "http-file");
    const__135 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "path")), Tuple.create(Symbol.intern(null, "path"), Symbol.intern(null, "offset"), Symbol.intern(null, "length")), Tuple.create(Symbol.intern(null, "path"), Symbol.intern(null, "offset"), Symbol.intern(null, "length"), Symbol.intern(null, "chunk-size")) })), RT.keyword(null, "line"), Integer.valueOf(364), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/core.clj" });
    const__137 = (Var)RT.var("aleph.http.core", "send-chunked-file");
    const__140 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ch"), ((IObj)Symbol.intern(null, "msg")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "HttpMessage") })), ((IObj)Symbol.intern(null, "file")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "HttpFile") }))) })), RT.keyword(null, "line"), Integer.valueOf(447), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/core.clj" });
    const__141 = (Var)RT.var("aleph.http.core", "send-chunked-body");
    const__144 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ch"), ((IObj)Symbol.intern(null, "msg")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "HttpMessage") })), ((IObj)Symbol.intern(null, "body")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "ChunkedInput") }))) })), RT.keyword(null, "line"), Integer.valueOf(457), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/core.clj" });
    const__145 = (Var)RT.var("aleph.http.core", "send-file-region");
    const__148 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ch"), ((IObj)Symbol.intern(null, "msg")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "HttpMessage") })), ((IObj)Symbol.intern(null, "file")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "HttpFile") }))) })), RT.keyword(null, "line"), Integer.valueOf(461), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/core.clj" });
    const__149 = (Var)RT.var("aleph.http.core", "file->stream");
    const__153 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "file")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "HttpFile") }))) })), RT.keyword(null, "line"), Integer.valueOf(470), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/core.clj" });
    const__154 = (Var)RT.var("aleph.http.core", "send-file-body");
    const__157 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ch"), Symbol.intern(null, "ssl?"), ((IObj)Symbol.intern(null, "msg")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "HttpMessage") })), ((IObj)Symbol.intern(null, "file")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "HttpFile") }))) })), RT.keyword(null, "line"), Integer.valueOf(475), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/core.clj" });
    const__158 = (Var)RT.var("aleph.http.core", "send-contiguous-body");
    const__161 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ch"), ((IObj)Symbol.intern(null, "msg")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "HttpMessage") })), Symbol.intern(null, "body")) })), RT.keyword(null, "line"), Integer.valueOf(487), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/core.clj" });
    const__162 = (Var)RT.var("aleph.http.core", "close-empty-status-code");
    const__164 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(566), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/core.clj" });
    const__165 = Long.valueOf(-1L);
    const__166 = (Var)RT.var("aleph.http.core", "resolve-pings!");
    const__169 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "pending-pings")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "ConcurrentLinkedQueue") })), Symbol.intern(null, "v")) })), RT.keyword(null, "line"), Integer.valueOf(568), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/core.clj" });
    const__170 = (Var)RT.var("aleph.http.core", "websocket-message-coerce-fn");
    const__173 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ch"), Symbol.intern(null, "pending-pings")), Tuple.create(((IObj)Symbol.intern(null, "ch")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Channel") })), ((IObj)Symbol.intern(null, "pending-pings")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "ConcurrentLinkedQueue") })), Symbol.intern(null, "close-handshake-fn")) })), RT.keyword(null, "line"), Integer.valueOf(579), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/core.clj" });
    const__174 = (Var)RT.var("aleph.http.core", "close-on-idle-handler");
    const__177 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(629), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/core.clj" });
    const__178 = (Var)RT.var("aleph.http.core", "attach-idle-handlers");
    const__181 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "pipeline")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "ChannelPipeline") })), Symbol.intern(null, "idle-timeout")) })), RT.keyword(null, "line"), Integer.valueOf(638), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/core.clj" });
    const__182 = (Var)RT.var("aleph.http.core", "websocket-ping");
    const__185 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "conn"), Symbol.intern(null, "d'"), Symbol.intern(null, "data")) })), RT.keyword(null, "line"), Integer.valueOf(645), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/core.clj" });
    const__186 = (Var)RT.var("aleph.http.core", "websocket-close!");
    const__189 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "conn"), Symbol.intern(null, "status-code"), Symbol.intern(null, "reason-text"), Symbol.intern(null, "d'")) })), RT.keyword(null, "line"), Integer.valueOf(653), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/core.clj" });
    const__190 = (Var)RT.var("aleph.http.core", "attach-heartbeats-handler");
    const__193 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "pipeline")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "ChannelPipeline") })), Symbol.intern(null, "heartbeats")) })), RT.keyword(null, "line"), Integer.valueOf(669), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/core.clj" });
    const__194 = (Var)RT.var("aleph.http.core", "handle-heartbeat");
    const__197 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "ctx")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "ChannelHandlerContext") })), Symbol.intern(null, "conn"), RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "payload"), Symbol.intern(null, "timeout")) })) })), RT.keyword(null, "line"), Integer.valueOf(678), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/core.clj" });
    const__198 = (Var)RT.var("aleph.http.core", "decoder-failed?");
  }
  
  public static void __init2() {
    const__201 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "msg")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "DecoderResultProvider") }))) })), RT.keyword(null, "line"), Integer.valueOf(691), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/core.clj" });
    const__202 = (Var)RT.var("aleph.http.core", "decoder-failure");
    const__206 = (AFn)RT.map(new Object[] { RT.keyword(null, "tag"), RT.classForName("java.lang.Throwable"), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "msg")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "DecoderResultProvider") }))) })), RT.keyword(null, "line"), Integer.valueOf(694), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/core.clj" });
  }
  
  static  {
    __init0();
    __init1();
    __init2();
    Compiler.pushNSandLoader(RT.classForName("aleph.http.core__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
