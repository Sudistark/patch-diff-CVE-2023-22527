package aleph.http;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class client__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__3;
  
  public static final AFn const__4;
  
  public static final Var const__5;
  
  public static final Var const__6;
  
  public static final AFn const__14;
  
  public static final Var const__15;
  
  public static final AFn const__18;
  
  public static final Var const__19;
  
  public static final AFn const__22;
  
  public static final Var const__23;
  
  public static final AFn const__26;
  
  public static final Var const__27;
  
  public static final AFn const__30;
  
  public static final Var const__31;
  
  public static final AFn const__34;
  
  public static final Var const__35;
  
  public static final AFn const__38;
  
  public static final Var const__39;
  
  public static final AFn const__42;
  
  public static final Var const__43;
  
  public static final AFn const__46;
  
  public static final Var const__47;
  
  public static final AFn const__50;
  
  public static final Var const__51;
  
  public static final AFn const__54;
  
  public static final Var const__55;
  
  public static final AFn const__58;
  
  public static final Var const__59;
  
  public static final AFn const__62;
  
  public static final Var const__63;
  
  public static final AFn const__66;
  
  public static final Var const__67;
  
  public static final AFn const__70;
  
  public static final Var const__71;
  
  public static final AFn const__76;
  
  public static final Var const__77;
  
  public static final AFn const__80;
  
  public static final Var const__81;
  
  public static final AFn const__84;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new client.fn__28522());
    const__6.setMeta((IPersistentMap)const__14);
    const__6.bindRoot(new client.send_response_decoder_failure());
    const__15.setMeta((IPersistentMap)const__18);
    const__15.bindRoot(new client.handle_decoder_failure());
    const__19.setMeta((IPersistentMap)const__22);
    const__19.bindRoot(new client.exception_handler());
    const__23.setMeta((IPersistentMap)const__26);
    const__23.bindRoot(new client.raw_client_handler());
    const__27.setMeta((IPersistentMap)const__30);
    const__27.bindRoot(new client.client_handler());
    const__31.setMeta((IPersistentMap)const__34);
    const__31.bindRoot(new client.non_tunnel_proxy_QMARK_());
    const__35.setMeta((IPersistentMap)const__38);
    const__35.bindRoot(new client.http_proxy_headers());
    const__39.setMeta((IPersistentMap)const__42);
    const__39.bindRoot(new client.http_proxy_handler());
    const__43.setMeta((IPersistentMap)const__46);
    const__43.bindRoot(new client.proxy_handler());
    const__47.setMeta((IPersistentMap)const__50);
    const__47.bindRoot(new client.pending_proxy_connection_handler());
    const__51.setMeta((IPersistentMap)const__54);
    const__51.bindRoot(new client.pipeline_builder());
    const__55.setMeta((IPersistentMap)const__58);
    const__55.bindRoot(new client.close_connection());
    const__59.setMeta((IPersistentMap)const__62);
    const__59.bindRoot(new client.req__GT_proxy_url());
    const__63.setMeta((IPersistentMap)const__66);
    const__63.bindRoot(new client.http_connection());
    const__67.setMeta((IPersistentMap)const__70);
    const__67.bindRoot(new client.websocket_frame_size());
    const__71.setMeta((IPersistentMap)const__76);
    const__71.bindRoot(new client.websocket_handshaker());
    const__77.setMeta((IPersistentMap)const__80);
    const__77.bindRoot(new client.websocket_client_handler());
    const__81.setMeta((IPersistentMap)const__84);
    const__81.bindRoot(new client.websocket_connection());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "aleph.http.client")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE }));
    const__3 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE });
    const__4 = (AFn)Symbol.intern(null, "clojure.core");
    const__5 = (Var)RT.var("clojure.core", "*unchecked-math*");
    const__6 = (Var)RT.var("aleph.http.client", "send-response-decoder-failure");
    const__14 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "ctx")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "ChannelHandlerContext") })), Symbol.intern(null, "msg"), Symbol.intern(null, "response-stream")) })), RT.keyword(null, "line"), Integer.valueOf(100), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client.clj" });
    const__15 = (Var)RT.var("aleph.http.client", "handle-decoder-failure");
    const__18 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "ctx")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "ChannelHandlerContext") })), Symbol.intern(null, "msg"), Symbol.intern(null, "stream"), Symbol.intern(null, "complete"), Symbol.intern(null, "response-stream")) })), RT.keyword(null, "line"), Integer.valueOf(105), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client.clj" });
    const__19 = (Var)RT.var("aleph.http.client", "exception-handler");
    const__22 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ctx"), Symbol.intern(null, "ex"), Symbol.intern(null, "response-stream")) })), RT.keyword(null, "line"), Integer.valueOf(117), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client.clj" });
    const__23 = (Var)RT.var("aleph.http.client", "raw-client-handler");
    const__26 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "response-stream"), Symbol.intern(null, "buffer-capacity")) })), RT.keyword(null, "line"), Integer.valueOf(132), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client.clj" });
    const__27 = (Var)RT.var("aleph.http.client", "client-handler");
    const__30 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "response-stream"), ((IObj)Symbol.intern(null, "buffer-capacity")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "long") }))) })), RT.keyword(null, "line"), Integer.valueOf(184), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client.clj" });
    const__31 = (Var)RT.var("aleph.http.client", "non-tunnel-proxy?");
    const__34 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "tunnel?"), Symbol.intern(null, "user"), Symbol.intern(null, "http-headers"), Symbol.intern(null, "ssl?")), RT.keyword(null, "as"), Symbol.intern(null, "proxy-options") })) })), RT.keyword(null, "line"), Integer.valueOf(298), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client.clj" });
    const__35 = (Var)RT.var("aleph.http.client", "http-proxy-headers");
    const__38 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "http-headers"), Symbol.intern(null, "keep-alive?")), RT.keyword(null, "or"), RT.map(new Object[] { Symbol.intern(null, "http-headers"), RT.map(new Object[0]), Symbol.intern(null, "keep-alive?"), Boolean.TRUE }) })) })), RT.keyword(null, "line"), Integer.valueOf(306), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client.clj" });
    const__39 = (Var)RT.var("aleph.http.client", "http-proxy-handler");
    const__42 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "address")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "InetSocketAddress") })), RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "user"), Symbol.intern(null, "password"), Symbol.intern(null, "http-headers"), Symbol.intern(null, "tunnel?"), Symbol.intern(null, "keep-alive?"), Symbol.intern(null, "ssl?")), RT.keyword(null, "or"), RT.map(new Object[] { Symbol.intern(null, "keep-alive?"), Boolean.TRUE }), RT.keyword(null, "as"), Symbol.intern(null, "options") })) })), RT.keyword(null, "line"), Integer.valueOf(323), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client.clj" });
    const__43 = (Var)RT.var("aleph.http.client", "proxy-handler");
    const__46 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "host"), Symbol.intern(null, "port"), Symbol.intern(null, "protocol"), Symbol.intern(null, "user"), Symbol.intern(null, "password"), Symbol.intern(null, "connection-timeout")), RT.keyword(null, "or"), RT.map(new Object[] { Symbol.intern(null, "protocol"), RT.keyword(null, "http"), Symbol.intern(null, "connection-timeout"), Double.valueOf(60000.0D) }), RT.keyword(null, "as"), Symbol.intern(null, "options") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "some?"), Symbol.intern(null, "host") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(362), RT.keyword(null, "column"), Integer.valueOf(10) }))) })) })), RT.keyword(null, "line"), Integer.valueOf(358), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client.clj" });
    const__47 = (Var)RT.var("aleph.http.client", "pending-proxy-connection-handler");
    const__50 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "response-stream")) })), RT.keyword(null, "line"), Integer.valueOf(385), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client.clj" });
    const__51 = (Var)RT.var("aleph.http.client", "pipeline-builder");
    const__54 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "response-stream"), RT.map(new Object[] { RT.keyword(null, "keys"), RT.vector(new Object[] { Symbol.intern(null, "pipeline-transform"), Symbol.intern(null, "response-buffer-size"), Symbol.intern(null, "max-initial-line-length"), Symbol.intern(null, "max-header-size"), Symbol.intern(null, "max-chunk-size"), Symbol.intern(null, "raw-stream?"), Symbol.intern(null, "proxy-options"), Symbol.intern(null, "ssl?"), Symbol.intern(null, "idle-timeout"), Symbol.intern(null, "log-activity") }), RT.keyword(null, "or"), RT.map(new Object[] { 
                          Symbol.intern(null, "pipeline-transform"), Symbol.intern(null, "identity"), Symbol.intern(null, "response-buffer-size"), Long.valueOf(65536L), Symbol.intern(null, "max-initial-line-length"), Long.valueOf(65536L), Symbol.intern(null, "max-header-size"), Long.valueOf(65536L), Symbol.intern(null, "max-chunk-size"), Long.valueOf(65536L), 
                          Symbol.intern(null, "idle-timeout"), Long.valueOf(0L) }) })) })), RT.keyword(null, "line"), Integer.valueOf(413), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client.clj" });
    const__55 = (Var)RT.var("aleph.http.client", "close-connection");
    const__58 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f")) })), RT.keyword(null, "line"), Integer.valueOf(473), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client.clj" });
    const__59 = (Var)RT.var("aleph.http.client", "req->proxy-url");
    const__62 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "uri")), RT.keyword(null, "as"), Symbol.intern(null, "req") })) })), RT.keyword(null, "line"), Integer.valueOf(480), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client.clj" });
    const__63 = (Var)RT.var("aleph.http.client", "http-connection");
    const__66 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "remote-address")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "InetSocketAddress") })), Symbol.intern(null, "ssl?"), RT.map(new Object[] { RT.keyword(null, "keys"), RT.vector(new Object[] { 
                          Symbol.intern(null, "local-address"), Symbol.intern(null, "raw-stream?"), Symbol.intern(null, "bootstrap-transform"), Symbol.intern(null, "name-resolver"), Symbol.intern(null, "keep-alive?"), Symbol.intern(null, "insecure?"), Symbol.intern(null, "ssl-context"), Symbol.intern(null, "response-buffer-size"), Symbol.intern(null, "on-closed"), Symbol.intern(null, "response-executor"), 
                          Symbol.intern(null, "epoll?"), Symbol.intern(null, "transport"), Symbol.intern(null, "proxy-options") }), RT.keyword(null, "or"), RT.map(new Object[] { Symbol.intern(null, "bootstrap-transform"), Symbol.intern(null, "identity"), Symbol.intern(null, "keep-alive?"), Boolean.TRUE, Symbol.intern(null, "response-buffer-size"), Long.valueOf(65536L), Symbol.intern(null, "epoll?"), Boolean.FALSE, Symbol.intern(null, "name-resolver"), RT.keyword(null, "default") }), RT.keyword(null, "as"), Symbol.intern(null, "options") })) })), RT.keyword(null, "line"), Integer.valueOf(490), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client.clj" });
    const__67 = (Var)RT.var("aleph.http.client", "websocket-frame-size");
    const__70 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "frame")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "WebSocketFrame") }))) })), RT.keyword(null, "line"), Integer.valueOf(637), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client.clj" });
    const__71 = (Var)RT.var("aleph.http.client", "websocket-handshaker");
    const__76 = (AFn)RT.map(new Object[] { RT.keyword(null, "tag"), RT.classForName("io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker"), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "uri"), Symbol.intern(null, "sub-protocols"), Symbol.intern(null, "extensions?"), Symbol.intern(null, "headers"), Symbol.intern(null, "max-frame-payload")) })), RT.keyword(null, "line"), Integer.valueOf(640), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client.clj" });
    const__77 = (Var)RT.var("aleph.http.client", "websocket-client-handler");
    const__80 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "raw-stream?"), Symbol.intern(null, "uri"), Symbol.intern(null, "sub-protocols"), Symbol.intern(null, "extensions?"), Symbol.intern(null, "headers"), Symbol.intern(null, "max-frame-payload")), RT.vector(new Object[] { Symbol.intern(null, "raw-stream?"), Symbol.intern(null, "uri"), Symbol.intern(null, "sub-protocols"), Symbol.intern(null, "extensions?"), Symbol.intern(null, "headers"), Symbol.intern(null, "max-frame-payload"), Symbol.intern(null, "heartbeats") }) })), RT.keyword(null, "line"), Integer.valueOf(649), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client.clj" });
    const__81 = (Var)RT.var("aleph.http.client", "websocket-connection");
    const__84 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "uri"), RT.map(new Object[] { RT.keyword(null, "keys"), RT.vector(new Object[] { 
                          Symbol.intern(null, "raw-stream?"), Symbol.intern(null, "insecure?"), Symbol.intern(null, "ssl-context"), Symbol.intern(null, "headers"), Symbol.intern(null, "local-address"), Symbol.intern(null, "bootstrap-transform"), Symbol.intern(null, "pipeline-transform"), Symbol.intern(null, "epoll?"), Symbol.intern(null, "transport"), Symbol.intern(null, "sub-protocols"), 
                          Symbol.intern(null, "extensions?"), Symbol.intern(null, "max-frame-payload"), Symbol.intern(null, "max-frame-size"), Symbol.intern(null, "compression?"), Symbol.intern(null, "heartbeats") }), RT.keyword(null, "or"), RT.map(new Object[] { 
                          Symbol.intern(null, "sub-protocols"), null, Symbol.intern(null, "pipeline-transform"), Symbol.intern(null, "identity"), Symbol.intern(null, "extensions?"), Boolean.FALSE, Symbol.intern(null, "bootstrap-transform"), Symbol.intern(null, "identity"), Symbol.intern(null, "raw-stream?"), Boolean.FALSE, 
                          Symbol.intern(null, "max-frame-payload"), Long.valueOf(65536L), Symbol.intern(null, "epoll?"), Boolean.FALSE, Symbol.intern(null, "max-frame-size"), Long.valueOf(1048576L), Symbol.intern(null, "compression?"), Boolean.FALSE }), RT.keyword(null, "as"), Symbol.intern(null, "options") })) })), RT.keyword(null, "line"), Integer.valueOf(819), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("aleph.http.client__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
