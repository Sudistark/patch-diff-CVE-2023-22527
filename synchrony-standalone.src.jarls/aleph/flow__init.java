package aleph;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class flow__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__12;
  
  public static final Var const__13;
  
  public static final AFn const__16;
  
  public static final Var const__17;
  
  public static final AFn const__20;
  
  public static final Var const__21;
  
  public static final AFn const__24;
  
  public static final Var const__25;
  
  public static final AFn const__28;
  
  public static final Var const__29;
  
  public static final Var const__30;
  
  public static final Var const__31;
  
  public static final Var const__32;
  
  public static final Var const__33;
  
  public static final Var const__34;
  
  public static final Keyword const__35;
  
  public static final Var const__36;
  
  public static final Var const__37;
  
  public static final AFn const__38;
  
  public static final Var const__39;
  
  public static final Var const__40;
  
  public static final AFn const__41;
  
  public static final Var const__42;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new flow.fn__26451());
    const__3.setMeta((IPersistentMap)const__12);
    const__3.bindRoot(new flow.instrumented_pool());
    const__13.setMeta((IPersistentMap)const__16);
    const__13.bindRoot(new flow.acquire());
    const__17.setMeta((IPersistentMap)const__20);
    const__17.bindRoot(new flow.release());
    const__21.setMeta((IPersistentMap)const__24);
    const__21.bindRoot(new flow.dispose());
    const__25.setMeta((IPersistentMap)const__28);
    const__25


























































































      
      .bindRoot(((IFn)const__29.getRawRoot()).invoke(const__30));
    const__37.setMeta((IPersistentMap)const__38);
    const__37.bindRoot(((IFn)const__29.getRawRoot()).invoke(const__39));
    const__40.setMeta((IPersistentMap)const__41);
    const__40.bindRoot(((IFn)const__29.getRawRoot()).invoke(const__42));
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "aleph.flow");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("aleph.flow", "instrumented-pool");
    const__12 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), RT.vector(new Object[] { Symbol.intern(null, "generate"), Symbol.intern(null, "destroy"), Symbol.intern(null, "stats-callback"), Symbol.intern(null, "max-queue-size"), Symbol.intern(null, "sample-period"), Symbol.intern(null, "control-period"), Symbol.intern(null, "controller") }), RT.keyword(null, "or"), RT.map(new Object[] { Symbol.intern(null, "sample-period"), Long.valueOf(10L), Symbol.intern(null, "control-period"), Long.valueOf(10000L), Symbol.intern(null, "max-queue-size"), Long.valueOf(65536L) }) })) })), RT.keyword(null, "doc"), "Returns a [Dirigiste](https://github.com/clj-commons/dirigiste) object pool, which can be interacted\n   with via `acquire`, `release`, and `dispose`.\n\n   Param key          | Description\n   | ---              | ---\n   | `generate`       | a single-arg funcion which takes a key, and returns an object which should be non-equal to any other generated object |\n   | `destroy`        | an optional two-arg function which takes a key and object, and releases any associated resources |\n   | `stats-callback` | a function which will be invoked every `control-period` with a map of keys onto associated statistics |\n   | `max-queue-size` | the maximum number of pending acquires per key that are allowed before `acquire` will start to throw a `java.util.concurrent.RejectedExecutionException`.\n   | `sample-period`  | the interval, in milliseconds, between sampling the state of the pool for resizing and gathering statistics, defaults to `10`.\n   | `control-period` | the interval, in milliseconds, between use of the controller to adjust the size of the pool, defaults to `10000`.\n   | `controller`     | a Dirigiste controller that is used to gide the pool's size.", RT.keyword(null, "line"), Integer.valueOf(17), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/flow.clj" });
    const__13 = (Var)RT.var("aleph.flow", "acquire");
    const__16 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "p")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "IPool") })), Symbol.intern(null, "k")) })), RT.keyword(null, "doc"), "Acquires an object from the pool for key `k`, returning a deferred containing the object.  May\n   throw a `java.util.concurrent.RejectedExecutionException` if there are too many pending acquires.", RT.keyword(null, "line"), Integer.valueOf(68), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/flow.clj" });
    const__17 = (Var)RT.var("aleph.flow", "release");
    const__20 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "p")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "IPool") })), Symbol.intern(null, "k"), Symbol.intern(null, "obj")) })), RT.keyword(null, "doc"), "Releases an object for key `k` back to the pool.", RT.keyword(null, "line"), Integer.valueOf(83), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/flow.clj" });
    const__21 = (Var)RT.var("aleph.flow", "dispose");
    const__24 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "p")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "IPool") })), Symbol.intern(null, "k"), Symbol.intern(null, "obj")) })), RT.keyword(null, "doc"), "Disposes of a pooled object which is no longer valid.", RT.keyword(null, "line"), Integer.valueOf(88), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/flow.clj" });
    const__25 = (Var)RT.var("aleph.flow", "instrumented-executor");
    const__28 = (AFn)RT.map(new Object[] { RT.keyword(null, "protocol"), null, RT.keyword(null, "line"), Integer.valueOf(93), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/flow.clj" });
    const__29 = (Var)RT.var("clojure.core", "deref");
    const__30 = (Var)RT.var("manifold.executor", "instrumented-executor");
    const__31 = (Var)RT.var("clojure.core", "alter-meta!");
    const__32 = (Var)RT.var("clojure.core", "merge");
    const__33 = (Var)RT.var("clojure.core", "dissoc");
    const__34 = (Var)RT.var("clojure.core", "meta");
    const__35 = (Keyword)RT.keyword(null, "name");
    const__36 = (Var)RT.var("potemkin.namespaces", "link-vars");
    const__37 = (Var)RT.var("aleph.flow", "utilization-executor");
    const__38 = (AFn)RT.map(new Object[] { RT.keyword(null, "protocol"), null, RT.keyword(null, "line"), Integer.valueOf(93), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/flow.clj" });
    const__39 = (Var)RT.var("manifold.executor", "utilization-executor");
    const__40 = (Var)RT.var("aleph.flow", "fixed-thread-executor");
    const__41 = (AFn)RT.map(new Object[] { RT.keyword(null, "protocol"), null, RT.keyword(null, "line"), Integer.valueOf(93), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/flow.clj" });
    const__42 = (Var)RT.var("manifold.executor", "fixed-thread-executor");
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("aleph.flow__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
