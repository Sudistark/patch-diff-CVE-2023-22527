package aleph;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentHashSet;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class http__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final Keyword const__4;
  
  public static final Keyword const__6;
  
  public static final AFn const__12;
  
  public static final Var const__13;
  
  public static final AFn const__17;
  
  public static final Var const__18;
  
  public static final AFn const__20;
  
  public static final Var const__21;
  
  public static final Var const__22;
  
  public static final AFn const__25;
  
  public static final Var const__26;
  
  public static final AFn const__29;
  
  public static final Var const__30;
  
  public static final AFn const__33;
  
  public static final Var const__34;
  
  public static final Object const__35;
  
  public static final Object const__36;
  
  public static final AFn const__38;
  
  public static final Var const__39;
  
  public static final AFn const__42;
  
  public static final Var const__43;
  
  public static final AFn const__45;
  
  public static final Keyword const__46;
  
  public static final Var const__47;
  
  public static final AFn const__50;
  
  public static final Var const__51;
  
  public static final AFn const__54;
  
  public static final Var const__55;
  
  public static final AFn const__58;
  
  public static final Var const__59;
  
  public static final AFn const__62;
  
  public static final Var const__63;
  
  public static final AFn const__66;
  
  public static final Var const__67;
  
  public static final AFn const__69;
  
  public static final AFn const__70;
  
  public static final Var const__71;
  
  public static final AFn const__74;
  
  public static final Var const__75;
  
  public static final AFn const__77;
  
  public static final Var const__78;
  
  public static final Keyword const__79;
  
  public static final Var const__80;
  
  public static final Var const__81;
  
  public static final AFn const__82;
  
  public static final Var const__83;
  
  public static final Var const__84;
  
  public static final AFn const__86;
  
  public static final Keyword const__87;
  
  public static final AFn const__88;
  
  public static final Var const__89;
  
  public static final AFn const__91;
  
  public static final Keyword const__92;
  
  public static final AFn const__93;
  
  public static final Var const__94;
  
  public static final AFn const__96;
  
  public static final Keyword const__97;
  
  public static final AFn const__98;
  
  public static final Var const__99;
  
  public static final AFn const__101;
  
  public static final Keyword const__102;
  
  public static final AFn const__103;
  
  public static final Var const__104;
  
  public static final AFn const__106;
  
  public static final Keyword const__107;
  
  public static final AFn const__108;
  
  public static final Var const__109;
  
  public static final AFn const__111;
  
  public static final Keyword const__112;
  
  public static final AFn const__113;
  
  public static final Var const__114;
  
  public static final AFn const__116;
  
  public static final Keyword const__117;
  
  public static final AFn const__118;
  
  public static final Var const__119;
  
  public static final AFn const__121;
  
  public static final Keyword const__122;
  
  public static final AFn const__123;
  
  public static final Var const__124;
  
  public static final AFn const__127;
  
  public static final Var const__128;
  
  public static final AFn const__131;
  
  public static final Var const__132;
  
  public static final AFn const__135;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new http.fn__30171());
    const__3.setMeta((IPersistentMap)const__12);
    const__3.bindRoot(new http.start_server());
    const__13.setMeta((IPersistentMap)const__17);
    const__13.bindRoot(new http.create_connection());
    const__18.setMeta((IPersistentMap)const__20);
    const__18
















































































      
      .bindRoot(((IFn)const__21.getRawRoot()).invoke(PersistentHashSet.EMPTY));
    const__22.setMeta((IPersistentMap)const__25);
    const__22.bindRoot(new http.register_connection_stats_callback());
    const__26.setMeta((IPersistentMap)const__29);
    const__26.bindRoot(new http.unregister_connection_stats_callback());
    const__30.setMeta((IPersistentMap)const__33);
    const__30











      
      .bindRoot(((IFn)const__34.getRawRoot()).invoke(const__35, const__36, const__38));
    const__39.setMeta((IPersistentMap)const__42);
    const__39.bindRoot(new http.connection_pool());
    const__43.setMeta((IPersistentMap)const__45);
    const__43

















































































































      
      .bindRoot(((IFn)const__39.getRawRoot()).invoke(RT.mapUniqueKeys(new Object[] { const__46, new http.fn__30196() })));
    const__47.setMeta((IPersistentMap)const__50);
    const__47.bindRoot(new http.websocket_client());
    const__51.setMeta((IPersistentMap)const__54);
    const__51.bindRoot(new http.websocket_connection());
    const__55.setMeta((IPersistentMap)const__58);
    const__55.bindRoot(new http.websocket_ping());
    const__59.setMeta((IPersistentMap)const__62);
    const__59.bindRoot(new http.websocket_close_BANG_());
    const__63.setMeta((IPersistentMap)const__66);
    const__63.bindRoot(new http.req());
    const__67.setMeta((IPersistentMap)const__69);
    const__67.bindRoot(const__70);
    const__71.setMeta((IPersistentMap)const__74);
    const__71.bindRoot(new http.def_http_method());
    ((Var)const__71)
































































































































      
      .setMacro();
    const__75.setMeta((IPersistentMap)const__77);
    const__75














      
      .bindRoot(((IFn)const__78.getRawRoot()).invoke(const__63.getRawRoot(), const__79));
    const__84.setMeta((IPersistentMap)const__86);
    const__84
      .bindRoot(((IFn)const__78.getRawRoot()).invoke(const__63.getRawRoot(), const__87));
    const__89.setMeta((IPersistentMap)const__91);
    const__89
      .bindRoot(((IFn)const__78.getRawRoot()).invoke(const__63.getRawRoot(), const__92));
    const__94.setMeta((IPersistentMap)const__96);
    const__94
      .bindRoot(((IFn)const__78.getRawRoot()).invoke(const__63.getRawRoot(), const__97));
    const__99.setMeta((IPersistentMap)const__101);
    const__99
      .bindRoot(((IFn)const__78.getRawRoot()).invoke(const__63.getRawRoot(), const__102));
    const__104.setMeta((IPersistentMap)const__106);
    const__104
      .bindRoot(((IFn)const__78.getRawRoot()).invoke(const__63.getRawRoot(), const__107));
    const__109.setMeta((IPersistentMap)const__111);
    const__109
      .bindRoot(((IFn)const__78.getRawRoot()).invoke(const__63.getRawRoot(), const__112));
    const__114.setMeta((IPersistentMap)const__116);
    const__114
      .bindRoot(((IFn)const__78.getRawRoot()).invoke(const__63.getRawRoot(), const__117));
    const__119.setMeta((IPersistentMap)const__121);
    const__119
      .bindRoot(((IFn)const__78.getRawRoot()).invoke(const__63.getRawRoot(), const__122));
    const__124.setMeta((IPersistentMap)const__127);
    const__124.bindRoot(new http.get_all());
    const__128.setMeta((IPersistentMap)const__131);
    const__128.bindRoot(new http.wrap_ring_async_handler());
    const__132.setMeta((IPersistentMap)const__135);
    const__132.bindRoot(new http.file());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "aleph.http");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("aleph.http", "start-server");
    const__4 = (Keyword)RT.keyword(null, "arglists");
    const__6 = (Keyword)RT.keyword(null, "doc");
    const__12 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "handler"), Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "Starts an HTTP server using the provided Ring `handler`.  Returns a server object which can be stopped\n   via `java.io.Closeable.close()`, and whose port can be discovered with `aleph.netty/port`.\n\n\n   Param key                           | Description\n   | ---                               | ---\n   | `port`                            | the port the server will bind to.  If `0`, the server will bind to a random port.\n   | `socket-address`                  |  a `java.net.SocketAddress` specifying both the port and interface to bind to.\n   | `bootstrap-transform`             | a function that takes an `io.netty.bootstrap.ServerBootstrap` object, which represents the server, and modifies it.\n   | `ssl-context`                     | an `io.netty.handler.ssl.SslContext` object or a map of SSL context options (see `aleph.netty/ssl-server-context` for more details) if an SSL connection is desired |\n   | `manual-ssl?`                     | set to `true` to indicate that SSL is active, but the caller is managing it (this implies `:ssl-context` is nil). For example, this can be used if you want to use configure SNI (perhaps in `:pipeline-transform`) to select the SSL context based on the client's indicated host name. |\n   | `pipeline-transform`              | a function that takes an `io.netty.channel.ChannelPipeline` object, which represents a connection, and modifies it.\n   | `executor`                        | a `java.util.concurrent.Executor` which is used to handle individual requests.  To avoid this indirection you may specify `:none`, but in this case extreme care must be taken to avoid blocking operations on the handler's thread.\n   | `shutdown-executor?`              | if `true`, the executor will be shut down when `.close()` is called on the server, defaults to `true`.\n   | `request-buffer-size`             | the maximum body size, in bytes, which the server will allow to accumulate before invoking the handler, defaults to `16384`.  This does *not* represent the maximum size request the server can handle (which is unbounded), and is only a means of maximizing performance.\n   | `raw-stream?`                     | if `true`, bodies of requests will not be buffered at all, and will be represented as Manifold streams of `io.netty.buffer.ByteBuf` objects rather than as an `InputStream`.  This will minimize copying, but means that care must be taken with Netty's buffer reference counting.  Only recommended for advanced users.\n   | `rejected-handler`                | a spillover request-handler which is invoked when the executor's queue is full, and the request cannot be processed.  Defaults to a `503` response.\n   | `max-request-body-size`           | the maximum length of the request body in bytes. Implcitly adds `io.netty.handler.codec.http.HttpObjectAggregator` on the pipeline. Unspecified and thus disabled by default.\n   | `max-initial-line-length`         | the maximum characters that can be in the initial line of the request, defaults to `8192`\n   | `max-header-size`                 | the maximum characters that can be in a single header entry of a request, defaults to `8192`\n   | `max-chunk-size`                  | the maximum characters that can be in a single chunk of a streamed request, defaults to `16384`\n   | `validate-headers`                | if `true`, validates the headers when decoding the request, defaults to `false`\n   | `initial-buffer-size`             | the initial buffer size of characters when decoding the request, defaults to `128`\n   | `allow-duplicate-content-lengths` | if `true`, allows duplicate `Content-Length` headers, defaults to true\n   | `transport`                       | the transport to use, one of `:nio`, `:epoll`, `:kqueue` or `:io-uring` (defaults to `:nio`)\n   | `compression?`                    | when `true` enables http compression, defaults to `false`\n   | `compression-level`               | optional compression level, `1` yields the fastest compression and `9` yields the best compression, defaults to `6`. When set, enables http content compression regardless of the `compression?` flag value\n   | `idle-timeout`                    | when set, connections are closed after not having performed any I/O operations for the given duration, in milliseconds. Defaults to `0` (infinite idle time).\n   | `continue-handler`                | optional handler which is invoked when header sends \"Except: 100-continue\" header to test whether the request should be accepted or rejected. Handler should return `true`, `false`, ring responseo to be used as a reject response or deferred that yields one of those.\n   | `continue-executor`               | optional `java.util.concurrent.Executor` which is used to handle requests passed to :continue-handler.  To avoid this indirection you may specify `:none`, but in this case extreme care must be taken to avoid blocking operations on the handler's thread.\n   | `shutdown-timeout`                | interval in seconds within which in-flight requests must be processed, defaults to 15 seconds. A value of 0 bypasses waiting entirely.", RT.keyword(null, "line"), Integer.valueOf(27), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http.clj" });
    const__13 = (Var)RT.var("aleph.http", "create-connection");
    const__17 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "uri")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "URI") })), Symbol.intern(null, "options"), Symbol.intern(null, "middleware"), Symbol.intern(null, "on-closed")) })), RT.keyword(null, "doc"), "Returns a deferred that yields a function which, given an HTTP request, returns\n   a deferred representing the HTTP response.  If the server disconnects, all responses\n   will be errors, and a new connection must be created.", RT.keyword(null, "line"), Integer.valueOf(62), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "aleph/http.clj" });
    const__18 = (Var)RT.var("aleph.http", "connection-stats-callbacks");
    const__20 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(83), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http.clj" });
    const__21 = (Var)RT.var("clojure.core", "atom");
    const__22 = (Var)RT.var("aleph.http", "register-connection-stats-callback");
    const__25 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "c")) })), RT.keyword(null, "doc"), "Registers a callback which will be called with connection-pool stats.", RT.keyword(null, "line"), Integer.valueOf(85), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http.clj" });
    const__26 = (Var)RT.var("aleph.http", "unregister-connection-stats-callback");
    const__29 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "c")) })), RT.keyword(null, "doc"), "Unregisters a previous connection-pool stats callback.", RT.keyword(null, "line"), Integer.valueOf(90), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http.clj" });
    const__30 = (Var)RT.var("aleph.http", "default-response-executor");
    const__33 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(95), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http.clj" });
    const__34 = (Var)RT.var("aleph.flow", "utilization-executor");
    const__35 = Double.valueOf(0.9D);
    const__36 = Long.valueOf(256L);
    const__38 = (AFn)RT.map(new Object[] { RT.keyword(null, "onto?"), Boolean.FALSE });
    const__39 = (Var)RT.var("aleph.http", "connection-pool");
    const__42 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), RT.vector(new Object[] { 
                          Symbol.intern(null, "connections-per-host"), Symbol.intern(null, "total-connections"), Symbol.intern(null, "target-utilization"), Symbol.intern(null, "connection-options"), Symbol.intern(null, "dns-options"), Symbol.intern(null, "stats-callback"), Symbol.intern(null, "control-period"), Symbol.intern(null, "middleware"), Symbol.intern(null, "max-queue-size"), Symbol.intern(null, "pool-builder-fn"), 
                          Symbol.intern(null, "pool-controller-builder-fn") }), RT.keyword(null, "or"), RT.map(new Object[] { 
                          Symbol.intern(null, "connections-per-host"), Long.valueOf(8L), Symbol.intern(null, "total-connections"), Long.valueOf(1024L), Symbol.intern(null, "target-utilization"), Double.valueOf(0.9D), Symbol.intern(null, "control-period"), Long.valueOf(60000L), Symbol.intern(null, "middleware"), Symbol.intern("middleware", "wrap-request"), 
                          Symbol.intern(null, "max-queue-size"), Long.valueOf(65536L) }) })) })), RT.keyword(null, "doc"), "Returns a connection pool which can be used as an argument in `request`.\n\n   Param key                      | Description\n   | ---                          | ---\n   | `connections-per-host`       | the maximum number of simultaneous connections to any host\n   | `total-connections`          | the maximum number of connections across all hosts\n   | `target-utilization`         | the target utilization of connections per host, within `[0,1]`, defaults to `0.9`\n   | `stats-callback`             | an optional callback which is invoked with a map of hosts onto usage statistics every ten seconds\n   | `max-queue-size`             | the maximum number of pending acquires from the pool that are allowed before `acquire` will start to throw a `java.util.concurrent.RejectedExecutionException`, defaults to `65536`\n   | `control-period`             | the interval, in milliseconds, between use of the controller to adjust the size of the pool, defaults to `60000`\n   | `dns-options`                | an optional map with async DNS resolver settings, for more information check `aleph.netty/dns-resolver-group`. When set, ignores `name-resolver` setting from `connection-options` in favor of shared DNS resolver instance\n   | `middleware`                 | a function to modify request before sending, defaults to `aleph.http.client-middleware/wrap-request`\n   | `pool-builder-fn`            | an optional one arity function which returns a `io.aleph.dirigiste.IPool` from a map containing the following keys: `generate`, `destroy`, `control-period`, `max-queue-length` and `stats-callback`.\n   | `pool-controller-builder-fn` | an optional zero arity function which returns a `io.aleph.dirigiste.IPool$Controller`.\n\n   the `connection-options` are a map describing behavior across all connections:\n\n   Param key                   | Description\n   | ---                       | ---\n   | `ssl-context`             | an `io.netty.handler.ssl.SslContext` object or a map of SSL context options (see `aleph.netty/ssl-client-context` for more details), only required if a custom context is required\n   | `local-address`           | an optional `java.net.SocketAddress` describing which local interface should be used\n   | `bootstrap-transform`     | a function that takes an `io.netty.bootstrap.Bootstrap` object and modifies it.\n   | `pipeline-transform`      | a function that takes an `io.netty.channel.ChannelPipeline` object, which represents a connection, and modifies it.\n   | `insecure?`               | if `true`, ignores the certificate for any `https://` domains\n   | `response-buffer-size`    | the amount of the response, in bytes, that is buffered before the request returns, defaults to `65536`.  This does *not* represent the maximum size response that the client can handle (which is unbounded), and is only a means of maximizing performance.\n   | `keep-alive?`             | if `true`, attempts to reuse connections for multiple requests, defaults to `true`.\n   | `idle-timeout`            | when set, forces keep-alive connections to be closed after an idle time, in milliseconds.\n   | `transport`               | the transport to use, one of `:nio`, `:epoll`, `:kqueue` or `:io-uring` (defaults to `:nio`)\n   | `raw-stream?`             | if `true`, bodies of responses will not be buffered at all, and represented as Manifold streams of `io.netty.buffer.ByteBuf` objects rather than as an `InputStream`.  This will minimize copying, but means that care must be taken with Netty's buffer reference counting.  Only recommended for advanced users.\n   | `max-initial-line-length` | the maximum length of the initial line (e.g. HTTP/1.0 200 OK), defaults to `65536`\n   | `max-header-size`         | the maximum characters that can be in a single header entry of a response, defaults to `65536`\n   | `max-chunk-size`          | the maximum characters that can be in a single chunk of a streamed response, defaults to `65536`\n   | `name-resolver`           | specify the mechanism to resolve the address of the unresolved named address. When not set or equals to `:default`, JDK's built-in domain name lookup mechanism is used (blocking). Set to`:noop` not to resolve addresses or pass an instance of `io.netty.resolver.AddressResolverGroup` you need. Note, that if the appropriate connection-pool is created with dns-options shared DNS resolver would be used\n   | `proxy-options`           | a map to specify proxy settings. HTTP, SOCKS4 and SOCKS5 proxies are supported. Note, that when using proxy `connections-per-host` configuration is still applied to the target host disregarding tunneling settings. If you need to limit number of connections to the proxy itself use `total-connections` setting.\n   | `response-executor`       | optional `java.util.concurrent.Executor` that will execute response callbacks\n   | `log-activity`            | when set, logs all events on each channel (connection) with a log level given. Accepts either one of `:trace`, `:debug`, `:info`, `:warn`, `:error` or an instance of `io.netty.handler.logging.LogLevel`. Note, that this setting *does not* enforce any changes to the logging configuration (default configuration is `INFO`, so you won't see any `DEBUG` or `TRACE` level messages, unless configured explicitly)\n\n   Supported `proxy-options` are\n\n   Param key              | Description\n   | ---                  | ---\n   | `host`               | host of the proxy server\n   | `port`               | an optional port to establish connection (defaults to 80 for http and 1080 for socks proxies)\n   | `protocol`           | one of `:http`, `:socks4` or `:socks5` (defaults to `:http`)\n   | `user`               | an optional auth username\n   | `password`           | an optional auth password\n   | `http-headers`       | (HTTP proxy only) an optional map to set additional HTTP headers when establishing connection to the proxy server\n   | `tunnel?`            | (HTTP proxy only) if `true`, sends HTTP CONNECT to the proxy and waits for the 'HTTP/1.1 200 OK' response before sending any subsequent requests. Defaults to `false`. When using authorization or specifying additional headers uses tunneling disregarding this setting\n   | `connection-timeout` | timeout in milliseconds for the tunnel become established, defaults to 60 seconds, setting is ignored when tunneling is not used.", RT.keyword(null, "line"), Integer.valueOf(98), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http.clj" });
    const__43 = (Var)RT.var("aleph.http", "default-connection-pool");
    const__45 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(210), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http.clj" });
    const__46 = (Keyword)RT.keyword(null, "stats-callback");
    const__47 = (Var)RT.var("aleph.http", "websocket-client");
    const__50 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "url")), Tuple.create(Symbol.intern(null, "url"), Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "Given a url, returns a deferred which yields a duplex stream that can be used to\n   communicate with a server over the WebSocket protocol.\n\n   Param key               | Description\n   | ---                   | ---\n   | `raw-stream?`         | if `true`, the connection will emit raw `io.netty.buffer.ByteBuf` objects rather than strings or byte-arrays.  This will minimize copying, but means that care must be taken with Netty's buffer reference counting.  Only recommended for advanced users.\n   | `insecure?`           | if `true`, the certificates for `wss://` will be ignored.\n   | `ssl-context`         | an `io.netty.handler.ssl.SslContext` object, only required if a custom context is required\n   | `extensions?`         | if `true`, the websocket extensions will be supported.\n   | `sub-protocols`       | a string with a comma seperated list of supported sub-protocols.\n   | `headers`             | the headers that should be included in the handshake\n   | `compression?`        | when set to `true`, enables client to use permessage-deflate compression extension, defaults to `false`.\n   | `pipeline-transform`  | an optional function that takes an `io.netty.channel.ChannelPipeline` object, which represents a connection, and modifies it.\n   | `max-frame-payload`   | maximum allowable frame payload length, in bytes, defaults to `65536`.\n   | `max-frame-size`      | maximum aggregate message size, in bytes, defaults to `1048576`.\n   | `bootstrap-transform` | an optional function that takes an `io.netty.bootstrap.Bootstrap` object and modifies it.\n   | `transport`               | the transport to use, one of `:nio`, `:epoll`, `:kqueue` or `:io-uring` (defaults to `:nio`)\n   | `heartbeats`          | optional configuration to send Ping frames to the server periodically (if the connection is idle), configuration keys are `:send-after-idle` (in milliseconds), `:payload` (optional, empty frame by default) and `:timeout` (optional, to close the connection if Pong is not received after specified timeout).", RT.keyword(null, "line"), Integer.valueOf(217), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http.clj" });
    const__51 = (Var)RT.var("aleph.http", "websocket-connection");
    const__54 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "req")), Tuple.create(Symbol.intern(null, "req"), Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "Given an HTTP request that can be upgraded to a WebSocket connection, returns a\n   deferred which yields a duplex stream that can be used to communicate with the\n   client over the WebSocket protocol.\n\n   Param key              | Description\n   | ---                  | ---\n   | `raw-stream?`        | if `true`, the connection will emit raw `io.netty.buffer.ByteBuf` objects rather than strings or byte-arrays.  This will minimize copying, but means that care must be taken with Netty's buffer reference counting.  Only recommended for advanced users.\n   | `headers`            | the headers that should be included in the handshake\n   | `compression?`       | when set to `true`, enables permessage-deflate compression extention support for the connection, defaults to `false`.\n   | `pipeline-transform` | an optional function that takes an `io.netty.channel.ChannelPipeline` object, which represents a connection, and modifies it.\n   | `max-frame-payload`  | maximum allowable frame payload length, in bytes, defaults to `65536`.\n   | `max-frame-size`     | maximum aggregate message size, in bytes, defaults to `1048576`.\n   | `allow-extensions?`  | if true, allows extensions to the WebSocket protocol, defaults to `false`.\n   | `heartbeats`         | optional configuration to send Ping frames to the client periodically (if the connection is idle), configuration keys are `:send-after-idle` (in milliseconds), `:payload` (optional, empty uses empty frame by default) and `:timeout` (optional, to close the connection if Pong is not received after specified timeout).", RT.keyword(null, "line"), Integer.valueOf(241), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http.clj" });
    const__55 = (Var)RT.var("aleph.http", "websocket-ping");
    const__58 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "conn")), Tuple.create(Symbol.intern(null, "conn"), Symbol.intern(null, "d'")), Tuple.create(Symbol.intern(null, "conn"), Symbol.intern(null, "d'"), Symbol.intern(null, "data")) })), RT.keyword(null, "doc"), "Takes a websocket endpoint (either client or server) and returns a deferred that will\n   yield true whenever the PONG comes back, or false if the connection is closed. Subsequent\n   PINGs are supressed to avoid ambiguity in a way that the next PONG trigger all pending PINGs.", RT.keyword(null, "line"), Integer.valueOf(261), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http.clj" });
    const__59 = (Var)RT.var("aleph.http", "websocket-close!");
    const__62 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "conn")), Tuple.create(Symbol.intern(null, "conn"), Symbol.intern(null, "status-code")), Tuple.create(Symbol.intern(null, "conn"), Symbol.intern(null, "status-code"), Symbol.intern(null, "reason-text")), Tuple.create(Symbol.intern(null, "conn"), Symbol.intern(null, "status-code"), Symbol.intern(null, "reason-text"), Symbol.intern(null, "deferred")) })), RT.keyword(null, "doc"), "Closes given websocket endpoint (either client or server) sending Close frame with provided\n   status code and reason text. Returns a deferred that will yield `true` whenever the closing\n   handshake was initiated with given params or `false` if the connection was already closed.\n   Note, that for the server closes the connection right after Close frame was flushed but the\n   client waits for the connection to be closed by the server (no longer than close handshake\n   timeout, see websocket connection configuration for more details).", RT.keyword(null, "line"), Integer.valueOf(272), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http.clj" });
    const__63 = (Var)RT.var("aleph.http", "req");
    const__66 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "method"), Symbol.intern(null, "url")), Tuple.create(Symbol.intern(null, "method"), Symbol.intern(null, "url"), Symbol.intern(null, "options")) })), RT.keyword(null, "line"), Integer.valueOf(402), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http.clj" });
    const__67 = (Var)RT.var("aleph.http", "arglists");
    const__69 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(411), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http.clj" });
    const__70 = (AFn)Tuple.create(Tuple.create(Symbol.intern(null, "url")), Tuple.create(Symbol.intern(null, "url"), RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "pool"), Symbol.intern(null, "middleware"), Symbol.intern(null, "headers"), Symbol.intern(null, "body"), Symbol.intern(null, "multipart")), RT.keyword(null, "or"), RT.map(new Object[] { Symbol.intern(null, "pool"), Symbol.intern(null, "default-connection-pool"), Symbol.intern(null, "middleware"), Symbol.intern(null, "identity") }), RT.keyword(null, "as"), Symbol.intern(null, "options") })));
    const__71 = (Var)RT.var("aleph.http", "def-http-method");
    const__74 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "method")) })), RT.keyword(null, "line"), Integer.valueOf(419), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http.clj" });
    const__75 = (Var)RT.var("aleph.http", "get");
    const__77 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(435), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http.clj" });
    const__78 = (Var)RT.var("clojure.core", "partial");
    const__79 = (Keyword)RT.keyword(null, "get");
    const__80 = (Var)RT.var("clojure.core", "alter-meta!");
    const__81 = (Var)RT.var("clojure.core", "resolve");
    const__82 = (AFn)Symbol.intern(null, "get");
    const__83 = (Var)RT.var("clojure.core", "assoc");
    const__84 = (Var)RT.var("aleph.http", "post");
    const__86 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(436), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http.clj" });
    const__87 = (Keyword)RT.keyword(null, "post");
    const__88 = (AFn)Symbol.intern(null, "post");
    const__89 = (Var)RT.var("aleph.http", "put");
    const__91 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(437), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http.clj" });
    const__92 = (Keyword)RT.keyword(null, "put");
    const__93 = (AFn)Symbol.intern(null, "put");
    const__94 = (Var)RT.var("aleph.http", "patch");
    const__96 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(438), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http.clj" });
    const__97 = (Keyword)RT.keyword(null, "patch");
    const__98 = (AFn)Symbol.intern(null, "patch");
    const__99 = (Var)RT.var("aleph.http", "options");
  }
  
  public static void __init1() {
    const__101 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(439), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http.clj" });
    const__102 = (Keyword)RT.keyword(null, "options");
    const__103 = (AFn)Symbol.intern(null, "options");
    const__104 = (Var)RT.var("aleph.http", "trace");
    const__106 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(440), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http.clj" });
    const__107 = (Keyword)RT.keyword(null, "trace");
    const__108 = (AFn)Symbol.intern(null, "trace");
    const__109 = (Var)RT.var("aleph.http", "head");
    const__111 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(441), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http.clj" });
    const__112 = (Keyword)RT.keyword(null, "head");
    const__113 = (AFn)Symbol.intern(null, "head");
    const__114 = (Var)RT.var("aleph.http", "delete");
    const__116 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(442), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http.clj" });
    const__117 = (Keyword)RT.keyword(null, "delete");
    const__118 = (AFn)Symbol.intern(null, "delete");
    const__119 = (Var)RT.var("aleph.http", "connect");
    const__121 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(443), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http.clj" });
    const__122 = (Keyword)RT.keyword(null, "connect");
    const__123 = (AFn)Symbol.intern(null, "connect");
    const__124 = (Var)RT.var("aleph.http", "get-all");
    const__127 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "headers")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "aleph.http.core.HeaderMap") })), ((IObj)Symbol.intern(null, "k")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") }))) })), RT.keyword(null, "doc"), "Given a header map from an HTTP request or response, returns a collection of values associated with the key,\n   rather than a comma-delimited string.", RT.keyword(null, "line"), Integer.valueOf(445), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http.clj" });
    const__128 = (Var)RT.var("aleph.http", "wrap-ring-async-handler");
    const__131 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "handler")) })), RT.keyword(null, "doc"), "Converts given asynchronous Ring handler to Aleph-compliant handler.\n\n   More information about asynchronous Ring handlers and middleware:\n   https://www.booleanknot.com/blog/2016/07/15/asynchronous-ring.html", RT.keyword(null, "line"), Integer.valueOf(451), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http.clj" });
    const__132 = (Var)RT.var("aleph.http", "file");
    const__135 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "path")), Tuple.create(Symbol.intern(null, "path"), Symbol.intern(null, "offset"), Symbol.intern(null, "length")), Tuple.create(Symbol.intern(null, "path"), Symbol.intern(null, "offset"), Symbol.intern(null, "length"), Symbol.intern(null, "chunk-size")) })), RT.keyword(null, "doc"), "Specifies a file or a region of the file to be sent over the network.\n   Accepts string path to the file, instance of `java.io.File` or instance of\n   `java.nio.file.Path`.", RT.keyword(null, "line"), Integer.valueOf(462), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http.clj" });
  }
  
  static  {
    __init0();
    __init1();
    Compiler.pushNSandLoader(RT.classForName("aleph.http__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
