package aleph.netty;

import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.IPersistentVector;
import clojure.lang.IReference;
import clojure.lang.ISeq;
import clojure.lang.IType;
import clojure.lang.Keyword;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Var;
import io.netty.channel.Channel;
import java.util.concurrent.locks.Lock;
import manifold.stream.core.IEventSink;
import manifold.stream.core.IEventStream;

public final class ChannelSink implements IReference, IEventSink, IEventStream, IType {
  public final Object coerce_fn;
  
  public final Object downstream_QMARK_;
  
  public final Object ch;
  
  public final Object additional_description;
  
  public final Object lock;
  
  public final Object __closedCallbacks;
  
  public static final Var const__1 = (Var)RT.var("manifold.deferred", "success-deferred");
  
  public static final Var const__4 = (Var)RT.var("aleph.netty", "sink-close-marker");
  
  public static final Keyword const__5 = (Keyword)RT.keyword(null, "else");
  
  public static final Var const__6 = (Var)RT.var("aleph.netty", "write-and-flush");
  
  public static final Var const__7 = (Var)RT.var("manifold.deferred", "catch'");
  
  public static final Var const__9 = (Var)RT.var("manifold.deferred", "chain'-");
  
  public static final Var const__10 = (Var)RT.var("aleph.netty", "wrap-future");
  
  public static final Object const__11 = RT.classForName("java.io.IOException");
  
  public static final Var const__12 = (Var)RT.var("clojure.core", "deref");
  
  public static final Var const__13 = (Var)RT.var("aleph.netty", "close");
  
  public static final Var const__14 = (Var)RT.var("aleph.netty", "channel");
  
  public static final Var const__15 = (Var)RT.var("clojure.core", "merge");
  
  public static final Keyword const__16 = (Keyword)RT.keyword(null, "type");
  
  public static final Keyword const__17 = (Keyword)RT.keyword(null, "closed?");
  
  public static final Var const__18 = (Var)RT.var("clojure.core", "not");
  
  public static final Keyword const__19 = (Keyword)RT.keyword(null, "sink?");
  
  public static final Keyword const__20 = (Keyword)RT.keyword(null, "connection");
  
  public static final Var const__21 = (Var)RT.var("clojure.core", "assoc");
  
  public static final Var const__22 = (Var)RT.var("aleph.netty", "connection-stats");
  
  public static final Keyword const__23 = (Keyword)RT.keyword(null, "direction");
  
  public static final Keyword const__24 = (Keyword)RT.keyword(null, "outbound");
  
  public static final Var const__25 = (Var)RT.var("clojure.core", "apply"), const__26 = (Var)RT.var("manifold.stream.graph", "downstream"), const__27 = (Var)RT.var("manifold.utils", "invoke-callbacks");
  
  public ChannelSink(Object paramObject1, Object paramObject2, Object paramObject3, Object paramObject4, Object paramObject5, Object paramObject6, Object paramObject7, Object paramObject8, Object paramObject9) { this.coerce_fn = paramObject1;
    this.downstream_QMARK_ = paramObject2;
    this.ch = paramObject3;
    this.additional_description = paramObject4;
    this.lock = paramObject5;
    this.__mta = paramObject6;
    this.__isClosed = paramObject7;
    this.__closedCallbacks = paramObject8;
    this.__weakHandle = paramObject9; }
  
  public static IPersistentVector getBasis() { return RT.vector(new Object[] { Symbol.intern(null, "coerce-fn"), Symbol.intern(null, "downstream?"), ((IObj)Symbol.intern(null, "ch")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Channel") })), Symbol.intern(null, "additional-description"), Symbol.intern(null, "lock"), ((IObj)Symbol.intern(null, "__mta")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "volatile-mutable"), Boolean.TRUE })), ((IObj)Symbol.intern(null, "__isClosed")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "volatile-mutable"), Boolean.TRUE })), ((IObj)Symbol.intern(null, "__closedCallbacks")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "java.util.LinkedList") })), ((IObj)Symbol.intern(null, "__weakHandle")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "volatile-mutable"), Boolean.TRUE })) }); }
  
  public Object onClosed(Object callback__15724__auto__) { // Byte code:
    //   0: aload_0
    //   1: getfield lock : Ljava/lang/Object;
    //   4: astore_2
    //   5: aload_2
    //   6: checkcast java/util/concurrent/locks/Lock
    //   9: invokeinterface lock : ()V
    //   14: aconst_null
    //   15: pop
    //   16: aload_0
    //   17: getfield __isClosed : Ljava/lang/Object;
    //   20: dup
    //   21: ifnull -> 44
    //   24: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   27: if_acmpeq -> 45
    //   30: aload_1
    //   31: aconst_null
    //   32: astore_1
    //   33: checkcast clojure/lang/IFn
    //   36: invokeinterface invoke : ()Ljava/lang/Object;
    //   41: goto -> 70
    //   44: pop
    //   45: aload_0
    //   46: getfield __closedCallbacks : Ljava/lang/Object;
    //   49: checkcast java/util/LinkedList
    //   52: aload_1
    //   53: aconst_null
    //   54: astore_1
    //   55: invokevirtual add : (Ljava/lang/Object;)Z
    //   58: ifeq -> 67
    //   61: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   64: goto -> 70
    //   67: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   70: astore_3
    //   71: aload_2
    //   72: aconst_null
    //   73: astore_2
    //   74: checkcast java/util/concurrent/locks/Lock
    //   77: invokeinterface unlock : ()V
    //   82: aconst_null
    //   83: pop
    //   84: goto -> 105
    //   87: astore #4
    //   89: aload_2
    //   90: aconst_null
    //   91: astore_2
    //   92: checkcast java/util/concurrent/locks/Lock
    //   95: invokeinterface unlock : ()V
    //   100: aconst_null
    //   101: pop
    //   102: aload #4
    //   104: athrow
    //   105: aload_3
    //   106: areturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #402	-> 0
    //   #402	-> 9
    //   #402	-> 16
    //   #402	-> 33
    //   #402	-> 36
    //   #402	-> 55
    //   #402	-> 77
    //   #402	-> 95
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   5	101	2	lock__14923__auto__27755	Ljava/lang/Object;
    //   0	106	0	this	Laleph/netty/ChannelSink;
    //   0	106	1	callback__15724__auto__	Ljava/lang/Object;
    // Exception table:
    //   from	to	target	type
    //   16	71	87	finally }
  
  public Object markClosed() {
    Object object;
    lock__14923__auto__27756 = this.lock;
    ((Lock)lock__14923__auto__27756).lock();
    null;
    try {
      this.__isClosed = Boolean.TRUE;
      object = ((IFn)const__27.getRawRoot()).invoke(this.__closedCallbacks);
    } finally {
      lock__14923__auto__27756 = null;
      ((Lock)lock__14923__auto__27756).unlock();
      null;
    } 
    return object;
  }
  
  public Object put(Object msg, Object blocking_QMARK_, Object timeout, Object timeout_value) { msg = null;
    blocking_QMARK_ = null;
    return ((IEventSink)this).put(msg, blocking_QMARK_); }
  
  public Object isClosed() { return this.__isClosed; }
  
  public Object downstream() { this = null;
    return ((IFn)const__26.getRawRoot()).invoke(this); }
  
  public IPersistentMap alterMeta(IFn f__15719__auto__, ISeq args__15720__auto__) {
    Object lock__14925__auto__27758 = this.lock;
    ((Lock)lock__14925__auto__27758).lock();
    null;
    f__15719__auto__ = null;
    args__15720__auto__ = null;
    Object x__14926__auto__27757 = this.__mta = ((IFn)const__25.getRawRoot()).invoke(f__15719__auto__, this.__mta, args__15720__auto__);
    lock__14925__auto__27758 = null;
    ((Lock)lock__14925__auto__27758).unlock();
    null;
    x__14926__auto__27757 = null;
    return (IPersistentMap)x__14926__auto__27757;
  }
  
  public Object description() {
    Object ch = ((IFn)const__14.getRawRoot()).invoke(this.ch);
    new Object[8][0] = const__16;
    new Object[8][1] = "netty";
    new Object[8][2] = const__17;
    new Object[8][3] = ((IFn)const__18.getRawRoot()).invoke(((Channel)ch).isActive() ? Boolean.TRUE : Boolean.FALSE);
    new Object[8][4] = const__19;
    new Object[8][5] = Boolean.TRUE;
    new Object[8][6] = const__20;
    ch = null;
    this = null;
    return ((IFn)const__15.getRawRoot()).invoke(RT.mapUniqueKeys(new Object[] { null, null, null, null, null, null, null, ((IFn)const__21.getRawRoot()).invoke(((IFn)const__22.getRawRoot()).invoke(ch, Boolean.FALSE), const__23, const__24) }), ((IFn)this.additional_description).invoke());
  }
  
  public Object isSynchronous() { return Boolean.FALSE; }
  
  public Object close() {
    if (this.downstream_QMARK_ != null) {
      if (this.downstream_QMARK_ != Boolean.FALSE) {
        ((IFn)const__13.getRawRoot()).invoke(this.ch);
        ((IEventSink)this).markClosed();
        return Boolean.TRUE;
      } 
    } else {
      this.downstream_QMARK_;
    } 
    null;
    ((IEventSink)this).markClosed();
    return Boolean.TRUE;
  }
  
  public IPersistentMap resetMeta(IPersistentMap m__15718__auto__) {
    Object lock__14925__auto__27760 = this.lock;
    ((Lock)lock__14925__auto__27760).lock();
    null;
    Object x__14926__auto__27759 = this.__mta = m__15718__auto__ = null;
    lock__14925__auto__27760 = null;
    ((Lock)lock__14925__auto__27760).unlock();
    null;
    x__14926__auto__27759 = null;
    return (IPersistentMap)x__14926__auto__27759;
  }
  
  public IPersistentMap meta() { return (IPersistentMap)this.__mta; }
  
  public Object weakHandle(Object ref_queue__15722__auto__) { // Byte code:
    //   0: aload_0
    //   1: getfield lock : Ljava/lang/Object;
    //   4: astore_2
    //   5: aload_2
    //   6: checkcast java/util/concurrent/locks/Lock
    //   9: invokeinterface lock : ()V
    //   14: aconst_null
    //   15: pop
    //   16: aload_0
    //   17: getfield __weakHandle : Ljava/lang/Object;
    //   20: astore_3
    //   21: aload_3
    //   22: dup
    //   23: ifnull -> 38
    //   26: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   29: if_acmpeq -> 39
    //   32: aload_3
    //   33: aconst_null
    //   34: astore_3
    //   35: goto -> 61
    //   38: pop
    //   39: aload_0
    //   40: new java/lang/ref/WeakReference
    //   43: dup
    //   44: aload_0
    //   45: aload_1
    //   46: aconst_null
    //   47: astore_1
    //   48: checkcast java/lang/ref/ReferenceQueue
    //   51: invokespecial <init> : (Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;)V
    //   54: putfield __weakHandle : Ljava/lang/Object;
    //   57: aload_0
    //   58: getfield __weakHandle : Ljava/lang/Object;
    //   61: astore #4
    //   63: aload_2
    //   64: aconst_null
    //   65: astore_2
    //   66: checkcast java/util/concurrent/locks/Lock
    //   69: invokeinterface unlock : ()V
    //   74: aconst_null
    //   75: pop
    //   76: goto -> 97
    //   79: astore #5
    //   81: aload_2
    //   82: aconst_null
    //   83: astore_2
    //   84: checkcast java/util/concurrent/locks/Lock
    //   87: invokeinterface unlock : ()V
    //   92: aconst_null
    //   93: pop
    //   94: aload #5
    //   96: athrow
    //   97: aload #4
    //   99: areturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #402	-> 0
    //   #402	-> 9
    //   #402	-> 21
    //   #402	-> 69
    //   #402	-> 87
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   21	40	3	or__5516__auto__27761	Ljava/lang/Object;
    //   5	94	2	lock__14923__auto__27762	Ljava/lang/Object;
    //   0	99	0	this	Laleph/netty/ChannelSink;
    //   0	99	1	ref_queue__15722__auto__	Ljava/lang/Object;
    // Exception table:
    //   from	to	target	type
    //   16	63	79	finally }
  
  public Object put(Object msg, Object blocking_QMARK_) { // Byte code:
    //   0: aload_0
    //   1: checkcast manifold/stream/core/IEventSink
    //   4: invokeinterface isClosed : ()Ljava/lang/Object;
    //   9: dup
    //   10: ifnull -> 61
    //   13: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   16: if_acmpeq -> 62
    //   19: aload_2
    //   20: aconst_null
    //   21: astore_2
    //   22: dup
    //   23: ifnull -> 38
    //   26: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   29: if_acmpeq -> 39
    //   32: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   35: goto -> 58
    //   38: pop
    //   39: getstatic aleph/netty/ChannelSink.const__1 : Lclojure/lang/Var;
    //   42: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   45: checkcast clojure/lang/IFn
    //   48: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   51: aconst_null
    //   52: astore_0
    //   53: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   58: goto -> 313
    //   61: pop
    //   62: new aleph/netty/ChannelSink$fn__27746
    //   65: dup
    //   66: aload_0
    //   67: getfield ch : Ljava/lang/Object;
    //   70: aload_1
    //   71: aconst_null
    //   72: astore_1
    //   73: aload_0
    //   74: getfield coerce_fn : Ljava/lang/Object;
    //   77: invokespecial <init> : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
    //   80: checkcast clojure/lang/IFn
    //   83: invokeinterface invoke : ()Ljava/lang/Object;
    //   88: astore_3
    //   89: aload_3
    //   90: aconst_null
    //   91: invokestatic identical : (Ljava/lang/Object;Ljava/lang/Object;)Z
    //   94: ifeq -> 118
    //   97: getstatic aleph/netty/ChannelSink.const__1 : Lclojure/lang/Var;
    //   100: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   103: checkcast clojure/lang/IFn
    //   106: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   109: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   114: goto -> 268
    //   117: athrow
    //   118: getstatic aleph/netty/ChannelSink.const__4 : Lclojure/lang/Var;
    //   121: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   124: aload_3
    //   125: invokestatic identical : (Ljava/lang/Object;Ljava/lang/Object;)Z
    //   128: ifeq -> 162
    //   131: aload_0
    //   132: checkcast manifold/stream/core/IEventSink
    //   135: invokeinterface markClosed : ()Ljava/lang/Object;
    //   140: pop
    //   141: getstatic aleph/netty/ChannelSink.const__1 : Lclojure/lang/Var;
    //   144: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   147: checkcast clojure/lang/IFn
    //   150: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   153: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   158: goto -> 268
    //   161: athrow
    //   162: getstatic aleph/netty/ChannelSink.const__5 : Lclojure/lang/Keyword;
    //   165: dup
    //   166: ifnull -> 266
    //   169: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   172: if_acmpeq -> 267
    //   175: getstatic aleph/netty/ChannelSink.const__6 : Lclojure/lang/Var;
    //   178: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   181: checkcast clojure/lang/IFn
    //   184: aload_0
    //   185: getfield ch : Ljava/lang/Object;
    //   188: aload_3
    //   189: aconst_null
    //   190: astore_3
    //   191: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   196: astore #4
    //   198: getstatic aleph/netty/ChannelSink.const__7 : Lclojure/lang/Var;
    //   201: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   204: checkcast clojure/lang/IFn
    //   207: getstatic aleph/netty/ChannelSink.const__9 : Lclojure/lang/Var;
    //   210: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   213: checkcast clojure/lang/IFn
    //   216: aconst_null
    //   217: getstatic aleph/netty/ChannelSink.const__10 : Lclojure/lang/Var;
    //   220: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   223: checkcast clojure/lang/IFn
    //   226: aload #4
    //   228: aconst_null
    //   229: astore #4
    //   231: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   236: new aleph/netty/ChannelSink$fn__27750
    //   239: dup
    //   240: invokespecial <init> : ()V
    //   243: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   248: getstatic aleph/netty/ChannelSink.const__11 : Ljava/lang/Object;
    //   251: new aleph/netty/ChannelSink$fn__27752
    //   254: dup
    //   255: invokespecial <init> : ()V
    //   258: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   263: goto -> 268
    //   266: pop
    //   267: aconst_null
    //   268: astore #4
    //   270: aload_2
    //   271: aconst_null
    //   272: astore_2
    //   273: dup
    //   274: ifnull -> 307
    //   277: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   280: if_acmpeq -> 308
    //   283: getstatic aleph/netty/ChannelSink.const__12 : Lclojure/lang/Var;
    //   286: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   289: checkcast clojure/lang/IFn
    //   292: aload #4
    //   294: aconst_null
    //   295: astore #4
    //   297: aconst_null
    //   298: astore_0
    //   299: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   304: goto -> 313
    //   307: pop
    //   308: aload #4
    //   310: aconst_null
    //   311: astore #4
    //   313: areturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #402	-> 0
    //   #424	-> 0
    //   #424	-> 4
    //   #425	-> 19
    //   #427	-> 45
    //   #427	-> 51
    //   #428	-> 80
    //   #428	-> 83
    //   #436	-> 89
    //   #437	-> 91
    //   #438	-> 103
    //   #438	-> 109
    //   #436	-> 118
    //   #440	-> 125
    //   #442	-> 135
    //   #443	-> 147
    //   #443	-> 153
    //   #436	-> 162
    //   #446	-> 181
    //   #446	-> 191
    //   #450	-> 204
    //   #449	-> 213
    //   #449	-> 223
    //   #449	-> 231
    //   #449	-> 243
    //   #450	-> 258
    //   #451	-> 270
    //   #451	-> 289
    //   #451	-> 297
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   198	65	4	f	Ljava/lang/Object;
    //   89	224	3	msg	Ljava/lang/Object;
    //   270	43	4	d	Ljava/lang/Object;
    //   0	313	0	this	Laleph/netty/ChannelSink;
    //   0	313	1	msg	Ljava/lang/Object;
    //   0	313	2	blocking_QMARK_	Ljava/lang/Object; }
}
