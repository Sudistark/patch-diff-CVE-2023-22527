import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class primitive_math__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final Keyword const__5;
  
  public static final Keyword const__7;
  
  public static final Keyword const__8;
  
  public static final Keyword const__10;
  
  public static final Object const__11;
  
  public static final Keyword const__12;
  
  public static final AFn const__13;
  
  public static final Var const__14;
  
  public static final AFn const__17;
  
  public static final Var const__19;
  
  public static final AFn const__22;
  
  public static final Var const__23;
  
  public static final AFn const__26;
  
  public static final Var const__27;
  
  public static final AFn const__30;
  
  public static final Var const__31;
  
  public static final AFn const__34;
  
  public static final Var const__35;
  
  public static final AFn const__38;
  
  public static final Var const__39;
  
  public static final AFn const__42;
  
  public static final Var const__43;
  
  public static final AFn const__46;
  
  public static final Var const__47;
  
  public static final AFn const__50;
  
  public static final Var const__51;
  
  public static final AFn const__54;
  
  public static final Var const__55;
  
  public static final AFn const__58;
  
  public static final Var const__59;
  
  public static final AFn const__62;
  
  public static final Var const__63;
  
  public static final AFn const__66;
  
  public static final Var const__67;
  
  public static final AFn const__70;
  
  public static final Var const__72;
  
  public static final AFn const__75;
  
  public static final Var const__76;
  
  public static final AFn const__79;
  
  public static final Var const__80;
  
  public static final AFn const__83;
  
  public static final Var const__84;
  
  public static final AFn const__87;
  
  public static final Var const__88;
  
  public static final AFn const__91;
  
  public static final Var const__92;
  
  public static final AFn const__95;
  
  public static final Var const__96;
  
  public static final AFn const__99;
  
  public static final Var const__100;
  
  public static final AFn const__103;
  
  public static final Var const__104;
  
  public static final AFn const__107;
  
  public static final Var const__108;
  
  public static final AFn const__111;
  
  public static final Var const__112;
  
  public static final AFn const__115;
  
  public static final Var const__116;
  
  public static final AFn const__119;
  
  public static final Var const__120;
  
  public static final AFn const__123;
  
  public static final Var const__124;
  
  public static final AFn const__127;
  
  public static final Var const__128;
  
  public static final AFn const__131;
  
  public static final Var const__132;
  
  public static final AFn const__135;
  
  public static final Var const__136;
  
  public static final AFn const__140;
  
  public static final Var const__141;
  
  public static final AFn const__144;
  
  public static final Var const__145;
  
  public static final AFn const__148;
  
  public static final Var const__149;
  
  public static final AFn const__152;
  
  public static final Var const__153;
  
  public static final AFn const__156;
  
  public static final Var const__157;
  
  public static final AFn const__159;
  
  public static final AFn const__160;
  
  public static final Var const__161;
  
  public static final AFn const__164;
  
  public static final Var const__165;
  
  public static final AFn const__168;
  
  public static final Var const__169;
  
  public static final AFn const__172;
  
  public static final Var const__173;
  
  public static final AFn const__176;
  
  public static final Var const__177;
  
  public static final Object const__178;
  
  public static final Keyword const__179;
  
  public static final Object const__180;
  
  public static final Var const__181;
  
  public static final Object const__182;
  
  public static final Object const__183;
  
  public static final Var const__184;
  
  public static final Object const__185;
  
  public static final Object const__186;
  
  public static final Var const__187;
  
  public static final Object const__188;
  
  public static final Object const__189;
  
  public static final Var const__190;
  
  public static final Object const__191;
  
  public static final Object const__192;
  
  public static final Var const__193;
  
  public static final Object const__194;
  
  public static final Object const__195;
  
  public static final Var const__196;
  
  public static final Object const__197;
  
  public static final Object const__198;
  
  public static final Var const__199;
  
  public static final Object const__200;
  
  public static final Object const__201;
  
  public static final Var const__202;
  
  public static final Object const__203;
  
  public static final Object const__204;
  
  public static final Var const__205;
  
  public static final Object const__206;
  
  public static final Object const__207;
  
  public static final Var const__208;
  
  public static final Object const__209;
  
  public static final Object const__210;
  
  public static final Var const__211;
  
  public static final Object const__212;
  
  public static final Object const__213;
  
  public static final Var const__214;
  
  public static final AFn const__217;
  
  public static final Var const__218;
  
  public static final Keyword const__219;
  
  public static final Object const__220;
  
  public static final Object const__221;
  
  public static final Var const__222;
  
  public static final Object const__223;
  
  public static final Object const__224;
  
  public static final Var const__225;
  
  public static final Object const__226;
  
  public static final Object const__227;
  
  public static final Var const__228;
  
  public static final Object const__229;
  
  public static final Object const__230;
  
  public static final Var const__231;
  
  public static final Object const__232;
  
  public static final Object const__233;
  
  public static final Var const__234;
  
  public static final Object const__235;
  
  public static final Object const__236;
  
  public static final Var const__237;
  
  public static final Object const__238;
  
  public static final Object const__239;
  
  public static final Var const__240;
  
  public static final Object const__241;
  
  public static final Object const__242;
  
  public static final Var const__243;
  
  public static final Object const__244;
  
  public static final Object const__245;
  
  public static final Var const__246;
  
  public static final Object const__247;
  
  public static final Object const__248;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new primitive_math.fn__17611());
    const__3.setMeta((IPersistentMap)const__13);
    const__3.bindRoot(new primitive_math.variadic_proxy());
    ((Var)const__3)







      
      .setMacro();
    const__14.setMeta((IPersistentMap)const__17);
    const__14.bindRoot(new primitive_math.variadic_predicate_proxy());
    ((Var)const__14)















      
      .setMacro();
    const__19.setMeta((IPersistentMap)const__22);
    const__19.bindRoot(new primitive_math._PLUS_());
    ((Var)const__19)















      
      .setMacro();
    const__23.setMeta((IPersistentMap)const__26);
    const__23.bindRoot(new primitive_math._());
    ((Var)const__23)
      .setMacro();
    const__27.setMeta((IPersistentMap)const__30);
    const__27.bindRoot(new primitive_math._STAR_());
    ((Var)const__27)
      .setMacro();
    const__31.setMeta((IPersistentMap)const__34);
    const__31.bindRoot(new primitive_math._SLASH_());
    ((Var)const__31)
      .setMacro();
    const__35.setMeta((IPersistentMap)const__38);
    const__35.bindRoot(new primitive_math.div());
    ((Var)const__35)
      .setMacro();
    const__39.setMeta((IPersistentMap)const__42);
    const__39.bindRoot(new primitive_math.bit_and());
    ((Var)const__39)
      .setMacro();
    const__43.setMeta((IPersistentMap)const__46);
    const__43.bindRoot(new primitive_math.bit_or());
    ((Var)const__43)
      .setMacro();
    const__47.setMeta((IPersistentMap)const__50);
    const__47.bindRoot(new primitive_math.bit_xor());
    ((Var)const__47)
      .setMacro();
    const__51.setMeta((IPersistentMap)const__54);
    const__51.bindRoot(new primitive_math.bool_and());
    ((Var)const__51)
      .setMacro();
    const__55.setMeta((IPersistentMap)const__58);
    const__55.bindRoot(new primitive_math.bool_or());
    ((Var)const__55)
      .setMacro();
    const__59.setMeta((IPersistentMap)const__62);
    const__59.bindRoot(new primitive_math.bool_xor());
    ((Var)const__59)
      .setMacro();
    const__63.setMeta((IPersistentMap)const__66);
    const__63.bindRoot(new primitive_math.min());
    ((Var)const__63)
      .setMacro();
    const__67.setMeta((IPersistentMap)const__70);
    const__67.bindRoot(new primitive_math.max());
    ((Var)const__67)
      .setMacro();
    const__72.setMeta((IPersistentMap)const__75);
    const__72.bindRoot(new primitive_math._GT_());
    ((Var)const__72)
      
      .setMacro();
    const__76.setMeta((IPersistentMap)const__79);
    const__76.bindRoot(new primitive_math._LT_());
    ((Var)const__76)
      .setMacro();
    const__80.setMeta((IPersistentMap)const__83);
    const__80.bindRoot(new primitive_math._LT__EQ_());
    ((Var)const__80)
      .setMacro();
    const__84.setMeta((IPersistentMap)const__87);
    const__84.bindRoot(new primitive_math._GT__EQ_());
    ((Var)const__84)
      .setMacro();
    const__88.setMeta((IPersistentMap)const__91);
    const__88.bindRoot(new primitive_math._EQ__EQ_());
    ((Var)const__88)
      .setMacro();
    const__92.setMeta((IPersistentMap)const__95);
    const__92.bindRoot(new primitive_math.not_EQ__EQ_());
    ((Var)const__92)
      .setMacro();
    const__96.setMeta((IPersistentMap)const__99);
    const__96.bindRoot(new primitive_math.inc());
    ((Var)const__96)
      
      .setMacro();
    const__100.setMeta((IPersistentMap)const__103);
    const__100.bindRoot(new primitive_math.dec());
    ((Var)const__100)



      
      .setMacro();
    const__104.setMeta((IPersistentMap)const__107);
    const__104.bindRoot(new primitive_math.rem());
    ((Var)const__104)



      
      .setMacro();
    const__108.setMeta((IPersistentMap)const__111);
    const__108.bindRoot(new primitive_math.zero_QMARK_());
    ((Var)const__108)



      
      .setMacro();
    const__112.setMeta((IPersistentMap)const__115);
    const__112.bindRoot(new primitive_math.bool_not());
    ((Var)const__112)



      
      .setMacro();
    const__116.setMeta((IPersistentMap)const__119);
    const__116.bindRoot(new primitive_math.bit_not());
    ((Var)const__116)



      
      .setMacro();
    const__120.setMeta((IPersistentMap)const__123);
    const__120.bindRoot(new primitive_math.true_QMARK_());
    ((Var)const__120)



      
      .setMacro();
    const__124.setMeta((IPersistentMap)const__127);
    const__124.bindRoot(new primitive_math.false_QMARK_());
    ((Var)const__124)



      
      .setMacro();
    const__128.setMeta((IPersistentMap)const__131);
    const__128.bindRoot(new primitive_math.bit_shift_left());
    ((Var)const__128)



      
      .setMacro();
    const__132.setMeta((IPersistentMap)const__135);
    const__132.bindRoot(new primitive_math.bit_shift_right());
    ((Var)const__132)



      
      .setMacro();
    const__136.setMeta((IPersistentMap)const__140);
    const__136.bindRoot(new primitive_math.bit_unsigned_shift_right());
    ((Var)const__136)





      
      .setMacro();
    const__141.setMeta((IPersistentMap)const__144);
    const__141.bindRoot(new primitive_math.unsigned_bit_shift_right());
    ((Var)const__141)


      
      .setMacro();
    const__145.setMeta((IPersistentMap)const__148);
    const__145.bindRoot(new primitive_math._LT__LT_());
    ((Var)const__145)



      
      .setMacro();
    const__149.setMeta((IPersistentMap)const__152);
    const__149.bindRoot(new primitive_math._GT__GT_());
    ((Var)const__149)



      
      .setMacro();
    const__153.setMeta((IPersistentMap)const__156);
    const__153.bindRoot(new primitive_math._GT__GT__GT_());
    ((Var)const__153)



      
      .setMacro();
    const__157.setMeta((IPersistentMap)const__159);
    const__157.bindRoot(const__160);
    const__161.setMeta((IPersistentMap)const__164);
    const__161.bindRoot(new primitive_math.using_primitive_operators_QMARK_());
    const__165.setMeta((IPersistentMap)const__168);
    const__165.bindRoot(new primitive_math.ns_wrapper());
    const__169.setMeta((IPersistentMap)const__172);
    const__169.bindRoot(new primitive_math.use_primitive_operators());
    const__173.setMeta((IPersistentMap)const__176);
    const__173.bindRoot(new primitive_math.unuse_primitive_operators());
    const__177.setMeta((IPersistentMap)RT.mapUniqueKeys(new Object[] { 
            const__5, const__178, const__7, "Truncates a number to a byte, will not check for overflow.", const__179, new primitive_math.byte__inliner__17718(), const__8, const__180, const__10, const__11, 
            const__12, "primitive_math.clj" }));
    const__177.bindRoot(new primitive_math.byte());
    const__181.setMeta((IPersistentMap)RT.mapUniqueKeys(new Object[] { 
            const__5, const__182, const__7, "Truncates a number to a short, will not check for overflow.", const__179, new primitive_math.short__inliner__17721(), const__8, const__183, const__10, const__11, 
            const__12, "primitive_math.clj" }));
    const__181.bindRoot(new primitive_math.short());
    const__184.setMeta((IPersistentMap)RT.mapUniqueKeys(new Object[] { 
            const__5, const__185, const__7, "Truncates a number to an int, will not check for overflow.", const__179, new primitive_math.int__inliner__17724(), const__8, const__186, const__10, const__11, 
            const__12, "primitive_math.clj" }));
    const__184.bindRoot(new primitive_math.int());
    const__187.setMeta((IPersistentMap)RT.mapUniqueKeys(new Object[] { 
            const__5, const__188, const__7, "Truncates a number to a float, will not check for overflow.", const__179, new primitive_math.float__inliner__17727(), const__8, const__189, const__10, const__11, 
            const__12, "primitive_math.clj" }));
    const__187.bindRoot(new primitive_math.float());
    const__190.setMeta((IPersistentMap)RT.mapUniqueKeys(new Object[] { 
            const__5, const__191, const__7, "Converts a number to a long.", const__179, new primitive_math.long__inliner__17730(), const__8, const__192, const__10, const__11, 
            const__12, "primitive_math.clj" }));
    const__190.bindRoot(new primitive_math.long());
    const__193.setMeta((IPersistentMap)RT.mapUniqueKeys(new Object[] { 
            const__5, const__194, const__7, "Converts a number to a double.", const__179, new primitive_math.double__inliner__17733(), const__8, const__195, const__10, const__11, 
            const__12, "primitive_math.clj" }));
    const__193.bindRoot(new primitive_math.double());
    const__196.setMeta((IPersistentMap)RT.mapUniqueKeys(new Object[] { 
            const__5, const__197, const__7, "Converts a byte to an unsigned byte.", const__179, new primitive_math.byte__GT_ubyte__inliner__17736(), const__8, const__198, const__10, const__11, 
            const__12, "primitive_math.clj" }));
    const__196.bindRoot(new primitive_math.byte__GT_ubyte());
    const__199.setMeta((IPersistentMap)RT.mapUniqueKeys(new Object[] { 
            const__5, const__200, const__7, "Converts an unsigned byte to a byte.", const__179, new primitive_math.ubyte__GT_byte__inliner__17739(), const__8, const__201, const__10, const__11, 
            const__12, "primitive_math.clj" }));
    const__199.bindRoot(new primitive_math.ubyte__GT_byte());
    const__202.setMeta((IPersistentMap)RT.mapUniqueKeys(new Object[] { 
            const__5, const__203, const__7, "Converts a short to an unsigned short.", const__179, new primitive_math.short__GT_ushort__inliner__17742(), const__8, const__204, const__10, const__11, 
            const__12, "primitive_math.clj" }));
    const__202.bindRoot(new primitive_math.short__GT_ushort());
    const__205.setMeta((IPersistentMap)RT.mapUniqueKeys(new Object[] { 
            const__5, const__206, const__7, "Converts an unsigned short to a short.", const__179, new primitive_math.ushort__GT_short__inliner__17745(), const__8, const__207, const__10, const__11, 
            const__12, "primitive_math.clj" }));
    const__205.bindRoot(new primitive_math.ushort__GT_short());
    const__208.setMeta((IPersistentMap)RT.mapUniqueKeys(new Object[] { 
            const__5, const__209, const__7, "Converts an integer to an unsigned integer.", const__179, new primitive_math.int__GT_uint__inliner__17748(), const__8, const__210, const__10, const__11, 
            const__12, "primitive_math.clj" }));
    const__208.bindRoot(new primitive_math.int__GT_uint());
    const__211.setMeta((IPersistentMap)RT.mapUniqueKeys(new Object[] { 
            const__5, const__212, const__7, "Converts an unsigned integer to an integer.", const__179, new primitive_math.uint__GT_int__inliner__17751(), const__8, const__213, const__10, const__11, 
            const__12, "primitive_math.clj" }));
    const__211.bindRoot(new primitive_math.uint__GT_int());
    const__214.setMeta((IPersistentMap)const__217);
    const__214.bindRoot(new primitive_math.long__GT_ulong());
    const__218.setMeta((IPersistentMap)RT.mapUniqueKeys(new Object[] { 
            const__219, const__190.getRawRoot(), const__5, const__220, const__7, "Converts an unsigned long to a long.", const__8, const__221, const__10, const__11, 
            const__12, "primitive_math.clj" }));
    const__218.bindRoot(new primitive_math.ulong__GT_long());
    const__222.setMeta((IPersistentMap)RT.mapUniqueKeys(new Object[] { 
            const__5, const__223, const__7, "Converts a float to an integer.", const__179, new primitive_math.float__GT_int__inliner__17756(), const__8, const__224, const__10, const__11, 
            const__12, "primitive_math.clj" }));
    const__222.bindRoot(new primitive_math.float__GT_int());
    const__225.setMeta((IPersistentMap)RT.mapUniqueKeys(new Object[] { 
            const__5, const__226, const__7, "Converts an integer to a float.", const__179, new primitive_math.int__GT_float__inliner__17759(), const__8, const__227, const__10, const__11, 
            const__12, "primitive_math.clj" }));
    const__225.bindRoot(new primitive_math.int__GT_float());
    const__228.setMeta((IPersistentMap)RT.mapUniqueKeys(new Object[] { 
            const__5, const__229, const__7, "Converts a double to a long.", const__179, new primitive_math.double__GT_long__inliner__17762(), const__8, const__230, const__10, const__11, 
            const__12, "primitive_math.clj" }));
    const__228.bindRoot(new primitive_math.double__GT_long());
    const__231.setMeta((IPersistentMap)RT.mapUniqueKeys(new Object[] { 
            const__5, const__232, const__7, "Converts a long to a double.", const__179, new primitive_math.long__GT_double__inliner__17765(), const__8, const__233, const__10, const__11, 
            const__12, "primitive_math.clj" }));
    const__231.bindRoot(new primitive_math.long__GT_double());
    const__234.setMeta((IPersistentMap)RT.mapUniqueKeys(new Object[] { 
            const__5, const__235, const__7, "Inverts the endianness of a short.", const__179, new primitive_math.reverse_short__inliner__17768(), const__8, const__236, const__10, const__11, 
            const__12, "primitive_math.clj" }));
    const__234.bindRoot(new primitive_math.reverse_short());
    const__237.setMeta((IPersistentMap)RT.mapUniqueKeys(new Object[] { 
            const__5, const__238, const__7, "Inverts the endianness of an int.", const__179, new primitive_math.reverse_int__inliner__17771(), const__8, const__239, const__10, const__11, 
            const__12, "primitive_math.clj" }));
    const__237.bindRoot(new primitive_math.reverse_int());
    const__240.setMeta((IPersistentMap)RT.mapUniqueKeys(new Object[] { 
            const__5, const__241, const__7, "Inverts the endianness of a long.", const__179, new primitive_math.reverse_long__inliner__17774(), const__8, const__242, const__10, const__11, 
            const__12, "primitive_math.clj" }));
    const__240.bindRoot(new primitive_math.reverse_long());
    const__243.setMeta((IPersistentMap)RT.mapUniqueKeys(new Object[] { 
            const__5, const__244, const__7, "Inverts the endianness of a float.", const__179, new primitive_math.reverse_float__inliner__17777(), const__8, const__245, const__10, const__11, 
            const__12, "primitive_math.clj" }));
    const__243.bindRoot(new primitive_math.reverse_float());
    const__246.setMeta((IPersistentMap)RT.mapUniqueKeys(new Object[] { 
            const__5, const__247, const__7, "Inverts the endianness of a double.", const__179, new primitive_math.reverse_double__inliner__17780(), const__8, const__248, const__10, const__11, 
            const__12, "primitive_math.clj" }));
    const__246.bindRoot(new primitive_math.reverse_double());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "primitive-math");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("primitive-math", "variadic-proxy");
    const__5 = (Keyword)RT.keyword(null, "arglists");
    const__7 = (Keyword)RT.keyword(null, "doc");
    const__8 = (Keyword)RT.keyword(null, "line");
    const__10 = (Keyword)RT.keyword(null, "column");
    const__11 = Integer.valueOf(1);
    const__12 = (Keyword)RT.keyword(null, "file");
    const__13 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "name"), Symbol.intern(null, "fn")), Tuple.create(Symbol.intern(null, "name"), Symbol.intern(null, "fn"), Symbol.intern(null, "doc")), Tuple.create(Symbol.intern(null, "name"), Symbol.intern(null, "fn"), Symbol.intern(null, "doc"), Symbol.intern(null, "single-arg-form")) })), RT.keyword(null, "doc"), "Creates left-associative variadic forms for any operator.", RT.keyword(null, "line"), Integer.valueOf(10), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "primitive_math.clj" });
    const__14 = (Var)RT.var("primitive-math", "variadic-predicate-proxy");
    const__17 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "name"), Symbol.intern(null, "fn")), Tuple.create(Symbol.intern(null, "name"), Symbol.intern(null, "fn"), Symbol.intern(null, "doc")), Tuple.create(Symbol.intern(null, "name"), Symbol.intern(null, "fn"), Symbol.intern(null, "doc"), Symbol.intern(null, "single-arg-form")) })), RT.keyword(null, "doc"), "Turns variadic predicates into multiple pair-wise comparisons.", RT.keyword(null, "line"), Integer.valueOf(27), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "primitive_math.clj" });
    const__19 = (Var)RT.var("primitive-math", "+");
    const__22 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x17621")), Tuple.create(Symbol.intern(null, "x__17613__auto__"), Symbol.intern(null, "y__17614__auto__")), Tuple.create(Symbol.intern(null, "x__17613__auto__"), Symbol.intern(null, "y__17614__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__17615__auto__")) })), RT.keyword(null, "doc"), "A primitive macro version of `+`", RT.keyword(null, "line"), Integer.valueOf(44), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "primitive_math.clj" });
    const__23 = (Var)RT.var("primitive-math", "-");
    const__26 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x17623")), Tuple.create(Symbol.intern(null, "x__17613__auto__"), Symbol.intern(null, "y__17614__auto__")), Tuple.create(Symbol.intern(null, "x__17613__auto__"), Symbol.intern(null, "y__17614__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__17615__auto__")) })), RT.keyword(null, "doc"), "A primitive macro version of `-`", RT.keyword(null, "line"), Integer.valueOf(45), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "primitive_math.clj" });
    const__27 = (Var)RT.var("primitive-math", "*");
    const__30 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x17629")), Tuple.create(Symbol.intern(null, "x__17613__auto__"), Symbol.intern(null, "y__17614__auto__")), Tuple.create(Symbol.intern(null, "x__17613__auto__"), Symbol.intern(null, "y__17614__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__17615__auto__")) })), RT.keyword(null, "doc"), "A primitive macro version of `*`", RT.keyword(null, "line"), Integer.valueOf(46), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "primitive_math.clj" });
    const__31 = (Var)RT.var("primitive-math", "/");
    const__34 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x17631")), Tuple.create(Symbol.intern(null, "x__17613__auto__"), Symbol.intern(null, "y__17614__auto__")), Tuple.create(Symbol.intern(null, "x__17613__auto__"), Symbol.intern(null, "y__17614__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__17615__auto__")) })), RT.keyword(null, "doc"), "A primitive macro version of `/`", RT.keyword(null, "line"), Integer.valueOf(47), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "primitive_math.clj" });
    const__35 = (Var)RT.var("primitive-math", "div");
    const__38 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x17633")), Tuple.create(Symbol.intern(null, "x__17613__auto__"), Symbol.intern(null, "y__17614__auto__")), Tuple.create(Symbol.intern(null, "x__17613__auto__"), Symbol.intern(null, "y__17614__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__17615__auto__")) })), RT.keyword(null, "doc"), "A primitive macro version of `div`", RT.keyword(null, "line"), Integer.valueOf(48), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "primitive_math.clj" });
    const__39 = (Var)RT.var("primitive-math", "bit-and");
    const__42 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x17635")), Tuple.create(Symbol.intern(null, "x__17613__auto__"), Symbol.intern(null, "y__17614__auto__")), Tuple.create(Symbol.intern(null, "x__17613__auto__"), Symbol.intern(null, "y__17614__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__17615__auto__")) })), RT.keyword(null, "doc"), "A primitive macro version of `bit-and`", RT.keyword(null, "line"), Integer.valueOf(49), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "primitive_math.clj" });
    const__43 = (Var)RT.var("primitive-math", "bit-or");
    const__46 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x17637")), Tuple.create(Symbol.intern(null, "x__17613__auto__"), Symbol.intern(null, "y__17614__auto__")), Tuple.create(Symbol.intern(null, "x__17613__auto__"), Symbol.intern(null, "y__17614__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__17615__auto__")) })), RT.keyword(null, "doc"), "A primitive macro version of `bit-or`", RT.keyword(null, "line"), Integer.valueOf(50), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "primitive_math.clj" });
    const__47 = (Var)RT.var("primitive-math", "bit-xor");
    const__50 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x17639")), Tuple.create(Symbol.intern(null, "x__17613__auto__"), Symbol.intern(null, "y__17614__auto__")), Tuple.create(Symbol.intern(null, "x__17613__auto__"), Symbol.intern(null, "y__17614__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__17615__auto__")) })), RT.keyword(null, "doc"), "A primitive macro version of `bit-xor`", RT.keyword(null, "line"), Integer.valueOf(51), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "primitive_math.clj" });
    const__51 = (Var)RT.var("primitive-math", "bool-and");
    const__54 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x17641")), Tuple.create(Symbol.intern(null, "x__17613__auto__"), Symbol.intern(null, "y__17614__auto__")), Tuple.create(Symbol.intern(null, "x__17613__auto__"), Symbol.intern(null, "y__17614__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__17615__auto__")) })), RT.keyword(null, "doc"), "A primitive macro version of `bool-and`", RT.keyword(null, "line"), Integer.valueOf(52), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "primitive_math.clj" });
    const__55 = (Var)RT.var("primitive-math", "bool-or");
    const__58 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x17643")), Tuple.create(Symbol.intern(null, "x__17613__auto__"), Symbol.intern(null, "y__17614__auto__")), Tuple.create(Symbol.intern(null, "x__17613__auto__"), Symbol.intern(null, "y__17614__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__17615__auto__")) })), RT.keyword(null, "doc"), "A primitive macro version of `bool-or`", RT.keyword(null, "line"), Integer.valueOf(53), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "primitive_math.clj" });
    const__59 = (Var)RT.var("primitive-math", "bool-xor");
    const__62 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x17645")), Tuple.create(Symbol.intern(null, "x__17613__auto__"), Symbol.intern(null, "y__17614__auto__")), Tuple.create(Symbol.intern(null, "x__17613__auto__"), Symbol.intern(null, "y__17614__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__17615__auto__")) })), RT.keyword(null, "doc"), "A primitive macro version of `bool-xor`", RT.keyword(null, "line"), Integer.valueOf(54), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "primitive_math.clj" });
    const__63 = (Var)RT.var("primitive-math", "min");
    const__66 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x17647")), Tuple.create(Symbol.intern(null, "x__17613__auto__"), Symbol.intern(null, "y__17614__auto__")), Tuple.create(Symbol.intern(null, "x__17613__auto__"), Symbol.intern(null, "y__17614__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__17615__auto__")) })), RT.keyword(null, "doc"), "A primitive macro version of `min`", RT.keyword(null, "line"), Integer.valueOf(55), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "primitive_math.clj" });
    const__67 = (Var)RT.var("primitive-math", "max");
    const__70 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x17649")), Tuple.create(Symbol.intern(null, "x__17613__auto__"), Symbol.intern(null, "y__17614__auto__")), Tuple.create(Symbol.intern(null, "x__17613__auto__"), Symbol.intern(null, "y__17614__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__17615__auto__")) })), RT.keyword(null, "doc"), "A primitive macro version of `max`", RT.keyword(null, "line"), Integer.valueOf(56), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "primitive_math.clj" });
    const__72 = (Var)RT.var("primitive-math", ">");
    const__75 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x17651")), Tuple.create(Symbol.intern(null, "x__17617__auto__"), Symbol.intern(null, "y__17618__auto__")), Tuple.create(Symbol.intern(null, "x__17617__auto__"), Symbol.intern(null, "y__17618__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__17619__auto__")) })), RT.keyword(null, "doc"), "A primitive macro version of `>`", RT.keyword(null, "line"), Integer.valueOf(58), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "primitive_math.clj" });
    const__76 = (Var)RT.var("primitive-math", "<");
    const__79 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x17655")), Tuple.create(Symbol.intern(null, "x__17617__auto__"), Symbol.intern(null, "y__17618__auto__")), Tuple.create(Symbol.intern(null, "x__17617__auto__"), Symbol.intern(null, "y__17618__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__17619__auto__")) })), RT.keyword(null, "doc"), "A primitive macro version of `<`", RT.keyword(null, "line"), Integer.valueOf(59), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "primitive_math.clj" });
    const__80 = (Var)RT.var("primitive-math", "<=");
    const__83 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x17659")), Tuple.create(Symbol.intern(null, "x__17617__auto__"), Symbol.intern(null, "y__17618__auto__")), Tuple.create(Symbol.intern(null, "x__17617__auto__"), Symbol.intern(null, "y__17618__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__17619__auto__")) })), RT.keyword(null, "doc"), "A primitive macro version of `<=`", RT.keyword(null, "line"), Integer.valueOf(60), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "primitive_math.clj" });
    const__84 = (Var)RT.var("primitive-math", ">=");
    const__87 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x17663")), Tuple.create(Symbol.intern(null, "x__17617__auto__"), Symbol.intern(null, "y__17618__auto__")), Tuple.create(Symbol.intern(null, "x__17617__auto__"), Symbol.intern(null, "y__17618__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__17619__auto__")) })), RT.keyword(null, "doc"), "A primitive macro version of `>=`", RT.keyword(null, "line"), Integer.valueOf(61), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "primitive_math.clj" });
    const__88 = (Var)RT.var("primitive-math", "==");
    const__91 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x17667")), Tuple.create(Symbol.intern(null, "x__17617__auto__"), Symbol.intern(null, "y__17618__auto__")), Tuple.create(Symbol.intern(null, "x__17617__auto__"), Symbol.intern(null, "y__17618__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__17619__auto__")) })), RT.keyword(null, "doc"), "A primitive macro version of `==`", RT.keyword(null, "line"), Integer.valueOf(62), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "primitive_math.clj" });
    const__92 = (Var)RT.var("primitive-math", "not==");
    const__95 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x17671")), Tuple.create(Symbol.intern(null, "x__17617__auto__"), Symbol.intern(null, "y__17618__auto__")), Tuple.create(Symbol.intern(null, "x__17617__auto__"), Symbol.intern(null, "y__17618__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__17619__auto__")) })), RT.keyword(null, "doc"), "A primitive macro complement of `==`", RT.keyword(null, "line"), Integer.valueOf(63), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "primitive_math.clj" });
    const__96 = (Var)RT.var("primitive-math", "inc");
    const__99 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "doc"), "A primitive macro version of `inc`.", RT.keyword(null, "line"), Integer.valueOf(65), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "primitive_math.clj" });
  }
  
  public static void __init1() {
    const__100 = (Var)RT.var("primitive-math", "dec");
    const__103 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "doc"), "A primitive macro version of `dec`.", RT.keyword(null, "line"), Integer.valueOf(70), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "primitive_math.clj" });
    const__104 = (Var)RT.var("primitive-math", "rem");
    const__107 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "n"), Symbol.intern(null, "div")) })), RT.keyword(null, "doc"), "A primitive macro version of `rem`.", RT.keyword(null, "line"), Integer.valueOf(75), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "primitive_math.clj" });
    const__108 = (Var)RT.var("primitive-math", "zero?");
    const__111 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "doc"), "A primitive macro version of `zero?`.", RT.keyword(null, "line"), Integer.valueOf(80), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "primitive_math.clj" });
    const__112 = (Var)RT.var("primitive-math", "bool-not");
    const__115 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "doc"), "A primitive macro version of `not`.", RT.keyword(null, "line"), Integer.valueOf(85), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "primitive_math.clj" });
    const__116 = (Var)RT.var("primitive-math", "bit-not");
    const__119 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "doc"), "A primitive macro version of `bit-not`.", RT.keyword(null, "line"), Integer.valueOf(90), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "primitive_math.clj" });
    const__120 = (Var)RT.var("primitive-math", "true?");
    const__123 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "doc"), "A primitive macro version of `true?`.", RT.keyword(null, "line"), Integer.valueOf(95), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "primitive_math.clj" });
    const__124 = (Var)RT.var("primitive-math", "false?");
    const__127 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "doc"), "A primitive macro version of `false?`.", RT.keyword(null, "line"), Integer.valueOf(100), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "primitive_math.clj" });
    const__128 = (Var)RT.var("primitive-math", "bit-shift-left");
    const__131 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "n"), Symbol.intern(null, "bits")) })), RT.keyword(null, "doc"), "A primitive macro version of `bit-shift-left`.", RT.keyword(null, "line"), Integer.valueOf(105), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "primitive_math.clj" });
    const__132 = (Var)RT.var("primitive-math", "bit-shift-right");
    const__135 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "n"), Symbol.intern(null, "bits")) })), RT.keyword(null, "doc"), "A primitive macro version of `bit-shift-right`.", RT.keyword(null, "line"), Integer.valueOf(110), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "primitive_math.clj" });
    const__136 = (Var)RT.var("primitive-math", "bit-unsigned-shift-right");
    const__140 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "n"), Symbol.intern(null, "bits")) })), RT.keyword(null, "line"), Integer.valueOf(117), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "primitive_math.clj" });
    const__141 = (Var)RT.var("primitive-math", "unsigned-bit-shift-right");
    const__144 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "n"), Symbol.intern(null, "bits")) })), RT.keyword(null, "doc"), "A primitive macro which performs an unsigned right bit-shift.", RT.keyword(null, "line"), Integer.valueOf(121), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "primitive_math.clj" });
    const__145 = (Var)RT.var("primitive-math", "<<");
    const__148 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "n"), Symbol.intern(null, "bits")) })), RT.keyword(null, "doc"), "An alias for `bit-shift-left`.", RT.keyword(null, "line"), Integer.valueOf(126), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "primitive_math.clj" });
    const__149 = (Var)RT.var("primitive-math", ">>");
    const__152 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "n"), Symbol.intern(null, "bits")) })), RT.keyword(null, "doc"), "An alias for `bit-shift-right`.", RT.keyword(null, "line"), Integer.valueOf(131), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "primitive_math.clj" });
    const__153 = (Var)RT.var("primitive-math", ">>>");
    const__156 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "n"), Symbol.intern(null, "bits")) })), RT.keyword(null, "doc"), "An alias for `bit-unsigned-shift-right`.", RT.keyword(null, "line"), Integer.valueOf(136), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "primitive_math.clj" });
    const__157 = (Var)RT.var("primitive-math", "vars-to-exclude");
    const__159 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(143), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "primitive_math.clj" });
    const__160 = (AFn)RT.vector(new Object[] { 
          Symbol.intern(null, "*"), Symbol.intern(null, "+"), Symbol.intern(null, "-"), Symbol.intern(null, "/"), Symbol.intern(null, "<"), Symbol.intern(null, ">"), Symbol.intern(null, "<="), Symbol.intern(null, ">="), Symbol.intern(null, "=="), Symbol.intern(null, "rem"), 
          Symbol.intern(null, "bit-or"), Symbol.intern(null, "bit-and"), Symbol.intern(null, "bit-xor"), Symbol.intern(null, "bit-not"), Symbol.intern(null, "bit-shift-left"), Symbol.intern(null, "bit-shift-right"), Symbol.intern(null, "byte"), Symbol.intern(null, "short"), Symbol.intern(null, "int"), Symbol.intern(null, "float"), 
          Symbol.intern(null, "long"), Symbol.intern(null, "double"), Symbol.intern(null, "inc"), Symbol.intern(null, "dec"), Symbol.intern(null, "zero?"), Symbol.intern(null, "true?"), Symbol.intern(null, "false?"), Symbol.intern(null, "min"), Symbol.intern(null, "max") });
    const__161 = (Var)RT.var("primitive-math", "using-primitive-operators?");
    const__164 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(146), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "primitive_math.clj" });
    const__165 = (Var)RT.var("primitive-math", "ns-wrapper");
    const__168 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f")) })), RT.keyword(null, "doc"), "Makes sure that if a namespace that is using primitive operators is reloaded, it will automatically\n   exclude the shadowed operators in `clojure.core`.", RT.keyword(null, "line"), Integer.valueOf(151), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "primitive_math.clj" });
    const__169 = (Var)RT.var("primitive-math", "use-primitive-operators");
    const__172 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "doc"), "Replaces Clojure's arithmetic and number coercion functions with primitive equivalents.  These are\n   defined as macros, so they cannot be used as higher-order functions.  This is an idempotent operation..", RT.keyword(null, "line"), Integer.valueOf(170), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "primitive_math.clj" });
    const__173 = (Var)RT.var("primitive-math", "unuse-primitive-operators");
    const__176 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "doc"), "Undoes the work of `use-primitive-operators`.  This is idempotent.", RT.keyword(null, "line"), Integer.valueOf(182), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "primitive_math.clj" });
    const__177 = (Var)RT.var("primitive-math", "byte");
    const__178 = PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(((IObj)Symbol.intern(null, "x")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "long") })))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "long") })) }));
    const__179 = (Keyword)RT.keyword(null, "inline");
    const__180 = Integer.valueOf(191);
    const__181 = (Var)RT.var("primitive-math", "short");
    const__182 = PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(((IObj)Symbol.intern(null, "x")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "long") })))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "long") })) }));
    const__183 = Integer.valueOf(197);
    const__184 = (Var)RT.var("primitive-math", "int");
    const__185 = PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(((IObj)Symbol.intern(null, "x")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "long") })))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "long") })) }));
    const__186 = Integer.valueOf(203);
    const__187 = (Var)RT.var("primitive-math", "float");
    const__188 = PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(((IObj)Symbol.intern(null, "x")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "double") })))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "double") })) }));
    const__189 = Integer.valueOf(209);
    const__190 = (Var)RT.var("primitive-math", "long");
    const__191 = PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "x"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "long") })) }));
    const__192 = Integer.valueOf(215);
    const__193 = (Var)RT.var("primitive-math", "double");
    const__194 = PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "x"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "double") })) }));
    const__195 = Integer.valueOf(221);
    const__196 = (Var)RT.var("primitive-math", "byte->ubyte");
    const__197 = PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(((IObj)Symbol.intern(null, "x")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "long") })))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "long") })) }));
    const__198 = Integer.valueOf(227);
    const__199 = (Var)RT.var("primitive-math", "ubyte->byte");
  }
  
  public static void __init2() {
    const__200 = PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(((IObj)Symbol.intern(null, "x")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "long") })))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "long") })) }));
    const__201 = Integer.valueOf(233);
    const__202 = (Var)RT.var("primitive-math", "short->ushort");
    const__203 = PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(((IObj)Symbol.intern(null, "x")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "long") })))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "long") })) }));
    const__204 = Integer.valueOf(239);
    const__205 = (Var)RT.var("primitive-math", "ushort->short");
    const__206 = PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(((IObj)Symbol.intern(null, "x")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "long") })))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "long") })) }));
    const__207 = Integer.valueOf(245);
    const__208 = (Var)RT.var("primitive-math", "int->uint");
    const__209 = PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(((IObj)Symbol.intern(null, "x")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "long") })))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "long") })) }));
    const__210 = Integer.valueOf(251);
    const__211 = (Var)RT.var("primitive-math", "uint->int");
    const__212 = PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(((IObj)Symbol.intern(null, "x")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "long") })))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "long") })) }));
    const__213 = Integer.valueOf(257);
    const__214 = (Var)RT.var("primitive-math", "long->ulong");
    const__217 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "x")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "long") }))) })), RT.keyword(null, "doc"), "Converts a long to an unsigned long.", RT.keyword(null, "line"), Integer.valueOf(263), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "primitive_math.clj" });
    const__218 = (Var)RT.var("primitive-math", "ulong->long");
    const__219 = (Keyword)RT.keyword(null, "tag");
    const__220 = PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "x"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "long") })) }));
    const__221 = Integer.valueOf(269);
    const__222 = (Var)RT.var("primitive-math", "float->int");
    const__223 = PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(((IObj)Symbol.intern(null, "x")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "double") })))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "long") })) }));
    const__224 = Integer.valueOf(274);
    const__225 = (Var)RT.var("primitive-math", "int->float");
    const__226 = PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(((IObj)Symbol.intern(null, "x")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "long") })))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "double") })) }));
    const__227 = Integer.valueOf(280);
    const__228 = (Var)RT.var("primitive-math", "double->long");
    const__229 = PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(((IObj)Symbol.intern(null, "x")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "double") })))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "long") })) }));
    const__230 = Integer.valueOf(286);
    const__231 = (Var)RT.var("primitive-math", "long->double");
    const__232 = PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(((IObj)Symbol.intern(null, "x")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "long") })))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "double") })) }));
    const__233 = Integer.valueOf(292);
    const__234 = (Var)RT.var("primitive-math", "reverse-short");
    const__235 = PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(((IObj)Symbol.intern(null, "x")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "long") })))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "long") })) }));
    const__236 = Integer.valueOf(298);
    const__237 = (Var)RT.var("primitive-math", "reverse-int");
    const__238 = PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(((IObj)Symbol.intern(null, "x")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "long") })))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "long") })) }));
    const__239 = Integer.valueOf(304);
    const__240 = (Var)RT.var("primitive-math", "reverse-long");
    const__241 = PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(((IObj)Symbol.intern(null, "x")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "long") })))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "long") })) }));
    const__242 = Integer.valueOf(310);
    const__243 = (Var)RT.var("primitive-math", "reverse-float");
    const__244 = PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(((IObj)Symbol.intern(null, "x")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "double") })))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "double") })) }));
    const__245 = Integer.valueOf(316);
    const__246 = (Var)RT.var("primitive-math", "reverse-double");
    const__247 = PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(((IObj)Symbol.intern(null, "x")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "double") })))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "double") })) }));
    const__248 = Integer.valueOf(322);
  }
  
  static  {
    __init0();
    __init1();
    __init2();
    Compiler.pushNSandLoader(RT.classForName("primitive_math__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
