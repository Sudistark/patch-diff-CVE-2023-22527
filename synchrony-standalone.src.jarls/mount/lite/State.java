package mount.lite;

import clojure.lang.AFn;
import clojure.lang.APersistentMap;
import clojure.lang.Associative;
import clojure.lang.Counted;
import clojure.lang.IDeref;
import clojure.lang.IFn;
import clojure.lang.IHashEq;
import clojure.lang.IKeywordLookup;
import clojure.lang.ILookup;
import clojure.lang.ILookupThunk;
import clojure.lang.IMapEntry;
import clojure.lang.IObj;
import clojure.lang.IPersistentCollection;
import clojure.lang.IPersistentMap;
import clojure.lang.IPersistentVector;
import clojure.lang.IRecord;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.MapEntry;
import clojure.lang.Numbers;
import clojure.lang.PersistentHashSet;
import clojure.lang.RT;
import clojure.lang.RecordIterator;
import clojure.lang.Reflector;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Util;
import clojure.lang.Var;
import java.io.Serializable;
import java.util.Collection;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

public final class State implements IState, IDeref, IRecord, IHashEq, IObj, ILookup, IKeywordLookup, IPersistentMap, Map, Serializable {
  public final Object start_fn;
  
  public final Object stop_fn;
  
  public final Object name;
  
  public final Object sessions;
  
  public final Object __meta;
  
  public final Object __extmap;
  
  int __hash;
  
  int __hasheq;
  
  private static Class __cached_class__0;
  
  private static Class __cached_class__1;
  
  public static final Var const__0 = (Var)RT.var("clojure.core", "set");
  
  public static final Var const__1 = (Var)RT.var("clojure.core", "vals");
  
  public static final Var const__2 = (Var)RT.var("clojure.core", "keys");
  
  public static final Var const__4 = (Var)RT.var("clojure.core", "some");
  
  public static final Var const__7 = (Var)RT.var("clojure.core", "contains?");
  
  public static final Keyword const__8 = (Keyword)RT.keyword(null, "name");
  
  public static final Keyword const__9 = (Keyword)RT.keyword(null, "stop-fn");
  
  public static final Keyword const__10 = (Keyword)RT.keyword(null, "sessions");
  
  public static final Keyword const__11 = (Keyword)RT.keyword(null, "start-fn");
  
  public static final AFn const__12 = (AFn)PersistentHashSet.create(new Object[] { RT.keyword(null, "name"), RT.keyword(null, "stop-fn"), RT.keyword(null, "sessions"), RT.keyword(null, "start-fn") });
  
  public static final Var const__13 = (Var)RT.var("clojure.core", "dissoc");
  
  public static final Var const__14 = (Var)RT.var("clojure.core", "with-meta");
  
  public static final Var const__15 = (Var)RT.var("clojure.core", "into");
  
  public static final Var const__16 = (Var)RT.var("clojure.core", "not-empty");
  
  public static final Var const__17 = (Var)RT.var("clojure.core", "identical?");
  
  public static final Var const__18 = (Var)RT.var("clojure.core", "assoc");
  
  public static final AFn const__19 = (AFn)Tuple.create(RT.keyword(null, "start-fn"), RT.keyword(null, "stop-fn"), RT.keyword(null, "name"), RT.keyword(null, "sessions"));
  
  public static final Var const__20 = (Var)RT.var("clojure.core", "seq");
  
  public static final Var const__21 = (Var)RT.var("clojure.core", "concat");
  
  public static final Var const__22 = (Var)RT.var("clojure.core", "not");
  
  public static final Var const__23 = (Var)RT.var("clojure.core", "class");
  
  public static final Var const__24 = (Var)RT.var("clojure.core", "imap-cons");
  
  public static final Var const__25 = (Var)RT.var("clojure.core", "str");
  
  public static final Keyword const__34 = (Keyword)RT.keyword(null, "stopped");
  
  public static final Var const__35 = (Var)RT.var("mount.lite", "status*");
  
  public static final Var const__36 = (Var)RT.var("clojure.core", "swap!");
  
  public static final Var const__37 = (Var)RT.var("mount.lite", "itl");
  
  public static final Keyword const__38 = (Keyword)RT.keyword("mount.lite", "value");
  
  public static final Var const__39 = (Var)RT.var("mount.lite", "throw-started");
  
  public static final Var const__40 = (Var)RT.var("clojure.core", "deref");
  
  public static final Var const__41 = (Var)RT.var("clojure.core", "get-in");
  
  public static final Keyword const__42 = (Keyword)RT.keyword(null, "started");
  
  public static final Var const__43 = (Var)RT.var("clojure.core", "merge"), const__44 = (Var)RT.var("mount.lite", "throw-unstarted");
  
  public State(Object paramObject1, Object paramObject2, Object paramObject3, Object paramObject4, Object paramObject5, Object paramObject6, int paramInt1, int paramInt2) { this.start_fn = paramObject1;
    this.stop_fn = paramObject2;
    this.name = paramObject3;
    this.sessions = paramObject4;
    this.__meta = paramObject5;
    this.__extmap = paramObject6;
    this.__hash = paramInt1;
    this.__hasheq = paramInt2; }
  
  public State(Object paramObject1, Object paramObject2, Object paramObject3, Object paramObject4) { this(paramObject1, paramObject2, paramObject3, paramObject4, null, null, 0, 0); }
  
  public State(Object paramObject1, Object paramObject2, Object paramObject3, Object paramObject4, Object paramObject5, Object paramObject6) { this(paramObject1, paramObject2, paramObject3, paramObject4, paramObject5, paramObject6, 0, 0); }
  
  public static IPersistentVector getBasis() { return Tuple.create(Symbol.intern(null, "start-fn"), Symbol.intern(null, "stop-fn"), Symbol.intern(null, "name"), Symbol.intern(null, "sessions")); }
  
  public static State create(IPersistentMap paramIPersistentMap) {
    Object object1 = paramIPersistentMap.valAt(Keyword.intern("start-fn"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("start-fn"));
    Object object2 = paramIPersistentMap.valAt(Keyword.intern("stop-fn"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("stop-fn"));
    Object object3 = paramIPersistentMap.valAt(Keyword.intern("name"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("name"));
    Object object4 = paramIPersistentMap.valAt(Keyword.intern("sessions"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("sessions"));
    return new State(object1, object2, object3, object4, null, RT.seqOrElse(paramIPersistentMap), 0, 0);
  }
  
  public Object deref() {
    if (Util.classOf(this) != __cached_class__1)
      if (!(this instanceof IState)) {
        __cached_class__1 = Util.classOf(this);
      } else {
        this = null;
        this = null;
      }  
  }
  
  public Object properties() {
    this = null;
    return ((IFn)const__13.getRawRoot()).invoke(((IFn)const__43.getRawRoot()).invoke(this, RT.get(((IFn)const__40.getRawRoot()).invoke(this.sessions), Reflector.invokeNoArgInstanceMember(const__37.getRawRoot(), "get", false))), const__38, const__10);
  }
  
  public Object status_STAR_() { if (RT.get(((IFn)const__40.getRawRoot()).invoke(this.sessions), Reflector.invokeNoArgInstanceMember(const__37.getRawRoot(), "get", false)) != null) {
      if (RT.get(((IFn)const__40.getRawRoot()).invoke(this.sessions), Reflector.invokeNoArgInstanceMember(const__37.getRawRoot(), "get", false)) != Boolean.FALSE);
    } else {
      RT.get(((IFn)const__40.getRawRoot()).invoke(this.sessions), Reflector.invokeNoArgInstanceMember(const__37.getRawRoot(), "get", false));
    } 
    return const__34; }
  
  public Object stop_STAR_() {
    Object value = ((IFn)const__40.getRawRoot()).invoke(this);
    Object stop_fn = ((IFn)const__41.getRawRoot()).invoke(((IFn)const__40.getRawRoot()).invoke(this.sessions), Tuple.create(Reflector.invokeNoArgInstanceMember(const__37.getRawRoot(), "get", false), const__9));
    stop_fn = null;
    value = null;
    ((IFn)stop_fn).invoke(value);
    this = null;
    return ((IFn)const__36.getRawRoot()).invoke(this.sessions, const__13.getRawRoot(), Reflector.invokeNoArgInstanceMember(const__37.getRawRoot(), "get", false));
  }
  
  public Object start_STAR_() {
    if (Util.classOf(this) != __cached_class__0)
      if (!(this instanceof IState)) {
        __cached_class__0 = Util.classOf(this);
      } else {
        Object value = ((IFn)this.start_fn).invoke();
        value = null;
        this = null;
        this = null;
      }  
  }
  
  public int hasheq() {
    int hq__7768__auto__24016 = this.__hasheq, h__7769__auto__24015 = RT.intCast(0x6A8F4324L ^ APersistentMap.mapHasheq((IPersistentMap)this));
    this.__hasheq = h__7769__auto__24015;
    return (hq__7768__auto__24016 == 0L) ? h__7769__auto__24015 : hq__7768__auto__24016;
  }
  
  public int hashCode() {
    int hash__7771__auto__24018 = this.__hash, h__7772__auto__24017 = APersistentMap.mapHash((IPersistentMap)this);
    this.__hash = h__7772__auto__24017;
    return (hash__7771__auto__24018 == 0L) ? h__7772__auto__24017 : hash__7771__auto__24018;
  }
  
  public boolean equals(Object G__24000) { G__24000 = null;
    return APersistentMap.mapEquals((IPersistentMap)this, G__24000); }
  
  public IPersistentMap meta() { return (IPersistentMap)this.__meta; }
  
  public IObj withMeta(IPersistentMap G__24000) { G__24000 = null;
    return (IObj)new State(this.start_fn, this.stop_fn, this.name, this.sessions, G__24000, this.__extmap, this.__hash, this.__hasheq); }
  
  public Object valAt(Object k__7777__auto__) { k__7777__auto__ = null;
    return ((ILookup)this).valAt(k__7777__auto__, null); }
  
  public Object valAt(Object k__7779__auto__, Object else__7780__auto__) {
    Object G__24013 = k__7779__auto__;
    switch (Util.hash(G__24013) >> 3 & 0x3) {
      case 0:
        if (G__24013 == const__11);
        break;
      case 1:
        if (G__24013 == const__8);
        break;
      case 2:
        if (G__24013 == const__10);
        break;
      case 3:
        if (G__24013 == const__9);
        break;
    } 
    k__7779__auto__ = null;
    else__7780__auto__ = null;
    this = null;
    return RT.get(this.__extmap, k__7779__auto__, else__7780__auto__);
  }
  
  public ILookupThunk getLookupThunk(Keyword k__7782__auto__) {
    Object gclass = ((IFn)const__23.getRawRoot()).invoke(this), G__24004 = k__7782__auto__ = null;
    switch (Util.hash(G__24004) >> 3 & 0x3) {
      case 0:
        if (G__24004 == const__11)
          gclass = null; 
        break;
      case 1:
        if (G__24004 == const__8)
          gclass = null; 
        break;
      case 2:
        if (G__24004 == const__10)
          gclass = null; 
        break;
      case 3:
        if (G__24004 == const__9)
          gclass = null; 
        break;
    } 
    return (ILookupThunk)null;
  }
  
  public int count() { return RT.intCast(Numbers.add(4L, RT.count(this.__extmap))); }
  
  public IPersistentCollection empty() { throw (Throwable)new UnsupportedOperationException((String)((IFn)const__25.getRawRoot()).invoke("Can't create empty: ", "mount.lite.State")); }
  
  public IPersistentCollection cons(Object e__7786__auto__) { e__7786__auto__ = null;
    this = null;
    return (IPersistentCollection)((IFn)const__24).invoke(this, e__7786__auto__); }
  
  public boolean equiv(Object G__24000) {
    boolean or__5516__auto__24023 = Util.identical(this, G__24000);
    Object G__24000 = G__24000 = null;
    boolean and__5514__auto__24022 = Util.equiv(this.start_fn, ((State)G__24000).start_fn), and__5514__auto__24021 = Util.equiv(this.stop_fn, ((State)G__24000).stop_fn), and__5514__auto__24020 = Util.equiv(this.name, ((State)G__24000).name), and__5514__auto__24019 = Util.equiv(this.sessions, ((State)G__24000).sessions);
    G__24000 = null;
    return RT.booleanCast(or__5516__auto__24023 ? (or__5516__auto__24023 ? Boolean.TRUE : Boolean.FALSE) : (Util.identical(((IFn)const__23.getRawRoot()).invoke(this), ((IFn)const__23.getRawRoot()).invoke(G__24000)) ? (and__5514__auto__24022 ? (and__5514__auto__24021 ? (and__5514__auto__24020 ? (and__5514__auto__24019 ? (Util.equiv(this.__extmap, ((State)G__24000).__extmap) ? Boolean.TRUE : Boolean.FALSE) : (and__5514__auto__24019 ? Boolean.TRUE : Boolean.FALSE)) : (and__5514__auto__24020 ? Boolean.TRUE : Boolean.FALSE)) : (and__5514__auto__24021 ? Boolean.TRUE : Boolean.FALSE)) : (and__5514__auto__24022 ? Boolean.TRUE : Boolean.FALSE)) : null));
  }
  
  public boolean containsKey(Object k__7789__auto__) { k__7789__auto__ = null;
    this = null;
    return ((Boolean)((IFn)const__22.getRawRoot()).invoke(Util.identical(this, ((ILookup)this).valAt(k__7789__auto__, this)) ? Boolean.TRUE : Boolean.FALSE)).booleanValue(); }
  
  public IMapEntry entryAt(Object k__7791__auto__) {
    Object v__7792__auto__24024 = ((ILookup)this).valAt(k__7791__auto__, this);
    k__7791__auto__ = null;
    v__7792__auto__24024 = null;
    this = null;
    return (IMapEntry)(Util.identical(this, v__7792__auto__24024) ? null : MapEntry.create(k__7791__auto__, v__7792__auto__24024));
  }
  
  public ISeq seq() { this = null;
    return (ISeq)((IFn)const__20.getRawRoot()).invoke(((IFn)const__21.getRawRoot()).invoke(Tuple.create(MapEntry.create(const__11, this.start_fn), MapEntry.create(const__9, this.stop_fn), MapEntry.create(const__8, this.name), MapEntry.create(const__10, this.sessions)), this.__extmap)); }
  
  public Iterator iterator() { return (Iterator)new RecordIterator((ILookup)this, (IPersistentVector)const__19, (Iterator)RT.iter(this.__extmap)); }
  
  public IPersistentMap assoc(Object k__7796__auto__, Object G__24000) {
    Object pred__24002 = const__17.getRawRoot(), expr__24003 = k__7796__auto__;
    if (((IFn)pred__24002).invoke(const__11, expr__24003) != null) {
      if (((IFn)pred__24002).invoke(const__11, expr__24003) != Boolean.FALSE)
        G__24000 = null; 
    } else {
      ((IFn)pred__24002).invoke(const__11, expr__24003);
    } 
    if (((IFn)pred__24002).invoke(const__9, expr__24003) != null) {
      if (((IFn)pred__24002).invoke(const__9, expr__24003) != Boolean.FALSE)
        G__24000 = null; 
    } else {
      ((IFn)pred__24002).invoke(const__9, expr__24003);
    } 
    if (((IFn)pred__24002).invoke(const__8, expr__24003) != null) {
      if (((IFn)pred__24002).invoke(const__8, expr__24003) != Boolean.FALSE)
        G__24000 = null; 
    } else {
      ((IFn)pred__24002).invoke(const__8, expr__24003);
    } 
    pred__24002 = null;
    expr__24003 = null;
    if (((IFn)pred__24002).invoke(const__10, expr__24003) != null) {
      if (((IFn)pred__24002).invoke(const__10, expr__24003) != Boolean.FALSE)
        G__24000 = null; 
    } else {
      ((IFn)pred__24002).invoke(const__10, expr__24003);
    } 
    k__7796__auto__ = null;
    G__24000 = null;
    return (IPersistentMap)new State(this.start_fn, this.stop_fn, this.name, this.sessions, this.__meta, ((IFn)const__18.getRawRoot()).invoke(this.__extmap, k__7796__auto__, G__24000));
  }
  
  public IPersistentMap without(Object k__7798__auto__) { if (((IFn)const__7.getRawRoot()).invoke(const__12, k__7798__auto__) != null) {
      if (((IFn)const__7.getRawRoot()).invoke(const__12, k__7798__auto__) != Boolean.FALSE) {
        k__7798__auto__ = null;
        this = null;
      } 
    } else {
      ((IFn)const__7.getRawRoot()).invoke(const__12, k__7798__auto__);
    } 
    k__7798__auto__ = null;
    return (IPersistentMap)new State(this.start_fn, this.stop_fn, this.name, this.sessions, this.__meta, ((IFn)const__16.getRawRoot()).invoke(((IFn)const__13.getRawRoot()).invoke(this.__extmap, k__7798__auto__))); }
  
  public int size() { this = null;
    return ((Counted)this).count(); }
  
  public boolean isEmpty() { return Util.equiv(0L, ((Counted)this).count()); }
  
  public boolean containsValue(Object v__7802__auto__) { v__7802__auto__ = null;
    return RT.booleanCast(((IFn)const__4.getRawRoot()).invoke(RT.set(new Object[] { v__7802__auto__ }, ), ((IFn)const__1.getRawRoot()).invoke(this))); }
  
  public Object get(Object k__7804__auto__) { k__7804__auto__ = null;
    return ((ILookup)this).valAt(k__7804__auto__); }
  
  public Object put(Object k__7806__auto__, Object v__7807__auto__) { throw (Throwable)new UnsupportedOperationException(); }
  
  public Object remove(Object k__7809__auto__) { throw (Throwable)new UnsupportedOperationException(); }
  
  public void putAll(Map m__7811__auto__) { throw (Throwable)new UnsupportedOperationException(); }
  
  public void clear() { throw (Throwable)new UnsupportedOperationException(); }
  
  public Set keySet() { this = null;
    return (Set)((IFn)const__0.getRawRoot()).invoke(((IFn)const__2.getRawRoot()).invoke(this)); }
  
  public Collection values() { this = null;
    return (Collection)((IFn)const__1.getRawRoot()).invoke(this); }
  
  public Set entrySet() { this = null;
    return (Set)((IFn)const__0.getRawRoot()).invoke(this); }
}
