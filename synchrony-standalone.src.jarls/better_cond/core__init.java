package better_cond;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentHashSet;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class core__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__4;
  
  public static final AFn const__5;
  
  public static final Var const__6;
  
  public static final AFn const__14;
  
  public static final Var const__15;
  
  public static final AFn const__18;
  
  public static final Var const__19;
  
  public static final AFn const__22;
  
  public static final Var const__23;
  
  public static final AFn const__26;
  
  public static final Var const__27;
  
  public static final AFn const__30;
  
  public static final Var const__31;
  
  public static final AFn const__34;
  
  public static final Var const__35;
  
  public static final AFn const__38;
  
  public static final Var const__39;
  
  public static final AFn const__42;
  
  public static final Var const__43;
  
  public static final Keyword const__44;
  
  public static final Object const__45;
  
  public static final Var const__46;
  
  public static final AFn const__47;
  
  public static final Var const__48;
  
  public static final Var const__49;
  
  public static final Object const__50;
  
  public static final Var const__51;
  
  public static final Var const__52;
  
  public static final AFn const__55;
  
  public static final Var const__56;
  
  public static final Keyword const__57;
  
  public static final Var const__58;
  
  public static final AFn const__61;
  
  public static final AFn const__64;
  
  public static final AFn const__65;
  
  public static final Object const__66;
  
  public static final AFn const__67;
  
  public static final Keyword const__68;
  
  public static final Object const__69;
  
  public static final AFn const__72;
  
  public static final Var const__73;
  
  public static final AFn const__74;
  
  public static final AFn const__75;
  
  public static final Var const__76;
  
  public static final AFn const__77;
  
  public static final Keyword const__78;
  
  public static final Object const__79;
  
  public static final AFn const__84;
  
  public static final Var const__85;
  
  public static final Var const__86;
  
  public static final AFn const__87;
  
  public static final AFn const__88;
  
  public static final Var const__89;
  
  public static final AFn const__92;
  
  public static final AFn const__95;
  
  public static final Var const__96;
  
  public static final Object const__97;
  
  public static final AFn const__98;
  
  public static final AFn const__99;
  
  public static final AFn const__100;
  
  public static final AFn const__101;
  
  public static final Object const__102;
  
  public static final Var const__103;
  
  public static final AFn const__107;
  
  public static final AFn const__108;
  
  public static final Keyword const__110;
  
  public static final AFn const__112;
  
  public static final Object const__113;
  
  public static final AFn const__114;
  
  public static final Object const__115;
  
  public static final AFn const__119;
  
  public static final AFn const__120;
  
  public static final AFn const__123;
  
  public static final AFn const__124;
  
  public static final Object const__125;
  
  public static final AFn const__126;
  
  public static final AFn const__128;
  
  public static final AFn const__129;
  
  public static final Object const__130;
  
  public static final AFn const__131;
  
  public static final AFn const__132;
  
  public static final ISeq const__133;
  
  public static final Var const__134;
  
  public static final AFn const__135;
  
  public static final AFn const__136;
  
  public static final AFn const__137;
  
  public static final ISeq const__138;
  
  public static final AFn const__139;
  
  public static final AFn const__140;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new core.fn__30259());
    const__6.setMeta((IPersistentMap)const__14);
    const__6.bindRoot(new core.if_let());
    ((Var)const__6)






      
      .setMacro();
    const__15.setMeta((IPersistentMap)const__18);
    const__15.bindRoot(new core.when_let());
    ((Var)const__15)















      
      .setMacro();
    const__19.setMeta((IPersistentMap)const__22);
    const__19.bindRoot(new core.if_some());
    ((Var)const__19)




      
      .setMacro();
    const__23.setMeta((IPersistentMap)const__26);
    const__23.bindRoot(new core.when_some());
    ((Var)const__23)















      
      .setMacro();
    const__27.setMeta((IPersistentMap)const__30);
    const__27.bindRoot(new core.cond());
    ((Var)const__27)




      
      .setMacro();
    const__31.setMeta((IPersistentMap)const__34);
    const__31.bindRoot(new core.defnc());
    ((Var)const__31)
























      
      .setMacro();
    const__35.setMeta((IPersistentMap)const__38);
    const__35.bindRoot(new core.defnc_());
    ((Var)const__35)











      
      .setMacro();
    const__39.setMeta((IPersistentMap)const__42);
    const__39.bindRoot(new core.vec_unformer());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "better-cond.core")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "A collection of variations on Clojure's core macros. Let's see which features\n   end up being useful.", RT.keyword(null, "author"), "Christophe Grand and Mark Engelberg" }));
    const__4 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "A collection of variations on Clojure's core macros. Let's see which features\n   end up being useful.", RT.keyword(null, "author"), "Christophe Grand and Mark Engelberg" });
    const__5 = (AFn)Symbol.intern(null, "clojure.core");
    const__6 = (Var)RT.var("better-cond.core", "if-let");
    const__14 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "bindings"), Symbol.intern(null, "then")), Tuple.create(Symbol.intern(null, "bindings"), Symbol.intern(null, "then"), Symbol.intern(null, "else")) })), RT.keyword(null, "doc"), "A variation on if-let where all the exprs in the bindings vector must be true.\n   Also supports :let.", RT.keyword(null, "line"), Integer.valueOf(9), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "better_cond/core.clj" });
    const__15 = (Var)RT.var("better-cond.core", "when-let");
    const__18 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "bindings"), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "doc"), "A variation on when-let where all the exprs in the bindings vector must be true.\n   Also supports :let.", RT.keyword(null, "line"), Integer.valueOf(26), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "better_cond/core.clj" });
    const__19 = (Var)RT.var("better-cond.core", "if-some");
    const__22 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "bindings"), Symbol.intern(null, "then")), Tuple.create(Symbol.intern(null, "bindings"), Symbol.intern(null, "then"), Symbol.intern(null, "else")) })), RT.keyword(null, "doc"), "A variation on if-some where all the exprs in the bindings vector must be non-nil.\n   Also supports :let.", RT.keyword(null, "line"), Integer.valueOf(32), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "better_cond/core.clj" });
    const__23 = (Var)RT.var("better-cond.core", "when-some");
    const__26 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "bindings"), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "doc"), "A variation on when-some where all the exprs in the bindings vector must be non-nil.\n   Also supports :let.", RT.keyword(null, "line"), Integer.valueOf(49), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "better_cond/core.clj" });
    const__27 = (Var)RT.var("better-cond.core", "cond");
    const__30 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "clauses")) })), RT.keyword(null, "doc"), "A variation on cond which sports let bindings, do and implicit else:\n     (cond \n       (odd? a) 1\n       :do (println a)\n       :let [a (quot a 2)]\n       (odd? a) 2\n       3).\n   Also supports :when-let and :when-some. \n   :let, :when-let, :when-some and :do do not need to be written as keywords.", RT.keyword(null, "line"), Integer.valueOf(55), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "better_cond/core.clj" });
    const__31 = (Var)RT.var("better-cond.core", "defnc");
    const__34 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "defn-args")) })), RT.keyword(null, "doc"), "defn with implicit cond", RT.keyword(null, "line"), Integer.valueOf(81), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "better_cond/core.clj" });
    const__35 = (Var)RT.var("better-cond.core", "defnc-");
    const__38 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "defn-args")) })), RT.keyword(null, "doc"), "defn- with implicit cond", RT.keyword(null, "line"), Integer.valueOf(94), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "better_cond/core.clj" });
    const__39 = (Var)RT.var("better-cond.core", "vec-unformer");
    const__42 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "a")) })), RT.keyword(null, "line"), Integer.valueOf(108), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "better_cond/core.clj" });
    const__43 = (Var)RT.var("clojure.spec.alpha", "def-impl");
    const__44 = (Keyword)RT.keyword("better-cond.core", "arg-list");
    const__45 = PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "and"), Symbol.intern("clojure.core", "vector?"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "conformer"), Symbol.intern("clojure.core", "vec"), Symbol.intern("better-cond.core", "vec-unformer") })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "cat"), RT.keyword(null, "args"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "*"), RT.keyword("better-cond.core", "binding-form") })), RT.keyword(null, "varargs"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "?"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "cat"), RT.keyword(null, "amp"), PersistentHashSet.create(new Object[] { PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "quote"), Symbol.intern(null, "&") })) }), RT.keyword(null, "form"), RT.keyword("better-cond.core", "binding-form") })) })) })) }));
    const__46 = (Var)RT.var("clojure.spec.alpha", "and-spec-impl");
    const__47 = (AFn)Tuple.create(Symbol.intern("clojure.core", "vector?"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "conformer"), Symbol.intern("clojure.core", "vec"), Symbol.intern("better-cond.core", "vec-unformer") })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "cat"), RT.keyword(null, "args"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "*"), RT.keyword("better-cond.core", "binding-form") })), RT.keyword(null, "varargs"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "?"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "cat"), RT.keyword(null, "amp"), PersistentHashSet.create(new Object[] { PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "quote"), Symbol.intern(null, "&") })) }), RT.keyword(null, "form"), RT.keyword("better-cond.core", "binding-form") })) })) })));
    const__48 = (Var)RT.var("clojure.core", "vector?");
    const__49 = (Var)RT.var("clojure.spec.alpha", "spec-impl");
    const__50 = PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "conformer"), Symbol.intern("clojure.core", "vec"), Symbol.intern("better-cond.core", "vec-unformer") }));
    const__51 = (Var)RT.var("clojure.core", "vec");
    const__52 = (Var)RT.var("clojure.spec.alpha", "cat-impl");
    const__55 = (AFn)Tuple.create(RT.keyword(null, "args"), RT.keyword(null, "varargs"));
    const__56 = (Var)RT.var("clojure.spec.alpha", "rep-impl");
    const__57 = (Keyword)RT.keyword("better-cond.core", "binding-form");
    const__58 = (Var)RT.var("clojure.spec.alpha", "maybe-impl");
    const__61 = (AFn)Tuple.create(RT.keyword(null, "amp"), RT.keyword(null, "form"));
    const__64 = (AFn)Tuple.create(PersistentHashSet.create(new Object[] { Symbol.intern(null, "&") }), RT.keyword("better-cond.core", "binding-form"));
    const__65 = (AFn)Tuple.create(PersistentHashSet.create(new Object[] { PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "quote"), Symbol.intern(null, "&") })) }), RT.keyword("better-cond.core", "binding-form"));
    const__66 = PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "cat"), RT.keyword(null, "amp"), PersistentHashSet.create(new Object[] { PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "quote"), Symbol.intern(null, "&") })) }), RT.keyword(null, "form"), RT.keyword("better-cond.core", "binding-form") }));
    const__67 = (AFn)Tuple.create(PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "*"), RT.keyword("better-cond.core", "binding-form") })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "?"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "cat"), RT.keyword(null, "amp"), PersistentHashSet.create(new Object[] { PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "quote"), Symbol.intern(null, "&") })) }), RT.keyword(null, "form"), RT.keyword("better-cond.core", "binding-form") })) })));
    const__68 = (Keyword)RT.keyword("better-cond.core", "args+body");
    const__69 = PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "cat"), RT.keyword(null, "args"), RT.keyword("better-cond.core", "arg-list"), RT.keyword(null, "prepost"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "?"), Symbol.intern("clojure.core", "map?") })), RT.keyword(null, "body"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "*"), Symbol.intern("clojure.core", "any?") })) }));
    const__72 = (AFn)Tuple.create(RT.keyword(null, "args"), RT.keyword(null, "prepost"), RT.keyword(null, "body"));
    const__73 = (Var)RT.var("clojure.core", "map?");
    const__74 = (AFn)Symbol.intern("clojure.core", "map?");
    const__75 = (AFn)Symbol.intern("clojure.core", "any?");
    const__76 = (Var)RT.var("clojure.core", "any?");
    const__77 = (AFn)Tuple.create(RT.keyword("better-cond.core", "arg-list"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "?"), Symbol.intern("clojure.core", "map?") })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "*"), Symbol.intern("clojure.core", "any?") })));
    const__78 = (Keyword)RT.keyword("better-cond.core", "defn-args");
    const__79 = PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "cat"), RT.keyword(null, "name"), Symbol.intern("clojure.core", "simple-symbol?"), RT.keyword(null, "docstring"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "?"), Symbol.intern("clojure.core", "string?") })), RT.keyword(null, "meta"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "?"), Symbol.intern("clojure.core", "map?") })), RT.keyword(null, "bs"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "alt"), RT.keyword(null, "arity-1"), RT.keyword("better-cond.core", "args+body"), RT.keyword(null, "arity-n"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "cat"), RT.keyword(null, "bodies"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "+"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "spec"), RT.keyword("better-cond.core", "args+body") })) })), RT.keyword(null, "attr"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "?"), Symbol.intern("clojure.core", "map?") })) })) })) }));
    const__84 = (AFn)Tuple.create(RT.keyword(null, "name"), RT.keyword(null, "docstring"), RT.keyword(null, "meta"), RT.keyword(null, "bs"));
    const__85 = (Var)RT.var("clojure.core", "simple-symbol?");
    const__86 = (Var)RT.var("clojure.core", "string?");
    const__87 = (AFn)Symbol.intern("clojure.core", "string?");
    const__88 = (AFn)Symbol.intern("clojure.core", "map?");
    const__89 = (Var)RT.var("clojure.spec.alpha", "alt-impl");
    const__92 = (AFn)Tuple.create(RT.keyword(null, "arity-1"), RT.keyword(null, "arity-n"));
    const__95 = (AFn)Tuple.create(RT.keyword(null, "bodies"), RT.keyword(null, "attr"));
    const__96 = (Var)RT.var("clojure.spec.alpha", "rep+impl");
    const__97 = PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "spec"), RT.keyword("better-cond.core", "args+body") }));
    const__98 = (AFn)Symbol.intern("clojure.core", "map?");
    const__99 = (AFn)Tuple.create(PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "+"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "spec"), RT.keyword("better-cond.core", "args+body") })) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "?"), Symbol.intern("clojure.core", "map?") })));
  }
  
  public static void __init1() {
    const__100 = (AFn)Tuple.create(RT.keyword("better-cond.core", "args+body"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "cat"), RT.keyword(null, "bodies"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "+"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "spec"), RT.keyword("better-cond.core", "args+body") })) })), RT.keyword(null, "attr"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "?"), Symbol.intern("clojure.core", "map?") })) })));
    const__101 = (AFn)Tuple.create(Symbol.intern("clojure.core", "simple-symbol?"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "?"), Symbol.intern("clojure.core", "string?") })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "?"), Symbol.intern("clojure.core", "map?") })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "alt"), RT.keyword(null, "arity-1"), RT.keyword("better-cond.core", "args+body"), RT.keyword(null, "arity-n"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "cat"), RT.keyword(null, "bodies"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "+"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "spec"), RT.keyword("better-cond.core", "args+body") })) })), RT.keyword(null, "attr"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "?"), Symbol.intern("clojure.core", "map?") })) })) })));
    const__102 = PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "or"), RT.keyword(null, "sym"), RT.keyword("clojure.core.specs.alpha", "local-name"), RT.keyword(null, "seq"), RT.keyword("better-cond.core", "seq-binding-form"), RT.keyword(null, "map"), RT.keyword("clojure.core.specs.alpha", "map-binding-form") }));
    const__103 = (Var)RT.var("clojure.spec.alpha", "or-spec-impl");
    const__107 = (AFn)Tuple.create(RT.keyword(null, "sym"), RT.keyword(null, "seq"), RT.keyword(null, "map"));
    const__108 = (AFn)Tuple.create(RT.keyword("clojure.core.specs.alpha", "local-name"), RT.keyword("better-cond.core", "seq-binding-form"), RT.keyword("clojure.core.specs.alpha", "map-binding-form"));
    const__110 = (Keyword)RT.keyword("better-cond.core", "seq-binding-form");
    const__112 = (AFn)Tuple.create(RT.keyword("clojure.core.specs.alpha", "local-name"), RT.keyword("better-cond.core", "seq-binding-form"), RT.keyword("clojure.core.specs.alpha", "map-binding-form"));
    const__113 = PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "and"), Symbol.intern("clojure.core", "vector?"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "conformer"), Symbol.intern("clojure.core", "vec"), Symbol.intern("better-cond.core", "vec-unformer") })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "cat"), RT.keyword(null, "elems"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "*"), RT.keyword("better-cond.core", "binding-form") })), RT.keyword(null, "rest"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "?"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "cat"), RT.keyword(null, "amp"), PersistentHashSet.create(new Object[] { PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "quote"), Symbol.intern(null, "&") })) }), RT.keyword(null, "form"), RT.keyword("better-cond.core", "binding-form") })) })), RT.keyword(null, "as"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "?"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "cat"), RT.keyword(null, "as"), PersistentHashSet.create(new Object[] { RT.keyword(null, "as") }), RT.keyword(null, "sym"), RT.keyword("clojure.core.specs.alpha", "local-name") })) })) })) }));
    const__114 = (AFn)Tuple.create(Symbol.intern("clojure.core", "vector?"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "conformer"), Symbol.intern("clojure.core", "vec"), Symbol.intern("better-cond.core", "vec-unformer") })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "cat"), RT.keyword(null, "elems"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "*"), RT.keyword("better-cond.core", "binding-form") })), RT.keyword(null, "rest"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "?"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "cat"), RT.keyword(null, "amp"), PersistentHashSet.create(new Object[] { PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "quote"), Symbol.intern(null, "&") })) }), RT.keyword(null, "form"), RT.keyword("better-cond.core", "binding-form") })) })), RT.keyword(null, "as"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "?"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "cat"), RT.keyword(null, "as"), PersistentHashSet.create(new Object[] { RT.keyword(null, "as") }), RT.keyword(null, "sym"), RT.keyword("clojure.core.specs.alpha", "local-name") })) })) })));
    const__115 = PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "conformer"), Symbol.intern("clojure.core", "vec"), Symbol.intern("better-cond.core", "vec-unformer") }));
    const__119 = (AFn)Tuple.create(RT.keyword(null, "elems"), RT.keyword(null, "rest"), RT.keyword(null, "as"));
    const__120 = (AFn)Tuple.create(RT.keyword(null, "amp"), RT.keyword(null, "form"));
    const__123 = (AFn)Tuple.create(PersistentHashSet.create(new Object[] { Symbol.intern(null, "&") }), RT.keyword("better-cond.core", "binding-form"));
    const__124 = (AFn)Tuple.create(PersistentHashSet.create(new Object[] { PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "quote"), Symbol.intern(null, "&") })) }), RT.keyword("better-cond.core", "binding-form"));
    const__125 = PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "cat"), RT.keyword(null, "amp"), PersistentHashSet.create(new Object[] { PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "quote"), Symbol.intern(null, "&") })) }), RT.keyword(null, "form"), RT.keyword("better-cond.core", "binding-form") }));
    const__126 = (AFn)Tuple.create(RT.keyword(null, "as"), RT.keyword(null, "sym"));
    const__128 = (AFn)Tuple.create(PersistentHashSet.create(new Object[] { RT.keyword(null, "as") }), RT.keyword("clojure.core.specs.alpha", "local-name"));
    const__129 = (AFn)Tuple.create(PersistentHashSet.create(new Object[] { RT.keyword(null, "as") }), RT.keyword("clojure.core.specs.alpha", "local-name"));
    const__130 = PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "cat"), RT.keyword(null, "as"), PersistentHashSet.create(new Object[] { RT.keyword(null, "as") }), RT.keyword(null, "sym"), RT.keyword("clojure.core.specs.alpha", "local-name") }));
    const__131 = (AFn)Tuple.create(PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "*"), RT.keyword("better-cond.core", "binding-form") })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "?"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "cat"), RT.keyword(null, "amp"), PersistentHashSet.create(new Object[] { PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "quote"), Symbol.intern(null, "&") })) }), RT.keyword(null, "form"), RT.keyword("better-cond.core", "binding-form") })) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "?"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "cat"), RT.keyword(null, "as"), PersistentHashSet.create(new Object[] { RT.keyword(null, "as") }), RT.keyword(null, "sym"), RT.keyword("clojure.core.specs.alpha", "local-name") })) })));
    const__132 = (AFn)Symbol.intern("better-cond.core", "defnc");
    const__133 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "fspec"), RT.keyword(null, "args"), RT.keyword("better-cond.core", "defn-args"), RT.keyword(null, "ret"), Symbol.intern("clojure.core", "any?") }));
    const__134 = (Var)RT.var("clojure.spec.alpha", "fspec-impl");
    const__135 = (AFn)Symbol.intern("clojure.core", "any?");
    const__136 = (AFn)Symbol.intern("clojure.core", "any?");
    const__137 = (AFn)Symbol.intern("better-cond.core", "defnc-");
    const__138 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "fspec"), RT.keyword(null, "args"), RT.keyword("better-cond.core", "defn-args"), RT.keyword(null, "ret"), Symbol.intern("clojure.core", "any?") }));
    const__139 = (AFn)Symbol.intern("clojure.core", "any?");
    const__140 = (AFn)Symbol.intern("clojure.core", "any?");
  }
  
  static  {
    __init0();
    __init1();
    Compiler.pushNSandLoader(RT.classForName("better_cond.core__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
