import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class clj_tuple__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__11;
  
  public static final Var const__12;
  
  public static final AFn const__16;
  
  public static final Var const__17;
  
  public static final AFn const__19;
  
  public static void load() { LockingTransaction.runInTransaction((Callable)new clj_tuple.fn__17177());
    const__3.setMeta((IPersistentMap)const__11);
    const__3.bindRoot(new clj_tuple.hash_map());
    const__12.setMeta((IPersistentMap)const__16);
    const__12.bindRoot(new clj_tuple.vector());
    const__17.setMeta((IPersistentMap)const__19);
    const__17.bindRoot(const__12.getRawRoot()); }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "clj-tuple");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("clj-tuple", "hash-map");
    const__11 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(), Tuple.create(Symbol.intern(null, "k1"), Symbol.intern(null, "v1")), Tuple.create(Symbol.intern(null, "k1"), Symbol.intern(null, "v1"), Symbol.intern(null, "k2"), Symbol.intern(null, "v2")), Tuple.create(Symbol.intern(null, "k1"), Symbol.intern(null, "v1"), Symbol.intern(null, "k2"), Symbol.intern(null, "v2"), Symbol.intern(null, "k3"), Symbol.intern(null, "v3")), RT.vector(new Object[] { Symbol.intern(null, "k1"), Symbol.intern(null, "v1"), Symbol.intern(null, "k2"), Symbol.intern(null, "v2"), Symbol.intern(null, "k3"), Symbol.intern(null, "v3"), Symbol.intern(null, "k4"), Symbol.intern(null, "v4") }), RT.vector(new Object[] { Symbol.intern(null, "k1"), Symbol.intern(null, "v1"), Symbol.intern(null, "k2"), Symbol.intern(null, "v2"), Symbol.intern(null, "k3"), Symbol.intern(null, "v3"), Symbol.intern(null, "k4"), Symbol.intern(null, "v4"), Symbol.intern(null, "k5"), Symbol.intern(null, "v5") }), RT.vector(new Object[] { 
                    Symbol.intern(null, "k1"), Symbol.intern(null, "v1"), Symbol.intern(null, "k2"), Symbol.intern(null, "v2"), Symbol.intern(null, "k3"), Symbol.intern(null, "v3"), Symbol.intern(null, "k4"), Symbol.intern(null, "v4"), Symbol.intern(null, "k5"), Symbol.intern(null, "v5"), 
                    Symbol.intern(null, "k6"), Symbol.intern(null, "v6") }), RT.vector(new Object[] { 
                    Symbol.intern(null, "k1"), Symbol.intern(null, "v1"), Symbol.intern(null, "k2"), Symbol.intern(null, "v2"), Symbol.intern(null, "k3"), Symbol.intern(null, "v3"), Symbol.intern(null, "k4"), Symbol.intern(null, "v4"), Symbol.intern(null, "k5"), Symbol.intern(null, "v5"), 
                    Symbol.intern(null, "k6"), Symbol.intern(null, "v6"), Symbol.intern(null, "&"), Symbol.intern(null, "rst") }) })), RT.keyword(null, "line"), Integer.valueOf(8), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_tuple.clj" });
    const__12 = (Var)RT.var("clj-tuple", "vector");
    const__16 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(), Tuple.create(Symbol.intern(null, "x")), Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "y")), Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "y"), Symbol.intern(null, "z")), Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "y"), Symbol.intern(null, "z"), Symbol.intern(null, "w")), Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "y"), Symbol.intern(null, "z"), Symbol.intern(null, "w"), Symbol.intern(null, "u")), Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "y"), Symbol.intern(null, "z"), Symbol.intern(null, "w"), Symbol.intern(null, "u"), Symbol.intern(null, "v")), RT.vector(new Object[] { Symbol.intern(null, "x"), Symbol.intern(null, "y"), Symbol.intern(null, "z"), Symbol.intern(null, "w"), Symbol.intern(null, "u"), Symbol.intern(null, "v"), Symbol.intern(null, "&"), Symbol.intern(null, "rst") }) })), RT.keyword(null, "doc"), "Returns a collection which behaves like a vector, but is highly efficient for index lookups,\n   hash calculations, equality checks, and reduction.  If there are more than six elements,\n   returns a normal vector.", RT.keyword(null, "line"), Integer.valueOf(36), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_tuple.clj" });
    const__17 = (Var)RT.var("clj-tuple", "tuple");
    const__19 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(61), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_tuple.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("clj_tuple__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
