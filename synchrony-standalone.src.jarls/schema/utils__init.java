package schema;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;
import java.util.concurrent.atomic.AtomicReference;

public class utils__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__3;
  
  public static final AFn const__4;
  
  public static final Var const__5;
  
  public static final AFn const__13;
  
  public static final Var const__14;
  
  public static final AFn const__17;
  
  public static final Var const__18;
  
  public static final AFn const__21;
  
  public static final Var const__22;
  
  public static final AFn const__25;
  
  public static final Var const__26;
  
  public static final AFn const__28;
  
  public static final Var const__29;
  
  public static final Object const__30;
  
  public static final Var const__31;
  
  public static final AFn const__34;
  
  public static final Var const__35;
  
  public static final AFn const__38;
  
  public static final Var const__39;
  
  public static final AFn const__42;
  
  public static final Var const__43;
  
  public static final AFn const__46;
  
  public static final Var const__47;
  
  public static final AFn const__50;
  
  public static final Var const__51;
  
  public static final AFn const__54;
  
  public static final AFn const__57;
  
  public static final Var const__58;
  
  public static final Object const__59;
  
  public static final Var const__60;
  
  public static final AFn const__63;
  
  public static final Var const__64;
  
  public static final AFn const__66;
  
  public static final AFn const__69;
  
  public static final Object const__70;
  
  public static final Var const__71;
  
  public static final AFn const__74;
  
  public static final Var const__75;
  
  public static final AFn const__78;
  
  public static final Var const__79;
  
  public static final AFn const__82;
  
  public static final Var const__83;
  
  public static final AFn const__85;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new utils.fn__21296());
    const__5.setMeta((IPersistentMap)const__13);
    const__5.bindRoot(new utils.assoc_when());
    const__14.setMeta((IPersistentMap)const__17);
    const__14.bindRoot(new utils.type_of());
    const__18.setMeta((IPersistentMap)const__21);
    const__18.bindRoot(new utils.fn_schema_bearer());
    const__22.setMeta((IPersistentMap)const__25);
    const__22.bindRoot(new utils.format_STAR_());
    const__26.setMeta((IPersistentMap)const__28);
    const__26




































      
      .bindRoot(((IFn)const__29.getRawRoot()).invoke(const__30));
    const__31.setMeta((IPersistentMap)const__34);
    const__31.bindRoot(new utils.value_name());
    const__35.setMeta((IPersistentMap)const__38);
    const__35.bindRoot(new utils.char_map());
    ((Var)const__35)








      
      .setMacro();
    const__39.setMeta((IPersistentMap)const__42);
    const__39.bindRoot(new utils.unmunge());
    const__43.setMeta((IPersistentMap)const__46);
    const__43.bindRoot(new utils.fn_name());
    const__47.setMeta((IPersistentMap)const__50);
    const__47.bindRoot(new utils.record_QMARK_());
    const__51.setMeta((IPersistentMap)const__54);
    const__51.setMeta((IPersistentMap)const__57);
    const__51.bindRoot(new utils.validation_error_explain());
    const__60.setMeta((IPersistentMap)const__63);
    const__60.bindRoot(new utils.make_ValidationError());
    const__64.setMeta((IPersistentMap)const__66);
    const__64.setMeta((IPersistentMap)const__69);
    const__64.bindRoot(new utils.named_error_explain());
    const__71.setMeta((IPersistentMap)const__74);
    const__71.bindRoot(new utils.error());
    const__75.setMeta((IPersistentMap)const__78);
    const__75.bindRoot(new utils.error_QMARK_());
    const__79.setMeta((IPersistentMap)const__82);
    const__79.bindRoot(new utils.error_val());
    const__83.setMeta((IPersistentMap)const__85);
    const__83.bindRoot(new AtomicReference(Boolean.FALSE));
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "schema.utils")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Private utilities used in schema implementation." }));
    const__3 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Private utilities used in schema implementation." });
    const__4 = (AFn)Symbol.intern(null, "clojure.core");
    const__5 = (Var)RT.var("schema.utils", "assoc-when");
    const__13 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "&"), Symbol.intern(null, "kvs")) })), RT.keyword(null, "doc"), "Like assoc but only assocs when value is truthy.  Copied from plumbing.core so that\n   schema need not depend on plumbing.", RT.keyword(null, "line"), Integer.valueOf(15), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/utils.clj" });
    const__14 = (Var)RT.var("schema.utils", "type-of");
    const__17 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(25), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/utils.clj" });
    const__18 = (Var)RT.var("schema.utils", "fn-schema-bearer");
    const__21 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f")) })), RT.keyword(null, "doc"), "What class can we associate the fn schema with? In Clojure use the class of the fn; in\n   cljs just use the fn itself.", RT.keyword(null, "line"), Integer.valueOf(29), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/utils.clj" });
    const__22 = (Var)RT.var("schema.utils", "format*");
    const__25 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "fmt"), Symbol.intern(null, "&"), Symbol.intern(null, "args")) })), RT.keyword(null, "line"), Integer.valueOf(36), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/utils.clj" });
    const__26 = (Var)RT.var("schema.utils", "max-value-length");
    const__28 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(39), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/utils.clj" });
    const__29 = (Var)RT.var("clojure.core", "atom");
    const__30 = Long.valueOf(19L);
    const__31 = (Var)RT.var("schema.utils", "value-name");
    const__34 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "value")) })), RT.keyword(null, "doc"), "Provide a descriptive short name for a value.", RT.keyword(null, "line"), Integer.valueOf(41), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/utils.clj" });
    const__35 = (Var)RT.var("schema.utils", "char-map");
    const__38 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(49), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/utils.clj" });
    const__39 = (Var)RT.var("schema.utils", "unmunge");
    const__42 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })), RT.keyword(null, "doc"), "TODO: eventually use built in demunge in latest cljs.", RT.keyword(null, "line"), Integer.valueOf(52), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/utils.clj" });
    const__43 = (Var)RT.var("schema.utils", "fn-name");
    const__46 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f")) })), RT.keyword(null, "doc"), "A meaningful name for a function that looks like its symbol, if applicable.", RT.keyword(null, "line"), Integer.valueOf(59), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/utils.clj" });
    const__47 = (Var)RT.var("schema.utils", "record?");
    const__50 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(75), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/utils.clj" });
    const__51 = (Var)RT.var("schema.utils", "validation-error-explain");
    const__54 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(87), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/utils.clj" });
    const__57 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "err")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "ValidationError") }))) })), RT.keyword(null, "line"), Integer.valueOf(94), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/utils.clj" });
    const__58 = (Var)RT.var("clojure.core", "print-method");
    const__59 = RT.classForName("schema.utils.ValidationError");
    const__60 = (Var)RT.var("schema.utils", "make-ValidationError");
    const__63 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "schema"), Symbol.intern(null, "value"), Symbol.intern(null, "expectation-delay"), Symbol.intern(null, "fail-explanation")) })), RT.keyword(null, "doc"), "for cljs sake (easier than normalizing imports in macros.clj)", RT.keyword(null, "line"), Integer.valueOf(101), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/utils.clj" });
    const__64 = (Var)RT.var("schema.utils", "named-error-explain");
    const__66 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(108), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/utils.clj" });
    const__69 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "err")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "NamedError") }))) })), RT.keyword(null, "line"), Integer.valueOf(115), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/utils.clj" });
    const__70 = RT.classForName("schema.utils.NamedError");
    const__71 = (Var)RT.var("schema.utils", "error");
    const__74 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "doc"), "Distinguish a value (must be non-nil) as an error.", RT.keyword(null, "line"), Integer.valueOf(128), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/utils.clj" });
    const__75 = (Var)RT.var("schema.utils", "error?");
    const__78 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(132), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/utils.clj" });
    const__79 = (Var)RT.var("schema.utils", "error-val");
    const__82 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(135), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/utils.clj" });
    const__83 = (Var)RT.var("schema.utils", "use-fn-validation");
    const__85 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(170), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/utils.clj", RT.keyword(null, "doc"), "Turn on run-time function validation for functions compiled when\n   s/compile-fn-validation was true -- has no effect for functions compiled\n   when it is false." });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("schema.utils__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
