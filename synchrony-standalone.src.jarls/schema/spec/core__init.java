package schema.spec;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class core__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final Keyword const__2;
  
  public static final AFn const__3;
  
  public static final AFn const__4;
  
  public static final Object const__5;
  
  public static final Var const__6;
  
  public static final Var const__7;
  
  public static final Var const__8;
  
  public static final Var const__9;
  
  public static final ISeq const__10;
  
  public static final Var const__11;
  
  public static final Var const__12;
  
  public static final AFn const__16;
  
  public static final Keyword const__17;
  
  public static final AFn const__18;
  
  public static final Keyword const__19;
  
  public static final Keyword const__20;
  
  public static final AFn const__23;
  
  public static final Keyword const__24;
  
  public static final Var const__25;
  
  public static final Var const__26;
  
  public static final Var const__27;
  
  public static final AFn const__28;
  
  public static final AFn const__29;
  
  public static final Keyword const__30;
  
  public static final AFn const__31;
  
  public static final AFn const__32;
  
  public static final Var const__33;
  
  public static final AFn const__34;
  
  public static final Var const__35;
  
  public static final AFn const__41;
  
  public static final Var const__42;
  
  public static final AFn const__46;
  
  public static final Var const__47;
  
  public static final AFn const__50;
  
  public static final Var const__51;
  
  public static final AFn const__54;
  
  public static final Var const__55;
  
  public static final AFn const__58;
  
  public static final Var const__59;
  
  public static final AFn const__62;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new core.fn__21548());
    const__35.setMeta((IPersistentMap)const__41);
    const__35.bindRoot(new core._PLUS_no_precondition_PLUS_());
    const__42.setMeta((IPersistentMap)const__46);
    const__42.bindRoot(new core.precondition());
    const__47.setMeta((IPersistentMap)const__50);
    const__47.bindRoot(new core.simple_precondition());
    ((Var)const__47)










































      
      .setMacro();
    const__51.setMeta((IPersistentMap)const__54);
    const__51.bindRoot(new core.run_checker());
    const__55.setMeta((IPersistentMap)const__58);
    const__55.bindRoot(new core.with_cache());
    const__59.setMeta((IPersistentMap)const__62);
    const__59.bindRoot(new core.sub_checker());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "schema.spec.core")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Protocol and preliminaries for Schema 'specs', which are a common language\n   for schemas to use to express their structure." }));
    const__2 = (Keyword)RT.keyword(null, "doc");
    const__3 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Protocol and preliminaries for Schema 'specs', which are a common language\n   for schemas to use to express their structure." });
    const__4 = (AFn)Symbol.intern(null, "clojure.core");
    const__5 = RT.classForName("schema.spec.core.CoreSpec");
    const__6 = (Var)RT.var("clojure.core", "alter-meta!");
    const__7 = (Var)RT.var("schema.spec.core", "CoreSpec");
    const__8 = (Var)RT.var("clojure.core", "assoc");
    const__9 = (Var)RT.var("clojure.core", "assert-same-protocol");
    const__10 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "subschemas")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "List all subschemas", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })), ((IObj)Symbol.intern(null, "checker")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Create a function that takes [data], and either returns a walked version of data\n     (by default, usually just data), or a utils/ErrorContainer containing value that looks\n     like the 'bad' parts of data with ValidationErrors at the leaves describing the failures.\n\n     params are: subschema-checker, return-walked?, and cache.\n\n     params is a map specifying:\n      - subschema-checker - a function for checking subschemas\n      - returned-walked? - a boolean specifying whether to return a walked version of the data\n        (otherwise, nil is returned which increases performance)\n      - cache - a map structure from schema to checker, which speeds up checker creation\n        when the same subschema appears multiple times, and also facilitates handling\n        recursive schemas.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "params")) })) })) }));
    const__11 = (Var)RT.var("clojure.core", "alter-var-root");
    const__12 = (Var)RT.var("clojure.core", "merge");
    const__16 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "schema.spec.core.CoreSpec"), RT.keyword(null, "on-interface"), RT.classForName("schema.spec.core.CoreSpec"), RT.keyword(null, "doc"), "Specs are a common language for Schemas to express their structure.\n   These two use-cases aren't priveledged, just the two that are considered core\n   to being a Spec." });
    const__17 = (Keyword)RT.keyword(null, "sigs");
    const__18 = (AFn)RT.map(new Object[] { RT.keyword(null, "subschemas"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "subschemas")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "List all subschemas", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })), RT.keyword(null, "doc"), "List all subschemas" }), RT.keyword(null, "checker"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "checker")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Create a function that takes [data], and either returns a walked version of data\n     (by default, usually just data), or a utils/ErrorContainer containing value that looks\n     like the 'bad' parts of data with ValidationErrors at the leaves describing the failures.\n\n     params are: subschema-checker, return-walked?, and cache.\n\n     params is a map specifying:\n      - subschema-checker - a function for checking subschemas\n      - returned-walked? - a boolean specifying whether to return a walked version of the data\n        (otherwise, nil is returned which increases performance)\n      - cache - a map structure from schema to checker, which speeds up checker creation\n        when the same subschema appears multiple times, and also facilitates handling\n        recursive schemas.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "params")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "params")) })), RT.keyword(null, "doc"), "Create a function that takes [data], and either returns a walked version of data\n     (by default, usually just data), or a utils/ErrorContainer containing value that looks\n     like the 'bad' parts of data with ValidationErrors at the leaves describing the failures.\n\n     params are: subschema-checker, return-walked?, and cache.\n\n     params is a map specifying:\n      - subschema-checker - a function for checking subschemas\n      - returned-walked? - a boolean specifying whether to return a walked version of the data\n        (otherwise, nil is returned which increases performance)\n      - cache - a map structure from schema to checker, which speeds up checker creation\n        when the same subschema appears multiple times, and also facilitates handling\n        recursive schemas." }) });
    const__19 = (Keyword)RT.keyword(null, "var");
    const__20 = (Keyword)RT.keyword(null, "method-map");
    const__23 = (AFn)RT.map(new Object[] { RT.keyword(null, "checker"), RT.keyword(null, "checker"), RT.keyword(null, "subschemas"), RT.keyword(null, "subschemas") });
    const__24 = (Keyword)RT.keyword(null, "method-builders");
    const__25 = (Var)RT.var("clojure.core", "intern");
    const__26 = (Var)RT.var("clojure.core", "*ns*");
    const__27 = (Var)RT.var("clojure.core", "with-meta");
    const__28 = (AFn)((IObj)Symbol.intern(null, "subschemas")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "List all subschemas", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) }));
    const__29 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "subschemas")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "List all subschemas", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })), RT.keyword(null, "doc"), "List all subschemas" });
    const__30 = (Keyword)RT.keyword(null, "protocol");
    const__31 = (AFn)((IObj)Symbol.intern(null, "checker")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Create a function that takes [data], and either returns a walked version of data\n     (by default, usually just data), or a utils/ErrorContainer containing value that looks\n     like the 'bad' parts of data with ValidationErrors at the leaves describing the failures.\n\n     params are: subschema-checker, return-walked?, and cache.\n\n     params is a map specifying:\n      - subschema-checker - a function for checking subschemas\n      - returned-walked? - a boolean specifying whether to return a walked version of the data\n        (otherwise, nil is returned which increases performance)\n      - cache - a map structure from schema to checker, which speeds up checker creation\n        when the same subschema appears multiple times, and also facilitates handling\n        recursive schemas.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "params")) })) }));
    const__32 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "checker")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Create a function that takes [data], and either returns a walked version of data\n     (by default, usually just data), or a utils/ErrorContainer containing value that looks\n     like the 'bad' parts of data with ValidationErrors at the leaves describing the failures.\n\n     params are: subschema-checker, return-walked?, and cache.\n\n     params is a map specifying:\n      - subschema-checker - a function for checking subschemas\n      - returned-walked? - a boolean specifying whether to return a walked version of the data\n        (otherwise, nil is returned which increases performance)\n      - cache - a map structure from schema to checker, which speeds up checker creation\n        when the same subschema appears multiple times, and also facilitates handling\n        recursive schemas.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "params")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "params")) })), RT.keyword(null, "doc"), "Create a function that takes [data], and either returns a walked version of data\n     (by default, usually just data), or a utils/ErrorContainer containing value that looks\n     like the 'bad' parts of data with ValidationErrors at the leaves describing the failures.\n\n     params are: subschema-checker, return-walked?, and cache.\n\n     params is a map specifying:\n      - subschema-checker - a function for checking subschemas\n      - returned-walked? - a boolean specifying whether to return a walked version of the data\n        (otherwise, nil is returned which increases performance)\n      - cache - a map structure from schema to checker, which speeds up checker creation\n        when the same subschema appears multiple times, and also facilitates handling\n        recursive schemas." });
    const__33 = (Var)RT.var("clojure.core", "-reset-methods");
    const__34 = (AFn)Symbol.intern(null, "CoreSpec");
    const__35 = (Var)RT.var("schema.spec.core", "+no-precondition+");
    const__41 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(43), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/spec/core.clj" });
    const__42 = (Var)RT.var("schema.spec.core", "precondition");
    const__46 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s"), Symbol.intern(null, "p"), Symbol.intern(null, "err-f")) })), RT.keyword(null, "doc"), "Helper for making preconditions.\n   Takes a schema, predicate p, and error function err-f.\n   If the datum passes the predicate, returns nil.\n   Otherwise, returns a validation error with description (err-f datum-description),\n   where datum-description is a (short) printable standin for the datum.", RT.keyword(null, "line"), Integer.valueOf(45), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/spec/core.clj" });
    const__47 = (Var)RT.var("schema.spec.core", "simple-precondition");
    const__50 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s"), Symbol.intern(null, "f-sym")) })), RT.keyword(null, "doc"), "A simple precondition where f-sym names a predicate (e.g. (simple-precondition s map?))", RT.keyword(null, "line"), Integer.valueOf(56), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/spec/core.clj" });
    const__51 = (Var)RT.var("schema.spec.core", "run-checker");
    const__54 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "return-walked?"), Symbol.intern(null, "s")) })), RT.keyword(null, "doc"), "A helper to start a checking run, by setting the appropriate params.\n   For examples, see schema.core/checker or schema.coerce/coercer.", RT.keyword(null, "line"), Integer.valueOf(65), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/spec/core.clj" });
    const__55 = (Var)RT.var("schema.spec.core", "with-cache");
    const__58 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "cache"), Symbol.intern(null, "cache-key"), Symbol.intern(null, "wrap-recursive-delay"), Symbol.intern(null, "result-fn")) })), RT.keyword(null, "line"), Integer.valueOf(75), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/spec/core.clj" });
    const__59 = (Var)RT.var("schema.spec.core", "sub-checker");
    const__62 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "schema"), Symbol.intern(null, "error-wrap")) }), RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "subschema-checker"), Symbol.intern(null, "cache")), RT.keyword(null, "as"), Symbol.intern(null, "params") })) })), RT.keyword(null, "doc"), "Should be called recursively on each subschema in the 'checker' method of a spec.\n   Handles caching and error wrapping behavior.", RT.keyword(null, "line"), Integer.valueOf(85), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/spec/core.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("schema.spec.core__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
