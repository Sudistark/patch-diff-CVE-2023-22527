package schema.spec;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class variant__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__12;
  
  public static final Var const__13;
  
  public static final AFn const__17;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new variant.fn__21643());
    const__3.setMeta((IPersistentMap)const__12);
    const__3.bindRoot(new variant.option_step());
    const__13.setMeta((IPersistentMap)const__17);
    const__13.bindRoot(new variant.variant_spec());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "schema.spec.variant");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("schema.spec.variant", "option-step");
    const__12 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "o"), Symbol.intern(null, "params"), Symbol.intern(null, "else")) })), RT.keyword(null, "line"), Integer.valueOf(12), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/spec/variant.clj" });
    const__13 = (Var)RT.var("schema.spec.variant", "variant-spec");
    const__17 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pre"), Symbol.intern(null, "options")), Tuple.create(Symbol.intern(null, "pre"), Symbol.intern(null, "options"), Symbol.intern(null, "err-f")), Tuple.create(Symbol.intern(null, "pre"), Symbol.intern(null, "options"), Symbol.intern(null, "err-f"), Symbol.intern(null, "post")) })), RT.keyword(null, "doc"), "A variant spec represents a choice between a set of alternative\n   subschemas, e.g., a tagged union. It has an overall precondition,\n   set of options, and error function.\n\n   The semantics of `options` is that the options are processed in\n   order. During checking, the datum must match the schema for the\n   first option for which `guard` passes. During generation, any datum\n   generated from an option will pass the corresponding `guard`.\n\n   err-f is a function to produce an error message if none\n   of the guards match (and must be passed unless the last option has no\n   guard).", RT.keyword(null, "line"), Integer.valueOf(61), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/spec/variant.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("schema.spec.variant__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
