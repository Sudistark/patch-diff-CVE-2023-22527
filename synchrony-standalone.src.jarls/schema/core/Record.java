package schema.core;

import clojure.lang.AFn;
import clojure.lang.APersistentMap;
import clojure.lang.Associative;
import clojure.lang.Counted;
import clojure.lang.IFn;
import clojure.lang.IHashEq;
import clojure.lang.IKeywordLookup;
import clojure.lang.ILookup;
import clojure.lang.ILookupThunk;
import clojure.lang.IMapEntry;
import clojure.lang.IObj;
import clojure.lang.IPersistentCollection;
import clojure.lang.IPersistentMap;
import clojure.lang.IPersistentVector;
import clojure.lang.IRecord;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.KeywordLookupSite;
import clojure.lang.MapEntry;
import clojure.lang.Numbers;
import clojure.lang.PersistentHashSet;
import clojure.lang.RT;
import clojure.lang.RecordIterator;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Util;
import clojure.lang.Var;
import java.io.Serializable;
import java.util.Collection;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

public final class Record implements Schema, IRecord, IHashEq, IObj, ILookup, IKeywordLookup, IPersistentMap, Map, Serializable {
  public final Object klass;
  
  public final Object schema;
  
  public final Object __meta;
  
  public final Object __extmap;
  
  int __hash;
  
  int __hasheq;
  
  private static Class __cached_class__0;
  
  public static final Var const__0 = (Var)RT.var("clojure.core", "set");
  
  public static final Var const__1 = (Var)RT.var("clojure.core", "vals");
  
  public static final Var const__2 = (Var)RT.var("clojure.core", "keys");
  
  public static final Var const__4 = (Var)RT.var("clojure.core", "some");
  
  public static final Var const__8 = (Var)RT.var("clojure.core", "contains?");
  
  public static final Keyword const__9 = (Keyword)RT.keyword(null, "schema");
  
  public static final Keyword const__10 = (Keyword)RT.keyword(null, "klass");
  
  public static final AFn const__11 = (AFn)PersistentHashSet.create(new Object[] { RT.keyword(null, "schema"), RT.keyword(null, "klass") });
  
  public static final Var const__12 = (Var)RT.var("clojure.core", "dissoc");
  
  public static final Var const__13 = (Var)RT.var("clojure.core", "with-meta");
  
  public static final Var const__14 = (Var)RT.var("clojure.core", "into");
  
  public static final Var const__15 = (Var)RT.var("clojure.core", "not-empty");
  
  public static final Var const__16 = (Var)RT.var("clojure.core", "identical?");
  
  public static final Var const__17 = (Var)RT.var("clojure.core", "assoc");
  
  public static final AFn const__18 = (AFn)Tuple.create(RT.keyword(null, "klass"), RT.keyword(null, "schema"));
  
  public static final Var const__19 = (Var)RT.var("clojure.core", "seq");
  
  public static final Var const__20 = (Var)RT.var("clojure.core", "concat");
  
  public static final Var const__21 = (Var)RT.var("clojure.core", "not");
  
  public static final Var const__22 = (Var)RT.var("clojure.core", "class");
  
  public static final Var const__23 = (Var)RT.var("clojure.core", "imap-cons");
  
  public static final Var const__24 = (Var)RT.var("clojure.core", "str");
  
  public static final Var const__33 = (Var)RT.var("schema.spec.collection", "collection-spec");
  
  public static final Var const__34 = (Var)RT.var("schema.spec.core", "precondition");
  
  public static final Var const__36 = (Var)RT.var("clojure.core", "some-fn");
  
  public static final Var const__38 = (Var)RT.var("clojure.core", "meta");
  
  public static final Var const__39 = (Var)RT.var("schema.core", "map-elements");
  
  public static final Var const__40 = (Var)RT.var("schema.core", "map-error");
  
  public static final Var const__41 = (Var)RT.var("clojure.core", "list");
  
  public static final AFn const__42 = (AFn)Symbol.intern(null, "record");
  
  public static final Var const__43 = (Var)RT.var("clojure.core", "symbol");
  
  public static final Var const__44 = (Var)RT.var("schema.core", "explain");
  
  static final KeywordLookupSite __site__0__;
  
  static ILookupThunk __thunk__0__ = __site__0__ = new KeywordLookupSite(RT.keyword(null, "extra-validator-fn"));
  
  static final KeywordLookupSite __site__1__;
  
  static ILookupThunk __thunk__1__ = __site__1__ = new KeywordLookupSite(RT.keyword(null, "constructor"));
  
  public Record(Object paramObject1, Object paramObject2, Object paramObject3, Object paramObject4, int paramInt1, int paramInt2) { this.klass = paramObject1;
    this.schema = paramObject2;
    this.__meta = paramObject3;
    this.__extmap = paramObject4;
    this.__hash = paramInt1;
    this.__hasheq = paramInt2; }
  
  public Record(Object paramObject1, Object paramObject2) { this(paramObject1, paramObject2, null, null, 0, 0); }
  
  public Record(Object paramObject1, Object paramObject2, Object paramObject3, Object paramObject4) { this(paramObject1, paramObject2, paramObject3, paramObject4, 0, 0); }
  
  public static IPersistentVector getBasis() { return Tuple.create(Symbol.intern(null, "klass"), Symbol.intern(null, "schema")); }
  
  public static Record create(IPersistentMap paramIPersistentMap) {
    Object object1 = paramIPersistentMap.valAt(Keyword.intern("klass"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("klass"));
    Object object2 = paramIPersistentMap.valAt(Keyword.intern("schema"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("schema"));
    return new Record(object1, object2, null, RT.seqOrElse(paramIPersistentMap), 0, 0);
  }
  
  public Object explain() { if (Util.classOf(this.schema) != __cached_class__0)
      if (!(this.schema instanceof Schema)) {
        __cached_class__0 = Util.classOf(this.schema);
      } else {
        this = null;
        return ((IFn)const__41.getRawRoot()).invoke(const__42, ((IFn)const__43.getRawRoot()).invoke(((Class)this.klass).getName()), ((Schema)this.schema).explain());
      }   }
  
  public Object spec() { // Byte code:
    //   0: getstatic schema/core/Record.const__33 : Lclojure/lang/Var;
    //   3: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   6: checkcast clojure/lang/IFn
    //   9: getstatic schema/core/Record.const__34 : Lclojure/lang/Var;
    //   12: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   15: checkcast clojure/lang/IFn
    //   18: aload_0
    //   19: new schema/core/Record$fn__22794
    //   22: dup
    //   23: aload_0
    //   24: getfield klass : Ljava/lang/Object;
    //   27: invokespecial <init> : (Ljava/lang/Object;)V
    //   30: new schema/core/Record$fn__22796
    //   33: dup
    //   34: aload_0
    //   35: getfield klass : Ljava/lang/Object;
    //   38: invokespecial <init> : (Ljava/lang/Object;)V
    //   41: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   46: astore_1
    //   47: getstatic schema/core/Record.__thunk__0__ : Lclojure/lang/ILookupThunk;
    //   50: dup
    //   51: aload_0
    //   52: dup_x2
    //   53: invokeinterface get : (Ljava/lang/Object;)Ljava/lang/Object;
    //   58: dup_x2
    //   59: if_acmpeq -> 66
    //   62: pop
    //   63: goto -> 88
    //   66: swap
    //   67: pop
    //   68: dup
    //   69: getstatic schema/core/Record.__site__0__ : Lclojure/lang/KeywordLookupSite;
    //   72: swap
    //   73: invokeinterface fault : (Ljava/lang/Object;)Lclojure/lang/ILookupThunk;
    //   78: dup
    //   79: putstatic schema/core/Record.__thunk__0__ : Lclojure/lang/ILookupThunk;
    //   82: swap
    //   83: invokeinterface get : (Ljava/lang/Object;)Ljava/lang/Object;
    //   88: astore_2
    //   89: aload_2
    //   90: dup
    //   91: ifnull -> 149
    //   94: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   97: if_acmpeq -> 150
    //   100: aload_2
    //   101: aconst_null
    //   102: astore_2
    //   103: astore_3
    //   104: getstatic schema/core/Record.const__36 : Lclojure/lang/Var;
    //   107: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   110: checkcast clojure/lang/IFn
    //   113: aload_1
    //   114: aconst_null
    //   115: astore_1
    //   116: getstatic schema/core/Record.const__34 : Lclojure/lang/Var;
    //   119: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   122: checkcast clojure/lang/IFn
    //   125: aload_0
    //   126: aload_3
    //   127: aconst_null
    //   128: astore_3
    //   129: new schema/core/Record$fn__22798
    //   132: dup
    //   133: invokespecial <init> : ()V
    //   136: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   141: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   146: goto -> 153
    //   149: pop
    //   150: aload_1
    //   151: aconst_null
    //   152: astore_1
    //   153: getstatic schema/core/Record.__thunk__1__ : Lclojure/lang/ILookupThunk;
    //   156: dup
    //   157: getstatic schema/core/Record.const__38 : Lclojure/lang/Var;
    //   160: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   163: checkcast clojure/lang/IFn
    //   166: aload_0
    //   167: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   172: dup_x2
    //   173: invokeinterface get : (Ljava/lang/Object;)Ljava/lang/Object;
    //   178: dup_x2
    //   179: if_acmpeq -> 186
    //   182: pop
    //   183: goto -> 208
    //   186: swap
    //   187: pop
    //   188: dup
    //   189: getstatic schema/core/Record.__site__1__ : Lclojure/lang/KeywordLookupSite;
    //   192: swap
    //   193: invokeinterface fault : (Ljava/lang/Object;)Lclojure/lang/ILookupThunk;
    //   198: dup
    //   199: putstatic schema/core/Record.__thunk__1__ : Lclojure/lang/ILookupThunk;
    //   202: swap
    //   203: invokeinterface get : (Ljava/lang/Object;)Ljava/lang/Object;
    //   208: getstatic schema/core/Record.const__39 : Lclojure/lang/Var;
    //   211: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   214: checkcast clojure/lang/IFn
    //   217: aload_0
    //   218: getfield schema : Ljava/lang/Object;
    //   221: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   226: getstatic schema/core/Record.const__40 : Lclojure/lang/Var;
    //   229: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   232: checkcast clojure/lang/IFn
    //   235: invokeinterface invoke : ()Ljava/lang/Object;
    //   240: aconst_null
    //   241: astore_0
    //   242: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   247: areturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #1004	-> 0
    //   #1007	-> 6
    //   #1008	-> 15
    //   #1008	-> 41
    //   #1009	-> 47
    //   #1009	-> 52
    //   #1009	-> 89
    //   #1010	-> 110
    //   #1010	-> 122
    //   #1010	-> 136
    //   #1010	-> 141
    //   #1012	-> 153
    //   #1012	-> 163
    //   #1012	-> 167
    //   #1012	-> 172
    //   #1013	-> 214
    //   #1013	-> 221
    //   #1014	-> 232
    //   #1014	-> 235
    //   #1007	-> 240
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   104	42	3	evf	Ljava/lang/Object;
    //   89	64	2	temp__5733__auto__22801	Ljava/lang/Object;
    //   47	106	1	p	Ljava/lang/Object;
    //   0	247	0	this	Lschema/core/Record; }
  
  public int hasheq() {
    int hq__7768__auto__22803 = this.__hasheq, h__7769__auto__22802 = RT.intCast(0xFFFFFFFFC11F02BFL ^ APersistentMap.mapHasheq((IPersistentMap)this));
    this.__hasheq = h__7769__auto__22802;
    return (hq__7768__auto__22803 == 0L) ? h__7769__auto__22802 : hq__7768__auto__22803;
  }
  
  public int hashCode() {
    int hash__7771__auto__22805 = this.__hash, h__7772__auto__22804 = APersistentMap.mapHash((IPersistentMap)this);
    this.__hash = h__7772__auto__22804;
    return (hash__7771__auto__22805 == 0L) ? h__7772__auto__22804 : hash__7771__auto__22805;
  }
  
  public boolean equals(Object G__22784) { G__22784 = null;
    return APersistentMap.mapEquals((IPersistentMap)this, G__22784); }
  
  public IPersistentMap meta() { return (IPersistentMap)this.__meta; }
  
  public IObj withMeta(IPersistentMap G__22784) { G__22784 = null;
    return (IObj)new Record(this.klass, this.schema, G__22784, this.__extmap, this.__hash, this.__hasheq); }
  
  public Object valAt(Object k__7777__auto__) { k__7777__auto__ = null;
    return ((ILookup)this).valAt(k__7777__auto__, null); }
  
  public Object valAt(Object k__7779__auto__, Object else__7780__auto__) {
    Object G__22793 = k__7779__auto__;
    switch (Util.hash(G__22793) >> 0 & true) {
      case 0:
        if (G__22793 == const__10);
        break;
      case 1:
        if (G__22793 == const__9);
        break;
    } 
    k__7779__auto__ = null;
    else__7780__auto__ = null;
    this = null;
    return RT.get(this.__extmap, k__7779__auto__, else__7780__auto__);
  }
  
  public ILookupThunk getLookupThunk(Keyword k__7782__auto__) {
    Object gclass = ((IFn)const__22.getRawRoot()).invoke(this), G__22788 = k__7782__auto__ = null;
    switch (Util.hash(G__22788) >> 0 & true) {
      case 0:
        if (G__22788 == const__10)
          gclass = null; 
        break;
      case 1:
        if (G__22788 == const__9)
          gclass = null; 
        break;
    } 
    return (ILookupThunk)null;
  }
  
  public int count() { return RT.intCast(Numbers.add(2L, RT.count(this.__extmap))); }
  
  public IPersistentCollection empty() { throw (Throwable)new UnsupportedOperationException((String)((IFn)const__24.getRawRoot()).invoke("Can't create empty: ", "schema.core.Record")); }
  
  public IPersistentCollection cons(Object e__7786__auto__) { e__7786__auto__ = null;
    this = null;
    return (IPersistentCollection)((IFn)const__23).invoke(this, e__7786__auto__); }
  
  public boolean equiv(Object G__22784) {
    boolean or__5516__auto__22808 = Util.identical(this, G__22784);
    Object G__22784 = G__22784 = null;
    boolean and__5514__auto__22807 = Util.equiv(this.klass, ((Record)G__22784).klass), and__5514__auto__22806 = Util.equiv(this.schema, ((Record)G__22784).schema);
    G__22784 = null;
    return RT.booleanCast(or__5516__auto__22808 ? (or__5516__auto__22808 ? Boolean.TRUE : Boolean.FALSE) : (Util.identical(((IFn)const__22.getRawRoot()).invoke(this), ((IFn)const__22.getRawRoot()).invoke(G__22784)) ? (and__5514__auto__22807 ? (and__5514__auto__22806 ? (Util.equiv(this.__extmap, ((Record)G__22784).__extmap) ? Boolean.TRUE : Boolean.FALSE) : (and__5514__auto__22806 ? Boolean.TRUE : Boolean.FALSE)) : (and__5514__auto__22807 ? Boolean.TRUE : Boolean.FALSE)) : null));
  }
  
  public boolean containsKey(Object k__7789__auto__) { k__7789__auto__ = null;
    this = null;
    return ((Boolean)((IFn)const__21.getRawRoot()).invoke(Util.identical(this, ((ILookup)this).valAt(k__7789__auto__, this)) ? Boolean.TRUE : Boolean.FALSE)).booleanValue(); }
  
  public IMapEntry entryAt(Object k__7791__auto__) {
    Object v__7792__auto__22809 = ((ILookup)this).valAt(k__7791__auto__, this);
    k__7791__auto__ = null;
    v__7792__auto__22809 = null;
    this = null;
    return (IMapEntry)(Util.identical(this, v__7792__auto__22809) ? null : MapEntry.create(k__7791__auto__, v__7792__auto__22809));
  }
  
  public ISeq seq() { this = null;
    return (ISeq)((IFn)const__19.getRawRoot()).invoke(((IFn)const__20.getRawRoot()).invoke(Tuple.create(MapEntry.create(const__10, this.klass), MapEntry.create(const__9, this.schema)), this.__extmap)); }
  
  public Iterator iterator() { return (Iterator)new RecordIterator((ILookup)this, (IPersistentVector)const__18, (Iterator)RT.iter(this.__extmap)); }
  
  public IPersistentMap assoc(Object k__7796__auto__, Object G__22784) {
    Object pred__22786 = const__16.getRawRoot(), expr__22787 = k__7796__auto__;
    if (((IFn)pred__22786).invoke(const__10, expr__22787) != null) {
      if (((IFn)pred__22786).invoke(const__10, expr__22787) != Boolean.FALSE)
        G__22784 = null; 
    } else {
      ((IFn)pred__22786).invoke(const__10, expr__22787);
    } 
    pred__22786 = null;
    expr__22787 = null;
    if (((IFn)pred__22786).invoke(const__9, expr__22787) != null) {
      if (((IFn)pred__22786).invoke(const__9, expr__22787) != Boolean.FALSE)
        G__22784 = null; 
    } else {
      ((IFn)pred__22786).invoke(const__9, expr__22787);
    } 
    k__7796__auto__ = null;
    G__22784 = null;
    return (IPersistentMap)new Record(this.klass, this.schema, this.__meta, ((IFn)const__17.getRawRoot()).invoke(this.__extmap, k__7796__auto__, G__22784));
  }
  
  public IPersistentMap without(Object k__7798__auto__) { if (((IFn)const__8.getRawRoot()).invoke(const__11, k__7798__auto__) != null) {
      if (((IFn)const__8.getRawRoot()).invoke(const__11, k__7798__auto__) != Boolean.FALSE) {
        k__7798__auto__ = null;
        this = null;
      } 
    } else {
      ((IFn)const__8.getRawRoot()).invoke(const__11, k__7798__auto__);
    } 
    k__7798__auto__ = null;
    return (IPersistentMap)new Record(this.klass, this.schema, this.__meta, ((IFn)const__15.getRawRoot()).invoke(((IFn)const__12.getRawRoot()).invoke(this.__extmap, k__7798__auto__))); }
  
  public int size() { this = null;
    return ((Counted)this).count(); }
  
  public boolean isEmpty() { return Util.equiv(0L, ((Counted)this).count()); }
  
  public boolean containsValue(Object v__7802__auto__) { v__7802__auto__ = null;
    return RT.booleanCast(((IFn)const__4.getRawRoot()).invoke(RT.set(new Object[] { v__7802__auto__ }, ), ((IFn)const__1.getRawRoot()).invoke(this))); }
  
  public Object get(Object k__7804__auto__) { k__7804__auto__ = null;
    return ((ILookup)this).valAt(k__7804__auto__); }
  
  public Object put(Object k__7806__auto__, Object v__7807__auto__) { throw (Throwable)new UnsupportedOperationException(); }
  
  public Object remove(Object k__7809__auto__) { throw (Throwable)new UnsupportedOperationException(); }
  
  public void putAll(Map m__7811__auto__) { throw (Throwable)new UnsupportedOperationException(); }
  
  public void clear() { throw (Throwable)new UnsupportedOperationException(); }
  
  public Set keySet() { this = null;
    return (Set)((IFn)const__0.getRawRoot()).invoke(((IFn)const__2.getRawRoot()).invoke(this)); }
  
  public Collection values() { this = null;
    return (Collection)((IFn)const__1.getRawRoot()).invoke(this); }
  
  public Set entrySet() { this = null;
    return (Set)((IFn)const__0.getRawRoot()).invoke(this); }
}
