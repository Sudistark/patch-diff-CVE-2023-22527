package manifold;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class debug__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__3;
  
  public static final AFn const__4;
  
  public static final Var const__5;
  
  public static final AFn const__12;
  
  public static final Var const__13;
  
  public static final AFn const__17;
  
  public static final Var const__18;
  
  public static final AFn const__21;
  
  public static void load() { LockingTransaction.runInTransaction((Callable)new debug.fn__15067());
    const__5.setDynamic(true).setMeta((IPersistentMap)const__12);
    const__5.setDynamic(true).bindRoot(Boolean.TRUE);
    const__13.setMeta((IPersistentMap)const__17);
    const__13.bindRoot(new debug.enable_dropped_error_logging_BANG_());
    const__18.setMeta((IPersistentMap)const__21);
    const__18.bindRoot(new debug.disable_dropped_error_logging_BANG_()); }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "manifold.debug")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE }));
    const__3 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE });
    const__4 = (AFn)Symbol.intern(null, "clojure.core");
    const__5 = (Var)RT.var("manifold.debug", "*dropped-error-logging-enabled?*");
    const__12 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(4), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "manifold/debug.clj" });
    const__13 = (Var)RT.var("manifold.debug", "enable-dropped-error-logging!");
    const__17 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(6), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "manifold/debug.clj" });
    const__18 = (Var)RT.var("manifold.debug", "disable-dropped-error-logging!");
    const__21 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(9), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "manifold/debug.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("manifold.debug__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
