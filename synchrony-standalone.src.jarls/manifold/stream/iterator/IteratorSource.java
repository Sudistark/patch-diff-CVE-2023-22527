package manifold.stream.iterator;

import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.IPersistentVector;
import clojure.lang.IReference;
import clojure.lang.ISeq;
import clojure.lang.IType;
import clojure.lang.Keyword;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Util;
import clojure.lang.Var;
import java.io.Closeable;
import java.util.Iterator;
import java.util.concurrent.atomic.AtomicReference;
import java.util.concurrent.locks.Lock;
import manifold.deferred.IDeferred;
import manifold.stream.core.IEventSource;
import manifold.stream.core.IEventStream;

public final class IteratorSource implements IEventSource, IReference, IEventStream, IType {
  public final Object iterator;
  
  public final Object last_take;
  
  public final Object lock;
  
  public final Object __drainedCallbacks;
  
  public static final Var const__1 = (Var)RT.var("manifold.deferred", "timeout!");
  
  public static final Var const__2 = (Var)RT.var("clojure.core", "deref");
  
  public static final Keyword const__5 = (Keyword)RT.keyword(null, "type");
  
  public static final Keyword const__6 = (Keyword)RT.keyword(null, "drained?");
  
  public static final Var const__8 = (Var)RT.var("clojure.core", "apply"), const__9 = (Var)RT.var("manifold.stream.graph", "downstream"), const__10 = (Var)RT.var("manifold.deferred", "deferred"), const__13 = (Var)RT.var("manifold.utils", "invoke-callbacks");
  
  public IteratorSource(Object paramObject1, Object paramObject2, Object paramObject3, Object paramObject4, Object paramObject5, Object paramObject6, Object paramObject7) { this.iterator = paramObject1;
    this.last_take = paramObject2;
    this.lock = paramObject3;
    this.__mta = paramObject4;
    this.__isDrained = paramObject5;
    this.__drainedCallbacks = paramObject6;
    this.__weakHandle = paramObject7; }
  
  public static IPersistentVector getBasis() { return RT.vector(new Object[] { ((IObj)Symbol.intern(null, "iterator")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Iterator") })), ((IObj)Symbol.intern(null, "last-take")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "AtomicReference") })), Symbol.intern(null, "lock"), ((IObj)Symbol.intern(null, "__mta")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "volatile-mutable"), Boolean.TRUE })), ((IObj)Symbol.intern(null, "__isDrained")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "volatile-mutable"), Boolean.TRUE })), ((IObj)Symbol.intern(null, "__drainedCallbacks")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "java.util.LinkedList") })), ((IObj)Symbol.intern(null, "__weakHandle")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "volatile-mutable"), Boolean.TRUE })) }); }
  
  public Object markDrained() {
    Object object;
    lock__14923__auto__16049 = this.lock;
    ((Lock)lock__14923__auto__16049).lock();
    null;
    try {
      this.__isDrained = Boolean.TRUE;
      object = ((IFn)const__13.getRawRoot()).invoke(this.__drainedCallbacks);
    } finally {
      lock__14923__auto__16049 = null;
      ((Lock)lock__14923__auto__16049).unlock();
      null;
    } 
    return object;
  }
  
  public Object isDrained() { return this.__isDrained; }
  
  public Object take(Object default_val, Object blocking_QMARK_) {
    blocking_QMARK_ = null;
    if (blocking_QMARK_ != null) {
      if (blocking_QMARK_ != Boolean.FALSE) {
        ((IEventSource)this)
          
          .markDrained();
        default_val = null;
        return ((Iterator)this.iterator).hasNext() ? ((Iterator)this.iterator).next() : default_val;
      } 
    } else {
      blocking_QMARK_;
    } 
    d = ((IFn)const__10.getRawRoot()).invoke();
    Object d_SINGLEQUOTE_ = ((AtomicReference)this.last_take).getAndSet(d);
    default_val = null;
    Object f = new f__16040(this, default_val, d, this.iterator);
    if (((IDeferred)d_SINGLEQUOTE_).realized()) {
      f = null;
      ((IFn)f)
        .invoke(null);
    } else {
      Object x__15114__auto__16050 = d_SINGLEQUOTE_ = null;
      f = null;
      ((IDeferred)x__15114__auto__16050)
        .onRealized(f, f);
    } 
    return null;
  }
  
  public Object onDrained(Object callback__15726__auto__) { // Byte code:
    //   0: aload_0
    //   1: getfield lock : Ljava/lang/Object;
    //   4: astore_2
    //   5: aload_2
    //   6: checkcast java/util/concurrent/locks/Lock
    //   9: invokeinterface lock : ()V
    //   14: aconst_null
    //   15: pop
    //   16: aload_0
    //   17: getfield __isDrained : Ljava/lang/Object;
    //   20: dup
    //   21: ifnull -> 44
    //   24: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   27: if_acmpeq -> 45
    //   30: aload_1
    //   31: aconst_null
    //   32: astore_1
    //   33: checkcast clojure/lang/IFn
    //   36: invokeinterface invoke : ()Ljava/lang/Object;
    //   41: goto -> 70
    //   44: pop
    //   45: aload_0
    //   46: getfield __drainedCallbacks : Ljava/lang/Object;
    //   49: checkcast java/util/LinkedList
    //   52: aload_1
    //   53: aconst_null
    //   54: astore_1
    //   55: invokevirtual add : (Ljava/lang/Object;)Z
    //   58: ifeq -> 67
    //   61: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   64: goto -> 70
    //   67: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   70: astore_3
    //   71: aload_2
    //   72: aconst_null
    //   73: astore_2
    //   74: checkcast java/util/concurrent/locks/Lock
    //   77: invokeinterface unlock : ()V
    //   82: aconst_null
    //   83: pop
    //   84: goto -> 105
    //   87: astore #4
    //   89: aload_2
    //   90: aconst_null
    //   91: astore_2
    //   92: checkcast java/util/concurrent/locks/Lock
    //   95: invokeinterface unlock : ()V
    //   100: aconst_null
    //   101: pop
    //   102: aload #4
    //   104: athrow
    //   105: aload_3
    //   106: areturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #18	-> 0
    //   #18	-> 9
    //   #18	-> 16
    //   #18	-> 33
    //   #18	-> 36
    //   #18	-> 55
    //   #18	-> 77
    //   #18	-> 95
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   5	101	2	lock__14923__auto__16051	Ljava/lang/Object;
    //   0	106	0	this	Lmanifold/stream/iterator/IteratorSource;
    //   0	106	1	callback__15726__auto__	Ljava/lang/Object;
    // Exception table:
    //   from	to	target	type
    //   16	71	87	finally }
  
  public Object downstream() { this = null;
    return ((IFn)const__9.getRawRoot()).invoke(this); }
  
  public IPersistentMap alterMeta(IFn f__15719__auto__, ISeq args__15720__auto__) {
    Object lock__14925__auto__16053 = this.lock;
    ((Lock)lock__14925__auto__16053).lock();
    null;
    f__15719__auto__ = null;
    args__15720__auto__ = null;
    Object x__14926__auto__16052 = this.__mta = ((IFn)const__8.getRawRoot()).invoke(f__15719__auto__, this.__mta, args__15720__auto__);
    lock__14925__auto__16053 = null;
    ((Lock)lock__14925__auto__16053).unlock();
    null;
    x__14926__auto__16052 = null;
    return (IPersistentMap)x__14926__auto__16052;
  }
  
  public Object description() { return RT.mapUniqueKeys(new Object[] { const__5, "iterator", const__6, ((IEventSource)this).isDrained() }); }
  
  public Object isSynchronous() { return Boolean.TRUE; }
  
  public Object close() { ((Closeable)this.iterator).close();
    return (this.iterator instanceof Closeable) ? null : null; }
  
  public IPersistentMap resetMeta(IPersistentMap m__15718__auto__) {
    Object lock__14925__auto__16055 = this.lock;
    ((Lock)lock__14925__auto__16055).lock();
    null;
    Object x__14926__auto__16054 = this.__mta = m__15718__auto__ = null;
    lock__14925__auto__16055 = null;
    ((Lock)lock__14925__auto__16055).unlock();
    null;
    x__14926__auto__16054 = null;
    return (IPersistentMap)x__14926__auto__16054;
  }
  
  public Object connector(Object ___15727__auto__) { return null; }
  
  public IPersistentMap meta() { return (IPersistentMap)this.__mta; }
  
  public Object take(Object default_val, Object blocking_QMARK_, Object timeout, Object timeout_val) {
    blocking_QMARK_ = null;
    default_val = null;
    default_val = null;
    timeout = null;
    timeout_val = null;
    Object d = ((IFn)const__1.getRawRoot()).invoke(((IEventSource)this).take(default_val, Boolean.FALSE), timeout, timeout_val);
    blocking_QMARK_ = null;
    if (blocking_QMARK_ != null) {
      if (blocking_QMARK_ != Boolean.FALSE) {
        d = null;
        this = null;
      } 
    } else {
      blocking_QMARK_;
    } 
    d = null;
    return Util.identical(timeout, null) ? ((IEventSource)this).take(blocking_QMARK_, default_val) : d;
  }
  
  public Object weakHandle(Object ref_queue__15722__auto__) { // Byte code:
    //   0: aload_0
    //   1: getfield lock : Ljava/lang/Object;
    //   4: astore_2
    //   5: aload_2
    //   6: checkcast java/util/concurrent/locks/Lock
    //   9: invokeinterface lock : ()V
    //   14: aconst_null
    //   15: pop
    //   16: aload_0
    //   17: getfield __weakHandle : Ljava/lang/Object;
    //   20: astore_3
    //   21: aload_3
    //   22: dup
    //   23: ifnull -> 38
    //   26: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   29: if_acmpeq -> 39
    //   32: aload_3
    //   33: aconst_null
    //   34: astore_3
    //   35: goto -> 61
    //   38: pop
    //   39: aload_0
    //   40: new java/lang/ref/WeakReference
    //   43: dup
    //   44: aload_0
    //   45: aload_1
    //   46: aconst_null
    //   47: astore_1
    //   48: checkcast java/lang/ref/ReferenceQueue
    //   51: invokespecial <init> : (Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;)V
    //   54: putfield __weakHandle : Ljava/lang/Object;
    //   57: aload_0
    //   58: getfield __weakHandle : Ljava/lang/Object;
    //   61: astore #4
    //   63: aload_2
    //   64: aconst_null
    //   65: astore_2
    //   66: checkcast java/util/concurrent/locks/Lock
    //   69: invokeinterface unlock : ()V
    //   74: aconst_null
    //   75: pop
    //   76: goto -> 97
    //   79: astore #5
    //   81: aload_2
    //   82: aconst_null
    //   83: astore_2
    //   84: checkcast java/util/concurrent/locks/Lock
    //   87: invokeinterface unlock : ()V
    //   92: aconst_null
    //   93: pop
    //   94: aload #5
    //   96: athrow
    //   97: aload #4
    //   99: areturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #18	-> 0
    //   #18	-> 9
    //   #18	-> 21
    //   #18	-> 69
    //   #18	-> 87
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   21	40	3	or__5516__auto__16056	Ljava/lang/Object;
    //   5	94	2	lock__14923__auto__16057	Ljava/lang/Object;
    //   0	99	0	this	Lmanifold/stream/iterator/IteratorSource;
    //   0	99	1	ref_queue__15722__auto__	Ljava/lang/Object;
    // Exception table:
    //   from	to	target	type
    //   16	63	79	finally }
}
