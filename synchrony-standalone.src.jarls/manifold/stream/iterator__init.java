package manifold.stream;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class iterator__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__3;
  
  public static final AFn const__4;
  
  public static final Var const__5;
  
  public static final AFn const__14;
  
  public static final Var const__15;
  
  public static final Object const__16;
  
  public static final Var const__17;
  
  public static final Keyword const__18;
  
  public static final Object const__19;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new iterator.fn__16037());
    const__5.setMeta((IPersistentMap)const__14);
    const__5.bindRoot(new iterator.__GT_IteratorSource());
    new Object[2][0] = const__18;
    new Object[2][1] = new iterator.fn__16064();
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "manifold.stream.iterator")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE }));
    const__3 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE });
    const__4 = (AFn)Symbol.intern(null, "clojure.core");
    const__5 = (Var)RT.var("manifold.stream.iterator", "->IteratorSource");
    const__14 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "iterator"), Symbol.intern(null, "last-take")) })), RT.keyword(null, "line"), Integer.valueOf(18), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "manifold/stream/iterator.clj" });
    const__15 = (Var)RT.var("clojure.core", "extend");
    const__16 = RT.classForName("java.util.Iterator");
    const__17 = (Var)RT.var("manifold.stream.core", "Sourceable");
    const__18 = (Keyword)RT.keyword(null, "to-source");
    const__19 = RT.classForName("java.util.stream.BaseStream");
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("manifold.stream.iterator__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
