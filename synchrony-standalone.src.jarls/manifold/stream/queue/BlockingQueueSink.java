package manifold.stream.queue;

import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.IPersistentVector;
import clojure.lang.IReference;
import clojure.lang.ISeq;
import clojure.lang.IType;
import clojure.lang.Keyword;
import clojure.lang.Numbers;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Util;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.Collection;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.atomic.AtomicReference;
import java.util.concurrent.locks.Lock;
import manifold.deferred.IDeferred;
import manifold.stream.core.IEventSink;
import manifold.stream.core.IEventStream;

public final class BlockingQueueSink implements IReference, IEventSink, IEventStream, IType {
  public final Object queue;
  
  public final Object last_put;
  
  public final Object lock;
  
  public final Object __closedCallbacks;
  
  public static final Var const__0 = (Var)RT.var("clojure.core", "not");
  
  public static final Var const__2 = (Var)RT.var("clojure.core", "str");
  
  public static final Var const__3 = (Var)RT.var("clojure.core", "pr-str");
  
  public static final Object const__4 = ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "not"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "nil?"), Symbol.intern(null, "x") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(96), RT.keyword(null, "column"), Integer.valueOf(18) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(96), RT.keyword(null, "column"), Integer.valueOf(13) }));
  
  public static final Var const__5 = (Var)RT.var("manifold.deferred", "deferred");
  
  public static final Keyword const__8 = (Keyword)RT.keyword(null, "type");
  
  public static final Var const__9 = (Var)RT.var("clojure.core", "class");
  
  public static final Keyword const__10 = (Keyword)RT.keyword(null, "buffer-capacity");
  
  public static final Keyword const__12 = (Keyword)RT.keyword(null, "buffer-size");
  
  public static final Keyword const__13 = (Keyword)RT.keyword(null, "sink?");
  
  public static final Keyword const__14 = (Keyword)RT.keyword(null, "closed?");
  
  public static final Var const__15 = (Var)RT.var("clojure.core", "apply");
  
  public static final Var const__16 = (Var)RT.var("manifold.stream.graph", "downstream");
  
  public static final Object const__17 = ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "not"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "nil?"), Symbol.intern(null, "x") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(128), RT.keyword(null, "column"), Integer.valueOf(18) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(128), RT.keyword(null, "column"), Integer.valueOf(13) }));
  
  public static final Var const__18 = (Var)RT.var("manifold.utils", "invoke-callbacks");
  
  public BlockingQueueSink(Object paramObject1, Object paramObject2, Object paramObject3, Object paramObject4, Object paramObject5, Object paramObject6, Object paramObject7) { this.queue = paramObject1;
    this.last_put = paramObject2;
    this.lock = paramObject3;
    this.__mta = paramObject4;
    this.__isClosed = paramObject5;
    this.__closedCallbacks = paramObject6;
    this.__weakHandle = paramObject7; }
  
  public static IPersistentVector getBasis() { return RT.vector(new Object[] { ((IObj)Symbol.intern(null, "queue")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "BlockingQueue") })), ((IObj)Symbol.intern(null, "last-put")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "AtomicReference") })), Symbol.intern(null, "lock"), ((IObj)Symbol.intern(null, "__mta")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "volatile-mutable"), Boolean.TRUE })), ((IObj)Symbol.intern(null, "__isClosed")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "volatile-mutable"), Boolean.TRUE })), ((IObj)Symbol.intern(null, "__closedCallbacks")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "java.util.LinkedList") })), ((IObj)Symbol.intern(null, "__weakHandle")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "volatile-mutable"), Boolean.TRUE })) }); }
  
  public Object onClosed(Object callback__15724__auto__) { // Byte code:
    //   0: aload_0
    //   1: getfield lock : Ljava/lang/Object;
    //   4: astore_2
    //   5: aload_2
    //   6: checkcast java/util/concurrent/locks/Lock
    //   9: invokeinterface lock : ()V
    //   14: aconst_null
    //   15: pop
    //   16: aload_0
    //   17: getfield __isClosed : Ljava/lang/Object;
    //   20: dup
    //   21: ifnull -> 44
    //   24: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   27: if_acmpeq -> 45
    //   30: aload_1
    //   31: aconst_null
    //   32: astore_1
    //   33: checkcast clojure/lang/IFn
    //   36: invokeinterface invoke : ()Ljava/lang/Object;
    //   41: goto -> 70
    //   44: pop
    //   45: aload_0
    //   46: getfield __closedCallbacks : Ljava/lang/Object;
    //   49: checkcast java/util/LinkedList
    //   52: aload_1
    //   53: aconst_null
    //   54: astore_1
    //   55: invokevirtual add : (Ljava/lang/Object;)Z
    //   58: ifeq -> 67
    //   61: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   64: goto -> 70
    //   67: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   70: astore_3
    //   71: aload_2
    //   72: aconst_null
    //   73: astore_2
    //   74: checkcast java/util/concurrent/locks/Lock
    //   77: invokeinterface unlock : ()V
    //   82: aconst_null
    //   83: pop
    //   84: goto -> 105
    //   87: astore #4
    //   89: aload_2
    //   90: aconst_null
    //   91: astore_2
    //   92: checkcast java/util/concurrent/locks/Lock
    //   95: invokeinterface unlock : ()V
    //   100: aconst_null
    //   101: pop
    //   102: aload #4
    //   104: athrow
    //   105: aload_3
    //   106: areturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #76	-> 0
    //   #76	-> 9
    //   #76	-> 16
    //   #76	-> 33
    //   #76	-> 36
    //   #76	-> 55
    //   #76	-> 77
    //   #76	-> 95
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   5	101	2	lock__14923__auto__16126	Ljava/lang/Object;
    //   0	106	0	this	Lmanifold/stream/queue/BlockingQueueSink;
    //   0	106	1	callback__15724__auto__	Ljava/lang/Object;
    // Exception table:
    //   from	to	target	type
    //   16	71	87	finally }
  
  public Object markClosed() {
    Object object;
    lock__14923__auto__16127 = this.lock;
    ((Lock)lock__14923__auto__16127).lock();
    null;
    try {
      this.__isClosed = Boolean.TRUE;
      object = ((IFn)const__18.getRawRoot()).invoke(this.__closedCallbacks);
    } finally {
      lock__14923__auto__16127 = null;
      ((Lock)lock__14923__auto__16127).unlock();
      null;
    } 
    return object;
  }
  
  public Object put(Object x, Object blocking_QMARK_, Object timeout, Object timeout_val) {
    if (((IFn)const__0.getRawRoot()).invoke(Util.identical(x, null) ? Boolean.TRUE : Boolean.FALSE) != null) {
      if (((IFn)const__0.getRawRoot()).invoke(Util.identical(x, null) ? Boolean.TRUE : Boolean.FALSE) != Boolean.FALSE) {
        null;
      } else {
        throw (Throwable)new AssertionError(((IFn)const__2.getRawRoot()).invoke("Assert failed: ", "BlockingQueue cannot take `nil` as a message", "\n", ((IFn)const__3.getRawRoot()).invoke(const__17)));
      } 
    } else {
      ((IFn)const__0.getRawRoot()).invoke(Util.identical(x, null) ? Boolean.TRUE : Boolean.FALSE);
      throw (Throwable)new AssertionError(((IFn)const__2.getRawRoot()).invoke("Assert failed: ", "BlockingQueue cannot take `nil` as a message", "\n", ((IFn)const__3.getRawRoot()).invoke(const__17)));
    } 
    blocking_QMARK_ = null;
    if (blocking_QMARK_ != null) {
      if (blocking_QMARK_ != Boolean.FALSE) {
        x = null;
        timeout = null;
      } 
    } else {
      blocking_QMARK_;
    } 
    d = ((IFn)const__5.getRawRoot()).invoke();
    Object d_SINGLEQUOTE_ = ((AtomicReference)this.last_put).getAndSet(d);
    x = null;
    timeout = null;
    Object f = new f__16113(d, this.lock, this, x, this.queue, timeout);
    if (((IDeferred)d_SINGLEQUOTE_).realized()) {
      f = null;
      ((IFn)f)
        .invoke(null);
    } else {
      Object x__15114__auto__16128 = d_SINGLEQUOTE_ = null;
      f = null;
      ((IDeferred)x__15114__auto__16128)
        .onRealized(f, f);
    } 
    return null;
  }
  
  public Object isClosed() { return this.__isClosed; }
  
  public Object downstream() { this = null;
    return ((IFn)const__16.getRawRoot()).invoke(this); }
  
  public IPersistentMap alterMeta(IFn f__15719__auto__, ISeq args__15720__auto__) {
    Object lock__14925__auto__16130 = this.lock;
    ((Lock)lock__14925__auto__16130).lock();
    null;
    f__15719__auto__ = null;
    args__15720__auto__ = null;
    Object x__14926__auto__16129 = this.__mta = ((IFn)const__15.getRawRoot()).invoke(f__15719__auto__, this.__mta, args__15720__auto__);
    lock__14925__auto__16130 = null;
    ((Lock)lock__14925__auto__16130).unlock();
    null;
    x__14926__auto__16129 = null;
    return (IPersistentMap)x__14926__auto__16129;
  }
  
  public Object description() {
    int size = ((Collection)this.queue).size();
    return RT.mapUniqueKeys(new Object[] { const__8, ((Class)((IFn)const__9.getRawRoot()).invoke(this.queue)).getCanonicalName(), const__10, Numbers.num(Numbers.add(((BlockingQueue)this.queue).remainingCapacity(), size)), const__12, Integer.valueOf(size), const__13, Boolean.TRUE, const__14, ((IEventSink)this).isClosed() });
  }
  
  public Object isSynchronous() { return Boolean.TRUE; }
  
  public Object close() { return ((IEventSink)this).markClosed(); }
  
  public IPersistentMap resetMeta(IPersistentMap m__15718__auto__) {
    Object lock__14925__auto__16132 = this.lock;
    ((Lock)lock__14925__auto__16132).lock();
    null;
    Object x__14926__auto__16131 = this.__mta = m__15718__auto__ = null;
    lock__14925__auto__16132 = null;
    ((Lock)lock__14925__auto__16132).unlock();
    null;
    x__14926__auto__16131 = null;
    return (IPersistentMap)x__14926__auto__16131;
  }
  
  public IPersistentMap meta() { return (IPersistentMap)this.__mta; }
  
  public Object weakHandle(Object ref_queue__15722__auto__) { // Byte code:
    //   0: aload_0
    //   1: getfield lock : Ljava/lang/Object;
    //   4: astore_2
    //   5: aload_2
    //   6: checkcast java/util/concurrent/locks/Lock
    //   9: invokeinterface lock : ()V
    //   14: aconst_null
    //   15: pop
    //   16: aload_0
    //   17: getfield __weakHandle : Ljava/lang/Object;
    //   20: astore_3
    //   21: aload_3
    //   22: dup
    //   23: ifnull -> 38
    //   26: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   29: if_acmpeq -> 39
    //   32: aload_3
    //   33: aconst_null
    //   34: astore_3
    //   35: goto -> 61
    //   38: pop
    //   39: aload_0
    //   40: new java/lang/ref/WeakReference
    //   43: dup
    //   44: aload_0
    //   45: aload_1
    //   46: aconst_null
    //   47: astore_1
    //   48: checkcast java/lang/ref/ReferenceQueue
    //   51: invokespecial <init> : (Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;)V
    //   54: putfield __weakHandle : Ljava/lang/Object;
    //   57: aload_0
    //   58: getfield __weakHandle : Ljava/lang/Object;
    //   61: astore #4
    //   63: aload_2
    //   64: aconst_null
    //   65: astore_2
    //   66: checkcast java/util/concurrent/locks/Lock
    //   69: invokeinterface unlock : ()V
    //   74: aconst_null
    //   75: pop
    //   76: goto -> 97
    //   79: astore #5
    //   81: aload_2
    //   82: aconst_null
    //   83: astore_2
    //   84: checkcast java/util/concurrent/locks/Lock
    //   87: invokeinterface unlock : ()V
    //   92: aconst_null
    //   93: pop
    //   94: aload #5
    //   96: athrow
    //   97: aload #4
    //   99: areturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #76	-> 0
    //   #76	-> 9
    //   #76	-> 21
    //   #76	-> 69
    //   #76	-> 87
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   21	40	3	or__5516__auto__16133	Ljava/lang/Object;
    //   5	94	2	lock__14923__auto__16134	Ljava/lang/Object;
    //   0	99	0	this	Lmanifold/stream/queue/BlockingQueueSink;
    //   0	99	1	ref_queue__15722__auto__	Ljava/lang/Object;
    // Exception table:
    //   from	to	target	type
    //   16	63	79	finally }
  
  public Object put(Object x, Object blocking_QMARK_) {
    if (((IFn)const__0.getRawRoot()).invoke(Util.identical(x, null) ? Boolean.TRUE : Boolean.FALSE) != null) {
      if (((IFn)const__0.getRawRoot()).invoke(Util.identical(x, null) ? Boolean.TRUE : Boolean.FALSE) != Boolean.FALSE) {
        null;
      } else {
        throw (Throwable)new AssertionError(((IFn)const__2.getRawRoot()).invoke("Assert failed: ", "BlockingQueue cannot take `nil` as a message", "\n", ((IFn)const__3.getRawRoot()).invoke(const__4)));
      } 
    } else {
      ((IFn)const__0.getRawRoot()).invoke(Util.identical(x, null) ? Boolean.TRUE : Boolean.FALSE);
      throw (Throwable)new AssertionError(((IFn)const__2.getRawRoot()).invoke("Assert failed: ", "BlockingQueue cannot take `nil` as a message", "\n", ((IFn)const__3.getRawRoot()).invoke(const__4)));
    } 
    blocking_QMARK_ = null;
    if (blocking_QMARK_ != null) {
      if (blocking_QMARK_ != Boolean.FALSE) {
        x = null;
        ((BlockingQueue)this.queue).put(x);
        null;
      } 
    } else {
      blocking_QMARK_;
    } 
    d = ((IFn)const__5.getRawRoot()).invoke();
    Object d_SINGLEQUOTE_ = ((AtomicReference)this.last_put).getAndSet(d);
    x = null;
    Object f = new f__16101(this, this.lock, d, x, this.queue);
    if (((IDeferred)d_SINGLEQUOTE_).realized()) {
      f = null;
      ((IFn)f).invoke(null);
    } else {
      Object x__15114__auto__16135 = d_SINGLEQUOTE_ = null;
      f = null;
      ((IDeferred)x__15114__auto__16135).onRealized(f, f);
    } 
    return null;
  }
}
