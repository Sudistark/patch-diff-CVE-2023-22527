package manifold.stream;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class core__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__3;
  
  public static final AFn const__4;
  
  public static final Object const__5;
  
  public static final Var const__6;
  
  public static final Var const__7;
  
  public static final Var const__8;
  
  public static final Keyword const__9;
  
  public static final Var const__10;
  
  public static final ISeq const__11;
  
  public static final Var const__12;
  
  public static final Var const__13;
  
  public static final AFn const__17;
  
  public static final Keyword const__18;
  
  public static final AFn const__19;
  
  public static final Keyword const__20;
  
  public static final Keyword const__21;
  
  public static final AFn const__23;
  
  public static final Keyword const__24;
  
  public static final Var const__25;
  
  public static final Var const__26;
  
  public static final Var const__27;
  
  public static final AFn const__28;
  
  public static final AFn const__29;
  
  public static final Keyword const__30;
  
  public static final Var const__31;
  
  public static final AFn const__32;
  
  public static final Object const__33;
  
  public static final Var const__34;
  
  public static final ISeq const__35;
  
  public static final AFn const__37;
  
  public static final AFn const__38;
  
  public static final AFn const__40;
  
  public static final AFn const__41;
  
  public static final AFn const__42;
  
  public static final AFn const__43;
  
  public static final Var const__44;
  
  public static final AFn const__52;
  
  public static final Keyword const__53;
  
  public static final Var const__54;
  
  public static final AFn const__57;
  
  public static final Var const__58;
  
  public static final AFn const__61;
  
  public static final Var const__62;
  
  public static final AFn const__65;
  
  public static final Var const__66;
  
  public static final AFn const__69;
  
  public static final Var const__70;
  
  public static final Object const__71;
  
  public static final Var const__72;
  
  public static final AFn const__75;
  
  public static final Var const__76;
  
  public static final Var const__77;
  
  public static final Var const__78;
  
  public static final AFn const__79;
  
  public static final Var const__80;
  
  public static final Var const__81;
  
  public static final AFn const__82;
  
  public static final AFn const__83;
  
  public static final AFn const__84;
  
  public static final AFn const__85;
  
  public static final AFn const__86;
  
  public static final AFn const__87;
  
  public static final AFn const__88;
  
  public static final AFn const__89;
  
  public static final AFn const__90;
  
  public static final AFn const__91;
  
  public static final AFn const__92;
  
  public static final AFn const__93;
  
  public static final AFn const__94;
  
  public static final AFn const__95;
  
  public static final AFn const__96;
  
  public static final AFn const__97;
  
  public static final AFn const__98;
  
  public static final AFn const__99;
  
  public static final AFn const__100;
  
  public static final AFn const__101;
  
  public static final AFn const__102;
  
  public static final AFn const__103;
  
  public static final AFn const__104;
  
  public static final AFn const__105;
  
  public static final AFn const__106;
  
  public static final AFn const__107;
  
  public static final AFn const__108;
  
  public static final AFn const__109;
  
  public static final AFn const__110;
  
  public static final AFn const__111;
  
  public static final AFn const__112;
  
  public static final AFn const__113;
  
  public static final Var const__114;
  
  public static final AFn const__116;
  
  public static final AFn const__117;
  
  public static final Var const__118;
  
  public static final AFn const__120;
  
  public static final AFn const__121;
  
  public static final AFn const__122;
  
  public static final AFn const__123;
  
  public static final AFn const__124;
  
  public static final AFn const__125;
  
  public static final AFn const__126;
  
  public static final AFn const__127;
  
  public static final AFn const__128;
  
  public static final AFn const__129;
  
  public static final AFn const__130;
  
  public static final AFn const__131;
  
  public static final AFn const__132;
  
  public static final AFn const__133;
  
  public static final AFn const__134;
  
  public static final AFn const__135;
  
  public static final AFn const__136;
  
  public static final AFn const__137;
  
  public static final AFn const__138;
  
  public static final AFn const__139;
  
  public static final AFn const__140;
  
  public static final Var const__141;
  
  public static final AFn const__143;
  
  public static final AFn const__144;
  
  public static final Var const__145;
  
  public static final AFn const__147;
  
  public static final AFn const__148;
  
  public static final AFn const__149;
  
  public static final AFn const__150;
  
  public static final AFn const__151;
  
  public static final AFn const__152;
  
  public static final AFn const__153;
  
  public static final AFn const__154;
  
  public static final AFn const__155;
  
  public static final AFn const__156;
  
  public static final AFn const__157;
  
  public static final AFn const__158;
  
  public static final AFn const__159;
  
  public static final AFn const__160;
  
  public static final AFn const__161;
  
  public static final AFn const__162;
  
  public static final AFn const__163;
  
  public static final AFn const__164;
  
  public static final AFn const__165;
  
  public static final AFn const__166;
  
  public static final AFn const__167;
  
  public static final Var const__168;
  
  public static final AFn const__171;
  
  public static final Var const__172;
  
  public static final AFn const__175;
  
  public static final Var const__176;
  
  public static final AFn const__179;
  
  public static final Var const__180;
  
  public static final AFn const__183;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new core.fn__15637());
    const__44.setMeta((IPersistentMap)const__52);
    const__44.bindRoot(new core.close_BANG_());
    const__54.setMeta((IPersistentMap)const__57);
    const__54.bindRoot(new core.closed_QMARK_());
    const__58.setMeta((IPersistentMap)const__61);
    const__58.bindRoot(new core.drained_QMARK_());
    const__62.setMeta((IPersistentMap)const__65);
    const__62.bindRoot(new core.weak_handle());
    const__66.setMeta((IPersistentMap)const__69);
    const__66.bindRoot(new core.synchronous_QMARK_());
    const__72.setMeta((IPersistentMap)const__75);
    const__72

















      
      .bindRoot(((IFn)const__76.getRawRoot()).invoke(((IFn)const__77.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(((IFn)const__76.getRawRoot()).invoke(((IFn)const__77.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(const__79), ((IFn)const__78.getRawRoot()).invoke(((IFn)const__80.getRawRoot()).invoke(const__81.getRawRoot(), ((IFn)const__76.getRawRoot()).invoke(((IFn)const__77.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(const__82))))), ((IFn)const__78.getRawRoot()).invoke(const__83)))), ((IFn)const__78.getRawRoot()).invoke(((IFn)const__76.getRawRoot()).invoke(((IFn)const__77.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(const__84), ((IFn)const__78.getRawRoot()).invoke(((IFn)const__80.getRawRoot()).invoke(const__81.getRawRoot(), ((IFn)const__76.getRawRoot()).invoke(((IFn)const__77.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(const__85), ((IFn)const__78.getRawRoot()).invoke(const__86))))), ((IFn)const__78.getRawRoot()).invoke(((IFn)const__76.getRawRoot()).invoke(((IFn)const__77.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(const__87), ((IFn)const__78.getRawRoot()).invoke(const__88), ((IFn)const__78.getRawRoot()).invoke(((IFn)const__76.getRawRoot()).invoke(((IFn)const__77.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(const__89), ((IFn)const__78.getRawRoot()).invoke(const__90), ((IFn)const__78.getRawRoot()).invoke(const__86)))))))))), ((IFn)const__78.getRawRoot()).invoke(((IFn)const__76.getRawRoot()).invoke(((IFn)const__77.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(const__91), ((IFn)const__78.getRawRoot()).invoke(((IFn)const__80.getRawRoot()).invoke(const__81.getRawRoot(), ((IFn)const__76.getRawRoot()).invoke(((IFn)const__77.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(const__92), ((IFn)const__78.getRawRoot()).invoke(const__93), ((IFn)const__78.getRawRoot()).invoke(const__94))))), ((IFn)const__78.getRawRoot()).invoke(((IFn)const__76.getRawRoot()).invoke(((IFn)const__77.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(const__95), ((IFn)const__78.getRawRoot()).invoke(const__96), ((IFn)const__78.getRawRoot()).invoke(((IFn)const__76.getRawRoot()).invoke(((IFn)const__77.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(const__97), ((IFn)const__78.getRawRoot()).invoke(const__98), ((IFn)const__78.getRawRoot()).invoke(((IFn)const__76.getRawRoot()).invoke(((IFn)const__77.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(const__99), ((IFn)const__78.getRawRoot()).invoke(const__93), ((IFn)const__78.getRawRoot()).invoke(const__100), ((IFn)const__78.getRawRoot()).invoke(const__94))))))))))))), ((IFn)const__78.getRawRoot()).invoke(((IFn)const__76.getRawRoot()).invoke(((IFn)const__77.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(const__101), ((IFn)const__78.getRawRoot()).invoke(((IFn)const__80.getRawRoot()).invoke(const__81.getRawRoot(), ((IFn)const__76.getRawRoot()).invoke(((IFn)const__77.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(const__102))))), ((IFn)const__78.getRawRoot()).invoke(((IFn)const__76.getRawRoot()).invoke(((IFn)const__77.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(const__103), ((IFn)const__78.getRawRoot()).invoke(const__102))))))), ((IFn)const__78.getRawRoot()).invoke(((IFn)const__76.getRawRoot()).invoke(((IFn)const__77.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(const__104), ((IFn)const__78.getRawRoot()).invoke(((IFn)const__80.getRawRoot()).invoke(const__81.getRawRoot(), ((IFn)const__76.getRawRoot()).invoke(((IFn)const__77.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(const__102), ((IFn)const__78.getRawRoot()).invoke(const__105))))), ((IFn)const__78.getRawRoot()).invoke(((IFn)const__76.getRawRoot()).invoke(((IFn)const__77.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(const__106), ((IFn)const__78.getRawRoot()).invoke(const__107), ((IFn)const__78.getRawRoot()).invoke(((IFn)const__76.getRawRoot()).invoke(((IFn)const__77.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(const__108), ((IFn)const__78.getRawRoot()).invoke(const__109), ((IFn)const__78.getRawRoot()).invoke(((IFn)const__76.getRawRoot()).invoke(((IFn)const__77.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(const__110), ((IFn)const__78.getRawRoot()).invoke(const__111), ((IFn)const__78.getRawRoot()).invoke(((IFn)const__76.getRawRoot()).invoke(((IFn)const__77.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(const__112), ((IFn)const__78.getRawRoot()).invoke(const__102), ((IFn)const__78.getRawRoot()).invoke(const__105)))))))))))))))), ((IFn)const__78.getRawRoot()).invoke(((IFn)const__76.getRawRoot()).invoke(((IFn)const__77.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(const__113), ((IFn)const__78.getRawRoot()).invoke(((IFn)const__80.getRawRoot()).invoke(const__81.getRawRoot(), ((IFn)const__76.getRawRoot()).invoke(((IFn)const__77.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(const__102)))))))))));
    const__114.setMeta((IPersistentMap)const__116);
    const__114.bindRoot(const__117);
    const__118.setMeta((IPersistentMap)const__120);
    const__118





















      
      .bindRoot(((IFn)const__80.getRawRoot()).invoke(const__81.getRawRoot(), ((IFn)const__76.getRawRoot()).invoke(((IFn)const__77.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(((IFn)const__76.getRawRoot()).invoke(((IFn)const__77.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(const__121), ((IFn)const__78.getRawRoot()).invoke(((IFn)const__80.getRawRoot()).invoke(const__81.getRawRoot(), ((IFn)const__76.getRawRoot()).invoke(((IFn)const__77.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(const__122))))), ((IFn)const__78.getRawRoot()).invoke(((IFn)const__76.getRawRoot()).invoke(((IFn)const__77.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(const__123), ((IFn)const__78.getRawRoot()).invoke(const__122))))))), ((IFn)const__78.getRawRoot()).invoke(((IFn)const__76.getRawRoot()).invoke(((IFn)const__77.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(const__124), ((IFn)const__78.getRawRoot()).invoke(((IFn)const__80.getRawRoot()).invoke(const__81.getRawRoot(), ((IFn)const__76.getRawRoot()).invoke(((IFn)const__77.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(const__122))))), ((IFn)const__78.getRawRoot()).invoke(const__125)))), ((IFn)const__78.getRawRoot()).invoke(((IFn)const__76.getRawRoot()).invoke(((IFn)const__77.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(const__126), ((IFn)const__78.getRawRoot()).invoke(((IFn)const__80.getRawRoot()).invoke(const__81.getRawRoot(), ((IFn)const__76.getRawRoot()).invoke(((IFn)const__77.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(const__122), ((IFn)const__78.getRawRoot()).invoke(const__127))))), ((IFn)const__78.getRawRoot()).invoke(((IFn)const__76.getRawRoot()).invoke(((IFn)const__77.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(const__128), ((IFn)const__78.getRawRoot()).invoke(const__129), ((IFn)const__78.getRawRoot()).invoke(((IFn)const__76.getRawRoot()).invoke(((IFn)const__77.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(const__130), ((IFn)const__78.getRawRoot()).invoke(const__131), ((IFn)const__78.getRawRoot()).invoke(((IFn)const__76.getRawRoot()).invoke(((IFn)const__77.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(const__127)))), ((IFn)const__78.getRawRoot()).invoke(((IFn)const__76.getRawRoot()).invoke(((IFn)const__77.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(const__132), ((IFn)const__78.getRawRoot()).invoke(const__133), ((IFn)const__78.getRawRoot()).invoke(const__127))))))))))))), ((IFn)const__78.getRawRoot()).invoke(((IFn)const__76.getRawRoot()).invoke(((IFn)const__77.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(const__134), ((IFn)const__78.getRawRoot()).invoke(((IFn)const__80.getRawRoot()).invoke(const__81.getRawRoot(), ((IFn)const__76.getRawRoot()).invoke(((IFn)const__77.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(const__122))))), ((IFn)const__78.getRawRoot()).invoke(((IFn)const__76.getRawRoot()).invoke(((IFn)const__77.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(const__135), ((IFn)const__78.getRawRoot()).invoke(const__136), ((IFn)const__78.getRawRoot()).invoke(((IFn)const__76.getRawRoot()).invoke(((IFn)const__77.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(const__137), ((IFn)const__78.getRawRoot()).invoke(const__138), ((IFn)const__78.getRawRoot()).invoke(Boolean.TRUE)))), ((IFn)const__78.getRawRoot()).invoke(((IFn)const__76.getRawRoot()).invoke(((IFn)const__77.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(const__139), ((IFn)const__78.getRawRoot()).invoke(const__140))))))))))))));
    const__141.setMeta((IPersistentMap)const__143);
    const__141.bindRoot(const__144);
    const__145.setMeta((IPersistentMap)const__147);
    const__145


















      
      .bindRoot(((IFn)const__80.getRawRoot()).invoke(const__81.getRawRoot(), ((IFn)const__76.getRawRoot()).invoke(((IFn)const__77.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(((IFn)const__76.getRawRoot()).invoke(((IFn)const__77.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(const__148), ((IFn)const__78.getRawRoot()).invoke(((IFn)const__80.getRawRoot()).invoke(const__81.getRawRoot(), ((IFn)const__76.getRawRoot()).invoke(((IFn)const__77.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(const__149))))), ((IFn)const__78.getRawRoot()).invoke(const__150)))), ((IFn)const__78.getRawRoot()).invoke(((IFn)const__76.getRawRoot()).invoke(((IFn)const__77.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(const__151), ((IFn)const__78.getRawRoot()).invoke(((IFn)const__80.getRawRoot()).invoke(const__81.getRawRoot(), ((IFn)const__76.getRawRoot()).invoke(((IFn)const__77.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(const__149), ((IFn)const__78.getRawRoot()).invoke(const__152))))), ((IFn)const__78.getRawRoot()).invoke(((IFn)const__76.getRawRoot()).invoke(((IFn)const__77.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(const__153), ((IFn)const__78.getRawRoot()).invoke(const__154), ((IFn)const__78.getRawRoot()).invoke(((IFn)const__76.getRawRoot()).invoke(((IFn)const__77.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(const__155), ((IFn)const__78.getRawRoot()).invoke(const__156), ((IFn)const__78.getRawRoot()).invoke(((IFn)const__76.getRawRoot()).invoke(((IFn)const__77.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(const__152)))), ((IFn)const__78.getRawRoot()).invoke(((IFn)const__76.getRawRoot()).invoke(((IFn)const__77.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(const__157), ((IFn)const__78.getRawRoot()).invoke(const__158), ((IFn)const__78.getRawRoot()).invoke(const__152))))))))))))), ((IFn)const__78.getRawRoot()).invoke(((IFn)const__76.getRawRoot()).invoke(((IFn)const__77.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(const__159), ((IFn)const__78.getRawRoot()).invoke(((IFn)const__80.getRawRoot()).invoke(const__81.getRawRoot(), ((IFn)const__76.getRawRoot()).invoke(((IFn)const__77.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(const__149))))), ((IFn)const__78.getRawRoot()).invoke(((IFn)const__76.getRawRoot()).invoke(((IFn)const__77.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(const__160), ((IFn)const__78.getRawRoot()).invoke(const__161), ((IFn)const__78.getRawRoot()).invoke(((IFn)const__76.getRawRoot()).invoke(((IFn)const__77.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(const__162), ((IFn)const__78.getRawRoot()).invoke(const__163), ((IFn)const__78.getRawRoot()).invoke(Boolean.TRUE)))), ((IFn)const__78.getRawRoot()).invoke(((IFn)const__76.getRawRoot()).invoke(((IFn)const__77.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(const__164), ((IFn)const__78.getRawRoot()).invoke(const__165)))))))))), ((IFn)const__78.getRawRoot()).invoke(((IFn)const__76.getRawRoot()).invoke(((IFn)const__77.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(const__166), ((IFn)const__78.getRawRoot()).invoke(((IFn)const__80.getRawRoot()).invoke(const__81.getRawRoot(), ((IFn)const__76.getRawRoot()).invoke(((IFn)const__77.getRawRoot()).invoke(((IFn)const__78.getRawRoot()).invoke(const__149), ((IFn)const__78.getRawRoot()).invoke(const__167))))), ((IFn)const__78.getRawRoot()).invoke(null))))))));
    const__168.setMeta((IPersistentMap)const__171);
    const__168.bindRoot(new core.merged_body());
    const__172.setMeta((IPersistentMap)const__175);
    const__172.bindRoot(new core.def_source());
    ((Var)const__172)


















      
      .setMacro();
    const__176.setMeta((IPersistentMap)const__179);
    const__176.bindRoot(new core.def_sink());
    ((Var)const__176)











      
      .setMacro();
    const__180.setMeta((IPersistentMap)const__183);
    const__180.bindRoot(new core.def_sink_PLUS_source());
    ((Var)const__180)











      
      .setMacro();
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "manifold.stream.core")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE }));
    const__3 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE });
    const__4 = (AFn)Symbol.intern(null, "clojure.core");
    const__5 = RT.classForName("manifold.stream.core.Sinkable");
    const__6 = (Var)RT.var("clojure.core", "alter-meta!");
    const__7 = (Var)RT.var("manifold.stream.core", "Sinkable");
    const__8 = (Var)RT.var("clojure.core", "assoc");
    const__9 = (Keyword)RT.keyword(null, "doc");
    const__10 = (Var)RT.var("clojure.core", "assert-same-protocol");
    const__11 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "to-sink")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Provides a conversion mechanism to Manifold sinks.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })) })) }));
    const__12 = (Var)RT.var("clojure.core", "alter-var-root");
    const__13 = (Var)RT.var("clojure.core", "merge");
    const__17 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "manifold.stream.core.Sinkable"), RT.keyword(null, "on-interface"), RT.classForName("manifold.stream.core.Sinkable") });
    const__18 = (Keyword)RT.keyword(null, "sigs");
    const__19 = (AFn)RT.map(new Object[] { RT.keyword(null, "to-sink"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "to-sink")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Provides a conversion mechanism to Manifold sinks.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })), RT.keyword(null, "doc"), "Provides a conversion mechanism to Manifold sinks." }) });
    const__20 = (Keyword)RT.keyword(null, "var");
    const__21 = (Keyword)RT.keyword(null, "method-map");
    const__23 = (AFn)RT.map(new Object[] { RT.keyword(null, "to-sink"), RT.keyword(null, "to-sink") });
    const__24 = (Keyword)RT.keyword(null, "method-builders");
    const__25 = (Var)RT.var("clojure.core", "intern");
    const__26 = (Var)RT.var("clojure.core", "*ns*");
    const__27 = (Var)RT.var("clojure.core", "with-meta");
    const__28 = (AFn)((IObj)Symbol.intern(null, "to-sink")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Provides a conversion mechanism to Manifold sinks.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })) }));
    const__29 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "to-sink")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Provides a conversion mechanism to Manifold sinks.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })), RT.keyword(null, "doc"), "Provides a conversion mechanism to Manifold sinks." });
    const__30 = (Keyword)RT.keyword(null, "protocol");
    const__31 = (Var)RT.var("clojure.core", "-reset-methods");
    const__32 = (AFn)Symbol.intern(null, "Sinkable");
    const__33 = RT.classForName("manifold.stream.core.Sourceable");
    const__34 = (Var)RT.var("manifold.stream.core", "Sourceable");
    const__35 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "to-source")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Provides a conversion mechanism to Manifold source.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })) })) }));
    const__37 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "manifold.stream.core.Sourceable"), RT.keyword(null, "on-interface"), RT.classForName("manifold.stream.core.Sourceable") });
    const__38 = (AFn)RT.map(new Object[] { RT.keyword(null, "to-source"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "to-source")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Provides a conversion mechanism to Manifold source.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })), RT.keyword(null, "doc"), "Provides a conversion mechanism to Manifold source." }) });
    const__40 = (AFn)RT.map(new Object[] { RT.keyword(null, "to-source"), RT.keyword(null, "to-source") });
    const__41 = (AFn)((IObj)Symbol.intern(null, "to-source")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Provides a conversion mechanism to Manifold source.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })) }));
    const__42 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "to-source")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Provides a conversion mechanism to Manifold source.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })), RT.keyword(null, "doc"), "Provides a conversion mechanism to Manifold source." });
    const__43 = (AFn)Symbol.intern(null, "Sourceable");
    const__44 = (Var)RT.var("manifold.stream.core", "close!");
    const__52 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "sink")) })), RT.keyword(null, "doc"), "Closes an event sink, so that it can't accept any more messages.", RT.keyword(null, "line"), Integer.valueOf(33), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "manifold/stream/core.clj" });
    const__53 = (Keyword)RT.keyword(null, "inline");
    const__54 = (Var)RT.var("manifold.stream.core", "closed?");
    const__57 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "sink")) })), RT.keyword(null, "doc"), "Returns true if the event sink is closed.", RT.keyword(null, "line"), Integer.valueOf(39), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "manifold/stream/core.clj" });
    const__58 = (Var)RT.var("manifold.stream.core", "drained?");
    const__61 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "source")) })), RT.keyword(null, "doc"), "Returns true if the event source is drained.", RT.keyword(null, "line"), Integer.valueOf(44), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "manifold/stream/core.clj" });
    const__62 = (Var)RT.var("manifold.stream.core", "weak-handle");
    const__65 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "doc"), "Returns a weak reference that can be used to construct topologies of streams.", RT.keyword(null, "line"), Integer.valueOf(49), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "manifold/stream/core.clj" });
    const__66 = (Var)RT.var("manifold.stream.core", "synchronous?");
    const__69 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "doc"), "Returns true if the underlying abstraction behaves synchronously, using thread blocking\n   to provide backpressure.", RT.keyword(null, "line"), Integer.valueOf(54), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "manifold/stream/core.clj" });
    const__70 = (Var)RT.var("clojure.core", "print-method");
    const__71 = RT.classForName("manifold.stream.core.IEventStream");
    const__72 = (Var)RT.var("manifold.stream.core", "default-stream-impls");
    const__75 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(79), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "manifold/stream/core.clj" });
    const__76 = (Var)RT.var("clojure.core", "seq");
    const__77 = (Var)RT.var("clojure.core", "concat");
    const__78 = (Var)RT.var("clojure.core", "list");
    const__79 = (AFn)Symbol.intern("clojure.core", "meta");
    const__80 = (Var)RT.var("clojure.core", "apply");
    const__81 = (Var)RT.var("clojure.core", "vector");
    const__82 = (AFn)Symbol.intern(null, "___15717__auto__");
    const__83 = (AFn)Symbol.intern(null, "__mta");
    const__84 = (AFn)Symbol.intern("manifold.stream.core", "resetMeta");
    const__85 = (AFn)Symbol.intern("manifold.stream.core", "_");
    const__86 = (AFn)Symbol.intern(null, "m__15718__auto__");
    const__87 = (AFn)Symbol.intern("manifold.utils", "with-lock*");
    const__88 = (AFn)Symbol.intern(null, "lock");
    const__89 = (AFn)Symbol.intern(null, "set!");
    const__90 = (AFn)Symbol.intern(null, "__mta");
    const__91 = (AFn)Symbol.intern("manifold.stream.core", "alterMeta");
    const__92 = (AFn)Symbol.intern("manifold.stream.core", "_");
    const__93 = (AFn)Symbol.intern(null, "f__15719__auto__");
    const__94 = (AFn)Symbol.intern(null, "args__15720__auto__");
    const__95 = (AFn)Symbol.intern("manifold.utils", "with-lock*");
    const__96 = (AFn)Symbol.intern(null, "lock");
    const__97 = (AFn)Symbol.intern(null, "set!");
    const__98 = (AFn)Symbol.intern(null, "__mta");
    const__99 = (AFn)Symbol.intern("clojure.core", "apply");
  }
  
  public static void __init1() {
    const__100 = (AFn)Symbol.intern(null, "__mta");
    const__101 = (AFn)Symbol.intern(null, "downstream");
    const__102 = (AFn)Symbol.intern(null, "this__15721__auto__");
    const__103 = (AFn)Symbol.intern("manifold.stream.graph", "downstream");
    const__104 = (AFn)Symbol.intern(null, "weakHandle");
    const__105 = (AFn)Symbol.intern(null, "ref-queue__15722__auto__");
    const__106 = (AFn)Symbol.intern("manifold.utils", "with-lock");
    const__107 = (AFn)Symbol.intern(null, "lock");
    const__108 = (AFn)Symbol.intern("clojure.core", "or");
    const__109 = (AFn)Symbol.intern(null, "__weakHandle");
    const__110 = (AFn)Symbol.intern(null, "set!");
    const__111 = (AFn)Symbol.intern(null, "__weakHandle");
    const__112 = (AFn)Symbol.intern(null, "java.lang.ref.WeakReference.");
    const__113 = (AFn)Symbol.intern(null, "close");
    const__114 = (Var)RT.var("manifold.stream.core", "sink-params");
    const__116 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(94), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "manifold/stream/core.clj" });
    const__117 = (AFn)Tuple.create(Symbol.intern(null, "lock"), ((IObj)Symbol.intern(null, "__mta")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "volatile-mutable"), Boolean.TRUE })), ((IObj)Symbol.intern(null, "__isClosed")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "volatile-mutable"), Boolean.TRUE })), ((IObj)Symbol.intern(null, "__closedCallbacks")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "java.util.LinkedList") })), ((IObj)Symbol.intern(null, "__weakHandle")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "volatile-mutable"), Boolean.TRUE })), ((IObj)Symbol.intern(null, "__mta")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "volatile-mutable"), Boolean.TRUE })));
    const__118 = (Var)RT.var("manifold.stream.core", "default-sink-impls");
    const__120 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(102), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "manifold/stream/core.clj" });
    const__121 = (AFn)Symbol.intern(null, "close");
    const__122 = (AFn)Symbol.intern(null, "this__15723__auto__");
    const__123 = (AFn)Symbol.intern(null, ".markClosed");
    const__124 = (AFn)Symbol.intern(null, "isClosed");
    const__125 = (AFn)Symbol.intern(null, "__isClosed");
    const__126 = (AFn)Symbol.intern(null, "onClosed");
    const__127 = (AFn)Symbol.intern(null, "callback__15724__auto__");
    const__128 = (AFn)Symbol.intern("manifold.utils", "with-lock");
    const__129 = (AFn)Symbol.intern(null, "lock");
    const__130 = (AFn)Symbol.intern(null, "if");
    const__131 = (AFn)Symbol.intern(null, "__isClosed");
    const__132 = (AFn)Symbol.intern(null, ".add");
    const__133 = (AFn)Symbol.intern(null, "__closedCallbacks");
    const__134 = (AFn)Symbol.intern(null, "markClosed");
    const__135 = (AFn)Symbol.intern("manifold.utils", "with-lock");
    const__136 = (AFn)Symbol.intern(null, "lock");
    const__137 = (AFn)Symbol.intern(null, "set!");
    const__138 = (AFn)Symbol.intern(null, "__isClosed");
    const__139 = (AFn)Symbol.intern("manifold.utils", "invoke-callbacks");
    const__140 = (AFn)Symbol.intern(null, "__closedCallbacks");
    const__141 = (Var)RT.var("manifold.stream.core", "source-params");
    const__143 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(115), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "manifold/stream/core.clj" });
    const__144 = (AFn)Tuple.create(Symbol.intern(null, "lock"), ((IObj)Symbol.intern(null, "__mta")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "volatile-mutable"), Boolean.TRUE })), ((IObj)Symbol.intern(null, "__isDrained")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "volatile-mutable"), Boolean.TRUE })), ((IObj)Symbol.intern(null, "__drainedCallbacks")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "java.util.LinkedList") })), ((IObj)Symbol.intern(null, "__weakHandle")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "volatile-mutable"), Boolean.TRUE })));
    const__145 = (Var)RT.var("manifold.stream.core", "default-source-impls");
    const__147 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(122), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "manifold/stream/core.clj" });
    const__148 = (AFn)Symbol.intern(null, "isDrained");
    const__149 = (AFn)Symbol.intern(null, "this__15725__auto__");
    const__150 = (AFn)Symbol.intern(null, "__isDrained");
    const__151 = (AFn)Symbol.intern(null, "onDrained");
    const__152 = (AFn)Symbol.intern(null, "callback__15726__auto__");
    const__153 = (AFn)Symbol.intern("manifold.utils", "with-lock");
    const__154 = (AFn)Symbol.intern(null, "lock");
    const__155 = (AFn)Symbol.intern(null, "if");
    const__156 = (AFn)Symbol.intern(null, "__isDrained");
    const__157 = (AFn)Symbol.intern(null, ".add");
    const__158 = (AFn)Symbol.intern(null, "__drainedCallbacks");
    const__159 = (AFn)Symbol.intern(null, "markDrained");
    const__160 = (AFn)Symbol.intern("manifold.utils", "with-lock");
    const__161 = (AFn)Symbol.intern(null, "lock");
    const__162 = (AFn)Symbol.intern(null, "set!");
    const__163 = (AFn)Symbol.intern(null, "__isDrained");
    const__164 = (AFn)Symbol.intern("manifold.utils", "invoke-callbacks");
    const__165 = (AFn)Symbol.intern(null, "__drainedCallbacks");
    const__166 = (AFn)Symbol.intern(null, "connector");
    const__167 = (AFn)Symbol.intern(null, "___15727__auto__");
    const__168 = (Var)RT.var("manifold.stream.core", "merged-body");
    const__171 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "bodies")) })), RT.keyword(null, "line"), Integer.valueOf(135), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "manifold/stream/core.clj" });
    const__172 = (Var)RT.var("manifold.stream.core", "def-source");
    const__175 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "name"), Symbol.intern(null, "params"), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "line"), Integer.valueOf(142), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "manifold/stream/core.clj" });
    const__176 = (Var)RT.var("manifold.stream.core", "def-sink");
    const__179 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "name"), Symbol.intern(null, "params"), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "line"), Integer.valueOf(155), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "manifold/stream/core.clj" });
    const__180 = (Var)RT.var("manifold.stream.core", "def-sink+source");
    const__183 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "name"), Symbol.intern(null, "params"), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "line"), Integer.valueOf(168), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "manifold/stream/core.clj" });
  }
  
  static  {
    __init0();
    __init1();
    Compiler.pushNSandLoader(RT.classForName("manifold.stream.core__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
