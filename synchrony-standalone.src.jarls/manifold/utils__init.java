package manifold;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class utils__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__3;
  
  public static final AFn const__4;
  
  public static final Var const__5;
  
  public static final AFn const__13;
  
  public static final Var const__14;
  
  public static final AFn const__17;
  
  public static final Var const__18;
  
  public static final AFn const__22;
  
  public static final Var const__23;
  
  public static final AFn const__26;
  
  public static final Object const__27;
  
  public static final Var const__28;
  
  public static final AFn const__31;
  
  public static final Var const__32;
  
  public static final AFn const__35;
  
  public static final Var const__36;
  
  public static final AFn const__39;
  
  public static final Var const__40;
  
  public static final AFn const__43;
  
  public static final Var const__44;
  
  public static final AFn const__47;
  
  public static final Var const__48;
  
  public static final AFn const__51;
  
  public static final Var const__52;
  
  public static final AFn const__56;
  
  public static final Var const__57;
  
  public static final AFn const__60;
  
  public static final Var const__61;
  
  public static final AFn const__64;
  
  public static final Var const__65;
  
  public static final AFn const__68;
  
  public static final Var const__69;
  
  public static final AFn const__72;
  
  public static final Var const__73;
  
  public static final AFn const__76;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new utils.fn__14896());
    const__5.setMeta((IPersistentMap)const__13);
    const__5.bindRoot(new utils.wait_for());
    ((Var)const__5)


















      
      .setMacro();
    const__14.setMeta((IPersistentMap)const__17);
    const__14.bindRoot(new utils.future_with());
    ((Var)const__14)







      
      .setMacro();
    const__18.setMeta((IPersistentMap)const__22);
    const__18.bindRoot(new ThreadLocal());
    const__23.setMeta((IPersistentMap)const__26);
    const__23.bindRoot(const__27);
    const__28.setMeta((IPersistentMap)const__31);
    const__28.bindRoot(new utils.without_overflow());
    ((Var)const__28)



















      
      .setMacro();
    const__32.setMeta((IPersistentMap)const__35);
    const__32.bindRoot(new utils.invoke_callbacks());
    const__36.setMeta((IPersistentMap)const__39);
    const__36.bindRoot(new utils.fast_satisfies());
    const__40.setMeta((IPersistentMap)const__43);
    const__40.bindRoot(new utils.mutex());
    const__44.setMeta((IPersistentMap)const__47);
    const__44.bindRoot(new utils.with_lock());
    ((Var)const__44)











































      
      .setMacro();
    const__48.setMeta((IPersistentMap)const__51);
    const__48.bindRoot(new utils.with_lock_STAR_());
    ((Var)const__48)






      
      .setMacro();
    const__52.setMeta((IPersistentMap)const__56);
    const__52.bindRoot(new utils.when_core_async());
    ((Var)const__52)







      
      .setMacro();
    const__57.setMeta((IPersistentMap)const__60);
    const__57.bindRoot(new utils.when_class());
    ((Var)const__57)








      
      .setMacro();
    const__61.setMeta((IPersistentMap)const__64);
    const__61.bindRoot(new utils.defprotocol_PLUS_());
    ((Var)const__61)







      
      .setMacro();
    const__65.setMeta((IPersistentMap)const__68);
    const__65.bindRoot(new utils.deftype_PLUS_());
    ((Var)const__65)


      
      .setMacro();
    const__69.setMeta((IPersistentMap)const__72);
    const__69.bindRoot(new utils.defrecord_PLUS_());
    ((Var)const__69)


      
      .setMacro();
    const__73.setMeta((IPersistentMap)const__76);
    const__73.bindRoot(new utils.definterface_PLUS_());
    ((Var)const__73)


      
      .setMacro();
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "manifold.utils")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE }));
    const__3 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE });
    const__4 = (AFn)Symbol.intern(null, "clojure.core");
    const__5 = (Var)RT.var("manifold.utils", "wait-for");
    const__13 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "line"), Integer.valueOf(21), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "manifold/utils.clj" });
    const__14 = (Var)RT.var("manifold.utils", "future-with");
    const__17 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "executor"), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "line"), Integer.valueOf(30), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "manifold/utils.clj" });
    const__18 = (Var)RT.var("manifold.utils", "stack-depth");
    const__22 = (AFn)RT.map(new Object[] { RT.keyword(null, "tag"), RT.classForName("java.lang.ThreadLocal"), RT.keyword(null, "line"), Integer.valueOf(47), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "manifold/utils.clj" });
    const__23 = (Var)RT.var("manifold.utils", "max-depth");
    const__26 = (AFn)RT.map(new Object[] { RT.keyword(null, "const"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(49), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "manifold/utils.clj" });
    const__27 = Long.valueOf(50L);
    const__28 = (Var)RT.var("manifold.utils", "without-overflow");
    const__31 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "executor"), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "line"), Integer.valueOf(51), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "manifold/utils.clj" });
    const__32 = (Var)RT.var("manifold.utils", "invoke-callbacks");
    const__35 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "callbacks")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "BlockingQueue") }))) })), RT.keyword(null, "line"), Integer.valueOf(66), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "manifold/utils.clj" });
    const__36 = (Var)RT.var("manifold.utils", "fast-satisfies");
    const__39 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "protocol-var")) })), RT.keyword(null, "line"), Integer.valueOf(77), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "manifold/utils.clj" });
    const__40 = (Var)RT.var("manifold.utils", "mutex");
    const__43 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(93), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "manifold/utils.clj" });
    const__44 = (Var)RT.var("manifold.utils", "with-lock");
    const__47 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "lock"), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "line"), Integer.valueOf(96), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "manifold/utils.clj" });
    const__48 = (Var)RT.var("manifold.utils", "with-lock*");
    const__51 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "lock"), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "line"), Integer.valueOf(104), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "manifold/utils.clj" });
    const__52 = (Var)RT.var("manifold.utils", "when-core-async");
    const__56 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "doc"), "Suitable for altering behavior (like extending protocols), but not defs", RT.keyword(null, "line"), Integer.valueOf(113), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "manifold/utils.clj" });
    const__57 = (Var)RT.var("manifold.utils", "when-class");
    const__60 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "class"), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "line"), Integer.valueOf(123), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "manifold/utils.clj" });
    const__61 = (Var)RT.var("manifold.utils", "defprotocol+");
    const__64 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "name"), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "line"), Integer.valueOf(132), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "manifold/utils.clj" });
    const__65 = (Var)RT.var("manifold.utils", "deftype+");
    const__68 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "name"), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "line"), Integer.valueOf(136), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "manifold/utils.clj" });
    const__69 = (Var)RT.var("manifold.utils", "defrecord+");
    const__72 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "name"), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "line"), Integer.valueOf(140), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "manifold/utils.clj" });
    const__73 = (Var)RT.var("manifold.utils", "definterface+");
    const__76 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "name"), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "line"), Integer.valueOf(144), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "manifold/utils.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("manifold.utils__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
