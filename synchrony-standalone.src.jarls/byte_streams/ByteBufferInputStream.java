package byte_streams;

import java.io.IOException;
import java.io.InputStream;
import java.nio.ByteBuffer;

public class ByteBufferInputStream extends InputStream {
  private ByteBuffer _buf;
  
  public ByteBufferInputStream(ByteBuffer paramByteBuffer) { this._buf = paramByteBuffer; }
  
  public void close() {}
  
  public int available() { return this._buf.remaining(); }
  
  public boolean markSupported() { return true; }
  
  public void mark(int paramInt) { this._buf.mark(); }
  
  public void reset() { this._buf.reset(); }
  
  public long skip(long paramLong) {
    int i = Math.min((int)paramLong, this._buf.remaining());
    this._buf.position(this._buf.position() + i);
    return i;
  }
  
  public int read() {
    if (!this._buf.hasRemaining())
      return -1; 
    return this._buf.get() & 0xFF;
  }
  
  public int read(byte[] paramArrayOfByte, int paramInt1, int paramInt2) throws IOException {
    paramInt2 = Math.min(paramInt2, this._buf.remaining());
    if (paramInt2 == 0)
      return -1; 
    this._buf.get(paramArrayOfByte, paramInt1, paramInt2);
    return paramInt2;
  }
}
