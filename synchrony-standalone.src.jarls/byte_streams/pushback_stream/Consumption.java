package byte_streams.pushback_stream;

import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.IPersistentVector;
import clojure.lang.IType;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;

public final class Consumption implements IType {
  public final Object buf;
  
  public final Object deferred;
  
  public final boolean eager_QMARK_;
  
  public Consumption(Object paramObject1, Object paramObject2, boolean paramBoolean) { this.buf = paramObject1;
    this.deferred = paramObject2;
    this.eager_QMARK_ = paramBoolean; }
  
  public static IPersistentVector getBasis() { return Tuple.create(((IObj)Symbol.intern(null, "buf")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "ByteBuffer") })), Symbol.intern(null, "deferred"), ((IObj)Symbol.intern(null, "eager?")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "boolean") }))); }
  
  static  {
  
  }
}
