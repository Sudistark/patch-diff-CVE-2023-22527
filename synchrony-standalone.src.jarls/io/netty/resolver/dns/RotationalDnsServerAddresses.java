package io.netty.resolver.dns;

import java.net.InetSocketAddress;
import java.util.List;
import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;

final class RotationalDnsServerAddresses extends DefaultDnsServerAddresses {
  private static final AtomicIntegerFieldUpdater<RotationalDnsServerAddresses> startIdxUpdater = AtomicIntegerFieldUpdater.newUpdater(RotationalDnsServerAddresses.class, "startIdx");
  
  RotationalDnsServerAddresses(List<InetSocketAddress> addresses) { super("rotational", addresses); }
  
  public DnsServerAddressStream stream() {
    int nextStartIdx;
    int curStartIdx;
    do {
      curStartIdx = this.startIdx;
      nextStartIdx = curStartIdx + 1;
      if (nextStartIdx < this.addresses.size())
        continue; 
      nextStartIdx = 0;
    } while (!startIdxUpdater.compareAndSet(this, curStartIdx, nextStartIdx));
    return new SequentialDnsServerAddressStream(this.addresses, curStartIdx);
  }
}
