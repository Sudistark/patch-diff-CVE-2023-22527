package io.netty.resolver;

import io.netty.util.concurrent.EventExecutor;
import io.netty.util.concurrent.Promise;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.SocketAddress;
import java.util.List;

public class InetSocketAddressResolver extends AbstractAddressResolver<InetSocketAddress> {
  final NameResolver<InetAddress> nameResolver;
  
  public InetSocketAddressResolver(EventExecutor executor, NameResolver<InetAddress> nameResolver) {
    super(executor, InetSocketAddress.class);
    this.nameResolver = nameResolver;
  }
  
  protected boolean doIsResolved(InetSocketAddress address) { return !address.isUnresolved(); }
  
  protected void doResolve(InetSocketAddress unresolvedAddress, Promise<InetSocketAddress> promise) throws Exception {
    this.nameResolver.resolve(unresolvedAddress.getHostName())
      .addListener(new Object(this, promise, unresolvedAddress));
  }
  
  protected void doResolveAll(InetSocketAddress unresolvedAddress, Promise<List<InetSocketAddress>> promise) throws Exception {
    this.nameResolver.resolveAll(unresolvedAddress.getHostName())
      .addListener(new Object(this, unresolvedAddress, promise));
  }
  
  public void close() { this.nameResolver.close(); }
}
