package io.netty.channel;

import io.netty.util.internal.ObjectUtil;
import java.util.ArrayList;
import java.util.List;

public class AdaptiveRecvByteBufAllocator extends DefaultMaxMessagesRecvByteBufAllocator {
  static final int DEFAULT_MINIMUM = 64;
  
  static final int DEFAULT_INITIAL = 2048;
  
  static final int DEFAULT_MAXIMUM = 65536;
  
  private static final int INDEX_INCREMENT = 4;
  
  private static final int INDEX_DECREMENT = 1;
  
  private static final int[] SIZE_TABLE;
  
  @Deprecated
  public static final AdaptiveRecvByteBufAllocator DEFAULT;
  
  private final int minIndex;
  
  private final int maxIndex;
  
  private final int initial;
  
  static  {
    sizeTable = new ArrayList();
    for (int i = 16; i < 512; i += 16)
      sizeTable.add(Integer.valueOf(i)); 
    for (int i = 512; i > 0; i <<= 1)
      sizeTable.add(Integer.valueOf(i)); 
    SIZE_TABLE = new int[sizeTable.size()];
    for (int i = 0; i < SIZE_TABLE.length; i++)
      SIZE_TABLE[i] = ((Integer)sizeTable.get(i)).intValue(); 
    DEFAULT = new AdaptiveRecvByteBufAllocator();
  }
  
  private static int getSizeTableIndex(int size) {
    int a, mid, low = 0, high = SIZE_TABLE.length - 1;
    while (true) {
      if (high < low)
        return low; 
      if (high == low)
        return high; 
      mid = low + high >>> 1;
      a = SIZE_TABLE[mid];
      int b = SIZE_TABLE[mid + 1];
      if (size > b) {
        low = mid + 1;
        continue;
      } 
      if (size < a) {
        high = mid - 1;
        continue;
      } 
      break;
    } 
    if (size == a)
      return mid; 
    return mid + 1;
  }
  
  public AdaptiveRecvByteBufAllocator() { this(64, 2048, 65536); }
  
  public AdaptiveRecvByteBufAllocator(int minimum, int initial, int maximum) {
    ObjectUtil.checkPositive(minimum, "minimum");
    if (initial < minimum)
      throw new IllegalArgumentException("initial: " + initial); 
    if (maximum < initial)
      throw new IllegalArgumentException("maximum: " + maximum); 
    int minIndex = getSizeTableIndex(minimum);
    if (SIZE_TABLE[minIndex] < minimum) {
      this.minIndex = minIndex + 1;
    } else {
      this.minIndex = minIndex;
    } 
    int maxIndex = getSizeTableIndex(maximum);
    if (SIZE_TABLE[maxIndex] > maximum) {
      this.maxIndex = maxIndex - 1;
    } else {
      this.maxIndex = maxIndex;
    } 
    this.initial = initial;
  }
  
  public RecvByteBufAllocator.Handle newHandle() { return new HandleImpl(this, this.minIndex, this.maxIndex, this.initial); }
  
  public AdaptiveRecvByteBufAllocator respectMaybeMoreData(boolean respectMaybeMoreData) {
    super.respectMaybeMoreData(respectMaybeMoreData);
    return this;
  }
}
