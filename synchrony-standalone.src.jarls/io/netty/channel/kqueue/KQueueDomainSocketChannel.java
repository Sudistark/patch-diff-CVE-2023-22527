package io.netty.channel.kqueue;

import io.netty.channel.AbstractChannel;
import io.netty.channel.Channel;
import io.netty.channel.ChannelConfig;
import io.netty.channel.ChannelOutboundBuffer;
import io.netty.channel.unix.DomainSocketAddress;
import io.netty.channel.unix.DomainSocketChannel;
import io.netty.channel.unix.DomainSocketChannelConfig;
import io.netty.channel.unix.FileDescriptor;
import io.netty.channel.unix.PeerCredentials;
import java.io.IOException;
import java.net.SocketAddress;

public final class KQueueDomainSocketChannel extends AbstractKQueueStreamChannel implements DomainSocketChannel {
  private final KQueueDomainSocketChannelConfig config = new KQueueDomainSocketChannelConfig(this);
  
  public KQueueDomainSocketChannel() { super(null, BsdSocket.newSocketDomain(), false); }
  
  public KQueueDomainSocketChannel(int fd) { this(null, new BsdSocket(fd)); }
  
  KQueueDomainSocketChannel(Channel parent, BsdSocket fd) {
    super(parent, fd, true);
    this.local = fd.localDomainSocketAddress();
    this.remote = fd.remoteDomainSocketAddress();
  }
  
  protected AbstractKQueueChannel.AbstractKQueueUnsafe newUnsafe() { return new KQueueDomainUnsafe(this, null); }
  
  protected DomainSocketAddress localAddress0() { return this.local; }
  
  protected DomainSocketAddress remoteAddress0() { return this.remote; }
  
  protected void doBind(SocketAddress localAddress) throws Exception {
    this.socket.bind(localAddress);
    this.local = (DomainSocketAddress)localAddress;
  }
  
  public KQueueDomainSocketChannelConfig config() { return this.config; }
  
  protected boolean doConnect(SocketAddress remoteAddress, SocketAddress localAddress) throws Exception {
    if (super.doConnect(remoteAddress, localAddress)) {
      this.local = (localAddress != null) ? (DomainSocketAddress)localAddress : this.socket.localDomainSocketAddress();
      this.remote = (DomainSocketAddress)remoteAddress;
      return true;
    } 
    return false;
  }
  
  public DomainSocketAddress remoteAddress() { return (DomainSocketAddress)super.remoteAddress(); }
  
  public DomainSocketAddress localAddress() { return (DomainSocketAddress)super.localAddress(); }
  
  protected int doWriteSingle(ChannelOutboundBuffer in) throws Exception {
    Object msg = in.current();
    if (msg instanceof FileDescriptor && this.socket.sendFd(((FileDescriptor)msg).intValue()) > 0) {
      in.remove();
      return 1;
    } 
    return super.doWriteSingle(in);
  }
  
  protected Object filterOutboundMessage(Object msg) {
    if (msg instanceof FileDescriptor)
      return msg; 
    return super.filterOutboundMessage(msg);
  }
  
  public PeerCredentials peerCredentials() throws IOException { return this.socket.getPeerCredentials(); }
}
