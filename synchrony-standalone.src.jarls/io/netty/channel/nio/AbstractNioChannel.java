package io.netty.channel.nio;

import io.netty.buffer.ByteBuf;
import io.netty.buffer.ByteBufAllocator;
import io.netty.buffer.ByteBufUtil;
import io.netty.buffer.Unpooled;
import io.netty.channel.AbstractChannel;
import io.netty.channel.Channel;
import io.netty.channel.ChannelException;
import io.netty.channel.ChannelPromise;
import io.netty.channel.EventLoop;
import io.netty.util.ReferenceCountUtil;
import io.netty.util.ReferenceCounted;
import io.netty.util.concurrent.Future;
import io.netty.util.internal.logging.InternalLogger;
import io.netty.util.internal.logging.InternalLoggerFactory;
import java.io.IOException;
import java.net.SocketAddress;
import java.nio.channels.CancelledKeyException;
import java.nio.channels.ClosedChannelException;
import java.nio.channels.SelectableChannel;
import java.nio.channels.SelectionKey;

public abstract class AbstractNioChannel extends AbstractChannel {
  private static final InternalLogger logger = InternalLoggerFactory.getInstance(AbstractNioChannel.class);
  
  private final SelectableChannel ch;
  
  protected final int readInterestOp;
  
  boolean readPending;
  
  private final Runnable clearReadPendingRunnable = new Object(this);
  
  private ChannelPromise connectPromise;
  
  private Future<?> connectTimeoutFuture;
  
  private SocketAddress requestedRemoteAddress;
  
  protected AbstractNioChannel(Channel parent, SelectableChannel ch, int readInterestOp) {
    super(parent);
    this.ch = ch;
    this.readInterestOp = readInterestOp;
    try {
      ch.configureBlocking(false);
    } catch (IOException e) {
      try {
        ch.close();
      } catch (IOException e2) {
        logger.warn("Failed to close a partially initialized socket.", e2);
      } 
      throw new ChannelException("Failed to enter non-blocking mode.", e);
    } 
  }
  
  public boolean isOpen() { return this.ch.isOpen(); }
  
  public NioUnsafe unsafe() { return (NioUnsafe)super.unsafe(); }
  
  protected SelectableChannel javaChannel() { return this.ch; }
  
  public NioEventLoop eventLoop() { return (NioEventLoop)super.eventLoop(); }
  
  protected SelectionKey selectionKey() {
    assert this.selectionKey != null;
    return this.selectionKey;
  }
  
  @Deprecated
  protected boolean isReadPending() { return this.readPending; }
  
  @Deprecated
  protected void setReadPending(boolean readPending) {
    if (isRegistered()) {
      NioEventLoop nioEventLoop = eventLoop();
      if (nioEventLoop.inEventLoop()) {
        setReadPending0(readPending);
      } else {
        nioEventLoop.execute(new Object(this, readPending));
      } 
    } else {
      this.readPending = readPending;
    } 
  }
  
  protected final void clearReadPending() {
    if (isRegistered()) {
      NioEventLoop nioEventLoop = eventLoop();
      if (nioEventLoop.inEventLoop()) {
        clearReadPending0();
      } else {
        nioEventLoop.execute(this.clearReadPendingRunnable);
      } 
    } else {
      this.readPending = false;
    } 
  }
  
  private void setReadPending0(boolean readPending) {
    this.readPending = readPending;
    if (!readPending)
      ((AbstractNioUnsafe)unsafe()).removeReadOp(); 
  }
  
  private void clearReadPending0() {
    this.readPending = false;
    ((AbstractNioUnsafe)unsafe()).removeReadOp();
  }
  
  protected boolean isCompatible(EventLoop loop) { return loop instanceof NioEventLoop; }
  
  protected void doRegister() {
    boolean selected = false;
    while (true) {
      try {
        this.selectionKey = javaChannel().register(eventLoop().unwrappedSelector(), 0, this);
        return;
      } catch (CancelledKeyException e) {
        if (!selected) {
          eventLoop().selectNow();
          selected = true;
          continue;
        } 
        break;
      } 
    } 
    throw e;
  }
  
  protected void doDeregister() { eventLoop().cancel(selectionKey()); }
  
  protected void doBeginRead() {
    SelectionKey selectionKey = this.selectionKey;
    if (!selectionKey.isValid())
      return; 
    this.readPending = true;
    int interestOps = selectionKey.interestOps();
    if ((interestOps & this.readInterestOp) == 0)
      selectionKey.interestOps(interestOps | this.readInterestOp); 
  }
  
  protected final ByteBuf newDirectBuffer(ByteBuf buf) {
    int readableBytes = buf.readableBytes();
    if (readableBytes == 0) {
      ReferenceCountUtil.safeRelease(buf);
      return Unpooled.EMPTY_BUFFER;
    } 
    ByteBufAllocator alloc = alloc();
    if (alloc.isDirectBufferPooled()) {
      ByteBuf directBuf = alloc.directBuffer(readableBytes);
      directBuf.writeBytes(buf, buf.readerIndex(), readableBytes);
      ReferenceCountUtil.safeRelease(buf);
      return directBuf;
    } 
    ByteBuf directBuf = ByteBufUtil.threadLocalDirectBuffer();
    if (directBuf != null) {
      directBuf.writeBytes(buf, buf.readerIndex(), readableBytes);
      ReferenceCountUtil.safeRelease(buf);
      return directBuf;
    } 
    return buf;
  }
  
  protected final ByteBuf newDirectBuffer(ReferenceCounted holder, ByteBuf buf) {
    int readableBytes = buf.readableBytes();
    if (readableBytes == 0) {
      ReferenceCountUtil.safeRelease(holder);
      return Unpooled.EMPTY_BUFFER;
    } 
    ByteBufAllocator alloc = alloc();
    if (alloc.isDirectBufferPooled()) {
      ByteBuf directBuf = alloc.directBuffer(readableBytes);
      directBuf.writeBytes(buf, buf.readerIndex(), readableBytes);
      ReferenceCountUtil.safeRelease(holder);
      return directBuf;
    } 
    ByteBuf directBuf = ByteBufUtil.threadLocalDirectBuffer();
    if (directBuf != null) {
      directBuf.writeBytes(buf, buf.readerIndex(), readableBytes);
      ReferenceCountUtil.safeRelease(holder);
      return directBuf;
    } 
    if (holder != buf) {
      buf.retain();
      ReferenceCountUtil.safeRelease(holder);
    } 
    return buf;
  }
  
  protected void doClose() {
    ChannelPromise promise = this.connectPromise;
    if (promise != null) {
      promise.tryFailure(new ClosedChannelException());
      this.connectPromise = null;
    } 
    Future<?> future = this.connectTimeoutFuture;
    if (future != null) {
      future.cancel(false);
      this.connectTimeoutFuture = null;
    } 
  }
  
  protected abstract boolean doConnect(SocketAddress paramSocketAddress1, SocketAddress paramSocketAddress2) throws Exception;
  
  protected abstract void doFinishConnect();
}
