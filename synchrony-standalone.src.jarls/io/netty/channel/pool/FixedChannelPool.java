package io.netty.channel.pool;

import io.netty.bootstrap.Bootstrap;
import io.netty.channel.Channel;
import io.netty.util.concurrent.EventExecutor;
import io.netty.util.concurrent.Future;
import io.netty.util.concurrent.GlobalEventExecutor;
import io.netty.util.concurrent.Promise;
import io.netty.util.internal.ObjectUtil;
import java.nio.channels.ClosedChannelException;
import java.util.ArrayDeque;
import java.util.Queue;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;

public class FixedChannelPool extends SimpleChannelPool {
  private final EventExecutor executor;
  
  private final long acquireTimeoutNanos;
  
  private final Runnable timeoutTask;
  
  private final Queue<AcquireTask> pendingAcquireQueue = new ArrayDeque();
  
  private final int maxConnections;
  
  private final int maxPendingAcquires;
  
  private final AtomicInteger acquiredChannelCount = new AtomicInteger();
  
  private int pendingAcquireCount;
  
  private boolean closed;
  
  public FixedChannelPool(Bootstrap bootstrap, ChannelPoolHandler handler, int maxConnections) { this(bootstrap, handler, maxConnections, 2147483647); }
  
  public FixedChannelPool(Bootstrap bootstrap, ChannelPoolHandler handler, int maxConnections, int maxPendingAcquires) { this(bootstrap, handler, ChannelHealthChecker.ACTIVE, null, -1L, maxConnections, maxPendingAcquires); }
  
  public FixedChannelPool(Bootstrap bootstrap, ChannelPoolHandler handler, ChannelHealthChecker healthCheck, AcquireTimeoutAction action, long acquireTimeoutMillis, int maxConnections, int maxPendingAcquires) { this(bootstrap, handler, healthCheck, action, acquireTimeoutMillis, maxConnections, maxPendingAcquires, true); }
  
  public FixedChannelPool(Bootstrap bootstrap, ChannelPoolHandler handler, ChannelHealthChecker healthCheck, AcquireTimeoutAction action, long acquireTimeoutMillis, int maxConnections, int maxPendingAcquires, boolean releaseHealthCheck) { this(bootstrap, handler, healthCheck, action, acquireTimeoutMillis, maxConnections, maxPendingAcquires, releaseHealthCheck, true); }
  
  public FixedChannelPool(Bootstrap bootstrap, ChannelPoolHandler handler, ChannelHealthChecker healthCheck, AcquireTimeoutAction action, long acquireTimeoutMillis, int maxConnections, int maxPendingAcquires, boolean releaseHealthCheck, boolean lastRecentUsed) {
    super(bootstrap, handler, healthCheck, releaseHealthCheck, lastRecentUsed);
    ObjectUtil.checkPositive(maxConnections, "maxConnections");
    ObjectUtil.checkPositive(maxPendingAcquires, "maxPendingAcquires");
    if (action == null && acquireTimeoutMillis == -1L) {
      this.timeoutTask = null;
      this.acquireTimeoutNanos = -1L;
    } else {
      if (action == null && acquireTimeoutMillis != -1L)
        throw new NullPointerException("action"); 
      if (action != null && acquireTimeoutMillis < 0L)
        throw new IllegalArgumentException("acquireTimeoutMillis: " + acquireTimeoutMillis + " (expected: >= 0)"); 
      this.acquireTimeoutNanos = TimeUnit.MILLISECONDS.toNanos(acquireTimeoutMillis);
      switch (null.$SwitchMap$io$netty$channel$pool$FixedChannelPool$AcquireTimeoutAction[action.ordinal()]) {
        case 1:
          this.timeoutTask = new Object(this);
          break;
        case 2:
          this.timeoutTask = new Object(this);
          break;
        default:
          throw new Error();
      } 
    } 
    this.executor = bootstrap.config().group().next();
    this.maxConnections = maxConnections;
    this.maxPendingAcquires = maxPendingAcquires;
  }
  
  public int acquiredChannelCount() { return this.acquiredChannelCount.get(); }
  
  public Future<Channel> acquire(Promise<Channel> promise) {
    try {
      if (this.executor.inEventLoop()) {
        acquire0(promise);
      } else {
        this.executor.execute(new Object(this, promise));
      } 
    } catch (Throwable cause) {
      promise.tryFailure(cause);
    } 
    return promise;
  }
  
  private void acquire0(Promise<Channel> promise) {
    try {
      assert this.executor.inEventLoop();
      if (this.closed) {
        promise.setFailure(new IllegalStateException("FixedChannelPool was closed"));
        return;
      } 
      if (this.acquiredChannelCount.get() < this.maxConnections) {
        assert this.acquiredChannelCount.get() >= 0;
        Promise<Channel> p = this.executor.newPromise();
        AcquireListener l = new AcquireListener(this, promise);
        l.acquired();
        p.addListener(l);
        super.acquire(p);
      } else {
        if (this.pendingAcquireCount >= this.maxPendingAcquires) {
          tooManyOutstanding(promise);
        } else {
          AcquireTask task = new AcquireTask(this, promise);
          if (this.pendingAcquireQueue.offer(task)) {
            this.pendingAcquireCount++;
            if (this.timeoutTask != null)
              task.timeoutFuture = this.executor.schedule(this.timeoutTask, this.acquireTimeoutNanos, TimeUnit.NANOSECONDS); 
          } else {
            tooManyOutstanding(promise);
          } 
        } 
        assert this.pendingAcquireCount > 0;
      } 
    } catch (Throwable cause) {
      promise.tryFailure(cause);
    } 
  }
  
  private void tooManyOutstanding(Promise<?> promise) { promise.setFailure(new IllegalStateException("Too many outstanding acquire operations")); }
  
  public Future<Void> release(Channel channel, Promise<Void> promise) {
    ObjectUtil.checkNotNull(promise, "promise");
    Promise<Void> p = this.executor.newPromise();
    super.release(channel, p.addListener(new Object(this, channel, promise)));
    return promise;
  }
  
  private void decrementAndRunTaskQueue() {
    int currentCount = this.acquiredChannelCount.decrementAndGet();
    assert currentCount >= 0;
    runTaskQueue();
  }
  
  private void runTaskQueue() {
    while (this.acquiredChannelCount.get() < this.maxConnections) {
      AcquireTask task = (AcquireTask)this.pendingAcquireQueue.poll();
      if (task == null)
        break; 
      ScheduledFuture<?> timeoutFuture = task.timeoutFuture;
      if (timeoutFuture != null)
        timeoutFuture.cancel(false); 
      this.pendingAcquireCount--;
      task.acquired();
      super.acquire(task.promise);
    } 
    assert this.pendingAcquireCount >= 0;
    assert this.acquiredChannelCount.get() >= 0;
  }
  
  public void close() {
    try {
      closeAsync().await();
    } catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new RuntimeException(e);
    } 
  }
  
  public Future<Void> closeAsync() {
    if (this.executor.inEventLoop())
      return close0(); 
    Promise<Void> closeComplete = this.executor.newPromise();
    this.executor.execute(new Object(this, closeComplete));
    return closeComplete;
  }
  
  private Future<Void> close0() {
    assert this.executor.inEventLoop();
    if (!this.closed) {
      this.closed = true;
      while (true) {
        AcquireTask task = (AcquireTask)this.pendingAcquireQueue.poll();
        if (task == null)
          break; 
        ScheduledFuture<?> f = task.timeoutFuture;
        if (f != null)
          f.cancel(false); 
        task.promise.setFailure(new ClosedChannelException());
      } 
      this.acquiredChannelCount.set(0);
      this.pendingAcquireCount = 0;
      return GlobalEventExecutor.INSTANCE.submit(new Object(this));
    } 
    return GlobalEventExecutor.INSTANCE.newSucceededFuture(null);
  }
}
