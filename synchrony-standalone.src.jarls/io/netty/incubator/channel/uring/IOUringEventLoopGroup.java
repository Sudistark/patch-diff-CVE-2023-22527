package io.netty.incubator.channel.uring;

import io.netty.channel.EventLoop;
import io.netty.channel.EventLoopTaskQueueFactory;
import io.netty.channel.MultithreadEventLoopGroup;
import io.netty.util.concurrent.DefaultEventExecutorChooserFactory;
import io.netty.util.concurrent.EventExecutor;
import io.netty.util.concurrent.EventExecutorChooserFactory;
import io.netty.util.concurrent.RejectedExecutionHandler;
import io.netty.util.concurrent.RejectedExecutionHandlers;
import io.netty.util.concurrent.ThreadPerTaskExecutor;
import io.netty.util.internal.ObjectUtil;
import java.util.concurrent.Executor;
import java.util.concurrent.ThreadFactory;

public final class IOUringEventLoopGroup extends MultithreadEventLoopGroup {
  static  {
    IOUring.ensureAvailability();
  }
  
  public IOUringEventLoopGroup() { this(0); }
  
  public IOUringEventLoopGroup(int nThreads) { this(nThreads, (ThreadFactory)null); }
  
  public IOUringEventLoopGroup(ThreadFactory threadFactory) { this(0, threadFactory, 0, Native.DEFAULT_IOSEQ_ASYNC_THRESHOLD); }
  
  public IOUringEventLoopGroup(int nThreads, ThreadFactory threadFactory) { this(nThreads, threadFactory, 0, Native.DEFAULT_IOSEQ_ASYNC_THRESHOLD); }
  
  public IOUringEventLoopGroup(int nThreads, Executor executor) { this(nThreads, executor, 0, Native.DEFAULT_IOSEQ_ASYNC_THRESHOLD); }
  
  public IOUringEventLoopGroup(int nThreads, ThreadFactory threadFactory, int ringSize, int iosqeAsyncThreshold) { this(nThreads, (threadFactory == null) ? null : new ThreadPerTaskExecutor(threadFactory), ringSize, iosqeAsyncThreshold); }
  
  public IOUringEventLoopGroup(int nThreads, Executor executor, int ringsize, int iosqeAsyncThreshold) {
    this(nThreads, executor, DefaultEventExecutorChooserFactory.INSTANCE, ringsize, iosqeAsyncThreshold, 
        RejectedExecutionHandlers.reject());
  }
  
  private IOUringEventLoopGroup(int nThreads, Executor executor, EventExecutorChooserFactory chooserFactory, int ringSize, int iosqeAsyncThreshold, RejectedExecutionHandler rejectedExecutionHandler) { this(nThreads, executor, chooserFactory, ringSize, iosqeAsyncThreshold, rejectedExecutionHandler, null); }
  
  private IOUringEventLoopGroup(int nThreads, Executor executor, EventExecutorChooserFactory chooserFactory, int ringSize, int iosqeAsyncThreshold, RejectedExecutionHandler rejectedExecutionHandler, EventLoopTaskQueueFactory queueFactory) { super(nThreads, executor, chooserFactory, new Object[] { Integer.valueOf(ringSize), Integer.valueOf(iosqeAsyncThreshold), rejectedExecutionHandler, queueFactory }); }
  
  protected EventLoop newChild(Executor executor, Object... args) {
    if (args.length != 4)
      throw new IllegalArgumentException("Illegal amount of extra arguments"); 
    int ringSize = ObjectUtil.checkPositiveOrZero(((Integer)args[0]).intValue(), "ringSize");
    if (ringSize == 0)
      ringSize = Native.DEFAULT_RING_SIZE; 
    int iosqeAsyncThreshold = ObjectUtil.checkPositiveOrZero(((Integer)args[1]).intValue(), "iosqeAsyncThreshold");
    RejectedExecutionHandler rejectedExecutionHandler = (RejectedExecutionHandler)args[2];
    EventLoopTaskQueueFactory taskQueueFactory = (EventLoopTaskQueueFactory)args[3];
    return new IOUringEventLoop(this, executor, ringSize, iosqeAsyncThreshold, rejectedExecutionHandler, taskQueueFactory);
  }
}
