package io.netty.incubator.channel.uring;

import io.netty.buffer.ByteBuf;
import io.netty.channel.AbstractChannel;
import io.netty.channel.AddressedEnvelope;
import io.netty.channel.ChannelConfig;
import io.netty.channel.ChannelFuture;
import io.netty.channel.ChannelMetadata;
import io.netty.channel.ChannelPromise;
import io.netty.channel.DefaultAddressedEnvelope;
import io.netty.channel.socket.DatagramChannel;
import io.netty.channel.socket.DatagramChannelConfig;
import io.netty.channel.socket.DatagramPacket;
import io.netty.channel.socket.InternetProtocolFamily;
import io.netty.channel.unix.Errors;
import io.netty.channel.unix.FileDescriptor;
import io.netty.channel.unix.Socket;
import io.netty.util.internal.ObjectUtil;
import io.netty.util.internal.StringUtil;
import java.io.IOException;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.NetworkInterface;
import java.net.PortUnreachableException;
import java.net.SocketAddress;

public final class IOUringDatagramChannel extends AbstractIOUringChannel implements DatagramChannel {
  private static final ChannelMetadata METADATA = new ChannelMetadata(true);
  
  private static final String EXPECTED_TYPES = " (expected: " + 
    StringUtil.simpleClassName(DatagramPacket.class) + ", " + 
    StringUtil.simpleClassName(AddressedEnvelope.class) + '<' + 
    StringUtil.simpleClassName(ByteBuf.class) + ", " + 
    StringUtil.simpleClassName(InetSocketAddress.class) + ">, " + 
    StringUtil.simpleClassName(ByteBuf.class) + ')';
  
  private final IOUringDatagramChannelConfig config;
  
  public IOUringDatagramChannel() { this(null); }
  
  public IOUringDatagramChannel(InternetProtocolFamily family) {
    this((family == null) ? 
        LinuxSocket.newSocketDgram(Socket.isIPv6Preferred()) : 
        LinuxSocket.newSocketDgram((family == InternetProtocolFamily.IPv6)), false);
  }
  
  public IOUringDatagramChannel(int fd) { this(new LinuxSocket(fd), true); }
  
  private IOUringDatagramChannel(LinuxSocket fd, boolean active) {
    super(null, fd, active);
    this.config = new IOUringDatagramChannelConfig(this);
  }
  
  public InetSocketAddress remoteAddress() { return (InetSocketAddress)super.remoteAddress(); }
  
  public InetSocketAddress localAddress() { return (InetSocketAddress)super.localAddress(); }
  
  public ChannelMetadata metadata() { return METADATA; }
  
  public boolean isActive() { return (this.socket.isOpen() && ((this.config.getActiveOnOpen() && isRegistered()) || this.active)); }
  
  public boolean isConnected() { return this.connected; }
  
  public ChannelFuture joinGroup(InetAddress multicastAddress) { return joinGroup(multicastAddress, newPromise()); }
  
  public ChannelFuture joinGroup(InetAddress multicastAddress, ChannelPromise promise) {
    try {
      return joinGroup(multicastAddress, 
          
          NetworkInterface.getByInetAddress(localAddress().getAddress()), null, promise);
    } catch (IOException e) {
      promise.setFailure(e);
      return promise;
    } 
  }
  
  public ChannelFuture joinGroup(InetSocketAddress multicastAddress, NetworkInterface networkInterface) { return joinGroup(multicastAddress, networkInterface, newPromise()); }
  
  public ChannelFuture joinGroup(InetSocketAddress multicastAddress, NetworkInterface networkInterface, ChannelPromise promise) { return joinGroup(multicastAddress.getAddress(), networkInterface, null, promise); }
  
  public ChannelFuture joinGroup(InetAddress multicastAddress, NetworkInterface networkInterface, InetAddress source) { return joinGroup(multicastAddress, networkInterface, source, newPromise()); }
  
  public ChannelFuture joinGroup(InetAddress multicastAddress, NetworkInterface networkInterface, InetAddress source, ChannelPromise promise) {
    ObjectUtil.checkNotNull(multicastAddress, "multicastAddress");
    ObjectUtil.checkNotNull(networkInterface, "networkInterface");
    try {
      this.socket.joinGroup(multicastAddress, networkInterface, source);
      promise.setSuccess();
    } catch (IOException e) {
      promise.setFailure(e);
    } 
    return promise;
  }
  
  public ChannelFuture leaveGroup(InetAddress multicastAddress) { return leaveGroup(multicastAddress, newPromise()); }
  
  public ChannelFuture leaveGroup(InetAddress multicastAddress, ChannelPromise promise) {
    try {
      return leaveGroup(multicastAddress, 
          NetworkInterface.getByInetAddress(localAddress().getAddress()), null, promise);
    } catch (IOException e) {
      promise.setFailure(e);
      return promise;
    } 
  }
  
  public ChannelFuture leaveGroup(InetSocketAddress multicastAddress, NetworkInterface networkInterface) { return leaveGroup(multicastAddress, networkInterface, newPromise()); }
  
  public ChannelFuture leaveGroup(InetSocketAddress multicastAddress, NetworkInterface networkInterface, ChannelPromise promise) { return leaveGroup(multicastAddress.getAddress(), networkInterface, null, promise); }
  
  public ChannelFuture leaveGroup(InetAddress multicastAddress, NetworkInterface networkInterface, InetAddress source) { return leaveGroup(multicastAddress, networkInterface, source, newPromise()); }
  
  public ChannelFuture leaveGroup(InetAddress multicastAddress, NetworkInterface networkInterface, InetAddress source, ChannelPromise promise) {
    ObjectUtil.checkNotNull(multicastAddress, "multicastAddress");
    ObjectUtil.checkNotNull(networkInterface, "networkInterface");
    try {
      this.socket.leaveGroup(multicastAddress, networkInterface, source);
      promise.setSuccess();
    } catch (IOException e) {
      promise.setFailure(e);
    } 
    return promise;
  }
  
  public ChannelFuture block(InetAddress multicastAddress, NetworkInterface networkInterface, InetAddress sourceToBlock) { return block(multicastAddress, networkInterface, sourceToBlock, newPromise()); }
  
  public ChannelFuture block(InetAddress multicastAddress, NetworkInterface networkInterface, InetAddress sourceToBlock, ChannelPromise promise) {
    ObjectUtil.checkNotNull(multicastAddress, "multicastAddress");
    ObjectUtil.checkNotNull(sourceToBlock, "sourceToBlock");
    ObjectUtil.checkNotNull(networkInterface, "networkInterface");
    promise.setFailure(new UnsupportedOperationException("Multicast not supported"));
    return promise;
  }
  
  public ChannelFuture block(InetAddress multicastAddress, InetAddress sourceToBlock) { return block(multicastAddress, sourceToBlock, newPromise()); }
  
  public ChannelFuture block(InetAddress multicastAddress, InetAddress sourceToBlock, ChannelPromise promise) {
    try {
      return block(multicastAddress, 
          
          NetworkInterface.getByInetAddress(localAddress().getAddress()), sourceToBlock, promise);
    } catch (Throwable e) {
      promise.setFailure(e);
      return promise;
    } 
  }
  
  protected AbstractIOUringChannel.AbstractUringUnsafe newUnsafe() { return new IOUringDatagramChannelUnsafe(this); }
  
  protected void doBind(SocketAddress localAddress) throws Exception {
    if (localAddress instanceof InetSocketAddress) {
      InetSocketAddress socketAddress = (InetSocketAddress)localAddress;
      if (socketAddress.getAddress().isAnyLocalAddress() && socketAddress
        .getAddress() instanceof java.net.Inet4Address && 
        this.socket.family() == InternetProtocolFamily.IPv6)
        localAddress = new InetSocketAddress(LinuxSocket.INET6_ANY, socketAddress.getPort()); 
    } 
    super.doBind(localAddress);
    this.active = true;
  }
  
  protected Object filterOutboundMessage(Object msg) {
    if (msg instanceof DatagramPacket) {
      DatagramPacket packet = (DatagramPacket)msg;
      ByteBuf content = (ByteBuf)packet.content();
      return !content.hasMemoryAddress() ? packet
        .replace(newDirectBuffer(packet, content)) : msg;
    } 
    if (msg instanceof ByteBuf) {
      ByteBuf buf = (ByteBuf)msg;
      return !buf.hasMemoryAddress() ? newDirectBuffer(buf) : buf;
    } 
    if (msg instanceof AddressedEnvelope) {
      AddressedEnvelope<Object, SocketAddress> e = (AddressedEnvelope)msg;
      if (e.content() instanceof ByteBuf && (e
        .recipient() == null || e.recipient() instanceof InetSocketAddress)) {
        ByteBuf content = (ByteBuf)e.content();
        return !content.hasMemoryAddress() ? new DefaultAddressedEnvelope(
            
            newDirectBuffer(e, content), (InetSocketAddress)e.recipient()) : e;
      } 
    } 
    throw new UnsupportedOperationException("unsupported message type: " + 
        StringUtil.simpleClassName(msg) + EXPECTED_TYPES);
  }
  
  public IOUringDatagramChannelConfig config() { return this.config; }
  
  protected void doDisconnect() {
    this.socket.disconnect();
    this.connected = this.active = false;
    resetCachedAddresses();
  }
  
  protected void doClose() {
    super.doClose();
    ((IOUringDatagramChannelUnsafe)unsafe()).releaseBuffers();
    this.connected = false;
  }
  
  private static IOException translateForConnected(Errors.NativeIoException e) {
    if (e.expectedErr() == Errors.ERROR_ECONNREFUSED_NEGATIVE) {
      PortUnreachableException error = new PortUnreachableException(e.getMessage());
      error.initCause(e);
      return error;
    } 
    return e;
  }
  
  public static boolean isSegmentedDatagramPacketSupported() { return IOUring.isAvailable(); }
}
