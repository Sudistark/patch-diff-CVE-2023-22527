package io.netty.incubator.channel.uring;

import io.netty.channel.AbstractChannel;
import io.netty.channel.Channel;
import io.netty.channel.ChannelFuture;
import io.netty.channel.ChannelPromise;
import io.netty.channel.EventLoop;
import io.netty.channel.socket.DuplexChannel;
import io.netty.util.internal.logging.InternalLogger;
import io.netty.util.internal.logging.InternalLoggerFactory;
import java.net.SocketAddress;
import java.util.concurrent.Executor;

abstract class AbstractIOUringStreamChannel extends AbstractIOUringChannel implements DuplexChannel {
  private static final InternalLogger logger = InternalLoggerFactory.getInstance(AbstractIOUringStreamChannel.class);
  
  AbstractIOUringStreamChannel(Channel parent, LinuxSocket socket) { super(parent, socket); }
  
  protected AbstractIOUringStreamChannel(Channel parent, LinuxSocket socket, boolean active) { super(parent, socket, active); }
  
  AbstractIOUringStreamChannel(Channel parent, LinuxSocket fd, SocketAddress remote) { super(parent, fd, remote); }
  
  protected AbstractIOUringChannel.AbstractUringUnsafe newUnsafe() { return new IOUringStreamUnsafe(this, null); }
  
  public ChannelFuture shutdown() { return shutdown(newPromise()); }
  
  public ChannelFuture shutdown(ChannelPromise promise) {
    ChannelFuture shutdownOutputFuture = shutdownOutput();
    if (shutdownOutputFuture.isDone()) {
      shutdownOutputDone(shutdownOutputFuture, promise);
    } else {
      shutdownOutputFuture.addListener(new Object(this, promise));
    } 
    return promise;
  }
  
  protected final void doShutdownOutput() throws Exception { this.socket.shutdown(false, true); }
  
  private void shutdownInput0(ChannelPromise promise) {
    try {
      this.socket.shutdown(true, false);
      promise.setSuccess();
    } catch (Throwable cause) {
      promise.setFailure(cause);
    } 
  }
  
  public boolean isOutputShutdown() { return this.socket.isOutputShutdown(); }
  
  public boolean isInputShutdown() { return this.socket.isInputShutdown(); }
  
  public boolean isShutdown() { return this.socket.isShutdown(); }
  
  public ChannelFuture shutdownOutput() { return shutdownOutput(newPromise()); }
  
  public ChannelFuture shutdownOutput(ChannelPromise promise) {
    EventLoop loop = eventLoop();
    if (loop.inEventLoop()) {
      ((AbstractChannel.AbstractUnsafe)unsafe()).shutdownOutput(promise);
    } else {
      loop.execute(new Object(this, promise));
    } 
    return promise;
  }
  
  public ChannelFuture shutdownInput() { return shutdownInput(newPromise()); }
  
  public ChannelFuture shutdownInput(ChannelPromise promise) {
    Executor closeExecutor = ((IOUringStreamUnsafe)unsafe()).prepareToClose();
    if (closeExecutor != null) {
      closeExecutor.execute(new Object(this, promise));
    } else {
      EventLoop loop = eventLoop();
      if (loop.inEventLoop()) {
        shutdownInput0(promise);
      } else {
        loop.execute(new Object(this, promise));
      } 
    } 
    return promise;
  }
  
  private void shutdownOutputDone(ChannelFuture shutdownOutputFuture, ChannelPromise promise) {
    ChannelFuture shutdownInputFuture = shutdownInput();
    if (shutdownInputFuture.isDone()) {
      shutdownDone(shutdownOutputFuture, shutdownInputFuture, promise);
    } else {
      shutdownInputFuture.addListener(new Object(this, shutdownOutputFuture, promise));
    } 
  }
  
  private static void shutdownDone(ChannelFuture shutdownOutputFuture, ChannelFuture shutdownInputFuture, ChannelPromise promise) {
    Throwable shutdownOutputCause = shutdownOutputFuture.cause();
    Throwable shutdownInputCause = shutdownInputFuture.cause();
    if (shutdownOutputCause != null) {
      if (shutdownInputCause != null)
        logger.info("Exception suppressed because a previous exception occurred.", shutdownInputCause); 
      promise.setFailure(shutdownOutputCause);
    } else if (shutdownInputCause != null) {
      promise.setFailure(shutdownInputCause);
    } else {
      promise.setSuccess();
    } 
  }
  
  protected void doRegister() throws Exception {
    super.doRegister();
    if (this.active)
      schedulePollRdHup(); 
  }
}
