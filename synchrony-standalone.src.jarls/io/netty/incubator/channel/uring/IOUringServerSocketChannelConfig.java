package io.netty.incubator.channel.uring;

import io.netty.buffer.ByteBufAllocator;
import io.netty.channel.ChannelConfig;
import io.netty.channel.ChannelException;
import io.netty.channel.ChannelOption;
import io.netty.channel.DefaultChannelConfig;
import io.netty.channel.MessageSizeEstimator;
import io.netty.channel.RecvByteBufAllocator;
import io.netty.channel.ServerChannelRecvByteBufAllocator;
import io.netty.channel.WriteBufferWaterMark;
import io.netty.channel.socket.ServerSocketChannelConfig;
import io.netty.util.NetUtil;
import io.netty.util.internal.ObjectUtil;
import java.io.IOException;
import java.util.Map;

public final class IOUringServerSocketChannelConfig extends DefaultChannelConfig implements ServerSocketChannelConfig {
  IOUringServerSocketChannelConfig(AbstractIOUringServerChannel channel) {
    super(channel, new ServerChannelRecvByteBufAllocator());
    setReuseAddress(true);
  }
  
  public Map<ChannelOption<?>, Object> getOptions() { return getOptions(super.getOptions(), new ChannelOption[] { ChannelOption.SO_RCVBUF, ChannelOption.SO_REUSEADDR, ChannelOption.SO_BACKLOG, IOUringChannelOption.SO_REUSEPORT, IOUringChannelOption.IP_FREEBIND, IOUringChannelOption.IP_TRANSPARENT, IOUringChannelOption.TCP_DEFER_ACCEPT }); }
  
  public <T> T getOption(ChannelOption<T> option) {
    if (option == ChannelOption.SO_RCVBUF)
      return (T)Integer.valueOf(getReceiveBufferSize()); 
    if (option == ChannelOption.SO_REUSEADDR)
      return (T)Boolean.valueOf(isReuseAddress()); 
    if (option == ChannelOption.SO_BACKLOG)
      return (T)Integer.valueOf(getBacklog()); 
    if (option == IOUringChannelOption.SO_REUSEPORT)
      return (T)Boolean.valueOf(isReusePort()); 
    if (option == IOUringChannelOption.IP_FREEBIND)
      return (T)Boolean.valueOf(isFreeBind()); 
    if (option == IOUringChannelOption.IP_TRANSPARENT)
      return (T)Boolean.valueOf(isIpTransparent()); 
    if (option == IOUringChannelOption.TCP_DEFER_ACCEPT)
      return (T)Integer.valueOf(getTcpDeferAccept()); 
    return (T)super.getOption(option);
  }
  
  public <T> boolean setOption(ChannelOption<T> option, T value) {
    validate(option, value);
    if (option == ChannelOption.SO_RCVBUF) {
      setReceiveBufferSize(((Integer)value).intValue());
    } else if (option == ChannelOption.SO_REUSEADDR) {
      setReuseAddress(((Boolean)value).booleanValue());
    } else if (option == ChannelOption.SO_BACKLOG) {
      setBacklog(((Integer)value).intValue());
    } else if (option == IOUringChannelOption.SO_REUSEPORT) {
      setReusePort(((Boolean)value).booleanValue());
    } else if (option == IOUringChannelOption.IP_FREEBIND) {
      setFreeBind(((Boolean)value).booleanValue());
    } else if (option == IOUringChannelOption.IP_TRANSPARENT) {
      setIpTransparent(((Boolean)value).booleanValue());
    } else if (option == IOUringChannelOption.TCP_DEFER_ACCEPT) {
      setTcpDeferAccept(((Integer)value).intValue());
    } else {
      return super.setOption(option, value);
    } 
    return true;
  }
  
  public IOUringServerSocketChannelConfig setPerformancePreferences(int connectionTime, int latency, int bandwidth) { return this; }
  
  public boolean isReuseAddress() {
    try {
      return ((AbstractIOUringChannel)this.channel).socket.isReuseAddress();
    } catch (IOException e) {
      throw new ChannelException(e);
    } 
  }
  
  public IOUringServerSocketChannelConfig setReuseAddress(boolean reuseAddress) {
    try {
      ((AbstractIOUringChannel)this.channel).socket.setReuseAddress(reuseAddress);
      return this;
    } catch (IOException e) {
      throw new ChannelException(e);
    } 
  }
  
  public int getReceiveBufferSize() {
    try {
      return ((AbstractIOUringChannel)this.channel).socket.getReceiveBufferSize();
    } catch (IOException e) {
      throw new ChannelException(e);
    } 
  }
  
  public IOUringServerSocketChannelConfig setReceiveBufferSize(int receiveBufferSize) {
    try {
      ((AbstractIOUringChannel)this.channel).socket.setReceiveBufferSize(receiveBufferSize);
      return this;
    } catch (IOException e) {
      throw new ChannelException(e);
    } 
  }
  
  public int getBacklog() { return this.backlog; }
  
  public IOUringServerSocketChannelConfig setBacklog(int backlog) {
    ObjectUtil.checkPositiveOrZero(backlog, "backlog");
    this.backlog = backlog;
    return this;
  }
  
  public IOUringServerSocketChannelConfig setConnectTimeoutMillis(int connectTimeoutMillis) {
    super.setConnectTimeoutMillis(connectTimeoutMillis);
    return this;
  }
  
  @Deprecated
  public IOUringServerSocketChannelConfig setMaxMessagesPerRead(int maxMessagesPerRead) {
    super.setMaxMessagesPerRead(maxMessagesPerRead);
    return this;
  }
  
  public IOUringServerSocketChannelConfig setWriteSpinCount(int writeSpinCount) {
    super.setWriteSpinCount(writeSpinCount);
    return this;
  }
  
  public IOUringServerSocketChannelConfig setAllocator(ByteBufAllocator allocator) {
    super.setAllocator(allocator);
    return this;
  }
  
  public IOUringServerSocketChannelConfig setRecvByteBufAllocator(RecvByteBufAllocator allocator) {
    super.setRecvByteBufAllocator(allocator);
    return this;
  }
  
  public IOUringServerSocketChannelConfig setAutoRead(boolean autoRead) {
    super.setAutoRead(autoRead);
    return this;
  }
  
  @Deprecated
  public IOUringServerSocketChannelConfig setWriteBufferHighWaterMark(int writeBufferHighWaterMark) {
    super.setWriteBufferHighWaterMark(writeBufferHighWaterMark);
    return this;
  }
  
  @Deprecated
  public IOUringServerSocketChannelConfig setWriteBufferLowWaterMark(int writeBufferLowWaterMark) {
    super.setWriteBufferLowWaterMark(writeBufferLowWaterMark);
    return this;
  }
  
  public IOUringServerSocketChannelConfig setWriteBufferWaterMark(WriteBufferWaterMark writeBufferWaterMark) {
    super.setWriteBufferWaterMark(writeBufferWaterMark);
    return this;
  }
  
  public IOUringServerSocketChannelConfig setMessageSizeEstimator(MessageSizeEstimator estimator) {
    super.setMessageSizeEstimator(estimator);
    return this;
  }
  
  public boolean isReusePort() {
    try {
      return ((IOUringServerSocketChannel)this.channel).socket.isReusePort();
    } catch (IOException e) {
      throw new ChannelException(e);
    } 
  }
  
  public IOUringServerSocketChannelConfig setReusePort(boolean reusePort) {
    try {
      ((IOUringServerSocketChannel)this.channel).socket.setReusePort(reusePort);
      return this;
    } catch (IOException e) {
      throw new ChannelException(e);
    } 
  }
  
  public boolean isFreeBind() {
    try {
      return ((IOUringServerSocketChannel)this.channel).socket.isIpFreeBind();
    } catch (IOException e) {
      throw new ChannelException(e);
    } 
  }
  
  public IOUringServerSocketChannelConfig setFreeBind(boolean freeBind) {
    try {
      ((IOUringServerSocketChannel)this.channel).socket.setIpFreeBind(freeBind);
      return this;
    } catch (IOException e) {
      throw new ChannelException(e);
    } 
  }
  
  public boolean isIpTransparent() {
    try {
      return ((IOUringServerSocketChannel)this.channel).socket.isIpTransparent();
    } catch (IOException e) {
      throw new ChannelException(e);
    } 
  }
  
  public IOUringServerSocketChannelConfig setIpTransparent(boolean transparent) {
    try {
      ((IOUringServerSocketChannel)this.channel).socket.setIpTransparent(transparent);
      return this;
    } catch (IOException e) {
      throw new ChannelException(e);
    } 
  }
  
  public IOUringServerSocketChannelConfig setTcpDeferAccept(int deferAccept) {
    try {
      ((IOUringServerSocketChannel)this.channel).socket.setTcpDeferAccept(deferAccept);
      return this;
    } catch (IOException e) {
      throw new ChannelException(e);
    } 
  }
  
  public int getTcpDeferAccept() {
    try {
      return ((IOUringServerSocketChannel)this.channel).socket.getTcpDeferAccept();
    } catch (IOException e) {
      throw new ChannelException(e);
    } 
  }
}
