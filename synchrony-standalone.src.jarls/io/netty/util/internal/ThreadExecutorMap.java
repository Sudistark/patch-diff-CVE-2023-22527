package io.netty.util.internal;

import io.netty.util.concurrent.EventExecutor;
import io.netty.util.concurrent.FastThreadLocal;
import java.util.concurrent.Executor;
import java.util.concurrent.ThreadFactory;

public final class ThreadExecutorMap {
  private static final FastThreadLocal<EventExecutor> mappings = new FastThreadLocal();
  
  public static EventExecutor currentExecutor() { return (EventExecutor)mappings.get(); }
  
  private static void setCurrentEventExecutor(EventExecutor executor) { mappings.set(executor); }
  
  public static Executor apply(Executor executor, EventExecutor eventExecutor) {
    ObjectUtil.checkNotNull(executor, "executor");
    ObjectUtil.checkNotNull(eventExecutor, "eventExecutor");
    return new Object(executor, eventExecutor);
  }
  
  public static Runnable apply(Runnable command, EventExecutor eventExecutor) {
    ObjectUtil.checkNotNull(command, "command");
    ObjectUtil.checkNotNull(eventExecutor, "eventExecutor");
    return new Object(eventExecutor, command);
  }
  
  public static ThreadFactory apply(ThreadFactory threadFactory, EventExecutor eventExecutor) {
    ObjectUtil.checkNotNull(threadFactory, "threadFactory");
    ObjectUtil.checkNotNull(eventExecutor, "eventExecutor");
    return new Object(threadFactory, eventExecutor);
  }
}
