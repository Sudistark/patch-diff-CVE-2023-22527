package io.netty.util;

import io.netty.util.internal.ObjectUtil;
import io.netty.util.internal.PlatformDependent;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.atomic.AtomicInteger;

public abstract class ConstantPool<T extends Constant<T>> extends Object {
  private final ConcurrentMap<String, T> constants = PlatformDependent.newConcurrentHashMap();
  
  private final AtomicInteger nextId = new AtomicInteger(1);
  
  public T valueOf(Class<?> firstNameComponent, String secondNameComponent) { return (T)valueOf((
        (Class)ObjectUtil.checkNotNull(firstNameComponent, "firstNameComponent")).getName() + '#' + 
        
        (String)ObjectUtil.checkNotNull(secondNameComponent, "secondNameComponent")); }
  
  public T valueOf(String name) { return (T)getOrCreate(ObjectUtil.checkNonEmpty(name, "name")); }
  
  private T getOrCreate(String name) {
    T constant = (T)(Constant)this.constants.get(name);
    if (constant == null) {
      T tempConstant = (T)newConstant(nextId(), name);
      constant = (T)(Constant)this.constants.putIfAbsent(name, tempConstant);
      if (constant == null)
        return tempConstant; 
    } 
    return constant;
  }
  
  public boolean exists(String name) { return this.constants.containsKey(ObjectUtil.checkNonEmpty(name, "name")); }
  
  public T newInstance(String name) { return (T)createOrThrow(ObjectUtil.checkNonEmpty(name, "name")); }
  
  private T createOrThrow(String name) {
    T constant = (T)(Constant)this.constants.get(name);
    if (constant == null) {
      T tempConstant = (T)newConstant(nextId(), name);
      constant = (T)(Constant)this.constants.putIfAbsent(name, tempConstant);
      if (constant == null)
        return tempConstant; 
    } 
    throw new IllegalArgumentException(String.format("'%s' is already in use", new Object[] { name }));
  }
  
  protected abstract T newConstant(int paramInt, String paramString);
  
  @Deprecated
  public final int nextId() { return this.nextId.getAndIncrement(); }
}
