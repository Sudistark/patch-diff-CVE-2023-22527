package io.netty.util;

import io.netty.util.internal.ObjectUtil;
import io.netty.util.internal.logging.InternalLogger;
import io.netty.util.internal.logging.InternalLoggerFactory;

public abstract class ResourceLeakDetectorFactory {
  private static final InternalLogger logger = InternalLoggerFactory.getInstance(ResourceLeakDetectorFactory.class);
  
  public static ResourceLeakDetectorFactory instance() { return factoryInstance; }
  
  public static void setResourceLeakDetectorFactory(ResourceLeakDetectorFactory factory) { factoryInstance = (ResourceLeakDetectorFactory)ObjectUtil.checkNotNull(factory, "factory"); }
  
  public final <T> ResourceLeakDetector<T> newResourceLeakDetector(Class<T> resource) { return newResourceLeakDetector(resource, ResourceLeakDetector.SAMPLING_INTERVAL); }
  
  public <T> ResourceLeakDetector<T> newResourceLeakDetector(Class<T> resource, int samplingInterval) {
    ObjectUtil.checkPositive(samplingInterval, "samplingInterval");
    return newResourceLeakDetector(resource, samplingInterval, Float.MAX_VALUE);
  }
  
  @Deprecated
  public abstract <T> ResourceLeakDetector<T> newResourceLeakDetector(Class<T> paramClass, int paramInt, long paramLong);
}
