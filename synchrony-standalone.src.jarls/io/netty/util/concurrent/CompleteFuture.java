package io.netty.util.concurrent;

import io.netty.util.internal.ObjectUtil;
import java.util.concurrent.TimeUnit;

public abstract class CompleteFuture<V> extends AbstractFuture<V> {
  private final EventExecutor executor;
  
  protected CompleteFuture(EventExecutor executor) { this.executor = executor; }
  
  protected EventExecutor executor() { return this.executor; }
  
  public Future<V> addListener(GenericFutureListener<? extends Future<? super V>> listener) {
    DefaultPromise.notifyListener(executor(), this, (GenericFutureListener)ObjectUtil.checkNotNull(listener, "listener"));
    return this;
  }
  
  public Future<V> addListeners(GenericFutureListener... listeners) {
    for (GenericFutureListener<? extends Future<? super V>> l : (GenericFutureListener[])ObjectUtil.checkNotNull(listeners, "listeners")) {
      if (l == null)
        break; 
      DefaultPromise.notifyListener(executor(), this, l);
    } 
    return this;
  }
  
  public Future<V> removeListener(GenericFutureListener<? extends Future<? super V>> listener) { return this; }
  
  public Future<V> removeListeners(GenericFutureListener... listeners) { return this; }
  
  public Future<V> await() throws InterruptedException {
    if (Thread.interrupted())
      throw new InterruptedException(); 
    return this;
  }
  
  public boolean await(long timeout, TimeUnit unit) throws InterruptedException {
    if (Thread.interrupted())
      throw new InterruptedException(); 
    return true;
  }
  
  public Future<V> sync() throws InterruptedException { return this; }
  
  public Future<V> syncUninterruptibly() throws InterruptedException { return this; }
  
  public boolean await(long timeoutMillis) throws InterruptedException {
    if (Thread.interrupted())
      throw new InterruptedException(); 
    return true;
  }
  
  public Future<V> awaitUninterruptibly() throws InterruptedException { return this; }
  
  public boolean awaitUninterruptibly(long timeout, TimeUnit unit) throws InterruptedException { return true; }
  
  public boolean awaitUninterruptibly(long timeoutMillis) throws InterruptedException { return true; }
  
  public boolean isDone() { return true; }
  
  public boolean isCancellable() { return false; }
  
  public boolean isCancelled() { return false; }
  
  public boolean cancel(boolean mayInterruptIfRunning) { return false; }
}
