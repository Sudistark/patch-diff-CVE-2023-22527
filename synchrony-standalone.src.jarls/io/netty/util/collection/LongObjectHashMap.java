package io.netty.util.collection;

import io.netty.util.internal.MathUtil;
import java.util.Arrays;
import java.util.Collection;
import java.util.Map;
import java.util.Set;

public class LongObjectHashMap<V> extends Object implements LongObjectMap<V> {
  public static final int DEFAULT_CAPACITY = 8;
  
  public static final float DEFAULT_LOAD_FACTOR = 0.5F;
  
  private static final Object NULL_VALUE = new Object();
  
  private int maxSize;
  
  private final float loadFactor;
  
  private long[] keys;
  
  private V[] values;
  
  private int size;
  
  private int mask;
  
  private final Set<Long> keySet = new KeySet(this, null);
  
  private final Set<Map.Entry<Long, V>> entrySet = new EntrySet(this, null);
  
  private final Iterable<LongObjectMap.PrimitiveEntry<V>> entries = new Object(this);
  
  public LongObjectHashMap() { this(8, 0.5F); }
  
  public LongObjectHashMap(int initialCapacity) { this(initialCapacity, 0.5F); }
  
  public LongObjectHashMap(int initialCapacity, float loadFactor) {
    if (loadFactor <= 0.0F || loadFactor > 1.0F)
      throw new IllegalArgumentException("loadFactor must be > 0 and <= 1"); 
    this.loadFactor = loadFactor;
    int capacity = MathUtil.safeFindNextPositivePowerOfTwo(initialCapacity);
    this.mask = capacity - 1;
    this.keys = new long[capacity];
    V[] temp = (V[])(Object[])new Object[capacity];
    this.values = temp;
    this.maxSize = calcMaxSize(capacity);
  }
  
  private static <T> T toExternal(T value) {
    assert value != null : "null is not a legitimate internal value. Concurrent Modification?";
    return (value == NULL_VALUE) ? null : value;
  }
  
  private static <T> T toInternal(T value) { return (T)((value == null) ? NULL_VALUE : value); }
  
  public V get(long key) {
    int index = indexOf(key);
    return (V)((index == -1) ? null : toExternal(this.values[index]));
  }
  
  public V put(long key, V value) {
    int startIndex = hashIndex(key);
    int index = startIndex;
    do {
      if (this.values[index] == null) {
        this.keys[index] = key;
        this.values[index] = toInternal(value);
        growSize();
        return null;
      } 
      if (this.keys[index] == key) {
        V previousValue = (V)this.values[index];
        this.values[index] = toInternal(value);
        return (V)toExternal(previousValue);
      } 
    } while ((index = probeNext(index)) != startIndex);
    throw new IllegalStateException("Unable to insert");
  }
  
  public void putAll(Map<? extends Long, ? extends V> sourceMap) {
    if (sourceMap instanceof LongObjectHashMap) {
      LongObjectHashMap<V> source = (LongObjectHashMap)sourceMap;
      for (int i = 0; i < source.values.length; i++) {
        V sourceValue = (V)source.values[i];
        if (sourceValue != null)
          put(source.keys[i], sourceValue); 
      } 
      return;
    } 
    for (Map.Entry<? extends Long, ? extends V> entry : sourceMap.entrySet())
      put((Long)entry.getKey(), entry.getValue()); 
  }
  
  public V remove(long key) {
    int index = indexOf(key);
    if (index == -1)
      return null; 
    V prev = (V)this.values[index];
    removeAt(index);
    return (V)toExternal(prev);
  }
  
  public int size() { return this.size; }
  
  public boolean isEmpty() { return (this.size == 0); }
  
  public void clear() {
    Arrays.fill(this.keys, 0L);
    Arrays.fill(this.values, null);
    this.size = 0;
  }
  
  public boolean containsKey(long key) { return (indexOf(key) >= 0); }
  
  public boolean containsValue(Object value) {
    V v1 = (V)toInternal(value);
    Object[] arrayOfObject;
    int i;
    byte b;
    for (arrayOfObject = this.values, i = arrayOfObject.length, b = 0; b < i; ) {
      V v2 = (V)arrayOfObject[b];
      if (v2 != null && v2.equals(v1))
        return true; 
      b++;
    } 
    return false;
  }
  
  public Iterable<LongObjectMap.PrimitiveEntry<V>> entries() { return this.entries; }
  
  public Collection<V> values() { return new Object(this); }
  
  public int hashCode() {
    int hash = this.size;
    for (long key : this.keys)
      hash ^= hashCode(key); 
    return hash;
  }
  
  public boolean equals(Object obj) {
    if (this == obj)
      return true; 
    if (!(obj instanceof LongObjectMap))
      return false; 
    LongObjectMap other = (LongObjectMap)obj;
    if (this.size != other.size())
      return false; 
    for (int i = 0; i < this.values.length; i++) {
      V value = (V)this.values[i];
      if (value != null) {
        long key = this.keys[i];
        Object otherValue = other.get(key);
        if (value == NULL_VALUE) {
          if (otherValue != null)
            return false; 
        } else if (!value.equals(otherValue)) {
          return false;
        } 
      } 
    } 
    return true;
  }
  
  public boolean containsKey(Object key) { return containsKey(objectToKey(key)); }
  
  public V get(Object key) { return (V)get(objectToKey(key)); }
  
  public V put(Long key, V value) { return (V)put(objectToKey(key), value); }
  
  public V remove(Object key) { return (V)remove(objectToKey(key)); }
  
  public Set<Long> keySet() { return this.keySet; }
  
  public Set<Map.Entry<Long, V>> entrySet() { return this.entrySet; }
  
  private long objectToKey(Object key) { return ((Long)key).longValue(); }
  
  private int indexOf(long key) {
    int startIndex = hashIndex(key);
    int index = startIndex;
    do {
      if (this.values[index] == null)
        return -1; 
      if (key == this.keys[index])
        return index; 
    } while ((index = probeNext(index)) != startIndex);
    return -1;
  }
  
  private int hashIndex(long key) { return hashCode(key) & this.mask; }
  
  private static int hashCode(long key) { return (int)(key ^ key >>> 32); }
  
  private int probeNext(int index) { return index + 1 & this.mask; }
  
  private void growSize() {
    this.size++;
    if (this.size > this.maxSize) {
      if (this.keys.length == Integer.MAX_VALUE)
        throw new IllegalStateException("Max capacity reached at size=" + this.size); 
      rehash(this.keys.length << 1);
    } 
  }
  
  private boolean removeAt(int index) {
    this.size--;
    this.keys[index] = 0L;
    this.values[index] = null;
    int nextFree = index;
    int i = probeNext(index);
    for (V value = (V)this.values[i]; value != null; value = (V)this.values[i = probeNext(i)]) {
      long key = this.keys[i];
      int bucket = hashIndex(key);
      if ((i < bucket && (bucket <= nextFree || nextFree <= i)) || (bucket <= nextFree && nextFree <= i)) {
        this.keys[nextFree] = key;
        this.values[nextFree] = value;
        this.keys[i] = 0L;
        this.values[i] = null;
        nextFree = i;
      } 
    } 
    return (nextFree != index);
  }
  
  private int calcMaxSize(int capacity) {
    int upperBound = capacity - 1;
    return Math.min(upperBound, (int)(capacity * this.loadFactor));
  }
  
  private void rehash(int newCapacity) {
    long[] oldKeys = this.keys;
    V[] oldVals = (V[])this.values;
    this.keys = new long[newCapacity];
    V[] temp = (V[])(Object[])new Object[newCapacity];
    this.values = temp;
    this.maxSize = calcMaxSize(newCapacity);
    this.mask = newCapacity - 1;
    for (int i = 0; i < oldVals.length; i++) {
      V oldVal = oldVals[i];
      if (oldVal != null) {
        long oldKey = oldKeys[i];
        int index = hashIndex(oldKey);
        while (true) {
          if (this.values[index] == null) {
            this.keys[index] = oldKey;
            this.values[index] = oldVal;
            break;
          } 
          index = probeNext(index);
        } 
      } 
    } 
  }
  
  public String toString() {
    if (isEmpty())
      return "{}"; 
    StringBuilder sb = new StringBuilder(4 * this.size);
    sb.append('{');
    boolean first = true;
    for (int i = 0; i < this.values.length; i++) {
      V value = (V)this.values[i];
      if (value != null) {
        if (!first)
          sb.append(", "); 
        sb.append(keyToString(this.keys[i])).append('=').append((value == this) ? "(this Map)" : 
            toExternal(value));
        first = false;
      } 
    } 
    return sb.append('}').toString();
  }
  
  protected String keyToString(long key) { return Long.toString(key); }
}
