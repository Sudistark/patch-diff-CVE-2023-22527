package io.netty.buffer.search;

public class BitapSearchProcessorFactory extends AbstractSearchProcessorFactory {
  private final long[] bitMasks = new long[256];
  
  private final long successBit;
  
  BitapSearchProcessorFactory(byte[] needle) {
    if (needle.length > 64)
      throw new IllegalArgumentException("Maximum supported search pattern length is 64, got " + needle.length); 
    long bit = 1L;
    for (byte c : needle) {
      this.bitMasks[c & 0xFF] = this.bitMasks[c & 0xFF] | bit;
      bit <<= true;
    } 
    this.successBit = 1L << needle.length - 1;
  }
  
  public Processor newSearchProcessor() { return new Processor(this.bitMasks, this.successBit); }
}
