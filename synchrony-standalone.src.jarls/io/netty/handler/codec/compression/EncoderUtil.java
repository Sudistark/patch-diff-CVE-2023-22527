package io.netty.handler.codec.compression;

import io.netty.channel.ChannelFuture;
import io.netty.channel.ChannelHandlerContext;
import io.netty.channel.ChannelPromise;
import io.netty.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;

final class EncoderUtil {
  private static final int THREAD_POOL_DELAY_SECONDS = 10;
  
  static void closeAfterFinishEncode(ChannelHandlerContext ctx, ChannelFuture finishFuture, ChannelPromise promise) {
    if (!finishFuture.isDone()) {
      ScheduledFuture scheduledFuture = ctx.executor().schedule(new Object(ctx, promise), 10L, TimeUnit.SECONDS);
      finishFuture.addListener(new Object(scheduledFuture, promise, ctx));
    } else {
      ctx.close(promise);
    } 
  }
}
