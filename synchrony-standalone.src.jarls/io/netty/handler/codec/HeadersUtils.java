package io.netty.handler.codec;

import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

public final class HeadersUtils {
  public static <K, V> List<String> getAllAsString(Headers<K, V, ?> headers, K name) {
    List<V> allNames = headers.getAll(name);
    return new Object(allNames);
  }
  
  public static <K, V> String getAsString(Headers<K, V, ?> headers, K name) {
    V orig = (V)headers.get(name);
    return (orig != null) ? orig.toString() : null;
  }
  
  public static Iterator<Map.Entry<String, String>> iteratorAsString(Iterable<Map.Entry<CharSequence, CharSequence>> headers) { return new StringEntryIterator(headers.iterator()); }
  
  public static <K, V> String toString(Class<?> headersClass, Iterator<Map.Entry<K, V>> headersIt, int size) {
    String simpleName = headersClass.getSimpleName();
    if (size == 0)
      return simpleName + "[]"; 
    StringBuilder sb = (new StringBuilder(simpleName.length() + 2 + size * 20)).append(simpleName).append('[');
    while (headersIt.hasNext()) {
      Map.Entry<?, ?> header = (Map.Entry)headersIt.next();
      sb.append(header.getKey()).append(": ").append(header.getValue()).append(", ");
    } 
    sb.setLength(sb.length() - 2);
    return sb.append(']').toString();
  }
  
  public static Set<String> namesAsString(Headers<CharSequence, CharSequence, ?> headers) { return new DelegatingNameSet(headers); }
}
