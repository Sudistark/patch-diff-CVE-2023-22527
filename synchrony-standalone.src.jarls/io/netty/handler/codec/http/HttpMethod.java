package io.netty.handler.codec.http;

import io.netty.util.AsciiString;
import io.netty.util.internal.ObjectUtil;

public class HttpMethod extends Object implements Comparable<HttpMethod> {
  public static final HttpMethod OPTIONS = new HttpMethod("OPTIONS");
  
  public static final HttpMethod GET = new HttpMethod("GET");
  
  public static final HttpMethod HEAD = new HttpMethod("HEAD");
  
  public static final HttpMethod POST = new HttpMethod("POST");
  
  public static final HttpMethod PUT = new HttpMethod("PUT");
  
  public static final HttpMethod PATCH = new HttpMethod("PATCH");
  
  public static final HttpMethod DELETE = new HttpMethod("DELETE");
  
  public static final HttpMethod TRACE = new HttpMethod("TRACE");
  
  public static final HttpMethod CONNECT = new HttpMethod("CONNECT");
  
  private static final EnumNameMap<HttpMethod> methodMap = new EnumNameMap(new EnumNameMap.Node[] { new EnumNameMap.Node(OPTIONS
          .toString(), OPTIONS), new EnumNameMap.Node(GET
          .toString(), GET), new EnumNameMap.Node(HEAD
          .toString(), HEAD), new EnumNameMap.Node(POST
          .toString(), POST), new EnumNameMap.Node(PUT
          .toString(), PUT), new EnumNameMap.Node(PATCH
          .toString(), PATCH), new EnumNameMap.Node(DELETE
          .toString(), DELETE), new EnumNameMap.Node(TRACE
          .toString(), TRACE), new EnumNameMap.Node(CONNECT
          .toString(), CONNECT) });
  
  private final AsciiString name;
  
  public static HttpMethod valueOf(String name) {
    if (name == GET.name())
      return GET; 
    if (name == POST.name())
      return POST; 
    HttpMethod result = (HttpMethod)methodMap.get(name);
    return (result != null) ? result : new HttpMethod(name);
  }
  
  public HttpMethod(String name) {
    name = ObjectUtil.checkNonEmptyAfterTrim(name, "name");
    for (int i = 0; i < name.length(); i++) {
      char c = name.charAt(i);
      if (Character.isISOControl(c) || Character.isWhitespace(c))
        throw new IllegalArgumentException("invalid character in name"); 
    } 
    this.name = AsciiString.cached(name);
  }
  
  public String name() { return this.name.toString(); }
  
  public AsciiString asciiName() { return this.name; }
  
  public int hashCode() { return name().hashCode(); }
  
  public boolean equals(Object o) {
    if (this == o)
      return true; 
    if (!(o instanceof HttpMethod))
      return false; 
    HttpMethod that = (HttpMethod)o;
    return name().equals(that.name());
  }
  
  public String toString() { return this.name.toString(); }
  
  public int compareTo(HttpMethod o) {
    if (o == this)
      return 0; 
    return name().compareTo(o.name());
  }
}
