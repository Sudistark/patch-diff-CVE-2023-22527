package io.netty.handler.codec.http;

import io.netty.buffer.ByteBuf;
import io.netty.buffer.ByteBufUtil;
import io.netty.handler.codec.DateFormatter;
import io.netty.handler.codec.HeadersUtils;
import io.netty.util.AsciiString;
import io.netty.util.CharsetUtil;
import io.netty.util.internal.ObjectUtil;
import java.text.ParseException;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

public abstract class HttpHeaders extends Object implements Iterable<Map.Entry<String, String>> {
  @Deprecated
  public static final HttpHeaders EMPTY_HEADERS = EmptyHttpHeaders.instance();
  
  @Deprecated
  public static boolean isKeepAlive(HttpMessage message) { return HttpUtil.isKeepAlive(message); }
  
  @Deprecated
  public static void setKeepAlive(HttpMessage message, boolean keepAlive) { HttpUtil.setKeepAlive(message, keepAlive); }
  
  @Deprecated
  public static String getHeader(HttpMessage message, String name) { return message.headers().get(name); }
  
  @Deprecated
  public static String getHeader(HttpMessage message, CharSequence name) { return message.headers().get(name); }
  
  @Deprecated
  public static String getHeader(HttpMessage message, String name, String defaultValue) { return message.headers().get(name, defaultValue); }
  
  @Deprecated
  public static String getHeader(HttpMessage message, CharSequence name, String defaultValue) { return message.headers().get(name, defaultValue); }
  
  @Deprecated
  public static void setHeader(HttpMessage message, String name, Object value) { message.headers().set(name, value); }
  
  @Deprecated
  public static void setHeader(HttpMessage message, CharSequence name, Object value) { message.headers().set(name, value); }
  
  @Deprecated
  public static void setHeader(HttpMessage message, String name, Iterable<?> values) { message.headers().set(name, values); }
  
  @Deprecated
  public static void setHeader(HttpMessage message, CharSequence name, Iterable<?> values) { message.headers().set(name, values); }
  
  @Deprecated
  public static void addHeader(HttpMessage message, String name, Object value) { message.headers().add(name, value); }
  
  @Deprecated
  public static void addHeader(HttpMessage message, CharSequence name, Object value) { message.headers().add(name, value); }
  
  @Deprecated
  public static void removeHeader(HttpMessage message, String name) { message.headers().remove(name); }
  
  @Deprecated
  public static void removeHeader(HttpMessage message, CharSequence name) { message.headers().remove(name); }
  
  @Deprecated
  public static void clearHeaders(HttpMessage message) { message.headers().clear(); }
  
  @Deprecated
  public static int getIntHeader(HttpMessage message, String name) { return getIntHeader(message, name); }
  
  @Deprecated
  public static int getIntHeader(HttpMessage message, CharSequence name) {
    String value = message.headers().get(name);
    if (value == null)
      throw new NumberFormatException("header not found: " + name); 
    return Integer.parseInt(value);
  }
  
  @Deprecated
  public static int getIntHeader(HttpMessage message, String name, int defaultValue) { return message.headers().getInt(name, defaultValue); }
  
  @Deprecated
  public static int getIntHeader(HttpMessage message, CharSequence name, int defaultValue) { return message.headers().getInt(name, defaultValue); }
  
  @Deprecated
  public static void setIntHeader(HttpMessage message, String name, int value) { message.headers().setInt(name, value); }
  
  @Deprecated
  public static void setIntHeader(HttpMessage message, CharSequence name, int value) { message.headers().setInt(name, value); }
  
  @Deprecated
  public static void setIntHeader(HttpMessage message, String name, Iterable<Integer> values) { message.headers().set(name, values); }
  
  @Deprecated
  public static void setIntHeader(HttpMessage message, CharSequence name, Iterable<Integer> values) { message.headers().set(name, values); }
  
  @Deprecated
  public static void addIntHeader(HttpMessage message, String name, int value) { message.headers().add(name, Integer.valueOf(value)); }
  
  @Deprecated
  public static void addIntHeader(HttpMessage message, CharSequence name, int value) { message.headers().addInt(name, value); }
  
  @Deprecated
  public static Date getDateHeader(HttpMessage message, String name) throws ParseException { return getDateHeader(message, name); }
  
  @Deprecated
  public static Date getDateHeader(HttpMessage message, CharSequence name) throws ParseException {
    String value = message.headers().get(name);
    if (value == null)
      throw new ParseException("header not found: " + name, 0); 
    Date date = DateFormatter.parseHttpDate(value);
    if (date == null)
      throw new ParseException("header can't be parsed into a Date: " + value, 0); 
    return date;
  }
  
  @Deprecated
  public static Date getDateHeader(HttpMessage message, String name, Date defaultValue) { return getDateHeader(message, name, defaultValue); }
  
  @Deprecated
  public static Date getDateHeader(HttpMessage message, CharSequence name, Date defaultValue) {
    String value = getHeader(message, name);
    Date date = DateFormatter.parseHttpDate(value);
    return (date != null) ? date : defaultValue;
  }
  
  @Deprecated
  public static void setDateHeader(HttpMessage message, String name, Date value) { setDateHeader(message, name, value); }
  
  @Deprecated
  public static void setDateHeader(HttpMessage message, CharSequence name, Date value) {
    if (value != null) {
      message.headers().set(name, DateFormatter.format(value));
    } else {
      message.headers().set(name, null);
    } 
  }
  
  @Deprecated
  public static void setDateHeader(HttpMessage message, String name, Iterable<Date> values) { message.headers().set(name, values); }
  
  @Deprecated
  public static void setDateHeader(HttpMessage message, CharSequence name, Iterable<Date> values) { message.headers().set(name, values); }
  
  @Deprecated
  public static void addDateHeader(HttpMessage message, String name, Date value) { message.headers().add(name, value); }
  
  @Deprecated
  public static void addDateHeader(HttpMessage message, CharSequence name, Date value) { message.headers().add(name, value); }
  
  @Deprecated
  public static long getContentLength(HttpMessage message) { return HttpUtil.getContentLength(message); }
  
  @Deprecated
  public static long getContentLength(HttpMessage message, long defaultValue) { return HttpUtil.getContentLength(message, defaultValue); }
  
  @Deprecated
  public static void setContentLength(HttpMessage message, long length) { HttpUtil.setContentLength(message, length); }
  
  @Deprecated
  public static String getHost(HttpMessage message) { return message.headers().get(HttpHeaderNames.HOST); }
  
  @Deprecated
  public static String getHost(HttpMessage message, String defaultValue) { return message.headers().get(HttpHeaderNames.HOST, defaultValue); }
  
  @Deprecated
  public static void setHost(HttpMessage message, String value) { message.headers().set(HttpHeaderNames.HOST, value); }
  
  @Deprecated
  public static void setHost(HttpMessage message, CharSequence value) { message.headers().set(HttpHeaderNames.HOST, value); }
  
  @Deprecated
  public static Date getDate(HttpMessage message) throws ParseException { return getDateHeader(message, HttpHeaderNames.DATE); }
  
  @Deprecated
  public static Date getDate(HttpMessage message, Date defaultValue) { return getDateHeader(message, HttpHeaderNames.DATE, defaultValue); }
  
  @Deprecated
  public static void setDate(HttpMessage message, Date value) { message.headers().set(HttpHeaderNames.DATE, value); }
  
  @Deprecated
  public static boolean is100ContinueExpected(HttpMessage message) { return HttpUtil.is100ContinueExpected(message); }
  
  @Deprecated
  public static void set100ContinueExpected(HttpMessage message) { HttpUtil.set100ContinueExpected(message, true); }
  
  @Deprecated
  public static void set100ContinueExpected(HttpMessage message, boolean set) { HttpUtil.set100ContinueExpected(message, set); }
  
  @Deprecated
  public static boolean isTransferEncodingChunked(HttpMessage message) { return HttpUtil.isTransferEncodingChunked(message); }
  
  @Deprecated
  public static void removeTransferEncodingChunked(HttpMessage m) { HttpUtil.setTransferEncodingChunked(m, false); }
  
  @Deprecated
  public static void setTransferEncodingChunked(HttpMessage m) { HttpUtil.setTransferEncodingChunked(m, true); }
  
  @Deprecated
  public static boolean isContentLengthSet(HttpMessage m) { return HttpUtil.isContentLengthSet(m); }
  
  @Deprecated
  public static boolean equalsIgnoreCase(CharSequence name1, CharSequence name2) { return AsciiString.contentEqualsIgnoreCase(name1, name2); }
  
  @Deprecated
  public static void encodeAscii(CharSequence seq, ByteBuf buf) {
    if (seq instanceof AsciiString) {
      ByteBufUtil.copy((AsciiString)seq, 0, buf, seq.length());
    } else {
      buf.writeCharSequence(seq, CharsetUtil.US_ASCII);
    } 
  }
  
  @Deprecated
  public static CharSequence newEntity(String name) { return new AsciiString(name); }
  
  public abstract String get(String paramString);
  
  public String get(CharSequence name) { return get(name.toString()); }
  
  public String get(CharSequence name, String defaultValue) {
    String value = get(name);
    if (value == null)
      return defaultValue; 
    return value;
  }
  
  public abstract Integer getInt(CharSequence paramCharSequence);
  
  public abstract int getInt(CharSequence paramCharSequence, int paramInt);
  
  public abstract Short getShort(CharSequence paramCharSequence);
  
  public abstract short getShort(CharSequence paramCharSequence, short paramShort);
  
  public abstract Long getTimeMillis(CharSequence paramCharSequence);
  
  public abstract long getTimeMillis(CharSequence paramCharSequence, long paramLong);
  
  public abstract List<String> getAll(String paramString);
  
  public List<String> getAll(CharSequence name) { return getAll(name.toString()); }
  
  public abstract List<Map.Entry<String, String>> entries();
  
  public abstract boolean contains(String paramString);
  
  @Deprecated
  public abstract Iterator<Map.Entry<String, String>> iterator();
  
  public abstract Iterator<Map.Entry<CharSequence, CharSequence>> iteratorCharSequence();
  
  public Iterator<String> valueStringIterator(CharSequence name) { return getAll(name).iterator(); }
  
  public Iterator<? extends CharSequence> valueCharSequenceIterator(CharSequence name) { return valueStringIterator(name); }
  
  public boolean contains(CharSequence name) { return contains(name.toString()); }
  
  public abstract boolean isEmpty();
  
  public abstract int size();
  
  public abstract Set<String> names();
  
  public abstract HttpHeaders add(String paramString, Object paramObject);
  
  public HttpHeaders add(CharSequence name, Object value) { return add(name.toString(), value); }
  
  public abstract HttpHeaders add(String paramString, Iterable<?> paramIterable);
  
  public HttpHeaders add(CharSequence name, Iterable<?> values) { return add(name.toString(), values); }
  
  public HttpHeaders add(HttpHeaders headers) {
    ObjectUtil.checkNotNull(headers, "headers");
    for (Map.Entry<String, String> e : headers)
      add((String)e.getKey(), e.getValue()); 
    return this;
  }
  
  public abstract HttpHeaders addInt(CharSequence paramCharSequence, int paramInt);
  
  public abstract HttpHeaders addShort(CharSequence paramCharSequence, short paramShort);
  
  public abstract HttpHeaders set(String paramString, Object paramObject);
  
  public HttpHeaders set(CharSequence name, Object value) { return set(name.toString(), value); }
  
  public abstract HttpHeaders set(String paramString, Iterable<?> paramIterable);
  
  public HttpHeaders set(CharSequence name, Iterable<?> values) { return set(name.toString(), values); }
  
  public HttpHeaders set(HttpHeaders headers) {
    ObjectUtil.checkNotNull(headers, "headers");
    clear();
    if (headers.isEmpty())
      return this; 
    for (Map.Entry<String, String> entry : headers)
      add((String)entry.getKey(), entry.getValue()); 
    return this;
  }
  
  public HttpHeaders setAll(HttpHeaders headers) {
    ObjectUtil.checkNotNull(headers, "headers");
    if (headers.isEmpty())
      return this; 
    for (Map.Entry<String, String> entry : headers)
      set((String)entry.getKey(), entry.getValue()); 
    return this;
  }
  
  public abstract HttpHeaders setInt(CharSequence paramCharSequence, int paramInt);
  
  public abstract HttpHeaders setShort(CharSequence paramCharSequence, short paramShort);
  
  public abstract HttpHeaders remove(String paramString);
  
  public HttpHeaders remove(CharSequence name) { return remove(name.toString()); }
  
  public abstract HttpHeaders clear();
  
  public boolean contains(String name, String value, boolean ignoreCase) {
    Iterator<String> valueIterator = valueStringIterator(name);
    if (ignoreCase) {
      while (valueIterator.hasNext()) {
        if (((String)valueIterator.next()).equalsIgnoreCase(value))
          return true; 
      } 
    } else {
      while (valueIterator.hasNext()) {
        if (((String)valueIterator.next()).equals(value))
          return true; 
      } 
    } 
    return false;
  }
  
  public boolean containsValue(CharSequence name, CharSequence value, boolean ignoreCase) {
    Iterator<? extends CharSequence> itr = valueCharSequenceIterator(name);
    while (itr.hasNext()) {
      if (containsCommaSeparatedTrimmed((CharSequence)itr.next(), value, ignoreCase))
        return true; 
    } 
    return false;
  }
  
  private static boolean containsCommaSeparatedTrimmed(CharSequence rawNext, CharSequence expected, boolean ignoreCase) {
    int begin = 0;
    if (ignoreCase) {
      int end;
      if ((end = AsciiString.indexOf(rawNext, ',', begin)) == -1) {
        if (AsciiString.contentEqualsIgnoreCase(AsciiString.trim(rawNext), expected))
          return true; 
      } else {
        do {
          if (AsciiString.contentEqualsIgnoreCase(AsciiString.trim(rawNext.subSequence(begin, end)), expected))
            return true; 
          begin = end + 1;
        } while ((end = AsciiString.indexOf(rawNext, ',', begin)) != -1);
        if (begin < rawNext.length() && 
          AsciiString.contentEqualsIgnoreCase(AsciiString.trim(rawNext.subSequence(begin, rawNext.length())), expected))
          return true; 
      } 
    } else {
      int end;
      if ((end = AsciiString.indexOf(rawNext, ',', begin)) == -1) {
        if (AsciiString.contentEquals(AsciiString.trim(rawNext), expected))
          return true; 
      } else {
        do {
          if (AsciiString.contentEquals(AsciiString.trim(rawNext.subSequence(begin, end)), expected))
            return true; 
          begin = end + 1;
        } while ((end = AsciiString.indexOf(rawNext, ',', begin)) != -1);
        if (begin < rawNext.length() && 
          AsciiString.contentEquals(AsciiString.trim(rawNext.subSequence(begin, rawNext.length())), expected))
          return true; 
      } 
    } 
    return false;
  }
  
  public final String getAsString(CharSequence name) { return get(name); }
  
  public final List<String> getAllAsString(CharSequence name) { return getAll(name); }
  
  public final Iterator<Map.Entry<String, String>> iteratorAsString() { return iterator(); }
  
  public boolean contains(CharSequence name, CharSequence value, boolean ignoreCase) { return contains(name.toString(), value.toString(), ignoreCase); }
  
  public String toString() { return HeadersUtils.toString(getClass(), iteratorCharSequence(), size()); }
  
  public HttpHeaders copy() { return (new DefaultHttpHeaders()).set(this); }
}
