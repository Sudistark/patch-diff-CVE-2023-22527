package io.netty.handler.address;

import io.netty.channel.ChannelHandler.Sharable;
import io.netty.channel.ChannelHandlerContext;
import io.netty.channel.ChannelOutboundHandlerAdapter;
import io.netty.channel.ChannelPromise;
import io.netty.resolver.AddressResolver;
import io.netty.resolver.AddressResolverGroup;
import io.netty.util.internal.ObjectUtil;
import java.net.SocketAddress;

@Sharable
public class ResolveAddressHandler extends ChannelOutboundHandlerAdapter {
  private final AddressResolverGroup<? extends SocketAddress> resolverGroup;
  
  public ResolveAddressHandler(AddressResolverGroup<? extends SocketAddress> resolverGroup) { this.resolverGroup = (AddressResolverGroup)ObjectUtil.checkNotNull(resolverGroup, "resolverGroup"); }
  
  public void connect(ChannelHandlerContext ctx, SocketAddress remoteAddress, SocketAddress localAddress, ChannelPromise promise) {
    AddressResolver<? extends SocketAddress> resolver = this.resolverGroup.getResolver(ctx.executor());
    if (resolver.isSupported(remoteAddress) && !resolver.isResolved(remoteAddress)) {
      resolver.resolve(remoteAddress).addListener(new Object(this, promise, ctx, localAddress));
    } else {
      ctx.connect(remoteAddress, localAddress, promise);
      ctx.pipeline().remove(this);
    } 
  }
}
