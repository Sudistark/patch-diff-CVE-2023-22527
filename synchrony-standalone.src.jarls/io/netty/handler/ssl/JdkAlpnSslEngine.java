package io.netty.handler.ssl;

import io.netty.util.internal.SuppressJava6Requirement;
import java.nio.ByteBuffer;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import javax.net.ssl.SSLEngine;
import javax.net.ssl.SSLEngineResult;
import javax.net.ssl.SSLException;

@SuppressJava6Requirement(reason = "Usage guarded by java version check")
class JdkAlpnSslEngine extends JdkSslEngine {
  private final JdkApplicationProtocolNegotiator.ProtocolSelectionListener selectionListener;
  
  private final AlpnSelector alpnSelector;
  
  JdkAlpnSslEngine(SSLEngine engine, JdkApplicationProtocolNegotiator applicationNegotiator, boolean isServer, BiConsumer<SSLEngine, AlpnSelector> setHandshakeApplicationProtocolSelector, BiConsumer<SSLEngine, List<String>> setApplicationProtocols) {
    super(engine);
    if (isServer) {
      this.selectionListener = null;
      this
        .alpnSelector = new AlpnSelector(this, applicationNegotiator.protocolSelectorFactory().newSelector(this, new LinkedHashSet(applicationNegotiator.protocols())));
      setHandshakeApplicationProtocolSelector.accept(engine, this.alpnSelector);
    } else {
      this
        .selectionListener = applicationNegotiator.protocolListenerFactory().newListener(this, applicationNegotiator.protocols());
      this.alpnSelector = null;
      setApplicationProtocols.accept(engine, applicationNegotiator.protocols());
    } 
  }
  
  JdkAlpnSslEngine(SSLEngine engine, JdkApplicationProtocolNegotiator applicationNegotiator, boolean isServer) { this(engine, applicationNegotiator, isServer, new Object(), new Object()); }
  
  private SSLEngineResult verifyProtocolSelection(SSLEngineResult result) throws SSLException {
    if (result.getHandshakeStatus() == SSLEngineResult.HandshakeStatus.FINISHED)
      if (this.alpnSelector == null) {
        try {
          String protocol = getApplicationProtocol();
          assert protocol != null;
          if (protocol.isEmpty()) {
            this.selectionListener.unsupported();
          } else {
            this.selectionListener.selected(protocol);
          } 
        } catch (Throwable e) {
          throw SslUtils.toSSLHandshakeException(e);
        } 
      } else {
        assert this.selectionListener == null;
        this.alpnSelector.checkUnsupported();
      }  
    return result;
  }
  
  public SSLEngineResult wrap(ByteBuffer src, ByteBuffer dst) throws SSLException { return verifyProtocolSelection(super.wrap(src, dst)); }
  
  public SSLEngineResult wrap(ByteBuffer[] srcs, ByteBuffer dst) throws SSLException { return verifyProtocolSelection(super.wrap(srcs, dst)); }
  
  public SSLEngineResult wrap(ByteBuffer[] srcs, int offset, int len, ByteBuffer dst) throws SSLException { return verifyProtocolSelection(super.wrap(srcs, offset, len, dst)); }
  
  public SSLEngineResult unwrap(ByteBuffer src, ByteBuffer dst) throws SSLException { return verifyProtocolSelection(super.unwrap(src, dst)); }
  
  public SSLEngineResult unwrap(ByteBuffer src, ByteBuffer[] dsts) throws SSLException { return verifyProtocolSelection(super.unwrap(src, dsts)); }
  
  public SSLEngineResult unwrap(ByteBuffer src, ByteBuffer[] dst, int offset, int len) throws SSLException { return verifyProtocolSelection(super.unwrap(src, dst, offset, len)); }
  
  void setNegotiatedApplicationProtocol(String applicationProtocol) {}
  
  public String getNegotiatedApplicationProtocol() {
    String protocol = getApplicationProtocol();
    if (protocol != null)
      return protocol.isEmpty() ? null : protocol; 
    return null;
  }
  
  public String getApplicationProtocol() { return JdkAlpnSslUtils.getApplicationProtocol(getWrappedEngine()); }
  
  public String getHandshakeApplicationProtocol() { return JdkAlpnSslUtils.getHandshakeApplicationProtocol(getWrappedEngine()); }
  
  public void setHandshakeApplicationProtocolSelector(BiFunction<SSLEngine, List<String>, String> selector) { JdkAlpnSslUtils.setHandshakeApplicationProtocolSelector(getWrappedEngine(), selector); }
  
  public BiFunction<SSLEngine, List<String>, String> getHandshakeApplicationProtocolSelector() { return JdkAlpnSslUtils.getHandshakeApplicationProtocolSelector(getWrappedEngine()); }
}
