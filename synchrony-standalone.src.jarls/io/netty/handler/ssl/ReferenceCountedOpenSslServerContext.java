package io.netty.handler.ssl;

import io.netty.buffer.ByteBufAllocator;
import io.netty.internal.tcnative.SSLContext;
import io.netty.util.internal.ObjectUtil;
import io.netty.util.internal.PlatformDependent;
import io.netty.util.internal.SuppressJava6Requirement;
import io.netty.util.internal.logging.InternalLogger;
import io.netty.util.internal.logging.InternalLoggerFactory;
import java.security.KeyStore;
import java.security.PrivateKey;
import java.security.cert.X509Certificate;
import java.util.Map.Entry;
import javax.net.ssl.KeyManagerFactory;
import javax.net.ssl.SSLException;
import javax.net.ssl.SSLSessionContext;
import javax.net.ssl.TrustManagerFactory;
import javax.net.ssl.X509ExtendedTrustManager;
import javax.net.ssl.X509TrustManager;

public final class ReferenceCountedOpenSslServerContext extends ReferenceCountedOpenSslContext {
  private static final InternalLogger logger = InternalLoggerFactory.getInstance(ReferenceCountedOpenSslServerContext.class);
  
  private static final byte[] ID = { 110, 101, 116, 116, 121 };
  
  private final OpenSslServerSessionContext sessionContext;
  
  ReferenceCountedOpenSslServerContext(X509Certificate[] trustCertCollection, TrustManagerFactory trustManagerFactory, X509Certificate[] keyCertChain, PrivateKey key, String keyPassword, KeyManagerFactory keyManagerFactory, Iterable<String> ciphers, CipherSuiteFilter cipherFilter, ApplicationProtocolConfig apn, long sessionCacheSize, long sessionTimeout, ClientAuth clientAuth, String[] protocols, boolean startTls, boolean enableOcsp, String keyStore, Entry... options) throws SSLException {
    this(trustCertCollection, trustManagerFactory, keyCertChain, key, keyPassword, keyManagerFactory, ciphers, cipherFilter, 
        toNegotiator(apn), sessionCacheSize, sessionTimeout, clientAuth, protocols, startTls, enableOcsp, keyStore, options);
  }
  
  ReferenceCountedOpenSslServerContext(X509Certificate[] trustCertCollection, TrustManagerFactory trustManagerFactory, X509Certificate[] keyCertChain, PrivateKey key, String keyPassword, KeyManagerFactory keyManagerFactory, Iterable<String> ciphers, CipherSuiteFilter cipherFilter, OpenSslApplicationProtocolNegotiator apn, long sessionCacheSize, long sessionTimeout, ClientAuth clientAuth, String[] protocols, boolean startTls, boolean enableOcsp, String keyStore, Entry... options) throws SSLException {
    super(ciphers, cipherFilter, apn, 1, keyCertChain, clientAuth, protocols, startTls, enableOcsp, true, options);
    success = false;
    try {
      this.sessionContext = newSessionContext(this, this.ctx, this.engineMap, trustCertCollection, trustManagerFactory, keyCertChain, key, keyPassword, keyManagerFactory, keyStore, sessionCacheSize, sessionTimeout);
      if (SERVER_ENABLE_SESSION_TICKET)
        this.sessionContext.setTicketKeys(new OpenSslSessionTicketKey[0]); 
      success = true;
    } finally {
      if (!success)
        release(); 
    } 
  }
  
  public OpenSslServerSessionContext sessionContext() { return this.sessionContext; }
  
  static OpenSslServerSessionContext newSessionContext(ReferenceCountedOpenSslContext thiz, long ctx, OpenSslEngineMap engineMap, X509Certificate[] trustCertCollection, TrustManagerFactory trustManagerFactory, X509Certificate[] keyCertChain, PrivateKey key, String keyPassword, KeyManagerFactory keyManagerFactory, String keyStore, long sessionCacheSize, long sessionTimeout) throws SSLException {
    keyMaterialProvider = null;
    try {
      try {
        SSLContext.setVerify(ctx, 0, 10);
        if (!OpenSsl.useKeyManagerFactory()) {
          if (keyManagerFactory != null)
            throw new IllegalArgumentException("KeyManagerFactory not supported"); 
          ObjectUtil.checkNotNull(keyCertChain, "keyCertChain");
          setKeyMaterial(ctx, keyCertChain, key, keyPassword);
        } else {
          OpenSslCachingX509KeyManagerFactory openSslCachingX509KeyManagerFactory;
          if (keyManagerFactory == null) {
            char[] keyPasswordChars = keyStorePassword(keyPassword);
            KeyStore ks = buildKeyStore(keyCertChain, key, keyPasswordChars, keyStore);
            if (ks.aliases().hasMoreElements()) {
              openSslCachingX509KeyManagerFactory = new OpenSslX509KeyManagerFactory();
            } else {
              openSslCachingX509KeyManagerFactory = new OpenSslCachingX509KeyManagerFactory(KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm()));
            } 
            openSslCachingX509KeyManagerFactory.init(ks, keyPasswordChars);
          } 
          keyMaterialProvider = providerFor(openSslCachingX509KeyManagerFactory, keyPassword);
          SSLContext.setCertificateCallback(ctx, new OpenSslServerCertificateCallback(engineMap, new OpenSslKeyMaterialManager(keyMaterialProvider)));
        } 
      } catch (Exception e) {
        throw new SSLException("failed to set certificate and key", e);
      } 
      try {
        if (trustCertCollection != null) {
          trustManagerFactory = buildTrustManagerFactory(trustCertCollection, trustManagerFactory, keyStore);
        } else if (trustManagerFactory == null) {
          trustManagerFactory = TrustManagerFactory.getInstance(
              TrustManagerFactory.getDefaultAlgorithm());
          trustManagerFactory.init((KeyStore)null);
        } 
        X509TrustManager manager = chooseTrustManager(trustManagerFactory.getTrustManagers());
        setVerifyCallback(ctx, engineMap, manager);
        X509Certificate[] issuers = manager.getAcceptedIssuers();
        if (issuers != null && issuers.length > 0) {
          bio = 0L;
          try {
            bio = toBIO(ByteBufAllocator.DEFAULT, issuers);
            if (!SSLContext.setCACertificateBio(ctx, bio))
              throw new SSLException("unable to setup accepted issuers for trustmanager " + manager); 
          } finally {
            freeBio(bio);
          } 
        } 
        if (PlatformDependent.javaVersion() >= 8)
          SSLContext.setSniHostnameMatcher(ctx, new OpenSslSniHostnameMatcher(engineMap)); 
      } catch (SSLException e) {
        throw e;
      } catch (Exception e) {
        throw new SSLException("unable to setup trustmanager", e);
      } 
      OpenSslServerSessionContext sessionContext = new OpenSslServerSessionContext(thiz, keyMaterialProvider);
      sessionContext.setSessionIdContext(ID);
      sessionContext.setSessionCacheEnabled(SERVER_ENABLE_SESSION_CACHE);
      if (sessionCacheSize > 0L)
        sessionContext.setSessionCacheSize((int)Math.min(sessionCacheSize, 2147483647L)); 
      if (sessionTimeout > 0L)
        sessionContext.setSessionTimeout((int)Math.min(sessionTimeout, 2147483647L)); 
      keyMaterialProvider = null;
      return sessionContext;
    } finally {
      if (keyMaterialProvider != null)
        keyMaterialProvider.destroy(); 
    } 
  }
  
  @SuppressJava6Requirement(reason = "Guarded by java version check")
  private static void setVerifyCallback(long ctx, OpenSslEngineMap engineMap, X509TrustManager manager) {
    if (useExtendedTrustManager(manager)) {
      SSLContext.setCertVerifyCallback(ctx, new ExtendedTrustManagerVerifyCallback(engineMap, (X509ExtendedTrustManager)manager));
    } else {
      SSLContext.setCertVerifyCallback(ctx, new TrustManagerVerifyCallback(engineMap, manager));
    } 
  }
}
