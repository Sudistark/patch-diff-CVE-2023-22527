package io.netty.handler.ssl;

import io.netty.util.internal.ObjectUtil;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.Provider;
import java.security.UnrecoverableKeyException;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import javax.net.ssl.KeyManagerFactory;

public final class OpenSslX509KeyManagerFactory extends KeyManagerFactory {
  private final OpenSslKeyManagerFactorySpi spi;
  
  public OpenSslX509KeyManagerFactory() { this(newOpenSslKeyManagerFactorySpi(null)); }
  
  public OpenSslX509KeyManagerFactory(Provider provider) { this(newOpenSslKeyManagerFactorySpi(provider)); }
  
  public OpenSslX509KeyManagerFactory(String algorithm, Provider provider) throws NoSuchAlgorithmException { this(newOpenSslKeyManagerFactorySpi(algorithm, provider)); }
  
  private OpenSslX509KeyManagerFactory(OpenSslKeyManagerFactorySpi spi) {
    super(spi, spi.kmf.getProvider(), spi.kmf.getAlgorithm());
    this.spi = spi;
  }
  
  private static OpenSslKeyManagerFactorySpi newOpenSslKeyManagerFactorySpi(Provider provider) {
    try {
      return newOpenSslKeyManagerFactorySpi(null, provider);
    } catch (NoSuchAlgorithmException e) {
      throw new IllegalStateException(e);
    } 
  }
  
  private static OpenSslKeyManagerFactorySpi newOpenSslKeyManagerFactorySpi(String algorithm, Provider provider) throws NoSuchAlgorithmException {
    if (algorithm == null)
      algorithm = KeyManagerFactory.getDefaultAlgorithm(); 
    return new OpenSslKeyManagerFactorySpi((provider == null) ? 
        KeyManagerFactory.getInstance(algorithm) : 
        KeyManagerFactory.getInstance(algorithm, provider));
  }
  
  OpenSslKeyMaterialProvider newProvider() { return this.spi.newProvider(); }
  
  public static OpenSslX509KeyManagerFactory newEngineBased(File certificateChain, String password) throws CertificateException, IOException, KeyStoreException, NoSuchAlgorithmException, UnrecoverableKeyException { return newEngineBased(SslContext.toX509Certificates(certificateChain), password); }
  
  public static OpenSslX509KeyManagerFactory newEngineBased(X509Certificate[] certificateChain, String password) throws CertificateException, IOException, KeyStoreException, NoSuchAlgorithmException, UnrecoverableKeyException {
    ObjectUtil.checkNotNull(certificateChain, "certificateChain");
    OpenSslKeyStore openSslKeyStore = new OpenSslKeyStore((X509Certificate[])certificateChain.clone(), false, null);
    openSslKeyStore.load(null, null);
    OpenSslX509KeyManagerFactory factory = new OpenSslX509KeyManagerFactory();
    factory.init(openSslKeyStore, (password == null) ? null : password.toCharArray());
    return factory;
  }
  
  public static OpenSslX509KeyManagerFactory newKeyless(File chain) throws CertificateException, IOException, KeyStoreException, NoSuchAlgorithmException, UnrecoverableKeyException { return newKeyless(SslContext.toX509Certificates(chain)); }
  
  public static OpenSslX509KeyManagerFactory newKeyless(InputStream chain) throws CertificateException, IOException, KeyStoreException, NoSuchAlgorithmException, UnrecoverableKeyException { return newKeyless(SslContext.toX509Certificates(chain)); }
  
  public static OpenSslX509KeyManagerFactory newKeyless(X509Certificate... certificateChain) throws CertificateException, IOException, KeyStoreException, NoSuchAlgorithmException, UnrecoverableKeyException {
    ObjectUtil.checkNotNull(certificateChain, "certificateChain");
    OpenSslKeyStore openSslKeyStore = new OpenSslKeyStore((X509Certificate[])certificateChain.clone(), true, null);
    openSslKeyStore.load(null, null);
    OpenSslX509KeyManagerFactory factory = new OpenSslX509KeyManagerFactory();
    factory.init(openSslKeyStore, null);
    return factory;
  }
}
