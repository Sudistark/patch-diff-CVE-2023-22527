package io.netty.handler.ssl;

import io.netty.buffer.ByteBufAllocator;
import io.netty.util.internal.EmptyArrays;
import io.netty.util.internal.SystemPropertyUtil;
import java.nio.ByteBuffer;
import java.util.List;
import javax.net.ssl.SSLEngine;
import javax.net.ssl.SSLEngineResult;
import javax.net.ssl.SSLException;
import org.conscrypt.Conscrypt;

abstract class ConscryptAlpnSslEngine extends JdkSslEngine {
  private static final boolean USE_BUFFER_ALLOCATOR = SystemPropertyUtil.getBoolean("io.netty.handler.ssl.conscrypt.useBufferAllocator", true);
  
  static ConscryptAlpnSslEngine newClientEngine(SSLEngine engine, ByteBufAllocator alloc, JdkApplicationProtocolNegotiator applicationNegotiator) { return new ClientEngine(engine, alloc, applicationNegotiator); }
  
  static ConscryptAlpnSslEngine newServerEngine(SSLEngine engine, ByteBufAllocator alloc, JdkApplicationProtocolNegotiator applicationNegotiator) { return new ServerEngine(engine, alloc, applicationNegotiator); }
  
  private ConscryptAlpnSslEngine(SSLEngine engine, ByteBufAllocator alloc, List<String> protocols) {
    super(engine);
    if (USE_BUFFER_ALLOCATOR)
      Conscrypt.setBufferAllocator(engine, new BufferAllocatorAdapter(alloc)); 
    Conscrypt.setApplicationProtocols(engine, (String[])protocols.toArray(EmptyArrays.EMPTY_STRINGS));
  }
  
  final int calculateOutNetBufSize(int plaintextBytes, int numBuffers) { return calculateSpace(plaintextBytes, numBuffers, 2147483647L); }
  
  final int calculateRequiredOutBufSpace(int plaintextBytes, int numBuffers) { return calculateSpace(plaintextBytes, numBuffers, Conscrypt.maxEncryptedPacketLength()); }
  
  private int calculateSpace(int plaintextBytes, int numBuffers, long maxPacketLength) {
    long maxOverhead = Conscrypt.maxSealOverhead(getWrappedEngine()) * numBuffers;
    return (int)Math.min(maxPacketLength, plaintextBytes + maxOverhead);
  }
  
  final SSLEngineResult unwrap(ByteBuffer[] srcs, ByteBuffer[] dests) throws SSLException { return Conscrypt.unwrap(getWrappedEngine(), srcs, dests); }
}
