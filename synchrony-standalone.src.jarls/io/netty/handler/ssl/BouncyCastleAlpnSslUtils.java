package io.netty.handler.ssl;

import io.netty.util.internal.EmptyArrays;
import io.netty.util.internal.PlatformDependent;
import io.netty.util.internal.SuppressJava6Requirement;
import io.netty.util.internal.logging.InternalLogger;
import io.netty.util.internal.logging.InternalLoggerFactory;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
import java.security.AccessController;
import java.util.List;
import java.util.function.BiFunction;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLEngine;

@SuppressJava6Requirement(reason = "Usage guarded by java version check")
final class BouncyCastleAlpnSslUtils {
  private static final InternalLogger logger;
  
  private static final Method SET_PARAMETERS;
  
  private static final Method GET_PARAMETERS;
  
  private static final Method SET_APPLICATION_PROTOCOLS;
  
  private static final Method GET_APPLICATION_PROTOCOL;
  
  private static final Method GET_HANDSHAKE_APPLICATION_PROTOCOL;
  
  private static final Method SET_HANDSHAKE_APPLICATION_PROTOCOL_SELECTOR;
  
  private static final Method GET_HANDSHAKE_APPLICATION_PROTOCOL_SELECTOR;
  
  private static final Class BC_APPLICATION_PROTOCOL_SELECTOR;
  
  private static final Method BC_APPLICATION_PROTOCOL_SELECTOR_SELECT;
  
  static  {
    Class bcApplicationProtocolSelector;
    Method bcApplicationProtocolSelectorSelect, getHandshakeApplicationProtocolSelector, setHandshakeApplicationProtocolSelector, getHandshakeApplicationProtocol, getApplicationProtocol, setApplicationProtocols, setParameters, getParameters;
    logger = InternalLoggerFactory.getInstance(BouncyCastleAlpnSslUtils.class);
    try {
      bcSslEngine = Class.forName("org.bouncycastle.jsse.BCSSLEngine");
      Class testBCSslEngine = bcSslEngine;
      bcApplicationProtocolSelector = Class.forName("org.bouncycastle.jsse.BCApplicationProtocolSelector");
      Class testBCApplicationProtocolSelector = bcApplicationProtocolSelector;
      bcApplicationProtocolSelectorSelect = (Method)AccessController.doPrivileged(new Object(testBCApplicationProtocolSelector));
      SSLContext context = SslUtils.getSSLContext("BCJSSE");
      SSLEngine engine = context.createSSLEngine();
      getParameters = (Method)AccessController.doPrivileged(new Object(testBCSslEngine));
      Object bcSslParameters = getParameters.invoke(engine, new Object[0]);
      Class<?> bCSslParametersClass = bcSslParameters.getClass();
      setParameters = (Method)AccessController.doPrivileged(new Object(testBCSslEngine, bCSslParametersClass));
      setParameters.invoke(engine, new Object[] { bcSslParameters });
      setApplicationProtocols = (Method)AccessController.doPrivileged(new Object(bCSslParametersClass));
      setApplicationProtocols.invoke(bcSslParameters, new Object[] { EmptyArrays.EMPTY_STRINGS });
      getApplicationProtocol = (Method)AccessController.doPrivileged(new Object(testBCSslEngine));
      getApplicationProtocol.invoke(engine, new Object[0]);
      getHandshakeApplicationProtocol = (Method)AccessController.doPrivileged(new Object(testBCSslEngine));
      getHandshakeApplicationProtocol.invoke(engine, new Object[0]);
      setHandshakeApplicationProtocolSelector = (Method)AccessController.doPrivileged(new Object(testBCSslEngine, testBCApplicationProtocolSelector));
      getHandshakeApplicationProtocolSelector = (Method)AccessController.doPrivileged(new Object(testBCSslEngine));
      getHandshakeApplicationProtocolSelector.invoke(engine, new Object[0]);
    } catch (Throwable t) {
      logger.error("Unable to initialize BouncyCastleAlpnSslUtils.", t);
      setParameters = null;
      getParameters = null;
      setApplicationProtocols = null;
      getApplicationProtocol = null;
      getHandshakeApplicationProtocol = null;
      setHandshakeApplicationProtocolSelector = null;
      getHandshakeApplicationProtocolSelector = null;
      bcApplicationProtocolSelectorSelect = null;
      bcApplicationProtocolSelector = null;
    } 
    SET_PARAMETERS = setParameters;
    GET_PARAMETERS = getParameters;
    SET_APPLICATION_PROTOCOLS = setApplicationProtocols;
    GET_APPLICATION_PROTOCOL = getApplicationProtocol;
    GET_HANDSHAKE_APPLICATION_PROTOCOL = getHandshakeApplicationProtocol;
    SET_HANDSHAKE_APPLICATION_PROTOCOL_SELECTOR = setHandshakeApplicationProtocolSelector;
    GET_HANDSHAKE_APPLICATION_PROTOCOL_SELECTOR = getHandshakeApplicationProtocolSelector;
    BC_APPLICATION_PROTOCOL_SELECTOR_SELECT = bcApplicationProtocolSelectorSelect;
    BC_APPLICATION_PROTOCOL_SELECTOR = bcApplicationProtocolSelector;
  }
  
  static String getApplicationProtocol(SSLEngine sslEngine) {
    try {
      return (String)GET_APPLICATION_PROTOCOL.invoke(sslEngine, new Object[0]);
    } catch (UnsupportedOperationException ex) {
      throw ex;
    } catch (Exception ex) {
      throw new IllegalStateException(ex);
    } 
  }
  
  static void setApplicationProtocols(SSLEngine engine, List<String> supportedProtocols) {
    String[] protocolArray = (String[])supportedProtocols.toArray(EmptyArrays.EMPTY_STRINGS);
    try {
      Object bcSslParameters = GET_PARAMETERS.invoke(engine, new Object[0]);
      SET_APPLICATION_PROTOCOLS.invoke(bcSslParameters, new Object[] { protocolArray });
      SET_PARAMETERS.invoke(engine, new Object[] { bcSslParameters });
    } catch (UnsupportedOperationException ex) {
      throw ex;
    } catch (Exception ex) {
      throw new IllegalStateException(ex);
    } 
    if (PlatformDependent.javaVersion() >= 9)
      JdkAlpnSslUtils.setApplicationProtocols(engine, supportedProtocols); 
  }
  
  static String getHandshakeApplicationProtocol(SSLEngine sslEngine) {
    try {
      return (String)GET_HANDSHAKE_APPLICATION_PROTOCOL.invoke(sslEngine, new Object[0]);
    } catch (UnsupportedOperationException ex) {
      throw ex;
    } catch (Exception ex) {
      throw new IllegalStateException(ex);
    } 
  }
  
  static void setHandshakeApplicationProtocolSelector(SSLEngine engine, BiFunction<SSLEngine, List<String>, String> selector) {
    try {
      Object selectorProxyInstance = Proxy.newProxyInstance(BouncyCastleAlpnSslUtils.class
          .getClassLoader(), new Class[] { BC_APPLICATION_PROTOCOL_SELECTOR }, new Object(selector));
      SET_HANDSHAKE_APPLICATION_PROTOCOL_SELECTOR.invoke(engine, new Object[] { selectorProxyInstance });
    } catch (UnsupportedOperationException ex) {
      throw ex;
    } catch (Exception ex) {
      throw new IllegalStateException(ex);
    } 
  }
  
  static BiFunction<SSLEngine, List<String>, String> getHandshakeApplicationProtocolSelector(SSLEngine engine) {
    try {
      Object selector = GET_HANDSHAKE_APPLICATION_PROTOCOL_SELECTOR.invoke(engine, new Object[0]);
      return new Object(selector);
    } catch (UnsupportedOperationException ex) {
      throw ex;
    } catch (Exception ex) {
      throw new IllegalStateException(ex);
    } 
  }
}
