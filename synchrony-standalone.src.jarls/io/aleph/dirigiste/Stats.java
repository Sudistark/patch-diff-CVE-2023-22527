package io.aleph.dirigiste;

import java.util.EnumSet;

public class Stats {
  static final int RESERVOIR_SIZE = 4096;
  
  private final EnumSet<Metric> _metrics;
  
  private final int _numWorkers;
  
  private final double[] _utilizations;
  
  private final double[] _taskArrivalRates;
  
  private final double[] _taskCompletionRates;
  
  private final double[] _taskRejectionRates;
  
  private final long[] _queueLengths;
  
  private final long[] _queueLatencies;
  
  private final long[] _taskLatencies;
  
  public static double lerp(long paramLong1, long paramLong2, double paramDouble) { return paramLong1 + (paramLong2 - paramLong1) * paramDouble; }
  
  public static double lerp(double paramDouble1, double paramDouble2, double paramDouble3) { return paramDouble1 + (paramDouble2 - paramDouble1) * paramDouble3; }
  
  public static double lerp(long[] paramArrayOfLong, double paramDouble) {
    if (paramArrayOfLong == null)
      return 0.0D; 
    if (paramDouble < 0.0D || 1.0D < paramDouble)
      throw new IllegalArgumentException(Double.toString(paramDouble)); 
    int i = paramArrayOfLong.length;
    switch (i) {
      case 0:
        return 0.0D;
      case 1:
        return paramArrayOfLong[0];
    } 
    if (paramDouble == 1.0D)
      return paramArrayOfLong[i - 1]; 
    double d = (i - 1) * paramDouble;
    int j = (int)d;
    return lerp(paramArrayOfLong[j], paramArrayOfLong[j + 1], d - j);
  }
  
  public static double lerp(double[] paramArrayOfDouble, double paramDouble) {
    if (paramArrayOfDouble == null)
      return 0.0D; 
    if (paramDouble < 0.0D || 1.0D < paramDouble)
      throw new IllegalArgumentException(Double.toString(paramDouble)); 
    int i = paramArrayOfDouble.length;
    switch (i) {
      case 0:
        return 0.0D;
      case 1:
        return paramArrayOfDouble[0];
    } 
    if (paramDouble == 1.0D)
      return paramArrayOfDouble[i - 1]; 
    double d = (i - 1) * paramDouble;
    int j = (int)d;
    return lerp(paramArrayOfDouble[j], paramArrayOfDouble[j + 1], d - j);
  }
  
  public static double mean(double[] paramArrayOfDouble) {
    if (paramArrayOfDouble == null || paramArrayOfDouble.length == 0)
      return 0.0D; 
    double d = 0.0D;
    for (double d1 : paramArrayOfDouble)
      d += d1; 
    return d / paramArrayOfDouble.length;
  }
  
  public static double mean(long[] paramArrayOfLong) {
    if (paramArrayOfLong == null || paramArrayOfLong.length == 0)
      return 0.0D; 
    long l = 0L;
    for (long l1 : paramArrayOfLong)
      l += l1; 
    return (l / paramArrayOfLong.length);
  }
  
  public static final Stats EMPTY = new Stats(EnumSet.noneOf(Metric.class), 0, new double[0], new double[0], new double[0], new double[0], new long[0], new long[0], new long[0]);
  
  public Stats(EnumSet<Metric> paramEnumSet, int paramInt, double[] paramArrayOfDouble1, double[] paramArrayOfDouble2, double[] paramArrayOfDouble3, double[] paramArrayOfDouble4, long[] paramArrayOfLong1, long[] paramArrayOfLong2, long[] paramArrayOfLong3) {
    this._metrics = paramEnumSet;
    this._numWorkers = paramInt;
    this._utilizations = paramArrayOfDouble1;
    this._taskArrivalRates = paramArrayOfDouble2;
    this._taskCompletionRates = paramArrayOfDouble3;
    this._taskRejectionRates = paramArrayOfDouble4;
    this._queueLengths = paramArrayOfLong1;
    this._queueLatencies = paramArrayOfLong2;
    this._taskLatencies = paramArrayOfLong3;
  }
  
  public EnumSet<Metric> getMetrics() { return this._metrics; }
  
  public int getNumWorkers() { return this._numWorkers; }
  
  public double getMeanUtilization() { return mean(this._utilizations); }
  
  public double getUtilization(double paramDouble) { return lerp(this._utilizations, paramDouble); }
  
  public double getMeanTaskArrivalRate() { return mean(this._taskArrivalRates); }
  
  public double getTaskArrivalRate(double paramDouble) { return lerp(this._taskArrivalRates, paramDouble); }
  
  public double getMeanTaskCompletionRate() { return mean(this._taskCompletionRates); }
  
  public double getTaskCompletionRate(double paramDouble) { return lerp(this._taskCompletionRates, paramDouble); }
  
  public double getMeanTaskRejectionRate() { return mean(this._taskRejectionRates); }
  
  public double getTaskRejectionRate(double paramDouble) { return lerp(this._taskRejectionRates, paramDouble); }
  
  public double getMeanQueueLength() { return mean(this._queueLengths); }
  
  public double getQueueLength(double paramDouble) { return lerp(this._queueLengths, paramDouble); }
  
  public double getMeanQueueLatency() { return mean(this._queueLatencies); }
  
  public double getQueueLatency(double paramDouble) { return lerp(this._queueLatencies, paramDouble); }
  
  public double getMeanTaskLatency() { return mean(this._taskLatencies); }
  
  public double getTaskLatency(double paramDouble) { return lerp(this._taskLatencies, paramDouble); }
}
