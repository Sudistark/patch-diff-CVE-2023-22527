package io.aleph.dirigiste;

import java.util.EnumSet;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.TimeUnit;

public class Executors {
  private static ThreadFactory threadFactory() { return new Object(); }
  
  public static Executor fixedExecutor(int paramInt) { return fixedExecutor(paramInt, EnumSet.noneOf(Stats.Metric.class)); }
  
  public static Executor fixedExecutor(int paramInt, EnumSet<Stats.Metric> paramEnumSet) { return new Executor(threadFactory(), new SynchronousQueue(false), fixedController(paramInt), paramInt, paramEnumSet, 25L, 10000L, TimeUnit.MILLISECONDS); }
  
  public static Executor.Controller fixedController(int paramInt) { return new Object(paramInt); }
  
  public static Executor utilizationExecutor(double paramDouble, int paramInt) { return utilizationExecutor(paramDouble, paramInt, EnumSet.of(Stats.Metric.UTILIZATION)); }
  
  public static Executor utilizationExecutor(double paramDouble, int paramInt, EnumSet<Stats.Metric> paramEnumSet) { return new Executor(threadFactory(), new SynchronousQueue(false), utilizationController(paramDouble, paramInt), 1, paramEnumSet, 25L, 10000L, TimeUnit.MILLISECONDS); }
  
  public static Executor.Controller utilizationController(double paramDouble, int paramInt) { return new Object(paramInt, paramDouble); }
}
