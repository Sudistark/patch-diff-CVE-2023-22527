package net.jpountz.lz4;

import java.nio.ByteBuffer;
import net.jpountz.util.ByteBufferUtils;
import net.jpountz.util.UnsafeUtils;

final class LZ4JavaUnsafeSafeDecompressor extends LZ4SafeDecompressor {
  public static final LZ4SafeDecompressor INSTANCE = new LZ4JavaUnsafeSafeDecompressor();
  
  public int decompress(byte[] src, int srcOff, int srcLen, byte[] dest, int destOff, int destLen) {
    UnsafeUtils.checkRange(src, srcOff, srcLen);
    UnsafeUtils.checkRange(dest, destOff, destLen);
    if (destLen == 0) {
      if (srcLen != 1 || UnsafeUtils.readByte(src, srcOff) != 0)
        throw new LZ4Exception("Output buffer too small"); 
      return 0;
    } 
    int srcEnd = srcOff + srcLen;
    int destEnd = destOff + destLen;
    int sOff = srcOff;
    int dOff = destOff;
    while (true) {
      int token = UnsafeUtils.readByte(src, sOff) & 0xFF;
      sOff++;
      int literalLen = token >>> 4;
      if (literalLen == 15) {
        byte len = -1;
        while (sOff < srcEnd && (len = UnsafeUtils.readByte(src, sOff++)) == -1)
          literalLen += 255; 
        literalLen += (len & 0xFF);
      } 
      int literalCopyEnd = dOff + literalLen;
      if (literalCopyEnd > destEnd - 8 || sOff + literalLen > srcEnd - 8) {
        if (literalCopyEnd > destEnd)
          throw new LZ4Exception(); 
        if (sOff + literalLen != srcEnd)
          throw new LZ4Exception("Malformed input at " + sOff); 
        LZ4UnsafeUtils.safeArraycopy(src, sOff, dest, dOff, literalLen);
        sOff += literalLen;
        dOff = literalCopyEnd;
        break;
      } 
      LZ4UnsafeUtils.wildArraycopy(src, sOff, dest, dOff, literalLen);
      sOff += literalLen;
      dOff = literalCopyEnd;
      int matchDec = UnsafeUtils.readShortLE(src, sOff);
      sOff += 2;
      int matchOff = dOff - matchDec;
      if (matchOff < destOff)
        throw new LZ4Exception("Malformed input at " + sOff); 
      int matchLen = token & 0xF;
      if (matchLen == 15) {
        byte len = -1;
        while (sOff < srcEnd && (len = UnsafeUtils.readByte(src, sOff++)) == -1)
          matchLen += 255; 
        matchLen += (len & 0xFF);
      } 
      matchLen += 4;
      int matchCopyEnd = dOff + matchLen;
      if (matchCopyEnd > destEnd - 8) {
        if (matchCopyEnd > destEnd)
          throw new LZ4Exception("Malformed input at " + sOff); 
        LZ4UnsafeUtils.safeIncrementalCopy(dest, matchOff, dOff, matchLen);
      } else {
        LZ4UnsafeUtils.wildIncrementalCopy(dest, matchOff, dOff, matchCopyEnd);
      } 
      dOff = matchCopyEnd;
    } 
    return dOff - destOff;
  }
  
  public int decompress(ByteBuffer src, int srcOff, int srcLen, ByteBuffer dest, int destOff, int destLen) {
    if (src.hasArray() && dest.hasArray())
      return decompress(src.array(), srcOff, srcLen, dest.array(), destOff, destLen); 
    src = ByteBufferUtils.inNativeByteOrder(src);
    dest = ByteBufferUtils.inNativeByteOrder(dest);
    ByteBufferUtils.checkRange(src, srcOff, srcLen);
    ByteBufferUtils.checkRange(dest, destOff, destLen);
    if (destLen == 0) {
      if (srcLen != 1 || ByteBufferUtils.readByte(src, srcOff) != 0)
        throw new LZ4Exception("Output buffer too small"); 
      return 0;
    } 
    int srcEnd = srcOff + srcLen;
    int destEnd = destOff + destLen;
    int sOff = srcOff;
    int dOff = destOff;
    while (true) {
      int token = ByteBufferUtils.readByte(src, sOff) & 0xFF;
      sOff++;
      int literalLen = token >>> 4;
      if (literalLen == 15) {
        byte len = -1;
        while (sOff < srcEnd && (len = ByteBufferUtils.readByte(src, sOff++)) == -1)
          literalLen += 255; 
        literalLen += (len & 0xFF);
      } 
      int literalCopyEnd = dOff + literalLen;
      if (literalCopyEnd > destEnd - 8 || sOff + literalLen > srcEnd - 8) {
        if (literalCopyEnd > destEnd)
          throw new LZ4Exception(); 
        if (sOff + literalLen != srcEnd)
          throw new LZ4Exception("Malformed input at " + sOff); 
        LZ4ByteBufferUtils.safeArraycopy(src, sOff, dest, dOff, literalLen);
        sOff += literalLen;
        dOff = literalCopyEnd;
        break;
      } 
      LZ4ByteBufferUtils.wildArraycopy(src, sOff, dest, dOff, literalLen);
      sOff += literalLen;
      dOff = literalCopyEnd;
      int matchDec = ByteBufferUtils.readShortLE(src, sOff);
      sOff += 2;
      int matchOff = dOff - matchDec;
      if (matchOff < destOff)
        throw new LZ4Exception("Malformed input at " + sOff); 
      int matchLen = token & 0xF;
      if (matchLen == 15) {
        byte len = -1;
        while (sOff < srcEnd && (len = ByteBufferUtils.readByte(src, sOff++)) == -1)
          matchLen += 255; 
        matchLen += (len & 0xFF);
      } 
      matchLen += 4;
      int matchCopyEnd = dOff + matchLen;
      if (matchCopyEnd > destEnd - 8) {
        if (matchCopyEnd > destEnd)
          throw new LZ4Exception("Malformed input at " + sOff); 
        LZ4ByteBufferUtils.safeIncrementalCopy(dest, matchOff, dOff, matchLen);
      } else {
        LZ4ByteBufferUtils.wildIncrementalCopy(dest, matchOff, dOff, matchCopyEnd);
      } 
      dOff = matchCopyEnd;
    } 
    return dOff - destOff;
  }
}
