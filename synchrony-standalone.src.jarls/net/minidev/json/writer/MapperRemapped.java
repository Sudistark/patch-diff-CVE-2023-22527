package net.minidev.json.writer;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.Map;
import net.minidev.json.parser.ParseException;

public class MapperRemapped<T> extends JsonReaderI<T> {
  private Map<String, String> rename;
  
  private JsonReaderI<T> parent;
  
  public MapperRemapped(JsonReaderI<T> parent) {
    super(parent.base);
    this.parent = parent;
    this.rename = new HashMap();
  }
  
  public void renameField(String source, String dest) { this.rename.put(source, dest); }
  
  private String rename(String key) {
    String k2 = (String)this.rename.get(key);
    if (k2 != null)
      return k2; 
    return key;
  }
  
  public void setValue(Object current, String key, Object value) throws ParseException, IOException {
    key = rename(key);
    this.parent.setValue(current, key, value);
  }
  
  public Object getValue(Object current, String key) {
    key = rename(key);
    return this.parent.getValue(current, key);
  }
  
  public Type getType(String key) {
    key = rename(key);
    return this.parent.getType(key);
  }
  
  public JsonReaderI<?> startArray(String key) throws ParseException, IOException {
    key = rename(key);
    return this.parent.startArray(key);
  }
  
  public JsonReaderI<?> startObject(String key) throws ParseException, IOException {
    key = rename(key);
    return this.parent.startObject(key);
  }
  
  public Object createObject() { return this.parent.createObject(); }
}
