package net.minidev.json;

public class JSONUtil {
  public static Object convertToStrict(Object obj, Class<?> dest) {
    if (obj == null)
      return null; 
    if (dest.isAssignableFrom(obj.getClass()))
      return obj; 
    if (dest.isPrimitive()) {
      if (dest == int.class) {
        if (obj instanceof Number)
          return Integer.valueOf(((Number)obj).intValue()); 
        return Integer.valueOf(obj.toString());
      } 
      if (dest == short.class) {
        if (obj instanceof Number)
          return Short.valueOf(((Number)obj).shortValue()); 
        return Short.valueOf(obj.toString());
      } 
      if (dest == long.class) {
        if (obj instanceof Number)
          return Long.valueOf(((Number)obj).longValue()); 
        return Long.valueOf(obj.toString());
      } 
      if (dest == byte.class) {
        if (obj instanceof Number)
          return Byte.valueOf(((Number)obj).byteValue()); 
        return Byte.valueOf(obj.toString());
      } 
      if (dest == float.class) {
        if (obj instanceof Number)
          return Float.valueOf(((Number)obj).floatValue()); 
        return Float.valueOf(obj.toString());
      } 
      if (dest == double.class) {
        if (obj instanceof Number)
          return Double.valueOf(((Number)obj).doubleValue()); 
        return Double.valueOf(obj.toString());
      } 
      if (dest == char.class) {
        String asString = dest.toString();
        if (asString.length() > 0)
          return Character.valueOf(asString.charAt(0)); 
      } else if (dest == boolean.class) {
        return (Boolean)obj;
      } 
      throw new RuntimeException("Primitive: Can not convert " + obj.getClass().getName() + " to " + dest
          .getName());
    } 
    if (dest.isEnum())
      return Enum.valueOf(dest, obj.toString()); 
    if (dest == Integer.class) {
      if (obj instanceof Number)
        return Integer.valueOf(((Number)obj).intValue()); 
      return Integer.valueOf(obj.toString());
    } 
    if (dest == Long.class) {
      if (obj instanceof Number)
        return Long.valueOf(((Number)obj).longValue()); 
      return Long.valueOf(obj.toString());
    } 
    if (dest == Short.class) {
      if (obj instanceof Number)
        return Short.valueOf(((Number)obj).shortValue()); 
      return Short.valueOf(obj.toString());
    } 
    if (dest == Byte.class) {
      if (obj instanceof Number)
        return Byte.valueOf(((Number)obj).byteValue()); 
      return Byte.valueOf(obj.toString());
    } 
    if (dest == Float.class) {
      if (obj instanceof Number)
        return Float.valueOf(((Number)obj).floatValue()); 
      return Float.valueOf(obj.toString());
    } 
    if (dest == Double.class) {
      if (obj instanceof Number)
        return Double.valueOf(((Number)obj).doubleValue()); 
      return Double.valueOf(obj.toString());
    } 
    if (dest == Character.class) {
      String asString = dest.toString();
      if (asString.length() > 0)
        return Character.valueOf(asString.charAt(0)); 
    } 
    throw new RuntimeException("Object: Can not Convert " + obj.getClass().getName() + " to " + dest.getName());
  }
  
  public static Object convertToX(Object obj, Class<?> dest) {
    if (obj == null)
      return null; 
    if (dest.isAssignableFrom(obj.getClass()))
      return obj; 
    if (dest.isPrimitive()) {
      if (obj instanceof Number)
        return obj; 
      if (dest == int.class)
        return Integer.valueOf(obj.toString()); 
      if (dest == short.class)
        return Short.valueOf(obj.toString()); 
      if (dest == long.class)
        return Long.valueOf(obj.toString()); 
      if (dest == byte.class)
        return Byte.valueOf(obj.toString()); 
      if (dest == float.class)
        return Float.valueOf(obj.toString()); 
      if (dest == double.class)
        return Double.valueOf(obj.toString()); 
      if (dest == char.class) {
        String asString = dest.toString();
        if (asString.length() > 0)
          return Character.valueOf(asString.charAt(0)); 
      } else if (dest == boolean.class) {
        return (Boolean)obj;
      } 
      throw new RuntimeException("Primitive: Can not convert " + obj.getClass().getName() + " to " + dest
          .getName());
    } 
    if (dest.isEnum())
      return Enum.valueOf(dest, obj.toString()); 
    if (dest == Integer.class) {
      if (obj instanceof Number)
        return Integer.valueOf(((Number)obj).intValue()); 
      return Integer.valueOf(obj.toString());
    } 
    if (dest == Long.class) {
      if (obj instanceof Number)
        return Long.valueOf(((Number)obj).longValue()); 
      return Long.valueOf(obj.toString());
    } 
    if (dest == Short.class) {
      if (obj instanceof Number)
        return Short.valueOf(((Number)obj).shortValue()); 
      return Short.valueOf(obj.toString());
    } 
    if (dest == Byte.class) {
      if (obj instanceof Number)
        return Byte.valueOf(((Number)obj).byteValue()); 
      return Byte.valueOf(obj.toString());
    } 
    if (dest == Float.class) {
      if (obj instanceof Number)
        return Float.valueOf(((Number)obj).floatValue()); 
      return Float.valueOf(obj.toString());
    } 
    if (dest == Double.class) {
      if (obj instanceof Number)
        return Double.valueOf(((Number)obj).doubleValue()); 
      return Double.valueOf(obj.toString());
    } 
    if (dest == Character.class) {
      String asString = dest.toString();
      if (asString.length() > 0)
        return Character.valueOf(asString.charAt(0)); 
    } 
    throw new RuntimeException("Object: Can not Convert " + obj.getClass().getName() + " to " + dest.getName());
  }
  
  public static final JsonSmartFieldFilter JSON_SMART_FIELD_FILTER = new JsonSmartFieldFilter();
  
  public static String getSetterName(String key) {
    int len = key.length();
    char[] b = new char[len + 3];
    b[0] = 's';
    b[1] = 'e';
    b[2] = 't';
    char c = key.charAt(0);
    if (c >= 'a' && c <= 'z')
      c = (char)(c - ' '); 
    b[3] = c;
    for (int i = 1; i < len; i++)
      b[i + 3] = key.charAt(i); 
    return new String(b);
  }
  
  public static String getGetterName(String key) {
    int len = key.length();
    char[] b = new char[len + 3];
    b[0] = 'g';
    b[1] = 'e';
    b[2] = 't';
    char c = key.charAt(0);
    if (c >= 'a' && c <= 'z')
      c = (char)(c - ' '); 
    b[3] = c;
    for (int i = 1; i < len; i++)
      b[i + 3] = key.charAt(i); 
    return new String(b);
  }
  
  public static String getIsName(String key) {
    int len = key.length();
    char[] b = new char[len + 2];
    b[0] = 'i';
    b[1] = 's';
    char c = key.charAt(0);
    if (c >= 'a' && c <= 'z')
      c = (char)(c - ' '); 
    b[2] = c;
    for (int i = 1; i < len; i++)
      b[i + 2] = key.charAt(i); 
    return new String(b);
  }
}
