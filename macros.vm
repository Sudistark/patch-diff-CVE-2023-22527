#macro (iconSpan $type $text $additionalClasses)
    ## Defensive copy. Otherwise, depending what gets passed, we could be calling setters (and data could end in the database) because Velocity
    #if( "$!type" == "" )
        ## Prevent setting an out of scope type
        #set($iconType = "")
    #else
        #set($iconType = $type)
    #end

    #if ($iconType == "page")
        #set ($iconType = "page-default")
    #elseif ($iconType == "blogpost")
        #set ($iconType = "page-blogpost")
    #end

    <span class="icon#if($iconType != "") aui-icon aui-icon-small aui-iconfont-$iconType#end $!additionalClasses">$!text</span>
#end

#macro (contentIcon $content)
    #contentIconWithLinkPrefix($content $staticResourceUrlPrefix)
#end

#macro (apiContentIcon $content)
    <span class="icon $apiContentUiSupport.getIconCssClass($content)" title="$action.getText($apiContentUiSupport.getContentTypeI18NKey($content))">$action.getText($apiContentUiSupport.getContentTypeI18NKey($content)):</span>##
#end

#macro (contentIconWithLinkPrefix $content $prefix)
    #if ($content.type == "attachment")#set ($attachment = $content)#parse ("/pages/includes/attachment_icon.vm")
    #else<span class="icon $contentUiSupport.getIconCssClass($content)" title="$action.getText($contentUiSupport.getContentTypeI18NKey($content))">$action.getText($contentUiSupport.getContentTypeI18NKey($content)):</span>#end
#end

## This is duplicated in icons.soy. If you change this you should probably change that too.
#macro (contentIcon2 $content $linkColor $linkHref $linkTitle)
    #if ($content.type == "attachment")#set ($attachment = $content)#parse ("/pages/includes/attachment_icon.vm")
    #else<a $linkColor href="$linkHref" title="$action.getText($contentUiSupport.getContentTypeI18NKey($content))"><span class="icon $contentUiSupport.getIconCssClass($content)">$action.getText($contentUiSupport.getContentTypeI18NKey($content)):</span></a>#end
#end

#macro (typeIcon $type)
    #if ($type == "attachment")
        <img src="$staticResourceUrlPrefix/images/icons/attachments/generic_16.png" class="legacyicon" />
    #elseif ($type == "all")
        <img src="$staticResourceUrlPrefix/images/icons/list_pages_16.gif" class="legacyicon" />
    #else
        <img src="$contentUiManager.getLegacyIconPath($type, 16)" class="legacyicon" />
	#end
#end

## deprecated since 4.0 - icons should conform to the icon sprite pattern and use #iconSpan instead
#macro (icon $imageName $size $title)<img src="$staticResourceUrlPrefix/images/icons/${imageName}" height="$size" width="$size" style="vertical-align: middle" #if($title != '')title="$title"#end/>#end

#macro (contentHref $content)
    #contentHrefWithLinkPrefix($content $req.contextPath)
#end

#macro (contentHrefWithLinkPrefix $content $prefix)
    #if ($content.type == "attachment")
        <a href="$prefix$content.container.urlPath">$htmlUtil.htmlEncode($content.container.displayTitle)</a> &gt;
        <a href="$prefix$content.downloadPath">$htmlUtil.htmlEncode($content.displayTitle)</a>
    #elseif ($content.type == "comment")
        <a href="$prefix$content.container.urlPath">$htmlUtil.htmlEncode($content.container.displayTitle)</a> &gt;
        <a href="$prefix$content.urlPath">$htmlUtil.htmlEncode($content.displayTitle)</a>
    #else
        <a href="$prefix$content.urlPath">$htmlUtil.htmlEncode($content.displayTitle)</a>
    #end
#end

#macro (contentOther $content)
    #if ($content.type == "page" || $content.type == "blogpost")
        #if ($content.latestVersion)
            <span class="smalltext">($htmlUtil.htmlEncode($content.space.name))</span>
        #else
            <span class="smalltext">v. $content.version ($htmlUtil.htmlEncode($content.latestVersion.space.name))</span>
        #end
    #elseif ($content.type == "comment")
        <span class="smalltext">($htmlUtil.htmlEncode($content.container.space.name))</span>
    #elseif ($content.type == "userinfo")
        <span class="smalltext">($content.username)</span>
    #elseif ($content.type == "status")
        <span class="smalltext">(#fullNameOrAnonymous($content.creator))</span>
    ## If the attachment is attached to a profile, the container text is different (CONF-4465)
    #elseif ($content.type == "attachment" && $content.container.type == "userinfo")
        <span class="smalltext">($content.container.username)</span>
    #elseif ($content.type == "attachment")
        <span class="smalltext">($htmlUtil.htmlEncode($content.container.space.name))</span>
    #end
#end

#macro (contentLink2 $content $showIcon $showSpace)
    #contentLink2WithLinkPrefix($content $showIcon $showSpace $req.contextPath)
#end

#macro (contentLink2WithLinkPrefix $content $showIcon $showSpace $baseUrl)
    #if ($showIcon) #contentIconWithLinkPrefix($content $staticResourceUrlPrefix) #end
    #contentHrefWithLinkPrefix($content $baseUrl)
    #if ($showSpace) #contentOther($content) #end
#end

#macro (contentLink $content)
    #contentLink2($content true true)
#end

#macro (contentLinkWithLinkPrefix $content $prefix)
    #contentLink2WithLinkPrefix($content true false $prefix)
#end

#macro (contentLinkWithAnchor $content $anchor)
    #contentIcon($content)
    <a #if ($textUtil.stringSet($anchor)) name="$anchor" #end href="$req.contextPath$content.urlPath">$htmlUtil.htmlEncode($content.displayTitle)</a>
#end

#macro (includePage $spaceKey $pageTitle)
    #if ($renderBean.pageExists($spaceKey, $pageTitle))
        #if ($permissionHelper.canViewPage($action.authenticatedUser, $spaceKey, $pageTitle))
            $renderBean.render($spaceKey, $pageTitle)
        #else
            <span class="error"><span class="errorMessage">$action.getText('insufficient.privelages.to.view.page')</span></span>
        #end
    #else
        <span class="error"><span class="errorMessage">$action.getText('page.not.found.error')</span></span>
    #end
#end

#macro (includePageWithId $pageId)
    #if ($renderBean.pageExists($pageId))
        #if ($permissionHelper.canViewPage($action.authenticatedUser, $pageId))
            $renderBean.render($pageId)
        #else
            <span class="error"><span class="errorMessage">$action.getText('insufficient.privelages.to.view.page')</span></span>
        #end
    #else
        <span class="error"><span class="errorMessage">$action.getText('page.not.found.error')</span></span>
    #end
#end

## Generates the URL to a user. Any updates to this macro should also be applied to
## the Confluence.Templates.User.userLinkUrl soy template.
#macro (userLinkUrl $baseUrl $username)
    $baseUrl/display/~$htmlUtil.urlEncode($username)
#end

#macro (userLinkUrlPrefix $baseUrl)
    $baseUrl/display/~
#end

#*
Link to a user. If the user doesn't exist, "Anonymous" is printed
*#
#macro (userLink $user $ariaLabel)
    #trim()
    #if ($user && $user != "")
        #if ($userHelper.isUnknownUser($user) || $userHelper.isDeletedUser($user))
            <span class="unknown-user">$htmlUtil.htmlEncode($user.fullName)</span>
        #elseif ($user.fullName)
        <a href="#userLinkUrl($!req.contextPath, $user.name)"
            #if($ariaLabel)aria-label="$ariaLabel"#end
            #if($permissionHelper.canView($action.authenticatedUser, $user))
           class="url fn confluence-userlink" data-username="$htmlUtil.htmlEncode($user.name)"
            #else
           class="url fn"
            #end
                >$htmlUtil.htmlEncode($user.fullName)</a>
        #else
        <a href="#userLinkUrl($!req.contextPath, $user.name)">$htmlUtil.htmlEncode($user.name)</a>
        #end
    #else
        <span class="anonymous-user">$action.getText('anonymous.name')</span>
    #end
#end
#end

#macro (userLinkWithCustomBaseUrl $user $baseurl)
    #if ($user)
        #if ($stringUtils.isNotBlank($user.fullName))
            <a href="#userLinkUrl($baseurl, $user.name)">$htmlUtil.htmlEncode($user.fullName)</a>
        #else
            <a href="#userLinkUrl($baseurl, $user.name)">$htmlUtil.htmlEncode($user.name)</a>
        #end
    #else
        $action.getText('anonymous.name')
    #end
#end

#macro (userLinkParentWindow $user)
    #if ($user)
        <a href="javascript:window.location=\'#userLinkUrl($!req.contextPath, $user.name)\';">$htmlUtil.htmlEncode($user.fullName)</a>
    #else
        $action.getText('anonymous.name')
    #end
#end

#macro (emailUserLink $user $baseurl)
    #if ($user)
        <a href="#userLinkUrl($baseurl, $user.name)"#if($textLinkColour) style="color:$textLinkColour;text-decoration:none;"#end>$htmlUtil.htmlEncode($user.fullName)</a>
    #else
        $action.getText('anonymous.name')
    #end
#end

#macro (userNonLink $username)
#trim()
    #fullNameOrAnonymous ($action.getUserByName($username))
#end
#end

## This macro is duplicated in user.soy as #fullNameOrAnonymous
#macro (fullNameOrAnonymous $user)#if ($user && $user.fullName)$user.fullName#else$action.getText('anonymous.name')#end#end

#macro (siteTitle)$settingsManager.globalSettings.siteTitle#end

#macro (paginationBase $paginationSupport $actionContext $showTotal)
    #requireResource("confluence.web.resources:pagination-styles")
    #requireResource("com.atlassian.auiplugin:aui-navigation")

    #set ($numberToShow = 7)

    #set ($previousIndexes = $paginationSupport.previousStartIndexes)
    #set ($nextIndexes = $paginationSupport.nextStartIndexes)

    #if( $paginationSupport.total > 0 )
        #set ($startIndex = $paginationSupport.startIndex + 1)
        #if ($showTotal)
            #set ($endPageNumber = $paginationSupport.total / $paginationSupport.pageSize)
            #if( $paginationSupport.total % $paginationSupport.pageSize != 0)
            #set ($endPageNumber = $endPageNumber + 1)
            #end



            #set ($endIndex  = $endPageNumber  * $paginationSupport.pageSize)
            #set ($endIndex  = $endIndex  - $paginationSupport.pageSize)

        #end
    #end
    <ol class="aui-nav aui-nav-pagination">
        #if( $previousIndexes || $nextIndexes )

            #if($previousIndexes)
                #set ($startPageNumber = $generalUtil.arraySize($previousIndexes) - $numberToShow + 1)
                <li class="aui-nav-previous"><a href="${actionContext}startIndex=$paginationSupport.previousStartIndex">$action.getText('aui.prev.name')</a></li>
            #else
                <li class="aui-nav-previous"><a aria-disabled="true">$action.getText('aui.prev.name')</a></li>
            #end

            #set ($currentIndex = 1)

            #if ($previousIndexes && $startPageNumber > 0)
                <li><a href="${actionContext}startIndex=0">$currentIndex</a></li>

                #if ($startPageNumber > 1)
                    <li class="aui-nav-truncation">&hellip;</li>
                #end
            #end

            #if( $previousIndexes )
                #foreach( $index in $previousIndexes )
                    #if ($velocityCount > $startPageNumber)
                        <li><a href="${actionContext}startIndex=$index">$currentIndex</a></li>
                    #end
                    #set ($currentIndex = $currentIndex + 1)
                #end
            #end

            <li class="aui-nav-selected">$currentIndex</li>

            #if( $nextIndexes )
                #set ($lastNumberShown = $currentIndex)
                #foreach( $index in $nextIndexes )
                    #set ($currentIndex = $currentIndex + 1)
                    #if ($velocityCount < $numberToShow)
                        <li><a href="${actionContext}startIndex=$index">$currentIndex</a></li>
                        #set ($lastNumberShown = $lastNumberShown + 1)
                    #elseif (!$showTotal && $velocityCount == $numberToShow)
                        <li class="pagination-hellip">&hellip;</li>
                    #end
                #end

                #if ($showTotal && $lastNumberShown < $endPageNumber)
                    #if ($lastNumberShown < $endPageNumber - 1)
                        <li class="aui-nav-truncation">&hellip;</li>
                    #end
                    <li><a href="${actionContext}startIndex=$endIndex">$endPageNumber</a></li>
                #end

                <li class="aui-nav-next"><a href="${actionContext}startIndex=$paginationSupport.nextStartIndex">$action.getText('aui.next.name')</a></li>
            #else
                <li class="aui-nav-next"><a aria-disabled="true">$action.getText('aui.next.name')</a></li>
            #end
        #end
    </ol>
#end

#macro (paginationCursorBase $start $resultSize $hasMore $currentCursor $prevCursor $nextCursor $actionContext)
    #requireResource("confluence.web.resources:pagination-styles")
    #requireResource("com.atlassian.auiplugin:aui-navigation")

<nav role="navigation" aria-label=$action.getText('text.trash.pagination')>
<ul class="aui-nav aui-nav-pagination">
    #if($currentCursor && ($prevCursor || $nextCursor))
        #if(!$prevCursor)
            <li class="aui-nav-previous"><a aria-disabled="true">$action.getText('aui.prev.name')</a></li>
        #else
            <li class="aui-nav-previous"><a href="${actionContext}reverse=$prevCursor.isReverse()&contentId=$prevCursor.contentId">$action.getText('aui.prev.name')</a></li>
        #end

        #if(!$nextCursor)
            <li class="aui-nav-next"><a aria-disabled="true">$action.getText('aui.next.name')</a></li>
        #else
            <li class="aui-nav-next"><a href="${actionContext}reverse=$nextCursor.isReverse()&contentId=$nextCursor.contentId">$action.getText('aui.next.name')</a></li>
        #end
    #end
</ul>
</nav>
#end
#*
Prints the search result pagination info.
*#

#macro(pagination $paginationSupport $actionContext)
    #paginationBase($paginationSupport $actionContext true)
#end

#*
Prints the search result pagination info for next and previous page
*#

#macro(paginationCursor $start $resultSize $hasMore $currentCursor $prevCursor $nextCursor $actionContext)
    #paginationCursorBase($start $resultSize $hasMore $currentCursor $prevCursor $nextCursor $actionContext)
#end


#*
Prints the search result pagination info. for a pager object (i.e. with total size unknown).
*#

#macro(entityPagination $paginationSupport $actionContext)
    #paginationBase($paginationSupport $actionContext false)
#end


#*
    Prints the breadcrumbs
*#
#macro(breadcrumbs)
    $!sitemeshPage.getProperty("page.breadcrumbs")
#end

#macro (colourRow $name $colour $isDefault)
    <tr>
        <td nowrap width="40%" align="right"><strong>$action.getText($name)</strong></td>
        <td width="30"><div style="background-color: $colour; width: 30; border: 1px solid black">&nbsp;</div></td>
        <td><span class="monospaceInput">#if($isDefault)&lt;$action.getText('default')&gt;#else$colour#end</span></td>
    </tr>
#end

#macro (onoff $test)
    #if ($test) <span class="on-label">$action.getText('on.name')</span> #else <span class="off-label">$action.getText('off.name')</span> #end
#end

#macro (yesno $test)
    #if ($test) <span class="yes-label">$action.getText('yes.name.caps')</span> #else <span class="no-label">$action.getText('no.name.caps')</span> #end
#end

## Expects a javascript function as a variable which can be excecuted in this script.
#macro (fielderrorExecuteFunction $fieldname $javascriptFunctionHtml)
    #set ($fieldErrors = $action.fieldErrors)
    #if ($fieldErrors)
      #if ($fieldErrors.get($fieldname))
          #foreach ($error in $fieldErrors.get($fieldname))
            #set( $message = $action.getText(${error}) )
            #if( !$message || $message == "" )
                 #set( $message = $action.getText(${error}) )
            #end
            #set( $contentHtml = "<script>$javascriptFunctionHtml</script> $message")
            $soyTemplateRendererHelper.getRenderedTemplateHtml("com.atlassian.auiplugin:aui-experimental-soy-templates", "aui.message.error.soy", {"content" : $contentHtml})
          #end
      #end
    #end
#end

#macro (fielderror $fieldname)
    #set ($fieldErrors = $action.fieldErrors)
    #if ($fieldErrors)
      #if ($fieldErrors.get($fieldname))
          #foreach ($error in $fieldErrors.get($fieldname))
            $soyTemplateRendererHelper.getRenderedTemplateHtml("com.atlassian.auiplugin:aui-experimental-soy-templates", "aui.message.error.soy", {"content" : $error, "id" : "${fieldname}-error"})
          #end
      #end
    #end
#end

#macro (fielderrorRow $fieldname)
    #set ($fieldErrors = $stack.findValue("fieldErrors"))
    #if ($fieldErrors)
        #if ($fieldErrors.get($fieldname))
            #foreach ($error in $fieldErrors.get($fieldname))
                <tr>
	                <td colspan="2">
	                    $soyTemplateRendererHelper.getRenderedTemplateHtml("com.atlassian.auiplugin:aui-experimental-soy-templates", "aui.message.error.soy", {"content" : $error, "tagName" : "span"})
	                </td>
                </tr>
            #end
        #end
    #end
#end

#macro(adminMacros_renderAdminBreadcrumbs)
    $!sitemeshPage.getProperty("page.breadcrumbs")
    #if(!$sitemeshPage.getProperty("page.breadcrumbs"))
        <ol id="breadcrumbs">
            <li class="first"><span><a href="$req.contextPath/dashboard.action">$i18n.getText("dashboard.name")</a></span></li>
            <li><span><a href="$req.contextPath/admin/console.action">$i18n.getText("administration.name")</a></span></li>
            <li><span>$sitemeshPage.getProperty("title")</span></li>
        </ol>
    #end
#end

#*
    Sets up variables which are used to determine whether or not the help panel
    should be displayed.
*#

#macro(infoPanelInit)
    #if ($sitemeshPage.getProperty("meta.help-path"))
      #set ($helpPath = $sitemeshPage.getProperty("meta.help-path"))
    #end

    #if ($sitemeshPage.getProperty("page.help-content"))
      #set ($helpContent = $sitemeshPage.getProperty("page.help-content"))
    #end

    ## decide whether or not to include the right nav bar
    #if ($helpPath || $helpContent)
      #set ($helpAvailable = true)
    #end

    #if ($sitemeshPage.getProperty("meta.infopanel-width"))
      #set ($panelWidth = $sitemeshPage.getProperty("meta.infopanel-width"))
    #end

    #set ($infoPanelRequired = $helpAvailable)
#end

#*
    Sets up variables which are used to determine whether or not the help panel
    should be displayed, using the parameter object passed by the inline decorator
    directive: applyDecorator
*#

#macro(infoPanelInitFromParams)
    #if ($params.get("help-path"))
      #set ($helpPath = $params.get("help-path"))
    #end

    #if ($params.get("help-content"))
      #set ($helpContent = $params.get("help-content"))
    #end

    ## decide whether or not to include the right nav bar
    #if ($helpPath || $helpContent)
      #set ($helpAvailable = true)
    #end

    #if ($params.get("infopanel-width"))
      #set ($panelWidth = $params.get("infopanel-width"))
    #end

    #set ($infoPanelRequired = $helpAvailable)
#end

#* A header which will probably create a very ugly page but one suitable for when a user has to fix
   something urgently before Confluence will be in a good state e.g. renew license before upgrade
   tasks can run.
*#
#macro(fixonlyHeader)
    #if (!$sitemeshPage.getProperty("page.allowindex"))
        <meta name="robots" content="noindex,nofollow">
        <meta name="robots" content="noarchive">
    #end
    #if ($req.getAttribute("Confluence-Request-Time"))
        <meta name="confluence-request-time" content="$!req.getAttribute("Confluence-Request-Time")">
    #end
    #favicon()
#end

## deprecated since 2.8, parse header.vm instead
#macro(standardHeaderWithStylesheetAction $stylesheetAction)
    #parse ("/decorators/includes/header.vm")
#end

## deprecated since 2.8, parse header.vm instead
#macro(standardHeader)
    #standardHeaderWithStylesheetAction("main")
#end

## deprecated since 2.8, parse header.vm instead, setting stylesheetAction var to 'admin'
#macro(standardHeaderForAdmin)
    #standardHeaderWithStylesheetAction("admin")
#end

#macro(javascripts)
    <!-- include system javascript resources -->
    $!webResourceManager.getJsResources()
    $!webResourceManager.getThemeJsResources($!spaceKey)

    <!-- end system javascript resources -->
#end

#macro(rssautodiscovery $rssDescriptor)
    #if($rssDescriptor)
        <content tag="rssautodiscovery">
        <link rel="alternate" type="application/rss+xml"
            title="RSS $!action.rssDescriptor.title"
            href="$req.contextPath$action.rssDescriptor.rssHref" />
        <link rel="alternate" type="application/atom+xml"
            title="ATOM $!action.rssDescriptor.title"
            href="$req.contextPath$action.rssDescriptor.atomHref" />
        </content>
        <content tag="feedurl">$action.rssDescriptor.atomHref</content>
    #end
#end

#macro(displayGlobalMessages)
    #set ($messages = $messageManager.getMessages())
    #if ($messages && $messages.size() > 0)

    <ul id="messageContainer">
        #foreach ($message in $messages)
            #if ($message.isVisible())
                <li id="confluence-message-${message.id}" class="confluence-messages $message.cssClass">
                    <div class="aui-message aui-message-warning #if ($message.isClosable()) closeable #end">
                        $message.text
                    </div>
                </li>
            #end
        #end
    </ul>
    #end
#end

#macro(infoPanel)
<div class="help-panel">
  #if ($helpAvailable)
      #requireResource("confluence.web.resources:help-content-resources")
      <div class="help-panel-header">
          <strong>$action.getText('help.tips')</strong>
      </div>
      <div class="help-panel-content">
          #if ($helpContent)
              $sitemeshPage.getProperty("page.help-content")
          #else
              #parse ($helpPath)
          #end
      </div>
  #end
</div>
#end

#macro (userList $users)
    #set($user = "")
    #foreach ($user in $users)
        #if ($velocityCount == $users.size())
            #userLink ($user)
        #else
            #userLink($user),
        #end
        #set($user = "")
    #end
#end

#* Put this macro back in for backward compatability
 * Use the blogPostsCalendarWithArrows from now on (it puts the correct arrows links whereas this one doesn't see CONF-6779)
 *#
#macro (blogPostsCalendar $cal)
    <table id="blogcalendar" class="blogcalendar" border="0" cellspacing="0" cellpadding="2" summary="$action.getText('monthly.calander.with.links.to.news.items')">
           <tr>
               <th class="calendarhead">
                   #if ($cal.lastPostInPreviousMonth)
                   <a href="$req.contextPath/display/$cal.spaceKey/$cal.previousMonth/" rel="nofollow"><span class="backArrow"><span>&lt;&lt;</span></span></a>
                   #else &nbsp; #end
               </th>
               <th class="calendarhead" colspan="5" align="center"><a class="calendarhead" href="$req.contextPath/display/$cal.spaceKey/$cal.currentMonth/">$cal.formatMonthYear()</a></th>
               <th class="calendarhead">
                   #if ($cal.firstPostInNextMonth)
                   <a href="$req.contextPath/display/$cal.spaceKey/$cal.nextMonth" rel="nofollow"><span class="fwdArrow"><span>&gt;&gt;</span></span></a>
                   #else &nbsp; #end
               </th>
           </tr>
           <tr>
               <th abbr="Sunday" align="center">$action.getText('sunday.abbr')</th>
               <th abbr="Monday" align="center">$action.getText('monday.abbr')</th>
               <th abbr="Tuesday" align="center">$action.getText('tuesday.abbr')</th>
               <th abbr="Wednesday" align="center">$action.getText('wednesday.abbr')</th>
               <th abbr="Thursday" align="center">$action.getText('thursday.abbr')</th>
               <th abbr="Friday" align="center">$action.getText('friday.abbr')</th>
               <th abbr="Saturday" align="center">$action.getText('saturday.abbr')</th>
           </tr>

        #set ( $weeks = ($cal.getDaysInMonth() + $cal.startingDayOfMonth)/7 )
        #foreach ( $week in [0..$weeks] )
           <tr>
           #foreach ($day in [1..7] )
              <td align="center">
              #set ($date = $week * 7 + $day - $cal.startingDayOfMonth)
              #if ($date < 1 || $date > $cal.getDaysInMonth())
                  &nbsp;
              #elseif ($cal.getPostsForDay($date).size() == 0)
                  $date
              #else
                  #set ($thePost = $cal.getPostsForDay($date).get(0))
                  <a href="$req.contextPath/display/$thePost.space.key/$thePost.datePath/">$date</a>
              #end
              </td>
           #end
           </tr>
        #end
    </table>
#end

#* Put this macro back in for backward compatability
 * Passes in the action and a flag to display the correct arrow links to blogs:
 * true = link to the next/prev DATE post, with blog post date displayed
 * false = link to the next/prev post, with blog post title displayed
 * Use blogPostsByMonth instead
 *#
#macro (blogPostsCalendarWithDateLinks $action $datePostArrows)

    #set ($cal = $action.calendarForThisMonth)

    <table class="blogcalendar" border="0" cellspacing="0" cellpadding="2" summary="$action.getText('monthly.calander.with.links.to.news.items')">
           <tr>
               <th class="calendarhead">
                   #if ($cal.lastPostInPreviousMonth)
                   <a href="$req.contextPath/display/$cal.spaceKey/$cal.previousMonth/" rel="nofollow"><img src="$staticResourceUrlPrefix/images/icons/back_16.gif" height=16 width=16 border=0 align=absmiddle title="$action.getText('previous.month')"></a>
                   #else &nbsp; #end
               </th>
               <th class="calendarhead" colspan="5" align="center"><a class="calendarhead" href="$req.contextPath/display/$cal.spaceKey/$cal.currentMonth/">$cal.formatMonthYear()</a></th>
               <th class="calendarhead">
                   #if ($cal.firstPostInNextMonth)
                   <a href="$req.contextPath/display/$cal.spaceKey/$cal.nextMonth" rel="nofollow"><img src="$staticResourceUrlPrefix/images/icons/forwd_16.gif" height=16 width=16 border=0 align=absmiddle title="$action.getText('next.month')"></a>
                   #else &nbsp; #end
               </th>
           </tr>
           <tr>
               <th abbr="Sunday" align="center">$action.getText('sunday.abbr')</th>
               <th abbr="Monday" align="center">$action.getText('monday.abbr')</th>
               <th abbr="Tuesday" align="center">$action.getText('tuesday.abbr')</th>
               <th abbr="Wednesday" align="center">$action.getText('wednesday.abbr')</th>
               <th abbr="Thursday" align="center">$action.getText('thursday.abbr')</th>
               <th abbr="Friday" align="center">$action.getText('friday.abbr')</th>
               <th abbr="Saturday" align="center">$action.getText('saturday.abbr')</th>
           </tr>

        #set ( $weeks = ($cal.getDaysInMonth() + $cal.startingDayOfMonth)/7 )
        #foreach ( $week in [0..$weeks] )
           <tr>
           #foreach ($day in [1..7] )
              <td align="center">
              #set ($date = $week * 7 + $day - $cal.startingDayOfMonth)
              #if ($date < 1 || $date > $cal.getDaysInMonth())
                  &nbsp;
              #elseif ($cal.getPostsForDay($date).size() == 0)
                  $date
              #else
                  #set ($thePost = $cal.getPostsForDay($date).get(0))
                  <a href="$req.contextPath/display/$thePost.space.key/$thePost.datePath/">$date</a>
              #end
              </td>
           #end
           </tr>
        #end
    </table><br/>

    #if ($datePostArrows)
        #if ($action.nextDatePost || $action.previousDatePost)
            #if ($permissionHelper.canView($action.authenticatedUser, $action.nextDatePost) )
                <a href="$req.contextPath/display/$action.nextDatePost.space.key/$action.nextDatePost.datePath/"><img src="$staticResourceUrlPrefix/images/icons/forwd_16.gif" height=16 width=16 border=0 align=absmiddle title="Next Post"></a>
                <a href="$req.contextPath/display/$action.nextDatePost.space.key/$action.nextDatePost.datePath/">$action.dateFormatter.format($action.nextDatePost.creationDate)</a><br/>
            #end
            #if ($permissionHelper.canView($action.authenticatedUser, $action.previousDatePost) )
                <a href="$req.contextPath/display/$action.previousDatePost.space.key/$action.previousDatePost.datePath/"><img src="$staticResourceUrlPrefix/images/icons/back_16.gif" height=16 width=16 border=0 align=absmiddle title="Previous Post"></a>
                <a href="$req.contextPath/display/$action.previousDatePost.space.key/$action.previousDatePost.datePath/">$action.dateFormatter.format($action.previousDatePost.creationDate)</a><br/>
            #end
            <br />
        #end
    #else
        #if ($action.nextPost || $action.previousPost)
             #if ($permissionHelper.canView($action.authenticatedUser, $action.nextDatePost) )
                 <a href="$req.contextPath$action.nextPost.urlPath"><img src="$staticResourceUrlPrefix/images/icons/forwd_16.gif" height=16 width=16 border=0 align=absmiddle title="Next Post"></a>
                 <a href="$req.contextPath$action.nextPost.urlPath">$action.nextPost.title</a><br/>
             #end

             #if ($permissionHelper.canView($action.authenticatedUser, $action.previousDatePost) )
                 <a href="$req.contextPath$action.previousPost.urlPath"><img src="$staticResourceUrlPrefix/images/icons/back_16.gif" height=16 width=16 border=0 align=absmiddle title="Previous Post"></a>
                 <a href="$req.contextPath$action.previousPost.urlPath">$action.previousPost.title</a><br/>
             #end
             <br />
         #end
    #end
#end

#* Passes in the action
 * Displays blog posts for the month and arrows to the previous and next month
 * in which blog posts were created
 *#
#macro (blogPostsByMonth $action)

    #set ($cal = $action.calendarForThisMonth)
    #set ($formatter = $action.getDateFormatter())
    #if($action.isBlogPostsByDateAction())
        #set ($monthview = true)
    #elseif ($action.isRecentBlogPosts())
        #set ($recentview = true)
    #end

    #if ($monthview || $recentview)
    <div id="bloglist" class="bloglistmultiple">
    #else
    <div id="bloglist">
    #end
        <div class="bloglistheading">
            <h2 class="sidebar-heading">
                #if($monthview)
                    $action.getText("list.element.blogpost"): $cal.formatMonthYear()
                #else
                    <a href="$req.contextPath/display/$cal.spaceKey/$cal.currentMonth/">$action.getText("list.element.blogpost"): $cal.formatMonthYear()</a>
                #end
            </h2>
        </div>

        <ul class="bloglistitems">
            #set($postcount = 0)
            #foreach ($thePost in $cal.PostsForMonth)
                       <li>
                           <span class="icon-container content-type-blogpost">
                           #if($thePost.id != $blog.id)
                               <a href="$req.contextPath$thePost.urlPath">$thePost.title</a>
                           #else
                               $thePost.title
                           #end
                           </span>
                           #set($postcount = $postcount+1)
                       </li>
            #end
            #if($postcount==0)
                <li>$action.getText('no.posts.found.for.month')</li>
            #end
        </ul>

        #set($previousMonth = $cal.lastPostInPreviousMonth)
        #set($nextMonth = $cal.firstPostInNextMonth)
        #if ($previousMonth)
            <a href="$req.contextPath/display/$cal.spaceKey/$previousMonth.postingYear/$previousMonth.postingMonthNumeric/" rel="nofollow" class="blogmonthnavigation">
                &lt;&lt; $previousMonth.getPostingMonth($formatter) $previousMonth.getPostingYear()
            </a>
        #end
        #if ($nextMonth)
            <a href="$req.contextPath/display/$cal.spaceKey/$nextMonth.postingYear/$nextMonth.postingMonthNumeric/" rel="nofollow" class="blogmonthnavigation">
                $nextMonth.getPostingMonth($formatter) $nextMonth.getPostingYear() &gt;&gt;
            </a>
        #end

    </div>

#end

#* Shows the older/newer arrows at the bottom of the blog page when viewing recent blogposts and blogpost in month
 *#
#macro(showOlderNewerBlogNavigation $action)
    <div class="pagination blog-pagination">
        #set($mainPath = "$req.contextPath/pages/viewrecentblogposts.action?key=" + $action.getKey() + '&currentPage=')
        #if($action.isBlogPostsByDateAction())
            #set ($cal = $action.calendarForThisMonth)
            #set($mainPath = "$req.contextPath/display/$cal.spaceKey/$cal.currentMonth/" + '?currentPage=')
        #end
        #if(!$action.isOldestPage())
            #set($targetPage = $action.currentPage + 1)
            #set($older = $mainPath + $targetPage)
            <a href="$older" class="blogmonthnavigation">$action.getText("older.name")</a>
        #end
        #if($action.currentPage != 1)
            #set($targetPage = $action.currentPage - 1)
            #set($newer = $mainPath + $targetPage)
            <a href = "$newer" class="blogmonthnavigation">$action.getText("newer.name")</a>
        #end
        #if($action.currentPage > 2)
            #set($newest = $mainPath + 1)
            <a href= "$newest" class="blogmonthnavigation">$action.getText("newest.name")</a>
        #end
    </div>
#end

#macro (showPermissionsHeader)
        <tr>
            <th width="25%">&nbsp;</th>
            <th colspan="2">$action.getText('all')</th>
            <th colspan="2">$action.getText('perms.pages')</th>
            <th colspan="2">$action.getText('perms.news')</th>
            <th colspan="2">$action.getText('perms.attachments')</th>
            <th colspan="2">$action.getText('perms.comments')</th>
            <th>$action.getText('perms.restrictions')</th>
            <th>$action.getText('perms.mail')</th>
            <th colspan="2">$action.getText('perms.space')</th>
        </tr>
        <tr>
            <th>&nbsp;</th>
            <th width="40">$action.getText('perms.view')</th>
            <th width="40">$action.getText('perms.removeown')</th>
            <th class="permissions-group-start" width="40">$action.getText('perms.add')</th>
            <th width="40">$action.getText('perms.remove')</th>
            <th class="permissions-group-start" width="40">$action.getText('perms.add')</th>
            <th width="40">$action.getText('perms.remove')</th>
            <th class="permissions-group-start" width="40">$action.getText('perms.add')</th>
            <th width="40">$action.getText('perms.remove')</th>
            <th class="permissions-group-start" width="40">$action.getText('perms.add')</th>
            <th width="40">$action.getText('perms.remove')</th>
            <th class="permissions-group-start" width="40">$action.getText('perms.add.remove')</th>
            <th class="permissions-group-start" width="40">$action.getText('perms.remove')</th>
            <th class="permissions-group-start" width="40">$action.getText('perms.export')</th>
            <th width="40">$action.getText('perms.admin')</th>
        </tr>
#end

#*
 * shows header for a global permissions table
 *#
#macro (showGlobalPermissionsHeader)
    <thead>
        <tr>
            <th width="230" class="permissionHeading">&nbsp;</th>
            <th width="150" class="permissionHeading">&nbsp;</th>
            #if ($action.userStatusPluginEnabled)
                <th width="150" class="permissionTab">
                    $i18n.getText("permissions.UPDATEUSERSTATUS")
                    <a href="#" class="inlineDialog-updateStatus inline-help">$i18n.getText("inline.dialog.help")</a>
                </th>
            #end
            <th width="150" class="permissionTab">
                $i18n.getText("permissions.PERSONALSPACE")
                <a href="#" class="inlineDialog-personalSpace inline-help">$i18n.getText("inline.dialog.help")</a>
            </th>
            <th width="150" class="permissionTab">
                $i18n.getText("permissions.CREATESPACE")
                <a href="#" class="inlineDialog-createSpace inline-help">$i18n.getText("inline.dialog.help")</a>
            </th>
            <th width="150" class="permissionTab">
                $i18n.getText("permissions.ADMINISTRATECONFLUENCE")
                <a href="#" class="inlineDialog-adminConfluence inline-help">$i18n.getText("inline.dialog.help")</a>
            </th>
            <th width="150" class="permissionTab">
                $i18n.getText("permissions.SYSTEMADMINISTRATOR")
                <a href="#" class="inlineDialog-adminSystem inline-help">$i18n.getText("inline.dialog.help")</a>
            </th>
        </tr>
    </thead>
#end

#*
 * Shows an info banner for the space permissions page, to indicate that Jira Service Management has enabled any user to view
 * the space, because it is linked as a knowledge base.
 *#
#macro (anyUserCanViewSpaceInfoBanner $isUnlicensedGlobalPermissionEnabled $spaceKey)
    <div class="any-user-view-perm-info-banner">
        #if ($isUnlicensedGlobalPermissionEnabled)
            <h3>$i18n.getText("space.permissions.any.active.user.can.view.title")</h3>
            <span class="aui-icon aui-icon-large aui-iconfont-unlocked padlock-open-large"></span>
            <p class="info-text">
                $i18n.getText("space.permissions.any.active.user.can.view.desc") $i18n.getText("space.permissions.any.user.can.view.desc.end")
            </p>
        #else
            <h3>$i18n.getText("space.permissions.any.licensed.user.can.view.title")</h3>
            <span class="aui-icon aui-icon-large aui-iconfont-unlocked padlock-open-large"></span>
            <p class="info-text">
                $i18n.getText("space.permissions.any.licensed.user.can.view.desc") $i18n.getText("space.permissions.any.user.can.view.desc.end")
            </p>
        #end

        <form name="anyuserpermission" action="anyuserviewspacepermission.action">
            <input type="hidden" name="key" value="$spaceKey">
            <input type="submit" value="$action.getText('space.permissions.any.user.edit.permission')" id="edit-any-user-perm" class="aui-button aui-button-link">
        </form>
    </div>
#end

#*
 * Macro for getting the URL of a resource from within a themed decorator
 *#

#macro (themeResource $resourcePath)$req.contextPath$req.getAttribute("theme.resource.path")$resourcePath#end

#*
 * This macro is quite messy but is neater than simply copying and pasting the HTML three times on two different
 * screens to represent view and edit views of permissions for groups, users, and anonymous entities.
 *
 * Note - this macro renders form elements when in edit mode but you must wrap it in a form element yourself.
 *
 * $who: list containing the following symbols - "g" (group), "u" (user), "a" (anonymous), "e" (everyone).
 * Each symbol is a directive to print out symbolized information in the order in which the symbols are expressed.
 * Note - "e" is actually ["g", "u", "a"]
 *
 * $action: an object carry functionality to support calls for group, user, and anonymous permissions; for example
 * com.atlassian.confluence.security.actions.EditSpacePermissionsAction .
 *
 * $edit: string literal; if set to "true" it will output input boxes for each permission listing, otherwise it will
 * use a tick or cross image for read-only.
 *#
#macro (showPermissions $who $action $edit )

    #if ($who == ["e"])
        #set ($who = ["g", "u", "a"])
    #end

    <div id="select-options" class="aui-dropdown2 aui-style-default">
        <ul>
            <li><a href="#" class="select-all">$action.getText('select-all')</a></li>
            <li><a href="#" class="deselect-all">$action.getText('deselect-all')</a></li>
        </ul>
    </div>

##TODO remove 'Mail' Permission from cloud
    #foreach( $entity in $who )
        <table id="${entity}PermissionsTable" border="0" cellpadding=2 cellspacing=0 width="100%" class="permissions aui">
        #set ($spacePermissionGroups = [
        ["viewspace", "removeowncontent"],
        ["editspace", "setpagepermissions", "removepage"],
        ["editblog", "removeblog"],
        ["createattachment", "removeattachment"],
        ["comment", "removecomment"],
        ["removemail"],
        ["exportspace", "setspacepermissions"]])
        #set ($spacePermissionGroups = [
        ["viewspace", "removeowncontent"],
        ["editspace", "removepage"],
        ["editblog", "removeblog"],
        ["createattachment", "removeattachment"],
        ["comment", "removecomment"],
        ["setpagepermissions"],
        ["removemail"],
        ["exportspace", "setspacepermissions"]])

        #if ($entity == "g")
            #set ($groupRows = $action.groupPermissionRows)
            #if (!$groupRows.empty)
                #showPermissionsHeader()

                #foreach ($groupRow in $groupRows)
                    <tr class="space-permission-row">
                        <td>
                            $htmlUtil.htmlEncode($groupRow.groupName)
                            #if (!$groupRow.entityExists())
                                <br/><span class="errorMessage">$action.getText("error.group.not.found")</span>
                            #elseif ($groupRow.caseInvalid)
                                <br/><span class="errorMessage">$action.getText('error.permission.incorrect.case', [$htmlUtil.htmlEncode($groupRow.group.name)])</span>
                            #end
                            #checkboxSelector("g" $groupRow.groupName)
                        </td>
                        #permissionValues($groupRow $spacePermissionGroups "" $groupRow.groupName)
                    </tr>
                #end
            #else
                <tr><td colspan=5>$action.getText('no.groups.have.access') </td></tr>
            #end
        #end
        #if ($entity == "u")
            #set ($userRows = $action.userPermissionRows)
            #if (!$userRows.empty)
                #showPermissionsHeader()

                #foreach ($userRow in $userRows)
                    <tr class="space-permission-row" data-key="$htmlUtil.htmlEncode($userRow.username)" class="key-holder">
                        <td>
                            #if ($userRow.entityExists())
                                $htmlUtil.htmlEncode($userRow.user.fullName)
                            #end
                            <span class="grey">($htmlUtil.htmlEncode($userRow.username))</span>
                            #if (!$userRow.entityExists())
                                <br/><span class="errorMessage">$action.getText("error.user.not.found")</span>
                            #elseif ($userRow.caseInvalid)
                                <br/><span class="errorMessage">$action.getText('error.permission.incorrect.case', [$htmlUtil.htmlEncode($userRow.user.name)])</span>
                            #end
                            #checkboxSelector("u" $userRow.userKey)
                        </td>
                        #permissionValues($userRow $spacePermissionGroups $userRow.getUsername() "")
                    </tr>
                #end

            #else
                <tr><td colspan=5>$action.getText('no.users.have.rights.to.this.space')</td></tr>
            #end
        #end
        #if ($entity == "a")
            #showPermissionsHeader()
            #set ($anonymousRow = $action.anonymousPermissionRow)
            <tr class="space-permission-row">
                <td>
                    <strong>$action.getText('anonymous.name')</strong>
                    #checkboxSelector("a" "anonymous")
                </td>
                #permissionValues($anonymousRow $spacePermissionGroups "" "")
            </tr>
        #end
    </table>
    #end
#end

#macro(permissionValues $row $spacePermissionGroups $username $groupname)
    #foreach ($permissionGroup in $spacePermissionGroups)
        #set($isFirstPermissionGroup = $velocityCount == 1)
        #foreach ($permission in $permissionGroup)
            #permissionValueCell($row $permission $isFirstPermissionGroup $username $groupname)
        #end
    #end
#end

#macro(permissionValueCell $row $permission $isFirstPermissionGroup $username $groupname)
<td align="center" class="permissionCell#if(!$isFirstPermissionGroup && $velocityCount == 1) permissions-group-start#end"
    valign="middle"
    data-permission="$htmlUtil.htmlEncode($permission)"
    #if ($username != "") data-permission-user="$htmlUtil.htmlEncode($username)" #end
    #if ($groupname != "") data-permission-group="$htmlUtil.htmlEncode($groupname)" #end
    data-permission-set="$row.isTypeAllowed($permission)">
## Don't show checkboxes for owners of personal spaces
    #if ($edit == "true" && !($action.getSpace().getType().toString() == "personal" && $username == $action.getSpace().getCreatorName()) )
        #if ($row.isTypeAllowed($permission))
            <input type="checkbox" name="$row.buildCheckboxParameterName($permission)" checked="checked">
            <input type="hidden" name="$row.buildHiddenParameterName($permission)" value="on">
        #else
            <input type="checkbox" name="$row.buildCheckboxParameterName($permission)">
        #end
    #else
        #if ($row.isTypeAllowed($permission))
            <img src="$staticResourceUrlPrefix/images/icons/emoticons/check.png" width=16 height=16 align=absmiddle border=0>
        #else
            <img src="$staticResourceUrlPrefix/images/icons/emoticons/error.png" width=16 height=16 align=absmiddle border=0>
        #end
    #end
</td>
#end

#macro(checkboxSelector)
    #if ($edit == 'true')
        <button class="aui-button aui-button-text row-selector" type="button">$i18n.getText("select-all")</button>
    #end
#end

## use this function in tr's to alternate the row colors when displaying a list of items.
#macro (alternateRowColors)
    #if ($velocityCount % 2 == 0)
        class="rowAlternate"
    #end
#end

#macro (spaceTitleLink)
    #if ($sitemeshPage.getProperty("page.spacename"))
        #if ($sitemeshPage.getProperty("page.spacekey"))
            <a href="$req.contextPath/display/$sitemeshPage.getProperty("page.spacekey")">$sitemeshPage.getProperty("page.spacename")</a>
        #else
            $sitemeshPage.getProperty("page.spacename")
        #end
    #else
        &nbsp;
    #end
#end

#macro (pageTitleLink)
    #if ($sitemeshPage.getProperty("page.pageTitle"))
        $sitemeshPage.getProperty("page.pageTitle")
    #else
        $title
    #end
#end


#macro (quickSearch)
    #customQuickSearch("" true true [])
#end

#macro (customQuickSearch $prefix $accessKey $quickNavEnabled $searchOptions)
    #if (!$prefix || $prefix=="") #set($prefix = "") #else #set($prefix = "${prefix}-") #end
    #if (!$searchOptions) #set($searchOptions = []) #end
    #if ($accessKey==true) #set ($accessKey = $action.getTextStrict("quick.search.${prefix}accesskey")) #else #set($accessKey=false) #end

    <form id="${prefix}quick-search" class="quick-search" method="get" action="$req.contextPath/dosearchsite.action">
        <fieldset>
            <label class="assistive" for="${prefix}quick-search-query">$action.getText("quick.search.${prefix}legend")</label>
            <input id="${prefix}quick-search-query" class="quick-search-query" type="search"#if($accessKey) accessKey="$accessKey"#end autocomplete="off" name="queryString" size="25" title="$action.getText("quick.search.${prefix}legend")" />
            <input id="${prefix}quick-search-submit" class="quick-search-submit" type="submit" value="$action.getText("quick.search.${prefix}submit")" />
            <div class="aui-dd-parent quick-nav-drop-down"></div>
        </fieldset>
        <div class="hidden parameters">
            #if ($quickNavEnabled)
                #putMetadata('quick-nav-enabled', $settingsManager.globalSettings.enableQuickNav)
                #if (!$settingsManager) <!-- Quick nav disabled. SettingsManager could not be found --> #end
            #end
            #foreach ($option in $searchOptions)
                #if ($option.name)
                <input type="hidden" name="$option.name" value="$option.value"/>
                #end
            #end
        </div>
    </form>
#end

#*
    Renders an edit link with image, for a blog.
*#
#macro (editBlogPostWithImageLink )

   #set ($page = $helper.page)

   #if ($permissionHelper.canEdit($action.authenticatedUser, $page))
       <a href="$req.contextPath/pages/editblogpost.action?pageId=$page.id"><img border="0" src="$staticResourceUrlPrefix/images/icons/edit_16.gif" align="absmiddle"></a>
       <a href="$req.contextPath/pages/editblogpost.action?pageId=$page.id">Edit</a>
   #end
#end


#macro (renderChildren)
    #set ($page = $helper.page)
    #if ($helper.action.getPermittedChildren().size() > 0 && $page.latestVersion)
        <div id="children-section" class="pageSection#if ($helper.childrenShowing) children-showing#else children-hidden#end group">
        #if (!$helper.childrenShowing)
            #set ($extraHeaderClass="summary")
            #set ($linkTarget="$req.contextPath$generalUtil.customGetPageUrl($page)showChildren=true#children")
        #else
            #set ($linkTarget="$req.contextPath$generalUtil.customGetPageUrl($page)showChildren=false#children")
        #end

        <div class="section-header $!extraHeaderClass">
            <h2 id="children-section-title" class="section-title">
                <a href="$linkTarget" class="children-show-hide">
                    #if ($helper.action.getPermittedChildren().size() == 1)
                        $action.getText("number.of.children.one")
                    #else
                        $action.getText("number.of.children", $helper.action.getPermittedChildren().size())
                    #end
                </a>
            </h2>

            <a href="$linkTarget" class="children-show-hide icon"></a>
            <!--
            <span class="noprint grey">
                <a class="children-subtitle" href="$req.contextPath/pages/listpages-dirview.action?key=$page.space.key&amp;openId=$page.id#selectedPageInHierarchy">$action.getText('view.in.hierarchy')</a>
                #if ($page.type == "page" && $permissionHelper.canCreatePage($remoteUser, $space))
                    &nbsp;|&nbsp;
                    <a class="children-subtitle" href="$req.contextPath/pages/createpage.action?spaceKey=$htmlUtil.urlEncode($space.key)&amp;fromPageId=$page.id">
                        $helper.getText("action.add.page.child")
                    </a>
                #end
            </span>
            -->
        </div>
        <div id="page-children" class="pageSectionBody#if ($helper.childrenShowing) children-loaded#end">
            #if ($helper.childrenShowing)
            #foreach ($child in $helper.action.getPermittedChildren())
                <span class="child-display">
                    #contentLink2 ($child true false) ## space key after the link is redundant
                </span>
            #end
            #end
        </div>
        </div>
    #end
#end

#macro (renderComments)
    #applyDecorator("root")
        #decoratorParam("sitemeshPage" $sitemeshPage)
        #decoratorParam("page" $page)
        #decoratorParam("context" "sharedcomments")
    #end
#end

## Deprecated sinse 3.0. Use onLoadAttr instead.
#macro (onLoad)
    #if (!$textUtil.stringSet($sitemeshPage.getProperty("page.bodyOnLoad")))
        <body id="com-atlassian-confluence">
    #else
        <body onload="$sitemeshPage.getProperty('page.bodyOnLoad')" id="com-atlassian-confluence">
    #end
#end

#macro (onLoadAttr)
    #if ($textUtil.stringSet($sitemeshPage.getProperty("page.bodyOnLoad")))
        onload="$sitemeshPage.getProperty('page.bodyOnLoad')"
    #end
#end

#macro (versionInfo)
    #if ($helper.historicalVersion)
    <div id="page-history-warning" class="aui-message aui-message-warning">
        <p>
            <strong>$action.getText('viewing.old.version',["$req.contextPath$page.latestVersion.urlPath"])</strong>
        </p>
        <p class="page-history-view">
            <a href="$req.contextPath/pages/diffpagesbyversion.action?pageId=$page.originalVersionPage.id&amp;originalVersion=$page.version&amp;revisedVersion=$page.originalVersionPage.version">$action.getText('view.differences')</a>
            #if ($permissionHelper.canEdit($action.authenticatedUser, $page))
                <a class="restore-historical-version-trigger" href="revertpagebacktoversion.action?pageId=$page.originalVersionPage.id&amp;version=${page.version}">$action.getText('restore.this.version.smalls')</a>
            #end
            <a href="$req.contextPath/pages/viewpreviousversions.action?pageId=$page.latestVersion.id">$action.getText('view.page.history.smalls')</a>
        </p>
        <p class="version-navigation-block">
            #if ($action.hasPreviousVersion($page))
                <a class="version-navigation aui-button view-historical-version-trigger" href="$req.contextPath/pages/viewpage.action?pageId=$action.getPageIdOfVersionBefore($page)&amp;navigatingVersions=true">&laquo; $action.getText('view.previous.version')</a>
            #end

            <span class="current-version-margin">
                #if($helper.historicalVersion)
                    $action.getText('viewing.current.version', ["$page.version"])
                #end
            </span>

            #if ($page.getOriginalVersionPage().id == $action.getPageIdOfVersionAfter($page))
                <a class="version-navigation aui-button" id="current-navigation" href="$req.contextPath$page.originalVersionPage.urlPath">$action.getText('view.current.version') &raquo;</a>
            #elseif ($action.hasNextVersion($page))
                <a class="version-navigation aui-button view-historical-version-trigger" href="$req.contextPath/pages/viewpage.action?pageId=$action.getPageIdOfVersionAfter($page)&amp;navigatingVersions=true">$action.getText('view.next.version') &raquo;</a>
            #end

        </p>
    </div>
    #end
#end

#macro (versionComment)
    #if ($page.isVersionCommentAvailable())
    <div id="version-comment" class="noteMacro">
        <strong>$action.getText('comment.name'):</strong>
        $page.renderedVersionComment<br />
    </div>
    #end
#end

#macro (versionCommentByPage $thePage)
    #if ($thePage.isVersionCommentAvailable())
    <div id="version-comment" class="noteMacro">
        <strong>$action.getText('comment.name'):</strong>
        $thePage.renderedVersionComment<br />
    </div>
    #end
#end

## Label links shown in the context of a space should take the user to a page that contains content for that space only
## to do this, we need to pull the space key either from the $helper or from the $action.
## The getUrlPath() method on label should be able to handle null/empty spacekeys.
#macro (labelLinkUrl $label)
#trim()
    #if($helper.spaceKey)
        $req.contextPath$label.getUrlPath($helper.spaceKey)
    #else
        $req.contextPath$label.getUrlPath($spaceKey)
    #end
#end
#end

#* ----------------------------------------------- LOGO MACROS ----------------------------------------------- *#

## only returns the image url of the appropriate logo
## this method is deprecated. Use LogoBlock instead, it delegates to newer and more efficient macros.
#macro (logo $spaceKeyOrUsername)
#trim()
	## Firstly, if it's a username, look for user profile picture
	#if ($textUtil.stringSet($spaceKeyOrUsername) && $spaceKeyOrUsername.startsWith("~"))
        ##This may still lead to bugs (VELOCITY-186) but for now I am leaving this unchanged. TODO examine this
        #set ($userProfilePicture = $userAccessor.getUserProfilePicture($spaceKeyOrUsername.substring(1)))
		#if ($userProfilePicture)
			$userProfilePicture.uriReference
		#else
			$staticResourceUrlPrefix/images/logo/confluence_48_white.png
		#end

	## Otherwise, it's not a username, so let's check if the space has a set logo
	#elseif ($textUtil.stringSet($spaceKeyOrUsername) && $spaceManager.getSpace($spaceKeyOrUsername) && $attachmentManager.getAttachment($spaceManager.getSpace($spaceKeyOrUsername).description, $spaceKeyOrUsername))
		$htmlUtil.htmlEncode("${req.contextPath}$attachmentManager.getAttachment($spaceManager.getSpace($spaceKeyOrUsername).description, $spaceKeyOrUsername).downloadPath")

	## No space logo, let's look for a default space logo
	#elseif ($settingsManager.globalDescription && $attachmentManager.getAttachment($settingsManager.globalDescription,"global.logo"))
		#set($attachment=$attachmentManager.getAttachment($settingsManager.globalDescription,"global.logo"))
		$htmlUtil.htmlEncode("${req.contextPath}$attachment.downloadPath")

	## No default space logo, let's use the default Confluence logo
    #else
		$staticResourceUrlPrefix/images/logo/confluence_48_white.png
    #end

#end
#end

## checks if space preferences to determine if the logo has been disabled, and then displays it.
## include href link just in case we want to customize this part based on some preference in the future (without breaking people's stuff again)
#macro (logoBlock $spaceKeyOrUsername)
#trim()
    #if ($textUtil.stringSet($spaceKeyOrUsername))
		#if ($spaceKeyOrUsername.startsWith("~"))
			#userLogoBlock($userAccessor.getUserByName($spaceKeyOrUsername.substring(1)))
		#else
			#spaceLogoBlock($spaceKeyOrUsername)
		#end
	#else
        #defaultSpaceLogoBlock()
    #end
#end
#end



## private - use #logoBlock.
#macro (spaceLogoBlock $spaceKey)
#trim()
     #if ($settingsManager.getSpaceSettings($spaceKey).isDisableLogo()) ## render nothing
     #else
       #set ($spaceLogo=$spaceManager.getLogoForSpace($spaceKey))
       #set ($spaceLogoBlock_space=$spaceManager.getSpace($spaceKey))
       #set ($spaceLogoBlock_cssClass="logo")
       #if ($spaceLogo.isCustomLogo())
           #set($spaceLogoBlock_cssClass="$spaceLogoBlock_cssClass space custom")
       #else
           #set($spaceLogoBlock_cssClass="$spaceLogoBlock_cssClass global")
           #if ($spaceLogo.isGlobalLogo())
               #set($spaceLogoBlock_cssClass="$spaceLogoBlock_cssClass custom")
           #end
       #end
        <div class="space-logo #if ($darkFeatures.isDarkFeatureEnabled('rotp.project.shortcuts'))project-shortcut-dialog-trigger#end" data-key="$spaceKey" data-name="$htmlUtil.htmlEncode($spaceLogoBlock_space.name)" data-entity-type="confluence.space">
            <a><img class="$spaceLogoBlock_cssClass" src="${req.contextPath}$spaceLogo.getDownloadPath()" alt=""></a>
        </div>

    #end
#end
#end

## NOTE: This is currently duplicated in user.soy and comments.soy. If you change one you will probably need to change the others.
#macro (userLogoBlock $user)
#trim()
    #set ($userProfilePicture = $userAccessor.getUserProfilePicture($user))
    #set($canView = $permissionHelper.canView($action.authenticatedUser, $user))

    ## if the user profile still has the default picture, AND the usericon getting displayed is the current user, THEN generate a link to set the profile picture
    #if ($userProfilePicture.isDefault() && "$action.authenticatedUser.name" == $user.name)
        <a #if($canView) class="userLogoLink" data-username="$htmlUtil.htmlEncode($user.name)"#end href="$req.contextPath/users/profile/editmyprofilepicture.action" title="$action.getText("add.a.profile.picture")">
            <img class="userLogo logo defaultLogo" src="$staticResourceUrlPrefix/images/icons/profilepics/add_profile_pic.svg" alt="$action.getText("accessibility.user.icon"): $action.getText("add.a.profile.picture")">
        </a>
    #else
      ## otherwise, the default case is to display the logo, depending on permissions
      #if ($userProfilePicture.isAnonymousPicture())
           <img class="userLogo logo anonymous" src="$staticResourceUrlPrefix/images/icons/profilepics/anonymous.svg"
            alt="$action.getText("accessibility.user.icon"): $action.getText("user.icon.anonymous.title")" title="$action.getText("user.icon.anonymous.title")">
      #elseif (!$canView)
           ##anonymous users with user permission but without view profile permission should not see user logos or be linked to profiles
          <img class="userLogo logo anonymous" src="$staticResourceUrlPrefix/images/icons/profilepics/anonymous.svg"
               alt="$action.getText("accessibility.user.icon"): $htmlUtil.htmlEncode($user.name)" title="$htmlUtil.htmlEncode($user.name)">
      #else
          <a #if($canView) class="userLogoLink" data-username="$htmlUtil.htmlEncode($user.name)"#end href="#userLinkUrl($req.contextPath, $user.name)">
              <img class="userLogo logo" src="$htmlUtil.htmlEncode($userProfilePicture.uriReference)"
                   alt="$action.getText("accessibility.user.icon"): $htmlUtil.htmlEncode($user.name)" title="$htmlUtil.htmlEncode($user.name)">
           </a>
      #end
    #end
#end
#end

## private - use #logoBlock.
#macro (defaultSpaceLogoBlock)
  #trim()
      #if ($settingsManager.getGlobalSettings().isDisableLogo())
      #else
          #set ($defaultSpaceLogo=$spaceManager.getLogoForGlobalcontext())

          #set ($completeDownloadPath=$htmlUtil.htmlEncode("$req.contextPath$defaultSpaceLogo.getDownloadPath()"))


          #if ($defaultSpaceLogo.isCustomLogo())
             <a href="$req.contextPath/homepage.action"><img class="global logo custom"  src="$completeDownloadPath" alt="$action.globalSettings.siteTitle"></a>
          #else
             <a href="$req.contextPath/homepage.action"><img class="global logo"  src="$completeDownloadPath" alt="$action.globalSettings.siteTitle"></a>
          #end
      #end
   #end
#end


## shows the user's profile picture if they have one, otherwise _shows nothing_ (not a Confluence logo like logoBlock)
#macro (logoForUserIfExists $username)
    #userLogoBlockOtherwise("~$username" "")
#end

## Render a user logo if not the default one, otherwise evaluate the provided expression. Assumes username starts with ~
#macro (userLogoBlockOtherwise $username $otherwiseHtml)
    #set ($noTildeUsername = $username.substring(1))
    #set ($logoUser = $userAccessor.getUserByName($noTildeUsername))
    #if (!$userAccessor.getUserProfilePicture($logoUser).default || $remoteUser == $logoUser)
        #userLogoBlock($logoUser)
    #else
        $otherwiseHtml
    #end
#end

#macro (logoForUserOrSpacer $username)
    #userLogoBlockOtherwise("~$username" "#profilePictureSpacer()")
#end

#macro (profilePictureSpacer)
    <img class="userLogo logo anonymous" src="$staticResourceUrlPrefix/images/icons/profilepics/anonymous.svg" alt="" title="$action.getText("user.icon.anonymous.title")">
#end

#* DEPRECATED *#
#macro (addProfilePictureHint)
    <a class="userLogoLink" href="$req.contextPath/users/profile/editmyprofilepicture.action" title="$action.getText("add.a.profile.picture")">
        <img class="userLogo logo" src="$staticResourceUrlPrefix/images/icons/profilepics/add_profile_pic.svg" alt="$action.getText("add.a.profile.picture")">
    </a>
#end

#* DEPRECATED *#
#macro (userLogo $username)
    <a class="userLogoLink" href="$req.contextPath/display/$username"><img class="userLogo logo" src="#logo($username)" alt="" title="$username"></a>
#end

#* ----------------------------------------------- SIMPLE LINK MACROS -----------------------------------------------
 Store macros which render a one line link here.
*#

#macro (tinyLink )
    <a href="$helper.domainName/x/$helper.tinyUrl">$helper.domainName/x/$helper.tinyUrl</a>
#end


## src - path to js file _without_ context path
#macro (includeJavascript $src)
    #if ($src && !$src.startsWith("/"))
        #set ($src = "/${src}")
    #end

    #if ($webResourceManager)
        <script type="text/javascript" src="$staticResourceUrlPrefix$src"></script>
    #else
        <script type="text/javascript" src="$req.contextPath$src"></script>
    #end
#end

## Use this macro to request a Javascript or CSS plugin resource be added to the HTML header.
## This macro doesn't generate any actual markup.
#macro (requireResource $resourceModuleKey)
    $!webResourceManager.requireResource($resourceModuleKey)
#end

## Use this macro to request all Javascript or CSS plugin resources belonging to the given contextan
## added to the HTML header. This macro doesn't generate any actual markup.
#macro (requireResourcesForContext $context)
    ## These explicit calls are because we can't define dependencies
    ## for our contexts.
    ## See: http://jira.atlassian.com/browse/CONF-13739
    #requireResource("confluence.web.resources:ajs")
    $!webResourceManager.requireResourcesForContext($context)
#end

#macro (webPanelForLocation $location $context)
    #if (!$context)
        #set ($actualContext = {})
    #else
        #set ($actualContext = $context)
    #end

    #foreach ($webPanel in $webInterfaceManager.getDisplayableWebPanels($location, $actualContext))
        $!webPanel.getHtml($actualContext)
    #end
#end

## use this macro to include javascript resources in plugins
## this macro appends a special prefix to the normal script URL (effectively enabling caching on the serving of this javascript)
#macro (includePluginJavascript $pluginCompleteKey $scriptName)
    #if ($webResourceManager)
        <script type="text/javascript" src="$webResourceHelper.getStaticPluginResource($pluginCompleteKey, $scriptName)"></script>
    #else
        <script type="text/javascript" src="$req.contextPath/download/resources/$pluginCompleteKey/$scriptName"></script>
    #end
#end


#macro (node $p $idsToExpandAsList $openId)
    #if ($action.hasPermittedChildren($p))
        <a href="#if($idsToExpandAsList.contains($p.id))$action.generateCollapseNodeLinkForNonJSUsers($p)#else $!action.generateExpandNodeLinkForNonJSUsers($p)#end" onClick="toggleChildren('$p.id'); return false;">
        #if($idsToExpandAsList.contains($p.id))
            <img border="0" onClick="togglePlusMinus(this)" src="$staticResourceUrlPrefix/images/icons/tree_minus.gif"></a>
        #else
            <img border="0" onClick="togglePlusMinus(this)" src="$staticResourceUrlPrefix/images/icons/tree_plus.gif"></a>
        #end
    #else
        <img border="0" src="$staticResourceUrlPrefix/images/icons/tree_square.gif">
    #end
    #if ($p.id == $openId)
        <span class="openPageHighlight">#contentLinkWithAnchor($p 'selectedPageInHierarchy')</span>
    #else
        #contentLink2 ($p true false)
    #end
    <div id="children$p.id" style="border: 1px solid white">
        #if ($idsToExpandAsList.contains($p.id))
            <ul style="list-style-type: none">
            #foreach ($child in $action.getPermittedChildren($p))
                <li>#node($child $idsToExpandAsList $openId)</li>
            #end
            </ul>
        #end
    </div>
#end

#macro (permitSearchEngines)
    <content tag="allowindex">true</content>
#end

#macro (searchResultContentLink $searchResult)
    #contentIcon($searchResult)

	#if ($searchResult.type == "attachment")
		<a href="$req.contextPath$searchResult.extraFields.attachmentDownloadPath">$htmlUtil.htmlEncode($searchResult.displayTitle)</a>
	#else
		<a href="$req.contextPath$searchResult.urlPath">$htmlUtil.htmlEncode($searchResult.displayTitle)</a>
	#end

	#if ($searchResult.type == "page" || $searchResult.type == "blogpost")
		<span class="smalltext">(<a href="$req.contextPath/display/$htmlUtil.urlEncode($searchResult.spaceKey)">$htmlUtil.htmlEncode($searchResult.spaceName)</a>)</span>
	#elseif ($searchResult.type == "attachment")
		<span class="smalltext">
			(<a href="$req.contextPath/display/$htmlUtil.urlEncode($searchResult.spaceKey)">$htmlUtil.htmlEncode($searchResult.spaceName)</a>
			&gt; <a href="$req.contextPath$searchResult.extraFields.containingContentUrlPath">$htmlUtil.htmlEncode($searchResult.extraFields.containingContentDisplayTitle)</a>)
		</span>
	#elseif ($searchResult.type == "comment")
		<span class="smalltext">
			(<a href="$req.contextPath/display/$htmlUtil.urlEncode($searchResult.spaceKey)">$htmlUtil.htmlEncode($searchResult.spaceName)</a>
			&gt; <a href="$req.contextPath$searchResult.extraFields.containingPageUrlPath">$htmlUtil.htmlEncode($searchResult.extraFields.containingPageDisplayTitle)</a>)
		</span>
    #end
#end

#macro (searchResult $searchResult $showExcerpts $queryString)

	## ensure we check for null here to avoid trying to assign null (CONF-12141)
	#if ($searchResult.content)
		#set ($contentBody = $searchResult.content)
	#else
		#set ($contentBody = '')
	#end

	#searchResultContentLink($searchResult)
    #if ('true' == $showExcerpts && $stringUtils.isNotBlank($contentBody) && $stringUtils.isNotBlank($queryString))
		#if ($searchResult.type != "attachment")
            #set ($summary = $generalUtil.makeSummary($contentBody, $queryString))
        #elseif ($searchResult.type == "attachment" && $contentBody)
            #set ($summary = $generalUtil.makeSummary($contentBody, $queryString))
        #elseif ($searchResult.type == "attachment" && $searchResult.comment)
            #set ($summary = $generalUtil.makeSummary($searchResult.comment, $queryString))
        #end

        #if ($summary)
            <br/>
            ## this is all one one line so that fragments are concatenated properly without spaces
            #foreach ($fragment in $summary.fragments)#if ($fragment.isHighlight() == true)<span class="search-highlight"><strong>$htmlUtil.htmlEncode($fragment.toString())</strong></span>#else$htmlUtil.htmlEncode($fragment.toString())#end#end
        #end

        ## clear the summary after displaying it to avoid Velocity scope problems
        #set ($summary = '')
    #end

    <br />
    <span class="smalltext">
        #if ($searchResult.type == 'attachment')
            #if ($searchResult.extraFields.attachmentTypeDescription)
                $searchResult.extraFields.attachmentTypeDescription -
            #end
            $searchResult.extraFields.attachmentReadableFileSize -
        #end

        $action.dateFormatter.format($searchResult.lastModificationDate)

        #if ($searchResult.type == 'attachment')
            - <a href="$req.contextPath$searchResult.extraFields.attachmentDownloadPath">$action.getText('download.name')</a>
            - <a href="$req.contextPath$searchResult.urlPath">$action.getText('all.attachments')</a>
        #elseif ($searchResult.type == 'comment')
			- <a href="$req.contextPath${searchResult.extraFields.containingPageUrlPath}#comments">$action.getText('all.comments')</a>
        #elseif ($searchResult.type == 'blogpost')
            - <a href="$req.contextPath/pages/viewrecentblogposts.action?key=$htmlUtil.urlEncode($searchResult.spaceKey)">$action.getText('all.news')</a>
        #elseif ($searchResult.type == 'mail')
            - <a href="$req.contextPath/spaces/viewmailarchive.action?key=$htmlUtil.urlEncode($searchResult.spaceKey)">$action.getText('all.mail')</a>
        #end
    </span>

	#if ($searchResult.hasLabels())

        #set ($labels = $searchResult.getLabels($remoteUser))
		#set ($max = 5)

		#if ($labels.size() > 0)
			<br />
        	<span class="smalltext">
        	$action.getText('labels.name'):
			#set($remaining = $labels.size() - $max)
			#foreach($label in $labels)#if($velocityCount <= $max)#if($velocityCount > 1), #end <a href="$req.contextPath/label/$htmlUtil.urlEncode($label)" rel="nofollow">$label</a>#end#end
			#if($remaining > 0)
			... $action.getText('search.x.more.labels', [$remaining]).
			#end
			</span>
		#end

    #end

#end

#macro (commaDelimitedList $list)
    #foreach($item in $list)#if($velocityCount != 1), #end$!item#end
#end

#macro (doc $link $body)
    <a href="$docBean.getLink($link)" target="_blank">$body</a>## comment after element eliminates extra whitespaces
#end

## Renders a hint box with some helpful text inside.
## A documentation link is assumed to exist for the hint.
## The $hintKey will be used in conjunction with a prefix
## to look up the full i18n strings for the hint:
## - The hint text itself will be prefixed with "hint."
## - The documentation link url will be prefixed with "help."
## - The documentation link text will be prefixed with "more.about."
#macro (hint $hintKey)
    <div class="hints">
        <span class="hints-text">
            $i18n.getText("hint.$hintKey")
            #doc("help.$hintKey" $i18n.getText("more.about.$hintKey"))
         </span>
    </div>
#end

#macro (addClassName $existingClass $newClass)
    #set ($existingClass = "$existingClass $newClass")
#end

#*
    DO NOT USE (since 5.7) - please use the templates in captcha.soy instead.
 *#
#macro (captchaImage $captchaId)
    $deprecated.since("5.7")
    <img src="$req.contextPath/jcaptcha?id=$captchaId" class="captcha-image" alt="$generalUtil.escapeXml($i18n.getText("captcha.image.alt"))" />
    <input type="hidden" name="captchaId" value="$captchaId" placeholder="$i18n.getText('captcha.challenge')"/>
#end

#macro (displayContentPermission $perm)
    #if ($perm.isUserPermission())
        <img src="$staticResourceUrlPrefix/images/icons/user_16.png">&nbsp;$perm.userName
    #else
        <img src="$staticResourceUrlPrefix/images/icons/group_16.png">&nbsp;$perm.groupName
    #end
#end

#macro (favicon)
    <link rel="shortcut icon" href="$webResourceManager.getGlobalCssResourcePrefix()/favicon.ico">
    <link rel="icon" type="image/x-icon" href="$webResourceManager.getGlobalCssResourcePrefix()/favicon.ico">
#end


#macro(dashboard_renderGlobalActions $menuId $webSectionKeys)
    $deprecated.since("6.0")
    #set($webMenu = $webMenuManager.getMenu($menuId, $webSectionKeys, $action.webInterfaceContext))
    ## don't display if there are no sections - only expect one section for this location
    #if(!$webMenu.isEmpty())
        #foreach ($section in $webMenu.sections)
            <div class="dashboard-item dashboard-action-button">
            #foreach ($item in $section.items)
                #set ($itemRenderedUrl = '')
                #set ($itemRenderedUrl = $item.link.getDisplayableUrl($req, $action.webInterfaceContext))
                #set ($itemLabel = $item.label.getDisplayableLabel($req, $action.webInterfaceContext))
                #set ($itemClass = $item.styleClass)
                #set ($itemIcon = $item.icon)
                #set ($itemDescription = $item.description)
                #set ($itemIconUrl = $itemIcon.url.getDisplayableUrl($req, $action.webInterfaceContext))
                #set ($itemTooltip = $item.tooltip.getDisplayableLabel($req, $action.webInterfaceContext))
                #set ($linkId = $item.link.id)

                <span>
                <a id="$linkId" class="$!itemClass dashboard-no-underline dashboard-action" title= "$itemTooltip" href="$itemRenderedUrl">
                    <span class="icon"></span> $itemLabel
                </a>
                </span>
            #end
            </div>
        #end
    #end
#end

## Method to avoid encoding by Anti-XSS mode.  This method is dangerous and should usually
## be avoided.
#macro(unencoded $assumedHtml)
#trim()
    $assumedHtml
#end
#end

#macro(form_xsrfToken)
    <input type="hidden" name="${xsrfTokenGenerator.xsrfTokenName}" value="${xsrfTokenGenerator.generateToken($req)}">
#end

#macro(url_xsrfToken)
#trim()
   ${xsrfTokenGenerator.xsrfTokenName}=${xsrfTokenGenerator.generateToken($req)}
#end
#end

#macro (showCacheStatistics $cacheStatistics, $expiredCountHeaderProperty)

    #if(!$expiredCountHeaderProperty)
        #set ($expiredCountHeaderProperty = "cache.expired")
    #end

    <table class="grid" width="100%">
        <tr>
            <th class="smalltext">$action.getText("cache.name")</th>
            <th class="smalltext">$action.getText("cache.percentused")</th>
            <th class="smalltext">$action.getText("cache.effectiveness")</th>
            #if ($action.showDistributions)
                <th class="smalltext">$action.getText("cache.current.max.entries")</th>
                <th class="smalltext">$action.getText("cache.current.heap.size.mb")</th>
                <th class="smalltext">$action.getText("cache.hit") / $action.getText("cache.miss") / $action.getText("${expiredCountHeaderProperty}")</th>
                <th class="smalltext">$action.getText("cache.adjust.max.entries")</th>
            #end
            <th class="smalltext">$action.getText("cache.flush.entries")</th>
        </tr>
        #foreach($cacheStatistic in $cacheStatistics)
            #if ($action.showDistributions || $cacheStatistic.hasContents())
            <tr>
                <td title="$cacheStatistic.name">$cacheStatistic.niceName</td>
                <td align="center">${cacheStatistic.usagePercent}%</td>
                <td align="center" #if ($cacheStatistic.hitPercent != 0 && $cacheStatistic.hitPercent < 25) bgcolor="#FFDDDD"#end>${cacheStatistic.hitPercent}%</td>

                #if ($action.showDistributions)
                    <td align="center">$cacheStatistic.size / $cacheStatistic.maxSize</td>
                    <td align="center" title="$generalUtil.format($cacheStatistic.sizeInBytes) bytes">$cacheStatistic.formattedSizeInMegabytes</td>
                    <td align="center">$cacheStatistic.hitCount / $cacheStatistic.missCount / $cacheStatistic.expiredCount</td>
                    <td align="center">
                        <form method="POST" id="$cacheStatistic.name" action="adjustcachesize.action">
                            #form_xsrfToken()
                            <input name="cacheSize" size="5" type="text" value="$cacheStatistic.maxSize"/>
                            <input type="hidden" name="cacheName" value="$cacheStatistic.name" />
                            <input type="hidden" name="showDistributions" value="true" />
                            <input type="submit" value="$action.getText("save.name")"/>
                        </form>
                    </td>
                #end

                <td align="center">
                    <a id="flush-$cacheStatistic.name" href="$req.contextPath/admin/flushcache.action?cache=$cacheStatistic.name&showDistributions=$action.showDistributions&#url_xsrfToken()">$action.getText('flush.name')</a>
                </td>
            </tr>
            #end
        #end
        <tr>
            <td #if ($action.showDistributions) colspan="7" #else colspan="4" #end align="right">
                <a id="flush-all" href="$req.contextPath/admin/flushcache.action?showDistributions=$action.showDistributions&#url_xsrfToken()">$action.getText('flush.all')</a>
            </td>
        </tr>
    </table>
#end

#macro (sortLink $sortByLink $destination $label)
    #if ($sortBy == $sortByLink)
        <span class="sortedby">$label</span>
    #else
        <a href="$destination">$label</a>
    #end
#end

## Used with AJS.I18n.getText(key) in JavaScript
#macro (jsI18n $key)
    <input type="hidden" title="i18n.$key" value="$htmlUtil.htmlEncode($i18n.getText($key))">
#end

## Use this macro to request that a key-value pair be made available to AJS.Meta in JavaScript.
## This macro doesn't generate any markup in-place; it renders the pair when #renderMetadata is called in the header.
## Note that the 'Html' in $valHtml is used to avoid HTML-encoding the string.
#macro (putMetadata $key $valHtml)
    #set ($val = "$!valHtml")
    #if (!$webResourceManager.putMetadata($key, $val))
        <!-- putMetadata failed to add value for key "$key" so rendering metadata inline - see server debug log for details -->
        #renderMetadatum($key, $val)
    #end
#end

## This macro should be called once in the <head> element to render all key-value pairs needed by AJS.Meta.
## The metadata content will be escaped for HTML attributes only - JS/HTML/URL-encoding is up to calling JS.
#macro (renderMetadata)
    #set ($metadata = $webResourceManager.getMetadata())
    #foreach($key in $metadata.keySet())
        #renderMetadatum($key, $metadata.get($key))
    #end
#end

## Renders a single metadata key/value pair
#macro (renderMetadatum $key $val)
<meta name="ajs-$key" content="$htmlUtil.htmlEncode($val)">
#end

#macro (attr $name $value)
   #if($value) $name="$value" #end
#end

## Assistive macros
#macro (assistiveLegend $label)
    #scomponent("label='$label'" "template='assistive.vm'" "theme='aui'"
                "type=legend")
    #end
#end

#macro (assistiveSkipLink $label $value)
    #scomponent("label='$label'" "value='$value'" "template='assistive.vm'" "theme='aui'"
                "type=skip-link")
    #end
#end

#macro (assistiveLabel $label $value)
    #scomponent("label='$label'" "value='$value'" "template='assistive.vm'" "theme='aui'"
                "type=label")
    #end
#end

## Blank experience macros
#macro (blankExperience $type $hasCreatePermission $textKey $noPermissionTextKey $buttonTextKey $buttonLink $textParams $noPermissionTextParams)
    <div id="${type}BlankExperience" class="blank-experience-container blank-experience-$type">
        #if ($hasCreatePermission)
            <p>$i18n.getText($textKey, $textParams)</p>
            <a class="aui-style aui-button aui-button-primary" href="$req.contextPath$buttonLink">$i18n.getText($buttonTextKey)</a>
        #else
            <p>$i18n.getText($noPermissionTextKey, $noPermissionTextParams)</p>
        #end
    </div>
#end

#macro (pageByline $page $dateFormatter $renderStatic)
#* When we render the byline, there are 3 base scenarios that we handle:
    * Page was created but not modified
    * Page creator and last modifier are the same user
    * Page was created by one user and most recently modified by a different user
   The date string we use for each of these scenarios is either the friendly date format (the one used for comments)
   or the usual formatted date string if the last modification was more than 24 hours ago.
 *#
    #if ($page.isNew())
        #set ($dateLink = "$!req.contextPath/pages/viewpreviousversions.action?pageId=$page.id")
    #else
        #set ($dateLink = "$!req.contextPath/pages/diffpagesbyversion.action?pageId=$page.id&selectedPageVersions=$page.previousVersion&selectedPageVersions=$page.version")
    #end

    #set ($ariaLabelAuthor = "$i18n.getText('created.by') $page.creator.fullName")
    #set ($ariaLabelEditor = "$i18n.getText('last.modified.by') $page.lastModifier.fullName")

    #* Note: bunched up else statements are intentional, otherwise we get whitespace that messes up formatting ;) *#
    #if (!$renderStatic)
        #set ($authorWithHtml = "#if($page.creatorName) #userLink($page.creator, $ariaLabelAuthor)#else $i18n.getText('anonymous.name')#end")
        #set ($editorWithHtml = "#if($page.lastModifierName) #userLink($page.lastModifier, $ariaLabelEditor)#else $i18n.getText('anonymous.name')#end")
    #else
        #set ($authorWithHtml = "#if($page.creatorName) $page.creator.fullName#else $i18n.getText('anonymous.name')#end")
        #set ($editorWithHtml = "#if($page.lastModifierName) $page.lastModifier.fullName#else $i18n.getText('anonymous.name')#end")
    #end

    #set ($authorWithHtml = "<span class='author'>$authorWithHtml</span>")
    #set ($editorWithHtml = "<span class='editor'>$editorWithHtml</span>")

    #if ($generalUtil.isDateWithin24Hours($page.lastModificationDate) && !$renderStatic)
        #set ($i18nSuffix = ".ago")
        #set ($modifiedDate = $friendlyDateFormatterHelper.format($page.lastModificationDate))
    #else
        #set ($i18nSuffix = ".on")
        #set ($modifiedDate = $dateFormatter.format( $page.lastModificationDate ))
    #end

    #set ($title = $i18n.getText("view.page.show.changes"))
    #set ($dateAriaLabel = $i18n.getText("created.by.aria$i18nSuffix", $modifiedDate))
    #if (!$renderStatic)
        #set ($modifiedDate = "<a class='last-modified' aria-label='$dateAriaLabel' title='$title' href='$dateLink'>$modifiedDate</a>")
    #end

    #if ($page.isNew())
        $i18n.getText("created.by$i18nSuffix", [$authorWithHtml, $modifiedDate])
    #elseif ($page.creator == $page.lastModifier)
        $i18n.getText("created.and.modified.by$i18nSuffix", [$authorWithHtml, $modifiedDate])
    #else
        $i18n.getText("created.by.modified.by$i18nSuffix", [$authorWithHtml, $editorWithHtml, $modifiedDate])
    #end
#end

#macro (alertAnonymous)
    #if (!$action.authenticatedUser)
        #set ($isUserAuthenticated = false)
    #else
        #set ($isUserAuthenticated = true)
    #end

    $soyTemplateRendererHelper.getRenderedTemplateHtml("confluence.web.resources:shared-templates", "Confluence.Templates.Notifications.notLoggedIn.soy",
        {"isUserAuthenticated": $isUserAuthenticated, "isExternalUserManagementEnabled": $action.isExternalUserManagementEnabled(), "loginURL": $seraph.getLinkLoginURL($req)})
#end

#macro (confluenceServerPerformanceSpan)
    <span style="display:none;" id="confluence-server-performance">{"serverDuration": $generalUtil.getServerRenderTime($req).toMillis(), "requestCorrelationId": "$generalUtil.getRequestCorrelationId()"}</span>
#end

#macro (flushResponse)
    $generalUtil.flushResponse()
#end

#macro (httpStatsElapse $tag)
    $generalUtil.elapse($tag)
#end
