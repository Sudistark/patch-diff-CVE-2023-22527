package com.fasterxml.jackson.databind;

import com.fasterxml.jackson.databind.cfg.ConfigFeature;

public static enum MapperFeature implements ConfigFeature {
  USE_ANNOTATIONS(true),
  USE_GETTERS_AS_SETTERS(true),
  PROPAGATE_TRANSIENT_MARKER(false),
  AUTO_DETECT_CREATORS(true),
  AUTO_DETECT_FIELDS(true),
  AUTO_DETECT_GETTERS(true),
  AUTO_DETECT_IS_GETTERS(true),
  AUTO_DETECT_SETTERS(true),
  REQUIRE_SETTERS_FOR_GETTERS(false),
  ALLOW_FINAL_FIELDS_AS_MUTATORS(true),
  INFER_PROPERTY_MUTATORS(true),
  INFER_CREATOR_FROM_CONSTRUCTOR_PROPERTIES(true),
  ALLOW_VOID_VALUED_PROPERTIES(false),
  CAN_OVERRIDE_ACCESS_MODIFIERS(true),
  OVERRIDE_PUBLIC_ACCESS_MODIFIERS(true),
  USE_STATIC_TYPING(false),
  USE_BASE_TYPE_AS_DEFAULT_IMPL(false),
  INFER_BUILDER_TYPE_BINDINGS(true),
  REQUIRE_TYPE_ID_FOR_SUBTYPES(true),
  DEFAULT_VIEW_INCLUSION(true),
  SORT_PROPERTIES_ALPHABETICALLY(false),
  SORT_CREATOR_PROPERTIES_FIRST(true),
  ACCEPT_CASE_INSENSITIVE_PROPERTIES(false),
  ACCEPT_CASE_INSENSITIVE_ENUMS(false),
  ACCEPT_CASE_INSENSITIVE_VALUES(false),
  USE_WRAPPER_NAME_AS_PROPERTY_NAME(false),
  USE_STD_BEAN_NAMING(false),
  ALLOW_EXPLICIT_PROPERTY_RENAMING(false),
  ALLOW_IS_GETTERS_FOR_NON_BOOLEAN(false),
  ALLOW_COERCION_OF_SCALARS(true),
  IGNORE_DUPLICATE_MODULE_REGISTRATIONS(true),
  IGNORE_MERGE_FOR_UNMERGEABLE(true),
  BLOCK_UNSAFE_POLYMORPHIC_BASE_TYPES(false),
  APPLY_DEFAULT_VALUES(true);
  
  private final boolean _defaultState;
  
  private final long _mask;
  
  public static long collectLongDefaults() {
    flags = 0L;
    for (MapperFeature value : values()) {
      if (value.enabledByDefault())
        flags |= value.getLongMask(); 
    } 
    return flags;
  }
  
  MapperFeature(boolean defaultState) {
    this._defaultState = defaultState;
    this._mask = 1L << ordinal();
  }
  
  public boolean enabledByDefault() { return this._defaultState; }
  
  @Deprecated
  public int getMask() { return (int)this._mask; }
  
  public long getLongMask() { return this._mask; }
  
  @Deprecated
  public boolean enabledIn(int flags) { return ((flags & this._mask) != 0L); }
  
  public boolean enabledIn(long flags) { return ((flags & this._mask) != 0L); }
}
