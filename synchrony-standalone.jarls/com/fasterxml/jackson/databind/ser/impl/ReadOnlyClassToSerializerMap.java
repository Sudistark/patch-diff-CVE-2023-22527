package com.fasterxml.jackson.databind.ser.impl;

import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.TypeKey;

public final class ReadOnlyClassToSerializerMap {
  private final Bucket[] _buckets;
  
  private final int _size;
  
  private final int _mask;
  
  public ReadOnlyClassToSerializerMap(LRUMap<TypeKey, JsonSerializer<Object>> src) {
    this._size = findSize(src.size());
    this._mask = this._size - 1;
    Bucket[] arrayOfBucket = new Bucket[this._size];
    src.contents((key, value) -> {
          int index = key.hashCode() & this._mask;
          buckets[index] = new Bucket(buckets[index], key, value);
        });
    this._buckets = arrayOfBucket;
  }
  
  private static final int findSize(int size) {
    int needed = (size <= 64) ? (size + size) : (size + (size >> 2));
    int result = 8;
    while (result < needed)
      result += result; 
    return result;
  }
  
  public static ReadOnlyClassToSerializerMap from(LRUMap<TypeKey, JsonSerializer<Object>> src) { return new ReadOnlyClassToSerializerMap(src); }
  
  public int size() { return this._size; }
  
  public JsonSerializer<Object> typedValueSerializer(JavaType type) {
    Bucket bucket = this._buckets[TypeKey.typedHash(type) & this._mask];
    if (bucket == null)
      return null; 
    if (bucket.matchesTyped(type))
      return bucket.value; 
    while ((bucket = bucket.next) != null) {
      if (bucket.matchesTyped(type))
        return bucket.value; 
    } 
    return null;
  }
  
  public JsonSerializer<Object> typedValueSerializer(Class<?> type) {
    Bucket bucket = this._buckets[TypeKey.typedHash(type) & this._mask];
    if (bucket == null)
      return null; 
    if (bucket.matchesTyped(type))
      return bucket.value; 
    while ((bucket = bucket.next) != null) {
      if (bucket.matchesTyped(type))
        return bucket.value; 
    } 
    return null;
  }
  
  public JsonSerializer<Object> untypedValueSerializer(JavaType type) {
    Bucket bucket = this._buckets[TypeKey.untypedHash(type) & this._mask];
    if (bucket == null)
      return null; 
    if (bucket.matchesUntyped(type))
      return bucket.value; 
    while ((bucket = bucket.next) != null) {
      if (bucket.matchesUntyped(type))
        return bucket.value; 
    } 
    return null;
  }
  
  public JsonSerializer<Object> untypedValueSerializer(Class<?> type) {
    Bucket bucket = this._buckets[TypeKey.untypedHash(type) & this._mask];
    if (bucket == null)
      return null; 
    if (bucket.matchesUntyped(type))
      return bucket.value; 
    while ((bucket = bucket.next) != null) {
      if (bucket.matchesUntyped(type))
        return bucket.value; 
    } 
    return null;
  }
}
