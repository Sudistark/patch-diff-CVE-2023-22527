package com.fasterxml.jackson.databind.ser.impl;

import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.SerializerProvider;

public abstract class PropertySerializerMap {
  protected final boolean _resetWhenFull;
  
  protected PropertySerializerMap(boolean resetWhenFull) { this._resetWhenFull = resetWhenFull; }
  
  protected PropertySerializerMap(PropertySerializerMap base) { this._resetWhenFull = base._resetWhenFull; }
  
  public abstract JsonSerializer<Object> serializerFor(Class<?> paramClass);
  
  public final SerializerAndMapResult findAndAddPrimarySerializer(Class<?> type, SerializerProvider provider, BeanProperty property) throws JsonMappingException {
    JsonSerializer<Object> serializer = provider.findPrimaryPropertySerializer(type, property);
    return new SerializerAndMapResult(serializer, newWith(type, serializer));
  }
  
  public final SerializerAndMapResult findAndAddPrimarySerializer(JavaType type, SerializerProvider provider, BeanProperty property) throws JsonMappingException {
    JsonSerializer<Object> serializer = provider.findPrimaryPropertySerializer(type, property);
    return new SerializerAndMapResult(serializer, newWith(type.getRawClass(), serializer));
  }
  
  public final SerializerAndMapResult findAndAddSecondarySerializer(Class<?> type, SerializerProvider provider, BeanProperty property) throws JsonMappingException {
    JsonSerializer<Object> serializer = provider.findContentValueSerializer(type, property);
    return new SerializerAndMapResult(serializer, newWith(type, serializer));
  }
  
  public final SerializerAndMapResult findAndAddSecondarySerializer(JavaType type, SerializerProvider provider, BeanProperty property) throws JsonMappingException {
    JsonSerializer<Object> serializer = provider.findContentValueSerializer(type, property);
    return new SerializerAndMapResult(serializer, newWith(type.getRawClass(), serializer));
  }
  
  public final SerializerAndMapResult findAndAddRootValueSerializer(Class<?> type, SerializerProvider provider) throws JsonMappingException {
    JsonSerializer<Object> serializer = provider.findTypedValueSerializer(type, false, null);
    return new SerializerAndMapResult(serializer, newWith(type, serializer));
  }
  
  public final SerializerAndMapResult findAndAddRootValueSerializer(JavaType type, SerializerProvider provider) throws JsonMappingException {
    JsonSerializer<Object> serializer = provider.findTypedValueSerializer(type, false, null);
    return new SerializerAndMapResult(serializer, newWith(type.getRawClass(), serializer));
  }
  
  public final SerializerAndMapResult findAndAddKeySerializer(Class<?> type, SerializerProvider provider, BeanProperty property) throws JsonMappingException {
    JsonSerializer<Object> serializer = provider.findKeySerializer(type, property);
    return new SerializerAndMapResult(serializer, newWith(type, serializer));
  }
  
  public final SerializerAndMapResult addSerializer(Class<?> type, JsonSerializer<Object> serializer) { return new SerializerAndMapResult(serializer, newWith(type, serializer)); }
  
  public final SerializerAndMapResult addSerializer(JavaType type, JsonSerializer<Object> serializer) { return new SerializerAndMapResult(serializer, newWith(type.getRawClass(), serializer)); }
  
  public abstract PropertySerializerMap newWith(Class<?> paramClass, JsonSerializer<Object> paramJsonSerializer);
  
  public static PropertySerializerMap emptyForProperties() { return Empty.FOR_PROPERTIES; }
  
  public static PropertySerializerMap emptyForRootValues() { return Empty.FOR_ROOT_VALUES; }
}
