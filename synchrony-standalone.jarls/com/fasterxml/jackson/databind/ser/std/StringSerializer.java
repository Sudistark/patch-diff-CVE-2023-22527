package com.fasterxml.jackson.databind.ser.std;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import java.io.IOException;
import java.lang.reflect.Type;

@JacksonStdImpl
public final class StringSerializer extends StdScalarSerializer<Object> {
  private static final long serialVersionUID = 1L;
  
  public StringSerializer() { super(String.class, false); }
  
  public boolean isEmpty(SerializerProvider prov, Object value) {
    String str = (String)value;
    return str.isEmpty();
  }
  
  public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException { gen.writeString((String)value); }
  
  public final void serializeWithType(Object value, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer) throws IOException { gen.writeString((String)value); }
  
  @Deprecated
  public JsonNode getSchema(SerializerProvider provider, Type typeHint) { return createSchemaNode("string", true); }
  
  public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException { visitStringFormat(visitor, typeHint); }
}
