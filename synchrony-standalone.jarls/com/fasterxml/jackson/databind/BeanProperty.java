package com.fasterxml.jackson.databind;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;
import com.fasterxml.jackson.databind.util.Named;
import java.util.List;

public interface BeanProperty extends Named {
  public static final JsonFormat.Value EMPTY_FORMAT = new JsonFormat.Value();
  
  public static final JsonInclude.Value EMPTY_INCLUDE = JsonInclude.Value.empty();
  
  String getName();
  
  PropertyName getFullName();
  
  JavaType getType();
  
  PropertyName getWrapperName();
  
  PropertyMetadata getMetadata();
  
  boolean isRequired();
  
  boolean isVirtual();
  
  <A extends java.lang.annotation.Annotation> A getAnnotation(Class<A> paramClass);
  
  <A extends java.lang.annotation.Annotation> A getContextAnnotation(Class<A> paramClass);
  
  AnnotatedMember getMember();
  
  @Deprecated
  JsonFormat.Value findFormatOverrides(AnnotationIntrospector paramAnnotationIntrospector);
  
  JsonFormat.Value findPropertyFormat(MapperConfig<?> paramMapperConfig, Class<?> paramClass);
  
  JsonInclude.Value findPropertyInclusion(MapperConfig<?> paramMapperConfig, Class<?> paramClass);
  
  List<PropertyName> findAliases(MapperConfig<?> paramMapperConfig);
  
  void depositSchemaProperty(JsonObjectFormatVisitor paramJsonObjectFormatVisitor, SerializerProvider paramSerializerProvider) throws JsonMappingException;
}
