package com.fasterxml.jackson.databind.deser;

import com.fasterxml.jackson.core.format.MatchStrength;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectReader;
import java.io.IOException;
import java.io.InputStream;
import java.util.Collection;

public class DataFormatReaders {
  public static final int DEFAULT_MAX_INPUT_LOOKAHEAD = 64;
  
  protected final ObjectReader[] _readers;
  
  protected final MatchStrength _optimalMatch;
  
  protected final MatchStrength _minimalMatch;
  
  protected final int _maxInputLookahead;
  
  public DataFormatReaders(ObjectReader... detectors) { this(detectors, MatchStrength.SOLID_MATCH, MatchStrength.WEAK_MATCH, 64); }
  
  public DataFormatReaders(Collection<ObjectReader> detectors) { this((ObjectReader[])detectors.toArray(new ObjectReader[detectors.size()])); }
  
  private DataFormatReaders(ObjectReader[] detectors, MatchStrength optMatch, MatchStrength minMatch, int maxInputLookahead) {
    this._readers = detectors;
    this._optimalMatch = optMatch;
    this._minimalMatch = minMatch;
    this._maxInputLookahead = maxInputLookahead;
  }
  
  public DataFormatReaders withOptimalMatch(MatchStrength optMatch) {
    if (optMatch == this._optimalMatch)
      return this; 
    return new DataFormatReaders(this._readers, optMatch, this._minimalMatch, this._maxInputLookahead);
  }
  
  public DataFormatReaders withMinimalMatch(MatchStrength minMatch) {
    if (minMatch == this._minimalMatch)
      return this; 
    return new DataFormatReaders(this._readers, this._optimalMatch, minMatch, this._maxInputLookahead);
  }
  
  public DataFormatReaders with(ObjectReader[] readers) { return new DataFormatReaders(readers, this._optimalMatch, this._minimalMatch, this._maxInputLookahead); }
  
  public DataFormatReaders withMaxInputLookahead(int lookaheadBytes) {
    if (lookaheadBytes == this._maxInputLookahead)
      return this; 
    return new DataFormatReaders(this._readers, this._optimalMatch, this._minimalMatch, lookaheadBytes);
  }
  
  public DataFormatReaders with(DeserializationConfig config) {
    int len = this._readers.length;
    ObjectReader[] r = new ObjectReader[len];
    for (int i = 0; i < len; i++)
      r[i] = this._readers[i].with(config); 
    return new DataFormatReaders(r, this._optimalMatch, this._minimalMatch, this._maxInputLookahead);
  }
  
  public DataFormatReaders withType(JavaType type) {
    int len = this._readers.length;
    ObjectReader[] r = new ObjectReader[len];
    for (int i = 0; i < len; i++)
      r[i] = this._readers[i].forType(type); 
    return new DataFormatReaders(r, this._optimalMatch, this._minimalMatch, this._maxInputLookahead);
  }
  
  public Match findFormat(InputStream in) throws IOException { return _findFormat(new AccessorForReader(in, new byte[this._maxInputLookahead])); }
  
  public Match findFormat(byte[] fullInputData) throws IOException { return _findFormat(new AccessorForReader(fullInputData)); }
  
  public Match findFormat(byte[] fullInputData, int offset, int len) throws IOException { return _findFormat(new AccessorForReader(fullInputData, offset, len)); }
  
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append('[');
    int len = this._readers.length;
    if (len > 0) {
      sb.append(this._readers[0].getFactory().getFormatName());
      for (int i = 1; i < len; i++) {
        sb.append(", ");
        sb.append(this._readers[i].getFactory().getFormatName());
      } 
    } 
    sb.append(']');
    return sb.toString();
  }
  
  private Match _findFormat(AccessorForReader acc) throws IOException {
    ObjectReader bestMatch = null;
    MatchStrength bestMatchStrength = null;
    for (ObjectReader f : this._readers) {
      acc.reset();
      MatchStrength strength = f.getFactory().hasFormat(acc);
      if (strength != null && strength.ordinal() >= this._minimalMatch.ordinal())
        if (bestMatch == null || 
          bestMatchStrength.ordinal() < strength.ordinal()) {
          bestMatch = f;
          bestMatchStrength = strength;
          if (strength.ordinal() >= this._optimalMatch.ordinal())
            break; 
        }  
    } 
    return acc.createMatcher(bestMatch, bestMatchStrength);
  }
}
