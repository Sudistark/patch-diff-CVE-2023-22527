package com.fasterxml.jackson.databind.deser.impl;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.deser.NullValueProvider;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.UnresolvedForwardReference;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import java.io.IOException;

public class ObjectIdReferenceProperty extends SettableBeanProperty {
  private static final long serialVersionUID = 1L;
  
  private final SettableBeanProperty _forward;
  
  public ObjectIdReferenceProperty(SettableBeanProperty forward, ObjectIdInfo objectIdInfo) {
    super(forward);
    this._forward = forward;
    this._objectIdInfo = objectIdInfo;
  }
  
  public ObjectIdReferenceProperty(ObjectIdReferenceProperty src, JsonDeserializer<?> deser, NullValueProvider nva) {
    super(src, deser, nva);
    this._forward = src._forward;
    this._objectIdInfo = src._objectIdInfo;
  }
  
  public ObjectIdReferenceProperty(ObjectIdReferenceProperty src, PropertyName newName) {
    super(src, newName);
    this._forward = src._forward;
    this._objectIdInfo = src._objectIdInfo;
  }
  
  public SettableBeanProperty withName(PropertyName newName) { return new ObjectIdReferenceProperty(this, newName); }
  
  public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser) {
    if (this._valueDeserializer == deser)
      return this; 
    JsonDeserializer<?> jsonDeserializer = (this._valueDeserializer == this._nullProvider) ? deser : this._nullProvider;
    return new ObjectIdReferenceProperty(this, deser, jsonDeserializer);
  }
  
  public SettableBeanProperty withNullProvider(NullValueProvider nva) { return new ObjectIdReferenceProperty(this, this._valueDeserializer, nva); }
  
  public void fixAccess(DeserializationConfig config) {
    if (this._forward != null)
      this._forward.fixAccess(config); 
  }
  
  public <A extends java.lang.annotation.Annotation> A getAnnotation(Class<A> acls) { return (A)this._forward.getAnnotation(acls); }
  
  public AnnotatedMember getMember() { return this._forward.getMember(); }
  
  public int getCreatorIndex() { return this._forward.getCreatorIndex(); }
  
  public void deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException { deserializeSetAndReturn(p, ctxt, instance); }
  
  public Object deserializeSetAndReturn(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException {
    try {
      return setAndReturn(instance, deserialize(p, ctxt));
    } catch (UnresolvedForwardReference reference) {
      boolean usingIdentityInfo = (this._objectIdInfo != null || this._valueDeserializer.getObjectIdReader() != null);
      if (!usingIdentityInfo)
        throw JsonMappingException.from(p, "Unresolved forward reference but no identity info", reference); 
      reference.getRoid().appendReferring(new PropertyReferring(this, reference, this._type.getRawClass(), instance));
      return null;
    } 
  }
  
  public void set(Object instance, Object value) throws IOException { this._forward.set(instance, value); }
  
  public Object setAndReturn(Object instance, Object value) throws IOException { return this._forward.setAndReturn(instance, value); }
}
