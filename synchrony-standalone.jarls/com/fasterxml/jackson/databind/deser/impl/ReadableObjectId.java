package com.fasterxml.jackson.databind.deser.impl;

import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.databind.DeserializationContext;
import java.io.IOException;
import java.util.Collections;
import java.util.Iterator;
import java.util.LinkedList;

public class ReadableObjectId {
  protected Object _item;
  
  protected final ObjectIdGenerator.IdKey _key;
  
  protected LinkedList<Referring> _referringProperties;
  
  protected ObjectIdResolver _resolver;
  
  public ReadableObjectId(ObjectIdGenerator.IdKey key) { this._key = key; }
  
  public void setResolver(ObjectIdResolver resolver) { this._resolver = resolver; }
  
  public ObjectIdGenerator.IdKey getKey() { return this._key; }
  
  public void appendReferring(Referring currentReferring) {
    if (this._referringProperties == null)
      this._referringProperties = new LinkedList(); 
    this._referringProperties.add(currentReferring);
  }
  
  public void bindItem(Object ob) throws IOException {
    this._resolver.bindItem(this._key, ob);
    this._item = ob;
    Object id = this._key.key;
    if (this._referringProperties != null) {
      Iterator<Referring> it = this._referringProperties.iterator();
      this._referringProperties = null;
      while (it.hasNext())
        ((Referring)it.next()).handleResolvedForwardReference(id, ob); 
    } 
  }
  
  public Object resolve() { return this._item = this._resolver.resolveId(this._key); }
  
  public boolean hasReferringProperties() { return (this._referringProperties != null && !this._referringProperties.isEmpty()); }
  
  public Iterator<Referring> referringProperties() {
    if (this._referringProperties == null)
      return Collections.emptyList().iterator(); 
    return this._referringProperties.iterator();
  }
  
  public boolean tryToResolveUnresolved(DeserializationContext ctxt) { return false; }
  
  public ObjectIdResolver getResolver() { return this._resolver; }
  
  public String toString() { return String.valueOf(this._key); }
}
