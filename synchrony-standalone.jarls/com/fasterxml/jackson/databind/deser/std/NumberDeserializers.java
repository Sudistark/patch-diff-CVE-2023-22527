package com.fasterxml.jackson.databind.deser.std;

import com.fasterxml.jackson.databind.JsonDeserializer;
import java.util.HashSet;

public class NumberDeserializers {
  private static final HashSet<String> _classNames = new HashSet();
  
  static  {
    numberTypes = new Class[] { 
        Boolean.class, Byte.class, Short.class, Character.class, Integer.class, Long.class, Float.class, Double.class, Number.class, java.math.BigDecimal.class, 
        java.math.BigInteger.class };
    for (Class<?> cls : numberTypes)
      _classNames.add(cls.getName()); 
  }
  
  public static JsonDeserializer<?> find(Class<?> rawType, String clsName) {
    if (rawType.isPrimitive()) {
      if (rawType == int.class)
        return IntegerDeserializer.primitiveInstance; 
      if (rawType == boolean.class)
        return BooleanDeserializer.primitiveInstance; 
      if (rawType == long.class)
        return LongDeserializer.primitiveInstance; 
      if (rawType == double.class)
        return DoubleDeserializer.primitiveInstance; 
      if (rawType == char.class)
        return CharacterDeserializer.primitiveInstance; 
      if (rawType == byte.class)
        return ByteDeserializer.primitiveInstance; 
      if (rawType == short.class)
        return ShortDeserializer.primitiveInstance; 
      if (rawType == float.class)
        return FloatDeserializer.primitiveInstance; 
      if (rawType == void.class)
        return NullifyingDeserializer.instance; 
    } else if (_classNames.contains(clsName)) {
      if (rawType == Integer.class)
        return IntegerDeserializer.wrapperInstance; 
      if (rawType == Boolean.class)
        return BooleanDeserializer.wrapperInstance; 
      if (rawType == Long.class)
        return LongDeserializer.wrapperInstance; 
      if (rawType == Double.class)
        return DoubleDeserializer.wrapperInstance; 
      if (rawType == Character.class)
        return CharacterDeserializer.wrapperInstance; 
      if (rawType == Byte.class)
        return ByteDeserializer.wrapperInstance; 
      if (rawType == Short.class)
        return ShortDeserializer.wrapperInstance; 
      if (rawType == Float.class)
        return FloatDeserializer.wrapperInstance; 
      if (rawType == Number.class)
        return NumberDeserializer.instance; 
      if (rawType == java.math.BigDecimal.class)
        return BigDecimalDeserializer.instance; 
      if (rawType == java.math.BigInteger.class)
        return BigIntegerDeserializer.instance; 
    } else {
      return null;
    } 
    throw new IllegalArgumentException("Internal error: can't find deserializer for " + rawType.getName());
  }
}
