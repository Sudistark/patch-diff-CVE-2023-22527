package com.fasterxml.jackson.databind.deser.std;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.cfg.CoercionAction;
import com.fasterxml.jackson.databind.cfg.CoercionInputShape;
import com.fasterxml.jackson.databind.type.LogicalType;
import java.io.IOException;

public abstract class FromStringDeserializer<T> extends StdScalarDeserializer<T> {
  public static Class<?>[] types() { return new Class[] { 
        java.io.File.class, java.net.URL.class, java.net.URI.class, Class.class, com.fasterxml.jackson.databind.JavaType.class, java.util.Currency.class, java.util.regex.Pattern.class, java.util.Locale.class, java.nio.charset.Charset.class, java.util.TimeZone.class, 
        java.net.InetAddress.class, java.net.InetSocketAddress.class, StringBuilder.class, StringBuffer.class }; }
  
  protected FromStringDeserializer(Class<?> vc) { super(vc); }
  
  public static FromStringDeserializer<?> findDeserializer(Class<?> rawType) {
    int kind = 0;
    if (rawType == java.io.File.class) {
      kind = 1;
    } else if (rawType == java.net.URL.class) {
      kind = 2;
    } else if (rawType == java.net.URI.class) {
      kind = 3;
    } else if (rawType == Class.class) {
      kind = 4;
    } else if (rawType == com.fasterxml.jackson.databind.JavaType.class) {
      kind = 5;
    } else if (rawType == java.util.Currency.class) {
      kind = 6;
    } else if (rawType == java.util.regex.Pattern.class) {
      kind = 7;
    } else if (rawType == java.util.Locale.class) {
      kind = 8;
    } else if (rawType == java.nio.charset.Charset.class) {
      kind = 9;
    } else if (rawType == java.util.TimeZone.class) {
      kind = 10;
    } else if (rawType == java.net.InetAddress.class) {
      kind = 11;
    } else if (rawType == java.net.InetSocketAddress.class) {
      kind = 12;
    } else {
      if (rawType == StringBuilder.class)
        return new StringBuilderDeserializer(); 
      if (rawType == StringBuffer.class)
        return new StringBufferDeserializer(); 
      return null;
    } 
    return new Std(rawType, kind);
  }
  
  public LogicalType logicalType() { return LogicalType.OtherScalar; }
  
  public T deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {
    String text = p.getValueAsString();
    if (text == null) {
      JsonToken t = p.currentToken();
      if (t != JsonToken.START_OBJECT)
        return (T)_deserializeFromOther(p, ctxt, t); 
      text = ctxt.extractScalarFromObject(p, this, this._valueClass);
    } 
    if (text.isEmpty())
      return (T)_deserializeFromEmptyString(ctxt); 
    if (_shouldTrim()) {
      String old = text;
      text = text.trim();
      if (text != old && 
        text.isEmpty())
        return (T)_deserializeFromEmptyString(ctxt); 
    } 
    Exception cause = null;
    try {
      return (T)_deserialize(text, ctxt);
    } catch (IllegalArgumentException|java.net.MalformedURLException e) {
      cause = e;
      String msg = "not a valid textual representation";
      String m2 = cause.getMessage();
      if (m2 != null)
        msg = msg + ", problem: " + m2; 
      throw ctxt.weirdStringException(text, this._valueClass, msg)
        .withCause(cause);
    } 
  }
  
  protected abstract T _deserialize(String paramString, DeserializationContext paramDeserializationContext) throws IOException;
  
  protected boolean _shouldTrim() { return true; }
  
  protected Object _deserializeFromOther(JsonParser p, DeserializationContext ctxt, JsonToken t) throws IOException {
    if (t == JsonToken.START_ARRAY)
      return _deserializeFromArray(p, ctxt); 
    if (t == JsonToken.VALUE_EMBEDDED_OBJECT) {
      Object ob = p.getEmbeddedObject();
      if (ob == null)
        return null; 
      if (this._valueClass.isAssignableFrom(ob.getClass()))
        return ob; 
      return _deserializeEmbedded(ob, ctxt);
    } 
    return ctxt.handleUnexpectedToken(this._valueClass, p);
  }
  
  protected T _deserializeEmbedded(Object ob, DeserializationContext ctxt) throws IOException {
    ctxt.reportInputMismatch(this, "Don't know how to convert embedded Object of type %s into %s", new Object[] { ob
          
          .getClass().getName(), this._valueClass.getName() });
    return null;
  }
  
  @Deprecated
  protected final T _deserializeFromEmptyString() throws IOException { return null; }
  
  protected Object _deserializeFromEmptyString(DeserializationContext ctxt) throws IOException {
    CoercionAction act = ctxt.findCoercionAction(logicalType(), this._valueClass, CoercionInputShape.EmptyString);
    if (act == CoercionAction.Fail)
      ctxt.reportInputMismatch(this, "Cannot coerce empty String (\"\") to %s (but could if enabling coercion using `CoercionConfig`)", new Object[] { _coercedTypeDesc() }); 
    if (act == CoercionAction.AsNull)
      return getNullValue(ctxt); 
    if (act == CoercionAction.AsEmpty)
      return getEmptyValue(ctxt); 
    return _deserializeFromEmptyStringDefault(ctxt);
  }
  
  protected Object _deserializeFromEmptyStringDefault(DeserializationContext ctxt) throws IOException { return getNullValue(ctxt); }
}
