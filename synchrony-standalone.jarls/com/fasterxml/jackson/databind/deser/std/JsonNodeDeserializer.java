package com.fasterxml.jackson.databind.deser.std;

import com.fasterxml.jackson.core.JacksonException;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.type.LogicalType;
import java.io.IOException;

public class JsonNodeDeserializer extends BaseNodeDeserializer<JsonNode> {
  private static final JsonNodeDeserializer instance = new JsonNodeDeserializer();
  
  protected JsonNodeDeserializer() { super(JsonNode.class, null); }
  
  protected JsonNodeDeserializer(JsonNodeDeserializer base, boolean mergeArrays, boolean mergeObjects) { super(base, mergeArrays, mergeObjects); }
  
  protected JsonDeserializer<?> _createWithMerge(boolean mergeArrays, boolean mergeObjects) { return new JsonNodeDeserializer(this, mergeArrays, mergeObjects); }
  
  public static JsonDeserializer<? extends JsonNode> getDeserializer(Class<?> nodeClass) {
    if (nodeClass == com.fasterxml.jackson.databind.node.ObjectNode.class)
      return ObjectDeserializer.getInstance(); 
    if (nodeClass == com.fasterxml.jackson.databind.node.ArrayNode.class)
      return ArrayDeserializer.getInstance(); 
    return instance;
  }
  
  public JsonNode getNullValue(DeserializationContext ctxt) { return ctxt.getNodeFactory().nullNode(); }
  
  public Object getAbsentValue(DeserializationContext ctxt) { return null; }
  
  public JsonNode deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {
    BaseNodeDeserializer.ContainerStack stack = new BaseNodeDeserializer.ContainerStack();
    JsonNodeFactory nodeF = ctxt.getNodeFactory();
    switch (p.currentTokenId()) {
      case 1:
        return _deserializeContainerNoRecursion(p, ctxt, nodeF, stack, nodeF.objectNode());
      case 2:
        return nodeF.objectNode();
      case 3:
        return _deserializeContainerNoRecursion(p, ctxt, nodeF, stack, nodeF.arrayNode());
      case 5:
        return _deserializeObjectAtName(p, ctxt, nodeF, stack);
    } 
    return _deserializeAnyScalar(p, ctxt);
  }
  
  public Boolean supportsUpdate(DeserializationConfig config) { return this._supportsUpdates; }
}
