package com.fasterxml.jackson.dataformat.smile;

import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonGenerationException;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonStreamContext;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.StreamWriteCapability;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.NumberInput;
import com.fasterxml.jackson.core.json.DupDetector;
import com.fasterxml.jackson.core.util.JacksonFeatureSet;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.lang.ref.SoftReference;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Arrays;

public class SmileGenerator extends GeneratorBase {
  private static final int MIN_BUFFER_LENGTH = 770;
  
  protected static final byte TOKEN_BYTE_LONG_STRING_ASCII = -32;
  
  protected static final byte TOKEN_BYTE_INT_32 = 36;
  
  protected static final byte TOKEN_BYTE_INT_64 = 37;
  
  protected static final byte TOKEN_BYTE_BIG_INTEGER = 38;
  
  protected static final byte TOKEN_BYTE_FLOAT_32 = 40;
  
  protected static final byte TOKEN_BYTE_FLOAT_64 = 41;
  
  protected static final byte TOKEN_BYTE_BIG_DECIMAL = 42;
  
  protected static final long MIN_INT_AS_LONG = -2147483648L;
  
  protected static final long MAX_INT_AS_LONG = 2147483647L;
  
  protected static final int REPLACEMENT_CHAR = 65533;
  
  protected final IOContext _ioContext;
  
  protected final OutputStream _out;
  
  protected int _formatFeatures;
  
  protected final SmileBufferRecycler<SharedStringNode> _smileBufferRecycler;
  
  protected SmileWriteContext _streamWriteContext;
  
  protected byte[] _outputBuffer;
  
  protected int _outputTail = 0;
  
  protected final int _outputEnd;
  
  protected int _bytesWritten;
  
  protected SharedStringNode[] _seenNames;
  
  protected int _seenNameCount;
  
  protected SharedStringNode[] _seenStringValues;
  
  protected int _seenStringValueCount;
  
  protected boolean _bufferRecyclable;
  
  protected static final ThreadLocal<SoftReference<SmileBufferRecycler<SharedStringNode>>> _smileRecyclerRef = new ThreadLocal();
  
  public SmileGenerator(IOContext ctxt, int stdFeatures, int smileFeatures, ObjectCodec codec, OutputStream out) {
    super(stdFeatures, codec, null);
    DupDetector dups = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION.enabledIn(stdFeatures) ? DupDetector.rootDetector(this) : null;
    this._streamWriteContext = SmileWriteContext.createRootContext(dups);
    this._formatFeatures = smileFeatures;
    this._ioContext = ctxt;
    this._smileBufferRecycler = _smileBufferRecycler();
    this._out = out;
    this._bufferRecyclable = true;
    this._outputBuffer = ctxt.allocWriteEncodingBuffer();
    this._outputEnd = this._outputBuffer.length;
    if (this._outputEnd < 770)
      throw new IllegalStateException(String.format("Internal encoding buffer length (%d) too short, must be at least %d", new Object[] { Integer.valueOf(this._outputEnd), Integer.valueOf(770) })); 
    if (!Feature.CHECK_SHARED_NAMES.enabledIn(smileFeatures)) {
      this._seenNames = null;
      this._seenNameCount = -1;
    } else {
      this._seenNames = (SharedStringNode[])this._smileBufferRecycler.allocSeenNamesBuffer();
      if (this._seenNames == null)
        this._seenNames = new SharedStringNode[64]; 
      this._seenNameCount = 0;
    } 
    if (!Feature.CHECK_SHARED_STRING_VALUES.enabledIn(smileFeatures)) {
      this._seenStringValues = null;
      this._seenStringValueCount = -1;
    } else {
      this._seenStringValues = (SharedStringNode[])this._smileBufferRecycler.allocSeenStringValuesBuffer();
      if (this._seenStringValues == null)
        this._seenStringValues = new SharedStringNode[64]; 
      this._seenStringValueCount = 0;
    } 
  }
  
  public SmileGenerator(IOContext ctxt, int stdFeatures, int smileFeatures, ObjectCodec codec, OutputStream out, byte[] outputBuffer, int offset, boolean bufferRecyclable) {
    super(stdFeatures, codec, null);
    DupDetector dups = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION.enabledIn(stdFeatures) ? DupDetector.rootDetector(this) : null;
    this._streamWriteContext = SmileWriteContext.createRootContext(dups);
    this._formatFeatures = smileFeatures;
    this._ioContext = ctxt;
    this._smileBufferRecycler = _smileBufferRecycler();
    this._out = out;
    this._bufferRecyclable = bufferRecyclable;
    this._outputTail = offset;
    this._outputBuffer = outputBuffer;
    this._outputEnd = this._outputBuffer.length;
    if (this._outputEnd < 770)
      throw new IllegalStateException(String.format("Internal encoding buffer length (%d) too short, must be at least %d", new Object[] { Integer.valueOf(this._outputEnd), Integer.valueOf(770) })); 
    if (!Feature.CHECK_SHARED_NAMES.enabledIn(smileFeatures)) {
      this._seenNames = null;
      this._seenNameCount = -1;
    } else {
      this._seenNames = (SharedStringNode[])this._smileBufferRecycler.allocSeenNamesBuffer();
      if (this._seenNames == null)
        this._seenNames = new SharedStringNode[64]; 
      this._seenNameCount = 0;
    } 
    if (!Feature.CHECK_SHARED_STRING_VALUES.enabledIn(smileFeatures)) {
      this._seenStringValues = null;
      this._seenStringValueCount = -1;
    } else {
      this._seenStringValues = (SharedStringNode[])this._smileBufferRecycler.allocSeenStringValuesBuffer();
      if (this._seenStringValues == null)
        this._seenStringValues = new SharedStringNode[64]; 
      this._seenStringValueCount = 0;
    } 
  }
  
  public void writeHeader() throws IOException {
    int last = 0;
    if (Feature.CHECK_SHARED_NAMES.enabledIn(this._formatFeatures))
      last |= 0x1; 
    if (Feature.CHECK_SHARED_STRING_VALUES.enabledIn(this._formatFeatures))
      last |= 0x2; 
    if (!Feature.ENCODE_BINARY_AS_7BIT.enabledIn(this._formatFeatures))
      last |= 0x4; 
    _writeBytes((byte)58, (byte)41, (byte)10, (byte)last);
  }
  
  protected static final SmileBufferRecycler<SharedStringNode> _smileBufferRecycler() {
    ref = (SoftReference)_smileRecyclerRef.get();
    SmileBufferRecycler<SharedStringNode> br = (ref == null) ? null : (SmileBufferRecycler)ref.get();
    if (br == null) {
      br = new SmileBufferRecycler<SharedStringNode>();
      _smileRecyclerRef.set(new SoftReference(br));
    } 
    return br;
  }
  
  public Version version() { return PackageVersion.VERSION; }
  
  public boolean canWriteBinaryNatively() { return true; }
  
  public JacksonFeatureSet<StreamWriteCapability> getWriteCapabilities() { return DEFAULT_BINARY_WRITE_CAPABILITIES; }
  
  public JsonGenerator useDefaultPrettyPrinter() { return this; }
  
  public JsonGenerator setPrettyPrinter(PrettyPrinter pp) { return this; }
  
  public Object getOutputTarget() { return this._out; }
  
  public int getOutputBuffered() { return this._outputTail; }
  
  public int getFormatFeatures() { return this._formatFeatures; }
  
  public JsonGenerator overrideFormatFeatures(int values, int mask) {
    this._formatFeatures = this._formatFeatures & (mask ^ 0xFFFFFFFF) | values & mask;
    return this;
  }
  
  public Object currentValue() { return this._streamWriteContext.getCurrentValue(); }
  
  public Object getCurrentValue() { return this._streamWriteContext.getCurrentValue(); }
  
  public void assignCurrentValue(Object v) { this._streamWriteContext.setCurrentValue(v); }
  
  public void setCurrentValue(Object v) { this._streamWriteContext.setCurrentValue(v); }
  
  public JsonStreamContext getOutputContext() { return this._streamWriteContext; }
  
  public final void writeFieldName(String name) throws IOException {
    if (!this._streamWriteContext.writeFieldName(name))
      _reportError("Can not write a field name, expecting a value"); 
    _writeFieldName(name);
  }
  
  public final void writeFieldName(SerializableString name) throws IOException {
    if (!this._streamWriteContext.writeFieldName(name.getValue()))
      _reportError("Can not write a field name, expecting a value"); 
    _writeFieldName(name);
  }
  
  public SmileGenerator enable(Feature f) {
    this._formatFeatures |= f.getMask();
    return this;
  }
  
  public SmileGenerator disable(Feature f) {
    this._formatFeatures &= (f.getMask() ^ 0xFFFFFFFF);
    return this;
  }
  
  public final boolean isEnabled(Feature f) { return ((this._formatFeatures & f.getMask()) != 0); }
  
  public SmileGenerator configure(Feature f, boolean state) {
    if (state) {
      enable(f);
    } else {
      disable(f);
    } 
    return this;
  }
  
  public void writeRaw(byte b) throws IOException { _writeByte(b); }
  
  public void writeBytes(byte[] data, int offset, int len) throws IOException { _writeBytes(data, offset, len); }
  
  public final void writeStartArray() throws IOException {
    _verifyValueWrite("start an array");
    this._streamWriteContext = this._streamWriteContext.createChildArrayContext(null);
    _writeByte((byte)-8);
  }
  
  public final void writeStartArray(Object forValue) {
    _verifyValueWrite("start an array");
    this._streamWriteContext = this._streamWriteContext.createChildArrayContext(forValue);
    _writeByte((byte)-8);
  }
  
  public final void writeStartArray(Object forValue, int elementsToWrite) throws IOException {
    _verifyValueWrite("start an array");
    this._streamWriteContext = this._streamWriteContext.createChildArrayContext(forValue);
    _writeByte((byte)-8);
  }
  
  @Deprecated
  public final void writeStartArray(int size) throws IOException {
    _verifyValueWrite("start an array");
    this._streamWriteContext = this._streamWriteContext.createChildArrayContext(null);
    _writeByte((byte)-8);
  }
  
  public final void writeEndArray() throws IOException {
    if (!this._streamWriteContext.inArray())
      _reportError("Current context not Array but " + this._streamWriteContext.typeDesc()); 
    _writeByte((byte)-7);
    this._streamWriteContext = this._streamWriteContext.getParent();
  }
  
  public final void writeStartObject() throws IOException {
    _verifyValueWrite("start an object");
    this._streamWriteContext = this._streamWriteContext.createChildObjectContext(null);
    _writeByte((byte)-6);
  }
  
  public final void writeStartObject(Object forValue) {
    _verifyValueWrite("start an object");
    SmileWriteContext ctxt = this._streamWriteContext.createChildObjectContext(forValue);
    this._streamWriteContext = ctxt;
    _writeByte((byte)-6);
  }
  
  public void writeStartObject(Object forValue, int elementsToWrite) throws IOException {
    _verifyValueWrite("start an object");
    SmileWriteContext ctxt = this._streamWriteContext.createChildObjectContext(forValue);
    this._streamWriteContext = ctxt;
    _writeByte((byte)-6);
  }
  
  public final void writeEndObject() throws IOException {
    if (!this._streamWriteContext.inObject())
      _reportError("Current context not Object but " + this._streamWriteContext.typeDesc()); 
    this._streamWriteContext = this._streamWriteContext.getParent();
    _writeByte((byte)-5);
  }
  
  public void writeArray(int[] array, int offset, int length) throws IOException {
    _verifyOffsets(array.length, offset, length);
    _verifyValueWrite("write int array");
    _writeByte((byte)-8);
    int ptr = this._outputTail;
    int outputEnd = this._outputEnd;
    for (int i = offset, end = offset + length; i < end; i++) {
      if (ptr + 6 >= outputEnd) {
        this._outputTail = ptr;
        _flushBuffer();
        ptr = this._outputTail;
      } 
      ptr = _writeNumberNoChecks(ptr, array[i]);
    } 
    this._outputTail = ptr;
    _writeByte((byte)-7);
  }
  
  public void writeArray(long[] array, int offset, int length) throws IOException {
    _verifyOffsets(array.length, offset, length);
    _verifyValueWrite("write int array");
    _writeByte((byte)-8);
    int ptr = this._outputTail;
    int outputEnd = this._outputEnd;
    for (int i = offset, end = offset + length; i < end; i++) {
      if (ptr + 11 >= outputEnd) {
        this._outputTail = ptr;
        _flushBuffer();
        ptr = this._outputTail;
      } 
      ptr = _writeNumberNoChecks(ptr, array[i]);
    } 
    this._outputTail = ptr;
    _writeByte((byte)-7);
  }
  
  public void writeArray(double[] array, int offset, int length) throws IOException {
    _verifyOffsets(array.length, offset, length);
    _verifyValueWrite("write int array");
    _writeByte((byte)-8);
    int ptr = this._outputTail;
    int outputEnd = this._outputEnd;
    for (int i = offset, end = offset + length; i < end; i++) {
      if (ptr + 10 >= outputEnd) {
        this._outputTail = ptr;
        _flushBuffer();
        ptr = this._outputTail;
      } 
      ptr = _writeNumberNoChecks(ptr, array[i]);
    } 
    this._outputTail = ptr;
    _writeByte((byte)-7);
  }
  
  private final void _writeFieldName(String name) throws IOException {
    byte typeToken;
    int len = name.length();
    if (len == 0) {
      _writeByte((byte)32);
      return;
    } 
    if (this._seenNameCount >= 0) {
      int ix = _findSeenName(name);
      if (ix >= 0) {
        _writeSharedNameReference(ix);
        return;
      } 
    } 
    if (len > 64) {
      _writeNonShortFieldName(name, len);
      return;
    } 
    if (this._outputTail + 196 >= this._outputEnd)
      _flushBuffer(); 
    int origOffset = this._outputTail;
    this._outputTail++;
    int byteLen = _shortUTF8Encode(name, 0, len);
    if (byteLen == len) {
      if (byteLen <= 64) {
        typeToken = (byte)(127 + byteLen);
      } else {
        typeToken = 52;
        this._outputBuffer[this._outputTail++] = -4;
      } 
    } else if (byteLen <= 56) {
      typeToken = (byte)(190 + byteLen);
    } else {
      typeToken = 52;
      this._outputBuffer[this._outputTail++] = -4;
    } 
    this._outputBuffer[origOffset] = typeToken;
    if (this._seenNameCount >= 0)
      _addSeenName(name); 
  }
  
  private final void _writeNonShortFieldName(String name, int len) throws IOException {
    _writeByte((byte)52);
    int maxLen = len + len + len;
    if (maxLen <= this._outputBuffer.length) {
      if (this._outputTail + maxLen >= this._outputEnd)
        _flushBuffer(); 
      _shortUTF8Encode(name, 0, len);
    } else {
      _mediumUTF8Encode(name, 0, len);
    } 
    if (this._seenNameCount >= 0)
      _addSeenName(name); 
    if (this._outputTail >= this._outputEnd)
      _flushBuffer(); 
    this._outputBuffer[this._outputTail++] = -4;
  }
  
  protected final void _writeFieldName(SerializableString name) throws IOException {
    int charLen = name.charLength();
    if (charLen == 0) {
      _writeByte((byte)32);
      return;
    } 
    if (this._seenNameCount >= 0) {
      int ix = _findSeenName(name.getValue());
      if (ix >= 0) {
        _writeSharedNameReference(ix);
        return;
      } 
    } 
    byte[] bytes = name.asUnquotedUTF8();
    int byteLen = bytes.length;
    if (byteLen != charLen) {
      _writeFieldNameUnicode(name, bytes);
      return;
    } 
    if (byteLen <= 64) {
      if (this._outputTail + byteLen >= this._outputEnd)
        _flushBuffer(); 
      this._outputBuffer[this._outputTail++] = (byte)(127 + byteLen);
      System.arraycopy(bytes, 0, this._outputBuffer, this._outputTail, byteLen);
      this._outputTail += byteLen;
    } else {
      _writeLongAsciiFieldName(bytes);
    } 
    if (this._seenNameCount >= 0)
      _addSeenName(name.getValue()); 
  }
  
  private final void _writeLongAsciiFieldName(byte[] bytes) throws IOException {
    int byteLen = bytes.length;
    if (this._outputTail >= this._outputEnd)
      _flushBuffer(); 
    this._outputBuffer[this._outputTail++] = 52;
    if (this._outputTail + byteLen + 1 < this._outputEnd) {
      System.arraycopy(bytes, 0, this._outputBuffer, this._outputTail, byteLen);
      this._outputTail += byteLen;
    } else {
      _flushBuffer();
      if (byteLen < 770) {
        System.arraycopy(bytes, 0, this._outputBuffer, this._outputTail, byteLen);
        this._outputTail += byteLen;
      } else {
        if (this._outputTail > 0)
          _flushBuffer(); 
        this._out.write(bytes, 0, byteLen);
      } 
    } 
    this._outputBuffer[this._outputTail++] = -4;
  }
  
  protected final void _writeFieldNameUnicode(SerializableString name, byte[] bytes) throws IOException {
    int byteLen = bytes.length;
    if (byteLen <= 56) {
      if (this._outputTail + byteLen >= this._outputEnd)
        _flushBuffer(); 
      this._outputBuffer[this._outputTail++] = (byte)(190 + byteLen);
      System.arraycopy(bytes, 0, this._outputBuffer, this._outputTail, byteLen);
      this._outputTail += byteLen;
      if (this._seenNameCount >= 0)
        _addSeenName(name.getValue()); 
      return;
    } 
    if (this._outputTail >= this._outputEnd)
      _flushBuffer(); 
    this._outputBuffer[this._outputTail++] = 52;
    if (this._outputTail + byteLen + 1 < this._outputEnd) {
      System.arraycopy(bytes, 0, this._outputBuffer, this._outputTail, byteLen);
      this._outputTail += byteLen;
    } else {
      _flushBuffer();
      if (byteLen < 770) {
        System.arraycopy(bytes, 0, this._outputBuffer, this._outputTail, byteLen);
        this._outputTail += byteLen;
      } else {
        if (this._outputTail > 0)
          _flushBuffer(); 
        this._out.write(bytes, 0, byteLen);
      } 
    } 
    this._outputBuffer[this._outputTail++] = -4;
    if (this._seenNameCount >= 0)
      _addSeenName(name.getValue()); 
  }
  
  private final void _writeSharedNameReference(int ix) throws IOException {
    if (ix >= this._seenNameCount)
      throw new IllegalArgumentException("Internal error: trying to write shared name with index " + ix + "; but have only seen " + this._seenNameCount + " so far!"); 
    if (ix < 64) {
      _writeByte((byte)(64 + ix));
    } else {
      _writeBytes((byte)(48 + (ix >> 8)), (byte)ix);
    } 
  }
  
  public void writeString(String text) throws IOException {
    if (text == null) {
      writeNull();
      return;
    } 
    _verifyValueWrite("write String value");
    int len = text.length();
    if (len == 0) {
      _writeByte((byte)32);
      return;
    } 
    if (len > 65) {
      _writeNonSharedString(text, len);
      return;
    } 
    if (this._seenStringValueCount >= 0) {
      int ix = _findSeenStringValue(text);
      if (ix >= 0) {
        _writeSharedStringValueReference(ix);
        return;
      } 
    } 
    if (this._outputTail + 196 >= this._outputEnd)
      _flushBuffer(); 
    int origOffset = this._outputTail;
    this._outputTail++;
    int byteLen = _shortUTF8Encode(text, 0, len);
    if (byteLen <= 64) {
      if (this._seenStringValueCount >= 0)
        _addSeenStringValue(text); 
      if (byteLen == len) {
        this._outputBuffer[origOffset] = (byte)(63 + byteLen);
      } else {
        this._outputBuffer[origOffset] = (byte)(126 + byteLen);
      } 
    } else {
      this._outputBuffer[origOffset] = (byteLen == len) ? -32 : -28;
      this._outputBuffer[this._outputTail++] = -4;
    } 
  }
  
  private final void _writeSharedStringValueReference(int ix) throws IOException {
    if (ix >= this._seenStringValueCount)
      throw new IllegalArgumentException("Internal error: trying to write shared String value with index " + ix + "; but have only seen " + this._seenStringValueCount + " so far!"); 
    if (ix < 31) {
      _writeByte((byte)(1 + ix));
    } else {
      _writeBytes((byte)(236 + (ix >> 8)), (byte)ix);
    } 
  }
  
  private final void _writeNonSharedString(String text, int len) throws IOException {
    int maxLen = len + len + len + 2;
    if (maxLen > this._outputBuffer.length) {
      _writeByte((byte)-28);
      _mediumUTF8Encode(text, 0, len);
      _writeByte((byte)-4);
      return;
    } 
    if (this._outputTail + maxLen >= this._outputEnd)
      _flushBuffer(); 
    int origOffset = this._outputTail;
    _writeByte((byte)-32);
    int byteLen = _shortUTF8Encode(text, 0, len);
    if (byteLen > len)
      this._outputBuffer[origOffset] = -28; 
    this._outputBuffer[this._outputTail++] = -4;
  }
  
  public void writeString(char[] text, int offset, int len) throws IOException {
    if (len <= 65 && this._seenStringValueCount >= 0 && len > 0) {
      writeString(new String(text, offset, len));
      return;
    } 
    _verifyValueWrite("write String value");
    if (len == 0) {
      _writeByte((byte)32);
      return;
    } 
    if (len <= 64) {
      byte typeToken;
      if (this._outputTail + 196 >= this._outputEnd)
        _flushBuffer(); 
      int origOffset = this._outputTail;
      this._outputTail++;
      int byteLen = _shortUTF8Encode(text, offset, offset + len);
      if (byteLen <= 64) {
        if (byteLen == len) {
          typeToken = (byte)(63 + byteLen);
        } else {
          typeToken = (byte)(126 + byteLen);
        } 
      } else {
        typeToken = -28;
        this._outputBuffer[this._outputTail++] = -4;
      } 
      this._outputBuffer[origOffset] = typeToken;
    } else {
      int maxLen = len + len + len + 2;
      if (maxLen <= this._outputBuffer.length) {
        if (this._outputTail + maxLen >= this._outputEnd)
          _flushBuffer(); 
        int origOffset = this._outputTail;
        _writeByte((byte)-28);
        int byteLen = _shortUTF8Encode(text, offset, offset + len);
        if (byteLen == len)
          this._outputBuffer[origOffset] = -32; 
        this._outputBuffer[this._outputTail++] = -4;
      } else {
        _writeByte((byte)-28);
        _mediumUTF8Encode(text, offset, offset + len);
        _writeByte((byte)-4);
      } 
    } 
  }
  
  public final void writeString(SerializableString sstr) throws IOException {
    _verifyValueWrite("write String value");
    String str = sstr.getValue();
    int len = str.length();
    if (len == 0) {
      _writeByte((byte)32);
      return;
    } 
    if (len <= 65 && this._seenStringValueCount >= 0) {
      int ix = _findSeenStringValue(str);
      if (ix >= 0) {
        _writeSharedStringValueReference(ix);
        return;
      } 
    } 
    byte[] raw = sstr.asUnquotedUTF8();
    int byteLen = raw.length;
    if (byteLen <= 64) {
      if (this._outputTail + byteLen + 1 >= this._outputEnd)
        _flushBuffer(); 
      int typeToken = (byteLen == len) ? (63 + byteLen) : (126 + byteLen);
      this._outputBuffer[this._outputTail++] = (byte)typeToken;
      System.arraycopy(raw, 0, this._outputBuffer, this._outputTail, byteLen);
      this._outputTail += byteLen;
      if (this._seenStringValueCount >= 0)
        _addSeenStringValue(sstr.getValue()); 
    } else {
      byte typeToken = (byteLen == len) ? -32 : -28;
      _writeByte(typeToken);
      _writeBytes(raw, 0, raw.length);
      _writeByte((byte)-4);
    } 
  }
  
  public void writeRawUTF8String(byte[] text, int offset, int len) throws IOException {
    _verifyValueWrite("write String value");
    if (len == 0) {
      _writeByte((byte)32);
      return;
    } 
    if (this._seenStringValueCount >= 0)
      throw new UnsupportedOperationException("Can not use direct UTF-8 write methods when 'Feature.CHECK_SHARED_STRING_VALUES' enabled"); 
    if (len <= 65) {
      if (this._outputTail + len >= this._outputEnd)
        _flushBuffer(); 
      if (len == 1) {
        this._outputBuffer[this._outputTail++] = 64;
        this._outputBuffer[this._outputTail++] = text[offset];
      } else {
        this._outputBuffer[this._outputTail++] = (byte)(126 + len);
        System.arraycopy(text, offset, this._outputBuffer, this._outputTail, len);
        this._outputTail += len;
      } 
    } else {
      int maxLen = len + len + len + 2;
      if (maxLen <= this._outputBuffer.length) {
        if (this._outputTail + maxLen >= this._outputEnd)
          _flushBuffer(); 
        this._outputBuffer[this._outputTail++] = -28;
        System.arraycopy(text, offset, this._outputBuffer, this._outputTail, len);
        this._outputTail += len;
        this._outputBuffer[this._outputTail++] = -4;
      } else {
        _writeByte((byte)-28);
        _writeBytes(text, offset, len);
        _writeByte((byte)-4);
      } 
    } 
  }
  
  public final void writeUTF8String(byte[] text, int offset, int len) throws IOException { writeRawUTF8String(text, offset, len); }
  
  public void writeRaw(String text) throws IOException { throw _notSupported(); }
  
  public void writeRaw(String text, int offset, int len) throws IOException { throw _notSupported(); }
  
  public void writeRaw(char[] text, int offset, int len) throws IOException { throw _notSupported(); }
  
  public void writeRaw(char c) throws IOException { throw _notSupported(); }
  
  public void writeRawValue(String text) throws IOException { throw _notSupported(); }
  
  public void writeRawValue(String text, int offset, int len) throws IOException { throw _notSupported(); }
  
  public void writeRawValue(char[] text, int offset, int len) throws IOException { throw _notSupported(); }
  
  public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len) throws IOException {
    if (data == null) {
      writeNull();
      return;
    } 
    _verifyValueWrite("write Binary value");
    if (isEnabled(Feature.ENCODE_BINARY_AS_7BIT)) {
      _writeByte((byte)-24);
      _write7BitBinaryWithLength(data, offset, len);
    } else {
      _writeByte((byte)-3);
      _writePositiveVInt(len);
      _writeBytes(data, offset, len);
    } 
  }
  
  public int writeBinary(InputStream data, int dataLength) throws IOException {
    int missing;
    if (dataLength < 0)
      throw new UnsupportedOperationException("Must pass actual length for Smile encoded data"); 
    _verifyValueWrite("write Binary value");
    if (isEnabled(Feature.ENCODE_BINARY_AS_7BIT)) {
      _writeByte((byte)-24);
      encodingBuffer = this._ioContext.allocBase64Buffer();
      try {
        missing = _write7BitBinaryWithLength(data, dataLength, encodingBuffer);
      } finally {
        this._ioContext.releaseBase64Buffer(encodingBuffer);
      } 
    } else {
      _writeByte((byte)-3);
      _writePositiveVInt(dataLength);
      missing = _writeBytes(data, dataLength);
    } 
    if (missing > 0)
      _reportError("Too few bytes available: missing " + missing + " bytes (out of " + dataLength + ")"); 
    return dataLength;
  }
  
  public int writeBinary(Base64Variant b64variant, InputStream data, int dataLength) throws IOException { return writeBinary(data, dataLength); }
  
  public void writeBoolean(boolean state) throws IOException {
    _verifyValueWrite("write boolean value");
    if (state) {
      _writeByte((byte)35);
    } else {
      _writeByte((byte)34);
    } 
  }
  
  public void writeNull() throws IOException {
    _verifyValueWrite("write null value");
    _writeByte((byte)33);
  }
  
  public void writeNumber(int i) throws IOException {
    _verifyValueWrite("write number");
    i = SmileUtil.zigzagEncode(i);
    if (i <= 63 && i >= 0) {
      if (i <= 31) {
        _writeByte((byte)(192 + i));
        return;
      } 
      _writeBytes((byte)36, (byte)(128 + i));
      return;
    } 
    byte b0 = (byte)(128 + (i & 0x3F));
    i >>>= 6;
    if (i <= 127) {
      _writeBytes((byte)36, (byte)i, b0);
      return;
    } 
    byte b1 = (byte)(i & 0x7F);
    i >>= 7;
    if (i <= 127) {
      _writeBytes((byte)36, (byte)i, b1, b0);
      return;
    } 
    byte b2 = (byte)(i & 0x7F);
    i >>= 7;
    if (i <= 127) {
      _writeBytes((byte)36, (byte)i, b2, b1, b0);
      return;
    } 
    byte b3 = (byte)(i & 0x7F);
    _writeBytes((byte)36, (byte)(i >> 7), b3, b2, b1, b0);
  }
  
  private final int _writeNumberNoChecks(int ptr, int i) throws IOException {
    byte[] output = this._outputBuffer;
    i = SmileUtil.zigzagEncode(i);
    if (i <= 63 && i >= 0) {
      if (i <= 31) {
        output[ptr++] = (byte)(192 + i);
        return ptr;
      } 
      output[ptr++] = 36;
      output[ptr++] = (byte)(128 + i);
      return ptr;
    } 
    output[ptr++] = 36;
    byte b0 = (byte)(128 + (i & 0x3F));
    i >>>= 6;
    if (i <= 127) {
      output[ptr++] = (byte)i;
      output[ptr++] = b0;
      return ptr;
    } 
    byte b1 = (byte)(i & 0x7F);
    i >>= 7;
    if (i <= 127) {
      output[ptr++] = (byte)i;
      output[ptr++] = b1;
      output[ptr++] = b0;
      return ptr;
    } 
    byte b2 = (byte)(i & 0x7F);
    i >>= 7;
    if (i <= 127) {
      output[ptr++] = (byte)i;
      output[ptr++] = b2;
      output[ptr++] = b1;
      output[ptr++] = b0;
      return ptr;
    } 
    byte b3 = (byte)(i & 0x7F);
    output[ptr++] = (byte)(i >> 7);
    output[ptr++] = b3;
    output[ptr++] = b2;
    output[ptr++] = b1;
    output[ptr++] = b0;
    return ptr;
  }
  
  public void writeNumber(long l) throws IOException {
    if (l <= 2147483647L && l >= -2147483648L) {
      writeNumber((int)l);
      return;
    } 
    _verifyValueWrite("write number");
    l = SmileUtil.zigzagEncode(l);
    int i = (int)l;
    byte b0 = (byte)(128 + (i & 0x3F));
    byte b1 = (byte)(i >> 6 & 0x7F);
    byte b2 = (byte)(i >> 13 & 0x7F);
    byte b3 = (byte)(i >> 20 & 0x7F);
    l >>>= 27;
    byte b4 = (byte)((int)l & 0x7F);
    i = (int)(l >> 7);
    if (i == 0) {
      _writeBytes((byte)37, b4, b3, b2, b1, b0);
      return;
    } 
    if (i <= 127) {
      _writeBytes((byte)37, (byte)i);
      _writeBytes(b4, b3, b2, b1, b0);
      return;
    } 
    byte b5 = (byte)(i & 0x7F);
    i >>= 7;
    if (i <= 127) {
      _writeBytes((byte)37, (byte)i);
      _writeBytes(b5, b4, b3, b2, b1, b0);
      return;
    } 
    byte b6 = (byte)(i & 0x7F);
    i >>= 7;
    if (i <= 127) {
      _writeBytes((byte)37, (byte)i, b6);
      _writeBytes(b5, b4, b3, b2, b1, b0);
      return;
    } 
    byte b7 = (byte)(i & 0x7F);
    i >>= 7;
    if (i <= 127) {
      _writeBytes((byte)37, (byte)i, b7, b6);
      _writeBytes(b5, b4, b3, b2, b1, b0);
      return;
    } 
    byte b8 = (byte)(i & 0x7F);
    i >>= 7;
    _writeBytes((byte)37, (byte)i, b8, b7, b6);
    _writeBytes(b5, b4, b3, b2, b1, b0);
  }
  
  private final int _writeNumberNoChecks(int ptr, long l) throws IOException {
    if (l <= 2147483647L && l >= -2147483648L)
      return _writeNumberNoChecks(ptr, (int)l); 
    l = SmileUtil.zigzagEncode(l);
    int i = (int)l;
    byte b0 = (byte)(128 + (i & 0x3F));
    byte b1 = (byte)(i >> 6 & 0x7F);
    byte b2 = (byte)(i >> 13 & 0x7F);
    byte b3 = (byte)(i >> 20 & 0x7F);
    l >>>= 27;
    byte b4 = (byte)((int)l & 0x7F);
    byte[] output = this._outputBuffer;
    output[ptr++] = 37;
    i = (int)(l >> 7);
    if (i == 0) {
      output[ptr++] = b4;
      output[ptr++] = b3;
      output[ptr++] = b2;
      output[ptr++] = b1;
      output[ptr++] = b0;
      return ptr;
    } 
    if (i <= 127) {
      output[ptr++] = (byte)i;
      output[ptr++] = b4;
      output[ptr++] = b3;
      output[ptr++] = b2;
      output[ptr++] = b1;
      output[ptr++] = b0;
      return ptr;
    } 
    byte b5 = (byte)(i & 0x7F);
    i >>= 7;
    if (i <= 127) {
      output[ptr++] = (byte)i;
      output[ptr++] = b5;
      output[ptr++] = b4;
      output[ptr++] = b3;
      output[ptr++] = b2;
      output[ptr++] = b1;
      output[ptr++] = b0;
      return ptr;
    } 
    byte b6 = (byte)(i & 0x7F);
    i >>= 7;
    if (i <= 127) {
      output[ptr++] = (byte)i;
      output[ptr++] = b6;
      output[ptr++] = b5;
      output[ptr++] = b4;
      output[ptr++] = b3;
      output[ptr++] = b2;
      output[ptr++] = b1;
      output[ptr++] = b0;
      return ptr;
    } 
    byte b7 = (byte)(i & 0x7F);
    i >>= 7;
    if (i <= 127) {
      output[ptr++] = (byte)i;
      output[ptr++] = b7;
      output[ptr++] = b6;
      output[ptr++] = b5;
      output[ptr++] = b4;
      output[ptr++] = b3;
      output[ptr++] = b2;
      output[ptr++] = b1;
      output[ptr++] = b0;
      return ptr;
    } 
    byte b8 = (byte)(i & 0x7F);
    i >>= 7;
    output[ptr++] = (byte)i;
    output[ptr++] = b8;
    output[ptr++] = b7;
    output[ptr++] = b6;
    output[ptr++] = b5;
    output[ptr++] = b4;
    output[ptr++] = b3;
    output[ptr++] = b2;
    output[ptr++] = b1;
    output[ptr++] = b0;
    return ptr;
  }
  
  public void writeNumber(BigInteger v) throws IOException {
    if (v == null) {
      writeNull();
      return;
    } 
    _verifyValueWrite("write number");
    _writeByte((byte)38);
    byte[] data = v.toByteArray();
    _write7BitBinaryWithLength(data, 0, data.length);
  }
  
  public void writeNumber(double d) throws IOException {
    _ensureRoomForOutput(11);
    _verifyValueWrite("write number");
    long l = Double.doubleToRawLongBits(d);
    this._outputBuffer[this._outputTail++] = 41;
    int hi5 = (int)(l >>> 35);
    this._outputBuffer[this._outputTail + 4] = (byte)(hi5 & 0x7F);
    hi5 >>= 7;
    this._outputBuffer[this._outputTail + 3] = (byte)(hi5 & 0x7F);
    hi5 >>= 7;
    this._outputBuffer[this._outputTail + 2] = (byte)(hi5 & 0x7F);
    hi5 >>= 7;
    this._outputBuffer[this._outputTail + 1] = (byte)(hi5 & 0x7F);
    hi5 >>= 7;
    this._outputBuffer[this._outputTail] = (byte)hi5;
    this._outputTail += 5;
    int mid = (int)(l >> 28);
    this._outputBuffer[this._outputTail++] = (byte)(mid & 0x7F);
    int lo4 = (int)l;
    this._outputBuffer[this._outputTail + 3] = (byte)(lo4 & 0x7F);
    lo4 >>= 7;
    this._outputBuffer[this._outputTail + 2] = (byte)(lo4 & 0x7F);
    lo4 >>= 7;
    this._outputBuffer[this._outputTail + 1] = (byte)(lo4 & 0x7F);
    lo4 >>= 7;
    this._outputBuffer[this._outputTail] = (byte)(lo4 & 0x7F);
    this._outputTail += 4;
  }
  
  private final int _writeNumberNoChecks(int ptr, double d) throws IOException {
    long l = Double.doubleToRawLongBits(d);
    byte[] output = this._outputBuffer;
    output[ptr++] = 41;
    int hi5 = (int)(l >>> 35);
    output[ptr + 4] = (byte)(hi5 & 0x7F);
    hi5 >>= 7;
    output[ptr + 3] = (byte)(hi5 & 0x7F);
    hi5 >>= 7;
    output[ptr + 2] = (byte)(hi5 & 0x7F);
    hi5 >>= 7;
    output[ptr + 1] = (byte)(hi5 & 0x7F);
    hi5 >>= 7;
    output[ptr] = (byte)hi5;
    ptr += 5;
    int mid = (int)(l >> 28);
    output[ptr++] = (byte)(mid & 0x7F);
    int lo4 = (int)l;
    output[ptr + 3] = (byte)(lo4 & 0x7F);
    lo4 >>= 7;
    output[ptr + 2] = (byte)(lo4 & 0x7F);
    lo4 >>= 7;
    output[ptr + 1] = (byte)(lo4 & 0x7F);
    lo4 >>= 7;
    output[ptr] = (byte)(lo4 & 0x7F);
    return ptr + 4;
  }
  
  public void writeNumber(float f) throws IOException {
    _ensureRoomForOutput(6);
    _verifyValueWrite("write number");
    int i = Float.floatToRawIntBits(f);
    this._outputBuffer[this._outputTail++] = 40;
    this._outputBuffer[this._outputTail + 4] = (byte)(i & 0x7F);
    i >>= 7;
    this._outputBuffer[this._outputTail + 3] = (byte)(i & 0x7F);
    i >>= 7;
    this._outputBuffer[this._outputTail + 2] = (byte)(i & 0x7F);
    i >>= 7;
    this._outputBuffer[this._outputTail + 1] = (byte)(i & 0x7F);
    i >>= 7;
    this._outputBuffer[this._outputTail] = (byte)(i & 0x7F);
    this._outputTail += 5;
  }
  
  public void writeNumber(BigDecimal dec) throws IOException {
    if (dec == null) {
      writeNull();
      return;
    } 
    _verifyValueWrite("write number");
    _writeByte((byte)42);
    int scale = dec.scale();
    _writeSignedVInt(scale);
    BigInteger unscaled = dec.unscaledValue();
    byte[] data = unscaled.toByteArray();
    _write7BitBinaryWithLength(data, 0, data.length);
  }
  
  public void writeNumber(String encodedValue) throws IOException {
    if (encodedValue == null) {
      writeNull();
      return;
    } 
    int len = encodedValue.length();
    boolean neg = encodedValue.startsWith("-");
    int i = neg ? 1 : 0;
    while (true) {
      char c = encodedValue.charAt(i);
      if (c > '9' || c < '0')
        break; 
      if (++i == len) {
        _writeIntegralNumber(encodedValue, neg);
        return;
      } 
    } 
    _writeDecimalNumber(encodedValue);
  }
  
  protected void _writeIntegralNumber(String enc, boolean neg) throws IOException {
    int len = enc.length();
    if (neg)
      len--; 
    try {
      if (len <= 9) {
        writeNumber(Integer.parseInt(enc));
      } else if (len <= 18) {
        writeNumber(Long.parseLong(enc));
      } else {
        writeNumber(new BigInteger(enc));
      } 
    } catch (NumberFormatException e) {
      throw new JsonGenerationException("Invalid String representation for Number ('" + enc + "'); can not write using Smile format", this);
    } 
  }
  
  protected void _writeDecimalNumber(String enc) throws IOException {
    try {
      writeNumber(NumberInput.parseBigDecimal(enc));
    } catch (NumberFormatException e) {
      throw new JsonGenerationException("Invalid String representation for Number ('" + enc + "'); can not write using Smile format", this);
    } 
  }
  
  protected final void _verifyValueWrite(String typeMsg) throws IOException {
    if (!this._streamWriteContext.writeValue())
      _reportError("Can not " + typeMsg + ", expecting field name"); 
  }
  
  public final void flush() throws IOException {
    _flushBuffer();
    if (isEnabled(JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM))
      this._out.flush(); 
  }
  
  public void close() throws IOException {
    if (this._outputBuffer != null && 
      isEnabled(JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT))
      while (true) {
        JsonStreamContext ctxt = getOutputContext();
        if (ctxt.inArray()) {
          writeEndArray();
          continue;
        } 
        if (ctxt.inObject()) {
          writeEndObject();
          continue;
        } 
        break;
      }  
    boolean wasClosed = this._closed;
    super.close();
    if (!wasClosed && isEnabled(Feature.WRITE_END_MARKER))
      _writeByte((byte)-1); 
    _flushBuffer();
    if (this._ioContext.isResourceManaged() || isEnabled(JsonGenerator.Feature.AUTO_CLOSE_TARGET)) {
      this._out.close();
    } else if (isEnabled(JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM)) {
      this._out.flush();
    } 
    _releaseBuffers();
  }
  
  private final int _shortUTF8Encode(char[] str, int i, int end) throws IOException {
    int ptr = this._outputTail;
    byte[] outBuf = this._outputBuffer;
    do {
      int c = str[i];
      if (c > 127)
        return _shortUTF8Encode2(str, i, end, ptr); 
      outBuf[ptr++] = (byte)c;
    } while (++i < end);
    int codedLen = ptr - this._outputTail;
    this._outputTail = ptr;
    return codedLen;
  }
  
  private final int _shortUTF8Encode2(char[] str, int i, int end, int outputPtr) throws IOException {
    byte[] outBuf = this._outputBuffer;
    while (i < end) {
      int c = str[i++];
      if (c <= 127) {
        outBuf[outputPtr++] = (byte)c;
        continue;
      } 
      if (c < 2048) {
        outBuf[outputPtr++] = (byte)(0xC0 | c >> 6);
        outBuf[outputPtr++] = (byte)(0x80 | c & 0x3F);
        continue;
      } 
      if (c < 55296 || c > 57343) {
        outBuf[outputPtr++] = (byte)(0xE0 | c >> 12);
        outBuf[outputPtr++] = (byte)(0x80 | c >> 6 & 0x3F);
        outBuf[outputPtr++] = (byte)(0x80 | c & 0x3F);
        continue;
      } 
      if (c <= 56319 && i < end) {
        int d = str[i];
        if (d <= 57343 && d >= 56320) {
          i++;
          outputPtr = _decodeAndWriteSurrogate(c, d, outBuf, outputPtr);
          continue;
        } 
        outputPtr = _invalidSurrogateEnd(c, d, outBuf, outputPtr);
        continue;
      } 
      outputPtr = _invalidSurrogateStart(c, outBuf, outputPtr);
    } 
    int codedLen = outputPtr - this._outputTail;
    this._outputTail = outputPtr;
    return codedLen;
  }
  
  private final int _shortUTF8Encode(String str, int i, int end) throws IOException {
    int ptr = this._outputTail;
    byte[] outBuf = this._outputBuffer;
    do {
      int c = str.charAt(i);
      if (c > 127)
        return _shortUTF8Encode2(str, i, end, ptr); 
      outBuf[ptr++] = (byte)c;
    } while (++i < end);
    int codedLen = ptr - this._outputTail;
    this._outputTail = ptr;
    return codedLen;
  }
  
  private final int _shortUTF8Encode2(String str, int i, int end, int outputPtr) throws IOException {
    byte[] outBuf = this._outputBuffer;
    while (i < end) {
      int c = str.charAt(i++);
      if (c <= 127) {
        outBuf[outputPtr++] = (byte)c;
        continue;
      } 
      if (c < 2048) {
        outBuf[outputPtr++] = (byte)(0xC0 | c >> 6);
        outBuf[outputPtr++] = (byte)(0x80 | c & 0x3F);
        continue;
      } 
      if (c < 55296 || c > 57343) {
        outBuf[outputPtr++] = (byte)(0xE0 | c >> 12);
        outBuf[outputPtr++] = (byte)(0x80 | c >> 6 & 0x3F);
        outBuf[outputPtr++] = (byte)(0x80 | c & 0x3F);
        continue;
      } 
      if (c <= 56319 && i < end) {
        int d = str.charAt(i);
        if (d <= 57343 && d >= 56320) {
          i++;
          outputPtr = _decodeAndWriteSurrogate(c, d, outBuf, outputPtr);
          continue;
        } 
        outputPtr = _invalidSurrogateEnd(c, d, outBuf, outputPtr);
        continue;
      } 
      outputPtr = _invalidSurrogateStart(c, outBuf, outputPtr);
    } 
    int codedLen = outputPtr - this._outputTail;
    this._outputTail = outputPtr;
    return codedLen;
  }
  
  private void _mediumUTF8Encode(char[] str, int inputPtr, int inputEnd) throws IOException {
    int bufferEnd = this._outputEnd - 4;
    label39: while (inputPtr < inputEnd) {
      if (this._outputTail >= bufferEnd)
        _flushBuffer(); 
      int c = str[inputPtr++];
      if (c <= 127) {
        this._outputBuffer[this._outputTail++] = (byte)c;
        int maxInCount = inputEnd - inputPtr;
        int maxOutCount = bufferEnd - this._outputTail;
        if (maxInCount > maxOutCount)
          maxInCount = maxOutCount; 
        maxInCount += inputPtr;
        while (inputPtr < maxInCount) {
          c = str[inputPtr++];
          if (c > 127)
            continue label39; 
          this._outputBuffer[this._outputTail++] = (byte)c;
        } 
        continue;
      } 
      if (c < 2048) {
        this._outputBuffer[this._outputTail++] = (byte)(0xC0 | c >> 6);
        this._outputBuffer[this._outputTail++] = (byte)(0x80 | c & 0x3F);
        continue;
      } 
      if (c < 55296 || c > 57343) {
        this._outputBuffer[this._outputTail++] = (byte)(0xE0 | c >> 12);
        this._outputBuffer[this._outputTail++] = (byte)(0x80 | c >> 6 & 0x3F);
        this._outputBuffer[this._outputTail++] = (byte)(0x80 | c & 0x3F);
        continue;
      } 
      if (c <= 56319 && inputPtr < inputEnd) {
        int d = str[inputPtr];
        if (d <= 57343 && d >= 56320) {
          inputPtr++;
          this._outputTail = _decodeAndWriteSurrogate(c, d, this._outputBuffer, this._outputTail);
          continue;
        } 
        this._outputTail = _invalidSurrogateEnd(c, d, this._outputBuffer, this._outputTail);
        continue;
      } 
      this._outputTail = _invalidSurrogateStart(c, this._outputBuffer, this._outputTail);
    } 
  }
  
  private void _mediumUTF8Encode(String str, int inputPtr, int inputEnd) throws IOException {
    int bufferEnd = this._outputEnd - 4;
    label39: while (inputPtr < inputEnd) {
      if (this._outputTail >= bufferEnd)
        _flushBuffer(); 
      int c = str.charAt(inputPtr++);
      if (c <= 127) {
        this._outputBuffer[this._outputTail++] = (byte)c;
        int maxInCount = inputEnd - inputPtr;
        int maxOutCount = bufferEnd - this._outputTail;
        if (maxInCount > maxOutCount)
          maxInCount = maxOutCount; 
        maxInCount += inputPtr;
        while (inputPtr < maxInCount) {
          c = str.charAt(inputPtr++);
          if (c > 127)
            continue label39; 
          this._outputBuffer[this._outputTail++] = (byte)c;
        } 
        continue;
      } 
      if (c < 2048) {
        this._outputBuffer[this._outputTail++] = (byte)(0xC0 | c >> 6);
        this._outputBuffer[this._outputTail++] = (byte)(0x80 | c & 0x3F);
        continue;
      } 
      if (c < 55296 || c > 57343) {
        this._outputBuffer[this._outputTail++] = (byte)(0xE0 | c >> 12);
        this._outputBuffer[this._outputTail++] = (byte)(0x80 | c >> 6 & 0x3F);
        this._outputBuffer[this._outputTail++] = (byte)(0x80 | c & 0x3F);
        continue;
      } 
      if (c <= 56319 && inputPtr < inputEnd) {
        int d = str.charAt(inputPtr);
        if (d <= 57343 && d >= 56320) {
          inputPtr++;
          this._outputTail = _decodeAndWriteSurrogate(c, d, this._outputBuffer, this._outputTail);
          continue;
        } 
        this._outputTail = _invalidSurrogateEnd(c, d, this._outputBuffer, this._outputTail);
        continue;
      } 
      this._outputTail = _invalidSurrogateStart(c, this._outputBuffer, this._outputTail);
    } 
  }
  
  private int _invalidSurrogateStart(int code, byte[] outBuf, int outputPtr) throws IOException {
    if (isEnabled(Feature.LENIENT_UTF_ENCODING))
      return _appendReplacementChar(outBuf, outputPtr); 
    if (code <= 56319)
      _reportError(String.format("Unmatched surrogate pair, starts with valid high surrogate (0x%04X) but ends without low surrogate", new Object[] { Integer.valueOf(code) })); 
    _reportError(String.format("Invalid surrogate pair, starts with invalid high surrogate (0x%04X), not in valid range [0xD800, 0xDBFF]", new Object[] { Integer.valueOf(code) }));
    return 0;
  }
  
  private int _invalidSurrogateEnd(int surr1, int surr2, byte[] outBuf, int outputPtr) throws IOException {
    if (isEnabled(Feature.LENIENT_UTF_ENCODING))
      return _appendReplacementChar(outBuf, outputPtr); 
    _reportError(String.format("Invalid surrogate pair, starts with valid high surrogate (0x%04X) but ends with invalid low surrogate (0x%04X), not in valid range [0xDC00, 0xDFFF]", new Object[] { Integer.valueOf(surr1), Integer.valueOf(surr2) }));
    return 0;
  }
  
  private int _appendReplacementChar(byte[] outBuf, int outputPtr) {
    outBuf[outputPtr++] = -17;
    outBuf[outputPtr++] = -65;
    outBuf[outputPtr++] = -67;
    return outputPtr;
  }
  
  private int _decodeAndWriteSurrogate(int surr1, int surr2, byte[] outBuf, int outputPtr) throws IOException {
    int c = 65536 + (surr1 - 55296 << 10) + surr2 - 56320;
    outBuf[outputPtr++] = (byte)(0xF0 | c >> 18);
    outBuf[outputPtr++] = (byte)(0x80 | c >> 12 & 0x3F);
    outBuf[outputPtr++] = (byte)(0x80 | c >> 6 & 0x3F);
    outBuf[outputPtr++] = (byte)(0x80 | c & 0x3F);
    return outputPtr;
  }
  
  private final void _ensureRoomForOutput(int needed) throws IOException {
    if (this._outputTail + needed >= this._outputEnd)
      _flushBuffer(); 
  }
  
  private final void _writeByte(byte b) throws IOException {
    if (this._outputTail >= this._outputEnd)
      _flushBuffer(); 
    this._outputBuffer[this._outputTail++] = b;
  }
  
  private final void _writeBytes(byte b1, byte b2) throws IOException {
    if (this._outputTail + 1 >= this._outputEnd)
      _flushBuffer(); 
    this._outputBuffer[this._outputTail++] = b1;
    this._outputBuffer[this._outputTail++] = b2;
  }
  
  private final void _writeBytes(byte b1, byte b2, byte b3) throws IOException {
    if (this._outputTail + 2 >= this._outputEnd)
      _flushBuffer(); 
    this._outputBuffer[this._outputTail++] = b1;
    this._outputBuffer[this._outputTail++] = b2;
    this._outputBuffer[this._outputTail++] = b3;
  }
  
  private final void _writeBytes(byte b1, byte b2, byte b3, byte b4) throws IOException {
    if (this._outputTail + 3 >= this._outputEnd)
      _flushBuffer(); 
    this._outputBuffer[this._outputTail++] = b1;
    this._outputBuffer[this._outputTail++] = b2;
    this._outputBuffer[this._outputTail++] = b3;
    this._outputBuffer[this._outputTail++] = b4;
  }
  
  private final void _writeBytes(byte b1, byte b2, byte b3, byte b4, byte b5) throws IOException {
    if (this._outputTail + 4 >= this._outputEnd)
      _flushBuffer(); 
    this._outputBuffer[this._outputTail++] = b1;
    this._outputBuffer[this._outputTail++] = b2;
    this._outputBuffer[this._outputTail++] = b3;
    this._outputBuffer[this._outputTail++] = b4;
    this._outputBuffer[this._outputTail++] = b5;
  }
  
  private final void _writeBytes(byte b1, byte b2, byte b3, byte b4, byte b5, byte b6) throws IOException {
    if (this._outputTail + 5 >= this._outputEnd)
      _flushBuffer(); 
    this._outputBuffer[this._outputTail++] = b1;
    this._outputBuffer[this._outputTail++] = b2;
    this._outputBuffer[this._outputTail++] = b3;
    this._outputBuffer[this._outputTail++] = b4;
    this._outputBuffer[this._outputTail++] = b5;
    this._outputBuffer[this._outputTail++] = b6;
  }
  
  private final void _writeBytes(byte[] data, int offset, int len) throws IOException {
    if (len == 0)
      return; 
    if (this._outputTail + len >= this._outputEnd) {
      _writeBytesLong(data, offset, len);
      return;
    } 
    System.arraycopy(data, offset, this._outputBuffer, this._outputTail, len);
    this._outputTail += len;
  }
  
  private final int _writeBytes(InputStream in, int bytesLeft) throws IOException {
    while (bytesLeft > 0) {
      int room = this._outputEnd - this._outputTail;
      if (room <= 0) {
        _flushBuffer();
        room = this._outputEnd - this._outputTail;
      } 
      if (room > bytesLeft)
        room = bytesLeft; 
      int count = in.read(this._outputBuffer, this._outputTail, room);
      if (count < 0)
        break; 
      this._outputTail += count;
      bytesLeft -= count;
    } 
    return bytesLeft;
  }
  
  private final void _writeBytesLong(byte[] data, int offset, int len) throws IOException {
    if (this._outputTail >= this._outputEnd)
      _flushBuffer(); 
    int currLen = Math.min(len, this._outputEnd - this._outputTail);
    System.arraycopy(data, offset, this._outputBuffer, this._outputTail, currLen);
    this._outputTail += currLen;
    while (len -= currLen != 0) {
      offset += currLen;
      _flushBuffer();
    } 
  }
  
  private void _writePositiveVInt(int i) throws IOException {
    _ensureRoomForOutput(5);
    byte b0 = (byte)(128 + (i & 0x3F));
    i >>= 6;
    if (i <= 127) {
      if (i > 0)
        this._outputBuffer[this._outputTail++] = (byte)i; 
      this._outputBuffer[this._outputTail++] = b0;
      return;
    } 
    byte b1 = (byte)(i & 0x7F);
    i >>= 7;
    if (i <= 127) {
      this._outputBuffer[this._outputTail++] = (byte)i;
      this._outputBuffer[this._outputTail++] = b1;
      this._outputBuffer[this._outputTail++] = b0;
    } else {
      byte b2 = (byte)(i & 0x7F);
      i >>= 7;
      if (i <= 127) {
        this._outputBuffer[this._outputTail++] = (byte)i;
        this._outputBuffer[this._outputTail++] = b2;
        this._outputBuffer[this._outputTail++] = b1;
        this._outputBuffer[this._outputTail++] = b0;
      } else {
        byte b3 = (byte)(i & 0x7F);
        this._outputBuffer[this._outputTail++] = (byte)(i >> 7);
        this._outputBuffer[this._outputTail++] = b3;
        this._outputBuffer[this._outputTail++] = b2;
        this._outputBuffer[this._outputTail++] = b1;
        this._outputBuffer[this._outputTail++] = b0;
      } 
    } 
  }
  
  private void _writeSignedVInt(int input) throws IOException { _writePositiveVInt(SmileUtil.zigzagEncode(input)); }
  
  protected void _write7BitBinaryWithLength(byte[] data, int offset, int len) throws IOException {
    _writePositiveVInt(len);
    while (len >= 7) {
      if (this._outputTail + 8 >= this._outputEnd)
        _flushBuffer(); 
      int i = data[offset++];
      this._outputBuffer[this._outputTail++] = (byte)(i >> 1 & 0x7F);
      i = i << 8 | data[offset++] & 0xFF;
      this._outputBuffer[this._outputTail++] = (byte)(i >> 2 & 0x7F);
      i = i << 8 | data[offset++] & 0xFF;
      this._outputBuffer[this._outputTail++] = (byte)(i >> 3 & 0x7F);
      i = i << 8 | data[offset++] & 0xFF;
      this._outputBuffer[this._outputTail++] = (byte)(i >> 4 & 0x7F);
      i = i << 8 | data[offset++] & 0xFF;
      this._outputBuffer[this._outputTail++] = (byte)(i >> 5 & 0x7F);
      i = i << 8 | data[offset++] & 0xFF;
      this._outputBuffer[this._outputTail++] = (byte)(i >> 6 & 0x7F);
      i = i << 8 | data[offset++] & 0xFF;
      this._outputBuffer[this._outputTail++] = (byte)(i >> 7 & 0x7F);
      this._outputBuffer[this._outputTail++] = (byte)(i & 0x7F);
      len -= 7;
    } 
    if (len > 0) {
      if (this._outputTail + 7 >= this._outputEnd)
        _flushBuffer(); 
      int i = data[offset++];
      this._outputBuffer[this._outputTail++] = (byte)(i >> 1 & 0x7F);
      if (len > 1) {
        i = (i & true) << 8 | data[offset++] & 0xFF;
        this._outputBuffer[this._outputTail++] = (byte)(i >> 2 & 0x7F);
        if (len > 2) {
          i = (i & 0x3) << 8 | data[offset++] & 0xFF;
          this._outputBuffer[this._outputTail++] = (byte)(i >> 3 & 0x7F);
          if (len > 3) {
            i = (i & 0x7) << 8 | data[offset++] & 0xFF;
            this._outputBuffer[this._outputTail++] = (byte)(i >> 4 & 0x7F);
            if (len > 4) {
              i = (i & 0xF) << 8 | data[offset++] & 0xFF;
              this._outputBuffer[this._outputTail++] = (byte)(i >> 5 & 0x7F);
              if (len > 5) {
                i = (i & 0x1F) << 8 | data[offset++] & 0xFF;
                this._outputBuffer[this._outputTail++] = (byte)(i >> 6 & 0x7F);
                this._outputBuffer[this._outputTail++] = (byte)(i & 0x3F);
              } else {
                this._outputBuffer[this._outputTail++] = (byte)(i & 0x1F);
              } 
            } else {
              this._outputBuffer[this._outputTail++] = (byte)(i & 0xF);
            } 
          } else {
            this._outputBuffer[this._outputTail++] = (byte)(i & 0x7);
          } 
        } else {
          this._outputBuffer[this._outputTail++] = (byte)(i & 0x3);
        } 
      } else {
        this._outputBuffer[this._outputTail++] = (byte)(i & true);
      } 
    } 
  }
  
  protected int _write7BitBinaryWithLength(InputStream in, int bytesLeft, byte[] buffer) throws IOException {
    _writePositiveVInt(bytesLeft);
    int inputPtr = 0;
    int inputEnd = 0;
    int lastFullOffset = -7;
    while (bytesLeft >= 7) {
      if (inputPtr > lastFullOffset) {
        inputEnd = _readMore(in, buffer, inputPtr, inputEnd, bytesLeft);
        inputPtr = 0;
        if (inputEnd < 7) {
          bytesLeft -= inputEnd;
          break;
        } 
        lastFullOffset = inputEnd - 7;
      } 
      if (this._outputTail + 8 >= this._outputEnd)
        _flushBuffer(); 
      int i = buffer[inputPtr++];
      this._outputBuffer[this._outputTail++] = (byte)(i >> 1 & 0x7F);
      i = i << 8 | buffer[inputPtr++] & 0xFF;
      this._outputBuffer[this._outputTail++] = (byte)(i >> 2 & 0x7F);
      i = i << 8 | buffer[inputPtr++] & 0xFF;
      this._outputBuffer[this._outputTail++] = (byte)(i >> 3 & 0x7F);
      i = i << 8 | buffer[inputPtr++] & 0xFF;
      this._outputBuffer[this._outputTail++] = (byte)(i >> 4 & 0x7F);
      i = i << 8 | buffer[inputPtr++] & 0xFF;
      this._outputBuffer[this._outputTail++] = (byte)(i >> 5 & 0x7F);
      i = i << 8 | buffer[inputPtr++] & 0xFF;
      this._outputBuffer[this._outputTail++] = (byte)(i >> 6 & 0x7F);
      i = i << 8 | buffer[inputPtr++] & 0xFF;
      this._outputBuffer[this._outputTail++] = (byte)(i >> 7 & 0x7F);
      this._outputBuffer[this._outputTail++] = (byte)(i & 0x7F);
      bytesLeft -= 7;
    } 
    if (bytesLeft > 0) {
      if (this._outputTail + 7 >= this._outputEnd)
        _flushBuffer(); 
      inputEnd = _readMore(in, buffer, inputPtr, inputEnd, bytesLeft);
      inputPtr = 0;
      if (inputEnd > 0) {
        bytesLeft -= inputEnd;
        int i = buffer[inputPtr++];
        this._outputBuffer[this._outputTail++] = (byte)(i >> 1 & 0x7F);
        if (inputEnd > 1) {
          i = (i & true) << 8 | buffer[inputPtr++] & 0xFF;
          this._outputBuffer[this._outputTail++] = (byte)(i >> 2 & 0x7F);
          if (inputEnd > 2) {
            i = (i & 0x3) << 8 | buffer[inputPtr++] & 0xFF;
            this._outputBuffer[this._outputTail++] = (byte)(i >> 3 & 0x7F);
            if (inputEnd > 3) {
              i = (i & 0x7) << 8 | buffer[inputPtr++] & 0xFF;
              this._outputBuffer[this._outputTail++] = (byte)(i >> 4 & 0x7F);
              if (inputEnd > 4) {
                i = (i & 0xF) << 8 | buffer[inputPtr++] & 0xFF;
                this._outputBuffer[this._outputTail++] = (byte)(i >> 5 & 0x7F);
                if (inputEnd > 5) {
                  i = (i & 0x1F) << 8 | buffer[inputPtr++] & 0xFF;
                  this._outputBuffer[this._outputTail++] = (byte)(i >> 6 & 0x7F);
                  this._outputBuffer[this._outputTail++] = (byte)(i & 0x3F);
                } else {
                  this._outputBuffer[this._outputTail++] = (byte)(i & 0x1F);
                } 
              } else {
                this._outputBuffer[this._outputTail++] = (byte)(i & 0xF);
              } 
            } else {
              this._outputBuffer[this._outputTail++] = (byte)(i & 0x7);
            } 
          } else {
            this._outputBuffer[this._outputTail++] = (byte)(i & 0x3);
          } 
        } else {
          this._outputBuffer[this._outputTail++] = (byte)(i & true);
        } 
      } 
    } 
    return bytesLeft;
  }
  
  private int _readMore(InputStream in, byte[] readBuffer, int inputPtr, int inputEnd, int maxRead) throws IOException {
    int i = 0;
    while (inputPtr < inputEnd)
      readBuffer[i++] = readBuffer[inputPtr++]; 
    inputPtr = 0;
    inputEnd = i;
    maxRead = Math.min(maxRead, readBuffer.length);
    do {
      int length = maxRead - inputEnd;
      if (length == 0)
        break; 
      int count = in.read(readBuffer, inputEnd, length);
      if (count < 0)
        return inputEnd; 
      inputEnd += count;
    } while (inputEnd < 7);
    return inputEnd;
  }
  
  protected void _releaseBuffers() throws IOException {
    byte[] buf = this._outputBuffer;
    if (buf != null && this._bufferRecyclable) {
      this._outputBuffer = null;
      this._ioContext.releaseWriteEncodingBuffer(buf);
    } 
    SharedStringNode[] arrayOfSharedStringNode2 = this._seenNames;
    if (arrayOfSharedStringNode2 != null && arrayOfSharedStringNode2.length == 64) {
      this._seenNames = null;
      if (this._seenNameCount > 0)
        Arrays.fill(arrayOfSharedStringNode2, null); 
      this._smileBufferRecycler.releaseSeenNamesBuffer(arrayOfSharedStringNode2);
    } 
    SharedStringNode[] arrayOfSharedStringNode1 = this._seenStringValues;
    if (arrayOfSharedStringNode1 != null && arrayOfSharedStringNode1.length == 64) {
      this._seenStringValues = null;
      if (this._seenStringValueCount > 0)
        Arrays.fill(arrayOfSharedStringNode1, null); 
      this._smileBufferRecycler.releaseSeenStringValuesBuffer(arrayOfSharedStringNode1);
    } 
  }
  
  protected final void _flushBuffer() throws IOException {
    if (this._outputTail > 0) {
      this._bytesWritten += this._outputTail;
      this._out.write(this._outputBuffer, 0, this._outputTail);
      this._outputTail = 0;
    } 
  }
  
  private final int _findSeenName(String name) {
    int hash = name.hashCode();
    SharedStringNode head = this._seenNames[hash & this._seenNames.length - 1];
    if (head == null)
      return -1; 
    SharedStringNode node = head;
    if (node.value == name)
      return node.index; 
    while ((node = node.next) != null) {
      if (node.value == name)
        return node.index; 
    } 
    node = head;
    do {
      String value = node.value;
      if (value.hashCode() == hash && value.equals(name))
        return node.index; 
      node = node.next;
    } while (node != null);
    return -1;
  }
  
  private final void _addSeenName(String name) throws IOException {
    if (this._seenNameCount == this._seenNames.length)
      if (this._seenNameCount == 1024) {
        Arrays.fill(this._seenNames, null);
        this._seenNameCount = 0;
      } else {
        SharedStringNode[] arrayOfSharedStringNode = this._seenNames;
        this._seenNames = new SharedStringNode[1024];
        int mask = 1023;
        for (SharedStringNode node : arrayOfSharedStringNode) {
          while (node != null) {
            int ix = node.value.hashCode() & 0x3FF;
            SharedStringNode next = node.next;
            node.next = this._seenNames[ix];
            this._seenNames[ix] = node;
            node = next;
          } 
        } 
      }  
    int ref = this._seenNameCount;
    if (_validBackRef(ref)) {
      int ix = name.hashCode() & this._seenNames.length - 1;
      this._seenNames[ix] = new SharedStringNode(name, ref, this._seenNames[ix]);
    } 
    this._seenNameCount = ref + 1;
  }
  
  private final int _findSeenStringValue(String text) {
    int hash = text.hashCode();
    SharedStringNode head = this._seenStringValues[hash & this._seenStringValues.length - 1];
    if (head != null) {
      SharedStringNode node = head;
      do {
        if (node.value == text)
          return node.index; 
        node = node.next;
      } while (node != null);
      node = head;
      do {
        String value = node.value;
        if (value.hashCode() == hash && value.equals(text))
          return node.index; 
        node = node.next;
      } while (node != null);
    } 
    return -1;
  }
  
  private final void _addSeenStringValue(String text) throws IOException {
    if (this._seenStringValueCount == this._seenStringValues.length)
      if (this._seenStringValueCount == 1024) {
        Arrays.fill(this._seenStringValues, null);
        this._seenStringValueCount = 0;
      } else {
        SharedStringNode[] arrayOfSharedStringNode = this._seenStringValues;
        this._seenStringValues = new SharedStringNode[1024];
        int mask = 1023;
        for (SharedStringNode node : arrayOfSharedStringNode) {
          while (node != null) {
            int ix = node.value.hashCode() & 0x3FF;
            SharedStringNode next = node.next;
            node.next = this._seenStringValues[ix];
            this._seenStringValues[ix] = node;
            node = next;
          } 
        } 
      }  
    int ref = this._seenStringValueCount;
    if (_validBackRef(ref)) {
      int ix = text.hashCode() & this._seenStringValues.length - 1;
      this._seenStringValues[ix] = new SharedStringNode(text, ref, this._seenStringValues[ix]);
    } 
    this._seenStringValueCount = ref + 1;
  }
  
  private static final boolean _validBackRef(int index) { return ((index & 0xFF) < 254); }
  
  protected long outputOffset() { return (this._bytesWritten + this._outputTail); }
  
  protected UnsupportedOperationException _notSupported() { return new UnsupportedOperationException(); }
}
