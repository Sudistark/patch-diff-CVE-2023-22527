package com.nimbusds.jose;

import com.nimbusds.jose.util.Base64URL;
import com.nimbusds.jose.util.JSONObjectUtils;
import java.text.ParseException;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import net.jcip.annotations.Immutable;
import net.minidev.json.JSONObject;

@Immutable
public final class PlainHeader extends Header {
  private static final long serialVersionUID = 1L;
  
  private static final Set<String> REGISTERED_PARAMETER_NAMES;
  
  static  {
    p = new HashSet();
    p.add("alg");
    p.add("typ");
    p.add("cty");
    p.add("crit");
    REGISTERED_PARAMETER_NAMES = Collections.unmodifiableSet(p);
  }
  
  public PlainHeader() { this(null, null, null, null, null); }
  
  public PlainHeader(JOSEObjectType typ, String cty, Set<String> crit, Map<String, Object> customParams, Base64URL parsedBase64URL) { super(Algorithm.NONE, typ, cty, crit, customParams, parsedBase64URL); }
  
  public PlainHeader(PlainHeader plainHeader) {
    this(plainHeader
        .getType(), plainHeader
        .getContentType(), plainHeader
        .getCriticalParams(), plainHeader
        .getCustomParams(), plainHeader
        .getParsedBase64URL());
  }
  
  public static Set<String> getRegisteredParameterNames() { return REGISTERED_PARAMETER_NAMES; }
  
  public Algorithm getAlgorithm() { return Algorithm.NONE; }
  
  public static PlainHeader parse(JSONObject jsonObject) throws ParseException { return parse(jsonObject, null); }
  
  public static PlainHeader parse(JSONObject jsonObject, Base64URL parsedBase64URL) throws ParseException {
    Algorithm alg = Header.parseAlgorithm(jsonObject);
    if (alg != Algorithm.NONE)
      throw new ParseException("The algorithm \"alg\" header parameter must be \"none\"", 0); 
    Builder header = (new Builder()).parsedBase64URL(parsedBase64URL);
    for (String name : jsonObject.keySet()) {
      if ("alg".equals(name))
        continue; 
      if ("typ".equals(name)) {
        String typValue = JSONObjectUtils.getString(jsonObject, name);
        if (typValue != null)
          header = header.type(new JOSEObjectType(typValue)); 
        continue;
      } 
      if ("cty".equals(name)) {
        header = header.contentType(JSONObjectUtils.getString(jsonObject, name));
        continue;
      } 
      if ("crit".equals(name)) {
        List<String> critValues = JSONObjectUtils.getStringList(jsonObject, name);
        if (critValues != null)
          header = header.criticalParams(new HashSet(critValues)); 
        continue;
      } 
      header = header.customParam(name, jsonObject.get(name));
    } 
    return header.build();
  }
  
  public static PlainHeader parse(String jsonString) throws ParseException { return parse(jsonString, null); }
  
  public static PlainHeader parse(String jsonString, Base64URL parsedBase64URL) throws ParseException { return parse(JSONObjectUtils.parse(jsonString, 10000), parsedBase64URL); }
  
  public static PlainHeader parse(Base64URL base64URL) throws ParseException { return parse(base64URL.decodeToString(), base64URL); }
}
