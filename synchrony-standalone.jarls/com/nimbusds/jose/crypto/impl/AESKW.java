package com.nimbusds.jose.crypto.impl;

import com.nimbusds.jose.JOSEException;
import com.nimbusds.jose.util.KeyUtils;
import java.security.GeneralSecurityException;
import java.security.NoSuchAlgorithmException;
import java.security.Provider;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import net.jcip.annotations.ThreadSafe;

@ThreadSafe
public class AESKW {
  public static byte[] wrapCEK(SecretKey cek, SecretKey kek, Provider provider) throws JOSEException {
    try {
      Cipher cipher;
      if (provider != null) {
        cipher = Cipher.getInstance("AESWrap", provider);
      } else {
        cipher = Cipher.getInstance("AESWrap");
      } 
      cipher.init(3, kek);
      return cipher.wrap(cek);
    } catch (NoSuchAlgorithmException|javax.crypto.NoSuchPaddingException|java.security.InvalidKeyException|javax.crypto.IllegalBlockSizeException e) {
      throw new JOSEException("Couldn't wrap AES key: " + e.getMessage(), e);
    } 
  }
  
  public static SecretKey unwrapCEK(SecretKey kek, byte[] encryptedCEK, Provider provider) throws JOSEException {
    try {
      Cipher cipher;
      if (provider != null) {
        cipher = Cipher.getInstance("AESWrap", provider);
      } else {
        cipher = Cipher.getInstance("AESWrap");
      } 
      cipher.init(4, KeyUtils.toAESKey(kek));
      return (SecretKey)cipher.unwrap(encryptedCEK, "AES", 3);
    } catch (NoSuchAlgorithmException|javax.crypto.NoSuchPaddingException|java.security.InvalidKeyException e) {
      throw new JOSEException("Couldn't unwrap AES key: " + e.getMessage(), e);
    } 
  }
}
