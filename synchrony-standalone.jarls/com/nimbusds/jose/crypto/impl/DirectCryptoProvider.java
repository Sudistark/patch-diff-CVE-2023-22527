package com.nimbusds.jose.crypto.impl;

import com.nimbusds.jose.EncryptionMethod;
import com.nimbusds.jose.JWEAlgorithm;
import com.nimbusds.jose.KeyLengthException;
import com.nimbusds.jose.jca.JWEJCAContext;
import com.nimbusds.jose.util.ByteUtils;
import java.util.Collections;
import java.util.LinkedHashSet;
import java.util.Set;
import javax.crypto.SecretKey;

public abstract class DirectCryptoProvider extends BaseJWEProvider {
  public static final Set<JWEAlgorithm> SUPPORTED_ALGORITHMS;
  
  public static final Set<EncryptionMethod> SUPPORTED_ENCRYPTION_METHODS = ContentCryptoProvider.SUPPORTED_ENCRYPTION_METHODS;
  
  private final SecretKey cek;
  
  static  {
    algs = new LinkedHashSet();
    algs.add(JWEAlgorithm.DIR);
    SUPPORTED_ALGORITHMS = Collections.unmodifiableSet(algs);
  }
  
  private static Set<EncryptionMethod> getCompatibleEncryptionMethods(int cekLength) throws KeyLengthException {
    Set<EncryptionMethod> encs = (Set)ContentCryptoProvider.COMPATIBLE_ENCRYPTION_METHODS.get(Integer.valueOf(cekLength));
    if (encs == null)
      throw new KeyLengthException("The Content Encryption Key length must be 128 bits (16 bytes), 192 bits (24 bytes), 256 bits (32 bytes), 384 bits (48 bytes) or 512 bites (64 bytes)"); 
    return encs;
  }
  
  protected DirectCryptoProvider(SecretKey cek) throws KeyLengthException {
    super(SUPPORTED_ALGORITHMS, getCompatibleEncryptionMethods(ByteUtils.bitLength(cek.getEncoded())));
    this.cek = cek;
  }
  
  public SecretKey getKey() { return this.cek; }
}
