package com.nimbusds.jose.jwk.gen;

import com.nimbusds.jose.JOSEException;
import com.nimbusds.jose.jwk.Curve;
import com.nimbusds.jose.jwk.ECKey;
import com.nimbusds.jose.jwk.JWK;
import java.security.GeneralSecurityException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.interfaces.ECPublicKey;
import java.security.spec.ECParameterSpec;

public class ECKeyGenerator extends JWKGenerator<ECKey> {
  private final Curve crv;
  
  public ECKeyGenerator(Curve crv) {
    if (crv == null)
      throw new IllegalArgumentException("The curve must not be null"); 
    this.crv = crv;
  }
  
  public ECKey generate() throws JOSEException {
    KeyPairGenerator generator;
    ECParameterSpec ecSpec = this.crv.toECParameterSpec();
    try {
      if (this.keyStore != null) {
        generator = KeyPairGenerator.getInstance("EC", this.keyStore.getProvider());
      } else {
        generator = KeyPairGenerator.getInstance("EC");
      } 
      generator.initialize(ecSpec);
    } catch (NoSuchAlgorithmException|java.security.InvalidAlgorithmParameterException e) {
      throw new JOSEException(e.getMessage(), e);
    } 
    KeyPair kp = generator.generateKeyPair();
    ECKey.Builder builder = (new ECKey.Builder(this.crv, (ECPublicKey)kp.getPublic())).privateKey(kp.getPrivate()).keyUse(this.use).keyOperations(this.ops).algorithm(this.alg).keyStore(this.keyStore);
    if (this.x5tKid) {
      builder.keyIDFromThumbprint();
    } else {
      builder.keyID(this.kid);
    } 
    return builder.build();
  }
}
