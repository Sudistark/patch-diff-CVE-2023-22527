package com.nimbusds.jose.jwk.source;

import com.nimbusds.jose.RemoteKeySourceException;
import com.nimbusds.jose.jwk.JWK;
import com.nimbusds.jose.jwk.JWKMatcher;
import com.nimbusds.jose.jwk.JWKSelector;
import com.nimbusds.jose.jwk.JWKSet;
import com.nimbusds.jose.proc.SecurityContext;
import com.nimbusds.jose.util.DefaultResourceRetriever;
import com.nimbusds.jose.util.Resource;
import com.nimbusds.jose.util.ResourceRetriever;
import java.io.IOException;
import java.net.URL;
import java.text.ParseException;
import java.util.Collections;
import java.util.List;
import java.util.Set;
import net.jcip.annotations.ThreadSafe;

@ThreadSafe
public class RemoteJWKSet<C extends SecurityContext> extends Object implements JWKSource<C> {
  public static final int DEFAULT_HTTP_CONNECT_TIMEOUT = 500;
  
  public static final int DEFAULT_HTTP_READ_TIMEOUT = 500;
  
  public static final int DEFAULT_HTTP_SIZE_LIMIT = 51200;
  
  private final URL jwkSetURL;
  
  private final JWKSetCache jwkSetCache;
  
  private final ResourceRetriever jwkSetRetriever;
  
  public RemoteJWKSet(URL jwkSetURL) { this(jwkSetURL, null); }
  
  public RemoteJWKSet(URL jwkSetURL, ResourceRetriever resourceRetriever) { this(jwkSetURL, resourceRetriever, null); }
  
  public RemoteJWKSet(URL jwkSetURL, ResourceRetriever resourceRetriever, JWKSetCache jwkSetCache) {
    if (jwkSetURL == null)
      throw new IllegalArgumentException("The JWK set URL must not be null"); 
    this.jwkSetURL = jwkSetURL;
    if (resourceRetriever != null) {
      this.jwkSetRetriever = resourceRetriever;
    } else {
      this.jwkSetRetriever = new DefaultResourceRetriever(500, 500, 51200);
    } 
    if (jwkSetCache != null) {
      this.jwkSetCache = jwkSetCache;
    } else {
      this.jwkSetCache = new DefaultJWKSetCache();
    } 
  }
  
  private JWKSet updateJWKSetFromURL() throws RemoteKeySourceException {
    JWKSet jwkSet;
    Resource res;
    try {
      res = this.jwkSetRetriever.retrieveResource(this.jwkSetURL);
    } catch (IOException e) {
      throw new RemoteKeySourceException("Couldn't retrieve remote JWK set: " + jwkSet.getMessage(), jwkSet);
    } 
    try {
      jwkSet = JWKSet.parse(res.getContent());
    } catch (ParseException e) {
      throw new RemoteKeySourceException("Couldn't parse remote JWK set: " + e.getMessage(), e);
    } 
    this.jwkSetCache.put(jwkSet);
    return jwkSet;
  }
  
  public URL getJWKSetURL() { return this.jwkSetURL; }
  
  public ResourceRetriever getResourceRetriever() { return this.jwkSetRetriever; }
  
  public JWKSetCache getJWKSetCache() { return this.jwkSetCache; }
  
  public JWKSet getCachedJWKSet() throws RemoteKeySourceException { return this.jwkSetCache.get(); }
  
  protected static String getFirstSpecifiedKeyID(JWKMatcher jwkMatcher) {
    Set<String> keyIDs = jwkMatcher.getKeyIDs();
    if (keyIDs == null || keyIDs.isEmpty())
      return null; 
    for (String id : keyIDs) {
      if (id != null)
        return id; 
    } 
    return null;
  }
  
  public List<JWK> get(JWKSelector jwkSelector, C context) throws RemoteKeySourceException {
    JWKSet jwkSet = this.jwkSetCache.get();
    if (this.jwkSetCache.requiresRefresh() || jwkSet == null)
      try {
        jwkSet = updateJWKSetFromURL();
      } catch (Exception ex) {
        if (jwkSet == null)
          throw ex; 
      }  
    List<JWK> matches = jwkSelector.select(jwkSet);
    if (!matches.isEmpty())
      return matches; 
    String soughtKeyID = getFirstSpecifiedKeyID(jwkSelector.getMatcher());
    if (soughtKeyID == null)
      return Collections.emptyList(); 
    if (jwkSet.getKeyByKeyId(soughtKeyID) != null)
      return Collections.emptyList(); 
    jwkSet = updateJWKSetFromURL();
    if (jwkSet == null)
      return Collections.emptyList(); 
    return jwkSelector.select(jwkSet);
  }
}
