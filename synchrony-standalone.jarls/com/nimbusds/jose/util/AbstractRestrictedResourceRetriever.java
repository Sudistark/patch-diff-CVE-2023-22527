package com.nimbusds.jose.util;

import java.util.List;
import java.util.Map;
import net.jcip.annotations.ThreadSafe;

@ThreadSafe
public abstract class AbstractRestrictedResourceRetriever implements RestrictedResourceRetriever {
  private int connectTimeout;
  
  private int readTimeout;
  
  private int sizeLimit;
  
  private Map<String, List<String>> headers;
  
  public AbstractRestrictedResourceRetriever(int connectTimeout, int readTimeout, int sizeLimit) {
    setConnectTimeout(connectTimeout);
    setReadTimeout(readTimeout);
    setSizeLimit(sizeLimit);
  }
  
  public int getConnectTimeout() { return this.connectTimeout; }
  
  public void setConnectTimeout(int connectTimeoutMs) {
    if (connectTimeoutMs < 0)
      throw new IllegalArgumentException("The connect timeout must not be negative"); 
    this.connectTimeout = connectTimeoutMs;
  }
  
  public int getReadTimeout() { return this.readTimeout; }
  
  public void setReadTimeout(int readTimeoutMs) {
    if (readTimeoutMs < 0)
      throw new IllegalArgumentException("The read timeout must not be negative"); 
    this.readTimeout = readTimeoutMs;
  }
  
  public int getSizeLimit() { return this.sizeLimit; }
  
  public void setSizeLimit(int sizeLimitBytes) {
    if (sizeLimitBytes < 0)
      throw new IllegalArgumentException("The size limit must not be negative"); 
    this.sizeLimit = sizeLimitBytes;
  }
  
  public Map<String, List<String>> getHeaders() { return this.headers; }
  
  public void setHeaders(Map<String, List<String>> headers) { this.headers = headers; }
}
