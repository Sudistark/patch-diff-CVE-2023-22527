package com.nimbusds.jose.util;

import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.Proxy;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.util.List;
import java.util.Map;
import net.jcip.annotations.ThreadSafe;

@ThreadSafe
public class DefaultResourceRetriever extends AbstractRestrictedResourceRetriever implements RestrictedResourceRetriever {
  private boolean disconnectAfterUse;
  
  private Proxy proxy;
  
  public DefaultResourceRetriever() { this(0, 0); }
  
  public DefaultResourceRetriever(int connectTimeout, int readTimeout) { this(connectTimeout, readTimeout, 0); }
  
  public DefaultResourceRetriever(int connectTimeout, int readTimeout, int sizeLimit) { this(connectTimeout, readTimeout, sizeLimit, true); }
  
  public DefaultResourceRetriever(int connectTimeout, int readTimeout, int sizeLimit, boolean disconnectAfterUse) {
    super(connectTimeout, readTimeout, sizeLimit);
    this.disconnectAfterUse = disconnectAfterUse;
  }
  
  public boolean disconnectsAfterUse() { return this.disconnectAfterUse; }
  
  public void setDisconnectsAfterUse(boolean disconnectAfterUse) { this.disconnectAfterUse = disconnectAfterUse; }
  
  public Proxy getProxy() { return this.proxy; }
  
  public void setProxy(Proxy proxy) { this.proxy = proxy; }
  
  public Resource retrieveResource(URL url) throws IOException {
    con = null;
    try {
      String content;
      con = openConnection(url);
      con.setConnectTimeout(getConnectTimeout());
      con.setReadTimeout(getReadTimeout());
      if (getHeaders() != null && !getHeaders().isEmpty())
        for (Map.Entry<String, List<String>> entry : getHeaders().entrySet()) {
          for (String value : (List)entry.getValue())
            con.addRequestProperty((String)entry.getKey(), value); 
        }  
      try (InputStream inputStream = getInputStream(con, getSizeLimit())) {
        content = IOUtils.readInputStreamToString(inputStream, StandardCharsets.UTF_8);
      } 
      int statusCode = con.getResponseCode();
      String statusMessage = con.getResponseMessage();
      if (statusCode > 299 || statusCode < 200)
        throw new IOException("HTTP " + statusCode + ": " + statusMessage); 
      return new Resource(content, con.getContentType());
    } catch (ClassCastException e) {
      String content;
      throw new IOException("Couldn't open HTTP(S) connection: " + content.getMessage(), content);
    } finally {
      if (this.disconnectAfterUse && con != null)
        con.disconnect(); 
    } 
  }
  
  protected HttpURLConnection openConnection(URL url) throws IOException {
    if (this.proxy != null)
      return (HttpURLConnection)url.openConnection(this.proxy); 
    return (HttpURLConnection)url.openConnection();
  }
  
  private InputStream getInputStream(HttpURLConnection con, int sizeLimit) throws IOException {
    InputStream inputStream = con.getInputStream();
    return (sizeLimit > 0) ? new BoundedInputStream(inputStream, getSizeLimit()) : inputStream;
  }
}
