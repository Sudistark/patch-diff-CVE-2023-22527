package com.nimbusds.jose.jca;

import com.nimbusds.jose.Algorithm;
import com.nimbusds.jose.EncryptionMethod;
import com.nimbusds.jose.JWEAlgorithm;
import com.nimbusds.jose.JWSAlgorithm;
import java.security.NoSuchAlgorithmException;
import java.security.Provider;
import java.security.Security;
import javax.crypto.Cipher;

public final class JCASupport {
  public static boolean isUnlimitedStrength() {
    try {
      return (Cipher.getMaxAllowedKeyLength("AES") >= 256);
    } catch (NoSuchAlgorithmException e) {
      return false;
    } 
  }
  
  public static boolean isSupported(Algorithm alg) {
    if (alg instanceof JWSAlgorithm)
      return isSupported((JWSAlgorithm)alg); 
    if (alg instanceof JWEAlgorithm)
      return isSupported((JWEAlgorithm)alg); 
    if (alg instanceof EncryptionMethod)
      return isSupported((EncryptionMethod)alg); 
    throw new IllegalArgumentException("Unexpected algorithm class: " + alg.getClass().getCanonicalName());
  }
  
  public static boolean isSupported(Algorithm alg, Provider provider) {
    if (alg instanceof JWSAlgorithm)
      return isSupported((JWSAlgorithm)alg, provider); 
    if (alg instanceof JWEAlgorithm)
      return isSupported((JWEAlgorithm)alg, provider); 
    if (alg instanceof EncryptionMethod)
      return isSupported((EncryptionMethod)alg, provider); 
    throw new IllegalArgumentException("Unexpected algorithm class: " + alg.getClass().getCanonicalName());
  }
  
  public static boolean isSupported(JWSAlgorithm alg) {
    if (alg.getName().equals(Algorithm.NONE.getName()))
      return true; 
    for (Provider p : Security.getProviders()) {
      if (isSupported(alg, p))
        return true; 
    } 
    return false;
  }
  
  public static boolean isSupported(JWSAlgorithm alg, Provider provider) {
    if (JWSAlgorithm.Family.HMAC_SHA.contains(alg)) {
      String jcaName;
      if (alg.equals(JWSAlgorithm.HS256)) {
        jcaName = "HMACSHA256";
      } else if (alg.equals(JWSAlgorithm.HS384)) {
        jcaName = "HMACSHA384";
      } else if (alg.equals(JWSAlgorithm.HS512)) {
        jcaName = "HMACSHA512";
      } else {
        return false;
      } 
      return (provider.getService("KeyGenerator", jcaName) != null);
    } 
    if (JWSAlgorithm.Family.RSA.contains(alg)) {
      String jcaName, jcaNameAlt = null;
      if (alg.equals(JWSAlgorithm.RS256)) {
        jcaName = "SHA256withRSA";
      } else if (alg.equals(JWSAlgorithm.RS384)) {
        jcaName = "SHA384withRSA";
      } else if (alg.equals(JWSAlgorithm.RS512)) {
        jcaName = "SHA512withRSA";
      } else if (alg.equals(JWSAlgorithm.PS256)) {
        jcaName = "RSASSA-PSS";
        jcaNameAlt = "SHA256withRSAandMGF1";
      } else if (alg.equals(JWSAlgorithm.PS384)) {
        jcaName = "RSASSA-PSS";
        jcaNameAlt = "SHA384withRSAandMGF1";
      } else if (alg.equals(JWSAlgorithm.PS512)) {
        jcaName = "RSASSA-PSS";
        jcaNameAlt = "SHA512withRSAandMGF1";
      } else {
        return false;
      } 
      return (provider.getService("Signature", jcaName) != null || (jcaNameAlt != null && provider
        .getService("Signature", jcaNameAlt) != null));
    } 
    if (JWSAlgorithm.Family.EC.contains(alg)) {
      String jcaName;
      if (alg.equals(JWSAlgorithm.ES256)) {
        jcaName = "SHA256withECDSA";
      } else if (alg.equals(JWSAlgorithm.ES384)) {
        jcaName = "SHA384withECDSA";
      } else if (alg.equals(JWSAlgorithm.ES512)) {
        jcaName = "SHA512withECDSA";
      } else {
        return false;
      } 
      return (provider.getService("Signature", jcaName) != null);
    } 
    return false;
  }
  
  public static boolean isSupported(JWEAlgorithm alg) {
    for (Provider p : Security.getProviders()) {
      if (isSupported(alg, p))
        return true; 
    } 
    return false;
  }
  
  public static boolean isSupported(JWEAlgorithm alg, Provider provider) {
    if (JWEAlgorithm.Family.RSA.contains(alg)) {
      String jcaName;
      if (alg.equals(JWEAlgorithm.RSA1_5)) {
        jcaName = "RSA/ECB/PKCS1Padding";
      } else if (alg.equals(JWEAlgorithm.RSA_OAEP)) {
        jcaName = "RSA/ECB/OAEPWithSHA-1AndMGF1Padding";
      } else if (alg.equals(JWEAlgorithm.RSA_OAEP_256)) {
        jcaName = "RSA/ECB/OAEPWithSHA-256AndMGF1Padding";
      } else {
        return false;
      } 
      try {
        Cipher.getInstance(jcaName, provider);
      } catch (NoSuchAlgorithmException|javax.crypto.NoSuchPaddingException e) {
        return false;
      } 
      return true;
    } 
    if (JWEAlgorithm.Family.AES_KW.contains(alg))
      return (provider.getService("Cipher", "AESWrap") != null); 
    if (JWEAlgorithm.Family.ECDH_ES.contains(alg))
      return (provider.getService("KeyAgreement", "ECDH") != null); 
    if (JWEAlgorithm.Family.AES_GCM_KW.contains(alg)) {
      try {
        Cipher.getInstance("AES/GCM/NoPadding", provider);
      } catch (NoSuchAlgorithmException|javax.crypto.NoSuchPaddingException e) {
        return false;
      } 
      return true;
    } 
    if (JWEAlgorithm.Family.PBES2.contains(alg)) {
      String hmac;
      if (alg.equals(JWEAlgorithm.PBES2_HS256_A128KW)) {
        hmac = "HmacSHA256";
      } else if (alg.equals(JWEAlgorithm.PBES2_HS384_A192KW)) {
        hmac = "HmacSHA384";
      } else {
        hmac = "HmacSHA512";
      } 
      return (provider.getService("KeyGenerator", hmac) != null);
    } 
    if (JWEAlgorithm.DIR.equals(alg))
      return true; 
    return false;
  }
  
  public static boolean isSupported(EncryptionMethod enc) {
    for (Provider p : Security.getProviders()) {
      if (isSupported(enc, p))
        return true; 
    } 
    return false;
  }
  
  public static boolean isSupported(EncryptionMethod enc, Provider provider) {
    if (EncryptionMethod.Family.AES_CBC_HMAC_SHA.contains(enc)) {
      String hmac;
      try {
        Cipher.getInstance("AES/CBC/PKCS5Padding", provider);
      } catch (NoSuchAlgorithmException|javax.crypto.NoSuchPaddingException e) {
        return false;
      } 
      if (enc.equals(EncryptionMethod.A128CBC_HS256)) {
        hmac = "HmacSHA256";
      } else if (enc.equals(EncryptionMethod.A192CBC_HS384)) {
        hmac = "HmacSHA384";
      } else {
        hmac = "HmacSHA512";
      } 
      return (provider.getService("KeyGenerator", hmac) != null);
    } 
    if (EncryptionMethod.Family.AES_GCM.contains(enc)) {
      try {
        Cipher.getInstance("AES/GCM/NoPadding", provider);
      } catch (NoSuchAlgorithmException|javax.crypto.NoSuchPaddingException e) {
        return false;
      } 
      return true;
    } 
    return false;
  }
}
