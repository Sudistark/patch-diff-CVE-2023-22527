package com.mchange.v1.identicator;

import com.mchange.v1.util.SimpleMapEntry;
import java.util.AbstractMap;
import java.util.Map;
import java.util.Set;

abstract class IdMap extends AbstractMap implements Map {
  Map inner;
  
  Identicator id;
  
  protected IdMap(Map paramMap, Identicator paramIdenticator) {
    this.inner = paramMap;
    this.id = paramIdenticator;
  }
  
  public Object put(Object paramObject1, Object paramObject2) { return this.inner.put(createIdKey(paramObject1), paramObject2); }
  
  public boolean containsKey(Object paramObject) { return this.inner.containsKey(createIdKey(paramObject)); }
  
  public Object get(Object paramObject) { return this.inner.get(createIdKey(paramObject)); }
  
  public Object remove(Object paramObject) { return this.inner.remove(createIdKey(paramObject)); }
  
  protected Object removeIdHashKey(IdHashKey paramIdHashKey) { return this.inner.remove(paramIdHashKey); }
  
  public Set entrySet() { return new UserEntrySet(this, null); }
  
  protected final Set internalEntrySet() { return this.inner.entrySet(); }
  
  protected abstract IdHashKey createIdKey(Object paramObject);
  
  protected final Map.Entry createIdEntry(Object paramObject1, Object paramObject2) { return new SimpleMapEntry(createIdKey(paramObject1), paramObject2); }
  
  protected final Map.Entry createIdEntry(Map.Entry paramEntry) { return createIdEntry(paramEntry.getKey(), paramEntry.getValue()); }
}
