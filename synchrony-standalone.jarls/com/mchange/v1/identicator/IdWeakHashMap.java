package com.mchange.v1.identicator;

import java.lang.ref.ReferenceQueue;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

public final class IdWeakHashMap extends IdMap implements Map {
  ReferenceQueue rq;
  
  public IdWeakHashMap(Identicator paramIdenticator) {
    super(new HashMap(), paramIdenticator);
    this.rq = new ReferenceQueue();
  }
  
  public int size() {
    cleanCleared();
    return super.size();
  }
  
  public boolean isEmpty() {
    try {
      return super.isEmpty();
    } finally {
      cleanCleared();
    } 
  }
  
  public boolean containsKey(Object paramObject) {
    try {
      return super.containsKey(paramObject);
    } finally {
      cleanCleared();
    } 
  }
  
  public boolean containsValue(Object paramObject) {
    try {
      return super.containsValue(paramObject);
    } finally {
      cleanCleared();
    } 
  }
  
  public Object get(Object paramObject) {
    try {
      return super.get(paramObject);
    } finally {
      cleanCleared();
    } 
  }
  
  public Object put(Object paramObject1, Object paramObject2) {
    try {
      return super.put(paramObject1, paramObject2);
    } finally {
      cleanCleared();
    } 
  }
  
  public Object remove(Object paramObject) {
    try {
      return super.remove(paramObject);
    } finally {
      cleanCleared();
    } 
  }
  
  public void putAll(Map paramMap) {
    try {
      super.putAll(paramMap);
    } finally {
      cleanCleared();
    } 
  }
  
  public void clear() {
    try {
      super.clear();
    } finally {
      cleanCleared();
    } 
  }
  
  public Set keySet() {
    try {
      return super.keySet();
    } finally {
      cleanCleared();
    } 
  }
  
  public Collection values() {
    try {
      return super.values();
    } finally {
      cleanCleared();
    } 
  }
  
  public Set entrySet() {
    try {
      return new WeakUserEntrySet(this, null);
    } finally {
      cleanCleared();
    } 
  }
  
  public boolean equals(Object paramObject) {
    try {
      return super.equals(paramObject);
    } finally {
      cleanCleared();
    } 
  }
  
  public int hashCode() {
    try {
      return super.hashCode();
    } finally {
      cleanCleared();
    } 
  }
  
  protected IdHashKey createIdKey(Object paramObject) { return new WeakIdHashKey(paramObject, this.id, this.rq); }
  
  private void cleanCleared() {
    WeakIdHashKey.Ref ref;
    while ((ref = (WeakIdHashKey.Ref)this.rq.poll()) != null)
      removeIdHashKey(ref.getKey()); 
  }
}
