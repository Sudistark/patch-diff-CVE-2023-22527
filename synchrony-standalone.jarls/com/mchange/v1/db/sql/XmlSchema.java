package com.mchange.v1.db.sql;

import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

public class XmlSchema implements Schema {
  private static final int CREATE = 0;
  
  private static final int DROP = 1;
  
  List createStmts;
  
  List dropStmts;
  
  Map appMap;
  
  public XmlSchema(URL paramURL) throws SAXException, IOException, ParserConfigurationException { parse(paramURL.openStream()); }
  
  public XmlSchema(InputStream paramInputStream) throws SAXException, IOException, ParserConfigurationException { parse(paramInputStream); }
  
  public XmlSchema() {}
  
  public void parse(InputStream paramInputStream) throws SAXException, IOException, ParserConfigurationException {
    this.createStmts = new ArrayList();
    this.dropStmts = new ArrayList();
    this.appMap = new HashMap();
    InputSource inputSource = new InputSource();
    inputSource.setByteStream(paramInputStream);
    inputSource.setSystemId(XmlSchema.class.getResource("schema.dtd").toExternalForm());
    SAXParser sAXParser = SAXParserFactory.newInstance().newSAXParser();
    MySaxHandler mySaxHandler = new MySaxHandler(this);
    sAXParser.parse(inputSource, mySaxHandler);
  }
  
  private void doStatementList(List paramList, Connection paramConnection) throws SQLException {
    if (paramList != null) {
      statement = null;
      try {
        statement = paramConnection.createStatement();
        for (Iterator iterator = paramList.iterator(); iterator.hasNext();)
          statement.executeUpdate((String)iterator.next()); 
        paramConnection.commit();
      } catch (SQLException sQLException) {
        ConnectionUtils.attemptRollback(paramConnection);
        sQLException.fillInStackTrace();
        throw sQLException;
      } finally {
        StatementUtils.attemptClose(statement);
      } 
    } 
  }
  
  public String getStatementText(String paramString1, String paramString2) {
    SqlApp sqlApp = (SqlApp)this.appMap.get(paramString1);
    String str = null;
    if (sqlApp != null)
      str = sqlApp.getStatementText(paramString2); 
    return str;
  }
  
  public void createSchema(Connection paramConnection) throws SQLException { doStatementList(this.createStmts, paramConnection); }
  
  public void dropSchema(Connection paramConnection) throws SQLException { doStatementList(this.dropStmts, paramConnection); }
  
  public static void main(String[] paramArrayOfString) {
    try {
      XmlSchema xmlSchema = new XmlSchema(XmlSchema.class.getResource("/com/mchange/v1/hjug/hjugschema.xml"));
    } catch (Exception exception) {
      exception.printStackTrace();
    } 
  }
}
