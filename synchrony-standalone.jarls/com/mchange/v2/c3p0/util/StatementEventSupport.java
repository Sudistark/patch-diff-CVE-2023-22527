package com.mchange.v2.c3p0.util;

import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import javax.sql.PooledConnection;
import javax.sql.StatementEvent;
import javax.sql.StatementEventListener;

public class StatementEventSupport {
  PooledConnection source;
  
  HashSet mlisteners;
  
  public StatementEventSupport(PooledConnection source) {
    this.mlisteners = new HashSet();
    this.source = source;
  }
  
  public void addStatementEventListener(StatementEventListener mlistener) { this.mlisteners.add(mlistener); }
  
  public void removeStatementEventListener(StatementEventListener mlistener) { this.mlisteners.remove(mlistener); }
  
  public void printListeners() { System.err.println(this.mlisteners); }
  
  public int getListenerCount() { return this.mlisteners.size(); }
  
  public void fireStatementClosed(PreparedStatement ps) {
    Set mlCopy;
    synchronized (this) {
      mlCopy = (Set)this.mlisteners.clone();
    } 
    StatementEvent evt = new StatementEvent(this.source, ps);
    for (Iterator i = mlCopy.iterator(); i.hasNext(); ) {
      StatementEventListener cl = (StatementEventListener)i.next();
      cl.statementClosed(evt);
    } 
  }
  
  public void fireStatementErrorOccurred(PreparedStatement ps, SQLException error) {
    Set mlCopy;
    synchronized (this) {
      mlCopy = (Set)this.mlisteners.clone();
    } 
    StatementEvent evt = new StatementEvent(this.source, ps, error);
    for (Iterator i = mlCopy.iterator(); i.hasNext(); ) {
      StatementEventListener cl = (StatementEventListener)i.next();
      cl.statementErrorOccurred(evt);
    } 
  }
}
