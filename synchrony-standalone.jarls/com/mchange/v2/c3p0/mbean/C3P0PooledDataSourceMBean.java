package com.mchange.v2.c3p0.mbean;

import java.sql.SQLException;
import javax.naming.NamingException;

public interface C3P0PooledDataSourceMBean {
  void setJndiName(String paramString) throws NamingException;
  
  String getJndiName();
  
  String getDescription();
  
  void setDescription(String paramString) throws NamingException;
  
  String getDriverClass();
  
  void setDriverClass(String paramString) throws NamingException;
  
  String getJdbcUrl();
  
  void setJdbcUrl(String paramString) throws NamingException;
  
  String getUser();
  
  void setUser(String paramString) throws NamingException;
  
  String getPassword();
  
  void setPassword(String paramString) throws NamingException;
  
  int getCheckoutTimeout();
  
  void setCheckoutTimeout(int paramInt) throws NamingException;
  
  int getAcquireIncrement();
  
  void setAcquireIncrement(int paramInt) throws NamingException;
  
  int getAcquireRetryAttempts();
  
  void setAcquireRetryAttempts(int paramInt) throws NamingException;
  
  int getAcquireRetryDelay();
  
  void setAcquireRetryDelay(int paramInt) throws NamingException;
  
  boolean isAutoCommitOnClose();
  
  void setAutoCommitOnClose(boolean paramBoolean) throws NamingException;
  
  String getConnectionTesterClassName();
  
  void setConnectionTesterClassName(String paramString) throws NamingException;
  
  String getAutomaticTestTable();
  
  void setAutomaticTestTable(String paramString) throws NamingException;
  
  boolean isForceIgnoreUnresolvedTransactions();
  
  void setForceIgnoreUnresolvedTransactions(boolean paramBoolean) throws NamingException;
  
  int getIdleConnectionTestPeriod();
  
  void setIdleConnectionTestPeriod(int paramInt) throws NamingException;
  
  int getInitialPoolSize();
  
  void setInitialPoolSize(int paramInt) throws NamingException;
  
  int getMaxIdleTime();
  
  void setMaxIdleTime(int paramInt) throws NamingException;
  
  int getMaxPoolSize();
  
  void setMaxPoolSize(int paramInt) throws NamingException;
  
  int getMaxStatements();
  
  void setMaxStatements(int paramInt) throws NamingException;
  
  int getMaxStatementsPerConnection();
  
  void setMaxStatementsPerConnection(int paramInt) throws NamingException;
  
  int getMinPoolSize();
  
  void setMinPoolSize(int paramInt) throws NamingException;
  
  int getPropertyCycle();
  
  void setPropertyCycle(int paramInt) throws NamingException;
  
  boolean isBreakAfterAcquireFailure();
  
  void setBreakAfterAcquireFailure(boolean paramBoolean) throws NamingException;
  
  boolean isTestConnectionOnCheckout();
  
  void setTestConnectionOnCheckout(boolean paramBoolean) throws NamingException;
  
  boolean isTestConnectionOnCheckin();
  
  void setTestConnectionOnCheckin(boolean paramBoolean) throws NamingException;
  
  boolean isUsesTraditionalReflectiveProxies();
  
  void setUsesTraditionalReflectiveProxies(boolean paramBoolean) throws NamingException;
  
  String getPreferredTestQuery();
  
  void setPreferredTestQuery(String paramString) throws NamingException;
  
  int getNumHelperThreads();
  
  void setNumHelperThreads(int paramInt) throws NamingException;
  
  String getFactoryClassLocation();
  
  void setFactoryClassLocation(String paramString) throws NamingException;
  
  int getNumUserPools();
  
  int getNumConnectionsDefaultUser();
  
  int getNumIdleConnectionsDefaultUser();
  
  int getNumBusyConnectionsDefaultUser();
  
  int getNumUnclosedOrphanedConnectionsDefaultUser();
  
  int getNumConnections(String paramString1, String paramString2) throws SQLException;
  
  int getNumIdleConnections(String paramString1, String paramString2) throws SQLException;
  
  int getNumBusyConnections(String paramString1, String paramString2) throws SQLException;
  
  int getNumUnclosedOrphanedConnections(String paramString1, String paramString2) throws SQLException;
  
  int getNumBusyConnectionsAllUsers();
  
  int getNumIdleConnectionsAllUsers();
  
  int getNumConnectionsAllUsers();
  
  int getNumUnclosedOrphanedConnectionsAllUsers();
  
  void softResetDefaultUser() throws SQLException;
  
  void softReset(String paramString1, String paramString2) throws SQLException;
  
  void softResetAllUsers() throws SQLException;
  
  void hardReset() throws SQLException;
  
  void close() throws SQLException;
  
  void create() throws SQLException;
  
  void start() throws SQLException;
  
  void stop() throws SQLException;
  
  void destroy() throws SQLException;
}
