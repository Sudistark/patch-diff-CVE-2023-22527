package com.mchange.v2.c3p0.codegen;

import com.mchange.v1.xml.DomParseUtils;
import com.mchange.v2.codegen.bean.ParsedPropertyBeanDocument;
import com.mchange.v2.codegen.bean.PropertyReferenceableExtension;
import com.mchange.v2.codegen.bean.PropsToStringGeneratorExtension;
import com.mchange.v2.codegen.bean.SimplePropertyBeanGenerator;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.Writer;
import java.util.Arrays;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

public class BeangenDataSourceGenerator {
  public static void main(String[] argv) {
    try {
      if (argv.length != 2) {
        System.err.println("java " + BeangenDataSourceGenerator.class.getName() + " <infile.xml> <OutputFile.java>");
        return;
      } 
      File outFile = new File(argv[1]);
      File parentDir = outFile.getParentFile();
      if (!parentDir.exists()) {
        System.err.println("Warning: making parent directory: " + parentDir);
        parentDir.mkdirs();
      } 
      DocumentBuilderFactory fact = DocumentBuilderFactory.newInstance();
      DocumentBuilder db = fact.newDocumentBuilder();
      Document doc = db.parse(new File(argv[0]));
      ParsedPropertyBeanDocument parsed = new ParsedPropertyBeanDocument(doc);
      Writer w = new BufferedWriter(new FileWriter(outFile));
      SimplePropertyBeanGenerator gen = new SimplePropertyBeanGenerator();
      gen.setGeneratorName(BeangenDataSourceGenerator.class.getName());
      Object object = new Object("com.mchange.v2.naming.ReferenceIndirector");
      gen.addExtension(object);
      gen.addExtension(new C3P0ImplUtilsParentLoggerGeneratorExtension());
      PropsToStringGeneratorExtension tsge = new PropsToStringGeneratorExtension();
      tsge.setExcludePropertyNames(Arrays.asList(new String[] { "userOverridesAsString", "overrideDefaultUser", "overrideDefaultPassword" }));
      gen.addExtension(tsge);
      PropertyReferenceableExtension prex = new PropertyReferenceableExtension();
      prex.setUseExplicitReferenceProperties(true);
      prex.setFactoryClassName("com.mchange.v2.c3p0.impl.C3P0JavaBeanObjectFactory");
      gen.addExtension(prex);
      BooleanInitIdentityTokenConstructortorGeneratorExtension biitcge = new BooleanInitIdentityTokenConstructortorGeneratorExtension();
      gen.addExtension(biitcge);
      if (parsed.getClassInfo().getClassName().equals("WrapperConnectionPoolDataSourceBase"))
        gen.addExtension(new WcpdsExtrasGeneratorExtension()); 
      if (unmodifiableShadow(doc))
        gen.addExtension(new UnmodifiableShadowGeneratorExtension()); 
      gen.generate(parsed.getClassInfo(), parsed.getProperties(), w);
      w.flush();
      w.close();
      System.err.println("Processed: " + argv[0]);
    } catch (Exception e) {
      e.printStackTrace();
    } 
  }
  
  private static boolean unmodifiableShadow(Document doc) {
    Element docElem = doc.getDocumentElement();
    return (DomParseUtils.uniqueChild(docElem, "unmodifiable-shadow") != null);
  }
}
