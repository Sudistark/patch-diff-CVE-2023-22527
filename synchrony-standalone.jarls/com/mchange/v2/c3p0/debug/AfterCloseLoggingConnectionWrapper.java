package com.mchange.v2.c3p0.debug;

import com.mchange.v2.log.MLevel;
import com.mchange.v2.log.MLog;
import com.mchange.v2.log.MLogger;
import com.mchange.v2.reflect.ReflectUtils;
import com.mchange.v2.sql.filter.FilterConnection;
import java.lang.reflect.Constructor;
import java.sql.Connection;

public class AfterCloseLoggingConnectionWrapper extends FilterConnection {
  static final MLogger logger = MLog.getLogger(AfterCloseLoggingConnectionWrapper.class);
  
  public static Connection wrap(Connection inner) {
    try {
      Constructor ctor = ReflectUtils.findProxyConstructor(AfterCloseLoggingConnectionWrapper.class.getClassLoader(), Connection.class);
      return (Connection)ctor.newInstance(new Object[] { new AfterCloseLoggingInvocationHandler(inner) });
    } catch (Exception e) {
      if (logger.isLoggable(MLevel.SEVERE))
        logger.log(MLevel.SEVERE, "An unexpected Exception occured while trying to instantiate a dynamic proxy.", e); 
      throw new RuntimeException(e);
    } 
  }
}
