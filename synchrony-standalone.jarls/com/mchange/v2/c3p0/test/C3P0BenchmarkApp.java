package com.mchange.v2.c3p0.test;

import com.mchange.v1.db.sql.ConnectionUtils;
import com.mchange.v1.db.sql.StatementUtils;
import com.mchange.v2.c3p0.ComboPooledDataSource;
import com.mchange.v2.c3p0.DataSources;
import com.mchange.v2.c3p0.DriverManagerDataSource;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.sql.DataSource;

public final class C3P0BenchmarkApp {
  static final String EMPTY_TABLE_CREATE = "CREATE TABLE emptyyukyuk (a varchar(8), b varchar(8))";
  
  static final String EMPTY_TABLE_SELECT = "SELECT * FROM emptyyukyuk";
  
  static final String EMPTY_TABLE_DROP = "DROP TABLE emptyyukyuk";
  
  static final String EMPTY_TABLE_CONDITIONAL_SELECT = "SELECT * FROM emptyyukyuk where a = ?";
  
  static final String N_ENTRY_TABLE_CREATE = "CREATE TABLE n_entryyukyuk (a INTEGER)";
  
  static final String N_ENTRY_TABLE_INSERT = "INSERT INTO n_entryyukyuk VALUES ( ? )";
  
  static final String N_ENTRY_TABLE_SELECT = "SELECT * FROM n_entryyukyuk";
  
  static final String N_ENTRY_TABLE_DROP = "DROP TABLE n_entryyukyuk";
  
  static final int NUM_ITERATIONS = 2000;
  
  public static void main(String[] argv) {
    if (argv.length > 0) {
      System.err.println(C3P0BenchmarkApp.class.getName() + " now requires no args. Please set everything in standard c3p0 config files.");
      return;
    } 
    driverManagerDataSource = null;
    comboPooledDataSource = null;
    try {
      driverManagerDataSource = new DriverManagerDataSource();
      cpds = new ComboPooledDataSource();
      comboPooledDataSource = cpds;
      comboPooledDataSource.getParentLogger().info("Pooled DataSource created.");
      create(comboPooledDataSource);
      System.out.println("Please wait. Tests can be very slow.");
      List l = new ArrayList();
      l.add(new ConnectionAcquisitionTest());
      l.add(new StatementCreateTest());
      l.add(new StatementEmptyTableSelectTest());
      l.add(new PreparedStatementEmptyTableSelectTest());
      l.add(new PreparedStatementAcquireTest());
      l.add(new ResultSetReadTest());
      l.add(new FiveThreadPSQueryTestTest());
      for (int i = 0, len = l.size(); i < len; i++)
        ((Test)l.get(i)).perform(driverManagerDataSource, comboPooledDataSource, 2000); 
    } catch (Throwable t) {
      System.err.print("Aborting tests on Throwable -- ");
      t.printStackTrace();
      if (t instanceof Error)
        throw (Error)t; 
    } finally {
      try {
        drop(comboPooledDataSource);
      } catch (Exception e) {
        e.printStackTrace();
      } 
      try {
        DataSources.destroy(comboPooledDataSource);
      } catch (Exception e) {
        e.printStackTrace();
      } 
      try {
        DataSources.destroy(driverManagerDataSource);
      } catch (Exception e) {
        e.printStackTrace();
      } 
    } 
  }
  
  static void create(DataSource ds) throws SQLException {
    System.err.println("Creating test schema.");
    con = null;
    ps1 = null;
    ps2 = null;
    ps3 = null;
    try {
      con = ds.getConnection();
      ps1 = con.prepareStatement("CREATE TABLE emptyyukyuk (a varchar(8), b varchar(8))");
      ps2 = con.prepareStatement("CREATE TABLE n_entryyukyuk (a INTEGER)");
      ps3 = con.prepareStatement("INSERT INTO n_entryyukyuk VALUES ( ? )");
      ps1.executeUpdate();
      ps2.executeUpdate();
      for (int i = 0; i < 2000; i++) {
        ps3.setInt(1, i);
        ps3.executeUpdate();
        System.err.print('.');
      } 
      System.err.println();
      System.err.println("Test schema created.");
    } finally {
      StatementUtils.attemptClose(ps1);
      StatementUtils.attemptClose(ps2);
      StatementUtils.attemptClose(ps3);
      ConnectionUtils.attemptClose(con);
    } 
  }
  
  static void drop(DataSource ds) throws SQLException {
    con = null;
    ps1 = null;
    ps2 = null;
    try {
      con = ds.getConnection();
      ps1 = con.prepareStatement("DROP TABLE emptyyukyuk");
      ps2 = con.prepareStatement("DROP TABLE n_entryyukyuk");
      ps1.executeUpdate();
      ps2.executeUpdate();
      System.err.println("Test schema dropped.");
    } finally {
      StatementUtils.attemptClose(ps1);
      StatementUtils.attemptClose(ps2);
      ConnectionUtils.attemptClose(con);
    } 
  }
}
