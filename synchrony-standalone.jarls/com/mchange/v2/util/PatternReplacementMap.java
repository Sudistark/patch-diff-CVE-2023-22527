package com.mchange.v2.util;

import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public final class PatternReplacementMap {
  List mappings = new LinkedList();
  
  public void addMapping(Pattern paramPattern, String paramString) { this.mappings.add(new Mapping(paramPattern, paramString)); }
  
  public void removeMapping(Pattern paramPattern) {
    byte b;
    int i;
    for (b = 0, i = this.mappings.size(); b < i; b++) {
      if (((Mapping)this.mappings.get(b)).getPattern().equals(paramPattern))
        this.mappings.remove(b); 
    } 
  }
  
  public Iterator patterns() { return new Object(this, this.mappings.iterator(), true); }
  
  public int size() { return this.mappings.size(); }
  
  public String attemptReplace(String paramString) {
    String str = null;
    for (Mapping mapping : this.mappings) {
      Matcher matcher = mapping.getPattern().matcher(paramString);
      if (matcher.matches()) {
        str = matcher.replaceAll(mapping.getReplacement());
        break;
      } 
    } 
    return str;
  }
}
