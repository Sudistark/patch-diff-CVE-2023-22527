package com.mchange.v2.log.log4j2;

import com.mchange.v2.log.MLog;
import com.mchange.v2.log.MLogger;
import com.mchange.v2.log.NullMLogger;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

public final class Log4j2MLog extends MLog {
  static final String CHECK_CLASS = "org.apache.logging.log4j.LogManager";
  
  public Log4j2MLog() throws ClassNotFoundException { Class.forName("org.apache.logging.log4j.LogManager"); }
  
  public MLogger getMLogger(String paramString) {
    Logger logger = LogManager.getLogger(paramString);
    if (logger == null) {
      fallbackWarn(" with name '" + paramString + "'");
      return NullMLogger.instance();
    } 
    return new Log4jMLogger(logger);
  }
  
  public MLogger getMLogger(Class paramClass) {
    Logger logger = LogManager.getLogger(paramClass);
    if (logger == null) {
      fallbackWarn(" for class '" + paramClass.getName() + "'");
      return NullMLogger.instance();
    } 
    return new Log4jMLogger(logger);
  }
  
  public MLogger getMLogger() {
    Logger logger = LogManager.getRootLogger();
    if (logger == null) {
      fallbackWarn(" (root logger)");
      return NullMLogger.instance();
    } 
    return new Log4jMLogger(logger);
  }
  
  private void fallbackWarn(String paramString) {
    MLog.getLogger()
      .warning("Could not create or find log4j Logger" + paramString + ". Using NullMLogger. All messages sent to thislogger will be silently ignored. You might want to fix this.");
  }
}
