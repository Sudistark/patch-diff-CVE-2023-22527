package com.mchange.v2.beans.swing;

import com.mchange.v2.beans.BeansUtils;
import java.beans.BeanInfo;
import java.beans.EventSetDescriptor;
import java.beans.IntrospectionException;
import java.beans.Introspector;
import java.beans.PropertyDescriptor;
import java.beans.PropertyEditor;
import java.lang.reflect.Method;
import javax.swing.SwingUtilities;

class PropertyComponentBindingUtility {
  static final Object[] EMPTY_ARGS = new Object[0];
  
  HostBindingInterface hbi;
  
  Object bean;
  
  PropertyDescriptor pd;
  
  EventSetDescriptor propChangeEsd;
  
  Method addMethod;
  
  Method removeMethod;
  
  Method propGetter;
  
  Method propSetter;
  
  PropertyEditor propEditor;
  
  Object nullReplacement;
  
  PropertyComponentBindingUtility(HostBindingInterface paramHostBindingInterface, Object paramObject, String paramString, boolean paramBoolean) throws IntrospectionException {
    this.pd = null;
    this.propChangeEsd = null;
    this.addMethod = null;
    this.removeMethod = null;
    this.propGetter = null;
    this.propSetter = null;
    this.propEditor = null;
    this.nullReplacement = null;
    this.hbi = paramHostBindingInterface;
    this.bean = paramObject;
    BeanInfo beanInfo = Introspector.getBeanInfo(paramObject.getClass());
    PropertyDescriptor[] arrayOfPropertyDescriptor = beanInfo.getPropertyDescriptors();
    byte b;
    int i;
    for (b = 0, i = arrayOfPropertyDescriptor.length; b < i; b++) {
      PropertyDescriptor propertyDescriptor = arrayOfPropertyDescriptor[b];
      if (paramString.equals(propertyDescriptor.getName())) {
        this.pd = propertyDescriptor;
        break;
      } 
    } 
    if (this.pd == null)
      throw new IntrospectionException("Cannot find property on bean Object with name '" + paramString + "'."); 
    EventSetDescriptor[] arrayOfEventSetDescriptor = beanInfo.getEventSetDescriptors();
    for (int i = 0, j = arrayOfEventSetDescriptor.length; i < j; i++) {
      EventSetDescriptor eventSetDescriptor = arrayOfEventSetDescriptor[i];
      if ("propertyChange".equals(eventSetDescriptor.getName())) {
        this.propChangeEsd = eventSetDescriptor;
        break;
      } 
    } 
    if (this.propChangeEsd == null)
      throw new IntrospectionException("Cannot find PropertyChangeEvent on bean Object with name '" + paramString + "'."); 
    this.propEditor = BeansUtils.findPropertyEditor(this.pd);
    if (paramBoolean && this.propEditor == null)
      throw new IntrospectionException("Could not find an appropriate PropertyEditor for property: " + paramString); 
    this.propGetter = this.pd.getReadMethod();
    this.propSetter = this.pd.getWriteMethod();
    if (this.propGetter == null || this.propSetter == null)
      throw new IntrospectionException("The specified property '" + paramString + "' must be both readdable and writable, but it is not!"); 
    Class clazz = this.pd.getPropertyType();
    if (clazz.isPrimitive()) {
      if (clazz == boolean.class)
        this.nullReplacement = Boolean.FALSE; 
      if (clazz == byte.class) {
        this.nullReplacement = new Byte((byte)0);
      } else if (clazz == char.class) {
        this.nullReplacement = new Character(false);
      } else if (clazz == short.class) {
        this.nullReplacement = new Short((short)0);
      } else if (clazz == int.class) {
        this.nullReplacement = new Integer(0);
      } else if (clazz == long.class) {
        this.nullReplacement = new Long(0L);
      } else if (clazz == float.class) {
        this.nullReplacement = new Float(0.0F);
      } else if (clazz == double.class) {
        this.nullReplacement = new Double(0.0D);
      } else {
        throw new InternalError("What kind of primitive is " + clazz.getName() + "???");
      } 
    } 
    this.addMethod = this.propChangeEsd.getAddListenerMethod();
    this.removeMethod = this.propChangeEsd.getAddListenerMethod();
    Object object = new Object(this, paramString, paramHostBindingInterface);
    try {
      this.addMethod.invoke(paramObject, new Object[] { object });
    } catch (Exception exception) {
      exception.printStackTrace();
      throw new IntrospectionException("The introspected PropertyChangeEvent adding method failed with an Exception.");
    } 
    paramHostBindingInterface.addUserModificationListeners();
  }
  
  public void userModification() {
    Object object = null;
    try {
      object = this.propGetter.invoke(this.bean, EMPTY_ARGS);
    } catch (Exception exception) {
      exception.printStackTrace();
    } 
    try {
      Object object1 = this.hbi.fetchUserModification(this.propEditor, object);
      if (object1 == null)
        object1 = this.nullReplacement; 
      this.propSetter.invoke(this.bean, new Object[] { object1 });
    } catch (Exception exception) {
      if (!(exception instanceof java.beans.PropertyVetoException))
        exception.printStackTrace(); 
      syncComponentToValue(true);
    } 
  }
  
  public void resync() { syncComponentToValue(false); }
  
  private void syncComponentToValue(boolean paramBoolean) {
    try {
      Object object1 = this.propGetter.invoke(this.bean, EMPTY_ARGS);
      Object object2 = new Object(this, paramBoolean, object1);
      SwingUtilities.invokeLater(object2);
    } catch (Exception exception) {
      exception.printStackTrace();
    } 
  }
}
