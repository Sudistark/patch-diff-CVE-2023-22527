package com.mchange.v2.lang;

import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;

public final class Coerce {
  static final Set CAN_COERCE;
  
  static  {
    Class[] arrayOfClass = { 
        byte.class, boolean.class, char.class, short.class, int.class, long.class, float.class, double.class, String.class, Byte.class, 
        Boolean.class, Character.class, Short.class, Integer.class, Long.class, Float.class, Double.class };
    HashSet hashSet = new HashSet();
    hashSet.addAll(Arrays.asList(arrayOfClass));
    CAN_COERCE = Collections.unmodifiableSet(hashSet);
  }
  
  public static boolean canCoerce(Class paramClass) { return CAN_COERCE.contains(paramClass); }
  
  public static boolean canCoerce(Object paramObject) { return canCoerce(paramObject.getClass()); }
  
  public static int toInt(String paramString) {
    try {
      return Integer.parseInt(paramString);
    } catch (NumberFormatException numberFormatException) {
      return (int)Double.parseDouble(paramString);
    } 
  }
  
  public static long toLong(String paramString) {
    try {
      return Long.parseLong(paramString);
    } catch (NumberFormatException numberFormatException) {
      return (long)Double.parseDouble(paramString);
    } 
  }
  
  public static float toFloat(String paramString) { return Float.parseFloat(paramString); }
  
  public static double toDouble(String paramString) { return Double.parseDouble(paramString); }
  
  public static byte toByte(String paramString) { return (byte)toInt(paramString); }
  
  public static short toShort(String paramString) { return (short)toInt(paramString); }
  
  public static boolean toBoolean(String paramString) { return Boolean.valueOf(paramString).booleanValue(); }
  
  public static char toChar(String paramString) {
    paramString = paramString.trim();
    if (paramString.length() == 1)
      return paramString.charAt(0); 
    return (char)toInt(paramString);
  }
  
  public static Object toObject(String paramString, Class paramClass) {
    if (paramClass == byte.class) {
      paramClass = Byte.class;
    } else if (paramClass == boolean.class) {
      paramClass = Boolean.class;
    } else if (paramClass == char.class) {
      paramClass = Character.class;
    } else if (paramClass == short.class) {
      paramClass = Short.class;
    } else if (paramClass == int.class) {
      paramClass = Integer.class;
    } else if (paramClass == long.class) {
      paramClass = Long.class;
    } else if (paramClass == float.class) {
      paramClass = Float.class;
    } else if (paramClass == double.class) {
      paramClass = Double.class;
    } 
    if (paramClass == String.class)
      return paramString; 
    if (paramClass == Byte.class)
      return new Byte(toByte(paramString)); 
    if (paramClass == Boolean.class)
      return Boolean.valueOf(paramString); 
    if (paramClass == Character.class)
      return new Character(toChar(paramString)); 
    if (paramClass == Short.class)
      return new Short(toShort(paramString)); 
    if (paramClass == Integer.class)
      return new Integer(paramString); 
    if (paramClass == Long.class)
      return new Long(paramString); 
    if (paramClass == Float.class)
      return new Float(paramString); 
    if (paramClass == Double.class)
      return new Double(paramString); 
    throw new IllegalArgumentException("Cannot coerce to type: " + paramClass.getName());
  }
}
