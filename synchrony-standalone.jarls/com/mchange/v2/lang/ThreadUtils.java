package com.mchange.v2.lang;

import com.mchange.v2.log.MLevel;
import com.mchange.v2.log.MLog;
import com.mchange.v2.log.MLogger;
import java.lang.reflect.Method;

public final class ThreadUtils {
  private static final MLogger logger;
  
  static final Method holdsLock;
  
  static  {
    Object object;
    logger = MLog.getLogger(ThreadUtils.class);
    try {
      object = Thread.class.getMethod("holdsLock", new Class[] { Object.class });
    } catch (NoSuchMethodException noSuchMethodException) {
      object = null;
    } 
    holdsLock = object;
  }
  
  public static void enumerateAll(Thread[] paramArrayOfThread) { ThreadGroupUtils.rootThreadGroup().enumerate(paramArrayOfThread); }
  
  public static Boolean reflectiveHoldsLock(Object paramObject) {
    try {
      if (holdsLock == null)
        return null; 
      return (Boolean)holdsLock.invoke(null, new Object[] { paramObject });
    } catch (Exception exception) {
      if (logger.isLoggable(MLevel.FINER))
        logger.log(MLevel.FINER, "An Exception occurred while trying to call Thread.holdsLock( ... ) reflectively.", exception); 
      return null;
    } 
  }
}
