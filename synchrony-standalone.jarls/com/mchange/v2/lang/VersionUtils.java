package com.mchange.v2.lang;

import com.mchange.v1.util.StringTokenizerUtils;
import com.mchange.v2.log.MLevel;
import com.mchange.v2.log.MLog;
import com.mchange.v2.log.MLogger;

public final class VersionUtils {
  private static final MLogger logger;
  
  private static final int[] DFLT_VERSION_ARRAY;
  
  private static final int[] JDK_VERSION_ARRAY;
  
  private static final int JDK_VERSION;
  
  private static final Integer NUM_BITS;
  
  static  {
    Object object;
    boolean bool;
    int[] arrayOfInt;
    logger = MLog.getLogger(VersionUtils.class);
    DFLT_VERSION_ARRAY = new int[] { 1, 1 };
    String str = System.getProperty("java.version");
    if (str == null) {
      if (logger.isLoggable(MLevel.WARNING))
        logger.warning("Could not find java.version System property. Defaulting to JDK 1.1"); 
      arrayOfInt = DFLT_VERSION_ARRAY;
    } else {
      try {
        arrayOfInt = extractVersionNumberArray(str);
      } catch (NumberFormatException numberFormatException) {
        if (logger.isLoggable(MLevel.WARNING))
          logger.warning("java.version \"" + str + "\" could not be parsed. Defaulting to JDK 1.1."); 
        arrayOfInt = DFLT_VERSION_ARRAY;
      } 
    } 
    if (arrayOfInt.length == 0) {
      if (logger.isLoggable(MLevel.WARNING))
        logger.warning("java.version \"" + str + "\" is prefixed by no integral elements. Defaulting to JDK 1.1."); 
      arrayOfInt = DFLT_VERSION_ARRAY;
    } 
    if (arrayOfInt[0] > 1) {
      bool = arrayOfInt[0];
    } else if (arrayOfInt[0] == 1) {
      if (arrayOfInt.length > 1) {
        bool = arrayOfInt[1];
      } else {
        if (logger.isLoggable(MLevel.WARNING))
          logger.warning("java.version \"" + str + "\" looks like a 1.x style bargain, but the second element cannot be parsed. Defaulting to JDK 1.1."); 
        bool = true;
      } 
    } else {
      if (logger.isLoggable(MLevel.WARNING))
        logger.warning("Illegal java.version \"" + str + "\". Defaulting to JDK 1.1."); 
      bool = true;
    } 
    JDK_VERSION_ARRAY = arrayOfInt;
    JDK_VERSION = bool;
    try {
      String str1 = System.getProperty("sun.arch.data.model");
      if (str1 == null) {
        object = null;
      } else {
        object = new Integer(str1);
      } 
    } catch (Exception exception) {
      object = null;
    } 
    if (object == null || object.intValue() == 32 || object.intValue() == 64) {
      NUM_BITS = object;
    } else {
      if (logger.isLoggable(MLevel.WARNING))
        logger.warning("Determined a surprising jvmNumerOfBits: " + object + ". Setting jvmNumberOfBits to unknown (null)."); 
      NUM_BITS = null;
    } 
  }
  
  public static Integer jvmNumberOfBits() { return NUM_BITS; }
  
  public static boolean isJavaVersion1_0() { return (JDK_VERSION == 0); }
  
  public static boolean isJavaVersion1_1() { return (JDK_VERSION == 1); }
  
  public static boolean isJavaVersion1_2() { return (JDK_VERSION == 2); }
  
  public static boolean isJavaVersion1_3() { return (JDK_VERSION == 3); }
  
  public static boolean isJavaVersion1_4() { return (JDK_VERSION == 4); }
  
  public static boolean isJavaVersion1_5() { return (JDK_VERSION == 5); }
  
  public static boolean isJavaVersion1_6() { return (JDK_VERSION == 6); }
  
  public static boolean isJavaVersion1_7() { return (JDK_VERSION == 7); }
  
  public static boolean isJavaVersion1_8() { return (JDK_VERSION == 8); }
  
  public static boolean isJavaVersion1_9() { return (JDK_VERSION == 9); }
  
  public static boolean isJava5() { return (JDK_VERSION == 5); }
  
  public static boolean isJava6() { return (JDK_VERSION == 6); }
  
  public static boolean isJava7() { return (JDK_VERSION == 7); }
  
  public static boolean isJava8() { return (JDK_VERSION == 8); }
  
  public static boolean isJava9() { return (JDK_VERSION == 9); }
  
  public static boolean isJava10() { return (JDK_VERSION == 10); }
  
  public static boolean isJava11() { return (JDK_VERSION == 11); }
  
  public static boolean isJava12() { return (JDK_VERSION == 12); }
  
  public static boolean isJava13() { return (JDK_VERSION == 13); }
  
  public static boolean isAtLeastJavaVersion1_0() { return (JDK_VERSION >= 0); }
  
  public static boolean isAtLeastJavaVersion1_1() { return (JDK_VERSION >= 1); }
  
  public static boolean isAtLeastJavaVersion1_2() { return (JDK_VERSION >= 2); }
  
  public static boolean isAtLeastJavaVersion1_3() { return (JDK_VERSION >= 3); }
  
  public static boolean isAtLeastJavaVersion1_4() { return (JDK_VERSION >= 4); }
  
  public static boolean isAtLeastJavaVersion1_5() { return (JDK_VERSION >= 5); }
  
  public static boolean isAtLeastJavaVersion1_6() { return (JDK_VERSION >= 6); }
  
  public static boolean isAtLeastJavaVersion1_7() { return (JDK_VERSION >= 7); }
  
  public static boolean isAtLeastJavaVersion1_8() { return (JDK_VERSION >= 8); }
  
  public static boolean isAtLeastJavaVersion1_9() { return (JDK_VERSION >= 9); }
  
  public static boolean isAtLeastJava5() { return (JDK_VERSION >= 5); }
  
  public static boolean isAtLeastJava6() { return (JDK_VERSION >= 6); }
  
  public static boolean isAtLeastJava7() { return (JDK_VERSION >= 7); }
  
  public static boolean isAtLeastJava8() { return (JDK_VERSION >= 8); }
  
  public static boolean isAtLeastJava9() { return (JDK_VERSION >= 9); }
  
  public static boolean isAtLeastJava10() { return (JDK_VERSION >= 10); }
  
  public static boolean isAtLeastJava11() { return (JDK_VERSION >= 11); }
  
  public static boolean isAtLeastJava12() { return (JDK_VERSION >= 12); }
  
  public static boolean isAtLeastJava13() { return (JDK_VERSION >= 13); }
  
  public static boolean isJavaVersion10() { return (JDK_VERSION == 0); }
  
  public static boolean isJavaVersion11() { return (JDK_VERSION == 1); }
  
  public static boolean isJavaVersion12() { return (JDK_VERSION == 2); }
  
  public static boolean isJavaVersion13() { return (JDK_VERSION == 3); }
  
  public static boolean isJavaVersion14() { return (JDK_VERSION == 4); }
  
  public static boolean isJavaVersion15() { return (JDK_VERSION == 5); }
  
  public static boolean isAtLeastJavaVersion10() { return (JDK_VERSION >= 0); }
  
  public static boolean isAtLeastJavaVersion11() { return (JDK_VERSION >= 1); }
  
  public static boolean isAtLeastJavaVersion12() { return (JDK_VERSION >= 2); }
  
  public static boolean isAtLeastJavaVersion13() { return (JDK_VERSION >= 3); }
  
  public static boolean isAtLeastJavaVersion14() { return (JDK_VERSION >= 4); }
  
  public static boolean isAtLeastJavaVersion15() { return (JDK_VERSION >= 5); }
  
  public static boolean isAtLeastJavaVersion16() { return (JDK_VERSION >= 6); }
  
  public static boolean isAtLeastJavaVersion17() { return (JDK_VERSION >= 7); }
  
  public static int[] extractVersionNumberArray(String paramString) throws NumberFormatException { return extractVersionNumberArray(paramString, paramString.split("\\D+")); }
  
  public static int[] extractVersionNumberArray(String paramString1, String paramString2) throws NumberFormatException {
    String[] arrayOfString = StringTokenizerUtils.tokenizeToArray(paramString1, paramString2, false);
    return extractVersionNumberArray(paramString1, arrayOfString);
  }
  
  private static int[] extractVersionNumberArray(String paramString, String[] paramArrayOfString) throws NumberFormatException {
    int i = paramArrayOfString.length;
    int[] arrayOfInt = new int[i];
    for (byte b = 0; b < i; b++) {
      try {
        arrayOfInt[b] = Integer.parseInt(paramArrayOfString[b]);
      } catch (NumberFormatException numberFormatException) {
        if (!b || (b == 1 && arrayOfInt[0] < 5))
          throw numberFormatException; 
        if (logger.isLoggable(MLevel.INFO))
          logger.log(MLevel.INFO, "JVM version string (" + paramString + ") contains non-integral component (" + paramArrayOfString[b] + "). Using precending components only to resolve JVM version."); 
        int[] arrayOfInt1 = new int[b];
        System.arraycopy(arrayOfInt, 0, arrayOfInt1, 0, b);
        arrayOfInt = arrayOfInt1;
        break;
      } 
    } 
    return arrayOfInt;
  }
}
