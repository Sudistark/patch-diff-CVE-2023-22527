package com.mchange.io;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;

public final class FileUtils {
  public static byte[] getBytes(File paramFile, int paramInt) throws IOException {
    bufferedInputStream = new BufferedInputStream(new FileInputStream(paramFile));
    try {
      return InputStreamUtils.getBytes(bufferedInputStream, paramInt);
    } finally {
      InputStreamUtils.attemptClose(bufferedInputStream);
    } 
  }
  
  public static byte[] getBytes(File paramFile) throws IOException {
    bufferedInputStream = new BufferedInputStream(new FileInputStream(paramFile));
    try {
      return InputStreamUtils.getBytes(bufferedInputStream);
    } finally {
      InputStreamUtils.attemptClose(bufferedInputStream);
    } 
  }
  
  public static String getContentsAsString(File paramFile, String paramString) throws IOException, UnsupportedEncodingException {
    bufferedInputStream = new BufferedInputStream(new FileInputStream(paramFile));
    try {
      return InputStreamUtils.getContentsAsString(bufferedInputStream, paramString);
    } finally {
      InputStreamUtils.attemptClose(bufferedInputStream);
    } 
  }
  
  public static String getContentsAsString(File paramFile) throws IOException {
    bufferedInputStream = new BufferedInputStream(new FileInputStream(paramFile));
    try {
      return InputStreamUtils.getContentsAsString(bufferedInputStream);
    } finally {
      InputStreamUtils.attemptClose(bufferedInputStream);
    } 
  }
  
  public static String getContentsAsString(File paramFile, int paramInt, String paramString) throws IOException, UnsupportedEncodingException {
    bufferedInputStream = new BufferedInputStream(new FileInputStream(paramFile));
    try {
      return InputStreamUtils.getContentsAsString(bufferedInputStream, paramInt, paramString);
    } finally {
      InputStreamUtils.attemptClose(bufferedInputStream);
    } 
  }
  
  public static String getContentsAsString(File paramFile, int paramInt) throws IOException {
    bufferedInputStream = new BufferedInputStream(new FileInputStream(paramFile));
    try {
      return InputStreamUtils.getContentsAsString(bufferedInputStream, paramInt);
    } finally {
      InputStreamUtils.attemptClose(bufferedInputStream);
    } 
  }
}
