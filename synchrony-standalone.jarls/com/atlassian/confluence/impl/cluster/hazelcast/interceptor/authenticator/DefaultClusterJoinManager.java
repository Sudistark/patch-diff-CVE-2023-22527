package com.atlassian.confluence.impl.cluster.hazelcast.interceptor.authenticator;

import com.google.common.base.Preconditions;
import java.io.IOException;
import java.util.Objects;
import javax.annotation.Nonnull;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DefaultClusterJoinManager implements ClusterJoinManager {
  private static final Logger log = LoggerFactory.getLogger(DefaultClusterJoinManager.class);
  
  private final ClusterAuthenticator clusterAuthenticator;
  
  private final boolean isNodeAuthenticationEnabled;
  
  public DefaultClusterJoinManager(ClusterAuthenticator clusterAuthenticator, boolean enableNodeAuthentication) {
    this.clusterAuthenticator = clusterAuthenticator;
    this.isNodeAuthenticationEnabled = enableNodeAuthentication;
  }
  
  public void accept(@Nonnull ClusterJoinRequest request) throws IOException {
    log.info("enableNodeAuthentication : {}", Boolean.valueOf(this.isNodeAuthenticationEnabled));
    log.debug("{}: Authenticating cluster node in accept .... ", request);
    Preconditions.checkArgument((((ClusterJoinRequest)Objects.requireNonNull(request, "request")).getJoinMode() == ClusterJoinMode.ACCEPT), "Expected accept request");
    checkNodeAuthenticationEnabled(request);
  }
  
  public void connect(@Nonnull ClusterJoinRequest request) throws IOException {
    log.info("enableNodeAuthentication : {}", Boolean.valueOf(this.isNodeAuthenticationEnabled));
    log.debug("{}: Authenticating cluster node in connect .... ", request);
    Preconditions.checkArgument((((ClusterJoinRequest)Objects.requireNonNull(request, "request")).getJoinMode() == ClusterJoinMode.CONNECT), "Expected connect request");
    checkNodeAuthenticationEnabled(request);
  }
  
  private void checkNodeAuthenticationEnabled(@Nonnull ClusterJoinRequest request) throws IOException {
    if (this.isNodeAuthenticationEnabled) {
      log.debug("{}: Authenticating cluster node", request);
      ClusterAuthenticationResult authenticationResult = this.clusterAuthenticator.authenticate(request);
      if (!authenticationResult.isSuccessful()) {
        log.warn("{}: Node authentication failed: {} ", request, authenticationResult.getMessage());
        throw new NodeConnectionException(authenticationResult.getMessage());
      } 
      log.debug("{}: Node authenticated success", request);
    } else {
      log.debug("{}: Node authentication disabled", request);
    } 
  }
}
