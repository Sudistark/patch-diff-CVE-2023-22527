package com.atlassian.util.profiling;

import com.atlassian.annotations.Internal;
import com.atlassian.annotations.VisibleForTesting;
import com.atlassian.util.profiling.strategy.MetricStrategy;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Collectors;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;

@Internal
public class MetricsConfiguration {
  private Map<String, List<String>> metricNameToRequiredTagNames;
  
  private boolean enabled;
  
  private MetricsFilter filter;
  
  public MetricsConfiguration() {
    this.filter = MetricsFilter.ACCEPT_ALL;
    reloadConfigs();
  }
  
  public boolean isEnabled() { return this.enabled; }
  
  public void setEnabled(boolean value) { this.enabled = value; }
  
  public MetricsFilter getFilter() { return this.filter; }
  
  public void setFilter(@Nonnull MetricsFilter filter) {
    this.filter = (MetricsFilter)Objects.requireNonNull(filter);
    cleanupMetrics(filter);
  }
  
  @VisibleForTesting
  public void reloadConfigs() {
    this.enabled = Boolean.parseBoolean(System.getProperty("atlassian.metrics.activate", "true"));
    this.metricNameToRequiredTagNames = computeRequiredOptionalTags();
  }
  
  private void cleanupMetrics(MetricsFilter filter) {
    for (MetricStrategy strategy : StrategiesRegistry.getMetricStrategies())
      strategy.cleanupMetrics(filter); 
  }
  
  boolean isOptionalTagEnabled(@Nonnull String metricName, @Nullable String tagName) {
    List<String> tags = (List)this.metricNameToRequiredTagNames.get(metricName);
    return (tags != null && tags.contains(tagName));
  }
  
  private Map<String, List<String>> computeRequiredOptionalTags() {
    Map<String, List<String>> requiredMetricOptionalTags = new HashMap<String, List<String>>();
    System.getProperties().forEach((key, val) -> {
          String propKey = key.toString();
          if (propKey.startsWith("atlassian.metrics.optional.tags.")) {
            String metricName = propKey.substring("atlassian.metrics.optional.tags.".length());
            List<String> tags = (List)Arrays.stream(val.toString().split(",")).map(String::trim).filter(()).collect(Collectors.toList());
            if (!tags.isEmpty())
              requiredMetricOptionalTags.put(metricName, tags); 
          } 
        });
    return requiredMetricOptionalTags;
  }
}
