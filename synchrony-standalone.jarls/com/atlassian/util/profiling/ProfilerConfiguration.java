package com.atlassian.util.profiling;

import com.atlassian.annotations.Internal;
import java.util.Objects;
import java.util.concurrent.TimeUnit;
import javax.annotation.Nonnull;

@Internal
public class ProfilerConfiguration {
  private final ThreadLocal<Boolean> enabledForThread = new ThreadLocal();
  
  private boolean enabled = "true".equalsIgnoreCase(System.getProperty("atlassian.profile.activate", "false"));
  
  private int maxFrameNameLength = Integer.getInteger("atlassian.profile.maxframelength", 150).intValue();
  
  private int maxFramesPerTrace = Integer.getInteger("atlassian.profile.maxframecount", 1000).intValue();
  
  private boolean memoryProfiled = "true".equalsIgnoreCase(System.getProperty("atlassian.profile.activate.memory", "false"));
  
  private long minFrameTimeNanos = TimeUnit.MILLISECONDS.toNanos(Long.getLong("atlassian.profile.mintime", 0L).longValue());
  
  private long minTraceTimeNanos = TimeUnit.MILLISECONDS.toNanos(Long.getLong("atlassian.profile.mintotaltime", 0L).longValue());
  
  @Nonnull
  public Ticker enableForThread() {
    this.enabledForThread.set(Boolean.valueOf(true));
    return this.enabledForThread::remove;
  }
  
  public int getMaxFramesPerTrace() { return this.maxFramesPerTrace; }
  
  public int getMaxFrameNameLength() { return this.maxFrameNameLength; }
  
  public long getMinFrameTime(@Nonnull TimeUnit timeUnit) { return ((TimeUnit)Objects.requireNonNull(timeUnit, "timeUnit")).convert(this.minFrameTimeNanos, TimeUnit.NANOSECONDS); }
  
  public long getMinTraceTime(@Nonnull TimeUnit timeUnit) { return ((TimeUnit)Objects.requireNonNull(timeUnit, "timeUnit")).convert(this.minTraceTimeNanos, TimeUnit.NANOSECONDS); }
  
  public boolean isEnabled() {
    if (this.enabled || this.enabledForThread.get() == Boolean.TRUE)
      return true; 
    this.enabledForThread.remove();
    return false;
  }
  
  public boolean isMemoryProfilingEnabled() { return this.memoryProfiled; }
  
  public void setEnabled(boolean value) { this.enabled = value; }
  
  public void setMaxFramesPerTrace(int value) { this.maxFramesPerTrace = value; }
  
  public void setMaxFrameNameLength(int value) { this.maxFrameNameLength = value; }
  
  public void setMemoryProfilingEnabled(boolean value) { this.memoryProfiled = value; }
  
  public void setMinFrameTime(long value, @Nonnull TimeUnit timeUnit) { this.minFrameTimeNanos = timeUnit.toNanos(value); }
  
  public void setMinTraceTime(long value, @Nonnull TimeUnit timeUnit) { this.minTraceTimeNanos = timeUnit.toNanos(value); }
}
