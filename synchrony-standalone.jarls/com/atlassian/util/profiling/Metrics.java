package com.atlassian.util.profiling;

import com.atlassian.annotations.Internal;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import javax.annotation.Nonnull;
import javax.annotation.ParametersAreNonnullByDefault;

@ParametersAreNonnullByDefault
@Internal
public class Metrics {
  private static final MetricsConfiguration CONFIGURATION = new MetricsConfiguration();
  
  private Metrics() { throw new UnsupportedOperationException("Metrics is an utility class and should not be instantiated"); }
  
  @Nonnull
  public static MetricsConfiguration getConfiguration() { return CONFIGURATION; }
  
  @Deprecated
  @Nonnull
  public static Histogram histogram(String name) { return metric(name).histogram(); }
  
  @Deprecated
  @Nonnull
  public static Histogram histogram(String name, Collection<MetricTag.RequiredMetricTag> tags) { return metric(name).tags(tags).histogram(); }
  
  @Deprecated
  @Nonnull
  public static Histogram histogram(String name, RequiredMetricTag... tags) { return metric(name).tags(tags).histogram(); }
  
  @Deprecated
  @Nonnull
  public static MetricTimer timer(String name) { return metric(name).timer(); }
  
  @Deprecated
  @Nonnull
  public static MetricTimer timer(String name, Collection<MetricTag.RequiredMetricTag> tags) { return metric(name).tags(tags).timer(); }
  
  @Deprecated
  @Nonnull
  public static MetricTimer timer(String name, RequiredMetricTag... tags) { return metric(name).tags(tags).timer(); }
  
  @Deprecated
  @Nonnull
  public static LongRunningMetricTimer longRunningTimer(String name) { return metric(name).longRunningTimer(); }
  
  @Deprecated
  @Nonnull
  public static LongRunningMetricTimer longRunningTimer(String name, Collection<MetricTag.RequiredMetricTag> tags) { return metric(name).tags(tags).longRunningTimer(); }
  
  @Deprecated
  @Nonnull
  public static LongRunningMetricTimer longRunningTimer(String name, RequiredMetricTag... tags) { return longRunningTimer(name, Arrays.asList(tags)); }
  
  @Deprecated
  @Nonnull
  public static Ticker startTimer(String name) { return startTimer(name, Collections.emptySet()); }
  
  @Deprecated
  @Nonnull
  public static Ticker startTimer(String name, RequiredMetricTag... tags) { return startTimer(name, Arrays.asList(tags)); }
  
  @Deprecated
  @Nonnull
  public static Ticker startTimer(String name, Collection<MetricTag.RequiredMetricTag> tags) { return metric(name).tags(tags).startTimer(); }
  
  @Deprecated
  @Nonnull
  public static Ticker startLongRunningTimer(String name) { return metric(name).startLongRunningTimer(); }
  
  @Deprecated
  @Nonnull
  public static Ticker startLongRunningTimer(String name, RequiredMetricTag... tags) { return metric(name).tags(tags).startLongRunningTimer(); }
  
  @Deprecated
  @Nonnull
  public static Ticker startLongRunningTimer(String name, Collection<MetricTag.RequiredMetricTag> tags) { return metric(name).tags(tags).startLongRunningTimer(); }
  
  public static Builder metric(String name) { return new Builder(name); }
  
  private static boolean accepts(MetricKey metricKey) { return (getConfiguration().isEnabled() && getConfiguration().getFilter().accepts(metricKey.getMetricName())); }
}
