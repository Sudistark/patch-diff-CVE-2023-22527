package com.atlassian.util.profiling.object;

import com.atlassian.annotations.Internal;
import com.atlassian.util.profiling.Ticker;
import com.atlassian.util.profiling.Timers;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

@Internal
public class ObjectProfiler {
  public static Object getProfiledObject(Class interfaceClazz, Object o) {
    if (!isActive())
      return o; 
    if (interfaceClazz.isInterface()) {
      TimerInvocationHandler timerInvocationHandler = new TimerInvocationHandler(o);
      return Proxy.newProxyInstance(interfaceClazz.getClassLoader(), new Class[] { interfaceClazz }, timerInvocationHandler);
    } 
    return o;
  }
  
  public static String getTrimmedClassName(Method method) {
    String classname = method.getDeclaringClass().getName();
    return classname.substring(classname.lastIndexOf('.') + 1);
  }
  
  public static Object profile(String caption, Profilable profilable) throws RuntimeException {
    Object o;
    try (Ticker ignored = Timers.start(caption)) {
      o = profilable.profile();
    } catch (RuntimeException e) {
      throw e;
    } catch (Exception e) {
      throw new RuntimeException(e);
    } 
    return o;
  }
  
  public static Object profiledInvoke(Method method, Object instance, Object[] args) throws Exception {
    if (!isActive())
      try {
        return method.invoke(instance, args);
      } catch (InvocationTargetException unProfiledInvocationException) {
        if (unProfiledInvocationException.getCause() != null) {
          throwIfUnchecked(unProfiledInvocationException.getCause());
          throw new RuntimeException(unProfiledInvocationException.getCause());
        } 
        throw unProfiledInvocationException;
      }  
    String logLine = getTrimmedClassName(method) + "." + method.getName() + "()";
    try (Ticker ignored = Timers.start(logLine)) {
      Object returnValue = method.invoke(instance, args);
      if (returnValue != null && method.getReturnType().isInterface()) {
        Set interfaces = getAllInterfaces(returnValue.getClass());
        TimerInvocationHandler timerInvocationHandler = new TimerInvocationHandler(returnValue);
        return Proxy.newProxyInstance(returnValue.getClass().getClassLoader(), (Class[])interfaces
            .toArray(new Class[0]), timerInvocationHandler);
      } 
      return returnValue;
    } catch (InvocationTargetException profiledInvocationException) {
      if (profiledInvocationException.getCause() != null) {
        throwIfUnchecked(profiledInvocationException.getCause());
        throw new RuntimeException(profiledInvocationException.getCause());
      } 
      throw profiledInvocationException;
    } 
  }
  
  protected static Set getAllInterfaces(Class clazz) {
    Set interfaces = new HashSet();
    for (Class cls = clazz; cls != null; cls = cls.getSuperclass())
      interfaces.addAll(Arrays.asList(cls.getInterfaces())); 
    return interfaces;
  }
  
  private static boolean isActive() { return Timers.getConfiguration().isEnabled(); }
  
  private static void throwIfUnchecked(Throwable throwable) {
    if (throwable instanceof RuntimeException)
      throw (RuntimeException)throwable; 
    if (throwable instanceof Error)
      throw (Error)throwable; 
  }
}
