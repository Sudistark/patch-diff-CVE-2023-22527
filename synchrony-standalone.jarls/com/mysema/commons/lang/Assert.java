package com.mysema.commons.lang;

import java.util.Collection;
import java.util.Map;

public final class Assert {
  private static final String IS_FALSE = "is false";
  
  private static final String IS_TRUE = "is true";
  
  private static final String IS_EMPTY = "should not be empty";
  
  private static final String IS_NULL = "should not be null";
  
  private static final String HAS_NO_TEXT = "should have text";
  
  public static String hasText(String str, String propOrMsg) {
    boolean hasText = false;
    int strLen = hasLength(str, propOrMsg).length();
    for (int i = 0; i < strLen; i++) {
      if (!Character.isWhitespace(str.charAt(i)))
        hasText = true; 
    } 
    return (String)assertThat(hasText, propOrMsg, "should have text", str);
  }
  
  public static <T> T notNull(T object, String propOrMsg) { return (T)assertThat((object != null), propOrMsg, "should not be null", object); }
  
  public static String hasLength(String str, String propOrMsg) { return (String)assertThat((str != null && str.length() > 0), propOrMsg, "should not be empty", str); }
  
  public static <T> T[] notEmpty(T[] objects, String propOrMsg) { return (T[])(Object[])assertThat((objects != null && objects.length > 0), propOrMsg, "should not be empty", objects); }
  
  public static <M extends Map<?, ?>> M notEmpty(M map, String propOrMsg) { return (M)(Map)assertThat(!map.isEmpty(), propOrMsg, "should not be empty", map); }
  
  public static <C extends Collection<?>> C notEmpty(C col, String propOrMsg) { return (C)(Collection)assertThat(!col.isEmpty(), propOrMsg, "should not be empty", col); }
  
  public static boolean isTrue(boolean condition, String propOrMsg) { return ((Boolean)assertThat(condition, propOrMsg, "is true", Boolean.valueOf(condition))).booleanValue(); }
  
  public static boolean isFalse(boolean condition, String propOrMsg) { return ((Boolean)assertThat(!condition, propOrMsg, "is false", Boolean.valueOf(condition))).booleanValue(); }
  
  public static <T> T assertThat(boolean condition, String propOrMsg, String msgSuffix, T rv) {
    if (!condition) {
      if (propOrMsg.contains(" "))
        throw new IllegalArgumentException(propOrMsg); 
      throw new IllegalArgumentException(propOrMsg + " " + msgSuffix);
    } 
    return rv;
  }
}
