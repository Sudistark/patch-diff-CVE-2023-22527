package com.mysema.query.types.template;

import com.google.common.collect.ImmutableList;
import com.mysema.query.types.Template;
import com.mysema.query.types.TemplateExpression;
import com.mysema.query.types.TemplateExpressionImpl;
import com.mysema.query.types.TemplateFactory;
import com.mysema.query.types.Visitor;
import com.mysema.query.types.expr.DslExpression;
import java.util.List;

public class DslTemplate<T> extends DslExpression<T> implements TemplateExpression<T> {
  private static final long serialVersionUID = -4697578522909045745L;
  
  private final TemplateExpressionImpl<T> templateMixin;
  
  public static <T> DslExpression<T> create(Class<? extends T> type, String template) { return new DslTemplate(type, TemplateFactory.DEFAULT.create(template), ImmutableList.of()); }
  
  public static <T> DslExpression<T> create(Class<? extends T> type, String template, Object one) { return new DslTemplate(type, TemplateFactory.DEFAULT.create(template), ImmutableList.of(one)); }
  
  public static <T> DslExpression<T> create(Class<? extends T> type, String template, Object one, Object two) { return new DslTemplate(type, TemplateFactory.DEFAULT.create(template), ImmutableList.of(one, two)); }
  
  public static <T> DslExpression<T> create(Class<? extends T> type, String template, Object... args) { return new DslTemplate(type, TemplateFactory.DEFAULT.create(template), ImmutableList.copyOf(args)); }
  
  public static <T> DslExpression<T> create(Class<? extends T> type, Template template, Object... args) { return new DslTemplate(type, template, ImmutableList.copyOf(args)); }
  
  public DslTemplate(Class<? extends T> type, Template template, ImmutableList<?> args) {
    super(new TemplateExpressionImpl(type, template, args));
    this.templateMixin = (TemplateExpressionImpl)this.mixin;
  }
  
  public final <R, C> R accept(Visitor<R, C> v, C context) { return (R)v.visit(this.templateMixin, context); }
  
  public Object getArg(int index) { return this.templateMixin.getArg(index); }
  
  public List<?> getArgs() { return this.templateMixin.getArgs(); }
  
  public Template getTemplate() { return this.templateMixin.getTemplate(); }
}
