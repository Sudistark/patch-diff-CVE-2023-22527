package com.mysema.query.types;

import com.google.common.collect.ImmutableList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import javax.annotation.Nullable;

public class QList extends FactoryExpressionBase<List<?>> {
  private static final long serialVersionUID = -7545994090073480810L;
  
  private final ImmutableList<Expression<?>> args;
  
  public QList(Expression... args) {
    super(List.class);
    this.args = ImmutableList.copyOf(args);
  }
  
  public QList(ImmutableList<Expression<?>> args) {
    super(List.class);
    this.args = args;
  }
  
  public QList(Expression[]... args) {
    super(List.class);
    ImmutableList.Builder<Expression<?>> builder = ImmutableList.builder();
    for (Expression[] exprs : args)
      builder.add(exprs); 
    this.args = builder.build();
  }
  
  @Nullable
  public <R, C> R accept(Visitor<R, C> v, C context) { return (R)v.visit(this, context); }
  
  public List<Expression<?>> getArgs() { return this.args; }
  
  public boolean equals(Object obj) {
    if (obj == this)
      return true; 
    if (obj instanceof FactoryExpression) {
      FactoryExpression<?> c = (FactoryExpression)obj;
      return (this.args.equals(c.getArgs()) && getType().equals(c.getType()));
    } 
    return false;
  }
  
  @Nullable
  public List<?> newInstance(Object... args) { return Collections.unmodifiableList(Arrays.asList(args)); }
}
