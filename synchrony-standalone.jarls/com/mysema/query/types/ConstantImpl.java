package com.mysema.query.types;

import javax.annotation.concurrent.Immutable;

@Immutable
public final class ConstantImpl<T> extends ExpressionBase<T> implements Constant<T> {
  private static final long serialVersionUID = -3898138057967814118L;
  
  private static final int CACHE_SIZE = 256;
  
  private static final Constant<Character>[] CHARACTERS = new Constant[256];
  
  private static final Constant<Byte>[] BYTES = new Constant[256];
  
  private static final Constant<Integer>[] INTEGERS = new Constant[256];
  
  private static final Constant<Long>[] LONGS = new Constant[256];
  
  private static final Constant<Short>[] SHORTS = new Constant[256];
  
  private static final Constant<Boolean> FALSE = new ConstantImpl(Boolean.FALSE);
  
  private static final Constant<Boolean> TRUE = new ConstantImpl(Boolean.TRUE);
  
  private final T constant;
  
  static  {
    for (i = 0; i < 256; i++) {
      INTEGERS[i] = new ConstantImpl(Integer.class, Integer.valueOf(i));
      SHORTS[i] = new ConstantImpl(Short.class, Short.valueOf((short)i));
      BYTES[i] = new ConstantImpl(Byte.class, Byte.valueOf((byte)i));
      CHARACTERS[i] = new ConstantImpl(Character.class, Character.valueOf((char)i));
      LONGS[i] = new ConstantImpl(Long.class, Long.valueOf(i));
    } 
  }
  
  public static Constant<Boolean> create(boolean b) { return b ? TRUE : FALSE; }
  
  public static Constant<Byte> create(byte i) {
    if (i >= 0 && i < 256)
      return BYTES[i]; 
    return new ConstantImpl(Byte.class, Byte.valueOf(i));
  }
  
  public static Constant<Character> create(char i) {
    if (i >= '\000' && i < 'Ä€')
      return CHARACTERS[i]; 
    return new ConstantImpl(Character.class, Character.valueOf(i));
  }
  
  public static Constant<Integer> create(int i) {
    if (i >= 0 && i < 256)
      return INTEGERS[i]; 
    return new ConstantImpl(Integer.class, Integer.valueOf(i));
  }
  
  public static Constant<Long> create(long i) {
    if (i >= 0L && i < 256L)
      return LONGS[(int)i]; 
    return new ConstantImpl(Long.class, Long.valueOf(i));
  }
  
  public static Constant<Short> create(short i) {
    if (i >= 0 && i < 256)
      return SHORTS[i]; 
    return new ConstantImpl(Short.class, Short.valueOf(i));
  }
  
  public static <T> Constant<T> create(T obj) { return new ConstantImpl(obj); }
  
  public ConstantImpl(T constant) { this(constant.getClass(), constant); }
  
  public ConstantImpl(Class<T> type, T constant) {
    super(type);
    this.constant = constant;
  }
  
  public <R, C> R accept(Visitor<R, C> v, C context) { return (R)v.visit(this, context); }
  
  public boolean equals(Object o) {
    if (o == this)
      return true; 
    if (o instanceof Constant)
      return ((Constant)o).getConstant().equals(this.constant); 
    return false;
  }
  
  public T getConstant() { return (T)this.constant; }
}
