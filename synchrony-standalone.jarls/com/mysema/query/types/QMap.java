package com.mysema.query.types;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.Maps;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

public class QMap extends FactoryExpressionBase<Map<Expression<?>, ?>> {
  private static final long serialVersionUID = -7545994090073480810L;
  
  private final ImmutableList<Expression<?>> args;
  
  public QMap(Expression... args) {
    super(Map.class);
    this.args = ImmutableList.copyOf(args);
  }
  
  public QMap(ImmutableList<Expression<?>> args) {
    super(Map.class);
    this.args = args;
  }
  
  public QMap(Expression[]... args) {
    super(Map.class);
    ImmutableList.Builder<Expression<?>> builder = ImmutableList.builder();
    for (Expression[] exprs : args)
      builder.add(exprs); 
    this.args = builder.build();
  }
  
  @Nullable
  public <R, C> R accept(Visitor<R, C> v, C context) { return (R)v.visit(this, context); }
  
  public List<Expression<?>> getArgs() { return this.args; }
  
  public boolean equals(Object obj) {
    if (obj == this)
      return true; 
    if (obj instanceof FactoryExpression) {
      FactoryExpression<?> c = (FactoryExpression)obj;
      return (this.args.equals(c.getArgs()) && getType().equals(c.getType()));
    } 
    return false;
  }
  
  @Nullable
  public Map<Expression<?>, ?> newInstance(Object... args) {
    Map<Expression<?>, Object> map = Maps.newHashMap();
    for (int i = 0; i < args.length; i++)
      map.put(this.args.get(i), args[i]); 
    return map;
  }
}
