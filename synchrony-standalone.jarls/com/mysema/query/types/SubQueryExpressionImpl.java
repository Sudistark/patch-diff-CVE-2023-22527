package com.mysema.query.types;

import com.mysema.query.QueryMetadata;
import javax.annotation.concurrent.Immutable;

@Immutable
public class SubQueryExpressionImpl<T> extends ExpressionBase<T> implements SubQueryExpression<T> {
  private static final long serialVersionUID = 6775967804458163L;
  
  private final QueryMetadata metadata;
  
  public SubQueryExpressionImpl(Class<? extends T> type, QueryMetadata metadata) {
    super(type);
    this.metadata = metadata;
  }
  
  public final boolean equals(Object o) {
    if (o == this)
      return true; 
    if (o instanceof SubQueryExpression) {
      SubQueryExpression<T> s = (SubQueryExpression)o;
      return s.getMetadata().equals(this.metadata);
    } 
    return false;
  }
  
  public final QueryMetadata getMetadata() { return this.metadata; }
  
  public final <R, C> R accept(Visitor<R, C> v, C context) { return (R)v.visit(this, context); }
}
