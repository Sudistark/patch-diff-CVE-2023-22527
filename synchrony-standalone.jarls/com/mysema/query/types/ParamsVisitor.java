package com.mysema.query.types;

import com.mysema.query.JoinExpression;
import com.mysema.query.QueryMetadata;
import java.util.List;
import java.util.Map;

public final class ParamsVisitor extends Object implements Visitor<Void, QueryMetadata> {
  public static final ParamsVisitor DEFAULT = new ParamsVisitor();
  
  public Void visit(Constant<?> expr, QueryMetadata context) { return null; }
  
  public Void visit(FactoryExpression<?> expr, QueryMetadata context) {
    visit(expr.getArgs(), context);
    return null;
  }
  
  public Void visit(Operation<?> expr, QueryMetadata context) {
    visit(expr.getArgs(), context);
    return null;
  }
  
  public Void visit(ParamExpression<?> expr, QueryMetadata context) { return null; }
  
  public Void visit(Path<?> expr, QueryMetadata context) { return null; }
  
  public Void visit(SubQueryExpression<?> expr, QueryMetadata context) {
    QueryMetadata md = expr.getMetadata();
    for (Map.Entry<ParamExpression<?>, Object> entry : md.getParams().entrySet())
      context.setParam((ParamExpression)entry.getKey(), entry.getValue()); 
    visit(md.getGroupBy(), context);
    visit(md.getHaving(), context);
    for (JoinExpression join : md.getJoins()) {
      visit(join.getTarget(), context);
      visit(join.getCondition(), context);
    } 
    visit(md.getProjection(), context);
    visit(md.getWhere(), context);
    return null;
  }
  
  public Void visit(TemplateExpression<?> expr, QueryMetadata context) {
    for (Object arg : expr.getArgs()) {
      if (arg instanceof Expression)
        ((Expression)arg).accept(this, context); 
    } 
    return null;
  }
  
  private void visit(Expression<?> expr, QueryMetadata context) {
    if (expr != null)
      expr.accept(this, context); 
  }
  
  private void visit(List<Expression<?>> exprs, QueryMetadata context) {
    for (Expression<?> arg : exprs)
      arg.accept(this, context); 
  }
}
