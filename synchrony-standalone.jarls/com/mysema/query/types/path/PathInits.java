package com.mysema.query.types.path;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.Iterables;
import com.google.common.collect.Maps;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

public class PathInits implements Serializable {
  private static final long serialVersionUID = -2173980858324141095L;
  
  public static final PathInits DEFAULT = new PathInits(new String[0]);
  
  public static final PathInits DIRECT = new PathInits(new String[] { "*" });
  
  public static final PathInits DIRECT2 = new PathInits(new String[] { "*.*" });
  
  private final boolean initAllProps;
  
  private final PathInits defaultValue;
  
  private final Map<String, PathInits> propertyToInits = new HashMap();
  
  public PathInits(String... initStrs) {
    boolean _initAllProps = false;
    PathInits _defaultValue = DEFAULT;
    Map<String, Collection<String>> properties = Maps.newHashMap();
    for (String initStr : initStrs) {
      if (initStr.equals("*")) {
        _initAllProps = true;
      } else if (initStr.startsWith("*.")) {
        _initAllProps = true;
        _defaultValue = new PathInits(new String[] { initStr.substring(2) });
      } else {
        String key = initStr;
        ImmutableList immutableList = Collections.emptyList();
        if (initStr.contains(".")) {
          key = initStr.substring(0, initStr.indexOf('.'));
          immutableList = ImmutableList.of(initStr.substring(key.length() + 1));
        } 
        Collection<String> values = (Collection)properties.get(key);
        if (values == null) {
          values = new ArrayList<String>();
          properties.put(key, values);
        } 
        values.addAll(immutableList);
      } 
    } 
    for (Map.Entry<String, Collection<String>> entry : properties.entrySet()) {
      PathInits inits = new PathInits((String[])Iterables.toArray((Iterable)entry.getValue(), String.class));
      this.propertyToInits.put(entry.getKey(), inits);
    } 
    this.initAllProps = _initAllProps;
    this.defaultValue = _defaultValue;
  }
  
  public PathInits get(String property) {
    if (this.propertyToInits.containsKey(property))
      return (PathInits)this.propertyToInits.get(property); 
    if (this.initAllProps)
      return this.defaultValue; 
    throw new IllegalArgumentException(property + " is not initialized");
  }
  
  public boolean isInitialized(String property) { return (this.initAllProps || this.propertyToInits.containsKey(property)); }
}
