package com.mysema.query.types;

import com.mysema.query.Tuple;
import java.util.List;
import javax.annotation.Nullable;
import javax.annotation.concurrent.Immutable;

@Immutable
public abstract class MappingProjection<T> extends FactoryExpressionBase<T> {
  private static final long serialVersionUID = -948494350919774466L;
  
  private final QTuple qTuple;
  
  public MappingProjection(Class<? super T> type, Expression... args) {
    super(type);
    this.qTuple = new QTuple(ExpressionUtils.distinctList(args));
  }
  
  public MappingProjection(Class<? super T> type, Expression[]... args) {
    super(type);
    this.qTuple = new QTuple(ExpressionUtils.distinctList(args));
  }
  
  public T newInstance(Object... values) { return (T)map(this.qTuple.newInstance(values)); }
  
  protected abstract T map(Tuple paramTuple);
  
  public List<Expression<?>> getArgs() { return this.qTuple.getArgs(); }
  
  public <R, C> R accept(Visitor<R, C> v, @Nullable C context) { return (R)v.visit(this, context); }
}
