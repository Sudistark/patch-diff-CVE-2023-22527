package com.mysema.query.types;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.primitives.Primitives;
import java.beans.BeanInfo;
import java.beans.IntrospectionException;
import java.beans.Introspector;
import java.beans.PropertyDescriptor;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class QBean<T> extends FactoryExpressionBase<T> {
  private static final long serialVersionUID = -8210214512730989778L;
  
  private final ImmutableMap<String, Expression<?>> bindings;
  
  private final List<Field> fields;
  
  private final List<Method> setters;
  
  private final boolean fieldAccess;
  
  private static ImmutableMap<String, Expression<?>> createBindings(Expression... args) {
    ImmutableMap.Builder<String, Expression<?>> rv = ImmutableMap.builder();
    for (Expression<?> expr : args) {
      if (expr instanceof Path) {
        Path<?> path = (Path)expr;
        rv.put(path.getMetadata().getName(), expr);
      } else if (expr instanceof Operation) {
        Operation<?> operation = (Operation)expr;
        if (operation.getOperator() == Ops.ALIAS && operation.getArg(1) instanceof Path) {
          Path<?> path = (Path)operation.getArg(1);
          if (isCompoundExpression(operation.getArg(0))) {
            rv.put(path.getMetadata().getName(), operation.getArg(0));
          } else {
            rv.put(path.getMetadata().getName(), operation);
          } 
        } else {
          throw new IllegalArgumentException("Unsupported expression " + expr);
        } 
      } else {
        throw new IllegalArgumentException("Unsupported expression " + expr);
      } 
    } 
    return rv.build();
  }
  
  private static boolean isCompoundExpression(Expression<?> expr) { return (expr instanceof FactoryExpression || expr instanceof com.mysema.query.group.GroupExpression); }
  
  private static Class<?> normalize(Class<?> cl) { return cl.isPrimitive() ? Primitives.wrap(cl) : cl; }
  
  public QBean(Path<T> type, Expression... args) { this(type.getType(), false, args); }
  
  public QBean(Path<T> type, Map<String, ? extends Expression<?>> bindings) { this(type.getType(), false, bindings); }
  
  public QBean(Path<T> type, boolean fieldAccess, Expression... args) { this(type.getType(), fieldAccess, args); }
  
  public QBean(Path<T> type, boolean fieldAccess, Map<String, ? extends Expression<?>> bindings) { this(type.getType(), fieldAccess, bindings); }
  
  public QBean(Class<T> type, Map<String, ? extends Expression<?>> bindings) { this(type, false, bindings); }
  
  public QBean(Class<T> type, Expression... args) { this(type, false, args); }
  
  public QBean(Class<T> type, boolean fieldAccess, Expression... args) { this(type, fieldAccess, createBindings(args)); }
  
  public QBean(Class<T> type, boolean fieldAccess, Map<String, ? extends Expression<?>> bindings) {
    super(type);
    this.bindings = ImmutableMap.copyOf(bindings);
    this.fieldAccess = fieldAccess;
    if (fieldAccess) {
      this.fields = initFields(bindings);
      this.setters = ImmutableList.of();
    } else {
      this.fields = ImmutableList.of();
      this.setters = initMethods(bindings);
    } 
  }
  
  private List<Field> initFields(Map<String, ? extends Expression<?>> args) {
    List<Field> fields = new ArrayList<Field>(args.size());
    for (Map.Entry<String, ? extends Expression<?>> entry : args.entrySet()) {
      String property = (String)entry.getKey();
      Expression<?> expr = (Expression)entry.getValue();
      Class<?> beanType = getType();
      Field field = null;
      while (!beanType.equals(Object.class)) {
        try {
          field = beanType.getDeclaredField(property);
          field.setAccessible(true);
          if (!normalize(field.getType()).isAssignableFrom(expr.getType()))
            typeMismatch(field.getType(), expr); 
          beanType = Object.class;
        } catch (SecurityException securityException) {
        
        } catch (NoSuchFieldException e) {
          beanType = beanType.getSuperclass();
        } 
      } 
      if (field == null)
        propertyNotFound(expr, property); 
      fields.add(field);
    } 
    return fields;
  }
  
  private List<Method> initMethods(Map<String, ? extends Expression<?>> args) {
    try {
      List<Method> methods = new ArrayList<Method>(args.size());
      BeanInfo beanInfo = Introspector.getBeanInfo(getType());
      PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();
      for (Map.Entry<String, ? extends Expression<?>> entry : args.entrySet()) {
        String property = (String)entry.getKey();
        Expression<?> expr = (Expression)entry.getValue();
        Method setter = null;
        for (PropertyDescriptor prop : propertyDescriptors) {
          if (prop.getName().equals(property)) {
            setter = prop.getWriteMethod();
            if (!normalize(prop.getPropertyType()).isAssignableFrom(expr.getType()))
              typeMismatch(prop.getPropertyType(), expr); 
            break;
          } 
        } 
        if (setter == null)
          propertyNotFound(expr, property); 
        methods.add(setter);
      } 
      return methods;
    } catch (IntrospectionException e) {
      throw new RuntimeException(e.getMessage(), e);
    } 
  }
  
  protected void propertyNotFound(Expression<?> expr, String property) {}
  
  protected void typeMismatch(Class<?> type, Expression<?> expr) {
    String msg = expr.getType().getName() + " is not compatible with " + type.getName();
    throw new IllegalArgumentException(msg);
  }
  
  public T newInstance(Object... a) {
    try {
      T rv = (T)create(getType());
      if (this.fieldAccess) {
        for (int i = 0; i < a.length; i++) {
          Object value = a[i];
          if (value != null) {
            Field field = (Field)this.fields.get(i);
            if (field != null)
              field.set(rv, value); 
          } 
        } 
      } else {
        for (int i = 0; i < a.length; i++) {
          Object value = a[i];
          if (value != null) {
            Method setter = (Method)this.setters.get(i);
            if (setter != null)
              setter.invoke(rv, new Object[] { value }); 
          } 
        } 
      } 
      return rv;
    } catch (InstantiationException e) {
      throw new ExpressionException(e.getMessage(), e);
    } catch (IllegalAccessException e) {
      throw new ExpressionException(e.getMessage(), e);
    } catch (InvocationTargetException e) {
      throw new ExpressionException(e.getMessage(), e);
    } 
  }
  
  protected <T> T create(Class<T> type) throws IllegalAccessException, InstantiationException { return (T)type.newInstance(); }
  
  public Expression<T> as(Path<T> alias) { return OperationImpl.create(getType(), Ops.ALIAS, this, alias); }
  
  public Expression<T> as(String alias) { return as(new PathImpl(getType(), alias)); }
  
  public <R, C> R accept(Visitor<R, C> v, C context) { return (R)v.visit(this, context); }
  
  public boolean equals(Object obj) {
    if (obj == this)
      return true; 
    if (obj instanceof QBean) {
      QBean<?> c = (QBean)obj;
      return (getArgs().equals(c.getArgs()) && getType().equals(c.getType()));
    } 
    return false;
  }
  
  public List<Expression<?>> getArgs() { return this.bindings.values().asList(); }
}
