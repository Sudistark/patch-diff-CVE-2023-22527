package com.mysema.query.types.expr;

import com.google.common.collect.ImmutableList;
import com.mysema.query.types.Expression;
import com.mysema.query.types.Operation;
import com.mysema.query.types.OperationImpl;
import com.mysema.query.types.Operator;
import com.mysema.query.types.Visitor;
import java.util.List;

public class SimpleOperation<T> extends SimpleExpression<T> implements Operation<T> {
  private static final long serialVersionUID = -285668548371034230L;
  
  private final OperationImpl<T> opMixin;
  
  public static <D> SimpleExpression<D> create(Class<D> type, Operator<? super D> op, Expression<?> one) { return new SimpleOperation(type, op, ImmutableList.of(one)); }
  
  public static <D> SimpleExpression<D> create(Class<D> type, Operator<? super D> op, Expression<?> one, Expression<?> two) { return new SimpleOperation(type, op, ImmutableList.of(one, two)); }
  
  public static <D> SimpleExpression<D> create(Class<D> type, Operator<? super D> op, Expression... args) { return new SimpleOperation(type, op, args); }
  
  protected SimpleOperation(Class<T> type, Operator<? super T> op, Expression... args) { this(type, op, ImmutableList.copyOf(args)); }
  
  protected SimpleOperation(Class<T> type, Operator<? super T> op, ImmutableList<Expression<?>> args) {
    super(new OperationImpl(type, op, args));
    this.opMixin = (OperationImpl)this.mixin;
  }
  
  public final <R, C> R accept(Visitor<R, C> v, C context) { return (R)v.visit(this.opMixin, context); }
  
  public Expression<?> getArg(int index) { return this.opMixin.getArg(index); }
  
  public List<Expression<?>> getArgs() { return this.opMixin.getArgs(); }
  
  public Operator<? super T> getOperator() { return this.opMixin.getOperator(); }
}
