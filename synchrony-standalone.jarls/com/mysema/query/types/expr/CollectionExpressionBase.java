package com.mysema.query.types.expr;

import com.mysema.query.types.CollectionExpression;
import com.mysema.query.types.ConstantImpl;
import com.mysema.query.types.EntityPath;
import com.mysema.query.types.Expression;
import com.mysema.query.types.Ops;
import java.util.Collection;
import javax.annotation.Nullable;

public abstract class CollectionExpressionBase<T extends Collection<E>, E> extends DslExpression<T> implements CollectionExpression<T, E> {
  private static final long serialVersionUID = 691230660037162054L;
  
  public CollectionExpressionBase(Expression<T> mixin) { super(mixin); }
  
  public DslExpression<E> as(EntityPath<E> alias) { return DslOperation.create(getElementType(), Ops.ALIAS, this.mixin, alias); }
  
  public final BooleanExpression contains(E child) { return contains(ConstantImpl.create(child)); }
  
  public final BooleanExpression contains(Expression<E> child) { return BooleanOperation.create(Ops.IN, child, this.mixin); }
  
  public abstract Class<E> getElementType();
  
  public final BooleanExpression isEmpty() {
    if (this.empty == null)
      this.empty = BooleanOperation.create(Ops.COL_IS_EMPTY, this.mixin); 
    return this.empty;
  }
  
  public final BooleanExpression isNotEmpty() { return isEmpty().not(); }
  
  public final NumberExpression<Integer> size() {
    if (this.size == null)
      this.size = NumberOperation.create(Integer.class, Ops.COL_SIZE, this.mixin); 
    return this.size;
  }
}
