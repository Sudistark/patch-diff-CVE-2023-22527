package com.mysema.query.types.expr;

import com.mysema.query.types.ConstantImpl;
import com.mysema.query.types.Expression;
import com.mysema.query.types.NullExpression;
import java.util.ArrayList;
import java.util.List;

public final class CaseForEqBuilder<D> extends Object {
  private final Expression<D> base;
  
  private final Expression<? extends D> other;
  
  private final List<CaseElement<D>> caseElements;
  
  private Class<?> type;
  
  public CaseForEqBuilder(Expression<D> base, Expression<? extends D> other) {
    this.caseElements = new ArrayList();
    this.base = base;
    this.other = other;
  }
  
  public <T> Cases<T, Expression<T>> then(Expression<T> then) {
    this.type = then.getType();
    return (new Object(this)).when(this.other).then(then);
  }
  
  public <T> Cases<T, Expression<T>> then(T then) { return then(ConstantImpl.create(then)); }
  
  public <T> Cases<T, Expression<T>> thenNull() { return then(NullExpression.DEFAULT); }
  
  public <T extends Number & Comparable<?>> Cases<T, NumberExpression<T>> then(T then) { return thenNumber(ConstantImpl.create(then)); }
  
  public <T extends Number & Comparable<?>> Cases<T, NumberExpression<T>> then(NumberExpression<T> then) { return thenNumber(then); }
  
  public <T extends Number & Comparable<?>> Cases<T, NumberExpression<T>> thenNumber(Expression<T> then) {
    this.type = then.getType();
    return (new Object(this)).when(this.other).then(then);
  }
  
  public Cases<String, StringExpression> then(StringExpression then) { return thenString(then); }
  
  public Cases<String, StringExpression> then(String then) { return thenString(ConstantImpl.create(then)); }
  
  private Cases<String, StringExpression> thenString(Expression<String> then) {
    this.type = then.getType();
    return (new Object(this)).when(this.other).then(then);
  }
}
