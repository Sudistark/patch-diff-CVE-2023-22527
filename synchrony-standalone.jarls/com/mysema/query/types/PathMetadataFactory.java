package com.mysema.query.types;

import javax.annotation.Nonnegative;

public final class PathMetadataFactory {
  public static PathMetadata<Integer> forArrayAccess(Path<?> parent, Expression<Integer> index) { return new PathMetadata(parent, index, PathType.ARRAYVALUE); }
  
  public static PathMetadata<Integer> forArrayAccess(Path<?> parent, @Nonnegative int index) { return new PathMetadata(parent, Integer.valueOf(index), PathType.ARRAYVALUE_CONSTANT); }
  
  public static PathMetadata<?> forCollectionAny(Path<?> parent) { return new PathMetadata(parent, "", PathType.COLLECTION_ANY); }
  
  public static <T> PathMetadata<T> forDelegate(Path<T> delegate) { return new PathMetadata(delegate, delegate, PathType.DELEGATE); }
  
  public static PathMetadata<Integer> forListAccess(Path<?> parent, Expression<Integer> index) { return new PathMetadata(parent, index, PathType.LISTVALUE); }
  
  public static PathMetadata<Integer> forListAccess(Path<?> parent, @Nonnegative int index) { return new PathMetadata(parent, Integer.valueOf(index), PathType.LISTVALUE_CONSTANT); }
  
  public static <KT> PathMetadata<KT> forMapAccess(Path<?> parent, Expression<KT> key) { return new PathMetadata(parent, key, PathType.MAPVALUE); }
  
  public static <KT> PathMetadata<KT> forMapAccess(Path<?> parent, KT key) { return new PathMetadata(parent, key, PathType.MAPVALUE_CONSTANT); }
  
  public static PathMetadata<String> forProperty(Path<?> parent, String property) { return new PathMetadata(parent, property, PathType.PROPERTY); }
  
  public static PathMetadata<String> forVariable(String variable) { return new PathMetadata(null, variable, PathType.VARIABLE); }
}
