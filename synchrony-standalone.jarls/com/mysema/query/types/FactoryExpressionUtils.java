package com.mysema.query.types;

import com.mysema.util.ArrayUtils;
import java.util.ArrayList;
import java.util.List;

public final class FactoryExpressionUtils {
  public static FactoryExpression<?> wrap(List<? extends Expression<?>> projection) {
    boolean usesFactoryExpressions = false;
    for (Expression<?> e : projection)
      usesFactoryExpressions |= e instanceof FactoryExpression; 
    if (usesFactoryExpressions)
      return wrap(new ArrayConstructorExpression((Expression[])projection
            .toArray(new Expression[projection.size()]))); 
    return null;
  }
  
  public static <T> FactoryExpression<T> wrap(FactoryExpression<T> expr, List<Expression<?>> conversions) { return new FactoryExpressionAdapter(expr, conversions); }
  
  public static <T> FactoryExpression<T> wrap(FactoryExpression<T> expr) {
    for (Expression<?> arg : expr.getArgs()) {
      if (arg instanceof ProjectionRole)
        arg = ((ProjectionRole)arg).getProjection(); 
      if (arg instanceof FactoryExpression)
        return new FactoryExpressionAdapter(expr); 
    } 
    return expr;
  }
  
  private static List<Expression<?>> expand(List<Expression<?>> exprs) {
    List<Expression<?>> rv = new ArrayList<Expression<?>>(exprs.size());
    for (Expression<?> expr : exprs) {
      if (expr instanceof ProjectionRole)
        expr = ((ProjectionRole)expr).getProjection(); 
      if (expr instanceof FactoryExpression) {
        rv.addAll(expand(((FactoryExpression)expr).getArgs()));
        continue;
      } 
      rv.add(expr);
    } 
    return rv;
  }
  
  private static int countArguments(FactoryExpression<?> expr) {
    int counter = 0;
    for (Expression<?> arg : expr.getArgs()) {
      if (arg instanceof ProjectionRole)
        arg = ((ProjectionRole)arg).getProjection(); 
      if (arg instanceof FactoryExpression) {
        counter += countArguments((FactoryExpression)arg);
        continue;
      } 
      counter++;
    } 
    return counter;
  }
  
  private static Object[] compress(List<Expression<?>> exprs, Object[] args) {
    Object[] rv = new Object[exprs.size()];
    int offset = 0;
    for (int i = 0; i < exprs.size(); i++) {
      Expression<?> expr = (Expression)exprs.get(i);
      if (expr instanceof ProjectionRole)
        expr = ((ProjectionRole)expr).getProjection(); 
      if (expr instanceof FactoryExpression) {
        FactoryExpression<?> fe = (FactoryExpression)expr;
        int fullArgsLength = countArguments(fe);
        Object[] compressed = compress(fe.getArgs(), ArrayUtils.subarray(args, offset, offset + fullArgsLength));
        rv[i] = fe.newInstance(compressed);
        offset += fullArgsLength;
      } else {
        rv[i] = args[offset];
        offset++;
      } 
    } 
    return rv;
  }
}
