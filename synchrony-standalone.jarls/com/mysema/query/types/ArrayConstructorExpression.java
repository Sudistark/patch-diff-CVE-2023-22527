package com.mysema.query.types;

import com.google.common.collect.ImmutableList;
import java.lang.reflect.Array;
import java.util.List;
import javax.annotation.concurrent.Immutable;

@Immutable
public class ArrayConstructorExpression<T> extends FactoryExpressionBase<T[]> {
  private static final long serialVersionUID = 8667880104290226505L;
  
  private final Class<T> elementType;
  
  private final ImmutableList<Expression<?>> args;
  
  public ArrayConstructorExpression(Expression... args) { this(Object[].class, (Expression[])args); }
  
  public ArrayConstructorExpression(Class<T[]> type, Expression... args) {
    super(type);
    this.elementType = type.getComponentType();
    this.args = ImmutableList.copyOf(args);
  }
  
  public final Class<T> getElementType() { return this.elementType; }
  
  public <R, C> R accept(Visitor<R, C> v, C context) { return (R)v.visit(this, context); }
  
  public T[] newInstance(Object... a) {
    if (a.getClass().getComponentType().equals(this.elementType))
      return (T[])(Object[])a; 
    T[] rv = (T[])(Object[])Array.newInstance(this.elementType, a.length);
    System.arraycopy(a, 0, rv, 0, a.length);
    return rv;
  }
  
  public List<Expression<?>> getArgs() { return this.args; }
  
  public boolean equals(Object obj) {
    if (obj == this)
      return true; 
    if (obj instanceof FactoryExpression) {
      FactoryExpression<?> c = (FactoryExpression)obj;
      return (this.args.equals(c.getArgs()) && getType().equals(c.getType()));
    } 
    return false;
  }
}
