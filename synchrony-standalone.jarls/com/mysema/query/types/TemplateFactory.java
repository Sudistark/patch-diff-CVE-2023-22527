package com.mysema.query.types;

import com.google.common.base.Function;
import com.google.common.collect.ImmutableList;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class TemplateFactory {
  public static final TemplateFactory DEFAULT = new TemplateFactory('\\');
  
  private static final Constant<String> PERCENT = ConstantImpl.create("%");
  
  private static final Pattern elementPattern = Pattern.compile("\\{(%?%?)(\\d+)([slu%]?%?)\\}");
  
  private final Map<String, Template> cache;
  
  private final char escape;
  
  private final Function<Object, Object> toLowerCase;
  
  private final Function<Object, Object> toUpperCase;
  
  private final Function<Object, Object> toStartsWithViaLike;
  
  private final Function<Object, Object> toStartsWithViaLikeLower;
  
  private final Function<Object, Object> toEndsWithViaLike;
  
  private final Function<Object, Object> toEndsWithViaLikeLower;
  
  private final Function<Object, Object> toContainsViaLike;
  
  private final Function<Object, Object> toContainsViaLikeLower;
  
  public TemplateFactory(char escape) {
    this.cache = new ConcurrentHashMap();
    this.toLowerCase = new Object(this);
    this.toUpperCase = new Object(this);
    this.toStartsWithViaLike = new Object(this);
    this.toStartsWithViaLikeLower = new Object(this);
    this.toEndsWithViaLike = new Object(this);
    this.toEndsWithViaLikeLower = new Object(this);
    this.toContainsViaLike = new Object(this);
    this.toContainsViaLikeLower = new Object(this);
    this.escape = escape;
  }
  
  public Template create(String template) {
    if (this.cache.containsKey(template))
      return (Template)this.cache.get(template); 
    Matcher m = elementPattern.matcher(template);
    ImmutableList.Builder<Template.Element> elements = ImmutableList.builder();
    int end = 0;
    while (m.find()) {
      if (m.start() > end)
        elements.add(new Template.StaticText(template.substring(end, m.start()))); 
      String premodifiers = m.group(1).toLowerCase(Locale.ENGLISH);
      int index = Integer.parseInt(m.group(2));
      String postmodifiers = m.group(3).toLowerCase(Locale.ENGLISH);
      boolean asString = false;
      Function<Object, Object> transformer = null;
      switch (premodifiers.length()) {
        case 1:
          transformer = this.toEndsWithViaLike;
          break;
        case 2:
          transformer = this.toEndsWithViaLikeLower;
          break;
      } 
      switch (postmodifiers.length()) {
        case 1:
          switch (postmodifiers.charAt(0)) {
            case '%':
              if (transformer == null) {
                transformer = this.toStartsWithViaLike;
                break;
              } 
              transformer = this.toContainsViaLike;
              break;
            case 'l':
              transformer = this.toLowerCase;
              break;
            case 'u':
              transformer = this.toUpperCase;
              break;
            case 's':
              asString = true;
              break;
          } 
          break;
        case 2:
          if (transformer == null) {
            transformer = this.toStartsWithViaLikeLower;
            break;
          } 
          transformer = this.toContainsViaLikeLower;
          break;
      } 
      if (asString) {
        elements.add(new Template.AsString(index));
      } else if (transformer != null) {
        elements.add(new Template.Transformed(index, transformer));
      } else {
        elements.add(new Template.ByIndex(index));
      } 
      end = m.end();
    } 
    if (end < template.length())
      elements.add(new Template.StaticText(template.substring(end))); 
    Template rv = new Template(template, elements.build());
    this.cache.put(template, rv);
    return rv;
  }
  
  public String escapeForLike(String str) {
    StringBuilder rv = new StringBuilder(str.length() + 3);
    for (int i = 0; i < str.length(); i++) {
      char ch = str.charAt(i);
      if (ch == this.escape || ch == '%' || ch == '_')
        rv.append(this.escape); 
      rv.append(ch);
    } 
    return rv.toString();
  }
}
