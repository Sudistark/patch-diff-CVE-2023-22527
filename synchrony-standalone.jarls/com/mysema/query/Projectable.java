package com.mysema.query;

import com.mysema.commons.lang.CloseableIterator;
import com.mysema.query.types.Expression;
import java.util.List;
import java.util.Map;
import javax.annotation.Nonnegative;
import javax.annotation.Nullable;

public interface Projectable {
  @Nonnegative
  long count();
  
  boolean exists();
  
  boolean notExists();
  
  CloseableIterator<Tuple> iterate(Expression<?>... paramVarArgs);
  
  <RT> CloseableIterator<RT> iterate(Expression<RT> paramExpression);
  
  List<Tuple> list(Expression<?>... paramVarArgs);
  
  <RT> List<RT> list(Expression<RT> paramExpression);
  
  SearchResults<Tuple> listResults(Expression<?>... paramVarArgs);
  
  <RT> SearchResults<RT> listResults(Expression<RT> paramExpression);
  
  <K, V> Map<K, V> map(Expression<K> paramExpression1, Expression<V> paramExpression2);
  
  @Nullable
  Tuple singleResult(Expression<?>... paramVarArgs);
  
  @Nullable
  <RT> RT singleResult(Expression<RT> paramExpression);
  
  <T> T transform(ResultTransformer<T> paramResultTransformer);
  
  @Nullable
  Tuple uniqueResult(Expression<?>... paramVarArgs);
  
  @Nullable
  <RT> RT uniqueResult(Expression<RT> paramExpression);
}
