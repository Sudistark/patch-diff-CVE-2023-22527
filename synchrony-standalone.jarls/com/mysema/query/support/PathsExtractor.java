package com.mysema.query.support;

import com.mysema.query.types.Constant;
import com.mysema.query.types.Expression;
import com.mysema.query.types.FactoryExpression;
import com.mysema.query.types.Operation;
import com.mysema.query.types.ParamExpression;
import com.mysema.query.types.Path;
import com.mysema.query.types.SubQueryExpression;
import com.mysema.query.types.TemplateExpression;
import com.mysema.query.types.Visitor;
import java.util.Collection;
import java.util.List;

public final class PathsExtractor extends Object implements Visitor<Void, List<Path<?>>> {
  public static final PathsExtractor DEFAULT = new PathsExtractor();
  
  public Void visit(Constant<?> expr, List<Path<?>> paths) { return null; }
  
  public Void visit(FactoryExpression<?> expr, List<Path<?>> paths) {
    visit(expr.getArgs(), paths);
    return null;
  }
  
  public Void visit(Operation<?> expr, List<Path<?>> paths) {
    visit(expr.getArgs(), paths);
    return null;
  }
  
  public Void visit(ParamExpression<?> expr, List<Path<?>> paths) { return null; }
  
  public Void visit(Path<?> expr, List<Path<?>> paths) {
    paths.add(expr);
    return null;
  }
  
  public Void visit(SubQueryExpression<?> expr, List<Path<?>> paths) { return null; }
  
  public Void visit(TemplateExpression<?> expr, List<Path<?>> paths) {
    visit(expr.getArgs(), paths);
    return null;
  }
  
  public Path<?> visit(Collection<?> exprs, List<Path<?>> paths) {
    for (Object e : exprs) {
      if (e instanceof Expression)
        ((Expression)e).accept(this, paths); 
    } 
    return null;
  }
}
