package com.mysema.query.support;

import com.mysema.query.types.Expression;
import com.mysema.query.types.FactoryExpressionBase;
import com.mysema.query.types.Visitor;
import com.mysema.util.MathUtils;
import java.util.Collections;
import java.util.List;

public class NumberConversion<T> extends FactoryExpressionBase<T> {
  private static final long serialVersionUID = 7840412008633901748L;
  
  private final List<Expression<?>> exprs;
  
  public NumberConversion(Expression<T> expr) {
    super(expr.getType());
    this.exprs = Collections.singletonList(expr);
  }
  
  public <R, C> R accept(Visitor<R, C> v, C context) { return (R)v.visit(this, context); }
  
  public List<Expression<?>> getArgs() { return this.exprs; }
  
  public T newInstance(Object... args) {
    if (args[false] != null) {
      if (getType().equals(Boolean.class))
        return (T)Boolean.valueOf((((Number)args[0]).intValue() > 0)); 
      return (T)MathUtils.cast((Number)args[0], getType());
    } 
    return null;
  }
}
