package com.mysema.query.support;

import com.google.common.collect.Maps;
import com.mysema.query.types.Expression;
import com.mysema.query.types.FactoryExpression;
import com.mysema.query.types.FactoryExpressionBase;
import com.mysema.query.types.Visitor;
import com.mysema.util.MathUtils;
import java.util.List;
import java.util.Map;

public class NumberConversions<T> extends FactoryExpressionBase<T> {
  private static final long serialVersionUID = -7834053123363933721L;
  
  private final FactoryExpression<T> expr;
  
  private final Map<Class<?>, Enum<?>[]> values = Maps.newHashMap();
  
  public NumberConversions(FactoryExpression<T> expr) {
    super(expr.getType());
    this.expr = expr;
  }
  
  public <R, C> R accept(Visitor<R, C> v, C context) { return (R)v.visit(this, context); }
  
  public List<Expression<?>> getArgs() { return this.expr.getArgs(); }
  
  private <E extends Enum<E>> Enum<E>[] getValues(Class<E> enumClass) {
    Enum[] values = (Enum[])this.values.get(enumClass);
    if (values == null)
      try {
        values = (Enum[])enumClass.getMethod("values", new Class[0]).invoke(null, new Object[0]);
        this.values.put(enumClass, values);
      } catch (Exception e) {
        throw new RuntimeException(e.getMessage(), e);
      }  
    return values;
  }
  
  public T newInstance(Object... args) {
    for (int i = 0; i < args.length; i++) {
      Class<?> type = ((Expression)this.expr.getArgs().get(i)).getType();
      if (Enum.class.isAssignableFrom(type) && !type.isInstance(args[i])) {
        if (args[i] instanceof String) {
          args[i] = Enum.valueOf(type, (String)args[i]);
        } else if (args[i] instanceof Number) {
          args[i] = getValues(type)[((Number)args[i]).intValue()];
        } 
      } else if (args[i] instanceof Number && !type.isInstance(args[i])) {
        if (type.equals(Boolean.class)) {
          args[i] = Boolean.valueOf((((Number)args[i]).intValue() > 0));
        } else if (Number.class.isAssignableFrom(type)) {
          args[i] = MathUtils.cast((Number)args[i], type);
        } 
      } 
    } 
    return (T)this.expr.newInstance(args);
  }
}
