package com.mysema.query.support;

import com.google.common.base.Preconditions;
import com.mysema.query.types.Expression;
import com.mysema.query.types.FactoryExpressionBase;
import com.mysema.query.types.Visitor;
import java.util.Collections;
import java.util.List;

public class EnumConversion<T> extends FactoryExpressionBase<T> {
  private static final long serialVersionUID = 7840412008633901748L;
  
  private final List<Expression<?>> exprs;
  
  private final T[] values;
  
  public EnumConversion(Expression<T> expr) {
    super(expr.getType());
    Class<? extends T> type = getType();
    Preconditions.checkArgument(type.isEnum(), "%s is not an enum", new Object[] { type });
    this.exprs = Collections.singletonList(expr);
    this.values = type.getEnumConstants();
  }
  
  public <R, C> R accept(Visitor<R, C> v, C context) { return (R)v.visit(this, context); }
  
  public List<Expression<?>> getArgs() { return this.exprs; }
  
  public T newInstance(Object... args) {
    if (args[false] != null) {
      if (args[0] instanceof String)
        return (T)Enum.valueOf(getType().asSubclass(Enum.class), (String)args[0]); 
      if (args[0] instanceof Number)
        return (T)this.values[((Number)args[0]).intValue()]; 
      return (T)args[0];
    } 
    return null;
  }
}
