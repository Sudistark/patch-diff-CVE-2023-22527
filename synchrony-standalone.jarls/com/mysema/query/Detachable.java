package com.mysema.query;

import com.mysema.query.types.Expression;
import com.mysema.query.types.Predicate;
import com.mysema.query.types.expr.BooleanExpression;
import com.mysema.query.types.expr.ComparableExpression;
import com.mysema.query.types.expr.DateExpression;
import com.mysema.query.types.expr.DateTimeExpression;
import com.mysema.query.types.expr.NumberExpression;
import com.mysema.query.types.expr.StringExpression;
import com.mysema.query.types.expr.TimeExpression;
import com.mysema.query.types.query.BooleanSubQuery;
import com.mysema.query.types.query.ComparableSubQuery;
import com.mysema.query.types.query.DateSubQuery;
import com.mysema.query.types.query.DateTimeSubQuery;
import com.mysema.query.types.query.ListSubQuery;
import com.mysema.query.types.query.NumberSubQuery;
import com.mysema.query.types.query.SimpleSubQuery;
import com.mysema.query.types.query.StringSubQuery;
import com.mysema.query.types.query.TimeSubQuery;

public interface Detachable {
  NumberSubQuery<Long> count();
  
  BooleanExpression exists();
  
  ListSubQuery<Tuple> list(Expression<?>... paramVarArgs);
  
  ListSubQuery<Tuple> list(Object... paramVarArgs);
  
  <RT> ListSubQuery<RT> list(Expression<RT> paramExpression);
  
  BooleanExpression notExists();
  
  SimpleSubQuery<Tuple> unique(Expression<?>... paramVarArgs);
  
  SimpleSubQuery<Tuple> unique(Object... paramVarArgs);
  
  <RT> SimpleSubQuery<RT> unique(Expression<RT> paramExpression);
  
  BooleanSubQuery unique(Predicate paramPredicate);
  
  StringSubQuery unique(StringExpression paramStringExpression);
  
  <RT extends Comparable<?>> ComparableSubQuery<RT> unique(ComparableExpression<RT> paramComparableExpression);
  
  <RT extends Comparable<?>> DateSubQuery<RT> unique(DateExpression<RT> paramDateExpression);
  
  <RT extends Comparable<?>> DateTimeSubQuery<RT> unique(DateTimeExpression<RT> paramDateTimeExpression);
  
  <RT extends Comparable<?>> TimeSubQuery<RT> unique(TimeExpression<RT> paramTimeExpression);
  
  <RT extends Number & Comparable<?>> NumberSubQuery<RT> unique(NumberExpression<RT> paramNumberExpression);
}
