package com.mysema.query;

import com.google.common.base.Objects;
import com.mysema.query.types.ExpressionUtils;
import com.mysema.query.types.Predicate;
import com.mysema.query.types.Visitor;
import javax.annotation.Nullable;

public final class BooleanBuilder implements Predicate, Cloneable {
  private static final long serialVersionUID = -4129485177345542519L;
  
  @Nullable
  private Predicate predicate;
  
  public BooleanBuilder() {}
  
  public BooleanBuilder(Predicate initial) { this.predicate = (Predicate)ExpressionUtils.extract(initial); }
  
  public <R, C> R accept(Visitor<R, C> v, C context) {
    if (this.predicate != null)
      return (R)this.predicate.accept(v, context); 
    return null;
  }
  
  public BooleanBuilder and(@Nullable Predicate right) {
    if (right != null)
      if (this.predicate == null) {
        this.predicate = right;
      } else {
        this.predicate = ExpressionUtils.and(this.predicate, right);
      }  
    return this;
  }
  
  public BooleanBuilder andAnyOf(Predicate... args) {
    if (args.length > 0)
      and(ExpressionUtils.anyOf(args)); 
    return this;
  }
  
  public BooleanBuilder andNot(Predicate right) { return and(right.not()); }
  
  public BooleanBuilder clone() throws CloneNotSupportedException { return (BooleanBuilder)super.clone(); }
  
  public boolean equals(Object o) {
    if (o == this)
      return true; 
    if (o instanceof BooleanBuilder)
      return Objects.equal(((BooleanBuilder)o).getValue(), this.predicate); 
    return false;
  }
  
  @Nullable
  public Predicate getValue() { return this.predicate; }
  
  public int hashCode() { return (this.predicate != null) ? this.predicate.hashCode() : 0; }
  
  public boolean hasValue() { return (this.predicate != null); }
  
  public BooleanBuilder not() throws CloneNotSupportedException {
    if (this.predicate != null)
      this.predicate = this.predicate.not(); 
    return this;
  }
  
  public BooleanBuilder or(@Nullable Predicate right) {
    if (right != null)
      if (this.predicate == null) {
        this.predicate = right;
      } else {
        this.predicate = ExpressionUtils.or(this.predicate, right);
      }  
    return this;
  }
  
  public BooleanBuilder orAllOf(Predicate... args) {
    if (args.length > 0)
      or(ExpressionUtils.allOf(args)); 
    return this;
  }
  
  public BooleanBuilder orNot(Predicate right) { return or(right.not()); }
  
  public Class<? extends Boolean> getType() { return Boolean.class; }
  
  public String toString() { return (this.predicate != null) ? this.predicate.toString() : super.toString(); }
}
