package com.mysema.query.sql;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.mysema.query.QueryMetadata;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.util.Collection;
import java.util.List;
import java.util.Map;

public class SQLListenerContextImpl implements SQLListenerContext {
  private final Map<String, Object> contextMap;
  
  private final QueryMetadata md;
  
  private final List<String> sqlStatements;
  
  private final List<PreparedStatement> preparedStatements;
  
  private RelationalPath<?> entity;
  
  private Connection connection;
  
  private Exception exception;
  
  public SQLListenerContextImpl(QueryMetadata metadata, Connection connection, RelationalPath<?> entity) {
    this.contextMap = Maps.newHashMap();
    this.preparedStatements = Lists.newArrayList();
    this.sqlStatements = Lists.newArrayList();
    this.md = metadata;
    this.connection = connection;
    this.entity = entity;
  }
  
  public SQLListenerContextImpl(QueryMetadata metadata, Connection connection) { this(metadata, connection, null); }
  
  public SQLListenerContextImpl(QueryMetadata metadata) { this(metadata, null, null); }
  
  public void addSQL(String sql) { this.sqlStatements.add(sql); }
  
  public void setEntity(RelationalPath<?> entity) { this.entity = entity; }
  
  public void setConnection(Connection connection) { this.connection = connection; }
  
  public void setException(Exception exception) { this.exception = exception; }
  
  public void addPreparedStatement(PreparedStatement preparedStatement) { this.preparedStatements.add(preparedStatement); }
  
  public QueryMetadata getMetadata() { return this.md; }
  
  public RelationalPath<?> getEntity() { return this.entity; }
  
  public String getSQL() { return this.sqlStatements.isEmpty() ? null : (String)this.sqlStatements.get(0); }
  
  public Collection<String> getSQLStatements() { return this.sqlStatements; }
  
  public Exception getException() { return this.exception; }
  
  public Connection getConnection() { return this.connection; }
  
  public Collection<PreparedStatement> getPreparedStatements() { return this.preparedStatements; }
  
  public PreparedStatement getPreparedStatement() { return this.preparedStatements.isEmpty() ? null : (PreparedStatement)this.preparedStatements.get(0); }
  
  public Object getData(String dataKey) { return this.contextMap.get(dataKey); }
  
  public void setData(String dataKey, Object value) { this.contextMap.put(dataKey, value); }
  
  public String toString() {
    StringBuilder sb = (new StringBuilder()).append(" sql:").append(nicerSql(getSQL())).append(" connection:").append((this.connection == null) ? "not connected" : "connected").append(" entity:").append(this.entity).append(" exception:").append(this.exception);
    for (Map.Entry<String, Object> entry : this.contextMap.entrySet())
      sb.append(" [").append((String)entry.getKey()).append(":").append(entry.getValue()).append("]"); 
    return sb.toString();
  }
  
  private String nicerSql(String sql) { return "'" + ((sql == null) ? null : sql.replace('\n', ' ')) + "'"; }
}
