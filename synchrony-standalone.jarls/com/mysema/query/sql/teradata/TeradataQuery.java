package com.mysema.query.sql.teradata;

import com.mysema.query.DefaultQueryMetadata;
import com.mysema.query.QueryFlag;
import com.mysema.query.QueryMetadata;
import com.mysema.query.sql.AbstractSQLQuery;
import com.mysema.query.sql.Configuration;
import com.mysema.query.sql.SQLOps;
import com.mysema.query.sql.SQLTemplates;
import com.mysema.query.sql.TeradataTemplates;
import com.mysema.query.types.Predicate;
import com.mysema.query.types.PredicateOperation;
import java.sql.Connection;

public class TeradataQuery extends AbstractSQLQuery<TeradataQuery> {
  public TeradataQuery(Connection conn) { this(conn, new Configuration(new TeradataTemplates()), new DefaultQueryMetadata()); }
  
  public TeradataQuery(Connection conn, SQLTemplates templates) { this(conn, new Configuration(templates), new DefaultQueryMetadata()); }
  
  public TeradataQuery(Connection conn, Configuration configuration) { this(conn, configuration, new DefaultQueryMetadata()); }
  
  public TeradataQuery(Connection conn, Configuration configuration, QueryMetadata metadata) { super(conn, configuration, metadata); }
  
  public TeradataQuery qualify(Predicate predicate) {
    PredicateOperation predicateOperation = PredicateOperation.create(SQLOps.QUALIFY, predicate);
    return (TeradataQuery)this.queryMixin.addFlag(new QueryFlag(QueryFlag.Position.BEFORE_ORDER, predicateOperation));
  }
  
  public TeradataQuery clone(Connection conn) {
    TeradataQuery q = new TeradataQuery(conn, getConfiguration(), getMetadata().clone());
    q.clone(this);
    return q;
  }
}
