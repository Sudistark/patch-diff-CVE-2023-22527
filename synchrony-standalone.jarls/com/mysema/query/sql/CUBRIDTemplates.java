package com.mysema.query.sql;

import com.mysema.query.QueryMetadata;
import com.mysema.query.QueryModifiers;
import com.mysema.query.sql.types.NumericBooleanType;
import com.mysema.query.types.Ops;

public class CUBRIDTemplates extends SQLTemplates {
  public static final CUBRIDTemplates DEFAULT = new CUBRIDTemplates();
  
  public static SQLTemplates.Builder builder() { return new Object(); }
  
  private String limitTemplate = "\nlimit {0}";
  
  private String offsetLimitTemplate = "\nlimit {0}, {1}";
  
  public CUBRIDTemplates() { this('\\', false); }
  
  public CUBRIDTemplates(boolean quote) { this('\\', quote); }
  
  public CUBRIDTemplates(char escape, boolean quote) {
    super("\"", escape, quote);
    setDummyTable(null);
    addCustomType(NumericBooleanType.DEFAULT);
    setParameterMetadataAvailable(false);
    setNullsFirst(null);
    setNullsLast(null);
    setDefaultValues("\ndefault values");
    setArraysSupported(false);
    add(Ops.DateTimeOps.DATE, "trunc({0})");
    add(Ops.DateTimeOps.DAY_OF_YEAR, "dayofyear({0})");
    add(Ops.DateTimeOps.DAY_OF_WEEK, "dayofweek({0})");
    add(Ops.DateTimeOps.YEAR_WEEK, "(year({0}) * 100 + week({0}))");
    add(Ops.DateTimeOps.ADD_YEARS, "date_add({0}, interval {1s} year)");
    add(Ops.DateTimeOps.ADD_MONTHS, "date_add({0}, interval {1s} month)");
    add(Ops.DateTimeOps.ADD_WEEKS, "date_add({0}, interval {1s} week)");
    add(Ops.DateTimeOps.ADD_DAYS, "date_add({0}, interval {1s} day)");
    add(Ops.DateTimeOps.ADD_HOURS, "date_add({0}, interval {1s} hour)");
    add(Ops.DateTimeOps.ADD_MINUTES, "date_add({0}, interval {1s} minute)");
    add(Ops.DateTimeOps.ADD_SECONDS, "date_add({0}, interval {1s} second)");
    String diffSeconds = "(unix_timestamp({1}) - unix_timestamp({0}))";
    add(Ops.DateTimeOps.DIFF_YEARS, "(year({1}) - year({0}))");
    add(Ops.DateTimeOps.DIFF_MONTHS, "months_between({1}, {0})");
    add(Ops.DateTimeOps.DIFF_WEEKS, "ceil(({1}-{0}) / 7)");
    add(Ops.DateTimeOps.DIFF_DAYS, "({1}-{0})");
    add(Ops.DateTimeOps.DIFF_HOURS, "ceil(" + diffSeconds + " / 3600)");
    add(Ops.DateTimeOps.DIFF_MINUTES, "ceil(" + diffSeconds + " / 60)");
    add(Ops.DateTimeOps.DIFF_SECONDS, diffSeconds);
    add(Ops.DateTimeOps.TRUNC_YEAR, "trunc({0},'yyyy')");
    add(Ops.DateTimeOps.TRUNC_MONTH, "trunc({0},'mm')");
    add(Ops.DateTimeOps.TRUNC_WEEK, "trunc({0},'day')");
    add(Ops.DateTimeOps.TRUNC_DAY, "trunc({0},'dd')");
    add(Ops.DateTimeOps.TRUNC_HOUR, "timestamp(date({0}),concat(hour({0}),':00:00'))");
    add(Ops.DateTimeOps.TRUNC_MINUTE, "timestamp(date({0}),concat(hour({0}),':',minute({0}),':00'))");
    add(Ops.DateTimeOps.TRUNC_SECOND, "timestamp(date({0}),concat(hour({0}),':',minute({0}),':',second({0})))");
    add(Ops.MathOps.LN, "ln({0})");
    add(Ops.MathOps.LOG, "(ln({0}) / ln({1}))");
    add(Ops.MathOps.COSH, "(exp({0}) + exp({0} * -1)) / 2");
    add(Ops.MathOps.COTH, "(exp({0} * 2) + 1) / (exp({0} * 2) - 1)");
    add(Ops.MathOps.SINH, "(exp({0}) - exp({0} * -1)) / 2");
    add(Ops.MathOps.TANH, "(exp({0} * 2) - 1) / (exp({0} * 2) + 1)");
    addTypeNameToCode("numeric(1,0)", 16, true);
    addTypeNameToCode("numeric(3,0)", -6, true);
    addTypeNameToCode("numeric(38,0)", -5, true);
    addTypeNameToCode("bit varying", -4);
    addTypeNameToCode("bit varying", -3);
    addTypeNameToCode("bit", -2, true);
    addTypeNameToCode("varchar", -1, true);
    addTypeNameToCode("double", 6, true);
    addTypeNameToCode("float", 7, true);
  }
  
  public String serialize(String literal, int jdbcType) {
    switch (jdbcType) {
      case 91:
        return "date'" + literal + "'";
      case 92:
        return "time'" + literal + "'";
      case 93:
        return "timestamp'" + literal + "'";
    } 
    return super.serialize(literal, jdbcType);
  }
  
  protected void serializeModifiers(QueryMetadata metadata, SQLSerializer context) {
    QueryModifiers mod = metadata.getModifiers();
    if (mod.getLimit() != null) {
      if (mod.getOffset() != null) {
        context.handle(this.offsetLimitTemplate, new Object[] { mod.getOffset(), mod.getLimit() });
      } else {
        context.handle(this.limitTemplate, new Object[] { mod.getLimit() });
      } 
    } else if (mod.getOffset() != null) {
      context.handle(this.offsetLimitTemplate, new Object[] { mod.getOffset(), Integer.valueOf(2147483647) });
    } 
  }
}
