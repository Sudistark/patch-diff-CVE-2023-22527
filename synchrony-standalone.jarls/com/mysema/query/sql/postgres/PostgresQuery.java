package com.mysema.query.sql.postgres;

import com.mysema.query.DefaultQueryMetadata;
import com.mysema.query.QueryFlag;
import com.mysema.query.QueryMetadata;
import com.mysema.query.sql.AbstractSQLQuery;
import com.mysema.query.sql.Configuration;
import com.mysema.query.sql.PostgresTemplates;
import com.mysema.query.sql.RelationalPath;
import com.mysema.query.sql.SQLOps;
import com.mysema.query.sql.SQLTemplates;
import com.mysema.query.support.Expressions;
import com.mysema.query.types.Expression;
import com.mysema.query.types.ExpressionUtils;
import java.sql.Connection;

public class PostgresQuery extends AbstractSQLQuery<PostgresQuery> {
  public PostgresQuery(Connection conn) { this(conn, new Configuration(new PostgresTemplates()), new DefaultQueryMetadata()); }
  
  public PostgresQuery(Connection conn, SQLTemplates templates) { this(conn, new Configuration(templates), new DefaultQueryMetadata()); }
  
  public PostgresQuery(Connection conn, Configuration configuration) { this(conn, configuration, new DefaultQueryMetadata()); }
  
  public PostgresQuery(Connection conn, Configuration configuration, QueryMetadata metadata) { super(conn, configuration, metadata); }
  
  public PostgresQuery forShare() { return (PostgresQuery)addFlag(SQLOps.FOR_SHARE_FLAG); }
  
  public PostgresQuery noWait() { return (PostgresQuery)addFlag(SQLOps.NO_WAIT_FLAG); }
  
  public PostgresQuery of(RelationalPath... paths) {
    StringBuilder builder = new StringBuilder(" of ");
    for (RelationalPath<?> path : paths) {
      if (builder.length() > 4)
        builder.append(", "); 
      builder.append(getConfiguration().getTemplates().quoteIdentifier(path.getTableName()));
    } 
    return (PostgresQuery)addFlag(QueryFlag.Position.END, builder.toString());
  }
  
  public PostgresQuery distinctOn(Expression... exprs) { return (PostgresQuery)addFlag(QueryFlag.Position.AFTER_SELECT, 
        Expressions.template(Object.class, "distinct on({0}) ", new Object[] { ExpressionUtils.list(Object.class, exprs) })); }
  
  public PostgresQuery clone(Connection conn) {
    PostgresQuery q = new PostgresQuery(conn, getConfiguration(), getMetadata().clone());
    q.clone(this);
    return q;
  }
}
