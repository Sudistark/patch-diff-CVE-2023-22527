package com.mysema.query.sql;

import com.mysema.commons.lang.Pair;
import java.util.HashMap;
import java.util.Map;
import javax.annotation.Nullable;

public final class JDBCTypeMapping {
  private static final Map<Integer, Class<?>> defaultTypes = new HashMap();
  
  private static final Map<Class<?>, Integer> defaultSqlTypes = new HashMap();
  
  static  {
    registerDefault(-101, Object.class);
    registerDefault(-102, java.sql.Timestamp.class);
    registerDefault(2012, Object.class);
    registerDefault(2013, java.sql.Time.class);
    registerDefault(2014, java.sql.Timestamp.class);
    registerDefault(-7, Boolean.class);
    registerDefault(16, Boolean.class);
    registerDefault(-5, Long.class);
    registerDefault(3, java.math.BigDecimal.class);
    registerDefault(8, Double.class);
    registerDefault(6, Float.class);
    registerDefault(4, Integer.class);
    registerDefault(2, java.math.BigDecimal.class);
    registerDefault(7, Float.class);
    registerDefault(5, Short.class);
    registerDefault(-6, Byte.class);
    registerDefault(91, java.sql.Date.class);
    registerDefault(92, java.sql.Time.class);
    registerDefault(93, java.sql.Timestamp.class);
    registerDefault(-15, String.class);
    registerDefault(1, String.class);
    registerDefault(2011, String.class);
    registerDefault(2005, String.class);
    registerDefault(-16, String.class);
    registerDefault(-1, String.class);
    registerDefault(2009, String.class);
    registerDefault(-9, String.class);
    registerDefault(12, String.class);
    registerDefault(-2, byte[].class);
    registerDefault(-4, byte[].class);
    registerDefault(-3, byte[].class);
    registerDefault(2004, java.sql.Blob.class);
    registerDefault(2003, Object[].class);
    registerDefault(2001, Object.class);
    registerDefault(70, Object.class);
    registerDefault(2000, Object.class);
    registerDefault(0, com.mysema.query.sql.types.Null.class);
    registerDefault(1111, Object.class);
    registerDefault(2006, Object.class);
    registerDefault(-8, Object.class);
    registerDefault(2002, Object.class);
  }
  
  private static void registerDefault(int sqlType, Class<?> javaType) {
    defaultTypes.put(Integer.valueOf(sqlType), javaType);
    defaultSqlTypes.put(javaType, Integer.valueOf(sqlType));
  }
  
  private final Map<Integer, Class<?>> types = new HashMap();
  
  private final Map<Class<?>, Integer> sqlTypes = new HashMap();
  
  private final Map<Pair<Integer, Integer>, Class<?>> numericTypes = new HashMap();
  
  public void register(int sqlType, Class<?> javaType) {
    this.types.put(Integer.valueOf(sqlType), javaType);
    this.sqlTypes.put(javaType, Integer.valueOf(sqlType));
  }
  
  public void registerNumeric(int total, int decimal, Class<?> javaType) { this.numericTypes.put(Pair.of(Integer.valueOf(total), Integer.valueOf(decimal)), javaType); }
  
  private Class<?> getNumericClass(int total, int decimal) {
    Pair<Integer, Integer> key = Pair.of(Integer.valueOf(total), Integer.valueOf(decimal));
    if (this.numericTypes.containsKey(key))
      return (Class)this.numericTypes.get(key); 
    if (decimal <= 0) {
      if (total > 18 || total == 0)
        return java.math.BigInteger.class; 
      if (total > 9 || total == 0)
        return Long.class; 
      if (total > 4)
        return Integer.class; 
      if (total > 2)
        return Short.class; 
      if (total > 0)
        return Byte.class; 
      return Boolean.class;
    } 
    if (total > 16)
      return java.math.BigDecimal.class; 
    return Double.class;
  }
  
  @Nullable
  public Class<?> get(int sqlType, int total, int decimal) {
    if (sqlType == 2 || sqlType == 3)
      return getNumericClass(total, decimal); 
    if (this.types.containsKey(Integer.valueOf(sqlType)))
      return (Class)this.types.get(Integer.valueOf(sqlType)); 
    return (Class)defaultTypes.get(Integer.valueOf(sqlType));
  }
  
  @Nullable
  public Integer get(Class<?> clazz) {
    if (this.sqlTypes.containsKey(clazz))
      return (Integer)this.sqlTypes.get(clazz); 
    return (Integer)defaultSqlTypes.get(clazz);
  }
}
