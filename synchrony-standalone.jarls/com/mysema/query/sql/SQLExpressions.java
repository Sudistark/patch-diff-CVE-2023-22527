package com.mysema.query.sql;

import com.mysema.query.types.ConstantImpl;
import com.mysema.query.types.Expression;
import com.mysema.query.types.Operator;
import com.mysema.query.types.Ops;
import com.mysema.query.types.expr.BooleanExpression;
import com.mysema.query.types.expr.BooleanOperation;
import com.mysema.query.types.expr.DateExpression;
import com.mysema.query.types.expr.DateOperation;
import com.mysema.query.types.expr.DateTimeExpression;
import com.mysema.query.types.expr.DateTimeOperation;
import com.mysema.query.types.expr.NumberExpression;
import com.mysema.query.types.expr.NumberOperation;
import com.mysema.query.types.expr.SimpleExpression;
import com.mysema.query.types.expr.SimpleOperation;
import com.mysema.query.types.expr.StringExpression;
import com.mysema.query.types.expr.StringOperation;
import com.mysema.query.types.expr.Wildcard;
import java.util.EnumMap;
import java.util.Map;

public final class SQLExpressions {
  private static final Map<DatePart, Operator> DATE_ADD_OPS = new EnumMap(DatePart.class);
  
  private static final Map<DatePart, Operator> DATE_DIFF_OPS = new EnumMap(DatePart.class);
  
  private static final Map<DatePart, Operator> DATE_TRUNC_OPS = new EnumMap(DatePart.class);
  
  private static final WindowOver<Double> cumeDist;
  
  private static final WindowOver<Long> rank;
  
  private static final WindowOver<Long> denseRank;
  
  private static final WindowOver<Double> percentRank;
  
  private static final WindowOver<Long> rowNumber;
  
  public static final Expression<Object[]> all;
  
  public static final Expression<Long> countAll;
  
  static  {
    DATE_ADD_OPS.put(DatePart.year, Ops.DateTimeOps.ADD_YEARS);
    DATE_ADD_OPS.put(DatePart.month, Ops.DateTimeOps.ADD_MONTHS);
    DATE_ADD_OPS.put(DatePart.week, Ops.DateTimeOps.ADD_WEEKS);
    DATE_ADD_OPS.put(DatePart.day, Ops.DateTimeOps.ADD_DAYS);
    DATE_ADD_OPS.put(DatePart.hour, Ops.DateTimeOps.ADD_HOURS);
    DATE_ADD_OPS.put(DatePart.minute, Ops.DateTimeOps.ADD_MINUTES);
    DATE_ADD_OPS.put(DatePart.second, Ops.DateTimeOps.ADD_SECONDS);
    DATE_ADD_OPS.put(DatePart.millisecond, null);
    DATE_DIFF_OPS.put(DatePart.year, Ops.DateTimeOps.DIFF_YEARS);
    DATE_DIFF_OPS.put(DatePart.month, Ops.DateTimeOps.DIFF_MONTHS);
    DATE_DIFF_OPS.put(DatePart.week, Ops.DateTimeOps.DIFF_WEEKS);
    DATE_DIFF_OPS.put(DatePart.day, Ops.DateTimeOps.DIFF_DAYS);
    DATE_DIFF_OPS.put(DatePart.hour, Ops.DateTimeOps.DIFF_HOURS);
    DATE_DIFF_OPS.put(DatePart.minute, Ops.DateTimeOps.DIFF_MINUTES);
    DATE_DIFF_OPS.put(DatePart.second, Ops.DateTimeOps.DIFF_SECONDS);
    DATE_DIFF_OPS.put(DatePart.millisecond, null);
    DATE_TRUNC_OPS.put(DatePart.year, Ops.DateTimeOps.TRUNC_YEAR);
    DATE_TRUNC_OPS.put(DatePart.month, Ops.DateTimeOps.TRUNC_MONTH);
    DATE_TRUNC_OPS.put(DatePart.week, Ops.DateTimeOps.TRUNC_WEEK);
    DATE_TRUNC_OPS.put(DatePart.day, Ops.DateTimeOps.TRUNC_DAY);
    DATE_TRUNC_OPS.put(DatePart.hour, Ops.DateTimeOps.TRUNC_HOUR);
    DATE_TRUNC_OPS.put(DatePart.minute, Ops.DateTimeOps.TRUNC_MINUTE);
    DATE_TRUNC_OPS.put(DatePart.second, Ops.DateTimeOps.TRUNC_SECOND);
    cumeDist = new WindowOver(Double.class, SQLOps.CUMEDIST);
    rank = new WindowOver(Long.class, SQLOps.RANK);
    denseRank = new WindowOver(Long.class, SQLOps.DENSERANK);
    percentRank = new WindowOver(Double.class, SQLOps.PERCENTRANK);
    rowNumber = new WindowOver(Long.class, SQLOps.ROWNUMBER);
    all = Wildcard.all;
    countAll = Wildcard.count;
  }
  
  private static Expression[] convertToExpressions(Object... args) {
    Expression[] exprs = new Expression[args.length];
    for (int i = 0; i < args.length; i++) {
      if (args[i] instanceof Expression) {
        exprs[i] = (Expression)args[i];
      } else {
        exprs[i] = new ConstantImpl(args[i]);
      } 
    } 
    return exprs;
  }
  
  public static BooleanExpression any(BooleanExpression expr) { return BooleanOperation.create(Ops.AggOps.BOOLEAN_ANY, expr); }
  
  public static BooleanExpression all(BooleanExpression expr) { return BooleanOperation.create(Ops.AggOps.BOOLEAN_ALL, expr); }
  
  public static SimpleExpression<Long> nextval(String sequence) { return nextval(Long.class, sequence); }
  
  public static <T extends Number> SimpleExpression<T> nextval(Class<T> type, String sequence) { return SimpleOperation.create(type, SQLOps.NEXTVAL, ConstantImpl.create(sequence)); }
  
  public static <D extends Comparable> DateExpression<D> date(DateTimeExpression<D> dateTime) { return DateOperation.create(dateTime.getType(), Ops.DateTimeOps.DATE, dateTime); }
  
  public static <D extends Comparable> DateExpression<D> date(Class<D> type, DateTimeExpression<?> dateTime) { return DateOperation.create(type, Ops.DateTimeOps.DATE, dateTime); }
  
  public static <D extends Comparable> DateTimeExpression<D> dateadd(DatePart unit, DateTimeExpression<D> date, int amount) { return DateTimeOperation.create(date.getType(), (Operator)DATE_ADD_OPS.get(unit), date, ConstantImpl.create(amount)); }
  
  public static <D extends Comparable> DateExpression<D> dateadd(DatePart unit, DateExpression<D> date, int amount) { return DateOperation.create(date.getType(), (Operator)DATE_ADD_OPS.get(unit), date, ConstantImpl.create(amount)); }
  
  public static <D extends Comparable> NumberExpression<Integer> datediff(DatePart unit, DateExpression<D> start, DateExpression<D> end) { return NumberOperation.create(Integer.class, (Operator)DATE_DIFF_OPS.get(unit), start, end); }
  
  public static <D extends Comparable> NumberExpression<Integer> datediff(DatePart unit, D start, DateExpression<D> end) { return NumberOperation.create(Integer.class, (Operator)DATE_DIFF_OPS.get(unit), ConstantImpl.create(start), end); }
  
  public static <D extends Comparable> NumberExpression<Integer> datediff(DatePart unit, DateExpression<D> start, D end) { return NumberOperation.create(Integer.class, (Operator)DATE_DIFF_OPS.get(unit), start, ConstantImpl.create(end)); }
  
  public static <D extends Comparable> NumberExpression<Integer> datediff(DatePart unit, DateTimeExpression<D> start, DateTimeExpression<D> end) { return NumberOperation.create(Integer.class, (Operator)DATE_DIFF_OPS.get(unit), start, end); }
  
  public static <D extends Comparable> NumberExpression<Integer> datediff(DatePart unit, D start, DateTimeExpression<D> end) { return NumberOperation.create(Integer.class, (Operator)DATE_DIFF_OPS.get(unit), ConstantImpl.create(start), end); }
  
  public static <D extends Comparable> NumberExpression<Integer> datediff(DatePart unit, DateTimeExpression<D> start, D end) { return NumberOperation.create(Integer.class, (Operator)DATE_DIFF_OPS.get(unit), start, ConstantImpl.create(end)); }
  
  public static <D extends Comparable> DateExpression<D> datetrunc(DatePart unit, DateExpression<D> expr) { return DateOperation.create(expr.getType(), (Operator)DATE_TRUNC_OPS.get(unit), expr); }
  
  public static <D extends Comparable> DateTimeExpression<D> datetrunc(DatePart unit, DateTimeExpression<D> expr) { return DateTimeOperation.create(expr.getType(), (Operator)DATE_TRUNC_OPS.get(unit), expr); }
  
  public static <D extends Comparable> DateTimeExpression<D> addYears(DateTimeExpression<D> date, int years) { return DateTimeOperation.create(date.getType(), Ops.DateTimeOps.ADD_YEARS, date, ConstantImpl.create(years)); }
  
  public static <D extends Comparable> DateTimeExpression<D> addMonths(DateTimeExpression<D> date, int months) { return DateTimeOperation.create(date.getType(), Ops.DateTimeOps.ADD_MONTHS, date, ConstantImpl.create(months)); }
  
  public static <D extends Comparable> DateTimeExpression<D> addWeeks(DateTimeExpression<D> date, int weeks) { return DateTimeOperation.create(date.getType(), Ops.DateTimeOps.ADD_WEEKS, date, ConstantImpl.create(weeks)); }
  
  public static <D extends Comparable> DateTimeExpression<D> addDays(DateTimeExpression<D> date, int days) { return DateTimeOperation.create(date.getType(), Ops.DateTimeOps.ADD_DAYS, date, ConstantImpl.create(days)); }
  
  public static <D extends Comparable> DateTimeExpression<D> addHours(DateTimeExpression<D> date, int hours) { return DateTimeOperation.create(date.getType(), Ops.DateTimeOps.ADD_HOURS, date, ConstantImpl.create(hours)); }
  
  public static <D extends Comparable> DateTimeExpression<D> addMinutes(DateTimeExpression<D> date, int minutes) { return DateTimeOperation.create(date.getType(), Ops.DateTimeOps.ADD_MINUTES, date, ConstantImpl.create(minutes)); }
  
  public static <D extends Comparable> DateTimeExpression<D> addSeconds(DateTimeExpression<D> date, int seconds) { return DateTimeOperation.create(date.getType(), Ops.DateTimeOps.ADD_SECONDS, date, ConstantImpl.create(seconds)); }
  
  public static <D extends Comparable> DateExpression<D> addYears(DateExpression<D> date, int years) { return DateOperation.create(date.getType(), Ops.DateTimeOps.ADD_YEARS, date, ConstantImpl.create(years)); }
  
  public static <D extends Comparable> DateExpression<D> addMonths(DateExpression<D> date, int months) { return DateOperation.create(date.getType(), Ops.DateTimeOps.ADD_MONTHS, date, ConstantImpl.create(months)); }
  
  public static <D extends Comparable> DateExpression<D> addWeeks(DateExpression<D> date, int weeks) { return DateOperation.create(date.getType(), Ops.DateTimeOps.ADD_WEEKS, date, ConstantImpl.create(weeks)); }
  
  public static <D extends Comparable> DateExpression<D> addDays(DateExpression<D> date, int days) { return DateOperation.create(date.getType(), Ops.DateTimeOps.ADD_DAYS, date, ConstantImpl.create(days)); }
  
  public static <T extends Number> WindowOver<T> sum(Expression<T> expr) { return new WindowOver(expr.getType(), Ops.AggOps.SUM_AGG, expr); }
  
  public static WindowOver<Long> count() { return new WindowOver(Long.class, Ops.AggOps.COUNT_ALL_AGG); }
  
  public static WindowOver<Long> count(Expression<?> expr) { return new WindowOver(Long.class, Ops.AggOps.COUNT_AGG, expr); }
  
  public static WindowOver<Long> countDistinct(Expression<?> expr) { return new WindowOver(Long.class, Ops.AggOps.COUNT_DISTINCT_AGG, expr); }
  
  public static <T extends Number> WindowOver<T> avg(Expression<T> expr) { return new WindowOver(expr.getType(), Ops.AggOps.AVG_AGG, expr); }
  
  public static <T extends Comparable> WindowOver<T> min(Expression<T> expr) { return new WindowOver(expr.getType(), Ops.AggOps.MIN_AGG, expr); }
  
  public static <T extends Comparable> WindowOver<T> max(Expression<T> expr) { return new WindowOver(expr.getType(), Ops.AggOps.MAX_AGG, expr); }
  
  public static <T> WindowOver<T> lead(Expression<T> expr) { return new WindowOver(expr.getType(), SQLOps.LEAD, expr); }
  
  public static <T> WindowOver<T> lag(Expression<T> expr) { return new WindowOver(expr.getType(), SQLOps.LAG, expr); }
  
  public static WithinGroup<Object> listagg(Expression<?> expr, String delimiter) { return new WithinGroup(Object.class, SQLOps.LISTAGG, expr, ConstantImpl.create(delimiter)); }
  
  public static <T> WindowOver<T> nthValue(Expression<T> measureExpr, Number n) { return nthValue(measureExpr, new ConstantImpl(n)); }
  
  public static <T> WindowOver<T> nthValue(Expression<T> measureExpr, Expression<? extends Number> n) { return new WindowOver(measureExpr.getType(), SQLOps.NTHVALUE, measureExpr, n); }
  
  public static <T extends Number & Comparable> WindowOver<T> ntile(T num) { return new WindowOver(num.getClass(), SQLOps.NTILE, new ConstantImpl(num)); }
  
  public static WindowOver<Long> rank() { return rank; }
  
  public static WithinGroup<Long> rank(Object... args) { return rank(convertToExpressions(args)); }
  
  public static WithinGroup<Long> rank(Expression... args) { return new WithinGroup(Long.class, SQLOps.RANK2, args); }
  
  public static WindowOver<Long> denseRank() { return denseRank; }
  
  public static WithinGroup<Long> denseRank(Object... args) { return denseRank(convertToExpressions(args)); }
  
  public static WithinGroup<Long> denseRank(Expression... args) { return new WithinGroup(Long.class, SQLOps.DENSERANK2, args); }
  
  public static WindowOver<Double> percentRank() { return percentRank; }
  
  public static WithinGroup<Double> percentRank(Object... args) { return percentRank(convertToExpressions(args)); }
  
  public static WithinGroup<Double> percentRank(Expression... args) { return new WithinGroup(Double.class, SQLOps.PERCENTRANK2, args); }
  
  public static <T extends Number> WithinGroup<T> percentileCont(T arg) {
    if (arg.doubleValue() < 0.0D || arg.doubleValue() > 1.0D)
      throw new IllegalArgumentException("The percentile value should be a number between 0 and 1"); 
    return percentileCont(new ConstantImpl(arg));
  }
  
  public static <T extends Number> WithinGroup<T> percentileCont(Expression<T> arg) { return new WithinGroup(arg.getType(), SQLOps.PERCENTILECONT, arg); }
  
  public static <T extends Number> WithinGroup<T> percentileDisc(T arg) {
    if (arg.doubleValue() < 0.0D || arg.doubleValue() > 1.0D)
      throw new IllegalArgumentException("The percentile value should be a number between 0 and 1"); 
    return percentileDisc(new ConstantImpl(arg));
  }
  
  public static <T extends Number> WithinGroup<T> percentileDisc(Expression<T> arg) { return new WithinGroup(arg.getType(), SQLOps.PERCENTILEDISC, arg); }
  
  public static WindowOver<Double> regrSlope(Expression<? extends Number> arg1, Expression<? extends Number> arg2) { return new WindowOver(Double.class, SQLOps.REGR_SLOPE, arg1, arg2); }
  
  public static WindowOver<Double> regrIntercept(Expression<? extends Number> arg1, Expression<? extends Number> arg2) { return new WindowOver(Double.class, SQLOps.REGR_INTERCEPT, arg1, arg2); }
  
  public static WindowOver<Double> regrCount(Expression<? extends Number> arg1, Expression<? extends Number> arg2) { return new WindowOver(Double.class, SQLOps.REGR_COUNT, arg1, arg2); }
  
  public static WindowOver<Double> regrR2(Expression<? extends Number> arg1, Expression<? extends Number> arg2) { return new WindowOver(Double.class, SQLOps.REGR_R2, arg1, arg2); }
  
  public static WindowOver<Double> regrAvgx(Expression<? extends Number> arg1, Expression<? extends Number> arg2) { return new WindowOver(Double.class, SQLOps.REGR_AVGX, arg1, arg2); }
  
  public static WindowOver<Double> regrAvgy(Expression<? extends Number> arg1, Expression<? extends Number> arg2) { return new WindowOver(Double.class, SQLOps.REGR_AVGY, arg1, arg2); }
  
  public static WindowOver<Double> regrSxx(Expression<? extends Number> arg1, Expression<? extends Number> arg2) { return new WindowOver(Double.class, SQLOps.REGR_SXX, arg1, arg2); }
  
  public static WindowOver<Double> regrSyy(Expression<? extends Number> arg1, Expression<? extends Number> arg2) { return new WindowOver(Double.class, SQLOps.REGR_SYY, arg1, arg2); }
  
  public static WindowOver<Double> regrSxy(Expression<? extends Number> arg1, Expression<? extends Number> arg2) { return new WindowOver(Double.class, SQLOps.REGR_SXY, arg1, arg2); }
  
  public static WindowOver<Double> cumeDist() { return cumeDist; }
  
  public static WithinGroup<Double> cumeDist(Object... args) { return cumeDist(convertToExpressions(args)); }
  
  public static WithinGroup<Double> cumeDist(Expression... args) { return new WithinGroup(Double.class, SQLOps.CUMEDIST2, args); }
  
  public static WindowOver<Double> corr(Expression<? extends Number> expr1, Expression<? extends Number> expr2) { return new WindowOver(Double.class, SQLOps.CORR, expr1, expr2); }
  
  public static WindowOver<Double> covarPop(Expression<? extends Number> expr1, Expression<? extends Number> expr2) { return new WindowOver(Double.class, SQLOps.COVARPOP, expr1, expr2); }
  
  public static WindowOver<Double> covarSamp(Expression<? extends Number> expr1, Expression<? extends Number> expr2) { return new WindowOver(Double.class, SQLOps.COVARSAMP, expr1, expr2); }
  
  public static <T> WindowOver<T> ratioToReport(Expression<T> expr) { return new WindowOver(expr.getType(), SQLOps.RATIOTOREPORT, expr); }
  
  public static WindowOver<Long> rowNumber() { return rowNumber; }
  
  public static <T extends Number> WindowOver<T> stddev(Expression<T> expr) { return new WindowOver(expr.getType(), SQLOps.STDDEV, expr); }
  
  public static <T extends Number> WindowOver<T> stddevDistinct(Expression<T> expr) { return new WindowOver(expr.getType(), SQLOps.STDDEV_DISTINCT, expr); }
  
  public static <T extends Number> WindowOver<T> stddevPop(Expression<T> expr) { return new WindowOver(expr.getType(), SQLOps.STDDEVPOP, expr); }
  
  public static <T extends Number> WindowOver<T> stddevSamp(Expression<T> expr) { return new WindowOver(expr.getType(), SQLOps.STDDEVSAMP, expr); }
  
  public static <T extends Number> WindowOver<T> variance(Expression<T> expr) { return new WindowOver(expr.getType(), SQLOps.VARIANCE, expr); }
  
  public static <T extends Number> WindowOver<T> varPop(Expression<T> expr) { return new WindowOver(expr.getType(), SQLOps.VARPOP, expr); }
  
  public static <T extends Number> WindowOver<T> varSamp(Expression<T> expr) { return new WindowOver(expr.getType(), SQLOps.VARSAMP, expr); }
  
  public static <T> WindowOver<T> firstValue(Expression<T> expr) { return new WindowOver(expr.getType(), SQLOps.FIRSTVALUE, expr); }
  
  public static <T> WindowOver<T> lastValue(Expression<T> expr) { return new WindowOver(expr.getType(), SQLOps.LASTVALUE, expr); }
  
  public static StringExpression left(Expression<String> lhs, int rhs) { return left(lhs, ConstantImpl.create(rhs)); }
  
  public static StringExpression right(Expression<String> lhs, int rhs) { return right(lhs, ConstantImpl.create(rhs)); }
  
  public static StringExpression left(Expression<String> lhs, Expression<Integer> rhs) { return StringOperation.create(Ops.StringOps.LEFT, lhs, rhs); }
  
  public static StringExpression right(Expression<String> lhs, Expression<Integer> rhs) { return StringOperation.create(Ops.StringOps.RIGHT, lhs, rhs); }
}
