package com.mysema.query.sql;

import com.mysema.commons.lang.Pair;
import com.mysema.query.QueryMetadata;
import com.mysema.query.sql.dml.SQLInsertBatch;
import com.mysema.query.sql.dml.SQLMergeBatch;
import com.mysema.query.sql.dml.SQLUpdateBatch;
import com.mysema.query.types.Expression;
import com.mysema.query.types.Path;
import com.mysema.query.types.SubQueryExpression;
import java.util.List;

class SQLListenerAdapter implements SQLDetailedListener {
  private final SQLListener sqlListener;
  
  private final SQLDetailedListener detailedListener;
  
  SQLListenerAdapter(SQLListener sqlListener) {
    this.detailedListener = (sqlListener instanceof SQLDetailedListener) ? (SQLDetailedListener)sqlListener : null;
    this.sqlListener = sqlListener;
  }
  
  public SQLListener getSqlListener() { return this.sqlListener; }
  
  public void start(SQLListenerContext context) {
    if (this.detailedListener != null)
      this.detailedListener.start(context); 
  }
  
  public void preRender(SQLListenerContext context) {
    if (this.detailedListener != null)
      this.detailedListener.preRender(context); 
  }
  
  public void rendered(SQLListenerContext context) {
    if (this.detailedListener != null)
      this.detailedListener.rendered(context); 
  }
  
  public void prePrepare(SQLListenerContext context) {
    if (this.detailedListener != null)
      this.detailedListener.prePrepare(context); 
  }
  
  public void prepared(SQLListenerContext context) {
    if (this.detailedListener != null)
      this.detailedListener.prepared(context); 
  }
  
  public void preExecute(SQLListenerContext context) {
    if (this.detailedListener != null)
      this.detailedListener.preExecute(context); 
  }
  
  public void executed(SQLListenerContext context) {
    if (this.detailedListener != null)
      this.detailedListener.executed(context); 
  }
  
  public void end(SQLListenerContext context) {
    if (this.detailedListener != null)
      this.detailedListener.end(context); 
  }
  
  public void exception(SQLListenerContext context) {
    if (this.detailedListener != null)
      this.detailedListener.exception(context); 
  }
  
  public void notifyQuery(QueryMetadata md) { this.sqlListener.notifyQuery(md); }
  
  public void notifyDelete(RelationalPath<?> entity, QueryMetadata md) { this.sqlListener.notifyDelete(entity, md); }
  
  public void notifyDeletes(RelationalPath<?> entity, List<QueryMetadata> batches) { this.sqlListener.notifyDeletes(entity, batches); }
  
  public void notifyMerge(RelationalPath<?> entity, QueryMetadata md, List<Path<?>> keys, List<Path<?>> columns, List<Expression<?>> values, SubQueryExpression<?> subQuery) { this.sqlListener.notifyMerge(entity, md, keys, columns, values, subQuery); }
  
  public void notifyMerges(RelationalPath<?> entity, QueryMetadata md, List<SQLMergeBatch> batches) { this.sqlListener.notifyMerges(entity, md, batches); }
  
  public void notifyInsert(RelationalPath<?> entity, QueryMetadata md, List<Path<?>> columns, List<Expression<?>> values, SubQueryExpression<?> subQuery) { this.sqlListener.notifyInsert(entity, md, columns, values, subQuery); }
  
  public void notifyInserts(RelationalPath<?> entity, QueryMetadata md, List<SQLInsertBatch> batches) { this.sqlListener.notifyInserts(entity, md, batches); }
  
  public void notifyUpdate(RelationalPath<?> entity, QueryMetadata md, List<Pair<Path<?>, Expression<?>>> updates) { this.sqlListener.notifyUpdate(entity, md, updates); }
  
  public void notifyUpdates(RelationalPath<?> entity, List<SQLUpdateBatch> batches) { this.sqlListener.notifyUpdates(entity, batches); }
}
