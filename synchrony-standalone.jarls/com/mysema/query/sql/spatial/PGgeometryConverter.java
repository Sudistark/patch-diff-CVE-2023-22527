package com.mysema.query.sql.spatial;

import org.geolatte.geom.DimensionalFlag;
import org.geolatte.geom.Geometry;
import org.geolatte.geom.GeometryCollection;
import org.geolatte.geom.LineString;
import org.geolatte.geom.LinearRing;
import org.geolatte.geom.MultiLineString;
import org.geolatte.geom.MultiPoint;
import org.geolatte.geom.MultiPolygon;
import org.geolatte.geom.Point;
import org.geolatte.geom.PointCollectionFactory;
import org.geolatte.geom.PointSequence;
import org.geolatte.geom.PointSequenceBuilder;
import org.geolatte.geom.PointSequenceBuilders;
import org.geolatte.geom.PolyHedralSurface;
import org.geolatte.geom.Polygon;
import org.geolatte.geom.crs.CrsId;
import org.postgis.Geometry;
import org.postgis.GeometryCollection;
import org.postgis.LineString;
import org.postgis.LinearRing;
import org.postgis.MultiLineString;
import org.postgis.MultiPoint;
import org.postgis.MultiPolygon;
import org.postgis.Point;
import org.postgis.Polygon;

public class PGgeometryConverter {
  public static Geometry convert(Geometry geometry) {
    if (geometry instanceof Point)
      return convert((Point)geometry); 
    if (geometry instanceof LinearRing)
      return convert((LinearRing)geometry); 
    if (geometry instanceof LineString)
      return convert((LineString)geometry); 
    if (geometry instanceof MultiLineString)
      return convert((MultiLineString)geometry); 
    if (geometry instanceof Polygon)
      return convert((Polygon)geometry); 
    if (geometry instanceof PolyHedralSurface)
      return convert((PolyHedralSurface)geometry); 
    if (geometry instanceof MultiPoint)
      return convert((MultiPoint)geometry); 
    if (geometry instanceof MultiPolygon)
      return convert((MultiPolygon)geometry); 
    if (geometry instanceof GeometryCollection)
      return convert((GeometryCollection)geometry); 
    throw new IllegalArgumentException(geometry.getClass().getName());
  }
  
  private static Point convert(Point point) {
    Point pgPoint = new Point();
    pgPoint.srid = point.getSRID();
    pgPoint.dimension = point.is3D() ? 3 : 2;
    pgPoint.haveMeasure = false;
    pgPoint.x = point.getX();
    pgPoint.y = point.getY();
    if (point.is3D())
      pgPoint.z = point.getZ(); 
    if (point.isMeasured()) {
      pgPoint.m = point.getM();
      pgPoint.haveMeasure = true;
    } 
    return pgPoint;
  }
  
  private static Point[] convertPoints(Geometry geometry) {
    Point[] pgPoints = new Point[geometry.getNumPoints()];
    for (int i = 0; i < pgPoints.length; i++)
      pgPoints[i] = convert(geometry.getPointN(i)); 
    return pgPoints;
  }
  
  private static LineString convert(LineString lineString) {
    Point[] pgPoints = convertPoints(lineString);
    LineString pgLineString = new LineString(pgPoints);
    pgLineString.haveMeasure = lineString.isMeasured();
    pgLineString.setSrid(lineString.getSRID());
    return pgLineString;
  }
  
  private static LinearRing convert(LinearRing linearRing) {
    Point[] pgPoints = convertPoints(linearRing);
    LinearRing pgLinearRing = new LinearRing(pgPoints);
    pgLinearRing.haveMeasure = linearRing.isMeasured();
    pgLinearRing.setSrid(linearRing.getSRID());
    return pgLinearRing;
  }
  
  private static MultiLineString convert(MultiLineString multiLineString) {
    LineString[] pgLineStrings = new LineString[multiLineString.getNumGeometries()];
    for (int i = 0; i < pgLineStrings.length; i++)
      pgLineStrings[i] = convert(multiLineString.getGeometryN(i)); 
    MultiLineString pgMultiLineString = new MultiLineString(pgLineStrings);
    pgMultiLineString.haveMeasure = multiLineString.isMeasured();
    pgMultiLineString.setSrid(multiLineString.getSRID());
    return pgMultiLineString;
  }
  
  private static Polygon convert(Polygon polygon) {
    int numRings = polygon.getNumInteriorRing();
    LinearRing[] rings = new LinearRing[numRings + 1];
    rings[0] = convert(polygon.getExteriorRing());
    for (int i = 0; i < numRings; i++)
      rings[i + 1] = convert(polygon.getInteriorRingN(i)); 
    Polygon pgPolygon = new Polygon(rings);
    pgPolygon.setSrid(polygon.getSRID());
    return pgPolygon;
  }
  
  private static Polygon convert(PolyHedralSurface polyHedralSurface) { throw new UnsupportedOperationException(); }
  
  private static MultiPoint convert(MultiPoint multiPoint) {
    Point[] pgPoints = convertPoints(multiPoint);
    MultiPoint pgMultiPoint = new MultiPoint(pgPoints);
    pgMultiPoint.setSrid(multiPoint.getSRID());
    return pgMultiPoint;
  }
  
  private static MultiPolygon convert(MultiPolygon multiPolygon) {
    Polygon[] pgPolygons = new Polygon[multiPolygon.getNumGeometries()];
    for (int i = 0; i < pgPolygons.length; i++)
      pgPolygons[i] = convert(multiPolygon.getGeometryN(i)); 
    MultiPolygon pgMultiPolygon = new MultiPolygon(pgPolygons);
    pgMultiPolygon.setSrid(multiPolygon.getSRID());
    return pgMultiPolygon;
  }
  
  private static GeometryCollection convert(GeometryCollection geometryCollection) {
    Geometry[] pgGeometries = new Geometry[geometryCollection.getNumGeometries()];
    for (int i = 0; i < pgGeometries.length; i++)
      pgGeometries[i] = convert(geometryCollection.getGeometryN(i)); 
    GeometryCollection pgGeometryCollection = new GeometryCollection(pgGeometries);
    pgGeometryCollection.setSrid(geometryCollection.getSRID());
    return pgGeometryCollection;
  }
  
  public static Geometry convert(Geometry geometry) {
    switch (geometry.getType()) {
      case 1:
        return convert((Point)geometry);
      case 2:
        return convert((LineString)geometry);
      case 0:
        return convert((LinearRing)geometry);
      case 3:
        return convert((Polygon)geometry);
      case 5:
        return convert((MultiLineString)geometry);
      case 4:
        return convert((MultiPoint)geometry);
      case 6:
        return convert((MultiPolygon)geometry);
      case 7:
        return convert((GeometryCollection)geometry);
    } 
    throw new IllegalArgumentException(geometry.toString());
  }
  
  private static Point convert(Point geometry) {
    int d = geometry.dimension;
    CrsId crs = CrsId.valueOf(geometry.srid);
    double[] point = new double[d + (geometry.haveMeasure ? 1 : 0)];
    int offset = 0;
    point[offset++] = geometry.x;
    point[offset++] = geometry.y;
    if (d == 3)
      point[offset++] = geometry.z; 
    if (geometry.haveMeasure)
      point[offset++] = geometry.m; 
    DimensionalFlag flag = DimensionalFlag.valueOf((d == 3), geometry.haveMeasure);
    return new Point(PointCollectionFactory.create(point, flag, crs));
  }
  
  private static PointSequence convertPoints(Point[] points) {
    if (points.length == 0)
      return PointCollectionFactory.createEmpty(); 
    Point first = points[0];
    CrsId crs = CrsId.valueOf(first.srid);
    DimensionalFlag flag = DimensionalFlag.valueOf((first.dimension == 3), first.haveMeasure);
    PointSequenceBuilder pointSequence = PointSequenceBuilders.variableSized(flag, crs);
    for (int i = 0; i < points.length; i++)
      pointSequence.add(convert(points[i])); 
    return pointSequence.toPointSequence();
  }
  
  private static GeometryCollection convert(GeometryCollection geometry) {
    Geometry[] geometries = new Geometry[geometry.numGeoms()];
    for (int i = 0; i < geometries.length; i++)
      geometries[i] = convert(geometry.getSubGeometry(i)); 
    return new GeometryCollection(geometries);
  }
  
  private static MultiPolygon convert(MultiPolygon geometry) {
    Polygon[] polygons = new Polygon[geometry.numPolygons()];
    for (int i = 0; i < polygons.length; i++)
      polygons[i] = convert(geometry.getPolygon(i)); 
    return new MultiPolygon(polygons);
  }
  
  private static MultiPoint convert(MultiPoint geometry) {
    Point[] points = new Point[geometry.numPoints()];
    for (int i = 0; i < points.length; i++)
      points[i] = convert(geometry.getPoint(i)); 
    return new MultiPoint(points);
  }
  
  private static MultiLineString convert(MultiLineString geometry) {
    LineString[] lineStrings = new LineString[geometry.numLines()];
    for (int i = 0; i < lineStrings.length; i++)
      lineStrings[i] = convert(geometry.getLine(i)); 
    return new MultiLineString(lineStrings);
  }
  
  private static Polygon convert(Polygon geometry) {
    LinearRing[] rings = new LinearRing[geometry.numRings()];
    for (int i = 0; i < rings.length; i++)
      rings[i] = convert(geometry.getRing(i)); 
    return new Polygon(rings);
  }
  
  private static LinearRing convert(LinearRing geometry) {
    PointSequence points = convertPoints(geometry.getPoints());
    return new LinearRing(points);
  }
  
  private static LineString convert(LineString geometry) {
    PointSequence points = convertPoints(geometry.getPoints());
    return new LineString(points);
  }
}
