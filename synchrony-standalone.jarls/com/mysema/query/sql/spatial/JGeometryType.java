package com.mysema.query.sql.spatial;

import com.mysema.query.sql.types.AbstractType;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.annotation.Nullable;
import oracle.spatial.geometry.JGeometry;
import oracle.sql.STRUCT;
import org.geolatte.geom.Geometry;

public class JGeometryType extends AbstractType<Geometry> {
  public static final JGeometryType DEFAULT = new JGeometryType();
  
  public JGeometryType() { super(1111); }
  
  public Class<Geometry> getReturnedClass() { return Geometry.class; }
  
  @Nullable
  public Geometry getValue(ResultSet rs, int startIndex) throws SQLException {
    byte[] bytes = rs.getBytes(startIndex);
    if (bytes != null)
      try {
        JGeometry geometry = JGeometry.load(bytes);
        return JGeometryConverter.convert(geometry);
      } catch (Exception e) {
        throw new SQLException(e);
      }  
    return null;
  }
  
  public void setValue(PreparedStatement st, int startIndex, Geometry value) throws SQLException {
    try {
      JGeometry geo = JGeometryConverter.convert(value);
      STRUCT struct = JGeometry.store(st.getConnection(), geo);
      st.setObject(startIndex, struct);
    } catch (Exception e) {
      throw new SQLException(e);
    } 
  }
}
