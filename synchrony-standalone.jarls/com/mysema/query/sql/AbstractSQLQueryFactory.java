package com.mysema.query.sql;

import com.infradna.tool.bridge_method_injector.BridgeMethodsAdded;
import com.infradna.tool.bridge_method_injector.WithBridgeMethods;
import com.mysema.query.Detachable;
import com.mysema.query.sql.dml.SQLDeleteClause;
import com.mysema.query.sql.dml.SQLInsertClause;
import com.mysema.query.sql.dml.SQLMergeClause;
import com.mysema.query.sql.dml.SQLUpdateClause;
import com.mysema.query.types.Expression;
import com.mysema.query.types.Path;
import com.mysema.query.types.SubQueryExpression;
import java.sql.Connection;
import javax.inject.Provider;

@BridgeMethodsAdded
public abstract class AbstractSQLQueryFactory<Q extends SQLCommonQuery<Q>, SQ extends AbstractSQLSubQuery<SQ>> extends Object implements SQLCommonQueryFactory<Q, SQ, SQLDeleteClause, SQLUpdateClause, SQLInsertClause, SQLMergeClause> {
  protected final Configuration configuration;
  
  protected final Provider<Connection> connection;
  
  public AbstractSQLQueryFactory(Configuration configuration, Provider<Connection> connection) {
    this.configuration = configuration;
    this.connection = connection;
  }
  
  public final SQLDeleteClause delete(RelationalPath<?> path) { return new SQLDeleteClause((Connection)this.connection.get(), this.configuration, path); }
  
  public final Q from(Expression<?> from) { return (Q)query().from(new Expression[] { from }); }
  
  public final Q from(Expression... args) { return (Q)query().from(args); }
  
  public final Q from(SubQueryExpression<?> subQuery, Path<?> alias) { return (Q)query().from(subQuery, alias); }
  
  public final SQLInsertClause insert(RelationalPath<?> path) { return new SQLInsertClause((Connection)this.connection.get(), this.configuration, path); }
  
  public final SQLMergeClause merge(RelationalPath<?> path) { return new SQLMergeClause((Connection)this.connection.get(), this.configuration, path); }
  
  public final SQLUpdateClause update(RelationalPath<?> path) { return new SQLUpdateClause((Connection)this.connection.get(), this.configuration, path); }
  
  @WithBridgeMethods(value = {SQLSubQuery.class}, castRequired = true)
  public SQ subQuery() { return (SQ)new SQLSubQuery(); }
  
  @WithBridgeMethods(value = {SQLSubQuery.class}, castRequired = true)
  public final SQ subQuery(Expression<?> from) { return (SQ)(AbstractSQLSubQuery)subQuery().from(from); }
  
  public final Configuration getConfiguration() { return this.configuration; }
  
  public final Connection getConnection() { return (Connection)this.connection.get(); }
}
