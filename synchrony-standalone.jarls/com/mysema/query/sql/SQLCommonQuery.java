package com.mysema.query.sql;

import com.mysema.query.JoinFlag;
import com.mysema.query.Query;
import com.mysema.query.QueryFlag;
import com.mysema.query.types.EntityPath;
import com.mysema.query.types.Expression;
import com.mysema.query.types.Path;
import com.mysema.query.types.Predicate;
import com.mysema.query.types.SubQueryExpression;

public interface SQLCommonQuery<Q extends SQLCommonQuery<Q>> extends Query<Q> {
  Q addFlag(QueryFlag.Position paramPosition, Expression<?> paramExpression);
  
  Q addFlag(QueryFlag.Position paramPosition, String paramString);
  
  Q addFlag(QueryFlag.Position paramPosition, String paramString, Expression<?> paramExpression);
  
  Q addJoinFlag(String paramString);
  
  Q addJoinFlag(String paramString, JoinFlag.Position paramPosition);
  
  Q from(Expression<?>... paramVarArgs);
  
  Q from(SubQueryExpression<?> paramSubQueryExpression, Path<?> paramPath);
  
  Q fullJoin(EntityPath<?> paramEntityPath);
  
  <E> Q fullJoin(RelationalFunctionCall<E> paramRelationalFunctionCall, Path<E> paramPath);
  
  <E> Q fullJoin(ForeignKey<E> paramForeignKey, RelationalPath<E> paramRelationalPath);
  
  Q fullJoin(SubQueryExpression<?> paramSubQueryExpression, Path<?> paramPath);
  
  Q innerJoin(EntityPath<?> paramEntityPath);
  
  <E> Q innerJoin(RelationalFunctionCall<E> paramRelationalFunctionCall, Path<E> paramPath);
  
  <E> Q innerJoin(ForeignKey<E> paramForeignKey, RelationalPath<E> paramRelationalPath);
  
  Q innerJoin(SubQueryExpression<?> paramSubQueryExpression, Path<?> paramPath);
  
  Q join(EntityPath<?> paramEntityPath);
  
  <E> Q join(RelationalFunctionCall<E> paramRelationalFunctionCall, Path<E> paramPath);
  
  <E> Q join(ForeignKey<E> paramForeignKey, RelationalPath<E> paramRelationalPath);
  
  Q join(SubQueryExpression<?> paramSubQueryExpression, Path<?> paramPath);
  
  Q leftJoin(EntityPath<?> paramEntityPath);
  
  <E> Q leftJoin(RelationalFunctionCall<E> paramRelationalFunctionCall, Path<E> paramPath);
  
  <E> Q leftJoin(ForeignKey<E> paramForeignKey, RelationalPath<E> paramRelationalPath);
  
  Q leftJoin(SubQueryExpression<?> paramSubQueryExpression, Path<?> paramPath);
  
  Q on(Predicate... paramVarArgs);
  
  Q rightJoin(EntityPath<?> paramEntityPath);
  
  <E> Q rightJoin(RelationalFunctionCall<E> paramRelationalFunctionCall, Path<E> paramPath);
  
  <E> Q rightJoin(ForeignKey<E> paramForeignKey, RelationalPath<E> paramRelationalPath);
  
  Q rightJoin(SubQueryExpression<?> paramSubQueryExpression, Path<?> paramPath);
  
  Q with(Path<?> paramPath, SubQueryExpression<?> paramSubQueryExpression);
  
  Q with(Path<?> paramPath, Expression<?> paramExpression);
  
  WithBuilder<Q> with(Path<?> paramPath, Path<?>... paramVarArgs);
  
  Q withRecursive(Path<?> paramPath, SubQueryExpression<?> paramSubQueryExpression);
  
  Q withRecursive(Path<?> paramPath, Expression<?> paramExpression);
  
  WithBuilder<Q> withRecursive(Path<?> paramPath, Path<?>... paramVarArgs);
}
