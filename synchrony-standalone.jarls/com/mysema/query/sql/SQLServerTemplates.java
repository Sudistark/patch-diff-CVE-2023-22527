package com.mysema.query.sql;

import com.mysema.query.QueryFlag;
import com.mysema.query.QueryMetadata;
import com.mysema.query.QueryModifiers;
import com.mysema.query.support.Expressions;
import com.mysema.query.types.Operator;
import com.mysema.query.types.Ops;

public class SQLServerTemplates extends SQLTemplates {
  public static final SQLServerTemplates DEFAULT = new SQLServerTemplates();
  
  public static SQLTemplates.Builder builder() { return new Object(); }
  
  private String topTemplate = "top {0s} ";
  
  public SQLServerTemplates() { this('\\', false); }
  
  public SQLServerTemplates(boolean quote) { this('\\', quote); }
  
  public SQLServerTemplates(char escape, boolean quote) {
    super("\"", escape, quote);
    setDummyTable("");
    setNullsFirst(null);
    setNullsLast(null);
    setDefaultValues("\ndefault values");
    setArraysSupported(false);
    setPrecedence(40, new Operator[] { Ops.NEGATE });
    setPrecedence(50, new Operator[] { Ops.EQ, Ops.EQ_IGNORE_CASE, Ops.NE });
    setPrecedence(110, new Operator[] { Ops.BETWEEN, Ops.IN, Ops.NOT_IN, Ops.LIKE, Ops.LIKE_ESCAPE });
    setPrecedence(110, OTHER_LIKE_CASES);
    add(Ops.CONCAT, "{0} + {1}");
    add(Ops.CHAR_AT, "cast(substring({0},{1}+1,1) as char)");
    add(Ops.INDEX_OF, "charindex({1},{0})-1", 40);
    add(Ops.INDEX_OF_2ARGS, "charindex({1},{0},{2})-1", 40);
    add(Ops.MATCHES, "{0} like {1}", 110);
    add(Ops.STRING_IS_EMPTY, "len({0}) = 0", 50);
    add(Ops.STRING_LENGTH, "len({0})");
    add(Ops.SUBSTR_1ARG, "substring({0},{1}+1,255)");
    add(Ops.SUBSTR_2ARGS, "substring({0},{1}+1,{2s}-{1s})");
    add(Ops.TRIM, "ltrim(rtrim({0}))");
    add(Ops.StringOps.LOCATE, "charindex({0},{1})");
    add(Ops.StringOps.LOCATE2, "charindex({0},{1},{2})");
    add(Ops.StringOps.LPAD, "right(replicate(' ', {1}) + left({0}, {1}), {1})");
    add(Ops.StringOps.LPAD2, "right(replicate({2}, {1}) + left({0}, {1}), {1})");
    add(Ops.StringOps.RPAD, "left(left({0}, {1}) + replicate(' ', {1}), {1})");
    add(Ops.StringOps.RPAD2, "left(left({0}, {1}) + replicate({2}, {1}), {1})");
    add(SQLOps.NEXTVAL, "{0s}.nextval");
    add(Ops.MOD, "{0} % {1}", 30);
    add(Ops.MathOps.COSH, "(exp({0}) + exp({0} * -1)) / 2");
    add(Ops.MathOps.COTH, "(exp({0} * 2) + 1) / (exp({0} * 2) - 1)");
    add(Ops.MathOps.LN, "log({0})");
    add(Ops.MathOps.LOG, "log({0}, {1})");
    add(Ops.MathOps.POWER, "power({0}, {1})");
    add(Ops.MathOps.ROUND, "round({0}, 0)");
    add(Ops.MathOps.SINH, "(exp({0}) - exp({0} * -1)) / 2");
    add(Ops.MathOps.TANH, "(exp({0} * 2) - 1) / (exp({0} * 2) + 1)");
    add(Ops.DateTimeOps.YEAR, "datepart(year, {0})");
    add(Ops.DateTimeOps.MONTH, "datepart(month, {0})");
    add(Ops.DateTimeOps.WEEK, "datepart(week, {0})");
    add(Ops.DateTimeOps.DAY_OF_MONTH, "datepart(day, {0})");
    add(Ops.DateTimeOps.DAY_OF_WEEK, "datepart(weekday, {0})");
    add(Ops.DateTimeOps.DAY_OF_YEAR, "datepart(dayofyear, {0})");
    add(Ops.DateTimeOps.HOUR, "datepart(hour, {0})");
    add(Ops.DateTimeOps.MINUTE, "datepart(minute, {0})");
    add(Ops.DateTimeOps.SECOND, "datepart(second, {0})");
    add(Ops.DateTimeOps.MILLISECOND, "datepart(millisecond, {0})");
    add(Ops.DateTimeOps.YEAR_MONTH, "(datepart(year, {0}) * 100 + datepart(month, {0}))");
    add(Ops.DateTimeOps.YEAR_WEEK, "(datepart(year, {0}) * 100 + datepart(isowk, {0}))");
    add(Ops.DateTimeOps.ADD_YEARS, "dateadd(year, {1s}, {0})");
    add(Ops.DateTimeOps.ADD_MONTHS, "dateadd(month, {1s}, {0})");
    add(Ops.DateTimeOps.ADD_WEEKS, "dateadd(week, {1s}, {0})");
    add(Ops.DateTimeOps.ADD_DAYS, "dateadd(day, {1s}, {0})");
    add(Ops.DateTimeOps.ADD_HOURS, "dateadd(hour, {1s}, {0})");
    add(Ops.DateTimeOps.ADD_MINUTES, "dateadd(minute, {1s}, {0})");
    add(Ops.DateTimeOps.ADD_SECONDS, "dateadd(second, {1s}, {0})");
    add(Ops.DateTimeOps.DIFF_YEARS, "datediff(year,{0},{1})");
    add(Ops.DateTimeOps.DIFF_MONTHS, "datediff(month,{0},{1})");
    add(Ops.DateTimeOps.DIFF_WEEKS, "datediff(week,{0},{1})");
    add(Ops.DateTimeOps.DIFF_DAYS, "datediff(day,{0},{1})");
    add(Ops.DateTimeOps.DIFF_HOURS, "datediff(hour,{0},{1})");
    add(Ops.DateTimeOps.DIFF_MINUTES, "datediff(minute,{0},{1})");
    add(Ops.DateTimeOps.DIFF_SECONDS, "datediff(second,{0},{1})");
    add(Ops.DateTimeOps.TRUNC_YEAR, "CONVERT(DATETIME, CONVERT(VARCHAR(4), {0}, 120) + '-01-01')");
    add(Ops.DateTimeOps.TRUNC_MONTH, "CONVERT(DATETIME, CONVERT(VARCHAR(7), {0}, 120) + '-01')");
    add(Ops.DateTimeOps.TRUNC_DAY, "CONVERT(DATETIME, CONVERT(VARCHAR(10), {0}, 120))");
    add(Ops.DateTimeOps.TRUNC_HOUR, "CONVERT(DATETIME, CONVERT(VARCHAR(13), {0}, 120) + ':00:00')");
    add(Ops.DateTimeOps.TRUNC_MINUTE, "CONVERT(DATETIME, CONVERT(VARCHAR(16), {0}, 120) + ':00')");
    add(Ops.DateTimeOps.TRUNC_SECOND, "CONVERT(DATETIME, CONVERT(VARCHAR(19), {0}, 120))");
    add(Ops.DateTimeOps.DATE, "cast({0} as date)");
    add(Ops.DateTimeOps.CURRENT_DATE, "cast(getdate() as date)");
    addTypeNameToCode("bit", 16, true);
    addTypeNameToCode("decimal", 8, true);
    addTypeNameToCode("tinyint identity", -6);
    addTypeNameToCode("bigint identity", -5);
    addTypeNameToCode("timestamp", -2);
    addTypeNameToCode("nchar", 1);
    addTypeNameToCode("uniqueidentifier", 1);
    addTypeNameToCode("numeric() identity", 2);
    addTypeNameToCode("money", 3);
    addTypeNameToCode("smallmoney", 3);
    addTypeNameToCode("decimal() identity", 3);
    addTypeNameToCode("int", 4);
    addTypeNameToCode("int identity", 4);
    addTypeNameToCode("smallint identity", 5);
    addTypeNameToCode("float", 8);
    addTypeNameToCode("nvarchar", 12);
    addTypeNameToCode("date", 12);
    addTypeNameToCode("time", 12);
    addTypeNameToCode("datetime2", 12);
    addTypeNameToCode("datetimeoffset", 12);
    addTypeNameToCode("sysname", 12);
    addTypeNameToCode("sql_variant", 12);
    addTypeNameToCode("datetime", 93);
    addTypeNameToCode("smalldatetime", 93);
    addTypeNameToCode("image", 2004);
    addTypeNameToCode("ntext", 2005);
    addTypeNameToCode("xml", 2005);
    addTypeNameToCode("text", 2005);
  }
  
  public String serialize(String literal, int jdbcType) {
    if (jdbcType == 93)
      return "{ts '" + literal + "'}"; 
    if (jdbcType == 91)
      return "{d '" + literal + "'}"; 
    if (jdbcType == 92)
      return "{t '" + literal + "'}"; 
    return super.serialize(literal, jdbcType);
  }
  
  protected String escapeForLike(String str) {
    StringBuilder rv = new StringBuilder(str.length() + 3);
    for (char ch : str.toCharArray()) {
      if (ch == getEscapeChar() || ch == '%' || ch == '_' || ch == '[')
        rv.append(getEscapeChar()); 
      rv.append(ch);
    } 
    return rv.toString();
  }
  
  public void serialize(QueryMetadata metadata, boolean forCountRow, SQLSerializer context) {
    if (!forCountRow && metadata.getModifiers().isRestricting() && !metadata.getJoins().isEmpty()) {
      QueryModifiers mod = metadata.getModifiers();
      if (mod.getOffset() == null) {
        metadata = metadata.clone();
        metadata.addFlag(new QueryFlag(QueryFlag.Position.AFTER_SELECT, 
              Expressions.template(Integer.class, this.topTemplate, new Object[] { mod.getLimit() })));
        context.serializeForQuery(metadata, forCountRow);
      } else {
        throw new IllegalStateException("offset not supported");
      } 
    } else {
      context.serializeForQuery(metadata, forCountRow);
    } 
    if (!metadata.getFlags().isEmpty())
      context.serialize(QueryFlag.Position.END, metadata.getFlags()); 
  }
  
  protected void serializeModifiers(QueryMetadata metadata, SQLSerializer context) {}
}
