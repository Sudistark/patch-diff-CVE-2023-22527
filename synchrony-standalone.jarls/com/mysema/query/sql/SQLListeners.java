package com.mysema.query.sql;

import com.google.common.collect.Lists;
import com.mysema.commons.lang.Pair;
import com.mysema.query.QueryMetadata;
import com.mysema.query.sql.dml.SQLInsertBatch;
import com.mysema.query.sql.dml.SQLMergeBatch;
import com.mysema.query.sql.dml.SQLUpdateBatch;
import com.mysema.query.types.Expression;
import com.mysema.query.types.Path;
import com.mysema.query.types.SubQueryExpression;
import java.util.List;
import javax.annotation.Nullable;

public class SQLListeners implements SQLDetailedListener {
  @Nullable
  private final SQLDetailedListener parent;
  
  private final List<SQLDetailedListener> listeners;
  
  public SQLListeners(SQLListener parent) {
    this.listeners = Lists.newArrayList();
    this.parent = new SQLListenerAdapter(parent);
  }
  
  public SQLListeners() {
    this.listeners = Lists.newArrayList();
    this.parent = null;
  }
  
  public void add(SQLListener listener) { this.listeners.add(new SQLListenerAdapter(listener)); }
  
  public void notifyQuery(QueryMetadata md) {
    if (this.parent != null)
      this.parent.notifyQuery(md); 
    for (SQLListener listener : this.listeners)
      listener.notifyQuery(md); 
  }
  
  public void notifyDelete(RelationalPath<?> entity, QueryMetadata md) {
    if (this.parent != null)
      this.parent.notifyDelete(entity, md); 
    for (SQLListener listener : this.listeners)
      listener.notifyDelete(entity, md); 
  }
  
  public void notifyDeletes(RelationalPath<?> entity, List<QueryMetadata> batches) {
    if (this.parent != null)
      this.parent.notifyDeletes(entity, batches); 
    for (SQLListener listener : this.listeners)
      listener.notifyDeletes(entity, batches); 
  }
  
  public void notifyMerge(RelationalPath<?> entity, QueryMetadata md, List<Path<?>> keys, List<Path<?>> columns, List<Expression<?>> values, SubQueryExpression<?> subQuery) {
    if (this.parent != null)
      this.parent.notifyMerge(entity, md, keys, columns, values, subQuery); 
    for (SQLListener listener : this.listeners)
      listener.notifyMerge(entity, md, keys, columns, values, subQuery); 
  }
  
  public void notifyMerges(RelationalPath<?> entity, QueryMetadata md, List<SQLMergeBatch> batches) {
    if (this.parent != null)
      this.parent.notifyMerges(entity, md, batches); 
    for (SQLListener listener : this.listeners)
      listener.notifyMerges(entity, md, batches); 
  }
  
  public void notifyInsert(RelationalPath<?> entity, QueryMetadata md, List<Path<?>> columns, List<Expression<?>> values, SubQueryExpression<?> subQuery) {
    if (this.parent != null)
      this.parent.notifyInsert(entity, md, columns, values, subQuery); 
    for (SQLListener listener : this.listeners)
      listener.notifyInsert(entity, md, columns, values, subQuery); 
  }
  
  public void notifyInserts(RelationalPath<?> entity, QueryMetadata md, List<SQLInsertBatch> batches) {
    if (this.parent != null)
      this.parent.notifyInserts(entity, md, batches); 
    for (SQLListener listener : this.listeners)
      listener.notifyInserts(entity, md, batches); 
  }
  
  public void notifyUpdate(RelationalPath<?> entity, QueryMetadata md, List<Pair<Path<?>, Expression<?>>> updates) {
    if (this.parent != null)
      this.parent.notifyUpdate(entity, md, updates); 
    for (SQLListener listener : this.listeners)
      listener.notifyUpdate(entity, md, updates); 
  }
  
  public void notifyUpdates(RelationalPath<?> entity, List<SQLUpdateBatch> batches) {
    if (this.parent != null)
      this.parent.notifyUpdates(entity, batches); 
    for (SQLListener listener : this.listeners)
      listener.notifyUpdates(entity, batches); 
  }
  
  public void start(SQLListenerContext context) {
    if (this.parent != null)
      this.parent.start(context); 
    for (SQLDetailedListener listener : this.listeners)
      listener.start(context); 
  }
  
  public void preRender(SQLListenerContext context) {
    if (this.parent != null)
      this.parent.preRender(context); 
    for (SQLDetailedListener listener : this.listeners)
      listener.preRender(context); 
  }
  
  public void rendered(SQLListenerContext context) {
    if (this.parent != null)
      this.parent.rendered(context); 
    for (SQLDetailedListener listener : this.listeners)
      listener.rendered(context); 
  }
  
  public void prePrepare(SQLListenerContext context) {
    if (this.parent != null)
      this.parent.prePrepare(context); 
    for (SQLDetailedListener listener : this.listeners)
      listener.prePrepare(context); 
  }
  
  public void prepared(SQLListenerContext context) {
    if (this.parent != null)
      this.parent.prepared(context); 
    for (SQLDetailedListener listener : this.listeners)
      listener.prepared(context); 
  }
  
  public void preExecute(SQLListenerContext context) {
    if (this.parent != null)
      this.parent.preExecute(context); 
    for (SQLDetailedListener listener : this.listeners)
      listener.preExecute(context); 
  }
  
  public void executed(SQLListenerContext context) {
    if (this.parent != null)
      this.parent.executed(context); 
    for (SQLDetailedListener listener : this.listeners)
      listener.executed(context); 
  }
  
  public void end(SQLListenerContext context) {
    if (this.parent != null)
      this.parent.end(context); 
    for (SQLDetailedListener listener : this.listeners)
      listener.end(context); 
  }
  
  public void exception(SQLListenerContext context) {
    if (this.parent != null)
      this.parent.exception(context); 
    for (SQLDetailedListener listener : this.listeners)
      listener.exception(context); 
  }
}
