package com.mysema.query.sql;

import com.google.common.collect.ImmutableList;
import com.mysema.query.types.Expression;
import com.mysema.query.types.ExpressionUtils;
import com.mysema.query.types.MutableExpressionBase;
import com.mysema.query.types.Ops;
import com.mysema.query.types.OrderSpecifier;
import com.mysema.query.types.PathImpl;
import com.mysema.query.types.TemplateFactory;
import com.mysema.query.types.Visitor;
import com.mysema.query.types.expr.BooleanExpression;
import com.mysema.query.types.expr.ComparableExpressionBase;
import com.mysema.query.types.expr.SimpleExpression;
import com.mysema.query.types.expr.SimpleOperation;
import com.mysema.query.types.template.SimpleTemplate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class WindowFunction<A> extends MutableExpressionBase<A> {
  private static final String ORDER_BY = "order by ";
  
  private static final String PARTITION_BY = "partition by ";
  
  private static final long serialVersionUID = -4130672293308756779L;
  
  private final List<OrderSpecifier<?>> orderBy = new ArrayList();
  
  private final List<Expression<?>> partitionBy = new ArrayList();
  
  private final Expression<A> target;
  
  private String rowsOrRange;
  
  private List<Expression<?>> rowsOrRangeArgs;
  
  public WindowFunction(Expression<A> expr) {
    super(expr.getType());
    this.target = expr;
  }
  
  public SimpleExpression<A> getValue() {
    if (this.value == null) {
      int size = 0;
      ImmutableList.Builder<Expression<?>> args = ImmutableList.builder();
      StringBuilder builder = new StringBuilder();
      builder.append("{0} over (");
      args.add(this.target);
      size++;
      if (!this.partitionBy.isEmpty()) {
        builder.append("partition by ");
        boolean first = true;
        for (Expression<?> expr : this.partitionBy) {
          if (!first)
            builder.append(", "); 
          builder.append("{" + size + "}");
          args.add(expr);
          size++;
          first = false;
        } 
      } 
      if (!this.orderBy.isEmpty()) {
        if (!this.partitionBy.isEmpty())
          builder.append(" "); 
        builder.append("order by ");
        builder.append("{" + size + "}");
        args.add(ExpressionUtils.orderBy(this.orderBy));
        size++;
      } 
      if (this.rowsOrRange != null) {
        builder.append(this.rowsOrRange);
        args.addAll(this.rowsOrRangeArgs);
        size += this.rowsOrRangeArgs.size();
      } 
      builder.append(")");
      this

        
        .value = new SimpleTemplate(this.target.getType(), TemplateFactory.DEFAULT.create(builder.toString()), args.build());
    } 
    return this.value;
  }
  
  public SimpleExpression<A> as(Expression<A> alias) { return SimpleOperation.create(getType(), Ops.ALIAS, this, alias); }
  
  public SimpleExpression<A> as(String alias) { return SimpleOperation.create(getType(), Ops.ALIAS, this, new PathImpl(getType(), alias)); }
  
  public <R, C> R accept(Visitor<R, C> v, C context) { return (R)getValue().accept(v, context); }
  
  public boolean equals(Object o) {
    if (o == this)
      return true; 
    if (o instanceof WindowFunction) {
      WindowFunction<?> so = (WindowFunction)o;
      return (so.target.equals(this.target) && so.partitionBy
        .equals(this.partitionBy) && so.orderBy
        .equals(this.orderBy));
    } 
    return false;
  }
  
  public BooleanExpression eq(Expression<A> expr) { return getValue().eq(expr); }
  
  public BooleanExpression eq(A arg) { return getValue().eq(arg); }
  
  public BooleanExpression ne(Expression<A> expr) { return getValue().ne(expr); }
  
  public BooleanExpression ne(A arg) { return getValue().ne(arg); }
  
  public WindowFunction<A> orderBy(ComparableExpressionBase<?> orderBy) {
    this.value = null;
    this.orderBy.add(orderBy.asc());
    return this;
  }
  
  public WindowFunction<A> orderBy(ComparableExpressionBase... orderBy) {
    this.value = null;
    for (ComparableExpressionBase<?> e : orderBy)
      this.orderBy.add(e.asc()); 
    return this;
  }
  
  public WindowFunction<A> orderBy(OrderSpecifier<?> orderBy) {
    this.value = null;
    this.orderBy.add(orderBy);
    return this;
  }
  
  public WindowFunction<A> orderBy(OrderSpecifier... orderBy) {
    this.value = null;
    this.orderBy.addAll(Arrays.asList(orderBy));
    return this;
  }
  
  public WindowFunction<A> partitionBy(Expression<?> partitionBy) {
    this.value = null;
    this.partitionBy.add(partitionBy);
    return this;
  }
  
  public WindowFunction<A> partitionBy(Expression... partitionBy) {
    this.value = null;
    this.partitionBy.addAll(Arrays.asList(partitionBy));
    return this;
  }
  
  WindowFunction<A> withRowsOrRange(String s, List<Expression<?>> args) {
    this.rowsOrRange = s;
    this.rowsOrRangeArgs = args;
    return this;
  }
  
  public WindowRows<A> rows() {
    this.value = null;
    int offset = this.orderBy.size() + this.partitionBy.size() + 1;
    return new WindowRows(this, " rows", offset);
  }
  
  public WindowRows<A> range() {
    this.value = null;
    int offset = this.orderBy.size() + this.partitionBy.size() + 1;
    return new WindowRows(this, " range", offset);
  }
}
