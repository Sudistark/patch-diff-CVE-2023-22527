package com.mysema.query.sql;

import com.mysema.query.QueryMetadata;
import com.mysema.query.QueryModifiers;
import com.mysema.query.types.Operator;
import com.mysema.query.types.Ops;

public class DerbyTemplates extends SQLTemplates {
  public static final DerbyTemplates DEFAULT = new DerbyTemplates();
  
  private String limitOffsetTemplate = "\noffset {1s} rows fetch next {0s} rows only";
  
  private String limitTemplate = "\nfetch first {0s} rows only";
  
  private String offsetTemplate = "\noffset {0s} rows";
  
  public static SQLTemplates.Builder builder() { return new Object(); }
  
  public DerbyTemplates() { this('\\', false); }
  
  public DerbyTemplates(boolean quote) { this('\\', quote); }
  
  public DerbyTemplates(char escape, boolean quote) {
    super("\"", escape, quote);
    setDummyTable("sysibm.sysdummy1");
    setAutoIncrement(" generated always as identity");
    setFunctionJoinsWrapped(true);
    setDefaultValues("\nvalues (default)");
    setPrecedence(50, new Operator[] { Ops.EQ, Ops.EQ_IGNORE_CASE, Ops.NE, Ops.EXISTS });
    add(Ops.CONCAT, "varchar({0} || {1})", -1);
    add(SQLOps.NEXTVAL, "next value for {0s}");
    add(Ops.CASE_EQ, "case {1} end");
    add(Ops.CASE_EQ_WHEN, "when {0} = {1} then {2} {3}");
    add(Ops.CASE_EQ_ELSE, "else {0}");
    add(Ops.MathOps.RANDOM, "random()");
    add(Ops.MathOps.ROUND, "floor({0})");
    add(Ops.MathOps.POWER, "exp({1} * log({0}))");
    add(Ops.MathOps.LN, "log({0})");
    add(Ops.MathOps.LOG, "(log({0}) / log({1}))");
    add(Ops.MathOps.COTH, "(exp({0} * 2) + 1) / (exp({0} * 2) - 1)");
    add(Ops.DateTimeOps.SECOND, "second({0})");
    add(Ops.DateTimeOps.MINUTE, "minute({0})");
    add(Ops.DateTimeOps.HOUR, "hour({0})");
    add(Ops.DateTimeOps.WEEK, "week({0})");
    add(Ops.DateTimeOps.MONTH, "month({0})");
    add(Ops.DateTimeOps.YEAR, "year({0})");
    add(Ops.DateTimeOps.YEAR_MONTH, "(year({0}) * 100 + month({0}))");
    add(Ops.DateTimeOps.YEAR_WEEK, "(year({0}) * 100 + week({0}))");
    add(Ops.DateTimeOps.DAY_OF_WEEK, "dayofweek({0})");
    add(Ops.DateTimeOps.DAY_OF_MONTH, "day({0})");
    add(Ops.DateTimeOps.DAY_OF_YEAR, "dayofyear({0})");
    add(Ops.DateTimeOps.ADD_YEARS, "{fn timestampadd(SQL_TSI_YEAR, {1}, {0})}");
    add(Ops.DateTimeOps.ADD_MONTHS, "{fn timestampadd(SQL_TSI_MONTH, {1}, {0})}");
    add(Ops.DateTimeOps.ADD_WEEKS, "{fn timestampadd(SQL_TSI_WEEK, {1}, {0})}");
    add(Ops.DateTimeOps.ADD_DAYS, "{fn timestampadd(SQL_TSI_DAY, {1}, {0})}");
    add(Ops.DateTimeOps.ADD_HOURS, "{fn timestampadd(SQL_TSI_HOUR, {1}, {0})}");
    add(Ops.DateTimeOps.ADD_MINUTES, "{fn timestampadd(SQL_TSI_MINUTE, {1}, {0})}");
    add(Ops.DateTimeOps.ADD_SECONDS, "{fn timestampadd(SQL_TSI_SECOND, {1}, {0})}");
    add(Ops.DateTimeOps.DIFF_YEARS, "{fn timestampdiff(SQL_TSI_YEAR, {0}, {1})}");
    add(Ops.DateTimeOps.DIFF_MONTHS, "{fn timestampdiff(SQL_TSI_MONTH, {0}, {1})}");
    add(Ops.DateTimeOps.DIFF_WEEKS, "{fn timestampdiff(SQL_TSI_WEEK, {0}, {1})}");
    add(Ops.DateTimeOps.DIFF_DAYS, "{fn timestampdiff(SQL_TSI_DAY, {0}, {1})}");
    add(Ops.DateTimeOps.DIFF_HOURS, "{fn timestampdiff(SQL_TSI_HOUR, {0}, {1})}");
    add(Ops.DateTimeOps.DIFF_MINUTES, "{fn timestampdiff(SQL_TSI_MINUTE, {0}, {1})}");
    add(Ops.DateTimeOps.DIFF_SECONDS, "{fn timestampdiff(SQL_TSI_SECOND, {0}, {1})}");
    add(Ops.DateTimeOps.TRUNC_YEAR, "timestamp(substr(cast({0} as char(30)),1,4)||'-01-01 00:00:00')");
    add(Ops.DateTimeOps.TRUNC_MONTH, "timestamp(substr(cast({0} as char(30)),1,7)||'-01 00:00:00')");
    add(Ops.DateTimeOps.TRUNC_DAY, "timestamp(substr(cast({0} as char(30)),1,10)||' 00:00:00')");
    add(Ops.DateTimeOps.TRUNC_HOUR, "timestamp(substr(cast({0} as char(30)),1,13)||':00:00')");
    add(Ops.DateTimeOps.TRUNC_MINUTE, "timestamp(substr(cast({0} as char(30)),1,16)||':00')");
    add(Ops.DateTimeOps.TRUNC_SECOND, "timestamp(substr(cast({0} as char(30)),1,19))");
    add(Ops.StringOps.LEFT, "substr({0},1,{1})");
    addTypeNameToCode("smallint", -6, true);
    addTypeNameToCode("long varchar for bit data", -4);
    addTypeNameToCode("varchar () for bit data", -3);
    addTypeNameToCode("char () for bit data", -2);
    addTypeNameToCode("long varchar", -1, true);
    addTypeNameToCode("object", 2000, true);
    addTypeNameToCode("xml", 2009, true);
  }
  
  public String serialize(String literal, int jdbcType) {
    if (jdbcType == 16)
      return "1".equals(literal) ? "true" : "false"; 
    if (jdbcType == 93)
      return "{ts '" + literal + "'}"; 
    if (jdbcType == 91)
      return "{d '" + literal + "'}"; 
    if (jdbcType == 92)
      return "{t '" + literal + "'}"; 
    return super.serialize(literal, jdbcType);
  }
  
  protected void serializeModifiers(QueryMetadata metadata, SQLSerializer context) {
    QueryModifiers mod = metadata.getModifiers();
    if (mod.getLimit() == null) {
      context.handle(this.offsetTemplate, new Object[] { mod.getOffset() });
    } else if (mod.getOffset() == null) {
      context.handle(this.limitTemplate, new Object[] { mod.getLimit() });
    } else {
      context.handle(this.limitOffsetTemplate, new Object[] { mod.getLimit(), mod.getOffset() });
    } 
  }
}
