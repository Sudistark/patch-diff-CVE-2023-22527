package com.mysema.query;

import com.mysema.query.types.Expression;
import com.mysema.query.types.OrderSpecifier;
import com.mysema.query.types.ParamExpression;
import com.mysema.query.types.Predicate;
import java.io.Serializable;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.annotation.Nullable;

public interface QueryMetadata extends Serializable {
  void addGroupBy(Expression<?> paramExpression);
  
  void addHaving(Predicate paramPredicate);
  
  void addJoin(JoinType paramJoinType, Expression<?> paramExpression);
  
  void addJoinFlag(JoinFlag paramJoinFlag);
  
  void addJoinCondition(Predicate paramPredicate);
  
  void addOrderBy(OrderSpecifier<?> paramOrderSpecifier);
  
  void addProjection(Expression<?> paramExpression);
  
  void addWhere(Predicate paramPredicate);
  
  void clearOrderBy();
  
  void clearProjection();
  
  void clearWhere();
  
  QueryMetadata clone();
  
  List<Expression<?>> getGroupBy();
  
  Predicate getHaving();
  
  List<JoinExpression> getJoins();
  
  QueryModifiers getModifiers();
  
  List<OrderSpecifier<?>> getOrderBy();
  
  List<Expression<?>> getProjection();
  
  Map<ParamExpression<?>, Object> getParams();
  
  @Nullable
  Predicate getWhere();
  
  boolean isDistinct();
  
  boolean isUnique();
  
  void reset();
  
  void setDistinct(boolean paramBoolean);
  
  void setLimit(@Nullable Long paramLong);
  
  void setModifiers(QueryModifiers paramQueryModifiers);
  
  void setOffset(@Nullable Long paramLong);
  
  void setUnique(boolean paramBoolean);
  
  <T> void setParam(ParamExpression<T> paramParamExpression, T paramT);
  
  void addFlag(QueryFlag paramQueryFlag);
  
  boolean hasFlag(QueryFlag paramQueryFlag);
  
  void removeFlag(QueryFlag paramQueryFlag);
  
  Set<QueryFlag> getFlags();
  
  void setValidate(boolean paramBoolean);
}
