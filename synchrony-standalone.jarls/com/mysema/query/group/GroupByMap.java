package com.mysema.query.group;

import com.mysema.commons.lang.CloseableIterator;
import com.mysema.query.Projectable;
import com.mysema.query.Tuple;
import com.mysema.query.types.Expression;
import com.mysema.query.types.FactoryExpression;
import com.mysema.query.types.FactoryExpressionUtils;
import com.mysema.query.types.QTuple;
import java.util.LinkedHashMap;
import java.util.Map;

public class GroupByMap<K, V> extends AbstractGroupByTransformer<K, Map<K, V>> {
  GroupByMap(Expression<K> key, Expression... expressions) { super(key, expressions); }
  
  public Map<K, V> transform(Projectable projectable) {
    Map<K, Group> groups = new LinkedHashMap<K, Group>();
    FactoryExpression<Tuple> expr = FactoryExpressionUtils.wrap(new QTuple(this.expressions));
    boolean hasGroups = false;
    for (Expression<?> e : expr.getArgs())
      hasGroups |= e instanceof GroupExpression; 
    if (hasGroups)
      expr = withoutGroupExpressions(expr); 
    iter = projectable.iterate(expr);
    try {
      while (iter.hasNext()) {
        Object[] row = ((Tuple)iter.next()).toArray();
        K groupId = (K)row[0];
        GroupImpl group = (GroupImpl)groups.get(groupId);
        if (group == null) {
          group = new GroupImpl(this.groupExpressions, this.maps);
          groups.put(groupId, group);
        } 
        group.add(row);
      } 
    } finally {
      iter.close();
    } 
    return transform(groups);
  }
  
  protected Map<K, V> transform(Map<K, Group> groups) { return groups; }
}
