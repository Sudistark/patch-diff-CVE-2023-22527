package com.mysema.query.group;

import com.mysema.query.types.Expression;
import com.mysema.query.types.Ops;
import com.mysema.query.types.Path;
import com.mysema.query.types.PathImpl;
import com.mysema.query.types.Visitor;
import com.mysema.query.types.expr.DslExpression;
import com.mysema.query.types.expr.DslOperation;

public abstract class AbstractGroupExpression<T, R> extends Object implements GroupExpression<T, R> {
  private static final long serialVersionUID = 1509709546966783160L;
  
  private final Class<? extends R> type;
  
  private final Expression<T> expr;
  
  public AbstractGroupExpression(Class<? super R> type, Expression<T> expr) {
    this.type = type;
    this.expr = expr;
  }
  
  public DslExpression<R> as(Path<R> alias) { return DslOperation.create(getType(), Ops.ALIAS, this, alias); }
  
  public DslExpression<R> as(String alias) { return as(new PathImpl(getType(), alias)); }
  
  public Expression<T> getExpression() { return this.expr; }
  
  public <R, C> R accept(Visitor<R, C> v, C context) { return (R)this.expr.accept(v, context); }
  
  public boolean equals(Object o) {
    if (o != null && getClass().equals(o.getClass()))
      return ((GroupExpression)o).getExpression().equals(this.expr); 
    return false;
  }
  
  public Class<? extends R> getType() { return this.type; }
  
  public int hashCode() { return this.expr.hashCode(); }
  
  public String toString() { return this.expr.toString(); }
}
