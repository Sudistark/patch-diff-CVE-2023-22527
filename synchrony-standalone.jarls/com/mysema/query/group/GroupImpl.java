package com.mysema.query.group;

import com.mysema.query.types.Expression;
import com.mysema.query.types.Operation;
import com.mysema.query.types.Ops;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.SortedMap;
import java.util.SortedSet;

class GroupImpl implements Group {
  private final Map<Expression<?>, GroupCollector<?, ?>> groupCollectorMap;
  
  private final List<GroupExpression<?, ?>> groupExpressions;
  
  private final List<GroupCollector<?, ?>> groupCollectors;
  
  private final List<QPair<?, ?>> maps;
  
  public GroupImpl(List<GroupExpression<?, ?>> columnDefinitions, List<QPair<?, ?>> maps) {
    this.groupCollectorMap = new LinkedHashMap();
    this.groupCollectors = new ArrayList();
    this.groupExpressions = columnDefinitions;
    this.maps = maps;
    for (int i = 0; i < columnDefinitions.size(); i++) {
      GroupExpression<?, ?> coldef = (GroupExpression)columnDefinitions.get(i);
      GroupCollector<?, ?> collector = (GroupCollector)this.groupCollectorMap.get(coldef.getExpression());
      if (collector == null) {
        collector = coldef.createGroupCollector();
        Expression<?> coldefExpr = coldef.getExpression();
        this.groupCollectorMap.put(coldefExpr, collector);
        if (coldefExpr instanceof Operation && ((Operation)coldefExpr).getOperator() == Ops.ALIAS)
          this.groupCollectorMap.put(((Operation)coldefExpr).getArg(1), collector); 
      } 
      this.groupCollectors.add(collector);
    } 
  }
  
  void add(Object[] row) {
    int i = 0;
    for (GroupCollector groupCollector : this.groupCollectors) {
      groupCollector.add(row[i]);
      i++;
    } 
  }
  
  private <T, R> R get(Expression<T> expr) {
    GroupCollector<T, R> col = (GroupCollector)this.groupCollectorMap.get(expr);
    if (col != null)
      return (R)col.get(); 
    throw new NoSuchElementException(expr.toString());
  }
  
  public <T, R> R getGroup(GroupExpression<T, R> definition) {
    for (GroupExpression<?, ?> def : this.groupExpressions) {
      if (def.equals(definition))
        return (R)((GroupCollector)this.groupCollectorMap.get(def.getExpression())).get(); 
    } 
    throw new NoSuchElementException(definition.toString());
  }
  
  public <T> List<T> getList(Expression<T> expr) { return (List)get(expr); }
  
  public <K, V> Map<K, V> getMap(Expression<K> key, Expression<V> value) {
    for (QPair<?, ?> pair : this.maps) {
      if (pair.equals(key, value))
        return (Map)((GroupCollector)this.groupCollectorMap.get(pair)).get(); 
    } 
    throw new NoSuchElementException("GMap(" + key + ", " + value + ")");
  }
  
  public <K, V> SortedMap<K, V> getSortedMap(Expression<K> key, Expression<V> value) {
    for (QPair<?, ?> pair : this.maps) {
      if (pair.equals(key, value))
        return (SortedMap)((GroupCollector)this.groupCollectorMap.get(pair)).get(); 
    } 
    throw new NoSuchElementException("GMap(" + key + ", " + value + ")");
  }
  
  public <T> T getOne(Expression<T> expr) { return (T)get(expr); }
  
  public <T> Set<T> getSet(Expression<T> expr) { return (Set)get(expr); }
  
  public <T> SortedSet<T> getSortedSet(Expression<T> expr) { return (SortedSet)get(expr); }
  
  public Object[] toArray() {
    List<Object> arr = new ArrayList<Object>(this.groupCollectors.size());
    for (GroupCollector<?, ?> col : this.groupCollectors)
      arr.add(col.get()); 
    return arr.toArray();
  }
}
