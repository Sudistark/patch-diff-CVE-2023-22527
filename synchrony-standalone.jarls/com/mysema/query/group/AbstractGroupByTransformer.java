package com.mysema.query.group;

import com.mysema.query.ResultTransformer;
import com.mysema.query.Tuple;
import com.mysema.query.types.Expression;
import com.mysema.query.types.FactoryExpression;
import com.mysema.query.types.Operation;
import com.mysema.query.types.Ops;
import java.util.ArrayList;
import java.util.List;

abstract class AbstractGroupByTransformer<K, T> extends Object implements ResultTransformer<T> {
  protected final List<GroupExpression<?, ?>> groupExpressions = new ArrayList();
  
  protected final List<QPair<?, ?>> maps = new ArrayList();
  
  protected final Expression<?>[] expressions;
  
  AbstractGroupByTransformer(Expression<K> key, Expression... expressions) {
    List<Expression<?>> projection = new ArrayList<Expression<?>>(expressions.length);
    this.groupExpressions.add(new GOne(key));
    projection.add(key);
    for (Expression<?> expr : expressions) {
      if (expr instanceof GroupExpression) {
        GroupExpression<?, ?> groupExpr = (GroupExpression)expr;
        this.groupExpressions.add(groupExpr);
        Expression<?> colExpression = groupExpr.getExpression();
        if (colExpression instanceof Operation && ((Operation)colExpression).getOperator() == Ops.ALIAS) {
          projection.add(((Operation)colExpression).getArg(0));
        } else {
          projection.add(colExpression);
        } 
        if (groupExpr instanceof GMap)
          this.maps.add((QPair)colExpression); 
      } else {
        this.groupExpressions.add(new GOne(expr));
        projection.add(expr);
      } 
    } 
    this.expressions = (Expression[])projection.toArray(new Expression[projection.size()]);
  }
  
  protected static FactoryExpression<Tuple> withoutGroupExpressions(FactoryExpression<Tuple> expr) {
    List<Expression<?>> args = new ArrayList<Expression<?>>(expr.getArgs().size());
    for (Expression<?> arg : expr.getArgs()) {
      if (arg instanceof GroupExpression) {
        args.add(((GroupExpression)arg).getExpression());
        continue;
      } 
      args.add(arg);
    } 
    return new FactoryExpressionAdapter(expr, args, null);
  }
}
