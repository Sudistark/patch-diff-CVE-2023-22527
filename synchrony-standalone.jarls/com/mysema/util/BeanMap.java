package com.mysema.util;

import com.google.common.base.Function;
import com.google.common.primitives.Primitives;
import java.beans.BeanInfo;
import java.beans.IntrospectionException;
import java.beans.Introspector;
import java.beans.PropertyDescriptor;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class BeanMap extends AbstractMap<String, Object> implements Cloneable {
  private Object bean;
  
  private Map<String, Method> readMethods = new HashMap();
  
  private Map<String, Method> writeMethods = new HashMap();
  
  private Map<String, Class<?>> types = new HashMap();
  
  private static final Object[] NULL_ARGUMENTS = new Object[0];
  
  private static final Map<Class<?>, Function<?, ?>> defaultFunctions = new HashMap();
  
  static  {
    defaultFunctions.put(boolean.class, new Object());
    defaultFunctions.put(char.class, new Object());
    defaultFunctions.put(byte.class, new Object());
    defaultFunctions.put(short.class, new Object());
    defaultFunctions.put(int.class, new Object());
    defaultFunctions.put(long.class, new Object());
    defaultFunctions.put(float.class, new Object());
    defaultFunctions.put(double.class, new Object());
  }
  
  public BeanMap(Object bean) {
    this.bean = bean;
    initialise();
  }
  
  public String toString() { return "BeanMap<" + this.bean + ">"; }
  
  public Object clone() throws CloneNotSupportedException {
    BeanMap newMap = (BeanMap)super.clone();
    if (this.bean == null)
      return newMap; 
    Object newBean = null;
    Class<?> beanClass = null;
    try {
      beanClass = this.bean.getClass();
      newBean = beanClass.newInstance();
    } catch (Exception e) {
      throw new CloneNotSupportedException("Unable to instantiate the underlying bean \"" + beanClass.getName() + "\": " + e);
    } 
    try {
      newMap.setBean(newBean);
    } catch (Exception exception) {
      throw new CloneNotSupportedException("Unable to set bean in the cloned bean map: " + exception);
    } 
    try {
      Iterator<String> readableKeys = this.readMethods.keySet().iterator();
      while (readableKeys.hasNext()) {
        String key = (String)readableKeys.next();
        if (getWriteMethod(key) != null)
          newMap.put(key, get(key)); 
      } 
    } catch (Exception exception) {
      throw new CloneNotSupportedException("Unable to copy bean values to cloned bean map: " + exception);
    } 
    return newMap;
  }
  
  public void putAllWriteable(BeanMap map) {
    Iterator<String> readableKeys = map.readMethods.keySet().iterator();
    while (readableKeys.hasNext()) {
      String key = (String)readableKeys.next();
      if (getWriteMethod(key) != null)
        put(key, map.get(key)); 
    } 
  }
  
  public void clear() {
    if (this.bean == null)
      return; 
    Class<?> beanClass = null;
    try {
      beanClass = this.bean.getClass();
      this.bean = beanClass.newInstance();
    } catch (Exception e) {
      throw new UnsupportedOperationException("Could not create new instance of class: " + beanClass);
    } 
  }
  
  public boolean containsKey(String name) {
    Method method = getReadMethod(name);
    return (method != null);
  }
  
  public Object get(String name) {
    if (this.bean != null) {
      Method method = getReadMethod(name);
      if (method != null)
        try {
          return method.invoke(this.bean, NULL_ARGUMENTS);
        } catch (IllegalAccessException illegalAccessException) {
        
        } catch (IllegalArgumentException illegalArgumentException) {
        
        } catch (InvocationTargetException invocationTargetException) {
        
        } catch (NullPointerException nullPointerException) {} 
    } 
    return null;
  }
  
  public Object put(String name, Object value) {
    if (this.bean != null) {
      Object oldValue = get(name);
      Method method = getWriteMethod(name);
      if (method == null)
        throw new IllegalArgumentException("The bean of type: " + this.bean.getClass().getName() + " has no property called: " + name); 
      try {
        Object[] arguments = createWriteMethodArguments(method, value);
        method.invoke(this.bean, arguments);
        Object newValue = get(name);
        firePropertyChange(name, oldValue, newValue);
      } catch (InvocationTargetException e) {
        throw new IllegalArgumentException(e.getMessage());
      } catch (IllegalAccessException e) {
        throw new IllegalArgumentException(e.getMessage());
      } 
      return oldValue;
    } 
    return null;
  }
  
  public int size() { return this.readMethods.size(); }
  
  public Set<String> keySet() { return this.readMethods.keySet(); }
  
  public Set<Map.Entry<String, Object>> entrySet() { return new Object(this); }
  
  public Collection<Object> values() {
    List<Object> answer = new ArrayList<Object>(this.readMethods.size());
    for (Iterator<Object> iter = valueIterator(); iter.hasNext();)
      answer.add(iter.next()); 
    return answer;
  }
  
  public Class<?> getType(String name) { return (Class)this.types.get(name); }
  
  public Iterator<String> keyIterator() { return this.readMethods.keySet().iterator(); }
  
  public Iterator<Object> valueIterator() {
    Iterator<String> iter = keyIterator();
    return new Object(this, iter);
  }
  
  public Iterator<Map.Entry<String, Object>> entryIterator() {
    Iterator<String> iter = keyIterator();
    return new Object(this, iter);
  }
  
  public Object getBean() throws CloneNotSupportedException { return this.bean; }
  
  public void setBean(Object newBean) {
    this.bean = newBean;
    reinitialise();
  }
  
  public Method getReadMethod(String name) { return (Method)this.readMethods.get(name); }
  
  public Method getWriteMethod(String name) { return (Method)this.writeMethods.get(name); }
  
  protected void reinitialise() {
    this.readMethods.clear();
    this.writeMethods.clear();
    this.types.clear();
    initialise();
  }
  
  private void initialise() {
    if (getBean() == null)
      return; 
    Class<?> beanClass = getBean().getClass();
    try {
      BeanInfo beanInfo = Introspector.getBeanInfo(beanClass);
      PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();
      if (propertyDescriptors != null)
        for (int i = 0; i < propertyDescriptors.length; i++) {
          PropertyDescriptor propertyDescriptor = propertyDescriptors[i];
          if (propertyDescriptor != null) {
            String name = propertyDescriptor.getName();
            Method readMethod = propertyDescriptor.getReadMethod();
            Method writeMethod = propertyDescriptor.getWriteMethod();
            Class<?> aType = propertyDescriptor.getPropertyType();
            if (readMethod != null)
              this.readMethods.put(name, readMethod); 
            if (this.writeMethods != null)
              this.writeMethods.put(name, writeMethod); 
            this.types.put(name, aType);
          } 
        }  
    } catch (IntrospectionException introspectionException) {}
  }
  
  protected void firePropertyChange(String key, Object oldValue, Object newValue) {}
  
  protected Object[] createWriteMethodArguments(Method method, Object value) throws IllegalAccessException {
    try {
      if (value != null) {
        Class[] types = method.getParameterTypes();
        if (types != null && types.length > 0) {
          Class<?> paramType = types[0];
          if (paramType.isPrimitive())
            paramType = Primitives.wrap(paramType); 
          if (!paramType.isAssignableFrom(value.getClass()))
            value = convertType(paramType, value); 
        } 
      } 
      return new Object[] { value };
    } catch (InvocationTargetException e) {
      throw new IllegalArgumentException(e.getMessage());
    } catch (InstantiationException e) {
      throw new IllegalArgumentException(e.getMessage());
    } 
  }
  
  protected Object convertType(Class<?> newType, Object value) throws InstantiationException, IllegalAccessException, InvocationTargetException {
    Class[] types = { value.getClass() };
    try {
      Constructor<?> constructor = newType.getConstructor(types);
      Object[] arguments = { value };
      return constructor.newInstance(arguments);
    } catch (NoSuchMethodException e) {
      Function function = getTypeFunction(newType);
      if (function != null)
        return function.apply(value); 
      return value;
    } 
  }
  
  protected Function<?, ?> getTypeFunction(Class<?> aType) { return (Function)defaultFunctions.get(aType); }
  
  public BeanMap() {}
}
