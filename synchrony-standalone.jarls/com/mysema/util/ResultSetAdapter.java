package com.mysema.util;

import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Array;
import java.sql.Blob;
import java.sql.Clob;
import java.sql.Date;
import java.sql.NClob;
import java.sql.Ref;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.RowId;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Statement;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.Map;

public class ResultSetAdapter implements ResultSet {
  private final ResultSet rs;
  
  public ResultSetAdapter(ResultSet rs) { this.rs = rs; }
  
  public boolean absolute(int row) throws SQLException { return this.rs.absolute(row); }
  
  public void afterLast() throws SQLException { this.rs.afterLast(); }
  
  public void beforeFirst() throws SQLException { this.rs.beforeFirst(); }
  
  public void cancelRowUpdates() throws SQLException { this.rs.cancelRowUpdates(); }
  
  public void clearWarnings() throws SQLException { this.rs.clearWarnings(); }
  
  public void close() throws SQLException { this.rs.close(); }
  
  public void deleteRow() throws SQLException { this.rs.deleteRow(); }
  
  public int findColumn(String columnLabel) throws SQLException { return this.rs.findColumn(columnLabel); }
  
  public boolean first() throws SQLException { return this.rs.first(); }
  
  public Array getArray(int columnIndex) throws SQLException { return this.rs.getArray(columnIndex); }
  
  public Array getArray(String columnLabel) throws SQLException { return this.rs.getArray(columnLabel); }
  
  public InputStream getAsciiStream(int columnIndex) throws SQLException { return this.rs.getAsciiStream(columnIndex); }
  
  public InputStream getAsciiStream(String columnLabel) throws SQLException { return this.rs.getAsciiStream(columnLabel); }
  
  public BigDecimal getBigDecimal(int columnIndex, int scale) throws SQLException { return this.rs.getBigDecimal(columnIndex, scale); }
  
  public BigDecimal getBigDecimal(int columnIndex) throws SQLException { return this.rs.getBigDecimal(columnIndex); }
  
  public BigDecimal getBigDecimal(String columnLabel, int scale) throws SQLException { return this.rs.getBigDecimal(columnLabel, scale); }
  
  public BigDecimal getBigDecimal(String columnLabel) throws SQLException { return this.rs.getBigDecimal(columnLabel); }
  
  public InputStream getBinaryStream(int columnIndex) throws SQLException { return this.rs.getBinaryStream(columnIndex); }
  
  public InputStream getBinaryStream(String columnLabel) throws SQLException { return this.rs.getBinaryStream(columnLabel); }
  
  public Blob getBlob(int columnIndex) throws SQLException { return this.rs.getBlob(columnIndex); }
  
  public Blob getBlob(String columnLabel) throws SQLException { return this.rs.getBlob(columnLabel); }
  
  public boolean getBoolean(int columnIndex) throws SQLException { return this.rs.getBoolean(columnIndex); }
  
  public boolean getBoolean(String columnLabel) throws SQLException { return this.rs.getBoolean(columnLabel); }
  
  public byte getByte(int columnIndex) throws SQLException { return this.rs.getByte(columnIndex); }
  
  public byte getByte(String columnLabel) throws SQLException { return this.rs.getByte(columnLabel); }
  
  public byte[] getBytes(int columnIndex) throws SQLException { return this.rs.getBytes(columnIndex); }
  
  public byte[] getBytes(String columnLabel) throws SQLException { return this.rs.getBytes(columnLabel); }
  
  public Reader getCharacterStream(int columnIndex) throws SQLException { return this.rs.getCharacterStream(columnIndex); }
  
  public Reader getCharacterStream(String columnLabel) throws SQLException { return this.rs.getCharacterStream(columnLabel); }
  
  public Clob getClob(int columnIndex) throws SQLException { return this.rs.getClob(columnIndex); }
  
  public Clob getClob(String columnLabel) throws SQLException { return this.rs.getClob(columnLabel); }
  
  public int getConcurrency() throws SQLException { return this.rs.getConcurrency(); }
  
  public String getCursorName() throws SQLException { return this.rs.getCursorName(); }
  
  public Date getDate(int columnIndex, Calendar cal) throws SQLException { return this.rs.getDate(columnIndex, cal); }
  
  public Date getDate(int columnIndex) throws SQLException { return this.rs.getDate(columnIndex); }
  
  public Date getDate(String columnLabel, Calendar cal) throws SQLException { return this.rs.getDate(columnLabel, cal); }
  
  public Date getDate(String columnLabel) throws SQLException { return this.rs.getDate(columnLabel); }
  
  public double getDouble(int columnIndex) throws SQLException { return this.rs.getDouble(columnIndex); }
  
  public double getDouble(String columnLabel) throws SQLException { return this.rs.getDouble(columnLabel); }
  
  public int getFetchDirection() throws SQLException { return this.rs.getFetchDirection(); }
  
  public int getFetchSize() throws SQLException { return this.rs.getFetchSize(); }
  
  public float getFloat(int columnIndex) throws SQLException { return this.rs.getFloat(columnIndex); }
  
  public float getFloat(String columnLabel) throws SQLException { return this.rs.getFloat(columnLabel); }
  
  public int getHoldability() throws SQLException { return this.rs.getHoldability(); }
  
  public int getInt(int columnIndex) throws SQLException { return this.rs.getInt(columnIndex); }
  
  public int getInt(String columnLabel) throws SQLException { return this.rs.getInt(columnLabel); }
  
  public long getLong(int columnIndex) throws SQLException { return this.rs.getLong(columnIndex); }
  
  public long getLong(String columnLabel) throws SQLException { return this.rs.getLong(columnLabel); }
  
  public ResultSetMetaData getMetaData() throws SQLException { return this.rs.getMetaData(); }
  
  public Reader getNCharacterStream(int columnIndex) throws SQLException { return this.rs.getNCharacterStream(columnIndex); }
  
  public Reader getNCharacterStream(String columnLabel) throws SQLException { return this.rs.getNCharacterStream(columnLabel); }
  
  public NClob getNClob(int columnIndex) throws SQLException { return this.rs.getNClob(columnIndex); }
  
  public NClob getNClob(String columnLabel) throws SQLException { return this.rs.getNClob(columnLabel); }
  
  public String getNString(int columnIndex) throws SQLException { return this.rs.getNString(columnIndex); }
  
  public String getNString(String columnLabel) throws SQLException { return this.rs.getNString(columnLabel); }
  
  public Object getObject(int columnIndex, Map<String, Class<?>> map) throws SQLException { return this.rs.getObject(columnIndex, map); }
  
  public Object getObject(int columnIndex) throws SQLException { return this.rs.getObject(columnIndex); }
  
  public <T> T getObject(int columnIndex, Class<T> type) throws SQLException { return (T)this.rs.getObject(columnIndex); }
  
  public Object getObject(String columnLabel, Map<String, Class<?>> map) throws SQLException { return this.rs.getObject(columnLabel, map); }
  
  public Object getObject(String columnLabel) throws SQLException { return this.rs.getObject(columnLabel); }
  
  public <T> T getObject(String columnLabel, Class<T> type) throws SQLException { return (T)this.rs.getObject(columnLabel); }
  
  public Ref getRef(int columnIndex) throws SQLException { return this.rs.getRef(columnIndex); }
  
  public Ref getRef(String columnLabel) throws SQLException { return this.rs.getRef(columnLabel); }
  
  public int getRow() throws SQLException { return this.rs.getRow(); }
  
  public RowId getRowId(int columnIndex) throws SQLException { return this.rs.getRowId(columnIndex); }
  
  public RowId getRowId(String columnLabel) throws SQLException { return this.rs.getRowId(columnLabel); }
  
  public short getShort(int columnIndex) throws SQLException { return this.rs.getShort(columnIndex); }
  
  public short getShort(String columnLabel) throws SQLException { return this.rs.getShort(columnLabel); }
  
  public SQLXML getSQLXML(int columnIndex) throws SQLException { return this.rs.getSQLXML(columnIndex); }
  
  public SQLXML getSQLXML(String columnLabel) throws SQLException { return this.rs.getSQLXML(columnLabel); }
  
  public Statement getStatement() throws SQLException { return this.rs.getStatement(); }
  
  public String getString(int columnIndex) throws SQLException { return this.rs.getString(columnIndex); }
  
  public String getString(String columnLabel) throws SQLException { return this.rs.getString(columnLabel); }
  
  public Time getTime(int columnIndex, Calendar cal) throws SQLException { return this.rs.getTime(columnIndex, cal); }
  
  public Time getTime(int columnIndex) throws SQLException { return this.rs.getTime(columnIndex); }
  
  public Time getTime(String columnLabel, Calendar cal) throws SQLException { return this.rs.getTime(columnLabel, cal); }
  
  public Time getTime(String columnLabel) throws SQLException { return this.rs.getTime(columnLabel); }
  
  public Timestamp getTimestamp(int columnIndex, Calendar cal) throws SQLException { return this.rs.getTimestamp(columnIndex, cal); }
  
  public Timestamp getTimestamp(int columnIndex) throws SQLException { return this.rs.getTimestamp(columnIndex); }
  
  public Timestamp getTimestamp(String columnLabel, Calendar cal) throws SQLException { return this.rs.getTimestamp(columnLabel, cal); }
  
  public Timestamp getTimestamp(String columnLabel) throws SQLException { return this.rs.getTimestamp(columnLabel); }
  
  public int getType() throws SQLException { return this.rs.getType(); }
  
  public InputStream getUnicodeStream(int columnIndex) throws SQLException { return this.rs.getUnicodeStream(columnIndex); }
  
  public InputStream getUnicodeStream(String columnLabel) throws SQLException { return this.rs.getUnicodeStream(columnLabel); }
  
  public URL getURL(int columnIndex) throws SQLException { return this.rs.getURL(columnIndex); }
  
  public URL getURL(String columnLabel) throws SQLException { return this.rs.getURL(columnLabel); }
  
  public SQLWarning getWarnings() throws SQLException { return this.rs.getWarnings(); }
  
  public void insertRow() throws SQLException { this.rs.insertRow(); }
  
  public boolean isAfterLast() throws SQLException { return this.rs.isAfterLast(); }
  
  public boolean isBeforeFirst() throws SQLException { return this.rs.isBeforeFirst(); }
  
  public boolean isClosed() throws SQLException { return this.rs.isClosed(); }
  
  public boolean isFirst() throws SQLException { return this.rs.isFirst(); }
  
  public boolean isLast() throws SQLException { return this.rs.isLast(); }
  
  public boolean isWrapperFor(Class<?> iface) throws SQLException { return this.rs.isWrapperFor(iface); }
  
  public boolean last() throws SQLException { return this.rs.last(); }
  
  public void moveToCurrentRow() throws SQLException { this.rs.moveToCurrentRow(); }
  
  public void moveToInsertRow() throws SQLException { this.rs.moveToInsertRow(); }
  
  public boolean next() throws SQLException { return this.rs.next(); }
  
  public boolean previous() throws SQLException { return this.rs.previous(); }
  
  public void refreshRow() throws SQLException { this.rs.refreshRow(); }
  
  public boolean relative(int rows) throws SQLException { return this.rs.relative(rows); }
  
  public boolean rowDeleted() throws SQLException { return this.rs.rowDeleted(); }
  
  public boolean rowInserted() throws SQLException { return this.rs.rowInserted(); }
  
  public boolean rowUpdated() throws SQLException { return this.rs.rowUpdated(); }
  
  public void setFetchDirection(int direction) throws SQLException { this.rs.setFetchDirection(direction); }
  
  public void setFetchSize(int rows) throws SQLException { this.rs.setFetchSize(rows); }
  
  public <T> T unwrap(Class<T> iface) throws SQLException { return (T)this.rs.unwrap(iface); }
  
  public void updateArray(int columnIndex, Array x) throws SQLException { this.rs.updateArray(columnIndex, x); }
  
  public void updateArray(String columnLabel, Array x) throws SQLException { this.rs.updateArray(columnLabel, x); }
  
  public void updateAsciiStream(int columnIndex, InputStream x, int length) throws SQLException { this.rs.updateAsciiStream(columnIndex, x, length); }
  
  public void updateAsciiStream(int columnIndex, InputStream x, long length) throws SQLException { this.rs.updateAsciiStream(columnIndex, x, length); }
  
  public void updateAsciiStream(int columnIndex, InputStream x) throws SQLException { this.rs.updateAsciiStream(columnIndex, x); }
  
  public void updateAsciiStream(String columnLabel, InputStream x, int length) throws SQLException { this.rs.updateAsciiStream(columnLabel, x, length); }
  
  public void updateAsciiStream(String columnLabel, InputStream x, long length) throws SQLException { this.rs.updateAsciiStream(columnLabel, x, length); }
  
  public void updateAsciiStream(String columnLabel, InputStream x) throws SQLException { this.rs.updateAsciiStream(columnLabel, x); }
  
  public void updateBigDecimal(int columnIndex, BigDecimal x) throws SQLException { this.rs.updateBigDecimal(columnIndex, x); }
  
  public void updateBigDecimal(String columnLabel, BigDecimal x) throws SQLException { this.rs.updateBigDecimal(columnLabel, x); }
  
  public void updateBinaryStream(int columnIndex, InputStream x, int length) throws SQLException { this.rs.updateBinaryStream(columnIndex, x, length); }
  
  public void updateBinaryStream(int columnIndex, InputStream x, long length) throws SQLException { this.rs.updateBinaryStream(columnIndex, x, length); }
  
  public void updateBinaryStream(int columnIndex, InputStream x) throws SQLException { this.rs.updateBinaryStream(columnIndex, x); }
  
  public void updateBinaryStream(String columnLabel, InputStream x, int length) throws SQLException { this.rs.updateBinaryStream(columnLabel, x, length); }
  
  public void updateBinaryStream(String columnLabel, InputStream x, long length) throws SQLException { this.rs.updateBinaryStream(columnLabel, x, length); }
  
  public void updateBinaryStream(String columnLabel, InputStream x) throws SQLException { this.rs.updateBinaryStream(columnLabel, x); }
  
  public void updateBlob(int columnIndex, Blob x) throws SQLException { this.rs.updateBlob(columnIndex, x); }
  
  public void updateBlob(int columnIndex, InputStream inputStream, long length) throws SQLException { this.rs.updateBlob(columnIndex, inputStream, length); }
  
  public void updateBlob(int columnIndex, InputStream inputStream) throws SQLException { this.rs.updateBlob(columnIndex, inputStream); }
  
  public void updateBlob(String columnLabel, Blob x) throws SQLException { this.rs.updateBlob(columnLabel, x); }
  
  public void updateBlob(String columnLabel, InputStream inputStream, long length) throws SQLException { this.rs.updateBlob(columnLabel, inputStream, length); }
  
  public void updateBlob(String columnLabel, InputStream inputStream) throws SQLException { this.rs.updateBlob(columnLabel, inputStream); }
  
  public void updateBoolean(int columnIndex, boolean x) throws SQLException { this.rs.updateBoolean(columnIndex, x); }
  
  public void updateBoolean(String columnLabel, boolean x) throws SQLException { this.rs.updateBoolean(columnLabel, x); }
  
  public void updateByte(int columnIndex, byte x) throws SQLException { this.rs.updateByte(columnIndex, x); }
  
  public void updateByte(String columnLabel, byte x) throws SQLException { this.rs.updateByte(columnLabel, x); }
  
  public void updateBytes(int columnIndex, byte[] x) throws SQLException { this.rs.updateBytes(columnIndex, x); }
  
  public void updateBytes(String columnLabel, byte[] x) throws SQLException { this.rs.updateBytes(columnLabel, x); }
  
  public void updateCharacterStream(int columnIndex, Reader x, int length) throws SQLException { this.rs.updateCharacterStream(columnIndex, x, length); }
  
  public void updateCharacterStream(int columnIndex, Reader x, long length) throws SQLException { this.rs.updateCharacterStream(columnIndex, x, length); }
  
  public void updateCharacterStream(int columnIndex, Reader x) throws SQLException { this.rs.updateCharacterStream(columnIndex, x); }
  
  public void updateCharacterStream(String columnLabel, Reader reader, int length) throws SQLException { this.rs.updateCharacterStream(columnLabel, reader, length); }
  
  public void updateCharacterStream(String columnLabel, Reader reader, long length) throws SQLException { this.rs.updateCharacterStream(columnLabel, reader, length); }
  
  public void updateCharacterStream(String columnLabel, Reader reader) throws SQLException { this.rs.updateCharacterStream(columnLabel, reader); }
  
  public void updateClob(int columnIndex, Clob x) throws SQLException { this.rs.updateClob(columnIndex, x); }
  
  public void updateClob(int columnIndex, Reader reader, long length) throws SQLException { this.rs.updateClob(columnIndex, reader, length); }
  
  public void updateClob(int columnIndex, Reader reader) throws SQLException { this.rs.updateClob(columnIndex, reader); }
  
  public void updateClob(String columnLabel, Clob x) throws SQLException { this.rs.updateClob(columnLabel, x); }
  
  public void updateClob(String columnLabel, Reader reader, long length) throws SQLException { this.rs.updateClob(columnLabel, reader, length); }
  
  public void updateClob(String columnLabel, Reader reader) throws SQLException { this.rs.updateClob(columnLabel, reader); }
  
  public void updateDate(int columnIndex, Date x) throws SQLException { this.rs.updateDate(columnIndex, x); }
  
  public void updateDate(String columnLabel, Date x) throws SQLException { this.rs.updateDate(columnLabel, x); }
  
  public void updateDouble(int columnIndex, double x) throws SQLException { this.rs.updateDouble(columnIndex, x); }
  
  public void updateDouble(String columnLabel, double x) throws SQLException { this.rs.updateDouble(columnLabel, x); }
  
  public void updateFloat(int columnIndex, float x) throws SQLException { this.rs.updateFloat(columnIndex, x); }
  
  public void updateFloat(String columnLabel, float x) throws SQLException { this.rs.updateFloat(columnLabel, x); }
  
  public void updateInt(int columnIndex, int x) throws SQLException { this.rs.updateInt(columnIndex, x); }
  
  public void updateInt(String columnLabel, int x) throws SQLException { this.rs.updateInt(columnLabel, x); }
  
  public void updateLong(int columnIndex, long x) throws SQLException { this.rs.updateLong(columnIndex, x); }
  
  public void updateLong(String columnLabel, long x) throws SQLException { this.rs.updateLong(columnLabel, x); }
  
  public void updateNCharacterStream(int columnIndex, Reader x, long length) throws SQLException { this.rs.updateNCharacterStream(columnIndex, x, length); }
  
  public void updateNCharacterStream(int columnIndex, Reader x) throws SQLException { this.rs.updateNCharacterStream(columnIndex, x); }
  
  public void updateNCharacterStream(String columnLabel, Reader reader, long length) throws SQLException { this.rs.updateNCharacterStream(columnLabel, reader, length); }
  
  public void updateNCharacterStream(String columnLabel, Reader reader) throws SQLException { this.rs.updateNCharacterStream(columnLabel, reader); }
  
  public void updateNClob(int columnIndex, NClob nClob) throws SQLException { this.rs.updateNClob(columnIndex, nClob); }
  
  public void updateNClob(int columnIndex, Reader reader, long length) throws SQLException { this.rs.updateNClob(columnIndex, reader, length); }
  
  public void updateNClob(int columnIndex, Reader reader) throws SQLException { this.rs.updateNClob(columnIndex, reader); }
  
  public void updateNClob(String columnLabel, NClob nClob) throws SQLException { this.rs.updateNClob(columnLabel, nClob); }
  
  public void updateNClob(String columnLabel, Reader reader, long length) throws SQLException { this.rs.updateNClob(columnLabel, reader, length); }
  
  public void updateNClob(String columnLabel, Reader reader) throws SQLException { this.rs.updateNClob(columnLabel, reader); }
  
  public void updateNString(int columnIndex, String nString) throws SQLException { this.rs.updateNString(columnIndex, nString); }
  
  public void updateNString(String columnLabel, String nString) throws SQLException { this.rs.updateNString(columnLabel, nString); }
  
  public void updateNull(int columnIndex) throws SQLException { this.rs.updateNull(columnIndex); }
  
  public void updateNull(String columnLabel) throws SQLException { this.rs.updateNull(columnLabel); }
  
  public void updateObject(int columnIndex, Object x, int scaleOrLength) throws SQLException { this.rs.updateObject(columnIndex, x, scaleOrLength); }
  
  public void updateObject(int columnIndex, Object x) throws SQLException { this.rs.updateObject(columnIndex, x); }
  
  public void updateObject(String columnLabel, Object x, int scaleOrLength) throws SQLException { this.rs.updateObject(columnLabel, x, scaleOrLength); }
  
  public void updateObject(String columnLabel, Object x) throws SQLException { this.rs.updateObject(columnLabel, x); }
  
  public void updateRef(int columnIndex, Ref x) throws SQLException { this.rs.updateRef(columnIndex, x); }
  
  public void updateRef(String columnLabel, Ref x) throws SQLException { this.rs.updateRef(columnLabel, x); }
  
  public void updateRow() throws SQLException { this.rs.updateRow(); }
  
  public void updateRowId(int columnIndex, RowId x) throws SQLException { this.rs.updateRowId(columnIndex, x); }
  
  public void updateRowId(String columnLabel, RowId x) throws SQLException { this.rs.updateRowId(columnLabel, x); }
  
  public void updateShort(int columnIndex, short x) throws SQLException { this.rs.updateShort(columnIndex, x); }
  
  public void updateShort(String columnLabel, short x) throws SQLException { this.rs.updateShort(columnLabel, x); }
  
  public void updateSQLXML(int columnIndex, SQLXML xmlObject) throws SQLException { this.rs.updateSQLXML(columnIndex, xmlObject); }
  
  public void updateSQLXML(String columnLabel, SQLXML xmlObject) throws SQLException { this.rs.updateSQLXML(columnLabel, xmlObject); }
  
  public void updateString(int columnIndex, String x) throws SQLException { this.rs.updateString(columnIndex, x); }
  
  public void updateString(String columnLabel, String x) throws SQLException { this.rs.updateString(columnLabel, x); }
  
  public void updateTime(int columnIndex, Time x) throws SQLException { this.rs.updateTime(columnIndex, x); }
  
  public void updateTime(String columnLabel, Time x) throws SQLException { this.rs.updateTime(columnLabel, x); }
  
  public void updateTimestamp(int columnIndex, Timestamp x) throws SQLException { this.rs.updateTimestamp(columnIndex, x); }
  
  public void updateTimestamp(String columnLabel, Timestamp x) throws SQLException { this.rs.updateTimestamp(columnLabel, x); }
  
  public boolean wasNull() throws SQLException { return this.rs.wasNull(); }
}
