package com.mysema.util;

import java.math.BigDecimal;
import java.math.BigInteger;

public final class MathUtils {
  public static <D extends Number> D sum(D num1, Number num2) {
    BigDecimal res = (new BigDecimal(num1.toString())).add(new BigDecimal(num2.toString()));
    return (D)cast(res, num1.getClass());
  }
  
  public static <D extends Number> D difference(D num1, Number num2) {
    BigDecimal res = (new BigDecimal(num1.toString())).subtract(new BigDecimal(num2.toString()));
    return (D)cast(res, num1.getClass());
  }
  
  public static <D extends Number> D cast(Number num, Class<D> type) {
    D rv;
    if (num == null || type.isInstance(num)) {
      rv = (D)(Number)type.cast(num);
    } else if (type.equals(Byte.class)) {
      rv = (D)(Number)type.cast(Byte.valueOf(num.byteValue()));
    } else if (type.equals(Double.class)) {
      rv = (D)(Number)type.cast(Double.valueOf(num.doubleValue()));
    } else if (type.equals(Float.class)) {
      rv = (D)(Number)type.cast(Float.valueOf(num.floatValue()));
    } else if (type.equals(Integer.class)) {
      rv = (D)(Number)type.cast(Integer.valueOf(num.intValue()));
    } else if (type.equals(Long.class)) {
      rv = (D)(Number)type.cast(Long.valueOf(num.longValue()));
    } else if (type.equals(Short.class)) {
      rv = (D)(Number)type.cast(Short.valueOf(num.shortValue()));
    } else if (type.equals(BigDecimal.class)) {
      rv = (D)(Number)type.cast(new BigDecimal(num.toString()));
    } else if (type.equals(BigInteger.class)) {
      if (num instanceof BigDecimal) {
        rv = (D)(Number)type.cast(((BigDecimal)num).toBigInteger());
      } else {
        rv = (D)(Number)type.cast(new BigInteger(num.toString()));
      } 
    } else {
      throw new IllegalArgumentException(String.format("Unsupported target type : %s", new Object[] { type.getSimpleName() }));
    } 
    return rv;
  }
}
