package com.google.common.escape;

import com.google.common.annotations.GwtCompatible;
import com.google.common.base.Preconditions;
import javax.annotation.CheckForNull;

@ElementTypesAreNonnullByDefault
@GwtCompatible
public final class Escapers {
  public static Escaper nullEscaper() { return NULL_ESCAPER; }
  
  private static final Escaper NULL_ESCAPER = new Object();
  
  public static Builder builder() { return new Builder(null); }
  
  static UnicodeEscaper asUnicodeEscaper(Escaper escaper) {
    Preconditions.checkNotNull(escaper);
    if (escaper instanceof UnicodeEscaper)
      return (UnicodeEscaper)escaper; 
    if (escaper instanceof CharEscaper)
      return wrap((CharEscaper)escaper); 
    throw new IllegalArgumentException("Cannot create a UnicodeEscaper from: " + escaper
        .getClass().getName());
  }
  
  @CheckForNull
  public static String computeReplacement(CharEscaper escaper, char c) { return stringOrNull(escaper.escape(c)); }
  
  @CheckForNull
  public static String computeReplacement(UnicodeEscaper escaper, int cp) { return stringOrNull(escaper.escape(cp)); }
  
  @CheckForNull
  private static String stringOrNull(@CheckForNull char[] in) { return (in == null) ? null : new String(in); }
  
  private static UnicodeEscaper wrap(CharEscaper escaper) { return new Object(escaper); }
}
