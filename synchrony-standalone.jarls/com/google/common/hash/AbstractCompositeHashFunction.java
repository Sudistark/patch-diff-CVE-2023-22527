package com.google.common.hash;

import com.google.common.base.Preconditions;
import com.google.errorprone.annotations.Immutable;

@Immutable
@ElementTypesAreNonnullByDefault
abstract class AbstractCompositeHashFunction extends AbstractHashFunction {
  final HashFunction[] functions;
  
  private static final long serialVersionUID = 0L;
  
  AbstractCompositeHashFunction(HashFunction... functions) {
    for (HashFunction function : functions)
      Preconditions.checkNotNull(function); 
    this.functions = functions;
  }
  
  abstract HashCode makeHash(Hasher[] paramArrayOfHasher);
  
  public Hasher newHasher() {
    Hasher[] hashers = new Hasher[this.functions.length];
    for (int i = 0; i < hashers.length; i++)
      hashers[i] = this.functions[i].newHasher(); 
    return fromHashers(hashers);
  }
  
  public Hasher newHasher(int expectedInputSize) {
    Preconditions.checkArgument((expectedInputSize >= 0));
    Hasher[] hashers = new Hasher[this.functions.length];
    for (int i = 0; i < hashers.length; i++)
      hashers[i] = this.functions[i].newHasher(expectedInputSize); 
    return fromHashers(hashers);
  }
  
  private Hasher fromHashers(Hasher[] hashers) { return new Object(this, hashers); }
}
