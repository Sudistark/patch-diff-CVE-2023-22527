package com.google.common.io;

import com.google.common.annotations.GwtIncompatible;
import com.google.common.annotations.J2ktIncompatible;
import com.google.common.base.Preconditions;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import java.io.BufferedOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.charset.Charset;

@ElementTypesAreNonnullByDefault
@J2ktIncompatible
@GwtIncompatible
public abstract class ByteSink {
  public CharSink asCharSink(Charset charset) { return new AsCharSink(this, charset, null); }
  
  public abstract OutputStream openStream() throws IOException;
  
  public OutputStream openBufferedStream() throws IOException {
    OutputStream out = openStream();
    return (out instanceof BufferedOutputStream) ? 
      (BufferedOutputStream)out : 
      new BufferedOutputStream(out);
  }
  
  public void write(byte[] bytes) throws IOException {
    Preconditions.checkNotNull(bytes);
    closer = Closer.create();
    try {
      OutputStream out = (OutputStream)closer.register(openStream());
      out.write(bytes);
      out.flush();
    } catch (Throwable e) {
      throw closer.rethrow(e);
    } finally {
      closer.close();
    } 
  }
  
  @CanIgnoreReturnValue
  public long writeFrom(InputStream input) throws IOException {
    Preconditions.checkNotNull(input);
    closer = Closer.create();
    try {
      OutputStream out = (OutputStream)closer.register(openStream());
      long written = ByteStreams.copy(input, out);
      out.flush();
      return written;
    } catch (Throwable e) {
      throw closer.rethrow(e);
    } finally {
      closer.close();
    } 
  }
}
