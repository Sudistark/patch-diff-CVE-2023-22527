package com.google.common.util.concurrent;

import com.google.common.annotations.GwtIncompatible;
import com.google.common.annotations.J2ktIncompatible;
import com.google.common.base.MoreObjects;
import com.google.common.base.Preconditions;
import com.google.common.base.Predicates;
import com.google.common.collect.Collections2;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableMultimap;
import com.google.common.collect.ImmutableSetMultimap;
import com.google.common.collect.Maps;
import com.google.common.collect.UnmodifiableIterator;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import java.lang.ref.WeakReference;
import java.time.Duration;
import java.util.concurrent.Executor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.logging.Level;
import java.util.logging.Logger;

@ElementTypesAreNonnullByDefault
@J2ktIncompatible
@GwtIncompatible
public final class ServiceManager implements ServiceManagerBridge {
  private static final Logger logger = Logger.getLogger(ServiceManager.class.getName());
  
  private static final ListenerCallQueue.Event<Listener> HEALTHY_EVENT = new Object();
  
  private static final ListenerCallQueue.Event<Listener> STOPPED_EVENT = new Object();
  
  private final ServiceManagerState state;
  
  private final ImmutableList<Service> services;
  
  public ServiceManager(Iterable<? extends Service> services) {
    ImmutableList<Service> copy = ImmutableList.copyOf(services);
    if (copy.isEmpty()) {
      logger.log(Level.WARNING, "ServiceManager configured with no services.  Is your application configured properly?", new EmptyServiceManagerWarning(null));
      copy = ImmutableList.of(new NoOpService(null));
    } 
    this.state = new ServiceManagerState(copy);
    this.services = copy;
    WeakReference<ServiceManagerState> stateReference = new WeakReference<ServiceManagerState>(this.state);
    for (UnmodifiableIterator unmodifiableIterator = copy.iterator(); unmodifiableIterator.hasNext(); ) {
      Service service = (Service)unmodifiableIterator.next();
      service.addListener(new ServiceListener(service, stateReference), MoreExecutors.directExecutor());
      Preconditions.checkArgument((service.state() == Service.State.NEW), "Can only manage NEW services, %s", service);
    } 
    this.state.markReady();
  }
  
  public void addListener(Listener listener, Executor executor) { this.state.addListener(listener, executor); }
  
  @CanIgnoreReturnValue
  public ServiceManager startAsync() {
    UnmodifiableIterator unmodifiableIterator;
    for (unmodifiableIterator = this.services.iterator(); unmodifiableIterator.hasNext(); ) {
      Service service = (Service)unmodifiableIterator.next();
      Preconditions.checkState((service.state() == Service.State.NEW), "Not all services are NEW, cannot start %s", this);
    } 
    for (unmodifiableIterator = this.services.iterator(); unmodifiableIterator.hasNext(); ) {
      Service service = (Service)unmodifiableIterator.next();
      try {
        this.state.tryStartTiming(service);
        service.startAsync();
      } catch (IllegalStateException e) {
        logger.log(Level.WARNING, "Unable to start Service " + service, e);
      } 
    } 
    return this;
  }
  
  public void awaitHealthy() { this.state.awaitHealthy(); }
  
  public void awaitHealthy(Duration timeout) throws TimeoutException { awaitHealthy(Internal.toNanosSaturated(timeout), TimeUnit.NANOSECONDS); }
  
  public void awaitHealthy(long timeout, TimeUnit unit) throws TimeoutException { this.state.awaitHealthy(timeout, unit); }
  
  @CanIgnoreReturnValue
  public ServiceManager stopAsync() {
    for (UnmodifiableIterator unmodifiableIterator = this.services.iterator(); unmodifiableIterator.hasNext(); ) {
      Service service = (Service)unmodifiableIterator.next();
      service.stopAsync();
    } 
    return this;
  }
  
  public void awaitStopped() { this.state.awaitStopped(); }
  
  public void awaitStopped(Duration timeout) throws TimeoutException { awaitStopped(Internal.toNanosSaturated(timeout), TimeUnit.NANOSECONDS); }
  
  public void awaitStopped(long timeout, TimeUnit unit) throws TimeoutException { this.state.awaitStopped(timeout, unit); }
  
  public boolean isHealthy() {
    for (UnmodifiableIterator unmodifiableIterator = this.services.iterator(); unmodifiableIterator.hasNext(); ) {
      Service service = (Service)unmodifiableIterator.next();
      if (!service.isRunning())
        return false; 
    } 
    return true;
  }
  
  public ImmutableSetMultimap<Service.State, Service> servicesByState() { return this.state.servicesByState(); }
  
  public ImmutableMap<Service, Long> startupTimes() { return this.state.startupTimes(); }
  
  public ImmutableMap<Service, Duration> startupDurations() {
    return ImmutableMap.copyOf(
        Maps.transformValues(startupTimes(), Duration::ofMillis));
  }
  
  public String toString() { return MoreObjects.toStringHelper(ServiceManager.class)
      .add("services", Collections2.filter(this.services, Predicates.not(Predicates.instanceOf(NoOpService.class))))
      .toString(); }
}
