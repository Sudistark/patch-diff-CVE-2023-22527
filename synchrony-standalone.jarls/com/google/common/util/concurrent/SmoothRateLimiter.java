package com.google.common.util.concurrent;

import com.google.common.annotations.GwtIncompatible;
import com.google.common.annotations.J2ktIncompatible;
import com.google.common.math.LongMath;
import java.util.concurrent.TimeUnit;

@ElementTypesAreNonnullByDefault
@J2ktIncompatible
@GwtIncompatible
abstract class SmoothRateLimiter extends RateLimiter {
  double storedPermits;
  
  double maxPermits;
  
  double stableIntervalMicros;
  
  private long nextFreeTicketMicros = 0L;
  
  private SmoothRateLimiter(RateLimiter.SleepingStopwatch stopwatch) { super(stopwatch); }
  
  final void doSetRate(double permitsPerSecond, long nowMicros) {
    resync(nowMicros);
    double stableIntervalMicros = TimeUnit.SECONDS.toMicros(1L) / permitsPerSecond;
    this.stableIntervalMicros = stableIntervalMicros;
    doSetRate(permitsPerSecond, stableIntervalMicros);
  }
  
  final double doGetRate() { return TimeUnit.SECONDS.toMicros(1L) / this.stableIntervalMicros; }
  
  final long queryEarliestAvailable(long nowMicros) { return this.nextFreeTicketMicros; }
  
  final long reserveEarliestAvailable(int requiredPermits, long nowMicros) {
    resync(nowMicros);
    long returnValue = this.nextFreeTicketMicros;
    double storedPermitsToSpend = Math.min(requiredPermits, this.storedPermits);
    double freshPermits = requiredPermits - storedPermitsToSpend;
    long waitMicros = storedPermitsToWaitTime(this.storedPermits, storedPermitsToSpend) + (long)(freshPermits * this.stableIntervalMicros);
    this.nextFreeTicketMicros = LongMath.saturatedAdd(this.nextFreeTicketMicros, waitMicros);
    this.storedPermits -= storedPermitsToSpend;
    return returnValue;
  }
  
  void resync(long nowMicros) {
    if (nowMicros > this.nextFreeTicketMicros) {
      double newPermits = (nowMicros - this.nextFreeTicketMicros) / coolDownIntervalMicros();
      this.storedPermits = Math.min(this.maxPermits, this.storedPermits + newPermits);
      this.nextFreeTicketMicros = nowMicros;
    } 
  }
  
  abstract void doSetRate(double paramDouble1, double paramDouble2);
  
  abstract long storedPermitsToWaitTime(double paramDouble1, double paramDouble2);
  
  abstract double coolDownIntervalMicros();
}
