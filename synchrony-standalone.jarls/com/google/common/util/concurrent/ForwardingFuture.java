package com.google.common.util.concurrent;

import com.google.common.annotations.GwtCompatible;
import com.google.common.collect.ForwardingObject;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

@ElementTypesAreNonnullByDefault
@GwtCompatible
public abstract class ForwardingFuture<V> extends ForwardingObject implements Future<V> {
  @CanIgnoreReturnValue
  public boolean cancel(boolean mayInterruptIfRunning) { return delegate().cancel(mayInterruptIfRunning); }
  
  public boolean isCancelled() { return delegate().isCancelled(); }
  
  public boolean isDone() { return delegate().isDone(); }
  
  @ParametricNullness
  @CanIgnoreReturnValue
  public V get() throws InterruptedException, ExecutionException { return (V)delegate().get(); }
  
  @ParametricNullness
  @CanIgnoreReturnValue
  public V get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException { return (V)delegate().get(timeout, unit); }
  
  protected abstract Future<? extends V> delegate();
}
