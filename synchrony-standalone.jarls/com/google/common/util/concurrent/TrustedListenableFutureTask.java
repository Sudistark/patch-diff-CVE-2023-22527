package com.google.common.util.concurrent;

import com.google.common.annotations.GwtCompatible;
import java.util.concurrent.Callable;
import java.util.concurrent.Executors;
import java.util.concurrent.RunnableFuture;
import javax.annotation.CheckForNull;

@ElementTypesAreNonnullByDefault
@GwtCompatible
class TrustedListenableFutureTask<V> extends FluentFuture.TrustedFuture<V> implements RunnableFuture<V> {
  static <V> TrustedListenableFutureTask<V> create(AsyncCallable<V> callable) { return new TrustedListenableFutureTask(callable); }
  
  static <V> TrustedListenableFutureTask<V> create(Callable<V> callable) { return new TrustedListenableFutureTask(callable); }
  
  static <V> TrustedListenableFutureTask<V> create(Runnable runnable, @ParametricNullness V result) { return new TrustedListenableFutureTask(Executors.callable(runnable, result)); }
  
  TrustedListenableFutureTask(Callable<V> callable) { this.task = new TrustedFutureInterruptibleTask(this, callable); }
  
  TrustedListenableFutureTask(AsyncCallable<V> callable) { this.task = new TrustedFutureInterruptibleAsyncTask(this, callable); }
  
  public void run() {
    InterruptibleTask<?> localTask = this.task;
    if (localTask != null)
      localTask.run(); 
    this.task = null;
  }
  
  protected void afterDone() {
    super.afterDone();
    if (wasInterrupted()) {
      InterruptibleTask<?> localTask = this.task;
      if (localTask != null)
        localTask.interruptTask(); 
    } 
    this.task = null;
  }
  
  @CheckForNull
  protected String pendingToString() {
    InterruptibleTask<?> localTask = this.task;
    if (localTask != null)
      return "task=[" + localTask + "]"; 
    return super.pendingToString();
  }
}
