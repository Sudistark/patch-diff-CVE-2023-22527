package com.google.common.util.concurrent;

import com.google.common.annotations.J2ktIncompatible;
import com.google.common.base.Preconditions;
import java.util.concurrent.Callable;
import java.util.concurrent.Executor;
import java.util.concurrent.atomic.AtomicReference;

@ElementTypesAreNonnullByDefault
@J2ktIncompatible
public final class ExecutionSequencer {
  public static ExecutionSequencer create() { return new ExecutionSequencer(); }
  
  private final AtomicReference<ListenableFuture<Void>> ref = new AtomicReference(
      Futures.immediateVoidFuture());
  
  private ThreadConfinedTaskQueue latestTaskQueue = new ThreadConfinedTaskQueue(null);
  
  public <T> ListenableFuture<T> submit(Callable<T> callable, Executor executor) {
    Preconditions.checkNotNull(callable);
    Preconditions.checkNotNull(executor);
    return submitAsync(new Object(this, callable), executor);
  }
  
  public <T> ListenableFuture<T> submitAsync(AsyncCallable<T> callable, Executor executor) {
    Preconditions.checkNotNull(callable);
    Preconditions.checkNotNull(executor);
    TaskNonReentrantExecutor taskExecutor = new TaskNonReentrantExecutor(executor, this, null);
    Object object = new Object(this, taskExecutor, callable);
    SettableFuture<Void> newFuture = SettableFuture.create();
    ListenableFuture<Void> oldFuture = (ListenableFuture)this.ref.getAndSet(newFuture);
    TrustedListenableFutureTask<T> taskFuture = TrustedListenableFutureTask.create(object);
    oldFuture.addListener(taskFuture, taskExecutor);
    ListenableFuture<T> outputFuture = Futures.nonCancellationPropagating(taskFuture);
    Runnable listener = () -> {
        if (taskFuture.isDone()) {
          newFuture.setFuture(oldFuture);
        } else if (outputFuture.isCancelled() && TaskNonReentrantExecutor.access$400(taskExecutor)) {
          taskFuture.cancel(false);
        } 
      };
    outputFuture.addListener(listener, MoreExecutors.directExecutor());
    taskFuture.addListener(listener, MoreExecutors.directExecutor());
    return outputFuture;
  }
}
