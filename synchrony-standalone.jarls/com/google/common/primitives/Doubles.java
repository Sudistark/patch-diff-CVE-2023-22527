package com.google.common.primitives;

import com.google.common.annotations.GwtCompatible;
import com.google.common.annotations.GwtIncompatible;
import com.google.common.annotations.J2ktIncompatible;
import com.google.common.base.Converter;
import com.google.common.base.Preconditions;
import com.google.common.base.Strings;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.regex.Pattern;
import javax.annotation.CheckForNull;

@ElementTypesAreNonnullByDefault
@GwtCompatible(emulated = true)
public final class Doubles extends DoublesMethodsForWeb {
  public static final int BYTES = 8;
  
  public static int hashCode(double value) { return Double.valueOf(value).hashCode(); }
  
  public static int compare(double a, double b) { return Double.compare(a, b); }
  
  public static boolean isFinite(double value) { return (Double.NEGATIVE_INFINITY < value && value < Double.POSITIVE_INFINITY); }
  
  public static boolean contains(double[] array, double target) {
    for (double value : array) {
      if (value == target)
        return true; 
    } 
    return false;
  }
  
  public static int indexOf(double[] array, double target) { return indexOf(array, target, 0, array.length); }
  
  private static int indexOf(double[] array, double target, int start, int end) {
    for (int i = start; i < end; i++) {
      if (array[i] == target)
        return i; 
    } 
    return -1;
  }
  
  public static int indexOf(double[] array, double[] target) {
    Preconditions.checkNotNull(array, "array");
    Preconditions.checkNotNull(target, "target");
    if (target.length == 0)
      return 0; 
    for (int i = 0; i < array.length - target.length + 1; i++) {
      int j = 0;
      while (true) {
        if (j < target.length) {
          if (array[i + j] != target[j])
            break; 
          j++;
          continue;
        } 
        return i;
      } 
    } 
    return -1;
  }
  
  public static int lastIndexOf(double[] array, double target) { return lastIndexOf(array, target, 0, array.length); }
  
  private static int lastIndexOf(double[] array, double target, int start, int end) {
    for (int i = end - 1; i >= start; i--) {
      if (array[i] == target)
        return i; 
    } 
    return -1;
  }
  
  @GwtIncompatible("Available in GWT! Annotation is to avoid conflict with GWT specialization of base class.")
  public static double min(double... array) {
    Preconditions.checkArgument((array.length > 0));
    double min = array[0];
    for (int i = 1; i < array.length; i++)
      min = Math.min(min, array[i]); 
    return min;
  }
  
  @GwtIncompatible("Available in GWT! Annotation is to avoid conflict with GWT specialization of base class.")
  public static double max(double... array) {
    Preconditions.checkArgument((array.length > 0));
    double max = array[0];
    for (int i = 1; i < array.length; i++)
      max = Math.max(max, array[i]); 
    return max;
  }
  
  public static double constrainToRange(double value, double min, double max) {
    if (min <= max)
      return Math.min(Math.max(value, min), max); 
    throw new IllegalArgumentException(
        Strings.lenientFormat("min (%s) must be less than or equal to max (%s)", new Object[] { Double.valueOf(min), Double.valueOf(max) }));
  }
  
  public static double[] concat(double[]... arrays) {
    int length = 0;
    for (double[] array : arrays)
      length += array.length; 
    double[] result = new double[length];
    int pos = 0;
    for (double[] array : arrays) {
      System.arraycopy(array, 0, result, pos, array.length);
      pos += array.length;
    } 
    return result;
  }
  
  public static Converter<String, Double> stringConverter() { return DoubleConverter.INSTANCE; }
  
  public static double[] ensureCapacity(double[] array, int minLength, int padding) {
    Preconditions.checkArgument((minLength >= 0), "Invalid minLength: %s", minLength);
    Preconditions.checkArgument((padding >= 0), "Invalid padding: %s", padding);
    return (array.length < minLength) ? Arrays.copyOf(array, minLength + padding) : array;
  }
  
  public static String join(String separator, double... array) {
    Preconditions.checkNotNull(separator);
    if (array.length == 0)
      return ""; 
    StringBuilder builder = new StringBuilder(array.length * 12);
    builder.append(array[0]);
    for (int i = 1; i < array.length; i++)
      builder.append(separator).append(array[i]); 
    return builder.toString();
  }
  
  public static Comparator<double[]> lexicographicalComparator() { return LexicographicalComparator.INSTANCE; }
  
  public static void sortDescending(double[] array) {
    Preconditions.checkNotNull(array);
    sortDescending(array, 0, array.length);
  }
  
  public static void sortDescending(double[] array, int fromIndex, int toIndex) {
    Preconditions.checkNotNull(array);
    Preconditions.checkPositionIndexes(fromIndex, toIndex, array.length);
    Arrays.sort(array, fromIndex, toIndex);
    reverse(array, fromIndex, toIndex);
  }
  
  public static void reverse(double[] array) {
    Preconditions.checkNotNull(array);
    reverse(array, 0, array.length);
  }
  
  public static void reverse(double[] array, int fromIndex, int toIndex) {
    Preconditions.checkNotNull(array);
    Preconditions.checkPositionIndexes(fromIndex, toIndex, array.length);
    for (int i = fromIndex, j = toIndex - 1; i < j; i++, j--) {
      double tmp = array[i];
      array[i] = array[j];
      array[j] = tmp;
    } 
  }
  
  public static void rotate(double[] array, int distance) { rotate(array, distance, 0, array.length); }
  
  public static void rotate(double[] array, int distance, int fromIndex, int toIndex) {
    Preconditions.checkNotNull(array);
    Preconditions.checkPositionIndexes(fromIndex, toIndex, array.length);
    if (array.length <= 1)
      return; 
    int length = toIndex - fromIndex;
    int m = -distance % length;
    m = (m < 0) ? (m + length) : m;
    int newFirstIndex = m + fromIndex;
    if (newFirstIndex == fromIndex)
      return; 
    reverse(array, fromIndex, newFirstIndex);
    reverse(array, newFirstIndex, toIndex);
    reverse(array, fromIndex, toIndex);
  }
  
  public static double[] toArray(Collection<? extends Number> collection) {
    if (collection instanceof DoubleArrayAsList)
      return ((DoubleArrayAsList)collection).toDoubleArray(); 
    Object[] boxedArray = collection.toArray();
    int len = boxedArray.length;
    double[] array = new double[len];
    for (int i = 0; i < len; i++)
      array[i] = ((Number)Preconditions.checkNotNull(boxedArray[i])).doubleValue(); 
    return array;
  }
  
  public static List<Double> asList(double... backingArray) {
    if (backingArray.length == 0)
      return Collections.emptyList(); 
    return new DoubleArrayAsList(backingArray);
  }
  
  @J2ktIncompatible
  @GwtIncompatible
  static final Pattern FLOATING_POINT_PATTERN = fpPattern();
  
  @GwtIncompatible
  private static Pattern fpPattern() {
    decimal = "(?:\\d+#(?:\\.\\d*#)?|\\.\\d+#)";
    String completeDec = decimal + "(?:[eE][+-]?\\d+#)?[fFdD]?";
    String hex = "(?:[0-9a-fA-F]+#(?:\\.[0-9a-fA-F]*#)?|\\.[0-9a-fA-F]+#)";
    String completeHex = "0[xX]" + hex + "[pP][+-]?\\d+#[fFdD]?";
    String fpPattern = "[+-]?(?:NaN|Infinity|" + completeDec + "|" + completeHex + ")";
    fpPattern = fpPattern.replace("#", "+");
    return 
      
      Pattern.compile(fpPattern);
  }
  
  @CheckForNull
  @J2ktIncompatible
  @GwtIncompatible
  public static Double tryParse(String string) {
    if (FLOATING_POINT_PATTERN.matcher(string).matches())
      try {
        return Double.valueOf(Double.parseDouble(string));
      } catch (NumberFormatException numberFormatException) {} 
    return null;
  }
}
