package com.google.common.primitives;

import com.google.common.annotations.GwtCompatible;
import com.google.common.base.Preconditions;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

@ElementTypesAreNonnullByDefault
@GwtCompatible
public final class Bytes {
  public static int hashCode(byte value) { return value; }
  
  public static boolean contains(byte[] array, byte target) {
    for (byte value : array) {
      if (value == target)
        return true; 
    } 
    return false;
  }
  
  public static int indexOf(byte[] array, byte target) { return indexOf(array, target, 0, array.length); }
  
  private static int indexOf(byte[] array, byte target, int start, int end) {
    for (int i = start; i < end; i++) {
      if (array[i] == target)
        return i; 
    } 
    return -1;
  }
  
  public static int indexOf(byte[] array, byte[] target) {
    Preconditions.checkNotNull(array, "array");
    Preconditions.checkNotNull(target, "target");
    if (target.length == 0)
      return 0; 
    for (int i = 0; i < array.length - target.length + 1; i++) {
      int j = 0;
      while (true) {
        if (j < target.length) {
          if (array[i + j] != target[j])
            break; 
          j++;
          continue;
        } 
        return i;
      } 
    } 
    return -1;
  }
  
  public static int lastIndexOf(byte[] array, byte target) { return lastIndexOf(array, target, 0, array.length); }
  
  private static int lastIndexOf(byte[] array, byte target, int start, int end) {
    for (int i = end - 1; i >= start; i--) {
      if (array[i] == target)
        return i; 
    } 
    return -1;
  }
  
  public static byte[] concat(byte[]... arrays) {
    int length = 0;
    for (byte[] array : arrays)
      length += array.length; 
    byte[] result = new byte[length];
    int pos = 0;
    for (byte[] array : arrays) {
      System.arraycopy(array, 0, result, pos, array.length);
      pos += array.length;
    } 
    return result;
  }
  
  public static byte[] ensureCapacity(byte[] array, int minLength, int padding) {
    Preconditions.checkArgument((minLength >= 0), "Invalid minLength: %s", minLength);
    Preconditions.checkArgument((padding >= 0), "Invalid padding: %s", padding);
    return (array.length < minLength) ? Arrays.copyOf(array, minLength + padding) : array;
  }
  
  public static byte[] toArray(Collection<? extends Number> collection) {
    if (collection instanceof ByteArrayAsList)
      return ((ByteArrayAsList)collection).toByteArray(); 
    Object[] boxedArray = collection.toArray();
    int len = boxedArray.length;
    byte[] array = new byte[len];
    for (int i = 0; i < len; i++)
      array[i] = ((Number)Preconditions.checkNotNull(boxedArray[i])).byteValue(); 
    return array;
  }
  
  public static List<Byte> asList(byte... backingArray) {
    if (backingArray.length == 0)
      return Collections.emptyList(); 
    return new ByteArrayAsList(backingArray);
  }
  
  public static void reverse(byte[] array) {
    Preconditions.checkNotNull(array);
    reverse(array, 0, array.length);
  }
  
  public static void reverse(byte[] array, int fromIndex, int toIndex) {
    Preconditions.checkNotNull(array);
    Preconditions.checkPositionIndexes(fromIndex, toIndex, array.length);
    for (int i = fromIndex, j = toIndex - 1; i < j; i++, j--) {
      byte tmp = array[i];
      array[i] = array[j];
      array[j] = tmp;
    } 
  }
  
  public static void rotate(byte[] array, int distance) { rotate(array, distance, 0, array.length); }
  
  public static void rotate(byte[] array, int distance, int fromIndex, int toIndex) {
    Preconditions.checkNotNull(array);
    Preconditions.checkPositionIndexes(fromIndex, toIndex, array.length);
    if (array.length <= 1)
      return; 
    int length = toIndex - fromIndex;
    int m = -distance % length;
    m = (m < 0) ? (m + length) : m;
    int newFirstIndex = m + fromIndex;
    if (newFirstIndex == fromIndex)
      return; 
    reverse(array, fromIndex, newFirstIndex);
    reverse(array, newFirstIndex, toIndex);
    reverse(array, fromIndex, toIndex);
  }
}
