package com.google.common.collect;

import com.google.common.annotations.GwtCompatible;
import com.google.common.base.Preconditions;
import java.util.Comparator;

@ElementTypesAreNonnullByDefault
@GwtCompatible
public abstract class MultimapBuilder<K0, V0> extends Object {
  private static final int DEFAULT_EXPECTED_KEYS = 8;
  
  private MultimapBuilder() {}
  
  public static MultimapBuilderWithKeys<Object> hashKeys() { return hashKeys(8); }
  
  public static MultimapBuilderWithKeys<Object> hashKeys(int expectedKeys) {
    CollectPreconditions.checkNonnegative(expectedKeys, "expectedKeys");
    return new Object(expectedKeys);
  }
  
  public static MultimapBuilderWithKeys<Object> linkedHashKeys() { return linkedHashKeys(8); }
  
  public static MultimapBuilderWithKeys<Object> linkedHashKeys(int expectedKeys) {
    CollectPreconditions.checkNonnegative(expectedKeys, "expectedKeys");
    return new Object(expectedKeys);
  }
  
  public static MultimapBuilderWithKeys<Comparable> treeKeys() { return treeKeys(Ordering.natural()); }
  
  public static <K0> MultimapBuilderWithKeys<K0> treeKeys(Comparator<K0> comparator) {
    Preconditions.checkNotNull(comparator);
    return new Object(comparator);
  }
  
  public static <K0 extends Enum<K0>> MultimapBuilderWithKeys<K0> enumKeys(Class<K0> keyClass) {
    Preconditions.checkNotNull(keyClass);
    return new Object(keyClass);
  }
  
  public <K extends K0, V extends V0> Multimap<K, V> build(Multimap<? extends K, ? extends V> multimap) {
    Multimap<K, V> result = build();
    result.putAll(multimap);
    return result;
  }
  
  public abstract <K extends K0, V extends V0> Multimap<K, V> build();
}
