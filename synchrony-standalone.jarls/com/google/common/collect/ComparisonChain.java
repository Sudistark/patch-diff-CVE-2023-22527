package com.google.common.collect;

import com.google.common.annotations.GwtCompatible;
import java.util.Comparator;

@ElementTypesAreNonnullByDefault
@GwtCompatible
public abstract class ComparisonChain {
  private ComparisonChain() {}
  
  public static ComparisonChain start() { return ACTIVE; }
  
  private static final ComparisonChain ACTIVE = new Object();
  
  private static final ComparisonChain LESS = new InactiveComparisonChain(-1);
  
  private static final ComparisonChain GREATER = new InactiveComparisonChain(1);
  
  @Deprecated
  public final ComparisonChain compare(Boolean left, Boolean right) { return compareFalseFirst(left.booleanValue(), right.booleanValue()); }
  
  public abstract ComparisonChain compare(Comparable<?> paramComparable1, Comparable<?> paramComparable2);
  
  public abstract <T> ComparisonChain compare(@ParametricNullness T paramT1, @ParametricNullness T paramT2, Comparator<T> paramComparator);
  
  public abstract ComparisonChain compare(int paramInt1, int paramInt2);
  
  public abstract ComparisonChain compare(long paramLong1, long paramLong2);
  
  public abstract ComparisonChain compare(float paramFloat1, float paramFloat2);
  
  public abstract ComparisonChain compare(double paramDouble1, double paramDouble2);
  
  public abstract ComparisonChain compareTrueFirst(boolean paramBoolean1, boolean paramBoolean2);
  
  public abstract ComparisonChain compareFalseFirst(boolean paramBoolean1, boolean paramBoolean2);
  
  public abstract int result();
}
