package com.google.common.collect;

import com.google.common.annotations.GwtCompatible;
import com.google.common.base.Preconditions;
import java.util.Comparator;
import java.util.Map;
import java.util.SortedMap;
import javax.annotation.CheckForNull;

@ElementTypesAreNonnullByDefault
@GwtCompatible
public abstract class ForwardingSortedMap<K, V> extends ForwardingMap<K, V> implements SortedMap<K, V> {
  @CheckForNull
  public Comparator<? super K> comparator() { return delegate().comparator(); }
  
  @ParametricNullness
  public K firstKey() { return (K)delegate().firstKey(); }
  
  public SortedMap<K, V> headMap(@ParametricNullness K toKey) { return delegate().headMap(toKey); }
  
  @ParametricNullness
  public K lastKey() { return (K)delegate().lastKey(); }
  
  public SortedMap<K, V> subMap(@ParametricNullness K fromKey, @ParametricNullness K toKey) { return delegate().subMap(fromKey, toKey); }
  
  public SortedMap<K, V> tailMap(@ParametricNullness K fromKey) { return delegate().tailMap(fromKey); }
  
  static int unsafeCompare(@CheckForNull Comparator<?> comparator, @CheckForNull Object o1, @CheckForNull Object o2) {
    if (comparator == null)
      return ((Comparable)o1).compareTo(o2); 
    return comparator.compare(o1, o2);
  }
  
  protected boolean standardContainsKey(@CheckForNull Object key) {
    try {
      ForwardingSortedMap<K, V> forwardingSortedMap = this;
      Object ceilingKey = forwardingSortedMap.tailMap(key).firstKey();
      return (unsafeCompare(comparator(), ceilingKey, key) == 0);
    } catch (ClassCastException|java.util.NoSuchElementException|NullPointerException e) {
      return false;
    } 
  }
  
  protected SortedMap<K, V> standardSubMap(K fromKey, K toKey) {
    Preconditions.checkArgument((unsafeCompare(comparator(), fromKey, toKey) <= 0), "fromKey must be <= toKey");
    return tailMap(fromKey).headMap(toKey);
  }
  
  protected abstract SortedMap<K, V> delegate();
}
