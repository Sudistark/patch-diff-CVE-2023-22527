package com.google.common.collect;

import com.google.common.annotations.GwtCompatible;
import com.google.common.annotations.GwtIncompatible;
import com.google.common.base.Function;
import com.google.common.base.Optional;
import com.google.common.base.Preconditions;
import com.google.common.base.Predicate;
import com.google.common.base.Predicates;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import java.util.Collection;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Set;
import javax.annotation.CheckForNull;

@ElementTypesAreNonnullByDefault
@GwtCompatible(emulated = true)
public final class Iterables {
  public static <T> Iterable<T> unmodifiableIterable(Iterable<? extends T> iterable) {
    Preconditions.checkNotNull(iterable);
    if (iterable instanceof UnmodifiableIterable || iterable instanceof ImmutableCollection)
      return iterable; 
    return new UnmodifiableIterable(iterable, null);
  }
  
  @Deprecated
  public static <E> Iterable<E> unmodifiableIterable(ImmutableCollection<E> iterable) { return (Iterable)Preconditions.checkNotNull(iterable); }
  
  public static int size(Iterable<?> iterable) {
    return (iterable instanceof Collection) ? (
      (Collection)iterable).size() : 
      Iterators.size(iterable.iterator());
  }
  
  public static boolean contains(Iterable<? extends Object> iterable, @CheckForNull Object element) {
    if (iterable instanceof Collection) {
      Collection<?> collection = (Collection)iterable;
      return Collections2.safeContains(collection, element);
    } 
    return Iterators.contains(iterable.iterator(), element);
  }
  
  @CanIgnoreReturnValue
  public static boolean removeAll(Iterable<?> removeFrom, Collection<?> elementsToRemove) {
    return (removeFrom instanceof Collection) ? (
      (Collection)removeFrom).removeAll((Collection)Preconditions.checkNotNull(elementsToRemove)) : 
      Iterators.removeAll(removeFrom.iterator(), elementsToRemove);
  }
  
  @CanIgnoreReturnValue
  public static boolean retainAll(Iterable<?> removeFrom, Collection<?> elementsToRetain) {
    return (removeFrom instanceof Collection) ? (
      (Collection)removeFrom).retainAll((Collection)Preconditions.checkNotNull(elementsToRetain)) : 
      Iterators.retainAll(removeFrom.iterator(), elementsToRetain);
  }
  
  @CanIgnoreReturnValue
  public static <T> boolean removeIf(Iterable<T> removeFrom, Predicate<? super T> predicate) {
    if (removeFrom instanceof Collection)
      return ((Collection)removeFrom).removeIf(predicate); 
    return Iterators.removeIf(removeFrom.iterator(), predicate);
  }
  
  @CheckForNull
  static <T> T removeFirstMatching(Iterable<T> removeFrom, Predicate<? super T> predicate) {
    Preconditions.checkNotNull(predicate);
    Iterator<T> iterator = removeFrom.iterator();
    while (iterator.hasNext()) {
      T next = (T)iterator.next();
      if (predicate.apply(next)) {
        iterator.remove();
        return next;
      } 
    } 
    return null;
  }
  
  public static boolean elementsEqual(Iterable<?> iterable1, Iterable<?> iterable2) {
    if (iterable1 instanceof Collection && iterable2 instanceof Collection) {
      Collection<?> collection1 = (Collection)iterable1;
      Collection<?> collection2 = (Collection)iterable2;
      if (collection1.size() != collection2.size())
        return false; 
    } 
    return Iterators.elementsEqual(iterable1.iterator(), iterable2.iterator());
  }
  
  public static String toString(Iterable<?> iterable) { return Iterators.toString(iterable.iterator()); }
  
  @ParametricNullness
  public static <T> T getOnlyElement(Iterable<T> iterable) { return (T)Iterators.getOnlyElement(iterable.iterator()); }
  
  @ParametricNullness
  public static <T> T getOnlyElement(Iterable<? extends T> iterable, @ParametricNullness T defaultValue) { return (T)Iterators.getOnlyElement(iterable.iterator(), defaultValue); }
  
  @GwtIncompatible
  public static <T> T[] toArray(Iterable<? extends T> iterable, Class<T> type) { return (T[])toArray(iterable, ObjectArrays.newArray(type, 0)); }
  
  static <T> T[] toArray(Iterable<? extends T> iterable, T[] array) {
    Collection<? extends T> collection = castOrCopyToCollection(iterable);
    return (T[])collection.toArray(array);
  }
  
  static Object[] toArray(Iterable<?> iterable) { return castOrCopyToCollection(iterable).toArray(); }
  
  private static <E> Collection<E> castOrCopyToCollection(Iterable<E> iterable) {
    return (iterable instanceof Collection) ? 
      (Collection)iterable : 
      Lists.newArrayList(iterable.iterator());
  }
  
  @CanIgnoreReturnValue
  public static <T> boolean addAll(Collection<T> addTo, Iterable<? extends T> elementsToAdd) {
    if (elementsToAdd instanceof Collection) {
      Collection<? extends T> c = (Collection)elementsToAdd;
      return addTo.addAll(c);
    } 
    return Iterators.addAll(addTo, ((Iterable)Preconditions.checkNotNull(elementsToAdd)).iterator());
  }
  
  public static int frequency(Iterable<?> iterable, @CheckForNull Object element) {
    if (iterable instanceof Multiset)
      return ((Multiset)iterable).count(element); 
    if (iterable instanceof Set)
      return ((Set)iterable).contains(element) ? 1 : 0; 
    return Iterators.frequency(iterable.iterator(), element);
  }
  
  public static <T> Iterable<T> cycle(Iterable<T> iterable) {
    Preconditions.checkNotNull(iterable);
    return new Object(iterable);
  }
  
  @SafeVarargs
  public static <T> Iterable<T> cycle(T... elements) { return cycle(Lists.newArrayList(elements)); }
  
  public static <T> Iterable<T> concat(Iterable<? extends T> a, Iterable<? extends T> b) { return FluentIterable.concat(a, b); }
  
  public static <T> Iterable<T> concat(Iterable<? extends T> a, Iterable<? extends T> b, Iterable<? extends T> c) { return FluentIterable.concat(a, b, c); }
  
  public static <T> Iterable<T> concat(Iterable<? extends T> a, Iterable<? extends T> b, Iterable<? extends T> c, Iterable<? extends T> d) { return FluentIterable.concat(a, b, c, d); }
  
  @SafeVarargs
  public static <T> Iterable<T> concat(Iterable... inputs) { return FluentIterable.concat(inputs); }
  
  public static <T> Iterable<T> concat(Iterable<? extends Iterable<? extends T>> inputs) { return FluentIterable.concat(inputs); }
  
  public static <T> Iterable<List<T>> partition(Iterable<T> iterable, int size) {
    Preconditions.checkNotNull(iterable);
    Preconditions.checkArgument((size > 0));
    return new Object(iterable, size);
  }
  
  public static <T> Iterable<List<T>> paddedPartition(Iterable<T> iterable, int size) {
    Preconditions.checkNotNull(iterable);
    Preconditions.checkArgument((size > 0));
    return new Object(iterable, size);
  }
  
  public static <T> Iterable<T> filter(Iterable<T> unfiltered, Predicate<? super T> retainIfTrue) {
    Preconditions.checkNotNull(unfiltered);
    Preconditions.checkNotNull(retainIfTrue);
    return new Object(unfiltered, retainIfTrue);
  }
  
  @GwtIncompatible
  public static <T> Iterable<T> filter(Iterable<?> unfiltered, Class<T> desiredType) {
    Preconditions.checkNotNull(unfiltered);
    Preconditions.checkNotNull(desiredType);
    return filter(unfiltered, Predicates.instanceOf(desiredType));
  }
  
  public static <T> boolean any(Iterable<T> iterable, Predicate<? super T> predicate) { return Iterators.any(iterable.iterator(), predicate); }
  
  public static <T> boolean all(Iterable<T> iterable, Predicate<? super T> predicate) { return Iterators.all(iterable.iterator(), predicate); }
  
  @ParametricNullness
  public static <T> T find(Iterable<T> iterable, Predicate<? super T> predicate) { return (T)Iterators.find(iterable.iterator(), predicate); }
  
  @CheckForNull
  public static <T> T find(Iterable<? extends T> iterable, Predicate<? super T> predicate, @CheckForNull T defaultValue) { return (T)Iterators.find(iterable.iterator(), predicate, defaultValue); }
  
  public static <T> Optional<T> tryFind(Iterable<T> iterable, Predicate<? super T> predicate) { return Iterators.tryFind(iterable.iterator(), predicate); }
  
  public static <T> int indexOf(Iterable<T> iterable, Predicate<? super T> predicate) { return Iterators.indexOf(iterable.iterator(), predicate); }
  
  public static <F, T> Iterable<T> transform(Iterable<F> fromIterable, Function<? super F, ? extends T> function) {
    Preconditions.checkNotNull(fromIterable);
    Preconditions.checkNotNull(function);
    return new Object(fromIterable, function);
  }
  
  @ParametricNullness
  public static <T> T get(Iterable<T> iterable, int position) {
    Preconditions.checkNotNull(iterable);
    return (T)((iterable instanceof List) ? (
      (List)iterable).get(position) : 
      Iterators.get(iterable.iterator(), position));
  }
  
  @ParametricNullness
  public static <T> T get(Iterable<? extends T> iterable, int position, @ParametricNullness T defaultValue) {
    Preconditions.checkNotNull(iterable);
    Iterators.checkNonnegative(position);
    if (iterable instanceof List) {
      List<? extends T> list = Lists.cast(iterable);
      return (T)((position < list.size()) ? list.get(position) : defaultValue);
    } 
    Iterator<? extends T> iterator = iterable.iterator();
    Iterators.advance(iterator, position);
    return (T)Iterators.getNext(iterator, defaultValue);
  }
  
  @ParametricNullness
  public static <T> T getFirst(Iterable<? extends T> iterable, @ParametricNullness T defaultValue) { return (T)Iterators.getNext(iterable.iterator(), defaultValue); }
  
  @ParametricNullness
  public static <T> T getLast(Iterable<T> iterable) {
    if (iterable instanceof List) {
      List<T> list = (List)iterable;
      if (list.isEmpty())
        throw new NoSuchElementException(); 
      return (T)getLastInNonemptyList(list);
    } 
    return (T)Iterators.getLast(iterable.iterator());
  }
  
  @ParametricNullness
  public static <T> T getLast(Iterable<? extends T> iterable, @ParametricNullness T defaultValue) {
    if (iterable instanceof Collection) {
      Collection<? extends T> c = (Collection)iterable;
      if (c.isEmpty())
        return defaultValue; 
      if (iterable instanceof List)
        return (T)getLastInNonemptyList(Lists.cast(iterable)); 
    } 
    return (T)Iterators.getLast(iterable.iterator(), defaultValue);
  }
  
  @ParametricNullness
  private static <T> T getLastInNonemptyList(List<T> list) { return (T)list.get(list.size() - 1); }
  
  public static <T> Iterable<T> skip(Iterable<T> iterable, int numberToSkip) {
    Preconditions.checkNotNull(iterable);
    Preconditions.checkArgument((numberToSkip >= 0), "number to skip cannot be negative");
    return new Object(iterable, numberToSkip);
  }
  
  public static <T> Iterable<T> limit(Iterable<T> iterable, int limitSize) {
    Preconditions.checkNotNull(iterable);
    Preconditions.checkArgument((limitSize >= 0), "limit is negative");
    return new Object(iterable, limitSize);
  }
  
  public static <T> Iterable<T> consumingIterable(Iterable<T> iterable) {
    Preconditions.checkNotNull(iterable);
    return new Object(iterable);
  }
  
  public static boolean isEmpty(Iterable<?> iterable) {
    if (iterable instanceof Collection)
      return ((Collection)iterable).isEmpty(); 
    return !iterable.iterator().hasNext();
  }
  
  public static <T> Iterable<T> mergeSorted(Iterable<? extends Iterable<? extends T>> iterables, Comparator<? super T> comparator) {
    Preconditions.checkNotNull(iterables, "iterables");
    Preconditions.checkNotNull(comparator, "comparator");
    Object object = new Object(iterables, comparator);
    return new UnmodifiableIterable(object, null);
  }
}
