package com.google.common.collect;

import com.google.common.annotations.GwtCompatible;
import com.google.common.annotations.GwtIncompatible;
import com.google.common.annotations.J2ktIncompatible;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import com.google.errorprone.annotations.DoNotCall;
import com.google.errorprone.annotations.concurrent.LazyInit;
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Iterator;
import java.util.Set;
import java.util.function.Function;
import java.util.function.ToIntFunction;
import java.util.stream.Collector;
import javax.annotation.CheckForNull;

@ElementTypesAreNonnullByDefault
@GwtCompatible(serializable = true, emulated = true)
public abstract class ImmutableMultiset<E> extends ImmutableMultisetGwtSerializationDependencies<E> implements Multiset<E> {
  @LazyInit
  @CheckForNull
  private ImmutableList<E> asList;
  
  @LazyInit
  @CheckForNull
  private ImmutableSet<Multiset.Entry<E>> entrySet;
  
  public static <E> Collector<E, ?, ImmutableMultiset<E>> toImmutableMultiset() { return CollectCollectors.toImmutableMultiset(Function.identity(), e -> 1); }
  
  public static <T, E> Collector<T, ?, ImmutableMultiset<E>> toImmutableMultiset(Function<? super T, ? extends E> elementFunction, ToIntFunction<? super T> countFunction) { return CollectCollectors.toImmutableMultiset(elementFunction, countFunction); }
  
  public static <E> ImmutableMultiset<E> of() { return RegularImmutableMultiset.EMPTY; }
  
  public static <E> ImmutableMultiset<E> of(E element) { return copyFromElements(new Object[] { element }); }
  
  public static <E> ImmutableMultiset<E> of(E e1, E e2) { return copyFromElements(new Object[] { e1, e2 }); }
  
  public static <E> ImmutableMultiset<E> of(E e1, E e2, E e3) { return copyFromElements(new Object[] { e1, e2, e3 }); }
  
  public static <E> ImmutableMultiset<E> of(E e1, E e2, E e3, E e4) { return copyFromElements(new Object[] { e1, e2, e3, e4 }); }
  
  public static <E> ImmutableMultiset<E> of(E e1, E e2, E e3, E e4, E e5) { return copyFromElements(new Object[] { e1, e2, e3, e4, e5 }); }
  
  public static <E> ImmutableMultiset<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E... others) { return (new Builder()).add(e1).add(e2).add(e3).add(e4).add(e5).add(e6).add(others).build(); }
  
  public static <E> ImmutableMultiset<E> copyOf(E[] elements) { return copyFromElements(elements); }
  
  public static <E> ImmutableMultiset<E> copyOf(Iterable<? extends E> elements) {
    if (elements instanceof ImmutableMultiset) {
      ImmutableMultiset<E> result = (ImmutableMultiset)elements;
      if (!result.isPartialView())
        return result; 
    } 
    Multiset<? extends E> multiset = (elements instanceof Multiset) ? Multisets.cast(elements) : LinkedHashMultiset.create(elements);
    return copyFromEntries(multiset.entrySet());
  }
  
  public static <E> ImmutableMultiset<E> copyOf(Iterator<? extends E> elements) {
    LinkedHashMultiset linkedHashMultiset = LinkedHashMultiset.create();
    Iterators.addAll(linkedHashMultiset, elements);
    return copyFromEntries(linkedHashMultiset.entrySet());
  }
  
  private static <E> ImmutableMultiset<E> copyFromElements(E... elements) {
    LinkedHashMultiset linkedHashMultiset = LinkedHashMultiset.create();
    Collections.addAll(linkedHashMultiset, elements);
    return copyFromEntries(linkedHashMultiset.entrySet());
  }
  
  static <E> ImmutableMultiset<E> copyFromEntries(Collection<? extends Multiset.Entry<? extends E>> entries) {
    if (entries.isEmpty())
      return of(); 
    return RegularImmutableMultiset.create(entries);
  }
  
  public UnmodifiableIterator<E> iterator() {
    UnmodifiableIterator unmodifiableIterator = entrySet().iterator();
    return new Object(this, unmodifiableIterator);
  }
  
  public ImmutableList<E> asList() {
    ImmutableList<E> result = this.asList;
    return (result == null) ? (this.asList = super.asList()) : result;
  }
  
  public boolean contains(@CheckForNull Object object) { return (count(object) > 0); }
  
  @Deprecated
  @CanIgnoreReturnValue
  @DoNotCall("Always throws UnsupportedOperationException")
  public final int add(E element, int occurrences) { throw new UnsupportedOperationException(); }
  
  @Deprecated
  @CanIgnoreReturnValue
  @DoNotCall("Always throws UnsupportedOperationException")
  public final int remove(@CheckForNull Object element, int occurrences) { throw new UnsupportedOperationException(); }
  
  @Deprecated
  @CanIgnoreReturnValue
  @DoNotCall("Always throws UnsupportedOperationException")
  public final int setCount(E element, int count) { throw new UnsupportedOperationException(); }
  
  @Deprecated
  @CanIgnoreReturnValue
  @DoNotCall("Always throws UnsupportedOperationException")
  public final boolean setCount(E element, int oldCount, int newCount) { throw new UnsupportedOperationException(); }
  
  @GwtIncompatible
  int copyIntoArray(Object[] dst, int offset) {
    for (UnmodifiableIterator unmodifiableIterator = entrySet().iterator(); unmodifiableIterator.hasNext(); ) {
      Multiset.Entry<E> entry = (Multiset.Entry)unmodifiableIterator.next();
      Arrays.fill(dst, offset, offset + entry.getCount(), entry.getElement());
      offset += entry.getCount();
    } 
    return offset;
  }
  
  public boolean equals(@CheckForNull Object object) { return Multisets.equalsImpl(this, object); }
  
  public int hashCode() { return Sets.hashCodeImpl(entrySet()); }
  
  public String toString() { return entrySet().toString(); }
  
  public ImmutableSet<Multiset.Entry<E>> entrySet() {
    ImmutableSet<Multiset.Entry<E>> es = this.entrySet;
    return (es == null) ? (this.entrySet = createEntrySet()) : es;
  }
  
  private ImmutableSet<Multiset.Entry<E>> createEntrySet() { return isEmpty() ? ImmutableSet.of() : new EntrySet(this, null); }
  
  @GwtIncompatible
  @J2ktIncompatible
  Object writeReplace() { return new SerializedForm(this); }
  
  @GwtIncompatible
  @J2ktIncompatible
  private void readObject(ObjectInputStream stream) throws InvalidObjectException { throw new InvalidObjectException("Use SerializedForm"); }
  
  public static <E> Builder<E> builder() { return new Builder(); }
  
  public abstract ImmutableSet<E> elementSet();
  
  abstract Multiset.Entry<E> getEntry(int paramInt);
}
