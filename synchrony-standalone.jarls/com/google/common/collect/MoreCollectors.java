package com.google.common.collect;

import com.google.common.annotations.GwtCompatible;
import java.util.Optional;
import java.util.function.Supplier;
import java.util.stream.Collector;

@ElementTypesAreNonnullByDefault
@GwtCompatible
public final class MoreCollectors {
  private static final Collector<Object, ?, Optional<Object>> TO_OPTIONAL = Collector.of(ToOptionalState::new, ToOptionalState::add, ToOptionalState::combine, ToOptionalState::getOptional, new Collector.Characteristics[] { Collector.Characteristics.UNORDERED });
  
  public static <T> Collector<T, ?, Optional<T>> toOptional() { return TO_OPTIONAL; }
  
  private static final Object NULL_PLACEHOLDER = new Object();
  
  private static final Collector<Object, ?, Object> ONLY_ELEMENT = Collector.of(ToOptionalState::new, (state, o) -> 
      
      state.add((o == null) ? NULL_PLACEHOLDER : o), ToOptionalState::combine, state -> {
        Object result = state.getElement();
        return (result == NULL_PLACEHOLDER) ? null : result;
      }new Collector.Characteristics[] { Collector.Characteristics.UNORDERED });
  
  public static <T> Collector<T, ?, T> onlyElement() { return ONLY_ELEMENT; }
}
