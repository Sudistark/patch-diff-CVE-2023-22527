package com.google.common.collect;

import com.google.common.annotations.GwtCompatible;
import com.google.common.base.Function;
import com.google.common.base.Preconditions;
import com.google.common.base.Predicate;
import com.google.common.base.Predicates;
import com.google.common.base.Supplier;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import java.util.Collection;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.SortedSet;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.stream.Collector;
import java.util.stream.Stream;
import javax.annotation.CheckForNull;

@ElementTypesAreNonnullByDefault
@GwtCompatible(emulated = true)
public final class Multimaps {
  public static <T, K, V, M extends Multimap<K, V>> Collector<T, ?, M> toMultimap(Function<? super T, ? extends K> keyFunction, Function<? super T, ? extends V> valueFunction, Supplier<M> multimapSupplier) { return CollectCollectors.toMultimap(keyFunction, valueFunction, multimapSupplier); }
  
  public static <T, K, V, M extends Multimap<K, V>> Collector<T, ?, M> flatteningToMultimap(Function<? super T, ? extends K> keyFunction, Function<? super T, ? extends Stream<? extends V>> valueFunction, Supplier<M> multimapSupplier) { return CollectCollectors.flatteningToMultimap(keyFunction, valueFunction, multimapSupplier); }
  
  public static <K, V> Multimap<K, V> newMultimap(Map<K, Collection<V>> map, Supplier<? extends Collection<V>> factory) { return new CustomMultimap(map, factory); }
  
  public static <K, V> ListMultimap<K, V> newListMultimap(Map<K, Collection<V>> map, Supplier<? extends List<V>> factory) { return new CustomListMultimap(map, factory); }
  
  public static <K, V> SetMultimap<K, V> newSetMultimap(Map<K, Collection<V>> map, Supplier<? extends Set<V>> factory) { return new CustomSetMultimap(map, factory); }
  
  public static <K, V> SortedSetMultimap<K, V> newSortedSetMultimap(Map<K, Collection<V>> map, Supplier<? extends SortedSet<V>> factory) { return new CustomSortedSetMultimap(map, factory); }
  
  @CanIgnoreReturnValue
  public static <K, V, M extends Multimap<K, V>> M invertFrom(Multimap<? extends V, ? extends K> source, M dest) {
    Preconditions.checkNotNull(dest);
    for (Map.Entry<? extends V, ? extends K> entry : source.entries())
      dest.put(entry.getValue(), entry.getKey()); 
    return dest;
  }
  
  public static <K, V> Multimap<K, V> synchronizedMultimap(Multimap<K, V> multimap) { return Synchronized.multimap(multimap, null); }
  
  public static <K, V> Multimap<K, V> unmodifiableMultimap(Multimap<K, V> delegate) {
    if (delegate instanceof UnmodifiableMultimap || delegate instanceof ImmutableMultimap)
      return delegate; 
    return new UnmodifiableMultimap(delegate);
  }
  
  @Deprecated
  public static <K, V> Multimap<K, V> unmodifiableMultimap(ImmutableMultimap<K, V> delegate) { return (Multimap)Preconditions.checkNotNull(delegate); }
  
  public static <K, V> SetMultimap<K, V> synchronizedSetMultimap(SetMultimap<K, V> multimap) { return Synchronized.setMultimap(multimap, null); }
  
  public static <K, V> SetMultimap<K, V> unmodifiableSetMultimap(SetMultimap<K, V> delegate) {
    if (delegate instanceof UnmodifiableSetMultimap || delegate instanceof ImmutableSetMultimap)
      return delegate; 
    return new UnmodifiableSetMultimap(delegate);
  }
  
  @Deprecated
  public static <K, V> SetMultimap<K, V> unmodifiableSetMultimap(ImmutableSetMultimap<K, V> delegate) { return (SetMultimap)Preconditions.checkNotNull(delegate); }
  
  public static <K, V> SortedSetMultimap<K, V> synchronizedSortedSetMultimap(SortedSetMultimap<K, V> multimap) { return Synchronized.sortedSetMultimap(multimap, null); }
  
  public static <K, V> SortedSetMultimap<K, V> unmodifiableSortedSetMultimap(SortedSetMultimap<K, V> delegate) {
    if (delegate instanceof UnmodifiableSortedSetMultimap)
      return delegate; 
    return new UnmodifiableSortedSetMultimap(delegate);
  }
  
  public static <K, V> ListMultimap<K, V> synchronizedListMultimap(ListMultimap<K, V> multimap) { return Synchronized.listMultimap(multimap, null); }
  
  public static <K, V> ListMultimap<K, V> unmodifiableListMultimap(ListMultimap<K, V> delegate) {
    if (delegate instanceof UnmodifiableListMultimap || delegate instanceof ImmutableListMultimap)
      return delegate; 
    return new UnmodifiableListMultimap(delegate);
  }
  
  @Deprecated
  public static <K, V> ListMultimap<K, V> unmodifiableListMultimap(ImmutableListMultimap<K, V> delegate) { return (ListMultimap)Preconditions.checkNotNull(delegate); }
  
  private static <V> Collection<V> unmodifiableValueCollection(Collection<V> collection) {
    if (collection instanceof SortedSet)
      return Collections.unmodifiableSortedSet((SortedSet)collection); 
    if (collection instanceof Set)
      return Collections.unmodifiableSet((Set)collection); 
    if (collection instanceof List)
      return Collections.unmodifiableList((List)collection); 
    return Collections.unmodifiableCollection(collection);
  }
  
  private static <K, V> Collection<Map.Entry<K, V>> unmodifiableEntries(Collection<Map.Entry<K, V>> entries) {
    if (entries instanceof Set)
      return Maps.unmodifiableEntrySet((Set)entries); 
    return new Maps.UnmodifiableEntries(Collections.unmodifiableCollection(entries));
  }
  
  public static <K, V> Map<K, List<V>> asMap(ListMultimap<K, V> multimap) { return multimap.asMap(); }
  
  public static <K, V> Map<K, Set<V>> asMap(SetMultimap<K, V> multimap) { return multimap.asMap(); }
  
  public static <K, V> Map<K, SortedSet<V>> asMap(SortedSetMultimap<K, V> multimap) { return multimap.asMap(); }
  
  public static <K, V> Map<K, Collection<V>> asMap(Multimap<K, V> multimap) { return multimap.asMap(); }
  
  public static <K, V> SetMultimap<K, V> forMap(Map<K, V> map) { return new MapMultimap(map); }
  
  public static <K, V1, V2> Multimap<K, V2> transformValues(Multimap<K, V1> fromMultimap, Function<? super V1, V2> function) {
    Preconditions.checkNotNull(function);
    Maps.EntryTransformer<K, V1, V2> transformer = Maps.asEntryTransformer(function);
    return transformEntries(fromMultimap, transformer);
  }
  
  public static <K, V1, V2> ListMultimap<K, V2> transformValues(ListMultimap<K, V1> fromMultimap, Function<? super V1, V2> function) {
    Preconditions.checkNotNull(function);
    Maps.EntryTransformer<K, V1, V2> transformer = Maps.asEntryTransformer(function);
    return transformEntries(fromMultimap, transformer);
  }
  
  public static <K, V1, V2> Multimap<K, V2> transformEntries(Multimap<K, V1> fromMap, Maps.EntryTransformer<? super K, ? super V1, V2> transformer) { return new TransformedEntriesMultimap(fromMap, transformer); }
  
  public static <K, V1, V2> ListMultimap<K, V2> transformEntries(ListMultimap<K, V1> fromMap, Maps.EntryTransformer<? super K, ? super V1, V2> transformer) { return new TransformedEntriesListMultimap(fromMap, transformer); }
  
  public static <K, V> ImmutableListMultimap<K, V> index(Iterable<V> values, Function<? super V, K> keyFunction) { return index(values.iterator(), keyFunction); }
  
  public static <K, V> ImmutableListMultimap<K, V> index(Iterator<V> values, Function<? super V, K> keyFunction) {
    Preconditions.checkNotNull(keyFunction);
    ImmutableListMultimap.Builder<K, V> builder = ImmutableListMultimap.builder();
    while (values.hasNext()) {
      V value = (V)values.next();
      Preconditions.checkNotNull(value, values);
      builder.put(keyFunction.apply(value), value);
    } 
    return builder.build();
  }
  
  public static <K, V> Multimap<K, V> filterKeys(Multimap<K, V> unfiltered, Predicate<? super K> keyPredicate) {
    if (unfiltered instanceof SetMultimap)
      return filterKeys((SetMultimap)unfiltered, keyPredicate); 
    if (unfiltered instanceof ListMultimap)
      return filterKeys((ListMultimap)unfiltered, keyPredicate); 
    if (unfiltered instanceof FilteredKeyMultimap) {
      FilteredKeyMultimap<K, V> prev = (FilteredKeyMultimap)unfiltered;
      return new FilteredKeyMultimap(prev.unfiltered, 
          Predicates.and(prev.keyPredicate, keyPredicate));
    } 
    if (unfiltered instanceof FilteredMultimap) {
      FilteredMultimap<K, V> prev = (FilteredMultimap)unfiltered;
      return filterFiltered(prev, Maps.keyPredicateOnEntries(keyPredicate));
    } 
    return new FilteredKeyMultimap(unfiltered, keyPredicate);
  }
  
  public static <K, V> SetMultimap<K, V> filterKeys(SetMultimap<K, V> unfiltered, Predicate<? super K> keyPredicate) {
    if (unfiltered instanceof FilteredKeySetMultimap) {
      FilteredKeySetMultimap<K, V> prev = (FilteredKeySetMultimap)unfiltered;
      return new FilteredKeySetMultimap(prev
          .unfiltered(), Predicates.and(prev.keyPredicate, keyPredicate));
    } 
    if (unfiltered instanceof FilteredSetMultimap) {
      FilteredSetMultimap<K, V> prev = (FilteredSetMultimap)unfiltered;
      return filterFiltered(prev, Maps.keyPredicateOnEntries(keyPredicate));
    } 
    return new FilteredKeySetMultimap(unfiltered, keyPredicate);
  }
  
  public static <K, V> ListMultimap<K, V> filterKeys(ListMultimap<K, V> unfiltered, Predicate<? super K> keyPredicate) {
    if (unfiltered instanceof FilteredKeyListMultimap) {
      FilteredKeyListMultimap<K, V> prev = (FilteredKeyListMultimap)unfiltered;
      return new FilteredKeyListMultimap(prev
          .unfiltered(), Predicates.and(prev.keyPredicate, keyPredicate));
    } 
    return new FilteredKeyListMultimap(unfiltered, keyPredicate);
  }
  
  public static <K, V> Multimap<K, V> filterValues(Multimap<K, V> unfiltered, Predicate<? super V> valuePredicate) { return filterEntries(unfiltered, Maps.valuePredicateOnEntries(valuePredicate)); }
  
  public static <K, V> SetMultimap<K, V> filterValues(SetMultimap<K, V> unfiltered, Predicate<? super V> valuePredicate) { return filterEntries(unfiltered, Maps.valuePredicateOnEntries(valuePredicate)); }
  
  public static <K, V> Multimap<K, V> filterEntries(Multimap<K, V> unfiltered, Predicate<? super Map.Entry<K, V>> entryPredicate) {
    Preconditions.checkNotNull(entryPredicate);
    if (unfiltered instanceof SetMultimap)
      return filterEntries((SetMultimap)unfiltered, entryPredicate); 
    return (unfiltered instanceof FilteredMultimap) ? 
      filterFiltered((FilteredMultimap)unfiltered, entryPredicate) : 
      new FilteredEntryMultimap((Multimap)Preconditions.checkNotNull(unfiltered), entryPredicate);
  }
  
  public static <K, V> SetMultimap<K, V> filterEntries(SetMultimap<K, V> unfiltered, Predicate<? super Map.Entry<K, V>> entryPredicate) {
    Preconditions.checkNotNull(entryPredicate);
    return (unfiltered instanceof FilteredSetMultimap) ? 
      filterFiltered((FilteredSetMultimap)unfiltered, entryPredicate) : 
      new FilteredEntrySetMultimap((SetMultimap)Preconditions.checkNotNull(unfiltered), entryPredicate);
  }
  
  private static <K, V> Multimap<K, V> filterFiltered(FilteredMultimap<K, V> multimap, Predicate<? super Map.Entry<K, V>> entryPredicate) {
    Predicate<Map.Entry<K, V>> predicate = Predicates.and(multimap.entryPredicate(), entryPredicate);
    return new FilteredEntryMultimap(multimap.unfiltered(), predicate);
  }
  
  private static <K, V> SetMultimap<K, V> filterFiltered(FilteredSetMultimap<K, V> multimap, Predicate<? super Map.Entry<K, V>> entryPredicate) {
    Predicate<Map.Entry<K, V>> predicate = Predicates.and(multimap.entryPredicate(), entryPredicate);
    return new FilteredEntrySetMultimap(multimap.unfiltered(), predicate);
  }
  
  static boolean equalsImpl(Multimap<?, ?> multimap, @CheckForNull Object object) {
    if (object == multimap)
      return true; 
    if (object instanceof Multimap) {
      Multimap<?, ?> that = (Multimap)object;
      return multimap.asMap().equals(that.asMap());
    } 
    return false;
  }
}
