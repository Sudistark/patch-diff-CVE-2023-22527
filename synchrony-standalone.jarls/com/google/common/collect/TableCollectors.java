package com.google.common.collect;

import com.google.common.annotations.GwtCompatible;
import com.google.common.base.Preconditions;
import java.util.function.BinaryOperator;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.stream.Collector;

@ElementTypesAreNonnullByDefault
@GwtCompatible
final class TableCollectors {
  static <T, R, C, V> Collector<T, ?, ImmutableTable<R, C, V>> toImmutableTable(Function<? super T, ? extends R> rowFunction, Function<? super T, ? extends C> columnFunction, Function<? super T, ? extends V> valueFunction) {
    Preconditions.checkNotNull(rowFunction, "rowFunction");
    Preconditions.checkNotNull(columnFunction, "columnFunction");
    Preconditions.checkNotNull(valueFunction, "valueFunction");
    return Collector.of(Builder::new, (builder, t) -> 

        
        builder.put(rowFunction.apply(t), columnFunction.apply(t), valueFunction.apply(t)), ImmutableTable.Builder::combine, ImmutableTable.Builder::build, new Collector.Characteristics[0]);
  }
  
  static <T, R, C, V> Collector<T, ?, ImmutableTable<R, C, V>> toImmutableTable(Function<? super T, ? extends R> rowFunction, Function<? super T, ? extends C> columnFunction, Function<? super T, ? extends V> valueFunction, BinaryOperator<V> mergeFunction) {
    Preconditions.checkNotNull(rowFunction, "rowFunction");
    Preconditions.checkNotNull(columnFunction, "columnFunction");
    Preconditions.checkNotNull(valueFunction, "valueFunction");
    Preconditions.checkNotNull(mergeFunction, "mergeFunction");
    return Collector.of(() -> 
        new ImmutableTableCollectorState(null), (state, input) -> 
        
        state.put(rowFunction
          .apply(input), columnFunction
          .apply(input), valueFunction
          .apply(input), mergeFunction), (s1, s2) -> 
        
        s1.combine(s2, mergeFunction), state -> 
        state.toTable(), new Collector.Characteristics[0]);
  }
  
  static <T, R, C, V, I extends Table<R, C, V>> Collector<T, ?, I> toTable(Function<? super T, ? extends R> rowFunction, Function<? super T, ? extends C> columnFunction, Function<? super T, ? extends V> valueFunction, Supplier<I> tableSupplier) { return toTable(rowFunction, columnFunction, valueFunction, (v1, v2) -> {
          throw new IllegalStateException("Conflicting values " + v1 + " and " + v2);
        }tableSupplier); }
  
  static <T, R, C, V, I extends Table<R, C, V>> Collector<T, ?, I> toTable(Function<? super T, ? extends R> rowFunction, Function<? super T, ? extends C> columnFunction, Function<? super T, ? extends V> valueFunction, BinaryOperator<V> mergeFunction, Supplier<I> tableSupplier) {
    Preconditions.checkNotNull(rowFunction);
    Preconditions.checkNotNull(columnFunction);
    Preconditions.checkNotNull(valueFunction);
    Preconditions.checkNotNull(mergeFunction);
    Preconditions.checkNotNull(tableSupplier);
    return Collector.of(tableSupplier, (table, input) -> 

        
        mergeTables(table, rowFunction
          
          .apply(input), columnFunction
          .apply(input), valueFunction
          .apply(input), mergeFunction), (table1, table2) -> {
          for (Table.Cell<R, C, V> cell2 : table2.cellSet())
            mergeTables(table1, cell2
                .getRowKey(), cell2.getColumnKey(), cell2.getValue(), mergeFunction); 
          return table1;
        }new Collector.Characteristics[0]);
  }
  
  private static <R, C, V> void mergeTables(Table<R, C, V> table, @ParametricNullness R row, @ParametricNullness C column, @ParametricNullness V value, BinaryOperator<V> mergeFunction) {
    Preconditions.checkNotNull(value);
    V oldValue = (V)table.get(row, column);
    if (oldValue == null) {
      table.put(row, column, value);
    } else {
      V newValue = (V)mergeFunction.apply(oldValue, value);
      if (newValue == null) {
        table.remove(row, column);
      } else {
        table.put(row, column, newValue);
      } 
    } 
  }
}
