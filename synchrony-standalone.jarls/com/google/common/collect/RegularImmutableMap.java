package com.google.common.collect;

import com.google.common.annotations.GwtCompatible;
import com.google.common.annotations.J2ktIncompatible;
import com.google.common.annotations.VisibleForTesting;
import com.google.common.base.Preconditions;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import java.util.IdentityHashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.function.BiConsumer;
import javax.annotation.CheckForNull;

@ElementTypesAreNonnullByDefault
@GwtCompatible(serializable = true, emulated = true)
final class RegularImmutableMap<K, V> extends ImmutableMap<K, V> {
  static final ImmutableMap<Object, Object> EMPTY = new RegularImmutableMap(ImmutableMap.EMPTY_ENTRY_ARRAY, null, 0);
  
  @VisibleForTesting
  static final double MAX_LOAD_FACTOR = 1.2D;
  
  @VisibleForTesting
  static final double HASH_FLOODING_FPP = 0.001D;
  
  @VisibleForTesting
  static final int MAX_HASH_BUCKET_LENGTH = 8;
  
  @VisibleForTesting
  final Map.Entry<K, V>[] entries;
  
  @CheckForNull
  private final ImmutableMapEntry<K, V>[] table;
  
  private final int mask;
  
  @J2ktIncompatible
  private static final long serialVersionUID = 0L;
  
  static <K, V> ImmutableMap<K, V> fromEntries(Entry... entries) { return fromEntryArray(entries.length, entries, true); }
  
  static <K, V> ImmutableMap<K, V> fromEntryArray(int n, Entry[] entryArray, boolean throwIfDuplicateKeys) {
    Preconditions.checkPositionIndex(n, entryArray.length);
    if (n == 0)
      return EMPTY; 
    try {
      return fromEntryArrayCheckingBucketOverflow(n, entryArray, throwIfDuplicateKeys);
    } catch (BucketOverflowException e) {
      return JdkBackedImmutableMap.create(n, entryArray, throwIfDuplicateKeys);
    } 
  }
  
  private static <K, V> ImmutableMap<K, V> fromEntryArrayCheckingBucketOverflow(int n, Entry[] entryArray, boolean throwIfDuplicateKeys) {
    Map.Entry[] arrayOfEntry = (n == entryArray.length) ? entryArray : ImmutableMapEntry.createEntryArray(n);
    int tableSize = Hashing.closedTableSize(n, 1.2D);
    ImmutableMapEntry[] table = ImmutableMapEntry.createEntryArray(tableSize);
    int mask = tableSize - 1;
    IdentityHashMap<Map.Entry<K, V>, Boolean> duplicates = null;
    int dupCount = 0;
    for (int entryIndex = n - 1; entryIndex >= 0; entryIndex--) {
      Map.Entry<K, V> entry = (Map.Entry)Objects.requireNonNull(entryArray[entryIndex]);
      K key = (K)entry.getKey();
      V value = (V)entry.getValue();
      CollectPreconditions.checkEntryNotNull(key, value);
      int tableIndex = Hashing.smear(key.hashCode()) & mask;
      ImmutableMapEntry<K, V> keyBucketHead = table[tableIndex];
      ImmutableMapEntry<K, V> effectiveEntry = checkNoConflictInKeyBucket(key, value, keyBucketHead, throwIfDuplicateKeys);
      if (effectiveEntry == null) {
        effectiveEntry = (keyBucketHead == null) ? makeImmutable(entry, key, value) : new ImmutableMapEntry.NonTerminalImmutableMapEntry(key, value, keyBucketHead);
        table[tableIndex] = effectiveEntry;
      } else {
        if (duplicates == null)
          duplicates = new IdentityHashMap<Map.Entry<K, V>, Boolean>(); 
        duplicates.put(effectiveEntry, Boolean.valueOf(true));
        dupCount++;
        if (arrayOfEntry == entryArray) {
          Entry[] originalEntries = arrayOfEntry;
          arrayOfEntry = (Entry[])originalEntries.clone();
        } 
      } 
      arrayOfEntry[entryIndex] = effectiveEntry;
    } 
    if (duplicates != null) {
      arrayOfEntry = removeDuplicates(arrayOfEntry, n, n - dupCount, duplicates);
      int newTableSize = Hashing.closedTableSize(arrayOfEntry.length, 1.2D);
      if (newTableSize != tableSize)
        return fromEntryArrayCheckingBucketOverflow(arrayOfEntry.length, arrayOfEntry, true); 
    } 
    return new RegularImmutableMap(arrayOfEntry, table, mask);
  }
  
  static <K, V> Map.Entry<K, V>[] removeDuplicates(Entry[] entries, int n, int newN, IdentityHashMap<Map.Entry<K, V>, Boolean> duplicates) {
    ImmutableMapEntry[] arrayOfImmutableMapEntry = ImmutableMapEntry.createEntryArray(newN);
    for (int in = 0, out = 0; in < n; in++) {
      Map.Entry<K, V> entry = entries[in];
      Boolean status = (Boolean)duplicates.get(entry);
      if (status != null)
        if (status.booleanValue()) {
          duplicates.put(entry, Boolean.valueOf(false));
        } else {
          continue;
        }  
      arrayOfImmutableMapEntry[out++] = entry;
      continue;
    } 
    return arrayOfImmutableMapEntry;
  }
  
  static <K, V> ImmutableMapEntry<K, V> makeImmutable(Map.Entry<K, V> entry, K key, V value) {
    boolean reusable = (entry instanceof ImmutableMapEntry && ((ImmutableMapEntry)entry).isReusable());
    return reusable ? (ImmutableMapEntry)entry : new ImmutableMapEntry(key, value);
  }
  
  static <K, V> ImmutableMapEntry<K, V> makeImmutable(Map.Entry<K, V> entry) { return makeImmutable(entry, entry.getKey(), entry.getValue()); }
  
  private RegularImmutableMap(Entry[] entries, @CheckForNull ImmutableMapEntry[] table, int mask) {
    this.entries = entries;
    this.table = table;
    this.mask = mask;
  }
  
  @CheckForNull
  @CanIgnoreReturnValue
  static <K, V> ImmutableMapEntry<K, V> checkNoConflictInKeyBucket(Object key, Object newValue, @CheckForNull ImmutableMapEntry<K, V> keyBucketHead, boolean throwIfDuplicateKeys) throws BucketOverflowException {
    int bucketSize = 0;
    for (; keyBucketHead != null; keyBucketHead = keyBucketHead.getNextInKeyBucket()) {
      if (keyBucketHead.getKey().equals(key))
        if (throwIfDuplicateKeys) {
          checkNoConflict(false, "key", keyBucketHead, key + "=" + newValue);
        } else {
          return keyBucketHead;
        }  
      if (++bucketSize > 8)
        throw new BucketOverflowException(); 
    } 
    return null;
  }
  
  @CheckForNull
  public V get(@CheckForNull Object key) { return (V)get(key, this.table, this.mask); }
  
  @CheckForNull
  static <V> V get(@CheckForNull Object key, @CheckForNull ImmutableMapEntry[] keyTable, int mask) {
    if (key == null || keyTable == null)
      return null; 
    int index = Hashing.smear(key.hashCode()) & mask;
    ImmutableMapEntry<?, V> entry = keyTable[index];
    for (; entry != null; 
      entry = entry.getNextInKeyBucket()) {
      Object candidateKey = entry.getKey();
      if (key.equals(candidateKey))
        return (V)entry.getValue(); 
    } 
    return null;
  }
  
  public void forEach(BiConsumer<? super K, ? super V> action) {
    Preconditions.checkNotNull(action);
    for (Map.Entry<K, V> entry : this.entries)
      action.accept(entry.getKey(), entry.getValue()); 
  }
  
  public int size() { return this.entries.length; }
  
  boolean isPartialView() { return false; }
  
  ImmutableSet<Map.Entry<K, V>> createEntrySet() { return new ImmutableMapEntrySet.RegularEntrySet(this, this.entries); }
  
  ImmutableSet<K> createKeySet() { return new KeySet(this); }
  
  ImmutableCollection<V> createValues() { return new Values(this); }
}
