package com.google.common.collect;

import com.google.common.annotations.GwtIncompatible;
import com.google.common.annotations.J2ktIncompatible;
import com.google.common.base.Preconditions;
import com.google.common.primitives.Primitives;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.io.Serializable;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;
import javax.annotation.CheckForNull;

@ElementTypesAreNonnullByDefault
@J2ktIncompatible
@GwtIncompatible
public final class MutableClassToInstanceMap<B> extends ForwardingMap<Class<? extends B>, B> implements ClassToInstanceMap<B>, Serializable {
  private final Map<Class<? extends B>, B> delegate;
  
  public static <B> MutableClassToInstanceMap<B> create() { return new MutableClassToInstanceMap(new HashMap()); }
  
  public static <B> MutableClassToInstanceMap<B> create(Map<Class<? extends B>, B> backingMap) { return new MutableClassToInstanceMap(backingMap); }
  
  private MutableClassToInstanceMap(Map<Class<? extends B>, B> delegate) { this.delegate = (Map)Preconditions.checkNotNull(delegate); }
  
  protected Map<Class<? extends B>, B> delegate() { return this.delegate; }
  
  private static <B> Map.Entry<Class<? extends B>, B> checkedEntry(Map.Entry<Class<? extends B>, B> entry) { return new Object(entry); }
  
  public Set<Map.Entry<Class<? extends B>, B>> entrySet() { return new Object(this); }
  
  @CheckForNull
  @CanIgnoreReturnValue
  public B put(Class<? extends B> key, @ParametricNullness B value) {
    cast(key, value);
    return (B)super.put(key, value);
  }
  
  public void putAll(Map<? extends Class<? extends B>, ? extends B> map) {
    Map<Class<? extends B>, B> copy = new LinkedHashMap<Class<? extends B>, B>(map);
    for (Map.Entry<? extends Class<? extends B>, B> entry : copy.entrySet())
      cast((Class)entry.getKey(), entry.getValue()); 
    super.putAll(copy);
  }
  
  @CheckForNull
  @CanIgnoreReturnValue
  public <T extends B> T putInstance(Class<T> type, @ParametricNullness T value) { return (T)cast(type, put(type, value)); }
  
  @CheckForNull
  public <T extends B> T getInstance(Class<T> type) { return (T)cast(type, get(type)); }
  
  @CheckForNull
  @CanIgnoreReturnValue
  private static <T> T cast(Class<T> type, @CheckForNull Object value) { return (T)Primitives.wrap(type).cast(value); }
  
  private Object writeReplace() { return new SerializedForm(delegate()); }
  
  private void readObject(ObjectInputStream stream) throws InvalidObjectException { throw new InvalidObjectException("Use SerializedForm"); }
}
