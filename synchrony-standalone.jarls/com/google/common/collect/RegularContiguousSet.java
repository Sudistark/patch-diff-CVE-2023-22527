package com.google.common.collect;

import com.google.common.annotations.GwtCompatible;
import com.google.common.annotations.GwtIncompatible;
import com.google.common.annotations.J2ktIncompatible;
import com.google.common.base.Preconditions;
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.util.Collection;
import java.util.Iterator;
import java.util.Objects;
import javax.annotation.CheckForNull;

@ElementTypesAreNonnullByDefault
@GwtCompatible(emulated = true)
final class RegularContiguousSet<C extends Comparable> extends ContiguousSet<C> {
  private final Range<C> range;
  
  private static final long serialVersionUID = 0L;
  
  RegularContiguousSet(Range<C> range, DiscreteDomain<C> domain) {
    super(domain);
    this.range = range;
  }
  
  private ContiguousSet<C> intersectionInCurrentDomain(Range<C> other) {
    return this.range.isConnected(other) ? 
      ContiguousSet.create(this.range.intersection(other), this.domain) : 
      new EmptyContiguousSet(this.domain);
  }
  
  ContiguousSet<C> headSetImpl(C toElement, boolean inclusive) { return intersectionInCurrentDomain(Range.upTo(toElement, BoundType.forBoolean(inclusive))); }
  
  ContiguousSet<C> subSetImpl(C fromElement, boolean fromInclusive, C toElement, boolean toInclusive) {
    if (fromElement.compareTo(toElement) == 0 && !fromInclusive && !toInclusive)
      return new EmptyContiguousSet(this.domain); 
    return intersectionInCurrentDomain(
        Range.range(fromElement, 
          BoundType.forBoolean(fromInclusive), toElement, 
          BoundType.forBoolean(toInclusive)));
  }
  
  ContiguousSet<C> tailSetImpl(C fromElement, boolean inclusive) { return intersectionInCurrentDomain(Range.downTo(fromElement, BoundType.forBoolean(inclusive))); }
  
  @GwtIncompatible
  int indexOf(@CheckForNull Object target) { return contains(target) ? (int)this.domain.distance(first(), (Comparable)Objects.requireNonNull(target)) : -1; }
  
  public UnmodifiableIterator<C> iterator() { return new Object(this, first()); }
  
  @GwtIncompatible
  public UnmodifiableIterator<C> descendingIterator() { return new Object(this, last()); }
  
  private static boolean equalsOrThrow(Comparable<?> left, @CheckForNull Comparable<?> right) { return (right != null && Range.compareOrThrow(left, right) == 0); }
  
  boolean isPartialView() { return false; }
  
  public C first() { return (C)(Comparable)Objects.requireNonNull(this.range.lowerBound.leastValueAbove(this.domain)); }
  
  public C last() { return (C)(Comparable)Objects.requireNonNull(this.range.upperBound.greatestValueBelow(this.domain)); }
  
  ImmutableList<C> createAsList() {
    if (this.domain.supportsFastOffset)
      return new Object(this); 
    return super.createAsList();
  }
  
  public int size() {
    long distance = this.domain.distance(first(), last());
    return (distance >= 2147483647L) ? Integer.MAX_VALUE : ((int)distance + 1);
  }
  
  public boolean contains(@CheckForNull Object object) {
    if (object == null)
      return false; 
    try {
      return this.range.contains((Comparable)object);
    } catch (ClassCastException e) {
      return false;
    } 
  }
  
  public boolean containsAll(Collection<?> targets) { return Collections2.containsAllImpl(this, targets); }
  
  public boolean isEmpty() { return false; }
  
  public ContiguousSet<C> intersection(ContiguousSet<C> other) {
    Preconditions.checkNotNull(other);
    Preconditions.checkArgument(this.domain.equals(other.domain));
    if (other.isEmpty())
      return other; 
    C lowerEndpoint = (C)(Comparable)Ordering.natural().max(first(), (Comparable)other.first());
    C upperEndpoint = (C)(Comparable)Ordering.natural().min(last(), (Comparable)other.last());
    return (lowerEndpoint.compareTo(upperEndpoint) <= 0) ? 
      ContiguousSet.create(Range.closed(lowerEndpoint, upperEndpoint), this.domain) : 
      new EmptyContiguousSet(this.domain);
  }
  
  public Range<C> range() { return range(BoundType.CLOSED, BoundType.CLOSED); }
  
  public Range<C> range(BoundType lowerBoundType, BoundType upperBoundType) {
    return Range.create(this.range.lowerBound
        .withLowerBoundType(lowerBoundType, this.domain), this.range.upperBound
        .withUpperBoundType(upperBoundType, this.domain));
  }
  
  public boolean equals(@CheckForNull Object object) {
    if (object == this)
      return true; 
    if (object instanceof RegularContiguousSet) {
      RegularContiguousSet<?> that = (RegularContiguousSet)object;
      if (this.domain.equals(that.domain))
        return (first().equals(that.first()) && last().equals(that.last())); 
    } 
    return super.equals(object);
  }
  
  public int hashCode() { return Sets.hashCodeImpl(this); }
  
  @GwtIncompatible
  @J2ktIncompatible
  Object writeReplace() { return new SerializedForm(this.range, this.domain, null); }
  
  @GwtIncompatible
  @J2ktIncompatible
  private void readObject(ObjectInputStream stream) throws InvalidObjectException { throw new InvalidObjectException("Use SerializedForm"); }
}
