package com.google.common.collect;

import com.google.common.annotations.GwtIncompatible;
import com.google.common.annotations.J2ktIncompatible;
import com.google.common.annotations.VisibleForTesting;
import com.google.common.base.Preconditions;
import com.google.common.math.IntMath;
import com.google.common.primitives.Ints;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.Iterator;
import java.util.List;
import java.util.Objects;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.atomic.AtomicInteger;
import javax.annotation.CheckForNull;

@ElementTypesAreNonnullByDefault
@J2ktIncompatible
@GwtIncompatible
public final class ConcurrentHashMultiset<E> extends AbstractMultiset<E> implements Serializable {
  private final ConcurrentMap<E, AtomicInteger> countMap;
  
  private static final long serialVersionUID = 1L;
  
  public static <E> ConcurrentHashMultiset<E> create() { return new ConcurrentHashMultiset(new ConcurrentHashMap()); }
  
  public static <E> ConcurrentHashMultiset<E> create(Iterable<? extends E> elements) {
    ConcurrentHashMultiset<E> multiset = create();
    Iterables.addAll(multiset, elements);
    return multiset;
  }
  
  public static <E> ConcurrentHashMultiset<E> create(ConcurrentMap<E, AtomicInteger> countMap) { return new ConcurrentHashMultiset(countMap); }
  
  @VisibleForTesting
  ConcurrentHashMultiset(ConcurrentMap<E, AtomicInteger> countMap) {
    Preconditions.checkArgument(countMap.isEmpty(), "the backing map (%s) must be empty", countMap);
    this.countMap = countMap;
  }
  
  public int count(@CheckForNull Object element) {
    AtomicInteger existingCounter = (AtomicInteger)Maps.safeGet(this.countMap, element);
    return (existingCounter == null) ? 0 : existingCounter.get();
  }
  
  public int size() {
    long sum = 0L;
    for (AtomicInteger value : this.countMap.values())
      sum += value.get(); 
    return Ints.saturatedCast(sum);
  }
  
  public Object[] toArray() { return snapshot().toArray(); }
  
  public <T> T[] toArray(T[] array) { return (T[])snapshot().toArray(array); }
  
  private List<E> snapshot() {
    List<E> list = Lists.newArrayListWithExpectedSize(size());
    for (Multiset.Entry<E> entry : entrySet()) {
      E element = (E)entry.getElement();
      for (int i = entry.getCount(); i > 0; i--)
        list.add(element); 
    } 
    return list;
  }
  
  @CanIgnoreReturnValue
  public int add(E element, int occurrences) {
    AtomicInteger newCounter, existingCounter;
    Preconditions.checkNotNull(element);
    if (occurrences == 0)
      return count(element); 
    CollectPreconditions.checkPositive(occurrences, "occurrences");
    do {
      existingCounter = (AtomicInteger)Maps.safeGet(this.countMap, element);
      if (existingCounter == null) {
        existingCounter = (AtomicInteger)this.countMap.putIfAbsent(element, new AtomicInteger(occurrences));
        if (existingCounter == null)
          return 0; 
      } 
      while (true) {
        int oldValue = existingCounter.get();
        if (oldValue != 0)
          try {
            int newValue = IntMath.checkedAdd(oldValue, occurrences);
            if (existingCounter.compareAndSet(oldValue, newValue))
              return oldValue; 
            continue;
          } catch (ArithmeticException overflow) {
            throw new IllegalArgumentException("Overflow adding " + occurrences + " occurrences to a count of " + oldValue);
          }  
        break;
      } 
      newCounter = new AtomicInteger(occurrences);
    } while (this.countMap.putIfAbsent(element, newCounter) != null && 
      !this.countMap.replace(element, existingCounter, newCounter));
    return 0;
  }
  
  @CanIgnoreReturnValue
  public int remove(@CheckForNull Object element, int occurrences) {
    if (occurrences == 0)
      return count(element); 
    CollectPreconditions.checkPositive(occurrences, "occurrences");
    AtomicInteger existingCounter = (AtomicInteger)Maps.safeGet(this.countMap, element);
    if (existingCounter == null)
      return 0; 
    while (true) {
      int oldValue = existingCounter.get();
      if (oldValue != 0) {
        int newValue = Math.max(0, oldValue - occurrences);
        if (existingCounter.compareAndSet(oldValue, newValue)) {
          if (newValue == 0)
            this.countMap.remove(element, existingCounter); 
          return oldValue;
        } 
        continue;
      } 
      break;
    } 
    return 0;
  }
  
  @CanIgnoreReturnValue
  public boolean removeExactly(@CheckForNull Object element, int occurrences) {
    int newValue, oldValue;
    if (occurrences == 0)
      return true; 
    CollectPreconditions.checkPositive(occurrences, "occurrences");
    AtomicInteger existingCounter = (AtomicInteger)Maps.safeGet(this.countMap, element);
    if (existingCounter == null)
      return false; 
    do {
      oldValue = existingCounter.get();
      if (oldValue < occurrences)
        return false; 
      newValue = oldValue - occurrences;
    } while (!existingCounter.compareAndSet(oldValue, newValue));
    if (newValue == 0)
      this.countMap.remove(element, existingCounter); 
    return true;
  }
  
  @CanIgnoreReturnValue
  public int setCount(E element, int count) {
    int oldValue;
    AtomicInteger existingCounter;
    Preconditions.checkNotNull(element);
    CollectPreconditions.checkNonnegative(count, "count");
    label26: while (true) {
      existingCounter = (AtomicInteger)Maps.safeGet(this.countMap, element);
      if (existingCounter == null) {
        if (count == 0)
          return 0; 
        existingCounter = (AtomicInteger)this.countMap.putIfAbsent(element, new AtomicInteger(count));
        if (existingCounter == null)
          return 0; 
      } 
      do {
        oldValue = existingCounter.get();
        if (oldValue == 0) {
          if (count == 0)
            return 0; 
          AtomicInteger newCounter = new AtomicInteger(count);
          if (this.countMap.putIfAbsent(element, newCounter) == null || this.countMap
            .replace(element, existingCounter, newCounter))
            return 0; 
          continue label26;
        } 
      } while (!existingCounter.compareAndSet(oldValue, count));
      break;
    } 
    if (count == 0)
      this.countMap.remove(element, existingCounter); 
    return oldValue;
  }
  
  @CanIgnoreReturnValue
  public boolean setCount(E element, int expectedOldCount, int newCount) {
    Preconditions.checkNotNull(element);
    CollectPreconditions.checkNonnegative(expectedOldCount, "oldCount");
    CollectPreconditions.checkNonnegative(newCount, "newCount");
    AtomicInteger existingCounter = (AtomicInteger)Maps.safeGet(this.countMap, element);
    if (existingCounter == null) {
      if (expectedOldCount != 0)
        return false; 
      if (newCount == 0)
        return true; 
      return (this.countMap.putIfAbsent(element, new AtomicInteger(newCount)) == null);
    } 
    int oldValue = existingCounter.get();
    if (oldValue == expectedOldCount) {
      if (oldValue == 0) {
        if (newCount == 0) {
          this.countMap.remove(element, existingCounter);
          return true;
        } 
        AtomicInteger newCounter = new AtomicInteger(newCount);
        return (this.countMap.putIfAbsent(element, newCounter) == null || this.countMap
          .replace(element, existingCounter, newCounter));
      } 
      if (existingCounter.compareAndSet(oldValue, newCount)) {
        if (newCount == 0)
          this.countMap.remove(element, existingCounter); 
        return true;
      } 
    } 
    return false;
  }
  
  Set<E> createElementSet() {
    Set<E> delegate = this.countMap.keySet();
    return new Object(this, delegate);
  }
  
  Iterator<E> elementIterator() { throw new AssertionError("should never be called"); }
  
  @Deprecated
  public Set<Multiset.Entry<E>> createEntrySet() { return new EntrySet(this, null); }
  
  int distinctElements() { return this.countMap.size(); }
  
  public boolean isEmpty() { return this.countMap.isEmpty(); }
  
  Iterator<Multiset.Entry<E>> entryIterator() {
    Object object = new Object(this);
    return new Object(this, object);
  }
  
  public Iterator<E> iterator() { return Multisets.iteratorImpl(this); }
  
  public void clear() { this.countMap.clear(); }
  
  private void writeObject(ObjectOutputStream stream) throws IOException {
    stream.defaultWriteObject();
    stream.writeObject(this.countMap);
  }
  
  @J2ktIncompatible
  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {
    stream.defaultReadObject();
    ConcurrentMap<E, Integer> deserializedCountMap = (ConcurrentMap)Objects.requireNonNull(stream.readObject());
    FieldSettersHolder.COUNT_MAP_FIELD_SETTER.set(this, deserializedCountMap);
  }
}
