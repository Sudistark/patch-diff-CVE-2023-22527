package com.google.common.collect;

import com.google.common.annotations.GwtCompatible;
import com.google.common.base.Preconditions;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import com.google.errorprone.annotations.concurrent.LazyInit;
import java.util.Collection;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.Spliterator;
import java.util.Spliterators;
import javax.annotation.CheckForNull;

@ElementTypesAreNonnullByDefault
@GwtCompatible
abstract class AbstractMultimap<K, V> extends Object implements Multimap<K, V> {
  @LazyInit
  @CheckForNull
  private Collection<Map.Entry<K, V>> entries;
  
  @LazyInit
  @CheckForNull
  private Set<K> keySet;
  
  @LazyInit
  @CheckForNull
  private Multiset<K> keys;
  
  @LazyInit
  @CheckForNull
  private Collection<V> values;
  
  @LazyInit
  @CheckForNull
  private Map<K, Collection<V>> asMap;
  
  public boolean isEmpty() { return (size() == 0); }
  
  public boolean containsValue(@CheckForNull Object value) {
    for (Collection<V> collection : asMap().values()) {
      if (collection.contains(value))
        return true; 
    } 
    return false;
  }
  
  public boolean containsEntry(@CheckForNull Object key, @CheckForNull Object value) {
    Collection<V> collection = (Collection)asMap().get(key);
    return (collection != null && collection.contains(value));
  }
  
  @CanIgnoreReturnValue
  public boolean remove(@CheckForNull Object key, @CheckForNull Object value) {
    Collection<V> collection = (Collection)asMap().get(key);
    return (collection != null && collection.remove(value));
  }
  
  @CanIgnoreReturnValue
  public boolean put(@ParametricNullness K key, @ParametricNullness V value) { return get(key).add(value); }
  
  @CanIgnoreReturnValue
  public boolean putAll(@ParametricNullness K key, Iterable<? extends V> values) {
    Preconditions.checkNotNull(values);
    if (values instanceof Collection) {
      Collection<? extends V> valueCollection = (Collection)values;
      return (!valueCollection.isEmpty() && get(key).addAll(valueCollection));
    } 
    Iterator<? extends V> valueItr = values.iterator();
    return (valueItr.hasNext() && Iterators.addAll(get(key), valueItr));
  }
  
  @CanIgnoreReturnValue
  public boolean putAll(Multimap<? extends K, ? extends V> multimap) {
    boolean changed = false;
    for (Map.Entry<? extends K, ? extends V> entry : multimap.entries())
      changed |= put(entry.getKey(), entry.getValue()); 
    return changed;
  }
  
  @CanIgnoreReturnValue
  public Collection<V> replaceValues(@ParametricNullness K key, Iterable<? extends V> values) {
    Preconditions.checkNotNull(values);
    Collection<V> result = removeAll(key);
    putAll(key, values);
    return result;
  }
  
  public Collection<Map.Entry<K, V>> entries() {
    Collection<Map.Entry<K, V>> result = this.entries;
    return (result == null) ? (this.entries = createEntries()) : result;
  }
  
  abstract Collection<Map.Entry<K, V>> createEntries();
  
  abstract Iterator<Map.Entry<K, V>> entryIterator();
  
  Spliterator<Map.Entry<K, V>> entrySpliterator() {
    return Spliterators.spliterator(
        entryIterator(), size(), (this instanceof SetMultimap) ? 1 : 0);
  }
  
  public Set<K> keySet() {
    Set<K> result = this.keySet;
    return (result == null) ? (this.keySet = createKeySet()) : result;
  }
  
  abstract Set<K> createKeySet();
  
  public Multiset<K> keys() {
    Multiset<K> result = this.keys;
    return (result == null) ? (this.keys = createKeys()) : result;
  }
  
  abstract Multiset<K> createKeys();
  
  public Collection<V> values() {
    Collection<V> result = this.values;
    return (result == null) ? (this.values = createValues()) : result;
  }
  
  abstract Collection<V> createValues();
  
  Iterator<V> valueIterator() { return Maps.valueIterator(entries().iterator()); }
  
  Spliterator<V> valueSpliterator() { return Spliterators.spliterator(valueIterator(), size(), 0); }
  
  public Map<K, Collection<V>> asMap() {
    Map<K, Collection<V>> result = this.asMap;
    return (result == null) ? (this.asMap = createAsMap()) : result;
  }
  
  abstract Map<K, Collection<V>> createAsMap();
  
  public boolean equals(@CheckForNull Object object) { return Multimaps.equalsImpl(this, object); }
  
  public int hashCode() { return asMap().hashCode(); }
  
  public String toString() { return asMap().toString(); }
}
