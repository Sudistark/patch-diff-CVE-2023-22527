package com.google.common.collect;

import com.google.common.annotations.GwtCompatible;
import com.google.common.base.Preconditions;
import com.google.common.base.Predicate;
import java.util.Collection;
import java.util.Collections;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import javax.annotation.CheckForNull;

@ElementTypesAreNonnullByDefault
@GwtCompatible
class FilteredKeyMultimap<K, V> extends AbstractMultimap<K, V> implements FilteredMultimap<K, V> {
  final Multimap<K, V> unfiltered;
  
  final Predicate<? super K> keyPredicate;
  
  FilteredKeyMultimap(Multimap<K, V> unfiltered, Predicate<? super K> keyPredicate) {
    this.unfiltered = (Multimap)Preconditions.checkNotNull(unfiltered);
    this.keyPredicate = (Predicate)Preconditions.checkNotNull(keyPredicate);
  }
  
  public Multimap<K, V> unfiltered() { return this.unfiltered; }
  
  public Predicate<? super Map.Entry<K, V>> entryPredicate() { return Maps.keyPredicateOnEntries(this.keyPredicate); }
  
  public int size() {
    int size = 0;
    for (Collection<V> collection : asMap().values())
      size += collection.size(); 
    return size;
  }
  
  public boolean containsKey(@CheckForNull Object key) {
    if (this.unfiltered.containsKey(key)) {
      K k = (K)key;
      return this.keyPredicate.apply(k);
    } 
    return false;
  }
  
  public Collection<V> removeAll(@CheckForNull Object key) { return containsKey(key) ? this.unfiltered.removeAll(key) : unmodifiableEmptyCollection(); }
  
  Collection<V> unmodifiableEmptyCollection() {
    if (this.unfiltered instanceof SetMultimap)
      return Collections.emptySet(); 
    return Collections.emptyList();
  }
  
  public void clear() { keySet().clear(); }
  
  Set<K> createKeySet() { return Sets.filter(this.unfiltered.keySet(), this.keyPredicate); }
  
  public Collection<V> get(@ParametricNullness K key) {
    if (this.keyPredicate.apply(key))
      return this.unfiltered.get(key); 
    if (this.unfiltered instanceof SetMultimap)
      return new AddRejectingSet(key); 
    return new AddRejectingList(key);
  }
  
  Iterator<Map.Entry<K, V>> entryIterator() { throw new AssertionError("should never be called"); }
  
  Collection<Map.Entry<K, V>> createEntries() { return new Entries(this); }
  
  Collection<V> createValues() { return new FilteredMultimapValues(this); }
  
  Map<K, Collection<V>> createAsMap() { return Maps.filterKeys(this.unfiltered.asMap(), this.keyPredicate); }
  
  Multiset<K> createKeys() { return Multisets.filter(this.unfiltered.keys(), this.keyPredicate); }
}
