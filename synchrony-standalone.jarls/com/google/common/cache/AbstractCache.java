package com.google.common.cache;

import com.google.common.annotations.GwtCompatible;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Maps;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.ExecutionException;

@ElementTypesAreNonnullByDefault
@GwtCompatible
public abstract class AbstractCache<K, V> extends Object implements Cache<K, V> {
  public V get(K key, Callable<? extends V> valueLoader) throws ExecutionException { throw new UnsupportedOperationException(); }
  
  public ImmutableMap<K, V> getAllPresent(Iterable<? extends Object> keys) {
    Map<K, V> result = Maps.newLinkedHashMap();
    for (Object key : keys) {
      if (!result.containsKey(key)) {
        K castKey = (K)key;
        V value = (V)getIfPresent(key);
        if (value != null)
          result.put(castKey, value); 
      } 
    } 
    return ImmutableMap.copyOf(result);
  }
  
  public void put(K key, V value) { throw new UnsupportedOperationException(); }
  
  public void putAll(Map<? extends K, ? extends V> m) {
    for (Map.Entry<? extends K, ? extends V> entry : m.entrySet())
      put(entry.getKey(), entry.getValue()); 
  }
  
  public void cleanUp() {}
  
  public long size() { throw new UnsupportedOperationException(); }
  
  public void invalidate(Object key) { throw new UnsupportedOperationException(); }
  
  public void invalidateAll(Iterable<? extends Object> keys) {
    for (Object key : keys)
      invalidate(key); 
  }
  
  public void invalidateAll() { throw new UnsupportedOperationException(); }
  
  public CacheStats stats() { throw new UnsupportedOperationException(); }
  
  public ConcurrentMap<K, V> asMap() { throw new UnsupportedOperationException(); }
}
