package com.google.common.cache;

import com.google.common.annotations.GwtCompatible;
import com.google.common.annotations.GwtIncompatible;
import com.google.common.base.Function;
import com.google.common.base.Preconditions;
import com.google.common.base.Supplier;
import com.google.common.util.concurrent.Futures;
import com.google.common.util.concurrent.ListenableFuture;
import java.util.Map;
import java.util.concurrent.Executor;

@ElementTypesAreNonnullByDefault
@GwtCompatible(emulated = true)
public abstract class CacheLoader<K, V> extends Object {
  public abstract V load(K paramK) throws Exception;
  
  @GwtIncompatible
  public ListenableFuture<V> reload(K key, V oldValue) throws Exception {
    Preconditions.checkNotNull(key);
    Preconditions.checkNotNull(oldValue);
    return Futures.immediateFuture(load(key));
  }
  
  public Map<K, V> loadAll(Iterable<? extends K> keys) throws Exception { throw new UnsupportedLoadingOperationException(); }
  
  public static <K, V> CacheLoader<K, V> from(Function<K, V> function) { return new FunctionToCacheLoader(function); }
  
  public static <V> CacheLoader<Object, V> from(Supplier<V> supplier) { return new SupplierToCacheLoader(supplier); }
  
  @GwtIncompatible
  public static <K, V> CacheLoader<K, V> asyncReloading(CacheLoader<K, V> loader, Executor executor) {
    Preconditions.checkNotNull(loader);
    Preconditions.checkNotNull(executor);
    return new Object(loader, executor);
  }
}
