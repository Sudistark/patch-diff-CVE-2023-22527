package com.google.common.base;

import com.google.common.annotations.GwtCompatible;
import com.google.errorprone.annotations.CheckReturnValue;
import com.google.errorprone.annotations.ForOverride;
import com.google.errorprone.annotations.InlineMe;
import com.google.errorprone.annotations.concurrent.LazyInit;
import com.google.j2objc.annotations.RetainedWith;
import javax.annotation.CheckForNull;

@ElementTypesAreNonnullByDefault
@GwtCompatible
public abstract class Converter<A, B> extends Object implements Function<A, B> {
  private final boolean handleNullAutomatically;
  
  @LazyInit
  @CheckForNull
  @RetainedWith
  private Converter<B, A> reverse;
  
  protected Converter() { this(true); }
  
  Converter(boolean handleNullAutomatically) { this.handleNullAutomatically = handleNullAutomatically; }
  
  @ForOverride
  protected abstract B doForward(A paramA);
  
  @ForOverride
  protected abstract A doBackward(B paramB);
  
  @CheckForNull
  public final B convert(@CheckForNull A a) { return (B)correctedDoForward(a); }
  
  @CheckForNull
  B correctedDoForward(@CheckForNull A a) {
    if (this.handleNullAutomatically)
      return (B)((a == null) ? null : Preconditions.checkNotNull(doForward(a))); 
    return (B)unsafeDoForward(a);
  }
  
  @CheckForNull
  A correctedDoBackward(@CheckForNull B b) {
    if (this.handleNullAutomatically)
      return (A)((b == null) ? null : Preconditions.checkNotNull(doBackward(b))); 
    return (A)unsafeDoBackward(b);
  }
  
  @CheckForNull
  private B unsafeDoForward(@CheckForNull A a) { return (B)doForward(NullnessCasts.uncheckedCastNullableTToT(a)); }
  
  @CheckForNull
  private A unsafeDoBackward(@CheckForNull B b) { return (A)doBackward(NullnessCasts.uncheckedCastNullableTToT(b)); }
  
  public Iterable<B> convertAll(Iterable<? extends A> fromIterable) {
    Preconditions.checkNotNull(fromIterable, "fromIterable");
    return new Object(this, fromIterable);
  }
  
  @CheckReturnValue
  public Converter<B, A> reverse() {
    Converter<B, A> result = this.reverse;
    return (result == null) ? (this.reverse = new ReverseConverter(this)) : result;
  }
  
  public final <C> Converter<A, C> andThen(Converter<B, C> secondConverter) { return doAndThen(secondConverter); }
  
  <C> Converter<A, C> doAndThen(Converter<B, C> secondConverter) { return new ConverterComposition(this, (Converter)Preconditions.checkNotNull(secondConverter)); }
  
  @Deprecated
  @InlineMe(replacement = "this.convert(a)")
  public final B apply(A a) { return (B)convert(a); }
  
  public boolean equals(@CheckForNull Object object) { return super.equals(object); }
  
  public static <A, B> Converter<A, B> from(Function<? super A, ? extends B> forwardFunction, Function<? super B, ? extends A> backwardFunction) { return new FunctionBasedConverter(forwardFunction, backwardFunction, null); }
  
  public static <T> Converter<T, T> identity() { return IdentityConverter.INSTANCE; }
}
