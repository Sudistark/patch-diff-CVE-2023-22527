package com.google.common.base;

import com.google.common.annotations.GwtCompatible;
import java.util.Objects;

@ElementTypesAreNonnullByDefault
@GwtCompatible
public static final abstract enum CaseFormat {
  LOWER_HYPHEN(CharMatcher.is('-'), "-"),
  LOWER_UNDERSCORE(CharMatcher.is('_'), "_"),
  LOWER_CAMEL(CharMatcher.inRange('A', 'Z'), ""),
  UPPER_CAMEL(CharMatcher.inRange('A', 'Z'), ""),
  UPPER_UNDERSCORE(CharMatcher.is('_'), "_");
  
  private final CharMatcher wordBoundary;
  
  private final String wordSeparator;
  
  CaseFormat(CharMatcher wordBoundary, String wordSeparator) {
    this.wordBoundary = wordBoundary;
    this.wordSeparator = wordSeparator;
  }
  
  public final String to(CaseFormat format, String str) {
    Preconditions.checkNotNull(format);
    Preconditions.checkNotNull(str);
    return (format == this) ? str : convert(format, str);
  }
  
  String convert(CaseFormat format, String s) {
    StringBuilder out = null;
    int i = 0;
    int j = -1;
    while ((j = this.wordBoundary.indexIn(s, ++j)) != -1) {
      if (i == 0) {
        out = new StringBuilder(s.length() + 4 * format.wordSeparator.length());
        out.append(format.normalizeFirstWord(s.substring(i, j)));
      } else {
        ((StringBuilder)Objects.requireNonNull(out)).append(format.normalizeWord(s.substring(i, j)));
      } 
      out.append(format.wordSeparator);
      i = j + this.wordSeparator.length();
    } 
    return (i == 0) ? 
      format.normalizeFirstWord(s) : (
      (StringBuilder)Objects.requireNonNull(out)).append(format.normalizeWord(s.substring(i))).toString();
  }
  
  public Converter<String, String> converterTo(CaseFormat targetFormat) { return new StringConverter(this, targetFormat); }
  
  String normalizeFirstWord(String word) { return normalizeWord(word); }
  
  private static String firstCharOnlyToUpper(String word) {
    return word.isEmpty() ? 
      word : (
      Ascii.toUpperCase(word.charAt(0)) + Ascii.toLowerCase(word.substring(1)));
  }
  
  abstract String normalizeWord(String paramString);
}
