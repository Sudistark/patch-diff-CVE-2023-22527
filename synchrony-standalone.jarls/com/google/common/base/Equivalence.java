package com.google.common.base;

import com.google.common.annotations.GwtCompatible;
import com.google.errorprone.annotations.ForOverride;
import java.util.function.BiPredicate;
import javax.annotation.CheckForNull;

@ElementTypesAreNonnullByDefault
@GwtCompatible
public abstract class Equivalence<T> extends Object implements BiPredicate<T, T> {
  public final boolean equivalent(@CheckForNull T a, @CheckForNull T b) {
    if (a == b)
      return true; 
    if (a == null || b == null)
      return false; 
    return doEquivalent(a, b);
  }
  
  @Deprecated
  public final boolean test(@CheckForNull T t, @CheckForNull T u) { return equivalent(t, u); }
  
  @ForOverride
  protected abstract boolean doEquivalent(T paramT1, T paramT2);
  
  public final int hash(@CheckForNull T t) {
    if (t == null)
      return 0; 
    return doHash(t);
  }
  
  @ForOverride
  protected abstract int doHash(T paramT);
  
  public final <F> Equivalence<F> onResultOf(Function<? super F, ? extends T> function) { return new FunctionalEquivalence(function, this); }
  
  public final <S extends T> Wrapper<S> wrap(@ParametricNullness S reference) { return new Wrapper(this, reference, null); }
  
  @GwtCompatible(serializable = true)
  public final <S extends T> Equivalence<Iterable<S>> pairwise() { return new PairwiseEquivalence(this); }
  
  public final Predicate<T> equivalentTo(@CheckForNull T target) { return new EquivalentToPredicate(this, target); }
  
  public static Equivalence<Object> equals() { return Equals.INSTANCE; }
  
  public static Equivalence<Object> identity() { return Identity.INSTANCE; }
}
