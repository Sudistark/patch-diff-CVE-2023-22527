package com.google.common.base;

import com.google.common.annotations.GwtCompatible;
import com.google.common.annotations.GwtIncompatible;
import com.google.common.annotations.J2ktIncompatible;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.regex.Pattern;

@ElementTypesAreNonnullByDefault
@GwtCompatible(emulated = true)
public final class Predicates {
  @GwtCompatible(serializable = true)
  public static <T> Predicate<T> alwaysTrue() { return ObjectPredicate.ALWAYS_TRUE.withNarrowedType(); }
  
  @GwtCompatible(serializable = true)
  public static <T> Predicate<T> alwaysFalse() { return ObjectPredicate.ALWAYS_FALSE.withNarrowedType(); }
  
  @GwtCompatible(serializable = true)
  public static <T> Predicate<T> isNull() { return ObjectPredicate.IS_NULL.withNarrowedType(); }
  
  @GwtCompatible(serializable = true)
  public static <T> Predicate<T> notNull() { return ObjectPredicate.NOT_NULL.withNarrowedType(); }
  
  public static <T> Predicate<T> not(Predicate<T> predicate) { return new NotPredicate(predicate); }
  
  public static <T> Predicate<T> and(Iterable<? extends Predicate<? super T>> components) { return new AndPredicate(defensiveCopy(components), null); }
  
  @SafeVarargs
  public static <T> Predicate<T> and(Predicate... components) { return new AndPredicate(defensiveCopy(components), null); }
  
  public static <T> Predicate<T> and(Predicate<? super T> first, Predicate<? super T> second) { return new AndPredicate(asList((Predicate)Preconditions.checkNotNull(first), (Predicate)Preconditions.checkNotNull(second)), null); }
  
  public static <T> Predicate<T> or(Iterable<? extends Predicate<? super T>> components) { return new OrPredicate(defensiveCopy(components), null); }
  
  @SafeVarargs
  public static <T> Predicate<T> or(Predicate... components) { return new OrPredicate(defensiveCopy(components), null); }
  
  public static <T> Predicate<T> or(Predicate<? super T> first, Predicate<? super T> second) { return new OrPredicate(asList((Predicate)Preconditions.checkNotNull(first), (Predicate)Preconditions.checkNotNull(second)), null); }
  
  public static <T> Predicate<T> equalTo(@ParametricNullness T target) {
    return (target == null) ? 
      isNull() : (
      new IsEqualToPredicate(target, null)).withNarrowedType();
  }
  
  @GwtIncompatible
  public static <T> Predicate<T> instanceOf(Class<?> clazz) { return new InstanceOfPredicate(clazz, null); }
  
  @J2ktIncompatible
  @GwtIncompatible
  public static Predicate<Class<?>> subtypeOf(Class<?> clazz) { return new SubtypeOfPredicate(clazz, null); }
  
  public static <T> Predicate<T> in(Collection<? extends T> target) { return new InPredicate(target, null); }
  
  public static <A, B> Predicate<A> compose(Predicate<B> predicate, Function<A, ? extends B> function) { return new CompositionPredicate(predicate, function, null); }
  
  @J2ktIncompatible
  @GwtIncompatible
  public static Predicate<CharSequence> containsPattern(String pattern) { return new ContainsPatternFromStringPredicate(pattern); }
  
  @J2ktIncompatible
  @GwtIncompatible("java.util.regex.Pattern")
  public static Predicate<CharSequence> contains(Pattern pattern) { return new ContainsPatternPredicate(new JdkPattern(pattern)); }
  
  private static String toStringHelper(String methodName, Iterable<?> components) {
    StringBuilder builder = (new StringBuilder("Predicates.")).append(methodName).append('(');
    boolean first = true;
    for (Object o : components) {
      if (!first)
        builder.append(','); 
      builder.append(o);
      first = false;
    } 
    return builder.append(')').toString();
  }
  
  private static <T> List<Predicate<? super T>> asList(Predicate<? super T> first, Predicate<? super T> second) { return Arrays.asList(new Predicate[] { first, second }); }
  
  private static <T> List<T> defensiveCopy(T... array) { return defensiveCopy(Arrays.asList(array)); }
  
  static <T> List<T> defensiveCopy(Iterable<T> iterable) {
    ArrayList<T> list = new ArrayList<T>();
    for (T element : iterable)
      list.add(Preconditions.checkNotNull(element)); 
    return list;
  }
}
