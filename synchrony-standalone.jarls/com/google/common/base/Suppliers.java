package com.google.common.base;

import com.google.common.annotations.GwtCompatible;
import java.util.concurrent.TimeUnit;

@ElementTypesAreNonnullByDefault
@GwtCompatible
public final class Suppliers {
  public static <F, T> Supplier<T> compose(Function<? super F, T> function, Supplier<F> supplier) { return new SupplierComposition(function, supplier); }
  
  public static <T> Supplier<T> memoize(Supplier<T> delegate) {
    if (delegate instanceof NonSerializableMemoizingSupplier || delegate instanceof MemoizingSupplier)
      return delegate; 
    return (delegate instanceof java.io.Serializable) ? 
      new MemoizingSupplier(delegate) : 
      new NonSerializableMemoizingSupplier(delegate);
  }
  
  public static <T> Supplier<T> memoizeWithExpiration(Supplier<T> delegate, long duration, TimeUnit unit) { return new ExpiringMemoizingSupplier(delegate, duration, unit); }
  
  public static <T> Supplier<T> ofInstance(@ParametricNullness T instance) { return new SupplierOfInstance(instance); }
  
  public static <T> Supplier<T> synchronizedSupplier(Supplier<T> delegate) { return new ThreadSafeSupplier(delegate); }
  
  public static <T> Function<Supplier<T>, T> supplierFunction() { return SupplierFunctionImpl.INSTANCE; }
}
