package com.google.common.base;

import com.google.common.annotations.GwtCompatible;
import com.google.errorprone.annotations.DoNotMock;
import java.io.Serializable;
import java.util.Optional;
import java.util.Set;
import javax.annotation.CheckForNull;

@DoNotMock("Use Optional.of(value) or Optional.absent()")
@ElementTypesAreNonnullByDefault
@GwtCompatible(serializable = true)
public abstract class Optional<T> extends Object implements Serializable {
  private static final long serialVersionUID = 0L;
  
  public static <T> Optional<T> absent() { return Absent.withType(); }
  
  public static <T> Optional<T> of(T reference) { return new Present(Preconditions.checkNotNull(reference)); }
  
  public static <T> Optional<T> fromNullable(@CheckForNull T nullableReference) { return (nullableReference == null) ? absent() : new Present(nullableReference); }
  
  @CheckForNull
  public static <T> Optional<T> fromJavaUtil(@CheckForNull Optional<T> javaUtilOptional) { return (javaUtilOptional == null) ? null : fromNullable(javaUtilOptional.orElse(null)); }
  
  @CheckForNull
  public static <T> Optional<T> toJavaUtil(@CheckForNull Optional<T> googleOptional) { return (googleOptional == null) ? null : googleOptional.toJavaUtil(); }
  
  public Optional<T> toJavaUtil() { return Optional.ofNullable(orNull()); }
  
  public abstract boolean isPresent();
  
  public abstract T get();
  
  public abstract T or(T paramT);
  
  public abstract Optional<T> or(Optional<? extends T> paramOptional);
  
  public abstract T or(Supplier<? extends T> paramSupplier);
  
  @CheckForNull
  public abstract T orNull();
  
  public abstract Set<T> asSet();
  
  public abstract <V> Optional<V> transform(Function<? super T, V> paramFunction);
  
  public abstract boolean equals(@CheckForNull Object paramObject);
  
  public abstract int hashCode();
  
  public abstract String toString();
  
  public static <T> Iterable<T> presentInstances(Iterable<? extends Optional<? extends T>> optionals) {
    Preconditions.checkNotNull(optionals);
    return new Object(optionals);
  }
}
