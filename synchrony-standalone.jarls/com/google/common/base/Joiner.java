package com.google.common.base;

import com.google.common.annotations.GwtCompatible;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import java.io.IOException;
import java.util.Arrays;
import java.util.Iterator;
import java.util.Objects;
import javax.annotation.CheckForNull;

@ElementTypesAreNonnullByDefault
@GwtCompatible
public class Joiner {
  private final String separator;
  
  public static Joiner on(String separator) { return new Joiner(separator); }
  
  public static Joiner on(char separator) { return new Joiner(String.valueOf(separator)); }
  
  private Joiner(String separator) { this.separator = (String)Preconditions.checkNotNull(separator); }
  
  private Joiner(Joiner prototype) { this.separator = prototype.separator; }
  
  @CanIgnoreReturnValue
  public <A extends Appendable> A appendTo(A appendable, Iterable<? extends Object> parts) throws IOException { return (A)appendTo(appendable, parts.iterator()); }
  
  @CanIgnoreReturnValue
  public <A extends Appendable> A appendTo(A appendable, Iterator<? extends Object> parts) throws IOException {
    Preconditions.checkNotNull(appendable);
    if (parts.hasNext()) {
      appendable.append(toString(parts.next()));
      while (parts.hasNext()) {
        appendable.append(this.separator);
        appendable.append(toString(parts.next()));
      } 
    } 
    return appendable;
  }
  
  @CanIgnoreReturnValue
  public final <A extends Appendable> A appendTo(A appendable, Object[] parts) throws IOException { return (A)appendTo(appendable, Arrays.asList(parts)); }
  
  @CanIgnoreReturnValue
  public final <A extends Appendable> A appendTo(A appendable, @CheckForNull Object first, @CheckForNull Object second, Object... rest) throws IOException { return (A)appendTo(appendable, iterable(first, second, rest)); }
  
  @CanIgnoreReturnValue
  public final StringBuilder appendTo(StringBuilder builder, Iterable<? extends Object> parts) { return appendTo(builder, parts.iterator()); }
  
  @CanIgnoreReturnValue
  public final StringBuilder appendTo(StringBuilder builder, Iterator<? extends Object> parts) {
    try {
      appendTo(builder, parts);
    } catch (IOException impossible) {
      throw new AssertionError(impossible);
    } 
    return builder;
  }
  
  @CanIgnoreReturnValue
  public final StringBuilder appendTo(StringBuilder builder, Object[] parts) { return appendTo(builder, Arrays.asList(parts)); }
  
  @CanIgnoreReturnValue
  public final StringBuilder appendTo(StringBuilder builder, @CheckForNull Object first, @CheckForNull Object second, Object... rest) { return appendTo(builder, iterable(first, second, rest)); }
  
  public final String join(Iterable<? extends Object> parts) { return join(parts.iterator()); }
  
  public final String join(Iterator<? extends Object> parts) { return appendTo(new StringBuilder(), parts).toString(); }
  
  public final String join(Object[] parts) { return join(Arrays.asList(parts)); }
  
  public final String join(@CheckForNull Object first, @CheckForNull Object second, Object... rest) { return join(iterable(first, second, rest)); }
  
  public Joiner useForNull(String nullText) {
    Preconditions.checkNotNull(nullText);
    return new Object(this, this, nullText);
  }
  
  public Joiner skipNulls() { return new Object(this, this); }
  
  public MapJoiner withKeyValueSeparator(char keyValueSeparator) { return withKeyValueSeparator(String.valueOf(keyValueSeparator)); }
  
  public MapJoiner withKeyValueSeparator(String keyValueSeparator) { return new MapJoiner(this, keyValueSeparator, null); }
  
  CharSequence toString(@CheckForNull Object part) {
    Objects.requireNonNull(part);
    return (part instanceof CharSequence) ? (CharSequence)part : part.toString();
  }
  
  private static Iterable<Object> iterable(@CheckForNull Object first, @CheckForNull Object second, Object[] rest) {
    Preconditions.checkNotNull(rest);
    return new Object(rest, first, second);
  }
}
