package com.google.common.graph;

import com.google.common.base.Preconditions;
import java.util.Map;
import javax.annotation.CheckForNull;

@ElementTypesAreNonnullByDefault
final class MapRetrievalCache<K, V> extends MapIteratorCache<K, V> {
  MapRetrievalCache(Map<K, V> backingMap) { super(backingMap); }
  
  @CheckForNull
  V get(Object key) {
    Preconditions.checkNotNull(key);
    V value = (V)getIfCached(key);
    if (value != null)
      return value; 
    value = (V)getWithoutCaching(key);
    if (value != null)
      addToCache(key, value); 
    return value;
  }
  
  @CheckForNull
  V getIfCached(@CheckForNull Object key) {
    V value = (V)super.getIfCached(key);
    if (value != null)
      return value; 
    CacheEntry<K, V> entry = this.cacheEntry1;
    if (entry != null && entry.key == key)
      return (V)entry.value; 
    entry = this.cacheEntry2;
    if (entry != null && entry.key == key) {
      addToCache(entry);
      return (V)entry.value;
    } 
    return null;
  }
  
  void clearCache() {
    super.clearCache();
    this.cacheEntry1 = null;
    this.cacheEntry2 = null;
  }
  
  private void addToCache(K key, V value) { addToCache(new CacheEntry(key, value)); }
  
  private void addToCache(CacheEntry<K, V> entry) {
    this.cacheEntry2 = this.cacheEntry1;
    this.cacheEntry1 = entry;
  }
}
