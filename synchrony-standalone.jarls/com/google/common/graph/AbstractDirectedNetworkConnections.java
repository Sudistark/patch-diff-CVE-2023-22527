package com.google.common.graph;

import com.google.common.base.Preconditions;
import com.google.common.collect.Sets;
import java.util.Collections;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

@ElementTypesAreNonnullByDefault
abstract class AbstractDirectedNetworkConnections<N, E> extends Object implements NetworkConnections<N, E> {
  final Map<E, N> inEdgeMap;
  
  final Map<E, N> outEdgeMap;
  
  private int selfLoopCount;
  
  AbstractDirectedNetworkConnections(Map<E, N> inEdgeMap, Map<E, N> outEdgeMap, int selfLoopCount) {
    this.inEdgeMap = (Map)Preconditions.checkNotNull(inEdgeMap);
    this.outEdgeMap = (Map)Preconditions.checkNotNull(outEdgeMap);
    this.selfLoopCount = Graphs.checkNonNegative(selfLoopCount);
    Preconditions.checkState((selfLoopCount <= inEdgeMap.size() && selfLoopCount <= outEdgeMap.size()));
  }
  
  public Set<N> adjacentNodes() { return Sets.union(predecessors(), successors()); }
  
  public Set<E> incidentEdges() { return new Object(this); }
  
  public Set<E> inEdges() { return Collections.unmodifiableSet(this.inEdgeMap.keySet()); }
  
  public Set<E> outEdges() { return Collections.unmodifiableSet(this.outEdgeMap.keySet()); }
  
  public N adjacentNode(E edge) { return (N)Objects.requireNonNull(this.outEdgeMap.get(edge)); }
  
  public N removeInEdge(E edge, boolean isSelfLoop) {
    if (isSelfLoop)
      Graphs.checkNonNegative(--this.selfLoopCount); 
    N previousNode = (N)this.inEdgeMap.remove(edge);
    return (N)Objects.requireNonNull(previousNode);
  }
  
  public N removeOutEdge(E edge) {
    N previousNode = (N)this.outEdgeMap.remove(edge);
    return (N)Objects.requireNonNull(previousNode);
  }
  
  public void addInEdge(E edge, N node, boolean isSelfLoop) {
    Preconditions.checkNotNull(edge);
    Preconditions.checkNotNull(node);
    if (isSelfLoop)
      Graphs.checkPositive(++this.selfLoopCount); 
    N previousNode = (N)this.inEdgeMap.put(edge, node);
    Preconditions.checkState((previousNode == null));
  }
  
  public void addOutEdge(E edge, N node) {
    Preconditions.checkNotNull(edge);
    Preconditions.checkNotNull(node);
    N previousNode = (N)this.outEdgeMap.put(edge, node);
    Preconditions.checkState((previousNode == null));
  }
}
