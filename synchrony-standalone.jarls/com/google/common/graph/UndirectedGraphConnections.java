package com.google.common.graph;

import com.google.common.base.Preconditions;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Iterators;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;
import javax.annotation.CheckForNull;

@ElementTypesAreNonnullByDefault
final class UndirectedGraphConnections<N, V> extends Object implements GraphConnections<N, V> {
  private final Map<N, V> adjacentNodeValues;
  
  private UndirectedGraphConnections(Map<N, V> adjacentNodeValues) { this.adjacentNodeValues = (Map)Preconditions.checkNotNull(adjacentNodeValues); }
  
  static <N, V> UndirectedGraphConnections<N, V> of(ElementOrder<N> incidentEdgeOrder) {
    switch (null.$SwitchMap$com$google$common$graph$ElementOrder$Type[incidentEdgeOrder.type().ordinal()]) {
      case 1:
        return new UndirectedGraphConnections(new HashMap(2, 1.0F));
      case 2:
        return new UndirectedGraphConnections(new LinkedHashMap(2, 1.0F));
    } 
    throw new AssertionError(incidentEdgeOrder.type());
  }
  
  static <N, V> UndirectedGraphConnections<N, V> ofImmutable(Map<N, V> adjacentNodeValues) { return new UndirectedGraphConnections(ImmutableMap.copyOf(adjacentNodeValues)); }
  
  public Set<N> adjacentNodes() { return Collections.unmodifiableSet(this.adjacentNodeValues.keySet()); }
  
  public Set<N> predecessors() { return adjacentNodes(); }
  
  public Set<N> successors() { return adjacentNodes(); }
  
  public Iterator<EndpointPair<N>> incidentEdgeIterator(N thisNode) {
    return Iterators.transform(this.adjacentNodeValues
        .keySet().iterator(), incidentNode -> 
        EndpointPair.unordered(thisNode, incidentNode));
  }
  
  @CheckForNull
  public V value(N node) { return (V)this.adjacentNodeValues.get(node); }
  
  public void removePredecessor(N node) { V unused = (V)removeSuccessor(node); }
  
  @CheckForNull
  public V removeSuccessor(N node) { return (V)this.adjacentNodeValues.remove(node); }
  
  public void addPredecessor(N node, V value) { V unused = (V)addSuccessor(node, value); }
  
  @CheckForNull
  public V addSuccessor(N node, V value) { return (V)this.adjacentNodeValues.put(node, value); }
}
