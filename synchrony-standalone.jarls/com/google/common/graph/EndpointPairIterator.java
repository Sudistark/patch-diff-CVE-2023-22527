package com.google.common.graph;

import com.google.common.base.Preconditions;
import com.google.common.collect.AbstractIterator;
import com.google.common.collect.ImmutableSet;
import java.util.Iterator;
import javax.annotation.CheckForNull;

@ElementTypesAreNonnullByDefault
abstract class EndpointPairIterator<N> extends AbstractIterator<EndpointPair<N>> {
  private final BaseGraph<N> graph;
  
  private final Iterator<N> nodeIterator;
  
  @CheckForNull
  N node;
  
  Iterator<N> successorIterator;
  
  static <N> EndpointPairIterator<N> of(BaseGraph<N> graph) { return graph.isDirected() ? new Directed(graph, null) : new Undirected(graph, null); }
  
  private EndpointPairIterator(BaseGraph<N> graph) {
    this.node = null;
    this.successorIterator = ImmutableSet.of().iterator();
    this.graph = graph;
    this.nodeIterator = graph.nodes().iterator();
  }
  
  final boolean advance() {
    Preconditions.checkState(!this.successorIterator.hasNext());
    if (!this.nodeIterator.hasNext())
      return false; 
    this.node = this.nodeIterator.next();
    this.successorIterator = this.graph.successors(this.node).iterator();
    return true;
  }
}
