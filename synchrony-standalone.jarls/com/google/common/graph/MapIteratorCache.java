package com.google.common.graph;

import com.google.common.base.Preconditions;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import java.util.Map;
import java.util.Set;
import javax.annotation.CheckForNull;

@ElementTypesAreNonnullByDefault
class MapIteratorCache<K, V> extends Object {
  private final Map<K, V> backingMap;
  
  MapIteratorCache(Map<K, V> backingMap) { this.backingMap = (Map)Preconditions.checkNotNull(backingMap); }
  
  @CheckForNull
  @CanIgnoreReturnValue
  final V put(K key, V value) {
    Preconditions.checkNotNull(key);
    Preconditions.checkNotNull(value);
    clearCache();
    return (V)this.backingMap.put(key, value);
  }
  
  @CheckForNull
  @CanIgnoreReturnValue
  final V remove(Object key) {
    Preconditions.checkNotNull(key);
    clearCache();
    return (V)this.backingMap.remove(key);
  }
  
  final void clear() {
    clearCache();
    this.backingMap.clear();
  }
  
  @CheckForNull
  V get(Object key) {
    Preconditions.checkNotNull(key);
    V value = (V)getIfCached(key);
    if (value == null)
      return (V)getWithoutCaching(key); 
    return value;
  }
  
  @CheckForNull
  final V getWithoutCaching(Object key) {
    Preconditions.checkNotNull(key);
    return (V)this.backingMap.get(key);
  }
  
  final boolean containsKey(@CheckForNull Object key) { return (getIfCached(key) != null || this.backingMap.containsKey(key)); }
  
  final Set<K> unmodifiableKeySet() { return new Object(this); }
  
  @CheckForNull
  V getIfCached(@CheckForNull Object key) {
    Map.Entry<K, V> entry = this.cacheEntry;
    if (entry != null && entry.getKey() == key)
      return (V)entry.getValue(); 
    return null;
  }
  
  void clearCache() { this.cacheEntry = null; }
}
