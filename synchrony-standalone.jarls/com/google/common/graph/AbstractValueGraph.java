package com.google.common.graph;

import com.google.common.annotations.Beta;
import com.google.common.collect.Maps;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import javax.annotation.CheckForNull;

@ElementTypesAreNonnullByDefault
@Beta
public abstract class AbstractValueGraph<N, V> extends AbstractBaseGraph<N> implements ValueGraph<N, V> {
  public Graph<N> asGraph() { return new Object(this); }
  
  public Optional<V> edgeValue(N nodeU, N nodeV) { return Optional.ofNullable(edgeValueOrDefault(nodeU, nodeV, null)); }
  
  public Optional<V> edgeValue(EndpointPair<N> endpoints) { return Optional.ofNullable(edgeValueOrDefault(endpoints, null)); }
  
  public final boolean equals(@CheckForNull Object obj) {
    if (obj == this)
      return true; 
    if (!(obj instanceof ValueGraph))
      return false; 
    ValueGraph<?, ?> other = (ValueGraph)obj;
    return (isDirected() == other.isDirected() && 
      nodes().equals(other.nodes()) && 
      edgeValueMap(this).equals(edgeValueMap(other)));
  }
  
  public final int hashCode() { return edgeValueMap(this).hashCode(); }
  
  public String toString() {
    return "isDirected: " + 
      isDirected() + ", allowsSelfLoops: " + 
      
      allowsSelfLoops() + ", nodes: " + 
      
      nodes() + ", edges: " + 
      
      edgeValueMap(this);
  }
  
  private static <N, V> Map<EndpointPair<N>, V> edgeValueMap(ValueGraph<N, V> graph) {
    return Maps.asMap(graph
        .edges(), edge -> 

        
        Objects.requireNonNull(graph.edgeValueOrDefault(edge.nodeU(), edge.nodeV(), null)));
  }
}
