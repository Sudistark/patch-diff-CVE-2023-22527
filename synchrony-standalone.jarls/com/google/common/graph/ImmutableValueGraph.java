package com.google.common.graph;

import com.google.common.annotations.Beta;
import com.google.common.base.Function;
import com.google.common.base.Preconditions;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Maps;
import com.google.errorprone.annotations.Immutable;
import java.util.Objects;
import java.util.Set;
import javax.annotation.CheckForNull;

@Immutable(containerOf = {"N", "V"})
@ElementTypesAreNonnullByDefault
@Beta
public final class ImmutableValueGraph<N, V> extends StandardValueGraph<N, V> {
  private ImmutableValueGraph(ValueGraph<N, V> graph) { super(ValueGraphBuilder.from(graph), getNodeConnections(graph), graph.edges().size()); }
  
  public static <N, V> ImmutableValueGraph<N, V> copyOf(ValueGraph<N, V> graph) {
    return (graph instanceof ImmutableValueGraph) ? 
      (ImmutableValueGraph)graph : 
      new ImmutableValueGraph(graph);
  }
  
  @Deprecated
  public static <N, V> ImmutableValueGraph<N, V> copyOf(ImmutableValueGraph<N, V> graph) { return (ImmutableValueGraph)Preconditions.checkNotNull(graph); }
  
  public ElementOrder<N> incidentEdgeOrder() { return ElementOrder.stable(); }
  
  public ImmutableGraph<N> asGraph() { return new ImmutableGraph(this); }
  
  private static <N, V> ImmutableMap<N, GraphConnections<N, V>> getNodeConnections(ValueGraph<N, V> graph) {
    ImmutableMap.Builder<N, GraphConnections<N, V>> nodeConnections = ImmutableMap.builder();
    for (N node : graph.nodes())
      nodeConnections.put(node, connectionsOf(graph, node)); 
    return nodeConnections.buildOrThrow();
  }
  
  private static <N, V> GraphConnections<N, V> connectionsOf(ValueGraph<N, V> graph, N node) {
    Function<N, V> successorNodeToValueFn = successorNode -> 

      
      Objects.requireNonNull(graph.edgeValueOrDefault(node, successorNode, null));
    return graph.isDirected() ? 
      DirectedGraphConnections.ofImmutable(node, graph
        .incidentEdges(node), successorNodeToValueFn) : 
      UndirectedGraphConnections.ofImmutable(
        Maps.asMap(graph.adjacentNodes(node), successorNodeToValueFn));
  }
}
