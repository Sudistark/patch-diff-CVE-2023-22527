package com.hazelcast.security.permission;

import java.security.Permission;
import java.util.HashMap;
import java.util.Map;

public final class ActionConstants {
  public static final String ACTION_ALL = "all";
  
  public static final String ACTION_CREATE = "create";
  
  public static final String ACTION_DESTROY = "destroy";
  
  public static final String ACTION_MODIFY = "modify";
  
  public static final String ACTION_READ = "read";
  
  public static final String ACTION_REMOVE = "remove";
  
  public static final String ACTION_LOCK = "lock";
  
  public static final String ACTION_LISTEN = "listen";
  
  public static final String ACTION_RELEASE = "release";
  
  public static final String ACTION_ACQUIRE = "acquire";
  
  public static final String ACTION_PUT = "put";
  
  public static final String ACTION_ADD = "add";
  
  public static final String ACTION_INDEX = "index";
  
  public static final String ACTION_INTERCEPT = "intercept";
  
  public static final String ACTION_PUBLISH = "publish";
  
  public static final String ACTION_AGGREGATE = "aggregate";
  
  public static final String ACTION_PROJECTION = "projection";
  
  public static final String ACTION_USER_CODE_DEPLOY = "deploy";
  
  public static final String LISTENER_INSTANCE = "instance";
  
  public static final String LISTENER_MEMBER = "member";
  
  public static final String LISTENER_MIGRATION = "migration";
  
  private static final Map<String, PermissionFactory> PERMISSION_FACTORY_MAP = new HashMap();
  
  static  {
    PERMISSION_FACTORY_MAP.put("hz:impl:queueService", new Object());
    PERMISSION_FACTORY_MAP.put("hz:impl:mapService", new Object());
    PERMISSION_FACTORY_MAP.put("hz:impl:multiMapService", new Object());
    PERMISSION_FACTORY_MAP.put("hz:impl:listService", new Object());
    PERMISSION_FACTORY_MAP.put("hz:impl:setService", new Object());
    PERMISSION_FACTORY_MAP.put("hz:impl:atomicLongService", new Object());
    PERMISSION_FACTORY_MAP.put("hz:raft:atomicLongService", new Object());
    PERMISSION_FACTORY_MAP.put("hz:impl:countDownLatchService", new Object());
    PERMISSION_FACTORY_MAP.put("hz:raft:countDownLatchService", new Object());
    PERMISSION_FACTORY_MAP.put("hz:impl:semaphoreService", new Object());
    PERMISSION_FACTORY_MAP.put("hz:raft:semaphoreService", new Object());
    PERMISSION_FACTORY_MAP.put("hz:impl:topicService", new Object());
    PERMISSION_FACTORY_MAP.put("hz:impl:lockService", new Object());
    PERMISSION_FACTORY_MAP.put("hz:raft:lockService", new Object());
    PERMISSION_FACTORY_MAP.put("hz:impl:executorService", new Object());
    PERMISSION_FACTORY_MAP.put("hz:impl:idGeneratorService", new Object());
    PERMISSION_FACTORY_MAP.put("hz:impl:flakeIdGeneratorService", new Object());
    PERMISSION_FACTORY_MAP.put("hz:impl:mapReduceService", new Object());
    PERMISSION_FACTORY_MAP.put("hz:impl:replicatedMapService", new Object());
    PERMISSION_FACTORY_MAP.put("hz:impl:atomicReferenceService", new Object());
    PERMISSION_FACTORY_MAP.put("hz:raft:atomicRefService", new Object());
    PERMISSION_FACTORY_MAP.put("hz:impl:cacheService", new Object());
    PERMISSION_FACTORY_MAP.put("hz:impl:ringbufferService", new Object());
    PERMISSION_FACTORY_MAP.put("hz:impl:durableExecutorService", new Object());
    PERMISSION_FACTORY_MAP.put("hz:impl:cardinalityEstimatorService", new Object());
    PERMISSION_FACTORY_MAP.put("user-code-deployment-service", new Object());
    PERMISSION_FACTORY_MAP.put("hz:impl:PNCounterService", new Object());
    PERMISSION_FACTORY_MAP.put("hz:impl:reliableTopicService", new Object());
  }
  
  public static Permission getPermission(String name, String serviceName, String... actions) {
    PermissionFactory permissionFactory = (PermissionFactory)PERMISSION_FACTORY_MAP.get(serviceName);
    if (permissionFactory == null)
      throw new IllegalArgumentException("No permissions found for service: " + serviceName); 
    return permissionFactory.create(name, actions);
  }
}
