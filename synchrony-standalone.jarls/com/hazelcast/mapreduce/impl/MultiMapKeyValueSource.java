package com.hazelcast.mapreduce.impl;

import com.hazelcast.internal.partition.InternalPartitionService;
import com.hazelcast.mapreduce.KeyValueSource;
import com.hazelcast.mapreduce.PartitionIdAware;
import com.hazelcast.multimap.impl.MultiMapContainer;
import com.hazelcast.multimap.impl.MultiMapRecord;
import com.hazelcast.multimap.impl.MultiMapService;
import com.hazelcast.multimap.impl.MultiMapValue;
import com.hazelcast.nio.Address;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.BinaryInterface;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import com.hazelcast.spi.NodeEngine;
import com.hazelcast.spi.impl.NodeEngineImpl;
import com.hazelcast.spi.serialization.SerializationService;
import java.io.IOException;
import java.util.Iterator;
import java.util.Map;

@BinaryInterface
public class MultiMapKeyValueSource<K, V> extends KeyValueSource<K, V> implements IdentifiedDataSerializable, PartitionIdAware {
  private final MapReduceSimpleEntry<K, V> simpleEntry = new MapReduceSimpleEntry();
  
  private String multiMapName;
  
  private int partitionId;
  
  private SerializationService ss;
  
  private MultiMapContainer multiMapContainer;
  
  private boolean isBinary;
  
  private K key;
  
  private Iterator<Data> keyIterator;
  
  private Iterator<MultiMapRecord> valueIterator;
  
  private MultiMapRecord multiMapRecord;
  
  MultiMapKeyValueSource() {}
  
  public MultiMapKeyValueSource(String multiMapName) { this.multiMapName = multiMapName; }
  
  public String getMultiMapName() { return this.multiMapName; }
  
  public boolean open(NodeEngine nodeEngine) {
    NodeEngineImpl nei = (NodeEngineImpl)nodeEngine;
    InternalPartitionService internalPartitionService = nei.getPartitionService();
    MultiMapService multiMapService = (MultiMapService)nei.getService("hz:impl:multiMapService");
    this.ss = nei.getSerializationService();
    Address partitionOwner = internalPartitionService.getPartitionOwner(this.partitionId);
    if (partitionOwner == null)
      return false; 
    this.multiMapContainer = multiMapService.getOrCreateCollectionContainer(this.partitionId, this.multiMapName);
    this.isBinary = this.multiMapContainer.getConfig().isBinary();
    this.keyIterator = this.multiMapContainer.keySet().iterator();
    return true;
  }
  
  public void close() {}
  
  public boolean hasNext() {
    if (this.valueIterator != null) {
      boolean hasNext = this.valueIterator.hasNext();
      this.multiMapRecord = hasNext ? (MultiMapRecord)this.valueIterator.next() : null;
      if (hasNext)
        return true; 
    } 
    if (this.keyIterator != null && this.keyIterator.hasNext()) {
      Data dataKey = (Data)this.keyIterator.next();
      this.key = this.ss.toObject(dataKey);
      MultiMapValue wrapper = this.multiMapContainer.getMultiMapValueOrNull(dataKey);
      this.valueIterator = wrapper.getCollection(true).iterator();
      return hasNext();
    } 
    return false;
  }
  
  public K key() {
    if (this.multiMapRecord == null)
      throw new IllegalStateException("no more elements"); 
    return (K)this.key;
  }
  
  public Map.Entry<K, V> element() {
    if (this.multiMapRecord == null)
      throw new IllegalStateException("no more elements"); 
    this.simpleEntry.setKey(this.key);
    Object value = this.multiMapRecord.getObject();
    this.simpleEntry.setValue(this.isBinary ? this.ss.toObject((Data)value) : value);
    return this.simpleEntry;
  }
  
  public boolean reset() {
    this.key = null;
    this.keyIterator = null;
    this.valueIterator = null;
    this.multiMapRecord = null;
    return false;
  }
  
  public void setPartitionId(int partitionId) { this.partitionId = partitionId; }
  
  public void writeData(ObjectDataOutput out) throws IOException { out.writeUTF(this.multiMapName); }
  
  public void readData(ObjectDataInput in) throws IOException { this.multiMapName = in.readUTF(); }
  
  public int getFactoryId() { return MapReduceDataSerializerHook.F_ID; }
  
  public int getId() { return 1; }
}
