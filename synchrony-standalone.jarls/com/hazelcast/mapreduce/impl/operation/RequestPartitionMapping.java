package com.hazelcast.mapreduce.impl.operation;

import com.hazelcast.mapreduce.JobPartitionState;
import com.hazelcast.mapreduce.JobProcessInformation;
import com.hazelcast.mapreduce.impl.MapReduceDataSerializerHook;
import com.hazelcast.mapreduce.impl.MapReduceService;
import com.hazelcast.mapreduce.impl.MapReduceUtil;
import com.hazelcast.mapreduce.impl.task.JobProcessInformationImpl;
import com.hazelcast.mapreduce.impl.task.JobSupervisor;
import com.hazelcast.spi.partition.IPartitionService;
import java.util.Iterator;
import java.util.List;

public class RequestPartitionMapping extends ProcessingOperation {
  public RequestPartitionMapping() {}
  
  public RequestPartitionMapping(String name, String jobId) { super(name, jobId); }
  
  public Object getResponse() { return this.result; }
  
  public void run() {
    JobPartitionState.State nextState;
    int selectedPartition;
    MapReduceService mapReduceService = (MapReduceService)getService();
    JobSupervisor supervisor = mapReduceService.getJobSupervisor(getName(), getJobId());
    if (supervisor == null) {
      this.result = new RequestPartitionResult(RequestPartitionResult.ResultState.NO_SUPERVISOR, -1);
      return;
    } 
    IPartitionService ps = getNodeEngine().getPartitionService();
    List<Integer> memberPartitions = ps.getMemberPartitions(getCallerAddress());
    JobProcessInformationImpl processInformation = supervisor.getJobProcessInformation();
    do {
      selectedPartition = searchMemberPartitionToProcess(processInformation, memberPartitions);
      if (selectedPartition == -1) {
        this.result = new RequestPartitionResult(RequestPartitionResult.ResultState.NO_MORE_PARTITIONS, -1);
        return;
      } 
      nextState = MapReduceUtil.stateChange(getCallerAddress(), selectedPartition, JobPartitionState.State.WAITING, processInformation, supervisor
          .getConfiguration());
    } while (nextState != JobPartitionState.State.MAPPING);
    this.result = new RequestPartitionResult(RequestPartitionResult.ResultState.SUCCESSFUL, selectedPartition);
  }
  
  private int searchMemberPartitionToProcess(JobProcessInformation processInformation, List<Integer> memberPartitions) {
    for (Iterator iterator = memberPartitions.iterator(); iterator.hasNext(); ) {
      int partitionId = ((Integer)iterator.next()).intValue();
      if (checkState(processInformation, partitionId))
        return partitionId; 
    } 
    return -1;
  }
  
  private boolean checkState(JobProcessInformation processInformation, int partitionId) {
    JobPartitionState[] partitionStates = processInformation.getPartitionStates();
    JobPartitionState partitionState = partitionStates[partitionId];
    return (partitionState == null || partitionState.getState() == JobPartitionState.State.WAITING);
  }
  
  public int getFactoryId() { return MapReduceDataSerializerHook.F_ID; }
  
  public int getId() { return 5; }
}
