package com.hazelcast.mapreduce.impl.operation;

import com.hazelcast.mapreduce.TopologyChangedException;
import com.hazelcast.mapreduce.TopologyChangedStrategy;
import com.hazelcast.mapreduce.impl.MapReduceDataSerializerHook;
import com.hazelcast.mapreduce.impl.MapReduceService;
import com.hazelcast.mapreduce.impl.task.JobSupervisor;
import com.hazelcast.nio.Address;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.partition.NoDataMemberInClusterException;
import com.hazelcast.util.MapUtil;
import com.hazelcast.util.SetUtil;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

public class KeysAssignmentOperation extends ProcessingOperation {
  private Set<Object> keys;
  
  private KeysAssignmentResult result;
  
  public KeysAssignmentOperation() {}
  
  public KeysAssignmentOperation(String name, String jobId, Set<Object> keys) {
    super(name, jobId);
    this.keys = keys;
  }
  
  public Object getResponse() { return this.result; }
  
  public void run() {
    MapReduceService mapReduceService = (MapReduceService)getService();
    JobSupervisor supervisor = mapReduceService.getJobSupervisor(getName(), getJobId());
    if (supervisor == null) {
      this.result = new KeysAssignmentResult(RequestPartitionResult.ResultState.NO_SUPERVISOR, null);
      return;
    } 
    if (!supervisor.checkAssignedMembersAvailable()) {
      Map<Object, Address> assignment = new HashMap<Object, Address>();
      TopologyChangedStrategy tcs = supervisor.getConfiguration().getTopologyChangedStrategy();
      if (tcs == TopologyChangedStrategy.CANCEL_RUNNING_OPERATION) {
        TopologyChangedException topologyChangedException1 = new TopologyChangedException();
        supervisor.cancelAndNotify(topologyChangedException1);
        this.result = new KeysAssignmentResult(RequestPartitionResult.ResultState.CHECK_STATE_FAILED, assignment);
        return;
      } 
      TopologyChangedException topologyChangedException = new TopologyChangedException("Unknown or unsupported TopologyChangedStrategy");
      supervisor.cancelAndNotify(topologyChangedException);
      this.result = new KeysAssignmentResult(RequestPartitionResult.ResultState.CHECK_STATE_FAILED, assignment);
      return;
    } 
    Map<Object, Address> assignment = MapUtil.createHashMap(this.keys.size());
    try {
      for (Object key : this.keys) {
        Address address = supervisor.assignKeyReducerAddress(key);
        assignment.put(key, address);
      } 
      this.result = new KeysAssignmentResult(RequestPartitionResult.ResultState.SUCCESSFUL, assignment);
    } catch (NoDataMemberInClusterException e) {
      supervisor.cancelAndNotify(e);
      this.result = new KeysAssignmentResult(RequestPartitionResult.ResultState.CHECK_STATE_FAILED, assignment);
    } 
  }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeInt(this.keys.size());
    for (Object key : this.keys)
      out.writeObject(key); 
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    int size = in.readInt();
    this.keys = SetUtil.createHashSet(size);
    for (int i = 0; i < size; i++)
      this.keys.add(in.readObject()); 
  }
  
  public int getFactoryId() { return MapReduceDataSerializerHook.F_ID; }
  
  public int getId() { return 21; }
}
