package com.hazelcast.mapreduce.impl.operation;

import com.hazelcast.mapreduce.JobPartitionState;
import com.hazelcast.mapreduce.impl.MapReduceDataSerializerHook;
import com.hazelcast.mapreduce.impl.MapReduceService;
import com.hazelcast.mapreduce.impl.task.JobProcessInformationImpl;
import com.hazelcast.mapreduce.impl.task.JobSupervisor;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import java.io.IOException;

public class PostPonePartitionProcessing extends ProcessingOperation {
  private int partitionId;
  
  public PostPonePartitionProcessing() {}
  
  public PostPonePartitionProcessing(String name, String jobId, int partitionId) {
    super(name, jobId);
    this.partitionId = partitionId;
  }
  
  public Object getResponse() { return this.result; }
  
  public void run() {
    JobPartitionState oldPartitionState;
    MapReduceService mapReduceService = (MapReduceService)getService();
    JobSupervisor supervisor = mapReduceService.getJobSupervisor(getName(), getJobId());
    if (supervisor == null) {
      this.result = new RequestPartitionResult(RequestPartitionResult.ResultState.NO_SUPERVISOR, -1);
      return;
    } 
    JobProcessInformationImpl processInformation = supervisor.getJobProcessInformation();
    do {
      JobPartitionState[] partitionStates = processInformation.getPartitionStates();
      oldPartitionState = partitionStates[this.partitionId];
      if (oldPartitionState == null || !getCallerAddress().equals(oldPartitionState.getOwner())) {
        this.result = new RequestPartitionResult(RequestPartitionResult.ResultState.CHECK_STATE_FAILED, this.partitionId);
        return;
      } 
    } while (!processInformation.updatePartitionState(this.partitionId, oldPartitionState, null));
    this.result = new RequestPartitionResult(RequestPartitionResult.ResultState.SUCCESSFUL, this.partitionId);
  }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeInt(this.partitionId);
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    this.partitionId = in.readInt();
  }
  
  public int getFactoryId() { return MapReduceDataSerializerHook.F_ID; }
  
  public int getId() { return 17; }
}
