package com.hazelcast.transaction.impl.xa;

import com.hazelcast.core.DistributedObject;
import com.hazelcast.internal.partition.InternalPartitionService;
import com.hazelcast.spi.ManagedService;
import com.hazelcast.spi.MigrationAwareService;
import com.hazelcast.spi.NodeEngine;
import com.hazelcast.spi.Operation;
import com.hazelcast.spi.PartitionMigrationEvent;
import com.hazelcast.spi.PartitionReplicationEvent;
import com.hazelcast.spi.RemoteService;
import com.hazelcast.spi.impl.NodeEngineImpl;
import com.hazelcast.spi.partition.MigrationEndpoint;
import com.hazelcast.transaction.TransactionContext;
import com.hazelcast.transaction.impl.xa.operations.XaReplicationOperation;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.CopyOnWriteArrayList;
import javax.transaction.xa.Xid;

public class XAService implements ManagedService, RemoteService, MigrationAwareService {
  public static final String SERVICE_NAME = "hz:impl:xaService";
  
  private final NodeEngineImpl nodeEngine;
  
  private final XAResourceImpl xaResource;
  
  private final ConcurrentMap<SerializableXID, List<XATransaction>> transactions;
  
  public XAService(NodeEngineImpl nodeEngine) {
    this.transactions = new ConcurrentHashMap();
    this.nodeEngine = nodeEngine;
    this.xaResource = new XAResourceImpl(nodeEngine, this);
  }
  
  public void init(NodeEngine nodeEngine, Properties properties) {}
  
  public void reset() {}
  
  public void shutdown(boolean terminate) {}
  
  public DistributedObject createDistributedObject(String objectName) { return this.xaResource; }
  
  public void destroyDistributedObject(String objectName) {}
  
  public TransactionContext newXATransactionContext(Xid xid, String ownerUuid, int timeout, boolean originatedFromClient) { return new XATransactionContextImpl(this.nodeEngine, xid, ownerUuid, timeout, originatedFromClient); }
  
  public void putTransaction(XATransaction transaction) {
    SerializableXID xid = transaction.getXid();
    List<XATransaction> list = (List)this.transactions.get(xid);
    if (list == null) {
      list = new CopyOnWriteArrayList<XATransaction>();
      this.transactions.put(xid, list);
    } 
    list.add(transaction);
  }
  
  public List<XATransaction> removeTransactions(SerializableXID xid) { return (List)this.transactions.remove(xid); }
  
  public Set<SerializableXID> getPreparedXids() { return this.transactions.keySet(); }
  
  public Operation prepareReplicationOperation(PartitionReplicationEvent event) {
    if (event.getReplicaIndex() > 1)
      return null; 
    List<XATransactionDTO> migrationData = new ArrayList<XATransactionDTO>();
    InternalPartitionService partitionService = this.nodeEngine.getPartitionService();
    for (Map.Entry<SerializableXID, List<XATransaction>> entry : this.transactions.entrySet()) {
      SerializableXID xid = (SerializableXID)entry.getKey();
      int partitionId = partitionService.getPartitionId(xid);
      List<XATransaction> xaTransactionList = (List)entry.getValue();
      for (XATransaction xaTransaction : xaTransactionList) {
        if (partitionId == event.getPartitionId())
          migrationData.add(new XATransactionDTO(xaTransaction)); 
      } 
    } 
    if (migrationData.isEmpty())
      return null; 
    return new XaReplicationOperation(migrationData, event.getPartitionId(), event.getReplicaIndex());
  }
  
  public void beforeMigration(PartitionMigrationEvent event) {}
  
  public void commitMigration(PartitionMigrationEvent event) {
    if (event.getMigrationEndpoint() == MigrationEndpoint.SOURCE) {
      int thresholdReplicaIndex = event.getNewReplicaIndex();
      if (thresholdReplicaIndex == -1 || thresholdReplicaIndex > 1)
        clearPartitionReplica(event.getPartitionId()); 
    } 
  }
  
  public void rollbackMigration(PartitionMigrationEvent event) {
    if (event.getMigrationEndpoint() == MigrationEndpoint.DESTINATION) {
      int thresholdReplicaIndex = event.getCurrentReplicaIndex();
      if (thresholdReplicaIndex == -1 || thresholdReplicaIndex > 1)
        clearPartitionReplica(event.getPartitionId()); 
    } 
  }
  
  private void clearPartitionReplica(int partitionId) {
    InternalPartitionService partitionService = this.nodeEngine.getPartitionService();
    Iterator<Map.Entry<SerializableXID, List<XATransaction>>> iterator = this.transactions.entrySet().iterator();
    while (iterator.hasNext()) {
      Map.Entry<SerializableXID, List<XATransaction>> entry = (Map.Entry)iterator.next();
      SerializableXID xid = (SerializableXID)entry.getKey();
      int xidPartitionId = partitionService.getPartitionId(xid);
      if (xidPartitionId == partitionId)
        iterator.remove(); 
    } 
  }
}
