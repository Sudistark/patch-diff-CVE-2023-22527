package com.hazelcast.transaction.impl.xa.operations;

import com.hazelcast.core.ExecutionCallback;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.BackupAwareOperation;
import com.hazelcast.spi.Operation;
import com.hazelcast.transaction.impl.xa.SerializableXID;
import com.hazelcast.transaction.impl.xa.XAService;
import com.hazelcast.transaction.impl.xa.XATransaction;
import java.io.IOException;
import java.util.List;

public class FinalizeRemoteTransactionOperation extends AbstractXAOperation implements BackupAwareOperation {
  private Data xidData;
  
  private boolean isCommit;
  
  private boolean returnsResponse = true;
  
  private SerializableXID xid;
  
  public FinalizeRemoteTransactionOperation() {}
  
  public FinalizeRemoteTransactionOperation(Data xidData, boolean isCommit) {
    this.xidData = xidData;
    this.isCommit = isCommit;
  }
  
  public void beforeRun() {
    this.returnsResponse = false;
    this.xid = (SerializableXID)getNodeEngine().toObject(this.xidData);
  }
  
  public void run() {
    XAService xaService = (XAService)getService();
    List<XATransaction> list = xaService.removeTransactions(this.xid);
    if (list == null) {
      sendResponse(getNodeEngine().toData(Integer.valueOf(-4)));
      return;
    } 
    int size = list.size();
    Object object = new Object(this, size);
    for (XATransaction xaTransaction : list)
      finalizeTransaction(xaTransaction, object); 
  }
  
  private void finalizeTransaction(XATransaction xaTransaction, ExecutionCallback callback) {
    if (this.isCommit) {
      xaTransaction.commitAsync(callback);
    } else {
      xaTransaction.rollbackAsync(callback);
    } 
  }
  
  public boolean returnsResponse() { return this.returnsResponse; }
  
  public boolean shouldBackup() { return true; }
  
  public int getSyncBackupCount() { return 0; }
  
  public int getAsyncBackupCount() { return 1; }
  
  public Operation getBackupOperation() { return new FinalizeRemoteTransactionBackupOperation(this.xidData); }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    out.writeData(this.xidData);
    out.writeBoolean(this.isCommit);
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    this.xidData = in.readData();
    this.isCommit = in.readBoolean();
  }
  
  public int getId() { return 14; }
}
