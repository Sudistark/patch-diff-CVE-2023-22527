package com.hazelcast.transaction.impl.xa;

import com.hazelcast.core.TransactionalList;
import com.hazelcast.core.TransactionalMap;
import com.hazelcast.core.TransactionalMultiMap;
import com.hazelcast.core.TransactionalQueue;
import com.hazelcast.core.TransactionalSet;
import com.hazelcast.spi.TransactionalService;
import com.hazelcast.spi.impl.NodeEngineImpl;
import com.hazelcast.transaction.TransactionContext;
import com.hazelcast.transaction.TransactionNotActiveException;
import com.hazelcast.transaction.TransactionalObject;
import com.hazelcast.transaction.impl.Transaction;
import com.hazelcast.transaction.impl.TransactionalObjectKey;
import java.util.HashMap;
import java.util.Map;
import javax.transaction.xa.XAResource;
import javax.transaction.xa.Xid;

public class XATransactionContextImpl implements TransactionContext {
  private final NodeEngineImpl nodeEngine;
  
  private final XATransaction transaction;
  
  private final Map<TransactionalObjectKey, TransactionalObject> txnObjectMap;
  
  public XATransactionContextImpl(NodeEngineImpl nodeEngine, Xid xid, String txOwnerUuid, int timeout, boolean originatedFromClient) {
    this.txnObjectMap = new HashMap(2);
    this.nodeEngine = nodeEngine;
    this.transaction = new XATransaction(nodeEngine, xid, txOwnerUuid, timeout, originatedFromClient);
  }
  
  public void beginTransaction() { throw new UnsupportedOperationException("XA Transaction cannot be started manually!"); }
  
  public void commitTransaction() { throw new UnsupportedOperationException("XA Transaction cannot be committed manually!"); }
  
  public void rollbackTransaction() { throw new UnsupportedOperationException("XA Transaction cannot be rolled back manually!"); }
  
  public String getTxnId() { return this.transaction.getTxnId(); }
  
  public <K, V> TransactionalMap<K, V> getMap(String name) { return (TransactionalMap)getTransactionalObject("hz:impl:mapService", name); }
  
  public <E> TransactionalQueue<E> getQueue(String name) { return (TransactionalQueue)getTransactionalObject("hz:impl:queueService", name); }
  
  public <K, V> TransactionalMultiMap<K, V> getMultiMap(String name) { return (TransactionalMultiMap)getTransactionalObject("hz:impl:multiMapService", name); }
  
  public <E> TransactionalList<E> getList(String name) { return (TransactionalList)getTransactionalObject("hz:impl:listService", name); }
  
  public <E> TransactionalSet<E> getSet(String name) { return (TransactionalSet)getTransactionalObject("hz:impl:setService", name); }
  
  public TransactionalObject getTransactionalObject(String serviceName, String name) {
    if (this.transaction.getState() != Transaction.State.ACTIVE)
      throw new TransactionNotActiveException("No transaction is found while accessing transactional object -> " + serviceName + "[" + name + "]!"); 
    TransactionalObjectKey key = new TransactionalObjectKey(serviceName, name);
    TransactionalObject obj = (TransactionalObject)this.txnObjectMap.get(key);
    if (obj != null)
      return obj; 
    Object service = this.nodeEngine.getService(serviceName);
    if (service instanceof TransactionalService) {
      this.nodeEngine.getProxyService().initializeDistributedObject(serviceName, name);
      obj = ((TransactionalService)service).createTransactionalObject(name, this.transaction);
      this.txnObjectMap.put(key, obj);
    } else {
      throw new IllegalArgumentException("Service[" + serviceName + "] is not transactional!");
    } 
    return obj;
  }
  
  XATransaction getTransaction() { return this.transaction; }
  
  public XAResource getXaResource() { throw new UnsupportedOperationException("Use HazelcastInstance.getXAResource() instead!"); }
}
