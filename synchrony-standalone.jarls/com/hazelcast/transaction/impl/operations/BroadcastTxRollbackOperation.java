package com.hazelcast.transaction.impl.operations;

import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.spi.ExceptionAction;
import com.hazelcast.spi.TransactionalService;
import com.hazelcast.spi.impl.NodeEngineImpl;
import java.io.IOException;
import java.util.Collection;

public final class BroadcastTxRollbackOperation extends AbstractTxOperation {
  private String txnId;
  
  public BroadcastTxRollbackOperation() {}
  
  public BroadcastTxRollbackOperation(String txnId) { this.txnId = txnId; }
  
  public void run() {
    NodeEngineImpl nodeEngine = (NodeEngineImpl)getNodeEngine();
    Collection<TransactionalService> services = nodeEngine.getServices(TransactionalService.class);
    for (TransactionalService service : services) {
      try {
        service.rollbackTransaction(this.txnId);
      } catch (Exception e) {
        getLogger().warning("Error while rolling back transaction: " + this.txnId, e);
      } 
    } 
  }
  
  public Object getResponse() { return Boolean.valueOf(true); }
  
  public ExceptionAction onInvocationException(Throwable throwable) {
    if (throwable instanceof com.hazelcast.core.MemberLeftException)
      return ExceptionAction.THROW_EXCEPTION; 
    return super.onInvocationException(throwable);
  }
  
  public int getId() { return 1; }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException { out.writeUTF(this.txnId); }
  
  protected void readInternal(ObjectDataInput in) throws IOException { this.txnId = in.readUTF(); }
}
