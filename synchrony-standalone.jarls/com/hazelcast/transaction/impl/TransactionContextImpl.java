package com.hazelcast.transaction.impl;

import com.hazelcast.core.TransactionalList;
import com.hazelcast.core.TransactionalMap;
import com.hazelcast.core.TransactionalMultiMap;
import com.hazelcast.core.TransactionalQueue;
import com.hazelcast.core.TransactionalSet;
import com.hazelcast.spi.TransactionalService;
import com.hazelcast.spi.impl.NodeEngineImpl;
import com.hazelcast.spi.impl.proxyservice.InternalProxyService;
import com.hazelcast.transaction.HazelcastXAResource;
import com.hazelcast.transaction.TransactionContext;
import com.hazelcast.transaction.TransactionNotActiveException;
import com.hazelcast.transaction.TransactionOptions;
import com.hazelcast.transaction.TransactionalObject;
import java.util.HashMap;
import java.util.Map;
import javax.transaction.xa.XAResource;

final class TransactionContextImpl implements TransactionContext {
  private final NodeEngineImpl nodeEngine;
  
  private final TransactionImpl transaction;
  
  private final Map<TransactionalObjectKey, TransactionalObject> txnObjectMap;
  
  TransactionContextImpl(TransactionManagerServiceImpl transactionManagerService, NodeEngineImpl nodeEngine, TransactionOptions options, String ownerUuid, boolean originatedFromClient) {
    this.txnObjectMap = new HashMap(2);
    this.nodeEngine = nodeEngine;
    this.transaction = new TransactionImpl(transactionManagerService, nodeEngine, options, ownerUuid, originatedFromClient);
  }
  
  public String getTxnId() { return this.transaction.getTxnId(); }
  
  public void beginTransaction() { this.transaction.begin(); }
  
  public void commitTransaction() {
    if (this.transaction.requiresPrepare())
      this.transaction.prepare(); 
    this.transaction.commit();
  }
  
  public void rollbackTransaction() { this.transaction.rollback(); }
  
  public <K, V> TransactionalMap<K, V> getMap(String name) { return (TransactionalMap)getTransactionalObject("hz:impl:mapService", name); }
  
  public <K, V> TransactionalMultiMap<K, V> getMultiMap(String name) { return (TransactionalMultiMap)getTransactionalObject("hz:impl:multiMapService", name); }
  
  public <E> TransactionalQueue<E> getQueue(String name) { return (TransactionalQueue)getTransactionalObject("hz:impl:queueService", name); }
  
  public <E> TransactionalList<E> getList(String name) { return (TransactionalList)getTransactionalObject("hz:impl:listService", name); }
  
  public <E> TransactionalSet<E> getSet(String name) { return (TransactionalSet)getTransactionalObject("hz:impl:setService", name); }
  
  public TransactionalObject getTransactionalObject(String serviceName, String name) {
    checkActive(serviceName, name);
    if (requiresBackupLogs(serviceName))
      this.transaction.ensureBackupLogsExist(); 
    TransactionalObjectKey key = new TransactionalObjectKey(serviceName, name);
    TransactionalObject obj = (TransactionalObject)this.txnObjectMap.get(key);
    if (obj != null)
      return obj; 
    TransactionalService transactionalService = getTransactionalService(serviceName);
    this.nodeEngine.getProxyService().initializeDistributedObject(serviceName, name);
    obj = transactionalService.createTransactionalObject(name, this.transaction);
    this.txnObjectMap.put(key, obj);
    return obj;
  }
  
  private boolean requiresBackupLogs(String serviceName) {
    if (serviceName.equals("hz:impl:mapService"))
      return false; 
    if (serviceName.equals("hz:impl:multiMapService"))
      return false; 
    return true;
  }
  
  private TransactionalService getTransactionalService(String serviceName) {
    Object service = this.nodeEngine.getService(serviceName);
    if (!(service instanceof TransactionalService))
      throw new IllegalArgumentException("Service[" + serviceName + "] is not transactional!"); 
    return (TransactionalService)service;
  }
  
  private void checkActive(String serviceName, String name) {
    if (this.transaction.getState() != Transaction.State.ACTIVE)
      throw new TransactionNotActiveException("No transaction is found while accessing transactional object -> " + serviceName + "[" + name + "]!"); 
  }
  
  Transaction getTransaction() { return this.transaction; }
  
  public XAResource getXaResource() {
    InternalProxyService internalProxyService = this.nodeEngine.getProxyService();
    return (HazelcastXAResource)internalProxyService.getDistributedObject("hz:impl:xaService", "hz:impl:xaService");
  }
}
