package com.hazelcast.instance;

import com.hazelcast.core.LifecycleEvent;
import com.hazelcast.core.LifecycleListener;
import com.hazelcast.core.LifecycleService;
import com.hazelcast.internal.jmx.ManagementService;
import com.hazelcast.logging.ILogger;
import com.hazelcast.spi.annotation.PrivateApi;
import com.hazelcast.util.UuidUtil;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

@PrivateApi
public class LifecycleServiceImpl implements LifecycleService {
  private final HazelcastInstanceImpl instance;
  
  private final ConcurrentMap<String, LifecycleListener> lifecycleListeners;
  
  private final Object lifecycleLock;
  
  public LifecycleServiceImpl(HazelcastInstanceImpl instance) {
    this.lifecycleListeners = new ConcurrentHashMap();
    this.lifecycleLock = new Object();
    this.instance = instance;
  }
  
  private ILogger getLogger() { return this.instance.node.getLogger(LifecycleService.class.getName()); }
  
  public String addLifecycleListener(LifecycleListener lifecycleListener) {
    String id = UuidUtil.newUnsecureUuidString();
    this.lifecycleListeners.put(id, lifecycleListener);
    return id;
  }
  
  public boolean removeLifecycleListener(String registrationId) { return (this.lifecycleListeners.remove(registrationId) != null); }
  
  public void fireLifecycleEvent(LifecycleEvent.LifecycleState lifecycleState) { fireLifecycleEvent(new LifecycleEvent(lifecycleState)); }
  
  public void fireLifecycleEvent(LifecycleEvent lifecycleEvent) {
    getLogger().info(this.instance.node.getThisAddress() + " is " + lifecycleEvent.getState());
    for (LifecycleListener lifecycleListener : this.lifecycleListeners.values())
      lifecycleListener.stateChanged(lifecycleEvent); 
  }
  
  public boolean isRunning() { return this.instance.node.isRunning(); }
  
  public void shutdown() { shutdown(false); }
  
  public void terminate() { shutdown(true); }
  
  private void shutdown(boolean terminate) {
    synchronized (this.lifecycleLock) {
      fireLifecycleEvent(LifecycleEvent.LifecycleState.SHUTTING_DOWN);
      ManagementService managementService = this.instance.managementService;
      if (managementService != null)
        managementService.destroy(); 
      Node node = this.instance.node;
      if (node != null)
        node.shutdown(terminate); 
      HazelcastInstanceFactory.remove(this.instance);
      fireLifecycleEvent(LifecycleEvent.LifecycleState.SHUTDOWN);
    } 
  }
  
  public void runUnderLifecycleLock(Runnable runnable) {
    synchronized (this.lifecycleLock) {
      runnable.run();
    } 
  }
}
