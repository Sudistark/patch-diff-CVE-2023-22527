package com.hazelcast.instance;

import com.hazelcast.cluster.ClusterState;
import com.hazelcast.hotrestart.HotRestartService;
import com.hazelcast.hotrestart.InternalHotRestartService;
import com.hazelcast.internal.ascii.TextCommandService;
import com.hazelcast.internal.cluster.impl.JoinMessage;
import com.hazelcast.internal.diagnostics.Diagnostics;
import com.hazelcast.internal.dynamicconfig.DynamicConfigListener;
import com.hazelcast.internal.jmx.ManagementService;
import com.hazelcast.internal.management.ManagementCenterConnectionFactory;
import com.hazelcast.internal.management.TimedMemberStateFactory;
import com.hazelcast.internal.networking.ChannelInitializerProvider;
import com.hazelcast.internal.networking.InboundHandler;
import com.hazelcast.internal.networking.OutboundHandler;
import com.hazelcast.internal.serialization.InternalSerializationService;
import com.hazelcast.memory.MemoryStats;
import com.hazelcast.nio.Address;
import com.hazelcast.nio.IOService;
import com.hazelcast.nio.MemberSocketInterceptor;
import com.hazelcast.nio.tcp.TcpIpConnection;
import com.hazelcast.security.SecurityContext;
import com.hazelcast.security.SecurityService;
import com.hazelcast.spi.annotation.PrivateApi;
import com.hazelcast.util.ByteArrayProcessor;
import com.hazelcast.version.Version;
import java.util.Map;

@PrivateApi
public interface NodeExtension {
  void beforeStart();
  
  void printNodeInfo();
  
  void beforeJoin();
  
  void afterStart();
  
  boolean isStartCompleted();
  
  void beforeShutdown();
  
  void shutdown();
  
  InternalSerializationService createSerializationService();
  
  SecurityService getSecurityService();
  
  SecurityContext getSecurityContext();
  
  <T> T createService(Class<T> paramClass);
  
  Map<String, Object> createExtensionServices();
  
  MemberSocketInterceptor getSocketInterceptor(EndpointQualifier paramEndpointQualifier);
  
  InboundHandler[] createInboundHandlers(EndpointQualifier paramEndpointQualifier, TcpIpConnection paramTcpIpConnection, IOService paramIOService);
  
  OutboundHandler[] createOutboundHandlers(EndpointQualifier paramEndpointQualifier, TcpIpConnection paramTcpIpConnection, IOService paramIOService);
  
  ChannelInitializerProvider createChannelInitializerProvider(IOService paramIOService);
  
  void onThreadStart(Thread paramThread);
  
  void onThreadStop(Thread paramThread);
  
  MemoryStats getMemoryStats();
  
  void validateJoinRequest(JoinMessage paramJoinMessage);
  
  void onInitialClusterState(ClusterState paramClusterState);
  
  void beforeClusterStateChange(ClusterState paramClusterState1, ClusterState paramClusterState2, boolean paramBoolean);
  
  void onClusterStateChange(ClusterState paramClusterState, boolean paramBoolean);
  
  void afterClusterStateChange(ClusterState paramClusterState1, ClusterState paramClusterState2, boolean paramBoolean);
  
  void onPartitionStateChange();
  
  void onMemberListChange();
  
  void onClusterVersionChange(Version paramVersion);
  
  boolean isNodeVersionCompatibleWith(Version paramVersion);
  
  boolean registerListener(Object paramObject);
  
  HotRestartService getHotRestartService();
  
  InternalHotRestartService getInternalHotRestartService();
  
  String createMemberUuid(Address paramAddress);
  
  TimedMemberStateFactory createTimedMemberStateFactory(HazelcastInstanceImpl paramHazelcastInstanceImpl);
  
  ManagementCenterConnectionFactory getManagementCenterConnectionFactory();
  
  ManagementService createJMXManagementService(HazelcastInstanceImpl paramHazelcastInstanceImpl);
  
  TextCommandService createTextCommandService();
  
  ByteArrayProcessor createMulticastInputProcessor(IOService paramIOService);
  
  ByteArrayProcessor createMulticastOutputProcessor(IOService paramIOService);
  
  DynamicConfigListener createDynamicConfigListener();
  
  void registerPlugins(Diagnostics paramDiagnostics);
  
  void sendPhoneHome();
  
  void scheduleClusterVersionAutoUpgrade();
  
  boolean isClientFailoverSupported();
}
