package com.hazelcast.instance;

import com.hazelcast.cardinality.CardinalityEstimator;
import com.hazelcast.config.Config;
import com.hazelcast.core.ClientService;
import com.hazelcast.core.Cluster;
import com.hazelcast.core.DistributedObject;
import com.hazelcast.core.DistributedObjectListener;
import com.hazelcast.core.Endpoint;
import com.hazelcast.core.HazelcastInstance;
import com.hazelcast.core.HazelcastInstanceNotActiveException;
import com.hazelcast.core.IAtomicLong;
import com.hazelcast.core.IAtomicReference;
import com.hazelcast.core.ICacheManager;
import com.hazelcast.core.ICountDownLatch;
import com.hazelcast.core.IExecutorService;
import com.hazelcast.core.IList;
import com.hazelcast.core.ILock;
import com.hazelcast.core.IMap;
import com.hazelcast.core.IQueue;
import com.hazelcast.core.ISemaphore;
import com.hazelcast.core.ISet;
import com.hazelcast.core.ITopic;
import com.hazelcast.core.IdGenerator;
import com.hazelcast.core.LifecycleService;
import com.hazelcast.core.Member;
import com.hazelcast.core.MultiMap;
import com.hazelcast.core.PartitionService;
import com.hazelcast.core.ReplicatedMap;
import com.hazelcast.cp.CPSubsystem;
import com.hazelcast.crdt.pncounter.PNCounter;
import com.hazelcast.durableexecutor.DurableExecutorService;
import com.hazelcast.flakeidgen.FlakeIdGenerator;
import com.hazelcast.internal.serialization.InternalSerializationService;
import com.hazelcast.logging.LoggingService;
import com.hazelcast.mapreduce.JobTracker;
import com.hazelcast.quorum.QuorumService;
import com.hazelcast.ringbuffer.Ringbuffer;
import com.hazelcast.scheduledexecutor.IScheduledExecutorService;
import com.hazelcast.spi.annotation.PrivateApi;
import com.hazelcast.spi.impl.SerializationServiceSupport;
import com.hazelcast.spi.serialization.SerializationService;
import com.hazelcast.transaction.HazelcastXAResource;
import com.hazelcast.transaction.TransactionContext;
import com.hazelcast.transaction.TransactionException;
import com.hazelcast.transaction.TransactionOptions;
import com.hazelcast.transaction.TransactionalTask;
import java.util.Collection;
import java.util.concurrent.ConcurrentMap;

@PrivateApi
public final class HazelcastInstanceProxy implements HazelcastInstance, SerializationServiceSupport {
  private final String name;
  
  protected HazelcastInstanceProxy(HazelcastInstanceImpl original) {
    this.original = original;
    this.name = original.getName();
  }
  
  public String getName() { return this.name; }
  
  public <K, V> IMap<K, V> getMap(String name) { return getOriginal().getMap(name); }
  
  public <E> IQueue<E> getQueue(String name) { return getOriginal().getQueue(name); }
  
  public <E> ITopic<E> getTopic(String name) { return getOriginal().getTopic(name); }
  
  public <E> ITopic<E> getReliableTopic(String name) { return getOriginal().getReliableTopic(name); }
  
  public <E> ISet<E> getSet(String name) { return getOriginal().getSet(name); }
  
  public <E> IList<E> getList(String name) { return getOriginal().getList(name); }
  
  public <K, V> MultiMap<K, V> getMultiMap(String name) { return getOriginal().getMultiMap(name); }
  
  public JobTracker getJobTracker(String name) { return getOriginal().getJobTracker(name); }
  
  public <E> Ringbuffer<E> getRingbuffer(String name) { return getOriginal().getRingbuffer(name); }
  
  public ILock getLock(String key) { return getOriginal().getLock(key); }
  
  public IExecutorService getExecutorService(String name) { return getOriginal().getExecutorService(name); }
  
  public DurableExecutorService getDurableExecutorService(String name) { return getOriginal().getDurableExecutorService(name); }
  
  public <T> T executeTransaction(TransactionalTask<T> task) throws TransactionException { return (T)getOriginal().executeTransaction(task); }
  
  public <T> T executeTransaction(TransactionOptions options, TransactionalTask<T> task) throws TransactionException { return (T)getOriginal().executeTransaction(options, task); }
  
  public TransactionContext newTransactionContext() { return getOriginal().newTransactionContext(); }
  
  public TransactionContext newTransactionContext(TransactionOptions options) { return getOriginal().newTransactionContext(options); }
  
  public IdGenerator getIdGenerator(String name) { return getOriginal().getIdGenerator(name); }
  
  public FlakeIdGenerator getFlakeIdGenerator(String name) { return getOriginal().getFlakeIdGenerator(name); }
  
  public IAtomicLong getAtomicLong(String name) { return getOriginal().getAtomicLong(name); }
  
  public <K, V> ReplicatedMap<K, V> getReplicatedMap(String name) { return getOriginal().getReplicatedMap(name); }
  
  public <E> IAtomicReference<E> getAtomicReference(String name) { return getOriginal().getAtomicReference(name); }
  
  public ICountDownLatch getCountDownLatch(String name) { return getOriginal().getCountDownLatch(name); }
  
  public ISemaphore getSemaphore(String name) { return getOriginal().getSemaphore(name); }
  
  public ICacheManager getCacheManager() { return getOriginal().getCacheManager(); }
  
  public Cluster getCluster() { return getOriginal().getCluster(); }
  
  public Member getLocalEndpoint() { return getOriginal().getLocalEndpoint(); }
  
  public Collection<DistributedObject> getDistributedObjects() { return getOriginal().getDistributedObjects(); }
  
  public Config getConfig() { return getOriginal().getConfig(); }
  
  public PartitionService getPartitionService() { return getOriginal().getPartitionService(); }
  
  public QuorumService getQuorumService() { return getOriginal().getQuorumService(); }
  
  public ClientService getClientService() { return getOriginal().getClientService(); }
  
  public LoggingService getLoggingService() { return getOriginal().getLoggingService(); }
  
  public LifecycleService getLifecycleService() {
    HazelcastInstanceImpl hz = this.original;
    return (hz != null) ? hz.getLifecycleService() : new TerminatedLifecycleService();
  }
  
  public <T extends DistributedObject> T getDistributedObject(String serviceName, String name) { return (T)getOriginal().getDistributedObject(serviceName, name); }
  
  public String addDistributedObjectListener(DistributedObjectListener distributedObjectListener) { return getOriginal().addDistributedObjectListener(distributedObjectListener); }
  
  public boolean removeDistributedObjectListener(String registrationId) { return getOriginal().removeDistributedObjectListener(registrationId); }
  
  public ConcurrentMap<String, Object> getUserContext() { return getOriginal().getUserContext(); }
  
  public HazelcastXAResource getXAResource() { return getOriginal().getXAResource(); }
  
  public CardinalityEstimator getCardinalityEstimator(String name) { return getOriginal().getCardinalityEstimator(name); }
  
  public PNCounter getPNCounter(String name) { return getOriginal().getPNCounter(name); }
  
  public IScheduledExecutorService getScheduledExecutorService(String name) { return getOriginal().getScheduledExecutorService(name); }
  
  public CPSubsystem getCPSubsystem() { return getOriginal().getCPSubsystem(); }
  
  public void shutdown() { getLifecycleService().shutdown(); }
  
  public InternalSerializationService getSerializationService() { return getOriginal().getSerializationService(); }
  
  public HazelcastInstanceImpl getOriginal() {
    HazelcastInstanceImpl hazelcastInstance = this.original;
    if (hazelcastInstance == null)
      throw new HazelcastInstanceNotActiveException(); 
    return hazelcastInstance;
  }
  
  public String toString() {
    HazelcastInstanceImpl hazelcastInstance = this.original;
    if (hazelcastInstance != null)
      return hazelcastInstance.toString(); 
    return "HazelcastInstance {NOT ACTIVE}";
  }
  
  public int hashCode() { return (this.name != null) ? this.name.hashCode() : 0; }
  
  public boolean equals(Object o) {
    if (this == o)
      return true; 
    if (o == null || !(o instanceof HazelcastInstance))
      return false; 
    HazelcastInstance that = (HazelcastInstance)o;
    if ((this.name != null) ? !this.name.equals(that.getName()) : (that.getName() != null))
      return false; 
  }
}
