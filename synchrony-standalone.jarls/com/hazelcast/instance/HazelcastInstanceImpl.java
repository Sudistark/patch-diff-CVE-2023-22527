package com.hazelcast.instance;

import com.hazelcast.cardinality.CardinalityEstimator;
import com.hazelcast.client.impl.ClientServiceProxy;
import com.hazelcast.config.Config;
import com.hazelcast.core.ClientService;
import com.hazelcast.core.Cluster;
import com.hazelcast.core.DistributedObject;
import com.hazelcast.core.DistributedObjectListener;
import com.hazelcast.core.Endpoint;
import com.hazelcast.core.HazelcastInstance;
import com.hazelcast.core.HazelcastInstanceAware;
import com.hazelcast.core.IAtomicLong;
import com.hazelcast.core.IAtomicReference;
import com.hazelcast.core.ICacheManager;
import com.hazelcast.core.ICountDownLatch;
import com.hazelcast.core.IExecutorService;
import com.hazelcast.core.IList;
import com.hazelcast.core.ILock;
import com.hazelcast.core.IMap;
import com.hazelcast.core.IQueue;
import com.hazelcast.core.ISemaphore;
import com.hazelcast.core.ISet;
import com.hazelcast.core.ITopic;
import com.hazelcast.core.IdGenerator;
import com.hazelcast.core.LifecycleService;
import com.hazelcast.core.ManagedContext;
import com.hazelcast.core.Member;
import com.hazelcast.core.MultiMap;
import com.hazelcast.core.PartitionService;
import com.hazelcast.core.ReplicatedMap;
import com.hazelcast.cp.CPSubsystem;
import com.hazelcast.cp.internal.CPSubsystemImpl;
import com.hazelcast.crdt.pncounter.PNCounter;
import com.hazelcast.durableexecutor.DurableExecutorService;
import com.hazelcast.flakeidgen.FlakeIdGenerator;
import com.hazelcast.internal.cluster.Versions;
import com.hazelcast.internal.jmx.ManagementService;
import com.hazelcast.internal.serialization.InternalSerializationService;
import com.hazelcast.logging.ILogger;
import com.hazelcast.logging.LoggingService;
import com.hazelcast.mapreduce.JobTracker;
import com.hazelcast.memory.MemoryStats;
import com.hazelcast.quorum.QuorumService;
import com.hazelcast.ringbuffer.Ringbuffer;
import com.hazelcast.scheduledexecutor.IScheduledExecutorService;
import com.hazelcast.spi.annotation.PrivateApi;
import com.hazelcast.spi.impl.SerializationServiceSupport;
import com.hazelcast.spi.impl.proxyservice.InternalProxyService;
import com.hazelcast.spi.serialization.SerializationService;
import com.hazelcast.transaction.HazelcastXAResource;
import com.hazelcast.transaction.TransactionContext;
import com.hazelcast.transaction.TransactionException;
import com.hazelcast.transaction.TransactionManagerService;
import com.hazelcast.transaction.TransactionOptions;
import com.hazelcast.transaction.TransactionalTask;
import com.hazelcast.util.EmptyStatement;
import com.hazelcast.util.ExceptionUtil;
import com.hazelcast.util.Preconditions;
import java.util.Collection;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

@PrivateApi
public class HazelcastInstanceImpl implements HazelcastInstance, SerializationServiceSupport {
  public final Node node;
  
  final ConcurrentMap<String, Object> userContext;
  
  final ILogger logger;
  
  final String name;
  
  final ManagementService managementService;
  
  final LifecycleServiceImpl lifecycleService;
  
  final CPSubsystemImpl cpSubsystem;
  
  final ManagedContext managedContext;
  
  final HazelcastInstanceCacheManager hazelcastCacheManager;
  
  protected HazelcastInstanceImpl(String name, Config config, NodeContext nodeContext) {
    this.userContext = new ConcurrentHashMap();
    this.name = name;
    this.lifecycleService = new LifecycleServiceImpl(this);
    this.cpSubsystem = new CPSubsystemImpl(this);
    ManagedContext configuredManagedContext = config.getManagedContext();
    this.managedContext = new HazelcastManagedContext(this, configuredManagedContext);
    this.userContext.putAll(config.getUserContext());
    this.node = createNode(config, nodeContext);
    try {
      this.logger = this.node.getLogger(getClass().getName());
      this.node.start();
      if (!this.node.isRunning())
        throw new IllegalStateException("Node failed to start!"); 
      this.managementService = this.node.getNodeExtension().createJMXManagementService(this);
      initManagedContext(configuredManagedContext);
      this.hazelcastCacheManager = new HazelcastInstanceCacheManager(this);
      ClassLoader classLoader = this.node.getConfigClassLoader();
      if (classLoader instanceof HazelcastInstanceAware)
        ((HazelcastInstanceAware)classLoader).setHazelcastInstance(this); 
    } catch (Throwable e) {
      try {
        this.node.shutdown(true);
      } catch (Throwable ignored) {
        EmptyStatement.ignore(ignored);
      } 
      throw ExceptionUtil.rethrow(e);
    } 
  }
  
  protected Node createNode(Config config, NodeContext nodeContext) { return new Node(this, config, nodeContext); }
  
  private void initManagedContext(ManagedContext configuredManagedContext) {
    if (configuredManagedContext != null && 
      configuredManagedContext instanceof HazelcastInstanceAware)
      ((HazelcastInstanceAware)configuredManagedContext).setHazelcastInstance(this); 
  }
  
  public ManagementService getManagementService() { return this.managementService; }
  
  public String getName() { return this.name; }
  
  public <K, V> IMap<K, V> getMap(String name) {
    Preconditions.checkNotNull(name, "Retrieving a map instance with a null name is not allowed!");
    return (IMap)getDistributedObject("hz:impl:mapService", name);
  }
  
  public <E> IQueue<E> getQueue(String name) {
    Preconditions.checkNotNull(name, "Retrieving a queue instance with a null name is not allowed!");
    return (IQueue)getDistributedObject("hz:impl:queueService", name);
  }
  
  public <E> ITopic<E> getTopic(String name) {
    Preconditions.checkNotNull(name, "Retrieving a topic instance with a null name is not allowed!");
    return (ITopic)getDistributedObject("hz:impl:topicService", name);
  }
  
  public <E> ITopic<E> getReliableTopic(String name) {
    Preconditions.checkNotNull(name, "Retrieving a topic instance with a null name is not allowed!");
    return (ITopic)getDistributedObject("hz:impl:reliableTopicService", name);
  }
  
  public <E> ISet<E> getSet(String name) {
    Preconditions.checkNotNull(name, "Retrieving a set instance with a null name is not allowed!");
    return (ISet)getDistributedObject("hz:impl:setService", name);
  }
  
  public <E> IList<E> getList(String name) {
    Preconditions.checkNotNull(name, "Retrieving a list instance with a null name is not allowed!");
    return (IList)getDistributedObject("hz:impl:listService", name);
  }
  
  public <K, V> MultiMap<K, V> getMultiMap(String name) {
    Preconditions.checkNotNull(name, "Retrieving a multi-map instance with a null name is not allowed!");
    return (MultiMap)getDistributedObject("hz:impl:multiMapService", name);
  }
  
  public JobTracker getJobTracker(String name) {
    Preconditions.checkNotNull(name, "Retrieving a job tracker instance with a null name is not allowed!");
    return (JobTracker)getDistributedObject("hz:impl:mapReduceService", name);
  }
  
  public <E> Ringbuffer<E> getRingbuffer(String name) {
    Preconditions.checkNotNull(name, "Retrieving a ringbuffer instance with a null name is not allowed!");
    return (Ringbuffer)getDistributedObject("hz:impl:ringbufferService", name);
  }
  
  public ILock getLock(String key) {
    Preconditions.checkNotNull(key, "Retrieving a lock instance with a null key is not allowed!");
    return (ILock)getDistributedObject("hz:impl:lockService", key);
  }
  
  public <T> T executeTransaction(TransactionalTask<T> task) throws TransactionException { return (T)executeTransaction(TransactionOptions.getDefault(), task); }
  
  public <T> T executeTransaction(TransactionOptions options, TransactionalTask<T> task) throws TransactionException {
    TransactionManagerService transactionManagerService = this.node.getNodeEngine().getTransactionManagerService();
    return (T)transactionManagerService.executeTransaction(options, task);
  }
  
  public TransactionContext newTransactionContext() { return newTransactionContext(TransactionOptions.getDefault()); }
  
  public TransactionContext newTransactionContext(TransactionOptions options) {
    TransactionManagerService transactionManagerService = this.node.getNodeEngine().getTransactionManagerService();
    return transactionManagerService.newTransactionContext(options);
  }
  
  public IExecutorService getExecutorService(String name) {
    Preconditions.checkNotNull(name, "Retrieving an executor instance with a null name is not allowed!");
    return (IExecutorService)getDistributedObject("hz:impl:executorService", name);
  }
  
  public DurableExecutorService getDurableExecutorService(String name) {
    Preconditions.checkNotNull(name, "Retrieving a durable executor instance with a null name is not allowed!");
    return (DurableExecutorService)getDistributedObject("hz:impl:durableExecutorService", name);
  }
  
  public IdGenerator getIdGenerator(String name) {
    Preconditions.checkNotNull(name, "Retrieving an ID-generator instance with a null name is not allowed!");
    return (IdGenerator)getDistributedObject("hz:impl:idGeneratorService", name);
  }
  
  public FlakeIdGenerator getFlakeIdGenerator(String name) {
    Preconditions.checkNotNull(name, "Retrieving a Flake ID-generator instance with a null name is not allowed!");
    return (FlakeIdGenerator)getDistributedObject("hz:impl:flakeIdGeneratorService", name);
  }
  
  public IAtomicLong getAtomicLong(String name) {
    Preconditions.checkNotNull(name, "Retrieving an atomic-long instance with a null name is not allowed!");
    return (IAtomicLong)getDistributedObject("hz:impl:atomicLongService", name);
  }
  
  public <E> IAtomicReference<E> getAtomicReference(String name) {
    Preconditions.checkNotNull(name, "Retrieving an atomic-reference instance with a null name is not allowed!");
    return (IAtomicReference)getDistributedObject("hz:impl:atomicReferenceService", name);
  }
  
  public ICountDownLatch getCountDownLatch(String name) {
    Preconditions.checkNotNull(name, "Retrieving a countdown-latch instance with a null name is not allowed!");
    return (ICountDownLatch)getDistributedObject("hz:impl:countDownLatchService", name);
  }
  
  public ISemaphore getSemaphore(String name) {
    Preconditions.checkNotNull(name, "Retrieving a semaphore instance with a null name is not allowed!");
    return (ISemaphore)getDistributedObject("hz:impl:semaphoreService", name);
  }
  
  public <K, V> ReplicatedMap<K, V> getReplicatedMap(String name) {
    Preconditions.checkNotNull(name, "Retrieving a replicated map instance with a null name is not allowed!");
    return (ReplicatedMap)getDistributedObject("hz:impl:replicatedMapService", name);
  }
  
  public HazelcastInstanceCacheManager getCacheManager() { return this.hazelcastCacheManager; }
  
  public Cluster getCluster() { return this.node.getClusterService(); }
  
  public Member getLocalEndpoint() { return this.node.getLocalMember(); }
  
  public Collection<DistributedObject> getDistributedObjects() {
    InternalProxyService internalProxyService = this.node.getNodeEngine().getProxyService();
    return internalProxyService.getAllDistributedObjects();
  }
  
  public Config getConfig() { return this.node.getConfig(); }
  
  public ConcurrentMap<String, Object> getUserContext() { return this.userContext; }
  
  public PartitionService getPartitionService() { return this.node.getPartitionService().getPartitionServiceProxy(); }
  
  public QuorumService getQuorumService() { return this.node.getNodeEngine().getQuorumService(); }
  
  public ClientService getClientService() { return new ClientServiceProxy(this.node); }
  
  public LoggingService getLoggingService() { return this.node.getLoggingService(); }
  
  public LifecycleServiceImpl getLifecycleService() { return this.lifecycleService; }
  
  public void shutdown() { getLifecycleService().shutdown(); }
  
  public <T extends DistributedObject> T getDistributedObject(String serviceName, String name) {
    InternalProxyService internalProxyService = this.node.getNodeEngine().getProxyService();
    return (T)internalProxyService.getDistributedObject(serviceName, name);
  }
  
  public String addDistributedObjectListener(DistributedObjectListener distributedObjectListener) {
    InternalProxyService internalProxyService = this.node.getNodeEngine().getProxyService();
    return internalProxyService.addProxyListener(distributedObjectListener);
  }
  
  public boolean removeDistributedObjectListener(String registrationId) {
    InternalProxyService internalProxyService = this.node.getNodeEngine().getProxyService();
    return internalProxyService.removeProxyListener(registrationId);
  }
  
  public InternalSerializationService getSerializationService() { return this.node.getSerializationService(); }
  
  public MemoryStats getMemoryStats() { return this.node.getNodeExtension().getMemoryStats(); }
  
  public HazelcastXAResource getXAResource() { return (HazelcastXAResource)getDistributedObject("hz:impl:xaService", "hz:impl:xaService"); }
  
  public CardinalityEstimator getCardinalityEstimator(String name) {
    Preconditions.checkNotNull(name, "Retrieving a cardinality estimator instance with a null name is not allowed!");
    return (CardinalityEstimator)getDistributedObject("hz:impl:cardinalityEstimatorService", name);
  }
  
  public PNCounter getPNCounter(String name) {
    Preconditions.checkNotNull(name, "Retrieving a PN counter instance with a null name is not allowed!");
    return (PNCounter)getDistributedObject("hz:impl:PNCounterService", name);
  }
  
  public IScheduledExecutorService getScheduledExecutorService(String name) {
    Preconditions.checkNotNull(name, "Retrieving a scheduled executor instance with a null name is not allowed!");
    return (IScheduledExecutorService)getDistributedObject("hz:impl:scheduledExecutorService", name);
  }
  
  public CPSubsystem getCPSubsystem() {
    if (this.node.getClusterService().getClusterVersion().isLessThan(Versions.V3_12))
      throw new UnsupportedOperationException("CP Subsystem is not available before version 3.12!"); 
    return this.cpSubsystem;
  }
  
  public boolean equals(Object o) {
    if (this == o)
      return true; 
    if (!(o instanceof HazelcastInstance))
      return false; 
    HazelcastInstance that = (HazelcastInstance)o;
    if ((this.name != null) ? !this.name.equals(that.getName()) : (that.getName() != null))
      return false; 
  }
  
  public int hashCode() { return (this.name != null) ? this.name.hashCode() : 0; }
  
  public String toString() { return "HazelcastInstance{name='" + this.name + "', node=" + this.node.getThisAddress() + '}'; }
}
