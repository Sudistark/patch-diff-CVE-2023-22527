package com.hazelcast.client.impl;

import com.hazelcast.client.impl.protocol.ClientExceptions;
import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.core.Client;
import com.hazelcast.core.ClientType;
import com.hazelcast.internal.cluster.ClusterService;
import com.hazelcast.logging.ILogger;
import com.hazelcast.nio.Address;
import com.hazelcast.security.SecurityContext;
import com.hazelcast.spi.EventService;
import com.hazelcast.spi.ProxyService;
import com.hazelcast.spi.partition.IPartitionService;
import com.hazelcast.transaction.TransactionManagerService;
import com.hazelcast.util.function.Consumer;
import java.util.Collection;
import java.util.Map;

public interface ClientEngine extends Consumer<ClientMessage> {
  boolean bind(ClientEndpoint paramClientEndpoint);
  
  Collection<Client> getClients();
  
  int getClientEndpointCount();
  
  IPartitionService getPartitionService();
  
  ClusterService getClusterService();
  
  EventService getEventService();
  
  ProxyService getProxyService();
  
  ILogger getLogger(Class paramClass);
  
  Address getThisAddress();
  
  String getThisUuid();
  
  ClientEndpointManager getEndpointManager();
  
  ClientExceptions getClientExceptions();
  
  SecurityContext getSecurityContext();
  
  TransactionManagerService getTransactionManagerService();
  
  ClientPartitionListenerService getPartitionListenerService();
  
  Map<ClientType, Integer> getConnectedClientStats();
  
  Map<String, String> getClientStatistics();
  
  String getOwnerUuid(String paramString);
  
  boolean isClientAllowed(Client paramClient);
  
  void applySelector(ClientSelector paramClientSelector);
  
  Address memberAddressOf(Address paramAddress);
  
  Address clientAddressOf(Address paramAddress);
}
