package com.hazelcast.client.impl.operations;

import com.hazelcast.client.impl.ClientEndpoint;
import com.hazelcast.client.impl.ClientEngineImpl;
import com.hazelcast.client.impl.StubAuthenticationException;
import com.hazelcast.client.impl.client.ClientPrincipal;
import com.hazelcast.logging.ILogger;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.spi.ExceptionAction;
import com.hazelcast.spi.UrgentSystemOperation;
import com.hazelcast.spi.impl.AllowedDuringPassiveState;
import java.io.IOException;
import java.util.Set;

public class ClientReAuthOperation extends AbstractClientOperation implements UrgentSystemOperation, AllowedDuringPassiveState {
  private String clientUuid;
  
  private long authCorrelationId;
  
  public ClientReAuthOperation() {}
  
  public ClientReAuthOperation(String clientUuid, long authCorrelationId) {
    this.clientUuid = clientUuid;
    this.authCorrelationId = authCorrelationId;
  }
  
  public void run() {
    ClientEngineImpl engine = (ClientEngineImpl)getService();
    engine.getClientManagementExecutor().execute(new ClientReauthTask(this));
  }
  
  private boolean doRun() throws Exception {
    ILogger logger = getLogger();
    ClientEngineImpl engine = (ClientEngineImpl)getService();
    String memberUuid = getCallerUuid();
    if (!engine.trySetLastAuthenticationCorrelationId(this.clientUuid, this.authCorrelationId)) {
      String message = "Server already processed a newer authentication from client with UUID " + this.clientUuid + ". Not applying requested ownership change to " + memberUuid;
      logger.info(message);
      throw new StubAuthenticationException(message);
    } 
    Set<ClientEndpoint> endpoints = engine.getEndpointManager().getEndpoints(this.clientUuid);
    for (ClientEndpoint endpoint : endpoints) {
      ClientPrincipal principal = new ClientPrincipal(this.clientUuid, memberUuid);
      endpoint.authenticated(principal);
    } 
    String previousMemberUuid = engine.addOwnershipMapping(this.clientUuid, memberUuid);
    if (logger.isFineEnabled())
      logger.fine("Client authenticated " + this.clientUuid + ", owner " + memberUuid); 
    return (previousMemberUuid == null);
  }
  
  public boolean returnsResponse() throws Exception { return false; }
  
  public void logError(Throwable e) {
    if (!(e instanceof StubAuthenticationException))
      super.logError(e); 
  }
  
  public ExceptionAction onInvocationException(Throwable throwable) {
    if (throwable instanceof com.hazelcast.core.MemberLeftException || throwable instanceof com.hazelcast.spi.exception.TargetNotMemberException)
      return ExceptionAction.THROW_EXCEPTION; 
    return super.onInvocationException(throwable);
  }
  
  public String getServiceName() { return "hz:core:clientEngine"; }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeUTF(this.clientUuid);
    out.writeLong(this.authCorrelationId);
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    this.clientUuid = in.readUTF();
    this.authCorrelationId = in.readLong();
  }
  
  public int getId() { return 1; }
}
