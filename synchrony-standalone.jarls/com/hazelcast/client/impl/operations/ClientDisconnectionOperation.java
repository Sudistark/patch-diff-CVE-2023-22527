package com.hazelcast.client.impl.operations;

import com.hazelcast.client.impl.ClientEndpoint;
import com.hazelcast.client.impl.ClientEndpointManagerImpl;
import com.hazelcast.client.impl.ClientEngineImpl;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.spi.ClientAwareService;
import com.hazelcast.spi.UrgentSystemOperation;
import com.hazelcast.spi.impl.NodeEngineImpl;
import java.io.IOException;
import java.util.Collection;
import java.util.Set;

public class ClientDisconnectionOperation extends AbstractClientOperation implements UrgentSystemOperation {
  private String clientUuid;
  
  private String memberUuid;
  
  public ClientDisconnectionOperation() {}
  
  public ClientDisconnectionOperation(String clientUuid, String memberUuid) {
    this.clientUuid = clientUuid;
    this.memberUuid = memberUuid;
  }
  
  public void run() {
    ClientEngineImpl engine = (ClientEngineImpl)getService();
    engine.getClientManagementExecutor().execute(new ClientDisconnectedTask(this));
  }
  
  private boolean doRun() {
    ClientEngineImpl engine = (ClientEngineImpl)getService();
    ClientEndpointManagerImpl endpointManager = (ClientEndpointManagerImpl)engine.getEndpointManager();
    if (!engine.removeOwnershipMapping(this.clientUuid, this.memberUuid))
      return false; 
    Set<ClientEndpoint> endpoints = endpointManager.getEndpoints(this.clientUuid);
    for (ClientEndpoint endpoint : endpoints)
      endpoint.getConnection().close("ClientDisconnectionOperation: Client disconnected from cluster", null); 
    NodeEngineImpl nodeEngine = (NodeEngineImpl)getNodeEngine();
    Collection<ClientAwareService> services = nodeEngine.getServices(ClientAwareService.class);
    for (ClientAwareService service : services)
      service.clientDisconnected(this.clientUuid); 
    return true;
  }
  
  public boolean returnsResponse() { return false; }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeUTF(this.clientUuid);
    out.writeUTF(this.memberUuid);
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    this.clientUuid = in.readUTF();
    this.memberUuid = in.readUTF();
  }
  
  public int getId() { return 0; }
  
  public String toString() {
    return "ClientDisconnectionOperation{clientUuid='" + this.clientUuid + '\'' + ", memberUuid='" + this.memberUuid + '\'' + "} " + super

      
      .toString();
  }
}
