package com.hazelcast.client.impl.protocol.util;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.internal.networking.HandlerStatus;
import com.hazelcast.internal.networking.nio.InboundHandlerWithCounters;
import com.hazelcast.nio.Connection;
import com.hazelcast.nio.IOUtil;
import com.hazelcast.util.collection.Long2ObjectHashMap;
import com.hazelcast.util.function.Consumer;
import java.nio.ByteBuffer;

public class ClientMessageDecoder extends InboundHandlerWithCounters<ByteBuffer, Consumer<ClientMessage>> {
  private final Long2ObjectHashMap<BufferBuilder> builderBySessionIdMap;
  
  private final Connection connection;
  
  private ClientMessage message;
  
  public ClientMessageDecoder(Connection connection, Consumer<ClientMessage> dst) {
    this.builderBySessionIdMap = new Long2ObjectHashMap();
    this.message = ClientMessage.create();
    dst(dst);
    this.connection = connection;
  }
  
  public void handlerAdded() { initSrcBuffer(); }
  
  public HandlerStatus onRead() {
    ((ByteBuffer)this.src).flip();
    try {
      while (((ByteBuffer)this.src).hasRemaining()) {
        boolean complete = this.message.readFrom((ByteBuffer)this.src);
        if (!complete)
          break; 
        if (this.message.isFlagSet((short)192)) {
          handleMessage(this.message);
          this.message = ClientMessage.create();
          continue;
        } 
        if (this.message.isFlagSet((short)128)) {
          BufferBuilder builder = new BufferBuilder();
          this.builderBySessionIdMap.put(this.message.getCorrelationId(), builder);
          builder.append(this.message.buffer(), 0, this.message.getFrameLength());
        } else {
          BufferBuilder builder = (BufferBuilder)this.builderBySessionIdMap.get(this.message.getCorrelationId());
          if (builder.position() == 0)
            throw new IllegalStateException(); 
          builder.append(this.message.buffer(), this.message.getDataOffset(), this.message.getFrameLength() - this.message.getDataOffset());
          if (this.message.isFlagSet((short)64)) {
            int msgLength = builder.position();
            ClientMessage cm = ClientMessage.createForDecode(builder.buffer(), 0);
            cm.setFrameLength(msgLength);
            handleMessage(cm);
            this.builderBySessionIdMap.remove(this.message.getCorrelationId());
          } 
        } 
        this.message = ClientMessage.create();
      } 
      return HandlerStatus.CLEAN;
    } finally {
      IOUtil.compactOrClear((ByteBuffer)this.src);
    } 
  }
  
  private void handleMessage(ClientMessage message) {
    message.index(message.getDataOffset());
    message.setConnection(this.connection);
    this.normalPacketsRead.inc();
    ((Consumer)this.dst).accept(message);
  }
}
