package com.hazelcast.client.impl.protocol.codec;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.nio.Address;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;

@SuppressFBWarnings({"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD"})
public final class CacheManagementConfigCodec {
  public static final CacheMessageType REQUEST_TYPE = CacheMessageType.CACHE_MANAGEMENTCONFIG;
  
  public static final int RESPONSE_TYPE = 100;
  
  public static ClientMessage encodeRequest(String name, boolean isStat, boolean enabled, Address address) {
    int requiredDataSize = RequestParameters.calculateDataSize(name, isStat, enabled, address);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(REQUEST_TYPE.id());
    clientMessage.setRetryable(true);
    clientMessage.setAcquiresResource(false);
    clientMessage.setOperationName("Cache.managementConfig");
    clientMessage.set(name);
    clientMessage.set(isStat);
    clientMessage.set(enabled);
    AddressCodec.encode(address, clientMessage);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static RequestParameters decodeRequest(ClientMessage clientMessage) {
    RequestParameters parameters = new RequestParameters();
    String name = null;
    name = clientMessage.getStringUtf8();
    parameters.name = name;
    boolean isStat = false;
    isStat = clientMessage.getBoolean();
    parameters.isStat = isStat;
    boolean enabled = false;
    enabled = clientMessage.getBoolean();
    parameters.enabled = enabled;
    Address address = null;
    address = AddressCodec.decode(clientMessage);
    parameters.address = address;
    return parameters;
  }
  
  public static ClientMessage encodeResponse() {
    requiredDataSize = ResponseParameters.calculateDataSize();
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(100);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static ResponseParameters decodeResponse(ClientMessage clientMessage) { return new ResponseParameters(); }
}
