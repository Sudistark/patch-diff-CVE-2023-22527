package com.hazelcast.client.impl.protocol.codec;

import com.hazelcast.client.impl.protocol.ClientMessage;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;

@SuppressFBWarnings({"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD"})
public final class ExecutorServiceCancelOnPartitionCodec {
  public static final ExecutorServiceMessageType REQUEST_TYPE = ExecutorServiceMessageType.EXECUTORSERVICE_CANCELONPARTITION;
  
  public static final int RESPONSE_TYPE = 101;
  
  public static ClientMessage encodeRequest(String uuid, int partitionId, boolean interrupt) {
    int requiredDataSize = RequestParameters.calculateDataSize(uuid, partitionId, interrupt);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(REQUEST_TYPE.id());
    clientMessage.setRetryable(false);
    clientMessage.setAcquiresResource(false);
    clientMessage.setOperationName("ExecutorService.cancelOnPartition");
    clientMessage.set(uuid);
    clientMessage.set(partitionId);
    clientMessage.set(interrupt);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static RequestParameters decodeRequest(ClientMessage clientMessage) {
    RequestParameters parameters = new RequestParameters();
    String uuid = null;
    uuid = clientMessage.getStringUtf8();
    parameters.uuid = uuid;
    int partitionId = 0;
    partitionId = clientMessage.getInt();
    parameters.partitionId = partitionId;
    boolean interrupt = false;
    interrupt = clientMessage.getBoolean();
    parameters.interrupt = interrupt;
    return parameters;
  }
  
  public static ClientMessage encodeResponse(boolean response) {
    int requiredDataSize = ResponseParameters.calculateDataSize(response);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(101);
    clientMessage.set(response);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static ResponseParameters decodeResponse(ClientMessage clientMessage) {
    ResponseParameters parameters = new ResponseParameters();
    boolean response = false;
    response = clientMessage.getBoolean();
    parameters.response = response;
    return parameters;
  }
}
