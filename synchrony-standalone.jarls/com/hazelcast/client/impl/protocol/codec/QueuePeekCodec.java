package com.hazelcast.client.impl.protocol.codec;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.nio.serialization.Data;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;

@SuppressFBWarnings({"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD"})
public final class QueuePeekCodec {
  public static final QueueMessageType REQUEST_TYPE = QueueMessageType.QUEUE_PEEK;
  
  public static final int RESPONSE_TYPE = 105;
  
  public static ClientMessage encodeRequest(String name) {
    int requiredDataSize = RequestParameters.calculateDataSize(name);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(REQUEST_TYPE.id());
    clientMessage.setRetryable(false);
    clientMessage.setAcquiresResource(false);
    clientMessage.setOperationName("Queue.peek");
    clientMessage.set(name);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static RequestParameters decodeRequest(ClientMessage clientMessage) {
    RequestParameters parameters = new RequestParameters();
    String name = null;
    name = clientMessage.getStringUtf8();
    parameters.name = name;
    return parameters;
  }
  
  public static ClientMessage encodeResponse(Data response) {
    int requiredDataSize = ResponseParameters.calculateDataSize(response);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(105);
    if (response == null) {
      boolean response_isNull = true;
      clientMessage.set(response_isNull);
    } else {
      boolean response_isNull = false;
      clientMessage.set(response_isNull);
      clientMessage.set(response);
    } 
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static ResponseParameters decodeResponse(ClientMessage clientMessage) {
    ResponseParameters parameters = new ResponseParameters();
    Data response = null;
    boolean response_isNull = clientMessage.getBoolean();
    if (!response_isNull) {
      response = clientMessage.getData();
      parameters.response = response;
    } 
    return parameters;
  }
}
