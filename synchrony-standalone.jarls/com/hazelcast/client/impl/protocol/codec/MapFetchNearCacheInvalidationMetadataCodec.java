package com.hazelcast.client.impl.protocol.codec;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.nio.Address;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.UUID;

@SuppressFBWarnings({"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD"})
public final class MapFetchNearCacheInvalidationMetadataCodec {
  public static final MapMessageType REQUEST_TYPE = MapMessageType.MAP_FETCHNEARCACHEINVALIDATIONMETADATA;
  
  public static final int RESPONSE_TYPE = 122;
  
  public static ClientMessage encodeRequest(Collection<String> names, Address address) {
    int requiredDataSize = RequestParameters.calculateDataSize(names, address);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(REQUEST_TYPE.id());
    clientMessage.setRetryable(false);
    clientMessage.setAcquiresResource(false);
    clientMessage.setOperationName("Map.fetchNearCacheInvalidationMetadata");
    clientMessage.set(names.size());
    for (String names_item : names)
      clientMessage.set(names_item); 
    AddressCodec.encode(address, clientMessage);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static RequestParameters decodeRequest(ClientMessage clientMessage) {
    RequestParameters parameters = new RequestParameters();
    if (clientMessage.isComplete())
      return parameters; 
    List<String> names = null;
    int names_size = clientMessage.getInt();
    names = new ArrayList<String>(names_size);
    for (int names_index = 0; names_index < names_size; names_index++) {
      String names_item = clientMessage.getStringUtf8();
      names.add(names_item);
    } 
    parameters.names = names;
    Address address = null;
    address = AddressCodec.decode(clientMessage);
    parameters.address = address;
    return parameters;
  }
  
  public static ClientMessage encodeResponse(Collection<Map.Entry<String, List<Map.Entry<Integer, Long>>>> namePartitionSequenceList, Collection<Map.Entry<Integer, UUID>> partitionUuidList) {
    int requiredDataSize = ResponseParameters.calculateDataSize(namePartitionSequenceList, partitionUuidList);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(122);
    clientMessage.set(namePartitionSequenceList.size());
    for (Map.Entry<String, List<Map.Entry<Integer, Long>>> namePartitionSequenceList_item : namePartitionSequenceList) {
      String namePartitionSequenceList_itemKey = (String)namePartitionSequenceList_item.getKey();
      List<Map.Entry<Integer, Long>> namePartitionSequenceList_itemVal = (List)namePartitionSequenceList_item.getValue();
      clientMessage.set(namePartitionSequenceList_itemKey);
      clientMessage.set(namePartitionSequenceList_itemVal.size());
      for (Map.Entry<Integer, Long> namePartitionSequenceList_itemVal_item : namePartitionSequenceList_itemVal) {
        Integer namePartitionSequenceList_itemVal_itemKey = (Integer)namePartitionSequenceList_itemVal_item.getKey();
        Long namePartitionSequenceList_itemVal_itemVal = (Long)namePartitionSequenceList_itemVal_item.getValue();
        clientMessage.set(namePartitionSequenceList_itemVal_itemKey.intValue());
        clientMessage.set(namePartitionSequenceList_itemVal_itemVal.longValue());
      } 
    } 
    clientMessage.set(partitionUuidList.size());
    for (Map.Entry<Integer, UUID> partitionUuidList_item : partitionUuidList) {
      Integer partitionUuidList_itemKey = (Integer)partitionUuidList_item.getKey();
      UUID partitionUuidList_itemVal = (UUID)partitionUuidList_item.getValue();
      clientMessage.set(partitionUuidList_itemKey.intValue());
      UUIDCodec.encode(partitionUuidList_itemVal, clientMessage);
    } 
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static ResponseParameters decodeResponse(ClientMessage clientMessage) {
    ResponseParameters parameters = new ResponseParameters();
    List<Map.Entry<String, List<Map.Entry<Integer, Long>>>> namePartitionSequenceList = null;
    int namePartitionSequenceList_size = clientMessage.getInt();
    namePartitionSequenceList = new ArrayList<Map.Entry<String, List<Map.Entry<Integer, Long>>>>(namePartitionSequenceList_size);
    for (int namePartitionSequenceList_index = 0; namePartitionSequenceList_index < namePartitionSequenceList_size; namePartitionSequenceList_index++) {
      String namePartitionSequenceList_item_key = clientMessage.getStringUtf8();
      int namePartitionSequenceList_item_val_size = clientMessage.getInt();
      List<Map.Entry<Integer, Long>> namePartitionSequenceList_item_val = new ArrayList<Map.Entry<Integer, Long>>(namePartitionSequenceList_item_val_size);
      for (int namePartitionSequenceList_item_val_index = 0; namePartitionSequenceList_item_val_index < namePartitionSequenceList_item_val_size; namePartitionSequenceList_item_val_index++) {
        Integer namePartitionSequenceList_item_val_item_key = Integer.valueOf(clientMessage.getInt());
        Long namePartitionSequenceList_item_val_item_val = Long.valueOf(clientMessage.getLong());
        Map.Entry<Integer, Long> namePartitionSequenceList_item_val_item = new AbstractMap.SimpleEntry<Integer, Long>(namePartitionSequenceList_item_val_item_key, namePartitionSequenceList_item_val_item_val);
        namePartitionSequenceList_item_val.add(namePartitionSequenceList_item_val_item);
      } 
      Map.Entry<String, List<Map.Entry<Integer, Long>>> namePartitionSequenceList_item = new AbstractMap.SimpleEntry<String, List<Map.Entry<Integer, Long>>>(namePartitionSequenceList_item_key, namePartitionSequenceList_item_val);
      namePartitionSequenceList.add(namePartitionSequenceList_item);
    } 
    parameters.namePartitionSequenceList = namePartitionSequenceList;
    List<Map.Entry<Integer, UUID>> partitionUuidList = null;
    int partitionUuidList_size = clientMessage.getInt();
    partitionUuidList = new ArrayList<Map.Entry<Integer, UUID>>(partitionUuidList_size);
    for (int partitionUuidList_index = 0; partitionUuidList_index < partitionUuidList_size; partitionUuidList_index++) {
      Integer partitionUuidList_item_key = Integer.valueOf(clientMessage.getInt());
      UUID partitionUuidList_item_val = UUIDCodec.decode(clientMessage);
      Map.Entry<Integer, UUID> partitionUuidList_item = new AbstractMap.SimpleEntry<Integer, UUID>(partitionUuidList_item_key, partitionUuidList_item_val);
      partitionUuidList.add(partitionUuidList_item);
    } 
    parameters.partitionUuidList = partitionUuidList;
    return parameters;
  }
}
