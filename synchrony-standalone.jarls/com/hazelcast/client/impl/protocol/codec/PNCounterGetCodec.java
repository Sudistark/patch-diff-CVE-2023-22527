package com.hazelcast.client.impl.protocol.codec;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.nio.Address;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;

@SuppressFBWarnings({"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD"})
public final class PNCounterGetCodec {
  public static final PNCounterMessageType REQUEST_TYPE = PNCounterMessageType.PNCOUNTER_GET;
  
  public static final int RESPONSE_TYPE = 127;
  
  public static ClientMessage encodeRequest(String name, Collection<Map.Entry<String, Long>> replicaTimestamps, Address targetReplica) {
    int requiredDataSize = RequestParameters.calculateDataSize(name, replicaTimestamps, targetReplica);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(REQUEST_TYPE.id());
    clientMessage.setRetryable(true);
    clientMessage.setAcquiresResource(false);
    clientMessage.setOperationName("PNCounter.get");
    clientMessage.set(name);
    clientMessage.set(replicaTimestamps.size());
    for (Map.Entry<String, Long> replicaTimestamps_item : replicaTimestamps) {
      String replicaTimestamps_itemKey = (String)replicaTimestamps_item.getKey();
      Long replicaTimestamps_itemVal = (Long)replicaTimestamps_item.getValue();
      clientMessage.set(replicaTimestamps_itemKey);
      clientMessage.set(replicaTimestamps_itemVal.longValue());
    } 
    AddressCodec.encode(targetReplica, clientMessage);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static RequestParameters decodeRequest(ClientMessage clientMessage) {
    RequestParameters parameters = new RequestParameters();
    if (clientMessage.isComplete())
      return parameters; 
    String name = null;
    name = clientMessage.getStringUtf8();
    parameters.name = name;
    List<Map.Entry<String, Long>> replicaTimestamps = null;
    int replicaTimestamps_size = clientMessage.getInt();
    replicaTimestamps = new ArrayList<Map.Entry<String, Long>>(replicaTimestamps_size);
    for (int replicaTimestamps_index = 0; replicaTimestamps_index < replicaTimestamps_size; replicaTimestamps_index++) {
      String replicaTimestamps_item_key = clientMessage.getStringUtf8();
      Long replicaTimestamps_item_val = Long.valueOf(clientMessage.getLong());
      Map.Entry<String, Long> replicaTimestamps_item = new AbstractMap.SimpleEntry<String, Long>(replicaTimestamps_item_key, replicaTimestamps_item_val);
      replicaTimestamps.add(replicaTimestamps_item);
    } 
    parameters.replicaTimestamps = replicaTimestamps;
    Address targetReplica = null;
    targetReplica = AddressCodec.decode(clientMessage);
    parameters.targetReplica = targetReplica;
    return parameters;
  }
  
  public static ClientMessage encodeResponse(long value, Collection<Map.Entry<String, Long>> replicaTimestamps, int replicaCount) {
    int requiredDataSize = ResponseParameters.calculateDataSize(value, replicaTimestamps, replicaCount);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(127);
    clientMessage.set(value);
    clientMessage.set(replicaTimestamps.size());
    for (Map.Entry<String, Long> replicaTimestamps_item : replicaTimestamps) {
      String replicaTimestamps_itemKey = (String)replicaTimestamps_item.getKey();
      Long replicaTimestamps_itemVal = (Long)replicaTimestamps_item.getValue();
      clientMessage.set(replicaTimestamps_itemKey);
      clientMessage.set(replicaTimestamps_itemVal.longValue());
    } 
    clientMessage.set(replicaCount);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static ResponseParameters decodeResponse(ClientMessage clientMessage) {
    ResponseParameters parameters = new ResponseParameters();
    long value = 0L;
    value = clientMessage.getLong();
    parameters.value = value;
    List<Map.Entry<String, Long>> replicaTimestamps = null;
    int replicaTimestamps_size = clientMessage.getInt();
    replicaTimestamps = new ArrayList<Map.Entry<String, Long>>(replicaTimestamps_size);
    for (int replicaTimestamps_index = 0; replicaTimestamps_index < replicaTimestamps_size; replicaTimestamps_index++) {
      String replicaTimestamps_item_key = clientMessage.getStringUtf8();
      Long replicaTimestamps_item_val = Long.valueOf(clientMessage.getLong());
      Map.Entry<String, Long> replicaTimestamps_item = new AbstractMap.SimpleEntry<String, Long>(replicaTimestamps_item_key, replicaTimestamps_item_val);
      replicaTimestamps.add(replicaTimestamps_item);
    } 
    parameters.replicaTimestamps = replicaTimestamps;
    int replicaCount = 0;
    replicaCount = clientMessage.getInt();
    parameters.replicaCount = replicaCount;
    return parameters;
  }
}
