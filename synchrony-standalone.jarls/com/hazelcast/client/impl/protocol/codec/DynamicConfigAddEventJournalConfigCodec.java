package com.hazelcast.client.impl.protocol.codec;

import com.hazelcast.client.impl.protocol.ClientMessage;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;

@SuppressFBWarnings({"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD"})
public final class DynamicConfigAddEventJournalConfigCodec {
  public static final DynamicConfigMessageType REQUEST_TYPE = DynamicConfigMessageType.DYNAMICCONFIG_ADDEVENTJOURNALCONFIG;
  
  public static final int RESPONSE_TYPE = 100;
  
  public static ClientMessage encodeRequest(String mapName, String cacheName, boolean enabled, int capacity, int timeToLiveSeconds) {
    int requiredDataSize = RequestParameters.calculateDataSize(mapName, cacheName, enabled, capacity, timeToLiveSeconds);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(REQUEST_TYPE.id());
    clientMessage.setRetryable(false);
    clientMessage.setAcquiresResource(false);
    clientMessage.setOperationName("DynamicConfig.addEventJournalConfig");
    if (mapName == null) {
      boolean mapName_isNull = true;
      clientMessage.set(mapName_isNull);
    } else {
      boolean mapName_isNull = false;
      clientMessage.set(mapName_isNull);
      clientMessage.set(mapName);
    } 
    if (cacheName == null) {
      boolean cacheName_isNull = true;
      clientMessage.set(cacheName_isNull);
    } else {
      boolean cacheName_isNull = false;
      clientMessage.set(cacheName_isNull);
      clientMessage.set(cacheName);
    } 
    clientMessage.set(enabled);
    clientMessage.set(capacity);
    clientMessage.set(timeToLiveSeconds);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static RequestParameters decodeRequest(ClientMessage clientMessage) {
    RequestParameters parameters = new RequestParameters();
    if (clientMessage.isComplete())
      return parameters; 
    String mapName = null;
    boolean mapName_isNull = clientMessage.getBoolean();
    if (!mapName_isNull) {
      mapName = clientMessage.getStringUtf8();
      parameters.mapName = mapName;
    } 
    String cacheName = null;
    boolean cacheName_isNull = clientMessage.getBoolean();
    if (!cacheName_isNull) {
      cacheName = clientMessage.getStringUtf8();
      parameters.cacheName = cacheName;
    } 
    boolean enabled = false;
    enabled = clientMessage.getBoolean();
    parameters.enabled = enabled;
    int capacity = 0;
    capacity = clientMessage.getInt();
    parameters.capacity = capacity;
    int timeToLiveSeconds = 0;
    timeToLiveSeconds = clientMessage.getInt();
    parameters.timeToLiveSeconds = timeToLiveSeconds;
    return parameters;
  }
  
  public static ClientMessage encodeResponse() {
    requiredDataSize = ResponseParameters.calculateDataSize();
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(100);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static ResponseParameters decodeResponse(ClientMessage clientMessage) { return new ResponseParameters(); }
}
