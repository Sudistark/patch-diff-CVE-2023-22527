package com.hazelcast.client.impl.protocol.codec;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.util.ParameterUtil;
import com.hazelcast.nio.Address;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import java.util.Collection;
import java.util.List;
import java.util.Map;

@SuppressFBWarnings({"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD"})
public final class ClientAddPartitionListenerCodec {
  public static final ClientMessageType REQUEST_TYPE = ClientMessageType.CLIENT_ADDPARTITIONLISTENER;
  
  public static final int RESPONSE_TYPE = 100;
  
  public static ClientMessage encodeRequest() {
    requiredDataSize = RequestParameters.calculateDataSize();
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(REQUEST_TYPE.id());
    clientMessage.setRetryable(false);
    clientMessage.setAcquiresResource(false);
    clientMessage.setOperationName("Client.addPartitionListener");
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static RequestParameters decodeRequest(ClientMessage clientMessage) { return new RequestParameters(); }
  
  public static ClientMessage encodeResponse() {
    requiredDataSize = ResponseParameters.calculateDataSize();
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(100);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static ResponseParameters decodeResponse(ClientMessage clientMessage) { return new ResponseParameters(); }
  
  public static ClientMessage encodePartitionsEvent(Collection<Map.Entry<Address, List<Integer>>> partitions, int partitionStateVersion) {
    int dataSize = ClientMessage.HEADER_SIZE;
    dataSize += 4;
    for (Map.Entry<Address, List<Integer>> partitions_item : partitions) {
      Address partitions_itemKey = (Address)partitions_item.getKey();
      List<Integer> partitions_itemVal = (List)partitions_item.getValue();
      dataSize += AddressCodec.calculateDataSize(partitions_itemKey);
      dataSize += 4;
      for (Integer partitions_itemVal_item : partitions_itemVal)
        dataSize += ParameterUtil.calculateDataSize(partitions_itemVal_item); 
    } 
    dataSize += 4;
    ClientMessage clientMessage = ClientMessage.createForEncode(dataSize);
    clientMessage.setMessageType(217);
    clientMessage.addFlag((short)1);
    clientMessage.set(partitions.size());
    for (Map.Entry<Address, List<Integer>> partitions_item : partitions) {
      Address partitions_itemKey = (Address)partitions_item.getKey();
      List<Integer> partitions_itemVal = (List)partitions_item.getValue();
      AddressCodec.encode(partitions_itemKey, clientMessage);
      clientMessage.set(partitions_itemVal.size());
      for (Integer partitions_itemVal_item : partitions_itemVal)
        clientMessage.set(partitions_itemVal_item.intValue()); 
    } 
    clientMessage.set(partitionStateVersion);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
}
