package com.hazelcast.client.impl.protocol.codec;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.core.Member;
import com.hazelcast.nio.Address;
import com.hazelcast.nio.serialization.Data;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

@SuppressFBWarnings({"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD"})
public final class ClientAuthenticationCustomCodec {
  public static final ClientMessageType REQUEST_TYPE = ClientMessageType.CLIENT_AUTHENTICATIONCUSTOM;
  
  public static final int RESPONSE_TYPE = 107;
  
  public static ClientMessage encodeRequest(Data credentials, String uuid, String ownerUuid, boolean isOwnerConnection, String clientType, byte serializationVersion) {
    int requiredDataSize = RequestParameters.calculateDataSize(credentials, uuid, ownerUuid, isOwnerConnection, clientType, serializationVersion);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(REQUEST_TYPE.id());
    clientMessage.setRetryable(true);
    clientMessage.setAcquiresResource(false);
    clientMessage.setOperationName("Client.authenticationCustom");
    clientMessage.set(credentials);
    if (uuid == null) {
      boolean uuid_isNull = true;
      clientMessage.set(uuid_isNull);
    } else {
      boolean uuid_isNull = false;
      clientMessage.set(uuid_isNull);
      clientMessage.set(uuid);
    } 
    if (ownerUuid == null) {
      boolean ownerUuid_isNull = true;
      clientMessage.set(ownerUuid_isNull);
    } else {
      boolean ownerUuid_isNull = false;
      clientMessage.set(ownerUuid_isNull);
      clientMessage.set(ownerUuid);
    } 
    clientMessage.set(isOwnerConnection);
    clientMessage.set(clientType);
    clientMessage.set(serializationVersion);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static ClientMessage encodeRequest(Data credentials, String uuid, String ownerUuid, boolean isOwnerConnection, String clientType, byte serializationVersion, String clientHazelcastVersion) {
    int requiredDataSize = RequestParameters.calculateDataSize(credentials, uuid, ownerUuid, isOwnerConnection, clientType, serializationVersion, clientHazelcastVersion);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(REQUEST_TYPE.id());
    clientMessage.setRetryable(true);
    clientMessage.setAcquiresResource(false);
    clientMessage.setOperationName("Client.authenticationCustom");
    clientMessage.set(credentials);
    if (uuid == null) {
      boolean uuid_isNull = true;
      clientMessage.set(uuid_isNull);
    } else {
      boolean uuid_isNull = false;
      clientMessage.set(uuid_isNull);
      clientMessage.set(uuid);
    } 
    if (ownerUuid == null) {
      boolean ownerUuid_isNull = true;
      clientMessage.set(ownerUuid_isNull);
    } else {
      boolean ownerUuid_isNull = false;
      clientMessage.set(ownerUuid_isNull);
      clientMessage.set(ownerUuid);
    } 
    clientMessage.set(isOwnerConnection);
    clientMessage.set(clientType);
    clientMessage.set(serializationVersion);
    clientMessage.set(clientHazelcastVersion);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static ClientMessage encodeRequest(Data credentials, String uuid, String ownerUuid, boolean isOwnerConnection, String clientType, byte serializationVersion, String clientHazelcastVersion, String clientName, Collection<String> labels, Integer partitionCount, String clusterId) {
    int requiredDataSize = RequestParameters.calculateDataSize(credentials, uuid, ownerUuid, isOwnerConnection, clientType, serializationVersion, clientHazelcastVersion, clientName, labels, partitionCount, clusterId);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(REQUEST_TYPE.id());
    clientMessage.setRetryable(true);
    clientMessage.setAcquiresResource(false);
    clientMessage.setOperationName("Client.authenticationCustom");
    clientMessage.set(credentials);
    if (uuid == null) {
      boolean uuid_isNull = true;
      clientMessage.set(uuid_isNull);
    } else {
      boolean uuid_isNull = false;
      clientMessage.set(uuid_isNull);
      clientMessage.set(uuid);
    } 
    if (ownerUuid == null) {
      boolean ownerUuid_isNull = true;
      clientMessage.set(ownerUuid_isNull);
    } else {
      boolean ownerUuid_isNull = false;
      clientMessage.set(ownerUuid_isNull);
      clientMessage.set(ownerUuid);
    } 
    clientMessage.set(isOwnerConnection);
    clientMessage.set(clientType);
    clientMessage.set(serializationVersion);
    clientMessage.set(clientHazelcastVersion);
    clientMessage.set(clientName);
    clientMessage.set(labels.size());
    for (String labels_item : labels)
      clientMessage.set(labels_item); 
    if (partitionCount == null) {
      boolean partitionCount_isNull = true;
      clientMessage.set(partitionCount_isNull);
    } else {
      boolean partitionCount_isNull = false;
      clientMessage.set(partitionCount_isNull);
      clientMessage.set(partitionCount.intValue());
    } 
    if (clusterId == null) {
      boolean clusterId_isNull = true;
      clientMessage.set(clusterId_isNull);
    } else {
      boolean clusterId_isNull = false;
      clientMessage.set(clusterId_isNull);
      clientMessage.set(clusterId);
    } 
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static RequestParameters decodeRequest(ClientMessage clientMessage) {
    RequestParameters parameters = new RequestParameters();
    Data credentials = null;
    credentials = clientMessage.getData();
    parameters.credentials = credentials;
    String uuid = null;
    boolean uuid_isNull = clientMessage.getBoolean();
    if (!uuid_isNull) {
      uuid = clientMessage.getStringUtf8();
      parameters.uuid = uuid;
    } 
    String ownerUuid = null;
    boolean ownerUuid_isNull = clientMessage.getBoolean();
    if (!ownerUuid_isNull) {
      ownerUuid = clientMessage.getStringUtf8();
      parameters.ownerUuid = ownerUuid;
    } 
    boolean isOwnerConnection = false;
    isOwnerConnection = clientMessage.getBoolean();
    parameters.isOwnerConnection = isOwnerConnection;
    String clientType = null;
    clientType = clientMessage.getStringUtf8();
    parameters.clientType = clientType;
    byte serializationVersion = 0;
    serializationVersion = clientMessage.getByte();
    parameters.serializationVersion = serializationVersion;
    if (clientMessage.isComplete())
      return parameters; 
    try {
      String clientHazelcastVersion = null;
      clientHazelcastVersion = clientMessage.getStringUtf8();
      parameters.clientHazelcastVersion = clientHazelcastVersion;
    } catch (IndexOutOfBoundsException e) {
      if ("CSP".equals(parameters.clientType))
        return parameters; 
      throw e;
    } 
    parameters.clientHazelcastVersionExist = true;
    if (clientMessage.isComplete())
      return parameters; 
    String clientName = null;
    clientName = clientMessage.getStringUtf8();
    parameters.clientName = clientName;
    parameters.clientNameExist = true;
    List<String> labels = null;
    int labels_size = clientMessage.getInt();
    labels = new ArrayList<String>(labels_size);
    for (int labels_index = 0; labels_index < labels_size; labels_index++) {
      String labels_item = clientMessage.getStringUtf8();
      labels.add(labels_item);
    } 
    parameters.labels = labels;
    parameters.labelsExist = true;
    Integer partitionCount = null;
    boolean partitionCount_isNull = clientMessage.getBoolean();
    if (!partitionCount_isNull) {
      partitionCount = Integer.valueOf(clientMessage.getInt());
      parameters.partitionCount = partitionCount;
    } 
    parameters.partitionCountExist = true;
    String clusterId = null;
    boolean clusterId_isNull = clientMessage.getBoolean();
    if (!clusterId_isNull) {
      clusterId = clientMessage.getStringUtf8();
      parameters.clusterId = clusterId;
    } 
    parameters.clusterIdExist = true;
    return parameters;
  }
  
  public static ClientMessage encodeResponse(byte status, Address address, String uuid, String ownerUuid, byte serializationVersion) {
    int requiredDataSize = ResponseParameters.calculateDataSize(status, address, uuid, ownerUuid, serializationVersion);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(107);
    clientMessage.set(status);
    if (address == null) {
      boolean address_isNull = true;
      clientMessage.set(address_isNull);
    } else {
      boolean address_isNull = false;
      clientMessage.set(address_isNull);
      AddressCodec.encode(address, clientMessage);
    } 
    if (uuid == null) {
      boolean uuid_isNull = true;
      clientMessage.set(uuid_isNull);
    } else {
      boolean uuid_isNull = false;
      clientMessage.set(uuid_isNull);
      clientMessage.set(uuid);
    } 
    if (ownerUuid == null) {
      boolean ownerUuid_isNull = true;
      clientMessage.set(ownerUuid_isNull);
    } else {
      boolean ownerUuid_isNull = false;
      clientMessage.set(ownerUuid_isNull);
      clientMessage.set(ownerUuid);
    } 
    clientMessage.set(serializationVersion);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static ClientMessage encodeResponse(byte status, Address address, String uuid, String ownerUuid, byte serializationVersion, String serverHazelcastVersion, Collection<Member> clientUnregisteredMembers) {
    int requiredDataSize = ResponseParameters.calculateDataSize(status, address, uuid, ownerUuid, serializationVersion, serverHazelcastVersion, clientUnregisteredMembers);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(107);
    clientMessage.set(status);
    if (address == null) {
      boolean address_isNull = true;
      clientMessage.set(address_isNull);
    } else {
      boolean address_isNull = false;
      clientMessage.set(address_isNull);
      AddressCodec.encode(address, clientMessage);
    } 
    if (uuid == null) {
      boolean uuid_isNull = true;
      clientMessage.set(uuid_isNull);
    } else {
      boolean uuid_isNull = false;
      clientMessage.set(uuid_isNull);
      clientMessage.set(uuid);
    } 
    if (ownerUuid == null) {
      boolean ownerUuid_isNull = true;
      clientMessage.set(ownerUuid_isNull);
    } else {
      boolean ownerUuid_isNull = false;
      clientMessage.set(ownerUuid_isNull);
      clientMessage.set(ownerUuid);
    } 
    clientMessage.set(serializationVersion);
    clientMessage.set(serverHazelcastVersion);
    if (clientUnregisteredMembers == null) {
      boolean clientUnregisteredMembers_isNull = true;
      clientMessage.set(clientUnregisteredMembers_isNull);
    } else {
      boolean clientUnregisteredMembers_isNull = false;
      clientMessage.set(clientUnregisteredMembers_isNull);
      clientMessage.set(clientUnregisteredMembers.size());
      for (Member clientUnregisteredMembers_item : clientUnregisteredMembers)
        MemberCodec.encode(clientUnregisteredMembers_item, clientMessage); 
    } 
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static ClientMessage encodeResponse(byte status, Address address, String uuid, String ownerUuid, byte serializationVersion, String serverHazelcastVersion, Collection<Member> clientUnregisteredMembers, int partitionCount, String clusterId) {
    int requiredDataSize = ResponseParameters.calculateDataSize(status, address, uuid, ownerUuid, serializationVersion, serverHazelcastVersion, clientUnregisteredMembers, partitionCount, clusterId);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(107);
    clientMessage.set(status);
    if (address == null) {
      boolean address_isNull = true;
      clientMessage.set(address_isNull);
    } else {
      boolean address_isNull = false;
      clientMessage.set(address_isNull);
      AddressCodec.encode(address, clientMessage);
    } 
    if (uuid == null) {
      boolean uuid_isNull = true;
      clientMessage.set(uuid_isNull);
    } else {
      boolean uuid_isNull = false;
      clientMessage.set(uuid_isNull);
      clientMessage.set(uuid);
    } 
    if (ownerUuid == null) {
      boolean ownerUuid_isNull = true;
      clientMessage.set(ownerUuid_isNull);
    } else {
      boolean ownerUuid_isNull = false;
      clientMessage.set(ownerUuid_isNull);
      clientMessage.set(ownerUuid);
    } 
    clientMessage.set(serializationVersion);
    clientMessage.set(serverHazelcastVersion);
    if (clientUnregisteredMembers == null) {
      boolean clientUnregisteredMembers_isNull = true;
      clientMessage.set(clientUnregisteredMembers_isNull);
    } else {
      boolean clientUnregisteredMembers_isNull = false;
      clientMessage.set(clientUnregisteredMembers_isNull);
      clientMessage.set(clientUnregisteredMembers.size());
      for (Member clientUnregisteredMembers_item : clientUnregisteredMembers)
        MemberCodec.encode(clientUnregisteredMembers_item, clientMessage); 
    } 
    clientMessage.set(partitionCount);
    clientMessage.set(clusterId);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static ResponseParameters decodeResponse(ClientMessage clientMessage) {
    ResponseParameters parameters = new ResponseParameters();
    byte status = 0;
    status = clientMessage.getByte();
    parameters.status = status;
    Address address = null;
    boolean address_isNull = clientMessage.getBoolean();
    if (!address_isNull) {
      address = AddressCodec.decode(clientMessage);
      parameters.address = address;
    } 
    String uuid = null;
    boolean uuid_isNull = clientMessage.getBoolean();
    if (!uuid_isNull) {
      uuid = clientMessage.getStringUtf8();
      parameters.uuid = uuid;
    } 
    String ownerUuid = null;
    boolean ownerUuid_isNull = clientMessage.getBoolean();
    if (!ownerUuid_isNull) {
      ownerUuid = clientMessage.getStringUtf8();
      parameters.ownerUuid = ownerUuid;
    } 
    byte serializationVersion = 0;
    serializationVersion = clientMessage.getByte();
    parameters.serializationVersion = serializationVersion;
    if (clientMessage.isComplete())
      return parameters; 
    String serverHazelcastVersion = null;
    serverHazelcastVersion = clientMessage.getStringUtf8();
    parameters.serverHazelcastVersion = serverHazelcastVersion;
    parameters.serverHazelcastVersionExist = true;
    List<Member> clientUnregisteredMembers = null;
    boolean clientUnregisteredMembers_isNull = clientMessage.getBoolean();
    if (!clientUnregisteredMembers_isNull) {
      int clientUnregisteredMembers_size = clientMessage.getInt();
      clientUnregisteredMembers = new ArrayList<Member>(clientUnregisteredMembers_size);
      for (int clientUnregisteredMembers_index = 0; clientUnregisteredMembers_index < clientUnregisteredMembers_size; clientUnregisteredMembers_index++) {
        Member clientUnregisteredMembers_item = MemberCodec.decode(clientMessage);
        clientUnregisteredMembers.add(clientUnregisteredMembers_item);
      } 
      parameters.clientUnregisteredMembers = clientUnregisteredMembers;
    } 
    parameters.clientUnregisteredMembersExist = true;
    if (clientMessage.isComplete())
      return parameters; 
    int partitionCount = 0;
    partitionCount = clientMessage.getInt();
    parameters.partitionCount = partitionCount;
    parameters.partitionCountExist = true;
    String clusterId = null;
    clusterId = clientMessage.getStringUtf8();
    parameters.clusterId = clusterId;
    parameters.clusterIdExist = true;
    return parameters;
  }
}
