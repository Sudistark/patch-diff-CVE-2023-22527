package com.hazelcast.client.impl.protocol.codec;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.cp.internal.RaftGroupId;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import java.util.UUID;

@SuppressFBWarnings({"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD"})
public final class CPSemaphoreReleaseCodec {
  public static final CPSemaphoreMessageType REQUEST_TYPE = CPSemaphoreMessageType.CPSEMAPHORE_RELEASE;
  
  public static final int RESPONSE_TYPE = 101;
  
  public static ClientMessage encodeRequest(RaftGroupId groupId, String name, long sessionId, long threadId, UUID invocationUid, int permits) {
    int requiredDataSize = RequestParameters.calculateDataSize(groupId, name, sessionId, threadId, invocationUid, permits);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(REQUEST_TYPE.id());
    clientMessage.setRetryable(true);
    clientMessage.setAcquiresResource(false);
    clientMessage.setOperationName("CPSemaphore.release");
    RaftGroupIdCodec.encode(groupId, clientMessage);
    clientMessage.set(name);
    clientMessage.set(sessionId);
    clientMessage.set(threadId);
    UUIDCodec.encode(invocationUid, clientMessage);
    clientMessage.set(permits);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static RequestParameters decodeRequest(ClientMessage clientMessage) {
    RequestParameters parameters = new RequestParameters();
    if (clientMessage.isComplete())
      return parameters; 
    RaftGroupId groupId = null;
    groupId = RaftGroupIdCodec.decode(clientMessage);
    parameters.groupId = groupId;
    String name = null;
    name = clientMessage.getStringUtf8();
    parameters.name = name;
    long sessionId = 0L;
    sessionId = clientMessage.getLong();
    parameters.sessionId = sessionId;
    long threadId = 0L;
    threadId = clientMessage.getLong();
    parameters.threadId = threadId;
    UUID invocationUid = null;
    invocationUid = UUIDCodec.decode(clientMessage);
    parameters.invocationUid = invocationUid;
    int permits = 0;
    permits = clientMessage.getInt();
    parameters.permits = permits;
    return parameters;
  }
  
  public static ClientMessage encodeResponse(boolean response) {
    int requiredDataSize = ResponseParameters.calculateDataSize(response);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(101);
    clientMessage.set(response);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static ResponseParameters decodeResponse(ClientMessage clientMessage) {
    ResponseParameters parameters = new ResponseParameters();
    boolean response = false;
    response = clientMessage.getBoolean();
    parameters.response = response;
    return parameters;
  }
}
