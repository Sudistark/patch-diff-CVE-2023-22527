package com.hazelcast.client.impl.protocol.codec;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.nio.serialization.Data;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

@SuppressFBWarnings({"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD"})
public final class CacheIterateCodec {
  public static final CacheMessageType REQUEST_TYPE = CacheMessageType.CACHE_ITERATE;
  
  public static final int RESPONSE_TYPE = 116;
  
  public static ClientMessage encodeRequest(String name, int partitionId, int tableIndex, int batch) {
    int requiredDataSize = RequestParameters.calculateDataSize(name, partitionId, tableIndex, batch);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(REQUEST_TYPE.id());
    clientMessage.setRetryable(false);
    clientMessage.setAcquiresResource(false);
    clientMessage.setOperationName("Cache.iterate");
    clientMessage.set(name);
    clientMessage.set(partitionId);
    clientMessage.set(tableIndex);
    clientMessage.set(batch);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static RequestParameters decodeRequest(ClientMessage clientMessage) {
    RequestParameters parameters = new RequestParameters();
    String name = null;
    name = clientMessage.getStringUtf8();
    parameters.name = name;
    int partitionId = 0;
    partitionId = clientMessage.getInt();
    parameters.partitionId = partitionId;
    int tableIndex = 0;
    tableIndex = clientMessage.getInt();
    parameters.tableIndex = tableIndex;
    int batch = 0;
    batch = clientMessage.getInt();
    parameters.batch = batch;
    return parameters;
  }
  
  public static ClientMessage encodeResponse(int tableIndex, Collection<Data> keys) {
    int requiredDataSize = ResponseParameters.calculateDataSize(tableIndex, keys);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(116);
    clientMessage.set(tableIndex);
    clientMessage.set(keys.size());
    for (Data keys_item : keys)
      clientMessage.set(keys_item); 
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static ResponseParameters decodeResponse(ClientMessage clientMessage) {
    ResponseParameters parameters = new ResponseParameters();
    int tableIndex = 0;
    tableIndex = clientMessage.getInt();
    parameters.tableIndex = tableIndex;
    List<Data> keys = null;
    int keys_size = clientMessage.getInt();
    keys = new ArrayList<Data>(keys_size);
    for (int keys_index = 0; keys_index < keys_size; keys_index++) {
      Data keys_item = clientMessage.getData();
      keys.add(keys_item);
    } 
    parameters.keys = keys;
    return parameters;
  }
}
