package com.hazelcast.client.impl.protocol.codec;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.task.dynamicconfig.ListenerConfigHolder;
import com.hazelcast.client.impl.protocol.task.dynamicconfig.QueueStoreConfigHolder;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

@SuppressFBWarnings({"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD"})
public final class DynamicConfigAddQueueConfigCodec {
  public static final DynamicConfigMessageType REQUEST_TYPE = DynamicConfigMessageType.DYNAMICCONFIG_ADDQUEUECONFIG;
  
  public static final int RESPONSE_TYPE = 100;
  
  public static ClientMessage encodeRequest(String name, Collection<ListenerConfigHolder> listenerConfigs, int backupCount, int asyncBackupCount, int maxSize, int emptyQueueTtl, boolean statisticsEnabled, String quorumName, QueueStoreConfigHolder queueStoreConfig) {
    int requiredDataSize = RequestParameters.calculateDataSize(name, listenerConfigs, backupCount, asyncBackupCount, maxSize, emptyQueueTtl, statisticsEnabled, quorumName, queueStoreConfig);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(REQUEST_TYPE.id());
    clientMessage.setRetryable(false);
    clientMessage.setAcquiresResource(false);
    clientMessage.setOperationName("DynamicConfig.addQueueConfig");
    clientMessage.set(name);
    if (listenerConfigs == null) {
      boolean listenerConfigs_isNull = true;
      clientMessage.set(listenerConfigs_isNull);
    } else {
      boolean listenerConfigs_isNull = false;
      clientMessage.set(listenerConfigs_isNull);
      clientMessage.set(listenerConfigs.size());
      for (ListenerConfigHolder listenerConfigs_item : listenerConfigs)
        ListenerConfigCodec.encode(listenerConfigs_item, clientMessage); 
    } 
    clientMessage.set(backupCount);
    clientMessage.set(asyncBackupCount);
    clientMessage.set(maxSize);
    clientMessage.set(emptyQueueTtl);
    clientMessage.set(statisticsEnabled);
    if (quorumName == null) {
      boolean quorumName_isNull = true;
      clientMessage.set(quorumName_isNull);
    } else {
      boolean quorumName_isNull = false;
      clientMessage.set(quorumName_isNull);
      clientMessage.set(quorumName);
    } 
    if (queueStoreConfig == null) {
      boolean queueStoreConfig_isNull = true;
      clientMessage.set(queueStoreConfig_isNull);
    } else {
      boolean queueStoreConfig_isNull = false;
      clientMessage.set(queueStoreConfig_isNull);
      QueueStoreConfigCodec.encode(queueStoreConfig, clientMessage);
    } 
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static ClientMessage encodeRequest(String name, Collection<ListenerConfigHolder> listenerConfigs, int backupCount, int asyncBackupCount, int maxSize, int emptyQueueTtl, boolean statisticsEnabled, String quorumName, QueueStoreConfigHolder queueStoreConfig, String mergePolicy, int mergeBatchSize) {
    int requiredDataSize = RequestParameters.calculateDataSize(name, listenerConfigs, backupCount, asyncBackupCount, maxSize, emptyQueueTtl, statisticsEnabled, quorumName, queueStoreConfig, mergePolicy, mergeBatchSize);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(REQUEST_TYPE.id());
    clientMessage.setRetryable(false);
    clientMessage.setAcquiresResource(false);
    clientMessage.setOperationName("DynamicConfig.addQueueConfig");
    clientMessage.set(name);
    if (listenerConfigs == null) {
      boolean listenerConfigs_isNull = true;
      clientMessage.set(listenerConfigs_isNull);
    } else {
      boolean listenerConfigs_isNull = false;
      clientMessage.set(listenerConfigs_isNull);
      clientMessage.set(listenerConfigs.size());
      for (ListenerConfigHolder listenerConfigs_item : listenerConfigs)
        ListenerConfigCodec.encode(listenerConfigs_item, clientMessage); 
    } 
    clientMessage.set(backupCount);
    clientMessage.set(asyncBackupCount);
    clientMessage.set(maxSize);
    clientMessage.set(emptyQueueTtl);
    clientMessage.set(statisticsEnabled);
    if (quorumName == null) {
      boolean quorumName_isNull = true;
      clientMessage.set(quorumName_isNull);
    } else {
      boolean quorumName_isNull = false;
      clientMessage.set(quorumName_isNull);
      clientMessage.set(quorumName);
    } 
    if (queueStoreConfig == null) {
      boolean queueStoreConfig_isNull = true;
      clientMessage.set(queueStoreConfig_isNull);
    } else {
      boolean queueStoreConfig_isNull = false;
      clientMessage.set(queueStoreConfig_isNull);
      QueueStoreConfigCodec.encode(queueStoreConfig, clientMessage);
    } 
    clientMessage.set(mergePolicy);
    clientMessage.set(mergeBatchSize);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static RequestParameters decodeRequest(ClientMessage clientMessage) {
    RequestParameters parameters = new RequestParameters();
    if (clientMessage.isComplete())
      return parameters; 
    String name = null;
    name = clientMessage.getStringUtf8();
    parameters.name = name;
    List<ListenerConfigHolder> listenerConfigs = null;
    boolean listenerConfigs_isNull = clientMessage.getBoolean();
    if (!listenerConfigs_isNull) {
      int listenerConfigs_size = clientMessage.getInt();
      listenerConfigs = new ArrayList<ListenerConfigHolder>(listenerConfigs_size);
      for (int listenerConfigs_index = 0; listenerConfigs_index < listenerConfigs_size; listenerConfigs_index++) {
        ListenerConfigHolder listenerConfigs_item = ListenerConfigCodec.decode(clientMessage);
        listenerConfigs.add(listenerConfigs_item);
      } 
      parameters.listenerConfigs = listenerConfigs;
    } 
    int backupCount = 0;
    backupCount = clientMessage.getInt();
    parameters.backupCount = backupCount;
    int asyncBackupCount = 0;
    asyncBackupCount = clientMessage.getInt();
    parameters.asyncBackupCount = asyncBackupCount;
    int maxSize = 0;
    maxSize = clientMessage.getInt();
    parameters.maxSize = maxSize;
    int emptyQueueTtl = 0;
    emptyQueueTtl = clientMessage.getInt();
    parameters.emptyQueueTtl = emptyQueueTtl;
    boolean statisticsEnabled = false;
    statisticsEnabled = clientMessage.getBoolean();
    parameters.statisticsEnabled = statisticsEnabled;
    String quorumName = null;
    boolean quorumName_isNull = clientMessage.getBoolean();
    if (!quorumName_isNull) {
      quorumName = clientMessage.getStringUtf8();
      parameters.quorumName = quorumName;
    } 
    QueueStoreConfigHolder queueStoreConfig = null;
    boolean queueStoreConfig_isNull = clientMessage.getBoolean();
    if (!queueStoreConfig_isNull) {
      queueStoreConfig = QueueStoreConfigCodec.decode(clientMessage);
      parameters.queueStoreConfig = queueStoreConfig;
    } 
    if (clientMessage.isComplete())
      return parameters; 
    String mergePolicy = null;
    mergePolicy = clientMessage.getStringUtf8();
    parameters.mergePolicy = mergePolicy;
    parameters.mergePolicyExist = true;
    int mergeBatchSize = 0;
    mergeBatchSize = clientMessage.getInt();
    parameters.mergeBatchSize = mergeBatchSize;
    parameters.mergeBatchSizeExist = true;
    return parameters;
  }
  
  public static ClientMessage encodeResponse() {
    requiredDataSize = ResponseParameters.calculateDataSize();
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(100);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static ResponseParameters decodeResponse(ClientMessage clientMessage) { return new ResponseParameters(); }
}
