package com.hazelcast.client.impl.protocol.codec;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.nio.serialization.Data;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

@SuppressFBWarnings({"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD"})
public final class QueueAddAllCodec {
  public static final QueueMessageType REQUEST_TYPE = QueueMessageType.QUEUE_ADDALL;
  
  public static final int RESPONSE_TYPE = 101;
  
  public static ClientMessage encodeRequest(String name, Collection<Data> dataList) {
    int requiredDataSize = RequestParameters.calculateDataSize(name, dataList);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(REQUEST_TYPE.id());
    clientMessage.setRetryable(false);
    clientMessage.setAcquiresResource(false);
    clientMessage.setOperationName("Queue.addAll");
    clientMessage.set(name);
    clientMessage.set(dataList.size());
    for (Data dataList_item : dataList)
      clientMessage.set(dataList_item); 
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static RequestParameters decodeRequest(ClientMessage clientMessage) {
    RequestParameters parameters = new RequestParameters();
    String name = null;
    name = clientMessage.getStringUtf8();
    parameters.name = name;
    List<Data> dataList = null;
    int dataList_size = clientMessage.getInt();
    dataList = new ArrayList<Data>(dataList_size);
    for (int dataList_index = 0; dataList_index < dataList_size; dataList_index++) {
      Data dataList_item = clientMessage.getData();
      dataList.add(dataList_item);
    } 
    parameters.dataList = dataList;
    return parameters;
  }
  
  public static ClientMessage encodeResponse(boolean response) {
    int requiredDataSize = ResponseParameters.calculateDataSize(response);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(101);
    clientMessage.set(response);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static ResponseParameters decodeResponse(ClientMessage clientMessage) {
    ResponseParameters parameters = new ResponseParameters();
    boolean response = false;
    response = clientMessage.getBoolean();
    parameters.response = response;
    return parameters;
  }
}
