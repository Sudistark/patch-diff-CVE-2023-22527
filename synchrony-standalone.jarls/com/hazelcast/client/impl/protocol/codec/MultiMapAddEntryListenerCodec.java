package com.hazelcast.client.impl.protocol.codec;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.util.ParameterUtil;
import com.hazelcast.nio.serialization.Data;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;

@SuppressFBWarnings({"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD"})
public final class MultiMapAddEntryListenerCodec {
  public static final MultiMapMessageType REQUEST_TYPE = MultiMapMessageType.MULTIMAP_ADDENTRYLISTENER;
  
  public static final int RESPONSE_TYPE = 104;
  
  public static ClientMessage encodeRequest(String name, boolean includeValue, boolean localOnly) {
    int requiredDataSize = RequestParameters.calculateDataSize(name, includeValue, localOnly);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(REQUEST_TYPE.id());
    clientMessage.setRetryable(false);
    clientMessage.setAcquiresResource(false);
    clientMessage.setOperationName("MultiMap.addEntryListener");
    clientMessage.set(name);
    clientMessage.set(includeValue);
    clientMessage.set(localOnly);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static RequestParameters decodeRequest(ClientMessage clientMessage) {
    RequestParameters parameters = new RequestParameters();
    String name = null;
    name = clientMessage.getStringUtf8();
    parameters.name = name;
    boolean includeValue = false;
    includeValue = clientMessage.getBoolean();
    parameters.includeValue = includeValue;
    boolean localOnly = false;
    localOnly = clientMessage.getBoolean();
    parameters.localOnly = localOnly;
    return parameters;
  }
  
  public static ClientMessage encodeResponse(String response) {
    int requiredDataSize = ResponseParameters.calculateDataSize(response);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(104);
    clientMessage.set(response);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static ResponseParameters decodeResponse(ClientMessage clientMessage) {
    ResponseParameters parameters = new ResponseParameters();
    String response = null;
    response = clientMessage.getStringUtf8();
    parameters.response = response;
    return parameters;
  }
  
  public static ClientMessage encodeEntryEvent(Data key, Data value, Data oldValue, Data mergingValue, int eventType, String uuid, int numberOfAffectedEntries) {
    int dataSize = ClientMessage.HEADER_SIZE;
    dataSize++;
    if (key != null)
      dataSize += ParameterUtil.calculateDataSize(key); 
    dataSize++;
    if (value != null)
      dataSize += ParameterUtil.calculateDataSize(value); 
    dataSize++;
    if (oldValue != null)
      dataSize += ParameterUtil.calculateDataSize(oldValue); 
    dataSize++;
    if (mergingValue != null)
      dataSize += ParameterUtil.calculateDataSize(mergingValue); 
    dataSize += 4;
    dataSize += ParameterUtil.calculateDataSize(uuid);
    dataSize += 4;
    ClientMessage clientMessage = ClientMessage.createForEncode(dataSize);
    clientMessage.setMessageType(203);
    clientMessage.addFlag((short)1);
    if (key == null) {
      boolean key_isNull = true;
      clientMessage.set(key_isNull);
    } else {
      boolean key_isNull = false;
      clientMessage.set(key_isNull);
      clientMessage.set(key);
    } 
    if (value == null) {
      boolean value_isNull = true;
      clientMessage.set(value_isNull);
    } else {
      boolean value_isNull = false;
      clientMessage.set(value_isNull);
      clientMessage.set(value);
    } 
    if (oldValue == null) {
      boolean oldValue_isNull = true;
      clientMessage.set(oldValue_isNull);
    } else {
      boolean oldValue_isNull = false;
      clientMessage.set(oldValue_isNull);
      clientMessage.set(oldValue);
    } 
    if (mergingValue == null) {
      boolean mergingValue_isNull = true;
      clientMessage.set(mergingValue_isNull);
    } else {
      boolean mergingValue_isNull = false;
      clientMessage.set(mergingValue_isNull);
      clientMessage.set(mergingValue);
    } 
    clientMessage.set(eventType);
    clientMessage.set(uuid);
    clientMessage.set(numberOfAffectedEntries);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
}
