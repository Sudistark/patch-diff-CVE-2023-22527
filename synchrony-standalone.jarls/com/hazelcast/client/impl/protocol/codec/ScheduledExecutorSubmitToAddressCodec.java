package com.hazelcast.client.impl.protocol.codec;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.nio.Address;
import com.hazelcast.nio.serialization.Data;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;

@SuppressFBWarnings({"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD"})
public final class ScheduledExecutorSubmitToAddressCodec {
  public static final ScheduledExecutorMessageType REQUEST_TYPE = ScheduledExecutorMessageType.SCHEDULEDEXECUTOR_SUBMITTOADDRESS;
  
  public static final int RESPONSE_TYPE = 100;
  
  public static ClientMessage encodeRequest(String schedulerName, Address address, byte type, String taskName, Data task, long initialDelayInMillis, long periodInMillis) {
    int requiredDataSize = RequestParameters.calculateDataSize(schedulerName, address, type, taskName, task, initialDelayInMillis, periodInMillis);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(REQUEST_TYPE.id());
    clientMessage.setRetryable(true);
    clientMessage.setAcquiresResource(false);
    clientMessage.setOperationName("ScheduledExecutor.submitToAddress");
    clientMessage.set(schedulerName);
    AddressCodec.encode(address, clientMessage);
    clientMessage.set(type);
    clientMessage.set(taskName);
    clientMessage.set(task);
    clientMessage.set(initialDelayInMillis);
    clientMessage.set(periodInMillis);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static RequestParameters decodeRequest(ClientMessage clientMessage) {
    RequestParameters parameters = new RequestParameters();
    if (clientMessage.isComplete())
      return parameters; 
    String schedulerName = null;
    schedulerName = clientMessage.getStringUtf8();
    parameters.schedulerName = schedulerName;
    Address address = null;
    address = AddressCodec.decode(clientMessage);
    parameters.address = address;
    byte type = 0;
    type = clientMessage.getByte();
    parameters.type = type;
    String taskName = null;
    taskName = clientMessage.getStringUtf8();
    parameters.taskName = taskName;
    Data task = null;
    task = clientMessage.getData();
    parameters.task = task;
    long initialDelayInMillis = 0L;
    initialDelayInMillis = clientMessage.getLong();
    parameters.initialDelayInMillis = initialDelayInMillis;
    long periodInMillis = 0L;
    periodInMillis = clientMessage.getLong();
    parameters.periodInMillis = periodInMillis;
    return parameters;
  }
  
  public static ClientMessage encodeResponse() {
    requiredDataSize = ResponseParameters.calculateDataSize();
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(100);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static ResponseParameters decodeResponse(ClientMessage clientMessage) { return new ResponseParameters(); }
}
