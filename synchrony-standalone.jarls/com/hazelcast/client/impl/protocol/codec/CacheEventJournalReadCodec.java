package com.hazelcast.client.impl.protocol.codec;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.nio.serialization.Data;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

@SuppressFBWarnings({"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD"})
public final class CacheEventJournalReadCodec {
  public static final CacheMessageType REQUEST_TYPE = CacheMessageType.CACHE_EVENTJOURNALREAD;
  
  public static final int RESPONSE_TYPE = 115;
  
  public static ClientMessage encodeRequest(String name, long startSequence, int minSize, int maxSize, Data predicate, Data projection) {
    int requiredDataSize = RequestParameters.calculateDataSize(name, startSequence, minSize, maxSize, predicate, projection);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(REQUEST_TYPE.id());
    clientMessage.setRetryable(true);
    clientMessage.setAcquiresResource(false);
    clientMessage.setOperationName("Cache.eventJournalRead");
    clientMessage.set(name);
    clientMessage.set(startSequence);
    clientMessage.set(minSize);
    clientMessage.set(maxSize);
    if (predicate == null) {
      boolean predicate_isNull = true;
      clientMessage.set(predicate_isNull);
    } else {
      boolean predicate_isNull = false;
      clientMessage.set(predicate_isNull);
      clientMessage.set(predicate);
    } 
    if (projection == null) {
      boolean projection_isNull = true;
      clientMessage.set(projection_isNull);
    } else {
      boolean projection_isNull = false;
      clientMessage.set(projection_isNull);
      clientMessage.set(projection);
    } 
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static RequestParameters decodeRequest(ClientMessage clientMessage) {
    RequestParameters parameters = new RequestParameters();
    if (clientMessage.isComplete())
      return parameters; 
    String name = null;
    name = clientMessage.getStringUtf8();
    parameters.name = name;
    long startSequence = 0L;
    startSequence = clientMessage.getLong();
    parameters.startSequence = startSequence;
    int minSize = 0;
    minSize = clientMessage.getInt();
    parameters.minSize = minSize;
    int maxSize = 0;
    maxSize = clientMessage.getInt();
    parameters.maxSize = maxSize;
    Data predicate = null;
    boolean predicate_isNull = clientMessage.getBoolean();
    if (!predicate_isNull) {
      predicate = clientMessage.getData();
      parameters.predicate = predicate;
    } 
    Data projection = null;
    boolean projection_isNull = clientMessage.getBoolean();
    if (!projection_isNull) {
      projection = clientMessage.getData();
      parameters.projection = projection;
    } 
    return parameters;
  }
  
  public static ClientMessage encodeResponse(int readCount, Collection<Data> items, long[] itemSeqs) {
    int requiredDataSize = ResponseParameters.calculateDataSize(readCount, items, itemSeqs);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(115);
    clientMessage.set(readCount);
    clientMessage.set(items.size());
    for (Data items_item : items)
      clientMessage.set(items_item); 
    if (itemSeqs == null) {
      boolean itemSeqs_isNull = true;
      clientMessage.set(itemSeqs_isNull);
    } else {
      boolean itemSeqs_isNull = false;
      clientMessage.set(itemSeqs_isNull);
      clientMessage.set(itemSeqs.length);
      for (long itemSeqs_item : itemSeqs)
        clientMessage.set(itemSeqs_item); 
    } 
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static ClientMessage encodeResponse(int readCount, Collection<Data> items, long[] itemSeqs, long nextSeq) {
    int requiredDataSize = ResponseParameters.calculateDataSize(readCount, items, itemSeqs, nextSeq);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(115);
    clientMessage.set(readCount);
    clientMessage.set(items.size());
    for (Data items_item : items)
      clientMessage.set(items_item); 
    if (itemSeqs == null) {
      boolean itemSeqs_isNull = true;
      clientMessage.set(itemSeqs_isNull);
    } else {
      boolean itemSeqs_isNull = false;
      clientMessage.set(itemSeqs_isNull);
      clientMessage.set(itemSeqs.length);
      for (long itemSeqs_item : itemSeqs)
        clientMessage.set(itemSeqs_item); 
    } 
    clientMessage.set(nextSeq);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static ResponseParameters decodeResponse(ClientMessage clientMessage) {
    ResponseParameters parameters = new ResponseParameters();
    int readCount = 0;
    readCount = clientMessage.getInt();
    parameters.readCount = readCount;
    List<Data> items = null;
    int items_size = clientMessage.getInt();
    items = new ArrayList<Data>(items_size);
    for (int items_index = 0; items_index < items_size; items_index++) {
      Data items_item = clientMessage.getData();
      items.add(items_item);
    } 
    parameters.items = items;
    long[] itemSeqs = null;
    boolean itemSeqs_isNull = clientMessage.getBoolean();
    if (!itemSeqs_isNull) {
      int itemSeqs_size = clientMessage.getInt();
      itemSeqs = new long[itemSeqs_size];
      for (int itemSeqs_index = 0; itemSeqs_index < itemSeqs_size; itemSeqs_index++) {
        long itemSeqs_item = clientMessage.getLong();
        itemSeqs[itemSeqs_index] = itemSeqs_item;
      } 
      parameters.itemSeqs = itemSeqs;
    } 
    if (clientMessage.isComplete())
      return parameters; 
    long nextSeq = 0L;
    nextSeq = clientMessage.getLong();
    parameters.nextSeq = nextSeq;
    parameters.nextSeqExist = true;
    return parameters;
  }
}
