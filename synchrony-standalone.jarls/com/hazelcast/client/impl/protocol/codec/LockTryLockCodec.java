package com.hazelcast.client.impl.protocol.codec;

import com.hazelcast.client.impl.protocol.ClientMessage;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;

@SuppressFBWarnings({"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD"})
public final class LockTryLockCodec {
  public static final LockMessageType REQUEST_TYPE = LockMessageType.LOCK_TRYLOCK;
  
  public static final int RESPONSE_TYPE = 101;
  
  public static ClientMessage encodeRequest(String name, long threadId, long lease, long timeout) {
    int requiredDataSize = RequestParameters.calculateDataSize(name, threadId, lease, timeout);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(REQUEST_TYPE.id());
    clientMessage.setRetryable(true);
    clientMessage.setAcquiresResource(true);
    clientMessage.setOperationName("Lock.tryLock");
    clientMessage.set(name);
    clientMessage.set(threadId);
    clientMessage.set(lease);
    clientMessage.set(timeout);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static ClientMessage encodeRequest(String name, long threadId, long lease, long timeout, long referenceId) {
    int requiredDataSize = RequestParameters.calculateDataSize(name, threadId, lease, timeout, referenceId);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(REQUEST_TYPE.id());
    clientMessage.setRetryable(true);
    clientMessage.setAcquiresResource(true);
    clientMessage.setOperationName("Lock.tryLock");
    clientMessage.set(name);
    clientMessage.set(threadId);
    clientMessage.set(lease);
    clientMessage.set(timeout);
    clientMessage.set(referenceId);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static RequestParameters decodeRequest(ClientMessage clientMessage) {
    RequestParameters parameters = new RequestParameters();
    String name = null;
    name = clientMessage.getStringUtf8();
    parameters.name = name;
    long threadId = 0L;
    threadId = clientMessage.getLong();
    parameters.threadId = threadId;
    long lease = 0L;
    lease = clientMessage.getLong();
    parameters.lease = lease;
    long timeout = 0L;
    timeout = clientMessage.getLong();
    parameters.timeout = timeout;
    if (clientMessage.isComplete())
      return parameters; 
    long referenceId = 0L;
    referenceId = clientMessage.getLong();
    parameters.referenceId = referenceId;
    parameters.referenceIdExist = true;
    return parameters;
  }
  
  public static ClientMessage encodeResponse(boolean response) {
    int requiredDataSize = ResponseParameters.calculateDataSize(response);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(101);
    clientMessage.set(response);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static ResponseParameters decodeResponse(ClientMessage clientMessage) {
    ResponseParameters parameters = new ResponseParameters();
    boolean response = false;
    response = clientMessage.getBoolean();
    parameters.response = response;
    return parameters;
  }
}
