package com.hazelcast.client.impl.protocol.codec;

import com.hazelcast.client.impl.protocol.ClientMessage;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;

@SuppressFBWarnings({"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD"})
public final class CPSemaphoreGetSemaphoreTypeCodec {
  public static final CPSemaphoreMessageType REQUEST_TYPE = CPSemaphoreMessageType.CPSEMAPHORE_GETSEMAPHORETYPE;
  
  public static final int RESPONSE_TYPE = 101;
  
  public static ClientMessage encodeRequest(String proxyName) {
    int requiredDataSize = RequestParameters.calculateDataSize(proxyName);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(REQUEST_TYPE.id());
    clientMessage.setRetryable(true);
    clientMessage.setAcquiresResource(false);
    clientMessage.setOperationName("CPSemaphore.getSemaphoreType");
    clientMessage.set(proxyName);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static RequestParameters decodeRequest(ClientMessage clientMessage) {
    RequestParameters parameters = new RequestParameters();
    if (clientMessage.isComplete())
      return parameters; 
    String proxyName = null;
    proxyName = clientMessage.getStringUtf8();
    parameters.proxyName = proxyName;
    return parameters;
  }
  
  public static ClientMessage encodeResponse(boolean response) {
    int requiredDataSize = ResponseParameters.calculateDataSize(response);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(101);
    clientMessage.set(response);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static ResponseParameters decodeResponse(ClientMessage clientMessage) {
    ResponseParameters parameters = new ResponseParameters();
    boolean response = false;
    response = clientMessage.getBoolean();
    parameters.response = response;
    return parameters;
  }
}
