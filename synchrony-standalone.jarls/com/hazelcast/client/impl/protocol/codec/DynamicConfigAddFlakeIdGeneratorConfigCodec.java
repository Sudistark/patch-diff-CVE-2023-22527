package com.hazelcast.client.impl.protocol.codec;

import com.hazelcast.client.impl.protocol.ClientMessage;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;

@SuppressFBWarnings({"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD"})
public final class DynamicConfigAddFlakeIdGeneratorConfigCodec {
  public static final DynamicConfigMessageType REQUEST_TYPE = DynamicConfigMessageType.DYNAMICCONFIG_ADDFLAKEIDGENERATORCONFIG;
  
  public static final int RESPONSE_TYPE = 100;
  
  public static ClientMessage encodeRequest(String name, int prefetchCount, long prefetchValidity, long idOffset, boolean statisticsEnabled, long nodeIdOffset) {
    int requiredDataSize = RequestParameters.calculateDataSize(name, prefetchCount, prefetchValidity, idOffset, statisticsEnabled, nodeIdOffset);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(REQUEST_TYPE.id());
    clientMessage.setRetryable(false);
    clientMessage.setAcquiresResource(false);
    clientMessage.setOperationName("DynamicConfig.addFlakeIdGeneratorConfig");
    clientMessage.set(name);
    clientMessage.set(prefetchCount);
    clientMessage.set(prefetchValidity);
    clientMessage.set(idOffset);
    clientMessage.set(statisticsEnabled);
    clientMessage.set(nodeIdOffset);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static RequestParameters decodeRequest(ClientMessage clientMessage) {
    RequestParameters parameters = new RequestParameters();
    if (clientMessage.isComplete())
      return parameters; 
    String name = null;
    name = clientMessage.getStringUtf8();
    parameters.name = name;
    int prefetchCount = 0;
    prefetchCount = clientMessage.getInt();
    parameters.prefetchCount = prefetchCount;
    long prefetchValidity = 0L;
    prefetchValidity = clientMessage.getLong();
    parameters.prefetchValidity = prefetchValidity;
    long idOffset = 0L;
    idOffset = clientMessage.getLong();
    parameters.idOffset = idOffset;
    boolean statisticsEnabled = false;
    statisticsEnabled = clientMessage.getBoolean();
    parameters.statisticsEnabled = statisticsEnabled;
    long nodeIdOffset = 0L;
    nodeIdOffset = clientMessage.getLong();
    parameters.nodeIdOffset = nodeIdOffset;
    return parameters;
  }
  
  public static ClientMessage encodeResponse() {
    requiredDataSize = ResponseParameters.calculateDataSize();
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(100);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static ResponseParameters decodeResponse(ClientMessage clientMessage) { return new ResponseParameters(); }
}
