package com.hazelcast.client.impl.protocol.codec;

import com.hazelcast.client.impl.protocol.ClientMessage;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;

@SuppressFBWarnings({"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD"})
public final class ScheduledExecutorGetDelayFromPartitionCodec {
  public static final ScheduledExecutorMessageType REQUEST_TYPE = ScheduledExecutorMessageType.SCHEDULEDEXECUTOR_GETDELAYFROMPARTITION;
  
  public static final int RESPONSE_TYPE = 103;
  
  public static ClientMessage encodeRequest(String schedulerName, String taskName) {
    int requiredDataSize = RequestParameters.calculateDataSize(schedulerName, taskName);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(REQUEST_TYPE.id());
    clientMessage.setRetryable(true);
    clientMessage.setAcquiresResource(false);
    clientMessage.setOperationName("ScheduledExecutor.getDelayFromPartition");
    clientMessage.set(schedulerName);
    clientMessage.set(taskName);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static RequestParameters decodeRequest(ClientMessage clientMessage) {
    RequestParameters parameters = new RequestParameters();
    if (clientMessage.isComplete())
      return parameters; 
    String schedulerName = null;
    schedulerName = clientMessage.getStringUtf8();
    parameters.schedulerName = schedulerName;
    String taskName = null;
    taskName = clientMessage.getStringUtf8();
    parameters.taskName = taskName;
    return parameters;
  }
  
  public static ClientMessage encodeResponse(long response) {
    int requiredDataSize = ResponseParameters.calculateDataSize(response);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(103);
    clientMessage.set(response);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static ResponseParameters decodeResponse(ClientMessage clientMessage) {
    ResponseParameters parameters = new ResponseParameters();
    long response = 0L;
    response = clientMessage.getLong();
    parameters.response = response;
    return parameters;
  }
}
