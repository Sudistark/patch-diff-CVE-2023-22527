package com.hazelcast.client.impl.protocol.codec;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.nio.serialization.Data;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

@SuppressFBWarnings({"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD"})
public final class MapProjectWithPredicateCodec {
  public static final MapMessageType REQUEST_TYPE = MapMessageType.MAP_PROJECTWITHPREDICATE;
  
  public static final int RESPONSE_TYPE = 119;
  
  public static ClientMessage encodeRequest(String name, Data projection, Data predicate) {
    int requiredDataSize = RequestParameters.calculateDataSize(name, projection, predicate);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(REQUEST_TYPE.id());
    clientMessage.setRetryable(true);
    clientMessage.setAcquiresResource(false);
    clientMessage.setOperationName("Map.projectWithPredicate");
    clientMessage.set(name);
    clientMessage.set(projection);
    clientMessage.set(predicate);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static RequestParameters decodeRequest(ClientMessage clientMessage) {
    RequestParameters parameters = new RequestParameters();
    if (clientMessage.isComplete())
      return parameters; 
    String name = null;
    name = clientMessage.getStringUtf8();
    parameters.name = name;
    Data projection = null;
    projection = clientMessage.getData();
    parameters.projection = projection;
    Data predicate = null;
    predicate = clientMessage.getData();
    parameters.predicate = predicate;
    return parameters;
  }
  
  public static ClientMessage encodeResponse(Collection<Data> response) {
    int requiredDataSize = ResponseParameters.calculateDataSize(response);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(119);
    clientMessage.set(response.size());
    for (Data response_item : response) {
      if (response_item == null) {
        boolean response_item_isNull = true;
        clientMessage.set(response_item_isNull);
        continue;
      } 
      boolean response_item_isNull = false;
      clientMessage.set(response_item_isNull);
      clientMessage.set(response_item);
    } 
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static ResponseParameters decodeResponse(ClientMessage clientMessage) {
    ResponseParameters parameters = new ResponseParameters();
    List<Data> response = null;
    int response_size = clientMessage.getInt();
    response = new ArrayList<Data>(response_size);
    for (int response_index = 0; response_index < response_size; response_index++) {
      Data response_item = null;
      boolean response_item_isNull = clientMessage.getBoolean();
      if (!response_item_isNull)
        response_item = clientMessage.getData(); 
      response.add(response_item);
    } 
    parameters.response = response;
    return parameters;
  }
}
