package com.hazelcast.client.impl.protocol.codec;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.nio.Address;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;

@SuppressFBWarnings({"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD"})
public final class ClientGetPartitionsCodec {
  public static final ClientMessageType REQUEST_TYPE = ClientMessageType.CLIENT_GETPARTITIONS;
  
  public static final int RESPONSE_TYPE = 108;
  
  public static ClientMessage encodeRequest() {
    requiredDataSize = RequestParameters.calculateDataSize();
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(REQUEST_TYPE.id());
    clientMessage.setRetryable(false);
    clientMessage.setAcquiresResource(false);
    clientMessage.setOperationName("Client.getPartitions");
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static RequestParameters decodeRequest(ClientMessage clientMessage) { return new RequestParameters(); }
  
  public static ClientMessage encodeResponse(Collection<Map.Entry<Address, List<Integer>>> partitions) {
    int requiredDataSize = ResponseParameters.calculateDataSize(partitions);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(108);
    clientMessage.set(partitions.size());
    for (Map.Entry<Address, List<Integer>> partitions_item : partitions) {
      Address partitions_itemKey = (Address)partitions_item.getKey();
      List<Integer> partitions_itemVal = (List)partitions_item.getValue();
      AddressCodec.encode(partitions_itemKey, clientMessage);
      clientMessage.set(partitions_itemVal.size());
      for (Integer partitions_itemVal_item : partitions_itemVal)
        clientMessage.set(partitions_itemVal_item.intValue()); 
    } 
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static ClientMessage encodeResponse(Collection<Map.Entry<Address, List<Integer>>> partitions, int partitionStateVersion) {
    int requiredDataSize = ResponseParameters.calculateDataSize(partitions, partitionStateVersion);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(108);
    clientMessage.set(partitions.size());
    for (Map.Entry<Address, List<Integer>> partitions_item : partitions) {
      Address partitions_itemKey = (Address)partitions_item.getKey();
      List<Integer> partitions_itemVal = (List)partitions_item.getValue();
      AddressCodec.encode(partitions_itemKey, clientMessage);
      clientMessage.set(partitions_itemVal.size());
      for (Integer partitions_itemVal_item : partitions_itemVal)
        clientMessage.set(partitions_itemVal_item.intValue()); 
    } 
    clientMessage.set(partitionStateVersion);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static ResponseParameters decodeResponse(ClientMessage clientMessage) {
    ResponseParameters parameters = new ResponseParameters();
    List<Map.Entry<Address, List<Integer>>> partitions = null;
    int partitions_size = clientMessage.getInt();
    partitions = new ArrayList<Map.Entry<Address, List<Integer>>>(partitions_size);
    for (int partitions_index = 0; partitions_index < partitions_size; partitions_index++) {
      Address partitions_item_key = AddressCodec.decode(clientMessage);
      int partitions_item_val_size = clientMessage.getInt();
      List<Integer> partitions_item_val = new ArrayList<Integer>(partitions_item_val_size);
      for (int partitions_item_val_index = 0; partitions_item_val_index < partitions_item_val_size; partitions_item_val_index++) {
        Integer partitions_item_val_item = Integer.valueOf(clientMessage.getInt());
        partitions_item_val.add(partitions_item_val_item);
      } 
      Map.Entry<Address, List<Integer>> partitions_item = new AbstractMap.SimpleEntry<Address, List<Integer>>(partitions_item_key, partitions_item_val);
      partitions.add(partitions_item);
    } 
    parameters.partitions = partitions;
    if (clientMessage.isComplete())
      return parameters; 
    int partitionStateVersion = 0;
    partitionStateVersion = clientMessage.getInt();
    parameters.partitionStateVersion = partitionStateVersion;
    parameters.partitionStateVersionExist = true;
    return parameters;
  }
}
