package com.hazelcast.client.impl.protocol.codec;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.nio.serialization.Data;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

@SuppressFBWarnings({"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD"})
public final class CacheEntryProcessorCodec {
  public static final CacheMessageType REQUEST_TYPE = CacheMessageType.CACHE_ENTRYPROCESSOR;
  
  public static final int RESPONSE_TYPE = 105;
  
  public static ClientMessage encodeRequest(String name, Data key, Data entryProcessor, Collection<Data> arguments, int completionId) {
    int requiredDataSize = RequestParameters.calculateDataSize(name, key, entryProcessor, arguments, completionId);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(REQUEST_TYPE.id());
    clientMessage.setRetryable(false);
    clientMessage.setAcquiresResource(false);
    clientMessage.setOperationName("Cache.entryProcessor");
    clientMessage.set(name);
    clientMessage.set(key);
    clientMessage.set(entryProcessor);
    clientMessage.set(arguments.size());
    for (Data arguments_item : arguments)
      clientMessage.set(arguments_item); 
    clientMessage.set(completionId);
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static RequestParameters decodeRequest(ClientMessage clientMessage) {
    RequestParameters parameters = new RequestParameters();
    String name = null;
    name = clientMessage.getStringUtf8();
    parameters.name = name;
    Data key = null;
    key = clientMessage.getData();
    parameters.key = key;
    Data entryProcessor = null;
    entryProcessor = clientMessage.getData();
    parameters.entryProcessor = entryProcessor;
    List<Data> arguments = null;
    int arguments_size = clientMessage.getInt();
    arguments = new ArrayList<Data>(arguments_size);
    for (int arguments_index = 0; arguments_index < arguments_size; arguments_index++) {
      Data arguments_item = clientMessage.getData();
      arguments.add(arguments_item);
    } 
    parameters.arguments = arguments;
    int completionId = 0;
    completionId = clientMessage.getInt();
    parameters.completionId = completionId;
    return parameters;
  }
  
  public static ClientMessage encodeResponse(Data response) {
    int requiredDataSize = ResponseParameters.calculateDataSize(response);
    ClientMessage clientMessage = ClientMessage.createForEncode(requiredDataSize);
    clientMessage.setMessageType(105);
    if (response == null) {
      boolean response_isNull = true;
      clientMessage.set(response_isNull);
    } else {
      boolean response_isNull = false;
      clientMessage.set(response_isNull);
      clientMessage.set(response);
    } 
    clientMessage.updateFrameLength();
    return clientMessage;
  }
  
  public static ResponseParameters decodeResponse(ClientMessage clientMessage) {
    ResponseParameters parameters = new ResponseParameters();
    Data response = null;
    boolean response_isNull = clientMessage.getBoolean();
    if (!response_isNull) {
      response = clientMessage.getData();
      parameters.response = response;
    } 
    return parameters;
  }
}
