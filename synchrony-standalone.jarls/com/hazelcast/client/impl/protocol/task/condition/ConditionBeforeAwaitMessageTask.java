package com.hazelcast.client.impl.protocol.task.condition;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.ConditionBeforeAwaitCodec;
import com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask;
import com.hazelcast.concurrent.lock.InternalLockNamespace;
import com.hazelcast.concurrent.lock.operations.BeforeAwaitOperation;
import com.hazelcast.instance.Node;
import com.hazelcast.nio.Connection;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.security.permission.LockPermission;
import com.hazelcast.spi.Operation;
import java.security.Permission;

public class ConditionBeforeAwaitMessageTask extends AbstractPartitionMessageTask<ConditionBeforeAwaitCodec.RequestParameters> {
  public ConditionBeforeAwaitMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected Operation prepareOperation() {
    Data key = this.serializationService.toData(((ConditionBeforeAwaitCodec.RequestParameters)this.parameters).lockName);
    InternalLockNamespace namespace = new InternalLockNamespace(((ConditionBeforeAwaitCodec.RequestParameters)this.parameters).lockName);
    return new BeforeAwaitOperation(namespace, key, ((ConditionBeforeAwaitCodec.RequestParameters)this.parameters).threadId, ((ConditionBeforeAwaitCodec.RequestParameters)this.parameters).name, ((ConditionBeforeAwaitCodec.RequestParameters)this.parameters).referenceId);
  }
  
  protected ConditionBeforeAwaitCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return ConditionBeforeAwaitCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return ConditionBeforeAwaitCodec.encodeResponse(); }
  
  public String getServiceName() { return "hz:impl:lockService"; }
  
  public Permission getRequiredPermission() { return new LockPermission(((ConditionBeforeAwaitCodec.RequestParameters)this.parameters).name, new String[] { "lock" }); }
  
  public String getDistributedObjectName() { return ((ConditionBeforeAwaitCodec.RequestParameters)this.parameters).lockName; }
  
  public String getMethodName() { return null; }
  
  public Object[] getParameters() { return null; }
}
