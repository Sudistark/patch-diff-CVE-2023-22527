package com.hazelcast.client.impl.protocol.task.map;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.MapContainsValueCodec;
import com.hazelcast.instance.Node;
import com.hazelcast.map.impl.LocalMapStatsUtil;
import com.hazelcast.map.impl.MapService;
import com.hazelcast.map.impl.operation.MapOperationProvider;
import com.hazelcast.nio.Connection;
import com.hazelcast.security.permission.MapPermission;
import com.hazelcast.spi.OperationFactory;
import java.security.Permission;
import java.util.Map;

public class MapContainsValueMessageTask extends AbstractMapAllPartitionsMessageTask<MapContainsValueCodec.RequestParameters> {
  public MapContainsValueMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected OperationFactory createOperationFactory() {
    MapOperationProvider operationProvider = getOperationProvider(((MapContainsValueCodec.RequestParameters)this.parameters).name);
    return operationProvider.createContainsValueOperationFactory(((MapContainsValueCodec.RequestParameters)this.parameters).name, ((MapContainsValueCodec.RequestParameters)this.parameters).value);
  }
  
  protected Object reduce(Map<Integer, Object> map) {
    boolean result = false;
    for (Object contains : map.values()) {
      if (Boolean.TRUE.equals(contains)) {
        result = true;
        break;
      } 
    } 
    LocalMapStatsUtil.incrementOtherOperationsCount((MapService)getService("hz:impl:mapService"), ((MapContainsValueCodec.RequestParameters)this.parameters).name);
    return Boolean.valueOf(result);
  }
  
  protected MapContainsValueCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return MapContainsValueCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return MapContainsValueCodec.encodeResponse(((Boolean)response).booleanValue()); }
  
  public String getServiceName() { return "hz:impl:mapService"; }
  
  public Permission getRequiredPermission() { return new MapPermission(((MapContainsValueCodec.RequestParameters)this.parameters).name, new String[] { "read" }); }
  
  public String getDistributedObjectName() { return ((MapContainsValueCodec.RequestParameters)this.parameters).name; }
  
  public String getMethodName() { return "containsValue"; }
  
  public Object[] getParameters() { return new Object[] { ((MapContainsValueCodec.RequestParameters)this.parameters).value }; }
}
