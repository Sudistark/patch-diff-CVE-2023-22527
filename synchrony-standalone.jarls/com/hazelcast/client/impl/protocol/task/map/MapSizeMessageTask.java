package com.hazelcast.client.impl.protocol.task.map;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.MapSizeCodec;
import com.hazelcast.instance.Node;
import com.hazelcast.map.impl.LocalMapStatsUtil;
import com.hazelcast.map.impl.MapService;
import com.hazelcast.nio.Connection;
import com.hazelcast.security.permission.MapPermission;
import com.hazelcast.spi.OperationFactory;
import com.hazelcast.util.MapUtil;
import java.security.Permission;
import java.util.Map;

public class MapSizeMessageTask extends AbstractMapAllPartitionsMessageTask<MapSizeCodec.RequestParameters> {
  public MapSizeMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected OperationFactory createOperationFactory() {
    String mapName = ((MapSizeCodec.RequestParameters)this.parameters).name;
    return getOperationProvider(mapName).createMapSizeOperationFactory(mapName);
  }
  
  protected Object reduce(Map<Integer, Object> map) {
    long total = 0L;
    MapService mapService = (MapService)getService("hz:impl:mapService");
    for (Object result : map.values()) {
      Integer size = (Integer)mapService.getMapServiceContext().toObject(result);
      total += size.intValue();
    } 
    LocalMapStatsUtil.incrementOtherOperationsCount(mapService, ((MapSizeCodec.RequestParameters)this.parameters).name);
    return Integer.valueOf(MapUtil.toIntSize(total));
  }
  
  protected MapSizeCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return MapSizeCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return MapSizeCodec.encodeResponse(((Integer)response).intValue()); }
  
  public String getServiceName() { return "hz:impl:mapService"; }
  
  public Permission getRequiredPermission() { return new MapPermission(((MapSizeCodec.RequestParameters)this.parameters).name, new String[] { "read" }); }
  
  public String getDistributedObjectName() { return ((MapSizeCodec.RequestParameters)this.parameters).name; }
  
  public String getMethodName() { return "size"; }
  
  public Object[] getParameters() { return null; }
}
