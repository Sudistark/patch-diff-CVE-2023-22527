package com.hazelcast.client.impl.protocol.task.map;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.MapEventJournalSubscribeCodec;
import com.hazelcast.instance.Node;
import com.hazelcast.internal.journal.EventJournalInitialSubscriberState;
import com.hazelcast.map.impl.journal.MapEventJournalSubscribeOperation;
import com.hazelcast.nio.Connection;
import com.hazelcast.security.permission.MapPermission;
import com.hazelcast.spi.Operation;
import java.security.Permission;

public class MapEventJournalSubscribeTask extends AbstractMapPartitionMessageTask<MapEventJournalSubscribeCodec.RequestParameters> {
  public MapEventJournalSubscribeTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected Operation prepareOperation() { return new MapEventJournalSubscribeOperation(((MapEventJournalSubscribeCodec.RequestParameters)this.parameters).name); }
  
  protected MapEventJournalSubscribeCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return MapEventJournalSubscribeCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) {
    EventJournalInitialSubscriberState state = (EventJournalInitialSubscriberState)response;
    return MapEventJournalSubscribeCodec.encodeResponse(state.getOldestSequence(), state.getNewestSequence());
  }
  
  public final String getServiceName() { return "hz:impl:mapService"; }
  
  public Permission getRequiredPermission() { return new MapPermission(((MapEventJournalSubscribeCodec.RequestParameters)this.parameters).name, new String[] { "listen" }); }
  
  public String getDistributedObjectName() { return ((MapEventJournalSubscribeCodec.RequestParameters)this.parameters).name; }
  
  public String getMethodName() { return "subscribeToEventJournal"; }
  
  public Object[] getParameters() { return new Object[] { Integer.valueOf(getPartitionId()) }; }
}
