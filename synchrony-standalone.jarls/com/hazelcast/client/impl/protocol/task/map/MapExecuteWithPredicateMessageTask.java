package com.hazelcast.client.impl.protocol.task.map;

import com.hazelcast.client.impl.operations.OperationFactoryWrapper;
import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.MapExecuteWithPredicateCodec;
import com.hazelcast.client.impl.protocol.task.AbstractCallableMessageTask;
import com.hazelcast.client.impl.protocol.task.BlockingMessageTask;
import com.hazelcast.instance.Node;
import com.hazelcast.map.EntryProcessor;
import com.hazelcast.map.impl.MapEntries;
import com.hazelcast.map.impl.MapService;
import com.hazelcast.map.impl.MapServiceContext;
import com.hazelcast.map.impl.operation.MapOperationProvider;
import com.hazelcast.nio.Connection;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.query.PartitionPredicate;
import com.hazelcast.query.Predicate;
import com.hazelcast.security.permission.MapPermission;
import com.hazelcast.spi.InvocationBuilder;
import com.hazelcast.spi.OperationFactory;
import com.hazelcast.spi.impl.operationservice.InternalOperationService;
import java.security.Permission;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public class MapExecuteWithPredicateMessageTask extends AbstractCallableMessageTask<MapExecuteWithPredicateCodec.RequestParameters> implements BlockingMessageTask {
  public MapExecuteWithPredicateMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected Object call() throws Exception {
    InternalOperationService operationService = this.nodeEngine.getOperationService();
    Predicate predicate = (Predicate)this.serializationService.toObject(((MapExecuteWithPredicateCodec.RequestParameters)this.parameters).predicate);
    if (predicate instanceof PartitionPredicate)
      return invokeOnPartition((PartitionPredicate)predicate, operationService); 
    OperationFactoryWrapper operationFactoryWrapper = new OperationFactoryWrapper(createOperationFactory(predicate), this.endpoint.getUuid());
    Map<Integer, Object> map = operationService.invokeOnAllPartitions(getServiceName(), operationFactoryWrapper);
    return reduce(map);
  }
  
  private Object invokeOnPartition(PartitionPredicate partitionPredicate, InternalOperationService operationService) {
    int partitionId = getPartitionId();
    Predicate predicate = partitionPredicate.getTarget();
    OperationFactory factory = createOperationFactory(predicate);
    InvocationBuilder invocationBuilder = operationService.createInvocationBuilder(getServiceName(), factory
        .createOperation(), partitionId);
    Object result = invocationBuilder.invoke().join();
    return reduce(Collections.singletonMap(Integer.valueOf(partitionId), result));
  }
  
  private OperationFactory createOperationFactory(Predicate predicate) {
    MapOperationProvider operationProvider = getOperationProvider(((MapExecuteWithPredicateCodec.RequestParameters)this.parameters).name);
    EntryProcessor entryProcessor = (EntryProcessor)this.serializationService.toObject(((MapExecuteWithPredicateCodec.RequestParameters)this.parameters).entryProcessor);
    return operationProvider
      .createPartitionWideEntryWithPredicateOperationFactory(((MapExecuteWithPredicateCodec.RequestParameters)this.parameters).name, entryProcessor, predicate);
  }
  
  private MapOperationProvider getOperationProvider(String mapName) {
    MapService mapService = (MapService)getService("hz:impl:mapService");
    MapServiceContext mapServiceContext = mapService.getMapServiceContext();
    return mapServiceContext.getMapOperationProvider(mapName);
  }
  
  protected Object reduce(Map<Integer, Object> map) {
    List<Map.Entry<Data, Data>> dataMap = new ArrayList<Map.Entry<Data, Data>>();
    MapService mapService = (MapService)getService("hz:impl:mapService");
    for (Object o : map.values()) {
      if (o != null) {
        MapEntries mapEntries = (MapEntries)mapService.getMapServiceContext().toObject(o);
        mapEntries.putAllToList(dataMap);
      } 
    } 
    return dataMap;
  }
  
  protected MapExecuteWithPredicateCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return MapExecuteWithPredicateCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return MapExecuteWithPredicateCodec.encodeResponse((List)response); }
  
  public String getServiceName() { return "hz:impl:mapService"; }
  
  public Permission getRequiredPermission() { return new MapPermission(((MapExecuteWithPredicateCodec.RequestParameters)this.parameters).name, new String[] { "put", "remove" }); }
  
  public String getDistributedObjectName() { return ((MapExecuteWithPredicateCodec.RequestParameters)this.parameters).name; }
  
  public String getMethodName() { return "executeOnEntries"; }
  
  public Object[] getParameters() { return new Object[] { ((MapExecuteWithPredicateCodec.RequestParameters)this.parameters).entryProcessor, ((MapExecuteWithPredicateCodec.RequestParameters)this.parameters).predicate }; }
}
