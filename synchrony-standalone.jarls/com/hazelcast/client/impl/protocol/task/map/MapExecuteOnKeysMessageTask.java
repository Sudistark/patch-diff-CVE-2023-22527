package com.hazelcast.client.impl.protocol.task.map;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.MapExecuteOnKeysCodec;
import com.hazelcast.client.impl.protocol.task.AbstractMultiPartitionMessageTask;
import com.hazelcast.instance.Node;
import com.hazelcast.internal.partition.InternalPartitionService;
import com.hazelcast.map.EntryProcessor;
import com.hazelcast.map.impl.MapEntries;
import com.hazelcast.map.impl.MapService;
import com.hazelcast.map.impl.operation.MapOperationProvider;
import com.hazelcast.nio.Connection;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.security.permission.MapPermission;
import com.hazelcast.spi.OperationFactory;
import com.hazelcast.util.SetUtil;
import java.security.Permission;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class MapExecuteOnKeysMessageTask extends AbstractMultiPartitionMessageTask<MapExecuteOnKeysCodec.RequestParameters> {
  public MapExecuteOnKeysMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected OperationFactory createOperationFactory() {
    EntryProcessor processor = (EntryProcessor)this.serializationService.toObject(((MapExecuteOnKeysCodec.RequestParameters)this.parameters).entryProcessor);
    MapOperationProvider operationProvider = getMapOperationProvider(((MapExecuteOnKeysCodec.RequestParameters)this.parameters).name);
    return operationProvider.createMultipleEntryOperationFactory(((MapExecuteOnKeysCodec.RequestParameters)this.parameters).name, new HashSet(((MapExecuteOnKeysCodec.RequestParameters)this.parameters).keys), processor);
  }
  
  protected Object reduce(Map<Integer, Object> map) {
    List<Map.Entry<Data, Data>> entries = new ArrayList<Map.Entry<Data, Data>>();
    MapService mapService = (MapService)getService("hz:impl:mapService");
    for (Object o : map.values()) {
      if (o != null) {
        MapEntries mapEntries = (MapEntries)mapService.getMapServiceContext().toObject(o);
        mapEntries.putAllToList(entries);
      } 
    } 
    return entries;
  }
  
  public Collection<Integer> getPartitions() {
    InternalPartitionService internalPartitionService = this.nodeEngine.getPartitionService();
    int partitions = internalPartitionService.getPartitionCount();
    int capacity = Math.min(partitions, ((MapExecuteOnKeysCodec.RequestParameters)this.parameters).keys.size());
    Set<Integer> partitionIds = SetUtil.createHashSet(capacity);
    Iterator<Data> iterator = ((MapExecuteOnKeysCodec.RequestParameters)this.parameters).keys.iterator();
    while (iterator.hasNext() && partitionIds.size() < partitions) {
      Data key = (Data)iterator.next();
      partitionIds.add(Integer.valueOf(internalPartitionService.getPartitionId(key)));
    } 
    return partitionIds;
  }
  
  protected MapExecuteOnKeysCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return MapExecuteOnKeysCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return MapExecuteOnKeysCodec.encodeResponse((List)response); }
  
  public String getServiceName() { return "hz:impl:mapService"; }
  
  public Permission getRequiredPermission() { return new MapPermission(((MapExecuteOnKeysCodec.RequestParameters)this.parameters).name, new String[] { "put", "remove" }); }
  
  public String getDistributedObjectName() { return ((MapExecuteOnKeysCodec.RequestParameters)this.parameters).name; }
  
  public String getMethodName() { return "executeOnKeys"; }
  
  public Object[] getParameters() { return new Object[] { ((MapExecuteOnKeysCodec.RequestParameters)this.parameters).keys, ((MapExecuteOnKeysCodec.RequestParameters)this.parameters).entryProcessor }; }
}
