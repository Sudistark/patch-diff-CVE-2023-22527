package com.hazelcast.client.impl.protocol.task.map;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.instance.Node;
import com.hazelcast.map.impl.MapContainer;
import com.hazelcast.map.impl.MapService;
import com.hazelcast.nio.Connection;
import com.hazelcast.security.permission.MapPermission;
import java.security.Permission;

public abstract class AbstractMapPutMessageTask<P> extends AbstractMapPartitionMessageTask<P> {
  protected long startTimeNanos;
  
  protected AbstractMapPutMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected void beforeProcess() { this.startTimeNanos = System.nanoTime(); }
  
  protected void beforeResponse() {
    long latencyNanos = System.nanoTime() - this.startTimeNanos;
    MapService mapService = (MapService)getService("hz:impl:mapService");
    MapContainer mapContainer = mapService.getMapServiceContext().getMapContainer(getDistributedObjectName());
    if (mapContainer.getMapConfig().isStatisticsEnabled())
      mapService.getMapServiceContext().getLocalMapStatsProvider().getLocalMapStatsImpl(getDistributedObjectName())
        .incrementPutLatencyNanos(latencyNanos); 
  }
  
  public Permission getRequiredPermission() { return new MapPermission(getDistributedObjectName(), new String[] { "put" }); }
  
  public String getServiceName() { return "hz:impl:mapService"; }
}
