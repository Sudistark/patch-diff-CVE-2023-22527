package com.hazelcast.client.impl.protocol.task.map;

import com.hazelcast.client.impl.AddInterceptorOperationSupplier;
import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.MapAddInterceptorCodec;
import com.hazelcast.client.impl.protocol.task.AbstractMultiTargetMessageTask;
import com.hazelcast.core.Member;
import com.hazelcast.instance.Node;
import com.hazelcast.map.MapInterceptor;
import com.hazelcast.map.impl.MapService;
import com.hazelcast.map.impl.MapServiceContext;
import com.hazelcast.nio.Connection;
import com.hazelcast.security.permission.MapPermission;
import com.hazelcast.spi.Operation;
import com.hazelcast.util.function.Supplier;
import java.security.Permission;
import java.util.Collection;
import java.util.Map;

public class MapAddInterceptorMessageTask extends AbstractMultiTargetMessageTask<MapAddInterceptorCodec.RequestParameters> {
  private String id;
  
  public MapAddInterceptorMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected Supplier<Operation> createOperationSupplier() {
    MapService mapService = (MapService)getService("hz:impl:mapService");
    MapServiceContext mapServiceContext = mapService.getMapServiceContext();
    MapInterceptor mapInterceptor = (MapInterceptor)this.serializationService.toObject(((MapAddInterceptorCodec.RequestParameters)this.parameters).interceptor);
    this.id = mapServiceContext.generateInterceptorId(((MapAddInterceptorCodec.RequestParameters)this.parameters).name, mapInterceptor);
    return new AddInterceptorOperationSupplier(this.id, ((MapAddInterceptorCodec.RequestParameters)this.parameters).name, mapInterceptor);
  }
  
  protected Object reduce(Map<Member, Object> map) throws Throwable {
    for (Object result : map.values()) {
      if (result instanceof Throwable)
        throw (Throwable)result; 
    } 
    return this.id;
  }
  
  public Collection<Member> getTargets() { return this.nodeEngine.getClusterService().getMembers(); }
  
  protected MapAddInterceptorCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return MapAddInterceptorCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return MapAddInterceptorCodec.encodeResponse((String)response); }
  
  public String getServiceName() { return "hz:impl:mapService"; }
  
  public Permission getRequiredPermission() { return new MapPermission(((MapAddInterceptorCodec.RequestParameters)this.parameters).name, new String[] { "intercept" }); }
  
  public String getDistributedObjectName() { return ((MapAddInterceptorCodec.RequestParameters)this.parameters).name; }
  
  public String getMethodName() { return "addInterceptor"; }
  
  public Object[] getParameters() { return new Object[] { ((MapAddInterceptorCodec.RequestParameters)this.parameters).interceptor }; }
}
