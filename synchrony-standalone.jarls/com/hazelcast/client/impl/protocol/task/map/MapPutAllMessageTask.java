package com.hazelcast.client.impl.protocol.task.map;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.MapPutAllCodec;
import com.hazelcast.instance.Node;
import com.hazelcast.map.impl.MapContainer;
import com.hazelcast.map.impl.MapEntries;
import com.hazelcast.map.impl.MapService;
import com.hazelcast.map.impl.operation.MapOperationProvider;
import com.hazelcast.nio.Connection;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.security.permission.MapPermission;
import com.hazelcast.spi.Operation;
import com.hazelcast.util.MapUtil;
import java.security.Permission;
import java.util.Map;

public class MapPutAllMessageTask extends AbstractMapPartitionMessageTask<MapPutAllCodec.RequestParameters> {
  public MapPutAllMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected Operation prepareOperation() {
    MapEntries mapEntries = new MapEntries(((MapPutAllCodec.RequestParameters)this.parameters).entries);
    MapOperationProvider operationProvider = getMapOperationProvider(((MapPutAllCodec.RequestParameters)this.parameters).name);
    return operationProvider.createPutAllOperation(((MapPutAllCodec.RequestParameters)this.parameters).name, mapEntries);
  }
  
  protected MapPutAllCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return MapPutAllCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return MapPutAllCodec.encodeResponse(); }
  
  public String getServiceName() { return "hz:impl:mapService"; }
  
  protected void beforeProcess() { this.startTimeNanos = System.nanoTime(); }
  
  protected void beforeResponse() {
    long latencyNanos = System.nanoTime() - this.startTimeNanos;
    MapService mapService = (MapService)getService("hz:impl:mapService");
    MapContainer mapContainer = mapService.getMapServiceContext().getMapContainer(((MapPutAllCodec.RequestParameters)this.parameters).name);
    if (mapContainer.getMapConfig().isStatisticsEnabled())
      mapService.getMapServiceContext().getLocalMapStatsProvider().getLocalMapStatsImpl(((MapPutAllCodec.RequestParameters)this.parameters).name)
        .incrementPutLatencyNanos(((MapPutAllCodec.RequestParameters)this.parameters).entries.size(), latencyNanos); 
  }
  
  public Permission getRequiredPermission() { return new MapPermission(((MapPutAllCodec.RequestParameters)this.parameters).name, new String[] { "put" }); }
  
  public String getDistributedObjectName() { return ((MapPutAllCodec.RequestParameters)this.parameters).name; }
  
  public String getMethodName() { return "putAll"; }
  
  public Object[] getParameters() {
    Map<Data, Data> map = MapUtil.createHashMap(((MapPutAllCodec.RequestParameters)this.parameters).entries.size());
    for (Map.Entry<Data, Data> entry : ((MapPutAllCodec.RequestParameters)this.parameters).entries)
      map.put(entry.getKey(), entry.getValue()); 
    return new Object[] { map };
  }
}
