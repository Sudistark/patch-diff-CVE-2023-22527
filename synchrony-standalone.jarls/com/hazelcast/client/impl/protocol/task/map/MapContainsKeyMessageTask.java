package com.hazelcast.client.impl.protocol.task.map;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.MapContainsKeyCodec;
import com.hazelcast.instance.Node;
import com.hazelcast.map.impl.LocalMapStatsProvider;
import com.hazelcast.map.impl.MapContainer;
import com.hazelcast.map.impl.MapService;
import com.hazelcast.map.impl.operation.MapOperation;
import com.hazelcast.nio.Connection;
import com.hazelcast.security.permission.MapPermission;
import com.hazelcast.spi.Operation;
import java.security.Permission;

public class MapContainsKeyMessageTask extends AbstractMapPartitionMessageTask<MapContainsKeyCodec.RequestParameters> {
  public MapContainsKeyMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected Operation prepareOperation() {
    MapOperation operation = getMapOperationProvider(((MapContainsKeyCodec.RequestParameters)this.parameters).name).createContainsKeyOperation(((MapContainsKeyCodec.RequestParameters)this.parameters).name, ((MapContainsKeyCodec.RequestParameters)this.parameters).key);
    operation.setThreadId(((MapContainsKeyCodec.RequestParameters)this.parameters).threadId);
    return operation;
  }
  
  protected void afterResponse() {
    MapService mapService = (MapService)getService("hz:impl:mapService");
    MapContainer mapContainer = mapService.getMapServiceContext().getMapContainer(((MapContainsKeyCodec.RequestParameters)this.parameters).name);
    if (mapContainer.getMapConfig().isStatisticsEnabled()) {
      LocalMapStatsProvider localMapStatsProvider = mapService.getMapServiceContext().getLocalMapStatsProvider();
      localMapStatsProvider.getLocalMapStatsImpl(((MapContainsKeyCodec.RequestParameters)this.parameters).name).incrementOtherOperations();
    } 
  }
  
  protected MapContainsKeyCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return MapContainsKeyCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return MapContainsKeyCodec.encodeResponse(((Boolean)response).booleanValue()); }
  
  public String getServiceName() { return "hz:impl:mapService"; }
  
  public Permission getRequiredPermission() { return new MapPermission(((MapContainsKeyCodec.RequestParameters)this.parameters).name, new String[] { "read" }); }
  
  public String getDistributedObjectName() { return ((MapContainsKeyCodec.RequestParameters)this.parameters).name; }
  
  public String getMethodName() { return "containsKey"; }
  
  public Object[] getParameters() { return new Object[] { ((MapContainsKeyCodec.RequestParameters)this.parameters).key }; }
}
