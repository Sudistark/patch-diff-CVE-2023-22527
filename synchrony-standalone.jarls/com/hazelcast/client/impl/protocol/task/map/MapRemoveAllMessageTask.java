package com.hazelcast.client.impl.protocol.task.map;

import com.hazelcast.client.impl.operations.OperationFactoryWrapper;
import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.MapRemoveAllCodec;
import com.hazelcast.core.ICompletableFuture;
import com.hazelcast.core.PartitioningStrategy;
import com.hazelcast.instance.Node;
import com.hazelcast.map.impl.EntryRemovingProcessor;
import com.hazelcast.map.impl.MapContainer;
import com.hazelcast.map.impl.MapService;
import com.hazelcast.map.impl.MapServiceContext;
import com.hazelcast.map.impl.operation.MapOperationProvider;
import com.hazelcast.nio.Connection;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.query.PartitionPredicate;
import com.hazelcast.query.Predicate;
import com.hazelcast.security.permission.MapPermission;
import com.hazelcast.spi.InternalCompletableFuture;
import com.hazelcast.spi.Operation;
import com.hazelcast.spi.OperationFactory;
import com.hazelcast.spi.impl.operationservice.InternalOperationService;
import com.hazelcast.spi.impl.operationservice.impl.operations.PartitionAwareOperationFactory;
import java.security.Permission;
import java.util.Collections;
import java.util.Map;

public class MapRemoveAllMessageTask extends AbstractMapAllPartitionsMessageTask<MapRemoveAllCodec.RequestParameters> {
  private Predicate predicate;
  
  public MapRemoveAllMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected void processMessage() {
    if (!(this.predicate instanceof PartitionPredicate)) {
      super.processMessage();
      return;
    } 
    int partitionId = getPartitionId();
    boolean invokedOnPartition = (partitionId != -1);
    if (!invokedOnPartition) {
      PartitionPredicate partitionPredicate = (PartitionPredicate)this.predicate;
      MapService mapService = (MapService)getService(getServiceName());
      MapServiceContext mapServiceContext = mapService.getMapServiceContext();
      MapContainer mapContainer = mapServiceContext.getMapContainer(((MapRemoveAllCodec.RequestParameters)this.parameters).name);
      PartitioningStrategy partitioningStrategy = mapContainer.getPartitioningStrategy();
      Data partitionKey = this.serializationService.toData(partitionPredicate.getPartitionKey(), partitioningStrategy);
      partitionId = this.nodeEngine.getPartitionService().getPartitionId(partitionKey);
    } 
    OperationFactory operationFactory = createOperationFactory();
    InternalOperationService operationService = this.nodeEngine.getOperationService();
    if (invokedOnPartition) {
      Operation operation;
      if (operationFactory instanceof PartitionAwareOperationFactory) {
        PartitionAwareOperationFactory partitionAwareOperationFactory = (PartitionAwareOperationFactory)operationFactory;
        partitionAwareOperationFactory = partitionAwareOperationFactory.createFactoryOnRunner(this.nodeEngine, new int[] { partitionId });
        operation = partitionAwareOperationFactory.createPartitionOperation(partitionId);
      } else {
        operation = operationFactory.createOperation();
      } 
      int thisPartitionId = partitionId;
      operation.setCallerUuid(this.endpoint.getUuid());
      InternalCompletableFuture internalCompletableFuture = operationService.invokeOnPartition(getServiceName(), operation, partitionId);
      internalCompletableFuture.andThen(new Object(this, thisPartitionId));
    } else {
      OperationFactoryWrapper operationFactoryWrapper = new OperationFactoryWrapper(operationFactory, this.endpoint.getUuid());
      ICompletableFuture<Map<Integer, Object>> future = operationService.invokeOnPartitionsAsync(getServiceName(), operationFactoryWrapper, Collections.singletonList(Integer.valueOf(partitionId)));
      future.andThen(this);
    } 
  }
  
  protected OperationFactory createOperationFactory() {
    MapOperationProvider operationProvider = getOperationProvider(((MapRemoveAllCodec.RequestParameters)this.parameters).name);
    Predicate effectivePredicate = (this.predicate instanceof PartitionPredicate) ? ((PartitionPredicate)this.predicate).getTarget() : this.predicate;
    return operationProvider.createPartitionWideEntryWithPredicateOperationFactory(((MapRemoveAllCodec.RequestParameters)this.parameters).name, EntryRemovingProcessor.ENTRY_REMOVING_PROCESSOR, effectivePredicate);
  }
  
  protected Object reduce(Map<Integer, Object> map) { return null; }
  
  protected MapRemoveAllCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) {
    MapRemoveAllCodec.RequestParameters parameters = MapRemoveAllCodec.decodeRequest(clientMessage);
    this.predicate = (Predicate)this.serializationService.toObject(parameters.predicate);
    return parameters;
  }
  
  protected ClientMessage encodeResponse(Object response) { return MapRemoveAllCodec.encodeResponse(); }
  
  public String getServiceName() { return "hz:impl:mapService"; }
  
  public Permission getRequiredPermission() { return new MapPermission(((MapRemoveAllCodec.RequestParameters)this.parameters).name, new String[] { "remove" }); }
  
  public String getDistributedObjectName() { return ((MapRemoveAllCodec.RequestParameters)this.parameters).name; }
  
  public String getMethodName() { return "removeAll"; }
  
  public Object[] getParameters() { return new Object[] { ((MapRemoveAllCodec.RequestParameters)this.parameters).predicate }; }
}
