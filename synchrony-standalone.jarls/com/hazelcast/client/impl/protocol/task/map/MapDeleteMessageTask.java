package com.hazelcast.client.impl.protocol.task.map;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.MapDeleteCodec;
import com.hazelcast.instance.Node;
import com.hazelcast.map.impl.MapContainer;
import com.hazelcast.map.impl.MapService;
import com.hazelcast.map.impl.operation.MapOperation;
import com.hazelcast.map.impl.operation.MapOperationProvider;
import com.hazelcast.nio.Connection;
import com.hazelcast.security.permission.MapPermission;
import com.hazelcast.spi.Operation;
import java.security.Permission;

public class MapDeleteMessageTask extends AbstractMapPartitionMessageTask<MapDeleteCodec.RequestParameters> {
  private long startTimeNanos;
  
  public MapDeleteMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected Operation prepareOperation() {
    MapOperationProvider operationProvider = getMapOperationProvider(((MapDeleteCodec.RequestParameters)this.parameters).name);
    MapOperation op = operationProvider.createDeleteOperation(((MapDeleteCodec.RequestParameters)this.parameters).name, ((MapDeleteCodec.RequestParameters)this.parameters).key, false);
    op.setThreadId(((MapDeleteCodec.RequestParameters)this.parameters).threadId);
    return op;
  }
  
  protected void beforeProcess() { this.startTimeNanos = System.nanoTime(); }
  
  protected void beforeResponse() {
    long latencyNanos = System.nanoTime() - this.startTimeNanos;
    MapService mapService = (MapService)getService("hz:impl:mapService");
    MapContainer mapContainer = mapService.getMapServiceContext().getMapContainer(((MapDeleteCodec.RequestParameters)this.parameters).name);
    if (mapContainer.getMapConfig().isStatisticsEnabled())
      mapService.getMapServiceContext().getLocalMapStatsProvider().getLocalMapStatsImpl(((MapDeleteCodec.RequestParameters)this.parameters).name)
        .incrementRemoveLatencyNanos(latencyNanos); 
  }
  
  protected MapDeleteCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return MapDeleteCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return MapDeleteCodec.encodeResponse(); }
  
  public String getServiceName() { return "hz:impl:mapService"; }
  
  public Permission getRequiredPermission() { return new MapPermission(((MapDeleteCodec.RequestParameters)this.parameters).name, new String[] { "remove" }); }
  
  public String getDistributedObjectName() { return ((MapDeleteCodec.RequestParameters)this.parameters).name; }
  
  public String getMethodName() { return "delete"; }
  
  public Object[] getParameters() { return new Object[] { ((MapDeleteCodec.RequestParameters)this.parameters).key }; }
}
