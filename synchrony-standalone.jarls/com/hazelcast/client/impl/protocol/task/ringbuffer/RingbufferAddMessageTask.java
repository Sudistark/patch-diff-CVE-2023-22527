package com.hazelcast.client.impl.protocol.task.ringbuffer;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.RingbufferAddCodec;
import com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask;
import com.hazelcast.instance.Node;
import com.hazelcast.nio.Connection;
import com.hazelcast.ringbuffer.OverflowPolicy;
import com.hazelcast.ringbuffer.impl.operations.AddOperation;
import com.hazelcast.security.permission.RingBufferPermission;
import com.hazelcast.spi.Operation;
import java.security.Permission;

public class RingbufferAddMessageTask extends AbstractPartitionMessageTask<RingbufferAddCodec.RequestParameters> {
  public RingbufferAddMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected Operation prepareOperation() { return new AddOperation(((RingbufferAddCodec.RequestParameters)this.parameters).name, ((RingbufferAddCodec.RequestParameters)this.parameters).value, OverflowPolicy.getById(((RingbufferAddCodec.RequestParameters)this.parameters).overflowPolicy)); }
  
  protected ClientMessage encodeResponse(Object response) { return RingbufferAddCodec.encodeResponse(((Long)response).longValue()); }
  
  protected RingbufferAddCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return RingbufferAddCodec.decodeRequest(clientMessage); }
  
  public Object[] getParameters() { return new Object[] { ((RingbufferAddCodec.RequestParameters)this.parameters).value, OverflowPolicy.getById(((RingbufferAddCodec.RequestParameters)this.parameters).overflowPolicy) }; }
  
  public Permission getRequiredPermission() { return new RingBufferPermission(((RingbufferAddCodec.RequestParameters)this.parameters).name, new String[] { "put" }); }
  
  public String getMethodName() { return "add"; }
  
  public String getServiceName() { return "hz:impl:ringbufferService"; }
  
  public String getDistributedObjectName() { return ((RingbufferAddCodec.RequestParameters)this.parameters).name; }
}
