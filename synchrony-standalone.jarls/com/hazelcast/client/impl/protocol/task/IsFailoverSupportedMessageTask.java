package com.hazelcast.client.impl.protocol.task;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.ClientIsFailoverSupportedCodec;
import com.hazelcast.instance.Node;
import com.hazelcast.nio.Connection;
import java.security.Permission;

public class IsFailoverSupportedMessageTask extends AbstractCallableMessageTask<ClientIsFailoverSupportedCodec.RequestParameters> {
  public IsFailoverSupportedMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected ClientIsFailoverSupportedCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return ClientIsFailoverSupportedCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return ClientIsFailoverSupportedCodec.encodeResponse(((Boolean)response).booleanValue()); }
  
  protected Object call() throws Exception { return Boolean.valueOf(this.nodeEngine.getNode().getNodeExtension().isClientFailoverSupported()); }
  
  protected boolean requiresAuthentication() { return false; }
  
  public String getServiceName() { return null; }
  
  public Permission getRequiredPermission() { return null; }
  
  public String getDistributedObjectName() { return null; }
  
  public String getMethodName() { return null; }
  
  public Object[] getParameters() { return null; }
}
