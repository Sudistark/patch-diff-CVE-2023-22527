package com.hazelcast.client.impl.protocol.task;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.ClientAddDistributedObjectListenerCodec;
import com.hazelcast.core.DistributedObjectEvent;
import com.hazelcast.core.DistributedObjectListener;
import com.hazelcast.instance.Node;
import com.hazelcast.internal.cluster.ClusterService;
import com.hazelcast.nio.Connection;
import com.hazelcast.spi.ProxyService;
import java.security.Permission;

public class AddDistributedObjectListenerMessageTask extends AbstractCallableMessageTask<ClientAddDistributedObjectListenerCodec.RequestParameters> implements DistributedObjectListener {
  public AddDistributedObjectListenerMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected Object call() throws Exception {
    ProxyService proxyService = this.clientEngine.getProxyService();
    String registrationId = proxyService.addProxyListener(this);
    this.endpoint.addDestroyAction(registrationId, new Object(this, proxyService, registrationId));
    return registrationId;
  }
  
  protected ClientAddDistributedObjectListenerCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return ClientAddDistributedObjectListenerCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return ClientAddDistributedObjectListenerCodec.encodeResponse((String)response); }
  
  public String getServiceName() { return "hz:core:proxyService"; }
  
  public Permission getRequiredPermission() { return null; }
  
  public String getDistributedObjectName() { return null; }
  
  public String getMethodName() { return "addDistributedObjectListener"; }
  
  public Object[] getParameters() { return null; }
  
  public void distributedObjectCreated(DistributedObjectEvent event) { send(event); }
  
  public void distributedObjectDestroyed(DistributedObjectEvent event) { send(event); }
  
  private void send(DistributedObjectEvent event) {
    if (!shouldSendEvent())
      return; 
    String name = (String)event.getObjectName();
    String serviceName = event.getServiceName();
    ClientMessage eventMessage = ClientAddDistributedObjectListenerCodec.encodeDistributedObjectEvent(name, serviceName, event
        .getEventType().name());
    sendClientMessage(null, eventMessage);
  }
  
  private boolean shouldSendEvent() {
    if (!this.endpoint.isAlive())
      return false; 
    ClusterService clusterService = this.clientEngine.getClusterService();
    boolean currentMemberIsMaster = clusterService.isMaster();
    if (((ClientAddDistributedObjectListenerCodec.RequestParameters)this.parameters).localOnly && !currentMemberIsMaster)
      return false; 
    return true;
  }
}
