package com.hazelcast.client.impl.protocol.task.queue;

import com.hazelcast.client.impl.ClientEndpoint;
import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.QueueAddListenerCodec;
import com.hazelcast.client.impl.protocol.task.AbstractCallableMessageTask;
import com.hazelcast.client.impl.protocol.task.ListenerMessageTask;
import com.hazelcast.collection.impl.queue.QueueService;
import com.hazelcast.instance.Node;
import com.hazelcast.nio.Connection;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.security.permission.QueuePermission;
import java.security.Permission;

public class QueueAddListenerMessageTask extends AbstractCallableMessageTask<QueueAddListenerCodec.RequestParameters> implements ListenerMessageTask {
  public QueueAddListenerMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected Object call() {
    QueueService service = (QueueService)getService("hz:impl:queueService");
    Data partitionKey = this.serializationService.toData(((QueueAddListenerCodec.RequestParameters)this.parameters).name);
    Object object = new Object(this, partitionKey);
    String registrationId = service.addItemListener(((QueueAddListenerCodec.RequestParameters)this.parameters).name, object, ((QueueAddListenerCodec.RequestParameters)this.parameters).includeValue, ((QueueAddListenerCodec.RequestParameters)this.parameters).localOnly);
    this.endpoint.addListenerDestroyAction("hz:impl:queueService", ((QueueAddListenerCodec.RequestParameters)this.parameters).name, registrationId);
    return registrationId;
  }
  
  protected QueueAddListenerCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return QueueAddListenerCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return QueueAddListenerCodec.encodeResponse((String)response); }
  
  public Object[] getParameters() { return new Object[] { null, Boolean.valueOf(((QueueAddListenerCodec.RequestParameters)this.parameters).includeValue) }; }
  
  public Permission getRequiredPermission() { return new QueuePermission(((QueueAddListenerCodec.RequestParameters)this.parameters).name, new String[] { "listen" }); }
  
  public String getMethodName() { return "addItemListener"; }
  
  public String getServiceName() { return "hz:impl:queueService"; }
  
  public String getDistributedObjectName() { return ((QueueAddListenerCodec.RequestParameters)this.parameters).name; }
}
