package com.hazelcast.client.impl.protocol.task.queue;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.QueueCompareAndRemoveAllCodec;
import com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask;
import com.hazelcast.collection.impl.queue.operations.CompareAndRemoveOperation;
import com.hazelcast.instance.Node;
import com.hazelcast.nio.Connection;
import com.hazelcast.security.permission.QueuePermission;
import com.hazelcast.spi.Operation;
import java.security.Permission;

public class QueueCompareAndRemoveAllMessageTask extends AbstractPartitionMessageTask<QueueCompareAndRemoveAllCodec.RequestParameters> {
  public QueueCompareAndRemoveAllMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected Operation prepareOperation() { return new CompareAndRemoveOperation(((QueueCompareAndRemoveAllCodec.RequestParameters)this.parameters).name, ((QueueCompareAndRemoveAllCodec.RequestParameters)this.parameters).dataList, false); }
  
  protected QueueCompareAndRemoveAllCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return QueueCompareAndRemoveAllCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) {
    boolean result = (response != null && ((Boolean)response).booleanValue());
    return QueueCompareAndRemoveAllCodec.encodeResponse(result);
  }
  
  public Object[] getParameters() { return new Object[] { ((QueueCompareAndRemoveAllCodec.RequestParameters)this.parameters).dataList }; }
  
  public Permission getRequiredPermission() { return new QueuePermission(((QueueCompareAndRemoveAllCodec.RequestParameters)this.parameters).name, new String[] { "remove" }); }
  
  public String getMethodName() { return "removeAll"; }
  
  public String getServiceName() { return "hz:impl:queueService"; }
  
  public String getDistributedObjectName() { return ((QueueCompareAndRemoveAllCodec.RequestParameters)this.parameters).name; }
}
