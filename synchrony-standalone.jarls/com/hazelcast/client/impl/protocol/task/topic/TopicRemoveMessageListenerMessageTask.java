package com.hazelcast.client.impl.protocol.task.topic;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.TopicRemoveMessageListenerCodec;
import com.hazelcast.client.impl.protocol.task.AbstractRemoveListenerMessageTask;
import com.hazelcast.instance.Node;
import com.hazelcast.nio.Connection;
import com.hazelcast.security.permission.TopicPermission;
import com.hazelcast.topic.impl.TopicService;
import java.security.Permission;

public class TopicRemoveMessageListenerMessageTask extends AbstractRemoveListenerMessageTask<TopicRemoveMessageListenerCodec.RequestParameters> {
  public TopicRemoveMessageListenerMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected boolean deRegisterListener() {
    TopicService service = (TopicService)getService("hz:impl:topicService");
    return service.removeMessageListener(((TopicRemoveMessageListenerCodec.RequestParameters)this.parameters).name, ((TopicRemoveMessageListenerCodec.RequestParameters)this.parameters).registrationId);
  }
  
  protected String getRegistrationId() { return ((TopicRemoveMessageListenerCodec.RequestParameters)this.parameters).registrationId; }
  
  protected TopicRemoveMessageListenerCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return TopicRemoveMessageListenerCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return TopicRemoveMessageListenerCodec.encodeResponse(((Boolean)response).booleanValue()); }
  
  public String getServiceName() { return "hz:impl:topicService"; }
  
  public Permission getRequiredPermission() { return new TopicPermission(((TopicRemoveMessageListenerCodec.RequestParameters)this.parameters).name, new String[] { "listen" }); }
  
  public String getDistributedObjectName() { return ((TopicRemoveMessageListenerCodec.RequestParameters)this.parameters).name; }
  
  public String getMethodName() { return "removeMessageListener"; }
}
