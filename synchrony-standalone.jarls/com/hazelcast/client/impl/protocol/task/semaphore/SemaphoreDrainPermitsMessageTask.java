package com.hazelcast.client.impl.protocol.task.semaphore;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.SemaphoreDrainPermitsCodec;
import com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask;
import com.hazelcast.concurrent.semaphore.operations.DrainOperation;
import com.hazelcast.instance.Node;
import com.hazelcast.nio.Connection;
import com.hazelcast.security.permission.SemaphorePermission;
import com.hazelcast.spi.Operation;
import java.security.Permission;

public class SemaphoreDrainPermitsMessageTask extends AbstractPartitionMessageTask<SemaphoreDrainPermitsCodec.RequestParameters> {
  public SemaphoreDrainPermitsMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected Operation prepareOperation() { return new DrainOperation(((SemaphoreDrainPermitsCodec.RequestParameters)this.parameters).name); }
  
  protected SemaphoreDrainPermitsCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return SemaphoreDrainPermitsCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return SemaphoreDrainPermitsCodec.encodeResponse(((Integer)response).intValue()); }
  
  public String getServiceName() { return "hz:impl:semaphoreService"; }
  
  public Permission getRequiredPermission() { return new SemaphorePermission(((SemaphoreDrainPermitsCodec.RequestParameters)this.parameters).name, new String[] { "acquire" }); }
  
  public String getDistributedObjectName() { return ((SemaphoreDrainPermitsCodec.RequestParameters)this.parameters).name; }
  
  public String getMethodName() { return "drainPermits"; }
  
  public Object[] getParameters() { return null; }
}
