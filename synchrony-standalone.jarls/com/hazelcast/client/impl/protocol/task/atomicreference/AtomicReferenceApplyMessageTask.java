package com.hazelcast.client.impl.protocol.task.atomicreference;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.AtomicReferenceApplyCodec;
import com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask;
import com.hazelcast.concurrent.atomicreference.operations.ApplyOperation;
import com.hazelcast.instance.Node;
import com.hazelcast.nio.Connection;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.security.permission.AtomicReferencePermission;
import com.hazelcast.spi.Operation;
import java.security.Permission;

public class AtomicReferenceApplyMessageTask extends AbstractPartitionMessageTask<AtomicReferenceApplyCodec.RequestParameters> {
  public AtomicReferenceApplyMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected Operation prepareOperation() { return new ApplyOperation(((AtomicReferenceApplyCodec.RequestParameters)this.parameters).name, ((AtomicReferenceApplyCodec.RequestParameters)this.parameters).function); }
  
  protected AtomicReferenceApplyCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return AtomicReferenceApplyCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return AtomicReferenceApplyCodec.encodeResponse((Data)response); }
  
  public String getServiceName() { return "hz:impl:atomicReferenceService"; }
  
  public Permission getRequiredPermission() { return new AtomicReferencePermission(((AtomicReferenceApplyCodec.RequestParameters)this.parameters).name, new String[] { "read" }); }
  
  public String getDistributedObjectName() { return ((AtomicReferenceApplyCodec.RequestParameters)this.parameters).name; }
  
  public String getMethodName() { return "apply"; }
  
  public Object[] getParameters() { return new Object[] { ((AtomicReferenceApplyCodec.RequestParameters)this.parameters).function }; }
}
