package com.hazelcast.client.impl.protocol.task;

import com.hazelcast.client.impl.operations.OperationFactoryWrapper;
import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.core.ExecutionCallback;
import com.hazelcast.instance.Node;
import com.hazelcast.map.impl.MapService;
import com.hazelcast.map.impl.MapServiceContext;
import com.hazelcast.map.impl.operation.MapOperationProvider;
import com.hazelcast.nio.Connection;
import com.hazelcast.spi.OperationFactory;
import com.hazelcast.spi.impl.operationservice.InternalOperationService;
import java.util.Collection;
import java.util.Map;

public abstract class AbstractMultiPartitionMessageTask<P> extends AbstractMessageTask<P> implements ExecutionCallback<Map<Integer, Object>> {
  protected AbstractMultiPartitionMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected void processMessage() {
    OperationFactoryWrapper operationFactoryWrapper = new OperationFactoryWrapper(createOperationFactory(), this.endpoint.getUuid());
    InternalOperationService operationService = this.nodeEngine.getOperationService();
    operationService.invokeOnPartitionsAsync(getServiceName(), operationFactoryWrapper, getPartitions()).andThen(this);
  }
  
  protected final MapOperationProvider getMapOperationProvider(String mapName) {
    MapService mapService = (MapService)getService("hz:impl:mapService");
    MapServiceContext mapServiceContext = mapService.getMapServiceContext();
    return mapServiceContext.getMapOperationProvider(mapName);
  }
  
  public final void onFailure(Throwable throwable) { handleProcessingFailure(throwable); }
  
  public final void onResponse(Map<Integer, Object> map) { sendResponse(reduce(map)); }
  
  public abstract Collection<Integer> getPartitions();
  
  protected abstract OperationFactory createOperationFactory();
  
  protected abstract Object reduce(Map<Integer, Object> paramMap);
}
