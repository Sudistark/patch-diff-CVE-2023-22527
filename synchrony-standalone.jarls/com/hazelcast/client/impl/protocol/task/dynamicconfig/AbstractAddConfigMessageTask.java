package com.hazelcast.client.impl.protocol.task.dynamicconfig;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.task.AbstractMessageTask;
import com.hazelcast.config.ListenerConfig;
import com.hazelcast.config.MergePolicyConfig;
import com.hazelcast.core.ExecutionCallback;
import com.hazelcast.core.ICompletableFuture;
import com.hazelcast.instance.Node;
import com.hazelcast.internal.dynamicconfig.ClusterWideConfigurationService;
import com.hazelcast.nio.Connection;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import com.hazelcast.security.permission.ConfigPermission;
import java.security.Permission;
import java.util.ArrayList;
import java.util.List;

public abstract class AbstractAddConfigMessageTask<P> extends AbstractMessageTask<P> implements ExecutionCallback<Object> {
  private static final ConfigPermission CONFIG_PERMISSION = new ConfigPermission();
  
  public AbstractAddConfigMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  public String getServiceName() { return "configuration-service"; }
  
  public String getDistributedObjectName() { return null; }
  
  public Permission getRequiredPermission() { return CONFIG_PERMISSION; }
  
  public Object[] getParameters() { return new Object[0]; }
  
  public final void processMessage() {
    IdentifiedDataSerializable config = getConfig();
    ClusterWideConfigurationService service = (ClusterWideConfigurationService)getService("configuration-service");
    if (checkStaticConfigDoesNotExist(config)) {
      ICompletableFuture<Object> future = service.broadcastConfigAsync(config);
      future.andThen(this);
    } else {
      sendResponse(null);
    } 
  }
  
  public void onResponse(Object response) { sendResponse(response); }
  
  public void onFailure(Throwable t) { handleProcessingFailure(t); }
  
  protected MergePolicyConfig mergePolicyConfig(boolean mergePolicyExist, String mergePolicy, int batchSize) {
    if (mergePolicyExist)
      return new MergePolicyConfig(mergePolicy, batchSize); 
    return new MergePolicyConfig();
  }
  
  protected List<? extends ListenerConfig> adaptListenerConfigs(List<ListenerConfigHolder> listenerConfigHolders) {
    if (listenerConfigHolders == null || listenerConfigHolders.isEmpty())
      return null; 
    List<ListenerConfig> itemListenerConfigs = new ArrayList<ListenerConfig>();
    for (ListenerConfigHolder listenerConfigHolder : listenerConfigHolders)
      itemListenerConfigs.add(listenerConfigHolder.asListenerConfig(this.serializationService)); 
    return itemListenerConfigs;
  }
  
  protected abstract IdentifiedDataSerializable getConfig();
  
  protected abstract boolean checkStaticConfigDoesNotExist(IdentifiedDataSerializable paramIdentifiedDataSerializable);
}
