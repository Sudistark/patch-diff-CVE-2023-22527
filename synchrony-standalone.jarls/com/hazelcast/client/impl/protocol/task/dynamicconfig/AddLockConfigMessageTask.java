package com.hazelcast.client.impl.protocol.task.dynamicconfig;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.DynamicConfigAddLockConfigCodec;
import com.hazelcast.config.LockConfig;
import com.hazelcast.instance.Node;
import com.hazelcast.internal.dynamicconfig.DynamicConfigurationAwareConfig;
import com.hazelcast.nio.Connection;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;

public class AddLockConfigMessageTask extends AbstractAddConfigMessageTask<DynamicConfigAddLockConfigCodec.RequestParameters> {
  public AddLockConfigMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected DynamicConfigAddLockConfigCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return DynamicConfigAddLockConfigCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return DynamicConfigAddLockConfigCodec.encodeResponse(); }
  
  protected IdentifiedDataSerializable getConfig() {
    LockConfig config = new LockConfig(((DynamicConfigAddLockConfigCodec.RequestParameters)this.parameters).name);
    config.setQuorumName(((DynamicConfigAddLockConfigCodec.RequestParameters)this.parameters).quorumName);
    return config;
  }
  
  protected boolean checkStaticConfigDoesNotExist(IdentifiedDataSerializable config) {
    DynamicConfigurationAwareConfig nodeConfig = (DynamicConfigurationAwareConfig)this.nodeEngine.getConfig();
    LockConfig lockConfig = (LockConfig)config;
    return nodeConfig.checkStaticConfigDoesNotExist(nodeConfig.getStaticConfig().getLockConfigs(), lockConfig
        .getName(), lockConfig);
  }
  
  public String getMethodName() { return "addLockConfig"; }
}
