package com.hazelcast.client.impl.protocol.task.multimap;

import com.hazelcast.client.impl.ClientEndpoint;
import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.task.AbstractCallableMessageTask;
import com.hazelcast.client.impl.protocol.task.ListenerMessageTask;
import com.hazelcast.instance.Node;
import com.hazelcast.multimap.impl.MultiMapService;
import com.hazelcast.nio.Connection;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.security.permission.MultiMapPermission;
import java.security.Permission;

public abstract class AbstractMultiMapAddEntryListenerMessageTask<P> extends AbstractCallableMessageTask<P> implements ListenerMessageTask {
  public AbstractMultiMapAddEntryListenerMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected Object call() throws Exception {
    MultiMapService service = (MultiMapService)getService("hz:impl:multiMapService");
    MultiMapListener multiMapListener = new MultiMapListener(this, null);
    String name = getDistributedObjectName();
    Data key = getKey();
    boolean includeValue = shouldIncludeValue();
    String registrationId = service.addListener(name, multiMapListener, key, includeValue, isLocalOnly());
    this.endpoint.addListenerDestroyAction("hz:impl:multiMapService", name, registrationId);
    return registrationId;
  }
  
  public String getServiceName() { return "hz:impl:multiMapService"; }
  
  public Permission getRequiredPermission() { return new MultiMapPermission(getDistributedObjectName(), new String[] { "listen" }); }
  
  public String getMethodName() { return "addEntryListener"; }
  
  public Data getKey() { return null; }
  
  protected abstract boolean shouldIncludeValue();
  
  protected abstract boolean isLocalOnly();
  
  protected abstract ClientMessage encodeEvent(Data paramData1, Data paramData2, Data paramData3, int paramInt1, String paramString, int paramInt2);
}
