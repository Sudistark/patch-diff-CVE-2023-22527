package com.hazelcast.client.impl.protocol.task.multimap;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.MultiMapGetCodec;
import com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask;
import com.hazelcast.instance.Node;
import com.hazelcast.multimap.impl.MultiMapRecord;
import com.hazelcast.multimap.impl.operations.GetAllOperation;
import com.hazelcast.multimap.impl.operations.MultiMapResponse;
import com.hazelcast.nio.Connection;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.security.permission.MultiMapPermission;
import com.hazelcast.spi.Operation;
import java.security.Permission;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

public class MultiMapGetMessageTask extends AbstractPartitionMessageTask<MultiMapGetCodec.RequestParameters> {
  public MultiMapGetMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected Operation prepareOperation() {
    GetAllOperation operation = new GetAllOperation(((MultiMapGetCodec.RequestParameters)this.parameters).name, ((MultiMapGetCodec.RequestParameters)this.parameters).key);
    operation.setThreadId(((MultiMapGetCodec.RequestParameters)this.parameters).threadId);
    return operation;
  }
  
  protected MultiMapGetCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return MultiMapGetCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) {
    List<Data> collection = new ArrayList<Data>();
    Collection<MultiMapRecord> responseCollection = ((MultiMapResponse)response).getCollection();
    if (responseCollection != null)
      for (MultiMapRecord record : responseCollection)
        collection.add(this.serializationService.toData(record.getObject()));  
    return MultiMapGetCodec.encodeResponse(collection);
  }
  
  public String getServiceName() { return "hz:impl:multiMapService"; }
  
  public Permission getRequiredPermission() { return new MultiMapPermission(((MultiMapGetCodec.RequestParameters)this.parameters).name, new String[] { "read" }); }
  
  public String getDistributedObjectName() { return ((MultiMapGetCodec.RequestParameters)this.parameters).name; }
  
  public String getMethodName() { return "get"; }
  
  public Object[] getParameters() { return new Object[] { ((MultiMapGetCodec.RequestParameters)this.parameters).key }; }
}
