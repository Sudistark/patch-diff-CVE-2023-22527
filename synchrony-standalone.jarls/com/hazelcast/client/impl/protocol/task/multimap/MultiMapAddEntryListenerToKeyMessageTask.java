package com.hazelcast.client.impl.protocol.task.multimap;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.MultiMapAddEntryListenerToKeyCodec;
import com.hazelcast.instance.Node;
import com.hazelcast.nio.Connection;
import com.hazelcast.nio.serialization.Data;

public class MultiMapAddEntryListenerToKeyMessageTask extends AbstractMultiMapAddEntryListenerMessageTask<MultiMapAddEntryListenerToKeyCodec.RequestParameters> {
  public MultiMapAddEntryListenerToKeyMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected boolean shouldIncludeValue() { return ((MultiMapAddEntryListenerToKeyCodec.RequestParameters)this.parameters).includeValue; }
  
  protected boolean isLocalOnly() { return ((MultiMapAddEntryListenerToKeyCodec.RequestParameters)this.parameters).localOnly; }
  
  protected ClientMessage encodeEvent(Data key, Data value, Data oldValue, int type, String uuid, int numberOfEntriesAffected) { return MultiMapAddEntryListenerToKeyCodec.encodeEntryEvent(key, value, oldValue, null, type, uuid, numberOfEntriesAffected); }
  
  protected MultiMapAddEntryListenerToKeyCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return MultiMapAddEntryListenerToKeyCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return MultiMapAddEntryListenerToKeyCodec.encodeResponse((String)response); }
  
  public String getDistributedObjectName() { return ((MultiMapAddEntryListenerToKeyCodec.RequestParameters)this.parameters).name; }
  
  public Object[] getParameters() { return new Object[] { null, ((MultiMapAddEntryListenerToKeyCodec.RequestParameters)this.parameters).key, Boolean.valueOf(((MultiMapAddEntryListenerToKeyCodec.RequestParameters)this.parameters).includeValue) }; }
  
  public Data getKey() { return ((MultiMapAddEntryListenerToKeyCodec.RequestParameters)this.parameters).key; }
}
