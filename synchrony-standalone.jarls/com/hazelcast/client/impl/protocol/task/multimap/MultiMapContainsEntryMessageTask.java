package com.hazelcast.client.impl.protocol.task.multimap;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.MultiMapContainsEntryCodec;
import com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask;
import com.hazelcast.instance.Node;
import com.hazelcast.multimap.impl.operations.ContainsEntryOperation;
import com.hazelcast.nio.Connection;
import com.hazelcast.security.permission.MultiMapPermission;
import com.hazelcast.spi.Operation;
import java.security.Permission;

public class MultiMapContainsEntryMessageTask extends AbstractPartitionMessageTask<MultiMapContainsEntryCodec.RequestParameters> {
  public MultiMapContainsEntryMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected Operation prepareOperation() {
    ContainsEntryOperation operation = new ContainsEntryOperation(((MultiMapContainsEntryCodec.RequestParameters)this.parameters).name, ((MultiMapContainsEntryCodec.RequestParameters)this.parameters).key, ((MultiMapContainsEntryCodec.RequestParameters)this.parameters).value);
    operation.setThreadId(((MultiMapContainsEntryCodec.RequestParameters)this.parameters).threadId);
    return operation;
  }
  
  protected ClientMessage encodeResponse(Object response) { return MultiMapContainsEntryCodec.encodeResponse(((Boolean)response).booleanValue()); }
  
  protected MultiMapContainsEntryCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return MultiMapContainsEntryCodec.decodeRequest(clientMessage); }
  
  public String getServiceName() { return "hz:impl:multiMapService"; }
  
  public String getDistributedObjectName() { return ((MultiMapContainsEntryCodec.RequestParameters)this.parameters).name; }
  
  public String getMethodName() { return "containsEntry"; }
  
  public Permission getRequiredPermission() { return new MultiMapPermission(((MultiMapContainsEntryCodec.RequestParameters)this.parameters).name, new String[] { "read" }); }
  
  public Object[] getParameters() { return new Object[] { ((MultiMapContainsEntryCodec.RequestParameters)this.parameters).key, ((MultiMapContainsEntryCodec.RequestParameters)this.parameters).value }; }
}
