package com.hazelcast.client.impl.protocol.task;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.core.ExecutionCallback;
import com.hazelcast.instance.Node;
import com.hazelcast.nio.Connection;
import com.hazelcast.spi.InvocationBuilder;
import com.hazelcast.spi.Operation;

public abstract class AbstractInvocationMessageTask<P> extends AbstractMessageTask<P> implements ExecutionCallback {
  protected AbstractInvocationMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected void processMessage() {
    Operation op = prepareOperation();
    op.setCallerUuid(this.endpoint.getUuid());
    InvocationBuilder builder = getInvocationBuilder(op).setExecutionCallback(this).setResultDeserialized(false);
    builder.invoke();
  }
  
  protected abstract InvocationBuilder getInvocationBuilder(Operation paramOperation);
  
  protected abstract Operation prepareOperation();
  
  public void onResponse(Object response) { sendResponse(response); }
  
  public void onFailure(Throwable t) { handleProcessingFailure(t); }
}
