package com.hazelcast.client.impl.protocol.task.executorservice;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.ExecutorServiceIsShutdownCodec;
import com.hazelcast.client.impl.protocol.task.AbstractCallableMessageTask;
import com.hazelcast.executor.impl.DistributedExecutorService;
import com.hazelcast.instance.Node;
import com.hazelcast.nio.Connection;
import java.security.Permission;

public class ExecutorServiceIsShutdownMessageTask extends AbstractCallableMessageTask<ExecutorServiceIsShutdownCodec.RequestParameters> {
  public ExecutorServiceIsShutdownMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected Object call() throws Exception {
    DistributedExecutorService service = (DistributedExecutorService)getService("hz:impl:executorService");
    return Boolean.valueOf(service.isShutdown(((ExecutorServiceIsShutdownCodec.RequestParameters)this.parameters).name));
  }
  
  protected ExecutorServiceIsShutdownCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return ExecutorServiceIsShutdownCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return ExecutorServiceIsShutdownCodec.encodeResponse(((Boolean)response).booleanValue()); }
  
  public String getServiceName() { return "hz:impl:executorService"; }
  
  public Permission getRequiredPermission() { return null; }
  
  public String getDistributedObjectName() { return null; }
  
  public String getMethodName() { return "isShutdown"; }
  
  public Object[] getParameters() { return null; }
}
