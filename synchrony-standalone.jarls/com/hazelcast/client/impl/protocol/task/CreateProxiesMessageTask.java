package com.hazelcast.client.impl.protocol.task;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.ClientCreateProxiesCodec;
import com.hazelcast.core.Member;
import com.hazelcast.instance.Node;
import com.hazelcast.nio.Connection;
import com.hazelcast.spi.Operation;
import com.hazelcast.spi.impl.proxyservice.impl.ProxyInfo;
import com.hazelcast.spi.impl.proxyservice.impl.operations.PostJoinProxyOperation;
import com.hazelcast.util.function.Supplier;
import java.security.Permission;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;

public class CreateProxiesMessageTask extends AbstractMultiTargetMessageTask<ClientCreateProxiesCodec.RequestParameters> implements Supplier<Operation>, BlockingMessageTask {
  public CreateProxiesMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected Supplier<Operation> createOperationSupplier() { return this; }
  
  public Operation get() {
    List<ProxyInfo> proxyInfos = new ArrayList<ProxyInfo>(((ClientCreateProxiesCodec.RequestParameters)this.parameters).proxies.size());
    for (Map.Entry<String, String> proxy : ((ClientCreateProxiesCodec.RequestParameters)this.parameters).proxies)
      proxyInfos.add(new ProxyInfo((String)proxy.getValue(), (String)proxy.getKey())); 
    return new PostJoinProxyOperation(proxyInfos);
  }
  
  protected Object reduce(Map<Member, Object> map) throws Throwable {
    for (Object result : map.values()) {
      if (result instanceof Throwable && !(result instanceof com.hazelcast.core.MemberLeftException))
        throw (Throwable)result; 
    } 
    return null;
  }
  
  public Collection<Member> getTargets() { return this.nodeEngine.getClusterService().getMembers(); }
  
  protected ClientCreateProxiesCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return ClientCreateProxiesCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return ClientCreateProxiesCodec.encodeResponse(); }
  
  public Permission getRequiredPermission() { return null; }
  
  public String getServiceName() { return null; }
  
  public String getDistributedObjectName() { return null; }
  
  public String getMethodName() { return null; }
  
  public Object[] getParameters() { return null; }
}
