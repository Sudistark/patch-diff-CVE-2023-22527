package com.hazelcast.client.impl.protocol.task;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.core.ExecutionCallback;
import com.hazelcast.core.ICompletableFuture;
import com.hazelcast.instance.Node;
import com.hazelcast.internal.util.InvocationUtil;
import com.hazelcast.nio.Connection;
import com.hazelcast.spi.Operation;
import com.hazelcast.util.function.Supplier;

public abstract class AbstractStableClusterMessageTask<P> extends AbstractMessageTask<P> implements ExecutionCallback {
  private static final int RETRY_COUNT = 100;
  
  protected AbstractStableClusterMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected void processMessage() throws Throwable {
    ICompletableFuture<Object> future = InvocationUtil.invokeOnStableClusterSerial(this.nodeEngine, createOperationSupplier(), 100);
    future.andThen(this);
  }
  
  abstract Supplier<Operation> createOperationSupplier();
  
  protected abstract Object resolve(Object paramObject);
  
  public final void onResponse(Object response) { sendResponse(resolve(response)); }
  
  public final void onFailure(Throwable t) { handleProcessingFailure(t); }
}
