package com.hazelcast.client.impl.protocol.task.replicatedmap;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.ReplicatedMapContainsKeyCodec;
import com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask;
import com.hazelcast.instance.Node;
import com.hazelcast.nio.Connection;
import com.hazelcast.replicatedmap.impl.operation.ContainsKeyOperation;
import com.hazelcast.security.permission.ReplicatedMapPermission;
import com.hazelcast.spi.Operation;
import java.security.Permission;

public class ReplicatedMapContainsKeyMessageTask extends AbstractPartitionMessageTask<ReplicatedMapContainsKeyCodec.RequestParameters> {
  public ReplicatedMapContainsKeyMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected Operation prepareOperation() { return new ContainsKeyOperation(((ReplicatedMapContainsKeyCodec.RequestParameters)this.parameters).name, ((ReplicatedMapContainsKeyCodec.RequestParameters)this.parameters).key); }
  
  protected ReplicatedMapContainsKeyCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return ReplicatedMapContainsKeyCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return ReplicatedMapContainsKeyCodec.encodeResponse(((Boolean)response).booleanValue()); }
  
  public String getServiceName() { return "hz:impl:replicatedMapService"; }
  
  public Permission getRequiredPermission() { return new ReplicatedMapPermission(((ReplicatedMapContainsKeyCodec.RequestParameters)this.parameters).name, new String[] { "read" }); }
  
  public String getDistributedObjectName() { return ((ReplicatedMapContainsKeyCodec.RequestParameters)this.parameters).name; }
  
  public String getMethodName() { return "containsKey"; }
  
  public Object[] getParameters() { return new Object[] { ((ReplicatedMapContainsKeyCodec.RequestParameters)this.parameters).key }; }
}
