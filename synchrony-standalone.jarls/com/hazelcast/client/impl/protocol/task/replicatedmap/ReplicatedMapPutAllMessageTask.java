package com.hazelcast.client.impl.protocol.task.replicatedmap;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.ReplicatedMapPutAllCodec;
import com.hazelcast.client.impl.protocol.task.AbstractAllPartitionsMessageTask;
import com.hazelcast.instance.Node;
import com.hazelcast.nio.Connection;
import com.hazelcast.replicatedmap.impl.client.ReplicatedMapEntries;
import com.hazelcast.replicatedmap.impl.operation.PutAllOperationFactory;
import com.hazelcast.security.permission.ReplicatedMapPermission;
import com.hazelcast.spi.OperationFactory;
import com.hazelcast.util.ExceptionUtil;
import com.hazelcast.util.MapUtil;
import java.security.Permission;
import java.util.Map;

public class ReplicatedMapPutAllMessageTask extends AbstractAllPartitionsMessageTask<ReplicatedMapPutAllCodec.RequestParameters> {
  public ReplicatedMapPutAllMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected OperationFactory createOperationFactory() { return new PutAllOperationFactory(((ReplicatedMapPutAllCodec.RequestParameters)this.parameters).name, new ReplicatedMapEntries(((ReplicatedMapPutAllCodec.RequestParameters)this.parameters).entries)); }
  
  protected Object reduce(Map<Integer, Object> map) {
    for (Map.Entry<Integer, Object> entry : map.entrySet()) {
      Object result = this.serializationService.toObject(entry.getValue());
      if (result instanceof Throwable)
        throw ExceptionUtil.rethrow((Throwable)result); 
    } 
    return null;
  }
  
  protected ReplicatedMapPutAllCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return ReplicatedMapPutAllCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return ReplicatedMapPutAllCodec.encodeResponse(); }
  
  public String getServiceName() { return "hz:impl:replicatedMapService"; }
  
  public String getDistributedObjectName() { return ((ReplicatedMapPutAllCodec.RequestParameters)this.parameters).name; }
  
  public String getMethodName() { return "putAll"; }
  
  public Permission getRequiredPermission() { return new ReplicatedMapPermission(((ReplicatedMapPutAllCodec.RequestParameters)this.parameters).name, new String[] { "put" }); }
  
  public Object[] getParameters() {
    Map map = MapUtil.createHashMap(((ReplicatedMapPutAllCodec.RequestParameters)this.parameters).entries.size());
    for (Map.Entry entry : ((ReplicatedMapPutAllCodec.RequestParameters)this.parameters).entries)
      map.put(entry.getKey(), entry.getValue()); 
    return new Object[] { map };
  }
}
