package com.hazelcast.client.impl.protocol.task.cache;

import com.hazelcast.cache.impl.operation.CacheDestroyOperation;
import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.CacheDestroyCodec;
import com.hazelcast.client.impl.protocol.task.AbstractInvocationMessageTask;
import com.hazelcast.instance.Node;
import com.hazelcast.nio.Connection;
import com.hazelcast.spi.InvocationBuilder;
import com.hazelcast.spi.Operation;
import com.hazelcast.spi.impl.operationservice.InternalOperationService;
import java.security.Permission;

public class CacheDestroyMessageTask extends AbstractInvocationMessageTask<CacheDestroyCodec.RequestParameters> {
  public CacheDestroyMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected InvocationBuilder getInvocationBuilder(Operation op) {
    InternalOperationService operationService = this.nodeEngine.getOperationService();
    return operationService.createInvocationBuilder("hz:impl:cacheService", op, this.nodeEngine
        .getThisAddress());
  }
  
  protected Operation prepareOperation() { return new CacheDestroyOperation(((CacheDestroyCodec.RequestParameters)this.parameters).name); }
  
  protected CacheDestroyCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return CacheDestroyCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return CacheDestroyCodec.encodeResponse(); }
  
  public String getServiceName() { return "hz:impl:cacheService"; }
  
  public Permission getRequiredPermission() { return null; }
  
  public String getDistributedObjectName() { return null; }
  
  public String getMethodName() { return null; }
  
  public Object[] getParameters() { return null; }
}
