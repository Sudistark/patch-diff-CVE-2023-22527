package com.hazelcast.client.impl.protocol.task.cache;

import com.hazelcast.cache.impl.CacheService;
import com.hazelcast.cache.impl.PreJoinCacheConfig;
import com.hazelcast.cache.impl.merge.policy.CacheMergePolicyProvider;
import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.CacheCreateConfigCodec;
import com.hazelcast.client.impl.protocol.task.AbstractMessageTask;
import com.hazelcast.config.CacheConfig;
import com.hazelcast.config.LegacyCacheConfig;
import com.hazelcast.core.ExecutionCallback;
import com.hazelcast.core.ICompletableFuture;
import com.hazelcast.instance.Node;
import com.hazelcast.internal.config.ConfigValidator;
import com.hazelcast.internal.config.MergePolicyValidator;
import com.hazelcast.nio.Connection;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.properties.GroupProperty;
import java.security.Permission;

public class CacheCreateConfigMessageTask extends AbstractMessageTask<CacheCreateConfigCodec.RequestParameters> implements ExecutionCallback {
  public CacheCreateConfigMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected void processMessage() {
    CacheConfig cacheConfig = extractCacheConfigFromMessage();
    CacheService cacheService = (CacheService)getService("hz:impl:cacheService");
    if (cacheConfig != null) {
      CacheMergePolicyProvider mergePolicyProvider = cacheService.getMergePolicyProvider();
      ConfigValidator.checkCacheConfig(cacheConfig, mergePolicyProvider);
      Object mergePolicy = mergePolicyProvider.getMergePolicy(cacheConfig.getMergePolicy());
      MergePolicyValidator.checkMergePolicySupportsInMemoryFormat(cacheConfig.getName(), mergePolicy, cacheConfig.getInMemoryFormat(), true, this.logger);
      ICompletableFuture future = cacheService.createCacheConfigOnAllMembersAsync(PreJoinCacheConfig.of(cacheConfig));
      future.andThen(this);
    } else {
      sendResponse(null);
    } 
  }
  
  private CacheConfig extractCacheConfigFromMessage() {
    int clientVersion = this.endpoint.getClientVersion();
    if (-1 == clientVersion) {
      boolean compatibilityEnabled = this.nodeEngine.getProperties().getBoolean(GroupProperty.COMPATIBILITY_3_6_CLIENT_ENABLED);
      if (compatibilityEnabled) {
        LegacyCacheConfig legacyCacheConfig = (LegacyCacheConfig)this.nodeEngine.toObject(((CacheCreateConfigCodec.RequestParameters)this.parameters).cacheConfig, LegacyCacheConfig.class);
        if (null == legacyCacheConfig)
          return null; 
        return legacyCacheConfig.getConfigAndReset();
      } 
    } 
    return (CacheConfig)this.nodeEngine.toObject(((CacheCreateConfigCodec.RequestParameters)this.parameters).cacheConfig);
  }
  
  protected CacheCreateConfigCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return CacheCreateConfigCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) {
    Data responseData = serializeCacheConfig(response);
    return CacheCreateConfigCodec.encodeResponse(responseData);
  }
  
  public String getServiceName() { return "hz:impl:cacheService"; }
  
  public Permission getRequiredPermission() { return null; }
  
  public String getDistributedObjectName() { return null; }
  
  public String getMethodName() { return null; }
  
  public Object[] getParameters() { return null; }
  
  public void onResponse(Object response) { sendResponse(response); }
  
  public void onFailure(Throwable t) { handleProcessingFailure(t); }
  
  private Data serializeCacheConfig(Object response) {
    Data responseData = null;
    if (-1 == this.endpoint.getClientVersion()) {
      boolean compatibilityEnabled = this.nodeEngine.getProperties().getBoolean(GroupProperty.COMPATIBILITY_3_6_CLIENT_ENABLED);
      if (compatibilityEnabled)
        responseData = this.nodeEngine.toData((response == null) ? null : new LegacyCacheConfig((CacheConfig)response)); 
    } 
    if (null == responseData)
      responseData = this.nodeEngine.toData(response); 
    return responseData;
  }
}
