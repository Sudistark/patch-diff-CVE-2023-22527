package com.hazelcast.client.impl.protocol.task.cache;

import com.hazelcast.cache.impl.CacheClearResponse;
import com.hazelcast.cache.impl.CacheOperationProvider;
import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.CacheClearCodec;
import com.hazelcast.instance.Node;
import com.hazelcast.nio.Connection;
import com.hazelcast.security.permission.CachePermission;
import com.hazelcast.spi.OperationFactory;
import java.security.Permission;
import java.util.Map;
import javax.cache.CacheException;

public class CacheClearMessageTask extends AbstractCacheAllPartitionsTask<CacheClearCodec.RequestParameters> {
  public CacheClearMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected CacheClearCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return CacheClearCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return CacheClearCodec.encodeResponse(); }
  
  protected OperationFactory createOperationFactory() {
    CacheOperationProvider operationProvider = getOperationProvider(((CacheClearCodec.RequestParameters)this.parameters).name);
    return operationProvider.createClearOperationFactory();
  }
  
  protected Object reduce(Map<Integer, Object> map) {
    for (Map.Entry<Integer, Object> entry : map.entrySet()) {
      if (entry.getValue() == null)
        continue; 
      CacheClearResponse cacheClearResponse = (CacheClearResponse)this.nodeEngine.toObject(entry.getValue());
      Object response = cacheClearResponse.getResponse();
      if (response instanceof CacheException)
        throw (CacheException)response; 
    } 
    return null;
  }
  
  public Permission getRequiredPermission() { return new CachePermission(((CacheClearCodec.RequestParameters)this.parameters).name, new String[] { "remove" }); }
  
  public String getServiceName() { return "hz:impl:cacheService"; }
  
  public String getDistributedObjectName() { return ((CacheClearCodec.RequestParameters)this.parameters).name; }
  
  public Object[] getParameters() { return null; }
  
  public String getMethodName() { return "clear"; }
}
