package com.hazelcast.client.impl.protocol.task.cache;

import com.hazelcast.cache.CacheNotExistsException;
import com.hazelcast.cache.impl.CacheOperationProvider;
import com.hazelcast.cache.impl.ICacheService;
import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.task.AbstractAllPartitionsMessageTask;
import com.hazelcast.config.CacheConfig;
import com.hazelcast.instance.Node;
import com.hazelcast.nio.Connection;
import java.security.Permission;

abstract class AbstractCacheAllPartitionsTask<P> extends AbstractAllPartitionsMessageTask<P> {
  public AbstractCacheAllPartitionsTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected CacheOperationProvider getOperationProvider(String name) {
    ICacheService service = (ICacheService)getService("hz:impl:cacheService");
    CacheConfig cacheConfig = service.getCacheConfig(name);
    if (cacheConfig == null)
      throw new CacheNotExistsException("Cache config for cache " + name + " has not been created yet!"); 
    return service.getCacheOperationProvider(name, cacheConfig.getInMemoryFormat());
  }
  
  public String getServiceName() { return "hz:impl:cacheService"; }
  
  public String getMethodName() { return null; }
  
  public Object[] getParameters() { return null; }
  
  public Permission getRequiredPermission() { return null; }
}
