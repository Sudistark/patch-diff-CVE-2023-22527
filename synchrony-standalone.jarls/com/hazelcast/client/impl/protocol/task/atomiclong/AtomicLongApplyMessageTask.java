package com.hazelcast.client.impl.protocol.task.atomiclong;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.AtomicLongApplyCodec;
import com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask;
import com.hazelcast.concurrent.atomiclong.operations.ApplyOperation;
import com.hazelcast.core.IFunction;
import com.hazelcast.instance.Node;
import com.hazelcast.nio.Connection;
import com.hazelcast.security.permission.AtomicLongPermission;
import com.hazelcast.spi.Operation;
import java.security.Permission;

public class AtomicLongApplyMessageTask extends AbstractPartitionMessageTask<AtomicLongApplyCodec.RequestParameters> {
  public AtomicLongApplyMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected Operation prepareOperation() {
    IFunction f = (IFunction)this.serializationService.toObject(((AtomicLongApplyCodec.RequestParameters)this.parameters).function);
    return new ApplyOperation(((AtomicLongApplyCodec.RequestParameters)this.parameters).name, f);
  }
  
  protected AtomicLongApplyCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return AtomicLongApplyCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return AtomicLongApplyCodec.encodeResponse(this.nodeEngine.toData(response)); }
  
  public String getServiceName() { return "hz:impl:atomicLongService"; }
  
  public Permission getRequiredPermission() { return new AtomicLongPermission(((AtomicLongApplyCodec.RequestParameters)this.parameters).name, new String[] { "read" }); }
  
  public String getDistributedObjectName() { return ((AtomicLongApplyCodec.RequestParameters)this.parameters).name; }
  
  public String getMethodName() { return "apply"; }
  
  public Object[] getParameters() { return new Object[] { ((AtomicLongApplyCodec.RequestParameters)this.parameters).function }; }
}
