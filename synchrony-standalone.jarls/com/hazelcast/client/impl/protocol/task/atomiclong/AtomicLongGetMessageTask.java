package com.hazelcast.client.impl.protocol.task.atomiclong;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.AtomicLongGetCodec;
import com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask;
import com.hazelcast.concurrent.atomiclong.operations.GetOperation;
import com.hazelcast.instance.Node;
import com.hazelcast.nio.Connection;
import com.hazelcast.security.permission.AtomicLongPermission;
import com.hazelcast.spi.Operation;
import java.security.Permission;

public class AtomicLongGetMessageTask extends AbstractPartitionMessageTask<AtomicLongGetCodec.RequestParameters> {
  public AtomicLongGetMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected Operation prepareOperation() { return new GetOperation(((AtomicLongGetCodec.RequestParameters)this.parameters).name); }
  
  protected AtomicLongGetCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return AtomicLongGetCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return AtomicLongGetCodec.encodeResponse(((Long)response).longValue()); }
  
  public String getServiceName() { return "hz:impl:atomicLongService"; }
  
  public Permission getRequiredPermission() { return new AtomicLongPermission(((AtomicLongGetCodec.RequestParameters)this.parameters).name, new String[] { "read" }); }
  
  public String getDistributedObjectName() { return ((AtomicLongGetCodec.RequestParameters)this.parameters).name; }
  
  public String getMethodName() { return "get"; }
  
  public Object[] getParameters() { return null; }
}
