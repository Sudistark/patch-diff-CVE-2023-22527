package com.hazelcast.config;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class CacheSimpleConfigReadOnly extends CacheSimpleConfig {
  public CacheSimpleConfigReadOnly(CacheSimpleConfig cacheSimpleConfig) { super(cacheSimpleConfig); }
  
  public EvictionConfig getEvictionConfig() {
    EvictionConfig evictionConfig = super.getEvictionConfig();
    if (evictionConfig == null)
      return null; 
    return evictionConfig.getAsReadOnly();
  }
  
  public List<CacheSimpleEntryListenerConfig> getCacheEntryListeners() {
    List<CacheSimpleEntryListenerConfig> listenerConfigs = super.getCacheEntryListeners();
    List<CacheSimpleEntryListenerConfig> readOnlyListenerConfigs = new ArrayList<CacheSimpleEntryListenerConfig>(listenerConfigs.size());
    for (CacheSimpleEntryListenerConfig listenerConfig : listenerConfigs)
      readOnlyListenerConfigs.add(listenerConfig.getAsReadOnly()); 
    return Collections.unmodifiableList(readOnlyListenerConfigs);
  }
  
  public CacheSimpleConfig setAsyncBackupCount(int asyncBackupCount) { throw new UnsupportedOperationException("This config is read-only cache: " + getName()); }
  
  public CacheSimpleConfig setBackupCount(int backupCount) { throw new UnsupportedOperationException("This config is read-only cache: " + getName()); }
  
  public CacheSimpleConfig setCacheEntryListeners(List<CacheSimpleEntryListenerConfig> cacheEntryListeners) { throw new UnsupportedOperationException("This config is read-only cache: " + getName()); }
  
  public CacheSimpleConfig setCacheLoaderFactory(String cacheLoaderFactory) { throw new UnsupportedOperationException("This config is read-only cache: " + getName()); }
  
  public CacheSimpleConfig setCacheWriterFactory(String cacheWriterFactory) { throw new UnsupportedOperationException("This config is read-only cache: " + getName()); }
  
  public CacheSimpleConfig setEvictionConfig(EvictionConfig evictionConfig) { throw new UnsupportedOperationException("This config is read-only cache: " + getName()); }
  
  public CacheSimpleConfig setExpiryPolicyFactoryConfig(CacheSimpleConfig.ExpiryPolicyFactoryConfig expiryPolicyFactoryConfig) { throw new UnsupportedOperationException("This config is read-only cache: " + getName()); }
  
  public CacheSimpleConfig setExpiryPolicyFactory(String className) { throw new UnsupportedOperationException("This config is read-only cache: " + getName()); }
  
  public CacheSimpleConfig setInMemoryFormat(InMemoryFormat inMemoryFormat) { throw new UnsupportedOperationException("This config is read-only cache: " + getName()); }
  
  public CacheSimpleConfig setKeyType(String keyType) { throw new UnsupportedOperationException("This config is read-only cache: " + getName()); }
  
  public CacheSimpleConfig setManagementEnabled(boolean managementEnabled) { throw new UnsupportedOperationException("This config is read-only cache: " + getName()); }
  
  public CacheSimpleConfig setName(String name) { throw new UnsupportedOperationException("This config is read-only cache: " + getName()); }
  
  public CacheSimpleConfig setReadThrough(boolean readThrough) { throw new UnsupportedOperationException("This config is read-only cache: " + getName()); }
  
  public CacheSimpleConfig setStatisticsEnabled(boolean statisticsEnabled) { throw new UnsupportedOperationException("This config is read-only cache: " + getName()); }
  
  public CacheSimpleConfig setValueType(String valueType) { throw new UnsupportedOperationException("This config is read-only cache: " + getName()); }
  
  public CacheSimpleConfig setWriteThrough(boolean writeThrough) { throw new UnsupportedOperationException("This config is read-only cache: " + getName()); }
  
  public CacheSimpleConfig addEntryListenerConfig(CacheSimpleEntryListenerConfig listenerConfig) { throw new UnsupportedOperationException("This config is read-only cache: " + getName()); }
  
  public void setWanReplicationRef(WanReplicationRef wanReplicationRef) { throw new UnsupportedOperationException("This config is read-only cache: " + getName()); }
  
  public CacheSimpleConfig setQuorumName(String quorumName) { throw new UnsupportedOperationException("This config is read-only cache: " + getName()); }
  
  public void setMergePolicy(String mergePolicy) { throw new UnsupportedOperationException("This config is read-only cache: " + getName()); }
  
  public CacheSimpleConfig addCachePartitionLostListenerConfig(CachePartitionLostListenerConfig listenerConfig) { throw new UnsupportedOperationException("This config is read-only cache: " + getName()); }
  
  public CacheSimpleConfig setPartitionLostListenerConfigs(List<CachePartitionLostListenerConfig> partitionLostListenerConfigs) { throw new UnsupportedOperationException("This config is read-only cache: " + getName()); }
  
  public void setDisablePerEntryInvalidationEvents(boolean disablePerEntryInvalidationEvents) { throw new UnsupportedOperationException("This config is read-only cache: " + getName()); }
  
  public CacheSimpleConfig setHotRestartConfig(HotRestartConfig hotRestartConfig) { throw new UnsupportedOperationException("This config is read-only cache: " + getName()); }
}
