package com.hazelcast.config.matcher;

import com.hazelcast.config.ConfigPatternMatcher;
import com.hazelcast.config.ConfigurationException;

public class WildcardConfigPatternMatcher implements ConfigPatternMatcher {
  public String matches(Iterable<String> configPatterns, String itemName) throws ConfigurationException {
    String candidate = null;
    for (String pattern : configPatterns) {
      if (matches(pattern, itemName)) {
        if (candidate != null)
          throw new ConfigurationException(itemName, candidate, pattern); 
        candidate = pattern;
      } 
    } 
    return candidate;
  }
  
  public boolean matches(String pattern, String itemName) {
    int index = pattern.indexOf('*');
    if (index == -1)
      return itemName.equals(pattern); 
    String firstPart = pattern.substring(0, index);
    if (!itemName.startsWith(firstPart))
      return false; 
    String secondPart = pattern.substring(index + 1);
    if (!itemName.endsWith(secondPart))
      return false; 
    return true;
  }
  
  public boolean equals(Object o) {
    if (this == o)
      return true; 
    return (o != null && getClass() == o.getClass());
  }
  
  public int hashCode() { return super.hashCode(); }
}
