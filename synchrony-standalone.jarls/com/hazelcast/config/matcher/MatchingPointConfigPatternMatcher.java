package com.hazelcast.config.matcher;

import com.hazelcast.config.ConfigPatternMatcher;
import com.hazelcast.config.ConfigurationException;

public class MatchingPointConfigPatternMatcher implements ConfigPatternMatcher {
  public String matches(Iterable<String> configPatterns, String itemName) throws ConfigurationException {
    String candidate = null;
    String duplicate = null;
    int lastMatchingPoint = -1;
    for (String pattern : configPatterns) {
      int matchingPoint = getMatchingPoint(pattern, itemName);
      if (matchingPoint > -1 && matchingPoint >= lastMatchingPoint) {
        if (matchingPoint == lastMatchingPoint) {
          duplicate = candidate;
        } else {
          duplicate = null;
        } 
        lastMatchingPoint = matchingPoint;
        candidate = pattern;
      } 
    } 
    if (duplicate != null)
      throw new ConfigurationException(itemName, candidate, duplicate); 
    return candidate;
  }
  
  private int getMatchingPoint(String pattern, String itemName) {
    int index = pattern.indexOf('*');
    if (index == -1)
      return -1; 
    String firstPart = pattern.substring(0, index);
    if (!itemName.startsWith(firstPart))
      return -1; 
    String secondPart = pattern.substring(index + 1);
    if (!itemName.endsWith(secondPart))
      return -1; 
    return firstPart.length() + secondPart.length();
  }
  
  public boolean equals(Object o) {
    if (this == o)
      return true; 
    return (o != null && getClass() == o.getClass());
  }
  
  public int hashCode() { return super.hashCode(); }
}
