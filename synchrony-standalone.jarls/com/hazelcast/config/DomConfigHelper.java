package com.hazelcast.config;

import com.hazelcast.core.HazelcastException;
import com.hazelcast.util.StringUtil;
import java.util.Map;
import java.util.Properties;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

public final class DomConfigHelper {
  public static void fillProperties(Node node, Map<String, Comparable> properties, boolean domLevel3) {
    if (properties == null)
      return; 
    for (Node n : childElements(node)) {
      String propertyName;
      if (n.getNodeType() == 3 || n.getNodeType() == 8)
        continue; 
      String name = cleanNodeName(n);
      if ("property".equals(name)) {
        propertyName = getTextContent(n.getAttributes().getNamedItem("name"), domLevel3).trim();
      } else {
        propertyName = name;
      } 
      String value = getTextContent(n, domLevel3).trim();
      properties.put(propertyName, value);
    } 
  }
  
  public static void fillProperties(Node node, Properties properties, boolean domLevel3) {
    if (properties == null)
      return; 
    for (Node n : childElements(node)) {
      String name = cleanNodeName(n);
      String propertyName = "property".equals(name) ? getTextContent(n.getAttributes().getNamedItem("name"), domLevel3).trim() : name;
      String value = getTextContent(n, domLevel3).trim();
      properties.setProperty(propertyName, value);
    } 
  }
  
  public static Iterable<Node> childElements(Node node) { return new IterableNodeList(node, (short)1); }
  
  public static Iterable<Node> asElementIterable(NodeList list) { return new IterableNodeList(list, (short)1); }
  
  public static String cleanNodeName(Node node) {
    String nodeName = node.getLocalName();
    if (nodeName == null)
      throw new HazelcastException("Local node name is null for " + node); 
    return StringUtil.lowerCaseInternal(nodeName);
  }
  
  public static String getTextContent(Node node, boolean domLevel3) {
    if (node != null) {
      String text;
      if (domLevel3) {
        text = node.getTextContent();
      } else {
        text = getTextContentOld(node);
      } 
      return (text != null) ? text.trim() : "";
    } 
    return "";
  }
  
  private static String getTextContentOld(Node node) {
    Node child = node.getFirstChild();
    if (child != null) {
      Node next = child.getNextSibling();
      if (next == null)
        return hasTextContent(child) ? child.getNodeValue() : ""; 
      StringBuilder buf = new StringBuilder();
      appendTextContents(node, buf);
      return buf.toString();
    } 
    return "";
  }
  
  private static void appendTextContents(Node node, StringBuilder buf) {
    Node child = node.getFirstChild();
    while (child != null) {
      if (hasTextContent(child))
        buf.append(child.getNodeValue()); 
      child = child.getNextSibling();
    } 
  }
  
  private static boolean hasTextContent(Node node) {
    short nodeType = node.getNodeType();
    return (nodeType != 8 && nodeType != 7);
  }
  
  public static boolean getBooleanValue(String value) { return Boolean.parseBoolean(StringUtil.lowerCaseInternal(value)); }
  
  public static int getIntegerValue(String parameterName, String value) {
    try {
      return Integer.parseInt(value);
    } catch (NumberFormatException e) {
      throw new InvalidConfigurationException(String.format("Invalid integer value for parameter %s: %s", new Object[] { parameterName, value }));
    } 
  }
  
  public static int getIntegerValue(String parameterName, String value, int defaultValue) {
    if (StringUtil.isNullOrEmpty(value))
      return defaultValue; 
    return getIntegerValue(parameterName, value);
  }
  
  public static long getLongValue(String parameterName, String value) {
    try {
      return Long.parseLong(value);
    } catch (Exception e) {
      throw new InvalidConfigurationException(
          String.format("Invalid long integer value for parameter %s: %s", new Object[] { parameterName, value }));
    } 
  }
  
  public static long getLongValue(String parameterName, String value, long defaultValue) {
    if (StringUtil.isNullOrEmpty(value))
      return defaultValue; 
    return getLongValue(parameterName, value);
  }
  
  public static double getDoubleValue(String parameterName, String value) {
    try {
      return Double.parseDouble(value);
    } catch (Exception e) {
      throw new InvalidConfigurationException(
          String.format("Invalid long integer value for parameter %s: %s", new Object[] { parameterName, value }));
    } 
  }
  
  public static double getDoubleValue(String parameterName, String value, double defaultValue) {
    if (StringUtil.isNullOrEmpty(value))
      return defaultValue; 
    return getDoubleValue(parameterName, value);
  }
  
  public static String getAttribute(Node node, String attName, boolean domLevel3) {
    Node attNode = node.getAttributes().getNamedItem(attName);
    if (attNode == null)
      return null; 
    return getTextContent(attNode, domLevel3);
  }
}
