package com.hazelcast.config;

import com.hazelcast.config.cp.CPSubsystemConfig;
import com.hazelcast.config.matcher.MatchingPointConfigPatternMatcher;
import com.hazelcast.core.ManagedContext;
import com.hazelcast.internal.config.ConfigUtils;
import com.hazelcast.logging.ILogger;
import com.hazelcast.logging.Logger;
import com.hazelcast.partition.strategy.StringPartitioningStrategy;
import com.hazelcast.security.jsm.HazelcastRuntimePermission;
import com.hazelcast.util.Preconditions;
import com.hazelcast.util.StringUtil;
import java.io.File;
import java.net.URL;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

public class Config {
  private static final ILogger LOGGER = Logger.getLogger(Config.class);
  
  private URL configurationUrl;
  
  private File configurationFile;
  
  private ClassLoader classLoader;
  
  private Properties properties = new Properties();
  
  private String instanceName;
  
  private GroupConfig groupConfig = new GroupConfig();
  
  private NetworkConfig networkConfig = new NetworkConfig();
  
  private ConfigPatternMatcher configPatternMatcher = new MatchingPointConfigPatternMatcher();
  
  private final Map<String, MapConfig> mapConfigs = new ConcurrentHashMap();
  
  private final Map<String, CacheSimpleConfig> cacheConfigs = new ConcurrentHashMap();
  
  private final Map<String, TopicConfig> topicConfigs = new ConcurrentHashMap();
  
  private final Map<String, ReliableTopicConfig> reliableTopicConfigs = new ConcurrentHashMap();
  
  private final Map<String, QueueConfig> queueConfigs = new ConcurrentHashMap();
  
  private final Map<String, LockConfig> lockConfigs = new ConcurrentHashMap();
  
  private final Map<String, MultiMapConfig> multiMapConfigs = new ConcurrentHashMap();
  
  private final Map<String, ListConfig> listConfigs = new ConcurrentHashMap();
  
  private final Map<String, SetConfig> setConfigs = new ConcurrentHashMap();
  
  private final Map<String, ExecutorConfig> executorConfigs = new ConcurrentHashMap();
  
  private final Map<String, DurableExecutorConfig> durableExecutorConfigs = new ConcurrentHashMap();
  
  private final Map<String, ScheduledExecutorConfig> scheduledExecutorConfigs = new ConcurrentHashMap();
  
  private final Map<String, SemaphoreConfig> semaphoreConfigs = new ConcurrentHashMap();
  
  private final Map<String, CountDownLatchConfig> countDownLatchConfigs = new ConcurrentHashMap();
  
  private final Map<String, ReplicatedMapConfig> replicatedMapConfigs = new ConcurrentHashMap();
  
  private final Map<String, WanReplicationConfig> wanReplicationConfigs = new ConcurrentHashMap();
  
  private final Map<String, JobTrackerConfig> jobTrackerConfigs = new ConcurrentHashMap();
  
  private final Map<String, QuorumConfig> quorumConfigs = new ConcurrentHashMap();
  
  private final Map<String, RingbufferConfig> ringbufferConfigs = new ConcurrentHashMap();
  
  private final Map<String, CardinalityEstimatorConfig> cardinalityEstimatorConfigs = new ConcurrentHashMap();
  
  private final Map<String, EventJournalConfig> mapEventJournalConfigs = new ConcurrentHashMap();
  
  private final Map<String, EventJournalConfig> cacheEventJournalConfigs = new ConcurrentHashMap();
  
  private final Map<String, MerkleTreeConfig> mapMerkleTreeConfigs = new ConcurrentHashMap();
  
  private final Map<String, FlakeIdGeneratorConfig> flakeIdGeneratorConfigMap = new ConcurrentHashMap();
  
  private final Map<String, AtomicLongConfig> atomicLongConfigs = new ConcurrentHashMap();
  
  private final Map<String, AtomicReferenceConfig> atomicReferenceConfigs = new ConcurrentHashMap();
  
  private final Map<String, PNCounterConfig> pnCounterConfigs = new ConcurrentHashMap();
  
  private AdvancedNetworkConfig advancedNetworkConfig = new AdvancedNetworkConfig();
  
  private ServicesConfig servicesConfig = new ServicesConfig();
  
  private SecurityConfig securityConfig = new SecurityConfig();
  
  private final List<ListenerConfig> listenerConfigs = new LinkedList();
  
  private PartitionGroupConfig partitionGroupConfig = new PartitionGroupConfig();
  
  private ManagementCenterConfig managementCenterConfig = new ManagementCenterConfig();
  
  private SerializationConfig serializationConfig = new SerializationConfig();
  
  private ManagedContext managedContext;
  
  private ConcurrentMap<String, Object> userContext = new ConcurrentHashMap();
  
  private MemberAttributeConfig memberAttributeConfig = new MemberAttributeConfig();
  
  private NativeMemoryConfig nativeMemoryConfig = new NativeMemoryConfig();
  
  private HotRestartPersistenceConfig hotRestartPersistenceConfig = new HotRestartPersistenceConfig();
  
  private UserCodeDeploymentConfig userCodeDeploymentConfig = new UserCodeDeploymentConfig();
  
  private CRDTReplicationConfig crdtReplicationConfig = new CRDTReplicationConfig();
  
  private String licenseKey;
  
  private boolean liteMember;
  
  private CPSubsystemConfig cpSubsystemConfig = new CPSubsystemConfig();
  
  public Config() {}
  
  public Config(String instanceName) { this.instanceName = instanceName; }
  
  public static Config load() {
    xmlConfigLocator = new XmlConfigLocator();
    YamlConfigLocator yamlConfigLocator = new YamlConfigLocator();
    if (yamlConfigLocator.locateFromSystemProperty())
      return (new YamlConfigBuilder(yamlConfigLocator)).build(); 
    if (xmlConfigLocator.locateFromSystemProperty())
      return (new XmlConfigBuilder(xmlConfigLocator)).build(); 
    if (xmlConfigLocator.locateInWorkDirOrOnClasspath())
      return (new XmlConfigBuilder(xmlConfigLocator)).build(); 
    if (yamlConfigLocator.locateInWorkDirOrOnClasspath())
      return (new YamlConfigBuilder(yamlConfigLocator)).build(); 
    xmlConfigLocator.locateDefault();
    return (new XmlConfigBuilder(xmlConfigLocator)).build();
  }
  
  public ClassLoader getClassLoader() { return this.classLoader; }
  
  public Config setClassLoader(ClassLoader classLoader) {
    this.classLoader = classLoader;
    return this;
  }
  
  public ConfigPatternMatcher getConfigPatternMatcher() { return this.configPatternMatcher; }
  
  public void setConfigPatternMatcher(ConfigPatternMatcher configPatternMatcher) {
    if (configPatternMatcher == null)
      throw new IllegalArgumentException("ConfigPatternMatcher is not allowed to be null!"); 
    this.configPatternMatcher = configPatternMatcher;
  }
  
  public String getProperty(String name) {
    String value = this.properties.getProperty(name);
    return (value != null) ? value : System.getProperty(name);
  }
  
  public Config setProperty(String name, String value) {
    this.properties.put(name, value);
    return this;
  }
  
  public MemberAttributeConfig getMemberAttributeConfig() { return this.memberAttributeConfig; }
  
  public void setMemberAttributeConfig(MemberAttributeConfig memberAttributeConfig) { this.memberAttributeConfig = memberAttributeConfig; }
  
  public Properties getProperties() { return this.properties; }
  
  public Config setProperties(Properties properties) {
    this.properties = properties;
    return this;
  }
  
  public String getInstanceName() { return this.instanceName; }
  
  public Config setInstanceName(String instanceName) {
    this.instanceName = instanceName;
    return this;
  }
  
  public GroupConfig getGroupConfig() { return this.groupConfig; }
  
  public Config setGroupConfig(GroupConfig groupConfig) {
    this.groupConfig = groupConfig;
    return this;
  }
  
  public NetworkConfig getNetworkConfig() { return this.networkConfig; }
  
  public Config setNetworkConfig(NetworkConfig networkConfig) {
    this.networkConfig = networkConfig;
    return this;
  }
  
  public MapConfig findMapConfig(String name) {
    name = StringPartitioningStrategy.getBaseName(name);
    MapConfig config = (MapConfig)ConfigUtils.lookupByPattern(this.configPatternMatcher, this.mapConfigs, name);
    if (config != null)
      return config.getAsReadOnly(); 
    return getMapConfig("default").getAsReadOnly();
  }
  
  public MapConfig getMapConfigOrNull(String name) {
    name = StringPartitioningStrategy.getBaseName(name);
    return (MapConfig)ConfigUtils.lookupByPattern(this.configPatternMatcher, this.mapConfigs, name);
  }
  
  public MapConfig getMapConfig(String name) { return (MapConfig)ConfigUtils.getConfig(this.configPatternMatcher, this.mapConfigs, name, MapConfig.class); }
  
  public Config addMapConfig(MapConfig mapConfig) {
    this.mapConfigs.put(mapConfig.getName(), mapConfig);
    return this;
  }
  
  public Map<String, MapConfig> getMapConfigs() { return this.mapConfigs; }
  
  public Config setMapConfigs(Map<String, MapConfig> mapConfigs) {
    this.mapConfigs.clear();
    this.mapConfigs.putAll(mapConfigs);
    for (Map.Entry<String, MapConfig> entry : this.mapConfigs.entrySet())
      ((MapConfig)entry.getValue()).setName((String)entry.getKey()); 
    return this;
  }
  
  public CacheSimpleConfig findCacheConfig(String name) {
    name = StringPartitioningStrategy.getBaseName(name);
    CacheSimpleConfig config = (CacheSimpleConfig)ConfigUtils.lookupByPattern(this.configPatternMatcher, this.cacheConfigs, name);
    if (config != null)
      return config.getAsReadOnly(); 
    return getCacheConfig("default").getAsReadOnly();
  }
  
  public CacheSimpleConfig findCacheConfigOrNull(String name) {
    name = StringPartitioningStrategy.getBaseName(name);
    return (CacheSimpleConfig)ConfigUtils.lookupByPattern(this.configPatternMatcher, this.cacheConfigs, name);
  }
  
  public CacheSimpleConfig getCacheConfig(String name) { return (CacheSimpleConfig)ConfigUtils.getConfig(this.configPatternMatcher, this.cacheConfigs, name, CacheSimpleConfig.class); }
  
  public Config addCacheConfig(CacheSimpleConfig cacheConfig) {
    this.cacheConfigs.put(cacheConfig.getName(), cacheConfig);
    return this;
  }
  
  public Map<String, CacheSimpleConfig> getCacheConfigs() { return this.cacheConfigs; }
  
  public Config setCacheConfigs(Map<String, CacheSimpleConfig> cacheConfigs) {
    this.cacheConfigs.clear();
    this.cacheConfigs.putAll(cacheConfigs);
    for (Map.Entry<String, CacheSimpleConfig> entry : this.cacheConfigs.entrySet())
      ((CacheSimpleConfig)entry.getValue()).setName((String)entry.getKey()); 
    return this;
  }
  
  public QueueConfig findQueueConfig(String name) {
    name = StringPartitioningStrategy.getBaseName(name);
    QueueConfig config = (QueueConfig)ConfigUtils.lookupByPattern(this.configPatternMatcher, this.queueConfigs, name);
    if (config != null)
      return config.getAsReadOnly(); 
    return getQueueConfig("default").getAsReadOnly();
  }
  
  public QueueConfig getQueueConfig(String name) { return (QueueConfig)ConfigUtils.getConfig(this.configPatternMatcher, this.queueConfigs, name, QueueConfig.class); }
  
  public Config addQueueConfig(QueueConfig queueConfig) {
    this.queueConfigs.put(queueConfig.getName(), queueConfig);
    return this;
  }
  
  public Map<String, QueueConfig> getQueueConfigs() { return this.queueConfigs; }
  
  public Config setQueueConfigs(Map<String, QueueConfig> queueConfigs) {
    this.queueConfigs.clear();
    this.queueConfigs.putAll(queueConfigs);
    for (Map.Entry<String, QueueConfig> entry : queueConfigs.entrySet())
      ((QueueConfig)entry.getValue()).setName((String)entry.getKey()); 
    return this;
  }
  
  public LockConfig findLockConfig(String name) {
    name = StringPartitioningStrategy.getBaseName(name);
    LockConfig config = (LockConfig)ConfigUtils.lookupByPattern(this.configPatternMatcher, this.lockConfigs, name);
    if (config != null)
      return config.getAsReadOnly(); 
    return getLockConfig("default").getAsReadOnly();
  }
  
  public LockConfig getLockConfig(String name) { return (LockConfig)ConfigUtils.getConfig(this.configPatternMatcher, this.lockConfigs, name, LockConfig.class); }
  
  public Config addLockConfig(LockConfig lockConfig) {
    this.lockConfigs.put(lockConfig.getName(), lockConfig);
    return this;
  }
  
  public Map<String, LockConfig> getLockConfigs() { return this.lockConfigs; }
  
  public Config setLockConfigs(Map<String, LockConfig> lockConfigs) {
    this.lockConfigs.clear();
    this.lockConfigs.putAll(lockConfigs);
    for (Map.Entry<String, LockConfig> entry : lockConfigs.entrySet())
      ((LockConfig)entry.getValue()).setName((String)entry.getKey()); 
    return this;
  }
  
  public ListConfig findListConfig(String name) {
    name = StringPartitioningStrategy.getBaseName(name);
    ListConfig config = (ListConfig)ConfigUtils.lookupByPattern(this.configPatternMatcher, this.listConfigs, name);
    if (config != null)
      return config.getAsReadOnly(); 
    return getListConfig("default").getAsReadOnly();
  }
  
  public ListConfig getListConfig(String name) { return (ListConfig)ConfigUtils.getConfig(this.configPatternMatcher, this.listConfigs, name, ListConfig.class); }
  
  public Config addListConfig(ListConfig listConfig) {
    this.listConfigs.put(listConfig.getName(), listConfig);
    return this;
  }
  
  public Map<String, ListConfig> getListConfigs() { return this.listConfigs; }
  
  public Config setListConfigs(Map<String, ListConfig> listConfigs) {
    this.listConfigs.clear();
    this.listConfigs.putAll(listConfigs);
    for (Map.Entry<String, ListConfig> entry : listConfigs.entrySet())
      ((ListConfig)entry.getValue()).setName((String)entry.getKey()); 
    return this;
  }
  
  public SetConfig findSetConfig(String name) {
    name = StringPartitioningStrategy.getBaseName(name);
    SetConfig config = (SetConfig)ConfigUtils.lookupByPattern(this.configPatternMatcher, this.setConfigs, name);
    if (config != null)
      return config.getAsReadOnly(); 
    return getSetConfig("default").getAsReadOnly();
  }
  
  public SetConfig getSetConfig(String name) { return (SetConfig)ConfigUtils.getConfig(this.configPatternMatcher, this.setConfigs, name, SetConfig.class); }
  
  public Config addSetConfig(SetConfig setConfig) {
    this.setConfigs.put(setConfig.getName(), setConfig);
    return this;
  }
  
  public Map<String, SetConfig> getSetConfigs() { return this.setConfigs; }
  
  public Config setSetConfigs(Map<String, SetConfig> setConfigs) {
    this.setConfigs.clear();
    this.setConfigs.putAll(setConfigs);
    for (Map.Entry<String, SetConfig> entry : setConfigs.entrySet())
      ((SetConfig)entry.getValue()).setName((String)entry.getKey()); 
    return this;
  }
  
  public MultiMapConfig findMultiMapConfig(String name) {
    name = StringPartitioningStrategy.getBaseName(name);
    MultiMapConfig config = (MultiMapConfig)ConfigUtils.lookupByPattern(this.configPatternMatcher, this.multiMapConfigs, name);
    if (config != null)
      return config.getAsReadOnly(); 
    return getMultiMapConfig("default").getAsReadOnly();
  }
  
  public MultiMapConfig getMultiMapConfig(String name) { return (MultiMapConfig)ConfigUtils.getConfig(this.configPatternMatcher, this.multiMapConfigs, name, MultiMapConfig.class); }
  
  public Config addMultiMapConfig(MultiMapConfig multiMapConfig) {
    this.multiMapConfigs.put(multiMapConfig.getName(), multiMapConfig);
    return this;
  }
  
  public Map<String, MultiMapConfig> getMultiMapConfigs() { return this.multiMapConfigs; }
  
  public Config setMultiMapConfigs(Map<String, MultiMapConfig> multiMapConfigs) {
    this.multiMapConfigs.clear();
    this.multiMapConfigs.putAll(multiMapConfigs);
    for (Map.Entry<String, MultiMapConfig> entry : this.multiMapConfigs.entrySet())
      ((MultiMapConfig)entry.getValue()).setName((String)entry.getKey()); 
    return this;
  }
  
  public ReplicatedMapConfig findReplicatedMapConfig(String name) {
    name = StringPartitioningStrategy.getBaseName(name);
    ReplicatedMapConfig config = (ReplicatedMapConfig)ConfigUtils.lookupByPattern(this.configPatternMatcher, this.replicatedMapConfigs, name);
    if (config != null)
      return config.getAsReadOnly(); 
    return getReplicatedMapConfig("default").getAsReadOnly();
  }
  
  public ReplicatedMapConfig getReplicatedMapConfig(String name) { return (ReplicatedMapConfig)ConfigUtils.getConfig(this.configPatternMatcher, this.replicatedMapConfigs, name, ReplicatedMapConfig.class); }
  
  public Config addReplicatedMapConfig(ReplicatedMapConfig replicatedMapConfig) {
    this.replicatedMapConfigs.put(replicatedMapConfig.getName(), replicatedMapConfig);
    return this;
  }
  
  public Map<String, ReplicatedMapConfig> getReplicatedMapConfigs() { return this.replicatedMapConfigs; }
  
  public Config setReplicatedMapConfigs(Map<String, ReplicatedMapConfig> replicatedMapConfigs) {
    this.replicatedMapConfigs.clear();
    this.replicatedMapConfigs.putAll(replicatedMapConfigs);
    for (Map.Entry<String, ReplicatedMapConfig> entry : this.replicatedMapConfigs.entrySet())
      ((ReplicatedMapConfig)entry.getValue()).setName((String)entry.getKey()); 
    return this;
  }
  
  public RingbufferConfig findRingbufferConfig(String name) {
    name = StringPartitioningStrategy.getBaseName(name);
    RingbufferConfig config = (RingbufferConfig)ConfigUtils.lookupByPattern(this.configPatternMatcher, this.ringbufferConfigs, name);
    if (config != null)
      return config.getAsReadOnly(); 
    return getRingbufferConfig("default").getAsReadOnly();
  }
  
  public RingbufferConfig getRingbufferConfig(String name) { return (RingbufferConfig)ConfigUtils.getConfig(this.configPatternMatcher, this.ringbufferConfigs, name, RingbufferConfig.class); }
  
  public Config addRingBufferConfig(RingbufferConfig ringbufferConfig) {
    this.ringbufferConfigs.put(ringbufferConfig.getName(), ringbufferConfig);
    return this;
  }
  
  public Map<String, RingbufferConfig> getRingbufferConfigs() { return this.ringbufferConfigs; }
  
  public Config setRingbufferConfigs(Map<String, RingbufferConfig> ringbufferConfigs) {
    this.ringbufferConfigs.clear();
    this.ringbufferConfigs.putAll(ringbufferConfigs);
    for (Map.Entry<String, RingbufferConfig> entry : ringbufferConfigs.entrySet())
      ((RingbufferConfig)entry.getValue()).setName((String)entry.getKey()); 
    return this;
  }
  
  public AtomicLongConfig findAtomicLongConfig(String name) {
    name = StringPartitioningStrategy.getBaseName(name);
    AtomicLongConfig config = (AtomicLongConfig)ConfigUtils.lookupByPattern(this.configPatternMatcher, this.atomicLongConfigs, name);
    if (config != null)
      return config.getAsReadOnly(); 
    return getAtomicLongConfig("default").getAsReadOnly();
  }
  
  public AtomicLongConfig getAtomicLongConfig(String name) { return (AtomicLongConfig)ConfigUtils.getConfig(this.configPatternMatcher, this.atomicLongConfigs, name, AtomicLongConfig.class); }
  
  public Config addAtomicLongConfig(AtomicLongConfig atomicLongConfig) {
    this.atomicLongConfigs.put(atomicLongConfig.getName(), atomicLongConfig);
    return this;
  }
  
  public Map<String, AtomicLongConfig> getAtomicLongConfigs() { return this.atomicLongConfigs; }
  
  public Config setAtomicLongConfigs(Map<String, AtomicLongConfig> atomicLongConfigs) {
    this.atomicLongConfigs.clear();
    this.atomicLongConfigs.putAll(atomicLongConfigs);
    for (Map.Entry<String, AtomicLongConfig> entry : atomicLongConfigs.entrySet())
      ((AtomicLongConfig)entry.getValue()).setName((String)entry.getKey()); 
    return this;
  }
  
  public AtomicReferenceConfig findAtomicReferenceConfig(String name) {
    name = StringPartitioningStrategy.getBaseName(name);
    AtomicReferenceConfig config = (AtomicReferenceConfig)ConfigUtils.lookupByPattern(this.configPatternMatcher, this.atomicReferenceConfigs, name);
    if (config != null)
      return config.getAsReadOnly(); 
    return getAtomicReferenceConfig("default").getAsReadOnly();
  }
  
  public AtomicReferenceConfig getAtomicReferenceConfig(String name) { return (AtomicReferenceConfig)ConfigUtils.getConfig(this.configPatternMatcher, this.atomicReferenceConfigs, name, AtomicReferenceConfig.class); }
  
  public Config addAtomicReferenceConfig(AtomicReferenceConfig atomicReferenceConfig) {
    this.atomicReferenceConfigs.put(atomicReferenceConfig.getName(), atomicReferenceConfig);
    return this;
  }
  
  public Map<String, AtomicReferenceConfig> getAtomicReferenceConfigs() { return this.atomicReferenceConfigs; }
  
  public Config setAtomicReferenceConfigs(Map<String, AtomicReferenceConfig> atomicReferenceConfigs) {
    this.atomicReferenceConfigs.clear();
    this.atomicReferenceConfigs.putAll(atomicReferenceConfigs);
    for (Map.Entry<String, AtomicReferenceConfig> entry : atomicReferenceConfigs.entrySet())
      ((AtomicReferenceConfig)entry.getValue()).setName((String)entry.getKey()); 
    return this;
  }
  
  public CountDownLatchConfig findCountDownLatchConfig(String name) {
    name = StringPartitioningStrategy.getBaseName(name);
    CountDownLatchConfig config = (CountDownLatchConfig)ConfigUtils.lookupByPattern(this.configPatternMatcher, this.countDownLatchConfigs, name);
    if (config != null)
      return config.getAsReadOnly(); 
    return getCountDownLatchConfig("default").getAsReadOnly();
  }
  
  public CountDownLatchConfig getCountDownLatchConfig(String name) { return (CountDownLatchConfig)ConfigUtils.getConfig(this.configPatternMatcher, this.countDownLatchConfigs, name, CountDownLatchConfig.class); }
  
  public Config addCountDownLatchConfig(CountDownLatchConfig countDownLatchConfig) {
    this.countDownLatchConfigs.put(countDownLatchConfig.getName(), countDownLatchConfig);
    return this;
  }
  
  public Map<String, CountDownLatchConfig> getCountDownLatchConfigs() { return this.countDownLatchConfigs; }
  
  public Config setCountDownLatchConfigs(Map<String, CountDownLatchConfig> countDownLatchConfigs) {
    this.countDownLatchConfigs.clear();
    this.countDownLatchConfigs.putAll(countDownLatchConfigs);
    for (Map.Entry<String, CountDownLatchConfig> entry : countDownLatchConfigs.entrySet())
      ((CountDownLatchConfig)entry.getValue()).setName((String)entry.getKey()); 
    return this;
  }
  
  public TopicConfig findTopicConfig(String name) {
    name = StringPartitioningStrategy.getBaseName(name);
    TopicConfig config = (TopicConfig)ConfigUtils.lookupByPattern(this.configPatternMatcher, this.topicConfigs, name);
    if (config != null)
      return config.getAsReadOnly(); 
    return getTopicConfig("default").getAsReadOnly();
  }
  
  public TopicConfig getTopicConfig(String name) { return (TopicConfig)ConfigUtils.getConfig(this.configPatternMatcher, this.topicConfigs, name, TopicConfig.class); }
  
  public Config addTopicConfig(TopicConfig topicConfig) {
    this.topicConfigs.put(topicConfig.getName(), topicConfig);
    return this;
  }
  
  public ReliableTopicConfig findReliableTopicConfig(String name) {
    name = StringPartitioningStrategy.getBaseName(name);
    ReliableTopicConfig config = (ReliableTopicConfig)ConfigUtils.lookupByPattern(this.configPatternMatcher, this.reliableTopicConfigs, name);
    if (config != null)
      return config.getAsReadOnly(); 
    return getReliableTopicConfig("default").getAsReadOnly();
  }
  
  public ReliableTopicConfig getReliableTopicConfig(String name) { return (ReliableTopicConfig)ConfigUtils.getConfig(this.configPatternMatcher, this.reliableTopicConfigs, name, ReliableTopicConfig.class); }
  
  public Map<String, ReliableTopicConfig> getReliableTopicConfigs() { return this.reliableTopicConfigs; }
  
  public Config addReliableTopicConfig(ReliableTopicConfig topicConfig) {
    this.reliableTopicConfigs.put(topicConfig.getName(), topicConfig);
    return this;
  }
  
  public Config setReliableTopicConfigs(Map<String, ReliableTopicConfig> reliableTopicConfigs) {
    this.reliableTopicConfigs.clear();
    this.reliableTopicConfigs.putAll(reliableTopicConfigs);
    for (Map.Entry<String, ReliableTopicConfig> entry : reliableTopicConfigs.entrySet())
      ((ReliableTopicConfig)entry.getValue()).setName((String)entry.getKey()); 
    return this;
  }
  
  public Map<String, TopicConfig> getTopicConfigs() { return this.topicConfigs; }
  
  public Config setTopicConfigs(Map<String, TopicConfig> topicConfigs) {
    this.topicConfigs.clear();
    this.topicConfigs.putAll(topicConfigs);
    for (Map.Entry<String, TopicConfig> entry : this.topicConfigs.entrySet())
      ((TopicConfig)entry.getValue()).setName((String)entry.getKey()); 
    return this;
  }
  
  public ExecutorConfig findExecutorConfig(String name) {
    name = StringPartitioningStrategy.getBaseName(name);
    ExecutorConfig config = (ExecutorConfig)ConfigUtils.lookupByPattern(this.configPatternMatcher, this.executorConfigs, name);
    if (config != null)
      return config.getAsReadOnly(); 
    return getExecutorConfig("default").getAsReadOnly();
  }
  
  public DurableExecutorConfig findDurableExecutorConfig(String name) {
    name = StringPartitioningStrategy.getBaseName(name);
    DurableExecutorConfig config = (DurableExecutorConfig)ConfigUtils.lookupByPattern(this.configPatternMatcher, this.durableExecutorConfigs, name);
    if (config != null)
      return config.getAsReadOnly(); 
    return getDurableExecutorConfig("default").getAsReadOnly();
  }
  
  public ScheduledExecutorConfig findScheduledExecutorConfig(String name) {
    name = StringPartitioningStrategy.getBaseName(name);
    ScheduledExecutorConfig config = (ScheduledExecutorConfig)ConfigUtils.lookupByPattern(this.configPatternMatcher, this.scheduledExecutorConfigs, name);
    if (config != null)
      return config.getAsReadOnly(); 
    return getScheduledExecutorConfig("default").getAsReadOnly();
  }
  
  public CardinalityEstimatorConfig findCardinalityEstimatorConfig(String name) {
    name = StringPartitioningStrategy.getBaseName(name);
    CardinalityEstimatorConfig config = (CardinalityEstimatorConfig)ConfigUtils.lookupByPattern(this.configPatternMatcher, this.cardinalityEstimatorConfigs, name);
    if (config != null)
      return config.getAsReadOnly(); 
    return getCardinalityEstimatorConfig("default").getAsReadOnly();
  }
  
  public PNCounterConfig findPNCounterConfig(String name) {
    name = StringPartitioningStrategy.getBaseName(name);
    PNCounterConfig config = (PNCounterConfig)ConfigUtils.lookupByPattern(this.configPatternMatcher, this.pnCounterConfigs, name);
    if (config != null)
      return config.getAsReadOnly(); 
    return getPNCounterConfig("default").getAsReadOnly();
  }
  
  public ExecutorConfig getExecutorConfig(String name) { return (ExecutorConfig)ConfigUtils.getConfig(this.configPatternMatcher, this.executorConfigs, name, ExecutorConfig.class); }
  
  public DurableExecutorConfig getDurableExecutorConfig(String name) { return (DurableExecutorConfig)ConfigUtils.getConfig(this.configPatternMatcher, this.durableExecutorConfigs, name, DurableExecutorConfig.class); }
  
  public ScheduledExecutorConfig getScheduledExecutorConfig(String name) { return (ScheduledExecutorConfig)ConfigUtils.getConfig(this.configPatternMatcher, this.scheduledExecutorConfigs, name, ScheduledExecutorConfig.class); }
  
  public CardinalityEstimatorConfig getCardinalityEstimatorConfig(String name) { return (CardinalityEstimatorConfig)ConfigUtils.getConfig(this.configPatternMatcher, this.cardinalityEstimatorConfigs, name, CardinalityEstimatorConfig.class); }
  
  public PNCounterConfig getPNCounterConfig(String name) { return (PNCounterConfig)ConfigUtils.getConfig(this.configPatternMatcher, this.pnCounterConfigs, name, PNCounterConfig.class); }
  
  public Config addExecutorConfig(ExecutorConfig executorConfig) {
    this.executorConfigs.put(executorConfig.getName(), executorConfig);
    return this;
  }
  
  public Config addDurableExecutorConfig(DurableExecutorConfig durableExecutorConfig) {
    this.durableExecutorConfigs.put(durableExecutorConfig.getName(), durableExecutorConfig);
    return this;
  }
  
  public Config addScheduledExecutorConfig(ScheduledExecutorConfig scheduledExecutorConfig) {
    this.scheduledExecutorConfigs.put(scheduledExecutorConfig.getName(), scheduledExecutorConfig);
    return this;
  }
  
  public Config addCardinalityEstimatorConfig(CardinalityEstimatorConfig cardinalityEstimatorConfig) {
    this.cardinalityEstimatorConfigs.put(cardinalityEstimatorConfig.getName(), cardinalityEstimatorConfig);
    return this;
  }
  
  public Config addPNCounterConfig(PNCounterConfig pnCounterConfig) {
    this.pnCounterConfigs.put(pnCounterConfig.getName(), pnCounterConfig);
    return this;
  }
  
  public Map<String, ExecutorConfig> getExecutorConfigs() { return this.executorConfigs; }
  
  public Config setExecutorConfigs(Map<String, ExecutorConfig> executorConfigs) {
    this.executorConfigs.clear();
    this.executorConfigs.putAll(executorConfigs);
    for (Map.Entry<String, ExecutorConfig> entry : executorConfigs.entrySet())
      ((ExecutorConfig)entry.getValue()).setName((String)entry.getKey()); 
    return this;
  }
  
  public Map<String, DurableExecutorConfig> getDurableExecutorConfigs() { return this.durableExecutorConfigs; }
  
  public Config setDurableExecutorConfigs(Map<String, DurableExecutorConfig> durableExecutorConfigs) {
    this.durableExecutorConfigs.clear();
    this.durableExecutorConfigs.putAll(durableExecutorConfigs);
    for (Map.Entry<String, DurableExecutorConfig> entry : durableExecutorConfigs.entrySet())
      ((DurableExecutorConfig)entry.getValue()).setName((String)entry.getKey()); 
    return this;
  }
  
  public Map<String, ScheduledExecutorConfig> getScheduledExecutorConfigs() { return this.scheduledExecutorConfigs; }
  
  public Config setScheduledExecutorConfigs(Map<String, ScheduledExecutorConfig> scheduledExecutorConfigs) {
    this.scheduledExecutorConfigs.clear();
    this.scheduledExecutorConfigs.putAll(scheduledExecutorConfigs);
    for (Map.Entry<String, ScheduledExecutorConfig> entry : scheduledExecutorConfigs.entrySet())
      ((ScheduledExecutorConfig)entry.getValue()).setName((String)entry.getKey()); 
    return this;
  }
  
  public Map<String, CardinalityEstimatorConfig> getCardinalityEstimatorConfigs() { return this.cardinalityEstimatorConfigs; }
  
  public Config setCardinalityEstimatorConfigs(Map<String, CardinalityEstimatorConfig> cardinalityEstimatorConfigs) {
    this.cardinalityEstimatorConfigs.clear();
    this.cardinalityEstimatorConfigs.putAll(cardinalityEstimatorConfigs);
    for (Map.Entry<String, CardinalityEstimatorConfig> entry : cardinalityEstimatorConfigs.entrySet())
      ((CardinalityEstimatorConfig)entry.getValue()).setName((String)entry.getKey()); 
    return this;
  }
  
  public Map<String, PNCounterConfig> getPNCounterConfigs() { return this.pnCounterConfigs; }
  
  public Config setPNCounterConfigs(Map<String, PNCounterConfig> pnCounterConfigs) {
    this.pnCounterConfigs.clear();
    this.pnCounterConfigs.putAll(pnCounterConfigs);
    for (Map.Entry<String, PNCounterConfig> entry : pnCounterConfigs.entrySet())
      ((PNCounterConfig)entry.getValue()).setName((String)entry.getKey()); 
    return this;
  }
  
  public SemaphoreConfig findSemaphoreConfig(String name) {
    name = StringPartitioningStrategy.getBaseName(name);
    SemaphoreConfig config = (SemaphoreConfig)ConfigUtils.lookupByPattern(this.configPatternMatcher, this.semaphoreConfigs, name);
    if (config != null)
      return config.getAsReadOnly(); 
    return getSemaphoreConfig("default").getAsReadOnly();
  }
  
  public SemaphoreConfig getSemaphoreConfig(String name) { return (SemaphoreConfig)ConfigUtils.getConfig(this.configPatternMatcher, this.semaphoreConfigs, name, SemaphoreConfig.class); }
  
  public Config addSemaphoreConfig(SemaphoreConfig semaphoreConfig) {
    this.semaphoreConfigs.put(semaphoreConfig.getName(), semaphoreConfig);
    return this;
  }
  
  public Collection<SemaphoreConfig> getSemaphoreConfigs() { return this.semaphoreConfigs.values(); }
  
  public Map<String, SemaphoreConfig> getSemaphoreConfigsAsMap() { return this.semaphoreConfigs; }
  
  public Config setSemaphoreConfigs(Map<String, SemaphoreConfig> semaphoreConfigs) {
    this.semaphoreConfigs.clear();
    this.semaphoreConfigs.putAll(semaphoreConfigs);
    for (Map.Entry<String, SemaphoreConfig> entry : this.semaphoreConfigs.entrySet())
      ((SemaphoreConfig)entry.getValue()).setName((String)entry.getKey()); 
    return this;
  }
  
  public WanReplicationConfig getWanReplicationConfig(String name) { return (WanReplicationConfig)this.wanReplicationConfigs.get(name); }
  
  public Config addWanReplicationConfig(WanReplicationConfig wanReplicationConfig) {
    this.wanReplicationConfigs.put(wanReplicationConfig.getName(), wanReplicationConfig);
    return this;
  }
  
  public Map<String, WanReplicationConfig> getWanReplicationConfigs() { return this.wanReplicationConfigs; }
  
  public Config setWanReplicationConfigs(Map<String, WanReplicationConfig> wanReplicationConfigs) {
    this.wanReplicationConfigs.clear();
    this.wanReplicationConfigs.putAll(wanReplicationConfigs);
    for (Map.Entry<String, WanReplicationConfig> entry : this.wanReplicationConfigs.entrySet())
      ((WanReplicationConfig)entry.getValue()).setName((String)entry.getKey()); 
    return this;
  }
  
  public JobTrackerConfig findJobTrackerConfig(String name) {
    name = StringPartitioningStrategy.getBaseName(name);
    JobTrackerConfig config = (JobTrackerConfig)ConfigUtils.lookupByPattern(this.configPatternMatcher, this.jobTrackerConfigs, name);
    if (config != null)
      return config.getAsReadOnly(); 
    return getJobTrackerConfig("default").getAsReadOnly();
  }
  
  public JobTrackerConfig getJobTrackerConfig(String name) { return (JobTrackerConfig)ConfigUtils.getConfig(this.configPatternMatcher, this.jobTrackerConfigs, name, JobTrackerConfig.class); }
  
  public Config addJobTrackerConfig(JobTrackerConfig jobTrackerConfig) {
    this.jobTrackerConfigs.put(jobTrackerConfig.getName(), jobTrackerConfig);
    return this;
  }
  
  public Map<String, JobTrackerConfig> getJobTrackerConfigs() { return this.jobTrackerConfigs; }
  
  public Config setJobTrackerConfigs(Map<String, JobTrackerConfig> jobTrackerConfigs) {
    this.jobTrackerConfigs.clear();
    this.jobTrackerConfigs.putAll(jobTrackerConfigs);
    for (Map.Entry<String, JobTrackerConfig> entry : this.jobTrackerConfigs.entrySet())
      ((JobTrackerConfig)entry.getValue()).setName((String)entry.getKey()); 
    return this;
  }
  
  public Map<String, QuorumConfig> getQuorumConfigs() { return this.quorumConfigs; }
  
  public QuorumConfig getQuorumConfig(String name) { return (QuorumConfig)ConfigUtils.getConfig(this.configPatternMatcher, this.quorumConfigs, name, QuorumConfig.class); }
  
  public QuorumConfig findQuorumConfig(String name) {
    name = StringPartitioningStrategy.getBaseName(name);
    QuorumConfig config = (QuorumConfig)ConfigUtils.lookupByPattern(this.configPatternMatcher, this.quorumConfigs, name);
    if (config != null)
      return config; 
    return getQuorumConfig("default");
  }
  
  public Config setQuorumConfigs(Map<String, QuorumConfig> quorumConfigs) {
    this.quorumConfigs.clear();
    this.quorumConfigs.putAll(quorumConfigs);
    for (Map.Entry<String, QuorumConfig> entry : this.quorumConfigs.entrySet())
      ((QuorumConfig)entry.getValue()).setName((String)entry.getKey()); 
    return this;
  }
  
  public Config addQuorumConfig(QuorumConfig quorumConfig) {
    this.quorumConfigs.put(quorumConfig.getName(), quorumConfig);
    return this;
  }
  
  public ManagementCenterConfig getManagementCenterConfig() { return this.managementCenterConfig; }
  
  public Config setManagementCenterConfig(ManagementCenterConfig managementCenterConfig) {
    this.managementCenterConfig = managementCenterConfig;
    return this;
  }
  
  public ServicesConfig getServicesConfig() { return this.servicesConfig; }
  
  public Config setServicesConfig(ServicesConfig servicesConfig) {
    this.servicesConfig = servicesConfig;
    return this;
  }
  
  public SecurityConfig getSecurityConfig() { return this.securityConfig; }
  
  public Config setSecurityConfig(SecurityConfig securityConfig) {
    this.securityConfig = securityConfig;
    return this;
  }
  
  public Config addListenerConfig(ListenerConfig listenerConfig) {
    getListenerConfigs().add(listenerConfig);
    return this;
  }
  
  public List<ListenerConfig> getListenerConfigs() { return this.listenerConfigs; }
  
  public Config setListenerConfigs(List<ListenerConfig> listenerConfigs) {
    this.listenerConfigs.clear();
    this.listenerConfigs.addAll(listenerConfigs);
    return this;
  }
  
  public EventJournalConfig findMapEventJournalConfig(String name) {
    name = StringPartitioningStrategy.getBaseName(name);
    EventJournalConfig config = (EventJournalConfig)ConfigUtils.lookupByPattern(this.configPatternMatcher, this.mapEventJournalConfigs, name);
    if (config != null)
      return config.getAsReadOnly(); 
    return getMapEventJournalConfig("default").getAsReadOnly();
  }
  
  public EventJournalConfig findCacheEventJournalConfig(String name) {
    name = StringPartitioningStrategy.getBaseName(name);
    EventJournalConfig config = (EventJournalConfig)ConfigUtils.lookupByPattern(this.configPatternMatcher, this.cacheEventJournalConfigs, name);
    if (config != null)
      return config.getAsReadOnly(); 
    return getCacheEventJournalConfig("default").getAsReadOnly();
  }
  
  public EventJournalConfig getMapEventJournalConfig(String name) { return (EventJournalConfig)ConfigUtils.getConfig(this.configPatternMatcher, this.mapEventJournalConfigs, name, EventJournalConfig.class, new Object(this)); }
  
  public EventJournalConfig getCacheEventJournalConfig(String name) { return (EventJournalConfig)ConfigUtils.getConfig(this.configPatternMatcher, this.cacheEventJournalConfigs, name, EventJournalConfig.class, new Object(this)); }
  
  public Config addEventJournalConfig(EventJournalConfig eventJournalConfig) {
    String mapName = eventJournalConfig.getMapName();
    String cacheName = eventJournalConfig.getCacheName();
    if (StringUtil.isNullOrEmpty(mapName) && StringUtil.isNullOrEmpty(cacheName))
      throw new IllegalArgumentException("Event journal config should have either map name or cache name non-empty"); 
    if (!StringUtil.isNullOrEmpty(mapName))
      this.mapEventJournalConfigs.put(mapName, eventJournalConfig); 
    if (!StringUtil.isNullOrEmpty(cacheName))
      this.cacheEventJournalConfigs.put(cacheName, eventJournalConfig); 
    return this;
  }
  
  public MerkleTreeConfig findMapMerkleTreeConfig(String name) {
    name = StringPartitioningStrategy.getBaseName(name);
    MerkleTreeConfig config = (MerkleTreeConfig)ConfigUtils.lookupByPattern(this.configPatternMatcher, this.mapMerkleTreeConfigs, name);
    if (config != null)
      return config.getAsReadOnly(); 
    return getMapMerkleTreeConfig("default").getAsReadOnly();
  }
  
  public MerkleTreeConfig getMapMerkleTreeConfig(String name) { return (MerkleTreeConfig)ConfigUtils.getConfig(this.configPatternMatcher, this.mapMerkleTreeConfigs, name, MerkleTreeConfig.class, new Object(this)); }
  
  public Config addMerkleTreeConfig(MerkleTreeConfig merkleTreeConfig) {
    String mapName = merkleTreeConfig.getMapName();
    if (StringUtil.isNullOrEmpty(mapName))
      throw new IllegalArgumentException("Merkle tree config must define a map name"); 
    this.mapMerkleTreeConfigs.put(mapName, merkleTreeConfig);
    return this;
  }
  
  public Map<String, FlakeIdGeneratorConfig> getFlakeIdGeneratorConfigs() { return this.flakeIdGeneratorConfigMap; }
  
  public FlakeIdGeneratorConfig findFlakeIdGeneratorConfig(String name) {
    String baseName = StringPartitioningStrategy.getBaseName(name);
    FlakeIdGeneratorConfig config = (FlakeIdGeneratorConfig)ConfigUtils.lookupByPattern(this.configPatternMatcher, this.flakeIdGeneratorConfigMap, baseName);
    if (config != null)
      return config; 
    return getFlakeIdGeneratorConfig("default");
  }
  
  public FlakeIdGeneratorConfig getFlakeIdGeneratorConfig(String name) { return (FlakeIdGeneratorConfig)ConfigUtils.getConfig(this.configPatternMatcher, this.flakeIdGeneratorConfigMap, name, FlakeIdGeneratorConfig.class, new Object(this)); }
  
  public Config addFlakeIdGeneratorConfig(FlakeIdGeneratorConfig config) {
    this.flakeIdGeneratorConfigMap.put(config.getName(), config);
    return this;
  }
  
  public Config setFlakeIdGeneratorConfigs(Map<String, FlakeIdGeneratorConfig> map) {
    this.flakeIdGeneratorConfigMap.clear();
    this.flakeIdGeneratorConfigMap.putAll(map);
    for (Map.Entry<String, FlakeIdGeneratorConfig> entry : map.entrySet())
      ((FlakeIdGeneratorConfig)entry.getValue()).setName((String)entry.getKey()); 
    return this;
  }
  
  public Map<String, EventJournalConfig> getMapEventJournalConfigs() { return this.mapEventJournalConfigs; }
  
  public Map<String, EventJournalConfig> getCacheEventJournalConfigs() { return this.cacheEventJournalConfigs; }
  
  public Config setMapEventJournalConfigs(Map<String, EventJournalConfig> eventJournalConfigs) {
    this.mapEventJournalConfigs.clear();
    this.mapEventJournalConfigs.putAll(eventJournalConfigs);
    for (Map.Entry<String, EventJournalConfig> entry : eventJournalConfigs.entrySet())
      ((EventJournalConfig)entry.getValue()).setMapName((String)entry.getKey()); 
    return this;
  }
  
  public Config setCacheEventJournalConfigs(Map<String, EventJournalConfig> eventJournalConfigs) {
    this.cacheEventJournalConfigs.clear();
    this.cacheEventJournalConfigs.putAll(eventJournalConfigs);
    for (Map.Entry<String, EventJournalConfig> entry : eventJournalConfigs.entrySet())
      ((EventJournalConfig)entry.getValue()).setCacheName((String)entry.getKey()); 
    return this;
  }
  
  public Map<String, MerkleTreeConfig> getMapMerkleTreeConfigs() { return this.mapMerkleTreeConfigs; }
  
  public Config setMapMerkleTreeConfigs(Map<String, MerkleTreeConfig> merkleTreeConfigs) {
    this.mapMerkleTreeConfigs.clear();
    this.mapMerkleTreeConfigs.putAll(merkleTreeConfigs);
    for (Map.Entry<String, MerkleTreeConfig> entry : merkleTreeConfigs.entrySet())
      ((MerkleTreeConfig)entry.getValue()).setMapName((String)entry.getKey()); 
    return this;
  }
  
  public SerializationConfig getSerializationConfig() { return this.serializationConfig; }
  
  public Config setSerializationConfig(SerializationConfig serializationConfig) {
    this.serializationConfig = serializationConfig;
    return this;
  }
  
  public PartitionGroupConfig getPartitionGroupConfig() { return this.partitionGroupConfig; }
  
  public Config setPartitionGroupConfig(PartitionGroupConfig partitionGroupConfig) {
    this.partitionGroupConfig = partitionGroupConfig;
    return this;
  }
  
  public HotRestartPersistenceConfig getHotRestartPersistenceConfig() { return this.hotRestartPersistenceConfig; }
  
  public Config setHotRestartPersistenceConfig(HotRestartPersistenceConfig hrConfig) {
    Preconditions.checkNotNull(hrConfig, "Hot restart config cannot be null!");
    this.hotRestartPersistenceConfig = hrConfig;
    return this;
  }
  
  public CRDTReplicationConfig getCRDTReplicationConfig() { return this.crdtReplicationConfig; }
  
  public Config setCRDTReplicationConfig(CRDTReplicationConfig crdtReplicationConfig) {
    Preconditions.checkNotNull(crdtReplicationConfig, "The CRDT replication config cannot be null!");
    this.crdtReplicationConfig = crdtReplicationConfig;
    return this;
  }
  
  public ManagedContext getManagedContext() { return this.managedContext; }
  
  public Config setManagedContext(ManagedContext managedContext) {
    this.managedContext = managedContext;
    return this;
  }
  
  public ConcurrentMap<String, Object> getUserContext() { return this.userContext; }
  
  public Config setUserContext(ConcurrentMap<String, Object> userContext) {
    if (userContext == null)
      throw new IllegalArgumentException("userContext can't be null"); 
    this.userContext = userContext;
    return this;
  }
  
  public NativeMemoryConfig getNativeMemoryConfig() { return this.nativeMemoryConfig; }
  
  public Config setNativeMemoryConfig(NativeMemoryConfig nativeMemoryConfig) {
    this.nativeMemoryConfig = nativeMemoryConfig;
    return this;
  }
  
  public URL getConfigurationUrl() { return this.configurationUrl; }
  
  public Config setConfigurationUrl(URL configurationUrl) {
    this.configurationUrl = configurationUrl;
    return this;
  }
  
  public File getConfigurationFile() { return this.configurationFile; }
  
  public Config setConfigurationFile(File configurationFile) {
    this.configurationFile = configurationFile;
    return this;
  }
  
  public String getLicenseKey() {
    SecurityManager sm = System.getSecurityManager();
    if (sm != null)
      sm.checkPermission(new HazelcastRuntimePermission("com.hazelcast.config.Config.getLicenseKey")); 
    return this.licenseKey;
  }
  
  public Config setLicenseKey(String licenseKey) {
    this.licenseKey = licenseKey;
    return this;
  }
  
  public boolean isLiteMember() { return this.liteMember; }
  
  public Config setLiteMember(boolean liteMember) {
    this.liteMember = liteMember;
    return this;
  }
  
  public UserCodeDeploymentConfig getUserCodeDeploymentConfig() { return this.userCodeDeploymentConfig; }
  
  public Config setUserCodeDeploymentConfig(UserCodeDeploymentConfig userCodeDeploymentConfig) {
    this.userCodeDeploymentConfig = userCodeDeploymentConfig;
    return this;
  }
  
  public AdvancedNetworkConfig getAdvancedNetworkConfig() { return this.advancedNetworkConfig; }
  
  public Config setAdvancedNetworkConfig(AdvancedNetworkConfig advancedNetworkConfig) {
    this.advancedNetworkConfig = advancedNetworkConfig;
    return this;
  }
  
  public CPSubsystemConfig getCPSubsystemConfig() { return this.cpSubsystemConfig; }
  
  public Config setCPSubsystemConfig(CPSubsystemConfig cpSubsystemConfig) {
    this.cpSubsystemConfig = cpSubsystemConfig;
    return this;
  }
  
  public String toString() { return "Config{groupConfig=" + this.groupConfig + ", properties=" + this.properties + ", networkConfig=" + this.networkConfig + ", mapConfigs=" + this.mapConfigs + ", topicConfigs=" + this.topicConfigs + ", reliableTopicConfigs=" + this.reliableTopicConfigs + ", queueConfigs=" + this.queueConfigs + ", multiMapConfigs=" + this.multiMapConfigs + ", executorConfigs=" + this.executorConfigs + ", semaphoreConfigs=" + this.semaphoreConfigs + ", countDownLatchConfigs=" + this.countDownLatchConfigs + ", ringbufferConfigs=" + this.ringbufferConfigs + ", atomicLongConfigs=" + this.atomicLongConfigs + ", atomicReferenceConfigs=" + this.atomicReferenceConfigs + ", wanReplicationConfigs=" + this.wanReplicationConfigs + ", listenerConfigs=" + this.listenerConfigs + ", mapEventJournalConfigs=" + this.mapEventJournalConfigs + ", cacheEventJournalConfigs=" + this.cacheEventJournalConfigs + ", partitionGroupConfig=" + this.partitionGroupConfig + ", managementCenterConfig=" + this.managementCenterConfig + ", securityConfig=" + this.securityConfig + ", liteMember=" + this.liteMember + ", crdtReplicationConfig=" + this.crdtReplicationConfig + ", advancedNetworkConfig=" + this.advancedNetworkConfig + ", cpSubsystemConfig=" + this.cpSubsystemConfig + '}'; }
}
