package com.hazelcast.config;

import com.hazelcast.internal.serialization.impl.SerializationUtil;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import com.hazelcast.topic.TopicOverloadPolicy;
import com.hazelcast.util.Preconditions;
import java.io.IOException;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.Executor;

public class ReliableTopicConfig implements IdentifiedDataSerializable, NamedConfig {
  public static final int DEFAULT_READ_BATCH_SIZE = 10;
  
  public static final TopicOverloadPolicy DEFAULT_TOPIC_OVERLOAD_POLICY = TopicOverloadPolicy.BLOCK;
  
  public static final boolean DEFAULT_STATISTICS_ENABLED = true;
  
  private Executor executor;
  
  private int readBatchSize = 10;
  
  private String name;
  
  private boolean statisticsEnabled = true;
  
  private List<ListenerConfig> listenerConfigs = new LinkedList();
  
  private TopicOverloadPolicy topicOverloadPolicy = DEFAULT_TOPIC_OVERLOAD_POLICY;
  
  public ReliableTopicConfig(String name) { this.name = (String)Preconditions.checkNotNull(name, "name"); }
  
  ReliableTopicConfig(ReliableTopicConfig config) {
    this.name = config.name;
    this.statisticsEnabled = config.statisticsEnabled;
    this.readBatchSize = config.readBatchSize;
    this.executor = config.executor;
    this.topicOverloadPolicy = config.topicOverloadPolicy;
    this.listenerConfigs = config.listenerConfigs;
  }
  
  ReliableTopicConfig(ReliableTopicConfig config, String name) {
    this(config);
    this.name = name;
  }
  
  public ReliableTopicConfig setName(String name) {
    this.name = Preconditions.checkHasText(name, "name must contain text");
    return this;
  }
  
  public String getName() { return this.name; }
  
  public TopicOverloadPolicy getTopicOverloadPolicy() { return this.topicOverloadPolicy; }
  
  public ReliableTopicConfig setTopicOverloadPolicy(TopicOverloadPolicy topicOverloadPolicy) {
    this.topicOverloadPolicy = (TopicOverloadPolicy)Preconditions.checkNotNull(topicOverloadPolicy, "topicOverloadPolicy can't be null");
    return this;
  }
  
  public Executor getExecutor() { return this.executor; }
  
  public ReliableTopicConfig setExecutor(Executor executor) {
    this.executor = executor;
    return this;
  }
  
  public int getReadBatchSize() { return this.readBatchSize; }
  
  public ReliableTopicConfig setReadBatchSize(int readBatchSize) {
    this.readBatchSize = Preconditions.checkPositive(readBatchSize, "readBatchSize should be positive");
    return this;
  }
  
  public boolean isStatisticsEnabled() { return this.statisticsEnabled; }
  
  public ReliableTopicConfig setStatisticsEnabled(boolean statisticsEnabled) {
    this.statisticsEnabled = statisticsEnabled;
    return this;
  }
  
  public ReliableTopicConfig setMessageListenerConfigs(List<ListenerConfig> listenerConfigs) {
    this.listenerConfigs = (listenerConfigs != null) ? listenerConfigs : new LinkedList();
    return this;
  }
  
  public List<ListenerConfig> getMessageListenerConfigs() { return this.listenerConfigs; }
  
  public ReliableTopicConfig addMessageListenerConfig(ListenerConfig listenerConfig) {
    Preconditions.checkNotNull(listenerConfig, "listenerConfig can't be null");
    this.listenerConfigs.add(listenerConfig);
    return this;
  }
  
  public String toString() { return "ReliableTopicConfig{name='" + this.name + '\'' + ", topicOverloadPolicy=" + this.topicOverloadPolicy + ", executor=" + this.executor + ", readBatchSize=" + this.readBatchSize + ", statisticsEnabled=" + this.statisticsEnabled + ", listenerConfigs=" + this.listenerConfigs + '}'; }
  
  public ReliableTopicConfig getAsReadOnly() { return new ReliableTopicConfigReadOnly(this); }
  
  public int getFactoryId() { return ConfigDataSerializerHook.F_ID; }
  
  public int getId() { return 23; }
  
  public void writeData(ObjectDataOutput out) throws IOException {
    out.writeObject(this.executor);
    out.writeInt(this.readBatchSize);
    out.writeUTF(this.name);
    out.writeBoolean(this.statisticsEnabled);
    SerializationUtil.writeNullableList(this.listenerConfigs, out);
    out.writeUTF(this.topicOverloadPolicy.name());
  }
  
  public void readData(ObjectDataInput in) throws IOException {
    this.executor = (Executor)in.readObject();
    this.readBatchSize = in.readInt();
    this.name = in.readUTF();
    this.statisticsEnabled = in.readBoolean();
    this.listenerConfigs = SerializationUtil.readNullableList(in);
    this.topicOverloadPolicy = TopicOverloadPolicy.valueOf(in.readUTF());
  }
  
  public final boolean equals(Object o) {
    if (this == o)
      return true; 
    if (!(o instanceof ReliableTopicConfig))
      return false; 
    ReliableTopicConfig that = (ReliableTopicConfig)o;
    if (this.readBatchSize != that.readBatchSize)
      return false; 
    if (this.statisticsEnabled != that.statisticsEnabled)
      return false; 
    if ((this.executor != null) ? !this.executor.equals(that.executor) : (that.executor != null))
      return false; 
    if (!this.name.equals(that.name))
      return false; 
    if ((this.listenerConfigs != null) ? !this.listenerConfigs.equals(that.listenerConfigs) : (that.listenerConfigs != null))
      return false; 
    return (this.topicOverloadPolicy == that.topicOverloadPolicy);
  }
  
  public final int hashCode() {
    result = (this.executor != null) ? this.executor.hashCode() : 0;
    result = 31 * result + this.readBatchSize;
    result = 31 * result + this.name.hashCode();
    result = 31 * result + (this.statisticsEnabled ? 1 : 0);
    result = 31 * result + ((this.listenerConfigs != null) ? this.listenerConfigs.hashCode() : 0);
    return 31 * result + ((this.topicOverloadPolicy != null) ? this.topicOverloadPolicy.hashCode() : 0);
  }
  
  public ReliableTopicConfig() {}
}
