package com.hazelcast.config;

import com.hazelcast.core.ItemListener;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import java.io.IOException;
import java.util.EventListener;

public class ItemListenerConfig extends ListenerConfig {
  private boolean includeValue = true;
  
  private ItemListenerConfigReadOnly readOnly;
  
  public ItemListenerConfig(String className, boolean includeValue) {
    super(className);
    this.includeValue = includeValue;
  }
  
  public ItemListenerConfig(ItemListener implementation, boolean includeValue) {
    super(implementation);
    this.includeValue = includeValue;
  }
  
  public ItemListenerConfig(ItemListenerConfig config) {
    this.includeValue = config.isIncludeValue();
    this.implementation = config.getImplementation();
    this.className = config.getClassName();
  }
  
  public ItemListenerConfigReadOnly getAsReadOnly() {
    if (this.readOnly == null)
      this.readOnly = new ItemListenerConfigReadOnly(this); 
    return this.readOnly;
  }
  
  public ItemListener getImplementation() { return (ItemListener)this.implementation; }
  
  public ItemListenerConfig setImplementation(ItemListener implementation) {
    setImplementation(implementation);
    return this;
  }
  
  public boolean isIncludeValue() { return this.includeValue; }
  
  public ItemListenerConfig setIncludeValue(boolean includeValue) {
    this.includeValue = includeValue;
    return this;
  }
  
  public String toString() { return "ItemListenerConfig{includeValue=" + this.includeValue + '}'; }
  
  public boolean equals(Object o) {
    if (this == o)
      return true; 
    if (o == null || getClass() != o.getClass())
      return false; 
    if (!super.equals(o))
      return false; 
    ItemListenerConfig that = (ItemListenerConfig)o;
    if (this.includeValue != that.includeValue)
      return false; 
    return true;
  }
  
  public int hashCode() {
    result = super.hashCode();
    return 31 * result + (this.includeValue ? 1 : 0);
  }
  
  public int getId() { return 24; }
  
  public void writeData(ObjectDataOutput out) throws IOException {
    super.writeData(out);
    out.writeBoolean(this.includeValue);
  }
  
  public void readData(ObjectDataInput in) throws IOException {
    super.readData(in);
    this.includeValue = in.readBoolean();
  }
  
  public ItemListenerConfig() {}
}
