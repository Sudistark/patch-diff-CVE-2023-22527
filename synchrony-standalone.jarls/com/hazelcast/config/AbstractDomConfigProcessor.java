package com.hazelcast.config;

import com.hazelcast.memory.MemorySize;
import com.hazelcast.memory.MemoryUnit;
import com.hazelcast.util.StringUtil;
import java.nio.ByteOrder;
import java.util.HashSet;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;

public abstract class AbstractDomConfigProcessor implements DomConfigProcessor {
  protected final Set<String> occurrenceSet;
  
  private final boolean domLevel3;
  
  protected AbstractDomConfigProcessor(boolean domLevel3) {
    this.occurrenceSet = new HashSet();
    this.domLevel3 = domLevel3;
  }
  
  protected String getTextContent(Node node) { return DomConfigHelper.getTextContent(node, this.domLevel3); }
  
  protected String getAttribute(Node node, String attName) { return DomConfigHelper.getAttribute(node, attName, this.domLevel3); }
  
  protected void fillProperties(Node node, Map<String, Comparable> properties) { DomConfigHelper.fillProperties(node, properties, this.domLevel3); }
  
  protected void fillProperties(Node node, Properties properties) { DomConfigHelper.fillProperties(node, properties, this.domLevel3); }
  
  protected SocketInterceptorConfig parseSocketInterceptorConfig(Node node) {
    SocketInterceptorConfig socketInterceptorConfig = new SocketInterceptorConfig();
    NamedNodeMap atts = node.getAttributes();
    Node enabledNode = atts.getNamedItem("enabled");
    boolean enabled = (enabledNode != null && DomConfigHelper.getBooleanValue(getTextContent(enabledNode).trim()));
    socketInterceptorConfig.setEnabled(enabled);
    for (Node n : DomConfigHelper.childElements(node)) {
      String nodeName = DomConfigHelper.cleanNodeName(n);
      if ("class-name".equals(nodeName)) {
        socketInterceptorConfig.setClassName(getTextContent(n).trim());
        continue;
      } 
      if ("properties".equals(nodeName))
        fillProperties(n, socketInterceptorConfig.getProperties()); 
    } 
    return socketInterceptorConfig;
  }
  
  protected SerializationConfig parseSerialization(Node node) {
    SerializationConfig serializationConfig = new SerializationConfig();
    for (Node child : DomConfigHelper.childElements(node)) {
      String name = DomConfigHelper.cleanNodeName(child);
      if ("portable-version".equals(name)) {
        String value = getTextContent(child);
        serializationConfig.setPortableVersion(DomConfigHelper.getIntegerValue(name, value));
        continue;
      } 
      if ("check-class-def-errors".equals(name)) {
        String value = getTextContent(child);
        serializationConfig.setCheckClassDefErrors(DomConfigHelper.getBooleanValue(value));
        continue;
      } 
      if ("use-native-byte-order".equals(name)) {
        serializationConfig.setUseNativeByteOrder(DomConfigHelper.getBooleanValue(getTextContent(child)));
        continue;
      } 
      if ("byte-order".equals(name)) {
        String value = getTextContent(child);
        ByteOrder byteOrder = null;
        if (ByteOrder.BIG_ENDIAN.toString().equals(value)) {
          byteOrder = ByteOrder.BIG_ENDIAN;
        } else if (ByteOrder.LITTLE_ENDIAN.toString().equals(value)) {
          byteOrder = ByteOrder.LITTLE_ENDIAN;
        } 
        serializationConfig.setByteOrder((byteOrder != null) ? byteOrder : ByteOrder.BIG_ENDIAN);
        continue;
      } 
      if ("enable-compression".equals(name)) {
        serializationConfig.setEnableCompression(DomConfigHelper.getBooleanValue(getTextContent(child)));
        continue;
      } 
      if ("enable-shared-object".equals(name)) {
        serializationConfig.setEnableSharedObject(DomConfigHelper.getBooleanValue(getTextContent(child)));
        continue;
      } 
      if ("allow-unsafe".equals(name)) {
        serializationConfig.setAllowUnsafe(DomConfigHelper.getBooleanValue(getTextContent(child)));
        continue;
      } 
      if ("data-serializable-factories".equals(name)) {
        fillDataSerializableFactories(child, serializationConfig);
        continue;
      } 
      if ("portable-factories".equals(name)) {
        fillPortableFactories(child, serializationConfig);
        continue;
      } 
      if ("serializers".equals(name)) {
        fillSerializers(child, serializationConfig);
        continue;
      } 
      if ("java-serialization-filter".equals(name))
        fillJavaSerializationFilter(child, serializationConfig); 
    } 
    return serializationConfig;
  }
  
  protected void fillDataSerializableFactories(Node node, SerializationConfig serializationConfig) {
    for (Node child : DomConfigHelper.childElements(node)) {
      String name = DomConfigHelper.cleanNodeName(child);
      if ("data-serializable-factory".equals(name)) {
        String value = getTextContent(child);
        Node factoryIdNode = child.getAttributes().getNamedItem("factory-id");
        if (factoryIdNode == null)
          throw new IllegalArgumentException("'factory-id' attribute of 'data-serializable-factory' is required!"); 
        int factoryId = Integer.parseInt(getTextContent(factoryIdNode));
        serializationConfig.addDataSerializableFactoryClass(factoryId, value);
      } 
    } 
  }
  
  protected void fillPortableFactories(Node node, SerializationConfig serializationConfig) {
    for (Node child : DomConfigHelper.childElements(node)) {
      String name = DomConfigHelper.cleanNodeName(child);
      if ("portable-factory".equals(name)) {
        String value = getTextContent(child);
        Node factoryIdNode = child.getAttributes().getNamedItem("factory-id");
        if (factoryIdNode == null)
          throw new IllegalArgumentException("'factory-id' attribute of 'portable-factory' is required!"); 
        int factoryId = Integer.parseInt(getTextContent(factoryIdNode));
        serializationConfig.addPortableFactoryClass(factoryId, value);
      } 
    } 
  }
  
  protected void fillSerializers(Node node, SerializationConfig serializationConfig) {
    for (Node child : DomConfigHelper.childElements(node)) {
      String name = DomConfigHelper.cleanNodeName(child);
      String value = getTextContent(child);
      if ("serializer".equals(name)) {
        SerializerConfig serializerConfig = new SerializerConfig();
        String typeClassName = getAttribute(child, "type-class");
        String className = getAttribute(child, "class-name");
        serializerConfig.setTypeClassName(typeClassName);
        serializerConfig.setClassName(className);
        serializationConfig.addSerializerConfig(serializerConfig);
        continue;
      } 
      if ("global-serializer".equals(name)) {
        GlobalSerializerConfig globalSerializerConfig = new GlobalSerializerConfig();
        globalSerializerConfig.setClassName(value);
        String attrValue = getAttribute(child, "override-java-serialization");
        boolean overrideJavaSerialization = (attrValue != null && DomConfigHelper.getBooleanValue(attrValue.trim()));
        globalSerializerConfig.setOverrideJavaSerialization(overrideJavaSerialization);
        serializationConfig.setGlobalSerializerConfig(globalSerializerConfig);
      } 
    } 
  }
  
  protected void fillJavaSerializationFilter(Node node, SerializationConfig serializationConfig) {
    JavaSerializationFilterConfig filterConfig = new JavaSerializationFilterConfig();
    serializationConfig.setJavaSerializationFilterConfig(filterConfig);
    Node defaultsDisabledNode = node.getAttributes().getNamedItem("defaults-disabled");
    boolean defaultsDisabled = (defaultsDisabledNode != null && DomConfigHelper.getBooleanValue(getTextContent(defaultsDisabledNode)));
    filterConfig.setDefaultsDisabled(defaultsDisabled);
    for (Node child : DomConfigHelper.childElements(node)) {
      String name = DomConfigHelper.cleanNodeName(child);
      if ("blacklist".equals(name)) {
        ClassFilter list = parseClassFilterList(child);
        filterConfig.setBlacklist(list);
        continue;
      } 
      if ("whitelist".equals(name)) {
        ClassFilter list = parseClassFilterList(child);
        filterConfig.setWhitelist(list);
      } 
    } 
  }
  
  protected ClassFilter parseClassFilterList(Node node) {
    ClassFilter list = new ClassFilter();
    for (Node child : DomConfigHelper.childElements(node)) {
      String name = DomConfigHelper.cleanNodeName(child);
      if ("class".equals(name)) {
        list.addClasses(new String[] { getTextContent(child) });
        continue;
      } 
      if ("package".equals(name)) {
        list.addPackages(new String[] { getTextContent(child) });
        continue;
      } 
      if ("prefix".equals(name))
        list.addPrefixes(new String[] { getTextContent(child) }); 
    } 
    return list;
  }
  
  protected SSLConfig parseSslConfig(Node node) {
    SSLConfig sslConfig = new SSLConfig();
    NamedNodeMap atts = node.getAttributes();
    Node enabledNode = atts.getNamedItem("enabled");
    boolean enabled = (enabledNode != null && DomConfigHelper.getBooleanValue(getTextContent(enabledNode)));
    sslConfig.setEnabled(enabled);
    for (Node n : DomConfigHelper.childElements(node)) {
      String nodeName = DomConfigHelper.cleanNodeName(n);
      if ("factory-class-name".equals(nodeName)) {
        sslConfig.setFactoryClassName(getTextContent(n));
        continue;
      } 
      if ("properties".equals(nodeName))
        fillProperties(n, sslConfig.getProperties()); 
    } 
    return sslConfig;
  }
  
  protected void fillNativeMemoryConfig(Node node, NativeMemoryConfig nativeMemoryConfig) {
    NamedNodeMap atts = node.getAttributes();
    Node enabledNode = atts.getNamedItem("enabled");
    boolean enabled = (enabledNode != null && DomConfigHelper.getBooleanValue(getTextContent(enabledNode).trim()));
    nativeMemoryConfig.setEnabled(enabled);
    Node allocTypeNode = atts.getNamedItem("allocator-type");
    String allocType = getTextContent(allocTypeNode);
    if (allocType != null && !"".equals(allocType))
      nativeMemoryConfig.setAllocatorType(
          NativeMemoryConfig.MemoryAllocatorType.valueOf(StringUtil.upperCaseInternal(allocType))); 
    for (Node n : DomConfigHelper.childElements(node)) {
      String nodeName = DomConfigHelper.cleanNodeName(n);
      if ("size".equals(nodeName)) {
        NamedNodeMap attrs = n.getAttributes();
        String value = getTextContent(attrs.getNamedItem("value"));
        MemoryUnit unit = MemoryUnit.valueOf(getTextContent(attrs.getNamedItem("unit")));
        MemorySize memorySize = new MemorySize(Long.parseLong(value), unit);
        nativeMemoryConfig.setSize(memorySize);
        continue;
      } 
      if ("min-block-size".equals(nodeName)) {
        String value = getTextContent(n);
        nativeMemoryConfig.setMinBlockSize(Integer.parseInt(value));
        continue;
      } 
      if ("page-size".equals(nodeName)) {
        String value = getTextContent(n);
        nativeMemoryConfig.setPageSize(Integer.parseInt(value));
        continue;
      } 
      if ("metadata-space-percentage".equals(nodeName)) {
        String value = getTextContent(n);
        nativeMemoryConfig.setMetadataSpacePercentage(Float.parseFloat(value));
      } 
    } 
  }
}
