package com.hazelcast.config;

import com.hazelcast.core.EntryListener;
import com.hazelcast.map.listener.MapListener;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.util.Preconditions;
import java.io.IOException;
import java.util.EventListener;

public class EntryListenerConfig extends ListenerConfig {
  private boolean local;
  
  private boolean includeValue = true;
  
  private EntryListenerConfigReadOnly readOnly;
  
  public EntryListenerConfig(String className, boolean local, boolean includeValue) {
    super(className);
    this.local = local;
    this.includeValue = includeValue;
  }
  
  public EntryListenerConfig(EntryListener implementation, boolean local, boolean includeValue) {
    super(implementation);
    this.local = local;
    this.includeValue = includeValue;
  }
  
  public EntryListenerConfig(MapListener implementation, boolean local, boolean includeValue) {
    super(toEntryListener(implementation));
    this.local = local;
    this.includeValue = includeValue;
  }
  
  public EntryListenerConfig(EntryListenerConfig config) {
    this.includeValue = config.isIncludeValue();
    this.local = config.isLocal();
    this.implementation = config.getImplementation();
    this.className = config.getClassName();
  }
  
  public EntryListenerConfigReadOnly getAsReadOnly() {
    if (this.readOnly == null)
      this.readOnly = new EntryListenerConfigReadOnly(this); 
    return this.readOnly;
  }
  
  public ListenerConfig setImplementation(EventListener implementation) {
    Preconditions.isNotNull(implementation, "implementation");
    this.implementation = toEntryListener(implementation);
    this.className = null;
    return this;
  }
  
  public EntryListener getImplementation() { return (EntryListener)this.implementation; }
  
  private static EventListener toEntryListener(Object implementation) {
    if (implementation instanceof EntryListener)
      return (EventListener)implementation; 
    if (implementation instanceof MapListener)
      return new MapListenerToEntryListenerAdapter((MapListener)implementation); 
    throw new IllegalArgumentException(implementation + " is not an expected EventListener implementation. A valid one has to be an implementation of EntryListener or MapListener");
  }
  
  public EntryListenerConfig setImplementation(EntryListener implementation) {
    super.setImplementation(implementation);
    return this;
  }
  
  public boolean isLocal() { return this.local; }
  
  public EntryListenerConfig setLocal(boolean local) {
    this.local = local;
    return this;
  }
  
  public boolean isIncludeValue() { return this.includeValue; }
  
  public EntryListenerConfig setIncludeValue(boolean includeValue) {
    this.includeValue = includeValue;
    return this;
  }
  
  public String toString() { return "EntryListenerConfig{local=" + this.local + ", includeValue=" + this.includeValue + '}'; }
  
  public boolean equals(Object o) {
    if (this == o)
      return true; 
    if (o == null || getClass() != o.getClass())
      return false; 
    if (!super.equals(o))
      return false; 
    EntryListenerConfig that = (EntryListenerConfig)o;
    if (this.includeValue != that.includeValue)
      return false; 
    if (this.local != that.local)
      return false; 
    return true;
  }
  
  public int hashCode() {
    result = super.hashCode();
    result = 31 * result + (this.local ? 1 : 0);
    return 31 * result + (this.includeValue ? 1 : 0);
  }
  
  public int getId() { return 9; }
  
  public void writeData(ObjectDataOutput out) throws IOException {
    super.writeData(out);
    out.writeBoolean(this.local);
    out.writeBoolean(this.includeValue);
  }
  
  public void readData(ObjectDataInput in) throws IOException {
    super.readData(in);
    this.local = in.readBoolean();
    this.includeValue = in.readBoolean();
  }
  
  public EntryListenerConfig() {}
}
