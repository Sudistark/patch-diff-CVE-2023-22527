package com.hazelcast.config;

import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import com.hazelcast.query.Predicate;
import com.hazelcast.util.Preconditions;
import java.io.IOException;

public class PredicateConfig implements IdentifiedDataSerializable {
  protected String className;
  
  protected String sql;
  
  protected Predicate implementation;
  
  private PredicateConfigReadOnly readOnly;
  
  public PredicateConfig() {}
  
  public PredicateConfig(String className) { setClassName(className); }
  
  public PredicateConfig(PredicateConfig config) {
    this.implementation = config.getImplementation();
    this.className = config.getClassName();
    this.sql = config.getSql();
  }
  
  public PredicateConfig(Predicate implementation) { this.implementation = (Predicate)Preconditions.isNotNull(implementation, "implementation"); }
  
  public PredicateConfig getAsReadOnly() {
    if (this.readOnly == null)
      this.readOnly = new PredicateConfigReadOnly(this); 
    return this.readOnly;
  }
  
  public String getClassName() { return this.className; }
  
  public PredicateConfig setClassName(String className) {
    this.className = Preconditions.checkHasText(className, "className must contain text");
    this.implementation = null;
    this.sql = null;
    return this;
  }
  
  public Predicate getImplementation() { return this.implementation; }
  
  public PredicateConfig setImplementation(Predicate implementation) {
    this.implementation = (Predicate)Preconditions.isNotNull(implementation, "implementation");
    this.className = null;
    this.sql = null;
    return this;
  }
  
  public String getSql() { return this.sql; }
  
  public void setSql(String sql) {
    this.sql = sql;
    this.className = null;
    this.implementation = null;
  }
  
  public boolean equals(Object o) {
    if (this == o)
      return true; 
    if (!(o instanceof PredicateConfig))
      return false; 
    PredicateConfig that = (PredicateConfig)o;
    if ((this.className != null) ? !this.className.equals(that.className) : (that.className != null))
      return false; 
    if ((this.sql != null) ? !this.sql.equals(that.sql) : (that.sql != null))
      return false; 
    if ((this.implementation != null) ? !this.implementation.equals(that.implementation) : (that.implementation != null))
      return false; 
  }
  
  public int hashCode() {
    result = (this.className != null) ? this.className.hashCode() : 0;
    result = 31 * result + ((this.sql != null) ? this.sql.hashCode() : 0);
    return 31 * result + ((this.implementation != null) ? this.implementation.hashCode() : 0);
  }
  
  public String toString() { return "PredicateConfig{className='" + this.className + '\'' + ", sql='" + this.sql + '\'' + ", implementation=" + this.implementation + '}'; }
  
  public int getFactoryId() { return ConfigDataSerializerHook.F_ID; }
  
  public int getId() { return 19; }
  
  public void writeData(ObjectDataOutput out) throws IOException {
    out.writeUTF(this.className);
    out.writeUTF(this.sql);
    out.writeObject(this.implementation);
  }
  
  public void readData(ObjectDataInput in) throws IOException {
    this.className = in.readUTF();
    this.sql = in.readUTF();
    this.implementation = (Predicate)in.readObject();
  }
}
