package com.hazelcast.config;

import com.hazelcast.config.cp.CPSemaphoreConfig;
import com.hazelcast.config.cp.CPSubsystemConfig;
import com.hazelcast.config.cp.FencedLockConfig;
import com.hazelcast.config.yaml.W3cDomUtil;
import com.hazelcast.instance.ProtocolType;
import com.hazelcast.internal.yaml.YamlMapping;
import com.hazelcast.internal.yaml.YamlNode;
import com.hazelcast.internal.yaml.YamlScalar;
import com.hazelcast.internal.yaml.YamlSequence;
import com.hazelcast.internal.yaml.YamlUtil;
import com.hazelcast.util.StringUtil;
import com.hazelcast.util.function.Function;
import java.nio.ByteOrder;
import java.util.Map;
import java.util.Properties;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

class YamlMemberDomConfigProcessor extends MemberDomConfigProcessor {
  YamlMemberDomConfigProcessor(boolean domLevel3, Config config) { super(domLevel3, config); }
  
  protected void handleSecurityInterceptorsChild(SecurityConfig cfg, Node child) {
    String className = child.getTextContent();
    cfg.addSecurityInterceptorConfig(new SecurityInterceptorConfig(className));
  }
  
  protected void handleSecurityPermissions(Node node) {
    String onJoinOp = getAttribute(node, "on-join-operation");
    if (onJoinOp != null) {
      OnJoinPermissionOperationName onJoinPermissionOperation = OnJoinPermissionOperationName.valueOf(StringUtil.upperCaseInternal(onJoinOp));
      this.config.getSecurityConfig().setOnJoinPermissionOperation(onJoinPermissionOperation);
    } 
    Iterable<Node> nodes = DomConfigHelper.childElements(node);
    for (Node child : nodes) {
      String nodeName = DomConfigHelper.cleanNodeName(child);
      if ("on-join-operation".equals(nodeName))
        continue; 
      nodeName = "all".equals(nodeName) ? (nodeName + "-permissions") : (nodeName + "-permission");
      PermissionConfig.PermissionType type = PermissionConfig.PermissionType.getType(nodeName);
      if (type == null)
        throw new InvalidConfigurationException("Security permission type is not valid " + nodeName); 
      if (PermissionConfig.PermissionType.CONFIG == type || PermissionConfig.PermissionType.ALL == type || PermissionConfig.PermissionType.TRANSACTION == type) {
        handleSecurityPermission(child, type);
        continue;
      } 
      handleSecurityPermissionGroup(child, type);
    } 
  }
  
  private void handleSecurityPermissionGroup(Node node, PermissionConfig.PermissionType type) {
    for (Node permissionNode : DomConfigHelper.childElements(node))
      handleSecurityPermission(permissionNode, type); 
  }
  
  void handleSecurityPermissionActions(Node node, PermissionConfig permConfig) {
    for (Node child : DomConfigHelper.childElements(node))
      permConfig.addAction(getTextContent(child).trim()); 
  }
  
  void handleSecurityPermissionEndpoints(Node node, PermissionConfig permConfig) {
    for (Node child : DomConfigHelper.childElements(node))
      permConfig.addEndpoint(getTextContent(child).trim()); 
  }
  
  protected void handleLoginModules(Node node, boolean member, Config config) {
    SecurityConfig cfg = config.getSecurityConfig();
    for (Node child : DomConfigHelper.childElements(node)) {
      LoginModuleConfig lm = handleLoginModule(child);
      if (member) {
        cfg.addMemberLoginModuleConfig(lm);
        continue;
      } 
      cfg.addClientLoginModuleConfig(lm);
    } 
  }
  
  protected void handleTrustedInterfaces(MulticastConfig multicastConfig, Node n) {
    YamlSequence yamlNode = W3cDomUtil.getWrappedYamlSequence(n);
    for (YamlNode interfaceNode : yamlNode.children()) {
      String trustedInterface = (String)YamlUtil.asScalar(interfaceNode).nodeValue();
      multicastConfig.addTrustedInterface(trustedInterface);
    } 
    super.handleTrustedInterfaces(multicastConfig, n);
  }
  
  protected void handleWanReplication(Node node) {
    for (Node wanReplicationNode : DomConfigHelper.childElements(node)) {
      WanReplicationConfig wanReplicationConfig = new WanReplicationConfig();
      wanReplicationConfig.setName(wanReplicationNode.getNodeName());
      handleWanReplicationNode(wanReplicationNode, wanReplicationConfig);
    } 
  }
  
  protected void handleWanReplicationChild(WanReplicationConfig wanReplicationConfig, Node nodeTarget, String nodeName) {
    if ("wan-publisher".equals(nodeName)) {
      for (Node publisherNode : DomConfigHelper.childElements(nodeTarget)) {
        WanPublisherConfig publisherConfig = new WanPublisherConfig();
        String groupNameOrPublisherId = publisherNode.getNodeName();
        Node groupNameAttr = publisherNode.getAttributes().getNamedItem("group-name");
        String groupName = (groupNameAttr != null) ? groupNameAttr.getTextContent() : groupNameOrPublisherId;
        String publisherId = (groupNameAttr != null) ? groupNameOrPublisherId : null;
        publisherConfig.setPublisherId(publisherId);
        publisherConfig.setGroupName(groupName);
        handleWanPublisherNode(wanReplicationConfig, publisherNode, publisherConfig);
      } 
    } else if ("wan-consumer".equals(nodeName)) {
      handleWanConsumerNode(wanReplicationConfig, nodeTarget);
    } 
  }
  
  protected void handlePort(Node node, Config config) {
    NetworkConfig networkConfig = config.getNetworkConfig();
    NamedNodeMap attributes = node.getAttributes();
    for (int a = 0; a < attributes.getLength(); a++) {
      Node att = attributes.item(a);
      String value = getTextContent(att).trim();
      if ("port".equals(att.getNodeName())) {
        int portCount = Integer.parseInt(value);
        networkConfig.setPort(portCount);
      } else if ("auto-increment".equals(att.getNodeName())) {
        networkConfig.setPortAutoIncrement(DomConfigHelper.getBooleanValue(value));
      } else if ("port-count".equals(att.getNodeName())) {
        int portCount = Integer.parseInt(value);
        networkConfig.setPortCount(portCount);
      } 
    } 
  }
  
  protected void handleSemaphore(Node node) {
    for (Node semaphoreNode : DomConfigHelper.childElements(node)) {
      SemaphoreConfig sConfig = new SemaphoreConfig();
      sConfig.setName(semaphoreNode.getNodeName());
      handleSemaphoreNode(semaphoreNode, sConfig);
    } 
  }
  
  protected void handleQueue(Node node) {
    for (Node queueNode : DomConfigHelper.childElements(node)) {
      QueueConfig queueConfig = new QueueConfig();
      queueConfig.setName(queueNode.getNodeName());
      handleQueueNode(queueNode, queueConfig);
    } 
  }
  
  protected void handleList(Node node) {
    for (Node listNode : DomConfigHelper.childElements(node)) {
      ListConfig listConfig = new ListConfig();
      listConfig.setName(listNode.getNodeName());
      handleListNode(listNode, listConfig);
    } 
  }
  
  protected void handleSet(Node node) {
    for (Node setNode : DomConfigHelper.childElements(node)) {
      SetConfig setConfig = new SetConfig();
      setConfig.setName(setNode.getNodeName());
      handleSetNode(setNode, setConfig);
    } 
  }
  
  protected void handleLock(Node node) {
    for (Node lockNode : DomConfigHelper.childElements(node)) {
      LockConfig lockConfig = new LockConfig();
      lockConfig.setName(lockNode.getNodeName());
      handleLockNode(lockNode, lockConfig);
    } 
  }
  
  protected void handleReliableTopic(Node node) {
    for (Node topicNode : DomConfigHelper.childElements(node)) {
      ReliableTopicConfig topicConfig = new ReliableTopicConfig();
      topicConfig.setName(topicNode.getNodeName());
      handleReliableTopicNode(topicNode, topicConfig);
    } 
  }
  
  protected void handleTopic(Node node) {
    for (Node topicNode : DomConfigHelper.childElements(node)) {
      TopicConfig topicConfig = new TopicConfig();
      topicConfig.setName(topicNode.getNodeName());
      handleTopicNode(topicNode, topicConfig);
    } 
  }
  
  protected void handleRingbuffer(Node node) {
    for (Node rbNode : DomConfigHelper.childElements(node)) {
      RingbufferConfig ringBufferConfig = new RingbufferConfig();
      ringBufferConfig.setName(rbNode.getNodeName());
      handleRingBufferNode(rbNode, ringBufferConfig);
    } 
  }
  
  protected void handleAtomicLong(Node node) {
    for (Node atomicLongNode : DomConfigHelper.childElements(node)) {
      AtomicLongConfig atomicLongConfig = new AtomicLongConfig();
      atomicLongConfig.setName(atomicLongNode.getNodeName());
      handleAtomicLongNode(atomicLongNode, atomicLongConfig);
    } 
  }
  
  protected void handleAtomicReference(Node node) {
    for (Node atomicReferenceNode : DomConfigHelper.childElements(node)) {
      AtomicReferenceConfig atomicReferenceConfig = new AtomicReferenceConfig();
      atomicReferenceConfig.setName(atomicReferenceNode.getNodeName());
      handleAtomicReferenceNode(atomicReferenceNode, atomicReferenceConfig);
    } 
  }
  
  protected void handleCountDownLatchConfig(Node node) {
    for (Node countDownLatchNode : DomConfigHelper.childElements(node)) {
      CountDownLatchConfig countDownLatchConfig = new CountDownLatchConfig();
      countDownLatchConfig.setName(countDownLatchNode.getNodeName());
      handleCountDownLatchNode(countDownLatchNode, countDownLatchConfig);
    } 
  }
  
  protected void handleMap(Node parentNode) {
    for (Node mapNode : DomConfigHelper.childElements(parentNode)) {
      MapConfig mapConfig = new MapConfig();
      mapConfig.setName(mapNode.getNodeName());
      handleMapNode(mapNode, mapConfig);
    } 
  }
  
  protected void handleCache(Node parentNode) {
    for (Node cacheNode : DomConfigHelper.childElements(parentNode)) {
      CacheSimpleConfig cacheConfig = new CacheSimpleConfig();
      cacheConfig.setName(cacheNode.getNodeName());
      handleCacheNode(cacheNode, cacheConfig);
    } 
  }
  
  protected void handleQuorum(Node node) {
    for (Node quorumNode : DomConfigHelper.childElements(node)) {
      QuorumConfig quorumConfig = new QuorumConfig();
      String quorumName = quorumNode.getNodeName();
      quorumConfig.setName(quorumName);
      handleQuorumNode(quorumNode, quorumConfig, quorumName);
    } 
  }
  
  protected void handleEventJournal(Node node) {
    for (Node typeNode : DomConfigHelper.childElements(node)) {
      String nodeName = typeNode.getNodeName().toLowerCase();
      if ("map".equals(nodeName)) {
        handleMapEventJournal(typeNode);
        continue;
      } 
      if ("cache".equals(nodeName)) {
        handleCacheEventJournal(typeNode);
        continue;
      } 
      throw new ConfigurationException("Mapping name should either be 'map' or 'cache', but " + nodeName + " found");
    } 
  }
  
  private void handleMapEventJournal(Node mapNode) {
    for (Node journalNode : DomConfigHelper.childElements(mapNode)) {
      EventJournalConfig journalConfig = new EventJournalConfig();
      journalConfig.setMapName(journalNode.getNodeName());
      handleViaReflection(journalNode, this.config, journalConfig);
    } 
  }
  
  private void handleCacheEventJournal(Node cacheNode) {
    for (Node journalNode : DomConfigHelper.childElements(cacheNode)) {
      EventJournalConfig journalConfig = new EventJournalConfig();
      journalConfig.setCacheName(journalNode.getNodeName());
      handleViaReflection(journalNode, this.config, journalConfig);
    } 
  }
  
  protected void handleMerkleTree(Node node) {
    for (Node typeNode : DomConfigHelper.childElements(node)) {
      String nodeName = typeNode.getNodeName().toLowerCase();
      if ("map".equals(nodeName)) {
        handleMapMerkleTree(typeNode);
        continue;
      } 
      throw new ConfigurationException("Mapping name should be 'map', but " + nodeName + " found");
    } 
  }
  
  private void handleMapMerkleTree(Node mapNode) {
    for (Node journalNode : DomConfigHelper.childElements(mapNode)) {
      MerkleTreeConfig merkleTreeConfig = new MerkleTreeConfig();
      merkleTreeConfig.setMapName(journalNode.getNodeName());
      handleViaReflection(journalNode, this.config, merkleTreeConfig);
    } 
  }
  
  protected void handleFlakeIdGenerator(Node node) {
    for (Node genNode : DomConfigHelper.childElements(node)) {
      FlakeIdGeneratorConfig genConfig = new FlakeIdGeneratorConfig();
      genConfig.setName(genNode.getNodeName());
      handleFlakeIdGeneratorNode(genNode, genConfig);
    } 
  }
  
  protected void handleExecutor(Node node) {
    for (Node executorNode : DomConfigHelper.childElements(node)) {
      ExecutorConfig executorConfig = new ExecutorConfig();
      executorConfig.setName(executorNode.getNodeName());
      handleViaReflection(executorNode, this.config, executorConfig);
    } 
  }
  
  protected void handleDurableExecutor(Node node) {
    for (Node executorNode : DomConfigHelper.childElements(node)) {
      DurableExecutorConfig executorConfig = new DurableExecutorConfig();
      executorConfig.setName(executorNode.getNodeName());
      handleViaReflection(executorNode, this.config, executorConfig);
    } 
  }
  
  protected void handleScheduledExecutor(Node node) {
    for (Node executorNode : DomConfigHelper.childElements(node)) {
      ScheduledExecutorConfig executorConfig = new ScheduledExecutorConfig();
      executorConfig.setName(executorNode.getNodeName());
      handleScheduledExecutorNode(executorNode, executorConfig);
    } 
  }
  
  protected void handleCardinalityEstimator(Node node) {
    for (Node estimatorNode : DomConfigHelper.childElements(node)) {
      CardinalityEstimatorConfig estimatorConfig = new CardinalityEstimatorConfig();
      estimatorConfig.setName(estimatorNode.getNodeName());
      handleCardinalityEstimatorNode(estimatorNode, estimatorConfig);
    } 
  }
  
  protected void handlePNCounter(Node node) {
    for (Node counterNode : DomConfigHelper.childElements(node)) {
      PNCounterConfig counterConfig = new PNCounterConfig();
      counterConfig.setName(counterNode.getNodeName());
      handleViaReflection(counterNode, this.config, counterConfig);
    } 
  }
  
  protected void handleMultiMap(Node node) {
    for (Node multiMapNode : DomConfigHelper.childElements(node)) {
      MultiMapConfig multiMapConfig = new MultiMapConfig();
      multiMapConfig.setName(multiMapNode.getNodeName());
      handleMultiMapNode(multiMapNode, multiMapConfig);
    } 
  }
  
  protected void handleReplicatedMap(Node node) {
    for (Node replicatedMapNode : DomConfigHelper.childElements(node)) {
      ReplicatedMapConfig replicatedMapConfig = new ReplicatedMapConfig();
      replicatedMapConfig.setName(replicatedMapNode.getNodeName());
      handleReplicatedMapNode(replicatedMapNode, replicatedMapConfig);
    } 
  }
  
  protected void mapWanReplicationRefHandle(Node n, MapConfig mapConfig) {
    for (Node mapNode : DomConfigHelper.childElements(n)) {
      WanReplicationRef wanReplicationRef = new WanReplicationRef();
      wanReplicationRef.setName(mapNode.getNodeName());
      handleMapWanReplicationRefNode(mapNode, mapConfig, wanReplicationRef);
    } 
  }
  
  protected void handleWanFilters(Node wanChild, WanReplicationRef wanReplicationRef) {
    for (Node filter : DomConfigHelper.childElements(wanChild))
      wanReplicationRef.addFilter(getTextContent(filter)); 
  }
  
  protected void handleMaxSizeConfig(MapConfig mapConfig, Node node, String value) {
    MaxSizeConfig msc = mapConfig.getMaxSizeConfig();
    NamedNodeMap attributes = node.getAttributes();
    Node maxSizePolicy = attributes.getNamedItem("policy");
    if (maxSizePolicy != null)
      msc.setMaxSizePolicy(MaxSizeConfig.MaxSizePolicy.valueOf(
            StringUtil.upperCaseInternal(getTextContent(maxSizePolicy)))); 
    msc.setSize(DomConfigHelper.getIntegerValue("max-size", getTextContent(attributes.getNamedItem("max-size"))));
  }
  
  protected void mapIndexesHandle(Node n, MapConfig mapConfig) {
    for (Node indexNode : DomConfigHelper.childElements(n)) {
      NamedNodeMap attrs = indexNode.getAttributes();
      boolean ordered = DomConfigHelper.getBooleanValue(getTextContent(attrs.getNamedItem("ordered")));
      String attribute = indexNode.getNodeName();
      mapConfig.addMapIndexConfig(new MapIndexConfig(attribute, ordered));
    } 
  }
  
  protected void mapAttributesHandle(Node n, MapConfig mapConfig) {
    for (Node extractorNode : DomConfigHelper.childElements(n)) {
      NamedNodeMap attrs = extractorNode.getAttributes();
      String extractor = getTextContent(attrs.getNamedItem("extractor"));
      String name = extractorNode.getNodeName();
      mapConfig.addMapAttributeConfig(new MapAttributeConfig(name, extractor));
    } 
  }
  
  protected void mapQueryCacheHandler(Node n, MapConfig mapConfig) {
    for (Node queryCacheNode : DomConfigHelper.childElements(n)) {
      String cacheName = queryCacheNode.getNodeName();
      QueryCacheConfig queryCacheConfig = new QueryCacheConfig(cacheName);
      handleMapQueryCacheNode(mapConfig, queryCacheNode, queryCacheConfig);
    } 
  }
  
  protected void queryCachePredicateHandler(Node childNode, QueryCacheConfig queryCacheConfig) {
    NamedNodeMap predicateAttributes = childNode.getAttributes();
    Node classNameNode = predicateAttributes.getNamedItem("class-name");
    Node sqlNode = predicateAttributes.getNamedItem("sql");
    if (classNameNode != null && sqlNode != null)
      throw new InvalidConfigurationException("Both class-name and sql is defined for the predicate of map " + childNode
          .getParentNode().getParentNode().getNodeName()); 
    if (classNameNode == null && sqlNode == null)
      throw new InvalidConfigurationException("Either class-name and sql should be defined for the predicate of map " + childNode
          .getParentNode().getParentNode().getNodeName()); 
    PredicateConfig predicateConfig = new PredicateConfig();
    if (classNameNode != null) {
      predicateConfig.setClassName(getTextContent(classNameNode));
    } else if (sqlNode != null) {
      predicateConfig.setSql(getTextContent(sqlNode));
    } 
    queryCacheConfig.setPredicateConfig(predicateConfig);
  }
  
  protected void queryCacheIndexesHandle(Node n, QueryCacheConfig queryCacheConfig) {
    for (Node indexNode : DomConfigHelper.childElements(n)) {
      NamedNodeMap attrs = indexNode.getAttributes();
      boolean ordered = DomConfigHelper.getBooleanValue(getTextContent(attrs.getNamedItem("ordered")));
      String attribute = indexNode.getNodeName();
      queryCacheConfig.addIndexConfig(new MapIndexConfig(attribute, ordered));
    } 
  }
  
  protected void handleMemberGroup(Node node, Config config) {
    for (Node memberGroupNode : DomConfigHelper.childElements(node)) {
      MemberGroupConfig memberGroupConfig = new MemberGroupConfig();
      for (Node interfacesNode : DomConfigHelper.childElements(memberGroupNode))
        memberGroupConfig.addInterface(interfacesNode.getNodeValue().trim()); 
      config.getPartitionGroupConfig().addMemberGroupConfig(memberGroupConfig);
    } 
  }
  
  protected MergePolicyConfig createMergePolicyConfig(Node node) {
    MergePolicyConfig mergePolicyConfig = new MergePolicyConfig();
    String policyString = getTextContent(node.getAttributes().getNamedItem("class-name"));
    mergePolicyConfig.setPolicy(policyString);
    String att = getAttribute(node, "batch-size");
    if (att != null)
      mergePolicyConfig.setBatchSize(DomConfigHelper.getIntegerValue("batch-size", att)); 
    return mergePolicyConfig;
  }
  
  protected void mapPartitionLostListenerHandle(Node n, MapConfig mapConfig) {
    for (Node listenerNode : DomConfigHelper.childElements(n)) {
      String listenerClass = listenerNode.getNodeValue();
      mapConfig.addMapPartitionLostListenerConfig(new MapPartitionLostListenerConfig(listenerClass));
    } 
  }
  
  protected void cachePartitionLostListenerHandle(Node n, CacheSimpleConfig cacheConfig) {
    for (Node listenerNode : DomConfigHelper.childElements(n)) {
      String listenerClass = listenerNode.getNodeValue();
      cacheConfig.addCachePartitionLostListenerConfig(new CachePartitionLostListenerConfig(listenerClass));
    } 
  }
  
  protected void cacheListenerHandle(Node n, CacheSimpleConfig cacheSimpleConfig) {
    for (Node listenerNode : DomConfigHelper.childElements(n))
      handleCacheEntryListenerNode(cacheSimpleConfig, listenerNode); 
  }
  
  protected void handleItemListeners(Node n, Function<ItemListenerConfig, Void> configAddFunction) {
    for (Node listenerNode : DomConfigHelper.childElements(n)) {
      NamedNodeMap attrs = listenerNode.getAttributes();
      boolean incValue = DomConfigHelper.getBooleanValue(getTextContent(attrs.getNamedItem("include-value")));
      String listenerClass = getTextContent(attrs.getNamedItem("class-name"));
      configAddFunction.apply(new ItemListenerConfig(listenerClass, incValue));
    } 
  }
  
  protected void handleEntryListeners(Node n, Function<EntryListenerConfig, Void> configAddFunction) {
    for (Node listenerNode : DomConfigHelper.childElements(n)) {
      NamedNodeMap attrs = listenerNode.getAttributes();
      boolean incValue = DomConfigHelper.getBooleanValue(getTextContent(attrs.getNamedItem("include-value")));
      boolean local = DomConfigHelper.getBooleanValue(getTextContent(attrs.getNamedItem("local")));
      String listenerClass = getTextContent(attrs.getNamedItem("class-name"));
      configAddFunction.apply(new EntryListenerConfig(listenerClass, local, incValue));
    } 
  }
  
  void handleMessageListeners(Node n, Function<ListenerConfig, Void> configAddFunction) {
    for (Node listenerNode : DomConfigHelper.childElements(n)) {
      String listenerClass = listenerNode.getNodeValue().trim();
      configAddFunction.apply(new ListenerConfig(listenerClass));
    } 
  }
  
  protected void handleQuorumListeners(QuorumConfig quorumConfig, Node n) {
    for (Node listenerNode : DomConfigHelper.childElements(n)) {
      String listenerClass = listenerNode.getNodeValue().trim();
      quorumConfig.addListenerConfig(new QuorumListenerConfig(listenerClass));
    } 
  }
  
  protected void handleServiceNodes(Node node, ServicesConfig servicesConfig) {
    for (Node child : DomConfigHelper.childElements(node)) {
      String nodeName = DomConfigHelper.cleanNodeName(child);
      if (!"enable-defaults".equals(nodeName)) {
        ServiceConfig serviceConfig = new ServiceConfig();
        serviceConfig.setName(nodeName);
        String enabledValue = getAttribute(child, "enabled");
        boolean enabled = DomConfigHelper.getBooleanValue(enabledValue);
        serviceConfig.setEnabled(enabled);
        for (Node n : DomConfigHelper.childElements(child))
          handleServiceNode(n, serviceConfig); 
        servicesConfig.addServiceConfig(serviceConfig);
      } 
    } 
  }
  
  protected void fillProperties(Node node, Map<String, Comparable> properties) {
    YamlMapping propertiesMapping = W3cDomUtil.getWrappedYamlMapping(node);
    for (YamlNode propNode : propertiesMapping.children()) {
      YamlScalar propScalar = YamlUtil.asScalar(propNode);
      String key = propScalar.nodeName();
      String value = propScalar.nodeValue().toString();
      properties.put(key, value);
    } 
  }
  
  protected void fillProperties(Node node, Properties properties) {
    YamlMapping propertiesMapping = W3cDomUtil.getWrappedYamlMapping(node);
    for (YamlNode propNode : propertiesMapping.children()) {
      YamlScalar propScalar = YamlUtil.asScalar(propNode);
      String key = propScalar.nodeName();
      String value = propScalar.nodeValue().toString();
      properties.put(key, value);
    } 
  }
  
  protected void handleDiscoveryStrategiesChild(DiscoveryConfig discoveryConfig, Node child) {
    String name = DomConfigHelper.cleanNodeName(child);
    if ("discovery-strategies".equals(name)) {
      NodeList strategies = child.getChildNodes();
      for (int i = 0; i < strategies.getLength(); i++) {
        Node strategy = strategies.item(i);
        handleDiscoveryStrategy(strategy, discoveryConfig);
      } 
    } else if ("node-filter".equals(name)) {
      handleDiscoveryNodeFilter(child, discoveryConfig);
    } 
  }
  
  protected SerializationConfig parseSerialization(Node node) {
    SerializationConfig serializationConfig = new SerializationConfig();
    for (Node child : DomConfigHelper.childElements(node)) {
      String name = DomConfigHelper.cleanNodeName(child);
      if ("portable-version".equals(name)) {
        String value = getTextContent(child);
        serializationConfig.setPortableVersion(DomConfigHelper.getIntegerValue(name, value));
        continue;
      } 
      if ("check-class-def-errors".equals(name)) {
        String value = getTextContent(child);
        serializationConfig.setCheckClassDefErrors(DomConfigHelper.getBooleanValue(value));
        continue;
      } 
      if ("use-native-byte-order".equals(name)) {
        serializationConfig.setUseNativeByteOrder(DomConfigHelper.getBooleanValue(getTextContent(child)));
        continue;
      } 
      if ("byte-order".equals(name)) {
        String value = getTextContent(child);
        ByteOrder byteOrder = null;
        if (ByteOrder.BIG_ENDIAN.toString().equals(value)) {
          byteOrder = ByteOrder.BIG_ENDIAN;
        } else if (ByteOrder.LITTLE_ENDIAN.toString().equals(value)) {
          byteOrder = ByteOrder.LITTLE_ENDIAN;
        } 
        serializationConfig.setByteOrder((byteOrder != null) ? byteOrder : ByteOrder.BIG_ENDIAN);
        continue;
      } 
      if ("enable-compression".equals(name)) {
        serializationConfig.setEnableCompression(DomConfigHelper.getBooleanValue(getTextContent(child)));
        continue;
      } 
      if ("enable-shared-object".equals(name)) {
        serializationConfig.setEnableSharedObject(DomConfigHelper.getBooleanValue(getTextContent(child)));
        continue;
      } 
      if ("allow-unsafe".equals(name)) {
        serializationConfig.setAllowUnsafe(DomConfigHelper.getBooleanValue(getTextContent(child)));
        continue;
      } 
      if ("data-serializable-factories".equals(name)) {
        fillDataSerializableFactories(child, serializationConfig);
        continue;
      } 
      if ("portable-factories".equals(name)) {
        fillPortableFactories(child, serializationConfig);
        continue;
      } 
      if ("serializers".equals(name)) {
        fillSerializers(child, serializationConfig);
        continue;
      } 
      if ("global-serializer".equals(name)) {
        fillGlobalSerializer(child, serializationConfig);
        continue;
      } 
      if ("java-serialization-filter".equals(name))
        fillJavaSerializationFilter(child, serializationConfig); 
    } 
    return serializationConfig;
  }
  
  private void fillGlobalSerializer(Node child, SerializationConfig serializationConfig) {
    GlobalSerializerConfig globalSerializerConfig = new GlobalSerializerConfig();
    String attrClassName = getAttribute(child, "class-name");
    String attrOverrideJavaSerialization = getAttribute(child, "override-java-serialization");
    boolean overrideJavaSerialization = (attrOverrideJavaSerialization != null && DomConfigHelper.getBooleanValue(attrOverrideJavaSerialization.trim()));
    globalSerializerConfig.setClassName(attrClassName);
    globalSerializerConfig.setOverrideJavaSerialization(overrideJavaSerialization);
    serializationConfig.setGlobalSerializerConfig(globalSerializerConfig);
  }
  
  protected void fillSerializers(Node node, SerializationConfig serializationConfig) {
    for (Node child : DomConfigHelper.childElements(node)) {
      SerializerConfig serializerConfig = new SerializerConfig();
      String typeClassName = getAttribute(child, "type-class");
      String className = getAttribute(child, "class-name");
      serializerConfig.setTypeClassName(typeClassName);
      serializerConfig.setClassName(className);
      serializationConfig.addSerializerConfig(serializerConfig);
    } 
  }
  
  protected void fillDataSerializableFactories(Node node, SerializationConfig serializationConfig) {
    for (Node child : DomConfigHelper.childElements(node)) {
      NamedNodeMap attributes = child.getAttributes();
      Node factoryIdNode = attributes.getNamedItem("factory-id");
      Node classNameNode = attributes.getNamedItem("class-name");
      if (factoryIdNode == null)
        throw new IllegalArgumentException("'factory-id' attribute of 'data-serializable-factory' is required!"); 
      if (classNameNode == null)
        throw new IllegalArgumentException("'class-name' attribute of 'data-serializable-factory' is required!"); 
      int factoryId = Integer.parseInt(getTextContent(factoryIdNode));
      String className = getTextContent(classNameNode);
      serializationConfig.addDataSerializableFactoryClass(factoryId, className);
    } 
  }
  
  protected void fillPortableFactories(Node node, SerializationConfig serializationConfig) {
    for (Node child : DomConfigHelper.childElements(node)) {
      NamedNodeMap attributes = child.getAttributes();
      Node factoryIdNode = attributes.getNamedItem("factory-id");
      Node classNameNode = attributes.getNamedItem("class-name");
      if (factoryIdNode == null)
        throw new IllegalArgumentException("'factory-id' attribute of 'portable-factory' is required!"); 
      if (classNameNode == null)
        throw new IllegalArgumentException("'class-name' attribute of 'portable-factory' is required!"); 
      int factoryId = Integer.parseInt(getTextContent(factoryIdNode));
      String className = getTextContent(classNameNode);
      serializationConfig.addPortableFactoryClass(factoryId, className);
    } 
  }
  
  protected ClassFilter parseClassFilterList(Node node) {
    ClassFilter list = new ClassFilter();
    for (Node typeNode : DomConfigHelper.childElements(node)) {
      String name = DomConfigHelper.cleanNodeName(typeNode);
      if ("class".equals(name)) {
        for (Node classNode : DomConfigHelper.childElements(typeNode)) {
          list.addClasses(new String[] { getTextContent(classNode) });
        } 
        continue;
      } 
      if ("package".equals(name)) {
        for (Node packageNode : DomConfigHelper.childElements(typeNode)) {
          list.addPackages(new String[] { getTextContent(packageNode) });
        } 
        continue;
      } 
      if ("prefix".equals(name))
        for (Node prefixNode : DomConfigHelper.childElements(typeNode)) {
          list.addPrefixes(new String[] { getTextContent(prefixNode) });
        }  
    } 
    return list;
  }
  
  protected void handleMemberAttributes(Node node) {
    for (Node n : DomConfigHelper.childElements(node)) {
      String attributeValue = getTextContent(n.getAttributes().getNamedItem("value"));
      String attributeName = n.getNodeName();
      handleMemberAttributesNode(n, attributeName, attributeValue);
    } 
  }
  
  protected void handleOutboundPorts(Node child) {
    NetworkConfig networkConfig = this.config.getNetworkConfig();
    for (Node n : DomConfigHelper.childElements(child)) {
      String value = getTextContent(n);
      networkConfig.addOutboundPortDefinition(value);
    } 
  }
  
  protected void handleOutboundPorts(Node child, EndpointConfig endpointConfig) {
    for (Node n : DomConfigHelper.childElements(child)) {
      String value = getTextContent(n);
      endpointConfig.addOutboundPortDefinition(value);
    } 
  }
  
  protected void handleInterfacesList(Node node, InterfacesConfig interfaces) {
    for (Node interfacesNode : DomConfigHelper.childElements(node)) {
      if ("interfaces".equals(StringUtil.lowerCaseInternal(DomConfigHelper.cleanNodeName(interfacesNode))))
        for (Node interfaceNode : DomConfigHelper.childElements(interfacesNode)) {
          String value = getTextContent(interfaceNode).trim();
          interfaces.addInterface(value);
        }  
    } 
  }
  
  protected void handleListeners(Node node) {
    for (Node child : DomConfigHelper.childElements(node)) {
      String listenerClass = getTextContent(child);
      this.config.addListenerConfig(new ListenerConfig(listenerClass));
    } 
  }
  
  protected void handleMemberList(Node node, boolean advancedNetworkConfig) {
    JoinConfig join = joinConfig(advancedNetworkConfig);
    TcpIpConfig tcpIpConfig = join.getTcpIpConfig();
    for (Node n : DomConfigHelper.childElements(node)) {
      String value = getTextContent(n).trim();
      tcpIpConfig.addMember(value);
    } 
  }
  
  protected void handleRestApiEndpointGroups(Node node) {
    for (Node child : DomConfigHelper.childElements(node)) {
      String nodeName = DomConfigHelper.cleanNodeName(child);
      if ("endpoint-groups".equals(nodeName))
        for (Node groupNode : DomConfigHelper.childElements(child)) {
          String groupName = groupNode.getNodeName();
          handleEndpointGroup(groupNode, groupName);
        }  
    } 
  }
  
  protected String extractName(Node node) { return node.getNodeName(); }
  
  protected void handlePort(Node node, ServerSocketEndpointConfig endpointConfig) {
    Node portNode = node.getAttributes().getNamedItem("port");
    if (portNode != null) {
      String portStr = portNode.getNodeValue().trim();
      if (portStr.length() > 0)
        endpointConfig.setPort(Integer.parseInt(portStr)); 
    } 
    handlePortAttributes(node, endpointConfig);
  }
  
  protected void handleWanServerSocketEndpointConfig(Node node) {
    for (Node wanEndpointNode : DomConfigHelper.childElements(node)) {
      ServerSocketEndpointConfig config = new ServerSocketEndpointConfig();
      config.setProtocolType(ProtocolType.WAN);
      String name = wanEndpointNode.getNodeName();
      handleServerSocketEndpointConfig(config, wanEndpointNode, name);
    } 
  }
  
  protected void handleWanEndpointConfig(Node node) {
    for (Node wanEndpointNode : DomConfigHelper.childElements(node)) {
      EndpointConfig config = new EndpointConfig();
      config.setProtocolType(ProtocolType.WAN);
      String endpointName = wanEndpointNode.getNodeName().trim();
      handleEndpointConfig(config, wanEndpointNode, endpointName);
    } 
  }
  
  void handleCPSemaphores(CPSubsystemConfig cpSubsystemConfig, Node node) {
    for (Node child : DomConfigHelper.childElements(node)) {
      CPSemaphoreConfig cpSemaphoreConfig = new CPSemaphoreConfig();
      cpSemaphoreConfig.setName(child.getNodeName());
      for (Node subChild : DomConfigHelper.childElements(child)) {
        String nodeName = DomConfigHelper.cleanNodeName(subChild);
        String value = getTextContent(subChild).trim();
        if ("jdk-compatible".equals(nodeName))
          cpSemaphoreConfig.setJDKCompatible(Boolean.parseBoolean(value)); 
      } 
      cpSubsystemConfig.addSemaphoreConfig(cpSemaphoreConfig);
    } 
  }
  
  void handleFencedLocks(CPSubsystemConfig cpSubsystemConfig, Node node) {
    for (Node child : DomConfigHelper.childElements(node)) {
      FencedLockConfig lockConfig = new FencedLockConfig();
      lockConfig.setName(child.getNodeName());
      for (Node subChild : DomConfigHelper.childElements(child)) {
        String nodeName = DomConfigHelper.cleanNodeName(subChild);
        String value = getTextContent(subChild).trim();
        if ("lock-acquire-limit".equals(nodeName))
          lockConfig.setLockAcquireLimit(Integer.parseInt(value)); 
      } 
      cpSubsystemConfig.addLockConfig(lockConfig);
    } 
  }
}
