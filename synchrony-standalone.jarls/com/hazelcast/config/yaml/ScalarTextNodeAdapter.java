package com.hazelcast.config.yaml;

import com.hazelcast.internal.yaml.MutableYamlScalar;
import com.hazelcast.internal.yaml.YamlScalar;
import org.w3c.dom.DOMException;
import org.w3c.dom.Document;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.UserDataHandler;

class ScalarTextNodeAdapter implements Node {
  private YamlScalar scalar;
  
  ScalarTextNodeAdapter(YamlScalar scalar) { this.scalar = scalar; }
  
  public String getNodeName() { return this.scalar.nodeName(); }
  
  public String getNodeValue() {
    Object nodeValue = this.scalar.nodeValue();
    return (nodeValue != null) ? nodeValue.toString() : null;
  }
  
  public void setNodeValue(String nodeValue) throws DOMException {
    if (this.scalar instanceof MutableYamlScalar) {
      ((MutableYamlScalar)this.scalar).setValue(nodeValue);
    } else {
      throw new UnsupportedOperationException();
    } 
  }
  
  public short getNodeType() { return 3; }
  
  public Node getParentNode() { return W3cDomUtil.asW3cNode(this.scalar.parent()); }
  
  public NodeList getChildNodes() { return EmptyNodeList.emptyNodeList(); }
  
  public Node getFirstChild() { return null; }
  
  public Node getLastChild() { return null; }
  
  public Node getPreviousSibling() { return null; }
  
  public Node getNextSibling() { return null; }
  
  public NamedNodeMap getAttributes() { return null; }
  
  public Document getOwnerDocument() { throw new UnsupportedOperationException(); }
  
  public Node insertBefore(Node newChild, Node refChild) throws DOMException { throw new UnsupportedOperationException(); }
  
  public Node replaceChild(Node newChild, Node oldChild) throws DOMException { throw new UnsupportedOperationException(); }
  
  public Node removeChild(Node oldChild) throws DOMException { throw new UnsupportedOperationException(); }
  
  public Node appendChild(Node newChild) throws DOMException { throw new UnsupportedOperationException(); }
  
  public boolean hasChildNodes() { return false; }
  
  public Node cloneNode(boolean deep) { throw new UnsupportedOperationException(); }
  
  public void normalize() { throw new UnsupportedOperationException(); }
  
  public boolean isSupported(String feature, String version) { throw new UnsupportedOperationException(); }
  
  public String getNamespaceURI() { throw new UnsupportedOperationException(); }
  
  public String getPrefix() { throw new UnsupportedOperationException(); }
  
  public void setPrefix(String prefix) throws DOMException { throw new UnsupportedOperationException(); }
  
  public String getLocalName() { return getNodeName(); }
  
  public boolean hasAttributes() { return false; }
  
  public String getBaseURI() { throw new UnsupportedOperationException(); }
  
  public short compareDocumentPosition(Node other) throws DOMException { throw new UnsupportedOperationException(); }
  
  public String getTextContent() { return getNodeValue(); }
  
  public void setTextContent(String textContent) throws DOMException { throw new UnsupportedOperationException(); }
  
  public boolean isSameNode(Node other) { return false; }
  
  public String lookupPrefix(String namespaceURI) { throw new UnsupportedOperationException(); }
  
  public boolean isDefaultNamespace(String namespaceURI) { throw new UnsupportedOperationException(); }
  
  public String lookupNamespaceURI(String prefix) { throw new UnsupportedOperationException(); }
  
  public boolean isEqualNode(Node arg) { throw new UnsupportedOperationException(); }
  
  public Object getFeature(String feature, String version) { throw new UnsupportedOperationException(); }
  
  public Object setUserData(String key, Object data, UserDataHandler handler) { throw new UnsupportedOperationException(); }
  
  public Object getUserData(String key) { throw new UnsupportedOperationException(); }
}
