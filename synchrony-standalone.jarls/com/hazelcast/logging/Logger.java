package com.hazelcast.logging;

import com.hazelcast.nio.ClassLoaderUtil;
import com.hazelcast.util.StringUtil;

public final class Logger {
  private static String loggerFactoryClassOrType;
  
  private static final Object FACTORY_LOCK = new Object();
  
  public static ILogger getLogger(Class clazz) { return getLogger(clazz.getName()); }
  
  public static ILogger getLogger(String name) {
    LoggerFactory existingFactory = loggerFactory;
    if (existingFactory != null)
      return existingFactory.getLogger(name); 
    synchronized (FACTORY_LOCK) {
      existingFactory = loggerFactory;
      if (existingFactory != null)
        return existingFactory.getLogger(name); 
      LoggerFactory createdFactory = null;
      String loggingClass = System.getProperty("hazelcast.logging.class");
      if (!StringUtil.isNullOrEmpty(loggingClass))
        createdFactory = tryToCreateLoggerFactory(loggingClass); 
      if (createdFactory != null) {
        loggerFactory = createdFactory;
        loggerFactoryClassOrType = loggingClass;
      } else {
        String loggingType = System.getProperty("hazelcast.logging.type");
        createdFactory = createLoggerFactory(loggingType);
        if (!StringUtil.isNullOrEmpty(loggingType)) {
          loggerFactory = createdFactory;
          loggerFactoryClassOrType = loggingType;
        } 
      } 
      return createdFactory.getLogger(name);
    } 
  }
  
  public static ILogger noLogger() { return new NoLogFactory.NoLogger(); }
  
  public static LoggerFactory newLoggerFactory(String preferredType) {
    synchronized (FACTORY_LOCK) {
      obtainedFactory = tryToObtainFactoryByConfiguredClass();
      if (obtainedFactory != null)
        return obtainedFactory; 
      obtainedFactory = tryToObtainFactoryByPreferredType(preferredType);
      if (obtainedFactory != null)
        return obtainedFactory; 
      assert StringUtil.isNullOrEmpty(preferredType);
      return obtainFactoryByRecoveringFromNullOrEmptyPreferredType();
    } 
  }
  
  private static LoggerFactory tryToObtainFactoryByConfiguredClass() {
    loggingClass = System.getProperty("hazelcast.logging.class");
    if (!StringUtil.isNullOrEmpty(loggingClass)) {
      if (sharedFactoryIsCompatibleWith(loggingClass))
        return loggerFactory; 
      LoggerFactory createdFactory = tryToCreateLoggerFactory(loggingClass);
      if (createdFactory != null) {
        if (loggerFactory == null) {
          loggerFactory = createdFactory;
          loggerFactoryClassOrType = loggingClass;
        } 
        return createdFactory;
      } 
    } 
    return null;
  }
  
  private static LoggerFactory tryToObtainFactoryByPreferredType(String preferredType) {
    if (!StringUtil.isNullOrEmpty(preferredType)) {
      if (sharedFactoryIsCompatibleWith(preferredType))
        return loggerFactory; 
      LoggerFactory createdFactory = createLoggerFactory(preferredType);
      if (loggerFactory == null) {
        loggerFactory = createdFactory;
        loggerFactoryClassOrType = preferredType;
      } 
      return createdFactory;
    } 
    return null;
  }
  
  private static LoggerFactory obtainFactoryByRecoveringFromNullOrEmptyPreferredType() {
    if (loggerFactory != null)
      return loggerFactory; 
    loggingType = System.getProperty("hazelcast.logging.type");
    if (!StringUtil.isNullOrEmpty(loggingType)) {
      LoggerFactory createdFactory = createLoggerFactory(loggingType);
      loggerFactory = createdFactory;
      loggerFactoryClassOrType = loggingType;
      return createdFactory;
    } 
    StandardLoggerFactory standardLoggerFactory = new StandardLoggerFactory();
    loggerFactory = standardLoggerFactory;
    loggerFactoryClassOrType = "jdk";
    return standardLoggerFactory;
  }
  
  private static boolean sharedFactoryIsCompatibleWith(String requiredClassOrType) {
    return (loggerFactory != null && !StringUtil.isNullOrEmpty(loggerFactoryClassOrType) && loggerFactoryClassOrType
      .equals(requiredClassOrType));
  }
  
  private static LoggerFactory createLoggerFactory(String preferredType) {
    StandardLoggerFactory standardLoggerFactory;
    if ("log4j".equals(preferredType)) {
      standardLoggerFactory = tryToCreateLoggerFactory("com.hazelcast.logging.Log4jFactory");
    } else if ("log4j2".equals(preferredType)) {
      standardLoggerFactory = tryToCreateLoggerFactory("com.hazelcast.logging.Log4j2Factory");
    } else if ("slf4j".equals(preferredType)) {
      standardLoggerFactory = tryToCreateLoggerFactory("com.hazelcast.logging.Slf4jFactory");
    } else if ("jdk".equals(preferredType)) {
      standardLoggerFactory = new StandardLoggerFactory();
    } else if ("none".equals(preferredType)) {
      standardLoggerFactory = new NoLogFactory();
    } else {
      if (!StringUtil.isNullOrEmpty(preferredType))
        logError("Unexpected logging type '" + preferredType + "', falling back to JDK logging.", null); 
      standardLoggerFactory = new StandardLoggerFactory();
    } 
    if (standardLoggerFactory == null) {
      logError("Falling back to JDK logging.", null);
      standardLoggerFactory = new StandardLoggerFactory();
    } 
    return standardLoggerFactory;
  }
  
  private static LoggerFactory tryToCreateLoggerFactory(String className) {
    try {
      return (LoggerFactory)ClassLoaderUtil.newInstance(null, className);
    } catch (Exception e) {
      logError("Failed to create '" + className + "' logger factory:", e);
      return null;
    } 
  }
  
  private static void logError(String message, Throwable cause) {
    System.err.println(message);
    if (cause != null)
      cause.printStackTrace(); 
  }
}
