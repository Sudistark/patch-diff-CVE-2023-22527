package com.hazelcast.internal.networking.nio.iobalancer;

import com.hazelcast.internal.networking.nio.MigratablePipeline;
import java.util.Iterator;
import java.util.Random;
import java.util.Set;

class MonkeyMigrationStrategy implements MigrationStrategy {
  private final Random random = new Random();
  
  public boolean imbalanceDetected(LoadImbalance imbalance) {
    Set<? extends MigratablePipeline> candidates = imbalance.getPipelinesOwnedBy(imbalance.srcOwner);
    return (candidates.size() > 0);
  }
  
  public MigratablePipeline findPipelineToMigrate(LoadImbalance imbalance) {
    Set<? extends MigratablePipeline> candidates = imbalance.getPipelinesOwnedBy(imbalance.srcOwner);
    int pipelineCount = candidates.size();
    int selected = this.random.nextInt(pipelineCount);
    Iterator<? extends MigratablePipeline> iterator = candidates.iterator();
    for (int i = 0; i < selected; i++)
      iterator.next(); 
    return (MigratablePipeline)iterator.next();
  }
}
