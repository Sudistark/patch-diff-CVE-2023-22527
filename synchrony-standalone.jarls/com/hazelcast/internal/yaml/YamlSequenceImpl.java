package com.hazelcast.internal.yaml;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

class YamlSequenceImpl extends AbstractYamlNode implements MutableYamlSequence {
  private List<YamlNode> children = Collections.emptyList();
  
  YamlSequenceImpl(YamlNode parent, String nodeName) { super(parent, nodeName); }
  
  public YamlNode child(int index) {
    if (index >= this.children.size())
      return null; 
    return (YamlNode)this.children.get(index);
  }
  
  public Iterable<YamlNode> children() { return this.children; }
  
  public YamlMapping childAsMapping(int index) { return YamlUtil.asMapping(child(index)); }
  
  public YamlSequence childAsSequence(int index) { return YamlUtil.asSequence(child(index)); }
  
  public YamlScalar childAsScalar(int index) { return YamlUtil.asScalar(child(index)); }
  
  public <T> T childAsScalarValue(int index) { return (T)childAsScalar(index).nodeValue(); }
  
  public <T> T childAsScalarValue(int index, Class<T> type) { return (T)childAsScalar(index).nodeValue(type); }
  
  public void addChild(YamlNode child) { getOrCreateChildren().add(child); }
  
  private List<YamlNode> getOrCreateChildren() {
    if (this.children == Collections.emptyList())
      this.children = new ArrayList(); 
    return this.children;
  }
  
  public int childCount() { return this.children.size(); }
  
  public String toString() {
    return "YamlSequenceImpl{nodeName=" + 
      nodeName() + ", children=" + this.children + '}';
  }
}
