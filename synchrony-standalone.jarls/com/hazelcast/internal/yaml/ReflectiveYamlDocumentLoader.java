package com.hazelcast.internal.yaml;

import com.hazelcast.util.Preconditions;
import java.io.InputStream;
import java.io.Reader;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;

class ReflectiveYamlDocumentLoader implements YamlDocumentLoader {
  private final Object load;
  
  private final Method loadFromInputStream;
  
  private final Method loadFromReader;
  
  private final Method loadFromString;
  
  ReflectiveYamlDocumentLoader() {
    try {
      Class<?> loadSettingsClass = Class.forName("com.hazelcast.org.snakeyaml.engine.v2.api.LoadSettings");
      Class<?> loadSettingsBuilderClass = Class.forName("com.hazelcast.org.snakeyaml.engine.v2.api.LoadSettingsBuilder");
      Method loadSettingsBuilderMethod = loadSettingsClass.getMethod("builder", new Class[0]);
      Method buildLoadSettingsMethod = loadSettingsBuilderClass.getMethod("build", new Class[0]);
      Object loadSettingsBuilder = loadSettingsBuilderMethod.invoke(null, new Object[0]);
      Object loadSettings = buildLoadSettingsMethod.invoke(loadSettingsBuilder, new Object[0]);
      Class<?> loadClass = Class.forName("com.hazelcast.org.snakeyaml.engine.v2.api.Load");
      Constructor<?> constructor = loadClass.getConstructor(new Class[] { loadSettingsClass });
      this.load = constructor.newInstance(new Object[] { loadSettings });
      this.loadFromInputStream = loadClass.getMethod("loadFromInputStream", new Class[] { InputStream.class });
      this.loadFromReader = loadClass.getMethod("loadFromReader", new Class[] { Reader.class });
      this.loadFromString = loadClass.getMethod("loadFromString", new Class[] { String.class });
    } catch (Exception e) {
      throw new YamlException("An error occurred while creating the SnakeYaml Load class", e);
    } 
  }
  
  public Object loadFromInputStream(InputStream yamlStream) {
    Preconditions.checkNotNull(yamlStream, "The provided InputStream to load the YAML from must not be null");
    try {
      return this.loadFromInputStream.invoke(this.load, new Object[] { yamlStream });
    } catch (Exception e) {
      throw new YamlException("Couldn't load YAML document from the provided InputStream", e);
    } 
  }
  
  public Object loadFromReader(Reader yamlReader) {
    Preconditions.checkNotNull(yamlReader, "The provided Reader to load the YAML from must not be null");
    try {
      return this.loadFromReader.invoke(this.load, new Object[] { yamlReader });
    } catch (Exception e) {
      throw new YamlException("Couldn't load YAML document from the provided Reader", e);
    } 
  }
  
  public Object loadFromString(String yaml) {
    Preconditions.checkNotNull(yaml, "The provided String to load the YAML from must not be null");
    try {
      return this.loadFromString.invoke(this.load, new Object[] { yaml });
    } catch (Exception e) {
      throw new YamlException("Couldn't load YAML document from the provided String", e);
    } 
  }
}
