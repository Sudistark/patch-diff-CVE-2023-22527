package com.hazelcast.internal.jmx;

import com.hazelcast.config.Config;
import com.hazelcast.config.ConfigAccessor;
import com.hazelcast.core.Cluster;
import com.hazelcast.core.HazelcastInstance;
import com.hazelcast.core.Member;
import com.hazelcast.instance.HazelcastInstanceImpl;
import com.hazelcast.instance.Node;
import com.hazelcast.monitor.LocalWanPublisherStats;
import com.hazelcast.monitor.LocalWanStats;
import com.hazelcast.spi.ExecutionService;
import com.hazelcast.spi.impl.executionservice.InternalExecutionService;
import com.hazelcast.spi.impl.operationservice.InternalOperationService;
import com.hazelcast.util.MapUtil;
import com.hazelcast.wan.WanReplicationService;
import java.io.File;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;

@ManagedDescription("HazelcastInstance")
public class InstanceMBean extends HazelcastMBean<HazelcastInstanceImpl> {
  private static final int INITIAL_CAPACITY = 3;
  
  final Config config;
  
  final Cluster cluster;
  
  private NodeMBean nodeMBean;
  
  private NetworkingServiceMBean networkingServiceMBean;
  
  private EventServiceMBean eventServiceMBean;
  
  private OperationServiceMBean operationServiceMBean;
  
  private ProxyServiceMBean proxyServiceMBean;
  
  private ClientEngineMBean clientEngineMBean;
  
  private ManagedExecutorServiceMBean systemExecutorMBean;
  
  private ManagedExecutorServiceMBean asyncExecutorMBean;
  
  private ManagedExecutorServiceMBean scheduledExecutorMBean;
  
  private ManagedExecutorServiceMBean clientExecutorMBean;
  
  private ManagedExecutorServiceMBean clientQueryExecutorMBean;
  
  private ManagedExecutorServiceMBean clientBlockingExecutorMBean;
  
  private ManagedExecutorServiceMBean queryExecutorMBean;
  
  private ManagedExecutorServiceMBean ioExecutorMBean;
  
  private ManagedExecutorServiceMBean offloadableExecutorMBean;
  
  private PartitionServiceMBean partitionServiceMBean;
  
  protected InstanceMBean(HazelcastInstanceImpl hazelcastInstance, ManagementService managementService) {
    super(hazelcastInstance, managementService);
    createProperties(hazelcastInstance);
    this.config = hazelcastInstance.getConfig();
    this.cluster = hazelcastInstance.getCluster();
    Node node = hazelcastInstance.node;
    InternalExecutionService internalExecutionService = node.nodeEngine.getExecutionService();
    InternalOperationService operationService = node.nodeEngine.getOperationService();
    createMBeans(hazelcastInstance, managementService, node, internalExecutionService, operationService);
    registerMBeans();
    registerWanPublisherMBeans(node.nodeEngine.getWanReplicationService());
  }
  
  private void registerWanPublisherMBeans(WanReplicationService wanReplicationService) {
    Map<String, LocalWanStats> wanStats = wanReplicationService.getStats();
    if (wanStats == null)
      return; 
    for (Map.Entry<String, LocalWanStats> replicationStatsEntry : wanStats.entrySet()) {
      String wanReplicationName = (String)replicationStatsEntry.getKey();
      LocalWanStats localWanStats = (LocalWanStats)replicationStatsEntry.getValue();
      Map<String, LocalWanPublisherStats> publisherStats = localWanStats.getLocalWanPublisherStats();
      for (String targetGroupName : publisherStats.keySet())
        register(new WanPublisherMBean(wanReplicationService, wanReplicationName, targetGroupName, this.service)); 
    } 
  }
  
  private void createMBeans(HazelcastInstanceImpl hazelcastInstance, ManagementService managementService, Node node, ExecutionService executionService, InternalOperationService operationService) {
    this.nodeMBean = new NodeMBean(hazelcastInstance, node, managementService);
    this.networkingServiceMBean = new NetworkingServiceMBean(hazelcastInstance, node.networkingService, this.service);
    this.eventServiceMBean = new EventServiceMBean(hazelcastInstance, node.nodeEngine.getEventService(), this.service);
    this.operationServiceMBean = new OperationServiceMBean(hazelcastInstance, operationService, this.service);
    this.proxyServiceMBean = new ProxyServiceMBean(hazelcastInstance, node.nodeEngine.getProxyService(), this.service);
    this.partitionServiceMBean = new PartitionServiceMBean(hazelcastInstance, node.partitionService, this.service);
    this.clientEngineMBean = new ClientEngineMBean(hazelcastInstance, node.clientEngine, this.service);
    this
      .systemExecutorMBean = new ManagedExecutorServiceMBean(hazelcastInstance, executionService.getExecutor("hz:system"), this.service);
    this
      .asyncExecutorMBean = new ManagedExecutorServiceMBean(hazelcastInstance, executionService.getExecutor("hz:async"), this.service);
    this
      .scheduledExecutorMBean = new ManagedExecutorServiceMBean(hazelcastInstance, executionService.getExecutor("hz:scheduled"), this.service);
    this
      .clientExecutorMBean = new ManagedExecutorServiceMBean(hazelcastInstance, executionService.getExecutor("hz:client"), this.service);
    this
      .clientQueryExecutorMBean = new ManagedExecutorServiceMBean(hazelcastInstance, executionService.getExecutor("hz:client-query"), this.service);
    this
      .clientBlockingExecutorMBean = new ManagedExecutorServiceMBean(hazelcastInstance, executionService.getExecutor("hz:client-blocking-tasks"), this.service);
    this
      .queryExecutorMBean = new ManagedExecutorServiceMBean(hazelcastInstance, executionService.getExecutor("hz:query"), this.service);
    this
      .ioExecutorMBean = new ManagedExecutorServiceMBean(hazelcastInstance, executionService.getExecutor("hz:io"), this.service);
    this
      .offloadableExecutorMBean = new ManagedExecutorServiceMBean(hazelcastInstance, executionService.getExecutor("hz:offloadable"), this.service);
  }
  
  private void registerMBeans() {
    register(this.operationServiceMBean);
    register(this.nodeMBean);
    register(this.networkingServiceMBean);
    register(this.eventServiceMBean);
    register(this.proxyServiceMBean);
    register(this.partitionServiceMBean);
    register(this.clientEngineMBean);
    register(this.systemExecutorMBean);
    register(this.asyncExecutorMBean);
    register(this.scheduledExecutorMBean);
    register(this.clientExecutorMBean);
    register(this.clientQueryExecutorMBean);
    register(this.clientBlockingExecutorMBean);
    register(this.queryExecutorMBean);
    register(this.ioExecutorMBean);
    register(this.offloadableExecutorMBean);
  }
  
  private void createProperties(HazelcastInstanceImpl hazelcastInstance) {
    Map<String, String> properties = MapUtil.createHashMap(3);
    properties.put("type", ManagementService.quote("HazelcastInstance"));
    properties.put("instance", ManagementService.quote(hazelcastInstance.getName()));
    properties.put("name", ManagementService.quote(hazelcastInstance.getName()));
    setObjectName(properties);
  }
  
  public PartitionServiceMBean getPartitionServiceMBean() { return this.partitionServiceMBean; }
  
  public ManagedExecutorServiceMBean getSystemExecutorMBean() { return this.systemExecutorMBean; }
  
  public ManagedExecutorServiceMBean getAsyncExecutorMBean() { return this.asyncExecutorMBean; }
  
  public ManagedExecutorServiceMBean getScheduledExecutorMBean() { return this.scheduledExecutorMBean; }
  
  public ManagedExecutorServiceMBean getClientExecutorMBean() { return this.clientExecutorMBean; }
  
  public ManagedExecutorServiceMBean getClientQueryExecutorMBean() { return this.clientQueryExecutorMBean; }
  
  public ManagedExecutorServiceMBean getClientBlockingExecutorMBean() { return this.clientBlockingExecutorMBean; }
  
  public ManagedExecutorServiceMBean getQueryExecutorMBean() { return this.queryExecutorMBean; }
  
  public ManagedExecutorServiceMBean getIoExecutorMBean() { return this.ioExecutorMBean; }
  
  public ManagedExecutorServiceMBean getOffloadableExecutorMBean() { return this.offloadableExecutorMBean; }
  
  public OperationServiceMBean getOperationServiceMBean() { return this.operationServiceMBean; }
  
  public ProxyServiceMBean getProxyServiceMBean() { return this.proxyServiceMBean; }
  
  public ClientEngineMBean getClientEngineMBean() { return this.clientEngineMBean; }
  
  public NetworkingServiceMBean getNetworkingServiceMBean() { return this.networkingServiceMBean; }
  
  public EventServiceMBean getEventServiceMBean() { return this.eventServiceMBean; }
  
  public NodeMBean getNodeMBean() { return this.nodeMBean; }
  
  public HazelcastInstance getHazelcastInstance() { return (HazelcastInstance)this.managedObject; }
  
  @ManagedAnnotation("name")
  @ManagedDescription("Name of the Instance")
  public String getName() { return ((HazelcastInstanceImpl)this.managedObject).getName(); }
  
  @ManagedAnnotation("version")
  @ManagedDescription("The Hazelcast version")
  public String getVersion() { return ((HazelcastInstanceImpl)this.managedObject).node.getBuildInfo().getVersion(); }
  
  @ManagedAnnotation("build")
  @ManagedDescription("The Hazelcast build")
  public String getBuild() { return ((HazelcastInstanceImpl)this.managedObject).node.getBuildInfo().getBuild(); }
  
  @ManagedAnnotation("config")
  @ManagedDescription("String representation of config")
  public String getConfig() { return this.config.toString(); }
  
  @ManagedAnnotation("configSource")
  @ManagedDescription("The source of config")
  public String getConfigSource() {
    File configurationFile = this.config.getConfigurationFile();
    if (configurationFile != null)
      return configurationFile.getAbsolutePath(); 
    URL configurationUrl = this.config.getConfigurationUrl();
    if (configurationUrl != null)
      return configurationUrl.toString(); 
    return null;
  }
  
  @ManagedAnnotation("groupName")
  @ManagedDescription("Group Name")
  public String getGroupName() { return this.config.getGroupConfig().getName(); }
  
  @ManagedAnnotation("port")
  @ManagedDescription("Network Port")
  public int getPort() { return ConfigAccessor.getActiveMemberNetworkConfig(this.config).getPort(); }
  
  @ManagedAnnotation("clusterTime")
  @ManagedDescription("Cluster-wide Time")
  public long getClusterTime() { return this.cluster.getClusterTime(); }
  
  @ManagedAnnotation("memberCount")
  @ManagedDescription("size of the cluster")
  public int getMemberCount() { return this.cluster.getMembers().size(); }
  
  @ManagedAnnotation("Members")
  @ManagedDescription("List of Members")
  public List<String> getMembers() {
    Set<Member> members = this.cluster.getMembers();
    List<String> list = new ArrayList<String>(members.size());
    for (Member member : members)
      list.add(member.getSocketAddress().toString()); 
    return list;
  }
  
  @ManagedAnnotation("running")
  @ManagedDescription("Running state")
  public boolean isRunning() { return ((HazelcastInstanceImpl)this.managedObject).getLifecycleService().isRunning(); }
  
  @ManagedAnnotation(value = "shutdown", operation = true)
  @ManagedDescription("Shutdown the Node")
  public void shutdown() { ((HazelcastInstanceImpl)this.managedObject).getLifecycleService().shutdown(); }
}
