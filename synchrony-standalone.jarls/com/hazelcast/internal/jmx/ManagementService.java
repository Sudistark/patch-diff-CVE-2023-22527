package com.hazelcast.internal.jmx;

import com.hazelcast.core.DistributedObject;
import com.hazelcast.core.DistributedObjectEvent;
import com.hazelcast.core.DistributedObjectListener;
import com.hazelcast.instance.HazelcastInstanceImpl;
import com.hazelcast.instance.HazelcastInstanceProxy;
import com.hazelcast.logging.ILogger;
import com.hazelcast.spi.properties.GroupProperty;
import java.lang.management.ManagementFactory;
import java.util.Hashtable;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.management.MBeanServer;
import javax.management.MalformedObjectNameException;
import javax.management.ObjectName;

public class ManagementService implements DistributedObjectListener {
  static final String DOMAIN = "com.hazelcast";
  
  private static final int INITIAL_CAPACITY = 5;
  
  final HazelcastInstanceImpl instance;
  
  private final boolean enabled;
  
  private final ILogger logger;
  
  private final String registrationId;
  
  private final InstanceMBean instanceMBean;
  
  public ManagementService(HazelcastInstanceImpl instance) {
    this.instance = instance;
    this.logger = instance.getLoggingService().getLogger(getClass());
    this.enabled = instance.node.getProperties().getBoolean(GroupProperty.ENABLE_JMX);
    if (!this.enabled) {
      this.instanceMBean = null;
      this.registrationId = null;
      return;
    } 
    this.logger.info("Hazelcast JMX agent enabled.");
    MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
    try {
      instanceMBean = createInstanceMBean(instance);
      mbs.registerMBean(instanceMBean, instanceMBean.objectName);
    } catch (Exception e) {
      instanceMBean = null;
      this.logger.warning("Unable to start JMX service", e);
    } 
    this.instanceMBean = instanceMBean;
    this.registrationId = instance.addDistributedObjectListener(this);
    for (DistributedObject distributedObject : instance.getDistributedObjects())
      registerDistributedObject(distributedObject); 
  }
  
  protected InstanceMBean createInstanceMBean(HazelcastInstanceImpl instance) { return new InstanceMBean(instance, this); }
  
  public InstanceMBean getInstanceMBean() { return this.instanceMBean; }
  
  public void destroy() {
    if (!this.enabled)
      return; 
    this.instance.removeDistributedObjectListener(this.registrationId);
    MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
    try {
      Set<ObjectName> entries = mbs.queryNames(new ObjectName("com.hazelcast:instance=" + 
            quote(this.instance.getName()) + ",*"), null);
      for (ObjectName name : entries) {
        if (mbs.isRegistered(name))
          mbs.unregisterMBean(name); 
      } 
    } catch (Exception e) {
      this.logger.warning("Error while un-registering MBeans", e);
    } 
  }
  
  public static void shutdownAll(List<HazelcastInstanceProxy> instances) {
    for (HazelcastInstanceProxy instance : instances)
      shutdown(instance.getName()); 
  }
  
  public static void shutdown(String instanceName) {
    MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
    try {
      Set<ObjectName> entries = mbs.queryNames(new ObjectName("com.hazelcast:instance=" + 
            quote(instanceName) + ",*"), null);
      for (ObjectName name : entries) {
        if (mbs.isRegistered(name))
          mbs.unregisterMBean(name); 
      } 
    } catch (Exception e) {
      Logger.getLogger(ManagementService.class.getName())
        .log(Level.WARNING, "Error while shutting down all jmx services...", e);
    } 
  }
  
  public void distributedObjectCreated(DistributedObjectEvent event) { registerDistributedObject(event.getDistributedObject()); }
  
  public void distributedObjectDestroyed(DistributedObjectEvent event) { unregisterDistributedObject(event.getServiceName(), (String)event.getObjectName()); }
  
  private void registerDistributedObject(DistributedObject distributedObject) {
    HazelcastMBean bean = MBeans.createHazelcastMBeanOrNull(distributedObject, this);
    if (bean == null)
      return; 
    MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
    if (!mbs.isRegistered(bean.objectName)) {
      try {
        mbs.registerMBean(bean, bean.objectName);
      } catch (Exception e) {
        this.logger.warning("Error while registering " + bean.objectName, e);
      } 
    } else {
      try {
        bean.preDeregister();
        bean.postDeregister();
      } catch (Exception e) {
        this.logger.finest(e);
      } 
    } 
  }
  
  private void unregisterDistributedObject(String serviceName, String objectName) {
    String objectType = MBeans.getObjectTypeOrNull(serviceName);
    if (objectType == null)
      return; 
    ObjectName beanName = createObjectName(objectType, objectName);
    MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
    if (mbs.isRegistered(beanName))
      try {
        mbs.unregisterMBean(beanName);
      } catch (Exception e) {
        this.logger.warning("Error while un-registering " + objectName, e);
      }  
  }
  
  protected ObjectName createObjectName(String type, String name) {
    Hashtable<String, String> properties = new Hashtable<String, String>(5);
    properties.put("instance", quote(this.instance.getName()));
    if (type != null)
      properties.put("type", quote(type)); 
    if (name != null)
      properties.put("name", quote(name)); 
    try {
      return new ObjectName("com.hazelcast", properties);
    } catch (MalformedObjectNameException e) {
      throw new IllegalArgumentException(e);
    } 
  }
  
  public static String quote(String text) {
    return (Pattern.compile("[:\",=*?]").matcher(text).find() || text.indexOf('\n') >= 0) ? 
      ObjectName.quote(text) : text;
  }
}
