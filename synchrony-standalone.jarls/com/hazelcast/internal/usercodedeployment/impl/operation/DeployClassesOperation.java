package com.hazelcast.internal.usercodedeployment.impl.operation;

import com.hazelcast.internal.usercodedeployment.UserCodeDeploymentService;
import com.hazelcast.internal.usercodedeployment.impl.UserCodeDeploymentSerializerHook;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import com.hazelcast.spi.Operation;
import java.io.IOException;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class DeployClassesOperation extends Operation implements IdentifiedDataSerializable {
  private List<Map.Entry<String, byte[]>> classDefinitions;
  
  public DeployClassesOperation(List<Map.Entry<String, byte[]>> classDefinitions) { this.classDefinitions = classDefinitions; }
  
  public DeployClassesOperation() {}
  
  public void run() {
    UserCodeDeploymentService service = (UserCodeDeploymentService)getService();
    service.defineClasses(this.classDefinitions);
  }
  
  public String getServiceName() { return "user-code-deployment-service"; }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    out.writeInt(this.classDefinitions.size());
    for (Map.Entry<String, byte[]> classDefinition : this.classDefinitions) {
      out.writeUTF((String)classDefinition.getKey());
      out.writeByteArray((byte[])classDefinition.getValue());
    } 
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    int length = in.readInt();
    this.classDefinitions = new ArrayList(length);
    for (int i = 0; i < length; i++) {
      String className = in.readUTF();
      byte[] classDefinition = in.readByteArray();
      this.classDefinitions.add(new AbstractMap.SimpleEntry(className, classDefinition));
    } 
  }
  
  public int getFactoryId() { return UserCodeDeploymentSerializerHook.F_ID; }
  
  public int getId() { return 2; }
}
