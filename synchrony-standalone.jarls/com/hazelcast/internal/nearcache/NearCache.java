package com.hazelcast.internal.nearcache;

import com.hazelcast.internal.adapter.DataStructureAdapter;
import com.hazelcast.monitor.NearCacheStats;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.InitializingObject;
import com.hazelcast.spi.properties.HazelcastProperty;

public interface NearCache<K, V> extends InitializingObject {
  public static final int DEFAULT_EXPIRATION_TASK_INITIAL_DELAY_SECONDS = 5;
  
  public static final int DEFAULT_EXPIRATION_TASK_PERIOD_SECONDS = 5;
  
  public static final String PROP_EXPIRATION_TASK_INITIAL_DELAY_SECONDS = "hazelcast.internal.nearcache.expiration.task.initial.delay.seconds";
  
  public static final String PROP_EXPIRATION_TASK_PERIOD_SECONDS = "hazelcast.internal.nearcache.expiration.task.period.seconds";
  
  public static final HazelcastProperty TASK_INITIAL_DELAY_SECONDS = new HazelcastProperty("hazelcast.internal.nearcache.expiration.task.initial.delay.seconds", 
      
      Integer.valueOf(5));
  
  public static final HazelcastProperty TASK_PERIOD_SECONDS = new HazelcastProperty("hazelcast.internal.nearcache.expiration.task.period.seconds", 
      
      Integer.valueOf(5));
  
  public static final Object CACHED_AS_NULL = new Object();
  
  public static final Object NOT_CACHED = new Object();
  
  String getName();
  
  V get(K paramK);
  
  void put(K paramK, Data paramData1, V paramV, Data paramData2);
  
  void invalidate(K paramK);
  
  void clear();
  
  void destroy();
  
  int size();
  
  NearCacheStats getNearCacheStats();
  
  boolean isSerializeKeys();
  
  void preload(DataStructureAdapter<Object, ?> paramDataStructureAdapter);
  
  void storeKeys();
  
  boolean isPreloadDone();
  
  <T> T unwrap(Class<T> paramClass);
  
  long tryReserveForUpdate(K paramK, Data paramData);
  
  V tryPublishReserved(K paramK, V paramV, long paramLong, boolean paramBoolean);
}
