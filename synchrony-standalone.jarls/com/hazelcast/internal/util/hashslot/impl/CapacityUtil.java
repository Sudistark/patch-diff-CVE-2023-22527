package com.hazelcast.internal.util.hashslot.impl;

import com.hazelcast.util.QuickMath;

public final class CapacityUtil {
  public static final int MAX_INT_CAPACITY = 1073741824;
  
  public static final long MAX_LONG_CAPACITY = 4611686018427387904L;
  
  public static final int MIN_CAPACITY = 4;
  
  public static final int DEFAULT_CAPACITY = 16;
  
  public static final float DEFAULT_LOAD_FACTOR = 0.6F;
  
  public static long roundCapacity(long requestedCapacity) {
    if (requestedCapacity > 4611686018427387904L)
      throw new IllegalArgumentException(requestedCapacity + " is greater than max allowed capacity[" + 4611686018427387904L + "]."); 
    return Math.max(4L, QuickMath.nextPowerOfTwo(requestedCapacity));
  }
  
  public static int roundCapacity(int requestedCapacity) {
    if (requestedCapacity > 1073741824)
      throw new IllegalArgumentException(requestedCapacity + " is greater than max allowed capacity[" + 1073741824 + "]."); 
    return Math.max(4, QuickMath.nextPowerOfTwo(requestedCapacity));
  }
  
  public static int nextCapacity(int current) {
    assert current > 0 && Long.bitCount(current) == 1 : "Capacity must be a power of two.";
    if (current < 2)
      current = 2; 
    current <<= 1;
    if (current < 0)
      throw new RuntimeException("Maximum capacity exceeded."); 
    return current;
  }
  
  public static long nextCapacity(long current) {
    assert current > 0L && Long.bitCount(current) == 1 : "Capacity must be a power of two, but was " + current;
    if (current < 2L)
      current = 2L; 
    current <<= true;
    if (current < 0L)
      throw new RuntimeException("Maximum capacity exceeded."); 
    return current;
  }
}
