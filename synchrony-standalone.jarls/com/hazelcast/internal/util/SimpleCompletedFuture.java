package com.hazelcast.internal.util;

import com.hazelcast.core.ExecutionCallback;
import com.hazelcast.spi.InternalCompletableFuture;
import com.hazelcast.util.ExceptionUtil;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Executor;
import java.util.concurrent.TimeUnit;

public class SimpleCompletedFuture<E> extends Object implements InternalCompletableFuture<E> {
  private final Object result;
  
  public SimpleCompletedFuture(E result) { this.result = result; }
  
  public SimpleCompletedFuture(Throwable exceptionalResult) { this.result = exceptionalResult; }
  
  public E join() {
    if (this.result instanceof Throwable)
      ExceptionUtil.sneakyThrow((Throwable)this.result); 
    return (E)this.result;
  }
  
  public boolean complete(Object value) { return false; }
  
  public void andThen(ExecutionCallback<E> callback) {
    if (this.result instanceof Throwable) {
      callback.onFailure((Throwable)this.result);
    } else {
      callback.onResponse(this.result);
    } 
  }
  
  public void andThen(ExecutionCallback<E> callback, Executor executor) { executor.execute(new Object(this, callback)); }
  
  public boolean cancel(boolean mayInterruptIfRunning) { return false; }
  
  public boolean isCancelled() { return this.result instanceof java.util.concurrent.CancellationException; }
  
  public boolean isDone() { return true; }
  
  public E get() {
    if (this.result instanceof Throwable)
      throw new ExecutionException((Throwable)this.result); 
    return (E)this.result;
  }
  
  public E get(long timeout, TimeUnit unit) throws ExecutionException { return (E)get(); }
}
