package com.hazelcast.internal.util.sort;

import com.hazelcast.internal.memory.MemoryAccessor;

public class LongMemArrayQuickSorter extends MemArrayQuickSorter {
  private long pivot;
  
  public LongMemArrayQuickSorter(MemoryAccessor mem, long baseAddress) { super(mem, baseAddress); }
  
  protected void loadPivot(long index) { this.pivot = longAtIndex(index); }
  
  protected boolean isLessThanPivot(long index) { return (longAtIndex(index) < this.pivot); }
  
  protected boolean isGreaterThanPivot(long index) { return (longAtIndex(index) > this.pivot); }
  
  protected void swap(long index1, long index2) {
    long addrOfIndex1 = addrOfIndex(index1);
    long addrOfIndex2 = addrOfIndex(index2);
    long tmp = longAtAddress(addrOfIndex1);
    this.mem.putLong(addrOfIndex1, longAtAddress(addrOfIndex2));
    this.mem.putLong(addrOfIndex2, tmp);
  }
  
  private long addrOfIndex(long index) { return this.baseAddress + 8L * index; }
  
  private long longAtIndex(long index) { return longAtAddress(addrOfIndex(index)); }
  
  private long longAtAddress(long address) { return this.mem.getLong(address); }
}
