package com.hazelcast.internal.util.collection;

import com.hazelcast.internal.memory.MemoryAccessor;
import com.hazelcast.internal.memory.MemoryAllocator;
import com.hazelcast.internal.memory.MemoryManager;

public class HsaHeapMemoryManager implements MemoryManager {
  private static final int BLOCK_INDEX_BIT = 62;
  
  private static final int ALIGNMENT_BITS = 7;
  
  private static final int ADDR_TO_ARRAY_INDEX_SHIFT = 3;
  
  private static final int LOWEST_ADDRESS = 8;
  
  private final long[][] blocks = new long[2][];
  
  private final Allocator malloc = new Allocator(this, null);
  
  private final Accessor mem = new Accessor(this, null);
  
  public MemoryAllocator getAllocator() { return this.malloc; }
  
  public MemoryAccessor getAccessor() { return this.mem; }
  
  public void dispose() { this.malloc.dispose(); }
  
  public long getUsedMemory() {
    long used = 0L;
    for (long[] block : this.blocks)
      used += ((block != null) ? block.length : false); 
    return used;
  }
  
  final long[] addrToBlock(long address) {
    long[] block = this.blocks[addrToBlockIndex(address)];
    assert block != null : "Attempt to access non-allocated address " + address;
    return block;
  }
  
  static boolean isAligned(long address) { return ((address & 0x7L) == 0L); }
  
  static int addrToBlockIndex(long address) {
    assert address >= 8L && isAligned(address) : "Invalid address " + address;
    return (int)(address - 8L >> 62);
  }
  
  static int addrToArrayIndex(long address) { return (int)(address - 8L >> 3); }
}
