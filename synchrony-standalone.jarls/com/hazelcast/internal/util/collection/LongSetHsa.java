package com.hazelcast.internal.util.collection;

import com.hazelcast.internal.memory.MemoryManager;
import com.hazelcast.internal.util.hashslot.HashSlotArray8byteKey;
import com.hazelcast.internal.util.hashslot.impl.HashSlotArray8byteKeyNoValue;

public class LongSetHsa implements LongSet {
  private final long nullValue;
  
  private final HashSlotArray8byteKey hsa;
  
  public LongSetHsa(long nullValue, MemoryManager memMgr) { this(nullValue, memMgr, 16, 0.6F); }
  
  public LongSetHsa(long nullValue, MemoryManager memMgr, int initialCapacity, float loadFactor) {
    this.nullValue = nullValue;
    this.hsa = new HashSlotArray8byteKeyNoValue(nullValue, memMgr, initialCapacity, loadFactor);
    this.hsa.gotoNew();
  }
  
  public boolean add(long value) {
    assert value != this.nullValue : "add() called with null-sentinel value " + this.nullValue;
    return this.hsa.ensure(value).isNew();
  }
  
  public boolean remove(long value) {
    assert value != this.nullValue : "remove() called with null-sentinel value " + this.nullValue;
    return this.hsa.remove(value);
  }
  
  public boolean contains(long value) {
    assert value != this.nullValue : "contains() called with null-sentinel value " + this.nullValue;
    return (this.hsa.get(value) != 0L);
  }
  
  public long size() { return this.hsa.size(); }
  
  public boolean isEmpty() { return (size() == 0L); }
  
  public void clear() { this.hsa.clear(); }
  
  public LongCursor cursor() {
    assert this.hsa.address() >= 0L : "cursor() called on a disposed map";
    return new Cursor(this, null);
  }
  
  public void dispose() { this.hsa.dispose(); }
}
