package com.hazelcast.internal.serialization.impl;

import com.hazelcast.internal.serialization.InternalSerializationService;
import com.hazelcast.nio.Bits;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.serialization.SerializationService;
import com.hazelcast.version.Version;
import java.io.Closeable;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.nio.ByteOrder;

public class ObjectDataOutputStream extends VersionedObjectDataOutput implements ObjectDataOutput, Closeable {
  private final InternalSerializationService serializationService;
  
  private final DataOutputStream dataOut;
  
  private final ByteOrder byteOrder;
  
  public ObjectDataOutputStream(OutputStream outputStream, InternalSerializationService serializationService) {
    this.serializationService = serializationService;
    this.dataOut = new DataOutputStream(outputStream);
    this.byteOrder = serializationService.getByteOrder();
  }
  
  public void write(int b) throws IOException { this.dataOut.write(b); }
  
  public void write(byte[] b, int off, int len) throws IOException { this.dataOut.write(b, off, len); }
  
  public void writeBoolean(boolean v) throws IOException { this.dataOut.writeBoolean(v); }
  
  public void writeByte(int v) throws IOException { this.dataOut.writeByte(v); }
  
  public void writeShort(int v) throws IOException {
    if (bigEndian()) {
      this.dataOut.writeShort(v);
    } else {
      this.dataOut.writeShort(Short.reverseBytes((short)v));
    } 
  }
  
  public void writeChar(int v) throws IOException {
    if (bigEndian()) {
      this.dataOut.writeChar(v);
    } else {
      this.dataOut.writeChar(Character.reverseBytes((char)v));
    } 
  }
  
  public void writeInt(int v) throws IOException {
    if (bigEndian()) {
      this.dataOut.writeInt(v);
    } else {
      this.dataOut.writeInt(Integer.reverseBytes(v));
    } 
  }
  
  public void writeLong(long v) throws IOException {
    if (bigEndian()) {
      this.dataOut.writeLong(v);
    } else {
      this.dataOut.writeLong(Long.reverseBytes(v));
    } 
  }
  
  public void writeFloat(float v) throws IOException {
    if (bigEndian()) {
      this.dataOut.writeFloat(v);
    } else {
      writeInt(Float.floatToIntBits(v));
    } 
  }
  
  public void writeDouble(double v) throws IOException {
    if (bigEndian()) {
      this.dataOut.writeDouble(v);
    } else {
      writeLong(Double.doubleToLongBits(v));
    } 
  }
  
  public void writeBytes(String s) throws IOException { this.dataOut.writeBytes(s); }
  
  public void writeChars(String s) throws IOException {
    int len = s.length();
    for (int i = 0; i < len; i++) {
      int v = s.charAt(i);
      writeChar(v);
    } 
  }
  
  public void writeByteArray(byte[] bytes) throws IOException {
    int len = (bytes != null) ? bytes.length : -1;
    writeInt(len);
    if (len > 0)
      write(bytes); 
  }
  
  public void writeBooleanArray(boolean[] booleans) throws IOException {
    int len = (booleans != null) ? booleans.length : -1;
    writeInt(len);
    if (len > 0)
      for (boolean c : booleans)
        writeBoolean(c);  
  }
  
  public void writeCharArray(char[] chars) throws IOException {
    int len = (chars != null) ? chars.length : -1;
    writeInt(len);
    if (len > 0)
      for (char c : chars)
        writeChar(c);  
  }
  
  public void writeIntArray(int[] ints) throws IOException {
    int len = (ints != null) ? ints.length : -1;
    writeInt(len);
    if (len > 0)
      for (int i : ints)
        writeInt(i);  
  }
  
  public void writeLongArray(long[] longs) throws IOException {
    int len = (longs != null) ? longs.length : -1;
    writeInt(len);
    if (len > 0)
      for (long l : longs)
        writeLong(l);  
  }
  
  public void writeDoubleArray(double[] doubles) throws IOException {
    int len = (doubles != null) ? doubles.length : -1;
    writeInt(len);
    if (len > 0)
      for (double d : doubles)
        writeDouble(d);  
  }
  
  public void writeFloatArray(float[] floats) throws IOException {
    int len = (floats != null) ? floats.length : -1;
    writeInt(len);
    if (len > 0)
      for (float f : floats)
        writeFloat(f);  
  }
  
  public void writeShortArray(short[] shorts) throws IOException {
    int len = (shorts != null) ? shorts.length : -1;
    writeInt(len);
    if (len > 0)
      for (short s : shorts)
        writeShort(s);  
  }
  
  public void writeUTFArray(String[] strings) throws IOException {
    int len = (strings != null) ? strings.length : -1;
    writeInt(len);
    if (len > 0)
      for (String s : strings)
        writeUTF(s);  
  }
  
  public void writeUTF(String str) throws IOException {
    int len = (str != null) ? str.length() : -1;
    writeInt(len);
    if (len > 0) {
      byte[] buffer = new byte[3];
      for (int i = 0; i < len; i++) {
        int count = Bits.writeUtf8Char(buffer, 0, str.charAt(i));
        this.dataOut.write(buffer, 0, count);
      } 
    } 
  }
  
  public void write(byte[] b) throws IOException { this.dataOut.write(b); }
  
  public void writeObject(Object object) throws IOException { this.serializationService.writeObject(this, object); }
  
  public void writeData(Data data) throws IOException {
    byte[] payload = (data != null) ? data.toByteArray() : null;
    writeByteArray(payload);
  }
  
  public byte[] toByteArray() { return toByteArray(0); }
  
  public byte[] toByteArray(int padding) { throw new UnsupportedOperationException(); }
  
  public void flush() throws IOException { this.dataOut.flush(); }
  
  public void close() throws IOException { this.dataOut.close(); }
  
  public ByteOrder getByteOrder() { return this.byteOrder; }
  
  public SerializationService getSerializationService() { return this.serializationService; }
  
  private boolean bigEndian() { return (this.byteOrder == ByteOrder.BIG_ENDIAN); }
}
