package com.hazelcast.internal.serialization.impl;

import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.serialization.SerializationService;
import java.io.IOException;
import java.nio.ByteOrder;

final class EmptyObjectDataOutput extends VersionedObjectDataOutput implements ObjectDataOutput {
  public void writeObject(Object object) throws IOException {}
  
  public void writeData(Data data) throws IOException {}
  
  public void write(int b) throws IOException {}
  
  public void write(byte[] b) throws IOException {}
  
  public void write(byte[] b, int off, int len) throws IOException {}
  
  public void writeBoolean(boolean v) throws IOException {}
  
  public void writeByte(int v) throws IOException {}
  
  public void writeShort(int v) throws IOException {}
  
  public void writeChar(int v) throws IOException {}
  
  public void writeInt(int v) throws IOException {}
  
  public void writeLong(long v) throws IOException {}
  
  public void writeFloat(float v) throws IOException {}
  
  public void writeDouble(double v) throws IOException {}
  
  public void writeBytes(String s) throws IOException {}
  
  public void writeChars(String s) throws IOException {}
  
  public void writeUTF(String s) throws IOException {}
  
  public void writeByteArray(byte[] value) throws IOException {}
  
  public void writeBooleanArray(boolean[] booleans) throws IOException {}
  
  public void writeCharArray(char[] chars) throws IOException {}
  
  public void writeIntArray(int[] ints) throws IOException {}
  
  public void writeLongArray(long[] longs) throws IOException {}
  
  public void writeDoubleArray(double[] values) throws IOException {}
  
  public void writeFloatArray(float[] values) throws IOException {}
  
  public void writeShortArray(short[] values) throws IOException {}
  
  public void writeUTFArray(String[] values) throws IOException {}
  
  public byte[] toByteArray() { return toByteArray(0); }
  
  public byte[] toByteArray(int padding) { throw new UnsupportedOperationException(); }
  
  public void close() {}
  
  public ByteOrder getByteOrder() { return ByteOrder.BIG_ENDIAN; }
  
  public SerializationService getSerializationService() { return null; }
}
