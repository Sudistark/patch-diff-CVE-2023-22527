package com.hazelcast.internal.serialization.impl;

import com.hazelcast.nio.serialization.FieldDefinition;
import java.util.List;

final class PortablePositionFactory {
  private static final PortableSinglePosition NIL_NOT_LEAF = nil(false);
  
  private static final PortableSinglePosition NIL_LEAF_ANY = nil(true, true);
  
  private static final PortableSinglePosition NIL_NOT_LEAF_ANY = nil(false, true);
  
  private static final PortableSinglePosition EMPTY_LEAF_ANY = empty(true, true);
  
  private static final PortableSinglePosition EMPTY_NOT_LEAF_ANY = empty(false, true);
  
  static PortablePosition nilAnyPosition(boolean lastToken) { return lastToken ? NIL_LEAF_ANY : NIL_NOT_LEAF_ANY; }
  
  static PortablePosition emptyAnyPosition(boolean lastToken) { return lastToken ? EMPTY_LEAF_ANY : EMPTY_NOT_LEAF_ANY; }
  
  static PortablePosition nilNotLeafPosition() { return NIL_NOT_LEAF; }
  
  static PortableSinglePosition createSinglePrimitivePosition(FieldDefinition fd, int streamPosition, int index, boolean leaf) { return new PortableSinglePosition(fd, streamPosition, index, leaf); }
  
  static PortableSinglePosition createSinglePortablePosition(FieldDefinition fd, int streamPosition, int factoryId, int classId, boolean nil, boolean leaf) {
    PortableSinglePosition position = new PortableSinglePosition(fd, streamPosition, -1, leaf);
    PortableSinglePosition.access$002(position, factoryId);
    PortableSinglePosition.access$102(position, classId);
    PortableSinglePosition.access$202(position, nil);
    return position;
  }
  
  static PortableSinglePosition createSinglePortablePosition(FieldDefinition fd, int streamPosition, int factoryId, int classId, int index, int len, boolean leaf) {
    PortableSinglePosition position = new PortableSinglePosition(fd, streamPosition, index, leaf);
    PortableSinglePosition.access$002(position, factoryId);
    PortableSinglePosition.access$102(position, classId);
    PortableSinglePosition.access$302(position, len);
    PortableSinglePosition.access$202(position, isEmptyNil(position));
    return position;
  }
  
  static PortableMultiPosition createMultiPosition(PortablePosition position) { return new PortableMultiPosition(position); }
  
  static PortableMultiPosition createMultiPosition(List<PortablePosition> positions) { return new PortableMultiPosition(positions); }
  
  static PortableSinglePosition empty(boolean leaf, boolean any) {
    PortableSinglePosition position = new PortableSinglePosition();
    PortableSinglePosition.access$302(position, 0);
    PortableSinglePosition.access$402(position, leaf);
    PortableSinglePosition.access$502(position, any);
    PortableSinglePosition.access$202(position, isEmptyNil(position));
    return position;
  }
  
  private static boolean isEmptyNil(PortableSinglePosition position) { return (position.isEmpty() && (!position.isLeaf() || position.getIndex() >= 0)); }
  
  static PortableSinglePosition nil(boolean leaf) {
    PortableSinglePosition position = new PortableSinglePosition();
    PortableSinglePosition.access$202(position, true);
    PortableSinglePosition.access$402(position, leaf);
    return position;
  }
  
  static PortableSinglePosition nil(boolean leaf, boolean any) {
    PortableSinglePosition position = new PortableSinglePosition();
    PortableSinglePosition.access$202(position, true);
    PortableSinglePosition.access$402(position, leaf);
    PortableSinglePosition.access$502(position, any);
    return position;
  }
}
