package com.hazelcast.internal.serialization.impl.bufferpool;

import com.hazelcast.internal.serialization.InternalSerializationService;
import com.hazelcast.nio.BufferObjectDataInput;
import com.hazelcast.nio.BufferObjectDataOutput;
import com.hazelcast.nio.IOUtil;
import com.hazelcast.nio.serialization.Data;
import java.util.ArrayDeque;
import java.util.Queue;

public class BufferPoolImpl implements BufferPool {
  static final int MAX_POOLED_ITEMS = 3;
  
  protected final InternalSerializationService serializationService;
  
  final Queue<BufferObjectDataOutput> outputQueue;
  
  final Queue<BufferObjectDataInput> inputQueue;
  
  public BufferPoolImpl(InternalSerializationService serializationService) {
    this.outputQueue = new ArrayDeque(3);
    this.inputQueue = new ArrayDeque(3);
    this.serializationService = serializationService;
  }
  
  public BufferObjectDataOutput takeOutputBuffer() {
    BufferObjectDataOutput out = (BufferObjectDataOutput)this.outputQueue.poll();
    if (out == null)
      out = this.serializationService.createObjectDataOutput(); 
    return out;
  }
  
  public void returnOutputBuffer(BufferObjectDataOutput out) {
    if (out == null)
      return; 
    out.clear();
    offerOrClose(this.outputQueue, out);
  }
  
  public BufferObjectDataInput takeInputBuffer(Data data) {
    BufferObjectDataInput in = (BufferObjectDataInput)this.inputQueue.poll();
    if (in == null)
      in = this.serializationService.createObjectDataInput((byte[])null); 
    in.init(data.toByteArray(), 8);
    return in;
  }
  
  public void returnInputBuffer(BufferObjectDataInput in) {
    if (in == null)
      return; 
    in.clear();
    offerOrClose(this.inputQueue, in);
  }
  
  private static <C extends java.io.Closeable> void offerOrClose(Queue<C> queue, C item) {
    if (queue.size() == 3) {
      IOUtil.closeResource(item);
      return;
    } 
    queue.offer(item);
  }
}
