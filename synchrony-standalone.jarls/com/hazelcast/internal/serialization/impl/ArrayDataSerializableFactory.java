package com.hazelcast.internal.serialization.impl;

import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import com.hazelcast.nio.serialization.impl.VersionedDataSerializableFactory;
import com.hazelcast.util.ConstructorFunction;
import com.hazelcast.util.VersionAwareConstructorFunction;
import com.hazelcast.version.Version;

public final class ArrayDataSerializableFactory implements VersionedDataSerializableFactory {
  private final ConstructorFunction<Integer, IdentifiedDataSerializable>[] constructors;
  
  private final int len;
  
  public ArrayDataSerializableFactory(ConstructorFunction[] ctorArray) {
    if (ctorArray != null && ctorArray.length > 0) {
      this.len = ctorArray.length;
      this.constructors = new ConstructorFunction[this.len];
      System.arraycopy(ctorArray, 0, this.constructors, 0, this.len);
    } else {
      throw new IllegalArgumentException("ConstructorFunction array cannot be null");
    } 
  }
  
  public IdentifiedDataSerializable create(int typeId) {
    if (typeId >= 0 && typeId < this.len) {
      ConstructorFunction<Integer, IdentifiedDataSerializable> factory = this.constructors[typeId];
      return (factory != null) ? (IdentifiedDataSerializable)factory.createNew(Integer.valueOf(typeId)) : null;
    } 
    return null;
  }
  
  public IdentifiedDataSerializable create(int typeId, Version version) {
    if (typeId >= 0 && typeId < this.len) {
      ConstructorFunction<Integer, IdentifiedDataSerializable> factory = this.constructors[typeId];
      if (factory == null)
        return null; 
      if (factory instanceof VersionAwareConstructorFunction)
        return (IdentifiedDataSerializable)((VersionAwareConstructorFunction)factory)
          .createNew(Integer.valueOf(typeId), version); 
      return (IdentifiedDataSerializable)factory.createNew(Integer.valueOf(typeId));
    } 
    return null;
  }
}
