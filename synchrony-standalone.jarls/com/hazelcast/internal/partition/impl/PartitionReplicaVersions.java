package com.hazelcast.internal.partition.impl;

import com.hazelcast.spi.ServiceNamespace;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

final class PartitionReplicaVersions {
  private final int partitionId;
  
  private final Map<ServiceNamespace, PartitionReplicaFragmentVersions> fragmentVersionsMap;
  
  PartitionReplicaVersions(int partitionId) {
    this.fragmentVersionsMap = new HashMap();
    this.partitionId = partitionId;
  }
  
  long[] incrementAndGet(ServiceNamespace namespace, int backupCount) { return getFragmentVersions(namespace).incrementAndGet(backupCount); }
  
  long[] get(ServiceNamespace namespace) { return getFragmentVersions(namespace).get(); }
  
  boolean isStale(ServiceNamespace namespace, long[] newVersions, int replicaIndex) { return getFragmentVersions(namespace).isStale(newVersions, replicaIndex); }
  
  boolean update(ServiceNamespace namespace, long[] newVersions, int replicaIndex) { return getFragmentVersions(namespace).update(newVersions, replicaIndex); }
  
  void set(ServiceNamespace namespace, long[] newVersions, int fromReplica) { getFragmentVersions(namespace).set(newVersions, fromReplica); }
  
  boolean isDirty(ServiceNamespace namespace) { return getFragmentVersions(namespace).isDirty(); }
  
  void clear(ServiceNamespace namespace) { getFragmentVersions(namespace).clear(); }
  
  private PartitionReplicaFragmentVersions getFragmentVersions(ServiceNamespace namespace) {
    PartitionReplicaFragmentVersions fragmentVersions = (PartitionReplicaFragmentVersions)this.fragmentVersionsMap.get(namespace);
    if (fragmentVersions == null) {
      fragmentVersions = new PartitionReplicaFragmentVersions(this.partitionId, namespace);
      this.fragmentVersionsMap.put(namespace, fragmentVersions);
    } 
    return fragmentVersions;
  }
  
  void retainNamespaces(Set<ServiceNamespace> namespaces) { this.fragmentVersionsMap.keySet().retainAll(namespaces); }
  
  Collection<ServiceNamespace> getNamespaces() { return this.fragmentVersionsMap.keySet(); }
  
  public String toString() { return "PartitionReplicaVersions{partitionId=" + this.partitionId + ", fragmentVersions=" + this.fragmentVersionsMap + '}'; }
}
