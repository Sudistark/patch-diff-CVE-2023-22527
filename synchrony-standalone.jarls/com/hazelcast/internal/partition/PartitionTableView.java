package com.hazelcast.internal.partition;

import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import java.util.Arrays;

public class PartitionTableView {
  private final PartitionReplica[][] replicas;
  
  private final int version;
  
  @SuppressFBWarnings({"EI_EXPOSE_REP"})
  public PartitionTableView(PartitionReplica[][] replicas, int version) {
    this.replicas = replicas;
    this.version = version;
  }
  
  public PartitionTableView(InternalPartition[] partitions, int version) {
    PartitionReplica[][] a = new PartitionReplica[partitions.length][7];
    for (InternalPartition partition : partitions) {
      int partitionId = partition.getPartitionId();
      for (int replica = 0; replica < 7; replica++)
        a[partitionId][replica] = partition.getReplica(replica); 
    } 
    this.replicas = a;
    this.version = version;
  }
  
  public int getVersion() { return this.version; }
  
  public PartitionReplica getReplica(int partitionId, int replicaIndex) { return this.replicas[partitionId][replicaIndex]; }
  
  public int getLength() { return this.replicas.length; }
  
  public PartitionReplica[] getReplicas(int partitionId) {
    PartitionReplica[] a = this.replicas[partitionId];
    return (PartitionReplica[])Arrays.copyOf(a, a.length);
  }
  
  public boolean equals(Object o) {
    if (this == o)
      return true; 
    if (o == null || getClass() != o.getClass())
      return false; 
    PartitionTableView that = (PartitionTableView)o;
    return (this.version == that.version && Arrays.deepEquals(this.replicas, that.replicas));
  }
  
  public int hashCode() {
    result = Arrays.deepHashCode(this.replicas);
    return 31 * result + this.version;
  }
  
  public String toString() { return "PartitionTable{addresses=" + Arrays.deepToString(this.replicas) + ", version=" + this.version + '}'; }
}
