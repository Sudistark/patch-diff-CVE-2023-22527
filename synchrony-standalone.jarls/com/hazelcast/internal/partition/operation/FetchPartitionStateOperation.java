package com.hazelcast.internal.partition.operation;

import com.hazelcast.internal.partition.MigrationCycleOperation;
import com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl;
import com.hazelcast.logging.ILogger;
import com.hazelcast.nio.Address;
import com.hazelcast.spi.CallStatus;
import com.hazelcast.spi.ExceptionAction;
import com.hazelcast.spi.exception.RetryableHazelcastException;

public final class FetchPartitionStateOperation extends AbstractPartitionOperation implements MigrationCycleOperation {
  public void beforeRun() {
    Address caller = getCallerAddress();
    Address masterAddress = getNodeEngine().getMasterAddress();
    ILogger logger = getLogger();
    if (!caller.equals(masterAddress)) {
      String msg = caller + " requested our partition table but it's not our known master. Master: " + masterAddress;
      logger.warning(msg);
      throw new IllegalStateException(msg);
    } 
    InternalPartitionServiceImpl service = (InternalPartitionServiceImpl)getService();
    if (!service.isMemberMaster(caller)) {
      String msg = caller + " requested our partition table but it's not the master known by migration system.";
      logger.warning(msg);
      throw new RetryableHazelcastException(msg);
    } 
  }
  
  public CallStatus call() { return new OffloadImpl(this, null); }
  
  public ExceptionAction onInvocationException(Throwable throwable) {
    if (throwable instanceof com.hazelcast.core.MemberLeftException || throwable instanceof com.hazelcast.spi.exception.TargetNotMemberException || throwable instanceof com.hazelcast.spi.exception.CallerNotMemberException)
      return ExceptionAction.THROW_EXCEPTION; 
    return super.onInvocationException(throwable);
  }
  
  public String getServiceName() { return "hz:core:partitionService"; }
  
  public int getId() { return 4; }
}
