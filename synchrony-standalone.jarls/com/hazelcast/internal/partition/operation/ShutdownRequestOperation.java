package com.hazelcast.internal.partition.operation;

import com.hazelcast.instance.MemberImpl;
import com.hazelcast.internal.cluster.ClusterService;
import com.hazelcast.internal.partition.MigrationCycleOperation;
import com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl;
import com.hazelcast.logging.ILogger;
import com.hazelcast.nio.Address;

public class ShutdownRequestOperation extends AbstractPartitionOperation implements MigrationCycleOperation {
  public void run() {
    InternalPartitionServiceImpl partitionService = (InternalPartitionServiceImpl)getService();
    ILogger logger = getLogger();
    Address caller = getCallerAddress();
    if (partitionService.isLocalMemberMaster()) {
      ClusterService clusterService = getNodeEngine().getClusterService();
      MemberImpl memberImpl = clusterService.getMember(caller);
      if (memberImpl != null) {
        if (logger.isFinestEnabled())
          logger.finest("Received shutdown request from " + caller); 
        partitionService.onShutdownRequest(memberImpl);
      } else {
        logger.warning("Ignoring shutdown request from " + caller + " because it is not a member");
      } 
    } else {
      logger.warning("Received shutdown request from " + caller + " but this node is not master.");
    } 
  }
  
  public boolean returnsResponse() { return false; }
  
  public String getServiceName() { return "hz:core:partitionService"; }
  
  public int getId() { return 15; }
}
