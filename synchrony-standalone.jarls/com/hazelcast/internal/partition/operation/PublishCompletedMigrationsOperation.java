package com.hazelcast.internal.partition.operation;

import com.hazelcast.internal.partition.MigrationCycleOperation;
import com.hazelcast.internal.partition.MigrationInfo;
import com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.spi.ExceptionAction;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;

public class PublishCompletedMigrationsOperation extends AbstractPartitionOperation implements MigrationCycleOperation {
  private Collection<MigrationInfo> completedMigrations;
  
  private boolean success;
  
  public PublishCompletedMigrationsOperation() {}
  
  public PublishCompletedMigrationsOperation(Collection<MigrationInfo> completedMigrations) { this.completedMigrations = completedMigrations; }
  
  public void run() {
    InternalPartitionServiceImpl service = (InternalPartitionServiceImpl)getService();
    this.success = service.applyCompletedMigrations(this.completedMigrations, getCallerAddress());
  }
  
  public Object getResponse() { return Boolean.valueOf(this.success); }
  
  public String getServiceName() { return "hz:core:partitionService"; }
  
  public ExceptionAction onInvocationException(Throwable throwable) {
    if (throwable instanceof com.hazelcast.core.MemberLeftException || throwable instanceof com.hazelcast.spi.exception.TargetNotMemberException)
      return ExceptionAction.THROW_EXCEPTION; 
    return super.onInvocationException(throwable);
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    int len = in.readInt();
    this.completedMigrations = new ArrayList(len);
    for (int i = 0; i < len; i++) {
      MigrationInfo migrationInfo = (MigrationInfo)in.readObject();
      this.completedMigrations.add(migrationInfo);
    } 
  }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    int len = this.completedMigrations.size();
    out.writeInt(len);
    for (MigrationInfo migrationInfo : this.completedMigrations)
      out.writeObject(migrationInfo); 
  }
  
  public int getId() { return 22; }
}
