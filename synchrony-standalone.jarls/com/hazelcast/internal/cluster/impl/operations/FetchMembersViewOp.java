package com.hazelcast.internal.cluster.impl.operations;

import com.hazelcast.internal.cluster.impl.ClusterServiceImpl;
import com.hazelcast.internal.cluster.impl.MembersView;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.spi.ExceptionAction;
import java.io.IOException;

public class FetchMembersViewOp extends AbstractClusterOperation implements JoinOperation {
  private String targetUuid;
  
  private MembersView membersView;
  
  public FetchMembersViewOp() {}
  
  public FetchMembersViewOp(String targetUuid) { this.targetUuid = targetUuid; }
  
  public void run() {
    ClusterServiceImpl service = (ClusterServiceImpl)getService();
    String thisUuid = service.getLocalMember().getUuid();
    if (!this.targetUuid.equals(thisUuid))
      throw new IllegalStateException("Rejecting mastership claim, since target UUID[" + this.targetUuid + "] is not matching local member UUID[" + thisUuid + "]."); 
    this.membersView = service.handleMastershipClaim(getCallerAddress(), getCallerUuid());
  }
  
  public boolean returnsResponse() { return true; }
  
  public Object getResponse() { return this.membersView; }
  
  public ExceptionAction onInvocationException(Throwable throwable) {
    if (throwable instanceof com.hazelcast.core.MemberLeftException || throwable instanceof com.hazelcast.spi.exception.CallerNotMemberException)
      return ExceptionAction.THROW_EXCEPTION; 
    return super.onInvocationException(throwable);
  }
  
  public int getId() { return 36; }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException { out.writeUTF(this.targetUuid); }
  
  protected void readInternal(ObjectDataInput in) throws IOException { this.targetUuid = in.readUTF(); }
}
