package com.hazelcast.internal.cluster.impl.operations;

import com.hazelcast.internal.cluster.impl.ClusterServiceImpl;
import com.hazelcast.internal.cluster.impl.ClusterStateManager;
import com.hazelcast.nio.Address;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import com.hazelcast.spi.ExceptionAction;
import com.hazelcast.spi.Operation;
import com.hazelcast.spi.UrgentSystemOperation;
import com.hazelcast.spi.impl.AllowedDuringPassiveState;
import java.io.IOException;

public class RollbackClusterStateOp extends Operation implements AllowedDuringPassiveState, UrgentSystemOperation, IdentifiedDataSerializable {
  private Address initiator;
  
  private String txnId;
  
  private boolean response;
  
  public RollbackClusterStateOp() {}
  
  public RollbackClusterStateOp(Address initiator, String txnId) {
    this.initiator = initiator;
    this.txnId = txnId;
  }
  
  public void run() {
    ClusterServiceImpl service = (ClusterServiceImpl)getService();
    ClusterStateManager clusterStateManager = service.getClusterStateManager();
    getLogger().info("Rolling back cluster state! Initiator: " + this.initiator);
    this.response = clusterStateManager.rollbackClusterState(this.txnId);
  }
  
  public Object getResponse() { return Boolean.valueOf(this.response); }
  
  public String getServiceName() { return "hz:core:clusterService"; }
  
  public ExceptionAction onInvocationException(Throwable throwable) {
    if (throwable instanceof com.hazelcast.core.MemberLeftException || throwable instanceof com.hazelcast.spi.exception.TargetNotMemberException)
      return ExceptionAction.THROW_EXCEPTION; 
    return super.onInvocationException(throwable);
  }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    this.initiator.writeData(out);
    out.writeUTF(this.txnId);
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    this.initiator = new Address();
    this.initiator.readData(in);
    this.txnId = in.readUTF();
  }
  
  public int getFactoryId() { return 0; }
  
  public int getId() { return 23; }
}
