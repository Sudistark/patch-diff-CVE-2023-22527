package com.hazelcast.internal.cluster.impl.operations;

import com.hazelcast.internal.cluster.impl.ClusterServiceImpl;
import com.hazelcast.internal.cluster.impl.ClusterStateChange;
import com.hazelcast.internal.cluster.impl.ClusterStateManager;
import com.hazelcast.nio.Address;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import com.hazelcast.spi.ExceptionAction;
import com.hazelcast.spi.Operation;
import com.hazelcast.spi.UrgentSystemOperation;
import com.hazelcast.spi.impl.AllowedDuringPassiveState;
import java.io.IOException;

public class CommitClusterStateOp extends Operation implements AllowedDuringPassiveState, UrgentSystemOperation, IdentifiedDataSerializable {
  private ClusterStateChange stateChange;
  
  private Address initiator;
  
  private String txnId;
  
  private boolean isTransient;
  
  public CommitClusterStateOp() {}
  
  public CommitClusterStateOp(ClusterStateChange stateChange, Address initiator, String txnId, boolean isTransient) {
    this.stateChange = stateChange;
    this.initiator = initiator;
    this.txnId = txnId;
    this.isTransient = isTransient;
  }
  
  public void beforeRun() {
    if (this.stateChange == null)
      throw new IllegalArgumentException("Invalid null cluster state"); 
    this.stateChange.validate();
  }
  
  public void run() {
    ClusterServiceImpl service = (ClusterServiceImpl)getService();
    ClusterStateManager clusterStateManager = service.getClusterStateManager();
    getLogger().info(String.format("Changing cluster state from %s to %s, initiator: %s, transient: %s", new Object[] { clusterStateManager
            .stateToString(), this.stateChange, this.initiator, Boolean.valueOf(this.isTransient) }));
    clusterStateManager.commitClusterState(this.stateChange, this.initiator, this.txnId, this.isTransient);
  }
  
  public void logError(Throwable e) {
    if (e instanceof com.hazelcast.transaction.TransactionException || e instanceof IllegalStateException) {
      getLogger().severe(e.getMessage());
    } else {
      super.logError(e);
    } 
  }
  
  public ExceptionAction onInvocationException(Throwable throwable) {
    if (throwable instanceof com.hazelcast.core.MemberLeftException || throwable instanceof com.hazelcast.spi.exception.TargetNotMemberException)
      return ExceptionAction.THROW_EXCEPTION; 
    return super.onInvocationException(throwable);
  }
  
  public Object getResponse() { return Boolean.TRUE; }
  
  public String getServiceName() { return "hz:core:clusterService"; }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeObject(this.stateChange);
    this.initiator.writeData(out);
    out.writeUTF(this.txnId);
    out.writeBoolean(this.isTransient);
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    this.stateChange = (ClusterStateChange)in.readObject();
    this.initiator = new Address();
    this.initiator.readData(in);
    this.txnId = in.readUTF();
    this.isTransient = in.readBoolean();
  }
  
  public int getFactoryId() { return 0; }
  
  public int getId() { return 10; }
}
