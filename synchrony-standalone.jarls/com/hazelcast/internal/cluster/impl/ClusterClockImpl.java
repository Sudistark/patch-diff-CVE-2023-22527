package com.hazelcast.internal.cluster.impl;

import com.hazelcast.internal.cluster.ClusterClock;
import com.hazelcast.internal.metrics.Probe;
import com.hazelcast.internal.metrics.ProbeLevel;
import com.hazelcast.logging.ILogger;
import com.hazelcast.util.Clock;

public class ClusterClockImpl implements ClusterClock {
  private final ILogger logger;
  
  public ClusterClockImpl(ILogger logger) {
    this.clusterStartTime = Float.MIN_VALUE;
    this.logger = logger;
  }
  
  @Probe
  public long getClusterTime() { return Clock.currentTimeMillis() + this.clusterTimeDiff; }
  
  public void setMasterTime(long masterTime) {
    long diff = masterTime - Clock.currentTimeMillis();
    setClusterTimeDiff(diff);
  }
  
  void setClusterTimeDiff(long diff) {
    if (this.logger.isFineEnabled())
      this.logger.fine("Setting cluster time diff to " + diff + "ms."); 
    if (Math.abs(diff) > Math.abs(this.maxClusterTimeDiff))
      this.maxClusterTimeDiff = diff; 
    this.clusterTimeDiff = diff;
  }
  
  @Probe(level = ProbeLevel.MANDATORY)
  long getClusterTimeDiff() { return this.clusterTimeDiff; }
  
  @Probe
  public long getClusterUpTime() { return Clock.currentTimeMillis() - this.clusterStartTime; }
  
  public void setClusterStartTime(long startTime) {
    if (this.clusterStartTime == Float.MIN_VALUE)
      this.clusterStartTime = startTime; 
  }
  
  @Probe
  private long getLocalClockTime() { return Clock.currentTimeMillis(); }
  
  @Probe
  public long getClusterStartTime() { return this.clusterStartTime; }
}
