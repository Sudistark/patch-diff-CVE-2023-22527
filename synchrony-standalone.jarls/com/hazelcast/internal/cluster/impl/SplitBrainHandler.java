package com.hazelcast.internal.cluster.impl;

import com.hazelcast.cluster.ClusterState;
import com.hazelcast.cluster.Joiner;
import com.hazelcast.instance.Node;
import java.util.concurrent.atomic.AtomicBoolean;

final class SplitBrainHandler implements Runnable {
  private final Node node;
  
  private final AtomicBoolean inProgress;
  
  public SplitBrainHandler(Node node) {
    this.inProgress = new AtomicBoolean(false);
    this.node = node;
  }
  
  public void run() {
    if (!shouldRun())
      return; 
    if (this.inProgress.compareAndSet(false, true))
      try {
        searchForOtherClusters();
      } finally {
        this.inProgress.set(false);
      }  
  }
  
  private boolean shouldRun() {
    ClusterServiceImpl clusterService = this.node.getClusterService();
    if (!clusterService.isJoined())
      return false; 
    if (!clusterService.isMaster())
      return false; 
    if (!this.node.isRunning())
      return false; 
    ClusterJoinManager clusterJoinManager = clusterService.getClusterJoinManager();
    if (clusterJoinManager.isJoinInProgress())
      return false; 
    ClusterState clusterState = clusterService.getClusterState();
    return clusterState.isJoinAllowed();
  }
  
  private void searchForOtherClusters() {
    Joiner joiner = this.node.getJoiner();
    if (joiner != null)
      joiner.searchForOtherClusters(); 
  }
}
