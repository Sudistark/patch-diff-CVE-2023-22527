package com.hazelcast.internal.management;

import com.hazelcast.client.impl.ClientEngine;
import com.hazelcast.client.impl.ClientSelector;
import com.hazelcast.client.impl.ClientSelectors;
import com.hazelcast.internal.json.JsonObject;
import com.hazelcast.internal.management.dto.ClientBwListDTO;
import com.hazelcast.internal.management.dto.ClientBwListEntryDTO;
import com.hazelcast.logging.ILogger;
import com.hazelcast.logging.Logger;
import com.hazelcast.util.JsonUtil;
import java.util.List;
import java.util.regex.Pattern;

public class ClientBwListConfigHandler {
  private static final ILogger LOGGER = Logger.getLogger(ClientBwListConfigHandler.class);
  
  private final ClientEngine clientEngine;
  
  public ClientBwListConfigHandler(ClientEngine clientEngine) { this.clientEngine = clientEngine; }
  
  public void handleLostConnection() {
    try {
      this.clientEngine.applySelector(ClientSelectors.any());
    } catch (Exception e) {
      LOGGER.warning("Could not clean up client B/W list filtering.", e);
    } 
  }
  
  public void handleConfig(JsonObject configJson) {
    try {
      JsonObject bwListConfigJson = JsonUtil.getObject(configJson, "clientBwList");
      ClientBwListDTO configDTO = new ClientBwListDTO();
      configDTO.fromJson(bwListConfigJson);
      applyConfig(configDTO);
    } catch (Exception e) {
      LOGGER.warning("Could not apply client B/W list filtering.", e);
    } 
  }
  
  private void applyConfig(ClientBwListDTO configDTO) {
    ClientSelector selector = null;
    switch (null.$SwitchMap$com$hazelcast$internal$management$dto$ClientBwListDTO$Mode[configDTO.mode.ordinal()]) {
      case 1:
        selector = ClientSelectors.any();
        break;
      case 2:
        selector = createSelector(configDTO.entries);
        break;
      case 3:
        selector = ClientSelectors.inverse(createSelector(configDTO.entries));
        break;
      default:
        throw new IllegalArgumentException("Unknown client B/W list mode: " + configDTO.mode);
    } 
    this.clientEngine.applySelector(selector);
  }
  
  private static ClientSelector createSelector(List<ClientBwListEntryDTO> entries) {
    ClientSelector selector = ClientSelectors.none();
    for (ClientBwListEntryDTO entryDTO : entries) {
      ClientSelector entrySelector = createSelector(entryDTO);
      selector = ClientSelectors.or(new ClientSelector[] { selector, entrySelector });
    } 
    return selector;
  }
  
  private static ClientSelector createSelector(ClientBwListEntryDTO entry) {
    switch (null.$SwitchMap$com$hazelcast$internal$management$dto$ClientBwListEntryDTO$Type[entry.type.ordinal()]) {
      case 1:
        return ClientSelectors.ipSelector(entry.value);
      case 2:
        return ClientSelectors.nameSelector(sanitizeValueWithWildcards(entry.value));
      case 3:
        return ClientSelectors.labelSelector(sanitizeValueWithWildcards(entry.value));
    } 
    throw new IllegalArgumentException("Unknown client B/W list entry type: " + entry.type);
  }
  
  private static String sanitizeValueWithWildcards(String value) {
    String quoted = Pattern.quote(value);
    return quoted.replaceAll("\\*", "\\\\E.*\\\\Q");
  }
}
