package com.hazelcast.internal.management.dto;

import com.hazelcast.config.AliasedDiscoveryConfig;
import com.hazelcast.config.AwsConfig;
import com.hazelcast.config.AzureConfig;
import com.hazelcast.config.DiscoveryConfig;
import com.hazelcast.config.EurekaConfig;
import com.hazelcast.config.GcpConfig;
import com.hazelcast.config.KubernetesConfig;
import com.hazelcast.config.WANQueueFullBehavior;
import com.hazelcast.config.WanPublisherConfig;
import com.hazelcast.config.WanPublisherState;
import com.hazelcast.config.WanSyncConfig;
import com.hazelcast.internal.json.JsonObject;
import com.hazelcast.internal.json.JsonValue;
import com.hazelcast.internal.management.JsonSerializable;
import com.hazelcast.util.JsonUtil;
import com.hazelcast.util.MapUtil;

public class WanPublisherConfigDTO implements JsonSerializable {
  private WanPublisherConfig config;
  
  public WanPublisherConfigDTO() {}
  
  public WanPublisherConfigDTO(WanPublisherConfig config) { this.config = config; }
  
  public JsonObject toJson() {
    JsonObject root = new JsonObject();
    if (this.config.getGroupName() != null)
      root.add("groupName", this.config.getGroupName()); 
    if (this.config.getPublisherId() != null)
      root.add("publisherId", this.config.getPublisherId()); 
    root.add("queueCapacity", this.config.getQueueCapacity());
    if (this.config.getQueueFullBehavior() != null)
      root.add("queueFullBehavior", this.config.getQueueFullBehavior().getId()); 
    if (this.config.getInitialPublisherState() != null)
      root.add("initialPublisherState", this.config.getInitialPublisherState().getId()); 
    if (!MapUtil.isNullOrEmpty(this.config.getProperties()))
      root.add("properties", JsonUtil.toJsonObject(this.config.getProperties())); 
    if (this.config.getClassName() != null)
      root.add("className", this.config.getClassName()); 
    serializeAliasedDiscoveryConfig(root, "aws", this.config.getAwsConfig());
    serializeAliasedDiscoveryConfig(root, "gcp", this.config.getGcpConfig());
    serializeAliasedDiscoveryConfig(root, "azure", this.config.getAzureConfig());
    serializeAliasedDiscoveryConfig(root, "kubernetes", this.config.getKubernetesConfig());
    serializeAliasedDiscoveryConfig(root, "eureka", this.config.getEurekaConfig());
    DiscoveryConfig discoveryConfig = this.config.getDiscoveryConfig();
    if (discoveryConfig != null)
      root.add("discovery", (new DiscoveryConfigDTO(discoveryConfig)).toJson()); 
    WanSyncConfig syncConfig = this.config.getWanSyncConfig();
    if (syncConfig != null)
      root.add("sync", (new WanSyncConfigDTO(syncConfig)).toJson()); 
    return root;
  }
  
  public void fromJson(JsonObject json) {
    this.config = new WanPublisherConfig();
    JsonValue groupName = json.get("groupName");
    if (groupName != null && !groupName.isNull())
      this.config.setGroupName(groupName.asString()); 
    JsonValue publisherId = json.get("publisherId");
    if (publisherId != null && !publisherId.isNull())
      this.config.setPublisherId(publisherId.asString()); 
    JsonValue queueCapacity = json.get("queueCapacity");
    if (queueCapacity != null && !queueCapacity.isNull())
      this.config.setQueueCapacity(queueCapacity.asInt()); 
    JsonValue queueFullBehavior = json.get("queueFullBehavior");
    if (queueFullBehavior != null && !queueFullBehavior.isNull())
      this.config.setQueueFullBehavior(
          WANQueueFullBehavior.getByType(queueFullBehavior.asInt())); 
    JsonValue initialPublisherState = json.get("initialPublisherState");
    if (initialPublisherState != null && !initialPublisherState.isNull())
      this.config.setInitialPublisherState(
          WanPublisherState.getByType((byte)initialPublisherState.asInt())); 
    this.config.setProperties(JsonUtil.fromJsonObject((JsonObject)json.get("properties")));
    JsonValue className = json.get("className");
    if (className != null && !className.isNull())
      this.config.setClassName(className.asString()); 
    AwsConfig awsConfig = (AwsConfig)deserializeAliasedDiscoveryConfig(json, "aws");
    if (awsConfig != null)
      this.config.setAwsConfig(awsConfig); 
    GcpConfig gcpConfig = (GcpConfig)deserializeAliasedDiscoveryConfig(json, "gcp");
    if (gcpConfig != null)
      this.config.setGcpConfig(gcpConfig); 
    AzureConfig azureConfig = (AzureConfig)deserializeAliasedDiscoveryConfig(json, "azure");
    if (azureConfig != null)
      this.config.setAzureConfig(azureConfig); 
    KubernetesConfig kubernetesConfig = (KubernetesConfig)deserializeAliasedDiscoveryConfig(json, "kubernetes");
    if (kubernetesConfig != null)
      this.config.setKubernetesConfig(kubernetesConfig); 
    EurekaConfig eurekaConfig = (EurekaConfig)deserializeAliasedDiscoveryConfig(json, "eureka");
    if (eurekaConfig != null)
      this.config.setEurekaConfig(eurekaConfig); 
    JsonValue discoveryJson = json.get("discovery");
    if (discoveryJson != null && !discoveryJson.isNull()) {
      DiscoveryConfigDTO discoveryDTO = new DiscoveryConfigDTO();
      discoveryDTO.fromJson(discoveryJson.asObject());
      this.config.setDiscoveryConfig(discoveryDTO.getConfig());
    } 
    JsonValue syncJson = json.get("sync");
    if (syncJson != null && !syncJson.isNull()) {
      WanSyncConfigDTO syncDTO = new WanSyncConfigDTO();
      syncDTO.fromJson(syncJson.asObject());
      this.config.setWanSyncConfig(syncDTO.getConfig());
    } 
  }
  
  private AliasedDiscoveryConfig deserializeAliasedDiscoveryConfig(JsonObject json, String tag) {
    JsonValue configJson = json.get(tag);
    if (configJson != null && !configJson.isNull()) {
      AliasedDiscoveryConfigDTO dto = new AliasedDiscoveryConfigDTO(tag);
      dto.fromJson(configJson.asObject());
      return dto.getConfig();
    } 
    return null;
  }
  
  private void serializeAliasedDiscoveryConfig(JsonObject object, String tag, AliasedDiscoveryConfig config) {
    if (config != null)
      object.add(tag, (new AliasedDiscoveryConfigDTO(config)).toJson()); 
  }
  
  public WanPublisherConfig getConfig() { return this.config; }
}
