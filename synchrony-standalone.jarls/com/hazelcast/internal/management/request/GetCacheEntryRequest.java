package com.hazelcast.internal.management.request;

import com.hazelcast.cache.CacheEntryView;
import com.hazelcast.cache.ICache;
import com.hazelcast.instance.HazelcastInstanceCacheManager;
import com.hazelcast.internal.json.JsonObject;
import com.hazelcast.internal.management.ManagementCenterService;
import com.hazelcast.internal.serialization.InternalSerializationService;
import com.hazelcast.util.JsonUtil;

public class GetCacheEntryRequest implements ConsoleRequest {
  private static final GetCacheEntryViewEntryProcessor ENTRY_PROCESSOR = new GetCacheEntryViewEntryProcessor();
  
  private String cacheName;
  
  private String type;
  
  private String key;
  
  public GetCacheEntryRequest() {}
  
  public GetCacheEntryRequest(String type, String cacheName, String key) {
    this.type = type;
    this.cacheName = cacheName;
    this.key = key;
  }
  
  public int getType() { return 41; }
  
  public void writeResponse(ManagementCenterService mcs, JsonObject root) {
    InternalSerializationService serializationService = mcs.getHazelcastInstance().getSerializationService();
    HazelcastInstanceCacheManager cacheManager = mcs.getHazelcastInstance().getCacheManager();
    ICache<Object, Object> cache = cacheManager.getCache(this.cacheName);
    CacheEntryView cacheEntry = null;
    if ("string".equals(this.type)) {
      cacheEntry = (CacheEntryView)cache.invoke(this.key, ENTRY_PROCESSOR, new Object[0]);
    } else if ("long".equals(this.type)) {
      cacheEntry = (CacheEntryView)cache.invoke(Long.valueOf(this.key), ENTRY_PROCESSOR, new Object[0]);
    } else if ("integer".equals(this.type)) {
      cacheEntry = (CacheEntryView)cache.invoke(Integer.valueOf(this.key), ENTRY_PROCESSOR, new Object[0]);
    } 
    JsonObject result = new JsonObject();
    if (cacheEntry != null) {
      Object value = serializationService.toObject(cacheEntry.getValue());
      result.add("cacheBrowse_value", (value != null) ? value.toString() : "null");
      result.add("cacheBrowse_class", (value != null) ? value.getClass().getName() : "null");
      result.add("date_cache_creation_time", Long.toString(cacheEntry.getCreationTime()));
      result.add("date_cache_expiration_time", Long.toString(cacheEntry.getExpirationTime()));
      result.add("cacheBrowse_hits", Long.toString(cacheEntry.getAccessHit()));
      result.add("date_cache_access_time", Long.toString(cacheEntry.getLastAccessTime()));
    } 
    root.add("result", result);
  }
  
  public void fromJson(JsonObject json) {
    this.cacheName = JsonUtil.getString(json, "cacheName");
    this.type = JsonUtil.getString(json, "type");
    this.key = JsonUtil.getString(json, "key");
  }
}
