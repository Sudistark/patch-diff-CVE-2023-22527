package com.hazelcast.internal.ascii.rest;

import com.hazelcast.internal.ascii.TextProtocolsDataSerializerHook;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import com.hazelcast.util.StringUtil;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import java.io.IOException;

@SuppressFBWarnings({"EI_EXPOSE_REP"})
public class RestValue implements IdentifiedDataSerializable {
  private byte[] value;
  
  private byte[] contentType;
  
  public RestValue() {}
  
  public RestValue(byte[] value, byte[] contentType) {
    this.value = value;
    this.contentType = contentType;
  }
  
  public void readData(ObjectDataInput in) throws IOException {
    this.value = in.readByteArray();
    this.contentType = in.readByteArray();
  }
  
  public void writeData(ObjectDataOutput out) throws IOException {
    out.writeByteArray(this.value);
    out.writeByteArray(this.contentType);
  }
  
  public byte[] getContentType() { return this.contentType; }
  
  public void setContentType(byte[] contentType) { this.contentType = contentType; }
  
  public byte[] getValue() { return this.value; }
  
  public void setValue(byte[] value) { this.value = value; }
  
  public String toString() {
    String valueStr;
    String contentTypeStr;
    if (this.contentType == null) {
      contentTypeStr = "unknown-content-type";
    } else {
      contentTypeStr = StringUtil.bytesToString(this.contentType);
    } 
    if (this.value == null) {
      valueStr = "value.length=0";
    } else if (contentTypeStr.contains("text")) {
      valueStr = "value=\"" + StringUtil.bytesToString(this.value) + "\"";
    } else {
      valueStr = "value.length=" + this.value.length;
    } 
    return "RestValue{contentType='" + contentTypeStr + "', " + valueStr + '}';
  }
  
  public int getFactoryId() { return TextProtocolsDataSerializerHook.F_ID; }
  
  public int getId() { return 1; }
}
