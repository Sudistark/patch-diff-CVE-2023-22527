package com.hazelcast.internal.ascii.memcache;

import com.hazelcast.internal.ascii.TextCommandService;
import com.hazelcast.util.collection.ComposedKeyMap;
import com.hazelcast.util.collection.InternalSetMultimap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class BulkGetCommandProcessor extends MemcacheCommandProcessor<BulkGetCommand> {
  private final EntryConverter entryConverter;
  
  public BulkGetCommandProcessor(TextCommandService textCommandService, EntryConverter entryConverter) {
    super(textCommandService);
    this.entryConverter = entryConverter;
  }
  
  public void handle(BulkGetCommand request) {
    List<String> memcacheKeys = request.getKeys();
    InternalSetMultimap<String, String> keysPerMap = new InternalSetMultimap<String, String>();
    ComposedKeyMap<String, String, String> mapNameAndKey2memcacheKey = new ComposedKeyMap<String, String, String>();
    for (String memcacheKey : memcacheKeys) {
      MapNameAndKeyPair mapNameAndKeyPair = MemcacheUtils.parseMemcacheKey(memcacheKey);
      String mapName = mapNameAndKeyPair.getMapName();
      String hzKey = mapNameAndKeyPair.getKey();
      keysPerMap.put(mapName, hzKey);
      mapNameAndKey2memcacheKey.put(mapName, hzKey, memcacheKey);
    } 
    Collection<MemcacheEntry> allResults = new ArrayList<MemcacheEntry>();
    for (Map.Entry<String, Set<String>> mapKeys : keysPerMap.entrySet()) {
      String mapName = (String)mapKeys.getKey();
      Set<String> keys = (Set)mapKeys.getValue();
      Collection<MemcacheEntry> mapResult = getAll(mapName, keys, mapNameAndKey2memcacheKey);
      allResults.addAll(mapResult);
    } 
    int missCount = memcacheKeys.size() - allResults.size();
    for (int i = 0; i < missCount; i++)
      this.textCommandService.incrementGetMissCount(); 
    request.setResult(allResults);
    this.textCommandService.sendResponse(request);
  }
  
  private Collection<MemcacheEntry> getAll(String mapName, Set<String> keys, ComposedKeyMap<String, String, String> mapNameAndKey2memcacheKey) {
    Map<String, Object> entries = this.textCommandService.getAll(mapName, keys);
    Collection<MemcacheEntry> result = new ArrayList<MemcacheEntry>(entries.size());
    for (Map.Entry<String, Object> entry : entries.entrySet()) {
      String key = (String)entry.getKey();
      Object value = entry.getValue();
      String origKey = (String)mapNameAndKey2memcacheKey.get(mapName, key);
      MemcacheEntry memcacheEntry = this.entryConverter.toEntry(origKey, value);
      this.textCommandService.incrementGetHitCount();
      result.add(memcacheEntry);
    } 
    return result;
  }
  
  public void handleRejection(BulkGetCommand request) { throw new UnsupportedOperationException("not used, this method should be removed from the interface"); }
}
