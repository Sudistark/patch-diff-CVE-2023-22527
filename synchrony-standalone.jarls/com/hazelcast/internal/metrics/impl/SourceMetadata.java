package com.hazelcast.internal.metrics.impl;

import com.hazelcast.internal.metrics.Probe;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;

final class SourceMetadata {
  private final List<FieldProbe> fields = new ArrayList();
  
  private final List<MethodProbe> methods = new ArrayList();
  
  SourceMetadata(Class clazz) {
    List<Class<?>> classList = new ArrayList<Class<?>>();
    ProbeUtils.flatten(clazz, classList);
    for (Class flattenedClass : classList) {
      scanFields(flattenedClass);
      scanMethods(flattenedClass);
    } 
  }
  
  void register(MetricsRegistryImpl metricsRegistry, Object source, String namePrefix) {
    for (FieldProbe field : this.fields)
      field.register(metricsRegistry, source, namePrefix); 
    for (MethodProbe method : this.methods)
      method.register(metricsRegistry, source, namePrefix); 
  }
  
  private void scanFields(Class<?> clazz) {
    for (Field field : clazz.getDeclaredFields()) {
      Probe probe = (Probe)field.getAnnotation(Probe.class);
      if (probe != null) {
        FieldProbe fieldProbe = FieldProbe.createFieldProbe(field, probe);
        this.fields.add(fieldProbe);
      } 
    } 
  }
  
  private void scanMethods(Class<?> clazz) {
    for (Method method : clazz.getDeclaredMethods()) {
      Probe probe = (Probe)method.getAnnotation(Probe.class);
      if (probe != null) {
        MethodProbe methodProbe = MethodProbe.createMethodProbe(method, probe);
        this.methods.add(methodProbe);
      } 
    } 
  }
  
  public List<FieldProbe> fields() { return this.fields; }
  
  public List<MethodProbe> methods() { return this.methods; }
}
