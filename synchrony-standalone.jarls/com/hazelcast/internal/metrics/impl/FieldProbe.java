package com.hazelcast.internal.metrics.impl;

import com.hazelcast.internal.metrics.Probe;
import com.hazelcast.internal.metrics.ProbeFunction;
import java.lang.reflect.Field;

abstract class FieldProbe implements ProbeFunction {
  final Probe probe;
  
  final Field field;
  
  final int type;
  
  FieldProbe(Field field, Probe probe, int type) {
    this.field = field;
    this.probe = probe;
    this.type = type;
    field.setAccessible(true);
  }
  
  void register(MetricsRegistryImpl metricsRegistry, Object source, String namePrefix) {
    String name = namePrefix + '.' + getProbeOrFieldName();
    metricsRegistry.registerInternal(source, name, this.probe.level(), this);
  }
  
  void register(ProbeBuilderImpl builder, Object source) { builder
      .withTag("unit", this.probe.unit().name().toLowerCase())
      .register(source, getProbeOrFieldName(), this.probe.level(), this); }
  
  private String getProbeOrFieldName() { return (this.probe.name().length() != 0) ? this.probe.name() : this.field.getName(); }
  
  static <S> FieldProbe createFieldProbe(Field field, Probe probe) {
    int type = ProbeUtils.getType(field.getType());
    if (type == -1)
      throw new IllegalArgumentException(String.format("@Probe field '%s' is of an unhandled type", new Object[] { field })); 
    if (ProbeUtils.isDouble(type))
      return new DoubleFieldProbe(field, probe, type); 
    return new LongFieldProbe(field, probe, type);
  }
}
