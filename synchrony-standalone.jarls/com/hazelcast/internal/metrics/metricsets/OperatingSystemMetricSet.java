package com.hazelcast.internal.metrics.metricsets;

import com.hazelcast.internal.metrics.MetricsRegistry;
import com.hazelcast.internal.metrics.ProbeLevel;
import com.hazelcast.logging.ILogger;
import com.hazelcast.logging.Logger;
import com.hazelcast.util.OperatingSystemMXBeanSupport;
import com.hazelcast.util.Preconditions;
import java.lang.management.ManagementFactory;
import java.lang.management.OperatingSystemMXBean;
import java.lang.reflect.Method;
import java.util.logging.Level;

public final class OperatingSystemMetricSet {
  private static final ILogger LOGGER = Logger.getLogger(OperatingSystemMetricSet.class);
  
  private static final long PERCENTAGE_MULTIPLIER = 100L;
  
  private static final Object[] EMPTY_ARGS = new Object[0];
  
  public static void register(MetricsRegistry metricsRegistry) {
    Preconditions.checkNotNull(metricsRegistry, "metricsRegistry");
    OperatingSystemMXBean mxBean = ManagementFactory.getOperatingSystemMXBean();
    registerMethod(metricsRegistry, mxBean, "getCommittedVirtualMemorySize", "os.committedVirtualMemorySize");
    registerMethod(metricsRegistry, mxBean, "getFreePhysicalMemorySize", "os.freePhysicalMemorySize");
    registerMethod(metricsRegistry, mxBean, "getFreeSwapSpaceSize", "os.freeSwapSpaceSize");
    registerMethod(metricsRegistry, mxBean, "getProcessCpuTime", "os.processCpuTime");
    registerMethod(metricsRegistry, mxBean, "getTotalPhysicalMemorySize", "os.totalPhysicalMemorySize");
    registerMethod(metricsRegistry, mxBean, "getTotalSwapSpaceSize", "os.totalSwapSpaceSize");
    registerMethod(metricsRegistry, mxBean, "getMaxFileDescriptorCount", "os.maxFileDescriptorCount");
    registerMethod(metricsRegistry, mxBean, "getOpenFileDescriptorCount", "os.openFileDescriptorCount");
    registerMethod(metricsRegistry, mxBean, "getProcessCpuLoad", "os.processCpuLoad", 100L);
    registerMethod(metricsRegistry, mxBean, "getSystemCpuLoad", "os.systemCpuLoad", 100L);
    metricsRegistry.register(mxBean, "os.systemLoadAverage", ProbeLevel.MANDATORY, new Object());
  }
  
  static void registerMethod(MetricsRegistry metricsRegistry, Object osBean, String methodName, String name) {
    if (OperatingSystemMXBeanSupport.GET_FREE_PHYSICAL_MEMORY_SIZE_DISABLED && methodName
      .equals("getFreePhysicalMemorySize")) {
      metricsRegistry.register(osBean, name, ProbeLevel.MANDATORY, new Object());
    } else {
      registerMethod(metricsRegistry, osBean, methodName, name, 1L);
    } 
  }
  
  private static void registerMethod(MetricsRegistry metricsRegistry, Object osBean, String methodName, String name, long multiplier) {
    Method method = getMethod(osBean, methodName, name);
    if (method == null)
      return; 
    if (long.class.equals(method.getReturnType())) {
      metricsRegistry.register(osBean, name, ProbeLevel.MANDATORY, new Object(method, multiplier));
    } else {
      metricsRegistry.register(osBean, name, ProbeLevel.MANDATORY, new Object(method, multiplier));
    } 
  }
  
  private static Method getMethod(Object source, String methodName, String name) {
    try {
      Method method = source.getClass().getMethod(methodName, new Class[0]);
      method.setAccessible(true);
      return method;
    } catch (Exception e) {
      if (LOGGER.isFinestEnabled())
        LOGGER.log(Level.FINEST, "Unable to register OperatingSystemMXBean method " + methodName + " used for probe " + name, e); 
      return null;
    } 
  }
}
