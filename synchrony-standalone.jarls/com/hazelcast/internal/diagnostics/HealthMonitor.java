package com.hazelcast.internal.diagnostics;

import com.hazelcast.instance.Node;
import com.hazelcast.internal.metrics.MetricsRegistry;
import com.hazelcast.logging.ILogger;
import com.hazelcast.spi.properties.GroupProperty;

public class HealthMonitor {
  private static final String[] UNITS = { "", "K", "M", "G", "T", "P", "E" };
  
  private static final double PERCENTAGE_MULTIPLIER = 100.0D;
  
  private static final double THRESHOLD_PERCENTAGE_INVOCATIONS = 70.0D;
  
  private static final double THRESHOLD_INVOCATIONS = 1000.0D;
  
  final HealthMetrics healthMetrics;
  
  private final ILogger logger;
  
  private final Node node;
  
  private final HealthMonitorLevel monitorLevel;
  
  private final int thresholdMemoryPercentage;
  
  private final int thresholdCPUPercentage;
  
  private final MetricsRegistry metricRegistry;
  
  private final HealthMonitorThread monitorThread;
  
  public HealthMonitor(Node node) {
    this.node = node;
    this.logger = node.getLogger(HealthMonitor.class);
    this.metricRegistry = node.nodeEngine.getMetricsRegistry();
    this.monitorLevel = getHealthMonitorLevel();
    this.thresholdMemoryPercentage = node.getProperties().getInteger(GroupProperty.HEALTH_MONITORING_THRESHOLD_MEMORY_PERCENTAGE);
    this.thresholdCPUPercentage = node.getProperties().getInteger(GroupProperty.HEALTH_MONITORING_THRESHOLD_CPU_PERCENTAGE);
    this.monitorThread = initMonitorThread();
    this.healthMetrics = new HealthMetrics(this);
  }
  
  private HealthMonitorThread initMonitorThread() {
    if (this.monitorLevel == HealthMonitorLevel.OFF)
      return null; 
    int delaySeconds = this.node.getProperties().getSeconds(GroupProperty.HEALTH_MONITORING_DELAY_SECONDS);
    return new HealthMonitorThread(this, delaySeconds, null);
  }
  
  public HealthMonitor start() {
    if (this.monitorLevel == HealthMonitorLevel.OFF) {
      this.logger.finest("HealthMonitor is disabled");
      return this;
    } 
    this.monitorThread.start();
    this.logger.finest("HealthMonitor started");
    return this;
  }
  
  public void stop() {
    if (this.monitorLevel == HealthMonitorLevel.OFF)
      return; 
    this.monitorThread.interrupt();
    try {
      this.monitorThread.join();
    } catch (InterruptedException e) {
      Thread.currentThread().interrupt();
    } 
    this.logger.finest("HealthMonitor stopped");
  }
  
  private HealthMonitorLevel getHealthMonitorLevel() {
    String healthMonitorLevel = this.node.getProperties().getString(GroupProperty.HEALTH_MONITORING_LEVEL);
    return HealthMonitorLevel.valueOf(healthMonitorLevel);
  }
  
  private static String percentageString(double p) { return String.format("%.2f%%", new Object[] { Double.valueOf(p) }); }
  
  private static String numberToUnit(long number) {
    for (int i = 6; i > 0; i--) {
      double step = Math.pow(1024.0D, i);
      if (number > step)
        return String.format("%3.1f%s", new Object[] { Double.valueOf(number / step), UNITS[i] }); 
    } 
    return Long.toString(number);
  }
}
