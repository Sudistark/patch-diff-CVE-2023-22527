package com.hazelcast.internal.diagnostics;

import com.hazelcast.internal.networking.Networking;
import com.hazelcast.internal.networking.nio.NioNetworking;
import com.hazelcast.internal.networking.nio.NioThread;
import com.hazelcast.logging.ILogger;
import com.hazelcast.nio.NetworkingService;
import com.hazelcast.nio.tcp.TcpIpNetworkingService;
import com.hazelcast.spi.impl.NodeEngineImpl;
import com.hazelcast.spi.properties.HazelcastProperties;
import com.hazelcast.spi.properties.HazelcastProperty;
import java.util.concurrent.TimeUnit;

public class NetworkingImbalancePlugin extends DiagnosticsPlugin {
  public static final HazelcastProperty PERIOD_SECONDS = new HazelcastProperty("hazelcast.diagnostics.networking-imbalance.seconds", 
      Integer.valueOf(0), TimeUnit.SECONDS);
  
  private static final double HUNDRED = 100.0D;
  
  private final NioNetworking networking;
  
  private final long periodMillis;
  
  public NetworkingImbalancePlugin(NodeEngineImpl nodeEngine) { this(nodeEngine.getProperties(), getThreadingModel(nodeEngine), nodeEngine.getLogger(NetworkingImbalancePlugin.class)); }
  
  public NetworkingImbalancePlugin(HazelcastProperties properties, Networking networking, ILogger logger) {
    super(logger);
    if (networking instanceof NioNetworking) {
      this.networking = (NioNetworking)networking;
    } else {
      this.networking = null;
    } 
    this.periodMillis = (this.networking == null) ? 0L : properties.getMillis(PERIOD_SECONDS);
  }
  
  private static Networking getThreadingModel(NodeEngineImpl nodeEngine) {
    NetworkingService networkingService = nodeEngine.getNode().getNetworkingService();
    if (!(networkingService instanceof TcpIpNetworkingService))
      return null; 
    return ((TcpIpNetworkingService)networkingService).getNetworking();
  }
  
  public long getPeriodMillis() { return this.periodMillis; }
  
  public void onStart() { this.logger.info("Plugin:active: period-millis:" + this.periodMillis); }
  
  public void run(DiagnosticsLogWriter writer) {
    writer.startSection("NetworkingImbalance");
    writer.startSection("InputThreads");
    render(writer, this.networking.getInputThreads());
    writer.endSection();
    writer.startSection("OutputThreads");
    render(writer, this.networking.getOutputThreads());
    writer.endSection();
    writer.endSection();
  }
  
  private void render(DiagnosticsLogWriter writer, NioThread[] threads) {
    if (threads == null)
      return; 
    long totalPriorityFramesReceived = 0L;
    long totalFramesReceived = 0L;
    long totalBytesReceived = 0L;
    long totalEvents = 0L;
    long totalTaskCount = 0L;
    long totalHandleCount = 0L;
    for (NioThread thread : threads) {
      totalBytesReceived += thread.bytesTransceived();
      totalFramesReceived += thread.framesTransceived();
      totalPriorityFramesReceived += thread.priorityFramesTransceived();
      totalEvents += thread.eventCount();
      totalTaskCount += thread.completedTaskCount();
      totalHandleCount += thread.handleCount();
    } 
    for (NioThread thread : threads) {
      writer.startSection(thread.getName());
      writer.writeKeyValueEntry("frames-percentage", toPercentage(thread.framesTransceived(), totalFramesReceived));
      writer.writeKeyValueEntry("frames", thread.framesTransceived());
      writer.writeKeyValueEntry("priority-frames-percentage", 
          toPercentage(thread.priorityFramesTransceived(), totalPriorityFramesReceived));
      writer.writeKeyValueEntry("priority-frames", thread.priorityFramesTransceived());
      writer.writeKeyValueEntry("bytes-percentage", toPercentage(thread.bytesTransceived(), totalBytesReceived));
      writer.writeKeyValueEntry("bytes", thread.bytesTransceived());
      writer.writeKeyValueEntry("events-percentage", toPercentage(thread.eventCount(), totalEvents));
      writer.writeKeyValueEntry("events", thread.eventCount());
      writer.writeKeyValueEntry("handle-count-percentage", toPercentage(thread.handleCount(), totalHandleCount));
      writer.writeKeyValueEntry("handle-count", thread.handleCount());
      writer.writeKeyValueEntry("tasks-percentage", toPercentage(thread.completedTaskCount(), totalTaskCount));
      writer.writeKeyValueEntry("tasks", thread.completedTaskCount());
      writer.endSection();
    } 
  }
  
  private String toPercentage(long amount, long total) {
    double percentage;
    if (amount == 0L) {
      percentage = 0.0D;
    } else if (total == 0L) {
      percentage = NaND;
    } else {
      percentage = 100.0D * amount / total;
    } 
    return String.format("%1$,.2f", new Object[] { Double.valueOf(percentage) }) + " %";
  }
}
