package com.hazelcast.internal.json;

import com.hazelcast.nio.serialization.SerializableByConvention;
import java.io.IOException;
import java.io.Reader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;

@SerializableByConvention
public class JsonArray extends JsonValue implements Iterable<JsonValue> {
  private final List<JsonValue> values;
  
  public JsonArray() { this.values = new ArrayList(); }
  
  public JsonArray(JsonArray array) { this(array, false); }
  
  private JsonArray(JsonArray array, boolean unmodifiable) {
    if (array == null)
      throw new NullPointerException("array is null"); 
    if (unmodifiable) {
      this.values = Collections.unmodifiableList(array.values);
    } else {
      this.values = new ArrayList(array.values);
    } 
  }
  
  @Deprecated
  public static JsonArray readFrom(Reader reader) throws IOException { return JsonValue.readFrom(reader).asArray(); }
  
  @Deprecated
  public static JsonArray readFrom(String string) { return JsonValue.readFrom(string).asArray(); }
  
  public static JsonArray unmodifiableArray(JsonArray array) { return new JsonArray(array, true); }
  
  public JsonArray add(int value) {
    this.values.add(Json.value(value));
    return this;
  }
  
  public JsonArray add(long value) {
    this.values.add(Json.value(value));
    return this;
  }
  
  public JsonArray add(float value) {
    this.values.add(Json.value(value));
    return this;
  }
  
  public JsonArray add(double value) {
    this.values.add(Json.value(value));
    return this;
  }
  
  public JsonArray add(boolean value) {
    this.values.add(Json.value(value));
    return this;
  }
  
  public JsonArray add(String value) {
    this.values.add(Json.value(value));
    return this;
  }
  
  public JsonArray add(JsonValue value) {
    if (value == null)
      throw new NullPointerException("value is null"); 
    this.values.add(value);
    return this;
  }
  
  public JsonArray set(int index, int value) {
    this.values.set(index, Json.value(value));
    return this;
  }
  
  public JsonArray set(int index, long value) {
    this.values.set(index, Json.value(value));
    return this;
  }
  
  public JsonArray set(int index, float value) {
    this.values.set(index, Json.value(value));
    return this;
  }
  
  public JsonArray set(int index, double value) {
    this.values.set(index, Json.value(value));
    return this;
  }
  
  public JsonArray set(int index, boolean value) {
    this.values.set(index, Json.value(value));
    return this;
  }
  
  public JsonArray set(int index, String value) {
    this.values.set(index, Json.value(value));
    return this;
  }
  
  public JsonArray set(int index, JsonValue value) {
    if (value == null)
      throw new NullPointerException("value is null"); 
    this.values.set(index, value);
    return this;
  }
  
  public JsonArray remove(int index) {
    this.values.remove(index);
    return this;
  }
  
  public int size() { return this.values.size(); }
  
  public boolean isEmpty() { return this.values.isEmpty(); }
  
  public JsonValue get(int index) { return (JsonValue)this.values.get(index); }
  
  public List<JsonValue> values() { return Collections.unmodifiableList(this.values); }
  
  public Iterator<JsonValue> iterator() {
    Iterator<JsonValue> iterator = this.values.iterator();
    return new Object(this, iterator);
  }
  
  void write(JsonWriter writer) throws IOException {
    writer.writeArrayOpen();
    Iterator<JsonValue> iterator = iterator();
    if (iterator.hasNext()) {
      ((JsonValue)iterator.next()).write(writer);
      while (iterator.hasNext()) {
        writer.writeArraySeparator();
        ((JsonValue)iterator.next()).write(writer);
      } 
    } 
    writer.writeArrayClose();
  }
  
  public boolean isArray() { return true; }
  
  public JsonArray asArray() { return this; }
  
  public int hashCode() { return this.values.hashCode(); }
  
  public boolean equals(Object object) {
    if (this == object)
      return true; 
    if (object == null)
      return false; 
    if (getClass() != object.getClass())
      return false; 
    JsonArray other = (JsonArray)object;
    return this.values.equals(other.values);
  }
}
