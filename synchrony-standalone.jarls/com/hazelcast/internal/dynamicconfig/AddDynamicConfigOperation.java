package com.hazelcast.internal.dynamicconfig;

import com.hazelcast.internal.cluster.ClusterService;
import com.hazelcast.internal.cluster.impl.ClusterTopologyChangedException;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import com.hazelcast.spi.ExceptionAction;
import java.io.IOException;

public class AddDynamicConfigOperation extends AbstractDynamicConfigOperation {
  private IdentifiedDataSerializable config;
  
  private int memberListVersion;
  
  public AddDynamicConfigOperation() {}
  
  public AddDynamicConfigOperation(IdentifiedDataSerializable config, int memberListVersion) {
    this.config = config;
    this.memberListVersion = memberListVersion;
  }
  
  public void run() {
    ClusterWideConfigurationService service = (ClusterWideConfigurationService)getService();
    service.registerConfigLocally(this.config, ConfigCheckMode.THROW_EXCEPTION);
    ClusterService clusterService = getNodeEngine().getClusterService();
    if (clusterService.isMaster()) {
      int currentMemberListVersion = clusterService.getMemberListVersion();
      if (currentMemberListVersion != this.memberListVersion)
        throw new ClusterTopologyChangedException(
            String.format("Current member list version %d does not match expected %d", new Object[] { Integer.valueOf(currentMemberListVersion), 
                Integer.valueOf(this.memberListVersion) })); 
    } 
  }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    out.writeObject(this.config);
    out.writeInt(this.memberListVersion);
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    this.config = (IdentifiedDataSerializable)in.readObject();
    this.memberListVersion = in.readInt();
  }
  
  public int getId() { return 5; }
  
  public ExceptionAction onInvocationException(Throwable throwable) { return (throwable instanceof ClusterTopologyChangedException) ? ExceptionAction.THROW_EXCEPTION : super
      .onInvocationException(throwable); }
}
