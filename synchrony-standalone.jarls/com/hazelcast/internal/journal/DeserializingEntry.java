package com.hazelcast.internal.journal;

import com.hazelcast.core.HazelcastInstance;
import com.hazelcast.core.HazelcastInstanceAware;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import com.hazelcast.spi.impl.SerializationServiceSupport;
import com.hazelcast.spi.serialization.SerializationService;
import java.io.IOException;
import java.util.Map;

public class DeserializingEntry<K, V> extends Object implements Map.Entry<K, V>, HazelcastInstanceAware, IdentifiedDataSerializable {
  private Data dataKey;
  
  private Data dataValue;
  
  private K key;
  
  private V value;
  
  private SerializationService serializationService;
  
  DeserializingEntry() {}
  
  public DeserializingEntry(Data dataKey, Data dataValue) {
    this.dataKey = dataKey;
    this.dataValue = dataValue;
  }
  
  public K getKey() {
    if (this.key == null && this.dataKey != null)
      this.key = this.serializationService.toObject(this.dataKey); 
    return (K)this.key;
  }
  
  public V getValue() {
    if (this.value == null && this.dataValue != null)
      this.value = this.serializationService.toObject(this.dataValue); 
    return (V)this.value;
  }
  
  public V setValue(V value) { throw new UnsupportedOperationException(); }
  
  public String toString() { return debugInfo(this.key, this.dataKey) + "=" + debugInfo(this.value, this.dataValue); }
  
  private String debugInfo(Object deserialized, Data serialized) {
    if (deserialized != null)
      return deserialized.toString(); 
    if (serialized == null)
      return "{serialized, null}"; 
    return "{serialized, " + serialized.totalSize() + " bytes}";
  }
  
  public void setHazelcastInstance(HazelcastInstance hazelcastInstance) { this.serializationService = ((SerializationServiceSupport)hazelcastInstance).getSerializationService(); }
  
  public int getFactoryId() { return EventJournalDataSerializerHook.F_ID; }
  
  public int getId() { return 2; }
  
  public void writeData(ObjectDataOutput out) throws IOException {
    out.writeData(toData(this.key, this.dataKey));
    out.writeData(toData(this.value, this.dataValue));
  }
  
  public void readData(ObjectDataInput in) throws IOException {
    this.dataKey = in.readData();
    this.dataValue = in.readData();
  }
  
  private Data toData(Object value, Data defaultValue) { return (value != null) ? this.serializationService.toData(value) : defaultValue; }
}
