package com.hazelcast.internal.memory;

import java.lang.reflect.Field;

public interface HeapMemoryAccessor extends ByteAccessStrategy<Object> {
  public static final int ARRAY_BOOLEAN_BASE_OFFSET = GlobalMemoryAccessorRegistry.MEM_AVAILABLE ? GlobalMemoryAccessorRegistry.MEM.arrayBaseOffset(boolean[].class) : -1;
  
  public static final int ARRAY_BYTE_BASE_OFFSET = GlobalMemoryAccessorRegistry.MEM_AVAILABLE ? GlobalMemoryAccessorRegistry.MEM.arrayBaseOffset(byte[].class) : -1;
  
  public static final int ARRAY_SHORT_BASE_OFFSET = GlobalMemoryAccessorRegistry.MEM_AVAILABLE ? GlobalMemoryAccessorRegistry.MEM.arrayBaseOffset(short[].class) : -1;
  
  public static final int ARRAY_CHAR_BASE_OFFSET = GlobalMemoryAccessorRegistry.MEM_AVAILABLE ? GlobalMemoryAccessorRegistry.MEM.arrayBaseOffset(char[].class) : -1;
  
  public static final int ARRAY_INT_BASE_OFFSET = GlobalMemoryAccessorRegistry.MEM_AVAILABLE ? GlobalMemoryAccessorRegistry.MEM.arrayBaseOffset(int[].class) : -1;
  
  public static final int ARRAY_FLOAT_BASE_OFFSET = GlobalMemoryAccessorRegistry.MEM_AVAILABLE ? GlobalMemoryAccessorRegistry.MEM.arrayBaseOffset(float[].class) : -1;
  
  public static final int ARRAY_LONG_BASE_OFFSET = GlobalMemoryAccessorRegistry.MEM_AVAILABLE ? GlobalMemoryAccessorRegistry.MEM.arrayBaseOffset(long[].class) : -1;
  
  public static final int ARRAY_DOUBLE_BASE_OFFSET = GlobalMemoryAccessorRegistry.MEM_AVAILABLE ? GlobalMemoryAccessorRegistry.MEM.arrayBaseOffset(double[].class) : -1;
  
  public static final int ARRAY_OBJECT_BASE_OFFSET = GlobalMemoryAccessorRegistry.MEM_AVAILABLE ? GlobalMemoryAccessorRegistry.MEM.arrayBaseOffset(Object[].class) : -1;
  
  public static final int ARRAY_BOOLEAN_INDEX_SCALE = GlobalMemoryAccessorRegistry.MEM_AVAILABLE ? GlobalMemoryAccessorRegistry.MEM.arrayIndexScale(boolean[].class) : -1;
  
  public static final int ARRAY_BYTE_INDEX_SCALE = GlobalMemoryAccessorRegistry.MEM_AVAILABLE ? GlobalMemoryAccessorRegistry.MEM.arrayIndexScale(byte[].class) : -1;
  
  public static final int ARRAY_SHORT_INDEX_SCALE = GlobalMemoryAccessorRegistry.MEM_AVAILABLE ? GlobalMemoryAccessorRegistry.MEM.arrayIndexScale(short[].class) : -1;
  
  public static final int ARRAY_CHAR_INDEX_SCALE = GlobalMemoryAccessorRegistry.MEM_AVAILABLE ? GlobalMemoryAccessorRegistry.MEM.arrayIndexScale(char[].class) : -1;
  
  public static final int ARRAY_INT_INDEX_SCALE = GlobalMemoryAccessorRegistry.MEM_AVAILABLE ? GlobalMemoryAccessorRegistry.MEM.arrayIndexScale(int[].class) : -1;
  
  public static final int ARRAY_FLOAT_INDEX_SCALE = GlobalMemoryAccessorRegistry.MEM_AVAILABLE ? GlobalMemoryAccessorRegistry.MEM.arrayIndexScale(float[].class) : -1;
  
  public static final int ARRAY_LONG_INDEX_SCALE = GlobalMemoryAccessorRegistry.MEM_AVAILABLE ? GlobalMemoryAccessorRegistry.MEM.arrayIndexScale(long[].class) : -1;
  
  public static final int ARRAY_DOUBLE_INDEX_SCALE = GlobalMemoryAccessorRegistry.MEM_AVAILABLE ? GlobalMemoryAccessorRegistry.MEM.arrayIndexScale(double[].class) : -1;
  
  public static final int ARRAY_OBJECT_INDEX_SCALE = GlobalMemoryAccessorRegistry.MEM_AVAILABLE ? GlobalMemoryAccessorRegistry.MEM.arrayIndexScale(Object[].class) : -1;
  
  long objectFieldOffset(Field paramField);
  
  int arrayBaseOffset(Class<?> paramClass);
  
  int arrayIndexScale(Class<?> paramClass);
  
  void copyMemory(Object paramObject1, long paramLong1, Object paramObject2, long paramLong2, long paramLong3);
  
  Object getObject(Object paramObject, long paramLong);
  
  void putObject(Object paramObject1, long paramLong, Object paramObject2);
  
  boolean getBoolean(Object paramObject, long paramLong);
  
  void putBoolean(Object paramObject, long paramLong, boolean paramBoolean);
  
  byte getByte(Object paramObject, long paramLong);
  
  void putByte(Object paramObject, long paramLong, byte paramByte);
  
  char getChar(Object paramObject, long paramLong);
  
  void putChar(Object paramObject, long paramLong, char paramChar);
  
  short getShort(Object paramObject, long paramLong);
  
  void putShort(Object paramObject, long paramLong, short paramShort);
  
  int getInt(Object paramObject, long paramLong);
  
  void putInt(Object paramObject, long paramLong, int paramInt);
  
  float getFloat(Object paramObject, long paramLong);
  
  void putFloat(Object paramObject, long paramLong, float paramFloat);
  
  long getLong(Object paramObject, long paramLong);
  
  void putLong(Object paramObject, long paramLong1, long paramLong2);
  
  double getDouble(Object paramObject, long paramLong);
  
  void putDouble(Object paramObject, long paramLong, double paramDouble);
}
