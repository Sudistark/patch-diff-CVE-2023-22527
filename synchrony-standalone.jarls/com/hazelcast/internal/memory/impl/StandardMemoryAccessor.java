package com.hazelcast.internal.memory.impl;

import java.lang.reflect.Field;

public final class StandardMemoryAccessor extends UnsafeBasedMemoryAccessor {
  public static final StandardMemoryAccessor INSTANCE = UnsafeUtil.UNSAFE_AVAILABLE ? new StandardMemoryAccessor() : null;
  
  StandardMemoryAccessor() {
    if (!UnsafeUtil.UNSAFE_AVAILABLE)
      throw new IllegalStateException(getClass().getName() + " can only be used only when Unsafe is available!"); 
  }
  
  public boolean getBoolean(long address) { return UnsafeUtil.UNSAFE.getBoolean(null, address); }
  
  public void putBoolean(long address, boolean x) { UnsafeUtil.UNSAFE.putBoolean(null, address, x); }
  
  public byte getByte(long address) { return UnsafeUtil.UNSAFE.getByte(address); }
  
  public void putByte(long address, byte x) { UnsafeUtil.UNSAFE.putByte(address, x); }
  
  public char getChar(long address) { return UnsafeUtil.UNSAFE.getChar(address); }
  
  public void putChar(long address, char x) { UnsafeUtil.UNSAFE.putChar(address, x); }
  
  public short getShort(long address) { return UnsafeUtil.UNSAFE.getShort(address); }
  
  public void putShort(long address, short x) { UnsafeUtil.UNSAFE.putShort(address, x); }
  
  public int getInt(long address) { return UnsafeUtil.UNSAFE.getInt(address); }
  
  public void putInt(long address, int x) { UnsafeUtil.UNSAFE.putInt(address, x); }
  
  public float getFloat(long address) { return UnsafeUtil.UNSAFE.getFloat(address); }
  
  public void putFloat(long address, float x) { UnsafeUtil.UNSAFE.putFloat(address, x); }
  
  public long getLong(long address) { return UnsafeUtil.UNSAFE.getLong(address); }
  
  public void putLong(long address, long x) { UnsafeUtil.UNSAFE.putLong(address, x); }
  
  public double getDouble(long address) { return UnsafeUtil.UNSAFE.getDouble(address); }
  
  public void putDouble(long address, double x) { UnsafeUtil.UNSAFE.putDouble(address, x); }
  
  public void copyMemory(long srcAddress, long destAddress, long lengthBytes) { UnsafeUtil.UNSAFE.copyMemory(srcAddress, destAddress, lengthBytes); }
  
  public void copyFromByteArray(byte[] source, int offset, long destAddress, int length) { copyMemory(source, (ARRAY_BYTE_BASE_OFFSET + ARRAY_BYTE_INDEX_SCALE * offset), null, destAddress, length); }
  
  public void copyToByteArray(long srcAddress, byte[] destination, int offset, int length) { copyMemory(null, srcAddress, destination, (ARRAY_BYTE_BASE_OFFSET + ARRAY_BYTE_INDEX_SCALE * offset), length); }
  
  public void setMemory(long address, long lengthBytes, byte value) { UnsafeUtil.UNSAFE.setMemory(address, lengthBytes, value); }
  
  public boolean getBooleanVolatile(long address) { return UnsafeUtil.UNSAFE.getBooleanVolatile(null, address); }
  
  public void putBooleanVolatile(long address, boolean x) { UnsafeUtil.UNSAFE.putBooleanVolatile(null, address, x); }
  
  public byte getByteVolatile(long address) { return UnsafeUtil.UNSAFE.getByteVolatile(null, address); }
  
  public void putByteVolatile(long address, byte x) { UnsafeUtil.UNSAFE.putByteVolatile(null, address, x); }
  
  public char getCharVolatile(long address) { return UnsafeUtil.UNSAFE.getCharVolatile(null, address); }
  
  public void putCharVolatile(long address, char x) { UnsafeUtil.UNSAFE.putCharVolatile(null, address, x); }
  
  public short getShortVolatile(long address) { return UnsafeUtil.UNSAFE.getShortVolatile(null, address); }
  
  public void putShortVolatile(long address, short x) { UnsafeUtil.UNSAFE.putShortVolatile(null, address, x); }
  
  public int getIntVolatile(long address) { return UnsafeUtil.UNSAFE.getIntVolatile(null, address); }
  
  public void putIntVolatile(long address, int x) { UnsafeUtil.UNSAFE.putIntVolatile(null, address, x); }
  
  public float getFloatVolatile(long address) { return UnsafeUtil.UNSAFE.getFloatVolatile(null, address); }
  
  public void putFloatVolatile(long address, float x) { UnsafeUtil.UNSAFE.putFloatVolatile(null, address, x); }
  
  public long getLongVolatile(long address) { return UnsafeUtil.UNSAFE.getLongVolatile(null, address); }
  
  public void putLongVolatile(long address, long x) { UnsafeUtil.UNSAFE.putLongVolatile(null, address, x); }
  
  public double getDoubleVolatile(long address) { return UnsafeUtil.UNSAFE.getDoubleVolatile(null, address); }
  
  public void putDoubleVolatile(long address, double x) { UnsafeUtil.UNSAFE.putDoubleVolatile(null, address, x); }
  
  public boolean compareAndSwapInt(long address, int expected, int x) { return UnsafeUtil.UNSAFE.compareAndSwapInt(null, address, expected, x); }
  
  public boolean compareAndSwapLong(long address, long expected, long x) { return UnsafeUtil.UNSAFE.compareAndSwapLong(null, address, expected, x); }
  
  public boolean compareAndSwapObject(long address, Object expected, Object x) { return UnsafeUtil.UNSAFE.compareAndSwapObject(null, address, expected, x); }
  
  public void putOrderedInt(long address, int x) { UnsafeUtil.UNSAFE.putOrderedInt(null, address, x); }
  
  public void putOrderedLong(long address, long x) { UnsafeUtil.UNSAFE.putOrderedLong(null, address, x); }
  
  public void putOrderedObject(long address, Object x) { UnsafeUtil.UNSAFE.putOrderedObject(null, address, x); }
  
  public long objectFieldOffset(Field field) { return UnsafeUtil.UNSAFE.objectFieldOffset(field); }
  
  public int arrayBaseOffset(Class<?> arrayClass) { return UnsafeUtil.UNSAFE.arrayBaseOffset(arrayClass); }
  
  public int arrayIndexScale(Class<?> arrayClass) { return UnsafeUtil.UNSAFE.arrayIndexScale(arrayClass); }
  
  public Object getObject(Object base, long offset) { return UnsafeUtil.UNSAFE.getObject(base, offset); }
  
  public void putObject(Object base, long offset, Object x) { UnsafeUtil.UNSAFE.putObject(base, offset, x); }
  
  public boolean getBoolean(Object base, long offset) { return UnsafeUtil.UNSAFE.getBoolean(base, offset); }
  
  public void putBoolean(Object base, long offset, boolean x) { UnsafeUtil.UNSAFE.putBoolean(base, offset, x); }
  
  public byte getByte(Object base, long offset) { return UnsafeUtil.UNSAFE.getByte(base, offset); }
  
  public void putByte(Object base, long offset, byte x) { UnsafeUtil.UNSAFE.putByte(base, offset, x); }
  
  public char getChar(Object base, long offset) { return UnsafeUtil.UNSAFE.getChar(base, offset); }
  
  public void putChar(Object base, long offset, char x) { UnsafeUtil.UNSAFE.putChar(base, offset, x); }
  
  public short getShort(Object base, long offset) { return UnsafeUtil.UNSAFE.getShort(base, offset); }
  
  public void putShort(Object base, long offset, short x) { UnsafeUtil.UNSAFE.putShort(base, offset, x); }
  
  public int getInt(Object base, long offset) { return UnsafeUtil.UNSAFE.getInt(base, offset); }
  
  public void putInt(Object base, long offset, int x) { UnsafeUtil.UNSAFE.putInt(base, offset, x); }
  
  public float getFloat(Object base, long offset) { return UnsafeUtil.UNSAFE.getFloat(base, offset); }
  
  public void putFloat(Object base, long offset, float x) { UnsafeUtil.UNSAFE.putFloat(base, offset, x); }
  
  public long getLong(Object base, long offset) { return UnsafeUtil.UNSAFE.getLong(base, offset); }
  
  public void putLong(Object base, long offset, long x) { UnsafeUtil.UNSAFE.putLong(base, offset, x); }
  
  public double getDouble(Object base, long offset) { return UnsafeUtil.UNSAFE.getDouble(base, offset); }
  
  public void putDouble(Object base, long offset, double x) { UnsafeUtil.UNSAFE.putDouble(base, offset, x); }
  
  public void copyMemory(Object srcObj, long srcOffset, Object destObj, long destOffset, long lengthBytes) { UnsafeUtil.UNSAFE.copyMemory(srcObj, srcOffset, destObj, destOffset, lengthBytes); }
  
  public Object getObjectVolatile(Object base, long offset) { return UnsafeUtil.UNSAFE.getObjectVolatile(base, offset); }
  
  public void putObjectVolatile(Object base, long offset, Object x) { UnsafeUtil.UNSAFE.putObjectVolatile(base, offset, x); }
  
  public boolean getBooleanVolatile(Object base, long offset) { return UnsafeUtil.UNSAFE.getBooleanVolatile(base, offset); }
  
  public void putBooleanVolatile(Object base, long offset, boolean x) { UnsafeUtil.UNSAFE.putBooleanVolatile(base, offset, x); }
  
  public byte getByteVolatile(Object base, long offset) { return UnsafeUtil.UNSAFE.getByteVolatile(base, offset); }
  
  public void putByteVolatile(Object base, long offset, byte x) { UnsafeUtil.UNSAFE.putByteVolatile(base, offset, x); }
  
  public char getCharVolatile(Object base, long offset) { return UnsafeUtil.UNSAFE.getCharVolatile(base, offset); }
  
  public void putCharVolatile(Object base, long offset, char x) { UnsafeUtil.UNSAFE.putCharVolatile(base, offset, x); }
  
  public short getShortVolatile(Object base, long offset) { return UnsafeUtil.UNSAFE.getShortVolatile(base, offset); }
  
  public void putShortVolatile(Object base, long offset, short x) { UnsafeUtil.UNSAFE.putShortVolatile(base, offset, x); }
  
  public int getIntVolatile(Object base, long offset) { return UnsafeUtil.UNSAFE.getIntVolatile(base, offset); }
  
  public void putIntVolatile(Object base, long offset, int x) { UnsafeUtil.UNSAFE.putIntVolatile(base, offset, x); }
  
  public float getFloatVolatile(Object base, long offset) { return UnsafeUtil.UNSAFE.getFloatVolatile(base, offset); }
  
  public void putFloatVolatile(Object base, long offset, float x) { UnsafeUtil.UNSAFE.putFloatVolatile(base, offset, x); }
  
  public long getLongVolatile(Object base, long offset) { return UnsafeUtil.UNSAFE.getLongVolatile(base, offset); }
  
  public void putLongVolatile(Object base, long offset, long x) { UnsafeUtil.UNSAFE.putLongVolatile(base, offset, x); }
  
  public double getDoubleVolatile(Object base, long offset) { return UnsafeUtil.UNSAFE.getDoubleVolatile(base, offset); }
  
  public void putDoubleVolatile(Object base, long offset, double x) { UnsafeUtil.UNSAFE.putDoubleVolatile(base, offset, x); }
  
  public void putOrderedInt(Object base, long offset, int x) { UnsafeUtil.UNSAFE.putOrderedInt(base, offset, x); }
  
  public void putOrderedLong(Object base, long offset, long x) { UnsafeUtil.UNSAFE.putOrderedLong(base, offset, x); }
  
  public void putOrderedObject(Object base, long offset, Object x) { UnsafeUtil.UNSAFE.putOrderedObject(base, offset, x); }
  
  public boolean compareAndSwapInt(Object base, long offset, int expected, int x) { return UnsafeUtil.UNSAFE.compareAndSwapInt(base, offset, expected, x); }
  
  public boolean compareAndSwapLong(Object base, long offset, long expected, long x) { return UnsafeUtil.UNSAFE.compareAndSwapLong(base, offset, expected, x); }
  
  public boolean compareAndSwapObject(Object base, long offset, Object expected, Object x) { return UnsafeUtil.UNSAFE.compareAndSwapObject(base, offset, expected, x); }
}
