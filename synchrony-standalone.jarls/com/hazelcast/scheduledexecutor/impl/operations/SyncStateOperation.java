package com.hazelcast.scheduledexecutor.impl.operations;

import com.hazelcast.internal.serialization.impl.SerializationUtil;
import com.hazelcast.nio.Address;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.scheduledexecutor.impl.ScheduledTaskResult;
import com.hazelcast.scheduledexecutor.impl.ScheduledTaskStatisticsImpl;
import com.hazelcast.spi.Operation;
import java.io.IOException;
import java.util.Map;

public class SyncStateOperation extends AbstractBackupAwareSchedulerOperation {
  protected String taskName;
  
  protected Map<Object, Object> state;
  
  protected ScheduledTaskStatisticsImpl stats;
  
  protected ScheduledTaskResult result;
  
  private boolean shouldRun;
  
  public SyncStateOperation() {}
  
  public SyncStateOperation(String schedulerName, String taskName, Map state, ScheduledTaskStatisticsImpl stats, ScheduledTaskResult result) {
    super(schedulerName);
    this.taskName = taskName;
    this.state = state;
    this.stats = stats;
    this.result = result;
  }
  
  public void run() {
    int partitionId = getPartitionId();
    this.shouldRun = (partitionId == -1);
    if (partitionId >= 0) {
      Address partitionOwner = getNodeEngine().getPartitionService().getPartitionOwner(partitionId);
      this.shouldRun = (this.shouldRun || getCallerAddress().equals(partitionOwner));
    } 
    if (this.shouldRun)
      getContainer().syncState(this.taskName, this.state, this.stats, this.result); 
  }
  
  public boolean shouldBackup() { return (super.shouldBackup() && this.shouldRun); }
  
  public Operation getBackupOperation() { return new SyncBackupStateOperation(this.schedulerName, this.taskName, this.state, this.stats, this.result); }
  
  public int getId() { return 17; }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeUTF(this.taskName);
    SerializationUtil.writeMap(this.state, out);
    out.writeObject(this.stats);
    out.writeObject(this.result);
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    this.taskName = in.readUTF();
    this.state = SerializationUtil.readMap(in);
    this.stats = (ScheduledTaskStatisticsImpl)in.readObject();
    this.result = (ScheduledTaskResult)in.readObject();
  }
}
