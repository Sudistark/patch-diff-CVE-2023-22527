package com.hazelcast.ringbuffer.impl.operations;

import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.ringbuffer.impl.RingbufferContainer;
import com.hazelcast.spi.BlockingOperation;
import com.hazelcast.spi.ReadonlyOperation;
import com.hazelcast.spi.WaitNotifyKey;
import java.io.IOException;

public class ReadOneOperation extends AbstractRingBufferOperation implements BlockingOperation, ReadonlyOperation {
  private long sequence;
  
  private Data result;
  
  public ReadOneOperation() {}
  
  public ReadOneOperation(String name, long sequence) {
    super(name);
    this.sequence = sequence;
  }
  
  public void beforeRun() {
    RingbufferContainer ringbuffer = getRingBufferContainer();
    ringbuffer.checkBlockableReadSequence(this.sequence);
  }
  
  public boolean shouldWait() {
    RingbufferContainer ringbuffer = getRingBufferContainer();
    if (ringbuffer.isTooLargeSequence(this.sequence) || ringbuffer.isStaleSequence(this.sequence))
      return false; 
    return (this.sequence == ringbuffer.tailSequence() + 1L);
  }
  
  public void run() {
    RingbufferContainer ringbuffer = getRingBufferContainer();
    this.result = ringbuffer.readAsData(this.sequence);
  }
  
  public WaitNotifyKey getWaitKey() {
    RingbufferContainer ringbuffer = getRingBufferContainer();
    return ringbuffer.getRingEmptyWaitNotifyKey();
  }
  
  public void onWaitExpire() {}
  
  public Data getResponse() { return this.result; }
  
  public int getId() { return 4; }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeLong(this.sequence);
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    this.sequence = in.readLong();
  }
}
