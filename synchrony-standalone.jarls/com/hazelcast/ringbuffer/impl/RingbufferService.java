package com.hazelcast.ringbuffer.impl;

import com.hazelcast.config.Config;
import com.hazelcast.config.RingbufferConfig;
import com.hazelcast.core.DistributedObject;
import com.hazelcast.internal.config.ConfigValidator;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.partition.strategy.StringPartitioningStrategy;
import com.hazelcast.quorum.QuorumService;
import com.hazelcast.quorum.QuorumType;
import com.hazelcast.ringbuffer.impl.operations.ReplicationOperation;
import com.hazelcast.spi.DistributedObjectNamespace;
import com.hazelcast.spi.FragmentedMigrationAwareService;
import com.hazelcast.spi.ManagedService;
import com.hazelcast.spi.NodeEngine;
import com.hazelcast.spi.ObjectNamespace;
import com.hazelcast.spi.Operation;
import com.hazelcast.spi.PartitionMigrationEvent;
import com.hazelcast.spi.PartitionReplicationEvent;
import com.hazelcast.spi.QuorumAwareService;
import com.hazelcast.spi.RemoteService;
import com.hazelcast.spi.ServiceNamespace;
import com.hazelcast.spi.SplitBrainHandlerService;
import com.hazelcast.spi.impl.NodeEngineImpl;
import com.hazelcast.spi.partition.IPartitionService;
import com.hazelcast.spi.partition.MigrationEndpoint;
import com.hazelcast.spi.serialization.SerializationService;
import com.hazelcast.util.ConcurrencyUtil;
import com.hazelcast.util.ConstructorFunction;
import com.hazelcast.util.ContextMutexFactory;
import com.hazelcast.util.MapUtil;
import com.hazelcast.util.Preconditions;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

public class RingbufferService implements ManagedService, RemoteService, FragmentedMigrationAwareService, QuorumAwareService, SplitBrainHandlerService {
  public static final String TOPIC_RB_PREFIX = "_hz_rb_";
  
  public static final String SERVICE_NAME = "hz:impl:ringbufferService";
  
  private static final Object NULL_OBJECT = new Object();
  
  private final ConcurrentMap<Integer, Map<ObjectNamespace, RingbufferContainer>> containers;
  
  private final ConcurrentMap<String, Object> quorumConfigCache;
  
  private final ContextMutexFactory quorumConfigCacheMutexFactory;
  
  private final ConstructorFunction<String, Object> quorumConfigConstructor;
  
  private NodeEngine nodeEngine;
  
  private SerializationService serializationService;
  
  private IPartitionService partitionService;
  
  private QuorumService quorumService;
  
  public RingbufferService(NodeEngineImpl nodeEngine) {
    this.containers = new ConcurrentHashMap();
    this.quorumConfigCache = new ConcurrentHashMap();
    this.quorumConfigCacheMutexFactory = new ContextMutexFactory();
    this.quorumConfigConstructor = new Object(this);
    init(nodeEngine, null);
  }
  
  public void init(NodeEngine nodeEngine, Properties properties) {
    this.nodeEngine = (NodeEngine)Preconditions.checkNotNull(nodeEngine, "nodeEngine can't be null");
    this.serializationService = nodeEngine.getSerializationService();
    this.partitionService = nodeEngine.getPartitionService();
    this.quorumService = nodeEngine.getQuorumService();
  }
  
  public ConcurrentMap<Integer, Map<ObjectNamespace, RingbufferContainer>> getContainers() { return this.containers; }
  
  public DistributedObject createDistributedObject(String objectName) {
    RingbufferConfig ringbufferConfig = getRingbufferConfig(objectName);
    ConfigValidator.checkRingbufferConfig(ringbufferConfig, this.nodeEngine.getSplitBrainMergePolicyProvider());
    return new RingbufferProxy(this.nodeEngine, this, objectName, ringbufferConfig);
  }
  
  public void destroyDistributedObject(String name) {
    destroyContainer(getRingbufferPartitionId(name), getRingbufferNamespace(name));
    this.nodeEngine.getEventService().deregisterAllListeners("hz:impl:ringbufferService", name);
    this.quorumConfigCache.remove(name);
  }
  
  public void destroyContainer(int partitionId, ObjectNamespace namespace) {
    Map<ObjectNamespace, RingbufferContainer> partitionContainers = (Map)this.containers.get(Integer.valueOf(partitionId));
    if (partitionContainers == null)
      return; 
    partitionContainers.remove(namespace);
  }
  
  public void reset() { this.containers.clear(); }
  
  public void shutdown(boolean terminate) { reset(); }
  
  public <T, E> RingbufferContainer<T, E> getOrCreateContainer(int partitionId, ObjectNamespace namespace, RingbufferConfig config) {
    if (config == null)
      throw new NullPointerException("Ringbuffer config should not be null when ringbuffer is being created"); 
    Map<ObjectNamespace, RingbufferContainer> partitionContainers = getOrCreateRingbufferContainers(partitionId);
    RingbufferContainer<T, E> ringbuffer = (RingbufferContainer)partitionContainers.get(namespace);
    if (ringbuffer != null)
      return ringbuffer; 
    ringbuffer = new RingbufferContainer<T, E>(namespace, config, this.nodeEngine, partitionId);
    ringbuffer.getStore().instrument(this.nodeEngine);
    partitionContainers.put(namespace, ringbuffer);
    return ringbuffer;
  }
  
  public <T, E> RingbufferContainer<T, E> getContainerOrNull(int partitionId, ObjectNamespace namespace) {
    Map<ObjectNamespace, RingbufferContainer> partitionContainers = (Map)this.containers.get(Integer.valueOf(partitionId));
    return (partitionContainers != null) ? (RingbufferContainer)partitionContainers.get(namespace) : null;
  }
  
  private Map<ObjectNamespace, RingbufferContainer> getOrCreateRingbufferContainers(int partitionId) {
    Map<ObjectNamespace, RingbufferContainer> partitionContainer = (Map)this.containers.get(Integer.valueOf(partitionId));
    if (partitionContainer == null)
      this.containers.putIfAbsent(Integer.valueOf(partitionId), new HashMap()); 
    return (Map)this.containers.get(Integer.valueOf(partitionId));
  }
  
  public RingbufferConfig getRingbufferConfig(String name) {
    Config config = this.nodeEngine.getConfig();
    return config.findRingbufferConfig(getConfigName(name));
  }
  
  public static ObjectNamespace getRingbufferNamespace(String name) { return new DistributedObjectNamespace("hz:impl:ringbufferService", name); }
  
  public int getRingbufferPartitionId(String ringbufferName) {
    Data partitionAwareData = this.serializationService.toData(ringbufferName, StringPartitioningStrategy.INSTANCE);
    return this.partitionService.getPartitionId(partitionAwareData);
  }
  
  public void addRingbuffer(int partitionId, RingbufferContainer ringbuffer, RingbufferConfig config) {
    Preconditions.checkNotNull(ringbuffer, "ringbuffer can't be null");
    ringbuffer.init(config, this.nodeEngine);
    ringbuffer.getStore().instrument(this.nodeEngine);
    getOrCreateRingbufferContainers(partitionId).put(ringbuffer.getNamespace(), ringbuffer);
  }
  
  public void beforeMigration(PartitionMigrationEvent partitionMigrationEvent) {}
  
  public Operation prepareReplicationOperation(PartitionReplicationEvent event) { return prepareReplicationOperation(event, getAllServiceNamespaces(event)); }
  
  public Operation prepareReplicationOperation(PartitionReplicationEvent event, Collection<ServiceNamespace> namespaces) {
    int partitionId = event.getPartitionId();
    Map<ObjectNamespace, RingbufferContainer> partitionContainers = (Map)this.containers.get(Integer.valueOf(partitionId));
    if (MapUtil.isNullOrEmpty(partitionContainers))
      return null; 
    Map<ObjectNamespace, RingbufferContainer> migrationData = new HashMap<ObjectNamespace, RingbufferContainer>();
    for (ServiceNamespace namespace : namespaces) {
      ObjectNamespace ns = (ObjectNamespace)namespace;
      RingbufferContainer container = (RingbufferContainer)partitionContainers.get(ns);
      if (container != null && container.getConfig().getTotalBackupCount() >= event.getReplicaIndex())
        migrationData.put(ns, container); 
    } 
    if (migrationData.isEmpty())
      return null; 
    return new ReplicationOperation(migrationData, event.getPartitionId(), event.getReplicaIndex());
  }
  
  public void commitMigration(PartitionMigrationEvent event) {
    if (event.getMigrationEndpoint() == MigrationEndpoint.SOURCE)
      clearRingbuffersHavingLesserBackupCountThan(event.getPartitionId(), event.getNewReplicaIndex()); 
  }
  
  public void rollbackMigration(PartitionMigrationEvent event) {
    if (event.getMigrationEndpoint() == MigrationEndpoint.DESTINATION)
      clearRingbuffersHavingLesserBackupCountThan(event.getPartitionId(), event.getCurrentReplicaIndex()); 
  }
  
  private void clearRingbuffersHavingLesserBackupCountThan(int partitionId, int thresholdReplicaIndex) {
    Map<ObjectNamespace, RingbufferContainer> partitionContainers = (Map)this.containers.get(Integer.valueOf(partitionId));
    if (partitionContainers == null || partitionContainers.isEmpty())
      return; 
    Iterator<Map.Entry<ObjectNamespace, RingbufferContainer>> iterator = partitionContainers.entrySet().iterator();
    while (iterator.hasNext()) {
      Map.Entry<ObjectNamespace, RingbufferContainer> entry = (Map.Entry)iterator.next();
      RingbufferContainer container = (RingbufferContainer)entry.getValue();
      if (thresholdReplicaIndex < 0 || container.getConfig().getTotalBackupCount() < thresholdReplicaIndex)
        iterator.remove(); 
    } 
  }
  
  public Collection<ServiceNamespace> getAllServiceNamespaces(PartitionReplicationEvent event) {
    int partitionId = event.getPartitionId();
    Map<ObjectNamespace, RingbufferContainer> partitionContainers = (Map)this.containers.get(Integer.valueOf(partitionId));
    if (partitionContainers == null || partitionContainers.isEmpty())
      return Collections.emptyList(); 
    Set<ServiceNamespace> namespaces = new HashSet<ServiceNamespace>();
    for (RingbufferContainer container : partitionContainers.values()) {
      if (container.getConfig().getTotalBackupCount() < event.getReplicaIndex())
        continue; 
      namespaces.add(container.getNamespace());
    } 
    return namespaces;
  }
  
  public boolean isKnownServiceNamespace(ServiceNamespace namespace) { return namespace instanceof ObjectNamespace; }
  
  public String getQuorumName(String name) {
    Object quorumName = ConcurrencyUtil.getOrPutSynchronized(this.quorumConfigCache, name, this.quorumConfigCacheMutexFactory, this.quorumConfigConstructor);
    return (quorumName == NULL_OBJECT) ? null : (String)quorumName;
  }
  
  public void ensureQuorumPresent(String distributedObjectName, QuorumType requiredQuorumPermissionType) { this.quorumService.ensureQuorumPresent(getQuorumName(distributedObjectName), requiredQuorumPermissionType); }
  
  public Runnable prepareMergeRunnable() {
    RingbufferContainerCollector collector = new RingbufferContainerCollector(this.nodeEngine, this.containers);
    collector.run();
    return new Merger(this, collector);
  }
  
  private static String getConfigName(String name) {
    if (name.startsWith("_hz_rb_"))
      name = name.substring("_hz_rb_".length()); 
    return name;
  }
}
