package com.hazelcast.ringbuffer.impl.client;

import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.nio.serialization.Portable;
import com.hazelcast.nio.serialization.PortableReader;
import com.hazelcast.nio.serialization.PortableWriter;
import com.hazelcast.ringbuffer.ReadResultSet;
import com.hazelcast.spi.serialization.SerializationService;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;

public class PortableReadResultSet<E> extends Object implements Portable, ReadResultSet<E> {
  private long nextSeq;
  
  private long[] seqs;
  
  private List<Data> items;
  
  private int readCount;
  
  private SerializationService serializationService;
  
  public PortableReadResultSet() {}
  
  @SuppressFBWarnings({"EI_EXPOSE_REP2"})
  public PortableReadResultSet(int readCount, List<Data> items, long[] seqs, long nextSeq) {
    this.readCount = readCount;
    this.items = items;
    this.seqs = seqs;
    this.nextSeq = nextSeq;
  }
  
  public List<Data> getDataItems() { return this.items; }
  
  public void setSerializationService(SerializationService serializationService) { this.serializationService = serializationService; }
  
  public Iterator<E> iterator() {
    List<E> result = new ArrayList<E>(this.items.size());
    for (Data data : this.items)
      result.add(this.serializationService.toObject(data)); 
    return Collections.unmodifiableList(result).iterator();
  }
  
  public int readCount() { return this.readCount; }
  
  public E get(int index) {
    Data data = (Data)this.items.get(index);
    return (E)this.serializationService.toObject(data);
  }
  
  public long getSequence(int index) { return this.seqs[index]; }
  
  public int size() { return this.items.size(); }
  
  public long getNextSequenceToReadFrom() { return this.nextSeq; }
  
  public int getFactoryId() { return RingbufferPortableHook.F_ID; }
  
  public int getClassId() { return 10; }
  
  public void writePortable(PortableWriter writer) throws IOException {
    writer.writeInt("readCount", this.readCount);
    writer.writeInt("count", this.items.size());
    ObjectDataOutput rawDataOutput = writer.getRawDataOutput();
    for (Object item : this.items)
      rawDataOutput.writeData((Data)item); 
  }
  
  public void readPortable(PortableReader reader) throws IOException {
    this.readCount = reader.readInt("readCount");
    int size = reader.readInt("count");
    this.items = new ArrayList(size);
    ObjectDataInput rawDataInput = reader.getRawDataInput();
    for (int k = 0; k < size; k++) {
      Data item = rawDataInput.readData();
      this.items.add(item);
    } 
  }
}
