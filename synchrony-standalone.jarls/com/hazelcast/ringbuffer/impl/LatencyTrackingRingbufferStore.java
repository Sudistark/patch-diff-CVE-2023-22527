package com.hazelcast.ringbuffer.impl;

import com.hazelcast.core.RingbufferStore;
import com.hazelcast.internal.diagnostics.StoreLatencyPlugin;
import com.hazelcast.spi.ObjectNamespace;

class LatencyTrackingRingbufferStore<T> extends Object implements RingbufferStore<T> {
  static final String KEY = "RingbufferStoreLatency";
  
  private final StoreLatencyPlugin.LatencyProbe loadProbe;
  
  private final StoreLatencyPlugin.LatencyProbe getLargestSequenceProbe;
  
  private final StoreLatencyPlugin.LatencyProbe storeProbe;
  
  private final StoreLatencyPlugin.LatencyProbe storeAllProbe;
  
  private final RingbufferStore<T> delegate;
  
  LatencyTrackingRingbufferStore(RingbufferStore<T> delegate, StoreLatencyPlugin plugin, ObjectNamespace namespace) {
    String nsDescription = namespace.getServiceName() + ":" + namespace.getObjectName();
    this.delegate = delegate;
    this.loadProbe = plugin.newProbe("RingbufferStoreLatency", nsDescription, "load");
    this.getLargestSequenceProbe = plugin.newProbe("RingbufferStoreLatency", nsDescription, "getLargestSequence");
    this.storeProbe = plugin.newProbe("RingbufferStoreLatency", nsDescription, "store");
    this.storeAllProbe = plugin.newProbe("RingbufferStoreLatency", nsDescription, "storeAll");
  }
  
  public void store(long sequence, T data) {
    startNanos = System.nanoTime();
    try {
      this.delegate.store(sequence, data);
    } finally {
      this.storeProbe.recordValue(System.nanoTime() - startNanos);
    } 
  }
  
  public void storeAll(long firstItemSequence, T[] items) {
    startNanos = System.nanoTime();
    try {
      this.delegate.storeAll(firstItemSequence, items);
    } finally {
      this.storeAllProbe.recordValue(System.nanoTime() - startNanos);
    } 
  }
  
  public T load(long sequence) {
    startNanos = System.nanoTime();
    try {
      object = this.delegate.load(sequence);
      return (T)object;
    } finally {
      this.loadProbe.recordValue(System.nanoTime() - startNanos);
    } 
  }
  
  public long getLargestSequence() {
    startNanos = System.nanoTime();
    try {
      return this.delegate.getLargestSequence();
    } finally {
      this.getLargestSequenceProbe.recordValue(System.nanoTime() - startNanos);
    } 
  }
}
