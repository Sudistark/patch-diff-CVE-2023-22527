package com.hazelcast.ringbuffer.impl;

import com.hazelcast.config.InMemoryFormat;
import com.hazelcast.config.RingbufferStoreConfig;
import com.hazelcast.core.RingbufferStore;
import com.hazelcast.core.RingbufferStoreFactory;
import com.hazelcast.internal.diagnostics.Diagnostics;
import com.hazelcast.internal.diagnostics.StoreLatencyPlugin;
import com.hazelcast.internal.serialization.impl.HeapData;
import com.hazelcast.nio.ClassLoaderUtil;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.NodeEngine;
import com.hazelcast.spi.ObjectNamespace;
import com.hazelcast.spi.impl.NodeEngineImpl;
import com.hazelcast.spi.serialization.SerializationService;
import com.hazelcast.util.EmptyStatement;
import com.hazelcast.util.Preconditions;
import java.util.Arrays;

public final class RingbufferStoreWrapper extends Object implements RingbufferStore<Data> {
  private final ObjectNamespace namespace;
  
  private boolean enabled;
  
  private InMemoryFormat inMemoryFormat;
  
  private RingbufferStore store;
  
  private SerializationService serializationService;
  
  private RingbufferStoreWrapper(ObjectNamespace namespace) { this.namespace = namespace; }
  
  public static RingbufferStoreWrapper create(ObjectNamespace namespace, RingbufferStoreConfig storeConfig, InMemoryFormat inMemoryFormat, SerializationService serializationService, ClassLoader classLoader) {
    Preconditions.checkNotNull(namespace, "namespace should not be null");
    Preconditions.checkNotNull(serializationService, "serializationService should not be null");
    RingbufferStoreWrapper storeWrapper = new RingbufferStoreWrapper(namespace);
    storeWrapper.serializationService = serializationService;
    if (storeConfig == null || !storeConfig.isEnabled())
      return storeWrapper; 
    RingbufferStore ringbufferStore = createRingbufferStore(namespace, storeConfig, classLoader);
    if (ringbufferStore != null) {
      storeWrapper.enabled = storeConfig.isEnabled();
      storeWrapper.inMemoryFormat = inMemoryFormat;
      storeWrapper.store = ringbufferStore;
    } 
    return storeWrapper;
  }
  
  private static RingbufferStore createRingbufferStore(ObjectNamespace namespace, RingbufferStoreConfig storeConfig, ClassLoader classLoader) {
    RingbufferStore store = getRingbufferStore(storeConfig, classLoader);
    if (store == null)
      store = getRingbufferStoreFactory(namespace, storeConfig, classLoader); 
    return store;
  }
  
  private static RingbufferStore getRingbufferStore(RingbufferStoreConfig storeConfig, ClassLoader classLoader) {
    if (storeConfig == null)
      return null; 
    return (RingbufferStore)getOrInstantiate(storeConfig.getStoreImplementation(), classLoader, storeConfig.getClassName());
  }
  
  private static RingbufferStore getRingbufferStoreFactory(ObjectNamespace namespace, RingbufferStoreConfig storeConfig, ClassLoader classLoader) {
    if (storeConfig == null)
      return null; 
    RingbufferStoreFactory implementation = storeConfig.getFactoryImplementation();
    String className = storeConfig.getFactoryClassName();
    RingbufferStoreFactory factory = (RingbufferStoreFactory)getOrInstantiate(implementation, classLoader, className);
    return (factory == null) ? null : factory.newRingbufferStore(namespace.getObjectName(), storeConfig.getProperties());
  }
  
  private static <T> T getOrInstantiate(T instance, ClassLoader classLoader, String className) {
    if (instance != null)
      return instance; 
    try {
      return (T)ClassLoaderUtil.newInstance(classLoader, className);
    } catch (Exception ignored) {
      EmptyStatement.ignore(ignored);
      return null;
    } 
  }
  
  public boolean isEnabled() { return this.enabled; }
  
  void instrument(NodeEngine nodeEngine) {
    Diagnostics diagnostics = ((NodeEngineImpl)nodeEngine).getDiagnostics();
    StoreLatencyPlugin storeLatencyPlugin = (StoreLatencyPlugin)diagnostics.getPlugin(StoreLatencyPlugin.class);
    if (!this.enabled || storeLatencyPlugin == null)
      return; 
    this.store = new LatencyTrackingRingbufferStore(this.store, storeLatencyPlugin, this.namespace);
  }
  
  public void store(long sequence, Data value) {
    Object actualValue;
    if (isBinaryFormat()) {
      actualValue = Arrays.copyOf(value.toByteArray(), value.totalSize());
    } else {
      actualValue = this.serializationService.toObject(value);
    } 
    this.store.store(sequence, actualValue);
  }
  
  public void storeAll(long firstItemSequence, Data[] items) {
    Object[] storedItems = new Object[items.length];
    for (int i = 0; i < items.length; i++) {
      Data value = items[i];
      if (isBinaryFormat()) {
        storedItems[i] = Arrays.copyOf(value.toByteArray(), value.totalSize());
      } else {
        storedItems[i] = this.serializationService.toObject(value);
      } 
    } 
    this.store.storeAll(firstItemSequence, storedItems);
  }
  
  private boolean isBinaryFormat() { return (this.inMemoryFormat.equals(InMemoryFormat.BINARY) || this.inMemoryFormat.equals(InMemoryFormat.NATIVE)); }
  
  public Data load(long sequence) {
    Object val = this.store.load(sequence);
    if (val == null)
      return null; 
    if (isBinaryFormat()) {
      byte[] dataBuffer = (byte[])val;
      return new HeapData(Arrays.copyOf(dataBuffer, dataBuffer.length));
    } 
    return this.serializationService.toData(val);
  }
  
  public long getLargestSequence() { return this.store.getLargestSequence(); }
}
