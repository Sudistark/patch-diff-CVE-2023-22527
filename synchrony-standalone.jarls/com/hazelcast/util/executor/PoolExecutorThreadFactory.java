package com.hazelcast.util.executor;

import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.atomic.AtomicInteger;

public class PoolExecutorThreadFactory extends AbstractExecutorThreadFactory {
  private final String threadNamePrefix;
  
  private final AtomicInteger idGen = new AtomicInteger(0);
  
  private final Queue<Integer> idQ = new LinkedBlockingQueue(1000);
  
  public PoolExecutorThreadFactory(String threadNamePrefix, ClassLoader classLoader) {
    super(classLoader);
    this.threadNamePrefix = threadNamePrefix;
  }
  
  protected Thread createThread(Runnable r) {
    Integer id = (Integer)this.idQ.poll();
    if (id == null)
      id = Integer.valueOf(this.idGen.incrementAndGet()); 
    String name = this.threadNamePrefix + id;
    return createThread(r, name, id.intValue());
  }
  
  protected ManagedThread createThread(Runnable r, String name, int id) { return new ManagedThread(this, r, name, id); }
}
