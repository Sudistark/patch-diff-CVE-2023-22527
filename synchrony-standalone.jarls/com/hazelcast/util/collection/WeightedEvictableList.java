package com.hazelcast.util.collection;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class WeightedEvictableList<T> extends Object {
  private List<WeightedItem<T>> list;
  
  private final int maxSize;
  
  private final int maxVotesBeforeReorganization;
  
  private int reorganizationCounter;
  
  private final Comparator<WeightedItem<T>> itemComparator;
  
  public WeightedEvictableList(int maxSize, int maxVotesBeforeReorganization) {
    this.list = new ArrayList();
    this.itemComparator = new Object(this);
    this.maxSize = maxSize;
    this.maxVotesBeforeReorganization = maxVotesBeforeReorganization;
  }
  
  public List<WeightedItem<T>> getList() { return this.list; }
  
  public void voteFor(WeightedItem<T> weightedItem) {
    this.reorganizationCounter++;
    WeightedItem.access$000(weightedItem);
    if (this.reorganizationCounter == this.maxVotesBeforeReorganization) {
      this.reorganizationCounter = 0;
      organizeAndAdd(null);
    } 
  }
  
  public WeightedItem<T> addOrVote(T item) {
    for (int i = 0; i < this.list.size(); i++) {
      WeightedItem<T> weightedItem = (WeightedItem)this.list.get(i);
      if (weightedItem.item.equals(item)) {
        voteFor(weightedItem);
        return weightedItem;
      } 
    } 
    return organizeAndAdd(item);
  }
  
  public WeightedItem<T> getWeightedItem(int index) { return (WeightedItem)this.list.get(index); }
  
  public int size() { return this.list.size(); }
  
  WeightedItem<T> organizeAndAdd(T item) {
    Collections.sort(this.list, this.itemComparator);
    if (this.list.size() == this.maxSize && 
      item != null) {
      for (int i = this.list.size() - 1; i >= this.maxSize / 2; i--)
        this.list.remove(i); 
      for (WeightedItem<T> it : this.list)
        it.weight = 0; 
    } 
    WeightedItem<T> returnValue = null;
    if (item != null) {
      returnValue = new WeightedItem<T>(item);
      returnValue.weight = 1;
      this.list.add(returnValue);
    } 
    return returnValue;
  }
}
