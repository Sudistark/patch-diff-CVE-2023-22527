package com.hazelcast.org.snakeyaml.engine.v2.resolver;

import com.hazelcast.org.snakeyaml.engine.v2.nodes.Tag;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Pattern;

public class JsonScalarResolver implements ScalarResolver {
  public static final Pattern BOOL = Pattern.compile("^(?:true|false)$");
  
  public static final Pattern FLOAT = Pattern.compile("^(-?(0?\\.[0-9]+|[1-9][0-9]*(\\.[0-9]*)?)([eE][-+]?[0-9]+)?)$");
  
  public static final Pattern INT = Pattern.compile("^(?:-?(?:0|[1-9][0-9]*))$");
  
  public static final Pattern NULL = Pattern.compile("^(?:null)$");
  
  public static final Pattern EMPTY = Pattern.compile("^$");
  
  public static final Pattern ENV_FORMAT = Pattern.compile("^\\$\\{\\s*((?<name>\\w+)((?<separator>:?(-|\\?))(?<value>\\w+)?)?)\\s*\\}$");
  
  protected Map<Character, List<ResolverTuple>> yamlImplicitResolvers;
  
  public void addImplicitResolver(Tag tag, Pattern regexp, String first) {
    if (first == null) {
      List<ResolverTuple> curr = (List)this.yamlImplicitResolvers.computeIfAbsent(null, c -> new ArrayList());
      curr.add(new ResolverTuple(tag, regexp));
    } else {
      char[] chrs = first.toCharArray();
      for (int i = 0, j = chrs.length; i < j; i++) {
        Character theC = Character.valueOf(chrs[i]);
        if (theC.charValue() == '\000')
          theC = null; 
        List<ResolverTuple> curr = (List)this.yamlImplicitResolvers.get(theC);
        if (curr == null) {
          curr = new ArrayList<ResolverTuple>();
          this.yamlImplicitResolvers.put(theC, curr);
        } 
        curr.add(new ResolverTuple(tag, regexp));
      } 
    } 
  }
  
  protected void addImplicitResolvers() {
    addImplicitResolver(Tag.NULL, EMPTY, null);
    addImplicitResolver(Tag.BOOL, BOOL, "tf");
    addImplicitResolver(Tag.INT, INT, "-0123456789");
    addImplicitResolver(Tag.FLOAT, FLOAT, "-0123456789.");
    addImplicitResolver(Tag.NULL, NULL, "n\000");
    addImplicitResolver(Tag.ENV_TAG, ENV_FORMAT, "$");
  }
  
  public JsonScalarResolver() {
    this.yamlImplicitResolvers = new HashMap();
    addImplicitResolvers();
  }
  
  public Tag resolve(String value, Boolean implicit) {
    List<ResolverTuple> resolvers;
    if (!implicit.booleanValue())
      return Tag.STR; 
    if (value.length() == 0) {
      resolvers = (List)this.yamlImplicitResolvers.get(Character.valueOf(false));
    } else {
      resolvers = (List)this.yamlImplicitResolvers.get(Character.valueOf(value.charAt(0)));
    } 
    if (resolvers != null)
      for (ResolverTuple v : resolvers) {
        Tag tag = v.getTag();
        Pattern regexp = v.getRegexp();
        if (regexp.matcher(value).matches())
          return tag; 
      }  
    if (this.yamlImplicitResolvers.containsKey(null))
      for (ResolverTuple v : (List)this.yamlImplicitResolvers.get(null)) {
        Tag tag = v.getTag();
        Pattern regexp = v.getRegexp();
        if (regexp.matcher(value).matches())
          return tag; 
      }  
    return Tag.STR;
  }
}
