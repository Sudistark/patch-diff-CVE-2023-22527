package com.hazelcast.org.snakeyaml.engine.v2.scanner;

import com.hazelcast.org.snakeyaml.engine.v2.api.LoadSettings;
import com.hazelcast.org.snakeyaml.engine.v2.common.CharConstants;
import com.hazelcast.org.snakeyaml.engine.v2.exceptions.Mark;
import com.hazelcast.org.snakeyaml.engine.v2.exceptions.ReaderException;
import com.hazelcast.org.snakeyaml.engine.v2.exceptions.YamlEngineException;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.Arrays;
import java.util.Optional;

public final class StreamReader {
  private String name;
  
  private final Reader stream;
  
  private int[] dataWindow;
  
  private int dataLength;
  
  private int pointer;
  
  private boolean eof;
  
  private int index;
  
  private int line;
  
  private int column;
  
  private int bufferSize;
  
  private char[] buffer;
  
  private boolean useMarks;
  
  public StreamReader(Reader reader, LoadSettings loadSettings) {
    this.pointer = 0;
    this.index = 0;
    this.line = 0;
    this.column = 0;
    this.name = loadSettings.getLabel();
    this.dataWindow = new int[0];
    this.dataLength = 0;
    this.stream = reader;
    this.eof = false;
    this.bufferSize = loadSettings.getBufferSize().intValue();
    this.buffer = new char[this.bufferSize];
    this.useMarks = loadSettings.getUseMarks();
  }
  
  public StreamReader(String stream, LoadSettings loadSettings) { this(new StringReader(stream), loadSettings); }
  
  public static final boolean isPrintable(String data) {
    int length = data.length();
    int offset = 0;
    while (offset < length) {
      int codePoint = data.codePointAt(offset);
      if (!isPrintable(codePoint))
        return false; 
      offset += Character.charCount(codePoint);
    } 
    return true;
  }
  
  public static boolean isPrintable(int c) { return ((c >= 32 && c <= 126) || c == 9 || c == 10 || c == 13 || c == 133 || (c >= 160 && c <= 55295) || (c >= 57344 && c <= 65533) || (c >= 65536 && c <= 1114111)); }
  
  public Optional<Mark> getMark() {
    if (this.useMarks)
      return Optional.of(new Mark(this.name, this.index, this.line, this.column, this.dataWindow, this.pointer)); 
    return Optional.empty();
  }
  
  public void forward() { forward(1); }
  
  public void forward(int length) {
    for (int i = 0; i < length && ensureEnoughData(); i++) {
      int c = this.dataWindow[this.pointer++];
      this.index++;
      if (CharConstants.LINEBR.has(c) || (c == 13 && 
        ensureEnoughData() && this.dataWindow[this.pointer] != 10)) {
        this.line++;
        this.column = 0;
      } else if (c != 65279) {
        this.column++;
      } 
    } 
  }
  
  public int peek() { return ensureEnoughData() ? this.dataWindow[this.pointer] : 0; }
  
  public int peek(int index) { return ensureEnoughData(index) ? this.dataWindow[this.pointer + index] : 0; }
  
  public String prefix(int length) {
    if (length == 0)
      return ""; 
    if (ensureEnoughData(length))
      return new String(this.dataWindow, this.pointer, length); 
    return new String(this.dataWindow, this.pointer, Math.min(length, this.dataLength - this.pointer));
  }
  
  public String prefixForward(int length) {
    String prefix = prefix(length);
    this.pointer += length;
    this.index += length;
    this.column += length;
    return prefix;
  }
  
  private boolean ensureEnoughData() { return ensureEnoughData(0); }
  
  private boolean ensureEnoughData(int size) {
    if (!this.eof && this.pointer + size >= this.dataLength)
      update(); 
    return (this.pointer + size < this.dataLength);
  }
  
  private void update() {
    try {
      int read = this.stream.read(this.buffer, 0, this.bufferSize - 1);
      if (read > 0) {
        int cpIndex = this.dataLength - this.pointer;
        this.dataWindow = Arrays.copyOfRange(this.dataWindow, this.pointer, this.dataLength + read);
        if (Character.isHighSurrogate(this.buffer[read - 1]))
          if (this.stream.read(this.buffer, read, 1) == -1) {
            this.eof = true;
          } else {
            read++;
          }  
        int nonPrintable = 32;
        int i = 0;
        while (i < read) {
          int codePoint = Character.codePointAt(this.buffer, i);
          this.dataWindow[cpIndex] = codePoint;
          if (isPrintable(codePoint)) {
            i += Character.charCount(codePoint);
          } else {
            nonPrintable = codePoint;
            i = read;
          } 
          cpIndex++;
        } 
        this.dataLength = cpIndex;
        this.pointer = 0;
        if (nonPrintable != 32)
          throw new ReaderException(this.name, cpIndex - 1, nonPrintable, "special characters are not allowed"); 
      } else {
        this.eof = true;
      } 
    } catch (IOException ioe) {
      throw new YamlEngineException(ioe);
    } 
  }
  
  public int getColumn() { return this.column; }
  
  public int getIndex() { return this.index; }
  
  public int getLine() { return this.line; }
}
