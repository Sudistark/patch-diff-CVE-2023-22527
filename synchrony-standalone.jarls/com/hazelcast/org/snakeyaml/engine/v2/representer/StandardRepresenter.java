package com.hazelcast.org.snakeyaml.engine.v2.representer;

import com.hazelcast.org.snakeyaml.engine.v2.api.DumpSettings;
import com.hazelcast.org.snakeyaml.engine.v2.nodes.Tag;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Pattern;

public class StandardRepresenter extends BaseRepresenter {
  protected Map<Class<? extends Object>, Tag> classTags;
  
  protected DumpSettings settings;
  
  public StandardRepresenter(DumpSettings settings) {
    this.defaultFlowStyle = settings.getDefaultFlowStyle();
    this.defaultScalarStyle = settings.getDefaultScalarStyle();
    this.nullRepresenter = new RepresentNull(this);
    this.representers.put(String.class, new RepresentString(this));
    this.representers.put(Boolean.class, new RepresentBoolean(this));
    this.representers.put(Character.class, new RepresentString(this));
    this.representers.put(java.util.UUID.class, new RepresentUuid(this));
    this.representers.put(java.util.Optional.class, new RepresentOptional(this));
    this.representers.put(byte[].class, new RepresentByteArray(this));
    RepresentPrimitiveArray representPrimitiveArray = new RepresentPrimitiveArray(this);
    this.representers.put(short[].class, representPrimitiveArray);
    this.representers.put(int[].class, representPrimitiveArray);
    this.representers.put(long[].class, representPrimitiveArray);
    this.representers.put(float[].class, representPrimitiveArray);
    this.representers.put(double[].class, representPrimitiveArray);
    this.representers.put(char[].class, representPrimitiveArray);
    this.representers.put(boolean[].class, representPrimitiveArray);
    this.parentClassRepresenters.put(Number.class, new RepresentNumber(this));
    this.parentClassRepresenters.put(java.util.List.class, new RepresentList(this));
    this.parentClassRepresenters.put(Map.class, new RepresentMap(this));
    this.parentClassRepresenters.put(java.util.Set.class, new RepresentSet(this));
    this.parentClassRepresenters.put(java.util.Iterator.class, new RepresentIterator(this));
    this.parentClassRepresenters.put((new Object[0]).getClass(), new RepresentArray(this));
    this.parentClassRepresenters.put(Enum.class, new RepresentEnum(this));
    this.classTags = new HashMap();
    this.settings = settings;
  }
  
  protected Tag getTag(Class<?> clazz, Tag defaultTag) {
    if (this.classTags.containsKey(clazz))
      return (Tag)this.classTags.get(clazz); 
    return defaultTag;
  }
  
  public Tag addClassTag(Class<? extends Object> clazz, Tag tag) {
    if (tag == null)
      throw new NullPointerException("Tag must be provided."); 
    return (Tag)this.classTags.put(clazz, tag);
  }
  
  public static final Pattern MULTILINE_PATTERN = Pattern.compile("\n|| | ");
}
