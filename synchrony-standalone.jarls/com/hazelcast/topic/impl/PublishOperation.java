package com.hazelcast.topic.impl;

import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import com.hazelcast.spi.EventRegistration;
import com.hazelcast.spi.EventService;
import com.hazelcast.spi.impl.AbstractNamedOperation;
import java.io.IOException;
import java.util.Collection;
import java.util.concurrent.locks.Lock;

public class PublishOperation extends AbstractNamedOperation implements IdentifiedDataSerializable {
  private Data message;
  
  public PublishOperation() {}
  
  public PublishOperation(String name, Data message) {
    super(name);
    this.message = message;
  }
  
  public void beforeRun() {
    TopicService service = (TopicService)getService();
    service.incrementPublishes(this.name);
  }
  
  public void run() {
    TopicService service = (TopicService)getService();
    TopicEvent topicEvent = new TopicEvent(this.name, this.message, getCallerAddress());
    EventService eventService = getNodeEngine().getEventService();
    Collection<EventRegistration> registrations = eventService.getRegistrations("hz:impl:topicService", this.name);
    lock = service.getOrderLock(this.name);
    lock.lock();
    try {
      eventService.publishEvent("hz:impl:topicService", registrations, topicEvent, this.name.hashCode());
    } finally {
      lock.unlock();
    } 
  }
  
  public int getFactoryId() { return TopicDataSerializerHook.F_ID; }
  
  public int getId() { return 0; }
  
  public String getServiceName() { return "hz:impl:topicService"; }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeData(this.message);
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    this.message = in.readData();
  }
}
