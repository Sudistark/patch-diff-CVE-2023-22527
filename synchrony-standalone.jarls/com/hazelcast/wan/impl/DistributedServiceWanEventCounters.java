package com.hazelcast.wan.impl;

import com.hazelcast.util.ConcurrencyUtil;
import com.hazelcast.util.ConstructorFunction;
import java.util.concurrent.ConcurrentHashMap;

public class DistributedServiceWanEventCounters {
  private static final ConstructorFunction<String, DistributedObjectWanEventCounters> EVENT_COUNTER_CONSTRUCTOR_FN = new Object();
  
  private final ConcurrentHashMap<String, DistributedObjectWanEventCounters> eventCounterMap = new ConcurrentHashMap();
  
  public void incrementSync(String distributedObjectName) { incrementSync(distributedObjectName, 1); }
  
  public void incrementSync(String distributedObjectName, int count) {
    DistributedObjectWanEventCounters.access$100((DistributedObjectWanEventCounters)ConcurrencyUtil.getOrPutIfAbsent(this.eventCounterMap, distributedObjectName, EVENT_COUNTER_CONSTRUCTOR_FN), count);
  }
  
  public void incrementUpdate(String distributedObjectName) { DistributedObjectWanEventCounters.access$200((DistributedObjectWanEventCounters)ConcurrencyUtil.getOrPutIfAbsent(this.eventCounterMap, distributedObjectName, EVENT_COUNTER_CONSTRUCTOR_FN)); }
  
  public void incrementRemove(String distributedObjectName) { DistributedObjectWanEventCounters.access$300((DistributedObjectWanEventCounters)ConcurrencyUtil.getOrPutIfAbsent(this.eventCounterMap, distributedObjectName, EVENT_COUNTER_CONSTRUCTOR_FN)); }
  
  public void incrementDropped(String distributedObjectName) { DistributedObjectWanEventCounters.access$400((DistributedObjectWanEventCounters)ConcurrencyUtil.getOrPutIfAbsent(this.eventCounterMap, distributedObjectName, EVENT_COUNTER_CONSTRUCTOR_FN)); }
  
  public void removeCounter(String dataStructureName) { this.eventCounterMap.remove(dataStructureName); }
  
  public ConcurrentHashMap<String, DistributedObjectWanEventCounters> getEventCounterMap() { return this.eventCounterMap; }
}
