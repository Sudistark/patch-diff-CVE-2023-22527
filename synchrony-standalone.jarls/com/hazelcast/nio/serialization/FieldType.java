package com.hazelcast.nio.serialization;

public static enum FieldType {
  PORTABLE(0, 2147483647),
  BYTE(1, 1),
  BOOLEAN(2, 1),
  CHAR(3, 2),
  SHORT(4, 2),
  INT(5, 4),
  LONG(6, 8),
  FLOAT(7, 4),
  DOUBLE(8, 8),
  UTF(9, 2147483647),
  PORTABLE_ARRAY(10, 2147483647),
  BYTE_ARRAY(11, 2147483647),
  BOOLEAN_ARRAY(12, 2147483647),
  CHAR_ARRAY(13, 2147483647),
  SHORT_ARRAY(14, 2147483647),
  INT_ARRAY(15, 2147483647),
  LONG_ARRAY(16, 2147483647),
  FLOAT_ARRAY(17, 2147483647),
  DOUBLE_ARRAY(18, 2147483647),
  UTF_ARRAY(19, 2147483647);
  
  private static final FieldType[] ALL;
  
  private static final int TYPES_COUNT = 10;
  
  private final byte type;
  
  private final int elementSize;
  
  static  {
    ALL = values();
  }
  
  FieldType(int type, int elementSize) {
    this.type = (byte)type;
    this.elementSize = elementSize;
  }
  
  public byte getId() { return this.type; }
  
  public static FieldType get(byte type) { return ALL[type]; }
  
  public boolean isArrayType() { return (this.type >= PORTABLE_ARRAY.type); }
  
  public FieldType getSingleType() {
    if (isArrayType())
      return get((byte)(getId() % 10)); 
    return this;
  }
  
  public boolean hasDefiniteSize() { return (this.elementSize != Integer.MAX_VALUE); }
  
  public int getTypeSize() throws IllegalArgumentException {
    if (this.elementSize == Integer.MAX_VALUE)
      throw new IllegalArgumentException("Unsupported type - the size is variable or unknown!"); 
    return this.elementSize;
  }
}
