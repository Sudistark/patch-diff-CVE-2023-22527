package com.hazelcast.nio;

import com.hazelcast.spi.annotation.PrivateApi;
import com.hazelcast.version.Version;
import java.io.Closeable;
import java.io.IOException;
import java.nio.ByteOrder;

@PrivateApi
public interface BufferObjectDataInput extends ObjectDataInput, Closeable {
  public static final int UTF_BUFFER_SIZE = 1024;
  
  int read(int paramInt) throws IOException;
  
  int readInt(int paramInt) throws IOException;
  
  int readInt(ByteOrder paramByteOrder) throws IOException;
  
  int readInt(int paramInt, ByteOrder paramByteOrder) throws IOException;
  
  long readLong(int paramInt) throws IOException;
  
  long readLong(ByteOrder paramByteOrder) throws IOException;
  
  long readLong(int paramInt, ByteOrder paramByteOrder) throws IOException;
  
  boolean readBoolean(int paramInt) throws IOException;
  
  byte readByte(int paramInt) throws IOException;
  
  char readChar(int paramInt) throws IOException;
  
  double readDouble(int paramInt) throws IOException;
  
  double readDouble(ByteOrder paramByteOrder) throws IOException;
  
  double readDouble(int paramInt, ByteOrder paramByteOrder) throws IOException;
  
  float readFloat(int paramInt) throws IOException;
  
  float readFloat(ByteOrder paramByteOrder) throws IOException;
  
  float readFloat(int paramInt, ByteOrder paramByteOrder) throws IOException;
  
  short readShort(int paramInt) throws IOException;
  
  short readShort(ByteOrder paramByteOrder) throws IOException;
  
  short readShort(int paramInt, ByteOrder paramByteOrder) throws IOException;
  
  int position();
  
  void position(int paramInt);
  
  void reset();
  
  void clear();
  
  void init(byte[] paramArrayOfByte, int paramInt);
  
  void setVersion(Version paramVersion);
}
