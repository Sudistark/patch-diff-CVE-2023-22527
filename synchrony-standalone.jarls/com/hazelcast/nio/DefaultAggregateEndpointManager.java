package com.hazelcast.nio;

import com.hazelcast.instance.EndpointQualifier;
import com.hazelcast.internal.networking.nio.AdvancedNetworkStats;
import com.hazelcast.nio.tcp.TcpIpConnection;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.ConcurrentMap;

public class DefaultAggregateEndpointManager implements AggregateEndpointManager {
  private final ConcurrentMap<EndpointQualifier, EndpointManager<TcpIpConnection>> endpointManagers;
  
  private final AdvancedNetworkStats inboundNetworkStats;
  
  private final AdvancedNetworkStats outboundNetworkStats;
  
  public DefaultAggregateEndpointManager(ConcurrentMap<EndpointQualifier, EndpointManager<TcpIpConnection>> endpointManagers) {
    this.inboundNetworkStats = new AdvancedNetworkStats();
    this.outboundNetworkStats = new AdvancedNetworkStats();
    this.endpointManagers = endpointManagers;
  }
  
  public Set<TcpIpConnection> getActiveConnections() {
    Set<TcpIpConnection> connections = null;
    for (EndpointManager<TcpIpConnection> endpointManager : this.endpointManagers.values()) {
      Collection<TcpIpConnection> endpointConnections = endpointManager.getActiveConnections();
      if (endpointConnections != null && !endpointConnections.isEmpty()) {
        if (connections == null)
          connections = new HashSet<TcpIpConnection>(); 
        connections.addAll(endpointConnections);
      } 
    } 
    return (connections == null) ? Collections.emptySet() : connections;
  }
  
  public Set<TcpIpConnection> getConnections() {
    Set<TcpIpConnection> connections = null;
    for (EndpointManager<TcpIpConnection> endpointManager : this.endpointManagers.values()) {
      Collection<TcpIpConnection> endpointConnections = endpointManager.getConnections();
      if (endpointConnections != null && !endpointConnections.isEmpty()) {
        if (connections == null)
          connections = new HashSet<TcpIpConnection>(); 
        connections.addAll(endpointConnections);
      } 
    } 
    return (connections == null) ? Collections.emptySet() : connections;
  }
  
  public EndpointManager<TcpIpConnection> getEndpointManager(EndpointQualifier qualifier) { return (EndpointManager)this.endpointManagers.get(qualifier); }
  
  public void addConnectionListener(ConnectionListener listener) {
    for (EndpointManager manager : this.endpointManagers.values())
      manager.addConnectionListener(listener); 
  }
  
  public AdvancedNetworkStats getInboundNetworkStats() { return this.inboundNetworkStats; }
  
  public AdvancedNetworkStats getOutboundNetworkStats() { return this.outboundNetworkStats; }
}
