package com.hazelcast.nio.tcp;

import com.hazelcast.logging.ILogger;
import com.hazelcast.nio.Address;
import com.hazelcast.nio.IOService;
import java.util.Collection;
import java.util.LinkedList;

class TcpIpConnector {
  private static final int DEFAULT_IPV6_SOCKET_CONNECT_TIMEOUT_SECONDS = 3;
  
  private static final int MILLIS_PER_SECOND = 1000;
  
  private final TcpIpEndpointManager endpointManager;
  
  private final ILogger logger;
  
  private final IOService ioService;
  
  private final int outboundPortCount;
  
  private final LinkedList<Integer> outboundPorts;
  
  TcpIpConnector(TcpIpEndpointManager endpointManager) {
    this.outboundPorts = new LinkedList();
    this.endpointManager = endpointManager;
    this.ioService = endpointManager.getNetworkingService().getIoService();
    this.logger = this.ioService.getLoggingService().getLogger(getClass());
    Collection<Integer> ports = this.ioService.getOutboundPorts(endpointManager.getEndpointQualifier());
    this.outboundPortCount = ports.size();
    this.outboundPorts.addAll(ports);
  }
  
  void asyncConnect(Address address, boolean silent) {
    this.ioService.shouldConnectTo(address);
    this.ioService.executeAsync(new ConnectTask(this, address, silent));
  }
  
  private boolean useAnyOutboundPort() { return (this.outboundPortCount == 0); }
  
  private int getOutboundPortCount() { return this.outboundPortCount; }
  
  private int acquireOutboundPort() {
    if (useAnyOutboundPort())
      return 0; 
    synchronized (this.outboundPorts) {
      Integer port = (Integer)this.outboundPorts.removeFirst();
      this.outboundPorts.addLast(port);
      return port.intValue();
    } 
  }
}
