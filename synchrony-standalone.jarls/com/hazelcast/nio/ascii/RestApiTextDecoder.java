package com.hazelcast.nio.ascii;

import com.hazelcast.internal.ascii.rest.HttpDeleteCommandParser;
import com.hazelcast.internal.ascii.rest.HttpGetCommandParser;
import com.hazelcast.internal.ascii.rest.HttpHeadCommandParser;
import com.hazelcast.internal.ascii.rest.HttpPostCommandParser;
import com.hazelcast.nio.IOService;
import com.hazelcast.nio.tcp.TcpIpConnection;
import com.hazelcast.spi.annotation.PrivateApi;
import java.util.HashMap;
import java.util.Map;

@PrivateApi
public class RestApiTextDecoder extends TextDecoder {
  public static final TextParsers TEXT_PARSERS;
  
  static  {
    parsers = new HashMap();
    parsers.put("GET", new HttpGetCommandParser());
    parsers.put("POST", new HttpPostCommandParser());
    parsers.put("PUT", new HttpPostCommandParser());
    parsers.put("DELETE", new HttpDeleteCommandParser());
    parsers.put("HEAD", new HttpHeadCommandParser());
    TEXT_PARSERS = new TextParsers(parsers);
  }
  
  public RestApiTextDecoder(TcpIpConnection connection, TextEncoder encoder, boolean rootDecoder) { super(connection, encoder, createFilter(connection), TEXT_PARSERS, rootDecoder); }
  
  private static RestApiFilter createFilter(TcpIpConnection connection) {
    IOService ioService = connection.getEndpointManager().getNetworkingService().getIoService();
    return new RestApiFilter(ioService.getRestApiConfig(), TEXT_PARSERS);
  }
}
