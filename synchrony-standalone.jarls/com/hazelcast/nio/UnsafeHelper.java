package com.hazelcast.nio;

import com.hazelcast.internal.memory.impl.AlignmentUtil;
import com.hazelcast.logging.Logger;
import com.hazelcast.spi.annotation.PrivateApi;
import com.hazelcast.util.QuickMath;
import java.security.AccessController;
import sun.misc.Unsafe;

@Deprecated
@PrivateApi
public final class UnsafeHelper {
  @Deprecated
  public static final Unsafe UNSAFE;
  
  @Deprecated
  public static final boolean UNSAFE_AVAILABLE;
  
  public static final long BYTE_ARRAY_BASE_OFFSET;
  
  public static final long BOOLEAN_ARRAY_BASE_OFFSET;
  
  public static final long SHORT_ARRAY_BASE_OFFSET;
  
  public static final long CHAR_ARRAY_BASE_OFFSET;
  
  public static final long INT_ARRAY_BASE_OFFSET;
  
  public static final long FLOAT_ARRAY_BASE_OFFSET;
  
  public static final long LONG_ARRAY_BASE_OFFSET;
  
  public static final long DOUBLE_ARRAY_BASE_OFFSET;
  
  public static final int BOOLEAN_ARRAY_INDEX_SCALE;
  
  public static final int BYTE_ARRAY_INDEX_SCALE;
  
  public static final int SHORT_ARRAY_INDEX_SCALE;
  
  public static final int CHAR_ARRAY_INDEX_SCALE;
  
  public static final int INT_ARRAY_INDEX_SCALE;
  
  public static final int FLOAT_ARRAY_INDEX_SCALE;
  
  public static final int LONG_ARRAY_INDEX_SCALE;
  
  public static final int DOUBLE_ARRAY_INDEX_SCALE;
  
  public static final int MEM_COPY_THRESHOLD = 1048576;
  
  private static final String UNSAFE_MODE_PROPERTY_NAME = "hazelcast.unsafe.mode";
  
  private static final String UNSAFE_EXPLICITLY_DISABLED = "disabled";
  
  private static final String UNSAFE_EXPLICITLY_ENABLED = "enforced";
  
  private static final String UNSAFE_WARNING_WHEN_NOT_FOUND = "sun.misc.Unsafe isn't available, some features might be not available";
  
  private static final String UNSAFE_WARNING_WHEN_EXPLICTLY_DISABLED = "sun.misc.Unsafe has been disabled via System Property hazelcast.unsafe.mode, some features might be not available.";
  
  private static final String UNSAFE_WARNING_WHEN_UNALIGNED_ACCESS_NOT_ALLOWED = "sun.misc.Unsafe has been disabled because your platform does not support unaligned access to memory, some features might be not available.";
  
  private static final String UNSAFE_WARNING_WHEN_ENFORCED_ON_PLATFORM_WHERE_NOT_SUPPORTED = "You platform does not seem to support unaligned access to memory. Unsafe usage has been enforced via System Property hazelcast.unsafe.mode This is not a supported configuration and it can crash JVM or corrupt your data!";
  
  static  {
    try {
      unsafe = findUnsafeIfAllowed();
    } catch (RuntimeException e) {
      unsafe = null;
    } 
    UNSAFE = unsafe;
    BYTE_ARRAY_BASE_OFFSET = arrayBaseOffset(byte[].class, unsafe);
    BOOLEAN_ARRAY_BASE_OFFSET = arrayBaseOffset(boolean[].class, unsafe);
    SHORT_ARRAY_BASE_OFFSET = arrayBaseOffset(short[].class, unsafe);
    CHAR_ARRAY_BASE_OFFSET = arrayBaseOffset(char[].class, unsafe);
    INT_ARRAY_BASE_OFFSET = arrayBaseOffset(int[].class, unsafe);
    FLOAT_ARRAY_BASE_OFFSET = arrayBaseOffset(float[].class, unsafe);
    LONG_ARRAY_BASE_OFFSET = arrayBaseOffset(long[].class, unsafe);
    DOUBLE_ARRAY_BASE_OFFSET = arrayBaseOffset(double[].class, unsafe);
    BYTE_ARRAY_INDEX_SCALE = arrayIndexScale(byte[].class, unsafe);
    BOOLEAN_ARRAY_INDEX_SCALE = arrayIndexScale(boolean[].class, unsafe);
    SHORT_ARRAY_INDEX_SCALE = arrayIndexScale(short[].class, unsafe);
    CHAR_ARRAY_INDEX_SCALE = arrayIndexScale(char[].class, unsafe);
    INT_ARRAY_INDEX_SCALE = arrayIndexScale(int[].class, unsafe);
    FLOAT_ARRAY_INDEX_SCALE = arrayIndexScale(float[].class, unsafe);
    LONG_ARRAY_INDEX_SCALE = arrayIndexScale(long[].class, unsafe);
    DOUBLE_ARRAY_INDEX_SCALE = arrayIndexScale(double[].class, unsafe);
    boolean unsafeAvailable = false;
    try {
      if (unsafe != null) {
        long arrayBaseOffset = unsafe.arrayBaseOffset(byte[].class);
        byte[] buffer = new byte[(int)arrayBaseOffset + 16];
        unsafe.putByte(buffer, arrayBaseOffset, (byte)0);
        unsafe.putBoolean(buffer, arrayBaseOffset, false);
        unsafe.putChar(buffer, QuickMath.normalize(arrayBaseOffset, 2), '0');
        unsafe.putShort(buffer, QuickMath.normalize(arrayBaseOffset, 2), (short)1);
        unsafe.putInt(buffer, QuickMath.normalize(arrayBaseOffset, 4), 2);
        unsafe.putFloat(buffer, QuickMath.normalize(arrayBaseOffset, 4), 3.0F);
        unsafe.putLong(buffer, QuickMath.normalize(arrayBaseOffset, 8), 4L);
        unsafe.putDouble(buffer, QuickMath.normalize(arrayBaseOffset, 8), 5.0D);
        unsafe.copyMemory(new byte[buffer.length], arrayBaseOffset, buffer, arrayBaseOffset, buffer.length);
        unsafeAvailable = true;
      } 
    } catch (Throwable e) {
      Logger.getLogger(UnsafeHelper.class).warning("sun.misc.Unsafe isn't available, some features might be not available");
    } 
    UNSAFE_AVAILABLE = unsafeAvailable;
  }
  
  private static long arrayBaseOffset(Class<?> type, Unsafe unsafe) { return (unsafe == null) ? -1L : unsafe.arrayBaseOffset(type); }
  
  private static int arrayIndexScale(Class<?> type, Unsafe unsafe) { return (unsafe == null) ? -1 : unsafe.arrayIndexScale(type); }
  
  static Unsafe findUnsafeIfAllowed() {
    if (isUnsafeExplicitlyDisabled()) {
      Logger.getLogger(UnsafeHelper.class).warning("sun.misc.Unsafe has been disabled via System Property hazelcast.unsafe.mode, some features might be not available.");
      return null;
    } 
    if (!isUnalignedAccessAllowed())
      if (isUnsafeExplicitlyEnforced()) {
        Logger.getLogger(UnsafeHelper.class).warning("You platform does not seem to support unaligned access to memory. Unsafe usage has been enforced via System Property hazelcast.unsafe.mode This is not a supported configuration and it can crash JVM or corrupt your data!");
      } else {
        Logger.getLogger(UnsafeHelper.class).warning("sun.misc.Unsafe has been disabled because your platform does not support unaligned access to memory, some features might be not available.");
        return null;
      }  
    unsafe = findUnsafe();
    if (unsafe == null)
      Logger.getLogger(UnsafeHelper.class).warning("sun.misc.Unsafe isn't available, some features might be not available"); 
    return unsafe;
  }
  
  private static boolean isUnsafeExplicitlyDisabled() {
    mode = System.getProperty("hazelcast.unsafe.mode");
    return "disabled".equals(mode);
  }
  
  private static boolean isUnsafeExplicitlyEnforced() {
    mode = System.getProperty("hazelcast.unsafe.mode");
    return "enforced".equals(mode);
  }
  
  static boolean isUnalignedAccessAllowed() { return AlignmentUtil.isUnalignedAccessAllowed(); }
  
  private static Unsafe findUnsafe() {
    try {
      return Unsafe.getUnsafe();
    } catch (SecurityException se) {
      return (Unsafe)AccessController.doPrivileged(new Object());
    } 
  }
}
