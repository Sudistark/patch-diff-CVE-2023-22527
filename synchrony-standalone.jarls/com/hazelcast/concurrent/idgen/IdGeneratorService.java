package com.hazelcast.concurrent.idgen;

import com.hazelcast.core.DistributedObject;
import com.hazelcast.core.HazelcastInstance;
import com.hazelcast.core.IAtomicLong;
import com.hazelcast.spi.ManagedService;
import com.hazelcast.spi.NodeEngine;
import com.hazelcast.spi.RemoteService;
import java.util.Properties;

public class IdGeneratorService implements ManagedService, RemoteService {
  public static final String SERVICE_NAME = "hz:impl:idGeneratorService";
  
  public static final String ATOMIC_LONG_NAME = "hz:atomic:idGenerator:";
  
  private NodeEngine nodeEngine;
  
  public IdGeneratorService(NodeEngine nodeEngine) { this.nodeEngine = nodeEngine; }
  
  public void init(NodeEngine nodeEngine, Properties properties) { this.nodeEngine = nodeEngine; }
  
  public void reset() {}
  
  public void shutdown(boolean terminate) {}
  
  private IAtomicLong getBlockGenerator(String name) {
    HazelcastInstance hazelcastInstance = this.nodeEngine.getHazelcastInstance();
    return hazelcastInstance.getAtomicLong("hz:atomic:idGenerator:" + name);
  }
  
  public DistributedObject createDistributedObject(String name) {
    IAtomicLong blockGenerator = getBlockGenerator(name);
    return new IdGeneratorProxy(blockGenerator, name, this.nodeEngine, this);
  }
  
  public void destroyDistributedObject(String name) {}
}
