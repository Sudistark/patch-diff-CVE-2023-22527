package com.hazelcast.concurrent.atomiclong;

import com.hazelcast.concurrent.atomiclong.operations.AddAndGetOperation;
import com.hazelcast.concurrent.atomiclong.operations.AlterAndGetOperation;
import com.hazelcast.concurrent.atomiclong.operations.AlterOperation;
import com.hazelcast.concurrent.atomiclong.operations.ApplyOperation;
import com.hazelcast.concurrent.atomiclong.operations.CompareAndSetOperation;
import com.hazelcast.concurrent.atomiclong.operations.GetAndAddOperation;
import com.hazelcast.concurrent.atomiclong.operations.GetAndAlterOperation;
import com.hazelcast.concurrent.atomiclong.operations.GetAndSetOperation;
import com.hazelcast.concurrent.atomiclong.operations.GetOperation;
import com.hazelcast.concurrent.atomiclong.operations.SetOperation;
import com.hazelcast.core.AsyncAtomicLong;
import com.hazelcast.core.ICompletableFuture;
import com.hazelcast.core.IFunction;
import com.hazelcast.spi.AbstractDistributedObject;
import com.hazelcast.spi.InternalCompletableFuture;
import com.hazelcast.spi.NodeEngine;
import com.hazelcast.spi.Operation;
import com.hazelcast.util.Preconditions;

public class AtomicLongProxy extends AbstractDistributedObject<AtomicLongService> implements AsyncAtomicLong {
  private final String name;
  
  private final int partitionId;
  
  public AtomicLongProxy(String name, NodeEngine nodeEngine, AtomicLongService service) {
    super(nodeEngine, service);
    this.name = name;
    this.partitionId = nodeEngine.getPartitionService().getPartitionId(getNameAsPartitionAwareData());
  }
  
  public String getName() { return this.name; }
  
  public int getPartitionId() { return this.partitionId; }
  
  public String getServiceName() { return "hz:impl:atomicLongService"; }
  
  public long addAndGet(long delta) { return ((Long)addAndGetAsync(delta).join()).longValue(); }
  
  public InternalCompletableFuture<Long> addAndGetAsync(long delta) {
    Operation operation = (new AddAndGetOperation(this.name, delta)).setPartitionId(this.partitionId);
    return invokeOnPartition(operation);
  }
  
  public InternalCompletableFuture<Long> asyncAddAndGet(long delta) { return addAndGetAsync(delta); }
  
  public boolean compareAndSet(long expect, long update) { return ((Boolean)compareAndSetAsync(expect, update).join()).booleanValue(); }
  
  public InternalCompletableFuture<Boolean> compareAndSetAsync(long expect, long update) {
    Operation operation = (new CompareAndSetOperation(this.name, expect, update)).setPartitionId(this.partitionId);
    return invokeOnPartition(operation);
  }
  
  public InternalCompletableFuture<Boolean> asyncCompareAndSet(long expect, long update) { return compareAndSetAsync(expect, update); }
  
  public void set(long newValue) { setAsync(newValue).join(); }
  
  public InternalCompletableFuture<Void> setAsync(long newValue) {
    Operation operation = (new SetOperation(this.name, newValue)).setPartitionId(this.partitionId);
    return invokeOnPartition(operation);
  }
  
  public InternalCompletableFuture<Void> asyncSet(long newValue) { return setAsync(newValue); }
  
  public long getAndSet(long newValue) { return ((Long)getAndSetAsync(newValue).join()).longValue(); }
  
  public InternalCompletableFuture<Long> getAndSetAsync(long newValue) {
    Operation operation = (new GetAndSetOperation(this.name, newValue)).setPartitionId(this.partitionId);
    return invokeOnPartition(operation);
  }
  
  public InternalCompletableFuture<Long> asyncGetAndSet(long newValue) { return getAndSetAsync(newValue); }
  
  public long getAndAdd(long delta) { return ((Long)getAndAddAsync(delta).join()).longValue(); }
  
  public InternalCompletableFuture<Long> getAndAddAsync(long delta) {
    Operation operation = (new GetAndAddOperation(this.name, delta)).setPartitionId(this.partitionId);
    return invokeOnPartition(operation);
  }
  
  public InternalCompletableFuture<Long> asyncGetAndAdd(long delta) { return getAndAddAsync(delta); }
  
  public long decrementAndGet() { return ((Long)decrementAndGetAsync().join()).longValue(); }
  
  public InternalCompletableFuture<Long> decrementAndGetAsync() { return addAndGetAsync(-1L); }
  
  public InternalCompletableFuture<Long> asyncDecrementAndGet() { return addAndGetAsync(-1L); }
  
  public long get() { return ((Long)getAsync().join()).longValue(); }
  
  public InternalCompletableFuture<Long> getAsync() {
    Operation operation = (new GetOperation(this.name)).setPartitionId(this.partitionId);
    return invokeOnPartition(operation);
  }
  
  public InternalCompletableFuture<Long> asyncGet() { return getAsync(); }
  
  public long incrementAndGet() { return ((Long)incrementAndGetAsync().join()).longValue(); }
  
  public InternalCompletableFuture<Long> incrementAndGetAsync() { return addAndGetAsync(1L); }
  
  public InternalCompletableFuture<Long> asyncIncrementAndGet() { return addAndGetAsync(1L); }
  
  public long getAndIncrement() { return ((Long)getAndIncrementAsync().join()).longValue(); }
  
  public InternalCompletableFuture<Long> getAndIncrementAsync() { return getAndAddAsync(1L); }
  
  public InternalCompletableFuture<Long> asyncGetAndIncrement() { return getAndAddAsync(1L); }
  
  public void alter(IFunction<Long, Long> function) { alterAsync(function).join(); }
  
  public InternalCompletableFuture<Void> alterAsync(IFunction<Long, Long> function) {
    Preconditions.isNotNull(function, "function");
    Operation operation = (new AlterOperation(this.name, function)).setPartitionId(this.partitionId);
    return invokeOnPartition(operation);
  }
  
  public InternalCompletableFuture<Void> asyncAlter(IFunction<Long, Long> function) { return alterAsync(function); }
  
  public long alterAndGet(IFunction<Long, Long> function) { return ((Long)alterAndGetAsync(function).join()).longValue(); }
  
  public InternalCompletableFuture<Long> alterAndGetAsync(IFunction<Long, Long> function) {
    Preconditions.isNotNull(function, "function");
    Operation operation = (new AlterAndGetOperation(this.name, function)).setPartitionId(this.partitionId);
    return invokeOnPartition(operation);
  }
  
  public InternalCompletableFuture<Long> asyncAlterAndGet(IFunction<Long, Long> function) { return alterAndGetAsync(function); }
  
  public long getAndAlter(IFunction<Long, Long> function) { return ((Long)getAndAlterAsync(function).join()).longValue(); }
  
  public InternalCompletableFuture<Long> getAndAlterAsync(IFunction<Long, Long> function) {
    Preconditions.isNotNull(function, "function");
    Operation operation = (new GetAndAlterOperation(this.name, function)).setPartitionId(this.partitionId);
    return invokeOnPartition(operation);
  }
  
  public InternalCompletableFuture<Long> asyncGetAndAlter(IFunction<Long, Long> function) { return getAndAlterAsync(function); }
  
  public <R> R apply(IFunction<Long, R> function) { return (R)applyAsync(function).join(); }
  
  public <R> InternalCompletableFuture<R> applyAsync(IFunction<Long, R> function) {
    Preconditions.isNotNull(function, "function");
    Operation operation = (new ApplyOperation(this.name, function)).setPartitionId(this.partitionId);
    return invokeOnPartition(operation);
  }
  
  public <R> InternalCompletableFuture<R> asyncApply(IFunction<Long, R> function) { return applyAsync(function); }
  
  public String toString() { return "IAtomicLong{name='" + this.name + '\'' + '}'; }
}
