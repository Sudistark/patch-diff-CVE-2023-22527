package com.hazelcast.concurrent.atomiclong.operations;

import com.hazelcast.concurrent.atomiclong.AtomicLongContainer;
import com.hazelcast.core.IFunction;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.spi.impl.MutatingOperation;
import java.io.IOException;

public class ApplyOperation<R> extends AbstractAtomicLongOperation implements MutatingOperation {
  private IFunction<Long, R> function;
  
  private R returnValue;
  
  public ApplyOperation() {}
  
  public ApplyOperation(String name, IFunction<Long, R> function) {
    super(name);
    this.function = function;
  }
  
  public void run() {
    AtomicLongContainer container = getLongContainer();
    this.returnValue = this.function.apply(Long.valueOf(container.get()));
  }
  
  public R getResponse() { return (R)this.returnValue; }
  
  public int getId() { return 4; }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeObject(this.function);
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    this.function = (IFunction)in.readObject();
  }
}
