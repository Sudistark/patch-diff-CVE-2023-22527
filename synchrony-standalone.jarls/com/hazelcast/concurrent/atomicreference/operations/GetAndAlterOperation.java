package com.hazelcast.concurrent.atomicreference.operations;

import com.hazelcast.concurrent.atomicreference.AtomicReferenceContainer;
import com.hazelcast.core.IFunction;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.NodeEngine;

public class GetAndAlterOperation extends AbstractAlterOperation {
  public GetAndAlterOperation() {}
  
  public GetAndAlterOperation(String name, Data function) { super(name, function); }
  
  public void run() {
    NodeEngine nodeEngine = getNodeEngine();
    IFunction f = (IFunction)nodeEngine.toObject(this.function);
    AtomicReferenceContainer container = getReferenceContainer();
    this.response = container.get();
    Object input = nodeEngine.toObject(container.get());
    Object output = f.apply(input);
    Data serializedOutput = nodeEngine.toData(output);
    this.shouldBackup = !isEquals(this.response, serializedOutput);
    if (this.shouldBackup) {
      container.set(serializedOutput);
      this.backup = serializedOutput;
    } 
  }
  
  public int getId() { return 5; }
}
