package com.hazelcast.concurrent.atomicreference.operations;

import com.hazelcast.concurrent.atomicreference.AtomicReferenceContainer;
import com.hazelcast.core.IFunction;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.NodeEngine;

public class AlterAndGetOperation extends AbstractAlterOperation {
  public AlterAndGetOperation() {}
  
  public AlterAndGetOperation(String name, Data function) { super(name, function); }
  
  public void run() {
    NodeEngine nodeEngine = getNodeEngine();
    IFunction f = (IFunction)nodeEngine.toObject(this.function);
    AtomicReferenceContainer container = getReferenceContainer();
    Data originalData = container.get();
    Object input = nodeEngine.toObject(originalData);
    Object output = f.apply(input);
    Data serializedOutput = nodeEngine.toData(output);
    this.shouldBackup = !isEquals(originalData, serializedOutput);
    if (this.shouldBackup) {
      this.backup = serializedOutput;
      container.set(this.backup);
    } 
    this.response = output;
  }
  
  public int getId() { return 0; }
}
