package com.hazelcast.concurrent.atomicreference.operations;

import com.hazelcast.concurrent.atomicreference.AtomicReferenceContainer;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.Operation;
import com.hazelcast.spi.impl.MutatingOperation;
import java.io.IOException;

public class SetAndGetOperation extends AtomicReferenceBackupAwareOperation implements MutatingOperation {
  private Data newValue;
  
  private Data returnValue;
  
  public SetAndGetOperation() {}
  
  public SetAndGetOperation(String name, Data newValue) {
    super(name);
    this.newValue = newValue;
  }
  
  public void run() {
    AtomicReferenceContainer container = getReferenceContainer();
    container.getAndSet(this.newValue);
    this.returnValue = this.newValue;
  }
  
  public Object getResponse() { return this.returnValue; }
  
  public Operation getBackupOperation() { return new SetBackupOperation(this.name, this.newValue); }
  
  public int getId() { return 9; }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeData(this.newValue);
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    this.newValue = in.readData();
  }
}
