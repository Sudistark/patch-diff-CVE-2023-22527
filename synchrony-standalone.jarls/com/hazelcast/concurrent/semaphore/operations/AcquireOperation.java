package com.hazelcast.concurrent.semaphore.operations;

import com.hazelcast.concurrent.semaphore.SemaphoreContainer;
import com.hazelcast.concurrent.semaphore.SemaphoreWaitNotifyKey;
import com.hazelcast.spi.BlockingOperation;
import com.hazelcast.spi.Operation;
import com.hazelcast.spi.WaitNotifyKey;
import com.hazelcast.spi.impl.MutatingOperation;

public class AcquireOperation extends SemaphoreBackupAwareOperation implements BlockingOperation, MutatingOperation {
  public AcquireOperation() {}
  
  public AcquireOperation(String name, int permitCount, long timeout) {
    super(name, permitCount);
    setWaitTimeout(timeout);
  }
  
  public void run() {
    SemaphoreContainer semaphoreContainer = getSemaphoreContainer();
    this.response = Boolean.valueOf(semaphoreContainer.acquire(getCallerUuid(), this.permitCount));
  }
  
  public WaitNotifyKey getWaitKey() { return new SemaphoreWaitNotifyKey(this.name, "acquire"); }
  
  public boolean shouldWait() {
    SemaphoreContainer semaphoreContainer = getSemaphoreContainer();
    return (getWaitTimeout() != 0L && !semaphoreContainer.isAvailable(this.permitCount));
  }
  
  public void onWaitExpire() { sendResponse(Boolean.valueOf(false)); }
  
  public boolean shouldBackup() { return Boolean.TRUE.equals(this.response); }
  
  public Operation getBackupOperation() { return new AcquireBackupOperation(this.name, this.permitCount, getCallerUuid()); }
  
  public int getId() { return 2; }
}
