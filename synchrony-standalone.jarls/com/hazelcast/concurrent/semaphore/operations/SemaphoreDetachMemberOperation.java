package com.hazelcast.concurrent.semaphore.operations;

import com.hazelcast.concurrent.semaphore.SemaphoreContainer;
import com.hazelcast.concurrent.semaphore.SemaphoreService;
import com.hazelcast.concurrent.semaphore.SemaphoreWaitNotifyKey;
import com.hazelcast.logging.ILogger;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.spi.NodeEngine;
import com.hazelcast.spi.Notifier;
import com.hazelcast.spi.Operation;
import com.hazelcast.spi.WaitNotifyKey;
import com.hazelcast.spi.partition.IPartition;
import com.hazelcast.spi.partition.IPartitionService;
import java.io.IOException;

public class SemaphoreDetachMemberOperation extends SemaphoreBackupAwareOperation implements Notifier {
  private String detachedMemberUuid;
  
  public SemaphoreDetachMemberOperation() {}
  
  public SemaphoreDetachMemberOperation(String name, String detachedMemberUuid) {
    super(name, -1);
    this.detachedMemberUuid = detachedMemberUuid;
  }
  
  public void run() {
    SemaphoreService service = (SemaphoreService)getService();
    if (service.containsSemaphore(this.name)) {
      SemaphoreContainer semaphoreContainer = service.getSemaphoreContainer(this.name);
      this.response = Boolean.valueOf(semaphoreContainer.detachAll(this.detachedMemberUuid));
    } 
    ILogger logger = getLogger();
    if (logger.isFineEnabled())
      logger.fine("Removing permits attached to " + this.detachedMemberUuid + ". Result: " + this.response); 
  }
  
  public boolean shouldBackup() {
    NodeEngine nodeEngine = getNodeEngine();
    IPartitionService partitionService = nodeEngine.getPartitionService();
    IPartition partition = partitionService.getPartition(getPartitionId());
    return (partition.isLocal() && Boolean.TRUE.equals(this.response));
  }
  
  public int getAsyncBackupCount() {
    int syncBackupCount = super.getSyncBackupCount();
    int asyncBackupCount = super.getAsyncBackupCount();
    return syncBackupCount + asyncBackupCount;
  }
  
  public int getSyncBackupCount() { return 0; }
  
  public Operation getBackupOperation() { return new SemaphoreDetachMemberBackupOperation(this.name, this.detachedMemberUuid); }
  
  public boolean shouldNotify() { return Boolean.TRUE.equals(this.response); }
  
  public WaitNotifyKey getNotifiedKey() { return new SemaphoreWaitNotifyKey(this.name, "acquire"); }
  
  public int getId() { return 13; }
  
  public void writeInternal(ObjectDataOutput out) throws IOException { throw new UnsupportedOperationException(); }
  
  public void readInternal(ObjectDataInput in) throws IOException { throw new UnsupportedOperationException(); }
}
