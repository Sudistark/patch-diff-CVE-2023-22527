package com.hazelcast.concurrent.lock;

import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.spi.DistributedObjectNamespace;
import com.hazelcast.spi.ObjectNamespace;
import java.io.IOException;

public final class ObjectNamespaceSerializationHelper {
  public static void writeNamespaceCompatibly(ObjectNamespace namespace, ObjectDataOutput out) throws IOException {
    if (namespace.getClass() == com.hazelcast.spi.DefaultObjectNamespace.class) {
      out.writeObject(new DistributedObjectNamespace(namespace));
    } else {
      out.writeObject(namespace);
    } 
  }
  
  public static ObjectNamespace readNamespaceCompatibly(ObjectDataInput in) throws IOException {
    DistributedObjectNamespace distributedObjectNamespace = (ObjectNamespace)in.readObject();
    if (distributedObjectNamespace.getClass() == com.hazelcast.spi.DefaultObjectNamespace.class)
      distributedObjectNamespace = new DistributedObjectNamespace(distributedObjectNamespace); 
    return distributedObjectNamespace;
  }
}
