package com.hazelcast.concurrent.lock.operations;

import com.hazelcast.concurrent.lock.LockStoreImpl;
import com.hazelcast.logging.ILogger;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.BackupAwareOperation;
import com.hazelcast.spi.Notifier;
import com.hazelcast.spi.ObjectNamespace;
import com.hazelcast.spi.Operation;
import com.hazelcast.spi.WaitNotifyKey;
import com.hazelcast.spi.impl.MutatingOperation;
import java.io.IOException;

public class UnlockOperation extends AbstractLockOperation implements Notifier, BackupAwareOperation, MutatingOperation {
  private boolean force;
  
  private boolean shouldNotify;
  
  public UnlockOperation() {}
  
  public UnlockOperation(ObjectNamespace namespace, Data key, long threadId) { super(namespace, key, threadId); }
  
  public UnlockOperation(ObjectNamespace namespace, Data key, long threadId, boolean force) {
    super(namespace, key, threadId);
    this.force = force;
  }
  
  public UnlockOperation(ObjectNamespace namespace, Data key, long threadId, boolean force, long referenceId) {
    super(namespace, key, threadId);
    this.force = force;
    setReferenceCallId(referenceId);
  }
  
  public void run() {
    if (this.force) {
      forceUnlock();
    } else {
      unlock();
    } 
  }
  
  protected final void unlock() {
    LockStoreImpl lockStore = getLockStore();
    boolean unlocked = lockStore.unlock(this.key, getCallerUuid(), this.threadId, getReferenceCallId());
    this.response = Boolean.valueOf(unlocked);
    if (!unlocked) {
      String ownerInfo = lockStore.getOwnerInfo(this.key);
      throw new IllegalMonitorStateException("Current thread is not owner of the lock! -> " + ownerInfo);
    } 
    ILogger logger = getLogger();
    if (logger.isFinestEnabled())
      logger.finest("Released lock " + this.namespace.getObjectName()); 
  }
  
  protected final void forceUnlock() {
    LockStoreImpl lockStore = getLockStore();
    boolean unlocked = lockStore.forceUnlock(this.key);
    this.response = Boolean.valueOf(unlocked);
    ILogger logger = getLogger();
    if (logger.isFinestEnabled())
      if (unlocked) {
        logger.finest("Released lock " + this.namespace.getObjectName());
      } else {
        logger.finest("Could not release lock " + this.namespace.getObjectName() + " as it is not locked");
      }  
  }
  
  public void afterRun() {
    LockStoreImpl lockStore = getLockStore();
    AwaitOperation awaitOperation = lockStore.pollExpiredAwaitOp(this.key);
    if (awaitOperation != null)
      awaitOperation.runExpired(); 
    this.shouldNotify = (awaitOperation == null);
  }
  
  public Operation getBackupOperation() {
    UnlockBackupOperation operation = new UnlockBackupOperation(this.namespace, this.key, this.threadId, getCallerUuid(), this.force);
    operation.setReferenceCallId(getReferenceCallId());
    return operation;
  }
  
  public boolean shouldBackup() { return Boolean.TRUE.equals(this.response); }
  
  public boolean shouldNotify() { return this.shouldNotify; }
  
  public final WaitNotifyKey getNotifiedKey() {
    LockStoreImpl lockStore = getLockStore();
    return lockStore.getNotifiedKey(this.key);
  }
  
  public int getId() { return 16; }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeBoolean(this.force);
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    this.force = in.readBoolean();
  }
}
