package com.hazelcast.concurrent.lock.operations;

import com.hazelcast.concurrent.lock.LockStoreImpl;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.BackupOperation;
import com.hazelcast.spi.ObjectNamespace;
import java.io.IOException;

public class LockBackupOperation extends AbstractLockOperation implements BackupOperation {
  private String originalCallerUuid;
  
  public LockBackupOperation() {}
  
  public LockBackupOperation(ObjectNamespace namespace, Data key, long threadId, long leaseTime, String originalCallerUuid) {
    super(namespace, key, threadId);
    this.leaseTime = leaseTime;
    this.originalCallerUuid = originalCallerUuid;
  }
  
  public void run() {
    interceptLockOperation();
    LockStoreImpl lockStore = getLockStore();
    this.response = Boolean.valueOf(lockStore.lock(this.key, this.originalCallerUuid, this.threadId, getReferenceCallId(), this.leaseTime));
  }
  
  public int getId() { return 10; }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeUTF(this.originalCallerUuid);
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    this.originalCallerUuid = in.readUTF();
  }
}
