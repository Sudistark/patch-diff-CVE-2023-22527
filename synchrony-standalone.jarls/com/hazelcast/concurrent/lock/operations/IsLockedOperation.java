package com.hazelcast.concurrent.lock.operations;

import com.hazelcast.concurrent.lock.LockStoreImpl;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.ObjectNamespace;
import com.hazelcast.spi.ReadonlyOperation;

public class IsLockedOperation extends AbstractLockOperation implements ReadonlyOperation {
  public IsLockedOperation() {}
  
  public IsLockedOperation(ObjectNamespace namespace, Data key) { super(namespace, key, 0L); }
  
  public IsLockedOperation(ObjectNamespace namespace, Data key, long threadId) { super(namespace, key, threadId); }
  
  public int getId() { return 9; }
  
  public void run() {
    LockStoreImpl lockStore = getLockStore();
    if (this.threadId == 0L) {
      this.response = Boolean.valueOf(lockStore.isLocked(this.key));
    } else {
      this.response = Boolean.valueOf(lockStore.isLockedBy(this.key, getCallerUuid(), this.threadId));
    } 
  }
}
