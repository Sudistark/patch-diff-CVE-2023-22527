package com.hazelcast.concurrent.lock.operations;

import com.hazelcast.concurrent.lock.LockResourceImpl;
import com.hazelcast.concurrent.lock.LockStoreImpl;
import com.hazelcast.logging.ILogger;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.BackupAwareOperation;
import com.hazelcast.spi.NodeEngine;
import com.hazelcast.spi.Notifier;
import com.hazelcast.spi.ObjectNamespace;
import com.hazelcast.spi.impl.QuorumCheckAwareOperation;
import com.hazelcast.spi.partition.IPartition;
import com.hazelcast.spi.partition.IPartitionService;
import java.io.IOException;

public class LocalLockCleanupOperation extends UnlockOperation implements Notifier, BackupAwareOperation, QuorumCheckAwareOperation {
  private final String uuid;
  
  public LocalLockCleanupOperation() { this.uuid = ""; }
  
  public LocalLockCleanupOperation(ObjectNamespace namespace, Data key, String uuid) {
    super(namespace, key, -1L, true);
    this.uuid = uuid;
  }
  
  public void run() {
    LockStoreImpl lockStore = getLockStore();
    LockResourceImpl lockResourceImpl = lockStore.getLock(this.key);
    if (this.uuid.equals(lockResourceImpl.getOwner())) {
      ILogger logger = getLogger();
      if (logger.isFinestEnabled())
        logger.finest("Unlocking lock owned by UUID: " + this.uuid + ", thread ID: " + lockResourceImpl
            .getThreadId() + ", count: " + lockResourceImpl
            .getLockCount()); 
      this.response = Boolean.valueOf(lockStore.forceUnlock(this.key));
    } 
  }
  
  public boolean shouldBackup() {
    NodeEngine nodeEngine = getNodeEngine();
    IPartitionService partitionService = nodeEngine.getPartitionService();
    IPartition partition = partitionService.getPartition(getPartitionId());
    return (partition.isLocal() && Boolean.TRUE.equals(this.response));
  }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException { throw new UnsupportedOperationException("LocalLockCleanupOperation is local only."); }
  
  protected void readInternal(ObjectDataInput in) throws IOException { throw new UnsupportedOperationException("LocalLockCleanupOperation is local only."); }
  
  public int getId() { throw new UnsupportedOperationException("LocalLockCleanupOperation is local only."); }
  
  public boolean shouldCheckQuorum() { return false; }
}
