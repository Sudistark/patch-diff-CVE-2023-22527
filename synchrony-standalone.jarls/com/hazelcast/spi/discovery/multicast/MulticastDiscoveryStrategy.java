package com.hazelcast.spi.discovery.multicast;

import com.hazelcast.logging.ILogger;
import com.hazelcast.nio.Address;
import com.hazelcast.spi.discovery.AbstractDiscoveryStrategy;
import com.hazelcast.spi.discovery.DiscoveryNode;
import com.hazelcast.spi.discovery.SimpleDiscoveryNode;
import com.hazelcast.spi.discovery.multicast.impl.MulticastDiscoveryReceiver;
import com.hazelcast.spi.discovery.multicast.impl.MulticastDiscoverySender;
import com.hazelcast.spi.discovery.multicast.impl.MulticastMemberInfo;
import com.hazelcast.spi.partitiongroup.PartitionGroupStrategy;
import com.hazelcast.util.ExceptionUtil;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.MulticastSocket;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

public class MulticastDiscoveryStrategy extends AbstractDiscoveryStrategy {
  private static final int DATA_OUTPUT_BUFFER_SIZE = 65536;
  
  private static final int DEFAULT_MULTICAST_PORT = 54327;
  
  private static final int SOCKET_TIME_TO_LIVE = 255;
  
  private static final int SOCKET_TIMEOUT = 3000;
  
  private static final String DEFAULT_MULTICAST_GROUP = "224.2.2.3";
  
  private DiscoveryNode discoveryNode;
  
  private MulticastSocket multicastSocket;
  
  private Thread thread;
  
  private MulticastDiscoveryReceiver multicastDiscoveryReceiver;
  
  private MulticastDiscoverySender multicastDiscoverySender;
  
  private ILogger logger;
  
  private boolean isClient;
  
  public MulticastDiscoveryStrategy(DiscoveryNode discoveryNode, ILogger logger, Map<String, Comparable> properties) {
    super(logger, properties);
    this.discoveryNode = discoveryNode;
    this.logger = logger;
  }
  
  private void initializeMulticastSocket() {
    try {
      int port = ((Integer)getOrDefault(MulticastProperties.PORT, Integer.valueOf(54327))).intValue();
      PortValueValidator validator = new PortValueValidator(null);
      validator.validate(Integer.valueOf(port));
      String group = (String)getOrDefault(MulticastProperties.GROUP, "224.2.2.3");
      this.multicastSocket = new MulticastSocket(null);
      this.multicastSocket.bind(new InetSocketAddress(port));
      if (this.discoveryNode != null) {
        InetAddress inetAddress = this.discoveryNode.getPrivateAddress().getInetAddress();
        if (!inetAddress.isLoopbackAddress())
          this.multicastSocket.setInterface(inetAddress); 
      } 
      this.multicastSocket.setReuseAddress(true);
      this.multicastSocket.setTimeToLive(255);
      this.multicastSocket.setReceiveBufferSize(65536);
      this.multicastSocket.setSendBufferSize(65536);
      this.multicastSocket.setSoTimeout(3000);
      this.multicastSocket.joinGroup(InetAddress.getByName(group));
      this.multicastDiscoverySender = new MulticastDiscoverySender(this.discoveryNode, this.multicastSocket, this.logger, group, port);
      this.multicastDiscoveryReceiver = new MulticastDiscoveryReceiver(this.multicastSocket, this.logger);
      if (this.discoveryNode == null)
        this.isClient = true; 
    } catch (Exception e) {
      this.logger.finest(e.getMessage());
      ExceptionUtil.rethrow(e);
    } 
  }
  
  public void start() {
    initializeMulticastSocket();
    if (!this.isClient) {
      this.thread = new Thread(this.multicastDiscoverySender);
      this.thread.start();
    } 
  }
  
  public Iterable<DiscoveryNode> discoverNodes() {
    MulticastMemberInfo multicastMemberInfo = this.multicastDiscoveryReceiver.receive();
    if (multicastMemberInfo == null)
      return null; 
    ArrayList<DiscoveryNode> arrayList = new ArrayList<DiscoveryNode>();
    try {
      SimpleDiscoveryNode simpleDiscoveryNode = new SimpleDiscoveryNode(new Address(multicastMemberInfo.getHost(), multicastMemberInfo.getPort()));
      arrayList.add(simpleDiscoveryNode);
    } catch (UnknownHostException e) {
      this.logger.finest(e.getMessage());
    } 
    return arrayList;
  }
  
  public void destroy() {
    this.multicastDiscoverySender.stop();
    if (this.thread != null)
      this.thread.interrupt(); 
  }
  
  public PartitionGroupStrategy getPartitionGroupStrategy() { return null; }
  
  public Map<String, Object> discoverLocalMetadata() { return new HashMap(); }
}
