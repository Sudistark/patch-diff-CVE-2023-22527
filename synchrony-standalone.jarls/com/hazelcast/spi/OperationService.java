package com.hazelcast.spi;

import com.hazelcast.core.ICompletableFuture;
import com.hazelcast.nio.Address;
import java.util.Collection;
import java.util.Map;

public interface OperationService {
  void run(Operation paramOperation);
  
  void execute(Operation paramOperation);
  
  <E> InternalCompletableFuture<E> invokeOnPartition(String paramString, Operation paramOperation, int paramInt);
  
  <E> InternalCompletableFuture<E> invokeOnPartition(Operation paramOperation);
  
  <E> InternalCompletableFuture<E> invokeOnTarget(String paramString, Operation paramOperation, Address paramAddress);
  
  InvocationBuilder createInvocationBuilder(String paramString, Operation paramOperation, int paramInt);
  
  InvocationBuilder createInvocationBuilder(String paramString, Operation paramOperation, Address paramAddress);
  
  Map<Integer, Object> invokeOnAllPartitions(String paramString, OperationFactory paramOperationFactory) throws Exception;
  
  <T> ICompletableFuture<Map<Integer, T>> invokeOnAllPartitionsAsync(String paramString, OperationFactory paramOperationFactory);
  
  <T> Map<Integer, T> invokeOnPartitions(String paramString, OperationFactory paramOperationFactory, Collection<Integer> paramCollection) throws Exception;
  
  <T> ICompletableFuture<Map<Integer, T>> invokeOnPartitionsAsync(String paramString, OperationFactory paramOperationFactory, Collection<Integer> paramCollection);
  
  Map<Integer, Object> invokeOnPartitions(String paramString, OperationFactory paramOperationFactory, int[] paramArrayOfInt) throws Exception;
  
  boolean send(Operation paramOperation, Address paramAddress);
}
