package com.hazelcast.spi.impl;

import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.nio.serialization.Portable;
import com.hazelcast.nio.serialization.PortableReader;
import com.hazelcast.nio.serialization.PortableWriter;
import com.hazelcast.util.SetUtil;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;

public final class PortableCollection implements Portable {
  private Collection<Data> collection;
  
  public PortableCollection() {}
  
  public PortableCollection(Collection<Data> collection) { this.collection = collection; }
  
  public Collection<Data> getCollection() { return this.collection; }
  
  public int getFactoryId() { return SpiPortableHook.ID; }
  
  public int getClassId() { return 2; }
  
  public void writePortable(PortableWriter writer) throws IOException {
    writer.writeBoolean("l", this.collection instanceof java.util.List);
    if (this.collection == null) {
      writer.writeInt("s", -1);
      return;
    } 
    writer.writeInt("s", this.collection.size());
    ObjectDataOutput out = writer.getRawDataOutput();
    for (Data data : this.collection)
      out.writeData(data); 
  }
  
  public void readPortable(PortableReader reader) throws IOException {
    boolean list = reader.readBoolean("l");
    int size = reader.readInt("s");
    if (size == -1)
      return; 
    if (list) {
      this.collection = new ArrayList(size);
    } else {
      this.collection = SetUtil.createHashSet(size);
    } 
    ObjectDataInput in = reader.getRawDataInput();
    for (int i = 0; i < size; i++) {
      Data data = in.readData();
      this.collection.add(data);
    } 
  }
}
