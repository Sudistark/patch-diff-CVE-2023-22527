package com.hazelcast.spi.impl.proxyservice.impl;

import com.hazelcast.core.DistributedObject;
import com.hazelcast.core.DistributedObjectEvent;
import com.hazelcast.core.DistributedObjectListener;
import com.hazelcast.core.DistributedObjectUtil;
import com.hazelcast.util.executor.StripedRunnable;
import java.util.Collection;

final class ProxyEventProcessor implements StripedRunnable {
  private final Collection<DistributedObjectListener> listeners;
  
  private final DistributedObjectEvent.EventType type;
  
  private final String serviceName;
  
  private final String objectName;
  
  private final DistributedObject object;
  
  ProxyEventProcessor(Collection<DistributedObjectListener> listeners, DistributedObjectEvent.EventType eventType, String serviceName, String objectName, DistributedObject object) {
    this.listeners = listeners;
    this.type = eventType;
    this.serviceName = serviceName;
    this.objectName = objectName;
    this.object = object;
  }
  
  public void run() {
    DistributedObjectEvent event = new DistributedObjectEvent(this.type, this.serviceName, this.objectName, this.object);
    for (DistributedObjectListener listener : this.listeners) {
      switch (null.$SwitchMap$com$hazelcast$core$DistributedObjectEvent$EventType[this.type.ordinal()]) {
        case 1:
          listener.distributedObjectCreated(event);
          continue;
        case 2:
          listener.distributedObjectDestroyed(event);
          continue;
      } 
      throw new IllegalStateException("Unrecognized EventType:" + this.type);
    } 
  }
  
  public int getKey() { return DistributedObjectUtil.getName(this.object).hashCode(); }
}
