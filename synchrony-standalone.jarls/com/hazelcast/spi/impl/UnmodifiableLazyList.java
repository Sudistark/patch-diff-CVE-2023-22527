package com.hazelcast.spi.impl;

import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import com.hazelcast.spi.serialization.SerializationService;
import com.hazelcast.util.EmptyStatement;
import java.io.IOException;
import java.util.AbstractList;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;

public class UnmodifiableLazyList<E> extends AbstractList<E> implements IdentifiedDataSerializable {
  private final SerializationService serializationService;
  
  private List list;
  
  public UnmodifiableLazyList() { this.serializationService = null; }
  
  public UnmodifiableLazyList(List list, SerializationService serializationService) {
    this.list = list;
    this.serializationService = serializationService;
  }
  
  public int size() { return this.list.size(); }
  
  public boolean remove(Object o) { throw new UnsupportedOperationException(); }
  
  public boolean removeAll(Collection<?> c) { throw new UnsupportedOperationException(); }
  
  public boolean retainAll(Collection<?> c) { throw new UnsupportedOperationException(); }
  
  public void clear() { throw new UnsupportedOperationException(); }
  
  public E get(int index) {
    Object o = this.list.get(index);
    if (o instanceof com.hazelcast.nio.serialization.Data) {
      E item = (E)this.serializationService.toObject(o);
      try {
        this.list.set(index, item);
      } catch (Exception e) {
        EmptyStatement.ignore(e);
      } 
      return item;
    } 
    return (E)o;
  }
  
  public Iterator<E> iterator() { return listIterator(0); }
  
  public ListIterator<E> listIterator() { return listIterator(0); }
  
  public ListIterator<E> listIterator(int index) { return new UnmodifiableLazyListIterator(this, this.list.listIterator(index)); }
  
  public List<E> subList(int fromIndex, int toIndex) { return new UnmodifiableLazyList(this.list.subList(fromIndex, toIndex), this.serializationService); }
  
  public void writeData(ObjectDataOutput out) throws IOException {
    out.writeInt(this.list.size());
    for (Object o : this)
      out.writeObject(o); 
  }
  
  public void readData(ObjectDataInput in) throws IOException {
    int size = in.readInt();
    this.list = new ArrayList(size);
    for (int i = 0; i < size; i++)
      this.list.add(in.readObject()); 
  }
  
  public int getFactoryId() { return SpiDataSerializerHook.F_ID; }
  
  public int getId() { return 18; }
}
