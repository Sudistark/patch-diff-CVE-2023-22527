package com.hazelcast.spi.impl;

import com.hazelcast.spi.FragmentedMigrationAwareService;
import com.hazelcast.spi.Operation;
import com.hazelcast.spi.PartitionMigrationEvent;
import com.hazelcast.spi.PartitionReplicationEvent;
import com.hazelcast.spi.ServiceNamespace;
import java.util.Collection;
import java.util.concurrent.atomic.AtomicInteger;

public class CountingMigrationAwareService implements FragmentedMigrationAwareService {
  static final int PRIMARY_REPLICA_INDEX = 0;
  
  static final int IN_FLIGHT_MIGRATION_STAMP = -1;
  
  private final FragmentedMigrationAwareService migrationAwareService;
  
  private final AtomicInteger ownerMigrationsStarted;
  
  private final AtomicInteger ownerMigrationsCompleted;
  
  public CountingMigrationAwareService(FragmentedMigrationAwareService migrationAwareService) {
    this.migrationAwareService = migrationAwareService;
    this.ownerMigrationsStarted = new AtomicInteger();
    this.ownerMigrationsCompleted = new AtomicInteger();
  }
  
  public Collection<ServiceNamespace> getAllServiceNamespaces(PartitionReplicationEvent event) { return this.migrationAwareService.getAllServiceNamespaces(event); }
  
  public boolean isKnownServiceNamespace(ServiceNamespace namespace) { return this.migrationAwareService.isKnownServiceNamespace(namespace); }
  
  public Operation prepareReplicationOperation(PartitionReplicationEvent event) { return this.migrationAwareService.prepareReplicationOperation(event); }
  
  public Operation prepareReplicationOperation(PartitionReplicationEvent event, Collection<ServiceNamespace> namespaces) { return this.migrationAwareService.prepareReplicationOperation(event, namespaces); }
  
  public void beforeMigration(PartitionMigrationEvent event) {
    if (isPrimaryReplicaMigrationEvent(event))
      this.ownerMigrationsStarted.incrementAndGet(); 
    this.migrationAwareService.beforeMigration(event);
  }
  
  public void commitMigration(PartitionMigrationEvent event) {
    try {
      this.migrationAwareService.commitMigration(event);
    } finally {
      if (isPrimaryReplicaMigrationEvent(event)) {
        int completed = this.ownerMigrationsCompleted.incrementAndGet();
        assert completed <= this.ownerMigrationsStarted.get();
      } 
    } 
  }
  
  public void rollbackMigration(PartitionMigrationEvent event) {
    try {
      this.migrationAwareService.rollbackMigration(event);
    } finally {
      if (isPrimaryReplicaMigrationEvent(event)) {
        int completed = this.ownerMigrationsCompleted.incrementAndGet();
        assert completed <= this.ownerMigrationsStarted.get();
      } 
    } 
  }
  
  static boolean isPrimaryReplicaMigrationEvent(PartitionMigrationEvent event) { return (event.getCurrentReplicaIndex() == 0 || event.getNewReplicaIndex() == 0); }
  
  public int getMigrationStamp() {
    int completed = this.ownerMigrationsCompleted.get();
    int started = this.ownerMigrationsStarted.get();
    return (completed == started) ? completed : -1;
  }
  
  public boolean validateMigrationStamp(int stamp) {
    int completed = this.ownerMigrationsCompleted.get();
    int started = this.ownerMigrationsStarted.get();
    return (stamp == completed && stamp == started);
  }
}
