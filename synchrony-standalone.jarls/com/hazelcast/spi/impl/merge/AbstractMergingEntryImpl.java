package com.hazelcast.spi.impl.merge;

import com.hazelcast.nio.IOUtil;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import com.hazelcast.spi.merge.MergingEntry;
import com.hazelcast.spi.serialization.SerializationService;
import com.hazelcast.spi.serialization.SerializationServiceAware;
import java.io.IOException;

public abstract class AbstractMergingEntryImpl<K, V, T extends AbstractMergingEntryImpl<K, V, T>> extends Object implements MergingEntry<K, V>, SerializationServiceAware, IdentifiedDataSerializable {
  private K key;
  
  private V value;
  
  private SerializationService serializationService;
  
  public AbstractMergingEntryImpl() {}
  
  public AbstractMergingEntryImpl(SerializationService serializationService) { this.serializationService = serializationService; }
  
  public K getKey() { return (K)this.key; }
  
  public Object getDeserializedKey() { return this.serializationService.toObject(this.key); }
  
  public T setKey(K key) {
    this.key = key;
    return (T)this;
  }
  
  public V getValue() { return (V)this.value; }
  
  public Object getDeserializedValue() { return this.serializationService.toObject(this.value); }
  
  public T setValue(V value) {
    this.value = value;
    return (T)this;
  }
  
  public void setSerializationService(SerializationService serializationService) { this.serializationService = serializationService; }
  
  public void writeData(ObjectDataOutput out) throws IOException {
    IOUtil.writeObject(out, this.key);
    IOUtil.writeObject(out, this.value);
  }
  
  public void readData(ObjectDataInput in) throws IOException {
    this.key = IOUtil.readObject(in);
    this.value = IOUtil.readObject(in);
  }
  
  public int getFactoryId() { return SplitBrainDataSerializerHook.F_ID; }
  
  public boolean equals(Object o) {
    if (this == o)
      return true; 
    if (!(o instanceof AbstractMergingEntryImpl))
      return false; 
    AbstractMergingEntryImpl<?, ?, ?> that = (AbstractMergingEntryImpl)o;
    if ((this.key != null) ? !this.key.equals(that.key) : (that.key != null))
      return false; 
    return (this.value != null) ? this.value.equals(that.value) : ((that.value == null) ? 1 : 0);
  }
  
  public int hashCode() {
    result = (this.key != null) ? this.key.hashCode() : 0;
    return 31 * result + ((this.value != null) ? this.value.hashCode() : 0);
  }
  
  public String toString() { return "MergingEntry{key=" + this.key + ", value=" + this.value + '}'; }
}
