package com.hazelcast.spi.impl.merge;

import com.hazelcast.nio.IOUtil;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import com.hazelcast.spi.merge.MergingValue;
import com.hazelcast.spi.serialization.SerializationService;
import com.hazelcast.spi.serialization.SerializationServiceAware;
import java.io.IOException;

public abstract class AbstractMergingValueImpl<V, T extends AbstractMergingValueImpl<V, T>> extends Object implements MergingValue<V>, SerializationServiceAware, IdentifiedDataSerializable {
  private V value;
  
  private SerializationService serializationService;
  
  public AbstractMergingValueImpl() {}
  
  public AbstractMergingValueImpl(SerializationService serializationService) { this.serializationService = serializationService; }
  
  public V getValue() { return (V)this.value; }
  
  public Object getDeserializedValue() { return this.serializationService.toObject(this.value); }
  
  public T setValue(V value) {
    this.value = value;
    return (T)this;
  }
  
  public void setSerializationService(SerializationService serializationService) { this.serializationService = serializationService; }
  
  public void writeData(ObjectDataOutput out) throws IOException { IOUtil.writeObject(out, this.value); }
  
  public void readData(ObjectDataInput in) throws IOException { this.value = IOUtil.readObject(in); }
  
  public int getFactoryId() { return SplitBrainDataSerializerHook.F_ID; }
  
  public boolean equals(Object o) {
    if (this == o)
      return true; 
    if (!(o instanceof AbstractMergingValueImpl))
      return false; 
    AbstractMergingValueImpl<?, ?> that = (AbstractMergingValueImpl)o;
    return (this.value != null) ? this.value.equals(that.value) : ((that.value == null) ? 1 : 0);
  }
  
  public int hashCode() { return (this.value != null) ? this.value.hashCode() : 0; }
  
  public String toString() { return "MergingValue{value=" + this.value + '}'; }
}
