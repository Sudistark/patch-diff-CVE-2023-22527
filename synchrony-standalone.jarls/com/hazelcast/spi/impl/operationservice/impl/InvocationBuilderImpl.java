package com.hazelcast.spi.impl.operationservice.impl;

import com.hazelcast.nio.Address;
import com.hazelcast.spi.InternalCompletableFuture;
import com.hazelcast.spi.InvocationBuilder;
import com.hazelcast.spi.Operation;

class InvocationBuilderImpl extends InvocationBuilder {
  private final Invocation.Context context;
  
  InvocationBuilderImpl(Invocation.Context context, String serviceName, Operation op, int partitionId) { this(context, serviceName, op, partitionId, null); }
  
  InvocationBuilderImpl(Invocation.Context context, String serviceName, Operation op, Address target) { this(context, serviceName, op, -1, target); }
  
  private InvocationBuilderImpl(Invocation.Context context, String serviceName, Operation op, int partitionId, Address target) {
    super(serviceName, op, partitionId, target);
    this.context = context;
  }
  
  public InternalCompletableFuture invoke() {
    TargetInvocation targetInvocation;
    this.op.setServiceName(this.serviceName);
    if (this.target == null) {
      this.op.setPartitionId(this.partitionId).setReplicaIndex(this.replicaIndex);
      targetInvocation = new PartitionInvocation(this.context, this.op, this.doneCallback, this.tryCount, this.tryPauseMillis, this.callTimeout, this.resultDeserialized, this.failOnIndeterminateOperationState, this.endpointManager);
    } else {
      targetInvocation = new TargetInvocation(this.context, this.op, this.target, this.doneCallback, this.tryCount, this.tryPauseMillis, this.callTimeout, this.resultDeserialized, this.endpointManager);
    } 
    InvocationFuture invocationFuture = targetInvocation.invoke();
    if (this.executionCallback != null)
      invocationFuture.andThen(this.executionCallback); 
    return invocationFuture;
  }
}
