package com.hazelcast.spi.impl.operationservice.impl;

import com.hazelcast.core.Member;
import com.hazelcast.nio.Address;
import com.hazelcast.nio.EndpointManager;
import com.hazelcast.spi.ExceptionAction;
import com.hazelcast.spi.Operation;

final class TargetInvocation extends Invocation<Address> {
  private final Address target;
  
  TargetInvocation(Invocation.Context context, Operation op, Address target, Runnable doneCallback, int tryCount, long tryPauseMillis, long callTimeoutMillis, boolean deserialize, EndpointManager endpointManager) {
    super(context, op, doneCallback, tryCount, tryPauseMillis, callTimeoutMillis, deserialize, endpointManager);
    this.target = target;
  }
  
  TargetInvocation(Invocation.Context context, Operation op, Address target, int tryCount, long tryPauseMillis, long callTimeoutMillis, boolean deserialize) { this(context, op, target, null, tryCount, tryPauseMillis, callTimeoutMillis, deserialize, null); }
  
  Address getInvocationTarget() { return this.target; }
  
  Address toTargetAddress(Address target) { return target; }
  
  Member toTargetMember(Address target) {
    assert target == this.target;
    return this.context.clusterService.getMember(target);
  }
  
  ExceptionAction onException(Throwable t) { return (t instanceof com.hazelcast.core.MemberLeftException) ? ExceptionAction.THROW_EXCEPTION : this.op.onInvocationException(t); }
}
