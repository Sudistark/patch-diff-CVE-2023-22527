package com.hazelcast.collection.impl.queue.operations;

import com.hazelcast.collection.impl.queue.QueueContainer;
import com.hazelcast.collection.impl.queue.QueueDataSerializerHook;
import com.hazelcast.core.ItemEventType;
import com.hazelcast.monitor.impl.LocalQueueStatsImpl;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import com.hazelcast.spi.BlockingOperation;
import com.hazelcast.spi.Notifier;
import com.hazelcast.spi.Operation;
import com.hazelcast.spi.WaitNotifyKey;
import com.hazelcast.spi.impl.MutatingOperation;
import java.io.IOException;

public final class OfferOperation extends QueueBackupAwareOperation implements BlockingOperation, Notifier, IdentifiedDataSerializable, MutatingOperation {
  private Data data;
  
  private long itemId;
  
  public OfferOperation() {}
  
  public OfferOperation(String name, long timeout, Data data) {
    super(name, timeout);
    this.data = data;
  }
  
  public void run() {
    QueueContainer queueContainer = getContainer();
    if (queueContainer.hasEnoughCapacity()) {
      this.itemId = queueContainer.offer(this.data);
      this.response = Boolean.valueOf(true);
    } else {
      this.response = Boolean.valueOf(false);
    } 
  }
  
  public void afterRun() {
    LocalQueueStatsImpl stats = getQueueService().getLocalQueueStatsImpl(this.name);
    if (Boolean.TRUE.equals(this.response)) {
      stats.incrementOffers();
      publishEvent(ItemEventType.ADDED, this.data);
    } else {
      stats.incrementRejectedOffers();
    } 
  }
  
  public Operation getBackupOperation() { return new OfferBackupOperation(this.name, this.data, this.itemId); }
  
  public boolean shouldBackup() { return Boolean.TRUE.equals(this.response); }
  
  public boolean shouldNotify() { return Boolean.TRUE.equals(this.response); }
  
  public WaitNotifyKey getNotifiedKey() { return getContainer().getPollWaitNotifyKey(); }
  
  public WaitNotifyKey getWaitKey() { return getContainer().getOfferWaitNotifyKey(); }
  
  public boolean shouldWait() {
    QueueContainer container = getContainer();
    return (getWaitTimeout() != 0L && !container.hasEnoughCapacity());
  }
  
  public void onWaitExpire() { sendResponse(Boolean.valueOf(false)); }
  
  public int getFactoryId() { return QueueDataSerializerHook.F_ID; }
  
  public int getId() { return 0; }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeData(this.data);
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    this.data = in.readData();
  }
}
