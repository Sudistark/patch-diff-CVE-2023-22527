package com.hazelcast.collection.impl.queue.operations;

import com.hazelcast.collection.impl.queue.QueueContainer;
import com.hazelcast.core.ItemEventType;
import com.hazelcast.monitor.impl.LocalQueueStatsImpl;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.Notifier;
import com.hazelcast.spi.Operation;
import com.hazelcast.spi.WaitNotifyKey;
import com.hazelcast.spi.impl.MutatingOperation;
import com.hazelcast.spi.impl.SerializableList;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Map;

public class DrainOperation extends QueueBackupAwareOperation implements Notifier, MutatingOperation {
  private int maxSize;
  
  private Map<Long, Data> dataMap;
  
  public DrainOperation() {}
  
  public DrainOperation(String name, int maxSize) {
    super(name);
    this.maxSize = maxSize;
  }
  
  public void run() {
    QueueContainer queueContainer = getContainer();
    this.dataMap = queueContainer.drain(this.maxSize);
    this.response = new SerializableList(new ArrayList(this.dataMap.values()));
  }
  
  public void afterRun() {
    LocalQueueStatsImpl stats = getQueueService().getLocalQueueStatsImpl(this.name);
    stats.incrementOtherOperations();
    for (Data data : this.dataMap.values())
      publishEvent(ItemEventType.REMOVED, data); 
  }
  
  public boolean shouldBackup() { return (this.dataMap.size() > 0); }
  
  public Operation getBackupOperation() { return new DrainBackupOperation(this.name, this.dataMap.keySet()); }
  
  public boolean shouldNotify() { return (this.dataMap.size() > 0); }
  
  public WaitNotifyKey getNotifiedKey() { return getContainer().getOfferWaitNotifyKey(); }
  
  public int getId() { return 13; }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeInt(this.maxSize);
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    this.maxSize = in.readInt();
  }
}
