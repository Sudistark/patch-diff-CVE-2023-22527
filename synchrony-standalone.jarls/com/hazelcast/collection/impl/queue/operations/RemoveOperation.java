package com.hazelcast.collection.impl.queue.operations;

import com.hazelcast.collection.impl.queue.QueueContainer;
import com.hazelcast.core.ItemEventType;
import com.hazelcast.monitor.impl.LocalQueueStatsImpl;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.Notifier;
import com.hazelcast.spi.Operation;
import com.hazelcast.spi.WaitNotifyKey;
import com.hazelcast.spi.impl.MutatingOperation;
import java.io.IOException;

public class RemoveOperation extends QueueBackupAwareOperation implements Notifier, MutatingOperation {
  private Data data;
  
  private long itemId = -1L;
  
  public RemoveOperation() {}
  
  public RemoveOperation(String name, Data data) {
    super(name);
    this.data = data;
  }
  
  public void run() {
    QueueContainer queueContainer = getContainer();
    this.itemId = queueContainer.remove(this.data);
    this.response = Boolean.valueOf((this.itemId != -1L));
  }
  
  public void afterRun() {
    LocalQueueStatsImpl stats = getQueueService().getLocalQueueStatsImpl(this.name);
    stats.incrementOtherOperations();
    if (this.itemId != -1L)
      publishEvent(ItemEventType.REMOVED, this.data); 
  }
  
  public boolean shouldBackup() { return Boolean.TRUE.equals(this.response); }
  
  public Operation getBackupOperation() { return new RemoveBackupOperation(this.name, this.itemId); }
  
  public boolean shouldNotify() { return (this.itemId != -1L); }
  
  public WaitNotifyKey getNotifiedKey() { return getContainer().getOfferWaitNotifyKey(); }
  
  public int getId() { return 20; }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeData(this.data);
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    this.data = in.readData();
  }
}
