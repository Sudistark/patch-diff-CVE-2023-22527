package com.hazelcast.collection.impl.queue.operations;

import com.hazelcast.collection.impl.queue.QueueContainer;
import com.hazelcast.monitor.impl.LocalQueueStatsImpl;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.ReadonlyOperation;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;

public class ContainsOperation extends QueueOperation implements ReadonlyOperation {
  private Collection<Data> dataList;
  
  public ContainsOperation() {}
  
  public ContainsOperation(String name, Collection<Data> dataList) {
    super(name);
    this.dataList = dataList;
  }
  
  public void run() {
    QueueContainer queueContainer = getContainer();
    this.response = Boolean.valueOf(queueContainer.contains(this.dataList));
  }
  
  public void afterRun() {
    LocalQueueStatsImpl stats = getQueueService().getLocalQueueStatsImpl(this.name);
    stats.incrementOtherOperations();
  }
  
  public int getId() { return 11; }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeInt(this.dataList.size());
    for (Data data : this.dataList)
      out.writeData(data); 
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    int size = in.readInt();
    this.dataList = new ArrayList(size);
    for (int i = 0; i < size; i++)
      this.dataList.add(in.readData()); 
  }
}
