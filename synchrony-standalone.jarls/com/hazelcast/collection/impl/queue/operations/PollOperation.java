package com.hazelcast.collection.impl.queue.operations;

import com.hazelcast.collection.impl.queue.QueueContainer;
import com.hazelcast.collection.impl.queue.QueueDataSerializerHook;
import com.hazelcast.collection.impl.queue.QueueItem;
import com.hazelcast.core.ItemEventType;
import com.hazelcast.monitor.impl.LocalQueueStatsImpl;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import com.hazelcast.spi.BlockingOperation;
import com.hazelcast.spi.Notifier;
import com.hazelcast.spi.Operation;
import com.hazelcast.spi.WaitNotifyKey;
import com.hazelcast.spi.impl.MutatingOperation;

public final class PollOperation extends QueueBackupAwareOperation implements BlockingOperation, Notifier, IdentifiedDataSerializable, MutatingOperation {
  private QueueItem item;
  
  public PollOperation() {}
  
  public PollOperation(String name, long timeoutMillis) { super(name, timeoutMillis); }
  
  public void run() {
    QueueContainer queueContainer = getContainer();
    this.item = queueContainer.poll();
    if (this.item != null)
      this.response = this.item.getData(); 
  }
  
  public void afterRun() {
    LocalQueueStatsImpl stats = getQueueService().getLocalQueueStatsImpl(this.name);
    if (this.response != null) {
      stats.incrementPolls();
      publishEvent(ItemEventType.REMOVED, this.item.getData());
    } else {
      stats.incrementEmptyPolls();
    } 
  }
  
  public boolean shouldBackup() { return (this.response != null); }
  
  public Operation getBackupOperation() { return new PollBackupOperation(this.name, this.item.getItemId()); }
  
  public boolean shouldNotify() { return (this.response != null); }
  
  public WaitNotifyKey getNotifiedKey() { return getContainer().getOfferWaitNotifyKey(); }
  
  public WaitNotifyKey getWaitKey() { return getContainer().getPollWaitNotifyKey(); }
  
  public boolean shouldWait() { return (getWaitTimeout() != 0L && getContainer().size() == 0); }
  
  public void onWaitExpire() { sendResponse(null); }
  
  public int getFactoryId() { return QueueDataSerializerHook.F_ID; }
  
  public int getId() { return 1; }
}
