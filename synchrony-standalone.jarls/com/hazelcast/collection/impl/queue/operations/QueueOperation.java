package com.hazelcast.collection.impl.queue.operations;

import com.hazelcast.collection.impl.queue.QueueContainer;
import com.hazelcast.collection.impl.queue.QueueDataSerializerHook;
import com.hazelcast.collection.impl.queue.QueueEvent;
import com.hazelcast.collection.impl.queue.QueueEventFilter;
import com.hazelcast.collection.impl.queue.QueueService;
import com.hazelcast.core.ItemEventType;
import com.hazelcast.nio.Address;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import com.hazelcast.spi.EventRegistration;
import com.hazelcast.spi.EventService;
import com.hazelcast.spi.NamedOperation;
import com.hazelcast.spi.PartitionAwareOperation;
import com.hazelcast.spi.exception.RetryableHazelcastException;
import com.hazelcast.spi.impl.AbstractNamedOperation;
import java.util.Collection;

public abstract class QueueOperation extends AbstractNamedOperation implements PartitionAwareOperation, IdentifiedDataSerializable, NamedOperation {
  protected Object response;
  
  private QueueContainer container;
  
  protected QueueOperation() {}
  
  protected QueueOperation(String name) { super(name); }
  
  protected QueueOperation(String name, long timeoutMillis) {
    this(name);
    setWaitTimeout(timeoutMillis);
  }
  
  protected final QueueContainer getContainer() { return this.container; }
  
  private void initializeContainer() {
    QueueService queueService = (QueueService)getService();
    try {
      this.container = queueService.getOrCreateContainer(this.name, this instanceof com.hazelcast.spi.BackupOperation);
    } catch (Exception e) {
      throw new RetryableHazelcastException(e);
    } 
  }
  
  public final Object getResponse() { return this.response; }
  
  public final String getServiceName() { return "hz:impl:queueService"; }
  
  public void afterRun() {}
  
  public void beforeRun() { initializeContainer(); }
  
  public boolean hasListener() {
    EventService eventService = getNodeEngine().getEventService();
    Collection<EventRegistration> registrations = eventService.getRegistrations(getServiceName(), this.name);
    return (registrations.size() > 0);
  }
  
  public void publishEvent(ItemEventType eventType, Data data) {
    EventService eventService = getNodeEngine().getEventService();
    Collection<EventRegistration> registrations = eventService.getRegistrations(getServiceName(), this.name);
    Address thisAddress = getNodeEngine().getThisAddress();
    for (EventRegistration registration : registrations) {
      QueueEventFilter filter = (QueueEventFilter)registration.getFilter();
      QueueEvent event = new QueueEvent(this.name, filter.isIncludeValue() ? data : null, eventType, thisAddress);
      eventService.publishEvent(getServiceName(), registration, event, this.name.hashCode());
    } 
  }
  
  protected QueueService getQueueService() { return (QueueService)getService(); }
  
  public int getFactoryId() { return QueueDataSerializerHook.F_ID; }
}
