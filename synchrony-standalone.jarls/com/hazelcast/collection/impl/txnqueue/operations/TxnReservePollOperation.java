package com.hazelcast.collection.impl.txnqueue.operations;

import com.hazelcast.collection.impl.queue.QueueContainer;
import com.hazelcast.collection.impl.queue.QueueItem;
import com.hazelcast.collection.impl.queue.operations.QueueBackupAwareOperation;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.spi.BlockingOperation;
import com.hazelcast.spi.Operation;
import com.hazelcast.spi.WaitNotifyKey;
import com.hazelcast.spi.impl.MutatingOperation;
import java.io.IOException;

public class TxnReservePollOperation extends QueueBackupAwareOperation implements BlockingOperation, MutatingOperation {
  private long reservedOfferId;
  
  private String transactionId;
  
  public TxnReservePollOperation() {}
  
  public TxnReservePollOperation(String name, long timeoutMillis, long reservedOfferId, String transactionId) {
    super(name, timeoutMillis);
    this.reservedOfferId = reservedOfferId;
    this.transactionId = transactionId;
  }
  
  public void run() {
    QueueContainer createContainer = getContainer();
    this.response = createContainer.txnPollReserve(this.reservedOfferId, this.transactionId);
  }
  
  public WaitNotifyKey getWaitKey() {
    QueueContainer queueContainer = getContainer();
    return queueContainer.getPollWaitNotifyKey();
  }
  
  public boolean shouldWait() {
    QueueContainer queueContainer = getContainer();
    return (getWaitTimeout() != 0L && this.reservedOfferId == -1L && queueContainer.size() == 0);
  }
  
  public void onWaitExpire() { sendResponse(null); }
  
  public boolean shouldBackup() { return (this.response != null); }
  
  public Operation getBackupOperation() {
    QueueItem item = (QueueItem)this.response;
    long itemId = item.getItemId();
    return new TxnReservePollBackupOperation(this.name, itemId, this.transactionId);
  }
  
  public int getId() { return 31; }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeLong(this.reservedOfferId);
    out.writeUTF(this.transactionId);
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    this.reservedOfferId = in.readLong();
    this.transactionId = in.readUTF();
  }
}
