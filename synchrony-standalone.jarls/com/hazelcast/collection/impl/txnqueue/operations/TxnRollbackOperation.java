package com.hazelcast.collection.impl.txnqueue.operations;

import com.hazelcast.collection.impl.CollectionTxnUtil;
import com.hazelcast.collection.impl.queue.QueueContainer;
import com.hazelcast.collection.impl.queue.operations.QueueBackupAwareOperation;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.spi.Notifier;
import com.hazelcast.spi.Operation;
import com.hazelcast.spi.WaitNotifyKey;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import java.io.IOException;

public class TxnRollbackOperation extends QueueBackupAwareOperation implements Notifier {
  private long[] itemIds;
  
  private long shouldNotify;
  
  public TxnRollbackOperation() {}
  
  @SuppressFBWarnings({"EI_EXPOSE_REP"})
  public TxnRollbackOperation(int partitionId, String name, long[] itemIds) {
    super(name);
    setPartitionId(partitionId);
    this.itemIds = itemIds;
  }
  
  public void run() {
    QueueContainer queueContainer = getContainer();
    for (long itemId : this.itemIds) {
      if (CollectionTxnUtil.isRemove(itemId)) {
        this.response = Boolean.valueOf(queueContainer.txnRollbackPoll(itemId, false));
      } else {
        this.response = Boolean.valueOf(queueContainer.txnRollbackOffer(-itemId));
      } 
    } 
  }
  
  public boolean shouldBackup() { return true; }
  
  public Operation getBackupOperation() { return new TxnRollbackBackupOperation(this.name, this.itemIds); }
  
  public boolean shouldNotify() {
    for (long itemId : this.itemIds)
      this.shouldNotify += (CollectionTxnUtil.isRemove(itemId) ? 1L : -1L); 
    return (this.shouldNotify != 0L);
  }
  
  public WaitNotifyKey getNotifiedKey() {
    QueueContainer queueContainer = getContainer();
    if (CollectionTxnUtil.isRemove(this.shouldNotify))
      return queueContainer.getPollWaitNotifyKey(); 
    return queueContainer.getOfferWaitNotifyKey();
  }
  
  public int getId() { return 34; }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeLongArray(this.itemIds);
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    this.itemIds = in.readLongArray();
  }
}
