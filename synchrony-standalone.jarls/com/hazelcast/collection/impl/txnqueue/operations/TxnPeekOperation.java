package com.hazelcast.collection.impl.txnqueue.operations;

import com.hazelcast.collection.impl.queue.QueueContainer;
import com.hazelcast.collection.impl.queue.operations.QueueOperation;
import com.hazelcast.monitor.impl.LocalQueueStatsImpl;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.spi.BlockingOperation;
import com.hazelcast.spi.ReadonlyOperation;
import com.hazelcast.spi.WaitNotifyKey;
import java.io.IOException;

public class TxnPeekOperation extends QueueOperation implements BlockingOperation, ReadonlyOperation {
  private long itemId;
  
  private String transactionId;
  
  public TxnPeekOperation() {}
  
  public TxnPeekOperation(String name, long timeoutMillis, long itemId, String transactionId) {
    super(name, timeoutMillis);
    this.itemId = itemId;
    this.transactionId = transactionId;
  }
  
  public void run() {
    QueueContainer queueContainer = getContainer();
    this.response = queueContainer.txnPeek(this.itemId, this.transactionId);
  }
  
  public void afterRun() {
    if (this.response != null) {
      LocalQueueStatsImpl localQueueStatsImpl = getQueueService().getLocalQueueStatsImpl(this.name);
      localQueueStatsImpl.incrementOtherOperations();
    } 
  }
  
  public int getId() { return 39; }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeLong(this.itemId);
    out.writeUTF(this.transactionId);
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    this.itemId = in.readLong();
    this.transactionId = in.readUTF();
  }
  
  public WaitNotifyKey getWaitKey() {
    QueueContainer queueContainer = getContainer();
    return queueContainer.getPollWaitNotifyKey();
  }
  
  public boolean shouldWait() {
    QueueContainer queueContainer = getContainer();
    return (getWaitTimeout() != 0L && this.itemId == -1L && queueContainer.size() == 0);
  }
  
  public void onWaitExpire() { sendResponse(null); }
}
