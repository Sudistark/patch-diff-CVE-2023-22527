package com.hazelcast.collection.impl.txnqueue.operations;

import com.hazelcast.collection.impl.queue.QueueContainer;
import com.hazelcast.core.ItemEventType;
import com.hazelcast.monitor.impl.LocalQueueStatsImpl;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.Notifier;
import com.hazelcast.spi.Operation;
import com.hazelcast.spi.WaitNotifyKey;
import com.hazelcast.spi.impl.MutatingOperation;

public class TxnPollOperation extends BaseTxnQueueOperation implements Notifier, MutatingOperation {
  private Data data;
  
  public TxnPollOperation() {}
  
  public TxnPollOperation(String name, long itemId) { super(name, itemId); }
  
  public void run() {
    QueueContainer queueContainer = getContainer();
    this.data = queueContainer.txnCommitPoll(getItemId());
    this.response = Boolean.valueOf((this.data != null));
  }
  
  public void afterRun() {
    LocalQueueStatsImpl queueStats = getQueueService().getLocalQueueStatsImpl(this.name);
    if (this.data == null) {
      queueStats.incrementEmptyPolls();
    } else {
      queueStats.incrementPolls();
      publishEvent(ItemEventType.REMOVED, this.data);
    } 
  }
  
  public boolean shouldNotify() { return Boolean.TRUE.equals(this.response); }
  
  public WaitNotifyKey getNotifiedKey() {
    QueueContainer container = getContainer();
    return container.getOfferWaitNotifyKey();
  }
  
  public boolean shouldBackup() { return Boolean.TRUE.equals(this.response); }
  
  public Operation getBackupOperation() { return new TxnPollBackupOperation(this.name, getItemId()); }
  
  public boolean isRemoveOperation() { return true; }
  
  public int getId() { return 26; }
}
