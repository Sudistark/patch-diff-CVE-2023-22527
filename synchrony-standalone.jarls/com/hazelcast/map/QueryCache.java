package com.hazelcast.map;

import com.hazelcast.map.listener.MapListener;
import com.hazelcast.query.Predicate;
import java.util.Collection;
import java.util.Map;
import java.util.Set;

public interface QueryCache<K, V> {
  V get(Object paramObject);
  
  boolean containsKey(Object paramObject);
  
  boolean containsValue(Object paramObject);
  
  boolean isEmpty();
  
  int size();
  
  void addIndex(String paramString, boolean paramBoolean);
  
  Map<K, V> getAll(Set<K> paramSet);
  
  Set<K> keySet();
  
  Set<K> keySet(Predicate paramPredicate);
  
  Set<Map.Entry<K, V>> entrySet();
  
  Set<Map.Entry<K, V>> entrySet(Predicate paramPredicate);
  
  Collection<V> values();
  
  Collection<V> values(Predicate paramPredicate);
  
  String addEntryListener(MapListener paramMapListener, boolean paramBoolean);
  
  String addEntryListener(MapListener paramMapListener, K paramK, boolean paramBoolean);
  
  String addEntryListener(MapListener paramMapListener, Predicate<K, V> paramPredicate, boolean paramBoolean);
  
  String addEntryListener(MapListener paramMapListener, Predicate<K, V> paramPredicate, K paramK, boolean paramBoolean);
  
  boolean removeEntryListener(String paramString);
  
  String getName();
  
  boolean tryRecover();
  
  void destroy();
}
