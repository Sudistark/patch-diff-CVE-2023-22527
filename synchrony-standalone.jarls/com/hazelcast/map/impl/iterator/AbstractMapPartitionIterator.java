package com.hazelcast.map.impl.iterator;

import com.hazelcast.core.IMap;
import com.hazelcast.internal.serialization.InternalSerializationService;
import com.hazelcast.map.impl.LazyMapEntry;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.serialization.SerializationService;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;

public abstract class AbstractMapPartitionIterator<K, V> extends Object implements Iterator<Map.Entry<K, V>> {
  protected IMap<K, V> map;
  
  protected final int fetchSize;
  
  protected final int partitionId;
  
  protected boolean prefetchValues;
  
  protected int lastTableIndex;
  
  protected int index;
  
  protected int currentIndex;
  
  protected List result;
  
  public AbstractMapPartitionIterator(IMap<K, V> map, int fetchSize, int partitionId, boolean prefetchValues) {
    this.lastTableIndex = Integer.MAX_VALUE;
    this.currentIndex = -1;
    this.map = map;
    this.fetchSize = fetchSize;
    this.partitionId = partitionId;
    this.prefetchValues = prefetchValues;
  }
  
  public boolean hasNext() { return ((this.result != null && this.index < this.result.size()) || advance()); }
  
  public Map.Entry<K, V> next() {
    while (hasNext()) {
      this.currentIndex = this.index;
      this.index++;
      Data keyData = getKey(this.currentIndex);
      Object value = getValue(this.currentIndex, keyData);
      if (value != null)
        return new LazyMapEntry(keyData, value, (InternalSerializationService)getSerializationService()); 
    } 
    throw new NoSuchElementException();
  }
  
  public void remove() {
    if (this.result == null || this.currentIndex < 0)
      throw new IllegalStateException("Iterator.next() must be called before remove()!"); 
    Data keyData = getKey(this.currentIndex);
    this.map.remove(keyData);
    this.currentIndex = -1;
  }
  
  protected boolean advance() {
    if (this.lastTableIndex < 0) {
      this.lastTableIndex = Integer.MAX_VALUE;
      return false;
    } 
    this.result = fetch();
    if (this.result != null && this.result.size() > 0) {
      this.index = 0;
      return true;
    } 
    return false;
  }
  
  protected void setLastTableIndex(List response, int lastTableIndex) {
    if (response != null && response.size() > 0)
      this.lastTableIndex = lastTableIndex; 
  }
  
  private Data getKey(int index) {
    if (this.result != null) {
      if (this.prefetchValues) {
        Map.Entry<Data, Data> entry = (Map.Entry)this.result.get(index);
        return (Data)entry.getKey();
      } 
      return (Data)this.result.get(index);
    } 
    return null;
  }
  
  private Object getValue(int index, Data keyData) {
    if (this.result != null) {
      if (this.prefetchValues) {
        Map.Entry<Data, Data> entry = (Map.Entry)this.result.get(index);
        return entry.getValue();
      } 
      return this.map.get(keyData);
    } 
    return null;
  }
  
  protected abstract List fetch();
  
  protected abstract SerializationService getSerializationService();
}
