package com.hazelcast.map.impl;

import com.hazelcast.core.MapStore;
import com.hazelcast.internal.diagnostics.StoreLatencyPlugin;
import java.util.Collection;
import java.util.Map;

public class LatencyTrackingMapStore<K, V> extends Object implements MapStore<K, V> {
  static final String KEY = "MapStoreLatency";
  
  private final StoreLatencyPlugin.LatencyProbe deleteProbe;
  
  private final StoreLatencyPlugin.LatencyProbe deleteAllProbe;
  
  private final StoreLatencyPlugin.LatencyProbe storeProbe;
  
  private final StoreLatencyPlugin.LatencyProbe storeAllProbe;
  
  private final MapStore<K, V> delegate;
  
  public LatencyTrackingMapStore(MapStore<K, V> delegate, StoreLatencyPlugin plugin, String mapName) {
    this.delegate = delegate;
    this.deleteProbe = plugin.newProbe("MapStoreLatency", mapName, "delete");
    this.deleteAllProbe = plugin.newProbe("MapStoreLatency", mapName, "deleteAll");
    this.storeProbe = plugin.newProbe("MapStoreLatency", mapName, "store");
    this.storeAllProbe = plugin.newProbe("MapStoreLatency", mapName, "storeAll");
  }
  
  public V load(K key) { throw new UnsupportedOperationException(); }
  
  public Map<K, V> loadAll(Collection<K> keys) { throw new UnsupportedOperationException(); }
  
  public Iterable<K> loadAllKeys() { throw new UnsupportedOperationException(); }
  
  public void store(K key, V value) {
    startNanos = System.nanoTime();
    try {
      this.delegate.store(key, value);
    } finally {
      this.storeProbe.recordValue(System.nanoTime() - startNanos);
    } 
  }
  
  public void storeAll(Map<K, V> map) {
    startNanos = System.nanoTime();
    try {
      this.delegate.storeAll(map);
    } finally {
      this.storeAllProbe.recordValue(System.nanoTime() - startNanos);
    } 
  }
  
  public void delete(K key) {
    startNanos = System.nanoTime();
    try {
      this.delegate.delete(key);
    } finally {
      this.deleteProbe.recordValue(System.nanoTime() - startNanos);
    } 
  }
  
  public void deleteAll(Collection<K> keys) {
    startNanos = System.nanoTime();
    try {
      this.delegate.deleteAll(keys);
    } finally {
      this.deleteAllProbe.recordValue(System.nanoTime() - startNanos);
    } 
  }
}
