package com.hazelcast.map.impl;

import com.hazelcast.cluster.ClusterState;
import com.hazelcast.config.InMemoryFormat;
import com.hazelcast.config.MapConfig;
import com.hazelcast.config.PartitioningStrategyConfig;
import com.hazelcast.core.PartitioningStrategy;
import com.hazelcast.internal.eviction.ExpirationManager;
import com.hazelcast.internal.util.comparators.ValueComparator;
import com.hazelcast.map.impl.event.MapEventPublisher;
import com.hazelcast.map.impl.eviction.MapClearExpiredRecordsTask;
import com.hazelcast.map.impl.journal.MapEventJournal;
import com.hazelcast.map.impl.nearcache.MapNearCacheManager;
import com.hazelcast.map.impl.operation.MapOperationProvider;
import com.hazelcast.map.impl.query.PartitionScanRunner;
import com.hazelcast.map.impl.query.QueryEngine;
import com.hazelcast.map.impl.query.QueryRunner;
import com.hazelcast.map.impl.query.ResultProcessorRegistry;
import com.hazelcast.map.impl.querycache.QueryCacheContext;
import com.hazelcast.map.impl.record.Record;
import com.hazelcast.map.impl.recordstore.RecordStore;
import com.hazelcast.map.impl.recordstore.RecordStoreMutationObserver;
import com.hazelcast.map.merge.MergePolicyProvider;
import com.hazelcast.monitor.impl.LocalMapStatsImpl;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.query.impl.IndexCopyBehavior;
import com.hazelcast.query.impl.IndexProvider;
import com.hazelcast.query.impl.getters.Extractors;
import com.hazelcast.query.impl.predicates.QueryOptimizer;
import com.hazelcast.spi.EventFilter;
import com.hazelcast.spi.NodeEngine;
import com.hazelcast.spi.Operation;
import com.hazelcast.util.function.Predicate;
import java.util.Collection;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;

public interface MapServiceContext extends MapServiceContextInterceptorSupport, MapServiceContextEventListenerSupport {
  Object toObject(Object paramObject);
  
  Data toData(Object paramObject, PartitioningStrategy paramPartitioningStrategy);
  
  Data toData(Object paramObject);
  
  MapContainer getMapContainer(String paramString);
  
  Map<String, MapContainer> getMapContainers();
  
  PartitionContainer getPartitionContainer(int paramInt);
  
  void initPartitionsContainers();
  
  void removeRecordStoresFromPartitionMatchingWith(Predicate<RecordStore> paramPredicate, int paramInt, boolean paramBoolean1, boolean paramBoolean2);
  
  MapService getService();
  
  void destroyMapStores();
  
  void flushMaps();
  
  void destroyMap(String paramString);
  
  void reset();
  
  void shutdown();
  
  RecordStore createRecordStore(MapContainer paramMapContainer, int paramInt, MapKeyLoader paramMapKeyLoader);
  
  RecordStore getRecordStore(int paramInt, String paramString);
  
  RecordStore getRecordStore(int paramInt, String paramString, boolean paramBoolean);
  
  RecordStore getExistingRecordStore(int paramInt, String paramString);
  
  Collection<Integer> getOwnedPartitions();
  
  void reloadOwnedPartitions();
  
  AtomicInteger getWriteBehindQueueItemCounter();
  
  ExpirationManager getExpirationManager();
  
  void setService(MapService paramMapService);
  
  NodeEngine getNodeEngine();
  
  MergePolicyProvider getMergePolicyProvider();
  
  Object getMergePolicy(String paramString);
  
  MapEventPublisher getMapEventPublisher();
  
  MapEventJournal getEventJournal();
  
  QueryEngine getQueryEngine(String paramString);
  
  QueryRunner getMapQueryRunner(String paramString);
  
  QueryOptimizer getQueryOptimizer();
  
  LocalMapStatsProvider getLocalMapStatsProvider();
  
  MapClearExpiredRecordsTask getClearExpiredRecordsTask();
  
  MapOperationProvider getMapOperationProvider(String paramString);
  
  MapOperationProvider getMapOperationProvider(MapConfig paramMapConfig);
  
  IndexProvider getIndexProvider(MapConfig paramMapConfig);
  
  Extractors getExtractors(String paramString);
  
  void incrementOperationStats(long paramLong, LocalMapStatsImpl paramLocalMapStatsImpl, String paramString, Operation paramOperation);
  
  boolean removeMapContainer(MapContainer paramMapContainer);
  
  PartitioningStrategy getPartitioningStrategy(String paramString, PartitioningStrategyConfig paramPartitioningStrategyConfig);
  
  void removePartitioningStrategyFromCache(String paramString);
  
  PartitionContainer[] getPartitionContainers();
  
  void onClusterStateChange(ClusterState paramClusterState);
  
  PartitionScanRunner getPartitionScanRunner();
  
  ResultProcessorRegistry getResultProcessorRegistry();
  
  MapNearCacheManager getMapNearCacheManager();
  
  QueryCacheContext getQueryCacheContext();
  
  String addListenerAdapter(ListenerAdapter paramListenerAdapter, EventFilter paramEventFilter, String paramString);
  
  String addLocalListenerAdapter(ListenerAdapter paramListenerAdapter, String paramString);
  
  IndexCopyBehavior getIndexCopyBehavior();
  
  Collection<RecordStoreMutationObserver<Record>> createRecordStoreMutationObservers(String paramString, int paramInt);
  
  ValueComparator getValueComparatorOf(InMemoryFormat paramInMemoryFormat);
}
