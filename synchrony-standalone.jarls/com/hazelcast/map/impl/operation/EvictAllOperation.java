package com.hazelcast.map.impl.operation;

import com.hazelcast.core.EntryEventType;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.spi.BackupAwareOperation;
import com.hazelcast.spi.Operation;
import com.hazelcast.spi.PartitionAwareOperation;
import com.hazelcast.spi.impl.MutatingOperation;
import java.io.IOException;

public class EvictAllOperation extends MapOperation implements BackupAwareOperation, MutatingOperation, PartitionAwareOperation {
  private boolean shouldRunOnBackup;
  
  private int numberOfEvictedEntries;
  
  public EvictAllOperation() { this(null); }
  
  public EvictAllOperation(String name) {
    super(name);
    this.createRecordStoreOnDemand = false;
  }
  
  public void run() {
    if (this.recordStore == null)
      return; 
    this.numberOfEvictedEntries = this.recordStore.evictAll(false);
    this.shouldRunOnBackup = true;
  }
  
  public void afterRun() {
    super.afterRun();
    hintMapEvent();
    invalidateAllKeysInNearCaches();
  }
  
  private void hintMapEvent() { this.mapEventPublisher.hintMapEvent(getCallerAddress(), this.name, EntryEventType.EVICT_ALL, this.numberOfEvictedEntries, getPartitionId()); }
  
  public boolean shouldBackup() { return this.shouldRunOnBackup; }
  
  public Object getResponse() { return Integer.valueOf(this.numberOfEvictedEntries); }
  
  public int getSyncBackupCount() { return this.mapServiceContext.getMapContainer(this.name).getBackupCount(); }
  
  public int getAsyncBackupCount() { return this.mapServiceContext.getMapContainer(this.name).getAsyncBackupCount(); }
  
  public Operation getBackupOperation() { return new EvictAllBackupOperation(this.name); }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeInt(this.numberOfEvictedEntries);
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    this.numberOfEvictedEntries = in.readInt();
  }
  
  protected void toString(StringBuilder sb) {
    super.toString(sb);
    sb.append(", shouldRunOnBackup=").append(this.shouldRunOnBackup);
    sb.append(", numberOfEvictedEntries=").append(this.numberOfEvictedEntries);
  }
  
  public int getId() { return 31; }
}
