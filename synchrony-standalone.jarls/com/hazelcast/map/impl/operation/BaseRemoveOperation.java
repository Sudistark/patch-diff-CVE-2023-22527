package com.hazelcast.map.impl.operation;

import com.hazelcast.core.EntryEventType;
import com.hazelcast.internal.cluster.Versions;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.BackupAwareOperation;
import com.hazelcast.spi.Operation;
import com.hazelcast.spi.impl.MutatingOperation;
import java.io.IOException;

public abstract class BaseRemoveOperation extends LockAwareOperation implements BackupAwareOperation, MutatingOperation {
  private static final long BITMASK_TTL_DISABLE_WAN = -9223372036854775808L;
  
  protected Data dataOldValue;
  
  public BaseRemoveOperation(String name, Data dataKey, boolean disableWanReplicationEvent) {
    super(name, dataKey);
    this.disableWanReplicationEvent = disableWanReplicationEvent;
  }
  
  public BaseRemoveOperation(String name, Data dataKey) { this(name, dataKey, false); }
  
  public BaseRemoveOperation() {}
  
  public void afterRun() {
    this.mapServiceContext.interceptAfterRemove(this.name, this.dataOldValue);
    this.mapEventPublisher.publishEvent(getCallerAddress(), this.name, EntryEventType.REMOVED, this.dataKey, this.dataOldValue, null);
    invalidateNearCache(this.dataKey);
    publishWanRemove(this.dataKey);
    evict(this.dataKey);
  }
  
  public Object getResponse() { return this.dataOldValue; }
  
  public Operation getBackupOperation() { return new RemoveBackupOperation(this.name, this.dataKey, false, this.disableWanReplicationEvent); }
  
  public int getAsyncBackupCount() { return this.mapContainer.getAsyncBackupCount(); }
  
  public int getSyncBackupCount() { return this.mapContainer.getBackupCount(); }
  
  public boolean shouldBackup() { return true; }
  
  public void onWaitExpire() { sendResponse(null); }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    if (this.disableWanReplicationEvent && out.getVersion().isEqualTo(Versions.V3_10))
      this.ttl ^= Float.MIN_VALUE; 
    super.writeInternal(out);
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    if (in.getVersion().isEqualTo(Versions.V3_10))
      this.disableWanReplicationEvent |= (((this.ttl & Float.MIN_VALUE) == 0L)); 
  }
}
