package com.hazelcast.map.impl.operation;

import com.hazelcast.core.EntryEventType;
import com.hazelcast.spi.BackupAwareOperation;
import com.hazelcast.spi.Operation;
import com.hazelcast.spi.PartitionAwareOperation;
import com.hazelcast.spi.impl.MutatingOperation;

public class ClearOperation extends MapOperation implements BackupAwareOperation, PartitionAwareOperation, MutatingOperation {
  private boolean shouldBackup;
  
  private int numberOfClearedEntries;
  
  public ClearOperation() { this(null); }
  
  public ClearOperation(String name) {
    super(name);
    this.createRecordStoreOnDemand = false;
  }
  
  public void run() {
    if (this.recordStore == null)
      return; 
    this.numberOfClearedEntries = this.recordStore.clear();
    this.shouldBackup = true;
  }
  
  public void afterRun() {
    super.afterRun();
    invalidateAllKeysInNearCaches();
    hintMapEvent();
  }
  
  private void hintMapEvent() {
    this.mapEventPublisher.hintMapEvent(getCallerAddress(), this.name, EntryEventType.CLEAR_ALL, this.numberOfClearedEntries, 
        getPartitionId());
  }
  
  public boolean shouldBackup() { return this.shouldBackup; }
  
  public int getSyncBackupCount() { return this.mapServiceContext.getMapContainer(this.name).getBackupCount(); }
  
  public int getAsyncBackupCount() { return this.mapServiceContext.getMapContainer(this.name).getAsyncBackupCount(); }
  
  public Object getResponse() { return Integer.valueOf(this.numberOfClearedEntries); }
  
  public Operation getBackupOperation() {
    ClearBackupOperation clearBackupOperation = new ClearBackupOperation(this.name);
    clearBackupOperation.setServiceName("hz:impl:mapService");
    return clearBackupOperation;
  }
  
  public int getId() { return 28; }
}
