package com.hazelcast.map.impl.operation;

import com.hazelcast.map.impl.mapstore.MapDataStore;
import com.hazelcast.map.impl.mapstore.writebehind.WriteBehindQueue;
import com.hazelcast.map.impl.mapstore.writebehind.WriteBehindStore;
import com.hazelcast.map.impl.mapstore.writebehind.entry.DelayedEntry;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.spi.BlockingOperation;
import com.hazelcast.spi.PartitionAwareOperation;
import com.hazelcast.spi.ReadonlyOperation;
import com.hazelcast.spi.WaitNotifyKey;
import java.io.IOException;

public class AwaitMapFlushOperation extends MapOperation implements PartitionAwareOperation, ReadonlyOperation, BlockingOperation {
  private long sequence;
  
  private WriteBehindStore store;
  
  public AwaitMapFlushOperation() {}
  
  public AwaitMapFlushOperation(String name, long sequence) {
    super(name);
    this.sequence = sequence;
  }
  
  public void innerBeforeRun() {
    super.innerBeforeRun();
    MapDataStore mapDataStore = this.recordStore.getMapDataStore();
    if (!(mapDataStore instanceof WriteBehindStore))
      return; 
    this.store = (WriteBehindStore)mapDataStore;
  }
  
  public void run() {}
  
  public Object getResponse() { return Boolean.TRUE; }
  
  public WaitNotifyKey getWaitKey() { return new MapFlushWaitNotifyKey(this.name, getPartitionId(), this.sequence); }
  
  public boolean shouldWait() {
    WriteBehindQueue<DelayedEntry> writeBehindQueue = this.store.getWriteBehindQueue();
    DelayedEntry entry = (DelayedEntry)writeBehindQueue.peek();
    if (entry == null)
      return false; 
    long currentSequence = entry.getSequence();
    return (currentSequence <= this.sequence && writeBehindQueue
      .size() + currentSequence - 1L >= this.sequence);
  }
  
  public void onWaitExpire() { sendResponse(Boolean.valueOf(false)); }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeLong(this.sequence);
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    this.sequence = in.readLong();
  }
  
  public int getId() { return 44; }
}
