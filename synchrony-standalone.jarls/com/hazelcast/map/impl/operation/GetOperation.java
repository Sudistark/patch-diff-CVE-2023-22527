package com.hazelcast.map.impl.operation;

import com.hazelcast.concurrent.lock.LockWaitNotifyKey;
import com.hazelcast.core.OperationTimeoutException;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.BlockingOperation;
import com.hazelcast.spi.WaitNotifyKey;

public final class GetOperation extends ReadonlyKeyBasedMapOperation implements BlockingOperation {
  private Data result;
  
  public GetOperation() {}
  
  public GetOperation(String name, Data dataKey) {
    super(name, dataKey);
    this.dataKey = dataKey;
  }
  
  public void run() { this.result = this.mapServiceContext.toData(this.recordStore.get(this.dataKey, false, getCallerAddress())); }
  
  public void afterRun() { this.mapServiceContext.interceptAfterGet(this.name, this.result); }
  
  public WaitNotifyKey getWaitKey() { return new LockWaitNotifyKey(getServiceNamespace(), this.dataKey); }
  
  public boolean shouldWait() {
    if (this.recordStore.isTransactionallyLocked(this.dataKey))
      return !this.recordStore.canAcquireLock(this.dataKey, getCallerUuid(), getThreadId()); 
    return false;
  }
  
  public void onWaitExpire() { sendResponse(new OperationTimeoutException("Cannot read transactionally locked entry!")); }
  
  public Data getResponse() { return this.result; }
  
  public int getId() { return 1; }
}
