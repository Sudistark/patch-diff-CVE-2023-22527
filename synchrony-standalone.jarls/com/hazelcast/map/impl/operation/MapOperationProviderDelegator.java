package com.hazelcast.map.impl.operation;

import com.hazelcast.core.EntryView;
import com.hazelcast.map.EntryProcessor;
import com.hazelcast.map.impl.MapEntries;
import com.hazelcast.map.impl.query.Query;
import com.hazelcast.map.merge.MapMergePolicy;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.query.Predicate;
import com.hazelcast.spi.OperationFactory;
import com.hazelcast.spi.merge.SplitBrainMergePolicy;
import com.hazelcast.spi.merge.SplitBrainMergeTypes;
import java.util.List;
import java.util.Set;

abstract class MapOperationProviderDelegator implements MapOperationProvider {
  abstract MapOperationProvider getDelegate();
  
  public MapOperation createPutOperation(String name, Data key, Data value, long ttl, long maxIdle) { return getDelegate().createPutOperation(name, key, value, ttl, maxIdle); }
  
  public MapOperation createTryPutOperation(String name, Data dataKey, Data value, long timeout) { return getDelegate().createTryPutOperation(name, dataKey, value, timeout); }
  
  public MapOperation createSetOperation(String name, Data dataKey, Data value, long ttl, long maxIdle) { return getDelegate().createSetOperation(name, dataKey, value, ttl, maxIdle); }
  
  public MapOperation createPutIfAbsentOperation(String name, Data key, Data value, long ttl, long maxIdle) { return getDelegate().createPutIfAbsentOperation(name, key, value, ttl, maxIdle); }
  
  public MapOperation createPutTransientOperation(String name, Data key, Data value, long ttl, long maxIdle) { return getDelegate().createPutTransientOperation(name, key, value, ttl, maxIdle); }
  
  public MapOperation createRemoveOperation(String name, Data key, boolean disableWanReplicationEvent) { return getDelegate().createRemoveOperation(name, key, disableWanReplicationEvent); }
  
  public MapOperation createTryRemoveOperation(String name, Data dataKey, long timeout) { return getDelegate().createTryRemoveOperation(name, dataKey, timeout); }
  
  public MapOperation createReplaceOperation(String name, Data dataKey, Data value) { return getDelegate().createReplaceOperation(name, dataKey, value); }
  
  public MapOperation createRemoveIfSameOperation(String name, Data dataKey, Data value) { return getDelegate().createRemoveIfSameOperation(name, dataKey, value); }
  
  public MapOperation createReplaceIfSameOperation(String name, Data dataKey, Data expect, Data update) { return getDelegate().createReplaceIfSameOperation(name, dataKey, expect, update); }
  
  public MapOperation createDeleteOperation(String name, Data key, boolean disableWanReplicationEvent) { return getDelegate().createDeleteOperation(name, key, disableWanReplicationEvent); }
  
  public MapOperation createClearOperation(String name) { return getDelegate().createClearOperation(name); }
  
  public MapOperation createEntryOperation(String name, Data dataKey, EntryProcessor entryProcessor) { return getDelegate().createEntryOperation(name, dataKey, entryProcessor); }
  
  public MapOperation createEvictOperation(String name, Data dataKey, boolean asyncBackup) { return getDelegate().createEvictOperation(name, dataKey, asyncBackup); }
  
  public MapOperation createEvictAllOperation(String name) { return getDelegate().createEvictAllOperation(name); }
  
  public MapOperation createContainsKeyOperation(String name, Data dataKey) { return getDelegate().createContainsKeyOperation(name, dataKey); }
  
  public MapOperation createGetEntryViewOperation(String name, Data dataKey) { return getDelegate().createGetEntryViewOperation(name, dataKey); }
  
  public MapOperation createGetOperation(String name, Data dataKey) { return getDelegate().createGetOperation(name, dataKey); }
  
  public MapOperation createLoadAllOperation(String name, List<Data> keys, boolean replaceExistingValues) { return getDelegate().createLoadAllOperation(name, keys, replaceExistingValues); }
  
  public MapOperation createPutAllOperation(String name, MapEntries mapEntries) { return getDelegate().createPutAllOperation(name, mapEntries); }
  
  public OperationFactory createPutAllOperationFactory(String name, int[] partitions, MapEntries[] mapEntries) { return getDelegate().createPutAllOperationFactory(name, partitions, mapEntries); }
  
  public OperationFactory createMergeOperationFactory(String name, int[] partitions, List[] mergingEntries, SplitBrainMergePolicy<Data, SplitBrainMergeTypes.MapMergeTypes> mergePolicy) { return getDelegate().createMergeOperationFactory(name, partitions, mergingEntries, mergePolicy); }
  
  public MapOperation createPutFromLoadAllOperation(String name, List<Data> keyValueSequence) { return getDelegate().createPutFromLoadAllOperation(name, keyValueSequence); }
  
  public MapOperation createTxnDeleteOperation(String name, Data dataKey, long version) { return getDelegate().createTxnDeleteOperation(name, dataKey, version); }
  
  public MapOperation createTxnLockAndGetOperation(String name, Data dataKey, long timeout, long ttl, String ownerUuid, boolean shouldLoad, boolean blockReads) { return getDelegate().createTxnLockAndGetOperation(name, dataKey, timeout, ttl, ownerUuid, shouldLoad, blockReads); }
  
  public MapOperation createTxnSetOperation(String name, Data dataKey, Data value, long version, long ttl) { return getDelegate().createTxnSetOperation(name, dataKey, value, version, ttl); }
  
  public MapOperation createSetTtlOperation(String name, Data key, long ttl) { return getDelegate().createSetTtlOperation(name, key, ttl); }
  
  public MapOperation createLegacyMergeOperation(String name, EntryView<Data, Data> mergingEntry, MapMergePolicy policy, boolean disableWanReplicationEvent) { return getDelegate().createLegacyMergeOperation(name, mergingEntry, policy, disableWanReplicationEvent); }
  
  public MapOperation createMergeOperation(String name, SplitBrainMergeTypes.MapMergeTypes mergingValue, SplitBrainMergePolicy<Data, SplitBrainMergeTypes.MapMergeTypes> mergePolicy, boolean disableWanReplicationEvent) { return getDelegate().createMergeOperation(name, mergingValue, mergePolicy, disableWanReplicationEvent); }
  
  public OperationFactory createPartitionWideEntryOperationFactory(String name, EntryProcessor entryProcessor) { return getDelegate().createPartitionWideEntryOperationFactory(name, entryProcessor); }
  
  public OperationFactory createPartitionWideEntryWithPredicateOperationFactory(String name, EntryProcessor entryProcessor, Predicate predicate) { return getDelegate().createPartitionWideEntryWithPredicateOperationFactory(name, entryProcessor, predicate); }
  
  public OperationFactory createMultipleEntryOperationFactory(String name, Set<Data> keys, EntryProcessor entryProcessor) { return getDelegate().createMultipleEntryOperationFactory(name, keys, entryProcessor); }
  
  public OperationFactory createContainsValueOperationFactory(String name, Data testValue) { return getDelegate().createContainsValueOperationFactory(name, testValue); }
  
  public OperationFactory createEvictAllOperationFactory(String name) { return getDelegate().createEvictAllOperationFactory(name); }
  
  public OperationFactory createClearOperationFactory(String name) { return getDelegate().createClearOperationFactory(name); }
  
  public OperationFactory createMapFlushOperationFactory(String name) { return getDelegate().createMapFlushOperationFactory(name); }
  
  public OperationFactory createLoadAllOperationFactory(String name, List<Data> keys, boolean replaceExistingValues) { return getDelegate().createLoadAllOperationFactory(name, keys, replaceExistingValues); }
  
  public OperationFactory createGetAllOperationFactory(String name, List<Data> keys) { return getDelegate().createGetAllOperationFactory(name, keys); }
  
  public OperationFactory createMapSizeOperationFactory(String name) { return getDelegate().createMapSizeOperationFactory(name); }
  
  public MapOperation createMapFlushOperation(String name) { return getDelegate().createMapFlushOperation(name); }
  
  public MapOperation createLoadMapOperation(String name, boolean replaceExistingValues) { return getDelegate().createLoadMapOperation(name, replaceExistingValues); }
  
  public MapOperation createFetchKeysOperation(String name, int lastTableIndex, int fetchSize) { return getDelegate().createFetchKeysOperation(name, lastTableIndex, fetchSize); }
  
  public MapOperation createFetchEntriesOperation(String name, int lastTableIndex, int fetchSize) { return getDelegate().createFetchEntriesOperation(name, lastTableIndex, fetchSize); }
  
  public MapOperation createQueryOperation(Query query) { return getDelegate().createQueryOperation(query); }
  
  public MapOperation createQueryPartitionOperation(Query query) { return getDelegate().createQueryPartitionOperation(query); }
  
  public MapOperation createFetchWithQueryOperation(String name, int lastTableIndex, int fetchSize, Query query) { return getDelegate().createFetchWithQueryOperation(name, lastTableIndex, fetchSize, query); }
}
