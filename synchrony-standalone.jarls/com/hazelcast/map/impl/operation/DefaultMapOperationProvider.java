package com.hazelcast.map.impl.operation;

import com.hazelcast.core.EntryView;
import com.hazelcast.map.EntryProcessor;
import com.hazelcast.map.impl.MapEntries;
import com.hazelcast.map.impl.query.Query;
import com.hazelcast.map.impl.query.QueryOperation;
import com.hazelcast.map.impl.query.QueryPartitionOperation;
import com.hazelcast.map.impl.tx.TxnDeleteOperation;
import com.hazelcast.map.impl.tx.TxnLockAndGetOperation;
import com.hazelcast.map.impl.tx.TxnSetOperation;
import com.hazelcast.map.merge.MapMergePolicy;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.query.Predicate;
import com.hazelcast.spi.OperationFactory;
import com.hazelcast.spi.merge.SplitBrainMergePolicy;
import com.hazelcast.spi.merge.SplitBrainMergeTypes;
import java.util.Collections;
import java.util.List;
import java.util.Set;

public class DefaultMapOperationProvider implements MapOperationProvider {
  public OperationFactory createMapSizeOperationFactory(String name) { return new SizeOperationFactory(name); }
  
  public MapOperation createPutOperation(String name, Data key, Data value, long ttl, long maxIdle) { return new PutOperation(name, key, value, ttl, maxIdle); }
  
  public MapOperation createTryPutOperation(String name, Data dataKey, Data value, long timeout) { return new TryPutOperation(name, dataKey, value, timeout); }
  
  public MapOperation createSetOperation(String name, Data dataKey, Data value, long ttl, long maxIdle) { return new SetOperation(name, dataKey, value, ttl, maxIdle); }
  
  public MapOperation createPutIfAbsentOperation(String name, Data key, Data value, long ttl, long maxIdle) { return new PutIfAbsentOperation(name, key, value, ttl, maxIdle); }
  
  public MapOperation createPutTransientOperation(String name, Data key, Data value, long ttl, long maxIdle) { return new PutTransientOperation(name, key, value, ttl, maxIdle); }
  
  public MapOperation createRemoveOperation(String name, Data key, boolean disableWanReplicationEvent) { return new RemoveOperation(name, key, disableWanReplicationEvent); }
  
  public MapOperation createSetTtlOperation(String name, Data key, long ttl) { return new SetTtlOperation(name, key, ttl); }
  
  public MapOperation createTryRemoveOperation(String name, Data dataKey, long timeout) { return new TryRemoveOperation(name, dataKey, timeout); }
  
  public MapOperation createReplaceOperation(String name, Data dataKey, Data value) { return new ReplaceOperation(name, dataKey, value); }
  
  public MapOperation createRemoveIfSameOperation(String name, Data dataKey, Data value) { return new RemoveIfSameOperation(name, dataKey, value); }
  
  public MapOperation createReplaceIfSameOperation(String name, Data dataKey, Data expect, Data update) { return new ReplaceIfSameOperation(name, dataKey, expect, update); }
  
  public MapOperation createDeleteOperation(String name, Data key, boolean disableWanReplicationEvent) { return new DeleteOperation(name, key, disableWanReplicationEvent); }
  
  public MapOperation createClearOperation(String name) { return new ClearOperation(name); }
  
  public MapOperation createEntryOperation(String name, Data dataKey, EntryProcessor entryProcessor) { return new EntryOperation(name, dataKey, entryProcessor); }
  
  public MapOperation createEvictOperation(String name, Data dataKey, boolean asyncBackup) { return new EvictOperation(name, dataKey, asyncBackup); }
  
  public MapOperation createEvictAllOperation(String name) { return new EvictAllOperation(name); }
  
  public MapOperation createContainsKeyOperation(String name, Data dataKey) { return new ContainsKeyOperation(name, dataKey); }
  
  public OperationFactory createContainsValueOperationFactory(String name, Data testValue) { return new ContainsValueOperationFactory(name, testValue); }
  
  public OperationFactory createGetAllOperationFactory(String name, List<Data> keys) { return new MapGetAllOperationFactory(name, keys); }
  
  public OperationFactory createEvictAllOperationFactory(String name) { return new EvictAllOperationFactory(name); }
  
  public OperationFactory createClearOperationFactory(String name) { return new ClearOperationFactory(name); }
  
  public OperationFactory createMapFlushOperationFactory(String name) { return new MapFlushOperationFactory(name); }
  
  public OperationFactory createLoadAllOperationFactory(String name, List<Data> keys, boolean replaceExistingValues) { return new MapLoadAllOperationFactory(name, keys, replaceExistingValues); }
  
  public MapOperation createGetEntryViewOperation(String name, Data dataKey) { return new GetEntryViewOperation(name, dataKey); }
  
  public OperationFactory createPartitionWideEntryOperationFactory(String name, EntryProcessor entryProcessor) { return new PartitionWideEntryOperationFactory(name, entryProcessor); }
  
  public MapOperation createTxnDeleteOperation(String name, Data dataKey, long version) { return new TxnDeleteOperation(name, dataKey, version); }
  
  public MapOperation createTxnLockAndGetOperation(String name, Data dataKey, long timeout, long ttl, String ownerUuid, boolean shouldLoad, boolean blockReads) { return new TxnLockAndGetOperation(name, dataKey, timeout, ttl, ownerUuid, shouldLoad, blockReads); }
  
  public MapOperation createTxnSetOperation(String name, Data dataKey, Data value, long version, long ttl) { return new TxnSetOperation(name, dataKey, value, version, ttl); }
  
  public MapOperation createLegacyMergeOperation(String name, EntryView<Data, Data> mergingEntry, MapMergePolicy policy, boolean disableWanReplicationEvent) { return new LegacyMergeOperation(name, mergingEntry, policy, disableWanReplicationEvent); }
  
  public MapOperation createMergeOperation(String name, SplitBrainMergeTypes.MapMergeTypes mergingValue, SplitBrainMergePolicy<Data, SplitBrainMergeTypes.MapMergeTypes> mergePolicy, boolean disableWanReplicationEvent) { return new MergeOperation(name, Collections.singletonList(mergingValue), mergePolicy, disableWanReplicationEvent); }
  
  public MapOperation createMapFlushOperation(String name) { return new MapFlushOperation(name); }
  
  public MapOperation createLoadMapOperation(String name, boolean replaceExistingValues) { return new LoadMapOperation(name, replaceExistingValues); }
  
  public OperationFactory createPartitionWideEntryWithPredicateOperationFactory(String name, EntryProcessor entryProcessor, Predicate predicate) { return new PartitionWideEntryWithPredicateOperationFactory(name, entryProcessor, predicate); }
  
  public OperationFactory createMultipleEntryOperationFactory(String name, Set<Data> keys, EntryProcessor entryProcessor) { return new MultipleEntryOperationFactory(name, keys, entryProcessor); }
  
  public MapOperation createGetOperation(String name, Data dataKey) { return new GetOperation(name, dataKey); }
  
  public MapOperation createQueryOperation(Query query) { return new QueryOperation(query); }
  
  public MapOperation createQueryPartitionOperation(Query query) { return new QueryPartitionOperation(query); }
  
  public MapOperation createLoadAllOperation(String name, List<Data> keys, boolean replaceExistingValues) { return new LoadAllOperation(name, keys, replaceExistingValues); }
  
  public MapOperation createPutAllOperation(String name, MapEntries mapEntries) { return new PutAllOperation(name, mapEntries); }
  
  public OperationFactory createPutAllOperationFactory(String name, int[] partitions, MapEntries[] mapEntries) { return new PutAllPartitionAwareOperationFactory(name, partitions, mapEntries); }
  
  public OperationFactory createMergeOperationFactory(String name, int[] partitions, List[] mergingEntries, SplitBrainMergePolicy<Data, SplitBrainMergeTypes.MapMergeTypes> mergePolicy) { return new MergeOperationFactory(name, partitions, mergingEntries, mergePolicy); }
  
  public MapOperation createPutFromLoadAllOperation(String name, List<Data> keyValueSequence) { return new PutFromLoadAllOperation(name, keyValueSequence); }
  
  public MapOperation createFetchKeysOperation(String name, int lastTableIndex, int fetchSize) { return new MapFetchKeysOperation(name, lastTableIndex, fetchSize); }
  
  public MapOperation createFetchEntriesOperation(String name, int lastTableIndex, int fetchSize) { return new MapFetchEntriesOperation(name, lastTableIndex, fetchSize); }
  
  public MapOperation createFetchWithQueryOperation(String name, int lastTableIndex, int fetchSize, Query query) { return new MapFetchWithQueryOperation(name, lastTableIndex, fetchSize, query); }
}
