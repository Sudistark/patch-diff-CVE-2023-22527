package com.hazelcast.map.impl.operation;

import com.hazelcast.concurrent.lock.LockWaitNotifyKey;
import com.hazelcast.core.EntryView;
import com.hazelcast.core.OperationTimeoutException;
import com.hazelcast.map.impl.EntryViews;
import com.hazelcast.map.impl.record.Record;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.BlockingOperation;
import com.hazelcast.spi.WaitNotifyKey;

public class GetEntryViewOperation extends ReadonlyKeyBasedMapOperation implements BlockingOperation {
  private EntryView<Data, Data> result;
  
  public GetEntryViewOperation() {}
  
  public GetEntryViewOperation(String name, Data dataKey) { super(name, dataKey); }
  
  public void run() {
    Record record = this.recordStore.getRecordOrNull(this.dataKey);
    if (record != null) {
      Data value = this.mapServiceContext.toData(record.getValue());
      this.result = EntryViews.createSimpleEntryView(this.dataKey, value, record);
    } 
  }
  
  public WaitNotifyKey getWaitKey() { return new LockWaitNotifyKey(getServiceNamespace(), this.dataKey); }
  
  public boolean shouldWait() {
    return (this.recordStore.isTransactionallyLocked(this.dataKey) && 
      !this.recordStore.canAcquireLock(this.dataKey, getCallerUuid(), getThreadId()));
  }
  
  public void onWaitExpire() { sendResponse(new OperationTimeoutException("Cannot read transactionally locked entry!")); }
  
  public Object getResponse() { return this.result; }
  
  public int getId() { return 46; }
}
