package com.hazelcast.map.impl.operation;

import com.hazelcast.map.impl.MapDataSerializerHook;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.Operation;
import com.hazelcast.spi.impl.operationservice.impl.operations.PartitionAwareOperationFactory;
import com.hazelcast.spi.merge.SplitBrainMergePolicy;
import com.hazelcast.spi.merge.SplitBrainMergeTypes;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class MergeOperationFactory extends PartitionAwareOperationFactory {
  protected String name;
  
  protected List<SplitBrainMergeTypes.MapMergeTypes>[] mergingEntries;
  
  protected SplitBrainMergePolicy<Data, SplitBrainMergeTypes.MapMergeTypes> mergePolicy;
  
  public MergeOperationFactory() {}
  
  @SuppressFBWarnings({"EI_EXPOSE_REP2"})
  public MergeOperationFactory(String name, int[] partitions, List[] mergingEntries, SplitBrainMergePolicy<Data, SplitBrainMergeTypes.MapMergeTypes> mergePolicy) {
    this.name = name;
    this.partitions = partitions;
    this.mergingEntries = mergingEntries;
    this.mergePolicy = mergePolicy;
  }
  
  public Operation createPartitionOperation(int partitionId) {
    for (int i = 0; i < this.partitions.length; i++) {
      if (this.partitions[i] == partitionId)
        return new MergeOperation(this.name, this.mergingEntries[i], this.mergePolicy, false); 
    } 
    throw new IllegalArgumentException("Unknown partitionId " + partitionId + " (" + Arrays.toString(this.partitions) + ")");
  }
  
  public void writeData(ObjectDataOutput out) throws IOException {
    out.writeUTF(this.name);
    out.writeIntArray(this.partitions);
    for (List<SplitBrainMergeTypes.MapMergeTypes> list : this.mergingEntries) {
      out.writeInt(list.size());
      for (SplitBrainMergeTypes.MapMergeTypes mergingEntry : list)
        out.writeObject(mergingEntry); 
    } 
    out.writeObject(this.mergePolicy);
  }
  
  public void readData(ObjectDataInput in) throws IOException {
    this.name = in.readUTF();
    this.partitions = in.readIntArray();
    this.mergingEntries = new List[this.partitions.length];
    for (int partitionIndex = 0; partitionIndex < this.partitions.length; partitionIndex++) {
      int size = in.readInt();
      List<SplitBrainMergeTypes.MapMergeTypes> list = new ArrayList<SplitBrainMergeTypes.MapMergeTypes>(size);
      for (int i = 0; i < size; i++) {
        SplitBrainMergeTypes.MapMergeTypes mergingEntry = (SplitBrainMergeTypes.MapMergeTypes)in.readObject();
        list.add(mergingEntry);
      } 
      this.mergingEntries[partitionIndex] = list;
    } 
    this.mergePolicy = (SplitBrainMergePolicy)in.readObject();
  }
  
  public int getFactoryId() { return MapDataSerializerHook.F_ID; }
  
  public int getId() { return 146; }
}
