package com.hazelcast.map.impl.operation;

import com.hazelcast.concurrent.lock.LockWaitNotifyKey;
import com.hazelcast.core.OperationTimeoutException;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.BlockingOperation;
import com.hazelcast.spi.WaitNotifyKey;

public class ContainsKeyOperation extends ReadonlyKeyBasedMapOperation implements BlockingOperation {
  private boolean containsKey;
  
  public ContainsKeyOperation() {}
  
  public ContainsKeyOperation(String name, Data dataKey) {
    this.name = name;
    this.dataKey = dataKey;
  }
  
  public void run() { this.containsKey = this.recordStore.containsKey(this.dataKey, getCallerAddress()); }
  
  public int getId() { return 12; }
  
  public Object getResponse() { return Boolean.valueOf(this.containsKey); }
  
  public WaitNotifyKey getWaitKey() { return new LockWaitNotifyKey(getServiceNamespace(), this.dataKey); }
  
  public boolean shouldWait() {
    if (this.recordStore.isTransactionallyLocked(this.dataKey))
      return !this.recordStore.canAcquireLock(this.dataKey, getCallerUuid(), getThreadId()); 
    return false;
  }
  
  public void onWaitExpire() { sendResponse(new OperationTimeoutException("Cannot read transactionally locked entry!")); }
}
