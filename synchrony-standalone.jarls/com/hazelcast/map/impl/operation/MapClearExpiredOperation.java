package com.hazelcast.map.impl.operation;

import com.hazelcast.logging.ILogger;
import com.hazelcast.map.impl.MapService;
import com.hazelcast.map.impl.MapServiceContext;
import com.hazelcast.map.impl.PartitionContainer;
import com.hazelcast.map.impl.recordstore.RecordStore;
import com.hazelcast.nio.Address;
import com.hazelcast.spi.AbstractLocalOperation;
import com.hazelcast.spi.NodeEngine;
import com.hazelcast.spi.PartitionAwareOperation;
import com.hazelcast.spi.impl.MutatingOperation;
import com.hazelcast.util.Clock;
import java.util.concurrent.ConcurrentMap;
import java.util.logging.Level;

public class MapClearExpiredOperation extends AbstractLocalOperation implements PartitionAwareOperation, MutatingOperation {
  private int expirationPercentage;
  
  public MapClearExpiredOperation(int expirationPercentage) { this.expirationPercentage = expirationPercentage; }
  
  public String getServiceName() { return "hz:impl:mapService"; }
  
  public void run() throws Exception {
    if (getNodeEngine().getLocalMember().isLiteMember())
      return; 
    MapService mapService = (MapService)getService();
    MapServiceContext mapServiceContext = mapService.getMapServiceContext();
    PartitionContainer partitionContainer = mapServiceContext.getPartitionContainer(getPartitionId());
    ConcurrentMap<String, RecordStore> recordStores = partitionContainer.getMaps();
    boolean backup = !isOwner();
    for (RecordStore recordStore : recordStores.values()) {
      if (recordStore.size() > 0 && recordStore.isExpirable()) {
        recordStore.evictExpiredEntries(this.expirationPercentage, backup);
        recordStore.disposeDeferredBlocks();
      } 
    } 
  }
  
  private boolean isOwner() {
    NodeEngine nodeEngine = getNodeEngine();
    Address owner = nodeEngine.getPartitionService().getPartitionOwner(getPartitionId());
    return nodeEngine.getThisAddress().equals(owner);
  }
  
  public void onExecutionFailure(Throwable e) {
    try {
      super.onExecutionFailure(e);
    } finally {
      prepareForNextCleanup();
    } 
  }
  
  public void logError(Throwable e) {
    if (e instanceof com.hazelcast.spi.exception.PartitionMigratingException) {
      ILogger logger = getLogger();
      if (logger.isLoggable(Level.FINEST))
        logger.log(Level.FINEST, e.toString()); 
    } else {
      super.logError(e);
    } 
  }
  
  public void afterRun() throws Exception { prepareForNextCleanup(); }
  
  protected void prepareForNextCleanup() throws Exception {
    MapService mapService = (MapService)getService();
    MapServiceContext mapServiceContext = mapService.getMapServiceContext();
    PartitionContainer partitionContainer = mapServiceContext.getPartitionContainer(getPartitionId());
    partitionContainer.setHasRunningCleanup(false);
    partitionContainer.setLastCleanupTime(Clock.currentTimeMillis());
  }
  
  public boolean returnsResponse() { return false; }
  
  protected void toString(StringBuilder sb) {
    super.toString(sb);
    sb.append(", expirationPercentage=").append(this.expirationPercentage);
  }
}
