package com.hazelcast.map.impl.operation;

import com.hazelcast.core.EntryView;
import com.hazelcast.map.EntryProcessor;
import com.hazelcast.map.impl.MapEntries;
import com.hazelcast.map.impl.query.Query;
import com.hazelcast.map.merge.MapMergePolicy;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.query.Predicate;
import com.hazelcast.spi.OperationFactory;
import com.hazelcast.spi.merge.SplitBrainMergePolicy;
import com.hazelcast.spi.merge.SplitBrainMergeTypes;
import java.util.List;
import java.util.Set;

public interface MapOperationProvider {
  MapOperation createPutOperation(String paramString, Data paramData1, Data paramData2, long paramLong1, long paramLong2);
  
  MapOperation createTryPutOperation(String paramString, Data paramData1, Data paramData2, long paramLong);
  
  MapOperation createSetOperation(String paramString, Data paramData1, Data paramData2, long paramLong1, long paramLong2);
  
  MapOperation createPutIfAbsentOperation(String paramString, Data paramData1, Data paramData2, long paramLong1, long paramLong2);
  
  MapOperation createPutTransientOperation(String paramString, Data paramData1, Data paramData2, long paramLong1, long paramLong2);
  
  MapOperation createSetTtlOperation(String paramString, Data paramData, long paramLong);
  
  MapOperation createTryRemoveOperation(String paramString, Data paramData, long paramLong);
  
  MapOperation createReplaceOperation(String paramString, Data paramData1, Data paramData2);
  
  MapOperation createRemoveIfSameOperation(String paramString, Data paramData1, Data paramData2);
  
  MapOperation createReplaceIfSameOperation(String paramString, Data paramData1, Data paramData2, Data paramData3);
  
  MapOperation createRemoveOperation(String paramString, Data paramData, boolean paramBoolean);
  
  MapOperation createDeleteOperation(String paramString, Data paramData, boolean paramBoolean);
  
  MapOperation createClearOperation(String paramString);
  
  MapOperation createEntryOperation(String paramString, Data paramData, EntryProcessor paramEntryProcessor);
  
  MapOperation createEvictOperation(String paramString, Data paramData, boolean paramBoolean);
  
  MapOperation createEvictAllOperation(String paramString);
  
  MapOperation createContainsKeyOperation(String paramString, Data paramData);
  
  MapOperation createGetEntryViewOperation(String paramString, Data paramData);
  
  MapOperation createGetOperation(String paramString, Data paramData);
  
  MapOperation createQueryOperation(Query paramQuery);
  
  MapOperation createQueryPartitionOperation(Query paramQuery);
  
  MapOperation createLoadAllOperation(String paramString, List<Data> paramList, boolean paramBoolean);
  
  MapOperation createPutAllOperation(String paramString, MapEntries paramMapEntries);
  
  MapOperation createPutFromLoadAllOperation(String paramString, List<Data> paramList);
  
  MapOperation createTxnDeleteOperation(String paramString, Data paramData, long paramLong);
  
  MapOperation createTxnLockAndGetOperation(String paramString1, Data paramData, long paramLong1, long paramLong2, String paramString2, boolean paramBoolean1, boolean paramBoolean2);
  
  MapOperation createTxnSetOperation(String paramString, Data paramData1, Data paramData2, long paramLong1, long paramLong2);
  
  MapOperation createLegacyMergeOperation(String paramString, EntryView<Data, Data> paramEntryView, MapMergePolicy paramMapMergePolicy, boolean paramBoolean);
  
  MapOperation createMergeOperation(String paramString, SplitBrainMergeTypes.MapMergeTypes paramMapMergeTypes, SplitBrainMergePolicy<Data, SplitBrainMergeTypes.MapMergeTypes> paramSplitBrainMergePolicy, boolean paramBoolean);
  
  MapOperation createMapFlushOperation(String paramString);
  
  MapOperation createLoadMapOperation(String paramString, boolean paramBoolean);
  
  MapOperation createFetchKeysOperation(String paramString, int paramInt1, int paramInt2);
  
  MapOperation createFetchEntriesOperation(String paramString, int paramInt1, int paramInt2);
  
  MapOperation createFetchWithQueryOperation(String paramString, int paramInt1, int paramInt2, Query paramQuery);
  
  OperationFactory createPartitionWideEntryOperationFactory(String paramString, EntryProcessor paramEntryProcessor);
  
  OperationFactory createPartitionWideEntryWithPredicateOperationFactory(String paramString, EntryProcessor paramEntryProcessor, Predicate paramPredicate);
  
  OperationFactory createMultipleEntryOperationFactory(String paramString, Set<Data> paramSet, EntryProcessor paramEntryProcessor);
  
  OperationFactory createContainsValueOperationFactory(String paramString, Data paramData);
  
  OperationFactory createEvictAllOperationFactory(String paramString);
  
  OperationFactory createClearOperationFactory(String paramString);
  
  OperationFactory createMapFlushOperationFactory(String paramString);
  
  OperationFactory createLoadAllOperationFactory(String paramString, List<Data> paramList, boolean paramBoolean);
  
  OperationFactory createGetAllOperationFactory(String paramString, List<Data> paramList);
  
  OperationFactory createMapSizeOperationFactory(String paramString);
  
  OperationFactory createPutAllOperationFactory(String paramString, int[] paramArrayOfInt, MapEntries[] paramArrayOfMapEntries);
  
  OperationFactory createMergeOperationFactory(String paramString, int[] paramArrayOfInt, List<SplitBrainMergeTypes.MapMergeTypes>[] paramArrayOfList, SplitBrainMergePolicy<Data, SplitBrainMergeTypes.MapMergeTypes> paramSplitBrainMergePolicy);
}
