package com.hazelcast.map.impl.event;

import com.hazelcast.core.EntryEventType;
import com.hazelcast.internal.serialization.InternalSerializationService;
import com.hazelcast.map.impl.EventListenerFilter;
import com.hazelcast.map.impl.MapServiceContext;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.EventFilter;

public class DefaultEntryEventFilteringStrategy extends AbstractFilteringStrategy {
  public DefaultEntryEventFilteringStrategy(InternalSerializationService serializationService, MapServiceContext mapServiceContext) { super(serializationService, mapServiceContext); }
  
  public int doFilter(EventFilter filter, Data dataKey, Object oldValue, Object dataValue, EntryEventType eventType, String mapNameOrNull) {
    if (filter instanceof com.hazelcast.map.impl.MapPartitionLostEventFilter)
      return -1; 
    if (filter instanceof EventListenerFilter) {
      if (!filter.eval(Integer.valueOf(eventType.getType())))
        return -1; 
      filter = ((EventListenerFilter)filter).getEventFilter();
    } 
    if (filter instanceof com.hazelcast.spi.impl.eventservice.impl.TrueEventFilter)
      return eventType.getType(); 
    if (filter instanceof com.hazelcast.map.impl.query.QueryEventFilter)
      return processQueryEventFilter(filter, eventType, dataKey, oldValue, dataValue, mapNameOrNull) ? eventType
        .getType() : -1; 
    if (filter instanceof com.hazelcast.map.impl.EntryEventFilter)
      return processEntryEventFilter(filter, dataKey) ? eventType.getType() : -1; 
    throw new IllegalArgumentException("Unknown EventFilter type = [" + filter.getClass().getCanonicalName() + "]");
  }
  
  public EntryEventDataCache getEntryEventDataCache() { return new DefaultEntryEventDataCache(this, null); }
  
  public String toString() { return "DefaultEntryEventFilteringStrategy"; }
  
  private boolean processQueryEventFilter(EventFilter filter, EntryEventType eventType, Data dataKey, Object oldValue, Object dataValue, String mapNameOrNull) {
    Object testValue;
    if (eventType == EntryEventType.REMOVED || eventType == EntryEventType.EVICTED || eventType == EntryEventType.EXPIRED) {
      testValue = oldValue;
    } else {
      testValue = dataValue;
    } 
    return evaluateQueryEventFilter(filter, dataKey, testValue, mapNameOrNull);
  }
}
