package com.hazelcast.map.impl.query;

import com.hazelcast.spi.serialization.SerializationService;
import com.hazelcast.util.IterationType;
import java.util.AbstractMap;
import java.util.Iterator;

final class QueryResultIterator implements Iterator {
  private final Iterator<QueryResultRow> iterator;
  
  private final IterationType iteratorType;
  
  private final boolean binary;
  
  private final SerializationService serializationService;
  
  QueryResultIterator(Iterator<QueryResultRow> iterator, IterationType iteratorType, boolean binary, SerializationService serializationService) {
    this.iterator = iterator;
    this.iteratorType = iteratorType;
    this.binary = binary;
    this.serializationService = serializationService;
  }
  
  public boolean hasNext() { return this.iterator.hasNext(); }
  
  public Object next() {
    Object value, key;
    QueryResultRow row = (QueryResultRow)this.iterator.next();
    switch (null.$SwitchMap$com$hazelcast$util$IterationType[this.iteratorType.ordinal()]) {
      case 1:
        return this.binary ? row.getValue() : this.serializationService.toObject(row.getValue());
      case 2:
        return this.binary ? row.getKey() : this.serializationService.toObject(row.getKey());
      case 3:
        if (this.binary)
          return new AbstractMap.SimpleImmutableEntry(row.getKey(), row.getValue()); 
        key = this.serializationService.toObject(row.getKey());
        value = this.serializationService.toObject(row.getValue());
        return new AbstractMap.SimpleImmutableEntry(key, value);
    } 
    throw new IllegalStateException("Unrecognized iteratorType:" + this.iteratorType);
  }
  
  public void remove() { throw new UnsupportedOperationException(); }
}
