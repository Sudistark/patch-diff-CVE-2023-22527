package com.hazelcast.map.impl.query;

import com.hazelcast.map.impl.MapDataSerializerHook;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import com.hazelcast.util.Preconditions;
import java.io.IOException;

public class Target implements IdentifiedDataSerializable {
  public static final Target ALL_NODES = new Target(TargetMode.ALL_NODES, null);
  
  public static final Target LOCAL_NODE = new Target(TargetMode.LOCAL_NODE, null);
  
  private TargetMode mode;
  
  private Integer partitionId;
  
  public Target() {}
  
  private Target(TargetMode mode, Integer partitionId) {
    this.mode = (TargetMode)Preconditions.checkNotNull(mode);
    this.partitionId = partitionId;
    if (mode.equals(TargetMode.PARTITION_OWNER) && partitionId == null)
      throw new IllegalArgumentException("It's forbidden to use null partitionId with PARTITION_OWNER mode"); 
  }
  
  public TargetMode mode() { return this.mode; }
  
  public Integer partitionId() { return this.partitionId; }
  
  public int getFactoryId() { return MapDataSerializerHook.F_ID; }
  
  public int getId() { return 117; }
  
  public void writeData(ObjectDataOutput out) throws IOException {
    out.writeInt(this.partitionId.intValue());
    out.writeUTF(this.mode.name());
  }
  
  public void readData(ObjectDataInput in) throws IOException {
    this.partitionId = Integer.valueOf(in.readInt());
    this.mode = TargetMode.valueOf(in.readUTF());
  }
  
  public static Target createPartitionTarget(int partitionId) { return new Target(TargetMode.PARTITION_OWNER, Integer.valueOf(partitionId)); }
}
