package com.hazelcast.map.impl;

import com.hazelcast.core.EntryEvent;
import com.hazelcast.core.MapEvent;
import com.hazelcast.map.listener.EntryAddedListener;
import com.hazelcast.map.listener.EntryEvictedListener;
import com.hazelcast.map.listener.EntryExpiredListener;
import com.hazelcast.map.listener.EntryLoadedListener;
import com.hazelcast.map.listener.EntryMergedListener;
import com.hazelcast.map.listener.EntryRemovedListener;
import com.hazelcast.map.listener.EntryUpdatedListener;
import com.hazelcast.map.listener.MapClearedListener;
import com.hazelcast.map.listener.MapEvictedListener;

public class MapListenerAdapter<K, V> extends Object implements EntryAddedListener<K, V>, EntryUpdatedListener<K, V>, EntryRemovedListener<K, V>, EntryEvictedListener<K, V>, EntryExpiredListener<K, V>, EntryMergedListener<K, V>, EntryLoadedListener<K, V>, MapClearedListener, MapEvictedListener {
  public void entryAdded(EntryEvent<K, V> event) { onEntryEvent(event); }
  
  public void entryRemoved(EntryEvent<K, V> event) { onEntryEvent(event); }
  
  public void entryUpdated(EntryEvent<K, V> event) { onEntryEvent(event); }
  
  public void entryEvicted(EntryEvent<K, V> event) { onEntryEvent(event); }
  
  public void entryExpired(EntryEvent<K, V> event) { onEntryEvent(event); }
  
  public void entryMerged(EntryEvent<K, V> event) { onEntryEvent(event); }
  
  public void entryLoaded(EntryEvent<K, V> event) { onEntryEvent(event); }
  
  public void mapEvicted(MapEvent event) { onMapEvent(event); }
  
  public void mapCleared(MapEvent event) { onMapEvent(event); }
  
  public void onEntryEvent(EntryEvent<K, V> event) {}
  
  public void onMapEvent(MapEvent event) {}
}
