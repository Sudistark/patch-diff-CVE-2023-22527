package com.hazelcast.map.impl.mapstore.writethrough;

import com.hazelcast.internal.serialization.InternalSerializationService;
import com.hazelcast.map.impl.MapStoreWrapper;
import com.hazelcast.map.impl.mapstore.AbstractMapDataStore;
import com.hazelcast.nio.serialization.Data;

public class WriteThroughStore extends AbstractMapDataStore<Data, Object> {
  public WriteThroughStore(MapStoreWrapper store, InternalSerializationService serializationService) { super(store, serializationService); }
  
  public Object add(Data key, Object value, long time) {
    Object objectKey = toObject(key);
    Object objectValue = toObject(value);
    getStore().store(objectKey, objectValue);
    return getStore().isPostProcessingMapStore() ? objectValue : value;
  }
  
  public void addTransient(Data key, long now) {}
  
  public Object addBackup(Data key, Object value, long time) { return value; }
  
  public void remove(Data key, long time) { getStore().delete(toObject(key)); }
  
  public void removeBackup(Data key, long time) {}
  
  public void reset() {}
  
  public Object load(Data key) { return getStore().load(toObject(key)); }
  
  public boolean loadable(Data key) { return true; }
  
  public long softFlush() { return 0L; }
  
  public void hardFlush() {}
  
  public Object flush(Data key, Object value, boolean backup) { return value; }
  
  public int notFinishedOperationsCount() { return 0; }
}
