package com.hazelcast.map.impl.tx;

import com.hazelcast.core.EntryEventType;
import com.hazelcast.map.impl.operation.BasePutOperation;
import com.hazelcast.map.impl.record.Record;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.EventService;
import com.hazelcast.spi.WaitNotifyKey;
import com.hazelcast.spi.impl.MutatingOperation;
import com.hazelcast.transaction.TransactionException;
import java.io.IOException;

public class TxnSetOperation extends BasePutOperation implements MapTxnOperation, MutatingOperation {
  private long version;
  
  private String ownerUuid;
  
  private boolean shouldBackup;
  
  public TxnSetOperation() {}
  
  public TxnSetOperation(String name, Data dataKey, Data value, long version, long ttl) {
    super(name, dataKey, value);
    this.version = version;
    this.ttl = ttl;
  }
  
  public boolean shouldWait() { return false; }
  
  public void innerBeforeRun() {
    super.innerBeforeRun();
    if (!this.recordStore.canAcquireLock(this.dataKey, this.ownerUuid, this.threadId))
      throw new TransactionException("Cannot acquire lock UUID: " + this.ownerUuid + ", threadId: " + this.threadId); 
  }
  
  public void run() {
    this.recordStore.unlock(this.dataKey, this.ownerUuid, this.threadId, getCallId());
    Record record = this.recordStore.getRecordOrNull(this.dataKey);
    if (record == null || this.version == record.getVersion()) {
      EventService eventService = getNodeEngine().getEventService();
      if (eventService.hasEventRegistration("hz:impl:mapService", getName()))
        this.oldValue = (record == null) ? null : this.mapServiceContext.toData(record.getValue()); 
      this.eventType = (record == null) ? EntryEventType.ADDED : EntryEventType.UPDATED;
      this.recordStore.set(this.dataKey, this.dataValue, this.ttl, this.maxIdle);
      this.shouldBackup = true;
    } 
  }
  
  public long getVersion() { return this.version; }
  
  public void setVersion(long version) { this.version = version; }
  
  public void setOwnerUuid(String ownerUuid) { this.ownerUuid = ownerUuid; }
  
  public Object getResponse() { return Boolean.TRUE; }
  
  public boolean shouldNotify() { return true; }
  
  protected boolean shouldUnlockKeyOnBackup() { return true; }
  
  public void onWaitExpire() { sendResponse(Boolean.valueOf(false)); }
  
  public boolean shouldBackup() { return (this.shouldBackup && this.recordStore.getRecord(this.dataKey) != null); }
  
  public WaitNotifyKey getNotifiedKey() { return getWaitKey(); }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeLong(this.version);
    out.writeUTF(this.ownerUuid);
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    this.version = in.readLong();
    this.ownerUuid = in.readUTF();
  }
  
  public int getId() { return 71; }
}
