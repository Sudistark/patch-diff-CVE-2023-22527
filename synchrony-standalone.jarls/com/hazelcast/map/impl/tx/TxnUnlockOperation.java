package com.hazelcast.map.impl.tx;

import com.hazelcast.map.impl.operation.LockAwareOperation;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.BackupAwareOperation;
import com.hazelcast.spi.Operation;
import com.hazelcast.spi.WaitNotifyKey;
import com.hazelcast.spi.impl.MutatingOperation;
import com.hazelcast.transaction.TransactionException;
import java.io.IOException;

public class TxnUnlockOperation extends LockAwareOperation implements MapTxnOperation, BackupAwareOperation, MutatingOperation {
  private long version;
  
  private String ownerUuid;
  
  public TxnUnlockOperation() {}
  
  public TxnUnlockOperation(String name, Data dataKey, long version) {
    super(name, dataKey, -1L, -1L);
    this.version = version;
  }
  
  public void innerBeforeRun() {
    super.innerBeforeRun();
    if (!this.recordStore.canAcquireLock(this.dataKey, this.ownerUuid, this.threadId))
      throw new TransactionException("Cannot acquire lock UUID: " + this.ownerUuid + ", threadId: " + this.threadId); 
  }
  
  public void run() { this.recordStore.unlock(this.dataKey, this.ownerUuid, this.threadId, getCallId()); }
  
  public boolean shouldWait() { return false; }
  
  public long getVersion() { return this.version; }
  
  public void setVersion(long version) { this.version = version; }
  
  public Object getResponse() { return Boolean.TRUE; }
  
  public boolean shouldNotify() { return true; }
  
  public Operation getBackupOperation() {
    TxnUnlockBackupOperation txnUnlockOperation = new TxnUnlockBackupOperation(this.name, this.dataKey, this.ownerUuid);
    txnUnlockOperation.setThreadId(getThreadId());
    return txnUnlockOperation;
  }
  
  public void onWaitExpire() { sendResponse(Boolean.valueOf(false)); }
  
  public final int getAsyncBackupCount() { return this.mapContainer.getAsyncBackupCount(); }
  
  public final int getSyncBackupCount() { return this.mapContainer.getBackupCount(); }
  
  public void setOwnerUuid(String ownerUuid) { this.ownerUuid = ownerUuid; }
  
  public boolean shouldBackup() { return true; }
  
  public WaitNotifyKey getNotifiedKey() { return getWaitKey(); }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeLong(this.version);
    out.writeUTF(this.ownerUuid);
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    this.version = in.readLong();
    this.ownerUuid = in.readUTF();
  }
  
  public int getId() { return 72; }
}
