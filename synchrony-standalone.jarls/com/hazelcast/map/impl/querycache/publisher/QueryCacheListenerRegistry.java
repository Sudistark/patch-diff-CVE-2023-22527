package com.hazelcast.map.impl.querycache.publisher;

import com.hazelcast.map.impl.querycache.QueryCacheContext;
import com.hazelcast.map.impl.querycache.Registry;
import com.hazelcast.util.ConcurrencyUtil;
import com.hazelcast.util.ConstructorFunction;
import java.util.Collections;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

public class QueryCacheListenerRegistry extends Object implements Registry<String, String> {
  private final ConstructorFunction<String, String> registryConstructorFunction;
  
  private final String mapName;
  
  private final QueryCacheContext context;
  
  private final ConcurrentMap<String, String> listeners;
  
  public QueryCacheListenerRegistry(QueryCacheContext context, String mapName) {
    this.registryConstructorFunction = new Object(this);
    this.context = context;
    this.mapName = mapName;
    this.listeners = new ConcurrentHashMap();
  }
  
  public String getOrCreate(String cacheId) { return (String)ConcurrencyUtil.getOrPutIfAbsent(this.listeners, cacheId, this.registryConstructorFunction); }
  
  public String getOrNull(String cacheId) { return (String)this.listeners.get(cacheId); }
  
  public Map<String, String> getAll() { return Collections.unmodifiableMap(this.listeners); }
  
  public String remove(String cacheId) { return (String)this.listeners.remove(cacheId); }
}
