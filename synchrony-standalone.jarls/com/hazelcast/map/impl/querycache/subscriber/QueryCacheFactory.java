package com.hazelcast.map.impl.querycache.subscriber;

import com.hazelcast.util.ConcurrencyUtil;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

public class QueryCacheFactory {
  private final ConcurrentMap<String, InternalQueryCache> internalQueryCaches = new ConcurrentHashMap();
  
  public InternalQueryCache create(QueryCacheRequest request, String cacheId) { return (InternalQueryCache)ConcurrencyUtil.getOrPutIfAbsent(this.internalQueryCaches, cacheId, new InternalQueryCacheConstructor(request)); }
  
  public boolean remove(InternalQueryCache queryCache) { return this.internalQueryCaches.remove(queryCache.getCacheId(), queryCache); }
  
  public InternalQueryCache getOrNull(String cacheId) { return (InternalQueryCache)this.internalQueryCaches.get(cacheId); }
  
  public int getQueryCacheCount() { return this.internalQueryCaches.size(); }
}
