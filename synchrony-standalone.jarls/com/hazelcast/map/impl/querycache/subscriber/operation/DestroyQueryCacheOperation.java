package com.hazelcast.map.impl.querycache.subscriber.operation;

import com.hazelcast.map.impl.MapDataSerializerHook;
import com.hazelcast.map.impl.operation.MapOperation;
import com.hazelcast.map.impl.querycache.ListenerRegistrationHelper;
import com.hazelcast.map.impl.querycache.QueryCacheContext;
import com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfoSupplier;
import com.hazelcast.map.impl.querycache.publisher.MapListenerRegistry;
import com.hazelcast.map.impl.querycache.publisher.MapPublisherRegistry;
import com.hazelcast.map.impl.querycache.publisher.PublisherContext;
import com.hazelcast.map.impl.querycache.publisher.PublisherRegistry;
import com.hazelcast.map.impl.querycache.publisher.QueryCacheListenerRegistry;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.spi.EventService;
import com.hazelcast.util.ExceptionUtil;
import java.io.IOException;

public class DestroyQueryCacheOperation extends MapOperation {
  private String cacheId;
  
  private boolean result;
  
  public DestroyQueryCacheOperation() {}
  
  public DestroyQueryCacheOperation(String mapName, String cacheId) {
    super(mapName);
    this.cacheId = cacheId;
  }
  
  public void run() {
    try {
      deregisterLocalIMapListener();
      removeAccumulatorInfo();
      removePublisherAccumulators();
      removeAllListeners();
      this.result = true;
    } catch (Exception e) {
      throw ExceptionUtil.rethrow(e);
    } 
  }
  
  public Object getResponse() { return Boolean.valueOf(this.result); }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeUTF(this.cacheId);
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    this.cacheId = in.readUTF();
  }
  
  private void deregisterLocalIMapListener() {
    PublisherContext publisherContext = getPublisherContext();
    MapListenerRegistry registry = publisherContext.getMapListenerRegistry();
    QueryCacheListenerRegistry listenerRegistry = registry.getOrNull(this.name);
    if (listenerRegistry == null)
      return; 
    String listenerId = listenerRegistry.remove(this.cacheId);
    this.mapService.getMapServiceContext().removeEventListener(this.name, listenerId);
  }
  
  private void removeAccumulatorInfo() {
    PublisherContext publisherContext = getPublisherContext();
    AccumulatorInfoSupplier infoSupplier = publisherContext.getAccumulatorInfoSupplier();
    infoSupplier.remove(this.name, this.cacheId);
  }
  
  private void removePublisherAccumulators() {
    PublisherContext publisherContext = getPublisherContext();
    MapPublisherRegistry mapPublisherRegistry = publisherContext.getMapPublisherRegistry();
    PublisherRegistry publisherRegistry = mapPublisherRegistry.getOrNull(this.name);
    if (publisherRegistry == null)
      return; 
    publisherRegistry.remove(this.cacheId);
  }
  
  private void removeAllListeners() {
    EventService eventService = getNodeEngine().getEventService();
    eventService.deregisterAllListeners("hz:impl:mapService", ListenerRegistrationHelper.generateListenerName(this.name, this.cacheId));
  }
  
  private PublisherContext getPublisherContext() {
    QueryCacheContext queryCacheContext = this.mapServiceContext.getQueryCacheContext();
    return queryCacheContext.getPublisherContext();
  }
  
  public int getFactoryId() { return MapDataSerializerHook.F_ID; }
  
  public int getId() { return 123; }
}
