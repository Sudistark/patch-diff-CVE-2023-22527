package com.hazelcast.map.impl.querycache.subscriber;

import com.hazelcast.core.EntryEventType;
import com.hazelcast.core.IMap;
import com.hazelcast.map.listener.MapListener;
import com.hazelcast.query.Predicate;
import com.hazelcast.query.impl.Indexes;
import com.hazelcast.query.impl.getters.Extractors;
import java.util.Collection;
import java.util.Map;
import java.util.Set;

public final class NullQueryCache implements InternalQueryCache {
  public static final InternalQueryCache NULL_QUERY_CACHE = new NullQueryCache();
  
  public void set(Object key, Object value, EntryEventType eventType) {}
  
  public void prepopulate(Object key, Object value) {}
  
  public void delete(Object key, EntryEventType eventType) {}
  
  public int removeEntriesOf(int partitionId) { return 0; }
  
  public IMap getDelegate() { return null; }
  
  public Indexes getIndexes() { return null; }
  
  public void clear() {}
  
  public void setPublisherListenerId(String publisherListenerId) {}
  
  public String getPublisherListenerId() { return null; }
  
  public String getCacheId() { return null; }
  
  public boolean reachedMaxCapacity() { return false; }
  
  public Extractors getExtractors() { return null; }
  
  public void recreate() {}
  
  public Object get(Object key) { return null; }
  
  public boolean containsKey(Object key) { return false; }
  
  public boolean containsValue(Object value) { return false; }
  
  public boolean isEmpty() { return true; }
  
  public int size() { return 0; }
  
  public void addIndex(String attribute, boolean ordered) {}
  
  public Map getAll(Set keys) { return null; }
  
  public Set keySet() { return null; }
  
  public Set keySet(Predicate predicate) { return null; }
  
  public Set<Map.Entry> entrySet() { return null; }
  
  public Set<Map.Entry> entrySet(Predicate predicate) { return null; }
  
  public Collection values() { return null; }
  
  public Collection values(Predicate predicate) { return null; }
  
  public String addEntryListener(MapListener listener, boolean includeValue) { return null; }
  
  public String addEntryListener(MapListener listener, Object key, boolean includeValue) { return null; }
  
  public String addEntryListener(MapListener listener, Predicate predicate, boolean includeValue) { return null; }
  
  public String addEntryListener(MapListener listener, Predicate predicate, Object key, boolean includeValue) { return null; }
  
  public boolean removeEntryListener(String id) { return false; }
  
  public String getName() { return null; }
  
  public boolean tryRecover() { return false; }
  
  public void destroy() {}
}
