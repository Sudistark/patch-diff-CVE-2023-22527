package com.hazelcast.map.impl.querycache.subscriber;

import com.hazelcast.config.EvictionConfig;
import com.hazelcast.config.MapIndexConfig;
import com.hazelcast.config.QueryCacheConfig;
import com.hazelcast.core.IMap;
import com.hazelcast.core.PartitioningStrategy;
import com.hazelcast.internal.eviction.EvictionListener;
import com.hazelcast.internal.serialization.InternalSerializationService;
import com.hazelcast.map.impl.LazyMapEntry;
import com.hazelcast.map.impl.proxy.MapProxyImpl;
import com.hazelcast.map.impl.querycache.QueryCacheContext;
import com.hazelcast.map.impl.querycache.QueryCacheEventService;
import com.hazelcast.map.impl.querycache.subscriber.record.QueryCacheRecord;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.query.Predicate;
import com.hazelcast.query.impl.CachedQueryEntry;
import com.hazelcast.query.impl.IndexCopyBehavior;
import com.hazelcast.query.impl.Indexes;
import com.hazelcast.query.impl.getters.Extractors;
import java.util.List;
import java.util.Map;
import java.util.Set;

abstract class AbstractInternalQueryCache<K, V> extends Object implements InternalQueryCache<K, V> {
  protected final boolean includeValue;
  
  protected final String mapName;
  
  protected final String cacheId;
  
  protected final String cacheName;
  
  protected final IMap delegate;
  
  protected final Indexes indexes;
  
  protected final QueryCacheContext context;
  
  protected final QueryCacheConfig queryCacheConfig;
  
  protected final QueryCacheRecordStore recordStore;
  
  protected final PartitioningStrategy partitioningStrategy;
  
  protected final InternalSerializationService serializationService;
  
  protected final Extractors extractors;
  
  public AbstractInternalQueryCache(String cacheId, String cacheName, QueryCacheConfig queryCacheConfig, IMap delegate, QueryCacheContext context) {
    this.cacheId = cacheId;
    this.cacheName = cacheName;
    this.queryCacheConfig = queryCacheConfig;
    this.mapName = delegate.getName();
    this.delegate = delegate;
    this.context = context;
    this.serializationService = context.getSerializationService();
    this.indexes = Indexes.newBuilder(this.serializationService, IndexCopyBehavior.COPY_ON_READ).build();
    this.includeValue = isIncludeValue();
    this.partitioningStrategy = getPartitioningStrategy();
    this.extractors = Extractors.newBuilder(this.serializationService).build();
    this
      .recordStore = new DefaultQueryCacheRecordStore(this.serializationService, this.indexes, queryCacheConfig, getEvictionListener(), this.extractors);
    for (MapIndexConfig indexConfig : queryCacheConfig.getIndexConfigs())
      this.indexes.addOrGetIndex(indexConfig.getAttribute(), indexConfig.isOrdered()); 
  }
  
  public QueryCacheContext getContext() { return this.context; }
  
  public String getPublisherListenerId() { return this.publisherListenerId; }
  
  public void setPublisherListenerId(String publisherListenerId) { this.publisherListenerId = publisherListenerId; }
  
  public String getCacheId() { return this.cacheId; }
  
  protected Predicate getPredicate() { return this.queryCacheConfig.getPredicateConfig().getImplementation(); }
  
  public boolean reachedMaxCapacity() {
    EvictionConfig evictionConfig = this.queryCacheConfig.getEvictionConfig();
    EvictionConfig.MaxSizePolicy maximumSizePolicy = evictionConfig.getMaximumSizePolicy();
    return (maximumSizePolicy == EvictionConfig.MaxSizePolicy.ENTRY_COUNT && 
      size() == evictionConfig.getSize());
  }
  
  private EvictionListener getEvictionListener() { return new Object(this); }
  
  PartitioningStrategy getPartitioningStrategy() {
    if (this.delegate instanceof MapProxyImpl)
      return ((MapProxyImpl)this.delegate).getPartitionStrategy(); 
    return null;
  }
  
  protected void doFullKeyScan(Predicate predicate, Set<K> resultingSet) {
    InternalSerializationService serializationService = this.serializationService;
    CachedQueryEntry queryEntry = new CachedQueryEntry();
    Set<Map.Entry<Data, QueryCacheRecord>> entries = this.recordStore.entrySet();
    for (Map.Entry<Data, QueryCacheRecord> entry : entries) {
      Data keyData = (Data)entry.getKey();
      QueryCacheRecord record = (QueryCacheRecord)entry.getValue();
      Object value = record.getValue();
      queryEntry.init(serializationService, keyData, value, this.extractors);
      boolean valid = predicate.apply(queryEntry);
      if (valid)
        resultingSet.add(queryEntry.getKey()); 
    } 
  }
  
  protected void doFullEntryScan(Predicate predicate, Set<Map.Entry<K, V>> resultingSet) {
    InternalSerializationService serializationService = this.serializationService;
    CachedQueryEntry queryEntry = new CachedQueryEntry();
    Set<Map.Entry<Data, QueryCacheRecord>> entries = this.recordStore.entrySet();
    for (Map.Entry<Data, QueryCacheRecord> entry : entries) {
      Data keyData = (Data)entry.getKey();
      QueryCacheRecord record = (QueryCacheRecord)entry.getValue();
      Object value = record.getValue();
      queryEntry.init(serializationService, keyData, value, this.extractors);
      boolean valid = predicate.apply(queryEntry);
      if (valid) {
        LazyMapEntry lazyMapEntry = new LazyMapEntry(queryEntry.getKeyData(), queryEntry.getValueData(), serializationService);
        resultingSet.add(lazyMapEntry);
      } 
    } 
  }
  
  protected void doFullValueScan(Predicate predicate, List<Data> resultingSet) {
    InternalSerializationService serializationService = this.serializationService;
    CachedQueryEntry queryEntry = new CachedQueryEntry();
    Set<Map.Entry<Data, QueryCacheRecord>> entries = this.recordStore.entrySet();
    for (Map.Entry<Data, QueryCacheRecord> entry : entries) {
      Data keyData = (Data)entry.getKey();
      QueryCacheRecord record = (QueryCacheRecord)entry.getValue();
      Object value = record.getValue();
      queryEntry.init(serializationService, keyData, value, this.extractors);
      boolean valid = predicate.apply(queryEntry);
      if (valid)
        resultingSet.add(queryEntry.getValueData()); 
    } 
  }
  
  private boolean isIncludeValue() { return this.queryCacheConfig.isIncludeValue(); }
  
  protected QueryCacheEventService getEventService() {
    SubscriberContext subscriberContext = this.context.getSubscriberContext();
    return subscriberContext.getEventService();
  }
  
  protected <T> T toObject(Object valueInRecord) { return (T)this.serializationService.toObject(valueInRecord); }
  
  protected Data toData(Object key) { return this.serializationService.toData(key, this.partitioningStrategy); }
  
  public Extractors getExtractors() { return this.extractors; }
  
  public void clear() {
    this.recordStore.clear();
    this.indexes.destroyIndexes();
  }
}
