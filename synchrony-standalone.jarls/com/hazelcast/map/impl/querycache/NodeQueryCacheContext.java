package com.hazelcast.map.impl.querycache;

import com.hazelcast.core.Member;
import com.hazelcast.instance.LifecycleServiceImpl;
import com.hazelcast.instance.MemberImpl;
import com.hazelcast.instance.Node;
import com.hazelcast.internal.serialization.InternalSerializationService;
import com.hazelcast.map.impl.MapServiceContext;
import com.hazelcast.map.impl.querycache.publisher.DefaultPublisherContext;
import com.hazelcast.map.impl.querycache.publisher.PublisherContext;
import com.hazelcast.map.impl.querycache.subscriber.NodeQueryCacheConfigurator;
import com.hazelcast.map.impl.querycache.subscriber.NodeQueryCacheEventService;
import com.hazelcast.map.impl.querycache.subscriber.NodeQueryCacheScheduler;
import com.hazelcast.map.impl.querycache.subscriber.NodeSubscriberContext;
import com.hazelcast.map.impl.querycache.subscriber.SubscriberContext;
import com.hazelcast.nio.Address;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.NodeEngine;
import com.hazelcast.spi.impl.NodeEngineImpl;
import com.hazelcast.util.ContextMutexFactory;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

public class NodeQueryCacheContext implements QueryCacheContext {
  private final NodeEngine nodeEngine;
  
  private final InvokerWrapper invokerWrapper;
  
  private final MapServiceContext mapServiceContext;
  
  private final QueryCacheScheduler queryCacheScheduler;
  
  private final QueryCacheEventService queryCacheEventService;
  
  private final QueryCacheConfigurator queryCacheConfigurator;
  
  private final ContextMutexFactory lifecycleMutexFactory;
  
  private PublisherContext publisherContext;
  
  private SubscriberContext subscriberContext;
  
  public NodeQueryCacheContext(MapServiceContext mapServiceContext) {
    this.lifecycleMutexFactory = new ContextMutexFactory();
    this.nodeEngine = mapServiceContext.getNodeEngine();
    this.mapServiceContext = mapServiceContext;
    this.queryCacheScheduler = new NodeQueryCacheScheduler(mapServiceContext);
    this.queryCacheEventService = new NodeQueryCacheEventService(mapServiceContext, this.lifecycleMutexFactory);
    this
      .queryCacheConfigurator = new NodeQueryCacheConfigurator(this.nodeEngine.getConfig(), this.nodeEngine.getConfigClassLoader(), this.queryCacheEventService);
    this.invokerWrapper = new NodeInvokerWrapper(this.nodeEngine.getOperationService());
    this.subscriberContext = new NodeSubscriberContext(this);
    this.publisherContext = new DefaultPublisherContext(this, this.nodeEngine, new RegisterMapListenerFunction(this, null));
    flushPublishersOnNodeShutdown();
  }
  
  private void flushPublishersOnNodeShutdown() {
    Node node = ((NodeEngineImpl)this.nodeEngine).getNode();
    LifecycleServiceImpl lifecycleService = node.hazelcastInstance.getLifecycleService();
    lifecycleService.addLifecycleListener(new Object(this));
  }
  
  public void destroy() { throw new UnsupportedOperationException(); }
  
  public PublisherContext getPublisherContext() { return this.publisherContext; }
  
  public SubscriberContext getSubscriberContext() { return this.subscriberContext; }
  
  public void setSubscriberContext(SubscriberContext subscriberContext) { this.subscriberContext = subscriberContext; }
  
  public QueryCacheEventService getQueryCacheEventService() { return this.queryCacheEventService; }
  
  public QueryCacheConfigurator getQueryCacheConfigurator() { return this.queryCacheConfigurator; }
  
  public QueryCacheScheduler getQueryCacheScheduler() { return this.queryCacheScheduler; }
  
  public InternalSerializationService getSerializationService() { return (InternalSerializationService)this.nodeEngine.getSerializationService(); }
  
  public Address getThisNodesAddress() { return this.nodeEngine.getThisAddress(); }
  
  public Collection<Member> getMemberList() {
    Collection<MemberImpl> memberList = this.nodeEngine.getClusterService().getMemberImpls();
    List<Member> members = new ArrayList<Member>(memberList.size());
    members.addAll(memberList);
    return members;
  }
  
  public int getPartitionId(Object object) {
    assert object != null;
    if (object instanceof Data)
      this.nodeEngine.getPartitionService().getPartitionId((Data)object); 
    return this.nodeEngine.getPartitionService().getPartitionId(object);
  }
  
  public int getPartitionCount() { return this.nodeEngine.getPartitionService().getPartitionCount(); }
  
  public InvokerWrapper getInvokerWrapper() { return this.invokerWrapper; }
  
  public Object toObject(Object obj) { return this.mapServiceContext.toObject(obj); }
  
  public ContextMutexFactory getLifecycleMutexFactory() { return this.lifecycleMutexFactory; }
  
  private String registerLocalIMapListener(String name) { return this.mapServiceContext.addLocalListenerAdapter(new Object(this, name), name); }
}
