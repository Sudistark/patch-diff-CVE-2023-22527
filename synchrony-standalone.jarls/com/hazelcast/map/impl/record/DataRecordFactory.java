package com.hazelcast.map.impl.record;

import com.hazelcast.config.CacheDeserializedValues;
import com.hazelcast.config.MapConfig;
import com.hazelcast.core.PartitioningStrategy;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.serialization.SerializationService;

public class DataRecordFactory extends Object implements RecordFactory<Data> {
  private final SerializationService serializationService;
  
  private final PartitioningStrategy partitionStrategy;
  
  private final CacheDeserializedValues cacheDeserializedValues;
  
  private final boolean statisticsEnabled;
  
  public DataRecordFactory(MapConfig config, SerializationService serializationService, PartitioningStrategy partitionStrategy) {
    this.serializationService = serializationService;
    this.partitionStrategy = partitionStrategy;
    this.statisticsEnabled = config.isStatisticsEnabled();
    this.cacheDeserializedValues = config.getCacheDeserializedValues();
  }
  
  public Record<Data> newRecord(Data key, Object value) {
    DataRecordWithStats dataRecordWithStats;
    assert value != null : "value can not be null";
    Data data = this.serializationService.toData(value, this.partitionStrategy);
    switch (null.$SwitchMap$com$hazelcast$config$CacheDeserializedValues[this.cacheDeserializedValues.ordinal()]) {
      case 1:
        dataRecordWithStats = this.statisticsEnabled ? new DataRecordWithStats(data) : new DataRecord(data);
        dataRecordWithStats.setKey(key);
        return dataRecordWithStats;
    } 
    CachedDataRecordWithStats cachedDataRecordWithStats = this.statisticsEnabled ? new CachedDataRecordWithStats(data) : new CachedDataRecord(data);
    cachedDataRecordWithStats.setKey(key);
    return cachedDataRecordWithStats;
  }
  
  public void setValue(Record<Data> record, Object value) {
    Data v;
    assert value != null : "value can not be null";
    if (value instanceof Data) {
      v = (Data)value;
    } else {
      v = this.serializationService.toData(value, this.partitionStrategy);
    } 
    record.setValue(v);
  }
}
