package com.hazelcast.map.impl.record;

import com.hazelcast.util.Clock;

abstract class AbstractRecordWithStats<V> extends AbstractRecord<V> {
  private int lastStoredTime = -1;
  
  private int expirationTime = -1;
  
  public final void onStore() { this.lastStoredTime = stripBaseTime(Clock.currentTimeMillis()); }
  
  public long getCost() {
    int numberOfIntFields = 2;
    return super.getCost() + 8L;
  }
  
  public long getExpirationTime() {
    if (this.expirationTime == -1)
      return 0L; 
    if (this.expirationTime == Integer.MAX_VALUE)
      return Float.MAX_VALUE; 
    return recomputeWithBaseTime(this.expirationTime);
  }
  
  public void setExpirationTime(long expirationTime) {
    this
      
      .expirationTime = (expirationTime == Float.MAX_VALUE) ? Integer.MAX_VALUE : stripBaseTime(expirationTime);
  }
  
  public long getLastStoredTime() {
    if (this.expirationTime == -1)
      return 0L; 
    return recomputeWithBaseTime(this.lastStoredTime);
  }
  
  public void setLastStoredTime(long lastStoredTime) { this.lastStoredTime = stripBaseTime(lastStoredTime); }
  
  public boolean equals(Object o) {
    if (!super.equals(o))
      return false; 
    AbstractRecordWithStats<?> that = (AbstractRecordWithStats)o;
    if (this.lastStoredTime != that.lastStoredTime)
      return false; 
    return (this.expirationTime == that.expirationTime);
  }
  
  public int hashCode() {
    result = super.hashCode();
    result = 31 * result + this.lastStoredTime;
    return 31 * result + this.expirationTime;
  }
}
