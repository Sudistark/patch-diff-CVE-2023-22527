package com.hazelcast.map.impl;

import com.hazelcast.map.MapInterceptor;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InterceptorRegistry {
  public List<MapInterceptor> getInterceptors() { return this.interceptors; }
  
  public Map<String, MapInterceptor> getId2InterceptorMap() { return this.id2InterceptorMap; }
  
  public void register(String id, MapInterceptor interceptor) {
    assert !(Thread.currentThread() instanceof com.hazelcast.spi.impl.operationexecutor.impl.PartitionOperationThread);
    if (this.id2InterceptorMap.containsKey(id))
      return; 
    Map<String, MapInterceptor> tmpMap = new HashMap<String, MapInterceptor>(this.id2InterceptorMap);
    tmpMap.put(id, interceptor);
    this.id2InterceptorMap = Collections.unmodifiableMap(tmpMap);
    List<MapInterceptor> tmpInterceptors = new ArrayList<MapInterceptor>(this.interceptors);
    tmpInterceptors.add(interceptor);
    this.interceptors = Collections.unmodifiableList(tmpInterceptors);
  }
  
  public void deregister(String id) {
    assert !(Thread.currentThread() instanceof com.hazelcast.spi.impl.operationexecutor.impl.PartitionOperationThread);
    if (!this.id2InterceptorMap.containsKey(id))
      return; 
    Map<String, MapInterceptor> tmpMap = new HashMap<String, MapInterceptor>(this.id2InterceptorMap);
    MapInterceptor removedInterceptor = (MapInterceptor)tmpMap.remove(id);
    this.id2InterceptorMap = Collections.unmodifiableMap(tmpMap);
    List<MapInterceptor> tmpInterceptors = new ArrayList<MapInterceptor>(this.interceptors);
    tmpInterceptors.remove(removedInterceptor);
    this.interceptors = Collections.unmodifiableList(tmpInterceptors);
  }
}
