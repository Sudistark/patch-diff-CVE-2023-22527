package com.hazelcast.durableexecutor;

import com.hazelcast.core.DistributedObject;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Future;

public interface DurableExecutorService extends ExecutorService, DistributedObject {
  <T> DurableExecutorServiceFuture<T> submit(Callable<T> paramCallable);
  
  <T> DurableExecutorServiceFuture<T> submit(Runnable paramRunnable, T paramT);
  
  DurableExecutorServiceFuture<?> submit(Runnable paramRunnable);
  
  <T> Future<T> retrieveResult(long paramLong);
  
  void disposeResult(long paramLong);
  
  <T> Future<T> retrieveAndDisposeResult(long paramLong);
  
  void executeOnKeyOwner(Runnable paramRunnable, Object paramObject);
  
  <T> DurableExecutorServiceFuture<T> submitToKeyOwner(Callable<T> paramCallable, Object paramObject);
  
  DurableExecutorServiceFuture<?> submitToKeyOwner(Runnable paramRunnable, Object paramObject);
}
