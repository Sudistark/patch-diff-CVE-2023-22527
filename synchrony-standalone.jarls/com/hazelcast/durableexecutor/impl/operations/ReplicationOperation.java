package com.hazelcast.durableexecutor.impl.operations;

import com.hazelcast.durableexecutor.impl.DistributedDurableExecutorService;
import com.hazelcast.durableexecutor.impl.DurableExecutorContainer;
import com.hazelcast.durableexecutor.impl.DurableExecutorDataSerializerHook;
import com.hazelcast.durableexecutor.impl.DurableExecutorPartitionContainer;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import com.hazelcast.spi.Operation;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class ReplicationOperation extends Operation implements IdentifiedDataSerializable {
  private List<DurableHolder> list;
  
  public ReplicationOperation() {}
  
  public ReplicationOperation(Map<String, DurableExecutorContainer> map) {
    this.list = new ArrayList(map.size());
    for (Map.Entry<String, DurableExecutorContainer> containerEntry : map.entrySet()) {
      String name = (String)containerEntry.getKey();
      DurableExecutorContainer value = (DurableExecutorContainer)containerEntry.getValue();
      this.list.add(new DurableHolder(name, value.getRingBuffer()));
    } 
  }
  
  public void run() {
    DistributedDurableExecutorService service = (DistributedDurableExecutorService)getService();
    DurableExecutorPartitionContainer partitionContainer = service.getPartitionContainer(getPartitionId());
    for (DurableHolder durableHolder : this.list)
      partitionContainer.createExecutorContainer(DurableHolder.access$000(durableHolder), DurableHolder.access$100(durableHolder)); 
  }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    out.writeInt(this.list.size());
    for (DurableHolder durableHolder : this.list)
      DurableHolder.access$200(durableHolder, out); 
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    int size = in.readInt();
    this.list = new ArrayList(size);
    for (int i = 0; i < size; i++) {
      DurableHolder durableHolder = new DurableHolder();
      DurableHolder.access$300(durableHolder, in);
      this.list.add(durableHolder);
    } 
  }
  
  public int getFactoryId() { return DurableExecutorDataSerializerHook.F_ID; }
  
  public int getId() { return 3; }
}
