package com.hazelcast.durableexecutor.impl;

import com.hazelcast.core.HazelcastInstanceNotActiveException;
import com.hazelcast.core.Member;
import com.hazelcast.core.PartitionAware;
import com.hazelcast.durableexecutor.DurableExecutorService;
import com.hazelcast.durableexecutor.DurableExecutorServiceFuture;
import com.hazelcast.durableexecutor.impl.operations.DisposeResultOperation;
import com.hazelcast.durableexecutor.impl.operations.RetrieveAndDisposeResultOperation;
import com.hazelcast.durableexecutor.impl.operations.RetrieveResultOperation;
import com.hazelcast.durableexecutor.impl.operations.ShutdownOperation;
import com.hazelcast.durableexecutor.impl.operations.TaskOperation;
import com.hazelcast.executor.impl.RunnableAdapter;
import com.hazelcast.logging.ILogger;
import com.hazelcast.nio.Bits;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.AbstractDistributedObject;
import com.hazelcast.spi.InternalCompletableFuture;
import com.hazelcast.spi.NodeEngine;
import com.hazelcast.spi.Operation;
import com.hazelcast.spi.OperationService;
import com.hazelcast.spi.serialization.SerializationService;
import com.hazelcast.util.FutureUtil;
import com.hazelcast.util.Preconditions;
import com.hazelcast.util.executor.CompletedFuture;
import java.util.Collection;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import java.util.Random;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Future;
import java.util.concurrent.RejectedExecutionException;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

public class DurableExecutorServiceProxy extends AbstractDistributedObject<DistributedDurableExecutorService> implements DurableExecutorService {
  private final FutureUtil.ExceptionHandler shutdownExceptionHandler = new Object(this);
  
  private final ILogger logger;
  
  private final Random random = new Random();
  
  private final int partitionCount;
  
  private final String name;
  
  DurableExecutorServiceProxy(NodeEngine nodeEngine, DistributedDurableExecutorService service, String name) {
    super(nodeEngine, service);
    this.name = name;
    this.logger = nodeEngine.getLogger(DurableExecutorServiceProxy.class);
    this.partitionCount = nodeEngine.getPartitionService().getPartitionCount();
  }
  
  public <T> Future<T> retrieveResult(long uniqueId) {
    int partitionId = Bits.extractInt(uniqueId, false);
    int sequence = Bits.extractInt(uniqueId, true);
    Operation op = (new RetrieveResultOperation(this.name, sequence)).setPartitionId(partitionId);
    return invokeOnPartition(op);
  }
  
  public void disposeResult(long uniqueId) {
    int partitionId = Bits.extractInt(uniqueId, false);
    int sequence = Bits.extractInt(uniqueId, true);
    Operation op = (new DisposeResultOperation(this.name, sequence)).setPartitionId(partitionId);
    InternalCompletableFuture<?> future = invokeOnPartition(op);
    future.join();
  }
  
  public <T> Future<T> retrieveAndDisposeResult(long uniqueId) {
    int partitionId = Bits.extractInt(uniqueId, false);
    int sequence = Bits.extractInt(uniqueId, true);
    Operation op = (new RetrieveAndDisposeResultOperation(this.name, sequence)).setPartitionId(partitionId);
    return invokeOnPartition(op);
  }
  
  public void execute(Runnable task) {
    RunnableAdapter runnableAdapter = createRunnableAdapter(task);
    int partitionId = getTaskPartitionId(runnableAdapter);
    submitToPartition(runnableAdapter, partitionId, null);
  }
  
  public void executeOnKeyOwner(Runnable task, Object key) {
    RunnableAdapter runnableAdapter = createRunnableAdapter(task);
    int partitionId = getPartitionId(key);
    submitToPartition(runnableAdapter, partitionId, null);
  }
  
  public <T> DurableExecutorServiceFuture<T> submit(Runnable task, T result) {
    RunnableAdapter<T> runnableAdapter = createRunnableAdapter(task);
    int partitionId = getTaskPartitionId(runnableAdapter);
    return submitToPartition(runnableAdapter, partitionId, result);
  }
  
  public DurableExecutorServiceFuture<?> submit(Runnable task) {
    RunnableAdapter<?> runnableAdapter = createRunnableAdapter(task);
    int partitionId = getTaskPartitionId(runnableAdapter);
    return submitToPartition(runnableAdapter, partitionId, null);
  }
  
  public <T> DurableExecutorServiceFuture<T> submit(Callable<T> task) {
    int partitionId = getTaskPartitionId(task);
    return submitToPartition(task, partitionId, null);
  }
  
  public <T> DurableExecutorServiceFuture<T> submitToKeyOwner(Callable<T> task, Object key) {
    int partitionId = getPartitionId(key);
    return submitToPartition(task, partitionId, null);
  }
  
  public DurableExecutorServiceFuture<?> submitToKeyOwner(Runnable task, Object key) {
    RunnableAdapter<?> runnableAdapter = createRunnableAdapter(task);
    int partitionId = getPartitionId(key);
    return submitToPartition(runnableAdapter, partitionId, null);
  }
  
  public <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks) throws InterruptedException { throw new UnsupportedOperationException(); }
  
  public <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit) throws InterruptedException { throw new UnsupportedOperationException(); }
  
  public <T> T invokeAny(Collection<? extends Callable<T>> tasks) throws InterruptedException, ExecutionException { throw new UnsupportedOperationException(); }
  
  public <T> T invokeAny(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException { throw new UnsupportedOperationException(); }
  
  public boolean awaitTermination(long timeout, TimeUnit unit) throws InterruptedException { return false; }
  
  public void shutdown() {
    NodeEngine nodeEngine = getNodeEngine();
    Collection<Member> members = nodeEngine.getClusterService().getMembers();
    OperationService operationService = nodeEngine.getOperationService();
    Collection<Future> calls = new LinkedList<Future>();
    for (Member member : members) {
      ShutdownOperation op = new ShutdownOperation(this.name);
      InternalCompletableFuture internalCompletableFuture = operationService.invokeOnTarget("hz:impl:durableExecutorService", op, member.getAddress());
      calls.add(internalCompletableFuture);
    } 
    FutureUtil.waitWithDeadline(calls, 3L, TimeUnit.SECONDS, this.shutdownExceptionHandler);
  }
  
  public List<Runnable> shutdownNow() {
    shutdown();
    return Collections.emptyList();
  }
  
  public boolean isShutdown() {
    try {
      return ((DistributedDurableExecutorService)getService()).isShutdown(this.name);
    } catch (HazelcastInstanceNotActiveException e) {
      return true;
    } 
  }
  
  public boolean isTerminated() { return isShutdown(); }
  
  public String getName() { return this.name; }
  
  public String getServiceName() { return "hz:impl:durableExecutorService"; }
  
  protected void throwNotActiveException() { throw new RejectedExecutionException(); }
  
  private <T> DurableExecutorServiceFuture<T> submitToPartition(Callable<T> task, int partitionId, T defaultValue) {
    int sequence;
    Preconditions.checkNotNull(task, "task can't be null");
    SerializationService serializationService = getNodeEngine().getSerializationService();
    Data taskData = serializationService.toData(task);
    TaskOperation operation = new TaskOperation(this.name, taskData);
    operation.setPartitionId(partitionId);
    InternalCompletableFuture<Integer> future = invokeOnPartition(operation);
    try {
      sequence = ((Integer)future.get()).intValue();
    } catch (Throwable t) {
      CompletedFuture<T> completedFuture = new CompletedFuture<T>(serializationService, t, getAsyncExecutor());
      return new DurableExecutorServiceDelegateFuture(completedFuture, serializationService, null, -1L);
    } 
    Operation op = (new RetrieveResultOperation(this.name, sequence)).setPartitionId(partitionId);
    InternalCompletableFuture<T> internalCompletableFuture = invokeOnPartition(op);
    long taskId = Bits.combineToLong(partitionId, sequence);
    return new DurableExecutorServiceDelegateFuture(internalCompletableFuture, serializationService, defaultValue, taskId);
  }
  
  private ExecutorService getAsyncExecutor() { return getNodeEngine().getExecutionService().getExecutor("hz:async"); }
  
  private <T> RunnableAdapter<T> createRunnableAdapter(Runnable command) {
    Preconditions.checkNotNull(command, "Command can't be null");
    return new RunnableAdapter(command);
  }
  
  private <T> int getTaskPartitionId(Callable<T> task) {
    if (task instanceof PartitionAware) {
      Object partitionKey = ((PartitionAware)task).getPartitionKey();
      if (partitionKey != null)
        return getPartitionId(partitionKey); 
    } 
    return this.random.nextInt(this.partitionCount);
  }
  
  private int getPartitionId(Object key) { return getNodeEngine().getPartitionService().getPartitionId(key); }
}
