package com.hazelcast.cache;

public static enum BuiltInCacheMergePolicies {
  PASS_THROUGH(com.hazelcast.cache.merge.PassThroughCacheMergePolicy.class, new Object()),
  PUT_IF_ABSENT(com.hazelcast.cache.merge.PutIfAbsentCacheMergePolicy.class, new Object()),
  HIGHER_HITS(com.hazelcast.cache.merge.HigherHitsCacheMergePolicy.class, new Object()),
  LATEST_ACCESS(com.hazelcast.cache.merge.LatestAccessCacheMergePolicy.class, new Object());
  
  private Class<? extends CacheMergePolicy> implClass;
  
  private CacheMergePolicyInstanceFactory instanceFactory;
  
  BuiltInCacheMergePolicies(Class<? extends CacheMergePolicy> implClass, CacheMergePolicyInstanceFactory instanceFactory) {
    this.implClass = implClass;
    this.instanceFactory = instanceFactory;
  }
  
  public Class<? extends CacheMergePolicy> getImplementationClass() { return this.implClass; }
  
  public String getImplementationClassName() { return this.implClass.getName(); }
  
  public CacheMergePolicy newInstance() { return this.instanceFactory.create(); }
  
  public static BuiltInCacheMergePolicies getDefault() { return PUT_IF_ABSENT; }
}
