package com.hazelcast.cache.impl;

import com.hazelcast.cache.CacheEventType;
import com.hazelcast.cache.ICache;
import com.hazelcast.core.ManagedContext;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import com.hazelcast.spi.EventRegistration;
import com.hazelcast.spi.ListenerWrapperEventFilter;
import com.hazelcast.spi.NotifiableEventListener;
import com.hazelcast.spi.serialization.SerializationService;
import java.io.IOException;
import java.util.Collection;
import java.util.HashSet;
import javax.cache.configuration.CacheEntryListenerConfiguration;
import javax.cache.configuration.Factory;
import javax.cache.event.CacheEntryCreatedListener;
import javax.cache.event.CacheEntryEvent;
import javax.cache.event.CacheEntryEventFilter;
import javax.cache.event.CacheEntryExpiredListener;
import javax.cache.event.CacheEntryListener;
import javax.cache.event.CacheEntryRemovedListener;
import javax.cache.event.CacheEntryUpdatedListener;
import javax.cache.event.EventType;

public class CacheEventListenerAdaptor<K, V> extends Object implements CacheEventListener, CacheEntryListenerProvider<K, V>, NotifiableEventListener<CacheService>, ListenerWrapperEventFilter, IdentifiedDataSerializable {
  private CacheEntryListener<K, V> cacheEntryListener;
  
  private CacheEntryCreatedListener cacheEntryCreatedListener;
  
  private CacheEntryRemovedListener cacheEntryRemovedListener;
  
  private CacheEntryUpdatedListener cacheEntryUpdatedListener;
  
  private CacheEntryExpiredListener cacheEntryExpiredListener;
  
  private CacheEntryEventFilter<? super K, ? super V> filter;
  
  private boolean isOldValueRequired;
  
  private SerializationService serializationService;
  
  private ICache<K, V> source;
  
  public CacheEventListenerAdaptor() {}
  
  public CacheEventListenerAdaptor(ICache<K, V> source, CacheEntryListenerConfiguration<K, V> cacheEntryListenerConfiguration, SerializationService serializationService) {
    this.source = source;
    this.serializationService = serializationService;
    this.cacheEntryListener = createCacheEntryListener(cacheEntryListenerConfiguration);
    if (this.cacheEntryListener instanceof CacheEntryCreatedListener) {
      this.cacheEntryCreatedListener = (CacheEntryCreatedListener)this.cacheEntryListener;
    } else {
      this.cacheEntryCreatedListener = null;
    } 
    if (this.cacheEntryListener instanceof CacheEntryRemovedListener) {
      this.cacheEntryRemovedListener = (CacheEntryRemovedListener)this.cacheEntryListener;
    } else {
      this.cacheEntryRemovedListener = null;
    } 
    if (this.cacheEntryListener instanceof CacheEntryUpdatedListener) {
      this.cacheEntryUpdatedListener = (CacheEntryUpdatedListener)this.cacheEntryListener;
    } else {
      this.cacheEntryUpdatedListener = null;
    } 
    if (this.cacheEntryListener instanceof CacheEntryExpiredListener) {
      this.cacheEntryExpiredListener = (CacheEntryExpiredListener)this.cacheEntryListener;
    } else {
      this.cacheEntryExpiredListener = null;
    } 
    injectDependencies(this.cacheEntryListener);
    Factory<CacheEntryEventFilter<? super K, ? super V>> filterFactory = cacheEntryListenerConfiguration.getCacheEntryEventFilterFactory();
    if (filterFactory != null) {
      this.filter = (CacheEntryEventFilter)filterFactory.create();
    } else {
      this.filter = null;
    } 
    injectDependencies(this.filter);
    this.isOldValueRequired = cacheEntryListenerConfiguration.isOldValueRequired();
  }
  
  private CacheEntryListener<K, V> createCacheEntryListener(CacheEntryListenerConfiguration<K, V> cacheEntryListenerConfiguration) {
    Factory<CacheEntryListener<? super K, ? super V>> cacheEntryListenerFactory = cacheEntryListenerConfiguration.getCacheEntryListenerFactory();
    injectDependencies(cacheEntryListenerFactory);
    return (CacheEntryListener)cacheEntryListenerFactory.create();
  }
  
  private void injectDependencies(Object obj) {
    ManagedContext managedContext = this.serializationService.getManagedContext();
    managedContext.initialize(obj);
  }
  
  public CacheEntryListener<K, V> getCacheEntryListener() { return this.cacheEntryListener; }
  
  public void handleEvent(Object eventObject) {
    if (eventObject instanceof CacheEventSet) {
      cacheEventSet = (CacheEventSet)eventObject;
      try {
        if (cacheEventSet.getEventType() != CacheEventType.COMPLETED)
          handleEvent(cacheEventSet.getEventType().getType(), cacheEventSet.getEvents()); 
      } finally {
        ((CacheSyncListenerCompleter)this.source).countDownCompletionLatch(cacheEventSet.getCompletionId());
      } 
    } 
  }
  
  private void handleEvent(int type, Collection<CacheEventData> keys) {
    Iterable<CacheEntryEvent<? extends K, ? extends V>> cacheEntryEvent = createCacheEntryEvent(keys);
    CacheEventType eventType = CacheEventType.getByType(type);
    switch (null.$SwitchMap$com$hazelcast$cache$CacheEventType[eventType.ordinal()]) {
      case 1:
        if (this.cacheEntryCreatedListener != null)
          this.cacheEntryCreatedListener.onCreated(cacheEntryEvent); 
        return;
      case 2:
        if (this.cacheEntryUpdatedListener != null)
          this.cacheEntryUpdatedListener.onUpdated(cacheEntryEvent); 
        return;
      case 3:
        if (this.cacheEntryRemovedListener != null)
          this.cacheEntryRemovedListener.onRemoved(cacheEntryEvent); 
        return;
      case 4:
        if (this.cacheEntryExpiredListener != null)
          this.cacheEntryExpiredListener.onExpired(cacheEntryEvent); 
        return;
    } 
    throw new IllegalArgumentException("Invalid event type: " + eventType.name());
  }
  
  private Iterable<CacheEntryEvent<? extends K, ? extends V>> createCacheEntryEvent(Collection<CacheEventData> keys) {
    HashSet<CacheEntryEvent<? extends K, ? extends V>> evt = new HashSet<CacheEntryEvent<? extends K, ? extends V>>();
    for (CacheEventData cacheEventData : keys) {
      V oldValue, newValue;
      EventType eventType = CacheEventType.convertToEventType(cacheEventData.getCacheEventType());
      K key = (K)toObject(cacheEventData.getDataKey());
      boolean hasNewValue = (eventType != EventType.REMOVED && eventType != EventType.EXPIRED);
      if (this.isOldValueRequired) {
        if (hasNewValue) {
          newValue = (V)toObject(cacheEventData.getDataValue());
          oldValue = (V)toObject(cacheEventData.getDataOldValue());
        } else {
          oldValue = (V)toObject(cacheEventData.getDataValue());
          newValue = oldValue;
        } 
      } else if (hasNewValue) {
        newValue = (V)toObject(cacheEventData.getDataValue());
        oldValue = null;
      } else {
        newValue = null;
        oldValue = null;
      } 
      CacheEntryEventImpl<K, V> event = new CacheEntryEventImpl<K, V>(this.source, eventType, key, newValue, oldValue);
      if (this.filter == null || this.filter.evaluate(event))
        evt.add(event); 
    } 
    return evt;
  }
  
  private <T> T toObject(Data data) { return (T)this.serializationService.toObject(data); }
  
  public void handle(int type, Collection<CacheEventData> keys, int completionId) {
    try {
      if (CacheEventType.getByType(type) != CacheEventType.COMPLETED)
        handleEvent(type, keys); 
    } finally {
      ((CacheSyncListenerCompleter)this.source).countDownCompletionLatch(completionId);
    } 
  }
  
  public void onRegister(CacheService cacheService, String serviceName, String topic, EventRegistration registration) {
    CacheContext cacheContext = cacheService.getOrCreateCacheContext(topic);
    cacheContext.increaseCacheEntryListenerCount();
  }
  
  public void onDeregister(CacheService cacheService, String serviceName, String topic, EventRegistration registration) {
    CacheContext cacheContext = cacheService.getOrCreateCacheContext(topic);
    cacheContext.decreaseCacheEntryListenerCount();
  }
  
  public boolean eval(Object event) { return true; }
  
  public Object getListener() { return this; }
  
  public int getFactoryId() { return CacheDataSerializerHook.F_ID; }
  
  public int getId() { return 55; }
  
  public void writeData(ObjectDataOutput out) throws IOException {}
  
  public void readData(ObjectDataInput in) throws IOException {}
}
