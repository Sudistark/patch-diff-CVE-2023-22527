package com.hazelcast.cache.impl;

import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.Operation;
import com.hazelcast.spi.OperationFactory;
import com.hazelcast.spi.merge.SplitBrainMergePolicy;
import com.hazelcast.spi.merge.SplitBrainMergeTypes;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.cache.expiry.ExpiryPolicy;
import javax.cache.processor.EntryProcessor;

public interface CacheOperationProvider {
  Operation createPutOperation(Data paramData1, Data paramData2, ExpiryPolicy paramExpiryPolicy, boolean paramBoolean, int paramInt);
  
  Operation createPutAllOperation(List<Map.Entry<Data, Data>> paramList, ExpiryPolicy paramExpiryPolicy, int paramInt);
  
  Operation createGetOperation(Data paramData, ExpiryPolicy paramExpiryPolicy);
  
  Operation createContainsKeyOperation(Data paramData);
  
  Operation createPutIfAbsentOperation(Data paramData1, Data paramData2, ExpiryPolicy paramExpiryPolicy, int paramInt);
  
  Operation createRemoveOperation(Data paramData1, Data paramData2, int paramInt);
  
  Operation createGetAndRemoveOperation(Data paramData, int paramInt);
  
  Operation createReplaceOperation(Data paramData1, Data paramData2, Data paramData3, ExpiryPolicy paramExpiryPolicy, int paramInt);
  
  Operation createGetAndReplaceOperation(Data paramData1, Data paramData2, ExpiryPolicy paramExpiryPolicy, int paramInt);
  
  Operation createEntryProcessorOperation(Data paramData, Integer paramInteger, EntryProcessor paramEntryProcessor, Object... paramVarArgs);
  
  Operation createKeyIteratorOperation(int paramInt1, int paramInt2);
  
  Operation createEntryIteratorOperation(int paramInt1, int paramInt2);
  
  Operation createMergeOperation(String paramString, List<SplitBrainMergeTypes.CacheMergeTypes> paramList, SplitBrainMergePolicy<Data, SplitBrainMergeTypes.CacheMergeTypes> paramSplitBrainMergePolicy);
  
  OperationFactory createMergeOperationFactory(String paramString, int[] paramArrayOfInt, List<SplitBrainMergeTypes.CacheMergeTypes>[] paramArrayOfList, SplitBrainMergePolicy<Data, SplitBrainMergeTypes.CacheMergeTypes> paramSplitBrainMergePolicy);
  
  Operation createSetExpiryPolicyOperation(List<Data> paramList, Data paramData);
  
  OperationFactory createGetAllOperationFactory(Set<Data> paramSet, ExpiryPolicy paramExpiryPolicy);
  
  OperationFactory createLoadAllOperationFactory(Set<Data> paramSet, boolean paramBoolean);
  
  OperationFactory createClearOperationFactory();
  
  OperationFactory createRemoveAllOperationFactory(Set<Data> paramSet, Integer paramInteger);
  
  OperationFactory createSizeOperationFactory();
}
