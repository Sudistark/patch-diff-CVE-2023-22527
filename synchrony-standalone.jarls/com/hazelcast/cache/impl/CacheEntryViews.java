package com.hazelcast.cache.impl;

import com.hazelcast.cache.CacheEntryView;
import com.hazelcast.cache.impl.merge.entry.DefaultCacheEntryView;
import com.hazelcast.cache.impl.merge.entry.LazyCacheEntryView;
import com.hazelcast.cache.impl.record.CacheRecord;
import com.hazelcast.nio.serialization.Data;

public final class CacheEntryViews {
  public static CacheEntryView<Data, Data> createDefaultEntryView(Data key, Data value, Data expiryPolicy, CacheRecord<Object, Data> record) {
    return new DefaultCacheEntryView(key, value, record
        .getCreationTime(), record
        .getExpirationTime(), record
        .getLastAccessTime(), record
        .getAccessHit(), expiryPolicy);
  }
  
  public static CacheEntryView<Data, Data> createEntryView(Data key, Data expiryPolicy, CacheRecord record) {
    if (record == null)
      throw new IllegalArgumentException("Empty record"); 
    return createDefaultEntryView(key, (Data)record.getValue(), expiryPolicy, record);
  }
  
  public static CacheEntryView<Data, Data> createLazyEntryView(Data key, Data value, Data expiryPolicy, CacheRecord record) {
    return new LazyCacheEntryView(key, value, record
        .getCreationTime(), record
        .getExpirationTime(), record
        .getLastAccessTime(), record
        .getAccessHit(), expiryPolicy);
  }
  
  public static CacheEntryView<Data, Data> createEntryView(Data key, Data value, Data expiryPolicy, CacheRecord record, CacheEntryViewType cacheEntryViewType) {
    if (cacheEntryViewType == null)
      throw new IllegalArgumentException("Empty cache entry view type"); 
    switch (null.$SwitchMap$com$hazelcast$cache$impl$CacheEntryViews$CacheEntryViewType[cacheEntryViewType.ordinal()]) {
      case 1:
        return createDefaultEntryView(key, value, expiryPolicy, record);
      case 2:
        return createLazyEntryView(key, value, expiryPolicy, record);
    } 
    throw new IllegalArgumentException("Invalid cache entry view type: " + cacheEntryViewType);
  }
}
