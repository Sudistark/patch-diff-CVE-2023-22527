package com.hazelcast.cache.impl.maxsize.impl;

import com.hazelcast.cache.impl.record.CacheRecordMap;
import com.hazelcast.internal.eviction.EvictionChecker;

public class EntryCountCacheEvictionChecker implements EvictionChecker {
  private static final int MAX_ENTRY_COUNT_FOR_THRESHOLD_USAGE = 1000000;
  
  private static final int STD_DEV_OF_5_THRESHOLD = 4000;
  
  private static final int STD_DEV_MULTIPLIER_5 = 5;
  
  private static final int STD_DEV_MULTIPLIER_3 = 3;
  
  private final CacheRecordMap cacheRecordMap;
  
  private final int maxPartitionSize;
  
  public EntryCountCacheEvictionChecker(int size, CacheRecordMap cacheRecordMap, int partitionCount) {
    this.cacheRecordMap = cacheRecordMap;
    this.maxPartitionSize = calculateMaxPartitionSize(size, partitionCount);
  }
  
  public static int calculateMaxPartitionSize(int maxEntryCount, int partitionCount) {
    int stdDevMultiplier;
    double balancedPartitionSize = maxEntryCount / partitionCount;
    double approximatedStdDev = Math.sqrt(balancedPartitionSize);
    if (maxEntryCount <= 4000) {
      stdDevMultiplier = 5;
    } else if (maxEntryCount > 4000 && maxEntryCount <= 1000000) {
      stdDevMultiplier = 3;
    } else {
      stdDevMultiplier = 0;
    } 
    return (int)(approximatedStdDev * stdDevMultiplier + balancedPartitionSize);
  }
  
  public boolean isEvictionRequired() { return (this.cacheRecordMap.size() >= this.maxPartitionSize); }
}
