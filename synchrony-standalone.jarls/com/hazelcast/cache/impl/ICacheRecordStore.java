package com.hazelcast.cache.impl;

import com.hazelcast.cache.CacheEntryView;
import com.hazelcast.cache.CacheMergePolicy;
import com.hazelcast.cache.impl.record.CacheRecord;
import com.hazelcast.config.CacheConfig;
import com.hazelcast.internal.eviction.ExpiredKey;
import com.hazelcast.internal.nearcache.impl.invalidation.InvalidationQueue;
import com.hazelcast.map.impl.MapEntries;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.ObjectNamespace;
import com.hazelcast.spi.merge.SplitBrainMergePolicy;
import com.hazelcast.spi.merge.SplitBrainMergeTypes;
import com.hazelcast.wan.impl.CallerProvenance;
import java.util.Collection;
import java.util.Map;
import java.util.Set;
import javax.cache.expiry.ExpiryPolicy;
import javax.cache.processor.EntryProcessor;

public interface ICacheRecordStore {
  Object get(Data paramData, ExpiryPolicy paramExpiryPolicy);
  
  CacheRecord put(Data paramData, Object paramObject, ExpiryPolicy paramExpiryPolicy, String paramString, int paramInt);
  
  Object getAndPut(Data paramData, Object paramObject, ExpiryPolicy paramExpiryPolicy, String paramString, int paramInt);
  
  boolean putIfAbsent(Data paramData, Object paramObject, ExpiryPolicy paramExpiryPolicy, String paramString, int paramInt);
  
  Object getAndRemove(Data paramData, String paramString, int paramInt);
  
  boolean remove(Data paramData, String paramString1, String paramString2, int paramInt, CallerProvenance paramCallerProvenance);
  
  boolean remove(Data paramData, String paramString1, String paramString2, int paramInt);
  
  boolean remove(Data paramData, Object paramObject, String paramString1, String paramString2, int paramInt);
  
  boolean replace(Data paramData, Object paramObject, ExpiryPolicy paramExpiryPolicy, String paramString, int paramInt);
  
  boolean replace(Data paramData, Object paramObject1, Object paramObject2, ExpiryPolicy paramExpiryPolicy, String paramString, int paramInt);
  
  Object getAndReplace(Data paramData, Object paramObject, ExpiryPolicy paramExpiryPolicy, String paramString, int paramInt);
  
  boolean setExpiryPolicy(Collection<Data> paramCollection, Object paramObject, String paramString);
  
  Object getExpiryPolicy(Data paramData);
  
  boolean contains(Data paramData);
  
  MapEntries getAll(Set<Data> paramSet, ExpiryPolicy paramExpiryPolicy);
  
  int size();
  
  void clear();
  
  void reset();
  
  void removeAll(Set<Data> paramSet, int paramInt);
  
  void init();
  
  void close(boolean paramBoolean);
  
  void destroy();
  
  void destroyInternals();
  
  CacheConfig getConfig();
  
  String getName();
  
  Map<Data, CacheRecord> getReadOnlyRecords();
  
  boolean isExpirable();
  
  CacheRecord getRecord(Data paramData);
  
  void putRecord(Data paramData, CacheRecord paramCacheRecord, boolean paramBoolean);
  
  CacheRecord removeRecord(Data paramData);
  
  CacheKeyIterationResult fetchKeys(int paramInt1, int paramInt2);
  
  CacheEntryIterationResult fetchEntries(int paramInt1, int paramInt2);
  
  Object invoke(Data paramData, EntryProcessor paramEntryProcessor, Object[] paramArrayOfObject, int paramInt);
  
  Set<Data> loadAll(Set<Data> paramSet, boolean paramBoolean);
  
  CacheStatisticsImpl getCacheStats();
  
  boolean evictIfRequired();
  
  void sampleAndForceRemoveEntries(int paramInt);
  
  boolean isWanReplicationEnabled();
  
  ObjectNamespace getObjectNamespace();
  
  CacheRecord merge(SplitBrainMergeTypes.CacheMergeTypes paramCacheMergeTypes, SplitBrainMergePolicy<Data, SplitBrainMergeTypes.CacheMergeTypes> paramSplitBrainMergePolicy, CallerProvenance paramCallerProvenance);
  
  CacheRecord merge(CacheEntryView<Data, Data> paramCacheEntryView, CacheMergePolicy paramCacheMergePolicy, String paramString1, String paramString2, int paramInt, CallerProvenance paramCallerProvenance);
  
  int getPartitionId();
  
  void evictExpiredEntries(int paramInt);
  
  InvalidationQueue<ExpiredKey> getExpiredKeysQueue();
  
  void disposeDeferredBlocks();
}
