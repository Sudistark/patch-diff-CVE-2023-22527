package com.hazelcast.cache.impl;

import com.hazelcast.cache.CacheStatistics;
import com.hazelcast.monitor.NearCacheStats;
import com.hazelcast.util.ConcurrencyUtil;
import java.util.concurrent.atomic.AtomicLongFieldUpdater;

public class CacheStatisticsImpl implements CacheStatistics {
  protected static final float FLOAT_HUNDRED = 100.0F;
  
  protected static final long NANOSECONDS_IN_A_MICROSECOND = 1000L;
  
  protected static final AtomicLongFieldUpdater<CacheStatisticsImpl> LAST_ACCESS_TIME = AtomicLongFieldUpdater.newUpdater(CacheStatisticsImpl.class, "lastAccessTime");
  
  protected static final AtomicLongFieldUpdater<CacheStatisticsImpl> LAST_UPDATE_TIME = AtomicLongFieldUpdater.newUpdater(CacheStatisticsImpl.class, "lastUpdateTime");
  
  protected static final AtomicLongFieldUpdater<CacheStatisticsImpl> REMOVALS = AtomicLongFieldUpdater.newUpdater(CacheStatisticsImpl.class, "removals");
  
  protected static final AtomicLongFieldUpdater<CacheStatisticsImpl> EXPIRIES = AtomicLongFieldUpdater.newUpdater(CacheStatisticsImpl.class, "expiries");
  
  protected static final AtomicLongFieldUpdater<CacheStatisticsImpl> PUTS = AtomicLongFieldUpdater.newUpdater(CacheStatisticsImpl.class, "puts");
  
  protected static final AtomicLongFieldUpdater<CacheStatisticsImpl> HITS = AtomicLongFieldUpdater.newUpdater(CacheStatisticsImpl.class, "hits");
  
  protected static final AtomicLongFieldUpdater<CacheStatisticsImpl> MISSES = AtomicLongFieldUpdater.newUpdater(CacheStatisticsImpl.class, "misses");
  
  protected static final AtomicLongFieldUpdater<CacheStatisticsImpl> EVICTIONS = AtomicLongFieldUpdater.newUpdater(CacheStatisticsImpl.class, "evictions");
  
  protected static final AtomicLongFieldUpdater<CacheStatisticsImpl> PUT_TIME_TAKEN_NANOS = AtomicLongFieldUpdater.newUpdater(CacheStatisticsImpl.class, "putTimeTakenNanos");
  
  protected static final AtomicLongFieldUpdater<CacheStatisticsImpl> GET_CACHE_TIME_TAKEN_NANOS = AtomicLongFieldUpdater.newUpdater(CacheStatisticsImpl.class, "getCacheTimeTakenNanos");
  
  protected static final AtomicLongFieldUpdater<CacheStatisticsImpl> REMOVE_TIME_TAKEN_NANOS = AtomicLongFieldUpdater.newUpdater(CacheStatisticsImpl.class, "removeTimeTakenNanos");
  
  protected long creationTime;
  
  protected final CacheEntryCountResolver cacheEntryCountResolver;
  
  public CacheStatisticsImpl(long creationTime) { this(creationTime, null); }
  
  public CacheStatisticsImpl(long creationTime, CacheEntryCountResolver cacheEntryCountResolver) {
    this.creationTime = creationTime;
    this.cacheEntryCountResolver = cacheEntryCountResolver;
  }
  
  public long getCreationTime() { return this.creationTime; }
  
  public long getLastAccessTime() { return this.lastAccessTime; }
  
  public long getLastUpdateTime() { return this.lastUpdateTime; }
  
  public long getOwnedEntryCount() {
    if (this.cacheEntryCountResolver != null)
      return this.cacheEntryCountResolver.getEntryCount(); 
    return 0L;
  }
  
  public long getCacheRemovals() { return this.removals; }
  
  public long getCacheExpiries() { return this.expiries; }
  
  public long getCacheGets() { return getCacheHits() + getCacheMisses(); }
  
  public long getCachePuts() { return this.puts; }
  
  public long getCacheHits() { return this.hits; }
  
  public long getCacheMisses() { return this.misses; }
  
  public long getCacheEvictions() { return this.evictions; }
  
  public long getCachePutTimeTakenNanos() { return this.putTimeTakenNanos; }
  
  public long getCacheGetTimeTakenNanos() { return this.getCacheTimeTakenNanos; }
  
  public long getCacheRemoveTimeTakenNanos() { return this.removeTimeTakenNanos; }
  
  public float getCacheHitPercentage() {
    long cacheHits = getCacheHits();
    long cacheGets = getCacheGets();
    if (cacheHits == 0L || cacheGets == 0L)
      return 0.0F; 
    return (float)cacheHits / (float)cacheGets * 100.0F;
  }
  
  public float getCacheMissPercentage() {
    long cacheMisses = getCacheMisses();
    long cacheGets = getCacheGets();
    if (cacheMisses == 0L || cacheGets == 0L)
      return 0.0F; 
    return (float)cacheMisses / (float)cacheGets * 100.0F;
  }
  
  public float getAverageGetTime() {
    long cacheGetTimeTakenNanos = getCacheGetTimeTakenNanos();
    long cacheGets = getCacheGets();
    if (cacheGetTimeTakenNanos == 0L || cacheGets == 0L)
      return 0.0F; 
    return 1.0F * (float)cacheGetTimeTakenNanos / (float)cacheGets / 1000.0F;
  }
  
  public float getAveragePutTime() {
    long cachePutTimeTakenNanos = getCachePutTimeTakenNanos();
    long cachePuts = getCachePuts();
    if (cachePutTimeTakenNanos == 0L || cachePuts == 0L)
      return 0.0F; 
    return 1.0F * (float)cachePutTimeTakenNanos / (float)cachePuts / 1000.0F;
  }
  
  public float getAverageRemoveTime() {
    long cacheRemoveTimeTakenNanos = getCacheRemoveTimeTakenNanos();
    long cacheRemoves = getCacheRemovals();
    if (cacheRemoveTimeTakenNanos == 0L || cacheRemoves == 0L)
      return 0.0F; 
    return 1.0F * (float)cacheRemoveTimeTakenNanos / (float)cacheRemoves / 1000.0F;
  }
  
  public void clear() {
    this.puts = 0L;
    this.misses = 0L;
    this.removals = 0L;
    this.expiries = 0L;
    this.hits = 0L;
    this.evictions = 0L;
    this.getCacheTimeTakenNanos = 0L;
    this.putTimeTakenNanos = 0L;
    this.removeTimeTakenNanos = 0L;
  }
  
  public void setLastAccessTime(long time) { ConcurrencyUtil.setMax(this, LAST_ACCESS_TIME, time); }
  
  public void setLastUpdateTime(long time) { ConcurrencyUtil.setMax(this, LAST_UPDATE_TIME, time); }
  
  public void increaseCacheRemovals() {
    REMOVALS.incrementAndGet(this);
    setLastUpdateTime(System.currentTimeMillis());
  }
  
  public void increaseCacheRemovals(long number) {
    REMOVALS.addAndGet(this, number);
    setLastUpdateTime(System.currentTimeMillis());
  }
  
  public void increaseCacheExpiries() {
    EXPIRIES.incrementAndGet(this);
    setLastUpdateTime(System.currentTimeMillis());
  }
  
  public void increaseCacheExpiries(long number) {
    EXPIRIES.addAndGet(this, number);
    setLastUpdateTime(System.currentTimeMillis());
  }
  
  public void increaseCachePuts() {
    PUTS.incrementAndGet(this);
    setLastUpdateTime(System.currentTimeMillis());
  }
  
  public void increaseCachePuts(long number) {
    PUTS.addAndGet(this, number);
    setLastUpdateTime(System.currentTimeMillis());
  }
  
  public void increaseCacheHits() {
    HITS.incrementAndGet(this);
    setLastAccessTime(System.currentTimeMillis());
  }
  
  public void increaseCacheHits(long number) {
    HITS.addAndGet(this, number);
    setLastAccessTime(System.currentTimeMillis());
  }
  
  public void increaseCacheMisses() {
    MISSES.incrementAndGet(this);
    setLastAccessTime(System.currentTimeMillis());
  }
  
  public void increaseCacheMisses(long number) {
    MISSES.addAndGet(this, number);
    setLastAccessTime(System.currentTimeMillis());
  }
  
  public void increaseCacheEvictions() {
    EVICTIONS.incrementAndGet(this);
    setLastUpdateTime(System.currentTimeMillis());
  }
  
  public void increaseCacheEvictions(long number) {
    EVICTIONS.addAndGet(this, number);
    setLastUpdateTime(System.currentTimeMillis());
  }
  
  public void addGetTimeNanos(long duration) {
    while (true) {
      long nanos = this.getCacheTimeTakenNanos;
      if (nanos <= Float.MAX_VALUE - duration) {
        if (GET_CACHE_TIME_TAKEN_NANOS.compareAndSet(this, nanos, nanos + duration))
          return; 
        continue;
      } 
      if (GET_CACHE_TIME_TAKEN_NANOS.compareAndSet(this, nanos, duration))
        break; 
    } 
    clear();
  }
  
  public void addPutTimeNanos(long duration) {
    while (true) {
      long nanos = this.putTimeTakenNanos;
      if (nanos <= Float.MAX_VALUE - duration) {
        if (PUT_TIME_TAKEN_NANOS.compareAndSet(this, nanos, nanos + duration))
          return; 
        continue;
      } 
      if (PUT_TIME_TAKEN_NANOS.compareAndSet(this, nanos, duration))
        break; 
    } 
    clear();
  }
  
  public void addRemoveTimeNanos(long duration) {
    while (true) {
      long nanos = this.removeTimeTakenNanos;
      if (nanos <= Float.MAX_VALUE - duration) {
        if (REMOVE_TIME_TAKEN_NANOS.compareAndSet(this, nanos, nanos + duration))
          return; 
        continue;
      } 
      if (REMOVE_TIME_TAKEN_NANOS.compareAndSet(this, nanos, duration))
        break; 
    } 
    clear();
  }
  
  public NearCacheStats getNearCacheStatistics() { throw new UnsupportedOperationException("Near Cache is not supported at server"); }
  
  public String toString() {
    return "CacheStatisticsImpl{creationTime=" + this.creationTime + ", lastAccessTime=" + this.lastAccessTime + ", lastUpdateTime=" + this.lastUpdateTime + ", ownedEntryCount=" + 


      
      getOwnedEntryCount() + ", removals=" + this.removals + ", expiries=" + this.expiries + ", puts=" + this.puts + ", hits=" + this.hits + ", misses=" + this.misses + ", evictions=" + this.evictions + ", putTimeTakenNanos=" + this.putTimeTakenNanos + ", getCacheTimeTakenNanos=" + this.getCacheTimeTakenNanos + ", removeTimeTakenNanos=" + this.removeTimeTakenNanos + '}';
  }
}
