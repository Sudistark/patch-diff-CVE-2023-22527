package com.hazelcast.cache.impl.operation;

import com.hazelcast.cache.CacheNotExistsException;
import com.hazelcast.cache.impl.CacheDataSerializerHook;
import com.hazelcast.cache.impl.ICacheRecordStore;
import com.hazelcast.cache.impl.ICacheService;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import com.hazelcast.spi.BackupOperation;
import com.hazelcast.spi.ObjectNamespace;
import com.hazelcast.spi.ServiceNamespace;
import com.hazelcast.spi.ServiceNamespaceAware;
import com.hazelcast.spi.impl.AbstractNamedOperation;

public class CacheClearBackupOperation extends AbstractNamedOperation implements BackupOperation, ServiceNamespaceAware, IdentifiedDataSerializable {
  private ICacheRecordStore cache;
  
  public CacheClearBackupOperation() {}
  
  public CacheClearBackupOperation(String name) { super(name); }
  
  public void beforeRun() {
    ICacheService service = (ICacheService)getService();
    try {
      this.cache = service.getOrCreateRecordStore(this.name, getPartitionId());
    } catch (CacheNotExistsException e) {
      getLogger().finest("Error while getting a cache", e);
    } 
  }
  
  public String getServiceName() { return "hz:impl:cacheService"; }
  
  public void run() {
    if (this.cache != null)
      this.cache.clear(); 
  }
  
  public ObjectNamespace getServiceNamespace() {
    ICacheRecordStore recordStore = this.cache;
    if (recordStore == null) {
      ICacheService service = (ICacheService)getService();
      recordStore = service.getOrCreateRecordStore(this.name, getPartitionId());
    } 
    return recordStore.getObjectNamespace();
  }
  
  public int getFactoryId() { return CacheDataSerializerHook.F_ID; }
  
  public int getId() { return 12; }
}
