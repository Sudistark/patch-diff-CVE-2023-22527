package com.hazelcast.cache.impl.operation;

import com.hazelcast.cache.impl.CacheDataSerializerHook;
import com.hazelcast.cache.impl.ICacheService;
import com.hazelcast.config.CacheConfig;
import com.hazelcast.core.Member;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import com.hazelcast.spi.NodeEngine;
import com.hazelcast.spi.OperationService;
import com.hazelcast.spi.impl.AbstractNamedOperation;
import java.io.IOException;
import java.util.Collection;

@Deprecated
public class CacheCreateConfigOperation extends AbstractNamedOperation implements IdentifiedDataSerializable {
  private CacheConfig config;
  
  private boolean createAlsoOnOthers = true;
  
  private boolean ignoreLocal;
  
  private boolean returnsResponse = true;
  
  private Object response;
  
  public CacheCreateConfigOperation() {}
  
  public CacheCreateConfigOperation(CacheConfig config, boolean createAlsoOnOthers) { this(config, createAlsoOnOthers, false); }
  
  public CacheCreateConfigOperation(CacheConfig config, boolean createAlsoOnOthers, boolean ignoreLocal) {
    super(config.getNameWithPrefix());
    this.config = config;
    this.createAlsoOnOthers = createAlsoOnOthers;
    this.ignoreLocal = ignoreLocal;
  }
  
  public String getServiceName() { return "hz:impl:cacheService"; }
  
  public void run() {
    ICacheService service = (ICacheService)getService();
    if (!this.ignoreLocal)
      this.response = service.putCacheConfigIfAbsent(this.config); 
    if (this.createAlsoOnOthers) {
      NodeEngine nodeEngine = getNodeEngine();
      Collection<Member> members = nodeEngine.getClusterService().getMembers();
      int remoteNodeCount = members.size() - 1;
      if (remoteNodeCount > 0) {
        postponeReturnResponse();
        CacheConfigCreateCallback cacheConfigCreateCallback = new CacheConfigCreateCallback(this, remoteNodeCount);
        OperationService operationService = nodeEngine.getOperationService();
        for (Member member : members) {
          if (!member.localMember()) {
            CacheCreateConfigOperation op = new CacheCreateConfigOperation(this.config, false);
            operationService
              .createInvocationBuilder("hz:impl:cacheService", op, member.getAddress())
              .setExecutionCallback(cacheConfigCreateCallback)
              .invoke();
          } 
        } 
      } 
    } 
  }
  
  private void postponeReturnResponse() { this.returnsResponse = false; }
  
  public void onExecutionFailure(Throwable e) {
    this.returnsResponse = true;
    super.onExecutionFailure(e);
  }
  
  public Object getResponse() { return this.response; }
  
  public boolean returnsResponse() { return this.returnsResponse; }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeObject(this.config);
    out.writeBoolean(this.createAlsoOnOthers);
    out.writeBoolean(this.ignoreLocal);
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    this.config = (CacheConfig)in.readObject();
    this.createAlsoOnOthers = in.readBoolean();
    this.ignoreLocal = in.readBoolean();
  }
  
  public int getId() { return 26; }
  
  public int getFactoryId() { return CacheDataSerializerHook.F_ID; }
}
