package com.hazelcast.cache.impl.operation;

import com.hazelcast.cache.impl.CacheClearResponse;
import com.hazelcast.cache.impl.CacheService;
import com.hazelcast.cache.impl.ICacheRecordStore;
import com.hazelcast.cache.impl.ICacheService;
import com.hazelcast.spi.BackupAwareOperation;
import com.hazelcast.spi.ObjectNamespace;
import com.hazelcast.spi.Operation;
import com.hazelcast.spi.ServiceNamespace;
import com.hazelcast.spi.ServiceNamespaceAware;
import com.hazelcast.spi.impl.MutatingOperation;
import com.hazelcast.spi.partition.IPartitionService;
import javax.cache.CacheException;

public class CacheClearOperation extends PartitionWideCacheOperation implements BackupAwareOperation, ServiceNamespaceAware, MutatingOperation {
  private ICacheRecordStore cache;
  
  public CacheClearOperation() {}
  
  public CacheClearOperation(String name) { super(name); }
  
  public void beforeRun() {
    ICacheService service = (ICacheService)getService();
    this.cache = service.getRecordStore(this.name, getPartitionId());
  }
  
  public void run() {
    if (this.cache == null)
      return; 
    try {
      this.cache.clear();
      this.response = new CacheClearResponse(Boolean.TRUE);
    } catch (CacheException e) {
      this.response = new CacheClearResponse(e);
    } 
  }
  
  public void afterRun() {
    super.afterRun();
    CacheService cacheService = (CacheService)getService();
    int partitionId = getPartitionId();
    IPartitionService partitionService = getNodeEngine().getPartitionService();
    if (partitionService.getPartitionId(this.name) == partitionId)
      cacheService.sendInvalidationEvent(this.name, null, "<NA>"); 
    cacheService.getCacheEventHandler().resetPartitionMetaData(this.name, partitionId);
  }
  
  public int getId() { return 15; }
  
  public boolean shouldBackup() { return true; }
  
  public final int getSyncBackupCount() { return (this.cache != null) ? this.cache.getConfig().getBackupCount() : 0; }
  
  public final int getAsyncBackupCount() { return (this.cache != null) ? this.cache.getConfig().getAsyncBackupCount() : 0; }
  
  public Operation getBackupOperation() { return new CacheClearBackupOperation(this.name); }
  
  public ObjectNamespace getServiceNamespace() {
    ICacheRecordStore recordStore = this.cache;
    if (recordStore == null) {
      ICacheService service = (ICacheService)getService();
      recordStore = service.getOrCreateRecordStore(this.name, getPartitionId());
    } 
    return recordStore.getObjectNamespace();
  }
}
