package com.hazelcast.cache.impl.operation;

import com.hazelcast.cache.impl.CacheDataSerializerHook;
import com.hazelcast.cache.impl.record.CacheRecord;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.BackupAwareOperation;
import com.hazelcast.spi.Operation;
import com.hazelcast.spi.impl.MutatingOperation;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class CacheSetExpiryPolicyOperation extends CacheOperation implements MutatingOperation, BackupAwareOperation {
  private List<Data> keys;
  
  private Data expiryPolicy;
  
  private boolean response;
  
  public CacheSetExpiryPolicyOperation() {}
  
  public CacheSetExpiryPolicyOperation(String name, List<Data> keys, Data expiryPolicy) {
    super(name);
    this.keys = keys;
    this.expiryPolicy = expiryPolicy;
  }
  
  public void run() {
    if (this.recordStore == null)
      return; 
    this.response = this.recordStore.setExpiryPolicy(this.keys, this.expiryPolicy, getCallerUuid());
  }
  
  public void afterRun() {
    super.afterRun();
    if (this.recordStore.isWanReplicationEnabled())
      for (Data key : this.keys) {
        CacheRecord record = this.recordStore.getRecord(key);
        publishWanUpdate(key, record);
      }  
  }
  
  public Object getResponse() { return Boolean.valueOf(this.response); }
  
  public int getFactoryId() { return CacheDataSerializerHook.F_ID; }
  
  public int getId() { return 67; }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeInt(this.keys.size());
    for (Data key : this.keys)
      out.writeData(key); 
    out.writeData(this.expiryPolicy);
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    int s = in.readInt();
    this.keys = new ArrayList(s);
    while (s-- > 0)
      this.keys.add(in.readData()); 
    this.expiryPolicy = in.readData();
  }
  
  public boolean shouldBackup() { return (this.recordStore.getConfig().getTotalBackupCount() > 0); }
  
  public Operation getBackupOperation() { return new CacheSetExpiryPolicyBackupOperation(this.name, this.keys, this.expiryPolicy); }
}
