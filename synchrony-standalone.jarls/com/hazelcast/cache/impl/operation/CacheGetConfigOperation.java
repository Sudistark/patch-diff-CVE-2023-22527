package com.hazelcast.cache.impl.operation;

import com.hazelcast.cache.impl.AbstractCacheService;
import com.hazelcast.cache.impl.CacheDataSerializerHook;
import com.hazelcast.cache.impl.PreJoinCacheConfig;
import com.hazelcast.config.CacheConfig;
import com.hazelcast.core.ICompletableFuture;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import com.hazelcast.spi.ReadonlyOperation;
import com.hazelcast.spi.impl.AbstractNamedOperation;
import java.io.IOException;

public class CacheGetConfigOperation extends AbstractNamedOperation implements IdentifiedDataSerializable, ReadonlyOperation {
  private ICompletableFuture createOnAllMembersFuture;
  
  private String simpleName;
  
  public CacheGetConfigOperation() {}
  
  public CacheGetConfigOperation(String name, String simpleName) {
    super(name);
    this.simpleName = simpleName;
  }
  
  public void run() {
    AbstractCacheService service = (AbstractCacheService)getService();
    CacheConfig cacheConfig = service.getCacheConfig(this.name);
    if (cacheConfig == null) {
      cacheConfig = service.findCacheConfig(this.simpleName);
      if (cacheConfig != null) {
        cacheConfig.setManagerPrefix(this.name.substring(0, this.name.lastIndexOf(this.simpleName)));
        CacheConfig existingCacheConfig = service.putCacheConfigIfAbsent(cacheConfig);
        if (existingCacheConfig != null) {
          cacheConfig = existingCacheConfig;
        } else {
          this.createOnAllMembersFuture = service.createCacheConfigOnAllMembersAsync(PreJoinCacheConfig.of(cacheConfig));
        } 
      } 
    } 
    this.response = cacheConfig;
    if (this.createOnAllMembersFuture != null)
      this.createOnAllMembersFuture.andThen(new Object(this)); 
  }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeUTF(this.simpleName);
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    this.simpleName = in.readUTF();
  }
  
  public boolean returnsResponse() { return (this.createOnAllMembersFuture == null); }
  
  public int getId() { return 27; }
  
  public int getFactoryId() { return CacheDataSerializerHook.F_ID; }
  
  public String getServiceName() { return "hz:impl:cacheService"; }
  
  public Object getResponse() { return this.response; }
}
