package com.hazelcast.cache.impl;

import com.hazelcast.cache.CacheStatistics;
import com.hazelcast.cache.impl.event.CacheWanEventPublisher;
import com.hazelcast.cache.impl.journal.CacheEventJournal;
import com.hazelcast.config.CacheConfig;
import com.hazelcast.config.InMemoryFormat;
import com.hazelcast.internal.eviction.ExpirationManager;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.EventFilter;
import com.hazelcast.spi.EventPublishingService;
import com.hazelcast.spi.FragmentedMigrationAwareService;
import com.hazelcast.spi.ManagedService;
import com.hazelcast.spi.NodeEngine;
import com.hazelcast.spi.RemoteService;
import java.util.Collection;

public interface ICacheService extends ManagedService, RemoteService, FragmentedMigrationAwareService, EventPublishingService<Object, CacheEventListener> {
  public static final String CACHE_SUPPORT_NOT_AVAILABLE_ERROR_MESSAGE = "There is no valid JCache API library at classpath. Please be sure that there is a JCache API library in your classpath and it is newer than `0.x` and `1.0.0-PFD` versions!";
  
  public static final String SERVICE_NAME = "hz:impl:cacheService";
  
  public static final int MAX_ADD_CACHE_CONFIG_RETRIES = 100;
  
  ICacheRecordStore getOrCreateRecordStore(String paramString, int paramInt);
  
  ICacheRecordStore getRecordStore(String paramString, int paramInt);
  
  CachePartitionSegment getSegment(int paramInt);
  
  CacheConfig putCacheConfigIfAbsent(CacheConfig paramCacheConfig);
  
  CacheConfig getCacheConfig(String paramString);
  
  CacheConfig findCacheConfig(String paramString);
  
  Collection<CacheConfig> getCacheConfigs();
  
  CacheConfig deleteCacheConfig(String paramString);
  
  CachePartitionSegment[] getPartitionSegments();
  
  CacheStatisticsImpl createCacheStatIfAbsent(String paramString);
  
  CacheContext getOrCreateCacheContext(String paramString);
  
  void deleteCache(String paramString1, String paramString2, boolean paramBoolean);
  
  void deleteCacheStat(String paramString);
  
  void setStatisticsEnabled(CacheConfig paramCacheConfig, String paramString, boolean paramBoolean);
  
  void setManagementEnabled(CacheConfig paramCacheConfig, String paramString, boolean paramBoolean);
  
  void publishEvent(CacheEventContext paramCacheEventContext);
  
  void publishEvent(String paramString, CacheEventSet paramCacheEventSet, int paramInt);
  
  NodeEngine getNodeEngine();
  
  String registerListener(String paramString, CacheEventListener paramCacheEventListener, boolean paramBoolean);
  
  String registerListener(String paramString, CacheEventListener paramCacheEventListener, EventFilter paramEventFilter, boolean paramBoolean);
  
  boolean deregisterListener(String paramString1, String paramString2);
  
  void deregisterAllListener(String paramString);
  
  CacheStatistics getStatistics(String paramString);
  
  ExpirationManager getExpirationManager();
  
  CacheOperationProvider getCacheOperationProvider(String paramString, InMemoryFormat paramInMemoryFormat);
  
  String addInvalidationListener(String paramString, CacheEventListener paramCacheEventListener, boolean paramBoolean);
  
  void sendInvalidationEvent(String paramString1, Data paramData, String paramString2);
  
  boolean isWanReplicationEnabled(String paramString);
  
  CacheWanEventPublisher getCacheWanEventPublisher();
  
  CacheEventJournal getEventJournal();
  
  <K, V> void createCacheConfigOnAllMembers(PreJoinCacheConfig<K, V> paramPreJoinCacheConfig);
  
  <K, V> void setTenantControl(CacheConfig<K, V> paramCacheConfig);
}
