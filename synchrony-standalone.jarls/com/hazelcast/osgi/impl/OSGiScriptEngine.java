package com.hazelcast.osgi.impl;

import java.io.Reader;
import javax.script.Bindings;
import javax.script.ScriptContext;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineFactory;
import javax.script.ScriptException;

class OSGiScriptEngine implements ScriptEngine {
  private ScriptEngine engine;
  
  private OSGiScriptEngineFactory factory;
  
  public OSGiScriptEngine(ScriptEngine engine, OSGiScriptEngineFactory factory) {
    this.engine = engine;
    this.factory = factory;
  }
  
  public Bindings createBindings() { return this.engine.createBindings(); }
  
  public Object eval(Reader reader, Bindings n) throws ScriptException { return this.engine.eval(reader, n); }
  
  public Object eval(Reader reader, ScriptContext context) throws ScriptException { return this.engine.eval(reader, context); }
  
  public Object eval(Reader reader) throws ScriptException { return this.engine.eval(reader); }
  
  public Object eval(String script, Bindings n) throws ScriptException { return this.engine.eval(script, n); }
  
  public Object eval(String script, ScriptContext context) throws ScriptException { return this.engine.eval(script, context); }
  
  public Object eval(String script) throws ScriptException { return this.engine.eval(script); }
  
  public Object get(String key) throws ScriptException { return this.engine.get(key); }
  
  public Bindings getBindings(int scope) { return this.engine.getBindings(scope); }
  
  public ScriptContext getContext() { return this.engine.getContext(); }
  
  public ScriptEngineFactory getFactory() { return this.factory; }
  
  public void put(String key, Object value) { this.engine.put(key, value); }
  
  public void setBindings(Bindings bindings, int scope) { this.engine.setBindings(bindings, scope); }
  
  public void setContext(ScriptContext context) { this.engine.setContext(context); }
}
