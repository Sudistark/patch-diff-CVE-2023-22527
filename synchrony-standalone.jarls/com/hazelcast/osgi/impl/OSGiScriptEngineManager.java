package com.hazelcast.osgi.impl;

import com.hazelcast.logging.ILogger;
import com.hazelcast.logging.Logger;
import com.hazelcast.nio.ClassLoaderUtil;
import com.hazelcast.nio.IOUtil;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import javax.script.Bindings;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineFactory;
import javax.script.ScriptEngineManager;
import javax.script.SimpleBindings;
import org.osgi.framework.Bundle;
import org.osgi.framework.BundleContext;

public class OSGiScriptEngineManager extends ScriptEngineManager {
  private static final String RHINO_SCRIPT_ENGINE_FACTORY = "com.sun.script.javascript.RhinoScriptEngineFactory";
  
  private static final String NASHORN_SCRIPT_ENGINE_FACTORY = "jdk.nashorn.api.scripting.NashornScriptEngineFactory";
  
  private final ILogger logger;
  
  private Bindings bindings;
  
  private List<ScriptEngineManagerInfo> scriptEngineManagerInfoList;
  
  private BundleContext context;
  
  public OSGiScriptEngineManager(BundleContext context) {
    this.logger = Logger.getLogger(getClass());
    this.context = context;
    this.bindings = new SimpleBindings();
    this.scriptEngineManagerInfoList = findManagers(context);
  }
  
  public void reloadManagers() { this.scriptEngineManagerInfoList = findManagers(this.context); }
  
  public Object get(String key) { return this.bindings.get(key); }
  
  public Bindings getBindings() { return this.bindings; }
  
  public void setBindings(Bindings bindings) {
    this.bindings = bindings;
    for (ScriptEngineManagerInfo info : this.scriptEngineManagerInfoList)
      ScriptEngineManagerInfo.access$000(info).setBindings(bindings); 
  }
  
  public ScriptEngine getEngineByExtension(String extension) {
    ScriptEngine engine = null;
    for (ScriptEngineManagerInfo info : this.scriptEngineManagerInfoList) {
      Thread currentThread = Thread.currentThread();
      ClassLoader old = currentThread.getContextClassLoader();
      currentThread.setContextClassLoader(ScriptEngineManagerInfo.access$100(info));
      engine = ScriptEngineManagerInfo.access$000(info).getEngineByExtension(extension);
      currentThread.setContextClassLoader(old);
      if (engine != null)
        break; 
    } 
    return engine;
  }
  
  public ScriptEngine getEngineByMimeType(String mimeType) {
    ScriptEngine engine = null;
    for (ScriptEngineManagerInfo info : this.scriptEngineManagerInfoList) {
      Thread currentThread = Thread.currentThread();
      ClassLoader old = currentThread.getContextClassLoader();
      currentThread.setContextClassLoader(ScriptEngineManagerInfo.access$100(info));
      engine = ScriptEngineManagerInfo.access$000(info).getEngineByMimeType(mimeType);
      currentThread.setContextClassLoader(old);
      if (engine != null)
        break; 
    } 
    return engine;
  }
  
  public ScriptEngine getEngineByName(String shortName) {
    for (ScriptEngineManagerInfo info : this.scriptEngineManagerInfoList) {
      Thread currentThread = Thread.currentThread();
      ClassLoader old = currentThread.getContextClassLoader();
      ClassLoader contextClassLoader = ScriptEngineManagerInfo.access$100(info);
      currentThread.setContextClassLoader(contextClassLoader);
      ScriptEngine engine = ScriptEngineManagerInfo.access$000(info).getEngineByName(shortName);
      currentThread.setContextClassLoader(old);
      if (engine != null) {
        OSGiScriptEngineFactory factory = new OSGiScriptEngineFactory(engine.getFactory(), contextClassLoader);
        return new OSGiScriptEngine(engine, factory);
      } 
    } 
    return null;
  }
  
  public List<ScriptEngineFactory> getEngineFactories() {
    List<ScriptEngineFactory> osgiFactories = new ArrayList<ScriptEngineFactory>();
    for (ScriptEngineManagerInfo info : this.scriptEngineManagerInfoList) {
      for (ScriptEngineFactory factory : ScriptEngineManagerInfo.access$000(info).getEngineFactories()) {
        OSGiScriptEngineFactory scriptEngineFactory = new OSGiScriptEngineFactory(factory, ScriptEngineManagerInfo.access$100(info));
        osgiFactories.add(scriptEngineFactory);
      } 
    } 
    return osgiFactories;
  }
  
  public void put(String key, Object value) { this.bindings.put(key, value); }
  
  public void registerEngineExtension(String extension, ScriptEngineFactory factory) {
    for (ScriptEngineManagerInfo info : this.scriptEngineManagerInfoList)
      ScriptEngineManagerInfo.access$000(info).registerEngineExtension(extension, factory); 
  }
  
  public void registerEngineMimeType(String type, ScriptEngineFactory factory) {
    for (ScriptEngineManagerInfo info : this.scriptEngineManagerInfoList)
      ScriptEngineManagerInfo.access$000(info).registerEngineMimeType(type, factory); 
  }
  
  public void registerEngineName(String name, ScriptEngineFactory factory) {
    for (ScriptEngineManagerInfo info : this.scriptEngineManagerInfoList)
      ScriptEngineManagerInfo.access$000(info).registerEngineName(name, factory); 
  }
  
  private List<ScriptEngineManagerInfo> findManagers(BundleContext context) {
    List<ScriptEngineManagerInfo> scriptEngineManagerInfos = new ArrayList<ScriptEngineManagerInfo>();
    try {
      for (String factoryName : findFactoryCandidates(context)) {
        ClassLoader factoryClassLoader = loadScriptEngineFactoryClassLoader(factoryName);
        if (factoryClassLoader == null)
          continue; 
        ScriptEngineManagerInfo scriptEngineManagerInfo = createScriptEngineManagerInfo(factoryName, factoryClassLoader);
        if (scriptEngineManagerInfo != null)
          scriptEngineManagerInfos.add(scriptEngineManagerInfo); 
      } 
      return scriptEngineManagerInfos;
    } catch (IOException ioe) {
      throw new RuntimeException(ioe);
    } 
  }
  
  private ClassLoader loadScriptEngineFactoryClassLoader(String factoryName) {
    try {
      return ClassLoaderUtil.tryLoadClass(factoryName).getClassLoader();
    } catch (ClassNotFoundException cnfe) {
      this.logger.warning("Found ScriptEngineFactory candidate for " + factoryName + ", but cannot load class! -> " + cnfe);
      if (this.logger.isFinestEnabled())
        this.logger.finest(cnfe); 
      return null;
    } 
  }
  
  private ScriptEngineManagerInfo createScriptEngineManagerInfo(String factoryName, ClassLoader factoryLoader) {
    try {
      ScriptEngineManager manager = new ScriptEngineManager(factoryLoader);
      manager.setBindings(this.bindings);
      return new ScriptEngineManagerInfo(manager, factoryLoader, null);
    } catch (Exception e) {
      this.logger.warning("Found ScriptEngineFactory candidate for " + factoryName + ", but could not load ScripEngineManager! -> " + e);
      if (this.logger.isFinestEnabled())
        this.logger.finest(e); 
      return null;
    } 
  }
  
  private List<String> findFactoryCandidates(BundleContext context) throws IOException {
    Bundle[] bundles = context.getBundles();
    List<String> factoryCandidates = new ArrayList<String>();
    for (Bundle bundle : bundles) {
      if (bundle != null)
        if (!"system.bundle".equals(bundle.getSymbolicName())) {
          Enumeration urls = bundle.findEntries("META-INF/services", "javax.script.ScriptEngineFactory", false);
          if (urls != null)
            while (urls.hasMoreElements()) {
              URL u = (URL)urls.nextElement();
              reader = null;
              try {
                reader = new BufferedReader(new InputStreamReader(u.openStream(), "UTF-8"));
                String line;
                while ((line = reader.readLine()) != null) {
                  line = line.trim();
                  if (!line.startsWith("#") && line.length() > 0)
                    factoryCandidates.add(line); 
                } 
              } finally {
                IOUtil.closeResource(reader);
              } 
            }  
        }  
    } 
    addJavaScriptEngine(factoryCandidates);
    return factoryCandidates;
  }
  
  private void addJavaScriptEngine(List<String> factoryCandidates) {
    factoryCandidates.add(OSGiScriptEngineFactory.class.getName());
    if (ClassLoaderUtil.isClassDefined("com.sun.script.javascript.RhinoScriptEngineFactory")) {
      factoryCandidates.add("com.sun.script.javascript.RhinoScriptEngineFactory");
    } else if (ClassLoaderUtil.isClassDefined("jdk.nashorn.api.scripting.NashornScriptEngineFactory")) {
      factoryCandidates.add("jdk.nashorn.api.scripting.NashornScriptEngineFactory");
    } else {
      this.logger.warning("No built-in JavaScript ScriptEngineFactory found.");
    } 
  }
  
  public String printScriptEngines() {
    StringBuilder msg = new StringBuilder("Available script engines are:\n");
    for (ScriptEngineFactory scriptEngineFactory : getEngineFactories())
      msg.append("\t- ").append(scriptEngineFactory.getEngineName()).append('\n'); 
    return msg.toString();
  }
}
