package com.hazelcast.kubernetes;

import com.hazelcast.config.InvalidConfigurationException;
import com.hazelcast.config.properties.PropertyDefinition;
import com.hazelcast.nio.IOUtil;
import com.hazelcast.util.StringUtil;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Map;

final class KubernetesConfig {
  private static final String DEFAULT_MASTER_URL = "https://kubernetes.default.svc";
  
  private static final int DEFAULT_SERVICE_DNS_TIMEOUT_SECONDS = 5;
  
  private static final int DEFAULT_KUBERNETES_API_RETRIES = 3;
  
  private final String serviceDns;
  
  private final int serviceDnsTimeout;
  
  private final String serviceName;
  
  private final String serviceLabelName;
  
  private final String serviceLabelValue;
  
  private final String namespace;
  
  private final String podLabelName;
  
  private final String podLabelValue;
  
  private final boolean resolveNotReadyAddresses;
  
  private final boolean useNodeNameAsExternalAddress;
  
  private final int kubernetesApiRetries;
  
  private final String kubernetesMasterUrl;
  
  private final String kubernetesApiToken;
  
  private final String kubernetesCaCertificate;
  
  private final int servicePort;
  
  KubernetesConfig(Map<String, Comparable> properties) {
    this.serviceDns = (String)getOrNull(properties, "hazelcast.kubernetes.", KubernetesProperties.SERVICE_DNS);
    this
      .serviceDnsTimeout = ((Integer)getOrDefault(properties, "hazelcast.kubernetes.", KubernetesProperties.SERVICE_DNS_TIMEOUT, Integer.valueOf(5))).intValue();
    this.serviceName = (String)getOrNull(properties, "hazelcast.kubernetes.", KubernetesProperties.SERVICE_NAME);
    this.serviceLabelName = (String)getOrNull(properties, "hazelcast.kubernetes.", KubernetesProperties.SERVICE_LABEL_NAME);
    this.serviceLabelValue = (String)getOrDefault(properties, "hazelcast.kubernetes.", KubernetesProperties.SERVICE_LABEL_VALUE, "true");
    this.namespace = (String)getOrDefault(properties, "hazelcast.kubernetes.", KubernetesProperties.NAMESPACE, getNamespaceOrDefault());
    this.podLabelName = (String)getOrNull(properties, "hazelcast.kubernetes.", KubernetesProperties.POD_LABEL_NAME);
    this.podLabelValue = (String)getOrNull(properties, "hazelcast.kubernetes.", KubernetesProperties.POD_LABEL_VALUE);
    this.resolveNotReadyAddresses = ((Boolean)getOrDefault(properties, "hazelcast.kubernetes.", KubernetesProperties.RESOLVE_NOT_READY_ADDRESSES, Boolean.valueOf(false))).booleanValue();
    this
      .useNodeNameAsExternalAddress = ((Boolean)getOrDefault(properties, "hazelcast.kubernetes.", KubernetesProperties.USE_NODE_NAME_AS_EXTERNAL_ADDRESS, Boolean.valueOf(false))).booleanValue();
    this
      .kubernetesApiRetries = ((Integer)getOrDefault(properties, "hazelcast.kubernetes.", KubernetesProperties.KUBERNETES_API_RETIRES, Integer.valueOf(3))).intValue();
    this.kubernetesMasterUrl = (String)getOrDefault(properties, "hazelcast.kubernetes.", KubernetesProperties.KUBERNETES_MASTER_URL, "https://kubernetes.default.svc");
    this.kubernetesApiToken = getApiToken(properties);
    this.kubernetesCaCertificate = caCertificate(properties);
    this.servicePort = ((Integer)getOrDefault(properties, "hazelcast.kubernetes.", KubernetesProperties.SERVICE_PORT, Integer.valueOf(0))).intValue();
    validateConfig();
  }
  
  private String getNamespaceOrDefault() {
    String namespace = System.getenv("KUBERNETES_NAMESPACE");
    if (namespace == null) {
      namespace = System.getenv("OPENSHIFT_BUILD_NAMESPACE");
      if (namespace == null)
        namespace = "default"; 
    } 
    return namespace;
  }
  
  private String getApiToken(Map<String, Comparable> properties) {
    String apiToken = (String)getOrNull(properties, "hazelcast.kubernetes.", KubernetesProperties.KUBERNETES_API_TOKEN);
    if (apiToken == null)
      apiToken = readAccountToken(); 
    return apiToken;
  }
  
  private String caCertificate(Map<String, Comparable> properties) {
    String caCertificate = (String)getOrNull(properties, "hazelcast.kubernetes.", KubernetesProperties.KUBERNETES_CA_CERTIFICATE);
    if (caCertificate == null)
      caCertificate = readCaCertificate(); 
    return caCertificate;
  }
  
  @SuppressFBWarnings({"DMI_HARDCODED_ABSOLUTE_FILENAME"})
  private static String readAccountToken() { return readFileContents("/var/run/secrets/kubernetes.io/serviceaccount/token"); }
  
  @SuppressFBWarnings({"DMI_HARDCODED_ABSOLUTE_FILENAME"})
  private static String readCaCertificate() { return readFileContents("/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"); }
  
  static String readFileContents(String tokenFile) {
    is = null;
    try {
      File file = new File(tokenFile);
      byte[] data = new byte[(int)file.length()];
      is = new FileInputStream(file);
      is.read(data);
      return new String(data, "UTF-8");
    } catch (IOException e) {
      throw new RuntimeException("Could not get token file", e);
    } finally {
      IOUtil.closeResource(is);
    } 
  }
  
  private <T extends Comparable> T getOrNull(Map<String, Comparable> properties, String prefix, PropertyDefinition property) { return (T)getOrDefault(properties, prefix, property, null); }
  
  private <T extends Comparable> T getOrDefault(Map<String, Comparable> properties, String prefix, PropertyDefinition property, T defaultValue) {
    if (property == null)
      return defaultValue; 
    Comparable value = readProperty(prefix, property);
    if (value == null)
      value = (Comparable)properties.get(property.key()); 
    if (value == null)
      return defaultValue; 
    return (T)value;
  }
  
  private Comparable readProperty(String prefix, PropertyDefinition property) {
    if (prefix != null) {
      String p = getProperty(prefix, property);
      String v = System.getProperty(p);
      if (StringUtil.isNullOrEmpty(v)) {
        v = System.getenv(p);
        if (StringUtil.isNullOrEmpty(v))
          v = System.getenv(cIdentifierLike(p)); 
      } 
      if (!StringUtil.isNullOrEmpty(v))
        return property.typeConverter().convert(v); 
    } 
    return null;
  }
  
  private String cIdentifierLike(String property) {
    property = property.toUpperCase();
    property = property.replace(".", "_");
    return property.replace("-", "_");
  }
  
  private String getProperty(String prefix, PropertyDefinition property) {
    StringBuilder sb = new StringBuilder(prefix);
    if (prefix.charAt(prefix.length() - 1) != '.')
      sb.append('.'); 
    return sb.append(property.key()).toString();
  }
  
  private void validateConfig() {
    if (!StringUtil.isNullOrEmptyAfterTrim(this.serviceDns) && (!StringUtil.isNullOrEmptyAfterTrim(this.serviceName) || 
      !StringUtil.isNullOrEmptyAfterTrim(this.serviceLabelName) || !StringUtil.isNullOrEmptyAfterTrim(this.podLabelName)))
      throw new InvalidConfigurationException(
          String.format("Properties '%s' and ('%s' or '%s' or %s) cannot be defined at the same time", new Object[] { KubernetesProperties.SERVICE_DNS.key(), KubernetesProperties.SERVICE_NAME.key(), KubernetesProperties.SERVICE_LABEL_NAME.key(), KubernetesProperties.POD_LABEL_NAME.key() })); 
    if (!StringUtil.isNullOrEmptyAfterTrim(this.serviceName) && !StringUtil.isNullOrEmptyAfterTrim(this.serviceLabelName))
      throw new InvalidConfigurationException(
          String.format("Properties '%s' and '%s' cannot be defined at the same time", new Object[] { KubernetesProperties.SERVICE_NAME.key(), KubernetesProperties.SERVICE_LABEL_NAME.key() })); 
    if (!StringUtil.isNullOrEmptyAfterTrim(this.serviceName) && !StringUtil.isNullOrEmptyAfterTrim(this.podLabelName))
      throw new InvalidConfigurationException(
          String.format("Properties '%s' and '%s' cannot be defined at the same time", new Object[] { KubernetesProperties.SERVICE_NAME.key(), KubernetesProperties.POD_LABEL_NAME.key() })); 
    if (!StringUtil.isNullOrEmptyAfterTrim(this.serviceLabelName) && !StringUtil.isNullOrEmptyAfterTrim(this.podLabelName))
      throw new InvalidConfigurationException(
          String.format("Properties '%s' and '%s' cannot be defined at the same time", new Object[] { KubernetesProperties.SERVICE_LABEL_NAME.key(), KubernetesProperties.POD_LABEL_NAME.key() })); 
    if (this.serviceDnsTimeout < 0)
      throw new InvalidConfigurationException(
          String.format("Property '%s' cannot be a negative number", new Object[] { KubernetesProperties.SERVICE_DNS_TIMEOUT.key() })); 
    if (this.kubernetesApiRetries < 0)
      throw new InvalidConfigurationException(
          String.format("Property '%s' cannot be a negative number", new Object[] { KubernetesProperties.KUBERNETES_API_RETIRES.key() })); 
    if (this.servicePort < 0)
      throw new InvalidConfigurationException(
          String.format("Property '%s' cannot be a negative number", new Object[] { KubernetesProperties.SERVICE_PORT.key() })); 
  }
  
  DiscoveryMode getMode() {
    if (!StringUtil.isNullOrEmptyAfterTrim(this.serviceDns))
      return DiscoveryMode.DNS_LOOKUP; 
    return DiscoveryMode.KUBERNETES_API;
  }
  
  String getServiceDns() { return this.serviceDns; }
  
  int getServiceDnsTimeout() { return this.serviceDnsTimeout; }
  
  String getServiceName() { return this.serviceName; }
  
  String getServiceLabelName() { return this.serviceLabelName; }
  
  String getServiceLabelValue() { return this.serviceLabelValue; }
  
  String getNamespace() { return this.namespace; }
  
  public String getPodLabelName() { return this.podLabelName; }
  
  public String getPodLabelValue() { return this.podLabelValue; }
  
  boolean isResolveNotReadyAddresses() { return this.resolveNotReadyAddresses; }
  
  boolean isUseNodeNameAsExternalAddress() { return this.useNodeNameAsExternalAddress; }
  
  int getKubernetesApiRetries() { return this.kubernetesApiRetries; }
  
  String getKubernetesMasterUrl() { return this.kubernetesMasterUrl; }
  
  String getKubernetesApiToken() { return this.kubernetesApiToken; }
  
  String getKubernetesCaCertificate() { return this.kubernetesCaCertificate; }
  
  int getServicePort() { return this.servicePort; }
  
  public String toString() { return "Kubernetes Discovery properties: { service-dns: " + this.serviceDns + ", service-dns-timeout: " + this.serviceDnsTimeout + ", service-name: " + this.serviceName + ", service-port: " + this.servicePort + ", service-label: " + this.serviceLabelName + ", service-label-value: " + this.serviceLabelValue + ", namespace: " + this.namespace + ", pod-label: " + this.podLabelName + ", pod-label-value: " + this.podLabelValue + ", resolve-not-ready-addresses: " + this.resolveNotReadyAddresses + ", use-node-name-as-external-address: " + this.useNodeNameAsExternalAddress + ", kubernetes-api-retries: " + this.kubernetesApiRetries + ", kubernetes-master: " + this.kubernetesMasterUrl + "}"; }
}
