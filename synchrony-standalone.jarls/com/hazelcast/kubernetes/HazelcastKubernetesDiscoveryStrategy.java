package com.hazelcast.kubernetes;

import com.hazelcast.logging.ILogger;
import com.hazelcast.spi.discovery.AbstractDiscoveryStrategy;
import com.hazelcast.spi.discovery.DiscoveryNode;
import java.net.InetAddress;
import java.util.HashMap;
import java.util.Map;

final class HazelcastKubernetesDiscoveryStrategy extends AbstractDiscoveryStrategy {
  private final KubernetesClient client;
  
  private final EndpointResolver endpointResolver;
  
  private KubernetesConfig config;
  
  private final Map<String, Object> memberMetadata = new HashMap();
  
  HazelcastKubernetesDiscoveryStrategy(ILogger logger, Map<String, Comparable> properties) {
    super(logger, properties);
    this.config = new KubernetesConfig(properties);
    logger.info(this.config.toString());
    this.client = buildKubernetesClient(this.config);
    if (KubernetesConfig.DiscoveryMode.DNS_LOOKUP.equals(this.config.getMode())) {
      this
        .endpointResolver = new DnsEndpointResolver(logger, this.config.getServiceDns(), this.config.getServicePort(), this.config.getServiceDnsTimeout());
    } else {
      this

        
        .endpointResolver = new KubernetesApiEndpointResolver(logger, this.config.getServiceName(), this.config.getServicePort(), this.config.getServiceLabelName(), this.config.getServiceLabelValue(), this.config.getPodLabelName(), this.config.getPodLabelValue(), Boolean.valueOf(this.config.isResolveNotReadyAddresses()), this.client);
    } 
    logger.info("Kubernetes Discovery activated with mode: " + this.config.getMode().name());
  }
  
  private static KubernetesClient buildKubernetesClient(KubernetesConfig config) {
    return new KubernetesClient(config.getNamespace(), config.getKubernetesMasterUrl(), config.getKubernetesApiToken(), config
        .getKubernetesCaCertificate(), config.getKubernetesApiRetries(), config.isUseNodeNameAsExternalAddress());
  }
  
  public void start() { this.endpointResolver.start(); }
  
  public Map<String, Object> discoverLocalMetadata() {
    if (this.memberMetadata.isEmpty()) {
      this.memberMetadata.put("hazelcast.partition.group.zone", discoverZone());
      this.memberMetadata.put("hazelcast.partition.group.node", discoverNodeName());
    } 
    return this.memberMetadata;
  }
  
  private String discoverZone() {
    if (KubernetesConfig.DiscoveryMode.KUBERNETES_API.equals(this.config.getMode())) {
      try {
        String zone = this.client.zone(podName());
        if (zone != null) {
          getLogger().info(String.format("Kubernetes plugin discovered availability zone: %s", new Object[] { zone }));
          return zone;
        } 
      } catch (Exception e) {
        getLogger().finest(e);
      } 
      getLogger().warning("Cannot fetch the current zone, ZONE_AWARE feature is disabled");
    } 
    return "unknown";
  }
  
  private String discoverNodeName() {
    if (KubernetesConfig.DiscoveryMode.KUBERNETES_API.equals(this.config.getMode())) {
      try {
        String nodeName = this.client.nodeName(podName());
        if (nodeName != null) {
          getLogger().info(String.format("Kubernetes plugin discovered node name: %s", new Object[] { nodeName }));
          return nodeName;
        } 
      } catch (Exception e) {
        getLogger().finest(e);
      } 
      getLogger().warning("Cannot fetch name of the node, NODE_AWARE feature is disabled");
    } 
    return "unknown";
  }
  
  private String podName() {
    String podName = System.getenv("POD_NAME");
    if (podName == null)
      podName = System.getenv("HOSTNAME"); 
    if (podName == null)
      podName = InetAddress.getLocalHost().getHostName(); 
    return podName;
  }
  
  public Iterable<DiscoveryNode> discoverNodes() { return this.endpointResolver.resolve(); }
  
  public void destroy() { this.endpointResolver.destroy(); }
}
