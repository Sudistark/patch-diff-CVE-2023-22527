package com.hazelcast.multimap.impl.txn;

import com.hazelcast.multimap.impl.operations.AbstractKeyBasedMultiMapOperation;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.BackupOperation;
import com.hazelcast.spi.Operation;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class TxnCommitBackupOperation extends AbstractKeyBasedMultiMapOperation implements BackupOperation {
  private List<Operation> opList;
  
  private String caller;
  
  public TxnCommitBackupOperation() {}
  
  public TxnCommitBackupOperation(String name, Data dataKey, List<Operation> opList, String caller, long threadId) {
    super(name, dataKey);
    this.opList = opList;
    this.caller = caller;
    this.threadId = threadId;
  }
  
  public void run() {
    for (Operation op : this.opList) {
      op.setNodeEngine(getNodeEngine()).setServiceName(getServiceName()).setPartitionId(getPartitionId());
      op.beforeRun();
      op.run();
      op.afterRun();
    } 
    getOrCreateContainerWithoutAccess().forceUnlock(this.dataKey);
  }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeInt(this.opList.size());
    for (Operation op : this.opList)
      out.writeObject(op); 
    out.writeUTF(this.caller);
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    int size = in.readInt();
    this.opList = new ArrayList(size);
    for (int i = 0; i < size; i++)
      this.opList.add((Operation)in.readObject()); 
    this.caller = in.readUTF();
  }
  
  public int getId() { return 27; }
}
