package com.hazelcast.multimap.impl.operations;

import com.hazelcast.config.MultiMapConfig;
import com.hazelcast.core.EntryEventType;
import com.hazelcast.multimap.impl.MultiMapContainer;
import com.hazelcast.multimap.impl.MultiMapRecord;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.Operation;
import com.hazelcast.spi.impl.MutatingOperation;
import java.util.Collection;

public class RemoveAllOperation extends AbstractBackupAwareMultiMapOperation implements MutatingOperation {
  private Collection<MultiMapRecord> coll;
  
  public RemoveAllOperation() {}
  
  public RemoveAllOperation(String name, Data dataKey, long threadId) { super(name, dataKey, threadId); }
  
  public void run() {
    MultiMapContainer container = getOrCreateContainer();
    this.coll = container.remove(this.dataKey, executedLocally());
    this.response = new MultiMapResponse(this.coll, getValueCollectionType(container));
  }
  
  public void afterRun() {
    if (this.coll != null) {
      getOrCreateContainer().update();
      for (MultiMapRecord record : this.coll)
        publishEvent(EntryEventType.REMOVED, this.dataKey, null, record.getObject()); 
    } 
  }
  
  public boolean shouldBackup() { return (this.coll != null); }
  
  public Operation getBackupOperation() { return new RemoveAllBackupOperation(this.name, this.dataKey); }
  
  public void onWaitExpire() {
    MultiMapContainer container = getOrCreateContainer();
    MultiMapConfig.ValueCollectionType valueCollectionType = getValueCollectionType(container);
    sendResponse(new MultiMapResponse(null, valueCollectionType));
  }
  
  public int getId() { return 18; }
}
