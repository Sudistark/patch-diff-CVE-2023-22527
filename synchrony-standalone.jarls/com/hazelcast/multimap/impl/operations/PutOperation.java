package com.hazelcast.multimap.impl.operations;

import com.hazelcast.core.EntryEventType;
import com.hazelcast.multimap.impl.MultiMapContainer;
import com.hazelcast.multimap.impl.MultiMapRecord;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.Operation;
import com.hazelcast.spi.impl.MutatingOperation;
import java.io.IOException;
import java.util.Collection;
import java.util.List;

public class PutOperation extends AbstractBackupAwareMultiMapOperation implements MutatingOperation {
  private Data value;
  
  private int index = -1;
  
  private long recordId;
  
  public PutOperation() {}
  
  public PutOperation(String name, Data dataKey, long threadId, Data value, int index) {
    super(name, dataKey, threadId);
    this.value = value;
    this.index = index;
  }
  
  public void run() {
    MultiMapContainer container = getOrCreateContainer();
    this.recordId = container.nextId();
    MultiMapRecord record = new MultiMapRecord(this.recordId, isBinary() ? this.value : toObject(this.value));
    Collection<MultiMapRecord> coll = container.getOrCreateMultiMapValue(this.dataKey).getCollection(false);
    if (this.index == -1) {
      this.response = Boolean.valueOf(coll.add(record));
    } else {
      try {
        ((List)coll).add(this.index, record);
        this.response = Boolean.valueOf(true);
      } catch (IndexOutOfBoundsException e) {
        this.response = e;
      } 
    } 
  }
  
  public void afterRun() {
    if (Boolean.TRUE.equals(this.response)) {
      getOrCreateContainer().update();
      publishEvent(EntryEventType.ADDED, this.dataKey, this.value, null);
    } 
  }
  
  public Operation getBackupOperation() { return new PutBackupOperation(this.name, this.dataKey, this.value, this.recordId, this.index); }
  
  public boolean shouldBackup() { return Boolean.TRUE.equals(this.response); }
  
  public void onWaitExpire() { sendResponse(Boolean.valueOf(false)); }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeInt(this.index);
    out.writeData(this.value);
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    this.index = in.readInt();
    this.value = in.readData();
  }
  
  public int getId() { return 16; }
}
