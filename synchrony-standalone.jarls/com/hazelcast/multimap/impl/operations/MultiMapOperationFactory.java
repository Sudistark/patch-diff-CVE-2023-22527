package com.hazelcast.multimap.impl.operations;

import com.hazelcast.multimap.impl.MultiMapDataSerializerHook;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.Operation;
import com.hazelcast.spi.OperationFactory;
import java.io.IOException;

public class MultiMapOperationFactory implements OperationFactory {
  private String name;
  
  private OperationFactoryType operationFactoryType;
  
  private Data key;
  
  private Data value;
  
  private long threadId;
  
  public MultiMapOperationFactory() {}
  
  public MultiMapOperationFactory(String name, OperationFactoryType operationFactoryType) {
    this.name = name;
    this.operationFactoryType = operationFactoryType;
  }
  
  public MultiMapOperationFactory(String name, OperationFactoryType operationFactoryType, Data key, Data value) {
    this(name, operationFactoryType);
    this.key = key;
    this.value = value;
  }
  
  public MultiMapOperationFactory(String name, OperationFactoryType operationFactoryType, Data key, Data value, long threadId) {
    this(name, operationFactoryType);
    this.key = key;
    this.value = value;
    this.threadId = threadId;
  }
  
  public Operation createOperation() {
    switch (null.$SwitchMap$com$hazelcast$multimap$impl$operations$MultiMapOperationFactory$OperationFactoryType[this.operationFactoryType.ordinal()]) {
      case 1:
        return new KeySetOperation(this.name);
      case 2:
        return new ValuesOperation(this.name);
      case 3:
        return new EntrySetOperation(this.name);
      case 4:
        return new ContainsEntryOperation(this.name, this.key, this.value, this.threadId);
      case 5:
        return new SizeOperation(this.name);
      case 6:
        return new ClearOperation(this.name);
    } 
    return null;
  }
  
  public void writeData(ObjectDataOutput out) throws IOException {
    out.writeUTF(this.name);
    out.writeInt(this.operationFactoryType.type);
    out.writeLong(this.threadId);
    out.writeData(this.key);
    out.writeData(this.value);
  }
  
  public void readData(ObjectDataInput in) throws IOException {
    this.name = in.readUTF();
    this.operationFactoryType = OperationFactoryType.getByType(in.readInt());
    this.threadId = in.readLong();
    this.key = in.readData();
    this.value = in.readData();
  }
  
  public int getFactoryId() { return MultiMapDataSerializerHook.F_ID; }
  
  public int getId() { return 41; }
}
