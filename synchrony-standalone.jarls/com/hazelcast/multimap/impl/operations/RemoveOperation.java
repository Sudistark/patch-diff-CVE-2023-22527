package com.hazelcast.multimap.impl.operations;

import com.hazelcast.core.EntryEventType;
import com.hazelcast.internal.cluster.Versions;
import com.hazelcast.multimap.impl.MultiMapContainer;
import com.hazelcast.multimap.impl.MultiMapRecord;
import com.hazelcast.multimap.impl.MultiMapValue;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.Operation;
import com.hazelcast.spi.impl.MutatingOperation;
import java.io.IOException;
import java.util.Collection;
import java.util.Iterator;

public class RemoveOperation extends AbstractBackupAwareMultiMapOperation implements MutatingOperation {
  private Data value;
  
  private long recordId;
  
  public RemoveOperation() {}
  
  public RemoveOperation(String name, Data dataKey, long threadId, Data value) {
    super(name, dataKey, threadId);
    this.value = value;
  }
  
  public void run() {
    this.response = Boolean.valueOf(false);
    MultiMapContainer container = getOrCreateContainer();
    MultiMapValue multiMapValue = container.getMultiMapValueOrNull(this.dataKey);
    if (multiMapValue == null)
      return; 
    Collection<MultiMapRecord> coll = multiMapValue.getCollection(false);
    MultiMapRecord record = new MultiMapRecord(isBinary() ? this.value : toObject(this.value));
    if (getNodeEngine().getClusterService().getClusterVersion().isGreaterOrEqual(Versions.V3_12)) {
      this.response = Boolean.valueOf(coll.remove(record));
    } else {
      Iterator<MultiMapRecord> iterator = coll.iterator();
      while (iterator.hasNext()) {
        MultiMapRecord r = (MultiMapRecord)iterator.next();
        if (r.equals(record)) {
          iterator.remove();
          this.recordId = r.getRecordId();
          this.response = Boolean.valueOf(true);
          break;
        } 
      } 
    } 
    if (coll.isEmpty())
      container.delete(this.dataKey); 
  }
  
  public void afterRun() {
    if (Boolean.TRUE.equals(this.response)) {
      getOrCreateContainer().update();
      publishEvent(EntryEventType.REMOVED, this.dataKey, null, this.value);
    } 
  }
  
  public boolean shouldBackup() { return Boolean.TRUE.equals(this.response); }
  
  public Operation getBackupOperation() { return new RemoveBackupOperation(this.name, this.dataKey, this.recordId, this.value); }
  
  public void onWaitExpire() { sendResponse(Boolean.valueOf(false)); }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeData(this.value);
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    this.value = in.readData();
  }
  
  public int getId() { return 20; }
}
