package com.hazelcast.multimap.impl.operations;

import com.hazelcast.concurrent.lock.LockWaitNotifyKey;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.BackupAwareOperation;
import com.hazelcast.spi.BlockingOperation;
import com.hazelcast.spi.DistributedObjectNamespace;
import com.hazelcast.spi.WaitNotifyKey;
import java.io.IOException;

public abstract class AbstractBackupAwareMultiMapOperation extends AbstractKeyBasedMultiMapOperation implements BackupAwareOperation, BlockingOperation {
  protected AbstractBackupAwareMultiMapOperation() {}
  
  protected AbstractBackupAwareMultiMapOperation(String name, Data dataKey, long threadId) { super(name, dataKey, threadId); }
  
  public boolean shouldBackup() { return (this.response != null); }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException { super.writeInternal(out); }
  
  protected void readInternal(ObjectDataInput in) throws IOException { super.readInternal(in); }
  
  public WaitNotifyKey getWaitKey() { return new LockWaitNotifyKey(new DistributedObjectNamespace("hz:impl:multiMapService", this.name), this.dataKey); }
  
  public boolean shouldWait() { return !getOrCreateContainer().canAcquireLock(this.dataKey, getCallerUuid(), this.threadId); }
  
  public void onWaitExpire() { sendResponse(null); }
}
