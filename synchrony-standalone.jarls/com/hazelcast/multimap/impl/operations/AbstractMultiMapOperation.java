package com.hazelcast.multimap.impl.operations;

import com.hazelcast.config.MultiMapConfig;
import com.hazelcast.core.EntryEventType;
import com.hazelcast.multimap.impl.MultiMapContainer;
import com.hazelcast.multimap.impl.MultiMapDataSerializerHook;
import com.hazelcast.multimap.impl.MultiMapService;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import com.hazelcast.spi.NamedOperation;
import com.hazelcast.spi.ObjectNamespace;
import com.hazelcast.spi.Operation;
import com.hazelcast.spi.PartitionAwareOperation;
import com.hazelcast.spi.ServiceNamespace;
import com.hazelcast.spi.ServiceNamespaceAware;
import com.hazelcast.util.Preconditions;
import java.io.IOException;

public abstract class AbstractMultiMapOperation extends Operation implements NamedOperation, PartitionAwareOperation, ServiceNamespaceAware, IdentifiedDataSerializable {
  protected String name;
  
  protected Object response;
  
  private MultiMapContainer container;
  
  protected AbstractMultiMapOperation() {}
  
  protected AbstractMultiMapOperation(String name) { this.name = name; }
  
  public final Object getResponse() { return this.response; }
  
  public final String getServiceName() { return "hz:impl:multiMapService"; }
  
  public String getName() { return this.name; }
  
  public final void publishEvent(EntryEventType eventType, Data key, Object newValue, Object oldValue) {
    MultiMapService multiMapService = (MultiMapService)getService();
    multiMapService.publishEntryEvent(this.name, eventType, key, newValue, oldValue);
  }
  
  public final Object toObject(Object obj) { return getNodeEngine().toObject(obj); }
  
  public final Data toData(Object obj) { return getNodeEngine().toData(obj); }
  
  public final MultiMapContainer getOrCreateContainer() {
    if (this.container == null) {
      MultiMapService service = (MultiMapService)getService();
      this.container = service.getOrCreateCollectionContainer(getPartitionId(), this.name);
    } 
    return this.container;
  }
  
  public final MultiMapContainer getOrCreateContainerWithoutAccess() {
    if (this.container == null) {
      MultiMapService service = (MultiMapService)getService();
      this.container = service.getOrCreateCollectionContainerWithoutAccess(getPartitionId(), this.name);
    } 
    return this.container;
  }
  
  public final MultiMapConfig.ValueCollectionType getValueCollectionType(MultiMapContainer container) {
    Preconditions.checkNotNull(container, "Argument container should not be null");
    MultiMapConfig config = container.getConfig();
    return config.getValueCollectionType();
  }
  
  public final boolean isBinary() { return getOrCreateContainer().getConfig().isBinary(); }
  
  public final int getSyncBackupCount() { return getOrCreateContainer().getConfig().getBackupCount(); }
  
  public final int getAsyncBackupCount() { return getOrCreateContainer().getConfig().getAsyncBackupCount(); }
  
  public ObjectNamespace getServiceNamespace() {
    MultiMapContainer container = getOrCreateContainerWithoutAccess();
    return container.getObjectNamespace();
  }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException { out.writeUTF(this.name); }
  
  protected void readInternal(ObjectDataInput in) throws IOException { this.name = in.readUTF(); }
  
  public int getFactoryId() { return MultiMapDataSerializerHook.F_ID; }
  
  protected void toString(StringBuilder sb) {
    super.toString(sb);
    sb.append(", name=").append(this.name);
  }
}
