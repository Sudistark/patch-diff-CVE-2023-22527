package com.hazelcast.partition.membergroup;

import com.hazelcast.config.MemberGroupConfig;
import com.hazelcast.core.Member;
import com.hazelcast.instance.MemberImpl;
import com.hazelcast.util.AddressUtil;
import com.hazelcast.util.MapUtil;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

public class ConfigMemberGroupFactory extends BackupSafeMemberGroupFactory implements MemberGroupFactory {
  private final Map<Integer, MemberGroupConfig> memberGroupConfigMap;
  
  public ConfigMemberGroupFactory(Collection<MemberGroupConfig> memberGroupConfigs) {
    this.memberGroupConfigMap = MapUtil.createLinkedHashMap(memberGroupConfigs.size());
    int key = 0;
    for (MemberGroupConfig groupConfig : memberGroupConfigs)
      this.memberGroupConfigMap.put(Integer.valueOf(key++), groupConfig); 
  }
  
  protected Set<MemberGroup> createInternalMemberGroups(Collection<? extends Member> members) {
    Map<Integer, MemberGroup> memberGroups = new HashMap<Integer, MemberGroup>();
    for (Member member : members) {
      String host = ((MemberImpl)member).getAddress().getHost();
      label19: for (Map.Entry<Integer, MemberGroupConfig> entry : this.memberGroupConfigMap.entrySet()) {
        boolean match;
        Collection<String> interfaces = ((MemberGroupConfig)entry.getValue()).getInterfaces();
        if (AddressUtil.isIpAddress(host)) {
          match = AddressUtil.matchAnyInterface(host, interfaces);
        } else {
          match = AddressUtil.matchAnyDomain(host, interfaces);
        } 
        if (match) {
          MemberGroup group = (MemberGroup)memberGroups.get(entry.getKey());
          if (group == null) {
            DefaultMemberGroup defaultMemberGroup = new DefaultMemberGroup();
            memberGroups.put(entry.getKey(), defaultMemberGroup);
            defaultMemberGroup.addMember(member);
            continue;
          } 
          break label19;
        } 
      } 
    } 
    return new HashSet(memberGroups.values());
  }
}
