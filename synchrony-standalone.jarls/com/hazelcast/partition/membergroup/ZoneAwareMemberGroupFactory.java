package com.hazelcast.partition.membergroup;

import com.hazelcast.core.Member;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

public class ZoneAwareMemberGroupFactory extends BackupSafeMemberGroupFactory implements MemberGroupFactory {
  protected Set<MemberGroup> createInternalMemberGroups(Collection<? extends Member> allMembers) {
    Map<String, MemberGroup> groups = new HashMap<String, MemberGroup>();
    for (Member member : allMembers) {
      String zoneInfo = member.getStringAttribute("hazelcast.partition.group.zone");
      String rackInfo = member.getStringAttribute("hazelcast.partition.group.rack");
      String hostInfo = member.getStringAttribute("hazelcast.partition.group.host");
      if (zoneInfo == null && rackInfo == null && hostInfo == null)
        throw new IllegalArgumentException("Not enough metadata information is provided. At least one of availability zone, rack or host information must be provided with ZONE_AWARE partition group."); 
      if (zoneInfo != null) {
        DefaultMemberGroup defaultMemberGroup = (MemberGroup)groups.get(zoneInfo);
        if (defaultMemberGroup == null) {
          defaultMemberGroup = new DefaultMemberGroup();
          groups.put(zoneInfo, defaultMemberGroup);
        } 
        defaultMemberGroup.addMember(member);
        continue;
      } 
      if (rackInfo != null) {
        DefaultMemberGroup defaultMemberGroup = (MemberGroup)groups.get(rackInfo);
        if (defaultMemberGroup == null) {
          defaultMemberGroup = new DefaultMemberGroup();
          groups.put(rackInfo, defaultMemberGroup);
        } 
        defaultMemberGroup.addMember(member);
        continue;
      } 
      if (hostInfo != null) {
        DefaultMemberGroup defaultMemberGroup = (MemberGroup)groups.get(hostInfo);
        if (defaultMemberGroup == null) {
          defaultMemberGroup = new DefaultMemberGroup();
          groups.put(hostInfo, defaultMemberGroup);
        } 
        defaultMemberGroup.addMember(member);
      } 
    } 
    return new HashSet(groups.values());
  }
}
