package com.hazelcast.query.impl;

import com.hazelcast.core.TypeConverter;
import com.hazelcast.internal.json.Json;
import com.hazelcast.internal.serialization.InternalSerializationService;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.query.Metadata;
import com.hazelcast.query.QueryConstants;
import com.hazelcast.query.QueryException;
import com.hazelcast.query.impl.getters.Extractors;
import com.hazelcast.query.impl.getters.MultiResult;
import com.hazelcast.query.impl.getters.ReflectionHelper;
import java.util.Map;

public abstract class QueryableEntry<K, V> extends Object implements Extractable, Map.Entry<K, V> {
  protected InternalSerializationService serializationService;
  
  protected Extractors extractors;
  
  private Metadata metadata;
  
  public Metadata getMetadata() { return this.metadata; }
  
  public void setMetadata(Metadata metadata) { this.metadata = metadata; }
  
  public Object getAttributeValue(String attributeName) throws QueryException { return extractAttributeValue(attributeName); }
  
  public abstract V getValue();
  
  public abstract K getKey();
  
  public abstract Data getKeyData();
  
  public abstract Data getValueData();
  
  protected abstract Object getTargetObject(boolean paramBoolean);
  
  TypeConverter getConverter(String attributeName) {
    Object attributeValue = getAttributeValue(attributeName);
    if (attributeValue == null)
      return TypeConverters.NULL_CONVERTER; 
    if (attributeValue instanceof MultiResult) {
      MultiResult multiResult = (MultiResult)attributeValue;
      for (Object result : multiResult.getResults()) {
        if (result != null) {
          AttributeType attributeType = extractAttributeType(result);
          return (attributeType == null) ? TypeConverters.IDENTITY_CONVERTER : attributeType.getConverter();
        } 
      } 
      return TypeConverters.NULL_CONVERTER;
    } 
    AttributeType attributeType = extractAttributeType(attributeValue);
    return (attributeType == null) ? TypeConverters.IDENTITY_CONVERTER : attributeType.getConverter();
  }
  
  private Object extractAttributeValue(String attributeName) throws QueryException {
    Object result = extractAttributeValueIfAttributeQueryConstant(attributeName);
    if (result == null) {
      boolean isKey = startsWithKeyConstant(attributeName);
      attributeName = getAttributeName(isKey, attributeName);
      Object target = getTargetObject(isKey);
      Object metadata = getMetadataOrNull(this.metadata, isKey);
      result = extractAttributeValueFromTargetObject(this.extractors, attributeName, target, metadata);
    } 
    if (result instanceof com.hazelcast.core.HazelcastJsonValue)
      return Json.parse(result.toString()); 
    return result;
  }
  
  private Object extractAttributeValueIfAttributeQueryConstant(String attributeName) throws QueryException {
    if (QueryConstants.KEY_ATTRIBUTE_NAME.value().equals(attributeName))
      return getKey(); 
    if (QueryConstants.THIS_ATTRIBUTE_NAME.value().equals(attributeName))
      return getValue(); 
    return null;
  }
  
  static Object extractAttributeValue(Extractors extractors, InternalSerializationService serializationService, String attributeName, Data key, Object value, Object metadata) throws QueryException {
    Object result = extractAttributeValueIfAttributeQueryConstant(serializationService, attributeName, key, value);
    if (result == null) {
      boolean isKey = startsWithKeyConstant(attributeName);
      attributeName = getAttributeName(isKey, attributeName);
      Object target = isKey ? key : value;
      result = extractAttributeValueFromTargetObject(extractors, attributeName, target, metadata);
    } 
    return result;
  }
  
  private static Object extractAttributeValueIfAttributeQueryConstant(InternalSerializationService serializationService, String attributeName, Data key, Object value) {
    if (QueryConstants.KEY_ATTRIBUTE_NAME.value().equals(attributeName))
      return serializationService.toObject(key); 
    if (QueryConstants.THIS_ATTRIBUTE_NAME.value().equals(attributeName))
      return (value instanceof Data) ? serializationService.toObject(value) : value; 
    return null;
  }
  
  private static boolean startsWithKeyConstant(String attributeName) { return attributeName.startsWith(QueryConstants.KEY_ATTRIBUTE_NAME.value()); }
  
  private static String getAttributeName(boolean isKey, String attributeName) {
    if (isKey)
      return attributeName.substring(QueryConstants.KEY_ATTRIBUTE_NAME.value().length() + 1); 
    return attributeName;
  }
  
  private static Object extractAttributeValueFromTargetObject(Extractors extractors, String attributeName, Object target, Object metadata) { return extractors.extract(target, attributeName, metadata); }
  
  public static AttributeType extractAttributeType(Object attributeValue) {
    if (attributeValue instanceof com.hazelcast.nio.serialization.Portable)
      return AttributeType.PORTABLE; 
    return ReflectionHelper.getAttributeType(attributeValue.getClass());
  }
  
  private static Object getMetadataOrNull(Metadata metadata, boolean isKey) {
    if (metadata == null)
      return null; 
    return isKey ? metadata.getKeyMetadata() : metadata.getValueMetadata();
  }
}
