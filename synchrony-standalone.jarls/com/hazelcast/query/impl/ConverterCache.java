package com.hazelcast.query.impl;

import com.hazelcast.core.TypeConverter;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

public final class ConverterCache {
  private static final int FULLY_UNRESOLVED = -1;
  
  private final Indexes indexes;
  
  private final Map<String, TypeConverter> cache;
  
  public ConverterCache(Indexes indexes) {
    this.cache = new ConcurrentHashMap();
    this.indexes = indexes;
  }
  
  public TypeConverter get(String attribute) {
    TypeConverter cached = (TypeConverter)this.cache.get(attribute);
    if (cached == null || cached instanceof UnresolvedConverter)
      cached = tryResolve(attribute, (UnresolvedConverter)cached); 
    return cached;
  }
  
  public void invalidate(InternalIndex index) {
    String[] components = index.getComponents();
    if (components.length == 1) {
      this.cache.remove(components[0]);
      return;
    } 
    for (String component : components) {
      TypeConverter converter = (TypeConverter)this.cache.get(component);
      if (converter instanceof UnresolvedConverter)
        this.cache.remove(component); 
    } 
  }
  
  public void clear() { this.cache.clear(); }
  
  private TypeConverter tryResolve(String attribute, UnresolvedConverter unresolved) {
    InternalIndex[] indexesSnapshot = this.indexes.getIndexes();
    if (indexesSnapshot.length == 0)
      return null; 
    if (unresolved != null) {
      TypeConverter converter = unresolved.tryResolve();
      if (converter == null)
        return null; 
      this.cache.put(attribute, converter);
      return converter;
    } 
    InternalIndex nonCompositeIndex = this.indexes.matchIndex(attribute, QueryContext.IndexMatchHint.NONE, -1);
    if (nonCompositeIndex != null) {
      TypeConverter converter = nonCompositeIndex.getConverter();
      if (isNull(converter)) {
        this.cache.put(attribute, new UnresolvedConverter(nonCompositeIndex, -1));
        return null;
      } 
      this.cache.put(attribute, converter);
      return converter;
    } 
    for (InternalIndex index : indexesSnapshot) {
      String[] components = index.getComponents();
      if (components.length != 1)
        for (int i = 0; i < components.length; ) {
          String component = components[i];
          if (!component.equals(attribute)) {
            i++;
            continue;
          } 
          CompositeConverter compositeConverter = (CompositeConverter)index.getConverter();
          if (compositeConverter == null) {
            this.cache.put(attribute, new UnresolvedConverter(index, i));
            return null;
          } 
          TypeConverter converter = compositeConverter.getComponentConverter(i);
          if (converter == TypeConverters.NULL_CONVERTER) {
            this.cache.put(attribute, new UnresolvedConverter(index, i));
            return null;
          } 
          this.cache.put(attribute, converter);
          return converter;
        }  
    } 
    this.cache.put(attribute, new UnresolvedConverter(null, -1));
    return null;
  }
  
  private static boolean isNull(TypeConverter converter) { return (converter == null || converter == TypeConverters.NULL_CONVERTER); }
}
