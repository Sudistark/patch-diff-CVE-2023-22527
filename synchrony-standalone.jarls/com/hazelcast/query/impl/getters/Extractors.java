package com.hazelcast.query.impl.getters;

import com.hazelcast.config.MapAttributeConfig;
import com.hazelcast.internal.serialization.InternalSerializationService;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.nio.serialization.HazelcastSerializationException;
import com.hazelcast.query.QueryException;
import com.hazelcast.query.extractor.ValueExtractor;
import com.hazelcast.query.impl.DefaultArgumentParser;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class Extractors {
  private static final int MAX_CLASSES_IN_CACHE = 1000;
  
  private static final int MAX_GETTERS_PER_CLASS_IN_CACHE = 100;
  
  private static final float EVICTION_PERCENTAGE = 0.2F;
  
  private final Map<String, ValueExtractor> extractors;
  
  private final InternalSerializationService ss;
  
  private final EvictableGetterCache getterCache;
  
  private final DefaultArgumentParser argumentsParser;
  
  private Extractors(List<MapAttributeConfig> mapAttributeConfigs, ClassLoader classLoader, InternalSerializationService ss) {
    this
      
      .extractors = (mapAttributeConfigs == null) ? Collections.emptyMap() : ExtractorHelper.instantiateExtractors(mapAttributeConfigs, classLoader);
    this.getterCache = new EvictableGetterCache(1000, 100, 0.2F, false);
    this.argumentsParser = new DefaultArgumentParser();
    this.ss = ss;
  }
  
  public Object extract(Object target, String attributeName, Object metadata) {
    Object targetObject = getTargetObject(target);
    if (targetObject != null) {
      Getter getter = getGetter(targetObject, attributeName);
      try {
        return getter.getValue(targetObject, attributeName, metadata);
      } catch (Exception ex) {
        throw new QueryException(ex);
      } 
    } 
    return null;
  }
  
  private Object getTargetObject(Object target) {
    if (target instanceof com.hazelcast.nio.serialization.Portable) {
      Data targetData = this.ss.toData(target);
      if (targetData.isPortable())
        return targetData; 
    } 
    if (target instanceof Data) {
      Data targetData = (Data)target;
      if (targetData.isPortable() || targetData.isJson())
        return targetData; 
      return this.ss.toObject(target);
    } 
    return target;
  }
  
  Getter getGetter(Object targetObject, String attributeName) {
    Getter getter = this.getterCache.getGetter(targetObject.getClass(), attributeName);
    if (getter == null) {
      getter = instantiateGetter(targetObject, attributeName);
      if (getter.isCacheable())
        this.getterCache.putGetter(targetObject.getClass(), attributeName, getter); 
    } 
    return getter;
  }
  
  private Getter instantiateGetter(Object targetObject, String attributeName) {
    String attributeNameWithoutArguments = ExtractorHelper.extractAttributeNameNameWithoutArguments(attributeName);
    ValueExtractor valueExtractor = (ValueExtractor)this.extractors.get(attributeNameWithoutArguments);
    if (valueExtractor != null) {
      Object arguments = this.argumentsParser.parse(ExtractorHelper.extractArgumentsFromAttributeName(attributeName));
      return new ExtractorGetter(this.ss, valueExtractor, arguments);
    } 
    if (targetObject instanceof Data) {
      if (((Data)targetObject).isPortable()) {
        if (this.genericPortableGetter == null)
          this.genericPortableGetter = new PortableGetter(this.ss); 
        return this.genericPortableGetter;
      } 
      if (((Data)targetObject).isJson()) {
        if (this.jsonDataGetter == null)
          this.jsonDataGetter = new JsonDataGetter(this.ss); 
        return this.jsonDataGetter;
      } 
      throw new HazelcastSerializationException("No Data getter found for type " + ((Data)targetObject).getType());
    } 
    if (targetObject instanceof com.hazelcast.core.HazelcastJsonValue)
      return JsonGetter.INSTANCE; 
    return ReflectionHelper.createGetter(targetObject, attributeName);
  }
  
  public static Builder newBuilder(InternalSerializationService ss) { return new Builder(ss); }
}
