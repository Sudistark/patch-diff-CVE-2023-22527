package com.hazelcast.query.impl;

import com.hazelcast.internal.serialization.InternalSerializationService;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.query.impl.getters.Extractors;

public class CachedQueryEntry<K, V> extends QueryableEntry<K, V> {
  protected Data keyData;
  
  protected Data valueData;
  
  protected K keyObject;
  
  protected V valueObject;
  
  public CachedQueryEntry() {}
  
  public CachedQueryEntry(InternalSerializationService serializationService, Data key, Object value, Extractors extractors) { init(serializationService, key, value, extractors); }
  
  public void init(InternalSerializationService serializationService, Data key, Object value, Extractors extractors) {
    if (key == null)
      throw new IllegalArgumentException("keyData cannot be null"); 
    this.serializationService = serializationService;
    this.keyData = key;
    this.keyObject = null;
    if (value instanceof Data) {
      this.valueData = (Data)value;
      this.valueObject = null;
    } else {
      this.valueObject = value;
      this.valueData = null;
    } 
    this.extractors = extractors;
  }
  
  public K getKey() {
    if (this.keyObject == null)
      this.keyObject = this.serializationService.toObject(this.keyData); 
    return (K)this.keyObject;
  }
  
  public V getValue() {
    if (this.valueObject == null)
      this.valueObject = this.serializationService.toObject(this.valueData); 
    return (V)this.valueObject;
  }
  
  public Data getKeyData() { return this.keyData; }
  
  public Data getValueData() {
    if (this.valueData == null)
      this.valueData = this.serializationService.toData(this.valueObject); 
    return this.valueData;
  }
  
  protected Object getTargetObject(boolean key) {
    Object targetObject;
    if (key) {
      if (this.keyData.isPortable() || this.keyData.isJson()) {
        targetObject = this.keyData;
      } else {
        targetObject = getKey();
      } 
    } else if (this.valueObject == null) {
      if (this.valueData.isPortable() || this.valueData.isJson()) {
        targetObject = this.valueData;
      } else {
        targetObject = getValue();
      } 
    } else if (this.valueObject instanceof com.hazelcast.nio.serialization.Portable) {
      targetObject = getValueData();
    } else {
      targetObject = getValue();
    } 
    return targetObject;
  }
  
  public V setValue(V value) { throw new UnsupportedOperationException(); }
  
  public boolean equals(Object o) {
    if (this == o)
      return true; 
    if (o == null || getClass() != o.getClass())
      return false; 
    CachedQueryEntry that = (CachedQueryEntry)o;
    return this.keyData.equals(that.keyData);
  }
  
  public int hashCode() { return this.keyData.hashCode(); }
}
