package com.hazelcast.query.impl.bitmap;

class SparseIntArray<E> extends Object {
  public static final int ARRAY_STORAGE_32_MAX_SPARSE_SIZE = 513;
  
  private static final int ARRAY_STORAGE_32_MAX_DENSE_SIZE = 262145;
  
  private static final int STORAGE_16_MAX_DENSE_SIZE = 65536;
  
  private static final int STORAGE_16_MAX_SPARSE_SIZE = 65536;
  
  private static final long SHORT_PREFIX_MASK_LONG = 4294901760L;
  
  private static final int SHORT_PREFIX_MASK_INT = -65536;
  
  private Storage32 storage = new ArrayStorage32(null);
  
  public E get(int index) { return (E)this.storage.get(index); }
  
  public void set(int index, E value) {
    assert value != null;
    Storage32 newStorage = this.storage.set(index, value);
    if (newStorage != this.storage)
      this.storage = newStorage; 
  }
  
  public boolean clear(int index) {
    Storage32 newStorage = this.storage.clear(index);
    if (newStorage == null)
      return true; 
    if (newStorage != this.storage)
      this.storage = newStorage; 
    return false;
  }
  
  public void clear() { this.storage = new ArrayStorage32(null); }
  
  public long iterate(Iterator<E> iterator) { return this.storage.iterate(iterator); }
  
  public long advance(int current, Iterator<E> iterator) { return this.storage.advance(current, iterator); }
  
  public long iterateAtLeastFrom(int index, Iterator<E> iterator) { return this.storage.iterateAtLeastFrom(index, iterator); }
  
  public long advanceAtLeastTo(int index, int current, Iterator<E> iterator) { return this.storage.advanceAtLeastTo(index, current, iterator); }
}
