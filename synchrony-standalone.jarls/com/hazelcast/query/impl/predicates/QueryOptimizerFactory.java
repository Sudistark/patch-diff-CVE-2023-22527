package com.hazelcast.query.impl.predicates;

import com.hazelcast.spi.properties.GroupProperty;
import com.hazelcast.spi.properties.HazelcastProperties;
import com.hazelcast.spi.properties.HazelcastProperty;
import java.util.Arrays;

public final class QueryOptimizerFactory {
  public static QueryOptimizer newOptimizer(HazelcastProperties properties) {
    Type type;
    HazelcastProperty property = GroupProperty.QUERY_OPTIMIZER_TYPE;
    String string = properties.getString(property);
    try {
      type = Type.valueOf(string);
    } catch (IllegalArgumentException e) {
      throw onInvalidOptimizerType(string);
    } 
    switch (null.$SwitchMap$com$hazelcast$query$impl$predicates$QueryOptimizerFactory$Type[type.ordinal()]) {
      case 1:
        return new RuleBasedQueryOptimizer();
    } 
    return new EmptyOptimizer();
  }
  
  private static IllegalArgumentException onInvalidOptimizerType(String type) {
    StringBuilder sb = (new StringBuilder("Unknown Optimizer Type: ")).append(type).append(". Use property '").append(GroupProperty.QUERY_OPTIMIZER_TYPE.getName()).append("' to select optimizer. ").append("Available optimizers: ");
    Type[] arrayOfType = Type.values();
    sb.append(Arrays.toString(arrayOfType));
    return new IllegalArgumentException(sb.toString());
  }
}
