package com.hazelcast.query.impl.predicates;

import com.hazelcast.nio.serialization.BinaryInterface;
import com.hazelcast.query.Predicate;
import com.hazelcast.query.impl.Indexes;
import com.hazelcast.query.impl.QueryContext;
import com.hazelcast.query.impl.QueryableEntry;
import java.util.Map;
import java.util.Set;

@BinaryInterface
public final class NotEqualPredicate extends EqualPredicate {
  private static final long serialVersionUID = 1L;
  
  public NotEqualPredicate() {}
  
  public NotEqualPredicate(String attribute, Comparable value) { super(attribute, value); }
  
  public Predicate accept(Visitor visitor, Indexes indexes) { return visitor.visit(this, indexes); }
  
  public boolean apply(Map.Entry entry) { return !super.apply(entry); }
  
  public boolean isIndexed(QueryContext queryContext) { return false; }
  
  public Set<QueryableEntry> filter(QueryContext queryContext) { return null; }
  
  public String toString() { return this.attributeName + " != " + this.value; }
  
  public Predicate negate() { return new EqualPredicate(this.attributeName, this.value); }
  
  public int getId() { return 9; }
  
  public boolean equals(Object o) {
    if (this == o)
      return true; 
    if (!super.equals(o))
      return false; 
    if (!(o instanceof NotEqualPredicate))
      return false; 
    NotEqualPredicate that = (NotEqualPredicate)o;
    if (!that.canEqual(this))
      return false; 
    return true;
  }
  
  public boolean canEqual(Object other) { return other instanceof NotEqualPredicate; }
  
  public int hashCode() { return super.hashCode(); }
}
