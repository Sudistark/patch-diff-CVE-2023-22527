package com.hazelcast.query.impl.predicates;

import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.BinaryInterface;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import com.hazelcast.query.IndexAwarePredicate;
import com.hazelcast.query.Predicate;
import com.hazelcast.query.VisitablePredicate;
import com.hazelcast.query.impl.AndResultSet;
import com.hazelcast.query.impl.Indexes;
import com.hazelcast.query.impl.QueryContext;
import com.hazelcast.query.impl.QueryableEntry;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import java.io.IOException;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;

@BinaryInterface
public final class AndPredicate implements IndexAwarePredicate, IdentifiedDataSerializable, VisitablePredicate, NegatablePredicate, CompoundPredicate {
  private static final long serialVersionUID = 1L;
  
  protected Predicate[] predicates;
  
  public AndPredicate() {}
  
  public AndPredicate(Predicate... predicates) { this.predicates = predicates; }
  
  public Predicate accept(Visitor visitor, Indexes indexes) {
    Predicate[] result = VisitorUtils.acceptVisitor(this.predicates, visitor, indexes);
    if (result != this.predicates) {
      AndPredicate newPredicate = new AndPredicate(result);
      return visitor.visit(newPredicate, indexes);
    } 
    return visitor.visit(this, indexes);
  }
  
  public Set<QueryableEntry> filter(QueryContext queryContext) {
    Set<QueryableEntry> smallestResultSet = null;
    List<Set<QueryableEntry>> otherResultSets = null;
    List<Predicate> unindexedPredicates = null;
    for (Predicate predicate : this.predicates) {
      if (isIndexedPredicate(predicate, queryContext)) {
        int ownedPartitionsCount = queryContext.getOwnedPartitionCount();
        queryContext.setOwnedPartitionCount(-1);
        Set<QueryableEntry> currentResultSet = ((IndexAwarePredicate)predicate).filter(queryContext);
        queryContext.setOwnedPartitionCount(ownedPartitionsCount);
        if (smallestResultSet == null) {
          smallestResultSet = currentResultSet;
        } else if (PredicateUtils.estimatedSizeOf(currentResultSet) < PredicateUtils.estimatedSizeOf(smallestResultSet)) {
          otherResultSets = initOrGetListOf(otherResultSets);
          otherResultSets.add(smallestResultSet);
          smallestResultSet = currentResultSet;
        } else {
          otherResultSets = initOrGetListOf(otherResultSets);
          otherResultSets.add(currentResultSet);
        } 
      } else {
        unindexedPredicates = initOrGetListOf(unindexedPredicates);
        unindexedPredicates.add(predicate);
      } 
    } 
    if (smallestResultSet == null)
      return null; 
    return new AndResultSet(smallestResultSet, otherResultSets, unindexedPredicates);
  }
  
  private static boolean isIndexedPredicate(Predicate predicate, QueryContext queryContext) {
    return (predicate instanceof IndexAwarePredicate && ((IndexAwarePredicate)predicate)
      .isIndexed(queryContext));
  }
  
  private static <T> List<T> initOrGetListOf(List<T> list) {
    if (list == null)
      list = new LinkedList<T>(); 
    return list;
  }
  
  public boolean isIndexed(QueryContext queryContext) {
    for (Predicate predicate : this.predicates) {
      if (predicate instanceof IndexAwarePredicate) {
        IndexAwarePredicate iap = (IndexAwarePredicate)predicate;
        if (iap.isIndexed(queryContext))
          return true; 
      } 
    } 
    return false;
  }
  
  public boolean apply(Map.Entry mapEntry) {
    for (Predicate predicate : this.predicates) {
      if (!predicate.apply(mapEntry))
        return false; 
    } 
    return true;
  }
  
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append('(');
    int size = this.predicates.length;
    for (int i = 0; i < size; i++) {
      if (i > 0)
        sb.append(" AND "); 
      sb.append(this.predicates[i]);
    } 
    sb.append(')');
    return sb.toString();
  }
  
  public void writeData(ObjectDataOutput out) throws IOException {
    out.writeInt(this.predicates.length);
    for (Predicate predicate : this.predicates)
      out.writeObject(predicate); 
  }
  
  public void readData(ObjectDataInput in) throws IOException {
    int size = in.readInt();
    this.predicates = new Predicate[size];
    for (int i = 0; i < size; i++)
      this.predicates[i] = (Predicate)in.readObject(); 
  }
  
  public Predicate negate() {
    int size = this.predicates.length;
    Predicate[] inners = new Predicate[size];
    for (int i = 0; i < size; i++) {
      NotPredicate notPredicate;
      Predicate original = this.predicates[i];
      if (original instanceof NegatablePredicate) {
        notPredicate = ((NegatablePredicate)original).negate();
      } else {
        notPredicate = new NotPredicate(original);
      } 
      inners[i] = notPredicate;
    } 
    return new OrPredicate(inners);
  }
  
  public int getFactoryId() { return -32; }
  
  public int getId() { return 1; }
  
  @SuppressFBWarnings({"EI_EXPOSE_REP"})
  public <K, V> Predicate<K, V>[] getPredicates() { return this.predicates; }
  
  @SuppressFBWarnings({"EI_EXPOSE_REP"})
  public <K, V> void setPredicates(Predicate[] predicates) {
    if (this.predicates == null) {
      this.predicates = predicates;
    } else {
      throw new IllegalStateException("Cannot reset predicates in an AndPredicate after they have been already set.");
    } 
  }
  
  public boolean equals(Object o) {
    if (this == o)
      return true; 
    if (o == null || getClass() != o.getClass())
      return false; 
    AndPredicate that = (AndPredicate)o;
    return Arrays.equals(this.predicates, that.predicates);
  }
  
  public int hashCode() { return Arrays.hashCode(this.predicates); }
}
