package com.hazelcast.query.impl.predicates;

import com.hazelcast.query.Predicate;
import com.hazelcast.query.VisitablePredicate;
import com.hazelcast.query.impl.Indexes;
import com.hazelcast.util.collection.ArrayUtils;

public final class VisitorUtils {
  public static Predicate[] acceptVisitor(Predicate[] predicates, Visitor visitor, Indexes indexes) {
    Predicate[] target = predicates;
    boolean copyCreated = false;
    for (int i = 0; i < predicates.length; i++) {
      Predicate predicate = predicates[i];
      if (predicate instanceof VisitablePredicate) {
        Predicate transformed = ((VisitablePredicate)predicate).accept(visitor, indexes);
        if (transformed != predicate) {
          if (!copyCreated) {
            copyCreated = true;
            target = (Predicate[])ArrayUtils.createCopy(target);
          } 
          target[i] = transformed;
        } 
      } 
    } 
    return target;
  }
}
