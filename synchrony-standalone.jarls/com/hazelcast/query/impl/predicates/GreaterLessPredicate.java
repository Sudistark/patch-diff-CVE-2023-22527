package com.hazelcast.query.impl.predicates;

import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.BinaryInterface;
import com.hazelcast.query.Predicate;
import com.hazelcast.query.impl.Comparables;
import com.hazelcast.query.impl.Comparison;
import com.hazelcast.query.impl.Index;
import com.hazelcast.query.impl.QueryContext;
import com.hazelcast.query.impl.QueryableEntry;
import java.io.IOException;
import java.util.Set;

@BinaryInterface
public final class GreaterLessPredicate extends AbstractIndexAwarePredicate implements NegatablePredicate, RangePredicate {
  private static final long serialVersionUID = 1L;
  
  protected Comparable value;
  
  boolean equal;
  
  boolean less;
  
  public GreaterLessPredicate() {}
  
  public GreaterLessPredicate(String attribute, Comparable value, boolean equal, boolean less) {
    super(attribute);
    if (value == null)
      throw new NullPointerException("Arguments can't be null"); 
    this.value = value;
    this.equal = equal;
    this.less = less;
  }
  
  protected boolean applyForSingleAttributeValue(Comparable attributeValue) {
    if (attributeValue == null)
      return false; 
    Comparable givenValue = convert(attributeValue, this.value);
    attributeValue = (Comparable)convertEnumValue(attributeValue);
    int result = Comparables.compare(attributeValue, givenValue);
    return ((this.equal && result == 0) || (this.less ? (result < 0) : (result > 0)));
  }
  
  public Set<QueryableEntry> filter(QueryContext queryContext) {
    Comparison comparison;
    Index index = matchIndex(queryContext, QueryContext.IndexMatchHint.PREFER_ORDERED);
    if (index == null)
      return null; 
    if (this.less) {
      comparison = this.equal ? Comparison.LESS_OR_EQUAL : Comparison.LESS;
    } else {
      comparison = this.equal ? Comparison.GREATER_OR_EQUAL : Comparison.GREATER;
    } 
    return index.getRecords(comparison, this.value);
  }
  
  public void readData(ObjectDataInput in) throws IOException {
    super.readData(in);
    this.value = (Comparable)in.readObject();
    this.equal = in.readBoolean();
    this.less = in.readBoolean();
  }
  
  public void writeData(ObjectDataOutput out) throws IOException {
    super.writeData(out);
    out.writeObject(this.value);
    out.writeBoolean(this.equal);
    out.writeBoolean(this.less);
  }
  
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append(this.attributeName);
    sb.append(this.less ? "<" : ">");
    if (this.equal)
      sb.append("="); 
    sb.append(this.value);
    return sb.toString();
  }
  
  public Predicate negate() { return new GreaterLessPredicate(this.attributeName, this.value, !this.equal, !this.less); }
  
  public int getId() { return 4; }
  
  public boolean equals(Object o) {
    if (this == o)
      return true; 
    if (!super.equals(o))
      return false; 
    if (!(o instanceof GreaterLessPredicate))
      return false; 
    GreaterLessPredicate that = (GreaterLessPredicate)o;
    if (!that.canEqual(this))
      return false; 
    if (this.equal != that.equal)
      return false; 
    if (this.less != that.less)
      return false; 
    return (this.value != null) ? this.value.equals(that.value) : ((that.value == null) ? 1 : 0);
  }
  
  public boolean canEqual(Object other) { return other instanceof GreaterLessPredicate; }
  
  public int hashCode() {
    result = super.hashCode();
    result = 31 * result + ((this.value != null) ? this.value.hashCode() : 0);
    result = 31 * result + (this.equal ? 1 : 0);
    return 31 * result + (this.less ? 1 : 0);
  }
  
  public String getAttribute() { return this.attributeName; }
  
  public Comparable getFrom() { return this.less ? null : this.value; }
  
  public boolean isFromInclusive() { return (!this.less && this.equal); }
  
  public Comparable getTo() { return this.less ? this.value : null; }
  
  public boolean isToInclusive() { return (this.less && this.equal); }
}
