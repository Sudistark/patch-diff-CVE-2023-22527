package com.hazelcast.query.impl;

import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import com.hazelcast.query.impl.predicates.PredicateDataSerializerHook;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import java.io.IOException;
import java.util.Arrays;

public final class CompositeValue extends Object implements Comparable<CompositeValue>, IdentifiedDataSerializable {
  public static final ComparableIdentifiedDataSerializable NEGATIVE_INFINITY = new NegativeInfinity(null);
  
  public static final ComparableIdentifiedDataSerializable POSITIVE_INFINITY = new PositiveInfinity(null);
  
  private static final int BYTE_MASK = 255;
  
  private Comparable[] components;
  
  public CompositeValue() {}
  
  @SuppressFBWarnings({"EI_EXPOSE_REP2"})
  public CompositeValue(Comparable[] components) { this.components = components; }
  
  public CompositeValue(int width, Comparable prefix, Comparable filler) {
    assert width > 0;
    Comparable[] components = new Comparable[width];
    components[0] = prefix;
    Arrays.fill(components, 1, components.length, filler);
    this.components = components;
  }
  
  @SuppressFBWarnings({"EI_EXPOSE_REP"})
  public Comparable[] getComponents() { return this.components; }
  
  public int hashCode() { return Arrays.hashCode(this.components); }
  
  public boolean equals(Object o) {
    if (o == null || getClass() != o.getClass())
      return false; 
    CompositeValue that = (CompositeValue)o;
    return Arrays.equals(this.components, that.components);
  }
  
  public String toString() { return Arrays.toString(this.components); }
  
  @SuppressFBWarnings({"EQ_COMPARETO_USE_OBJECT_EQUALS"})
  public int compareTo(CompositeValue that) {
    assert this.components.length == that.components.length;
    for (int i = 0; i < this.components.length; i++) {
      int order = compareComponent(this.components[i], that.components[i]);
      if (order != 0)
        return order; 
    } 
    return 0;
  }
  
  public int getFactoryId() { return PredicateDataSerializerHook.F_ID; }
  
  public int getId() { return 18; }
  
  public void writeData(ObjectDataOutput out) throws IOException {
    out.writeByte(this.components.length);
    for (Comparable component : this.components)
      out.writeObject(component); 
  }
  
  public void readData(ObjectDataInput in) throws IOException {
    int length = in.readByte() & 0xFF;
    this.components = new Comparable[length];
    for (int i = 0; i < length; i++)
      this.components[i] = (Comparable)in.readObject(); 
  }
  
  private static int compareComponent(Comparable lhs, Comparable rhs) {
    if (rhs == AbstractIndex.NULL || rhs == NEGATIVE_INFINITY || rhs == POSITIVE_INFINITY)
      return -Integer.signum(rhs.compareTo(lhs)); 
    return Comparables.compare(lhs, rhs);
  }
}
