package com.hazelcast.query.impl;

import com.hazelcast.util.StringUtil;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

final class DateHelper {
  static final String TIMESTAMP_FORMAT = "yyyy-MM-dd HH:mm:ss.SSS";
  
  static final String DATE_FORMAT = "EEE MMM dd HH:mm:ss zzz yyyy";
  
  static final String SQL_DATE_FORMAT = "yyyy-MM-dd";
  
  static final String SQL_TIME_FORMAT = "HH:mm:ss";
  
  static Date parseDate(String value) {
    try {
      return getUtilDateFormat().parse(value);
    } catch (ParseException e) {
      return (Date)throwRuntimeParseException(value, e, new String[] { "EEE MMM dd HH:mm:ss zzz yyyy" });
    } 
  }
  
  static Timestamp parseTimeStamp(String value) {
    try {
      return Timestamp.valueOf(value);
    } catch (IllegalArgumentException e) {
      return (Timestamp)throwRuntimeParseException(value, new ParseException(e.getMessage(), 0), new String[] { "yyyy-MM-dd HH:mm:ss.SSS" });
    } 
  }
  
  static Date parseSqlDate(String value) {
    try {
      return Date.valueOf(value);
    } catch (IllegalArgumentException e) {
      return (Date)throwRuntimeParseException(value, new ParseException(value, 0), new String[] { "yyyy-MM-dd" });
    } 
  }
  
  static Time parseSqlTime(String value) {
    try {
      return Time.valueOf(value);
    } catch (IllegalArgumentException e) {
      return (Time)throwRuntimeParseException(value, new ParseException(value, 0), new String[] { "HH:mm:ss" });
    } 
  }
  
  private static <T> T throwRuntimeParseException(String value, Exception e, String... legalFormats) {
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i < legalFormats.length; i++) {
      sb.append("'").append(legalFormats[i]).append("'");
      if (i < legalFormats.length - 2)
        sb.append(", "); 
    } 
    throw new RuntimeException("Unable to parse date from value: '" + value + "' ! Valid format are: " + sb
        .toString() + ".", e);
  }
  
  private static DateFormat getTimestampFormat() { return new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS", StringUtil.LOCALE_INTERNAL); }
  
  private static DateFormat getSqlDateFormat() { return new SimpleDateFormat("yyyy-MM-dd", StringUtil.LOCALE_INTERNAL); }
  
  private static DateFormat getUtilDateFormat() { return new SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy", StringUtil.LOCALE_INTERNAL); }
  
  private static DateFormat getSqlTimeFormat() { return new SimpleDateFormat("HH:mm:ss", StringUtil.LOCALE_INTERNAL); }
}
