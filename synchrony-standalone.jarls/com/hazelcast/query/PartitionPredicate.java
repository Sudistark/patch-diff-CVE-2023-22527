package com.hazelcast.query;

import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.BinaryInterface;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import com.hazelcast.query.impl.predicates.PredicateDataSerializerHook;
import com.hazelcast.util.Preconditions;
import java.io.IOException;
import java.util.Map;

@BinaryInterface
public class PartitionPredicate<K, V> extends Object implements Predicate<K, V>, IdentifiedDataSerializable {
  private static final long serialVersionUID = 1L;
  
  private Object partitionKey;
  
  private Predicate<K, V> target;
  
  public PartitionPredicate() {}
  
  public PartitionPredicate(Object partitionKey, Predicate<K, V> target) {
    this.partitionKey = Preconditions.checkNotNull(partitionKey, "partitionKey can't be null");
    this.target = (Predicate)Preconditions.checkNotNull(target, "target predicate can't be null");
  }
  
  public Object getPartitionKey() { return this.partitionKey; }
  
  public Predicate<K, V> getTarget() { return this.target; }
  
  public boolean apply(Map.Entry<K, V> mapEntry) { throw new UnsupportedOperationException(); }
  
  public int getFactoryId() { return PredicateDataSerializerHook.F_ID; }
  
  public int getId() { return 16; }
  
  public void writeData(ObjectDataOutput out) throws IOException {
    out.writeObject(this.partitionKey);
    out.writeObject(this.target);
  }
  
  public void readData(ObjectDataInput in) throws IOException {
    this.partitionKey = in.readObject();
    this.target = (Predicate)in.readObject();
  }
  
  public String toString() { return "PartitionPredicate{partitionKey=" + this.partitionKey + ", target=" + this.target + '}'; }
  
  public boolean equals(Object o) {
    if (this == o)
      return true; 
    if (o == null || getClass() != o.getClass())
      return false; 
    PartitionPredicate<?, ?> that = (PartitionPredicate)o;
    if ((this.partitionKey != null) ? !this.partitionKey.equals(that.partitionKey) : (that.partitionKey != null))
      return false; 
    return (this.target != null) ? this.target.equals(that.target) : ((that.target == null) ? 1 : 0);
  }
  
  public int hashCode() {
    result = (this.partitionKey != null) ? this.partitionKey.hashCode() : 0;
    return 31 * result + ((this.target != null) ? this.target.hashCode() : 0);
  }
}
