package com.hazelcast.executor.impl;

import com.hazelcast.core.HazelcastInstance;
import com.hazelcast.core.HazelcastInstanceAware;
import com.hazelcast.core.PartitionAware;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import java.io.IOException;
import java.util.concurrent.Callable;

public final class RunnableAdapter<V> extends Object implements IdentifiedDataSerializable, Callable<V>, HazelcastInstanceAware, PartitionAware {
  private Runnable task;
  
  public RunnableAdapter() {}
  
  public RunnableAdapter(Runnable task) { this.task = task; }
  
  public Runnable getRunnable() { return this.task; }
  
  public void setRunnable(Runnable runnable) { this.task = runnable; }
  
  public V call() throws Exception {
    this.task.run();
    return null;
  }
  
  public Object getPartitionKey() {
    if (this.task instanceof PartitionAware)
      return ((PartitionAware)this.task).getPartitionKey(); 
    return null;
  }
  
  public void setHazelcastInstance(HazelcastInstance hazelcastInstance) {
    if (this.task instanceof HazelcastInstanceAware) {
      HazelcastInstanceAware instanceAwareTask = (HazelcastInstanceAware)this.task;
      instanceAwareTask.setHazelcastInstance(hazelcastInstance);
    } 
  }
  
  public void writeData(ObjectDataOutput out) throws IOException { out.writeObject(this.task); }
  
  public void readData(ObjectDataInput in) throws IOException { this.task = (Runnable)in.readObject(); }
  
  public int getFactoryId() { return ExecutorDataSerializerHook.F_ID; }
  
  public int getId() { return 2; }
  
  public String toString() { return "RunnableAdapter{task=" + this.task + '}'; }
}
