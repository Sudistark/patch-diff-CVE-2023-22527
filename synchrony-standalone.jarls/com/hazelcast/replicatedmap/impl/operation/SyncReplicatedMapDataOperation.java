package com.hazelcast.replicatedmap.impl.operation;

import com.hazelcast.logging.ILogger;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.replicatedmap.impl.ReplicatedMapService;
import com.hazelcast.replicatedmap.impl.record.AbstractReplicatedRecordStore;
import com.hazelcast.replicatedmap.impl.record.InternalReplicatedMapStorage;
import com.hazelcast.replicatedmap.impl.record.RecordMigrationInfo;
import com.hazelcast.replicatedmap.impl.record.ReplicatedRecord;
import com.hazelcast.util.SetUtil;
import java.io.IOException;
import java.util.Set;
import java.util.concurrent.atomic.AtomicReference;

public class SyncReplicatedMapDataOperation<K, V> extends AbstractSerializableOperation {
  private String name;
  
  private Set<RecordMigrationInfo> recordSet;
  
  private long version;
  
  public SyncReplicatedMapDataOperation() {}
  
  public SyncReplicatedMapDataOperation(String name, Set<RecordMigrationInfo> recordSet, long version) {
    this.name = name;
    this.recordSet = recordSet;
    this.version = version;
  }
  
  public void run() {
    ILogger logger = getLogger();
    if (logger.isFineEnabled())
      logger.fine("Syncing " + this.recordSet.size() + " records (version " + this.version + ") for replicated map '" + this.name + "' (partitionId " + 
          getPartitionId() + ") from " + 
          getCallerAddress() + " to " + getNodeEngine().getThisAddress()); 
    ReplicatedMapService service = (ReplicatedMapService)getService();
    AbstractReplicatedRecordStore store = (AbstractReplicatedRecordStore)service.getReplicatedRecordStore(this.name, true, getPartitionId());
    InternalReplicatedMapStorage<K, V> newStorage = new InternalReplicatedMapStorage<K, V>();
    for (RecordMigrationInfo record : this.recordSet) {
      K key = (K)store.marshall(record.getKey());
      V value = (V)store.marshall(record.getValue());
      ReplicatedRecord<K, V> replicatedRecord = buildReplicatedRecord(key, value, record.getTtl());
      ReplicatedRecord oldRecord = store.getReplicatedRecord(key);
      if (oldRecord != null)
        replicatedRecord.setHits(oldRecord.getHits()); 
      newStorage.put(key, replicatedRecord);
      if (record.getTtl() > 0L)
        store.scheduleTtlEntry(record.getTtl(), key, value); 
    } 
    newStorage.syncVersion(this.version);
    AtomicReference<InternalReplicatedMapStorage<K, V>> storageRef = store.getStorageRef();
    storageRef.set(newStorage);
    store.setLoaded(true);
  }
  
  private ReplicatedRecord<K, V> buildReplicatedRecord(K key, V value, long ttlMillis) { return new ReplicatedRecord(key, value, ttlMillis); }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    out.writeUTF(this.name);
    out.writeLong(this.version);
    out.writeInt(this.recordSet.size());
    for (RecordMigrationInfo record : this.recordSet)
      record.writeData(out); 
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    this.name = in.readUTF();
    this.version = in.readLong();
    int size = in.readInt();
    this.recordSet = SetUtil.createHashSet(size);
    for (int j = 0; j < size; j++) {
      RecordMigrationInfo record = new RecordMigrationInfo();
      record.readData(in);
      this.recordSet.add(record);
    } 
  }
  
  public int getId() { return 21; }
}
