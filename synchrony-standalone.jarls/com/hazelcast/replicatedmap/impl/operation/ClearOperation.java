package com.hazelcast.replicatedmap.impl.operation;

import com.hazelcast.cluster.memberselector.MemberSelectors;
import com.hazelcast.core.Member;
import com.hazelcast.nio.Address;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.replicatedmap.impl.ReplicatedMapService;
import com.hazelcast.replicatedmap.impl.record.ReplicatedRecordStore;
import com.hazelcast.spi.Operation;
import com.hazelcast.spi.OperationService;
import com.hazelcast.spi.impl.MutatingOperation;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;

public class ClearOperation extends AbstractNamedSerializableOperation implements MutatingOperation {
  private String mapName;
  
  private boolean replicateClear;
  
  private long version;
  
  private int response;
  
  public ClearOperation() {}
  
  public ClearOperation(String mapName, boolean replicateClear) { this(mapName, replicateClear, 0L); }
  
  public ClearOperation(String mapName, boolean replicateClear, long version) {
    this.mapName = mapName;
    this.replicateClear = replicateClear;
    this.version = version;
  }
  
  public void run() {
    if (getNodeEngine().getLocalMember().isLiteMember())
      return; 
    ReplicatedMapService service = (ReplicatedMapService)getService();
    ReplicatedRecordStore store = service.getReplicatedRecordStore(this.mapName, false, getPartitionId());
    if (store == null)
      return; 
    this.response = store.getStorage().size();
    if (this.replicateClear) {
      store.clear();
      replicateClearOperation(this.version);
    } else {
      store.clearWithVersion(this.version);
    } 
  }
  
  private void replicateClearOperation(long version) {
    OperationService operationService = getNodeEngine().getOperationService();
    Collection<Address> members = getMemberAddresses();
    for (Address address : members) {
      Operation op = (new ClearOperation(this.mapName, false, version)).setPartitionId(getPartitionId()).setValidateTarget(false);
      operationService
        .createInvocationBuilder(getServiceName(), op, address)
        .setTryCount(3)
        .invoke();
    } 
  }
  
  protected Collection<Address> getMemberAddresses() {
    Address thisAddress = getNodeEngine().getThisAddress();
    Collection<Member> members = getNodeEngine().getClusterService().getMembers(MemberSelectors.DATA_MEMBER_SELECTOR);
    Collection<Address> addresses = new ArrayList<Address>();
    for (Member member : members) {
      Address address = member.getAddress();
      if (address.equals(thisAddress))
        continue; 
      addresses.add(address);
    } 
    return addresses;
  }
  
  public Object getResponse() { return Integer.valueOf(this.response); }
  
  public String getServiceName() { return "hz:impl:replicatedMapService"; }
  
  public int getFactoryId() { return ReplicatedMapDataSerializerHook.F_ID; }
  
  public int getId() { return 1; }
  
  protected void writeInternal(ObjectDataOutput out) throws IOException {
    super.writeInternal(out);
    out.writeUTF(this.mapName);
    out.writeBoolean(this.replicateClear);
    out.writeLong(this.version);
  }
  
  protected void readInternal(ObjectDataInput in) throws IOException {
    super.readInternal(in);
    this.mapName = in.readUTF();
    this.replicateClear = in.readBoolean();
    this.version = in.readLong();
  }
  
  public String getName() { return this.mapName; }
}
