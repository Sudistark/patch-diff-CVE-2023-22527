package com.hazelcast.replicatedmap.impl.operation;

import com.hazelcast.cluster.memberselector.MemberSelectors;
import com.hazelcast.core.Member;
import com.hazelcast.nio.Address;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.Operation;
import com.hazelcast.spi.OperationService;
import com.hazelcast.spi.impl.operationservice.impl.responses.NormalResponse;
import java.util.ArrayList;
import java.util.Collection;

public abstract class AbstractReplicatedMapOperation extends AbstractNamedSerializableOperation {
  protected String name;
  
  protected Data key;
  
  protected Data value;
  
  protected long ttl;
  
  protected VersionResponsePair response;
  
  protected void sendReplicationOperation(boolean isRemove) {
    OperationService operationService = getNodeEngine().getOperationService();
    Collection<Address> members = getMemberAddresses();
    for (Address address : members)
      invoke(isRemove, operationService, address, this.name, this.key, this.value, this.ttl, this.response); 
  }
  
  protected Collection<Address> getMemberAddresses() {
    Address thisAddress = getNodeEngine().getThisAddress();
    Collection<Member> members = getNodeEngine().getClusterService().getMembers(MemberSelectors.DATA_MEMBER_SELECTOR);
    Collection<Address> addresses = new ArrayList<Address>();
    for (Member member : members) {
      Address address = member.getAddress();
      if (address.equals(getCallerAddress()) || address.equals(thisAddress))
        continue; 
      addresses.add(address);
    } 
    return addresses;
  }
  
  private void invoke(boolean isRemove, OperationService operationService, Address address, String name, Data key, Data value, long ttl, VersionResponsePair response) {
    Operation op = (new ReplicateUpdateOperation(name, key, value, ttl, response, isRemove, getCallerAddress())).setPartitionId(getPartitionId()).setValidateTarget(false);
    operationService
      .createInvocationBuilder(getServiceName(), op, address)
      .setTryCount(3)
      .invoke();
  }
  
  protected void sendUpdateCallerOperation(boolean isRemove) {
    OperationService operationService = getNodeEngine().getOperationService();
    Operation op = (new ReplicateUpdateToCallerOperation(this.name, getCallId(), this.key, this.value, this.response, this.ttl, isRemove)).setPartitionId(getPartitionId()).setValidateTarget(false).setServiceName(getServiceName());
    operationService
      .createInvocationBuilder(getServiceName(), op, getCallerAddress())
      .setTryCount(3)
      .invoke();
  }
  
  public String getName() { return this.name; }
  
  public Object getResponse() {
    if (getNodeEngine().getThisAddress().equals(getCallerAddress()))
      return this.response; 
    return new NormalResponse(this.response, getCallId(), 1, isUrgent());
  }
  
  protected void toString(StringBuilder sb) {
    super.toString(sb);
    sb.append(", name=").append(this.name);
  }
}
