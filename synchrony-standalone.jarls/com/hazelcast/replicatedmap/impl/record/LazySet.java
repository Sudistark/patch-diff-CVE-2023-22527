package com.hazelcast.replicatedmap.impl.record;

import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

class LazySet<K, V, R> extends Object implements Set<R> {
  private final InternalReplicatedMapStorage<K, V> storage;
  
  private final IteratorFactory<K, V, R> iteratorFactory;
  
  LazySet(IteratorFactory<K, V, R> iteratorFactory, InternalReplicatedMapStorage<K, V> storage) {
    this.iteratorFactory = iteratorFactory;
    this.storage = storage;
  }
  
  public int size() { return this.storage.size(); }
  
  public boolean isEmpty() { return this.storage.isEmpty(); }
  
  public boolean contains(Object o) { throw new UnsupportedOperationException("LazySet does not support contains requests"); }
  
  public Iterator<R> iterator() {
    Iterator<Map.Entry<K, ReplicatedRecord<K, V>>> iterator = this.storage.entrySet().iterator();
    return this.iteratorFactory.create(iterator);
  }
  
  public Object[] toArray() {
    List<Object> result = new ArrayList<Object>(this.storage.values().size());
    for (R r : this)
      result.add(r); 
    return result.toArray(new Object[0]);
  }
  
  public <T> T[] toArray(T[] a) {
    List<Object> result = new ArrayList<Object>(this.storage.values().size());
    for (R r : this)
      result.add(r); 
    if (a.length != result.size())
      a = (T[])(Object[])Array.newInstance(a.getClass().getComponentType(), result.size()); 
    for (int i = 0; i < a.length; i++)
      a[i] = result.get(i); 
    return a;
  }
  
  public boolean add(R e) { throw new UnsupportedOperationException("LazySet is not modifiable"); }
  
  public boolean remove(Object o) { throw new UnsupportedOperationException("LazySet is not modifiable"); }
  
  public boolean containsAll(Collection<?> c) { throw new UnsupportedOperationException("LazySet does not support contains requests"); }
  
  public boolean addAll(Collection<? extends R> c) { throw new UnsupportedOperationException("LazySet is not modifiable"); }
  
  public boolean retainAll(Collection<?> c) { throw new UnsupportedOperationException("LazySet is not modifiable"); }
  
  public boolean removeAll(Collection<?> c) { throw new UnsupportedOperationException("LazySet is not modifiable"); }
  
  public void clear() { throw new UnsupportedOperationException("LazySet is not modifiable"); }
}
