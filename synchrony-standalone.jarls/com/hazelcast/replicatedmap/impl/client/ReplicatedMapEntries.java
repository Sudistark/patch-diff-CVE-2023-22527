package com.hazelcast.replicatedmap.impl.client;

import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.nio.serialization.Portable;
import com.hazelcast.nio.serialization.PortableReader;
import com.hazelcast.nio.serialization.PortableWriter;
import java.io.IOException;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class ReplicatedMapEntries implements Portable {
  private List<Data> keys;
  
  private List<Data> values;
  
  public ReplicatedMapEntries() {}
  
  public ReplicatedMapEntries(int initialSize) {
    this.keys = new ArrayList(initialSize);
    this.values = new ArrayList(initialSize);
  }
  
  public ReplicatedMapEntries(List<Map.Entry<Data, Data>> entries) {
    int initialSize = entries.size();
    this.keys = new ArrayList(initialSize);
    this.values = new ArrayList(initialSize);
    for (Map.Entry<Data, Data> entry : entries) {
      this.keys.add(entry.getKey());
      this.values.add(entry.getValue());
    } 
  }
  
  public void add(Data key, Data value) {
    ensureEntriesCreated();
    this.keys.add(key);
    this.values.add(value);
  }
  
  public List<Map.Entry<Data, Data>> entries() {
    ArrayList<Map.Entry<Data, Data>> entries = new ArrayList<Map.Entry<Data, Data>>(this.keys.size());
    putAllToList(entries);
    return entries;
  }
  
  public Data getKey(int index) { return (Data)this.keys.get(index); }
  
  public Data getValue(int index) { return (Data)this.values.get(index); }
  
  public int size() { return (this.keys == null) ? 0 : this.keys.size(); }
  
  private void putAllToList(Collection<Map.Entry<Data, Data>> targetList) {
    if (this.keys == null)
      return; 
    Iterator<Data> keyIterator = this.keys.iterator();
    Iterator<Data> valueIterator = this.values.iterator();
    while (keyIterator.hasNext())
      targetList.add(new AbstractMap.SimpleImmutableEntry(keyIterator.next(), valueIterator.next())); 
  }
  
  private void ensureEntriesCreated() {
    if (this.keys == null) {
      this.keys = new ArrayList();
      this.values = new ArrayList();
    } 
  }
  
  public int getFactoryId() { return ReplicatedMapPortableHook.F_ID; }
  
  public int getClassId() { return 12; }
  
  public void writePortable(PortableWriter writer) throws IOException {
    int size = size();
    writer.writeInt("size", size);
    ObjectDataOutput out = writer.getRawDataOutput();
    for (int i = 0; i < size; i++) {
      out.writeData((Data)this.keys.get(i));
      out.writeData((Data)this.values.get(i));
    } 
  }
  
  public void readPortable(PortableReader reader) throws IOException {
    int size = reader.readInt("size");
    this.keys = new ArrayList(size);
    this.values = new ArrayList(size);
    ObjectDataInput in = reader.getRawDataInput();
    for (int i = 0; i < size; i++) {
      this.keys.add(in.readData());
      this.values.add(in.readData());
    } 
  }
}
