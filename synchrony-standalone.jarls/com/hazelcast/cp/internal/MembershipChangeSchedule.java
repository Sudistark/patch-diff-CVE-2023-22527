package com.hazelcast.cp.internal;

import com.hazelcast.cp.CPGroupId;
import com.hazelcast.cp.internal.raft.MembershipChangeMode;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import com.hazelcast.util.Preconditions;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;

public class MembershipChangeSchedule implements IdentifiedDataSerializable {
  private List<Long> membershipChangeCommitIndices;
  
  private CPMemberInfo member;
  
  private MembershipChangeMode membershipChangeMode;
  
  private final List<CPGroupMembershipChange> changes = new ArrayList();
  
  MembershipChangeSchedule() {}
  
  private MembershipChangeSchedule(List<Long> membershipChangeCommitIndices, CPMemberInfo member, MembershipChangeMode membershipChangeMode, List<CPGroupMembershipChange> changes) {
    this.membershipChangeCommitIndices = membershipChangeCommitIndices;
    this.member = member;
    this.membershipChangeMode = membershipChangeMode;
    this.changes.addAll(changes);
  }
  
  CPMemberInfo getAddedMember() { return (this.membershipChangeMode == MembershipChangeMode.ADD) ? this.member : null; }
  
  CPMemberInfo getLeavingMember() { return (this.membershipChangeMode == MembershipChangeMode.REMOVE) ? this.member : null; }
  
  List<CPGroupMembershipChange> getChanges() { return Collections.unmodifiableList(this.changes); }
  
  MembershipChangeSchedule excludeCompletedChanges(Collection<CPGroupId> completedGroupIds) {
    Preconditions.checkNotNull(completedGroupIds);
    List<CPGroupMembershipChange> remainingChanges = new ArrayList<CPGroupMembershipChange>(this.changes);
    Iterator<CPGroupMembershipChange> it = remainingChanges.iterator();
    while (it.hasNext()) {
      CPGroupMembershipChange change = (CPGroupMembershipChange)it.next();
      if (completedGroupIds.contains(CPGroupMembershipChange.access$000(change)))
        it.remove(); 
    } 
    return new MembershipChangeSchedule(this.membershipChangeCommitIndices, this.member, this.membershipChangeMode, remainingChanges);
  }
  
  List<Long> getMembershipChangeCommitIndices() { return this.membershipChangeCommitIndices; }
  
  MembershipChangeSchedule addRetriedCommitIndex(long commitIndex) {
    List<Long> membershipChangeCommitIndices = new ArrayList<Long>(this.membershipChangeCommitIndices);
    membershipChangeCommitIndices.add(Long.valueOf(commitIndex));
    return new MembershipChangeSchedule(membershipChangeCommitIndices, this.member, this.membershipChangeMode, this.changes);
  }
  
  static MembershipChangeSchedule forJoiningMember(List<Long> membershipChangeCommitIndices, CPMemberInfo member, List<CPGroupMembershipChange> changes) { return new MembershipChangeSchedule(membershipChangeCommitIndices, member, MembershipChangeMode.ADD, changes); }
  
  static MembershipChangeSchedule forLeavingMember(List<Long> membershipChangeCommitIndices, CPMemberInfo member, List<CPGroupMembershipChange> changes) { return new MembershipChangeSchedule(membershipChangeCommitIndices, member, MembershipChangeMode.REMOVE, changes); }
  
  public int getFactoryId() { return RaftServiceDataSerializerHook.F_ID; }
  
  public int getId() { return 19; }
  
  public void writeData(ObjectDataOutput out) throws IOException {
    out.writeInt(this.membershipChangeCommitIndices.size());
    for (null = this.membershipChangeCommitIndices.iterator(); null.hasNext(); ) {
      long commitIndex = ((Long)null.next()).longValue();
      out.writeLong(commitIndex);
    } 
    out.writeObject(this.member);
    out.writeUTF(this.membershipChangeMode.name());
    out.writeInt(this.changes.size());
    for (CPGroupMembershipChange change : this.changes)
      out.writeObject(change); 
  }
  
  public void readData(ObjectDataInput in) throws IOException {
    int membershipChangeCommitIndexCount = in.readInt();
    this.membershipChangeCommitIndices = new ArrayList(membershipChangeCommitIndexCount);
    for (int i = 0; i < membershipChangeCommitIndexCount; i++) {
      long commitIndex = in.readLong();
      this.membershipChangeCommitIndices.add(Long.valueOf(commitIndex));
    } 
    this.member = (CPMemberInfo)in.readObject();
    this.membershipChangeMode = MembershipChangeMode.valueOf(in.readUTF());
    int groupCount = in.readInt();
    for (int i = 0; i < groupCount; i++) {
      CPGroupMembershipChange change = (CPGroupMembershipChange)in.readObject();
      this.changes.add(change);
    } 
  }
  
  public String toString() { return "MembershipChangeSchedule{membershipChangeCommitIndices=" + this.membershipChangeCommitIndices + ", member=" + this.member + ", membershipChangeMode=" + this.membershipChangeMode + ", changes=" + this.changes + '}'; }
}
