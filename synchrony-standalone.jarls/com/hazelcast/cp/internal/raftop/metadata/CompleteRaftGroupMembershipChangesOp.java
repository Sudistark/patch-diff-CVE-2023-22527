package com.hazelcast.cp.internal.raftop.metadata;

import com.hazelcast.cp.CPGroupId;
import com.hazelcast.cp.internal.IndeterminateOperationStateAware;
import com.hazelcast.cp.internal.MetadataRaftGroupManager;
import com.hazelcast.cp.internal.RaftServiceDataSerializerHook;
import com.hazelcast.cp.internal.util.Tuple2;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class CompleteRaftGroupMembershipChangesOp extends MetadataRaftGroupOp implements IndeterminateOperationStateAware, IdentifiedDataSerializable {
  private Map<CPGroupId, Tuple2<Long, Long>> changedGroups;
  
  public CompleteRaftGroupMembershipChangesOp() {}
  
  public CompleteRaftGroupMembershipChangesOp(Map<CPGroupId, Tuple2<Long, Long>> changedGroups) { this.changedGroups = changedGroups; }
  
  public Object run(MetadataRaftGroupManager metadataGroupManager, long commitIndex) { return metadataGroupManager.completeRaftGroupMembershipChanges(commitIndex, this.changedGroups); }
  
  public boolean isRetryableOnIndeterminateOperationState() { return true; }
  
  public int getFactoryId() { return RaftServiceDataSerializerHook.F_ID; }
  
  public int getId() { return 17; }
  
  public void writeData(ObjectDataOutput out) throws IOException {
    out.writeInt(this.changedGroups.size());
    for (Map.Entry<CPGroupId, Tuple2<Long, Long>> e : this.changedGroups.entrySet()) {
      out.writeObject(e.getKey());
      Tuple2<Long, Long> value = (Tuple2)e.getValue();
      out.writeLong(((Long)value.element1).longValue());
      out.writeLong(((Long)value.element2).longValue());
    } 
  }
  
  public void readData(ObjectDataInput in) throws IOException {
    int count = in.readInt();
    this.changedGroups = new HashMap(count);
    for (int i = 0; i < count; i++) {
      CPGroupId groupId = (CPGroupId)in.readObject();
      long currMembersCommitIndex = in.readLong();
      long newMembersCommitIndex = in.readLong();
      this.changedGroups.put(groupId, Tuple2.of(Long.valueOf(currMembersCommitIndex), Long.valueOf(newMembersCommitIndex)));
    } 
  }
  
  protected void toString(StringBuilder sb) { sb.append(", changedGroups=").append(this.changedGroups); }
}
