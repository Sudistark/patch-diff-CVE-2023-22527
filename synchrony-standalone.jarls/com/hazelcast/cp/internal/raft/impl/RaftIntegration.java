package com.hazelcast.cp.internal.raft.impl;

import com.hazelcast.core.Endpoint;
import com.hazelcast.cp.internal.raft.impl.dto.AppendFailureResponse;
import com.hazelcast.cp.internal.raft.impl.dto.AppendRequest;
import com.hazelcast.cp.internal.raft.impl.dto.AppendSuccessResponse;
import com.hazelcast.cp.internal.raft.impl.dto.InstallSnapshot;
import com.hazelcast.cp.internal.raft.impl.dto.PreVoteRequest;
import com.hazelcast.cp.internal.raft.impl.dto.PreVoteResponse;
import com.hazelcast.cp.internal.raft.impl.dto.VoteRequest;
import com.hazelcast.cp.internal.raft.impl.dto.VoteResponse;
import com.hazelcast.internal.util.SimpleCompletableFuture;
import com.hazelcast.logging.ILogger;
import java.util.concurrent.TimeUnit;

public interface RaftIntegration {
  ILogger getLogger(String paramString);
  
  boolean isReady();
  
  boolean isReachable(Endpoint paramEndpoint);
  
  boolean send(PreVoteRequest paramPreVoteRequest, Endpoint paramEndpoint);
  
  boolean send(PreVoteResponse paramPreVoteResponse, Endpoint paramEndpoint);
  
  boolean send(VoteRequest paramVoteRequest, Endpoint paramEndpoint);
  
  boolean send(VoteResponse paramVoteResponse, Endpoint paramEndpoint);
  
  boolean send(AppendRequest paramAppendRequest, Endpoint paramEndpoint);
  
  boolean send(AppendSuccessResponse paramAppendSuccessResponse, Endpoint paramEndpoint);
  
  boolean send(AppendFailureResponse paramAppendFailureResponse, Endpoint paramEndpoint);
  
  boolean send(InstallSnapshot paramInstallSnapshot, Endpoint paramEndpoint);
  
  Object runOperation(Object paramObject, long paramLong);
  
  Object takeSnapshot(long paramLong);
  
  void restoreSnapshot(Object paramObject, long paramLong);
  
  void execute(Runnable paramRunnable);
  
  void schedule(Runnable paramRunnable, long paramLong, TimeUnit paramTimeUnit);
  
  SimpleCompletableFuture newCompletableFuture();
  
  Object getAppendedEntryOnLeaderElection();
  
  void onNodeStatusChange(RaftNodeStatus paramRaftNodeStatus);
}
