package com.hazelcast.cp.internal.raft.impl;

import com.hazelcast.core.Endpoint;
import com.hazelcast.core.ICompletableFuture;
import com.hazelcast.cp.CPGroupId;
import com.hazelcast.cp.internal.raft.MembershipChangeMode;
import com.hazelcast.cp.internal.raft.QueryPolicy;
import com.hazelcast.cp.internal.raft.impl.dto.AppendFailureResponse;
import com.hazelcast.cp.internal.raft.impl.dto.AppendRequest;
import com.hazelcast.cp.internal.raft.impl.dto.AppendSuccessResponse;
import com.hazelcast.cp.internal.raft.impl.dto.InstallSnapshot;
import com.hazelcast.cp.internal.raft.impl.dto.PreVoteRequest;
import com.hazelcast.cp.internal.raft.impl.dto.PreVoteResponse;
import com.hazelcast.cp.internal.raft.impl.dto.VoteRequest;
import com.hazelcast.cp.internal.raft.impl.dto.VoteResponse;
import java.util.Collection;

public interface RaftNode {
  CPGroupId getGroupId();
  
  Endpoint getLocalMember();
  
  Endpoint getLeader();
  
  RaftNodeStatus getStatus();
  
  Collection<Endpoint> getInitialMembers();
  
  Collection<Endpoint> getCommittedMembers();
  
  Collection<Endpoint> getAppliedMembers();
  
  boolean isTerminatedOrSteppedDown();
  
  void forceSetTerminatedStatus();
  
  void handlePreVoteRequest(PreVoteRequest paramPreVoteRequest);
  
  void handlePreVoteResponse(PreVoteResponse paramPreVoteResponse);
  
  void handleVoteRequest(VoteRequest paramVoteRequest);
  
  void handleVoteResponse(VoteResponse paramVoteResponse);
  
  void handleAppendRequest(AppendRequest paramAppendRequest);
  
  void handleAppendResponse(AppendSuccessResponse paramAppendSuccessResponse);
  
  void handleAppendResponse(AppendFailureResponse paramAppendFailureResponse);
  
  void handleInstallSnapshot(InstallSnapshot paramInstallSnapshot);
  
  ICompletableFuture replicate(Object paramObject);
  
  ICompletableFuture replicateMembershipChange(Endpoint paramEndpoint, MembershipChangeMode paramMembershipChangeMode);
  
  ICompletableFuture replicateMembershipChange(Endpoint paramEndpoint, MembershipChangeMode paramMembershipChangeMode, long paramLong);
  
  ICompletableFuture query(Object paramObject, QueryPolicy paramQueryPolicy);
}
