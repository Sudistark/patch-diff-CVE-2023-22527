package com.hazelcast.cp.internal;

import com.hazelcast.cp.CPGroupId;
import com.hazelcast.logging.ILogger;
import com.hazelcast.nio.serialization.DataSerializable;
import com.hazelcast.spi.NodeEngine;
import com.hazelcast.util.EmptyStatement;
import java.util.logging.Level;

public abstract class RaftOp implements DataSerializable {
  private NodeEngine nodeEngine;
  
  public abstract Object run(CPGroupId paramCPGroupId, long paramLong) throws Exception;
  
  public NodeEngine getNodeEngine() { return this.nodeEngine; }
  
  public RaftOp setNodeEngine(NodeEngine nodeEngine) {
    this.nodeEngine = nodeEngine;
    return this;
  }
  
  public <T> T getService() { return (T)this.nodeEngine.getService(getServiceName()); }
  
  protected ILogger getLogger() { return getNodeEngine().getLogger(getClass()); }
  
  protected abstract String getServiceName();
  
  public void logFailure(Throwable e) {
    ILogger logger = getLogger();
    if (e instanceof com.hazelcast.spi.exception.SilentException) {
      if (logger.isFinestEnabled())
        logger.finest(e.getMessage(), e); 
    } else if (e instanceof com.hazelcast.spi.exception.RetryableException) {
      if (logger.isFineEnabled())
        logger.fine(e.getClass().getName() + ": " + e.getMessage()); 
    } else if (e instanceof OutOfMemoryError) {
      try {
        logger.severe(e.getMessage(), e);
      } catch (Throwable t) {
        EmptyStatement.ignore(t);
      } 
    } else {
      Level level = (this.nodeEngine != null && this.nodeEngine.isRunning()) ? Level.WARNING : Level.FINE;
      if (logger.isLoggable(level))
        logger.log(level, e.getMessage(), e); 
    } 
  }
  
  protected void toString(StringBuilder sb) {}
  
  public final String toString() {
    StringBuilder sb = (new StringBuilder(getClass().getName())).append('{');
    sb.append("serviceName='").append(getServiceName()).append('\'');
    toString(sb);
    sb.append('}');
    return sb.toString();
  }
}
