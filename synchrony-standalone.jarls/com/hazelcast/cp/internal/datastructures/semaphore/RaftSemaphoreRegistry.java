package com.hazelcast.cp.internal.datastructures.semaphore;

import com.hazelcast.cp.CPGroupId;
import com.hazelcast.cp.internal.datastructures.spi.blocking.BlockingResource;
import com.hazelcast.cp.internal.datastructures.spi.blocking.ResourceRegistry;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import java.util.Collection;
import java.util.Map;
import java.util.UUID;

public class RaftSemaphoreRegistry extends ResourceRegistry<AcquireInvocationKey, RaftSemaphore> implements IdentifiedDataSerializable {
  RaftSemaphoreRegistry() {}
  
  RaftSemaphoreRegistry(CPGroupId groupId) { super(groupId); }
  
  protected RaftSemaphore createNewResource(CPGroupId groupId, String name) { return new RaftSemaphore(groupId, name); }
  
  protected RaftSemaphoreRegistry cloneForSnapshot() {
    RaftSemaphoreRegistry clone = new RaftSemaphoreRegistry();
    clone.groupId = this.groupId;
    for (Map.Entry<String, RaftSemaphore> e : this.resources.entrySet())
      clone.resources.put(e.getKey(), ((RaftSemaphore)e.getValue()).cloneForSnapshot()); 
    clone.destroyedNames.addAll(this.destroyedNames);
    clone.waitTimeouts.putAll(this.waitTimeouts);
    return clone;
  }
  
  Collection<AcquireInvocationKey> init(String name, int permits) {
    Collection<AcquireInvocationKey> acquired = ((RaftSemaphore)getOrInitResource(name)).init(permits);
    for (AcquireInvocationKey key : acquired)
      removeWaitKey(name, key); 
    return acquired;
  }
  
  int availablePermits(String name) {
    RaftSemaphore semaphore = (RaftSemaphore)getResourceOrNull(name);
    return (semaphore != null) ? semaphore.getAvailable() : 0;
  }
  
  AcquireResult acquire(String name, AcquireInvocationKey key, long timeoutMs) {
    AcquireResult result = ((RaftSemaphore)getOrInitResource(name)).acquire(key, (timeoutMs != 0L));
    for (AcquireInvocationKey waitKey : result.cancelledWaitKeys())
      removeWaitKey(name, waitKey); 
    if (result.status() == AcquireResult.AcquireStatus.WAIT_KEY_ADDED)
      addWaitKey(name, key, timeoutMs); 
    return result;
  }
  
  ReleaseResult release(String name, SemaphoreEndpoint endpoint, UUID invocationUid, int permits) {
    ReleaseResult result = ((RaftSemaphore)getOrInitResource(name)).release(endpoint, invocationUid, permits);
    for (AcquireInvocationKey key : result.acquiredWaitKeys())
      removeWaitKey(name, key); 
    for (AcquireInvocationKey key : result.cancelledWaitKeys())
      removeWaitKey(name, key); 
    return result;
  }
  
  AcquireResult drainPermits(String name, SemaphoreEndpoint endpoint, UUID invocationUid) {
    AcquireResult result = ((RaftSemaphore)getOrInitResource(name)).drain(endpoint, invocationUid);
    for (AcquireInvocationKey key : result.cancelledWaitKeys())
      removeWaitKey(name, key); 
    return result;
  }
  
  ReleaseResult changePermits(String name, SemaphoreEndpoint endpoint, UUID invocationUid, int permits) {
    ReleaseResult result = ((RaftSemaphore)getOrInitResource(name)).change(endpoint, invocationUid, permits);
    for (AcquireInvocationKey key : result.acquiredWaitKeys())
      removeWaitKey(name, key); 
    for (AcquireInvocationKey key : result.cancelledWaitKeys())
      removeWaitKey(name, key); 
    return result;
  }
  
  public int getFactoryId() { return RaftSemaphoreDataSerializerHook.F_ID; }
  
  public int getId() { return 1; }
}
