package com.hazelcast.cp.internal.datastructures.semaphore.client;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.CPSemaphoreGetSemaphoreTypeCodec;
import com.hazelcast.client.impl.protocol.task.AbstractMessageTask;
import com.hazelcast.config.cp.CPSemaphoreConfig;
import com.hazelcast.instance.Node;
import com.hazelcast.nio.Connection;
import java.security.Permission;

public class GetSemaphoreTypeMessageTask extends AbstractMessageTask<CPSemaphoreGetSemaphoreTypeCodec.RequestParameters> {
  public GetSemaphoreTypeMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected void processMessage() {
    CPSemaphoreConfig config = this.nodeEngine.getConfig().getCPSubsystemConfig().findSemaphoreConfig(((CPSemaphoreGetSemaphoreTypeCodec.RequestParameters)this.parameters).proxyName);
    boolean jdkCompatible = (config != null && config.isJDKCompatible());
    sendResponse(Boolean.valueOf(jdkCompatible));
  }
  
  protected CPSemaphoreGetSemaphoreTypeCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return CPSemaphoreGetSemaphoreTypeCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return CPSemaphoreGetSemaphoreTypeCodec.encodeResponse(((Boolean)response).booleanValue()); }
  
  public String getServiceName() { return "hz:raft:semaphoreService"; }
  
  public Permission getRequiredPermission() { return null; }
  
  public String getDistributedObjectName() { return ((CPSemaphoreGetSemaphoreTypeCodec.RequestParameters)this.parameters).proxyName; }
  
  public String getMethodName() { return null; }
  
  public Object[] getParameters() { return new Object[0]; }
}
