package com.hazelcast.cp.internal.datastructures.semaphore.client;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.CPSemaphoreAvailablePermitsCodec;
import com.hazelcast.cp.internal.client.AbstractCPMessageTask;
import com.hazelcast.cp.internal.datastructures.semaphore.operation.AvailablePermitsOp;
import com.hazelcast.cp.internal.raft.QueryPolicy;
import com.hazelcast.instance.Node;
import com.hazelcast.nio.Connection;
import com.hazelcast.security.permission.SemaphorePermission;
import java.security.Permission;

public class AvailablePermitsMessageTask extends AbstractCPMessageTask<CPSemaphoreAvailablePermitsCodec.RequestParameters> {
  public AvailablePermitsMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected void processMessage() { query(((CPSemaphoreAvailablePermitsCodec.RequestParameters)this.parameters).groupId, new AvailablePermitsOp(((CPSemaphoreAvailablePermitsCodec.RequestParameters)this.parameters).name), QueryPolicy.LINEARIZABLE); }
  
  protected CPSemaphoreAvailablePermitsCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return CPSemaphoreAvailablePermitsCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return CPSemaphoreAvailablePermitsCodec.encodeResponse(((Integer)response).intValue()); }
  
  public String getServiceName() { return "hz:raft:semaphoreService"; }
  
  public Permission getRequiredPermission() { return new SemaphorePermission(((CPSemaphoreAvailablePermitsCodec.RequestParameters)this.parameters).name, new String[] { "read" }); }
  
  public String getDistributedObjectName() { return ((CPSemaphoreAvailablePermitsCodec.RequestParameters)this.parameters).name; }
  
  public String getMethodName() { return "availablePermits"; }
  
  public Object[] getParameters() { return new Object[0]; }
}
