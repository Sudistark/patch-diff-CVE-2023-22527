package com.hazelcast.cp.internal.datastructures.semaphore.client;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.CPSemaphoreChangeCodec;
import com.hazelcast.cp.internal.client.AbstractCPMessageTask;
import com.hazelcast.cp.internal.datastructures.semaphore.operation.ChangePermitsOp;
import com.hazelcast.instance.Node;
import com.hazelcast.nio.Connection;
import com.hazelcast.security.permission.SemaphorePermission;
import java.security.Permission;

public class ChangePermitsMessageTask extends AbstractCPMessageTask<CPSemaphoreChangeCodec.RequestParameters> {
  public ChangePermitsMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected void processMessage() {
    ChangePermitsOp changePermitsOp = new ChangePermitsOp(((CPSemaphoreChangeCodec.RequestParameters)this.parameters).name, ((CPSemaphoreChangeCodec.RequestParameters)this.parameters).sessionId, ((CPSemaphoreChangeCodec.RequestParameters)this.parameters).threadId, ((CPSemaphoreChangeCodec.RequestParameters)this.parameters).invocationUid, ((CPSemaphoreChangeCodec.RequestParameters)this.parameters).permits);
    invoke(((CPSemaphoreChangeCodec.RequestParameters)this.parameters).groupId, changePermitsOp);
  }
  
  protected CPSemaphoreChangeCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return CPSemaphoreChangeCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return CPSemaphoreChangeCodec.encodeResponse(((Boolean)response).booleanValue()); }
  
  public String getServiceName() { return "hz:raft:semaphoreService"; }
  
  public Permission getRequiredPermission() { return (((CPSemaphoreChangeCodec.RequestParameters)this.parameters).permits < 0) ? new SemaphorePermission(((CPSemaphoreChangeCodec.RequestParameters)this.parameters).name, new String[] { "acquire" }) : new SemaphorePermission(((CPSemaphoreChangeCodec.RequestParameters)this.parameters).name, new String[] { "release" }); }
  
  public String getDistributedObjectName() { return ((CPSemaphoreChangeCodec.RequestParameters)this.parameters).name; }
  
  public String getMethodName() { return (((CPSemaphoreChangeCodec.RequestParameters)this.parameters).permits > 0) ? "increasePermits" : "reducePermits"; }
  
  public Object[] getParameters() { return new Object[] { Integer.valueOf(Math.abs(((CPSemaphoreChangeCodec.RequestParameters)this.parameters).permits)) }; }
}
