package com.hazelcast.cp.internal.datastructures.semaphore.client;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.CPSemaphoreAcquireCodec;
import com.hazelcast.cp.internal.client.AbstractCPMessageTask;
import com.hazelcast.cp.internal.datastructures.semaphore.operation.AcquirePermitsOp;
import com.hazelcast.instance.Node;
import com.hazelcast.nio.Connection;
import com.hazelcast.security.permission.SemaphorePermission;
import java.security.Permission;
import java.util.concurrent.TimeUnit;

public class AcquirePermitsMessageTask extends AbstractCPMessageTask<CPSemaphoreAcquireCodec.RequestParameters> {
  public AcquirePermitsMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected void processMessage() {
    AcquirePermitsOp acquirePermitsOp = new AcquirePermitsOp(((CPSemaphoreAcquireCodec.RequestParameters)this.parameters).name, ((CPSemaphoreAcquireCodec.RequestParameters)this.parameters).sessionId, ((CPSemaphoreAcquireCodec.RequestParameters)this.parameters).threadId, ((CPSemaphoreAcquireCodec.RequestParameters)this.parameters).invocationUid, ((CPSemaphoreAcquireCodec.RequestParameters)this.parameters).permits, ((CPSemaphoreAcquireCodec.RequestParameters)this.parameters).timeoutMs);
    invoke(((CPSemaphoreAcquireCodec.RequestParameters)this.parameters).groupId, acquirePermitsOp);
  }
  
  protected CPSemaphoreAcquireCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return CPSemaphoreAcquireCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return CPSemaphoreAcquireCodec.encodeResponse(((Boolean)response).booleanValue()); }
  
  public String getServiceName() { return "hz:raft:semaphoreService"; }
  
  public Permission getRequiredPermission() { return new SemaphorePermission(((CPSemaphoreAcquireCodec.RequestParameters)this.parameters).name, new String[] { "acquire" }); }
  
  public String getDistributedObjectName() { return ((CPSemaphoreAcquireCodec.RequestParameters)this.parameters).name; }
  
  public String getMethodName() { return (((CPSemaphoreAcquireCodec.RequestParameters)this.parameters).timeoutMs >= 0L) ? "tryAcquire" : "acquire"; }
  
  public Object[] getParameters() {
    if (((CPSemaphoreAcquireCodec.RequestParameters)this.parameters).timeoutMs > 0L)
      return new Object[] { Integer.valueOf(((CPSemaphoreAcquireCodec.RequestParameters)this.parameters).permits), Long.valueOf(((CPSemaphoreAcquireCodec.RequestParameters)this.parameters).timeoutMs), TimeUnit.MILLISECONDS }; 
    return new Object[] { Integer.valueOf(((CPSemaphoreAcquireCodec.RequestParameters)this.parameters).permits) };
  }
}
