package com.hazelcast.cp.internal.datastructures.lock.operation;

import com.hazelcast.cp.CPGroupId;
import com.hazelcast.cp.internal.IndeterminateOperationStateAware;
import com.hazelcast.cp.internal.RaftOp;
import com.hazelcast.cp.internal.datastructures.lock.RaftLockDataSerializerHook;
import com.hazelcast.cp.internal.datastructures.lock.RaftLockService;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import java.io.IOException;

public class GetLockOwnershipStateOp extends RaftOp implements IndeterminateOperationStateAware, IdentifiedDataSerializable {
  private String name;
  
  public GetLockOwnershipStateOp() {}
  
  public GetLockOwnershipStateOp(String name) { this.name = name; }
  
  public Object run(CPGroupId groupId, long commitIndex) {
    RaftLockService service = (RaftLockService)getService();
    return service.getLockOwnershipState(groupId, this.name);
  }
  
  public boolean isRetryableOnIndeterminateOperationState() { return true; }
  
  public final String getServiceName() { return "hz:raft:lockService"; }
  
  public int getFactoryId() { return RaftLockDataSerializerHook.F_ID; }
  
  public int getId() { return 9; }
  
  public void writeData(ObjectDataOutput out) throws IOException { out.writeUTF(this.name); }
  
  public void readData(ObjectDataInput in) throws IOException { this.name = in.readUTF(); }
  
  protected void toString(StringBuilder sb) {
    super.toString(sb);
    sb.append(", name=").append(this.name);
  }
}
