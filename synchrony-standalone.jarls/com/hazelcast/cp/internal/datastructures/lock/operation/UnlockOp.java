package com.hazelcast.cp.internal.datastructures.lock.operation;

import com.hazelcast.cp.CPGroupId;
import com.hazelcast.cp.internal.IndeterminateOperationStateAware;
import com.hazelcast.cp.internal.datastructures.lock.RaftLockService;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import java.io.IOException;
import java.util.UUID;

public class UnlockOp extends AbstractLockOp implements IndeterminateOperationStateAware {
  public UnlockOp() {}
  
  public UnlockOp(String name, long sessionId, long threadId, UUID invUid) { super(name, sessionId, threadId, invUid); }
  
  public Object run(CPGroupId groupId, long commitIndex) {
    RaftLockService service = (RaftLockService)getService();
    return Boolean.valueOf(service.release(groupId, commitIndex, this.name, getLockEndpoint(), this.invocationUid));
  }
  
  public boolean isRetryableOnIndeterminateOperationState() { return true; }
  
  public int getId() { return 8; }
}
