package com.hazelcast.cp.internal.datastructures.lock.client;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.CPFencedLockUnlockCodec;
import com.hazelcast.cp.internal.client.AbstractCPMessageTask;
import com.hazelcast.cp.internal.datastructures.lock.operation.UnlockOp;
import com.hazelcast.instance.Node;
import com.hazelcast.nio.Connection;
import com.hazelcast.security.permission.LockPermission;
import java.security.Permission;

public class UnlockMessageTask extends AbstractCPMessageTask<CPFencedLockUnlockCodec.RequestParameters> {
  public UnlockMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected void processMessage() {
    UnlockOp unlockOp = new UnlockOp(((CPFencedLockUnlockCodec.RequestParameters)this.parameters).name, ((CPFencedLockUnlockCodec.RequestParameters)this.parameters).sessionId, ((CPFencedLockUnlockCodec.RequestParameters)this.parameters).threadId, ((CPFencedLockUnlockCodec.RequestParameters)this.parameters).invocationUid);
    invoke(((CPFencedLockUnlockCodec.RequestParameters)this.parameters).groupId, unlockOp);
  }
  
  protected CPFencedLockUnlockCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return CPFencedLockUnlockCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return CPFencedLockUnlockCodec.encodeResponse(((Boolean)response).booleanValue()); }
  
  public String getServiceName() { return "hz:raft:lockService"; }
  
  public Permission getRequiredPermission() { return new LockPermission(((CPFencedLockUnlockCodec.RequestParameters)this.parameters).name, new String[] { "lock" }); }
  
  public String getDistributedObjectName() { return ((CPFencedLockUnlockCodec.RequestParameters)this.parameters).name; }
  
  public String getMethodName() { return "unlock"; }
  
  public Object[] getParameters() { return new Object[0]; }
}
