package com.hazelcast.cp.internal.datastructures.spi.operation;

import com.hazelcast.cp.CPGroupId;
import com.hazelcast.cp.internal.RaftOp;
import com.hazelcast.cp.internal.datastructures.RaftDataServiceDataSerializerHook;
import com.hazelcast.cp.internal.datastructures.spi.RaftRemoteService;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import java.io.IOException;

public class DestroyRaftObjectOp extends RaftOp implements IdentifiedDataSerializable {
  private String serviceName;
  
  private String objectName;
  
  public DestroyRaftObjectOp() {}
  
  public DestroyRaftObjectOp(String serviceName, String objectName) {
    this.serviceName = serviceName;
    this.objectName = objectName;
  }
  
  public Object run(CPGroupId groupId, long commitIndex) {
    RaftRemoteService service = (RaftRemoteService)getService();
    return Boolean.valueOf(service.destroyRaftObject(groupId, this.objectName));
  }
  
  protected String getServiceName() { return this.serviceName; }
  
  public int getFactoryId() { return RaftDataServiceDataSerializerHook.F_ID; }
  
  public int getId() { return 3; }
  
  public void writeData(ObjectDataOutput out) throws IOException {
    out.writeUTF(this.serviceName);
    out.writeUTF(this.objectName);
  }
  
  public void readData(ObjectDataInput in) throws IOException {
    this.serviceName = in.readUTF();
    this.objectName = in.readUTF();
  }
  
  protected void toString(StringBuilder sb) { sb.append(", serviceName=").append(this.serviceName)
      .append(", objectName=").append(this.objectName); }
}
