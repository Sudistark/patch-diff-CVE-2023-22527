package com.hazelcast.cp.internal.datastructures.spi.client;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.CPGroupCreateCPGroupCodec;
import com.hazelcast.client.impl.protocol.task.AbstractMessageTask;
import com.hazelcast.core.ExecutionCallback;
import com.hazelcast.cp.internal.RaftGroupId;
import com.hazelcast.cp.internal.RaftService;
import com.hazelcast.instance.Node;
import com.hazelcast.nio.Connection;
import java.security.Permission;

public class CreateRaftGroupMessageTask extends AbstractMessageTask<CPGroupCreateCPGroupCodec.RequestParameters> implements ExecutionCallback {
  public CreateRaftGroupMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected void processMessage() {
    RaftService service = (RaftService)this.nodeEngine.getService("hz:core:raft");
    service.createRaftGroupForProxyAsync(((CPGroupCreateCPGroupCodec.RequestParameters)this.parameters).proxyName).andThen(this);
  }
  
  public void onResponse(Object response) { sendResponse(response); }
  
  public void onFailure(Throwable t) { handleProcessingFailure(t); }
  
  protected CPGroupCreateCPGroupCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return CPGroupCreateCPGroupCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return CPGroupCreateCPGroupCodec.encodeResponse((RaftGroupId)response); }
  
  public String getServiceName() { return "hz:core:raft"; }
  
  public String getDistributedObjectName() { return ((CPGroupCreateCPGroupCodec.RequestParameters)this.parameters).proxyName; }
  
  public Permission getRequiredPermission() { return null; }
  
  public String getMethodName() { return "createRaftGroup"; }
  
  public Object[] getParameters() { return new Object[] { ((CPGroupCreateCPGroupCodec.RequestParameters)this.parameters).proxyName }; }
}
