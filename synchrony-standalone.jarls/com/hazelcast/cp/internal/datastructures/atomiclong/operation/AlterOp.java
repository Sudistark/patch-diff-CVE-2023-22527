package com.hazelcast.cp.internal.datastructures.atomiclong.operation;

import com.hazelcast.core.IFunction;
import com.hazelcast.cp.CPGroupId;
import com.hazelcast.cp.internal.datastructures.atomiclong.RaftAtomicLong;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.util.Preconditions;
import java.io.IOException;

public class AlterOp extends AbstractAtomicLongOp {
  private IFunction<Long, Long> function;
  
  private AlterResultType alterResultType;
  
  public AlterOp() {}
  
  public AlterOp(String name, IFunction<Long, Long> function, AlterResultType alterResultType) {
    super(name);
    Preconditions.checkNotNull(alterResultType);
    this.function = function;
    this.alterResultType = alterResultType;
  }
  
  public int getId() { return 5; }
  
  public Object run(CPGroupId groupId, long commitIndex) {
    RaftAtomicLong atomic = getAtomicLong(groupId);
    long before = atomic.getAndAdd(0L);
    long after = ((Long)this.function.apply(Long.valueOf(before))).longValue();
    atomic.getAndSet(after);
    return Long.valueOf((this.alterResultType == AlterResultType.OLD_VALUE) ? before : after);
  }
  
  public void writeData(ObjectDataOutput out) throws IOException {
    super.writeData(out);
    out.writeObject(this.function);
    out.writeUTF(this.alterResultType.name());
  }
  
  public void readData(ObjectDataInput in) throws IOException {
    super.readData(in);
    this.function = (IFunction)in.readObject();
    this.alterResultType = AlterResultType.valueOf(in.readUTF());
  }
}
