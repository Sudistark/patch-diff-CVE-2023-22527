package com.hazelcast.cp.internal.datastructures.atomiclong.client;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.CPAtomicLongCompareAndSetCodec;
import com.hazelcast.cp.internal.client.AbstractCPMessageTask;
import com.hazelcast.cp.internal.datastructures.atomiclong.operation.CompareAndSetOp;
import com.hazelcast.instance.Node;
import com.hazelcast.nio.Connection;
import com.hazelcast.security.permission.AtomicLongPermission;
import java.security.Permission;

public class CompareAndSetMessageTask extends AbstractCPMessageTask<CPAtomicLongCompareAndSetCodec.RequestParameters> {
  public CompareAndSetMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected void processMessage() { invoke(((CPAtomicLongCompareAndSetCodec.RequestParameters)this.parameters).groupId, new CompareAndSetOp(((CPAtomicLongCompareAndSetCodec.RequestParameters)this.parameters).name, ((CPAtomicLongCompareAndSetCodec.RequestParameters)this.parameters).expected, ((CPAtomicLongCompareAndSetCodec.RequestParameters)this.parameters).updated)); }
  
  public String getServiceName() { return "hz:raft:atomicLongService"; }
  
  public Permission getRequiredPermission() { return new AtomicLongPermission(((CPAtomicLongCompareAndSetCodec.RequestParameters)this.parameters).name, new String[] { "modify" }); }
  
  public String getDistributedObjectName() { return ((CPAtomicLongCompareAndSetCodec.RequestParameters)this.parameters).name; }
  
  public String getMethodName() { return "compareAndSet"; }
  
  public Object[] getParameters() { return new Object[] { Long.valueOf(((CPAtomicLongCompareAndSetCodec.RequestParameters)this.parameters).expected), Long.valueOf(((CPAtomicLongCompareAndSetCodec.RequestParameters)this.parameters).updated) }; }
  
  protected CPAtomicLongCompareAndSetCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return CPAtomicLongCompareAndSetCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return CPAtomicLongCompareAndSetCodec.encodeResponse(((Boolean)response).booleanValue()); }
}
