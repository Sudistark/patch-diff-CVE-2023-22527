package com.hazelcast.cp.internal.datastructures.atomiclong.proxy;

import com.hazelcast.core.IAtomicLong;
import com.hazelcast.core.ICompletableFuture;
import com.hazelcast.core.IFunction;
import com.hazelcast.cp.CPGroupId;
import com.hazelcast.cp.internal.RaftGroupId;
import com.hazelcast.cp.internal.RaftInvocationManager;
import com.hazelcast.cp.internal.RaftService;
import com.hazelcast.cp.internal.datastructures.atomiclong.operation.AddAndGetOp;
import com.hazelcast.cp.internal.datastructures.atomiclong.operation.AlterOp;
import com.hazelcast.cp.internal.datastructures.atomiclong.operation.ApplyOp;
import com.hazelcast.cp.internal.datastructures.atomiclong.operation.CompareAndSetOp;
import com.hazelcast.cp.internal.datastructures.atomiclong.operation.GetAndAddOp;
import com.hazelcast.cp.internal.datastructures.atomiclong.operation.GetAndSetOp;
import com.hazelcast.cp.internal.datastructures.atomiclong.operation.LocalGetOp;
import com.hazelcast.cp.internal.datastructures.spi.operation.DestroyRaftObjectOp;
import com.hazelcast.cp.internal.raft.QueryPolicy;
import com.hazelcast.internal.util.SimpleCompletableFuture;
import com.hazelcast.spi.InternalCompletableFuture;
import com.hazelcast.spi.NodeEngine;
import com.hazelcast.util.ExceptionUtil;

public class RaftAtomicLongProxy implements IAtomicLong {
  private final RaftInvocationManager invocationManager;
  
  private final RaftGroupId groupId;
  
  private final String proxyName;
  
  private final String objectName;
  
  public RaftAtomicLongProxy(NodeEngine nodeEngine, RaftGroupId groupId, String proxyName, String objectName) {
    RaftService service = (RaftService)nodeEngine.getService("hz:core:raft");
    this.invocationManager = service.getInvocationManager();
    this.groupId = groupId;
    this.proxyName = proxyName;
    this.objectName = objectName;
  }
  
  public long addAndGet(long delta) { return ((Long)addAndGetAsync(delta).join()).longValue(); }
  
  public long incrementAndGet() { return addAndGet(1L); }
  
  public long decrementAndGet() { return addAndGet(-1L); }
  
  public boolean compareAndSet(long expect, long update) { return ((Boolean)compareAndSetAsync(expect, update).join()).booleanValue(); }
  
  public long getAndAdd(long delta) { return ((Long)getAndAddAsync(delta).join()).longValue(); }
  
  public long get() { return getAndAdd(0L); }
  
  public long getAndIncrement() { return getAndAdd(1L); }
  
  public long getAndSet(long newValue) { return ((Long)getAndSetAsync(newValue).join()).longValue(); }
  
  public void set(long newValue) { getAndSet(newValue); }
  
  public InternalCompletableFuture<Long> addAndGetAsync(long delta) { return this.invocationManager.invoke(this.groupId, new AddAndGetOp(this.objectName, delta)); }
  
  public InternalCompletableFuture<Long> incrementAndGetAsync() { return addAndGetAsync(1L); }
  
  public InternalCompletableFuture<Long> decrementAndGetAsync() { return addAndGetAsync(-1L); }
  
  public InternalCompletableFuture<Boolean> compareAndSetAsync(long expect, long update) { return this.invocationManager.invoke(this.groupId, new CompareAndSetOp(this.objectName, expect, update)); }
  
  public InternalCompletableFuture<Long> getAndAddAsync(long delta) { return this.invocationManager.invoke(this.groupId, new GetAndAddOp(this.objectName, delta)); }
  
  public InternalCompletableFuture<Long> getAsync() { return getAndAddAsync(0L); }
  
  public InternalCompletableFuture<Long> getAndIncrementAsync() { return getAndAddAsync(1L); }
  
  public InternalCompletableFuture<Long> getAndSetAsync(long newValue) { return this.invocationManager.invoke(this.groupId, new GetAndSetOp(this.objectName, newValue)); }
  
  public InternalCompletableFuture<Void> setAsync(long newValue) { return getAndSetAsync(newValue); }
  
  public void alter(IFunction<Long, Long> function) { doAlter(function, AlterOp.AlterResultType.NEW_VALUE); }
  
  public long alterAndGet(IFunction<Long, Long> function) { return doAlter(function, AlterOp.AlterResultType.NEW_VALUE); }
  
  public long getAndAlter(IFunction<Long, Long> function) { return doAlter(function, AlterOp.AlterResultType.OLD_VALUE); }
  
  private long doAlter(IFunction<Long, Long> function, AlterOp.AlterResultType alterResultType) { return ((Long)doAlterAsync(function, alterResultType).join()).longValue(); }
  
  private InternalCompletableFuture<Long> doAlterAsync(IFunction<Long, Long> function, AlterOp.AlterResultType alterResultType) { return this.invocationManager.invoke(this.groupId, new AlterOp(this.objectName, function, alterResultType)); }
  
  public <R> R apply(IFunction<Long, R> function) { return (R)applyAsync(function).join(); }
  
  public InternalCompletableFuture<Void> alterAsync(IFunction<Long, Long> function) { return doAlterAsync(function, AlterOp.AlterResultType.NEW_VALUE); }
  
  public InternalCompletableFuture<Long> alterAndGetAsync(IFunction<Long, Long> function) { return doAlterAsync(function, AlterOp.AlterResultType.NEW_VALUE); }
  
  public InternalCompletableFuture<Long> getAndAlterAsync(IFunction<Long, Long> function) { return doAlterAsync(function, AlterOp.AlterResultType.OLD_VALUE); }
  
  public <R> InternalCompletableFuture<R> applyAsync(IFunction<Long, R> function) { return this.invocationManager.invoke(this.groupId, new ApplyOp(this.objectName, function)); }
  
  public long localGet(QueryPolicy queryPolicy) {
    ICompletableFuture iCompletableFuture = localGetAsync(queryPolicy);
    try {
      return ((Long)iCompletableFuture.get()).longValue();
    } catch (Exception e) {
      throw ExceptionUtil.rethrow(e);
    } 
  }
  
  public ICompletableFuture<Long> localGetAsync(QueryPolicy queryPolicy) {
    SimpleCompletableFuture<Long> resultFuture = new SimpleCompletableFuture<Long>(null, null);
    InternalCompletableFuture internalCompletableFuture = this.invocationManager.queryLocally(this.groupId, new LocalGetOp(this.objectName), queryPolicy);
    internalCompletableFuture.andThen(new Object(this, resultFuture, queryPolicy));
    return resultFuture;
  }
  
  public String getPartitionKey() { throw new UnsupportedOperationException(); }
  
  public String getName() { return this.proxyName; }
  
  public String getServiceName() { return "hz:raft:atomicLongService"; }
  
  public void destroy() { this.invocationManager.invoke(this.groupId, new DestroyRaftObjectOp(getServiceName(), this.objectName)).join(); }
  
  public CPGroupId getGroupId() { return this.groupId; }
}
