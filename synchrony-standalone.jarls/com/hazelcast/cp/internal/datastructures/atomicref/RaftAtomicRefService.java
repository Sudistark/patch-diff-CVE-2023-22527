package com.hazelcast.cp.internal.datastructures.atomicref;

import com.hazelcast.core.DistributedObject;
import com.hazelcast.core.IAtomicReference;
import com.hazelcast.cp.CPGroupId;
import com.hazelcast.cp.internal.RaftGroupId;
import com.hazelcast.cp.internal.RaftNodeLifecycleAwareService;
import com.hazelcast.cp.internal.RaftService;
import com.hazelcast.cp.internal.datastructures.atomicref.proxy.RaftAtomicRefProxy;
import com.hazelcast.cp.internal.datastructures.spi.RaftManagedService;
import com.hazelcast.cp.internal.datastructures.spi.RaftRemoteService;
import com.hazelcast.cp.internal.raft.SnapshotAwareService;
import com.hazelcast.cp.internal.util.Tuple2;
import com.hazelcast.nio.serialization.Data;
import com.hazelcast.spi.NodeEngine;
import com.hazelcast.spi.exception.DistributedObjectDestroyedException;
import com.hazelcast.util.ExceptionUtil;
import com.hazelcast.util.Preconditions;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;

public class RaftAtomicRefService extends Object implements RaftManagedService, RaftRemoteService, RaftNodeLifecycleAwareService, SnapshotAwareService<RaftAtomicRefSnapshot> {
  public static final String SERVICE_NAME = "hz:raft:atomicRefService";
  
  private final Map<Tuple2<CPGroupId, String>, RaftAtomicRef> atomicRefs;
  
  private final Set<Tuple2<CPGroupId, String>> destroyedRefs;
  
  private final NodeEngine nodeEngine;
  
  public RaftAtomicRefService(NodeEngine nodeEngine) {
    this.atomicRefs = new ConcurrentHashMap();
    this
      .destroyedRefs = Collections.newSetFromMap(new ConcurrentHashMap());
    this.nodeEngine = nodeEngine;
  }
  
  public void init(NodeEngine nodeEngine, Properties properties) { this.raftService = (RaftService)nodeEngine.getService("hz:core:raft"); }
  
  public void reset() {}
  
  public void shutdown(boolean terminate) {}
  
  public void onCPSubsystemRestart() {
    this.atomicRefs.clear();
    this.destroyedRefs.clear();
  }
  
  public RaftAtomicRefSnapshot takeSnapshot(CPGroupId groupId, long commitIndex) {
    Preconditions.checkNotNull(groupId);
    Map<String, Data> refs = new HashMap<String, Data>();
    for (RaftAtomicRef ref : this.atomicRefs.values()) {
      if (ref.groupId().equals(groupId))
        refs.put(ref.name(), ref.get()); 
    } 
    Set<String> destroyed = new HashSet<String>();
    for (Tuple2<CPGroupId, String> tuple : this.destroyedRefs) {
      if (groupId.equals(tuple.element1))
        destroyed.add(tuple.element2); 
    } 
    return new RaftAtomicRefSnapshot(refs, destroyed);
  }
  
  public void restoreSnapshot(CPGroupId groupId, long commitIndex, RaftAtomicRefSnapshot snapshot) {
    Preconditions.checkNotNull(groupId);
    for (Map.Entry<String, Data> e : snapshot.getRefs()) {
      String name = (String)e.getKey();
      Data val = (Data)e.getValue();
      this.atomicRefs.put(Tuple2.of(groupId, name), new RaftAtomicRef(groupId, name, val));
    } 
    for (String name : snapshot.getDestroyed())
      this.destroyedRefs.add(Tuple2.of(groupId, name)); 
  }
  
  public void onRaftGroupDestroyed(CPGroupId groupId) {
    Iterator<Tuple2<CPGroupId, String>> iter = this.atomicRefs.keySet().iterator();
    while (iter.hasNext()) {
      Tuple2<CPGroupId, String> next = (Tuple2)iter.next();
      if (groupId.equals(next.element1)) {
        this.destroyedRefs.add(next);
        iter.remove();
      } 
    } 
  }
  
  public void onRaftNodeSteppedDown(CPGroupId groupId) {}
  
  public boolean destroyRaftObject(CPGroupId groupId, String name) {
    Tuple2<CPGroupId, String> key = Tuple2.of(groupId, name);
    this.destroyedRefs.add(key);
    return (this.atomicRefs.remove(key) != null);
  }
  
  public RaftAtomicRef getAtomicRef(CPGroupId groupId, String name) {
    Preconditions.checkNotNull(groupId);
    Preconditions.checkNotNull(name);
    Tuple2<CPGroupId, String> key = Tuple2.of(groupId, name);
    if (this.destroyedRefs.contains(key))
      throw new DistributedObjectDestroyedException("AtomicReference[" + name + "] is already destroyed!"); 
    RaftAtomicRef atomicRef = (RaftAtomicRef)this.atomicRefs.get(key);
    if (atomicRef == null) {
      atomicRef = new RaftAtomicRef(groupId, name);
      this.atomicRefs.put(key, atomicRef);
    } 
    return atomicRef;
  }
  
  public IAtomicReference createProxy(String proxyName) {
    try {
      proxyName = RaftService.withoutDefaultGroupName(proxyName);
      RaftGroupId groupId = this.raftService.createRaftGroupForProxy(proxyName);
      return new RaftAtomicRefProxy(this.nodeEngine, groupId, proxyName, RaftService.getObjectNameForProxy(proxyName));
    } catch (Exception e) {
      throw ExceptionUtil.rethrow(e);
    } 
  }
}
