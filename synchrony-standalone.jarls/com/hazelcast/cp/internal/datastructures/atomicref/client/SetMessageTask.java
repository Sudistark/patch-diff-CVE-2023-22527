package com.hazelcast.cp.internal.datastructures.atomicref.client;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.CPAtomicRefSetCodec;
import com.hazelcast.cp.internal.client.AbstractCPMessageTask;
import com.hazelcast.cp.internal.datastructures.atomicref.operation.SetOp;
import com.hazelcast.instance.Node;
import com.hazelcast.nio.Connection;
import com.hazelcast.security.permission.AtomicReferencePermission;
import java.security.Permission;

public class SetMessageTask extends AbstractCPMessageTask<CPAtomicRefSetCodec.RequestParameters> {
  public SetMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected void processMessage() { invoke(((CPAtomicRefSetCodec.RequestParameters)this.parameters).groupId, new SetOp(((CPAtomicRefSetCodec.RequestParameters)this.parameters).name, ((CPAtomicRefSetCodec.RequestParameters)this.parameters).newValue, ((CPAtomicRefSetCodec.RequestParameters)this.parameters).returnOldValue)); }
  
  protected CPAtomicRefSetCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return CPAtomicRefSetCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return CPAtomicRefSetCodec.encodeResponse(this.serializationService.toData(response)); }
  
  public String getServiceName() { return "hz:raft:atomicRefService"; }
  
  public Permission getRequiredPermission() { return new AtomicReferencePermission(((CPAtomicRefSetCodec.RequestParameters)this.parameters).name, new String[] { "modify" }); }
  
  public String getDistributedObjectName() { return ((CPAtomicRefSetCodec.RequestParameters)this.parameters).name; }
  
  public String getMethodName() { return ((CPAtomicRefSetCodec.RequestParameters)this.parameters).returnOldValue ? "getAndSet" : "set"; }
  
  public Object[] getParameters() { return new Object[] { ((CPAtomicRefSetCodec.RequestParameters)this.parameters).newValue }; }
}
