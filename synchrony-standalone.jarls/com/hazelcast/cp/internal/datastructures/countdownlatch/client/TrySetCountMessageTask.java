package com.hazelcast.cp.internal.datastructures.countdownlatch.client;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.codec.CPCountDownLatchTrySetCountCodec;
import com.hazelcast.cp.internal.client.AbstractCPMessageTask;
import com.hazelcast.cp.internal.datastructures.countdownlatch.operation.TrySetCountOp;
import com.hazelcast.instance.Node;
import com.hazelcast.nio.Connection;
import com.hazelcast.security.permission.CountDownLatchPermission;
import java.security.Permission;

public class TrySetCountMessageTask extends AbstractCPMessageTask<CPCountDownLatchTrySetCountCodec.RequestParameters> {
  public TrySetCountMessageTask(ClientMessage clientMessage, Node node, Connection connection) { super(clientMessage, node, connection); }
  
  protected void processMessage() { invoke(((CPCountDownLatchTrySetCountCodec.RequestParameters)this.parameters).groupId, new TrySetCountOp(((CPCountDownLatchTrySetCountCodec.RequestParameters)this.parameters).name, ((CPCountDownLatchTrySetCountCodec.RequestParameters)this.parameters).count)); }
  
  protected CPCountDownLatchTrySetCountCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) { return CPCountDownLatchTrySetCountCodec.decodeRequest(clientMessage); }
  
  protected ClientMessage encodeResponse(Object response) { return CPCountDownLatchTrySetCountCodec.encodeResponse(((Boolean)response).booleanValue()); }
  
  public String getServiceName() { return "hz:raft:countDownLatchService"; }
  
  public Permission getRequiredPermission() { return new CountDownLatchPermission(((CPCountDownLatchTrySetCountCodec.RequestParameters)this.parameters).name, new String[] { "modify" }); }
  
  public String getDistributedObjectName() { return ((CPCountDownLatchTrySetCountCodec.RequestParameters)this.parameters).name; }
  
  public String getMethodName() { return "trySetCount"; }
  
  public Object[] getParameters() { return new Object[] { Integer.valueOf(((CPCountDownLatchTrySetCountCodec.RequestParameters)this.parameters).count) }; }
}
