package com.hazelcast.cp.internal.datastructures.countdownlatch;

import com.hazelcast.core.DistributedObject;
import com.hazelcast.core.ICountDownLatch;
import com.hazelcast.cp.CPGroupId;
import com.hazelcast.cp.internal.RaftGroupId;
import com.hazelcast.cp.internal.RaftService;
import com.hazelcast.cp.internal.datastructures.countdownlatch.proxy.RaftCountDownLatchProxy;
import com.hazelcast.cp.internal.datastructures.spi.blocking.AbstractBlockingService;
import com.hazelcast.cp.internal.datastructures.spi.blocking.ResourceRegistry;
import com.hazelcast.cp.internal.util.Tuple2;
import com.hazelcast.spi.NodeEngine;
import com.hazelcast.util.ExceptionUtil;
import java.util.Collection;
import java.util.UUID;

public class RaftCountDownLatchService extends AbstractBlockingService<AwaitInvocationKey, RaftCountDownLatch, RaftCountDownLatchRegistry> {
  public static final String SERVICE_NAME = "hz:raft:countDownLatchService";
  
  public RaftCountDownLatchService(NodeEngine nodeEngine) { super(nodeEngine); }
  
  public boolean trySetCount(CPGroupId groupId, String name, int count) { return ((RaftCountDownLatchRegistry)getOrInitRegistry(groupId)).trySetCount(name, count); }
  
  public int countDown(CPGroupId groupId, String name, UUID invocationUuid, int expectedRound) {
    RaftCountDownLatchRegistry registry = (RaftCountDownLatchRegistry)getOrInitRegistry(groupId);
    Tuple2<Integer, Collection<AwaitInvocationKey>> t = registry.countDown(name, invocationUuid, expectedRound);
    notifyWaitKeys(groupId, name, (Collection)t.element2, Boolean.valueOf(true));
    return ((Integer)t.element1).intValue();
  }
  
  public boolean await(CPGroupId groupId, String name, AwaitInvocationKey key, long timeoutMillis) {
    boolean success = ((RaftCountDownLatchRegistry)getOrInitRegistry(groupId)).await(name, key, timeoutMillis);
    if (!success)
      scheduleTimeout(groupId, name, key.invocationUid(), timeoutMillis); 
    return success;
  }
  
  public int getRemainingCount(CPGroupId groupId, String name) { return ((RaftCountDownLatchRegistry)getOrInitRegistry(groupId)).getRemainingCount(name); }
  
  public int getRound(CPGroupId groupId, String name) { return ((RaftCountDownLatchRegistry)getOrInitRegistry(groupId)).getRound(name); }
  
  protected RaftCountDownLatchRegistry createNewRegistry(CPGroupId groupId) { return new RaftCountDownLatchRegistry(groupId); }
  
  protected Object expiredWaitKeyResponse() { return Boolean.valueOf(false); }
  
  protected String serviceName() { return "hz:raft:countDownLatchService"; }
  
  public ICountDownLatch createProxy(String proxyName) {
    try {
      proxyName = RaftService.withoutDefaultGroupName(proxyName);
      RaftService service = (RaftService)this.nodeEngine.getService("hz:core:raft");
      RaftGroupId groupId = service.createRaftGroupForProxy(proxyName);
      return new RaftCountDownLatchProxy(this.nodeEngine, groupId, proxyName, RaftService.getObjectNameForProxy(proxyName));
    } catch (Exception e) {
      throw ExceptionUtil.rethrow(e);
    } 
  }
}
