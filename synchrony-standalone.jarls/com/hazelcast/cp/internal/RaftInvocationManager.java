package com.hazelcast.cp.internal;

import com.hazelcast.core.HazelcastException;
import com.hazelcast.cp.CPGroupId;
import com.hazelcast.cp.internal.operation.ChangeRaftGroupMembershipOp;
import com.hazelcast.cp.internal.operation.DefaultRaftReplicateOp;
import com.hazelcast.cp.internal.operation.DestroyRaftGroupOp;
import com.hazelcast.cp.internal.operation.RaftQueryOp;
import com.hazelcast.cp.internal.raft.MembershipChangeMode;
import com.hazelcast.cp.internal.raft.QueryPolicy;
import com.hazelcast.cp.internal.raftop.metadata.CreateRaftGroupOp;
import com.hazelcast.cp.internal.raftop.metadata.GetActiveCPMembersOp;
import com.hazelcast.internal.cluster.Versions;
import com.hazelcast.internal.util.SimpleCompletableFuture;
import com.hazelcast.internal.util.SimpleCompletedFuture;
import com.hazelcast.logging.ILogger;
import com.hazelcast.spi.InternalCompletableFuture;
import com.hazelcast.spi.NodeEngine;
import com.hazelcast.spi.impl.NodeEngineImpl;
import com.hazelcast.spi.impl.operationservice.impl.OperationServiceImpl;
import com.hazelcast.spi.impl.operationservice.impl.RaftInvocation;
import com.hazelcast.spi.impl.operationservice.impl.RaftInvocationContext;
import com.hazelcast.spi.properties.GroupProperty;
import com.hazelcast.util.executor.ManagedExecutorService;
import java.util.List;

public class RaftInvocationManager {
  private final NodeEngineImpl nodeEngine;
  
  private final OperationServiceImpl operationService;
  
  private final RaftService raftService;
  
  private final ILogger logger;
  
  private final RaftInvocationContext raftInvocationContext;
  
  private final long operationCallTimeout;
  
  private final int invocationMaxRetryCount;
  
  private final long invocationRetryPauseMillis;
  
  private final boolean cpSubsystemEnabled;
  
  RaftInvocationManager(NodeEngine nodeEngine, RaftService raftService) {
    this.nodeEngine = (NodeEngineImpl)nodeEngine;
    this.operationService = (OperationServiceImpl)nodeEngine.getOperationService();
    this.logger = nodeEngine.getLogger(getClass());
    this.raftService = raftService;
    this.raftInvocationContext = new RaftInvocationContext(this.logger, raftService);
    this.invocationMaxRetryCount = nodeEngine.getProperties().getInteger(GroupProperty.INVOCATION_MAX_RETRY_COUNT);
    this.invocationRetryPauseMillis = nodeEngine.getProperties().getMillis(GroupProperty.INVOCATION_RETRY_PAUSE);
    this.operationCallTimeout = nodeEngine.getProperties().getMillis(GroupProperty.OPERATION_CALL_TIMEOUT_MILLIS);
    this.cpSubsystemEnabled = (raftService.getConfig().getCPMemberCount() > 0);
  }
  
  void reset() { this.raftInvocationContext.reset(); }
  
  public InternalCompletableFuture<RaftGroupId> createRaftGroup(String groupName) { return createRaftGroup(groupName, this.raftService.getConfig().getGroupSize()); }
  
  public InternalCompletableFuture<RaftGroupId> createRaftGroup(String groupName, int groupSize) {
    InternalCompletableFuture<RaftGroupId> completedFuture = completeExceptionallyIfCPSubsystemNotAvailable();
    if (completedFuture != null)
      return completedFuture; 
    ManagedExecutorService managedExecutorService = this.nodeEngine.getExecutionService().getExecutor("hz:async");
    SimpleCompletableFuture<RaftGroupId> resultFuture = new SimpleCompletableFuture<RaftGroupId>(managedExecutorService, this.logger);
    invokeGetMembersToCreateRaftGroup(groupName, groupSize, resultFuture);
    return resultFuture;
  }
  
  private <V> InternalCompletableFuture<V> completeExceptionallyIfCPSubsystemNotAvailable() {
    if (this.nodeEngine.getClusterService().getClusterVersion().isLessThan(Versions.V3_12))
      return new SimpleCompletedFuture(new UnsupportedOperationException("CP Subsystem is not available before version 3.12!")); 
    if (!this.cpSubsystemEnabled)
      return new SimpleCompletedFuture(new HazelcastException("CP Subsystem is not enabled!")); 
    return null;
  }
  
  private void invokeGetMembersToCreateRaftGroup(String groupName, int groupSize, SimpleCompletableFuture<RaftGroupId> resultFuture) {
    GetActiveCPMembersOp getActiveCPMembersOp = new GetActiveCPMembersOp();
    InternalCompletableFuture internalCompletableFuture = query(this.raftService.getMetadataGroupId(), getActiveCPMembersOp, QueryPolicy.LEADER_LOCAL);
    internalCompletableFuture.andThen(new Object(this, groupSize, groupName, resultFuture));
  }
  
  private void invokeCreateRaftGroup(String groupName, int groupSize, List<CPMemberInfo> members, SimpleCompletableFuture<RaftGroupId> resultFuture) {
    InternalCompletableFuture internalCompletableFuture = invoke(this.raftService.getMetadataGroupId(), new CreateRaftGroupOp(groupName, members));
    internalCompletableFuture.andThen(new Object(this, resultFuture, groupName, members, groupSize));
  }
  
  <T> InternalCompletableFuture<T> changeMembership(CPGroupId groupId, long membersCommitIndex, CPMemberInfo member, MembershipChangeMode membershipChangeMode) {
    InternalCompletableFuture<T> completedFuture = completeExceptionallyIfCPSubsystemNotAvailable();
    if (completedFuture != null)
      return completedFuture; 
    ChangeRaftGroupMembershipOp changeRaftGroupMembershipOp = new ChangeRaftGroupMembershipOp(groupId, membersCommitIndex, member, membershipChangeMode);
    RaftInvocation raftInvocation = new RaftInvocation(this.operationService.getInvocationContext(), this.raftInvocationContext, groupId, changeRaftGroupMembershipOp, this.invocationMaxRetryCount, this.invocationRetryPauseMillis, this.operationCallTimeout);
    return raftInvocation.invoke();
  }
  
  public <T> InternalCompletableFuture<T> invoke(CPGroupId groupId, RaftOp raftOp) { return invoke(groupId, raftOp, true); }
  
  public <T> InternalCompletableFuture<T> invoke(CPGroupId groupId, RaftOp raftOp, boolean deserializeResponse) {
    InternalCompletableFuture<T> completedFuture = completeExceptionallyIfCPSubsystemNotAvailable();
    if (completedFuture != null)
      return completedFuture; 
    DefaultRaftReplicateOp defaultRaftReplicateOp = new DefaultRaftReplicateOp(groupId, raftOp);
    RaftInvocation raftInvocation = new RaftInvocation(this.operationService.getInvocationContext(), this.raftInvocationContext, groupId, defaultRaftReplicateOp, this.invocationMaxRetryCount, this.invocationRetryPauseMillis, this.operationCallTimeout, deserializeResponse);
    return raftInvocation.invoke();
  }
  
  public <T> InternalCompletableFuture<T> query(CPGroupId groupId, RaftOp raftOp, QueryPolicy queryPolicy) { return query(groupId, raftOp, queryPolicy, true); }
  
  public <T> InternalCompletableFuture<T> query(CPGroupId groupId, RaftOp raftOp, QueryPolicy queryPolicy, boolean deserializeResponse) {
    InternalCompletableFuture<T> completedFuture = completeExceptionallyIfCPSubsystemNotAvailable();
    if (completedFuture != null)
      return completedFuture; 
    RaftQueryOp operation = new RaftQueryOp(groupId, raftOp, queryPolicy);
    RaftInvocation raftInvocation = new RaftInvocation(this.operationService.getInvocationContext(), this.raftInvocationContext, groupId, operation, this.invocationMaxRetryCount, this.invocationRetryPauseMillis, this.operationCallTimeout, deserializeResponse);
    return raftInvocation.invoke();
  }
  
  public <T> InternalCompletableFuture<T> queryLocally(CPGroupId groupId, RaftOp raftOp, QueryPolicy queryPolicy) {
    InternalCompletableFuture<T> completedFuture = completeExceptionallyIfCPSubsystemNotAvailable();
    if (completedFuture != null)
      return completedFuture; 
    RaftQueryOp operation = new RaftQueryOp(groupId, raftOp, queryPolicy);
    return this.nodeEngine.getOperationService().invokeOnTarget("hz:core:raft", operation, this.nodeEngine.getThisAddress());
  }
  
  public InternalCompletableFuture<Object> destroy(CPGroupId groupId) {
    InternalCompletableFuture<Object> completedFuture = completeExceptionallyIfCPSubsystemNotAvailable();
    if (completedFuture != null)
      return completedFuture; 
    DestroyRaftGroupOp destroyRaftGroupOp = new DestroyRaftGroupOp(groupId);
    RaftInvocation raftInvocation = new RaftInvocation(this.operationService.getInvocationContext(), this.raftInvocationContext, groupId, destroyRaftGroupOp, this.invocationMaxRetryCount, this.invocationRetryPauseMillis, this.operationCallTimeout);
    return raftInvocation.invoke();
  }
  
  public RaftInvocationContext getRaftInvocationContext() { return this.raftInvocationContext; }
}
