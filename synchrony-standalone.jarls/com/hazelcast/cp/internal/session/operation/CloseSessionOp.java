package com.hazelcast.cp.internal.session.operation;

import com.hazelcast.cp.CPGroupId;
import com.hazelcast.cp.internal.IndeterminateOperationStateAware;
import com.hazelcast.cp.internal.RaftOp;
import com.hazelcast.cp.internal.session.RaftSessionService;
import com.hazelcast.cp.internal.session.RaftSessionServiceDataSerializerHook;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import java.io.IOException;

public class CloseSessionOp extends RaftOp implements IndeterminateOperationStateAware, IdentifiedDataSerializable {
  private long sessionId;
  
  public CloseSessionOp() {}
  
  public CloseSessionOp(long sessionId) { this.sessionId = sessionId; }
  
  public Object run(CPGroupId groupId, long commitIndex) {
    RaftSessionService service = (RaftSessionService)getService();
    return Boolean.valueOf(service.closeSession(groupId, this.sessionId));
  }
  
  public boolean isRetryableOnIndeterminateOperationState() { return true; }
  
  public String getServiceName() { return "hz:core:raftSession"; }
  
  public int getFactoryId() { return RaftSessionServiceDataSerializerHook.F_ID; }
  
  public int getId() { return 6; }
  
  public void writeData(ObjectDataOutput out) throws IOException { out.writeLong(this.sessionId); }
  
  public void readData(ObjectDataInput in) throws IOException { this.sessionId = in.readLong(); }
  
  protected void toString(StringBuilder sb) { sb.append(", sessionId=").append(this.sessionId); }
}
