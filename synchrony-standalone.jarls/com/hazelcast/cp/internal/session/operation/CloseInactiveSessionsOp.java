package com.hazelcast.cp.internal.session.operation;

import com.hazelcast.cp.CPGroupId;
import com.hazelcast.cp.internal.IndeterminateOperationStateAware;
import com.hazelcast.cp.internal.RaftOp;
import com.hazelcast.cp.internal.session.RaftSessionService;
import com.hazelcast.cp.internal.session.RaftSessionServiceDataSerializerHook;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;

public class CloseInactiveSessionsOp extends RaftOp implements IndeterminateOperationStateAware, IdentifiedDataSerializable {
  private Collection<Long> sessions;
  
  public CloseInactiveSessionsOp() {}
  
  public CloseInactiveSessionsOp(Collection<Long> sessions) { this.sessions = sessions; }
  
  public Object run(CPGroupId groupId, long commitIndex) {
    RaftSessionService service = (RaftSessionService)getService();
    service.closeInactiveSessions(groupId, this.sessions);
    return null;
  }
  
  public boolean isRetryableOnIndeterminateOperationState() { return true; }
  
  public String getServiceName() { return "hz:core:raftSession"; }
  
  public int getFactoryId() { return RaftSessionServiceDataSerializerHook.F_ID; }
  
  public int getId() { return 8; }
  
  public void writeData(ObjectDataOutput out) throws IOException {
    out.writeInt(this.sessions.size());
    for (Iterator iterator = this.sessions.iterator(); iterator.hasNext(); ) {
      long sessionId = ((Long)iterator.next()).longValue();
      out.writeLong(sessionId);
    } 
  }
  
  public void readData(ObjectDataInput in) throws IOException {
    int count = in.readInt();
    this.sessions = new ArrayList();
    for (int i = 0; i < count; i++) {
      long sessionId = in.readLong();
      this.sessions.add(Long.valueOf(sessionId));
    } 
  }
}
