package com.hazelcast.cp.internal.session.operation;

import com.hazelcast.cp.CPGroupId;
import com.hazelcast.cp.internal.IndeterminateOperationStateAware;
import com.hazelcast.cp.internal.RaftOp;
import com.hazelcast.cp.internal.session.RaftSessionService;
import com.hazelcast.cp.internal.session.RaftSessionServiceDataSerializerHook;
import com.hazelcast.cp.internal.util.Tuple2;
import com.hazelcast.nio.ObjectDataInput;
import com.hazelcast.nio.ObjectDataOutput;
import com.hazelcast.nio.serialization.IdentifiedDataSerializable;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

public class ExpireSessionsOp extends RaftOp implements IndeterminateOperationStateAware, IdentifiedDataSerializable {
  private Collection<Tuple2<Long, Long>> sessions;
  
  public ExpireSessionsOp() {}
  
  public ExpireSessionsOp(Collection<Tuple2<Long, Long>> sessionIds) { this.sessions = sessionIds; }
  
  public Object run(CPGroupId groupId, long commitIndex) {
    RaftSessionService service = (RaftSessionService)getService();
    service.expireSessions(groupId, this.sessions);
    return null;
  }
  
  public boolean isRetryableOnIndeterminateOperationState() { return true; }
  
  public String getServiceName() { return "hz:core:raftSession"; }
  
  public int getFactoryId() { return RaftSessionServiceDataSerializerHook.F_ID; }
  
  public int getId() { return 7; }
  
  public void writeData(ObjectDataOutput out) throws IOException {
    out.writeInt(this.sessions.size());
    for (Tuple2<Long, Long> s : this.sessions) {
      out.writeLong(((Long)s.element1).longValue());
      out.writeLong(((Long)s.element2).longValue());
    } 
  }
  
  public void readData(ObjectDataInput in) throws IOException {
    int size = in.readInt();
    List<Tuple2<Long, Long>> sessionIds = new ArrayList<Tuple2<Long, Long>>();
    for (int i = 0; i < size; i++) {
      long sessionId = in.readLong();
      long version = in.readLong();
      sessionIds.add(Tuple2.of(Long.valueOf(sessionId), Long.valueOf(version)));
    } 
    this.sessions = sessionIds;
  }
  
  protected void toString(StringBuilder sb) { sb.append(", sessions=").append(this.sessions); }
}
