package com.hazelcast.cp.lock;

import com.hazelcast.core.DistributedObject;
import com.hazelcast.cp.CPGroupId;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;

public interface FencedLock extends Lock, DistributedObject {
  public static final long INVALID_FENCE = 0L;
  
  void lock();
  
  void lockInterruptibly();
  
  long lockAndGetFence();
  
  boolean tryLock();
  
  long tryLockAndGetFence();
  
  boolean tryLock(long paramLong, TimeUnit paramTimeUnit);
  
  long tryLockAndGetFence(long paramLong, TimeUnit paramTimeUnit);
  
  void unlock();
  
  long getFence();
  
  boolean isLocked();
  
  boolean isLockedByCurrentThread();
  
  int getLockCount();
  
  CPGroupId getGroupId();
  
  Condition newCondition();
}
