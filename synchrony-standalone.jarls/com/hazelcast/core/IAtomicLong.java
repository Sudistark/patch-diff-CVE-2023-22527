package com.hazelcast.core;

public interface IAtomicLong extends DistributedObject {
  String getName();
  
  long addAndGet(long paramLong);
  
  boolean compareAndSet(long paramLong1, long paramLong2);
  
  long decrementAndGet();
  
  long get();
  
  long getAndAdd(long paramLong);
  
  long getAndSet(long paramLong);
  
  long incrementAndGet();
  
  long getAndIncrement();
  
  void set(long paramLong);
  
  void alter(IFunction<Long, Long> paramIFunction);
  
  long alterAndGet(IFunction<Long, Long> paramIFunction);
  
  long getAndAlter(IFunction<Long, Long> paramIFunction);
  
  <R> R apply(IFunction<Long, R> paramIFunction);
  
  ICompletableFuture<Long> addAndGetAsync(long paramLong);
  
  ICompletableFuture<Boolean> compareAndSetAsync(long paramLong1, long paramLong2);
  
  ICompletableFuture<Long> decrementAndGetAsync();
  
  ICompletableFuture<Long> getAsync();
  
  ICompletableFuture<Long> getAndAddAsync(long paramLong);
  
  ICompletableFuture<Long> getAndSetAsync(long paramLong);
  
  ICompletableFuture<Long> incrementAndGetAsync();
  
  ICompletableFuture<Long> getAndIncrementAsync();
  
  ICompletableFuture<Void> setAsync(long paramLong);
  
  ICompletableFuture<Void> alterAsync(IFunction<Long, Long> paramIFunction);
  
  ICompletableFuture<Long> alterAndGetAsync(IFunction<Long, Long> paramIFunction);
  
  ICompletableFuture<Long> getAndAlterAsync(IFunction<Long, Long> paramIFunction);
  
  <R> ICompletableFuture<R> applyAsync(IFunction<Long, R> paramIFunction);
}
