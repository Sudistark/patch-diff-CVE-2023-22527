package com.hazelcast.core;

import com.hazelcast.cardinality.CardinalityEstimator;
import com.hazelcast.config.Config;
import com.hazelcast.cp.CPSubsystem;
import com.hazelcast.crdt.pncounter.PNCounter;
import com.hazelcast.durableexecutor.DurableExecutorService;
import com.hazelcast.flakeidgen.FlakeIdGenerator;
import com.hazelcast.logging.LoggingService;
import com.hazelcast.mapreduce.JobTracker;
import com.hazelcast.quorum.QuorumService;
import com.hazelcast.ringbuffer.Ringbuffer;
import com.hazelcast.scheduledexecutor.IScheduledExecutorService;
import com.hazelcast.transaction.HazelcastXAResource;
import com.hazelcast.transaction.TransactionContext;
import com.hazelcast.transaction.TransactionException;
import com.hazelcast.transaction.TransactionOptions;
import com.hazelcast.transaction.TransactionalTask;
import java.util.Collection;
import java.util.concurrent.ConcurrentMap;

public interface HazelcastInstance {
  String getName();
  
  <E> IQueue<E> getQueue(String paramString);
  
  <E> ITopic<E> getTopic(String paramString);
  
  <E> ISet<E> getSet(String paramString);
  
  <E> IList<E> getList(String paramString);
  
  <K, V> IMap<K, V> getMap(String paramString);
  
  <K, V> ReplicatedMap<K, V> getReplicatedMap(String paramString);
  
  JobTracker getJobTracker(String paramString);
  
  <K, V> MultiMap<K, V> getMultiMap(String paramString);
  
  @Deprecated
  ILock getLock(String paramString);
  
  <E> Ringbuffer<E> getRingbuffer(String paramString);
  
  <E> ITopic<E> getReliableTopic(String paramString);
  
  Cluster getCluster();
  
  Endpoint getLocalEndpoint();
  
  IExecutorService getExecutorService(String paramString);
  
  DurableExecutorService getDurableExecutorService(String paramString);
  
  <T> T executeTransaction(TransactionalTask<T> paramTransactionalTask) throws TransactionException;
  
  <T> T executeTransaction(TransactionOptions paramTransactionOptions, TransactionalTask<T> paramTransactionalTask) throws TransactionException;
  
  TransactionContext newTransactionContext();
  
  TransactionContext newTransactionContext(TransactionOptions paramTransactionOptions);
  
  @Deprecated
  IdGenerator getIdGenerator(String paramString);
  
  FlakeIdGenerator getFlakeIdGenerator(String paramString);
  
  @Deprecated
  IAtomicLong getAtomicLong(String paramString);
  
  @Deprecated
  <E> IAtomicReference<E> getAtomicReference(String paramString);
  
  @Deprecated
  ICountDownLatch getCountDownLatch(String paramString);
  
  @Deprecated
  ISemaphore getSemaphore(String paramString);
  
  Collection<DistributedObject> getDistributedObjects();
  
  String addDistributedObjectListener(DistributedObjectListener paramDistributedObjectListener);
  
  boolean removeDistributedObjectListener(String paramString);
  
  Config getConfig();
  
  PartitionService getPartitionService();
  
  QuorumService getQuorumService();
  
  ClientService getClientService();
  
  LoggingService getLoggingService();
  
  LifecycleService getLifecycleService();
  
  <T extends DistributedObject> T getDistributedObject(String paramString1, String paramString2);
  
  ConcurrentMap<String, Object> getUserContext();
  
  HazelcastXAResource getXAResource();
  
  ICacheManager getCacheManager();
  
  CardinalityEstimator getCardinalityEstimator(String paramString);
  
  PNCounter getPNCounter(String paramString);
  
  IScheduledExecutorService getScheduledExecutorService(String paramString);
  
  CPSubsystem getCPSubsystem();
  
  void shutdown();
}
