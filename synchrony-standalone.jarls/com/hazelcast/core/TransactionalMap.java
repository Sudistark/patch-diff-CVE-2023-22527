package com.hazelcast.core;

import com.hazelcast.query.Predicate;
import com.hazelcast.transaction.TransactionalObject;
import java.util.Collection;
import java.util.Set;
import java.util.concurrent.TimeUnit;

public interface TransactionalMap<K, V> extends TransactionalObject, BaseMap<K, V> {
  boolean containsKey(Object paramObject);
  
  V get(Object paramObject);
  
  V getForUpdate(Object paramObject);
  
  int size();
  
  boolean isEmpty();
  
  V put(K paramK, V paramV);
  
  V put(K paramK, V paramV, long paramLong, TimeUnit paramTimeUnit);
  
  void set(K paramK, V paramV);
  
  V putIfAbsent(K paramK, V paramV);
  
  V replace(K paramK, V paramV);
  
  boolean replace(K paramK, V paramV1, V paramV2);
  
  V remove(Object paramObject);
  
  void delete(Object paramObject);
  
  boolean remove(Object paramObject1, Object paramObject2);
  
  Set<K> keySet();
  
  Set<K> keySet(Predicate paramPredicate);
  
  Collection<V> values();
  
  Collection<V> values(Predicate paramPredicate);
}
