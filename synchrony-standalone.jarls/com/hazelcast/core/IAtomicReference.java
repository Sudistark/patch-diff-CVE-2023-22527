package com.hazelcast.core;

public interface IAtomicReference<E> extends DistributedObject {
  boolean compareAndSet(E paramE1, E paramE2);
  
  E get();
  
  void set(E paramE);
  
  E getAndSet(E paramE);
  
  E setAndGet(E paramE);
  
  boolean isNull();
  
  void clear();
  
  boolean contains(E paramE);
  
  void alter(IFunction<E, E> paramIFunction);
  
  E alterAndGet(IFunction<E, E> paramIFunction);
  
  E getAndAlter(IFunction<E, E> paramIFunction);
  
  <R> R apply(IFunction<E, R> paramIFunction);
  
  ICompletableFuture<Boolean> compareAndSetAsync(E paramE1, E paramE2);
  
  ICompletableFuture<E> getAsync();
  
  ICompletableFuture<Void> setAsync(E paramE);
  
  ICompletableFuture<E> getAndSetAsync(E paramE);
  
  ICompletableFuture<Boolean> isNullAsync();
  
  ICompletableFuture<Void> clearAsync();
  
  ICompletableFuture<Boolean> containsAsync(E paramE);
  
  ICompletableFuture<Void> alterAsync(IFunction<E, E> paramIFunction);
  
  ICompletableFuture<E> alterAndGetAsync(IFunction<E, E> paramIFunction);
  
  ICompletableFuture<E> getAndAlterAsync(IFunction<E, E> paramIFunction);
  
  <R> ICompletableFuture<R> applyAsync(IFunction<E, R> paramIFunction);
}
