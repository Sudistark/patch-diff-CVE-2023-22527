package com.hazelcast.core;

import com.hazelcast.mapreduce.JobTracker;
import com.hazelcast.mapreduce.aggregation.Aggregation;
import com.hazelcast.mapreduce.aggregation.Supplier;
import com.hazelcast.monitor.LocalMultiMapStats;
import java.util.Collection;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.TimeUnit;

public interface MultiMap<K, V> extends BaseMultiMap<K, V> {
  boolean put(K paramK, V paramV);
  
  Collection<V> get(K paramK);
  
  boolean remove(Object paramObject1, Object paramObject2);
  
  Collection<V> remove(Object paramObject);
  
  void delete(Object paramObject);
  
  Set<K> localKeySet();
  
  Set<K> keySet();
  
  Collection<V> values();
  
  Set<Map.Entry<K, V>> entrySet();
  
  boolean containsKey(K paramK);
  
  boolean containsValue(Object paramObject);
  
  boolean containsEntry(K paramK, V paramV);
  
  int size();
  
  void clear();
  
  int valueCount(K paramK);
  
  String addLocalEntryListener(EntryListener<K, V> paramEntryListener);
  
  String addEntryListener(EntryListener<K, V> paramEntryListener, boolean paramBoolean);
  
  boolean removeEntryListener(String paramString);
  
  String addEntryListener(EntryListener<K, V> paramEntryListener, K paramK, boolean paramBoolean);
  
  void lock(K paramK);
  
  void lock(K paramK, long paramLong, TimeUnit paramTimeUnit);
  
  boolean isLocked(K paramK);
  
  boolean tryLock(K paramK);
  
  boolean tryLock(K paramK, long paramLong, TimeUnit paramTimeUnit) throws InterruptedException;
  
  boolean tryLock(K paramK, long paramLong1, TimeUnit paramTimeUnit1, long paramLong2, TimeUnit paramTimeUnit2) throws InterruptedException;
  
  void unlock(K paramK);
  
  void forceUnlock(K paramK);
  
  LocalMultiMapStats getLocalMultiMapStats();
  
  @Deprecated
  <SuppliedValue, Result> Result aggregate(Supplier<K, V, SuppliedValue> paramSupplier, Aggregation<K, SuppliedValue, Result> paramAggregation);
  
  @Deprecated
  <SuppliedValue, Result> Result aggregate(Supplier<K, V, SuppliedValue> paramSupplier, Aggregation<K, SuppliedValue, Result> paramAggregation, JobTracker paramJobTracker);
}
