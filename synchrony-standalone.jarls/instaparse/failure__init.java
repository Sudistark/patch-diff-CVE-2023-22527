package instaparse;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class failure__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__3;
  
  public static final AFn const__4;
  
  public static final Var const__5;
  
  public static final AFn const__13;
  
  public static final Var const__14;
  
  public static final AFn const__18;
  
  public static final Var const__19;
  
  public static final AFn const__22;
  
  public static final Var const__23;
  
  public static final AFn const__26;
  
  public static final Var const__27;
  
  public static final AFn const__30;
  
  public static final Var const__31;
  
  public static final AFn const__34;
  
  public static void load() { LockingTransaction.runInTransaction((Callable)new failure.fn__19403());
    const__5.setMeta((IPersistentMap)const__13);
    const__5.bindRoot(new failure.index__GT_line_column());
    const__14.setMeta((IPersistentMap)const__18);
    const__14.bindRoot(new failure.get_line());
    const__19.setMeta((IPersistentMap)const__22);
    const__19.bindRoot(new failure.marker());
    const__23.setMeta((IPersistentMap)const__26);
    const__23.bindRoot(new failure.augment_failure());
    const__27.setMeta((IPersistentMap)const__30);
    const__27.bindRoot(new failure.print_reason());
    const__31.setMeta((IPersistentMap)const__34);
    const__31.bindRoot(new failure.pprint_failure()); }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "instaparse.failure")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Facilities for printing and manipulating error messages." }));
    const__3 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Facilities for printing and manipulating error messages." });
    const__4 = (AFn)Symbol.intern(null, "clojure.core");
    const__5 = (Var)RT.var("instaparse.failure", "index->line-column");
    const__13 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "index"), Symbol.intern(null, "text")) })), RT.keyword(null, "doc"), "Takes an index into text, and determines the line and column info", RT.keyword(null, "line"), Integer.valueOf(6), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/failure.clj" });
    const__14 = (Var)RT.var("instaparse.failure", "get-line");
    const__18 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "n"), Symbol.intern(null, "text")) })), RT.keyword(null, "doc"), "Returns nth line of text, 1-based", RT.keyword(null, "line"), Integer.valueOf(16), RT.keyword(null, "column"), Integer.valueOf(4), RT.keyword(null, "file"), "instaparse/failure.clj" });
    const__19 = (Var)RT.var("instaparse.failure", "marker");
    const__22 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "n")) })), RT.keyword(null, "doc"), "Creates string with caret at nth position, 1-based", RT.keyword(null, "line"), Integer.valueOf(32), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/failure.clj" });
    const__23 = (Var)RT.var("instaparse.failure", "augment-failure");
    const__26 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "failure"), Symbol.intern(null, "text")) })), RT.keyword(null, "doc"), "Adds text, line, and column info to failure object.", RT.keyword(null, "line"), Integer.valueOf(39), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/failure.clj" });
    const__27 = (Var)RT.var("instaparse.failure", "print-reason");
    const__30 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "r")) })), RT.keyword(null, "doc"), "Provides special case for printing negative lookahead reasons", RT.keyword(null, "line"), Integer.valueOf(47), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/failure.clj" });
    const__31 = (Var)RT.var("instaparse.failure", "pprint-failure");
    const__34 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "line"), Symbol.intern(null, "column"), Symbol.intern(null, "text"), Symbol.intern(null, "reason")) })) })), RT.keyword(null, "doc"), "Takes an augmented failure object and prints the error message", RT.keyword(null, "line"), Integer.valueOf(63), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/failure.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("instaparse.failure__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
