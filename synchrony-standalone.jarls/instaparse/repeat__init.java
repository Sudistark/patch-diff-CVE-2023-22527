package instaparse;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentHashSet;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class repeat__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__11;
  
  public static final Var const__12;
  
  public static final AFn const__15;
  
  public static final Var const__16;
  
  public static final Var const__17;
  
  public static final AFn const__20;
  
  public static final Var const__21;
  
  public static final AFn const__24;
  
  public static final Var const__25;
  
  public static final AFn const__29;
  
  public static final Var const__30;
  
  public static final AFn const__33;
  
  public static final Var const__34;
  
  public static final AFn const__37;
  
  public static final Var const__38;
  
  public static final AFn const__41;
  
  public static final Var const__42;
  
  public static final AFn const__45;
  
  public static final Var const__46;
  
  public static final AFn const__49;
  
  public static final Var const__50;
  
  public static final AFn const__53;
  
  public static final Var const__54;
  
  public static final AFn const__57;
  
  public static final Var const__58;
  
  public static final AFn const__61;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new repeat.fn__20094());
    const__3.setMeta((IPersistentMap)const__11);
    const__3.bindRoot(new repeat.empty_result_QMARK_());
    const__12.setMeta((IPersistentMap)const__15);
    const__12














      
      .bindRoot(((IFn)const__16.getRawRoot()).invoke(null, null));
    const__17.setMeta((IPersistentMap)const__20);
    const__17.bindRoot(new repeat.get_end());
    const__21.setMeta((IPersistentMap)const__24);
    const__21.bindRoot(new repeat.parse_from_index());
    const__25.setMeta((IPersistentMap)const__29);
    const__25.bindRoot(new repeat.select_parse());
    const__30.setMeta((IPersistentMap)const__33);
    const__30.bindRoot(new repeat.repeat_parse_hiccup());
    const__34.setMeta((IPersistentMap)const__37);
    const__34.bindRoot(new repeat.repeat_parse_enlive());
    const__38.setMeta((IPersistentMap)const__41);
    const__38.bindRoot(new repeat.repeat_parse_no_tag());
    const__42.setMeta((IPersistentMap)const__45);
    const__42.bindRoot(new repeat.repeat_parse());
    const__46.setMeta((IPersistentMap)const__49);
    const__46.bindRoot(new repeat.repeat_parse_with_header());
    const__50.setMeta((IPersistentMap)const__53);
    const__50.bindRoot(new repeat.try_repeating_parse_strategy_with_header());
    const__54.setMeta((IPersistentMap)const__57);
    const__54.bindRoot(new repeat.try_repeating_parse_strategy());
    const__58.setMeta((IPersistentMap)const__61);
    const__58.bindRoot(new repeat.used_memory_optimization_QMARK_());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "instaparse.repeat");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("instaparse.repeat", "empty-result?");
    const__11 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "result")) })), RT.keyword(null, "line"), Integer.valueOf(12), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/repeat.clj" });
    const__12 = (Var)RT.var("instaparse.repeat", "failure-signal");
    const__15 = (AFn)RT.map(new Object[] { RT.keyword(null, "constant"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(17), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/repeat.clj" });
    const__16 = (Var)RT.var("instaparse.gll", "->Failure");
    const__17 = (Var)RT.var("instaparse.repeat", "get-end");
    const__20 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "parse"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "long") })), ((IObj)Tuple.create(Symbol.intern(null, "parse"), ((IObj)Symbol.intern(null, "index")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "long") })))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "long") })) })), RT.keyword(null, "line"), Integer.valueOf(19), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/repeat.clj" });
    const__21 = (Var)RT.var("instaparse.repeat", "parse-from-index");
    const__24 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "grammar"), Symbol.intern(null, "initial-parser"), Symbol.intern(null, "text"), Symbol.intern(null, "segment"), Symbol.intern(null, "index")) })), RT.keyword(null, "line"), Integer.valueOf(29), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/repeat.clj" });
    const__25 = (Var)RT.var("instaparse.repeat", "select-parse");
    const__29 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "grammar"), Symbol.intern(null, "initial-parser"), Symbol.intern(null, "text"), Symbol.intern(null, "segment"), Symbol.intern(null, "index"), Symbol.intern(null, "parses")) })), RT.keyword(null, "doc"), "Returns either:\n   [a-parse end-index a-list-of-valid-follow-up-parses]\n   [a-parse end-index nil] (successfully reached end of text)\n   nil (hit a dead-end with this strategy)", RT.keyword(null, "line"), Integer.valueOf(34), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/repeat.clj" });
    const__30 = (Var)RT.var("instaparse.repeat", "repeat-parse-hiccup");
    const__33 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "grammar"), Symbol.intern(null, "initial-parser"), Symbol.intern(null, "root-tag"), Symbol.intern(null, "text"), Symbol.intern(null, "segment")), Tuple.create(Symbol.intern(null, "grammar"), Symbol.intern(null, "initial-parser"), Symbol.intern(null, "root-tag"), Symbol.intern(null, "text"), Symbol.intern(null, "segment"), Symbol.intern(null, "index")) })), RT.keyword(null, "line"), Integer.valueOf(54), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/repeat.clj" });
    const__34 = (Var)RT.var("instaparse.repeat", "repeat-parse-enlive");
    const__37 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "grammar"), Symbol.intern(null, "initial-parser"), Symbol.intern(null, "root-tag"), Symbol.intern(null, "text"), Symbol.intern(null, "segment")), Tuple.create(Symbol.intern(null, "grammar"), Symbol.intern(null, "initial-parser"), Symbol.intern(null, "root-tag"), Symbol.intern(null, "text"), Symbol.intern(null, "segment"), Symbol.intern(null, "index")) })), RT.keyword(null, "line"), Integer.valueOf(78), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/repeat.clj" });
    const__38 = (Var)RT.var("instaparse.repeat", "repeat-parse-no-tag");
    const__41 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "grammar"), Symbol.intern(null, "initial-parser"), Symbol.intern(null, "text"), Symbol.intern(null, "segment")), Tuple.create(Symbol.intern(null, "grammar"), Symbol.intern(null, "initial-parser"), Symbol.intern(null, "text"), Symbol.intern(null, "segment"), Symbol.intern(null, "index")) })), RT.keyword(null, "line"), Integer.valueOf(102), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/repeat.clj" });
    const__42 = (Var)RT.var("instaparse.repeat", "repeat-parse");
    const__45 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "grammar"), Symbol.intern(null, "initial-parser"), Symbol.intern(null, "output-format"), Symbol.intern(null, "text")), ((IObj)Tuple.create(Symbol.intern(null, "grammar"), Symbol.intern(null, "initial-parser"), Symbol.intern(null, "output-format"), Symbol.intern(null, "root-tag"), Symbol.intern(null, "text"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(((IObj)PersistentList.create(Arrays.asList(new Object[] { PersistentHashSet.create(new Object[] { RT.keyword(null, "hiccup"), RT.keyword(null, "enlive") }), Symbol.intern(null, "output-format") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(128), RT.keyword(null, "column"), Integer.valueOf(12) }))) })) })), RT.keyword(null, "line"), Integer.valueOf(125), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/repeat.clj" });
    const__46 = (Var)RT.var("instaparse.repeat", "repeat-parse-with-header");
    const__49 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "grammar"), Symbol.intern(null, "header-parser"), Symbol.intern(null, "repeating-parser"), Symbol.intern(null, "output-format"), Symbol.intern(null, "root-tag"), Symbol.intern(null, "text")) })), RT.keyword(null, "line"), Integer.valueOf(135), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/repeat.clj" });
    const__50 = (Var)RT.var("instaparse.repeat", "try-repeating-parse-strategy-with-header");
    const__53 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "grammar"), Symbol.intern(null, "text"), Symbol.intern(null, "start-production"), Symbol.intern(null, "start-rule"), Symbol.intern(null, "output-format")) })), RT.keyword(null, "line"), Integer.valueOf(171), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/repeat.clj" });
    const__54 = (Var)RT.var("instaparse.repeat", "try-repeating-parse-strategy");
    const__57 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "parser"), Symbol.intern(null, "text"), Symbol.intern(null, "start-production")) })), RT.keyword(null, "line"), Integer.valueOf(187), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/repeat.clj" });
    const__58 = (Var)RT.var("instaparse.repeat", "used-memory-optimization?");
    const__61 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "tree")) })), RT.keyword(null, "line"), Integer.valueOf(218), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/repeat.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("instaparse.repeat__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
