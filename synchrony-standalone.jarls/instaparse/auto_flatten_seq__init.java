package instaparse;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.PersistentVector;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class auto_flatten_seq__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__10;
  
  public static final Object const__11;
  
  public static final Object const__12;
  
  public static final Var const__13;
  
  public static final Var const__14;
  
  public static final Var const__15;
  
  public static final Keyword const__16;
  
  public static final Var const__17;
  
  public static final ISeq const__18;
  
  public static final Var const__19;
  
  public static final Var const__20;
  
  public static final AFn const__24;
  
  public static final Keyword const__25;
  
  public static final AFn const__26;
  
  public static final Keyword const__27;
  
  public static final Keyword const__28;
  
  public static final AFn const__31;
  
  public static final Keyword const__32;
  
  public static final Var const__33;
  
  public static final Var const__34;
  
  public static final Var const__35;
  
  public static final AFn const__36;
  
  public static final AFn const__37;
  
  public static final Keyword const__38;
  
  public static final AFn const__39;
  
  public static final AFn const__40;
  
  public static final Var const__41;
  
  public static final AFn const__42;
  
  public static final Var const__43;
  
  public static final AFn const__48;
  
  public static final Var const__49;
  
  public static final AFn const__52;
  
  public static final Var const__53;
  
  public static final AFn const__56;
  
  public static final Var const__57;
  
  public static final AFn const__58;
  
  public static final Var const__59;
  
  public static final AFn const__60;
  
  public static final Var const__61;
  
  public static final AFn const__62;
  
  public static final Var const__63;
  
  public static final AFn const__67;
  
  public static final Var const__68;
  
  public static final AFn const__72;
  
  public static final Var const__73;
  
  public static final AFn const__76;
  
  public static final Var const__77;
  
  public static final AFn const__80;
  
  public static final Var const__81;
  
  public static final AFn const__84;
  
  public static final AFn const__87;
  
  public static final Var const__88;
  
  public static final AFn const__91;
  
  public static final Var const__92;
  
  public static final AFn const__95;
  
  public static final AFn const__97;
  
  public static final AFn const__100;
  
  public static final AFn const__103;
  
  public static final Var const__104;
  
  public static final AFn const__107;
  
  public static final Var const__108;
  
  public static final AFn const__111;
  
  public static final Object const__112;
  
  public static final Var const__113;
  
  public static final ISeq const__114;
  
  public static final AFn const__116;
  
  public static final AFn const__117;
  
  public static final AFn const__119;
  
  public static final AFn const__120;
  
  public static final AFn const__121;
  
  public static final AFn const__122;
  
  public static final Var const__123;
  
  public static final AFn const__126;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new auto_flatten_seq.fn__19251());
    const__3.setMeta((IPersistentMap)const__10);
    const__3.bindRoot(const__11);
    const__43.setMeta((IPersistentMap)const__48);
    const__43.bindRoot(new auto_flatten_seq.compile_if());
    ((Var)const__43)



      
      .setMacro();
    const__49.setMeta((IPersistentMap)const__52);
    const__49.bindRoot(new auto_flatten_seq.mix_collection_hash_bc());
    ((Var)const__49)



      
      .setMacro();
    const__53.setMeta((IPersistentMap)const__56);
    const__57.setMeta((IPersistentMap)const__58);
    const__59.setMeta((IPersistentMap)const__60);
    const__61.setMeta((IPersistentMap)const__62);
    const__63.setMeta((IPersistentMap)const__67);
    const__63.bindRoot(new auto_flatten_seq.hash_conj());
    ((Var)const__63)







      
      .setMacro();
    const__68.setMeta((IPersistentMap)const__72);
    const__68.bindRoot(new auto_flatten_seq.expt());
    const__73.setMeta((IPersistentMap)const__76);
    const__73.bindRoot(new auto_flatten_seq.delve());
    const__77.setMeta((IPersistentMap)const__80);
    const__77.bindRoot(new auto_flatten_seq.advance());
    const__81.setMeta((IPersistentMap)const__84);
    const__81.bindRoot(new auto_flatten_seq.flat_seq());
    const__57.setMeta((IPersistentMap)const__87);
    const__57.bindRoot(new auto_flatten_seq.hash_cat());
    const__88.setMeta((IPersistentMap)const__91);
    const__88.bindRoot(new auto_flatten_seq.hash_ordered_coll_without_mix());
    const__92.setMeta((IPersistentMap)const__95);
    const__92.bindRoot(new auto_flatten_seq.auto_flatten_seq());
    const__53.setMeta((IPersistentMap)const__97);
    const__53




































































































































































































      
      .bindRoot(((IFn)const__92.getRawRoot()).invoke(PersistentVector.EMPTY));
    const__59.setMeta((IPersistentMap)const__100);
    const__59.bindRoot(new auto_flatten_seq.afs_QMARK_());
    const__61.setMeta((IPersistentMap)const__103);
    const__61.bindRoot(new auto_flatten_seq.true_count());
    const__104.setMeta((IPersistentMap)const__107);
    const__104.bindRoot(new auto_flatten_seq.flat_vec_helper());
    const__108.setMeta((IPersistentMap)const__111);
    const__108.bindRoot(new auto_flatten_seq.flat_vec());
    const__123.setMeta((IPersistentMap)const__126);
    const__123.bindRoot(new auto_flatten_seq.convert_afs_to_vec());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "instaparse.auto-flatten-seq");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("instaparse.auto-flatten-seq", "threshold");
    const__10 = (AFn)RT.map(new Object[] { RT.keyword(null, "const"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(5), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/auto_flatten_seq.clj" });
    const__11 = Long.valueOf(32L);
    const__12 = RT.classForName("instaparse.auto_flatten_seq.ConjFlat");
    const__13 = (Var)RT.var("clojure.core", "alter-meta!");
    const__14 = (Var)RT.var("instaparse.auto-flatten-seq", "ConjFlat");
    const__15 = (Var)RT.var("clojure.core", "assoc");
    const__16 = (Keyword)RT.keyword(null, "doc");
    const__17 = (Var)RT.var("clojure.core", "assert-same-protocol");
    const__18 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "conj-flat")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "self"), Symbol.intern(null, "obj")) })) })), ((IObj)Symbol.intern(null, "cached?")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "self")) })) })) }));
    const__19 = (Var)RT.var("clojure.core", "alter-var-root");
    const__20 = (Var)RT.var("clojure.core", "merge");
    const__24 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "instaparse.auto_flatten_seq.ConjFlat"), RT.keyword(null, "on-interface"), RT.classForName("instaparse.auto_flatten_seq.ConjFlat") });
    const__25 = (Keyword)RT.keyword(null, "sigs");
    const__26 = (AFn)RT.map(new Object[] { RT.keyword(null, "conj-flat"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "conj-flat")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "self"), Symbol.intern(null, "obj")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "self"), Symbol.intern(null, "obj")) })), RT.keyword(null, "doc"), null }), RT.keyword(null, "cached?"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "cached?")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "self")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "self")) })), RT.keyword(null, "doc"), null }) });
    const__27 = (Keyword)RT.keyword(null, "var");
    const__28 = (Keyword)RT.keyword(null, "method-map");
    const__31 = (AFn)RT.map(new Object[] { RT.keyword(null, "conj-flat"), RT.keyword(null, "conj-flat"), RT.keyword(null, "cached?"), RT.keyword(null, "cached?") });
    const__32 = (Keyword)RT.keyword(null, "method-builders");
    const__33 = (Var)RT.var("clojure.core", "intern");
    const__34 = (Var)RT.var("clojure.core", "*ns*");
    const__35 = (Var)RT.var("clojure.core", "with-meta");
    const__36 = (AFn)((IObj)Symbol.intern(null, "conj-flat")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "self"), Symbol.intern(null, "obj")) })) }));
    const__37 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "conj-flat")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "self"), Symbol.intern(null, "obj")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "self"), Symbol.intern(null, "obj")) })), RT.keyword(null, "doc"), null });
    const__38 = (Keyword)RT.keyword(null, "protocol");
    const__39 = (AFn)((IObj)Symbol.intern(null, "cached?")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "self")) })) }));
    const__40 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "cached?")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "self")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "self")) })), RT.keyword(null, "doc"), null });
    const__41 = (Var)RT.var("clojure.core", "-reset-methods");
    const__42 = (AFn)Symbol.intern(null, "ConjFlat");
    const__43 = (Var)RT.var("instaparse.auto-flatten-seq", "compile-if");
    const__48 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "test"), Symbol.intern(null, "then"), Symbol.intern(null, "else")) })), RT.keyword(null, "line"), Integer.valueOf(12), RT.keyword(null, "column"), Integer.valueOf(9), RT.keyword(null, "file"), "instaparse/auto_flatten_seq.clj" });
    const__49 = (Var)RT.var("instaparse.auto-flatten-seq", "mix-collection-hash-bc");
    const__52 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "y")) })), RT.keyword(null, "line"), Integer.valueOf(17), RT.keyword(null, "column"), Integer.valueOf(9), RT.keyword(null, "file"), "instaparse/auto_flatten_seq.clj" });
    const__53 = (Var)RT.var("instaparse.auto-flatten-seq", "EMPTY");
    const__56 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(23), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/auto_flatten_seq.clj" });
    const__57 = (Var)RT.var("instaparse.auto-flatten-seq", "hash-cat");
    const__58 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(23), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/auto_flatten_seq.clj" });
    const__59 = (Var)RT.var("instaparse.auto-flatten-seq", "afs?");
    const__60 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(23), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/auto_flatten_seq.clj" });
    const__61 = (Var)RT.var("instaparse.auto-flatten-seq", "true-count");
    const__62 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(23), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/auto_flatten_seq.clj" });
    const__63 = (Var)RT.var("instaparse.auto-flatten-seq", "hash-conj");
    const__67 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "premix-hash-v"), Symbol.intern(null, "item")) })), RT.keyword(null, "line"), Integer.valueOf(26), RT.keyword(null, "column"), Integer.valueOf(4), RT.keyword(null, "file"), "instaparse/auto_flatten_seq.clj" });
    const__68 = (Var)RT.var("instaparse.auto-flatten-seq", "expt");
    const__72 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "base"), Symbol.intern(null, "pow")) })), RT.keyword(null, "line"), Integer.valueOf(37), RT.keyword(null, "column"), Integer.valueOf(4), RT.keyword(null, "file"), "instaparse/auto_flatten_seq.clj" });
    const__73 = (Var)RT.var("instaparse.auto-flatten-seq", "delve");
    const__76 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "v"), Symbol.intern(null, "index")) })), RT.keyword(null, "line"), Integer.valueOf(57), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/auto_flatten_seq.clj" });
    const__77 = (Var)RT.var("instaparse.auto-flatten-seq", "advance");
    const__80 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "v"), Symbol.intern(null, "index")) })), RT.keyword(null, "line"), Integer.valueOf(64), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/auto_flatten_seq.clj" });
    const__81 = (Var)RT.var("instaparse.auto-flatten-seq", "flat-seq");
    const__84 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "v")), Tuple.create(Symbol.intern(null, "v"), Symbol.intern(null, "index")) })), RT.keyword(null, "line"), Integer.valueOf(76), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/auto_flatten_seq.clj" });
    const__87 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(((IObj)Symbol.intern(null, "v1")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "AutoFlattenSeq") })), ((IObj)Symbol.intern(null, "v2")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "AutoFlattenSeq") })))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "long") })) })), RT.keyword(null, "line"), Integer.valueOf(233), RT.keyword(null, "column"), Integer.valueOf(4), RT.keyword(null, "file"), "instaparse/auto_flatten_seq.clj" });
    const__88 = (Var)RT.var("instaparse.auto-flatten-seq", "hash-ordered-coll-without-mix");
    const__91 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "v"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "long") })) })), RT.keyword(null, "line"), Integer.valueOf(247), RT.keyword(null, "column"), Integer.valueOf(4), RT.keyword(null, "file"), "instaparse/auto_flatten_seq.clj" });
    const__92 = (Var)RT.var("instaparse.auto-flatten-seq", "auto-flatten-seq");
    const__95 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "v")) })), RT.keyword(null, "line"), Integer.valueOf(278), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/auto_flatten_seq.clj" });
    const__97 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(285), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/auto_flatten_seq.clj" });
  }
  
  public static void __init1() {
    const__100 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })), RT.keyword(null, "line"), Integer.valueOf(287), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/auto_flatten_seq.clj" });
    const__103 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "v")) })), RT.keyword(null, "line"), Integer.valueOf(290), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/auto_flatten_seq.clj" });
    const__104 = (Var)RT.var("instaparse.auto-flatten-seq", "flat-vec-helper");
    const__107 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "acc"), Symbol.intern(null, "v")) })), RT.keyword(null, "line"), Integer.valueOf(297), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/auto_flatten_seq.clj" });
    const__108 = (Var)RT.var("instaparse.auto-flatten-seq", "flat-vec");
    const__111 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "v")) })), RT.keyword(null, "doc"), "Turns deep vector (like the vector inside of FlattenOnDemandVector) into a flat vec", RT.keyword(null, "line"), Integer.valueOf(305), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/auto_flatten_seq.clj" });
    const__112 = RT.classForName("instaparse.auto_flatten_seq.GetVec");
    const__113 = (Var)RT.var("instaparse.auto-flatten-seq", "GetVec");
    const__114 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "get-vec")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "self")) })) })) }));
    const__116 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "instaparse.auto_flatten_seq.GetVec"), RT.keyword(null, "on-interface"), RT.classForName("instaparse.auto_flatten_seq.GetVec") });
    const__117 = (AFn)RT.map(new Object[] { RT.keyword(null, "get-vec"), RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "PersistentVector"), RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "get-vec")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "self")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "self")) })), RT.keyword(null, "doc"), null }) });
    const__119 = (AFn)RT.map(new Object[] { RT.keyword(null, "get-vec"), RT.keyword(null, "get-vec") });
    const__120 = (AFn)((IObj)Symbol.intern(null, "get-vec")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "self")) })) }));
    const__121 = (AFn)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "PersistentVector"), RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "get-vec")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "self")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "self")) })), RT.keyword(null, "doc"), null });
    const__122 = (AFn)Symbol.intern(null, "GetVec");
    const__123 = (Var)RT.var("instaparse.auto-flatten-seq", "convert-afs-to-vec");
    const__126 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "afs")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "AutoFlattenSeq") }))) })), RT.keyword(null, "line"), Integer.valueOf(510), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/auto_flatten_seq.clj" });
  }
  
  static  {
    __init0();
    __init1();
    Compiler.pushNSandLoader(RT.classForName("instaparse.auto_flatten_seq__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
