package instaparse.gll;

import clojure.lang.AFn;
import clojure.lang.APersistentMap;
import clojure.lang.Associative;
import clojure.lang.Counted;
import clojure.lang.IFn;
import clojure.lang.IHashEq;
import clojure.lang.IKeywordLookup;
import clojure.lang.ILookup;
import clojure.lang.ILookupThunk;
import clojure.lang.IMapEntry;
import clojure.lang.IObj;
import clojure.lang.IPersistentCollection;
import clojure.lang.IPersistentMap;
import clojure.lang.IPersistentVector;
import clojure.lang.IRecord;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.MapEntry;
import clojure.lang.Numbers;
import clojure.lang.PersistentHashSet;
import clojure.lang.RT;
import clojure.lang.RecordIterator;
import clojure.lang.Symbol;
import clojure.lang.Util;
import clojure.lang.Var;
import java.io.Serializable;
import java.util.Collection;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

public final class Tramp implements IRecord, IHashEq, IObj, ILookup, IKeywordLookup, IPersistentMap, Map, Serializable {
  public final Object grammar;
  
  public final Object text;
  
  public final Object segment;
  
  public final Object fail_index;
  
  public final Object node_builder;
  
  public final Object stack;
  
  public final Object next_stack;
  
  public final Object generation;
  
  public final Object negative_listeners;
  
  public final Object msg_cache;
  
  public final Object nodes;
  
  public final Object success;
  
  public final Object failure;
  
  public final Object trace_QMARK_;
  
  public final Object __meta;
  
  public final Object __extmap;
  
  int __hash;
  
  int __hasheq;
  
  public static final Var const__0 = (Var)RT.var("clojure.core", "set");
  
  public static final Var const__1 = (Var)RT.var("clojure.core", "vals");
  
  public static final Var const__2 = (Var)RT.var("clojure.core", "keys");
  
  public static final Var const__4 = (Var)RT.var("clojure.core", "some");
  
  public static final Var const__7 = (Var)RT.var("clojure.core", "contains?");
  
  public static final Keyword const__8 = (Keyword)RT.keyword(null, "msg-cache");
  
  public static final Keyword const__9 = (Keyword)RT.keyword(null, "negative-listeners");
  
  public static final Keyword const__10 = (Keyword)RT.keyword(null, "generation");
  
  public static final Keyword const__11 = (Keyword)RT.keyword(null, "failure");
  
  public static final Keyword const__12 = (Keyword)RT.keyword(null, "fail-index");
  
  public static final Keyword const__13 = (Keyword)RT.keyword(null, "grammar");
  
  public static final Keyword const__14 = (Keyword)RT.keyword(null, "success");
  
  public static final Keyword const__15 = (Keyword)RT.keyword(null, "nodes");
  
  public static final Keyword const__16 = (Keyword)RT.keyword(null, "node-builder");
  
  public static final Keyword const__17 = (Keyword)RT.keyword(null, "segment");
  
  public static final Keyword const__18 = (Keyword)RT.keyword(null, "stack");
  
  public static final Keyword const__19 = (Keyword)RT.keyword(null, "trace?");
  
  public static final Keyword const__20 = (Keyword)RT.keyword(null, "next-stack");
  
  public static final Keyword const__21 = (Keyword)RT.keyword(null, "text");
  
  public static final AFn const__22 = (AFn)PersistentHashSet.create(new Object[] { 
        RT.keyword(null, "msg-cache"), RT.keyword(null, "negative-listeners"), RT.keyword(null, "generation"), RT.keyword(null, "failure"), RT.keyword(null, "fail-index"), RT.keyword(null, "grammar"), RT.keyword(null, "success"), RT.keyword(null, "nodes"), RT.keyword(null, "node-builder"), RT.keyword(null, "segment"), 
        RT.keyword(null, "stack"), RT.keyword(null, "trace?"), RT.keyword(null, "next-stack"), RT.keyword(null, "text") });
  
  public static final Var const__23 = (Var)RT.var("clojure.core", "dissoc");
  
  public static final Var const__24 = (Var)RT.var("clojure.core", "with-meta");
  
  public static final Var const__25 = (Var)RT.var("clojure.core", "into");
  
  public static final Var const__26 = (Var)RT.var("clojure.core", "not-empty");
  
  public static final Var const__27 = (Var)RT.var("clojure.core", "identical?");
  
  public static final Var const__28 = (Var)RT.var("clojure.core", "assoc");
  
  public static final AFn const__29 = (AFn)RT.vector(new Object[] { 
        RT.keyword(null, "grammar"), RT.keyword(null, "text"), RT.keyword(null, "segment"), RT.keyword(null, "fail-index"), RT.keyword(null, "node-builder"), RT.keyword(null, "stack"), RT.keyword(null, "next-stack"), RT.keyword(null, "generation"), RT.keyword(null, "negative-listeners"), RT.keyword(null, "msg-cache"), 
        RT.keyword(null, "nodes"), RT.keyword(null, "success"), RT.keyword(null, "failure"), RT.keyword(null, "trace?") });
  
  public static final Var const__30 = (Var)RT.var("clojure.core", "seq"), const__31 = (Var)RT.var("clojure.core", "concat"), const__32 = (Var)RT.var("clojure.core", "not"), const__33 = (Var)RT.var("clojure.core", "class"), const__34 = (Var)RT.var("clojure.core", "imap-cons"), const__35 = (Var)RT.var("clojure.core", "str");
  
  public Tramp(Object paramObject1, Object paramObject2, Object paramObject3, Object paramObject4, Object paramObject5, Object paramObject6, Object paramObject7, Object paramObject8, Object paramObject9, Object paramObject10, Object paramObject11, Object paramObject12, Object paramObject13, Object paramObject14, Object paramObject15, Object paramObject16, int paramInt1, int paramInt2) { this.grammar = paramObject1;
    this.text = paramObject2;
    this.segment = paramObject3;
    this.fail_index = paramObject4;
    this.node_builder = paramObject5;
    this.stack = paramObject6;
    this.next_stack = paramObject7;
    this.generation = paramObject8;
    this.negative_listeners = paramObject9;
    this.msg_cache = paramObject10;
    this.nodes = paramObject11;
    this.success = paramObject12;
    this.failure = paramObject13;
    this.trace_QMARK_ = paramObject14;
    this.__meta = paramObject15;
    this.__extmap = paramObject16;
    this.__hash = paramInt1;
    this.__hasheq = paramInt2; }
  
  public Tramp(Object paramObject1, Object paramObject2, Object paramObject3, Object paramObject4, Object paramObject5, Object paramObject6, Object paramObject7, Object paramObject8, Object paramObject9, Object paramObject10, Object paramObject11, Object paramObject12, Object paramObject13, Object paramObject14) { this(paramObject1, paramObject2, paramObject3, paramObject4, paramObject5, paramObject6, paramObject7, paramObject8, paramObject9, paramObject10, paramObject11, paramObject12, paramObject13, paramObject14, null, null, 0, 0); }
  
  public Tramp(Object paramObject1, Object paramObject2, Object paramObject3, Object paramObject4, Object paramObject5, Object paramObject6, Object paramObject7, Object paramObject8, Object paramObject9, Object paramObject10, Object paramObject11, Object paramObject12, Object paramObject13, Object paramObject14, Object paramObject15, Object paramObject16) { this(paramObject1, paramObject2, paramObject3, paramObject4, paramObject5, paramObject6, paramObject7, paramObject8, paramObject9, paramObject10, paramObject11, paramObject12, paramObject13, paramObject14, paramObject15, paramObject16, 0, 0); }
  
  public static IPersistentVector getBasis() { return RT.vector(new Object[] { 
          Symbol.intern(null, "grammar"), Symbol.intern(null, "text"), Symbol.intern(null, "segment"), Symbol.intern(null, "fail-index"), Symbol.intern(null, "node-builder"), Symbol.intern(null, "stack"), Symbol.intern(null, "next-stack"), Symbol.intern(null, "generation"), Symbol.intern(null, "negative-listeners"), Symbol.intern(null, "msg-cache"), 
          Symbol.intern(null, "nodes"), Symbol.intern(null, "success"), Symbol.intern(null, "failure"), Symbol.intern(null, "trace?") }); }
  
  public static Tramp create(IPersistentMap paramIPersistentMap) {
    Object object1 = paramIPersistentMap.valAt(Keyword.intern("grammar"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("grammar"));
    Object object2 = paramIPersistentMap.valAt(Keyword.intern("text"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("text"));
    Object object3 = paramIPersistentMap.valAt(Keyword.intern("segment"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("segment"));
    Object object4 = paramIPersistentMap.valAt(Keyword.intern("fail-index"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("fail-index"));
    Object object5 = paramIPersistentMap.valAt(Keyword.intern("node-builder"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("node-builder"));
    Object object6 = paramIPersistentMap.valAt(Keyword.intern("stack"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("stack"));
    Object object7 = paramIPersistentMap.valAt(Keyword.intern("next-stack"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("next-stack"));
    Object object8 = paramIPersistentMap.valAt(Keyword.intern("generation"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("generation"));
    Object object9 = paramIPersistentMap.valAt(Keyword.intern("negative-listeners"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("negative-listeners"));
    Object object10 = paramIPersistentMap.valAt(Keyword.intern("msg-cache"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("msg-cache"));
    Object object11 = paramIPersistentMap.valAt(Keyword.intern("nodes"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("nodes"));
    Object object12 = paramIPersistentMap.valAt(Keyword.intern("success"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("success"));
    Object object13 = paramIPersistentMap.valAt(Keyword.intern("failure"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("failure"));
    Object object14 = paramIPersistentMap.valAt(Keyword.intern("trace?"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("trace?"));
    return new Tramp(object1, object2, object3, object4, object5, object6, object7, object8, object9, object10, object11, object12, object13, object14, null, RT.seqOrElse(paramIPersistentMap), 0, 0);
  }
  
  public int hasheq() {
    int hq__7768__auto__19678 = this.__hasheq, h__7769__auto__19677 = RT.intCast(0x4862F544L ^ APersistentMap.mapHasheq((IPersistentMap)this));
    this.__hasheq = h__7769__auto__19677;
    return (hq__7768__auto__19678 == 0L) ? h__7769__auto__19677 : hq__7768__auto__19678;
  }
  
  public int hashCode() {
    int hash__7771__auto__19680 = this.__hash, h__7772__auto__19679 = APersistentMap.mapHash((IPersistentMap)this);
    this.__hash = h__7772__auto__19679;
    return (hash__7771__auto__19680 == 0L) ? h__7772__auto__19679 : hash__7771__auto__19680;
  }
  
  public boolean equals(Object G__19642) { G__19642 = null;
    return APersistentMap.mapEquals((IPersistentMap)this, G__19642); }
  
  public IPersistentMap meta() { return (IPersistentMap)this.__meta; }
  
  public IObj withMeta(IPersistentMap G__19642) { G__19642 = null;
    return (IObj)new Tramp(this.grammar, this.text, this.segment, this.fail_index, this.node_builder, this.stack, this.next_stack, this.generation, this.negative_listeners, this.msg_cache, this.nodes, this.success, this.failure, this.trace_QMARK_, G__19642, this.__extmap, this.__hash, this.__hasheq); }
  
  public Object valAt(Object k__7777__auto__) { k__7777__auto__ = null;
    return ((ILookup)this).valAt(k__7777__auto__, null); }
  
  public Object valAt(Object k__7779__auto__, Object else__7780__auto__) {
    Object G__19675 = k__7779__auto__;
    switch (Util.hash(G__19675) >> 17 & 0x1F) {
      case 0:
        if (G__19675 == const__13);
        break;
      case 3:
        if (G__19675 == const__15);
        break;
      case 5:
        if (G__19675 == const__9);
        break;
      case 7:
        if (G__19675 == const__10);
        break;
      case 8:
        if (G__19675 == const__8);
        break;
      case 11:
        if (G__19675 == const__21);
        break;
      case 18:
        if (G__19675 == const__17);
        break;
      case 19:
        if (G__19675 == const__11);
        break;
      case 21:
        if (G__19675 == const__20);
        break;
      case 22:
        if (G__19675 == const__16);
        break;
      case 23:
        if (G__19675 == const__12);
        break;
      case 24:
        if (G__19675 == const__19);
        break;
      case 27:
        if (G__19675 == const__18);
        break;
      case 28:
        if (G__19675 == const__14);
        break;
    } 
    k__7779__auto__ = null;
    else__7780__auto__ = null;
    this = null;
    return RT.get(this.__extmap, k__7779__auto__, else__7780__auto__);
  }
  
  public ILookupThunk getLookupThunk(Keyword k__7782__auto__) {
    Object gclass = ((IFn)const__33.getRawRoot()).invoke(this), G__19646 = k__7782__auto__ = null;
    switch (Util.hash(G__19646) >> 17 & 0x1F) {
      case 0:
        if (G__19646 == const__13)
          gclass = null; 
        break;
      case 3:
        if (G__19646 == const__15)
          gclass = null; 
        break;
      case 5:
        if (G__19646 == const__9)
          gclass = null; 
        break;
      case 7:
        if (G__19646 == const__10)
          gclass = null; 
        break;
      case 8:
        if (G__19646 == const__8)
          gclass = null; 
        break;
      case 11:
        if (G__19646 == const__21)
          gclass = null; 
        break;
      case 18:
        if (G__19646 == const__17)
          gclass = null; 
        break;
      case 19:
        if (G__19646 == const__11)
          gclass = null; 
        break;
      case 21:
        if (G__19646 == const__20)
          gclass = null; 
        break;
      case 22:
        if (G__19646 == const__16)
          gclass = null; 
        break;
      case 23:
        if (G__19646 == const__12)
          gclass = null; 
        break;
      case 24:
        if (G__19646 == const__19)
          gclass = null; 
        break;
      case 27:
        if (G__19646 == const__18)
          gclass = null; 
        break;
      case 28:
        if (G__19646 == const__14)
          gclass = null; 
        break;
    } 
    return (ILookupThunk)null;
  }
  
  public int count() { return RT.intCast(Numbers.add(14L, RT.count(this.__extmap))); }
  
  public IPersistentCollection empty() { throw (Throwable)new UnsupportedOperationException((String)((IFn)const__35.getRawRoot()).invoke("Can't create empty: ", "instaparse.gll.Tramp")); }
  
  public IPersistentCollection cons(Object e__7786__auto__) { e__7786__auto__ = null;
    this = null;
    return (IPersistentCollection)((IFn)const__34).invoke(this, e__7786__auto__); }
  
  public boolean equiv(Object G__19642) {
    boolean or__5516__auto__19695 = Util.identical(this, G__19642);
    Object G__19642 = G__19642 = null;
    boolean and__5514__auto__19694 = Util.equiv(this.grammar, ((Tramp)G__19642).grammar), and__5514__auto__19693 = Util.equiv(this.text, ((Tramp)G__19642).text), and__5514__auto__19692 = Util.equiv(this.segment, ((Tramp)G__19642).segment), and__5514__auto__19691 = Util.equiv(this.fail_index, ((Tramp)G__19642).fail_index), and__5514__auto__19690 = Util.equiv(this.node_builder, ((Tramp)G__19642).node_builder), and__5514__auto__19689 = Util.equiv(this.stack, ((Tramp)G__19642).stack), and__5514__auto__19688 = Util.equiv(this.next_stack, ((Tramp)G__19642).next_stack), and__5514__auto__19687 = Util.equiv(this.generation, ((Tramp)G__19642).generation), and__5514__auto__19686 = Util.equiv(this.negative_listeners, ((Tramp)G__19642).negative_listeners), and__5514__auto__19685 = Util.equiv(this.msg_cache, ((Tramp)G__19642).msg_cache), and__5514__auto__19684 = Util.equiv(this.nodes, ((Tramp)G__19642).nodes), and__5514__auto__19683 = Util.equiv(this.success, ((Tramp)G__19642).success), and__5514__auto__19682 = Util.equiv(this.failure, ((Tramp)G__19642).failure), and__5514__auto__19681 = Util.equiv(this.trace_QMARK_, ((Tramp)G__19642).trace_QMARK_);
    G__19642 = null;
    return RT.booleanCast(or__5516__auto__19695 ? (or__5516__auto__19695 ? Boolean.TRUE : Boolean.FALSE) : (Util.identical(((IFn)const__33.getRawRoot()).invoke(this), ((IFn)const__33.getRawRoot()).invoke(G__19642)) ? (and__5514__auto__19694 ? (and__5514__auto__19693 ? (and__5514__auto__19692 ? (and__5514__auto__19691 ? (and__5514__auto__19690 ? (and__5514__auto__19689 ? (and__5514__auto__19688 ? (and__5514__auto__19687 ? (and__5514__auto__19686 ? (and__5514__auto__19685 ? (and__5514__auto__19684 ? (and__5514__auto__19683 ? (and__5514__auto__19682 ? (and__5514__auto__19681 ? (Util.equiv(this.__extmap, ((Tramp)G__19642).__extmap) ? Boolean.TRUE : Boolean.FALSE) : (and__5514__auto__19681 ? Boolean.TRUE : Boolean.FALSE)) : (and__5514__auto__19682 ? Boolean.TRUE : Boolean.FALSE)) : (and__5514__auto__19683 ? Boolean.TRUE : Boolean.FALSE)) : (and__5514__auto__19684 ? Boolean.TRUE : Boolean.FALSE)) : (and__5514__auto__19685 ? Boolean.TRUE : Boolean.FALSE)) : (and__5514__auto__19686 ? Boolean.TRUE : Boolean.FALSE)) : (and__5514__auto__19687 ? Boolean.TRUE : Boolean.FALSE)) : (and__5514__auto__19688 ? Boolean.TRUE : Boolean.FALSE)) : (and__5514__auto__19689 ? Boolean.TRUE : Boolean.FALSE)) : (and__5514__auto__19690 ? Boolean.TRUE : Boolean.FALSE)) : (and__5514__auto__19691 ? Boolean.TRUE : Boolean.FALSE)) : (and__5514__auto__19692 ? Boolean.TRUE : Boolean.FALSE)) : (and__5514__auto__19693 ? Boolean.TRUE : Boolean.FALSE)) : (and__5514__auto__19694 ? Boolean.TRUE : Boolean.FALSE)) : null));
  }
  
  public boolean containsKey(Object k__7789__auto__) { k__7789__auto__ = null;
    this = null;
    return ((Boolean)((IFn)const__32.getRawRoot()).invoke(Util.identical(this, ((ILookup)this).valAt(k__7789__auto__, this)) ? Boolean.TRUE : Boolean.FALSE)).booleanValue(); }
  
  public IMapEntry entryAt(Object k__7791__auto__) {
    Object v__7792__auto__19696 = ((ILookup)this).valAt(k__7791__auto__, this);
    k__7791__auto__ = null;
    v__7792__auto__19696 = null;
    this = null;
    return (IMapEntry)(Util.identical(this, v__7792__auto__19696) ? null : MapEntry.create(k__7791__auto__, v__7792__auto__19696));
  }
  
  public ISeq seq() { this = null;
    return (ISeq)((IFn)const__30.getRawRoot()).invoke(((IFn)const__31.getRawRoot()).invoke(RT.vector(new Object[] { 
              MapEntry.create(const__13, this.grammar), MapEntry.create(const__21, this.text), MapEntry.create(const__17, this.segment), MapEntry.create(const__12, this.fail_index), MapEntry.create(const__16, this.node_builder), MapEntry.create(const__18, this.stack), MapEntry.create(const__20, this.next_stack), MapEntry.create(const__10, this.generation), MapEntry.create(const__9, this.negative_listeners), MapEntry.create(const__8, this.msg_cache), 
              MapEntry.create(const__15, this.nodes), MapEntry.create(const__14, this.success), MapEntry.create(const__11, this.failure), MapEntry.create(const__19, this.trace_QMARK_) }), this.__extmap)); }
  
  public Iterator iterator() { return (Iterator)new RecordIterator((ILookup)this, (IPersistentVector)const__29, (Iterator)RT.iter(this.__extmap)); }
  
  public IPersistentMap assoc(Object k__7796__auto__, Object G__19642) {
    Object pred__19644 = const__27.getRawRoot(), expr__19645 = k__7796__auto__;
    if (((IFn)pred__19644).invoke(const__13, expr__19645) != null) {
      if (((IFn)pred__19644).invoke(const__13, expr__19645) != Boolean.FALSE)
        G__19642 = null; 
    } else {
      ((IFn)pred__19644).invoke(const__13, expr__19645);
    } 
    if (((IFn)pred__19644).invoke(const__21, expr__19645) != null) {
      if (((IFn)pred__19644).invoke(const__21, expr__19645) != Boolean.FALSE)
        G__19642 = null; 
    } else {
      ((IFn)pred__19644).invoke(const__21, expr__19645);
    } 
    if (((IFn)pred__19644).invoke(const__17, expr__19645) != null) {
      if (((IFn)pred__19644).invoke(const__17, expr__19645) != Boolean.FALSE)
        G__19642 = null; 
    } else {
      ((IFn)pred__19644).invoke(const__17, expr__19645);
    } 
    if (((IFn)pred__19644).invoke(const__12, expr__19645) != null) {
      if (((IFn)pred__19644).invoke(const__12, expr__19645) != Boolean.FALSE)
        G__19642 = null; 
    } else {
      ((IFn)pred__19644).invoke(const__12, expr__19645);
    } 
    if (((IFn)pred__19644).invoke(const__16, expr__19645) != null) {
      if (((IFn)pred__19644).invoke(const__16, expr__19645) != Boolean.FALSE)
        G__19642 = null; 
    } else {
      ((IFn)pred__19644).invoke(const__16, expr__19645);
    } 
    if (((IFn)pred__19644).invoke(const__18, expr__19645) != null) {
      if (((IFn)pred__19644).invoke(const__18, expr__19645) != Boolean.FALSE)
        G__19642 = null; 
    } else {
      ((IFn)pred__19644).invoke(const__18, expr__19645);
    } 
    if (((IFn)pred__19644).invoke(const__20, expr__19645) != null) {
      if (((IFn)pred__19644).invoke(const__20, expr__19645) != Boolean.FALSE)
        G__19642 = null; 
    } else {
      ((IFn)pred__19644).invoke(const__20, expr__19645);
    } 
    if (((IFn)pred__19644).invoke(const__10, expr__19645) != null) {
      if (((IFn)pred__19644).invoke(const__10, expr__19645) != Boolean.FALSE)
        G__19642 = null; 
    } else {
      ((IFn)pred__19644).invoke(const__10, expr__19645);
    } 
    if (((IFn)pred__19644).invoke(const__9, expr__19645) != null) {
      if (((IFn)pred__19644).invoke(const__9, expr__19645) != Boolean.FALSE)
        G__19642 = null; 
    } else {
      ((IFn)pred__19644).invoke(const__9, expr__19645);
    } 
    if (((IFn)pred__19644).invoke(const__8, expr__19645) != null) {
      if (((IFn)pred__19644).invoke(const__8, expr__19645) != Boolean.FALSE)
        G__19642 = null; 
    } else {
      ((IFn)pred__19644).invoke(const__8, expr__19645);
    } 
    if (((IFn)pred__19644).invoke(const__15, expr__19645) != null) {
      if (((IFn)pred__19644).invoke(const__15, expr__19645) != Boolean.FALSE)
        G__19642 = null; 
    } else {
      ((IFn)pred__19644).invoke(const__15, expr__19645);
    } 
    if (((IFn)pred__19644).invoke(const__14, expr__19645) != null) {
      if (((IFn)pred__19644).invoke(const__14, expr__19645) != Boolean.FALSE)
        G__19642 = null; 
    } else {
      ((IFn)pred__19644).invoke(const__14, expr__19645);
    } 
    if (((IFn)pred__19644).invoke(const__11, expr__19645) != null) {
      if (((IFn)pred__19644).invoke(const__11, expr__19645) != Boolean.FALSE)
        G__19642 = null; 
    } else {
      ((IFn)pred__19644).invoke(const__11, expr__19645);
    } 
    pred__19644 = null;
    expr__19645 = null;
    if (((IFn)pred__19644).invoke(const__19, expr__19645) != null) {
      if (((IFn)pred__19644).invoke(const__19, expr__19645) != Boolean.FALSE)
        G__19642 = null; 
    } else {
      ((IFn)pred__19644).invoke(const__19, expr__19645);
    } 
    k__7796__auto__ = null;
    G__19642 = null;
    return (IPersistentMap)new Tramp(this.grammar, this.text, this.segment, this.fail_index, this.node_builder, this.stack, this.next_stack, this.generation, this.negative_listeners, this.msg_cache, this.nodes, this.success, this.failure, this.trace_QMARK_, this.__meta, ((IFn)const__28.getRawRoot()).invoke(this.__extmap, k__7796__auto__, G__19642));
  }
  
  public IPersistentMap without(Object k__7798__auto__) { if (((IFn)const__7.getRawRoot()).invoke(const__22, k__7798__auto__) != null) {
      if (((IFn)const__7.getRawRoot()).invoke(const__22, k__7798__auto__) != Boolean.FALSE) {
        k__7798__auto__ = null;
        this = null;
      } 
    } else {
      ((IFn)const__7.getRawRoot()).invoke(const__22, k__7798__auto__);
    } 
    k__7798__auto__ = null;
    return (IPersistentMap)new Tramp(this.grammar, this.text, this.segment, this.fail_index, this.node_builder, this.stack, this.next_stack, this.generation, this.negative_listeners, this.msg_cache, this.nodes, this.success, this.failure, this.trace_QMARK_, this.__meta, ((IFn)const__26.getRawRoot()).invoke(((IFn)const__23.getRawRoot()).invoke(this.__extmap, k__7798__auto__))); }
  
  public int size() { this = null;
    return ((Counted)this).count(); }
  
  public boolean isEmpty() { return Util.equiv(0L, ((Counted)this).count()); }
  
  public boolean containsValue(Object v__7802__auto__) { v__7802__auto__ = null;
    return RT.booleanCast(((IFn)const__4.getRawRoot()).invoke(RT.set(new Object[] { v__7802__auto__ }, ), ((IFn)const__1.getRawRoot()).invoke(this))); }
  
  public Object get(Object k__7804__auto__) { k__7804__auto__ = null;
    return ((ILookup)this).valAt(k__7804__auto__); }
  
  public Object put(Object k__7806__auto__, Object v__7807__auto__) { throw (Throwable)new UnsupportedOperationException(); }
  
  public Object remove(Object k__7809__auto__) { throw (Throwable)new UnsupportedOperationException(); }
  
  public void putAll(Map m__7811__auto__) { throw (Throwable)new UnsupportedOperationException(); }
  
  public void clear() { throw (Throwable)new UnsupportedOperationException(); }
  
  public Set keySet() { this = null;
    return (Set)((IFn)const__0.getRawRoot()).invoke(((IFn)const__2.getRawRoot()).invoke(this)); }
  
  public Collection values() { this = null;
    return (Collection)((IFn)const__1.getRawRoot()).invoke(this); }
  
  public Set entrySet() { this = null;
    return (Set)((IFn)const__0.getRawRoot()).invoke(this); }
}
