package instaparse;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class combinators_source__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__3;
  
  public static final AFn const__4;
  
  public static final Var const__5;
  
  public static final AFn const__11;
  
  public static final AFn const__14;
  
  public static final Var const__15;
  
  public static final AFn const__19;
  
  public static final Var const__20;
  
  public static final AFn const__23;
  
  public static final Var const__24;
  
  public static final AFn const__27;
  
  public static final Var const__28;
  
  public static final AFn const__31;
  
  public static final Var const__32;
  
  public static final AFn const__35;
  
  public static final Var const__36;
  
  public static final AFn const__40;
  
  public static final Var const__41;
  
  public static final AFn const__44;
  
  public static final Var const__45;
  
  public static final AFn const__48;
  
  public static final Var const__49;
  
  public static final AFn const__52;
  
  public static final Var const__53;
  
  public static final AFn const__56;
  
  public static final Var const__57;
  
  public static final AFn const__60;
  
  public static final Var const__61;
  
  public static final AFn const__64;
  
  public static final Var const__65;
  
  public static final AFn const__68;
  
  public static final Var const__69;
  
  public static final AFn const__72;
  
  public static final Var const__73;
  
  public static final AFn const__76;
  
  public static final Var const__77;
  
  public static final AFn const__80;
  
  public static final Var const__81;
  
  public static final AFn const__84;
  
  public static final Var const__85;
  
  public static final AFn const__88;
  
  public static final Var const__89;
  
  public static final AFn const__92;
  
  public static final Var const__93;
  
  public static final AFn const__96;
  
  public static final Var const__97;
  
  public static final AFn const__100;
  
  public static final Var const__101;
  
  public static final AFn const__104;
  
  public static final Var const__105;
  
  public static final AFn const__108;
  
  public static final Var const__109;
  
  public static final AFn const__112;
  
  public static void load() { LockingTransaction.runInTransaction((Callable)new combinators_source.fn__19470());
    const__5.setMeta((IPersistentMap)const__11);
    const__5.bindRoot(const__14);
    const__15.setMeta((IPersistentMap)const__19);
    const__15.bindRoot(new combinators_source.opt());
    const__20.setMeta((IPersistentMap)const__23);
    const__20.bindRoot(new combinators_source.plus());
    const__24.setMeta((IPersistentMap)const__27);
    const__24.bindRoot(new combinators_source.star());
    const__28.setMeta((IPersistentMap)const__31);
    const__28.bindRoot(new combinators_source.rep());
    const__32.setMeta((IPersistentMap)const__35);
    const__32.bindRoot(new combinators_source.alt());
    const__36.setMeta((IPersistentMap)const__40);
    const__36.bindRoot(new combinators_source.ord2());
    const__41.setMeta((IPersistentMap)const__44);
    const__41.bindRoot(new combinators_source.ord());
    const__45.setMeta((IPersistentMap)const__48);
    const__45.bindRoot(new combinators_source.cat());
    const__49.setMeta((IPersistentMap)const__52);
    const__49.bindRoot(new combinators_source.string());
    const__53.setMeta((IPersistentMap)const__56);
    const__53.bindRoot(new combinators_source.string_ci());
    const__57.setMeta((IPersistentMap)const__60);
    const__57.bindRoot(new combinators_source.unicode_char());
    const__61.setMeta((IPersistentMap)const__64);
    const__61.bindRoot(new combinators_source.regexp());
    const__65.setMeta((IPersistentMap)const__68);
    const__65.bindRoot(new combinators_source.nt());
    const__69.setMeta((IPersistentMap)const__72);
    const__69.bindRoot(new combinators_source.look());
    const__73.setMeta((IPersistentMap)const__76);
    const__73.bindRoot(new combinators_source.neg());
    const__77.setMeta((IPersistentMap)const__80);
    const__77.bindRoot(new combinators_source.hide());
    const__81.setMeta((IPersistentMap)const__84);
    const__81.bindRoot(new combinators_source.hide_tag());
    const__85.setMeta((IPersistentMap)const__88);
    const__85.bindRoot(new combinators_source.hidden_tag_QMARK_());
    const__89.setMeta((IPersistentMap)const__92);
    const__89.bindRoot(new combinators_source.unhide_content());
    const__93.setMeta((IPersistentMap)const__96);
    const__93.bindRoot(new combinators_source.unhide_all_content());
    const__97.setMeta((IPersistentMap)const__100);
    const__97.bindRoot(new combinators_source.unhide_tags());
    const__101.setMeta((IPersistentMap)const__104);
    const__101.bindRoot(new combinators_source.unhide_all());
    const__105.setMeta((IPersistentMap)const__108);
    const__105.bindRoot(new combinators_source.auto_whitespace_parser());
    const__109.setMeta((IPersistentMap)const__112);
    const__109.bindRoot(new combinators_source.auto_whitespace()); }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "instaparse.combinators-source")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "This is the underlying implementation of the various combinators." }));
    const__3 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "This is the underlying implementation of the various combinators." });
    const__4 = (AFn)Symbol.intern(null, "clojure.core");
    const__5 = (Var)RT.var("instaparse.combinators-source", "Epsilon");
    const__11 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(11), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/combinators_source.clj" });
    const__14 = (AFn)RT.map(new Object[] { RT.keyword(null, "tag"), RT.keyword(null, "epsilon") });
    const__15 = (Var)RT.var("instaparse.combinators-source", "opt");
    const__19 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "parser")) })), RT.keyword(null, "doc"), "Optional, i.e., parser?", RT.keyword(null, "line"), Integer.valueOf(13), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/combinators_source.clj" });
    const__20 = (Var)RT.var("instaparse.combinators-source", "plus");
    const__23 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "parser")) })), RT.keyword(null, "doc"), "One or more, i.e., parser+", RT.keyword(null, "line"), Integer.valueOf(18), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/combinators_source.clj" });
    const__24 = (Var)RT.var("instaparse.combinators-source", "star");
    const__27 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "parser")) })), RT.keyword(null, "doc"), "Zero or more, i.e., parser*", RT.keyword(null, "line"), Integer.valueOf(23), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/combinators_source.clj" });
    const__28 = (Var)RT.var("instaparse.combinators-source", "rep");
    const__31 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "n"), Symbol.intern(null, "parser"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "<="), Symbol.intern(null, "m"), Symbol.intern(null, "n") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(30), RT.keyword(null, "column"), Integer.valueOf(10) }))) })) })), RT.keyword(null, "doc"), "Between m and n repetitions", RT.keyword(null, "line"), Integer.valueOf(28), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/combinators_source.clj" });
    const__32 = (Var)RT.var("instaparse.combinators-source", "alt");
    const__35 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "parsers")) })), RT.keyword(null, "doc"), "Alternation, i.e., parser1 | parser2 | parser3 | ...", RT.keyword(null, "line"), Integer.valueOf(34), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/combinators_source.clj" });
    const__36 = (Var)RT.var("instaparse.combinators-source", "ord2");
    const__40 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "parser1"), Symbol.intern(null, "parser2")) })), RT.keyword(null, "line"), Integer.valueOf(41), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/combinators_source.clj" });
    const__41 = (Var)RT.var("instaparse.combinators-source", "ord");
    const__44 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(), Tuple.create(Symbol.intern(null, "parser1"), Symbol.intern(null, "&"), Symbol.intern(null, "parsers")) })), RT.keyword(null, "doc"), "Ordered choice, i.e., parser1 / parser2", RT.keyword(null, "line"), Integer.valueOf(44), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/combinators_source.clj" });
    const__45 = (Var)RT.var("instaparse.combinators-source", "cat");
    const__48 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "parsers")) })), RT.keyword(null, "doc"), "Concatenation, i.e., parser1 parser2 ...", RT.keyword(null, "line"), Integer.valueOf(54), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/combinators_source.clj" });
    const__49 = (Var)RT.var("instaparse.combinators-source", "string");
    const__52 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })), RT.keyword(null, "doc"), "Create a string terminal out of s", RT.keyword(null, "line"), Integer.valueOf(61), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/combinators_source.clj" });
    const__53 = (Var)RT.var("instaparse.combinators-source", "string-ci");
    const__56 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })), RT.keyword(null, "doc"), "Create a case-insensitive string terminal out of s", RT.keyword(null, "line"), Integer.valueOf(66), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/combinators_source.clj" });
    const__57 = (Var)RT.var("instaparse.combinators-source", "unicode-char");
    const__60 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "code-point")), Tuple.create(Symbol.intern(null, "lo"), Symbol.intern(null, "hi")) })), RT.keyword(null, "doc"), "Matches a Unicode code point or a range of code points", RT.keyword(null, "line"), Integer.valueOf(71), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/combinators_source.clj" });
    const__61 = (Var)RT.var("instaparse.combinators-source", "regexp");
    const__64 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "r")) })), RT.keyword(null, "doc"), "Create a regexp terminal out of regular expression r", RT.keyword(null, "line"), Integer.valueOf(88), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/combinators_source.clj" });
    const__65 = (Var)RT.var("instaparse.combinators-source", "nt");
    const__68 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })), RT.keyword(null, "doc"), "Refers to a non-terminal defined by the grammar map", RT.keyword(null, "line"), Integer.valueOf(95), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/combinators_source.clj" });
    const__69 = (Var)RT.var("instaparse.combinators-source", "look");
    const__72 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "parser")) })), RT.keyword(null, "doc"), "Lookahead, i.e., &parser", RT.keyword(null, "line"), Integer.valueOf(99), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/combinators_source.clj" });
    const__73 = (Var)RT.var("instaparse.combinators-source", "neg");
    const__76 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "parser")) })), RT.keyword(null, "doc"), "Negative lookahead, i.e., !parser", RT.keyword(null, "line"), Integer.valueOf(103), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/combinators_source.clj" });
    const__77 = (Var)RT.var("instaparse.combinators-source", "hide");
    const__80 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "parser")) })), RT.keyword(null, "doc"), "Hide the result of parser, i.e., <parser>", RT.keyword(null, "line"), Integer.valueOf(107), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/combinators_source.clj" });
    const__81 = (Var)RT.var("instaparse.combinators-source", "hide-tag");
    const__84 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "parser")) })), RT.keyword(null, "doc"), "Hide the tag associated with this rule.  \n  Wrap this combinator around the entire right-hand side.", RT.keyword(null, "line"), Integer.valueOf(111), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/combinators_source.clj" });
    const__85 = (Var)RT.var("instaparse.combinators-source", "hidden-tag?");
    const__88 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "parser")) })), RT.keyword(null, "doc"), "Tests whether parser was created with hide-tag combinator", RT.keyword(null, "line"), Integer.valueOf(118), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/combinators_source.clj" });
    const__89 = (Var)RT.var("instaparse.combinators-source", "unhide-content");
    const__92 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "parser")) })), RT.keyword(null, "doc"), "Recursively undoes the effect of hide on one parser", RT.keyword(null, "line"), Integer.valueOf(123), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/combinators_source.clj" });
    const__93 = (Var)RT.var("instaparse.combinators-source", "unhide-all-content");
    const__96 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "grammar")) })), RT.keyword(null, "doc"), "Recursively undoes the effect of hide on all parsers in the grammar", RT.keyword(null, "line"), Integer.valueOf(135), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/combinators_source.clj" });
    const__97 = (Var)RT.var("instaparse.combinators-source", "unhide-tags");
  }
  
  public static void __init1() {
    const__100 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "reduction-type"), Symbol.intern(null, "grammar")) })), RT.keyword(null, "doc"), "Recursively undoes the effect of hide-tag", RT.keyword(null, "line"), Integer.valueOf(141), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/combinators_source.clj" });
    const__101 = (Var)RT.var("instaparse.combinators-source", "unhide-all");
    const__104 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "reduction-type"), Symbol.intern(null, "grammar")) })), RT.keyword(null, "doc"), "Recursively undoes the effect of both hide and hide-tag", RT.keyword(null, "line"), Integer.valueOf(150), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/combinators_source.clj" });
    const__105 = (Var)RT.var("instaparse.combinators-source", "auto-whitespace-parser");
    const__108 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "parser"), Symbol.intern(null, "ws-parser")) })), RT.keyword(null, "line"), Integer.valueOf(162), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/combinators_source.clj" });
    const__109 = (Var)RT.var("instaparse.combinators-source", "auto-whitespace");
    const__112 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "grammar"), Symbol.intern(null, "start"), Symbol.intern(null, "grammar-ws"), Symbol.intern(null, "start-ws")) })), RT.keyword(null, "line"), Integer.valueOf(179), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "instaparse/combinators_source.clj" });
  }
  
  static  {
    __init0();
    __init1();
    Compiler.pushNSandLoader(RT.classForName("instaparse.combinators_source__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
