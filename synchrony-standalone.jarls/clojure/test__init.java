package clojure;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class test__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__4;
  
  public static final AFn const__5;
  
  public static final Var const__6;
  
  public static final AFn const__14;
  
  public static final Var const__15;
  
  public static final AFn const__17;
  
  public static final Var const__18;
  
  public static final AFn const__20;
  
  public static final Keyword const__23;
  
  public static final Keyword const__24;
  
  public static final Keyword const__25;
  
  public static final AFn const__26;
  
  public static final Var const__27;
  
  public static final AFn const__29;
  
  public static final Var const__30;
  
  public static final Var const__31;
  
  public static final AFn const__33;
  
  public static final Var const__34;
  
  public static final AFn const__36;
  
  public static final Var const__37;
  
  public static final Var const__38;
  
  public static final AFn const__42;
  
  public static final Var const__43;
  
  public static final AFn const__47;
  
  public static final Var const__48;
  
  public static final AFn const__51;
  
  public static final Var const__52;
  
  public static final AFn const__55;
  
  public static final Var const__56;
  
  public static final AFn const__59;
  
  public static final Var const__60;
  
  public static final AFn const__64;
  
  public static final Var const__65;
  
  public static final AFn const__68;
  
  public static final Var const__69;
  
  public static final AFn const__72;
  
  public static final Var const__73;
  
  public static final Keyword const__74;
  
  public static final Keyword const__75;
  
  public static final Keyword const__76;
  
  public static final Keyword const__77;
  
  public static final Keyword const__78;
  
  public static final Keyword const__79;
  
  public static final Var const__80;
  
  public static final AFn const__83;
  
  public static final Var const__84;
  
  public static final AFn const__87;
  
  public static final Var const__88;
  
  public static final AFn const__91;
  
  public static final Var const__92;
  
  public static final AFn const__95;
  
  public static final Var const__96;
  
  public static final Keyword const__97;
  
  public static final AFn const__98;
  
  public static final AFn const__99;
  
  public static final AFn const__100;
  
  public static final Var const__101;
  
  public static final AFn const__104;
  
  public static final Var const__105;
  
  public static final AFn const__108;
  
  public static final Var const__109;
  
  public static final AFn const__112;
  
  public static final Var const__113;
  
  public static final AFn const__116;
  
  public static final Var const__117;
  
  public static final AFn const__120;
  
  public static final Var const__121;
  
  public static final AFn const__124;
  
  public static final Var const__125;
  
  public static final AFn const__128;
  
  public static final Var const__129;
  
  public static final AFn const__132;
  
  public static final Var const__133;
  
  public static final AFn const__136;
  
  public static final Var const__137;
  
  public static final Keyword const__138;
  
  public static final Keyword const__139;
  
  public static final Var const__140;
  
  public static final AFn const__143;
  
  public static final Var const__144;
  
  public static final AFn const__147;
  
  public static final Var const__148;
  
  public static final AFn const__151;
  
  public static final Var const__152;
  
  public static final AFn const__155;
  
  public static final Var const__156;
  
  public static final AFn const__159;
  
  public static final Var const__160;
  
  public static final AFn const__163;
  
  public static final Var const__164;
  
  public static final AFn const__167;
  
  public static final Var const__168;
  
  public static final AFn const__171;
  
  public static final Var const__172;
  
  public static final AFn const__175;
  
  public static final Var const__176;
  
  public static final AFn const__179;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new test.fn__9624());
    const__6.setDynamic(true).setMeta((IPersistentMap)const__14);
    const__6.setDynamic(true).bindRoot(null);
    const__15.setDynamic(true).setMeta((IPersistentMap)const__17);
    const__15.setDynamic(true).bindRoot(null);
    const__18.setDynamic(true).setMeta((IPersistentMap)const__20);
    const__18.setDynamic(true).bindRoot(const__26);
    const__27.setDynamic(true).setMeta((IPersistentMap)const__29);
    const__27.setDynamic(true)




















      
      .bindRoot(((IFn)const__30.getRawRoot()).invoke());
    const__31.setDynamic(true).setMeta((IPersistentMap)const__33);
    const__31.setDynamic(true)
      
      .bindRoot(((IFn)const__30.getRawRoot()).invoke());
    const__34.setDynamic(true).setMeta((IPersistentMap)const__36);
    const__34.setDynamic(true).bindRoot(const__37.get());
    const__38.setMeta((IPersistentMap)const__42);
    const__38.bindRoot(new test.with_test_out());
    ((Var)const__38)


      
      .setMacro();
    const__43.setMeta((IPersistentMap)const__47);
    const__43.bindRoot(new test.file_position());
    const__48.setMeta((IPersistentMap)const__51);
    const__48.bindRoot(new test.testing_vars_str());
    const__52.setMeta((IPersistentMap)const__55);
    const__52.bindRoot(new test.testing_contexts_str());
    const__56.setMeta((IPersistentMap)const__59);
    const__56.bindRoot(new test.inc_report_counter());
    const__60.setMeta((IPersistentMap)const__64);
    const__60.bindRoot(new test.file_and_line());
    const__65.setMeta((IPersistentMap)const__68);
    const__65.bindRoot(new test.stacktrace_file_and_line());
    const__69.setMeta((IPersistentMap)const__72);
    const__69.bindRoot(new test.do_report());
    const__80.setMeta((IPersistentMap)const__83);
    const__80.bindRoot(new test.get_possibly_unbound_var());
    const__84.setMeta((IPersistentMap)const__87);
    const__84.bindRoot(new test.function_QMARK_());
    const__88.setMeta((IPersistentMap)const__91);
    const__88.bindRoot(new test.assert_predicate());
    const__92.setMeta((IPersistentMap)const__95);
    const__92.bindRoot(new test.assert_any());
    const__101.setMeta((IPersistentMap)const__104);
    const__101.bindRoot(new test.try_expr());
    ((Var)const__101)


















      
      .setMacro();
    const__105.setMeta((IPersistentMap)const__108);
    const__105.bindRoot(new test.is());
    ((Var)const__105)














      
      .setMacro();
    const__109.setMeta((IPersistentMap)const__112);
    const__109.bindRoot(new test.are());
    ((Var)const__109)
















      
      .setMacro();
    const__113.setMeta((IPersistentMap)const__116);
    const__113.bindRoot(new test.testing());
    ((Var)const__113)























      
      .setMacro();
    const__117.setMeta((IPersistentMap)const__120);
    const__117.bindRoot(new test.with_test());
    ((Var)const__117)










      
      .setMacro();
    const__121.setMeta((IPersistentMap)const__124);
    const__121.bindRoot(new test.deftest());
    ((Var)const__121)











      
      .setMacro();
    const__125.setMeta((IPersistentMap)const__128);
    const__125.bindRoot(new test.deftest_());
    ((Var)const__125)















      
      .setMacro();
    const__129.setMeta((IPersistentMap)const__132);
    const__129.bindRoot(new test.set_test());
    ((Var)const__129)







      
      .setMacro();
    const__133.setMeta((IPersistentMap)const__136);
    const__133.bindRoot(new test.add_ns_meta());
    const__140.setMeta((IPersistentMap)const__143);
    const__140.bindRoot(new test.default_fixture());
    const__144.setMeta((IPersistentMap)const__147);
    const__144.bindRoot(new test.compose_fixtures());
    const__148.setMeta((IPersistentMap)const__151);
    const__148.bindRoot(new test.join_fixtures());
    const__152.setDynamic(true).setMeta((IPersistentMap)const__155);
    const__152.setDynamic(true).bindRoot(new test.test_var());
    const__156.setMeta((IPersistentMap)const__159);
    const__156.bindRoot(new test.test_vars());
    const__160.setMeta((IPersistentMap)const__163);
    const__160.bindRoot(new test.test_all_vars());
    const__164.setMeta((IPersistentMap)const__167);
    const__164.bindRoot(new test.test_ns());
    const__168.setMeta((IPersistentMap)const__171);
    const__168.bindRoot(new test.run_tests());
    const__172.setMeta((IPersistentMap)const__175);
    const__172.bindRoot(new test.run_all_tests());
    const__176.setMeta((IPersistentMap)const__179);
    const__176.bindRoot(new test.successful_QMARK_());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "clojure.test")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "author"), "Stuart Sierra, with contributions and suggestions by \n  Chas Emerick, Allen Rohner, and Stuart Halloway", RT.keyword(null, "doc"), "A unit testing framework.\n\n   ASSERTIONS\n\n   The core of the library is the \"is\" macro, which lets you make\n   assertions of any arbitrary expression:\n\n   (is (= 4 (+ 2 2)))\n   (is (instance? Integer 256))\n   (is (.startsWith \"abcde\" \"ab\"))\n\n   You can type an \"is\" expression directly at the REPL, which will\n   print a message if it fails.\n\n       user> (is (= 5 (+ 2 2)))\n\n       FAIL in  (:1)\n       expected: (= 5 (+ 2 2))\n         actual: (not (= 5 4))\n       false\n\n   The \"expected:\" line shows you the original expression, and the\n   \"actual:\" shows you what actually happened.  In this case, it\n   shows that (+ 2 2) returned 4, which is not = to 5.  Finally, the\n   \"false\" on the last line is the value returned from the\n   expression.  The \"is\" macro always returns the result of the\n   inner expression.\n\n   There are two special assertions for testing exceptions.  The\n   \"(is (thrown? c ...))\" form tests if an exception of class c is\n   thrown:\n\n   (is (thrown? ArithmeticException (/ 1 0))) \n\n   \"(is (thrown-with-msg? c re ...))\" does the same thing and also\n   tests that the message on the exception matches the regular\n   expression re:\n\n   (is (thrown-with-msg? ArithmeticException #\"Divide by zero\"\n                         (/ 1 0)))\n\n   DOCUMENTING TESTS\n\n   \"is\" takes an optional second argument, a string describing the\n   assertion.  This message will be included in the error report.\n\n   (is (= 5 (+ 2 2)) \"Crazy arithmetic\")\n\n   In addition, you can document groups of assertions with the\n   \"testing\" macro, which takes a string followed by any number of\n   assertions.  The string will be included in failure reports.\n   Calls to \"testing\" may be nested, and all of the strings will be\n   joined together with spaces in the final report, in a style\n   similar to RSpec <http://rspec.info/>\n\n   (testing \"Arithmetic\"\n     (testing \"with positive integers\"\n       (is (= 4 (+ 2 2)))\n       (is (= 7 (+ 3 4))))\n     (testing \"with negative integers\"\n       (is (= -4 (+ -2 -2)))\n       (is (= -1 (+ 3 -4)))))\n\n   Note that, unlike RSpec, the \"testing\" macro may only be used\n   INSIDE a \"deftest\" or \"with-test\" form (see below).\n\n\n   DEFINING TESTS\n\n   There are two ways to define tests.  The \"with-test\" macro takes\n   a defn or def form as its first argument, followed by any number\n   of assertions.  The tests will be stored as metadata on the\n   definition.\n\n   (with-test\n       (defn my-function [x y]\n         (+ x y))\n     (is (= 4 (my-function 2 2)))\n     (is (= 7 (my-function 3 4))))\n\n   As of Clojure SVN rev. 1221, this does not work with defmacro.\n   See http://code.google.com/p/clojure/issues/detail?id=51\n\n   The other way lets you define tests separately from the rest of\n   your code, even in a different namespace:\n\n   (deftest addition\n     (is (= 4 (+ 2 2)))\n     (is (= 7 (+ 3 4))))\n\n   (deftest subtraction\n     (is (= 1 (- 4 3)))\n     (is (= 3 (- 7 4))))\n\n   This creates functions named \"addition\" and \"subtraction\", which\n   can be called like any other function.  Therefore, tests can be\n   grouped and composed, in a style similar to the test framework in\n   Peter Seibel's \"Practical Common Lisp\"\n   <http://www.gigamonkeys.com/book/practical-building-a-unit-test-framework.html>\n\n   (deftest arithmetic\n     (addition)\n     (subtraction))\n\n   The names of the nested tests will be joined in a list, like\n   \"(arithmetic addition)\", in failure reports.  You can use nested\n   tests to set up a context shared by several tests.\n\n\n   RUNNING TESTS\n\n   Run tests with the function \"(run-tests namespaces...)\":\n\n   (run-tests 'your.namespace 'some.other.namespace)\n\n   If you don't specify any namespaces, the current namespace is\n   used.  To run all tests in all namespaces, use \"(run-all-tests)\".\n\n   By default, these functions will search for all tests defined in\n   a namespace and run them in an undefined order.  However, if you\n   are composing tests, as in the \"arithmetic\" example above, you\n   probably do not want the \"addition\" and \"subtraction\" tests run\n   separately.  In that case, you must define a special function\n   named \"test-ns-hook\" that runs your tests in the correct order:\n\n   (defn test-ns-hook []\n     (arithmetic))\n\n   Note: test-ns-hook prevents execution of fixtures (see below).\n\n\n   OMITTING TESTS FROM PRODUCTION CODE\n\n   You can bind the variable \"*load-tests*\" to false when loading or\n   compiling code in production.  This will prevent any tests from\n   being created by \"with-test\" or \"deftest\".\n\n\n   FIXTURES\n\n   Fixtures allow you to run code before and after tests, to set up\n   the context in which tests should be run.\n\n   A fixture is just a function that calls another function passed as\n   an argument.  It looks like this:\n\n   (defn my-fixture [f]\n      Perform setup, establish bindings, whatever.\n     (f)  Then call the function we were passed.\n      Tear-down / clean-up code here.\n    )\n\n   Fixtures are attached to namespaces in one of two ways.  \"each\"\n   fixtures are run repeatedly, once for each test function created\n   with \"deftest\" or \"with-test\".  \"each\" fixtures are useful for\n   establishing a consistent before/after state for each test, like\n   clearing out database tables.\n\n   \"each\" fixtures can be attached to the current namespace like this:\n   (use-fixtures :each fixture1 fixture2 ...)\n   The fixture1, fixture2 are just functions like the example above.\n   They can also be anonymous functions, like this:\n   (use-fixtures :each (fn [f] setup... (f) cleanup...))\n\n   The other kind of fixture, a \"once\" fixture, is only run once,\n   around ALL the tests in the namespace.  \"once\" fixtures are useful\n   for tasks that only need to be performed once, like establishing\n   database connections, or for time-consuming tasks.\n\n   Attach \"once\" fixtures to the current namespace like this:\n   (use-fixtures :once fixture1 fixture2 ...)\n\n   Note: Fixtures and test-ns-hook are mutually incompatible.  If you\n   are using test-ns-hook, fixture functions will *never* be run.\n\n\n   SAVING TEST OUTPUT TO A FILE\n\n   All the test reporting functions write to the var *test-out*.  By\n   default, this is the same as *out*, but you can rebind it to any\n   PrintWriter.  For example, it could be a file opened with\n   clojure.java.io/writer.\n\n\n   EXTENDING TEST-IS (ADVANCED)\n\n   You can extend the behavior of the \"is\" macro by defining new\n   methods for the \"assert-expr\" multimethod.  These methods are\n   called during expansion of the \"is\" macro, so they should return\n   quoted forms to be evaluated.\n\n   You can plug in your own test-reporting framework by rebinding\n   the \"report\" function: (report event)\n\n   The 'event' argument is a map.  It will always have a :type key,\n   whose value will be a keyword signaling the type of event being\n   reported.  Standard events with :type value of :pass, :fail, and\n   :error are called when an assertion passes, fails, and throws an\n   exception, respectively.  In that case, the event will also have\n   the following keys:\n\n     :expected   The form that was expected to be true\n     :actual     A form representing what actually occurred\n     :message    The string message given as an argument to 'is'\n\n   The \"testing\" strings will be a list in \"*testing-contexts*\", and\n   the vars being tested will be a list in \"*testing-vars*\".\n\n   Your \"report\" function should wrap any printing calls in the\n   \"with-test-out\" macro, which rebinds *out* to the current value\n   of *test-out*.\n\n   For additional event types, see the examples in the code.\n" }));
    const__4 = (AFn)RT.map(new Object[] { RT.keyword(null, "author"), "Stuart Sierra, with contributions and suggestions by \n  Chas Emerick, Allen Rohner, and Stuart Halloway", RT.keyword(null, "doc"), "A unit testing framework.\n\n   ASSERTIONS\n\n   The core of the library is the \"is\" macro, which lets you make\n   assertions of any arbitrary expression:\n\n   (is (= 4 (+ 2 2)))\n   (is (instance? Integer 256))\n   (is (.startsWith \"abcde\" \"ab\"))\n\n   You can type an \"is\" expression directly at the REPL, which will\n   print a message if it fails.\n\n       user> (is (= 5 (+ 2 2)))\n\n       FAIL in  (:1)\n       expected: (= 5 (+ 2 2))\n         actual: (not (= 5 4))\n       false\n\n   The \"expected:\" line shows you the original expression, and the\n   \"actual:\" shows you what actually happened.  In this case, it\n   shows that (+ 2 2) returned 4, which is not = to 5.  Finally, the\n   \"false\" on the last line is the value returned from the\n   expression.  The \"is\" macro always returns the result of the\n   inner expression.\n\n   There are two special assertions for testing exceptions.  The\n   \"(is (thrown? c ...))\" form tests if an exception of class c is\n   thrown:\n\n   (is (thrown? ArithmeticException (/ 1 0))) \n\n   \"(is (thrown-with-msg? c re ...))\" does the same thing and also\n   tests that the message on the exception matches the regular\n   expression re:\n\n   (is (thrown-with-msg? ArithmeticException #\"Divide by zero\"\n                         (/ 1 0)))\n\n   DOCUMENTING TESTS\n\n   \"is\" takes an optional second argument, a string describing the\n   assertion.  This message will be included in the error report.\n\n   (is (= 5 (+ 2 2)) \"Crazy arithmetic\")\n\n   In addition, you can document groups of assertions with the\n   \"testing\" macro, which takes a string followed by any number of\n   assertions.  The string will be included in failure reports.\n   Calls to \"testing\" may be nested, and all of the strings will be\n   joined together with spaces in the final report, in a style\n   similar to RSpec <http://rspec.info/>\n\n   (testing \"Arithmetic\"\n     (testing \"with positive integers\"\n       (is (= 4 (+ 2 2)))\n       (is (= 7 (+ 3 4))))\n     (testing \"with negative integers\"\n       (is (= -4 (+ -2 -2)))\n       (is (= -1 (+ 3 -4)))))\n\n   Note that, unlike RSpec, the \"testing\" macro may only be used\n   INSIDE a \"deftest\" or \"with-test\" form (see below).\n\n\n   DEFINING TESTS\n\n   There are two ways to define tests.  The \"with-test\" macro takes\n   a defn or def form as its first argument, followed by any number\n   of assertions.  The tests will be stored as metadata on the\n   definition.\n\n   (with-test\n       (defn my-function [x y]\n         (+ x y))\n     (is (= 4 (my-function 2 2)))\n     (is (= 7 (my-function 3 4))))\n\n   As of Clojure SVN rev. 1221, this does not work with defmacro.\n   See http://code.google.com/p/clojure/issues/detail?id=51\n\n   The other way lets you define tests separately from the rest of\n   your code, even in a different namespace:\n\n   (deftest addition\n     (is (= 4 (+ 2 2)))\n     (is (= 7 (+ 3 4))))\n\n   (deftest subtraction\n     (is (= 1 (- 4 3)))\n     (is (= 3 (- 7 4))))\n\n   This creates functions named \"addition\" and \"subtraction\", which\n   can be called like any other function.  Therefore, tests can be\n   grouped and composed, in a style similar to the test framework in\n   Peter Seibel's \"Practical Common Lisp\"\n   <http://www.gigamonkeys.com/book/practical-building-a-unit-test-framework.html>\n\n   (deftest arithmetic\n     (addition)\n     (subtraction))\n\n   The names of the nested tests will be joined in a list, like\n   \"(arithmetic addition)\", in failure reports.  You can use nested\n   tests to set up a context shared by several tests.\n\n\n   RUNNING TESTS\n\n   Run tests with the function \"(run-tests namespaces...)\":\n\n   (run-tests 'your.namespace 'some.other.namespace)\n\n   If you don't specify any namespaces, the current namespace is\n   used.  To run all tests in all namespaces, use \"(run-all-tests)\".\n\n   By default, these functions will search for all tests defined in\n   a namespace and run them in an undefined order.  However, if you\n   are composing tests, as in the \"arithmetic\" example above, you\n   probably do not want the \"addition\" and \"subtraction\" tests run\n   separately.  In that case, you must define a special function\n   named \"test-ns-hook\" that runs your tests in the correct order:\n\n   (defn test-ns-hook []\n     (arithmetic))\n\n   Note: test-ns-hook prevents execution of fixtures (see below).\n\n\n   OMITTING TESTS FROM PRODUCTION CODE\n\n   You can bind the variable \"*load-tests*\" to false when loading or\n   compiling code in production.  This will prevent any tests from\n   being created by \"with-test\" or \"deftest\".\n\n\n   FIXTURES\n\n   Fixtures allow you to run code before and after tests, to set up\n   the context in which tests should be run.\n\n   A fixture is just a function that calls another function passed as\n   an argument.  It looks like this:\n\n   (defn my-fixture [f]\n      Perform setup, establish bindings, whatever.\n     (f)  Then call the function we were passed.\n      Tear-down / clean-up code here.\n    )\n\n   Fixtures are attached to namespaces in one of two ways.  \"each\"\n   fixtures are run repeatedly, once for each test function created\n   with \"deftest\" or \"with-test\".  \"each\" fixtures are useful for\n   establishing a consistent before/after state for each test, like\n   clearing out database tables.\n\n   \"each\" fixtures can be attached to the current namespace like this:\n   (use-fixtures :each fixture1 fixture2 ...)\n   The fixture1, fixture2 are just functions like the example above.\n   They can also be anonymous functions, like this:\n   (use-fixtures :each (fn [f] setup... (f) cleanup...))\n\n   The other kind of fixture, a \"once\" fixture, is only run once,\n   around ALL the tests in the namespace.  \"once\" fixtures are useful\n   for tasks that only need to be performed once, like establishing\n   database connections, or for time-consuming tasks.\n\n   Attach \"once\" fixtures to the current namespace like this:\n   (use-fixtures :once fixture1 fixture2 ...)\n\n   Note: Fixtures and test-ns-hook are mutually incompatible.  If you\n   are using test-ns-hook, fixture functions will *never* be run.\n\n\n   SAVING TEST OUTPUT TO A FILE\n\n   All the test reporting functions write to the var *test-out*.  By\n   default, this is the same as *out*, but you can rebind it to any\n   PrintWriter.  For example, it could be a file opened with\n   clojure.java.io/writer.\n\n\n   EXTENDING TEST-IS (ADVANCED)\n\n   You can extend the behavior of the \"is\" macro by defining new\n   methods for the \"assert-expr\" multimethod.  These methods are\n   called during expansion of the \"is\" macro, so they should return\n   quoted forms to be evaluated.\n\n   You can plug in your own test-reporting framework by rebinding\n   the \"report\" function: (report event)\n\n   The 'event' argument is a map.  It will always have a :type key,\n   whose value will be a keyword signaling the type of event being\n   reported.  Standard events with :type value of :pass, :fail, and\n   :error are called when an assertion passes, fails, and throws an\n   exception, respectively.  In that case, the event will also have\n   the following keys:\n\n     :expected   The form that was expected to be true\n     :actual     A form representing what actually occurred\n     :message    The string message given as an argument to 'is'\n\n   The \"testing\" strings will be a list in \"*testing-contexts*\", and\n   the vars being tested will be a list in \"*testing-vars*\".\n\n   Your \"report\" function should wrap any printing calls in the\n   \"with-test-out\" macro, which rebinds *out* to the current value\n   of *test-out*.\n\n   For additional event types, see the examples in the code.\n" });
    const__5 = (AFn)Symbol.intern(null, "clojure.core");
    const__6 = (Var)RT.var("clojure.test", "*stack-trace-depth*");
    const__14 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "doc"), "The maximum depth of stack traces to print when an Exception\n  is thrown during a test.  Defaults to nil, which means print the \n  complete stack trace.", RT.keyword(null, "added"), "1.1", RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(252), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/test.clj" });
    const__15 = (Var)RT.var("clojure.test", "*report-counters*");
    const__17 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(262), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/test.clj" });
    const__18 = (Var)RT.var("clojure.test", "*initial-report-counters*");
    const__20 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(264), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/test.clj" });
    const__23 = (Keyword)RT.keyword(null, "pass");
    const__24 = (Keyword)RT.keyword(null, "fail");
    const__25 = (Keyword)RT.keyword(null, "error");
    const__26 = (AFn)RT.map(new Object[] { RT.keyword(null, "test"), Long.valueOf(0L), RT.keyword(null, "pass"), Long.valueOf(0L), RT.keyword(null, "fail"), Long.valueOf(0L), RT.keyword(null, "error"), Long.valueOf(0L) });
    const__27 = (Var)RT.var("clojure.test", "*testing-vars*");
    const__29 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(267), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/test.clj" });
    const__30 = (Var)RT.var("clojure.core", "list");
    const__31 = (Var)RT.var("clojure.test", "*testing-contexts*");
    const__33 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(269), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/test.clj" });
    const__34 = (Var)RT.var("clojure.test", "*test-out*");
    const__36 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(271), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/test.clj" });
    const__37 = (Var)RT.var("clojure.core", "*out*");
    const__38 = (Var)RT.var("clojure.test", "with-test-out");
    const__42 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "doc"), "Runs body with *out* bound to the value of *test-out*.", RT.keyword(null, "added"), "1.1", RT.keyword(null, "line"), Integer.valueOf(273), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/test.clj" });
    const__43 = (Var)RT.var("clojure.test", "file-position");
    const__47 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "n")) })), RT.keyword(null, "doc"), "Returns a vector [filename line-number] for the nth call up the\n  stack.\n\n  Deprecated in 1.2: The information needed for test reporting is\n  now on :file and :line keys in the result map.", RT.keyword(null, "added"), "1.1", RT.keyword(null, "deprecated"), "1.2", RT.keyword(null, "line"), Integer.valueOf(282), 
          RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/test.clj" });
    const__48 = (Var)RT.var("clojure.test", "testing-vars-str");
    const__51 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m")) })), RT.keyword(null, "doc"), "Returns a string representation of the current test.  Renders names\n  in *testing-vars* as a list, then the source file and line of\n  current assertion.", RT.keyword(null, "added"), "1.1", RT.keyword(null, "line"), Integer.valueOf(294), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/test.clj" });
    const__52 = (Var)RT.var("clojure.test", "testing-contexts-str");
    const__55 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "doc"), "Returns a string representation of the current test context. Joins\n  strings in *testing-contexts* with spaces.", RT.keyword(null, "added"), "1.1", RT.keyword(null, "line"), Integer.valueOf(307), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/test.clj" });
    const__56 = (Var)RT.var("clojure.test", "inc-report-counter");
    const__59 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "name")) })), RT.keyword(null, "doc"), "Increments the named counter in *report-counters*, a ref to a map.\n  Does nothing if *report-counters* is nil.", RT.keyword(null, "added"), "1.1", RT.keyword(null, "line"), Integer.valueOf(314), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/test.clj" });
    const__60 = (Var)RT.var("clojure.test", "file-and-line");
    const__64 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "exception")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Throwable") })), Symbol.intern(null, "depth")) })), RT.keyword(null, "deprecated"), "1.8", RT.keyword(null, "line"), Integer.valueOf(335), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/test.clj" });
    const__65 = (Var)RT.var("clojure.test", "stacktrace-file-and-line");
    const__68 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "stacktrace")) })), RT.keyword(null, "line"), Integer.valueOf(344), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/test.clj" });
    const__69 = (Var)RT.var("clojure.test", "do-report");
    const__72 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m")) })), RT.keyword(null, "doc"), "Add file and line information to a test result and call report.\n   If you are writing a custom assert-expr method, call this function\n   to pass test results to report.", RT.keyword(null, "added"), "1.2", RT.keyword(null, "line"), Integer.valueOf(351), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/test.clj" });
    const__73 = (Var)RT.var("clojure.test", "report");
    const__74 = (Keyword)RT.keyword(null, "default");
    const__75 = (Keyword)RT.keyword(null, "summary");
    const__76 = (Keyword)RT.keyword(null, "begin-test-ns");
    const__77 = (Keyword)RT.keyword(null, "end-test-ns");
    const__78 = (Keyword)RT.keyword(null, "begin-test-var");
    const__79 = (Keyword)RT.keyword(null, "end-test-var");
    const__80 = (Var)RT.var("clojure.test", "get-possibly-unbound-var");
    const__83 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "v")) })), RT.keyword(null, "doc"), "Like var-get but returns nil if the var is unbound.", RT.keyword(null, "added"), "1.1", RT.keyword(null, "line"), Integer.valueOf(416), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/test.clj" });
    const__84 = (Var)RT.var("clojure.test", "function?");
    const__87 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "doc"), "Returns true if argument is a function or a symbol that resolves to\n  a function (not a macro).", RT.keyword(null, "added"), "1.1", RT.keyword(null, "line"), Integer.valueOf(424), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/test.clj" });
    const__88 = (Var)RT.var("clojure.test", "assert-predicate");
    const__91 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "msg"), Symbol.intern(null, "form")) })), RT.keyword(null, "doc"), "Returns generic assertion code for any functional predicate.  The\n  'expected' argument to 'report' will contains the original form, the\n  'actual' argument will contain the form with all its sub-forms\n  evaluated.  If the predicate returns false, the 'actual' form will\n  be wrapped in (not...).", RT.keyword(null, "added"), "1.1", RT.keyword(null, "line"), Integer.valueOf(436), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/test.clj" });
    const__92 = (Var)RT.var("clojure.test", "assert-any");
    const__95 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "msg"), Symbol.intern(null, "form")) })), RT.keyword(null, "doc"), "Returns generic assertion code for any test, including macros, Java\n  method calls, or isolated symbols.", RT.keyword(null, "added"), "1.1", RT.keyword(null, "line"), Integer.valueOf(455), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/test.clj" });
    const__96 = (Var)RT.var("clojure.test", "assert-expr");
    const__97 = (Keyword)RT.keyword(null, "always-fail");
    const__98 = (AFn)Symbol.intern(null, "instance?");
    const__99 = (AFn)Symbol.intern(null, "thrown?");
  }
  
  public static void __init1() {
    const__100 = (AFn)Symbol.intern(null, "thrown-with-msg?");
    const__101 = (Var)RT.var("clojure.test", "try-expr");
    const__104 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "msg"), Symbol.intern(null, "form")) })), RT.keyword(null, "doc"), "Used by the 'is' macro to catch unexpected exceptions.\n  You don't call this.", RT.keyword(null, "added"), "1.1", RT.keyword(null, "line"), Integer.valueOf(538), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/test.clj" });
    const__105 = (Var)RT.var("clojure.test", "is");
    const__108 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "form")), Tuple.create(Symbol.intern(null, "form"), Symbol.intern(null, "msg")) })), RT.keyword(null, "doc"), "Generic assertion macro.  'form' is any predicate test.\n  'msg' is an optional message to attach to the assertion.\n  \n  Example: (is (= 4 (+ 2 2)) \"Two plus two should be 4\")\n\n  Special forms:\n\n  (is (thrown? c body)) checks that an instance of c is thrown from\n  body, fails if not; then returns the thing thrown.\n\n  (is (thrown-with-msg? c re body)) checks that an instance of c is\n  thrown AND that the message on the exception matches (with\n  re-find) the regular expression re.", RT.keyword(null, "added"), "1.1", RT.keyword(null, "line"), Integer.valueOf(554), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/test.clj" });
    const__109 = (Var)RT.var("clojure.test", "are");
    const__112 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "argv"), Symbol.intern(null, "expr"), Symbol.intern(null, "&"), Symbol.intern(null, "args")) })), RT.keyword(null, "doc"), "Checks multiple assertions with a template expression.\n  See clojure.template/do-template for an explanation of\n  templates.\n\n  Example: (are [x y] (= x y)  \n                2 (+ 1 1)\n                4 (* 2 2))\n  Expands to: \n           (do (is (= 2 (+ 1 1)))\n               (is (= 4 (* 2 2))))\n\n  Note: This breaks some reporting features, such as line numbers.", RT.keyword(null, "added"), "1.1", RT.keyword(null, "line"), Integer.valueOf(572), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/test.clj" });
    const__113 = (Var)RT.var("clojure.test", "testing");
    const__116 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "string"), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "doc"), "Adds a new string to the list of testing contexts.  May be nested,\n  but must occur inside a test function (deftest).", RT.keyword(null, "added"), "1.1", RT.keyword(null, "line"), Integer.valueOf(597), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/test.clj" });
    const__117 = (Var)RT.var("clojure.test", "with-test");
    const__120 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "definition"), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "doc"), "Takes any definition form (that returns a Var) as the first argument.\n  Remaining body goes in the :test metadata function for that Var.\n\n  When *load-tests* is false, only evaluates the definition, ignoring\n  the tests.", RT.keyword(null, "added"), "1.1", RT.keyword(null, "line"), Integer.valueOf(609), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/test.clj" });
    const__121 = (Var)RT.var("clojure.test", "deftest");
    const__124 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "name"), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "doc"), "Defines a test function with no arguments.  Test functions may call\n  other tests, so tests may be composed.  If you compose tests, you\n  should also define a function named test-ns-hook; run-tests will\n  call test-ns-hook instead of testing all vars.\n\n  Note: Actually, the test body goes in the :test metadata on the var,\n  and the real function (the value of the var) calls test-var on\n  itself.\n\n  When *load-tests* is false, deftest is ignored.", RT.keyword(null, "added"), "1.1", RT.keyword(null, "line"), Integer.valueOf(622), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/test.clj" });
    const__125 = (Var)RT.var("clojure.test", "deftest-");
    const__128 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "name"), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "doc"), "Like deftest but creates a private var.", RT.keyword(null, "added"), "1.1", RT.keyword(null, "line"), Integer.valueOf(639), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/test.clj" });
    const__129 = (Var)RT.var("clojure.test", "set-test");
    const__132 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "name"), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "doc"), "Experimental.\n  Sets :test metadata of the named var to a fn with the given body.\n  The var must already exist.  Does not modify the value of the var.\n\n  When *load-tests* is false, set-test is ignored.", RT.keyword(null, "added"), "1.1", RT.keyword(null, "line"), Integer.valueOf(648), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/test.clj" });
    const__133 = (Var)RT.var("clojure.test", "add-ns-meta");
    const__136 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "key"), Symbol.intern(null, "coll")) })), RT.keyword(null, "doc"), "Adds elements in coll to the current namespace metadata as the\n  value of key.", RT.keyword(null, "added"), "1.1", RT.keyword(null, "line"), Integer.valueOf(663), 
          RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/test.clj" });
    const__137 = (Var)RT.var("clojure.test", "use-fixtures");
    const__138 = (Keyword)RT.keyword(null, "each");
    const__139 = (Keyword)RT.keyword(null, "once");
    const__140 = (Var)RT.var("clojure.test", "default-fixture");
    const__143 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f")) })), RT.keyword(null, "doc"), "The default, empty, fixture function.  Just calls its argument.", RT.keyword(null, "added"), "1.1", RT.keyword(null, "line"), Integer.valueOf(683), 
          RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/test.clj" });
    const__144 = (Var)RT.var("clojure.test", "compose-fixtures");
    const__147 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f1"), Symbol.intern(null, "f2")) })), RT.keyword(null, "doc"), "Composes two fixture functions, creating a new fixture function\n  that combines their behavior.", RT.keyword(null, "added"), "1.1", RT.keyword(null, "line"), Integer.valueOf(689), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/test.clj" });
    const__148 = (Var)RT.var("clojure.test", "join-fixtures");
    const__151 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "fixtures")) })), RT.keyword(null, "doc"), "Composes a collection of fixtures, in order.  Always returns a valid\n  fixture function, even if the collection is empty.", RT.keyword(null, "added"), "1.1", RT.keyword(null, "line"), Integer.valueOf(696), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/test.clj" });
    const__152 = (Var)RT.var("clojure.test", "test-var");
    const__155 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "v")) })), RT.keyword(null, "doc"), "If v has a function in its :test metadata, calls that function,\n  with *testing-vars* bound to (conj *testing-vars* v).", RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "added"), "1.1", RT.keyword(null, "line"), Integer.valueOf(708), 
          RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/test.clj" });
    const__156 = (Var)RT.var("clojure.test", "test-vars");
    const__159 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "vars")) })), RT.keyword(null, "doc"), "Groups vars by their namespace and runs test-vars on them with\n   appropriate fixtures applied.", RT.keyword(null, "added"), "1.6", RT.keyword(null, "line"), Integer.valueOf(723), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/test.clj" });
    const__160 = (Var)RT.var("clojure.test", "test-all-vars");
    const__163 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ns")) })), RT.keyword(null, "doc"), "Calls test-vars on every var interned in the namespace, with fixtures.", RT.keyword(null, "added"), "1.1", RT.keyword(null, "line"), Integer.valueOf(737), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/test.clj" });
    const__164 = (Var)RT.var("clojure.test", "test-ns");
    const__167 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ns")) })), RT.keyword(null, "doc"), "If the namespace defines a function named test-ns-hook, calls that.\n  Otherwise, calls test-all-vars on the namespace.  'ns' is a\n  namespace object or a symbol.\n\n  Internally binds *report-counters* to a ref initialized to\n  *initial-report-counters*.  Returns the final, dereferenced state of\n  *report-counters*.", RT.keyword(null, "added"), "1.1", RT.keyword(null, "line"), Integer.valueOf(743), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/test.clj" });
    const__168 = (Var)RT.var("clojure.test", "run-tests");
    const__171 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(), Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "namespaces")) })), RT.keyword(null, "doc"), "Runs all tests in the given namespaces; prints results.\n  Defaults to current namespace if none given.  Returns a map\n  summarizing test results.", RT.keyword(null, "added"), "1.1", RT.keyword(null, "line"), Integer.valueOf(768), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/test.clj" });
    const__172 = (Var)RT.var("clojure.test", "run-all-tests");
    const__175 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(), Tuple.create(Symbol.intern(null, "re")) })), RT.keyword(null, "doc"), "Runs all tests in all namespaces; prints results.\n  Optional argument is a regular expression; only namespaces with\n  names matching the regular expression (with re-matches) will be\n  tested.", RT.keyword(null, "added"), "1.1", RT.keyword(null, "line"), Integer.valueOf(780), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/test.clj" });
    const__176 = (Var)RT.var("clojure.test", "successful?");
    const__179 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "summary")) })), RT.keyword(null, "doc"), "Returns true if the given test summary indicates all tests\n  were successful, false otherwise.", RT.keyword(null, "added"), "1.1", RT.keyword(null, "line"), Integer.valueOf(789), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/test.clj" });
  }
  
  static  {
    __init0();
    __init1();
    Compiler.pushNSandLoader(RT.classForName("clojure.test__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
