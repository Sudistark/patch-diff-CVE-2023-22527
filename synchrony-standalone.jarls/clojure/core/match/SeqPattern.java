package clojure.core.match;

import clojure.core.match.protocols.IPatternCompile;
import clojure.core.match.protocols.ISpecializeMatrix;
import clojure.lang.AFn;
import clojure.lang.IFn;
import clojure.lang.ILookup;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.IPersistentVector;
import clojure.lang.IType;
import clojure.lang.Keyword;
import clojure.lang.Numbers;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Util;
import clojure.lang.Var;

public final class SeqPattern implements IPatternCompile, ILookup, IObj, ISpecializeMatrix, IType {
  public final Object s;
  
  public final Object _meta;
  
  public static final Var const__0 = (Var)RT.var("clojure.core", "str");
  
  public static final Keyword const__1 = (Keyword)RT.keyword("clojure.core.match", "tag");
  
  public static final Keyword const__2 = (Keyword)RT.keyword("clojure.core.match", "seq");
  
  public static final Keyword const__3 = (Keyword)RT.keyword(null, "s");
  
  public static final Var const__7 = (Var)RT.var("clojure.core", "not");
  
  public static final Var const__8 = (Var)RT.var("clojure.core.match", "rest-pattern?");
  
  public static final Var const__9 = (Var)RT.var("clojure.core", "first");
  
  public static final Var const__10 = (Var)RT.var("clojure.core", "seq");
  
  public static final Var const__11 = (Var)RT.var("clojure.core", "concat");
  
  public static final Var const__12 = (Var)RT.var("clojure.core", "list");
  
  public static final AFn const__13 = (AFn)Symbol.intern("clojure.core", "and");
  
  public static final AFn const__14 = (AFn)Symbol.intern("clojure.core", "or");
  
  public static final AFn const__15 = (AFn)Symbol.intern("clojure.core", "seq?");
  
  public static final AFn const__16 = (AFn)Symbol.intern("clojure.core", "sequential?");
  
  public static final AFn const__17 = (AFn)Symbol.intern("clojure.core", "seq");
  
  public static final AFn const__18 = (AFn)Symbol.intern("clojure.core", "or");
  
  public static final AFn const__19 = (AFn)Symbol.intern("clojure.core", "seq?");
  
  public static final AFn const__20 = (AFn)Symbol.intern("clojure.core", "sequential?");
  
  public static final Var const__21 = (Var)RT.var("clojure.core.match", "rows"), const__22 = (Var)RT.var("clojure.core.match", "occurrences"), const__23 = (Var)RT.var("clojure.core.match", "specialize-seq-pattern-matrix"), const__24 = (Var)RT.var("clojure.core.match", "seq-pattern-matrix-ocrs"), const__25 = (Var)RT.var("clojure.core.match", "pattern-matrix"), const__26 = (Var)RT.var("clojure.core.match", "specialize-seq-pattern-rest-matrix"), const__27 = (Var)RT.var("clojure.core.match", "seq-pattern-matrix-rest-ocrs");
  
  public SeqPattern(Object paramObject1, Object paramObject2) { this.s = paramObject1;
    this._meta = paramObject2; }
  
  public static IPersistentVector getBasis() { return Tuple.create(Symbol.intern(null, "s"), Symbol.intern(null, "_meta")); }
  
  public Object specialize_matrix(Object matrix) {
    Object rows = ((IFn)const__21.getRawRoot()).invoke(matrix);
    matrix = null;
    Object ocrs = ((IFn)const__22.getRawRoot()).invoke(matrix);
    Object focr = ((IFn)const__9.getRawRoot()).invoke(ocrs);
    if (((IFn)const__7.getRawRoot()).invoke(((IFn)const__8.getRawRoot()).invoke(((IFn)const__9.getRawRoot()).invoke(this.s))) != null) {
      if (((IFn)const__7.getRawRoot()).invoke(((IFn)const__8.getRawRoot()).invoke(((IFn)const__9.getRawRoot()).invoke(this.s))) != Boolean.FALSE) {
        rows = null;
        Object nrows = ((IFn)const__23.getRawRoot()).invoke(rows, focr);
        ocrs = null;
        focr = null;
        Object nocrs = ((IFn)const__24.getRawRoot()).invoke(ocrs, focr);
        nrows = null;
        nocrs = null;
        this = null;
      } 
    } else {
      ((IFn)const__7.getRawRoot()).invoke(((IFn)const__8.getRawRoot()).invoke(((IFn)const__9.getRawRoot()).invoke(this.s)));
    } 
    rows = null;
    Object nrows = ((IFn)const__26.getRawRoot()).invoke(rows, focr);
    ocrs = null;
    focr = null;
    Object nocrs = ((IFn)const__27.getRawRoot()).invoke(ocrs, focr);
    nrows = null;
    nocrs = null;
    this = null;
    return ((IFn)const__25.getRawRoot()).invoke(nrows, nocrs);
  }
  
  public Object to_source_STAR_(Object ocr) {
    boolean and__5514__auto__36277 = Numbers.gte(RT.count(this.s), 1L);
    if ((and__5514__auto__36277 ? ((IFn)const__7.getRawRoot()).invoke(((IFn)const__8.getRawRoot()).invoke(((IFn)const__9.getRawRoot()).invoke(this.s))) : (and__5514__auto__36277 ? Boolean.TRUE : Boolean.FALSE)) != null) {
      if ((and__5514__auto__36277 ? ((IFn)const__7.getRawRoot()).invoke(((IFn)const__8.getRawRoot()).invoke(((IFn)const__9.getRawRoot()).invoke(this.s))) : (and__5514__auto__36277 ? Boolean.TRUE : Boolean.FALSE)) != Boolean.FALSE) {
        ocr = null;
        this = null;
      } 
    } else {
      and__5514__auto__36277 ? ((IFn)const__7.getRawRoot()).invoke(((IFn)const__8.getRawRoot()).invoke(((IFn)const__9.getRawRoot()).invoke(this.s))) : (and__5514__auto__36277 ? Boolean.TRUE : Boolean.FALSE);
    } 
    ocr = null;
    this = null;
    return ((IFn)const__10.getRawRoot()).invoke(((IFn)const__11.getRawRoot()).invoke(((IFn)const__12.getRawRoot()).invoke(const__18), ((IFn)const__12.getRawRoot()).invoke(((IFn)const__10.getRawRoot()).invoke(((IFn)const__11.getRawRoot()).invoke(((IFn)const__12.getRawRoot()).invoke(const__19), ((IFn)const__12.getRawRoot()).invoke(ocr)))), ((IFn)const__12.getRawRoot()).invoke(((IFn)const__10.getRawRoot()).invoke(((IFn)const__11.getRawRoot()).invoke(((IFn)const__12.getRawRoot()).invoke(const__20), ((IFn)const__12.getRawRoot()).invoke(ocr))))));
  }
  
  public Object valAt(Object k, Object not_found) {
    Object G__36275 = k = null;
    switch (Util.hash(G__36275) >> 0 & true) {
      case 0:
        if (G__36275 == const__1);
        break;
      case 1:
        if (G__36275 == const__3);
        break;
    } 
    return null;
  }
  
  public Object valAt(Object k) { k = null;
    return ((ILookup)this).valAt(k, null); }
  
  public IObj withMeta(IPersistentMap new_meta) { new_meta = null;
    return (IObj)new SeqPattern(this.s, new_meta); }
  
  public IPersistentMap meta() { return (IPersistentMap)this._meta; }
  
  public String toString() { this = null;
    return (String)((IFn)const__0.getRawRoot()).invoke(this.s); }
}
