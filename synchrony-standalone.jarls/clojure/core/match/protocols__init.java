package clojure.core.match;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class protocols__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Object const__3;
  
  public static final Var const__4;
  
  public static final Var const__5;
  
  public static final Var const__6;
  
  public static final Keyword const__7;
  
  public static final Var const__8;
  
  public static final ISeq const__9;
  
  public static final Var const__10;
  
  public static final Var const__11;
  
  public static final AFn const__15;
  
  public static final Keyword const__16;
  
  public static final AFn const__17;
  
  public static final Keyword const__18;
  
  public static final Keyword const__19;
  
  public static final AFn const__21;
  
  public static final Keyword const__22;
  
  public static final Var const__23;
  
  public static final Var const__24;
  
  public static final Var const__25;
  
  public static final AFn const__26;
  
  public static final AFn const__27;
  
  public static final Keyword const__28;
  
  public static final Var const__29;
  
  public static final AFn const__30;
  
  public static final Object const__31;
  
  public static final Var const__32;
  
  public static final ISeq const__33;
  
  public static final AFn const__35;
  
  public static final AFn const__36;
  
  public static final AFn const__38;
  
  public static final AFn const__39;
  
  public static final AFn const__40;
  
  public static final AFn const__41;
  
  public static final Object const__42;
  
  public static final Var const__43;
  
  public static final ISeq const__44;
  
  public static final AFn const__46;
  
  public static final AFn const__47;
  
  public static final AFn const__49;
  
  public static final AFn const__50;
  
  public static final AFn const__51;
  
  public static final AFn const__52;
  
  public static final Object const__53;
  
  public static final Var const__54;
  
  public static final ISeq const__55;
  
  public static final AFn const__57;
  
  public static final AFn const__58;
  
  public static final AFn const__60;
  
  public static final AFn const__61;
  
  public static final AFn const__62;
  
  public static final AFn const__63;
  
  public static final Object const__64;
  
  public static final Var const__65;
  
  public static final ISeq const__66;
  
  public static final AFn const__68;
  
  public static final AFn const__69;
  
  public static final AFn const__71;
  
  public static final AFn const__72;
  
  public static final AFn const__73;
  
  public static final AFn const__74;
  
  public static final Object const__75;
  
  public static final Var const__76;
  
  public static final ISeq const__77;
  
  public static final AFn const__79;
  
  public static final AFn const__80;
  
  public static final AFn const__84;
  
  public static final AFn const__85;
  
  public static final AFn const__86;
  
  public static final AFn const__87;
  
  public static final AFn const__88;
  
  public static final AFn const__89;
  
  public static final AFn const__90;
  
  public static final AFn const__91;
  
  public static final Object const__92;
  
  public static final Var const__93;
  
  public static final ISeq const__94;
  
  public static final AFn const__96;
  
  public static final AFn const__97;
  
  public static final AFn const__99;
  
  public static final AFn const__100;
  
  public static final AFn const__101;
  
  public static final AFn const__102;
  
  public static final Object const__103;
  
  public static final Var const__104;
  
  public static final ISeq const__105;
  
  public static final AFn const__107;
  
  public static final AFn const__108;
  
  public static final AFn const__110;
  
  public static final AFn const__111;
  
  public static final AFn const__112;
  
  public static final AFn const__113;
  
  public static void load() { LockingTransaction.runInTransaction((Callable)new protocols.fn__35634()); }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "clojure.core.match.protocols");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = RT.classForName("clojure.core.match.protocols.ISpecializeMatrix");
    const__4 = (Var)RT.var("clojure.core", "alter-meta!");
    const__5 = (Var)RT.var("clojure.core.match.protocols", "ISpecializeMatrix");
    const__6 = (Var)RT.var("clojure.core", "assoc");
    const__7 = (Keyword)RT.keyword(null, "doc");
    const__8 = (Var)RT.var("clojure.core", "assert-same-protocol");
    const__9 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "specialize-matrix")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "matrix")) })) })) }));
    const__10 = (Var)RT.var("clojure.core", "alter-var-root");
    const__11 = (Var)RT.var("clojure.core", "merge");
    const__15 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "clojure.core.match.protocols.ISpecializeMatrix"), RT.keyword(null, "on-interface"), RT.classForName("clojure.core.match.protocols.ISpecializeMatrix") });
    const__16 = (Keyword)RT.keyword(null, "sigs");
    const__17 = (AFn)RT.map(new Object[] { RT.keyword(null, "specialize-matrix"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "specialize-matrix")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "matrix")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "matrix")) })), RT.keyword(null, "doc"), null }) });
    const__18 = (Keyword)RT.keyword(null, "var");
    const__19 = (Keyword)RT.keyword(null, "method-map");
    const__21 = (AFn)RT.map(new Object[] { RT.keyword(null, "specialize-matrix"), RT.keyword(null, "specialize-matrix") });
    const__22 = (Keyword)RT.keyword(null, "method-builders");
    const__23 = (Var)RT.var("clojure.core", "intern");
    const__24 = (Var)RT.var("clojure.core", "*ns*");
    const__25 = (Var)RT.var("clojure.core", "with-meta");
    const__26 = (AFn)((IObj)Symbol.intern(null, "specialize-matrix")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "matrix")) })) }));
    const__27 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "specialize-matrix")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "matrix")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "matrix")) })), RT.keyword(null, "doc"), null });
    const__28 = (Keyword)RT.keyword(null, "protocol");
    const__29 = (Var)RT.var("clojure.core", "-reset-methods");
    const__30 = (AFn)Symbol.intern(null, "ISpecializeMatrix");
    const__31 = RT.classForName("clojure.core.match.protocols.IContainsRestPattern");
    const__32 = (Var)RT.var("clojure.core.match.protocols", "IContainsRestPattern");
    const__33 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "contains-rest-pattern?")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })) }));
    const__35 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "clojure.core.match.protocols.IContainsRestPattern"), RT.keyword(null, "on-interface"), RT.classForName("clojure.core.match.protocols.IContainsRestPattern") });
    const__36 = (AFn)RT.map(new Object[] { RT.keyword(null, "contains-rest-pattern?"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "contains-rest-pattern?")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })), RT.keyword(null, "doc"), null }) });
    const__38 = (AFn)RT.map(new Object[] { RT.keyword(null, "contains-rest-pattern?"), RT.keyword(null, "contains-rest-pattern?") });
    const__39 = (AFn)((IObj)Symbol.intern(null, "contains-rest-pattern?")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) }));
    const__40 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "contains-rest-pattern?")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })), RT.keyword(null, "doc"), null });
    const__41 = (AFn)Symbol.intern(null, "IContainsRestPattern");
    const__42 = RT.classForName("clojure.core.match.protocols.IMatchLookup");
    const__43 = (Var)RT.var("clojure.core.match.protocols", "IMatchLookup");
    const__44 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "val-at")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "k"), Symbol.intern(null, "not-found")) })) })) }));
    const__46 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "clojure.core.match.protocols.IMatchLookup"), RT.keyword(null, "on-interface"), RT.classForName("clojure.core.match.protocols.IMatchLookup"), RT.keyword(null, "doc"), "Allows arbitrary objects to act like a map-like object when pattern\n  matched. Avoid extending this directly for Java Beans, see\n  `match.java/bean-match`." });
    const__47 = (AFn)RT.map(new Object[] { RT.keyword(null, "val-at"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "val-at")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "k"), Symbol.intern(null, "not-found")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "k"), Symbol.intern(null, "not-found")) })), RT.keyword(null, "doc"), null }) });
    const__49 = (AFn)RT.map(new Object[] { RT.keyword(null, "val-at"), RT.keyword(null, "val-at") });
    const__50 = (AFn)((IObj)Symbol.intern(null, "val-at")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "k"), Symbol.intern(null, "not-found")) })) }));
    const__51 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "val-at")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "k"), Symbol.intern(null, "not-found")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "k"), Symbol.intern(null, "not-found")) })), RT.keyword(null, "doc"), null });
    const__52 = (AFn)Symbol.intern(null, "IMatchLookup");
    const__53 = RT.classForName("clojure.core.match.protocols.INodeCompile");
    const__54 = (Var)RT.var("clojure.core.match.protocols", "INodeCompile");
    const__55 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "n-to-clj")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })) }));
    const__57 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "clojure.core.match.protocols.INodeCompile"), RT.keyword(null, "on-interface"), RT.classForName("clojure.core.match.protocols.INodeCompile") });
    const__58 = (AFn)RT.map(new Object[] { RT.keyword(null, "n-to-clj"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "n-to-clj")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })), RT.keyword(null, "doc"), null }) });
    const__60 = (AFn)RT.map(new Object[] { RT.keyword(null, "n-to-clj"), RT.keyword(null, "n-to-clj") });
    const__61 = (AFn)((IObj)Symbol.intern(null, "n-to-clj")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) }));
    const__62 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "n-to-clj")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })), RT.keyword(null, "doc"), null });
    const__63 = (AFn)Symbol.intern(null, "INodeCompile");
    const__64 = RT.classForName("clojure.core.match.protocols.IPatternCompile");
    const__65 = (Var)RT.var("clojure.core.match.protocols", "IPatternCompile");
    const__66 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "to-source*")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "ocr")) })) })) }));
    const__68 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "clojure.core.match.protocols.IPatternCompile"), RT.keyword(null, "on-interface"), RT.classForName("clojure.core.match.protocols.IPatternCompile") });
    const__69 = (AFn)RT.map(new Object[] { RT.keyword(null, "to-source*"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "to-source*")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "ocr")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "ocr")) })), RT.keyword(null, "doc"), null }) });
    const__71 = (AFn)RT.map(new Object[] { RT.keyword(null, "to-source*"), RT.keyword(null, "to-source*") });
    const__72 = (AFn)((IObj)Symbol.intern(null, "to-source*")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "ocr")) })) }));
    const__73 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "to-source*")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "ocr")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "ocr")) })), RT.keyword(null, "doc"), null });
    const__74 = (AFn)Symbol.intern(null, "IPatternCompile");
    const__75 = RT.classForName("clojure.core.match.protocols.IVecMod");
    const__76 = (Var)RT.var("clojure.core.match.protocols", "IVecMod");
    const__77 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "prepend")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "x")) })) })), ((IObj)Symbol.intern(null, "drop-nth")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "n")) })) })), ((IObj)Symbol.intern(null, "swap")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "n")) })) })) }));
    const__79 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "clojure.core.match.protocols.IVecMod"), RT.keyword(null, "on-interface"), RT.classForName("clojure.core.match.protocols.IVecMod") });
    const__80 = (AFn)RT.map(new Object[] { RT.keyword(null, "prepend"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "prepend")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "x")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "x")) })), RT.keyword(null, "doc"), null }), RT.keyword(null, "drop-nth"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "drop-nth")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "n")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "n")) })), RT.keyword(null, "doc"), null }), RT.keyword(null, "swap"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "swap")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "n")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "n")) })), RT.keyword(null, "doc"), null }) });
    const__84 = (AFn)RT.map(new Object[] { RT.keyword(null, "drop-nth"), RT.keyword(null, "drop-nth"), RT.keyword(null, "prepend"), RT.keyword(null, "prepend"), RT.keyword(null, "swap"), RT.keyword(null, "swap") });
    const__85 = (AFn)((IObj)Symbol.intern(null, "swap")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "n")) })) }));
    const__86 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "swap")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "n")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "n")) })), RT.keyword(null, "doc"), null });
    const__87 = (AFn)((IObj)Symbol.intern(null, "prepend")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "x")) })) }));
    const__88 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "prepend")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "x")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "x")) })), RT.keyword(null, "doc"), null });
    const__89 = (AFn)((IObj)Symbol.intern(null, "drop-nth")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "n")) })) }));
    const__90 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "drop-nth")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "n")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "n")) })), RT.keyword(null, "doc"), null });
    const__91 = (AFn)Symbol.intern(null, "IVecMod");
    const__92 = RT.classForName("clojure.core.match.protocols.IVectorPattern");
    const__93 = (Var)RT.var("clojure.core.match.protocols", "IVectorPattern");
    const__94 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "split")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "n")) })) })) }));
    const__96 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "clojure.core.match.protocols.IVectorPattern"), RT.keyword(null, "on-interface"), RT.classForName("clojure.core.match.protocols.IVectorPattern") });
    const__97 = (AFn)RT.map(new Object[] { RT.keyword(null, "split"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "split")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "n")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "n")) })), RT.keyword(null, "doc"), null }) });
    const__99 = (AFn)RT.map(new Object[] { RT.keyword(null, "split"), RT.keyword(null, "split") });
  }
  
  public static void __init1() {
    const__100 = (AFn)((IObj)Symbol.intern(null, "split")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "n")) })) }));
    const__101 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "split")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "n")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "n")) })), RT.keyword(null, "doc"), null });
    const__102 = (AFn)Symbol.intern(null, "IVectorPattern");
    const__103 = RT.classForName("clojure.core.match.protocols.ISyntaxTag");
    const__104 = (Var)RT.var("clojure.core.match.protocols", "ISyntaxTag");
    const__105 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "syntax-tag")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })) }));
    const__107 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "clojure.core.match.protocols.ISyntaxTag"), RT.keyword(null, "on-interface"), RT.classForName("clojure.core.match.protocols.ISyntaxTag") });
    const__108 = (AFn)RT.map(new Object[] { RT.keyword(null, "syntax-tag"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "syntax-tag")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })), RT.keyword(null, "doc"), null }) });
    const__110 = (AFn)RT.map(new Object[] { RT.keyword(null, "syntax-tag"), RT.keyword(null, "syntax-tag") });
    const__111 = (AFn)((IObj)Symbol.intern(null, "syntax-tag")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) }));
    const__112 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "syntax-tag")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })), RT.keyword(null, "doc"), null });
    const__113 = (AFn)Symbol.intern(null, "ISyntaxTag");
  }
  
  static  {
    __init0();
    __init1();
    Compiler.pushNSandLoader(RT.classForName("clojure.core.match.protocols__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
