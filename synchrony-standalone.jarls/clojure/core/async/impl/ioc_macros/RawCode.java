package clojure.core.async.impl.ioc_macros;

import clojure.lang.AFn;
import clojure.lang.APersistentMap;
import clojure.lang.Associative;
import clojure.lang.Counted;
import clojure.lang.IFn;
import clojure.lang.IHashEq;
import clojure.lang.IKeywordLookup;
import clojure.lang.ILookup;
import clojure.lang.ILookupThunk;
import clojure.lang.IMapEntry;
import clojure.lang.IObj;
import clojure.lang.IPersistentCollection;
import clojure.lang.IPersistentMap;
import clojure.lang.IPersistentVector;
import clojure.lang.IRecord;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.KeywordLookupSite;
import clojure.lang.MapEntry;
import clojure.lang.Numbers;
import clojure.lang.PersistentHashSet;
import clojure.lang.PersistentVector;
import clojure.lang.RT;
import clojure.lang.RecordIterator;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Util;
import clojure.lang.Var;
import java.io.Serializable;
import java.util.Collection;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

public final class RawCode implements IEmittableInstruction, IInstruction, IRecord, IHashEq, IObj, ILookup, IKeywordLookup, IPersistentMap, Map, Serializable {
  public final Object ast;
  
  public final Object locals;
  
  public final Object __meta;
  
  public final Object __extmap;
  
  int __hash;
  
  int __hasheq;
  
  private static Class __cached_class__0;
  
  public static final Var const__0 = (Var)RT.var("clojure.core", "set");
  
  public static final Var const__1 = (Var)RT.var("clojure.core", "vals");
  
  public static final Var const__2 = (Var)RT.var("clojure.core", "keys");
  
  public static final Var const__4 = (Var)RT.var("clojure.core", "some");
  
  public static final Var const__7 = (Var)RT.var("clojure.core", "contains?");
  
  public static final Keyword const__8 = (Keyword)RT.keyword(null, "locals");
  
  public static final Keyword const__9 = (Keyword)RT.keyword(null, "ast");
  
  public static final AFn const__10 = (AFn)PersistentHashSet.create(new Object[] { RT.keyword(null, "locals"), RT.keyword(null, "ast") });
  
  public static final Var const__11 = (Var)RT.var("clojure.core", "dissoc");
  
  public static final Var const__12 = (Var)RT.var("clojure.core", "with-meta");
  
  public static final Var const__13 = (Var)RT.var("clojure.core", "into");
  
  public static final Var const__14 = (Var)RT.var("clojure.core", "not-empty");
  
  public static final Var const__15 = (Var)RT.var("clojure.core", "identical?");
  
  public static final Var const__16 = (Var)RT.var("clojure.core", "assoc");
  
  public static final AFn const__17 = (AFn)Tuple.create(RT.keyword(null, "ast"), RT.keyword(null, "locals"));
  
  public static final Var const__18 = (Var)RT.var("clojure.core", "seq");
  
  public static final Var const__19 = (Var)RT.var("clojure.core", "concat");
  
  public static final Var const__20 = (Var)RT.var("clojure.core", "not");
  
  public static final Var const__21 = (Var)RT.var("clojure.core", "class");
  
  public static final Var const__22 = (Var)RT.var("clojure.core", "imap-cons");
  
  public static final Var const__23 = (Var)RT.var("clojure.core", "str");
  
  public static final Var const__32 = (Var)RT.var("clojure.core", "keep");
  
  public static final Var const__33 = (Var)RT.var("clojure.core", "map");
  
  public static final Keyword const__34 = (Keyword)RT.keyword(null, "name");
  
  public static final Var const__37 = (Var)RT.var("clojure.core.async.impl.ioc-macros", "reads-from");
  
  public static final Var const__38 = (Var)RT.var("clojure.core", "apply");
  
  public static final Var const__39 = (Var)RT.var("clojure.core", "vector");
  
  public static final Var const__40 = (Var)RT.var("clojure.core", "mapcat");
  
  public static final Var const__41 = (Var)RT.var("clojure.core", "filter");
  
  public static final Var const__42 = (Var)RT.var("clojure.core", "list");
  
  static final KeywordLookupSite __site__0__;
  
  static ILookupThunk __thunk__0__ = __site__0__ = new KeywordLookupSite(RT.keyword(null, "env"));
  
  static final KeywordLookupSite __site__1__;
  
  static ILookupThunk __thunk__1__ = __site__1__ = new KeywordLookupSite(RT.keyword(null, "locals"));
  
  static final KeywordLookupSite __site__2__;
  
  static ILookupThunk __thunk__2__ = __site__2__ = new KeywordLookupSite(RT.keyword(null, "id"));
  
  static final KeywordLookupSite __site__3__;
  
  static ILookupThunk __thunk__3__ = __site__3__ = new KeywordLookupSite(RT.keyword(null, "env"));
  
  static final KeywordLookupSite __site__4__;
  
  static ILookupThunk __thunk__4__ = __site__4__ = new KeywordLookupSite(RT.keyword(null, "locals"));
  
  static final KeywordLookupSite __site__5__;
  
  static ILookupThunk __thunk__5__ = __site__5__ = new KeywordLookupSite(RT.keyword(null, "id"));
  
  static final KeywordLookupSite __site__6__;
  
  static ILookupThunk __thunk__6__ = __site__6__ = new KeywordLookupSite(RT.keyword(null, "form"));
  
  static final KeywordLookupSite __site__7__;
  
  static ILookupThunk __thunk__7__ = __site__7__ = new KeywordLookupSite(RT.keyword(null, "id"));
  
  static final KeywordLookupSite __site__8__;
  
  static ILookupThunk __thunk__8__ = __site__8__ = new KeywordLookupSite(RT.keyword(null, "form"));
  
  public RawCode(Object paramObject1, Object paramObject2, Object paramObject3, Object paramObject4, int paramInt1, int paramInt2) { this.ast = paramObject1;
    this.locals = paramObject2;
    this.__meta = paramObject3;
    this.__extmap = paramObject4;
    this.__hash = paramInt1;
    this.__hasheq = paramInt2; }
  
  public RawCode(Object paramObject1, Object paramObject2) { this(paramObject1, paramObject2, null, null, 0, 0); }
  
  public RawCode(Object paramObject1, Object paramObject2, Object paramObject3, Object paramObject4) { this(paramObject1, paramObject2, paramObject3, paramObject4, 0, 0); }
  
  public static IPersistentVector getBasis() { return Tuple.create(Symbol.intern(null, "ast"), Symbol.intern(null, "locals")); }
  
  public static RawCode create(IPersistentMap paramIPersistentMap) {
    Object object1 = paramIPersistentMap.valAt(Keyword.intern("ast"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("ast"));
    Object object2 = paramIPersistentMap.valAt(Keyword.intern("locals"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("locals"));
    return new RawCode(object1, object2, null, RT.seqOrElse(paramIPersistentMap), 0, 0);
  }
  
  public Object emit_instruction(Object state_sym) { if (Util.classOf(this) != __cached_class__0)
      if (!(this instanceof IInstruction)) {
        __cached_class__0 = Util.classOf(this);
      } else if (((IFn)const__14.getRawRoot()).invoke(((IInstruction)this).reads_from()) != null) {
        if (((IFn)const__14.getRawRoot()).invoke(((IInstruction)this).reads_from()) != Boolean.FALSE) {
          if (__thunk__3__ != __thunk__3__.get(this.ast)) {
            this.ast;
          } else {
            __thunk__3__.get(this.ast);
          } 
          if (__thunk__4__ != __thunk__4__.get((__thunk__3__ = __site__3__.fault(this.ast)).get(this.ast))) {
            (__thunk__3__ = __site__3__.fault(this.ast)).get(this.ast);
          } else {
            __thunk__4__.get((__thunk__3__ = __site__3__.fault(this.ast)).get(this.ast));
          } 
          if (__thunk__5__ != __thunk__5__.get(this)) {
            this;
          } else {
            __thunk__5__.get(this);
          } 
          if (__thunk__6__ != __thunk__6__.get(this.ast)) {
            this.ast;
          } else {
            __thunk__6__.get(this.ast);
          } 
          this = null;
        } 
      } else {
        ((IFn)const__14.getRawRoot()).invoke(((IInstruction)this).reads_from());
      }   }
  
  public Object block_references() { return PersistentVector.EMPTY; }
  
  public Object writes_to() { if (__thunk__2__ != __thunk__2__.get(this)) {
      this;
    } else {
      __thunk__2__.get(this);
    } 
    return Tuple.create((__thunk__2__ = __site__2__.fault(this)).get(this)); }
  
  public Object reads_from() { // Byte code:
    //   0: getstatic clojure/core/async/impl/ioc_macros/RawCode.const__32 : Lclojure/lang/Var;
    //   3: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   6: checkcast clojure/lang/IFn
    //   9: aload_0
    //   10: getfield locals : Ljava/lang/Object;
    //   13: astore_1
    //   14: aload_1
    //   15: dup
    //   16: ifnull -> 31
    //   19: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   22: if_acmpeq -> 32
    //   25: aload_1
    //   26: aconst_null
    //   27: astore_1
    //   28: goto -> 35
    //   31: pop
    //   32: getstatic clojure/lang/PersistentHashSet.EMPTY : Lclojure/lang/PersistentHashSet;
    //   35: getstatic clojure/core/async/impl/ioc_macros/RawCode.const__33 : Lclojure/lang/Var;
    //   38: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   41: checkcast clojure/lang/IFn
    //   44: getstatic clojure/core/async/impl/ioc_macros/RawCode.const__34 : Lclojure/lang/Keyword;
    //   47: getstatic clojure/core/async/impl/ioc_macros/RawCode.const__1 : Lclojure/lang/Var;
    //   50: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   53: checkcast clojure/lang/IFn
    //   56: getstatic clojure/core/async/impl/ioc_macros/RawCode.__thunk__1__ : Lclojure/lang/ILookupThunk;
    //   59: dup
    //   60: getstatic clojure/core/async/impl/ioc_macros/RawCode.__thunk__0__ : Lclojure/lang/ILookupThunk;
    //   63: dup
    //   64: aload_0
    //   65: getfield ast : Ljava/lang/Object;
    //   68: dup_x2
    //   69: invokeinterface get : (Ljava/lang/Object;)Ljava/lang/Object;
    //   74: dup_x2
    //   75: if_acmpeq -> 82
    //   78: pop
    //   79: goto -> 104
    //   82: swap
    //   83: pop
    //   84: dup
    //   85: getstatic clojure/core/async/impl/ioc_macros/RawCode.__site__0__ : Lclojure/lang/KeywordLookupSite;
    //   88: swap
    //   89: invokeinterface fault : (Ljava/lang/Object;)Lclojure/lang/ILookupThunk;
    //   94: dup
    //   95: putstatic clojure/core/async/impl/ioc_macros/RawCode.__thunk__0__ : Lclojure/lang/ILookupThunk;
    //   98: swap
    //   99: invokeinterface get : (Ljava/lang/Object;)Ljava/lang/Object;
    //   104: dup_x2
    //   105: invokeinterface get : (Ljava/lang/Object;)Ljava/lang/Object;
    //   110: dup_x2
    //   111: if_acmpeq -> 118
    //   114: pop
    //   115: goto -> 140
    //   118: swap
    //   119: pop
    //   120: dup
    //   121: getstatic clojure/core/async/impl/ioc_macros/RawCode.__site__1__ : Lclojure/lang/KeywordLookupSite;
    //   124: swap
    //   125: invokeinterface fault : (Ljava/lang/Object;)Lclojure/lang/ILookupThunk;
    //   130: dup
    //   131: putstatic clojure/core/async/impl/ioc_macros/RawCode.__thunk__1__ : Lclojure/lang/ILookupThunk;
    //   134: swap
    //   135: invokeinterface get : (Ljava/lang/Object;)Ljava/lang/Object;
    //   140: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   145: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   150: aconst_null
    //   151: astore_0
    //   152: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   157: areturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #227	-> 0
    //   #230	-> 6
    //   #230	-> 14
    //   #231	-> 41
    //   #231	-> 53
    //   #231	-> 56
    //   #231	-> 60
    //   #231	-> 68
    //   #231	-> 104
    //   #231	-> 140
    //   #231	-> 145
    //   #230	-> 150
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   14	21	1	or__5516__auto__4217	Ljava/lang/Object;
    //   0	157	0	this	Lclojure/core/async/impl/ioc_macros/RawCode; }
  
  public int hasheq() {
    int hq__7768__auto__4219 = this.__hasheq, h__7769__auto__4218 = RT.intCast(0xFFFFFFFF8397BEDCL ^ APersistentMap.mapHasheq((IPersistentMap)this));
    this.__hasheq = h__7769__auto__4218;
    return (hq__7768__auto__4219 == 0L) ? h__7769__auto__4218 : hq__7768__auto__4219;
  }
  
  public int hashCode() {
    int hash__7771__auto__4221 = this.__hash, h__7772__auto__4220 = APersistentMap.mapHash((IPersistentMap)this);
    this.__hash = h__7772__auto__4220;
    return (hash__7771__auto__4221 == 0L) ? h__7772__auto__4220 : hash__7771__auto__4221;
  }
  
  public boolean equals(Object G__4200) { G__4200 = null;
    return APersistentMap.mapEquals((IPersistentMap)this, G__4200); }
  
  public IPersistentMap meta() { return (IPersistentMap)this.__meta; }
  
  public IObj withMeta(IPersistentMap G__4200) { G__4200 = null;
    return (IObj)new RawCode(this.ast, this.locals, G__4200, this.__extmap, this.__hash, this.__hasheq); }
  
  public Object valAt(Object k__7777__auto__) { k__7777__auto__ = null;
    return ((ILookup)this).valAt(k__7777__auto__, null); }
  
  public Object valAt(Object k__7779__auto__, Object else__7780__auto__) {
    Object G__4209 = k__7779__auto__;
    switch (Util.hash(G__4209) >> 5 & true) {
      case 0:
        if (G__4209 == const__9);
        break;
      case 1:
        if (G__4209 == const__8);
        break;
    } 
    k__7779__auto__ = null;
    else__7780__auto__ = null;
    this = null;
    return RT.get(this.__extmap, k__7779__auto__, else__7780__auto__);
  }
  
  public ILookupThunk getLookupThunk(Keyword k__7782__auto__) {
    Object gclass = ((IFn)const__21.getRawRoot()).invoke(this), G__4204 = k__7782__auto__ = null;
    switch (Util.hash(G__4204) >> 5 & true) {
      case 0:
        if (G__4204 == const__9)
          gclass = null; 
        break;
      case 1:
        if (G__4204 == const__8)
          gclass = null; 
        break;
    } 
    return (ILookupThunk)null;
  }
  
  public int count() { return RT.intCast(Numbers.add(2L, RT.count(this.__extmap))); }
  
  public IPersistentCollection empty() { throw (Throwable)new UnsupportedOperationException((String)((IFn)const__23.getRawRoot()).invoke("Can't create empty: ", "clojure.core.async.impl.ioc_macros.RawCode")); }
  
  public IPersistentCollection cons(Object e__7786__auto__) { e__7786__auto__ = null;
    this = null;
    return (IPersistentCollection)((IFn)const__22).invoke(this, e__7786__auto__); }
  
  public boolean equiv(Object G__4200) {
    boolean or__5516__auto__4224 = Util.identical(this, G__4200);
    Object G__4200 = G__4200 = null;
    boolean and__5514__auto__4223 = Util.equiv(this.ast, ((RawCode)G__4200).ast), and__5514__auto__4222 = Util.equiv(this.locals, ((RawCode)G__4200).locals);
    G__4200 = null;
    return RT.booleanCast(or__5516__auto__4224 ? (or__5516__auto__4224 ? Boolean.TRUE : Boolean.FALSE) : (Util.identical(((IFn)const__21.getRawRoot()).invoke(this), ((IFn)const__21.getRawRoot()).invoke(G__4200)) ? (and__5514__auto__4223 ? (and__5514__auto__4222 ? (Util.equiv(this.__extmap, ((RawCode)G__4200).__extmap) ? Boolean.TRUE : Boolean.FALSE) : (and__5514__auto__4222 ? Boolean.TRUE : Boolean.FALSE)) : (and__5514__auto__4223 ? Boolean.TRUE : Boolean.FALSE)) : null));
  }
  
  public boolean containsKey(Object k__7789__auto__) { k__7789__auto__ = null;
    this = null;
    return ((Boolean)((IFn)const__20.getRawRoot()).invoke(Util.identical(this, ((ILookup)this).valAt(k__7789__auto__, this)) ? Boolean.TRUE : Boolean.FALSE)).booleanValue(); }
  
  public IMapEntry entryAt(Object k__7791__auto__) {
    Object v__7792__auto__4225 = ((ILookup)this).valAt(k__7791__auto__, this);
    k__7791__auto__ = null;
    v__7792__auto__4225 = null;
    this = null;
    return (IMapEntry)(Util.identical(this, v__7792__auto__4225) ? null : MapEntry.create(k__7791__auto__, v__7792__auto__4225));
  }
  
  public ISeq seq() { this = null;
    return (ISeq)((IFn)const__18.getRawRoot()).invoke(((IFn)const__19.getRawRoot()).invoke(Tuple.create(MapEntry.create(const__9, this.ast), MapEntry.create(const__8, this.locals)), this.__extmap)); }
  
  public Iterator iterator() { return (Iterator)new RecordIterator((ILookup)this, (IPersistentVector)const__17, (Iterator)RT.iter(this.__extmap)); }
  
  public IPersistentMap assoc(Object k__7796__auto__, Object G__4200) {
    Object pred__4202 = const__15.getRawRoot(), expr__4203 = k__7796__auto__;
    if (((IFn)pred__4202).invoke(const__9, expr__4203) != null) {
      if (((IFn)pred__4202).invoke(const__9, expr__4203) != Boolean.FALSE)
        G__4200 = null; 
    } else {
      ((IFn)pred__4202).invoke(const__9, expr__4203);
    } 
    pred__4202 = null;
    expr__4203 = null;
    if (((IFn)pred__4202).invoke(const__8, expr__4203) != null) {
      if (((IFn)pred__4202).invoke(const__8, expr__4203) != Boolean.FALSE)
        G__4200 = null; 
    } else {
      ((IFn)pred__4202).invoke(const__8, expr__4203);
    } 
    k__7796__auto__ = null;
    G__4200 = null;
    return (IPersistentMap)new RawCode(this.ast, this.locals, this.__meta, ((IFn)const__16.getRawRoot()).invoke(this.__extmap, k__7796__auto__, G__4200));
  }
  
  public IPersistentMap without(Object k__7798__auto__) { if (((IFn)const__7.getRawRoot()).invoke(const__10, k__7798__auto__) != null) {
      if (((IFn)const__7.getRawRoot()).invoke(const__10, k__7798__auto__) != Boolean.FALSE) {
        k__7798__auto__ = null;
        this = null;
      } 
    } else {
      ((IFn)const__7.getRawRoot()).invoke(const__10, k__7798__auto__);
    } 
    k__7798__auto__ = null;
    return (IPersistentMap)new RawCode(this.ast, this.locals, this.__meta, ((IFn)const__14.getRawRoot()).invoke(((IFn)const__11.getRawRoot()).invoke(this.__extmap, k__7798__auto__))); }
  
  public int size() { this = null;
    return ((Counted)this).count(); }
  
  public boolean isEmpty() { return Util.equiv(0L, ((Counted)this).count()); }
  
  public boolean containsValue(Object v__7802__auto__) { v__7802__auto__ = null;
    return RT.booleanCast(((IFn)const__4.getRawRoot()).invoke(RT.set(new Object[] { v__7802__auto__ }, ), ((IFn)const__1.getRawRoot()).invoke(this))); }
  
  public Object get(Object k__7804__auto__) { k__7804__auto__ = null;
    return ((ILookup)this).valAt(k__7804__auto__); }
  
  public Object put(Object k__7806__auto__, Object v__7807__auto__) { throw (Throwable)new UnsupportedOperationException(); }
  
  public Object remove(Object k__7809__auto__) { throw (Throwable)new UnsupportedOperationException(); }
  
  public void putAll(Map m__7811__auto__) { throw (Throwable)new UnsupportedOperationException(); }
  
  public void clear() { throw (Throwable)new UnsupportedOperationException(); }
  
  public Set keySet() { this = null;
    return (Set)((IFn)const__0.getRawRoot()).invoke(((IFn)const__2.getRawRoot()).invoke(this)); }
  
  public Collection values() { this = null;
    return (Collection)((IFn)const__1.getRawRoot()).invoke(this); }
  
  public Set entrySet() { this = null;
    return (Set)((IFn)const__0.getRawRoot()).invoke(this); }
}
