package clojure.core.async.impl;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class protocols__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__3;
  
  public static final AFn const__4;
  
  public static final Var const__5;
  
  public static final AFn const__14;
  
  public static final Object const__15;
  
  public static final Object const__16;
  
  public static final Var const__17;
  
  public static final Var const__18;
  
  public static final Var const__19;
  
  public static final Keyword const__20;
  
  public static final Var const__21;
  
  public static final ISeq const__22;
  
  public static final Var const__23;
  
  public static final Var const__24;
  
  public static final AFn const__28;
  
  public static final Keyword const__29;
  
  public static final AFn const__30;
  
  public static final Keyword const__31;
  
  public static final Keyword const__32;
  
  public static final AFn const__34;
  
  public static final Keyword const__35;
  
  public static final Var const__36;
  
  public static final Var const__37;
  
  public static final Var const__38;
  
  public static final AFn const__39;
  
  public static final AFn const__40;
  
  public static final Keyword const__41;
  
  public static final Var const__42;
  
  public static final AFn const__43;
  
  public static final Object const__44;
  
  public static final Var const__45;
  
  public static final ISeq const__46;
  
  public static final AFn const__48;
  
  public static final AFn const__49;
  
  public static final AFn const__51;
  
  public static final AFn const__52;
  
  public static final AFn const__53;
  
  public static final AFn const__54;
  
  public static final Object const__55;
  
  public static final Var const__56;
  
  public static final ISeq const__57;
  
  public static final AFn const__59;
  
  public static final AFn const__60;
  
  public static final AFn const__63;
  
  public static final AFn const__64;
  
  public static final AFn const__65;
  
  public static final AFn const__66;
  
  public static final AFn const__67;
  
  public static final AFn const__68;
  
  public static final Object const__69;
  
  public static final Var const__70;
  
  public static final ISeq const__71;
  
  public static final AFn const__73;
  
  public static final AFn const__74;
  
  public static final AFn const__79;
  
  public static final AFn const__80;
  
  public static final AFn const__81;
  
  public static final AFn const__82;
  
  public static final AFn const__83;
  
  public static final AFn const__84;
  
  public static final AFn const__85;
  
  public static final AFn const__86;
  
  public static final AFn const__87;
  
  public static final AFn const__88;
  
  public static final Object const__89;
  
  public static final Var const__90;
  
  public static final ISeq const__91;
  
  public static final AFn const__93;
  
  public static final AFn const__94;
  
  public static final AFn const__99;
  
  public static final AFn const__100;
  
  public static final AFn const__101;
  
  public static final AFn const__102;
  
  public static final AFn const__103;
  
  public static final AFn const__104;
  
  public static final AFn const__105;
  
  public static final AFn const__106;
  
  public static final AFn const__107;
  
  public static final AFn const__108;
  
  public static final Var const__109;
  
  public static final AFn const__113;
  
  public static final Object const__114;
  
  public static final Var const__115;
  
  public static final ISeq const__116;
  
  public static final AFn const__118;
  
  public static final AFn const__119;
  
  public static final AFn const__121;
  
  public static final AFn const__122;
  
  public static final AFn const__123;
  
  public static final AFn const__124;
  
  public static final Object const__125;
  
  public static final Var const__126;
  
  public static final AFn const__128;
  
  public static final AFn const__129;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new protocols.fn__177());
    const__5.setMeta((IPersistentMap)const__14);
    const__5.bindRoot(const__15);
    const__109.setMeta((IPersistentMap)const__113);
    const__109.bindRoot(new protocols.add_BANG_());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "clojure.core.async.impl.protocols")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "skip-wiki"), Boolean.TRUE }));
    const__3 = (AFn)RT.map(new Object[] { RT.keyword(null, "skip-wiki"), Boolean.TRUE });
    const__4 = (AFn)Symbol.intern(null, "clojure.core");
    const__5 = (Var)RT.var("clojure.core.async.impl.protocols", "MAX-QUEUE-SIZE");
    const__14 = (AFn)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "int"), RT.keyword(null, "const"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(13), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/protocols.clj" });
    const__15 = Long.valueOf(1024L);
    const__16 = RT.classForName("clojure.core.async.impl.protocols.ReadPort");
    const__17 = (Var)RT.var("clojure.core", "alter-meta!");
    const__18 = (Var)RT.var("clojure.core.async.impl.protocols", "ReadPort");
    const__19 = (Var)RT.var("clojure.core", "assoc");
    const__20 = (Keyword)RT.keyword(null, "doc");
    const__21 = (Var)RT.var("clojure.core", "assert-same-protocol");
    const__22 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "take!")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "derefable val if taken, nil if take was enqueued", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "port"), Symbol.intern(null, "fn1-handler")) })) })) }));
    const__23 = (Var)RT.var("clojure.core", "alter-var-root");
    const__24 = (Var)RT.var("clojure.core", "merge");
    const__28 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "clojure.core.async.impl.protocols.ReadPort"), RT.keyword(null, "on-interface"), RT.classForName("clojure.core.async.impl.protocols.ReadPort") });
    const__29 = (Keyword)RT.keyword(null, "sigs");
    const__30 = (AFn)RT.map(new Object[] { RT.keyword(null, "take!"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "take!")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "derefable val if taken, nil if take was enqueued", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "port"), Symbol.intern(null, "fn1-handler")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "port"), Symbol.intern(null, "fn1-handler")) })), RT.keyword(null, "doc"), "derefable val if taken, nil if take was enqueued" }) });
    const__31 = (Keyword)RT.keyword(null, "var");
    const__32 = (Keyword)RT.keyword(null, "method-map");
    const__34 = (AFn)RT.map(new Object[] { RT.keyword(null, "take!"), RT.keyword(null, "take!") });
    const__35 = (Keyword)RT.keyword(null, "method-builders");
    const__36 = (Var)RT.var("clojure.core", "intern");
    const__37 = (Var)RT.var("clojure.core", "*ns*");
    const__38 = (Var)RT.var("clojure.core", "with-meta");
    const__39 = (AFn)((IObj)Symbol.intern(null, "take!")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "derefable val if taken, nil if take was enqueued", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "port"), Symbol.intern(null, "fn1-handler")) })) }));
    const__40 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "take!")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "derefable val if taken, nil if take was enqueued", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "port"), Symbol.intern(null, "fn1-handler")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "port"), Symbol.intern(null, "fn1-handler")) })), RT.keyword(null, "doc"), "derefable val if taken, nil if take was enqueued" });
    const__41 = (Keyword)RT.keyword(null, "protocol");
    const__42 = (Var)RT.var("clojure.core", "-reset-methods");
    const__43 = (AFn)Symbol.intern(null, "ReadPort");
    const__44 = RT.classForName("clojure.core.async.impl.protocols.WritePort");
    const__45 = (Var)RT.var("clojure.core.async.impl.protocols", "WritePort");
    const__46 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "put!")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "derefable boolean (false iff already closed) if handled, nil if put was enqueued. Must throw on nil val.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "port"), Symbol.intern(null, "val"), Symbol.intern(null, "fn1-handler")) })) })) }));
    const__48 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "clojure.core.async.impl.protocols.WritePort"), RT.keyword(null, "on-interface"), RT.classForName("clojure.core.async.impl.protocols.WritePort") });
    const__49 = (AFn)RT.map(new Object[] { RT.keyword(null, "put!"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "put!")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "derefable boolean (false iff already closed) if handled, nil if put was enqueued. Must throw on nil val.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "port"), Symbol.intern(null, "val"), Symbol.intern(null, "fn1-handler")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "port"), Symbol.intern(null, "val"), Symbol.intern(null, "fn1-handler")) })), RT.keyword(null, "doc"), "derefable boolean (false iff already closed) if handled, nil if put was enqueued. Must throw on nil val." }) });
    const__51 = (AFn)RT.map(new Object[] { RT.keyword(null, "put!"), RT.keyword(null, "put!") });
    const__52 = (AFn)((IObj)Symbol.intern(null, "put!")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "derefable boolean (false iff already closed) if handled, nil if put was enqueued. Must throw on nil val.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "port"), Symbol.intern(null, "val"), Symbol.intern(null, "fn1-handler")) })) }));
    const__53 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "put!")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "derefable boolean (false iff already closed) if handled, nil if put was enqueued. Must throw on nil val.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "port"), Symbol.intern(null, "val"), Symbol.intern(null, "fn1-handler")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "port"), Symbol.intern(null, "val"), Symbol.intern(null, "fn1-handler")) })), RT.keyword(null, "doc"), "derefable boolean (false iff already closed) if handled, nil if put was enqueued. Must throw on nil val." });
    const__54 = (AFn)Symbol.intern(null, "WritePort");
    const__55 = RT.classForName("clojure.core.async.impl.protocols.Channel");
    const__56 = (Var)RT.var("clojure.core.async.impl.protocols", "Channel");
    const__57 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "close!")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "chan")) })) })), ((IObj)Symbol.intern(null, "closed?")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "chan")) })) })) }));
    const__59 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "clojure.core.async.impl.protocols.Channel"), RT.keyword(null, "on-interface"), RT.classForName("clojure.core.async.impl.protocols.Channel") });
    const__60 = (AFn)RT.map(new Object[] { RT.keyword(null, "close!"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "close!")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "chan")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "chan")) })), RT.keyword(null, "doc"), null }), RT.keyword(null, "closed?"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "closed?")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "chan")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "chan")) })), RT.keyword(null, "doc"), null }) });
    const__63 = (AFn)RT.map(new Object[] { RT.keyword(null, "closed?"), RT.keyword(null, "closed?"), RT.keyword(null, "close!"), RT.keyword(null, "close!") });
    const__64 = (AFn)((IObj)Symbol.intern(null, "close!")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "chan")) })) }));
    const__65 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "close!")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "chan")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "chan")) })), RT.keyword(null, "doc"), null });
    const__66 = (AFn)((IObj)Symbol.intern(null, "closed?")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "chan")) })) }));
    const__67 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "closed?")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "chan")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "chan")) })), RT.keyword(null, "doc"), null });
    const__68 = (AFn)Symbol.intern(null, "Channel");
    const__69 = RT.classForName("clojure.core.async.impl.protocols.Handler");
    const__70 = (Var)RT.var("clojure.core.async.impl.protocols", "Handler");
    const__71 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "active?")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "returns true if has callback. Must work w/o lock", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "h")) })) })), ((IObj)Symbol.intern(null, "blockable?")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "returns true if this handler may be blocked, otherwise it must not block", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "h")) })) })), ((IObj)Symbol.intern(null, "lock-id")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "a unique id for lock acquisition order, 0 if no lock", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "h")) })) })), ((IObj)Symbol.intern(null, "commit")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "commit to fulfilling its end of the transfer, returns cb. Must be called within lock", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "h")) })) })) }));
    const__73 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "clojure.core.async.impl.protocols.Handler"), RT.keyword(null, "on-interface"), RT.classForName("clojure.core.async.impl.protocols.Handler") });
    const__74 = (AFn)RT.map(new Object[] { RT.keyword(null, "active?"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "active?")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "returns true if has callback. Must work w/o lock", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "h")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "h")) })), RT.keyword(null, "doc"), "returns true if has callback. Must work w/o lock" }), RT.keyword(null, "blockable?"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "blockable?")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "returns true if this handler may be blocked, otherwise it must not block", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "h")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "h")) })), RT.keyword(null, "doc"), "returns true if this handler may be blocked, otherwise it must not block" }), RT.keyword(null, "lock-id"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "lock-id")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "a unique id for lock acquisition order, 0 if no lock", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "h")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "h")) })), RT.keyword(null, "doc"), "a unique id for lock acquisition order, 0 if no lock" }), RT.keyword(null, "commit"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "commit")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "commit to fulfilling its end of the transfer, returns cb. Must be called within lock", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "h")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "h")) })), RT.keyword(null, "doc"), "commit to fulfilling its end of the transfer, returns cb. Must be called within lock" }) });
    const__79 = (AFn)RT.map(new Object[] { RT.keyword(null, "active?"), RT.keyword(null, "active?"), RT.keyword(null, "blockable?"), RT.keyword(null, "blockable?"), RT.keyword(null, "lock-id"), RT.keyword(null, "lock-id"), RT.keyword(null, "commit"), RT.keyword(null, "commit") });
    const__80 = (AFn)((IObj)Symbol.intern(null, "blockable?")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "returns true if this handler may be blocked, otherwise it must not block", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "h")) })) }));
    const__81 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "blockable?")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "returns true if this handler may be blocked, otherwise it must not block", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "h")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "h")) })), RT.keyword(null, "doc"), "returns true if this handler may be blocked, otherwise it must not block" });
    const__82 = (AFn)((IObj)Symbol.intern(null, "active?")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "returns true if has callback. Must work w/o lock", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "h")) })) }));
    const__83 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "active?")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "returns true if has callback. Must work w/o lock", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "h")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "h")) })), RT.keyword(null, "doc"), "returns true if has callback. Must work w/o lock" });
    const__84 = (AFn)((IObj)Symbol.intern(null, "lock-id")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "a unique id for lock acquisition order, 0 if no lock", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "h")) })) }));
    const__85 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "lock-id")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "a unique id for lock acquisition order, 0 if no lock", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "h")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "h")) })), RT.keyword(null, "doc"), "a unique id for lock acquisition order, 0 if no lock" });
    const__86 = (AFn)((IObj)Symbol.intern(null, "commit")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "commit to fulfilling its end of the transfer, returns cb. Must be called within lock", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "h")) })) }));
    const__87 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "commit")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "commit to fulfilling its end of the transfer, returns cb. Must be called within lock", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "h")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "h")) })), RT.keyword(null, "doc"), "commit to fulfilling its end of the transfer, returns cb. Must be called within lock" });
    const__88 = (AFn)Symbol.intern(null, "Handler");
    const__89 = RT.classForName("clojure.core.async.impl.protocols.Buffer");
    const__90 = (Var)RT.var("clojure.core.async.impl.protocols", "Buffer");
    const__91 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "full?")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "returns true if buffer cannot accept put", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "b")) })) })), ((IObj)Symbol.intern(null, "remove!")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "remove and return next item from buffer, called under chan mutex", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "b")) })) })), ((IObj)Symbol.intern(null, "add!*")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "if room, add item to the buffer, returns b, called under chan mutex", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "b"), Symbol.intern(null, "itm")) })) })), ((IObj)Symbol.intern(null, "close-buf!")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "called on chan closed under chan mutex, return ignored", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "b")) })) })) }));
    const__93 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "clojure.core.async.impl.protocols.Buffer"), RT.keyword(null, "on-interface"), RT.classForName("clojure.core.async.impl.protocols.Buffer") });
    const__94 = (AFn)RT.map(new Object[] { RT.keyword(null, "full?"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "full?")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "returns true if buffer cannot accept put", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "b")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "b")) })), RT.keyword(null, "doc"), "returns true if buffer cannot accept put" }), RT.keyword(null, "remove!"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "remove!")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "remove and return next item from buffer, called under chan mutex", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "b")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "b")) })), RT.keyword(null, "doc"), "remove and return next item from buffer, called under chan mutex" }), RT.keyword(null, "add!*"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "add!*")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "if room, add item to the buffer, returns b, called under chan mutex", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "b"), Symbol.intern(null, "itm")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "b"), Symbol.intern(null, "itm")) })), RT.keyword(null, "doc"), "if room, add item to the buffer, returns b, called under chan mutex" }), RT.keyword(null, "close-buf!"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "close-buf!")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "called on chan closed under chan mutex, return ignored", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "b")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "b")) })), RT.keyword(null, "doc"), "called on chan closed under chan mutex, return ignored" }) });
    const__99 = (AFn)RT.map(new Object[] { RT.keyword(null, "full?"), RT.keyword(null, "full?"), RT.keyword(null, "add!*"), RT.keyword(null, "add!*"), RT.keyword(null, "remove!"), RT.keyword(null, "remove!"), RT.keyword(null, "close-buf!"), RT.keyword(null, "close-buf!") });
  }
  
  public static void __init1() {
    const__100 = (AFn)((IObj)Symbol.intern(null, "add!*")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "if room, add item to the buffer, returns b, called under chan mutex", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "b"), Symbol.intern(null, "itm")) })) }));
    const__101 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "add!*")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "if room, add item to the buffer, returns b, called under chan mutex", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "b"), Symbol.intern(null, "itm")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "b"), Symbol.intern(null, "itm")) })), RT.keyword(null, "doc"), "if room, add item to the buffer, returns b, called under chan mutex" });
    const__102 = (AFn)((IObj)Symbol.intern(null, "full?")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "returns true if buffer cannot accept put", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "b")) })) }));
    const__103 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "full?")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "returns true if buffer cannot accept put", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "b")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "b")) })), RT.keyword(null, "doc"), "returns true if buffer cannot accept put" });
    const__104 = (AFn)((IObj)Symbol.intern(null, "close-buf!")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "called on chan closed under chan mutex, return ignored", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "b")) })) }));
    const__105 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "close-buf!")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "called on chan closed under chan mutex, return ignored", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "b")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "b")) })), RT.keyword(null, "doc"), "called on chan closed under chan mutex, return ignored" });
    const__106 = (AFn)((IObj)Symbol.intern(null, "remove!")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "remove and return next item from buffer, called under chan mutex", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "b")) })) }));
    const__107 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "remove!")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "remove and return next item from buffer, called under chan mutex", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "b")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "b")) })), RT.keyword(null, "doc"), "remove and return next item from buffer, called under chan mutex" });
    const__108 = (AFn)Symbol.intern(null, "Buffer");
    const__109 = (Var)RT.var("clojure.core.async.impl.protocols", "add!");
    const__113 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "b")), Tuple.create(Symbol.intern(null, "b"), Symbol.intern(null, "itm")) })), RT.keyword(null, "line"), Integer.valueOf(37), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/protocols.clj" });
    const__114 = RT.classForName("clojure.core.async.impl.protocols.Executor");
    const__115 = (Var)RT.var("clojure.core.async.impl.protocols", "Executor");
    const__116 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "exec")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "execute runnable asynchronously", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "e"), Symbol.intern(null, "runnable")) })) })) }));
    const__118 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "clojure.core.async.impl.protocols.Executor"), RT.keyword(null, "on-interface"), RT.classForName("clojure.core.async.impl.protocols.Executor") });
    const__119 = (AFn)RT.map(new Object[] { RT.keyword(null, "exec"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "exec")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "execute runnable asynchronously", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "e"), Symbol.intern(null, "runnable")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "e"), Symbol.intern(null, "runnable")) })), RT.keyword(null, "doc"), "execute runnable asynchronously" }) });
    const__121 = (AFn)RT.map(new Object[] { RT.keyword(null, "exec"), RT.keyword(null, "exec") });
    const__122 = (AFn)((IObj)Symbol.intern(null, "exec")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "execute runnable asynchronously", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "e"), Symbol.intern(null, "runnable")) })) }));
    const__123 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "exec")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "execute runnable asynchronously", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "e"), Symbol.intern(null, "runnable")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "e"), Symbol.intern(null, "runnable")) })), RT.keyword(null, "doc"), "execute runnable asynchronously" });
    const__124 = (AFn)Symbol.intern(null, "Executor");
    const__125 = RT.classForName("clojure.core.async.impl.protocols.UnblockingBuffer");
    const__126 = (Var)RT.var("clojure.core.async.impl.protocols", "UnblockingBuffer");
    const__128 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "clojure.core.async.impl.protocols.UnblockingBuffer"), RT.keyword(null, "on-interface"), RT.classForName("clojure.core.async.impl.protocols.UnblockingBuffer") });
    const__129 = (AFn)Symbol.intern(null, "UnblockingBuffer");
  }
  
  static  {
    __init0();
    __init1();
    Compiler.pushNSandLoader(RT.classForName("clojure.core.async.impl.protocols__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
