package clojure.core.async.impl;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class channels__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__3;
  
  public static final AFn const__4;
  
  public static final Var const__5;
  
  public static final Var const__6;
  
  public static final AFn const__14;
  
  public static final Var const__15;
  
  public static final AFn const__18;
  
  public static final Object const__19;
  
  public static final Var const__20;
  
  public static final Var const__21;
  
  public static final Var const__22;
  
  public static final Keyword const__23;
  
  public static final Var const__24;
  
  public static final ISeq const__25;
  
  public static final Var const__26;
  
  public static final Var const__27;
  
  public static final AFn const__31;
  
  public static final Keyword const__32;
  
  public static final AFn const__33;
  
  public static final Keyword const__34;
  
  public static final Keyword const__35;
  
  public static final AFn const__38;
  
  public static final Keyword const__39;
  
  public static final Var const__40;
  
  public static final Var const__41;
  
  public static final Var const__42;
  
  public static final AFn const__43;
  
  public static final AFn const__44;
  
  public static final Keyword const__45;
  
  public static final AFn const__46;
  
  public static final AFn const__47;
  
  public static final Var const__48;
  
  public static final AFn const__49;
  
  public static final Var const__50;
  
  public static final AFn const__54;
  
  public static final Var const__55;
  
  public static final AFn const__58;
  
  public static final Var const__59;
  
  public static final AFn const__62;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new channels.fn__421());
    const__6.setMeta((IPersistentMap)const__14);
    const__6.bindRoot(new channels.assert_unlock());
    ((Var)const__6)








      
      .setMacro();
    const__15.setMeta((IPersistentMap)const__18);
    const__15.bindRoot(new channels.box());
    const__50.setMeta((IPersistentMap)const__54);
    const__50.bindRoot(new channels.ex_handler());
    const__55.setMeta((IPersistentMap)const__58);
    const__55.bindRoot(new channels.handle());
    const__59.setMeta((IPersistentMap)const__62);
    const__59.bindRoot(new channels.chan());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "clojure.core.async.impl.channels")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "skip-wiki"), Boolean.TRUE }));
    const__3 = (AFn)RT.map(new Object[] { RT.keyword(null, "skip-wiki"), Boolean.TRUE });
    const__4 = (AFn)Symbol.intern(null, "clojure.core");
    const__5 = (Var)RT.var("clojure.core", "*warn-on-reflection*");
    const__6 = (Var)RT.var("clojure.core.async.impl.channels", "assert-unlock");
    const__14 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "lock"), Symbol.intern(null, "test"), Symbol.intern(null, "msg")) })), RT.keyword(null, "line"), Integer.valueOf(19), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/channels.clj" });
    const__15 = (Var)RT.var("clojure.core.async.impl.channels", "box");
    const__18 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "val")) })), RT.keyword(null, "line"), Integer.valueOf(24), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/channels.clj" });
    const__19 = RT.classForName("clojure.core.async.impl.channels.MMC");
    const__20 = (Var)RT.var("clojure.core", "alter-meta!");
    const__21 = (Var)RT.var("clojure.core.async.impl.channels", "MMC");
    const__22 = (Var)RT.var("clojure.core", "assoc");
    const__23 = (Keyword)RT.keyword(null, "doc");
    const__24 = (Var)RT.var("clojure.core", "assert-same-protocol");
    const__25 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "cleanup")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })) })), ((IObj)Symbol.intern(null, "abort")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })) })) }));
    const__26 = (Var)RT.var("clojure.core", "alter-var-root");
    const__27 = (Var)RT.var("clojure.core", "merge");
    const__31 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "clojure.core.async.impl.channels.MMC"), RT.keyword(null, "on-interface"), RT.classForName("clojure.core.async.impl.channels.MMC") });
    const__32 = (Keyword)RT.keyword(null, "sigs");
    const__33 = (AFn)RT.map(new Object[] { RT.keyword(null, "cleanup"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "cleanup")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })), RT.keyword(null, "doc"), null }), RT.keyword(null, "abort"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "abort")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })), RT.keyword(null, "doc"), null }) });
    const__34 = (Keyword)RT.keyword(null, "var");
    const__35 = (Keyword)RT.keyword(null, "method-map");
    const__38 = (AFn)RT.map(new Object[] { RT.keyword(null, "abort"), RT.keyword(null, "abort"), RT.keyword(null, "cleanup"), RT.keyword(null, "cleanup") });
    const__39 = (Keyword)RT.keyword(null, "method-builders");
    const__40 = (Var)RT.var("clojure.core", "intern");
    const__41 = (Var)RT.var("clojure.core", "*ns*");
    const__42 = (Var)RT.var("clojure.core", "with-meta");
    const__43 = (AFn)((IObj)Symbol.intern(null, "cleanup")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })) }));
    const__44 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "cleanup")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })), RT.keyword(null, "doc"), null });
    const__45 = (Keyword)RT.keyword(null, "protocol");
    const__46 = (AFn)((IObj)Symbol.intern(null, "abort")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })) }));
    const__47 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "abort")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })), RT.keyword(null, "doc"), null });
    const__48 = (Var)RT.var("clojure.core", "-reset-methods");
    const__49 = (AFn)Symbol.intern(null, "MMC");
    const__50 = (Var)RT.var("clojure.core.async.impl.channels", "ex-handler");
    const__54 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ex")) })), RT.keyword(null, "line"), Integer.valueOf(273), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/channels.clj" });
    const__55 = (Var)RT.var("clojure.core.async.impl.channels", "handle");
    const__58 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "buf"), Symbol.intern(null, "exh"), Symbol.intern(null, "t")) })), RT.keyword(null, "line"), Integer.valueOf(279), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/channels.clj" });
    const__59 = (Var)RT.var("clojure.core.async.impl.channels", "chan");
    const__62 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "buf")), Tuple.create(Symbol.intern(null, "buf"), Symbol.intern(null, "xform")), Tuple.create(Symbol.intern(null, "buf"), Symbol.intern(null, "xform"), Symbol.intern(null, "exh")) })), RT.keyword(null, "line"), Integer.valueOf(285), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/core/async/impl/channels.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("clojure.core.async.impl.channels__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
