package clojure.core;

import clojure.core;
import clojure.lang.IFn;
import clojure.lang.IPersistentVector;
import clojure.lang.IReduceInit;
import clojure.lang.IType;
import clojure.lang.RT;
import clojure.lang.Sequential;
import clojure.lang.Symbol;
import clojure.lang.TransformerIterator;
import clojure.lang.Tuple;
import java.util.Iterator;

public final class Eduction implements Iterable, IReduceInit, Sequential, IType {
  public final Object xform;
  
  public final Object coll;
  
  public Eduction(Object paramObject1, Object paramObject2) { this.xform = paramObject1;
    this.coll = paramObject2; }
  
  public static IPersistentVector getBasis() { return Tuple.create(Symbol.intern(null, "xform"), Symbol.intern(null, "coll")); }
  
  public Object reduce(IFn f, Object init) { f = null;
    init = null;
    this = null;
    return core.transduce.invokeStatic(this.xform, core.completing.invokeStatic(f), init, this.coll); }
  
  public Iterator iterator() {
    this = null;
    return (Iterator)TransformerIterator.create((IFn)this.xform, (Iterator)RT.iter(this.coll));
  }
  
  static  {
  
  }
}
