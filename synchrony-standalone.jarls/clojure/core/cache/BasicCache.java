package clojure.core.cache;

import clojure.lang.Associative;
import clojure.lang.Counted;
import clojure.lang.IFn;
import clojure.lang.ILookup;
import clojure.lang.IMapEntry;
import clojure.lang.IPersistentCollection;
import clojure.lang.IPersistentMap;
import clojure.lang.IPersistentVector;
import clojure.lang.ISeq;
import clojure.lang.IType;
import clojure.lang.RT;
import clojure.lang.Seqable;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Util;
import clojure.lang.Var;
import java.util.Iterator;

public final class BasicCache implements Associative, CacheProtocol, ILookup, IPersistentCollection, Counted, IPersistentMap, Seqable, Iterable, IType {
  public final Object cache;
  
  private static Class __cached_class__0;
  
  private static Class __cached_class__1;
  
  private static Class __cached_class__2;
  
  private static Class __cached_class__3;
  
  private static Class __cached_class__4;
  
  private static Class __cached_class__5;
  
  private static Class __cached_class__6;
  
  private static Class __cached_class__7;
  
  private static Class __cached_class__8;
  
  private static Class __cached_class__9;
  
  public static final Var const__0 = (Var)RT.var("clojure.core.cache", "has?"), const__1 = (Var)RT.var("clojure.core.cache", "lookup"), const__2 = (Var)RT.var("clojure.core", "str"), const__3 = (Var)RT.var("clojure.core.cache", "seed"), const__4 = (Var)RT.var("clojure.core", "conj"), const__5 = (Var)RT.var("clojure.core", "empty"), const__8 = (Var)RT.var("clojure.core", "contains?"), const__9 = (Var)RT.var("clojure.core", "assoc"), const__10 = (Var)RT.var("clojure.core", "dissoc"), const__12 = (Var)RT.var("clojure.core.cache", "miss"), const__13 = (Var)RT.var("clojure.core.cache", "evict"), const__14 = (Var)RT.var("clojure.core", "seq");
  
  public BasicCache(Object paramObject) { this.cache = paramObject; }
  
  public static IPersistentVector getBasis() { return Tuple.create(Symbol.intern(null, "cache")); }
  
  public Iterator iterator() { return (Iterator)((Iterable)this.cache).iterator(); }
  
  public ISeq seq() { this = null;
    return (ISeq)((IFn)const__14.getRawRoot()).invoke(this.cache); }
  
  public IPersistentMap without(Object k__1491__auto__) { if (Util.classOf(this) != __cached_class__9)
      if (!(this instanceof CacheProtocol)) {
        __cached_class__9 = Util.classOf(this);
      } else {
        k__1491__auto__ = null;
        return (IPersistentMap)((CacheProtocol)this).evict(k__1491__auto__);
      }  
    k__1491__auto__ = null;
    this = null; }
  
  public IPersistentMap assoc(Object k__1491__auto__, Object v__1492__auto__) { if (Util.classOf(this) != __cached_class__8)
      if (!(this instanceof CacheProtocol)) {
        __cached_class__8 = Util.classOf(this);
      } else {
        k__1491__auto__ = null;
        v__1492__auto__ = null;
        return (IPersistentMap)((CacheProtocol)this).miss(k__1491__auto__, v__1492__auto__);
      }  
    k__1491__auto__ = null;
    v__1492__auto__ = null;
    this = null; }
  
  public int count() { return RT.count(this.cache); }
  
  public Object seed(Object base) { base = null;
    return new BasicCache(base); }
  
  public Object evict(Object key) { key = null;
    return new BasicCache(((IFn)const__10.getRawRoot()).invoke(this.cache, key)); }
  
  public Object miss(Object item, Object result) { item = null;
    result = null;
    return new BasicCache(((IFn)const__9.getRawRoot()).invoke(this.cache, item, result)); }
  
  public Object hit(Object item) { return this; }
  
  public Object has_QMARK_(Object item) { item = null;
    this = null;
    return ((IFn)const__8.getRawRoot()).invoke(this.cache, item); }
  
  public Object lookup(Object item, Object not_found) { item = null;
    not_found = null;
    this = null;
    return RT.get(this.cache, item, not_found); }
  
  public Object lookup(Object item) { item = null;
    this = null;
    return RT.get(this.cache, item); }
  
  public boolean equiv(Object other__1494__auto__) { other__1494__auto__ = null;
    return Util.equiv(other__1494__auto__, this.cache); }
  
  public IPersistentCollection empty() { if (Util.classOf(this) != __cached_class__7)
      if (!(this instanceof CacheProtocol)) {
        __cached_class__7 = Util.classOf(this);
      } else {
        return (IPersistentCollection)((CacheProtocol)this).seed(((IFn)const__5.getRawRoot()).invoke(this.cache));
      }  
    this = null; }
  
  public IPersistentCollection cons(Object elem__1493__auto__) { if (Util.classOf(this) != __cached_class__6)
      if (!(this instanceof CacheProtocol)) {
        __cached_class__6 = Util.classOf(this);
      } else {
        elem__1493__auto__ = null;
        return (IPersistentCollection)((CacheProtocol)this).seed(((IFn)const__4.getRawRoot()).invoke(this.cache, elem__1493__auto__));
      }  
    elem__1493__auto__ = null;
    this = null; }
  
  public Object valAt(Object key__1488__auto__, Object not_found__1489__auto__) { // Byte code:
    //   0: aload_0
    //   1: dup
    //   2: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   5: getstatic clojure/core/cache/BasicCache.__cached_class__4 : Ljava/lang/Class;
    //   8: if_acmpeq -> 25
    //   11: dup
    //   12: instanceof clojure/core/cache/CacheProtocol
    //   15: ifne -> 41
    //   18: dup
    //   19: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   22: putstatic clojure/core/cache/BasicCache.__cached_class__4 : Ljava/lang/Class;
    //   25: getstatic clojure/core/cache/BasicCache.const__0 : Lclojure/lang/Var;
    //   28: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   31: swap
    //   32: aload_1
    //   33: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   38: goto -> 50
    //   41: checkcast clojure/core/cache/CacheProtocol
    //   44: aload_1
    //   45: invokeinterface has_QMARK_ : (Ljava/lang/Object;)Ljava/lang/Object;
    //   50: dup
    //   51: ifnull -> 119
    //   54: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   57: if_acmpeq -> 120
    //   60: aload_0
    //   61: dup
    //   62: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   65: getstatic clojure/core/cache/BasicCache.__cached_class__5 : Ljava/lang/Class;
    //   68: if_acmpeq -> 85
    //   71: dup
    //   72: instanceof clojure/core/cache/CacheProtocol
    //   75: ifne -> 105
    //   78: dup
    //   79: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   82: putstatic clojure/core/cache/BasicCache.__cached_class__5 : Ljava/lang/Class;
    //   85: getstatic clojure/core/cache/BasicCache.const__1 : Lclojure/lang/Var;
    //   88: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   91: swap
    //   92: aload_1
    //   93: aconst_null
    //   94: astore_1
    //   95: aconst_null
    //   96: astore_0
    //   97: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   102: goto -> 116
    //   105: checkcast clojure/core/cache/CacheProtocol
    //   108: aload_1
    //   109: aconst_null
    //   110: astore_1
    //   111: invokeinterface lookup : (Ljava/lang/Object;)Ljava/lang/Object;
    //   116: goto -> 123
    //   119: pop
    //   120: aload_2
    //   121: aconst_null
    //   122: astore_2
    //   123: areturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #115	-> 0
    //   #115	-> 0
    //   #115	-> 0
    //   #115	-> 33
    //   #115	-> 60
    //   #115	-> 95
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   0	123	0	this	Lclojure/core/cache/BasicCache;
    //   0	123	1	key__1488__auto__	Ljava/lang/Object;
    //   0	123	2	not_found__1489__auto__	Ljava/lang/Object; }
  
  public Object valAt(Object key__1488__auto__) { if (Util.classOf(this) != __cached_class__3)
      if (!(this instanceof CacheProtocol)) {
        __cached_class__3 = Util.classOf(this);
      } else {
        key__1488__auto__ = null;
        return ((CacheProtocol)this).lookup(key__1488__auto__);
      }  
    key__1488__auto__ = null;
    this = null; }
  
  public String toString() { this = null;
    return (String)((IFn)const__2.getRawRoot()).invoke(this.cache); }
  
  public IMapEntry entryAt(Object k__1491__auto__) { // Byte code:
    //   0: aload_0
    //   1: dup
    //   2: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   5: getstatic clojure/core/cache/BasicCache.__cached_class__1 : Ljava/lang/Class;
    //   8: if_acmpeq -> 25
    //   11: dup
    //   12: instanceof clojure/core/cache/CacheProtocol
    //   15: ifne -> 41
    //   18: dup
    //   19: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   22: putstatic clojure/core/cache/BasicCache.__cached_class__1 : Ljava/lang/Class;
    //   25: getstatic clojure/core/cache/BasicCache.const__0 : Lclojure/lang/Var;
    //   28: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   31: swap
    //   32: aload_1
    //   33: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   38: goto -> 50
    //   41: checkcast clojure/core/cache/CacheProtocol
    //   44: aload_1
    //   45: invokeinterface has_QMARK_ : (Ljava/lang/Object;)Ljava/lang/Object;
    //   50: dup
    //   51: ifnull -> 125
    //   54: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   57: if_acmpeq -> 126
    //   60: new clojure/lang/MapEntry
    //   63: dup
    //   64: aload_1
    //   65: aload_0
    //   66: dup
    //   67: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   70: getstatic clojure/core/cache/BasicCache.__cached_class__2 : Ljava/lang/Class;
    //   73: if_acmpeq -> 90
    //   76: dup
    //   77: instanceof clojure/core/cache/CacheProtocol
    //   80: ifne -> 108
    //   83: dup
    //   84: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   87: putstatic clojure/core/cache/BasicCache.__cached_class__2 : Ljava/lang/Class;
    //   90: getstatic clojure/core/cache/BasicCache.const__1 : Lclojure/lang/Var;
    //   93: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   96: swap
    //   97: aload_1
    //   98: aconst_null
    //   99: astore_1
    //   100: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   105: goto -> 119
    //   108: checkcast clojure/core/cache/CacheProtocol
    //   111: aload_1
    //   112: aconst_null
    //   113: astore_1
    //   114: invokeinterface lookup : (Ljava/lang/Object;)Ljava/lang/Object;
    //   119: invokespecial <init> : (Ljava/lang/Object;Ljava/lang/Object;)V
    //   122: goto -> 127
    //   125: pop
    //   126: aconst_null
    //   127: checkcast clojure/lang/IMapEntry
    //   130: areturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #115	-> 0
    //   #115	-> 0
    //   #115	-> 0
    //   #115	-> 33
    //   #115	-> 65
    //   #115	-> 100
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   0	130	0	this	Lclojure/core/cache/BasicCache;
    //   0	130	1	k__1491__auto__	Ljava/lang/Object; }
  
  public boolean containsKey(Object k__1491__auto__) { if (Util.classOf(this) != __cached_class__0)
      if (!(this instanceof CacheProtocol)) {
        __cached_class__0 = Util.classOf(this);
      } else {
        k__1491__auto__ = null;
        return ((Boolean)((CacheProtocol)this).has_QMARK_(k__1491__auto__)).booleanValue();
      }  
    k__1491__auto__ = null;
    this = null; }
}
