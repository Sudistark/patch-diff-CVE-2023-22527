package clojure.pprint;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.Keyword;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import clojure.pprint;
import java.util.Arrays;

public class pretty_writer__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final Var const__2;
  
  public static final AFn const__9;
  
  public static final Var const__10;
  
  public static final Keyword const__11;
  
  public static final AFn const__16;
  
  public static final Var const__17;
  
  public static final AFn const__20;
  
  public static final Var const__21;
  
  public static final AFn const__24;
  
  public static final Var const__25;
  
  public static final AFn const__28;
  
  public static final Var const__29;
  
  public static final AFn const__31;
  
  public static final Var const__32;
  
  public static final Keyword const__33;
  
  public static final Keyword const__34;
  
  public static final Keyword const__35;
  
  public static final Keyword const__36;
  
  public static final Keyword const__37;
  
  public static final Keyword const__38;
  
  public static final Keyword const__39;
  
  public static final Keyword const__40;
  
  public static final Keyword const__41;
  
  public static final Keyword const__42;
  
  public static final Var const__43;
  
  public static final AFn const__46;
  
  public static final Var const__47;
  
  public static final AFn const__49;
  
  public static final Var const__50;
  
  public static final AFn const__53;
  
  public static final Var const__54;
  
  public static final AFn const__56;
  
  public static final Keyword const__57;
  
  public static final Keyword const__58;
  
  public static final Keyword const__59;
  
  public static final Keyword const__60;
  
  public static final Keyword const__61;
  
  public static final Var const__62;
  
  public static final Var const__63;
  
  public static final Var const__64;
  
  public static final AFn const__66;
  
  public static final Var const__67;
  
  public static final AFn const__69;
  
  public static final Var const__70;
  
  public static final AFn const__72;
  
  public static final Keyword const__73;
  
  public static final Keyword const__74;
  
  public static final Var const__75;
  
  public static final AFn const__77;
  
  public static final Var const__78;
  
  public static final AFn const__80;
  
  public static final Var const__81;
  
  public static final AFn const__83;
  
  public static final Var const__84;
  
  public static final AFn const__86;
  
  public static final Var const__87;
  
  public static final AFn const__89;
  
  public static final Var const__90;
  
  public static final AFn const__92;
  
  public static final Var const__93;
  
  public static final AFn const__95;
  
  public static final Var const__96;
  
  public static final AFn const__98;
  
  public static final Var const__99;
  
  public static final AFn const__101;
  
  public static final Keyword const__102;
  
  public static final Keyword const__103;
  
  public static final Var const__104;
  
  public static final AFn const__106;
  
  public static final Var const__107;
  
  public static final AFn const__109;
  
  public static final Var const__110;
  
  public static final AFn const__112;
  
  public static final Var const__113;
  
  public static final Var const__114;
  
  public static final AFn const__116;
  
  public static final Var const__117;
  
  public static final Keyword const__118;
  
  public static final Keyword const__119;
  
  public static final Keyword const__120;
  
  public static final Keyword const__121;
  
  public static final Keyword const__122;
  
  public static final Var const__123;
  
  public static final AFn const__126;
  
  public static final Var const__127;
  
  public static final AFn const__130;
  
  public static final Var const__131;
  
  public static final AFn const__134;
  
  public static final Var const__135;
  
  public static final AFn const__138;
  
  public static final Var const__139;
  
  public static final Keyword const__140;
  
  public static final Keyword const__141;
  
  public static final Keyword const__142;
  
  public static final Keyword const__143;
  
  public static final Var const__144;
  
  public static final AFn const__147;
  
  public static final Var const__148;
  
  public static final AFn const__151;
  
  public static final Var const__152;
  
  public static final AFn const__155;
  
  public static final AFn const__158;
  
  public static final Var const__159;
  
  public static final AFn const__162;
  
  public static final Var const__163;
  
  public static final Keyword const__164;
  
  public static final Var const__165;
  
  public static final AFn const__168;
  
  public static final Var const__169;
  
  public static final AFn const__172;
  
  public static final Var const__173;
  
  public static final AFn const__176;
  
  public static final Var const__177;
  
  public static final AFn const__180;
  
  public static final Var const__181;
  
  public static final AFn const__184;
  
  public static final Var const__185;
  
  public static final AFn const__188;
  
  public static final Var const__189;
  
  public static final AFn const__192;
  
  public static final Var const__193;
  
  public static final AFn const__196;
  
  public static final Var const__197;
  
  public static final AFn const__200;
  
  public static final Var const__201;
  
  public static final AFn const__204;
  
  public static final Var const__205;
  
  public static final AFn const__208;
  
  public static final Var const__209;
  
  public static final AFn const__212;
  
  public static final Var const__213;
  
  public static final AFn const__216;
  
  public static final AFn const__219;
  
  public static final Var const__220;
  
  public static final AFn const__223;
  
  public static final Var const__224;
  
  public static final AFn const__227;
  
  public static void load() {
    const__2.setMeta((IPersistentMap)const__9);
    const__10.setMeta((IPersistentMap)const__16);
    const__10.bindRoot(new pprint.getf());
    ((Var)const__10)

















      
      .setMacro();
    const__17.setMeta((IPersistentMap)const__20);
    const__17.bindRoot(new pprint.setf());
    ((Var)const__17)




      
      .setMacro();
    const__21.setMeta((IPersistentMap)const__24);
    const__21.bindRoot(new pprint.deftype());
    ((Var)const__21)




      
      .setMacro();
    const__25.setMeta((IPersistentMap)const__28);
    const__25.bindRoot(new pprint.write_to_base());
    ((Var)const__25)








      
      .setMacro();
    const__29.setMeta((IPersistentMap)const__31);
    const__29










      
      .bindRoot(((IFn)const__32.getRawRoot()).invoke(const__33, const__34, const__35, const__36, const__37, const__38, const__39, const__40, const__41, const__42));
    const__43.setMeta((IPersistentMap)const__46);
    const__43.bindRoot(new pprint.ancestor_QMARK_());
    const__47.setMeta((IPersistentMap)const__49);
    const__47











      
      .bindRoot(((IFn)const__32.getRawRoot()).invoke(const__33));
    const__50.setMeta((IPersistentMap)const__53);
    const__50.bindRoot(new pprint.buffer_length());
    const__54.setMeta((IPersistentMap)const__56);
    const__54







      
      .bindRoot(((IFn)const__32.getRawRoot()).invoke(const__57, const__58, const__59, const__60, const__61));
    const__64.setMeta((IPersistentMap)const__66);
    const__64.bindRoot(new pprint.make_buffer_blob());
    const__67.setMeta((IPersistentMap)const__69);
    const__67.bindRoot(new pprint.buffer_blob_QMARK_());
    const__70.setMeta((IPersistentMap)const__72);
    const__70

      
      .bindRoot(((IFn)const__32.getRawRoot()).invoke(const__57, const__73, const__74, const__60, const__61));
    const__75.setMeta((IPersistentMap)const__77);
    const__75.bindRoot(new pprint.make_nl_t());
    const__78.setMeta((IPersistentMap)const__80);
    const__78.bindRoot(new pprint.nl_t_QMARK_());
    const__81.setMeta((IPersistentMap)const__83);
    const__81
      
      .bindRoot(((IFn)const__32.getRawRoot()).invoke(const__57, const__74, const__60, const__61));
    const__84.setMeta((IPersistentMap)const__86);
    const__84.bindRoot(new pprint.make_start_block_t());
    const__87.setMeta((IPersistentMap)const__89);
    const__87.bindRoot(new pprint.start_block_t_QMARK_());
    const__90.setMeta((IPersistentMap)const__92);
    const__90
      
      .bindRoot(((IFn)const__32.getRawRoot()).invoke(const__57, const__74, const__60, const__61));
    const__93.setMeta((IPersistentMap)const__95);
    const__93.bindRoot(new pprint.make_end_block_t());
    const__96.setMeta((IPersistentMap)const__98);
    const__96.bindRoot(new pprint.end_block_t_QMARK_());
    const__99.setMeta((IPersistentMap)const__101);
    const__99
      
      .bindRoot(((IFn)const__32.getRawRoot()).invoke(const__57, const__74, const__102, const__103, const__60, const__61));
    const__104.setMeta((IPersistentMap)const__106);
    const__104.bindRoot(new pprint.make_indent_t());
    const__107.setMeta((IPersistentMap)const__109);
    const__107.bindRoot(new pprint.indent_t_QMARK_());
    const__110.setMeta((IPersistentMap)const__112);
    const__110




      
      .bindRoot(((IFn)const__113.getRawRoot()).invoke(new pprint.fn__10047()));
    const__114.setMeta((IPersistentMap)const__116);
    const__123.setMeta((IPersistentMap)const__126);
    const__123.bindRoot(new pprint.write_tokens());
    const__127.setMeta((IPersistentMap)const__130);
    const__127.bindRoot(new pprint.tokens_fit_QMARK_());
    const__131.setMeta((IPersistentMap)const__134);
    const__131.bindRoot(new pprint.linear_nl_QMARK_());
    const__135.setMeta((IPersistentMap)const__138);
    const__135.bindRoot(new pprint.miser_nl_QMARK_());
    const__144.setMeta((IPersistentMap)const__147);
    const__144.bindRoot(new pprint.get_section());
    const__148.setMeta((IPersistentMap)const__151);
    const__148.bindRoot(new pprint.get_sub_section());
    const__152.setMeta((IPersistentMap)const__155);
    const__152.bindRoot(new pprint.update_nl_state());
    const__114.setMeta((IPersistentMap)const__158);
    const__114.bindRoot(new pprint.emit_nl());
    const__159.setMeta((IPersistentMap)const__162);
    const__159.bindRoot(new pprint.split_at_newline());
    const__165.setMeta((IPersistentMap)const__168);
    const__165.bindRoot(new pprint.toks());
    const__169.setMeta((IPersistentMap)const__172);
    const__169.bindRoot(new pprint.write_token_string());
    const__173.setMeta((IPersistentMap)const__176);
    const__173.bindRoot(new pprint.write_line());
    const__177.setMeta((IPersistentMap)const__180);
    const__177.bindRoot(new pprint.add_to_buffer());
    const__181.setMeta((IPersistentMap)const__184);
    const__181.bindRoot(new pprint.write_buffered_output());
    const__185.setMeta((IPersistentMap)const__188);
    const__185.bindRoot(new pprint.write_white_space());
    const__189.setMeta((IPersistentMap)const__192);
    const__189.bindRoot(new pprint.write_initial_lines());
    const__193.setMeta((IPersistentMap)const__196);
    const__193.bindRoot(new pprint.p_write_char());
    const__197.setMeta((IPersistentMap)const__200);
    const__197.bindRoot(new pprint.pretty_writer());
    const__201.setMeta((IPersistentMap)const__204);
    const__201.bindRoot(new pprint.start_block());
    const__205.setMeta((IPersistentMap)const__208);
    const__205.bindRoot(new pprint.end_block());
    const__209.setMeta((IPersistentMap)const__212);
    const__209.bindRoot(new pprint.nl());
    const__213.setMeta((IPersistentMap)const__216);
    const__213.bindRoot(new pprint.indent());
    const__2.setMeta((IPersistentMap)const__219);
    const__2.bindRoot(new pprint.get_miser_width());
    const__220.setMeta((IPersistentMap)const__223);
    const__220.bindRoot(new pprint.set_miser_width());
    const__224.setMeta((IPersistentMap)const__227);
    const__224.bindRoot(new pprint.set_logical_block_callback());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "clojure.pprint");
    const__2 = (Var)RT.var("clojure.pprint", "get-miser-width");
    const__9 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(30), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/pretty_writer.clj" });
    const__10 = (Var)RT.var("clojure.pprint", "getf");
    const__11 = (Keyword)RT.keyword(null, "private");
    const__16 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "sym")) })), RT.keyword(null, "doc"), "Get the value of the field named by the argument (which should be a keyword).", RT.keyword(null, "line"), Integer.valueOf(37), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/pprint/pretty_writer.clj" });
    const__17 = (Var)RT.var("clojure.pprint", "setf");
    const__20 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "sym"), Symbol.intern(null, "new-val")) })), RT.keyword(null, "doc"), "Set the value of the field SYM to NEW-VAL", RT.keyword(null, "line"), Integer.valueOf(43), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/pprint/pretty_writer.clj" });
    const__21 = (Var)RT.var("clojure.pprint", "deftype");
    const__24 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "type-name"), Symbol.intern(null, "&"), Symbol.intern(null, "fields")) })), RT.keyword(null, "line"), Integer.valueOf(49), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/pretty_writer.clj" });
    const__25 = (Var)RT.var("clojure.pprint", "write-to-base");
    const__28 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "args")) })), RT.keyword(null, "doc"), "Call .write on Writer (getf :base) with proper type-hinting to\n  avoid reflection.", RT.keyword(null, "line"), Integer.valueOf(59), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/pprint/pretty_writer.clj" });
    const__29 = (Var)RT.var("clojure.pprint", "logical-block");
    const__31 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(71), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/pretty_writer.clj" });
    const__32 = (Var)RT.var("clojure.core", "create-struct");
    const__33 = (Keyword)RT.keyword(null, "parent");
    const__34 = (Keyword)RT.keyword(null, "section");
    const__35 = (Keyword)RT.keyword(null, "start-col");
    const__36 = (Keyword)RT.keyword(null, "indent");
    const__37 = (Keyword)RT.keyword(null, "done-nl");
    const__38 = (Keyword)RT.keyword(null, "intra-block-nl");
    const__39 = (Keyword)RT.keyword(null, "prefix");
    const__40 = (Keyword)RT.keyword(null, "per-line-prefix");
    const__41 = (Keyword)RT.keyword(null, "suffix");
    const__42 = (Keyword)RT.keyword(null, "logical-block-callback");
    const__43 = (Var)RT.var("clojure.pprint", "ancestor?");
    const__46 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "parent"), Symbol.intern(null, "child")) })), RT.keyword(null, "line"), Integer.valueOf(77), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/pretty_writer.clj" });
    const__47 = (Var)RT.var("clojure.pprint", "section");
    const__49 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(84), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/pretty_writer.clj" });
    const__50 = (Var)RT.var("clojure.pprint", "buffer-length");
    const__53 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "l")) })), RT.keyword(null, "line"), Integer.valueOf(86), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/pretty_writer.clj" });
    const__54 = (Var)RT.var("clojure.pprint", "buffer-blob");
    const__56 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(93), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/pretty_writer.clj" });
    const__57 = (Keyword)RT.keyword(null, "type-tag");
    const__58 = (Keyword)RT.keyword(null, "data");
    const__59 = (Keyword)RT.keyword(null, "trailing-white-space");
    const__60 = (Keyword)RT.keyword(null, "start-pos");
    const__61 = (Keyword)RT.keyword(null, "end-pos");
    const__62 = (Var)RT.var("clojure.core", "alter-meta!");
    const__63 = (Var)RT.var("clojure.core", "assoc");
    const__64 = (Var)RT.var("clojure.pprint", "make-buffer-blob");
    const__66 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "vals__10030__auto__")) })), RT.keyword(null, "line"), Integer.valueOf(93), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/pretty_writer.clj" });
    const__67 = (Var)RT.var("clojure.pprint", "buffer-blob?");
    const__69 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x__10031__auto__")) })), RT.keyword(null, "line"), Integer.valueOf(93), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/pretty_writer.clj" });
    const__70 = (Var)RT.var("clojure.pprint", "nl-t");
    const__72 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(96), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/pretty_writer.clj" });
    const__73 = (Keyword)RT.keyword(null, "type");
    const__74 = (Keyword)RT.keyword(null, "logical-block");
    const__75 = (Var)RT.var("clojure.pprint", "make-nl-t");
    const__77 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "vals__10030__auto__")) })), RT.keyword(null, "line"), Integer.valueOf(96), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/pretty_writer.clj" });
    const__78 = (Var)RT.var("clojure.pprint", "nl-t?");
    const__80 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x__10031__auto__")) })), RT.keyword(null, "line"), Integer.valueOf(96), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/pretty_writer.clj" });
    const__81 = (Var)RT.var("clojure.pprint", "start-block-t");
    const__83 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(98), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/pretty_writer.clj" });
    const__84 = (Var)RT.var("clojure.pprint", "make-start-block-t");
    const__86 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "vals__10030__auto__")) })), RT.keyword(null, "line"), Integer.valueOf(98), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/pretty_writer.clj" });
    const__87 = (Var)RT.var("clojure.pprint", "start-block-t?");
    const__89 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x__10031__auto__")) })), RT.keyword(null, "line"), Integer.valueOf(98), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/pretty_writer.clj" });
    const__90 = (Var)RT.var("clojure.pprint", "end-block-t");
    const__92 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(100), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/pretty_writer.clj" });
    const__93 = (Var)RT.var("clojure.pprint", "make-end-block-t");
    const__95 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "vals__10030__auto__")) })), RT.keyword(null, "line"), Integer.valueOf(100), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/pretty_writer.clj" });
    const__96 = (Var)RT.var("clojure.pprint", "end-block-t?");
    const__98 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x__10031__auto__")) })), RT.keyword(null, "line"), Integer.valueOf(100), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/pretty_writer.clj" });
    const__99 = (Var)RT.var("clojure.pprint", "indent-t");
  }
  
  public static void __init1() {
    const__101 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(102), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/pretty_writer.clj" });
    const__102 = (Keyword)RT.keyword(null, "relative-to");
    const__103 = (Keyword)RT.keyword(null, "offset");
    const__104 = (Var)RT.var("clojure.pprint", "make-indent-t");
    const__106 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "vals__10030__auto__")) })), RT.keyword(null, "line"), Integer.valueOf(102), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/pretty_writer.clj" });
    const__107 = (Var)RT.var("clojure.pprint", "indent-t?");
    const__109 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x__10031__auto__")) })), RT.keyword(null, "line"), Integer.valueOf(102), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/pretty_writer.clj" });
    const__110 = (Var)RT.var("clojure.pprint", "pp-newline");
    const__112 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(108), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/pretty_writer.clj" });
    const__113 = (Var)RT.var("clojure.core", "memoize");
    const__114 = (Var)RT.var("clojure.pprint", "emit-nl");
    const__116 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(110), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/pretty_writer.clj" });
    const__117 = (Var)RT.var("clojure.pprint", "write-token");
    const__118 = (Keyword)RT.keyword(null, "start-block-t");
    const__119 = (Keyword)RT.keyword(null, "end-block-t");
    const__120 = (Keyword)RT.keyword(null, "indent-t");
    const__121 = (Keyword)RT.keyword(null, "buffer-blob");
    const__122 = (Keyword)RT.keyword(null, "nl-t");
    const__123 = (Var)RT.var("clojure.pprint", "write-tokens");
    const__126 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "this")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Writer") })), Symbol.intern(null, "tokens"), Symbol.intern(null, "force-trailing-whitespace")) })), RT.keyword(null, "line"), Integer.valueOf(150), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/pretty_writer.clj" });
    const__127 = (Var)RT.var("clojure.pprint", "tokens-fit?");
    const__130 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "this")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Writer") })), Symbol.intern(null, "tokens")) })), RT.keyword(null, "line"), Integer.valueOf(168), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/pretty_writer.clj" });
    const__131 = (Var)RT.var("clojure.pprint", "linear-nl?");
    const__134 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "lb"), Symbol.intern(null, "section")) })), RT.keyword(null, "line"), Integer.valueOf(175), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/pretty_writer.clj" });
    const__135 = (Var)RT.var("clojure.pprint", "miser-nl?");
    const__138 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "this")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Writer") })), Symbol.intern(null, "lb"), Symbol.intern(null, "section")) })), RT.keyword(null, "line"), Integer.valueOf(180), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/pretty_writer.clj" });
    const__139 = (Var)RT.var("clojure.pprint", "emit-nl?");
    const__140 = (Keyword)RT.keyword(null, "linear");
    const__141 = (Keyword)RT.keyword(null, "miser");
    const__142 = (Keyword)RT.keyword(null, "fill");
    const__143 = (Keyword)RT.keyword(null, "mandatory");
    const__144 = (Var)RT.var("clojure.pprint", "get-section");
    const__147 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "buffer")) })), RT.keyword(null, "line"), Integer.valueOf(211), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/pretty_writer.clj" });
    const__148 = (Var)RT.var("clojure.pprint", "get-sub-section");
    const__151 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "buffer")) })), RT.keyword(null, "line"), Integer.valueOf(218), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/pretty_writer.clj" });
    const__152 = (Var)RT.var("clojure.pprint", "update-nl-state");
    const__155 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "lb")) })), RT.keyword(null, "line"), Integer.valueOf(226), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/pretty_writer.clj" });
    const__158 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "this")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Writer") })), Symbol.intern(null, "nl")) })), RT.keyword(null, "line"), Integer.valueOf(236), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/pretty_writer.clj" });
    const__159 = (Var)RT.var("clojure.pprint", "split-at-newline");
    const__162 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "tokens")) })), RT.keyword(null, "line"), Integer.valueOf(248), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/pretty_writer.clj" });
    const__163 = (Var)RT.var("clojure.pprint", "tok");
    const__164 = (Keyword)RT.keyword(null, "default");
    const__165 = (Var)RT.var("clojure.pprint", "toks");
    const__168 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "toks")) })), RT.keyword(null, "line"), Integer.valueOf(261), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/pretty_writer.clj" });
    const__169 = (Var)RT.var("clojure.pprint", "write-token-string");
    const__172 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "tokens")) })), RT.keyword(null, "line"), Integer.valueOf(266), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/pretty_writer.clj" });
    const__173 = (Var)RT.var("clojure.pprint", "write-line");
    const__176 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "this")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Writer") }))) })), RT.keyword(null, "line"), Integer.valueOf(296), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/pretty_writer.clj" });
    const__177 = (Var)RT.var("clojure.pprint", "add-to-buffer");
    const__180 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "this")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Writer") })), Symbol.intern(null, "token")) })), RT.keyword(null, "line"), Integer.valueOf(309), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/pretty_writer.clj" });
    const__181 = (Var)RT.var("clojure.pprint", "write-buffered-output");
    const__184 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "this")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Writer") }))) })), RT.keyword(null, "line"), Integer.valueOf(317), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/pretty_writer.clj" });
    const__185 = (Var)RT.var("clojure.pprint", "write-white-space");
    const__188 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "this")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Writer") }))) })), RT.keyword(null, "line"), Integer.valueOf(324), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/pretty_writer.clj" });
    const__189 = (Var)RT.var("clojure.pprint", "write-initial-lines");
    const__192 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "this")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Writer") })), ((IObj)Symbol.intern(null, "s")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") }))) })), RT.keyword(null, "line"), Integer.valueOf(333), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/pretty_writer.clj" });
    const__193 = (Var)RT.var("clojure.pprint", "p-write-char");
    const__196 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "this")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Writer") })), ((IObj)Symbol.intern(null, "c")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Integer") }))) })), RT.keyword(null, "line"), Integer.valueOf(360), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/pretty_writer.clj" });
    const__197 = (Var)RT.var("clojure.pprint", "pretty-writer");
  }
  
  public static void __init2() {
    const__200 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "writer"), Symbol.intern(null, "max-columns"), Symbol.intern(null, "miser-width")) })), RT.keyword(null, "line"), Integer.valueOf(379), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/pretty_writer.clj" });
    const__201 = (Var)RT.var("clojure.pprint", "start-block");
    const__204 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "this")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Writer") })), ((IObj)Symbol.intern(null, "prefix")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") })), ((IObj)Symbol.intern(null, "per-line-prefix")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") })), ((IObj)Symbol.intern(null, "suffix")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") }))) })), RT.keyword(null, "line"), Integer.valueOf(442), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/pretty_writer.clj" });
    const__205 = (Var)RT.var("clojure.pprint", "end-block");
    const__208 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "this")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Writer") }))) })), RT.keyword(null, "line"), Integer.valueOf(464), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/pretty_writer.clj" });
    const__209 = (Var)RT.var("clojure.pprint", "nl");
    const__212 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "this")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Writer") })), Symbol.intern(null, "type")) })), RT.keyword(null, "line"), Integer.valueOf(480), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/pretty_writer.clj" });
    const__213 = (Var)RT.var("clojure.pprint", "indent");
    const__216 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "this")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Writer") })), Symbol.intern(null, "relative-to"), Symbol.intern(null, "offset")) })), RT.keyword(null, "line"), Integer.valueOf(486), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/pretty_writer.clj" });
    const__219 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "this")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Writer") }))) })), RT.keyword(null, "line"), Integer.valueOf(499), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/pretty_writer.clj" });
    const__220 = (Var)RT.var("clojure.pprint", "set-miser-width");
    const__223 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "this")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Writer") })), Symbol.intern(null, "new-miser-width")) })), RT.keyword(null, "line"), Integer.valueOf(502), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/pretty_writer.clj" });
    const__224 = (Var)RT.var("clojure.pprint", "set-logical-block-callback");
    const__227 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "this")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Writer") })), Symbol.intern(null, "f")) })), RT.keyword(null, "line"), Integer.valueOf(505), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/pretty_writer.clj" });
  }
  
  static  {
    __init0();
    __init1();
    __init2();
    Compiler.pushNSandLoader(RT.classForName("clojure.pprint.pretty_writer__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
