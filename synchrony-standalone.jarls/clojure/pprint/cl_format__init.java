package clojure.pprint;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.Keyword;
import clojure.lang.PersistentArrayMap;
import clojure.lang.PersistentHashSet;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import clojure.pprint;
import java.util.Arrays;
import java.util.regex.Pattern;

public class cl_format__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final Var const__2;
  
  public static final AFn const__9;
  
  public static final Var const__10;
  
  public static final AFn const__12;
  
  public static final Var const__13;
  
  public static final AFn const__15;
  
  public static final Var const__16;
  
  public static final AFn const__26;
  
  public static final Var const__27;
  
  public static final AFn const__31;
  
  public static final Var const__32;
  
  public static final AFn const__35;
  
  public static final Var const__36;
  
  public static final AFn const__38;
  
  public static final Var const__39;
  
  public static final Keyword const__40;
  
  public static final Keyword const__41;
  
  public static final Keyword const__42;
  
  public static final AFn const__46;
  
  public static final Var const__47;
  
  public static final AFn const__50;
  
  public static final Var const__51;
  
  public static final AFn const__54;
  
  public static final Var const__55;
  
  public static final AFn const__58;
  
  public static final Var const__59;
  
  public static final AFn const__61;
  
  public static final Var const__62;
  
  public static final AFn const__65;
  
  public static final AFn const__68;
  
  public static final Var const__69;
  
  public static final AFn const__71;
  
  public static final Keyword const__72;
  
  public static final Keyword const__73;
  
  public static final Keyword const__74;
  
  public static final Keyword const__75;
  
  public static final Var const__76;
  
  public static final AFn const__79;
  
  public static final Var const__80;
  
  public static final AFn const__83;
  
  public static final Var const__84;
  
  public static final AFn const__86;
  
  public static final Var const__87;
  
  public static final AFn const__89;
  
  public static final AFn const__93;
  
  public static final Var const__94;
  
  public static final AFn const__97;
  
  public static final Var const__98;
  
  public static final AFn const__101;
  
  public static final Var const__102;
  
  public static final AFn const__105;
  
  public static final Var const__106;
  
  public static final AFn const__109;
  
  public static final Var const__110;
  
  public static final AFn const__113;
  
  public static final Var const__114;
  
  public static final AFn const__116;
  
  public static final AFn const__118;
  
  public static final AFn const__121;
  
  public static final Var const__122;
  
  public static final AFn const__125;
  
  public static final Var const__126;
  
  public static final AFn const__129;
  
  public static final Var const__130;
  
  public static final AFn const__132;
  
  public static final AFn const__133;
  
  public static final Var const__134;
  
  public static final AFn const__136;
  
  public static final AFn const__137;
  
  public static final Var const__138;
  
  public static final AFn const__140;
  
  public static final AFn const__141;
  
  public static final Var const__142;
  
  public static final AFn const__144;
  
  public static final AFn const__145;
  
  public static final Var const__146;
  
  public static final AFn const__148;
  
  public static final AFn const__149;
  
  public static final Var const__150;
  
  public static final AFn const__153;
  
  public static final Var const__154;
  
  public static final AFn const__157;
  
  public static final Var const__158;
  
  public static final AFn const__161;
  
  public static final Var const__162;
  
  public static final AFn const__165;
  
  public static final Var const__166;
  
  public static final AFn const__169;
  
  public static final Var const__170;
  
  public static final AFn const__172;
  
  public static final AFn const__177;
  
  public static final Var const__178;
  
  public static final AFn const__180;
  
  public static final AFn const__185;
  
  public static final Var const__186;
  
  public static final AFn const__189;
  
  public static final Var const__190;
  
  public static final AFn const__193;
  
  public static final Var const__194;
  
  public static final AFn const__197;
  
  public static final Var const__198;
  
  public static final AFn const__200;
  
  public static final AFn const__204;
  
  public static final Var const__205;
  
  public static final AFn const__208;
  
  public static final Var const__209;
  
  public static final AFn const__212;
  
  public static final Var const__213;
  
  public static final AFn const__216;
  
  public static final Var const__217;
  
  public static final AFn const__220;
  
  public static final Var const__221;
  
  public static final AFn const__224;
  
  public static final Var const__225;
  
  public static final AFn const__228;
  
  public static final Var const__229;
  
  public static final AFn const__232;
  
  public static final Var const__233;
  
  public static final AFn const__238;
  
  public static final Var const__239;
  
  public static final AFn const__242;
  
  public static final Var const__243;
  
  public static final AFn const__246;
  
  public static final Var const__247;
  
  public static final AFn const__250;
  
  public static final Var const__251;
  
  public static final AFn const__254;
  
  public static final Var const__255;
  
  public static final AFn const__258;
  
  public static final Var const__259;
  
  public static final AFn const__262;
  
  public static final Var const__263;
  
  public static final AFn const__266;
  
  public static final Var const__267;
  
  public static final AFn const__270;
  
  public static final Var const__271;
  
  public static final AFn const__274;
  
  public static final Var const__275;
  
  public static final AFn const__278;
  
  public static final Var const__279;
  
  public static final AFn const__282;
  
  public static final Var const__283;
  
  public static final AFn const__286;
  
  public static final Var const__287;
  
  public static final AFn const__290;
  
  public static final Var const__291;
  
  public static final AFn const__294;
  
  public static final Var const__295;
  
  public static final AFn const__298;
  
  public static final Var const__299;
  
  public static final AFn const__302;
  
  public static final Var const__303;
  
  public static final AFn const__306;
  
  public static final Var const__307;
  
  public static final AFn const__309;
  
  public static final Var const__310;
  
  public static final AFn const__312;
  
  public static final Var const__313;
  
  public static final AFn const__316;
  
  public static final Var const__317;
  
  public static final AFn const__320;
  
  public static final AFn const__323;
  
  public static final Var const__324;
  
  public static final AFn const__327;
  
  public static final Var const__328;
  
  public static final AFn const__331;
  
  public static final Var const__332;
  
  public static final AFn const__335;
  
  public static final Var const__336;
  
  public static final AFn const__339;
  
  public static final Var const__340;
  
  public static final AFn const__343;
  
  public static final Var const__344;
  
  public static final AFn const__347;
  
  public static final Var const__348;
  
  public static final AFn const__351;
  
  public static final Var const__352;
  
  public static final AFn const__355;
  
  public static final Var const__356;
  
  public static final AFn const__359;
  
  public static final Var const__360;
  
  public static final AFn const__363;
  
  public static final AFn const__366;
  
  public static final Var const__367;
  
  public static final AFn const__370;
  
  public static final Var const__371;
  
  public static final AFn const__374;
  
  public static final Var const__375;
  
  public static final AFn const__378;
  
  public static final Var const__379;
  
  public static final AFn const__382;
  
  public static final Var const__383;
  
  public static final AFn const__385;
  
  public static final Var const__386;
  
  public static final Object const__387;
  
  public static final Keyword const__388;
  
  public static final Var const__389;
  
  public static final Keyword const__390;
  
  public static final AFn const__393;
  
  public static final Keyword const__394;
  
  public static final AFn const__396;
  
  public static final Keyword const__397;
  
  public static final AFn const__398;
  
  public static final Keyword const__399;
  
  public static final AFn const__402;
  
  public static final Keyword const__403;
  
  public static final AFn const__407;
  
  public static final Keyword const__408;
  
  public static final Keyword const__409;
  
  public static final Object const__410;
  
  public static final AFn const__411;
  
  public static final AFn const__412;
  
  public static final AFn const__413;
  
  public static final AFn const__414;
  
  public static final AFn const__415;
  
  public static final Object const__416;
  
  public static final AFn const__417;
  
  public static final AFn const__418;
  
  public static final Keyword const__419;
  
  public static final AFn const__421;
  
  public static final Keyword const__422;
  
  public static final AFn const__424;
  
  public static final AFn const__425;
  
  public static final Object const__426;
  
  public static final AFn const__427;
  
  public static final AFn const__428;
  
  public static final AFn const__429;
  
  public static final AFn const__430;
  
  public static final AFn const__431;
  
  public static final Object const__432;
  
  public static final AFn const__433;
  
  public static final AFn const__434;
  
  public static final AFn const__435;
  
  public static final AFn const__436;
  
  public static final AFn const__437;
  
  public static final Object const__438;
  
  public static final AFn const__439;
  
  public static final AFn const__440;
  
  public static final AFn const__441;
  
  public static final AFn const__442;
  
  public static final AFn const__443;
  
  public static final Object const__444;
  
  public static final Keyword const__445;
  
  public static final AFn const__446;
  
  public static final AFn const__447;
  
  public static final AFn const__448;
  
  public static final AFn const__449;
  
  public static final AFn const__450;
  
  public static final AFn const__451;
  
  public static final Object const__452;
  
  public static final AFn const__453;
  
  public static final Object const__454;
  
  public static final Keyword const__455;
  
  public static final AFn const__456;
  
  public static final AFn const__457;
  
  public static final Object const__458;
  
  public static final Keyword const__459;
  
  public static final AFn const__460;
  
  public static final Keyword const__461;
  
  public static final AFn const__462;
  
  public static final Keyword const__463;
  
  public static final AFn const__464;
  
  public static final Keyword const__465;
  
  public static final AFn const__466;
  
  public static final AFn const__467;
  
  public static final AFn const__468;
  
  public static final Object const__469;
  
  public static final AFn const__470;
  
  public static final AFn const__471;
  
  public static final Keyword const__472;
  
  public static final AFn const__473;
  
  public static final AFn const__474;
  
  public static final AFn const__475;
  
  public static final AFn const__476;
  
  public static final Keyword const__477;
  
  public static final AFn const__478;
  
  public static final AFn const__479;
  
  public static final Object const__480;
  
  public static final AFn const__481;
  
  public static final AFn const__482;
  
  public static final AFn const__483;
  
  public static final AFn const__484;
  
  public static final AFn const__485;
  
  public static final AFn const__486;
  
  public static final AFn const__487;
  
  public static final AFn const__488;
  
  public static final Object const__489;
  
  public static final AFn const__490;
  
  public static final Keyword const__491;
  
  public static final AFn const__492;
  
  public static final AFn const__493;
  
  public static final AFn const__494;
  
  public static final AFn const__495;
  
  public static final Object const__496;
  
  public static final Keyword const__497;
  
  public static final AFn const__498;
  
  public static final Object const__499;
  
  public static final AFn const__500;
  
  public static final AFn const__502;
  
  public static final Object const__503;
  
  public static final AFn const__504;
  
  public static final Object const__505;
  
  public static final AFn const__506;
  
  public static final Object const__507;
  
  public static final AFn const__508;
  
  public static final Object const__509;
  
  public static final Keyword const__510;
  
  public static final AFn const__511;
  
  public static final AFn const__512;
  
  public static final AFn const__513;
  
  public static final Object const__514;
  
  public static final AFn const__515;
  
  public static final AFn const__516;
  
  public static final Object const__517;
  
  public static final AFn const__518;
  
  public static final Object const__519;
  
  public static final AFn const__520;
  
  public static final Object const__522;
  
  public static final AFn const__525;
  
  public static final Object const__526;
  
  public static final Keyword const__527;
  
  public static final AFn const__528;
  
  public static final AFn const__529;
  
  public static final Object const__530;
  
  public static final AFn const__532;
  
  public static final Object const__533;
  
  public static final Keyword const__534;
  
  public static final AFn const__535;
  
  public static final Keyword const__536;
  
  public static final AFn const__537;
  
  public static final AFn const__538;
  
  public static final AFn const__540;
  
  public static final Object const__541;
  
  public static final Keyword const__542;
  
  public static final AFn const__543;
  
  public static final AFn const__544;
  
  public static final Object const__545;
  
  public static final AFn const__546;
  
  public static final AFn const__547;
  
  public static final Object const__548;
  
  public static final AFn const__549;
  
  public static final AFn const__550;
  
  public static final AFn const__551;
  
  public static final AFn const__552;
  
  public static final AFn const__553;
  
  public static final Object const__554;
  
  public static final AFn const__556;
  
  public static final AFn const__557;
  
  public static final Object const__558;
  
  public static final Keyword const__559;
  
  public static final AFn const__560;
  
  public static final Keyword const__561;
  
  public static final AFn const__562;
  
  public static final Keyword const__563;
  
  public static final AFn const__564;
  
  public static final AFn const__565;
  
  public static final Object const__566;
  
  public static final AFn const__567;
  
  public static final Object const__568;
  
  public static final AFn const__569;
  
  public static final Object const__570;
  
  public static final AFn const__571;
  
  public static final AFn const__572;
  
  public static final Var const__573;
  
  public static final AFn const__575;
  
  public static final Object const__576;
  
  public static final Var const__577;
  
  public static final AFn const__579;
  
  public static final AFn const__582;
  
  public static final Var const__583;
  
  public static final AFn const__586;
  
  public static final Var const__587;
  
  public static final AFn const__590;
  
  public static final Var const__591;
  
  public static final AFn const__594;
  
  public static final Var const__595;
  
  public static final AFn const__597;
  
  public static final AFn const__600;
  
  public static final Var const__601;
  
  public static final AFn const__604;
  
  public static final Var const__605;
  
  public static final AFn const__608;
  
  public static final Var const__609;
  
  public static final AFn const__612;
  
  public static final Var const__613;
  
  public static final AFn const__616;
  
  public static final Var const__617;
  
  public static final AFn const__620;
  
  public static final Var const__621;
  
  public static final AFn const__624;
  
  public static final Var const__625;
  
  public static final AFn const__628;
  
  public static final Var const__629;
  
  public static final AFn const__632;
  
  public static final Var const__633;
  
  public static final AFn const__635;
  
  public static final Var const__636;
  
  public static final AFn const__639;
  
  public static final Var const__640;
  
  public static final AFn const__643;
  
  public static final AFn const__646;
  
  public static final Var const__647;
  
  public static final AFn const__650;
  
  public static final AFn const__653;
  
  public static final Var const__654;
  
  public static final AFn const__657;
  
  public static final AFn const__660;
  
  public static final Var const__661;
  
  public static final AFn const__663;
  
  public static final Var const__664;
  
  public static final Var const__665;
  
  public static final AFn const__668;
  
  public static final Var const__669;
  
  public static final AFn const__672;
  
  public static void load() {
    const__2.setMeta((IPersistentMap)const__9);
    const__10.setMeta((IPersistentMap)const__12);
    const__13.setMeta((IPersistentMap)const__15);
    const__16.setMeta((IPersistentMap)const__26);
    const__16.bindRoot(new pprint.cl_format());
    const__27.setDynamic(true).setMeta((IPersistentMap)const__31);
    const__27.setDynamic(true).bindRoot(null);
    const__32.setMeta((IPersistentMap)const__35);
    const__32.bindRoot(new pprint.format_error());
    const__36.setMeta((IPersistentMap)const__38);
    const__36


























































      
      .bindRoot(((IFn)const__39.getRawRoot()).invoke(const__40, const__41, const__42));
    const__13.setMeta((IPersistentMap)const__46);
    const__13.bindRoot(new pprint.init_navigator());
    const__47.setMeta((IPersistentMap)const__50);
    const__47.bindRoot(new pprint.next_arg());
    const__51.setMeta((IPersistentMap)const__54);
    const__51.bindRoot(new pprint.next_arg_or_nil());
    const__55.setMeta((IPersistentMap)const__58);
    const__55.bindRoot(new pprint.get_format_arg());
    const__59.setMeta((IPersistentMap)const__61);
    const__62.setMeta((IPersistentMap)const__65);
    const__62.bindRoot(new pprint.absolute_reposition());
    const__59.setMeta((IPersistentMap)const__68);
    const__59.bindRoot(new pprint.relative_reposition());
    const__69.setMeta((IPersistentMap)const__71);
    const__69










































      
      .bindRoot(((IFn)const__39.getRawRoot()).invoke(const__72, const__73, const__74, const__75));
    const__76.setMeta((IPersistentMap)const__79);
    const__76.bindRoot(new pprint.realize_parameter());
    const__80.setMeta((IPersistentMap)const__83);
    const__80.bindRoot(new pprint.realize_parameter_list());
    const__84.setMeta((IPersistentMap)const__86);
    const__87.setMeta((IPersistentMap)const__89);
    const__87.bindRoot(const__93);
    const__94.setMeta((IPersistentMap)const__97);
    const__94.bindRoot(new pprint.format_simple_number());
    const__98.setMeta((IPersistentMap)const__101);
    const__98.bindRoot(new pprint.format_ascii());
    const__102.setMeta((IPersistentMap)const__105);
    const__102.bindRoot(new pprint.integral_QMARK_());
    const__106.setMeta((IPersistentMap)const__109);
    const__106.bindRoot(new pprint.remainders());
    const__110.setMeta((IPersistentMap)const__113);
    const__110.bindRoot(new pprint.base_str());
    const__114.setMeta((IPersistentMap)const__116);
    const__114.bindRoot(const__118);
    const__84.setMeta((IPersistentMap)const__121);
    const__84.bindRoot(new pprint.opt_base_str());
    const__122.setMeta((IPersistentMap)const__125);
    const__122.bindRoot(new pprint.group_by_STAR_());
    const__126.setMeta((IPersistentMap)const__129);
    const__126.bindRoot(new pprint.format_integer());
    const__130.setMeta((IPersistentMap)const__132);
    const__130.bindRoot(const__133);
    const__134.setMeta((IPersistentMap)const__136);
    const__134.bindRoot(const__137);
    const__138.setMeta((IPersistentMap)const__140);
    const__138.bindRoot(const__141);
    const__142.setMeta((IPersistentMap)const__144);
    const__142.bindRoot(const__145);
    const__146.setMeta((IPersistentMap)const__148);
    const__146.bindRoot(const__149);
    const__150.setMeta((IPersistentMap)const__153);
    const__150.bindRoot(new pprint.format_simple_cardinal());
    const__154.setMeta((IPersistentMap)const__157);
    const__154.bindRoot(new pprint.add_english_scales());
    const__158.setMeta((IPersistentMap)const__161);
    const__158.bindRoot(new pprint.format_cardinal_english());
    const__162.setMeta((IPersistentMap)const__165);
    const__162.bindRoot(new pprint.format_simple_ordinal());
    const__166.setMeta((IPersistentMap)const__169);
    const__166.bindRoot(new pprint.format_ordinal_english());
    const__170.setMeta((IPersistentMap)const__172);
    const__170.bindRoot(const__177);
    const__178.setMeta((IPersistentMap)const__180);
    const__178.bindRoot(const__185);
    const__186.setMeta((IPersistentMap)const__189);
    const__186.bindRoot(new pprint.format_roman());
    const__190.setMeta((IPersistentMap)const__193);
    const__190.bindRoot(new pprint.format_old_roman());
    const__194.setMeta((IPersistentMap)const__197);
    const__194.bindRoot(new pprint.format_new_roman());
    const__198.setMeta((IPersistentMap)const__200);
    const__198.bindRoot(const__204);
    const__205.setMeta((IPersistentMap)const__208);
    const__205.bindRoot(new pprint.pretty_character());
    const__209.setMeta((IPersistentMap)const__212);
    const__209.bindRoot(new pprint.readable_character());
    const__213.setMeta((IPersistentMap)const__216);
    const__213.bindRoot(new pprint.plain_character());
    const__217.setMeta((IPersistentMap)const__220);
    const__217.bindRoot(new pprint.abort_QMARK_());
    const__221.setMeta((IPersistentMap)const__224);
    const__221.bindRoot(new pprint.execute_sub_format());
    const__225.setMeta((IPersistentMap)const__228);
    const__225.bindRoot(new pprint.float_parts_base());
    const__229.setMeta((IPersistentMap)const__232);
    const__229.bindRoot(new pprint.float_parts());
    const__233.setMeta((IPersistentMap)const__238);
    const__233.bindRoot(new pprint.inc_s());
    const__239.setMeta((IPersistentMap)const__242);
    const__239.bindRoot(new pprint.round_str());
    const__243.setMeta((IPersistentMap)const__246);
    const__243.bindRoot(new pprint.expand_fixed());
    const__247.setMeta((IPersistentMap)const__250);
    const__247.bindRoot(new pprint.insert_decimal());
    const__251.setMeta((IPersistentMap)const__254);
    const__251.bindRoot(new pprint.get_fixed());
    const__255.setMeta((IPersistentMap)const__258);
    const__255.bindRoot(new pprint.insert_scaled_decimal());
    const__259.setMeta((IPersistentMap)const__262);
    const__259.bindRoot(new pprint.convert_ratio());
    const__263.setMeta((IPersistentMap)const__266);
    const__263.bindRoot(new pprint.fixed_float());
    const__267.setMeta((IPersistentMap)const__270);
    const__267.bindRoot(new pprint.exponential_float());
    const__271.setMeta((IPersistentMap)const__274);
    const__271.bindRoot(new pprint.general_float());
    const__275.setMeta((IPersistentMap)const__278);
    const__275.bindRoot(new pprint.dollar_float());
    const__279.setMeta((IPersistentMap)const__282);
    const__279.bindRoot(new pprint.choice_conditional());
    const__283.setMeta((IPersistentMap)const__286);
    const__283.bindRoot(new pprint.boolean_conditional());
    const__287.setMeta((IPersistentMap)const__290);
    const__287.bindRoot(new pprint.check_arg_conditional());
    const__291.setMeta((IPersistentMap)const__294);
    const__291.bindRoot(new pprint.iterate_sublist());
    const__295.setMeta((IPersistentMap)const__298);
    const__295.bindRoot(new pprint.iterate_list_of_sublists());
    const__299.setMeta((IPersistentMap)const__302);
    const__299.bindRoot(new pprint.iterate_main_list());
    const__303.setMeta((IPersistentMap)const__306);
    const__303.bindRoot(new pprint.iterate_main_sublists());
    const__307.setMeta((IPersistentMap)const__309);
    const__310.setMeta((IPersistentMap)const__312);
    const__313.setMeta((IPersistentMap)const__316);
    const__313.bindRoot(new pprint.logical_block_or_justify());
    const__317.setMeta((IPersistentMap)const__320);
    const__317.bindRoot(new pprint.render_clauses());
    const__310.setMeta((IPersistentMap)const__323);
    const__310.bindRoot(new pprint.justify_clauses());
    const__324.setMeta((IPersistentMap)const__327);
    const__324.bindRoot(new pprint.downcase_writer());
    const__328.setMeta((IPersistentMap)const__331);
    const__328.bindRoot(new pprint.upcase_writer());
    const__332.setMeta((IPersistentMap)const__335);
    const__332.bindRoot(new pprint.capitalize_string());
    const__336.setMeta((IPersistentMap)const__339);
    const__336.bindRoot(new pprint.capitalize_word_writer());
    const__340.setMeta((IPersistentMap)const__343);
    const__340.bindRoot(new pprint.init_cap_writer());
    const__344.setMeta((IPersistentMap)const__347);
    const__344.bindRoot(new pprint.modify_case());
    const__348.setMeta((IPersistentMap)const__351);
    const__348.bindRoot(new pprint.get_pretty_writer());
    const__352.setMeta((IPersistentMap)const__355);
    const__352.bindRoot(new pprint.fresh_line());
    const__356.setMeta((IPersistentMap)const__359);
    const__356.bindRoot(new pprint.absolute_tabulation());
    const__360.setMeta((IPersistentMap)const__363);
    const__360.bindRoot(new pprint.relative_tabulation());
    const__307.setMeta((IPersistentMap)const__366);
    const__307.bindRoot(new pprint.format_logical_block());
    const__367.setMeta((IPersistentMap)const__370);
    const__367.bindRoot(new pprint.set_indent());
    const__371.setMeta((IPersistentMap)const__374);
    const__371.bindRoot(new pprint.conditional_newline());
    const__375.setMeta((IPersistentMap)const__378);
    const__375.bindRoot(new pprint.process_directive_table_element());
    const__379.setMeta((IPersistentMap)const__382);
    const__379.bindRoot(new pprint.defdirectives());
    ((Var)const__379)



















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































      
      .setMacro();
    const__383.setMeta((IPersistentMap)const__385);
    const__383




      
      .bindRoot(((IFn)const__386.getRawRoot()).invoke(const__387, RT.mapUniqueKeys(new Object[] { const__388, const__387, const__74, ((IFn)const__389.getRawRoot()).invoke(const__390, const__393, const__394, const__396, const__397, const__398, const__399, const__402), const__403, const__407, const__408, PersistentArrayMap.EMPTY, const__409, new pprint.fn__10705() }), const__410, RT.mapUniqueKeys(new Object[] { const__388, const__410, const__74, ((IFn)const__389.getRawRoot()).invoke(const__390, const__411, const__394, const__412, const__397, const__413, const__399, const__414), const__403, const__415, const__408, PersistentArrayMap.EMPTY, const__409, new pprint.fn__10709() }), const__416, RT.mapUniqueKeys(new Object[] { const__388, const__416, const__74, ((IFn)const__389.getRawRoot()).invoke(const__390, const__417, const__399, const__418, const__419, const__421, const__422, const__424), const__403, const__425, const__408, PersistentArrayMap.EMPTY, const__409, new pprint.fn__10713() }), const__426, RT.mapUniqueKeys(new Object[] { const__388, const__426, const__74, ((IFn)const__389.getRawRoot()).invoke(const__390, const__427, const__399, const__428, const__419, const__429, const__422, const__430), const__403, const__431, const__408, PersistentArrayMap.EMPTY, const__409, new pprint.fn__10717() }), const__432, RT.mapUniqueKeys(new Object[] { const__388, const__432, const__74, ((IFn)const__389.getRawRoot()).invoke(const__390, const__433, const__399, const__434, const__419, const__435, const__422, const__436), const__403, const__437, const__408, PersistentArrayMap.EMPTY, const__409, new pprint.fn__10721() }), const__438, RT.mapUniqueKeys(new Object[] { const__388, const__438, const__74, ((IFn)const__389.getRawRoot()).invoke(const__390, const__439, const__399, const__440, const__419, const__441, const__422, const__442), const__403, const__443, const__408, PersistentArrayMap.EMPTY, const__409, new pprint.fn__10725() }), const__444, RT.mapUniqueKeys(new Object[] { const__388, const__444, const__74, ((IFn)const__389.getRawRoot()).invoke(const__445, const__446, const__390, const__447, const__399, const__448, const__419, const__449, const__422, const__450), const__403, const__451, const__408, PersistentArrayMap.EMPTY, const__409, new pprint.fn__10729() }), const__452, RT.mapUniqueKeys(new Object[] { const__388, const__452, const__74, ((IFn)const__389.getRawRoot()).invoke(), const__403, const__453, const__408, PersistentArrayMap.EMPTY, const__409, new pprint.fn__10742() }, ), const__454, RT.mapUniqueKeys(new Object[] { const__388, const__454, const__74, ((IFn)const__389.getRawRoot()).invoke(const__455, const__456), const__403, const__457, const__408, PersistentArrayMap.EMPTY, const__409, new pprint.fn__10749() }), const__458, RT.mapUniqueKeys(new Object[] { const__388, const__458, const__74, ((IFn)const__389.getRawRoot()).invoke(const__459, const__460, const__461, const__462, const__463, const__464, const__465, const__466, const__399, const__467), const__403, const__468, const__408, PersistentArrayMap.EMPTY, const__409, new pprint.fn__10751() }), new Object[] { 
            const__469, RT.mapUniqueKeys(new Object[] { const__388, const__469, const__74, ((IFn)const__389.getRawRoot()).invoke(const__459, const__470, const__461, const__471, const__472, const__473, const__463, const__474, const__465, const__475, const__399, const__476, const__477, const__478), const__403, const__479, const__408, PersistentArrayMap.EMPTY, const__409, new pprint.fn__10753() }), const__480, RT.mapUniqueKeys(new Object[] { const__388, const__480, const__74, ((IFn)const__389.getRawRoot()).invoke(const__459, const__481, const__461, const__482, const__472, const__483, const__463, const__484, const__465, const__485, const__399, const__486, const__477, const__487), const__403, const__488, const__408, PersistentArrayMap.EMPTY, const__409, new pprint.fn__10755() }), const__489, RT.mapUniqueKeys(new Object[] { const__388, const__489, const__74, ((IFn)const__389.getRawRoot()).invoke(const__461, const__490, const__491, const__492, const__459, const__493, const__399, const__494), const__403, const__495, const__408, PersistentArrayMap.EMPTY, const__409, new pprint.fn__10757() }), const__496, RT.mapUniqueKeys(new Object[] { const__388, const__496, const__74, ((IFn)const__389.getRawRoot()).invoke(const__497, const__498), const__403, PersistentHashSet.EMPTY, const__408, PersistentArrayMap.EMPTY, const__409, new pprint.fn__10759() }), const__499, RT.mapUniqueKeys(new Object[] { const__388, const__499, const__74, ((IFn)const__389.getRawRoot()).invoke(const__497, const__500), const__403, const__502, const__408, PersistentArrayMap.EMPTY, const__409, new pprint.fn__10764() }), 
            const__503, RT.mapUniqueKeys(new Object[] { const__388, const__503, const__74, ((IFn)const__389.getRawRoot()).invoke(const__497, const__504), const__403, PersistentHashSet.EMPTY, const__408, PersistentArrayMap.EMPTY, const__409, new pprint.fn__10769() }), const__505, RT.mapUniqueKeys(new Object[] { const__388, const__505, const__74, ((IFn)const__389.getRawRoot()).invoke(const__491, const__506), const__403, PersistentHashSet.EMPTY, const__408, PersistentArrayMap.EMPTY, const__409, new pprint.fn__10774() }), const__507, RT.mapUniqueKeys(new Object[] { const__388, const__507, const__74, ((IFn)const__389.getRawRoot()).invoke(), const__403, const__508, const__408, PersistentArrayMap.EMPTY, const__409, new pprint.fn__10778() }), const__509, RT.mapUniqueKeys(new Object[] { const__388, const__509, const__74, ((IFn)const__389.getRawRoot()).invoke(const__510, const__511, const__394, const__512), const__403, const__513, const__408, PersistentArrayMap.EMPTY, const__409, new pprint.fn__10782() }), const__514, RT.mapUniqueKeys(new Object[] { const__388, const__514, const__74, ((IFn)const__389.getRawRoot()).invoke(const__491, const__515), const__403, const__516, const__408, PersistentArrayMap.EMPTY, const__409, new pprint.fn__10788() }), 
            const__517, RT.mapUniqueKeys(new Object[] { const__388, const__517, const__74, ((IFn)const__389.getRawRoot()).invoke(), const__403, const__518, const__408, PersistentArrayMap.EMPTY, const__409, new pprint.fn__10796() }), const__519, RT.mapUniqueKeys(new Object[] { const__388, const__519, const__74, ((IFn)const__389.getRawRoot()).invoke(), const__403, const__520, const__408, const__525, const__409, new pprint.fn__10811() }), const__522, RT.mapUniqueKeys(new Object[] { const__388, const__522, const__74, ((IFn)const__389.getRawRoot()).invoke(), const__403, PersistentHashSet.EMPTY, const__408, PersistentArrayMap.EMPTY, const__409, new pprint.fn__10816() }), const__526, RT.mapUniqueKeys(new Object[] { const__388, const__526, const__74, ((IFn)const__389.getRawRoot()).invoke(const__527, const__528), const__403, const__529, const__408, const__532, const__409, new pprint.fn__10818() }), const__533, RT.mapUniqueKeys(new Object[] { const__388, const__533, const__74, ((IFn)const__389.getRawRoot()).invoke(const__534, const__535, const__536, const__537), const__403, const__538, const__408, const__540, const__409, new pprint.fn__10820() }), 
            const__530, RT.mapUniqueKeys(new Object[] { const__388, const__530, const__74, ((IFn)const__389.getRawRoot()).invoke(), const__403, PersistentHashSet.EMPTY, const__408, PersistentArrayMap.EMPTY, const__409, new pprint.fn__10822() }), const__541, RT.mapUniqueKeys(new Object[] { const__388, const__541, const__74, ((IFn)const__389.getRawRoot()).invoke(const__542, const__543), const__403, const__544, const__408, const__546, const__409, new pprint.fn__10824() }), const__545, RT.mapUniqueKeys(new Object[] { const__388, const__545, const__74, ((IFn)const__389.getRawRoot()).invoke(), const__403, const__547, const__408, PersistentArrayMap.EMPTY, const__409, new pprint.fn__10827() }), const__548, RT.mapUniqueKeys(new Object[] { const__388, const__548, const__74, ((IFn)const__389.getRawRoot()).invoke(const__390, const__549, const__394, const__550, const__397, const__551, const__399, const__552), const__403, const__553, const__408, const__556, const__409, new pprint.fn__10829() }), const__554, RT.mapUniqueKeys(new Object[] { const__388, const__554, const__74, ((IFn)const__389.getRawRoot()).invoke(), const__403, const__557, const__408, PersistentArrayMap.EMPTY, const__409, new pprint.fn__10831() }), 
            const__558, RT.mapUniqueKeys(new Object[] { const__388, const__558, const__74, ((IFn)const__389.getRawRoot()).invoke(const__559, const__560, const__561, const__562, const__563, const__564), const__403, const__565, const__408, PersistentArrayMap.EMPTY, const__409, new pprint.fn__10833() }), const__566, RT.mapUniqueKeys(new Object[] { const__388, const__566, const__74, ((IFn)const__389.getRawRoot()).invoke(), const__403, const__567, const__408, PersistentArrayMap.EMPTY, const__409, new pprint.fn__10840() }), const__568, RT.mapUniqueKeys(new Object[] { const__388, const__568, const__74, ((IFn)const__389.getRawRoot()).invoke(), const__403, const__569, const__408, PersistentArrayMap.EMPTY, const__409, new pprint.fn__10853() }), const__570, RT.mapUniqueKeys(new Object[] { const__388, const__570, const__74, ((IFn)const__389.getRawRoot()).invoke(const__491, const__571), const__403, const__572, const__408, PersistentArrayMap.EMPTY, const__409, new pprint.fn__10855() }) }));
    const__573.setMeta((IPersistentMap)const__575);
    const__573.bindRoot(const__576);
    const__577.setMeta((IPersistentMap)const__579);
    const__577.bindRoot(const__582);
    const__583.setMeta((IPersistentMap)const__586);
    const__583.bindRoot(new pprint.extract_param());
    const__587.setMeta((IPersistentMap)const__590);
    const__587.bindRoot(new pprint.extract_params());
    const__591.setMeta((IPersistentMap)const__594);
    const__591.bindRoot(new pprint.translate_param());
    const__595.setMeta((IPersistentMap)const__597);
    const__595.bindRoot(const__600);
    const__601.setMeta((IPersistentMap)const__604);
    const__601.bindRoot(new pprint.extract_flags());
    const__605.setMeta((IPersistentMap)const__608);
    const__605.bindRoot(new pprint.check_flags());
    const__609.setMeta((IPersistentMap)const__612);
    const__609.bindRoot(new pprint.map_params());
    const__613.setMeta((IPersistentMap)const__616);
    const__613.bindRoot(new pprint.compile_directive());
    const__617.setMeta((IPersistentMap)const__620);
    const__617.bindRoot(new pprint.compile_raw_string());
    const__621.setMeta((IPersistentMap)const__624);
    const__621.bindRoot(new pprint.right_bracket());
    const__625.setMeta((IPersistentMap)const__628);
    const__625.bindRoot(new pprint.separator_QMARK_());
    const__629.setMeta((IPersistentMap)const__632);
    const__629.bindRoot(new pprint.else_separator_QMARK_());
    const__633.setMeta((IPersistentMap)const__635);
    const__636.setMeta((IPersistentMap)const__639);
    const__636.bindRoot(new pprint.process_bracket());
    const__640.setMeta((IPersistentMap)const__643);
    const__640.bindRoot(new pprint.process_clause());
    const__633.setMeta((IPersistentMap)const__646);
    const__633.bindRoot(new pprint.collect_clauses());
    const__647.setMeta((IPersistentMap)const__650);
    const__647.bindRoot(new pprint.process_nesting());
    const__2.setMeta((IPersistentMap)const__653);
    const__2.bindRoot(new pprint.compile_format());
    const__654.setMeta((IPersistentMap)const__657);
    const__654.bindRoot(new pprint.needs_pretty());
    const__10.setMeta((IPersistentMap)const__660);
    const__10.bindRoot(new pprint.execute_format());
    const__661.setMeta((IPersistentMap)const__663);
    const__661


































































































































































































































































































































































































































































































































































































      
      .bindRoot(((IFn)const__664.getRawRoot()).invoke(const__2.getRawRoot()));
    const__665.setMeta((IPersistentMap)const__668);
    const__665.bindRoot(new pprint.formatter());
    ((Var)const__665)
      
      .setMacro();
    const__669.setMeta((IPersistentMap)const__672);
    const__669.bindRoot(new pprint.formatter_out());
    ((Var)const__669)


















      
      .setMacro();
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "clojure.pprint");
    const__2 = (Var)RT.var("clojure.pprint", "compile-format");
    const__9 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(22), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__10 = (Var)RT.var("clojure.pprint", "execute-format");
    const__12 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(23), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__13 = (Var)RT.var("clojure.pprint", "init-navigator");
    const__15 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(24), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__16 = (Var)RT.var("clojure.pprint", "cl-format");
    const__26 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "writer"), Symbol.intern(null, "format-in"), Symbol.intern(null, "&"), Symbol.intern(null, "args")) })), RT.keyword(null, "doc"), "An implementation of a Common Lisp compatible format function. cl-format formats its\narguments to an output stream or string based on the format control string given. It \nsupports sophisticated formatting of structured data.\n\nWriter is an instance of java.io.Writer, true to output to *out* or nil to output \nto a string, format-in is the format control string and the remaining arguments \nare the data to be formatted.\n\nThe format control string is a string to be output with embedded 'format directives' \ndescribing how to format the various arguments passed in.\n\nIf writer is nil, cl-format returns the formatted result string. Otherwise, cl-format \nreturns nil.\n\nFor example:\n (let [results [46 38 22]]\n        (cl-format true \"There ~[are~;is~:;are~]~:* ~d result~:p: ~{~d~^, ~}~%\" \n                   (count results) results))\n\nPrints to *out*:\n There are 3 results: 46, 38, 22\n\nDetailed documentation on format control strings is available in the \"Common Lisp the \nLanguage, 2nd edition\", Chapter 22 (available online at:\nhttp://www.cs.cmu.edu/afs/cs.cmu.edu/project/ai-repository/ai/html/cltl/clm/node200.html#SECTION002633000000000000000) \nand in the Common Lisp HyperSpec at \nhttp://www.lispworks.com/documentation/HyperSpec/Body/22_c.htm\n", RT.keyword(null, "added"), "1.2", RT.keyword(null, "see-also"), Tuple.create(Tuple.create("http://www.cs.cmu.edu/afs/cs.cmu.edu/project/ai-repository/ai/html/cltl/clm/node200.html#SECTION002633000000000000000", "Common Lisp the Language"), Tuple.create("http://www.lispworks.com/documentation/HyperSpec/Body/22_c.htm", "Common Lisp HyperSpec")), RT.keyword(null, "line"), Integer.valueOf(27), 
          RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__27 = (Var)RT.var("clojure.pprint", "*format-str*");
    const__31 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(66), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__32 = (Var)RT.var("clojure.pprint", "format-error");
    const__35 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "message"), Symbol.intern(null, "offset")) })), RT.keyword(null, "line"), Integer.valueOf(68), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__36 = (Var)RT.var("clojure.pprint", "arg-navigator");
    const__38 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(79), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__39 = (Var)RT.var("clojure.core", "create-struct");
    const__40 = (Keyword)RT.keyword(null, "seq");
    const__41 = (Keyword)RT.keyword(null, "rest");
    const__42 = (Keyword)RT.keyword(null, "pos");
    const__46 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })), RT.keyword(null, "doc"), "Create a new arg-navigator from the sequence with the position set to 0", RT.keyword(null, "skip-wiki"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(82), 
          RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__47 = (Var)RT.var("clojure.pprint", "next-arg");
    const__50 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "navigator")) })), RT.keyword(null, "line"), Integer.valueOf(90), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__51 = (Var)RT.var("clojure.pprint", "next-arg-or-nil");
    const__54 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "navigator")) })), RT.keyword(null, "line"), Integer.valueOf(96), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__55 = (Var)RT.var("clojure.pprint", "get-format-arg");
    const__58 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "navigator")) })), RT.keyword(null, "line"), Integer.valueOf(103), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__59 = (Var)RT.var("clojure.pprint", "relative-reposition");
    const__61 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(110), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__62 = (Var)RT.var("clojure.pprint", "absolute-reposition");
    const__65 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "navigator"), Symbol.intern(null, "position")) })), RT.keyword(null, "line"), Integer.valueOf(112), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__68 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "navigator"), Symbol.intern(null, "position")) })), RT.keyword(null, "line"), Integer.valueOf(117), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__69 = (Var)RT.var("clojure.pprint", "compiled-directive");
    const__71 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(123), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__72 = (Keyword)RT.keyword(null, "func");
    const__73 = (Keyword)RT.keyword(null, "def");
    const__74 = (Keyword)RT.keyword(null, "params");
    const__75 = (Keyword)RT.keyword(null, "offset");
    const__76 = (Var)RT.var("clojure.pprint", "realize-parameter");
    const__79 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Tuple.create(Symbol.intern(null, "param"), Tuple.create(Symbol.intern(null, "raw-val"), Symbol.intern(null, "offset"))), Symbol.intern(null, "navigator")) })), RT.keyword(null, "line"), Integer.valueOf(134), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__80 = (Var)RT.var("clojure.pprint", "realize-parameter-list");
    const__83 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "parameter-map"), Symbol.intern(null, "navigator")) })), RT.keyword(null, "line"), Integer.valueOf(150), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__84 = (Var)RT.var("clojure.pprint", "opt-base-str");
    const__86 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(163), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__87 = (Var)RT.var("clojure.pprint", "special-radix-markers");
    const__89 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(165), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__93 = (AFn)RT.map(new Object[] { Long.valueOf(2L), "#b", Long.valueOf(8L), "#o", Long.valueOf(16L), "#x" });
    const__94 = (Var)RT.var("clojure.pprint", "format-simple-number");
    const__97 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "n")) })), RT.keyword(null, "line"), Integer.valueOf(168), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__98 = (Var)RT.var("clojure.pprint", "format-ascii");
  }
  
  public static void __init1() {
    const__101 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "print-func"), Symbol.intern(null, "params"), Symbol.intern(null, "arg-navigator"), Symbol.intern(null, "offsets")) })), RT.keyword(null, "line"), Integer.valueOf(182), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__102 = (Var)RT.var("clojure.pprint", "integral?");
    const__105 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "doc"), "returns true if a number is actually an integer (that is, has no fractional part)", RT.keyword(null, "line"), Integer.valueOf(205), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__106 = (Var)RT.var("clojure.pprint", "remainders");
    const__109 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "base"), Symbol.intern(null, "val")) })), RT.keyword(null, "doc"), "Return the list of remainders (essentially the 'digits') of val in the given base", RT.keyword(null, "line"), Integer.valueOf(216), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__110 = (Var)RT.var("clojure.pprint", "base-str");
    const__113 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "base"), Symbol.intern(null, "val")) })), RT.keyword(null, "doc"), "Return val as a string in the given base", RT.keyword(null, "line"), Integer.valueOf(227), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__114 = (Var)RT.var("clojure.pprint", "java-base-formats");
    const__116 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(242), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__118 = (AFn)RT.map(new Object[] { Long.valueOf(8L), "%o", Long.valueOf(10L), "%d", Long.valueOf(16L), "%x" });
    const__121 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "base"), Symbol.intern(null, "val")) })), RT.keyword(null, "doc"), "Return val as a string in the given base, using clojure.core/format if supported\nfor improved performance", RT.keyword(null, "line"), Integer.valueOf(245), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__122 = (Var)RT.var("clojure.pprint", "group-by*");
    const__125 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "unit"), Symbol.intern(null, "lis")) })), RT.keyword(null, "line"), Integer.valueOf(254), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__126 = (Var)RT.var("clojure.pprint", "format-integer");
    const__129 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "base"), Symbol.intern(null, "params"), Symbol.intern(null, "arg-navigator"), Symbol.intern(null, "offsets")) })), RT.keyword(null, "line"), Integer.valueOf(259), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__130 = (Var)RT.var("clojure.pprint", "english-cardinal-units");
    const__132 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(289), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__133 = (AFn)RT.vector(new Object[] { 
          "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", 
          "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen" });
    const__134 = (Var)RT.var("clojure.pprint", "english-ordinal-units");
    const__136 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(295), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__137 = (AFn)RT.vector(new Object[] { 
          "zeroth", "first", "second", "third", "fourth", "fifth", "sixth", "seventh", "eighth", "ninth", 
          "tenth", "eleventh", "twelfth", "thirteenth", "fourteenth", "fifteenth", "sixteenth", "seventeenth", "eighteenth", "nineteenth" });
    const__138 = (Var)RT.var("clojure.pprint", "english-cardinal-tens");
    const__140 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(301), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__141 = (AFn)RT.vector(new Object[] { "", "", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety" });
    const__142 = (Var)RT.var("clojure.pprint", "english-ordinal-tens");
    const__144 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(305), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__145 = (AFn)RT.vector(new Object[] { "", "", "twentieth", "thirtieth", "fortieth", "fiftieth", "sixtieth", "seventieth", "eightieth", "ninetieth" });
    const__146 = (Var)RT.var("clojure.pprint", "english-scale-numbers");
    const__148 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(314), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__149 = (AFn)RT.vector(new Object[] { 
          "", "thousand", "million", "billion", "trillion", "quadrillion", "quintillion", "sextillion", "septillion", "octillion", 
          "nonillion", "decillion", "undecillion", "duodecillion", "tredecillion", "quattuordecillion", "quindecillion", "sexdecillion", "septendecillion", "octodecillion", 
          "novemdecillion", "vigintillion" });
    const__150 = (Var)RT.var("clojure.pprint", "format-simple-cardinal");
    const__153 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "num")) })), RT.keyword(null, "doc"), "Convert a number less than 1000 to a cardinal english string", RT.keyword(null, "line"), Integer.valueOf(322), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__154 = (Var)RT.var("clojure.pprint", "add-english-scales");
    const__157 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "parts"), Symbol.intern(null, "offset")) })), RT.keyword(null, "doc"), "Take a sequence of parts, add scale numbers (e.g., million) and combine into a string\noffset is a factor of 10^3 to multiply by", RT.keyword(null, "line"), Integer.valueOf(340), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__158 = (Var)RT.var("clojure.pprint", "format-cardinal-english");
    const__161 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets")) })), RT.keyword(null, "line"), Integer.valueOf(363), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__162 = (Var)RT.var("clojure.pprint", "format-simple-ordinal");
    const__165 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "num")) })), RT.keyword(null, "doc"), "Convert a number less than 1000 to a ordinal english string\nNote this should only be used for the last one in the sequence", RT.keyword(null, "line"), Integer.valueOf(380), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__166 = (Var)RT.var("clojure.pprint", "format-ordinal-english");
    const__169 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets")) })), RT.keyword(null, "line"), Integer.valueOf(402), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__170 = (Var)RT.var("clojure.pprint", "old-roman-table");
    const__172 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(439), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__177 = (AFn)Tuple.create(RT.vector(new Object[] { "I", "II", "III", "IIII", "V", "VI", "VII", "VIII", "VIIII" }, ), RT.vector(new Object[] { "X", "XX", "XXX", "XXXX", "L", "LX", "LXX", "LXXX", "LXXXX" }, ), RT.vector(new Object[] { "C", "CC", "CCC", "CCCC", "D", "DC", "DCC", "DCCC", "DCCCC" }, ), Tuple.create("M", "MM", "MMM"));
    const__178 = (Var)RT.var("clojure.pprint", "new-roman-table");
    const__180 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(446), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__185 = (AFn)Tuple.create(RT.vector(new Object[] { "I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX" }, ), RT.vector(new Object[] { "X", "XX", "XXX", "XL", "L", "LX", "LXX", "LXXX", "XC" }, ), RT.vector(new Object[] { "C", "CC", "CCC", "CD", "D", "DC", "DCC", "DCCC", "CM" }, ), Tuple.create("M", "MM", "MMM"));
    const__186 = (Var)RT.var("clojure.pprint", "format-roman");
    const__189 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "table"), Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets")) })), RT.keyword(null, "doc"), "Format a roman numeral using the specified look-up table", RT.keyword(null, "line"), Integer.valueOf(453), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__190 = (Var)RT.var("clojure.pprint", "format-old-roman");
    const__193 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets")) })), RT.keyword(null, "line"), Integer.valueOf(477), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__194 = (Var)RT.var("clojure.pprint", "format-new-roman");
    const__197 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets")) })), RT.keyword(null, "line"), Integer.valueOf(480), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__198 = (Var)RT.var("clojure.pprint", "special-chars");
  }
  
  public static void __init2() {
    const__200 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(487), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__204 = (AFn)RT.map(new Object[] { Long.valueOf(8L), "Backspace", Long.valueOf(9L), "Tab", Long.valueOf(10L), "Newline", Long.valueOf(13L), "Return", Long.valueOf(32L), "Space" });
    const__205 = (Var)RT.var("clojure.pprint", "pretty-character");
    const__208 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets")) })), RT.keyword(null, "line"), Integer.valueOf(490), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__209 = (Var)RT.var("clojure.pprint", "readable-character");
    const__212 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets")) })), RT.keyword(null, "line"), Integer.valueOf(504), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__213 = (Var)RT.var("clojure.pprint", "plain-character");
    const__216 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets")) })), RT.keyword(null, "line"), Integer.valueOf(512), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__217 = (Var)RT.var("clojure.pprint", "abort?");
    const__220 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "context")) })), RT.keyword(null, "line"), Integer.valueOf(519), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__221 = (Var)RT.var("clojure.pprint", "execute-sub-format");
    const__224 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "format"), Symbol.intern(null, "args"), Symbol.intern(null, "base-args")) })), RT.keyword(null, "line"), Integer.valueOf(524), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__225 = (Var)RT.var("clojure.pprint", "float-parts-base");
    const__228 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "f")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Object") }))) })), RT.keyword(null, "doc"), "Produce string parts for the mantissa (normalized 1-9) and exponent", RT.keyword(null, "line"), Integer.valueOf(542), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__229 = (Var)RT.var("clojure.pprint", "float-parts");
    const__232 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f")) })), RT.keyword(null, "doc"), "Take care of leading and trailing zeros in decomposed floats", RT.keyword(null, "line"), Integer.valueOf(557), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__233 = (Var)RT.var("clojure.pprint", "inc-s");
    const__238 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "tag"), RT.classForName("java.lang.String"), RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "s")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") }))) })), RT.keyword(null, "doc"), "Assumption: The input string consists of one or more decimal digits,\nand no other characters.  Return a string containing one or more\ndecimal digits containing a decimal number one larger than the input\nstring.  The output string will always be the same length as the input\nstring, or one character longer.", RT.keyword(null, "line"), Integer.valueOf(569), 
          RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__239 = (Var)RT.var("clojure.pprint", "round-str");
    const__242 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "e"), Symbol.intern(null, "d"), Symbol.intern(null, "w")) })), RT.keyword(null, "line"), Integer.valueOf(585), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__243 = (Var)RT.var("clojure.pprint", "expand-fixed");
    const__246 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "e"), Symbol.intern(null, "d")) })), RT.keyword(null, "line"), Integer.valueOf(627), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__247 = (Var)RT.var("clojure.pprint", "insert-decimal");
    const__250 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "e")) })), RT.keyword(null, "doc"), "Insert the decimal point at the right spot in the number to match an exponent", RT.keyword(null, "line"), Integer.valueOf(637), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__251 = (Var)RT.var("clojure.pprint", "get-fixed");
    const__254 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "e"), Symbol.intern(null, "d")) })), RT.keyword(null, "line"), Integer.valueOf(645), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__255 = (Var)RT.var("clojure.pprint", "insert-scaled-decimal");
    const__258 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "k")) })), RT.keyword(null, "doc"), "Insert the decimal point at the right spot in the number to match an exponent", RT.keyword(null, "line"), Integer.valueOf(648), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__259 = (Var)RT.var("clojure.pprint", "convert-ratio");
    const__262 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(655), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__263 = (Var)RT.var("clojure.pprint", "fixed-float");
    const__266 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets")) })), RT.keyword(null, "line"), Integer.valueOf(672), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__267 = (Var)RT.var("clojure.pprint", "exponential-float");
    const__270 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets")) })), RT.keyword(null, "line"), Integer.valueOf(720), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__271 = (Var)RT.var("clojure.pprint", "general-float");
    const__274 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets")) })), RT.keyword(null, "line"), Integer.valueOf(794), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__275 = (Var)RT.var("clojure.pprint", "dollar-float");
    const__278 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets")) })), RT.keyword(null, "line"), Integer.valueOf(817), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__279 = (Var)RT.var("clojure.pprint", "choice-conditional");
    const__282 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "params"), Symbol.intern(null, "arg-navigator"), Symbol.intern(null, "offsets")) })), RT.keyword(null, "line"), Integer.valueOf(843), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__283 = (Var)RT.var("clojure.pprint", "boolean-conditional");
    const__286 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "params"), Symbol.intern(null, "arg-navigator"), Symbol.intern(null, "offsets")) })), RT.keyword(null, "line"), Integer.valueOf(855), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__287 = (Var)RT.var("clojure.pprint", "check-arg-conditional");
    const__290 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "params"), Symbol.intern(null, "arg-navigator"), Symbol.intern(null, "offsets")) })), RT.keyword(null, "line"), Integer.valueOf(867), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__291 = (Var)RT.var("clojure.pprint", "iterate-sublist");
    const__294 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets")) })), RT.keyword(null, "line"), Integer.valueOf(886), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__295 = (Var)RT.var("clojure.pprint", "iterate-list-of-sublists");
    const__298 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets")) })), RT.keyword(null, "line"), Integer.valueOf(911), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__299 = (Var)RT.var("clojure.pprint", "iterate-main-list");
  }
  
  public static void __init3() {
    const__302 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets")) })), RT.keyword(null, "line"), Integer.valueOf(934), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__303 = (Var)RT.var("clojure.pprint", "iterate-main-sublists");
    const__306 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets")) })), RT.keyword(null, "line"), Integer.valueOf(958), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__307 = (Var)RT.var("clojure.pprint", "format-logical-block");
    const__309 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(990), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__310 = (Var)RT.var("clojure.pprint", "justify-clauses");
    const__312 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(991), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__313 = (Var)RT.var("clojure.pprint", "logical-block-or-justify");
    const__316 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets")) })), RT.keyword(null, "line"), Integer.valueOf(993), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__317 = (Var)RT.var("clojure.pprint", "render-clauses");
    const__320 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "clauses"), Symbol.intern(null, "navigator"), Symbol.intern(null, "base-navigator")) })), RT.keyword(null, "line"), Integer.valueOf(1002), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__323 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets")) })), RT.keyword(null, "line"), Integer.valueOf(1017), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__324 = (Var)RT.var("clojure.pprint", "downcase-writer");
    const__327 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "writer")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "java.io.Writer") }))) })), RT.keyword(null, "doc"), "Returns a proxy that wraps writer, converting all characters to lower case", RT.keyword(null, "line"), Integer.valueOf(1072), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__328 = (Var)RT.var("clojure.pprint", "upcase-writer");
    const__331 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "writer")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "java.io.Writer") }))) })), RT.keyword(null, "doc"), "Returns a proxy that wraps writer, converting all characters to upper case", RT.keyword(null, "line"), Integer.valueOf(1090), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__332 = (Var)RT.var("clojure.pprint", "capitalize-string");
    const__335 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s"), Symbol.intern(null, "first?")) })), RT.keyword(null, "doc"), "Capitalizes the words in a string. If first? is false, don't capitalize the \n                                      first character of the string even if it's a letter.", RT.keyword(null, "line"), Integer.valueOf(1108), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__336 = (Var)RT.var("clojure.pprint", "capitalize-word-writer");
    const__339 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "writer")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "java.io.Writer") }))) })), RT.keyword(null, "doc"), "Returns a proxy that wraps writer, capitalizing all words", RT.keyword(null, "line"), Integer.valueOf(1132), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__340 = (Var)RT.var("clojure.pprint", "init-cap-writer");
    const__343 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "writer")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "java.io.Writer") }))) })), RT.keyword(null, "doc"), "Returns a proxy that wraps writer, capitalizing the first word", RT.keyword(null, "line"), Integer.valueOf(1160), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__344 = (Var)RT.var("clojure.pprint", "modify-case");
    const__347 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "make-writer"), Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets")) })), RT.keyword(null, "line"), Integer.valueOf(1194), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__348 = (Var)RT.var("clojure.pprint", "get-pretty-writer");
    const__351 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "writer")) })), RT.keyword(null, "doc"), "Returns the java.io.Writer passed in wrapped in a pretty writer proxy, unless it's \nalready a pretty writer. Generally, it is unnecessary to call this function, since pprint,\nwrite, and cl-format all call it if they need to. However if you want the state to be \npreserved across calls, you will want to wrap them with this. \n\nFor example, when you want to generate column-aware output with multiple calls to cl-format, \ndo it like in this example:\n\n    (defn print-table [aseq column-width]\n      (binding [*out* (get-pretty-writer *out*)]\n        (doseq [row aseq]\n          (doseq [col row]\n            (cl-format true \"~4D~7,vT\" col column-width))\n          (prn))))\n\nNow when you run:\n\n    user> (print-table (map #(vector % (* % %) (* % % %)) (range 1 11)) 8)\n\nIt prints a table of squares and cubes for the numbers from 1 to 10:\n\n       1      1       1    \n       2      4       8    \n       3      9      27    \n       4     16      64    \n       5     25     125    \n       6     36     216    \n       7     49     343    \n       8     64     512    \n       9     81     729    \n      10    100    1000", RT.keyword(null, "added"), "1.2", RT.keyword(null, "line"), Integer.valueOf(1203), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__352 = (Var)RT.var("clojure.pprint", "fresh-line");
    const__355 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "doc"), "Make a newline if *out* is not already at the beginning of the line. If *out* is\nnot a pretty writer (which keeps track of columns), this function always outputs a newline.", RT.keyword(null, "added"), "1.2", RT.keyword(null, "line"), Integer.valueOf(1245), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__356 = (Var)RT.var("clojure.pprint", "absolute-tabulation");
    const__359 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets")) })), RT.keyword(null, "line"), Integer.valueOf(1255), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__360 = (Var)RT.var("clojure.pprint", "relative-tabulation");
    const__363 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets")) })), RT.keyword(null, "line"), Integer.valueOf(1266), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__366 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets")) })), RT.keyword(null, "line"), Integer.valueOf(1282), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__367 = (Var)RT.var("clojure.pprint", "set-indent");
    const__370 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets")) })), RT.keyword(null, "line"), Integer.valueOf(1300), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__371 = (Var)RT.var("clojure.pprint", "conditional-newline");
    const__374 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "params"), Symbol.intern(null, "navigator"), Symbol.intern(null, "offsets")) })), RT.keyword(null, "line"), Integer.valueOf(1307), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__375 = (Var)RT.var("clojure.pprint", "process-directive-table-element");
    const__378 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Tuple.create(Symbol.intern(null, "char"), Symbol.intern(null, "params"), Symbol.intern(null, "flags"), Symbol.intern(null, "bracket-info"), Symbol.intern(null, "&"), Symbol.intern(null, "generator-fn"))) })), RT.keyword(null, "line"), Integer.valueOf(1320), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__379 = (Var)RT.var("clojure.pprint", "defdirectives");
    const__382 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "directives")) })), RT.keyword(null, "line"), Integer.valueOf(1328), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__383 = (Var)RT.var("clojure.pprint", "directive-table");
    const__385 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "file"), "clojure/pprint/cl_format.clj", RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "line"), Integer.valueOf(1334) });
    const__386 = (Var)RT.var("clojure.core", "hash-map");
    const__387 = Character.valueOf('A');
    const__388 = (Keyword)RT.keyword(null, "directive");
    const__389 = (Var)RT.var("clojure.core", "array-map");
    const__390 = (Keyword)RT.keyword(null, "mincol");
    const__393 = (AFn)Tuple.create(Long.valueOf(0L), RT.classForName("java.lang.Integer"));
    const__394 = (Keyword)RT.keyword(null, "colinc");
    const__396 = (AFn)Tuple.create(Long.valueOf(1L), RT.classForName("java.lang.Integer"));
    const__397 = (Keyword)RT.keyword(null, "minpad");
    const__398 = (AFn)Tuple.create(Long.valueOf(0L), RT.classForName("java.lang.Integer"));
    const__399 = (Keyword)RT.keyword(null, "padchar");
  }
  
  public static void __init4() {
    const__402 = (AFn)Tuple.create(Character.valueOf(' '), RT.classForName("java.lang.Character"));
    const__403 = (Keyword)RT.keyword(null, "flags");
    const__407 = (AFn)PersistentHashSet.create(new Object[] { RT.keyword(null, "colon"), RT.keyword(null, "at"), RT.keyword(null, "both") });
    const__408 = (Keyword)RT.keyword(null, "bracket-info");
    const__409 = (Keyword)RT.keyword(null, "generator-fn");
    const__410 = Character.valueOf('S');
    const__411 = (AFn)Tuple.create(Long.valueOf(0L), RT.classForName("java.lang.Integer"));
    const__412 = (AFn)Tuple.create(Long.valueOf(1L), RT.classForName("java.lang.Integer"));
    const__413 = (AFn)Tuple.create(Long.valueOf(0L), RT.classForName("java.lang.Integer"));
    const__414 = (AFn)Tuple.create(Character.valueOf(' '), RT.classForName("java.lang.Character"));
    const__415 = (AFn)PersistentHashSet.create(new Object[] { RT.keyword(null, "colon"), RT.keyword(null, "at"), RT.keyword(null, "both") });
    const__416 = Character.valueOf('D');
    const__417 = (AFn)Tuple.create(Long.valueOf(0L), RT.classForName("java.lang.Integer"));
    const__418 = (AFn)Tuple.create(Character.valueOf(' '), RT.classForName("java.lang.Character"));
    const__419 = (Keyword)RT.keyword(null, "commachar");
    const__421 = (AFn)Tuple.create(Character.valueOf(','), RT.classForName("java.lang.Character"));
    const__422 = (Keyword)RT.keyword(null, "commainterval");
    const__424 = (AFn)Tuple.create(Long.valueOf(3L), RT.classForName("java.lang.Integer"));
    const__425 = (AFn)PersistentHashSet.create(new Object[] { RT.keyword(null, "colon"), RT.keyword(null, "at"), RT.keyword(null, "both") });
    const__426 = Character.valueOf('B');
    const__427 = (AFn)Tuple.create(Long.valueOf(0L), RT.classForName("java.lang.Integer"));
    const__428 = (AFn)Tuple.create(Character.valueOf(' '), RT.classForName("java.lang.Character"));
    const__429 = (AFn)Tuple.create(Character.valueOf(','), RT.classForName("java.lang.Character"));
    const__430 = (AFn)Tuple.create(Long.valueOf(3L), RT.classForName("java.lang.Integer"));
    const__431 = (AFn)PersistentHashSet.create(new Object[] { RT.keyword(null, "colon"), RT.keyword(null, "at"), RT.keyword(null, "both") });
    const__432 = Character.valueOf('O');
    const__433 = (AFn)Tuple.create(Long.valueOf(0L), RT.classForName("java.lang.Integer"));
    const__434 = (AFn)Tuple.create(Character.valueOf(' '), RT.classForName("java.lang.Character"));
    const__435 = (AFn)Tuple.create(Character.valueOf(','), RT.classForName("java.lang.Character"));
    const__436 = (AFn)Tuple.create(Long.valueOf(3L), RT.classForName("java.lang.Integer"));
    const__437 = (AFn)PersistentHashSet.create(new Object[] { RT.keyword(null, "colon"), RT.keyword(null, "at"), RT.keyword(null, "both") });
    const__438 = Character.valueOf('X');
    const__439 = (AFn)Tuple.create(Long.valueOf(0L), RT.classForName("java.lang.Integer"));
    const__440 = (AFn)Tuple.create(Character.valueOf(' '), RT.classForName("java.lang.Character"));
    const__441 = (AFn)Tuple.create(Character.valueOf(','), RT.classForName("java.lang.Character"));
    const__442 = (AFn)Tuple.create(Long.valueOf(3L), RT.classForName("java.lang.Integer"));
    const__443 = (AFn)PersistentHashSet.create(new Object[] { RT.keyword(null, "colon"), RT.keyword(null, "at"), RT.keyword(null, "both") });
    const__444 = Character.valueOf('R');
    const__445 = (Keyword)RT.keyword(null, "base");
    const__446 = (AFn)Tuple.create(null, RT.classForName("java.lang.Integer"));
    const__447 = (AFn)Tuple.create(Long.valueOf(0L), RT.classForName("java.lang.Integer"));
    const__448 = (AFn)Tuple.create(Character.valueOf(' '), RT.classForName("java.lang.Character"));
    const__449 = (AFn)Tuple.create(Character.valueOf(','), RT.classForName("java.lang.Character"));
    const__450 = (AFn)Tuple.create(Long.valueOf(3L), RT.classForName("java.lang.Integer"));
    const__451 = (AFn)PersistentHashSet.create(new Object[] { RT.keyword(null, "colon"), RT.keyword(null, "at"), RT.keyword(null, "both") });
    const__452 = Character.valueOf('P');
    const__453 = (AFn)PersistentHashSet.create(new Object[] { RT.keyword(null, "colon"), RT.keyword(null, "at"), RT.keyword(null, "both") });
    const__454 = Character.valueOf('C');
    const__455 = (Keyword)RT.keyword(null, "char-format");
    const__456 = (AFn)Tuple.create(null, RT.classForName("java.lang.Character"));
    const__457 = (AFn)PersistentHashSet.create(new Object[] { RT.keyword(null, "colon"), RT.keyword(null, "at"), RT.keyword(null, "both") });
    const__458 = Character.valueOf('F');
    const__459 = (Keyword)RT.keyword(null, "w");
    const__460 = (AFn)Tuple.create(null, RT.classForName("java.lang.Integer"));
    const__461 = (Keyword)RT.keyword(null, "d");
    const__462 = (AFn)Tuple.create(null, RT.classForName("java.lang.Integer"));
    const__463 = (Keyword)RT.keyword(null, "k");
    const__464 = (AFn)Tuple.create(Long.valueOf(0L), RT.classForName("java.lang.Integer"));
    const__465 = (Keyword)RT.keyword(null, "overflowchar");
    const__466 = (AFn)Tuple.create(null, RT.classForName("java.lang.Character"));
    const__467 = (AFn)Tuple.create(Character.valueOf(' '), RT.classForName("java.lang.Character"));
    const__468 = (AFn)PersistentHashSet.create(new Object[] { RT.keyword(null, "at") });
    const__469 = Character.valueOf('E');
    const__470 = (AFn)Tuple.create(null, RT.classForName("java.lang.Integer"));
    const__471 = (AFn)Tuple.create(null, RT.classForName("java.lang.Integer"));
    const__472 = (Keyword)RT.keyword(null, "e");
    const__473 = (AFn)Tuple.create(null, RT.classForName("java.lang.Integer"));
    const__474 = (AFn)Tuple.create(Long.valueOf(1L), RT.classForName("java.lang.Integer"));
    const__475 = (AFn)Tuple.create(null, RT.classForName("java.lang.Character"));
    const__476 = (AFn)Tuple.create(Character.valueOf(' '), RT.classForName("java.lang.Character"));
    const__477 = (Keyword)RT.keyword(null, "exponentchar");
    const__478 = (AFn)Tuple.create(null, RT.classForName("java.lang.Character"));
    const__479 = (AFn)PersistentHashSet.create(new Object[] { RT.keyword(null, "at") });
    const__480 = Character.valueOf('G');
    const__481 = (AFn)Tuple.create(null, RT.classForName("java.lang.Integer"));
    const__482 = (AFn)Tuple.create(null, RT.classForName("java.lang.Integer"));
    const__483 = (AFn)Tuple.create(null, RT.classForName("java.lang.Integer"));
    const__484 = (AFn)Tuple.create(Long.valueOf(1L), RT.classForName("java.lang.Integer"));
    const__485 = (AFn)Tuple.create(null, RT.classForName("java.lang.Character"));
    const__486 = (AFn)Tuple.create(Character.valueOf(' '), RT.classForName("java.lang.Character"));
    const__487 = (AFn)Tuple.create(null, RT.classForName("java.lang.Character"));
    const__488 = (AFn)PersistentHashSet.create(new Object[] { RT.keyword(null, "at") });
    const__489 = Character.valueOf('$');
    const__490 = (AFn)Tuple.create(Long.valueOf(2L), RT.classForName("java.lang.Integer"));
    const__491 = (Keyword)RT.keyword(null, "n");
    const__492 = (AFn)Tuple.create(Long.valueOf(1L), RT.classForName("java.lang.Integer"));
    const__493 = (AFn)Tuple.create(Long.valueOf(0L), RT.classForName("java.lang.Integer"));
    const__494 = (AFn)Tuple.create(Character.valueOf(' '), RT.classForName("java.lang.Character"));
    const__495 = (AFn)PersistentHashSet.create(new Object[] { RT.keyword(null, "colon"), RT.keyword(null, "at"), RT.keyword(null, "both") });
    const__496 = Character.valueOf('%');
    const__497 = (Keyword)RT.keyword(null, "count");
    const__498 = (AFn)Tuple.create(Long.valueOf(1L), RT.classForName("java.lang.Integer"));
    const__499 = Character.valueOf('&');
  }
  
  public static void __init5() {
    const__500 = (AFn)Tuple.create(Long.valueOf(1L), RT.classForName("java.lang.Integer"));
    const__502 = (AFn)PersistentHashSet.create(new Object[] { RT.keyword(null, "pretty") });
    const__503 = Character.valueOf('|');
    const__504 = (AFn)Tuple.create(Long.valueOf(1L), RT.classForName("java.lang.Integer"));
    const__505 = Character.valueOf('~');
    const__506 = (AFn)Tuple.create(Long.valueOf(1L), RT.classForName("java.lang.Integer"));
    const__507 = Character.valueOf('\n');
    const__508 = (AFn)PersistentHashSet.create(new Object[] { RT.keyword(null, "colon"), RT.keyword(null, "at") });
    const__509 = Character.valueOf('T');
    const__510 = (Keyword)RT.keyword(null, "colnum");
    const__511 = (AFn)Tuple.create(Long.valueOf(1L), RT.classForName("java.lang.Integer"));
    const__512 = (AFn)Tuple.create(Long.valueOf(1L), RT.classForName("java.lang.Integer"));
    const__513 = (AFn)PersistentHashSet.create(new Object[] { RT.keyword(null, "at"), RT.keyword(null, "pretty") });
    const__514 = Character.valueOf('*');
    const__515 = (AFn)Tuple.create(null, RT.classForName("java.lang.Integer"));
    const__516 = (AFn)PersistentHashSet.create(new Object[] { RT.keyword(null, "colon"), RT.keyword(null, "at") });
    const__517 = Character.valueOf('?');
    const__518 = (AFn)PersistentHashSet.create(new Object[] { RT.keyword(null, "at") });
    const__519 = Character.valueOf('(');
    const__520 = (AFn)PersistentHashSet.create(new Object[] { RT.keyword(null, "colon"), RT.keyword(null, "at"), RT.keyword(null, "both") });
    const__522 = Character.valueOf(')');
    const__525 = (AFn)RT.map(new Object[] { RT.keyword(null, "right"), Character.valueOf(')'), RT.keyword(null, "allows-separator"), null, RT.keyword(null, "else"), null });
    const__526 = Character.valueOf('[');
    const__527 = (Keyword)RT.keyword(null, "selector");
    const__528 = (AFn)Tuple.create(null, RT.classForName("java.lang.Integer"));
    const__529 = (AFn)PersistentHashSet.create(new Object[] { RT.keyword(null, "colon"), RT.keyword(null, "at") });
    const__530 = Character.valueOf(']');
    const__532 = (AFn)RT.map(new Object[] { RT.keyword(null, "right"), Character.valueOf(']'), RT.keyword(null, "allows-separator"), Boolean.TRUE, RT.keyword(null, "else"), RT.keyword(null, "last") });
    const__533 = Character.valueOf(';');
    const__534 = (Keyword)RT.keyword(null, "min-remaining");
    const__535 = (AFn)Tuple.create(null, RT.classForName("java.lang.Integer"));
    const__536 = (Keyword)RT.keyword(null, "max-columns");
    const__537 = (AFn)Tuple.create(null, RT.classForName("java.lang.Integer"));
    const__538 = (AFn)PersistentHashSet.create(new Object[] { RT.keyword(null, "colon") });
    const__540 = (AFn)RT.map(new Object[] { RT.keyword(null, "separator"), Boolean.TRUE });
    const__541 = Character.valueOf('{');
    const__542 = (Keyword)RT.keyword(null, "max-iterations");
    const__543 = (AFn)Tuple.create(null, RT.classForName("java.lang.Integer"));
    const__544 = (AFn)PersistentHashSet.create(new Object[] { RT.keyword(null, "colon"), RT.keyword(null, "at"), RT.keyword(null, "both") });
    const__545 = Character.valueOf('}');
    const__546 = (AFn)RT.map(new Object[] { RT.keyword(null, "right"), Character.valueOf('}'), RT.keyword(null, "allows-separator"), Boolean.FALSE });
    const__547 = (AFn)PersistentHashSet.create(new Object[] { RT.keyword(null, "colon") });
    const__548 = Character.valueOf('<');
    const__549 = (AFn)Tuple.create(Long.valueOf(0L), RT.classForName("java.lang.Integer"));
    const__550 = (AFn)Tuple.create(Long.valueOf(1L), RT.classForName("java.lang.Integer"));
    const__551 = (AFn)Tuple.create(Long.valueOf(0L), RT.classForName("java.lang.Integer"));
    const__552 = (AFn)Tuple.create(Character.valueOf(' '), RT.classForName("java.lang.Character"));
    const__553 = (AFn)PersistentHashSet.create(new Object[] { RT.keyword(null, "colon"), RT.keyword(null, "at"), RT.keyword(null, "both"), RT.keyword(null, "pretty") });
    const__554 = Character.valueOf('>');
    const__556 = (AFn)RT.map(new Object[] { RT.keyword(null, "right"), Character.valueOf('>'), RT.keyword(null, "allows-separator"), Boolean.TRUE, RT.keyword(null, "else"), RT.keyword(null, "first") });
    const__557 = (AFn)PersistentHashSet.create(new Object[] { RT.keyword(null, "colon") });
    const__558 = Character.valueOf('^');
    const__559 = (Keyword)RT.keyword(null, "arg1");
    const__560 = (AFn)Tuple.create(null, RT.classForName("java.lang.Integer"));
    const__561 = (Keyword)RT.keyword(null, "arg2");
    const__562 = (AFn)Tuple.create(null, RT.classForName("java.lang.Integer"));
    const__563 = (Keyword)RT.keyword(null, "arg3");
    const__564 = (AFn)Tuple.create(null, RT.classForName("java.lang.Integer"));
    const__565 = (AFn)PersistentHashSet.create(new Object[] { RT.keyword(null, "colon") });
    const__566 = Character.valueOf('W');
    const__567 = (AFn)PersistentHashSet.create(new Object[] { RT.keyword(null, "colon"), RT.keyword(null, "at"), RT.keyword(null, "both"), RT.keyword(null, "pretty") });
    const__568 = Character.valueOf('_');
    const__569 = (AFn)PersistentHashSet.create(new Object[] { RT.keyword(null, "colon"), RT.keyword(null, "at"), RT.keyword(null, "both") });
    const__570 = Character.valueOf('I');
    const__571 = (AFn)Tuple.create(Long.valueOf(0L), RT.classForName("java.lang.Integer"));
    const__572 = (AFn)PersistentHashSet.create(new Object[] { RT.keyword(null, "colon") });
    const__573 = (Var)RT.var("clojure.pprint", "param-pattern");
    const__575 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(1620), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__576 = Pattern.compile("^([vV]|#|('.)|([+-]?\\d+)|(?=,))");
    const__577 = (Var)RT.var("clojure.pprint", "special-params");
    const__579 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(1622), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__582 = (AFn)PersistentHashSet.create(new Object[] { RT.keyword(null, "remaining-arg-count"), RT.keyword(null, "parameter-from-args") });
    const__583 = (Var)RT.var("clojure.pprint", "extract-param");
    const__586 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Tuple.create(Symbol.intern(null, "s"), Symbol.intern(null, "offset"), Symbol.intern(null, "saw-comma"))) })), RT.keyword(null, "line"), Integer.valueOf(1625), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__587 = (Var)RT.var("clojure.pprint", "extract-params");
    const__590 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s"), Symbol.intern(null, "offset")) })), RT.keyword(null, "line"), Integer.valueOf(1640), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__591 = (Var)RT.var("clojure.pprint", "translate-param");
    const__594 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Tuple.create(((IObj)Symbol.intern(null, "p")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") })), Symbol.intern(null, "offset"))) })), RT.keyword(null, "doc"), "Translate the string representation of a param to the internalized\n                                      representation", RT.keyword(null, "line"), Integer.valueOf(1643), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__595 = (Var)RT.var("clojure.pprint", "flag-defs");
    const__597 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(1655), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
  }
  
  public static void __init6() {
    const__600 = (AFn)RT.map(new Object[] { Character.valueOf(':'), RT.keyword(null, "colon"), Character.valueOf('@'), RT.keyword(null, "at") });
    const__601 = (Var)RT.var("clojure.pprint", "extract-flags");
    const__604 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s"), Symbol.intern(null, "offset")) })), RT.keyword(null, "line"), Integer.valueOf(1658), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__605 = (Var)RT.var("clojure.pprint", "check-flags");
    const__608 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "def"), Symbol.intern(null, "flags")) })), RT.keyword(null, "line"), Integer.valueOf(1673), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__609 = (Var)RT.var("clojure.pprint", "map-params");
    const__612 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "def"), Symbol.intern(null, "params"), Symbol.intern(null, "flags"), Symbol.intern(null, "offset")) })), RT.keyword(null, "doc"), "Takes a directive definition and the list of actual parameters and\na map of flags and returns a map of the parameters and flags with defaults\nfilled in. We check to make sure that there are the right types and number\nof parameters as well.", RT.keyword(null, "line"), Integer.valueOf(1686), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__613 = (Var)RT.var("clojure.pprint", "compile-directive");
    const__616 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s"), Symbol.intern(null, "offset")) })), RT.keyword(null, "line"), Integer.valueOf(1716), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__617 = (Var)RT.var("clojure.pprint", "compile-raw-string");
    const__620 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s"), Symbol.intern(null, "offset")) })), RT.keyword(null, "line"), Integer.valueOf(1736), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__621 = (Var)RT.var("clojure.pprint", "right-bracket");
    const__624 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })), RT.keyword(null, "line"), Integer.valueOf(1739), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__625 = (Var)RT.var("clojure.pprint", "separator?");
    const__628 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })), RT.keyword(null, "line"), Integer.valueOf(1740), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__629 = (Var)RT.var("clojure.pprint", "else-separator?");
    const__632 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })), RT.keyword(null, "line"), Integer.valueOf(1741), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__633 = (Var)RT.var("clojure.pprint", "collect-clauses");
    const__635 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(1746), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__636 = (Var)RT.var("clojure.pprint", "process-bracket");
    const__639 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "remainder")) })), RT.keyword(null, "line"), Integer.valueOf(1748), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__640 = (Var)RT.var("clojure.pprint", "process-clause");
    const__643 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "bracket-info"), Symbol.intern(null, "offset"), Symbol.intern(null, "remainder")) })), RT.keyword(null, "line"), Integer.valueOf(1757), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__646 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "bracket-info"), Symbol.intern(null, "offset"), Symbol.intern(null, "remainder")) })), RT.keyword(null, "line"), Integer.valueOf(1781), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__647 = (Var)RT.var("clojure.pprint", "process-nesting");
    const__650 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "format")) })), RT.keyword(null, "doc"), "Take a linearly compiled format and process the bracket directives to give it \n   the appropriate tree structure", RT.keyword(null, "line"), Integer.valueOf(1830), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__653 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "format-str")) })), RT.keyword(null, "doc"), "Compiles format-str into a compiled format which can be used as an argument\nto cl-format just like a plain format string. Use this function for improved \nperformance when you're using the same format string repeatedly", RT.keyword(null, "line"), Integer.valueOf(1845), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__654 = (Var)RT.var("clojure.pprint", "needs-pretty");
    const__657 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "format")) })), RT.keyword(null, "doc"), "determine whether a given compiled format has any directives that depend on the\ncolumn number or pretty printing", RT.keyword(null, "line"), Integer.valueOf(1866), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__660 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "stream"), Symbol.intern(null, "format"), Symbol.intern(null, "args")), Tuple.create(Symbol.intern(null, "format"), Symbol.intern(null, "args")) })), RT.keyword(null, "doc"), "Executes the format with the arguments.", RT.keyword(null, "skip-wiki"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(1879), 
          RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__661 = (Var)RT.var("clojure.pprint", "cached-compile");
    const__663 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(1914), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__664 = (Var)RT.var("clojure.core", "memoize");
    const__665 = (Var)RT.var("clojure.pprint", "formatter");
    const__668 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "format-in")) })), RT.keyword(null, "doc"), "Makes a function which can directly run format-in. The function is\nfn [stream & args] ... and returns nil unless the stream is nil (meaning \noutput to a string) in which case it returns the resulting string.\n\nformat-in can be either a control string or a previously compiled format.", RT.keyword(null, "added"), "1.2", RT.keyword(null, "line"), Integer.valueOf(1916), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
    const__669 = (Var)RT.var("clojure.pprint", "formatter-out");
    const__672 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "format-in")) })), RT.keyword(null, "doc"), "Makes a function which can directly run format-in. The function is\nfn [& args] ... and returns nil. This version of the formatter macro is\ndesigned to be used with *out* set to an appropriate Writer. In particular,\nthis is meant to be used as part of a pretty printer dispatch method.\n\nformat-in can be either a control string or a previously compiled format.", RT.keyword(null, "added"), "1.2", RT.keyword(null, "line"), Integer.valueOf(1936), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/pprint/cl_format.clj" });
  }
  
  static  {
    __init0();
    __init1();
    __init2();
    __init3();
    __init4();
    __init5();
    __init6();
    Compiler.pushNSandLoader(RT.classForName("clojure.pprint.cl_format__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
