package clojure.pprint;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.Keyword;
import clojure.lang.PersistentArrayMap;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import clojure.pprint;
import java.util.Arrays;

public class dispatch__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final Var const__2;
  
  public static final AFn const__12;
  
  public static final Var const__13;
  
  public static final AFn const__15;
  
  public static final AFn const__20;
  
  public static final Var const__21;
  
  public static final AFn const__24;
  
  public static final Var const__25;
  
  public static final AFn const__28;
  
  public static final Var const__29;
  
  public static final AFn const__32;
  
  public static final Var const__33;
  
  public static final AFn const__36;
  
  public static final Var const__37;
  
  public static final AFn const__39;
  
  public static final Var const__40;
  
  public static final AFn const__43;
  
  public static final Var const__44;
  
  public static final AFn const__46;
  
  public static final Var const__47;
  
  public static final AFn const__49;
  
  public static final AFn const__50;
  
  public static final Var const__51;
  
  public static final AFn const__54;
  
  public static final Var const__55;
  
  public static final AFn const__58;
  
  public static final Var const__59;
  
  public static final AFn const__61;
  
  public static final Var const__62;
  
  public static final AFn const__65;
  
  public static final Var const__66;
  
  public static final Object const__67;
  
  public static final Object const__68;
  
  public static final Object const__69;
  
  public static final Object const__70;
  
  public static final Object const__71;
  
  public static final Object const__72;
  
  public static final Object const__73;
  
  public static final Var const__74;
  
  public static final Keyword const__75;
  
  public static final Var const__76;
  
  public static final AFn const__79;
  
  public static final Var const__80;
  
  public static final AFn const__83;
  
  public static final Var const__84;
  
  public static final AFn const__87;
  
  public static final Var const__88;
  
  public static final AFn const__91;
  
  public static final Var const__92;
  
  public static final AFn const__94;
  
  public static final Var const__95;
  
  public static final AFn const__98;
  
  public static final Var const__99;
  
  public static final AFn const__102;
  
  public static final Var const__103;
  
  public static final AFn const__106;
  
  public static final Var const__107;
  
  public static final AFn const__110;
  
  public static final Var const__111;
  
  public static final AFn const__114;
  
  public static final Var const__115;
  
  public static final AFn const__117;
  
  public static final Var const__118;
  
  public static final AFn const__121;
  
  public static final Var const__122;
  
  public static final AFn const__125;
  
  public static final Var const__126;
  
  public static final AFn const__129;
  
  public static final Var const__130;
  
  public static final AFn const__133;
  
  public static final AFn const__136;
  
  public static final Var const__137;
  
  public static final AFn const__140;
  
  public static final Var const__141;
  
  public static final AFn const__144;
  
  public static final Var const__145;
  
  public static final AFn const__147;
  
  public static final AFn const__148;
  
  public static final AFn const__149;
  
  public static final AFn const__150;
  
  public static final AFn const__151;
  
  public static final AFn const__152;
  
  public static final AFn const__153;
  
  public static final AFn const__154;
  
  public static final AFn const__155;
  
  public static final AFn const__156;
  
  public static final AFn const__157;
  
  public static final AFn const__158;
  
  public static final AFn const__159;
  
  public static final AFn const__160;
  
  public static final AFn const__161;
  
  public static final AFn const__162;
  
  public static final AFn const__163;
  
  public static final AFn const__164;
  
  public static final AFn const__165;
  
  public static final AFn const__166;
  
  public static final AFn const__167;
  
  public static final AFn const__168;
  
  public static final AFn const__169;
  
  public static final AFn const__170;
  
  public static final AFn const__171;
  
  public static final AFn const__172;
  
  public static final AFn const__173;
  
  public static final AFn const__174;
  
  public static final AFn const__175;
  
  public static final AFn const__176;
  
  public static final AFn const__177;
  
  public static final Var const__178;
  
  public static final AFn const__181;
  
  public static final Var const__182;
  
  public static final AFn const__185;
  
  public static final Var const__186;
  
  public static final Object const__187;
  
  public static final Var const__188;
  
  public static void load() {
    const__2.setMeta((IPersistentMap)const__12);
    const__2.bindRoot(new pprint.use_method());
    const__13.setMeta((IPersistentMap)const__15);
    const__13.bindRoot(const__20);
    const__21.setMeta((IPersistentMap)const__24);
    const__21.bindRoot(new pprint.pprint_reader_macro());
    const__25.setMeta((IPersistentMap)const__28);
    const__25.bindRoot(new pprint.pprint_simple_list());
    const__29.setMeta((IPersistentMap)const__32);
    const__29.bindRoot(new pprint.pprint_list());
    const__33.setMeta((IPersistentMap)const__36);
    const__33.bindRoot(new pprint.pprint_vector());
    const__37.setMeta((IPersistentMap)const__39);
    const__37







































































      
      .bindRoot(((IFn)new pprint.fn__11018()).invoke());
    const__40.setMeta((IPersistentMap)const__43);
    const__40.bindRoot(new pprint.pprint_map());
    const__44.setMeta((IPersistentMap)const__46);
    const__44




















      
      .bindRoot(((IFn)new pprint.fn__11036()).invoke());
    const__47.setMeta((IPersistentMap)const__49);
    const__47.bindRoot(const__50);
    const__51.setMeta((IPersistentMap)const__54);
    const__51.bindRoot(new pprint.map_ref_type());
    const__55.setMeta((IPersistentMap)const__58);
    const__55.bindRoot(new pprint.pprint_ideref());
    const__59.setMeta((IPersistentMap)const__61);
    const__59



























      
      .bindRoot(((IFn)new pprint.fn__11052()).invoke());
    const__62.setMeta((IPersistentMap)const__65);
    const__62.bindRoot(new pprint.pprint_simple_default());
    const__76.setMeta((IPersistentMap)const__79);
    const__80.setMeta((IPersistentMap)const__83);
    const__80.bindRoot(new pprint.brackets());
    const__84.setMeta((IPersistentMap)const__87);
    const__84.bindRoot(new pprint.pprint_ns_reference());
    const__88.setMeta((IPersistentMap)const__91);
    const__88.bindRoot(new pprint.pprint_ns());
    const__92.setMeta((IPersistentMap)const__94);
    const__92




















































































      
      .bindRoot(((IFn)new pprint.fn__11150()).invoke());
    const__95.setMeta((IPersistentMap)const__98);
    const__95.bindRoot(new pprint.single_defn());
    const__99.setMeta((IPersistentMap)const__102);
    const__99.bindRoot(new pprint.multi_defn());
    const__103.setMeta((IPersistentMap)const__106);
    const__103.bindRoot(new pprint.pprint_defn());
    const__107.setMeta((IPersistentMap)const__110);
    const__107.bindRoot(new pprint.pprint_binding_form());
    const__111.setMeta((IPersistentMap)const__114);
    const__111.bindRoot(new pprint.pprint_let());
    const__115.setMeta((IPersistentMap)const__117);
    const__115











































































      
      .bindRoot(((IFn)new pprint.fn__11229()).invoke());
    const__118.setMeta((IPersistentMap)const__121);
    const__118.bindRoot(new pprint.pprint_cond());
    const__122.setMeta((IPersistentMap)const__125);
    const__122.bindRoot(new pprint.pprint_condp());
    const__126.setDynamic(true).setMeta((IPersistentMap)const__129);
    const__126.setDynamic(true).bindRoot(PersistentArrayMap.EMPTY);
    const__130.setMeta((IPersistentMap)const__133);
    const__130.bindRoot(new pprint.pprint_anon_func());
    const__76.setMeta((IPersistentMap)const__136);
    const__76.bindRoot(new pprint.pprint_simple_code_list());
    const__137.setMeta((IPersistentMap)const__140);
    const__137.bindRoot(new pprint.two_forms());
    const__141.setMeta((IPersistentMap)const__144);
    const__141.bindRoot(new pprint.add_core_ns());
    const__145.setDynamic(true).setMeta((IPersistentMap)const__147);
    const__145.setDynamic(true)






























































































      
      .bindRoot(((IFn)const__137.getRawRoot()).invoke(((IFn)const__141.getRawRoot())
          .invoke(RT.mapUniqueKeys(new Object[] { 
                const__148, const__92.getRawRoot(), const__149, const__130.getRawRoot(), const__150, const__111.getRawRoot(), const__151, const__115.getRawRoot(), const__152, const__122.getRawRoot(), 
                const__153, const__92.getRawRoot(), const__154, const__103.getRawRoot(), const__155, const__103.getRawRoot(), const__156, const__111.getRawRoot(), const__157, const__92.getRawRoot(), 
                const__158, const__111.getRawRoot(), const__159, const__115.getRawRoot(), const__160, const__115.getRawRoot(), const__161, const__92.getRawRoot(), const__162, const__115.getRawRoot(), 
                const__163, const__111.getRawRoot(), const__164, const__111.getRawRoot(), const__165, const__92.getRawRoot(), const__166, const__111.getRawRoot(), const__167, const__88.getRawRoot(), 
                const__168, const__111.getRawRoot(), const__169, const__118.getRawRoot(), const__170, const__111.getRawRoot(), const__171, const__103.getRawRoot(), const__172, const__103.getRawRoot(), 
                const__173, const__92.getRawRoot(), const__174, const__92.getRawRoot(), const__175, const__111.getRawRoot(), const__176, const__111.getRawRoot(), const__177, const__92.getRawRoot() }))));
    const__178.setMeta((IPersistentMap)const__181);
    const__178.bindRoot(new pprint.pprint_code_list());
    const__182.setMeta((IPersistentMap)const__185);
    const__182.bindRoot(new pprint.pprint_code_symbol());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "clojure.pprint");
    const__2 = (Var)RT.var("clojure.pprint", "use-method");
    const__12 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "multifn")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "clojure.lang.MultiFn") })), Symbol.intern(null, "dispatch-val"), Symbol.intern(null, "func")) })), RT.keyword(null, "doc"), "Installs a function as a new method of multimethod associated with dispatch-value. ", RT.keyword(null, "line"), Integer.valueOf(20), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/pprint/dispatch.clj" });
    const__13 = (Var)RT.var("clojure.pprint", "reader-macros");
    const__15 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(45), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/dispatch.clj" });
    const__20 = (AFn)RT.map(new Object[] { Symbol.intern(null, "quote"), "'", Symbol.intern("clojure.core", "deref"), "@", Symbol.intern(null, "var"), "#'", Symbol.intern("clojure.core", "unquote"), "~" });
    const__21 = (Var)RT.var("clojure.pprint", "pprint-reader-macro");
    const__24 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "alis")) })), RT.keyword(null, "line"), Integer.valueOf(49), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/dispatch.clj" });
    const__25 = (Var)RT.var("clojure.pprint", "pprint-simple-list");
    const__28 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "alis")) })), RT.keyword(null, "line"), Integer.valueOf(66), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/dispatch.clj" });
    const__29 = (Var)RT.var("clojure.pprint", "pprint-list");
    const__32 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "alis")) })), RT.keyword(null, "line"), Integer.valueOf(76), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/dispatch.clj" });
    const__33 = (Var)RT.var("clojure.pprint", "pprint-vector");
    const__36 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "avec")) })), RT.keyword(null, "line"), Integer.valueOf(81), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/dispatch.clj" });
    const__37 = (Var)RT.var("clojure.pprint", "pprint-array");
    const__39 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(91), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/dispatch.clj" });
    const__40 = (Var)RT.var("clojure.pprint", "pprint-map");
    const__43 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "amap")) })), RT.keyword(null, "line"), Integer.valueOf(94), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/dispatch.clj" });
    const__44 = (Var)RT.var("clojure.pprint", "pprint-set");
    const__46 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(113), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/dispatch.clj" });
    const__47 = (Var)RT.var("clojure.pprint", "type-map");
    const__49 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(115), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/dispatch.clj" });
    const__50 = (AFn)RT.map(new Object[] { "core$future_call", "Future", "core$promise", "Promise" });
    const__51 = (Var)RT.var("clojure.pprint", "map-ref-type");
    const__54 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "name")) })), RT.keyword(null, "doc"), "Map ugly type names to something simpler", RT.keyword(null, "line"), Integer.valueOf(119), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/pprint/dispatch.clj" });
    const__55 = (Var)RT.var("clojure.pprint", "pprint-ideref");
    const__58 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "o")) })), RT.keyword(null, "line"), Integer.valueOf(126), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/dispatch.clj" });
    const__59 = (Var)RT.var("clojure.pprint", "pprint-pqueue");
    const__61 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(142), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/dispatch.clj" });
    const__62 = (Var)RT.var("clojure.pprint", "pprint-simple-default");
    const__65 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "obj")) })), RT.keyword(null, "line"), Integer.valueOf(144), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/dispatch.clj" });
    const__66 = (Var)RT.var("clojure.pprint", "simple-dispatch");
    const__67 = RT.classForName("clojure.lang.ISeq");
    const__68 = RT.classForName("clojure.lang.IPersistentVector");
    const__69 = RT.classForName("clojure.lang.IPersistentMap");
    const__70 = RT.classForName("clojure.lang.IPersistentSet");
    const__71 = RT.classForName("clojure.lang.PersistentQueue");
    const__72 = RT.classForName("clojure.lang.Var");
    const__73 = RT.classForName("clojure.lang.IDeref");
    const__74 = (Var)RT.var("clojure.core", "pr");
    const__75 = (Keyword)RT.keyword(null, "default");
    const__76 = (Var)RT.var("clojure.pprint", "pprint-simple-code-list");
    const__79 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(171), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/dispatch.clj" });
    const__80 = (Var)RT.var("clojure.pprint", "brackets");
    const__83 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "form")) })), RT.keyword(null, "doc"), "Figure out which kind of brackets to use", RT.keyword(null, "line"), Integer.valueOf(179), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/pprint/dispatch.clj" });
    const__84 = (Var)RT.var("clojure.pprint", "pprint-ns-reference");
    const__87 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "reference")) })), RT.keyword(null, "doc"), "Pretty print a single reference (import, use, etc.) from a namespace decl", RT.keyword(null, "line"), Integer.valueOf(186), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/pprint/dispatch.clj" });
    const__88 = (Var)RT.var("clojure.pprint", "pprint-ns");
    const__91 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "alis")) })), RT.keyword(null, "doc"), "The pretty print dispatch chunk for the ns macro", RT.keyword(null, "line"), Integer.valueOf(220), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/pprint/dispatch.clj" });
    const__92 = (Var)RT.var("clojure.pprint", "pprint-hold-first");
    const__94 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(251), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/dispatch.clj" });
    const__95 = (Var)RT.var("clojure.pprint", "single-defn");
    const__98 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "alis"), Symbol.intern(null, "has-doc-str?")) })), RT.keyword(null, "line"), Integer.valueOf(258), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/dispatch.clj" });
    const__99 = (Var)RT.var("clojure.pprint", "multi-defn");
  }
  
  public static void __init1() {
    const__102 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "alis"), Symbol.intern(null, "has-doc-str?")) })), RT.keyword(null, "line"), Integer.valueOf(267), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/dispatch.clj" });
    const__103 = (Var)RT.var("clojure.pprint", "pprint-defn");
    const__106 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "alis")) })), RT.keyword(null, "line"), Integer.valueOf(273), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/dispatch.clj" });
    const__107 = (Var)RT.var("clojure.pprint", "pprint-binding-form");
    const__110 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "binding-vec")) })), RT.keyword(null, "line"), Integer.valueOf(298), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/dispatch.clj" });
    const__111 = (Var)RT.var("clojure.pprint", "pprint-let");
    const__114 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "alis")) })), RT.keyword(null, "line"), Integer.valueOf(313), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/dispatch.clj" });
    const__115 = (Var)RT.var("clojure.pprint", "pprint-if");
    const__117 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(328), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/dispatch.clj" });
    const__118 = (Var)RT.var("clojure.pprint", "pprint-cond");
    const__121 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "alis")) })), RT.keyword(null, "line"), Integer.valueOf(330), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/dispatch.clj" });
    const__122 = (Var)RT.var("clojure.pprint", "pprint-condp");
    const__125 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "alis")) })), RT.keyword(null, "line"), Integer.valueOf(350), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/dispatch.clj" });
    const__126 = (Var)RT.var("clojure.pprint", "*symbol-map*");
    const__129 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(370), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/dispatch.clj" });
    const__130 = (Var)RT.var("clojure.pprint", "pprint-anon-func");
    const__133 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "alis")) })), RT.keyword(null, "line"), Integer.valueOf(372), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/dispatch.clj" });
    const__136 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "alis")) })), RT.keyword(null, "line"), Integer.valueOf(394), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/dispatch.clj" });
    const__137 = (Var)RT.var("clojure.pprint", "two-forms");
    const__140 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "amap")) })), RT.keyword(null, "line"), Integer.valueOf(407), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/dispatch.clj" });
    const__141 = (Var)RT.var("clojure.pprint", "add-core-ns");
    const__144 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "amap")) })), RT.keyword(null, "line"), Integer.valueOf(414), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/dispatch.clj" });
    const__145 = (Var)RT.var("clojure.pprint", "*code-table*");
    const__147 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(423), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/dispatch.clj" });
    const__148 = (AFn)Symbol.intern(null, ".");
    const__149 = (AFn)Symbol.intern(null, "fn*");
    const__150 = (AFn)Symbol.intern(null, "when-first");
    const__151 = (AFn)Symbol.intern(null, "if");
    const__152 = (AFn)Symbol.intern(null, "condp");
    const__153 = (AFn)Symbol.intern(null, "..");
    const__154 = (AFn)Symbol.intern(null, "defmacro");
    const__155 = (AFn)Symbol.intern(null, "defn");
    const__156 = (AFn)Symbol.intern(null, "loop");
    const__157 = (AFn)Symbol.intern(null, "struct");
    const__158 = (AFn)Symbol.intern(null, "doseq");
    const__159 = (AFn)Symbol.intern(null, "if-not");
    const__160 = (AFn)Symbol.intern(null, "when-not");
    const__161 = (AFn)Symbol.intern(null, "def");
    const__162 = (AFn)Symbol.intern(null, "when");
    const__163 = (AFn)Symbol.intern(null, "with-open");
    const__164 = (AFn)Symbol.intern(null, "with-local-vars");
    const__165 = (AFn)Symbol.intern(null, "defonce");
    const__166 = (AFn)Symbol.intern(null, "when-let");
    const__167 = (AFn)Symbol.intern(null, "ns");
    const__168 = (AFn)Symbol.intern(null, "dotimes");
    const__169 = (AFn)Symbol.intern(null, "cond");
    const__170 = (AFn)Symbol.intern(null, "let");
    const__171 = (AFn)Symbol.intern(null, "fn");
    const__172 = (AFn)Symbol.intern(null, "defn-");
    const__173 = (AFn)Symbol.intern(null, "locking");
    const__174 = (AFn)Symbol.intern(null, "->");
    const__175 = (AFn)Symbol.intern(null, "if-let");
    const__176 = (AFn)Symbol.intern(null, "binding");
    const__177 = (AFn)Symbol.intern(null, "struct-map");
    const__178 = (Var)RT.var("clojure.pprint", "pprint-code-list");
    const__181 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "alis")) })), RT.keyword(null, "line"), Integer.valueOf(440), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/dispatch.clj" });
    const__182 = (Var)RT.var("clojure.pprint", "pprint-code-symbol");
    const__185 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "sym")) })), RT.keyword(null, "line"), Integer.valueOf(446), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/pprint/dispatch.clj" });
    const__186 = (Var)RT.var("clojure.pprint", "code-dispatch");
    const__187 = RT.classForName("clojure.lang.Symbol");
    const__188 = (Var)RT.var("clojure.pprint", "set-pprint-dispatch");
  }
  
  static  {
    __init0();
    __init1();
    Compiler.pushNSandLoader(RT.classForName("clojure.pprint.dispatch__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
