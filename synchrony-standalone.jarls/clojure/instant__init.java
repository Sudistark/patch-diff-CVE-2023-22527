package clojure;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;
import java.util.regex.Pattern;

public class instant__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final Var const__4;
  
  public static final AFn const__13;
  
  public static final Var const__14;
  
  public static final AFn const__17;
  
  public static final Var const__18;
  
  public static final AFn const__21;
  
  public static final Var const__22;
  
  public static final AFn const__25;
  
  public static final Var const__26;
  
  public static final AFn const__29;
  
  public static final Var const__30;
  
  public static final AFn const__33;
  
  public static final Var const__34;
  
  public static final AFn const__36;
  
  public static final Object const__37;
  
  public static final Var const__38;
  
  public static final AFn const__42;
  
  public static final Var const__43;
  
  public static final AFn const__46;
  
  public static final Var const__47;
  
  public static final AFn const__49;
  
  public static final Var const__50;
  
  public static final AFn const__53;
  
  public static final Var const__54;
  
  public static final AFn const__58;
  
  public static final Var const__59;
  
  public static final AFn const__62;
  
  public static final Var const__63;
  
  public static final Object const__64;
  
  public static final Var const__65;
  
  public static final Var const__66;
  
  public static final AFn const__69;
  
  public static final Object const__70;
  
  public static final Var const__71;
  
  public static final AFn const__73;
  
  public static final Var const__74;
  
  public static final AFn const__77;
  
  public static final Object const__78;
  
  public static final Var const__79;
  
  public static final AFn const__82;
  
  public static final Var const__83;
  
  public static final AFn const__86;
  
  public static final Var const__87;
  
  public static final AFn const__90;
  
  public static final Var const__91;
  
  public static final AFn const__94;
  
  public static final Var const__95;
  
  public static final AFn const__98;
  
  public static final Var const__99;
  
  public static final AFn const__102;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new instant.fn__8336());
    const__4.setMeta((IPersistentMap)const__13);
    const__4.bindRoot(new instant.fail());
    ((Var)const__4)








      
      .setMacro();
    const__14.setMeta((IPersistentMap)const__17);
    const__14.bindRoot(new instant.verify());
    ((Var)const__14)


      
      .setMacro();
    const__18.setMeta((IPersistentMap)const__21);
    const__18.bindRoot(new instant.divisible_QMARK_());
    const__22.setMeta((IPersistentMap)const__25);
    const__22.bindRoot(new instant.indivisible_QMARK_());
    const__26.setMeta((IPersistentMap)const__29);
    const__26.bindRoot(new instant.parse_int());
    const__30.setMeta((IPersistentMap)const__33);
    const__30.bindRoot(new instant.zero_fill_right());
    const__34.setMeta((IPersistentMap)const__36);
    const__34.bindRoot(const__37);
    const__38.setMeta((IPersistentMap)const__42);
    const__38.bindRoot(new instant.parse_timestamp());
    const__43.setMeta((IPersistentMap)const__46);
    const__43.bindRoot(new instant.leap_year_QMARK_());
    const__47.setMeta((IPersistentMap)const__49);
    const__47













































































































      
      .bindRoot(((IFn)new instant.fn__8352()).invoke());
    const__50.setMeta((IPersistentMap)const__53);
    const__50.bindRoot(new instant.validated());
    const__54.setMeta((IPersistentMap)const__58);
    const__54






























      
      .bindRoot(((IFn)new instant.fn__8359()).invoke());
    const__59.setMeta((IPersistentMap)const__62);
    const__59.bindRoot(new instant.print_date());
    const__66.setMeta((IPersistentMap)const__69);
    const__66.bindRoot(new instant.print_calendar());
    const__71.setMeta((IPersistentMap)const__73);
    const__71






      
      .bindRoot(((IFn)new instant.fn__8375()).invoke());
    const__74.setMeta((IPersistentMap)const__77);
    const__74.bindRoot(new instant.print_timestamp());
    const__79.setMeta((IPersistentMap)const__82);
    const__79.bindRoot(new instant.construct_calendar());
    const__83.setMeta((IPersistentMap)const__86);
    const__83.bindRoot(new instant.construct_date());
    const__87.setMeta((IPersistentMap)const__90);
    const__87.bindRoot(new instant.construct_timestamp());
    const__91.setMeta((IPersistentMap)const__94);
    const__91.bindRoot(new instant.read_instant_date());
    const__95.setMeta((IPersistentMap)const__98);
    const__95.bindRoot(new instant.read_instant_calendar());
    const__99.setMeta((IPersistentMap)const__102);
    const__99.bindRoot(new instant.read_instant_timestamp());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "clojure.instant");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("clojure.core", "*warn-on-reflection*");
    const__4 = (Var)RT.var("clojure.instant", "fail");
    const__13 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "msg")) })), RT.keyword(null, "line"), Integer.valueOf(19), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/instant.clj" });
    const__14 = (Var)RT.var("clojure.instant", "verify");
    const__17 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "test"), Symbol.intern(null, "msg")), Tuple.create(Symbol.intern(null, "test")) })), RT.keyword(null, "line"), Integer.valueOf(23), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/instant.clj" });
    const__18 = (Var)RT.var("clojure.instant", "divisible?");
    const__21 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "num"), Symbol.intern(null, "div")) })), RT.keyword(null, "line"), Integer.valueOf(27), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/instant.clj" });
    const__22 = (Var)RT.var("clojure.instant", "indivisible?");
    const__25 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "num"), Symbol.intern(null, "div")) })), RT.keyword(null, "line"), Integer.valueOf(31), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/instant.clj" });
    const__26 = (Var)RT.var("clojure.instant", "parse-int");
    const__29 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "s")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") }))) })), RT.keyword(null, "line"), Integer.valueOf(39), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/instant.clj" });
    const__30 = (Var)RT.var("clojure.instant", "zero-fill-right");
    const__33 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "s")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") })), Symbol.intern(null, "width")) })), RT.keyword(null, "line"), Integer.valueOf(42), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/instant.clj" });
    const__34 = (Var)RT.var("clojure.instant", "timestamp");
    const__36 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(50), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/instant.clj" });
    const__37 = Pattern.compile("(\\d\\d\\d\\d)(?:-(\\d\\d)(?:-(\\d\\d)(?:[T](\\d\\d)(?::(\\d\\d)(?::(\\d\\d)(?:[.](\\d+))?)?)?)?)?)?(?:[Z]|([-+])(\\d\\d):(\\d\\d))?");
    const__38 = (Var)RT.var("clojure.instant", "parse-timestamp");
    const__42 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "new-instant"), ((IObj)Symbol.intern(null, "cs")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "CharSequence") }))) })), RT.keyword(null, "doc"), "Parse a string containing an RFC3339-like like timestamp.\n\nThe function new-instant is called with the following arguments.\n\n                min  max           default\n                ---  ------------  -------\n  years          0           9999      N/A (s must provide years)\n  months         1             12        1\n  days           1             31        1 (actual max days depends\n  hours          0             23        0  on month and year)\n  minutes        0             59        0\n  seconds        0             60        0 (though 60 is only valid\n  nanoseconds    0      999999999        0  when minutes is 59)\n  offset-sign   -1              1        0\n  offset-hours   0             23        0\n  offset-minutes 0             59        0\n\nThese are all integers and will be non-nil. (The listed defaults\nwill be passed if the corresponding field is not present in s.)\n\nGrammar (of s):\n\n  date-fullyear   = 4DIGIT\n  date-month      = 2DIGIT  ; 01-12\n  date-mday       = 2DIGIT  ; 01-28, 01-29, 01-30, 01-31 based on\n                            ; month/year\n  time-hour       = 2DIGIT  ; 00-23\n  time-minute     = 2DIGIT  ; 00-59\n  time-second     = 2DIGIT  ; 00-58, 00-59, 00-60 based on leap second\n                            ; rules\n  time-secfrac    = '.' 1*DIGIT\n  time-numoffset  = ('+' / '-') time-hour ':' time-minute\n  time-offset     = 'Z' / time-numoffset\n\n  time-part       = time-hour [ ':' time-minute [ ':' time-second\n                    [time-secfrac] [time-offset] ] ]\n\n  timestamp       = date-year [ '-' date-month [ '-' date-mday\n                    [ 'T' time-part ] ] ]\n\nUnlike RFC3339:\n\n  - we only parse the timestamp format\n  - timestamp can elide trailing components\n  - time-offset is optional (defaults to +00:00)\n\nThough time-offset is syntactically optional, a missing time-offset\nwill be treated as if the time-offset zero (+00:00) had been\nspecified.\n", RT.keyword(null, "line"), Integer.valueOf(53), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/instant.clj" });
    const__43 = (Var)RT.var("clojure.instant", "leap-year?");
    const__46 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "year")) })), RT.keyword(null, "line"), Integer.valueOf(127), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/instant.clj" });
    const__47 = (Var)RT.var("clojure.instant", "days-in-month");
    const__49 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(133), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/instant.clj" });
    const__50 = (Var)RT.var("clojure.instant", "validated");
    const__53 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "new-instance")) })), RT.keyword(null, "doc"), "Return a function which constructs an instant by calling constructor\nafter first validating that those arguments are in range and otherwise\nplausible. The resulting function will throw an exception if called\nwith invalid arguments.", RT.keyword(null, "line"), Integer.valueOf(139), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/instant.clj" });
    const__54 = (Var)RT.var("clojure.instant", "thread-local-utc-date-format");
    const__58 = (AFn)RT.map(new Object[] { RT.keyword(null, "tag"), RT.classForName("java.lang.ThreadLocal"), RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(163), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/instant.clj" });
    const__59 = (Var)RT.var("clojure.instant", "print-date");
    const__62 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "d")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "java.util.Date") })), ((IObj)Symbol.intern(null, "w")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "java.io.Writer") }))) })), RT.keyword(null, "doc"), "Print a java.util.Date as RFC3339 timestamp, always in UTC.", RT.keyword(null, "line"), Integer.valueOf(172), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/instant.clj" });
    const__63 = (Var)RT.var("clojure.core", "print-method");
    const__64 = RT.classForName("java.util.Date");
    const__65 = (Var)RT.var("clojure.core", "print-dup");
    const__66 = (Var)RT.var("clojure.instant", "print-calendar");
    const__69 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "c")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "java.util.Calendar") })), ((IObj)Symbol.intern(null, "w")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "java.io.Writer") }))) })), RT.keyword(null, "doc"), "Print a java.util.Calendar as RFC3339 timestamp, preserving timezone.", RT.keyword(null, "line"), Integer.valueOf(188), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/instant.clj" });
    const__70 = RT.classForName("java.util.Calendar");
    const__71 = (Var)RT.var("clojure.instant", "thread-local-utc-timestamp-format");
    const__73 = (AFn)RT.map(new Object[] { RT.keyword(null, "tag"), RT.classForName("java.lang.ThreadLocal"), RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(209), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/instant.clj" });
    const__74 = (Var)RT.var("clojure.instant", "print-timestamp");
    const__77 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "ts")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "java.sql.Timestamp") })), ((IObj)Symbol.intern(null, "w")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "java.io.Writer") }))) })), RT.keyword(null, "doc"), "Print a java.sql.Timestamp as RFC3339 timestamp, always in UTC.", RT.keyword(null, "line"), Integer.valueOf(217), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/instant.clj" });
    const__78 = RT.classForName("java.sql.Timestamp");
    const__79 = (Var)RT.var("clojure.instant", "construct-calendar");
    const__82 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)RT.vector(new Object[] { Symbol.intern(null, "years"), Symbol.intern(null, "months"), Symbol.intern(null, "days"), Symbol.intern(null, "hours"), Symbol.intern(null, "minutes"), Symbol.intern(null, "seconds"), Symbol.intern(null, "nanoseconds"), Symbol.intern(null, "offset-sign"), Symbol.intern(null, "offset-hours"), Symbol.intern(null, "offset-minutes") })).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "java.util.GregorianCalendar") })) })), RT.keyword(null, "doc"), "Construct a java.util.Calendar, preserving the timezone\noffset, but truncating the subsecond fraction to milliseconds.", RT.keyword(null, "line"), Integer.valueOf(240), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/instant.clj" });
    const__83 = (Var)RT.var("clojure.instant", "construct-date");
    const__86 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { RT.vector(new Object[] { Symbol.intern(null, "years"), Symbol.intern(null, "months"), Symbol.intern(null, "days"), Symbol.intern(null, "hours"), Symbol.intern(null, "minutes"), Symbol.intern(null, "seconds"), Symbol.intern(null, "nanoseconds"), Symbol.intern(null, "offset-sign"), Symbol.intern(null, "offset-hours"), Symbol.intern(null, "offset-minutes") }) })), RT.keyword(null, "doc"), "Construct a java.util.Date, which expresses the original instant as\nmilliseconds since the epoch, UTC.", RT.keyword(null, "line"), Integer.valueOf(253), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/instant.clj" });
    const__87 = (Var)RT.var("clojure.instant", "construct-timestamp");
    const__90 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { RT.vector(new Object[] { Symbol.intern(null, "years"), Symbol.intern(null, "months"), Symbol.intern(null, "days"), Symbol.intern(null, "hours"), Symbol.intern(null, "minutes"), Symbol.intern(null, "seconds"), Symbol.intern(null, "nanoseconds"), Symbol.intern(null, "offset-sign"), Symbol.intern(null, "offset-hours"), Symbol.intern(null, "offset-minutes") }) })), RT.keyword(null, "doc"), "Construct a java.sql.Timestamp, which has nanosecond precision.", RT.keyword(null, "line"), Integer.valueOf(262), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/instant.clj" });
    const__91 = (Var)RT.var("clojure.instant", "read-instant-date");
    const__94 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "cs")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "CharSequence") }))) })), RT.keyword(null, "doc"), "To read an instant as a java.util.Date, bind *data-readers* to a map with\nthis var as the value for the 'inst key. The timezone offset will be used\nto convert into UTC.", RT.keyword(null, "line"), Integer.valueOf(274), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/instant.clj" });
    const__95 = (Var)RT.var("clojure.instant", "read-instant-calendar");
    const__98 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "cs")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "CharSequence") }))) })), RT.keyword(null, "doc"), "To read an instant as a java.util.Calendar, bind *data-readers* to a map with\nthis var as the value for the 'inst key.  Calendar preserves the timezone\noffset.", RT.keyword(null, "line"), Integer.valueOf(281), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/instant.clj" });
    const__99 = (Var)RT.var("clojure.instant", "read-instant-timestamp");
  }
  
  public static void __init1() { const__102 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "cs")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "CharSequence") }))) })), RT.keyword(null, "doc"), "To read an instant as a java.sql.Timestamp, bind *data-readers* to a\nmap with this var as the value for the 'inst key. Timestamp preserves\nfractional seconds with nanosecond precision. The timezone offset will\nbe used to convert into UTC.", RT.keyword(null, "line"), Integer.valueOf(288), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/instant.clj" }); }
  
  static  {
    __init0();
    __init1();
    Compiler.pushNSandLoader(RT.classForName("clojure.instant__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
