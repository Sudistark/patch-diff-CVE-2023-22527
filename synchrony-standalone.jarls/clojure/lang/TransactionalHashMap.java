package clojure.lang;

import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentMap;

public class TransactionalHashMap<K, V> extends AbstractMap<K, V> implements ConcurrentMap<K, V> {
  final Ref[] bins;
  
  IPersistentMap mapAt(int bin) { return (IPersistentMap)this.bins[bin].deref(); }
  
  final int binFor(Object k) {
    int h = k.hashCode();
    h ^= h >>> 20 ^ h >>> 12;
    h ^= h >>> 7 ^ h >>> 4;
    return h % this.bins.length;
  }
  
  Map.Entry entryAt(Object k) { return mapAt(binFor(k)).entryAt(k); }
  
  public TransactionalHashMap() { this(421); }
  
  public TransactionalHashMap(int nBins) {
    this.bins = new Ref[nBins];
    for (int i = 0; i < nBins; i++)
      this.bins[i] = new Ref(PersistentHashMap.EMPTY); 
  }
  
  public TransactionalHashMap(Map<? extends K, ? extends V> m) {
    this(m.size());
    putAll(m);
  }
  
  public int size() {
    int n = 0;
    for (int i = 0; i < this.bins.length; i++)
      n += mapAt(i).count(); 
    return n;
  }
  
  public boolean isEmpty() { return (size() == 0); }
  
  public boolean containsKey(Object k) { return (entryAt(k) != null); }
  
  public V get(Object k) {
    Map.Entry e = entryAt(k);
    if (e != null)
      return (V)e.getValue(); 
    return null;
  }
  
  public V put(K k, V v) {
    Ref r = this.bins[binFor(k)];
    IPersistentMap map = (IPersistentMap)r.deref();
    Object ret = map.valAt(k);
    r.set(map.assoc(k, v));
    return (V)ret;
  }
  
  public V remove(Object k) {
    Ref r = this.bins[binFor(k)];
    IPersistentMap map = (IPersistentMap)r.deref();
    Object ret = map.valAt(k);
    r.set(map.without(k));
    return (V)ret;
  }
  
  public void putAll(Map<? extends K, ? extends V> map) {
    for (Iterator i = map.entrySet().iterator(); i.hasNext(); ) {
      Map.Entry<K, V> e = (Map.Entry)i.next();
      put(e.getKey(), e.getValue());
    } 
  }
  
  public void clear() {
    for (int i = 0; i < this.bins.length; i++) {
      Ref r = this.bins[i];
      IPersistentMap map = (IPersistentMap)r.deref();
      if (map.count() > 0)
        r.set(PersistentHashMap.EMPTY); 
    } 
  }
  
  public Set<Map.Entry<K, V>> entrySet() {
    ArrayList<Map.Entry<K, V>> entries = new ArrayList<Map.Entry<K, V>>(this.bins.length);
    for (int i = 0; i < this.bins.length; i++) {
      IPersistentMap map = mapAt(i);
      if (map.count() > 0)
        entries.addAll((Collection)RT.seq(map)); 
    } 
    return new Object(this, entries);
  }
  
  public V putIfAbsent(K k, V v) {
    Ref r = this.bins[binFor(k)];
    IPersistentMap map = (IPersistentMap)r.deref();
    IMapEntry iMapEntry = map.entryAt(k);
    if (iMapEntry == null) {
      r.set(map.assoc(k, v));
      return null;
    } 
    return (V)iMapEntry.getValue();
  }
  
  public boolean remove(Object k, Object v) {
    Ref r = this.bins[binFor(k)];
    IPersistentMap map = (IPersistentMap)r.deref();
    IMapEntry iMapEntry = map.entryAt(k);
    if (iMapEntry != null && iMapEntry.getValue().equals(v)) {
      r.set(map.without(k));
      return true;
    } 
    return false;
  }
  
  public boolean replace(K k, V oldv, V newv) {
    Ref r = this.bins[binFor(k)];
    IPersistentMap map = (IPersistentMap)r.deref();
    IMapEntry iMapEntry = map.entryAt(k);
    if (iMapEntry != null && iMapEntry.getValue().equals(oldv)) {
      r.set(map.assoc(k, newv));
      return true;
    } 
    return false;
  }
  
  public V replace(K k, V v) {
    Ref r = this.bins[binFor(k)];
    IPersistentMap map = (IPersistentMap)r.deref();
    IMapEntry iMapEntry = map.entryAt(k);
    if (iMapEntry != null) {
      r.set(map.assoc(k, v));
      return (V)iMapEntry.getValue();
    } 
    return null;
  }
}
