package clojure.lang;

public class StringSeq extends ASeq implements IndexedSeq {
  public final CharSequence s;
  
  public final int i;
  
  public static StringSeq create(CharSequence s) {
    if (s.length() == 0)
      return null; 
    return new StringSeq(null, s, 0);
  }
  
  StringSeq(IPersistentMap meta, CharSequence s, int i) {
    super(meta);
    this.s = s;
    this.i = i;
  }
  
  public Obj withMeta(IPersistentMap meta) {
    if (meta == meta())
      return this; 
    return new StringSeq(meta, this.s, this.i);
  }
  
  public Object first() { return Character.valueOf(this.s.charAt(this.i)); }
  
  public ISeq next() {
    if (this.i + 1 < this.s.length())
      return new StringSeq(this._meta, this.s, this.i + 1); 
    return null;
  }
  
  public int index() { return this.i; }
  
  public int count() { return this.s.length() - this.i; }
}
