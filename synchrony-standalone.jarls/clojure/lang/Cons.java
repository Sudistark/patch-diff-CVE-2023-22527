package clojure.lang;

import java.io.Serializable;

public final class Cons extends ASeq implements Serializable {
  private final Object _first;
  
  private final ISeq _more;
  
  public Cons(Object first, ISeq _more) {
    this._first = first;
    this._more = _more;
  }
  
  public Cons(IPersistentMap meta, Object _first, ISeq _more) {
    super(meta);
    this._first = _first;
    this._more = _more;
  }
  
  public Object first() { return this._first; }
  
  public ISeq next() { return more().seq(); }
  
  public ISeq more() {
    if (this._more == null)
      return PersistentList.EMPTY; 
    return this._more;
  }
  
  public int count() { return 1 + RT.count(this._more); }
  
  public Cons withMeta(IPersistentMap meta) {
    if (meta() == meta)
      return this; 
    return new Cons(meta, this._first, this._more);
  }
}
