package clojure.lang;

public class Delay implements IDeref, IPending {
  public Delay(IFn fn) {
    this.fn = fn;
    this.val = null;
    this.exception = null;
  }
  
  public static Object force(Object x) {
    return (x instanceof Delay) ? ((Delay)x)
      .deref() : x;
  }
  
  public Object deref() {
    if (this.fn != null)
      synchronized (this) {
        if (this.fn != null) {
          try {
            this.val = this.fn.invoke();
          } catch (Throwable t) {
            this.exception = t;
          } 
          this.fn = null;
        } 
      }  
    if (this.exception != null)
      throw Util.sneakyThrow(this.exception); 
    return this.val;
  }
  
  public boolean isRealized() { return (this.fn == null); }
}
