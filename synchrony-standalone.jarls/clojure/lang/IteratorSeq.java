package clojure.lang;

import java.io.IOException;
import java.io.NotSerializableException;
import java.io.ObjectOutputStream;
import java.util.Iterator;

public class IteratorSeq extends ASeq {
  final Iterator iter;
  
  final State state;
  
  public static IteratorSeq create(Iterator iter) {
    if (iter.hasNext())
      return new IteratorSeq(iter); 
    return null;
  }
  
  IteratorSeq(Iterator iter) {
    this.iter = iter;
    this.state = new State();
    this.state.val = this.state;
    this.state._rest = this.state;
  }
  
  IteratorSeq(IPersistentMap meta, Iterator iter, State state) {
    super(meta);
    this.iter = iter;
    this.state = state;
  }
  
  public Object first() {
    if (this.state.val == this.state)
      synchronized (this.state) {
        if (this.state.val == this.state)
          this.state.val = this.iter.next(); 
      }  
    return this.state.val;
  }
  
  public ISeq next() {
    if (this.state._rest == this.state)
      synchronized (this.state) {
        if (this.state._rest == this.state) {
          first();
          this.state._rest = create(this.iter);
        } 
      }  
    return (ISeq)this.state._rest;
  }
  
  public IteratorSeq withMeta(IPersistentMap meta) {
    if (meta() == meta)
      return this; 
    return new IteratorSeq(meta, this.iter, this.state);
  }
  
  private void writeObject(ObjectOutputStream out) throws IOException { throw new NotSerializableException(getClass().getName()); }
}
