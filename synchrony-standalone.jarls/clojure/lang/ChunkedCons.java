package clojure.lang;

public final class ChunkedCons extends ASeq implements IChunkedSeq {
  final IChunk chunk;
  
  final ISeq _more;
  
  ChunkedCons(IPersistentMap meta, IChunk chunk, ISeq more) {
    super(meta);
    this.chunk = chunk;
    this._more = more;
  }
  
  public ChunkedCons(IChunk chunk, ISeq more) { this(null, chunk, more); }
  
  public Obj withMeta(IPersistentMap meta) {
    if (meta != this._meta)
      return new ChunkedCons(meta, this.chunk, this._more); 
    return this;
  }
  
  public Object first() { return this.chunk.nth(0); }
  
  public ISeq next() {
    if (this.chunk.count() > 1)
      return new ChunkedCons(this.chunk.dropFirst(), this._more); 
    return chunkedNext();
  }
  
  public ISeq more() {
    if (this.chunk.count() > 1)
      return new ChunkedCons(this.chunk.dropFirst(), this._more); 
    if (this._more == null)
      return PersistentList.EMPTY; 
    return this._more;
  }
  
  public IChunk chunkedFirst() { return this.chunk; }
  
  public ISeq chunkedNext() { return chunkedMore().seq(); }
  
  public ISeq chunkedMore() {
    if (this._more == null)
      return PersistentList.EMPTY; 
    return this._more;
  }
}
