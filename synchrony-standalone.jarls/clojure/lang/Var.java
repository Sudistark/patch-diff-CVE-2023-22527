package clojure.lang;

import java.io.Serializable;
import java.util.concurrent.atomic.AtomicBoolean;

public final class Var extends ARef implements IFn, IRef, Settable, Serializable {
  static final ThreadLocal<Frame> dvals = new Object();
  
  static Keyword privateKey = Keyword.intern(null, "private");
  
  static IPersistentMap privateMeta = new PersistentArrayMap(new Object[] { privateKey, Boolean.TRUE });
  
  static Keyword macroKey = Keyword.intern(null, "macro");
  
  static Keyword nameKey = Keyword.intern(null, "name");
  
  static Keyword nsKey = Keyword.intern(null, "ns");
  
  final AtomicBoolean threadBound;
  
  public final Symbol sym;
  
  public final Namespace ns;
  
  public static Object getThreadBindingFrame() { return dvals.get(); }
  
  public static Object cloneThreadBindingFrame() { return ((Frame)dvals.get()).clone(); }
  
  public static void resetThreadBindingFrame(Object frame) { dvals.set((Frame)frame); }
  
  public Var setDynamic() {
    this.dynamic = true;
    return this;
  }
  
  public Var setDynamic(boolean b) {
    this.dynamic = b;
    return this;
  }
  
  public final boolean isDynamic() { return this.dynamic; }
  
  public static Var intern(Namespace ns, Symbol sym, Object root) { return intern(ns, sym, root, true); }
  
  public static Var intern(Namespace ns, Symbol sym, Object root, boolean replaceRoot) {
    Var dvout = ns.intern(sym);
    if (!dvout.hasRoot() || replaceRoot)
      dvout.bindRoot(root); 
    return dvout;
  }
  
  public Symbol toSymbol() { return Symbol.create((this.ns == null) ? null : this.ns.name.name, this.sym.name); }
  
  public String toString() {
    if (this.ns != null)
      return "#'" + this.ns.name + "/" + this.sym; 
    return "#<Var: " + ((this.sym != null) ? this.sym.toString() : "--unnamed--") + ">";
  }
  
  public static Var find(Symbol nsQualifiedSym) {
    if (nsQualifiedSym.ns == null)
      throw new IllegalArgumentException("Symbol must be namespace-qualified"); 
    Namespace ns = Namespace.find(Symbol.intern(nsQualifiedSym.ns));
    if (ns == null)
      throw new IllegalArgumentException("No such namespace: " + nsQualifiedSym.ns); 
    return ns.findInternedVar(Symbol.intern(nsQualifiedSym.name));
  }
  
  public static Var intern(Symbol nsName, Symbol sym) {
    Namespace ns = Namespace.findOrCreate(nsName);
    return intern(ns, sym);
  }
  
  public static Var internPrivate(String nsName, String sym) {
    Namespace ns = Namespace.findOrCreate(Symbol.intern(nsName));
    Var ret = intern(ns, Symbol.intern(sym));
    ret.setMeta(privateMeta);
    return ret;
  }
  
  public static Var intern(Namespace ns, Symbol sym) { return ns.intern(sym); }
  
  public static Var create() { return new Var(null, null); }
  
  public static Var create(Object root) { return new Var(null, null, root); }
  
  Var(Namespace ns, Symbol sym) {
    this.dynamic = false;
    this.ns = ns;
    this.sym = sym;
    this.threadBound = new AtomicBoolean(false);
    this.root = new Unbound(this);
    setMeta(PersistentHashMap.EMPTY);
  }
  
  Var(Namespace ns, Symbol sym, Object root) {
    this(ns, sym);
    this.root = root;
    rev++;
  }
  
  public boolean isBound() { return (hasRoot() || (this.threadBound.get() && ((Frame)dvals.get()).bindings.containsKey(this))); }
  
  public final Object get() {
    if (!this.threadBound.get())
      return this.root; 
    return deref();
  }
  
  public final Object deref() {
    TBox b = getThreadBinding();
    if (b != null)
      return b.val; 
    return this.root;
  }
  
  public void setValidator(IFn vf) {
    if (hasRoot())
      validate(vf, this.root); 
    this.validator = vf;
  }
  
  public Object alter(IFn fn, ISeq args) {
    set(fn.applyTo(RT.cons(deref(), args)));
    return this;
  }
  
  public Object set(Object val) {
    validate(getValidator(), val);
    TBox b = getThreadBinding();
    if (b != null) {
      if (Thread.currentThread() != b.thread)
        throw new IllegalStateException(String.format("Can't set!: %s from non-binding thread", new Object[] { this.sym })); 
      return b.val = val;
    } 
    throw new IllegalStateException(String.format("Can't change/establish root binding of: %s with set", new Object[] { this.sym }));
  }
  
  public Object doSet(Object val) { return set(val); }
  
  public Object doReset(Object val) {
    bindRoot(val);
    return val;
  }
  
  public void setMeta(IPersistentMap m) { resetMeta(m.assoc(nameKey, this.sym).assoc(nsKey, this.ns)); }
  
  public void setMacro() { alterMeta(assoc, RT.list(macroKey, RT.T)); }
  
  public boolean isMacro() { return RT.booleanCast(meta().valAt(macroKey)); }
  
  public boolean isPublic() { return !RT.booleanCast(meta().valAt(privateKey)); }
  
  public final Object getRawRoot() { return this.root; }
  
  public Object getTag() { return meta().valAt(RT.TAG_KEY); }
  
  public void setTag(Symbol tag) { alterMeta(assoc, RT.list(RT.TAG_KEY, tag)); }
  
  public final boolean hasRoot() { return !(this.root instanceof Unbound); }
  
  public void bindRoot(Object root) {
    validate(getValidator(), root);
    Object oldroot = this.root;
    this.root = root;
    rev++;
    alterMeta(dissoc, RT.list(macroKey));
    notifyWatches(oldroot, this.root);
  }
  
  void swapRoot(Object root) {
    validate(getValidator(), root);
    Object oldroot = this.root;
    this.root = root;
    rev++;
    notifyWatches(oldroot, root);
  }
  
  public void unbindRoot() {
    this.root = new Unbound(this);
    rev++;
  }
  
  public void commuteRoot(IFn fn) {
    Object newRoot = fn.invoke(this.root);
    validate(getValidator(), newRoot);
    Object oldroot = this.root;
    this.root = newRoot;
    rev++;
    notifyWatches(oldroot, newRoot);
  }
  
  public Object alterRoot(IFn fn, ISeq args) {
    Object newRoot = fn.applyTo(RT.cons(this.root, args));
    validate(getValidator(), newRoot);
    Object oldroot = this.root;
    this.root = newRoot;
    rev++;
    notifyWatches(oldroot, newRoot);
    return newRoot;
  }
  
  public static void pushThreadBindings(Associative bindings) {
    Frame f = (Frame)dvals.get();
    Associative bmap = f.bindings;
    for (ISeq bs = bindings.seq(); bs != null; bs = bs.next()) {
      IMapEntry e = (IMapEntry)bs.first();
      Var v = (Var)e.key();
      if (!v.dynamic)
        throw new IllegalStateException(String.format("Can't dynamically bind non-dynamic var: %s/%s", new Object[] { v.ns, v.sym })); 
      v.validate(v.getValidator(), e.val());
      v.threadBound.set(true);
      bmap = bmap.assoc(v, new TBox(Thread.currentThread(), e.val()));
    } 
    dvals.set(new Frame(bmap, f));
  }
  
  public static void popThreadBindings() {
    f = ((Frame)dvals.get()).prev;
    if (f == null)
      throw new IllegalStateException("Pop without matching push"); 
    if (f == Frame.TOP) {
      dvals.remove();
    } else {
      dvals.set(f);
    } 
  }
  
  public static Associative getThreadBindings() {
    f = (Frame)dvals.get();
    IPersistentMap iPersistentMap = PersistentHashMap.EMPTY;
    for (ISeq bs = f.bindings.seq(); bs != null; bs = bs.next()) {
      IMapEntry e = (IMapEntry)bs.first();
      Var v = (Var)e.key();
      TBox b = (TBox)e.val();
      iPersistentMap = iPersistentMap.assoc(v, b.val);
    } 
    return iPersistentMap;
  }
  
  public final TBox getThreadBinding() {
    if (this.threadBound.get()) {
      IMapEntry e = ((Frame)dvals.get()).bindings.entryAt(this);
      if (e != null)
        return (TBox)e.val(); 
    } 
    return null;
  }
  
  public final IFn fn() { return (IFn)deref(); }
  
  public Object call() { return invoke(); }
  
  public void run() { invoke(); }
  
  public Object invoke() { return fn().invoke(); }
  
  public Object invoke(Object arg1) { return fn().invoke(Util.ret1(arg1, arg1 = null)); }
  
  public Object invoke(Object arg1, Object arg2) { return fn().invoke(Util.ret1(arg1, arg1 = null), 
        Util.ret1(arg2, arg2 = null)); }
  
  public Object invoke(Object arg1, Object arg2, Object arg3) {
    return fn().invoke(Util.ret1(arg1, arg1 = null), 
        Util.ret1(arg2, arg2 = null), 
        Util.ret1(arg3, arg3 = null));
  }
  
  public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4) {
    return fn().invoke(Util.ret1(arg1, arg1 = null), 
        Util.ret1(arg2, arg2 = null), 
        Util.ret1(arg3, arg3 = null), 
        Util.ret1(arg4, arg4 = null));
  }
  
  public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5) {
    return fn().invoke(Util.ret1(arg1, arg1 = null), 
        Util.ret1(arg2, arg2 = null), 
        Util.ret1(arg3, arg3 = null), 
        Util.ret1(arg4, arg4 = null), 
        Util.ret1(arg5, arg5 = null));
  }
  
  public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6) {
    return fn().invoke(Util.ret1(arg1, arg1 = null), 
        Util.ret1(arg2, arg2 = null), 
        Util.ret1(arg3, arg3 = null), 
        Util.ret1(arg4, arg4 = null), 
        Util.ret1(arg5, arg5 = null), 
        Util.ret1(arg6, arg6 = null));
  }
  
  public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7) {
    return fn().invoke(Util.ret1(arg1, arg1 = null), 
        Util.ret1(arg2, arg2 = null), 
        Util.ret1(arg3, arg3 = null), 
        Util.ret1(arg4, arg4 = null), 
        Util.ret1(arg5, arg5 = null), 
        Util.ret1(arg6, arg6 = null), 
        Util.ret1(arg7, arg7 = null));
  }
  
  public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7, Object arg8) {
    return fn().invoke(Util.ret1(arg1, arg1 = null), 
        Util.ret1(arg2, arg2 = null), 
        Util.ret1(arg3, arg3 = null), 
        Util.ret1(arg4, arg4 = null), 
        Util.ret1(arg5, arg5 = null), 
        Util.ret1(arg6, arg6 = null), 
        Util.ret1(arg7, arg7 = null), 
        Util.ret1(arg8, arg8 = null));
  }
  
  public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7, Object arg8, Object arg9) {
    return fn().invoke(Util.ret1(arg1, arg1 = null), 
        Util.ret1(arg2, arg2 = null), 
        Util.ret1(arg3, arg3 = null), 
        Util.ret1(arg4, arg4 = null), 
        Util.ret1(arg5, arg5 = null), 
        Util.ret1(arg6, arg6 = null), 
        Util.ret1(arg7, arg7 = null), 
        Util.ret1(arg8, arg8 = null), 
        Util.ret1(arg9, arg9 = null));
  }
  
  public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7, Object arg8, Object arg9, Object arg10) {
    return fn().invoke(Util.ret1(arg1, arg1 = null), 
        Util.ret1(arg2, arg2 = null), 
        Util.ret1(arg3, arg3 = null), 
        Util.ret1(arg4, arg4 = null), 
        Util.ret1(arg5, arg5 = null), 
        Util.ret1(arg6, arg6 = null), 
        Util.ret1(arg7, arg7 = null), 
        Util.ret1(arg8, arg8 = null), 
        Util.ret1(arg9, arg9 = null), 
        Util.ret1(arg10, arg10 = null));
  }
  
  public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7, Object arg8, Object arg9, Object arg10, Object arg11) {
    return fn().invoke(Util.ret1(arg1, arg1 = null), 
        Util.ret1(arg2, arg2 = null), 
        Util.ret1(arg3, arg3 = null), 
        Util.ret1(arg4, arg4 = null), 
        Util.ret1(arg5, arg5 = null), 
        Util.ret1(arg6, arg6 = null), 
        Util.ret1(arg7, arg7 = null), 
        Util.ret1(arg8, arg8 = null), 
        Util.ret1(arg9, arg9 = null), 
        Util.ret1(arg10, arg10 = null), 
        Util.ret1(arg11, arg11 = null));
  }
  
  public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7, Object arg8, Object arg9, Object arg10, Object arg11, Object arg12) {
    return fn().invoke(Util.ret1(arg1, arg1 = null), 
        Util.ret1(arg2, arg2 = null), 
        Util.ret1(arg3, arg3 = null), 
        Util.ret1(arg4, arg4 = null), 
        Util.ret1(arg5, arg5 = null), 
        Util.ret1(arg6, arg6 = null), 
        Util.ret1(arg7, arg7 = null), 
        Util.ret1(arg8, arg8 = null), 
        Util.ret1(arg9, arg9 = null), 
        Util.ret1(arg10, arg10 = null), 
        Util.ret1(arg11, arg11 = null), 
        Util.ret1(arg12, arg12 = null));
  }
  
  public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7, Object arg8, Object arg9, Object arg10, Object arg11, Object arg12, Object arg13) {
    return fn().invoke(Util.ret1(arg1, arg1 = null), 
        Util.ret1(arg2, arg2 = null), 
        Util.ret1(arg3, arg3 = null), 
        Util.ret1(arg4, arg4 = null), 
        Util.ret1(arg5, arg5 = null), 
        Util.ret1(arg6, arg6 = null), 
        Util.ret1(arg7, arg7 = null), 
        Util.ret1(arg8, arg8 = null), 
        Util.ret1(arg9, arg9 = null), 
        Util.ret1(arg10, arg10 = null), 
        Util.ret1(arg11, arg11 = null), 
        Util.ret1(arg12, arg12 = null), 
        Util.ret1(arg13, arg13 = null));
  }
  
  public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7, Object arg8, Object arg9, Object arg10, Object arg11, Object arg12, Object arg13, Object arg14) {
    return fn().invoke(Util.ret1(arg1, arg1 = null), 
        Util.ret1(arg2, arg2 = null), 
        Util.ret1(arg3, arg3 = null), 
        Util.ret1(arg4, arg4 = null), 
        Util.ret1(arg5, arg5 = null), 
        Util.ret1(arg6, arg6 = null), 
        Util.ret1(arg7, arg7 = null), 
        Util.ret1(arg8, arg8 = null), 
        Util.ret1(arg9, arg9 = null), 
        Util.ret1(arg10, arg10 = null), 
        Util.ret1(arg11, arg11 = null), 
        Util.ret1(arg12, arg12 = null), 
        Util.ret1(arg13, arg13 = null), 
        Util.ret1(arg14, arg14 = null));
  }
  
  public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7, Object arg8, Object arg9, Object arg10, Object arg11, Object arg12, Object arg13, Object arg14, Object arg15) {
    return fn().invoke(Util.ret1(arg1, arg1 = null), 
        Util.ret1(arg2, arg2 = null), 
        Util.ret1(arg3, arg3 = null), 
        Util.ret1(arg4, arg4 = null), 
        Util.ret1(arg5, arg5 = null), 
        Util.ret1(arg6, arg6 = null), 
        Util.ret1(arg7, arg7 = null), 
        Util.ret1(arg8, arg8 = null), 
        Util.ret1(arg9, arg9 = null), 
        Util.ret1(arg10, arg10 = null), 
        Util.ret1(arg11, arg11 = null), 
        Util.ret1(arg12, arg12 = null), 
        Util.ret1(arg13, arg13 = null), 
        Util.ret1(arg14, arg14 = null), 
        Util.ret1(arg15, arg15 = null));
  }
  
  public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7, Object arg8, Object arg9, Object arg10, Object arg11, Object arg12, Object arg13, Object arg14, Object arg15, Object arg16) {
    return fn().invoke(Util.ret1(arg1, arg1 = null), 
        Util.ret1(arg2, arg2 = null), 
        Util.ret1(arg3, arg3 = null), 
        Util.ret1(arg4, arg4 = null), 
        Util.ret1(arg5, arg5 = null), 
        Util.ret1(arg6, arg6 = null), 
        Util.ret1(arg7, arg7 = null), 
        Util.ret1(arg8, arg8 = null), 
        Util.ret1(arg9, arg9 = null), 
        Util.ret1(arg10, arg10 = null), 
        Util.ret1(arg11, arg11 = null), 
        Util.ret1(arg12, arg12 = null), 
        Util.ret1(arg13, arg13 = null), 
        Util.ret1(arg14, arg14 = null), 
        Util.ret1(arg15, arg15 = null), 
        Util.ret1(arg16, arg16 = null));
  }
  
  public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7, Object arg8, Object arg9, Object arg10, Object arg11, Object arg12, Object arg13, Object arg14, Object arg15, Object arg16, Object arg17) {
    return fn().invoke(Util.ret1(arg1, arg1 = null), 
        Util.ret1(arg2, arg2 = null), 
        Util.ret1(arg3, arg3 = null), 
        Util.ret1(arg4, arg4 = null), 
        Util.ret1(arg5, arg5 = null), 
        Util.ret1(arg6, arg6 = null), 
        Util.ret1(arg7, arg7 = null), 
        Util.ret1(arg8, arg8 = null), 
        Util.ret1(arg9, arg9 = null), 
        Util.ret1(arg10, arg10 = null), 
        Util.ret1(arg11, arg11 = null), 
        Util.ret1(arg12, arg12 = null), 
        Util.ret1(arg13, arg13 = null), 
        Util.ret1(arg14, arg14 = null), 
        Util.ret1(arg15, arg15 = null), 
        Util.ret1(arg16, arg16 = null), 
        Util.ret1(arg17, arg17 = null));
  }
  
  public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7, Object arg8, Object arg9, Object arg10, Object arg11, Object arg12, Object arg13, Object arg14, Object arg15, Object arg16, Object arg17, Object arg18) {
    return fn().invoke(Util.ret1(arg1, arg1 = null), 
        Util.ret1(arg2, arg2 = null), 
        Util.ret1(arg3, arg3 = null), 
        Util.ret1(arg4, arg4 = null), 
        Util.ret1(arg5, arg5 = null), 
        Util.ret1(arg6, arg6 = null), 
        Util.ret1(arg7, arg7 = null), 
        Util.ret1(arg8, arg8 = null), 
        Util.ret1(arg9, arg9 = null), 
        Util.ret1(arg10, arg10 = null), 
        Util.ret1(arg11, arg11 = null), 
        Util.ret1(arg12, arg12 = null), 
        Util.ret1(arg13, arg13 = null), 
        Util.ret1(arg14, arg14 = null), 
        Util.ret1(arg15, arg15 = null), 
        Util.ret1(arg16, arg16 = null), 
        Util.ret1(arg17, arg17 = null), 
        Util.ret1(arg18, arg18 = null));
  }
  
  public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7, Object arg8, Object arg9, Object arg10, Object arg11, Object arg12, Object arg13, Object arg14, Object arg15, Object arg16, Object arg17, Object arg18, Object arg19) {
    return fn().invoke(Util.ret1(arg1, arg1 = null), 
        Util.ret1(arg2, arg2 = null), 
        Util.ret1(arg3, arg3 = null), 
        Util.ret1(arg4, arg4 = null), 
        Util.ret1(arg5, arg5 = null), 
        Util.ret1(arg6, arg6 = null), 
        Util.ret1(arg7, arg7 = null), 
        Util.ret1(arg8, arg8 = null), 
        Util.ret1(arg9, arg9 = null), 
        Util.ret1(arg10, arg10 = null), 
        Util.ret1(arg11, arg11 = null), 
        Util.ret1(arg12, arg12 = null), 
        Util.ret1(arg13, arg13 = null), 
        Util.ret1(arg14, arg14 = null), 
        Util.ret1(arg15, arg15 = null), 
        Util.ret1(arg16, arg16 = null), 
        Util.ret1(arg17, arg17 = null), 
        Util.ret1(arg18, arg18 = null), 
        Util.ret1(arg19, arg19 = null));
  }
  
  public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7, Object arg8, Object arg9, Object arg10, Object arg11, Object arg12, Object arg13, Object arg14, Object arg15, Object arg16, Object arg17, Object arg18, Object arg19, Object arg20) {
    return fn().invoke(Util.ret1(arg1, arg1 = null), 
        Util.ret1(arg2, arg2 = null), 
        Util.ret1(arg3, arg3 = null), 
        Util.ret1(arg4, arg4 = null), 
        Util.ret1(arg5, arg5 = null), 
        Util.ret1(arg6, arg6 = null), 
        Util.ret1(arg7, arg7 = null), 
        Util.ret1(arg8, arg8 = null), 
        Util.ret1(arg9, arg9 = null), 
        Util.ret1(arg10, arg10 = null), 
        Util.ret1(arg11, arg11 = null), 
        Util.ret1(arg12, arg12 = null), 
        Util.ret1(arg13, arg13 = null), 
        Util.ret1(arg14, arg14 = null), 
        Util.ret1(arg15, arg15 = null), 
        Util.ret1(arg16, arg16 = null), 
        Util.ret1(arg17, arg17 = null), 
        Util.ret1(arg18, arg18 = null), 
        Util.ret1(arg19, arg19 = null), 
        Util.ret1(arg20, arg20 = null));
  }
  
  public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7, Object arg8, Object arg9, Object arg10, Object arg11, Object arg12, Object arg13, Object arg14, Object arg15, Object arg16, Object arg17, Object arg18, Object arg19, Object arg20, Object... args) {
    return fn().invoke(Util.ret1(arg1, arg1 = null), 
        Util.ret1(arg2, arg2 = null), 
        Util.ret1(arg3, arg3 = null), 
        Util.ret1(arg4, arg4 = null), 
        Util.ret1(arg5, arg5 = null), 
        Util.ret1(arg6, arg6 = null), 
        Util.ret1(arg7, arg7 = null), 
        Util.ret1(arg8, arg8 = null), 
        Util.ret1(arg9, arg9 = null), 
        Util.ret1(arg10, arg10 = null), 
        Util.ret1(arg11, arg11 = null), 
        Util.ret1(arg12, arg12 = null), 
        Util.ret1(arg13, arg13 = null), 
        Util.ret1(arg14, arg14 = null), 
        Util.ret1(arg15, arg15 = null), 
        Util.ret1(arg16, arg16 = null), 
        Util.ret1(arg17, arg17 = null), 
        Util.ret1(arg18, arg18 = null), 
        Util.ret1(arg19, arg19 = null), 
        Util.ret1(arg20, arg20 = null), 
        (Object[])Util.ret1(args, args = null));
  }
  
  public Object applyTo(ISeq arglist) { return fn().applyTo(arglist); }
  
  static IFn assoc = new Object();
  
  static IFn dissoc = new Object();
  
  private Object writeReplace() { return new Serialized(this.ns.getName(), this.sym); }
}
