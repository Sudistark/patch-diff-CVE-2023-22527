package clojure.lang;

import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.locks.ReentrantReadWriteLock;

public class Ref extends ARef implements IFn, Comparable<Ref>, IRef {
  TVal tvals;
  
  final AtomicInteger faults;
  
  final ReentrantReadWriteLock lock;
  
  LockingTransaction.Info tinfo;
  
  final long id;
  
  public int compareTo(Ref ref) {
    if (this.id == ref.id)
      return 0; 
    if (this.id < ref.id)
      return -1; 
    return 1;
  }
  
  public int getMinHistory() { return this.minHistory; }
  
  public Ref setMinHistory(int minHistory) {
    this.minHistory = minHistory;
    return this;
  }
  
  public int getMaxHistory() { return this.maxHistory; }
  
  public Ref setMaxHistory(int maxHistory) {
    this.maxHistory = maxHistory;
    return this;
  }
  
  static final AtomicLong ids = new AtomicLong();
  
  public Ref(Object initVal) { this(initVal, null); }
  
  public Ref(Object initVal, IPersistentMap meta) {
    super(meta);
    this.id = ids.getAndIncrement();
    this.faults = new AtomicInteger();
    this.lock = new ReentrantReadWriteLock();
    this.tvals = new TVal(initVal, 0L);
  }
  
  Object currentVal() {
    try {
      this.lock.readLock().lock();
      if (this.tvals != null)
        return this.tvals.val; 
      throw new IllegalStateException(toString() + " is unbound.");
    } finally {
      this.lock.readLock().unlock();
    } 
  }
  
  public Object deref() {
    LockingTransaction t = LockingTransaction.getRunning();
    if (t == null)
      return currentVal(); 
    return t.doGet(this);
  }
  
  public Object set(Object val) { return LockingTransaction.getEx().doSet(this, val); }
  
  public Object commute(IFn fn, ISeq args) { return LockingTransaction.getEx().doCommute(this, fn, args); }
  
  public Object alter(IFn fn, ISeq args) {
    LockingTransaction t = LockingTransaction.getEx();
    return t.doSet(this, fn.applyTo(RT.cons(t.doGet(this), args)));
  }
  
  public void touch() { LockingTransaction.getEx().doEnsure(this); }
  
  boolean isBound() {
    try {
      this.lock.readLock().lock();
      return (this.tvals != null);
    } finally {
      this.lock.readLock().unlock();
    } 
  }
  
  public void trimHistory() {
    try {
      this.lock.writeLock().lock();
      if (this.tvals != null) {
        this.tvals.next = this.tvals;
        this.tvals.prior = this.tvals;
      } 
    } finally {
      this.lock.writeLock().unlock();
    } 
  }
  
  public int getHistoryCount() {
    try {
      this.lock.writeLock().lock();
      return histCount();
    } finally {
      this.lock.writeLock().unlock();
    } 
  }
  
  int histCount() {
    if (this.tvals == null)
      return 0; 
    int count = 0;
    for (TVal tv = this.tvals.next; tv != this.tvals; tv = tv.next)
      count++; 
    return count;
  }
  
  public final IFn fn() { return (IFn)deref(); }
  
  public Object call() { return invoke(); }
  
  public void run() { invoke(); }
  
  public Object invoke() { return fn().invoke(); }
  
  public Object invoke(Object arg1) { return fn().invoke(arg1); }
  
  public Object invoke(Object arg1, Object arg2) { return fn().invoke(arg1, arg2); }
  
  public Object invoke(Object arg1, Object arg2, Object arg3) { return fn().invoke(arg1, arg2, arg3); }
  
  public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4) { return fn().invoke(arg1, arg2, arg3, arg4); }
  
  public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5) { return fn().invoke(arg1, arg2, arg3, arg4, arg5); }
  
  public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6) { return fn().invoke(arg1, arg2, arg3, arg4, arg5, arg6); }
  
  public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7) { return fn().invoke(arg1, arg2, arg3, arg4, arg5, arg6, arg7); }
  
  public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7, Object arg8) { return fn().invoke(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8); }
  
  public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7, Object arg8, Object arg9) { return fn().invoke(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9); }
  
  public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7, Object arg8, Object arg9, Object arg10) { return fn().invoke(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10); }
  
  public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7, Object arg8, Object arg9, Object arg10, Object arg11) { return fn().invoke(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11); }
  
  public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7, Object arg8, Object arg9, Object arg10, Object arg11, Object arg12) { return fn().invoke(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12); }
  
  public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7, Object arg8, Object arg9, Object arg10, Object arg11, Object arg12, Object arg13) { return fn().invoke(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13); }
  
  public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7, Object arg8, Object arg9, Object arg10, Object arg11, Object arg12, Object arg13, Object arg14) { return fn().invoke(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14); }
  
  public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7, Object arg8, Object arg9, Object arg10, Object arg11, Object arg12, Object arg13, Object arg14, Object arg15) { return fn().invoke(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15); }
  
  public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7, Object arg8, Object arg9, Object arg10, Object arg11, Object arg12, Object arg13, Object arg14, Object arg15, Object arg16) { return fn().invoke(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16); }
  
  public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7, Object arg8, Object arg9, Object arg10, Object arg11, Object arg12, Object arg13, Object arg14, Object arg15, Object arg16, Object arg17) { return fn().invoke(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17); }
  
  public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7, Object arg8, Object arg9, Object arg10, Object arg11, Object arg12, Object arg13, Object arg14, Object arg15, Object arg16, Object arg17, Object arg18) { return fn().invoke(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18); }
  
  public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7, Object arg8, Object arg9, Object arg10, Object arg11, Object arg12, Object arg13, Object arg14, Object arg15, Object arg16, Object arg17, Object arg18, Object arg19) { return fn().invoke(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19); }
  
  public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7, Object arg8, Object arg9, Object arg10, Object arg11, Object arg12, Object arg13, Object arg14, Object arg15, Object arg16, Object arg17, Object arg18, Object arg19, Object arg20) { return fn().invoke(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20); }
  
  public Object invoke(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7, Object arg8, Object arg9, Object arg10, Object arg11, Object arg12, Object arg13, Object arg14, Object arg15, Object arg16, Object arg17, Object arg18, Object arg19, Object arg20, Object... args) { return fn().invoke(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, args); }
  
  public Object applyTo(ISeq arglist) { return AFn.applyToHelper(this, arglist); }
}
