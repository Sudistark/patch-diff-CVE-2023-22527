package clojure.reflect;

import clojure.core;
import clojure.lang.AFn;
import clojure.lang.APersistentMap;
import clojure.lang.ArraySeq;
import clojure.lang.Associative;
import clojure.lang.Counted;
import clojure.lang.IFn;
import clojure.lang.IHashEq;
import clojure.lang.IKeywordLookup;
import clojure.lang.ILookup;
import clojure.lang.ILookupThunk;
import clojure.lang.IMapEntry;
import clojure.lang.IObj;
import clojure.lang.IPersistentCollection;
import clojure.lang.IPersistentMap;
import clojure.lang.IPersistentVector;
import clojure.lang.IRecord;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.MapEntry;
import clojure.lang.Numbers;
import clojure.lang.PersistentHashSet;
import clojure.lang.RT;
import clojure.lang.RecordIterator;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Util;
import clojure.lang.Var;
import java.io.Serializable;
import java.util.Collection;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

public final class Field implements IRecord, IHashEq, IObj, ILookup, IKeywordLookup, IPersistentMap, Map, Serializable {
  public final Object name;
  
  public final Object type;
  
  public final Object declaring_class;
  
  public final Object flags;
  
  public final Object __meta;
  
  public final Object __extmap;
  
  int __hash;
  
  int __hasheq;
  
  public static final Keyword const__8 = (Keyword)RT.keyword(null, "name");
  
  public static final Keyword const__9 = (Keyword)RT.keyword(null, "type");
  
  public static final Keyword const__10 = (Keyword)RT.keyword(null, "declaring-class");
  
  public static final Keyword const__11 = (Keyword)RT.keyword(null, "flags");
  
  public static final AFn const__12 = (AFn)PersistentHashSet.create(new Object[] { RT.keyword(null, "name"), RT.keyword(null, "type"), RT.keyword(null, "declaring-class"), RT.keyword(null, "flags") });
  
  public static final Var const__17 = (Var)RT.var("clojure.core", "identical?");
  
  public static final AFn const__19 = (AFn)Tuple.create(RT.keyword(null, "name"), RT.keyword(null, "type"), RT.keyword(null, "declaring-class"), RT.keyword(null, "flags"));
  
  public static final Var const__24 = (Var)RT.var("clojure.core", "imap-cons");
  
  public Field(Object paramObject1, Object paramObject2, Object paramObject3, Object paramObject4, Object paramObject5, Object paramObject6, int paramInt1, int paramInt2) { this.name = paramObject1;
    this.type = paramObject2;
    this.declaring_class = paramObject3;
    this.flags = paramObject4;
    this.__meta = paramObject5;
    this.__extmap = paramObject6;
    this.__hash = paramInt1;
    this.__hasheq = paramInt2; }
  
  public Field(Object paramObject1, Object paramObject2, Object paramObject3, Object paramObject4) { this(paramObject1, paramObject2, paramObject3, paramObject4, null, null, 0, 0); }
  
  public Field(Object paramObject1, Object paramObject2, Object paramObject3, Object paramObject4, Object paramObject5, Object paramObject6) { this(paramObject1, paramObject2, paramObject3, paramObject4, paramObject5, paramObject6, 0, 0); }
  
  public static IPersistentVector getBasis() { return Tuple.create(Symbol.intern(null, "name"), Symbol.intern(null, "type"), Symbol.intern(null, "declaring-class"), Symbol.intern(null, "flags")); }
  
  public static Field create(IPersistentMap paramIPersistentMap) {
    Object object1 = paramIPersistentMap.valAt(Keyword.intern("name"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("name"));
    Object object2 = paramIPersistentMap.valAt(Keyword.intern("type"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("type"));
    Object object3 = paramIPersistentMap.valAt(Keyword.intern("declaring-class"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("declaring-class"));
    Object object4 = paramIPersistentMap.valAt(Keyword.intern("flags"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("flags"));
    return new Field(object1, object2, object3, object4, null, RT.seqOrElse(paramIPersistentMap), 0, 0);
  }
  
  public int hasheq() {
    int hq__7768__auto__12046 = this.__hasheq, h__7769__auto__12045 = RT.intCast(0xD22CBDFL ^ APersistentMap.mapHasheq((IPersistentMap)this));
    this.__hasheq = h__7769__auto__12045;
    return (hq__7768__auto__12046 == 0L) ? h__7769__auto__12045 : hq__7768__auto__12046;
  }
  
  public int hashCode() {
    int hash__7771__auto__12048 = this.__hash, h__7772__auto__12047 = APersistentMap.mapHash((IPersistentMap)this);
    this.__hash = h__7772__auto__12047;
    return (hash__7771__auto__12048 == 0L) ? h__7772__auto__12047 : hash__7771__auto__12048;
  }
  
  public boolean equals(Object G__12030) { G__12030 = null;
    return APersistentMap.mapEquals((IPersistentMap)this, G__12030); }
  
  public IPersistentMap meta() { return (IPersistentMap)this.__meta; }
  
  public IObj withMeta(IPersistentMap G__12030) { G__12030 = null;
    return (IObj)new Field(this.name, this.type, this.declaring_class, this.flags, G__12030, this.__extmap, this.__hash, this.__hasheq); }
  
  public Object valAt(Object k__7777__auto__) { k__7777__auto__ = null;
    return ((ILookup)this).valAt(k__7777__auto__, null); }
  
  public Object valAt(Object k__7779__auto__, Object else__7780__auto__) {
    Object G__12043 = k__7779__auto__;
    switch (Util.hash(G__12043) >> 19 & 0x3) {
      case 0:
        if (G__12043 == const__11);
        break;
      case 1:
        if (G__12043 == const__8);
        break;
      case 2:
        if (G__12043 == const__9);
        break;
      case 3:
        if (G__12043 == const__10);
        break;
    } 
    k__7779__auto__ = null;
    else__7780__auto__ = null;
    this = null;
    return RT.get(this.__extmap, k__7779__auto__, else__7780__auto__);
  }
  
  public ILookupThunk getLookupThunk(Keyword k__7782__auto__) {
    Object gclass = core.class.invokeStatic(this), G__12034 = k__7782__auto__ = null;
    switch (Util.hash(G__12034) >> 19 & 0x3) {
      case 0:
        if (G__12034 == const__11)
          gclass = null; 
        break;
      case 1:
        if (G__12034 == const__8)
          gclass = null; 
        break;
      case 2:
        if (G__12034 == const__9)
          gclass = null; 
        break;
      case 3:
        if (G__12034 == const__10)
          gclass = null; 
        break;
    } 
    return (ILookupThunk)null;
  }
  
  public int count() { return RT.intCast(Numbers.add(4L, RT.count(this.__extmap))); }
  
  public IPersistentCollection empty() { throw (Throwable)new UnsupportedOperationException((String)core.str.invokeStatic("Can't create empty: ", ArraySeq.create(new Object[] { "clojure.reflect.Field" }))); }
  
  public IPersistentCollection cons(Object e__7786__auto__) { e__7786__auto__ = null;
    this = null;
    return (IPersistentCollection)((IFn)const__24).invoke(this, e__7786__auto__); }
  
  public boolean equiv(Object G__12030) {
    boolean or__5516__auto__12053 = Util.identical(this, G__12030);
    Object G__12030 = G__12030 = null;
    boolean and__5514__auto__12052 = Util.equiv(this.name, ((Field)G__12030).name), and__5514__auto__12051 = Util.equiv(this.type, ((Field)G__12030).type), and__5514__auto__12050 = Util.equiv(this.declaring_class, ((Field)G__12030).declaring_class), and__5514__auto__12049 = Util.equiv(this.flags, ((Field)G__12030).flags);
    G__12030 = null;
    return RT.booleanCast(or__5516__auto__12053 ? (or__5516__auto__12053 ? Boolean.TRUE : Boolean.FALSE) : (Util.identical(core.class.invokeStatic(this), core.class.invokeStatic(G__12030)) ? (and__5514__auto__12052 ? (and__5514__auto__12051 ? (and__5514__auto__12050 ? (and__5514__auto__12049 ? (Util.equiv(this.__extmap, ((Field)G__12030).__extmap) ? Boolean.TRUE : Boolean.FALSE) : (and__5514__auto__12049 ? Boolean.TRUE : Boolean.FALSE)) : (and__5514__auto__12050 ? Boolean.TRUE : Boolean.FALSE)) : (and__5514__auto__12051 ? Boolean.TRUE : Boolean.FALSE)) : (and__5514__auto__12052 ? Boolean.TRUE : Boolean.FALSE)) : null));
  }
  
  public boolean containsKey(Object k__7789__auto__) { k__7789__auto__ = null;
    this = null;
    return ((Boolean)core.not.invokeStatic(Util.identical(this, ((ILookup)this).valAt(k__7789__auto__, this)) ? Boolean.TRUE : Boolean.FALSE)).booleanValue(); }
  
  public IMapEntry entryAt(Object k__7791__auto__) {
    Object v__7792__auto__12054 = ((ILookup)this).valAt(k__7791__auto__, this);
    k__7791__auto__ = null;
    v__7792__auto__12054 = null;
    this = null;
    return (IMapEntry)(Util.identical(this, v__7792__auto__12054) ? null : MapEntry.create(k__7791__auto__, v__7792__auto__12054));
  }
  
  public ISeq seq() { this = null;
    return (ISeq)core.seq__5402.invokeStatic(core.concat.invokeStatic(Tuple.create(MapEntry.create(const__8, this.name), MapEntry.create(const__9, this.type), MapEntry.create(const__10, this.declaring_class), MapEntry.create(const__11, this.flags)), this.__extmap)); }
  
  public Iterator iterator() { return (Iterator)new RecordIterator((ILookup)this, (IPersistentVector)const__19, (Iterator)RT.iter(this.__extmap)); }
  
  public IPersistentMap assoc(Object k__7796__auto__, Object G__12030) {
    Object pred__12032 = const__17.getRawRoot(), expr__12033 = k__7796__auto__;
    if (((IFn)pred__12032).invoke(const__8, expr__12033) != null) {
      if (((IFn)pred__12032).invoke(const__8, expr__12033) != Boolean.FALSE)
        G__12030 = null; 
    } else {
      ((IFn)pred__12032).invoke(const__8, expr__12033);
    } 
    if (((IFn)pred__12032).invoke(const__9, expr__12033) != null) {
      if (((IFn)pred__12032).invoke(const__9, expr__12033) != Boolean.FALSE)
        G__12030 = null; 
    } else {
      ((IFn)pred__12032).invoke(const__9, expr__12033);
    } 
    if (((IFn)pred__12032).invoke(const__10, expr__12033) != null) {
      if (((IFn)pred__12032).invoke(const__10, expr__12033) != Boolean.FALSE)
        G__12030 = null; 
    } else {
      ((IFn)pred__12032).invoke(const__10, expr__12033);
    } 
    pred__12032 = null;
    expr__12033 = null;
    if (((IFn)pred__12032).invoke(const__11, expr__12033) != null) {
      if (((IFn)pred__12032).invoke(const__11, expr__12033) != Boolean.FALSE)
        G__12030 = null; 
    } else {
      ((IFn)pred__12032).invoke(const__11, expr__12033);
    } 
    k__7796__auto__ = null;
    G__12030 = null;
    return (IPersistentMap)new Field(this.name, this.type, this.declaring_class, this.flags, this.__meta, core.assoc__5416.invokeStatic(this.__extmap, k__7796__auto__, G__12030));
  }
  
  public IPersistentMap without(Object k__7798__auto__) { if (core.contains_QMARK_.invokeStatic(const__12, k__7798__auto__) != null) {
      if (core.contains_QMARK_.invokeStatic(const__12, k__7798__auto__) != Boolean.FALSE) {
        k__7798__auto__ = null;
        this = null;
      } 
    } else {
      core.contains_QMARK_.invokeStatic(const__12, k__7798__auto__);
    } 
    k__7798__auto__ = null;
    return (IPersistentMap)new Field(this.name, this.type, this.declaring_class, this.flags, this.__meta, core.not_empty.invokeStatic(core.dissoc.invokeStatic(this.__extmap, k__7798__auto__))); }
  
  public int size() { this = null;
    return ((Counted)this).count(); }
  
  public boolean isEmpty() { return Util.equiv(0L, ((Counted)this).count()); }
  
  public boolean containsValue(Object v__7802__auto__) { v__7802__auto__ = null;
    return RT.booleanCast(core.some.invokeStatic(RT.set(new Object[] { v__7802__auto__ }, ), core.vals.invokeStatic(this))); }
  
  public Object get(Object k__7804__auto__) { k__7804__auto__ = null;
    return ((ILookup)this).valAt(k__7804__auto__); }
  
  public Object put(Object k__7806__auto__, Object v__7807__auto__) { throw (Throwable)new UnsupportedOperationException(); }
  
  public Object remove(Object k__7809__auto__) { throw (Throwable)new UnsupportedOperationException(); }
  
  public void putAll(Map m__7811__auto__) { throw (Throwable)new UnsupportedOperationException(); }
  
  public void clear() { throw (Throwable)new UnsupportedOperationException(); }
  
  public Set keySet() { this = null;
    return (Set)core.set.invokeStatic(core.keys.invokeStatic(this)); }
  
  public Collection values() { this = null;
    return (Collection)core.vals.invokeStatic(this); }
  
  public Set entrySet() { this = null;
    return (Set)core.set.invokeStatic(this); }
}
