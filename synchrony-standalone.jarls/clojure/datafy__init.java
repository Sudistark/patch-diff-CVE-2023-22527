package clojure;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class datafy__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__3;
  
  public static final AFn const__4;
  
  public static final Var const__5;
  
  public static final Var const__6;
  
  public static final AFn const__14;
  
  public static final Var const__15;
  
  public static final AFn const__18;
  
  public static final Var const__19;
  
  public static final AFn const__23;
  
  public static final Var const__24;
  
  public static final Object const__25;
  
  public static final Var const__26;
  
  public static final Keyword const__27;
  
  public static final Object const__28;
  
  public static final Object const__29;
  
  public static final Object const__30;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new datafy.fn__11921());
    const__6.setMeta((IPersistentMap)const__14);
    const__6.bindRoot(new datafy.datafy());
    const__15.setMeta((IPersistentMap)const__18);
    const__15.bindRoot(new datafy.nav());
    const__19.setMeta((IPersistentMap)const__23);
    const__19.bindRoot(new datafy.sortmap());
    new Object[2][0] = const__27;
    new Object[2][1] = new datafy.fn__11932();
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "clojure.datafy")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Functions to turn objects into data. Alpha, subject to change" }));
    const__3 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Functions to turn objects into data. Alpha, subject to change" });
    const__4 = (AFn)Symbol.intern(null, "clojure.core");
    const__5 = (Var)RT.var("clojure.core", "*warn-on-reflection*");
    const__6 = (Var)RT.var("clojure.datafy", "datafy");
    const__14 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "doc"), "Attempts to return x as data.\n  datafy will return the value of clojure.core.protocols/datafy. If\n  the value has been transformed and the result supports\n  metadata, :clojure.datafy/obj will be set on the metadata to the\n  original value of x, and :clojure.datafy/class to the name of the\n  class of x, as a symbol.", RT.keyword(null, "line"), Integer.valueOf(15), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/datafy.clj" });
    const__15 = (Var)RT.var("clojure.datafy", "nav");
    const__18 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "coll"), Symbol.intern(null, "k"), Symbol.intern(null, "v")) })), RT.keyword(null, "doc"), "Returns (possibly transformed) v in the context of coll and k (a\n  key/index or nil). Callers should attempt to provide the key/index\n  context k for Indexed/Associative/ILookup colls if possible, but not\n  to fabricate one e.g. for sequences (pass nil). nav returns the\n  value of clojure.core.protocols/nav.", RT.keyword(null, "line"), Integer.valueOf(30), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/datafy.clj" });
    const__19 = (Var)RT.var("clojure.datafy", "sortmap");
    const__23 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m")) })), RT.keyword(null, "line"), Integer.valueOf(39), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/datafy.clj" });
    const__24 = (Var)RT.var("clojure.core", "extend");
    const__25 = RT.classForName("java.lang.Throwable");
    const__26 = (Var)RT.var("clojure.core.protocols", "Datafiable");
    const__27 = (Keyword)RT.keyword(null, "datafy");
    const__28 = RT.classForName("clojure.lang.IRef");
    const__29 = RT.classForName("clojure.lang.Namespace");
    const__30 = RT.classForName("java.lang.Class");
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("clojure.datafy__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
