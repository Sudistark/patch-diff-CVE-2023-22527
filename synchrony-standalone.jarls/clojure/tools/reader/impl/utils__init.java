package clojure.tools.reader.impl;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class utils__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__3;
  
  public static final AFn const__4;
  
  public static final Var const__5;
  
  public static final AFn const__13;
  
  public static final Var const__14;
  
  public static final AFn const__16;
  
  public static final Var const__17;
  
  public static final AFn const__20;
  
  public static final Var const__21;
  
  public static final AFn const__24;
  
  public static final Var const__25;
  
  public static final AFn const__29;
  
  public static final Var const__30;
  
  public static final AFn const__33;
  
  public static final Var const__34;
  
  public static final AFn const__37;
  
  public static final Var const__38;
  
  public static final AFn const__41;
  
  public static final Var const__42;
  
  public static final AFn const__45;
  
  public static final Var const__46;
  
  public static final AFn const__49;
  
  public static final Var const__50;
  
  public static final AFn const__53;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new utils.fn__3204());
    const__5.setMeta((IPersistentMap)const__13);
    const__5.bindRoot(new utils.char());
    const__14.setMeta((IPersistentMap)const__16);
    const__14






      
      .bindRoot(((IFn)new utils.fn__3208()).invoke());
    const__17.setMeta((IPersistentMap)const__20);
    const__17.bindRoot(new utils.compile_when());
    ((Var)const__17)







      
      .setMacro();
    const__21.setMeta((IPersistentMap)const__24);
    const__21.bindRoot(new utils.ex_info_QMARK_());
    const__25.setMeta((IPersistentMap)const__29);
    const__25.bindRoot(new utils.whitespace_QMARK_());
    const__30.setMeta((IPersistentMap)const__33);
    const__30.bindRoot(new utils.numeric_QMARK_());
    const__34.setMeta((IPersistentMap)const__37);
    const__34.bindRoot(new utils.newline_QMARK_());
    const__38.setMeta((IPersistentMap)const__41);
    const__38.bindRoot(new utils.desugar_meta());
    const__42.setMeta((IPersistentMap)const__45);
    const__42.bindRoot(new utils.make_var());
    const__46.setMeta((IPersistentMap)const__49);
    const__46.bindRoot(new utils.namespace_keys());
    const__50.setMeta((IPersistentMap)const__53);
    const__50.bindRoot(new utils.second_SINGLEQUOTE_());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "clojure.tools.reader.impl.utils")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "skip-wiki"), Boolean.TRUE }));
    const__3 = (AFn)RT.map(new Object[] { RT.keyword(null, "skip-wiki"), Boolean.TRUE });
    const__4 = (AFn)Symbol.intern(null, "clojure.core");
    const__5 = (Var)RT.var("clojure.tools.reader.impl.utils", "char");
    const__13 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(12), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader/impl/utils.clj" });
    const__14 = (Var)RT.var("clojure.tools.reader.impl.utils", "<=clojure-1-7-alpha5");
    const__16 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(16), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader/impl/utils.clj" });
    const__17 = (Var)RT.var("clojure.tools.reader.impl.utils", "compile-when");
    const__20 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "cond"), Symbol.intern(null, "&"), Symbol.intern(null, "then")) })), RT.keyword(null, "line"), Integer.valueOf(26), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader/impl/utils.clj" });
    const__21 = (Var)RT.var("clojure.tools.reader.impl.utils", "ex-info?");
    const__24 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ex")) })), RT.keyword(null, "line"), Integer.valueOf(30), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader/impl/utils.clj" });
    const__25 = (Var)RT.var("clojure.tools.reader.impl.utils", "whitespace?");
    const__29 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ch")) })), RT.keyword(null, "doc"), "Checks whether a given character is whitespace", RT.keyword(null, "line"), Integer.valueOf(76), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader/impl/utils.clj" });
    const__30 = (Var)RT.var("clojure.tools.reader.impl.utils", "numeric?");
    const__33 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "ch")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Character") }))) })), RT.keyword(null, "doc"), "Checks whether a given character is numeric", RT.keyword(null, "line"), Integer.valueOf(83), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader/impl/utils.clj" });
    const__34 = (Var)RT.var("clojure.tools.reader.impl.utils", "newline?");
    const__37 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "c")) })), RT.keyword(null, "doc"), "Checks whether the character is a newline", RT.keyword(null, "line"), Integer.valueOf(89), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader/impl/utils.clj" });
    const__38 = (Var)RT.var("clojure.tools.reader.impl.utils", "desugar-meta");
    const__41 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f")) })), RT.keyword(null, "doc"), "Resolves syntactical sugar in metadata", RT.keyword(null, "line"), Integer.valueOf(95), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader/impl/utils.clj" });
    const__42 = (Var)RT.var("clojure.tools.reader.impl.utils", "make-var");
    const__45 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "doc"), "Returns an anonymous unbound Var", RT.keyword(null, "line"), Integer.valueOf(104), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader/impl/utils.clj" });
    const__46 = (Var)RT.var("clojure.tools.reader.impl.utils", "namespace-keys");
    const__49 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ns"), Symbol.intern(null, "keys")) })), RT.keyword(null, "line"), Integer.valueOf(109), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader/impl/utils.clj" });
    const__50 = (Var)RT.var("clojure.tools.reader.impl.utils", "second'");
    const__53 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Tuple.create(Symbol.intern(null, "a"), Symbol.intern(null, "b"))) })), RT.keyword(null, "line"), Integer.valueOf(126), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader/impl/utils.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("clojure.tools.reader.impl.utils__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
