package clojure.tools.reader.impl;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;
import java.util.regex.Pattern;

public class commons__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__12;
  
  public static final Var const__13;
  
  public static final AFn const__16;
  
  public static final Var const__17;
  
  public static final AFn const__20;
  
  public static final Var const__21;
  
  public static final AFn const__25;
  
  public static final Object const__26;
  
  public static final Var const__27;
  
  public static final AFn const__29;
  
  public static final Object const__30;
  
  public static final Var const__31;
  
  public static final AFn const__33;
  
  public static final Object const__34;
  
  public static final Var const__35;
  
  public static final AFn const__39;
  
  public static final Var const__40;
  
  public static final AFn const__43;
  
  public static final Var const__44;
  
  public static final AFn const__47;
  
  public static final Var const__48;
  
  public static final AFn const__51;
  
  public static final Var const__52;
  
  public static final AFn const__55;
  
  public static final Var const__56;
  
  public static final AFn const__59;
  
  public static final Var const__60;
  
  public static final AFn const__63;
  
  public static void load() { LockingTransaction.runInTransaction((Callable)new commons.fn__3466());
    const__3.setMeta((IPersistentMap)const__12);
    const__3.bindRoot(new commons.number_literal_QMARK_());
    const__13.setMeta((IPersistentMap)const__16);
    const__13.bindRoot(new commons.read_past());
    const__17.setMeta((IPersistentMap)const__20);
    const__17.bindRoot(new commons.skip_line());
    const__21.setMeta((IPersistentMap)const__25);
    const__21.bindRoot(const__26);
    const__27.setMeta((IPersistentMap)const__29);
    const__27.bindRoot(const__30);
    const__31.setMeta((IPersistentMap)const__33);
    const__31.bindRoot(const__34);
    const__35.setMeta((IPersistentMap)const__39);
    const__35.bindRoot(new commons.match_int());
    const__40.setMeta((IPersistentMap)const__43);
    const__40.bindRoot(new commons.match_ratio());
    const__44.setMeta((IPersistentMap)const__47);
    const__44.bindRoot(new commons.match_float());
    const__48.setMeta((IPersistentMap)const__51);
    const__48.bindRoot(new commons.match_number());
    const__52.setMeta((IPersistentMap)const__55);
    const__52.bindRoot(new commons.parse_symbol());
    const__56.setMeta((IPersistentMap)const__59);
    const__56.bindRoot(new commons.read_comment());
    const__60.setMeta((IPersistentMap)const__63);
    const__60.bindRoot(new commons.throwing_reader()); }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "clojure.tools.reader.impl.commons");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("clojure.tools.reader.impl.commons", "number-literal?");
    const__12 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "reader"), Symbol.intern(null, "initch")) })), RT.keyword(null, "doc"), "Checks whether the reader is at the start of a number literal", RT.keyword(null, "line"), Integer.valueOf(21), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader/impl/commons.clj" });
    const__13 = (Var)RT.var("clojure.tools.reader.impl.commons", "read-past");
    const__16 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pred"), Symbol.intern(null, "rdr")) })), RT.keyword(null, "doc"), "Read until first character that doesn't match pred, returning\n   char.", RT.keyword(null, "line"), Integer.valueOf(28), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader/impl/commons.clj" });
    const__17 = (Var)RT.var("clojure.tools.reader.impl.commons", "skip-line");
    const__20 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "reader")) })), RT.keyword(null, "doc"), "Advances the reader to the end of a line. Returns the reader", RT.keyword(null, "line"), Integer.valueOf(37), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader/impl/commons.clj" });
    const__21 = (Var)RT.var("clojure.tools.reader.impl.commons", "int-pattern");
    const__25 = (AFn)RT.map(new Object[] { RT.keyword(null, "tag"), RT.classForName("java.util.regex.Pattern"), RT.keyword(null, "line"), Integer.valueOf(45), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader/impl/commons.clj" });
    const__26 = Pattern.compile("([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+)|0[0-9]+)(N)?");
    const__27 = (Var)RT.var("clojure.tools.reader.impl.commons", "ratio-pattern");
    const__29 = (AFn)RT.map(new Object[] { RT.keyword(null, "tag"), RT.classForName("java.util.regex.Pattern"), RT.keyword(null, "line"), Integer.valueOf(46), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader/impl/commons.clj" });
    const__30 = Pattern.compile("([-+]?[0-9]+)/([0-9]+)");
    const__31 = (Var)RT.var("clojure.tools.reader.impl.commons", "float-pattern");
    const__33 = (AFn)RT.map(new Object[] { RT.keyword(null, "tag"), RT.classForName("java.util.regex.Pattern"), RT.keyword(null, "line"), Integer.valueOf(47), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader/impl/commons.clj" });
    const__34 = Pattern.compile("([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?");
    const__35 = (Var)RT.var("clojure.tools.reader.impl.commons", "match-int");
    const__39 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "m")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Matcher") }))) })), RT.keyword(null, "line"), Integer.valueOf(49), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader/impl/commons.clj" });
    const__40 = (Var)RT.var("clojure.tools.reader.impl.commons", "match-ratio");
    const__43 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "m")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Matcher") }))) })), RT.keyword(null, "line"), Integer.valueOf(70), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader/impl/commons.clj" });
    const__44 = (Var)RT.var("clojure.tools.reader.impl.commons", "match-float");
    const__47 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "s")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") })), ((IObj)Symbol.intern(null, "m")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Matcher") }))) })), RT.keyword(null, "line"), Integer.valueOf(80), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader/impl/commons.clj" });
    const__48 = (Var)RT.var("clojure.tools.reader.impl.commons", "match-number");
    const__51 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "s")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") }))) })), RT.keyword(null, "line"), Integer.valueOf(86), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader/impl/commons.clj" });
    const__52 = (Var)RT.var("clojure.tools.reader.impl.commons", "parse-symbol");
    const__55 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "token")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") }))) })), RT.keyword(null, "doc"), "Parses a string into a vector of the namespace and symbol", RT.keyword(null, "line"), Integer.valueOf(97), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader/impl/commons.clj" });
    const__56 = (Var)RT.var("clojure.tools.reader.impl.commons", "read-comment");
    const__59 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "rdr"), Symbol.intern(null, "&"), Symbol.intern(null, "_")) })), RT.keyword(null, "line"), Integer.valueOf(123), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader/impl/commons.clj" });
    const__60 = (Var)RT.var("clojure.tools.reader.impl.commons", "throwing-reader");
    const__63 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "msg")) })), RT.keyword(null, "line"), Integer.valueOf(127), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader/impl/commons.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("clojure.tools.reader.impl.commons__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
