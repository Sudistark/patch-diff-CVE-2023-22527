package clojure.tools.reader;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class default_data_readers__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__3;
  
  public static final AFn const__4;
  
  public static final Var const__5;
  
  public static final AFn const__14;
  
  public static final Var const__15;
  
  public static final AFn const__18;
  
  public static final Var const__19;
  
  public static final AFn const__22;
  
  public static final Var const__23;
  
  public static final AFn const__26;
  
  public static final Var const__27;
  
  public static final AFn const__30;
  
  public static final Var const__31;
  
  public static final AFn const__34;
  
  public static final Var const__35;
  
  public static final AFn const__38;
  
  public static final Var const__39;
  
  public static final AFn const__42;
  
  public static final Var const__43;
  
  public static final AFn const__45;
  
  public static final Var const__46;
  
  public static final AFn const__49;
  
  public static final Var const__50;
  
  public static final AFn const__54;
  
  public static final Var const__55;
  
  public static final AFn const__58;
  
  public static final Var const__59;
  
  public static final Object const__60;
  
  public static final Var const__61;
  
  public static final Var const__62;
  
  public static final AFn const__65;
  
  public static final Object const__66;
  
  public static final Var const__67;
  
  public static final AFn const__69;
  
  public static final Var const__70;
  
  public static final AFn const__73;
  
  public static final Object const__74;
  
  public static final Var const__75;
  
  public static final AFn const__78;
  
  public static final Var const__79;
  
  public static final AFn const__82;
  
  public static final Var const__83;
  
  public static final AFn const__86;
  
  public static final Var const__87;
  
  public static final AFn const__89;
  
  public static final Var const__90;
  
  public static final Var const__91;
  
  public static final AFn const__93;
  
  public static final Var const__94;
  
  public static final AFn const__96;
  
  public static final Var const__97;
  
  public static final AFn const__100;
  
  public static final Object const__101;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new default_data_readers.fn__3494());
    const__5.setMeta((IPersistentMap)const__14);
    const__5.bindRoot(new default_data_readers.fail());
    ((Var)const__5)







      
      .setMacro();
    const__15.setMeta((IPersistentMap)const__18);
    const__15.bindRoot(new default_data_readers.verify());
    ((Var)const__15)


      
      .setMacro();
    const__19.setMeta((IPersistentMap)const__22);
    const__19.bindRoot(new default_data_readers.divisible_QMARK_());
    const__23.setMeta((IPersistentMap)const__26);
    const__23.bindRoot(new default_data_readers.indivisible_QMARK_());
    const__27.setMeta((IPersistentMap)const__30);
    const__27.bindRoot(new default_data_readers.parse_int());
    const__31.setMeta((IPersistentMap)const__34);
    const__31.bindRoot(new default_data_readers.zero_fill_right());
    const__35.setMeta((IPersistentMap)const__38);
    const__35












































































      
      .bindRoot(((IFn)new default_data_readers.fn__3502()).invoke());
    const__39.setMeta((IPersistentMap)const__42);
    const__39.bindRoot(new default_data_readers.leap_year_QMARK_());
    const__43.setMeta((IPersistentMap)const__45);
    const__43






























      
      .bindRoot(((IFn)new default_data_readers.fn__3513()).invoke());
    const__46.setMeta((IPersistentMap)const__49);
    const__46.bindRoot(new default_data_readers.validated());
    const__50.setMeta((IPersistentMap)const__54);
    const__50






























      
      .bindRoot(((IFn)new default_data_readers.fn__3520()).invoke());
    const__55.setMeta((IPersistentMap)const__58);
    const__55.bindRoot(new default_data_readers.print_date());
    const__62.setMeta((IPersistentMap)const__65);
    const__62.bindRoot(new default_data_readers.print_calendar());
    const__67.setMeta((IPersistentMap)const__69);
    const__67






      
      .bindRoot(((IFn)new default_data_readers.fn__3536()).invoke());
    const__70.setMeta((IPersistentMap)const__73);
    const__70.bindRoot(new default_data_readers.print_timestamp());
    const__75.setMeta((IPersistentMap)const__78);
    const__75.bindRoot(new default_data_readers.construct_calendar());
    const__79.setMeta((IPersistentMap)const__82);
    const__79.bindRoot(new default_data_readers.construct_date());
    const__83.setMeta((IPersistentMap)const__86);
    const__83.bindRoot(new default_data_readers.construct_timestamp());
    const__87.setMeta((IPersistentMap)const__89);
    const__87












































      
      .bindRoot(((IFn)const__90.getRawRoot()).invoke(const__35.getRawRoot(), ((IFn)const__46.getRawRoot()).invoke(const__79.getRawRoot())));
    const__91.setMeta((IPersistentMap)const__93);
    const__91




      
      .bindRoot(((IFn)const__90.getRawRoot()).invoke(const__35.getRawRoot(), ((IFn)const__46.getRawRoot()).invoke(const__75.getRawRoot())));
    const__94.setMeta((IPersistentMap)const__96);
    const__94





      
      .bindRoot(((IFn)const__90.getRawRoot()).invoke(const__35.getRawRoot(), ((IFn)const__46.getRawRoot()).invoke(const__83.getRawRoot())));
    const__97.setMeta((IPersistentMap)const__100);
    const__97.bindRoot(new default_data_readers.default_uuid_reader());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "clojure.tools.reader.default-data-readers")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "skip-wiki"), Boolean.TRUE }));
    const__3 = (AFn)RT.map(new Object[] { RT.keyword(null, "skip-wiki"), Boolean.TRUE });
    const__4 = (AFn)Symbol.intern(null, "clojure.core");
    const__5 = (Var)RT.var("clojure.tools.reader.default-data-readers", "fail");
    const__14 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "msg")) })), RT.keyword(null, "line"), Integer.valueOf(20), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader/default_data_readers.clj" });
    const__15 = (Var)RT.var("clojure.tools.reader.default-data-readers", "verify");
    const__18 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "test"), Symbol.intern(null, "msg")), Tuple.create(Symbol.intern(null, "test")) })), RT.keyword(null, "line"), Integer.valueOf(24), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader/default_data_readers.clj" });
    const__19 = (Var)RT.var("clojure.tools.reader.default-data-readers", "divisible?");
    const__22 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "num"), Symbol.intern(null, "div")) })), RT.keyword(null, "line"), Integer.valueOf(28), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader/default_data_readers.clj" });
    const__23 = (Var)RT.var("clojure.tools.reader.default-data-readers", "indivisible?");
    const__26 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "num"), Symbol.intern(null, "div")) })), RT.keyword(null, "line"), Integer.valueOf(32), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader/default_data_readers.clj" });
    const__27 = (Var)RT.var("clojure.tools.reader.default-data-readers", "parse-int");
    const__30 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "s")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") }))) })), RT.keyword(null, "line"), Integer.valueOf(40), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader/default_data_readers.clj" });
    const__31 = (Var)RT.var("clojure.tools.reader.default-data-readers", "zero-fill-right");
    const__34 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "s")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") })), Symbol.intern(null, "width")) })), RT.keyword(null, "line"), Integer.valueOf(43), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader/default_data_readers.clj" });
    const__35 = (Var)RT.var("clojure.tools.reader.default-data-readers", "parse-timestamp");
    const__38 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(51), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader/default_data_readers.clj", RT.keyword(null, "doc"), "Parse a string containing an RFC3339-like like timestamp.\n\nThe function new-instant is called with the following arguments.\n\n                min  max           default\n                ---  ------------  -------\n  years          0           9999      N/A (s must provide years)\n  months         1             12        1\n  days           1             31        1 (actual max days depends\n  hours          0             23        0  on month and year)\n  minutes        0             59        0\n  seconds        0             60        0 (though 60 is only valid\n  nanoseconds    0      999999999        0  when minutes is 59)\n  offset-sign   -1              1        0\n  offset-hours   0             23        0\n  offset-minutes 0             59        0\n\nThese are all integers and will be non-nil. (The listed defaults\nwill be passed if the corresponding field is not present in s.)\n\nGrammar (of s):\n\n  date-fullyear   = 4DIGIT\n  date-month      = 2DIGIT  ; 01-12\n  date-mday       = 2DIGIT  ; 01-28, 01-29, 01-30, 01-31 based on\n                            ; month/year\n  time-hour       = 2DIGIT  ; 00-23\n  time-minute     = 2DIGIT  ; 00-59\n  time-second     = 2DIGIT  ; 00-58, 00-59, 00-60 based on leap second\n                            ; rules\n  time-secfrac    = '.' 1*DIGIT\n  time-numoffset  = ('+' / '-') time-hour ':' time-minute\n  time-offset     = 'Z' / time-numoffset\n\n  time-part       = time-hour [ ':' time-minute [ ':' time-second\n                    [time-secfrac] [time-offset] ] ]\n\n  timestamp       = date-year [ '-' date-month [ '-' date-mday\n                    [ 'T' time-part ] ] ]\n\nUnlike RFC3339:\n\n  - we only parse the timestamp format\n  - timestamp can elide trailing components\n  - time-offset is optional (defaults to +00:00)\n\nThough time-offset is syntactically optional, a missing time-offset\nwill be treated as if the time-offset zero (+00:00) had been\nspecified.\n" });
    const__39 = (Var)RT.var("clojure.tools.reader.default-data-readers", "leap-year?");
    const__42 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "year")) })), RT.keyword(null, "line"), Integer.valueOf(127), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader/default_data_readers.clj" });
    const__43 = (Var)RT.var("clojure.tools.reader.default-data-readers", "days-in-month");
    const__45 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(133), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader/default_data_readers.clj" });
    const__46 = (Var)RT.var("clojure.tools.reader.default-data-readers", "validated");
    const__49 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "new-instance")) })), RT.keyword(null, "doc"), "Return a function which constructs and instant by calling constructor\nafter first validating that those arguments are in range and otherwise\nplausible. The resulting function will throw an exception if called\nwith invalid arguments.", RT.keyword(null, "line"), Integer.valueOf(139), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader/default_data_readers.clj" });
    const__50 = (Var)RT.var("clojure.tools.reader.default-data-readers", "thread-local-utc-date-format");
    const__54 = (AFn)RT.map(new Object[] { RT.keyword(null, "tag"), RT.classForName("java.lang.ThreadLocal"), RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(163), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader/default_data_readers.clj" });
    const__55 = (Var)RT.var("clojure.tools.reader.default-data-readers", "print-date");
    const__58 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "d")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "java.util.Date") })), ((IObj)Symbol.intern(null, "w")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "java.io.Writer") }))) })), RT.keyword(null, "doc"), "Print a java.util.Date as RFC3339 timestamp, always in UTC.", RT.keyword(null, "line"), Integer.valueOf(172), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/tools/reader/default_data_readers.clj" });
    const__59 = (Var)RT.var("clojure.core", "print-method");
    const__60 = RT.classForName("java.util.Date");
    const__61 = (Var)RT.var("clojure.core", "print-dup");
    const__62 = (Var)RT.var("clojure.tools.reader.default-data-readers", "print-calendar");
    const__65 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "c")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "java.util.Calendar") })), ((IObj)Symbol.intern(null, "w")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "java.io.Writer") }))) })), RT.keyword(null, "doc"), "Print a java.util.Calendar as RFC3339 timestamp, preserving timezone.", RT.keyword(null, "line"), Integer.valueOf(188), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/tools/reader/default_data_readers.clj" });
    const__66 = RT.classForName("java.util.Calendar");
    const__67 = (Var)RT.var("clojure.tools.reader.default-data-readers", "thread-local-utc-timestamp-format");
    const__69 = (AFn)RT.map(new Object[] { RT.keyword(null, "tag"), RT.classForName("java.lang.ThreadLocal"), RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(209), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader/default_data_readers.clj" });
    const__70 = (Var)RT.var("clojure.tools.reader.default-data-readers", "print-timestamp");
    const__73 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "ts")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "java.sql.Timestamp") })), ((IObj)Symbol.intern(null, "w")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "java.io.Writer") }))) })), RT.keyword(null, "doc"), "Print a java.sql.Timestamp as RFC3339 timestamp, always in UTC.", RT.keyword(null, "line"), Integer.valueOf(217), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/tools/reader/default_data_readers.clj" });
    const__74 = RT.classForName("java.sql.Timestamp");
    const__75 = (Var)RT.var("clojure.tools.reader.default-data-readers", "construct-calendar");
    const__78 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)RT.vector(new Object[] { Symbol.intern(null, "years"), Symbol.intern(null, "months"), Symbol.intern(null, "days"), Symbol.intern(null, "hours"), Symbol.intern(null, "minutes"), Symbol.intern(null, "seconds"), Symbol.intern(null, "nanoseconds"), Symbol.intern(null, "offset-sign"), Symbol.intern(null, "offset-hours"), Symbol.intern(null, "offset-minutes") })).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "java.util.GregorianCalendar") })) })), RT.keyword(null, "doc"), "Construct a java.util.Calendar, preserving the timezone\noffset, but truncating the subsecond fraction to milliseconds.", RT.keyword(null, "line"), Integer.valueOf(240), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/tools/reader/default_data_readers.clj" });
    const__79 = (Var)RT.var("clojure.tools.reader.default-data-readers", "construct-date");
    const__82 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { RT.vector(new Object[] { Symbol.intern(null, "years"), Symbol.intern(null, "months"), Symbol.intern(null, "days"), Symbol.intern(null, "hours"), Symbol.intern(null, "minutes"), Symbol.intern(null, "seconds"), Symbol.intern(null, "nanoseconds"), Symbol.intern(null, "offset-sign"), Symbol.intern(null, "offset-hours"), Symbol.intern(null, "offset-minutes") }) })), RT.keyword(null, "doc"), "Construct a java.util.Date, which expresses the original instant as\nmilliseconds since the epoch, UTC.", RT.keyword(null, "line"), Integer.valueOf(253), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/tools/reader/default_data_readers.clj" });
    const__83 = (Var)RT.var("clojure.tools.reader.default-data-readers", "construct-timestamp");
    const__86 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { RT.vector(new Object[] { Symbol.intern(null, "years"), Symbol.intern(null, "months"), Symbol.intern(null, "days"), Symbol.intern(null, "hours"), Symbol.intern(null, "minutes"), Symbol.intern(null, "seconds"), Symbol.intern(null, "nanoseconds"), Symbol.intern(null, "offset-sign"), Symbol.intern(null, "offset-hours"), Symbol.intern(null, "offset-minutes") }) })), RT.keyword(null, "doc"), "Construct a java.sql.Timestamp, which has nanosecond precision.", RT.keyword(null, "line"), Integer.valueOf(262), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/tools/reader/default_data_readers.clj" });
    const__87 = (Var)RT.var("clojure.tools.reader.default-data-readers", "read-instant-date");
    const__89 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(274), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader/default_data_readers.clj", RT.keyword(null, "doc"), "To read an instant as a java.util.Date, bind *data-readers* to a map with\nthis var as the value for the 'inst key. The timezone offset will be used\nto convert into UTC." });
    const__90 = (Var)RT.var("clojure.core", "partial");
    const__91 = (Var)RT.var("clojure.tools.reader.default-data-readers", "read-instant-calendar");
    const__93 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(280), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader/default_data_readers.clj", RT.keyword(null, "doc"), "To read an instant as a java.util.Calendar, bind *data-readers* to a map with\nthis var as the value for the 'inst key.  Calendar preserves the timezone\noffset." });
    const__94 = (Var)RT.var("clojure.tools.reader.default-data-readers", "read-instant-timestamp");
    const__96 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(286), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader/default_data_readers.clj", RT.keyword(null, "doc"), "To read an instant as a java.sql.Timestamp, bind *data-readers* to a\nmap with this var as the value for the 'inst key. Timestamp preserves\nfractional seconds with nanosecond precision. The timezone offset will\nbe used to convert into UTC." });
    const__97 = (Var)RT.var("clojure.tools.reader.default-data-readers", "default-uuid-reader");
  }
  
  public static void __init1() {
    const__100 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "form"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "string?"), Symbol.intern(null, "form") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(296), RT.keyword(null, "column"), Integer.valueOf(10) }))) })) })), RT.keyword(null, "line"), Integer.valueOf(295), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/reader/default_data_readers.clj" });
    const__101 = RT.classForName("java.util.UUID");
  }
  
  static  {
    __init0();
    __init1();
    Compiler.pushNSandLoader(RT.classForName("clojure.tools.reader.default_data_readers__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
