package clojure.tools.analyzer;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class env__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__11;
  
  public static final Var const__12;
  
  public static final AFn const__16;
  
  public static final Var const__17;
  
  public static final AFn const__20;
  
  public static final Var const__21;
  
  public static final AFn const__24;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new env.fn__641());
    const__3.setDynamic(true).setMeta((IPersistentMap)const__11);
    const__3.setDynamic(true).bindRoot(null);
    const__12.setMeta((IPersistentMap)const__16);
    const__12.bindRoot(new env.with_env());
    ((Var)const__12)











      
      .setMacro();
    const__17.setMeta((IPersistentMap)const__20);
    const__17.bindRoot(new env.ensure());
    ((Var)const__17)












      
      .setMacro();
    const__21.setMeta((IPersistentMap)const__24);
    const__21.bindRoot(new env.deref_env());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "clojure.tools.analyzer.env");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("clojure.tools.analyzer.env", "*env*");
    const__11 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(12), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/env.clj", RT.keyword(null, "doc"), "Global env atom\n   Required options:\n    * :namespaces an atom containing a map from namespace symbol to namespace map,\n      the namespace map contains at least the following keys:\n     ** :mappings a map of mappings of the namespace, symbol to var/class\n     ** :aliases a map of the aliases of the namespace, symbol to symbol\n     ** :ns a symbol representing the namespace" });
    const__12 = (Var)RT.var("clojure.tools.analyzer.env", "with-env");
    const__16 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "env"), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "doc"), "Binds the global env to env, then executes the body", RT.keyword(null, "line"), Integer.valueOf(22), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/env.clj" });
    const__17 = (Var)RT.var("clojure.tools.analyzer.env", "ensure");
    const__20 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "env"), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "doc"), "If *env* is not bound it binds it to env before executing the body", RT.keyword(null, "line"), Integer.valueOf(36), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/env.clj" });
    const__21 = (Var)RT.var("clojure.tools.analyzer.env", "deref-env");
    const__24 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "doc"), "Returns the value of the current global env if bound, otherwise\n   throws an exception.", RT.keyword(null, "line"), Integer.valueOf(44), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/env.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("clojure.tools.analyzer.env__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
