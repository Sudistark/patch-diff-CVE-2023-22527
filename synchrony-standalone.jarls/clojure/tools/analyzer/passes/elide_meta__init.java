package clojure.tools.analyzer.passes;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IPersistentMap;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentHashSet;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class elide_meta__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final Keyword const__5;
  
  public static final Keyword const__7;
  
  public static final Object const__8;
  
  public static final Keyword const__9;
  
  public static final Keyword const__10;
  
  public static final AFn const__11;
  
  public static final Keyword const__12;
  
  public static final Var const__13;
  
  public static final Keyword const__14;
  
  public static final Var const__15;
  
  public static final Var const__16;
  
  public static final Keyword const__17;
  
  public static final AFn const__20;
  
  public static final Var const__21;
  
  public static final AFn const__24;
  
  public static final Var const__25;
  
  public static final AFn const__28;
  
  public static final Var const__29;
  
  public static final Object const__30;
  
  public static final Keyword const__31;
  
  public static final Keyword const__32;
  
  public static final Keyword const__33;
  
  public static final Keyword const__34;
  
  public static final Keyword const__35;
  
  public static final Var const__36;
  
  public static final Object const__37;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new elide_meta.fn__2059());
    const__3.setDynamic(true).setMeta((IPersistentMap)const__11);
    const__3.setDynamic(true)








      
      .bindRoot(RT.mapUniqueKeys(new Object[] { const__12, ((IFn)const__13.getRawRoot()).invoke(((IFn)const__14).invoke(const__15.get())) }));
    const__16.setMeta((IPersistentMap)const__20);
    const__16.bindRoot(new elide_meta.replace_meta());
    const__21.setMeta((IPersistentMap)const__24);
    const__21.bindRoot(new elide_meta.get_elides());
    const__25.setMeta((IPersistentMap)const__28);
    const__25.bindRoot(new elide_meta._elide_meta());
    const__29.setMeta((IPersistentMap)RT.mapUniqueKeys(new Object[] { 
            const__17, const__30, const__10, "If elides is not empty and the AST node contains metadata,\n   dissoc all the keys in elides from the metadata.", const__31, RT.mapUniqueKeys(new Object[] { const__32, const__33, const__34, PersistentHashSet.EMPTY, const__35, RT.set(new Object[] { const__36 }) }), const__5, const__37, const__7, const__8, 
            const__9, "clojure/tools/analyzer/passes/elide_meta.clj" }));
    const__29.bindRoot(new elide_meta.elide_meta());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "clojure.tools.analyzer.passes.elide-meta");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("clojure.tools.analyzer.passes.elide-meta", "elides");
    const__5 = (Keyword)RT.keyword(null, "line");
    const__7 = (Keyword)RT.keyword(null, "column");
    const__8 = Integer.valueOf(1);
    const__9 = (Keyword)RT.keyword(null, "file");
    const__10 = (Keyword)RT.keyword(null, "doc");
    const__11 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(12), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/passes/elide_meta.clj", RT.keyword(null, "doc"), "A map of op keywords to predicate IFns.\n   The predicate will be used to indicate what map keys should be elided on\n   metadata of nodes for that op.\n   :all can be used to indicate what should be elided for every node with\n   metadata.\n   Defaults to {:all (set (:elide-meta *compiler-options*))}" });
    const__12 = (Keyword)RT.keyword(null, "all");
    const__13 = (Var)RT.var("clojure.core", "set");
    const__14 = (Keyword)RT.keyword(null, "elide-meta");
    const__15 = (Var)RT.var("clojure.core", "*compiler-options*");
    const__16 = (Var)RT.var("clojure.tools.analyzer.passes.elide-meta", "replace-meta");
    const__17 = (Keyword)RT.keyword(null, "arglists");
    const__20 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "meta"), Symbol.intern(null, "new-meta")) })), RT.keyword(null, "line"), Integer.valueOf(21), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/passes/elide_meta.clj" });
    const__21 = (Var)RT.var("clojure.tools.analyzer.passes.elide-meta", "get-elides");
    const__24 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "op"), Symbol.intern(null, "expr"), Symbol.intern(null, "type")) })) })), RT.keyword(null, "line"), Integer.valueOf(32), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/passes/elide_meta.clj" });
    const__25 = (Var)RT.var("clojure.tools.analyzer.passes.elide-meta", "-elide-meta");
    const__28 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "op"), Symbol.intern(null, "meta"), Symbol.intern(null, "expr"), Symbol.intern(null, "env")), RT.keyword(null, "as"), Symbol.intern(null, "ast") })) })), RT.keyword(null, "line"), Integer.valueOf(46), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/passes/elide_meta.clj" });
    const__29 = (Var)RT.var("clojure.tools.analyzer.passes.elide-meta", "elide-meta");
    const__30 = PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ast")) }));
    const__31 = (Keyword)RT.keyword(null, "pass-info");
    const__32 = (Keyword)RT.keyword(null, "walk");
    const__33 = (Keyword)RT.keyword(null, "any");
    const__34 = (Keyword)RT.keyword(null, "depends");
    const__35 = (Keyword)RT.keyword(null, "after");
    const__36 = (Var)RT.var("clojure.tools.analyzer.passes.source-info", "source-info");
    const__37 = Integer.valueOf(79);
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("clojure.tools.analyzer.passes.elide_meta__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
