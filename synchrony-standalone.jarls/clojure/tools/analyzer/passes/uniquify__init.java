package clojure.tools.analyzer.passes;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IPersistentMap;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentHashSet;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class uniquify__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final Keyword const__5;
  
  public static final Keyword const__7;
  
  public static final Object const__8;
  
  public static final Keyword const__9;
  
  public static final AFn const__10;
  
  public static final Var const__11;
  
  public static final AFn const__13;
  
  public static final Var const__14;
  
  public static final Keyword const__15;
  
  public static final AFn const__18;
  
  public static final Var const__19;
  
  public static final AFn const__22;
  
  public static final Var const__23;
  
  public static final AFn const__26;
  
  public static final Var const__27;
  
  public static final AFn const__30;
  
  public static final Var const__31;
  
  public static final Keyword const__32;
  
  public static final Var const__33;
  
  public static final AFn const__36;
  
  public static final Keyword const__37;
  
  public static final Keyword const__38;
  
  public static final Keyword const__39;
  
  public static final Var const__40;
  
  public static final Object const__41;
  
  public static final Keyword const__42;
  
  public static final Keyword const__43;
  
  public static final Keyword const__44;
  
  public static final Keyword const__45;
  
  public static final Keyword const__46;
  
  public static final Object const__47;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new uniquify.fn__2324());
    const__3.setDynamic(true).setMeta((IPersistentMap)const__10);
    const__11.setDynamic(true).setMeta((IPersistentMap)const__13);
    const__14.setMeta((IPersistentMap)const__18);
    const__14.bindRoot(new uniquify.normalize());
    const__19.setMeta((IPersistentMap)const__22);
    const__19.bindRoot(new uniquify.uniquify());
    const__23.setMeta((IPersistentMap)const__26);
    const__23.bindRoot(new uniquify.uniquify_locals_around());
    const__27.setMeta((IPersistentMap)const__30);
    const__27.bindRoot(new uniquify.uniquify_locals_STAR_());
    const__33.setMeta((IPersistentMap)const__36);
    const__33.bindRoot(new uniquify.uniquify_binding());
    const__40.setMeta((IPersistentMap)RT.mapUniqueKeys(new Object[] { 
            const__15, const__41, const__42, "Walks the AST performing alpha-conversion on the :name field\n   of :local/:binding nodes, invalidates :local map in :env field\n\n  Passes opts:\n  * :uniquify/uniquify-env  If true, uniquifies the :env :locals map", const__43, RT.mapUniqueKeys(new Object[] { const__44, const__45, const__46, PersistentHashSet.EMPTY }), const__5, const__47, const__7, const__8, 
            const__9, "clojure/tools/analyzer/passes/uniquify.clj" }));
    const__40.bindRoot(new uniquify.uniquify_locals());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "clojure.tools.analyzer.passes.uniquify");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("clojure.tools.analyzer.passes.uniquify", "*locals-counter*");
    const__5 = (Keyword)RT.keyword(null, "line");
    const__7 = (Keyword)RT.keyword(null, "column");
    const__8 = Integer.valueOf(1);
    const__9 = (Keyword)RT.keyword(null, "file");
    const__10 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(14), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/passes/uniquify.clj" });
    const__11 = (Var)RT.var("clojure.tools.analyzer.passes.uniquify", "*locals-frame*");
    const__13 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(15), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/passes/uniquify.clj" });
    const__14 = (Var)RT.var("clojure.tools.analyzer.passes.uniquify", "normalize");
    const__15 = (Keyword)RT.keyword(null, "arglists");
    const__18 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "name")) })), RT.keyword(null, "line"), Integer.valueOf(17), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/passes/uniquify.clj" });
    const__19 = (Var)RT.var("clojure.tools.analyzer.passes.uniquify", "uniquify");
    const__22 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "name")) })), RT.keyword(null, "line"), Integer.valueOf(20), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/passes/uniquify.clj" });
    const__23 = (Var)RT.var("clojure.tools.analyzer.passes.uniquify", "uniquify-locals-around");
    const__26 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ast")) })), RT.keyword(null, "line"), Integer.valueOf(26), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/passes/uniquify.clj" });
    const__27 = (Var)RT.var("clojure.tools.analyzer.passes.uniquify", "uniquify-locals*");
    const__30 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ast")) })), RT.keyword(null, "line"), Integer.valueOf(34), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/passes/uniquify.clj" });
    const__31 = (Var)RT.var("clojure.tools.analyzer.passes.uniquify", "-uniquify-locals");
    const__32 = (Keyword)RT.keyword(null, "local");
    const__33 = (Var)RT.var("clojure.tools.analyzer.passes.uniquify", "uniquify-binding");
    const__36 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "b")) })), RT.keyword(null, "line"), Integer.valueOf(44), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/passes/uniquify.clj" });
    const__37 = (Keyword)RT.keyword(null, "letfn");
    const__38 = (Keyword)RT.keyword(null, "binding");
    const__39 = (Keyword)RT.keyword(null, "default");
    const__40 = (Var)RT.var("clojure.tools.analyzer.passes.uniquify", "uniquify-locals");
    const__41 = PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ast")) }));
    const__42 = (Keyword)RT.keyword(null, "doc");
    const__43 = (Keyword)RT.keyword(null, "pass-info");
    const__44 = (Keyword)RT.keyword(null, "walk");
    const__45 = (Keyword)RT.keyword(null, "none");
    const__46 = (Keyword)RT.keyword(null, "depends");
    const__47 = Integer.valueOf(85);
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("clojure.tools.analyzer.passes.uniquify__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
