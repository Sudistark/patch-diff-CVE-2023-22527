package clojure.tools.analyzer.passes.jvm;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IPersistentMap;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class emit_form__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final Keyword const__4;
  
  public static final Keyword const__6;
  
  public static final Keyword const__8;
  
  public static final Object const__9;
  
  public static final Keyword const__10;
  
  public static final AFn const__11;
  
  public static final Var const__12;
  
  public static final Object const__13;
  
  public static final Keyword const__14;
  
  public static final Keyword const__15;
  
  public static final Keyword const__16;
  
  public static final Keyword const__17;
  
  public static final Keyword const__18;
  
  public static final Var const__19;
  
  public static final Keyword const__20;
  
  public static final Object const__21;
  
  public static final Var const__22;
  
  public static final Object const__23;
  
  public static final Object const__24;
  
  public static final Var const__25;
  
  public static final Keyword const__26;
  
  public static final Keyword const__27;
  
  public static final Keyword const__28;
  
  public static final Keyword const__29;
  
  public static final Keyword const__30;
  
  public static final Keyword const__31;
  
  public static final Keyword const__32;
  
  public static final Var const__33;
  
  public static final AFn const__36;
  
  public static final Var const__37;
  
  public static final AFn const__40;
  
  public static final Keyword const__41;
  
  public static final Keyword const__42;
  
  public static final Keyword const__43;
  
  public static final Keyword const__44;
  
  public static final Keyword const__45;
  
  public static final Keyword const__46;
  
  public static final Keyword const__47;
  
  public static final Keyword const__48;
  
  public static final Keyword const__49;
  
  public static final Keyword const__50;
  
  public static final Keyword const__51;
  
  public static final Keyword const__52;
  
  public static final Keyword const__53;
  
  public static final Keyword const__54;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new emit_form.fn__3067());
    const__3.setMeta((IPersistentMap)const__11);
    const__3.bindRoot(new emit_form._emit_form_STAR_());
    const__12.setMeta((IPersistentMap)RT.mapUniqueKeys(new Object[] { 
            const__4, const__13, const__14, "Return the form represented by the given AST\n   Opts is a set of options, valid options are:\n    * :hygienic\n    * :qualified-vars (DEPRECATED, use :qualified-symbols instead)\n    * :qualified-symbols", const__15, RT.mapUniqueKeys(new Object[] { const__16, const__17, const__18, RT.set(new Object[] { const__19 }), const__20, Boolean.TRUE }), const__6, const__21, const__8, const__9, 
            const__10, "clojure/tools/analyzer/passes/jvm/emit_form.clj" }));
    const__12.bindRoot(new emit_form.emit_form());
    const__22.setMeta((IPersistentMap)RT.mapUniqueKeys(new Object[] { 
            const__4, const__23, const__14, "Return an hygienic form represented by the given AST", const__15, RT.mapUniqueKeys(new Object[] { const__16, const__17, const__18, RT.set(new Object[] { const__19 }), const__20, Boolean.TRUE }), const__6, const__24, const__8, const__9, 
            const__10, "clojure/tools/analyzer/passes/jvm/emit_form.clj" }));
    const__22.bindRoot(new emit_form.emit_hygienic_form());
    const__33.setMeta((IPersistentMap)const__36);
    const__33.bindRoot(new emit_form.class__GT_str());
    const__37.setMeta((IPersistentMap)const__40);
    const__37.bindRoot(new emit_form.class__GT_sym());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "clojure.tools.analyzer.passes.jvm.emit-form");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("clojure.tools.analyzer.passes.jvm.emit-form", "-emit-form*");
    const__4 = (Keyword)RT.keyword(null, "arglists");
    const__6 = (Keyword)RT.keyword(null, "line");
    const__8 = (Keyword)RT.keyword(null, "column");
    const__9 = Integer.valueOf(1);
    const__10 = (Keyword)RT.keyword(null, "file");
    const__11 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "form")), RT.keyword(null, "as"), Symbol.intern(null, "ast") }), Symbol.intern(null, "opts")) })), RT.keyword(null, "line"), Integer.valueOf(16), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/passes/jvm/emit_form.clj" });
    const__12 = (Var)RT.var("clojure.tools.analyzer.passes.jvm.emit-form", "emit-form");
    const__13 = PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ast")), Tuple.create(Symbol.intern(null, "ast"), Symbol.intern(null, "opts")) }));
    const__14 = (Keyword)RT.keyword(null, "doc");
    const__15 = (Keyword)RT.keyword(null, "pass-info");
    const__16 = (Keyword)RT.keyword(null, "walk");
    const__17 = (Keyword)RT.keyword(null, "none");
    const__18 = (Keyword)RT.keyword(null, "depends");
    const__19 = (Var)RT.var("clojure.tools.analyzer.passes.uniquify", "uniquify-locals");
    const__20 = (Keyword)RT.keyword(null, "compiler");
    const__21 = Integer.valueOf(25);
    const__22 = (Var)RT.var("clojure.tools.analyzer.passes.jvm.emit-form", "emit-hygienic-form");
    const__23 = PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ast")) }));
    const__24 = Integer.valueOf(37);
    const__25 = (Var)RT.var("clojure.tools.analyzer.passes.jvm.emit-form", "-emit-form");
    const__26 = (Keyword)RT.keyword(null, "default");
    const__27 = (Keyword)RT.keyword(null, "const");
    const__28 = (Keyword)RT.keyword(null, "monitor-enter");
    const__29 = (Keyword)RT.keyword(null, "monitor-exit");
    const__30 = (Keyword)RT.keyword(null, "import");
    const__31 = (Keyword)RT.keyword(null, "the-var");
    const__32 = (Keyword)RT.keyword(null, "method");
    const__33 = (Var)RT.var("clojure.tools.analyzer.passes.jvm.emit-form", "class->str");
    const__36 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "class")) })), RT.keyword(null, "line"), Integer.valueOf(79), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/passes/jvm/emit_form.clj" });
    const__37 = (Var)RT.var("clojure.tools.analyzer.passes.jvm.emit-form", "class->sym");
    const__40 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "class")) })), RT.keyword(null, "line"), Integer.valueOf(84), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/passes/jvm/emit_form.clj" });
    const__41 = (Keyword)RT.keyword(null, "catch");
    const__42 = (Keyword)RT.keyword(null, "deftype");
    const__43 = (Keyword)RT.keyword(null, "reify");
    const__44 = (Keyword)RT.keyword(null, "case");
    const__45 = (Keyword)RT.keyword(null, "static-field");
    const__46 = (Keyword)RT.keyword(null, "static-call");
    const__47 = (Keyword)RT.keyword(null, "instance-field");
    const__48 = (Keyword)RT.keyword(null, "instance-call");
    const__49 = (Keyword)RT.keyword(null, "prim-invoke");
    const__50 = (Keyword)RT.keyword(null, "protocol-invoke");
    const__51 = (Keyword)RT.keyword(null, "keyword-invoke");
    const__52 = (Keyword)RT.keyword(null, "instance?");
    const__53 = (Keyword)RT.keyword(null, "var");
    const__54 = (Keyword)RT.keyword(null, "def");
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("clojure.tools.analyzer.passes.jvm.emit_form__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
