package clojure.tools.analyzer.passes.jvm;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IPersistentMap;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentHashSet;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class annotate_tag__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final Keyword const__4;
  
  public static final Keyword const__5;
  
  public static final Keyword const__6;
  
  public static final Keyword const__7;
  
  public static final Keyword const__8;
  
  public static final Keyword const__9;
  
  public static final Keyword const__10;
  
  public static final Keyword const__11;
  
  public static final Var const__12;
  
  public static final Keyword const__13;
  
  public static final Object const__14;
  
  public static final Keyword const__15;
  
  public static final Keyword const__16;
  
  public static final Keyword const__17;
  
  public static final Keyword const__18;
  
  public static final Keyword const__19;
  
  public static final Keyword const__20;
  
  public static final Var const__21;
  
  public static final Keyword const__22;
  
  public static final Object const__23;
  
  public static final Keyword const__24;
  
  public static final Object const__25;
  
  public static final Keyword const__26;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new annotate_tag.fn__2205());
    const__12.setMeta((IPersistentMap)RT.mapUniqueKeys(new Object[] { 
            const__13, const__14, const__15, "If the AST node type is a constant object or contains :tag metadata,\n   attach the appropriate :tag and :o-tag to the node.", const__16, RT.mapUniqueKeys(new Object[] { const__17, const__18, const__19, PersistentHashSet.EMPTY, const__20, RT.set(new Object[] { const__21 }) }), const__22, const__23, const__24, const__25, 
            const__26, "clojure/tools/analyzer/passes/jvm/annotate_tag.clj" }));
    const__12.bindRoot(new annotate_tag.annotate_tag());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "clojure.tools.analyzer.passes.jvm.annotate-tag");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("clojure.tools.analyzer.passes.jvm.annotate-tag", "-annotate-tag");
    const__4 = (Keyword)RT.keyword(null, "default");
    const__5 = (Keyword)RT.keyword(null, "map");
    const__6 = (Keyword)RT.keyword(null, "set");
    const__7 = (Keyword)RT.keyword(null, "vector");
    const__8 = (Keyword)RT.keyword(null, "the-var");
    const__9 = (Keyword)RT.keyword(null, "const");
    const__10 = (Keyword)RT.keyword(null, "binding");
    const__11 = (Keyword)RT.keyword(null, "local");
    const__12 = (Var)RT.var("clojure.tools.analyzer.passes.jvm.annotate-tag", "annotate-tag");
    const__13 = (Keyword)RT.keyword(null, "arglists");
    const__14 = PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "op"), Symbol.intern(null, "tag"), Symbol.intern(null, "o-tag"), Symbol.intern(null, "atom")), RT.keyword(null, "as"), Symbol.intern(null, "ast") })) }));
    const__15 = (Keyword)RT.keyword(null, "doc");
    const__16 = (Keyword)RT.keyword(null, "pass-info");
    const__17 = (Keyword)RT.keyword(null, "walk");
    const__18 = (Keyword)RT.keyword(null, "post");
    const__19 = (Keyword)RT.keyword(null, "depends");
    const__20 = (Keyword)RT.keyword(null, "after");
    const__21 = (Var)RT.var("clojure.tools.analyzer.passes.jvm.constant-lifter", "constant-lift");
    const__22 = (Keyword)RT.keyword(null, "line");
    const__23 = Integer.valueOf(78);
    const__24 = (Keyword)RT.keyword(null, "column");
    const__25 = Integer.valueOf(1);
    const__26 = (Keyword)RT.keyword(null, "file");
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("clojure.tools.analyzer.passes.jvm.annotate_tag__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
