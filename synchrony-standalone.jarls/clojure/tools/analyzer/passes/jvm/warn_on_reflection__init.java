package clojure.tools.analyzer.passes.jvm;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IPersistentMap;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class warn_on_reflection__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__11;
  
  public static final Var const__12;
  
  public static final Keyword const__13;
  
  public static final Keyword const__14;
  
  public static final Keyword const__15;
  
  public static final Keyword const__16;
  
  public static final Keyword const__17;
  
  public static void load() { LockingTransaction.runInTransaction((Callable)new warn_on_reflection.fn__2758());
    const__3.setMeta((IPersistentMap)const__11);
    const__3.bindRoot(new warn_on_reflection.warn()); }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "clojure.tools.analyzer.passes.jvm.warn-on-reflection");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("clojure.tools.analyzer.passes.jvm.warn-on-reflection", "warn");
    const__11 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "what"), RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "file"), Symbol.intern(null, "line"), Symbol.intern(null, "column")) })) })), RT.keyword(null, "line"), Integer.valueOf(14), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/passes/jvm/warn_on_reflection.clj" });
    const__12 = (Var)RT.var("clojure.tools.analyzer.passes.jvm.warn-on-reflection", "warn-on-reflection");
    const__13 = (Keyword)RT.keyword(null, "instance-call");
    const__14 = (Keyword)RT.keyword(null, "static-call");
    const__15 = (Keyword)RT.keyword(null, "host-interop");
    const__16 = (Keyword)RT.keyword(null, "new");
    const__17 = (Keyword)RT.keyword(null, "default");
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("clojure.tools.analyzer.passes.jvm.warn_on_reflection__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
