package clojure.tools.analyzer.passes.jvm;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IPersistentMap;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class validate__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final Keyword const__4;
  
  public static final Keyword const__5;
  
  public static final Keyword const__6;
  
  public static final Keyword const__7;
  
  public static final Var const__8;
  
  public static final Keyword const__9;
  
  public static final Keyword const__11;
  
  public static final Keyword const__13;
  
  public static final Object const__14;
  
  public static final Keyword const__15;
  
  public static final AFn const__16;
  
  public static final Keyword const__17;
  
  public static final Keyword const__18;
  
  public static final Keyword const__19;
  
  public static final Keyword const__20;
  
  public static final Keyword const__21;
  
  public static final Keyword const__22;
  
  public static final Keyword const__23;
  
  public static final Var const__24;
  
  public static final AFn const__27;
  
  public static final Keyword const__28;
  
  public static final Keyword const__29;
  
  public static final Keyword const__30;
  
  public static final Var const__31;
  
  public static final AFn const__34;
  
  public static final Var const__35;
  
  public static final Object const__36;
  
  public static final Keyword const__37;
  
  public static final Keyword const__38;
  
  public static final Keyword const__39;
  
  public static final Keyword const__40;
  
  public static final Keyword const__41;
  
  public static final Var const__42;
  
  public static final Var const__43;
  
  public static final Var const__44;
  
  public static final Object const__45;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new validate.fn__2532());
    const__8.setMeta((IPersistentMap)const__16);
    const__8.bindRoot(new validate.validate_call());
    const__24.setMeta((IPersistentMap)const__27);
    const__24.bindRoot(new validate.validate_interfaces());
    const__31.setMeta((IPersistentMap)const__34);
    const__31.bindRoot(new validate.validate_tag());
    const__35.setMeta((IPersistentMap)RT.mapUniqueKeys(new Object[] { 
            const__9, const__36, const__37, "Validate tags, classes, method calls.\n   Throws exceptions when invalid forms are encountered, replaces\n   class symbols with class objects.\n\n   Passes opts:\n   * :validate/throw-on-arity-mismatch\n      If true, validate will throw on potential arity mismatch\n   * :validate/wrong-tag-handler\n      If bound to a function, will invoke that function instead of\n      throwing on invalid tag.\n      The function takes the tag key (or :name/tag if the node is :def and\n      the wrong tag is the one on the :name field meta) and the originating\n      AST node and must return a map (or nil) that will be merged into the AST,\n      possibly shadowing the wrong tag with Object or nil.\n   * :validate/unresolvable-symbol-handler\n      If bound to a function, will invoke that function instead of\n      throwing on unresolvable symbol.\n      The function takes three arguments: the namespace (possibly nil)\n      and name part of the symbol, as symbols and the originating\n      AST node which can be either a :maybe-class or a :maybe-host-form,\n      those nodes are documented in the tools.analyzer quickref.\n      The function must return a valid tools.analyzer.jvm AST node.", const__38, RT.mapUniqueKeys(new Object[] { const__39, const__40, const__41, RT.set(new Object[] { const__42, const__43, const__44 }) }), const__11, const__45, const__13, const__14, 
            const__15, "clojure/tools/analyzer/passes/jvm/validate.clj" }));
    const__35.bindRoot(new validate.validate());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "clojure.tools.analyzer.passes.jvm.validate");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("clojure.tools.analyzer.passes.jvm.validate", "-validate");
    const__4 = (Keyword)RT.keyword(null, "maybe-class");
    const__5 = (Keyword)RT.keyword(null, "maybe-host-form");
    const__6 = (Keyword)RT.keyword(null, "set!");
    const__7 = (Keyword)RT.keyword(null, "new");
    const__8 = (Var)RT.var("clojure.tools.analyzer.passes.jvm.validate", "validate-call");
    const__9 = (Keyword)RT.keyword(null, "arglists");
    const__11 = (Keyword)RT.keyword(null, "line");
    const__13 = (Keyword)RT.keyword(null, "column");
    const__14 = Integer.valueOf(1);
    const__15 = (Keyword)RT.keyword(null, "file");
    const__16 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), RT.vector(new Object[] { Symbol.intern(null, "class"), Symbol.intern(null, "instance"), Symbol.intern(null, "method"), Symbol.intern(null, "args"), Symbol.intern(null, "tag"), Symbol.intern(null, "env"), Symbol.intern(null, "op") }), RT.keyword(null, "as"), Symbol.intern(null, "ast") })) })), RT.keyword(null, "line"), Integer.valueOf(87), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/passes/jvm/validate.clj" });
    const__17 = (Keyword)RT.keyword(null, "static-call");
    const__18 = (Keyword)RT.keyword(null, "static-field");
    const__19 = (Keyword)RT.keyword(null, "instance-call");
    const__20 = (Keyword)RT.keyword(null, "instance-field");
    const__21 = (Keyword)RT.keyword(null, "import");
    const__22 = (Keyword)RT.keyword(null, "def");
    const__23 = (Keyword)RT.keyword(null, "invoke");
    const__24 = (Var)RT.var("clojure.tools.analyzer.passes.jvm.validate", "validate-interfaces");
    const__27 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "env"), Symbol.intern(null, "form"), Symbol.intern(null, "interfaces")) })) })), RT.keyword(null, "line"), Integer.valueOf(210), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/passes/jvm/validate.clj" });
    const__28 = (Keyword)RT.keyword(null, "deftype");
    const__29 = (Keyword)RT.keyword(null, "reify");
    const__30 = (Keyword)RT.keyword(null, "default");
    const__31 = (Var)RT.var("clojure.tools.analyzer.passes.jvm.validate", "validate-tag");
    const__34 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "t"), RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "env")), RT.keyword(null, "as"), Symbol.intern(null, "ast") })) })), RT.keyword(null, "line"), Integer.valueOf(229), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/passes/jvm/validate.clj" });
    const__35 = (Var)RT.var("clojure.tools.analyzer.passes.jvm.validate", "validate");
    const__36 = PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "tag"), Symbol.intern(null, "form"), Symbol.intern(null, "env")), RT.keyword(null, "as"), Symbol.intern(null, "ast") })) }));
    const__37 = (Keyword)RT.keyword(null, "doc");
    const__38 = (Keyword)RT.keyword(null, "pass-info");
    const__39 = (Keyword)RT.keyword(null, "walk");
    const__40 = (Keyword)RT.keyword(null, "post");
    const__41 = (Keyword)RT.keyword(null, "depends");
    const__42 = (Var)RT.var("clojure.tools.analyzer.passes.jvm.analyze-host-expr", "analyze-host-expr");
    const__43 = (Var)RT.var("clojure.tools.analyzer.passes.jvm.infer-tag", "infer-tag");
    const__44 = (Var)RT.var("clojure.tools.analyzer.passes.jvm.validate-recur", "validate-recur");
    const__45 = Integer.valueOf(240);
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("clojure.tools.analyzer.passes.jvm.validate__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
