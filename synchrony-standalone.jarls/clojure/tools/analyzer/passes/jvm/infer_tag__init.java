package clojure.tools.analyzer.passes.jvm;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IPersistentMap;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class infer_tag__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final Keyword const__4;
  
  public static final Keyword const__5;
  
  public static final Keyword const__6;
  
  public static final Keyword const__7;
  
  public static final Keyword const__8;
  
  public static final Keyword const__9;
  
  public static final Keyword const__10;
  
  public static final Keyword const__11;
  
  public static final Keyword const__12;
  
  public static final Keyword const__13;
  
  public static final Keyword const__14;
  
  public static final Keyword const__15;
  
  public static final Keyword const__16;
  
  public static final Var const__17;
  
  public static final Keyword const__18;
  
  public static final Keyword const__20;
  
  public static final Keyword const__22;
  
  public static final Object const__23;
  
  public static final Keyword const__24;
  
  public static final AFn const__25;
  
  public static final Keyword const__26;
  
  public static final Keyword const__27;
  
  public static final Keyword const__28;
  
  public static final Keyword const__29;
  
  public static final Keyword const__30;
  
  public static final Keyword const__31;
  
  public static final Keyword const__32;
  
  public static final Keyword const__33;
  
  public static final Keyword const__34;
  
  public static final Keyword const__35;
  
  public static final Var const__36;
  
  public static final Object const__37;
  
  public static final Keyword const__38;
  
  public static final Keyword const__39;
  
  public static final Keyword const__40;
  
  public static final Keyword const__41;
  
  public static final Keyword const__42;
  
  public static final Var const__43;
  
  public static final Var const__44;
  
  public static final Var const__45;
  
  public static final Var const__46;
  
  public static final Keyword const__47;
  
  public static final Var const__48;
  
  public static final Object const__49;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new infer_tag.fn__2380());
    const__17.setMeta((IPersistentMap)const__25);
    const__17.bindRoot(new infer_tag._EQ__arglists_QMARK_());
    const__36.setMeta((IPersistentMap)RT.mapUniqueKeys(new Object[] { 
            const__18, const__37, const__38, "Performs local type inference on the AST adds, when possible,\n   one or more of the following keys to the AST:\n   * :o-tag      represents the current type of the\n                 expression represented by the node\n   * :tag        represents the type the expression represented by the\n                 node is required to have, possibly the same as :o-tag\n   * :return-tag implies that the node will return a function whose\n                 invocation will result in a object of this type\n   * :arglists   implies that the node will return a function with\n                 this arglists\n   * :ignore-tag true when the node is untyped, does not imply that\n                 all untyped node will have this\n\n  Passes opts:\n  * :infer-tag/level  If :global, infer-tag will perform Var tag\n                      inference", const__39, RT.mapUniqueKeys(new Object[] { const__40, const__41, const__42, RT.set(new Object[] { const__43, const__44, const__45, const__46 }), const__47, RT.set(new Object[] { const__48 }) }), const__20, const__49, const__22, const__23, 
            const__24, "clojure/tools/analyzer/passes/jvm/infer_tag.clj" }));
    const__36.bindRoot(new infer_tag.infer_tag());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "clojure.tools.analyzer.passes.jvm.infer-tag");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("clojure.tools.analyzer.passes.jvm.infer-tag", "-infer-tag");
    const__4 = (Keyword)RT.keyword(null, "default");
    const__5 = (Keyword)RT.keyword(null, "binding");
    const__6 = (Keyword)RT.keyword(null, "local");
    const__7 = (Keyword)RT.keyword(null, "var");
    const__8 = (Keyword)RT.keyword(null, "def");
    const__9 = (Keyword)RT.keyword(null, "quote");
    const__10 = (Keyword)RT.keyword(null, "new");
    const__11 = (Keyword)RT.keyword(null, "with-meta");
    const__12 = (Keyword)RT.keyword(null, "recur");
    const__13 = (Keyword)RT.keyword(null, "do");
    const__14 = (Keyword)RT.keyword(null, "let");
    const__15 = (Keyword)RT.keyword(null, "letfn");
    const__16 = (Keyword)RT.keyword(null, "loop");
    const__17 = (Var)RT.var("clojure.tools.analyzer.passes.jvm.infer-tag", "=-arglists?");
    const__18 = (Keyword)RT.keyword(null, "arglists");
    const__20 = (Keyword)RT.keyword(null, "line");
    const__22 = (Keyword)RT.keyword(null, "column");
    const__23 = Integer.valueOf(1);
    const__24 = (Keyword)RT.keyword(null, "file");
    const__25 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "a1"), Symbol.intern(null, "a2")) })), RT.keyword(null, "line"), Integer.valueOf(109), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/passes/jvm/infer_tag.clj" });
    const__26 = (Keyword)RT.keyword(null, "if");
    const__27 = (Keyword)RT.keyword(null, "throw");
    const__28 = (Keyword)RT.keyword(null, "case");
    const__29 = (Keyword)RT.keyword(null, "try");
    const__30 = (Keyword)RT.keyword(null, "fn-method");
    const__31 = (Keyword)RT.keyword(null, "fn");
    const__32 = (Keyword)RT.keyword(null, "invoke");
    const__33 = (Keyword)RT.keyword(null, "method");
    const__34 = (Keyword)RT.keyword(null, "reify");
    const__35 = (Keyword)RT.keyword(null, "set!");
    const__36 = (Var)RT.var("clojure.tools.analyzer.passes.jvm.infer-tag", "infer-tag");
    const__37 = PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "tag"), Symbol.intern(null, "form")), RT.keyword(null, "as"), Symbol.intern(null, "ast") })) }));
    const__38 = (Keyword)RT.keyword(null, "doc");
    const__39 = (Keyword)RT.keyword(null, "pass-info");
    const__40 = (Keyword)RT.keyword(null, "walk");
    const__41 = (Keyword)RT.keyword(null, "post");
    const__42 = (Keyword)RT.keyword(null, "depends");
    const__43 = (Var)RT.var("clojure.tools.analyzer.passes.jvm.analyze-host-expr", "analyze-host-expr");
    const__44 = (Var)RT.var("clojure.tools.analyzer.passes.jvm.fix-case-test", "fix-case-test");
    const__45 = (Var)RT.var("clojure.tools.analyzer.passes.jvm.annotate-tag", "annotate-tag");
    const__46 = (Var)RT.var("clojure.tools.analyzer.passes.jvm.annotate-host-info", "annotate-host-info");
    const__47 = (Keyword)RT.keyword(null, "after");
    const__48 = (Var)RT.var("clojure.tools.analyzer.passes.trim", "trim");
    const__49 = Integer.valueOf(255);
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("clojure.tools.analyzer.passes.jvm.infer_tag__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
