package clojure.tools.analyzer.passes;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IPersistentMap;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class emit_form__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final Keyword const__5;
  
  public static final Keyword const__7;
  
  public static final Keyword const__8;
  
  public static final Keyword const__10;
  
  public static final Object const__11;
  
  public static final Keyword const__12;
  
  public static final AFn const__13;
  
  public static final Var const__14;
  
  public static final Object const__15;
  
  public static final Keyword const__16;
  
  public static final Keyword const__17;
  
  public static final Keyword const__18;
  
  public static final Keyword const__19;
  
  public static final Var const__20;
  
  public static final Keyword const__21;
  
  public static final Object const__22;
  
  public static final Var const__23;
  
  public static final Object const__24;
  
  public static final Object const__25;
  
  public static final Var const__26;
  
  public static final Keyword const__27;
  
  public static final Keyword const__28;
  
  public static final Keyword const__29;
  
  public static final Keyword const__30;
  
  public static final Keyword const__31;
  
  public static final Keyword const__32;
  
  public static final Keyword const__33;
  
  public static final Keyword const__34;
  
  public static final Var const__35;
  
  public static final AFn const__38;
  
  public static final Keyword const__39;
  
  public static final Keyword const__40;
  
  public static final Keyword const__41;
  
  public static final Keyword const__42;
  
  public static final Keyword const__43;
  
  public static final Keyword const__44;
  
  public static final Keyword const__45;
  
  public static final Keyword const__46;
  
  public static final Keyword const__47;
  
  public static final Keyword const__48;
  
  public static final Keyword const__49;
  
  public static final Keyword const__50;
  
  public static final Keyword const__51;
  
  public static final Keyword const__52;
  
  public static final Keyword const__53;
  
  public static final Keyword const__54;
  
  public static final Keyword const__55;
  
  public static final Keyword const__56;
  
  public static final Keyword const__57;
  
  public static final Keyword const__58;
  
  public static final Keyword const__59;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new emit_form.fn__2891());
    const__3.setDynamic(true).setMeta((IPersistentMap)const__13);
    const__3.setDynamic(true).bindRoot(new emit_form._emit_form_STAR_());
    const__14.setMeta((IPersistentMap)RT.mapUniqueKeys(new Object[] { 
            const__5, const__15, const__7, "Return the form represented by the given AST.\n   Opts is a set of options, valid options are:\n    * :hygienic", const__16, RT.mapUniqueKeys(new Object[] { const__17, const__18, const__19, RT.set(new Object[] { const__20 }), const__21, Boolean.TRUE }), const__8, const__22, const__10, const__11, 
            const__12, "clojure/tools/analyzer/passes/emit_form.clj" }));
    const__14.bindRoot(new emit_form.emit_form());
    const__23.setMeta((IPersistentMap)RT.mapUniqueKeys(new Object[] { 
            const__5, const__24, const__7, "Return an hygienic form represented by the given AST", const__16, RT.mapUniqueKeys(new Object[] { const__17, const__18, const__19, RT.set(new Object[] { const__20 }), const__21, Boolean.TRUE }), const__8, const__25, const__10, const__11, 
            const__12, "clojure/tools/analyzer/passes/emit_form.clj" }));
    const__23.bindRoot(new emit_form.emit_hygienic_form());
    const__35.setMeta((IPersistentMap)const__38);
    const__35.bindRoot(new emit_form.emit_bindings());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "clojure.tools.analyzer.passes.emit-form");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("clojure.tools.analyzer.passes.emit-form", "-emit-form*");
    const__5 = (Keyword)RT.keyword(null, "arglists");
    const__7 = (Keyword)RT.keyword(null, "doc");
    const__8 = (Keyword)RT.keyword(null, "line");
    const__10 = (Keyword)RT.keyword(null, "column");
    const__11 = Integer.valueOf(1);
    const__12 = (Keyword)RT.keyword(null, "file");
    const__13 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "form")), RT.keyword(null, "as"), Symbol.intern(null, "ast") }), Symbol.intern(null, "opts")) })), RT.keyword(null, "doc"), "Extension point for custom emit-form implementations, should be rebound\n   to a multimethod with custom emit-form :opts.", RT.keyword(null, "line"), Integer.valueOf(14), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/tools/analyzer/passes/emit_form.clj" });
    const__14 = (Var)RT.var("clojure.tools.analyzer.passes.emit-form", "emit-form");
    const__15 = PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ast")), Tuple.create(Symbol.intern(null, "ast"), Symbol.intern(null, "opts")) }));
    const__16 = (Keyword)RT.keyword(null, "pass-info");
    const__17 = (Keyword)RT.keyword(null, "walk");
    const__18 = (Keyword)RT.keyword(null, "none");
    const__19 = (Keyword)RT.keyword(null, "depends");
    const__20 = (Var)RT.var("clojure.tools.analyzer.passes.uniquify", "uniquify-locals");
    const__21 = (Keyword)RT.keyword(null, "compiler");
    const__22 = Integer.valueOf(24);
    const__23 = (Var)RT.var("clojure.tools.analyzer.passes.emit-form", "emit-hygienic-form");
    const__24 = PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ast")) }));
    const__25 = Integer.valueOf(32);
    const__26 = (Var)RT.var("clojure.tools.analyzer.passes.emit-form", "-emit-form");
    const__27 = (Keyword)RT.keyword(null, "maybe-class");
    const__28 = (Keyword)RT.keyword(null, "maybe-host-form");
    const__29 = (Keyword)RT.keyword(null, "host-call");
    const__30 = (Keyword)RT.keyword(null, "host-field");
    const__31 = (Keyword)RT.keyword(null, "host-interop");
    const__32 = (Keyword)RT.keyword(null, "local");
    const__33 = (Keyword)RT.keyword(null, "binding");
    const__34 = (Keyword)RT.keyword(null, "var");
    const__35 = (Var)RT.var("clojure.tools.analyzer.passes.emit-form", "emit-bindings");
    const__38 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "bindings"), Symbol.intern(null, "opts")) })), RT.keyword(null, "line"), Integer.valueOf(72), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/passes/emit_form.clj" });
    const__39 = (Keyword)RT.keyword(null, "letfn");
    const__40 = (Keyword)RT.keyword(null, "let");
    const__41 = (Keyword)RT.keyword(null, "loop");
    const__42 = (Keyword)RT.keyword(null, "const");
    const__43 = (Keyword)RT.keyword(null, "quote");
    const__44 = (Keyword)RT.keyword(null, "vector");
    const__45 = (Keyword)RT.keyword(null, "set");
    const__46 = (Keyword)RT.keyword(null, "map");
    const__47 = (Keyword)RT.keyword(null, "with-meta");
    const__48 = (Keyword)RT.keyword(null, "do");
    const__49 = (Keyword)RT.keyword(null, "if");
    const__50 = (Keyword)RT.keyword(null, "new");
    const__51 = (Keyword)RT.keyword(null, "set!");
    const__52 = (Keyword)RT.keyword(null, "recur");
    const__53 = (Keyword)RT.keyword(null, "fn-method");
    const__54 = (Keyword)RT.keyword(null, "fn");
    const__55 = (Keyword)RT.keyword(null, "def");
    const__56 = (Keyword)RT.keyword(null, "invoke");
    const__57 = (Keyword)RT.keyword(null, "try");
    const__58 = (Keyword)RT.keyword(null, "catch");
    const__59 = (Keyword)RT.keyword(null, "throw");
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("clojure.tools.analyzer.passes.emit_form__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
