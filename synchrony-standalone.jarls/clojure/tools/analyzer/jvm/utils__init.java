package clojure.tools.analyzer.jvm;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentHashSet;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class utils__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__12;
  
  public static final Var const__13;
  
  public static final AFn const__16;
  
  public static final Var const__17;
  
  public static final AFn const__20;
  
  public static final Var const__21;
  
  public static final AFn const__24;
  
  public static final Var const__25;
  
  public static final AFn const__28;
  
  public static final Var const__29;
  
  public static final AFn const__32;
  
  public static final Var const__33;
  
  public static final AFn const__36;
  
  public static final Var const__37;
  
  public static final Keyword const__38;
  
  public static final Object const__39;
  
  public static final Object const__40;
  
  public static final Object const__41;
  
  public static final Var const__42;
  
  public static final AFn const__45;
  
  public static final Var const__46;
  
  public static final AFn const__49;
  
  public static final Var const__50;
  
  public static final AFn const__52;
  
  public static final AFn const__54;
  
  public static final Object const__55;
  
  public static final Object const__56;
  
  public static final Object const__57;
  
  public static final AFn const__59;
  
  public static final AFn const__61;
  
  public static final AFn const__63;
  
  public static final Object const__64;
  
  public static final Object const__65;
  
  public static final AFn const__67;
  
  public static final Object const__68;
  
  public static final Var const__69;
  
  public static final AFn const__73;
  
  public static final Var const__74;
  
  public static final AFn const__77;
  
  public static final Var const__78;
  
  public static final AFn const__81;
  
  public static final Var const__82;
  
  public static final AFn const__85;
  
  public static final Var const__86;
  
  public static final AFn const__89;
  
  public static final Var const__90;
  
  public static final AFn const__92;
  
  public static final Var const__93;
  
  public static final AFn const__96;
  
  public static final Var const__97;
  
  public static final AFn const__100;
  
  public static final Var const__101;
  
  public static final AFn const__104;
  
  public static final Var const__105;
  
  public static final AFn const__108;
  
  public static final Var const__109;
  
  public static final AFn const__111;
  
  public static final Keyword const__112;
  
  public static final Var const__113;
  
  public static final AFn const__115;
  
  public static final Var const__116;
  
  public static final Var const__117;
  
  public static final AFn const__120;
  
  public static final Var const__121;
  
  public static final AFn const__124;
  
  public static final Var const__125;
  
  public static final AFn const__128;
  
  public static final Var const__129;
  
  public static final AFn const__132;
  
  public static final Var const__133;
  
  public static final AFn const__136;
  
  public static final Var const__137;
  
  public static final AFn const__140;
  
  public static final Var const__141;
  
  public static final AFn const__144;
  
  public static final Var const__145;
  
  public static final AFn const__148;
  
  public static final Var const__149;
  
  public static final AFn const__152;
  
  public static final Var const__153;
  
  public static final AFn const__156;
  
  public static final Var const__157;
  
  public static final AFn const__160;
  
  public static final Var const__161;
  
  public static final AFn const__164;
  
  public static final Var const__165;
  
  public static final AFn const__168;
  
  public static final Var const__169;
  
  public static final AFn const__172;
  
  public static final Var const__173;
  
  public static final AFn const__176;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new utils.fn__1868());
    const__3.setMeta((IPersistentMap)const__12);
    const__3.bindRoot(new utils.type_reflect());
    const__13.setMeta((IPersistentMap)const__16);
    const__13.bindRoot(new utils.macro_QMARK_());
    const__17.setMeta((IPersistentMap)const__20);
    const__17.bindRoot(new utils.inline_QMARK_());
    const__21.setMeta((IPersistentMap)const__24);
    const__21.bindRoot(new utils.specials());
    const__25.setMeta((IPersistentMap)const__28);
    const__25.bindRoot(new utils.special_arrays());
    const__29.setMeta((IPersistentMap)const__32);
    const__29.bindRoot(new utils.array_class());
    const__33.setMeta((IPersistentMap)const__36);
    const__33.bindRoot(new utils.maybe_class_from_string());
    const__42.setMeta((IPersistentMap)const__45);
    const__42.bindRoot(new utils.maybe_class_literal());
    const__46.setMeta((IPersistentMap)const__49);
    const__46

















      
      .bindRoot(RT.set(new Object[] { double.class, char.class, byte.class, boolean.class, float.class, long.class, short.class, int.class }));
    const__50.setMeta((IPersistentMap)const__52);
    const__50



      
      .bindRoot(RT.map(new Object[] { 
            void.class, const__54, double.class, RT.set(new Object[] { const__55, const__56, const__57, float.class }), char.class, const__59, byte.class, const__61, boolean.class, const__63, 
            float.class, RT.set(new Object[] { const__55, double.class, const__57, const__64 }), long.class, RT.set(new Object[] { const__55, byte.class, const__57, short.class, const__65, int.class }), short.class, const__67, int.class, RT.set(new Object[] { const__55, byte.class, const__68, const__57, long.class, short.class, const__65 }) }));
    const__69.setMeta((IPersistentMap)const__73);
    const__69.bindRoot(new utils.box());
    const__74.setMeta((IPersistentMap)const__77);
    const__74.bindRoot(new utils.unbox());
    const__78.setMeta((IPersistentMap)const__81);
    const__78.bindRoot(new utils.numeric_QMARK_());
    const__82.setMeta((IPersistentMap)const__85);
    const__82.bindRoot(new utils.subsumes_QMARK_());
    const__86.setMeta((IPersistentMap)const__89);
    const__86.bindRoot(new utils.convertible_QMARK_());
    const__90.setMeta((IPersistentMap)const__92);
    const__90








































































      
      .bindRoot(RT.map(new Object[] { 
            long.class, RT.set(new Object[] { byte.class, short.class, int.class }), int.class, RT.set(new Object[] { byte.class, short.class }), float.class, RT.set(new Object[] { byte.class, long.class, short.class, int.class }), double.class, RT.set(new Object[] { byte.class, float.class, long.class, short.class, int.class }), short.class, RT.set(new Object[] { byte.class }), 
            byte.class, PersistentHashSet.EMPTY }));
    const__93.setMeta((IPersistentMap)const__96);
    const__93.bindRoot(new utils.wider_primitive());
    const__97.setMeta((IPersistentMap)const__100);
    const__97.bindRoot(new utils.wider_tag_STAR_());
    const__101.setMeta((IPersistentMap)const__104);
    const__101.bindRoot(new utils.wider_tag());
    const__105.setMeta((IPersistentMap)const__108);
    const__105.bindRoot(new utils.name_matches_QMARK_());
    const__109.setMeta((IPersistentMap)const__111);
    const__109


































































      
      .bindRoot(((IFn)const__112).invoke(((IFn)const__3.getRawRoot()).invoke(const__55)));
    const__113.setMeta((IPersistentMap)const__115);
    const__113

      
      .bindRoot(((IFn)const__116.getRawRoot()).invoke(new utils.members_STAR___1940()));
    const__117.setMeta((IPersistentMap)const__120);
    const__117.bindRoot(new utils.members());
    const__121.setMeta((IPersistentMap)const__124);
    const__121.bindRoot(new utils.static_members());
    const__125.setMeta((IPersistentMap)const__128);
    const__125.bindRoot(new utils.instance_members());
    const__129.setMeta((IPersistentMap)const__132);
    const__129.bindRoot(new utils.static_methods());
    const__133.setMeta((IPersistentMap)const__136);
    const__133.bindRoot(new utils.instance_methods());
    const__137.setMeta((IPersistentMap)const__140);
    const__137.bindRoot(new utils.static_field());
    const__141.setMeta((IPersistentMap)const__144);
    const__141.bindRoot(new utils.instance_field());
    const__145.setMeta((IPersistentMap)const__148);
    const__145.bindRoot(new utils.static_method());
    const__149.setMeta((IPersistentMap)const__152);
    const__149.bindRoot(new utils.instance_method());
    const__153.setMeta((IPersistentMap)const__156);
    const__153.bindRoot(new utils.prim_or_obj());
    const__157.setMeta((IPersistentMap)const__160);
    const__157.bindRoot(new utils.prim_interface());
    const__161.setMeta((IPersistentMap)const__164);
    const__161.bindRoot(new utils.tag_match_QMARK_());
    const__165.setMeta((IPersistentMap)const__168);
    const__165.bindRoot(new utils.try_best_match());
    const__169.setMeta((IPersistentMap)const__172);
    const__169.bindRoot(new utils.ns__GT_relpath());
    const__173.setMeta((IPersistentMap)const__176);
    const__173.bindRoot(new utils.ns_url());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "clojure.tools.analyzer.jvm.utils");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("clojure.tools.analyzer.jvm.utils", "type-reflect");
    const__12 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "typeref"), Symbol.intern(null, "&"), Symbol.intern(null, "options")) })), RT.keyword(null, "line"), Integer.valueOf(19), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/jvm/utils.clj" });
    const__13 = (Var)RT.var("clojure.tools.analyzer.jvm.utils", "macro?");
    const__16 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "sym"), Symbol.intern(null, "env")) })), RT.keyword(null, "line"), Integer.valueOf(25), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/jvm/utils.clj" });
    const__17 = (Var)RT.var("clojure.tools.analyzer.jvm.utils", "inline?");
    const__20 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "sym"), Symbol.intern(null, "args"), Symbol.intern(null, "env")) })), RT.keyword(null, "line"), Integer.valueOf(31), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/jvm/utils.clj" });
    const__21 = (Var)RT.var("clojure.tools.analyzer.jvm.utils", "specials");
    const__24 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "c")) })), RT.keyword(null, "line"), Integer.valueOf(39), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/jvm/utils.clj" });
    const__25 = (Var)RT.var("clojure.tools.analyzer.jvm.utils", "special-arrays");
    const__28 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "c")) })), RT.keyword(null, "line"), Integer.valueOf(53), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/jvm/utils.clj" });
    const__29 = (Var)RT.var("clojure.tools.analyzer.jvm.utils", "array-class");
    const__32 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "element-type")) })), RT.keyword(null, "line"), Integer.valueOf(70), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/jvm/utils.clj" });
    const__33 = (Var)RT.var("clojure.tools.analyzer.jvm.utils", "maybe-class-from-string");
    const__36 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "s")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") }))) })), RT.keyword(null, "line"), Integer.valueOf(78), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/jvm/utils.clj" });
    const__37 = (Var)RT.var("clojure.tools.analyzer.jvm.utils", "maybe-class");
    const__38 = (Keyword)RT.keyword(null, "default");
    const__39 = RT.classForName("java.lang.Class");
    const__40 = RT.classForName("java.lang.String");
    const__41 = RT.classForName("clojure.lang.Symbol");
    const__42 = (Var)RT.var("clojure.tools.analyzer.jvm.utils", "maybe-class-literal");
    const__45 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(105), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/jvm/utils.clj" });
    const__46 = (Var)RT.var("clojure.tools.analyzer.jvm.utils", "primitive?");
    const__49 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(112), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/jvm/utils.clj", RT.keyword(null, "doc"), "Returns non-nil if the argument represents a primitive Class other than Void" });
    const__50 = (Var)RT.var("clojure.tools.analyzer.jvm.utils", "convertible-primitives");
    const__52 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(117), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/jvm/utils.clj", RT.keyword(null, "doc"), "If the argument is a primitive Class, returns a set of Classes\n   to which the primitive Class can be casted" });
    const__54 = (AFn)PersistentHashSet.create(new Object[] { RT.classForName("java.lang.Void") });
    const__55 = RT.classForName("java.lang.Object");
    const__56 = RT.classForName("java.lang.Double");
    const__57 = RT.classForName("java.lang.Number");
    const__59 = (AFn)PersistentHashSet.create(new Object[] { RT.classForName("java.lang.Character"), RT.classForName("java.lang.Object") });
    const__61 = (AFn)PersistentHashSet.create(new Object[] { RT.classForName("java.lang.Number"), RT.classForName("java.lang.Byte"), RT.classForName("java.lang.Object") });
    const__63 = (AFn)PersistentHashSet.create(new Object[] { RT.classForName("java.lang.Boolean"), RT.classForName("java.lang.Object") });
    const__64 = RT.classForName("java.lang.Float");
    const__65 = RT.classForName("java.lang.Long");
    const__67 = (AFn)PersistentHashSet.create(new Object[] { RT.classForName("java.lang.Short"), RT.classForName("java.lang.Number"), RT.classForName("java.lang.Object") });
    const__68 = RT.classForName("java.lang.Integer");
    const__69 = (Var)RT.var("clojure.tools.analyzer.jvm.utils", "box");
    const__73 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "tag"), RT.classForName("java.lang.Class"), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "c")) })), RT.keyword(null, "doc"), "If the argument is a primitive Class, returns its boxed equivalent,\n   otherwise returns the argument", RT.keyword(null, "line"), Integer.valueOf(130), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/tools/analyzer/jvm/utils.clj" });
    const__74 = (Var)RT.var("clojure.tools.analyzer.jvm.utils", "unbox");
    const__77 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "tag"), RT.classForName("java.lang.Class"), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "c")) })), RT.keyword(null, "doc"), "If the argument is a Class with a primitive equivalent, returns that,\n   otherwise returns the argument", RT.keyword(null, "line"), Integer.valueOf(145), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/tools/analyzer/jvm/utils.clj" });
    const__78 = (Var)RT.var("clojure.tools.analyzer.jvm.utils", "numeric?");
    const__81 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "c")) })), RT.keyword(null, "doc"), "Returns true if the given class is numeric", RT.keyword(null, "line"), Integer.valueOf(160), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/jvm/utils.clj" });
    const__82 = (Var)RT.var("clojure.tools.analyzer.jvm.utils", "subsumes?");
    const__85 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "c1"), Symbol.intern(null, "c2")) })), RT.keyword(null, "doc"), "Returns true if c2 is subsumed by c1", RT.keyword(null, "line"), Integer.valueOf(166), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/jvm/utils.clj" });
    const__86 = (Var)RT.var("clojure.tools.analyzer.jvm.utils", "convertible?");
    const__89 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "c1"), Symbol.intern(null, "c2")) })), RT.keyword(null, "doc"), "Returns true if it's possible to convert from c1 to c2", RT.keyword(null, "line"), Integer.valueOf(176), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/jvm/utils.clj" });
    const__90 = (Var)RT.var("clojure.tools.analyzer.jvm.utils", "wider-than");
    const__92 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(191), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/jvm/utils.clj", RT.keyword(null, "doc"), "If the argument is a numeric primitive Class, returns a set of primitive Classes\n   that are narrower than the given one" });
    const__93 = (Var)RT.var("clojure.tools.analyzer.jvm.utils", "wider-primitive");
    const__96 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "from"), Symbol.intern(null, "to")) })), RT.keyword(null, "doc"), "Given two numeric primitive Classes, returns the wider one", RT.keyword(null, "line"), Integer.valueOf(201), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/jvm/utils.clj" });
    const__97 = (Var)RT.var("clojure.tools.analyzer.jvm.utils", "wider-tag*");
  }
  
  public static void __init1() {
    const__100 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "from"), Symbol.intern(null, "to")) })), RT.keyword(null, "doc"), "Given two Classes returns the wider one", RT.keyword(null, "line"), Integer.valueOf(208), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/jvm/utils.clj" });
    const__101 = (Var)RT.var("clojure.tools.analyzer.jvm.utils", "wider-tag");
    const__104 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "tags")) })), RT.keyword(null, "doc"), "Given a collection of Classes returns the wider one", RT.keyword(null, "line"), Integer.valueOf(230), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/jvm/utils.clj" });
    const__105 = (Var)RT.var("clojure.tools.analyzer.jvm.utils", "name-matches?");
    const__108 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "member")) })), RT.keyword(null, "line"), Integer.valueOf(243), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/jvm/utils.clj" });
    const__109 = (Var)RT.var("clojure.tools.analyzer.jvm.utils", "object-members");
    const__111 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(258), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/jvm/utils.clj" });
    const__112 = (Keyword)RT.keyword(null, "members");
    const__113 = (Var)RT.var("clojure.tools.analyzer.jvm.utils", "members*");
    const__115 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(261), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/jvm/utils.clj" });
    const__116 = (Var)RT.var("clojure.core.memoize", "lru");
    const__117 = (Var)RT.var("clojure.tools.analyzer.jvm.utils", "members");
    const__120 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "class")), Tuple.create(Symbol.intern(null, "class"), Symbol.intern(null, "member")) })), RT.keyword(null, "line"), Integer.valueOf(275), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/jvm/utils.clj" });
    const__121 = (Var)RT.var("clojure.tools.analyzer.jvm.utils", "static-members");
    const__124 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "class"), Symbol.intern(null, "f")) })), RT.keyword(null, "line"), Integer.valueOf(282), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/jvm/utils.clj" });
    const__125 = (Var)RT.var("clojure.tools.analyzer.jvm.utils", "instance-members");
    const__128 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "class"), Symbol.intern(null, "f")) })), RT.keyword(null, "line"), Integer.valueOf(287), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/jvm/utils.clj" });
    const__129 = (Var)RT.var("clojure.tools.analyzer.jvm.utils", "static-methods");
    const__132 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "class"), Symbol.intern(null, "method"), Symbol.intern(null, "argc")) })), RT.keyword(null, "line"), Integer.valueOf(292), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/jvm/utils.clj" });
    const__133 = (Var)RT.var("clojure.tools.analyzer.jvm.utils", "instance-methods");
    const__136 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "class"), Symbol.intern(null, "method"), Symbol.intern(null, "argc")) })), RT.keyword(null, "line"), Integer.valueOf(296), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/jvm/utils.clj" });
    const__137 = (Var)RT.var("clojure.tools.analyzer.jvm.utils", "static-field");
    const__140 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "class"), Symbol.intern(null, "f")) })), RT.keyword(null, "line"), Integer.valueOf(300), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/jvm/utils.clj" });
    const__141 = (Var)RT.var("clojure.tools.analyzer.jvm.utils", "instance-field");
    const__144 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "class"), Symbol.intern(null, "f")) })), RT.keyword(null, "line"), Integer.valueOf(307), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/jvm/utils.clj" });
    const__145 = (Var)RT.var("clojure.tools.analyzer.jvm.utils", "static-method");
    const__148 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "class"), Symbol.intern(null, "method")) })), RT.keyword(null, "line"), Integer.valueOf(314), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/jvm/utils.clj" });
    const__149 = (Var)RT.var("clojure.tools.analyzer.jvm.utils", "instance-method");
    const__152 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "class"), Symbol.intern(null, "method")) })), RT.keyword(null, "line"), Integer.valueOf(317), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/jvm/utils.clj" });
    const__153 = (Var)RT.var("clojure.tools.analyzer.jvm.utils", "prim-or-obj");
    const__156 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "tag")) })), RT.keyword(null, "doc"), "If the given Class is a primitive, returns that Class, otherwise returns Object", RT.keyword(null, "line"), Integer.valueOf(320), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/jvm/utils.clj" });
    const__157 = (Var)RT.var("clojure.tools.analyzer.jvm.utils", "prim-interface");
    const__160 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "tags")) })), RT.keyword(null, "line"), Integer.valueOf(327), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/jvm/utils.clj" });
    const__161 = (Var)RT.var("clojure.tools.analyzer.jvm.utils", "tag-match?");
    const__164 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "arg-tags"), Symbol.intern(null, "meth")) })), RT.keyword(null, "line"), Integer.valueOf(332), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/jvm/utils.clj" });
    const__165 = (Var)RT.var("clojure.tools.analyzer.jvm.utils", "try-best-match");
    const__168 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "tags"), Symbol.intern(null, "methods")) })), RT.keyword(null, "doc"), "Given a vector of arg tags and a collection of methods, tries to return the\n   subset of methods that match best the given tags", RT.keyword(null, "line"), Integer.valueOf(335), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/jvm/utils.clj" });
    const__169 = (Var)RT.var("clojure.tools.analyzer.jvm.utils", "ns->relpath");
    const__172 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })), RT.keyword(null, "line"), Integer.valueOf(376), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/jvm/utils.clj" });
    const__173 = (Var)RT.var("clojure.tools.analyzer.jvm.utils", "ns-url");
    const__176 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ns")) })), RT.keyword(null, "line"), Integer.valueOf(379), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/tools/analyzer/jvm/utils.clj" });
  }
  
  static  {
    __init0();
    __init1();
    Compiler.pushNSandLoader(RT.classForName("clojure.tools.analyzer.jvm.utils__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
