package clojure;

import clojure.core.VecNode;
import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.Keyword;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;

public class gvec__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final Var const__2;
  
  public static final Var const__3;
  
  public static final AFn const__9;
  
  public static final Object const__11;
  
  public static final Var const__12;
  
  public static final Keyword const__13;
  
  public static final Keyword const__14;
  
  public static final Var const__15;
  
  public static final AFn const__20;
  
  public static final Var const__21;
  
  public static final AFn const__23;
  
  public static final Keyword const__24;
  
  public static final Keyword const__25;
  
  public static final Keyword const__26;
  
  public static final Keyword const__27;
  
  public static final Keyword const__28;
  
  public static final Keyword const__29;
  
  public static final Keyword const__30;
  
  public static final Keyword const__31;
  
  public static final Var const__32;
  
  public static final AFn const__35;
  
  public static final Var const__36;
  
  public static final AFn const__41;
  
  public static void load() {
    const__3.setMeta((IPersistentMap)const__9);
    const__3
      
      .bindRoot(new VecNode(null, RT.object_array(const__11)));
    const__15.setMeta((IPersistentMap)const__20);
    const__15.bindRoot(new core.mk_am());
    ((Var)const__15)

      
      .setMacro();
    const__21.setMeta((IPersistentMap)const__23);
    const__21.bindRoot(RT.mapUniqueKeys(new Object[] { 
            const__24, new core.reify__8299(null), const__25, new core.reify__8302(null), const__26, new core.reify__8305(null), const__27, new core.reify__8308(null), const__28, new core.reify__8311(null), 
            const__29, new core.reify__8314(null), const__30, new core.reify__8317(null), const__31, new core.reify__8320(null) }));
    const__32.setMeta((IPersistentMap)const__35);
    const__32.bindRoot(new core.ams_check());
    ((Var)const__32)


















      
      .setMacro();
    const__36.setMeta((IPersistentMap)const__41);
    const__36.bindRoot(new core.vector_of());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "clojure.core");
    const__2 = (Var)RT.var("clojure.core", "*warn-on-reflection*");
    const__3 = (Var)RT.var("clojure.core", "EMPTY-NODE");
    const__9 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(19), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/gvec.clj" });
    const__11 = Long.valueOf(32L);
    const__12 = (Var)RT.var("clojure.core", "print-method");
    const__13 = (Keyword)RT.keyword("clojure.core", "VecSeq");
    const__14 = (Keyword)RT.keyword("clojure.core", "Vec");
    const__15 = (Var)RT.var("clojure.core", "mk-am");
    const__20 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "t")) })), RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(458), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/gvec.clj" });
    const__21 = (Var)RT.var("clojure.core", "ams");
    const__23 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(468), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/gvec.clj" });
    const__24 = (Keyword)RT.keyword(null, "int");
    const__25 = (Keyword)RT.keyword(null, "long");
    const__26 = (Keyword)RT.keyword(null, "float");
    const__27 = (Keyword)RT.keyword(null, "double");
    const__28 = (Keyword)RT.keyword(null, "byte");
    const__29 = (Keyword)RT.keyword(null, "short");
    const__30 = (Keyword)RT.keyword(null, "char");
    const__31 = (Keyword)RT.keyword(null, "boolean");
    const__32 = (Var)RT.var("clojure.core", "ams-check");
    const__35 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "t")) })), RT.keyword(null, "line"), Integer.valueOf(478), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/gvec.clj" });
    const__36 = (Var)RT.var("clojure.core", "vector-of");
    const__41 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "t")), Tuple.create(Symbol.intern(null, "t"), Symbol.intern(null, "&"), Symbol.intern(null, "elements")) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(492), RT.keyword(null, "column"), Integer.valueOf(15) })), RT.keyword(null, "doc"), "Creates a new vector of a single primitive type t, where t is one\n  of :int :long :float :double :byte :short :char or :boolean. The\n  resulting vector complies with the interface of vectors in general,\n  but stores the values unboxed internally.\n\n  Optionally takes one or more elements to populate the vector.", RT.keyword(null, "added"), "1.2", RT.keyword(null, "line"), Integer.valueOf(484), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/gvec.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("clojure.gvec__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
