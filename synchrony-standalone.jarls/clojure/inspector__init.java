package clojure;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class inspector__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__4;
  
  public static final AFn const__5;
  
  public static final Var const__6;
  
  public static final AFn const__14;
  
  public static final Var const__15;
  
  public static final AFn const__18;
  
  public static final Var const__19;
  
  public static final Keyword const__20;
  
  public static final Var const__21;
  
  public static final Var const__22;
  
  public static final Keyword const__23;
  
  public static final Keyword const__24;
  
  public static final Var const__25;
  
  public static final AFn const__28;
  
  public static final Var const__29;
  
  public static final AFn const__32;
  
  public static final Var const__33;
  
  public static final AFn const__37;
  
  public static final Var const__38;
  
  public static final AFn const__41;
  
  public static final Var const__42;
  
  public static final Object const__43;
  
  public static final Object const__44;
  
  public static final Var const__45;
  
  public static final AFn const__48;
  
  public static final Var const__49;
  
  public static final Var const__50;
  
  public static final AFn const__53;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new inspector.fn__9419());
    const__6.setMeta((IPersistentMap)const__14);
    const__6.bindRoot(new inspector.atom_QMARK_());
    const__15.setMeta((IPersistentMap)const__18);
    const__15.bindRoot(new inspector.collection_tag());
    const__25.setMeta((IPersistentMap)const__28);
    const__25.bindRoot(new inspector.tree_model());
    const__29.setMeta((IPersistentMap)const__32);
    const__29.bindRoot(new inspector.old_table_model());
    const__33.setMeta((IPersistentMap)const__37);
    const__33.bindRoot(new inspector.inspect_tree());
    const__38.setMeta((IPersistentMap)const__41);
    const__38.bindRoot(new inspector.inspect_table());
    const__45.setMeta((IPersistentMap)const__48);
    const__45.bindRoot(new inspector.list_model());
    const__50.setMeta((IPersistentMap)const__53);
    const__50.bindRoot(new inspector.inspect());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "clojure.inspector")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Graphical object inspector for Clojure data structures.", RT.keyword(null, "author"), "Rich Hickey" }));
    const__4 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Graphical object inspector for Clojure data structures.", RT.keyword(null, "author"), "Rich Hickey" });
    const__5 = (AFn)Symbol.intern(null, "clojure.core");
    const__6 = (Var)RT.var("clojure.inspector", "atom?");
    const__14 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(19), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/inspector.clj" });
    const__15 = (Var)RT.var("clojure.inspector", "collection-tag");
    const__18 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(22), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/inspector.clj" });
    const__19 = (Var)RT.var("clojure.inspector", "is-leaf");
    const__20 = (Keyword)RT.keyword(null, "default");
    const__21 = (Var)RT.var("clojure.inspector", "get-child");
    const__22 = (Var)RT.var("clojure.inspector", "get-child-count");
    const__23 = (Keyword)RT.keyword(null, "entry");
    const__24 = (Keyword)RT.keyword(null, "seqable");
    const__25 = (Var)RT.var("clojure.inspector", "tree-model");
    const__28 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "data")) })), RT.keyword(null, "line"), Integer.valueOf(56), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/inspector.clj" });
    const__29 = (Var)RT.var("clojure.inspector", "old-table-model");
    const__32 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "data")) })), RT.keyword(null, "line"), Integer.valueOf(72), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/inspector.clj" });
    const__33 = (Var)RT.var("clojure.inspector", "inspect-tree");
    const__37 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "data")) })), RT.keyword(null, "doc"), "creates a graphical (Swing) inspector on the supplied hierarchical data", RT.keyword(null, "added"), "1.0", RT.keyword(null, "line"), Integer.valueOf(91), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/inspector.clj" });
    const__38 = (Var)RT.var("clojure.inspector", "inspect-table");
    const__41 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "data")) })), RT.keyword(null, "doc"), "creates a graphical (Swing) inspector on the supplied regular\n  data, which must be a sequential data structure of data structures\n  of equal length", RT.keyword(null, "added"), "1.0", RT.keyword(null, "line"), Integer.valueOf(100), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/inspector.clj" });
    const__42 = (Var)RT.var("clojure.inspector", "list-provider");
    const__43 = RT.classForName("java.util.List");
    const__44 = RT.classForName("java.util.Map");
    const__45 = (Var)RT.var("clojure.inspector", "list-model");
    const__48 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "provider")) })), RT.keyword(null, "line"), Integer.valueOf(129), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/inspector.clj" });
    const__49 = (Var)RT.var("clojure.inspector", "table-model");
    const__50 = (Var)RT.var("clojure.inspector", "inspect");
    const__53 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "doc"), "creates a graphical (Swing) inspector on the supplied object", RT.keyword(null, "added"), "1.0", RT.keyword(null, "line"), Integer.valueOf(154), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/inspector.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("clojure.inspector__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
