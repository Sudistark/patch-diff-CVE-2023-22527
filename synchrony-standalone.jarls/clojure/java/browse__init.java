package clojure.java;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class browse__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__4;
  
  public static final AFn const__5;
  
  public static final Var const__6;
  
  public static final AFn const__15;
  
  public static final Var const__16;
  
  public static final AFn const__19;
  
  public static final Var const__20;
  
  public static final AFn const__23;
  
  public static final Var const__24;
  
  public static final AFn const__27;
  
  public static final Var const__28;
  
  public static final Keyword const__29;
  
  public static final Var const__30;
  
  public static final AFn const__33;
  
  public static final Var const__34;
  
  public static final AFn const__37;
  
  public static final Var const__38;
  
  public static final AFn const__42;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new browse.fn__11709());
    const__6.setMeta((IPersistentMap)const__15);
    const__6.bindRoot(new browse.macosx_QMARK_());
    const__16.setMeta((IPersistentMap)const__19);
    const__16.bindRoot(new browse.xdg_open_loc());
    const__20.setMeta((IPersistentMap)const__23);
    const__20.bindRoot(new browse.open_url_script_val());
    const__24.setDynamic(true).setMeta((IPersistentMap)const__27);
    const__24.setDynamic(true)





























      
      .bindRoot(((IFn)const__28.getRawRoot()).invoke(const__29));
    const__30.setMeta((IPersistentMap)const__33);
    const__30.bindRoot(new browse.open_url_in_browser());
    const__34.setMeta((IPersistentMap)const__37);
    const__34.bindRoot(new browse.open_url_in_swing());
    const__38.setMeta((IPersistentMap)const__42);
    const__38.bindRoot(new browse.browse_url());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "clojure.java.browse")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "author"), "Christophe Grand", RT.keyword(null, "doc"), "Start a web browser from Clojure" }));
    const__4 = (AFn)RT.map(new Object[] { RT.keyword(null, "author"), "Christophe Grand", RT.keyword(null, "doc"), "Start a web browser from Clojure" });
    const__5 = (AFn)Symbol.intern(null, "clojure.core");
    const__6 = (Var)RT.var("clojure.java.browse", "macosx?");
    const__15 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(17), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/java/browse.clj" });
    const__16 = (Var)RT.var("clojure.java.browse", "xdg-open-loc");
    const__19 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(21), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/java/browse.clj" });
    const__20 = (Var)RT.var("clojure.java.browse", "open-url-script-val");
    const__23 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(29), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/java/browse.clj" });
    const__24 = (Var)RT.var("clojure.java.browse", "*open-url-script*");
    const__27 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(40), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/java/browse.clj" });
    const__28 = (Var)RT.var("clojure.core", "atom");
    const__29 = (Keyword)RT.keyword(null, "uninitialized");
    const__30 = (Var)RT.var("clojure.java.browse", "open-url-in-browser");
    const__33 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "url")) })), RT.keyword(null, "doc"), "Opens url (a string) in the default system web browser.  May not\n  work on all platforms.  Returns url on success, nil if not\n  supported.", RT.keyword(null, "line"), Integer.valueOf(42), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/java/browse.clj" });
    const__34 = (Var)RT.var("clojure.java.browse", "open-url-in-swing");
    const__37 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "url")) })), RT.keyword(null, "doc"), "Opens url (a string) in a Swing window.", RT.keyword(null, "line"), Integer.valueOf(57), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/java/browse.clj" });
    const__38 = (Var)RT.var("clojure.java.browse", "browse-url");
    const__42 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "url")) })), RT.keyword(null, "doc"), "Open url in a browser", RT.keyword(null, "added"), "1.2", RT.keyword(null, "line"), Integer.valueOf(66), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/java/browse.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("clojure.java.browse__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
