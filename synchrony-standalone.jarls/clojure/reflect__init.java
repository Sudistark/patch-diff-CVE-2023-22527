package clojure;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class reflect__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final Keyword const__4;
  
  public static final AFn const__5;
  
  public static final AFn const__6;
  
  public static final Object const__7;
  
  public static final Var const__8;
  
  public static final Var const__9;
  
  public static final Var const__10;
  
  public static final Var const__11;
  
  public static final ISeq const__12;
  
  public static final Var const__13;
  
  public static final Var const__14;
  
  public static final AFn const__18;
  
  public static final Keyword const__19;
  
  public static final AFn const__20;
  
  public static final Keyword const__21;
  
  public static final Keyword const__22;
  
  public static final AFn const__24;
  
  public static final Keyword const__25;
  
  public static final Var const__26;
  
  public static final Var const__27;
  
  public static final Var const__28;
  
  public static final AFn const__29;
  
  public static final AFn const__30;
  
  public static final Keyword const__31;
  
  public static final Var const__32;
  
  public static final AFn const__33;
  
  public static final Object const__34;
  
  public static final Var const__35;
  
  public static final ISeq const__36;
  
  public static final AFn const__38;
  
  public static final AFn const__39;
  
  public static final AFn const__41;
  
  public static final AFn const__42;
  
  public static final AFn const__43;
  
  public static final AFn const__44;
  
  public static final Var const__45;
  
  public static final AFn const__52;
  
  public static final Var const__53;
  
  public static final AFn const__57;
  
  public static final Var const__58;
  
  public static final AFn const__61;
  
  public static final Var const__62;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new reflect.fn__11875());
    const__45.setMeta((IPersistentMap)const__52);
    const__53.setMeta((IPersistentMap)const__57);
    const__53.bindRoot(new reflect.type_reflect());
    const__58.setMeta((IPersistentMap)const__61);
    const__58.bindRoot(new reflect.reflect());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "clojure.reflect")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "author"), "Stuart Halloway", RT.keyword(null, "added"), "1.3", RT.keyword(null, "doc"), "Reflection on Host Types\nAlpha - subject to change.\n\nTwo main entry points: \n\n* type-reflect reflects on something that implements TypeReference.\n* reflect (for REPL use) reflects on the class of an instance, or\n  on a class if passed a class\n\nKey features:\n\n* Exposes the read side of reflection as pure data. Reflecting\n  on a type returns a map with keys :bases, :flags, and :members.\n\n* Canonicalizes class names as Clojure symbols. Types can extend\n  to the TypeReference protocol to indicate that they can be\n  unambiguously resolved as a type name. The canonical format\n  requires one non-Java-ish convention: array brackets are <>\n  instead of [] so they can be part of a Clojure symbol.\n\n* Pluggable Reflectors for different implementations. The default\n  JavaReflector is good when you have a class in hand, or use\n  the AsmReflector for \"hands off\" reflection without forcing\n  classes to load.\n\nPlatform implementers must:\n\n* Create an implementation of Reflector.\n* Create one or more implementations of TypeReference.\n* def default-reflector to be an instance that satisfies Reflector." }));
    const__4 = (Keyword)RT.keyword(null, "doc");
    const__5 = (AFn)RT.map(new Object[] { RT.keyword(null, "author"), "Stuart Halloway", RT.keyword(null, "added"), "1.3", RT.keyword(null, "doc"), "Reflection on Host Types\nAlpha - subject to change.\n\nTwo main entry points: \n\n* type-reflect reflects on something that implements TypeReference.\n* reflect (for REPL use) reflects on the class of an instance, or\n  on a class if passed a class\n\nKey features:\n\n* Exposes the read side of reflection as pure data. Reflecting\n  on a type returns a map with keys :bases, :flags, and :members.\n\n* Canonicalizes class names as Clojure symbols. Types can extend\n  to the TypeReference protocol to indicate that they can be\n  unambiguously resolved as a type name. The canonical format\n  requires one non-Java-ish convention: array brackets are <>\n  instead of [] so they can be part of a Clojure symbol.\n\n* Pluggable Reflectors for different implementations. The default\n  JavaReflector is good when you have a class in hand, or use\n  the AsmReflector for \"hands off\" reflection without forcing\n  classes to load.\n\nPlatform implementers must:\n\n* Create an implementation of Reflector.\n* Create one or more implementations of TypeReference.\n* def default-reflector to be an instance that satisfies Reflector." });
    const__6 = (AFn)Symbol.intern(null, "clojure.core");
    const__7 = RT.classForName("clojure.reflect.Reflector");
    const__8 = (Var)RT.var("clojure.core", "alter-meta!");
    const__9 = (Var)RT.var("clojure.reflect", "Reflector");
    const__10 = (Var)RT.var("clojure.core", "assoc");
    const__11 = (Var)RT.var("clojure.core", "assert-same-protocol");
    const__12 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "do-reflect")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "reflector"), Symbol.intern(null, "typeref")) })) })) }));
    const__13 = (Var)RT.var("clojure.core", "alter-var-root");
    const__14 = (Var)RT.var("clojure.core", "merge");
    const__18 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "clojure.reflect.Reflector"), RT.keyword(null, "on-interface"), RT.classForName("clojure.reflect.Reflector"), RT.keyword(null, "doc"), "Protocol for reflection implementers." });
    const__19 = (Keyword)RT.keyword(null, "sigs");
    const__20 = (AFn)RT.map(new Object[] { RT.keyword(null, "do-reflect"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "do-reflect")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "reflector"), Symbol.intern(null, "typeref")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "reflector"), Symbol.intern(null, "typeref")) })), RT.keyword(null, "doc"), null }) });
    const__21 = (Keyword)RT.keyword(null, "var");
    const__22 = (Keyword)RT.keyword(null, "method-map");
    const__24 = (AFn)RT.map(new Object[] { RT.keyword(null, "do-reflect"), RT.keyword(null, "do-reflect") });
    const__25 = (Keyword)RT.keyword(null, "method-builders");
    const__26 = (Var)RT.var("clojure.core", "intern");
    const__27 = (Var)RT.var("clojure.core", "*ns*");
    const__28 = (Var)RT.var("clojure.core", "with-meta");
    const__29 = (AFn)((IObj)Symbol.intern(null, "do-reflect")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "reflector"), Symbol.intern(null, "typeref")) })) }));
    const__30 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "do-reflect")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "reflector"), Symbol.intern(null, "typeref")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "reflector"), Symbol.intern(null, "typeref")) })), RT.keyword(null, "doc"), null });
    const__31 = (Keyword)RT.keyword(null, "protocol");
    const__32 = (Var)RT.var("clojure.core", "-reset-methods");
    const__33 = (AFn)Symbol.intern(null, "Reflector");
    const__34 = RT.classForName("clojure.reflect.TypeReference");
    const__35 = (Var)RT.var("clojure.reflect", "TypeReference");
    const__36 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "typename")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Returns Java name as returned by ASM getClassName, e.g. byte[], java.lang.String[]", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "o")) })) })) }));
    const__38 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "clojure.reflect.TypeReference"), RT.keyword(null, "on-interface"), RT.classForName("clojure.reflect.TypeReference"), RT.keyword(null, "doc"), "A TypeReference can be unambiguously converted to a type name on\n   the host platform.\n\n   All typerefs are normalized into symbols. If you need to\n   normalize a typeref yourself, call typesym." });
    const__39 = (AFn)RT.map(new Object[] { RT.keyword(null, "typename"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "typename")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Returns Java name as returned by ASM getClassName, e.g. byte[], java.lang.String[]", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "o")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "o")) })), RT.keyword(null, "doc"), "Returns Java name as returned by ASM getClassName, e.g. byte[], java.lang.String[]" }) });
    const__41 = (AFn)RT.map(new Object[] { RT.keyword(null, "typename"), RT.keyword(null, "typename") });
    const__42 = (AFn)((IObj)Symbol.intern(null, "typename")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Returns Java name as returned by ASM getClassName, e.g. byte[], java.lang.String[]", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "o")) })) }));
    const__43 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "typename")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Returns Java name as returned by ASM getClassName, e.g. byte[], java.lang.String[]", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "o")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "o")) })), RT.keyword(null, "doc"), "Returns Java name as returned by ASM getClassName, e.g. byte[], java.lang.String[]" });
    const__44 = (AFn)Symbol.intern(null, "TypeReference");
    const__45 = (Var)RT.var("clojure.reflect", "default-reflector");
    const__52 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(56), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/reflect.clj" });
    const__53 = (Var)RT.var("clojure.reflect", "type-reflect");
    const__57 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "typeref"), Symbol.intern(null, "&"), Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "Alpha - subject to change.\n   Reflect on a typeref, returning a map with :bases, :flags, and\n  :members. In the discussion below, names are always Clojure symbols.\n\n   :bases            a set of names of the type's bases\n   :flags            a set of keywords naming the boolean attributes\n                     of the type.\n   :members          a set of the type's members. Each member is a map\n                     and can be a constructor, method, or field.\n\n   Keys common to all members:\n   :name             name of the type \n   :declaring-class  name of the declarer\n   :flags            keyword naming boolean attributes of the member\n\n   Keys specific to constructors:\n   :parameter-types  vector of parameter type names\n   :exception-types  vector of exception type names\n\n   Key specific to methods:\n   :parameter-types  vector of parameter type names\n   :exception-types  vector of exception type names\n   :return-type      return type name\n\n   Keys specific to fields:\n   :type             type name\n\n   Options:\n\n     :ancestors     in addition to the keys described above, also\n                    include an :ancestors key with the entire set of\n                    ancestors, and add all ancestor members to\n                    :members.\n     :reflector     implementation to use. Defaults to JavaReflector,\n                    AsmReflector is also an option.", RT.keyword(null, "added"), "1.3", RT.keyword(null, "line"), Integer.valueOf(58), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/reflect.clj" });
    const__58 = (Var)RT.var("clojure.reflect", "reflect");
    const__61 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "obj"), Symbol.intern(null, "&"), Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "Alpha - subject to change.\n   Reflect on the type of obj (or obj itself if obj is a class).\n   Return value and options are the same as for type-reflect. ", RT.keyword(null, "added"), "1.3", RT.keyword(null, "line"), Integer.valueOf(115), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/reflect.clj" });
    const__62 = (Var)RT.var("clojure.core", "load");
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("clojure.reflect__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
