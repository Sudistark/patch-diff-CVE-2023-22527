package clojure.spec.gen;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;

public class alpha__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__4;
  
  public static final AFn const__5;
  
  public static final Var const__6;
  
  public static final AFn const__15;
  
  public static final Var const__16;
  
  public static final AFn const__18;
  
  public static final Var const__19;
  
  public static final AFn const__22;
  
  public static final Var const__23;
  
  public static final AFn const__25;
  
  public static final Var const__26;
  
  public static final AFn const__30;
  
  public static final Var const__31;
  
  public static final AFn const__35;
  
  public static final Var const__36;
  
  public static final AFn const__39;
  
  public static final Var const__40;
  
  public static final AFn const__43;
  
  public static final Var const__44;
  
  public static final AFn const__47;
  
  public static final Var const__48;
  
  public static final AFn const__51;
  
  public static final Var const__52;
  
  public static final AFn const__55;
  
  public static final Var const__56;
  
  public static final AFn const__59;
  
  public static final Var const__60;
  
  public static final AFn const__63;
  
  public static final Var const__64;
  
  public static final AFn const__67;
  
  public static final Var const__68;
  
  public static final AFn const__70;
  
  public static final Var const__71;
  
  public static final AFn const__74;
  
  public static void load() { // Byte code:
    //   0: getstatic clojure/spec/gen/alpha__init.const__0 : Lclojure/lang/Var;
    //   3: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   6: checkcast clojure/lang/IFn
    //   9: getstatic clojure/spec/gen/alpha__init.const__1 : Lclojure/lang/AFn;
    //   12: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   17: new clojure/spec/gen/alpha$loading__6434__auto____2621
    //   20: dup
    //   21: invokespecial <init> : ()V
    //   24: checkcast clojure/lang/IFn
    //   27: invokeinterface invoke : ()Ljava/lang/Object;
    //   32: getstatic clojure/spec/gen/alpha__init.const__1 : Lclojure/lang/AFn;
    //   35: checkcast clojure/lang/Symbol
    //   38: getstatic clojure/spec/gen/alpha__init.const__2 : Lclojure/lang/AFn;
    //   41: invokevirtual equals : (Ljava/lang/Object;)Z
    //   44: ifeq -> 52
    //   47: aconst_null
    //   48: goto -> 67
    //   51: pop
    //   52: new clojure/spec/gen/alpha$fn__2623
    //   55: dup
    //   56: invokespecial <init> : ()V
    //   59: checkcast java/util/concurrent/Callable
    //   62: invokestatic runInTransaction : (Ljava/util/concurrent/Callable;)Ljava/lang/Object;
    //   65: pop
    //   66: aconst_null
    //   67: getstatic clojure/spec/gen/alpha__init.const__3 : Lclojure/lang/Var;
    //   70: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   73: checkcast clojure/lang/IFn
    //   76: getstatic clojure/spec/gen/alpha__init.const__4 : Lclojure/lang/AFn;
    //   79: getstatic clojure/spec/gen/alpha__init.const__5 : Lclojure/lang/AFn;
    //   82: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   87: new clojure/spec/gen/alpha$fn__2625
    //   90: dup
    //   91: invokespecial <init> : ()V
    //   94: checkcast clojure/lang/IFn
    //   97: invokeinterface invoke : ()Ljava/lang/Object;
    //   102: getstatic clojure/spec/gen/alpha__init.const__6 : Lclojure/lang/Var;
    //   105: dup
    //   106: getstatic clojure/spec/gen/alpha__init.const__15 : Lclojure/lang/AFn;
    //   109: checkcast clojure/lang/IPersistentMap
    //   112: invokevirtual setMeta : (Lclojure/lang/IPersistentMap;)V
    //   115: dup
    //   116: new clojure/spec/gen/alpha$dynaload
    //   119: dup
    //   120: invokespecial <init> : ()V
    //   123: invokevirtual bindRoot : (Ljava/lang/Object;)V
    //   126: getstatic clojure/spec/gen/alpha__init.const__16 : Lclojure/lang/Var;
    //   129: dup
    //   130: getstatic clojure/spec/gen/alpha__init.const__18 : Lclojure/lang/AFn;
    //   133: checkcast clojure/lang/IPersistentMap
    //   136: invokevirtual setMeta : (Lclojure/lang/IPersistentMap;)V
    //   139: dup
    //   140: new clojure/lang/Delay
    //   143: dup
    //   144: new clojure/spec/gen/alpha$fn__2632
    //   147: dup
    //   148: invokespecial <init> : ()V
    //   151: checkcast clojure/lang/IFn
    //   154: invokespecial <init> : (Lclojure/lang/IFn;)V
    //   157: invokevirtual bindRoot : (Ljava/lang/Object;)V
    //   160: getstatic clojure/spec/gen/alpha__init.const__19 : Lclojure/lang/Var;
    //   163: dup
    //   164: getstatic clojure/spec/gen/alpha__init.const__22 : Lclojure/lang/AFn;
    //   167: checkcast clojure/lang/IPersistentMap
    //   170: invokevirtual setMeta : (Lclojure/lang/IPersistentMap;)V
    //   173: dup
    //   174: new clojure/spec/gen/alpha$quick_check
    //   177: dup
    //   178: invokespecial <init> : ()V
    //   181: invokevirtual bindRoot : (Ljava/lang/Object;)V
    //   184: getstatic clojure/spec/gen/alpha__init.const__23 : Lclojure/lang/Var;
    //   187: dup
    //   188: getstatic clojure/spec/gen/alpha__init.const__25 : Lclojure/lang/AFn;
    //   191: checkcast clojure/lang/IPersistentMap
    //   194: invokevirtual setMeta : (Lclojure/lang/IPersistentMap;)V
    //   197: dup
    //   198: new clojure/lang/Delay
    //   201: dup
    //   202: new clojure/spec/gen/alpha$fn__2635
    //   205: dup
    //   206: invokespecial <init> : ()V
    //   209: checkcast clojure/lang/IFn
    //   212: invokespecial <init> : (Lclojure/lang/IFn;)V
    //   215: invokevirtual bindRoot : (Ljava/lang/Object;)V
    //   218: getstatic clojure/spec/gen/alpha__init.const__26 : Lclojure/lang/Var;
    //   221: dup
    //   222: getstatic clojure/spec/gen/alpha__init.const__30 : Lclojure/lang/AFn;
    //   225: checkcast clojure/lang/IPersistentMap
    //   228: invokevirtual setMeta : (Lclojure/lang/IPersistentMap;)V
    //   231: dup
    //   232: new clojure/spec/gen/alpha$for_all_STAR_
    //   235: dup
    //   236: invokespecial <init> : ()V
    //   239: invokevirtual bindRoot : (Ljava/lang/Object;)V
    //   242: new clojure/spec/gen/alpha$fn__2638
    //   245: dup
    //   246: invokespecial <init> : ()V
    //   249: checkcast clojure/lang/IFn
    //   252: invokeinterface invoke : ()Ljava/lang/Object;
    //   257: getstatic clojure/spec/gen/alpha__init.const__31 : Lclojure/lang/Var;
    //   260: dup
    //   261: getstatic clojure/spec/gen/alpha__init.const__35 : Lclojure/lang/AFn;
    //   264: checkcast clojure/lang/IPersistentMap
    //   267: invokevirtual setMeta : (Lclojure/lang/IPersistentMap;)V
    //   270: dup
    //   271: new clojure/spec/gen/alpha$delay_impl
    //   274: dup
    //   275: invokespecial <init> : ()V
    //   278: invokevirtual bindRoot : (Ljava/lang/Object;)V
    //   281: getstatic clojure/spec/gen/alpha__init.const__36 : Lclojure/lang/Var;
    //   284: dup
    //   285: getstatic clojure/spec/gen/alpha__init.const__39 : Lclojure/lang/AFn;
    //   288: checkcast clojure/lang/IPersistentMap
    //   291: invokevirtual setMeta : (Lclojure/lang/IPersistentMap;)V
    //   294: dup
    //   295: new clojure/spec/gen/alpha$delay
    //   298: dup
    //   299: invokespecial <init> : ()V
    //   302: invokevirtual bindRoot : (Ljava/lang/Object;)V
    //   305: getstatic clojure/spec/gen/alpha__init.const__36 : Lclojure/lang/Var;
    //   308: checkcast clojure/lang/Var
    //   311: invokevirtual setMacro : ()V
    //   314: aconst_null
    //   315: getstatic clojure/spec/gen/alpha__init.const__36 : Lclojure/lang/Var;
    //   318: getstatic clojure/spec/gen/alpha__init.const__40 : Lclojure/lang/Var;
    //   321: dup
    //   322: getstatic clojure/spec/gen/alpha__init.const__43 : Lclojure/lang/AFn;
    //   325: checkcast clojure/lang/IPersistentMap
    //   328: invokevirtual setMeta : (Lclojure/lang/IPersistentMap;)V
    //   331: dup
    //   332: new clojure/spec/gen/alpha$gen_for_name
    //   335: dup
    //   336: invokespecial <init> : ()V
    //   339: invokevirtual bindRoot : (Ljava/lang/Object;)V
    //   342: getstatic clojure/spec/gen/alpha__init.const__44 : Lclojure/lang/Var;
    //   345: dup
    //   346: getstatic clojure/spec/gen/alpha__init.const__47 : Lclojure/lang/AFn;
    //   349: checkcast clojure/lang/IPersistentMap
    //   352: invokevirtual setMeta : (Lclojure/lang/IPersistentMap;)V
    //   355: dup
    //   356: new clojure/spec/gen/alpha$lazy_combinator
    //   359: dup
    //   360: invokespecial <init> : ()V
    //   363: invokevirtual bindRoot : (Ljava/lang/Object;)V
    //   366: getstatic clojure/spec/gen/alpha__init.const__44 : Lclojure/lang/Var;
    //   369: checkcast clojure/lang/Var
    //   372: invokevirtual setMacro : ()V
    //   375: aconst_null
    //   376: getstatic clojure/spec/gen/alpha__init.const__44 : Lclojure/lang/Var;
    //   379: getstatic clojure/spec/gen/alpha__init.const__48 : Lclojure/lang/Var;
    //   382: dup
    //   383: getstatic clojure/spec/gen/alpha__init.const__51 : Lclojure/lang/AFn;
    //   386: checkcast clojure/lang/IPersistentMap
    //   389: invokevirtual setMeta : (Lclojure/lang/IPersistentMap;)V
    //   392: dup
    //   393: new clojure/spec/gen/alpha$lazy_combinators
    //   396: dup
    //   397: invokespecial <init> : ()V
    //   400: invokevirtual bindRoot : (Ljava/lang/Object;)V
    //   403: getstatic clojure/spec/gen/alpha__init.const__48 : Lclojure/lang/Var;
    //   406: checkcast clojure/lang/Var
    //   409: invokevirtual setMacro : ()V
    //   412: aconst_null
    //   413: getstatic clojure/spec/gen/alpha__init.const__48 : Lclojure/lang/Var;
    //   416: new clojure/spec/gen/alpha$fn__2662
    //   419: dup
    //   420: invokespecial <init> : ()V
    //   423: checkcast clojure/lang/IFn
    //   426: invokeinterface invoke : ()Ljava/lang/Object;
    //   431: new clojure/spec/gen/alpha$fn__2669
    //   434: dup
    //   435: invokespecial <init> : ()V
    //   438: checkcast clojure/lang/IFn
    //   441: invokeinterface invoke : ()Ljava/lang/Object;
    //   446: new clojure/spec/gen/alpha$fn__2676
    //   449: dup
    //   450: invokespecial <init> : ()V
    //   453: checkcast clojure/lang/IFn
    //   456: invokeinterface invoke : ()Ljava/lang/Object;
    //   461: new clojure/spec/gen/alpha$fn__2683
    //   464: dup
    //   465: invokespecial <init> : ()V
    //   468: checkcast clojure/lang/IFn
    //   471: invokeinterface invoke : ()Ljava/lang/Object;
    //   476: new clojure/spec/gen/alpha$fn__2690
    //   479: dup
    //   480: invokespecial <init> : ()V
    //   483: checkcast clojure/lang/IFn
    //   486: invokeinterface invoke : ()Ljava/lang/Object;
    //   491: new clojure/spec/gen/alpha$fn__2697
    //   494: dup
    //   495: invokespecial <init> : ()V
    //   498: checkcast clojure/lang/IFn
    //   501: invokeinterface invoke : ()Ljava/lang/Object;
    //   506: new clojure/spec/gen/alpha$fn__2704
    //   509: dup
    //   510: invokespecial <init> : ()V
    //   513: checkcast clojure/lang/IFn
    //   516: invokeinterface invoke : ()Ljava/lang/Object;
    //   521: new clojure/spec/gen/alpha$fn__2711
    //   524: dup
    //   525: invokespecial <init> : ()V
    //   528: checkcast clojure/lang/IFn
    //   531: invokeinterface invoke : ()Ljava/lang/Object;
    //   536: new clojure/spec/gen/alpha$fn__2718
    //   539: dup
    //   540: invokespecial <init> : ()V
    //   543: checkcast clojure/lang/IFn
    //   546: invokeinterface invoke : ()Ljava/lang/Object;
    //   551: new clojure/spec/gen/alpha$fn__2725
    //   554: dup
    //   555: invokespecial <init> : ()V
    //   558: checkcast clojure/lang/IFn
    //   561: invokeinterface invoke : ()Ljava/lang/Object;
    //   566: new clojure/spec/gen/alpha$fn__2732
    //   569: dup
    //   570: invokespecial <init> : ()V
    //   573: checkcast clojure/lang/IFn
    //   576: invokeinterface invoke : ()Ljava/lang/Object;
    //   581: new clojure/spec/gen/alpha$fn__2739
    //   584: dup
    //   585: invokespecial <init> : ()V
    //   588: checkcast clojure/lang/IFn
    //   591: invokeinterface invoke : ()Ljava/lang/Object;
    //   596: new clojure/spec/gen/alpha$fn__2746
    //   599: dup
    //   600: invokespecial <init> : ()V
    //   603: checkcast clojure/lang/IFn
    //   606: invokeinterface invoke : ()Ljava/lang/Object;
    //   611: new clojure/spec/gen/alpha$fn__2753
    //   614: dup
    //   615: invokespecial <init> : ()V
    //   618: checkcast clojure/lang/IFn
    //   621: invokeinterface invoke : ()Ljava/lang/Object;
    //   626: new clojure/spec/gen/alpha$fn__2760
    //   629: dup
    //   630: invokespecial <init> : ()V
    //   633: checkcast clojure/lang/IFn
    //   636: invokeinterface invoke : ()Ljava/lang/Object;
    //   641: new clojure/spec/gen/alpha$fn__2767
    //   644: dup
    //   645: invokespecial <init> : ()V
    //   648: checkcast clojure/lang/IFn
    //   651: invokeinterface invoke : ()Ljava/lang/Object;
    //   656: new clojure/spec/gen/alpha$fn__2774
    //   659: dup
    //   660: invokespecial <init> : ()V
    //   663: checkcast clojure/lang/IFn
    //   666: invokeinterface invoke : ()Ljava/lang/Object;
    //   671: new clojure/spec/gen/alpha$fn__2781
    //   674: dup
    //   675: invokespecial <init> : ()V
    //   678: checkcast clojure/lang/IFn
    //   681: invokeinterface invoke : ()Ljava/lang/Object;
    //   686: new clojure/spec/gen/alpha$fn__2788
    //   689: dup
    //   690: invokespecial <init> : ()V
    //   693: checkcast clojure/lang/IFn
    //   696: invokeinterface invoke : ()Ljava/lang/Object;
    //   701: new clojure/spec/gen/alpha$fn__2795
    //   704: dup
    //   705: invokespecial <init> : ()V
    //   708: checkcast clojure/lang/IFn
    //   711: invokeinterface invoke : ()Ljava/lang/Object;
    //   716: new clojure/spec/gen/alpha$fn__2802
    //   719: dup
    //   720: invokespecial <init> : ()V
    //   723: checkcast clojure/lang/IFn
    //   726: invokeinterface invoke : ()Ljava/lang/Object;
    //   731: getstatic clojure/spec/gen/alpha__init.const__52 : Lclojure/lang/Var;
    //   734: dup
    //   735: getstatic clojure/spec/gen/alpha__init.const__55 : Lclojure/lang/AFn;
    //   738: checkcast clojure/lang/IPersistentMap
    //   741: invokevirtual setMeta : (Lclojure/lang/IPersistentMap;)V
    //   744: dup
    //   745: new clojure/spec/gen/alpha$lazy_prim
    //   748: dup
    //   749: invokespecial <init> : ()V
    //   752: invokevirtual bindRoot : (Ljava/lang/Object;)V
    //   755: getstatic clojure/spec/gen/alpha__init.const__52 : Lclojure/lang/Var;
    //   758: checkcast clojure/lang/Var
    //   761: invokevirtual setMacro : ()V
    //   764: aconst_null
    //   765: getstatic clojure/spec/gen/alpha__init.const__52 : Lclojure/lang/Var;
    //   768: getstatic clojure/spec/gen/alpha__init.const__56 : Lclojure/lang/Var;
    //   771: dup
    //   772: getstatic clojure/spec/gen/alpha__init.const__59 : Lclojure/lang/AFn;
    //   775: checkcast clojure/lang/IPersistentMap
    //   778: invokevirtual setMeta : (Lclojure/lang/IPersistentMap;)V
    //   781: dup
    //   782: new clojure/spec/gen/alpha$lazy_prims
    //   785: dup
    //   786: invokespecial <init> : ()V
    //   789: invokevirtual bindRoot : (Ljava/lang/Object;)V
    //   792: getstatic clojure/spec/gen/alpha__init.const__56 : Lclojure/lang/Var;
    //   795: checkcast clojure/lang/Var
    //   798: invokevirtual setMacro : ()V
    //   801: aconst_null
    //   802: getstatic clojure/spec/gen/alpha__init.const__56 : Lclojure/lang/Var;
    //   805: new clojure/spec/gen/alpha$fn__2814
    //   808: dup
    //   809: invokespecial <init> : ()V
    //   812: checkcast clojure/lang/IFn
    //   815: invokeinterface invoke : ()Ljava/lang/Object;
    //   820: new clojure/spec/gen/alpha$fn__2821
    //   823: dup
    //   824: invokespecial <init> : ()V
    //   827: checkcast clojure/lang/IFn
    //   830: invokeinterface invoke : ()Ljava/lang/Object;
    //   835: new clojure/spec/gen/alpha$fn__2828
    //   838: dup
    //   839: invokespecial <init> : ()V
    //   842: checkcast clojure/lang/IFn
    //   845: invokeinterface invoke : ()Ljava/lang/Object;
    //   850: new clojure/spec/gen/alpha$fn__2835
    //   853: dup
    //   854: invokespecial <init> : ()V
    //   857: checkcast clojure/lang/IFn
    //   860: invokeinterface invoke : ()Ljava/lang/Object;
    //   865: new clojure/spec/gen/alpha$fn__2842
    //   868: dup
    //   869: invokespecial <init> : ()V
    //   872: checkcast clojure/lang/IFn
    //   875: invokeinterface invoke : ()Ljava/lang/Object;
    //   880: new clojure/spec/gen/alpha$fn__2849
    //   883: dup
    //   884: invokespecial <init> : ()V
    //   887: checkcast clojure/lang/IFn
    //   890: invokeinterface invoke : ()Ljava/lang/Object;
    //   895: new clojure/spec/gen/alpha$fn__2856
    //   898: dup
    //   899: invokespecial <init> : ()V
    //   902: checkcast clojure/lang/IFn
    //   905: invokeinterface invoke : ()Ljava/lang/Object;
    //   910: new clojure/spec/gen/alpha$fn__2863
    //   913: dup
    //   914: invokespecial <init> : ()V
    //   917: checkcast clojure/lang/IFn
    //   920: invokeinterface invoke : ()Ljava/lang/Object;
    //   925: new clojure/spec/gen/alpha$fn__2870
    //   928: dup
    //   929: invokespecial <init> : ()V
    //   932: checkcast clojure/lang/IFn
    //   935: invokeinterface invoke : ()Ljava/lang/Object;
    //   940: new clojure/spec/gen/alpha$fn__2877
    //   943: dup
    //   944: invokespecial <init> : ()V
    //   947: checkcast clojure/lang/IFn
    //   950: invokeinterface invoke : ()Ljava/lang/Object;
    //   955: new clojure/spec/gen/alpha$fn__2884
    //   958: dup
    //   959: invokespecial <init> : ()V
    //   962: checkcast clojure/lang/IFn
    //   965: invokeinterface invoke : ()Ljava/lang/Object;
    //   970: new clojure/spec/gen/alpha$fn__2891
    //   973: dup
    //   974: invokespecial <init> : ()V
    //   977: checkcast clojure/lang/IFn
    //   980: invokeinterface invoke : ()Ljava/lang/Object;
    //   985: new clojure/spec/gen/alpha$fn__2898
    //   988: dup
    //   989: invokespecial <init> : ()V
    //   992: checkcast clojure/lang/IFn
    //   995: invokeinterface invoke : ()Ljava/lang/Object;
    //   1000: new clojure/spec/gen/alpha$fn__2905
    //   1003: dup
    //   1004: invokespecial <init> : ()V
    //   1007: checkcast clojure/lang/IFn
    //   1010: invokeinterface invoke : ()Ljava/lang/Object;
    //   1015: new clojure/spec/gen/alpha$fn__2912
    //   1018: dup
    //   1019: invokespecial <init> : ()V
    //   1022: checkcast clojure/lang/IFn
    //   1025: invokeinterface invoke : ()Ljava/lang/Object;
    //   1030: new clojure/spec/gen/alpha$fn__2919
    //   1033: dup
    //   1034: invokespecial <init> : ()V
    //   1037: checkcast clojure/lang/IFn
    //   1040: invokeinterface invoke : ()Ljava/lang/Object;
    //   1045: new clojure/spec/gen/alpha$fn__2926
    //   1048: dup
    //   1049: invokespecial <init> : ()V
    //   1052: checkcast clojure/lang/IFn
    //   1055: invokeinterface invoke : ()Ljava/lang/Object;
    //   1060: new clojure/spec/gen/alpha$fn__2933
    //   1063: dup
    //   1064: invokespecial <init> : ()V
    //   1067: checkcast clojure/lang/IFn
    //   1070: invokeinterface invoke : ()Ljava/lang/Object;
    //   1075: new clojure/spec/gen/alpha$fn__2940
    //   1078: dup
    //   1079: invokespecial <init> : ()V
    //   1082: checkcast clojure/lang/IFn
    //   1085: invokeinterface invoke : ()Ljava/lang/Object;
    //   1090: new clojure/spec/gen/alpha$fn__2947
    //   1093: dup
    //   1094: invokespecial <init> : ()V
    //   1097: checkcast clojure/lang/IFn
    //   1100: invokeinterface invoke : ()Ljava/lang/Object;
    //   1105: new clojure/spec/gen/alpha$fn__2954
    //   1108: dup
    //   1109: invokespecial <init> : ()V
    //   1112: checkcast clojure/lang/IFn
    //   1115: invokeinterface invoke : ()Ljava/lang/Object;
    //   1120: new clojure/spec/gen/alpha$fn__2961
    //   1123: dup
    //   1124: invokespecial <init> : ()V
    //   1127: checkcast clojure/lang/IFn
    //   1130: invokeinterface invoke : ()Ljava/lang/Object;
    //   1135: getstatic clojure/spec/gen/alpha__init.const__60 : Lclojure/lang/Var;
    //   1138: dup
    //   1139: getstatic clojure/spec/gen/alpha__init.const__63 : Lclojure/lang/AFn;
    //   1142: checkcast clojure/lang/IPersistentMap
    //   1145: invokevirtual setMeta : (Lclojure/lang/IPersistentMap;)V
    //   1148: dup
    //   1149: new clojure/spec/gen/alpha$cat
    //   1152: dup
    //   1153: invokespecial <init> : ()V
    //   1156: invokevirtual bindRoot : (Ljava/lang/Object;)V
    //   1159: getstatic clojure/spec/gen/alpha__init.const__64 : Lclojure/lang/Var;
    //   1162: dup
    //   1163: getstatic clojure/spec/gen/alpha__init.const__67 : Lclojure/lang/AFn;
    //   1166: checkcast clojure/lang/IPersistentMap
    //   1169: invokevirtual setMeta : (Lclojure/lang/IPersistentMap;)V
    //   1172: dup
    //   1173: new clojure/spec/gen/alpha$qualified_QMARK_
    //   1176: dup
    //   1177: invokespecial <init> : ()V
    //   1180: invokevirtual bindRoot : (Ljava/lang/Object;)V
    //   1183: getstatic clojure/spec/gen/alpha__init.const__68 : Lclojure/lang/Var;
    //   1186: dup
    //   1187: getstatic clojure/spec/gen/alpha__init.const__70 : Lclojure/lang/AFn;
    //   1190: checkcast clojure/lang/IPersistentMap
    //   1193: invokevirtual setMeta : (Lclojure/lang/IPersistentMap;)V
    //   1196: dup
    //   1197: new clojure/lang/Delay
    //   1200: dup
    //   1201: new clojure/spec/gen/alpha$fn__2976
    //   1204: dup
    //   1205: invokespecial <init> : ()V
    //   1208: checkcast clojure/lang/IFn
    //   1211: invokespecial <init> : (Lclojure/lang/IFn;)V
    //   1214: invokevirtual bindRoot : (Ljava/lang/Object;)V
    //   1217: getstatic clojure/spec/gen/alpha__init.const__71 : Lclojure/lang/Var;
    //   1220: dup
    //   1221: getstatic clojure/spec/gen/alpha__init.const__74 : Lclojure/lang/AFn;
    //   1224: checkcast clojure/lang/IPersistentMap
    //   1227: invokevirtual setMeta : (Lclojure/lang/IPersistentMap;)V
    //   1230: dup
    //   1231: new clojure/spec/gen/alpha$gen_for_pred
    //   1234: dup
    //   1235: invokespecial <init> : ()V
    //   1238: invokevirtual bindRoot : (Ljava/lang/Object;)V
    //   1241: aconst_null
    //   1242: return
    // Line number table:
    //   Java source line number -> byte code offset
    //   #9	-> 6
    //   #9	-> 12
    //   #9	-> 24
    //   #9	-> 27
    //   #9	-> 32
    //   #9	-> 41
    //   #9	-> 62
    //   #13	-> 73
    //   #13	-> 82
    //   #15	-> 94
    //   #15	-> 97
    //   #41	-> 249
    //   #41	-> 252
    //   #61	-> 311
    //   #76	-> 372
    //   #87	-> 409
    //   #95	-> 423
    //   #95	-> 426
    //   #95	-> 438
    //   #95	-> 441
    //   #95	-> 453
    //   #95	-> 456
    //   #95	-> 468
    //   #95	-> 471
    //   #95	-> 483
    //   #95	-> 486
    //   #95	-> 498
    //   #95	-> 501
    //   #95	-> 513
    //   #95	-> 516
    //   #95	-> 528
    //   #95	-> 531
    //   #95	-> 543
    //   #95	-> 546
    //   #95	-> 558
    //   #95	-> 561
    //   #95	-> 573
    //   #95	-> 576
    //   #95	-> 588
    //   #95	-> 591
    //   #95	-> 603
    //   #95	-> 606
    //   #95	-> 618
    //   #95	-> 621
    //   #95	-> 633
    //   #95	-> 636
    //   #95	-> 648
    //   #95	-> 651
    //   #95	-> 663
    //   #95	-> 666
    //   #95	-> 678
    //   #95	-> 681
    //   #95	-> 693
    //   #95	-> 696
    //   #95	-> 708
    //   #95	-> 711
    //   #95	-> 723
    //   #95	-> 726
    //   #99	-> 761
    //   #110	-> 798
    //   #118	-> 812
    //   #118	-> 815
    //   #118	-> 827
    //   #118	-> 830
    //   #118	-> 842
    //   #118	-> 845
    //   #118	-> 857
    //   #118	-> 860
    //   #118	-> 872
    //   #118	-> 875
    //   #118	-> 887
    //   #118	-> 890
    //   #118	-> 902
    //   #118	-> 905
    //   #118	-> 917
    //   #118	-> 920
    //   #118	-> 932
    //   #118	-> 935
    //   #118	-> 947
    //   #118	-> 950
    //   #118	-> 962
    //   #118	-> 965
    //   #118	-> 977
    //   #118	-> 980
    //   #118	-> 992
    //   #118	-> 995
    //   #118	-> 1007
    //   #118	-> 1010
    //   #118	-> 1022
    //   #118	-> 1025
    //   #118	-> 1037
    //   #118	-> 1040
    //   #118	-> 1052
    //   #118	-> 1055
    //   #118	-> 1067
    //   #118	-> 1070
    //   #118	-> 1082
    //   #118	-> 1085
    //   #118	-> 1097
    //   #118	-> 1100
    //   #118	-> 1112
    //   #118	-> 1115
    //   #118	-> 1127
    //   #118	-> 1130 }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "clojure.spec.gen.alpha");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("clojure.core", "alias");
    const__4 = (AFn)Symbol.intern(null, "c");
    const__5 = (AFn)Symbol.intern(null, "clojure.core");
    const__6 = (Var)RT.var("clojure.spec.gen.alpha", "dynaload");
    const__15 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })), RT.keyword(null, "line"), Integer.valueOf(17), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/spec/gen/alpha.clj" });
    const__16 = (Var)RT.var("clojure.spec.gen.alpha", "quick-check-ref");
    const__18 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(28), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/spec/gen/alpha.clj" });
    const__19 = (Var)RT.var("clojure.spec.gen.alpha", "quick-check");
    const__22 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "args")) })), RT.keyword(null, "line"), Integer.valueOf(30), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/spec/gen/alpha.clj" });
    const__23 = (Var)RT.var("clojure.spec.gen.alpha", "for-all*-ref");
    const__25 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(34), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/spec/gen/alpha.clj" });
    const__26 = (Var)RT.var("clojure.spec.gen.alpha", "for-all*");
    const__30 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "args")) })), RT.keyword(null, "doc"), "Dynamically loaded clojure.test.check.properties/for-all*.", RT.keyword(null, "line"), Integer.valueOf(36), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/spec/gen/alpha.clj" });
    const__31 = (Var)RT.var("clojure.spec.gen.alpha", "delay-impl");
    const__35 = (AFn)RT.map(new Object[] { RT.keyword(null, "skip-wiki"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "gfnd")) })), RT.keyword(null, "line"), Integer.valueOf(55), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/spec/gen/alpha.clj" });
    const__36 = (Var)RT.var("clojure.spec.gen.alpha", "delay");
    const__39 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "doc"), "given body that returns a generator, returns a\n  generator that delegates to that, but delays\n  creation until used.", RT.keyword(null, "line"), Integer.valueOf(61), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/spec/gen/alpha.clj" });
    const__40 = (Var)RT.var("clojure.spec.gen.alpha", "gen-for-name");
    const__43 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })), RT.keyword(null, "doc"), "Dynamically loads test.check generator named s.", RT.keyword(null, "line"), Integer.valueOf(68), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/spec/gen/alpha.clj" });
    const__44 = (Var)RT.var("clojure.spec.gen.alpha", "lazy-combinator");
    const__47 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "skip-wiki"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })), RT.keyword(null, "doc"), "Implementation macro, do not call directly.", RT.keyword(null, "line"), Integer.valueOf(76), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/spec/gen/alpha.clj" });
    const__48 = (Var)RT.var("clojure.spec.gen.alpha", "lazy-combinators");
    const__51 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "skip-wiki"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "syms")) })), RT.keyword(null, "doc"), "Implementation macro, do not call directly.", RT.keyword(null, "line"), Integer.valueOf(87), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/spec/gen/alpha.clj" });
    const__52 = (Var)RT.var("clojure.spec.gen.alpha", "lazy-prim");
    const__55 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "skip-wiki"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })), RT.keyword(null, "doc"), "Implementation macro, do not call directly.", RT.keyword(null, "line"), Integer.valueOf(99), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/spec/gen/alpha.clj" });
    const__56 = (Var)RT.var("clojure.spec.gen.alpha", "lazy-prims");
    const__59 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "skip-wiki"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "syms")) })), RT.keyword(null, "doc"), "Implementation macro, do not call directly.", RT.keyword(null, "line"), Integer.valueOf(110), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojure/spec/gen/alpha.clj" });
    const__60 = (Var)RT.var("clojure.spec.gen.alpha", "cat");
    const__63 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "gens")) })), RT.keyword(null, "doc"), "Returns a generator of a sequence catenated from results of\ngens, each of which should generate something sequential.", RT.keyword(null, "line"), Integer.valueOf(122), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/spec/gen/alpha.clj" });
    const__64 = (Var)RT.var("clojure.spec.gen.alpha", "qualified?");
    const__67 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ident")) })), RT.keyword(null, "line"), Integer.valueOf(129), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/spec/gen/alpha.clj" });
    const__68 = (Var)RT.var("clojure.spec.gen.alpha", "gen-builtins");
    const__70 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(131), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/spec/gen/alpha.clj" });
    const__71 = (Var)RT.var("clojure.spec.gen.alpha", "gen-for-pred");
    const__74 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pred")) })), RT.keyword(null, "doc"), "Given a predicate, returns a built-in generator if one exists.", RT.keyword(null, "line"), Integer.valueOf(190), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojure/spec/gen/alpha.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("clojure.spec.gen.alpha__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
