package schema;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentHashSet;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class macros__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__3;
  
  public static final AFn const__4;
  
  public static final Var const__5;
  
  public static final AFn const__13;
  
  public static final Var const__14;
  
  public static final AFn const__17;
  
  public static final Var const__18;
  
  public static final AFn const__21;
  
  public static final Var const__22;
  
  public static final AFn const__25;
  
  public static final Var const__26;
  
  public static final AFn const__29;
  
  public static final Var const__30;
  
  public static final AFn const__33;
  
  public static final Var const__34;
  
  public static final AFn const__37;
  
  public static final Var const__38;
  
  public static final AFn const__41;
  
  public static final Var const__42;
  
  public static final AFn const__44;
  
  public static final AFn const__45;
  
  public static final Var const__46;
  
  public static final AFn const__49;
  
  public static final Var const__50;
  
  public static final AFn const__53;
  
  public static final Var const__54;
  
  public static final AFn const__57;
  
  public static final Var const__58;
  
  public static final AFn const__61;
  
  public static final Var const__62;
  
  public static final AFn const__65;
  
  public static final Var const__66;
  
  public static final AFn const__69;
  
  public static final Var const__70;
  
  public static final AFn const__73;
  
  public static final Var const__74;
  
  public static final AFn const__77;
  
  public static final Var const__78;
  
  public static final AFn const__81;
  
  public static final Var const__82;
  
  public static final AFn const__85;
  
  public static final Var const__86;
  
  public static final AFn const__89;
  
  public static final Var const__90;
  
  public static final AFn const__93;
  
  public static final Var const__94;
  
  public static final Var const__95;
  
  public static final AFn const__98;
  
  public static final Var const__99;
  
  public static final AFn const__102;
  
  public static final Var const__103;
  
  public static final AFn const__106;
  
  public static final Var const__107;
  
  public static final AFn const__110;
  
  public static final Var const__111;
  
  public static final AFn const__114;
  
  public static final Var const__115;
  
  public static final AFn const__118;
  
  public static final Var const__119;
  
  public static final AFn const__122;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new macros.fn__21387());
    const__5.setMeta((IPersistentMap)const__13);
    const__5.bindRoot(new macros.cljs_env_QMARK_());
    const__14.setMeta((IPersistentMap)const__17);
    const__14.bindRoot(new macros.if_cljs());
    ((Var)const__14)












      
      .setMacro();
    const__18.setMeta((IPersistentMap)const__21);
    const__18.bindRoot(new macros.try_catchall());
    ((Var)const__18)




      
      .setMacro();
    const__22.setMeta((IPersistentMap)const__25);
    const__22.bindRoot(new macros.error_BANG_());
    ((Var)const__22)




















      
      .setMacro();
    const__26.setMeta((IPersistentMap)const__29);
    const__26.bindRoot(new macros.safe_get());
    ((Var)const__26)










      
      .setMacro();
    const__30.setMeta((IPersistentMap)const__33);
    const__30.bindRoot(new macros.assert_BANG_());
    ((Var)const__30)







      
      .setMacro();
    const__34.setMeta((IPersistentMap)const__37);
    const__34.bindRoot(new macros.validation_error());
    ((Var)const__34)




      
      .setMacro();
    const__38.setMeta((IPersistentMap)const__41);
    const__38.bindRoot(new macros.maybe_split_first());
    const__42.setMeta((IPersistentMap)const__44);
    const__42.bindRoot(const__45);
    const__46.setMeta((IPersistentMap)const__49);
    const__46.bindRoot(new macros.valid_tag_QMARK_());
    const__50.setMeta((IPersistentMap)const__53);
    const__50.bindRoot(new macros.normalized_metadata());
    const__54.setMeta((IPersistentMap)const__57);
    const__54.bindRoot(new macros.extract_schema_form());
    const__58.setMeta((IPersistentMap)const__61);
    const__58.bindRoot(new macros.extract_arrow_schematized_element());
    const__62.setMeta((IPersistentMap)const__65);
    const__62.bindRoot(new macros.process_arrow_schematized_args());
    const__66.setMeta((IPersistentMap)const__69);
    const__66.bindRoot(new macros.split_rest_arg());
    const__70.setMeta((IPersistentMap)const__73);
    const__70.bindRoot(new macros.single_arg_schema_form());
    const__74.setMeta((IPersistentMap)const__77);
    const__74.bindRoot(new macros.simple_arglist_schema_form());
    const__78.setMeta((IPersistentMap)const__81);
    const__78.bindRoot(new macros.rest_arg_schema_form());
    const__82.setMeta((IPersistentMap)const__85);
    const__82.bindRoot(new macros.input_schema_form());
    const__86.setMeta((IPersistentMap)const__89);
    const__86.bindRoot(new macros.apply_prepost_conditions());
    const__90.setDynamic(true).setMeta((IPersistentMap)const__93);
    const__90.setDynamic(true)




















































































































      
      .bindRoot(((IFn)const__94.getRawRoot()).invoke(Boolean.TRUE));
    const__95.setMeta((IPersistentMap)const__98);
    const__95.bindRoot(new macros.compile_fn_validation_QMARK_());
    const__99.setMeta((IPersistentMap)const__102);
    const__99.bindRoot(new macros.process_fn_arity());
    const__103.setMeta((IPersistentMap)const__106);
    const__103.bindRoot(new macros.process_fn_());
    const__107.setMeta((IPersistentMap)const__110);
    const__107.bindRoot(new macros.parse_arity_spec());
    const__111.setMeta((IPersistentMap)const__114);
    const__111.bindRoot(new macros.emit_defrecord());
    const__115.setMeta((IPersistentMap)const__118);
    const__115.bindRoot(new macros.normalized_defn_args());
    const__119.setMeta((IPersistentMap)const__122);
    const__119.bindRoot(new macros.set_compile_fn_validation_BANG_());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "schema.macros")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Macros and macro helpers used in schema.core." }));
    const__3 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Macros and macro helpers used in schema.core." });
    const__4 = (AFn)Symbol.intern(null, "clojure.core");
    const__5 = (Var)RT.var("schema.macros", "cljs-env?");
    const__13 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "env")) })), RT.keyword(null, "doc"), "Take the &env from a macro, and tell whether we are expanding into cljs.", RT.keyword(null, "line"), Integer.valueOf(10), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/macros.clj" });
    const__14 = (Var)RT.var("schema.macros", "if-cljs");
    const__17 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "then"), Symbol.intern(null, "else")) })), RT.keyword(null, "doc"), "Return then if we are generating cljs code and else for Clojure code.\n   https://groups.google.com/d/msg/clojurescript/iBY5HaQda4A/w1lAQi9_AwsJ", RT.keyword(null, "line"), Integer.valueOf(15), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/macros.clj" });
    const__18 = (Var)RT.var("schema.macros", "try-catchall");
    const__21 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "doc"), "A cross-platform variant of try-catch that catches all* exceptions.\n   Does not (yet) support finally, and does not need or want an exception class.\n\n   *On the JVM certain fatal exceptions are not caught.", RT.keyword(null, "line"), Integer.valueOf(21), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/macros.clj" });
    const__22 = (Var)RT.var("schema.macros", "error!");
    const__25 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")), Tuple.create(Symbol.intern(null, "s"), Symbol.intern(null, "m")) })), RT.keyword(null, "doc"), "Generate a cross-platform exception appropriate to the macroexpansion context", RT.keyword(null, "line"), Integer.valueOf(43), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/macros.clj" });
    const__26 = (Var)RT.var("schema.macros", "safe-get");
    const__29 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "k")) })), RT.keyword(null, "doc"), "Like get but throw an exception if not found.  A macro just to work around cljx function\n   placement restrictions. ", RT.keyword(null, "line"), Integer.valueOf(55), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/macros.clj" });
    const__30 = (Var)RT.var("schema.macros", "assert!");
    const__33 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "form"), Symbol.intern(null, "&"), Symbol.intern(null, "format-args")) })), RT.keyword(null, "doc"), "Like assert, but throws a RuntimeException (in Clojure) and takes args to format.", RT.keyword(null, "line"), Integer.valueOf(64), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/macros.clj" });
    const__34 = (Var)RT.var("schema.macros", "validation-error");
    const__37 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "schema"), Symbol.intern(null, "value"), Symbol.intern(null, "expectation"), Symbol.intern(null, "&"), Tuple.create(Symbol.intern(null, "fail-explanation"))) })), RT.keyword(null, "line"), Integer.valueOf(70), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/macros.clj" });
    const__38 = (Var)RT.var("schema.macros", "maybe-split-first");
    const__41 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pred"), Symbol.intern(null, "s")) })), RT.keyword(null, "line"), Integer.valueOf(77), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/macros.clj" });
    const__42 = (Var)RT.var("schema.macros", "primitive-sym?");
    const__44 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(82), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/macros.clj" });
    const__45 = (AFn)PersistentHashSet.create(new Object[] { 
          Symbol.intern(null, "boolean"), Symbol.intern(null, "char"), Symbol.intern(null, "floats"), Symbol.intern(null, "booleans"), Symbol.intern(null, "long"), Symbol.intern(null, "double"), Symbol.intern(null, "short"), Symbol.intern(null, "longs"), Symbol.intern(null, "int"), Symbol.intern(null, "objects"), 
          Symbol.intern(null, "float"), Symbol.intern(null, "doubles"), Symbol.intern(null, "chars"), Symbol.intern(null, "ints"), Symbol.intern(null, "byte"), Symbol.intern(null, "shorts"), Symbol.intern(null, "bytes") });
    const__46 = (Var)RT.var("schema.macros", "valid-tag?");
    const__49 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "env"), Symbol.intern(null, "tag")) })), RT.keyword(null, "line"), Integer.valueOf(85), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/macros.clj" });
    const__50 = (Var)RT.var("schema.macros", "normalized-metadata");
    const__53 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "env"), Symbol.intern(null, "imeta"), Symbol.intern(null, "explicit-schema")) })), RT.keyword(null, "doc"), "Take an object with optional metadata, which may include a :tag,\n   plus an optional explicit schema, and normalize the\n   object to have a valid Clojure :tag plus a :schema field.", RT.keyword(null, "line"), Integer.valueOf(88), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/macros.clj" });
    const__54 = (Var)RT.var("schema.macros", "extract-schema-form");
    const__57 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "symbol")) })), RT.keyword(null, "doc"), "Pull out the schema stored on a thing.  Public only because of its use in a public macro.", RT.keyword(null, "line"), Integer.valueOf(106), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/macros.clj" });
    const__58 = (Var)RT.var("schema.macros", "extract-arrow-schematized-element");
    const__61 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "env"), Symbol.intern(null, "s")) })), RT.keyword(null, "doc"), "Take a nonempty seq, which may start like [a ...] or [a :- schema ...], and return\n   a list of [first-element-with-schema-attached rest-elements]", RT.keyword(null, "line"), Integer.valueOf(113), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/macros.clj" });
    const__62 = (Var)RT.var("schema.macros", "process-arrow-schematized-args");
    const__65 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "env"), Symbol.intern(null, "args")) })), RT.keyword(null, "doc"), "Take an arg vector, in which each argument is followed by an optional :- schema,\n   and transform into an ordinary arg vector where the schemas are metadata on the args.", RT.keyword(null, "line"), Integer.valueOf(123), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/macros.clj" });
    const__66 = (Var)RT.var("schema.macros", "split-rest-arg");
    const__69 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "env"), Symbol.intern(null, "bind")) })), RT.keyword(null, "line"), Integer.valueOf(137), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/macros.clj" });
    const__70 = (Var)RT.var("schema.macros", "single-arg-schema-form");
    const__73 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "rest?"), Tuple.create(Symbol.intern(null, "index"), Symbol.intern(null, "arg"))) })), RT.keyword(null, "line"), Integer.valueOf(152), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/macros.clj" });
    const__74 = (Var)RT.var("schema.macros", "simple-arglist-schema-form");
    const__77 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "rest?"), Symbol.intern(null, "regular-args")) })), RT.keyword(null, "line"), Integer.valueOf(159), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/macros.clj" });
    const__78 = (Var)RT.var("schema.macros", "rest-arg-schema-form");
    const__81 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "arg")) })), RT.keyword(null, "line"), Integer.valueOf(162), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/macros.clj" });
    const__82 = (Var)RT.var("schema.macros", "input-schema-form");
    const__85 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "regular-args"), Symbol.intern(null, "rest-arg")) })), RT.keyword(null, "line"), Integer.valueOf(171), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/macros.clj" });
    const__86 = (Var)RT.var("schema.macros", "apply-prepost-conditions");
    const__89 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "body")) })), RT.keyword(null, "doc"), "Replicate pre/postcondition logic from clojure.core/fn.", RT.keyword(null, "line"), Integer.valueOf(177), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/macros.clj" });
    const__90 = (Var)RT.var("schema.macros", "*compile-fn-validation*");
    const__93 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(188), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/macros.clj" });
    const__94 = (Var)RT.var("clojure.core", "atom");
    const__95 = (Var)RT.var("schema.macros", "compile-fn-validation?");
    const__98 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "env"), Symbol.intern(null, "fn-name")) })), RT.keyword(null, "doc"), "Returns true if validation should be included at compile time, otherwise false.\n   Validation is elided for any of the following cases:\n   *   function has :never-validate metadata\n   *   *compile-fn-validation* is false\n   *   *assert* is false AND function is not :always-validate", RT.keyword(null, "line"), Integer.valueOf(190), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/macros.clj" });
    const__99 = (Var)RT.var("schema.macros", "process-fn-arity");
  }
  
  public static void __init1() {
    const__102 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "env"), Symbol.intern(null, "fn-name"), Symbol.intern(null, "output-schema-sym"), Symbol.intern(null, "bind-meta"), Tuple.create(Symbol.intern(null, "bind"), Symbol.intern(null, "&"), Symbol.intern(null, "body"))) })), RT.keyword(null, "doc"), "Process a single (bind & body) form, producing an output tag, schema-form,\n   and arity-form which has asserts for validation purposes added that are\n   executed when turned on, and have very low overhead otherwise.\n   tag? is a prospective tag for the fn symbol based on the output schema.\n   schema-bindings are bindings to lift eval outwards, so we don't build the schema\n   every time we do the validation.", RT.keyword(null, "line"), Integer.valueOf(204), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/macros.clj" });
    const__103 = (Var)RT.var("schema.macros", "process-fn-");
    const__106 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "env"), Symbol.intern(null, "name"), Symbol.intern(null, "fn-body")) })), RT.keyword(null, "doc"), "Process the fn args into a final tag proposal, schema form, schema bindings, and fn form", RT.keyword(null, "line"), Integer.valueOf(271), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/macros.clj" });
    const__107 = (Var)RT.var("schema.macros", "parse-arity-spec");
    const__110 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "spec")) })), RT.keyword(null, "doc"), "Helper for schema.core/=>*.", RT.keyword(null, "line"), Integer.valueOf(300), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/macros.clj" });
    const__111 = (Var)RT.var("schema.macros", "emit-defrecord");
    const__114 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "defrecord-constructor-sym"), Symbol.intern(null, "env"), Symbol.intern(null, "name"), Symbol.intern(null, "field-schema"), Symbol.intern(null, "&"), Symbol.intern(null, "more-args")) })), RT.keyword(null, "line"), Integer.valueOf(312), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/macros.clj" });
    const__115 = (Var)RT.var("schema.macros", "normalized-defn-args");
    const__118 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "env"), Symbol.intern(null, "macro-args")) })), RT.keyword(null, "doc"), "Helper for defining defn-like macros with schemas.  Env is &env\n   from the macro body.  Reads optional docstring, return type and\n   attribute-map and normalizes them into the metadata of the name,\n   returning the normalized arglist.  Based on\n   clojure.tools.macro/name-with-attributes.", RT.keyword(null, "line"), Integer.valueOf(368), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/macros.clj" });
    const__119 = (Var)RT.var("schema.macros", "set-compile-fn-validation!");
    const__122 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "on?")) })), RT.keyword(null, "doc"), "Globally turn on or off function validation from being compiled into s/fn and s/defn.\n   Enabled by default.\n   See (doc compile-fn-validation?) for all conditions which control fn validation compilation", RT.keyword(null, "line"), Integer.valueOf(383), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/macros.clj" });
  }
  
  static  {
    __init0();
    __init1();
    Compiler.pushNSandLoader(RT.classForName("schema.macros__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
