package schema.spec;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class collection__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__3;
  
  public static final AFn const__4;
  
  public static final Var const__5;
  
  public static final AFn const__12;
  
  public static final Var const__13;
  
  public static final AFn const__18;
  
  public static final AFn const__21;
  
  public static final Var const__22;
  
  public static final AFn const__25;
  
  public static final Var const__26;
  
  public static final AFn const__29;
  
  public static final Var const__30;
  
  public static final AFn const__33;
  
  public static final Var const__34;
  
  public static final AFn const__37;
  
  public static final Var const__38;
  
  public static final AFn const__41;
  
  public static final Var const__42;
  
  public static final AFn const__45;
  
  public static final Var const__46;
  
  public static final AFn const__49;
  
  public static final Var const__50;
  
  public static final AFn const__53;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new collection.fn__21703());
    const__5.setMeta((IPersistentMap)const__12);
    const__13.setMeta((IPersistentMap)const__18);
    const__13.bindRoot(new collection.element_transformer());
    const__5.setMeta((IPersistentMap)const__21);
    const__5.bindRoot(new collection.sequence_transformer());
    const__22.setMeta((IPersistentMap)const__25);
    const__22.bindRoot(new collection.has_error_QMARK_());
    const__26.setMeta((IPersistentMap)const__29);
    const__26.bindRoot(new collection.subschemas());
    const__30.setMeta((IPersistentMap)const__33);
    const__30.bindRoot(new collection.collection_spec());
    const__34.setMeta((IPersistentMap)const__37);
    const__34.bindRoot(new collection.remaining());
    const__38.setMeta((IPersistentMap)const__41);
    const__38.bindRoot(new collection.optional());
    const__42.setMeta((IPersistentMap)const__45);
    const__42.bindRoot(new collection.all_elements());
    const__46.setMeta((IPersistentMap)const__49);
    const__46.bindRoot(new collection.one_element());
    const__50.setMeta((IPersistentMap)const__53);
    const__50.bindRoot(new collection.optional_tail());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "schema.spec.collection")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "A collection spec represents a collection of elements,\n   each of which is itself schematized." }));
    const__3 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "A collection spec represents a collection of elements,\n   each of which is itself schematized." });
    const__4 = (AFn)Symbol.intern(null, "clojure.core");
    const__5 = (Var)RT.var("schema.spec.collection", "sequence-transformer");
    const__12 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(14), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/spec/collection.clj" });
    const__13 = (Var)RT.var("schema.spec.collection", "element-transformer");
    const__18 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "e"), Symbol.intern(null, "params"), Symbol.intern(null, "then")) })), RT.keyword(null, "line"), Integer.valueOf(16), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/spec/collection.clj" });
    const__21 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "elts"), Symbol.intern(null, "params"), Symbol.intern(null, "then")) })), RT.keyword(null, "line"), Integer.valueOf(40), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/spec/collection.clj" });
    const__22 = (Var)RT.var("schema.spec.collection", "has-error?");
    const__25 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "l")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "java.util.List") }))) })), RT.keyword(null, "line"), Integer.valueOf(50), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/spec/collection.clj" });
    const__26 = (Var)RT.var("schema.spec.collection", "subschemas");
    const__29 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "elt")) })), RT.keyword(null, "line"), Integer.valueOf(63), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/spec/collection.clj" });
    const__30 = (Var)RT.var("schema.spec.collection", "collection-spec");
    const__33 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pre"), Symbol.intern(null, "constructor"), Symbol.intern(null, "elements"), Symbol.intern(null, "on-error")) })), RT.keyword(null, "doc"), "A collection represents a collection of elements, each of which is itself\n   schematized.  At the top level, the collection has a precondition\n   (presumably on the overall type), a constructor for the collection from a\n   sequence of items, an element spec, and a function that constructs a\n   descriptive error on failure.\n\n   The element spec is a nested list structure, in which the leaf elements each\n   provide an element schema, parser (allowing for efficient processing of structured\n   collections), and optional error wrapper.  Each item in the list can be a leaf\n   element or an `optional` nested element spec (see below).  In addition, the final\n   element can be a `remaining` schema (see below).\n\n   Note that the `optional` carries no semantics with respect to validation;\n   the user must ensure that the parser enforces the desired semantics, which\n   should match the structure of the spec for proper generation.", RT.keyword(null, "line"), Integer.valueOf(86), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/spec/collection.clj" });
    const__34 = (Var)RT.var("schema.spec.collection", "remaining");
    const__37 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })), RT.keyword(null, "doc"), "All remaining elements must match schema s", RT.keyword(null, "line"), Integer.valueOf(118), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/spec/collection.clj" });
    const__38 = (Var)RT.var("schema.spec.collection", "optional");
    const__41 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "ss")) })), RT.keyword(null, "doc"), "If any more elements are present, they must match the elements in 'ss'", RT.keyword(null, "line"), Integer.valueOf(123), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/spec/collection.clj" });
    const__42 = (Var)RT.var("schema.spec.collection", "all-elements");
    const__45 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "schema")) })), RT.keyword(null, "line"), Integer.valueOf(128), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/spec/collection.clj" });
    const__46 = (Var)RT.var("schema.spec.collection", "one-element");
    const__49 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "required?"), Symbol.intern(null, "schema"), Symbol.intern(null, "parser")) })), RT.keyword(null, "line"), Integer.valueOf(133), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/spec/collection.clj" });
    const__50 = (Var)RT.var("schema.spec.collection", "optional-tail");
    const__53 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "schema"), Symbol.intern(null, "parser"), Symbol.intern(null, "more")) })), RT.keyword(null, "line"), Integer.valueOf(139), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "schema/spec/collection.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("schema.spec.collection__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
