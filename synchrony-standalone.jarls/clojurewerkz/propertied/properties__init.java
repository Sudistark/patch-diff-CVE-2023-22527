package clojurewerkz.propertied;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class properties__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final Keyword const__7;
  
  public static final AFn const__13;
  
  public static final Var const__14;
  
  public static final AFn const__17;
  
  public static final Var const__18;
  
  public static final Object const__20;
  
  public static final AFn const__23;
  
  public static final Object const__24;
  
  public static final Var const__25;
  
  public static final Var const__26;
  
  public static final Var const__27;
  
  public static final Var const__28;
  
  public static final ISeq const__29;
  
  public static final Var const__30;
  
  public static final Var const__31;
  
  public static final AFn const__35;
  
  public static final Keyword const__36;
  
  public static final AFn const__37;
  
  public static final Keyword const__38;
  
  public static final Keyword const__39;
  
  public static final Keyword const__40;
  
  public static final AFn const__41;
  
  public static final Keyword const__42;
  
  public static final Var const__43;
  
  public static final Var const__44;
  
  public static final Var const__45;
  
  public static final AFn const__46;
  
  public static final AFn const__47;
  
  public static final Keyword const__48;
  
  public static final Var const__49;
  
  public static final AFn const__50;
  
  public static final Var const__51;
  
  public static final Object const__52;
  
  public static final Object const__53;
  
  public static final Object const__54;
  
  public static final Object const__55;
  
  public static final Var const__56;
  
  public static final ISeq const__57;
  
  public static final AFn const__59;
  
  public static final AFn const__60;
  
  public static final Keyword const__61;
  
  public static final AFn const__62;
  
  public static final AFn const__63;
  
  public static final AFn const__64;
  
  public static final AFn const__65;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new properties.fn__25194());
    const__3.setMeta((IPersistentMap)const__13);
    const__3.bindRoot(new properties.enumerator_into());
    const__14.setMeta((IPersistentMap)const__17);
    const__14.bindRoot(new properties.properties__GT_map());
    const__18.setMeta((IPersistentMap)const__23);
    const__18.bindRoot(new properties.map__GT_properties());
    new Object[2][0] = const__61;
    new Object[2][1] = new properties.fn__25257();
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "clojurewerkz.propertied.properties");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("clojurewerkz.propertied.properties", "enumerator-into");
    const__7 = (Keyword)RT.keyword(null, "doc");
    const__13 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "e")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "java.util.Hashtable$Enumerator") }))) })), RT.keyword(null, "doc"), "Produces an immutable collection from java.util.Hashtable$Enumerator", RT.keyword(null, "line"), Integer.valueOf(24), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "clojurewerkz/propertied/properties.clj" });
    const__14 = (Var)RT.var("clojurewerkz.propertied.properties", "properties->map");
    const__17 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "p")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Properties") }))), Tuple.create(((IObj)Symbol.intern(null, "p")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Properties") })), Symbol.intern(null, "keywordize?")) })), RT.keyword(null, "line"), Integer.valueOf(36), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojurewerkz/propertied/properties.clj" });
    const__18 = (Var)RT.var("clojurewerkz.propertied.properties", "map->properties");
    const__20 = RT.classForName("java.util.Properties");
    const__23 = (AFn)RT.map(new Object[] { RT.keyword(null, "tag"), RT.classForName("java.util.Properties"), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "m")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Map") }))) })), RT.keyword(null, "line"), Integer.valueOf(48), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clojurewerkz/propertied/properties.clj" });
    const__24 = RT.classForName("clojurewerkz.propertied.properties.PropertyReader");
    const__25 = (Var)RT.var("clojure.core", "alter-meta!");
    const__26 = (Var)RT.var("clojurewerkz.propertied.properties", "PropertyReader");
    const__27 = (Var)RT.var("clojure.core", "assoc");
    const__28 = (Var)RT.var("clojure.core", "assert-same-protocol");
    const__29 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "load-from")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Instantiates a property list from the input", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "input")) })) })) }));
    const__30 = (Var)RT.var("clojure.core", "alter-var-root");
    const__31 = (Var)RT.var("clojure.core", "merge");
    const__35 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "clojurewerkz.propertied.properties.PropertyReader"), RT.keyword(null, "on-interface"), RT.classForName("clojurewerkz.propertied.properties.PropertyReader"), RT.keyword(null, "doc"), "Extensions of this protocol can be used to load properties" });
    const__36 = (Keyword)RT.keyword(null, "sigs");
    const__37 = (AFn)RT.map(new Object[] { RT.keyword(null, "load-from"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "load-from")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Instantiates a property list from the input", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "input")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "input")) })), RT.keyword(null, "doc"), "Instantiates a property list from the input" }) });
    const__38 = (Keyword)RT.keyword(null, "var");
    const__39 = (Keyword)RT.keyword(null, "method-map");
    const__40 = (Keyword)RT.keyword(null, "load-from");
    const__41 = (AFn)RT.map(new Object[] { RT.keyword(null, "load-from"), RT.keyword(null, "load-from") });
    const__42 = (Keyword)RT.keyword(null, "method-builders");
    const__43 = (Var)RT.var("clojure.core", "intern");
    const__44 = (Var)RT.var("clojure.core", "*ns*");
    const__45 = (Var)RT.var("clojure.core", "with-meta");
    const__46 = (AFn)((IObj)Symbol.intern(null, "load-from")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Instantiates a property list from the input", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "input")) })) }));
    const__47 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "load-from")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Instantiates a property list from the input", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "input")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "input")) })), RT.keyword(null, "doc"), "Instantiates a property list from the input" });
    const__48 = (Keyword)RT.keyword(null, "protocol");
    const__49 = (Var)RT.var("clojure.core", "-reset-methods");
    const__50 = (AFn)Symbol.intern(null, "PropertyReader");
    const__51 = (Var)RT.var("clojure.core", "extend");
    const__52 = RT.classForName("java.util.Map");
    const__53 = RT.classForName("java.io.File");
    const__54 = RT.classForName("java.net.URL");
    const__55 = RT.classForName("clojurewerkz.propertied.properties.PropertyWriter");
    const__56 = (Var)RT.var("clojurewerkz.propertied.properties", "PropertyWriter");
    const__57 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "store-to")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Writes property list to file", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "input"), Symbol.intern(null, "sink")) })) })) }));
    const__59 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "clojurewerkz.propertied.properties.PropertyWriter"), RT.keyword(null, "on-interface"), RT.classForName("clojurewerkz.propertied.properties.PropertyWriter"), RT.keyword(null, "doc"), "Writes a property list to file" });
    const__60 = (AFn)RT.map(new Object[] { RT.keyword(null, "store-to"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "store-to")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Writes property list to file", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "input"), Symbol.intern(null, "sink")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "input"), Symbol.intern(null, "sink")) })), RT.keyword(null, "doc"), "Writes property list to file" }) });
    const__61 = (Keyword)RT.keyword(null, "store-to");
    const__62 = (AFn)RT.map(new Object[] { RT.keyword(null, "store-to"), RT.keyword(null, "store-to") });
    const__63 = (AFn)((IObj)Symbol.intern(null, "store-to")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Writes property list to file", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "input"), Symbol.intern(null, "sink")) })) }));
    const__64 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "store-to")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Writes property list to file", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "input"), Symbol.intern(null, "sink")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "input"), Symbol.intern(null, "sink")) })), RT.keyword(null, "doc"), "Writes property list to file" });
    const__65 = (AFn)Symbol.intern(null, "PropertyWriter");
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("clojurewerkz.propertied.properties__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
