package manifold.stream.random_access;

import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.IPersistentVector;
import clojure.lang.IReference;
import clojure.lang.ISeq;
import clojure.lang.IType;
import clojure.lang.Keyword;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Var;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.locks.Lock;
import manifold.stream.core.IEventSource;
import manifold.stream.core.IEventStream;

public final class RandomAccessSource implements IEventSource, IReference, IEventStream, IType {
  public final Object list;
  
  public final Object idx;
  
  public final long size;
  
  public final Object lock;
  
  public final Object __drainedCallbacks;
  
  public static final Keyword const__0 = (Keyword)RT.keyword(null, "type");
  
  public static final Keyword const__1 = (Keyword)RT.keyword(null, "drained?");
  
  public static final Var const__3 = (Var)RT.var("clojure.core", "apply"), const__4 = (Var)RT.var("manifold.stream.graph", "downstream"), const__6 = (Var)RT.var("manifold.deferred", "success-deferred"), const__7 = (Var)RT.var("manifold.utils", "invoke-callbacks");
  
  public RandomAccessSource(Object paramObject1, Object paramObject2, long paramLong, Object paramObject3, Object paramObject4, Object paramObject5, Object paramObject6, Object paramObject7) { this.list = paramObject1;
    this.idx = paramObject2;
    this.size = paramLong;
    this.lock = paramObject3;
    this.__mta = paramObject4;
    this.__isDrained = paramObject5;
    this.__drainedCallbacks = paramObject6;
    this.__weakHandle = paramObject7; }
  
  public static IPersistentVector getBasis() { return RT.vector(new Object[] { ((IObj)Symbol.intern(null, "list")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "List") })), ((IObj)Symbol.intern(null, "idx")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "AtomicLong") })), ((IObj)Symbol.intern(null, "size")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "long") })), Symbol.intern(null, "lock"), ((IObj)Symbol.intern(null, "__mta")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "volatile-mutable"), Boolean.TRUE })), ((IObj)Symbol.intern(null, "__isDrained")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "volatile-mutable"), Boolean.TRUE })), ((IObj)Symbol.intern(null, "__drainedCallbacks")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "java.util.LinkedList") })), ((IObj)Symbol.intern(null, "__weakHandle")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "volatile-mutable"), Boolean.TRUE })) }); }
  
  public Object markDrained() {
    Object object;
    lock__14923__auto__16021 = this.lock;
    ((Lock)lock__14923__auto__16021).lock();
    null;
    try {
      this.__isDrained = Boolean.TRUE;
      object = ((IFn)const__7.getRawRoot()).invoke(this.__drainedCallbacks);
    } finally {
      lock__14923__auto__16021 = null;
      ((Lock)lock__14923__auto__16021).unlock();
      null;
    } 
    return object;
  }
  
  public Object isDrained() { return this.__isDrained; }
  
  public Object take(Object default_val, Object blocking_QMARK_) { // Byte code:
    //   0: aload_0
    //   1: getfield idx : Ljava/lang/Object;
    //   4: checkcast java/util/concurrent/atomic/AtomicLong
    //   7: invokevirtual getAndIncrement : ()J
    //   10: lstore_3
    //   11: lload_3
    //   12: aload_0
    //   13: getfield size : J
    //   16: lcmp
    //   17: ifge -> 85
    //   20: aload_0
    //   21: getfield list : Ljava/lang/Object;
    //   24: checkcast java/util/List
    //   27: lload_3
    //   28: invokestatic uncheckedIntCast : (J)I
    //   31: invokeinterface get : (I)Ljava/lang/Object;
    //   36: astore #5
    //   38: aload_2
    //   39: aconst_null
    //   40: astore_2
    //   41: dup
    //   42: ifnull -> 59
    //   45: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   48: if_acmpeq -> 60
    //   51: aload #5
    //   53: aconst_null
    //   54: astore #5
    //   56: goto -> 81
    //   59: pop
    //   60: getstatic manifold/stream/random_access/RandomAccessSource.const__6 : Lclojure/lang/Var;
    //   63: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   66: checkcast clojure/lang/IFn
    //   69: aload #5
    //   71: aconst_null
    //   72: astore #5
    //   74: aconst_null
    //   75: astore_0
    //   76: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   81: goto -> 134
    //   84: athrow
    //   85: aload_0
    //   86: checkcast manifold/stream/core/IEventSource
    //   89: invokeinterface markDrained : ()Ljava/lang/Object;
    //   94: pop
    //   95: aload_2
    //   96: aconst_null
    //   97: astore_2
    //   98: dup
    //   99: ifnull -> 114
    //   102: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   105: if_acmpeq -> 115
    //   108: aload_1
    //   109: aconst_null
    //   110: astore_1
    //   111: goto -> 134
    //   114: pop
    //   115: getstatic manifold/stream/random_access/RandomAccessSource.const__6 : Lclojure/lang/Var;
    //   118: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   121: checkcast clojure/lang/IFn
    //   124: aload_1
    //   125: aconst_null
    //   126: astore_1
    //   127: aconst_null
    //   128: astore_0
    //   129: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   134: areturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #20	-> 0
    //   #37	-> 7
    //   #38	-> 11
    //   #38	-> 11
    //   #39	-> 31
    //   #40	-> 38
    //   #42	-> 66
    //   #42	-> 74
    //   #44	-> 89
    //   #45	-> 95
    //   #47	-> 121
    //   #47	-> 127
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   38	43	5	val	Ljava/lang/Object;
    //   11	123	3	idx_SINGLEQUOTE_	J
    //   0	134	0	this	Lmanifold/stream/random_access/RandomAccessSource;
    //   0	134	1	default_val	Ljava/lang/Object;
    //   0	134	2	blocking_QMARK_	Ljava/lang/Object; }
  
  public Object onDrained(Object callback__15726__auto__) { // Byte code:
    //   0: aload_0
    //   1: getfield lock : Ljava/lang/Object;
    //   4: astore_2
    //   5: aload_2
    //   6: checkcast java/util/concurrent/locks/Lock
    //   9: invokeinterface lock : ()V
    //   14: aconst_null
    //   15: pop
    //   16: aload_0
    //   17: getfield __isDrained : Ljava/lang/Object;
    //   20: dup
    //   21: ifnull -> 44
    //   24: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   27: if_acmpeq -> 45
    //   30: aload_1
    //   31: aconst_null
    //   32: astore_1
    //   33: checkcast clojure/lang/IFn
    //   36: invokeinterface invoke : ()Ljava/lang/Object;
    //   41: goto -> 70
    //   44: pop
    //   45: aload_0
    //   46: getfield __drainedCallbacks : Ljava/lang/Object;
    //   49: checkcast java/util/LinkedList
    //   52: aload_1
    //   53: aconst_null
    //   54: astore_1
    //   55: invokevirtual add : (Ljava/lang/Object;)Z
    //   58: ifeq -> 67
    //   61: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   64: goto -> 70
    //   67: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   70: astore_3
    //   71: aload_2
    //   72: aconst_null
    //   73: astore_2
    //   74: checkcast java/util/concurrent/locks/Lock
    //   77: invokeinterface unlock : ()V
    //   82: aconst_null
    //   83: pop
    //   84: goto -> 105
    //   87: astore #4
    //   89: aload_2
    //   90: aconst_null
    //   91: astore_2
    //   92: checkcast java/util/concurrent/locks/Lock
    //   95: invokeinterface unlock : ()V
    //   100: aconst_null
    //   101: pop
    //   102: aload #4
    //   104: athrow
    //   105: aload_3
    //   106: areturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #20	-> 0
    //   #20	-> 9
    //   #20	-> 16
    //   #20	-> 33
    //   #20	-> 36
    //   #20	-> 55
    //   #20	-> 77
    //   #20	-> 95
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   5	101	2	lock__14923__auto__16022	Ljava/lang/Object;
    //   0	106	0	this	Lmanifold/stream/random_access/RandomAccessSource;
    //   0	106	1	callback__15726__auto__	Ljava/lang/Object;
    // Exception table:
    //   from	to	target	type
    //   16	71	87	finally }
  
  public Object downstream() { this = null;
    return ((IFn)const__4.getRawRoot()).invoke(this); }
  
  public IPersistentMap alterMeta(IFn f__15719__auto__, ISeq args__15720__auto__) {
    Object lock__14925__auto__16024 = this.lock;
    ((Lock)lock__14925__auto__16024).lock();
    null;
    f__15719__auto__ = null;
    args__15720__auto__ = null;
    Object x__14926__auto__16023 = this.__mta = ((IFn)const__3.getRawRoot()).invoke(f__15719__auto__, this.__mta, args__15720__auto__);
    lock__14925__auto__16024 = null;
    ((Lock)lock__14925__auto__16024).unlock();
    null;
    x__14926__auto__16023 = null;
    return (IPersistentMap)x__14926__auto__16023;
  }
  
  public Object description() { return RT.mapUniqueKeys(new Object[] { const__0, "random-access-list", const__1, ((IEventSource)this).isDrained() }); }
  
  public Object isSynchronous() { return Boolean.TRUE; }
  
  public Object close() { ((AtomicLong)this.idx).set(this.size);
    return null; }
  
  public IPersistentMap resetMeta(IPersistentMap m__15718__auto__) {
    Object lock__14925__auto__16026 = this.lock;
    ((Lock)lock__14925__auto__16026).lock();
    null;
    Object x__14926__auto__16025 = this.__mta = m__15718__auto__ = null;
    lock__14925__auto__16026 = null;
    ((Lock)lock__14925__auto__16026).unlock();
    null;
    x__14926__auto__16025 = null;
    return (IPersistentMap)x__14926__auto__16025;
  }
  
  public Object connector(Object ___15727__auto__) { return null; }
  
  public IPersistentMap meta() { return (IPersistentMap)this.__mta; }
  
  public Object take(Object default_val, Object blocking_QMARK_, Object timeout, Object timeout_val) { default_val = null;
    blocking_QMARK_ = null;
    return ((IEventSource)this).take(default_val, blocking_QMARK_); }
  
  public Object weakHandle(Object ref_queue__15722__auto__) { // Byte code:
    //   0: aload_0
    //   1: getfield lock : Ljava/lang/Object;
    //   4: astore_2
    //   5: aload_2
    //   6: checkcast java/util/concurrent/locks/Lock
    //   9: invokeinterface lock : ()V
    //   14: aconst_null
    //   15: pop
    //   16: aload_0
    //   17: getfield __weakHandle : Ljava/lang/Object;
    //   20: astore_3
    //   21: aload_3
    //   22: dup
    //   23: ifnull -> 38
    //   26: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   29: if_acmpeq -> 39
    //   32: aload_3
    //   33: aconst_null
    //   34: astore_3
    //   35: goto -> 61
    //   38: pop
    //   39: aload_0
    //   40: new java/lang/ref/WeakReference
    //   43: dup
    //   44: aload_0
    //   45: aload_1
    //   46: aconst_null
    //   47: astore_1
    //   48: checkcast java/lang/ref/ReferenceQueue
    //   51: invokespecial <init> : (Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;)V
    //   54: putfield __weakHandle : Ljava/lang/Object;
    //   57: aload_0
    //   58: getfield __weakHandle : Ljava/lang/Object;
    //   61: astore #4
    //   63: aload_2
    //   64: aconst_null
    //   65: astore_2
    //   66: checkcast java/util/concurrent/locks/Lock
    //   69: invokeinterface unlock : ()V
    //   74: aconst_null
    //   75: pop
    //   76: goto -> 97
    //   79: astore #5
    //   81: aload_2
    //   82: aconst_null
    //   83: astore_2
    //   84: checkcast java/util/concurrent/locks/Lock
    //   87: invokeinterface unlock : ()V
    //   92: aconst_null
    //   93: pop
    //   94: aload #5
    //   96: athrow
    //   97: aload #4
    //   99: areturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #20	-> 0
    //   #20	-> 9
    //   #20	-> 21
    //   #20	-> 69
    //   #20	-> 87
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   21	40	3	or__5516__auto__16027	Ljava/lang/Object;
    //   5	94	2	lock__14923__auto__16028	Ljava/lang/Object;
    //   0	99	0	this	Lmanifold/stream/random_access/RandomAccessSource;
    //   0	99	1	ref_queue__15722__auto__	Ljava/lang/Object;
    // Exception table:
    //   from	to	target	type
    //   16	63	79	finally }
}
