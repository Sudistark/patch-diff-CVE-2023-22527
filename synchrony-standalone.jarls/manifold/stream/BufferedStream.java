package manifold.stream;

import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.IPersistentVector;
import clojure.lang.IReference;
import clojure.lang.ISeq;
import clojure.lang.IType;
import clojure.lang.Keyword;
import clojure.lang.Numbers;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.lang.ref.ReferenceQueue;
import java.lang.ref.WeakReference;
import java.util.concurrent.atomic.AtomicLong;
import manifold.stream.core.IEventSink;
import manifold.stream.core.IEventSource;
import manifold.stream.core.IEventStream;

public final class BufferedStream implements IEventStream, IReference, IEventSink, IEventSource, IType {
  public final Object buf;
  
  public final Object limit;
  
  public final Object metric;
  
  public final Object description;
  
  public final Object buffer_size;
  
  public final Object last_put;
  
  public final Object buf_PLUS_;
  
  public final Object handle;
  
  public final Object mta;
  
  public static final Var const__0 = (Var)RT.var("clojure.core", "deref");
  
  public static final Var const__1 = (Var)RT.var("clojure.core", "reset!");
  
  public static final Var const__2 = (Var)RT.var("clojure.core", "apply");
  
  public static final Var const__3 = (Var)RT.var("clojure.core", "swap!");
  
  public static final Var const__4 = (Var)RT.var("manifold.stream.graph", "downstream");
  
  public static final Var const__5 = (Var)RT.var("clojure.core", "merge");
  
  public static final Keyword const__7 = (Keyword)RT.keyword(null, "buffer-size");
  
  public static final Keyword const__8 = (Keyword)RT.keyword(null, "buffer-capacity");
  
  public static final Var const__9 = (Var)RT.var("clojure.core", "compare-and-set!");
  
  public static final Var const__11 = (Var)RT.var("manifold.deferred", "chain'-");
  
  public static final Keyword const__12 = (Keyword)RT.keyword("manifold.stream", "timeout");
  
  public BufferedStream(Object paramObject1, Object paramObject2, Object paramObject3, Object paramObject4, Object paramObject5, Object paramObject6, Object paramObject7, Object paramObject8, Object paramObject9) { this.buf = paramObject1;
    this.limit = paramObject2;
    this.metric = paramObject3;
    this.description = paramObject4;
    this.buffer_size = paramObject5;
    this.last_put = paramObject6;
    this.buf_PLUS_ = paramObject7;
    this.handle = paramObject8;
    this.mta = paramObject9; }
  
  public static IPersistentVector getBasis() { return RT.vector(new Object[] { Symbol.intern(null, "buf"), Symbol.intern(null, "limit"), Symbol.intern(null, "metric"), Symbol.intern(null, "description"), ((IObj)Symbol.intern(null, "buffer-size")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "AtomicLong") })), ((IObj)Symbol.intern(null, "last-put")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "AtomicReference") })), Symbol.intern(null, "buf+"), Symbol.intern(null, "handle"), Symbol.intern(null, "mta") }); }
  
  public Object connector(Object sink) { sink = null;
    return ((IEventSource)this.buf).connector(sink); }
  
  public Object onDrained(Object callback) { callback = null;
    return ((IEventSource)this.buf).onDrained(callback); }
  
  public Object isDrained() { return ((IEventSource)this.buf).isDrained(); }
  
  public Object take(Object default_val, Object blocking_QMARK_, Object timeout, Object timeout_val) {
    timeout = null;
    default_val = null;
    timeout_val = null;
    val = ((IFn)const__11.getRawRoot()).invoke(null, ((IEventSource)this.buf).take(default_val, blocking_QMARK_, timeout, const__12), new fn__17049(this.buf_PLUS_, default_val, timeout_val));
    blocking_QMARK_ = null;
    if (blocking_QMARK_ != null) {
      if (blocking_QMARK_ != Boolean.FALSE) {
        val = null;
        this = null;
      } 
    } else {
      blocking_QMARK_;
    } 
    return null;
  }
  
  public Object take(Object default_val, Object blocking_QMARK_) {
    default_val = null;
    val = ((IFn)const__11.getRawRoot()).invoke(null, ((IEventSource)this.buf).take(default_val, blocking_QMARK_), new fn__17044(default_val, this.buf_PLUS_));
    blocking_QMARK_ = null;
    if (blocking_QMARK_ != null) {
      if (blocking_QMARK_ != Boolean.FALSE) {
        val = null;
        this = null;
      } 
    } else {
      blocking_QMARK_;
    } 
    return null;
  }
  
  public Object onClosed(Object callback) { callback = null;
    return ((IEventSink)this.buf).onClosed(callback); }
  
  public Object isClosed() { return ((IEventSink)this.buf).isClosed(); }
  
  public Object put(Object x, Object blocking_QMARK_, Object timeout, Object timeout_val) {
    Object size = ((IFn)this.metric).invoke(x);
    x = null;
    timeout = null;
    size = null;
    timeout_val = null;
    val = ((IFn)const__11.getRawRoot()).invoke(null, ((IEventSink)this.buf).put(Tuple.create(size, x), blocking_QMARK_, timeout, const__12), new fn__17042(size, this.buf_PLUS_, timeout_val, this.last_put));
    blocking_QMARK_ = null;
    if (blocking_QMARK_ != null) {
      if (blocking_QMARK_ != Boolean.FALSE) {
        val = null;
        this = null;
      } 
    } else {
      blocking_QMARK_;
    } 
    return null;
  }
  
  public Object put(Object x, Object blocking_QMARK_) {
    Object size = ((IFn)this.metric).invoke(x);
    x = null;
    size = null;
    val = ((IFn)const__11.getRawRoot()).invoke(null, ((IEventSink)this.buf).put(Tuple.create(size, x), blocking_QMARK_), new fn__17040(size, this.buf_PLUS_, this.last_put));
    blocking_QMARK_ = null;
    if (blocking_QMARK_ != null) {
      if (blocking_QMARK_ != Boolean.FALSE) {
        val = null;
        this = null;
      } 
    } else {
      blocking_QMARK_;
    } 
    return null;
  }
  
  public Object weakHandle(Object ref_queue) {
    Object or__5516__auto__17055 = ((IFn)const__0.getRawRoot()).invoke(this.handle);
    if (or__5516__auto__17055 != null) {
      if (or__5516__auto__17055 != Boolean.FALSE)
        or__5516__auto__17055 = null; 
    } else {
      or__5516__auto__17055;
    } 
    ref_queue = null;
    ((IFn)const__9.getRawRoot()).invoke(this.handle, null, new WeakReference(this, (ReferenceQueue)ref_queue));
    this = null;
    return ((IFn)const__0.getRawRoot()).invoke(this.handle);
  }
  
  public Object description() {
    this = null;
    return ((IFn)this.description).invoke(((IFn)const__5.getRawRoot()).invoke(((IEventStream)this.buf).description(), RT.mapUniqueKeys(new Object[] { const__7, Numbers.num(((AtomicLong)this.buffer_size).get()), const__8, this.limit })));
  }
  
  public Object close() { return ((IEventStream)this.buf).close(); }
  
  public Object downstream() { this = null;
    return ((IFn)const__4.getRawRoot()).invoke(this); }
  
  public Object isSynchronous() { return Boolean.FALSE; }
  
  public IPersistentMap alterMeta(IFn f, ISeq args) { f = null;
    args = null;
    this = null;
    return (IPersistentMap)((IFn)const__2.getRawRoot()).invoke(const__3.getRawRoot(), this.mta, f, args); }
  
  public IPersistentMap resetMeta(IPersistentMap m) { m = null;
    this = null;
    return (IPersistentMap)((IFn)const__1.getRawRoot()).invoke(this.mta, m); }
  
  public IPersistentMap meta() { this = null;
    return (IPersistentMap)((IFn)const__0.getRawRoot()).invoke(this.mta); }
}
