package manifold.stream;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.lang.ref.ReferenceQueue;
import java.util.Arrays;
import java.util.concurrent.Callable;
import java.util.concurrent.ConcurrentHashMap;

public class graph__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__3;
  
  public static final AFn const__4;
  
  public static final Var const__5;
  
  public static final AFn const__14;
  
  public static final Var const__15;
  
  public static final AFn const__18;
  
  public static final Var const__19;
  
  public static final AFn const__21;
  
  public static final Var const__22;
  
  public static final AFn const__26;
  
  public static final Var const__27;
  
  public static final AFn const__30;
  
  public static final Var const__31;
  
  public static final AFn const__34;
  
  public static final Var const__35;
  
  public static final AFn const__38;
  
  public static final Var const__39;
  
  public static final AFn const__42;
  
  public static final Var const__43;
  
  public static final AFn const__46;
  
  public static final Var const__47;
  
  public static final AFn const__50;
  
  public static final Var const__51;
  
  public static final AFn const__54;
  
  public static final Var const__55;
  
  public static final AFn const__58;
  
  public static final Var const__59;
  
  public static final AFn const__62;
  
  public static final Var const__63;
  
  public static final AFn const__66;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new graph.fn__15748());
    const__5.setMeta((IPersistentMap)const__14);
    const__5.bindRoot(new ReferenceQueue());
    const__15.setMeta((IPersistentMap)const__18);
    const__15.bindRoot(new ConcurrentHashMap());
    const__19.setMeta((IPersistentMap)const__21);
    const__19.bindRoot(new ConcurrentHashMap());
    const__22.setMeta((IPersistentMap)const__26);
    const__22.bindRoot(new graph.conj_to_list_BANG_());
    const__27.setMeta((IPersistentMap)const__30);
    const__27.bindRoot(new graph.downstream());
    const__31.setMeta((IPersistentMap)const__34);
    const__31.bindRoot(new graph.pop_connected_BANG_());
    const__35.setMeta((IPersistentMap)const__38);
    const__35.bindRoot(new graph.add_connection_BANG_());
    const__39.setMeta((IPersistentMap)const__42);
    const__39.bindRoot(new graph.async_send());
    const__43.setMeta((IPersistentMap)const__46);
    const__43.bindRoot(new graph.sync_send());
    const__47.setMeta((IPersistentMap)const__50);
    const__47.bindRoot(new graph.handle_async_put());
    const__51.setMeta((IPersistentMap)const__54);
    const__51.bindRoot(new graph.handle_async_error());
    const__55.setMeta((IPersistentMap)const__58);
    const__55.bindRoot(new graph.async_connect());
    const__59.setMeta((IPersistentMap)const__62);
    const__59.bindRoot(new graph.sync_connect());
    const__63.setMeta((IPersistentMap)const__66);
    const__63.bindRoot(new graph.connect());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "manifold.stream.graph")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE }));
    const__3 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE });
    const__4 = (AFn)Symbol.intern(null, "clojure.core");
    const__5 = (Var)RT.var("manifold.stream.graph", "ref-queue");
    const__14 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "tag"), RT.classForName("java.lang.ref.ReferenceQueue"), RT.keyword(null, "line"), Integer.valueOf(23), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "manifold/stream/graph.clj" });
    const__15 = (Var)RT.var("manifold.stream.graph", "handle->downstreams");
    const__18 = (AFn)RT.map(new Object[] { RT.keyword(null, "tag"), RT.classForName("java.util.concurrent.ConcurrentHashMap"), RT.keyword(null, "line"), Integer.valueOf(26), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "manifold/stream/graph.clj" });
    const__19 = (Var)RT.var("manifold.stream.graph", "handle->connected-handles");
    const__21 = (AFn)RT.map(new Object[] { RT.keyword(null, "tag"), RT.classForName("java.util.concurrent.ConcurrentHashMap"), RT.keyword(null, "line"), Integer.valueOf(29), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "manifold/stream/graph.clj" });
    const__22 = (Var)RT.var("manifold.stream.graph", "conj-to-list!");
    const__26 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "m")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "ConcurrentHashMap") })), Symbol.intern(null, "k"), Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(31), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "manifold/stream/graph.clj" });
    const__27 = (Var)RT.var("manifold.stream.graph", "downstream");
    const__30 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "stream")) })), RT.keyword(null, "line"), Integer.valueOf(54), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "manifold/stream/graph.clj" });
    const__31 = (Var)RT.var("manifold.stream.graph", "pop-connected!");
    const__34 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "stream")) })), RT.keyword(null, "line"), Integer.valueOf(64), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "manifold/stream/graph.clj" });
    const__35 = (Var)RT.var("manifold.stream.graph", "add-connection!");
    const__38 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "a"), Symbol.intern(null, "b")) })), RT.keyword(null, "line"), Integer.valueOf(73), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "manifold/stream/graph.clj" });
    const__39 = (Var)RT.var("manifold.stream.graph", "async-send");
    const__42 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "d")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Downstream") })), Symbol.intern(null, "msg"), Symbol.intern(null, "dsts")) })), RT.keyword(null, "line"), Integer.valueOf(78), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "manifold/stream/graph.clj" });
    const__43 = (Var)RT.var("manifold.stream.graph", "sync-send");
    const__46 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "d")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Downstream") })), Symbol.intern(null, "msg"), ((IObj)Symbol.intern(null, "dsts")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "CopyOnWriteArrayList") })), ((IObj)Symbol.intern(null, "upstream")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "IEventSink") }))) })), RT.keyword(null, "line"), Integer.valueOf(86), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "manifold/stream/graph.clj" });
    const__47 = (Var)RT.var("manifold.stream.graph", "handle-async-put");
    const__50 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "x")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "AsyncPut") })), Symbol.intern(null, "val"), Symbol.intern(null, "source")) })), RT.keyword(null, "line"), Integer.valueOf(104), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "manifold/stream/graph.clj" });
    const__51 = (Var)RT.var("manifold.stream.graph", "handle-async-error");
    const__54 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "x")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "AsyncPut") })), Symbol.intern(null, "err"), Symbol.intern(null, "source")) })), RT.keyword(null, "line"), Integer.valueOf(118), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "manifold/stream/graph.clj" });
    const__55 = (Var)RT.var("manifold.stream.graph", "async-connect");
    const__58 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "source")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "IEventSource") })), ((IObj)Symbol.intern(null, "dsts")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "CopyOnWriteArrayList") }))) })), RT.keyword(null, "line"), Integer.valueOf(127), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "manifold/stream/graph.clj" });
    const__59 = (Var)RT.var("manifold.stream.graph", "sync-connect");
    const__62 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "source")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "IEventSource") })), ((IObj)Symbol.intern(null, "dsts")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "CopyOnWriteArrayList") }))) })), RT.keyword(null, "line"), Integer.valueOf(245), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "manifold/stream/graph.clj" });
    const__63 = (Var)RT.var("manifold.stream.graph", "connect");
    const__66 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "src")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "IEventSource") })), ((IObj)Symbol.intern(null, "dst")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "IEventSink") })), RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "upstream?"), Symbol.intern(null, "downstream?"), Symbol.intern(null, "timeout"), Symbol.intern(null, "description")), RT.keyword(null, "or"), RT.map(new Object[] { Symbol.intern(null, "timeout"), Long.valueOf(-1L), Symbol.intern(null, "upstream?"), Boolean.FALSE, Symbol.intern(null, "downstream?"), Boolean.TRUE }), RT.keyword(null, "as"), Symbol.intern(null, "opts") })) })), RT.keyword(null, "line"), Integer.valueOf(300), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "manifold/stream/graph.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("manifold.stream.graph__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
