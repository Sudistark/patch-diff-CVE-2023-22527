package manifold.stream;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class default__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__3;
  
  public static final AFn const__4;
  
  public static final Var const__5;
  
  public static final Var const__6;
  
  public static final AFn const__13;
  
  public static final Object const__14;
  
  public static final Var const__15;
  
  public static final AFn const__17;
  
  public static final Var const__18;
  
  public static final AFn const__20;
  
  public static final Object const__21;
  
  public static final Var const__22;
  
  public static final AFn const__24;
  
  public static final Object const__25;
  
  public static final Var const__26;
  
  public static final AFn const__30;
  
  public static final Var const__31;
  
  public static final AFn const__34;
  
  public static final Var const__35;
  
  public static final AFn const__39;
  
  public static final Var const__40;
  
  public static final AFn const__43;
  
  public static final Var const__44;
  
  public static final AFn const__47;
  
  public static final Var const__48;
  
  public static final AFn const__51;
  
  public static final Var const__52;
  
  public static final AFn const__55;
  
  public static final Var const__56;
  
  public static final AFn const__59;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new default.fn__15860());
    const__6.setMeta((IPersistentMap)const__13);
    const__6.bindRoot(const__14);
    const__15.setMeta((IPersistentMap)const__17);
    const__15.bindRoot(const__14);
    const__18.setMeta((IPersistentMap)const__20);
    const__18.bindRoot(const__21);
    const__22.setMeta((IPersistentMap)const__24);
    const__22.bindRoot(const__25);
    const__26.setMeta((IPersistentMap)const__30);
    const__26.bindRoot(new default.de_nil());
    const__31.setMeta((IPersistentMap)const__34);
    const__31.bindRoot(new default.re_nil());
    const__35.setMeta((IPersistentMap)const__39);
    const__35.bindRoot(new default.cleanup_expired_deferreds());
    const__40.setMeta((IPersistentMap)const__43);
    const__40.bindRoot(new default.__GT_Stream());
    const__44.setMeta((IPersistentMap)const__47);
    const__44.bindRoot(new default.add_BANG_());
    const__48.setMeta((IPersistentMap)const__51);
    const__48.bindRoot(new default.stream());
    const__52.setMeta((IPersistentMap)const__55);
    const__52.bindRoot(new default.onto());
    const__56.setMeta((IPersistentMap)const__59);
    const__56.bindRoot(new default.stream_STAR_());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "manifold.stream.default")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE }));
    const__3 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE });
    const__4 = (AFn)Symbol.intern(null, "clojure.core");
    const__5 = (Var)RT.var("clojure.core", "*unchecked-math*");
    const__6 = (Var)RT.var("manifold.stream.default", "max-dirty-takes");
    const__13 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(29), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "manifold/stream/default.clj", RT.keyword(null, "doc"), "Every X takes, scan for timed-out deferreds and remove" });
    const__14 = Long.valueOf(64L);
    const__15 = (Var)RT.var("manifold.stream.default", "max-dirty-puts");
    const__17 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(30), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "manifold/stream/default.clj", RT.keyword(null, "doc"), "Every X puts, scan for timed-out deferreds and remove" });
    const__18 = (Var)RT.var("manifold.stream.default", "max-consumers");
    const__20 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(31), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "manifold/stream/default.clj", RT.keyword(null, "doc"), "Maximum number of pending consumers" });
    const__21 = Long.valueOf(16384L);
    const__22 = (Var)RT.var("manifold.stream.default", "max-producers");
    const__24 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(32), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "manifold/stream/default.clj", RT.keyword(null, "doc"), "Maximum number of pending producers" });
    const__25 = Long.valueOf(16384L);
    const__26 = (Var)RT.var("manifold.stream.default", "de-nil");
    const__30 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(39), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "manifold/stream/default.clj" });
    const__31 = (Var)RT.var("manifold.stream.default", "re-nil");
    const__34 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(44), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "manifold/stream/default.clj" });
    const__35 = (Var)RT.var("manifold.stream.default", "cleanup-expired-deferreds");
    const__39 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "l")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "LinkedList") }))) })), RT.keyword(null, "doc"), "Removes all realized deferreds (presumably from timing out).", RT.keyword(null, "line"), Integer.valueOf(49), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "manifold/stream/default.clj" });
    const__40 = (Var)RT.var("manifold.stream.default", "->Stream");
    const__43 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { RT.vector(new Object[] { Symbol.intern(null, "permanent?"), Symbol.intern(null, "description"), Symbol.intern(null, "producers"), Symbol.intern(null, "consumers"), Symbol.intern(null, "capacity"), Symbol.intern(null, "messages"), Symbol.intern(null, "executor"), Symbol.intern(null, "add!"), Symbol.intern(null, "dirty-takes") }) })), RT.keyword(null, "line"), Integer.valueOf(61), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "manifold/stream/default.clj" });
    const__44 = (Var)RT.var("manifold.stream.default", "add!");
    const__47 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "producers")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "LinkedList") })), ((IObj)Symbol.intern(null, "consumers")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "LinkedList") })), ((IObj)Symbol.intern(null, "messages")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Queue") })), Symbol.intern(null, "capacity"), Symbol.intern(null, "executor"), ((IObj)Symbol.intern(null, "dirty-puts")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "AtomicLong") }))) })), RT.keyword(null, "line"), Integer.valueOf(276), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "manifold/stream/default.clj" });
    const__48 = (Var)RT.var("manifold.stream.default", "stream");
    const__51 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(), Tuple.create(Symbol.intern(null, "buffer-size")), Tuple.create(Symbol.intern(null, "buffer-size"), Symbol.intern(null, "xform")), Tuple.create(Symbol.intern(null, "buffer-size"), Symbol.intern(null, "xform"), Symbol.intern(null, "executor")) })), RT.keyword(null, "line"), Integer.valueOf(318), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "manifold/stream/default.clj" });
    const__52 = (Var)RT.var("manifold.stream.default", "onto");
    const__55 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ex"), Symbol.intern(null, "s")) })), RT.keyword(null, "line"), Integer.valueOf(345), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "manifold/stream/default.clj" });
    const__56 = (Var)RT.var("manifold.stream.default", "stream*");
    const__59 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "permanent?"), Symbol.intern(null, "buffer-size"), Symbol.intern(null, "description"), Symbol.intern(null, "executor"), Symbol.intern(null, "xform")), RT.keyword(null, "or"), RT.map(new Object[] { Symbol.intern(null, "permanent?"), Boolean.FALSE, Symbol.intern(null, "executor"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("ex", "executor") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(359), RT.keyword(null, "column"), Integer.valueOf(23) })) }) })) })), RT.keyword(null, "line"), Integer.valueOf(352), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "manifold/stream/default.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("manifold.stream.default__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
