package manifold.stream.graph;

import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.IPersistentVector;
import clojure.lang.IType;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;

public final class AsyncPut implements IType {
  public final Object deferred;
  
  public final Object dsts;
  
  public final Object dst;
  
  public final boolean upstream_QMARK_;
  
  public AsyncPut(Object paramObject1, Object paramObject2, Object paramObject3, boolean paramBoolean) { this.deferred = paramObject1;
    this.dsts = paramObject2;
    this.dst = paramObject3;
    this.upstream_QMARK_ = paramBoolean; }
  
  public static IPersistentVector getBasis() { return Tuple.create(Symbol.intern(null, "deferred"), ((IObj)Symbol.intern(null, "dsts")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "CopyOnWriteArrayList") })), Symbol.intern(null, "dst"), ((IObj)Symbol.intern(null, "upstream?")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "boolean") }))); }
  
  static  {
  
  }
}
