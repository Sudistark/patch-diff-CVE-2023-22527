package manifold.stream.async;

import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.IPersistentVector;
import clojure.lang.IReference;
import clojure.lang.ISeq;
import clojure.lang.IType;
import clojure.lang.Keyword;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.locks.Lock;
import manifold.stream.core.IEventSink;
import manifold.stream.core.IEventStream;

public final class CoreAsyncSink implements IReference, IEventSink, IEventStream, IType {
  public final Object ch;
  
  public final Object last_put;
  
  public final Object lock;
  
  public final Object __closedCallbacks;
  
  public static final Var const__0 = (Var)RT.var("clojure.core", "not");
  
  public static final Var const__2 = (Var)RT.var("clojure.core", "str");
  
  public static final Var const__3 = (Var)RT.var("clojure.core", "pr-str");
  
  public static final Object const__4 = ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "not"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "nil?"), Symbol.intern(null, "x") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(104), RT.keyword(null, "column"), Integer.valueOf(18) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(104), RT.keyword(null, "column"), Integer.valueOf(13) }));
  
  public static final Var const__6 = (Var)RT.var("manifold.deferred", "success-deferred");
  
  public static final Var const__7 = (Var)RT.var("clojure.core.async", ">!!");
  
  public static final Keyword const__8 = (Keyword)RT.keyword(null, "else");
  
  public static final Var const__9 = (Var)RT.var("manifold.deferred", "deferred");
  
  public static final Keyword const__12 = (Keyword)RT.keyword(null, "sink?");
  
  public static final Keyword const__13 = (Keyword)RT.keyword(null, "closed?");
  
  public static final Keyword const__14 = (Keyword)RT.keyword(null, "type");
  
  public static final Var const__15 = (Var)RT.var("clojure.core", "apply");
  
  public static final Var const__16 = (Var)RT.var("manifold.stream.graph", "downstream");
  
  public static final Object const__17 = ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "not"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "nil?"), Symbol.intern(null, "x") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(135), RT.keyword(null, "column"), Integer.valueOf(20) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(135), RT.keyword(null, "column"), Integer.valueOf(15) }));
  
  public static final Var const__18 = (Var)RT.var("clojure.core", "deref"), const__19 = (Var)RT.var("manifold.utils", "invoke-callbacks");
  
  public CoreAsyncSink(Object paramObject1, Object paramObject2, Object paramObject3, Object paramObject4, Object paramObject5, Object paramObject6, Object paramObject7) { this.ch = paramObject1;
    this.last_put = paramObject2;
    this.lock = paramObject3;
    this.__mta = paramObject4;
    this.__isClosed = paramObject5;
    this.__closedCallbacks = paramObject6;
    this.__weakHandle = paramObject7; }
  
  public static IPersistentVector getBasis() { return RT.vector(new Object[] { Symbol.intern(null, "ch"), ((IObj)Symbol.intern(null, "last-put")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "AtomicReference") })), Symbol.intern(null, "lock"), ((IObj)Symbol.intern(null, "__mta")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "volatile-mutable"), Boolean.TRUE })), ((IObj)Symbol.intern(null, "__isClosed")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "volatile-mutable"), Boolean.TRUE })), ((IObj)Symbol.intern(null, "__closedCallbacks")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "java.util.LinkedList") })), ((IObj)Symbol.intern(null, "__weakHandle")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "volatile-mutable"), Boolean.TRUE })) }); }
  
  public Object onClosed(Object callback__15724__auto__) { // Byte code:
    //   0: aload_0
    //   1: getfield lock : Ljava/lang/Object;
    //   4: astore_2
    //   5: aload_2
    //   6: checkcast java/util/concurrent/locks/Lock
    //   9: invokeinterface lock : ()V
    //   14: aconst_null
    //   15: pop
    //   16: aload_0
    //   17: getfield __isClosed : Ljava/lang/Object;
    //   20: dup
    //   21: ifnull -> 44
    //   24: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   27: if_acmpeq -> 45
    //   30: aload_1
    //   31: aconst_null
    //   32: astore_1
    //   33: checkcast clojure/lang/IFn
    //   36: invokeinterface invoke : ()Ljava/lang/Object;
    //   41: goto -> 70
    //   44: pop
    //   45: aload_0
    //   46: getfield __closedCallbacks : Ljava/lang/Object;
    //   49: checkcast java/util/LinkedList
    //   52: aload_1
    //   53: aconst_null
    //   54: astore_1
    //   55: invokevirtual add : (Ljava/lang/Object;)Z
    //   58: ifeq -> 67
    //   61: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   64: goto -> 70
    //   67: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   70: astore_3
    //   71: aload_2
    //   72: aconst_null
    //   73: astore_2
    //   74: checkcast java/util/concurrent/locks/Lock
    //   77: invokeinterface unlock : ()V
    //   82: aconst_null
    //   83: pop
    //   84: goto -> 105
    //   87: astore #4
    //   89: aload_2
    //   90: aconst_null
    //   91: astore_2
    //   92: checkcast java/util/concurrent/locks/Lock
    //   95: invokeinterface unlock : ()V
    //   100: aconst_null
    //   101: pop
    //   102: aload #4
    //   104: athrow
    //   105: aload_3
    //   106: areturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #79	-> 0
    //   #79	-> 9
    //   #79	-> 16
    //   #79	-> 33
    //   #79	-> 36
    //   #79	-> 55
    //   #79	-> 77
    //   #79	-> 95
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   5	101	2	lock__14923__auto__16624	Ljava/lang/Object;
    //   0	106	0	this	Lmanifold/stream/async/CoreAsyncSink;
    //   0	106	1	callback__15724__auto__	Ljava/lang/Object;
    // Exception table:
    //   from	to	target	type
    //   16	71	87	finally }
  
  public Object markClosed() {
    Object object;
    lock__14923__auto__16625 = this.lock;
    ((Lock)lock__14923__auto__16625).lock();
    null;
    try {
      this.__isClosed = Boolean.TRUE;
      object = ((IFn)const__19.getRawRoot()).invoke(this.__closedCallbacks);
    } finally {
      lock__14923__auto__16625 = null;
      ((Lock)lock__14923__auto__16625).unlock();
      null;
    } 
    return object;
  }
  
  public Object put(Object x, Object blocking_QMARK_, Object timeout, Object timeout_val) { // Byte code:
    //   0: aload_3
    //   1: aconst_null
    //   2: invokestatic identical : (Ljava/lang/Object;Ljava/lang/Object;)Z
    //   5: ifeq -> 24
    //   8: aload_0
    //   9: checkcast manifold/stream/core/IEventSink
    //   12: aload_1
    //   13: aload_2
    //   14: invokeinterface put : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   19: pop
    //   20: goto -> 119
    //   23: athrow
    //   24: getstatic manifold/stream/async/CoreAsyncSink.const__0 : Lclojure/lang/Var;
    //   27: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   30: checkcast clojure/lang/IFn
    //   33: aload_1
    //   34: aconst_null
    //   35: invokestatic identical : (Ljava/lang/Object;Ljava/lang/Object;)Z
    //   38: ifeq -> 47
    //   41: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   44: goto -> 50
    //   47: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   50: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   55: dup
    //   56: ifnull -> 70
    //   59: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   62: if_acmpeq -> 71
    //   65: aconst_null
    //   66: pop
    //   67: goto -> 119
    //   70: pop
    //   71: new java/lang/AssertionError
    //   74: dup
    //   75: getstatic manifold/stream/async/CoreAsyncSink.const__2 : Lclojure/lang/Var;
    //   78: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   81: checkcast clojure/lang/IFn
    //   84: ldc 'Assert failed: '
    //   86: ldc 'core.async channel cannot take `nil` as a message'
    //   88: ldc '\\n'
    //   90: getstatic manifold/stream/async/CoreAsyncSink.const__3 : Lclojure/lang/Var;
    //   93: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   96: checkcast clojure/lang/IFn
    //   99: getstatic manifold/stream/async/CoreAsyncSink.const__17 : Ljava/lang/Object;
    //   102: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   107: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   112: invokespecial <init> : (Ljava/lang/Object;)V
    //   115: checkcast java/lang/Throwable
    //   118: athrow
    //   119: aload_0
    //   120: getfield lock : Ljava/lang/Object;
    //   123: astore #5
    //   125: aload #5
    //   127: checkcast java/util/concurrent/locks/Lock
    //   130: invokeinterface lock : ()V
    //   135: aconst_null
    //   136: pop
    //   137: aload_0
    //   138: checkcast manifold/stream/core/IEventSink
    //   141: invokeinterface isClosed : ()Ljava/lang/Object;
    //   146: dup
    //   147: ifnull -> 196
    //   150: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   153: if_acmpeq -> 197
    //   156: aload_2
    //   157: aconst_null
    //   158: astore_2
    //   159: dup
    //   160: ifnull -> 175
    //   163: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   166: if_acmpeq -> 176
    //   169: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   172: goto -> 193
    //   175: pop
    //   176: getstatic manifold/stream/async/CoreAsyncSink.const__6 : Lclojure/lang/Var;
    //   179: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   182: checkcast clojure/lang/IFn
    //   185: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   188: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   193: goto -> 381
    //   196: pop
    //   197: getstatic manifold/stream/async/CoreAsyncSink.const__9 : Lclojure/lang/Var;
    //   200: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   203: checkcast clojure/lang/IFn
    //   206: invokeinterface invoke : ()Ljava/lang/Object;
    //   211: astore #6
    //   213: aload_0
    //   214: getfield last_put : Ljava/lang/Object;
    //   217: checkcast java/util/concurrent/atomic/AtomicReference
    //   220: aload #6
    //   222: invokevirtual getAndSet : (Ljava/lang/Object;)Ljava/lang/Object;
    //   225: astore #7
    //   227: new manifold/stream/async/CoreAsyncSink$f__16485
    //   230: dup
    //   231: aload_3
    //   232: aconst_null
    //   233: astore_3
    //   234: aload_1
    //   235: aconst_null
    //   236: astore_1
    //   237: aload_0
    //   238: getfield __mta : Ljava/lang/Object;
    //   241: aload_2
    //   242: aload_0
    //   243: getfield __weakHandle : Ljava/lang/Object;
    //   246: aload #7
    //   248: aload #4
    //   250: aconst_null
    //   251: astore #4
    //   253: aload_0
    //   254: getfield ch : Ljava/lang/Object;
    //   257: aload_0
    //   258: getfield lock : Ljava/lang/Object;
    //   261: aload_0
    //   262: getfield __isClosed : Ljava/lang/Object;
    //   265: aload_0
    //   266: aload_0
    //   267: getfield __closedCallbacks : Ljava/lang/Object;
    //   270: aload #5
    //   272: aload_0
    //   273: getfield last_put : Ljava/lang/Object;
    //   276: aload #6
    //   278: invokespecial <init> : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
    //   281: astore #8
    //   283: aload #7
    //   285: checkcast manifold/deferred/IDeferred
    //   288: invokeinterface realized : ()Z
    //   293: ifeq -> 315
    //   296: aload #8
    //   298: aconst_null
    //   299: astore #8
    //   301: checkcast clojure/lang/IFn
    //   304: aconst_null
    //   305: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   310: pop
    //   311: goto -> 340
    //   314: athrow
    //   315: aload #7
    //   317: aconst_null
    //   318: astore #7
    //   320: astore #9
    //   322: aload #9
    //   324: checkcast manifold/deferred/IDeferred
    //   327: aload #8
    //   329: aload #8
    //   331: aconst_null
    //   332: astore #8
    //   334: invokeinterface onRealized : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   339: pop
    //   340: aload_2
    //   341: aconst_null
    //   342: astore_2
    //   343: dup
    //   344: ifnull -> 375
    //   347: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   350: if_acmpeq -> 376
    //   353: getstatic manifold/stream/async/CoreAsyncSink.const__18 : Lclojure/lang/Var;
    //   356: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   359: checkcast clojure/lang/IFn
    //   362: aload #6
    //   364: aconst_null
    //   365: astore #6
    //   367: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   372: goto -> 381
    //   375: pop
    //   376: aload #6
    //   378: aconst_null
    //   379: astore #6
    //   381: astore #10
    //   383: aload #5
    //   385: aconst_null
    //   386: astore #5
    //   388: checkcast java/util/concurrent/locks/Lock
    //   391: invokeinterface unlock : ()V
    //   396: aconst_null
    //   397: pop
    //   398: goto -> 421
    //   401: astore #11
    //   403: aload #5
    //   405: aconst_null
    //   406: astore #5
    //   408: checkcast java/util/concurrent/locks/Lock
    //   411: invokeinterface unlock : ()V
    //   416: aconst_null
    //   417: pop
    //   418: aload #11
    //   420: athrow
    //   421: aload #10
    //   423: areturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #79	-> 0
    //   #133	-> 0
    //   #133	-> 2
    //   #134	-> 14
    //   #135	-> 24
    //   #135	-> 30
    //   #135	-> 35
    //   #135	-> 50
    //   #135	-> 81
    //   #135	-> 96
    //   #135	-> 102
    //   #135	-> 107
    //   #137	-> 130
    //   #139	-> 137
    //   #139	-> 141
    //   #141	-> 156
    //   #143	-> 182
    //   #143	-> 188
    //   #145	-> 203
    //   #145	-> 206
    //   #146	-> 222
    //   #154	-> 283
    //   #154	-> 288
    //   #155	-> 301
    //   #155	-> 305
    //   #156	-> 334
    //   #157	-> 340
    //   #157	-> 359
    //   #157	-> 367
    //   #137	-> 391
    //   #137	-> 411
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   322	18	9	x__15114__auto__16626	Ljava/lang/Object;
    //   213	168	6	d	Ljava/lang/Object;
    //   227	154	7	d_SINGLEQUOTE_	Ljava/lang/Object;
    //   283	98	8	f	Ljava/lang/Object;
    //   125	298	5	lock__14923__auto__16627	Ljava/lang/Object;
    //   0	423	0	this	Lmanifold/stream/async/CoreAsyncSink;
    //   0	423	1	x	Ljava/lang/Object;
    //   0	423	2	blocking_QMARK_	Ljava/lang/Object;
    //   0	423	3	timeout	Ljava/lang/Object;
    //   0	423	4	timeout_val	Ljava/lang/Object;
    // Exception table:
    //   from	to	target	type
    //   137	314	401	finally
    //   315	383	401	finally }
  
  public Object isClosed() { return this.__isClosed; }
  
  public Object downstream() { this = null;
    return ((IFn)const__16.getRawRoot()).invoke(this); }
  
  public IPersistentMap alterMeta(IFn f__15719__auto__, ISeq args__15720__auto__) {
    Object lock__14925__auto__16629 = this.lock;
    ((Lock)lock__14925__auto__16629).lock();
    null;
    f__15719__auto__ = null;
    args__15720__auto__ = null;
    Object x__14926__auto__16628 = this.__mta = ((IFn)const__15.getRawRoot()).invoke(f__15719__auto__, this.__mta, args__15720__auto__);
    lock__14925__auto__16629 = null;
    ((Lock)lock__14925__auto__16629).unlock();
    null;
    x__14926__auto__16628 = null;
    return (IPersistentMap)x__14926__auto__16628;
  }
  
  public Object description() { return RT.mapUniqueKeys(new Object[] { const__12, Boolean.TRUE, const__13, ((IEventSink)this).isClosed(), const__14, "core.async" }); }
  
  public Object isSynchronous() { return Boolean.FALSE; }
  
  public Object close() { // Byte code:
    //   0: aload_0
    //   1: getfield lock : Ljava/lang/Object;
    //   4: astore_1
    //   5: aload_1
    //   6: checkcast java/util/concurrent/locks/Lock
    //   9: invokeinterface lock : ()V
    //   14: aconst_null
    //   15: pop
    //   16: aload_0
    //   17: checkcast manifold/stream/core/IEventSink
    //   20: invokeinterface isClosed : ()Ljava/lang/Object;
    //   25: dup
    //   26: ifnull -> 41
    //   29: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   32: if_acmpeq -> 42
    //   35: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   38: goto -> 104
    //   41: pop
    //   42: aload_0
    //   43: checkcast manifold/stream/core/IEventSink
    //   46: invokeinterface markClosed : ()Ljava/lang/Object;
    //   51: pop
    //   52: aload_0
    //   53: getfield last_put : Ljava/lang/Object;
    //   56: checkcast java/util/concurrent/atomic/AtomicReference
    //   59: invokevirtual get : ()Ljava/lang/Object;
    //   62: astore_2
    //   63: new manifold/stream/async/CoreAsyncSink$f__16481
    //   66: dup
    //   67: aload_0
    //   68: getfield ch : Ljava/lang/Object;
    //   71: invokespecial <init> : (Ljava/lang/Object;)V
    //   74: pop
    //   75: aload_2
    //   76: aconst_null
    //   77: astore_2
    //   78: astore_3
    //   79: aload_3
    //   80: checkcast manifold/deferred/IDeferred
    //   83: new manifold/stream/async/CoreAsyncSink$fn__16483
    //   86: dup
    //   87: aload_0
    //   88: getfield ch : Ljava/lang/Object;
    //   91: invokespecial <init> : (Ljava/lang/Object;)V
    //   94: aconst_null
    //   95: invokeinterface onRealized : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   100: pop
    //   101: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   104: astore #5
    //   106: aload_1
    //   107: aconst_null
    //   108: astore_1
    //   109: checkcast java/util/concurrent/locks/Lock
    //   112: invokeinterface unlock : ()V
    //   117: aconst_null
    //   118: pop
    //   119: goto -> 140
    //   122: astore #6
    //   124: aload_1
    //   125: aconst_null
    //   126: astore_1
    //   127: checkcast java/util/concurrent/locks/Lock
    //   130: invokeinterface unlock : ()V
    //   135: aconst_null
    //   136: pop
    //   137: aload #6
    //   139: athrow
    //   140: aload #5
    //   142: areturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #79	-> 0
    //   #90	-> 9
    //   #91	-> 16
    //   #91	-> 20
    //   #94	-> 46
    //   #95	-> 59
    //   #97	-> 95
    //   #90	-> 112
    //   #90	-> 130
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   79	22	3	x__15114__auto__16630	Ljava/lang/Object;
    //   63	41	2	d	Ljava/lang/Object;
    //   75	29	4	f	Ljava/lang/Object;
    //   5	137	1	lock__14923__auto__16631	Ljava/lang/Object;
    //   0	142	0	this	Lmanifold/stream/async/CoreAsyncSink;
    // Exception table:
    //   from	to	target	type
    //   16	106	122	finally }
  
  public IPersistentMap resetMeta(IPersistentMap m__15718__auto__) {
    Object lock__14925__auto__16633 = this.lock;
    ((Lock)lock__14925__auto__16633).lock();
    null;
    Object x__14926__auto__16632 = this.__mta = m__15718__auto__ = null;
    lock__14925__auto__16633 = null;
    ((Lock)lock__14925__auto__16633).unlock();
    null;
    x__14926__auto__16632 = null;
    return (IPersistentMap)x__14926__auto__16632;
  }
  
  public IPersistentMap meta() { return (IPersistentMap)this.__mta; }
  
  public Object weakHandle(Object ref_queue__15722__auto__) { // Byte code:
    //   0: aload_0
    //   1: getfield lock : Ljava/lang/Object;
    //   4: astore_2
    //   5: aload_2
    //   6: checkcast java/util/concurrent/locks/Lock
    //   9: invokeinterface lock : ()V
    //   14: aconst_null
    //   15: pop
    //   16: aload_0
    //   17: getfield __weakHandle : Ljava/lang/Object;
    //   20: astore_3
    //   21: aload_3
    //   22: dup
    //   23: ifnull -> 38
    //   26: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   29: if_acmpeq -> 39
    //   32: aload_3
    //   33: aconst_null
    //   34: astore_3
    //   35: goto -> 61
    //   38: pop
    //   39: aload_0
    //   40: new java/lang/ref/WeakReference
    //   43: dup
    //   44: aload_0
    //   45: aload_1
    //   46: aconst_null
    //   47: astore_1
    //   48: checkcast java/lang/ref/ReferenceQueue
    //   51: invokespecial <init> : (Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;)V
    //   54: putfield __weakHandle : Ljava/lang/Object;
    //   57: aload_0
    //   58: getfield __weakHandle : Ljava/lang/Object;
    //   61: astore #4
    //   63: aload_2
    //   64: aconst_null
    //   65: astore_2
    //   66: checkcast java/util/concurrent/locks/Lock
    //   69: invokeinterface unlock : ()V
    //   74: aconst_null
    //   75: pop
    //   76: goto -> 97
    //   79: astore #5
    //   81: aload_2
    //   82: aconst_null
    //   83: astore_2
    //   84: checkcast java/util/concurrent/locks/Lock
    //   87: invokeinterface unlock : ()V
    //   92: aconst_null
    //   93: pop
    //   94: aload #5
    //   96: athrow
    //   97: aload #4
    //   99: areturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #79	-> 0
    //   #79	-> 9
    //   #79	-> 21
    //   #79	-> 69
    //   #79	-> 87
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   21	40	3	or__5516__auto__16634	Ljava/lang/Object;
    //   5	94	2	lock__14923__auto__16635	Ljava/lang/Object;
    //   0	99	0	this	Lmanifold/stream/async/CoreAsyncSink;
    //   0	99	1	ref_queue__15722__auto__	Ljava/lang/Object;
    // Exception table:
    //   from	to	target	type
    //   16	63	79	finally }
  
  public Object put(Object x, Object blocking_QMARK_) { // Byte code:
    //   0: getstatic manifold/stream/async/CoreAsyncSink.const__0 : Lclojure/lang/Var;
    //   3: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   6: checkcast clojure/lang/IFn
    //   9: aload_1
    //   10: aconst_null
    //   11: invokestatic identical : (Ljava/lang/Object;Ljava/lang/Object;)Z
    //   14: ifeq -> 23
    //   17: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   20: goto -> 26
    //   23: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   26: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   31: dup
    //   32: ifnull -> 46
    //   35: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   38: if_acmpeq -> 47
    //   41: aconst_null
    //   42: pop
    //   43: goto -> 95
    //   46: pop
    //   47: new java/lang/AssertionError
    //   50: dup
    //   51: getstatic manifold/stream/async/CoreAsyncSink.const__2 : Lclojure/lang/Var;
    //   54: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   57: checkcast clojure/lang/IFn
    //   60: ldc 'Assert failed: '
    //   62: ldc 'core.async channel cannot take `nil` as a message'
    //   64: ldc '\\n'
    //   66: getstatic manifold/stream/async/CoreAsyncSink.const__3 : Lclojure/lang/Var;
    //   69: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   72: checkcast clojure/lang/IFn
    //   75: getstatic manifold/stream/async/CoreAsyncSink.const__4 : Ljava/lang/Object;
    //   78: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   83: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   88: invokespecial <init> : (Ljava/lang/Object;)V
    //   91: checkcast java/lang/Throwable
    //   94: athrow
    //   95: aload_0
    //   96: getfield lock : Ljava/lang/Object;
    //   99: astore_3
    //   100: aload_3
    //   101: checkcast java/util/concurrent/locks/Lock
    //   104: invokeinterface lock : ()V
    //   109: aconst_null
    //   110: pop
    //   111: aload_0
    //   112: checkcast manifold/stream/core/IEventSink
    //   115: invokeinterface isClosed : ()Ljava/lang/Object;
    //   120: dup
    //   121: ifnull -> 170
    //   124: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   127: if_acmpeq -> 171
    //   130: aload_2
    //   131: aconst_null
    //   132: astore_2
    //   133: dup
    //   134: ifnull -> 149
    //   137: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   140: if_acmpeq -> 150
    //   143: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   146: goto -> 167
    //   149: pop
    //   150: getstatic manifold/stream/async/CoreAsyncSink.const__6 : Lclojure/lang/Var;
    //   153: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   156: checkcast clojure/lang/IFn
    //   159: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   162: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   167: goto -> 370
    //   170: pop
    //   171: aload_2
    //   172: dup
    //   173: ifnull -> 210
    //   176: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   179: if_acmpeq -> 211
    //   182: getstatic manifold/stream/async/CoreAsyncSink.const__7 : Lclojure/lang/Var;
    //   185: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   188: checkcast clojure/lang/IFn
    //   191: aload_0
    //   192: getfield ch : Ljava/lang/Object;
    //   195: aload_1
    //   196: aconst_null
    //   197: astore_1
    //   198: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   203: pop
    //   204: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   207: goto -> 370
    //   210: pop
    //   211: getstatic manifold/stream/async/CoreAsyncSink.const__8 : Lclojure/lang/Keyword;
    //   214: dup
    //   215: ifnull -> 368
    //   218: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   221: if_acmpeq -> 369
    //   224: getstatic manifold/stream/async/CoreAsyncSink.const__9 : Lclojure/lang/Var;
    //   227: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   230: checkcast clojure/lang/IFn
    //   233: invokeinterface invoke : ()Ljava/lang/Object;
    //   238: astore #4
    //   240: aload_0
    //   241: getfield last_put : Ljava/lang/Object;
    //   244: checkcast java/util/concurrent/atomic/AtomicReference
    //   247: aload #4
    //   249: invokevirtual getAndSet : (Ljava/lang/Object;)Ljava/lang/Object;
    //   252: astore #5
    //   254: new manifold/stream/async/CoreAsyncSink$f__16379
    //   257: dup
    //   258: aload_0
    //   259: getfield __mta : Ljava/lang/Object;
    //   262: aload_1
    //   263: aconst_null
    //   264: astore_1
    //   265: aload_0
    //   266: aload_0
    //   267: getfield __weakHandle : Ljava/lang/Object;
    //   270: aload #4
    //   272: aload_0
    //   273: getfield ch : Ljava/lang/Object;
    //   276: aload_0
    //   277: getfield lock : Ljava/lang/Object;
    //   280: aload_0
    //   281: getfield __isClosed : Ljava/lang/Object;
    //   284: aload_0
    //   285: getfield __closedCallbacks : Ljava/lang/Object;
    //   288: aload #5
    //   290: aload_0
    //   291: getfield last_put : Ljava/lang/Object;
    //   294: aload_2
    //   295: aconst_null
    //   296: astore_2
    //   297: aload_3
    //   298: invokespecial <init> : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
    //   301: astore #6
    //   303: aload #5
    //   305: checkcast manifold/deferred/IDeferred
    //   308: invokeinterface realized : ()Z
    //   313: ifeq -> 335
    //   316: aload #6
    //   318: aconst_null
    //   319: astore #6
    //   321: checkcast clojure/lang/IFn
    //   324: aconst_null
    //   325: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   330: pop
    //   331: goto -> 360
    //   334: athrow
    //   335: aload #5
    //   337: aconst_null
    //   338: astore #5
    //   340: astore #7
    //   342: aload #7
    //   344: checkcast manifold/deferred/IDeferred
    //   347: aload #6
    //   349: aload #6
    //   351: aconst_null
    //   352: astore #6
    //   354: invokeinterface onRealized : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   359: pop
    //   360: aload #4
    //   362: aconst_null
    //   363: astore #4
    //   365: goto -> 370
    //   368: pop
    //   369: aconst_null
    //   370: astore #8
    //   372: aload_3
    //   373: aconst_null
    //   374: astore_3
    //   375: checkcast java/util/concurrent/locks/Lock
    //   378: invokeinterface unlock : ()V
    //   383: aconst_null
    //   384: pop
    //   385: goto -> 406
    //   388: astore #9
    //   390: aload_3
    //   391: aconst_null
    //   392: astore_3
    //   393: checkcast java/util/concurrent/locks/Lock
    //   396: invokeinterface unlock : ()V
    //   401: aconst_null
    //   402: pop
    //   403: aload #9
    //   405: athrow
    //   406: aload #8
    //   408: areturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #79	-> 0
    //   #104	-> 0
    //   #104	-> 6
    //   #104	-> 11
    //   #104	-> 26
    //   #104	-> 57
    //   #104	-> 72
    //   #104	-> 78
    //   #104	-> 83
    //   #106	-> 104
    //   #107	-> 111
    //   #108	-> 115
    //   #109	-> 130
    //   #111	-> 156
    //   #111	-> 162
    //   #107	-> 171
    //   #115	-> 188
    //   #115	-> 198
    //   #107	-> 211
    //   #119	-> 230
    //   #119	-> 233
    //   #120	-> 249
    //   #126	-> 303
    //   #126	-> 308
    //   #127	-> 321
    //   #127	-> 325
    //   #128	-> 354
    //   #106	-> 378
    //   #106	-> 396
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   342	18	7	x__15114__auto__16636	Ljava/lang/Object;
    //   240	125	4	d	Ljava/lang/Object;
    //   254	111	5	d_SINGLEQUOTE_	Ljava/lang/Object;
    //   303	62	6	f	Ljava/lang/Object;
    //   100	308	3	lock__14923__auto__16637	Ljava/lang/Object;
    //   0	408	0	this	Lmanifold/stream/async/CoreAsyncSink;
    //   0	408	1	x	Ljava/lang/Object;
    //   0	408	2	blocking_QMARK_	Ljava/lang/Object;
    // Exception table:
    //   from	to	target	type
    //   111	334	388	finally
    //   335	372	388	finally }
}
