package manifold.stream.deferred;

import clojure.lang.AFn;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.IPersistentVector;
import clojure.lang.IReference;
import clojure.lang.ISeq;
import clojure.lang.IType;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.concurrent.locks.Lock;
import manifold.stream.core.IEventSink;
import manifold.stream.core.IEventStream;

public final class DeferredSink implements IReference, IEventSink, IEventStream, IType {
  public final Object d;
  
  public final Object lock;
  
  public final Object __closedCallbacks;
  
  public static final Var const__0 = (Var)RT.var("manifold.deferred", "success!");
  
  public static final Var const__1 = (Var)RT.var("manifold.deferred", "success-deferred");
  
  public static final AFn const__3 = (AFn)RT.map(new Object[] { RT.keyword(null, "type"), "deferred" });
  
  public static final Var const__4 = (Var)RT.var("clojure.core", "apply"), const__5 = (Var)RT.var("manifold.stream.graph", "downstream"), const__6 = (Var)RT.var("manifold.utils", "invoke-callbacks");
  
  public DeferredSink(Object paramObject1, Object paramObject2, Object paramObject3, Object paramObject4, Object paramObject5, Object paramObject6) { this.d = paramObject1;
    this.lock = paramObject2;
    this.__mta = paramObject3;
    this.__isClosed = paramObject4;
    this.__closedCallbacks = paramObject5;
    this.__weakHandle = paramObject6; }
  
  public static IPersistentVector getBasis() { return Tuple.create(Symbol.intern(null, "d"), Symbol.intern(null, "lock"), ((IObj)Symbol.intern(null, "__mta")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "volatile-mutable"), Boolean.TRUE })), ((IObj)Symbol.intern(null, "__isClosed")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "volatile-mutable"), Boolean.TRUE })), ((IObj)Symbol.intern(null, "__closedCallbacks")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "java.util.LinkedList") })), ((IObj)Symbol.intern(null, "__weakHandle")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "volatile-mutable"), Boolean.TRUE }))); }
  
  public Object onClosed(Object callback__15724__auto__) { // Byte code:
    //   0: aload_0
    //   1: getfield lock : Ljava/lang/Object;
    //   4: astore_2
    //   5: aload_2
    //   6: checkcast java/util/concurrent/locks/Lock
    //   9: invokeinterface lock : ()V
    //   14: aconst_null
    //   15: pop
    //   16: aload_0
    //   17: getfield __isClosed : Ljava/lang/Object;
    //   20: dup
    //   21: ifnull -> 44
    //   24: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   27: if_acmpeq -> 45
    //   30: aload_1
    //   31: aconst_null
    //   32: astore_1
    //   33: checkcast clojure/lang/IFn
    //   36: invokeinterface invoke : ()Ljava/lang/Object;
    //   41: goto -> 70
    //   44: pop
    //   45: aload_0
    //   46: getfield __closedCallbacks : Ljava/lang/Object;
    //   49: checkcast java/util/LinkedList
    //   52: aload_1
    //   53: aconst_null
    //   54: astore_1
    //   55: invokevirtual add : (Ljava/lang/Object;)Z
    //   58: ifeq -> 67
    //   61: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   64: goto -> 70
    //   67: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   70: astore_3
    //   71: aload_2
    //   72: aconst_null
    //   73: astore_2
    //   74: checkcast java/util/concurrent/locks/Lock
    //   77: invokeinterface unlock : ()V
    //   82: aconst_null
    //   83: pop
    //   84: goto -> 105
    //   87: astore #4
    //   89: aload_2
    //   90: aconst_null
    //   91: astore_2
    //   92: checkcast java/util/concurrent/locks/Lock
    //   95: invokeinterface unlock : ()V
    //   100: aconst_null
    //   101: pop
    //   102: aload #4
    //   104: athrow
    //   105: aload_3
    //   106: areturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #17	-> 0
    //   #17	-> 9
    //   #17	-> 16
    //   #17	-> 33
    //   #17	-> 36
    //   #17	-> 55
    //   #17	-> 77
    //   #17	-> 95
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   5	101	2	lock__14923__auto__16186	Ljava/lang/Object;
    //   0	106	0	this	Lmanifold/stream/deferred/DeferredSink;
    //   0	106	1	callback__15724__auto__	Ljava/lang/Object;
    // Exception table:
    //   from	to	target	type
    //   16	71	87	finally }
  
  public Object markClosed() {
    Object object;
    lock__14923__auto__16187 = this.lock;
    ((Lock)lock__14923__auto__16187).lock();
    null;
    try {
      this.__isClosed = Boolean.TRUE;
      object = ((IFn)const__6.getRawRoot()).invoke(this.__closedCallbacks);
    } finally {
      lock__14923__auto__16187 = null;
      ((Lock)lock__14923__auto__16187).unlock();
      null;
    } 
    return object;
  }
  
  public Object put(Object x, Object blocking_QMARK_, Object timeout, Object timeout_val) { x = null;
    blocking_QMARK_ = null;
    return ((IEventSink)this).put(x, blocking_QMARK_); }
  
  public Object isClosed() { return this.__isClosed; }
  
  public Object downstream() { this = null;
    return ((IFn)const__5.getRawRoot()).invoke(this); }
  
  public IPersistentMap alterMeta(IFn f__15719__auto__, ISeq args__15720__auto__) {
    Object lock__14925__auto__16189 = this.lock;
    ((Lock)lock__14925__auto__16189).lock();
    null;
    f__15719__auto__ = null;
    args__15720__auto__ = null;
    Object x__14926__auto__16188 = this.__mta = ((IFn)const__4.getRawRoot()).invoke(f__15719__auto__, this.__mta, args__15720__auto__);
    lock__14925__auto__16189 = null;
    ((Lock)lock__14925__auto__16189).unlock();
    null;
    x__14926__auto__16188 = null;
    return (IPersistentMap)x__14926__auto__16188;
  }
  
  public Object description() { return const__3; }
  
  public Object isSynchronous() { return Boolean.FALSE; }
  
  public Object close() { return ((IEventSink)this).markClosed(); }
  
  public IPersistentMap resetMeta(IPersistentMap m__15718__auto__) {
    Object lock__14925__auto__16191 = this.lock;
    ((Lock)lock__14925__auto__16191).lock();
    null;
    Object x__14926__auto__16190 = this.__mta = m__15718__auto__ = null;
    lock__14925__auto__16191 = null;
    ((Lock)lock__14925__auto__16191).unlock();
    null;
    x__14926__auto__16190 = null;
    return (IPersistentMap)x__14926__auto__16190;
  }
  
  public IPersistentMap meta() { return (IPersistentMap)this.__mta; }
  
  public Object weakHandle(Object ref_queue__15722__auto__) { // Byte code:
    //   0: aload_0
    //   1: getfield lock : Ljava/lang/Object;
    //   4: astore_2
    //   5: aload_2
    //   6: checkcast java/util/concurrent/locks/Lock
    //   9: invokeinterface lock : ()V
    //   14: aconst_null
    //   15: pop
    //   16: aload_0
    //   17: getfield __weakHandle : Ljava/lang/Object;
    //   20: astore_3
    //   21: aload_3
    //   22: dup
    //   23: ifnull -> 38
    //   26: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   29: if_acmpeq -> 39
    //   32: aload_3
    //   33: aconst_null
    //   34: astore_3
    //   35: goto -> 61
    //   38: pop
    //   39: aload_0
    //   40: new java/lang/ref/WeakReference
    //   43: dup
    //   44: aload_0
    //   45: aload_1
    //   46: aconst_null
    //   47: astore_1
    //   48: checkcast java/lang/ref/ReferenceQueue
    //   51: invokespecial <init> : (Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;)V
    //   54: putfield __weakHandle : Ljava/lang/Object;
    //   57: aload_0
    //   58: getfield __weakHandle : Ljava/lang/Object;
    //   61: astore #4
    //   63: aload_2
    //   64: aconst_null
    //   65: astore_2
    //   66: checkcast java/util/concurrent/locks/Lock
    //   69: invokeinterface unlock : ()V
    //   74: aconst_null
    //   75: pop
    //   76: goto -> 97
    //   79: astore #5
    //   81: aload_2
    //   82: aconst_null
    //   83: astore_2
    //   84: checkcast java/util/concurrent/locks/Lock
    //   87: invokeinterface unlock : ()V
    //   92: aconst_null
    //   93: pop
    //   94: aload #5
    //   96: athrow
    //   97: aload #4
    //   99: areturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #17	-> 0
    //   #17	-> 9
    //   #17	-> 21
    //   #17	-> 69
    //   #17	-> 87
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   21	40	3	or__5516__auto__16192	Ljava/lang/Object;
    //   5	94	2	lock__14923__auto__16193	Ljava/lang/Object;
    //   0	99	0	this	Lmanifold/stream/deferred/DeferredSink;
    //   0	99	1	ref_queue__15722__auto__	Ljava/lang/Object;
    // Exception table:
    //   from	to	target	type
    //   16	63	79	finally }
  
  public Object put(Object x, Object blocking_QMARK_) { // Byte code:
    //   0: getstatic manifold/stream/deferred/DeferredSink.const__0 : Lclojure/lang/Var;
    //   3: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   6: checkcast clojure/lang/IFn
    //   9: aload_0
    //   10: getfield d : Ljava/lang/Object;
    //   13: aload_1
    //   14: aconst_null
    //   15: astore_1
    //   16: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   21: dup
    //   22: ifnull -> 83
    //   25: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   28: if_acmpeq -> 84
    //   31: aload_0
    //   32: checkcast manifold/stream/core/IEventSink
    //   35: invokeinterface markClosed : ()Ljava/lang/Object;
    //   40: pop
    //   41: aload_2
    //   42: aconst_null
    //   43: astore_2
    //   44: dup
    //   45: ifnull -> 60
    //   48: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   51: if_acmpeq -> 61
    //   54: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   57: goto -> 80
    //   60: pop
    //   61: getstatic manifold/stream/deferred/DeferredSink.const__1 : Lclojure/lang/Var;
    //   64: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   67: checkcast clojure/lang/IFn
    //   70: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   73: aconst_null
    //   74: astore_0
    //   75: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   80: goto -> 133
    //   83: pop
    //   84: aload_0
    //   85: checkcast manifold/stream/core/IEventSink
    //   88: invokeinterface markClosed : ()Ljava/lang/Object;
    //   93: pop
    //   94: aload_2
    //   95: aconst_null
    //   96: astore_2
    //   97: dup
    //   98: ifnull -> 113
    //   101: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   104: if_acmpeq -> 114
    //   107: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   110: goto -> 133
    //   113: pop
    //   114: getstatic manifold/stream/deferred/DeferredSink.const__1 : Lclojure/lang/Var;
    //   117: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   120: checkcast clojure/lang/IFn
    //   123: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   126: aconst_null
    //   127: astore_0
    //   128: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   133: areturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #17	-> 0
    //   #27	-> 0
    //   #27	-> 6
    //   #27	-> 16
    //   #29	-> 35
    //   #30	-> 41
    //   #32	-> 67
    //   #32	-> 73
    //   #34	-> 88
    //   #35	-> 94
    //   #37	-> 120
    //   #37	-> 126
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   0	133	0	this	Lmanifold/stream/deferred/DeferredSink;
    //   0	133	1	x	Ljava/lang/Object;
    //   0	133	2	blocking_QMARK_	Ljava/lang/Object; }
}
