package manifold.stream.default;

import clojure.lang.IPersistentVector;
import clojure.lang.IType;
import clojure.lang.Symbol;
import clojure.lang.Tuple;

public final class Production implements IType {
  public final Object deferred;
  
  public final Object message;
  
  public final Object token;
  
  public Production(Object paramObject1, Object paramObject2, Object paramObject3) { this.deferred = paramObject1;
    this.message = paramObject2;
    this.token = paramObject3; }
  
  public static IPersistentVector getBasis() { return Tuple.create(Symbol.intern(null, "deferred"), Symbol.intern(null, "message"), Symbol.intern(null, "token")); }
  
  static  {
  
  }
}
