package crypto;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class random__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__3;
  
  public static final AFn const__4;
  
  public static final Var const__5;
  
  public static final AFn const__13;
  
  public static final Var const__14;
  
  public static final AFn const__17;
  
  public static final Var const__18;
  
  public static final AFn const__21;
  
  public static final Var const__22;
  
  public static final AFn const__25;
  
  public static final Var const__26;
  
  public static final AFn const__29;
  
  public static void load() { LockingTransaction.runInTransaction((Callable)new random.fn__60240());
    const__5.setMeta((IPersistentMap)const__13);
    const__5.bindRoot(new random.bytes());
    const__14.setMeta((IPersistentMap)const__17);
    const__14.bindRoot(new random.base64());
    const__18.setMeta((IPersistentMap)const__21);
    const__18.bindRoot(new random.base32());
    const__22.setMeta((IPersistentMap)const__25);
    const__22.bindRoot(new random.hex());
    const__26.setMeta((IPersistentMap)const__29);
    const__26.bindRoot(new random.url_part()); }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "crypto.random")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Cryptographically secure random numbers and strings." }));
    const__3 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Cryptographically secure random numbers and strings." });
    const__4 = (AFn)Symbol.intern(null, "clojure.core");
    const__5 = (Var)RT.var("crypto.random", "bytes");
    const__13 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "size")) })), RT.keyword(null, "doc"), "Returns a random byte array of the specified size.", RT.keyword(null, "line"), Integer.valueOf(8), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "crypto/random.clj" });
    const__14 = (Var)RT.var("crypto.random", "base64");
    const__17 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "size")) })), RT.keyword(null, "doc"), "Return a random base64 string of the specified size in bytes.", RT.keyword(null, "line"), Integer.valueOf(15), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "crypto/random.clj" });
    const__18 = (Var)RT.var("crypto.random", "base32");
    const__21 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "size")) })), RT.keyword(null, "doc"), "Return a random base32 string of the specified size in bytes.", RT.keyword(null, "line"), Integer.valueOf(20), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "crypto/random.clj" });
    const__22 = (Var)RT.var("crypto.random", "hex");
    const__25 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "size")) })), RT.keyword(null, "doc"), "Return a random hex string of the specified size in bytes.", RT.keyword(null, "line"), Integer.valueOf(25), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "crypto/random.clj" });
    const__26 = (Var)RT.var("crypto.random", "url-part");
    const__29 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "size")) })), RT.keyword(null, "doc"), "Return a random string suitable for being inserted into URLs. The size\n  denotes the number of bytes to generate.", RT.keyword(null, "line"), Integer.valueOf(30), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "crypto/random.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("crypto.random__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
