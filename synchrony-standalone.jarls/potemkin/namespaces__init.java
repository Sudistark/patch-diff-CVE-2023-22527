package potemkin;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class namespaces__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__12;
  
  public static final Var const__13;
  
  public static final AFn const__16;
  
  public static final Var const__17;
  
  public static final AFn const__20;
  
  public static final Var const__21;
  
  public static final AFn const__24;
  
  public static final Var const__25;
  
  public static final AFn const__28;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new namespaces.fn__25918());
    const__3.setMeta((IPersistentMap)const__12);
    const__3.bindRoot(new namespaces.link_vars());
    const__13.setMeta((IPersistentMap)const__16);
    const__13.bindRoot(new namespaces.import_fn());
    ((Var)const__13)








      
      .setMacro();
    const__17.setMeta((IPersistentMap)const__20);
    const__17.bindRoot(new namespaces.import_macro());
    ((Var)const__17)






















      
      .setMacro();
    const__21.setMeta((IPersistentMap)const__24);
    const__21.bindRoot(new namespaces.import_def());
    ((Var)const__21)





















      
      .setMacro();
    const__25.setMeta((IPersistentMap)const__28);
    const__25.bindRoot(new namespaces.import_vars());
    ((Var)const__25)

















      
      .setMacro();
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "potemkin.namespaces");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("potemkin.namespaces", "link-vars");
    const__12 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "src"), Symbol.intern(null, "dst")) })), RT.keyword(null, "doc"), "Makes sure that all changes to `src` are reflected in `dst`.", RT.keyword(null, "line"), Integer.valueOf(3), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "potemkin/namespaces.clj" });
    const__13 = (Var)RT.var("potemkin.namespaces", "import-fn");
    const__16 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "sym")), Tuple.create(Symbol.intern(null, "sym"), Symbol.intern(null, "name")) })), RT.keyword(null, "doc"), "Given a function in another namespace, defines a function with the\n   same name in the current namespace.  Argument lists, doc-strings,\n   and original line-numbers are preserved.", RT.keyword(null, "line"), Integer.valueOf(11), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "potemkin/namespaces.clj" });
    const__17 = (Var)RT.var("potemkin.namespaces", "import-macro");
    const__20 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "sym")), Tuple.create(Symbol.intern(null, "sym"), Symbol.intern(null, "name")) })), RT.keyword(null, "doc"), "Given a macro in another namespace, defines a macro with the same\n   name in the current namespace.  Argument lists, doc-strings, and\n   original line-numbers are preserved.", RT.keyword(null, "line"), Integer.valueOf(35), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "potemkin/namespaces.clj" });
    const__21 = (Var)RT.var("potemkin.namespaces", "import-def");
    const__24 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "sym")), Tuple.create(Symbol.intern(null, "sym"), Symbol.intern(null, "name")) })), RT.keyword(null, "doc"), "Given a regular def'd var from another namespace, defined a new var with the\n   same name in the current namespace.", RT.keyword(null, "line"), Integer.valueOf(58), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "potemkin/namespaces.clj" });
    const__25 = (Var)RT.var("potemkin.namespaces", "import-vars");
    const__28 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "syms")) })), RT.keyword(null, "doc"), "Imports a list of vars from other namespaces.", RT.keyword(null, "line"), Integer.valueOf(77), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "potemkin/namespaces.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("potemkin.namespaces__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
