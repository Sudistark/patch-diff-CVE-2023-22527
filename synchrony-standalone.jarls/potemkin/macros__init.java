package potemkin;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;
import java.util.regex.Pattern;

public class macros__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__11;
  
  public static final Var const__12;
  
  public static final AFn const__14;
  
  public static final Object const__15;
  
  public static final Var const__16;
  
  public static final AFn const__18;
  
  public static final Object const__19;
  
  public static final Var const__20;
  
  public static final AFn const__23;
  
  public static final Var const__24;
  
  public static final AFn const__27;
  
  public static final Var const__28;
  
  public static final AFn const__31;
  
  public static final Var const__32;
  
  public static final AFn const__36;
  
  public static final Var const__37;
  
  public static final AFn const__40;
  
  public static final Var const__41;
  
  public static final AFn const__44;
  
  public static void load() { LockingTransaction.runInTransaction((Callable)new macros.fn__25951());
    const__3.setMeta((IPersistentMap)const__11);
    const__3.bindRoot(new macros.safe_resolve());
    const__12.setMeta((IPersistentMap)const__14);
    const__12.bindRoot(const__15);
    const__16.setMeta((IPersistentMap)const__18);
    const__16.bindRoot(const__19);
    const__20.setMeta((IPersistentMap)const__23);
    const__20.bindRoot(new macros.unified_gensym_QMARK_());
    const__24.setMeta((IPersistentMap)const__27);
    const__24.bindRoot(new macros.gensym_QMARK_());
    const__28.setMeta((IPersistentMap)const__31);
    const__28.bindRoot(new macros.un_gensym());
    const__32.setMeta((IPersistentMap)const__36);
    const__32.bindRoot(new macros.unify_gensyms());
    const__37.setMeta((IPersistentMap)const__40);
    const__37.bindRoot(new macros.normalize_gensyms());
    const__41.setMeta((IPersistentMap)const__44);
    const__41.bindRoot(new macros.equivalent_QMARK_()); }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "potemkin.macros");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("potemkin.macros", "safe-resolve");
    const__11 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(6), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "potemkin/macros.clj" });
    const__12 = (Var)RT.var("potemkin.macros", "unified-gensym-regex");
    const__14 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(12), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "potemkin/macros.clj" });
    const__15 = Pattern.compile("([a-zA-Z0-9\\-\\'\\*]+)#__\\d+__auto__$");
    const__16 = (Var)RT.var("potemkin.macros", "gensym-regex");
    const__18 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(14), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "potemkin/macros.clj" });
    const__19 = Pattern.compile("(_|[a-zA-Z0-9\\-\\'\\*]+)#?_+(\\d+_*#?)+(auto__)?$");
    const__20 = (Var)RT.var("potemkin.macros", "unified-gensym?");
    const__23 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })), RT.keyword(null, "line"), Integer.valueOf(16), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "potemkin/macros.clj" });
    const__24 = (Var)RT.var("potemkin.macros", "gensym?");
    const__27 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })), RT.keyword(null, "line"), Integer.valueOf(21), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "potemkin/macros.clj" });
    const__28 = (Var)RT.var("potemkin.macros", "un-gensym");
    const__31 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })), RT.keyword(null, "line"), Integer.valueOf(26), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "potemkin/macros.clj" });
    const__32 = (Var)RT.var("potemkin.macros", "unify-gensyms");
    const__36 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "body")) })), RT.keyword(null, "doc"), "All gensyms defined using two hash symbols are unified to the same\n   value, even if they were defined within different syntax-quote scopes.", RT.keyword(null, "line"), Integer.valueOf(29), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "potemkin/macros.clj" });
    const__37 = (Var)RT.var("potemkin.macros", "normalize-gensyms");
    const__40 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "body")) })), RT.keyword(null, "line"), Integer.valueOf(40), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "potemkin/macros.clj" });
    const__41 = (Var)RT.var("potemkin.macros", "equivalent?");
    const__44 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "a"), Symbol.intern(null, "b")) })), RT.keyword(null, "line"), Integer.valueOf(50), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "potemkin/macros.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("potemkin.macros__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
