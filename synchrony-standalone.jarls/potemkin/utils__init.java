package potemkin;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IPersistentMap;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class utils__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__12;
  
  public static final Var const__13;
  
  public static final AFn const__16;
  
  public static final Var const__17;
  
  public static final AFn const__20;
  
  public static final Var const__21;
  
  public static final AFn const__24;
  
  public static final Var const__25;
  
  public static final AFn const__28;
  
  public static final Var const__29;
  
  public static final AFn const__32;
  
  public static final Var const__33;
  
  public static final Var const__34;
  
  public static final Keyword const__35;
  
  public static final Var const__36;
  
  public static final AFn const__39;
  
  public static final Var const__40;
  
  public static final AFn const__43;
  
  public static final Var const__44;
  
  public static final AFn const__47;
  
  public static final Var const__48;
  
  public static final AFn const__51;
  
  public static final Var const__52;
  
  public static final AFn const__55;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new utils.fn__26110());
    const__3.setMeta((IPersistentMap)const__12);
    const__3.bindRoot(new utils.fast_bound_fn());
    ((Var)const__3)






      
      .setMacro();
    const__13.setMeta((IPersistentMap)const__16);
    const__13.bindRoot(new utils.fast_bound_fn_STAR_());
    const__17.setMeta((IPersistentMap)const__20);
    const__17.bindRoot(new utils.retry_exception_QMARK_());
    const__21.setMeta((IPersistentMap)const__24);
    const__21.bindRoot(new utils.try_STAR_());
    ((Var)const__21)
































      
      .setMacro();
    const__25.setMeta((IPersistentMap)const__28);
    const__25.bindRoot(new utils.condp_case());
    ((Var)const__25)



















      
      .setMacro();
    const__29.setMeta((IPersistentMap)const__32);
    const__29.bindRoot(new utils.re_nil());
    const__36.setMeta((IPersistentMap)const__39);
    const__36.bindRoot(new utils.de_nil());
    const__40.setMeta((IPersistentMap)const__43);
    const__40.bindRoot(new utils.memoize_form());
    ((Var)const__40)


      
      .setMacro();
    const__44.setMeta((IPersistentMap)const__47);
    const__44.bindRoot(new utils.fast_memoize());
    const__48.setMeta((IPersistentMap)const__51);
    const__48.bindRoot(new utils.doit());
    ((Var)const__48)



































      
      .setMacro();
    const__52.setMeta((IPersistentMap)const__55);
    const__52.bindRoot(new utils.doary());
    ((Var)const__52)










      
      .setMacro();
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "potemkin.utils");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("potemkin.utils", "fast-bound-fn");
    const__12 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "fn-body")) })), RT.keyword(null, "doc"), "Creates a variant of bound-fn which doesn't assume you want a merged\n   context between the source and execution environments.", RT.keyword(null, "line"), Integer.valueOf(9), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "potemkin/utils.clj" });
    const__13 = (Var)RT.var("potemkin.utils", "fast-bound-fn*");
    const__16 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f")) })), RT.keyword(null, "doc"), "Creates a function which conveys bindings, via fast-bound-fn.", RT.keyword(null, "line"), Integer.valueOf(34), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "potemkin/utils.clj" });
    const__17 = (Var)RT.var("potemkin.utils", "retry-exception?");
    const__20 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(40), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "potemkin/utils.clj" });
    const__21 = (Var)RT.var("potemkin.utils", "try*");
    const__24 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "body+catch")) })), RT.keyword(null, "doc"), "A variant of try that is fully transparent to transaction retry exceptions", RT.keyword(null, "line"), Integer.valueOf(43), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "potemkin/utils.clj" });
    const__25 = (Var)RT.var("potemkin.utils", "condp-case");
    const__28 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "predicate"), Symbol.intern(null, "value"), Symbol.intern(null, "&"), Symbol.intern(null, "cases")) })), RT.keyword(null, "doc"), "A variant of condp which has case-like syntax for options.  When comparing\n   smaller numbers of keywords, this can be faster, sometimes significantly.", RT.keyword(null, "line"), Integer.valueOf(64), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "potemkin/utils.clj" });
    const__29 = (Var)RT.var("potemkin.utils", "re-nil");
    const__32 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(88), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "potemkin/utils.clj" });
    const__33 = (Var)RT.var("clojure.core", "alter-meta!");
    const__34 = (Var)RT.var("clojure.core", "assoc");
    const__35 = (Keyword)RT.keyword(null, "inline");
    const__36 = (Var)RT.var("potemkin.utils", "de-nil");
    const__39 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(92), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "potemkin/utils.clj" });
    const__40 = (Var)RT.var("potemkin.utils", "memoize-form");
    const__43 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "f"), Symbol.intern(null, "&"), Symbol.intern(null, "args")) })), RT.keyword(null, "line"), Integer.valueOf(96), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "potemkin/utils.clj" });
    const__44 = (Var)RT.var("potemkin.utils", "fast-memoize");
    const__47 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f")) })), RT.keyword(null, "doc"), "A version of `memoize` which has equivalent behavior, but is faster.", RT.keyword(null, "line"), Integer.valueOf(104), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "potemkin/utils.clj" });
    const__48 = (Var)RT.var("potemkin.utils", "doit");
    const__51 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "it")), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "doc"), "A version of doseq that doesn't emit all that inline-destroying chunked-seq code.", RT.keyword(null, "line"), Integer.valueOf(133), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "potemkin/utils.clj" });
    const__52 = (Var)RT.var("potemkin.utils", "doary");
    const__55 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "ary")), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "doc"), "An array-specific version of doseq.", RT.keyword(null, "line"), Integer.valueOf(145), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "potemkin/utils.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("potemkin.utils__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
