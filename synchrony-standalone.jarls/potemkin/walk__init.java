package potemkin;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class walk__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__12;
  
  public static final Var const__13;
  
  public static final AFn const__16;
  
  public static final Var const__17;
  
  public static final AFn const__20;
  
  public static void load() { LockingTransaction.runInTransaction((Callable)new walk.fn__25944());
    const__3.setMeta((IPersistentMap)const__12);
    const__3.bindRoot(new walk.walk());
    const__13.setMeta((IPersistentMap)const__16);
    const__13.bindRoot(new walk.postwalk());
    const__17.setMeta((IPersistentMap)const__20);
    const__17.bindRoot(new walk.prewalk()); }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "potemkin.walk");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("potemkin.walk", "walk");
    const__12 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "inner"), Symbol.intern(null, "outer"), Symbol.intern(null, "form")) })), RT.keyword(null, "doc"), "Like `clojure.walk/walk`, but preserves metadata.", RT.keyword(null, "line"), Integer.valueOf(5), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "potemkin/walk.clj" });
    const__13 = (Var)RT.var("potemkin.walk", "postwalk");
    const__16 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "form")) })), RT.keyword(null, "doc"), "Like `clojure.walk/postwalk`, but preserves metadata.", RT.keyword(null, "line"), Integer.valueOf(20), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "potemkin/walk.clj" });
    const__17 = (Var)RT.var("potemkin.walk", "prewalk");
    const__20 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "form")) })), RT.keyword(null, "doc"), "Like `clojure.walk/prewalk`, but preserves metadata.", RT.keyword(null, "line"), Integer.valueOf(25), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "potemkin/walk.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("potemkin.walk__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
