package hz_atom.core;

import clojure.lang.AFn;
import clojure.lang.APersistentMap;
import clojure.lang.Associative;
import clojure.lang.Counted;
import clojure.lang.IAtom;
import clojure.lang.IFn;
import clojure.lang.IHashEq;
import clojure.lang.IKeywordLookup;
import clojure.lang.ILookup;
import clojure.lang.ILookupThunk;
import clojure.lang.IMapEntry;
import clojure.lang.IObj;
import clojure.lang.IPersistentCollection;
import clojure.lang.IPersistentMap;
import clojure.lang.IPersistentVector;
import clojure.lang.IRecord;
import clojure.lang.IRef;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.MapEntry;
import clojure.lang.Numbers;
import clojure.lang.PersistentHashSet;
import clojure.lang.RT;
import clojure.lang.RecordIterator;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Util;
import clojure.lang.Var;
import com.hazelcast.core.IMap;
import java.io.Serializable;
import java.util.Collection;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

public final class HazelcastAtom implements IRef, IAtom, IRecord, IHashEq, IObj, ILookup, IKeywordLookup, IPersistentMap, Map, Serializable {
  public final Object hz_map;
  
  public final Object watches_atom;
  
  public final Object validator_atom;
  
  public final Object __meta;
  
  public final Object __extmap;
  
  int __hash;
  
  int __hasheq;
  
  public static final Var const__0 = (Var)RT.var("clojure.core", "set");
  
  public static final Var const__1 = (Var)RT.var("clojure.core", "vals");
  
  public static final Var const__2 = (Var)RT.var("clojure.core", "keys");
  
  public static final Var const__4 = (Var)RT.var("clojure.core", "some");
  
  public static final Var const__7 = (Var)RT.var("clojure.core", "contains?");
  
  public static final Keyword const__8 = (Keyword)RT.keyword(null, "watches-atom");
  
  public static final Keyword const__9 = (Keyword)RT.keyword(null, "hz-map");
  
  public static final Keyword const__10 = (Keyword)RT.keyword(null, "validator-atom");
  
  public static final AFn const__11 = (AFn)PersistentHashSet.create(new Object[] { RT.keyword(null, "watches-atom"), RT.keyword(null, "hz-map"), RT.keyword(null, "validator-atom") });
  
  public static final Var const__12 = (Var)RT.var("clojure.core", "dissoc");
  
  public static final Var const__13 = (Var)RT.var("clojure.core", "with-meta");
  
  public static final Var const__14 = (Var)RT.var("clojure.core", "into");
  
  public static final Var const__15 = (Var)RT.var("clojure.core", "not-empty");
  
  public static final Var const__16 = (Var)RT.var("clojure.core", "identical?");
  
  public static final Var const__17 = (Var)RT.var("clojure.core", "assoc");
  
  public static final AFn const__18 = (AFn)Tuple.create(RT.keyword(null, "hz-map"), RT.keyword(null, "watches-atom"), RT.keyword(null, "validator-atom"));
  
  public static final Var const__19 = (Var)RT.var("clojure.core", "seq"), const__20 = (Var)RT.var("clojure.core", "concat"), const__21 = (Var)RT.var("clojure.core", "not"), const__22 = (Var)RT.var("clojure.core", "class"), const__23 = (Var)RT.var("clojure.core", "imap-cons"), const__24 = (Var)RT.var("clojure.core", "str"), const__33 = (Var)RT.var("hz-atom.core", "hz-map-atom-key"), const__34 = (Var)RT.var("clojure.core", "deref"), const__35 = (Var)RT.var("clojure.core", "reset!"), const__36 = (Var)RT.var("clojure.core", "swap!"), const__37 = (Var)RT.var("hz-atom.core", "swap-hz-atom"), const__38 = (Var)RT.var("hz-atom.core", "validate"), const__39 = (Var)RT.var("clojure.core", "val");
  
  public HazelcastAtom(Object paramObject1, Object paramObject2, Object paramObject3, Object paramObject4, Object paramObject5, int paramInt1, int paramInt2) { this.hz_map = paramObject1;
    this.watches_atom = paramObject2;
    this.validator_atom = paramObject3;
    this.__meta = paramObject4;
    this.__extmap = paramObject5;
    this.__hash = paramInt1;
    this.__hasheq = paramInt2; }
  
  public HazelcastAtom(Object paramObject1, Object paramObject2, Object paramObject3) { this(paramObject1, paramObject2, paramObject3, null, null, 0, 0); }
  
  public HazelcastAtom(Object paramObject1, Object paramObject2, Object paramObject3, Object paramObject4, Object paramObject5) { this(paramObject1, paramObject2, paramObject3, paramObject4, paramObject5, 0, 0); }
  
  public static IPersistentVector getBasis() { return Tuple.create(((IObj)Symbol.intern(null, "hz-map")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "IMap") })), Symbol.intern(null, "watches-atom"), Symbol.intern(null, "validator-atom")); }
  
  public static HazelcastAtom create(IPersistentMap paramIPersistentMap) {
    Object object1 = paramIPersistentMap.valAt(Keyword.intern("hz-map"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("hz-map"));
    Object object2 = paramIPersistentMap.valAt(Keyword.intern("watches-atom"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("watches-atom"));
    Object object3 = paramIPersistentMap.valAt(Keyword.intern("validator-atom"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("validator-atom"));
    return new HazelcastAtom(object1, object2, object3, null, RT.seqOrElse(paramIPersistentMap), 0, 0);
  }
  
  public Object reset(Object new_val) {
    ((IFn)const__34.getRawRoot())



















      
      .invoke(this);
    ((IFn)const__38.getRawRoot())
      .invoke(((IFn)const__34.getRawRoot()).invoke(this.validator_atom), const__39.getRawRoot());
    ((IMap)this.hz_map)
      .set(const__33.getRawRoot(), new_val);
    null;
    return null;
  }
  
  public boolean compareAndSet(Object old_val, Object new_val) { ((IFn)const__38.getRawRoot()).invoke(((IFn)const__34.getRawRoot()).invoke(this.validator_atom), new_val);
    old_val = null;
    new_val = null;
    return ((IMap)this.hz_map).replace(const__33.getRawRoot(), old_val, new_val); }
  
  public Object swap(IFn f, Object x, Object y, ISeq args) { x = null;
    args = null;
    f = null;
    y = null;
    this = null;
    return ((IFn)const__37.getRawRoot()).invoke(this, new fn__21254(x, args, f, y)); }
  
  public Object swap(IFn f, Object x, Object y) { f = null;
    y = null;
    x = null;
    this = null;
    return ((IFn)const__37.getRawRoot()).invoke(this, new fn__21252(f, y, x)); }
  
  public Object swap(IFn f, Object x) { x = null;
    f = null;
    this = null;
    return ((IFn)const__37.getRawRoot()).invoke(this, new fn__21250(x, f)); }
  
  public Object swap(IFn f) { f = null;
    this = null;
    return ((IFn)const__37.getRawRoot()).invoke(this, new fn__21248(f)); }
  
  public IRef removeWatch(Object key) { key = null;
    ((IFn)const__36.getRawRoot()).invoke(this.watches_atom, const__12.getRawRoot(), key);
    return (IRef)this; }
  
  public IRef addWatch(Object key, IFn callback) { key = null;
    callback = null;
    ((IFn)const__36.getRawRoot()).invoke(this.watches_atom, const__17.getRawRoot(), key, callback);
    return (IRef)this; }
  
  public IPersistentMap getWatches() { this = null;
    return (IPersistentMap)((IFn)const__34.getRawRoot()).invoke(this.watches_atom); }
  
  public void setValidator(IFn new_validator) { new_validator = null;
    this = null;
    ((IFn)const__35.getRawRoot()).invoke(this.validator_atom, new_validator); }
  
  public IFn getValidator() { this = null;
    return (IFn)((IFn)const__34.getRawRoot()).invoke(this.validator_atom); }
  
  public Object deref() {
    return ((IMap)this.hz_map).get(const__33.getRawRoot());
  }
  
  public int hasheq() {
    int hq__7768__auto__21258 = this.__hasheq, h__7769__auto__21257 = RT.intCast(0xFFFFFFFFCC07234EL ^ APersistentMap.mapHasheq((IPersistentMap)this));
    this.__hasheq = h__7769__auto__21257;
    return (hq__7768__auto__21258 == 0L) ? h__7769__auto__21257 : hq__7768__auto__21258;
  }
  
  public int hashCode() {
    int hash__7771__auto__21260 = this.__hash, h__7772__auto__21259 = APersistentMap.mapHash((IPersistentMap)this);
    this.__hash = h__7772__auto__21259;
    return (hash__7771__auto__21260 == 0L) ? h__7772__auto__21259 : hash__7771__auto__21260;
  }
  
  public boolean equals(Object G__21236) { G__21236 = null;
    return APersistentMap.mapEquals((IPersistentMap)this, G__21236); }
  
  public IPersistentMap meta() { return (IPersistentMap)this.__meta; }
  
  public IObj withMeta(IPersistentMap G__21236) { G__21236 = null;
    return (IObj)new HazelcastAtom(this.hz_map, this.watches_atom, this.validator_atom, G__21236, this.__extmap, this.__hash, this.__hasheq); }
  
  public Object valAt(Object k__7777__auto__) { k__7777__auto__ = null;
    return ((ILookup)this).valAt(k__7777__auto__, null); }
  
  public Object valAt(Object k__7779__auto__, Object else__7780__auto__) {
    Object G__21247 = k__7779__auto__;
    switch (Util.hash(G__21247) >> 3 & 0x3) {
      case 1:
        if (G__21247 == const__8);
        break;
      case 2:
        if (G__21247 == const__10);
        break;
      case 3:
        if (G__21247 == const__9);
        break;
    } 
    k__7779__auto__ = null;
    else__7780__auto__ = null;
    this = null;
    return RT.get(this.__extmap, k__7779__auto__, else__7780__auto__);
  }
  
  public ILookupThunk getLookupThunk(Keyword k__7782__auto__) {
    Object gclass = ((IFn)const__22.getRawRoot()).invoke(this), G__21240 = k__7782__auto__ = null;
    switch (Util.hash(G__21240) >> 3 & 0x3) {
      case 1:
        if (G__21240 == const__8)
          gclass = null; 
        break;
      case 2:
        if (G__21240 == const__10)
          gclass = null; 
        break;
      case 3:
        if (G__21240 == const__9)
          gclass = null; 
        break;
    } 
    return (ILookupThunk)null;
  }
  
  public int count() { return RT.intCast(Numbers.add(3L, RT.count(this.__extmap))); }
  
  public IPersistentCollection empty() { throw (Throwable)new UnsupportedOperationException((String)((IFn)const__24.getRawRoot()).invoke("Can't create empty: ", "hz_atom.core.HazelcastAtom")); }
  
  public IPersistentCollection cons(Object e__7786__auto__) { e__7786__auto__ = null;
    this = null;
    return (IPersistentCollection)((IFn)const__23).invoke(this, e__7786__auto__); }
  
  public boolean equiv(Object G__21236) {
    boolean or__5516__auto__21264 = Util.identical(this, G__21236);
    Object G__21236 = G__21236 = null;
    boolean and__5514__auto__21263 = Util.equiv(this.hz_map, ((HazelcastAtom)G__21236).hz_map), and__5514__auto__21262 = Util.equiv(this.watches_atom, ((HazelcastAtom)G__21236).watches_atom), and__5514__auto__21261 = Util.equiv(this.validator_atom, ((HazelcastAtom)G__21236).validator_atom);
    G__21236 = null;
    return RT.booleanCast(or__5516__auto__21264 ? (or__5516__auto__21264 ? Boolean.TRUE : Boolean.FALSE) : (Util.identical(((IFn)const__22.getRawRoot()).invoke(this), ((IFn)const__22.getRawRoot()).invoke(G__21236)) ? (and__5514__auto__21263 ? (and__5514__auto__21262 ? (and__5514__auto__21261 ? (Util.equiv(this.__extmap, ((HazelcastAtom)G__21236).__extmap) ? Boolean.TRUE : Boolean.FALSE) : (and__5514__auto__21261 ? Boolean.TRUE : Boolean.FALSE)) : (and__5514__auto__21262 ? Boolean.TRUE : Boolean.FALSE)) : (and__5514__auto__21263 ? Boolean.TRUE : Boolean.FALSE)) : null));
  }
  
  public boolean containsKey(Object k__7789__auto__) { k__7789__auto__ = null;
    this = null;
    return ((Boolean)((IFn)const__21.getRawRoot()).invoke(Util.identical(this, ((ILookup)this).valAt(k__7789__auto__, this)) ? Boolean.TRUE : Boolean.FALSE)).booleanValue(); }
  
  public IMapEntry entryAt(Object k__7791__auto__) {
    Object v__7792__auto__21265 = ((ILookup)this).valAt(k__7791__auto__, this);
    k__7791__auto__ = null;
    v__7792__auto__21265 = null;
    this = null;
    return (IMapEntry)(Util.identical(this, v__7792__auto__21265) ? null : MapEntry.create(k__7791__auto__, v__7792__auto__21265));
  }
  
  public ISeq seq() { this = null;
    return (ISeq)((IFn)const__19.getRawRoot()).invoke(((IFn)const__20.getRawRoot()).invoke(Tuple.create(MapEntry.create(const__9, this.hz_map), MapEntry.create(const__8, this.watches_atom), MapEntry.create(const__10, this.validator_atom)), this.__extmap)); }
  
  public Iterator iterator() { return (Iterator)new RecordIterator((ILookup)this, (IPersistentVector)const__18, (Iterator)RT.iter(this.__extmap)); }
  
  public IPersistentMap assoc(Object k__7796__auto__, Object G__21236) {
    Object pred__21238 = const__16.getRawRoot(), expr__21239 = k__7796__auto__;
    if (((IFn)pred__21238).invoke(const__9, expr__21239) != null) {
      if (((IFn)pred__21238).invoke(const__9, expr__21239) != Boolean.FALSE)
        G__21236 = null; 
    } else {
      ((IFn)pred__21238).invoke(const__9, expr__21239);
    } 
    if (((IFn)pred__21238).invoke(const__8, expr__21239) != null) {
      if (((IFn)pred__21238).invoke(const__8, expr__21239) != Boolean.FALSE)
        G__21236 = null; 
    } else {
      ((IFn)pred__21238).invoke(const__8, expr__21239);
    } 
    pred__21238 = null;
    expr__21239 = null;
    if (((IFn)pred__21238).invoke(const__10, expr__21239) != null) {
      if (((IFn)pred__21238).invoke(const__10, expr__21239) != Boolean.FALSE)
        G__21236 = null; 
    } else {
      ((IFn)pred__21238).invoke(const__10, expr__21239);
    } 
    k__7796__auto__ = null;
    G__21236 = null;
    return (IPersistentMap)new HazelcastAtom(this.hz_map, this.watches_atom, this.validator_atom, this.__meta, ((IFn)const__17.getRawRoot()).invoke(this.__extmap, k__7796__auto__, G__21236));
  }
  
  public IPersistentMap without(Object k__7798__auto__) { if (((IFn)const__7.getRawRoot()).invoke(const__11, k__7798__auto__) != null) {
      if (((IFn)const__7.getRawRoot()).invoke(const__11, k__7798__auto__) != Boolean.FALSE) {
        k__7798__auto__ = null;
        this = null;
      } 
    } else {
      ((IFn)const__7.getRawRoot()).invoke(const__11, k__7798__auto__);
    } 
    k__7798__auto__ = null;
    return (IPersistentMap)new HazelcastAtom(this.hz_map, this.watches_atom, this.validator_atom, this.__meta, ((IFn)const__15.getRawRoot()).invoke(((IFn)const__12.getRawRoot()).invoke(this.__extmap, k__7798__auto__))); }
  
  public int size() { this = null;
    return ((Counted)this).count(); }
  
  public boolean isEmpty() { return Util.equiv(0L, ((Counted)this).count()); }
  
  public boolean containsValue(Object v__7802__auto__) { v__7802__auto__ = null;
    return RT.booleanCast(((IFn)const__4.getRawRoot()).invoke(RT.set(new Object[] { v__7802__auto__ }, ), ((IFn)const__1.getRawRoot()).invoke(this))); }
  
  public Object get(Object k__7804__auto__) { k__7804__auto__ = null;
    return ((ILookup)this).valAt(k__7804__auto__); }
  
  public Object put(Object k__7806__auto__, Object v__7807__auto__) { throw (Throwable)new UnsupportedOperationException(); }
  
  public Object remove(Object k__7809__auto__) { throw (Throwable)new UnsupportedOperationException(); }
  
  public void putAll(Map m__7811__auto__) { throw (Throwable)new UnsupportedOperationException(); }
  
  public void clear() { throw (Throwable)new UnsupportedOperationException(); }
  
  public Set keySet() { this = null;
    return (Set)((IFn)const__0.getRawRoot()).invoke(((IFn)const__2.getRawRoot()).invoke(this)); }
  
  public Collection values() { this = null;
    return (Collection)((IFn)const__1.getRawRoot()).invoke(this); }
  
  public Set entrySet() { this = null;
    return (Set)((IFn)const__0.getRawRoot()).invoke(this); }
}
