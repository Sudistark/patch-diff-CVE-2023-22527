import byte_streams.Utils;
import byte_streams.graph.Type;
import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class byte_streams__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__11;
  
  public static final Var const__12;
  
  public static final Object const__13;
  
  public static final Var const__14;
  
  public static final AFn const__18;
  
  public static final Var const__19;
  
  public static final AFn const__22;
  
  public static final Var const__23;
  
  public static final AFn const__27;
  
  public static final Var const__28;
  
  public static final AFn const__31;
  
  public static final Var const__32;
  
  public static final AFn const__35;
  
  public static final Var const__36;
  
  public static final AFn const__39;
  
  public static final Var const__40;
  
  public static final AFn const__42;
  
  public static final Var const__43;
  
  public static final Var const__44;
  
  public static final AFn const__47;
  
  public static final Var const__48;
  
  public static final AFn const__50;
  
  public static final Var const__51;
  
  public static final AFn const__53;
  
  public static final Var const__54;
  
  public static final AFn const__57;
  
  public static final AFn const__60;
  
  public static final Var const__61;
  
  public static final AFn const__64;
  
  public static final Var const__65;
  
  public static final AFn const__68;
  
  public static final Var const__69;
  
  public static final AFn const__71;
  
  public static final Var const__72;
  
  public static final AFn const__75;
  
  public static final Var const__76;
  
  public static final AFn const__78;
  
  public static final AFn const__81;
  
  public static final Var const__82;
  
  public static final AFn const__85;
  
  public static final Object const__86;
  
  public static final Var const__87;
  
  public static final Var const__88;
  
  public static final Var const__89;
  
  public static final Object const__90;
  
  public static final Object const__91;
  
  public static final Object const__92;
  
  public static final Object const__93;
  
  public static final Object const__94;
  
  public static final Object const__95;
  
  public static final Object const__96;
  
  public static final Object const__97;
  
  public static final Object const__98;
  
  public static final Object const__99;
  
  public static final Object const__100;
  
  public static final Object const__101;
  
  public static final Object const__102;
  
  public static final Object const__103;
  
  public static final Object const__104;
  
  public static final Object const__105;
  
  public static final Object const__106;
  
  public static final Object const__107;
  
  public static final Object const__108;
  
  public static final Object const__109;
  
  public static final Object const__110;
  
  public static final Object const__111;
  
  public static final Object const__112;
  
  public static final Object const__113;
  
  public static final Object const__114;
  
  public static final Object const__117;
  
  public static final Object const__118;
  
  public static final Object const__119;
  
  public static final Object const__120;
  
  public static final Object const__121;
  
  public static final Object const__122;
  
  public static final Object const__123;
  
  public static final Object const__124;
  
  public static final Object const__125;
  
  public static final Object const__126;
  
  public static final Object const__127;
  
  public static final Object const__128;
  
  public static final Object const__129;
  
  public static final Object const__130;
  
  public static final Object const__131;
  
  public static final Object const__132;
  
  public static final Object const__134;
  
  public static final Object const__135;
  
  public static final Object const__137;
  
  public static final Object const__138;
  
  public static final Object const__139;
  
  public static final Object const__140;
  
  public static final Object const__141;
  
  public static final Object const__142;
  
  public static final Object const__143;
  
  public static final Object const__144;
  
  public static final Object const__145;
  
  public static final Object const__146;
  
  public static final Object const__148;
  
  public static final Object const__149;
  
  public static final Object const__150;
  
  public static final Object const__151;
  
  public static final Object const__152;
  
  public static final Object const__153;
  
  public static final Object const__154;
  
  public static final Object const__155;
  
  public static final Object const__156;
  
  public static final Object const__157;
  
  public static final Object const__158;
  
  public static final Object const__159;
  
  public static final Var const__160;
  
  public static final Var const__161;
  
  public static final AFn const__164;
  
  public static final AFn const__167;
  
  public static final AFn const__170;
  
  public static final Var const__171;
  
  public static final Var const__172;
  
  public static final Keyword const__173;
  
  public static final Var const__174;
  
  public static final Keyword const__175;
  
  public static final Var const__176;
  
  public static final AFn const__179;
  
  public static final Var const__180;
  
  public static final AFn const__184;
  
  public static final Var const__185;
  
  public static final AFn const__188;
  
  public static final Var const__189;
  
  public static final AFn const__192;
  
  public static final Var const__193;
  
  public static final AFn const__196;
  
  public static final Var const__197;
  
  public static final AFn const__200;
  
  public static final Var const__201;
  
  public static final AFn const__205;
  
  public static final Var const__206;
  
  public static final AFn const__209;
  
  public static final Var const__210;
  
  public static final AFn const__213;
  
  public static final Var const__214;
  
  public static final AFn const__217;
  
  public static final Var const__218;
  
  public static final AFn const__221;
  
  public static final Var const__222;
  
  public static final AFn const__225;
  
  public static final Var const__226;
  
  public static final AFn const__229;
  
  public static final Var const__230;
  
  public static final AFn const__233;
  
  public static final Var const__234;
  
  public static final AFn const__237;
  
  public static final Var const__238;
  
  public static final AFn const__241;
  
  public static final Var const__242;
  
  public static final AFn const__245;
  
  public static final Var const__246;
  
  public static final AFn const__249;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new byte_streams.fn__17921());
    const__3.setMeta((IPersistentMap)const__11);
    const__3
      
      .bindRoot(((IFn)const__12.getRawRoot()).invoke(Utils.byteArray(RT.intCast(0L))));
    const__14.setMeta((IPersistentMap)const__18);
    const__14.bindRoot(new byte_streams.seq_of());
    const__19.setMeta((IPersistentMap)const__22);
    const__19.bindRoot(new byte_streams.stream_of());
    const__23.setMeta((IPersistentMap)const__27);
    const__23.bindRoot(new byte_streams.type_descriptor());
    const__28.setMeta((IPersistentMap)const__31);
    const__28.bindRoot(new byte_streams.normalize_type_descriptor());
    const__32.setMeta((IPersistentMap)const__35);
    const__32.bindRoot(new byte_streams.def_conversion());
    ((Var)const__32)







































      
      .setMacro();
    const__36.setMeta((IPersistentMap)const__39);
    const__36.bindRoot(new byte_streams.def_transfer());
    ((Var)const__36)















      
      .setMacro();
    const__40.setMeta((IPersistentMap)const__42);
    const__40












      
      .bindRoot(((IFn)const__43.getRawRoot()).invoke(new byte_streams.fn__17949()));
    const__44.setMeta((IPersistentMap)const__47);
    const__48.setMeta((IPersistentMap)const__50);
    const__48





      
      .bindRoot(((IFn)const__43.getRawRoot()).invoke(new byte_streams.fn__17951()));
    const__51.setMeta((IPersistentMap)const__53);
    const__51



      
      .bindRoot(((IFn)const__43.getRawRoot()).invoke(new byte_streams.fn__17953()));
    const__54.setMeta((IPersistentMap)const__57);
    const__54.bindRoot(new byte_streams.conversion_path());
    const__44.setMeta((IPersistentMap)const__60);
    const__44.bindRoot(new byte_streams.convert());
    const__61.setMeta((IPersistentMap)const__64);
    const__61.bindRoot(new byte_streams.possible_conversions());
    const__65.setMeta((IPersistentMap)const__68);
    const__65.bindRoot(new byte_streams.default_transfer());
    const__69.setMeta((IPersistentMap)const__71);
    const__69


















      
      .bindRoot(((IFn)const__43.getRawRoot()).invoke(new byte_streams.this__17975()));
    const__72.setMeta((IPersistentMap)const__75);
    const__72.bindRoot(new byte_streams.transfer());
    const__76.setMeta((IPersistentMap)const__78);
    const__76.bindRoot(((IObj)new byte_streams.reify__18007(null)).withMeta((IPersistentMap)const__81));
    const__82.setMeta((IPersistentMap)const__85);
    const__82.bindRoot(new byte_streams.optimized_transfer_QMARK_());
    const__176.setMeta((IPersistentMap)const__179);
    const__176.bindRoot(new byte_streams.print_bytes());
    const__180.setMeta((IPersistentMap)const__184);
    const__180.bindRoot(new byte_streams.to_byte_buffer());
    const__185.setMeta((IPersistentMap)const__188);
    const__185.bindRoot(new byte_streams.to_byte_buffers());
    const__189.setMeta((IPersistentMap)const__192);
    const__189.bindRoot(new byte_streams.to_byte_array());
    const__193.setMeta((IPersistentMap)const__196);
    const__193.bindRoot(new byte_streams.to_byte_arrays());
    const__197.setMeta((IPersistentMap)const__200);
    const__197.bindRoot(new byte_streams.to_input_stream());
    const__201.setMeta((IPersistentMap)const__205);
    const__201.bindRoot(new byte_streams.to_data_input_stream());
    const__206.setMeta((IPersistentMap)const__209);
    const__206.bindRoot(new byte_streams.to_output_stream());
    const__210.setMeta((IPersistentMap)const__213);
    const__210.bindRoot(new byte_streams.to_char_sequence());
    const__214.setMeta((IPersistentMap)const__217);
    const__214.bindRoot(new byte_streams.to_readable_channel());
    const__218.setMeta((IPersistentMap)const__221);
    const__218.bindRoot(new byte_streams.to_string());
    const__222.setMeta((IPersistentMap)const__225);
    const__222.bindRoot(new byte_streams.to_reader());
    const__226.setMeta((IPersistentMap)const__229);
    const__226.bindRoot(new byte_streams.to_line_seq());
    const__230.setMeta((IPersistentMap)const__233);
    const__230.bindRoot(new byte_streams.to_byte_source());
    const__234.setMeta((IPersistentMap)const__237);
    const__234.bindRoot(new byte_streams.to_byte_sink());
    const__238.setMeta((IPersistentMap)const__241);
    const__238.bindRoot(new byte_streams.cmp_bufs());
    const__242.setMeta((IPersistentMap)const__245);
    const__242.bindRoot(new byte_streams.compare_bytes());
    const__246.setMeta((IPersistentMap)const__249);
    const__246.bindRoot(new byte_streams.bytes_EQ_());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "byte-streams");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("byte-streams", "byte-array");
    const__11 = (AFn)RT.map(new Object[] { RT.keyword(null, "const"), Boolean.TRUE, RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(59), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_streams.clj" });
    const__12 = (Var)RT.var("clojure.core", "class");
    const__13 = Long.valueOf(0L);
    const__14 = (Var)RT.var("byte-streams", "seq-of");
    const__18 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(61), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_streams.clj" });
    const__19 = (Var)RT.var("byte-streams", "stream-of");
    const__22 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(64), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_streams.clj" });
    const__23 = (Var)RT.var("byte-streams", "type-descriptor");
    const__27 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "doc"), "Returns a descriptor of the type of the given instance.", RT.keyword(null, "line"), Integer.valueOf(67), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_streams.clj" });
    const__28 = (Var)RT.var("byte-streams", "normalize-type-descriptor");
    const__31 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(89), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_streams.clj" });
    const__32 = (Var)RT.var("byte-streams", "def-conversion");
    const__35 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Tuple.create(Symbol.intern(null, "src"), Symbol.intern(null, "dst"), RT.keyword(null, "as"), Symbol.intern(null, "conversion")), Symbol.intern(null, "params"), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "doc"), "Defines a conversion from one type to another.", RT.keyword(null, "line"), Integer.valueOf(100), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_streams.clj" });
    const__36 = (Var)RT.var("byte-streams", "def-transfer");
    const__39 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Tuple.create(Symbol.intern(null, "src"), Symbol.intern(null, "dst")), Symbol.intern(null, "params"), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "doc"), "Defines a byte transfer from one type to another.", RT.keyword(null, "line"), Integer.valueOf(117), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_streams.clj" });
    const__40 = (Var)RT.var("byte-streams", "converter");
    const__42 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(130), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_streams.clj" });
    const__43 = (Var)RT.var("byte-streams.utils", "fast-memoize");
    const__44 = (Var)RT.var("byte-streams", "convert");
    const__47 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(135), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_streams.clj" });
    const__48 = (Var)RT.var("byte-streams", "seq-converter");
    const__50 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(137), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_streams.clj" });
    const__51 = (Var)RT.var("byte-streams", "stream-converter");
    const__53 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(142), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_streams.clj" });
    const__54 = (Var)RT.var("byte-streams", "conversion-path");
    const__57 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "src"), Symbol.intern(null, "dst")) })), RT.keyword(null, "line"), Integer.valueOf(147), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_streams.clj" });
    const__60 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "dst")), Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "dst"), Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "Converts `x`, if possible, into type `dst`, which can be either a class or protocol.  If no such conversion\n   is possible, an IllegalArgumentException is thrown.  If `x` is a stream, then the `src` type must be explicitly specified.\n\n   `options` is a map, whose available settings depend on what sort of transform is being performed:\n\n   `chunk-size` - if a stream is being transformed into a sequence of discrete chunks, `:chunk-size` describes the\n                  size of the chunks, which default to 4096 bytes.\n\n   `encoding`   - if a string is being encoded or decoded, `:encoding` describes the charset that is used, which\n                  defaults to 'UTF-8'\n\n   `direct?`    - if a byte-buffer is being allocated, `:direct?` describes whether it should be a direct buffer,\n                  defaulting to false", RT.keyword(null, "line"), Integer.valueOf(153), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_streams.clj" });
    const__61 = (Var)RT.var("byte-streams", "possible-conversions");
    const__64 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "src")) })), RT.keyword(null, "doc"), "Returns a list of all possible conversion targets from value.", RT.keyword(null, "line"), Integer.valueOf(202), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_streams.clj" });
    const__65 = (Var)RT.var("byte-streams", "default-transfer");
    const__68 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "source"), Symbol.intern(null, "sink"), RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "chunk-size")), RT.keyword(null, "or"), RT.map(new Object[] { Symbol.intern(null, "chunk-size"), Long.valueOf(1024L) }), RT.keyword(null, "as"), Symbol.intern(null, "options") })) })), RT.keyword(null, "line"), Integer.valueOf(232), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_streams.clj" });
    const__69 = (Var)RT.var("byte-streams", "transfer-fn");
    const__71 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(239), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_streams.clj" });
    const__72 = (Var)RT.var("byte-streams", "transfer");
    const__75 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "source"), Symbol.intern(null, "sink")), Tuple.create(Symbol.intern(null, "source"), Symbol.intern(null, "sink"), Symbol.intern(null, "options")), Tuple.create(Symbol.intern(null, "source"), Symbol.intern(null, "source-type"), Symbol.intern(null, "sink"), Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "Transfers, if possible, all bytes from `source` into `sink`.  If this cannot be accomplished, an IllegalArgumentException is\n   thrown.\n\n   `options` is a map whose available settings depends on the source and sink types:\n\n   `chunk-size` - if a stream is being transformed into a sequence of discrete chunks, `:chunk-size` describes the\n                  size of the chunks, which default to 4096 bytes.\n\n   `encoding`   - if a string is being encoded or decoded, `:encoding` describes the charset that is used, which\n                  defaults to 'UTF-8'\n\n   `append?`    - if a file is being written to, `:append?` determines whether the bytes will overwrite the existing content\n                  or be appended to the end of the file.  This defaults to true.\n\n   `close?`     - whether the sink should be closed once the transfer is done, defaults to true.", RT.keyword(null, "line"), Integer.valueOf(288), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_streams.clj" });
    const__76 = (Var)RT.var("byte-streams", "dev-null");
    const__78 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Web-scale.", RT.keyword(null, "line"), Integer.valueOf(315), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_streams.clj" });
    const__81 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(316), RT.keyword(null, "column"), Integer.valueOf(3) });
    const__82 = (Var)RT.var("byte-streams", "optimized-transfer?");
    const__85 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "type-descriptor"), Symbol.intern(null, "sink-type")) })), RT.keyword(null, "doc"), "Returns true if an optimized transfer function exists for the given source and sink objects.", RT.keyword(null, "line"), Integer.valueOf(319), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_streams.clj" });
    const__86 = RT.classForName("java.io.InputStream");
    const__87 = (Var)RT.var("clojure.core", "swap!");
    const__88 = (Var)RT.var("byte-streams", "conversions");
    const__89 = (Var)RT.var("byte-streams.graph", "assoc-conversion");
    const__90 = Type.create(RT.map(new Object[] { RT.keyword(null, "wrapper"), Symbol.intern(null, "stream"), RT.keyword(null, "type"), RT.classForName("[B") }));
    const__91 = Type.create(RT.map(new Object[] { RT.keyword(null, "wrapper"), null, RT.keyword(null, "type"), RT.classForName("java.io.InputStream") }));
    const__92 = Type.create(RT.map(new Object[] { RT.keyword(null, "type"), RT.classForName("java.nio.ByteBuffer"), RT.keyword(null, "wrapper"), Symbol.intern(null, "stream") }));
    const__93 = Type.create(RT.map(new Object[] { RT.keyword(null, "wrapper"), null, RT.keyword(null, "type"), RT.classForName("java.io.InputStream") }));
    const__94 = RT.classForName("java.nio.ByteBuffer");
    const__95 = Type.create(RT.map(new Object[] { RT.keyword(null, "wrapper"), null, RT.keyword(null, "type"), RT.classForName("[B") }));
    const__96 = Type.create(RT.map(new Object[] { RT.keyword(null, "type"), RT.classForName("java.nio.ByteBuffer"), RT.keyword(null, "wrapper"), null }));
    const__97 = Type.create(RT.map(new Object[] { RT.keyword(null, "wrapper"), null, RT.keyword(null, "type"), RT.classForName("[B") }));
    const__98 = Type.create(RT.map(new Object[] { RT.keyword(null, "wrapper"), null, RT.keyword(null, "type"), RT.classForName("java.io.InputStream") }));
    const__99 = Type.create(RT.map(new Object[] { RT.keyword(null, "type"), RT.classForName("java.nio.ByteBuffer"), RT.keyword(null, "wrapper"), null }));
  }
  
  public static void __init1() {
    const__100 = Type.create(RT.map(new Object[] { RT.keyword(null, "wrapper"), null, RT.keyword(null, "type"), RT.classForName("java.io.InputStream") }));
    const__101 = Type.create(RT.map(new Object[] { RT.keyword(null, "type"), RT.classForName("java.nio.ByteBuffer"), RT.keyword(null, "wrapper"), null }));
    const__102 = Type.create(RT.map(new Object[] { RT.keyword(null, "wrapper"), null, RT.keyword(null, "type"), RT.classForName("[B") }));
    const__103 = Long.valueOf(1L);
    const__104 = Type.create(RT.map(new Object[] { RT.keyword(null, "type"), RT.classForName("java.nio.ByteBuffer"), RT.keyword(null, "wrapper"), Symbol.intern(null, "seq") }));
    const__105 = Type.create(RT.map(new Object[] { RT.keyword(null, "type"), RT.classForName("java.nio.ByteBuffer"), RT.keyword(null, "wrapper"), null }));
    const__106 = Type.create(RT.map(new Object[] { RT.keyword(null, "type"), RT.classForName("java.nio.ByteBuffer"), RT.keyword(null, "wrapper"), null }));
    const__107 = Type.create(RT.map(new Object[] { RT.keyword(null, "type"), RT.classForName("java.nio.ByteBuffer"), RT.keyword(null, "wrapper"), Symbol.intern(null, "seq") }));
    const__108 = RT.classForName("java.nio.channels.ReadableByteChannel");
    const__109 = Type.create(RT.map(new Object[] { RT.keyword(null, "wrapper"), null, RT.keyword(null, "type"), RT.classForName("java.nio.channels.ReadableByteChannel") }));
    const__110 = Type.create(RT.map(new Object[] { RT.keyword(null, "wrapper"), null, RT.keyword(null, "type"), RT.classForName("java.io.InputStream") }));
    const__111 = Type.create(RT.map(new Object[] { RT.keyword(null, "wrapper"), null, RT.keyword(null, "type"), RT.classForName("java.nio.channels.ReadableByteChannel") }));
    const__112 = Type.create(RT.map(new Object[] { RT.keyword(null, "type"), RT.classForName("java.nio.ByteBuffer"), RT.keyword(null, "wrapper"), Symbol.intern(null, "seq") }));
    const__113 = Type.create(RT.map(new Object[] { RT.keyword(null, "wrapper"), null, RT.keyword(null, "type"), RT.classForName("java.io.InputStream") }));
    const__114 = Type.create(RT.map(new Object[] { RT.keyword(null, "wrapper"), null, RT.keyword(null, "type"), RT.classForName("java.nio.channels.ReadableByteChannel") }));
    const__117 = Type.create(RT.map(new Object[] { RT.keyword(null, "wrapper"), null, RT.keyword(null, "type"), RT.classForName("java.lang.String") }));
    const__118 = Type.create(RT.map(new Object[] { RT.keyword(null, "wrapper"), null, RT.keyword(null, "type"), RT.classForName("[B") }));
    const__119 = Long.valueOf(2L);
    const__120 = Type.create(RT.map(new Object[] { RT.keyword(null, "wrapper"), null, RT.keyword(null, "type"), RT.classForName("[B") }));
    const__121 = Type.create(RT.map(new Object[] { RT.keyword(null, "wrapper"), null, RT.keyword(null, "type"), RT.classForName("java.lang.String") }));
    const__122 = Type.create(RT.map(new Object[] { RT.keyword(null, "type"), RT.classForName("java.nio.ByteBuffer"), RT.keyword(null, "wrapper"), Symbol.intern(null, "seq") }));
    const__123 = Type.create(RT.map(new Object[] { RT.keyword(null, "wrapper"), null, RT.keyword(null, "type"), RT.classForName("java.nio.channels.ReadableByteChannel") }));
    const__124 = Double.valueOf(1.5D);
    const__125 = Type.create(RT.map(new Object[] { RT.keyword(null, "type"), RT.map(new Object[] { 
                RT.keyword(null, "on"), Symbol.intern(null, "byte_streams.protocols.ByteSource"), RT.keyword(null, "on-interface"), RT.classForName("byte_streams.protocols.ByteSource"), RT.keyword(null, "sigs"), RT.map(new Object[] { RT.keyword(null, "take-bytes!"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "take-bytes!")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Takes `n` bytes from the byte source.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "n"), Symbol.intern(null, "options")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "n"), Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "Takes `n` bytes from the byte source." }) }), RT.keyword(null, "var"), RT.var("byte-streams.protocols", "ByteSource"), RT.keyword(null, "method-map"), RT.map(new Object[] { RT.keyword(null, "take-bytes!"), RT.keyword(null, "take-bytes!") }), 
                RT.keyword(null, "method-builders"), RT.map(new Object[] { RT.var("byte-streams.protocols", "take-bytes!"), RT.readString("#=(byte_streams.protocols$fn__17261. )") }) }), RT.keyword(null, "wrapper"), Symbol.intern(null, "seq") }));
    const__126 = Type.create(RT.map(new Object[] { RT.keyword(null, "wrapper"), null, RT.keyword(null, "type"), RT.classForName("java.io.InputStream") }));
    const__127 = Double.valueOf(1.5D);
    const__128 = Type.create(RT.map(new Object[] { RT.keyword(null, "wrapper"), null, RT.keyword(null, "type"), RT.classForName("java.io.InputStream") }));
    const__129 = Type.create(RT.map(new Object[] { RT.keyword(null, "wrapper"), null, RT.keyword(null, "type"), RT.classForName("[B") }));
    const__130 = Double.valueOf(1.5D);
    const__131 = Type.create(RT.map(new Object[] { RT.keyword(null, "type"), RT.map(new Object[] { 
                RT.keyword(null, "on"), Symbol.intern(null, "byte_streams.protocols.ByteSource"), RT.keyword(null, "on-interface"), RT.classForName("byte_streams.protocols.ByteSource"), RT.keyword(null, "sigs"), RT.map(new Object[] { RT.keyword(null, "take-bytes!"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "take-bytes!")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Takes `n` bytes from the byte source.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "n"), Symbol.intern(null, "options")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "n"), Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "Takes `n` bytes from the byte source." }) }), RT.keyword(null, "var"), RT.var("byte-streams.protocols", "ByteSource"), RT.keyword(null, "method-map"), RT.map(new Object[] { RT.keyword(null, "take-bytes!"), RT.keyword(null, "take-bytes!") }), 
                RT.keyword(null, "method-builders"), RT.map(new Object[] { RT.var("byte-streams.protocols", "take-bytes!"), RT.readString("#=(byte_streams.protocols$fn__17261. )") }) }), RT.keyword(null, "wrapper"), null }));
    const__132 = Type.create(RT.map(new Object[] { RT.keyword(null, "wrapper"), null, RT.keyword(null, "type"), RT.classForName("[B") }));
    const__134 = Type.create(RT.map(new Object[] { RT.keyword(null, "type"), RT.map(new Object[] { 
                RT.keyword(null, "on"), Symbol.intern(null, "byte_streams.protocols.ByteSource"), RT.keyword(null, "on-interface"), RT.classForName("byte_streams.protocols.ByteSource"), RT.keyword(null, "sigs"), RT.map(new Object[] { RT.keyword(null, "take-bytes!"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "take-bytes!")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Takes `n` bytes from the byte source.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "n"), Symbol.intern(null, "options")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "n"), Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "Takes `n` bytes from the byte source." }) }), RT.keyword(null, "var"), RT.var("byte-streams.protocols", "ByteSource"), RT.keyword(null, "method-map"), RT.map(new Object[] { RT.keyword(null, "take-bytes!"), RT.keyword(null, "take-bytes!") }), 
                RT.keyword(null, "method-builders"), RT.map(new Object[] { RT.var("byte-streams.protocols", "take-bytes!"), RT.readString("#=(byte_streams.protocols$fn__17261. )") }) }), RT.keyword(null, "wrapper"), null }));
    const__135 = Type.create(RT.map(new Object[] { RT.keyword(null, "type"), RT.classForName("java.lang.CharSequence"), RT.keyword(null, "wrapper"), null }));
    const__137 = Type.create(RT.map(new Object[] { RT.keyword(null, "wrapper"), null, RT.keyword(null, "type"), RT.classForName("java.io.InputStream") }));
    const__138 = Type.create(RT.map(new Object[] { RT.keyword(null, "wrapper"), null, RT.keyword(null, "type"), RT.classForName("java.io.Reader") }));
    const__139 = Double.valueOf(1.5D);
    const__140 = Type.create(RT.map(new Object[] { RT.keyword(null, "wrapper"), null, RT.keyword(null, "type"), RT.classForName("java.io.Reader") }));
    const__141 = Type.create(RT.map(new Object[] { RT.keyword(null, "type"), RT.classForName("java.lang.CharSequence"), RT.keyword(null, "wrapper"), null }));
    const__142 = Double.valueOf(1.5D);
    const__143 = Type.create(RT.map(new Object[] { RT.keyword(null, "type"), RT.classForName("java.lang.CharSequence"), RT.keyword(null, "wrapper"), null }));
    const__144 = Type.create(RT.map(new Object[] { RT.keyword(null, "wrapper"), null, RT.keyword(null, "type"), RT.classForName("java.lang.String") }));
    const__145 = Type.create(RT.map(new Object[] { RT.keyword(null, "wrapper"), Symbol.intern(null, "seq"), RT.keyword(null, "type"), RT.classForName("java.lang.String") }));
    const__146 = Type.create(RT.map(new Object[] { RT.keyword(null, "wrapper"), null, RT.keyword(null, "type"), RT.classForName("java.lang.String") }));
    const__148 = Type.create(RT.map(new Object[] { RT.keyword(null, "wrapper"), null, RT.keyword(null, "type"), RT.classForName("java.io.File") }));
    const__149 = Type.create(RT.map(new Object[] { RT.keyword(null, "wrapper"), null, RT.keyword(null, "type"), RT.classForName("java.nio.channels.ReadableByteChannel") }));
    const__150 = RT.classForName("java.nio.channels.WritableByteChannel");
    const__151 = Type.create(RT.map(new Object[] { RT.keyword(null, "wrapper"), null, RT.keyword(null, "type"), RT.classForName("java.io.File") }));
    const__152 = Type.create(RT.map(new Object[] { RT.keyword(null, "wrapper"), null, RT.keyword(null, "type"), RT.classForName("java.nio.channels.WritableByteChannel") }));
    const__153 = Type.create(RT.map(new Object[] { RT.keyword(null, "wrapper"), null, RT.keyword(null, "type"), RT.classForName("java.io.File") }));
    const__154 = Type.create(RT.map(new Object[] { RT.keyword(null, "type"), RT.classForName("java.nio.ByteBuffer"), RT.keyword(null, "wrapper"), Symbol.intern(null, "seq") }));
    const__155 = RT.classForName("java.io.OutputStream");
    const__156 = Type.create(RT.map(new Object[] { RT.keyword(null, "wrapper"), null, RT.keyword(null, "type"), RT.classForName("java.io.OutputStream") }));
    const__157 = Type.create(RT.map(new Object[] { RT.keyword(null, "wrapper"), null, RT.keyword(null, "type"), RT.classForName("java.nio.channels.WritableByteChannel") }));
    const__158 = Type.create(RT.map(new Object[] { RT.keyword(null, "wrapper"), null, RT.keyword(null, "type"), RT.classForName("java.nio.channels.WritableByteChannel") }));
    const__159 = Type.create(RT.map(new Object[] { RT.keyword(null, "wrapper"), null, RT.keyword(null, "type"), RT.classForName("java.io.OutputStream") }));
    const__160 = (Var)RT.var("byte-streams", "src->dst->transfer");
    const__161 = (Var)RT.var("clojure.core", "assoc-in");
    const__164 = (AFn)Tuple.create(Type.create(RT.map(new Object[] { RT.keyword(null, "wrapper"), null, RT.keyword(null, "type"), RT.classForName("java.nio.channels.ReadableByteChannel") })), Type.create(RT.map(new Object[] { RT.keyword(null, "wrapper"), null, RT.keyword(null, "type"), RT.classForName("java.io.File") })));
    const__167 = (AFn)Tuple.create(Type.create(RT.map(new Object[] { RT.keyword(null, "wrapper"), null, RT.keyword(null, "type"), RT.classForName("java.io.File") })), Type.create(RT.map(new Object[] { RT.keyword(null, "wrapper"), null, RT.keyword(null, "type"), RT.classForName("java.nio.channels.WritableByteChannel") })));
    const__170 = (AFn)Tuple.create(Type.create(RT.map(new Object[] { RT.keyword(null, "wrapper"), null, RT.keyword(null, "type"), RT.classForName("java.io.InputStream") })), Type.create(RT.map(new Object[] { RT.keyword(null, "wrapper"), null, RT.keyword(null, "type"), RT.classForName("java.io.OutputStream") })));
    const__171 = (Var)RT.var("clojure.core", "extend");
    const__172 = (Var)RT.var("byte-streams.protocols", "ByteSink");
    const__173 = (Keyword)RT.keyword(null, "send-bytes!");
    const__174 = (Var)RT.var("byte-streams.protocols", "ByteSource");
    const__175 = (Keyword)RT.keyword(null, "take-bytes!");
    const__176 = (Var)RT.var("byte-streams", "print-bytes");
    const__179 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "bytes")) })), RT.keyword(null, "doc"), "Prints out the bytes in both hex and ASCII representations, 16 bytes per line.", RT.keyword(null, "line"), Integer.valueOf(709), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_streams.clj" });
    const__180 = (Var)RT.var("byte-streams", "to-byte-buffer");
    const__184 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "tag"), RT.classForName("java.nio.ByteBuffer"), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")), Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "Converts the object to a `java.nio.ByteBuffer`.", RT.keyword(null, "line"), Integer.valueOf(733), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "byte_streams.clj" });
    const__185 = (Var)RT.var("byte-streams", "to-byte-buffers");
    const__188 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")), Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "Converts the object to a sequence of `java.nio.ByteBuffer`.", RT.keyword(null, "line"), Integer.valueOf(744), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_streams.clj" });
    const__189 = (Var)RT.var("byte-streams", "to-byte-array");
    const__192 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "tag"), "[B", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")), Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "Converts the object to a byte-array.", RT.keyword(null, "line"), Integer.valueOf(751), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "byte_streams.clj" });
    const__193 = (Var)RT.var("byte-streams", "to-byte-arrays");
    const__196 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")), Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "Converts the object to a byte-array.", RT.keyword(null, "line"), Integer.valueOf(761), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_streams.clj" });
    const__197 = (Var)RT.var("byte-streams", "to-input-stream");
  }
  
  public static void __init2() {
    const__200 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "tag"), RT.classForName("java.io.InputStream"), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")), Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "Converts the object to a `java.io.InputStream`.", RT.keyword(null, "line"), Integer.valueOf(768), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "byte_streams.clj" });
    const__201 = (Var)RT.var("byte-streams", "to-data-input-stream");
    const__205 = (AFn)RT.map(new Object[] { RT.keyword(null, "tag"), RT.classForName("java.io.DataInputStream"), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")), Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "options")) })), RT.keyword(null, "line"), Integer.valueOf(778), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_streams.clj" });
    const__206 = (Var)RT.var("byte-streams", "to-output-stream");
    const__209 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "tag"), RT.classForName("java.io.InputStream"), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")), Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "Converts the object to a `java.io.OutputStream`.", RT.keyword(null, "line"), Integer.valueOf(786), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "byte_streams.clj" });
    const__210 = (Var)RT.var("byte-streams", "to-char-sequence");
    const__213 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "tag"), RT.classForName("java.lang.CharSequence"), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")), Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "Converts to the object to a `java.lang.CharSequence`.", RT.keyword(null, "line"), Integer.valueOf(793), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "byte_streams.clj" });
    const__214 = (Var)RT.var("byte-streams", "to-readable-channel");
    const__217 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "tag"), RT.classForName("java.nio.channels.ReadableByteChannel"), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")), Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "Converts the object to a `java.nio.ReadableByteChannel`", RT.keyword(null, "line"), Integer.valueOf(802), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "byte_streams.clj" });
    const__218 = (Var)RT.var("byte-streams", "to-string");
    const__221 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "tag"), RT.classForName("java.lang.String"), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")), Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "Converts the object to a string.", RT.keyword(null, "line"), Integer.valueOf(809), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "byte_streams.clj" });
    const__222 = (Var)RT.var("byte-streams", "to-reader");
    const__225 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")), Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "Converts the object to a java.io.Reader.", RT.keyword(null, "line"), Integer.valueOf(819), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_streams.clj" });
    const__226 = (Var)RT.var("byte-streams", "to-line-seq");
    const__229 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")), Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "Converts the object to a lazy sequence of newline-delimited strings.", RT.keyword(null, "line"), Integer.valueOf(826), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_streams.clj" });
    const__230 = (Var)RT.var("byte-streams", "to-byte-source");
    const__233 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")), Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "Converts the object to something that satisfies `ByteSource`.", RT.keyword(null, "line"), Integer.valueOf(842), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_streams.clj" });
    const__234 = (Var)RT.var("byte-streams", "to-byte-sink");
    const__237 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")), Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "Converts the object to something that satisfies `ByteSink`.", RT.keyword(null, "line"), Integer.valueOf(849), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_streams.clj" });
    const__238 = (Var)RT.var("byte-streams", "cmp-bufs");
    const__241 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(((IObj)Symbol.intern(null, "a'")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "ByteBuffer") })), ((IObj)Symbol.intern(null, "b'")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "ByteBuffer") })))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "long") })) })), RT.keyword(null, "line"), Integer.valueOf(858), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_streams.clj" });
    const__242 = (Var)RT.var("byte-streams", "compare-bytes");
    const__245 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "a"), Symbol.intern(null, "b"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "long") })) })), RT.keyword(null, "doc"), "Returns a comparison result for two byte streams.", RT.keyword(null, "line"), Integer.valueOf(889), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_streams.clj" });
    const__246 = (Var)RT.var("byte-streams", "bytes=");
    const__249 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "a"), Symbol.intern(null, "b")) })), RT.keyword(null, "doc"), "Returns true if the two byte streams are equivalent.", RT.keyword(null, "line"), Integer.valueOf(916), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_streams.clj" });
  }
  
  static  {
    __init0();
    __init1();
    __init2();
    Compiler.pushNSandLoader(RT.classForName("byte_streams__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
