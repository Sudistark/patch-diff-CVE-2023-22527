package org.jsoup.parser;

import org.jsoup.helper.Validate;
import org.jsoup.internal.StringUtil;

public class TokenQueue {
  private String queue;
  
  private int pos;
  
  private static final char ESC = '\\';
  
  public TokenQueue(String data) {
    this.pos = 0;
    Validate.notNull(data);
    this.queue = data;
  }
  
  public boolean isEmpty() { return (remainingLength() == 0); }
  
  private int remainingLength() { return this.queue.length() - this.pos; }
  
  public void addFirst(String seq) {
    this.queue = seq + this.queue.substring(this.pos);
    this.pos = 0;
  }
  
  public boolean matches(String seq) { return this.queue.regionMatches(true, this.pos, seq, 0, seq.length()); }
  
  public boolean matchesAny(String... seq) {
    for (String s : seq) {
      if (matches(s))
        return true; 
    } 
    return false;
  }
  
  public boolean matchesAny(char... seq) {
    if (isEmpty())
      return false; 
    for (char c : seq) {
      if (this.queue.charAt(this.pos) == c)
        return true; 
    } 
    return false;
  }
  
  public boolean matchChomp(String seq) {
    if (matches(seq)) {
      this.pos += seq.length();
      return true;
    } 
    return false;
  }
  
  public boolean matchesWhitespace() { return (!isEmpty() && StringUtil.isWhitespace(this.queue.charAt(this.pos))); }
  
  public boolean matchesWord() { return (!isEmpty() && Character.isLetterOrDigit(this.queue.charAt(this.pos))); }
  
  public void advance() { if (!isEmpty())
      this.pos++;  }
  
  public char consume() { return this.queue.charAt(this.pos++); }
  
  public void consume(String seq) {
    if (!matches(seq))
      throw new IllegalStateException("Queue did not match expected sequence"); 
    int len = seq.length();
    if (len > remainingLength())
      throw new IllegalStateException("Queue not long enough to consume sequence"); 
    this.pos += len;
  }
  
  public String consumeTo(String seq) {
    int offset = this.queue.indexOf(seq, this.pos);
    if (offset != -1) {
      String consumed = this.queue.substring(this.pos, offset);
      this.pos += consumed.length();
      return consumed;
    } 
    return remainder();
  }
  
  public String consumeToIgnoreCase(String seq) {
    int start = this.pos;
    String first = seq.substring(0, 1);
    boolean canScan = first.toLowerCase().equals(first.toUpperCase());
    while (!isEmpty() && 
      !matches(seq)) {
      if (canScan) {
        int skip = this.queue.indexOf(first, this.pos) - this.pos;
        if (skip == 0) {
          this.pos++;
          continue;
        } 
        if (skip < 0) {
          this.pos = this.queue.length();
          continue;
        } 
        this.pos += skip;
        continue;
      } 
      this.pos++;
    } 
    return this.queue.substring(start, this.pos);
  }
  
  public String consumeToAny(String... seq) {
    int start = this.pos;
    while (!isEmpty() && !matchesAny(seq))
      this.pos++; 
    return this.queue.substring(start, this.pos);
  }
  
  public String chompTo(String seq) {
    String data = consumeTo(seq);
    matchChomp(seq);
    return data;
  }
  
  public String chompToIgnoreCase(String seq) {
    String data = consumeToIgnoreCase(seq);
    matchChomp(seq);
    return data;
  }
  
  public String chompBalanced(char open, char close) { // Byte code:
    //   0: iconst_m1
    //   1: istore_3
    //   2: iconst_m1
    //   3: istore #4
    //   5: iconst_0
    //   6: istore #5
    //   8: iconst_0
    //   9: istore #6
    //   11: iconst_0
    //   12: istore #7
    //   14: iconst_0
    //   15: istore #8
    //   17: iconst_0
    //   18: istore #9
    //   20: aload_0
    //   21: invokevirtual isEmpty : ()Z
    //   24: ifeq -> 30
    //   27: goto -> 210
    //   30: aload_0
    //   31: invokevirtual consume : ()C
    //   34: istore #10
    //   36: iload #6
    //   38: bipush #92
    //   40: if_icmpeq -> 162
    //   43: iload #10
    //   45: bipush #39
    //   47: if_icmpne -> 76
    //   50: iload #10
    //   52: iload_1
    //   53: if_icmpeq -> 76
    //   56: iload #8
    //   58: ifne -> 76
    //   61: iload #7
    //   63: ifne -> 70
    //   66: iconst_1
    //   67: goto -> 71
    //   70: iconst_0
    //   71: istore #7
    //   73: goto -> 106
    //   76: iload #10
    //   78: bipush #34
    //   80: if_icmpne -> 106
    //   83: iload #10
    //   85: iload_1
    //   86: if_icmpeq -> 106
    //   89: iload #7
    //   91: ifne -> 106
    //   94: iload #8
    //   96: ifne -> 103
    //   99: iconst_1
    //   100: goto -> 104
    //   103: iconst_0
    //   104: istore #8
    //   106: iload #7
    //   108: ifne -> 121
    //   111: iload #8
    //   113: ifne -> 121
    //   116: iload #9
    //   118: ifeq -> 128
    //   121: iload #10
    //   123: istore #6
    //   125: goto -> 205
    //   128: iload #10
    //   130: iload_1
    //   131: if_icmpne -> 150
    //   134: iinc #5, 1
    //   137: iload_3
    //   138: iconst_m1
    //   139: if_icmpne -> 185
    //   142: aload_0
    //   143: getfield pos : I
    //   146: istore_3
    //   147: goto -> 185
    //   150: iload #10
    //   152: iload_2
    //   153: if_icmpne -> 185
    //   156: iinc #5, -1
    //   159: goto -> 185
    //   162: iload #10
    //   164: bipush #81
    //   166: if_icmpne -> 175
    //   169: iconst_1
    //   170: istore #9
    //   172: goto -> 185
    //   175: iload #10
    //   177: bipush #69
    //   179: if_icmpne -> 185
    //   182: iconst_0
    //   183: istore #9
    //   185: iload #5
    //   187: ifle -> 201
    //   190: iload #6
    //   192: ifeq -> 201
    //   195: aload_0
    //   196: getfield pos : I
    //   199: istore #4
    //   201: iload #10
    //   203: istore #6
    //   205: iload #5
    //   207: ifgt -> 20
    //   210: iload #4
    //   212: iflt -> 228
    //   215: aload_0
    //   216: getfield queue : Ljava/lang/String;
    //   219: iload_3
    //   220: iload #4
    //   222: invokevirtual substring : (II)Ljava/lang/String;
    //   225: goto -> 230
    //   228: ldc ''
    //   230: astore #10
    //   232: iload #5
    //   234: ifle -> 265
    //   237: new java/lang/StringBuilder
    //   240: dup
    //   241: invokespecial <init> : ()V
    //   244: ldc 'Did not find balanced marker at ''
    //   246: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   249: aload #10
    //   251: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   254: ldc '''
    //   256: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   259: invokevirtual toString : ()Ljava/lang/String;
    //   262: invokestatic fail : (Ljava/lang/String;)V
    //   265: aload #10
    //   267: areturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #230	-> 0
    //   #231	-> 2
    //   #232	-> 5
    //   #233	-> 8
    //   #234	-> 11
    //   #235	-> 14
    //   #236	-> 17
    //   #239	-> 20
    //   #240	-> 30
    //   #241	-> 36
    //   #242	-> 43
    //   #243	-> 61
    //   #244	-> 76
    //   #245	-> 94
    //   #246	-> 106
    //   #247	-> 121
    //   #248	-> 125
    //   #251	-> 128
    //   #252	-> 134
    //   #253	-> 137
    //   #254	-> 142
    //   #256	-> 150
    //   #257	-> 156
    //   #258	-> 162
    //   #259	-> 169
    //   #260	-> 175
    //   #261	-> 182
    //   #264	-> 185
    //   #265	-> 195
    //   #266	-> 201
    //   #267	-> 205
    //   #268	-> 210
    //   #269	-> 232
    //   #270	-> 237
    //   #272	-> 265
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   36	169	10	c	C
    //   0	268	0	this	Lorg/jsoup/parser/TokenQueue;
    //   0	268	1	open	C
    //   0	268	2	close	C
    //   2	266	3	start	I
    //   5	263	4	end	I
    //   8	260	5	depth	I
    //   11	257	6	last	C
    //   14	254	7	inSingleQuote	Z
    //   17	251	8	inDoubleQuote	Z
    //   20	248	9	inRegexQE	Z
    //   232	36	10	out	Ljava/lang/String; }
  
  public static String unescape(String in) {
    StringBuilder out = StringUtil.borrowBuilder();
    char last = Character.MIN_VALUE;
    for (char c : in.toCharArray()) {
      if (c == '\\') {
        if (last == '\\') {
          out.append(c);
          c = Character.MIN_VALUE;
        } 
      } else {
        out.append(c);
      } 
      last = c;
    } 
    return StringUtil.releaseBuilder(out);
  }
  
  public static String escapeCssIdentifier(String in) {
    StringBuilder out = StringUtil.borrowBuilder();
    TokenQueue q = new TokenQueue(in);
    while (!q.isEmpty()) {
      if (q.matchesCssIdentifier(ElementSelectorChars)) {
        out.append(q.consume());
        continue;
      } 
      out.append('\\').append(q.consume());
    } 
    return StringUtil.releaseBuilder(out);
  }
  
  public boolean consumeWhitespace() {
    boolean seen = false;
    while (matchesWhitespace()) {
      this.pos++;
      seen = true;
    } 
    return seen;
  }
  
  public String consumeWord() {
    int start = this.pos;
    while (matchesWord())
      this.pos++; 
    return this.queue.substring(start, this.pos);
  }
  
  public String consumeElementSelector() { return consumeEscapedCssIdentifier(ElementSelectorChars); }
  
  private static final String[] ElementSelectorChars = { "*|", "|", "_", "-" };
  
  public String consumeCssIdentifier() { return consumeEscapedCssIdentifier(CssIdentifierChars); }
  
  private static final String[] CssIdentifierChars = { "-", "_" };
  
  private String consumeEscapedCssIdentifier(String... matches) {
    int start = this.pos;
    boolean escaped = false;
    while (!isEmpty()) {
      if (this.queue.charAt(this.pos) == '\\' && remainingLength() > 1) {
        escaped = true;
        this.pos += 2;
        continue;
      } 
      if (matchesCssIdentifier(matches))
        this.pos++; 
    } 
    String consumed = this.queue.substring(start, this.pos);
    return escaped ? unescape(consumed) : consumed;
  }
  
  private boolean matchesCssIdentifier(String... matches) { return (matchesWord() || matchesAny(matches)); }
  
  public String remainder() {
    String remainder = this.queue.substring(this.pos);
    this.pos = this.queue.length();
    return remainder;
  }
  
  public String toString() { return this.queue.substring(this.pos); }
}
