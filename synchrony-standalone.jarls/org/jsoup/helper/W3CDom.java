package org.jsoup.helper;

import java.io.StringWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import javax.annotation.Nullable;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathException;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.jsoup.internal.StringUtil;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.select.NodeTraversor;
import org.jsoup.select.Selector;
import org.w3c.dom.DOMImplementation;
import org.w3c.dom.Document;
import org.w3c.dom.DocumentType;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

public class W3CDom {
  public static final String SourceProperty = "jsoupSource";
  
  private static final String ContextProperty = "jsoupContextSource";
  
  private static final String ContextNodeProperty = "jsoupContextNode";
  
  public static final String XPathFactoryProperty = "javax.xml.xpath.XPathFactory:jsoup";
  
  protected DocumentBuilderFactory factory;
  
  private boolean namespaceAware;
  
  public W3CDom() {
    this.namespaceAware = true;
    this.factory = DocumentBuilderFactory.newInstance();
    this.factory.setNamespaceAware(true);
  }
  
  public boolean namespaceAware() { return this.namespaceAware; }
  
  public W3CDom namespaceAware(boolean namespaceAware) {
    this.namespaceAware = namespaceAware;
    this.factory.setNamespaceAware(namespaceAware);
    return this;
  }
  
  public static Document convert(Document in) { return (new W3CDom()).fromJsoup(in); }
  
  public static String asString(Document doc, @Nullable Map<String, String> properties) {
    try {
      DOMSource domSource = new DOMSource(doc);
      StringWriter writer = new StringWriter();
      StreamResult result = new StreamResult(writer);
      TransformerFactory tf = TransformerFactory.newInstance();
      Transformer transformer = tf.newTransformer();
      if (properties != null)
        transformer.setOutputProperties(propertiesFromMap(properties)); 
      if (doc.getDoctype() != null) {
        DocumentType doctype = doc.getDoctype();
        if (!StringUtil.isBlank(doctype.getPublicId()))
          transformer.setOutputProperty("doctype-public", doctype.getPublicId()); 
        if (!StringUtil.isBlank(doctype.getSystemId())) {
          transformer.setOutputProperty("doctype-system", doctype.getSystemId());
        } else if (doctype.getName().equalsIgnoreCase("html") && 
          StringUtil.isBlank(doctype.getPublicId()) && 
          StringUtil.isBlank(doctype.getSystemId())) {
          transformer.setOutputProperty("doctype-system", "about:legacy-compat");
        } 
      } 
      transformer.transform(domSource, result);
      return writer.toString();
    } catch (TransformerException e) {
      throw new IllegalStateException(e);
    } 
  }
  
  static Properties propertiesFromMap(Map<String, String> map) {
    Properties props = new Properties();
    props.putAll(map);
    return props;
  }
  
  public static HashMap<String, String> OutputHtml() { return methodMap("html"); }
  
  public static HashMap<String, String> OutputXml() { return methodMap("xml"); }
  
  private static HashMap<String, String> methodMap(String method) {
    HashMap<String, String> map = new HashMap<String, String>();
    map.put("method", method);
    return map;
  }
  
  public Document fromJsoup(Document in) { return fromJsoup(in); }
  
  public Document fromJsoup(Element in) {
    Validate.notNull(in);
    try {
      DocumentBuilder builder = this.factory.newDocumentBuilder();
      DOMImplementation impl = builder.getDOMImplementation();
      Document out = builder.newDocument();
      Document inDoc = in.ownerDocument();
      DocumentType doctype = (inDoc != null) ? inDoc.documentType() : null;
      if (doctype != null) {
        DocumentType documentType = impl.createDocumentType(doctype.name(), doctype.publicId(), doctype.systemId());
        out.appendChild(documentType);
      } 
      out.setXmlStandalone(true);
      Element context = (in instanceof Document) ? in.child(0) : in;
      out.setUserData("jsoupContextSource", context, null);
      convert((inDoc != null) ? inDoc : in, out);
      return out;
    } catch (ParserConfigurationException e) {
      throw new IllegalStateException(e);
    } 
  }
  
  public void convert(Document in, Document out) { convert(in, out); }
  
  public void convert(Element in, Document out) {
    W3CBuilder builder = new W3CBuilder(out);
    W3CBuilder.access$002(builder, this.namespaceAware);
    Document inDoc = in.ownerDocument();
    if (inDoc != null) {
      if (!StringUtil.isBlank(inDoc.location()))
        out.setDocumentURI(inDoc.location()); 
      W3CBuilder.access$102(builder, inDoc.outputSettings().syntax());
    } 
    Element rootEl = (in instanceof Document) ? in.child(0) : in;
    NodeTraversor.traverse(builder, rootEl);
  }
  
  public NodeList selectXpath(String xpath, Document doc) { return selectXpath(xpath, doc); }
  
  public NodeList selectXpath(String xpath, Node contextNode) {
    NodeList nodeList;
    Validate.notEmptyParam(xpath, "xpath");
    Validate.notNullParam(contextNode, "contextNode");
    try {
      String property = System.getProperty("javax.xml.xpath.XPathFactory:jsoup");
      XPathFactory xPathFactory = (property != null) ? XPathFactory.newInstance("jsoup") : XPathFactory.newInstance();
      XPathExpression expression = xPathFactory.newXPath().compile(xpath);
      nodeList = (NodeList)expression.evaluate(contextNode, XPathConstants.NODESET);
      Validate.notNull(nodeList);
    } catch (XPathExpressionException|javax.xml.xpath.XPathFactoryConfigurationException e) {
      throw new Selector.SelectorParseException("Could not evaluate XPath query [%s]: %s", new Object[] { xpath, e.getMessage() });
    } 
    return nodeList;
  }
  
  public <T extends Node> List<T> sourceNodes(NodeList nodeList, Class<T> nodeType) {
    Validate.notNull(nodeList);
    Validate.notNull(nodeType);
    List<T> nodes = new ArrayList<T>(nodeList.getLength());
    for (int i = 0; i < nodeList.getLength(); i++) {
      Node node = nodeList.item(i);
      Object source = node.getUserData("jsoupSource");
      if (nodeType.isInstance(source))
        nodes.add((Node)nodeType.cast(source)); 
    } 
    return nodes;
  }
  
  public Node contextNode(Document wDoc) { return (Node)wDoc.getUserData("jsoupContextNode"); }
  
  public String asString(Document doc) { return asString(doc, null); }
}
