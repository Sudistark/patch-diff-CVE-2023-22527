package org.jsoup.nodes;

import java.io.IOException;
import javax.annotation.Nullable;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;

public class Comment extends LeafNode {
  public Comment(String data) { this.value = data; }
  
  public String nodeName() { return "#comment"; }
  
  public String getData() { return coreValue(); }
  
  public Comment setData(String data) {
    coreValue(data);
    return this;
  }
  
  void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
    if (out.prettyPrint() && ((isEffectivelyFirst() && this.parentNode instanceof Element && ((Element)this.parentNode).tag().formatAsBlock()) || out.outline()))
      indent(accum, depth, out); 
    accum
      .append("<!--")
      .append(getData())
      .append("-->");
  }
  
  void outerHtmlTail(Appendable accum, int depth, Document.OutputSettings out) throws IOException {}
  
  public String toString() { return outerHtml(); }
  
  public Comment clone() { return (Comment)super.clone(); }
  
  public boolean isXmlDeclaration() {
    String data = getData();
    return isXmlDeclarationData(data);
  }
  
  private static boolean isXmlDeclarationData(String data) { return (data.length() > 1 && (data.startsWith("!") || data.startsWith("?"))); }
  
  @Nullable
  public XmlDeclaration asXmlDeclaration() {
    String data = getData();
    XmlDeclaration decl = null;
    String declContent = data.substring(1, data.length() - 1);
    if (isXmlDeclarationData(declContent))
      return null; 
    String fragment = "<" + declContent + ">";
    Document doc = Parser.htmlParser().settings(ParseSettings.preserveCase).parseInput(fragment, baseUri());
    if (doc.body().children().size() > 0) {
      Element el = doc.body().child(0);
      decl = new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(el.tagName()), data.startsWith("!"));
      decl.attributes().addAll(el.attributes());
    } 
    return decl;
  }
}
