package org.jsoup.nodes;

import java.io.IOException;
import java.nio.charset.CharsetEncoder;
import java.util.HashMap;
import javax.annotation.Nullable;
import org.jsoup.SerializationException;
import org.jsoup.helper.Validate;
import org.jsoup.internal.StringUtil;
import org.jsoup.parser.CharacterReader;
import org.jsoup.parser.Parser;

public class Entities {
  private static final int empty = -1;
  
  private static final String emptyName = "";
  
  static final int codepointRadix = 36;
  
  private static final char[] codeDelims = { ',', ';' };
  
  private static final HashMap<String, String> multipoints = new HashMap();
  
  @Nullable
  private static Document.OutputSettings DefaultOutput;
  
  public static boolean isNamedEntity(String name) { return (EscapeMode.extended.codepointForName(name) != -1); }
  
  public static boolean isBaseNamedEntity(String name) { return (EscapeMode.base.codepointForName(name) != -1); }
  
  public static String getByName(String name) {
    String val = (String)multipoints.get(name);
    if (val != null)
      return val; 
    int codepoint = EscapeMode.extended.codepointForName(name);
    if (codepoint != -1)
      return new String(new int[] { codepoint }, 0, 1); 
    return "";
  }
  
  public static int codepointsForName(String name, int[] codepoints) {
    String val = (String)multipoints.get(name);
    if (val != null) {
      codepoints[0] = val.codePointAt(0);
      codepoints[1] = val.codePointAt(1);
      return 2;
    } 
    int codepoint = EscapeMode.extended.codepointForName(name);
    if (codepoint != -1) {
      codepoints[0] = codepoint;
      return 1;
    } 
    return 0;
  }
  
  public static String escape(String string, Document.OutputSettings out) {
    if (string == null)
      return ""; 
    StringBuilder accum = StringUtil.borrowBuilder();
    try {
      escape(accum, string, out, false, false, false, false);
    } catch (IOException e) {
      throw new SerializationException(e);
    } 
    return StringUtil.releaseBuilder(accum);
  }
  
  public static String escape(String string) {
    if (DefaultOutput == null)
      DefaultOutput = new Document.OutputSettings(); 
    return escape(string, DefaultOutput);
  }
  
  static void escape(Appendable accum, String string, Document.OutputSettings out, boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite, boolean trimTrailing) throws IOException { // Byte code:
    //   0: iconst_0
    //   1: istore #7
    //   3: iconst_0
    //   4: istore #8
    //   6: aload_2
    //   7: invokevirtual escapeMode : ()Lorg/jsoup/nodes/Entities$EscapeMode;
    //   10: astore #9
    //   12: aload_2
    //   13: invokevirtual encoder : ()Ljava/nio/charset/CharsetEncoder;
    //   16: astore #10
    //   18: aload_2
    //   19: getfield coreCharset : Lorg/jsoup/nodes/Entities$CoreCharset;
    //   22: astore #11
    //   24: aload_1
    //   25: invokevirtual length : ()I
    //   28: istore #12
    //   30: iconst_0
    //   31: istore #14
    //   33: iconst_0
    //   34: istore #15
    //   36: iload #15
    //   38: iload #12
    //   40: if_icmpge -> 481
    //   43: aload_1
    //   44: iload #15
    //   46: invokevirtual codePointAt : (I)I
    //   49: istore #13
    //   51: iload #4
    //   53: ifeq -> 134
    //   56: iload #13
    //   58: invokestatic isWhitespace : (I)Z
    //   61: ifeq -> 111
    //   64: iload #5
    //   66: ifeq -> 77
    //   69: iload #8
    //   71: ifne -> 77
    //   74: goto -> 468
    //   77: iload #7
    //   79: ifeq -> 85
    //   82: goto -> 468
    //   85: iload #6
    //   87: ifeq -> 96
    //   90: iconst_1
    //   91: istore #14
    //   93: goto -> 468
    //   96: aload_0
    //   97: bipush #32
    //   99: invokeinterface append : (C)Ljava/lang/Appendable;
    //   104: pop
    //   105: iconst_1
    //   106: istore #7
    //   108: goto -> 468
    //   111: iconst_0
    //   112: istore #7
    //   114: iconst_1
    //   115: istore #8
    //   117: iload #14
    //   119: ifeq -> 134
    //   122: aload_0
    //   123: bipush #32
    //   125: invokeinterface append : (C)Ljava/lang/Appendable;
    //   130: pop
    //   131: iconst_0
    //   132: istore #14
    //   134: iload #13
    //   136: ldc 65536
    //   138: if_icmpge -> 424
    //   141: iload #13
    //   143: i2c
    //   144: istore #16
    //   146: iload #16
    //   148: lookupswitch default -> 382, 9 -> 370, 10 -> 370, 13 -> 370, 34 -> 342, 38 -> 224, 60 -> 268, 62 -> 314, 160 -> 236
    //   224: aload_0
    //   225: ldc '&amp;'
    //   227: invokeinterface append : (Ljava/lang/CharSequence;)Ljava/lang/Appendable;
    //   232: pop
    //   233: goto -> 421
    //   236: aload #9
    //   238: getstatic org/jsoup/nodes/Entities$EscapeMode.xhtml : Lorg/jsoup/nodes/Entities$EscapeMode;
    //   241: if_acmpeq -> 256
    //   244: aload_0
    //   245: ldc '&nbsp;'
    //   247: invokeinterface append : (Ljava/lang/CharSequence;)Ljava/lang/Appendable;
    //   252: pop
    //   253: goto -> 421
    //   256: aload_0
    //   257: ldc '&#xa0;'
    //   259: invokeinterface append : (Ljava/lang/CharSequence;)Ljava/lang/Appendable;
    //   264: pop
    //   265: goto -> 421
    //   268: iload_3
    //   269: ifeq -> 290
    //   272: aload #9
    //   274: getstatic org/jsoup/nodes/Entities$EscapeMode.xhtml : Lorg/jsoup/nodes/Entities$EscapeMode;
    //   277: if_acmpeq -> 290
    //   280: aload_2
    //   281: invokevirtual syntax : ()Lorg/jsoup/nodes/Document$OutputSettings$Syntax;
    //   284: getstatic org/jsoup/nodes/Document$OutputSettings$Syntax.xml : Lorg/jsoup/nodes/Document$OutputSettings$Syntax;
    //   287: if_acmpne -> 302
    //   290: aload_0
    //   291: ldc '&lt;'
    //   293: invokeinterface append : (Ljava/lang/CharSequence;)Ljava/lang/Appendable;
    //   298: pop
    //   299: goto -> 421
    //   302: aload_0
    //   303: iload #16
    //   305: invokeinterface append : (C)Ljava/lang/Appendable;
    //   310: pop
    //   311: goto -> 421
    //   314: iload_3
    //   315: ifne -> 330
    //   318: aload_0
    //   319: ldc '&gt;'
    //   321: invokeinterface append : (Ljava/lang/CharSequence;)Ljava/lang/Appendable;
    //   326: pop
    //   327: goto -> 421
    //   330: aload_0
    //   331: iload #16
    //   333: invokeinterface append : (C)Ljava/lang/Appendable;
    //   338: pop
    //   339: goto -> 421
    //   342: iload_3
    //   343: ifeq -> 358
    //   346: aload_0
    //   347: ldc '&quot;'
    //   349: invokeinterface append : (Ljava/lang/CharSequence;)Ljava/lang/Appendable;
    //   354: pop
    //   355: goto -> 421
    //   358: aload_0
    //   359: iload #16
    //   361: invokeinterface append : (C)Ljava/lang/Appendable;
    //   366: pop
    //   367: goto -> 421
    //   370: aload_0
    //   371: iload #16
    //   373: invokeinterface append : (C)Ljava/lang/Appendable;
    //   378: pop
    //   379: goto -> 421
    //   382: iload #16
    //   384: bipush #32
    //   386: if_icmplt -> 401
    //   389: aload #11
    //   391: iload #16
    //   393: aload #10
    //   395: invokestatic canEncode : (Lorg/jsoup/nodes/Entities$CoreCharset;CLjava/nio/charset/CharsetEncoder;)Z
    //   398: ifne -> 412
    //   401: aload_0
    //   402: aload #9
    //   404: iload #13
    //   406: invokestatic appendEncoded : (Ljava/lang/Appendable;Lorg/jsoup/nodes/Entities$EscapeMode;I)V
    //   409: goto -> 421
    //   412: aload_0
    //   413: iload #16
    //   415: invokeinterface append : (C)Ljava/lang/Appendable;
    //   420: pop
    //   421: goto -> 468
    //   424: new java/lang/String
    //   427: dup
    //   428: iload #13
    //   430: invokestatic toChars : (I)[C
    //   433: invokespecial <init> : ([C)V
    //   436: astore #16
    //   438: aload #10
    //   440: aload #16
    //   442: invokevirtual canEncode : (Ljava/lang/CharSequence;)Z
    //   445: ifeq -> 460
    //   448: aload_0
    //   449: aload #16
    //   451: invokeinterface append : (Ljava/lang/CharSequence;)Ljava/lang/Appendable;
    //   456: pop
    //   457: goto -> 468
    //   460: aload_0
    //   461: aload #9
    //   463: iload #13
    //   465: invokestatic appendEncoded : (Ljava/lang/Appendable;Lorg/jsoup/nodes/Entities$EscapeMode;I)V
    //   468: iload #15
    //   470: iload #13
    //   472: invokestatic charCount : (I)I
    //   475: iadd
    //   476: istore #15
    //   478: goto -> 36
    //   481: return
    // Line number table:
    //   Java source line number -> byte code offset
    //   #170	-> 0
    //   #171	-> 3
    //   #172	-> 6
    //   #173	-> 12
    //   #174	-> 18
    //   #175	-> 24
    //   #178	-> 30
    //   #179	-> 33
    //   #180	-> 43
    //   #182	-> 51
    //   #183	-> 56
    //   #184	-> 64
    //   #185	-> 77
    //   #186	-> 85
    //   #187	-> 90
    //   #188	-> 93
    //   #190	-> 96
    //   #191	-> 105
    //   #192	-> 108
    //   #194	-> 111
    //   #195	-> 114
    //   #196	-> 117
    //   #197	-> 122
    //   #198	-> 131
    //   #203	-> 134
    //   #204	-> 141
    //   #206	-> 146
    //   #208	-> 224
    //   #209	-> 233
    //   #211	-> 236
    //   #212	-> 244
    //   #214	-> 256
    //   #215	-> 265
    //   #218	-> 268
    //   #219	-> 290
    //   #221	-> 302
    //   #222	-> 311
    //   #224	-> 314
    //   #225	-> 318
    //   #227	-> 330
    //   #228	-> 339
    //   #230	-> 342
    //   #231	-> 346
    //   #233	-> 358
    //   #234	-> 367
    //   #239	-> 370
    //   #240	-> 379
    //   #242	-> 382
    //   #243	-> 401
    //   #245	-> 412
    //   #247	-> 421
    //   #248	-> 424
    //   #249	-> 438
    //   #250	-> 448
    //   #252	-> 460
    //   #179	-> 468
    //   #255	-> 481
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   146	275	16	c	C
    //   438	30	16	c	Ljava/lang/String;
    //   51	430	13	codePoint	I
    //   36	445	15	offset	I
    //   0	482	0	accum	Ljava/lang/Appendable;
    //   0	482	1	string	Ljava/lang/String;
    //   0	482	2	out	Lorg/jsoup/nodes/Document$OutputSettings;
    //   0	482	3	inAttribute	Z
    //   0	482	4	normaliseWhite	Z
    //   0	482	5	stripLeadingWhite	Z
    //   0	482	6	trimTrailing	Z
    //   3	479	7	lastWasWhite	Z
    //   6	476	8	reachedNonWhite	Z
    //   12	470	9	escapeMode	Lorg/jsoup/nodes/Entities$EscapeMode;
    //   18	464	10	encoder	Ljava/nio/charset/CharsetEncoder;
    //   24	458	11	coreCharset	Lorg/jsoup/nodes/Entities$CoreCharset;
    //   30	452	12	length	I
    //   33	449	14	skipped	Z }
  
  private static void appendEncoded(Appendable accum, EscapeMode escapeMode, int codePoint) throws IOException {
    String name = escapeMode.nameForCodepoint(codePoint);
    if (!"".equals(name)) {
      accum.append('&').append(name).append(';');
    } else {
      accum.append("&#x").append(Integer.toHexString(codePoint)).append(';');
    } 
  }
  
  public static String unescape(String string) { return unescape(string, false); }
  
  static String unescape(String string, boolean strict) { return Parser.unescapeEntities(string, strict); }
  
  private static boolean canEncode(CoreCharset charset, char c, CharsetEncoder fallback) {
    switch (null.$SwitchMap$org$jsoup$nodes$Entities$CoreCharset[charset.ordinal()]) {
      case 1:
        return (c < '');
      case 2:
        return true;
    } 
    return fallback.canEncode(c);
  }
  
  private static void load(EscapeMode e, String pointsData, int size) {
    EscapeMode.access$102(e, new String[size]);
    EscapeMode.access$202(e, new int[size]);
    EscapeMode.access$302(e, new int[size]);
    EscapeMode.access$402(e, new String[size]);
    int i = 0;
    reader = new CharacterReader(pointsData);
    try {
      while (!reader.isEmpty()) {
        int cp2;
        String name = reader.consumeTo('=');
        reader.advance();
        int cp1 = Integer.parseInt(reader.consumeToAny(codeDelims), 36);
        char codeDelim = reader.current();
        reader.advance();
        if (codeDelim == ',') {
          cp2 = Integer.parseInt(reader.consumeTo(';'), 36);
          reader.advance();
        } else {
          cp2 = -1;
        } 
        String indexS = reader.consumeTo('&');
        int index = Integer.parseInt(indexS, 36);
        reader.advance();
        EscapeMode.access$100(e)[i] = name;
        EscapeMode.access$200(e)[i] = cp1;
        EscapeMode.access$300(e)[index] = cp1;
        EscapeMode.access$400(e)[index] = name;
        if (cp2 != -1)
          multipoints.put(name, new String(new int[] { cp1, cp2 }, 0, 2)); 
        i++;
      } 
      Validate.isTrue((i == size), "Unexpected count of entities loaded");
    } finally {
      reader.close();
    } 
  }
}
