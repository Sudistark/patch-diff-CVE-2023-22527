package org.objectweb.asm;

public class Label {
  public Object info;
  
  int a;
  
  int b;
  
  int c;
  
  private int d;
  
  private int[] e;
  
  int f;
  
  int g;
  
  Frame h;
  
  Label i;
  
  Edge j;
  
  Label k;
  
  public int getOffset() {
    if ((this.a & 0x2) == 0)
      throw new IllegalStateException("Label offset position has not been resolved yet"); 
    return this.c;
  }
  
  void a(MethodWriter paramMethodWriter, ByteVector paramByteVector, int paramInt, boolean paramBoolean) {
    if ((this.a & 0x2) == 0) {
      if (paramBoolean) {
        a(-1 - paramInt, paramByteVector.b);
        paramByteVector.putInt(-1);
      } else {
        a(paramInt, paramByteVector.b);
        paramByteVector.putShort(-1);
      } 
    } else if (paramBoolean) {
      paramByteVector.putInt(this.c - paramInt);
    } else {
      paramByteVector.putShort(this.c - paramInt);
    } 
  }
  
  private void a(int paramInt1, int paramInt2) {
    if (this.e == null)
      this.e = new int[6]; 
    if (this.d >= this.e.length) {
      int[] arrayOfInt = new int[this.e.length + 6];
      System.arraycopy(this.e, 0, arrayOfInt, 0, this.e.length);
      this.e = arrayOfInt;
    } 
    this.e[this.d++] = paramInt1;
    this.e[this.d++] = paramInt2;
  }
  
  boolean a(MethodWriter paramMethodWriter, int paramInt, byte[] paramArrayOfByte) {
    boolean bool = false;
    this.a |= 0x2;
    this.c = paramInt;
    byte b1 = 0;
    while (b1 < this.d) {
      int m = this.e[b1++];
      int n = this.e[b1++];
      if (m >= 0) {
        int i2 = paramInt - m;
        if (i2 < -32768 || i2 > 32767) {
          byte b2 = paramArrayOfByte[n - 1] & 0xFF;
          if (b2 <= 168) {
            paramArrayOfByte[n - 1] = (byte)(b2 + 49);
          } else {
            paramArrayOfByte[n - 1] = (byte)(b2 + 20);
          } 
          bool = true;
        } 
        paramArrayOfByte[n++] = (byte)(i2 >>> 8);
        paramArrayOfByte[n] = (byte)i2;
        continue;
      } 
      int i1 = paramInt + m + 1;
      paramArrayOfByte[n++] = (byte)(i1 >>> 24);
      paramArrayOfByte[n++] = (byte)(i1 >>> 16);
      paramArrayOfByte[n++] = (byte)(i1 >>> 8);
      paramArrayOfByte[n] = (byte)i1;
    } 
    return bool;
  }
  
  Label a() { return (this.h == null) ? this : this.h.b; }
  
  boolean a(long paramLong) { return ((this.a & 0x400) != 0) ? (((this.e[(int)(paramLong >>> 32)] & (int)paramLong) != 0)) : false; }
  
  boolean a(Label paramLabel) {
    if ((this.a & 0x400) == 0 || (paramLabel.a & 0x400) == 0)
      return false; 
    for (byte b1 = 0; b1 < this.e.length; b1++) {
      if ((this.e[b1] & paramLabel.e[b1]) != 0)
        return true; 
    } 
    return false;
  }
  
  void a(long paramLong, int paramInt) {
    if ((this.a & 0x400) == 0) {
      this.a |= 0x400;
      this.e = new int[(paramInt - 1) / 32 + 1];
    } 
    this.e[(int)(paramLong >>> 32)] = this.e[(int)(paramLong >>> 32)] | (int)paramLong;
  }
  
  void b(Label paramLabel, long paramLong, int paramInt) {
    Label label = this;
    while (label != null) {
      Label label1 = label;
      label = label1.k;
      label1.k = null;
      if (paramLabel != null) {
        if ((label1.a & 0x800) != 0)
          continue; 
        label1.a |= 0x800;
        if ((label1.a & 0x100) != 0 && !label1.a(paramLabel)) {
          Edge edge1 = new Edge();
          edge1.a = label1.f;
          edge1.b = paramLabel.j.b;
          edge1.c = label1.j;
          label1.j = edge1;
        } 
      } else {
        if (label1.a(paramLong))
          continue; 
        label1.a(paramLong, paramInt);
      } 
      for (Edge edge = label1.j; edge != null; edge = edge.c) {
        if (((label1.a & 0x80) == 0 || edge != label1.j.c) && edge.b.k == null) {
          edge.b.k = label;
          label = edge.b;
        } 
      } 
    } 
  }
  
  public String toString() { return "L" + System.identityHashCode(this); }
}
