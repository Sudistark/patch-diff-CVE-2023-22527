package org.objectweb.asm;

public class ClassWriter extends ClassVisitor {
  public static final int COMPUTE_MAXS = 1;
  
  public static final int COMPUTE_FRAMES = 2;
  
  static final byte[] a;
  
  ClassReader M;
  
  int b;
  
  int c = 1;
  
  final ByteVector d = new ByteVector();
  
  Item[] e = new Item[256];
  
  int f = (int)(0.75D * this.e.length);
  
  final Item g = new Item();
  
  final Item h = new Item();
  
  final Item i = new Item();
  
  final Item j = new Item();
  
  Item[] H;
  
  private short G;
  
  private int k;
  
  private int l;
  
  String I;
  
  private int m;
  
  private int n;
  
  private int o;
  
  private int[] p;
  
  private int q;
  
  private ByteVector r;
  
  private int s;
  
  private int t;
  
  private AnnotationWriter u;
  
  private AnnotationWriter v;
  
  private Attribute w;
  
  private int x;
  
  private ByteVector y;
  
  int z;
  
  ByteVector A;
  
  FieldWriter B;
  
  FieldWriter C;
  
  MethodWriter D;
  
  MethodWriter E;
  
  private boolean K;
  
  private boolean J;
  
  boolean L;
  
  public ClassWriter(int paramInt) {
    super(262144);
    this.K = ((paramInt & true) != 0);
    this.J = ((paramInt & 0x2) != 0);
  }
  
  public ClassWriter(ClassReader paramClassReader, int paramInt) {
    this(paramInt);
    paramClassReader.a(this);
    this.M = paramClassReader;
  }
  
  public final void visit(int paramInt1, int paramInt2, String paramString1, String paramString2, String paramString3, String[] paramArrayOfString) {
    this.b = paramInt1;
    this.k = paramInt2;
    this.l = newClass(paramString1);
    this.I = paramString1;
    if (paramString2 != null)
      this.m = newUTF8(paramString2); 
    this.n = (paramString3 == null) ? 0 : newClass(paramString3);
    if (paramArrayOfString != null && paramArrayOfString.length > 0) {
      this.o = paramArrayOfString.length;
      this.p = new int[this.o];
      for (byte b1 = 0; b1 < this.o; b1++)
        this.p[b1] = newClass(paramArrayOfString[b1]); 
    } 
  }
  
  public final void visitSource(String paramString1, String paramString2) {
    if (paramString1 != null)
      this.q = newUTF8(paramString1); 
    if (paramString2 != null)
      this.r = (new ByteVector()).putUTF8(paramString2); 
  }
  
  public final void visitOuterClass(String paramString1, String paramString2, String paramString3) {
    this.s = newClass(paramString1);
    if (paramString2 != null && paramString3 != null)
      this.t = newNameType(paramString2, paramString3); 
  }
  
  public final AnnotationVisitor visitAnnotation(String paramString, boolean paramBoolean) {
    ByteVector byteVector = new ByteVector();
    byteVector.putShort(newUTF8(paramString)).putShort(0);
    AnnotationWriter annotationWriter = new AnnotationWriter(this, true, byteVector, byteVector, 2);
    if (paramBoolean) {
      annotationWriter.g = this.u;
      this.u = annotationWriter;
    } else {
      annotationWriter.g = this.v;
      this.v = annotationWriter;
    } 
    return annotationWriter;
  }
  
  public final void visitAttribute(Attribute paramAttribute) {
    paramAttribute.a = this.w;
    this.w = paramAttribute;
  }
  
  public final void visitInnerClass(String paramString1, String paramString2, String paramString3, int paramInt) {
    if (this.y == null)
      this.y = new ByteVector(); 
    this.x++;
    this.y.putShort((paramString1 == null) ? 0 : newClass(paramString1));
    this.y.putShort((paramString2 == null) ? 0 : newClass(paramString2));
    this.y.putShort((paramString3 == null) ? 0 : newUTF8(paramString3));
    this.y.putShort(paramInt);
  }
  
  public final FieldVisitor visitField(int paramInt, String paramString1, String paramString2, String paramString3, Object paramObject) { return new FieldWriter(this, paramInt, paramString1, paramString2, paramString3, paramObject); }
  
  public final MethodVisitor visitMethod(int paramInt, String paramString1, String paramString2, String paramString3, String[] paramArrayOfString) { return new MethodWriter(this, paramInt, paramString1, paramString2, paramString3, paramArrayOfString, this.K, this.J); }
  
  public final void visitEnd() {}
  
  public byte[] toByteArray() {
    if (this.c > 65535)
      throw new RuntimeException("Class file too large!"); 
    int i1 = 24 + 2 * this.o;
    byte b1 = 0;
    FieldWriter fieldWriter;
    for (fieldWriter = this.B; fieldWriter != null; fieldWriter = (FieldWriter)fieldWriter.fv) {
      b1++;
      i1 += fieldWriter.a();
    } 
    byte b2 = 0;
    MethodWriter methodWriter;
    for (methodWriter = this.D; methodWriter != null; methodWriter = (MethodWriter)methodWriter.mv) {
      b2++;
      i1 += methodWriter.a();
    } 
    int i2 = 0;
    if (this.A != null) {
      i2++;
      i1 += 8 + this.A.b;
      newUTF8("BootstrapMethods");
    } 
    if (this.m != 0) {
      i2++;
      i1 += 8;
      newUTF8("Signature");
    } 
    if (this.q != 0) {
      i2++;
      i1 += 8;
      newUTF8("SourceFile");
    } 
    if (this.r != null) {
      i2++;
      i1 += this.r.b + 4;
      newUTF8("SourceDebugExtension");
    } 
    if (this.s != 0) {
      i2++;
      i1 += 10;
      newUTF8("EnclosingMethod");
    } 
    if ((this.k & 0x20000) != 0) {
      i2++;
      i1 += 6;
      newUTF8("Deprecated");
    } 
    if ((this.k & 0x1000) != 0 && ((this.b & 0xFFFF) < 49 || (this.k & 0x40000) != 0)) {
      i2++;
      i1 += 6;
      newUTF8("Synthetic");
    } 
    if (this.y != null) {
      i2++;
      i1 += 8 + this.y.b;
      newUTF8("InnerClasses");
    } 
    if (this.u != null) {
      i2++;
      i1 += 8 + this.u.a();
      newUTF8("RuntimeVisibleAnnotations");
    } 
    if (this.v != null) {
      i2++;
      i1 += 8 + this.v.a();
      newUTF8("RuntimeInvisibleAnnotations");
    } 
    if (this.w != null) {
      i2 += this.w.a();
      i1 += this.w.a(this, null, 0, -1, -1);
    } 
    i1 += this.d.b;
    ByteVector byteVector = new ByteVector(i1);
    byteVector.putInt(-889275714).putInt(this.b);
    byteVector.putShort(this.c).putByteArray(this.d.a, 0, this.d.b);
    int i3 = 0x60000 | (this.k & 0x40000) / 64;
    byteVector.putShort(this.k & (i3 ^ 0xFFFFFFFF)).putShort(this.l).putShort(this.n);
    byteVector.putShort(this.o);
    int i4;
    for (i4 = 0; i4 < this.o; i4++)
      byteVector.putShort(this.p[i4]); 
    byteVector.putShort(b1);
    for (fieldWriter = this.B; fieldWriter != null; fieldWriter = (FieldWriter)fieldWriter.fv)
      fieldWriter.a(byteVector); 
    byteVector.putShort(b2);
    for (methodWriter = this.D; methodWriter != null; methodWriter = (MethodWriter)methodWriter.mv)
      methodWriter.a(byteVector); 
    byteVector.putShort(i2);
    if (this.A != null) {
      byteVector.putShort(newUTF8("BootstrapMethods"));
      byteVector.putInt(this.A.b + 2).putShort(this.z);
      byteVector.putByteArray(this.A.a, 0, this.A.b);
    } 
    if (this.m != 0)
      byteVector.putShort(newUTF8("Signature")).putInt(2).putShort(this.m); 
    if (this.q != 0)
      byteVector.putShort(newUTF8("SourceFile")).putInt(2).putShort(this.q); 
    if (this.r != null) {
      i4 = this.r.b - 2;
      byteVector.putShort(newUTF8("SourceDebugExtension")).putInt(i4);
      byteVector.putByteArray(this.r.a, 2, i4);
    } 
    if (this.s != 0) {
      byteVector.putShort(newUTF8("EnclosingMethod")).putInt(4);
      byteVector.putShort(this.s).putShort(this.t);
    } 
    if ((this.k & 0x20000) != 0)
      byteVector.putShort(newUTF8("Deprecated")).putInt(0); 
    if ((this.k & 0x1000) != 0 && ((this.b & 0xFFFF) < 49 || (this.k & 0x40000) != 0))
      byteVector.putShort(newUTF8("Synthetic")).putInt(0); 
    if (this.y != null) {
      byteVector.putShort(newUTF8("InnerClasses"));
      byteVector.putInt(this.y.b + 2).putShort(this.x);
      byteVector.putByteArray(this.y.a, 0, this.y.b);
    } 
    if (this.u != null) {
      byteVector.putShort(newUTF8("RuntimeVisibleAnnotations"));
      this.u.a(byteVector);
    } 
    if (this.v != null) {
      byteVector.putShort(newUTF8("RuntimeInvisibleAnnotations"));
      this.v.a(byteVector);
    } 
    if (this.w != null)
      this.w.a(this, null, 0, -1, -1, byteVector); 
    if (this.L) {
      this.u = null;
      this.v = null;
      this.w = null;
      this.x = 0;
      this.y = null;
      this.z = 0;
      this.A = null;
      this.B = null;
      this.C = null;
      this.D = null;
      this.E = null;
      this.K = false;
      this.J = true;
      this.L = false;
      (new ClassReader(byteVector.a)).accept(this, 4);
      return toByteArray();
    } 
    return byteVector.a;
  }
  
  Item a(Object paramObject) {
    if (paramObject instanceof Integer) {
      int i1 = ((Integer)paramObject).intValue();
      return a(i1);
    } 
    if (paramObject instanceof Byte) {
      int i1 = ((Byte)paramObject).intValue();
      return a(i1);
    } 
    if (paramObject instanceof Character) {
      char c1 = ((Character)paramObject).charValue();
      return a(c1);
    } 
    if (paramObject instanceof Short) {
      int i1 = ((Short)paramObject).intValue();
      return a(i1);
    } 
    if (paramObject instanceof Boolean) {
      byte b1 = ((Boolean)paramObject).booleanValue() ? 1 : 0;
      return a(b1);
    } 
    if (paramObject instanceof Float) {
      float f1 = ((Float)paramObject).floatValue();
      return a(f1);
    } 
    if (paramObject instanceof Long) {
      long l1 = ((Long)paramObject).longValue();
      return a(l1);
    } 
    if (paramObject instanceof Double) {
      double d1 = ((Double)paramObject).doubleValue();
      return a(d1);
    } 
    if (paramObject instanceof String)
      return b((String)paramObject); 
    if (paramObject instanceof Type) {
      Type type = (Type)paramObject;
      int i1 = type.getSort();
      return (i1 == 10) ? a(type.getInternalName()) : ((i1 == 11) ? c(type.getDescriptor()) : a(type.getDescriptor()));
    } 
    if (paramObject instanceof Handle) {
      Handle handle = (Handle)paramObject;
      return a(handle.a, handle.b, handle.c, handle.d);
    } 
    throw new IllegalArgumentException("value " + paramObject);
  }
  
  public int newConst(Object paramObject) { return (a(paramObject)).a; }
  
  public int newUTF8(String paramString) {
    this.g.a(1, paramString, null, null);
    Item item = a(this.g);
    if (item == null) {
      this.d.putByte(1).putUTF8(paramString);
      item = new Item(this.c++, this.g);
      b(item);
    } 
    return item.a;
  }
  
  Item a(String paramString) {
    this.h.a(7, paramString, null, null);
    Item item = a(this.h);
    if (item == null) {
      this.d.b(7, newUTF8(paramString));
      item = new Item(this.c++, this.h);
      b(item);
    } 
    return item;
  }
  
  public int newClass(String paramString) { return (a(paramString)).a; }
  
  Item c(String paramString) {
    this.h.a(16, paramString, null, null);
    Item item = a(this.h);
    if (item == null) {
      this.d.b(16, newUTF8(paramString));
      item = new Item(this.c++, this.h);
      b(item);
    } 
    return item;
  }
  
  public int newMethodType(String paramString) { return (c(paramString)).a; }
  
  Item a(int paramInt, String paramString1, String paramString2, String paramString3) {
    this.j.a(20 + paramInt, paramString1, paramString2, paramString3);
    Item item = a(this.j);
    if (item == null) {
      if (paramInt <= 4) {
        b(15, paramInt, newField(paramString1, paramString2, paramString3));
      } else {
        b(15, paramInt, newMethod(paramString1, paramString2, paramString3, (paramInt == 9)));
      } 
      item = new Item(this.c++, this.j);
      b(item);
    } 
    return item;
  }
  
  public int newHandle(int paramInt, String paramString1, String paramString2, String paramString3) { return (a(paramInt, paramString1, paramString2, paramString3)).a; }
  
  Item a(String paramString1, String paramString2, Handle paramHandle, Object... paramVarArgs) {
    int i5;
    ByteVector byteVector = this.A;
    if (byteVector == null)
      byteVector = this.A = new ByteVector(); 
    int i1 = byteVector.b;
    int i2 = paramHandle.hashCode();
    byteVector.putShort(newHandle(paramHandle.a, paramHandle.b, paramHandle.c, paramHandle.d));
    int i3 = paramVarArgs.length;
    byteVector.putShort(i3);
    for (byte b1 = 0; b1 < i3; b1++) {
      Object object = paramVarArgs[b1];
      i2 ^= object.hashCode();
      byteVector.putShort(newConst(object));
    } 
    byte[] arrayOfByte = byteVector.a;
    int i4 = 2 + i3 << 1;
    i2 &= Integer.MAX_VALUE;
    Item item = this.e[i2 % this.e.length];
    label33: while (item != null) {
      if (item.b != 33 || item.j != i2) {
        item = item.k;
        continue;
      } 
      i5 = item.c;
      for (int i6 = 0; i6 < i4; i6++) {
        if (arrayOfByte[i1 + i6] != arrayOfByte[i5 + i6]) {
          item = item.k;
          continue label33;
        } 
      } 
    } 
    if (item != null) {
      i5 = item.a;
      byteVector.b = i1;
    } else {
      i5 = this.z++;
      item = new Item(i5);
      item.a(i1, i2);
      b(item);
    } 
    this.i.a(paramString1, paramString2, i5);
    item = a(this.i);
    if (item == null) {
      a(18, i5, newNameType(paramString1, paramString2));
      item = new Item(this.c++, this.i);
      b(item);
    } 
    return item;
  }
  
  public int newInvokeDynamic(String paramString1, String paramString2, Handle paramHandle, Object... paramVarArgs) { return (a(paramString1, paramString2, paramHandle, paramVarArgs)).a; }
  
  Item a(String paramString1, String paramString2, String paramString3) {
    this.i.a(9, paramString1, paramString2, paramString3);
    Item item = a(this.i);
    if (item == null) {
      a(9, newClass(paramString1), newNameType(paramString2, paramString3));
      item = new Item(this.c++, this.i);
      b(item);
    } 
    return item;
  }
  
  public int newField(String paramString1, String paramString2, String paramString3) { return (a(paramString1, paramString2, paramString3)).a; }
  
  Item a(String paramString1, String paramString2, String paramString3, boolean paramBoolean) {
    byte b1 = paramBoolean ? 11 : 10;
    this.i.a(b1, paramString1, paramString2, paramString3);
    Item item = a(this.i);
    if (item == null) {
      a(b1, newClass(paramString1), newNameType(paramString2, paramString3));
      item = new Item(this.c++, this.i);
      b(item);
    } 
    return item;
  }
  
  public int newMethod(String paramString1, String paramString2, String paramString3, boolean paramBoolean) { return (a(paramString1, paramString2, paramString3, paramBoolean)).a; }
  
  Item a(int paramInt) {
    this.g.a(paramInt);
    Item item = a(this.g);
    if (item == null) {
      this.d.putByte(3).putInt(paramInt);
      item = new Item(this.c++, this.g);
      b(item);
    } 
    return item;
  }
  
  Item a(float paramFloat) {
    this.g.a(paramFloat);
    Item item = a(this.g);
    if (item == null) {
      this.d.putByte(4).putInt(this.g.c);
      item = new Item(this.c++, this.g);
      b(item);
    } 
    return item;
  }
  
  Item a(long paramLong) {
    this.g.a(paramLong);
    Item item = a(this.g);
    if (item == null) {
      this.d.putByte(5).putLong(paramLong);
      item = new Item(this.c, this.g);
      this.c += 2;
      b(item);
    } 
    return item;
  }
  
  Item a(double paramDouble) {
    this.g.a(paramDouble);
    Item item = a(this.g);
    if (item == null) {
      this.d.putByte(6).putLong(this.g.d);
      item = new Item(this.c, this.g);
      this.c += 2;
      b(item);
    } 
    return item;
  }
  
  private Item b(String paramString) {
    this.h.a(8, paramString, null, null);
    Item item = a(this.h);
    if (item == null) {
      this.d.b(8, newUTF8(paramString));
      item = new Item(this.c++, this.h);
      b(item);
    } 
    return item;
  }
  
  public int newNameType(String paramString1, String paramString2) { return (a(paramString1, paramString2)).a; }
  
  Item a(String paramString1, String paramString2) {
    this.h.a(12, paramString1, paramString2, null);
    Item item = a(this.h);
    if (item == null) {
      a(12, newUTF8(paramString1), newUTF8(paramString2));
      item = new Item(this.c++, this.h);
      b(item);
    } 
    return item;
  }
  
  int c(String paramString) {
    this.g.a(30, paramString, null, null);
    Item item = a(this.g);
    if (item == null)
      item = c(this.g); 
    return item.a;
  }
  
  int a(String paramString, int paramInt) {
    this.g.b = 31;
    this.g.c = paramInt;
    this.g.g = paramString;
    this.g.j = 0x7FFFFFFF & 31 + paramString.hashCode() + paramInt;
    Item item = a(this.g);
    if (item == null)
      item = c(this.g); 
    return item.a;
  }
  
  private Item c(Item paramItem) {
    this.G = (short)(this.G + 1);
    Item item = new Item(this.G, this.g);
    b(item);
    if (this.H == null)
      this.H = new Item[16]; 
    if (this.G == this.H.length) {
      Item[] arrayOfItem = new Item[2 * this.H.length];
      System.arraycopy(this.H, 0, arrayOfItem, 0, this.H.length);
      this.H = arrayOfItem;
    } 
    this.H[this.G] = item;
    return item;
  }
  
  int a(int paramInt1, int paramInt2) {
    this.h.b = 32;
    this.h.d = paramInt1 | paramInt2 << 32;
    this.h.j = 0x7FFFFFFF & 32 + paramInt1 + paramInt2;
    Item item = a(this.h);
    if (item == null) {
      String str1 = (this.H[paramInt1]).g;
      String str2 = (this.H[paramInt2]).g;
      this.h.c = c(getCommonSuperClass(str1, str2));
      item = new Item(0, this.h);
      b(item);
    } 
    return item.c;
  }
  
  protected String getCommonSuperClass(String paramString1, String paramString2) {
    Class clazz2;
    Class clazz1;
    ClassLoader classLoader = getClass().getClassLoader();
    try {
      clazz2 = (clazz1 = Class.forName(paramString1.replace('/', '.'), false, classLoader)).forName(paramString2.replace('/', '.'), false, classLoader);
    } catch (Exception exception) {
      throw new RuntimeException(exception.toString());
    } 
    if (clazz1.isAssignableFrom(clazz2))
      return paramString1; 
    if (clazz2.isAssignableFrom(clazz1))
      return paramString2; 
    if (clazz1.isInterface() || clazz2.isInterface())
      return "java/lang/Object"; 
    do {
      clazz1 = clazz1.getSuperclass();
    } while (!clazz1.isAssignableFrom(clazz2));
    return clazz1.getName().replace('.', '/');
  }
  
  private Item a(Item paramItem) {
    Item item;
    for (item = this.e[paramItem.j % this.e.length]; item != null && (item.b != paramItem.b || !paramItem.a(item)); item = item.k);
    return item;
  }
  
  private void b(Item paramItem) {
    if (this.c + this.G > this.f) {
      int i2 = this.e.length;
      int i3 = i2 * 2 + 1;
      Item[] arrayOfItem = new Item[i3];
      for (int i4 = i2 - 1; i4 >= 0; i4--) {
        for (Item item = this.e[i4]; item != null; item = item1) {
          int i5 = item.j % arrayOfItem.length;
          Item item1 = item.k;
          item.k = arrayOfItem[i5];
          arrayOfItem[i5] = item;
        } 
      } 
      this.e = arrayOfItem;
      this.f = (int)(i3 * 0.75D);
    } 
    int i1 = paramItem.j % this.e.length;
    paramItem.k = this.e[i1];
    this.e[i1] = paramItem;
  }
  
  private void a(int paramInt1, int paramInt2, int paramInt3) { this.d.b(paramInt1, paramInt2).putShort(paramInt3); }
  
  private void b(int paramInt1, int paramInt2, int paramInt3) { this.d.a(paramInt1, paramInt2).putShort(paramInt3); }
  
  static  {
    byte[] arrayOfByte = new byte[220];
    String str = "AAAAAAAAAAAAAAAABCLMMDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANAAAAAAAAAAAAAAAAAAAAJJJJJJJJJJJJJJJJDOPAAAAAAGGGGGGGHIFBFAAFFAARQJJKKJJJJJJJJJJJJJJJJJJ";
    for (byte b1 = 0; b1 < arrayOfByte.length; b1++)
      arrayOfByte[b1] = (byte)(str.charAt(b1) - 'A'); 
    a = arrayOfByte;
  }
}
