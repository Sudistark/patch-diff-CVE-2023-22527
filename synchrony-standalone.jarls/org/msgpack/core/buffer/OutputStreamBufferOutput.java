package org.msgpack.core.buffer;

import java.io.IOException;
import java.io.OutputStream;
import org.msgpack.core.Preconditions;

public class OutputStreamBufferOutput implements MessageBufferOutput {
  private OutputStream out;
  
  private MessageBuffer buffer;
  
  public OutputStreamBufferOutput(OutputStream paramOutputStream) { this(paramOutputStream, 8192); }
  
  public OutputStreamBufferOutput(OutputStream paramOutputStream, int paramInt) {
    this.out = (OutputStream)Preconditions.checkNotNull(paramOutputStream, "output is null");
    this.buffer = MessageBuffer.allocate(paramInt);
  }
  
  public OutputStream reset(OutputStream paramOutputStream) throws IOException {
    OutputStream outputStream = this.out;
    this.out = paramOutputStream;
    return outputStream;
  }
  
  public MessageBuffer next(int paramInt) throws IOException {
    if (this.buffer.size() < paramInt)
      this.buffer = MessageBuffer.allocate(paramInt); 
    return this.buffer;
  }
  
  public void writeBuffer(int paramInt) throws IOException { write(this.buffer.array(), this.buffer.arrayOffset(), paramInt); }
  
  public void write(byte[] paramArrayOfByte, int paramInt1, int paramInt2) throws IOException { this.out.write(paramArrayOfByte, paramInt1, paramInt2); }
  
  public void add(byte[] paramArrayOfByte, int paramInt1, int paramInt2) throws IOException { write(paramArrayOfByte, paramInt1, paramInt2); }
  
  public void close() throws IOException { this.out.close(); }
  
  public void flush() throws IOException { this.out.flush(); }
}
