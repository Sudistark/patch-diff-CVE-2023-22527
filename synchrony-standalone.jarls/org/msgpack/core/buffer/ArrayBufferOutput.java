package org.msgpack.core.buffer;

import java.util.ArrayList;
import java.util.List;

public class ArrayBufferOutput implements MessageBufferOutput {
  private final List<MessageBuffer> list;
  
  private final int bufferSize;
  
  private MessageBuffer lastBuffer;
  
  public ArrayBufferOutput() { this(8192); }
  
  public ArrayBufferOutput(int paramInt) {
    this.bufferSize = paramInt;
    this.list = new ArrayList();
  }
  
  public int getSize() {
    int i = 0;
    for (MessageBuffer messageBuffer : this.list)
      i += messageBuffer.size(); 
    return i;
  }
  
  public byte[] toByteArray() {
    byte[] arrayOfByte = new byte[getSize()];
    int i = 0;
    for (MessageBuffer messageBuffer : this.list) {
      messageBuffer.getBytes(0, arrayOfByte, i, messageBuffer.size());
      i += messageBuffer.size();
    } 
    return arrayOfByte;
  }
  
  public MessageBuffer toMessageBuffer() {
    if (this.list.size() == 1)
      return (MessageBuffer)this.list.get(0); 
    if (this.list.isEmpty())
      return MessageBuffer.allocate(0); 
    return MessageBuffer.wrap(toByteArray());
  }
  
  public List<MessageBuffer> toBufferList() { return new ArrayList(this.list); }
  
  public void clear() { this.list.clear(); }
  
  public MessageBuffer next(int paramInt) {
    if (this.lastBuffer != null && this.lastBuffer.size() > paramInt)
      return this.lastBuffer; 
    int i = Math.max(this.bufferSize, paramInt);
    MessageBuffer messageBuffer = MessageBuffer.allocate(i);
    this.lastBuffer = messageBuffer;
    return messageBuffer;
  }
  
  public void writeBuffer(int paramInt) {
    this.list.add(this.lastBuffer.slice(0, paramInt));
    if (this.lastBuffer.size() - paramInt > this.bufferSize / 4) {
      this.lastBuffer = this.lastBuffer.slice(paramInt, this.lastBuffer.size() - paramInt);
    } else {
      this.lastBuffer = null;
    } 
  }
  
  public void write(byte[] paramArrayOfByte, int paramInt1, int paramInt2) {
    MessageBuffer messageBuffer = MessageBuffer.allocate(paramInt2);
    messageBuffer.putBytes(0, paramArrayOfByte, paramInt1, paramInt2);
    this.list.add(messageBuffer);
  }
  
  public void add(byte[] paramArrayOfByte, int paramInt1, int paramInt2) {
    MessageBuffer messageBuffer = MessageBuffer.wrap(paramArrayOfByte, paramInt1, paramInt2);
    this.list.add(messageBuffer);
  }
  
  public void close() {}
  
  public void flush() {}
}
