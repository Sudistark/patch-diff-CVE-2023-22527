package org.msgpack.core.buffer;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.WritableByteChannel;
import org.msgpack.core.Preconditions;

public class ChannelBufferOutput implements MessageBufferOutput {
  private WritableByteChannel channel;
  
  private MessageBuffer buffer;
  
  public ChannelBufferOutput(WritableByteChannel paramWritableByteChannel) { this(paramWritableByteChannel, 8192); }
  
  public ChannelBufferOutput(WritableByteChannel paramWritableByteChannel, int paramInt) {
    this.channel = (WritableByteChannel)Preconditions.checkNotNull(paramWritableByteChannel, "output channel is null");
    this.buffer = MessageBuffer.allocate(paramInt);
  }
  
  public WritableByteChannel reset(WritableByteChannel paramWritableByteChannel) throws IOException {
    WritableByteChannel writableByteChannel = this.channel;
    this.channel = paramWritableByteChannel;
    return writableByteChannel;
  }
  
  public MessageBuffer next(int paramInt) throws IOException {
    if (this.buffer.size() < paramInt)
      this.buffer = MessageBuffer.allocate(paramInt); 
    return this.buffer;
  }
  
  public void writeBuffer(int paramInt) throws IOException {
    ByteBuffer byteBuffer = this.buffer.sliceAsByteBuffer(0, paramInt);
    while (byteBuffer.hasRemaining())
      this.channel.write(byteBuffer); 
  }
  
  public void write(byte[] paramArrayOfByte, int paramInt1, int paramInt2) throws IOException {
    ByteBuffer byteBuffer = ByteBuffer.wrap(paramArrayOfByte, paramInt1, paramInt2);
    while (byteBuffer.hasRemaining())
      this.channel.write(byteBuffer); 
  }
  
  public void add(byte[] paramArrayOfByte, int paramInt1, int paramInt2) throws IOException { write(paramArrayOfByte, paramInt1, paramInt2); }
  
  public void close() throws IOException { this.channel.close(); }
  
  public void flush() throws IOException {}
}
