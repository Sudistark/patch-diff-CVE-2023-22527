package org.msgpack.core.buffer;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.ReadableByteChannel;
import org.msgpack.core.Preconditions;

public class ChannelBufferInput implements MessageBufferInput {
  private ReadableByteChannel channel;
  
  private final MessageBuffer buffer;
  
  public ChannelBufferInput(ReadableByteChannel paramReadableByteChannel) { this(paramReadableByteChannel, 8192); }
  
  public ChannelBufferInput(ReadableByteChannel paramReadableByteChannel, int paramInt) {
    this.channel = (ReadableByteChannel)Preconditions.checkNotNull(paramReadableByteChannel, "input channel is null");
    Preconditions.checkArgument((paramInt > 0), "buffer size must be > 0: " + paramInt);
    this.buffer = MessageBuffer.allocate(paramInt);
  }
  
  public ReadableByteChannel reset(ReadableByteChannel paramReadableByteChannel) throws IOException {
    ReadableByteChannel readableByteChannel = this.channel;
    this.channel = paramReadableByteChannel;
    return readableByteChannel;
  }
  
  public MessageBuffer next() throws IOException {
    ByteBuffer byteBuffer = this.buffer.sliceAsByteBuffer();
    int i = this.channel.read(byteBuffer);
    if (i == -1)
      return null; 
    byteBuffer.flip();
    return this.buffer.slice(0, byteBuffer.limit());
  }
  
  public void close() throws IOException { this.channel.close(); }
}
