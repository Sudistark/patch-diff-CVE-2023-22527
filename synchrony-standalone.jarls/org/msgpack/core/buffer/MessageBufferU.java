package org.msgpack.core.buffer;

import java.nio.ByteBuffer;
import org.msgpack.core.Preconditions;

public class MessageBufferU extends MessageBuffer {
  private final ByteBuffer wrap;
  
  MessageBufferU(byte[] paramArrayOfByte, int paramInt1, int paramInt2) {
    super(paramArrayOfByte, paramInt1, paramInt2);
    this.wrap = ByteBuffer.wrap(paramArrayOfByte, paramInt1, paramInt2).slice();
  }
  
  MessageBufferU(ByteBuffer paramByteBuffer) {
    super(paramByteBuffer);
    this.wrap = paramByteBuffer.slice();
  }
  
  private MessageBufferU(Object paramObject, long paramLong, int paramInt, ByteBuffer paramByteBuffer) {
    super(paramObject, paramLong, paramInt);
    this.wrap = paramByteBuffer;
  }
  
  public MessageBufferU slice(int paramInt1, int paramInt2) {
    if (paramInt1 == 0 && paramInt2 == size())
      return this; 
    Preconditions.checkArgument((paramInt1 + paramInt2 <= size()));
    try {
      this.wrap.position(paramInt1);
      this.wrap.limit(paramInt1 + paramInt2);
      return new MessageBufferU(this.base, this.address + paramInt1, paramInt2, this.wrap.slice());
    } finally {
      resetBufferPosition();
    } 
  }
  
  private void resetBufferPosition() {
    this.wrap.position(0);
    this.wrap.limit(this.size);
  }
  
  public byte getByte(int paramInt) { return this.wrap.get(paramInt); }
  
  public boolean getBoolean(int paramInt) { return (this.wrap.get(paramInt) != 0); }
  
  public short getShort(int paramInt) { return this.wrap.getShort(paramInt); }
  
  public int getInt(int paramInt) { return this.wrap.getInt(paramInt); }
  
  public float getFloat(int paramInt) { return this.wrap.getFloat(paramInt); }
  
  public long getLong(int paramInt) { return this.wrap.getLong(paramInt); }
  
  public double getDouble(int paramInt) { return this.wrap.getDouble(paramInt); }
  
  public void getBytes(int paramInt1, int paramInt2, ByteBuffer paramByteBuffer) {
    try {
      this.wrap.position(paramInt1);
      this.wrap.limit(paramInt1 + paramInt2);
      paramByteBuffer.put(this.wrap);
    } finally {
      resetBufferPosition();
    } 
  }
  
  public void putByte(int paramInt, byte paramByte) { this.wrap.put(paramInt, paramByte); }
  
  public void putBoolean(int paramInt, boolean paramBoolean) { this.wrap.put(paramInt, paramBoolean ? 1 : 0); }
  
  public void putShort(int paramInt, short paramShort) { this.wrap.putShort(paramInt, paramShort); }
  
  public void putInt(int paramInt1, int paramInt2) { this.wrap.putInt(paramInt1, paramInt2); }
  
  public void putFloat(int paramInt, float paramFloat) { this.wrap.putFloat(paramInt, paramFloat); }
  
  public void putLong(int paramInt, long paramLong) { this.wrap.putLong(paramInt, paramLong); }
  
  public void putDouble(int paramInt, double paramDouble) { this.wrap.putDouble(paramInt, paramDouble); }
  
  public ByteBuffer sliceAsByteBuffer(int paramInt1, int paramInt2) {
    try {
      this.wrap.position(paramInt1);
      this.wrap.limit(paramInt1 + paramInt2);
      return this.wrap.slice();
    } finally {
      resetBufferPosition();
    } 
  }
  
  public ByteBuffer sliceAsByteBuffer() { return sliceAsByteBuffer(0, this.size); }
  
  public void getBytes(int paramInt1, byte[] paramArrayOfByte, int paramInt2, int paramInt3) {
    try {
      this.wrap.position(paramInt1);
      this.wrap.get(paramArrayOfByte, paramInt2, paramInt3);
    } finally {
      resetBufferPosition();
    } 
  }
  
  public void putByteBuffer(int paramInt1, ByteBuffer paramByteBuffer, int paramInt2) {
    assert paramInt2 <= paramByteBuffer.remaining();
    if (paramByteBuffer.hasArray()) {
      putBytes(paramInt1, paramByteBuffer.array(), paramByteBuffer.position() + paramByteBuffer.arrayOffset(), paramInt2);
      paramByteBuffer.position(paramByteBuffer.position() + paramInt2);
    } else {
      i = paramByteBuffer.limit();
      try {
        paramByteBuffer.limit(paramByteBuffer.position() + paramInt2);
        this.wrap.position(paramInt1);
        this.wrap.put(paramByteBuffer);
      } finally {
        paramByteBuffer.limit(i);
      } 
    } 
  }
  
  public void putBytes(int paramInt1, byte[] paramArrayOfByte, int paramInt2, int paramInt3) {
    try {
      this.wrap.position(paramInt1);
      this.wrap.put(paramArrayOfByte, paramInt2, paramInt3);
    } finally {
      resetBufferPosition();
    } 
  }
  
  public void copyTo(int paramInt1, MessageBuffer paramMessageBuffer, int paramInt2, int paramInt3) {
    try {
      this.wrap.position(paramInt1);
      paramMessageBuffer.putByteBuffer(paramInt2, this.wrap, paramInt3);
    } finally {
      resetBufferPosition();
    } 
  }
  
  public void putMessageBuffer(int paramInt1, MessageBuffer paramMessageBuffer, int paramInt2, int paramInt3) { putByteBuffer(paramInt1, paramMessageBuffer.sliceAsByteBuffer(paramInt2, paramInt3), paramInt3); }
  
  public byte[] toByteArray() {
    byte[] arrayOfByte = new byte[size()];
    getBytes(0, arrayOfByte, 0, arrayOfByte.length);
    return arrayOfByte;
  }
  
  public boolean hasArray() { return !this.wrap.isDirect(); }
  
  public byte[] array() { return hasArray() ? this.wrap.array() : null; }
}
