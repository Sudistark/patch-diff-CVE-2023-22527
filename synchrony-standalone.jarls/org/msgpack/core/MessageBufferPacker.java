package org.msgpack.core;

import java.io.IOException;
import java.util.List;
import org.msgpack.core.buffer.ArrayBufferOutput;
import org.msgpack.core.buffer.MessageBuffer;
import org.msgpack.core.buffer.MessageBufferOutput;

public class MessageBufferPacker extends MessagePacker {
  protected MessageBufferPacker(MessagePack.PackerConfig paramPackerConfig) { this(new ArrayBufferOutput(paramPackerConfig.getBufferSize()), paramPackerConfig); }
  
  protected MessageBufferPacker(ArrayBufferOutput paramArrayBufferOutput, MessagePack.PackerConfig paramPackerConfig) { super(paramArrayBufferOutput, paramPackerConfig); }
  
  public MessageBufferOutput reset(MessageBufferOutput paramMessageBufferOutput) throws IOException {
    if (!(paramMessageBufferOutput instanceof ArrayBufferOutput))
      throw new IllegalArgumentException("MessageBufferPacker accepts only ArrayBufferOutput"); 
    return super.reset(paramMessageBufferOutput);
  }
  
  private ArrayBufferOutput getArrayBufferOut() { return (ArrayBufferOutput)this.out; }
  
  public void clear() {
    super.clear();
    getArrayBufferOut().clear();
  }
  
  public byte[] toByteArray() {
    try {
      flush();
    } catch (IOException iOException) {
      throw new RuntimeException(iOException);
    } 
    return getArrayBufferOut().toByteArray();
  }
  
  public MessageBuffer toMessageBuffer() {
    try {
      flush();
    } catch (IOException iOException) {
      throw new RuntimeException(iOException);
    } 
    return getArrayBufferOut().toMessageBuffer();
  }
  
  public List<MessageBuffer> toBufferList() {
    try {
      flush();
    } catch (IOException iOException) {
      throw new RuntimeException(iOException);
    } 
    return getArrayBufferOut().toBufferList();
  }
  
  public int getBufferSize() { return getArrayBufferOut().getSize(); }
}
