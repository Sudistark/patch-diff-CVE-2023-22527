package org.msgpack.value;

import java.math.BigInteger;
import java.time.Instant;
import java.util.AbstractMap;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.msgpack.value.impl.ImmutableArrayValueImpl;
import org.msgpack.value.impl.ImmutableBigIntegerValueImpl;
import org.msgpack.value.impl.ImmutableBinaryValueImpl;
import org.msgpack.value.impl.ImmutableBooleanValueImpl;
import org.msgpack.value.impl.ImmutableDoubleValueImpl;
import org.msgpack.value.impl.ImmutableExtensionValueImpl;
import org.msgpack.value.impl.ImmutableLongValueImpl;
import org.msgpack.value.impl.ImmutableMapValueImpl;
import org.msgpack.value.impl.ImmutableNilValueImpl;
import org.msgpack.value.impl.ImmutableStringValueImpl;
import org.msgpack.value.impl.ImmutableTimestampValueImpl;

public final class ValueFactory {
  public static ImmutableNilValue newNil() { return ImmutableNilValueImpl.get(); }
  
  public static ImmutableBooleanValue newBoolean(boolean paramBoolean) { return paramBoolean ? ImmutableBooleanValueImpl.TRUE : ImmutableBooleanValueImpl.FALSE; }
  
  public static ImmutableIntegerValue newInteger(byte paramByte) { return new ImmutableLongValueImpl(paramByte); }
  
  public static ImmutableIntegerValue newInteger(short paramShort) { return new ImmutableLongValueImpl(paramShort); }
  
  public static ImmutableIntegerValue newInteger(int paramInt) { return new ImmutableLongValueImpl(paramInt); }
  
  public static ImmutableIntegerValue newInteger(long paramLong) { return new ImmutableLongValueImpl(paramLong); }
  
  public static ImmutableIntegerValue newInteger(BigInteger paramBigInteger) { return new ImmutableBigIntegerValueImpl(paramBigInteger); }
  
  public static ImmutableFloatValue newFloat(float paramFloat) { return new ImmutableDoubleValueImpl(paramFloat); }
  
  public static ImmutableFloatValue newFloat(double paramDouble) { return new ImmutableDoubleValueImpl(paramDouble); }
  
  public static ImmutableBinaryValue newBinary(byte[] paramArrayOfByte) { return newBinary(paramArrayOfByte, false); }
  
  public static ImmutableBinaryValue newBinary(byte[] paramArrayOfByte, boolean paramBoolean) {
    if (paramBoolean)
      return new ImmutableBinaryValueImpl(paramArrayOfByte); 
    return new ImmutableBinaryValueImpl(Arrays.copyOf(paramArrayOfByte, paramArrayOfByte.length));
  }
  
  public static ImmutableBinaryValue newBinary(byte[] paramArrayOfByte, int paramInt1, int paramInt2) { return newBinary(paramArrayOfByte, paramInt1, paramInt2, false); }
  
  public static ImmutableBinaryValue newBinary(byte[] paramArrayOfByte, int paramInt1, int paramInt2, boolean paramBoolean) {
    if (paramBoolean && paramInt1 == 0 && paramInt2 == paramArrayOfByte.length)
      return new ImmutableBinaryValueImpl(paramArrayOfByte); 
    return new ImmutableBinaryValueImpl(Arrays.copyOfRange(paramArrayOfByte, paramInt1, paramInt2));
  }
  
  public static ImmutableStringValue newString(String paramString) { return new ImmutableStringValueImpl(paramString); }
  
  public static ImmutableStringValue newString(byte[] paramArrayOfByte) { return new ImmutableStringValueImpl(paramArrayOfByte); }
  
  public static ImmutableStringValue newString(byte[] paramArrayOfByte, boolean paramBoolean) {
    if (paramBoolean)
      return new ImmutableStringValueImpl(paramArrayOfByte); 
    return new ImmutableStringValueImpl(Arrays.copyOf(paramArrayOfByte, paramArrayOfByte.length));
  }
  
  public static ImmutableStringValue newString(byte[] paramArrayOfByte, int paramInt1, int paramInt2) { return newString(paramArrayOfByte, paramInt1, paramInt2, false); }
  
  public static ImmutableStringValue newString(byte[] paramArrayOfByte, int paramInt1, int paramInt2, boolean paramBoolean) {
    if (paramBoolean && paramInt1 == 0 && paramInt2 == paramArrayOfByte.length)
      return new ImmutableStringValueImpl(paramArrayOfByte); 
    return new ImmutableStringValueImpl(Arrays.copyOfRange(paramArrayOfByte, paramInt1, paramInt2));
  }
  
  public static ImmutableArrayValue newArray(List<? extends Value> paramList) {
    if (paramList.isEmpty())
      return ImmutableArrayValueImpl.empty(); 
    Value[] arrayOfValue = (Value[])paramList.toArray(new Value[paramList.size()]);
    return new ImmutableArrayValueImpl(arrayOfValue);
  }
  
  public static ImmutableArrayValue newArray(Value... paramVarArgs) {
    if (paramVarArgs.length == 0)
      return ImmutableArrayValueImpl.empty(); 
    return new ImmutableArrayValueImpl((Value[])Arrays.copyOf(paramVarArgs, paramVarArgs.length));
  }
  
  public static ImmutableArrayValue newArray(Value[] paramArrayOfValue, boolean paramBoolean) {
    if (paramArrayOfValue.length == 0)
      return ImmutableArrayValueImpl.empty(); 
    if (paramBoolean)
      return new ImmutableArrayValueImpl(paramArrayOfValue); 
    return new ImmutableArrayValueImpl((Value[])Arrays.copyOf(paramArrayOfValue, paramArrayOfValue.length));
  }
  
  public static ImmutableArrayValue emptyArray() { return ImmutableArrayValueImpl.empty(); }
  
  public static <K extends Value, V extends Value> ImmutableMapValue newMap(Map<K, V> paramMap) {
    Value[] arrayOfValue = new Value[paramMap.size() * 2];
    byte b = 0;
    for (Map.Entry entry : paramMap.entrySet()) {
      arrayOfValue[b] = (Value)entry.getKey();
      b++;
      arrayOfValue[b] = (Value)entry.getValue();
      b++;
    } 
    return new ImmutableMapValueImpl(arrayOfValue);
  }
  
  public static ImmutableMapValue newMap(Value... paramVarArgs) {
    if (paramVarArgs.length == 0)
      return ImmutableMapValueImpl.empty(); 
    return new ImmutableMapValueImpl((Value[])Arrays.copyOf(paramVarArgs, paramVarArgs.length));
  }
  
  public static ImmutableMapValue newMap(Value[] paramArrayOfValue, boolean paramBoolean) {
    if (paramArrayOfValue.length == 0)
      return ImmutableMapValueImpl.empty(); 
    if (paramBoolean)
      return new ImmutableMapValueImpl(paramArrayOfValue); 
    return new ImmutableMapValueImpl((Value[])Arrays.copyOf(paramArrayOfValue, paramArrayOfValue.length));
  }
  
  public static ImmutableMapValue emptyMap() { return ImmutableMapValueImpl.empty(); }
  
  @SafeVarargs
  public static MapValue newMap(Map.Entry<? extends Value, ? extends Value>... paramVarArgs) {
    Value[] arrayOfValue = new Value[paramVarArgs.length * 2];
    for (byte b = 0; b < paramVarArgs.length; b++) {
      arrayOfValue[b * 2] = (Value)paramVarArgs[b].getKey();
      arrayOfValue[b * 2 + 1] = (Value)paramVarArgs[b].getValue();
    } 
    return newMap(arrayOfValue, true);
  }
  
  public static MapBuilder newMapBuilder() { return new MapBuilder(); }
  
  public static Map.Entry<Value, Value> newMapEntry(Value paramValue1, Value paramValue2) { return new AbstractMap.SimpleEntry(paramValue1, paramValue2); }
  
  public static ImmutableExtensionValue newExtension(byte paramByte, byte[] paramArrayOfByte) { return new ImmutableExtensionValueImpl(paramByte, paramArrayOfByte); }
  
  public static ImmutableTimestampValue newTimestamp(Instant paramInstant) { return new ImmutableTimestampValueImpl(paramInstant); }
  
  public static ImmutableTimestampValue newTimestamp(long paramLong) { return newTimestamp(Instant.ofEpochMilli(paramLong)); }
  
  public static ImmutableTimestampValue newTimestamp(long paramLong, int paramInt) { return newTimestamp(Instant.ofEpochSecond(paramLong, paramInt)); }
}
