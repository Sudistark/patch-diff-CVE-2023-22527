package org.msgpack.value;

import java.io.IOException;
import java.math.BigInteger;
import java.time.Instant;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import org.msgpack.core.MessagePack;
import org.msgpack.core.MessagePacker;
import org.msgpack.core.MessageTypeCastException;

public class Variable implements Value {
  private final NilValueAccessor nilAccessor;
  
  private final BooleanValueAccessor booleanAccessor;
  
  private final IntegerValueAccessor integerAccessor;
  
  private final FloatValueAccessor floatAccessor;
  
  private final BinaryValueAccessor binaryAccessor;
  
  private final StringValueAccessor stringAccessor;
  
  private final ArrayValueAccessor arrayAccessor;
  
  private final MapValueAccessor mapAccessor;
  
  private final ExtensionValueAccessor extensionAccessor;
  
  private final TimestampValueAccessor timestampAccessor;
  
  private Type type;
  
  private long longValue;
  
  private double doubleValue;
  
  private Object objectValue;
  
  private AbstractValueAccessor accessor;
  
  public Variable() {
    this.nilAccessor = new NilValueAccessor(this, null);
    this.booleanAccessor = new BooleanValueAccessor(this, null);
    this.integerAccessor = new IntegerValueAccessor(this, null);
    this.floatAccessor = new FloatValueAccessor(this, null);
    this.binaryAccessor = new BinaryValueAccessor(this, null);
    this.stringAccessor = new StringValueAccessor(this, null);
    this.arrayAccessor = new ArrayValueAccessor(this, null);
    this.mapAccessor = new MapValueAccessor(this, null);
    this.extensionAccessor = new ExtensionValueAccessor(this, null);
    this.timestampAccessor = new TimestampValueAccessor(this, null);
    setNilValue();
  }
  
  public Variable setNilValue() {
    this.type = Type.NULL;
    this.accessor = this.nilAccessor;
    return this;
  }
  
  public Variable setBooleanValue(boolean paramBoolean) {
    this.type = Type.BOOLEAN;
    this.accessor = this.booleanAccessor;
    this.longValue = paramBoolean ? 1L : 0L;
    return this;
  }
  
  private static final BigInteger LONG_MIN = BigInteger.valueOf(Float.MIN_VALUE);
  
  private static final BigInteger LONG_MAX = BigInteger.valueOf(Float.MAX_VALUE);
  
  private static final long BYTE_MIN = -128L;
  
  private static final long BYTE_MAX = 127L;
  
  private static final long SHORT_MIN = -32768L;
  
  private static final long SHORT_MAX = 32767L;
  
  private static final long INT_MIN = -2147483648L;
  
  private static final long INT_MAX = 2147483647L;
  
  public Variable setIntegerValue(long paramLong) {
    this.type = Type.LONG;
    this.accessor = this.integerAccessor;
    this.longValue = paramLong;
    return this;
  }
  
  public Variable setIntegerValue(BigInteger paramBigInteger) {
    if (0 <= paramBigInteger.compareTo(LONG_MIN) && paramBigInteger.compareTo(LONG_MAX) <= 0) {
      this.type = Type.LONG;
      this.accessor = this.integerAccessor;
      this.longValue = paramBigInteger.longValue();
    } else {
      this.type = Type.BIG_INTEGER;
      this.accessor = this.integerAccessor;
      this.objectValue = paramBigInteger;
    } 
    return this;
  }
  
  public Variable setFloatValue(double paramDouble) {
    this.type = Type.DOUBLE;
    this.accessor = this.floatAccessor;
    this.doubleValue = paramDouble;
    this.longValue = (long)paramDouble;
    return this;
  }
  
  public Variable setFloatValue(float paramFloat) {
    this.type = Type.DOUBLE;
    this.accessor = this.floatAccessor;
    this.longValue = (long)paramFloat;
    return this;
  }
  
  public Variable setBinaryValue(byte[] paramArrayOfByte) {
    this.type = Type.BYTE_ARRAY;
    this.accessor = this.binaryAccessor;
    this.objectValue = paramArrayOfByte;
    return this;
  }
  
  public Variable setStringValue(String paramString) { return setStringValue(paramString.getBytes(MessagePack.UTF8)); }
  
  public Variable setStringValue(byte[] paramArrayOfByte) {
    this.type = Type.RAW_STRING;
    this.accessor = this.stringAccessor;
    this.objectValue = paramArrayOfByte;
    return this;
  }
  
  public Variable setArrayValue(List<Value> paramList) {
    this.type = Type.LIST;
    this.accessor = this.arrayAccessor;
    this.objectValue = paramList.toArray();
    return this;
  }
  
  public Variable setArrayValue(Value[] paramArrayOfValue) {
    this.type = Type.LIST;
    this.accessor = this.arrayAccessor;
    this.objectValue = paramArrayOfValue;
    return this;
  }
  
  public Variable setMapValue(Map<Value, Value> paramMap) {
    this.type = Type.MAP;
    this.accessor = this.mapAccessor;
    Value[] arrayOfValue = new Value[paramMap.size() * 2];
    Iterator iterator = paramMap.entrySet().iterator();
    byte b = 0;
    while (iterator.hasNext()) {
      Map.Entry entry = (Map.Entry)iterator.next();
      arrayOfValue[b] = (Value)entry.getKey();
      b++;
      arrayOfValue[b] = (Value)entry.getValue();
      b++;
    } 
    this.objectValue = arrayOfValue;
    return this;
  }
  
  public Variable setMapValue(Value[] paramArrayOfValue) {
    this.type = Type.MAP;
    this.accessor = this.mapAccessor;
    this.objectValue = paramArrayOfValue;
    return this;
  }
  
  public Variable setExtensionValue(byte paramByte, byte[] paramArrayOfByte) {
    this.type = Type.EXTENSION;
    this.accessor = this.extensionAccessor;
    this.objectValue = ValueFactory.newExtension(paramByte, paramArrayOfByte);
    return this;
  }
  
  public Variable setTimestampValue(Instant paramInstant) {
    this.type = Type.TIMESTAMP;
    this.accessor = this.timestampAccessor;
    this.objectValue = ValueFactory.newTimestamp(paramInstant);
    return this;
  }
  
  public ImmutableValue immutableValue() { return this.accessor.immutableValue(); }
  
  public void writeTo(MessagePacker paramMessagePacker) throws IOException { this.accessor.writeTo(paramMessagePacker); }
  
  public int hashCode() { return immutableValue().hashCode(); }
  
  public boolean equals(Object paramObject) { return immutableValue().equals(paramObject); }
  
  public String toJson() { return immutableValue().toJson(); }
  
  public String toString() { return immutableValue().toString(); }
  
  public ValueType getValueType() { return this.type.getValueType(); }
  
  public boolean isNilValue() { return getValueType().isNilType(); }
  
  public boolean isBooleanValue() { return getValueType().isBooleanType(); }
  
  public boolean isNumberValue() { return getValueType().isNumberType(); }
  
  public boolean isIntegerValue() { return getValueType().isIntegerType(); }
  
  public boolean isFloatValue() { return getValueType().isFloatType(); }
  
  public boolean isRawValue() { return getValueType().isRawType(); }
  
  public boolean isBinaryValue() { return getValueType().isBinaryType(); }
  
  public boolean isStringValue() { return getValueType().isStringType(); }
  
  public boolean isArrayValue() { return getValueType().isArrayType(); }
  
  public boolean isMapValue() { return getValueType().isMapType(); }
  
  public boolean isExtensionValue() { return getValueType().isExtensionType(); }
  
  public boolean isTimestampValue() { return (this.type == Type.TIMESTAMP); }
  
  public NilValue asNilValue() {
    if (!isNilValue())
      throw new MessageTypeCastException(); 
    return (NilValue)this.accessor;
  }
  
  public BooleanValue asBooleanValue() {
    if (!isBooleanValue())
      throw new MessageTypeCastException(); 
    return (BooleanValue)this.accessor;
  }
  
  public NumberValue asNumberValue() {
    if (!isNumberValue())
      throw new MessageTypeCastException(); 
    return (NumberValue)this.accessor;
  }
  
  public IntegerValue asIntegerValue() {
    if (!isIntegerValue())
      throw new MessageTypeCastException(); 
    return (IntegerValue)this.accessor;
  }
  
  public FloatValue asFloatValue() {
    if (!isFloatValue())
      throw new MessageTypeCastException(); 
    return (FloatValue)this.accessor;
  }
  
  public RawValue asRawValue() {
    if (!isRawValue())
      throw new MessageTypeCastException(); 
    return (RawValue)this.accessor;
  }
  
  public BinaryValue asBinaryValue() {
    if (!isBinaryValue())
      throw new MessageTypeCastException(); 
    return (BinaryValue)this.accessor;
  }
  
  public StringValue asStringValue() {
    if (!isStringValue())
      throw new MessageTypeCastException(); 
    return (StringValue)this.accessor;
  }
  
  public ArrayValue asArrayValue() {
    if (!isArrayValue())
      throw new MessageTypeCastException(); 
    return (ArrayValue)this.accessor;
  }
  
  public MapValue asMapValue() {
    if (!isMapValue())
      throw new MessageTypeCastException(); 
    return (MapValue)this.accessor;
  }
  
  public ExtensionValue asExtensionValue() {
    if (!isExtensionValue())
      throw new MessageTypeCastException(); 
    return (ExtensionValue)this.accessor;
  }
  
  public TimestampValue asTimestampValue() {
    if (!isTimestampValue())
      throw new MessageTypeCastException(); 
    return (TimestampValue)this.accessor;
  }
}
