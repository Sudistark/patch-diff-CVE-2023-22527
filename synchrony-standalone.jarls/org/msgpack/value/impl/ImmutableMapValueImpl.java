package org.msgpack.value.impl;

import java.io.IOException;
import java.util.Arrays;
import java.util.Collection;
import java.util.Map;
import java.util.Set;
import org.msgpack.core.MessagePacker;
import org.msgpack.value.ImmutableArrayValue;
import org.msgpack.value.ImmutableBinaryValue;
import org.msgpack.value.ImmutableBooleanValue;
import org.msgpack.value.ImmutableExtensionValue;
import org.msgpack.value.ImmutableFloatValue;
import org.msgpack.value.ImmutableIntegerValue;
import org.msgpack.value.ImmutableMapValue;
import org.msgpack.value.ImmutableNilValue;
import org.msgpack.value.ImmutableNumberValue;
import org.msgpack.value.ImmutableRawValue;
import org.msgpack.value.ImmutableStringValue;
import org.msgpack.value.ImmutableTimestampValue;
import org.msgpack.value.ImmutableValue;
import org.msgpack.value.MapValue;
import org.msgpack.value.Value;
import org.msgpack.value.ValueType;

public class ImmutableMapValueImpl extends AbstractImmutableValue implements ImmutableMapValue {
  private static final ImmutableMapValueImpl EMPTY = new ImmutableMapValueImpl(new Value[0]);
  
  private final Value[] kvs;
  
  public static ImmutableMapValue empty() { return EMPTY; }
  
  public ImmutableMapValueImpl(Value[] paramArrayOfValue) { this.kvs = paramArrayOfValue; }
  
  public ValueType getValueType() { return ValueType.MAP; }
  
  public ImmutableMapValue immutableValue() { return this; }
  
  public ImmutableMapValue asMapValue() { return this; }
  
  public Value[] getKeyValueArray() { return (Value[])Arrays.copyOf(this.kvs, this.kvs.length); }
  
  public int size() { return this.kvs.length / 2; }
  
  public Set<Value> keySet() { return new KeySet(this.kvs); }
  
  public Set<Map.Entry<Value, Value>> entrySet() { return new EntrySet(this.kvs); }
  
  public Collection<Value> values() { return new ValueCollection(this.kvs); }
  
  public Map<Value, Value> map() { return new ImmutableMapValueMap(this.kvs); }
  
  public void writeTo(MessagePacker paramMessagePacker) throws IOException {
    paramMessagePacker.packMapHeader(this.kvs.length / 2);
    for (byte b = 0; b < this.kvs.length; b++)
      this.kvs[b].writeTo(paramMessagePacker); 
  }
  
  public boolean equals(Object paramObject) {
    if (paramObject == this)
      return true; 
    if (!(paramObject instanceof Value))
      return false; 
    Value value = (Value)paramObject;
    if (!value.isMapValue())
      return false; 
    MapValue mapValue = value.asMapValue();
    return map().equals(mapValue.map());
  }
  
  public int hashCode() {
    int i = 0;
    for (boolean bool = false; bool < this.kvs.length; bool += true)
      i += (this.kvs[bool].hashCode() ^ this.kvs[bool + true].hashCode()); 
    return i;
  }
  
  public String toJson() {
    if (this.kvs.length == 0)
      return "{}"; 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("{");
    appendJsonKey(stringBuilder, this.kvs[0]);
    stringBuilder.append(":");
    stringBuilder.append(this.kvs[1].toJson());
    for (byte b = 2; b < this.kvs.length; b += 2) {
      stringBuilder.append(",");
      appendJsonKey(stringBuilder, this.kvs[b]);
      stringBuilder.append(":");
      stringBuilder.append(this.kvs[b + 1].toJson());
    } 
    stringBuilder.append("}");
    return stringBuilder.toString();
  }
  
  private static void appendJsonKey(StringBuilder paramStringBuilder, Value paramValue) {
    if (paramValue.isRawValue()) {
      paramStringBuilder.append(paramValue.toJson());
    } else {
      ImmutableStringValueImpl.appendJsonString(paramStringBuilder, paramValue.toString());
    } 
  }
  
  public String toString() {
    if (this.kvs.length == 0)
      return "{}"; 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("{");
    appendString(stringBuilder, this.kvs[0]);
    stringBuilder.append(":");
    appendString(stringBuilder, this.kvs[1]);
    for (byte b = 2; b < this.kvs.length; b += 2) {
      stringBuilder.append(",");
      appendString(stringBuilder, this.kvs[b]);
      stringBuilder.append(":");
      appendString(stringBuilder, this.kvs[b + 1]);
    } 
    stringBuilder.append("}");
    return stringBuilder.toString();
  }
  
  private static void appendString(StringBuilder paramStringBuilder, Value paramValue) {
    if (paramValue.isRawValue()) {
      paramStringBuilder.append(paramValue.toJson());
    } else {
      paramStringBuilder.append(paramValue.toString());
    } 
  }
}
