package org.msgpack.value.impl;

import java.io.IOException;
import org.msgpack.core.MessagePacker;
import org.msgpack.value.ImmutableArrayValue;
import org.msgpack.value.ImmutableBinaryValue;
import org.msgpack.value.ImmutableBooleanValue;
import org.msgpack.value.ImmutableExtensionValue;
import org.msgpack.value.ImmutableFloatValue;
import org.msgpack.value.ImmutableIntegerValue;
import org.msgpack.value.ImmutableMapValue;
import org.msgpack.value.ImmutableNilValue;
import org.msgpack.value.ImmutableNumberValue;
import org.msgpack.value.ImmutableRawValue;
import org.msgpack.value.ImmutableStringValue;
import org.msgpack.value.ImmutableTimestampValue;
import org.msgpack.value.ImmutableValue;
import org.msgpack.value.NilValue;
import org.msgpack.value.Value;
import org.msgpack.value.ValueType;

public class ImmutableNilValueImpl extends AbstractImmutableValue implements ImmutableNilValue {
  private static ImmutableNilValue instance = new ImmutableNilValueImpl();
  
  public static ImmutableNilValue get() { return instance; }
  
  public ValueType getValueType() { return ValueType.NIL; }
  
  public ImmutableNilValue immutableValue() { return this; }
  
  public ImmutableNilValue asNilValue() { return this; }
  
  public void writeTo(MessagePacker paramMessagePacker) throws IOException { paramMessagePacker.packNil(); }
  
  public boolean equals(Object paramObject) {
    if (paramObject == this)
      return true; 
    if (!(paramObject instanceof Value))
      return false; 
    return ((Value)paramObject).isNilValue();
  }
  
  public int hashCode() { return 0; }
  
  public String toString() { return toJson(); }
  
  public String toJson() { return "null"; }
}
