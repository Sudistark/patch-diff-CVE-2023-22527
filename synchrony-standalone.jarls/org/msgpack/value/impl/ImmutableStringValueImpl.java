package org.msgpack.value.impl;

import java.io.IOException;
import java.util.Arrays;
import org.msgpack.core.MessagePacker;
import org.msgpack.value.ImmutableStringValue;
import org.msgpack.value.ImmutableValue;
import org.msgpack.value.StringValue;
import org.msgpack.value.Value;
import org.msgpack.value.ValueType;

public class ImmutableStringValueImpl extends AbstractImmutableRawValue implements ImmutableStringValue {
  public ImmutableStringValueImpl(byte[] paramArrayOfByte) { super(paramArrayOfByte); }
  
  public ImmutableStringValueImpl(String paramString) { super(paramString); }
  
  public ValueType getValueType() { return ValueType.STRING; }
  
  public ImmutableStringValue immutableValue() { return this; }
  
  public ImmutableStringValue asStringValue() { return this; }
  
  public void writeTo(MessagePacker paramMessagePacker) throws IOException {
    paramMessagePacker.packRawStringHeader(this.data.length);
    paramMessagePacker.writePayload(this.data);
  }
  
  public boolean equals(Object paramObject) {
    if (this == paramObject)
      return true; 
    if (!(paramObject instanceof Value))
      return false; 
    Value value = (Value)paramObject;
    if (!value.isStringValue())
      return false; 
    if (value instanceof ImmutableStringValueImpl) {
      ImmutableStringValueImpl immutableStringValueImpl = (ImmutableStringValueImpl)value;
      return Arrays.equals(this.data, immutableStringValueImpl.data);
    } 
    return Arrays.equals(this.data, value.asStringValue().asByteArray());
  }
  
  public int hashCode() { return Arrays.hashCode(this.data); }
}
