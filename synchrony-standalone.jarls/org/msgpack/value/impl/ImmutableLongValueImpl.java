package org.msgpack.value.impl;

import java.io.IOException;
import java.math.BigInteger;
import org.msgpack.core.MessageFormat;
import org.msgpack.core.MessageIntegerOverflowException;
import org.msgpack.core.MessagePacker;
import org.msgpack.value.ImmutableArrayValue;
import org.msgpack.value.ImmutableBinaryValue;
import org.msgpack.value.ImmutableBooleanValue;
import org.msgpack.value.ImmutableExtensionValue;
import org.msgpack.value.ImmutableFloatValue;
import org.msgpack.value.ImmutableIntegerValue;
import org.msgpack.value.ImmutableMapValue;
import org.msgpack.value.ImmutableNilValue;
import org.msgpack.value.ImmutableNumberValue;
import org.msgpack.value.ImmutableRawValue;
import org.msgpack.value.ImmutableStringValue;
import org.msgpack.value.ImmutableTimestampValue;
import org.msgpack.value.ImmutableValue;
import org.msgpack.value.IntegerValue;
import org.msgpack.value.NumberValue;
import org.msgpack.value.Value;
import org.msgpack.value.ValueType;

public class ImmutableLongValueImpl extends AbstractImmutableValue implements ImmutableIntegerValue {
  private final long value;
  
  private static final long BYTE_MIN = -128L;
  
  private static final long BYTE_MAX = 127L;
  
  private static final long SHORT_MIN = -32768L;
  
  private static final long SHORT_MAX = 32767L;
  
  private static final long INT_MIN = -2147483648L;
  
  private static final long INT_MAX = 2147483647L;
  
  public ImmutableLongValueImpl(long paramLong) { this.value = paramLong; }
  
  public ValueType getValueType() { return ValueType.INTEGER; }
  
  public ImmutableIntegerValue immutableValue() { return this; }
  
  public ImmutableNumberValue asNumberValue() { return this; }
  
  public ImmutableIntegerValue asIntegerValue() { return this; }
  
  public byte toByte() { return (byte)(int)this.value; }
  
  public short toShort() { return (short)(int)this.value; }
  
  public int toInt() { return (int)this.value; }
  
  public long toLong() { return this.value; }
  
  public BigInteger toBigInteger() { return BigInteger.valueOf(this.value); }
  
  public float toFloat() { return (float)this.value; }
  
  public double toDouble() { return this.value; }
  
  public boolean isInByteRange() { return (-128L <= this.value && this.value <= 127L); }
  
  public boolean isInShortRange() { return (-32768L <= this.value && this.value <= 32767L); }
  
  public boolean isInIntRange() { return (-2147483648L <= this.value && this.value <= 2147483647L); }
  
  public boolean isInLongRange() { return true; }
  
  public MessageFormat mostSuccinctMessageFormat() { return ImmutableBigIntegerValueImpl.mostSuccinctMessageFormat(this); }
  
  public byte asByte() {
    if (!isInByteRange())
      throw new MessageIntegerOverflowException(this.value); 
    return (byte)(int)this.value;
  }
  
  public short asShort() {
    if (!isInShortRange())
      throw new MessageIntegerOverflowException(this.value); 
    return (short)(int)this.value;
  }
  
  public int asInt() {
    if (!isInIntRange())
      throw new MessageIntegerOverflowException(this.value); 
    return (int)this.value;
  }
  
  public long asLong() { return this.value; }
  
  public BigInteger asBigInteger() { return BigInteger.valueOf(this.value); }
  
  public void writeTo(MessagePacker paramMessagePacker) throws IOException { paramMessagePacker.packLong(this.value); }
  
  public boolean equals(Object paramObject) {
    if (paramObject == this)
      return true; 
    if (!(paramObject instanceof Value))
      return false; 
    Value value1 = (Value)paramObject;
    if (!value1.isIntegerValue())
      return false; 
    IntegerValue integerValue = value1.asIntegerValue();
    if (!integerValue.isInLongRange())
      return false; 
    return (this.value == integerValue.toLong());
  }
  
  public int hashCode() {
    if (-2147483648L <= this.value && this.value <= 2147483647L)
      return (int)this.value; 
    return (int)(this.value ^ this.value >>> 32);
  }
  
  public String toJson() { return Long.toString(this.value); }
  
  public String toString() { return toJson(); }
}
