package org.msgpack.value.impl;

import java.io.IOException;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import org.msgpack.core.MessagePacker;
import org.msgpack.value.ArrayValue;
import org.msgpack.value.ImmutableArrayValue;
import org.msgpack.value.ImmutableBinaryValue;
import org.msgpack.value.ImmutableBooleanValue;
import org.msgpack.value.ImmutableExtensionValue;
import org.msgpack.value.ImmutableFloatValue;
import org.msgpack.value.ImmutableIntegerValue;
import org.msgpack.value.ImmutableMapValue;
import org.msgpack.value.ImmutableNilValue;
import org.msgpack.value.ImmutableNumberValue;
import org.msgpack.value.ImmutableRawValue;
import org.msgpack.value.ImmutableStringValue;
import org.msgpack.value.ImmutableTimestampValue;
import org.msgpack.value.ImmutableValue;
import org.msgpack.value.Value;
import org.msgpack.value.ValueType;

public class ImmutableArrayValueImpl extends AbstractImmutableValue implements ImmutableArrayValue {
  private static final ImmutableArrayValueImpl EMPTY = new ImmutableArrayValueImpl(new Value[0]);
  
  private final Value[] array;
  
  public static ImmutableArrayValue empty() { return EMPTY; }
  
  public ImmutableArrayValueImpl(Value[] paramArrayOfValue) { this.array = paramArrayOfValue; }
  
  public ValueType getValueType() { return ValueType.ARRAY; }
  
  public ImmutableArrayValue immutableValue() { return this; }
  
  public ImmutableArrayValue asArrayValue() { return this; }
  
  public int size() { return this.array.length; }
  
  public Value get(int paramInt) { return this.array[paramInt]; }
  
  public Value getOrNilValue(int paramInt) {
    if (paramInt < this.array.length && paramInt >= 0)
      return this.array[paramInt]; 
    return ImmutableNilValueImpl.get();
  }
  
  public Iterator<Value> iterator() { return new Ite(this.array); }
  
  public List<Value> list() { return new ImmutableArrayValueList(this.array); }
  
  public void writeTo(MessagePacker paramMessagePacker) throws IOException {
    paramMessagePacker.packArrayHeader(this.array.length);
    for (byte b = 0; b < this.array.length; b++)
      this.array[b].writeTo(paramMessagePacker); 
  }
  
  public boolean equals(Object paramObject) {
    if (paramObject == this)
      return true; 
    if (!(paramObject instanceof Value))
      return false; 
    Value value = (Value)paramObject;
    if (value instanceof ImmutableArrayValueImpl) {
      ImmutableArrayValueImpl immutableArrayValueImpl = (ImmutableArrayValueImpl)value;
      return Arrays.equals(this.array, immutableArrayValueImpl.array);
    } 
    if (!value.isArrayValue())
      return false; 
    ArrayValue arrayValue = value.asArrayValue();
    if (size() != arrayValue.size())
      return false; 
    Iterator iterator = arrayValue.iterator();
    byte b = 0;
    while (b < this.array.length) {
      if (!iterator.hasNext() || !this.array[b].equals(iterator.next()))
        return false; 
      b++;
    } 
    return true;
  }
  
  public int hashCode() {
    int i = 1;
    for (byte b = 0; b < this.array.length; b++) {
      Value value = this.array[b];
      i = 31 * i + value.hashCode();
    } 
    return i;
  }
  
  public String toJson() {
    if (this.array.length == 0)
      return "[]"; 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("[");
    stringBuilder.append(this.array[0].toJson());
    for (byte b = 1; b < this.array.length; b++) {
      stringBuilder.append(",");
      stringBuilder.append(this.array[b].toJson());
    } 
    stringBuilder.append("]");
    return stringBuilder.toString();
  }
  
  public String toString() {
    if (this.array.length == 0)
      return "[]"; 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("[");
    appendString(stringBuilder, this.array[0]);
    for (byte b = 1; b < this.array.length; b++) {
      stringBuilder.append(",");
      appendString(stringBuilder, this.array[b]);
    } 
    stringBuilder.append("]");
    return stringBuilder.toString();
  }
  
  private static void appendString(StringBuilder paramStringBuilder, Value paramValue) {
    if (paramValue.isRawValue()) {
      paramStringBuilder.append(paramValue.toJson());
    } else {
      paramStringBuilder.append(paramValue.toString());
    } 
  }
}
