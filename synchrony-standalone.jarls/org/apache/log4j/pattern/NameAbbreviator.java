package org.apache.log4j.pattern;

import java.util.ArrayList;

public abstract class NameAbbreviator {
  private static final NameAbbreviator DEFAULT = new NOPAbbreviator();
  
  public static NameAbbreviator getAbbreviator(String pattern) {
    if (pattern.length() > 0) {
      String trimmed = pattern.trim();
      if (trimmed.length() == 0)
        return DEFAULT; 
      int i = 0;
      if (trimmed.length() > 0) {
        if (trimmed.charAt(0) == '-')
          i++; 
        for (; i < trimmed.length() && trimmed.charAt(i) >= '0' && trimmed.charAt(i) <= '9'; i++);
      } 
      if (i == trimmed.length()) {
        int elements = Integer.parseInt(trimmed);
        if (elements >= 0)
          return new MaxElementAbbreviator(elements); 
        return new DropElementAbbreviator(-elements);
      } 
      ArrayList fragments = new ArrayList(5);
      int pos = 0;
      while (pos < trimmed.length() && pos >= 0) {
        int charCount, ellipsisPos = pos;
        if (trimmed.charAt(pos) == '*') {
          charCount = Integer.MAX_VALUE;
          ellipsisPos++;
        } else if (trimmed.charAt(pos) >= '0' && trimmed.charAt(pos) <= '9') {
          charCount = trimmed.charAt(pos) - '0';
          ellipsisPos++;
        } else {
          charCount = 0;
        } 
        char ellipsis = Character.MIN_VALUE;
        if (ellipsisPos < trimmed.length()) {
          ellipsis = trimmed.charAt(ellipsisPos);
          if (ellipsis == '.')
            ellipsis = Character.MIN_VALUE; 
        } 
        fragments.add(new PatternAbbreviatorFragment(charCount, ellipsis));
        pos = trimmed.indexOf(".", pos);
        if (pos == -1)
          break; 
        pos++;
      } 
      return new PatternAbbreviator(fragments);
    } 
    return DEFAULT;
  }
  
  public static NameAbbreviator getDefaultAbbreviator() { return DEFAULT; }
  
  public abstract void abbreviate(int paramInt, StringBuffer paramStringBuffer);
}
