package org.apache.log4j.net;

import java.io.IOException;
import java.io.InterruptedIOException;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.util.Vector;
import org.apache.log4j.AppenderSkeleton;
import org.apache.log4j.helpers.CyclicBuffer;
import org.apache.log4j.helpers.LogLog;
import org.apache.log4j.spi.LoggingEvent;

public class SocketHubAppender extends AppenderSkeleton {
  static final int DEFAULT_PORT = 4560;
  
  private int port = 4560;
  
  private Vector oosList = new Vector();
  
  private ServerMonitor serverMonitor = null;
  
  private boolean locationInfo = false;
  
  private CyclicBuffer buffer = null;
  
  private String application;
  
  private boolean advertiseViaMulticastDNS;
  
  private ZeroConfSupport zeroConf;
  
  public static final String ZONE = "_log4j_obj_tcpaccept_appender.local.";
  
  private ServerSocket serverSocket;
  
  public SocketHubAppender(int _port) {
    this.port = _port;
    startServer();
  }
  
  public void activateOptions() {
    if (this.advertiseViaMulticastDNS) {
      this.zeroConf = new ZeroConfSupport("_log4j_obj_tcpaccept_appender.local.", this.port, getName());
      this.zeroConf.advertise();
    } 
    startServer();
  }
  
  public void close() {
    if (this.closed)
      return; 
    LogLog.debug("closing SocketHubAppender " + getName());
    this.closed = true;
    if (this.advertiseViaMulticastDNS)
      this.zeroConf.unadvertise(); 
    cleanUp();
    LogLog.debug("SocketHubAppender " + getName() + " closed");
  }
  
  public void cleanUp() {
    LogLog.debug("stopping ServerSocket");
    this.serverMonitor.stopMonitor();
    this.serverMonitor = null;
    LogLog.debug("closing client connections");
    while (this.oosList.size() != 0) {
      ObjectOutputStream oos = (ObjectOutputStream)this.oosList.elementAt(0);
      if (oos != null) {
        try {
          oos.close();
        } catch (InterruptedIOException e) {
          Thread.currentThread().interrupt();
          LogLog.error("could not close oos.", e);
        } catch (IOException e) {
          LogLog.error("could not close oos.", e);
        } 
        this.oosList.removeElementAt(0);
      } 
    } 
  }
  
  public void append(LoggingEvent event) {
    if (event != null) {
      if (this.locationInfo)
        event.getLocationInformation(); 
      if (this.application != null)
        event.setProperty("application", this.application); 
      event.getNDC();
      event.getThreadName();
      event.getMDCCopy();
      event.getRenderedMessage();
      event.getThrowableStrRep();
      if (this.buffer != null)
        this.buffer.add(event); 
    } 
    if (event == null || this.oosList.size() == 0)
      return; 
    for (int streamCount = 0; streamCount < this.oosList.size(); streamCount++) {
      ObjectOutputStream oos = null;
      try {
        oos = (ObjectOutputStream)this.oosList.elementAt(streamCount);
      } catch (ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException) {}
      if (oos == null)
        break; 
      try {
        oos.writeObject(event);
        oos.flush();
        oos.reset();
      } catch (IOException e) {
        if (e instanceof InterruptedIOException)
          Thread.currentThread().interrupt(); 
        this.oosList.removeElementAt(streamCount);
        LogLog.debug("dropped connection");
        streamCount--;
      } 
    } 
  }
  
  public boolean requiresLayout() { return false; }
  
  public void setPort(int _port) { this.port = _port; }
  
  public void setApplication(String lapp) { this.application = lapp; }
  
  public String getApplication() { return this.application; }
  
  public int getPort() { return this.port; }
  
  public void setBufferSize(int _bufferSize) { this.buffer = new CyclicBuffer(_bufferSize); }
  
  public int getBufferSize() {
    if (this.buffer == null)
      return 0; 
    return this.buffer.getMaxSize();
  }
  
  public void setLocationInfo(boolean _locationInfo) { this.locationInfo = _locationInfo; }
  
  public boolean getLocationInfo() { return this.locationInfo; }
  
  public void setAdvertiseViaMulticastDNS(boolean advertiseViaMulticastDNS) { this.advertiseViaMulticastDNS = advertiseViaMulticastDNS; }
  
  public boolean isAdvertiseViaMulticastDNS() { return this.advertiseViaMulticastDNS; }
  
  private void startServer() { this.serverMonitor = new ServerMonitor(this, this.port, this.oosList); }
  
  protected ServerSocket createServerSocket(int socketPort) throws IOException { return new ServerSocket(socketPort); }
  
  public SocketHubAppender() {}
}
