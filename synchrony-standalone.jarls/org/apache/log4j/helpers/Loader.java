package org.apache.log4j.helpers;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.net.URL;

public class Loader {
  static final String TSTR = "Caught Exception while in Loader.getResource. This may be innocuous.";
  
  private static boolean ignoreTCL = false;
  
  static  {
    ignoreTCLProp = OptionConverter.getSystemProperty("log4j.ignoreTCL", null);
    if (ignoreTCLProp != null)
      ignoreTCL = OptionConverter.toBoolean(ignoreTCLProp, true); 
  }
  
  public static URL getResource(String resource, Class clazz) { return getResource(resource); }
  
  public static URL getResource(String resource) {
    ClassLoader classLoader = null;
    URL url = null;
    try {
      classLoader = Loader.class.getClassLoader();
      if (classLoader != null) {
        LogLog.debug("Trying to find [" + resource + "] using " + classLoader + " class loader.");
        url = classLoader.getResource(resource);
        if (url != null)
          return url; 
      } 
    } catch (SecurityException t) {
      LogLog.warn("Caught Exception while in Loader.getResource. This may be innocuous.", t);
    } 
    LogLog.debug("Trying to find [" + resource + "] using ClassLoader.getSystemResource().");
    return ClassLoader.getSystemResource(resource);
  }
  
  @Deprecated
  public static boolean isJava1() { return false; }
  
  private static ClassLoader getTCL() throws IllegalAccessException, InvocationTargetException {
    method = null;
    try {
      method = Thread.class.getMethod("getContextClassLoader", null);
    } catch (NoSuchMethodException e) {
      return null;
    } 
    return (ClassLoader)method.invoke(Thread.currentThread(), null);
  }
  
  public static Class loadClass(String clazz) throws ClassNotFoundException { return Class.forName(clazz); }
}
