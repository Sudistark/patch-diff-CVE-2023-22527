package org.apache.commons.compress.compressors.lzma;

import java.util.HashMap;
import java.util.Map;
import org.apache.commons.compress.compressors.FileNameUtil;
import org.apache.commons.compress.utils.OsgiUtils;

public class LZMAUtils {
  private static final FileNameUtil fileNameUtil;
  
  private static final byte[] HEADER_MAGIC = { 93, 0, 0 };
  
  static  {
    uncompressSuffix = new HashMap();
    uncompressSuffix.put(".lzma", "");
    uncompressSuffix.put("-lzma", "");
    fileNameUtil = new FileNameUtil(uncompressSuffix, ".lzma");
    cachedLZMAAvailability = CachedAvailability.DONT_CACHE;
    setCacheLZMAAvailablity(!OsgiUtils.isRunningInOsgiEnvironment());
  }
  
  static CachedAvailability getCachedLZMAAvailability() { return cachedLZMAAvailability; }
  
  public static String getCompressedFilename(String fileName) { return fileNameUtil.getCompressedFilename(fileName); }
  
  public static String getUncompressedFilename(String fileName) { return fileNameUtil.getUncompressedFilename(fileName); }
  
  private static boolean internalIsLZMACompressionAvailable() {
    try {
      LZMACompressorInputStream.matches(null, 0);
      return true;
    } catch (NoClassDefFoundError error) {
      return false;
    } 
  }
  
  public static boolean isCompressedFilename(String fileName) { return fileNameUtil.isCompressedFilename(fileName); }
  
  public static boolean isLZMACompressionAvailable() {
    cachedResult = cachedLZMAAvailability;
    if (cachedResult != CachedAvailability.DONT_CACHE)
      return (cachedResult == CachedAvailability.CACHED_AVAILABLE); 
    return internalIsLZMACompressionAvailable();
  }
  
  public static boolean matches(byte[] signature, int length) {
    if (length < HEADER_MAGIC.length)
      return false; 
    for (int i = 0; i < HEADER_MAGIC.length; i++) {
      if (signature[i] != HEADER_MAGIC[i])
        return false; 
    } 
    return true;
  }
  
  public static void setCacheLZMAAvailablity(boolean doCache) {
    if (!doCache) {
      cachedLZMAAvailability = CachedAvailability.DONT_CACHE;
    } else if (cachedLZMAAvailability == CachedAvailability.DONT_CACHE) {
      boolean hasLzma = internalIsLZMACompressionAvailable();
      cachedLZMAAvailability = hasLzma ? CachedAvailability.CACHED_AVAILABLE : CachedAvailability.CACHED_UNAVAILABLE;
    } 
  }
}
