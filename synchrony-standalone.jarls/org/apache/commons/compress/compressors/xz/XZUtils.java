package org.apache.commons.compress.compressors.xz;

import java.util.HashMap;
import java.util.Map;
import org.apache.commons.compress.compressors.FileNameUtil;
import org.apache.commons.compress.utils.OsgiUtils;

public class XZUtils {
  private static final FileNameUtil fileNameUtil;
  
  private static final byte[] HEADER_MAGIC = { -3, 55, 122, 88, 90, 0 };
  
  static  {
    uncompressSuffix = new HashMap();
    uncompressSuffix.put(".txz", ".tar");
    uncompressSuffix.put(".xz", "");
    uncompressSuffix.put("-xz", "");
    fileNameUtil = new FileNameUtil(uncompressSuffix, ".xz");
    cachedXZAvailability = CachedAvailability.DONT_CACHE;
    setCacheXZAvailablity(!OsgiUtils.isRunningInOsgiEnvironment());
  }
  
  static CachedAvailability getCachedXZAvailability() { return cachedXZAvailability; }
  
  public static String getCompressedFilename(String fileName) { return fileNameUtil.getCompressedFilename(fileName); }
  
  public static String getUncompressedFilename(String fileName) { return fileNameUtil.getUncompressedFilename(fileName); }
  
  private static boolean internalIsXZCompressionAvailable() {
    try {
      XZCompressorInputStream.matches(null, 0);
      return true;
    } catch (NoClassDefFoundError error) {
      return false;
    } 
  }
  
  public static boolean isCompressedFilename(String fileName) { return fileNameUtil.isCompressedFilename(fileName); }
  
  public static boolean isXZCompressionAvailable() {
    cachedResult = cachedXZAvailability;
    if (cachedResult != CachedAvailability.DONT_CACHE)
      return (cachedResult == CachedAvailability.CACHED_AVAILABLE); 
    return internalIsXZCompressionAvailable();
  }
  
  public static boolean matches(byte[] signature, int length) {
    if (length < HEADER_MAGIC.length)
      return false; 
    for (int i = 0; i < HEADER_MAGIC.length; i++) {
      if (signature[i] != HEADER_MAGIC[i])
        return false; 
    } 
    return true;
  }
  
  public static void setCacheXZAvailablity(boolean doCache) {
    if (!doCache) {
      cachedXZAvailability = CachedAvailability.DONT_CACHE;
    } else if (cachedXZAvailability == CachedAvailability.DONT_CACHE) {
      boolean hasXz = internalIsXZCompressionAvailable();
      cachedXZAvailability = hasXz ? CachedAvailability.CACHED_AVAILABLE : CachedAvailability.CACHED_UNAVAILABLE;
    } 
  }
}
