package org.apache.commons.compress.compressors.pack200;

import java.io.IOException;
import java.io.OutputStream;
import java.util.Map;
import java.util.jar.JarInputStream;
import org.apache.commons.compress.compressors.CompressorOutputStream;
import org.apache.commons.compress.java.util.jar.Pack200;

public class Pack200CompressorOutputStream extends CompressorOutputStream {
  private boolean finished;
  
  private final OutputStream originalOutput;
  
  private final AbstractStreamBridge abstractStreamBridge;
  
  private final Map<String, String> properties;
  
  public Pack200CompressorOutputStream(OutputStream out) throws IOException { this(out, Pack200Strategy.IN_MEMORY); }
  
  public Pack200CompressorOutputStream(OutputStream out, Map<String, String> props) throws IOException { this(out, Pack200Strategy.IN_MEMORY, props); }
  
  public Pack200CompressorOutputStream(OutputStream out, Pack200Strategy mode) throws IOException { this(out, mode, null); }
  
  public Pack200CompressorOutputStream(OutputStream out, Pack200Strategy mode, Map<String, String> props) throws IOException {
    this.originalOutput = out;
    this.abstractStreamBridge = mode.newStreamBridge();
    this.properties = props;
  }
  
  public void close() throws IOException {
    try {
      finish();
    } finally {
      try {
        this.abstractStreamBridge.stop();
      } finally {
        this.originalOutput.close();
      } 
    } 
  }
  
  public void finish() throws IOException {
    if (!this.finished) {
      this.finished = true;
      Pack200.Packer p = Pack200.newPacker();
      if (this.properties != null)
        p.properties().putAll(this.properties); 
      JarInputStream ji = new JarInputStream(this.abstractStreamBridge.getInput());
      try {
        p.pack(ji, this.originalOutput);
        ji.close();
      } catch (Throwable throwable) {
        try {
          ji.close();
        } catch (Throwable throwable1) {
          throwable.addSuppressed(throwable1);
        } 
        throw throwable;
      } 
    } 
  }
  
  public void write(byte[] b) throws IOException { this.abstractStreamBridge.write(b); }
  
  public void write(byte[] b, int from, int length) throws IOException { this.abstractStreamBridge.write(b, from, length); }
  
  public void write(int b) throws IOException { this.abstractStreamBridge.write(b); }
}
