package org.apache.commons.compress.archivers;

import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.nio.file.LinkOption;
import java.nio.file.Path;

public abstract class ArchiveOutputStream extends OutputStream {
  static final int BYTE_MASK = 255;
  
  private final byte[] oneByte = new byte[1];
  
  private long bytesWritten;
  
  public boolean canWriteEntryData(ArchiveEntry archiveEntry) { return true; }
  
  public abstract void closeArchiveEntry();
  
  protected void count(int written) { count(written); }
  
  protected void count(long written) {
    if (written != -1L)
      this.bytesWritten += written; 
  }
  
  public abstract ArchiveEntry createArchiveEntry(File paramFile, String paramString) throws IOException;
  
  public ArchiveEntry createArchiveEntry(Path inputPath, String entryName, LinkOption... options) throws IOException { return createArchiveEntry(inputPath.toFile(), entryName); }
  
  public abstract void finish();
  
  public long getBytesWritten() { return this.bytesWritten; }
  
  @Deprecated
  public int getCount() { return (int)this.bytesWritten; }
  
  public abstract void putArchiveEntry(ArchiveEntry paramArchiveEntry) throws IOException;
  
  public void write(int b) {
    this.oneByte[0] = (byte)(b & 0xFF);
    write(this.oneByte, 0, 1);
  }
}
