package org.apache.commons.compress.archivers;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.util.Enumeration;
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.SevenZFile;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarFile;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipFile;

public final class Lister {
  private static final ArchiveStreamFactory FACTORY = ArchiveStreamFactory.DEFAULT;
  
  private static ArchiveInputStream createArchiveInputStream(String[] args, InputStream fis) throws ArchiveException {
    if (args.length > 1)
      return FACTORY.createArchiveInputStream(args[1], fis); 
    return FACTORY.createArchiveInputStream(fis);
  }
  
  private static String detectFormat(File f) throws ArchiveException, IOException {
    InputStream fis = new BufferedInputStream(Files.newInputStream(f.toPath(), new java.nio.file.OpenOption[0]));
    try {
      String str = ArchiveStreamFactory.detect(fis);
      fis.close();
      return str;
    } catch (Throwable throwable) {
      try {
        fis.close();
      } catch (Throwable throwable1) {
        throwable.addSuppressed(throwable1);
      } 
      throw throwable;
    } 
  }
  
  private static void list7z(File f) throws IOException {
    SevenZFile z = new SevenZFile(f);
    try {
      System.out.println("Created " + z);
      SevenZArchiveEntry sevenZArchiveEntry;
      while ((sevenZArchiveEntry = z.getNextEntry()) != null) {
        String name = (sevenZArchiveEntry.getName() == null) ? (z.getDefaultName() + " (entry name was null)") : sevenZArchiveEntry.getName();
        System.out.println(name);
      } 
      z.close();
    } catch (Throwable throwable) {
      try {
        z.close();
      } catch (Throwable throwable1) {
        throwable.addSuppressed(throwable1);
      } 
      throw throwable;
    } 
  }
  
  private static void listStream(File f, String[] args) throws ArchiveException, IOException {
    InputStream fis = new BufferedInputStream(Files.newInputStream(f.toPath(), new java.nio.file.OpenOption[0]));
    try {
      ArchiveInputStream ais = createArchiveInputStream(args, fis);
      try {
        System.out.println("Created " + ais.toString());
        ArchiveEntry ae;
        while ((ae = ais.getNextEntry()) != null)
          System.out.println(ae.getName()); 
        if (ais != null)
          ais.close(); 
      } catch (Throwable throwable) {
        if (ais != null)
          try {
            ais.close();
          } catch (Throwable throwable1) {
            throwable.addSuppressed(throwable1);
          }  
        throw throwable;
      } 
      fis.close();
    } catch (Throwable throwable) {
      try {
        fis.close();
      } catch (Throwable throwable1) {
        throwable.addSuppressed(throwable1);
      } 
      throw throwable;
    } 
  }
  
  private static void listZipUsingTarFile(File f) throws IOException {
    TarFile t = new TarFile(f);
    try {
      System.out.println("Created " + t);
      t.getEntries().forEach(en -> System.out.println(en.getName()));
      t.close();
    } catch (Throwable throwable) {
      try {
        t.close();
      } catch (Throwable throwable1) {
        throwable.addSuppressed(throwable1);
      } 
      throw throwable;
    } 
  }
  
  private static void listZipUsingZipFile(File f) throws IOException {
    ZipFile z = new ZipFile(f);
    try {
      System.out.println("Created " + z);
      for (Enumeration<ZipArchiveEntry> en = z.getEntries(); en.hasMoreElements();)
        System.out.println(((ZipArchiveEntry)en.nextElement()).getName()); 
      z.close();
    } catch (Throwable throwable) {
      try {
        z.close();
      } catch (Throwable throwable1) {
        throwable.addSuppressed(throwable1);
      } 
      throw throwable;
    } 
  }
  
  public static void main(String[] args) throws ArchiveException, IOException {
    if (args.length == 0) {
      usage();
      return;
    } 
    System.out.println("Analysing " + args[0]);
    File f = new File(args[0]);
    if (!f.isFile())
      System.err.println(f + " doesn't exist or is a directory"); 
    String format = (args.length > 1) ? args[1] : detectFormat(f);
    if ("7z".equalsIgnoreCase(format)) {
      list7z(f);
    } else if ("zipfile".equals(format)) {
      listZipUsingZipFile(f);
    } else if ("tarfile".equals(format)) {
      listZipUsingTarFile(f);
    } else {
      listStream(f, args);
    } 
  }
  
  private static void usage() {
    System.out.println("Parameters: archive-name [archive-type]\n");
    System.out.println("The magic archive-type 'zipfile' prefers ZipFile over ZipArchiveInputStream");
    System.out.println("The magic archive-type 'tarfile' prefers TarFile over TarArchiveInputStream");
  }
}
