package org.apache.commons.compress.archivers.sevenz;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import org.tukaani.xz.DeltaOptions;
import org.tukaani.xz.FinishableWrapperOutputStream;
import org.tukaani.xz.UnsupportedOptionsException;

class DeltaDecoder extends AbstractCoder {
  DeltaDecoder() { super(new Class[] { Number.class }); }
  
  InputStream decode(String archiveName, InputStream in, long uncompressedLength, Coder coder, byte[] password, int maxMemoryLimitInKb) throws IOException { return (new DeltaOptions(getOptionsFromCoder(coder))).getInputStream(in); }
  
  OutputStream encode(OutputStream out, Object options) throws IOException {
    int distance = toInt(options, 1);
    try {
      return (new DeltaOptions(distance)).getOutputStream(new FinishableWrapperOutputStream(out));
    } catch (UnsupportedOptionsException ex) {
      throw new IOException(ex.getMessage());
    } 
  }
  
  byte[] getOptionsAsProperties(Object options) {
    return new byte[] { (byte)(toInt(options, 1) - 1) };
  }
  
  private int getOptionsFromCoder(Coder coder) {
    if (coder.properties == null || coder.properties.length == 0)
      return 1; 
    return (0xFF & coder.properties[0]) + '\001';
  }
  
  Object getOptionsFromCoder(Coder coder, InputStream in) { return Integer.valueOf(getOptionsFromCoder(coder)); }
}
