package org.apache.commons.compress.archivers.sevenz;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Objects;
import java.util.stream.Stream;
import org.apache.commons.compress.utils.ByteUtils;

abstract class AbstractCoder {
  private final Class<?>[] optionClasses;
  
  protected static int toInt(Object options, int defaultValue) { return (options instanceof Number) ? ((Number)options).intValue() : defaultValue; }
  
  protected AbstractCoder(Class... optionClasses) { this.optionClasses = (Class[])Objects.requireNonNull(optionClasses, "optionClasses"); }
  
  abstract InputStream decode(String paramString, InputStream paramInputStream, long paramLong, Coder paramCoder, byte[] paramArrayOfByte, int paramInt) throws IOException;
  
  OutputStream encode(OutputStream out, Object options) throws IOException { throw new UnsupportedOperationException("Method doesn't support writing"); }
  
  byte[] getOptionsAsProperties(Object options) throws IOException { return ByteUtils.EMPTY_BYTE_ARRAY; }
  
  Object getOptionsFromCoder(Coder coder, InputStream in) throws IOException { return null; }
  
  boolean isOptionInstance(Object opts) { return Stream.of(this.optionClasses).anyMatch(c -> c.isInstance(opts)); }
}
