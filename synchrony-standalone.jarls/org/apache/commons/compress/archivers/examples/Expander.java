package org.apache.commons.compress.archivers.examples;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.channels.Channels;
import java.nio.channels.FileChannel;
import java.nio.channels.SeekableByteChannel;
import java.nio.file.Files;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Objects;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.ArchiveException;
import org.apache.commons.compress.archivers.ArchiveInputStream;
import org.apache.commons.compress.archivers.ArchiveStreamFactory;
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.SevenZFile;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarFile;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipFile;
import org.apache.commons.compress.utils.IOUtils;

public class Expander {
  private <T extends ArchiveEntry> void expand(ArchiveEntrySupplier<T> supplier, ArchiveEntryBiConsumer<T> writer, Path targetDirectory) throws IOException {
    boolean nullTarget = (targetDirectory == null);
    Path targetDirPath = nullTarget ? null : targetDirectory.normalize();
    T nextEntry = (T)supplier.get();
    while (nextEntry != null) {
      Path targetPath = nullTarget ? null : targetDirectory.resolve(nextEntry.getName());
      if (!nullTarget && !targetPath.normalize().startsWith(targetDirPath) && !Files.isSameFile(targetDirectory, targetPath))
        throw new IOException("Expanding " + nextEntry.getName() + " would create file outside of " + targetDirectory); 
      if (nextEntry.isDirectory()) {
        if (!nullTarget && !Files.isDirectory(targetPath, new java.nio.file.LinkOption[0]) && Files.createDirectories(targetPath, new java.nio.file.attribute.FileAttribute[false]) == null)
          throw new IOException("Failed to create directory " + targetPath); 
      } else {
        Path parent = nullTarget ? null : targetPath.getParent();
        if (!nullTarget && !Files.isDirectory(parent, new java.nio.file.LinkOption[0]) && Files.createDirectories(parent, new java.nio.file.attribute.FileAttribute[false]) == null)
          throw new IOException("Failed to create directory " + parent); 
        if (nullTarget) {
          writer.accept(nextEntry, null);
        } else {
          OutputStream outputStream = Files.newOutputStream(targetPath, new OpenOption[0]);
          try {
            writer.accept(nextEntry, outputStream);
            if (outputStream != null)
              outputStream.close(); 
          } catch (Throwable throwable) {
            if (outputStream != null)
              try {
                outputStream.close();
              } catch (Throwable throwable1) {
                throwable.addSuppressed(throwable1);
              }  
            throw throwable;
          } 
        } 
      } 
      nextEntry = (T)supplier.get();
    } 
  }
  
  public void expand(ArchiveInputStream archive, File targetDirectory) throws IOException { expand(archive, toPath(targetDirectory)); }
  
  public void expand(ArchiveInputStream archive, Path targetDirectory) throws IOException { expand(() -> {
          ArchiveEntry next = archive.getNextEntry();
          while (next != null && !archive.canReadEntryData(next))
            next = archive.getNextEntry(); 
          return next;
        }(entry, out) -> IOUtils.copy(archive, out), targetDirectory); }
  
  public void expand(File archive, File targetDirectory) throws IOException, ArchiveException { expand(archive.toPath(), toPath(targetDirectory)); }
  
  @Deprecated
  public void expand(InputStream archive, File targetDirectory) throws IOException, ArchiveException { expand(archive, targetDirectory, CloseableConsumer.NULL_CONSUMER); }
  
  public void expand(InputStream archive, File targetDirectory, CloseableConsumer closeableConsumer) throws IOException, ArchiveException {
    CloseableConsumerAdapter c = new CloseableConsumerAdapter(closeableConsumer);
    try {
      expand((ArchiveInputStream)c.track(ArchiveStreamFactory.DEFAULT.createArchiveInputStream(archive)), targetDirectory);
      c.close();
    } catch (Throwable throwable) {
      try {
        c.close();
      } catch (Throwable throwable1) {
        throwable.addSuppressed(throwable1);
      } 
      throw throwable;
    } 
  }
  
  public void expand(Path archive, Path targetDirectory) throws IOException, ArchiveException {
    InputStream inputStream = new BufferedInputStream(Files.newInputStream(archive, new OpenOption[0]));
    try {
      String format = ArchiveStreamFactory.detect(inputStream);
      expand(format, archive, targetDirectory);
      inputStream.close();
    } catch (Throwable throwable) {
      try {
        inputStream.close();
      } catch (Throwable throwable1) {
        throwable.addSuppressed(throwable1);
      } 
      throw throwable;
    } 
  }
  
  public void expand(SevenZFile archive, File targetDirectory) throws IOException { expand(archive, toPath(targetDirectory)); }
  
  public void expand(SevenZFile archive, Path targetDirectory) throws IOException { Objects.requireNonNull(archive);
    expand(archive::getNextEntry, (entry, out) -> {
          byte[] buffer = new byte[8192];
          int n;
          while (-1 != (n = archive.read(buffer))) {
            if (out != null)
              out.write(buffer, 0, n); 
          } 
        }targetDirectory); }
  
  public void expand(String format, File archive, File targetDirectory) throws IOException, ArchiveException { expand(format, archive.toPath(), toPath(targetDirectory)); }
  
  @Deprecated
  public void expand(String format, InputStream archive, File targetDirectory) throws IOException, ArchiveException { expand(format, archive, targetDirectory, CloseableConsumer.NULL_CONSUMER); }
  
  public void expand(String format, InputStream archive, File targetDirectory, CloseableConsumer closeableConsumer) throws IOException, ArchiveException { expand(format, archive, toPath(targetDirectory), closeableConsumer); }
  
  public void expand(String format, InputStream archive, Path targetDirectory, CloseableConsumer closeableConsumer) throws IOException, ArchiveException {
    CloseableConsumerAdapter c = new CloseableConsumerAdapter(closeableConsumer);
    try {
      expand((ArchiveInputStream)c.track(ArchiveStreamFactory.DEFAULT.createArchiveInputStream(format, archive)), targetDirectory);
      c.close();
    } catch (Throwable throwable) {
      try {
        c.close();
      } catch (Throwable throwable1) {
        throwable.addSuppressed(throwable1);
      } 
      throw throwable;
    } 
  }
  
  public void expand(String format, Path archive, Path targetDirectory) throws IOException, ArchiveException {
    if (prefersSeekableByteChannel(format)) {
      SeekableByteChannel channel = FileChannel.open(archive, new OpenOption[] { StandardOpenOption.READ });
      try {
        expand(format, channel, targetDirectory, CloseableConsumer.CLOSING_CONSUMER);
        if (channel != null)
          channel.close(); 
      } catch (Throwable throwable) {
        if (channel != null)
          try {
            channel.close();
          } catch (Throwable throwable1) {
            throwable.addSuppressed(throwable1);
          }  
        throw throwable;
      } 
      return;
    } 
    InputStream inputStream = new BufferedInputStream(Files.newInputStream(archive, new OpenOption[0]));
    try {
      expand(format, inputStream, targetDirectory, CloseableConsumer.CLOSING_CONSUMER);
      inputStream.close();
    } catch (Throwable throwable) {
      try {
        inputStream.close();
      } catch (Throwable throwable1) {
        throwable.addSuppressed(throwable1);
      } 
      throw throwable;
    } 
  }
  
  @Deprecated
  public void expand(String format, SeekableByteChannel archive, File targetDirectory) throws IOException, ArchiveException { expand(format, archive, targetDirectory, CloseableConsumer.NULL_CONSUMER); }
  
  public void expand(String format, SeekableByteChannel archive, File targetDirectory, CloseableConsumer closeableConsumer) throws IOException, ArchiveException { expand(format, archive, toPath(targetDirectory), closeableConsumer); }
  
  public void expand(String format, SeekableByteChannel archive, Path targetDirectory, CloseableConsumer closeableConsumer) throws IOException, ArchiveException {
    CloseableConsumerAdapter c = new CloseableConsumerAdapter(closeableConsumer);
    try {
      if (!prefersSeekableByteChannel(format)) {
        expand(format, (InputStream)c.track(Channels.newInputStream(archive)), targetDirectory, CloseableConsumer.NULL_CONSUMER);
      } else if ("tar".equalsIgnoreCase(format)) {
        expand((TarFile)c.track(new TarFile(archive)), targetDirectory);
      } else if ("zip".equalsIgnoreCase(format)) {
        expand((ZipFile)c.track(new ZipFile(archive)), targetDirectory);
      } else if ("7z".equalsIgnoreCase(format)) {
        expand((SevenZFile)c.track(new SevenZFile(archive)), targetDirectory);
      } else {
        throw new ArchiveException("Don't know how to handle format " + format);
      } 
      c.close();
    } catch (Throwable throwable) {
      try {
        c.close();
      } catch (Throwable throwable1) {
        throwable.addSuppressed(throwable1);
      } 
      throw throwable;
    } 
  }
  
  public void expand(TarFile archive, File targetDirectory) throws IOException { expand(archive, toPath(targetDirectory)); }
  
  public void expand(TarFile archive, Path targetDirectory) throws IOException {
    Iterator<TarArchiveEntry> entryIterator = archive.getEntries().iterator();
    expand(() -> entryIterator.hasNext() ? (TarArchiveEntry)entryIterator.next() : null, (entry, out) -> {
          InputStream in = archive.getInputStream(entry);
          try {
            IOUtils.copy(in, out);
            if (in != null)
              in.close(); 
          } catch (Throwable throwable) {
            if (in != null)
              try {
                in.close();
              } catch (Throwable throwable1) {
                throwable.addSuppressed(throwable1);
              }  
            throw throwable;
          } 
        }targetDirectory);
  }
  
  public void expand(ZipFile archive, File targetDirectory) throws IOException { expand(archive, toPath(targetDirectory)); }
  
  public void expand(ZipFile archive, Path targetDirectory) throws IOException {
    Enumeration<ZipArchiveEntry> entries = archive.getEntries();
    expand(() -> {
          ZipArchiveEntry next = entries.hasMoreElements() ? (ZipArchiveEntry)entries.nextElement() : null;
          while (next != null && !archive.canReadEntryData(next))
            next = entries.hasMoreElements() ? (ZipArchiveEntry)entries.nextElement() : null; 
          return next;
        }(entry, out) -> {
          InputStream in = archive.getInputStream(entry);
          try {
            IOUtils.copy(in, out);
            if (in != null)
              in.close(); 
          } catch (Throwable throwable) {
            if (in != null)
              try {
                in.close();
              } catch (Throwable throwable1) {
                throwable.addSuppressed(throwable1);
              }  
            throw throwable;
          } 
        }targetDirectory);
  }
  
  private boolean prefersSeekableByteChannel(String format) {
    return ("tar".equalsIgnoreCase(format) || "zip"
      .equalsIgnoreCase(format) || "7z"
      .equalsIgnoreCase(format));
  }
  
  private Path toPath(File targetDirectory) { return (targetDirectory != null) ? targetDirectory.toPath() : null; }
}
