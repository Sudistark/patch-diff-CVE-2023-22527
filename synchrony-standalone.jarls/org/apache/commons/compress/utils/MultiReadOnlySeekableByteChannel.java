package org.apache.commons.compress.utils;

import java.io.File;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.Channel;
import java.nio.channels.ClosedChannelException;
import java.nio.channels.NonWritableChannelException;
import java.nio.channels.SeekableByteChannel;
import java.nio.file.Files;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Objects;

public class MultiReadOnlySeekableByteChannel implements SeekableByteChannel {
  private static final Path[] EMPTY_PATH_ARRAY = new Path[0];
  
  private final List<SeekableByteChannel> channels;
  
  private long globalPosition;
  
  private int currentChannelIdx;
  
  public static SeekableByteChannel forFiles(File... files) throws IOException {
    List<Path> paths = new ArrayList<Path>();
    for (File f : (File[])Objects.requireNonNull(files, "files must not be null"))
      paths.add(f.toPath()); 
    return forPaths((Path[])paths.toArray(EMPTY_PATH_ARRAY));
  }
  
  public static SeekableByteChannel forPaths(Path... paths) throws IOException {
    List<SeekableByteChannel> channels = new ArrayList<SeekableByteChannel>();
    for (Path path : (Path[])Objects.requireNonNull(paths, "paths must not be null")) {
      channels.add(Files.newByteChannel(path, new OpenOption[] { StandardOpenOption.READ }));
    } 
    if (channels.size() == 1)
      return (SeekableByteChannel)channels.get(0); 
    return new MultiReadOnlySeekableByteChannel(channels);
  }
  
  public static SeekableByteChannel forSeekableByteChannels(SeekableByteChannel... channels) {
    if ((SeekableByteChannel[])Objects.requireNonNull(channels, "channels must not be null").length == 1)
      return channels[0]; 
    return new MultiReadOnlySeekableByteChannel(Arrays.asList(channels));
  }
  
  public MultiReadOnlySeekableByteChannel(List<SeekableByteChannel> channels) { this.channels = Collections.unmodifiableList(new ArrayList(
          (Collection)Objects.requireNonNull(channels, "channels must not be null"))); }
  
  public void close() throws IOException {
    IOException first = null;
    for (SeekableByteChannel ch : this.channels) {
      try {
        ch.close();
      } catch (IOException ex) {
        if (first == null)
          first = ex; 
      } 
    } 
    if (first != null)
      throw new IOException("failed to close wrapped channel", first); 
  }
  
  public boolean isOpen() { return this.channels.stream().allMatch(Channel::isOpen); }
  
  public long position() { return this.globalPosition; }
  
  public SeekableByteChannel position(long newPosition) throws IOException {
    if (newPosition < 0L)
      throw new IllegalArgumentException("Negative position: " + newPosition); 
    if (!isOpen())
      throw new ClosedChannelException(); 
    this.globalPosition = newPosition;
    long pos = newPosition;
    for (int i = 0; i < this.channels.size(); i++) {
      long newChannelPos;
      SeekableByteChannel currentChannel = (SeekableByteChannel)this.channels.get(i);
      long size = currentChannel.size();
      if (pos == -1L) {
        newChannelPos = 0L;
      } else if (pos <= size) {
        this.currentChannelIdx = i;
        long tmp = pos;
        pos = -1L;
        newChannelPos = tmp;
      } else {
        pos -= size;
        newChannelPos = size;
      } 
      currentChannel.position(newChannelPos);
    } 
    return this;
  }
  
  public SeekableByteChannel position(long channelNumber, long relativeOffset) throws IOException {
    if (!isOpen())
      throw new ClosedChannelException(); 
    long globalPosition = relativeOffset;
    for (int i = 0; i < channelNumber; i++)
      globalPosition += ((SeekableByteChannel)this.channels.get(i)).size(); 
    return position(globalPosition);
  }
  
  public int read(ByteBuffer dst) throws IOException {
    if (!isOpen())
      throw new ClosedChannelException(); 
    if (!dst.hasRemaining())
      return 0; 
    int totalBytesRead = 0;
    while (dst.hasRemaining() && this.currentChannelIdx < this.channels.size()) {
      SeekableByteChannel currentChannel = (SeekableByteChannel)this.channels.get(this.currentChannelIdx);
      int newBytesRead = currentChannel.read(dst);
      if (newBytesRead == -1) {
        this.currentChannelIdx++;
        continue;
      } 
      if (currentChannel.position() >= currentChannel.size())
        this.currentChannelIdx++; 
      totalBytesRead += newBytesRead;
    } 
    if (totalBytesRead > 0) {
      this.globalPosition += totalBytesRead;
      return totalBytesRead;
    } 
    return -1;
  }
  
  public long size() {
    if (!isOpen())
      throw new ClosedChannelException(); 
    long acc = 0L;
    for (SeekableByteChannel ch : this.channels)
      acc += ch.size(); 
    return acc;
  }
  
  public SeekableByteChannel truncate(long size) throws IOException { throw new NonWritableChannelException(); }
  
  public int write(ByteBuffer src) throws IOException { throw new NonWritableChannelException(); }
}
