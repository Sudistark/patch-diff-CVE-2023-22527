package org.apache.commons.compress.utils;

import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;

public class BoundedInputStream extends FilterInputStream {
  private long bytesRemaining;
  
  public BoundedInputStream(InputStream in, long size) {
    super(in);
    this.bytesRemaining = size;
  }
  
  public void close() {}
  
  public long getBytesRemaining() { return this.bytesRemaining; }
  
  public int read() throws IOException {
    if (this.bytesRemaining > 0L) {
      this.bytesRemaining--;
      return this.in.read();
    } 
    return -1;
  }
  
  public int read(byte[] b, int off, int len) throws IOException {
    if (len == 0)
      return 0; 
    if (this.bytesRemaining == 0L)
      return -1; 
    int bytesToRead = len;
    if (bytesToRead > this.bytesRemaining)
      bytesToRead = (int)this.bytesRemaining; 
    int bytesRead = this.in.read(b, off, bytesToRead);
    if (bytesRead >= 0)
      this.bytesRemaining -= bytesRead; 
    return bytesRead;
  }
  
  public long skip(long n) throws IOException {
    long bytesToSkip = Math.min(this.bytesRemaining, n);
    long bytesSkipped = this.in.skip(bytesToSkip);
    this.bytesRemaining -= bytesSkipped;
    return bytesSkipped;
  }
}
