package org.apache.commons.compress.harmony.pack200;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import org.objectweb.asm.AnnotationVisitor;
import org.objectweb.asm.Attribute;
import org.objectweb.asm.ClassVisitor;
import org.objectweb.asm.FieldVisitor;
import org.objectweb.asm.MethodVisitor;
import org.objectweb.asm.Type;

public class Segment extends ClassVisitor {
  public static int ASM_API = 262144;
  
  private SegmentHeader segmentHeader;
  
  private CpBands cpBands;
  
  private AttributeDefinitionBands attributeDefinitionBands;
  
  private IcBands icBands;
  
  private ClassBands classBands;
  
  private BcBands bcBands;
  
  private FileBands fileBands;
  
  private final SegmentFieldVisitor fieldVisitor = new SegmentFieldVisitor(this);
  
  private final SegmentMethodVisitor methodVisitor = new SegmentMethodVisitor(this);
  
  private Pack200ClassReader currentClassReader;
  
  private PackingOptions options;
  
  private boolean stripDebug;
  
  private Attribute[] nonStandardAttributePrototypes;
  
  public Segment() { super(ASM_API); }
  
  private void addValueAndTag(Object value, List<String> tags, List<Object> values) {
    if (value instanceof Integer) {
      tags.add("I");
      values.add(value);
    } else if (value instanceof Double) {
      tags.add("D");
      values.add(value);
    } else if (value instanceof Float) {
      tags.add("F");
      values.add(value);
    } else if (value instanceof Long) {
      tags.add("J");
      values.add(value);
    } else if (value instanceof Byte) {
      tags.add("B");
      values.add(Integer.valueOf(((Byte)value).intValue()));
    } else if (value instanceof Character) {
      tags.add("C");
      values.add(Integer.valueOf(((Character)value).charValue()));
    } else if (value instanceof Short) {
      tags.add("S");
      values.add(Integer.valueOf(((Short)value).intValue()));
    } else if (value instanceof Boolean) {
      tags.add("Z");
      values.add(Integer.valueOf(((Boolean)value).booleanValue() ? 1 : 0));
    } else if (value instanceof String) {
      tags.add("s");
      values.add(value);
    } else if (value instanceof Type) {
      tags.add("c");
      values.add(((Type)value).toString());
    } 
  }
  
  public AttributeDefinitionBands getAttrBands() { return this.attributeDefinitionBands; }
  
  public ClassBands getClassBands() { return this.classBands; }
  
  public CpBands getCpBands() { return this.cpBands; }
  
  public Pack200ClassReader getCurrentClassReader() { return this.currentClassReader; }
  
  public IcBands getIcBands() { return this.icBands; }
  
  public SegmentHeader getSegmentHeader() { return this.segmentHeader; }
  
  public boolean lastConstantHadWideIndex() { return this.currentClassReader.lastConstantHadWideIndex(); }
  
  public void pack(Archive.SegmentUnit segmentUnit, OutputStream out, PackingOptions options) throws IOException, Pack200Exception {
    this.options = options;
    this.stripDebug = options.isStripDebug();
    int effort = options.getEffort();
    this.nonStandardAttributePrototypes = options.getUnknownAttributePrototypes();
    PackingUtils.log("Start to pack a new segment with " + segmentUnit.fileListSize() + " files including " + segmentUnit
        .classListSize() + " classes");
    PackingUtils.log("Initialize a header for the segment");
    this.segmentHeader = new SegmentHeader();
    this.segmentHeader.setFile_count(segmentUnit.fileListSize());
    this.segmentHeader.setHave_all_code_flags(!this.stripDebug);
    if (!options.isKeepDeflateHint())
      this.segmentHeader.setDeflate_hint("true".equals(options.getDeflateHint())); 
    PackingUtils.log("Setup constant pool bands for the segment");
    this.cpBands = new CpBands(this, effort);
    PackingUtils.log("Setup attribute definition bands for the segment");
    this.attributeDefinitionBands = new AttributeDefinitionBands(this, effort, this.nonStandardAttributePrototypes);
    PackingUtils.log("Setup internal class bands for the segment");
    this.icBands = new IcBands(this.segmentHeader, this.cpBands, effort);
    PackingUtils.log("Setup class bands for the segment");
    this.classBands = new ClassBands(this, segmentUnit.classListSize(), effort, this.stripDebug);
    PackingUtils.log("Setup byte code bands for the segment");
    this.bcBands = new BcBands(this.cpBands, this, effort);
    PackingUtils.log("Setup file bands for the segment");
    this.fileBands = new FileBands(this.cpBands, this.segmentHeader, options, segmentUnit, effort);
    processClasses(segmentUnit, this.nonStandardAttributePrototypes);
    this.cpBands.finaliseBands();
    this.attributeDefinitionBands.finaliseBands();
    this.icBands.finaliseBands();
    this.classBands.finaliseBands();
    this.bcBands.finaliseBands();
    this.fileBands.finaliseBands();
    ByteArrayOutputStream bandsOutputStream = new ByteArrayOutputStream();
    PackingUtils.log("Packing...");
    int finalNumberOfClasses = this.classBands.numClassesProcessed();
    this.segmentHeader.setClass_count(finalNumberOfClasses);
    this.cpBands.pack(bandsOutputStream);
    if (finalNumberOfClasses > 0) {
      this.attributeDefinitionBands.pack(bandsOutputStream);
      this.icBands.pack(bandsOutputStream);
      this.classBands.pack(bandsOutputStream);
      this.bcBands.pack(bandsOutputStream);
    } 
    this.fileBands.pack(bandsOutputStream);
    ByteArrayOutputStream headerOutputStream = new ByteArrayOutputStream();
    this.segmentHeader.pack(headerOutputStream);
    headerOutputStream.writeTo(out);
    bandsOutputStream.writeTo(out);
    segmentUnit.addPackedByteAmount(headerOutputStream.size());
    segmentUnit.addPackedByteAmount(bandsOutputStream.size());
    PackingUtils.log("Wrote total of " + segmentUnit.getPackedByteAmount() + " bytes");
    PackingUtils.log("Transmitted " + segmentUnit.fileListSize() + " files of " + segmentUnit.getByteAmount() + " input bytes in a segment of " + segmentUnit
        .getPackedByteAmount() + " bytes");
  }
  
  private void passCurrentClass() { throw new PassException(); }
  
  private void processClasses(Archive.SegmentUnit segmentUnit, Attribute[] attributes) throws Pack200Exception {
    this.segmentHeader.setClass_count(segmentUnit.classListSize());
    for (Pack200ClassReader classReader : segmentUnit.getClassList()) {
      this.currentClassReader = classReader;
      int flags = 0;
      if (this.stripDebug)
        flags |= 0x2; 
      try {
        classReader.accept(this, attributes, flags);
      } catch (PassException pe) {
        this.classBands.removeCurrentClass();
        String name = classReader.getFileName();
        this.options.addPassFile(name);
        this.cpBands.addCPUtf8(name);
        boolean found = false;
        for (Archive.PackingFile file : segmentUnit.getFileList()) {
          if (file.getName().equals(name)) {
            found = true;
            file.setContents(classReader.b);
            break;
          } 
        } 
        if (!found)
          throw new Pack200Exception("Error passing file " + name); 
      } 
    } 
  }
  
  public void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {
    this.bcBands.setCurrentClass(name, superName);
    this.segmentHeader.addMajorVersion(version);
    this.classBands.addClass(version, access, name, signature, superName, interfaces);
  }
  
  public AnnotationVisitor visitAnnotation(String desc, boolean visible) { return new SegmentAnnotationVisitor(this, 0, desc, visible); }
  
  public void visitAttribute(Attribute attribute) {
    if (attribute.isUnknown()) {
      String action = this.options.getUnknownAttributeAction();
      if (action.equals("pass")) {
        passCurrentClass();
      } else if (action.equals("error")) {
        throw new Error("Unknown attribute encountered");
      } 
    } else if (attribute instanceof NewAttribute) {
      NewAttribute newAttribute = (NewAttribute)attribute;
      if (newAttribute.isUnknown(0)) {
        String action = this.options.getUnknownClassAttributeAction(newAttribute.type);
        if (action.equals("pass")) {
          passCurrentClass();
        } else if (action.equals("error")) {
          throw new Error("Unknown attribute encountered");
        } 
      } 
      this.classBands.addClassAttribute(newAttribute);
    } else {
      throw new IllegalArgumentException("Unexpected attribute encountered: " + attribute.type);
    } 
  }
  
  public void visitEnd() { this.classBands.endOfClass(); }
  
  public FieldVisitor visitField(int flags, String name, String desc, String signature, Object value) {
    this.classBands.addField(flags, name, desc, signature, value);
    return this.fieldVisitor;
  }
  
  public void visitInnerClass(String name, String outerName, String innerName, int flags) { this.icBands.addInnerClass(name, outerName, innerName, flags); }
  
  public MethodVisitor visitMethod(int flags, String name, String desc, String signature, String[] exceptions) {
    this.classBands.addMethod(flags, name, desc, signature, exceptions);
    return this.methodVisitor;
  }
  
  public void visitOuterClass(String owner, String name, String desc) { this.classBands.addEnclosingMethod(owner, name, desc); }
  
  public void visitSource(String source, String debug) {
    if (!this.stripDebug)
      this.classBands.addSourceFile(source); 
  }
}
