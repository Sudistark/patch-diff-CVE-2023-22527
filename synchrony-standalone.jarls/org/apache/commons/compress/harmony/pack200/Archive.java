package org.apache.commons.compress.harmony.pack200;

import java.io.BufferedOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.jar.JarFile;
import java.util.jar.JarInputStream;
import java.util.zip.GZIPOutputStream;

public class Archive {
  private final JarInputStream jarInputStream;
  
  private final OutputStream outputStream;
  
  private JarFile jarFile;
  
  private long currentSegmentSize;
  
  private final PackingOptions options;
  
  public Archive(JarFile jarFile, OutputStream outputStream, PackingOptions options) throws IOException {
    if (options == null)
      options = new PackingOptions(); 
    this.options = options;
    if (options.isGzip())
      outputStream = new GZIPOutputStream(outputStream); 
    this.outputStream = new BufferedOutputStream(outputStream);
    this.jarFile = jarFile;
    this.jarInputStream = null;
    PackingUtils.config(options);
  }
  
  public Archive(JarInputStream inputStream, OutputStream outputStream, PackingOptions options) throws IOException {
    this.jarInputStream = inputStream;
    if (options == null)
      options = new PackingOptions(); 
    this.options = options;
    if (options.isGzip())
      outputStream = new GZIPOutputStream(outputStream); 
    this.outputStream = new BufferedOutputStream(outputStream);
    PackingUtils.config(options);
  }
  
  private boolean addJarEntry(PackingFile packingFile, List<Pack200ClassReader> javaClasses, List<PackingFile> files) {
    long segmentLimit = this.options.getSegmentLimit();
    if (segmentLimit != -1L && segmentLimit != 0L) {
      long packedSize = estimateSize(packingFile);
      if (packedSize + this.currentSegmentSize > segmentLimit && this.currentSegmentSize > 0L)
        return false; 
      this.currentSegmentSize += packedSize;
    } 
    String name = packingFile.getName();
    if (name.endsWith(".class") && !this.options.isPassFile(name)) {
      Pack200ClassReader classParser = new Pack200ClassReader(PackingFile.access$000(packingFile));
      classParser.setFileName(name);
      javaClasses.add(classParser);
      PackingFile.access$002(packingFile, new byte[0]);
    } 
    files.add(packingFile);
    return true;
  }
  
  private void doNormalPack() throws IOException, Pack200Exception {
    List<PackingFile> packingFileList;
    PackingUtils.log("Start to perform a normal packing");
    if (this.jarInputStream != null) {
      packingFileList = PackingUtils.getPackingFileListFromJar(this.jarInputStream, this.options.isKeepFileOrder());
    } else {
      packingFileList = PackingUtils.getPackingFileListFromJar(this.jarFile, this.options.isKeepFileOrder());
    } 
    List<SegmentUnit> segmentUnitList = splitIntoSegments(packingFileList);
    int previousByteAmount = 0;
    int packedByteAmount = 0;
    int segmentSize = segmentUnitList.size();
    for (int index = 0; index < segmentSize; index++) {
      SegmentUnit segmentUnit = (SegmentUnit)segmentUnitList.get(index);
      (new Segment()).pack(segmentUnit, this.outputStream, this.options);
      previousByteAmount += segmentUnit.getByteAmount();
      packedByteAmount += segmentUnit.getPackedByteAmount();
    } 
    PackingUtils.log("Total: Packed " + previousByteAmount + " input bytes of " + packingFileList.size() + " files into " + packedByteAmount + " bytes in " + segmentSize + " segments");
    this.outputStream.close();
  }
  
  private void doZeroEffortPack() throws IOException, Pack200Exception {
    PackingUtils.log("Start to perform a zero-effort packing");
    if (this.jarInputStream != null) {
      PackingUtils.copyThroughJar(this.jarInputStream, this.outputStream);
    } else {
      PackingUtils.copyThroughJar(this.jarFile, this.outputStream);
    } 
  }
  
  private long estimateSize(PackingFile packingFile) {
    String name = packingFile.getName();
    if (name.startsWith("META-INF") || name.startsWith("/META-INF"))
      return 0L; 
    long fileSize = PackingFile.access$000(packingFile).length;
    if (fileSize < 0L)
      fileSize = 0L; 
    return name.length() + fileSize + 5L;
  }
  
  public void pack() throws IOException, Pack200Exception {
    if (0 == this.options.getEffort()) {
      doZeroEffortPack();
    } else {
      doNormalPack();
    } 
  }
  
  private List<SegmentUnit> splitIntoSegments(List<PackingFile> packingFileList) {
    List<SegmentUnit> segmentUnitList = new ArrayList<SegmentUnit>();
    List<Pack200ClassReader> classes = new ArrayList<Pack200ClassReader>();
    List<PackingFile> files = new ArrayList<PackingFile>();
    long segmentLimit = this.options.getSegmentLimit();
    int size = packingFileList.size();
    for (int index = 0; index < size; index++) {
      PackingFile packingFile = (PackingFile)packingFileList.get(index);
      if (!addJarEntry(packingFile, classes, files)) {
        segmentUnitList.add(new SegmentUnit(classes, files));
        classes = new ArrayList<Pack200ClassReader>();
        files = new ArrayList<PackingFile>();
        this.currentSegmentSize = 0L;
        addJarEntry(packingFile, classes, files);
        this.currentSegmentSize = 0L;
      } else if (segmentLimit == 0L && estimateSize(packingFile) > 0L) {
        segmentUnitList.add(new SegmentUnit(classes, files));
        classes = new ArrayList<Pack200ClassReader>();
        files = new ArrayList<PackingFile>();
      } 
    } 
    if (classes.size() > 0 || files.size() > 0)
      segmentUnitList.add(new SegmentUnit(classes, files)); 
    return segmentUnitList;
  }
}
