package org.apache.commons.compress.harmony.unpack200;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.util.jar.JarOutputStream;
import org.apache.commons.compress.harmony.pack200.Pack200Adapter;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.java.util.jar.Pack200;

public class Pack200UnpackerAdapter extends Pack200Adapter implements Pack200.Unpacker {
  public void unpack(File file, JarOutputStream out) throws IOException {
    if (file == null || out == null)
      throw new IllegalArgumentException("Must specify both input and output streams"); 
    int size = (int)file.length();
    int bufferSize = (size > 0 && size < 8192) ? size : 8192;
    InputStream in = new BufferedInputStream(Files.newInputStream(file.toPath(), new java.nio.file.OpenOption[0]), bufferSize);
    try {
      unpack(in, out);
      in.close();
    } catch (Throwable throwable) {
      try {
        in.close();
      } catch (Throwable throwable1) {
        throwable.addSuppressed(throwable1);
      } 
      throw throwable;
    } 
  }
  
  public void unpack(InputStream in, JarOutputStream out) throws IOException {
    if (in == null || out == null)
      throw new IllegalArgumentException("Must specify both input and output streams"); 
    completed(0.0D);
    try {
      (new Archive(in, out)).unpack();
    } catch (Pack200Exception e) {
      throw new IOException("Failed to unpack Jar:" + e);
    } 
    completed(1.0D);
  }
}
