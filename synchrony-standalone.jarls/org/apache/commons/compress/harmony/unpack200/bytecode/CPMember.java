package org.apache.commons.compress.harmony.unpack200.bytecode;

import java.io.DataOutputStream;
import java.io.IOException;
import java.util.Collections;
import java.util.List;
import java.util.Objects;

public class CPMember extends ClassFileEntry {
  List<Attribute> attributes;
  
  short flags;
  
  CPUTF8 name;
  
  int nameIndex;
  
  protected final CPUTF8 descriptor;
  
  int descriptorIndex;
  
  public CPMember(CPUTF8 name, CPUTF8 descriptor, long flags, List<Attribute> attributes) {
    this.name = (CPUTF8)Objects.requireNonNull(name, "name");
    this.descriptor = (CPUTF8)Objects.requireNonNull(descriptor, "descriptor");
    this.flags = (short)(int)flags;
    this.attributes = (attributes == null) ? Collections.EMPTY_LIST : attributes;
  }
  
  protected void doWrite(DataOutputStream dos) throws IOException {
    dos.writeShort(this.flags);
    dos.writeShort(this.nameIndex);
    dos.writeShort(this.descriptorIndex);
    int attributeCount = this.attributes.size();
    dos.writeShort(attributeCount);
    for (int i = 0; i < attributeCount; i++) {
      Attribute attribute = (Attribute)this.attributes.get(i);
      attribute.doWrite(dos);
    } 
  }
  
  public boolean equals(Object obj) {
    if (this == obj)
      return true; 
    if (obj == null)
      return false; 
    if (getClass() != obj.getClass())
      return false; 
    CPMember other = (CPMember)obj;
    if (!this.attributes.equals(other.attributes))
      return false; 
    if (!this.descriptor.equals(other.descriptor))
      return false; 
    if (this.flags != other.flags)
      return false; 
    if (!this.name.equals(other.name))
      return false; 
    return true;
  }
  
  protected ClassFileEntry[] getNestedClassFileEntries() {
    int attributeCount = this.attributes.size();
    ClassFileEntry[] entries = new ClassFileEntry[attributeCount + 2];
    entries[0] = this.name;
    entries[1] = this.descriptor;
    for (int i = 0; i < attributeCount; i++)
      entries[i + 2] = (ClassFileEntry)this.attributes.get(i); 
    return entries;
  }
  
  public int hashCode() {
    int PRIME = 31;
    result = 1;
    result = 31 * result + this.attributes.hashCode();
    result = 31 * result + this.descriptor.hashCode();
    result = 31 * result + this.flags;
    return 31 * result + this.name.hashCode();
  }
  
  protected void resolve(ClassConstantPool pool) {
    super.resolve(pool);
    this.nameIndex = pool.indexOf(this.name);
    this.descriptorIndex = pool.indexOf(this.descriptor);
    this.attributes.forEach(attribute -> attribute.resolve(pool));
  }
  
  public String toString() { return "CPMember: " + this.name + "(" + this.descriptor + ")"; }
}
