package org.apache.commons.compress.harmony.unpack200.bytecode;

import java.io.DataOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class InnerClassesAttribute extends Attribute {
  private static CPUTF8 attributeName;
  
  public static void setAttributeName(CPUTF8 cpUTF8Value) { attributeName = cpUTF8Value; }
  
  private final List<InnerClassesEntry> innerClasses = new ArrayList();
  
  private final List<ConstantPoolEntry> nestedClassFileEntries = new ArrayList();
  
  public InnerClassesAttribute(String name) {
    super(attributeName);
    this.nestedClassFileEntries.add(getAttributeName());
  }
  
  public void addInnerClassesEntry(CPClass innerClass, CPClass outerClass, CPUTF8 innerName, int flags) {
    if (innerClass != null)
      this.nestedClassFileEntries.add(innerClass); 
    if (outerClass != null)
      this.nestedClassFileEntries.add(outerClass); 
    if (innerName != null)
      this.nestedClassFileEntries.add(innerName); 
    addInnerClassesEntry(new InnerClassesEntry(innerClass, outerClass, innerName, flags));
  }
  
  private void addInnerClassesEntry(InnerClassesEntry innerClassesEntry) { this.innerClasses.add(innerClassesEntry); }
  
  protected void doWrite(DataOutputStream dos) throws IOException { super.doWrite(dos); }
  
  public boolean equals(Object obj) {
    if (this == obj)
      return true; 
    if (!super.equals(obj))
      return false; 
    if (getClass() != obj.getClass())
      return false; 
    InnerClassesAttribute other = (InnerClassesAttribute)obj;
    if (getAttributeName() == null) {
      if (other.getAttributeName() != null)
        return false; 
    } else if (!getAttributeName().equals(other.getAttributeName())) {
      return false;
    } 
    return true;
  }
  
  protected int getLength() { return 2 + 8 * this.innerClasses.size(); }
  
  protected ClassFileEntry[] getNestedClassFileEntries() { return (ClassFileEntry[])this.nestedClassFileEntries.toArray(ClassFileEntry.NONE); }
  
  public int hashCode() {
    int PRIME = 31;
    result = super.hashCode();
    return 31 * result + ((getAttributeName() == null) ? 0 : getAttributeName().hashCode());
  }
  
  protected void resolve(ClassConstantPool pool) {
    super.resolve(pool);
    for (InnerClassesEntry entry : this.innerClasses)
      entry.resolve(pool); 
  }
  
  public String toString() { return "InnerClasses: " + getAttributeName(); }
  
  protected void writeBody(DataOutputStream dos) throws IOException {
    dos.writeShort(this.innerClasses.size());
    for (InnerClassesEntry entry : this.innerClasses)
      entry.write(dos); 
  }
}
