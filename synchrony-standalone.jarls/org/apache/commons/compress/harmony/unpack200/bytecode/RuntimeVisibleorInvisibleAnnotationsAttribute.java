package org.apache.commons.compress.harmony.unpack200.bytecode;

import java.io.DataOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class RuntimeVisibleorInvisibleAnnotationsAttribute extends AnnotationsAttribute {
  private final int numAnnotations;
  
  private final AnnotationsAttribute.Annotation[] annotations;
  
  public RuntimeVisibleorInvisibleAnnotationsAttribute(CPUTF8 name, Annotation[] annotations) {
    super(name);
    this.numAnnotations = annotations.length;
    this.annotations = annotations;
  }
  
  protected int getLength() {
    int length = 2;
    for (int i = 0; i < this.numAnnotations; i++)
      length += this.annotations[i].getLength(); 
    return length;
  }
  
  protected ClassFileEntry[] getNestedClassFileEntries() {
    List<Object> nested = new ArrayList<Object>();
    nested.add(this.attributeName);
    for (AnnotationsAttribute.Annotation annotation : this.annotations)
      nested.addAll(annotation.getClassFileEntries()); 
    return (ClassFileEntry[])nested.toArray(ClassFileEntry.NONE);
  }
  
  protected void resolve(ClassConstantPool pool) {
    super.resolve(pool);
    for (AnnotationsAttribute.Annotation annotation : this.annotations)
      annotation.resolve(pool); 
  }
  
  public String toString() { return this.attributeName.underlyingString() + ": " + this.numAnnotations + " annotations"; }
  
  protected void writeBody(DataOutputStream dos) throws IOException {
    int size = dos.size();
    dos.writeShort(this.numAnnotations);
    for (int i = 0; i < this.numAnnotations; i++)
      this.annotations[i].writeBody(dos); 
    if (dos.size() - size != getLength())
      throw new Error(); 
  }
}
