package org.apache.commons.compress.harmony.unpack200.bytecode;

import java.io.DataOutputStream;
import java.io.IOException;

public class CPString extends CPConstant {
  private int nameIndex;
  
  private final CPUTF8 name;
  
  private boolean hashCodeComputed;
  
  private int cachedHashCode;
  
  public CPString(CPUTF8 value, int globalIndex) {
    super((byte)8, value, globalIndex);
    this.name = value;
  }
  
  private void generateHashCode() {
    this.hashCodeComputed = true;
    int PRIME = 31;
    int result = 1;
    result = 31 * result + this.name.hashCode();
    this.cachedHashCode = result;
  }
  
  protected ClassFileEntry[] getNestedClassFileEntries() { return new ClassFileEntry[] { this.name }; }
  
  public int hashCode() {
    if (!this.hashCodeComputed)
      generateHashCode(); 
    return this.cachedHashCode;
  }
  
  protected void resolve(ClassConstantPool pool) {
    super.resolve(pool);
    this.nameIndex = pool.indexOf(this.name);
  }
  
  public String toString() { return "String: " + getValue(); }
  
  protected void writeBody(DataOutputStream dos) throws IOException { dos.writeShort(this.nameIndex); }
}
