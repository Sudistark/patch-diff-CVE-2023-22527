package org.apache.commons.io.input;

import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.commons.io.IOUtils;

public abstract class ProxyInputStream extends FilterInputStream {
  public ProxyInputStream(InputStream proxy) { super(proxy); }
  
  protected void afterRead(int n) throws IOException {}
  
  public int available() throws IOException {
    try {
      return super.available();
    } catch (IOException e) {
      handleIOException(e);
      return 0;
    } 
  }
  
  protected void beforeRead(int n) throws IOException {}
  
  public void close() throws IOException { IOUtils.close(this.in, this::handleIOException); }
  
  protected void handleIOException(IOException e) throws IOException { throw e; }
  
  public void mark(int readlimit) throws IOException { this.in.mark(readlimit); }
  
  public boolean markSupported() { return this.in.markSupported(); }
  
  public int read() throws IOException {
    try {
      beforeRead(1);
      int b = this.in.read();
      afterRead((b != -1) ? 1 : -1);
      return b;
    } catch (IOException e) {
      handleIOException(e);
      return -1;
    } 
  }
  
  public int read(byte[] bts) throws IOException {
    try {
      beforeRead(IOUtils.length(bts));
      int n = this.in.read(bts);
      afterRead(n);
      return n;
    } catch (IOException e) {
      handleIOException(e);
      return -1;
    } 
  }
  
  public int read(byte[] bts, int off, int len) throws IOException {
    try {
      beforeRead(len);
      int n = this.in.read(bts, off, len);
      afterRead(n);
      return n;
    } catch (IOException e) {
      handleIOException(e);
      return -1;
    } 
  }
  
  public void reset() throws IOException {
    try {
      this.in.reset();
    } catch (IOException e) {
      handleIOException(e);
    } 
  }
  
  public long skip(long ln) throws IOException {
    try {
      return this.in.skip(ln);
    } catch (IOException e) {
      handleIOException(e);
      return 0L;
    } 
  }
}
