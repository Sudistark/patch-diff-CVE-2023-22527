package org.apache.commons.io.input;

import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;

public class BoundedInputStream extends FilterInputStream {
  private final long maxCount;
  
  private long count;
  
  private long mark = -1L;
  
  private boolean propagateClose = true;
  
  public BoundedInputStream(InputStream in) { this(in, -1L); }
  
  public BoundedInputStream(InputStream inputStream, long maxLength) {
    super(inputStream);
    this.maxCount = maxLength;
  }
  
  public int available() throws IOException {
    if (isMaxLength()) {
      onMaxLength(this.maxCount, this.count);
      return 0;
    } 
    return this.in.available();
  }
  
  public void close() throws IOException {
    if (this.propagateClose)
      this.in.close(); 
  }
  
  public long getCount() { return this.count; }
  
  public long getMaxLength() { return this.maxCount; }
  
  private boolean isMaxLength() { return (this.maxCount >= 0L && this.count >= this.maxCount); }
  
  public boolean isPropagateClose() { return this.propagateClose; }
  
  public void mark(int readlimit) {
    this.in.mark(readlimit);
    this.mark = this.count;
  }
  
  public boolean markSupported() { return this.in.markSupported(); }
  
  protected void onMaxLength(long maxLength, long count) throws IOException {}
  
  public int read() throws IOException {
    if (isMaxLength()) {
      onMaxLength(this.maxCount, this.count);
      return -1;
    } 
    int result = this.in.read();
    this.count++;
    return result;
  }
  
  public int read(byte[] b) throws IOException { return read(b, 0, b.length); }
  
  public int read(byte[] b, int off, int len) throws IOException {
    if (isMaxLength()) {
      onMaxLength(this.maxCount, this.count);
      return -1;
    } 
    long maxRead = (this.maxCount >= 0L) ? Math.min(len, this.maxCount - this.count) : len;
    int bytesRead = this.in.read(b, off, (int)maxRead);
    if (bytesRead == -1)
      return -1; 
    this.count += bytesRead;
    return bytesRead;
  }
  
  public void reset() throws IOException {
    this.in.reset();
    this.count = this.mark;
  }
  
  public void setPropagateClose(boolean propagateClose) { this.propagateClose = propagateClose; }
  
  public long skip(long n) throws IOException {
    long toSkip = (this.maxCount >= 0L) ? Math.min(n, this.maxCount - this.count) : n;
    long skippedBytes = this.in.skip(toSkip);
    this.count += skippedBytes;
    return skippedBytes;
  }
  
  public String toString() { return this.in.toString(); }
}
