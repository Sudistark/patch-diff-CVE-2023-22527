package org.apache.commons.io.input;

import java.io.IOException;
import java.io.InputStream;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.Objects;
import org.apache.commons.io.ByteOrderMark;
import org.apache.commons.io.IOUtils;

public class BOMInputStream extends ProxyInputStream {
  private static final Comparator<ByteOrderMark> ByteOrderMarkLengthComparator = Comparator.comparing(ByteOrderMark::length).reversed();
  
  private final List<ByteOrderMark> boms;
  
  private ByteOrderMark byteOrderMark;
  
  private int fbIndex;
  
  private int fbLength;
  
  private int[] firstBytes;
  
  private final boolean include;
  
  private boolean markedAtStart;
  
  private int markFbIndex;
  
  public static Builder builder() { return new Builder(); }
  
  @Deprecated
  public BOMInputStream(InputStream delegate) { this(delegate, false, Builder.access$000()); }
  
  @Deprecated
  public BOMInputStream(InputStream delegate, boolean include) { this(delegate, include, Builder.access$000()); }
  
  @Deprecated
  public BOMInputStream(InputStream delegate, boolean include, ByteOrderMark... boms) {
    super(delegate);
    if (IOUtils.length(boms) == 0)
      throw new IllegalArgumentException("No BOMs specified"); 
    this.include = include;
    List<ByteOrderMark> list = Arrays.asList(boms);
    list.sort(ByteOrderMarkLengthComparator);
    this.boms = list;
  }
  
  @Deprecated
  public BOMInputStream(InputStream delegate, ByteOrderMark... boms) { this(delegate, false, boms); }
  
  private ByteOrderMark find() { return (ByteOrderMark)this.boms.stream().filter(this::matches).findFirst().orElse(null); }
  
  public ByteOrderMark getBOM() {
    if (this.firstBytes == null) {
      this.fbLength = 0;
      int maxBomSize = ((ByteOrderMark)this.boms.get(0)).length();
      this.firstBytes = new int[maxBomSize];
      for (int i = 0; i < this.firstBytes.length; i++) {
        this.firstBytes[i] = this.in.read();
        this.fbLength++;
        if (this.firstBytes[i] < 0)
          break; 
      } 
      this.byteOrderMark = find();
      if (this.byteOrderMark != null && !this.include)
        if (this.byteOrderMark.length() < this.firstBytes.length) {
          this.fbIndex = this.byteOrderMark.length();
        } else {
          this.fbLength = 0;
        }  
    } 
    return this.byteOrderMark;
  }
  
  public String getBOMCharsetName() throws IOException {
    getBOM();
    return (this.byteOrderMark == null) ? null : this.byteOrderMark.getCharsetName();
  }
  
  public boolean hasBOM() throws IOException { return (getBOM() != null); }
  
  public boolean hasBOM(ByteOrderMark bom) throws IOException {
    if (!this.boms.contains(bom))
      throw new IllegalArgumentException("Stream not configured to detect " + bom); 
    return Objects.equals(getBOM(), bom);
  }
  
  public void mark(int readlimit) {
    this.markFbIndex = this.fbIndex;
    this.markedAtStart = (this.firstBytes == null);
    this.in.mark(readlimit);
  }
  
  private boolean matches(ByteOrderMark bom) throws IOException {
    for (int i = 0; i < bom.length(); i++) {
      if (bom.get(i) != this.firstBytes[i])
        return false; 
    } 
    return true;
  }
  
  public int read() throws IOException {
    int b = readFirstBytes();
    return (b >= 0) ? b : this.in.read();
  }
  
  public int read(byte[] buf) throws IOException { return read(buf, 0, buf.length); }
  
  public int read(byte[] buf, int off, int len) throws IOException {
    int firstCount = 0;
    int b = 0;
    while (len > 0 && b >= 0) {
      b = readFirstBytes();
      if (b >= 0) {
        buf[off++] = (byte)(b & 0xFF);
        len--;
        firstCount++;
      } 
    } 
    int secondCount = this.in.read(buf, off, len);
    return (secondCount < 0) ? ((firstCount > 0) ? firstCount : -1) : (firstCount + secondCount);
  }
  
  private int readFirstBytes() throws IOException {
    getBOM();
    return (this.fbIndex < this.fbLength) ? this.firstBytes[this.fbIndex++] : -1;
  }
  
  public void reset() throws IOException {
    this.fbIndex = this.markFbIndex;
    if (this.markedAtStart)
      this.firstBytes = null; 
    this.in.reset();
  }
  
  public long skip(long n) throws IOException {
    int skipped = 0;
    while (n > skipped && readFirstBytes() >= 0)
      skipped++; 
    return this.in.skip(n - skipped) + skipped;
  }
}
