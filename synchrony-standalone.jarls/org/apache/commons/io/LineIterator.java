package org.apache.commons.io;

import java.io.BufferedReader;
import java.io.Closeable;
import java.io.IOException;
import java.io.Reader;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Objects;

public class LineIterator extends Object implements Iterator<String>, Closeable {
  private final BufferedReader bufferedReader;
  
  private String cachedLine;
  
  private boolean finished;
  
  @Deprecated
  public static void closeQuietly(LineIterator iterator) { IOUtils.closeQuietly(iterator); }
  
  public LineIterator(Reader reader) throws IllegalArgumentException {
    Objects.requireNonNull(reader, "reader");
    if (reader instanceof BufferedReader) {
      this.bufferedReader = (BufferedReader)reader;
    } else {
      this.bufferedReader = new BufferedReader(reader);
    } 
  }
  
  public void close() throws IOException {
    this.finished = true;
    this.cachedLine = null;
    IOUtils.close(this.bufferedReader);
  }
  
  public boolean hasNext() {
    if (this.cachedLine != null)
      return true; 
    if (this.finished)
      return false; 
    try {
      String line;
      do {
        line = this.bufferedReader.readLine();
        if (line == null) {
          this.finished = true;
          return false;
        } 
      } while (!isValidLine(line));
      this.cachedLine = line;
      return true;
    } catch (IOException ioe) {
      Objects.requireNonNull(ioe);
      IOUtils.closeQuietly(this, ioe::addSuppressed);
      throw new IllegalStateException(ioe);
    } 
  }
  
  protected boolean isValidLine(String line) { return true; }
  
  public String next() { return nextLine(); }
  
  public String nextLine() {
    if (!hasNext())
      throw new NoSuchElementException("No more lines"); 
    String currentLine = this.cachedLine;
    this.cachedLine = null;
    return currentLine;
  }
  
  public void remove() throws IOException { throw new UnsupportedOperationException("remove not supported"); }
}
