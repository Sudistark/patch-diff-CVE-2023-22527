package org.apache.commons.io.output;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import org.apache.commons.io.function.Uncheck;
import org.apache.commons.io.input.UnsynchronizedByteArrayInputStream;

public final class UnsynchronizedByteArrayOutputStream extends AbstractByteArrayOutputStream {
  public static Builder builder() { return new Builder(); }
  
  public static InputStream toBufferedInputStream(InputStream input) throws IOException { return toBufferedInputStream(input, 1024); }
  
  public static InputStream toBufferedInputStream(InputStream input, int size) throws IOException {
    UnsynchronizedByteArrayOutputStream output = ((Builder)builder().setBufferSize(size)).get();
    try {
      output.write(input);
      InputStream inputStream = output.toInputStream();
      if (output != null)
        output.close(); 
      return inputStream;
    } catch (Throwable throwable) {
      if (output != null)
        try {
          output.close();
        } catch (Throwable throwable1) {
          throwable.addSuppressed(throwable1);
        }  
      throw throwable;
    } 
  }
  
  @Deprecated
  public UnsynchronizedByteArrayOutputStream() { this(1024); }
  
  @Deprecated
  public UnsynchronizedByteArrayOutputStream(int size) {
    if (size < 0)
      throw new IllegalArgumentException("Negative initial size: " + size); 
    needNewBuffer(size);
  }
  
  public void reset() { resetImpl(); }
  
  public int size() { return this.count; }
  
  public byte[] toByteArray() { return toByteArrayImpl(); }
  
  public InputStream toInputStream() {
    return toInputStream((buffer, offset, length) -> 
        (UnsynchronizedByteArrayInputStream)Uncheck.get(()));
  }
  
  public void write(byte[] b, int off, int len) {
    if (off < 0 || off > b.length || len < 0 || off + len > b.length || off + len < 0)
      throw new IndexOutOfBoundsException(String.format("offset=%,d, length=%,d", new Object[] { Integer.valueOf(off), Integer.valueOf(len) })); 
    if (len == 0)
      return; 
    writeImpl(b, off, len);
  }
  
  public int write(InputStream in) throws IOException { return writeImpl(in); }
  
  public void write(int b) { writeImpl(b); }
  
  public void writeTo(OutputStream out) throws IOException { writeToImpl(out); }
}
