package org.apache.commons.io;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URI;
import java.net.URL;
import java.net.URLConnection;
import java.security.Permission;
import java.util.List;
import java.util.Map;
import java.util.Objects;

class CloseableURLConnection extends URLConnection implements AutoCloseable {
  private final URLConnection urlConnection;
  
  static CloseableURLConnection open(URI uri) throws IOException { return open(((URI)Objects.requireNonNull(uri, "uri")).toURL()); }
  
  static CloseableURLConnection open(URL url) throws IOException { return new CloseableURLConnection(url.openConnection()); }
  
  CloseableURLConnection(URLConnection urlConnection) {
    super(((URLConnection)Objects.requireNonNull(urlConnection, "urlConnection")).getURL());
    this.urlConnection = urlConnection;
  }
  
  public void addRequestProperty(String key, String value) { this.urlConnection.addRequestProperty(key, value); }
  
  public void close() { IOUtils.close(this.urlConnection); }
  
  public void connect() { this.urlConnection.connect(); }
  
  public boolean equals(Object obj) { return this.urlConnection.equals(obj); }
  
  public boolean getAllowUserInteraction() { return this.urlConnection.getAllowUserInteraction(); }
  
  public int getConnectTimeout() { return this.urlConnection.getConnectTimeout(); }
  
  public Object getContent() throws IOException { return this.urlConnection.getContent(); }
  
  public Object getContent(Class[] classes) throws IOException { return this.urlConnection.getContent(classes); }
  
  public String getContentEncoding() { return this.urlConnection.getContentEncoding(); }
  
  public int getContentLength() { return this.urlConnection.getContentLength(); }
  
  public long getContentLengthLong() { return this.urlConnection.getContentLengthLong(); }
  
  public String getContentType() { return this.urlConnection.getContentType(); }
  
  public long getDate() { return this.urlConnection.getDate(); }
  
  public boolean getDefaultUseCaches() { return this.urlConnection.getDefaultUseCaches(); }
  
  public boolean getDoInput() { return this.urlConnection.getDoInput(); }
  
  public boolean getDoOutput() { return this.urlConnection.getDoOutput(); }
  
  public long getExpiration() { return this.urlConnection.getExpiration(); }
  
  public String getHeaderField(int n) { return this.urlConnection.getHeaderField(n); }
  
  public String getHeaderField(String name) { return this.urlConnection.getHeaderField(name); }
  
  public long getHeaderFieldDate(String name, long Default) { return this.urlConnection.getHeaderFieldDate(name, Default); }
  
  public int getHeaderFieldInt(String name, int Default) { return this.urlConnection.getHeaderFieldInt(name, Default); }
  
  public String getHeaderFieldKey(int n) { return this.urlConnection.getHeaderFieldKey(n); }
  
  public long getHeaderFieldLong(String name, long Default) { return this.urlConnection.getHeaderFieldLong(name, Default); }
  
  public Map<String, List<String>> getHeaderFields() { return this.urlConnection.getHeaderFields(); }
  
  public long getIfModifiedSince() { return this.urlConnection.getIfModifiedSince(); }
  
  public InputStream getInputStream() throws IOException { return this.urlConnection.getInputStream(); }
  
  public long getLastModified() { return this.urlConnection.getLastModified(); }
  
  public OutputStream getOutputStream() throws IOException { return this.urlConnection.getOutputStream(); }
  
  public Permission getPermission() throws IOException { return this.urlConnection.getPermission(); }
  
  public int getReadTimeout() { return this.urlConnection.getReadTimeout(); }
  
  public Map<String, List<String>> getRequestProperties() { return this.urlConnection.getRequestProperties(); }
  
  public String getRequestProperty(String key) { return this.urlConnection.getRequestProperty(key); }
  
  public URL getURL() { return this.urlConnection.getURL(); }
  
  public boolean getUseCaches() { return this.urlConnection.getUseCaches(); }
  
  public int hashCode() { return this.urlConnection.hashCode(); }
  
  public void setAllowUserInteraction(boolean allowUserInteraction) { this.urlConnection.setAllowUserInteraction(allowUserInteraction); }
  
  public void setConnectTimeout(int timeout) { this.urlConnection.setConnectTimeout(timeout); }
  
  public void setDefaultUseCaches(boolean defaultUseCaches) { this.urlConnection.setDefaultUseCaches(defaultUseCaches); }
  
  public void setDoInput(boolean doInput) { this.urlConnection.setDoInput(doInput); }
  
  public void setDoOutput(boolean doOutput) { this.urlConnection.setDoOutput(doOutput); }
  
  public void setIfModifiedSince(long ifModifiedSince) { this.urlConnection.setIfModifiedSince(ifModifiedSince); }
  
  public void setReadTimeout(int timeout) { this.urlConnection.setReadTimeout(timeout); }
  
  public void setRequestProperty(String key, String value) { this.urlConnection.setRequestProperty(key, value); }
  
  public void setUseCaches(boolean useCaches) { this.urlConnection.setUseCaches(useCaches); }
  
  public String toString() { return this.urlConnection.toString(); }
}
