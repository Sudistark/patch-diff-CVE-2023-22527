package org.apache.commons.io.build;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Reader;
import java.io.Writer;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.util.Arrays;
import java.util.Objects;

public abstract class AbstractOrigin<T, B extends AbstractOrigin<T, B>> extends AbstractSupplier<T, B> {
  final T origin;
  
  protected AbstractOrigin(T origin) { this.origin = Objects.requireNonNull(origin, "origin"); }
  
  public T get() { return (T)this.origin; }
  
  public byte[] getByteArray() throws IOException { return Files.readAllBytes(getPath()); }
  
  public byte[] getByteArray(long position, int length) throws IOException {
    byte[] bytes = getByteArray();
    int start = Math.toIntExact(position);
    if (start < 0 || length < 0 || start + length < 0 || start + length > bytes.length)
      throw new IllegalArgumentException("Couldn't read array (start: " + start + ", length: " + length + ", data length: " + bytes.length + ")."); 
    return Arrays.copyOfRange(bytes, start, start + length);
  }
  
  public CharSequence getCharSequence(Charset charset) throws IOException { return new String(getByteArray(), charset); }
  
  public File getFile() {
    throw new UnsupportedOperationException(
        String.format("%s#getFile() for %s origin %s", new Object[] { getClass().getSimpleName(), this.origin.getClass().getSimpleName(), this.origin }));
  }
  
  public InputStream getInputStream(OpenOption... options) throws IOException { return Files.newInputStream(getPath(), options); }
  
  public OutputStream getOutputStream(OpenOption... options) throws IOException { return Files.newOutputStream(getPath(), options); }
  
  public Path getPath() {
    throw new UnsupportedOperationException(
        String.format("%s#getPath() for %s origin %s", new Object[] { getClass().getSimpleName(), this.origin.getClass().getSimpleName(), this.origin }));
  }
  
  public Reader getReader(Charset charset) throws IOException { return Files.newBufferedReader(getPath(), charset); }
  
  public Writer getWriter(Charset charset, OpenOption... options) throws IOException { return Files.newBufferedWriter(getPath(), charset, options); }
  
  public long size() throws IOException { return Files.size(getPath()); }
  
  public String toString() { return getClass().getSimpleName() + "[" + this.origin.toString() + "]"; }
}
