package org.apache.commons.io.function;

import java.io.IOException;
import java.util.Objects;
import java.util.function.Predicate;

@FunctionalInterface
public interface IOPredicate<T> {
  static <T> IOPredicate<T> alwaysFalse() { return Constants.IO_PREDICATE_FALSE; }
  
  static <T> IOPredicate<T> alwaysTrue() { return Constants.IO_PREDICATE_TRUE; }
  
  static <T> IOPredicate<T> isEqual(Object target) { return (null == target) ? Objects::isNull : (object -> target.equals(object)); }
  
  default IOPredicate<T> and(IOPredicate<? super T> other) {
    Objects.requireNonNull(other);
    return t -> (test(t) && other.test(t));
  }
  
  default Predicate<T> asPredicate() { return t -> Uncheck.test(this, t); }
  
  default IOPredicate<T> negate() { return t -> !test(t); }
  
  default IOPredicate<T> or(IOPredicate<? super T> other) {
    Objects.requireNonNull(other);
    return t -> (test(t) || other.test(t));
  }
  
  boolean test(T paramT) throws IOException;
}
