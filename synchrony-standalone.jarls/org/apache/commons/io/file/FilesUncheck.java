package org.apache.commons.io.file;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.channels.SeekableByteChannel;
import java.nio.charset.Charset;
import java.nio.file.CopyOption;
import java.nio.file.DirectoryStream;
import java.nio.file.FileStore;
import java.nio.file.FileVisitOption;
import java.nio.file.FileVisitor;
import java.nio.file.Files;
import java.nio.file.LinkOption;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.nio.file.attribute.BasicFileAttributes;
import java.nio.file.attribute.FileAttribute;
import java.nio.file.attribute.FileTime;
import java.nio.file.attribute.PosixFilePermission;
import java.nio.file.attribute.UserPrincipal;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.BiPredicate;
import java.util.stream.Stream;
import org.apache.commons.io.function.Uncheck;

public final class FilesUncheck {
  public static long copy(InputStream in, Path target, CopyOption... options) { return ((Long)Uncheck.apply(Files::copy, in, target, options)).longValue(); }
  
  public static long copy(Path source, OutputStream out) { return ((Long)Uncheck.apply(Files::copy, source, out)).longValue(); }
  
  public static Path copy(Path source, Path target, CopyOption... options) { return (Path)Uncheck.apply(Files::copy, source, target, options); }
  
  public static Path createDirectories(Path dir, FileAttribute... attrs) { return (Path)Uncheck.apply(Files::createDirectories, dir, attrs); }
  
  public static Path createDirectory(Path dir, FileAttribute... attrs) { return (Path)Uncheck.apply(Files::createDirectory, dir, attrs); }
  
  public static Path createFile(Path path, FileAttribute... attrs) { return (Path)Uncheck.apply(Files::createFile, path, attrs); }
  
  public static Path createLink(Path link, Path existing) { return (Path)Uncheck.apply(Files::createLink, link, existing); }
  
  public static Path createSymbolicLink(Path link, Path target, FileAttribute... attrs) { return (Path)Uncheck.apply(Files::createSymbolicLink, link, target, attrs); }
  
  public static Path createTempDirectory(Path dir, String prefix, FileAttribute... attrs) { return (Path)Uncheck.apply(Files::createTempDirectory, dir, prefix, attrs); }
  
  public static Path createTempDirectory(String prefix, FileAttribute... attrs) { return (Path)Uncheck.apply(Files::createTempDirectory, prefix, attrs); }
  
  public static Path createTempFile(Path dir, String prefix, String suffix, FileAttribute... attrs) { return (Path)Uncheck.apply(Files::createTempFile, dir, prefix, suffix, attrs); }
  
  public static Path createTempFile(String prefix, String suffix, FileAttribute... attrs) { return (Path)Uncheck.apply(Files::createTempFile, prefix, suffix, attrs); }
  
  public static void delete(Path path) { Uncheck.accept(Files::delete, path); }
  
  public static boolean deleteIfExists(Path path) { return ((Boolean)Uncheck.apply(Files::deleteIfExists, path)).booleanValue(); }
  
  public static Stream<Path> find(Path start, int maxDepth, BiPredicate<Path, BasicFileAttributes> matcher, FileVisitOption... options) { return (Stream)Uncheck.apply(Files::find, start, Integer.valueOf(maxDepth), matcher, options); }
  
  public static Object getAttribute(Path path, String attribute, LinkOption... options) { return Uncheck.apply(Files::getAttribute, path, attribute, options); }
  
  public static FileStore getFileStore(Path path) { return (FileStore)Uncheck.apply(Files::getFileStore, path); }
  
  public static FileTime getLastModifiedTime(Path path, LinkOption... options) { return (FileTime)Uncheck.apply(Files::getLastModifiedTime, path, options); }
  
  public static UserPrincipal getOwner(Path path, LinkOption... options) { return (UserPrincipal)Uncheck.apply(Files::getOwner, path, options); }
  
  public static Set<PosixFilePermission> getPosixFilePermissions(Path path, LinkOption... options) { return (Set)Uncheck.apply(Files::getPosixFilePermissions, path, options); }
  
  public static boolean isHidden(Path path) { return ((Boolean)Uncheck.apply(Files::isHidden, path)).booleanValue(); }
  
  public static boolean isSameFile(Path path, Path path2) { return ((Boolean)Uncheck.apply(Files::isSameFile, path, path2)).booleanValue(); }
  
  public static Stream<String> lines(Path path) { return (Stream)Uncheck.apply(Files::lines, path); }
  
  public static Stream<String> lines(Path path, Charset cs) { return (Stream)Uncheck.apply(Files::lines, path, cs); }
  
  public static Stream<Path> list(Path dir) { return (Stream)Uncheck.apply(Files::list, dir); }
  
  public static Path move(Path source, Path target, CopyOption... options) { return (Path)Uncheck.apply(Files::move, source, target, options); }
  
  public static BufferedReader newBufferedReader(Path path) { return (BufferedReader)Uncheck.apply(Files::newBufferedReader, path); }
  
  public static BufferedReader newBufferedReader(Path path, Charset cs) { return (BufferedReader)Uncheck.apply(Files::newBufferedReader, path, cs); }
  
  public static BufferedWriter newBufferedWriter(Path path, Charset cs, OpenOption... options) { return (BufferedWriter)Uncheck.apply(Files::newBufferedWriter, path, cs, options); }
  
  public static BufferedWriter newBufferedWriter(Path path, OpenOption... options) { return (BufferedWriter)Uncheck.apply(Files::newBufferedWriter, path, options); }
  
  public static SeekableByteChannel newByteChannel(Path path, OpenOption... options) { return (SeekableByteChannel)Uncheck.apply(Files::newByteChannel, path, options); }
  
  public static SeekableByteChannel newByteChannel(Path path, Set<? extends OpenOption> options, FileAttribute... attrs) { return (SeekableByteChannel)Uncheck.apply(Files::newByteChannel, path, options, attrs); }
  
  public static DirectoryStream<Path> newDirectoryStream(Path dir) { return (DirectoryStream)Uncheck.apply(Files::newDirectoryStream, dir); }
  
  public static DirectoryStream<Path> newDirectoryStream(Path dir, DirectoryStream.Filter<? super Path> filter) { return (DirectoryStream)Uncheck.apply(Files::newDirectoryStream, dir, filter); }
  
  public static DirectoryStream<Path> newDirectoryStream(Path dir, String glob) { return (DirectoryStream)Uncheck.apply(Files::newDirectoryStream, dir, glob); }
  
  public static InputStream newInputStream(Path path, OpenOption... options) { return (InputStream)Uncheck.apply(Files::newInputStream, path, options); }
  
  public static OutputStream newOutputStream(Path path, OpenOption... options) { return (OutputStream)Uncheck.apply(Files::newOutputStream, path, options); }
  
  public static String probeContentType(Path path) { return (String)Uncheck.apply(Files::probeContentType, path); }
  
  public static byte[] readAllBytes(Path path) { return (byte[])Uncheck.apply(Files::readAllBytes, path); }
  
  public static List<String> readAllLines(Path path) { return (List)Uncheck.apply(Files::readAllLines, path); }
  
  public static List<String> readAllLines(Path path, Charset cs) { return (List)Uncheck.apply(Files::readAllLines, path, cs); }
  
  public static <A extends BasicFileAttributes> A readAttributes(Path path, Class<A> type, LinkOption... options) { return (A)(BasicFileAttributes)Uncheck.apply(Files::readAttributes, path, type, options); }
  
  public static Map<String, Object> readAttributes(Path path, String attributes, LinkOption... options) { return (Map)Uncheck.apply(Files::readAttributes, path, attributes, options); }
  
  public static Path readSymbolicLink(Path link) { return (Path)Uncheck.apply(Files::readSymbolicLink, link); }
  
  public static Path setAttribute(Path path, String attribute, Object value, LinkOption... options) { return (Path)Uncheck.apply(Files::setAttribute, path, attribute, value, options); }
  
  public static Path setLastModifiedTime(Path path, FileTime time) { return (Path)Uncheck.apply(Files::setLastModifiedTime, path, time); }
  
  public static Path setOwner(Path path, UserPrincipal owner) { return (Path)Uncheck.apply(Files::setOwner, path, owner); }
  
  public static Path setPosixFilePermissions(Path path, Set<PosixFilePermission> perms) { return (Path)Uncheck.apply(Files::setPosixFilePermissions, path, perms); }
  
  public static long size(Path path) { return ((Long)Uncheck.apply(Files::size, path)).longValue(); }
  
  public static Stream<Path> walk(Path start, FileVisitOption... options) { return (Stream)Uncheck.apply(Files::walk, start, options); }
  
  public static Stream<Path> walk(Path start, int maxDepth, FileVisitOption... options) { return (Stream)Uncheck.apply(Files::walk, start, Integer.valueOf(maxDepth), options); }
  
  public static Path walkFileTree(Path start, FileVisitor<? super Path> visitor) { return (Path)Uncheck.apply(Files::walkFileTree, start, visitor); }
  
  public static Path walkFileTree(Path start, Set<FileVisitOption> options, int maxDepth, FileVisitor<? super Path> visitor) { return (Path)Uncheck.apply(Files::walkFileTree, start, options, Integer.valueOf(maxDepth), visitor); }
  
  public static Path write(Path path, byte[] bytes, OpenOption... options) { return (Path)Uncheck.apply(Files::write, path, bytes, options); }
  
  public static Path write(Path path, Iterable<? extends CharSequence> lines, Charset cs, OpenOption... options) { return (Path)Uncheck.apply(Files::write, path, lines, cs, options); }
  
  public static Path write(Path path, Iterable<? extends CharSequence> lines, OpenOption... options) { return (Path)Uncheck.apply(Files::write, path, lines, options); }
}
