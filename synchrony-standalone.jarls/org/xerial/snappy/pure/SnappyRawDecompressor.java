package org.xerial.snappy.pure;

import java.nio.ByteOrder;
import org.xerial.snappy.SnappyError;
import org.xerial.snappy.SnappyErrorCode;

public final class SnappyRawDecompressor {
  private static final int[] DEC_32_TABLE = { 4, 1, 2, 1, 4, 4, 4, 4 };
  
  private static final int[] DEC_64_TABLE = { 0, 0, 0, -1, 0, 1, 2, 3 };
  
  private static final ByteOrder byteOrder = ByteOrder.nativeOrder();
  
  private static int littleEndian(int paramInt) { return (byteOrder == ByteOrder.LITTLE_ENDIAN) ? paramInt : Integer.reverseBytes(paramInt); }
  
  public static int getUncompressedLength(Object paramObject, long paramLong1, long paramLong2) { return readUncompressedLength(paramObject, paramLong1, paramLong2)[0]; }
  
  public static int decompress(Object paramObject1, long paramLong1, long paramLong2, Object paramObject2, long paramLong3, long paramLong4) {
    long l = paramLong1;
    int[] arrayOfInt = readUncompressedLength(paramObject1, l, paramLong2);
    int i = arrayOfInt[0];
    l += arrayOfInt[1];
    if (i > paramLong4 - paramLong3)
      throw new SnappyError(SnappyErrorCode.INVALID_CHUNK_SIZE, String.format("Uncompressed length %s must be less than %s", new Object[] { Integer.valueOf(i), Long.valueOf(paramLong4 - paramLong3) })); 
    int j = uncompressAll(paramObject1, l, paramLong2, paramObject2, paramLong3, paramLong4);
    if (i != j)
      throw new SnappyError(SnappyErrorCode.INVALID_CHUNK_SIZE, String.format("Recorded length is %s bytes but actual length after decompression is %s bytes ", new Object[] { Integer.valueOf(i), 
              Integer.valueOf(j) })); 
    return i;
  }
  
  private static int uncompressAll(Object paramObject1, long paramLong1, long paramLong2, Object paramObject2, long paramLong3, long paramLong4) { // Byte code:
    //   0: lload #8
    //   2: ldc2_w 8
    //   5: lsub
    //   6: lstore #10
    //   8: lload #6
    //   10: lstore #12
    //   12: lload_1
    //   13: lstore #14
    //   15: lload #14
    //   17: lload_3
    //   18: lcmp
    //   19: ifge -> 1029
    //   22: getstatic org/xerial/snappy/pure/UnsafeUtil.UNSAFE : Lsun/misc/Unsafe;
    //   25: aload_0
    //   26: lload #14
    //   28: dup2
    //   29: lconst_1
    //   30: ladd
    //   31: lstore #14
    //   33: invokevirtual getByte : (Ljava/lang/Object;J)B
    //   36: sipush #255
    //   39: iand
    //   40: istore #16
    //   42: getstatic org/xerial/snappy/pure/SnappyRawDecompressor.opLookupTable : [S
    //   45: iload #16
    //   47: saload
    //   48: ldc 65535
    //   50: iand
    //   51: istore #17
    //   53: iload #17
    //   55: bipush #11
    //   57: iushr
    //   58: istore #18
    //   60: iconst_0
    //   61: istore #19
    //   63: lload #14
    //   65: ldc2_w 4
    //   68: ladd
    //   69: lload_3
    //   70: lcmp
    //   71: ifge -> 98
    //   74: getstatic org/xerial/snappy/pure/UnsafeUtil.UNSAFE : Lsun/misc/Unsafe;
    //   77: aload_0
    //   78: lload #14
    //   80: invokevirtual getInt : (Ljava/lang/Object;J)I
    //   83: invokestatic littleEndian : (I)I
    //   86: getstatic org/xerial/snappy/pure/SnappyRawDecompressor.wordmask : [I
    //   89: iload #18
    //   91: iaload
    //   92: iand
    //   93: istore #19
    //   95: goto -> 260
    //   98: lload #14
    //   100: iload #18
    //   102: i2l
    //   103: ladd
    //   104: lload_3
    //   105: lcmp
    //   106: ifle -> 139
    //   109: new org/xerial/snappy/SnappyError
    //   112: dup
    //   113: getstatic org/xerial/snappy/SnappyErrorCode.PARSING_ERROR : Lorg/xerial/snappy/SnappyErrorCode;
    //   116: ldc 'position: %d'
    //   118: iconst_1
    //   119: anewarray java/lang/Object
    //   122: dup
    //   123: iconst_0
    //   124: lload #14
    //   126: lload_1
    //   127: lsub
    //   128: invokestatic valueOf : (J)Ljava/lang/Long;
    //   131: aastore
    //   132: invokestatic format : (Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
    //   135: invokespecial <init> : (Lorg/xerial/snappy/SnappyErrorCode;Ljava/lang/String;)V
    //   138: athrow
    //   139: iload #18
    //   141: tableswitch default -> 260, 1 -> 242, 2 -> 219, 3 -> 194, 4 -> 172
    //   172: getstatic org/xerial/snappy/pure/UnsafeUtil.UNSAFE : Lsun/misc/Unsafe;
    //   175: aload_0
    //   176: lload #14
    //   178: ldc2_w 3
    //   181: ladd
    //   182: invokevirtual getByte : (Ljava/lang/Object;J)B
    //   185: sipush #255
    //   188: iand
    //   189: bipush #24
    //   191: ishl
    //   192: istore #19
    //   194: iload #19
    //   196: getstatic org/xerial/snappy/pure/UnsafeUtil.UNSAFE : Lsun/misc/Unsafe;
    //   199: aload_0
    //   200: lload #14
    //   202: ldc2_w 2
    //   205: ladd
    //   206: invokevirtual getByte : (Ljava/lang/Object;J)B
    //   209: sipush #255
    //   212: iand
    //   213: bipush #16
    //   215: ishl
    //   216: ior
    //   217: istore #19
    //   219: iload #19
    //   221: getstatic org/xerial/snappy/pure/UnsafeUtil.UNSAFE : Lsun/misc/Unsafe;
    //   224: aload_0
    //   225: lload #14
    //   227: lconst_1
    //   228: ladd
    //   229: invokevirtual getByte : (Ljava/lang/Object;J)B
    //   232: sipush #255
    //   235: iand
    //   236: bipush #8
    //   238: ishl
    //   239: ior
    //   240: istore #19
    //   242: iload #19
    //   244: getstatic org/xerial/snappy/pure/UnsafeUtil.UNSAFE : Lsun/misc/Unsafe;
    //   247: aload_0
    //   248: lload #14
    //   250: invokevirtual getByte : (Ljava/lang/Object;J)B
    //   253: sipush #255
    //   256: iand
    //   257: ior
    //   258: istore #19
    //   260: iload #19
    //   262: ifge -> 295
    //   265: new org/xerial/snappy/SnappyError
    //   268: dup
    //   269: getstatic org/xerial/snappy/SnappyErrorCode.PARSING_ERROR : Lorg/xerial/snappy/SnappyErrorCode;
    //   272: ldc 'position: %d'
    //   274: iconst_1
    //   275: anewarray java/lang/Object
    //   278: dup
    //   279: iconst_0
    //   280: lload #14
    //   282: lload_1
    //   283: lsub
    //   284: invokestatic valueOf : (J)Ljava/lang/Long;
    //   287: aastore
    //   288: invokestatic format : (Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
    //   291: invokespecial <init> : (Lorg/xerial/snappy/SnappyErrorCode;Ljava/lang/String;)V
    //   294: athrow
    //   295: lload #14
    //   297: iload #18
    //   299: i2l
    //   300: ladd
    //   301: lstore #14
    //   303: iload #17
    //   305: sipush #255
    //   308: iand
    //   309: istore #20
    //   311: iload #20
    //   313: ifne -> 319
    //   316: goto -> 15
    //   319: iload #16
    //   321: iconst_3
    //   322: iand
    //   323: ifne -> 497
    //   326: iload #20
    //   328: iload #19
    //   330: iadd
    //   331: istore #21
    //   333: lload #12
    //   335: iload #21
    //   337: i2l
    //   338: ladd
    //   339: lstore #22
    //   341: lload #22
    //   343: lload #10
    //   345: lcmp
    //   346: ifgt -> 364
    //   349: lload #14
    //   351: iload #21
    //   353: i2l
    //   354: ladd
    //   355: lload_3
    //   356: ldc2_w 8
    //   359: lsub
    //   360: lcmp
    //   361: ifle -> 437
    //   364: lload #22
    //   366: lload #8
    //   368: lcmp
    //   369: ifle -> 402
    //   372: new org/xerial/snappy/SnappyError
    //   375: dup
    //   376: getstatic org/xerial/snappy/SnappyErrorCode.PARSING_ERROR : Lorg/xerial/snappy/SnappyErrorCode;
    //   379: ldc 'position: %d'
    //   381: iconst_1
    //   382: anewarray java/lang/Object
    //   385: dup
    //   386: iconst_0
    //   387: lload #14
    //   389: lload_1
    //   390: lsub
    //   391: invokestatic valueOf : (J)Ljava/lang/Long;
    //   394: aastore
    //   395: invokestatic format : (Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
    //   398: invokespecial <init> : (Lorg/xerial/snappy/SnappyErrorCode;Ljava/lang/String;)V
    //   401: athrow
    //   402: getstatic org/xerial/snappy/pure/UnsafeUtil.UNSAFE : Lsun/misc/Unsafe;
    //   405: aload_0
    //   406: lload #14
    //   408: aload #5
    //   410: lload #12
    //   412: iload #21
    //   414: i2l
    //   415: invokevirtual copyMemory : (Ljava/lang/Object;JLjava/lang/Object;JJ)V
    //   418: lload #14
    //   420: iload #21
    //   422: i2l
    //   423: ladd
    //   424: lstore #14
    //   426: lload #12
    //   428: iload #21
    //   430: i2l
    //   431: ladd
    //   432: lstore #12
    //   434: goto -> 494
    //   437: getstatic org/xerial/snappy/pure/UnsafeUtil.UNSAFE : Lsun/misc/Unsafe;
    //   440: aload #5
    //   442: lload #12
    //   444: getstatic org/xerial/snappy/pure/UnsafeUtil.UNSAFE : Lsun/misc/Unsafe;
    //   447: aload_0
    //   448: lload #14
    //   450: invokevirtual getLong : (Ljava/lang/Object;J)J
    //   453: invokevirtual putLong : (Ljava/lang/Object;JJ)V
    //   456: lload #14
    //   458: ldc2_w 8
    //   461: ladd
    //   462: lstore #14
    //   464: lload #12
    //   466: ldc2_w 8
    //   469: ladd
    //   470: lstore #12
    //   472: lload #12
    //   474: lload #22
    //   476: lcmp
    //   477: iflt -> 437
    //   480: lload #14
    //   482: lload #12
    //   484: lload #22
    //   486: lsub
    //   487: lsub
    //   488: lstore #14
    //   490: lload #22
    //   492: lstore #12
    //   494: goto -> 1026
    //   497: iload #17
    //   499: sipush #1792
    //   502: iand
    //   503: istore #21
    //   505: iload #21
    //   507: iload #19
    //   509: iadd
    //   510: istore #21
    //   512: lload #12
    //   514: iload #21
    //   516: i2l
    //   517: lsub
    //   518: lstore #22
    //   520: lload #22
    //   522: lload #6
    //   524: lcmp
    //   525: iflt -> 540
    //   528: lload #12
    //   530: iload #20
    //   532: i2l
    //   533: ladd
    //   534: lload #8
    //   536: lcmp
    //   537: ifle -> 570
    //   540: new org/xerial/snappy/SnappyError
    //   543: dup
    //   544: getstatic org/xerial/snappy/SnappyErrorCode.PARSING_ERROR : Lorg/xerial/snappy/SnappyErrorCode;
    //   547: ldc 'position: %d'
    //   549: iconst_1
    //   550: anewarray java/lang/Object
    //   553: dup
    //   554: iconst_0
    //   555: lload #14
    //   557: lload_1
    //   558: lsub
    //   559: invokestatic valueOf : (J)Ljava/lang/Long;
    //   562: aastore
    //   563: invokestatic format : (Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
    //   566: invokespecial <init> : (Lorg/xerial/snappy/SnappyErrorCode;Ljava/lang/String;)V
    //   569: athrow
    //   570: lload #12
    //   572: iload #20
    //   574: i2l
    //   575: ladd
    //   576: lstore #24
    //   578: lload #12
    //   580: lload #10
    //   582: lcmp
    //   583: ifle -> 627
    //   586: lload #12
    //   588: lload #24
    //   590: lcmp
    //   591: ifge -> 1022
    //   594: getstatic org/xerial/snappy/pure/UnsafeUtil.UNSAFE : Lsun/misc/Unsafe;
    //   597: aload #5
    //   599: lload #12
    //   601: dup2
    //   602: lconst_1
    //   603: ladd
    //   604: lstore #12
    //   606: getstatic org/xerial/snappy/pure/UnsafeUtil.UNSAFE : Lsun/misc/Unsafe;
    //   609: aload #5
    //   611: lload #22
    //   613: dup2
    //   614: lconst_1
    //   615: ladd
    //   616: lstore #22
    //   618: invokevirtual getByte : (Ljava/lang/Object;J)B
    //   621: invokevirtual putByte : (Ljava/lang/Object;JB)V
    //   624: goto -> 586
    //   627: iload #21
    //   629: bipush #8
    //   631: if_icmpge -> 805
    //   634: getstatic org/xerial/snappy/pure/SnappyRawDecompressor.DEC_32_TABLE : [I
    //   637: iload #21
    //   639: iaload
    //   640: istore #26
    //   642: getstatic org/xerial/snappy/pure/SnappyRawDecompressor.DEC_64_TABLE : [I
    //   645: iload #21
    //   647: iaload
    //   648: istore #27
    //   650: getstatic org/xerial/snappy/pure/UnsafeUtil.UNSAFE : Lsun/misc/Unsafe;
    //   653: aload #5
    //   655: lload #12
    //   657: getstatic org/xerial/snappy/pure/UnsafeUtil.UNSAFE : Lsun/misc/Unsafe;
    //   660: aload #5
    //   662: lload #22
    //   664: invokevirtual getByte : (Ljava/lang/Object;J)B
    //   667: invokevirtual putByte : (Ljava/lang/Object;JB)V
    //   670: getstatic org/xerial/snappy/pure/UnsafeUtil.UNSAFE : Lsun/misc/Unsafe;
    //   673: aload #5
    //   675: lload #12
    //   677: lconst_1
    //   678: ladd
    //   679: getstatic org/xerial/snappy/pure/UnsafeUtil.UNSAFE : Lsun/misc/Unsafe;
    //   682: aload #5
    //   684: lload #22
    //   686: lconst_1
    //   687: ladd
    //   688: invokevirtual getByte : (Ljava/lang/Object;J)B
    //   691: invokevirtual putByte : (Ljava/lang/Object;JB)V
    //   694: getstatic org/xerial/snappy/pure/UnsafeUtil.UNSAFE : Lsun/misc/Unsafe;
    //   697: aload #5
    //   699: lload #12
    //   701: ldc2_w 2
    //   704: ladd
    //   705: getstatic org/xerial/snappy/pure/UnsafeUtil.UNSAFE : Lsun/misc/Unsafe;
    //   708: aload #5
    //   710: lload #22
    //   712: ldc2_w 2
    //   715: ladd
    //   716: invokevirtual getByte : (Ljava/lang/Object;J)B
    //   719: invokevirtual putByte : (Ljava/lang/Object;JB)V
    //   722: getstatic org/xerial/snappy/pure/UnsafeUtil.UNSAFE : Lsun/misc/Unsafe;
    //   725: aload #5
    //   727: lload #12
    //   729: ldc2_w 3
    //   732: ladd
    //   733: getstatic org/xerial/snappy/pure/UnsafeUtil.UNSAFE : Lsun/misc/Unsafe;
    //   736: aload #5
    //   738: lload #22
    //   740: ldc2_w 3
    //   743: ladd
    //   744: invokevirtual getByte : (Ljava/lang/Object;J)B
    //   747: invokevirtual putByte : (Ljava/lang/Object;JB)V
    //   750: lload #12
    //   752: ldc2_w 4
    //   755: ladd
    //   756: lstore #12
    //   758: lload #22
    //   760: iload #26
    //   762: i2l
    //   763: ladd
    //   764: lstore #22
    //   766: getstatic org/xerial/snappy/pure/UnsafeUtil.UNSAFE : Lsun/misc/Unsafe;
    //   769: aload #5
    //   771: lload #12
    //   773: getstatic org/xerial/snappy/pure/UnsafeUtil.UNSAFE : Lsun/misc/Unsafe;
    //   776: aload #5
    //   778: lload #22
    //   780: invokevirtual getInt : (Ljava/lang/Object;J)I
    //   783: invokevirtual putInt : (Ljava/lang/Object;JI)V
    //   786: lload #12
    //   788: ldc2_w 4
    //   791: ladd
    //   792: lstore #12
    //   794: lload #22
    //   796: iload #27
    //   798: i2l
    //   799: lsub
    //   800: lstore #22
    //   802: goto -> 841
    //   805: getstatic org/xerial/snappy/pure/UnsafeUtil.UNSAFE : Lsun/misc/Unsafe;
    //   808: aload #5
    //   810: lload #12
    //   812: getstatic org/xerial/snappy/pure/UnsafeUtil.UNSAFE : Lsun/misc/Unsafe;
    //   815: aload #5
    //   817: lload #22
    //   819: invokevirtual getLong : (Ljava/lang/Object;J)J
    //   822: invokevirtual putLong : (Ljava/lang/Object;JJ)V
    //   825: lload #22
    //   827: ldc2_w 8
    //   830: ladd
    //   831: lstore #22
    //   833: lload #12
    //   835: ldc2_w 8
    //   838: ladd
    //   839: lstore #12
    //   841: lload #24
    //   843: lload #10
    //   845: lcmp
    //   846: ifle -> 975
    //   849: lload #24
    //   851: lload #8
    //   853: lcmp
    //   854: ifle -> 887
    //   857: new org/xerial/snappy/SnappyError
    //   860: dup
    //   861: getstatic org/xerial/snappy/SnappyErrorCode.PARSING_ERROR : Lorg/xerial/snappy/SnappyErrorCode;
    //   864: ldc 'position: %d'
    //   866: iconst_1
    //   867: anewarray java/lang/Object
    //   870: dup
    //   871: iconst_0
    //   872: lload #14
    //   874: lload_1
    //   875: lsub
    //   876: invokestatic valueOf : (J)Ljava/lang/Long;
    //   879: aastore
    //   880: invokestatic format : (Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
    //   883: invokespecial <init> : (Lorg/xerial/snappy/SnappyErrorCode;Ljava/lang/String;)V
    //   886: athrow
    //   887: lload #12
    //   889: lload #10
    //   891: lcmp
    //   892: ifge -> 934
    //   895: getstatic org/xerial/snappy/pure/UnsafeUtil.UNSAFE : Lsun/misc/Unsafe;
    //   898: aload #5
    //   900: lload #12
    //   902: getstatic org/xerial/snappy/pure/UnsafeUtil.UNSAFE : Lsun/misc/Unsafe;
    //   905: aload #5
    //   907: lload #22
    //   909: invokevirtual getLong : (Ljava/lang/Object;J)J
    //   912: invokevirtual putLong : (Ljava/lang/Object;JJ)V
    //   915: lload #22
    //   917: ldc2_w 8
    //   920: ladd
    //   921: lstore #22
    //   923: lload #12
    //   925: ldc2_w 8
    //   928: ladd
    //   929: lstore #12
    //   931: goto -> 887
    //   934: lload #12
    //   936: lload #24
    //   938: lcmp
    //   939: ifge -> 1022
    //   942: getstatic org/xerial/snappy/pure/UnsafeUtil.UNSAFE : Lsun/misc/Unsafe;
    //   945: aload #5
    //   947: lload #12
    //   949: dup2
    //   950: lconst_1
    //   951: ladd
    //   952: lstore #12
    //   954: getstatic org/xerial/snappy/pure/UnsafeUtil.UNSAFE : Lsun/misc/Unsafe;
    //   957: aload #5
    //   959: lload #22
    //   961: dup2
    //   962: lconst_1
    //   963: ladd
    //   964: lstore #22
    //   966: invokevirtual getByte : (Ljava/lang/Object;J)B
    //   969: invokevirtual putByte : (Ljava/lang/Object;JB)V
    //   972: goto -> 934
    //   975: lload #12
    //   977: lload #24
    //   979: lcmp
    //   980: ifge -> 1022
    //   983: getstatic org/xerial/snappy/pure/UnsafeUtil.UNSAFE : Lsun/misc/Unsafe;
    //   986: aload #5
    //   988: lload #12
    //   990: getstatic org/xerial/snappy/pure/UnsafeUtil.UNSAFE : Lsun/misc/Unsafe;
    //   993: aload #5
    //   995: lload #22
    //   997: invokevirtual getLong : (Ljava/lang/Object;J)J
    //   1000: invokevirtual putLong : (Ljava/lang/Object;JJ)V
    //   1003: lload #22
    //   1005: ldc2_w 8
    //   1008: ladd
    //   1009: lstore #22
    //   1011: lload #12
    //   1013: ldc2_w 8
    //   1016: ladd
    //   1017: lstore #12
    //   1019: goto -> 975
    //   1022: lload #24
    //   1024: lstore #12
    //   1026: goto -> 15
    //   1029: lload #12
    //   1031: lload #6
    //   1033: lsub
    //   1034: l2i
    //   1035: ireturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #89	-> 0
    //   #91	-> 8
    //   #92	-> 12
    //   #94	-> 15
    //   #95	-> 22
    //   #96	-> 42
    //   #98	-> 53
    //   #99	-> 60
    //   #100	-> 63
    //   #101	-> 74
    //   #104	-> 98
    //   #105	-> 109
    //   #107	-> 139
    //   #109	-> 172
    //   #111	-> 194
    //   #113	-> 219
    //   #115	-> 242
    //   #118	-> 260
    //   #119	-> 265
    //   #121	-> 295
    //   #123	-> 303
    //   #124	-> 311
    //   #125	-> 316
    //   #128	-> 319
    //   #129	-> 326
    //   #132	-> 333
    //   #133	-> 341
    //   #134	-> 364
    //   #135	-> 372
    //   #139	-> 402
    //   #140	-> 418
    //   #141	-> 426
    //   #146	-> 437
    //   #147	-> 456
    //   #148	-> 464
    //   #150	-> 472
    //   #151	-> 480
    //   #152	-> 490
    //   #154	-> 494
    //   #159	-> 497
    //   #160	-> 505
    //   #162	-> 512
    //   #163	-> 520
    //   #164	-> 540
    //   #166	-> 570
    //   #168	-> 578
    //   #170	-> 586
    //   #171	-> 594
    //   #176	-> 627
    //   #178	-> 634
    //   #179	-> 642
    //   #181	-> 650
    //   #182	-> 670
    //   #183	-> 694
    //   #184	-> 722
    //   #185	-> 750
    //   #186	-> 758
    //   #188	-> 766
    //   #189	-> 786
    //   #190	-> 794
    //   #191	-> 802
    //   #193	-> 805
    //   #194	-> 825
    //   #195	-> 833
    //   #198	-> 841
    //   #199	-> 849
    //   #200	-> 857
    //   #203	-> 887
    //   #204	-> 895
    //   #205	-> 915
    //   #206	-> 923
    //   #209	-> 934
    //   #210	-> 942
    //   #214	-> 975
    //   #215	-> 983
    //   #216	-> 1003
    //   #217	-> 1011
    //   #221	-> 1022
    //   #223	-> 1026
    //   #225	-> 1029 }
  
  private static final int[] wordmask = { 0, 255, 65535, 16777215, -1 };
  
  private static final short[] opLookupTable = { 
      1, 2052, 4097, 8193, 2, 2053, 4098, 8194, 3, 2054, 
      4099, 8195, 4, 2055, 4100, 8196, 5, 2056, 4101, 8197, 
      6, 2057, 4102, 8198, 7, 2058, 4103, 8199, 8, 2059, 
      4104, 8200, 9, 2308, 4105, 8201, 10, 2309, 4106, 8202, 
      11, 2310, 4107, 8203, 12, 2311, 4108, 8204, 13, 2312, 
      4109, 8205, 14, 2313, 4110, 8206, 15, 2314, 4111, 8207, 
      16, 2315, 4112, 8208, 17, 2564, 4113, 8209, 18, 2565, 
      4114, 8210, 19, 2566, 4115, 8211, 20, 2567, 4116, 8212, 
      21, 2568, 4117, 8213, 22, 2569, 4118, 8214, 23, 2570, 
      4119, 8215, 24, 2571, 4120, 8216, 25, 2820, 4121, 8217, 
      26, 2821, 4122, 8218, 27, 2822, 4123, 8219, 28, 2823, 
      4124, 8220, 29, 2824, 4125, 8221, 30, 2825, 4126, 8222, 
      31, 2826, 4127, 8223, 32, 2827, 4128, 8224, 33, 3076, 
      4129, 8225, 34, 3077, 4130, 8226, 35, 3078, 4131, 8227, 
      36, 3079, 4132, 8228, 37, 3080, 4133, 8229, 38, 3081, 
      4134, 8230, 39, 3082, 4135, 8231, 40, 3083, 4136, 8232, 
      41, 3332, 4137, 8233, 42, 3333, 4138, 8234, 43, 3334, 
      4139, 8235, 44, 3335, 4140, 8236, 45, 3336, 4141, 8237, 
      46, 3337, 4142, 8238, 47, 3338, 4143, 8239, 48, 3339, 
      4144, 8240, 49, 3588, 4145, 8241, 50, 3589, 4146, 8242, 
      51, 3590, 4147, 8243, 52, 3591, 4148, 8244, 53, 3592, 
      4149, 8245, 54, 3593, 4150, 8246, 55, 3594, 4151, 8247, 
      56, 3595, 4152, 8248, 57, 3844, 4153, 8249, 58, 3845, 
      4154, 8250, 59, 3846, 4155, 8251, 60, 3847, 4156, 8252, 
      2049, 3848, 4157, 8253, 4097, 3849, 4158, 8254, 6145, 3850, 
      4159, 8255, 8193, 3851, 4160, 8256 };
  
  static int[] readUncompressedLength(Object paramObject, long paramLong1, long paramLong2) {
    byte b = 0;
    int j = getUnsignedByteSafe(paramObject, paramLong1 + b, paramLong2);
    b++;
    int i = j & 0x7F;
    if ((j & 0x80) != 0) {
      j = getUnsignedByteSafe(paramObject, paramLong1 + b, paramLong2);
      b++;
      i |= (j & 0x7F) << 7;
      if ((j & 0x80) != 0) {
        j = getUnsignedByteSafe(paramObject, paramLong1 + b, paramLong2);
        b++;
        i |= (j & 0x7F) << 14;
        if ((j & 0x80) != 0) {
          j = getUnsignedByteSafe(paramObject, paramLong1 + b, paramLong2);
          b++;
          i |= (j & 0x7F) << 21;
          if ((j & 0x80) != 0) {
            j = getUnsignedByteSafe(paramObject, paramLong1 + b, paramLong2);
            b++;
            i |= (j & 0x7F) << 28;
            if ((j & 0x80) != 0)
              throw new SnappyError(SnappyErrorCode.PARSING_ERROR, String.format("position: %d, error: %s", new Object[] { Long.valueOf(paramLong1 + b), "last byte of compressed length int has high bit set" })); 
          } 
        } 
      } 
    } 
    return new int[] { i, b };
  }
  
  private static int getUnsignedByteSafe(Object paramObject, long paramLong1, long paramLong2) {
    if (paramLong1 >= paramLong2)
      throw new SnappyError(SnappyErrorCode.PARSING_ERROR, String.format("position: %d, error: %s", new Object[] { Long.valueOf(paramLong2 - paramLong1), "Input is truncated" })); 
    return UnsafeUtil.UNSAFE.getByte(paramObject, paramLong1) & 0xFF;
  }
}
