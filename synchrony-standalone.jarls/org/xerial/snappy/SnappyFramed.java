package org.xerial.snappy;

import java.io.IOException;
import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodHandles;
import java.lang.invoke.MethodType;
import java.nio.ByteBuffer;
import java.nio.channels.ReadableByteChannel;
import java.util.function.Supplier;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.Checksum;

final class SnappyFramed {
  public static final int COMPRESSED_DATA_FLAG = 0;
  
  public static final int UNCOMPRESSED_DATA_FLAG = 1;
  
  public static final int STREAM_IDENTIFIER_FLAG = 255;
  
  private static final int MASK_DELTA = -1568478504;
  
  private static final Supplier<Checksum> CHECKSUM_SUPPLIER;
  
  public static final byte[] HEADER_BYTES;
  
  static  {
    Supplier supplier = null;
    try {
      Class clazz = Class.forName("java.util.zip.CRC32C");
      MethodHandles.Lookup lookup = MethodHandles.publicLookup();
      MethodHandle methodHandle = lookup.findConstructor(clazz, MethodType.methodType(void.class)).asType(MethodType.methodType(Checksum.class));
      supplier = (() -> {
          try {
            return paramMethodHandle.invokeExact();
          } catch (Throwable throwable) {
            throw new IllegalStateException(throwable);
          } 
        });
    } catch (Throwable throwable) {
      Logger.getLogger(SnappyFramed.class.getName())
        .log(Level.FINE, "java.util.zip.CRC32C not loaded, using PureJavaCrc32C", throwable);
      supplier = null;
    } 
    CHECKSUM_SUPPLIER = (supplier != null) ? supplier : PureJavaCrc32C::new;
    HEADER_BYTES = new byte[] { -1, 6, 0, 0, 115, 78, 97, 80, 112, 89 };
  }
  
  public static Checksum getCRC32C() { return (Checksum)CHECKSUM_SUPPLIER.get(); }
  
  public static int maskedCrc32c(Checksum paramChecksum, byte[] paramArrayOfByte, int paramInt1, int paramInt2) {
    paramChecksum.reset();
    paramChecksum.update(paramArrayOfByte, paramInt1, paramInt2);
    return mask((int)paramChecksum.getValue());
  }
  
  public static int mask(int paramInt) { return (paramInt >>> 15 | paramInt << 17) + -1568478504; }
  
  static final int readBytes(ReadableByteChannel paramReadableByteChannel, ByteBuffer paramByteBuffer) throws IOException {
    int i = paramByteBuffer.remaining();
    int j = 0;
    int k = paramReadableByteChannel.read(paramByteBuffer);
    j = k;
    if (k < i)
      while (paramByteBuffer.remaining() != 0 && k != -1) {
        k = paramReadableByteChannel.read(paramByteBuffer);
        if (k != -1)
          j += k; 
      }  
    if (j > 0) {
      paramByteBuffer.limit(paramByteBuffer.position());
    } else {
      paramByteBuffer.position(paramByteBuffer.limit());
    } 
    return j;
  }
  
  static int skip(ReadableByteChannel paramReadableByteChannel, int paramInt, ByteBuffer paramByteBuffer) throws IOException {
    if (paramInt <= 0)
      return 0; 
    int i = paramInt;
    int j = 0;
    while (i > 0 && j != -1) {
      paramByteBuffer.clear();
      if (i < paramByteBuffer.capacity())
        paramByteBuffer.limit(i); 
      j = paramReadableByteChannel.read(paramByteBuffer);
      if (j > 0)
        i -= j; 
    } 
    paramByteBuffer.clear();
    return paramInt - i;
  }
}
