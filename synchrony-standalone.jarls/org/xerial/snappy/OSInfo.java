package org.xerial.snappy;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.Locale;

public class OSInfo {
  private static HashMap<String, String> archMapping = new HashMap();
  
  public static final String X86 = "x86";
  
  public static final String X86_64 = "x86_64";
  
  public static final String IA64_32 = "ia64_32";
  
  public static final String IA64 = "ia64";
  
  public static final String PPC = "ppc";
  
  public static final String PPC64 = "ppc64";
  
  public static final String IBMZ = "s390";
  
  public static final String IBMZ_64 = "s390x";
  
  public static final String AARCH_64 = "aarch64";
  
  static  {
    archMapping.put("x86", "x86");
    archMapping.put("i386", "x86");
    archMapping.put("i486", "x86");
    archMapping.put("i586", "x86");
    archMapping.put("i686", "x86");
    archMapping.put("pentium", "x86");
    archMapping.put("x86_64", "x86_64");
    archMapping.put("amd64", "x86_64");
    archMapping.put("em64t", "x86_64");
    archMapping.put("universal", "x86_64");
    archMapping.put("ia64", "ia64");
    archMapping.put("ia64w", "ia64");
    archMapping.put("ia64_32", "ia64_32");
    archMapping.put("ia64n", "ia64_32");
    archMapping.put("ppc", "ppc");
    archMapping.put("power", "ppc");
    archMapping.put("powerpc", "ppc");
    archMapping.put("power_pc", "ppc");
    archMapping.put("power_rs", "ppc");
    archMapping.put("ppc64", "ppc64");
    archMapping.put("power64", "ppc64");
    archMapping.put("powerpc64", "ppc64");
    archMapping.put("power_pc64", "ppc64");
    archMapping.put("power_rs64", "ppc64");
    archMapping.put("s390", "s390");
    archMapping.put("s390x", "s390x");
    archMapping.put("aarch64", "aarch64");
  }
  
  public static void main(String[] paramArrayOfString) {
    if (paramArrayOfString.length >= 1) {
      if ("--os".equals(paramArrayOfString[0])) {
        System.out.print(getOSName());
        return;
      } 
      if ("--arch".equals(paramArrayOfString[0])) {
        System.out.print(getArchName());
        return;
      } 
    } 
    System.out.print(getNativeLibFolderPathForCurrentOS());
  }
  
  public static String getNativeLibFolderPathForCurrentOS() { return getOSName() + "/" + getArchName(); }
  
  public static String getOSName() { return translateOSNameToFolderName(System.getProperty("os.name")); }
  
  public static boolean isAndroid() { return System.getProperty("java.runtime.name", "").toLowerCase().contains("android"); }
  
  static String getHardwareName() {
    try {
      Process process = Runtime.getRuntime().exec("uname -m");
      process.waitFor();
      inputStream = process.getInputStream();
      try {
        int i = 0;
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        byte[] arrayOfByte = new byte[32];
        while ((i = inputStream.read(arrayOfByte, 0, arrayOfByte.length)) >= 0)
          byteArrayOutputStream.write(arrayOfByte, 0, i); 
        return byteArrayOutputStream.toString();
      } finally {
        if (inputStream != null)
          inputStream.close(); 
      } 
    } catch (Throwable throwable) {
      System.err.println("Error while running uname -m: " + throwable.getMessage());
      return "unknown";
    } 
  }
  
  static String resolveArmArchType() {
    if (System.getProperty("os.name").contains("Linux")) {
      String str1 = getHardwareName();
      if (str1.startsWith("armv6"))
        return "armv6"; 
      if (str1.startsWith("armv7"))
        return "armv7"; 
      String str2 = System.getProperty("sun.arch.abi");
      if (str2 != null && str2.startsWith("gnueabihf"))
        return "armv7"; 
      try {
        int i = Runtime.getRuntime().exec("which readelf").waitFor();
        if (i == 0) {
          String str = System.getProperty("java.home");
          String[] arrayOfString = { "/bin/sh", "-c", "find '" + str + "' -name 'libjvm.so' | head -1 | xargs readelf -A | grep 'Tag_ABI_VFP_args: VFP registers'" };
          i = Runtime.getRuntime().exec(arrayOfString).waitFor();
          if (i == 0)
            return "armv7"; 
        } else {
          System.err.println("WARNING! readelf not found. Cannot check if running on an armhf system, armel architecture will be presumed.");
        } 
      } catch (IOException iOException) {
      
      } catch (InterruptedException interruptedException) {}
    } 
    return "arm";
  }
  
  public static String getArchName() {
    String str = System.getProperty("os.arch");
    if (isAndroid())
      return "android-arm"; 
    if (str.startsWith("arm")) {
      str = resolveArmArchType();
    } else {
      String str1 = str.toLowerCase(Locale.US);
      if (archMapping.containsKey(str1))
        return (String)archMapping.get(str1); 
    } 
    return translateArchNameToFolderName(str);
  }
  
  static String translateOSNameToFolderName(String paramString) {
    if (paramString.contains("Windows"))
      return "Windows"; 
    if (paramString.contains("Mac"))
      return "Mac"; 
    if (paramString.contains("Linux"))
      return "Linux"; 
    if (paramString.contains("AIX"))
      return "AIX"; 
    return paramString.replaceAll("\\W", "");
  }
  
  static String translateArchNameToFolderName(String paramString) { return paramString.replaceAll("\\W", ""); }
}
