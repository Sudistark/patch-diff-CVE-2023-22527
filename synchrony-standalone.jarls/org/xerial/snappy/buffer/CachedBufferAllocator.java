package org.xerial.snappy.buffer;

import java.lang.ref.SoftReference;
import java.util.ArrayDeque;
import java.util.Deque;
import java.util.HashMap;
import java.util.Map;

public class CachedBufferAllocator implements BufferAllocator {
  private static BufferAllocatorFactory factory = new Object();
  
  public static void setBufferAllocatorFactory(BufferAllocatorFactory paramBufferAllocatorFactory) {
    assert paramBufferAllocatorFactory != null;
    factory = paramBufferAllocatorFactory;
  }
  
  public static BufferAllocatorFactory getBufferAllocatorFactory() { return factory; }
  
  private static final Map<Integer, SoftReference<CachedBufferAllocator>> queueTable = new HashMap();
  
  private final int bufferSize;
  
  private final Deque<byte[]> bufferQueue;
  
  public CachedBufferAllocator(int paramInt) {
    this.bufferSize = paramInt;
    this.bufferQueue = new ArrayDeque();
  }
  
  public static CachedBufferAllocator getAllocator(int paramInt) {
    CachedBufferAllocator cachedBufferAllocator = null;
    if (queueTable.containsKey(Integer.valueOf(paramInt)))
      cachedBufferAllocator = (CachedBufferAllocator)((SoftReference)queueTable.get(Integer.valueOf(paramInt))).get(); 
    if (cachedBufferAllocator == null) {
      cachedBufferAllocator = new CachedBufferAllocator(paramInt);
      queueTable.put(Integer.valueOf(paramInt), new SoftReference(cachedBufferAllocator));
    } 
    return cachedBufferAllocator;
  }
  
  public byte[] allocate(int paramInt) {
    synchronized (this) {
      if (this.bufferQueue.isEmpty())
        return new byte[paramInt]; 
      return (byte[])this.bufferQueue.pollFirst();
    } 
  }
  
  public void release(byte[] paramArrayOfByte) {
    synchronized (this) {
      this.bufferQueue.addLast(paramArrayOfByte);
    } 
  }
}
