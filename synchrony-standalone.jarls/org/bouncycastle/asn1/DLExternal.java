package org.bouncycastle.asn1;

import java.io.ByteArrayOutputStream;
import java.io.IOException;

public class DLExternal extends ASN1External {
  public DLExternal(ASN1EncodableVector paramASN1EncodableVector) { super(paramASN1EncodableVector); }
  
  public DLExternal(ASN1ObjectIdentifier paramASN1ObjectIdentifier, ASN1Integer paramASN1Integer, ASN1Primitive paramASN1Primitive, DERTaggedObject paramDERTaggedObject) { this(paramASN1ObjectIdentifier, paramASN1Integer, paramASN1Primitive, paramDERTaggedObject.getTagNo(), paramDERTaggedObject.toASN1Primitive()); }
  
  public DLExternal(ASN1ObjectIdentifier paramASN1ObjectIdentifier, ASN1Integer paramASN1Integer, ASN1Primitive paramASN1Primitive1, int paramInt, ASN1Primitive paramASN1Primitive2) { super(paramASN1ObjectIdentifier, paramASN1Integer, paramASN1Primitive1, paramInt, paramASN1Primitive2); }
  
  ASN1Primitive toDLObject() { return this; }
  
  int encodedLength() throws IOException { return getEncoded().length; }
  
  void encode(ASN1OutputStream paramASN1OutputStream, boolean paramBoolean) throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    if (this.directReference != null)
      byteArrayOutputStream.write(this.directReference.getEncoded("DL")); 
    if (this.indirectReference != null)
      byteArrayOutputStream.write(this.indirectReference.getEncoded("DL")); 
    if (this.dataValueDescriptor != null)
      byteArrayOutputStream.write(this.dataValueDescriptor.getEncoded("DL")); 
    DLTaggedObject dLTaggedObject = new DLTaggedObject(true, this.encoding, this.externalContent);
    byteArrayOutputStream.write(dLTaggedObject.getEncoded("DL"));
    paramASN1OutputStream.writeEncoded(paramBoolean, 32, 8, byteArrayOutputStream.toByteArray());
  }
}
