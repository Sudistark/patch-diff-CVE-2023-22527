package org.bouncycastle.asn1;

import java.io.IOException;

public abstract class ASN1TaggedObject extends ASN1Primitive implements ASN1TaggedObjectParser {
  final int tagNo;
  
  final boolean explicit;
  
  final ASN1Encodable obj;
  
  public static ASN1TaggedObject getInstance(ASN1TaggedObject paramASN1TaggedObject, boolean paramBoolean) {
    if (paramBoolean)
      return getInstance(paramASN1TaggedObject.getObject()); 
    throw new IllegalArgumentException("implicitly tagged tagged object");
  }
  
  public static ASN1TaggedObject getInstance(Object paramObject) {
    if (paramObject == null || paramObject instanceof ASN1TaggedObject)
      return (ASN1TaggedObject)paramObject; 
    if (paramObject instanceof byte[])
      try {
        return getInstance(fromByteArray((byte[])paramObject));
      } catch (IOException iOException) {
        throw new IllegalArgumentException("failed to construct tagged object from byte[]: " + iOException.getMessage());
      }  
    throw new IllegalArgumentException("unknown object in getInstance: " + paramObject.getClass().getName());
  }
  
  public ASN1TaggedObject(boolean paramBoolean, int paramInt, ASN1Encodable paramASN1Encodable) {
    if (null == paramASN1Encodable)
      throw new NullPointerException("'obj' cannot be null"); 
    this.tagNo = paramInt;
    this.explicit = (paramBoolean || paramASN1Encodable instanceof ASN1Choice);
    this.obj = paramASN1Encodable;
  }
  
  boolean asn1Equals(ASN1Primitive paramASN1Primitive) {
    if (!(paramASN1Primitive instanceof ASN1TaggedObject))
      return false; 
    ASN1TaggedObject aSN1TaggedObject = (ASN1TaggedObject)paramASN1Primitive;
    if (this.tagNo != aSN1TaggedObject.tagNo || this.explicit != aSN1TaggedObject.explicit)
      return false; 
    ASN1Primitive aSN1Primitive1 = this.obj.toASN1Primitive();
    ASN1Primitive aSN1Primitive2 = aSN1TaggedObject.obj.toASN1Primitive();
    return (aSN1Primitive1 == aSN1Primitive2 || aSN1Primitive1.asn1Equals(aSN1Primitive2));
  }
  
  public int hashCode() { return this.tagNo ^ (this.explicit ? 15 : 240) ^ this.obj.toASN1Primitive().hashCode(); }
  
  public int getTagNo() { return this.tagNo; }
  
  public boolean isExplicit() { return this.explicit; }
  
  public ASN1Primitive getObject() { return this.obj.toASN1Primitive(); }
  
  public ASN1Encodable getObjectParser(int paramInt, boolean paramBoolean) throws IOException {
    switch (paramInt) {
      case 17:
        return ASN1Set.getInstance(this, paramBoolean).parser();
      case 16:
        return ASN1Sequence.getInstance(this, paramBoolean).parser();
      case 4:
        return ASN1OctetString.getInstance(this, paramBoolean).parser();
    } 
    if (paramBoolean)
      return getObject(); 
    throw new ASN1Exception("implicit tagging not implemented for tag: " + paramInt);
  }
  
  public ASN1Primitive getLoadedObject() { return toASN1Primitive(); }
  
  ASN1Primitive toDERObject() { return new DERTaggedObject(this.explicit, this.tagNo, this.obj); }
  
  ASN1Primitive toDLObject() { return new DLTaggedObject(this.explicit, this.tagNo, this.obj); }
  
  abstract void encode(ASN1OutputStream paramASN1OutputStream, boolean paramBoolean) throws IOException;
  
  public String toString() { return "[" + this.tagNo + "]" + this.obj; }
}
