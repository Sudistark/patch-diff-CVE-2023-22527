package org.bouncycastle.asn1;

import java.io.IOException;
import org.bouncycastle.util.Arrays;

public class DERBMPString extends ASN1Primitive implements ASN1String {
  private final char[] string;
  
  public static DERBMPString getInstance(Object paramObject) {
    if (paramObject == null || paramObject instanceof DERBMPString)
      return (DERBMPString)paramObject; 
    if (paramObject instanceof byte[])
      try {
        return (DERBMPString)fromByteArray((byte[])paramObject);
      } catch (Exception exception) {
        throw new IllegalArgumentException("encoding error in getInstance: " + exception.toString());
      }  
    throw new IllegalArgumentException("illegal object in getInstance: " + paramObject.getClass().getName());
  }
  
  public static DERBMPString getInstance(ASN1TaggedObject paramASN1TaggedObject, boolean paramBoolean) {
    ASN1Primitive aSN1Primitive = paramASN1TaggedObject.getObject();
    return (paramBoolean || aSN1Primitive instanceof DERBMPString) ? getInstance(aSN1Primitive) : new DERBMPString(ASN1OctetString.getInstance(aSN1Primitive).getOctets());
  }
  
  DERBMPString(byte[] paramArrayOfByte) {
    if (paramArrayOfByte == null)
      throw new NullPointerException("'string' cannot be null"); 
    int i = paramArrayOfByte.length;
    if (0 != (i & true))
      throw new IllegalArgumentException("malformed BMPString encoding encountered"); 
    int j = i / 2;
    char[] arrayOfChar = new char[j];
    for (byte b = 0; b != j; b++)
      arrayOfChar[b] = (char)(paramArrayOfByte[2 * b] << 8 | paramArrayOfByte[2 * b + 1] & 0xFF); 
    this.string = arrayOfChar;
  }
  
  DERBMPString(char[] paramArrayOfChar) {
    if (paramArrayOfChar == null)
      throw new NullPointerException("'string' cannot be null"); 
    this.string = paramArrayOfChar;
  }
  
  public DERBMPString(String paramString) {
    if (paramString == null)
      throw new NullPointerException("'string' cannot be null"); 
    this.string = paramString.toCharArray();
  }
  
  public String getString() { return new String(this.string); }
  
  public String toString() { return getString(); }
  
  public int hashCode() { return Arrays.hashCode(this.string); }
  
  protected boolean asn1Equals(ASN1Primitive paramASN1Primitive) {
    if (!(paramASN1Primitive instanceof DERBMPString))
      return false; 
    DERBMPString dERBMPString = (DERBMPString)paramASN1Primitive;
    return Arrays.areEqual(this.string, dERBMPString.string);
  }
  
  boolean isConstructed() { return false; }
  
  int encodedLength() { return 1 + StreamUtil.calculateBodyLength(this.string.length * 2) + this.string.length * 2; }
  
  void encode(ASN1OutputStream paramASN1OutputStream, boolean paramBoolean) throws IOException {
    int i = this.string.length;
    if (paramBoolean)
      paramASN1OutputStream.write(30); 
    paramASN1OutputStream.writeLength(i * 2);
    byte[] arrayOfByte = new byte[8];
    byte b = 0;
    int j = i & 0xFFFFFFFC;
    while (b < j) {
      char c1 = this.string[b];
      char c2 = this.string[b + true];
      char c3 = this.string[b + 2];
      char c4 = this.string[b + 3];
      b += true;
      arrayOfByte[0] = (byte)(c1 >> '\b');
      arrayOfByte[1] = (byte)c1;
      arrayOfByte[2] = (byte)(c2 >> '\b');
      arrayOfByte[3] = (byte)c2;
      arrayOfByte[4] = (byte)(c3 >> '\b');
      arrayOfByte[5] = (byte)c3;
      arrayOfByte[6] = (byte)(c4 >> '\b');
      arrayOfByte[7] = (byte)c4;
      paramASN1OutputStream.write(arrayOfByte, 0, 8);
    } 
    if (b < i) {
      byte b1 = 0;
      do {
        char c = this.string[b];
        b++;
        arrayOfByte[b1++] = (byte)(c >> '\b');
        arrayOfByte[b1++] = (byte)c;
      } while (b < i);
      paramASN1OutputStream.write(arrayOfByte, 0, b1);
    } 
  }
}
