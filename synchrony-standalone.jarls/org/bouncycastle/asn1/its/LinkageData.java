package org.bouncycastle.asn1.its;

import org.bouncycastle.asn1.ASN1EncodableVector;
import org.bouncycastle.asn1.ASN1Object;
import org.bouncycastle.asn1.ASN1Primitive;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.DERSequence;

public class LinkageData extends ASN1Object {
  private final IValue iCert;
  
  private final LinkageValue linkageValue;
  
  private final GroupLinkageValue groupLinkageValue;
  
  private LinkageData(ASN1Sequence paramASN1Sequence) {
    if (paramASN1Sequence.size() != 2 && paramASN1Sequence.size() != 3)
      throw new IllegalArgumentException("sequence must be size 2 or 3"); 
    this.iCert = IValue.getInstance(paramASN1Sequence.getObjectAt(2));
    this.linkageValue = LinkageValue.getInstance(paramASN1Sequence.getObjectAt(2));
    this.groupLinkageValue = GroupLinkageValue.getInstance(paramASN1Sequence.getObjectAt(2));
  }
  
  public static LinkageData getInstance(Object paramObject) { return (paramObject instanceof LinkageData) ? (LinkageData)paramObject : ((paramObject != null) ? new LinkageData(ASN1Sequence.getInstance(paramObject)) : null); }
  
  public ASN1Primitive toASN1Primitive() {
    ASN1EncodableVector aSN1EncodableVector = new ASN1EncodableVector();
    return new DERSequence(aSN1EncodableVector);
  }
}
