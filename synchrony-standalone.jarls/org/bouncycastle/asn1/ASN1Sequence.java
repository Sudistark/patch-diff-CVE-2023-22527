package org.bouncycastle.asn1;

import java.io.IOException;
import java.util.Enumeration;
import java.util.Iterator;
import org.bouncycastle.util.Arrays;
import org.bouncycastle.util.Iterable;

public abstract class ASN1Sequence extends ASN1Primitive implements Iterable<ASN1Encodable> {
  ASN1Encodable[] elements;
  
  public static ASN1Sequence getInstance(Object paramObject) {
    if (paramObject == null || paramObject instanceof ASN1Sequence)
      return (ASN1Sequence)paramObject; 
    if (paramObject instanceof ASN1SequenceParser)
      return getInstance(((ASN1SequenceParser)paramObject).toASN1Primitive()); 
    if (paramObject instanceof byte[])
      try {
        return getInstance(fromByteArray((byte[])paramObject));
      } catch (IOException iOException) {
        throw new IllegalArgumentException("failed to construct sequence from byte[]: " + iOException.getMessage());
      }  
    if (paramObject instanceof ASN1Encodable) {
      ASN1Primitive aSN1Primitive = ((ASN1Encodable)paramObject).toASN1Primitive();
      if (aSN1Primitive instanceof ASN1Sequence)
        return (ASN1Sequence)aSN1Primitive; 
    } 
    throw new IllegalArgumentException("unknown object in getInstance: " + paramObject.getClass().getName());
  }
  
  public static ASN1Sequence getInstance(ASN1TaggedObject paramASN1TaggedObject, boolean paramBoolean) {
    if (paramBoolean) {
      if (!paramASN1TaggedObject.isExplicit())
        throw new IllegalArgumentException("object implicit - explicit expected."); 
      return getInstance(paramASN1TaggedObject.getObject());
    } 
    ASN1Primitive aSN1Primitive = paramASN1TaggedObject.getObject();
    if (paramASN1TaggedObject.isExplicit())
      return (paramASN1TaggedObject instanceof BERTaggedObject) ? new BERSequence(aSN1Primitive) : new DLSequence(aSN1Primitive); 
    if (aSN1Primitive instanceof ASN1Sequence) {
      ASN1Sequence aSN1Sequence = (ASN1Sequence)aSN1Primitive;
      return (paramASN1TaggedObject instanceof BERTaggedObject) ? aSN1Sequence : (ASN1Sequence)aSN1Sequence.toDLObject();
    } 
    throw new IllegalArgumentException("unknown object in getInstance: " + paramASN1TaggedObject.getClass().getName());
  }
  
  protected ASN1Sequence() { this.elements = ASN1EncodableVector.EMPTY_ELEMENTS; }
  
  protected ASN1Sequence(ASN1Encodable paramASN1Encodable) {
    if (null == paramASN1Encodable)
      throw new NullPointerException("'element' cannot be null"); 
    this.elements = new ASN1Encodable[] { paramASN1Encodable };
  }
  
  protected ASN1Sequence(ASN1EncodableVector paramASN1EncodableVector) {
    if (null == paramASN1EncodableVector)
      throw new NullPointerException("'elementVector' cannot be null"); 
    this.elements = paramASN1EncodableVector.takeElements();
  }
  
  protected ASN1Sequence(ASN1Encodable[] paramArrayOfASN1Encodable) {
    if (Arrays.isNullOrContainsNull(paramArrayOfASN1Encodable))
      throw new NullPointerException("'elements' cannot be null, or contain null"); 
    this.elements = ASN1EncodableVector.cloneElements(paramArrayOfASN1Encodable);
  }
  
  ASN1Sequence(ASN1Encodable[] paramArrayOfASN1Encodable, boolean paramBoolean) { this.elements = paramBoolean ? ASN1EncodableVector.cloneElements(paramArrayOfASN1Encodable) : paramArrayOfASN1Encodable; }
  
  public ASN1Encodable[] toArray() { return ASN1EncodableVector.cloneElements(this.elements); }
  
  ASN1Encodable[] toArrayInternal() { return this.elements; }
  
  public Enumeration getObjects() { return new Object(this); }
  
  public ASN1SequenceParser parser() {
    int i = size();
    return new Object(this, i);
  }
  
  public ASN1Encodable getObjectAt(int paramInt) { return this.elements[paramInt]; }
  
  public int size() { return this.elements.length; }
  
  public int hashCode() {
    int i = this.elements.length;
    int j;
    for (j = i + 1; --i >= 0; j ^= this.elements[i].toASN1Primitive().hashCode())
      j *= 257; 
    return j;
  }
  
  boolean asn1Equals(ASN1Primitive paramASN1Primitive) {
    if (!(paramASN1Primitive instanceof ASN1Sequence))
      return false; 
    ASN1Sequence aSN1Sequence = (ASN1Sequence)paramASN1Primitive;
    int i = size();
    if (aSN1Sequence.size() != i)
      return false; 
    for (byte b = 0; b < i; b++) {
      ASN1Primitive aSN1Primitive1 = this.elements[b].toASN1Primitive();
      ASN1Primitive aSN1Primitive2 = aSN1Sequence.elements[b].toASN1Primitive();
      if (aSN1Primitive1 != aSN1Primitive2 && !aSN1Primitive1.asn1Equals(aSN1Primitive2))
        return false; 
    } 
    return true;
  }
  
  ASN1Primitive toDERObject() { return new DERSequence(this.elements, false); }
  
  ASN1Primitive toDLObject() { return new DLSequence(this.elements, false); }
  
  boolean isConstructed() { return true; }
  
  abstract void encode(ASN1OutputStream paramASN1OutputStream, boolean paramBoolean) throws IOException;
  
  public String toString() {
    int i = size();
    if (0 == i)
      return "[]"; 
    StringBuffer stringBuffer = new StringBuffer();
    stringBuffer.append('[');
    byte b = 0;
    while (true) {
      stringBuffer.append(this.elements[b]);
      if (++b >= i)
        break; 
      stringBuffer.append(", ");
    } 
    stringBuffer.append(']');
    return stringBuffer.toString();
  }
  
  public Iterator<ASN1Encodable> iterator() { return new Arrays.Iterator(this.elements); }
}
