package org.bouncycastle.util.test;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.math.BigInteger;
import java.security.SecureRandom;
import org.bouncycastle.util.Pack;

public class FixedSecureRandom extends SecureRandom {
  private static BigInteger REGULAR = new BigInteger("01020304ffffffff0506070811111111", 16);
  
  private static BigInteger ANDROID = new BigInteger("1111111105060708ffffffff01020304", 16);
  
  private static BigInteger CLASSPATH = new BigInteger("3020104ffffffff05060708111111", 16);
  
  private static final boolean isAndroidStyle;
  
  private static final boolean isClasspathStyle;
  
  private static final boolean isRegularStyle;
  
  private byte[] _data;
  
  private int _index;
  
  public FixedSecureRandom(byte[] paramArrayOfByte) { this(new Source[] { new Data(paramArrayOfByte) }); }
  
  public FixedSecureRandom(byte[][] paramArrayOfByte) { this(buildDataArray(paramArrayOfByte)); }
  
  private static Data[] buildDataArray(byte[][] paramArrayOfByte) {
    Data[] arrayOfData = new Data[paramArrayOfByte.length];
    for (byte b = 0; b != paramArrayOfByte.length; b++)
      arrayOfData[b] = new Data(paramArrayOfByte[b]); 
    return arrayOfData;
  }
  
  public FixedSecureRandom(Source[] paramArrayOfSource) {
    super(null, new DummyProvider());
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    if (isRegularStyle) {
      if (isClasspathStyle) {
        for (byte b = 0; b != paramArrayOfSource.length; b++) {
          try {
            if (paramArrayOfSource[b] instanceof BigInteger) {
              byte[] arrayOfByte = (paramArrayOfSource[b]).data;
              int i = arrayOfByte.length - arrayOfByte.length % 4;
              int j;
              for (j = arrayOfByte.length - i - 1; j >= 0; j--)
                byteArrayOutputStream.write(arrayOfByte[j]); 
              for (j = arrayOfByte.length - i; j < arrayOfByte.length; j += 4)
                byteArrayOutputStream.write(arrayOfByte, j, 4); 
            } else {
              byteArrayOutputStream.write((paramArrayOfSource[b]).data);
            } 
          } catch (IOException iOException) {
            throw new IllegalArgumentException("can't save value source.");
          } 
        } 
      } else {
        for (byte b = 0; b != paramArrayOfSource.length; b++) {
          try {
            byteArrayOutputStream.write((paramArrayOfSource[b]).data);
          } catch (IOException iOException) {
            throw new IllegalArgumentException("can't save value source.");
          } 
        } 
      } 
    } else if (isAndroidStyle) {
      for (byte b = 0; b != paramArrayOfSource.length; b++) {
        try {
          if (paramArrayOfSource[b] instanceof BigInteger) {
            byte[] arrayOfByte = (paramArrayOfSource[b]).data;
            int i = arrayOfByte.length - arrayOfByte.length % 4;
            int j;
            for (j = 0; j < i; j += true)
              byteArrayOutputStream.write(arrayOfByte, arrayOfByte.length - j + 4, 4); 
            if (arrayOfByte.length - i != 0)
              for (j = 0; j != 4 - arrayOfByte.length - i; j++)
                byteArrayOutputStream.write(0);  
            for (j = 0; j != arrayOfByte.length - i; j++)
              byteArrayOutputStream.write(arrayOfByte[i + j]); 
          } else {
            byteArrayOutputStream.write((paramArrayOfSource[b]).data);
          } 
        } catch (IOException iOException) {
          throw new IllegalArgumentException("can't save value source.");
        } 
      } 
    } else {
      throw new IllegalStateException("Unrecognized BigInteger implementation");
    } 
    this._data = byteArrayOutputStream.toByteArray();
  }
  
  public void nextBytes(byte[] paramArrayOfByte) {
    System.arraycopy(this._data, this._index, paramArrayOfByte, 0, paramArrayOfByte.length);
    this._index += paramArrayOfByte.length;
  }
  
  public byte[] generateSeed(int paramInt) {
    byte[] arrayOfByte = new byte[paramInt];
    nextBytes(arrayOfByte);
    return arrayOfByte;
  }
  
  public int nextInt() {
    null = 0;
    null |= nextValue() << 24;
    null |= nextValue() << 16;
    null |= nextValue() << 8;
    return nextValue();
  }
  
  public long nextLong() {
    null = 0L;
    null |= nextValue() << 56;
    null |= nextValue() << 48;
    null |= nextValue() << 40;
    null |= nextValue() << 32;
    null |= nextValue() << 24;
    null |= nextValue() << 16;
    null |= nextValue() << 8;
    return nextValue();
  }
  
  public boolean isExhausted() { return (this._index == this._data.length); }
  
  private int nextValue() { return this._data[this._index++] & 0xFF; }
  
  private static byte[] expandToBitLength(int paramInt, byte[] paramArrayOfByte) {
    if ((paramInt + 7) / 8 > paramArrayOfByte.length) {
      byte[] arrayOfByte = new byte[(paramInt + 7) / 8];
      System.arraycopy(paramArrayOfByte, 0, arrayOfByte, arrayOfByte.length - paramArrayOfByte.length, paramArrayOfByte.length);
      if (isAndroidStyle && paramInt % 8 != 0) {
        int i = Pack.bigEndianToInt(arrayOfByte, 0);
        Pack.intToBigEndian(i << 8 - paramInt % 8, arrayOfByte, 0);
      } 
      return arrayOfByte;
    } 
    if (isAndroidStyle && paramInt < paramArrayOfByte.length * 8 && paramInt % 8 != 0) {
      int i = Pack.bigEndianToInt(paramArrayOfByte, 0);
      Pack.intToBigEndian(i << 8 - paramInt % 8, paramArrayOfByte, 0);
    } 
    return paramArrayOfByte;
  }
  
  static  {
    BigInteger bigInteger1 = new BigInteger(128, new RandomChecker());
    BigInteger bigInteger2 = new BigInteger(120, new RandomChecker());
    isAndroidStyle = bigInteger1.equals(ANDROID);
    isRegularStyle = bigInteger1.equals(REGULAR);
    isClasspathStyle = bigInteger2.equals(CLASSPATH);
  }
}
