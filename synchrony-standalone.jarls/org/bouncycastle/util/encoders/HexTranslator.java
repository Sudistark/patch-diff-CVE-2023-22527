package org.bouncycastle.util.encoders;

public class HexTranslator implements Translator {
  private static final byte[] hexTable = { 
      48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 
      97, 98, 99, 100, 101, 102 };
  
  public int getEncodedBlockSize() { return 2; }
  
  public int encode(byte[] paramArrayOfByte1, int paramInt1, int paramInt2, byte[] paramArrayOfByte2, int paramInt3) {
    byte b = 0;
    for (int i = 0; b < paramInt2; i += 2) {
      paramArrayOfByte2[paramInt3 + i] = hexTable[paramArrayOfByte1[paramInt1] >> 4 & 0xF];
      paramArrayOfByte2[paramInt3 + i + 1] = hexTable[paramArrayOfByte1[paramInt1] & 0xF];
      paramInt1++;
      b++;
    } 
    return paramInt2 * 2;
  }
  
  public int getDecodedBlockSize() { return 1; }
  
  public int decode(byte[] paramArrayOfByte1, int paramInt1, int paramInt2, byte[] paramArrayOfByte2, int paramInt3) {
    int i = paramInt2 / 2;
    for (byte b = 0; b < i; b++) {
      byte b1 = paramArrayOfByte1[paramInt1 + b * 2];
      byte b2 = paramArrayOfByte1[paramInt1 + b * 2 + 1];
      if (b1 < 97) {
        paramArrayOfByte2[paramInt3] = (byte)(b1 - 48 << 4);
      } else {
        paramArrayOfByte2[paramInt3] = (byte)(b1 - 97 + 10 << 4);
      } 
      if (b2 < 97) {
        paramArrayOfByte2[paramInt3] = (byte)(paramArrayOfByte2[paramInt3] + (byte)(b2 - 48));
      } else {
        paramArrayOfByte2[paramInt3] = (byte)(paramArrayOfByte2[paramInt3] + (byte)(b2 - 97 + 10));
      } 
      paramInt3++;
    } 
    return i;
  }
}
