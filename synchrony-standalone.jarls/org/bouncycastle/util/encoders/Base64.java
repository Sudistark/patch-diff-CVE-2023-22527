package org.bouncycastle.util.encoders;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import org.bouncycastle.util.Strings;

public class Base64 {
  private static final Encoder encoder = new Base64Encoder();
  
  public static String toBase64String(byte[] paramArrayOfByte) { return toBase64String(paramArrayOfByte, 0, paramArrayOfByte.length); }
  
  public static String toBase64String(byte[] paramArrayOfByte, int paramInt1, int paramInt2) {
    byte[] arrayOfByte = encode(paramArrayOfByte, paramInt1, paramInt2);
    return Strings.fromByteArray(arrayOfByte);
  }
  
  public static byte[] encode(byte[] paramArrayOfByte) { return encode(paramArrayOfByte, 0, paramArrayOfByte.length); }
  
  public static byte[] encode(byte[] paramArrayOfByte, int paramInt1, int paramInt2) {
    int i = encoder.getEncodedLength(paramInt2);
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(i);
    try {
      encoder.encode(paramArrayOfByte, paramInt1, paramInt2, byteArrayOutputStream);
    } catch (Exception exception) {
      throw new EncoderException("exception encoding base64 string: " + exception.getMessage(), exception);
    } 
    return byteArrayOutputStream.toByteArray();
  }
  
  public static int encode(byte[] paramArrayOfByte, OutputStream paramOutputStream) throws IOException { return encoder.encode(paramArrayOfByte, 0, paramArrayOfByte.length, paramOutputStream); }
  
  public static int encode(byte[] paramArrayOfByte, int paramInt1, int paramInt2, OutputStream paramOutputStream) throws IOException { return encoder.encode(paramArrayOfByte, paramInt1, paramInt2, paramOutputStream); }
  
  public static byte[] decode(byte[] paramArrayOfByte) {
    int i = paramArrayOfByte.length / 4 * 3;
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(i);
    try {
      encoder.decode(paramArrayOfByte, 0, paramArrayOfByte.length, byteArrayOutputStream);
    } catch (Exception exception) {
      throw new DecoderException("unable to decode base64 data: " + exception.getMessage(), exception);
    } 
    return byteArrayOutputStream.toByteArray();
  }
  
  public static byte[] decode(String paramString) {
    int i = paramString.length() / 4 * 3;
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(i);
    try {
      encoder.decode(paramString, byteArrayOutputStream);
    } catch (Exception exception) {
      throw new DecoderException("unable to decode base64 string: " + exception.getMessage(), exception);
    } 
    return byteArrayOutputStream.toByteArray();
  }
  
  public static int decode(String paramString, OutputStream paramOutputStream) throws IOException { return encoder.decode(paramString, paramOutputStream); }
  
  public static int decode(byte[] paramArrayOfByte, int paramInt1, int paramInt2, OutputStream paramOutputStream) throws IOException {
    try {
      return encoder.decode(paramArrayOfByte, paramInt1, paramInt2, paramOutputStream);
    } catch (Exception exception) {
      throw new DecoderException("unable to decode base64 data: " + exception.getMessage(), exception);
    } 
  }
}
