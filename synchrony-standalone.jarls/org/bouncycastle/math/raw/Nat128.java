package org.bouncycastle.math.raw;

import java.math.BigInteger;
import org.bouncycastle.util.Pack;

public abstract class Nat128 {
  private static final long M = 4294967295L;
  
  public static int add(int[] paramArrayOfInt1, int[] paramArrayOfInt2, int[] paramArrayOfInt3) {
    long l = 0L;
    l += (paramArrayOfInt1[0] & 0xFFFFFFFFL) + (paramArrayOfInt2[0] & 0xFFFFFFFFL);
    paramArrayOfInt3[0] = (int)l;
    l >>>= 32;
    l += (paramArrayOfInt1[1] & 0xFFFFFFFFL) + (paramArrayOfInt2[1] & 0xFFFFFFFFL);
    paramArrayOfInt3[1] = (int)l;
    l >>>= 32;
    l += (paramArrayOfInt1[2] & 0xFFFFFFFFL) + (paramArrayOfInt2[2] & 0xFFFFFFFFL);
    paramArrayOfInt3[2] = (int)l;
    l >>>= 32;
    l += (paramArrayOfInt1[3] & 0xFFFFFFFFL) + (paramArrayOfInt2[3] & 0xFFFFFFFFL);
    paramArrayOfInt3[3] = (int)l;
    l >>>= 32;
    return (int)l;
  }
  
  public static int addBothTo(int[] paramArrayOfInt1, int[] paramArrayOfInt2, int[] paramArrayOfInt3) {
    long l = 0L;
    l += (paramArrayOfInt1[0] & 0xFFFFFFFFL) + (paramArrayOfInt2[0] & 0xFFFFFFFFL) + (paramArrayOfInt3[0] & 0xFFFFFFFFL);
    paramArrayOfInt3[0] = (int)l;
    l >>>= 32;
    l += (paramArrayOfInt1[1] & 0xFFFFFFFFL) + (paramArrayOfInt2[1] & 0xFFFFFFFFL) + (paramArrayOfInt3[1] & 0xFFFFFFFFL);
    paramArrayOfInt3[1] = (int)l;
    l >>>= 32;
    l += (paramArrayOfInt1[2] & 0xFFFFFFFFL) + (paramArrayOfInt2[2] & 0xFFFFFFFFL) + (paramArrayOfInt3[2] & 0xFFFFFFFFL);
    paramArrayOfInt3[2] = (int)l;
    l >>>= 32;
    l += (paramArrayOfInt1[3] & 0xFFFFFFFFL) + (paramArrayOfInt2[3] & 0xFFFFFFFFL) + (paramArrayOfInt3[3] & 0xFFFFFFFFL);
    paramArrayOfInt3[3] = (int)l;
    l >>>= 32;
    return (int)l;
  }
  
  public static int addTo(int[] paramArrayOfInt1, int[] paramArrayOfInt2) {
    long l = 0L;
    l += (paramArrayOfInt1[0] & 0xFFFFFFFFL) + (paramArrayOfInt2[0] & 0xFFFFFFFFL);
    paramArrayOfInt2[0] = (int)l;
    l >>>= 32;
    l += (paramArrayOfInt1[1] & 0xFFFFFFFFL) + (paramArrayOfInt2[1] & 0xFFFFFFFFL);
    paramArrayOfInt2[1] = (int)l;
    l >>>= 32;
    l += (paramArrayOfInt1[2] & 0xFFFFFFFFL) + (paramArrayOfInt2[2] & 0xFFFFFFFFL);
    paramArrayOfInt2[2] = (int)l;
    l >>>= 32;
    l += (paramArrayOfInt1[3] & 0xFFFFFFFFL) + (paramArrayOfInt2[3] & 0xFFFFFFFFL);
    paramArrayOfInt2[3] = (int)l;
    l >>>= 32;
    return (int)l;
  }
  
  public static int addTo(int[] paramArrayOfInt1, int paramInt1, int[] paramArrayOfInt2, int paramInt2, int paramInt3) {
    long l = paramInt3 & 0xFFFFFFFFL;
    l += (paramArrayOfInt1[paramInt1 + 0] & 0xFFFFFFFFL) + (paramArrayOfInt2[paramInt2 + 0] & 0xFFFFFFFFL);
    paramArrayOfInt2[paramInt2 + 0] = (int)l;
    l >>>= 32;
    l += (paramArrayOfInt1[paramInt1 + 1] & 0xFFFFFFFFL) + (paramArrayOfInt2[paramInt2 + 1] & 0xFFFFFFFFL);
    paramArrayOfInt2[paramInt2 + 1] = (int)l;
    l >>>= 32;
    l += (paramArrayOfInt1[paramInt1 + 2] & 0xFFFFFFFFL) + (paramArrayOfInt2[paramInt2 + 2] & 0xFFFFFFFFL);
    paramArrayOfInt2[paramInt2 + 2] = (int)l;
    l >>>= 32;
    l += (paramArrayOfInt1[paramInt1 + 3] & 0xFFFFFFFFL) + (paramArrayOfInt2[paramInt2 + 3] & 0xFFFFFFFFL);
    paramArrayOfInt2[paramInt2 + 3] = (int)l;
    l >>>= 32;
    return (int)l;
  }
  
  public static int addToEachOther(int[] paramArrayOfInt1, int paramInt1, int[] paramArrayOfInt2, int paramInt2) {
    long l = 0L;
    l += (paramArrayOfInt1[paramInt1 + 0] & 0xFFFFFFFFL) + (paramArrayOfInt2[paramInt2 + 0] & 0xFFFFFFFFL);
    paramArrayOfInt1[paramInt1 + 0] = (int)l;
    paramArrayOfInt2[paramInt2 + 0] = (int)l;
    l >>>= 32;
    l += (paramArrayOfInt1[paramInt1 + 1] & 0xFFFFFFFFL) + (paramArrayOfInt2[paramInt2 + 1] & 0xFFFFFFFFL);
    paramArrayOfInt1[paramInt1 + 1] = (int)l;
    paramArrayOfInt2[paramInt2 + 1] = (int)l;
    l >>>= 32;
    l += (paramArrayOfInt1[paramInt1 + 2] & 0xFFFFFFFFL) + (paramArrayOfInt2[paramInt2 + 2] & 0xFFFFFFFFL);
    paramArrayOfInt1[paramInt1 + 2] = (int)l;
    paramArrayOfInt2[paramInt2 + 2] = (int)l;
    l >>>= 32;
    l += (paramArrayOfInt1[paramInt1 + 3] & 0xFFFFFFFFL) + (paramArrayOfInt2[paramInt2 + 3] & 0xFFFFFFFFL);
    paramArrayOfInt1[paramInt1 + 3] = (int)l;
    paramArrayOfInt2[paramInt2 + 3] = (int)l;
    l >>>= 32;
    return (int)l;
  }
  
  public static void copy(int[] paramArrayOfInt1, int[] paramArrayOfInt2) {
    paramArrayOfInt2[0] = paramArrayOfInt1[0];
    paramArrayOfInt2[1] = paramArrayOfInt1[1];
    paramArrayOfInt2[2] = paramArrayOfInt1[2];
    paramArrayOfInt2[3] = paramArrayOfInt1[3];
  }
  
  public static void copy(int[] paramArrayOfInt1, int paramInt1, int[] paramArrayOfInt2, int paramInt2) {
    paramArrayOfInt2[paramInt2 + 0] = paramArrayOfInt1[paramInt1 + 0];
    paramArrayOfInt2[paramInt2 + 1] = paramArrayOfInt1[paramInt1 + 1];
    paramArrayOfInt2[paramInt2 + 2] = paramArrayOfInt1[paramInt1 + 2];
    paramArrayOfInt2[paramInt2 + 3] = paramArrayOfInt1[paramInt1 + 3];
  }
  
  public static void copy64(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    paramArrayOfLong2[0] = paramArrayOfLong1[0];
    paramArrayOfLong2[1] = paramArrayOfLong1[1];
  }
  
  public static void copy64(long[] paramArrayOfLong1, int paramInt1, long[] paramArrayOfLong2, int paramInt2) {
    paramArrayOfLong2[paramInt2 + 0] = paramArrayOfLong1[paramInt1 + 0];
    paramArrayOfLong2[paramInt2 + 1] = paramArrayOfLong1[paramInt1 + 1];
  }
  
  public static int[] create() { return new int[4]; }
  
  public static long[] create64() { return new long[2]; }
  
  public static int[] createExt() { return new int[8]; }
  
  public static long[] createExt64() { return new long[4]; }
  
  public static boolean diff(int[] paramArrayOfInt1, int paramInt1, int[] paramArrayOfInt2, int paramInt2, int[] paramArrayOfInt3, int paramInt3) {
    boolean bool = gte(paramArrayOfInt1, paramInt1, paramArrayOfInt2, paramInt2);
    if (bool) {
      sub(paramArrayOfInt1, paramInt1, paramArrayOfInt2, paramInt2, paramArrayOfInt3, paramInt3);
    } else {
      sub(paramArrayOfInt2, paramInt2, paramArrayOfInt1, paramInt1, paramArrayOfInt3, paramInt3);
    } 
    return bool;
  }
  
  public static boolean eq(int[] paramArrayOfInt1, int[] paramArrayOfInt2) {
    for (byte b = 3; b >= 0; b--) {
      if (paramArrayOfInt1[b] != paramArrayOfInt2[b])
        return false; 
    } 
    return true;
  }
  
  public static boolean eq64(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    for (byte b = 1; b; b--) {
      if (paramArrayOfLong1[b] != paramArrayOfLong2[b])
        return false; 
    } 
    return true;
  }
  
  public static int[] fromBigInteger(BigInteger paramBigInteger) {
    if (paramBigInteger.signum() < 0 || paramBigInteger.bitLength() > 128)
      throw new IllegalArgumentException(); 
    int[] arrayOfInt = create();
    for (byte b = 0; b < 4; b++) {
      arrayOfInt[b] = paramBigInteger.intValue();
      paramBigInteger = paramBigInteger.shiftRight(32);
    } 
    return arrayOfInt;
  }
  
  public static long[] fromBigInteger64(BigInteger paramBigInteger) {
    if (paramBigInteger.signum() < 0 || paramBigInteger.bitLength() > 128)
      throw new IllegalArgumentException(); 
    long[] arrayOfLong = create64();
    for (byte b = 0; b < 2; b++) {
      arrayOfLong[b] = paramBigInteger.longValue();
      paramBigInteger = paramBigInteger.shiftRight(64);
    } 
    return arrayOfLong;
  }
  
  public static int getBit(int[] paramArrayOfInt, int paramInt) {
    if (paramInt == 0)
      return paramArrayOfInt[0] & true; 
    int i = paramInt >> 5;
    if (i < 0 || i >= 4)
      return 0; 
    int j = paramInt & 0x1F;
    return paramArrayOfInt[i] >>> j & true;
  }
  
  public static boolean gte(int[] paramArrayOfInt1, int[] paramArrayOfInt2) {
    for (byte b = 3; b >= 0; b--) {
      int i = paramArrayOfInt1[b] ^ 0x80000000;
      int j = paramArrayOfInt2[b] ^ 0x80000000;
      if (i < j)
        return false; 
      if (i > j)
        return true; 
    } 
    return true;
  }
  
  public static boolean gte(int[] paramArrayOfInt1, int paramInt1, int[] paramArrayOfInt2, int paramInt2) {
    for (int i = 3; i >= 0; i--) {
      int j = paramArrayOfInt1[paramInt1 + i] ^ 0x80000000;
      int k = paramArrayOfInt2[paramInt2 + i] ^ 0x80000000;
      if (j < k)
        return false; 
      if (j > k)
        return true; 
    } 
    return true;
  }
  
  public static boolean isOne(int[] paramArrayOfInt) {
    if (paramArrayOfInt[0] != 1)
      return false; 
    for (byte b = 1; b < 4; b++) {
      if (paramArrayOfInt[b] != 0)
        return false; 
    } 
    return true;
  }
  
  public static boolean isOne64(long[] paramArrayOfLong) {
    if (paramArrayOfLong[0] != 1L)
      return false; 
    for (byte b = 1; b < 2; b++) {
      if (paramArrayOfLong[b] != 0L)
        return false; 
    } 
    return true;
  }
  
  public static boolean isZero(int[] paramArrayOfInt) {
    for (byte b = 0; b < 4; b++) {
      if (paramArrayOfInt[b] != 0)
        return false; 
    } 
    return true;
  }
  
  public static boolean isZero64(long[] paramArrayOfLong) {
    for (byte b = 0; b < 2; b++) {
      if (paramArrayOfLong[b] != 0L)
        return false; 
    } 
    return true;
  }
  
  public static void mul(int[] paramArrayOfInt1, int[] paramArrayOfInt2, int[] paramArrayOfInt3) {
    long l1 = paramArrayOfInt2[0] & 0xFFFFFFFFL;
    long l2 = paramArrayOfInt2[1] & 0xFFFFFFFFL;
    long l3 = paramArrayOfInt2[2] & 0xFFFFFFFFL;
    long l4 = paramArrayOfInt2[3] & 0xFFFFFFFFL;
    long l5 = 0L;
    long l6 = paramArrayOfInt1[0] & 0xFFFFFFFFL;
    l5 += l6 * l1;
    paramArrayOfInt3[0] = (int)l5;
    l5 >>>= 32;
    l5 += l6 * l2;
    paramArrayOfInt3[1] = (int)l5;
    l5 >>>= 32;
    l5 += l6 * l3;
    paramArrayOfInt3[2] = (int)l5;
    l5 >>>= 32;
    l5 += l6 * l4;
    paramArrayOfInt3[3] = (int)l5;
    l5 >>>= 32;
    paramArrayOfInt3[4] = (int)l5;
    for (byte b = 1; b < 4; b++) {
      long l7 = 0L;
      long l8 = paramArrayOfInt1[b] & 0xFFFFFFFFL;
      l7 += l8 * l1 + (paramArrayOfInt3[b + false] & 0xFFFFFFFFL);
      paramArrayOfInt3[b + false] = (int)l7;
      l7 >>>= 32;
      l7 += l8 * l2 + (paramArrayOfInt3[b + true] & 0xFFFFFFFFL);
      paramArrayOfInt3[b + true] = (int)l7;
      l7 >>>= 32;
      l7 += l8 * l3 + (paramArrayOfInt3[b + 2] & 0xFFFFFFFFL);
      paramArrayOfInt3[b + 2] = (int)l7;
      l7 >>>= 32;
      l7 += l8 * l4 + (paramArrayOfInt3[b + 3] & 0xFFFFFFFFL);
      paramArrayOfInt3[b + 3] = (int)l7;
      l7 >>>= 32;
      paramArrayOfInt3[b + 4] = (int)l7;
    } 
  }
  
  public static void mul(int[] paramArrayOfInt1, int paramInt1, int[] paramArrayOfInt2, int paramInt2, int[] paramArrayOfInt3, int paramInt3) {
    long l1 = paramArrayOfInt2[paramInt2 + 0] & 0xFFFFFFFFL;
    long l2 = paramArrayOfInt2[paramInt2 + 1] & 0xFFFFFFFFL;
    long l3 = paramArrayOfInt2[paramInt2 + 2] & 0xFFFFFFFFL;
    long l4 = paramArrayOfInt2[paramInt2 + 3] & 0xFFFFFFFFL;
    long l5 = 0L;
    long l6 = paramArrayOfInt1[paramInt1 + 0] & 0xFFFFFFFFL;
    l5 += l6 * l1;
    paramArrayOfInt3[paramInt3 + 0] = (int)l5;
    l5 >>>= 32;
    l5 += l6 * l2;
    paramArrayOfInt3[paramInt3 + 1] = (int)l5;
    l5 >>>= 32;
    l5 += l6 * l3;
    paramArrayOfInt3[paramInt3 + 2] = (int)l5;
    l5 >>>= 32;
    l5 += l6 * l4;
    paramArrayOfInt3[paramInt3 + 3] = (int)l5;
    l5 >>>= 32;
    paramArrayOfInt3[paramInt3 + 4] = (int)l5;
    for (int i = 1; i < 4; i++) {
      paramInt3++;
      long l7 = 0L;
      long l8 = paramArrayOfInt1[paramInt1 + i] & 0xFFFFFFFFL;
      l7 += l8 * l1 + (paramArrayOfInt3[paramInt3 + 0] & 0xFFFFFFFFL);
      paramArrayOfInt3[paramInt3 + 0] = (int)l7;
      l7 >>>= 32;
      l7 += l8 * l2 + (paramArrayOfInt3[paramInt3 + 1] & 0xFFFFFFFFL);
      paramArrayOfInt3[paramInt3 + 1] = (int)l7;
      l7 >>>= 32;
      l7 += l8 * l3 + (paramArrayOfInt3[paramInt3 + 2] & 0xFFFFFFFFL);
      paramArrayOfInt3[paramInt3 + 2] = (int)l7;
      l7 >>>= 32;
      l7 += l8 * l4 + (paramArrayOfInt3[paramInt3 + 3] & 0xFFFFFFFFL);
      paramArrayOfInt3[paramInt3 + 3] = (int)l7;
      l7 >>>= 32;
      paramArrayOfInt3[paramInt3 + 4] = (int)l7;
    } 
  }
  
  public static int mulAddTo(int[] paramArrayOfInt1, int[] paramArrayOfInt2, int[] paramArrayOfInt3) {
    long l1 = paramArrayOfInt2[0] & 0xFFFFFFFFL;
    long l2 = paramArrayOfInt2[1] & 0xFFFFFFFFL;
    long l3 = paramArrayOfInt2[2] & 0xFFFFFFFFL;
    long l4 = paramArrayOfInt2[3] & 0xFFFFFFFFL;
    long l5 = 0L;
    for (byte b = 0; b < 4; b++) {
      long l6 = 0L;
      long l7 = paramArrayOfInt1[b] & 0xFFFFFFFFL;
      l6 += l7 * l1 + (paramArrayOfInt3[b + false] & 0xFFFFFFFFL);
      paramArrayOfInt3[b + false] = (int)l6;
      l6 >>>= 32;
      l6 += l7 * l2 + (paramArrayOfInt3[b + true] & 0xFFFFFFFFL);
      paramArrayOfInt3[b + true] = (int)l6;
      l6 >>>= 32;
      l6 += l7 * l3 + (paramArrayOfInt3[b + 2] & 0xFFFFFFFFL);
      paramArrayOfInt3[b + 2] = (int)l6;
      l6 >>>= 32;
      l6 += l7 * l4 + (paramArrayOfInt3[b + 3] & 0xFFFFFFFFL);
      paramArrayOfInt3[b + 3] = (int)l6;
      l6 >>>= 32;
      l5 += l6 + (paramArrayOfInt3[b + 4] & 0xFFFFFFFFL);
      paramArrayOfInt3[b + 4] = (int)l5;
      l5 >>>= 32;
    } 
    return (int)l5;
  }
  
  public static int mulAddTo(int[] paramArrayOfInt1, int paramInt1, int[] paramArrayOfInt2, int paramInt2, int[] paramArrayOfInt3, int paramInt3) {
    long l1 = paramArrayOfInt2[paramInt2 + 0] & 0xFFFFFFFFL;
    long l2 = paramArrayOfInt2[paramInt2 + 1] & 0xFFFFFFFFL;
    long l3 = paramArrayOfInt2[paramInt2 + 2] & 0xFFFFFFFFL;
    long l4 = paramArrayOfInt2[paramInt2 + 3] & 0xFFFFFFFFL;
    long l5 = 0L;
    for (int i = 0; i < 4; i++) {
      long l6 = 0L;
      long l7 = paramArrayOfInt1[paramInt1 + i] & 0xFFFFFFFFL;
      l6 += l7 * l1 + (paramArrayOfInt3[paramInt3 + 0] & 0xFFFFFFFFL);
      paramArrayOfInt3[paramInt3 + 0] = (int)l6;
      l6 >>>= 32;
      l6 += l7 * l2 + (paramArrayOfInt3[paramInt3 + 1] & 0xFFFFFFFFL);
      paramArrayOfInt3[paramInt3 + 1] = (int)l6;
      l6 >>>= 32;
      l6 += l7 * l3 + (paramArrayOfInt3[paramInt3 + 2] & 0xFFFFFFFFL);
      paramArrayOfInt3[paramInt3 + 2] = (int)l6;
      l6 >>>= 32;
      l6 += l7 * l4 + (paramArrayOfInt3[paramInt3 + 3] & 0xFFFFFFFFL);
      paramArrayOfInt3[paramInt3 + 3] = (int)l6;
      l6 >>>= 32;
      l5 += l6 + (paramArrayOfInt3[paramInt3 + 4] & 0xFFFFFFFFL);
      paramArrayOfInt3[paramInt3 + 4] = (int)l5;
      l5 >>>= 32;
      paramInt3++;
    } 
    return (int)l5;
  }
  
  public static long mul33Add(int paramInt1, int[] paramArrayOfInt1, int paramInt2, int[] paramArrayOfInt2, int paramInt3, int[] paramArrayOfInt3, int paramInt4) {
    null = 0L;
    long l1 = paramInt1 & 0xFFFFFFFFL;
    long l2 = paramArrayOfInt1[paramInt2 + 0] & 0xFFFFFFFFL;
    null += l1 * l2 + (paramArrayOfInt2[paramInt3 + 0] & 0xFFFFFFFFL);
    paramArrayOfInt3[paramInt4 + 0] = (int)null;
    null >>>= 32;
    long l3 = paramArrayOfInt1[paramInt2 + 1] & 0xFFFFFFFFL;
    null += l1 * l3 + l2 + (paramArrayOfInt2[paramInt3 + 1] & 0xFFFFFFFFL);
    paramArrayOfInt3[paramInt4 + 1] = (int)null;
    null >>>= 32;
    long l4 = paramArrayOfInt1[paramInt2 + 2] & 0xFFFFFFFFL;
    null += l1 * l4 + l3 + (paramArrayOfInt2[paramInt3 + 2] & 0xFFFFFFFFL);
    paramArrayOfInt3[paramInt4 + 2] = (int)null;
    null >>>= 32;
    long l5 = paramArrayOfInt1[paramInt2 + 3] & 0xFFFFFFFFL;
    null += l1 * l5 + l4 + (paramArrayOfInt2[paramInt3 + 3] & 0xFFFFFFFFL);
    paramArrayOfInt3[paramInt4 + 3] = (int)null;
    null >>>= 32;
    return l5;
  }
  
  public static int mulWordAddExt(int paramInt1, int[] paramArrayOfInt1, int paramInt2, int[] paramArrayOfInt2, int paramInt3) {
    long l1 = 0L;
    long l2 = paramInt1 & 0xFFFFFFFFL;
    l1 += l2 * (paramArrayOfInt1[paramInt2 + 0] & 0xFFFFFFFFL) + (paramArrayOfInt2[paramInt3 + 0] & 0xFFFFFFFFL);
    paramArrayOfInt2[paramInt3 + 0] = (int)l1;
    l1 >>>= 32;
    l1 += l2 * (paramArrayOfInt1[paramInt2 + 1] & 0xFFFFFFFFL) + (paramArrayOfInt2[paramInt3 + 1] & 0xFFFFFFFFL);
    paramArrayOfInt2[paramInt3 + 1] = (int)l1;
    l1 >>>= 32;
    l1 += l2 * (paramArrayOfInt1[paramInt2 + 2] & 0xFFFFFFFFL) + (paramArrayOfInt2[paramInt3 + 2] & 0xFFFFFFFFL);
    paramArrayOfInt2[paramInt3 + 2] = (int)l1;
    l1 >>>= 32;
    l1 += l2 * (paramArrayOfInt1[paramInt2 + 3] & 0xFFFFFFFFL) + (paramArrayOfInt2[paramInt3 + 3] & 0xFFFFFFFFL);
    paramArrayOfInt2[paramInt3 + 3] = (int)l1;
    l1 >>>= 32;
    return (int)l1;
  }
  
  public static int mul33DWordAdd(int paramInt1, long paramLong, int[] paramArrayOfInt, int paramInt2) {
    long l1 = 0L;
    long l2 = paramInt1 & 0xFFFFFFFFL;
    long l3 = paramLong & 0xFFFFFFFFL;
    l1 += l2 * l3 + (paramArrayOfInt[paramInt2 + 0] & 0xFFFFFFFFL);
    paramArrayOfInt[paramInt2 + 0] = (int)l1;
    l1 >>>= 32;
    long l4 = paramLong >>> 32;
    l1 += l2 * l4 + l3 + (paramArrayOfInt[paramInt2 + 1] & 0xFFFFFFFFL);
    paramArrayOfInt[paramInt2 + 1] = (int)l1;
    l1 >>>= 32;
    l1 += l4 + (paramArrayOfInt[paramInt2 + 2] & 0xFFFFFFFFL);
    paramArrayOfInt[paramInt2 + 2] = (int)l1;
    l1 >>>= 32;
    l1 += (paramArrayOfInt[paramInt2 + 3] & 0xFFFFFFFFL);
    paramArrayOfInt[paramInt2 + 3] = (int)l1;
    l1 >>>= 32;
    return (int)l1;
  }
  
  public static int mul33WordAdd(int paramInt1, int paramInt2, int[] paramArrayOfInt, int paramInt3) {
    long l1 = 0L;
    long l2 = paramInt1 & 0xFFFFFFFFL;
    long l3 = paramInt2 & 0xFFFFFFFFL;
    l1 += l3 * l2 + (paramArrayOfInt[paramInt3 + 0] & 0xFFFFFFFFL);
    paramArrayOfInt[paramInt3 + 0] = (int)l1;
    l1 >>>= 32;
    l1 += l3 + (paramArrayOfInt[paramInt3 + 1] & 0xFFFFFFFFL);
    paramArrayOfInt[paramInt3 + 1] = (int)l1;
    l1 >>>= 32;
    l1 += (paramArrayOfInt[paramInt3 + 2] & 0xFFFFFFFFL);
    paramArrayOfInt[paramInt3 + 2] = (int)l1;
    l1 >>>= 32;
    return (l1 == 0L) ? 0 : Nat.incAt(4, paramArrayOfInt, paramInt3, 3);
  }
  
  public static int mulWordDwordAdd(int paramInt1, long paramLong, int[] paramArrayOfInt, int paramInt2) {
    long l1 = 0L;
    long l2 = paramInt1 & 0xFFFFFFFFL;
    l1 += l2 * (paramLong & 0xFFFFFFFFL) + (paramArrayOfInt[paramInt2 + 0] & 0xFFFFFFFFL);
    paramArrayOfInt[paramInt2 + 0] = (int)l1;
    l1 >>>= 32;
    l1 += l2 * (paramLong >>> 32) + (paramArrayOfInt[paramInt2 + 1] & 0xFFFFFFFFL);
    paramArrayOfInt[paramInt2 + 1] = (int)l1;
    l1 >>>= 32;
    l1 += (paramArrayOfInt[paramInt2 + 2] & 0xFFFFFFFFL);
    paramArrayOfInt[paramInt2 + 2] = (int)l1;
    l1 >>>= 32;
    return (l1 == 0L) ? 0 : Nat.incAt(4, paramArrayOfInt, paramInt2, 3);
  }
  
  public static int mulWordsAdd(int paramInt1, int paramInt2, int[] paramArrayOfInt, int paramInt3) {
    long l1 = 0L;
    long l2 = paramInt1 & 0xFFFFFFFFL;
    long l3 = paramInt2 & 0xFFFFFFFFL;
    l1 += l3 * l2 + (paramArrayOfInt[paramInt3 + 0] & 0xFFFFFFFFL);
    paramArrayOfInt[paramInt3 + 0] = (int)l1;
    l1 >>>= 32;
    l1 += (paramArrayOfInt[paramInt3 + 1] & 0xFFFFFFFFL);
    paramArrayOfInt[paramInt3 + 1] = (int)l1;
    l1 >>>= 32;
    return (l1 == 0L) ? 0 : Nat.incAt(4, paramArrayOfInt, paramInt3, 2);
  }
  
  public static int mulWord(int paramInt1, int[] paramArrayOfInt1, int[] paramArrayOfInt2, int paramInt2) {
    long l1 = 0L;
    long l2 = paramInt1 & 0xFFFFFFFFL;
    int i = 0;
    do {
      l1 += l2 * (paramArrayOfInt1[i] & 0xFFFFFFFFL);
      paramArrayOfInt2[paramInt2 + i] = (int)l1;
      l1 >>>= 32;
    } while (++i < 4);
    return (int)l1;
  }
  
  public static void square(int[] paramArrayOfInt1, int[] paramArrayOfInt2) {
    long l1 = paramArrayOfInt1[0] & 0xFFFFFFFFL;
    int i = 0;
    byte b1 = 3;
    byte b2 = 8;
    do {
      long l11 = paramArrayOfInt1[b1--] & 0xFFFFFFFFL;
      long l12 = l11 * l11;
      paramArrayOfInt2[--b2] = i << 31 | (int)(l12 >>> 33);
      paramArrayOfInt2[--b2] = (int)(l12 >>> true);
      i = (int)l12;
    } while (b1 > 0);
    long l4 = l1 * l1;
    long l2 = (i << 31) & 0xFFFFFFFFL | l4 >>> 33;
    paramArrayOfInt2[0] = (int)l4;
    i = (int)(l4 >>> 32) & true;
    long l3 = paramArrayOfInt1[1] & 0xFFFFFFFFL;
    l4 = paramArrayOfInt2[2] & 0xFFFFFFFFL;
    l2 += l3 * l1;
    int j = (int)l2;
    paramArrayOfInt2[1] = j << 1 | i;
    i = j >>> 31;
    l4 += (l2 >>> 32);
    long l5 = paramArrayOfInt1[2] & 0xFFFFFFFFL;
    long l6 = paramArrayOfInt2[3] & 0xFFFFFFFFL;
    long l7 = paramArrayOfInt2[4] & 0xFFFFFFFFL;
    l4 += l5 * l1;
    j = (int)l4;
    paramArrayOfInt2[2] = j << 1 | i;
    i = j >>> 31;
    l6 += (l4 >>> 32) + l5 * l3;
    l7 += (l6 >>> 32);
    l6 &= 0xFFFFFFFFL;
    long l8 = paramArrayOfInt1[3] & 0xFFFFFFFFL;
    long l9 = (paramArrayOfInt2[5] & 0xFFFFFFFFL) + (l7 >>> 32);
    l7 &= 0xFFFFFFFFL;
    long l10 = (paramArrayOfInt2[6] & 0xFFFFFFFFL) + (l9 >>> 32);
    l9 &= 0xFFFFFFFFL;
    l6 += l8 * l1;
    j = (int)l6;
    paramArrayOfInt2[3] = j << 1 | i;
    i = j >>> 31;
    l7 += (l6 >>> 32) + l8 * l3;
    l9 += (l7 >>> 32) + l8 * l5;
    l10 += (l9 >>> 32);
    l9 &= 0xFFFFFFFFL;
    j = (int)l7;
    paramArrayOfInt2[4] = j << 1 | i;
    i = j >>> 31;
    j = (int)l9;
    paramArrayOfInt2[5] = j << 1 | i;
    i = j >>> 31;
    j = (int)l10;
    paramArrayOfInt2[6] = j << 1 | i;
    i = j >>> 31;
    j = paramArrayOfInt2[7] + (int)(l10 >>> 32);
    paramArrayOfInt2[7] = j << 1 | i;
  }
  
  public static void square(int[] paramArrayOfInt1, int paramInt1, int[] paramArrayOfInt2, int paramInt2) {
    long l1 = paramArrayOfInt1[paramInt1 + 0] & 0xFFFFFFFFL;
    int i = 0;
    byte b1 = 3;
    byte b2 = 8;
    do {
      long l11 = paramArrayOfInt1[paramInt1 + b1--] & 0xFFFFFFFFL;
      long l12 = l11 * l11;
      paramArrayOfInt2[paramInt2 + --b2] = i << 31 | (int)(l12 >>> 33);
      paramArrayOfInt2[paramInt2 + --b2] = (int)(l12 >>> true);
      i = (int)l12;
    } while (b1 > 0);
    long l4 = l1 * l1;
    long l2 = (i << 31) & 0xFFFFFFFFL | l4 >>> 33;
    paramArrayOfInt2[paramInt2 + 0] = (int)l4;
    i = (int)(l4 >>> 32) & true;
    long l3 = paramArrayOfInt1[paramInt1 + 1] & 0xFFFFFFFFL;
    l4 = paramArrayOfInt2[paramInt2 + 2] & 0xFFFFFFFFL;
    l2 += l3 * l1;
    int j = (int)l2;
    paramArrayOfInt2[paramInt2 + 1] = j << 1 | i;
    i = j >>> 31;
    l4 += (l2 >>> 32);
    long l5 = paramArrayOfInt1[paramInt1 + 2] & 0xFFFFFFFFL;
    long l6 = paramArrayOfInt2[paramInt2 + 3] & 0xFFFFFFFFL;
    long l7 = paramArrayOfInt2[paramInt2 + 4] & 0xFFFFFFFFL;
    l4 += l5 * l1;
    j = (int)l4;
    paramArrayOfInt2[paramInt2 + 2] = j << 1 | i;
    i = j >>> 31;
    l6 += (l4 >>> 32) + l5 * l3;
    l7 += (l6 >>> 32);
    l6 &= 0xFFFFFFFFL;
    long l8 = paramArrayOfInt1[paramInt1 + 3] & 0xFFFFFFFFL;
    long l9 = (paramArrayOfInt2[paramInt2 + 5] & 0xFFFFFFFFL) + (l7 >>> 32);
    l7 &= 0xFFFFFFFFL;
    long l10 = (paramArrayOfInt2[paramInt2 + 6] & 0xFFFFFFFFL) + (l9 >>> 32);
    l9 &= 0xFFFFFFFFL;
    l6 += l8 * l1;
    j = (int)l6;
    paramArrayOfInt2[paramInt2 + 3] = j << 1 | i;
    i = j >>> 31;
    l7 += (l6 >>> 32) + l8 * l3;
    l9 += (l7 >>> 32) + l8 * l5;
    l10 += (l9 >>> 32);
    j = (int)l7;
    paramArrayOfInt2[paramInt2 + 4] = j << 1 | i;
    i = j >>> 31;
    j = (int)l9;
    paramArrayOfInt2[paramInt2 + 5] = j << 1 | i;
    i = j >>> 31;
    j = (int)l10;
    paramArrayOfInt2[paramInt2 + 6] = j << 1 | i;
    i = j >>> 31;
    j = paramArrayOfInt2[paramInt2 + 7] + (int)(l10 >>> 32);
    paramArrayOfInt2[paramInt2 + 7] = j << 1 | i;
  }
  
  public static int sub(int[] paramArrayOfInt1, int[] paramArrayOfInt2, int[] paramArrayOfInt3) {
    long l = 0L;
    l += (paramArrayOfInt1[0] & 0xFFFFFFFFL) - (paramArrayOfInt2[0] & 0xFFFFFFFFL);
    paramArrayOfInt3[0] = (int)l;
    l >>= 32;
    l += (paramArrayOfInt1[1] & 0xFFFFFFFFL) - (paramArrayOfInt2[1] & 0xFFFFFFFFL);
    paramArrayOfInt3[1] = (int)l;
    l >>= 32;
    l += (paramArrayOfInt1[2] & 0xFFFFFFFFL) - (paramArrayOfInt2[2] & 0xFFFFFFFFL);
    paramArrayOfInt3[2] = (int)l;
    l >>= 32;
    l += (paramArrayOfInt1[3] & 0xFFFFFFFFL) - (paramArrayOfInt2[3] & 0xFFFFFFFFL);
    paramArrayOfInt3[3] = (int)l;
    l >>= 32;
    return (int)l;
  }
  
  public static int sub(int[] paramArrayOfInt1, int paramInt1, int[] paramArrayOfInt2, int paramInt2, int[] paramArrayOfInt3, int paramInt3) {
    long l = 0L;
    l += (paramArrayOfInt1[paramInt1 + 0] & 0xFFFFFFFFL) - (paramArrayOfInt2[paramInt2 + 0] & 0xFFFFFFFFL);
    paramArrayOfInt3[paramInt3 + 0] = (int)l;
    l >>= 32;
    l += (paramArrayOfInt1[paramInt1 + 1] & 0xFFFFFFFFL) - (paramArrayOfInt2[paramInt2 + 1] & 0xFFFFFFFFL);
    paramArrayOfInt3[paramInt3 + 1] = (int)l;
    l >>= 32;
    l += (paramArrayOfInt1[paramInt1 + 2] & 0xFFFFFFFFL) - (paramArrayOfInt2[paramInt2 + 2] & 0xFFFFFFFFL);
    paramArrayOfInt3[paramInt3 + 2] = (int)l;
    l >>= 32;
    l += (paramArrayOfInt1[paramInt1 + 3] & 0xFFFFFFFFL) - (paramArrayOfInt2[paramInt2 + 3] & 0xFFFFFFFFL);
    paramArrayOfInt3[paramInt3 + 3] = (int)l;
    l >>= 32;
    return (int)l;
  }
  
  public static int subBothFrom(int[] paramArrayOfInt1, int[] paramArrayOfInt2, int[] paramArrayOfInt3) {
    long l = 0L;
    l += (paramArrayOfInt3[0] & 0xFFFFFFFFL) - (paramArrayOfInt1[0] & 0xFFFFFFFFL) - (paramArrayOfInt2[0] & 0xFFFFFFFFL);
    paramArrayOfInt3[0] = (int)l;
    l >>= 32;
    l += (paramArrayOfInt3[1] & 0xFFFFFFFFL) - (paramArrayOfInt1[1] & 0xFFFFFFFFL) - (paramArrayOfInt2[1] & 0xFFFFFFFFL);
    paramArrayOfInt3[1] = (int)l;
    l >>= 32;
    l += (paramArrayOfInt3[2] & 0xFFFFFFFFL) - (paramArrayOfInt1[2] & 0xFFFFFFFFL) - (paramArrayOfInt2[2] & 0xFFFFFFFFL);
    paramArrayOfInt3[2] = (int)l;
    l >>= 32;
    l += (paramArrayOfInt3[3] & 0xFFFFFFFFL) - (paramArrayOfInt1[3] & 0xFFFFFFFFL) - (paramArrayOfInt2[3] & 0xFFFFFFFFL);
    paramArrayOfInt3[3] = (int)l;
    l >>= 32;
    return (int)l;
  }
  
  public static int subFrom(int[] paramArrayOfInt1, int[] paramArrayOfInt2) {
    long l = 0L;
    l += (paramArrayOfInt2[0] & 0xFFFFFFFFL) - (paramArrayOfInt1[0] & 0xFFFFFFFFL);
    paramArrayOfInt2[0] = (int)l;
    l >>= 32;
    l += (paramArrayOfInt2[1] & 0xFFFFFFFFL) - (paramArrayOfInt1[1] & 0xFFFFFFFFL);
    paramArrayOfInt2[1] = (int)l;
    l >>= 32;
    l += (paramArrayOfInt2[2] & 0xFFFFFFFFL) - (paramArrayOfInt1[2] & 0xFFFFFFFFL);
    paramArrayOfInt2[2] = (int)l;
    l >>= 32;
    l += (paramArrayOfInt2[3] & 0xFFFFFFFFL) - (paramArrayOfInt1[3] & 0xFFFFFFFFL);
    paramArrayOfInt2[3] = (int)l;
    l >>= 32;
    return (int)l;
  }
  
  public static int subFrom(int[] paramArrayOfInt1, int paramInt1, int[] paramArrayOfInt2, int paramInt2) {
    long l = 0L;
    l += (paramArrayOfInt2[paramInt2 + 0] & 0xFFFFFFFFL) - (paramArrayOfInt1[paramInt1 + 0] & 0xFFFFFFFFL);
    paramArrayOfInt2[paramInt2 + 0] = (int)l;
    l >>= 32;
    l += (paramArrayOfInt2[paramInt2 + 1] & 0xFFFFFFFFL) - (paramArrayOfInt1[paramInt1 + 1] & 0xFFFFFFFFL);
    paramArrayOfInt2[paramInt2 + 1] = (int)l;
    l >>= 32;
    l += (paramArrayOfInt2[paramInt2 + 2] & 0xFFFFFFFFL) - (paramArrayOfInt1[paramInt1 + 2] & 0xFFFFFFFFL);
    paramArrayOfInt2[paramInt2 + 2] = (int)l;
    l >>= 32;
    l += (paramArrayOfInt2[paramInt2 + 3] & 0xFFFFFFFFL) - (paramArrayOfInt1[paramInt1 + 3] & 0xFFFFFFFFL);
    paramArrayOfInt2[paramInt2 + 3] = (int)l;
    l >>= 32;
    return (int)l;
  }
  
  public static BigInteger toBigInteger(int[] paramArrayOfInt) {
    byte[] arrayOfByte = new byte[16];
    for (byte b = 0; b < 4; b++) {
      int i = paramArrayOfInt[b];
      if (i != 0)
        Pack.intToBigEndian(i, arrayOfByte, 3 - b << 2); 
    } 
    return new BigInteger(1, arrayOfByte);
  }
  
  public static BigInteger toBigInteger64(long[] paramArrayOfLong) {
    byte[] arrayOfByte = new byte[16];
    for (byte b = 0; b < 2; b++) {
      long l = paramArrayOfLong[b];
      if (l != 0L)
        Pack.longToBigEndian(l, arrayOfByte, true - b << 3); 
    } 
    return new BigInteger(1, arrayOfByte);
  }
  
  public static void zero(int[] paramArrayOfInt) {
    paramArrayOfInt[0] = 0;
    paramArrayOfInt[1] = 0;
    paramArrayOfInt[2] = 0;
    paramArrayOfInt[3] = 0;
  }
}
