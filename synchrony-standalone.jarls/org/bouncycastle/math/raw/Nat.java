package org.bouncycastle.math.raw;

import java.math.BigInteger;
import org.bouncycastle.util.Pack;

public abstract class Nat {
  private static final long M = 4294967295L;
  
  public static int add(int paramInt, int[] paramArrayOfInt1, int[] paramArrayOfInt2, int[] paramArrayOfInt3) {
    long l = 0L;
    for (byte b = 0; b < paramInt; b++) {
      l += (paramArrayOfInt1[b] & 0xFFFFFFFFL) + (paramArrayOfInt2[b] & 0xFFFFFFFFL);
      paramArrayOfInt3[b] = (int)l;
      l >>>= 32;
    } 
    return (int)l;
  }
  
  public static int add33At(int paramInt1, int paramInt2, int[] paramArrayOfInt, int paramInt3) {
    long l = (paramArrayOfInt[paramInt3 + 0] & 0xFFFFFFFFL) + (paramInt2 & 0xFFFFFFFFL);
    paramArrayOfInt[paramInt3 + 0] = (int)l;
    l >>>= 32;
    l += (paramArrayOfInt[paramInt3 + 1] & 0xFFFFFFFFL) + 1L;
    paramArrayOfInt[paramInt3 + 1] = (int)l;
    l >>>= 32;
    return (l == 0L) ? 0 : incAt(paramInt1, paramArrayOfInt, paramInt3 + 2);
  }
  
  public static int add33At(int paramInt1, int paramInt2, int[] paramArrayOfInt, int paramInt3, int paramInt4) {
    long l = (paramArrayOfInt[paramInt3 + paramInt4] & 0xFFFFFFFFL) + (paramInt2 & 0xFFFFFFFFL);
    paramArrayOfInt[paramInt3 + paramInt4] = (int)l;
    l >>>= 32;
    l += (paramArrayOfInt[paramInt3 + paramInt4 + 1] & 0xFFFFFFFFL) + 1L;
    paramArrayOfInt[paramInt3 + paramInt4 + 1] = (int)l;
    l >>>= 32;
    return (l == 0L) ? 0 : incAt(paramInt1, paramArrayOfInt, paramInt3, paramInt4 + 2);
  }
  
  public static int add33To(int paramInt1, int paramInt2, int[] paramArrayOfInt) {
    long l = (paramArrayOfInt[0] & 0xFFFFFFFFL) + (paramInt2 & 0xFFFFFFFFL);
    paramArrayOfInt[0] = (int)l;
    l >>>= 32;
    l += (paramArrayOfInt[1] & 0xFFFFFFFFL) + 1L;
    paramArrayOfInt[1] = (int)l;
    l >>>= 32;
    return (l == 0L) ? 0 : incAt(paramInt1, paramArrayOfInt, 2);
  }
  
  public static int add33To(int paramInt1, int paramInt2, int[] paramArrayOfInt, int paramInt3) {
    long l = (paramArrayOfInt[paramInt3 + 0] & 0xFFFFFFFFL) + (paramInt2 & 0xFFFFFFFFL);
    paramArrayOfInt[paramInt3 + 0] = (int)l;
    l >>>= 32;
    l += (paramArrayOfInt[paramInt3 + 1] & 0xFFFFFFFFL) + 1L;
    paramArrayOfInt[paramInt3 + 1] = (int)l;
    l >>>= 32;
    return (l == 0L) ? 0 : incAt(paramInt1, paramArrayOfInt, paramInt3, 2);
  }
  
  public static int addBothTo(int paramInt, int[] paramArrayOfInt1, int[] paramArrayOfInt2, int[] paramArrayOfInt3) {
    long l = 0L;
    for (byte b = 0; b < paramInt; b++) {
      l += (paramArrayOfInt1[b] & 0xFFFFFFFFL) + (paramArrayOfInt2[b] & 0xFFFFFFFFL) + (paramArrayOfInt3[b] & 0xFFFFFFFFL);
      paramArrayOfInt3[b] = (int)l;
      l >>>= 32;
    } 
    return (int)l;
  }
  
  public static int addBothTo(int paramInt1, int[] paramArrayOfInt1, int paramInt2, int[] paramArrayOfInt2, int paramInt3, int[] paramArrayOfInt3, int paramInt4) {
    long l = 0L;
    for (int i = 0; i < paramInt1; i++) {
      l += (paramArrayOfInt1[paramInt2 + i] & 0xFFFFFFFFL) + (paramArrayOfInt2[paramInt3 + i] & 0xFFFFFFFFL) + (paramArrayOfInt3[paramInt4 + i] & 0xFFFFFFFFL);
      paramArrayOfInt3[paramInt4 + i] = (int)l;
      l >>>= 32;
    } 
    return (int)l;
  }
  
  public static int addDWordAt(int paramInt1, long paramLong, int[] paramArrayOfInt, int paramInt2) {
    long l = (paramArrayOfInt[paramInt2 + 0] & 0xFFFFFFFFL) + (paramLong & 0xFFFFFFFFL);
    paramArrayOfInt[paramInt2 + 0] = (int)l;
    l >>>= 32;
    l += (paramArrayOfInt[paramInt2 + 1] & 0xFFFFFFFFL) + (paramLong >>> 32);
    paramArrayOfInt[paramInt2 + 1] = (int)l;
    l >>>= 32;
    return (l == 0L) ? 0 : incAt(paramInt1, paramArrayOfInt, paramInt2 + 2);
  }
  
  public static int addDWordAt(int paramInt1, long paramLong, int[] paramArrayOfInt, int paramInt2, int paramInt3) {
    long l = (paramArrayOfInt[paramInt2 + paramInt3] & 0xFFFFFFFFL) + (paramLong & 0xFFFFFFFFL);
    paramArrayOfInt[paramInt2 + paramInt3] = (int)l;
    l >>>= 32;
    l += (paramArrayOfInt[paramInt2 + paramInt3 + 1] & 0xFFFFFFFFL) + (paramLong >>> 32);
    paramArrayOfInt[paramInt2 + paramInt3 + 1] = (int)l;
    l >>>= 32;
    return (l == 0L) ? 0 : incAt(paramInt1, paramArrayOfInt, paramInt2, paramInt3 + 2);
  }
  
  public static int addDWordTo(int paramInt, long paramLong, int[] paramArrayOfInt) {
    long l = (paramArrayOfInt[0] & 0xFFFFFFFFL) + (paramLong & 0xFFFFFFFFL);
    paramArrayOfInt[0] = (int)l;
    l >>>= 32;
    l += (paramArrayOfInt[1] & 0xFFFFFFFFL) + (paramLong >>> 32);
    paramArrayOfInt[1] = (int)l;
    l >>>= 32;
    return (l == 0L) ? 0 : incAt(paramInt, paramArrayOfInt, 2);
  }
  
  public static int addDWordTo(int paramInt1, long paramLong, int[] paramArrayOfInt, int paramInt2) {
    long l = (paramArrayOfInt[paramInt2 + 0] & 0xFFFFFFFFL) + (paramLong & 0xFFFFFFFFL);
    paramArrayOfInt[paramInt2 + 0] = (int)l;
    l >>>= 32;
    l += (paramArrayOfInt[paramInt2 + 1] & 0xFFFFFFFFL) + (paramLong >>> 32);
    paramArrayOfInt[paramInt2 + 1] = (int)l;
    l >>>= 32;
    return (l == 0L) ? 0 : incAt(paramInt1, paramArrayOfInt, paramInt2, 2);
  }
  
  public static int addTo(int paramInt, int[] paramArrayOfInt1, int[] paramArrayOfInt2) {
    long l = 0L;
    for (byte b = 0; b < paramInt; b++) {
      l += (paramArrayOfInt1[b] & 0xFFFFFFFFL) + (paramArrayOfInt2[b] & 0xFFFFFFFFL);
      paramArrayOfInt2[b] = (int)l;
      l >>>= 32;
    } 
    return (int)l;
  }
  
  public static int addTo(int paramInt1, int[] paramArrayOfInt1, int paramInt2, int[] paramArrayOfInt2, int paramInt3) {
    long l = 0L;
    for (int i = 0; i < paramInt1; i++) {
      l += (paramArrayOfInt1[paramInt2 + i] & 0xFFFFFFFFL) + (paramArrayOfInt2[paramInt3 + i] & 0xFFFFFFFFL);
      paramArrayOfInt2[paramInt3 + i] = (int)l;
      l >>>= 32;
    } 
    return (int)l;
  }
  
  public static int addTo(int paramInt1, int[] paramArrayOfInt1, int paramInt2, int[] paramArrayOfInt2, int paramInt3, int paramInt4) {
    long l = paramInt4 & 0xFFFFFFFFL;
    for (int i = 0; i < paramInt1; i++) {
      l += (paramArrayOfInt1[paramInt2 + i] & 0xFFFFFFFFL) + (paramArrayOfInt2[paramInt3 + i] & 0xFFFFFFFFL);
      paramArrayOfInt2[paramInt3 + i] = (int)l;
      l >>>= 32;
    } 
    return (int)l;
  }
  
  public static int addToEachOther(int paramInt1, int[] paramArrayOfInt1, int paramInt2, int[] paramArrayOfInt2, int paramInt3) {
    long l = 0L;
    for (int i = 0; i < paramInt1; i++) {
      l += (paramArrayOfInt1[paramInt2 + i] & 0xFFFFFFFFL) + (paramArrayOfInt2[paramInt3 + i] & 0xFFFFFFFFL);
      paramArrayOfInt1[paramInt2 + i] = (int)l;
      paramArrayOfInt2[paramInt3 + i] = (int)l;
      l >>>= 32;
    } 
    return (int)l;
  }
  
  public static int addWordAt(int paramInt1, int paramInt2, int[] paramArrayOfInt, int paramInt3) {
    long l = (paramInt2 & 0xFFFFFFFFL) + (paramArrayOfInt[paramInt3] & 0xFFFFFFFFL);
    paramArrayOfInt[paramInt3] = (int)l;
    l >>>= 32;
    return (l == 0L) ? 0 : incAt(paramInt1, paramArrayOfInt, paramInt3 + 1);
  }
  
  public static int addWordAt(int paramInt1, int paramInt2, int[] paramArrayOfInt, int paramInt3, int paramInt4) {
    long l = (paramInt2 & 0xFFFFFFFFL) + (paramArrayOfInt[paramInt3 + paramInt4] & 0xFFFFFFFFL);
    paramArrayOfInt[paramInt3 + paramInt4] = (int)l;
    l >>>= 32;
    return (l == 0L) ? 0 : incAt(paramInt1, paramArrayOfInt, paramInt3, paramInt4 + 1);
  }
  
  public static int addWordTo(int paramInt1, int paramInt2, int[] paramArrayOfInt) {
    long l = (paramInt2 & 0xFFFFFFFFL) + (paramArrayOfInt[0] & 0xFFFFFFFFL);
    paramArrayOfInt[0] = (int)l;
    l >>>= 32;
    return (l == 0L) ? 0 : incAt(paramInt1, paramArrayOfInt, 1);
  }
  
  public static int addWordTo(int paramInt1, int paramInt2, int[] paramArrayOfInt, int paramInt3) {
    long l = (paramInt2 & 0xFFFFFFFFL) + (paramArrayOfInt[paramInt3] & 0xFFFFFFFFL);
    paramArrayOfInt[paramInt3] = (int)l;
    l >>>= 32;
    return (l == 0L) ? 0 : incAt(paramInt1, paramArrayOfInt, paramInt3, 1);
  }
  
  public static int cadd(int paramInt1, int paramInt2, int[] paramArrayOfInt1, int[] paramArrayOfInt2, int[] paramArrayOfInt3) {
    long l1 = -(paramInt2 & true) & 0xFFFFFFFFL;
    long l2 = 0L;
    for (byte b = 0; b < paramInt1; b++) {
      l2 += (paramArrayOfInt1[b] & 0xFFFFFFFFL) + (paramArrayOfInt2[b] & l1);
      paramArrayOfInt3[b] = (int)l2;
      l2 >>>= 32;
    } 
    return (int)l2;
  }
  
  public static void cmov(int paramInt1, int paramInt2, int[] paramArrayOfInt1, int paramInt3, int[] paramArrayOfInt2, int paramInt4) {
    paramInt2 = -(paramInt2 & true);
    for (int i = 0; i < paramInt1; i++) {
      int j = paramArrayOfInt2[paramInt4 + i];
      int k = j ^ paramArrayOfInt1[paramInt3 + i];
      j ^= k & paramInt2;
      paramArrayOfInt2[paramInt4 + i] = j;
    } 
  }
  
  public static int compare(int paramInt, int[] paramArrayOfInt1, int[] paramArrayOfInt2) {
    for (int i = paramInt - 1; i >= 0; i--) {
      int j = paramArrayOfInt1[i] ^ 0x80000000;
      int k = paramArrayOfInt2[i] ^ 0x80000000;
      if (j < k)
        return -1; 
      if (j > k)
        return 1; 
    } 
    return 0;
  }
  
  public static int compare(int paramInt1, int[] paramArrayOfInt1, int paramInt2, int[] paramArrayOfInt2, int paramInt3) {
    for (int i = paramInt1 - 1; i >= 0; i--) {
      int j = paramArrayOfInt1[paramInt2 + i] ^ 0x80000000;
      int k = paramArrayOfInt2[paramInt3 + i] ^ 0x80000000;
      if (j < k)
        return -1; 
      if (j > k)
        return 1; 
    } 
    return 0;
  }
  
  public static int[] copy(int paramInt, int[] paramArrayOfInt) {
    int[] arrayOfInt = new int[paramInt];
    System.arraycopy(paramArrayOfInt, 0, arrayOfInt, 0, paramInt);
    return arrayOfInt;
  }
  
  public static void copy(int paramInt, int[] paramArrayOfInt1, int[] paramArrayOfInt2) { System.arraycopy(paramArrayOfInt1, 0, paramArrayOfInt2, 0, paramInt); }
  
  public static void copy(int paramInt1, int[] paramArrayOfInt1, int paramInt2, int[] paramArrayOfInt2, int paramInt3) { System.arraycopy(paramArrayOfInt1, paramInt2, paramArrayOfInt2, paramInt3, paramInt1); }
  
  public static long[] copy64(int paramInt, long[] paramArrayOfLong) {
    long[] arrayOfLong = new long[paramInt];
    System.arraycopy(paramArrayOfLong, 0, arrayOfLong, 0, paramInt);
    return arrayOfLong;
  }
  
  public static void copy64(int paramInt, long[] paramArrayOfLong1, long[] paramArrayOfLong2) { System.arraycopy(paramArrayOfLong1, 0, paramArrayOfLong2, 0, paramInt); }
  
  public static void copy64(int paramInt1, long[] paramArrayOfLong1, int paramInt2, long[] paramArrayOfLong2, int paramInt3) { System.arraycopy(paramArrayOfLong1, paramInt2, paramArrayOfLong2, paramInt3, paramInt1); }
  
  public static int[] create(int paramInt) { return new int[paramInt]; }
  
  public static long[] create64(int paramInt) { return new long[paramInt]; }
  
  public static int csub(int paramInt1, int paramInt2, int[] paramArrayOfInt1, int[] paramArrayOfInt2, int[] paramArrayOfInt3) {
    long l1 = -(paramInt2 & true) & 0xFFFFFFFFL;
    long l2 = 0L;
    for (byte b = 0; b < paramInt1; b++) {
      l2 += (paramArrayOfInt1[b] & 0xFFFFFFFFL) - (paramArrayOfInt2[b] & l1);
      paramArrayOfInt3[b] = (int)l2;
      l2 >>= 32;
    } 
    return (int)l2;
  }
  
  public static int csub(int paramInt1, int paramInt2, int[] paramArrayOfInt1, int paramInt3, int[] paramArrayOfInt2, int paramInt4, int[] paramArrayOfInt3, int paramInt5) {
    long l1 = -(paramInt2 & true) & 0xFFFFFFFFL;
    long l2 = 0L;
    for (int i = 0; i < paramInt1; i++) {
      l2 += (paramArrayOfInt1[paramInt3 + i] & 0xFFFFFFFFL) - (paramArrayOfInt2[paramInt4 + i] & l1);
      paramArrayOfInt3[paramInt5 + i] = (int)l2;
      l2 >>= 32;
    } 
    return (int)l2;
  }
  
  public static int dec(int paramInt, int[] paramArrayOfInt) {
    for (byte b = 0; b < paramInt; b++) {
      paramArrayOfInt[b] = paramArrayOfInt[b] - 1;
      if (paramArrayOfInt[b] - 1 != -1)
        return 0; 
    } 
    return -1;
  }
  
  public static int dec(int paramInt, int[] paramArrayOfInt1, int[] paramArrayOfInt2) {
    byte b = 0;
    while (b < paramInt) {
      int i = paramArrayOfInt1[b] - 1;
      paramArrayOfInt2[b] = i;
      b++;
      if (i != -1) {
        while (b < paramInt) {
          paramArrayOfInt2[b] = paramArrayOfInt1[b];
          b++;
        } 
        return 0;
      } 
    } 
    return -1;
  }
  
  public static int decAt(int paramInt1, int[] paramArrayOfInt, int paramInt2) {
    for (int i = paramInt2; i < paramInt1; i++) {
      paramArrayOfInt[i] = paramArrayOfInt[i] - 1;
      if (paramArrayOfInt[i] - 1 != -1)
        return 0; 
    } 
    return -1;
  }
  
  public static int decAt(int paramInt1, int[] paramArrayOfInt, int paramInt2, int paramInt3) {
    for (int i = paramInt3; i < paramInt1; i++) {
      paramArrayOfInt[paramInt2 + i] = paramArrayOfInt[paramInt2 + i] - 1;
      if (paramArrayOfInt[paramInt2 + i] - 1 != -1)
        return 0; 
    } 
    return -1;
  }
  
  public static boolean diff(int paramInt1, int[] paramArrayOfInt1, int paramInt2, int[] paramArrayOfInt2, int paramInt3, int[] paramArrayOfInt3, int paramInt4) {
    boolean bool = gte(paramInt1, paramArrayOfInt1, paramInt2, paramArrayOfInt2, paramInt3);
    if (bool) {
      sub(paramInt1, paramArrayOfInt1, paramInt2, paramArrayOfInt2, paramInt3, paramArrayOfInt3, paramInt4);
    } else {
      sub(paramInt1, paramArrayOfInt2, paramInt3, paramArrayOfInt1, paramInt2, paramArrayOfInt3, paramInt4);
    } 
    return bool;
  }
  
  public static boolean eq(int paramInt, int[] paramArrayOfInt1, int[] paramArrayOfInt2) {
    for (int i = paramInt - 1; i >= 0; i--) {
      if (paramArrayOfInt1[i] != paramArrayOfInt2[i])
        return false; 
    } 
    return true;
  }
  
  public static int equalTo(int paramInt1, int[] paramArrayOfInt, int paramInt2) {
    int i = paramArrayOfInt[0] ^ paramInt2;
    for (byte b = 1; b < paramInt1; b++)
      i |= paramArrayOfInt[b]; 
    i = i >>> 1 | i & true;
    return i - 1 >> 31;
  }
  
  public static int equalTo(int paramInt1, int[] paramArrayOfInt, int paramInt2, int paramInt3) {
    int i = paramArrayOfInt[paramInt2] ^ paramInt3;
    for (int j = 1; j < paramInt1; j++)
      i |= paramArrayOfInt[paramInt2 + j]; 
    i = i >>> 1 | i & true;
    return i - 1 >> 31;
  }
  
  public static int equalTo(int paramInt, int[] paramArrayOfInt1, int[] paramArrayOfInt2) {
    int i = 0;
    for (byte b = 0; b < paramInt; b++)
      i |= paramArrayOfInt1[b] ^ paramArrayOfInt2[b]; 
    i = i >>> 1 | i & true;
    return i - 1 >> 31;
  }
  
  public static int equalTo(int paramInt1, int[] paramArrayOfInt1, int paramInt2, int[] paramArrayOfInt2, int paramInt3) {
    int i = 0;
    for (int j = 0; j < paramInt1; j++)
      i |= paramArrayOfInt1[paramInt2 + j] ^ paramArrayOfInt2[paramInt3 + j]; 
    i = i >>> 1 | i & true;
    return i - 1 >> 31;
  }
  
  public static int equalToZero(int paramInt, int[] paramArrayOfInt) {
    int i = 0;
    for (byte b = 0; b < paramInt; b++)
      i |= paramArrayOfInt[b]; 
    i = i >>> 1 | i & true;
    return i - 1 >> 31;
  }
  
  public static int equalToZero(int paramInt1, int[] paramArrayOfInt, int paramInt2) {
    int i = 0;
    for (int j = 0; j < paramInt1; j++)
      i |= paramArrayOfInt[paramInt2 + j]; 
    i = i >>> 1 | i & true;
    return i - 1 >> 31;
  }
  
  public static int[] fromBigInteger(int paramInt, BigInteger paramBigInteger) {
    if (paramBigInteger.signum() < 0 || paramBigInteger.bitLength() > paramInt)
      throw new IllegalArgumentException(); 
    int i = paramInt + 31 >> 5;
    int[] arrayOfInt = create(i);
    for (byte b = 0; b < i; b++) {
      arrayOfInt[b] = paramBigInteger.intValue();
      paramBigInteger = paramBigInteger.shiftRight(32);
    } 
    return arrayOfInt;
  }
  
  public static long[] fromBigInteger64(int paramInt, BigInteger paramBigInteger) {
    if (paramBigInteger.signum() < 0 || paramBigInteger.bitLength() > paramInt)
      throw new IllegalArgumentException(); 
    int i = paramInt + 63 >> 6;
    long[] arrayOfLong = create64(i);
    for (byte b = 0; b < i; b++) {
      arrayOfLong[b] = paramBigInteger.longValue();
      paramBigInteger = paramBigInteger.shiftRight(64);
    } 
    return arrayOfLong;
  }
  
  public static int getBit(int[] paramArrayOfInt, int paramInt) {
    if (paramInt == 0)
      return paramArrayOfInt[0] & true; 
    int i = paramInt >> 5;
    if (i < 0 || i >= paramArrayOfInt.length)
      return 0; 
    int j = paramInt & 0x1F;
    return paramArrayOfInt[i] >>> j & true;
  }
  
  public static boolean gte(int paramInt, int[] paramArrayOfInt1, int[] paramArrayOfInt2) {
    for (int i = paramInt - 1; i >= 0; i--) {
      int j = paramArrayOfInt1[i] ^ 0x80000000;
      int k = paramArrayOfInt2[i] ^ 0x80000000;
      if (j < k)
        return false; 
      if (j > k)
        return true; 
    } 
    return true;
  }
  
  public static boolean gte(int paramInt1, int[] paramArrayOfInt1, int paramInt2, int[] paramArrayOfInt2, int paramInt3) {
    for (int i = paramInt1 - 1; i >= 0; i--) {
      int j = paramArrayOfInt1[paramInt2 + i] ^ 0x80000000;
      int k = paramArrayOfInt2[paramInt3 + i] ^ 0x80000000;
      if (j < k)
        return false; 
      if (j > k)
        return true; 
    } 
    return true;
  }
  
  public static int inc(int paramInt, int[] paramArrayOfInt) {
    for (byte b = 0; b < paramInt; b++) {
      paramArrayOfInt[b] = paramArrayOfInt[b] + 1;
      if (paramArrayOfInt[b] + 1 != 0)
        return 0; 
    } 
    return 1;
  }
  
  public static int inc(int paramInt, int[] paramArrayOfInt1, int[] paramArrayOfInt2) {
    byte b = 0;
    while (b < paramInt) {
      int i = paramArrayOfInt1[b] + 1;
      paramArrayOfInt2[b] = i;
      b++;
      if (i != 0) {
        while (b < paramInt) {
          paramArrayOfInt2[b] = paramArrayOfInt1[b];
          b++;
        } 
        return 0;
      } 
    } 
    return 1;
  }
  
  public static int incAt(int paramInt1, int[] paramArrayOfInt, int paramInt2) {
    for (int i = paramInt2; i < paramInt1; i++) {
      paramArrayOfInt[i] = paramArrayOfInt[i] + 1;
      if (paramArrayOfInt[i] + 1 != 0)
        return 0; 
    } 
    return 1;
  }
  
  public static int incAt(int paramInt1, int[] paramArrayOfInt, int paramInt2, int paramInt3) {
    for (int i = paramInt3; i < paramInt1; i++) {
      paramArrayOfInt[paramInt2 + i] = paramArrayOfInt[paramInt2 + i] + 1;
      if (paramArrayOfInt[paramInt2 + i] + 1 != 0)
        return 0; 
    } 
    return 1;
  }
  
  public static boolean isOne(int paramInt, int[] paramArrayOfInt) {
    if (paramArrayOfInt[0] != 1)
      return false; 
    for (byte b = 1; b < paramInt; b++) {
      if (paramArrayOfInt[b] != 0)
        return false; 
    } 
    return true;
  }
  
  public static boolean isZero(int paramInt, int[] paramArrayOfInt) {
    for (byte b = 0; b < paramInt; b++) {
      if (paramArrayOfInt[b] != 0)
        return false; 
    } 
    return true;
  }
  
  public static int lessThan(int paramInt, int[] paramArrayOfInt1, int[] paramArrayOfInt2) {
    long l = 0L;
    for (byte b = 0; b < paramInt; b++) {
      l += (paramArrayOfInt1[b] & 0xFFFFFFFFL) - (paramArrayOfInt2[b] & 0xFFFFFFFFL);
      l >>= 32;
    } 
    return (int)l;
  }
  
  public static int lessThan(int paramInt1, int[] paramArrayOfInt1, int paramInt2, int[] paramArrayOfInt2, int paramInt3) {
    long l = 0L;
    for (int i = 0; i < paramInt1; i++) {
      l += (paramArrayOfInt1[paramInt2 + i] & 0xFFFFFFFFL) - (paramArrayOfInt2[paramInt3 + i] & 0xFFFFFFFFL);
      l >>= 32;
    } 
    return (int)l;
  }
  
  public static void mul(int paramInt, int[] paramArrayOfInt1, int[] paramArrayOfInt2, int[] paramArrayOfInt3) {
    paramArrayOfInt3[paramInt] = mulWord(paramInt, paramArrayOfInt1[0], paramArrayOfInt2, paramArrayOfInt3);
    for (int i = 1; i < paramInt; i++)
      paramArrayOfInt3[i + paramInt] = mulWordAddTo(paramInt, paramArrayOfInt1[i], paramArrayOfInt2, 0, paramArrayOfInt3, i); 
  }
  
  public static void mul(int paramInt1, int[] paramArrayOfInt1, int paramInt2, int[] paramArrayOfInt2, int paramInt3, int[] paramArrayOfInt3, int paramInt4) {
    paramArrayOfInt3[paramInt4 + paramInt1] = mulWord(paramInt1, paramArrayOfInt1[paramInt2], paramArrayOfInt2, paramInt3, paramArrayOfInt3, paramInt4);
    for (int i = 1; i < paramInt1; i++)
      paramArrayOfInt3[paramInt4 + i + paramInt1] = mulWordAddTo(paramInt1, paramArrayOfInt1[paramInt2 + i], paramArrayOfInt2, paramInt3, paramArrayOfInt3, paramInt4 + i); 
  }
  
  public static void mul(int[] paramArrayOfInt1, int paramInt1, int paramInt2, int[] paramArrayOfInt2, int paramInt3, int paramInt4, int[] paramArrayOfInt3, int paramInt5) {
    paramArrayOfInt3[paramInt5 + paramInt4] = mulWord(paramInt4, paramArrayOfInt1[paramInt1], paramArrayOfInt2, paramInt3, paramArrayOfInt3, paramInt5);
    for (int i = 1; i < paramInt2; i++)
      paramArrayOfInt3[paramInt5 + i + paramInt4] = mulWordAddTo(paramInt4, paramArrayOfInt1[paramInt1 + i], paramArrayOfInt2, paramInt3, paramArrayOfInt3, paramInt5 + i); 
  }
  
  public static int mulAddTo(int paramInt, int[] paramArrayOfInt1, int[] paramArrayOfInt2, int[] paramArrayOfInt3) {
    long l = 0L;
    for (int i = 0; i < paramInt; i++) {
      l += (mulWordAddTo(paramInt, paramArrayOfInt1[i], paramArrayOfInt2, 0, paramArrayOfInt3, i) & 0xFFFFFFFFL);
      l += (paramArrayOfInt3[i + paramInt] & 0xFFFFFFFFL);
      paramArrayOfInt3[i + paramInt] = (int)l;
      l >>>= 32;
    } 
    return (int)l;
  }
  
  public static int mulAddTo(int paramInt1, int[] paramArrayOfInt1, int paramInt2, int[] paramArrayOfInt2, int paramInt3, int[] paramArrayOfInt3, int paramInt4) {
    long l = 0L;
    for (int i = 0; i < paramInt1; i++) {
      l += (mulWordAddTo(paramInt1, paramArrayOfInt1[paramInt2 + i], paramArrayOfInt2, paramInt3, paramArrayOfInt3, paramInt4) & 0xFFFFFFFFL);
      l += (paramArrayOfInt3[paramInt4 + paramInt1] & 0xFFFFFFFFL);
      paramArrayOfInt3[paramInt4 + paramInt1] = (int)l;
      l >>>= 32;
      paramInt4++;
    } 
    return (int)l;
  }
  
  public static int mul31BothAdd(int paramInt1, int paramInt2, int[] paramArrayOfInt1, int paramInt3, int[] paramArrayOfInt2, int[] paramArrayOfInt3, int paramInt4) {
    long l1 = 0L;
    long l2 = paramInt2 & 0xFFFFFFFFL;
    long l3 = paramInt3 & 0xFFFFFFFFL;
    int i = 0;
    do {
      l1 += l2 * (paramArrayOfInt1[i] & 0xFFFFFFFFL) + l3 * (paramArrayOfInt2[i] & 0xFFFFFFFFL) + (paramArrayOfInt3[paramInt4 + i] & 0xFFFFFFFFL);
      paramArrayOfInt3[paramInt4 + i] = (int)l1;
      l1 >>>= 32;
    } while (++i < paramInt1);
    return (int)l1;
  }
  
  public static int mulWord(int paramInt1, int paramInt2, int[] paramArrayOfInt1, int[] paramArrayOfInt2) {
    long l1 = 0L;
    long l2 = paramInt2 & 0xFFFFFFFFL;
    byte b = 0;
    do {
      l1 += l2 * (paramArrayOfInt1[b] & 0xFFFFFFFFL);
      paramArrayOfInt2[b] = (int)l1;
      l1 >>>= 32;
    } while (++b < paramInt1);
    return (int)l1;
  }
  
  public static int mulWord(int paramInt1, int paramInt2, int[] paramArrayOfInt1, int paramInt3, int[] paramArrayOfInt2, int paramInt4) {
    long l1 = 0L;
    long l2 = paramInt2 & 0xFFFFFFFFL;
    int i = 0;
    do {
      l1 += l2 * (paramArrayOfInt1[paramInt3 + i] & 0xFFFFFFFFL);
      paramArrayOfInt2[paramInt4 + i] = (int)l1;
      l1 >>>= 32;
    } while (++i < paramInt1);
    return (int)l1;
  }
  
  public static int mulWordAddTo(int paramInt1, int paramInt2, int[] paramArrayOfInt1, int paramInt3, int[] paramArrayOfInt2, int paramInt4) {
    long l1 = 0L;
    long l2 = paramInt2 & 0xFFFFFFFFL;
    int i = 0;
    do {
      l1 += l2 * (paramArrayOfInt1[paramInt3 + i] & 0xFFFFFFFFL) + (paramArrayOfInt2[paramInt4 + i] & 0xFFFFFFFFL);
      paramArrayOfInt2[paramInt4 + i] = (int)l1;
      l1 >>>= 32;
    } while (++i < paramInt1);
    return (int)l1;
  }
  
  public static int mulWordDwordAddAt(int paramInt1, int paramInt2, long paramLong, int[] paramArrayOfInt, int paramInt3) {
    long l1 = 0L;
    long l2 = paramInt2 & 0xFFFFFFFFL;
    l1 += l2 * (paramLong & 0xFFFFFFFFL) + (paramArrayOfInt[paramInt3 + 0] & 0xFFFFFFFFL);
    paramArrayOfInt[paramInt3 + 0] = (int)l1;
    l1 >>>= 32;
    l1 += l2 * (paramLong >>> 32) + (paramArrayOfInt[paramInt3 + 1] & 0xFFFFFFFFL);
    paramArrayOfInt[paramInt3 + 1] = (int)l1;
    l1 >>>= 32;
    l1 += (paramArrayOfInt[paramInt3 + 2] & 0xFFFFFFFFL);
    paramArrayOfInt[paramInt3 + 2] = (int)l1;
    l1 >>>= 32;
    return (l1 == 0L) ? 0 : incAt(paramInt1, paramArrayOfInt, paramInt3 + 3);
  }
  
  public static int shiftDownBit(int paramInt1, int[] paramArrayOfInt, int paramInt2) {
    int i = paramInt1;
    while (--i >= 0) {
      int j = paramArrayOfInt[i];
      paramArrayOfInt[i] = j >>> 1 | paramInt2 << 31;
      paramInt2 = j;
    } 
    return paramInt2 << 31;
  }
  
  public static int shiftDownBit(int paramInt1, int[] paramArrayOfInt, int paramInt2, int paramInt3) {
    int i = paramInt1;
    while (--i >= 0) {
      int j = paramArrayOfInt[paramInt2 + i];
      paramArrayOfInt[paramInt2 + i] = j >>> 1 | paramInt3 << 31;
      paramInt3 = j;
    } 
    return paramInt3 << 31;
  }
  
  public static int shiftDownBit(int paramInt1, int[] paramArrayOfInt1, int paramInt2, int[] paramArrayOfInt2) {
    int i = paramInt1;
    while (--i >= 0) {
      int j = paramArrayOfInt1[i];
      paramArrayOfInt2[i] = j >>> 1 | paramInt2 << 31;
      paramInt2 = j;
    } 
    return paramInt2 << 31;
  }
  
  public static int shiftDownBit(int paramInt1, int[] paramArrayOfInt1, int paramInt2, int paramInt3, int[] paramArrayOfInt2, int paramInt4) {
    int i = paramInt1;
    while (--i >= 0) {
      int j = paramArrayOfInt1[paramInt2 + i];
      paramArrayOfInt2[paramInt4 + i] = j >>> 1 | paramInt3 << 31;
      paramInt3 = j;
    } 
    return paramInt3 << 31;
  }
  
  public static int shiftDownBits(int paramInt1, int[] paramArrayOfInt, int paramInt2, int paramInt3) {
    int i = paramInt1;
    while (--i >= 0) {
      int j = paramArrayOfInt[i];
      paramArrayOfInt[i] = j >>> paramInt2 | paramInt3 << -paramInt2;
      paramInt3 = j;
    } 
    return paramInt3 << -paramInt2;
  }
  
  public static int shiftDownBits(int paramInt1, int[] paramArrayOfInt, int paramInt2, int paramInt3, int paramInt4) {
    int i = paramInt1;
    while (--i >= 0) {
      int j = paramArrayOfInt[paramInt2 + i];
      paramArrayOfInt[paramInt2 + i] = j >>> paramInt3 | paramInt4 << -paramInt3;
      paramInt4 = j;
    } 
    return paramInt4 << -paramInt3;
  }
  
  public static int shiftDownBits(int paramInt1, int[] paramArrayOfInt1, int paramInt2, int paramInt3, int[] paramArrayOfInt2) {
    int i = paramInt1;
    while (--i >= 0) {
      int j = paramArrayOfInt1[i];
      paramArrayOfInt2[i] = j >>> paramInt2 | paramInt3 << -paramInt2;
      paramInt3 = j;
    } 
    return paramInt3 << -paramInt2;
  }
  
  public static int shiftDownBits(int paramInt1, int[] paramArrayOfInt1, int paramInt2, int paramInt3, int paramInt4, int[] paramArrayOfInt2, int paramInt5) {
    int i = paramInt1;
    while (--i >= 0) {
      int j = paramArrayOfInt1[paramInt2 + i];
      paramArrayOfInt2[paramInt5 + i] = j >>> paramInt3 | paramInt4 << -paramInt3;
      paramInt4 = j;
    } 
    return paramInt4 << -paramInt3;
  }
  
  public static int shiftDownWord(int paramInt1, int[] paramArrayOfInt, int paramInt2) {
    int i = paramInt1;
    while (--i >= 0) {
      int j = paramArrayOfInt[i];
      paramArrayOfInt[i] = paramInt2;
      paramInt2 = j;
    } 
    return paramInt2;
  }
  
  public static int shiftUpBit(int paramInt1, int[] paramArrayOfInt, int paramInt2) {
    for (byte b = 0; b < paramInt1; b++) {
      int i = paramArrayOfInt[b];
      paramArrayOfInt[b] = i << 1 | paramInt2 >>> 31;
      paramInt2 = i;
    } 
    return paramInt2 >>> 31;
  }
  
  public static int shiftUpBit(int paramInt1, int[] paramArrayOfInt, int paramInt2, int paramInt3) {
    for (int i = 0; i < paramInt1; i++) {
      int j = paramArrayOfInt[paramInt2 + i];
      paramArrayOfInt[paramInt2 + i] = j << 1 | paramInt3 >>> 31;
      paramInt3 = j;
    } 
    return paramInt3 >>> 31;
  }
  
  public static int shiftUpBit(int paramInt1, int[] paramArrayOfInt1, int paramInt2, int[] paramArrayOfInt2) {
    for (byte b = 0; b < paramInt1; b++) {
      int i = paramArrayOfInt1[b];
      paramArrayOfInt2[b] = i << 1 | paramInt2 >>> 31;
      paramInt2 = i;
    } 
    return paramInt2 >>> 31;
  }
  
  public static int shiftUpBit(int paramInt1, int[] paramArrayOfInt1, int paramInt2, int paramInt3, int[] paramArrayOfInt2, int paramInt4) {
    for (int i = 0; i < paramInt1; i++) {
      int j = paramArrayOfInt1[paramInt2 + i];
      paramArrayOfInt2[paramInt4 + i] = j << 1 | paramInt3 >>> 31;
      paramInt3 = j;
    } 
    return paramInt3 >>> 31;
  }
  
  public static long shiftUpBit64(int paramInt1, long[] paramArrayOfLong1, int paramInt2, long paramLong, long[] paramArrayOfLong2, int paramInt3) {
    for (int i = 0; i < paramInt1; i++) {
      long l = paramArrayOfLong1[paramInt2 + i];
      paramArrayOfLong2[paramInt3 + i] = l << true | paramLong >>> 63;
      paramLong = l;
    } 
    return paramLong >>> 63;
  }
  
  public static int shiftUpBits(int paramInt1, int[] paramArrayOfInt, int paramInt2, int paramInt3) {
    for (byte b = 0; b < paramInt1; b++) {
      int i = paramArrayOfInt[b];
      paramArrayOfInt[b] = i << paramInt2 | paramInt3 >>> -paramInt2;
      paramInt3 = i;
    } 
    return paramInt3 >>> -paramInt2;
  }
  
  public static int shiftUpBits(int paramInt1, int[] paramArrayOfInt, int paramInt2, int paramInt3, int paramInt4) {
    for (int i = 0; i < paramInt1; i++) {
      int j = paramArrayOfInt[paramInt2 + i];
      paramArrayOfInt[paramInt2 + i] = j << paramInt3 | paramInt4 >>> -paramInt3;
      paramInt4 = j;
    } 
    return paramInt4 >>> -paramInt3;
  }
  
  public static long shiftUpBits64(int paramInt1, long[] paramArrayOfLong, int paramInt2, int paramInt3, long paramLong) {
    for (int i = 0; i < paramInt1; i++) {
      long l = paramArrayOfLong[paramInt2 + i];
      paramArrayOfLong[paramInt2 + i] = l << paramInt3 | paramLong >>> -paramInt3;
      paramLong = l;
    } 
    return paramLong >>> -paramInt3;
  }
  
  public static int shiftUpBits(int paramInt1, int[] paramArrayOfInt1, int paramInt2, int paramInt3, int[] paramArrayOfInt2) {
    for (byte b = 0; b < paramInt1; b++) {
      int i = paramArrayOfInt1[b];
      paramArrayOfInt2[b] = i << paramInt2 | paramInt3 >>> -paramInt2;
      paramInt3 = i;
    } 
    return paramInt3 >>> -paramInt2;
  }
  
  public static int shiftUpBits(int paramInt1, int[] paramArrayOfInt1, int paramInt2, int paramInt3, int paramInt4, int[] paramArrayOfInt2, int paramInt5) {
    for (int i = 0; i < paramInt1; i++) {
      int j = paramArrayOfInt1[paramInt2 + i];
      paramArrayOfInt2[paramInt5 + i] = j << paramInt3 | paramInt4 >>> -paramInt3;
      paramInt4 = j;
    } 
    return paramInt4 >>> -paramInt3;
  }
  
  public static long shiftUpBits64(int paramInt1, long[] paramArrayOfLong1, int paramInt2, int paramInt3, long paramLong, long[] paramArrayOfLong2, int paramInt4) {
    for (int i = 0; i < paramInt1; i++) {
      long l = paramArrayOfLong1[paramInt2 + i];
      paramArrayOfLong2[paramInt4 + i] = l << paramInt3 | paramLong >>> -paramInt3;
      paramLong = l;
    } 
    return paramLong >>> -paramInt3;
  }
  
  public static void square(int paramInt, int[] paramArrayOfInt1, int[] paramArrayOfInt2) {
    int i = paramInt << 1;
    int j = 0;
    int k = paramInt;
    int m = i;
    do {
      long l1 = paramArrayOfInt1[--k] & 0xFFFFFFFFL;
      long l2 = l1 * l1;
      paramArrayOfInt2[--m] = j << 31 | (int)(l2 >>> 33);
      paramArrayOfInt2[--m] = (int)(l2 >>> true);
      j = (int)l2;
    } while (k > 0);
    long l = 0L;
    byte b1 = 2;
    for (byte b2 = 1; b2 < paramInt; b2++) {
      l += (squareWordAddTo(paramArrayOfInt1, b2, paramArrayOfInt2) & 0xFFFFFFFFL);
      l += (paramArrayOfInt2[b1] & 0xFFFFFFFFL);
      paramArrayOfInt2[b1++] = (int)l;
      l >>>= 32;
      l += (paramArrayOfInt2[b1] & 0xFFFFFFFFL);
      paramArrayOfInt2[b1++] = (int)l;
      l >>>= 32;
    } 
    shiftUpBit(i, paramArrayOfInt2, paramArrayOfInt1[0] << 31);
  }
  
  public static void square(int paramInt1, int[] paramArrayOfInt1, int paramInt2, int[] paramArrayOfInt2, int paramInt3) {
    int i = paramInt1 << 1;
    int j = 0;
    int k = paramInt1;
    int m = i;
    do {
      long l1 = paramArrayOfInt1[paramInt2 + --k] & 0xFFFFFFFFL;
      long l2 = l1 * l1;
      paramArrayOfInt2[paramInt3 + --m] = j << 31 | (int)(l2 >>> 33);
      paramArrayOfInt2[paramInt3 + --m] = (int)(l2 >>> true);
      j = (int)l2;
    } while (k > 0);
    long l = 0L;
    int n = paramInt3 + 2;
    for (byte b = 1; b < paramInt1; b++) {
      l += (squareWordAddTo(paramArrayOfInt1, paramInt2, b, paramArrayOfInt2, paramInt3) & 0xFFFFFFFFL);
      l += (paramArrayOfInt2[n] & 0xFFFFFFFFL);
      paramArrayOfInt2[n++] = (int)l;
      l >>>= 32;
      l += (paramArrayOfInt2[n] & 0xFFFFFFFFL);
      paramArrayOfInt2[n++] = (int)l;
      l >>>= 32;
    } 
    shiftUpBit(i, paramArrayOfInt2, paramInt3, paramArrayOfInt1[paramInt2] << 31);
  }
  
  public static int squareWordAdd(int[] paramArrayOfInt1, int paramInt, int[] paramArrayOfInt2) {
    long l1 = 0L;
    long l2 = paramArrayOfInt1[paramInt] & 0xFFFFFFFFL;
    int i = 0;
    do {
      l1 += l2 * (paramArrayOfInt1[i] & 0xFFFFFFFFL) + (paramArrayOfInt2[paramInt + i] & 0xFFFFFFFFL);
      paramArrayOfInt2[paramInt + i] = (int)l1;
      l1 >>>= 32;
    } while (++i < paramInt);
    return (int)l1;
  }
  
  public static int squareWordAdd(int[] paramArrayOfInt1, int paramInt1, int paramInt2, int[] paramArrayOfInt2, int paramInt3) {
    long l1 = 0L;
    long l2 = paramArrayOfInt1[paramInt1 + paramInt2] & 0xFFFFFFFFL;
    int i = 0;
    do {
      l1 += l2 * (paramArrayOfInt1[paramInt1 + i] & 0xFFFFFFFFL) + (paramArrayOfInt2[paramInt2 + paramInt3] & 0xFFFFFFFFL);
      paramArrayOfInt2[paramInt2 + paramInt3] = (int)l1;
      l1 >>>= 32;
      paramInt3++;
    } while (++i < paramInt2);
    return (int)l1;
  }
  
  public static int squareWordAddTo(int[] paramArrayOfInt1, int paramInt, int[] paramArrayOfInt2) {
    long l1 = 0L;
    long l2 = paramArrayOfInt1[paramInt] & 0xFFFFFFFFL;
    int i = 0;
    do {
      l1 += l2 * (paramArrayOfInt1[i] & 0xFFFFFFFFL) + (paramArrayOfInt2[paramInt + i] & 0xFFFFFFFFL);
      paramArrayOfInt2[paramInt + i] = (int)l1;
      l1 >>>= 32;
    } while (++i < paramInt);
    return (int)l1;
  }
  
  public static int squareWordAddTo(int[] paramArrayOfInt1, int paramInt1, int paramInt2, int[] paramArrayOfInt2, int paramInt3) {
    long l1 = 0L;
    long l2 = paramArrayOfInt1[paramInt1 + paramInt2] & 0xFFFFFFFFL;
    int i = 0;
    do {
      l1 += l2 * (paramArrayOfInt1[paramInt1 + i] & 0xFFFFFFFFL) + (paramArrayOfInt2[paramInt2 + paramInt3] & 0xFFFFFFFFL);
      paramArrayOfInt2[paramInt2 + paramInt3] = (int)l1;
      l1 >>>= 32;
      paramInt3++;
    } while (++i < paramInt2);
    return (int)l1;
  }
  
  public static int sub(int paramInt, int[] paramArrayOfInt1, int[] paramArrayOfInt2, int[] paramArrayOfInt3) {
    long l = 0L;
    for (byte b = 0; b < paramInt; b++) {
      l += (paramArrayOfInt1[b] & 0xFFFFFFFFL) - (paramArrayOfInt2[b] & 0xFFFFFFFFL);
      paramArrayOfInt3[b] = (int)l;
      l >>= 32;
    } 
    return (int)l;
  }
  
  public static int sub(int paramInt1, int[] paramArrayOfInt1, int paramInt2, int[] paramArrayOfInt2, int paramInt3, int[] paramArrayOfInt3, int paramInt4) {
    long l = 0L;
    for (int i = 0; i < paramInt1; i++) {
      l += (paramArrayOfInt1[paramInt2 + i] & 0xFFFFFFFFL) - (paramArrayOfInt2[paramInt3 + i] & 0xFFFFFFFFL);
      paramArrayOfInt3[paramInt4 + i] = (int)l;
      l >>= 32;
    } 
    return (int)l;
  }
  
  public static int sub33At(int paramInt1, int paramInt2, int[] paramArrayOfInt, int paramInt3) {
    long l = (paramArrayOfInt[paramInt3 + 0] & 0xFFFFFFFFL) - (paramInt2 & 0xFFFFFFFFL);
    paramArrayOfInt[paramInt3 + 0] = (int)l;
    l >>= 32;
    l += (paramArrayOfInt[paramInt3 + 1] & 0xFFFFFFFFL) - 1L;
    paramArrayOfInt[paramInt3 + 1] = (int)l;
    l >>= 32;
    return (l == 0L) ? 0 : decAt(paramInt1, paramArrayOfInt, paramInt3 + 2);
  }
  
  public static int sub33At(int paramInt1, int paramInt2, int[] paramArrayOfInt, int paramInt3, int paramInt4) {
    long l = (paramArrayOfInt[paramInt3 + paramInt4] & 0xFFFFFFFFL) - (paramInt2 & 0xFFFFFFFFL);
    paramArrayOfInt[paramInt3 + paramInt4] = (int)l;
    l >>= 32;
    l += (paramArrayOfInt[paramInt3 + paramInt4 + 1] & 0xFFFFFFFFL) - 1L;
    paramArrayOfInt[paramInt3 + paramInt4 + 1] = (int)l;
    l >>= 32;
    return (l == 0L) ? 0 : decAt(paramInt1, paramArrayOfInt, paramInt3, paramInt4 + 2);
  }
  
  public static int sub33From(int paramInt1, int paramInt2, int[] paramArrayOfInt) {
    long l = (paramArrayOfInt[0] & 0xFFFFFFFFL) - (paramInt2 & 0xFFFFFFFFL);
    paramArrayOfInt[0] = (int)l;
    l >>= 32;
    l += (paramArrayOfInt[1] & 0xFFFFFFFFL) - 1L;
    paramArrayOfInt[1] = (int)l;
    l >>= 32;
    return (l == 0L) ? 0 : decAt(paramInt1, paramArrayOfInt, 2);
  }
  
  public static int sub33From(int paramInt1, int paramInt2, int[] paramArrayOfInt, int paramInt3) {
    long l = (paramArrayOfInt[paramInt3 + 0] & 0xFFFFFFFFL) - (paramInt2 & 0xFFFFFFFFL);
    paramArrayOfInt[paramInt3 + 0] = (int)l;
    l >>= 32;
    l += (paramArrayOfInt[paramInt3 + 1] & 0xFFFFFFFFL) - 1L;
    paramArrayOfInt[paramInt3 + 1] = (int)l;
    l >>= 32;
    return (l == 0L) ? 0 : decAt(paramInt1, paramArrayOfInt, paramInt3, 2);
  }
  
  public static int subBothFrom(int paramInt, int[] paramArrayOfInt1, int[] paramArrayOfInt2, int[] paramArrayOfInt3) {
    long l = 0L;
    for (byte b = 0; b < paramInt; b++) {
      l += (paramArrayOfInt3[b] & 0xFFFFFFFFL) - (paramArrayOfInt1[b] & 0xFFFFFFFFL) - (paramArrayOfInt2[b] & 0xFFFFFFFFL);
      paramArrayOfInt3[b] = (int)l;
      l >>= 32;
    } 
    return (int)l;
  }
  
  public static int subBothFrom(int paramInt1, int[] paramArrayOfInt1, int paramInt2, int[] paramArrayOfInt2, int paramInt3, int[] paramArrayOfInt3, int paramInt4) {
    long l = 0L;
    for (int i = 0; i < paramInt1; i++) {
      l += (paramArrayOfInt3[paramInt4 + i] & 0xFFFFFFFFL) - (paramArrayOfInt1[paramInt2 + i] & 0xFFFFFFFFL) - (paramArrayOfInt2[paramInt3 + i] & 0xFFFFFFFFL);
      paramArrayOfInt3[paramInt4 + i] = (int)l;
      l >>= 32;
    } 
    return (int)l;
  }
  
  public static int subDWordAt(int paramInt1, long paramLong, int[] paramArrayOfInt, int paramInt2) {
    long l = (paramArrayOfInt[paramInt2 + 0] & 0xFFFFFFFFL) - (paramLong & 0xFFFFFFFFL);
    paramArrayOfInt[paramInt2 + 0] = (int)l;
    l >>= 32;
    l += (paramArrayOfInt[paramInt2 + 1] & 0xFFFFFFFFL) - (paramLong >>> 32);
    paramArrayOfInt[paramInt2 + 1] = (int)l;
    l >>= 32;
    return (l == 0L) ? 0 : decAt(paramInt1, paramArrayOfInt, paramInt2 + 2);
  }
  
  public static int subDWordAt(int paramInt1, long paramLong, int[] paramArrayOfInt, int paramInt2, int paramInt3) {
    long l = (paramArrayOfInt[paramInt2 + paramInt3] & 0xFFFFFFFFL) - (paramLong & 0xFFFFFFFFL);
    paramArrayOfInt[paramInt2 + paramInt3] = (int)l;
    l >>= 32;
    l += (paramArrayOfInt[paramInt2 + paramInt3 + 1] & 0xFFFFFFFFL) - (paramLong >>> 32);
    paramArrayOfInt[paramInt2 + paramInt3 + 1] = (int)l;
    l >>= 32;
    return (l == 0L) ? 0 : decAt(paramInt1, paramArrayOfInt, paramInt2, paramInt3 + 2);
  }
  
  public static int subDWordFrom(int paramInt, long paramLong, int[] paramArrayOfInt) {
    long l = (paramArrayOfInt[0] & 0xFFFFFFFFL) - (paramLong & 0xFFFFFFFFL);
    paramArrayOfInt[0] = (int)l;
    l >>= 32;
    l += (paramArrayOfInt[1] & 0xFFFFFFFFL) - (paramLong >>> 32);
    paramArrayOfInt[1] = (int)l;
    l >>= 32;
    return (l == 0L) ? 0 : decAt(paramInt, paramArrayOfInt, 2);
  }
  
  public static int subDWordFrom(int paramInt1, long paramLong, int[] paramArrayOfInt, int paramInt2) {
    long l = (paramArrayOfInt[paramInt2 + 0] & 0xFFFFFFFFL) - (paramLong & 0xFFFFFFFFL);
    paramArrayOfInt[paramInt2 + 0] = (int)l;
    l >>= 32;
    l += (paramArrayOfInt[paramInt2 + 1] & 0xFFFFFFFFL) - (paramLong >>> 32);
    paramArrayOfInt[paramInt2 + 1] = (int)l;
    l >>= 32;
    return (l == 0L) ? 0 : decAt(paramInt1, paramArrayOfInt, paramInt2, 2);
  }
  
  public static int subFrom(int paramInt, int[] paramArrayOfInt1, int[] paramArrayOfInt2) {
    long l = 0L;
    for (byte b = 0; b < paramInt; b++) {
      l += (paramArrayOfInt2[b] & 0xFFFFFFFFL) - (paramArrayOfInt1[b] & 0xFFFFFFFFL);
      paramArrayOfInt2[b] = (int)l;
      l >>= 32;
    } 
    return (int)l;
  }
  
  public static int subFrom(int paramInt1, int[] paramArrayOfInt1, int paramInt2, int[] paramArrayOfInt2, int paramInt3) {
    long l = 0L;
    for (int i = 0; i < paramInt1; i++) {
      l += (paramArrayOfInt2[paramInt3 + i] & 0xFFFFFFFFL) - (paramArrayOfInt1[paramInt2 + i] & 0xFFFFFFFFL);
      paramArrayOfInt2[paramInt3 + i] = (int)l;
      l >>= 32;
    } 
    return (int)l;
  }
  
  public static int subWordAt(int paramInt1, int paramInt2, int[] paramArrayOfInt, int paramInt3) {
    long l = (paramArrayOfInt[paramInt3] & 0xFFFFFFFFL) - (paramInt2 & 0xFFFFFFFFL);
    paramArrayOfInt[paramInt3] = (int)l;
    l >>= 32;
    return (l == 0L) ? 0 : decAt(paramInt1, paramArrayOfInt, paramInt3 + 1);
  }
  
  public static int subWordAt(int paramInt1, int paramInt2, int[] paramArrayOfInt, int paramInt3, int paramInt4) {
    long l = (paramArrayOfInt[paramInt3 + paramInt4] & 0xFFFFFFFFL) - (paramInt2 & 0xFFFFFFFFL);
    paramArrayOfInt[paramInt3 + paramInt4] = (int)l;
    l >>= 32;
    return (l == 0L) ? 0 : decAt(paramInt1, paramArrayOfInt, paramInt3, paramInt4 + 1);
  }
  
  public static int subWordFrom(int paramInt1, int paramInt2, int[] paramArrayOfInt) {
    long l = (paramArrayOfInt[0] & 0xFFFFFFFFL) - (paramInt2 & 0xFFFFFFFFL);
    paramArrayOfInt[0] = (int)l;
    l >>= 32;
    return (l == 0L) ? 0 : decAt(paramInt1, paramArrayOfInt, 1);
  }
  
  public static int subWordFrom(int paramInt1, int paramInt2, int[] paramArrayOfInt, int paramInt3) {
    long l = (paramArrayOfInt[paramInt3 + 0] & 0xFFFFFFFFL) - (paramInt2 & 0xFFFFFFFFL);
    paramArrayOfInt[paramInt3 + 0] = (int)l;
    l >>= 32;
    return (l == 0L) ? 0 : decAt(paramInt1, paramArrayOfInt, paramInt3, 1);
  }
  
  public static BigInteger toBigInteger(int paramInt, int[] paramArrayOfInt) {
    byte[] arrayOfByte = new byte[paramInt << 2];
    for (int i = 0; i < paramInt; i++) {
      int j = paramArrayOfInt[i];
      if (j != 0)
        Pack.intToBigEndian(j, arrayOfByte, paramInt - 1 - i << 2); 
    } 
    return new BigInteger(1, arrayOfByte);
  }
  
  public static void zero(int paramInt, int[] paramArrayOfInt) {
    for (byte b = 0; b < paramInt; b++)
      paramArrayOfInt[b] = 0; 
  }
  
  public static void zero(int paramInt1, int[] paramArrayOfInt, int paramInt2) {
    for (int i = 0; i < paramInt1; i++)
      paramArrayOfInt[paramInt2 + i] = 0; 
  }
  
  public static void zero64(int paramInt, long[] paramArrayOfLong) {
    for (byte b = 0; b < paramInt; b++)
      paramArrayOfLong[b] = 0L; 
  }
}
