package org.bouncycastle.math.ec.custom.sec;

import java.math.BigInteger;
import org.bouncycastle.math.raw.Interleave;
import org.bouncycastle.math.raw.Nat;
import org.bouncycastle.math.raw.Nat192;

public class SecT163Field {
  private static final long M35 = 34359738367L;
  
  private static final long M55 = 36028797018963967L;
  
  private static final long[] ROOT_Z = { -5270498306774157648L, 5270498306774195053L, 19634136210L };
  
  public static void add(long[] paramArrayOfLong1, long[] paramArrayOfLong2, long[] paramArrayOfLong3) {
    paramArrayOfLong3[0] = paramArrayOfLong1[0] ^ paramArrayOfLong2[0];
    paramArrayOfLong3[1] = paramArrayOfLong1[1] ^ paramArrayOfLong2[1];
    paramArrayOfLong3[2] = paramArrayOfLong1[2] ^ paramArrayOfLong2[2];
  }
  
  public static void addExt(long[] paramArrayOfLong1, long[] paramArrayOfLong2, long[] paramArrayOfLong3) {
    paramArrayOfLong3[0] = paramArrayOfLong1[0] ^ paramArrayOfLong2[0];
    paramArrayOfLong3[1] = paramArrayOfLong1[1] ^ paramArrayOfLong2[1];
    paramArrayOfLong3[2] = paramArrayOfLong1[2] ^ paramArrayOfLong2[2];
    paramArrayOfLong3[3] = paramArrayOfLong1[3] ^ paramArrayOfLong2[3];
    paramArrayOfLong3[4] = paramArrayOfLong1[4] ^ paramArrayOfLong2[4];
    paramArrayOfLong3[5] = paramArrayOfLong1[5] ^ paramArrayOfLong2[5];
  }
  
  public static void addOne(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    paramArrayOfLong2[0] = paramArrayOfLong1[0] ^ 0x1L;
    paramArrayOfLong2[1] = paramArrayOfLong1[1];
    paramArrayOfLong2[2] = paramArrayOfLong1[2];
  }
  
  private static void addTo(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    paramArrayOfLong2[0] = paramArrayOfLong2[0] ^ paramArrayOfLong1[0];
    paramArrayOfLong2[1] = paramArrayOfLong2[1] ^ paramArrayOfLong1[1];
    paramArrayOfLong2[2] = paramArrayOfLong2[2] ^ paramArrayOfLong1[2];
  }
  
  public static long[] fromBigInteger(BigInteger paramBigInteger) { return Nat.fromBigInteger64(163, paramBigInteger); }
  
  public static void halfTrace(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    long[] arrayOfLong = Nat192.createExt64();
    Nat192.copy64(paramArrayOfLong1, paramArrayOfLong2);
    for (boolean bool = true; bool < 'Â£'; bool += true) {
      implSquare(paramArrayOfLong2, arrayOfLong);
      reduce(arrayOfLong, paramArrayOfLong2);
      implSquare(paramArrayOfLong2, arrayOfLong);
      reduce(arrayOfLong, paramArrayOfLong2);
      addTo(paramArrayOfLong1, paramArrayOfLong2);
    } 
  }
  
  public static void invert(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    if (Nat192.isZero64(paramArrayOfLong1))
      throw new IllegalStateException(); 
    long[] arrayOfLong1 = Nat192.create64();
    long[] arrayOfLong2 = Nat192.create64();
    square(paramArrayOfLong1, arrayOfLong1);
    squareN(arrayOfLong1, 1, arrayOfLong2);
    multiply(arrayOfLong1, arrayOfLong2, arrayOfLong1);
    squareN(arrayOfLong2, 1, arrayOfLong2);
    multiply(arrayOfLong1, arrayOfLong2, arrayOfLong1);
    squareN(arrayOfLong1, 3, arrayOfLong2);
    multiply(arrayOfLong1, arrayOfLong2, arrayOfLong1);
    squareN(arrayOfLong2, 3, arrayOfLong2);
    multiply(arrayOfLong1, arrayOfLong2, arrayOfLong1);
    squareN(arrayOfLong1, 9, arrayOfLong2);
    multiply(arrayOfLong1, arrayOfLong2, arrayOfLong1);
    squareN(arrayOfLong2, 9, arrayOfLong2);
    multiply(arrayOfLong1, arrayOfLong2, arrayOfLong1);
    squareN(arrayOfLong1, 27, arrayOfLong2);
    multiply(arrayOfLong1, arrayOfLong2, arrayOfLong1);
    squareN(arrayOfLong2, 27, arrayOfLong2);
    multiply(arrayOfLong1, arrayOfLong2, arrayOfLong1);
    squareN(arrayOfLong1, 81, arrayOfLong2);
    multiply(arrayOfLong1, arrayOfLong2, paramArrayOfLong2);
  }
  
  public static void multiply(long[] paramArrayOfLong1, long[] paramArrayOfLong2, long[] paramArrayOfLong3) {
    long[] arrayOfLong = new long[8];
    implMultiply(paramArrayOfLong1, paramArrayOfLong2, arrayOfLong);
    reduce(arrayOfLong, paramArrayOfLong3);
  }
  
  public static void multiplyAddToExt(long[] paramArrayOfLong1, long[] paramArrayOfLong2, long[] paramArrayOfLong3) {
    long[] arrayOfLong = new long[8];
    implMultiply(paramArrayOfLong1, paramArrayOfLong2, arrayOfLong);
    addExt(paramArrayOfLong3, arrayOfLong, paramArrayOfLong3);
  }
  
  public static void reduce(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    long l1 = paramArrayOfLong1[0];
    long l2 = paramArrayOfLong1[1];
    long l3 = paramArrayOfLong1[2];
    long l4 = paramArrayOfLong1[3];
    long l5 = paramArrayOfLong1[4];
    long l6 = paramArrayOfLong1[5];
    l3 ^= l6 << 29 ^ l6 << 32 ^ l6 << 35 ^ l6 << 36;
    l4 ^= l6 >>> 35 ^ l6 >>> 32 ^ l6 >>> 29 ^ l6 >>> 28;
    l2 ^= l5 << 29 ^ l5 << 32 ^ l5 << 35 ^ l5 << 36;
    l3 ^= l5 >>> 35 ^ l5 >>> 32 ^ l5 >>> 29 ^ l5 >>> 28;
    l1 ^= l4 << 29 ^ l4 << 32 ^ l4 << 35 ^ l4 << 36;
    l2 ^= l4 >>> 35 ^ l4 >>> 32 ^ l4 >>> 29 ^ l4 >>> 28;
    long l7 = l3 >>> 35;
    paramArrayOfLong2[0] = l1 ^ l7 ^ l7 << 3 ^ l7 << 6 ^ l7 << 7;
    paramArrayOfLong2[1] = l2;
    paramArrayOfLong2[2] = l3 & 0x7FFFFFFFFL;
  }
  
  public static void reduce29(long[] paramArrayOfLong, int paramInt) {
    long l1 = paramArrayOfLong[paramInt + 2];
    long l2 = l1 >>> 35;
    paramArrayOfLong[paramInt] = paramArrayOfLong[paramInt] ^ l2 ^ l2 << 3 ^ l2 << 6 ^ l2 << 7;
    paramArrayOfLong[paramInt + 2] = l1 & 0x7FFFFFFFFL;
  }
  
  public static void sqrt(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    long[] arrayOfLong = Nat192.create64();
    long l1 = Interleave.unshuffle(paramArrayOfLong1[0]);
    long l2 = Interleave.unshuffle(paramArrayOfLong1[1]);
    long l3 = l1 & 0xFFFFFFFFL | l2 << 32;
    arrayOfLong[0] = l1 >>> 32 | l2 & 0xFFFFFFFF00000000L;
    l1 = Interleave.unshuffle(paramArrayOfLong1[2]);
    long l4 = l1 & 0xFFFFFFFFL;
    arrayOfLong[1] = l1 >>> 32;
    multiply(arrayOfLong, ROOT_Z, paramArrayOfLong2);
    paramArrayOfLong2[0] = paramArrayOfLong2[0] ^ l3;
    paramArrayOfLong2[1] = paramArrayOfLong2[1] ^ l4;
  }
  
  public static void square(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    long[] arrayOfLong = Nat192.createExt64();
    implSquare(paramArrayOfLong1, arrayOfLong);
    reduce(arrayOfLong, paramArrayOfLong2);
  }
  
  public static void squareAddToExt(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    long[] arrayOfLong = Nat192.createExt64();
    implSquare(paramArrayOfLong1, arrayOfLong);
    addExt(paramArrayOfLong2, arrayOfLong, paramArrayOfLong2);
  }
  
  public static void squareN(long[] paramArrayOfLong1, int paramInt, long[] paramArrayOfLong2) {
    long[] arrayOfLong = Nat192.createExt64();
    implSquare(paramArrayOfLong1, arrayOfLong);
    reduce(arrayOfLong, paramArrayOfLong2);
    while (--paramInt > 0) {
      implSquare(paramArrayOfLong2, arrayOfLong);
      reduce(arrayOfLong, paramArrayOfLong2);
    } 
  }
  
  public static int trace(long[] paramArrayOfLong) { return (int)(paramArrayOfLong[0] ^ paramArrayOfLong[2] >>> 29) & true; }
  
  protected static void implCompactExt(long[] paramArrayOfLong) {
    long l1 = paramArrayOfLong[0];
    long l2 = paramArrayOfLong[1];
    long l3 = paramArrayOfLong[2];
    long l4 = paramArrayOfLong[3];
    long l5 = paramArrayOfLong[4];
    long l6 = paramArrayOfLong[5];
    paramArrayOfLong[0] = l1 ^ l2 << 55;
    paramArrayOfLong[1] = l2 >>> 9 ^ l3 << 46;
    paramArrayOfLong[2] = l3 >>> 18 ^ l4 << 37;
    paramArrayOfLong[3] = l4 >>> 27 ^ l5 << 28;
    paramArrayOfLong[4] = l5 >>> 36 ^ l6 << 19;
    paramArrayOfLong[5] = l6 >>> 45;
  }
  
  protected static void implMultiply(long[] paramArrayOfLong1, long[] paramArrayOfLong2, long[] paramArrayOfLong3) {
    long l1 = paramArrayOfLong1[0];
    long l2 = paramArrayOfLong1[1];
    long l3 = paramArrayOfLong1[2];
    l3 = l2 >>> 46 ^ l3 << 18;
    l2 = (l1 >>> 55 ^ l2 << 9) & 0x7FFFFFFFFFFFFFL;
    l1 &= 0x7FFFFFFFFFFFFFL;
    long l4 = paramArrayOfLong2[0];
    long l5 = paramArrayOfLong2[1];
    long l6 = paramArrayOfLong2[2];
    l6 = l5 >>> 46 ^ l6 << 18;
    l5 = (l4 >>> 55 ^ l5 << 9) & 0x7FFFFFFFFFFFFFL;
    l4 &= 0x7FFFFFFFFFFFFFL;
    long[] arrayOfLong1 = paramArrayOfLong3;
    long[] arrayOfLong2 = new long[10];
    implMulw(arrayOfLong1, l1, l4, arrayOfLong2, 0);
    implMulw(arrayOfLong1, l3, l6, arrayOfLong2, 2);
    long l7 = l1 ^ l2 ^ l3;
    long l8 = l4 ^ l5 ^ l6;
    implMulw(arrayOfLong1, l7, l8, arrayOfLong2, 4);
    long l9 = l2 << true ^ l3 << 2;
    long l10 = l5 << true ^ l6 << 2;
    implMulw(arrayOfLong1, l1 ^ l9, l4 ^ l10, arrayOfLong2, 6);
    implMulw(arrayOfLong1, l7 ^ l9, l8 ^ l10, arrayOfLong2, 8);
    long l11 = arrayOfLong2[6] ^ arrayOfLong2[8];
    long l12 = arrayOfLong2[7] ^ arrayOfLong2[9];
    long l13 = l11 << true ^ arrayOfLong2[6];
    long l14 = l11 ^ l12 << true ^ arrayOfLong2[7];
    long l15 = l12;
    long l16 = arrayOfLong2[0];
    long l17 = arrayOfLong2[1] ^ arrayOfLong2[0] ^ arrayOfLong2[4];
    long l18 = arrayOfLong2[1] ^ arrayOfLong2[5];
    long l19 = l16 ^ l13 ^ arrayOfLong2[2] << 4 ^ arrayOfLong2[2] << true;
    long l20 = l17 ^ l14 ^ arrayOfLong2[3] << 4 ^ arrayOfLong2[3] << true;
    long l21 = l18 ^ l15;
    l20 ^= l19 >>> 55;
    l19 &= 0x7FFFFFFFFFFFFFL;
    l21 ^= l20 >>> 55;
    l20 &= 0x7FFFFFFFFFFFFFL;
    l19 = l19 >>> true ^ (l20 & 0x1L) << 54;
    l20 = l20 >>> true ^ (l21 & 0x1L) << 54;
    l21 >>>= true;
    l19 ^= l19 << true;
    l19 ^= l19 << 2;
    l19 ^= l19 << 4;
    l19 ^= l19 << 8;
    l19 ^= l19 << 16;
    l19 ^= l19 << 32;
    l19 &= 0x7FFFFFFFFFFFFFL;
    l20 ^= l19 >>> 54;
    l20 ^= l20 << true;
    l20 ^= l20 << 2;
    l20 ^= l20 << 4;
    l20 ^= l20 << 8;
    l20 ^= l20 << 16;
    l20 ^= l20 << 32;
    l20 &= 0x7FFFFFFFFFFFFFL;
    l21 ^= l20 >>> 54;
    l21 ^= l21 << true;
    l21 ^= l21 << 2;
    l21 ^= l21 << 4;
    l21 ^= l21 << 8;
    l21 ^= l21 << 16;
    l21 ^= l21 << 32;
    paramArrayOfLong3[0] = l16;
    paramArrayOfLong3[1] = l17 ^ l19 ^ arrayOfLong2[2];
    paramArrayOfLong3[2] = l18 ^ l20 ^ l19 ^ arrayOfLong2[3];
    paramArrayOfLong3[3] = l21 ^ l20;
    paramArrayOfLong3[4] = l21 ^ arrayOfLong2[2];
    paramArrayOfLong3[5] = arrayOfLong2[3];
    implCompactExt(paramArrayOfLong3);
  }
  
  protected static void implMulw(long[] paramArrayOfLong1, long paramLong1, long paramLong2, long[] paramArrayOfLong2, int paramInt) {
    paramArrayOfLong1[1] = paramLong2;
    paramArrayOfLong1[2] = paramArrayOfLong1[1] << true;
    paramArrayOfLong1[3] = paramArrayOfLong1[2] ^ paramLong2;
    paramArrayOfLong1[4] = paramArrayOfLong1[2] << true;
    paramArrayOfLong1[5] = paramArrayOfLong1[4] ^ paramLong2;
    paramArrayOfLong1[6] = paramArrayOfLong1[3] << true;
    paramArrayOfLong1[7] = paramArrayOfLong1[6] ^ paramLong2;
    int i = (int)paramLong1;
    long l1 = 0L;
    long l2 = paramArrayOfLong1[i & 0x3];
    byte b = 47;
    do {
      i = (int)(paramLong1 >>> b);
      long l = paramArrayOfLong1[i & 0x7] ^ paramArrayOfLong1[i >>> 3 & 0x7] << 3 ^ paramArrayOfLong1[i >>> 6 & 0x7] << 6;
      l2 ^= l << b;
      l1 ^= l >>> -b;
      b -= 9;
    } while (b > 0);
    paramArrayOfLong2[paramInt] = l2 & 0x7FFFFFFFFFFFFFL;
    paramArrayOfLong2[paramInt + 1] = l2 >>> 55 ^ l1 << 9;
  }
  
  protected static void implSquare(long[] paramArrayOfLong1, long[] paramArrayOfLong2) { Interleave.expand64To128(paramArrayOfLong1, 0, 3, paramArrayOfLong2, 0); }
}
