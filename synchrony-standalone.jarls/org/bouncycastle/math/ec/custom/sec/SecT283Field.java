package org.bouncycastle.math.ec.custom.sec;

import java.math.BigInteger;
import org.bouncycastle.math.raw.Interleave;
import org.bouncycastle.math.raw.Nat;
import org.bouncycastle.math.raw.Nat320;

public class SecT283Field {
  private static final long M27 = 134217727L;
  
  private static final long M57 = 144115188075855871L;
  
  private static final long[] ROOT_Z = { 878416384462358536L, 3513665537849438403L, -9076969306111048948L, 585610922974906400L, 34087042L };
  
  public static void add(long[] paramArrayOfLong1, long[] paramArrayOfLong2, long[] paramArrayOfLong3) {
    paramArrayOfLong3[0] = paramArrayOfLong1[0] ^ paramArrayOfLong2[0];
    paramArrayOfLong3[1] = paramArrayOfLong1[1] ^ paramArrayOfLong2[1];
    paramArrayOfLong3[2] = paramArrayOfLong1[2] ^ paramArrayOfLong2[2];
    paramArrayOfLong3[3] = paramArrayOfLong1[3] ^ paramArrayOfLong2[3];
    paramArrayOfLong3[4] = paramArrayOfLong1[4] ^ paramArrayOfLong2[4];
  }
  
  public static void addExt(long[] paramArrayOfLong1, long[] paramArrayOfLong2, long[] paramArrayOfLong3) {
    paramArrayOfLong3[0] = paramArrayOfLong1[0] ^ paramArrayOfLong2[0];
    paramArrayOfLong3[1] = paramArrayOfLong1[1] ^ paramArrayOfLong2[1];
    paramArrayOfLong3[2] = paramArrayOfLong1[2] ^ paramArrayOfLong2[2];
    paramArrayOfLong3[3] = paramArrayOfLong1[3] ^ paramArrayOfLong2[3];
    paramArrayOfLong3[4] = paramArrayOfLong1[4] ^ paramArrayOfLong2[4];
    paramArrayOfLong3[5] = paramArrayOfLong1[5] ^ paramArrayOfLong2[5];
    paramArrayOfLong3[6] = paramArrayOfLong1[6] ^ paramArrayOfLong2[6];
    paramArrayOfLong3[7] = paramArrayOfLong1[7] ^ paramArrayOfLong2[7];
    paramArrayOfLong3[8] = paramArrayOfLong1[8] ^ paramArrayOfLong2[8];
  }
  
  public static void addOne(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    paramArrayOfLong2[0] = paramArrayOfLong1[0] ^ 0x1L;
    paramArrayOfLong2[1] = paramArrayOfLong1[1];
    paramArrayOfLong2[2] = paramArrayOfLong1[2];
    paramArrayOfLong2[3] = paramArrayOfLong1[3];
    paramArrayOfLong2[4] = paramArrayOfLong1[4];
  }
  
  private static void addTo(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    paramArrayOfLong2[0] = paramArrayOfLong2[0] ^ paramArrayOfLong1[0];
    paramArrayOfLong2[1] = paramArrayOfLong2[1] ^ paramArrayOfLong1[1];
    paramArrayOfLong2[2] = paramArrayOfLong2[2] ^ paramArrayOfLong1[2];
    paramArrayOfLong2[3] = paramArrayOfLong2[3] ^ paramArrayOfLong1[3];
    paramArrayOfLong2[4] = paramArrayOfLong2[4] ^ paramArrayOfLong1[4];
  }
  
  public static long[] fromBigInteger(BigInteger paramBigInteger) { return Nat.fromBigInteger64(283, paramBigInteger); }
  
  public static void halfTrace(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    long[] arrayOfLong = Nat.create64(9);
    Nat320.copy64(paramArrayOfLong1, paramArrayOfLong2);
    for (boolean bool = true; bool < 'Ä›'; bool += true) {
      implSquare(paramArrayOfLong2, arrayOfLong);
      reduce(arrayOfLong, paramArrayOfLong2);
      implSquare(paramArrayOfLong2, arrayOfLong);
      reduce(arrayOfLong, paramArrayOfLong2);
      addTo(paramArrayOfLong1, paramArrayOfLong2);
    } 
  }
  
  public static void invert(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    if (Nat320.isZero64(paramArrayOfLong1))
      throw new IllegalStateException(); 
    long[] arrayOfLong1 = Nat320.create64();
    long[] arrayOfLong2 = Nat320.create64();
    square(paramArrayOfLong1, arrayOfLong1);
    multiply(arrayOfLong1, paramArrayOfLong1, arrayOfLong1);
    squareN(arrayOfLong1, 2, arrayOfLong2);
    multiply(arrayOfLong2, arrayOfLong1, arrayOfLong2);
    squareN(arrayOfLong2, 4, arrayOfLong1);
    multiply(arrayOfLong1, arrayOfLong2, arrayOfLong1);
    squareN(arrayOfLong1, 8, arrayOfLong2);
    multiply(arrayOfLong2, arrayOfLong1, arrayOfLong2);
    square(arrayOfLong2, arrayOfLong2);
    multiply(arrayOfLong2, paramArrayOfLong1, arrayOfLong2);
    squareN(arrayOfLong2, 17, arrayOfLong1);
    multiply(arrayOfLong1, arrayOfLong2, arrayOfLong1);
    square(arrayOfLong1, arrayOfLong1);
    multiply(arrayOfLong1, paramArrayOfLong1, arrayOfLong1);
    squareN(arrayOfLong1, 35, arrayOfLong2);
    multiply(arrayOfLong2, arrayOfLong1, arrayOfLong2);
    squareN(arrayOfLong2, 70, arrayOfLong1);
    multiply(arrayOfLong1, arrayOfLong2, arrayOfLong1);
    square(arrayOfLong1, arrayOfLong1);
    multiply(arrayOfLong1, paramArrayOfLong1, arrayOfLong1);
    squareN(arrayOfLong1, 141, arrayOfLong2);
    multiply(arrayOfLong2, arrayOfLong1, arrayOfLong2);
    square(arrayOfLong2, paramArrayOfLong2);
  }
  
  public static void multiply(long[] paramArrayOfLong1, long[] paramArrayOfLong2, long[] paramArrayOfLong3) {
    long[] arrayOfLong = Nat320.createExt64();
    implMultiply(paramArrayOfLong1, paramArrayOfLong2, arrayOfLong);
    reduce(arrayOfLong, paramArrayOfLong3);
  }
  
  public static void multiplyAddToExt(long[] paramArrayOfLong1, long[] paramArrayOfLong2, long[] paramArrayOfLong3) {
    long[] arrayOfLong = Nat320.createExt64();
    implMultiply(paramArrayOfLong1, paramArrayOfLong2, arrayOfLong);
    addExt(paramArrayOfLong3, arrayOfLong, paramArrayOfLong3);
  }
  
  public static void reduce(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    long l1 = paramArrayOfLong1[0];
    long l2 = paramArrayOfLong1[1];
    long l3 = paramArrayOfLong1[2];
    long l4 = paramArrayOfLong1[3];
    long l5 = paramArrayOfLong1[4];
    long l6 = paramArrayOfLong1[5];
    long l7 = paramArrayOfLong1[6];
    long l8 = paramArrayOfLong1[7];
    long l9 = paramArrayOfLong1[8];
    l4 ^= l9 << 37 ^ l9 << 42 ^ l9 << 44 ^ l9 << 49;
    l5 ^= l9 >>> 27 ^ l9 >>> 22 ^ l9 >>> 20 ^ l9 >>> 15;
    l3 ^= l8 << 37 ^ l8 << 42 ^ l8 << 44 ^ l8 << 49;
    l4 ^= l8 >>> 27 ^ l8 >>> 22 ^ l8 >>> 20 ^ l8 >>> 15;
    l2 ^= l7 << 37 ^ l7 << 42 ^ l7 << 44 ^ l7 << 49;
    l3 ^= l7 >>> 27 ^ l7 >>> 22 ^ l7 >>> 20 ^ l7 >>> 15;
    l1 ^= l6 << 37 ^ l6 << 42 ^ l6 << 44 ^ l6 << 49;
    l2 ^= l6 >>> 27 ^ l6 >>> 22 ^ l6 >>> 20 ^ l6 >>> 15;
    long l10 = l5 >>> 27;
    paramArrayOfLong2[0] = l1 ^ l10 ^ l10 << 5 ^ l10 << 7 ^ l10 << 12;
    paramArrayOfLong2[1] = l2;
    paramArrayOfLong2[2] = l3;
    paramArrayOfLong2[3] = l4;
    paramArrayOfLong2[4] = l5 & 0x7FFFFFFL;
  }
  
  public static void reduce37(long[] paramArrayOfLong, int paramInt) {
    long l1 = paramArrayOfLong[paramInt + 4];
    long l2 = l1 >>> 27;
    paramArrayOfLong[paramInt] = paramArrayOfLong[paramInt] ^ l2 ^ l2 << 5 ^ l2 << 7 ^ l2 << 12;
    paramArrayOfLong[paramInt + 4] = l1 & 0x7FFFFFFL;
  }
  
  public static void sqrt(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    long[] arrayOfLong = Nat320.create64();
    long l1 = Interleave.unshuffle(paramArrayOfLong1[0]);
    long l2 = Interleave.unshuffle(paramArrayOfLong1[1]);
    long l3 = l1 & 0xFFFFFFFFL | l2 << 32;
    arrayOfLong[0] = l1 >>> 32 | l2 & 0xFFFFFFFF00000000L;
    l1 = Interleave.unshuffle(paramArrayOfLong1[2]);
    l2 = Interleave.unshuffle(paramArrayOfLong1[3]);
    long l4 = l1 & 0xFFFFFFFFL | l2 << 32;
    arrayOfLong[1] = l1 >>> 32 | l2 & 0xFFFFFFFF00000000L;
    l1 = Interleave.unshuffle(paramArrayOfLong1[4]);
    long l5 = l1 & 0xFFFFFFFFL;
    arrayOfLong[2] = l1 >>> 32;
    multiply(arrayOfLong, ROOT_Z, paramArrayOfLong2);
    paramArrayOfLong2[0] = paramArrayOfLong2[0] ^ l3;
    paramArrayOfLong2[1] = paramArrayOfLong2[1] ^ l4;
    paramArrayOfLong2[2] = paramArrayOfLong2[2] ^ l5;
  }
  
  public static void square(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    long[] arrayOfLong = Nat.create64(9);
    implSquare(paramArrayOfLong1, arrayOfLong);
    reduce(arrayOfLong, paramArrayOfLong2);
  }
  
  public static void squareAddToExt(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    long[] arrayOfLong = Nat.create64(9);
    implSquare(paramArrayOfLong1, arrayOfLong);
    addExt(paramArrayOfLong2, arrayOfLong, paramArrayOfLong2);
  }
  
  public static void squareN(long[] paramArrayOfLong1, int paramInt, long[] paramArrayOfLong2) {
    long[] arrayOfLong = Nat.create64(9);
    implSquare(paramArrayOfLong1, arrayOfLong);
    reduce(arrayOfLong, paramArrayOfLong2);
    while (--paramInt > 0) {
      implSquare(paramArrayOfLong2, arrayOfLong);
      reduce(arrayOfLong, paramArrayOfLong2);
    } 
  }
  
  public static int trace(long[] paramArrayOfLong) { return (int)(paramArrayOfLong[0] ^ paramArrayOfLong[4] >>> 15) & true; }
  
  protected static void implCompactExt(long[] paramArrayOfLong) {
    long l1 = paramArrayOfLong[0];
    long l2 = paramArrayOfLong[1];
    long l3 = paramArrayOfLong[2];
    long l4 = paramArrayOfLong[3];
    long l5 = paramArrayOfLong[4];
    long l6 = paramArrayOfLong[5];
    long l7 = paramArrayOfLong[6];
    long l8 = paramArrayOfLong[7];
    long l9 = paramArrayOfLong[8];
    long l10 = paramArrayOfLong[9];
    paramArrayOfLong[0] = l1 ^ l2 << 57;
    paramArrayOfLong[1] = l2 >>> 7 ^ l3 << 50;
    paramArrayOfLong[2] = l3 >>> 14 ^ l4 << 43;
    paramArrayOfLong[3] = l4 >>> 21 ^ l5 << 36;
    paramArrayOfLong[4] = l5 >>> 28 ^ l6 << 29;
    paramArrayOfLong[5] = l6 >>> 35 ^ l7 << 22;
    paramArrayOfLong[6] = l7 >>> 42 ^ l8 << 15;
    paramArrayOfLong[7] = l8 >>> 49 ^ l9 << 8;
    paramArrayOfLong[8] = l9 >>> 56 ^ l10 << true;
    paramArrayOfLong[9] = l10 >>> 63;
  }
  
  protected static void implExpand(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    long l1 = paramArrayOfLong1[0];
    long l2 = paramArrayOfLong1[1];
    long l3 = paramArrayOfLong1[2];
    long l4 = paramArrayOfLong1[3];
    long l5 = paramArrayOfLong1[4];
    paramArrayOfLong2[0] = l1 & 0x1FFFFFFFFFFFFFFL;
    paramArrayOfLong2[1] = (l1 >>> 57 ^ l2 << 7) & 0x1FFFFFFFFFFFFFFL;
    paramArrayOfLong2[2] = (l2 >>> 50 ^ l3 << 14) & 0x1FFFFFFFFFFFFFFL;
    paramArrayOfLong2[3] = (l3 >>> 43 ^ l4 << 21) & 0x1FFFFFFFFFFFFFFL;
    paramArrayOfLong2[4] = l4 >>> 36 ^ l5 << 28;
  }
  
  protected static void implMultiply(long[] paramArrayOfLong1, long[] paramArrayOfLong2, long[] paramArrayOfLong3) {
    long[] arrayOfLong1 = new long[5];
    long[] arrayOfLong2 = new long[5];
    implExpand(paramArrayOfLong1, arrayOfLong1);
    implExpand(paramArrayOfLong2, arrayOfLong2);
    long[] arrayOfLong3 = paramArrayOfLong3;
    long[] arrayOfLong4 = new long[26];
    implMulw(arrayOfLong3, arrayOfLong1[0], arrayOfLong2[0], arrayOfLong4, 0);
    implMulw(arrayOfLong3, arrayOfLong1[1], arrayOfLong2[1], arrayOfLong4, 2);
    implMulw(arrayOfLong3, arrayOfLong1[2], arrayOfLong2[2], arrayOfLong4, 4);
    implMulw(arrayOfLong3, arrayOfLong1[3], arrayOfLong2[3], arrayOfLong4, 6);
    implMulw(arrayOfLong3, arrayOfLong1[4], arrayOfLong2[4], arrayOfLong4, 8);
    long l1 = arrayOfLong1[0] ^ arrayOfLong1[1];
    long l2 = arrayOfLong2[0] ^ arrayOfLong2[1];
    long l3 = arrayOfLong1[0] ^ arrayOfLong1[2];
    long l4 = arrayOfLong2[0] ^ arrayOfLong2[2];
    long l5 = arrayOfLong1[2] ^ arrayOfLong1[4];
    long l6 = arrayOfLong2[2] ^ arrayOfLong2[4];
    long l7 = arrayOfLong1[3] ^ arrayOfLong1[4];
    long l8 = arrayOfLong2[3] ^ arrayOfLong2[4];
    implMulw(arrayOfLong3, l3 ^ arrayOfLong1[3], l4 ^ arrayOfLong2[3], arrayOfLong4, 18);
    implMulw(arrayOfLong3, l5 ^ arrayOfLong1[1], l6 ^ arrayOfLong2[1], arrayOfLong4, 20);
    long l9 = l1 ^ l7;
    long l10 = l2 ^ l8;
    long l11 = l9 ^ arrayOfLong1[2];
    long l12 = l10 ^ arrayOfLong2[2];
    implMulw(arrayOfLong3, l9, l10, arrayOfLong4, 22);
    implMulw(arrayOfLong3, l11, l12, arrayOfLong4, 24);
    implMulw(arrayOfLong3, l1, l2, arrayOfLong4, 10);
    implMulw(arrayOfLong3, l3, l4, arrayOfLong4, 12);
    implMulw(arrayOfLong3, l5, l6, arrayOfLong4, 14);
    implMulw(arrayOfLong3, l7, l8, arrayOfLong4, 16);
    paramArrayOfLong3[0] = arrayOfLong4[0];
    paramArrayOfLong3[9] = arrayOfLong4[9];
    long l13 = arrayOfLong4[0] ^ arrayOfLong4[1];
    long l14 = l13 ^ arrayOfLong4[2];
    long l15 = l14 ^ arrayOfLong4[10];
    paramArrayOfLong3[1] = l15;
    long l16 = arrayOfLong4[3] ^ arrayOfLong4[4];
    long l17 = arrayOfLong4[11] ^ arrayOfLong4[12];
    long l18 = l16 ^ l17;
    long l19 = l14 ^ l18;
    paramArrayOfLong3[2] = l19;
    long l20 = l13 ^ l16;
    long l21 = arrayOfLong4[5] ^ arrayOfLong4[6];
    long l22 = l20 ^ l21;
    long l23 = l22 ^ arrayOfLong4[8];
    long l24 = arrayOfLong4[13] ^ arrayOfLong4[14];
    long l25 = l23 ^ l24;
    long l26 = arrayOfLong4[18] ^ arrayOfLong4[22];
    long l27 = l26 ^ arrayOfLong4[24];
    long l28 = l25 ^ l27;
    paramArrayOfLong3[3] = l28;
    long l29 = arrayOfLong4[7] ^ arrayOfLong4[8];
    long l30 = l29 ^ arrayOfLong4[9];
    long l31 = l30 ^ arrayOfLong4[17];
    paramArrayOfLong3[8] = l31;
    long l32 = l30 ^ l21;
    long l33 = arrayOfLong4[15] ^ arrayOfLong4[16];
    long l34 = l32 ^ l33;
    paramArrayOfLong3[7] = l34;
    long l35 = l34 ^ l15;
    long l36 = arrayOfLong4[19] ^ arrayOfLong4[20];
    long l37 = arrayOfLong4[25] ^ arrayOfLong4[24];
    long l38 = arrayOfLong4[18] ^ arrayOfLong4[23];
    long l39 = l36 ^ l37;
    long l40 = l39 ^ l38;
    long l41 = l40 ^ l35;
    paramArrayOfLong3[4] = l41;
    long l42 = l19 ^ l31;
    long l43 = l39 ^ l42;
    long l44 = arrayOfLong4[21] ^ arrayOfLong4[22];
    long l45 = l43 ^ l44;
    paramArrayOfLong3[5] = l45;
    long l46 = l23 ^ arrayOfLong4[0];
    long l47 = l46 ^ arrayOfLong4[9];
    long l48 = l47 ^ l24;
    long l49 = l48 ^ arrayOfLong4[21];
    long l50 = l49 ^ arrayOfLong4[23];
    long l51 = l50 ^ arrayOfLong4[25];
    paramArrayOfLong3[6] = l51;
    implCompactExt(paramArrayOfLong3);
  }
  
  protected static void implMulw(long[] paramArrayOfLong1, long paramLong1, long paramLong2, long[] paramArrayOfLong2, int paramInt) {
    paramArrayOfLong1[1] = paramLong2;
    paramArrayOfLong1[2] = paramArrayOfLong1[1] << true;
    paramArrayOfLong1[3] = paramArrayOfLong1[2] ^ paramLong2;
    paramArrayOfLong1[4] = paramArrayOfLong1[2] << true;
    paramArrayOfLong1[5] = paramArrayOfLong1[4] ^ paramLong2;
    paramArrayOfLong1[6] = paramArrayOfLong1[3] << true;
    paramArrayOfLong1[7] = paramArrayOfLong1[6] ^ paramLong2;
    int i = (int)paramLong1;
    long l1 = 0L;
    long l2 = paramArrayOfLong1[i & 0x7];
    byte b = 48;
    do {
      i = (int)(paramLong1 >>> b);
      long l = paramArrayOfLong1[i & 0x7] ^ paramArrayOfLong1[i >>> 3 & 0x7] << 3 ^ paramArrayOfLong1[i >>> 6 & 0x7] << 6;
      l2 ^= l << b;
      l1 ^= l >>> -b;
      b -= 9;
    } while (b > 0);
    l1 ^= (paramLong1 & 0x100804020100800L & paramLong2 << 7 >> 63) >>> 8;
    paramArrayOfLong2[paramInt] = l2 & 0x1FFFFFFFFFFFFFFL;
    paramArrayOfLong2[paramInt + 1] = l2 >>> 57 ^ l1 << 7;
  }
  
  protected static void implSquare(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    Interleave.expand64To128(paramArrayOfLong1, 0, 4, paramArrayOfLong2, 0);
    paramArrayOfLong2[8] = Interleave.expand32to64((int)paramArrayOfLong1[4]);
  }
}
