package org.bouncycastle.math.ec.custom.sec;

import java.math.BigInteger;
import org.bouncycastle.math.ec.ECConstants;
import org.bouncycastle.math.ec.ECCurve;
import org.bouncycastle.math.ec.ECFieldElement;
import org.bouncycastle.math.ec.ECLookupTable;
import org.bouncycastle.math.ec.ECPoint;
import org.bouncycastle.math.raw.Nat192;

public class SecT163R1Curve extends ECCurve.AbstractF2m {
  private static final int SECT163R1_DEFAULT_COORDS = 6;
  
  private static final ECFieldElement[] SECT163R1_AFFINE_ZS = { new SecT163FieldElement(ECConstants.ONE) };
  
  protected SecT163R1Point infinity = new SecT163R1Point(this, null, null);
  
  public SecT163R1Curve() { super(163, 3, 6, 7); }
  
  protected ECCurve cloneCurve() { return new SecT163R1Curve(); }
  
  public boolean supportsCoordinateSystem(int paramInt) {
    switch (paramInt) {
      case 6:
        return true;
    } 
    return false;
  }
  
  public int getFieldSize() { return 163; }
  
  public ECFieldElement fromBigInteger(BigInteger paramBigInteger) { return new SecT163FieldElement(paramBigInteger); }
  
  protected ECPoint createRawPoint(ECFieldElement paramECFieldElement1, ECFieldElement paramECFieldElement2) { return new SecT163R1Point(this, paramECFieldElement1, paramECFieldElement2); }
  
  protected ECPoint createRawPoint(ECFieldElement paramECFieldElement1, ECFieldElement paramECFieldElement2, ECFieldElement[] paramArrayOfECFieldElement) { return new SecT163R1Point(this, paramECFieldElement1, paramECFieldElement2, paramArrayOfECFieldElement); }
  
  public ECPoint getInfinity() { return this.infinity; }
  
  public boolean isKoblitz() { return false; }
  
  public int getM() { return 163; }
  
  public boolean isTrinomial() { return false; }
  
  public int getK1() { return 3; }
  
  public int getK2() { return 6; }
  
  public int getK3() { return 7; }
  
  public ECLookupTable createCacheSafeLookupTable(ECPoint[] paramArrayOfECPoint, int paramInt1, int paramInt2) {
    long[] arrayOfLong = new long[paramInt2 * 3 * 2];
    byte b = 0;
    for (int i = 0; i < paramInt2; i++) {
      ECPoint eCPoint = paramArrayOfECPoint[paramInt1 + i];
      Nat192.copy64(((SecT163FieldElement)eCPoint.getRawXCoord()).x, 0, arrayOfLong, b);
      b += 3;
      Nat192.copy64(((SecT163FieldElement)eCPoint.getRawYCoord()).x, 0, arrayOfLong, b);
      b += 3;
    } 
    return new Object(this, paramInt2, arrayOfLong);
  }
}
