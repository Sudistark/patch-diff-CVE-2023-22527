package org.bouncycastle.math.ec.custom.sec;

import java.math.BigInteger;
import java.security.SecureRandom;
import org.bouncycastle.math.raw.Mod;
import org.bouncycastle.math.raw.Nat;
import org.bouncycastle.math.raw.Nat128;
import org.bouncycastle.math.raw.Nat256;
import org.bouncycastle.util.Pack;

public class SecP128R1Field {
  private static final long M = 4294967295L;
  
  static final int[] P = { -1, -1, -1, -3 };
  
  private static final int[] PExt = { 1, 0, 0, 4, -2, -1, 3, -4 };
  
  private static final int[] PExtInv = { -1, -1, -1, -5, 1, 0, -4, 3 };
  
  private static final int P3s1 = 2147483646;
  
  private static final int PExt7s1 = 2147483646;
  
  public static void add(int[] paramArrayOfInt1, int[] paramArrayOfInt2, int[] paramArrayOfInt3) {
    int i = Nat128.add(paramArrayOfInt1, paramArrayOfInt2, paramArrayOfInt3);
    if (i != 0 || (paramArrayOfInt3[3] >>> 1 >= 2147483646 && Nat128.gte(paramArrayOfInt3, P)))
      addPInvTo(paramArrayOfInt3); 
  }
  
  public static void addExt(int[] paramArrayOfInt1, int[] paramArrayOfInt2, int[] paramArrayOfInt3) {
    int i = Nat256.add(paramArrayOfInt1, paramArrayOfInt2, paramArrayOfInt3);
    if (i != 0 || (paramArrayOfInt3[7] >>> 1 >= 2147483646 && Nat256.gte(paramArrayOfInt3, PExt)))
      Nat.addTo(PExtInv.length, PExtInv, paramArrayOfInt3); 
  }
  
  public static void addOne(int[] paramArrayOfInt1, int[] paramArrayOfInt2) {
    int i = Nat.inc(4, paramArrayOfInt1, paramArrayOfInt2);
    if (i != 0 || (paramArrayOfInt2[3] >>> 1 >= 2147483646 && Nat128.gte(paramArrayOfInt2, P)))
      addPInvTo(paramArrayOfInt2); 
  }
  
  public static int[] fromBigInteger(BigInteger paramBigInteger) {
    int[] arrayOfInt = Nat128.fromBigInteger(paramBigInteger);
    if (arrayOfInt[3] >>> 1 >= 2147483646 && Nat128.gte(arrayOfInt, P))
      Nat128.subFrom(P, arrayOfInt); 
    return arrayOfInt;
  }
  
  public static void half(int[] paramArrayOfInt1, int[] paramArrayOfInt2) {
    if ((paramArrayOfInt1[0] & true) == 0) {
      Nat.shiftDownBit(4, paramArrayOfInt1, 0, paramArrayOfInt2);
    } else {
      int i = Nat128.add(paramArrayOfInt1, P, paramArrayOfInt2);
      Nat.shiftDownBit(4, paramArrayOfInt2, i);
    } 
  }
  
  public static void inv(int[] paramArrayOfInt1, int[] paramArrayOfInt2) { Mod.checkedModOddInverse(P, paramArrayOfInt1, paramArrayOfInt2); }
  
  public static int isZero(int[] paramArrayOfInt) {
    int i = 0;
    for (byte b = 0; b < 4; b++)
      i |= paramArrayOfInt[b]; 
    i = i >>> 1 | i & true;
    return i - 1 >> 31;
  }
  
  public static void multiply(int[] paramArrayOfInt1, int[] paramArrayOfInt2, int[] paramArrayOfInt3) {
    int[] arrayOfInt = Nat128.createExt();
    Nat128.mul(paramArrayOfInt1, paramArrayOfInt2, arrayOfInt);
    reduce(arrayOfInt, paramArrayOfInt3);
  }
  
  public static void multiplyAddToExt(int[] paramArrayOfInt1, int[] paramArrayOfInt2, int[] paramArrayOfInt3) {
    int i = Nat128.mulAddTo(paramArrayOfInt1, paramArrayOfInt2, paramArrayOfInt3);
    if (i != 0 || (paramArrayOfInt3[7] >>> 1 >= 2147483646 && Nat256.gte(paramArrayOfInt3, PExt)))
      Nat.addTo(PExtInv.length, PExtInv, paramArrayOfInt3); 
  }
  
  public static void negate(int[] paramArrayOfInt1, int[] paramArrayOfInt2) {
    if (0 != isZero(paramArrayOfInt1)) {
      Nat128.sub(P, P, paramArrayOfInt2);
    } else {
      Nat128.sub(P, paramArrayOfInt1, paramArrayOfInt2);
    } 
  }
  
  public static void random(SecureRandom paramSecureRandom, int[] paramArrayOfInt) {
    byte[] arrayOfByte = new byte[16];
    do {
      paramSecureRandom.nextBytes(arrayOfByte);
      Pack.littleEndianToInt(arrayOfByte, 0, paramArrayOfInt, 0, 4);
    } while (0 == Nat.lessThan(4, paramArrayOfInt, P));
  }
  
  public static void randomMult(SecureRandom paramSecureRandom, int[] paramArrayOfInt) {
    do {
      random(paramSecureRandom, paramArrayOfInt);
    } while (0 != isZero(paramArrayOfInt));
  }
  
  public static void reduce(int[] paramArrayOfInt1, int[] paramArrayOfInt2) {
    long l1 = paramArrayOfInt1[0] & 0xFFFFFFFFL;
    long l2 = paramArrayOfInt1[1] & 0xFFFFFFFFL;
    long l3 = paramArrayOfInt1[2] & 0xFFFFFFFFL;
    long l4 = paramArrayOfInt1[3] & 0xFFFFFFFFL;
    long l5 = paramArrayOfInt1[4] & 0xFFFFFFFFL;
    long l6 = paramArrayOfInt1[5] & 0xFFFFFFFFL;
    long l7 = paramArrayOfInt1[6] & 0xFFFFFFFFL;
    long l8 = paramArrayOfInt1[7] & 0xFFFFFFFFL;
    l4 += l8;
    l7 += (l8 << true);
    l3 += l7;
    l6 += (l7 << true);
    l2 += l6;
    l5 += (l6 << true);
    l1 += l5;
    l4 += (l5 << true);
    paramArrayOfInt2[0] = (int)l1;
    l2 += (l1 >>> 32);
    paramArrayOfInt2[1] = (int)l2;
    l3 += (l2 >>> 32);
    paramArrayOfInt2[2] = (int)l3;
    l4 += (l3 >>> 32);
    paramArrayOfInt2[3] = (int)l4;
    reduce32((int)(l4 >>> 32), paramArrayOfInt2);
  }
  
  public static void reduce32(int paramInt, int[] paramArrayOfInt) {
    while (paramInt != 0) {
      long l2 = paramInt & 0xFFFFFFFFL;
      long l1 = (paramArrayOfInt[0] & 0xFFFFFFFFL) + l2;
      paramArrayOfInt[0] = (int)l1;
      l1 >>= 32;
      if (l1 != 0L) {
        l1 += (paramArrayOfInt[1] & 0xFFFFFFFFL);
        paramArrayOfInt[1] = (int)l1;
        l1 >>= 32;
        l1 += (paramArrayOfInt[2] & 0xFFFFFFFFL);
        paramArrayOfInt[2] = (int)l1;
        l1 >>= 32;
      } 
      l1 += (paramArrayOfInt[3] & 0xFFFFFFFFL) + (l2 << true);
      paramArrayOfInt[3] = (int)l1;
      l1 >>= 32;
      paramInt = (int)l1;
    } 
    if (paramArrayOfInt[3] >>> 1 >= 2147483646 && Nat128.gte(paramArrayOfInt, P))
      addPInvTo(paramArrayOfInt); 
  }
  
  public static void square(int[] paramArrayOfInt1, int[] paramArrayOfInt2) {
    int[] arrayOfInt = Nat128.createExt();
    Nat128.square(paramArrayOfInt1, arrayOfInt);
    reduce(arrayOfInt, paramArrayOfInt2);
  }
  
  public static void squareN(int[] paramArrayOfInt1, int paramInt, int[] paramArrayOfInt2) {
    int[] arrayOfInt = Nat128.createExt();
    Nat128.square(paramArrayOfInt1, arrayOfInt);
    reduce(arrayOfInt, paramArrayOfInt2);
    while (--paramInt > 0) {
      Nat128.square(paramArrayOfInt2, arrayOfInt);
      reduce(arrayOfInt, paramArrayOfInt2);
    } 
  }
  
  public static void subtract(int[] paramArrayOfInt1, int[] paramArrayOfInt2, int[] paramArrayOfInt3) {
    int i = Nat128.sub(paramArrayOfInt1, paramArrayOfInt2, paramArrayOfInt3);
    if (i != 0)
      subPInvFrom(paramArrayOfInt3); 
  }
  
  public static void subtractExt(int[] paramArrayOfInt1, int[] paramArrayOfInt2, int[] paramArrayOfInt3) {
    int i = Nat.sub(10, paramArrayOfInt1, paramArrayOfInt2, paramArrayOfInt3);
    if (i != 0)
      Nat.subFrom(PExtInv.length, PExtInv, paramArrayOfInt3); 
  }
  
  public static void twice(int[] paramArrayOfInt1, int[] paramArrayOfInt2) {
    int i = Nat.shiftUpBit(4, paramArrayOfInt1, 0, paramArrayOfInt2);
    if (i != 0 || (paramArrayOfInt2[3] >>> 1 >= 2147483646 && Nat128.gte(paramArrayOfInt2, P)))
      addPInvTo(paramArrayOfInt2); 
  }
  
  private static void addPInvTo(int[] paramArrayOfInt) {
    long l = (paramArrayOfInt[0] & 0xFFFFFFFFL) + 1L;
    paramArrayOfInt[0] = (int)l;
    l >>= 32;
    if (l != 0L) {
      l += (paramArrayOfInt[1] & 0xFFFFFFFFL);
      paramArrayOfInt[1] = (int)l;
      l >>= 32;
      l += (paramArrayOfInt[2] & 0xFFFFFFFFL);
      paramArrayOfInt[2] = (int)l;
      l >>= 32;
    } 
    l += (paramArrayOfInt[3] & 0xFFFFFFFFL) + 2L;
    paramArrayOfInt[3] = (int)l;
  }
  
  private static void subPInvFrom(int[] paramArrayOfInt) {
    long l = (paramArrayOfInt[0] & 0xFFFFFFFFL) - 1L;
    paramArrayOfInt[0] = (int)l;
    l >>= 32;
    if (l != 0L) {
      l += (paramArrayOfInt[1] & 0xFFFFFFFFL);
      paramArrayOfInt[1] = (int)l;
      l >>= 32;
      l += (paramArrayOfInt[2] & 0xFFFFFFFFL);
      paramArrayOfInt[2] = (int)l;
      l >>= 32;
    } 
    l += (paramArrayOfInt[3] & 0xFFFFFFFFL) - 2L;
    paramArrayOfInt[3] = (int)l;
  }
}
