package org.bouncycastle.operator.jcajce;

import java.security.GeneralSecurityException;
import java.security.Provider;
import java.security.PublicKey;
import java.security.Signature;
import java.security.cert.CertificateEncodingException;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.util.List;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.x509.AlgorithmIdentifier;
import org.bouncycastle.asn1.x509.SubjectPublicKeyInfo;
import org.bouncycastle.cert.X509CertificateHolder;
import org.bouncycastle.cert.jcajce.JcaX509CertificateHolder;
import org.bouncycastle.jcajce.CompositePublicKey;
import org.bouncycastle.jcajce.util.DefaultJcaJceHelper;
import org.bouncycastle.jcajce.util.NamedJcaJceHelper;
import org.bouncycastle.jcajce.util.ProviderJcaJceHelper;
import org.bouncycastle.operator.ContentVerifier;
import org.bouncycastle.operator.ContentVerifierProvider;
import org.bouncycastle.operator.OperatorCreationException;

public class JcaContentVerifierProviderBuilder {
  private OperatorHelper helper = new OperatorHelper(new DefaultJcaJceHelper());
  
  public JcaContentVerifierProviderBuilder setProvider(Provider paramProvider) {
    this.helper = new OperatorHelper(new ProviderJcaJceHelper(paramProvider));
    return this;
  }
  
  public JcaContentVerifierProviderBuilder setProvider(String paramString) {
    this.helper = new OperatorHelper(new NamedJcaJceHelper(paramString));
    return this;
  }
  
  public ContentVerifierProvider build(X509CertificateHolder paramX509CertificateHolder) throws OperatorCreationException, CertificateException { return build(this.helper.convertCertificate(paramX509CertificateHolder)); }
  
  public ContentVerifierProvider build(X509Certificate paramX509Certificate) throws OperatorCreationException {
    JcaX509CertificateHolder jcaX509CertificateHolder;
    try {
      jcaX509CertificateHolder = new JcaX509CertificateHolder(paramX509Certificate);
    } catch (CertificateEncodingException certificateEncodingException) {
      throw new OperatorCreationException("cannot process certificate: " + certificateEncodingException.getMessage(), certificateEncodingException);
    } 
    return new Object(this, jcaX509CertificateHolder, paramX509Certificate);
  }
  
  public ContentVerifierProvider build(PublicKey paramPublicKey) throws OperatorCreationException { return new Object(this, paramPublicKey); }
  
  public ContentVerifierProvider build(SubjectPublicKeyInfo paramSubjectPublicKeyInfo) throws OperatorCreationException { return build(this.helper.convertPublicKey(paramSubjectPublicKeyInfo)); }
  
  private ContentVerifier createCompositeVerifier(AlgorithmIdentifier paramAlgorithmIdentifier, PublicKey paramPublicKey) throws OperatorCreationException {
    if (paramPublicKey instanceof CompositePublicKey) {
      List list = ((CompositePublicKey)paramPublicKey).getPublicKeys();
      ASN1Sequence aSN1Sequence1 = ASN1Sequence.getInstance(paramAlgorithmIdentifier.getParameters());
      Signature[] arrayOfSignature1 = new Signature[aSN1Sequence1.size()];
      for (byte b1 = 0; b1 != aSN1Sequence1.size(); b1++) {
        AlgorithmIdentifier algorithmIdentifier = AlgorithmIdentifier.getInstance(aSN1Sequence1.getObjectAt(b1));
        if (list.get(b1) != null) {
          arrayOfSignature1[b1] = createSignature(algorithmIdentifier, (PublicKey)list.get(b1));
        } else {
          arrayOfSignature1[b1] = null;
        } 
      } 
      return new CompositeVerifier(this, arrayOfSignature1);
    } 
    ASN1Sequence aSN1Sequence = ASN1Sequence.getInstance(paramAlgorithmIdentifier.getParameters());
    Signature[] arrayOfSignature = new Signature[aSN1Sequence.size()];
    for (byte b = 0; b != aSN1Sequence.size(); b++) {
      AlgorithmIdentifier algorithmIdentifier = AlgorithmIdentifier.getInstance(aSN1Sequence.getObjectAt(b));
      try {
        arrayOfSignature[b] = createSignature(algorithmIdentifier, paramPublicKey);
      } catch (Exception exception) {
        arrayOfSignature[b] = null;
      } 
    } 
    return new CompositeVerifier(this, arrayOfSignature);
  }
  
  private Signature createSignature(AlgorithmIdentifier paramAlgorithmIdentifier, PublicKey paramPublicKey) throws OperatorCreationException {
    try {
      Signature signature = this.helper.createSignature(paramAlgorithmIdentifier);
      signature.initVerify(paramPublicKey);
      return signature;
    } catch (GeneralSecurityException generalSecurityException) {
      throw new OperatorCreationException("exception on setup: " + generalSecurityException, generalSecurityException);
    } 
  }
  
  private Signature createRawSig(AlgorithmIdentifier paramAlgorithmIdentifier, PublicKey paramPublicKey) throws OperatorCreationException {
    Signature signature;
    try {
      signature = this.helper.createRawSignature(paramAlgorithmIdentifier);
      if (signature != null)
        signature.initVerify(paramPublicKey); 
    } catch (Exception exception) {
      signature = null;
    } 
    return signature;
  }
}
