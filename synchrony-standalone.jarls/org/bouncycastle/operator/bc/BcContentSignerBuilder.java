package org.bouncycastle.operator.bc;

import java.security.SecureRandom;
import org.bouncycastle.asn1.x509.AlgorithmIdentifier;
import org.bouncycastle.crypto.Signer;
import org.bouncycastle.crypto.params.AsymmetricKeyParameter;
import org.bouncycastle.crypto.params.ParametersWithRandom;
import org.bouncycastle.operator.ContentSigner;
import org.bouncycastle.operator.OperatorCreationException;

public abstract class BcContentSignerBuilder {
  private SecureRandom random;
  
  private AlgorithmIdentifier sigAlgId;
  
  private AlgorithmIdentifier digAlgId;
  
  protected BcDigestProvider digestProvider;
  
  public BcContentSignerBuilder(AlgorithmIdentifier paramAlgorithmIdentifier1, AlgorithmIdentifier paramAlgorithmIdentifier2) {
    this.sigAlgId = paramAlgorithmIdentifier1;
    this.digAlgId = paramAlgorithmIdentifier2;
    this.digestProvider = BcDefaultDigestProvider.INSTANCE;
  }
  
  public BcContentSignerBuilder setSecureRandom(SecureRandom paramSecureRandom) {
    this.random = paramSecureRandom;
    return this;
  }
  
  public ContentSigner build(AsymmetricKeyParameter paramAsymmetricKeyParameter) throws OperatorCreationException {
    Signer signer = createSigner(this.sigAlgId, this.digAlgId);
    if (this.random != null) {
      signer.init(true, new ParametersWithRandom(paramAsymmetricKeyParameter, this.random));
    } else {
      signer.init(true, paramAsymmetricKeyParameter);
    } 
    return new Object(this, signer);
  }
  
  protected abstract Signer createSigner(AlgorithmIdentifier paramAlgorithmIdentifier1, AlgorithmIdentifier paramAlgorithmIdentifier2) throws OperatorCreationException;
}
