package org.bouncycastle.operator.bc;

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import org.bouncycastle.asn1.cryptopro.CryptoProObjectIdentifiers;
import org.bouncycastle.asn1.nist.NISTObjectIdentifiers;
import org.bouncycastle.asn1.oiw.OIWObjectIdentifiers;
import org.bouncycastle.asn1.pkcs.PKCSObjectIdentifiers;
import org.bouncycastle.asn1.rosstandart.RosstandartObjectIdentifiers;
import org.bouncycastle.asn1.teletrust.TeleTrusTObjectIdentifiers;
import org.bouncycastle.asn1.x509.AlgorithmIdentifier;
import org.bouncycastle.crypto.ExtendedDigest;
import org.bouncycastle.operator.OperatorCreationException;

public class BcDefaultDigestProvider implements BcDigestProvider {
  private static final Map lookup = createTable();
  
  public static final BcDigestProvider INSTANCE = new BcDefaultDigestProvider();
  
  private static Map createTable() {
    HashMap hashMap = new HashMap();
    hashMap.put(OIWObjectIdentifiers.idSHA1, new Object());
    hashMap.put(NISTObjectIdentifiers.id_sha224, new Object());
    hashMap.put(NISTObjectIdentifiers.id_sha256, new Object());
    hashMap.put(NISTObjectIdentifiers.id_sha384, new Object());
    hashMap.put(NISTObjectIdentifiers.id_sha512, new Object());
    hashMap.put(NISTObjectIdentifiers.id_sha3_224, new Object());
    hashMap.put(NISTObjectIdentifiers.id_sha3_256, new Object());
    hashMap.put(NISTObjectIdentifiers.id_sha3_384, new Object());
    hashMap.put(NISTObjectIdentifiers.id_sha3_512, new Object());
    hashMap.put(PKCSObjectIdentifiers.md5, new Object());
    hashMap.put(PKCSObjectIdentifiers.md4, new Object());
    hashMap.put(PKCSObjectIdentifiers.md2, new Object());
    hashMap.put(CryptoProObjectIdentifiers.gostR3411, new Object());
    hashMap.put(RosstandartObjectIdentifiers.id_tc26_gost_3411_12_256, new Object());
    hashMap.put(RosstandartObjectIdentifiers.id_tc26_gost_3411_12_512, new Object());
    hashMap.put(TeleTrusTObjectIdentifiers.ripemd128, new Object());
    hashMap.put(TeleTrusTObjectIdentifiers.ripemd160, new Object());
    hashMap.put(TeleTrusTObjectIdentifiers.ripemd256, new Object());
    return Collections.unmodifiableMap(hashMap);
  }
  
  public ExtendedDigest get(AlgorithmIdentifier paramAlgorithmIdentifier) throws OperatorCreationException {
    BcDigestProvider bcDigestProvider = (BcDigestProvider)lookup.get(paramAlgorithmIdentifier.getAlgorithm());
    if (bcDigestProvider == null)
      throw new OperatorCreationException("cannot recognise digest"); 
    return bcDigestProvider.get(paramAlgorithmIdentifier);
  }
}
