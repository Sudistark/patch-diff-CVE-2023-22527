package org.bouncycastle.pkcs.jcajce;

import java.security.Provider;
import org.bouncycastle.asn1.ASN1Encodable;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.x509.AlgorithmIdentifier;
import org.bouncycastle.jcajce.util.DefaultJcaJceHelper;
import org.bouncycastle.jcajce.util.JcaJceHelper;
import org.bouncycastle.jcajce.util.NamedJcaJceHelper;
import org.bouncycastle.jcajce.util.ProviderJcaJceHelper;
import org.bouncycastle.operator.DefaultSecretKeySizeProvider;
import org.bouncycastle.operator.InputDecryptorProvider;
import org.bouncycastle.operator.SecretKeySizeProvider;

public class JcePKCSPBEInputDecryptorProviderBuilder {
  private JcaJceHelper helper = new DefaultJcaJceHelper();
  
  private boolean wrongPKCS12Zero = false;
  
  private SecretKeySizeProvider keySizeProvider = DefaultSecretKeySizeProvider.INSTANCE;
  
  public JcePKCSPBEInputDecryptorProviderBuilder setProvider(Provider paramProvider) {
    this.helper = new ProviderJcaJceHelper(paramProvider);
    return this;
  }
  
  public JcePKCSPBEInputDecryptorProviderBuilder setProvider(String paramString) {
    this.helper = new NamedJcaJceHelper(paramString);
    return this;
  }
  
  public JcePKCSPBEInputDecryptorProviderBuilder setTryWrongPKCS12Zero(boolean paramBoolean) {
    this.wrongPKCS12Zero = paramBoolean;
    return this;
  }
  
  public JcePKCSPBEInputDecryptorProviderBuilder setKeySizeProvider(SecretKeySizeProvider paramSecretKeySizeProvider) {
    this.keySizeProvider = paramSecretKeySizeProvider;
    return this;
  }
  
  public InputDecryptorProvider build(char[] paramArrayOfChar) { return new Object(this, paramArrayOfChar); }
  
  private boolean isCCMorGCM(ASN1Encodable paramASN1Encodable) {
    AlgorithmIdentifier algorithmIdentifier = AlgorithmIdentifier.getInstance(paramASN1Encodable);
    ASN1Encodable aSN1Encodable = algorithmIdentifier.getParameters();
    if (aSN1Encodable instanceof ASN1Sequence) {
      ASN1Sequence aSN1Sequence = ASN1Sequence.getInstance(aSN1Encodable);
      if (aSN1Sequence.size() == 2)
        return aSN1Sequence.getObjectAt(1) instanceof org.bouncycastle.asn1.ASN1Integer; 
    } 
    return false;
  }
}
