package org.bouncycastle.pqc.crypto.newhope;

import java.io.IOException;
import java.security.SecureRandom;
import org.bouncycastle.asn1.x509.AlgorithmIdentifier;
import org.bouncycastle.asn1.x509.SubjectPublicKeyInfo;
import org.bouncycastle.crypto.util.DEROtherInfo;
import org.bouncycastle.pqc.asn1.PQCObjectIdentifiers;

public class NHOtherInfoGenerator {
  protected final DEROtherInfo.Builder otherInfoBuilder;
  
  protected final SecureRandom random;
  
  protected boolean used = false;
  
  public NHOtherInfoGenerator(AlgorithmIdentifier paramAlgorithmIdentifier, byte[] paramArrayOfByte1, byte[] paramArrayOfByte2, SecureRandom paramSecureRandom) {
    this.otherInfoBuilder = new DEROtherInfo.Builder(paramAlgorithmIdentifier, paramArrayOfByte1, paramArrayOfByte2);
    this.random = paramSecureRandom;
  }
  
  private static byte[] getEncoded(NHPublicKeyParameters paramNHPublicKeyParameters) {
    try {
      AlgorithmIdentifier algorithmIdentifier = new AlgorithmIdentifier(PQCObjectIdentifiers.newHope);
      SubjectPublicKeyInfo subjectPublicKeyInfo = new SubjectPublicKeyInfo(algorithmIdentifier, paramNHPublicKeyParameters.getPubData());
      return subjectPublicKeyInfo.getEncoded();
    } catch (IOException iOException) {
      return null;
    } 
  }
  
  private static NHPublicKeyParameters getPublicKey(byte[] paramArrayOfByte) {
    SubjectPublicKeyInfo subjectPublicKeyInfo = SubjectPublicKeyInfo.getInstance(paramArrayOfByte);
    return new NHPublicKeyParameters(subjectPublicKeyInfo.getPublicKeyData().getOctets());
  }
}
