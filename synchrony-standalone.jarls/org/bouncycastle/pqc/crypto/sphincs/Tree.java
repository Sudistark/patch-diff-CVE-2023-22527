package org.bouncycastle.pqc.crypto.sphincs;

class Tree {
  static void l_tree(HashFunctions paramHashFunctions, byte[] paramArrayOfByte1, int paramInt1, byte[] paramArrayOfByte2, int paramInt2, byte[] paramArrayOfByte3, int paramInt3) {
    byte b1 = 67;
    byte b3 = 0;
    for (byte b2 = 0; b2 < 7; b2++) {
      for (b3 = 0; b3 < b1 >>> 1; b3++)
        paramHashFunctions.hash_2n_n_mask(paramArrayOfByte2, paramInt2 + b3 * 32, paramArrayOfByte2, paramInt2 + b3 * 2 * 32, paramArrayOfByte3, paramInt3 + b2 * 2 * 32); 
      if ((b1 & true) != 0) {
        System.arraycopy(paramArrayOfByte2, paramInt2 + (b1 - 1) * 32, paramArrayOfByte2, paramInt2 + (b1 >>> 1) * 32, 32);
        b1 = (b1 >>> 1) + 1;
      } else {
        b1 >>>= 1;
      } 
    } 
    System.arraycopy(paramArrayOfByte2, paramInt2, paramArrayOfByte1, paramInt1, 32);
  }
  
  static void treehash(HashFunctions paramHashFunctions, byte[] paramArrayOfByte1, int paramInt1, int paramInt2, byte[] paramArrayOfByte2, leafaddr paramleafaddr, byte[] paramArrayOfByte3, int paramInt3) {
    leafaddr leafaddr1 = new leafaddr(paramleafaddr);
    byte[] arrayOfByte = new byte[(paramInt2 + 1) * 32];
    int[] arrayOfInt = new int[paramInt2 + 1];
    byte b = 0;
    int i = (int)(leafaddr1.subleaf + (1 << paramInt2));
    while (leafaddr1.subleaf < i) {
      gen_leaf_wots(paramHashFunctions, arrayOfByte, b * 32, paramArrayOfByte3, paramInt3, paramArrayOfByte2, leafaddr1);
      arrayOfInt[b] = 0;
      while (++b > 1 && arrayOfInt[b - 1] == arrayOfInt[b - 2]) {
        int k = 2 * (arrayOfInt[b - 1] + 7) * 32;
        paramHashFunctions.hash_2n_n_mask(arrayOfByte, (b - 2) * 32, arrayOfByte, (b - 2) * 32, paramArrayOfByte3, paramInt3 + k);
        arrayOfInt[b - 2] = arrayOfInt[b - 2] + 1;
        b--;
      } 
      leafaddr1.subleaf++;
    } 
    for (int j = 0; j < 32; j++)
      paramArrayOfByte1[paramInt1 + j] = arrayOfByte[j]; 
  }
  
  static void gen_leaf_wots(HashFunctions paramHashFunctions, byte[] paramArrayOfByte1, int paramInt1, byte[] paramArrayOfByte2, int paramInt2, byte[] paramArrayOfByte3, leafaddr paramleafaddr) {
    byte[] arrayOfByte1 = new byte[32];
    byte[] arrayOfByte2 = new byte[2144];
    Wots wots = new Wots();
    Seed.get_seed(paramHashFunctions, arrayOfByte1, 0, paramArrayOfByte3, paramleafaddr);
    wots.wots_pkgen(paramHashFunctions, arrayOfByte2, 0, arrayOfByte1, 0, paramArrayOfByte2, paramInt2);
    l_tree(paramHashFunctions, paramArrayOfByte1, paramInt1, arrayOfByte2, 0, paramArrayOfByte2, paramInt2);
  }
}
