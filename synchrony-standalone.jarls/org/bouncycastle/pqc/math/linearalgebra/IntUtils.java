package org.bouncycastle.pqc.math.linearalgebra;

public final class IntUtils {
  public static boolean equals(int[] paramArrayOfInt1, int[] paramArrayOfInt2) {
    if (paramArrayOfInt1.length != paramArrayOfInt2.length)
      return false; 
    boolean bool = true;
    for (int i = paramArrayOfInt1.length - 1; i >= 0; i--)
      bool &= ((paramArrayOfInt1[i] == paramArrayOfInt2[i]) ? 1 : 0); 
    return bool;
  }
  
  public static int[] clone(int[] paramArrayOfInt) {
    int[] arrayOfInt = new int[paramArrayOfInt.length];
    System.arraycopy(paramArrayOfInt, 0, arrayOfInt, 0, paramArrayOfInt.length);
    return arrayOfInt;
  }
  
  public static void fill(int[] paramArrayOfInt, int paramInt) {
    for (int i = paramArrayOfInt.length - 1; i >= 0; i--)
      paramArrayOfInt[i] = paramInt; 
  }
  
  public static void quicksort(int[] paramArrayOfInt) { quicksort(paramArrayOfInt, 0, paramArrayOfInt.length - 1); }
  
  public static void quicksort(int[] paramArrayOfInt, int paramInt1, int paramInt2) {
    if (paramInt2 > paramInt1) {
      int i = partition(paramArrayOfInt, paramInt1, paramInt2, paramInt2);
      quicksort(paramArrayOfInt, paramInt1, i - 1);
      quicksort(paramArrayOfInt, i + 1, paramInt2);
    } 
  }
  
  private static int partition(int[] paramArrayOfInt, int paramInt1, int paramInt2, int paramInt3) {
    int i = paramArrayOfInt[paramInt3];
    paramArrayOfInt[paramInt3] = paramArrayOfInt[paramInt2];
    paramArrayOfInt[paramInt2] = i;
    int j = paramInt1;
    int k;
    for (k = paramInt1; k < paramInt2; k++) {
      if (paramArrayOfInt[k] <= i) {
        int m = paramArrayOfInt[j];
        paramArrayOfInt[j] = paramArrayOfInt[k];
        paramArrayOfInt[k] = m;
        j++;
      } 
    } 
    k = paramArrayOfInt[j];
    paramArrayOfInt[j] = paramArrayOfInt[paramInt2];
    paramArrayOfInt[paramInt2] = k;
    return j;
  }
  
  public static int[] subArray(int[] paramArrayOfInt, int paramInt1, int paramInt2) {
    int[] arrayOfInt = new int[paramInt2 - paramInt1];
    System.arraycopy(paramArrayOfInt, paramInt1, arrayOfInt, 0, paramInt2 - paramInt1);
    return arrayOfInt;
  }
  
  public static String toString(int[] paramArrayOfInt) {
    String str = "";
    for (byte b = 0; b < paramArrayOfInt.length; b++)
      str = str + paramArrayOfInt[b] + " "; 
    return str;
  }
  
  public static String toHexString(int[] paramArrayOfInt) { return ByteUtils.toHexString(BigEndianConversions.toByteArray(paramArrayOfInt)); }
}
