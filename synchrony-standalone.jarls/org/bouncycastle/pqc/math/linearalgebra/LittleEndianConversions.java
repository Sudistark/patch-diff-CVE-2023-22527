package org.bouncycastle.pqc.math.linearalgebra;

public final class LittleEndianConversions {
  public static int OS2IP(byte[] paramArrayOfByte) { return paramArrayOfByte[0] & 0xFF | (paramArrayOfByte[1] & 0xFF) << 8 | (paramArrayOfByte[2] & 0xFF) << 16 | (paramArrayOfByte[3] & 0xFF) << 24; }
  
  public static int OS2IP(byte[] paramArrayOfByte, int paramInt) {
    null = paramArrayOfByte[paramInt++] & 0xFF;
    null |= (paramArrayOfByte[paramInt++] & 0xFF) << 8;
    null |= (paramArrayOfByte[paramInt++] & 0xFF) << 16;
    return (paramArrayOfByte[paramInt] & 0xFF) << 24;
  }
  
  public static int OS2IP(byte[] paramArrayOfByte, int paramInt1, int paramInt2) {
    byte b = 0;
    for (int i = paramInt2 - 1; i >= 0; i--)
      b |= (paramArrayOfByte[paramInt1 + i] & 0xFF) << 8 * i; 
    return b;
  }
  
  public static long OS2LIP(byte[] paramArrayOfByte, int paramInt) {
    null = (paramArrayOfByte[paramInt++] & 0xFF);
    null |= ((paramArrayOfByte[paramInt++] & 0xFF) << 8);
    null |= ((paramArrayOfByte[paramInt++] & 0xFF) << 16);
    null |= (paramArrayOfByte[paramInt++] & 0xFFL) << 24;
    null |= (paramArrayOfByte[paramInt++] & 0xFFL) << 32;
    null |= (paramArrayOfByte[paramInt++] & 0xFFL) << 40;
    null |= (paramArrayOfByte[paramInt++] & 0xFFL) << 48;
    return (paramArrayOfByte[paramInt++] & 0xFFL) << 56;
  }
  
  public static byte[] I2OSP(int paramInt) {
    byte[] arrayOfByte = new byte[4];
    arrayOfByte[0] = (byte)paramInt;
    arrayOfByte[1] = (byte)(paramInt >>> 8);
    arrayOfByte[2] = (byte)(paramInt >>> 16);
    arrayOfByte[3] = (byte)(paramInt >>> 24);
    return arrayOfByte;
  }
  
  public static void I2OSP(int paramInt1, byte[] paramArrayOfByte, int paramInt2) {
    paramArrayOfByte[paramInt2++] = (byte)paramInt1;
    paramArrayOfByte[paramInt2++] = (byte)(paramInt1 >>> 8);
    paramArrayOfByte[paramInt2++] = (byte)(paramInt1 >>> 16);
    paramArrayOfByte[paramInt2++] = (byte)(paramInt1 >>> 24);
  }
  
  public static void I2OSP(int paramInt1, byte[] paramArrayOfByte, int paramInt2, int paramInt3) {
    for (int i = paramInt3 - 1; i >= 0; i--)
      paramArrayOfByte[paramInt2 + i] = (byte)(paramInt1 >>> 8 * i); 
  }
  
  public static byte[] I2OSP(long paramLong) {
    byte[] arrayOfByte = new byte[8];
    arrayOfByte[0] = (byte)(int)paramLong;
    arrayOfByte[1] = (byte)(int)(paramLong >>> 8);
    arrayOfByte[2] = (byte)(int)(paramLong >>> 16);
    arrayOfByte[3] = (byte)(int)(paramLong >>> 24);
    arrayOfByte[4] = (byte)(int)(paramLong >>> 32);
    arrayOfByte[5] = (byte)(int)(paramLong >>> 40);
    arrayOfByte[6] = (byte)(int)(paramLong >>> 48);
    arrayOfByte[7] = (byte)(int)(paramLong >>> 56);
    return arrayOfByte;
  }
  
  public static void I2OSP(long paramLong, byte[] paramArrayOfByte, int paramInt) {
    paramArrayOfByte[paramInt++] = (byte)(int)paramLong;
    paramArrayOfByte[paramInt++] = (byte)(int)(paramLong >>> 8);
    paramArrayOfByte[paramInt++] = (byte)(int)(paramLong >>> 16);
    paramArrayOfByte[paramInt++] = (byte)(int)(paramLong >>> 24);
    paramArrayOfByte[paramInt++] = (byte)(int)(paramLong >>> 32);
    paramArrayOfByte[paramInt++] = (byte)(int)(paramLong >>> 40);
    paramArrayOfByte[paramInt++] = (byte)(int)(paramLong >>> 48);
    paramArrayOfByte[paramInt] = (byte)(int)(paramLong >>> 56);
  }
  
  public static byte[] toByteArray(int[] paramArrayOfInt, int paramInt) {
    int i = paramArrayOfInt.length;
    byte[] arrayOfByte = new byte[paramInt];
    int j = 0;
    byte b = 0;
    while (b <= i - 2) {
      I2OSP(paramArrayOfInt[b], arrayOfByte, j);
      b++;
      j += 4;
    } 
    I2OSP(paramArrayOfInt[i - 1], arrayOfByte, j, paramInt - j);
    return arrayOfByte;
  }
  
  public static int[] toIntArray(byte[] paramArrayOfByte) {
    int i = (paramArrayOfByte.length + 3) / 4;
    int j = paramArrayOfByte.length & 0x3;
    int[] arrayOfInt = new int[i];
    byte b1 = 0;
    byte b2 = 0;
    while (b2 <= i - 2) {
      arrayOfInt[b2] = OS2IP(paramArrayOfByte, b1);
      b2++;
      b1 += 4;
    } 
    if (j != 0) {
      arrayOfInt[i - 1] = OS2IP(paramArrayOfByte, b1, j);
    } else {
      arrayOfInt[i - 1] = OS2IP(paramArrayOfByte, b1);
    } 
    return arrayOfInt;
  }
}
