package org.bouncycastle.pqc.math.linearalgebra;

public final class CharUtils {
  public static char[] clone(char[] paramArrayOfChar) {
    char[] arrayOfChar = new char[paramArrayOfChar.length];
    System.arraycopy(paramArrayOfChar, 0, arrayOfChar, 0, paramArrayOfChar.length);
    return arrayOfChar;
  }
  
  public static byte[] toByteArray(char[] paramArrayOfChar) {
    byte[] arrayOfByte = new byte[paramArrayOfChar.length];
    for (int i = paramArrayOfChar.length - 1; i >= 0; i--)
      arrayOfByte[i] = (byte)paramArrayOfChar[i]; 
    return arrayOfByte;
  }
  
  public static byte[] toByteArrayForPBE(char[] paramArrayOfChar) {
    byte[] arrayOfByte1 = new byte[paramArrayOfChar.length];
    int i;
    for (i = 0; i < paramArrayOfChar.length; i++)
      arrayOfByte1[i] = (byte)paramArrayOfChar[i]; 
    i = arrayOfByte1.length * 2;
    byte[] arrayOfByte2 = new byte[i + 2];
    byte b1 = 0;
    for (byte b2 = 0; b2 < arrayOfByte1.length; b2++) {
      b1 = b2 * 2;
      arrayOfByte2[b1] = 0;
      arrayOfByte2[b1 + 1] = arrayOfByte1[b2];
    } 
    arrayOfByte2[i] = 0;
    arrayOfByte2[i + 1] = 0;
    return arrayOfByte2;
  }
  
  public static boolean equals(char[] paramArrayOfChar1, char[] paramArrayOfChar2) {
    if (paramArrayOfChar1.length != paramArrayOfChar2.length)
      return false; 
    boolean bool = true;
    for (int i = paramArrayOfChar1.length - 1; i >= 0; i--)
      bool &= ((paramArrayOfChar1[i] == paramArrayOfChar2[i]) ? 1 : 0); 
    return bool;
  }
}
