package org.bouncycastle.mime.smime;

import java.io.IOException;
import java.io.OutputStream;
import org.bouncycastle.cms.CMSEnvelopedDataStreamGenerator;
import org.bouncycastle.cms.CMSException;
import org.bouncycastle.mime.Headers;
import org.bouncycastle.mime.MimeIOException;
import org.bouncycastle.mime.MimeWriter;
import org.bouncycastle.mime.encoding.Base64OutputStream;
import org.bouncycastle.operator.OutputEncryptor;
import org.bouncycastle.util.Strings;

public class SMIMEEnvelopedWriter extends MimeWriter {
  private final CMSEnvelopedDataStreamGenerator envGen;
  
  private final OutputEncryptor outEnc;
  
  private final OutputStream mimeOut;
  
  private final String contentTransferEncoding;
  
  private SMIMEEnvelopedWriter(Builder paramBuilder, OutputEncryptor paramOutputEncryptor, OutputStream paramOutputStream) {
    super(new Headers(mapToLines(Builder.access$100(paramBuilder)), paramBuilder.contentTransferEncoding));
    this.envGen = Builder.access$200(paramBuilder);
    this.contentTransferEncoding = paramBuilder.contentTransferEncoding;
    this.outEnc = paramOutputEncryptor;
    this.mimeOut = paramOutputStream;
  }
  
  public OutputStream getContentStream() throws IOException {
    this.headers.dumpHeaders(this.mimeOut);
    this.mimeOut.write(Strings.toByteArray("\r\n"));
    try {
      Base64OutputStream base64OutputStream = this.mimeOut;
      if ("base64".equals(this.contentTransferEncoding))
        base64OutputStream = new Base64OutputStream(base64OutputStream); 
      OutputStream outputStream = this.envGen.open(SMimeUtils.createUnclosable(base64OutputStream), this.outEnc);
      return new ContentOutputStream(this, outputStream, base64OutputStream);
    } catch (CMSException cMSException) {
      throw new MimeIOException(cMSException.getMessage(), cMSException);
    } 
  }
}
