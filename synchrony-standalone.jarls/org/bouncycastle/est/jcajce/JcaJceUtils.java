package org.bouncycastle.est.jcajce;

import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.UnrecoverableKeyException;
import java.security.cert.CRL;
import java.security.cert.CertificateException;
import java.security.cert.TrustAnchor;
import java.security.cert.X509Certificate;
import java.util.Set;
import javax.net.ssl.KeyManagerFactory;
import javax.net.ssl.X509TrustManager;
import org.bouncycastle.asn1.x509.ExtendedKeyUsage;
import org.bouncycastle.asn1.x509.KeyPurposeId;
import org.bouncycastle.asn1.x509.KeyUsage;
import org.bouncycastle.cert.X509CertificateHolder;

public class JcaJceUtils {
  public static X509TrustManager getTrustAllTrustManager() { return new Object(); }
  
  public static X509TrustManager[] getCertPathTrustManager(Set<TrustAnchor> paramSet, CRL[] paramArrayOfCRL) {
    X509Certificate[] arrayOfX509Certificate = new X509Certificate[paramSet.size()];
    byte b = 0;
    for (TrustAnchor trustAnchor : paramSet)
      arrayOfX509Certificate[b++] = trustAnchor.getTrustedCert(); 
    return new X509TrustManager[] { new Object(paramSet, paramArrayOfCRL, arrayOfX509Certificate) };
  }
  
  public static void validateServerCertUsage(X509Certificate paramX509Certificate) throws CertificateException {
    try {
      X509CertificateHolder x509CertificateHolder = new X509CertificateHolder(paramX509Certificate.getEncoded());
      KeyUsage keyUsage = KeyUsage.fromExtensions(x509CertificateHolder.getExtensions());
      if (keyUsage != null) {
        if (keyUsage.hasUsages(4))
          throw new CertificateException("Key usage must not contain keyCertSign"); 
        if (!keyUsage.hasUsages(128) && !keyUsage.hasUsages(32))
          throw new CertificateException("Key usage must be none, digitalSignature or keyEncipherment"); 
      } 
      ExtendedKeyUsage extendedKeyUsage = ExtendedKeyUsage.fromExtensions(x509CertificateHolder.getExtensions());
      if (extendedKeyUsage != null && !extendedKeyUsage.hasKeyPurposeId(KeyPurposeId.id_kp_serverAuth) && !extendedKeyUsage.hasKeyPurposeId(KeyPurposeId.id_kp_msSGC) && !extendedKeyUsage.hasKeyPurposeId(KeyPurposeId.id_kp_nsSGC))
        throw new CertificateException("Certificate extended key usage must include serverAuth, msSGC or nsSGC"); 
    } catch (CertificateException certificateException) {
      throw certificateException;
    } catch (Exception exception) {
      throw new CertificateException(exception.getMessage(), exception);
    } 
  }
  
  public static KeyManagerFactory createKeyManagerFactory(String paramString1, String paramString2, KeyStore paramKeyStore, char[] paramArrayOfChar) throws UnrecoverableKeyException, NoSuchAlgorithmException, KeyStoreException, NoSuchProviderException {
    KeyManagerFactory keyManagerFactory = null;
    if (paramString1 == null && paramString2 == null) {
      keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
    } else if (paramString2 == null) {
      keyManagerFactory = KeyManagerFactory.getInstance(paramString1);
    } else {
      keyManagerFactory = KeyManagerFactory.getInstance(paramString1, paramString2);
    } 
    keyManagerFactory.init(paramKeyStore, paramArrayOfChar);
    return keyManagerFactory;
  }
}
