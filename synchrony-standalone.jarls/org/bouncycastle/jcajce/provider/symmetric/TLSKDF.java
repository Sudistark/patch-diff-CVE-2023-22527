package org.bouncycastle.jcajce.provider.symmetric;

import org.bouncycastle.crypto.Mac;
import org.bouncycastle.crypto.macs.HMac;
import org.bouncycastle.crypto.params.KeyParameter;
import org.bouncycastle.crypto.util.DigestFactory;
import org.bouncycastle.jcajce.spec.TLSKeyMaterialSpec;
import org.bouncycastle.util.Arrays;
import org.bouncycastle.util.Strings;

public class TLSKDF {
  private static byte[] PRF_legacy(TLSKeyMaterialSpec paramTLSKeyMaterialSpec) {
    HMac hMac1 = new HMac(DigestFactory.createMD5());
    HMac hMac2 = new HMac(DigestFactory.createSHA1());
    byte[] arrayOfByte1 = Strings.toByteArray(paramTLSKeyMaterialSpec.getLabel());
    byte[] arrayOfByte2 = Arrays.concatenate(arrayOfByte1, paramTLSKeyMaterialSpec.getSeed());
    byte[] arrayOfByte3 = paramTLSKeyMaterialSpec.getSecret();
    int i = (arrayOfByte3.length + 1) / 2;
    byte[] arrayOfByte4 = new byte[i];
    byte[] arrayOfByte5 = new byte[i];
    System.arraycopy(arrayOfByte3, 0, arrayOfByte4, 0, i);
    System.arraycopy(arrayOfByte3, arrayOfByte3.length - i, arrayOfByte5, 0, i);
    int j = paramTLSKeyMaterialSpec.getLength();
    byte[] arrayOfByte6 = new byte[j];
    byte[] arrayOfByte7 = new byte[j];
    hmac_hash(hMac1, arrayOfByte4, arrayOfByte2, arrayOfByte6);
    hmac_hash(hMac2, arrayOfByte5, arrayOfByte2, arrayOfByte7);
    for (byte b = 0; b < j; b++)
      arrayOfByte6[b] = (byte)(arrayOfByte6[b] ^ arrayOfByte7[b]); 
    return arrayOfByte6;
  }
  
  private static void hmac_hash(Mac paramMac, byte[] paramArrayOfByte1, byte[] paramArrayOfByte2, byte[] paramArrayOfByte3) {
    paramMac.init(new KeyParameter(paramArrayOfByte1));
    byte[] arrayOfByte1 = paramArrayOfByte2;
    int i = paramMac.getMacSize();
    int j = (paramArrayOfByte3.length + i - 1) / i;
    byte[] arrayOfByte2 = new byte[paramMac.getMacSize()];
    byte[] arrayOfByte3 = new byte[paramMac.getMacSize()];
    for (int k = 0; k < j; k++) {
      paramMac.update(arrayOfByte1, 0, arrayOfByte1.length);
      paramMac.doFinal(arrayOfByte2, 0);
      arrayOfByte1 = arrayOfByte2;
      paramMac.update(arrayOfByte1, 0, arrayOfByte1.length);
      paramMac.update(paramArrayOfByte2, 0, paramArrayOfByte2.length);
      paramMac.doFinal(arrayOfByte3, 0);
      System.arraycopy(arrayOfByte3, 0, paramArrayOfByte3, i * k, Math.min(i, paramArrayOfByte3.length - i * k));
    } 
  }
}
