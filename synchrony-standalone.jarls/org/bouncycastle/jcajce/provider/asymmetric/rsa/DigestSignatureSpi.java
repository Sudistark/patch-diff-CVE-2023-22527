package org.bouncycastle.jcajce.provider.asymmetric.rsa;

import java.io.IOException;
import java.security.AlgorithmParameters;
import java.security.InvalidKeyException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.SignatureException;
import java.security.SignatureSpi;
import java.security.interfaces.RSAPrivateKey;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.AlgorithmParameterSpec;
import org.bouncycastle.asn1.ASN1ObjectIdentifier;
import org.bouncycastle.asn1.DERNull;
import org.bouncycastle.asn1.x509.AlgorithmIdentifier;
import org.bouncycastle.asn1.x509.DigestInfo;
import org.bouncycastle.crypto.AsymmetricBlockCipher;
import org.bouncycastle.crypto.Digest;
import org.bouncycastle.crypto.params.RSAKeyParameters;
import org.bouncycastle.util.Arrays;

public class DigestSignatureSpi extends SignatureSpi {
  private Digest digest;
  
  private AsymmetricBlockCipher cipher;
  
  private AlgorithmIdentifier algId;
  
  protected DigestSignatureSpi(Digest paramDigest, AsymmetricBlockCipher paramAsymmetricBlockCipher) {
    this.digest = paramDigest;
    this.cipher = paramAsymmetricBlockCipher;
    this.algId = null;
  }
  
  protected DigestSignatureSpi(ASN1ObjectIdentifier paramASN1ObjectIdentifier, Digest paramDigest, AsymmetricBlockCipher paramAsymmetricBlockCipher) {
    this.digest = paramDigest;
    this.cipher = paramAsymmetricBlockCipher;
    this.algId = new AlgorithmIdentifier(paramASN1ObjectIdentifier, DERNull.INSTANCE);
  }
  
  protected void engineInitVerify(PublicKey paramPublicKey) throws InvalidKeyException {
    if (!(paramPublicKey instanceof RSAPublicKey))
      throw new InvalidKeyException("Supplied key (" + getType(paramPublicKey) + ") is not a RSAPublicKey instance"); 
    RSAKeyParameters rSAKeyParameters = RSAUtil.generatePublicKeyParameter((RSAPublicKey)paramPublicKey);
    this.digest.reset();
    this.cipher.init(false, rSAKeyParameters);
  }
  
  protected void engineInitSign(PrivateKey paramPrivateKey) throws InvalidKeyException {
    if (!(paramPrivateKey instanceof RSAPrivateKey))
      throw new InvalidKeyException("Supplied key (" + getType(paramPrivateKey) + ") is not a RSAPrivateKey instance"); 
    RSAKeyParameters rSAKeyParameters = RSAUtil.generatePrivateKeyParameter((RSAPrivateKey)paramPrivateKey);
    this.digest.reset();
    this.cipher.init(true, rSAKeyParameters);
  }
  
  private String getType(Object paramObject) { return (paramObject == null) ? null : paramObject.getClass().getName(); }
  
  protected void engineUpdate(byte paramByte) throws SignatureException { this.digest.update(paramByte); }
  
  protected void engineUpdate(byte[] paramArrayOfByte, int paramInt1, int paramInt2) throws SignatureException { this.digest.update(paramArrayOfByte, paramInt1, paramInt2); }
  
  protected byte[] engineSign() throws SignatureException {
    byte[] arrayOfByte = new byte[this.digest.getDigestSize()];
    this.digest.doFinal(arrayOfByte, 0);
    try {
      byte[] arrayOfByte1 = derEncode(arrayOfByte);
      return this.cipher.processBlock(arrayOfByte1, 0, arrayOfByte1.length);
    } catch (ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException) {
      throw new SignatureException("key too small for signature type");
    } catch (Exception exception) {
      throw new SignatureException(exception.toString());
    } 
  }
  
  protected boolean engineVerify(byte[] paramArrayOfByte) throws SignatureException {
    byte[] arrayOfByte3;
    byte[] arrayOfByte2;
    byte[] arrayOfByte1 = new byte[this.digest.getDigestSize()];
    this.digest.doFinal(arrayOfByte1, 0);
    try {
      arrayOfByte2 = this.cipher.processBlock(paramArrayOfByte, 0, paramArrayOfByte.length);
      arrayOfByte3 = derEncode(arrayOfByte1);
    } catch (Exception exception) {
      return false;
    } 
    if (arrayOfByte2.length == arrayOfByte3.length)
      return Arrays.constantTimeAreEqual(arrayOfByte2, arrayOfByte3); 
    if (arrayOfByte2.length == arrayOfByte3.length - 2) {
      arrayOfByte3[1] = (byte)(arrayOfByte3[1] - 2);
      arrayOfByte3[3] = (byte)(arrayOfByte3[3] - 2);
      byte b1 = 4 + arrayOfByte3[3];
      byte b2 = b1 + 2;
      byte b3 = 0;
      byte b4;
      for (b4 = 0; b4 < arrayOfByte3.length - b2; b4++)
        b3 |= arrayOfByte2[b1 + b4] ^ arrayOfByte3[b2 + b4]; 
      for (b4 = 0; b4 < b1; b4++)
        b3 |= arrayOfByte2[b4] ^ arrayOfByte3[b4]; 
      return (b3 == 0);
    } 
    Arrays.constantTimeAreEqual(arrayOfByte3, arrayOfByte3);
    return false;
  }
  
  protected void engineSetParameter(AlgorithmParameterSpec paramAlgorithmParameterSpec) { throw new UnsupportedOperationException("engineSetParameter unsupported"); }
  
  protected void engineSetParameter(String paramString, Object paramObject) { throw new UnsupportedOperationException("engineSetParameter unsupported"); }
  
  protected Object engineGetParameter(String paramString) { return null; }
  
  protected AlgorithmParameters engineGetParameters() { return null; }
  
  private byte[] derEncode(byte[] paramArrayOfByte) throws IOException {
    if (this.algId == null)
      return paramArrayOfByte; 
    DigestInfo digestInfo = new DigestInfo(this.algId, paramArrayOfByte);
    return digestInfo.getEncoded("DER");
  }
}
