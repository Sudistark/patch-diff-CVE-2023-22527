package org.bouncycastle.jcajce.spec;

import java.security.spec.EncodedKeySpec;
import org.bouncycastle.util.Arrays;
import org.bouncycastle.util.Strings;

public class OpenSSHPublicKeySpec extends EncodedKeySpec {
  private static final String[] allowedTypes = { "ssh-rsa", "ssh-ed25519", "ssh-dss" };
  
  private final String type;
  
  public OpenSSHPublicKeySpec(byte[] paramArrayOfByte) {
    super(paramArrayOfByte);
    byte b = 0;
    byte b1 = (paramArrayOfByte[b++] & 0xFF) << 24;
    b1 |= (paramArrayOfByte[b++] & 0xFF) << 16;
    b1 |= (paramArrayOfByte[b++] & 0xFF) << 8;
    b1 |= paramArrayOfByte[b++] & 0xFF;
    if (b + b1 >= paramArrayOfByte.length)
      throw new IllegalArgumentException("invalid public key blob: type field longer than blob"); 
    this.type = Strings.fromByteArray(Arrays.copyOfRange(paramArrayOfByte, b, b + b1));
    if (this.type.startsWith("ecdsa"))
      return; 
    for (byte b2 = 0; b2 < allowedTypes.length; b2++) {
      if (allowedTypes[b2].equals(this.type))
        return; 
    } 
    throw new IllegalArgumentException("unrecognised public key type " + this.type);
  }
  
  public String getFormat() { return "OpenSSH"; }
  
  public String getType() { return this.type; }
}
