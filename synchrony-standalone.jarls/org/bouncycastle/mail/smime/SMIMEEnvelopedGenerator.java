package org.bouncycastle.mail.smime;

import java.security.AccessController;
import javax.mail.MessagingException;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import org.bouncycastle.cms.CMSEnvelopedDataGenerator;
import org.bouncycastle.cms.RecipientInfoGenerator;
import org.bouncycastle.operator.OutputEncryptor;

public class SMIMEEnvelopedGenerator extends SMIMEGenerator {
  public static final String DES_EDE3_CBC = CMSEnvelopedDataGenerator.DES_EDE3_CBC;
  
  public static final String RC2_CBC = CMSEnvelopedDataGenerator.RC2_CBC;
  
  public static final String IDEA_CBC = "1.3.6.1.4.1.188.7.1.1.2";
  
  public static final String CAST5_CBC = "1.2.840.113533.7.66.10";
  
  public static final String AES128_CBC = CMSEnvelopedDataGenerator.AES128_CBC;
  
  public static final String AES192_CBC = CMSEnvelopedDataGenerator.AES192_CBC;
  
  public static final String AES256_CBC = CMSEnvelopedDataGenerator.AES256_CBC;
  
  public static final String CAMELLIA128_CBC = CMSEnvelopedDataGenerator.CAMELLIA128_CBC;
  
  public static final String CAMELLIA192_CBC = CMSEnvelopedDataGenerator.CAMELLIA192_CBC;
  
  public static final String CAMELLIA256_CBC = CMSEnvelopedDataGenerator.CAMELLIA256_CBC;
  
  public static final String SEED_CBC = CMSEnvelopedDataGenerator.SEED_CBC;
  
  public static final String DES_EDE3_WRAP = CMSEnvelopedDataGenerator.DES_EDE3_WRAP;
  
  public static final String AES128_WRAP = CMSEnvelopedDataGenerator.AES128_WRAP;
  
  public static final String AES256_WRAP = CMSEnvelopedDataGenerator.AES256_WRAP;
  
  public static final String CAMELLIA128_WRAP = CMSEnvelopedDataGenerator.CAMELLIA128_WRAP;
  
  public static final String CAMELLIA192_WRAP = CMSEnvelopedDataGenerator.CAMELLIA192_WRAP;
  
  public static final String CAMELLIA256_WRAP = CMSEnvelopedDataGenerator.CAMELLIA256_WRAP;
  
  public static final String SEED_WRAP = CMSEnvelopedDataGenerator.SEED_WRAP;
  
  public static final String ECDH_SHA1KDF = CMSEnvelopedDataGenerator.ECDH_SHA1KDF;
  
  private static final String ENCRYPTED_CONTENT_TYPE = "application/pkcs7-mime; name=\"smime.p7m\"; smime-type=enveloped-data";
  
  private EnvelopedGenerator fact = new EnvelopedGenerator(this, null);
  
  public void addRecipientInfoGenerator(RecipientInfoGenerator paramRecipientInfoGenerator) throws IllegalArgumentException { this.fact.addRecipientInfoGenerator(paramRecipientInfoGenerator); }
  
  public void setBerEncodeRecipients(boolean paramBoolean) { this.fact.setBEREncodeRecipients(paramBoolean); }
  
  private MimeBodyPart make(MimeBodyPart paramMimeBodyPart, OutputEncryptor paramOutputEncryptor) throws SMIMEException {
    try {
      MimeBodyPart mimeBodyPart = new MimeBodyPart();
      mimeBodyPart.setContent(new ContentEncryptor(this, paramMimeBodyPart, paramOutputEncryptor), "application/pkcs7-mime; name=\"smime.p7m\"; smime-type=enveloped-data");
      mimeBodyPart.addHeader("Content-Type", "application/pkcs7-mime; name=\"smime.p7m\"; smime-type=enveloped-data");
      mimeBodyPart.addHeader("Content-Disposition", "attachment; filename=\"smime.p7m\"");
      mimeBodyPart.addHeader("Content-Description", "S/MIME Encrypted Message");
      mimeBodyPart.addHeader("Content-Transfer-Encoding", this.encoding);
      return mimeBodyPart;
    } catch (MessagingException messagingException) {
      throw new SMIMEException("exception putting multi-part together.", messagingException);
    } 
  }
  
  public MimeBodyPart generate(MimeBodyPart paramMimeBodyPart, OutputEncryptor paramOutputEncryptor) throws SMIMEException { return make(makeContentBodyPart(paramMimeBodyPart), paramOutputEncryptor); }
  
  public MimeBodyPart generate(MimeMessage paramMimeMessage, OutputEncryptor paramOutputEncryptor) throws SMIMEException {
    try {
      paramMimeMessage.saveChanges();
    } catch (MessagingException messagingException) {
      throw new SMIMEException("unable to save message", messagingException);
    } 
    return make(makeContentBodyPart(paramMimeMessage), paramOutputEncryptor);
  }
  
  static  {
    AccessController.doPrivileged(new Object());
  }
}
