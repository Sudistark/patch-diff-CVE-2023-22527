package org.bouncycastle.mail.smime.validator;

import java.io.IOException;
import java.security.GeneralSecurityException;
import java.security.PublicKey;
import java.security.cert.CertPath;
import java.security.cert.CertStore;
import java.security.cert.CertStoreException;
import java.security.cert.CertificateEncodingException;
import java.security.cert.CertificateExpiredException;
import java.security.cert.CertificateFactory;
import java.security.cert.CertificateNotYetValidException;
import java.security.cert.PKIXParameters;
import java.security.cert.TrustAnchor;
import java.security.cert.X509CertSelector;
import java.security.cert.X509Certificate;
import java.security.interfaces.DSAPublicKey;
import java.security.interfaces.RSAPublicKey;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.mail.Address;
import javax.mail.MessagingException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import org.bouncycastle.asn1.ASN1InputStream;
import org.bouncycastle.asn1.ASN1OctetString;
import org.bouncycastle.asn1.ASN1Primitive;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.ASN1String;
import org.bouncycastle.asn1.ASN1TaggedObject;
import org.bouncycastle.asn1.DERIA5String;
import org.bouncycastle.asn1.DEROctetString;
import org.bouncycastle.asn1.cms.Attribute;
import org.bouncycastle.asn1.cms.AttributeTable;
import org.bouncycastle.asn1.cms.CMSAttributes;
import org.bouncycastle.asn1.cms.Time;
import org.bouncycastle.asn1.pkcs.PKCSObjectIdentifiers;
import org.bouncycastle.asn1.x500.AttributeTypeAndValue;
import org.bouncycastle.asn1.x500.RDN;
import org.bouncycastle.asn1.x509.AuthorityKeyIdentifier;
import org.bouncycastle.asn1.x509.ExtendedKeyUsage;
import org.bouncycastle.asn1.x509.Extension;
import org.bouncycastle.asn1.x509.KeyPurposeId;
import org.bouncycastle.asn1.x509.TBSCertificate;
import org.bouncycastle.cert.jcajce.JcaCertStoreBuilder;
import org.bouncycastle.cms.SignerInformation;
import org.bouncycastle.cms.SignerInformationStore;
import org.bouncycastle.cms.jcajce.JcaSimpleSignerInfoVerifierBuilder;
import org.bouncycastle.cms.jcajce.JcaX509CertSelectorConverter;
import org.bouncycastle.i18n.ErrorBundle;
import org.bouncycastle.i18n.filter.TrustedInput;
import org.bouncycastle.i18n.filter.UntrustedInput;
import org.bouncycastle.mail.smime.SMIMESigned;
import org.bouncycastle.util.Integers;
import org.bouncycastle.x509.CertPathReviewerException;
import org.bouncycastle.x509.PKIXCertPathReviewer;

public class SignedMailValidator {
  private static final String RESOURCE_NAME = "org.bouncycastle.mail.smime.validator.SignedMailValidatorMessages";
  
  private static final Class DEFAULT_CERT_PATH_REVIEWER = PKIXCertPathReviewer.class;
  
  private static final String EXT_KEY_USAGE = Extension.extendedKeyUsage.getId();
  
  private static final String SUBJECT_ALTERNATIVE_NAME = Extension.subjectAlternativeName.getId();
  
  private static final int shortKeyLength = 512;
  
  private static final long THIRTY_YEARS_IN_MILLI_SEC = 946728000000L;
  
  private static final JcaX509CertSelectorConverter selectorConverter = new JcaX509CertSelectorConverter();
  
  private CertStore certs;
  
  private SignerInformationStore signers;
  
  private Map results;
  
  private String[] fromAddresses;
  
  private Class certPathReviewerClass;
  
  public SignedMailValidator(MimeMessage paramMimeMessage, PKIXParameters paramPKIXParameters) throws SignedMailValidatorException { this(paramMimeMessage, paramPKIXParameters, DEFAULT_CERT_PATH_REVIEWER); }
  
  public SignedMailValidator(MimeMessage paramMimeMessage, PKIXParameters paramPKIXParameters, Class paramClass) throws SignedMailValidatorException {
    this.certPathReviewerClass = paramClass;
    boolean bool = DEFAULT_CERT_PATH_REVIEWER.isAssignableFrom(paramClass);
    if (!bool)
      throw new IllegalArgumentException("certPathReviewerClass is not a subclass of " + DEFAULT_CERT_PATH_REVIEWER.getName()); 
    try {
      SMIMESigned sMIMESigned;
      if (paramMimeMessage.isMimeType("multipart/signed")) {
        MimeMultipart mimeMultipart = (MimeMultipart)paramMimeMessage.getContent();
        sMIMESigned = new SMIMESigned(mimeMultipart);
      } else if (paramMimeMessage.isMimeType("application/pkcs7-mime") || paramMimeMessage.isMimeType("application/x-pkcs7-mime")) {
        sMIMESigned = new SMIMESigned(paramMimeMessage);
      } else {
        ErrorBundle errorBundle = new ErrorBundle("org.bouncycastle.mail.smime.validator.SignedMailValidatorMessages", "SignedMailValidator.noSignedMessage");
        throw new SignedMailValidatorException(errorBundle);
      } 
      this.certs = (new JcaCertStoreBuilder()).addCertificates(sMIMESigned.getCertificates()).addCRLs(sMIMESigned.getCRLs()).setProvider("BC").build();
      this.signers = sMIMESigned.getSignerInfos();
      Address[] arrayOfAddress = paramMimeMessage.getFrom();
      InternetAddress internetAddress = null;
      try {
        if (paramMimeMessage.getHeader("Sender") != null)
          internetAddress = new InternetAddress(paramMimeMessage.getHeader("Sender")[0]); 
      } catch (MessagingException messagingException) {}
      int i = (arrayOfAddress != null) ? arrayOfAddress.length : 0;
      this.fromAddresses = new String[i + ((internetAddress != null) ? 1 : 0)];
      for (byte b = 0; b < i; b++) {
        InternetAddress internetAddress1 = (InternetAddress)arrayOfAddress[b];
        this.fromAddresses[b] = internetAddress1.getAddress();
      } 
      if (internetAddress != null)
        this.fromAddresses[i] = internetAddress.getAddress(); 
      this.results = new HashMap();
    } catch (Exception exception) {
      if (exception instanceof SignedMailValidatorException)
        throw (SignedMailValidatorException)exception; 
      ErrorBundle errorBundle = new ErrorBundle("org.bouncycastle.mail.smime.validator.SignedMailValidatorMessages", "SignedMailValidator.exceptionReadingMessage", new Object[] { exception.getMessage(), exception, exception.getClass().getName() });
      throw new SignedMailValidatorException(errorBundle, exception);
    } 
    validateSignatures(paramPKIXParameters);
  }
  
  protected void validateSignatures(PKIXParameters paramPKIXParameters) {
    PKIXParameters pKIXParameters = (PKIXParameters)paramPKIXParameters.clone();
    pKIXParameters.addCertStore(this.certs);
    Collection collection = this.signers.getSigners();
    Iterator iterator = collection.iterator();
    while (iterator.hasNext()) {
      ArrayList arrayList1 = new ArrayList();
      ArrayList arrayList2 = new ArrayList();
      SignerInformation signerInformation = (SignerInformation)iterator.next();
      X509Certificate x509Certificate = null;
      try {
        List list = findCerts(pKIXParameters.getCertStores(), selectorConverter.getCertSelector(signerInformation.getSID()));
        Iterator iterator1 = list.iterator();
        if (iterator1.hasNext())
          x509Certificate = (X509Certificate)iterator1.next(); 
      } catch (CertStoreException certStoreException) {
        ErrorBundle errorBundle1 = new ErrorBundle("org.bouncycastle.mail.smime.validator.SignedMailValidatorMessages", "SignedMailValidator.exceptionRetrievingSignerCert", new Object[] { certStoreException.getMessage(), certStoreException, certStoreException.getClass().getName() });
        arrayList1.add(errorBundle1);
      } 
      if (x509Certificate != null) {
        boolean bool = false;
        try {
          bool = signerInformation.verify((new JcaSimpleSignerInfoVerifierBuilder()).setProvider("BC").build(x509Certificate.getPublicKey()));
          if (!bool) {
            ErrorBundle errorBundle1 = new ErrorBundle("org.bouncycastle.mail.smime.validator.SignedMailValidatorMessages", "SignedMailValidator.signatureNotVerified");
            arrayList1.add(errorBundle1);
          } 
        } catch (Exception exception) {
          ErrorBundle errorBundle1 = new ErrorBundle("org.bouncycastle.mail.smime.validator.SignedMailValidatorMessages", "SignedMailValidator.exceptionVerifyingSignature", new Object[] { exception.getMessage(), exception, exception.getClass().getName() });
          arrayList1.add(errorBundle1);
        } 
        checkSignerCert(x509Certificate, arrayList1, arrayList2);
        AttributeTable attributeTable = signerInformation.getSignedAttributes();
        if (attributeTable != null) {
          Attribute attribute = attributeTable.get(PKCSObjectIdentifiers.id_aa_receiptRequest);
          if (attribute != null) {
            ErrorBundle errorBundle1 = new ErrorBundle("org.bouncycastle.mail.smime.validator.SignedMailValidatorMessages", "SignedMailValidator.signedReceiptRequest");
            arrayList2.add(errorBundle1);
          } 
        } 
        Date date = getSignatureTime(signerInformation);
        if (date == null) {
          ErrorBundle errorBundle1 = new ErrorBundle("org.bouncycastle.mail.smime.validator.SignedMailValidatorMessages", "SignedMailValidator.noSigningTime");
          arrayList2.add(errorBundle1);
          date = paramPKIXParameters.getDate();
          if (date == null)
            date = new Date(); 
        } else {
          try {
            x509Certificate.checkValidity(date);
          } catch (CertificateExpiredException certificateExpiredException) {
            ErrorBundle errorBundle1 = new ErrorBundle("org.bouncycastle.mail.smime.validator.SignedMailValidatorMessages", "SignedMailValidator.certExpired", new Object[] { new TrustedInput(date), new TrustedInput(x509Certificate.getNotAfter()) });
            arrayList1.add(errorBundle1);
          } catch (CertificateNotYetValidException certificateNotYetValidException) {
            ErrorBundle errorBundle1 = new ErrorBundle("org.bouncycastle.mail.smime.validator.SignedMailValidatorMessages", "SignedMailValidator.certNotYetValid", new Object[] { new TrustedInput(date), new TrustedInput(x509Certificate.getNotBefore()) });
            arrayList1.add(errorBundle1);
          } 
        } 
        pKIXParameters.setDate(date);
        try {
          PKIXCertPathReviewer pKIXCertPathReviewer;
          ArrayList arrayList = new ArrayList();
          arrayList.add(this.certs);
          Object[] arrayOfObject = createCertPath(x509Certificate, pKIXParameters.getTrustAnchors(), paramPKIXParameters.getCertStores(), arrayList);
          CertPath certPath = (CertPath)arrayOfObject[0];
          List list = (List)arrayOfObject[1];
          try {
            pKIXCertPathReviewer = (PKIXCertPathReviewer)this.certPathReviewerClass.newInstance();
          } catch (IllegalAccessException illegalAccessException) {
            throw new IllegalArgumentException("Cannot instantiate object of type " + this.certPathReviewerClass.getName() + ": " + illegalAccessException.getMessage());
          } catch (InstantiationException instantiationException) {
            throw new IllegalArgumentException("Cannot instantiate object of type " + this.certPathReviewerClass.getName() + ": " + instantiationException.getMessage());
          } 
          pKIXCertPathReviewer.init(certPath, pKIXParameters);
          if (!pKIXCertPathReviewer.isValidCertPath()) {
            ErrorBundle errorBundle1 = new ErrorBundle("org.bouncycastle.mail.smime.validator.SignedMailValidatorMessages", "SignedMailValidator.certPathInvalid");
            arrayList1.add(errorBundle1);
          } 
          this.results.put(signerInformation, new ValidationResult(this, pKIXCertPathReviewer, bool, arrayList1, arrayList2, list));
          continue;
        } catch (GeneralSecurityException generalSecurityException) {
          ErrorBundle errorBundle1 = new ErrorBundle("org.bouncycastle.mail.smime.validator.SignedMailValidatorMessages", "SignedMailValidator.exceptionCreateCertPath", new Object[] { generalSecurityException.getMessage(), generalSecurityException, generalSecurityException.getClass().getName() });
          arrayList1.add(errorBundle1);
          this.results.put(signerInformation, new ValidationResult(this, null, bool, arrayList1, arrayList2, null));
          continue;
        } catch (CertPathReviewerException certPathReviewerException) {
          arrayList1.add(certPathReviewerException.getErrorMessage());
          this.results.put(signerInformation, new ValidationResult(this, null, bool, arrayList1, arrayList2, null));
          continue;
        } 
      } 
      ErrorBundle errorBundle = new ErrorBundle("org.bouncycastle.mail.smime.validator.SignedMailValidatorMessages", "SignedMailValidator.noSignerCert");
      arrayList1.add(errorBundle);
      this.results.put(signerInformation, new ValidationResult(this, null, false, arrayList1, arrayList2, null));
    } 
  }
  
  public static Set getEmailAddresses(X509Certificate paramX509Certificate) throws IOException, CertificateEncodingException {
    HashSet hashSet = new HashSet();
    TBSCertificate tBSCertificate = getTBSCert(paramX509Certificate);
    RDN[] arrayOfRDN = tBSCertificate.getSubject().getRDNs(PKCSObjectIdentifiers.pkcs_9_at_emailAddress);
    for (byte b = 0; b < arrayOfRDN.length; b++) {
      AttributeTypeAndValue[] arrayOfAttributeTypeAndValue = arrayOfRDN[b].getTypesAndValues();
      for (byte b1 = 0; b1 != arrayOfAttributeTypeAndValue.length; b1++) {
        if (arrayOfAttributeTypeAndValue[b1].getType().equals(PKCSObjectIdentifiers.pkcs_9_at_emailAddress)) {
          String str = ((ASN1String)arrayOfAttributeTypeAndValue[b1].getValue()).getString().toLowerCase();
          hashSet.add(str);
        } 
      } 
    } 
    byte[] arrayOfByte = paramX509Certificate.getExtensionValue(SUBJECT_ALTERNATIVE_NAME);
    if (arrayOfByte != null) {
      ASN1Sequence aSN1Sequence = ASN1Sequence.getInstance(getObject(arrayOfByte));
      for (byte b1 = 0; b1 < aSN1Sequence.size(); b1++) {
        ASN1TaggedObject aSN1TaggedObject = (ASN1TaggedObject)aSN1Sequence.getObjectAt(b1);
        if (aSN1TaggedObject.getTagNo() == 1) {
          String str = DERIA5String.getInstance(aSN1TaggedObject, false).getString().toLowerCase();
          hashSet.add(str);
        } 
      } 
    } 
    return hashSet;
  }
  
  private static ASN1Primitive getObject(byte[] paramArrayOfByte) throws IOException {
    ASN1InputStream aSN1InputStream = new ASN1InputStream(paramArrayOfByte);
    ASN1OctetString aSN1OctetString = ASN1OctetString.getInstance(aSN1InputStream.readObject());
    return ASN1Primitive.fromByteArray(aSN1OctetString.getOctets());
  }
  
  protected void checkSignerCert(X509Certificate paramX509Certificate, List paramList1, List paramList2) {
    PublicKey publicKey = paramX509Certificate.getPublicKey();
    int i = -1;
    if (publicKey instanceof RSAPublicKey) {
      i = ((RSAPublicKey)publicKey).getModulus().bitLength();
    } else if (publicKey instanceof DSAPublicKey) {
      i = ((DSAPublicKey)publicKey).getParams().getP().bitLength();
    } 
    if (i != -1 && i <= 512) {
      ErrorBundle errorBundle = new ErrorBundle("org.bouncycastle.mail.smime.validator.SignedMailValidatorMessages", "SignedMailValidator.shortSigningKey", new Object[] { Integers.valueOf(i) });
      paramList2.add(errorBundle);
    } 
    long l = paramX509Certificate.getNotAfter().getTime() - paramX509Certificate.getNotBefore().getTime();
    if (l > 946728000000L) {
      ErrorBundle errorBundle = new ErrorBundle("org.bouncycastle.mail.smime.validator.SignedMailValidatorMessages", "SignedMailValidator.longValidity", new Object[] { new TrustedInput(paramX509Certificate.getNotBefore()), new TrustedInput(paramX509Certificate.getNotAfter()) });
      paramList2.add(errorBundle);
    } 
    boolean[] arrayOfBoolean = paramX509Certificate.getKeyUsage();
    if (arrayOfBoolean != null && !arrayOfBoolean[0] && !arrayOfBoolean[1]) {
      ErrorBundle errorBundle = new ErrorBundle("org.bouncycastle.mail.smime.validator.SignedMailValidatorMessages", "SignedMailValidator.signingNotPermitted");
      paramList1.add(errorBundle);
    } 
    try {
      byte[] arrayOfByte = paramX509Certificate.getExtensionValue(EXT_KEY_USAGE);
      if (arrayOfByte != null) {
        ExtendedKeyUsage extendedKeyUsage = ExtendedKeyUsage.getInstance(getObject(arrayOfByte));
        if (!extendedKeyUsage.hasKeyPurposeId(KeyPurposeId.anyExtendedKeyUsage) && !extendedKeyUsage.hasKeyPurposeId(KeyPurposeId.id_kp_emailProtection)) {
          ErrorBundle errorBundle = new ErrorBundle("org.bouncycastle.mail.smime.validator.SignedMailValidatorMessages", "SignedMailValidator.extKeyUsageNotPermitted");
          paramList1.add(errorBundle);
        } 
      } 
    } catch (Exception exception) {
      ErrorBundle errorBundle = new ErrorBundle("org.bouncycastle.mail.smime.validator.SignedMailValidatorMessages", "SignedMailValidator.extKeyUsageError", new Object[] { exception.getMessage(), exception, exception.getClass().getName() });
      paramList1.add(errorBundle);
    } 
    try {
      Set set = getEmailAddresses(paramX509Certificate);
      if (set.isEmpty()) {
        ErrorBundle errorBundle = new ErrorBundle("org.bouncycastle.mail.smime.validator.SignedMailValidatorMessages", "SignedMailValidator.noEmailInCert");
        paramList1.add(errorBundle);
      } else {
        boolean bool = false;
        for (byte b = 0; b < this.fromAddresses.length; b++) {
          if (set.contains(this.fromAddresses[b].toLowerCase())) {
            bool = true;
            break;
          } 
        } 
        if (!bool) {
          ErrorBundle errorBundle = new ErrorBundle("org.bouncycastle.mail.smime.validator.SignedMailValidatorMessages", "SignedMailValidator.emailFromCertMismatch", new Object[] { new UntrustedInput(addressesToString(this.fromAddresses)), new UntrustedInput(set) });
          paramList1.add(errorBundle);
        } 
      } 
    } catch (Exception exception) {
      ErrorBundle errorBundle = new ErrorBundle("org.bouncycastle.mail.smime.validator.SignedMailValidatorMessages", "SignedMailValidator.certGetEmailError", new Object[] { exception.getMessage(), exception, exception.getClass().getName() });
      paramList1.add(errorBundle);
    } 
  }
  
  static String addressesToString(Object[] paramArrayOfObject) {
    if (paramArrayOfObject == null)
      return "null"; 
    StringBuffer stringBuffer = new StringBuffer();
    stringBuffer.append('[');
    for (byte b = 0; b != paramArrayOfObject.length; b++) {
      if (b)
        stringBuffer.append(", "); 
      stringBuffer.append(String.valueOf(paramArrayOfObject[b]));
    } 
    return stringBuffer.append(']').toString();
  }
  
  public static Date getSignatureTime(SignerInformation paramSignerInformation) {
    AttributeTable attributeTable = paramSignerInformation.getSignedAttributes();
    Date date = null;
    if (attributeTable != null) {
      Attribute attribute = attributeTable.get(CMSAttributes.signingTime);
      if (attribute != null) {
        Time time = Time.getInstance(attribute.getAttrValues().getObjectAt(0).toASN1Primitive());
        date = time.getDate();
      } 
    } 
    return date;
  }
  
  private static List findCerts(List paramList, X509CertSelector paramX509CertSelector) throws CertStoreException {
    ArrayList arrayList = new ArrayList();
    for (CertStore certStore : paramList) {
      Collection collection = certStore.getCertificates(paramX509CertSelector);
      arrayList.addAll(collection);
    } 
    return arrayList;
  }
  
  private static X509Certificate findNextCert(List paramList, X509CertSelector paramX509CertSelector, Set paramSet) throws CertStoreException {
    Iterator iterator = findCerts(paramList, paramX509CertSelector).iterator();
    boolean bool = false;
    X509Certificate x509Certificate = null;
    while (iterator.hasNext()) {
      x509Certificate = (X509Certificate)iterator.next();
      if (!paramSet.contains(x509Certificate)) {
        bool = true;
        break;
      } 
    } 
    return bool ? x509Certificate : null;
  }
  
  public static CertPath createCertPath(X509Certificate paramX509Certificate, Set paramSet, List paramList) throws GeneralSecurityException {
    Object[] arrayOfObject = createCertPath(paramX509Certificate, paramSet, paramList, null);
    return (CertPath)arrayOfObject[0];
  }
  
  public static Object[] createCertPath(X509Certificate paramX509Certificate, Set paramSet, List paramList1, List paramList2) throws GeneralSecurityException {
    LinkedHashSet linkedHashSet = new LinkedHashSet();
    ArrayList arrayList = new ArrayList();
    X509Certificate x509Certificate1 = paramX509Certificate;
    linkedHashSet.add(x509Certificate1);
    arrayList.add(new Boolean(true));
    boolean bool = false;
    X509Certificate x509Certificate2 = null;
    while (x509Certificate1 != null && !bool) {
      for (TrustAnchor trustAnchor : paramSet) {
        X509Certificate x509Certificate = trustAnchor.getTrustedCert();
        if (x509Certificate != null) {
          if (x509Certificate.getSubjectX500Principal().equals(x509Certificate1.getIssuerX500Principal()))
            try {
              x509Certificate1.verify(x509Certificate.getPublicKey(), "BC");
              bool = true;
              x509Certificate2 = x509Certificate;
              break;
            } catch (Exception exception) {
              continue;
            }  
          continue;
        } 
        if (trustAnchor.getCAName().equals(x509Certificate1.getIssuerX500Principal().getName()))
          try {
            x509Certificate1.verify(trustAnchor.getCAPublicKey(), "BC");
            bool = true;
            break;
          } catch (Exception exception) {} 
      } 
      if (!bool) {
        X509CertSelector x509CertSelector = new X509CertSelector();
        try {
          x509CertSelector.setSubject(x509Certificate1.getIssuerX500Principal().getEncoded());
        } catch (IOException iOException) {
          throw new IllegalStateException(iOException.toString());
        } 
        byte[] arrayOfByte = x509Certificate1.getExtensionValue(Extension.authorityKeyIdentifier.getId());
        if (arrayOfByte != null)
          try {
            AuthorityKeyIdentifier authorityKeyIdentifier = AuthorityKeyIdentifier.getInstance(getObject(arrayOfByte));
            if (authorityKeyIdentifier.getKeyIdentifier() != null)
              x509CertSelector.setSubjectKeyIdentifier((new DEROctetString(authorityKeyIdentifier.getKeyIdentifier())).getEncoded("DER")); 
          } catch (IOException iOException) {} 
        boolean bool1 = false;
        x509Certificate1 = findNextCert(paramList1, x509CertSelector, linkedHashSet);
        if (x509Certificate1 == null && paramList2 != null) {
          bool1 = true;
          x509Certificate1 = findNextCert(paramList2, x509CertSelector, linkedHashSet);
        } 
        if (x509Certificate1 != null) {
          linkedHashSet.add(x509Certificate1);
          arrayList.add(new Boolean(bool1));
        } 
      } 
    } 
    if (bool)
      if (x509Certificate2 != null && x509Certificate2.getSubjectX500Principal().equals(x509Certificate2.getIssuerX500Principal())) {
        linkedHashSet.add(x509Certificate2);
        arrayList.add(new Boolean(false));
      } else {
        X509CertSelector x509CertSelector = new X509CertSelector();
        try {
          x509CertSelector.setSubject(x509Certificate1.getIssuerX500Principal().getEncoded());
          x509CertSelector.setIssuer(x509Certificate1.getIssuerX500Principal().getEncoded());
        } catch (IOException iOException) {
          throw new IllegalStateException(iOException.toString());
        } 
        boolean bool1 = false;
        x509Certificate2 = findNextCert(paramList1, x509CertSelector, linkedHashSet);
        if (x509Certificate2 == null && paramList2 != null) {
          bool1 = true;
          x509Certificate2 = findNextCert(paramList2, x509CertSelector, linkedHashSet);
        } 
        if (x509Certificate2 != null)
          try {
            x509Certificate1.verify(x509Certificate2.getPublicKey(), "BC");
            linkedHashSet.add(x509Certificate2);
            arrayList.add(new Boolean(bool1));
          } catch (GeneralSecurityException generalSecurityException) {} 
      }  
    CertPath certPath = CertificateFactory.getInstance("X.509", "BC").generateCertPath(new ArrayList(linkedHashSet));
    return new Object[] { certPath, arrayList };
  }
  
  public CertStore getCertsAndCRLs() { return this.certs; }
  
  public SignerInformationStore getSignerInformationStore() { return this.signers; }
  
  public ValidationResult getValidationResult(SignerInformation paramSignerInformation) throws SignedMailValidatorException {
    if (this.signers.getSigners(paramSignerInformation.getSID()).isEmpty()) {
      ErrorBundle errorBundle = new ErrorBundle("org.bouncycastle.mail.smime.validator.SignedMailValidatorMessages", "SignedMailValidator.wrongSigner");
      throw new SignedMailValidatorException(errorBundle);
    } 
    return (ValidationResult)this.results.get(paramSignerInformation);
  }
  
  private static TBSCertificate getTBSCert(X509Certificate paramX509Certificate) throws CertificateEncodingException { return TBSCertificate.getInstance(paramX509Certificate.getTBSCertificate()); }
}
