package org.bouncycastle.mail.smime;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.security.AccessController;
import javax.activation.CommandMap;
import javax.activation.MailcapCommandMap;
import javax.mail.BodyPart;
import javax.mail.MessagingException;
import javax.mail.Part;
import javax.mail.Session;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import org.bouncycastle.cms.CMSException;
import org.bouncycastle.cms.CMSSignedDataParser;
import org.bouncycastle.cms.CMSTypedStream;
import org.bouncycastle.operator.DigestCalculatorProvider;

public class SMIMESignedParser extends CMSSignedDataParser {
  Object message;
  
  MimeBodyPart content;
  
  private static InputStream getInputStream(Part paramPart) throws MessagingException {
    try {
      if (paramPart.isMimeType("multipart/signed"))
        throw new MessagingException("attempt to create signed data object from multipart content - use MimeMultipart constructor."); 
      return paramPart.getInputStream();
    } catch (IOException iOException) {
      throw new MessagingException("can't extract input stream: " + iOException);
    } 
  }
  
  private static File getTmpFile() throws MessagingException {
    try {
      return File.createTempFile("bcMail", ".mime");
    } catch (IOException iOException) {
      throw new MessagingException("can't extract input stream: " + iOException);
    } 
  }
  
  private static CMSTypedStream getSignedInputStream(BodyPart paramBodyPart, String paramString, File paramFile) throws MessagingException {
    try {
      BufferedOutputStream bufferedOutputStream = new BufferedOutputStream(new FileOutputStream(paramFile));
      SMIMEUtil.outputBodyPart(bufferedOutputStream, true, paramBodyPart, paramString);
      bufferedOutputStream.close();
      TemporaryFileInputStream temporaryFileInputStream = new TemporaryFileInputStream(paramFile);
      return new CMSTypedStream(temporaryFileInputStream);
    } catch (IOException iOException) {
      throw new MessagingException("can't extract input stream: " + iOException);
    } 
  }
  
  public SMIMESignedParser(DigestCalculatorProvider paramDigestCalculatorProvider, MimeMultipart paramMimeMultipart) throws MessagingException, CMSException { this(paramDigestCalculatorProvider, paramMimeMultipart, getTmpFile()); }
  
  public SMIMESignedParser(DigestCalculatorProvider paramDigestCalculatorProvider, MimeMultipart paramMimeMultipart, File paramFile) throws MessagingException, CMSException { this(paramDigestCalculatorProvider, paramMimeMultipart, "7bit", paramFile); }
  
  public SMIMESignedParser(DigestCalculatorProvider paramDigestCalculatorProvider, MimeMultipart paramMimeMultipart, String paramString) throws MessagingException, CMSException { this(paramDigestCalculatorProvider, paramMimeMultipart, paramString, getTmpFile()); }
  
  public SMIMESignedParser(DigestCalculatorProvider paramDigestCalculatorProvider, MimeMultipart paramMimeMultipart, String paramString, File paramFile) throws MessagingException, CMSException {
    super(paramDigestCalculatorProvider, getSignedInputStream(paramMimeMultipart.getBodyPart(0), paramString, paramFile), getInputStream(paramMimeMultipart.getBodyPart(1)));
    this.message = paramMimeMultipart;
    this.content = (MimeBodyPart)paramMimeMultipart.getBodyPart(0);
    drainContent();
  }
  
  public SMIMESignedParser(DigestCalculatorProvider paramDigestCalculatorProvider, Part paramPart) throws MessagingException, CMSException, SMIMEException {
    super(paramDigestCalculatorProvider, getInputStream(paramPart));
    this.message = paramPart;
    CMSTypedStream cMSTypedStream = getSignedContent();
    if (cMSTypedStream != null)
      this.content = SMIMEUtil.toWriteOnceBodyPart(cMSTypedStream); 
  }
  
  public SMIMESignedParser(DigestCalculatorProvider paramDigestCalculatorProvider, Part paramPart, File paramFile) throws MessagingException, CMSException, SMIMEException {
    super(paramDigestCalculatorProvider, getInputStream(paramPart));
    this.message = paramPart;
    CMSTypedStream cMSTypedStream = getSignedContent();
    if (cMSTypedStream != null)
      this.content = SMIMEUtil.toMimeBodyPart(cMSTypedStream, paramFile); 
  }
  
  public MimeBodyPart getContent() { return this.content; }
  
  public MimeMessage getContentAsMimeMessage(Session paramSession) throws MessagingException, IOException {
    if (this.message instanceof MimeMultipart) {
      BodyPart bodyPart = ((MimeMultipart)this.message).getBodyPart(0);
      return new MimeMessage(paramSession, bodyPart.getInputStream());
    } 
    return new MimeMessage(paramSession, getSignedContent().getContentStream());
  }
  
  public Object getContentWithSignature() { return this.message; }
  
  private void drainContent() throws CMSException {
    try {
      getSignedContent().drain();
    } catch (IOException iOException) {
      throw new CMSException("unable to read content for verification: " + iOException, iOException);
    } 
  }
  
  static  {
    CommandMap commandMap = CommandMap.getDefaultCommandMap();
    if (commandMap instanceof MailcapCommandMap) {
      MailcapCommandMap mailcapCommandMap = (MailcapCommandMap)commandMap;
      mailcapCommandMap.addMailcap("application/pkcs7-signature;; x-java-content-handler=org.bouncycastle.mail.smime.handlers.pkcs7_signature");
      mailcapCommandMap.addMailcap("application/pkcs7-mime;; x-java-content-handler=org.bouncycastle.mail.smime.handlers.pkcs7_mime");
      mailcapCommandMap.addMailcap("application/x-pkcs7-signature;; x-java-content-handler=org.bouncycastle.mail.smime.handlers.x_pkcs7_signature");
      mailcapCommandMap.addMailcap("application/x-pkcs7-mime;; x-java-content-handler=org.bouncycastle.mail.smime.handlers.x_pkcs7_mime");
      mailcapCommandMap.addMailcap("multipart/signed;; x-java-content-handler=org.bouncycastle.mail.smime.handlers.multipart_signed");
      AccessController.doPrivileged(new Object(mailcapCommandMap));
    } 
  }
}
