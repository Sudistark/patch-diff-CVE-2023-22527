package org.bouncycastle.cert.dane.fetcher;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import javax.naming.NamingException;
import javax.naming.directory.Attribute;
import org.bouncycastle.cert.dane.DANEEntry;
import org.bouncycastle.cert.dane.DANEEntryFetcher;
import org.bouncycastle.cert.dane.DANEEntryFetcherFactory;
import org.bouncycastle.cert.dane.DANEException;

public class JndiDANEFetcherFactory implements DANEEntryFetcherFactory {
  private static final String DANE_TYPE = "53";
  
  private List dnsServerList = new ArrayList();
  
  private boolean isAuthoritative;
  
  public JndiDANEFetcherFactory usingDNSServer(String paramString) {
    this.dnsServerList.add(paramString);
    return this;
  }
  
  public JndiDANEFetcherFactory setAuthoritative(boolean paramBoolean) {
    this.isAuthoritative = paramBoolean;
    return this;
  }
  
  public DANEEntryFetcher build(String paramString) {
    Hashtable hashtable = new Hashtable();
    hashtable.put("java.naming.factory.initial", "com.sun.jndi.dns.DnsContextFactory");
    hashtable.put("java.naming.authoritative", this.isAuthoritative ? "true" : "false");
    if (this.dnsServerList.size() > 0) {
      StringBuffer stringBuffer = new StringBuffer();
      Iterator iterator = this.dnsServerList.iterator();
      while (iterator.hasNext()) {
        if (stringBuffer.length() > 0)
          stringBuffer.append(" "); 
        stringBuffer.append("dns://" + iterator.next());
      } 
      hashtable.put("java.naming.provider.url", stringBuffer.toString());
    } 
    return new Object(this, hashtable, paramString);
  }
  
  private void addEntries(List paramList, String paramString, Attribute paramAttribute) throws NamingException, DANEException {
    for (byte b = 0; b != paramAttribute.size(); b++) {
      byte[] arrayOfByte = (byte[])paramAttribute.get(b);
      if (DANEEntry.isValidCertificate(arrayOfByte))
        try {
          paramList.add(new DANEEntry(paramString, arrayOfByte));
        } catch (IOException iOException) {
          throw new DANEException("Exception parsing entry: " + iOException.getMessage(), iOException);
        }  
    } 
  }
}
