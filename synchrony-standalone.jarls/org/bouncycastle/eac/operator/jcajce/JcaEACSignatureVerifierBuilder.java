package org.bouncycastle.eac.operator.jcajce;

import java.io.IOException;
import java.math.BigInteger;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.Provider;
import java.security.PublicKey;
import java.security.Signature;
import org.bouncycastle.asn1.ASN1EncodableVector;
import org.bouncycastle.asn1.ASN1Integer;
import org.bouncycastle.asn1.ASN1ObjectIdentifier;
import org.bouncycastle.asn1.DERSequence;
import org.bouncycastle.eac.operator.EACSignatureVerifier;
import org.bouncycastle.operator.OperatorCreationException;

public class JcaEACSignatureVerifierBuilder {
  private EACHelper helper = new DefaultEACHelper();
  
  public JcaEACSignatureVerifierBuilder setProvider(String paramString) {
    this.helper = new NamedEACHelper(paramString);
    return this;
  }
  
  public JcaEACSignatureVerifierBuilder setProvider(Provider paramProvider) {
    this.helper = new ProviderEACHelper(paramProvider);
    return this;
  }
  
  public EACSignatureVerifier build(ASN1ObjectIdentifier paramASN1ObjectIdentifier, PublicKey paramPublicKey) throws OperatorCreationException {
    Signature signature;
    try {
      signature = this.helper.getSignature(paramASN1ObjectIdentifier);
      signature.initVerify(paramPublicKey);
    } catch (NoSuchAlgorithmException noSuchAlgorithmException) {
      throw new OperatorCreationException("unable to find algorithm: " + noSuchAlgorithmException.getMessage(), noSuchAlgorithmException);
    } catch (NoSuchProviderException noSuchProviderException) {
      throw new OperatorCreationException("unable to find provider: " + noSuchProviderException.getMessage(), noSuchProviderException);
    } catch (InvalidKeyException invalidKeyException) {
      throw new OperatorCreationException("invalid key: " + invalidKeyException.getMessage(), invalidKeyException);
    } 
    SignatureOutputStream signatureOutputStream = new SignatureOutputStream(this, signature);
    return new Object(this, paramASN1ObjectIdentifier, signatureOutputStream);
  }
  
  private static byte[] derEncode(byte[] paramArrayOfByte) throws IOException {
    int i = paramArrayOfByte.length / 2;
    byte[] arrayOfByte1 = new byte[i];
    byte[] arrayOfByte2 = new byte[i];
    System.arraycopy(paramArrayOfByte, 0, arrayOfByte1, 0, i);
    System.arraycopy(paramArrayOfByte, i, arrayOfByte2, 0, i);
    ASN1EncodableVector aSN1EncodableVector = new ASN1EncodableVector();
    aSN1EncodableVector.add(new ASN1Integer(new BigInteger(1, arrayOfByte1)));
    aSN1EncodableVector.add(new ASN1Integer(new BigInteger(1, arrayOfByte2)));
    DERSequence dERSequence = new DERSequence(aSN1EncodableVector);
    return dERSequence.getEncoded();
  }
}
