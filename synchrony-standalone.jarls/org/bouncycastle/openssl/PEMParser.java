package org.bouncycastle.openssl;

import java.io.IOException;
import java.io.Reader;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import org.bouncycastle.util.io.pem.PemObject;
import org.bouncycastle.util.io.pem.PemObjectParser;
import org.bouncycastle.util.io.pem.PemReader;

public class PEMParser extends PemReader {
  public static final String TYPE_CERTIFICATE_REQUEST = "CERTIFICATE REQUEST";
  
  public static final String TYPE_NEW_CERTIFICATE_REQUEST = "NEW CERTIFICATE REQUEST";
  
  public static final String TYPE_CERTIFICATE = "CERTIFICATE";
  
  public static final String TYPE_TRUSTED_CERTIFICATE = "TRUSTED CERTIFICATE";
  
  public static final String TYPE_X509_CERTIFICATE = "X509 CERTIFICATE";
  
  public static final String TYPE_X509_CRL = "X509 CRL";
  
  public static final String TYPE_PKCS7 = "PKCS7";
  
  public static final String TYPE_CMS = "CMS";
  
  public static final String TYPE_ATTRIBUTE_CERTIFICATE = "ATTRIBUTE CERTIFICATE";
  
  public static final String TYPE_EC_PARAMETERS = "EC PARAMETERS";
  
  public static final String TYPE_PUBLIC_KEY = "PUBLIC KEY";
  
  public static final String TYPE_RSA_PUBLIC_KEY = "RSA PUBLIC KEY";
  
  public static final String TYPE_RSA_PRIVATE_KEY = "RSA PRIVATE KEY";
  
  public static final String TYPE_DSA_PRIVATE_KEY = "DSA PRIVATE KEY";
  
  public static final String TYPE_EC_PRIVATE_KEY = "EC PRIVATE KEY";
  
  public static final String TYPE_ENCRYPTED_PRIVATE_KEY = "ENCRYPTED PRIVATE KEY";
  
  public static final String TYPE_PRIVATE_KEY = "PRIVATE KEY";
  
  protected final Map parsers = new HashMap();
  
  public PEMParser(Reader paramReader) {
    super(paramReader);
    this.parsers.put("CERTIFICATE REQUEST", new PKCS10CertificationRequestParser(this, null));
    this.parsers.put("NEW CERTIFICATE REQUEST", new PKCS10CertificationRequestParser(this, null));
    this.parsers.put("CERTIFICATE", new X509CertificateParser(this, null));
    this.parsers.put("TRUSTED CERTIFICATE", new X509TrustedCertificateParser(this, null));
    this.parsers.put("X509 CERTIFICATE", new X509CertificateParser(this, null));
    this.parsers.put("X509 CRL", new X509CRLParser(this, null));
    this.parsers.put("PKCS7", new PKCS7Parser(this, null));
    this.parsers.put("CMS", new PKCS7Parser(this, null));
    this.parsers.put("ATTRIBUTE CERTIFICATE", new X509AttributeCertificateParser(this, null));
    this.parsers.put("EC PARAMETERS", new ECCurveParamsParser(this, null));
    this.parsers.put("PUBLIC KEY", new PublicKeyParser(this));
    this.parsers.put("RSA PUBLIC KEY", new RSAPublicKeyParser(this));
    this.parsers.put("RSA PRIVATE KEY", new KeyPairParser(this, new RSAKeyPairParser(this, null)));
    this.parsers.put("DSA PRIVATE KEY", new KeyPairParser(this, new DSAKeyPairParser(this, null)));
    this.parsers.put("EC PRIVATE KEY", new KeyPairParser(this, new ECDSAKeyPairParser(this, null)));
    this.parsers.put("ENCRYPTED PRIVATE KEY", new EncryptedPrivateKeyParser(this));
    this.parsers.put("PRIVATE KEY", new PrivateKeyParser(this));
  }
  
  public Object readObject() throws IOException {
    PemObject pemObject = readPemObject();
    if (pemObject != null) {
      String str = pemObject.getType();
      Object object = this.parsers.get(str);
      if (object != null)
        return ((PemObjectParser)object).parseObject(pemObject); 
      throw new IOException("unrecognised object: " + str);
    } 
    return null;
  }
  
  public Set<String> getSupportedTypes() { return Collections.unmodifiableSet(this.parsers.keySet()); }
}
