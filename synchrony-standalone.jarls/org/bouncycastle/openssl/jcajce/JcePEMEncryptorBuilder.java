package org.bouncycastle.openssl.jcajce;

import java.security.Provider;
import java.security.SecureRandom;
import org.bouncycastle.jcajce.util.DefaultJcaJceHelper;
import org.bouncycastle.jcajce.util.JcaJceHelper;
import org.bouncycastle.jcajce.util.NamedJcaJceHelper;
import org.bouncycastle.jcajce.util.ProviderJcaJceHelper;
import org.bouncycastle.openssl.PEMEncryptor;

public class JcePEMEncryptorBuilder {
  private final String algorithm;
  
  private JcaJceHelper helper = new DefaultJcaJceHelper();
  
  private SecureRandom random;
  
  public JcePEMEncryptorBuilder(String paramString) { this.algorithm = paramString; }
  
  public JcePEMEncryptorBuilder setProvider(Provider paramProvider) {
    this.helper = new ProviderJcaJceHelper(paramProvider);
    return this;
  }
  
  public JcePEMEncryptorBuilder setProvider(String paramString) {
    this.helper = new NamedJcaJceHelper(paramString);
    return this;
  }
  
  public JcePEMEncryptorBuilder setSecureRandom(SecureRandom paramSecureRandom) {
    this.random = paramSecureRandom;
    return this;
  }
  
  public PEMEncryptor build(char[] paramArrayOfChar) {
    if (this.random == null)
      this.random = new SecureRandom(); 
    byte b = this.algorithm.startsWith("AES-") ? 16 : 8;
    byte[] arrayOfByte = new byte[b];
    this.random.nextBytes(arrayOfByte);
    return new Object(this, arrayOfByte, paramArrayOfChar);
  }
}
