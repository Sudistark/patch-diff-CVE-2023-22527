package org.bouncycastle.cms.bc;

import java.security.SecureRandom;
import org.bouncycastle.asn1.ASN1ObjectIdentifier;
import org.bouncycastle.asn1.oiw.OIWObjectIdentifiers;
import org.bouncycastle.asn1.pkcs.PKCSObjectIdentifiers;
import org.bouncycastle.cms.CMSException;
import org.bouncycastle.operator.DefaultSecretKeySizeProvider;
import org.bouncycastle.operator.OutputEncryptor;
import org.bouncycastle.operator.SecretKeySizeProvider;

public class BcCMSContentEncryptorBuilder {
  private static final SecretKeySizeProvider KEY_SIZE_PROVIDER = DefaultSecretKeySizeProvider.INSTANCE;
  
  private final ASN1ObjectIdentifier encryptionOID;
  
  private final int keySize;
  
  private EnvelopedDataHelper helper = new EnvelopedDataHelper();
  
  private SecureRandom random;
  
  public BcCMSContentEncryptorBuilder(ASN1ObjectIdentifier paramASN1ObjectIdentifier) { this(paramASN1ObjectIdentifier, KEY_SIZE_PROVIDER.getKeySize(paramASN1ObjectIdentifier)); }
  
  public BcCMSContentEncryptorBuilder(ASN1ObjectIdentifier paramASN1ObjectIdentifier, int paramInt) {
    this.encryptionOID = paramASN1ObjectIdentifier;
    int i = KEY_SIZE_PROVIDER.getKeySize(paramASN1ObjectIdentifier);
    if (paramASN1ObjectIdentifier.equals(PKCSObjectIdentifiers.des_EDE3_CBC)) {
      if (paramInt != 168 && paramInt != i)
        throw new IllegalArgumentException("incorrect keySize for encryptionOID passed to builder."); 
      this.keySize = 168;
    } else if (paramASN1ObjectIdentifier.equals(OIWObjectIdentifiers.desCBC)) {
      if (paramInt != 56 && paramInt != i)
        throw new IllegalArgumentException("incorrect keySize for encryptionOID passed to builder."); 
      this.keySize = 56;
    } else {
      if (i > 0 && i != paramInt)
        throw new IllegalArgumentException("incorrect keySize for encryptionOID passed to builder."); 
      this.keySize = paramInt;
    } 
  }
  
  public BcCMSContentEncryptorBuilder setSecureRandom(SecureRandom paramSecureRandom) {
    this.random = paramSecureRandom;
    return this;
  }
  
  public OutputEncryptor build() throws CMSException { return this.helper.isAuthEnveloped(this.encryptionOID) ? new CMSAuthOutputEncryptor(this, this.encryptionOID, this.keySize, this.random) : new CMSOutputEncryptor(this, this.encryptionOID, this.keySize, this.random); }
}
