package org.bouncycastle.cms.jcajce;

import java.security.PrivateKey;
import java.security.Provider;
import java.security.cert.CertificateEncodingException;
import java.security.cert.X509Certificate;
import org.bouncycastle.asn1.cms.AttributeTable;
import org.bouncycastle.cert.X509CertificateHolder;
import org.bouncycastle.cert.jcajce.JcaX509CertificateHolder;
import org.bouncycastle.cms.CMSAttributeTableGenerator;
import org.bouncycastle.cms.DefaultSignedAttributeTableGenerator;
import org.bouncycastle.cms.SignerInfoGenerator;
import org.bouncycastle.cms.SignerInfoGeneratorBuilder;
import org.bouncycastle.operator.ContentSigner;
import org.bouncycastle.operator.OperatorCreationException;

public class JcaSimpleSignerInfoGeneratorBuilder {
  private Helper helper = new Helper(this, null);
  
  private boolean hasNoSignedAttributes;
  
  private CMSAttributeTableGenerator signedGen;
  
  private CMSAttributeTableGenerator unsignedGen;
  
  public JcaSimpleSignerInfoGeneratorBuilder setProvider(String paramString) throws OperatorCreationException {
    this.helper = new NamedHelper(this, paramString);
    return this;
  }
  
  public JcaSimpleSignerInfoGeneratorBuilder setProvider(Provider paramProvider) throws OperatorCreationException {
    this.helper = new ProviderHelper(this, paramProvider);
    return this;
  }
  
  public JcaSimpleSignerInfoGeneratorBuilder setDirectSignature(boolean paramBoolean) {
    this.hasNoSignedAttributes = paramBoolean;
    return this;
  }
  
  public JcaSimpleSignerInfoGeneratorBuilder setSignedAttributeGenerator(CMSAttributeTableGenerator paramCMSAttributeTableGenerator) {
    this.signedGen = paramCMSAttributeTableGenerator;
    return this;
  }
  
  public JcaSimpleSignerInfoGeneratorBuilder setSignedAttributeGenerator(AttributeTable paramAttributeTable) {
    this.signedGen = new DefaultSignedAttributeTableGenerator(paramAttributeTable);
    return this;
  }
  
  public JcaSimpleSignerInfoGeneratorBuilder setUnsignedAttributeGenerator(CMSAttributeTableGenerator paramCMSAttributeTableGenerator) {
    this.unsignedGen = paramCMSAttributeTableGenerator;
    return this;
  }
  
  public SignerInfoGenerator build(String paramString, PrivateKey paramPrivateKey, X509CertificateHolder paramX509CertificateHolder) throws OperatorCreationException {
    paramPrivateKey = CMSUtils.cleanPrivateKey(paramPrivateKey);
    ContentSigner contentSigner = this.helper.createContentSigner(paramString, paramPrivateKey);
    return configureAndBuild().build(contentSigner, paramX509CertificateHolder);
  }
  
  public SignerInfoGenerator build(String paramString, PrivateKey paramPrivateKey, X509Certificate paramX509Certificate) throws OperatorCreationException, CertificateEncodingException {
    paramPrivateKey = CMSUtils.cleanPrivateKey(paramPrivateKey);
    ContentSigner contentSigner = this.helper.createContentSigner(paramString, paramPrivateKey);
    return configureAndBuild().build(contentSigner, new JcaX509CertificateHolder(paramX509Certificate));
  }
  
  public SignerInfoGenerator build(String paramString, PrivateKey paramPrivateKey, byte[] paramArrayOfByte) throws OperatorCreationException {
    paramPrivateKey = CMSUtils.cleanPrivateKey(paramPrivateKey);
    ContentSigner contentSigner = this.helper.createContentSigner(paramString, paramPrivateKey);
    return configureAndBuild().build(contentSigner, paramArrayOfByte);
  }
  
  private SignerInfoGeneratorBuilder configureAndBuild() throws OperatorCreationException {
    SignerInfoGeneratorBuilder signerInfoGeneratorBuilder = new SignerInfoGeneratorBuilder(this.helper.createDigestCalculatorProvider());
    signerInfoGeneratorBuilder.setDirectSignature(this.hasNoSignedAttributes);
    signerInfoGeneratorBuilder.setSignedAttributeGenerator(this.signedGen);
    signerInfoGeneratorBuilder.setUnsignedAttributeGenerator(this.unsignedGen);
    return signerInfoGeneratorBuilder;
  }
}
