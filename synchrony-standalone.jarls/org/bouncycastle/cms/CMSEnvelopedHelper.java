package org.bouncycastle.cms;

import java.util.ArrayList;
import java.util.List;
import org.bouncycastle.asn1.ASN1Encodable;
import org.bouncycastle.asn1.ASN1Set;
import org.bouncycastle.asn1.cms.KEKRecipientInfo;
import org.bouncycastle.asn1.cms.KeyAgreeRecipientInfo;
import org.bouncycastle.asn1.cms.KeyTransRecipientInfo;
import org.bouncycastle.asn1.cms.PasswordRecipientInfo;
import org.bouncycastle.asn1.cms.RecipientInfo;
import org.bouncycastle.asn1.x509.AlgorithmIdentifier;

class CMSEnvelopedHelper {
  static RecipientInformationStore buildRecipientInformationStore(ASN1Set paramASN1Set, AlgorithmIdentifier paramAlgorithmIdentifier, CMSSecureReadable paramCMSSecureReadable) { return buildRecipientInformationStore(paramASN1Set, paramAlgorithmIdentifier, paramCMSSecureReadable, null); }
  
  static RecipientInformationStore buildRecipientInformationStore(ASN1Set paramASN1Set, AlgorithmIdentifier paramAlgorithmIdentifier, CMSSecureReadable paramCMSSecureReadable, AuthAttributesProvider paramAuthAttributesProvider) {
    ArrayList arrayList = new ArrayList();
    for (byte b = 0; b != paramASN1Set.size(); b++) {
      RecipientInfo recipientInfo = RecipientInfo.getInstance(paramASN1Set.getObjectAt(b));
      readRecipientInfo(arrayList, recipientInfo, paramAlgorithmIdentifier, paramCMSSecureReadable, paramAuthAttributesProvider);
    } 
    return new RecipientInformationStore(arrayList);
  }
  
  private static void readRecipientInfo(List paramList, RecipientInfo paramRecipientInfo, AlgorithmIdentifier paramAlgorithmIdentifier, CMSSecureReadable paramCMSSecureReadable, AuthAttributesProvider paramAuthAttributesProvider) {
    ASN1Encodable aSN1Encodable = paramRecipientInfo.getInfo();
    if (aSN1Encodable instanceof KeyTransRecipientInfo) {
      paramList.add(new KeyTransRecipientInformation((KeyTransRecipientInfo)aSN1Encodable, paramAlgorithmIdentifier, paramCMSSecureReadable, paramAuthAttributesProvider));
    } else if (aSN1Encodable instanceof KEKRecipientInfo) {
      paramList.add(new KEKRecipientInformation((KEKRecipientInfo)aSN1Encodable, paramAlgorithmIdentifier, paramCMSSecureReadable, paramAuthAttributesProvider));
    } else if (aSN1Encodable instanceof KeyAgreeRecipientInfo) {
      KeyAgreeRecipientInformation.readRecipientInfo(paramList, (KeyAgreeRecipientInfo)aSN1Encodable, paramAlgorithmIdentifier, paramCMSSecureReadable, paramAuthAttributesProvider);
    } else if (aSN1Encodable instanceof PasswordRecipientInfo) {
      paramList.add(new PasswordRecipientInformation((PasswordRecipientInfo)aSN1Encodable, paramAlgorithmIdentifier, paramCMSSecureReadable, paramAuthAttributesProvider));
    } 
  }
}
