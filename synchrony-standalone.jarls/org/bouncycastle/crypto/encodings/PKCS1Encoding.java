package org.bouncycastle.crypto.encodings;

import java.security.SecureRandom;
import org.bouncycastle.crypto.AsymmetricBlockCipher;
import org.bouncycastle.crypto.CipherParameters;
import org.bouncycastle.crypto.CryptoServicesRegistrar;
import org.bouncycastle.crypto.InvalidCipherTextException;
import org.bouncycastle.crypto.params.AsymmetricKeyParameter;
import org.bouncycastle.crypto.params.ParametersWithRandom;
import org.bouncycastle.util.Arrays;
import org.bouncycastle.util.Properties;

public class PKCS1Encoding implements AsymmetricBlockCipher {
  public static final String STRICT_LENGTH_ENABLED_PROPERTY = "org.bouncycastle.pkcs1.strict";
  
  public static final String NOT_STRICT_LENGTH_ENABLED_PROPERTY = "org.bouncycastle.pkcs1.not_strict";
  
  private static final int HEADER_LENGTH = 10;
  
  private SecureRandom random;
  
  private AsymmetricBlockCipher engine;
  
  private boolean forEncryption;
  
  private boolean forPrivateKey;
  
  private boolean useStrictLength;
  
  private int pLen = -1;
  
  private byte[] fallback = null;
  
  private byte[] blockBuffer;
  
  public PKCS1Encoding(AsymmetricBlockCipher paramAsymmetricBlockCipher) {
    this.engine = paramAsymmetricBlockCipher;
    this.useStrictLength = useStrict();
  }
  
  public PKCS1Encoding(AsymmetricBlockCipher paramAsymmetricBlockCipher, int paramInt) {
    this.engine = paramAsymmetricBlockCipher;
    this.useStrictLength = useStrict();
    this.pLen = paramInt;
  }
  
  public PKCS1Encoding(AsymmetricBlockCipher paramAsymmetricBlockCipher, byte[] paramArrayOfByte) {
    this.engine = paramAsymmetricBlockCipher;
    this.useStrictLength = useStrict();
    this.fallback = paramArrayOfByte;
    this.pLen = paramArrayOfByte.length;
  }
  
  private boolean useStrict() { return Properties.isOverrideSetTo("org.bouncycastle.pkcs1.not_strict", true) ? false : (!Properties.isOverrideSetTo("org.bouncycastle.pkcs1.strict", false)); }
  
  public AsymmetricBlockCipher getUnderlyingCipher() { return this.engine; }
  
  public void init(boolean paramBoolean, CipherParameters paramCipherParameters) {
    AsymmetricKeyParameter asymmetricKeyParameter;
    if (paramCipherParameters instanceof ParametersWithRandom) {
      ParametersWithRandom parametersWithRandom = (ParametersWithRandom)paramCipherParameters;
      this.random = parametersWithRandom.getRandom();
      asymmetricKeyParameter = (AsymmetricKeyParameter)parametersWithRandom.getParameters();
    } else {
      asymmetricKeyParameter = (AsymmetricKeyParameter)paramCipherParameters;
      if (!asymmetricKeyParameter.isPrivate() && paramBoolean)
        this.random = CryptoServicesRegistrar.getSecureRandom(); 
    } 
    this.engine.init(paramBoolean, paramCipherParameters);
    this.forPrivateKey = asymmetricKeyParameter.isPrivate();
    this.forEncryption = paramBoolean;
    this.blockBuffer = new byte[this.engine.getOutputBlockSize()];
    if (this.pLen > 0 && this.fallback == null && this.random == null)
      throw new IllegalArgumentException("encoder requires random"); 
  }
  
  public int getInputBlockSize() {
    int i = this.engine.getInputBlockSize();
    return this.forEncryption ? (i - 10) : i;
  }
  
  public int getOutputBlockSize() {
    int i = this.engine.getOutputBlockSize();
    return this.forEncryption ? i : (i - 10);
  }
  
  public byte[] processBlock(byte[] paramArrayOfByte, int paramInt1, int paramInt2) throws InvalidCipherTextException { return this.forEncryption ? encodeBlock(paramArrayOfByte, paramInt1, paramInt2) : decodeBlock(paramArrayOfByte, paramInt1, paramInt2); }
  
  private byte[] encodeBlock(byte[] paramArrayOfByte, int paramInt1, int paramInt2) throws InvalidCipherTextException {
    if (paramInt2 > getInputBlockSize())
      throw new IllegalArgumentException("input data too large"); 
    byte[] arrayOfByte = new byte[this.engine.getInputBlockSize()];
    if (this.forPrivateKey) {
      arrayOfByte[0] = 1;
      for (byte b = 1; b != arrayOfByte.length - paramInt2 - 1; b++)
        arrayOfByte[b] = -1; 
    } else {
      this.random.nextBytes(arrayOfByte);
      arrayOfByte[0] = 2;
      for (byte b = 1; b != arrayOfByte.length - paramInt2 - 1; b++) {
        while (arrayOfByte[b] == 0)
          arrayOfByte[b] = (byte)this.random.nextInt(); 
      } 
    } 
    arrayOfByte[arrayOfByte.length - paramInt2 - 1] = 0;
    System.arraycopy(paramArrayOfByte, paramInt1, arrayOfByte, arrayOfByte.length - paramInt2, paramInt2);
    return this.engine.processBlock(arrayOfByte, 0, arrayOfByte.length);
  }
  
  private static int checkPkcs1Encoding(byte[] paramArrayOfByte, int paramInt) {
    byte b = 0;
    b |= paramArrayOfByte[0] ^ 0x2;
    int i = paramArrayOfByte.length - paramInt + 1;
    for (byte b1 = 1; b1 < i; b1++) {
      byte b2 = paramArrayOfByte[b1];
      b2 |= b2 >> 1;
      b2 |= b2 >> 2;
      b2 |= b2 >> 4;
      b |= (b2 & true) - 1;
    } 
    b |= paramArrayOfByte[paramArrayOfByte.length - paramInt + 1];
    b |= b >> 1;
    b |= b >> 2;
    b |= b >> 4;
    return (b & true) - 1 ^ 0xFFFFFFFF;
  }
  
  private byte[] decodeBlockOrRandom(byte[] paramArrayOfByte, int paramInt1, int paramInt2) throws InvalidCipherTextException {
    byte[] arrayOfByte2;
    if (!this.forPrivateKey)
      throw new InvalidCipherTextException("sorry, this method is only for decryption, not for signing"); 
    byte[] arrayOfByte1 = this.engine.processBlock(paramArrayOfByte, paramInt1, paramInt2);
    if (this.fallback == null) {
      arrayOfByte2 = new byte[this.pLen];
      this.random.nextBytes(arrayOfByte2);
    } else {
      arrayOfByte2 = this.fallback;
    } 
    byte[] arrayOfByte3 = (this.useStrictLength & ((arrayOfByte1.length != this.engine.getOutputBlockSize()) ? 1 : 0)) ? this.blockBuffer : arrayOfByte1;
    int i = checkPkcs1Encoding(arrayOfByte3, this.pLen);
    byte[] arrayOfByte4 = new byte[this.pLen];
    for (int j = 0; j < this.pLen; j++)
      arrayOfByte4[j] = (byte)(arrayOfByte3[j + arrayOfByte3.length - this.pLen] & (i ^ 0xFFFFFFFF) | arrayOfByte2[j] & i); 
    Arrays.fill(arrayOfByte3, (byte)0);
    return arrayOfByte4;
  }
  
  private byte[] decodeBlock(byte[] paramArrayOfByte, int paramInt1, int paramInt2) throws InvalidCipherTextException {
    boolean bool1;
    byte[] arrayOfByte2;
    if (this.pLen != -1)
      return decodeBlockOrRandom(paramArrayOfByte, paramInt1, paramInt2); 
    byte[] arrayOfByte1 = this.engine.processBlock(paramArrayOfByte, paramInt1, paramInt2);
    boolean bool = this.useStrictLength & ((arrayOfByte1.length != this.engine.getOutputBlockSize()) ? 1 : 0);
    if (arrayOfByte1.length < getOutputBlockSize()) {
      arrayOfByte2 = this.blockBuffer;
    } else {
      arrayOfByte2 = arrayOfByte1;
    } 
    byte b = arrayOfByte2[0];
    if (this.forPrivateKey) {
      bool1 = (b != 2) ? 1 : 0;
    } else {
      bool1 = (b != 1) ? 1 : 0;
    } 
    int i = findStart(b, arrayOfByte2);
    if (bool1 | ((++i < 10) ? 1 : 0)) {
      Arrays.fill(arrayOfByte2, (byte)0);
      throw new InvalidCipherTextException("block incorrect");
    } 
    if (bool) {
      Arrays.fill(arrayOfByte2, (byte)0);
      throw new InvalidCipherTextException("block incorrect size");
    } 
    byte[] arrayOfByte3 = new byte[arrayOfByte2.length - i];
    System.arraycopy(arrayOfByte2, i, arrayOfByte3, 0, arrayOfByte3.length);
    return arrayOfByte3;
  }
  
  private int findStart(byte paramByte, byte[] paramArrayOfByte) throws InvalidCipherTextException {
    byte b1 = -1;
    boolean bool = false;
    for (byte b2 = 1; b2 != paramArrayOfByte.length; b2++) {
      byte b = paramArrayOfByte[b2];
      if (((b == 0) ? 1 : 0) & ((b1 < 0) ? 1 : 0))
        b1 = b2; 
      bool |= ((paramByte == 1) ? 1 : 0) & ((b1 < 0) ? 1 : 0) & ((b != -1) ? 1 : 0);
    } 
    return bool ? -1 : b1;
  }
}
