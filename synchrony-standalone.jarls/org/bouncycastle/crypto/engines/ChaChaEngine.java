package org.bouncycastle.crypto.engines;

import org.bouncycastle.util.Integers;
import org.bouncycastle.util.Pack;

public class ChaChaEngine extends Salsa20Engine {
  public ChaChaEngine() {}
  
  public ChaChaEngine(int paramInt) { super(paramInt); }
  
  public String getAlgorithmName() { return "ChaCha" + this.rounds; }
  
  protected void advanceCounter(long paramLong) {
    int i = (int)(paramLong >>> 32);
    int j = (int)paramLong;
    if (i > 0)
      this.engineState[13] = this.engineState[13] + i; 
    int k = this.engineState[12];
    this.engineState[12] = this.engineState[12] + j;
    if (k != 0 && this.engineState[12] < k)
      this.engineState[13] = this.engineState[13] + 1; 
  }
  
  protected void advanceCounter() {
    this.engineState[12] = this.engineState[12] + 1;
    if (this.engineState[12] + 1 == 0)
      this.engineState[13] = this.engineState[13] + 1; 
  }
  
  protected void retreatCounter(long paramLong) {
    int i = (int)(paramLong >>> 32);
    int j = (int)paramLong;
    if (i != 0)
      if ((this.engineState[13] & 0xFFFFFFFFL) >= (i & 0xFFFFFFFFL)) {
        this.engineState[13] = this.engineState[13] - i;
      } else {
        throw new IllegalStateException("attempt to reduce counter past zero.");
      }  
    if ((this.engineState[12] & 0xFFFFFFFFL) >= (j & 0xFFFFFFFFL)) {
      this.engineState[12] = this.engineState[12] - j;
    } else if (this.engineState[13] != 0) {
      this.engineState[13] = this.engineState[13] - 1;
      this.engineState[12] = this.engineState[12] - j;
    } else {
      throw new IllegalStateException("attempt to reduce counter past zero.");
    } 
  }
  
  protected void retreatCounter() {
    if (this.engineState[12] == 0 && this.engineState[13] == 0)
      throw new IllegalStateException("attempt to reduce counter past zero."); 
    this.engineState[12] = this.engineState[12] - 1;
    if (this.engineState[12] - 1 == -1)
      this.engineState[13] = this.engineState[13] - 1; 
  }
  
  protected long getCounter() { return this.engineState[13] << 32 | this.engineState[12] & 0xFFFFFFFFL; }
  
  protected void resetCounter() {
    this.engineState[13] = 0;
    this.engineState[12] = 0;
  }
  
  protected void setKey(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2) {
    if (paramArrayOfByte1 != null) {
      if (paramArrayOfByte1.length != 16 && paramArrayOfByte1.length != 32)
        throw new IllegalArgumentException(getAlgorithmName() + " requires 128 bit or 256 bit key"); 
      packTauOrSigma(paramArrayOfByte1.length, this.engineState, 0);
      Pack.littleEndianToInt(paramArrayOfByte1, 0, this.engineState, 4, 4);
      Pack.littleEndianToInt(paramArrayOfByte1, paramArrayOfByte1.length - 16, this.engineState, 8, 4);
    } 
    Pack.littleEndianToInt(paramArrayOfByte2, 0, this.engineState, 14, 2);
  }
  
  protected void generateKeyStream(byte[] paramArrayOfByte) {
    chachaCore(this.rounds, this.engineState, this.x);
    Pack.intToLittleEndian(this.x, paramArrayOfByte, 0);
  }
  
  public static void chachaCore(int paramInt, int[] paramArrayOfInt1, int[] paramArrayOfInt2) {
    if (paramArrayOfInt1.length != 16)
      throw new IllegalArgumentException(); 
    if (paramArrayOfInt2.length != 16)
      throw new IllegalArgumentException(); 
    if (paramInt % 2 != 0)
      throw new IllegalArgumentException("Number of rounds must be even"); 
    int i = paramArrayOfInt1[0];
    int j = paramArrayOfInt1[1];
    int k = paramArrayOfInt1[2];
    int m = paramArrayOfInt1[3];
    int n = paramArrayOfInt1[4];
    int i1 = paramArrayOfInt1[5];
    int i2 = paramArrayOfInt1[6];
    int i3 = paramArrayOfInt1[7];
    int i4 = paramArrayOfInt1[8];
    int i5 = paramArrayOfInt1[9];
    int i6 = paramArrayOfInt1[10];
    int i7 = paramArrayOfInt1[11];
    int i8 = paramArrayOfInt1[12];
    int i9 = paramArrayOfInt1[13];
    int i10 = paramArrayOfInt1[14];
    int i11 = paramArrayOfInt1[15];
    for (int i12 = paramInt; i12 > 0; i12 -= 2) {
      i += n;
      i8 = Integers.rotateLeft(i8 ^ i, 16);
      i4 += i8;
      n = Integers.rotateLeft(n ^ i4, 12);
      i += n;
      i8 = Integers.rotateLeft(i8 ^ i, 8);
      i4 += i8;
      n = Integers.rotateLeft(n ^ i4, 7);
      j += i1;
      i9 = Integers.rotateLeft(i9 ^ j, 16);
      i5 += i9;
      i1 = Integers.rotateLeft(i1 ^ i5, 12);
      j += i1;
      i9 = Integers.rotateLeft(i9 ^ j, 8);
      i5 += i9;
      i1 = Integers.rotateLeft(i1 ^ i5, 7);
      k += i2;
      i10 = Integers.rotateLeft(i10 ^ k, 16);
      i6 += i10;
      i2 = Integers.rotateLeft(i2 ^ i6, 12);
      k += i2;
      i10 = Integers.rotateLeft(i10 ^ k, 8);
      i6 += i10;
      i2 = Integers.rotateLeft(i2 ^ i6, 7);
      m += i3;
      i11 = Integers.rotateLeft(i11 ^ m, 16);
      i7 += i11;
      i3 = Integers.rotateLeft(i3 ^ i7, 12);
      m += i3;
      i11 = Integers.rotateLeft(i11 ^ m, 8);
      i7 += i11;
      i3 = Integers.rotateLeft(i3 ^ i7, 7);
      i += i1;
      i11 = Integers.rotateLeft(i11 ^ i, 16);
      i6 += i11;
      i1 = Integers.rotateLeft(i1 ^ i6, 12);
      i += i1;
      i11 = Integers.rotateLeft(i11 ^ i, 8);
      i6 += i11;
      i1 = Integers.rotateLeft(i1 ^ i6, 7);
      j += i2;
      i8 = Integers.rotateLeft(i8 ^ j, 16);
      i7 += i8;
      i2 = Integers.rotateLeft(i2 ^ i7, 12);
      j += i2;
      i8 = Integers.rotateLeft(i8 ^ j, 8);
      i7 += i8;
      i2 = Integers.rotateLeft(i2 ^ i7, 7);
      k += i3;
      i9 = Integers.rotateLeft(i9 ^ k, 16);
      i4 += i9;
      i3 = Integers.rotateLeft(i3 ^ i4, 12);
      k += i3;
      i9 = Integers.rotateLeft(i9 ^ k, 8);
      i4 += i9;
      i3 = Integers.rotateLeft(i3 ^ i4, 7);
      m += n;
      i10 = Integers.rotateLeft(i10 ^ m, 16);
      i5 += i10;
      n = Integers.rotateLeft(n ^ i5, 12);
      m += n;
      i10 = Integers.rotateLeft(i10 ^ m, 8);
      i5 += i10;
      n = Integers.rotateLeft(n ^ i5, 7);
    } 
    paramArrayOfInt2[0] = i + paramArrayOfInt1[0];
    paramArrayOfInt2[1] = j + paramArrayOfInt1[1];
    paramArrayOfInt2[2] = k + paramArrayOfInt1[2];
    paramArrayOfInt2[3] = m + paramArrayOfInt1[3];
    paramArrayOfInt2[4] = n + paramArrayOfInt1[4];
    paramArrayOfInt2[5] = i1 + paramArrayOfInt1[5];
    paramArrayOfInt2[6] = i2 + paramArrayOfInt1[6];
    paramArrayOfInt2[7] = i3 + paramArrayOfInt1[7];
    paramArrayOfInt2[8] = i4 + paramArrayOfInt1[8];
    paramArrayOfInt2[9] = i5 + paramArrayOfInt1[9];
    paramArrayOfInt2[10] = i6 + paramArrayOfInt1[10];
    paramArrayOfInt2[11] = i7 + paramArrayOfInt1[11];
    paramArrayOfInt2[12] = i8 + paramArrayOfInt1[12];
    paramArrayOfInt2[13] = i9 + paramArrayOfInt1[13];
    paramArrayOfInt2[14] = i10 + paramArrayOfInt1[14];
    paramArrayOfInt2[15] = i11 + paramArrayOfInt1[15];
  }
}
