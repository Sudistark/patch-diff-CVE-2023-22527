package org.bouncycastle.crypto.engines;

import org.bouncycastle.util.Memoable;

public class Zuc256CoreEngine extends Zuc128CoreEngine {
  private static final byte[] EK_d = { 
      34, 47, 36, 42, 109, 64, 64, 64, 64, 64, 
      64, 64, 64, 82, 16, 48 };
  
  private static final byte[] EK_d32 = { 
      34, 47, 37, 42, 109, 64, 64, 64, 64, 64, 
      64, 64, 64, 82, 16, 48 };
  
  private static final byte[] EK_d64 = { 
      35, 47, 36, 42, 109, 64, 64, 64, 64, 64, 
      64, 64, 64, 82, 16, 48 };
  
  private static final byte[] EK_d128 = { 
      35, 47, 37, 42, 109, 64, 64, 64, 64, 64, 
      64, 64, 64, 82, 16, 48 };
  
  private byte[] theD;
  
  protected Zuc256CoreEngine() { this.theD = EK_d; }
  
  protected Zuc256CoreEngine(int paramInt) {
    switch (paramInt) {
      case 32:
        this.theD = EK_d32;
        return;
      case 64:
        this.theD = EK_d64;
        return;
      case 128:
        this.theD = EK_d128;
        return;
    } 
    throw new IllegalArgumentException("Unsupported length: " + paramInt);
  }
  
  protected Zuc256CoreEngine(Zuc256CoreEngine paramZuc256CoreEngine) { super(paramZuc256CoreEngine); }
  
  protected int getMaxIterations() { return 625; }
  
  public String getAlgorithmName() { return "Zuc-256"; }
  
  private static int MAKEU31(byte paramByte1, byte paramByte2, byte paramByte3, byte paramByte4) { return (paramByte1 & 0xFF) << 23 | (paramByte2 & 0xFF) << 16 | (paramByte3 & 0xFF) << 8 | paramByte4 & 0xFF; }
  
  protected void setKeyAndIV(int[] paramArrayOfInt, byte[] paramArrayOfByte1, byte[] paramArrayOfByte2) {
    if (paramArrayOfByte1 == null || paramArrayOfByte1.length != 32)
      throw new IllegalArgumentException("A key of 32 bytes is needed"); 
    if (paramArrayOfByte2 == null || paramArrayOfByte2.length != 25)
      throw new IllegalArgumentException("An IV of 25 bytes is needed"); 
    paramArrayOfInt[0] = MAKEU31(paramArrayOfByte1[0], this.theD[0], paramArrayOfByte1[21], paramArrayOfByte1[16]);
    paramArrayOfInt[1] = MAKEU31(paramArrayOfByte1[1], this.theD[1], paramArrayOfByte1[22], paramArrayOfByte1[17]);
    paramArrayOfInt[2] = MAKEU31(paramArrayOfByte1[2], this.theD[2], paramArrayOfByte1[23], paramArrayOfByte1[18]);
    paramArrayOfInt[3] = MAKEU31(paramArrayOfByte1[3], this.theD[3], paramArrayOfByte1[24], paramArrayOfByte1[19]);
    paramArrayOfInt[4] = MAKEU31(paramArrayOfByte1[4], this.theD[4], paramArrayOfByte1[25], paramArrayOfByte1[20]);
    paramArrayOfInt[5] = MAKEU31(paramArrayOfByte2[0], (byte)(this.theD[5] | paramArrayOfByte2[17] & 0x3F), paramArrayOfByte1[5], paramArrayOfByte1[26]);
    paramArrayOfInt[6] = MAKEU31(paramArrayOfByte2[1], (byte)(this.theD[6] | paramArrayOfByte2[18] & 0x3F), paramArrayOfByte1[6], paramArrayOfByte1[27]);
    paramArrayOfInt[7] = MAKEU31(paramArrayOfByte2[10], (byte)(this.theD[7] | paramArrayOfByte2[19] & 0x3F), paramArrayOfByte1[7], paramArrayOfByte2[2]);
    paramArrayOfInt[8] = MAKEU31(paramArrayOfByte1[8], (byte)(this.theD[8] | paramArrayOfByte2[20] & 0x3F), paramArrayOfByte2[3], paramArrayOfByte2[11]);
    paramArrayOfInt[9] = MAKEU31(paramArrayOfByte1[9], (byte)(this.theD[9] | paramArrayOfByte2[21] & 0x3F), paramArrayOfByte2[12], paramArrayOfByte2[4]);
    paramArrayOfInt[10] = MAKEU31(paramArrayOfByte2[5], (byte)(this.theD[10] | paramArrayOfByte2[22] & 0x3F), paramArrayOfByte1[10], paramArrayOfByte1[28]);
    paramArrayOfInt[11] = MAKEU31(paramArrayOfByte1[11], (byte)(this.theD[11] | paramArrayOfByte2[23] & 0x3F), paramArrayOfByte2[6], paramArrayOfByte2[13]);
    paramArrayOfInt[12] = MAKEU31(paramArrayOfByte1[12], (byte)(this.theD[12] | paramArrayOfByte2[24] & 0x3F), paramArrayOfByte2[7], paramArrayOfByte2[14]);
    paramArrayOfInt[13] = MAKEU31(paramArrayOfByte1[13], this.theD[13], paramArrayOfByte2[15], paramArrayOfByte2[8]);
    paramArrayOfInt[14] = MAKEU31(paramArrayOfByte1[14], (byte)(this.theD[14] | paramArrayOfByte1[31] >>> 4 & 0xF), paramArrayOfByte2[16], paramArrayOfByte2[9]);
    paramArrayOfInt[15] = MAKEU31(paramArrayOfByte1[15], (byte)(this.theD[15] | paramArrayOfByte1[31] & 0xF), paramArrayOfByte1[30], paramArrayOfByte1[29]);
  }
  
  public Memoable copy() { return new Zuc256CoreEngine(this); }
  
  public void reset(Memoable paramMemoable) {
    Zuc256CoreEngine zuc256CoreEngine = (Zuc256CoreEngine)paramMemoable;
    super.reset(paramMemoable);
    this.theD = zuc256CoreEngine.theD;
  }
}
