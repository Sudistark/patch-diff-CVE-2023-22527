package org.bouncycastle.crypto.util;

import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.Map;
import org.bouncycastle.asn1.ASN1InputStream;
import org.bouncycastle.asn1.ASN1Primitive;
import org.bouncycastle.asn1.cryptopro.CryptoProObjectIdentifiers;
import org.bouncycastle.asn1.edec.EdECObjectIdentifiers;
import org.bouncycastle.asn1.oiw.OIWObjectIdentifiers;
import org.bouncycastle.asn1.pkcs.PKCSObjectIdentifiers;
import org.bouncycastle.asn1.rosstandart.RosstandartObjectIdentifiers;
import org.bouncycastle.asn1.ua.UAObjectIdentifiers;
import org.bouncycastle.asn1.x509.AlgorithmIdentifier;
import org.bouncycastle.asn1.x509.SubjectPublicKeyInfo;
import org.bouncycastle.asn1.x509.X509ObjectIdentifiers;
import org.bouncycastle.asn1.x9.X9ObjectIdentifiers;
import org.bouncycastle.crypto.params.AsymmetricKeyParameter;

public class PublicKeyFactory {
  private static Map converters = new HashMap();
  
  public static AsymmetricKeyParameter createKey(byte[] paramArrayOfByte) throws IOException { return createKey(SubjectPublicKeyInfo.getInstance(ASN1Primitive.fromByteArray(paramArrayOfByte))); }
  
  public static AsymmetricKeyParameter createKey(InputStream paramInputStream) throws IOException { return createKey(SubjectPublicKeyInfo.getInstance((new ASN1InputStream(paramInputStream)).readObject())); }
  
  public static AsymmetricKeyParameter createKey(SubjectPublicKeyInfo paramSubjectPublicKeyInfo) throws IOException { return createKey(paramSubjectPublicKeyInfo, null); }
  
  public static AsymmetricKeyParameter createKey(SubjectPublicKeyInfo paramSubjectPublicKeyInfo, Object paramObject) throws IOException {
    AlgorithmIdentifier algorithmIdentifier = paramSubjectPublicKeyInfo.getAlgorithm();
    SubjectPublicKeyInfoConverter subjectPublicKeyInfoConverter = (SubjectPublicKeyInfoConverter)converters.get(algorithmIdentifier.getAlgorithm());
    if (null == subjectPublicKeyInfoConverter)
      throw new IOException("algorithm identifier in public key not recognised: " + algorithmIdentifier.getAlgorithm()); 
    return subjectPublicKeyInfoConverter.getPublicKeyParameters(paramSubjectPublicKeyInfo, paramObject);
  }
  
  private static byte[] getRawKey(SubjectPublicKeyInfo paramSubjectPublicKeyInfo, Object paramObject) { return paramSubjectPublicKeyInfo.getPublicKeyData().getOctets(); }
  
  static  {
    converters.put(PKCSObjectIdentifiers.rsaEncryption, new RSAConverter(null));
    converters.put(PKCSObjectIdentifiers.id_RSASSA_PSS, new RSAConverter(null));
    converters.put(X509ObjectIdentifiers.id_ea_rsa, new RSAConverter(null));
    converters.put(X9ObjectIdentifiers.dhpublicnumber, new DHPublicNumberConverter(null));
    converters.put(PKCSObjectIdentifiers.dhKeyAgreement, new DHAgreementConverter(null));
    converters.put(X9ObjectIdentifiers.id_dsa, new DSAConverter(null));
    converters.put(OIWObjectIdentifiers.dsaWithSHA1, new DSAConverter(null));
    converters.put(OIWObjectIdentifiers.elGamalAlgorithm, new ElGamalConverter(null));
    converters.put(X9ObjectIdentifiers.id_ecPublicKey, new ECConverter(null));
    converters.put(CryptoProObjectIdentifiers.gostR3410_2001, new GOST3410_2001Converter(null));
    converters.put(RosstandartObjectIdentifiers.id_tc26_gost_3410_12_256, new GOST3410_2012Converter(null));
    converters.put(RosstandartObjectIdentifiers.id_tc26_gost_3410_12_512, new GOST3410_2012Converter(null));
    converters.put(UAObjectIdentifiers.dstu4145be, new DSTUConverter(null));
    converters.put(UAObjectIdentifiers.dstu4145le, new DSTUConverter(null));
    converters.put(EdECObjectIdentifiers.id_X25519, new X25519Converter(null));
    converters.put(EdECObjectIdentifiers.id_X448, new X448Converter(null));
    converters.put(EdECObjectIdentifiers.id_Ed25519, new Ed25519Converter(null));
    converters.put(EdECObjectIdentifiers.id_Ed448, new Ed448Converter(null));
  }
}
