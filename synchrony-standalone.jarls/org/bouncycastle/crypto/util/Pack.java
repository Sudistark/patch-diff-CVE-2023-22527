package org.bouncycastle.crypto.util;

public abstract class Pack {
  public static int bigEndianToInt(byte[] paramArrayOfByte, int paramInt) {
    null = paramArrayOfByte[paramInt] << 24;
    null |= (paramArrayOfByte[++paramInt] & 0xFF) << 16;
    null |= (paramArrayOfByte[++paramInt] & 0xFF) << 8;
    return paramArrayOfByte[++paramInt] & 0xFF;
  }
  
  public static void bigEndianToInt(byte[] paramArrayOfByte, int paramInt, int[] paramArrayOfInt) {
    for (byte b = 0; b < paramArrayOfInt.length; b++) {
      paramArrayOfInt[b] = bigEndianToInt(paramArrayOfByte, paramInt);
      paramInt += 4;
    } 
  }
  
  public static byte[] intToBigEndian(int paramInt) {
    byte[] arrayOfByte = new byte[4];
    intToBigEndian(paramInt, arrayOfByte, 0);
    return arrayOfByte;
  }
  
  public static void intToBigEndian(int paramInt1, byte[] paramArrayOfByte, int paramInt2) {
    paramArrayOfByte[paramInt2] = (byte)(paramInt1 >>> 24);
    paramArrayOfByte[++paramInt2] = (byte)(paramInt1 >>> 16);
    paramArrayOfByte[++paramInt2] = (byte)(paramInt1 >>> 8);
    paramArrayOfByte[++paramInt2] = (byte)paramInt1;
  }
  
  public static byte[] intToBigEndian(int[] paramArrayOfInt) {
    byte[] arrayOfByte = new byte[4 * paramArrayOfInt.length];
    intToBigEndian(paramArrayOfInt, arrayOfByte, 0);
    return arrayOfByte;
  }
  
  public static void intToBigEndian(int[] paramArrayOfInt, byte[] paramArrayOfByte, int paramInt) {
    for (byte b = 0; b < paramArrayOfInt.length; b++) {
      intToBigEndian(paramArrayOfInt[b], paramArrayOfByte, paramInt);
      paramInt += 4;
    } 
  }
  
  public static long bigEndianToLong(byte[] paramArrayOfByte, int paramInt) {
    int i = bigEndianToInt(paramArrayOfByte, paramInt);
    int j = bigEndianToInt(paramArrayOfByte, paramInt + 4);
    return (i & 0xFFFFFFFFL) << 32 | j & 0xFFFFFFFFL;
  }
  
  public static void bigEndianToLong(byte[] paramArrayOfByte, int paramInt, long[] paramArrayOfLong) {
    for (byte b = 0; b < paramArrayOfLong.length; b++) {
      paramArrayOfLong[b] = bigEndianToLong(paramArrayOfByte, paramInt);
      paramInt += 8;
    } 
  }
  
  public static byte[] longToBigEndian(long paramLong) {
    byte[] arrayOfByte = new byte[8];
    longToBigEndian(paramLong, arrayOfByte, 0);
    return arrayOfByte;
  }
  
  public static void longToBigEndian(long paramLong, byte[] paramArrayOfByte, int paramInt) {
    intToBigEndian((int)(paramLong >>> 32), paramArrayOfByte, paramInt);
    intToBigEndian((int)(paramLong & 0xFFFFFFFFL), paramArrayOfByte, paramInt + 4);
  }
  
  public static byte[] longToBigEndian(long[] paramArrayOfLong) {
    byte[] arrayOfByte = new byte[8 * paramArrayOfLong.length];
    longToBigEndian(paramArrayOfLong, arrayOfByte, 0);
    return arrayOfByte;
  }
  
  public static void longToBigEndian(long[] paramArrayOfLong, byte[] paramArrayOfByte, int paramInt) {
    for (byte b = 0; b < paramArrayOfLong.length; b++) {
      longToBigEndian(paramArrayOfLong[b], paramArrayOfByte, paramInt);
      paramInt += 8;
    } 
  }
  
  public static int littleEndianToInt(byte[] paramArrayOfByte, int paramInt) {
    null = paramArrayOfByte[paramInt] & 0xFF;
    null |= (paramArrayOfByte[++paramInt] & 0xFF) << 8;
    null |= (paramArrayOfByte[++paramInt] & 0xFF) << 16;
    return paramArrayOfByte[++paramInt] << 24;
  }
  
  public static void littleEndianToInt(byte[] paramArrayOfByte, int paramInt, int[] paramArrayOfInt) {
    for (byte b = 0; b < paramArrayOfInt.length; b++) {
      paramArrayOfInt[b] = littleEndianToInt(paramArrayOfByte, paramInt);
      paramInt += 4;
    } 
  }
  
  public static void littleEndianToInt(byte[] paramArrayOfByte, int paramInt1, int[] paramArrayOfInt, int paramInt2, int paramInt3) {
    for (int i = 0; i < paramInt3; i++) {
      paramArrayOfInt[paramInt2 + i] = littleEndianToInt(paramArrayOfByte, paramInt1);
      paramInt1 += 4;
    } 
  }
  
  public static byte[] intToLittleEndian(int paramInt) {
    byte[] arrayOfByte = new byte[4];
    intToLittleEndian(paramInt, arrayOfByte, 0);
    return arrayOfByte;
  }
  
  public static void intToLittleEndian(int paramInt1, byte[] paramArrayOfByte, int paramInt2) {
    paramArrayOfByte[paramInt2] = (byte)paramInt1;
    paramArrayOfByte[++paramInt2] = (byte)(paramInt1 >>> 8);
    paramArrayOfByte[++paramInt2] = (byte)(paramInt1 >>> 16);
    paramArrayOfByte[++paramInt2] = (byte)(paramInt1 >>> 24);
  }
  
  public static byte[] intToLittleEndian(int[] paramArrayOfInt) {
    byte[] arrayOfByte = new byte[4 * paramArrayOfInt.length];
    intToLittleEndian(paramArrayOfInt, arrayOfByte, 0);
    return arrayOfByte;
  }
  
  public static void intToLittleEndian(int[] paramArrayOfInt, byte[] paramArrayOfByte, int paramInt) {
    for (byte b = 0; b < paramArrayOfInt.length; b++) {
      intToLittleEndian(paramArrayOfInt[b], paramArrayOfByte, paramInt);
      paramInt += 4;
    } 
  }
  
  public static long littleEndianToLong(byte[] paramArrayOfByte, int paramInt) {
    int i = littleEndianToInt(paramArrayOfByte, paramInt);
    int j = littleEndianToInt(paramArrayOfByte, paramInt + 4);
    return (j & 0xFFFFFFFFL) << 32 | i & 0xFFFFFFFFL;
  }
  
  public static void littleEndianToLong(byte[] paramArrayOfByte, int paramInt, long[] paramArrayOfLong) {
    for (byte b = 0; b < paramArrayOfLong.length; b++) {
      paramArrayOfLong[b] = littleEndianToLong(paramArrayOfByte, paramInt);
      paramInt += 8;
    } 
  }
  
  public static byte[] longToLittleEndian(long paramLong) {
    byte[] arrayOfByte = new byte[8];
    longToLittleEndian(paramLong, arrayOfByte, 0);
    return arrayOfByte;
  }
  
  public static void longToLittleEndian(long paramLong, byte[] paramArrayOfByte, int paramInt) {
    intToLittleEndian((int)(paramLong & 0xFFFFFFFFL), paramArrayOfByte, paramInt);
    intToLittleEndian((int)(paramLong >>> 32), paramArrayOfByte, paramInt + 4);
  }
  
  public static byte[] longToLittleEndian(long[] paramArrayOfLong) {
    byte[] arrayOfByte = new byte[8 * paramArrayOfLong.length];
    longToLittleEndian(paramArrayOfLong, arrayOfByte, 0);
    return arrayOfByte;
  }
  
  public static void longToLittleEndian(long[] paramArrayOfLong, byte[] paramArrayOfByte, int paramInt) {
    for (byte b = 0; b < paramArrayOfLong.length; b++) {
      longToLittleEndian(paramArrayOfLong[b], paramArrayOfByte, paramInt);
      paramInt += 8;
    } 
  }
}
