package org.bouncycastle.crypto.signers;

import org.bouncycastle.crypto.CipherParameters;
import org.bouncycastle.crypto.Signer;
import org.bouncycastle.crypto.params.Ed25519PrivateKeyParameters;
import org.bouncycastle.crypto.params.Ed25519PublicKeyParameters;
import org.bouncycastle.util.Arrays;

public class Ed25519ctxSigner implements Signer {
  private final Buffer buffer = new Buffer(null);
  
  private final byte[] context;
  
  private boolean forSigning;
  
  private Ed25519PrivateKeyParameters privateKey;
  
  private Ed25519PublicKeyParameters publicKey;
  
  public Ed25519ctxSigner(byte[] paramArrayOfByte) { this.context = Arrays.clone(paramArrayOfByte); }
  
  public void init(boolean paramBoolean, CipherParameters paramCipherParameters) {
    this.forSigning = paramBoolean;
    if (paramBoolean) {
      this.privateKey = (Ed25519PrivateKeyParameters)paramCipherParameters;
      this.publicKey = null;
    } else {
      this.privateKey = null;
      this.publicKey = (Ed25519PublicKeyParameters)paramCipherParameters;
    } 
    reset();
  }
  
  public void update(byte paramByte) { this.buffer.write(paramByte); }
  
  public void update(byte[] paramArrayOfByte, int paramInt1, int paramInt2) { this.buffer.write(paramArrayOfByte, paramInt1, paramInt2); }
  
  public byte[] generateSignature() {
    if (!this.forSigning || null == this.privateKey)
      throw new IllegalStateException("Ed25519ctxSigner not initialised for signature generation."); 
    return this.buffer.generateSignature(this.privateKey, this.context);
  }
  
  public boolean verifySignature(byte[] paramArrayOfByte) {
    if (this.forSigning || null == this.publicKey)
      throw new IllegalStateException("Ed25519ctxSigner not initialised for verification"); 
    return this.buffer.verifySignature(this.publicKey, this.context, paramArrayOfByte);
  }
  
  public void reset() { this.buffer.reset(); }
}
