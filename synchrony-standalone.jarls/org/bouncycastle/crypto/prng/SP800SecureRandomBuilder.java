package org.bouncycastle.crypto.prng;

import java.security.SecureRandom;
import org.bouncycastle.crypto.BlockCipher;
import org.bouncycastle.crypto.CryptoServicesRegistrar;
import org.bouncycastle.crypto.Digest;
import org.bouncycastle.crypto.Mac;
import org.bouncycastle.util.Arrays;

public class SP800SecureRandomBuilder {
  private final SecureRandom random;
  
  private final EntropySourceProvider entropySourceProvider;
  
  private byte[] personalizationString;
  
  private int securityStrength = 256;
  
  private int entropyBitsRequired = 256;
  
  public SP800SecureRandomBuilder() { this(CryptoServicesRegistrar.getSecureRandom(), false); }
  
  public SP800SecureRandomBuilder(SecureRandom paramSecureRandom, boolean paramBoolean) {
    this.random = paramSecureRandom;
    this.entropySourceProvider = new BasicEntropySourceProvider(this.random, paramBoolean);
  }
  
  public SP800SecureRandomBuilder(EntropySourceProvider paramEntropySourceProvider) {
    this.random = null;
    this.entropySourceProvider = paramEntropySourceProvider;
  }
  
  public SP800SecureRandomBuilder setPersonalizationString(byte[] paramArrayOfByte) {
    this.personalizationString = Arrays.clone(paramArrayOfByte);
    return this;
  }
  
  public SP800SecureRandomBuilder setSecurityStrength(int paramInt) {
    this.securityStrength = paramInt;
    return this;
  }
  
  public SP800SecureRandomBuilder setEntropyBitsRequired(int paramInt) {
    this.entropyBitsRequired = paramInt;
    return this;
  }
  
  public SP800SecureRandom buildHash(Digest paramDigest, byte[] paramArrayOfByte, boolean paramBoolean) { return new SP800SecureRandom(this.random, this.entropySourceProvider.get(this.entropyBitsRequired), new HashDRBGProvider(paramDigest, paramArrayOfByte, this.personalizationString, this.securityStrength), paramBoolean); }
  
  public SP800SecureRandom buildCTR(BlockCipher paramBlockCipher, int paramInt, byte[] paramArrayOfByte, boolean paramBoolean) { return new SP800SecureRandom(this.random, this.entropySourceProvider.get(this.entropyBitsRequired), new CTRDRBGProvider(paramBlockCipher, paramInt, paramArrayOfByte, this.personalizationString, this.securityStrength), paramBoolean); }
  
  public SP800SecureRandom buildHMAC(Mac paramMac, byte[] paramArrayOfByte, boolean paramBoolean) { return new SP800SecureRandom(this.random, this.entropySourceProvider.get(this.entropyBitsRequired), new HMacDRBGProvider(paramMac, paramArrayOfByte, this.personalizationString, this.securityStrength), paramBoolean); }
  
  private static String getSimplifiedName(Digest paramDigest) {
    String str = paramDigest.getAlgorithmName();
    int i = str.indexOf('-');
    return (i > 0 && !str.startsWith("SHA3")) ? (str.substring(0, i) + str.substring(i + 1)) : str;
  }
}
