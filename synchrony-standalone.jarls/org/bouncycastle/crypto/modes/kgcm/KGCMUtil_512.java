package org.bouncycastle.crypto.modes.kgcm;

import org.bouncycastle.math.raw.Interleave;

public class KGCMUtil_512 {
  public static final int SIZE = 8;
  
  public static void add(long[] paramArrayOfLong1, long[] paramArrayOfLong2, long[] paramArrayOfLong3) {
    paramArrayOfLong3[0] = paramArrayOfLong1[0] ^ paramArrayOfLong2[0];
    paramArrayOfLong3[1] = paramArrayOfLong1[1] ^ paramArrayOfLong2[1];
    paramArrayOfLong3[2] = paramArrayOfLong1[2] ^ paramArrayOfLong2[2];
    paramArrayOfLong3[3] = paramArrayOfLong1[3] ^ paramArrayOfLong2[3];
    paramArrayOfLong3[4] = paramArrayOfLong1[4] ^ paramArrayOfLong2[4];
    paramArrayOfLong3[5] = paramArrayOfLong1[5] ^ paramArrayOfLong2[5];
    paramArrayOfLong3[6] = paramArrayOfLong1[6] ^ paramArrayOfLong2[6];
    paramArrayOfLong3[7] = paramArrayOfLong1[7] ^ paramArrayOfLong2[7];
  }
  
  public static void copy(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    paramArrayOfLong2[0] = paramArrayOfLong1[0];
    paramArrayOfLong2[1] = paramArrayOfLong1[1];
    paramArrayOfLong2[2] = paramArrayOfLong1[2];
    paramArrayOfLong2[3] = paramArrayOfLong1[3];
    paramArrayOfLong2[4] = paramArrayOfLong1[4];
    paramArrayOfLong2[5] = paramArrayOfLong1[5];
    paramArrayOfLong2[6] = paramArrayOfLong1[6];
    paramArrayOfLong2[7] = paramArrayOfLong1[7];
  }
  
  public static boolean equal(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    long l = 0L;
    l |= paramArrayOfLong1[0] ^ paramArrayOfLong2[0];
    l |= paramArrayOfLong1[1] ^ paramArrayOfLong2[1];
    l |= paramArrayOfLong1[2] ^ paramArrayOfLong2[2];
    l |= paramArrayOfLong1[3] ^ paramArrayOfLong2[3];
    l |= paramArrayOfLong1[4] ^ paramArrayOfLong2[4];
    l |= paramArrayOfLong1[5] ^ paramArrayOfLong2[5];
    l |= paramArrayOfLong1[6] ^ paramArrayOfLong2[6];
    l |= paramArrayOfLong1[7] ^ paramArrayOfLong2[7];
    return (l == 0L);
  }
  
  public static void multiply(long[] paramArrayOfLong1, long[] paramArrayOfLong2, long[] paramArrayOfLong3) {
    long l1 = paramArrayOfLong2[0];
    long l2 = paramArrayOfLong2[1];
    long l3 = paramArrayOfLong2[2];
    long l4 = paramArrayOfLong2[3];
    long l5 = paramArrayOfLong2[4];
    long l6 = paramArrayOfLong2[5];
    long l7 = paramArrayOfLong2[6];
    long l8 = paramArrayOfLong2[7];
    long l9 = 0L;
    long l10 = 0L;
    long l11 = 0L;
    long l12 = 0L;
    long l13 = 0L;
    long l14 = 0L;
    long l15 = 0L;
    long l16 = 0L;
    long l17 = 0L;
    for (boolean bool = false; bool < 8; bool += true) {
      long l18 = paramArrayOfLong1[bool];
      long l19 = paramArrayOfLong1[bool + true];
      for (byte b = 0; b < 64; b++) {
        long l21 = -(l18 & 0x1L);
        l18 >>>= true;
        l9 ^= l1 & l21;
        l10 ^= l2 & l21;
        l11 ^= l3 & l21;
        l12 ^= l4 & l21;
        l13 ^= l5 & l21;
        l14 ^= l6 & l21;
        l15 ^= l7 & l21;
        l16 ^= l8 & l21;
        long l22 = -(l19 & 0x1L);
        l19 >>>= true;
        l10 ^= l1 & l22;
        l11 ^= l2 & l22;
        l12 ^= l3 & l22;
        l13 ^= l4 & l22;
        l14 ^= l5 & l22;
        l15 ^= l6 & l22;
        l16 ^= l7 & l22;
        l17 ^= l8 & l22;
        long l23 = l8 >> 63;
        l8 = l8 << true | l7 >>> 63;
        l7 = l7 << true | l6 >>> 63;
        l6 = l6 << true | l5 >>> 63;
        l5 = l5 << true | l4 >>> 63;
        l4 = l4 << true | l3 >>> 63;
        l3 = l3 << true | l2 >>> 63;
        l2 = l2 << true | l1 >>> 63;
        l1 = l1 << true ^ l23 & 0x125L;
      } 
      long l20 = l8;
      l8 = l7;
      l7 = l6;
      l6 = l5;
      l5 = l4;
      l4 = l3;
      l3 = l2;
      l2 = l1 ^ l20 >>> 62 ^ l20 >>> 59 ^ l20 >>> 56;
      l1 = l20 ^ l20 << 2 ^ l20 << 5 ^ l20 << 8;
    } 
    l9 ^= l17 ^ l17 << 2 ^ l17 << 5 ^ l17 << 8;
    l10 ^= l17 >>> 62 ^ l17 >>> 59 ^ l17 >>> 56;
    paramArrayOfLong3[0] = l9;
    paramArrayOfLong3[1] = l10;
    paramArrayOfLong3[2] = l11;
    paramArrayOfLong3[3] = l12;
    paramArrayOfLong3[4] = l13;
    paramArrayOfLong3[5] = l14;
    paramArrayOfLong3[6] = l15;
    paramArrayOfLong3[7] = l16;
  }
  
  public static void multiplyX(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    long l1 = paramArrayOfLong1[0];
    long l2 = paramArrayOfLong1[1];
    long l3 = paramArrayOfLong1[2];
    long l4 = paramArrayOfLong1[3];
    long l5 = paramArrayOfLong1[4];
    long l6 = paramArrayOfLong1[5];
    long l7 = paramArrayOfLong1[6];
    long l8 = paramArrayOfLong1[7];
    long l9 = l8 >> 63;
    paramArrayOfLong2[0] = l1 << true ^ l9 & 0x125L;
    paramArrayOfLong2[1] = l2 << true | l1 >>> 63;
    paramArrayOfLong2[2] = l3 << true | l2 >>> 63;
    paramArrayOfLong2[3] = l4 << true | l3 >>> 63;
    paramArrayOfLong2[4] = l5 << true | l4 >>> 63;
    paramArrayOfLong2[5] = l6 << true | l5 >>> 63;
    paramArrayOfLong2[6] = l7 << true | l6 >>> 63;
    paramArrayOfLong2[7] = l8 << true | l7 >>> 63;
  }
  
  public static void multiplyX8(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    long l1 = paramArrayOfLong1[0];
    long l2 = paramArrayOfLong1[1];
    long l3 = paramArrayOfLong1[2];
    long l4 = paramArrayOfLong1[3];
    long l5 = paramArrayOfLong1[4];
    long l6 = paramArrayOfLong1[5];
    long l7 = paramArrayOfLong1[6];
    long l8 = paramArrayOfLong1[7];
    long l9 = l8 >>> 56;
    paramArrayOfLong2[0] = l1 << 8 ^ l9 ^ l9 << 2 ^ l9 << 5 ^ l9 << 8;
    paramArrayOfLong2[1] = l2 << 8 | l1 >>> 56;
    paramArrayOfLong2[2] = l3 << 8 | l2 >>> 56;
    paramArrayOfLong2[3] = l4 << 8 | l3 >>> 56;
    paramArrayOfLong2[4] = l5 << 8 | l4 >>> 56;
    paramArrayOfLong2[5] = l6 << 8 | l5 >>> 56;
    paramArrayOfLong2[6] = l7 << 8 | l6 >>> 56;
    paramArrayOfLong2[7] = l8 << 8 | l7 >>> 56;
  }
  
  public static void one(long[] paramArrayOfLong) {
    paramArrayOfLong[0] = 1L;
    paramArrayOfLong[1] = 0L;
    paramArrayOfLong[2] = 0L;
    paramArrayOfLong[3] = 0L;
    paramArrayOfLong[4] = 0L;
    paramArrayOfLong[5] = 0L;
    paramArrayOfLong[6] = 0L;
    paramArrayOfLong[7] = 0L;
  }
  
  public static void square(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    long[] arrayOfLong = new long[16];
    byte b;
    for (b = 0; b < 8; b++)
      Interleave.expand64To128(paramArrayOfLong1[b], arrayOfLong, b << true); 
    b = 16;
    while (--b >= 8) {
      long l = arrayOfLong[b];
      arrayOfLong[b - 8] = arrayOfLong[b - 8] ^ l ^ l << 2 ^ l << 5 ^ l << 8;
      arrayOfLong[b - 8 + 1] = arrayOfLong[b - 8 + 1] ^ l >>> 62 ^ l >>> 59 ^ l >>> 56;
    } 
    copy(arrayOfLong, paramArrayOfLong2);
  }
  
  public static void x(long[] paramArrayOfLong) {
    paramArrayOfLong[0] = 2L;
    paramArrayOfLong[1] = 0L;
    paramArrayOfLong[2] = 0L;
    paramArrayOfLong[3] = 0L;
    paramArrayOfLong[4] = 0L;
    paramArrayOfLong[5] = 0L;
    paramArrayOfLong[6] = 0L;
    paramArrayOfLong[7] = 0L;
  }
  
  public static void zero(long[] paramArrayOfLong) {
    paramArrayOfLong[0] = 0L;
    paramArrayOfLong[1] = 0L;
    paramArrayOfLong[2] = 0L;
    paramArrayOfLong[3] = 0L;
    paramArrayOfLong[4] = 0L;
    paramArrayOfLong[5] = 0L;
    paramArrayOfLong[6] = 0L;
    paramArrayOfLong[7] = 0L;
  }
}
