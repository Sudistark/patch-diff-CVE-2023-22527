package org.bouncycastle.crypto.modes;

import org.bouncycastle.util.Arrays;

class GOST3413CipherUtil {
  public static byte[] MSB(byte[] paramArrayOfByte, int paramInt) { return Arrays.copyOf(paramArrayOfByte, paramInt); }
  
  public static byte[] LSB(byte[] paramArrayOfByte, int paramInt) {
    byte[] arrayOfByte = new byte[paramInt];
    System.arraycopy(paramArrayOfByte, paramArrayOfByte.length - paramInt, arrayOfByte, 0, paramInt);
    return arrayOfByte;
  }
  
  public static byte[] sum(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2) {
    byte[] arrayOfByte = new byte[paramArrayOfByte1.length];
    for (byte b = 0; b < paramArrayOfByte1.length; b++)
      arrayOfByte[b] = (byte)(paramArrayOfByte1[b] ^ paramArrayOfByte2[b]); 
    return arrayOfByte;
  }
  
  public static byte[] copyFromInput(byte[] paramArrayOfByte, int paramInt1, int paramInt2) {
    if (paramArrayOfByte.length < paramInt1 + paramInt2)
      paramInt1 = paramArrayOfByte.length - paramInt2; 
    byte[] arrayOfByte = new byte[paramInt1];
    System.arraycopy(paramArrayOfByte, paramInt2, arrayOfByte, 0, paramInt1);
    return arrayOfByte;
  }
}
