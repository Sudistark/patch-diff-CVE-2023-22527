package org.bouncycastle.jce.spec;

import java.security.spec.AlgorithmParameterSpec;
import org.bouncycastle.util.Arrays;

public class IESParameterSpec implements AlgorithmParameterSpec {
  private byte[] derivation;
  
  private byte[] encoding;
  
  private int macKeySize;
  
  private int cipherKeySize;
  
  private byte[] nonce;
  
  private boolean usePointCompression;
  
  public IESParameterSpec(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2, int paramInt) { this(paramArrayOfByte1, paramArrayOfByte2, paramInt, -1, null, false); }
  
  public IESParameterSpec(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2, int paramInt1, int paramInt2, byte[] paramArrayOfByte3) { this(paramArrayOfByte1, paramArrayOfByte2, paramInt1, paramInt2, paramArrayOfByte3, false); }
  
  public IESParameterSpec(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2, int paramInt1, int paramInt2, byte[] paramArrayOfByte3, boolean paramBoolean) {
    if (paramArrayOfByte1 != null) {
      this.derivation = new byte[paramArrayOfByte1.length];
      System.arraycopy(paramArrayOfByte1, 0, this.derivation, 0, paramArrayOfByte1.length);
    } else {
      this.derivation = null;
    } 
    if (paramArrayOfByte2 != null) {
      this.encoding = new byte[paramArrayOfByte2.length];
      System.arraycopy(paramArrayOfByte2, 0, this.encoding, 0, paramArrayOfByte2.length);
    } else {
      this.encoding = null;
    } 
    this.macKeySize = paramInt1;
    this.cipherKeySize = paramInt2;
    this.nonce = Arrays.clone(paramArrayOfByte3);
    this.usePointCompression = paramBoolean;
  }
  
  public byte[] getDerivationV() { return Arrays.clone(this.derivation); }
  
  public byte[] getEncodingV() { return Arrays.clone(this.encoding); }
  
  public int getMacKeySize() { return this.macKeySize; }
  
  public int getCipherKeySize() { return this.cipherKeySize; }
  
  public byte[] getNonce() { return Arrays.clone(this.nonce); }
  
  public void setPointCompression(boolean paramBoolean) { this.usePointCompression = paramBoolean; }
  
  public boolean getPointCompression() { return this.usePointCompression; }
}
