package org.joda.time.field;

import org.joda.time.DateTimeFieldType;
import org.joda.time.DurationField;

public abstract class ImpreciseDateTimeField extends BaseDateTimeField {
  private static final long serialVersionUID = 7190739608550251860L;
  
  final long iUnitMillis;
  
  private final DurationField iDurationField;
  
  public ImpreciseDateTimeField(DateTimeFieldType paramDateTimeFieldType, long paramLong) {
    super(paramDateTimeFieldType);
    this.iUnitMillis = paramLong;
    this.iDurationField = new LinkedDurationField(this, paramDateTimeFieldType.getDurationType());
  }
  
  public abstract int get(long paramLong);
  
  public abstract long set(long paramLong, int paramInt);
  
  public abstract long add(long paramLong, int paramInt);
  
  public abstract long add(long paramLong1, long paramLong2);
  
  public int getDifference(long paramLong1, long paramLong2) { return FieldUtils.safeToInt(getDifferenceAsLong(paramLong1, paramLong2)); }
  
  public long getDifferenceAsLong(long paramLong1, long paramLong2) {
    if (paramLong1 < paramLong2)
      return -getDifferenceAsLong(paramLong2, paramLong1); 
    long l = (paramLong1 - paramLong2) / this.iUnitMillis;
    if (add(paramLong2, l) < paramLong1) {
      do {
        l++;
      } while (add(paramLong2, l) <= paramLong1);
      l--;
    } else if (add(paramLong2, l) > paramLong1) {
      do {
        l--;
      } while (add(paramLong2, l) > paramLong1);
    } 
    return l;
  }
  
  public final DurationField getDurationField() { return this.iDurationField; }
  
  public abstract DurationField getRangeDurationField();
  
  public abstract long roundFloor(long paramLong);
  
  protected final long getDurationUnitMillis() { return this.iUnitMillis; }
}
