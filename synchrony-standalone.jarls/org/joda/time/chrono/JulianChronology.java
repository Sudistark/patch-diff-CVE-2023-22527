package org.joda.time.chrono;

import java.util.concurrent.ConcurrentHashMap;
import org.joda.time.Chronology;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.field.SkipDateTimeField;

public final class JulianChronology extends BasicGJChronology {
  private static final long serialVersionUID = -8731039522547897247L;
  
  private static final long MILLIS_PER_YEAR = 31557600000L;
  
  private static final long MILLIS_PER_MONTH = 2629800000L;
  
  private static final int MIN_YEAR = -292269054;
  
  private static final int MAX_YEAR = 292272992;
  
  private static final JulianChronology INSTANCE_UTC;
  
  private static final ConcurrentHashMap<DateTimeZone, JulianChronology[]> cCache = new ConcurrentHashMap();
  
  static  {
    INSTANCE_UTC = getInstance(DateTimeZone.UTC);
  }
  
  static int adjustYearForSet(int paramInt) {
    if (paramInt <= 0) {
      if (paramInt == 0)
        throw new IllegalFieldValueException(
            DateTimeFieldType.year(), Integer.valueOf(paramInt), null, null); 
      paramInt++;
    } 
    return paramInt;
  }
  
  public static JulianChronology getInstanceUTC() { return INSTANCE_UTC; }
  
  public static JulianChronology getInstance() { return getInstance(DateTimeZone.getDefault(), 4); }
  
  public static JulianChronology getInstance(DateTimeZone paramDateTimeZone) { return getInstance(paramDateTimeZone, 4); }
  
  public static JulianChronology getInstance(DateTimeZone paramDateTimeZone, int paramInt) {
    JulianChronology julianChronology;
    if (paramDateTimeZone == null)
      paramDateTimeZone = DateTimeZone.getDefault(); 
    JulianChronology[] arrayOfJulianChronology = (JulianChronology[])cCache.get(paramDateTimeZone);
    if (arrayOfJulianChronology == null) {
      arrayOfJulianChronology = new JulianChronology[7];
      JulianChronology[] arrayOfJulianChronology1 = (JulianChronology[])cCache.putIfAbsent(paramDateTimeZone, arrayOfJulianChronology);
      if (arrayOfJulianChronology1 != null)
        arrayOfJulianChronology = arrayOfJulianChronology1; 
    } 
    try {
      julianChronology = arrayOfJulianChronology[paramInt - 1];
    } catch (ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException) {
      throw new IllegalArgumentException("Invalid min days in first week: " + paramInt);
    } 
    if (julianChronology == null)
      synchronized (arrayOfJulianChronology) {
        julianChronology = arrayOfJulianChronology[paramInt - 1];
        if (julianChronology == null) {
          if (paramDateTimeZone == DateTimeZone.UTC) {
            julianChronology = new JulianChronology(null, null, paramInt);
          } else {
            julianChronology = getInstance(DateTimeZone.UTC, paramInt);
            julianChronology = new JulianChronology(ZonedChronology.getInstance(julianChronology, paramDateTimeZone), null, paramInt);
          } 
          arrayOfJulianChronology[paramInt - 1] = julianChronology;
        } 
      }  
    return julianChronology;
  }
  
  JulianChronology(Chronology paramChronology, Object paramObject, int paramInt) { super(paramChronology, paramObject, paramInt); }
  
  private Object readResolve() {
    Chronology chronology = getBase();
    int i = getMinimumDaysInFirstWeek();
    i = (i == 0) ? 4 : i;
    return (chronology == null) ? 
      getInstance(DateTimeZone.UTC, i) : 
      getInstance(chronology.getZone(), i);
  }
  
  public Chronology withUTC() { return INSTANCE_UTC; }
  
  public Chronology withZone(DateTimeZone paramDateTimeZone) {
    if (paramDateTimeZone == null)
      paramDateTimeZone = DateTimeZone.getDefault(); 
    if (paramDateTimeZone == getZone())
      return this; 
    return getInstance(paramDateTimeZone);
  }
  
  long getDateMidnightMillis(int paramInt1, int paramInt2, int paramInt3) throws IllegalArgumentException { return super.getDateMidnightMillis(adjustYearForSet(paramInt1), paramInt2, paramInt3); }
  
  boolean isLeapYear(int paramInt) { return ((paramInt & 0x3) == 0); }
  
  long calculateFirstDayOfYearMillis(int paramInt) {
    int j, i = paramInt - 1968;
    if (i <= 0) {
      j = i + 3 >> 2;
    } else {
      j = i >> 2;
      if (!isLeapYear(paramInt))
        j++; 
    } 
    long l = (i * 365L + j) * 86400000L;
    return l - 62035200000L;
  }
  
  int getMinYear() { return -292269054; }
  
  int getMaxYear() { return 292272992; }
  
  long getAverageMillisPerYear() { return 31557600000L; }
  
  long getAverageMillisPerYearDividedByTwo() { return 15778800000L; }
  
  long getAverageMillisPerMonth() { return 2629800000L; }
  
  long getApproxMillisAtEpochDividedByTwo() { return 31083663600000L; }
  
  protected void assemble(AssembledChronology.Fields paramFields) {
    if (getBase() == null) {
      super.assemble(paramFields);
      paramFields.year = new SkipDateTimeField(this, paramFields.year);
      paramFields.weekyear = new SkipDateTimeField(this, paramFields.weekyear);
    } 
  }
}
