package org.joda.time.chrono;

import java.util.concurrent.ConcurrentHashMap;
import org.joda.time.Chronology;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.field.DividedDateTimeField;
import org.joda.time.field.RemainderDateTimeField;

public final class ISOChronology extends AssembledChronology {
  private static final long serialVersionUID = -6212696554273812441L;
  
  private static final ISOChronology INSTANCE_UTC;
  
  private static final ConcurrentHashMap<DateTimeZone, ISOChronology> cCache = new ConcurrentHashMap();
  
  static  {
    INSTANCE_UTC = new ISOChronology(GregorianChronology.getInstanceUTC());
    cCache.put(DateTimeZone.UTC, INSTANCE_UTC);
  }
  
  public static ISOChronology getInstanceUTC() { return INSTANCE_UTC; }
  
  public static ISOChronology getInstance() { return getInstance(DateTimeZone.getDefault()); }
  
  public static ISOChronology getInstance(DateTimeZone paramDateTimeZone) {
    if (paramDateTimeZone == null)
      paramDateTimeZone = DateTimeZone.getDefault(); 
    ISOChronology iSOChronology = (ISOChronology)cCache.get(paramDateTimeZone);
    if (iSOChronology == null) {
      iSOChronology = new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, paramDateTimeZone));
      ISOChronology iSOChronology1 = (ISOChronology)cCache.putIfAbsent(paramDateTimeZone, iSOChronology);
      if (iSOChronology1 != null)
        iSOChronology = iSOChronology1; 
    } 
    return iSOChronology;
  }
  
  private ISOChronology(Chronology paramChronology) { super(paramChronology, null); }
  
  public Chronology withUTC() { return INSTANCE_UTC; }
  
  public Chronology withZone(DateTimeZone paramDateTimeZone) {
    if (paramDateTimeZone == null)
      paramDateTimeZone = DateTimeZone.getDefault(); 
    if (paramDateTimeZone == getZone())
      return this; 
    return getInstance(paramDateTimeZone);
  }
  
  public String toString() {
    String str = "ISOChronology";
    DateTimeZone dateTimeZone = getZone();
    if (dateTimeZone != null)
      str = str + '[' + dateTimeZone.getID() + ']'; 
    return str;
  }
  
  protected void assemble(AssembledChronology.Fields paramFields) {
    if (getBase().getZone() == DateTimeZone.UTC) {
      paramFields
        .centuryOfEra = new DividedDateTimeField(ISOYearOfEraDateTimeField.INSTANCE, DateTimeFieldType.centuryOfEra(), 100);
      paramFields.centuries = paramFields.centuryOfEra.getDurationField();
      paramFields
        .yearOfCentury = new RemainderDateTimeField((DividedDateTimeField)paramFields.centuryOfEra, DateTimeFieldType.yearOfCentury());
      paramFields
        .weekyearOfCentury = new RemainderDateTimeField((DividedDateTimeField)paramFields.centuryOfEra, paramFields.weekyears, DateTimeFieldType.weekyearOfCentury());
    } 
  }
  
  public boolean equals(Object paramObject) {
    if (this == paramObject)
      return true; 
    if (paramObject instanceof ISOChronology) {
      ISOChronology iSOChronology = (ISOChronology)paramObject;
      return getZone().equals(iSOChronology.getZone());
    } 
    return false;
  }
  
  public int hashCode() { return "ISO".hashCode() * 11 + getZone().hashCode(); }
  
  private Object writeReplace() { return new Stub(getZone()); }
}
