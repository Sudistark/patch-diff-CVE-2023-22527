package org.joda.time.chrono;

import java.util.concurrent.ConcurrentHashMap;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeZone;
import org.joda.time.field.SkipDateTimeField;

public final class CopticChronology extends BasicFixedMonthChronology {
  private static final long serialVersionUID = -5972804258688333942L;
  
  public static final int AM = 1;
  
  private static final DateTimeField ERA_FIELD = new BasicSingleEraDateTimeField("AM");
  
  private static final int MIN_YEAR = -292269337;
  
  private static final int MAX_YEAR = 292272708;
  
  private static final ConcurrentHashMap<DateTimeZone, CopticChronology[]> cCache = new ConcurrentHashMap();
  
  private static final CopticChronology INSTANCE_UTC = getInstance(DateTimeZone.UTC);
  
  public static CopticChronology getInstanceUTC() { return INSTANCE_UTC; }
  
  public static CopticChronology getInstance() { return getInstance(DateTimeZone.getDefault(), 4); }
  
  public static CopticChronology getInstance(DateTimeZone paramDateTimeZone) { return getInstance(paramDateTimeZone, 4); }
  
  public static CopticChronology getInstance(DateTimeZone paramDateTimeZone, int paramInt) {
    CopticChronology copticChronology;
    if (paramDateTimeZone == null)
      paramDateTimeZone = DateTimeZone.getDefault(); 
    CopticChronology[] arrayOfCopticChronology = (CopticChronology[])cCache.get(paramDateTimeZone);
    if (arrayOfCopticChronology == null) {
      arrayOfCopticChronology = new CopticChronology[7];
      CopticChronology[] arrayOfCopticChronology1 = (CopticChronology[])cCache.putIfAbsent(paramDateTimeZone, arrayOfCopticChronology);
      if (arrayOfCopticChronology1 != null)
        arrayOfCopticChronology = arrayOfCopticChronology1; 
    } 
    try {
      copticChronology = arrayOfCopticChronology[paramInt - 1];
    } catch (ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException) {
      throw new IllegalArgumentException("Invalid min days in first week: " + paramInt);
    } 
    if (copticChronology == null)
      synchronized (arrayOfCopticChronology) {
        copticChronology = arrayOfCopticChronology[paramInt - 1];
        if (copticChronology == null) {
          if (paramDateTimeZone == DateTimeZone.UTC) {
            copticChronology = new CopticChronology(null, null, paramInt);
            DateTime dateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, copticChronology);
            copticChronology = new CopticChronology(LimitChronology.getInstance(copticChronology, dateTime, null), null, paramInt);
          } else {
            copticChronology = getInstance(DateTimeZone.UTC, paramInt);
            copticChronology = new CopticChronology(ZonedChronology.getInstance(copticChronology, paramDateTimeZone), null, paramInt);
          } 
          arrayOfCopticChronology[paramInt - 1] = copticChronology;
        } 
      }  
    return copticChronology;
  }
  
  CopticChronology(Chronology paramChronology, Object paramObject, int paramInt) { super(paramChronology, paramObject, paramInt); }
  
  private Object readResolve() {
    Chronology chronology = getBase();
    int i = getMinimumDaysInFirstWeek();
    i = (i == 0) ? 4 : i;
    return (chronology == null) ? 
      getInstance(DateTimeZone.UTC, i) : 
      getInstance(chronology.getZone(), i);
  }
  
  public Chronology withUTC() { return INSTANCE_UTC; }
  
  public Chronology withZone(DateTimeZone paramDateTimeZone) {
    if (paramDateTimeZone == null)
      paramDateTimeZone = DateTimeZone.getDefault(); 
    if (paramDateTimeZone == getZone())
      return this; 
    return getInstance(paramDateTimeZone);
  }
  
  boolean isLeapDay(long paramLong) { return (dayOfMonth().get(paramLong) == 6 && monthOfYear().isLeap(paramLong)); }
  
  long calculateFirstDayOfYearMillis(int paramInt) {
    int j, i = paramInt - 1687;
    if (i <= 0) {
      j = i + 3 >> 2;
    } else {
      j = i >> 2;
      if (!isLeapYear(paramInt))
        j++; 
    } 
    long l = (i * 365L + j) * 86400000L;
    return l + 21859200000L;
  }
  
  int getMinYear() { return -292269337; }
  
  int getMaxYear() { return 292272708; }
  
  long getApproxMillisAtEpochDividedByTwo() { return 26607895200000L; }
  
  protected void assemble(AssembledChronology.Fields paramFields) {
    if (getBase() == null) {
      super.assemble(paramFields);
      paramFields.year = new SkipDateTimeField(this, paramFields.year);
      paramFields.weekyear = new SkipDateTimeField(this, paramFields.weekyear);
      paramFields.era = ERA_FIELD;
      paramFields.monthOfYear = new BasicMonthOfYearDateTimeField(this, 13);
      paramFields.months = paramFields.monthOfYear.getDurationField();
    } 
  }
}
