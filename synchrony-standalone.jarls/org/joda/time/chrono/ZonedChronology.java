package org.joda.time.chrono;

import java.util.HashMap;
import org.joda.time.Chronology;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;
import org.joda.time.IllegalInstantException;

public final class ZonedChronology extends AssembledChronology {
  private static final long serialVersionUID = -1079258847191166848L;
  
  private static final long NEAR_ZERO = 604800000L;
  
  public static ZonedChronology getInstance(Chronology paramChronology, DateTimeZone paramDateTimeZone) {
    if (paramChronology == null)
      throw new IllegalArgumentException("Must supply a chronology"); 
    paramChronology = paramChronology.withUTC();
    if (paramChronology == null)
      throw new IllegalArgumentException("UTC chronology must not be null"); 
    if (paramDateTimeZone == null)
      throw new IllegalArgumentException("DateTimeZone must not be null"); 
    return new ZonedChronology(paramChronology, paramDateTimeZone);
  }
  
  static boolean useTimeArithmetic(DurationField paramDurationField) { return (paramDurationField != null && paramDurationField.getUnitMillis() < 43200000L); }
  
  private ZonedChronology(Chronology paramChronology, DateTimeZone paramDateTimeZone) { super(paramChronology, paramDateTimeZone); }
  
  public DateTimeZone getZone() { return (DateTimeZone)getParam(); }
  
  public Chronology withUTC() { return getBase(); }
  
  public Chronology withZone(DateTimeZone paramDateTimeZone) {
    if (paramDateTimeZone == null)
      paramDateTimeZone = DateTimeZone.getDefault(); 
    if (paramDateTimeZone == getParam())
      return this; 
    if (paramDateTimeZone == DateTimeZone.UTC)
      return getBase(); 
    return new ZonedChronology(getBase(), paramDateTimeZone);
  }
  
  public long getDateTimeMillis(int paramInt1, int paramInt2, int paramInt3, int paramInt4) throws IllegalArgumentException { return localToUTC(getBase()
        .getDateTimeMillis(paramInt1, paramInt2, paramInt3, paramInt4)); }
  
  public long getDateTimeMillis(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6, int paramInt7) throws IllegalArgumentException { return localToUTC(getBase()
        .getDateTimeMillis(paramInt1, paramInt2, paramInt3, paramInt4, paramInt5, paramInt6, paramInt7)); }
  
  public long getDateTimeMillis(long paramLong, int paramInt1, int paramInt2, int paramInt3, int paramInt4) throws IllegalArgumentException {
    return localToUTC(getBase()
        .getDateTimeMillis(paramLong + getZone().getOffset(paramLong), paramInt1, paramInt2, paramInt3, paramInt4));
  }
  
  private long localToUTC(long paramLong) {
    if (paramLong == Float.MAX_VALUE)
      return Float.MAX_VALUE; 
    if (paramLong == Float.MIN_VALUE)
      return Float.MIN_VALUE; 
    DateTimeZone dateTimeZone = getZone();
    int i = dateTimeZone.getOffsetFromLocal(paramLong);
    long l = paramLong - i;
    if (paramLong > 604800000L && l < 0L)
      return Float.MAX_VALUE; 
    if (paramLong < -604800000L && l > 0L)
      return Float.MIN_VALUE; 
    int j = dateTimeZone.getOffset(l);
    if (i != j)
      throw new IllegalInstantException(paramLong, dateTimeZone.getID()); 
    return l;
  }
  
  protected void assemble(AssembledChronology.Fields paramFields) {
    HashMap hashMap = new HashMap();
    paramFields.eras = convertField(paramFields.eras, hashMap);
    paramFields.centuries = convertField(paramFields.centuries, hashMap);
    paramFields.years = convertField(paramFields.years, hashMap);
    paramFields.months = convertField(paramFields.months, hashMap);
    paramFields.weekyears = convertField(paramFields.weekyears, hashMap);
    paramFields.weeks = convertField(paramFields.weeks, hashMap);
    paramFields.days = convertField(paramFields.days, hashMap);
    paramFields.halfdays = convertField(paramFields.halfdays, hashMap);
    paramFields.hours = convertField(paramFields.hours, hashMap);
    paramFields.minutes = convertField(paramFields.minutes, hashMap);
    paramFields.seconds = convertField(paramFields.seconds, hashMap);
    paramFields.millis = convertField(paramFields.millis, hashMap);
    paramFields.year = convertField(paramFields.year, hashMap);
    paramFields.yearOfEra = convertField(paramFields.yearOfEra, hashMap);
    paramFields.yearOfCentury = convertField(paramFields.yearOfCentury, hashMap);
    paramFields.centuryOfEra = convertField(paramFields.centuryOfEra, hashMap);
    paramFields.era = convertField(paramFields.era, hashMap);
    paramFields.dayOfWeek = convertField(paramFields.dayOfWeek, hashMap);
    paramFields.dayOfMonth = convertField(paramFields.dayOfMonth, hashMap);
    paramFields.dayOfYear = convertField(paramFields.dayOfYear, hashMap);
    paramFields.monthOfYear = convertField(paramFields.monthOfYear, hashMap);
    paramFields.weekOfWeekyear = convertField(paramFields.weekOfWeekyear, hashMap);
    paramFields.weekyear = convertField(paramFields.weekyear, hashMap);
    paramFields.weekyearOfCentury = convertField(paramFields.weekyearOfCentury, hashMap);
    paramFields.millisOfSecond = convertField(paramFields.millisOfSecond, hashMap);
    paramFields.millisOfDay = convertField(paramFields.millisOfDay, hashMap);
    paramFields.secondOfMinute = convertField(paramFields.secondOfMinute, hashMap);
    paramFields.secondOfDay = convertField(paramFields.secondOfDay, hashMap);
    paramFields.minuteOfHour = convertField(paramFields.minuteOfHour, hashMap);
    paramFields.minuteOfDay = convertField(paramFields.minuteOfDay, hashMap);
    paramFields.hourOfDay = convertField(paramFields.hourOfDay, hashMap);
    paramFields.hourOfHalfday = convertField(paramFields.hourOfHalfday, hashMap);
    paramFields.clockhourOfDay = convertField(paramFields.clockhourOfDay, hashMap);
    paramFields.clockhourOfHalfday = convertField(paramFields.clockhourOfHalfday, hashMap);
    paramFields.halfdayOfDay = convertField(paramFields.halfdayOfDay, hashMap);
  }
  
  private DurationField convertField(DurationField paramDurationField, HashMap<Object, Object> paramHashMap) {
    if (paramDurationField == null || !paramDurationField.isSupported())
      return paramDurationField; 
    if (paramHashMap.containsKey(paramDurationField))
      return (DurationField)paramHashMap.get(paramDurationField); 
    ZonedDurationField zonedDurationField = new ZonedDurationField(paramDurationField, getZone());
    paramHashMap.put(paramDurationField, zonedDurationField);
    return zonedDurationField;
  }
  
  private DateTimeField convertField(DateTimeField paramDateTimeField, HashMap<Object, Object> paramHashMap) {
    if (paramDateTimeField == null || !paramDateTimeField.isSupported())
      return paramDateTimeField; 
    if (paramHashMap.containsKey(paramDateTimeField))
      return (DateTimeField)paramHashMap.get(paramDateTimeField); 
    ZonedDateTimeField zonedDateTimeField = new ZonedDateTimeField(paramDateTimeField, getZone(), convertField(paramDateTimeField.getDurationField(), paramHashMap), convertField(paramDateTimeField.getRangeDurationField(), paramHashMap), convertField(paramDateTimeField.getLeapDurationField(), paramHashMap));
    paramHashMap.put(paramDateTimeField, zonedDateTimeField);
    return zonedDateTimeField;
  }
  
  public boolean equals(Object paramObject) {
    if (this == paramObject)
      return true; 
    if (!(paramObject instanceof ZonedChronology))
      return false; 
    ZonedChronology zonedChronology = (ZonedChronology)paramObject;
    return (
      getBase().equals(zonedChronology.getBase()) && 
      getZone().equals(zonedChronology.getZone()));
  }
  
  public int hashCode() { return 326565 + getZone().hashCode() * 11 + getBase().hashCode() * 7; }
  
  public String toString() { return "ZonedChronology[" + getBase() + ", " + getZone().getID() + ']'; }
}
