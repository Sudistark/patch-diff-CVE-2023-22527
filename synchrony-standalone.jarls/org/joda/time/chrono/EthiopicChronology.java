package org.joda.time.chrono;

import java.util.concurrent.ConcurrentHashMap;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeZone;
import org.joda.time.field.SkipDateTimeField;

public final class EthiopicChronology extends BasicFixedMonthChronology {
  private static final long serialVersionUID = -5972804258688333942L;
  
  public static final int EE = 1;
  
  private static final DateTimeField ERA_FIELD = new BasicSingleEraDateTimeField("EE");
  
  private static final int MIN_YEAR = -292269337;
  
  private static final int MAX_YEAR = 292272984;
  
  private static final ConcurrentHashMap<DateTimeZone, EthiopicChronology[]> cCache = new ConcurrentHashMap();
  
  private static final EthiopicChronology INSTANCE_UTC = getInstance(DateTimeZone.UTC);
  
  public static EthiopicChronology getInstanceUTC() { return INSTANCE_UTC; }
  
  public static EthiopicChronology getInstance() { return getInstance(DateTimeZone.getDefault(), 4); }
  
  public static EthiopicChronology getInstance(DateTimeZone paramDateTimeZone) { return getInstance(paramDateTimeZone, 4); }
  
  public static EthiopicChronology getInstance(DateTimeZone paramDateTimeZone, int paramInt) {
    EthiopicChronology ethiopicChronology;
    if (paramDateTimeZone == null)
      paramDateTimeZone = DateTimeZone.getDefault(); 
    EthiopicChronology[] arrayOfEthiopicChronology = (EthiopicChronology[])cCache.get(paramDateTimeZone);
    if (arrayOfEthiopicChronology == null) {
      arrayOfEthiopicChronology = new EthiopicChronology[7];
      EthiopicChronology[] arrayOfEthiopicChronology1 = (EthiopicChronology[])cCache.putIfAbsent(paramDateTimeZone, arrayOfEthiopicChronology);
      if (arrayOfEthiopicChronology1 != null)
        arrayOfEthiopicChronology = arrayOfEthiopicChronology1; 
    } 
    try {
      ethiopicChronology = arrayOfEthiopicChronology[paramInt - 1];
    } catch (ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException) {
      throw new IllegalArgumentException("Invalid min days in first week: " + paramInt);
    } 
    if (ethiopicChronology == null)
      synchronized (arrayOfEthiopicChronology) {
        ethiopicChronology = arrayOfEthiopicChronology[paramInt - 1];
        if (ethiopicChronology == null) {
          if (paramDateTimeZone == DateTimeZone.UTC) {
            ethiopicChronology = new EthiopicChronology(null, null, paramInt);
            DateTime dateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, ethiopicChronology);
            ethiopicChronology = new EthiopicChronology(LimitChronology.getInstance(ethiopicChronology, dateTime, null), null, paramInt);
          } else {
            ethiopicChronology = getInstance(DateTimeZone.UTC, paramInt);
            ethiopicChronology = new EthiopicChronology(ZonedChronology.getInstance(ethiopicChronology, paramDateTimeZone), null, paramInt);
          } 
          arrayOfEthiopicChronology[paramInt - 1] = ethiopicChronology;
        } 
      }  
    return ethiopicChronology;
  }
  
  EthiopicChronology(Chronology paramChronology, Object paramObject, int paramInt) { super(paramChronology, paramObject, paramInt); }
  
  private Object readResolve() {
    Chronology chronology = getBase();
    return (chronology == null) ? 
      getInstance(DateTimeZone.UTC, getMinimumDaysInFirstWeek()) : 
      getInstance(chronology.getZone(), getMinimumDaysInFirstWeek());
  }
  
  public Chronology withUTC() { return INSTANCE_UTC; }
  
  public Chronology withZone(DateTimeZone paramDateTimeZone) {
    if (paramDateTimeZone == null)
      paramDateTimeZone = DateTimeZone.getDefault(); 
    if (paramDateTimeZone == getZone())
      return this; 
    return getInstance(paramDateTimeZone);
  }
  
  boolean isLeapDay(long paramLong) { return (dayOfMonth().get(paramLong) == 6 && monthOfYear().isLeap(paramLong)); }
  
  long calculateFirstDayOfYearMillis(int paramInt) {
    int j, i = paramInt - 1963;
    if (i <= 0) {
      j = i + 3 >> 2;
    } else {
      j = i >> 2;
      if (!isLeapYear(paramInt))
        j++; 
    } 
    long l = (i * 365L + j) * 86400000L;
    return l + 21859200000L;
  }
  
  int getMinYear() { return -292269337; }
  
  int getMaxYear() { return 292272984; }
  
  long getApproxMillisAtEpochDividedByTwo() { return 30962844000000L; }
  
  protected void assemble(AssembledChronology.Fields paramFields) {
    if (getBase() == null) {
      super.assemble(paramFields);
      paramFields.year = new SkipDateTimeField(this, paramFields.year);
      paramFields.weekyear = new SkipDateTimeField(this, paramFields.weekyear);
      paramFields.era = ERA_FIELD;
      paramFields.monthOfYear = new BasicMonthOfYearDateTimeField(this, 13);
      paramFields.months = paramFields.monthOfYear.getDurationField();
    } 
  }
}
