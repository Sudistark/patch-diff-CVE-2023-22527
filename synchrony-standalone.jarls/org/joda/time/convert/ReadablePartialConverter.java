package org.joda.time.convert;

import org.joda.time.Chronology;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.ReadablePartial;

class ReadablePartialConverter extends AbstractConverter implements PartialConverter {
  static final ReadablePartialConverter INSTANCE = new ReadablePartialConverter();
  
  public Chronology getChronology(Object paramObject, DateTimeZone paramDateTimeZone) { return getChronology(paramObject, (Chronology)null).withZone(paramDateTimeZone); }
  
  public Chronology getChronology(Object paramObject, Chronology paramChronology) {
    if (paramChronology == null) {
      paramChronology = ((ReadablePartial)paramObject).getChronology();
      paramChronology = DateTimeUtils.getChronology(paramChronology);
    } 
    return paramChronology;
  }
  
  public int[] getPartialValues(ReadablePartial paramReadablePartial, Object paramObject, Chronology paramChronology) {
    ReadablePartial readablePartial = (ReadablePartial)paramObject;
    int i = paramReadablePartial.size();
    int[] arrayOfInt = new int[i];
    for (byte b = 0; b < i; b++)
      arrayOfInt[b] = readablePartial.get(paramReadablePartial.getFieldType(b)); 
    paramChronology.validate(paramReadablePartial, arrayOfInt);
    return arrayOfInt;
  }
  
  public Class<?> getSupportedType() { return ReadablePartial.class; }
}
