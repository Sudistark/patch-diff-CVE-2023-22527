package org.joda.time.format;

import java.util.Arrays;
import java.util.Locale;
import org.joda.time.Chronology;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.IllegalInstantException;

public class DateTimeParserBucket {
  private final Chronology iChrono;
  
  private final long iMillis;
  
  private final Locale iLocale;
  
  private final int iDefaultYear;
  
  private final DateTimeZone iDefaultZone;
  
  private final Integer iDefaultPivotYear;
  
  private DateTimeZone iZone;
  
  private Integer iOffset;
  
  private Integer iPivotYear;
  
  private SavedField[] iSavedFields;
  
  private int iSavedFieldsCount;
  
  private boolean iSavedFieldsShared;
  
  private Object iSavedState;
  
  @Deprecated
  public DateTimeParserBucket(long paramLong, Chronology paramChronology, Locale paramLocale) { this(paramLong, paramChronology, paramLocale, null, 2000); }
  
  @Deprecated
  public DateTimeParserBucket(long paramLong, Chronology paramChronology, Locale paramLocale, Integer paramInteger) { this(paramLong, paramChronology, paramLocale, paramInteger, 2000); }
  
  public DateTimeParserBucket(long paramLong, Chronology paramChronology, Locale paramLocale, Integer paramInteger, int paramInt) {
    paramChronology = DateTimeUtils.getChronology(paramChronology);
    this.iMillis = paramLong;
    this.iDefaultZone = paramChronology.getZone();
    this.iChrono = paramChronology.withUTC();
    this.iLocale = (paramLocale == null) ? Locale.getDefault() : paramLocale;
    this.iDefaultYear = paramInt;
    this.iDefaultPivotYear = paramInteger;
    this.iZone = this.iDefaultZone;
    this.iPivotYear = this.iDefaultPivotYear;
    this.iSavedFields = new SavedField[8];
  }
  
  public void reset() {
    this.iZone = this.iDefaultZone;
    this.iOffset = null;
    this.iPivotYear = this.iDefaultPivotYear;
    this.iSavedFieldsCount = 0;
    this.iSavedFieldsShared = false;
    this.iSavedState = null;
  }
  
  public long parseMillis(DateTimeParser paramDateTimeParser, CharSequence paramCharSequence) {
    reset();
    return doParseMillis(DateTimeParserInternalParser.of(paramDateTimeParser), paramCharSequence);
  }
  
  long doParseMillis(InternalParser paramInternalParser, CharSequence paramCharSequence) {
    int i = paramInternalParser.parseInto(this, paramCharSequence, 0);
    if (i >= 0) {
      if (i >= paramCharSequence.length())
        return computeMillis(true, paramCharSequence); 
    } else {
      i ^= 0xFFFFFFFF;
    } 
    throw new IllegalArgumentException(FormatUtils.createErrorMessage(paramCharSequence.toString(), i));
  }
  
  public Chronology getChronology() { return this.iChrono; }
  
  public Locale getLocale() { return this.iLocale; }
  
  public DateTimeZone getZone() { return this.iZone; }
  
  public void setZone(DateTimeZone paramDateTimeZone) {
    this.iSavedState = null;
    this.iZone = paramDateTimeZone;
  }
  
  @Deprecated
  public int getOffset() { return (this.iOffset != null) ? this.iOffset.intValue() : 0; }
  
  public Integer getOffsetInteger() { return this.iOffset; }
  
  @Deprecated
  public void setOffset(int paramInt) {
    this.iSavedState = null;
    this.iOffset = Integer.valueOf(paramInt);
  }
  
  public void setOffset(Integer paramInteger) {
    this.iSavedState = null;
    this.iOffset = paramInteger;
  }
  
  public Integer getPivotYear() { return this.iPivotYear; }
  
  @Deprecated
  public void setPivotYear(Integer paramInteger) { this.iPivotYear = paramInteger; }
  
  public void saveField(DateTimeField paramDateTimeField, int paramInt) { obtainSaveField().init(paramDateTimeField, paramInt); }
  
  public void saveField(DateTimeFieldType paramDateTimeFieldType, int paramInt) { obtainSaveField().init(paramDateTimeFieldType.getField(this.iChrono), paramInt); }
  
  public void saveField(DateTimeFieldType paramDateTimeFieldType, String paramString, Locale paramLocale) { obtainSaveField().init(paramDateTimeFieldType.getField(this.iChrono), paramString, paramLocale); }
  
  private SavedField obtainSaveField() {
    SavedField[] arrayOfSavedField = this.iSavedFields;
    int i = this.iSavedFieldsCount;
    if (i == arrayOfSavedField.length || this.iSavedFieldsShared) {
      SavedField[] arrayOfSavedField1 = new SavedField[(i == arrayOfSavedField.length) ? (i * 2) : arrayOfSavedField.length];
      System.arraycopy(arrayOfSavedField, 0, arrayOfSavedField1, 0, i);
      this.iSavedFields = arrayOfSavedField = arrayOfSavedField1;
      this.iSavedFieldsShared = false;
    } 
    this.iSavedState = null;
    SavedField savedField = arrayOfSavedField[i];
    if (savedField == null)
      savedField = arrayOfSavedField[i] = new SavedField(); 
    this.iSavedFieldsCount = i + 1;
    return savedField;
  }
  
  public Object saveState() {
    if (this.iSavedState == null)
      this.iSavedState = new SavedState(this); 
    return this.iSavedState;
  }
  
  public boolean restoreState(Object paramObject) {
    if (paramObject instanceof SavedState && (
      (SavedState)paramObject).restoreState(this)) {
      this.iSavedState = paramObject;
      return true;
    } 
    return false;
  }
  
  public long computeMillis() { return computeMillis(false, (CharSequence)null); }
  
  public long computeMillis(boolean paramBoolean) { return computeMillis(paramBoolean, (CharSequence)null); }
  
  public long computeMillis(boolean paramBoolean, String paramString) { return computeMillis(paramBoolean, paramString); }
  
  public long computeMillis(boolean paramBoolean, CharSequence paramCharSequence) {
    SavedField[] arrayOfSavedField = this.iSavedFields;
    int i = this.iSavedFieldsCount;
    if (this.iSavedFieldsShared) {
      this.iSavedFields = arrayOfSavedField = (SavedField[])this.iSavedFields.clone();
      this.iSavedFieldsShared = false;
    } 
    sort(arrayOfSavedField, i);
    if (i > 0) {
      DurationField durationField1 = DurationFieldType.months().getField(this.iChrono);
      DurationField durationField2 = DurationFieldType.days().getField(this.iChrono);
      DurationField durationField3 = (arrayOfSavedField[0]).iField.getDurationField();
      if (compareReverse(durationField3, durationField1) >= 0 && compareReverse(durationField3, durationField2) <= 0) {
        saveField(DateTimeFieldType.year(), this.iDefaultYear);
        return computeMillis(paramBoolean, paramCharSequence);
      } 
    } 
    long l = this.iMillis;
    try {
      byte b;
      for (b = 0; b < i; b++)
        l = arrayOfSavedField[b].set(l, paramBoolean); 
      if (paramBoolean)
        for (b = 0; b < i; b++) {
          if (!(arrayOfSavedField[b]).iField.isLenient())
            l = arrayOfSavedField[b].set(l, (b == i - 1)); 
        }  
    } catch (IllegalFieldValueException illegalFieldValueException) {
      if (paramCharSequence != null)
        illegalFieldValueException.prependMessage("Cannot parse \"" + paramCharSequence + '"'); 
      throw illegalFieldValueException;
    } 
    if (this.iOffset != null) {
      l -= this.iOffset.intValue();
    } else if (this.iZone != null) {
      int j = this.iZone.getOffsetFromLocal(l);
      l -= j;
      if (j != this.iZone.getOffset(l)) {
        String str = "Illegal instant due to time zone offset transition (" + this.iZone + ')';
        if (paramCharSequence != null)
          str = "Cannot parse \"" + paramCharSequence + "\": " + str; 
        throw new IllegalInstantException(str);
      } 
    } 
    return l;
  }
  
  private static void sort(SavedField[] paramArrayOfSavedField, int paramInt) {
    if (paramInt > 10) {
      Arrays.sort(paramArrayOfSavedField, 0, paramInt);
    } else {
      for (byte b = 0; b < paramInt; b++) {
        for (byte b1 = b; b1 && paramArrayOfSavedField[b1 - true].compareTo(paramArrayOfSavedField[b1]) > 0; b1--) {
          SavedField savedField = paramArrayOfSavedField[b1];
          paramArrayOfSavedField[b1] = paramArrayOfSavedField[b1 - true];
          paramArrayOfSavedField[b1 - true] = savedField;
        } 
      } 
    } 
  }
  
  static int compareReverse(DurationField paramDurationField1, DurationField paramDurationField2) {
    if (paramDurationField1 == null || !paramDurationField1.isSupported()) {
      if (paramDurationField2 == null || !paramDurationField2.isSupported())
        return 0; 
      return -1;
    } 
    if (paramDurationField2 == null || !paramDurationField2.isSupported())
      return 1; 
    return -paramDurationField1.compareTo(paramDurationField2);
  }
}
