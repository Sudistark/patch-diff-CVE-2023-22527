package org.joda.time.format;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import java.util.regex.Pattern;

public class PeriodFormatterBuilder {
  private static final int PRINT_ZERO_RARELY_FIRST = 1;
  
  private static final int PRINT_ZERO_RARELY_LAST = 2;
  
  private static final int PRINT_ZERO_IF_SUPPORTED = 3;
  
  private static final int PRINT_ZERO_ALWAYS = 4;
  
  private static final int PRINT_ZERO_NEVER = 5;
  
  private static final int YEARS = 0;
  
  private static final int MONTHS = 1;
  
  private static final int WEEKS = 2;
  
  private static final int DAYS = 3;
  
  private static final int HOURS = 4;
  
  private static final int MINUTES = 5;
  
  private static final int SECONDS = 6;
  
  private static final int MILLIS = 7;
  
  private static final int SECONDS_MILLIS = 8;
  
  private static final int SECONDS_OPTIONAL_MILLIS = 9;
  
  private static final int MAX_FIELD = 9;
  
  private static final ConcurrentMap<String, Pattern> PATTERNS = new ConcurrentHashMap();
  
  private int iMinPrintedDigits;
  
  private int iPrintZeroSetting;
  
  private int iMaxParsedDigits;
  
  private boolean iRejectSignedValues;
  
  private PeriodFieldAffix iPrefix;
  
  private List<Object> iElementPairs;
  
  private boolean iNotPrinter;
  
  private boolean iNotParser;
  
  private FieldFormatter[] iFieldFormatters;
  
  public PeriodFormatterBuilder() { clear(); }
  
  public PeriodFormatter toFormatter() {
    PeriodFormatter periodFormatter = toFormatter(this.iElementPairs, this.iNotPrinter, this.iNotParser);
    for (FieldFormatter fieldFormatter : this.iFieldFormatters) {
      if (fieldFormatter != null)
        fieldFormatter.finish(this.iFieldFormatters); 
    } 
    this.iFieldFormatters = (FieldFormatter[])this.iFieldFormatters.clone();
    return periodFormatter;
  }
  
  public PeriodPrinter toPrinter() {
    if (this.iNotPrinter)
      return null; 
    return toFormatter().getPrinter();
  }
  
  public PeriodParser toParser() {
    if (this.iNotParser)
      return null; 
    return toFormatter().getParser();
  }
  
  public void clear() {
    this.iMinPrintedDigits = 1;
    this.iPrintZeroSetting = 2;
    this.iMaxParsedDigits = 10;
    this.iRejectSignedValues = false;
    this.iPrefix = null;
    if (this.iElementPairs == null) {
      this.iElementPairs = new ArrayList();
    } else {
      this.iElementPairs.clear();
    } 
    this.iNotPrinter = false;
    this.iNotParser = false;
    this.iFieldFormatters = new FieldFormatter[10];
  }
  
  public PeriodFormatterBuilder append(PeriodFormatter paramPeriodFormatter) {
    if (paramPeriodFormatter == null)
      throw new IllegalArgumentException("No formatter supplied"); 
    clearPrefix();
    append0(paramPeriodFormatter.getPrinter(), paramPeriodFormatter.getParser());
    return this;
  }
  
  public PeriodFormatterBuilder append(PeriodPrinter paramPeriodPrinter, PeriodParser paramPeriodParser) {
    if (paramPeriodPrinter == null && paramPeriodParser == null)
      throw new IllegalArgumentException("No printer or parser supplied"); 
    clearPrefix();
    append0(paramPeriodPrinter, paramPeriodParser);
    return this;
  }
  
  public PeriodFormatterBuilder appendLiteral(String paramString) {
    if (paramString == null)
      throw new IllegalArgumentException("Literal must not be null"); 
    clearPrefix();
    Literal literal = new Literal(paramString);
    append0(literal, literal);
    return this;
  }
  
  public PeriodFormatterBuilder minimumPrintedDigits(int paramInt) {
    this.iMinPrintedDigits = paramInt;
    return this;
  }
  
  public PeriodFormatterBuilder maximumParsedDigits(int paramInt) {
    this.iMaxParsedDigits = paramInt;
    return this;
  }
  
  public PeriodFormatterBuilder rejectSignedValues(boolean paramBoolean) {
    this.iRejectSignedValues = paramBoolean;
    return this;
  }
  
  public PeriodFormatterBuilder printZeroRarelyLast() {
    this.iPrintZeroSetting = 2;
    return this;
  }
  
  public PeriodFormatterBuilder printZeroRarelyFirst() {
    this.iPrintZeroSetting = 1;
    return this;
  }
  
  public PeriodFormatterBuilder printZeroIfSupported() {
    this.iPrintZeroSetting = 3;
    return this;
  }
  
  public PeriodFormatterBuilder printZeroAlways() {
    this.iPrintZeroSetting = 4;
    return this;
  }
  
  public PeriodFormatterBuilder printZeroNever() {
    this.iPrintZeroSetting = 5;
    return this;
  }
  
  public PeriodFormatterBuilder appendPrefix(String paramString) {
    if (paramString == null)
      throw new IllegalArgumentException(); 
    return appendPrefix(new SimpleAffix(paramString));
  }
  
  public PeriodFormatterBuilder appendPrefix(String paramString1, String paramString2) {
    if (paramString1 == null || paramString2 == null)
      throw new IllegalArgumentException(); 
    return appendPrefix(new PluralAffix(paramString1, paramString2));
  }
  
  public PeriodFormatterBuilder appendPrefix(String[] paramArrayOfString1, String[] paramArrayOfString2) {
    if (paramArrayOfString1 == null || paramArrayOfString2 == null || paramArrayOfString1.length < 1 || paramArrayOfString1.length != paramArrayOfString2.length)
      throw new IllegalArgumentException(); 
    return appendPrefix(new RegExAffix(paramArrayOfString1, paramArrayOfString2));
  }
  
  private PeriodFormatterBuilder appendPrefix(PeriodFieldAffix paramPeriodFieldAffix) {
    CompositeAffix compositeAffix;
    if (paramPeriodFieldAffix == null)
      throw new IllegalArgumentException(); 
    if (this.iPrefix != null)
      compositeAffix = new CompositeAffix(this.iPrefix, paramPeriodFieldAffix); 
    this.iPrefix = compositeAffix;
    return this;
  }
  
  public PeriodFormatterBuilder appendYears() {
    appendField(0);
    return this;
  }
  
  public PeriodFormatterBuilder appendMonths() {
    appendField(1);
    return this;
  }
  
  public PeriodFormatterBuilder appendWeeks() {
    appendField(2);
    return this;
  }
  
  public PeriodFormatterBuilder appendDays() {
    appendField(3);
    return this;
  }
  
  public PeriodFormatterBuilder appendHours() {
    appendField(4);
    return this;
  }
  
  public PeriodFormatterBuilder appendMinutes() {
    appendField(5);
    return this;
  }
  
  public PeriodFormatterBuilder appendSeconds() {
    appendField(6);
    return this;
  }
  
  public PeriodFormatterBuilder appendSecondsWithMillis() {
    appendField(8);
    return this;
  }
  
  public PeriodFormatterBuilder appendSecondsWithOptionalMillis() {
    appendField(9);
    return this;
  }
  
  public PeriodFormatterBuilder appendMillis() {
    appendField(7);
    return this;
  }
  
  public PeriodFormatterBuilder appendMillis3Digit() {
    appendField(7, 3);
    return this;
  }
  
  private void appendField(int paramInt) { appendField(paramInt, this.iMinPrintedDigits); }
  
  private void appendField(int paramInt1, int paramInt2) {
    FieldFormatter fieldFormatter = new FieldFormatter(paramInt2, this.iPrintZeroSetting, this.iMaxParsedDigits, this.iRejectSignedValues, paramInt1, this.iFieldFormatters, this.iPrefix, null);
    append0(fieldFormatter, fieldFormatter);
    this.iFieldFormatters[paramInt1] = fieldFormatter;
    this.iPrefix = null;
  }
  
  public PeriodFormatterBuilder appendSuffix(String paramString) {
    if (paramString == null)
      throw new IllegalArgumentException(); 
    return appendSuffix(new SimpleAffix(paramString));
  }
  
  public PeriodFormatterBuilder appendSuffix(String paramString1, String paramString2) {
    if (paramString1 == null || paramString2 == null)
      throw new IllegalArgumentException(); 
    return appendSuffix(new PluralAffix(paramString1, paramString2));
  }
  
  public PeriodFormatterBuilder appendSuffix(String[] paramArrayOfString1, String[] paramArrayOfString2) {
    if (paramArrayOfString1 == null || paramArrayOfString2 == null || paramArrayOfString1.length < 1 || paramArrayOfString1.length != paramArrayOfString2.length)
      throw new IllegalArgumentException(); 
    return appendSuffix(new RegExAffix(paramArrayOfString1, paramArrayOfString2));
  }
  
  private PeriodFormatterBuilder appendSuffix(PeriodFieldAffix paramPeriodFieldAffix) {
    Object object2, object1;
    if (this.iElementPairs.size() > 0) {
      object1 = this.iElementPairs.get(this.iElementPairs.size() - 2);
      object2 = this.iElementPairs.get(this.iElementPairs.size() - 1);
    } else {
      object1 = null;
      object2 = null;
    } 
    if (object1 == null || object2 == null || object1 != object2 || !(object1 instanceof FieldFormatter))
      throw new IllegalStateException("No field to apply suffix to"); 
    clearPrefix();
    FieldFormatter fieldFormatter = new FieldFormatter((FieldFormatter)object1, paramPeriodFieldAffix);
    this.iElementPairs.set(this.iElementPairs.size() - 2, fieldFormatter);
    this.iElementPairs.set(this.iElementPairs.size() - 1, fieldFormatter);
    this.iFieldFormatters[fieldFormatter.getFieldType()] = fieldFormatter;
    return this;
  }
  
  public PeriodFormatterBuilder appendSeparator(String paramString) { return appendSeparator(paramString, paramString, null, true, true); }
  
  public PeriodFormatterBuilder appendSeparatorIfFieldsAfter(String paramString) { return appendSeparator(paramString, paramString, null, false, true); }
  
  public PeriodFormatterBuilder appendSeparatorIfFieldsBefore(String paramString) { return appendSeparator(paramString, paramString, null, true, false); }
  
  public PeriodFormatterBuilder appendSeparator(String paramString1, String paramString2) { return appendSeparator(paramString1, paramString2, null, true, true); }
  
  public PeriodFormatterBuilder appendSeparator(String paramString1, String paramString2, String[] paramArrayOfString) { return appendSeparator(paramString1, paramString2, paramArrayOfString, true, true); }
  
  private PeriodFormatterBuilder appendSeparator(String paramString1, String paramString2, String[] paramArrayOfString, boolean paramBoolean1, boolean paramBoolean2) {
    if (paramString1 == null || paramString2 == null)
      throw new IllegalArgumentException(); 
    clearPrefix();
    List list = this.iElementPairs;
    if (list.size() == 0) {
      if (paramBoolean2 && !paramBoolean1) {
        Separator separator = new Separator(paramString1, paramString2, paramArrayOfString, Literal.EMPTY, Literal.EMPTY, paramBoolean1, paramBoolean2);
        append0(separator, separator);
      } 
      return this;
    } 
    Separator separator1 = null;
    for (int i = list.size(); --i >= 0; ) {
      if (list.get(i) instanceof Separator) {
        separator1 = (Separator)list.get(i);
        list = list.subList(i + 1, list.size());
        break;
      } 
      i--;
    } 
    if (separator1 != null && list.size() == 0)
      throw new IllegalStateException("Cannot have two adjacent separators"); 
    Object[] arrayOfObject = createComposite(list);
    list.clear();
    Separator separator2 = new Separator(paramString1, paramString2, paramArrayOfString, (PeriodPrinter)arrayOfObject[0], (PeriodParser)arrayOfObject[1], paramBoolean1, paramBoolean2);
    list.add(separator2);
    list.add(separator2);
    return this;
  }
  
  private void clearPrefix() {
    if (this.iPrefix != null)
      throw new IllegalStateException("Prefix not followed by field"); 
    this.iPrefix = null;
  }
  
  private PeriodFormatterBuilder append0(PeriodPrinter paramPeriodPrinter, PeriodParser paramPeriodParser) {
    this.iElementPairs.add(paramPeriodPrinter);
    this.iElementPairs.add(paramPeriodParser);
    this.iNotPrinter |= ((paramPeriodPrinter == null));
    this.iNotParser |= ((paramPeriodParser == null));
    return this;
  }
  
  private static PeriodFormatter toFormatter(List<Object> paramList, boolean paramBoolean1, boolean paramBoolean2) {
    if (paramBoolean1 && paramBoolean2)
      throw new IllegalStateException("Builder has created neither a printer nor a parser"); 
    int i = paramList.size();
    if (i >= 2 && paramList.get(0) instanceof Separator) {
      Separator separator = (Separator)paramList.get(0);
      if (Separator.access$000(separator) == null && Separator.access$100(separator) == null) {
        PeriodFormatter periodFormatter = toFormatter(paramList.subList(2, i), paramBoolean1, paramBoolean2);
        separator = separator.finish(periodFormatter.getPrinter(), periodFormatter.getParser());
        return new PeriodFormatter(separator, separator);
      } 
    } 
    Object[] arrayOfObject = createComposite(paramList);
    if (paramBoolean1)
      return new PeriodFormatter(null, (PeriodParser)arrayOfObject[1]); 
    if (paramBoolean2)
      return new PeriodFormatter((PeriodPrinter)arrayOfObject[0], null); 
    return new PeriodFormatter((PeriodPrinter)arrayOfObject[0], (PeriodParser)arrayOfObject[1]);
  }
  
  private static Object[] createComposite(List<Object> paramList) {
    switch (paramList.size()) {
      case 0:
        return new Object[] { Literal.EMPTY, Literal.EMPTY };
      case 1:
        return new Object[] { paramList.get(0), paramList.get(1) };
    } 
    Composite composite = new Composite(paramList);
    return new Object[] { composite, composite };
  }
}
