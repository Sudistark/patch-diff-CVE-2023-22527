package org.joda.time.format;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Map;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;

public class DateTimeFormatterBuilder {
  private ArrayList<Object> iElementPairs = new ArrayList();
  
  private Object iFormatter;
  
  public DateTimeFormatter toFormatter() {
    Object object = getFormatter();
    InternalPrinter internalPrinter = null;
    if (isPrinter(object))
      internalPrinter = (InternalPrinter)object; 
    InternalParser internalParser = null;
    if (isParser(object))
      internalParser = (InternalParser)object; 
    if (internalPrinter != null || internalParser != null)
      return new DateTimeFormatter(internalPrinter, internalParser); 
    throw new UnsupportedOperationException("Both printing and parsing not supported");
  }
  
  public DateTimePrinter toPrinter() {
    Object object = getFormatter();
    if (isPrinter(object)) {
      InternalPrinter internalPrinter = (InternalPrinter)object;
      return InternalPrinterDateTimePrinter.of(internalPrinter);
    } 
    throw new UnsupportedOperationException("Printing is not supported");
  }
  
  public DateTimeParser toParser() {
    Object object = getFormatter();
    if (isParser(object)) {
      InternalParser internalParser = (InternalParser)object;
      return InternalParserDateTimeParser.of(internalParser);
    } 
    throw new UnsupportedOperationException("Parsing is not supported");
  }
  
  public boolean canBuildFormatter() { return isFormatter(getFormatter()); }
  
  public boolean canBuildPrinter() { return isPrinter(getFormatter()); }
  
  public boolean canBuildParser() { return isParser(getFormatter()); }
  
  public void clear() {
    this.iFormatter = null;
    this.iElementPairs.clear();
  }
  
  public DateTimeFormatterBuilder append(DateTimeFormatter paramDateTimeFormatter) {
    if (paramDateTimeFormatter == null)
      throw new IllegalArgumentException("No formatter supplied"); 
    return append0(paramDateTimeFormatter.getPrinter0(), paramDateTimeFormatter.getParser0());
  }
  
  public DateTimeFormatterBuilder append(DateTimePrinter paramDateTimePrinter) {
    checkPrinter(paramDateTimePrinter);
    return append0(DateTimePrinterInternalPrinter.of(paramDateTimePrinter), null);
  }
  
  public DateTimeFormatterBuilder append(DateTimeParser paramDateTimeParser) {
    checkParser(paramDateTimeParser);
    return append0(null, DateTimeParserInternalParser.of(paramDateTimeParser));
  }
  
  public DateTimeFormatterBuilder append(DateTimePrinter paramDateTimePrinter, DateTimeParser paramDateTimeParser) {
    checkPrinter(paramDateTimePrinter);
    checkParser(paramDateTimeParser);
    return append0(DateTimePrinterInternalPrinter.of(paramDateTimePrinter), DateTimeParserInternalParser.of(paramDateTimeParser));
  }
  
  public DateTimeFormatterBuilder append(DateTimePrinter paramDateTimePrinter, DateTimeParser[] paramArrayOfDateTimeParser) {
    if (paramDateTimePrinter != null)
      checkPrinter(paramDateTimePrinter); 
    if (paramArrayOfDateTimeParser == null)
      throw new IllegalArgumentException("No parsers supplied"); 
    int i = paramArrayOfDateTimeParser.length;
    if (i == 1) {
      if (paramArrayOfDateTimeParser[false] == null)
        throw new IllegalArgumentException("No parser supplied"); 
      return append0(DateTimePrinterInternalPrinter.of(paramDateTimePrinter), DateTimeParserInternalParser.of(paramArrayOfDateTimeParser[0]));
    } 
    InternalParser[] arrayOfInternalParser = new InternalParser[i];
    byte b;
    for (b = 0; b < i - 1; b++) {
      arrayOfInternalParser[b] = DateTimeParserInternalParser.of(paramArrayOfDateTimeParser[b]);
      if (DateTimeParserInternalParser.of(paramArrayOfDateTimeParser[b]) == null)
        throw new IllegalArgumentException("Incomplete parser array"); 
    } 
    arrayOfInternalParser[b] = DateTimeParserInternalParser.of(paramArrayOfDateTimeParser[b]);
    return append0(DateTimePrinterInternalPrinter.of(paramDateTimePrinter), new MatchingParser(arrayOfInternalParser));
  }
  
  public DateTimeFormatterBuilder appendOptional(DateTimeParser paramDateTimeParser) {
    checkParser(paramDateTimeParser);
    InternalParser[] arrayOfInternalParser = { DateTimeParserInternalParser.of(paramDateTimeParser), null };
    return append0(null, new MatchingParser(arrayOfInternalParser));
  }
  
  private void checkParser(DateTimeParser paramDateTimeParser) {
    if (paramDateTimeParser == null)
      throw new IllegalArgumentException("No parser supplied"); 
  }
  
  private void checkPrinter(DateTimePrinter paramDateTimePrinter) {
    if (paramDateTimePrinter == null)
      throw new IllegalArgumentException("No printer supplied"); 
  }
  
  private DateTimeFormatterBuilder append0(Object paramObject) {
    this.iFormatter = null;
    this.iElementPairs.add(paramObject);
    this.iElementPairs.add(paramObject);
    return this;
  }
  
  private DateTimeFormatterBuilder append0(InternalPrinter paramInternalPrinter, InternalParser paramInternalParser) {
    this.iFormatter = null;
    this.iElementPairs.add(paramInternalPrinter);
    this.iElementPairs.add(paramInternalParser);
    return this;
  }
  
  public DateTimeFormatterBuilder appendLiteral(char paramChar) { return append0(new CharacterLiteral(paramChar)); }
  
  public DateTimeFormatterBuilder appendLiteral(String paramString) {
    if (paramString == null)
      throw new IllegalArgumentException("Literal must not be null"); 
    switch (paramString.length()) {
      case 0:
        return this;
      case 1:
        return append0(new CharacterLiteral(paramString.charAt(0)));
    } 
    return append0(new StringLiteral(paramString));
  }
  
  public DateTimeFormatterBuilder appendDecimal(DateTimeFieldType paramDateTimeFieldType, int paramInt1, int paramInt2) {
    if (paramDateTimeFieldType == null)
      throw new IllegalArgumentException("Field type must not be null"); 
    if (paramInt2 < paramInt1)
      paramInt2 = paramInt1; 
    if (paramInt1 < 0 || paramInt2 <= 0)
      throw new IllegalArgumentException(); 
    if (paramInt1 <= 1)
      return append0(new UnpaddedNumber(paramDateTimeFieldType, paramInt2, false)); 
    return append0(new PaddedNumber(paramDateTimeFieldType, paramInt2, false, paramInt1));
  }
  
  public DateTimeFormatterBuilder appendFixedDecimal(DateTimeFieldType paramDateTimeFieldType, int paramInt) {
    if (paramDateTimeFieldType == null)
      throw new IllegalArgumentException("Field type must not be null"); 
    if (paramInt <= 0)
      throw new IllegalArgumentException("Illegal number of digits: " + paramInt); 
    return append0(new FixedNumber(paramDateTimeFieldType, paramInt, false));
  }
  
  public DateTimeFormatterBuilder appendSignedDecimal(DateTimeFieldType paramDateTimeFieldType, int paramInt1, int paramInt2) {
    if (paramDateTimeFieldType == null)
      throw new IllegalArgumentException("Field type must not be null"); 
    if (paramInt2 < paramInt1)
      paramInt2 = paramInt1; 
    if (paramInt1 < 0 || paramInt2 <= 0)
      throw new IllegalArgumentException(); 
    if (paramInt1 <= 1)
      return append0(new UnpaddedNumber(paramDateTimeFieldType, paramInt2, true)); 
    return append0(new PaddedNumber(paramDateTimeFieldType, paramInt2, true, paramInt1));
  }
  
  public DateTimeFormatterBuilder appendFixedSignedDecimal(DateTimeFieldType paramDateTimeFieldType, int paramInt) {
    if (paramDateTimeFieldType == null)
      throw new IllegalArgumentException("Field type must not be null"); 
    if (paramInt <= 0)
      throw new IllegalArgumentException("Illegal number of digits: " + paramInt); 
    return append0(new FixedNumber(paramDateTimeFieldType, paramInt, true));
  }
  
  public DateTimeFormatterBuilder appendText(DateTimeFieldType paramDateTimeFieldType) {
    if (paramDateTimeFieldType == null)
      throw new IllegalArgumentException("Field type must not be null"); 
    return append0(new TextField(paramDateTimeFieldType, false));
  }
  
  public DateTimeFormatterBuilder appendShortText(DateTimeFieldType paramDateTimeFieldType) {
    if (paramDateTimeFieldType == null)
      throw new IllegalArgumentException("Field type must not be null"); 
    return append0(new TextField(paramDateTimeFieldType, true));
  }
  
  public DateTimeFormatterBuilder appendFraction(DateTimeFieldType paramDateTimeFieldType, int paramInt1, int paramInt2) {
    if (paramDateTimeFieldType == null)
      throw new IllegalArgumentException("Field type must not be null"); 
    if (paramInt2 < paramInt1)
      paramInt2 = paramInt1; 
    if (paramInt1 < 0 || paramInt2 <= 0)
      throw new IllegalArgumentException(); 
    return append0(new Fraction(paramDateTimeFieldType, paramInt1, paramInt2));
  }
  
  public DateTimeFormatterBuilder appendFractionOfSecond(int paramInt1, int paramInt2) { return appendFraction(DateTimeFieldType.secondOfDay(), paramInt1, paramInt2); }
  
  public DateTimeFormatterBuilder appendFractionOfMinute(int paramInt1, int paramInt2) { return appendFraction(DateTimeFieldType.minuteOfDay(), paramInt1, paramInt2); }
  
  public DateTimeFormatterBuilder appendFractionOfHour(int paramInt1, int paramInt2) { return appendFraction(DateTimeFieldType.hourOfDay(), paramInt1, paramInt2); }
  
  public DateTimeFormatterBuilder appendFractionOfDay(int paramInt1, int paramInt2) { return appendFraction(DateTimeFieldType.dayOfYear(), paramInt1, paramInt2); }
  
  public DateTimeFormatterBuilder appendMillisOfSecond(int paramInt) { return appendDecimal(DateTimeFieldType.millisOfSecond(), paramInt, 3); }
  
  public DateTimeFormatterBuilder appendMillisOfDay(int paramInt) { return appendDecimal(DateTimeFieldType.millisOfDay(), paramInt, 8); }
  
  public DateTimeFormatterBuilder appendSecondOfMinute(int paramInt) { return appendDecimal(DateTimeFieldType.secondOfMinute(), paramInt, 2); }
  
  public DateTimeFormatterBuilder appendSecondOfDay(int paramInt) { return appendDecimal(DateTimeFieldType.secondOfDay(), paramInt, 5); }
  
  public DateTimeFormatterBuilder appendMinuteOfHour(int paramInt) { return appendDecimal(DateTimeFieldType.minuteOfHour(), paramInt, 2); }
  
  public DateTimeFormatterBuilder appendMinuteOfDay(int paramInt) { return appendDecimal(DateTimeFieldType.minuteOfDay(), paramInt, 4); }
  
  public DateTimeFormatterBuilder appendHourOfDay(int paramInt) { return appendDecimal(DateTimeFieldType.hourOfDay(), paramInt, 2); }
  
  public DateTimeFormatterBuilder appendClockhourOfDay(int paramInt) { return appendDecimal(DateTimeFieldType.clockhourOfDay(), paramInt, 2); }
  
  public DateTimeFormatterBuilder appendHourOfHalfday(int paramInt) { return appendDecimal(DateTimeFieldType.hourOfHalfday(), paramInt, 2); }
  
  public DateTimeFormatterBuilder appendClockhourOfHalfday(int paramInt) { return appendDecimal(DateTimeFieldType.clockhourOfHalfday(), paramInt, 2); }
  
  public DateTimeFormatterBuilder appendDayOfWeek(int paramInt) { return appendDecimal(DateTimeFieldType.dayOfWeek(), paramInt, 1); }
  
  public DateTimeFormatterBuilder appendDayOfMonth(int paramInt) { return appendDecimal(DateTimeFieldType.dayOfMonth(), paramInt, 2); }
  
  public DateTimeFormatterBuilder appendDayOfYear(int paramInt) { return appendDecimal(DateTimeFieldType.dayOfYear(), paramInt, 3); }
  
  public DateTimeFormatterBuilder appendWeekOfWeekyear(int paramInt) { return appendDecimal(DateTimeFieldType.weekOfWeekyear(), paramInt, 2); }
  
  public DateTimeFormatterBuilder appendWeekyear(int paramInt1, int paramInt2) { return appendSignedDecimal(DateTimeFieldType.weekyear(), paramInt1, paramInt2); }
  
  public DateTimeFormatterBuilder appendMonthOfYear(int paramInt) { return appendDecimal(DateTimeFieldType.monthOfYear(), paramInt, 2); }
  
  public DateTimeFormatterBuilder appendYear(int paramInt1, int paramInt2) { return appendSignedDecimal(DateTimeFieldType.year(), paramInt1, paramInt2); }
  
  public DateTimeFormatterBuilder appendTwoDigitYear(int paramInt) { return appendTwoDigitYear(paramInt, false); }
  
  public DateTimeFormatterBuilder appendTwoDigitYear(int paramInt, boolean paramBoolean) { return append0(new TwoDigitYear(DateTimeFieldType.year(), paramInt, paramBoolean)); }
  
  public DateTimeFormatterBuilder appendTwoDigitWeekyear(int paramInt) { return appendTwoDigitWeekyear(paramInt, false); }
  
  public DateTimeFormatterBuilder appendTwoDigitWeekyear(int paramInt, boolean paramBoolean) { return append0(new TwoDigitYear(DateTimeFieldType.weekyear(), paramInt, paramBoolean)); }
  
  public DateTimeFormatterBuilder appendYearOfEra(int paramInt1, int paramInt2) { return appendDecimal(DateTimeFieldType.yearOfEra(), paramInt1, paramInt2); }
  
  public DateTimeFormatterBuilder appendYearOfCentury(int paramInt1, int paramInt2) { return appendDecimal(DateTimeFieldType.yearOfCentury(), paramInt1, paramInt2); }
  
  public DateTimeFormatterBuilder appendCenturyOfEra(int paramInt1, int paramInt2) { return appendSignedDecimal(DateTimeFieldType.centuryOfEra(), paramInt1, paramInt2); }
  
  public DateTimeFormatterBuilder appendHalfdayOfDayText() { return appendText(DateTimeFieldType.halfdayOfDay()); }
  
  public DateTimeFormatterBuilder appendDayOfWeekText() { return appendText(DateTimeFieldType.dayOfWeek()); }
  
  public DateTimeFormatterBuilder appendDayOfWeekShortText() { return appendShortText(DateTimeFieldType.dayOfWeek()); }
  
  public DateTimeFormatterBuilder appendMonthOfYearText() { return appendText(DateTimeFieldType.monthOfYear()); }
  
  public DateTimeFormatterBuilder appendMonthOfYearShortText() { return appendShortText(DateTimeFieldType.monthOfYear()); }
  
  public DateTimeFormatterBuilder appendEraText() { return appendText(DateTimeFieldType.era()); }
  
  public DateTimeFormatterBuilder appendTimeZoneName() { return append0(new TimeZoneName(0, null), null); }
  
  public DateTimeFormatterBuilder appendTimeZoneName(Map<String, DateTimeZone> paramMap) {
    TimeZoneName timeZoneName = new TimeZoneName(0, paramMap);
    return append0(timeZoneName, timeZoneName);
  }
  
  public DateTimeFormatterBuilder appendTimeZoneShortName() { return append0(new TimeZoneName(1, null), null); }
  
  public DateTimeFormatterBuilder appendTimeZoneShortName(Map<String, DateTimeZone> paramMap) {
    TimeZoneName timeZoneName = new TimeZoneName(1, paramMap);
    return append0(timeZoneName, timeZoneName);
  }
  
  public DateTimeFormatterBuilder appendTimeZoneId() { return append0(TimeZoneId.INSTANCE, TimeZoneId.INSTANCE); }
  
  public DateTimeFormatterBuilder appendTimeZoneOffset(String paramString, boolean paramBoolean, int paramInt1, int paramInt2) { return append0(new TimeZoneOffset(paramString, paramString, paramBoolean, paramInt1, paramInt2)); }
  
  public DateTimeFormatterBuilder appendTimeZoneOffset(String paramString1, String paramString2, boolean paramBoolean, int paramInt1, int paramInt2) { return append0(new TimeZoneOffset(paramString1, paramString2, paramBoolean, paramInt1, paramInt2)); }
  
  public DateTimeFormatterBuilder appendPattern(String paramString) {
    DateTimeFormat.appendPatternTo(this, paramString);
    return this;
  }
  
  private Object getFormatter() {
    Object object = this.iFormatter;
    if (object == null) {
      if (this.iElementPairs.size() == 2) {
        Object object1 = this.iElementPairs.get(0);
        Object object2 = this.iElementPairs.get(1);
        if (object1 != null) {
          if (object1 == object2 || object2 == null)
            object = object1; 
        } else {
          object = object2;
        } 
      } 
      if (object == null)
        object = new Composite(this.iElementPairs); 
      this.iFormatter = object;
    } 
    return object;
  }
  
  private boolean isPrinter(Object paramObject) {
    if (paramObject instanceof InternalPrinter) {
      if (paramObject instanceof Composite)
        return ((Composite)paramObject).isPrinter(); 
      return true;
    } 
    return false;
  }
  
  private boolean isParser(Object paramObject) {
    if (paramObject instanceof InternalParser) {
      if (paramObject instanceof Composite)
        return ((Composite)paramObject).isParser(); 
      return true;
    } 
    return false;
  }
  
  private boolean isFormatter(Object paramObject) { return (isPrinter(paramObject) || isParser(paramObject)); }
  
  static void appendUnknownString(Appendable paramAppendable, int paramInt) throws IOException {
    for (int i = paramInt; --i >= 0;)
      paramAppendable.append('�'); 
  }
  
  static boolean csStartsWith(CharSequence paramCharSequence, int paramInt, String paramString) {
    int i = paramString.length();
    if (paramCharSequence.length() - paramInt < i)
      return false; 
    for (int j = 0; j < i; j++) {
      if (paramCharSequence.charAt(paramInt + j) != paramString.charAt(j))
        return false; 
    } 
    return true;
  }
  
  static boolean csStartsWithIgnoreCase(CharSequence paramCharSequence, int paramInt, String paramString) {
    int i = paramString.length();
    if (paramCharSequence.length() - paramInt < i)
      return false; 
    for (int j = 0; j < i; j++) {
      char c1 = paramCharSequence.charAt(paramInt + j);
      char c2 = paramString.charAt(j);
      if (c1 != c2) {
        char c3 = Character.toUpperCase(c1);
        char c4 = Character.toUpperCase(c2);
        if (c3 != c4 && Character.toLowerCase(c3) != Character.toLowerCase(c4))
          return false; 
      } 
    } 
    return true;
  }
}
