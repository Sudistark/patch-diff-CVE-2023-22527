package org.joda.time.tz;

import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import org.joda.time.DateTimeUtils;

public class DefaultNameProvider implements NameProvider {
  private HashMap<Locale, Map<String, Map<String, Object>>> iByLocaleCache = createCache();
  
  private HashMap<Locale, Map<String, Map<Boolean, Object>>> iByLocaleCache2 = createCache();
  
  public String getShortName(Locale paramLocale, String paramString1, String paramString2) {
    String[] arrayOfString = getNameSet(paramLocale, paramString1, paramString2);
    return (arrayOfString == null) ? null : arrayOfString[0];
  }
  
  public String getName(Locale paramLocale, String paramString1, String paramString2) {
    String[] arrayOfString = getNameSet(paramLocale, paramString1, paramString2);
    return (arrayOfString == null) ? null : arrayOfString[1];
  }
  
  private String[] getNameSet(Locale paramLocale, String paramString1, String paramString2) {
    if (paramLocale == null || paramString1 == null || paramString2 == null)
      return null; 
    Map map1 = (Map)this.iByLocaleCache.get(paramLocale);
    if (map1 == null)
      this.iByLocaleCache.put(paramLocale, map1 = createCache()); 
    Map map2 = (Map)map1.get(paramString1);
    if (map2 == null) {
      map1.put(paramString1, map2 = createCache());
      String[][] arrayOfString1 = DateTimeUtils.getDateFormatSymbols(Locale.ENGLISH).getZoneStrings();
      Object object1 = null;
      for (String[] arrayOfString : arrayOfString1) {
        if (arrayOfString != null && arrayOfString.length >= 5 && paramString1.equals(arrayOfString[0])) {
          object1 = arrayOfString;
          break;
        } 
      } 
      String[][] arrayOfString2 = DateTimeUtils.getDateFormatSymbols(paramLocale).getZoneStrings();
      Object object2 = null;
      for (String[] arrayOfString : arrayOfString2) {
        if (arrayOfString != null && arrayOfString.length >= 5 && paramString1.equals(arrayOfString[0])) {
          object2 = arrayOfString;
          break;
        } 
      } 
      if (object1 != null && object2 != null) {
        map2.put(object1[2], new String[] { object2[2], object2[1] });
        if (object1[2].equals(object1[4])) {
          map2.put(object1[4] + "-Summer", new String[] { object2[4], object2[3] });
        } else {
          map2.put(object1[4], new String[] { object2[4], object2[3] });
        } 
      } 
    } 
    return (String[])map2.get(paramString2);
  }
  
  public String getShortName(Locale paramLocale, String paramString1, String paramString2, boolean paramBoolean) {
    String[] arrayOfString = getNameSet(paramLocale, paramString1, paramString2, paramBoolean);
    return (arrayOfString == null) ? null : arrayOfString[0];
  }
  
  public String getName(Locale paramLocale, String paramString1, String paramString2, boolean paramBoolean) {
    String[] arrayOfString = getNameSet(paramLocale, paramString1, paramString2, paramBoolean);
    return (arrayOfString == null) ? null : arrayOfString[1];
  }
  
  private String[] getNameSet(Locale paramLocale, String paramString1, String paramString2, boolean paramBoolean) {
    if (paramLocale == null || paramString1 == null || paramString2 == null)
      return null; 
    if (paramString1.startsWith("Etc/"))
      paramString1 = paramString1.substring(4); 
    Map map1 = (Map)this.iByLocaleCache2.get(paramLocale);
    if (map1 == null)
      this.iByLocaleCache2.put(paramLocale, map1 = createCache()); 
    Map map2 = (Map)map1.get(paramString1);
    if (map2 == null) {
      map1.put(paramString1, map2 = createCache());
      String[][] arrayOfString1 = DateTimeUtils.getDateFormatSymbols(Locale.ENGLISH).getZoneStrings();
      Object object1 = null;
      for (String[] arrayOfString : arrayOfString1) {
        if (arrayOfString != null && arrayOfString.length >= 5 && paramString1.equals(arrayOfString[0])) {
          object1 = arrayOfString;
          break;
        } 
      } 
      String[][] arrayOfString2 = DateTimeUtils.getDateFormatSymbols(paramLocale).getZoneStrings();
      Object object2 = null;
      for (String[] arrayOfString : arrayOfString2) {
        if (arrayOfString != null && arrayOfString.length >= 5 && paramString1.equals(arrayOfString[0])) {
          object2 = arrayOfString;
          break;
        } 
      } 
      if (object1 != null && object2 != null) {
        map2.put(Boolean.TRUE, new String[] { object2[2], object2[1] });
        map2.put(Boolean.FALSE, new String[] { object2[4], object2[3] });
      } 
    } 
    return (String[])map2.get(Boolean.valueOf(paramBoolean));
  }
  
  private HashMap createCache() { return new HashMap(7); }
}
