package org.joda.time.tz;

import org.joda.time.DateTimeZone;

public class CachedDateTimeZone extends DateTimeZone {
  private static final long serialVersionUID = 5472298452022250685L;
  
  private static final int cInfoCacheMask;
  
  private final DateTimeZone iZone;
  
  static  {
    int i;
    Object object;
    try {
      object = Integer.getInteger("org.joda.time.tz.CachedDateTimeZone.size");
    } catch (SecurityException securityException) {
      object = null;
    } 
    if (object == null) {
      i = 512;
    } else {
      i = object.intValue();
      i--;
      byte b = 0;
      while (i > 0) {
        b++;
        i >>= 1;
      } 
      i = 1 << b;
    } 
    cInfoCacheMask = i - 1;
  }
  
  public static CachedDateTimeZone forZone(DateTimeZone paramDateTimeZone) {
    if (paramDateTimeZone instanceof CachedDateTimeZone)
      return (CachedDateTimeZone)paramDateTimeZone; 
    return new CachedDateTimeZone(paramDateTimeZone);
  }
  
  private final Info[] iInfoCache = new Info[cInfoCacheMask + 1];
  
  private CachedDateTimeZone(DateTimeZone paramDateTimeZone) {
    super(paramDateTimeZone.getID());
    this.iZone = paramDateTimeZone;
  }
  
  public DateTimeZone getUncachedZone() { return this.iZone; }
  
  public String getNameKey(long paramLong) { return getInfo(paramLong).getNameKey(paramLong); }
  
  public int getOffset(long paramLong) { return getInfo(paramLong).getOffset(paramLong); }
  
  public int getStandardOffset(long paramLong) { return getInfo(paramLong).getStandardOffset(paramLong); }
  
  public boolean isFixed() { return this.iZone.isFixed(); }
  
  public long nextTransition(long paramLong) { return this.iZone.nextTransition(paramLong); }
  
  public long previousTransition(long paramLong) { return this.iZone.previousTransition(paramLong); }
  
  public int hashCode() { return this.iZone.hashCode(); }
  
  public boolean equals(Object paramObject) {
    if (this == paramObject)
      return true; 
    if (paramObject instanceof CachedDateTimeZone)
      return this.iZone.equals(((CachedDateTimeZone)paramObject).iZone); 
    return false;
  }
  
  private Info getInfo(long paramLong) {
    int i = (int)(paramLong >> 32);
    Info[] arrayOfInfo = this.iInfoCache;
    int j = i & cInfoCacheMask;
    Info info = arrayOfInfo[j];
    if (info == null || (int)(info.iPeriodStart >> 32) != i) {
      info = createInfo(paramLong);
      arrayOfInfo[j] = info;
    } 
    return info;
  }
  
  private Info createInfo(long paramLong) {
    long l1 = paramLong & 0xFFFFFFFF00000000L;
    Info info1 = new Info(this.iZone, l1);
    long l2 = l1 | 0xFFFFFFFFL;
    Info info2 = info1;
    while (true) {
      long l = this.iZone.nextTransition(l1);
      if (l == l1 || l > l2)
        break; 
      l1 = l;
      info2 = info2.iNextInfo = new Info(this.iZone, l1);
    } 
    return info1;
  }
}
