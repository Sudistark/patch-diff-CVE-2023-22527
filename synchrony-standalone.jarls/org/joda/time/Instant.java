package org.joda.time;

import java.io.Serializable;
import org.joda.convert.FromString;
import org.joda.time.base.AbstractInstant;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.convert.ConverterManager;
import org.joda.time.convert.InstantConverter;
import org.joda.time.field.FieldUtils;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.ISODateTimeFormat;

public final class Instant extends AbstractInstant implements ReadableInstant, Serializable {
  public static final Instant EPOCH = new Instant(0L);
  
  private static final long serialVersionUID = 3299096530934209741L;
  
  private final long iMillis;
  
  public static Instant now() { return new Instant(); }
  
  public static Instant ofEpochMilli(long paramLong) { return new Instant(paramLong); }
  
  public static Instant ofEpochSecond(long paramLong) { return new Instant(FieldUtils.safeMultiply(paramLong, 1000)); }
  
  @FromString
  public static Instant parse(String paramString) { return parse(paramString, ISODateTimeFormat.dateTimeParser()); }
  
  public static Instant parse(String paramString, DateTimeFormatter paramDateTimeFormatter) { return paramDateTimeFormatter.parseDateTime(paramString).toInstant(); }
  
  public Instant() { this.iMillis = DateTimeUtils.currentTimeMillis(); }
  
  public Instant(long paramLong) { this.iMillis = paramLong; }
  
  public Instant(Object paramObject) {
    InstantConverter instantConverter = ConverterManager.getInstance().getInstantConverter(paramObject);
    this.iMillis = instantConverter.getInstantMillis(paramObject, ISOChronology.getInstanceUTC());
  }
  
  public Instant toInstant() { return this; }
  
  public Instant withMillis(long paramLong) { return (paramLong == this.iMillis) ? this : new Instant(paramLong); }
  
  public Instant withDurationAdded(long paramLong, int paramInt) {
    if (paramLong == 0L || paramInt == 0)
      return this; 
    long l = getChronology().add(getMillis(), paramLong, paramInt);
    return withMillis(l);
  }
  
  public Instant withDurationAdded(ReadableDuration paramReadableDuration, int paramInt) {
    if (paramReadableDuration == null || paramInt == 0)
      return this; 
    return withDurationAdded(paramReadableDuration.getMillis(), paramInt);
  }
  
  public Instant plus(long paramLong) { return withDurationAdded(paramLong, 1); }
  
  public Instant plus(ReadableDuration paramReadableDuration) { return withDurationAdded(paramReadableDuration, 1); }
  
  public Instant minus(long paramLong) { return withDurationAdded(paramLong, -1); }
  
  public Instant minus(ReadableDuration paramReadableDuration) { return withDurationAdded(paramReadableDuration, -1); }
  
  public long getMillis() { return this.iMillis; }
  
  public Chronology getChronology() { return ISOChronology.getInstanceUTC(); }
  
  public DateTime toDateTime() { return new DateTime(getMillis(), ISOChronology.getInstance()); }
  
  @Deprecated
  public DateTime toDateTimeISO() { return toDateTime(); }
  
  public MutableDateTime toMutableDateTime() { return new MutableDateTime(getMillis(), ISOChronology.getInstance()); }
  
  @Deprecated
  public MutableDateTime toMutableDateTimeISO() { return toMutableDateTime(); }
}
