package org.joda.time.base;

import java.io.Serializable;
import org.joda.time.Chronology;
import org.joda.time.DateTimeUtils;
import org.joda.time.MutableInterval;
import org.joda.time.ReadWritableInterval;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePeriod;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.convert.ConverterManager;
import org.joda.time.convert.IntervalConverter;
import org.joda.time.field.FieldUtils;

public abstract class BaseInterval extends AbstractInterval implements ReadableInterval, Serializable {
  private static final long serialVersionUID = 576586928732749278L;
  
  protected BaseInterval(long paramLong1, long paramLong2, Chronology paramChronology) {
    this.iChronology = DateTimeUtils.getChronology(paramChronology);
    checkInterval(paramLong1, paramLong2);
    this.iStartMillis = paramLong1;
    this.iEndMillis = paramLong2;
  }
  
  protected BaseInterval(ReadableInstant paramReadableInstant1, ReadableInstant paramReadableInstant2) {
    this.iStartMillis = this.iEndMillis = DateTimeUtils.currentTimeMillis();
    this.iChronology = ISOChronology.getInstance();
    this.iChronology = DateTimeUtils.getInstantChronology(paramReadableInstant1);
    this.iStartMillis = DateTimeUtils.getInstantMillis(paramReadableInstant1);
    this.iEndMillis = DateTimeUtils.getInstantMillis(paramReadableInstant2);
    checkInterval(this.iStartMillis, this.iEndMillis);
  }
  
  protected BaseInterval(ReadableInstant paramReadableInstant, ReadableDuration paramReadableDuration) {
    this.iChronology = DateTimeUtils.getInstantChronology(paramReadableInstant);
    this.iStartMillis = DateTimeUtils.getInstantMillis(paramReadableInstant);
    long l = DateTimeUtils.getDurationMillis(paramReadableDuration);
    this.iEndMillis = FieldUtils.safeAdd(this.iStartMillis, l);
    checkInterval(this.iStartMillis, this.iEndMillis);
  }
  
  protected BaseInterval(ReadableDuration paramReadableDuration, ReadableInstant paramReadableInstant) {
    this.iChronology = DateTimeUtils.getInstantChronology(paramReadableInstant);
    this.iEndMillis = DateTimeUtils.getInstantMillis(paramReadableInstant);
    long l = DateTimeUtils.getDurationMillis(paramReadableDuration);
    this.iStartMillis = FieldUtils.safeAdd(this.iEndMillis, -l);
    checkInterval(this.iStartMillis, this.iEndMillis);
  }
  
  protected BaseInterval(ReadableInstant paramReadableInstant, ReadablePeriod paramReadablePeriod) {
    Chronology chronology = DateTimeUtils.getInstantChronology(paramReadableInstant);
    this.iChronology = chronology;
    this.iStartMillis = DateTimeUtils.getInstantMillis(paramReadableInstant);
    if (paramReadablePeriod == null) {
      this.iEndMillis = this.iStartMillis;
    } else {
      this.iEndMillis = chronology.add(paramReadablePeriod, this.iStartMillis, 1);
    } 
    checkInterval(this.iStartMillis, this.iEndMillis);
  }
  
  protected BaseInterval(ReadablePeriod paramReadablePeriod, ReadableInstant paramReadableInstant) {
    Chronology chronology = DateTimeUtils.getInstantChronology(paramReadableInstant);
    this.iChronology = chronology;
    this.iEndMillis = DateTimeUtils.getInstantMillis(paramReadableInstant);
    if (paramReadablePeriod == null) {
      this.iStartMillis = this.iEndMillis;
    } else {
      this.iStartMillis = chronology.add(paramReadablePeriod, this.iEndMillis, -1);
    } 
    checkInterval(this.iStartMillis, this.iEndMillis);
  }
  
  protected BaseInterval(Object paramObject, Chronology paramChronology) {
    IntervalConverter intervalConverter = ConverterManager.getInstance().getIntervalConverter(paramObject);
    if (intervalConverter.isReadableInterval(paramObject, paramChronology)) {
      ReadableInterval readableInterval = (ReadableInterval)paramObject;
      this.iChronology = (paramChronology != null) ? paramChronology : readableInterval.getChronology();
      this.iStartMillis = readableInterval.getStartMillis();
      this.iEndMillis = readableInterval.getEndMillis();
    } else if (this instanceof ReadWritableInterval) {
      intervalConverter.setInto((ReadWritableInterval)this, paramObject, paramChronology);
    } else {
      MutableInterval mutableInterval = new MutableInterval();
      intervalConverter.setInto(mutableInterval, paramObject, paramChronology);
      this.iChronology = mutableInterval.getChronology();
      this.iStartMillis = mutableInterval.getStartMillis();
      this.iEndMillis = mutableInterval.getEndMillis();
    } 
    checkInterval(this.iStartMillis, this.iEndMillis);
  }
  
  public Chronology getChronology() { return this.iChronology; }
  
  public long getStartMillis() { return this.iStartMillis; }
  
  public long getEndMillis() { return this.iEndMillis; }
  
  protected void setInterval(long paramLong1, long paramLong2, Chronology paramChronology) {
    checkInterval(paramLong1, paramLong2);
    this.iStartMillis = paramLong1;
    this.iEndMillis = paramLong2;
    this.iChronology = DateTimeUtils.getChronology(paramChronology);
  }
}
