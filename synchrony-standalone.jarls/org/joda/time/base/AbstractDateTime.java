package org.joda.time.base;

import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Locale;
import org.joda.convert.ToString;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.ReadableDateTime;
import org.joda.time.format.DateTimeFormat;

public abstract class AbstractDateTime extends AbstractInstant implements ReadableDateTime {
  public int get(DateTimeFieldType paramDateTimeFieldType) {
    if (paramDateTimeFieldType == null)
      throw new IllegalArgumentException("The DateTimeFieldType must not be null"); 
    return paramDateTimeFieldType.getField(getChronology()).get(getMillis());
  }
  
  public int getEra() { return getChronology().era().get(getMillis()); }
  
  public int getCenturyOfEra() { return getChronology().centuryOfEra().get(getMillis()); }
  
  public int getYearOfEra() { return getChronology().yearOfEra().get(getMillis()); }
  
  public int getYearOfCentury() { return getChronology().yearOfCentury().get(getMillis()); }
  
  public int getYear() { return getChronology().year().get(getMillis()); }
  
  public int getWeekyear() { return getChronology().weekyear().get(getMillis()); }
  
  public int getMonthOfYear() { return getChronology().monthOfYear().get(getMillis()); }
  
  public int getWeekOfWeekyear() { return getChronology().weekOfWeekyear().get(getMillis()); }
  
  public int getDayOfYear() { return getChronology().dayOfYear().get(getMillis()); }
  
  public int getDayOfMonth() { return getChronology().dayOfMonth().get(getMillis()); }
  
  public int getDayOfWeek() { return getChronology().dayOfWeek().get(getMillis()); }
  
  public int getHourOfDay() { return getChronology().hourOfDay().get(getMillis()); }
  
  public int getMinuteOfDay() { return getChronology().minuteOfDay().get(getMillis()); }
  
  public int getMinuteOfHour() { return getChronology().minuteOfHour().get(getMillis()); }
  
  public int getSecondOfDay() { return getChronology().secondOfDay().get(getMillis()); }
  
  public int getSecondOfMinute() { return getChronology().secondOfMinute().get(getMillis()); }
  
  public int getMillisOfDay() { return getChronology().millisOfDay().get(getMillis()); }
  
  public int getMillisOfSecond() { return getChronology().millisOfSecond().get(getMillis()); }
  
  public Calendar toCalendar(Locale paramLocale) {
    if (paramLocale == null)
      paramLocale = Locale.getDefault(); 
    DateTimeZone dateTimeZone = getZone();
    Calendar calendar = Calendar.getInstance(dateTimeZone.toTimeZone(), paramLocale);
    calendar.setTime(toDate());
    return calendar;
  }
  
  public GregorianCalendar toGregorianCalendar() {
    DateTimeZone dateTimeZone = getZone();
    GregorianCalendar gregorianCalendar = new GregorianCalendar(dateTimeZone.toTimeZone());
    gregorianCalendar.setTime(toDate());
    return gregorianCalendar;
  }
  
  @ToString
  public String toString() { return super.toString(); }
  
  public String toString(String paramString) {
    if (paramString == null)
      return toString(); 
    return DateTimeFormat.forPattern(paramString).print(this);
  }
  
  public String toString(String paramString, Locale paramLocale) throws IllegalArgumentException {
    if (paramString == null)
      return toString(); 
    return DateTimeFormat.forPattern(paramString).withLocale(paramLocale).print(this);
  }
}
