package compojure;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class response__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final Keyword const__2;
  
  public static final AFn const__3;
  
  public static final AFn const__4;
  
  public static final Object const__5;
  
  public static final Var const__6;
  
  public static final Var const__7;
  
  public static final Var const__8;
  
  public static final Var const__9;
  
  public static final ISeq const__10;
  
  public static final Var const__11;
  
  public static final Var const__12;
  
  public static final AFn const__16;
  
  public static final Keyword const__17;
  
  public static final AFn const__18;
  
  public static final Keyword const__19;
  
  public static final Keyword const__20;
  
  public static final Keyword const__21;
  
  public static final AFn const__22;
  
  public static final Keyword const__23;
  
  public static final Var const__24;
  
  public static final Var const__25;
  
  public static final Var const__26;
  
  public static final AFn const__27;
  
  public static final AFn const__28;
  
  public static final Keyword const__29;
  
  public static final Var const__30;
  
  public static final AFn const__31;
  
  public static final Object const__32;
  
  public static final Var const__33;
  
  public static final ISeq const__34;
  
  public static final AFn const__36;
  
  public static final AFn const__37;
  
  public static final Keyword const__38;
  
  public static final AFn const__39;
  
  public static final AFn const__40;
  
  public static final AFn const__41;
  
  public static final AFn const__42;
  
  public static final Var const__43;
  
  public static final AFn const__51;
  
  public static final Var const__52;
  
  public static final AFn const__56;
  
  public static final Var const__57;
  
  public static final Object const__58;
  
  public static final Object const__59;
  
  public static final Object const__60;
  
  public static final Object const__61;
  
  public static final Object const__62;
  
  public static final Object const__63;
  
  public static final Object const__64;
  
  public static final Object const__65;
  
  public static final Object const__66;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new response.fn__30441());
    const__43.setMeta((IPersistentMap)const__51);
    const__43.bindRoot(new response.send());
    const__52.setMeta((IPersistentMap)const__56);
    const__52.bindRoot(new response.guess_content_type());
    new Object[2][0] = const__38;
    new Object[2][1] = new response.fn__30512();
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "compojure.response")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "A protocol for generating Ring response maps" }));
    const__2 = (Keyword)RT.keyword(null, "doc");
    const__3 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "A protocol for generating Ring response maps" });
    const__4 = (AFn)Symbol.intern(null, "clojure.core");
    const__5 = RT.classForName("compojure.response.Renderable");
    const__6 = (Var)RT.var("clojure.core", "alter-meta!");
    const__7 = (Var)RT.var("compojure.response", "Renderable");
    const__8 = (Var)RT.var("clojure.core", "assoc");
    const__9 = (Var)RT.var("clojure.core", "assert-same-protocol");
    const__10 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "render")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Render `x` into a form suitable for the given request map.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "request")) })) })) }));
    const__11 = (Var)RT.var("clojure.core", "alter-var-root");
    const__12 = (Var)RT.var("clojure.core", "merge");
    const__16 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "compojure.response.Renderable"), RT.keyword(null, "on-interface"), RT.classForName("compojure.response.Renderable"), RT.keyword(null, "doc"), "A protocol that tells Compojure how to handle the return value of routes\n  defined by [[GET]], [[POST]], etc.\n\n  This protocol supports rendering strings, maps, functions, refs, files, seqs,\n  input streams and URLs by default, and may be extended to cover many custom\n  types." });
    const__17 = (Keyword)RT.keyword(null, "sigs");
    const__18 = (AFn)RT.map(new Object[] { RT.keyword(null, "render"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "render")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Render `x` into a form suitable for the given request map.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "request")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "request")) })), RT.keyword(null, "doc"), "Render `x` into a form suitable for the given request map." }) });
    const__19 = (Keyword)RT.keyword(null, "var");
    const__20 = (Keyword)RT.keyword(null, "method-map");
    const__21 = (Keyword)RT.keyword(null, "render");
    const__22 = (AFn)RT.map(new Object[] { RT.keyword(null, "render"), RT.keyword(null, "render") });
    const__23 = (Keyword)RT.keyword(null, "method-builders");
    const__24 = (Var)RT.var("clojure.core", "intern");
    const__25 = (Var)RT.var("clojure.core", "*ns*");
    const__26 = (Var)RT.var("clojure.core", "with-meta");
    const__27 = (AFn)((IObj)Symbol.intern(null, "render")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Render `x` into a form suitable for the given request map.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "request")) })) }));
    const__28 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "render")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Render `x` into a form suitable for the given request map.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "request")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "request")) })), RT.keyword(null, "doc"), "Render `x` into a form suitable for the given request map." });
    const__29 = (Keyword)RT.keyword(null, "protocol");
    const__30 = (Var)RT.var("clojure.core", "-reset-methods");
    const__31 = (AFn)Symbol.intern(null, "Renderable");
    const__32 = RT.classForName("compojure.response.Sendable");
    const__33 = (Var)RT.var("compojure.response", "Sendable");
    const__34 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "send*")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "request"), Symbol.intern(null, "respond"), Symbol.intern(null, "raise")) })) })) }));
    const__36 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "compojure.response.Sendable"), RT.keyword(null, "on-interface"), RT.classForName("compojure.response.Sendable"), RT.keyword(null, "doc"), "A protocol that tells Compojure how to handle the return value of\n  asynchronous routes, should they require special attention." });
    const__37 = (AFn)RT.map(new Object[] { RT.keyword(null, "send*"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "send*")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "request"), Symbol.intern(null, "respond"), Symbol.intern(null, "raise")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "request"), Symbol.intern(null, "respond"), Symbol.intern(null, "raise")) })), RT.keyword(null, "doc"), null }) });
    const__38 = (Keyword)RT.keyword(null, "send*");
    const__39 = (AFn)RT.map(new Object[] { RT.keyword(null, "send*"), RT.keyword(null, "send*") });
    const__40 = (AFn)((IObj)Symbol.intern(null, "send*")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "request"), Symbol.intern(null, "respond"), Symbol.intern(null, "raise")) })) }));
    const__41 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "send*")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "request"), Symbol.intern(null, "respond"), Symbol.intern(null, "raise")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "request"), Symbol.intern(null, "respond"), Symbol.intern(null, "raise")) })), RT.keyword(null, "doc"), null });
    const__42 = (AFn)Symbol.intern(null, "Sendable");
    const__43 = (Var)RT.var("compojure.response", "send");
    const__51 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "request"), Symbol.intern(null, "respond"), Symbol.intern(null, "raise")) })), RT.keyword(null, "doc"), "Send `x` as a Ring response. Checks to see if `x` satisfies [[Sendable]],\n  and if not, falls back to [[Renderable]].", RT.keyword(null, "line"), Integer.valueOf(22), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "compojure/response.clj" });
    const__52 = (Var)RT.var("compojure.response", "guess-content-type");
    const__56 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "response"), Symbol.intern(null, "name")) })), RT.keyword(null, "line"), Integer.valueOf(30), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "compojure/response.clj" });
    const__57 = (Var)RT.var("clojure.core", "extend");
    const__58 = RT.classForName("java.io.InputStream");
    const__59 = RT.classForName("clojure.lang.MultiFn");
    const__60 = RT.classForName("clojure.lang.ISeq");
    const__61 = RT.classForName("java.io.File");
    const__62 = RT.classForName("java.lang.String");
    const__63 = RT.classForName("clojure.lang.Fn");
    const__64 = RT.classForName("java.net.URL");
    const__65 = RT.classForName("clojure.lang.IDeref");
    const__66 = RT.classForName("clojure.lang.IPersistentMap");
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("compojure.response__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
