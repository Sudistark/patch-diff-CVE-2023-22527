package compojure;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class core__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__3;
  
  public static final AFn const__4;
  
  public static final Var const__5;
  
  public static final AFn const__14;
  
  public static final Var const__15;
  
  public static final AFn const__18;
  
  public static final Var const__19;
  
  public static final AFn const__22;
  
  public static final Var const__23;
  
  public static final AFn const__26;
  
  public static final Var const__27;
  
  public static final AFn const__30;
  
  public static final Var const__31;
  
  public static final AFn const__34;
  
  public static final Var const__35;
  
  public static final AFn const__38;
  
  public static final Var const__39;
  
  public static final AFn const__42;
  
  public static final Var const__43;
  
  public static final AFn const__46;
  
  public static final Var const__47;
  
  public static final AFn const__50;
  
  public static final Var const__51;
  
  public static final AFn const__54;
  
  public static final Var const__55;
  
  public static final AFn const__58;
  
  public static final Var const__59;
  
  public static final AFn const__62;
  
  public static final Var const__63;
  
  public static final AFn const__66;
  
  public static final Var const__67;
  
  public static final AFn const__70;
  
  public static final Var const__71;
  
  public static final AFn const__75;
  
  public static final Var const__76;
  
  public static final AFn const__79;
  
  public static final Var const__80;
  
  public static final AFn const__83;
  
  public static final Var const__84;
  
  public static final AFn const__87;
  
  public static final Var const__88;
  
  public static final AFn const__91;
  
  public static final Var const__92;
  
  public static final AFn const__95;
  
  public static final Var const__96;
  
  public static final AFn const__99;
  
  public static final Var const__100;
  
  public static final AFn const__103;
  
  public static final Var const__104;
  
  public static final AFn const__107;
  
  public static final Var const__108;
  
  public static final AFn const__111;
  
  public static final Var const__112;
  
  public static final AFn const__115;
  
  public static final Var const__116;
  
  public static final AFn const__119;
  
  public static final Var const__120;
  
  public static final AFn const__123;
  
  public static final Var const__124;
  
  public static final AFn const__127;
  
  public static final Var const__128;
  
  public static final AFn const__131;
  
  public static final Var const__132;
  
  public static final AFn const__135;
  
  public static final Var const__136;
  
  public static final AFn const__139;
  
  public static final Var const__140;
  
  public static final AFn const__143;
  
  public static final Var const__144;
  
  public static final AFn const__147;
  
  public static final Var const__148;
  
  public static final AFn const__151;
  
  public static final Var const__152;
  
  public static final AFn const__155;
  
  public static final Var const__156;
  
  public static final AFn const__159;
  
  public static final Var const__160;
  
  public static final AFn const__163;
  
  public static final Var const__164;
  
  public static final AFn const__167;
  
  public static final Var const__168;
  
  public static final AFn const__171;
  
  public static final Var const__172;
  
  public static final AFn const__175;
  
  public static final Var const__176;
  
  public static final AFn const__179;
  
  public static final Var const__180;
  
  public static final AFn const__183;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new core.fn__30935());
    const__5.setMeta((IPersistentMap)const__14);
    const__5.bindRoot(new core.form_method());
    const__15.setMeta((IPersistentMap)const__18);
    const__15.bindRoot(new core.method_matches_QMARK_());
    const__19.setMeta((IPersistentMap)const__22);
    const__19.bindRoot(new core.head_response());
    const__23.setMeta((IPersistentMap)const__26);
    const__23.bindRoot(new core.decode_route_params());
    const__27.setMeta((IPersistentMap)const__30);
    const__27.bindRoot(new core.assoc_route_params());
    const__31.setMeta((IPersistentMap)const__34);
    const__31.bindRoot(new core.route_matches());
    const__35.setMeta((IPersistentMap)const__38);
    const__35.bindRoot(new core.route_request());
    const__39.setMeta((IPersistentMap)const__42);
    const__39.bindRoot(new core.literal_QMARK_());
    const__43.setMeta((IPersistentMap)const__46);
    const__43.bindRoot(new core.prepare_route());
    const__47.setMeta((IPersistentMap)const__50);
    const__47.bindRoot(new core.and_binding());
    const__51.setMeta((IPersistentMap)const__54);
    const__51.bindRoot(new core.symbol_binding());
    const__55.setMeta((IPersistentMap)const__58);
    const__55.bindRoot(new core.application_binding());
    const__59.setMeta((IPersistentMap)const__62);
    const__59.bindRoot(new core.vector_bindings());
    const__63.setMeta((IPersistentMap)const__66);
    const__63.bindRoot(new core.warn_on__STAR__bindings_BANG_());
    const__67.setMeta((IPersistentMap)const__70);
    const__67.bindRoot(new core.application_symbols());
    const__71.setMeta((IPersistentMap)const__75);
    const__71.bindRoot(new core.let_request());
    ((Var)const__71)















































































































      
      .setMacro();
    const__76.setMeta((IPersistentMap)const__79);
    const__76.bindRoot(new core.wrap_route_middleware());
    const__80.setMeta((IPersistentMap)const__83);
    const__80.bindRoot(new core.wrap_route_info());
    const__84.setMeta((IPersistentMap)const__87);
    const__84.bindRoot(new core.wrap_route_matches());
    const__88.setMeta((IPersistentMap)const__91);
    const__88.bindRoot(new core.wrap_response());
    const__92.setMeta((IPersistentMap)const__95);
    const__92.bindRoot(new core.make_route());
    const__96.setMeta((IPersistentMap)const__99);
    const__96.bindRoot(new core.compile_route());
    const__100.setMeta((IPersistentMap)const__103);
    const__100.bindRoot(new core.routing());
    const__104.setMeta((IPersistentMap)const__107);
    const__104.bindRoot(new core.routes());
    const__108.setMeta((IPersistentMap)const__111);
    const__108.bindRoot(new core.defroutes());
    ((Var)const__108)






















































































      
      .setMacro();
    const__112.setMeta((IPersistentMap)const__115);
    const__112.bindRoot(new core.GET());
    ((Var)const__112)





      
      .setMacro();
    const__116.setMeta((IPersistentMap)const__119);
    const__116.bindRoot(new core.POST());
    ((Var)const__116)


      
      .setMacro();
    const__120.setMeta((IPersistentMap)const__123);
    const__120.bindRoot(new core.PUT());
    ((Var)const__120)


      
      .setMacro();
    const__124.setMeta((IPersistentMap)const__127);
    const__124.bindRoot(new core.DELETE());
    ((Var)const__124)


      
      .setMacro();
    const__128.setMeta((IPersistentMap)const__131);
    const__128.bindRoot(new core.HEAD());
    ((Var)const__128)


      
      .setMacro();
    const__132.setMeta((IPersistentMap)const__135);
    const__132.bindRoot(new core.OPTIONS());
    ((Var)const__132)


      
      .setMacro();
    const__136.setMeta((IPersistentMap)const__139);
    const__136.bindRoot(new core.PATCH());
    ((Var)const__136)


      
      .setMacro();
    const__140.setMeta((IPersistentMap)const__143);
    const__140.bindRoot(new core.ANY());
    ((Var)const__140)


      
      .setMacro();
    const__144.setMeta((IPersistentMap)const__147);
    const__144.bindRoot(new core.make_rfn());
    const__148.setMeta((IPersistentMap)const__151);
    const__148.bindRoot(new core.rfn());
    ((Var)const__148)








      
      .setMacro();
    const__152.setMeta((IPersistentMap)const__155);
    const__152.bindRoot(new core.remove_suffix());
    const__156.setMeta((IPersistentMap)const__159);
    const__156.bindRoot(new core.context_request());
    const__160.setMeta((IPersistentMap)const__163);
    const__160.bindRoot(new core.context_route());
    const__164.setMeta((IPersistentMap)const__167);
    const__164.bindRoot(new core.make_context());
    const__168.setMeta((IPersistentMap)const__171);
    const__168.bindRoot(new core.context());
    ((Var)const__168)


















































      
      .setMacro();
    const__172.setMeta((IPersistentMap)const__175);
    const__172.bindRoot(new core.let_routes());
    ((Var)const__172)














      
      .setMacro();
    const__176.setMeta((IPersistentMap)const__179);
    const__176.bindRoot(new core.pre_init());
    const__180.setMeta((IPersistentMap)const__183);
    const__180.bindRoot(new core.wrap_routes());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "compojure.core")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "A DSL for building Ring handlers from smaller routes.\n\n  Compojure routes are semantically the same as Ring handlers, with the\n  exception that routes may return `nil` to indicate they do not match.\n\n  This namespace provides functions and macros for concisely constructing\n  routes and combining them together to form more complex functions." }));
    const__3 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "A DSL for building Ring handlers from smaller routes.\n\n  Compojure routes are semantically the same as Ring handlers, with the\n  exception that routes may return `nil` to indicate they do not match.\n\n  This namespace provides functions and macros for concisely constructing\n  routes and combining them together to form more complex functions." });
    const__4 = (AFn)Symbol.intern(null, "clojure.core");
    const__5 = (Var)RT.var("compojure.core", "form-method");
    const__14 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "request")) })), RT.keyword(null, "line"), Integer.valueOf(16), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "compojure/core.clj" });
    const__15 = (Var)RT.var("compojure.core", "method-matches?");
    const__18 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "request"), Symbol.intern(null, "method")) })), RT.keyword(null, "line"), Integer.valueOf(20), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "compojure/core.clj" });
    const__19 = (Var)RT.var("compojure.core", "head-response");
    const__22 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "response"), Symbol.intern(null, "request"), Symbol.intern(null, "method")) })), RT.keyword(null, "line"), Integer.valueOf(33), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "compojure/core.clj" });
    const__23 = (Var)RT.var("compojure.core", "decode-route-params");
    const__26 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "params")) })), RT.keyword(null, "line"), Integer.valueOf(38), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "compojure/core.clj" });
    const__27 = (Var)RT.var("compojure.core", "assoc-route-params");
    const__30 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "request"), Symbol.intern(null, "params")) })), RT.keyword(null, "line"), Integer.valueOf(41), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "compojure/core.clj" });
    const__31 = (Var)RT.var("compojure.core", "route-matches");
    const__34 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "route"), Symbol.intern(null, "request")) })), RT.keyword(null, "line"), Integer.valueOf(44), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "compojure/core.clj" });
    const__35 = (Var)RT.var("compojure.core", "route-request");
    const__38 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "request"), Symbol.intern(null, "route")) })), RT.keyword(null, "line"), Integer.valueOf(48), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "compojure/core.clj" });
    const__39 = (Var)RT.var("compojure.core", "literal?");
    const__42 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(52), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "compojure/core.clj" });
    const__43 = (Var)RT.var("compojure.core", "prepare-route");
    const__46 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "route")) })), RT.keyword(null, "line"), Integer.valueOf(57), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "compojure/core.clj" });
    const__47 = (Var)RT.var("compojure.core", "and-binding");
    const__50 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "req"), Symbol.intern(null, "binds")) })), RT.keyword(null, "line"), Integer.valueOf(74), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "compojure/core.clj" });
    const__51 = (Var)RT.var("compojure.core", "symbol-binding");
    const__54 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "req"), Symbol.intern(null, "sym")) })), RT.keyword(null, "line"), Integer.valueOf(77), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "compojure/core.clj" });
    const__55 = (Var)RT.var("compojure.core", "application-binding");
    const__58 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "req"), Symbol.intern(null, "sym"), Symbol.intern(null, "func")) })), RT.keyword(null, "line"), Integer.valueOf(80), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "compojure/core.clj" });
    const__59 = (Var)RT.var("compojure.core", "vector-bindings");
    const__62 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "args"), Symbol.intern(null, "req")) })), RT.keyword(null, "line"), Integer.valueOf(83), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "compojure/core.clj" });
    const__63 = (Var)RT.var("compojure.core", "warn-on-*-bindings!");
    const__66 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "bindings")) })), RT.keyword(null, "line"), Integer.valueOf(100), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "compojure/core.clj" });
    const__67 = (Var)RT.var("compojure.core", "application-symbols");
    const__70 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "args")) })), RT.keyword(null, "line"), Integer.valueOf(105), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "compojure/core.clj" });
    const__71 = (Var)RT.var("compojure.core", "let-request");
    const__75 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Tuple.create(Symbol.intern(null, "bindings"), Symbol.intern(null, "request")), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "line"), Integer.valueOf(114), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "compojure/core.clj" });
    const__76 = (Var)RT.var("compojure.core", "wrap-route-middleware");
    const__79 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "handler")) })), RT.keyword(null, "line"), Integer.valueOf(123), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "compojure/core.clj" });
    const__80 = (Var)RT.var("compojure.core", "wrap-route-info");
    const__83 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "handler"), Symbol.intern(null, "route-info")) })), RT.keyword(null, "line"), Integer.valueOf(134), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "compojure/core.clj" });
    const__84 = (Var)RT.var("compojure.core", "wrap-route-matches");
    const__87 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "handler"), Symbol.intern(null, "method"), Symbol.intern(null, "path")) })), RT.keyword(null, "line"), Integer.valueOf(141), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "compojure/core.clj" });
    const__88 = (Var)RT.var("compojure.core", "wrap-response");
    const__91 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "handler")) })), RT.keyword(null, "line"), Integer.valueOf(155), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "compojure/core.clj" });
    const__92 = (Var)RT.var("compojure.core", "make-route");
    const__95 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "method"), Symbol.intern(null, "path"), Symbol.intern(null, "handler")) })), RT.keyword(null, "doc"), "Returns a function that will only call the handler if the method and path\n  match the request.", RT.keyword(null, "line"), Integer.valueOf(162), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "compojure/core.clj" });
    const__96 = (Var)RT.var("compojure.core", "compile-route");
    const__99 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "method"), Symbol.intern(null, "path"), Symbol.intern(null, "bindings"), Symbol.intern(null, "body")) })), RT.keyword(null, "doc"), "Compile a route in the form `(method path bindings & body)` into a function.\n  Used to create custom route macros.", RT.keyword(null, "line"), Integer.valueOf(172), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "compojure/core.clj" });
  }
  
  public static void __init1() {
    const__100 = (Var)RT.var("compojure.core", "routing");
    const__103 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "request"), Symbol.intern(null, "&"), Symbol.intern(null, "handlers")) })), RT.keyword(null, "doc"), "Apply a list of routes to a Ring request map.", RT.keyword(null, "line"), Integer.valueOf(182), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "compojure/core.clj" });
    const__104 = (Var)RT.var("compojure.core", "routes");
    const__107 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "handlers")) })), RT.keyword(null, "doc"), "Create a Ring handler by combining several handlers into one.", RT.keyword(null, "line"), Integer.valueOf(187), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "compojure/core.clj" });
    const__108 = (Var)RT.var("compojure.core", "defroutes");
    const__111 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "name"), Symbol.intern(null, "&"), Symbol.intern(null, "routes")) })), RT.keyword(null, "doc"), "Define a Ring handler function from a sequence of routes. The name may\n  optionally be followed by a doc-string and metadata map.", RT.keyword(null, "line"), Integer.valueOf(202), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "compojure/core.clj" });
    const__112 = (Var)RT.var("compojure.core", "GET");
    const__115 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "path"), Symbol.intern(null, "args"), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "doc"), "Generate a `GET` route.", RT.keyword(null, "line"), Integer.valueOf(209), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "compojure/core.clj" });
    const__116 = (Var)RT.var("compojure.core", "POST");
    const__119 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "path"), Symbol.intern(null, "args"), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "doc"), "Generate a `POST` route.", RT.keyword(null, "line"), Integer.valueOf(213), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "compojure/core.clj" });
    const__120 = (Var)RT.var("compojure.core", "PUT");
    const__123 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "path"), Symbol.intern(null, "args"), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "doc"), "Generate a `PUT` route.", RT.keyword(null, "line"), Integer.valueOf(217), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "compojure/core.clj" });
    const__124 = (Var)RT.var("compojure.core", "DELETE");
    const__127 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "path"), Symbol.intern(null, "args"), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "doc"), "Generate a `DELETE` route.", RT.keyword(null, "line"), Integer.valueOf(221), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "compojure/core.clj" });
    const__128 = (Var)RT.var("compojure.core", "HEAD");
    const__131 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "path"), Symbol.intern(null, "args"), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "doc"), "Generate a `HEAD` route.", RT.keyword(null, "line"), Integer.valueOf(225), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "compojure/core.clj" });
    const__132 = (Var)RT.var("compojure.core", "OPTIONS");
    const__135 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "path"), Symbol.intern(null, "args"), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "doc"), "Generate an `OPTIONS` route.", RT.keyword(null, "line"), Integer.valueOf(229), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "compojure/core.clj" });
    const__136 = (Var)RT.var("compojure.core", "PATCH");
    const__139 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "path"), Symbol.intern(null, "args"), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "doc"), "Generate a `PATCH` route.", RT.keyword(null, "line"), Integer.valueOf(233), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "compojure/core.clj" });
    const__140 = (Var)RT.var("compojure.core", "ANY");
    const__143 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "path"), Symbol.intern(null, "args"), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "doc"), "Generate a route that matches any method.", RT.keyword(null, "line"), Integer.valueOf(237), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "compojure/core.clj" });
    const__144 = (Var)RT.var("compojure.core", "make-rfn");
    const__147 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "handler")) })), RT.keyword(null, "line"), Integer.valueOf(241), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "compojure/core.clj" });
    const__148 = (Var)RT.var("compojure.core", "rfn");
    const__151 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "args"), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "doc"), "Generate a route that matches any method and path.", RT.keyword(null, "line"), Integer.valueOf(247), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "compojure/core.clj" });
    const__152 = (Var)RT.var("compojure.core", "remove-suffix");
    const__155 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "path"), Symbol.intern(null, "suffix")) })), RT.keyword(null, "line"), Integer.valueOf(251), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "compojure/core.clj" });
    const__156 = (Var)RT.var("compojure.core", "context-request");
    const__159 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "request"), Symbol.intern(null, "route")) })), RT.keyword(null, "line"), Integer.valueOf(254), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "compojure/core.clj" });
    const__160 = (Var)RT.var("compojure.core", "context-route");
    const__163 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "route")) })), RT.keyword(null, "line"), Integer.valueOf(266), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "compojure/core.clj" });
    const__164 = (Var)RT.var("compojure.core", "make-context");
    const__167 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "route"), Symbol.intern(null, "make-handler")) })), RT.keyword(null, "line"), Integer.valueOf(282), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "compojure/core.clj" });
    const__168 = (Var)RT.var("compojure.core", "context");
    const__171 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "path"), Symbol.intern(null, "args"), Symbol.intern(null, "&"), Symbol.intern(null, "routes")) })), RT.keyword(null, "doc"), "Give all routes in the form a common path prefix and set of bindings.\n\n  The following example demonstrates defining two routes with a common\n  path prefix ('/user/:id') and a common binding ('id'):\n\n      (context \"/user/:id\" [id]\n        (GET \"/profile\" [] ...)\n        (GET \"/settings\" [] ...))", RT.keyword(null, "line"), Integer.valueOf(299), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "compojure/core.clj" });
    const__172 = (Var)RT.var("compojure.core", "let-routes");
    const__175 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "bindings"), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "doc"), "Takes a vector of bindings and a body of routes.\n\n  Equivalent to:\n\n      (let [...] (routes ...))", RT.keyword(null, "line"), Integer.valueOf(315), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "compojure/core.clj" });
    const__176 = (Var)RT.var("compojure.core", "pre-init");
    const__179 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "middleware")) })), RT.keyword(null, "line"), Integer.valueOf(324), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "compojure/core.clj" });
    const__180 = (Var)RT.var("compojure.core", "wrap-routes");
    const__183 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "handler"), Symbol.intern(null, "middleware")), Tuple.create(Symbol.intern(null, "handler"), Symbol.intern(null, "middleware"), Symbol.intern(null, "&"), Symbol.intern(null, "args")) })), RT.keyword(null, "doc"), "Apply a middleware function to routes after they have been matched.", RT.keyword(null, "line"), Integer.valueOf(339), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "compojure/core.clj" });
  }
  
  static  {
    __init0();
    __init1();
    Compiler.pushNSandLoader(RT.classForName("compojure.core__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
