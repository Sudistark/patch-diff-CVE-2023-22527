package byte_streams.pushback_stream;

import byte_streams.InputStream;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.IPersistentVector;
import clojure.lang.IType;
import clojure.lang.Keyword;
import clojure.lang.Numbers;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Var;
import java.io.IOException;
import java.nio.Buffer;
import java.nio.ByteBuffer;
import java.util.LinkedList;
import primitive_math.Primitives;

public final class PushbackByteStream implements PushbackStream, InputStream.Streamable, IType {
  public final Object lock;
  
  public final Object consumers;
  
  public final long buffer_capacity;
  
  int buffer_size;
  
  Object deferred;
  
  Object closed_QMARK_;
  
  public final Object buffer;
  
  public static final Object const__1 = Long.valueOf(1L);
  
  public static final Var const__3 = (Var)RT.var("clojure.core", "deref");
  
  public static final Object const__4 = Long.valueOf(0L);
  
  public static final Var const__9 = (Var)RT.var("manifold.deferred", "success-deferred");
  
  public static final Var const__10 = (Var)RT.var("byte-streams.pushback-stream", "put");
  
  public static final Var const__11 = (Var)RT.var("clojure.core", "not");
  
  public static final Var const__12 = (Var)RT.var("manifold.deferred", "success!");
  
  public static final Keyword const__14 = (Keyword)RT.keyword(null, "else");
  
  public static final Var const__15 = (Var)RT.var("manifold.deferred", "deferred");
  
  public PushbackByteStream(Object paramObject1, Object paramObject2, long paramLong, int paramInt, Object paramObject3, Object paramObject4, Object paramObject5) { this.lock = paramObject1;
    this.consumers = paramObject2;
    this.buffer_capacity = paramLong;
    this.buffer_size = paramInt;
    this.deferred = paramObject3;
    this.closed_QMARK_ = paramObject4;
    this.buffer = paramObject5; }
  
  public static IPersistentVector getBasis() { return RT.vector(new Object[] { Symbol.intern(null, "lock"), ((IObj)Symbol.intern(null, "consumers")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "LinkedList") })), ((IObj)Symbol.intern(null, "buffer-capacity")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "long") })), ((IObj)Symbol.intern(null, "buffer-size")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "int"), RT.keyword(null, "unsynchronized-mutable"), Boolean.TRUE })), ((IObj)Symbol.intern(null, "deferred")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "unsynchronized-mutable"), Boolean.TRUE })), ((IObj)Symbol.intern(null, "closed?")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "unsynchronized-mutable"), Boolean.TRUE })), ((IObj)Symbol.intern(null, "buffer")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "LinkedList") })) }); }
  
  public void close() {
    this.closed_QMARK_ = Boolean.TRUE;
    while (true) {
      Object temp__5735__auto__17807 = ((LinkedList)this.consumers).poll();
      if (temp__5735__auto__17807 != null) {
        if (temp__5735__auto__17807 != Boolean.FALSE) {
          Object c = temp__5735__auto__17807 = null;
          Object buf = ((Consumption)c).buf;
          c = null;
          buf = null;
          ((IFn)const__12.getRawRoot()).invoke(((Consumption)c).deferred, Integer.valueOf(((Buffer)buf).position()));
          continue;
        } 
        break;
      } 
      temp__5735__auto__17807;
      break;
    } 
    null;
    Boolean.TRUE;
  }
  
  public Object take(byte[] ary, int offset, int length, boolean eager_QMARK_) { // Byte code:
    //   0: aload_1
    //   1: aconst_null
    //   2: astore_1
    //   3: checkcast [B
    //   6: invokestatic wrap : ([B)Ljava/nio/ByteBuffer;
    //   9: checkcast java/nio/Buffer
    //   12: iload_2
    //   13: invokevirtual position : (I)Ljava/nio/Buffer;
    //   16: checkcast java/nio/Buffer
    //   19: iload_2
    //   20: i2l
    //   21: iload_3
    //   22: i2l
    //   23: ladd
    //   24: invokestatic uncheckedIntCast : (J)I
    //   27: invokevirtual limit : (I)Ljava/nio/Buffer;
    //   30: checkcast java/nio/ByteBuffer
    //   33: invokevirtual slice : ()Ljava/nio/ByteBuffer;
    //   36: astore #5
    //   38: aload_0
    //   39: getfield buffer : Ljava/lang/Object;
    //   42: checkcast java/util/LinkedList
    //   45: invokevirtual peek : ()Ljava/lang/Object;
    //   48: astore #6
    //   50: aload #6
    //   52: dup
    //   53: ifnull -> 142
    //   56: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   59: if_acmpeq -> 143
    //   62: aload #6
    //   64: aconst_null
    //   65: astore #6
    //   67: astore #7
    //   69: getstatic byte_streams/pushback_stream/PushbackByteStream.const__10 : Lclojure/lang/Var;
    //   72: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   75: checkcast clojure/lang/IFn
    //   78: aload #7
    //   80: aload #5
    //   82: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   87: pop
    //   88: aload #7
    //   90: aconst_null
    //   91: astore #7
    //   93: checkcast java/nio/Buffer
    //   96: invokevirtual hasRemaining : ()Z
    //   99: ifeq -> 108
    //   102: aconst_null
    //   103: pop
    //   104: goto -> 119
    //   107: athrow
    //   108: aload_0
    //   109: getfield buffer : Ljava/lang/Object;
    //   112: checkcast java/util/LinkedList
    //   115: invokevirtual remove : ()Ljava/lang/Object;
    //   118: pop
    //   119: aload #5
    //   121: checkcast java/nio/Buffer
    //   124: invokevirtual hasRemaining : ()Z
    //   127: ifeq -> 137
    //   130: goto -> 38
    //   133: nop
    //   134: nop
    //   135: athrow
    //   136: athrow
    //   137: aconst_null
    //   138: pop
    //   139: goto -> 145
    //   142: pop
    //   143: aconst_null
    //   144: pop
    //   145: aload_0
    //   146: aload_0
    //   147: getfield buffer_size : I
    //   150: i2l
    //   151: aload #5
    //   153: checkcast java/nio/Buffer
    //   156: invokevirtual position : ()I
    //   159: i2l
    //   160: invokestatic subtract : (JJ)J
    //   163: l2i
    //   164: putfield buffer_size : I
    //   167: aload_0
    //   168: getfield buffer_size : I
    //   171: i2l
    //   172: aload_0
    //   173: getfield buffer_capacity : J
    //   176: invokestatic lte : (JJ)Z
    //   179: istore #6
    //   181: iload #6
    //   183: ifeq -> 194
    //   186: aload_0
    //   187: getfield deferred : Ljava/lang/Object;
    //   190: goto -> 208
    //   193: athrow
    //   194: iload #6
    //   196: ifeq -> 205
    //   199: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   202: goto -> 208
    //   205: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   208: dup
    //   209: ifnull -> 248
    //   212: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   215: if_acmpeq -> 249
    //   218: getstatic byte_streams/pushback_stream/PushbackByteStream.const__12 : Lclojure/lang/Var;
    //   221: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   224: checkcast clojure/lang/IFn
    //   227: aload_0
    //   228: getfield deferred : Ljava/lang/Object;
    //   231: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   234: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   239: pop
    //   240: aload_0
    //   241: aconst_null
    //   242: putfield deferred : Ljava/lang/Object;
    //   245: goto -> 251
    //   248: pop
    //   249: aconst_null
    //   250: pop
    //   251: aload_0
    //   252: getfield closed_QMARK_ : Ljava/lang/Object;
    //   255: astore #6
    //   257: aload #6
    //   259: dup
    //   260: ifnull -> 277
    //   263: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   266: if_acmpeq -> 278
    //   269: aload #6
    //   271: aconst_null
    //   272: astore #6
    //   274: goto -> 376
    //   277: pop
    //   278: aload #5
    //   280: checkcast java/nio/Buffer
    //   283: invokevirtual position : ()I
    //   286: i2l
    //   287: invokestatic isPos : (J)Z
    //   290: istore #7
    //   292: iload #7
    //   294: ifeq -> 362
    //   297: iload #4
    //   299: istore #8
    //   301: iload #8
    //   303: ifeq -> 324
    //   306: iload #8
    //   308: ifeq -> 317
    //   311: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   314: goto -> 320
    //   317: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   320: goto -> 358
    //   323: athrow
    //   324: getstatic byte_streams/pushback_stream/PushbackByteStream.const__11 : Lclojure/lang/Var;
    //   327: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   330: checkcast clojure/lang/IFn
    //   333: aload #5
    //   335: checkcast java/nio/Buffer
    //   338: invokevirtual hasRemaining : ()Z
    //   341: ifeq -> 350
    //   344: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   347: goto -> 353
    //   350: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   353: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   358: goto -> 376
    //   361: athrow
    //   362: iload #7
    //   364: ifeq -> 373
    //   367: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   370: goto -> 376
    //   373: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   376: dup
    //   377: ifnull -> 419
    //   380: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   383: if_acmpeq -> 420
    //   386: getstatic byte_streams/pushback_stream/PushbackByteStream.const__9 : Lclojure/lang/Var;
    //   389: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   392: checkcast clojure/lang/IFn
    //   395: aload #5
    //   397: aconst_null
    //   398: astore #5
    //   400: checkcast java/nio/Buffer
    //   403: invokevirtual position : ()I
    //   406: invokestatic valueOf : (I)Ljava/lang/Integer;
    //   409: aconst_null
    //   410: astore_0
    //   411: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   416: goto -> 480
    //   419: pop
    //   420: getstatic byte_streams/pushback_stream/PushbackByteStream.const__15 : Lclojure/lang/Var;
    //   423: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   426: checkcast clojure/lang/IFn
    //   429: invokeinterface invoke : ()Ljava/lang/Object;
    //   434: astore #6
    //   436: aload_0
    //   437: getfield consumers : Ljava/lang/Object;
    //   440: checkcast java/util/LinkedList
    //   443: new byte_streams/pushback_stream/Consumption
    //   446: dup
    //   447: aload #5
    //   449: aconst_null
    //   450: astore #5
    //   452: aload #6
    //   454: iload #4
    //   456: invokespecial <init> : (Ljava/lang/Object;Ljava/lang/Object;Z)V
    //   459: invokevirtual add : (Ljava/lang/Object;)Z
    //   462: ifeq -> 471
    //   465: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   468: goto -> 474
    //   471: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   474: pop
    //   475: aload #6
    //   477: aconst_null
    //   478: astore #6
    //   480: areturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #85	-> 0
    //   #186	-> 6
    //   #187	-> 13
    //   #188	-> 23
    //   #188	-> 27
    //   #186	-> 33
    //   #195	-> 45
    //   #195	-> 50
    //   #196	-> 75
    //   #196	-> 82
    //   #197	-> 88
    //   #197	-> 96
    //   #198	-> 115
    //   #199	-> 119
    //   #199	-> 124
    //   #202	-> 156
    //   #202	-> 160
    //   #202	-> 163
    //   #204	-> 167
    //   #204	-> 176
    //   #204	-> 181
    //   #205	-> 224
    //   #205	-> 234
    //   #208	-> 251
    //   #208	-> 257
    //   #209	-> 283
    //   #209	-> 287
    //   #209	-> 292
    //   #210	-> 301
    //   #210	-> 330
    //   #210	-> 338
    //   #210	-> 353
    //   #211	-> 392
    //   #211	-> 403
    //   #211	-> 409
    //   #212	-> 426
    //   #212	-> 429
    //   #213	-> 459
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   69	70	7	in	Ljava/lang/Object;
    //   50	95	6	temp__5735__auto__17808	Ljava/lang/Object;
    //   181	27	6	and__5514__auto__17809	Z
    //   301	57	8	or__5516__auto__17810	Z
    //   292	84	7	and__5514__auto__17811	Z
    //   257	119	6	or__5516__auto__17812	Ljava/lang/Object;
    //   436	44	6	d	Ljava/lang/Object;
    //   38	442	5	out	Ljava/lang/Object;
    //   0	480	0	this	Lbyte_streams/pushback_stream/PushbackByteStream;
    //   0	480	1	ary	[B
    //   0	480	2	offset	I
    //   0	480	3	length	I
    //   0	480	4	eager_QMARK_	Z }
  
  public Object pushback(byte[] ary, int offset, int length) {
    ary = null;
    return ((PushbackStream)this).pushback((ByteBuffer)((Buffer)((Buffer)ByteBuffer.wrap((byte[])ary)).position(offset)).limit(RT.uncheckedIntCast(offset + length)));
  }
  
  public Object pushback(ByteBuffer buf) { // Byte code:
    //   0: aload_0
    //   1: getfield consumers : Ljava/lang/Object;
    //   4: checkcast java/util/LinkedList
    //   7: invokevirtual peek : ()Ljava/lang/Object;
    //   10: astore_2
    //   11: aload_2
    //   12: dup
    //   13: ifnull -> 190
    //   16: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   19: if_acmpeq -> 191
    //   22: aload_2
    //   23: aconst_null
    //   24: astore_2
    //   25: astore_3
    //   26: aload_3
    //   27: checkcast byte_streams/pushback_stream/Consumption
    //   30: getfield buf : Ljava/lang/Object;
    //   33: astore #4
    //   35: getstatic byte_streams/pushback_stream/PushbackByteStream.const__10 : Lclojure/lang/Var;
    //   38: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   41: checkcast clojure/lang/IFn
    //   44: aload_1
    //   45: aload #4
    //   47: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   52: pop
    //   53: aload_3
    //   54: checkcast byte_streams/pushback_stream/Consumption
    //   57: getfield eager_QMARK_ : Z
    //   60: istore #5
    //   62: iload #5
    //   64: ifeq -> 85
    //   67: iload #5
    //   69: ifeq -> 78
    //   72: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   75: goto -> 81
    //   78: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   81: goto -> 119
    //   84: athrow
    //   85: getstatic byte_streams/pushback_stream/PushbackByteStream.const__11 : Lclojure/lang/Var;
    //   88: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   91: checkcast clojure/lang/IFn
    //   94: aload #4
    //   96: checkcast java/nio/Buffer
    //   99: invokevirtual hasRemaining : ()Z
    //   102: ifeq -> 111
    //   105: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   108: goto -> 114
    //   111: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   114: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   119: dup
    //   120: ifnull -> 184
    //   123: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   126: if_acmpeq -> 185
    //   129: aload_0
    //   130: getfield consumers : Ljava/lang/Object;
    //   133: checkcast java/util/LinkedList
    //   136: invokevirtual remove : ()Ljava/lang/Object;
    //   139: pop
    //   140: getstatic byte_streams/pushback_stream/PushbackByteStream.const__12 : Lclojure/lang/Var;
    //   143: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   146: checkcast clojure/lang/IFn
    //   149: aload_3
    //   150: aconst_null
    //   151: astore_3
    //   152: checkcast byte_streams/pushback_stream/Consumption
    //   155: getfield deferred : Ljava/lang/Object;
    //   158: aload #4
    //   160: aconst_null
    //   161: astore #4
    //   163: checkcast java/nio/Buffer
    //   166: invokevirtual position : ()I
    //   169: invokestatic valueOf : (I)Ljava/lang/Integer;
    //   172: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   177: pop
    //   178: goto -> 0
    //   181: nop
    //   182: nop
    //   183: athrow
    //   184: pop
    //   185: aconst_null
    //   186: pop
    //   187: goto -> 193
    //   190: pop
    //   191: aconst_null
    //   192: pop
    //   193: aload_1
    //   194: checkcast java/nio/Buffer
    //   197: invokevirtual hasRemaining : ()Z
    //   200: ifeq -> 250
    //   203: aload_0
    //   204: getfield buffer : Ljava/lang/Object;
    //   207: checkcast java/util/LinkedList
    //   210: aload_1
    //   211: invokevirtual addLast : (Ljava/lang/Object;)V
    //   214: aconst_null
    //   215: pop
    //   216: aload_0
    //   217: aload_0
    //   218: getfield buffer_size : I
    //   221: i2l
    //   222: aload_1
    //   223: aconst_null
    //   224: astore_1
    //   225: checkcast java/nio/Buffer
    //   228: invokevirtual remaining : ()I
    //   231: i2l
    //   232: invokestatic add : (JJ)J
    //   235: l2i
    //   236: putfield buffer_size : I
    //   239: aload_0
    //   240: getfield buffer_size : I
    //   243: invokestatic valueOf : (I)Ljava/lang/Integer;
    //   246: goto -> 251
    //   249: athrow
    //   250: aconst_null
    //   251: areturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #85	-> 0
    //   #167	-> 7
    //   #167	-> 11
    //   #168	-> 27
    //   #169	-> 41
    //   #169	-> 47
    //   #170	-> 53
    //   #170	-> 54
    //   #170	-> 62
    //   #170	-> 91
    //   #170	-> 99
    //   #170	-> 114
    //   #171	-> 136
    //   #172	-> 146
    //   #172	-> 152
    //   #172	-> 166
    //   #172	-> 172
    //   #175	-> 193
    //   #175	-> 197
    //   #176	-> 211
    //   #177	-> 228
    //   #177	-> 232
    //   #177	-> 235
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   62	57	5	or__5516__auto__17813	Z
    //   35	152	4	out	Ljava/lang/Object;
    //   26	161	3	c	Ljava/lang/Object;
    //   11	182	2	temp__5735__auto__17814	Ljava/lang/Object;
    //   0	251	0	this	Lbyte_streams/pushback_stream/PushbackByteStream;
    //   0	251	1	buf	Ljava/nio/ByteBuffer; }
  
  public Object put(byte[] ary, int offset, int length) {
    ary = null;
    return ((PushbackStream)this).put((ByteBuffer)((Buffer)((Buffer)ByteBuffer.wrap((byte[])ary)).position(offset)).limit(RT.uncheckedIntCast(offset + length)));
  }
  
  public Object put(ByteBuffer buf) { // Byte code:
    //   0: aload_0
    //   1: getfield closed_QMARK_ : Ljava/lang/Object;
    //   4: dup
    //   5: ifnull -> 36
    //   8: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   11: if_acmpeq -> 37
    //   14: getstatic byte_streams/pushback_stream/PushbackByteStream.const__9 : Lclojure/lang/Var;
    //   17: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   20: checkcast clojure/lang/IFn
    //   23: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   26: aconst_null
    //   27: astore_0
    //   28: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   33: goto -> 393
    //   36: pop
    //   37: aload_0
    //   38: getfield consumers : Ljava/lang/Object;
    //   41: checkcast java/util/LinkedList
    //   44: invokevirtual peek : ()Ljava/lang/Object;
    //   47: astore_2
    //   48: aload_2
    //   49: dup
    //   50: ifnull -> 227
    //   53: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   56: if_acmpeq -> 228
    //   59: aload_2
    //   60: aconst_null
    //   61: astore_2
    //   62: astore_3
    //   63: aload_3
    //   64: checkcast byte_streams/pushback_stream/Consumption
    //   67: getfield buf : Ljava/lang/Object;
    //   70: astore #4
    //   72: getstatic byte_streams/pushback_stream/PushbackByteStream.const__10 : Lclojure/lang/Var;
    //   75: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   78: checkcast clojure/lang/IFn
    //   81: aload_1
    //   82: aload #4
    //   84: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   89: pop
    //   90: aload_3
    //   91: checkcast byte_streams/pushback_stream/Consumption
    //   94: getfield eager_QMARK_ : Z
    //   97: istore #5
    //   99: iload #5
    //   101: ifeq -> 122
    //   104: iload #5
    //   106: ifeq -> 115
    //   109: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   112: goto -> 118
    //   115: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   118: goto -> 156
    //   121: athrow
    //   122: getstatic byte_streams/pushback_stream/PushbackByteStream.const__11 : Lclojure/lang/Var;
    //   125: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   128: checkcast clojure/lang/IFn
    //   131: aload #4
    //   133: checkcast java/nio/Buffer
    //   136: invokevirtual hasRemaining : ()Z
    //   139: ifeq -> 148
    //   142: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   145: goto -> 151
    //   148: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   151: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   156: dup
    //   157: ifnull -> 221
    //   160: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   163: if_acmpeq -> 222
    //   166: aload_0
    //   167: getfield consumers : Ljava/lang/Object;
    //   170: checkcast java/util/LinkedList
    //   173: invokevirtual remove : ()Ljava/lang/Object;
    //   176: pop
    //   177: getstatic byte_streams/pushback_stream/PushbackByteStream.const__12 : Lclojure/lang/Var;
    //   180: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   183: checkcast clojure/lang/IFn
    //   186: aload_3
    //   187: aconst_null
    //   188: astore_3
    //   189: checkcast byte_streams/pushback_stream/Consumption
    //   192: getfield deferred : Ljava/lang/Object;
    //   195: aload #4
    //   197: aconst_null
    //   198: astore #4
    //   200: checkcast java/nio/Buffer
    //   203: invokevirtual position : ()I
    //   206: invokestatic valueOf : (I)Ljava/lang/Integer;
    //   209: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   214: pop
    //   215: goto -> 37
    //   218: nop
    //   219: nop
    //   220: athrow
    //   221: pop
    //   222: aconst_null
    //   223: pop
    //   224: goto -> 230
    //   227: pop
    //   228: aconst_null
    //   229: pop
    //   230: aload_1
    //   231: checkcast java/nio/Buffer
    //   234: invokevirtual hasRemaining : ()Z
    //   237: ifeq -> 291
    //   240: aload_0
    //   241: getfield buffer : Ljava/lang/Object;
    //   244: checkcast java/util/LinkedList
    //   247: aload_1
    //   248: invokevirtual add : (Ljava/lang/Object;)Z
    //   251: ifeq -> 260
    //   254: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   257: goto -> 263
    //   260: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   263: pop
    //   264: aload_0
    //   265: aload_0
    //   266: getfield buffer_size : I
    //   269: i2l
    //   270: aload_1
    //   271: aconst_null
    //   272: astore_1
    //   273: checkcast java/nio/Buffer
    //   276: invokevirtual remaining : ()I
    //   279: i2l
    //   280: invokestatic add : (JJ)J
    //   283: l2i
    //   284: putfield buffer_size : I
    //   287: goto -> 293
    //   290: athrow
    //   291: aconst_null
    //   292: pop
    //   293: aload_0
    //   294: getfield deferred : Ljava/lang/Object;
    //   297: dup
    //   298: ifnull -> 314
    //   301: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   304: if_acmpeq -> 315
    //   307: aload_0
    //   308: getfield deferred : Ljava/lang/Object;
    //   311: goto -> 393
    //   314: pop
    //   315: aload_0
    //   316: getfield buffer_size : I
    //   319: i2l
    //   320: aload_0
    //   321: getfield buffer_capacity : J
    //   324: invokestatic lte : (JJ)Z
    //   327: ifeq -> 353
    //   330: getstatic byte_streams/pushback_stream/PushbackByteStream.const__9 : Lclojure/lang/Var;
    //   333: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   336: checkcast clojure/lang/IFn
    //   339: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   342: aconst_null
    //   343: astore_0
    //   344: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   349: goto -> 393
    //   352: athrow
    //   353: getstatic byte_streams/pushback_stream/PushbackByteStream.const__14 : Lclojure/lang/Keyword;
    //   356: dup
    //   357: ifnull -> 391
    //   360: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   363: if_acmpeq -> 392
    //   366: aload_0
    //   367: getstatic byte_streams/pushback_stream/PushbackByteStream.const__15 : Lclojure/lang/Var;
    //   370: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   373: checkcast clojure/lang/IFn
    //   376: invokeinterface invoke : ()Ljava/lang/Object;
    //   381: putfield deferred : Ljava/lang/Object;
    //   384: aload_0
    //   385: getfield deferred : Ljava/lang/Object;
    //   388: goto -> 393
    //   391: pop
    //   392: aconst_null
    //   393: areturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #85	-> 0
    //   #128	-> 0
    //   #129	-> 20
    //   #129	-> 26
    //   #133	-> 44
    //   #133	-> 48
    //   #134	-> 64
    //   #135	-> 78
    //   #135	-> 84
    //   #136	-> 90
    //   #136	-> 91
    //   #136	-> 99
    //   #136	-> 128
    //   #136	-> 136
    //   #136	-> 151
    //   #137	-> 173
    //   #138	-> 183
    //   #138	-> 189
    //   #138	-> 203
    //   #138	-> 209
    //   #141	-> 230
    //   #141	-> 234
    //   #142	-> 248
    //   #143	-> 276
    //   #143	-> 280
    //   #143	-> 283
    //   #145	-> 293
    //   #145	-> 315
    //   #150	-> 324
    //   #151	-> 336
    //   #151	-> 342
    //   #145	-> 353
    //   #154	-> 373
    //   #154	-> 376
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   99	57	5	or__5516__auto__17815	Z
    //   72	152	4	out	Ljava/lang/Object;
    //   63	161	3	c	Ljava/lang/Object;
    //   48	182	2	temp__5735__auto__17816	Ljava/lang/Object;
    //   0	393	0	this	Lbyte_streams/pushback_stream/PushbackByteStream;
    //   0	393	1	buf	Ljava/nio/ByteBuffer; }
  
  public long skip(long n) { this = null;
    return ((Number)((IFn)const__3.getRawRoot()).invoke(((PushbackStream)this).take((byte[])Numbers.byte_array(Numbers.num(n)), RT.uncheckedIntCast(0L), RT.uncheckedIntCast(n), ((Boolean)Boolean.TRUE).booleanValue()))).longValue(); }
  
  public int read(byte[] ary, int offset, int length) throws IOException {
    ary = null;
    long n = RT.longCast(((IFn)const__3.getRawRoot()).invoke(((PushbackStream)this).take((byte[])ary, offset, length, ((Boolean)Boolean.TRUE).booleanValue())));
    return RT.intCast((n == 0L) ? -1L : n);
  }
  
  public int read() throws IOException {
    byte[] arrayOfByte = Numbers.byte_array(const__1);
    long len = RT.longCast(((IFn)const__3.getRawRoot()).invoke(((PushbackStream)this).take((byte[])arrayOfByte, RT.uncheckedIntCast(0L), RT.uncheckedIntCast(1L), ((Boolean)Boolean.TRUE).booleanValue())));
    arrayOfByte = null;
    return RT.intCast((len == 0L) ? -1L : Primitives.bitAnd(255L, RT.uncheckedLongCast((Number)RT.get(arrayOfByte, const__4))));
  }
  
  public int available() throws IOException { return this.buffer_size; }
}
