package byte_streams.pushback_stream;

import byte_streams.InputStream;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.IPersistentVector;
import clojure.lang.IType;
import clojure.lang.Keyword;
import clojure.lang.Numbers;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Var;
import java.io.IOException;
import java.nio.Buffer;
import java.nio.ByteBuffer;
import java.util.LinkedList;
import java.util.concurrent.locks.Lock;
import primitive_math.Primitives;

public final class SynchronizedPushbackByteStream implements PushbackStream, InputStream.Streamable, IType {
  public final Object lock;
  
  public final Object consumers;
  
  public final long buffer_capacity;
  
  public final Object buffer;
  
  public static final Object const__1 = Long.valueOf(1L);
  
  public static final Var const__3 = (Var)RT.var("clojure.core", "deref");
  
  public static final Object const__4 = Long.valueOf(0L);
  
  public static final Var const__9 = (Var)RT.var("manifold.deferred", "success-deferred");
  
  public static final Var const__10 = (Var)RT.var("byte-streams.pushback-stream", "put");
  
  public static final Var const__11 = (Var)RT.var("clojure.core", "not");
  
  public static final Var const__12 = (Var)RT.var("manifold.deferred", "success!");
  
  public static final Keyword const__14 = (Keyword)RT.keyword(null, "else");
  
  public static final Var const__15 = (Var)RT.var("manifold.deferred", "deferred");
  
  public SynchronizedPushbackByteStream(Object paramObject1, Object paramObject2, long paramLong, int paramInt, Object paramObject3, Object paramObject4, Object paramObject5) { this.lock = paramObject1;
    this.consumers = paramObject2;
    this.buffer_capacity = paramLong;
    this.buffer_size = paramInt;
    this.deferred = paramObject3;
    this.closed_QMARK_ = paramObject4;
    this.buffer = paramObject5; }
  
  public static IPersistentVector getBasis() { return RT.vector(new Object[] { Symbol.intern(null, "lock"), ((IObj)Symbol.intern(null, "consumers")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "LinkedList") })), ((IObj)Symbol.intern(null, "buffer-capacity")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "long") })), ((IObj)Symbol.intern(null, "buffer-size")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "int"), RT.keyword(null, "volatile-mutable"), Boolean.TRUE })), ((IObj)Symbol.intern(null, "deferred")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "volatile-mutable"), Boolean.TRUE })), ((IObj)Symbol.intern(null, "closed?")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "volatile-mutable"), Boolean.TRUE })), ((IObj)Symbol.intern(null, "buffer")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "LinkedList") })) }); }
  
  public void close() {
    Boolean bool;
    lock__14923__auto__17823 = this.lock;
    ((Lock)lock__14923__auto__17823)


































































































































      
      .lock();
    null;
    try {
      this.closed_QMARK_ = Boolean.TRUE;
      while (true) {
        Object temp__5735__auto__17822 = ((LinkedList)this.consumers).poll();
        if (temp__5735__auto__17822 != null) {
          if (temp__5735__auto__17822 != Boolean.FALSE) {
            Object c = temp__5735__auto__17822 = null;
            Object buf = ((Consumption)c).buf;
            c = null;
            buf = null;
            ((IFn)const__12.getRawRoot()).invoke(((Consumption)c).deferred, Integer.valueOf(((Buffer)buf).position()));
            continue;
          } 
          break;
        } 
        temp__5735__auto__17822;
        break;
      } 
      null;
      bool = Boolean.TRUE;
    } finally {
      lock__14923__auto__17823 = null;
      ((Lock)lock__14923__auto__17823).unlock();
      null;
    } 
    bool;
  }
  
  public Object take(byte[] ary, int offset, int length, boolean eager_QMARK_) { // Byte code:
    //   0: aload_1
    //   1: aconst_null
    //   2: astore_1
    //   3: checkcast [B
    //   6: invokestatic wrap : ([B)Ljava/nio/ByteBuffer;
    //   9: checkcast java/nio/Buffer
    //   12: iload_2
    //   13: invokevirtual position : (I)Ljava/nio/Buffer;
    //   16: checkcast java/nio/Buffer
    //   19: iload_2
    //   20: i2l
    //   21: iload_3
    //   22: i2l
    //   23: ladd
    //   24: invokestatic uncheckedIntCast : (J)I
    //   27: invokevirtual limit : (I)Ljava/nio/Buffer;
    //   30: checkcast java/nio/ByteBuffer
    //   33: invokevirtual slice : ()Ljava/nio/ByteBuffer;
    //   36: astore #5
    //   38: aload_0
    //   39: getfield lock : Ljava/lang/Object;
    //   42: astore #6
    //   44: aload #6
    //   46: checkcast java/util/concurrent/locks/Lock
    //   49: invokeinterface lock : ()V
    //   54: aconst_null
    //   55: pop
    //   56: aload_0
    //   57: getfield buffer : Ljava/lang/Object;
    //   60: checkcast java/util/LinkedList
    //   63: invokevirtual peek : ()Ljava/lang/Object;
    //   66: astore #7
    //   68: aload #7
    //   70: dup
    //   71: ifnull -> 160
    //   74: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   77: if_acmpeq -> 161
    //   80: aload #7
    //   82: aconst_null
    //   83: astore #7
    //   85: astore #8
    //   87: getstatic byte_streams/pushback_stream/SynchronizedPushbackByteStream.const__10 : Lclojure/lang/Var;
    //   90: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   93: checkcast clojure/lang/IFn
    //   96: aload #8
    //   98: aload #5
    //   100: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   105: pop
    //   106: aload #8
    //   108: aconst_null
    //   109: astore #8
    //   111: checkcast java/nio/Buffer
    //   114: invokevirtual hasRemaining : ()Z
    //   117: ifeq -> 126
    //   120: aconst_null
    //   121: pop
    //   122: goto -> 137
    //   125: athrow
    //   126: aload_0
    //   127: getfield buffer : Ljava/lang/Object;
    //   130: checkcast java/util/LinkedList
    //   133: invokevirtual remove : ()Ljava/lang/Object;
    //   136: pop
    //   137: aload #5
    //   139: checkcast java/nio/Buffer
    //   142: invokevirtual hasRemaining : ()Z
    //   145: ifeq -> 155
    //   148: goto -> 56
    //   151: nop
    //   152: nop
    //   153: athrow
    //   154: athrow
    //   155: aconst_null
    //   156: pop
    //   157: goto -> 163
    //   160: pop
    //   161: aconst_null
    //   162: pop
    //   163: aload_0
    //   164: aload_0
    //   165: getfield buffer_size : I
    //   168: i2l
    //   169: aload #5
    //   171: checkcast java/nio/Buffer
    //   174: invokevirtual position : ()I
    //   177: i2l
    //   178: invokestatic subtract : (JJ)J
    //   181: l2i
    //   182: putfield buffer_size : I
    //   185: aload_0
    //   186: getfield buffer_size : I
    //   189: i2l
    //   190: aload_0
    //   191: getfield buffer_capacity : J
    //   194: invokestatic lte : (JJ)Z
    //   197: istore #7
    //   199: iload #7
    //   201: ifeq -> 212
    //   204: aload_0
    //   205: getfield deferred : Ljava/lang/Object;
    //   208: goto -> 226
    //   211: athrow
    //   212: iload #7
    //   214: ifeq -> 223
    //   217: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   220: goto -> 226
    //   223: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   226: dup
    //   227: ifnull -> 266
    //   230: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   233: if_acmpeq -> 267
    //   236: getstatic byte_streams/pushback_stream/SynchronizedPushbackByteStream.const__12 : Lclojure/lang/Var;
    //   239: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   242: checkcast clojure/lang/IFn
    //   245: aload_0
    //   246: getfield deferred : Ljava/lang/Object;
    //   249: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   252: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   257: pop
    //   258: aload_0
    //   259: aconst_null
    //   260: putfield deferred : Ljava/lang/Object;
    //   263: goto -> 269
    //   266: pop
    //   267: aconst_null
    //   268: pop
    //   269: aload_0
    //   270: getfield closed_QMARK_ : Ljava/lang/Object;
    //   273: astore #7
    //   275: aload #7
    //   277: dup
    //   278: ifnull -> 295
    //   281: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   284: if_acmpeq -> 296
    //   287: aload #7
    //   289: aconst_null
    //   290: astore #7
    //   292: goto -> 394
    //   295: pop
    //   296: aload #5
    //   298: checkcast java/nio/Buffer
    //   301: invokevirtual position : ()I
    //   304: i2l
    //   305: invokestatic isPos : (J)Z
    //   308: istore #8
    //   310: iload #8
    //   312: ifeq -> 380
    //   315: iload #4
    //   317: istore #9
    //   319: iload #9
    //   321: ifeq -> 342
    //   324: iload #9
    //   326: ifeq -> 335
    //   329: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   332: goto -> 338
    //   335: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   338: goto -> 376
    //   341: athrow
    //   342: getstatic byte_streams/pushback_stream/SynchronizedPushbackByteStream.const__11 : Lclojure/lang/Var;
    //   345: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   348: checkcast clojure/lang/IFn
    //   351: aload #5
    //   353: checkcast java/nio/Buffer
    //   356: invokevirtual hasRemaining : ()Z
    //   359: ifeq -> 368
    //   362: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   365: goto -> 371
    //   368: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   371: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   376: goto -> 394
    //   379: athrow
    //   380: iload #8
    //   382: ifeq -> 391
    //   385: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   388: goto -> 394
    //   391: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   394: dup
    //   395: ifnull -> 435
    //   398: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   401: if_acmpeq -> 436
    //   404: getstatic byte_streams/pushback_stream/SynchronizedPushbackByteStream.const__9 : Lclojure/lang/Var;
    //   407: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   410: checkcast clojure/lang/IFn
    //   413: aload #5
    //   415: aconst_null
    //   416: astore #5
    //   418: checkcast java/nio/Buffer
    //   421: invokevirtual position : ()I
    //   424: invokestatic valueOf : (I)Ljava/lang/Integer;
    //   427: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   432: goto -> 496
    //   435: pop
    //   436: getstatic byte_streams/pushback_stream/SynchronizedPushbackByteStream.const__15 : Lclojure/lang/Var;
    //   439: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   442: checkcast clojure/lang/IFn
    //   445: invokeinterface invoke : ()Ljava/lang/Object;
    //   450: astore #7
    //   452: aload_0
    //   453: getfield consumers : Ljava/lang/Object;
    //   456: checkcast java/util/LinkedList
    //   459: new byte_streams/pushback_stream/Consumption
    //   462: dup
    //   463: aload #5
    //   465: aconst_null
    //   466: astore #5
    //   468: aload #7
    //   470: iload #4
    //   472: invokespecial <init> : (Ljava/lang/Object;Ljava/lang/Object;Z)V
    //   475: invokevirtual add : (Ljava/lang/Object;)Z
    //   478: ifeq -> 487
    //   481: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   484: goto -> 490
    //   487: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   490: pop
    //   491: aload #7
    //   493: aconst_null
    //   494: astore #7
    //   496: astore #10
    //   498: aload #6
    //   500: aconst_null
    //   501: astore #6
    //   503: checkcast java/util/concurrent/locks/Lock
    //   506: invokeinterface unlock : ()V
    //   511: aconst_null
    //   512: pop
    //   513: goto -> 536
    //   516: astore #11
    //   518: aload #6
    //   520: aconst_null
    //   521: astore #6
    //   523: checkcast java/util/concurrent/locks/Lock
    //   526: invokeinterface unlock : ()V
    //   531: aconst_null
    //   532: pop
    //   533: aload #11
    //   535: athrow
    //   536: aload #10
    //   538: areturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #85	-> 0
    //   #186	-> 6
    //   #187	-> 13
    //   #188	-> 23
    //   #188	-> 27
    //   #186	-> 33
    //   #190	-> 49
    //   #195	-> 63
    //   #195	-> 68
    //   #196	-> 93
    //   #196	-> 100
    //   #197	-> 106
    //   #197	-> 114
    //   #198	-> 133
    //   #199	-> 137
    //   #199	-> 142
    //   #202	-> 174
    //   #202	-> 178
    //   #202	-> 181
    //   #204	-> 185
    //   #204	-> 194
    //   #204	-> 199
    //   #205	-> 242
    //   #205	-> 252
    //   #208	-> 269
    //   #208	-> 275
    //   #209	-> 301
    //   #209	-> 305
    //   #209	-> 310
    //   #210	-> 319
    //   #210	-> 348
    //   #210	-> 356
    //   #210	-> 371
    //   #211	-> 410
    //   #211	-> 421
    //   #211	-> 427
    //   #212	-> 442
    //   #212	-> 445
    //   #213	-> 475
    //   #190	-> 506
    //   #190	-> 526
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   87	70	8	in	Ljava/lang/Object;
    //   68	95	7	temp__5735__auto__17824	Ljava/lang/Object;
    //   199	27	7	and__5514__auto__17825	Z
    //   319	57	9	or__5516__auto__17826	Z
    //   310	84	8	and__5514__auto__17827	Z
    //   275	119	7	or__5516__auto__17828	Ljava/lang/Object;
    //   452	44	7	d	Ljava/lang/Object;
    //   44	494	6	lock__14923__auto__17829	Ljava/lang/Object;
    //   38	500	5	out	Ljava/lang/Object;
    //   0	538	0	this	Lbyte_streams/pushback_stream/SynchronizedPushbackByteStream;
    //   0	538	1	ary	[B
    //   0	538	2	offset	I
    //   0	538	3	length	I
    //   0	538	4	eager_QMARK_	Z
    // Exception table:
    //   from	to	target	type
    //   56	125	516	finally
    //   126	151	516	finally
    //   155	211	516	finally
    //   212	341	516	finally
    //   342	379	516	finally
    //   380	498	516	finally }
  
  public Object pushback(byte[] ary, int offset, int length) {
    ary = null;
    return ((PushbackStream)this).pushback((ByteBuffer)((Buffer)((Buffer)ByteBuffer.wrap((byte[])ary)).position(offset)).limit(RT.uncheckedIntCast(offset + length)));
  }
  
  public Object pushback(ByteBuffer buf) { // Byte code:
    //   0: aload_0
    //   1: getfield lock : Ljava/lang/Object;
    //   4: astore_2
    //   5: aload_2
    //   6: checkcast java/util/concurrent/locks/Lock
    //   9: invokeinterface lock : ()V
    //   14: aconst_null
    //   15: pop
    //   16: aload_0
    //   17: getfield consumers : Ljava/lang/Object;
    //   20: checkcast java/util/LinkedList
    //   23: invokevirtual peek : ()Ljava/lang/Object;
    //   26: astore_3
    //   27: aload_3
    //   28: dup
    //   29: ifnull -> 211
    //   32: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   35: if_acmpeq -> 212
    //   38: aload_3
    //   39: aconst_null
    //   40: astore_3
    //   41: astore #4
    //   43: aload #4
    //   45: checkcast byte_streams/pushback_stream/Consumption
    //   48: getfield buf : Ljava/lang/Object;
    //   51: astore #5
    //   53: getstatic byte_streams/pushback_stream/SynchronizedPushbackByteStream.const__10 : Lclojure/lang/Var;
    //   56: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   59: checkcast clojure/lang/IFn
    //   62: aload_1
    //   63: aload #5
    //   65: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   70: pop
    //   71: aload #4
    //   73: checkcast byte_streams/pushback_stream/Consumption
    //   76: getfield eager_QMARK_ : Z
    //   79: istore #6
    //   81: iload #6
    //   83: ifeq -> 104
    //   86: iload #6
    //   88: ifeq -> 97
    //   91: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   94: goto -> 100
    //   97: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   100: goto -> 138
    //   103: athrow
    //   104: getstatic byte_streams/pushback_stream/SynchronizedPushbackByteStream.const__11 : Lclojure/lang/Var;
    //   107: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   110: checkcast clojure/lang/IFn
    //   113: aload #5
    //   115: checkcast java/nio/Buffer
    //   118: invokevirtual hasRemaining : ()Z
    //   121: ifeq -> 130
    //   124: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   127: goto -> 133
    //   130: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   133: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   138: dup
    //   139: ifnull -> 205
    //   142: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   145: if_acmpeq -> 206
    //   148: aload_0
    //   149: getfield consumers : Ljava/lang/Object;
    //   152: checkcast java/util/LinkedList
    //   155: invokevirtual remove : ()Ljava/lang/Object;
    //   158: pop
    //   159: getstatic byte_streams/pushback_stream/SynchronizedPushbackByteStream.const__12 : Lclojure/lang/Var;
    //   162: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   165: checkcast clojure/lang/IFn
    //   168: aload #4
    //   170: aconst_null
    //   171: astore #4
    //   173: checkcast byte_streams/pushback_stream/Consumption
    //   176: getfield deferred : Ljava/lang/Object;
    //   179: aload #5
    //   181: aconst_null
    //   182: astore #5
    //   184: checkcast java/nio/Buffer
    //   187: invokevirtual position : ()I
    //   190: invokestatic valueOf : (I)Ljava/lang/Integer;
    //   193: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   198: pop
    //   199: goto -> 16
    //   202: nop
    //   203: nop
    //   204: athrow
    //   205: pop
    //   206: aconst_null
    //   207: pop
    //   208: goto -> 214
    //   211: pop
    //   212: aconst_null
    //   213: pop
    //   214: aload_1
    //   215: checkcast java/nio/Buffer
    //   218: invokevirtual hasRemaining : ()Z
    //   221: ifeq -> 271
    //   224: aload_0
    //   225: getfield buffer : Ljava/lang/Object;
    //   228: checkcast java/util/LinkedList
    //   231: aload_1
    //   232: invokevirtual addLast : (Ljava/lang/Object;)V
    //   235: aconst_null
    //   236: pop
    //   237: aload_0
    //   238: aload_0
    //   239: getfield buffer_size : I
    //   242: i2l
    //   243: aload_1
    //   244: aconst_null
    //   245: astore_1
    //   246: checkcast java/nio/Buffer
    //   249: invokevirtual remaining : ()I
    //   252: i2l
    //   253: invokestatic add : (JJ)J
    //   256: l2i
    //   257: putfield buffer_size : I
    //   260: aload_0
    //   261: getfield buffer_size : I
    //   264: invokestatic valueOf : (I)Ljava/lang/Integer;
    //   267: goto -> 272
    //   270: athrow
    //   271: aconst_null
    //   272: astore #7
    //   274: aload_2
    //   275: aconst_null
    //   276: astore_2
    //   277: checkcast java/util/concurrent/locks/Lock
    //   280: invokeinterface unlock : ()V
    //   285: aconst_null
    //   286: pop
    //   287: goto -> 308
    //   290: astore #8
    //   292: aload_2
    //   293: aconst_null
    //   294: astore_2
    //   295: checkcast java/util/concurrent/locks/Lock
    //   298: invokeinterface unlock : ()V
    //   303: aconst_null
    //   304: pop
    //   305: aload #8
    //   307: athrow
    //   308: aload #7
    //   310: areturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #85	-> 0
    //   #163	-> 9
    //   #167	-> 23
    //   #167	-> 27
    //   #168	-> 45
    //   #169	-> 59
    //   #169	-> 65
    //   #170	-> 71
    //   #170	-> 73
    //   #170	-> 81
    //   #170	-> 110
    //   #170	-> 118
    //   #170	-> 133
    //   #171	-> 155
    //   #172	-> 165
    //   #172	-> 173
    //   #172	-> 187
    //   #172	-> 193
    //   #175	-> 214
    //   #175	-> 218
    //   #176	-> 232
    //   #177	-> 249
    //   #177	-> 253
    //   #177	-> 256
    //   #163	-> 280
    //   #163	-> 298
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   81	57	6	or__5516__auto__17830	Z
    //   53	155	5	out	Ljava/lang/Object;
    //   43	165	4	c	Ljava/lang/Object;
    //   27	187	3	temp__5735__auto__17831	Ljava/lang/Object;
    //   5	305	2	lock__14923__auto__17832	Ljava/lang/Object;
    //   0	310	0	this	Lbyte_streams/pushback_stream/SynchronizedPushbackByteStream;
    //   0	310	1	buf	Ljava/nio/ByteBuffer;
    // Exception table:
    //   from	to	target	type
    //   16	103	290	finally
    //   104	202	290	finally
    //   205	270	290	finally
    //   271	274	290	finally }
  
  public Object put(byte[] ary, int offset, int length) {
    ary = null;
    return ((PushbackStream)this).put((ByteBuffer)((Buffer)((Buffer)ByteBuffer.wrap((byte[])ary)).position(offset)).limit(RT.uncheckedIntCast(offset + length)));
  }
  
  public Object put(ByteBuffer buf) { // Byte code:
    //   0: aload_0
    //   1: getfield lock : Ljava/lang/Object;
    //   4: astore_2
    //   5: aload_2
    //   6: checkcast java/util/concurrent/locks/Lock
    //   9: invokeinterface lock : ()V
    //   14: aconst_null
    //   15: pop
    //   16: aload_0
    //   17: getfield closed_QMARK_ : Ljava/lang/Object;
    //   20: dup
    //   21: ifnull -> 50
    //   24: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   27: if_acmpeq -> 51
    //   30: getstatic byte_streams/pushback_stream/SynchronizedPushbackByteStream.const__9 : Lclojure/lang/Var;
    //   33: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   36: checkcast clojure/lang/IFn
    //   39: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   42: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   47: goto -> 410
    //   50: pop
    //   51: aload_0
    //   52: getfield consumers : Ljava/lang/Object;
    //   55: checkcast java/util/LinkedList
    //   58: invokevirtual peek : ()Ljava/lang/Object;
    //   61: astore_3
    //   62: aload_3
    //   63: dup
    //   64: ifnull -> 246
    //   67: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   70: if_acmpeq -> 247
    //   73: aload_3
    //   74: aconst_null
    //   75: astore_3
    //   76: astore #4
    //   78: aload #4
    //   80: checkcast byte_streams/pushback_stream/Consumption
    //   83: getfield buf : Ljava/lang/Object;
    //   86: astore #5
    //   88: getstatic byte_streams/pushback_stream/SynchronizedPushbackByteStream.const__10 : Lclojure/lang/Var;
    //   91: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   94: checkcast clojure/lang/IFn
    //   97: aload_1
    //   98: aload #5
    //   100: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   105: pop
    //   106: aload #4
    //   108: checkcast byte_streams/pushback_stream/Consumption
    //   111: getfield eager_QMARK_ : Z
    //   114: istore #6
    //   116: iload #6
    //   118: ifeq -> 139
    //   121: iload #6
    //   123: ifeq -> 132
    //   126: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   129: goto -> 135
    //   132: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   135: goto -> 173
    //   138: athrow
    //   139: getstatic byte_streams/pushback_stream/SynchronizedPushbackByteStream.const__11 : Lclojure/lang/Var;
    //   142: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   145: checkcast clojure/lang/IFn
    //   148: aload #5
    //   150: checkcast java/nio/Buffer
    //   153: invokevirtual hasRemaining : ()Z
    //   156: ifeq -> 165
    //   159: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   162: goto -> 168
    //   165: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   168: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   173: dup
    //   174: ifnull -> 240
    //   177: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   180: if_acmpeq -> 241
    //   183: aload_0
    //   184: getfield consumers : Ljava/lang/Object;
    //   187: checkcast java/util/LinkedList
    //   190: invokevirtual remove : ()Ljava/lang/Object;
    //   193: pop
    //   194: getstatic byte_streams/pushback_stream/SynchronizedPushbackByteStream.const__12 : Lclojure/lang/Var;
    //   197: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   200: checkcast clojure/lang/IFn
    //   203: aload #4
    //   205: aconst_null
    //   206: astore #4
    //   208: checkcast byte_streams/pushback_stream/Consumption
    //   211: getfield deferred : Ljava/lang/Object;
    //   214: aload #5
    //   216: aconst_null
    //   217: astore #5
    //   219: checkcast java/nio/Buffer
    //   222: invokevirtual position : ()I
    //   225: invokestatic valueOf : (I)Ljava/lang/Integer;
    //   228: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   233: pop
    //   234: goto -> 51
    //   237: nop
    //   238: nop
    //   239: athrow
    //   240: pop
    //   241: aconst_null
    //   242: pop
    //   243: goto -> 249
    //   246: pop
    //   247: aconst_null
    //   248: pop
    //   249: aload_1
    //   250: checkcast java/nio/Buffer
    //   253: invokevirtual hasRemaining : ()Z
    //   256: ifeq -> 310
    //   259: aload_0
    //   260: getfield buffer : Ljava/lang/Object;
    //   263: checkcast java/util/LinkedList
    //   266: aload_1
    //   267: invokevirtual add : (Ljava/lang/Object;)Z
    //   270: ifeq -> 279
    //   273: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   276: goto -> 282
    //   279: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   282: pop
    //   283: aload_0
    //   284: aload_0
    //   285: getfield buffer_size : I
    //   288: i2l
    //   289: aload_1
    //   290: aconst_null
    //   291: astore_1
    //   292: checkcast java/nio/Buffer
    //   295: invokevirtual remaining : ()I
    //   298: i2l
    //   299: invokestatic add : (JJ)J
    //   302: l2i
    //   303: putfield buffer_size : I
    //   306: goto -> 312
    //   309: athrow
    //   310: aconst_null
    //   311: pop
    //   312: aload_0
    //   313: getfield deferred : Ljava/lang/Object;
    //   316: dup
    //   317: ifnull -> 333
    //   320: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   323: if_acmpeq -> 334
    //   326: aload_0
    //   327: getfield deferred : Ljava/lang/Object;
    //   330: goto -> 410
    //   333: pop
    //   334: aload_0
    //   335: getfield buffer_size : I
    //   338: i2l
    //   339: aload_0
    //   340: getfield buffer_capacity : J
    //   343: invokestatic lte : (JJ)Z
    //   346: ifeq -> 370
    //   349: getstatic byte_streams/pushback_stream/SynchronizedPushbackByteStream.const__9 : Lclojure/lang/Var;
    //   352: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   355: checkcast clojure/lang/IFn
    //   358: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   361: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   366: goto -> 410
    //   369: athrow
    //   370: getstatic byte_streams/pushback_stream/SynchronizedPushbackByteStream.const__14 : Lclojure/lang/Keyword;
    //   373: dup
    //   374: ifnull -> 408
    //   377: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   380: if_acmpeq -> 409
    //   383: aload_0
    //   384: getstatic byte_streams/pushback_stream/SynchronizedPushbackByteStream.const__15 : Lclojure/lang/Var;
    //   387: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   390: checkcast clojure/lang/IFn
    //   393: invokeinterface invoke : ()Ljava/lang/Object;
    //   398: putfield deferred : Ljava/lang/Object;
    //   401: aload_0
    //   402: getfield deferred : Ljava/lang/Object;
    //   405: goto -> 410
    //   408: pop
    //   409: aconst_null
    //   410: astore #7
    //   412: aload_2
    //   413: aconst_null
    //   414: astore_2
    //   415: checkcast java/util/concurrent/locks/Lock
    //   418: invokeinterface unlock : ()V
    //   423: aconst_null
    //   424: pop
    //   425: goto -> 446
    //   428: astore #8
    //   430: aload_2
    //   431: aconst_null
    //   432: astore_2
    //   433: checkcast java/util/concurrent/locks/Lock
    //   436: invokeinterface unlock : ()V
    //   441: aconst_null
    //   442: pop
    //   443: aload #8
    //   445: athrow
    //   446: aload #7
    //   448: areturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #85	-> 0
    //   #124	-> 9
    //   #128	-> 16
    //   #129	-> 36
    //   #129	-> 42
    //   #133	-> 58
    //   #133	-> 62
    //   #134	-> 80
    //   #135	-> 94
    //   #135	-> 100
    //   #136	-> 106
    //   #136	-> 108
    //   #136	-> 116
    //   #136	-> 145
    //   #136	-> 153
    //   #136	-> 168
    //   #137	-> 190
    //   #138	-> 200
    //   #138	-> 208
    //   #138	-> 222
    //   #138	-> 228
    //   #141	-> 249
    //   #141	-> 253
    //   #142	-> 267
    //   #143	-> 295
    //   #143	-> 299
    //   #143	-> 302
    //   #145	-> 312
    //   #145	-> 334
    //   #150	-> 343
    //   #151	-> 355
    //   #151	-> 361
    //   #145	-> 370
    //   #154	-> 390
    //   #154	-> 393
    //   #124	-> 418
    //   #124	-> 436
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   116	57	6	or__5516__auto__17833	Z
    //   88	155	5	out	Ljava/lang/Object;
    //   78	165	4	c	Ljava/lang/Object;
    //   62	187	3	temp__5735__auto__17834	Ljava/lang/Object;
    //   5	443	2	lock__14923__auto__17835	Ljava/lang/Object;
    //   0	448	0	this	Lbyte_streams/pushback_stream/SynchronizedPushbackByteStream;
    //   0	448	1	buf	Ljava/nio/ByteBuffer;
    // Exception table:
    //   from	to	target	type
    //   16	138	428	finally
    //   139	237	428	finally
    //   240	309	428	finally
    //   310	369	428	finally
    //   370	412	428	finally }
  
  public long skip(long n) { this = null;
    return ((Number)((IFn)const__3.getRawRoot()).invoke(((PushbackStream)this).take((byte[])Numbers.byte_array(Numbers.num(n)), RT.uncheckedIntCast(0L), RT.uncheckedIntCast(n), ((Boolean)Boolean.TRUE).booleanValue()))).longValue(); }
  
  public int read(byte[] ary, int offset, int length) throws IOException {
    ary = null;
    long n = RT.longCast(((IFn)const__3.getRawRoot()).invoke(((PushbackStream)this).take((byte[])ary, offset, length, ((Boolean)Boolean.TRUE).booleanValue())));
    return RT.intCast((n == 0L) ? -1L : n);
  }
  
  public int read() throws IOException {
    byte[] arrayOfByte = Numbers.byte_array(const__1);
    long len = RT.longCast(((IFn)const__3.getRawRoot()).invoke(((PushbackStream)this).take((byte[])arrayOfByte, RT.uncheckedIntCast(0L), RT.uncheckedIntCast(1L), ((Boolean)Boolean.TRUE).booleanValue())));
    arrayOfByte = null;
    return RT.intCast((len == 0L) ? -1L : Primitives.bitAnd(255L, RT.uncheckedLongCast((Number)RT.get(arrayOfByte, const__4))));
  }
  
  public int available() throws IOException { return this.buffer_size; }
}
