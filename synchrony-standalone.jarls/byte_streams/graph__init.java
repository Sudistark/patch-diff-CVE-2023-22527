package byte_streams;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.Numbers;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class graph__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__9;
  
  public static final Var const__10;
  
  public static final Object const__12;
  
  public static final Var const__13;
  
  public static final AFn const__17;
  
  public static final Var const__18;
  
  public static final AFn const__21;
  
  public static final Var const__22;
  
  public static final AFn const__26;
  
  public static final Var const__27;
  
  public static final AFn const__30;
  
  public static final Var const__31;
  
  public static final AFn const__34;
  
  public static final Var const__35;
  
  public static final AFn const__38;
  
  public static final Object const__39;
  
  public static final Var const__40;
  
  public static final Var const__41;
  
  public static final Var const__42;
  
  public static final Keyword const__43;
  
  public static final Var const__44;
  
  public static final ISeq const__45;
  
  public static final Var const__46;
  
  public static final Var const__47;
  
  public static final AFn const__51;
  
  public static final Keyword const__52;
  
  public static final AFn const__53;
  
  public static final Keyword const__54;
  
  public static final Keyword const__55;
  
  public static final AFn const__62;
  
  public static final Keyword const__63;
  
  public static final Var const__64;
  
  public static final Var const__65;
  
  public static final Var const__66;
  
  public static final AFn const__67;
  
  public static final AFn const__68;
  
  public static final Keyword const__69;
  
  public static final AFn const__70;
  
  public static final AFn const__71;
  
  public static final AFn const__72;
  
  public static final AFn const__73;
  
  public static final AFn const__74;
  
  public static final AFn const__75;
  
  public static final AFn const__76;
  
  public static final AFn const__77;
  
  public static final AFn const__78;
  
  public static final AFn const__79;
  
  public static final Var const__80;
  
  public static final AFn const__81;
  
  public static final Var const__82;
  
  public static final AFn const__85;
  
  public static final Var const__86;
  
  public static final AFn const__89;
  
  public static final Var const__90;
  
  public static final AFn const__93;
  
  public static final Var const__94;
  
  public static final AFn const__96;
  
  public static final Var const__97;
  
  public static final Var const__98;
  
  public static final AFn const__101;
  
  public static final Var const__102;
  
  public static final AFn const__105;
  
  public static final Var const__106;
  
  public static final AFn const__109;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new graph.fn__17302());
    const__3.setMeta((IPersistentMap)const__9);
    const__3













      
      .bindRoot(((IFn)const__10.getRawRoot()).invoke(Numbers.byte_array(const__12)));
    const__13.setMeta((IPersistentMap)const__17);
    const__13.bindRoot(new graph.pprint_type());
    const__18.setMeta((IPersistentMap)const__21);
    const__18.bindRoot(new graph.type());
    const__22.setMeta((IPersistentMap)const__26);
    const__22.bindRoot(new graph.protocol_QMARK_());
    const__27.setMeta((IPersistentMap)const__30);
    const__27.bindRoot(new graph.canonicalize());
    const__31.setMeta((IPersistentMap)const__34);
    const__31.bindRoot(new graph.class_satisfies_QMARK_());
    const__35.setMeta((IPersistentMap)const__38);
    const__35.bindRoot(new graph.assignable_QMARK_());
    const__82.setMeta((IPersistentMap)const__85);
    const__82.bindRoot(new graph.implicit_conversions());
    const__86.setMeta((IPersistentMap)const__89);
    const__86.bindRoot(new graph.conversion_graph());
    const__90.setMeta((IPersistentMap)const__93);
    const__90.bindRoot(new graph.conj_path());
    const__94.setMeta((IPersistentMap)const__96);
    const__94














      
      .bindRoot(((IFn)const__97.getRawRoot()).invoke(new graph.fn__17529()));
    const__98.setMeta((IPersistentMap)const__101);
    const__98.bindRoot(new graph.closeable_seq());
    const__102.setMeta((IPersistentMap)const__105);
    const__102.bindRoot(new graph.conversion_fn());
    const__106.setMeta((IPersistentMap)const__109);
    const__106.bindRoot(new graph.seq_conversion_fn());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "byte-streams.graph");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("byte-streams.graph", "byte-array");
    const__9 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(16), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_streams/graph.clj" });
    const__10 = (Var)RT.var("clojure.core", "class");
    const__12 = Long.valueOf(0L);
    const__13 = (Var)RT.var("byte-streams.graph", "pprint-type");
    const__17 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "x")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Type") }))) })), RT.keyword(null, "line"), Integer.valueOf(22), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_streams/graph.clj" });
    const__18 = (Var)RT.var("byte-streams.graph", "type");
    const__21 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "t")), Tuple.create(Symbol.intern(null, "wrapper"), Symbol.intern(null, "t")) })), RT.keyword(null, "line"), Integer.valueOf(27), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_streams/graph.clj" });
    const__22 = (Var)RT.var("byte-streams.graph", "protocol?");
    const__26 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(38), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_streams/graph.clj" });
    const__27 = (Var)RT.var("byte-streams.graph", "canonicalize");
    const__30 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(41), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_streams/graph.clj" });
    const__31 = (Var)RT.var("byte-streams.graph", "class-satisfies?");
    const__34 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "protocol"), ((IObj)Symbol.intern(null, "c")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Class") }))) })), RT.keyword(null, "line"), Integer.valueOf(46), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_streams/graph.clj" });
    const__35 = (Var)RT.var("byte-streams.graph", "assignable?");
    const__38 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "a")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Type") })), ((IObj)Symbol.intern(null, "b")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Type") }))) })), RT.keyword(null, "line"), Integer.valueOf(54), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_streams/graph.clj" });
    const__39 = RT.classForName("byte_streams.graph.IConversionGraph");
    const__40 = (Var)RT.var("clojure.core", "alter-meta!");
    const__41 = (Var)RT.var("byte-streams.graph", "IConversionGraph");
    const__42 = (Var)RT.var("clojure.core", "assoc");
    const__43 = (Keyword)RT.keyword(null, "doc");
    const__44 = (Var)RT.var("clojure.core", "assert-same-protocol");
    const__45 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "assoc-conversion")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "src"), Symbol.intern(null, "dst"), Symbol.intern(null, "f"), Symbol.intern(null, "cost")) })) })), ((IObj)Symbol.intern(null, "equivalent-targets")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "dst")) })) })), ((IObj)Symbol.intern(null, "possible-sources")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })) })), ((IObj)Symbol.intern(null, "possible-targets")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })) })), ((IObj)Symbol.intern(null, "possible-conversions")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "src")) })) })), ((IObj)Symbol.intern(null, "conversion")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "src"), Symbol.intern(null, "dst")) })) })) }));
    const__46 = (Var)RT.var("clojure.core", "alter-var-root");
    const__47 = (Var)RT.var("clojure.core", "merge");
    const__51 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "byte_streams.graph.IConversionGraph"), RT.keyword(null, "on-interface"), RT.classForName("byte_streams.graph.IConversionGraph") });
    const__52 = (Keyword)RT.keyword(null, "sigs");
    const__53 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "assoc-conversion"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "assoc-conversion")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "src"), Symbol.intern(null, "dst"), Symbol.intern(null, "f"), Symbol.intern(null, "cost")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "src"), Symbol.intern(null, "dst"), Symbol.intern(null, "f"), Symbol.intern(null, "cost")) })), RT.keyword(null, "doc"), null }), RT.keyword(null, "equivalent-targets"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "equivalent-targets")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "dst")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "dst")) })), RT.keyword(null, "doc"), null }), RT.keyword(null, "possible-sources"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "possible-sources")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })), RT.keyword(null, "doc"), null }), RT.keyword(null, "possible-targets"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "possible-targets")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })), RT.keyword(null, "doc"), null }), RT.keyword(null, "possible-conversions"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "possible-conversions")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "src")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "src")) })), RT.keyword(null, "doc"), null }), 
          RT.keyword(null, "conversion"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "conversion")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "src"), Symbol.intern(null, "dst")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "src"), Symbol.intern(null, "dst")) })), RT.keyword(null, "doc"), null }) });
    const__54 = (Keyword)RT.keyword(null, "var");
    const__55 = (Keyword)RT.keyword(null, "method-map");
    const__62 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "possible-sources"), RT.keyword(null, "possible-sources"), RT.keyword(null, "conversion"), RT.keyword(null, "conversion"), RT.keyword(null, "equivalent-targets"), RT.keyword(null, "equivalent-targets"), RT.keyword(null, "assoc-conversion"), RT.keyword(null, "assoc-conversion"), RT.keyword(null, "possible-conversions"), RT.keyword(null, "possible-conversions"), 
          RT.keyword(null, "possible-targets"), RT.keyword(null, "possible-targets") });
    const__63 = (Keyword)RT.keyword(null, "method-builders");
    const__64 = (Var)RT.var("clojure.core", "intern");
    const__65 = (Var)RT.var("clojure.core", "*ns*");
    const__66 = (Var)RT.var("clojure.core", "with-meta");
    const__67 = (AFn)((IObj)Symbol.intern(null, "possible-conversions")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "src")) })) }));
    const__68 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "possible-conversions")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "src")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "src")) })), RT.keyword(null, "doc"), null });
    const__69 = (Keyword)RT.keyword(null, "protocol");
    const__70 = (AFn)((IObj)Symbol.intern(null, "possible-sources")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })) }));
    const__71 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "possible-sources")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })), RT.keyword(null, "doc"), null });
    const__72 = (AFn)((IObj)Symbol.intern(null, "assoc-conversion")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "src"), Symbol.intern(null, "dst"), Symbol.intern(null, "f"), Symbol.intern(null, "cost")) })) }));
    const__73 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "assoc-conversion")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "src"), Symbol.intern(null, "dst"), Symbol.intern(null, "f"), Symbol.intern(null, "cost")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "src"), Symbol.intern(null, "dst"), Symbol.intern(null, "f"), Symbol.intern(null, "cost")) })), RT.keyword(null, "doc"), null });
    const__74 = (AFn)((IObj)Symbol.intern(null, "equivalent-targets")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "dst")) })) }));
    const__75 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "equivalent-targets")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "dst")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "dst")) })), RT.keyword(null, "doc"), null });
    const__76 = (AFn)((IObj)Symbol.intern(null, "conversion")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "src"), Symbol.intern(null, "dst")) })) }));
    const__77 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "conversion")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "src"), Symbol.intern(null, "dst")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "src"), Symbol.intern(null, "dst")) })), RT.keyword(null, "doc"), null });
    const__78 = (AFn)((IObj)Symbol.intern(null, "possible-targets")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })) }));
    const__79 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "possible-targets")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })), RT.keyword(null, "doc"), null });
    const__80 = (Var)RT.var("clojure.core", "-reset-methods");
    const__81 = (AFn)Symbol.intern(null, "IConversionGraph");
    const__82 = (Var)RT.var("byte-streams.graph", "implicit-conversions");
    const__85 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "src")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Type") }))) })), RT.keyword(null, "line"), Integer.valueOf(77), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_streams/graph.clj" });
    const__86 = (Var)RT.var("byte-streams.graph", "conversion-graph");
    const__89 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(127), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_streams/graph.clj" });
    const__90 = (Var)RT.var("byte-streams.graph", "conj-path");
    const__93 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "p")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "ConversionPath") })), Symbol.intern(null, "src"), Symbol.intern(null, "dst"), ((IObj)Symbol.intern(null, "c")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Conversion") }))) })), RT.keyword(null, "line"), Integer.valueOf(140), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_streams/graph.clj" });
    const__94 = (Var)RT.var("byte-streams.graph", "conversion-path");
    const__96 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(147), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_streams/graph.clj" });
    const__97 = (Var)RT.var("byte-streams.utils", "fast-memoize");
    const__98 = (Var)RT.var("byte-streams.graph", "closeable-seq");
  }
  
  public static void __init1() {
    const__101 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s"), Symbol.intern(null, "exhaustible?"), Symbol.intern(null, "close-fn")) })), RT.keyword(null, "line"), Integer.valueOf(169), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_streams/graph.clj" });
    const__102 = (Var)RT.var("byte-streams.graph", "conversion-fn");
    const__105 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "g"), Symbol.intern(null, "src"), Symbol.intern(null, "dst")) })), RT.keyword(null, "line"), Integer.valueOf(205), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_streams/graph.clj" });
    const__106 = (Var)RT.var("byte-streams.graph", "seq-conversion-fn");
    const__109 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "g"), Symbol.intern(null, "convert"), Symbol.intern(null, "wrapper"), Symbol.intern(null, "dst")) })), RT.keyword(null, "line"), Integer.valueOf(258), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_streams/graph.clj" });
  }
  
  static  {
    __init0();
    __init1();
    Compiler.pushNSandLoader(RT.classForName("byte_streams.graph__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
