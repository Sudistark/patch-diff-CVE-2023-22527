package byte_streams;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class protocols__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Object const__3;
  
  public static final Var const__4;
  
  public static final Var const__5;
  
  public static final Var const__6;
  
  public static final Keyword const__7;
  
  public static final Var const__8;
  
  public static final ISeq const__9;
  
  public static final Var const__10;
  
  public static final Var const__11;
  
  public static final AFn const__15;
  
  public static final Keyword const__16;
  
  public static final AFn const__17;
  
  public static final Keyword const__18;
  
  public static final Keyword const__19;
  
  public static final Keyword const__20;
  
  public static final AFn const__21;
  
  public static final Keyword const__22;
  
  public static final Var const__23;
  
  public static final Var const__24;
  
  public static final Var const__25;
  
  public static final AFn const__26;
  
  public static final AFn const__27;
  
  public static final Keyword const__28;
  
  public static final Var const__29;
  
  public static final AFn const__30;
  
  public static final Object const__31;
  
  public static final Var const__32;
  
  public static final ISeq const__33;
  
  public static final AFn const__35;
  
  public static final AFn const__36;
  
  public static final AFn const__38;
  
  public static final AFn const__39;
  
  public static final AFn const__40;
  
  public static final AFn const__41;
  
  public static final Object const__42;
  
  public static final Var const__43;
  
  public static final ISeq const__44;
  
  public static final AFn const__46;
  
  public static final AFn const__47;
  
  public static final AFn const__49;
  
  public static final AFn const__50;
  
  public static final AFn const__51;
  
  public static final AFn const__52;
  
  public static final Var const__53;
  
  public static final Object const__54;
  
  public static void load() { LockingTransaction.runInTransaction((Callable)new protocols.fn__17238()); }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "byte-streams.protocols");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = RT.classForName("byte_streams.protocols.Closeable");
    const__4 = (Var)RT.var("clojure.core", "alter-meta!");
    const__5 = (Var)RT.var("byte-streams.protocols", "Closeable");
    const__6 = (Var)RT.var("clojure.core", "assoc");
    const__7 = (Keyword)RT.keyword(null, "doc");
    const__8 = (Var)RT.var("clojure.core", "assert-same-protocol");
    const__9 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "close")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "A protocol that is a superset of `java.io.Closeable`.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })) })) }));
    const__10 = (Var)RT.var("clojure.core", "alter-var-root");
    const__11 = (Var)RT.var("clojure.core", "merge");
    const__15 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "byte_streams.protocols.Closeable"), RT.keyword(null, "on-interface"), RT.classForName("byte_streams.protocols.Closeable") });
    const__16 = (Keyword)RT.keyword(null, "sigs");
    const__17 = (AFn)RT.map(new Object[] { RT.keyword(null, "close"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "close")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "A protocol that is a superset of `java.io.Closeable`.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })), RT.keyword(null, "doc"), "A protocol that is a superset of `java.io.Closeable`." }) });
    const__18 = (Keyword)RT.keyword(null, "var");
    const__19 = (Keyword)RT.keyword(null, "method-map");
    const__20 = (Keyword)RT.keyword(null, "close");
    const__21 = (AFn)RT.map(new Object[] { RT.keyword(null, "close"), RT.keyword(null, "close") });
    const__22 = (Keyword)RT.keyword(null, "method-builders");
    const__23 = (Var)RT.var("clojure.core", "intern");
    const__24 = (Var)RT.var("clojure.core", "*ns*");
    const__25 = (Var)RT.var("clojure.core", "with-meta");
    const__26 = (AFn)((IObj)Symbol.intern(null, "close")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "A protocol that is a superset of `java.io.Closeable`.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })) }));
    const__27 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "close")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "A protocol that is a superset of `java.io.Closeable`.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })), RT.keyword(null, "doc"), "A protocol that is a superset of `java.io.Closeable`." });
    const__28 = (Keyword)RT.keyword(null, "protocol");
    const__29 = (Var)RT.var("clojure.core", "-reset-methods");
    const__30 = (AFn)Symbol.intern(null, "Closeable");
    const__31 = RT.classForName("byte_streams.protocols.ByteSource");
    const__32 = (Var)RT.var("byte-streams.protocols", "ByteSource");
    const__33 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "take-bytes!")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Takes `n` bytes from the byte source.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "n"), Symbol.intern(null, "options")) })) })) }));
    const__35 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "byte_streams.protocols.ByteSource"), RT.keyword(null, "on-interface"), RT.classForName("byte_streams.protocols.ByteSource") });
    const__36 = (AFn)RT.map(new Object[] { RT.keyword(null, "take-bytes!"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "take-bytes!")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Takes `n` bytes from the byte source.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "n"), Symbol.intern(null, "options")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "n"), Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "Takes `n` bytes from the byte source." }) });
    const__38 = (AFn)RT.map(new Object[] { RT.keyword(null, "take-bytes!"), RT.keyword(null, "take-bytes!") });
    const__39 = (AFn)((IObj)Symbol.intern(null, "take-bytes!")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Takes `n` bytes from the byte source.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "n"), Symbol.intern(null, "options")) })) }));
    const__40 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "take-bytes!")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Takes `n` bytes from the byte source.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "n"), Symbol.intern(null, "options")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "n"), Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "Takes `n` bytes from the byte source." });
    const__41 = (AFn)Symbol.intern(null, "ByteSource");
    const__42 = RT.classForName("byte_streams.protocols.ByteSink");
    const__43 = (Var)RT.var("byte-streams.protocols", "ByteSink");
    const__44 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "send-bytes!")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Puts `bytes` in the byte sink.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "bytes"), Symbol.intern(null, "options")) })) })) }));
    const__46 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "byte_streams.protocols.ByteSink"), RT.keyword(null, "on-interface"), RT.classForName("byte_streams.protocols.ByteSink") });
    const__47 = (AFn)RT.map(new Object[] { RT.keyword(null, "send-bytes!"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "send-bytes!")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Puts `bytes` in the byte sink.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "bytes"), Symbol.intern(null, "options")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "bytes"), Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "Puts `bytes` in the byte sink." }) });
    const__49 = (AFn)RT.map(new Object[] { RT.keyword(null, "send-bytes!"), RT.keyword(null, "send-bytes!") });
    const__50 = (AFn)((IObj)Symbol.intern(null, "send-bytes!")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Puts `bytes` in the byte sink.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "bytes"), Symbol.intern(null, "options")) })) }));
    const__51 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "send-bytes!")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Puts `bytes` in the byte sink.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "bytes"), Symbol.intern(null, "options")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_"), Symbol.intern(null, "bytes"), Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "Puts `bytes` in the byte sink." });
    const__52 = (AFn)Symbol.intern(null, "ByteSink");
    const__53 = (Var)RT.var("clojure.core", "extend");
    const__54 = RT.classForName("java.io.Closeable");
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("byte_streams.protocols__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
