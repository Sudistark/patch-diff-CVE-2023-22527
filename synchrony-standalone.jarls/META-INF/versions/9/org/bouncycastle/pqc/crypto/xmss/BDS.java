package META-INF.versions.9.org.bouncycastle.pqc.crypto.xmss;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import java.util.TreeMap;
import org.bouncycastle.asn1.ASN1ObjectIdentifier;
import org.bouncycastle.pqc.crypto.xmss.BDS;
import org.bouncycastle.pqc.crypto.xmss.BDSTreeHash;
import org.bouncycastle.pqc.crypto.xmss.HashTreeAddress;
import org.bouncycastle.pqc.crypto.xmss.LTreeAddress;
import org.bouncycastle.pqc.crypto.xmss.OTSHashAddress;
import org.bouncycastle.pqc.crypto.xmss.WOTSPlus;
import org.bouncycastle.pqc.crypto.xmss.WOTSPlusParameters;
import org.bouncycastle.pqc.crypto.xmss.WOTSPlusPublicKeyParameters;
import org.bouncycastle.pqc.crypto.xmss.XMSSNode;
import org.bouncycastle.pqc.crypto.xmss.XMSSNodeUtil;
import org.bouncycastle.pqc.crypto.xmss.XMSSParameters;
import org.bouncycastle.pqc.crypto.xmss.XMSSUtil;

public final class BDS implements Serializable {
  private static final long serialVersionUID = 1L;
  
  private WOTSPlus wotsPlus;
  
  private final int treeHeight;
  
  private final List<BDSTreeHash> treeHashInstances;
  
  private int k;
  
  private XMSSNode root;
  
  private List<XMSSNode> authenticationPath;
  
  private Map<Integer, LinkedList<XMSSNode>> retain;
  
  private Stack<XMSSNode> stack;
  
  private Map<Integer, XMSSNode> keep;
  
  private int index;
  
  private boolean used;
  
  private int maxIndex;
  
  BDS(XMSSParameters paramXMSSParameters, int paramInt1, int paramInt2) {
    this(paramXMSSParameters.getWOTSPlus(), paramXMSSParameters.getHeight(), paramXMSSParameters.getK(), paramInt2);
    this.maxIndex = paramInt1;
    this.index = paramInt2;
    this.used = true;
  }
  
  BDS(XMSSParameters paramXMSSParameters, byte[] paramArrayOfByte1, byte[] paramArrayOfByte2, OTSHashAddress paramOTSHashAddress) {
    this(paramXMSSParameters.getWOTSPlus(), paramXMSSParameters.getHeight(), paramXMSSParameters.getK(), (1 << paramXMSSParameters.getHeight()) - 1);
    initialize(paramArrayOfByte1, paramArrayOfByte2, paramOTSHashAddress);
  }
  
  BDS(XMSSParameters paramXMSSParameters, byte[] paramArrayOfByte1, byte[] paramArrayOfByte2, OTSHashAddress paramOTSHashAddress, int paramInt) {
    this(paramXMSSParameters.getWOTSPlus(), paramXMSSParameters.getHeight(), paramXMSSParameters.getK(), (1 << paramXMSSParameters.getHeight()) - 1);
    initialize(paramArrayOfByte1, paramArrayOfByte2, paramOTSHashAddress);
    while (this.index < paramInt) {
      nextAuthenticationPath(paramArrayOfByte1, paramArrayOfByte2, paramOTSHashAddress);
      this.used = false;
    } 
  }
  
  private BDS(WOTSPlus paramWOTSPlus, int paramInt1, int paramInt2, int paramInt3) {
    this.wotsPlus = paramWOTSPlus;
    this.treeHeight = paramInt1;
    this.maxIndex = paramInt3;
    this.k = paramInt2;
    if (paramInt2 > paramInt1 || paramInt2 < 2 || (paramInt1 - paramInt2) % 2 != 0)
      throw new IllegalArgumentException("illegal value for BDS parameter k"); 
    this.authenticationPath = new ArrayList();
    this.retain = new TreeMap();
    this.stack = new Stack();
    this.treeHashInstances = new ArrayList();
    for (byte b = 0; b < paramInt1 - paramInt2; b++)
      this.treeHashInstances.add(new BDSTreeHash(b)); 
    this.keep = new TreeMap();
    this.index = 0;
    this.used = false;
  }
  
  BDS(BDS paramBDS) {
    this.wotsPlus = new WOTSPlus(paramBDS.wotsPlus.getParams());
    this.treeHeight = paramBDS.treeHeight;
    this.k = paramBDS.k;
    this.root = paramBDS.root;
    this.authenticationPath = new ArrayList();
    this.authenticationPath.addAll(paramBDS.authenticationPath);
    this.retain = new TreeMap();
    for (Integer integer : paramBDS.retain.keySet())
      this.retain.put(integer, (LinkedList)((LinkedList)paramBDS.retain.get(integer)).clone()); 
    this.stack = new Stack();
    this.stack.addAll(paramBDS.stack);
    this.treeHashInstances = new ArrayList();
    for (Iterator iterator = paramBDS.treeHashInstances.iterator(); iterator.hasNext();)
      this.treeHashInstances.add(((BDSTreeHash)iterator.next()).clone()); 
    this.keep = new TreeMap(paramBDS.keep);
    this.index = paramBDS.index;
    this.maxIndex = paramBDS.maxIndex;
    this.used = paramBDS.used;
  }
  
  private BDS(BDS paramBDS, byte[] paramArrayOfByte1, byte[] paramArrayOfByte2, OTSHashAddress paramOTSHashAddress) {
    this.wotsPlus = new WOTSPlus(paramBDS.wotsPlus.getParams());
    this.treeHeight = paramBDS.treeHeight;
    this.k = paramBDS.k;
    this.root = paramBDS.root;
    this.authenticationPath = new ArrayList();
    this.authenticationPath.addAll(paramBDS.authenticationPath);
    this.retain = new TreeMap();
    for (Integer integer : paramBDS.retain.keySet())
      this.retain.put(integer, (LinkedList)((LinkedList)paramBDS.retain.get(integer)).clone()); 
    this.stack = new Stack();
    this.stack.addAll(paramBDS.stack);
    this.treeHashInstances = new ArrayList();
    for (Iterator iterator = paramBDS.treeHashInstances.iterator(); iterator.hasNext();)
      this.treeHashInstances.add(((BDSTreeHash)iterator.next()).clone()); 
    this.keep = new TreeMap(paramBDS.keep);
    this.index = paramBDS.index;
    this.maxIndex = paramBDS.maxIndex;
    this.used = false;
    nextAuthenticationPath(paramArrayOfByte1, paramArrayOfByte2, paramOTSHashAddress);
  }
  
  private BDS(BDS paramBDS, ASN1ObjectIdentifier paramASN1ObjectIdentifier) {
    this.wotsPlus = new WOTSPlus(new WOTSPlusParameters(paramASN1ObjectIdentifier));
    this.treeHeight = paramBDS.treeHeight;
    this.k = paramBDS.k;
    this.root = paramBDS.root;
    this.authenticationPath = new ArrayList();
    this.authenticationPath.addAll(paramBDS.authenticationPath);
    this.retain = new TreeMap();
    for (Integer integer : paramBDS.retain.keySet())
      this.retain.put(integer, (LinkedList)((LinkedList)paramBDS.retain.get(integer)).clone()); 
    this.stack = new Stack();
    this.stack.addAll(paramBDS.stack);
    this.treeHashInstances = new ArrayList();
    for (Iterator iterator = paramBDS.treeHashInstances.iterator(); iterator.hasNext();)
      this.treeHashInstances.add(((BDSTreeHash)iterator.next()).clone()); 
    this.keep = new TreeMap(paramBDS.keep);
    this.index = paramBDS.index;
    this.maxIndex = paramBDS.maxIndex;
    this.used = paramBDS.used;
    validate();
  }
  
  private BDS(BDS paramBDS, int paramInt, ASN1ObjectIdentifier paramASN1ObjectIdentifier) {
    this.wotsPlus = new WOTSPlus(new WOTSPlusParameters(paramASN1ObjectIdentifier));
    this.treeHeight = paramBDS.treeHeight;
    this.k = paramBDS.k;
    this.root = paramBDS.root;
    this.authenticationPath = new ArrayList();
    this.authenticationPath.addAll(paramBDS.authenticationPath);
    this.retain = new TreeMap();
    for (Integer integer : paramBDS.retain.keySet())
      this.retain.put(integer, (LinkedList)((LinkedList)paramBDS.retain.get(integer)).clone()); 
    this.stack = new Stack();
    this.stack.addAll(paramBDS.stack);
    this.treeHashInstances = new ArrayList();
    for (Iterator iterator = paramBDS.treeHashInstances.iterator(); iterator.hasNext();)
      this.treeHashInstances.add(((BDSTreeHash)iterator.next()).clone()); 
    this.keep = new TreeMap(paramBDS.keep);
    this.index = paramBDS.index;
    this.maxIndex = paramInt;
    this.used = paramBDS.used;
    validate();
  }
  
  public BDS getNextState(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2, OTSHashAddress paramOTSHashAddress) { return new BDS(this, paramArrayOfByte1, paramArrayOfByte2, paramOTSHashAddress); }
  
  private void initialize(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2, OTSHashAddress paramOTSHashAddress) {
    if (paramOTSHashAddress == null)
      throw new NullPointerException("otsHashAddress == null"); 
    LTreeAddress lTreeAddress = (LTreeAddress)((LTreeAddress.Builder)((LTreeAddress.Builder)(new LTreeAddress.Builder()).withLayerAddress(paramOTSHashAddress.getLayerAddress())).withTreeAddress(paramOTSHashAddress.getTreeAddress())).build();
    HashTreeAddress hashTreeAddress = (HashTreeAddress)((HashTreeAddress.Builder)((HashTreeAddress.Builder)(new HashTreeAddress.Builder()).withLayerAddress(paramOTSHashAddress.getLayerAddress())).withTreeAddress(paramOTSHashAddress.getTreeAddress())).build();
    for (int i = 0; i < 1 << this.treeHeight; i++) {
      paramOTSHashAddress = (OTSHashAddress)((OTSHashAddress.Builder)((OTSHashAddress.Builder)((OTSHashAddress.Builder)(new OTSHashAddress.Builder()).withLayerAddress(paramOTSHashAddress.getLayerAddress())).withTreeAddress(paramOTSHashAddress.getTreeAddress())).withOTSAddress(i).withChainAddress(paramOTSHashAddress.getChainAddress()).withHashAddress(paramOTSHashAddress.getHashAddress()).withKeyAndMask(paramOTSHashAddress.getKeyAndMask())).build();
      this.wotsPlus.importKeys(this.wotsPlus.getWOTSPlusSecretKey(paramArrayOfByte2, paramOTSHashAddress), paramArrayOfByte1);
      WOTSPlusPublicKeyParameters wOTSPlusPublicKeyParameters = this.wotsPlus.getPublicKey(paramOTSHashAddress);
      lTreeAddress = (LTreeAddress)((LTreeAddress.Builder)((LTreeAddress.Builder)((LTreeAddress.Builder)(new LTreeAddress.Builder()).withLayerAddress(lTreeAddress.getLayerAddress())).withTreeAddress(lTreeAddress.getTreeAddress())).withLTreeAddress(i).withTreeHeight(lTreeAddress.getTreeHeight()).withTreeIndex(lTreeAddress.getTreeIndex()).withKeyAndMask(lTreeAddress.getKeyAndMask())).build();
      XMSSNode xMSSNode = XMSSNodeUtil.lTree(this.wotsPlus, wOTSPlusPublicKeyParameters, lTreeAddress);
      hashTreeAddress = (HashTreeAddress)((HashTreeAddress.Builder)((HashTreeAddress.Builder)((HashTreeAddress.Builder)(new HashTreeAddress.Builder()).withLayerAddress(hashTreeAddress.getLayerAddress())).withTreeAddress(hashTreeAddress.getTreeAddress())).withTreeIndex(i).withKeyAndMask(hashTreeAddress.getKeyAndMask())).build();
      while (!this.stack.isEmpty() && ((XMSSNode)this.stack.peek()).getHeight() == xMSSNode.getHeight()) {
        int j = i / (1 << xMSSNode.getHeight());
        if (j == 1)
          this.authenticationPath.add(xMSSNode); 
        if (j == 3 && xMSSNode.getHeight() < this.treeHeight - this.k)
          ((BDSTreeHash)this.treeHashInstances.get(xMSSNode.getHeight())).setNode(xMSSNode); 
        if (j >= 3 && (j & true) == 1 && xMSSNode.getHeight() >= this.treeHeight - this.k && xMSSNode
          .getHeight() <= this.treeHeight - 2)
          if (this.retain.get(Integer.valueOf(xMSSNode.getHeight())) == null) {
            LinkedList linkedList = new LinkedList();
            linkedList.add(xMSSNode);
            this.retain.put(Integer.valueOf(xMSSNode.getHeight()), linkedList);
          } else {
            ((LinkedList)this.retain.get(Integer.valueOf(xMSSNode.getHeight()))).add(xMSSNode);
          }  
        hashTreeAddress = (HashTreeAddress)((HashTreeAddress.Builder)((HashTreeAddress.Builder)((HashTreeAddress.Builder)(new HashTreeAddress.Builder()).withLayerAddress(hashTreeAddress.getLayerAddress())).withTreeAddress(hashTreeAddress.getTreeAddress())).withTreeHeight(hashTreeAddress.getTreeHeight()).withTreeIndex((hashTreeAddress.getTreeIndex() - 1) / 2).withKeyAndMask(hashTreeAddress.getKeyAndMask())).build();
        xMSSNode = XMSSNodeUtil.randomizeHash(this.wotsPlus, (XMSSNode)this.stack.pop(), xMSSNode, hashTreeAddress);
        xMSSNode = new XMSSNode(xMSSNode.getHeight() + 1, xMSSNode.getValue());
        hashTreeAddress = (HashTreeAddress)((HashTreeAddress.Builder)((HashTreeAddress.Builder)((HashTreeAddress.Builder)(new HashTreeAddress.Builder()).withLayerAddress(hashTreeAddress.getLayerAddress())).withTreeAddress(hashTreeAddress.getTreeAddress())).withTreeHeight(hashTreeAddress.getTreeHeight() + 1).withTreeIndex(hashTreeAddress.getTreeIndex()).withKeyAndMask(hashTreeAddress.getKeyAndMask())).build();
      } 
      this.stack.push(xMSSNode);
    } 
    this.root = (XMSSNode)this.stack.pop();
  }
  
  private void nextAuthenticationPath(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2, OTSHashAddress paramOTSHashAddress) {
    if (paramOTSHashAddress == null)
      throw new NullPointerException("otsHashAddress == null"); 
    if (this.used)
      throw new IllegalStateException("index already used"); 
    if (this.index > this.maxIndex - 1)
      throw new IllegalStateException("index out of bounds"); 
    int i = XMSSUtil.calculateTau(this.index, this.treeHeight);
    if ((this.index >> i + 1 & true) == 0 && i < this.treeHeight - 1)
      this.keep.put(Integer.valueOf(i), (XMSSNode)this.authenticationPath.get(i)); 
    LTreeAddress lTreeAddress = (LTreeAddress)((LTreeAddress.Builder)((LTreeAddress.Builder)(new LTreeAddress.Builder()).withLayerAddress(paramOTSHashAddress.getLayerAddress())).withTreeAddress(paramOTSHashAddress.getTreeAddress())).build();
    HashTreeAddress hashTreeAddress = (HashTreeAddress)((HashTreeAddress.Builder)((HashTreeAddress.Builder)(new HashTreeAddress.Builder()).withLayerAddress(paramOTSHashAddress.getLayerAddress())).withTreeAddress(paramOTSHashAddress.getTreeAddress())).build();
    if (i == 0) {
      paramOTSHashAddress = (OTSHashAddress)((OTSHashAddress.Builder)((OTSHashAddress.Builder)((OTSHashAddress.Builder)(new OTSHashAddress.Builder()).withLayerAddress(paramOTSHashAddress.getLayerAddress())).withTreeAddress(paramOTSHashAddress.getTreeAddress())).withOTSAddress(this.index).withChainAddress(paramOTSHashAddress.getChainAddress()).withHashAddress(paramOTSHashAddress.getHashAddress()).withKeyAndMask(paramOTSHashAddress.getKeyAndMask())).build();
      this.wotsPlus.importKeys(this.wotsPlus.getWOTSPlusSecretKey(paramArrayOfByte2, paramOTSHashAddress), paramArrayOfByte1);
      WOTSPlusPublicKeyParameters wOTSPlusPublicKeyParameters = this.wotsPlus.getPublicKey(paramOTSHashAddress);
      lTreeAddress = (LTreeAddress)((LTreeAddress.Builder)((LTreeAddress.Builder)((LTreeAddress.Builder)(new LTreeAddress.Builder()).withLayerAddress(lTreeAddress.getLayerAddress())).withTreeAddress(lTreeAddress.getTreeAddress())).withLTreeAddress(this.index).withTreeHeight(lTreeAddress.getTreeHeight()).withTreeIndex(lTreeAddress.getTreeIndex()).withKeyAndMask(lTreeAddress.getKeyAndMask())).build();
      XMSSNode xMSSNode = XMSSNodeUtil.lTree(this.wotsPlus, wOTSPlusPublicKeyParameters, lTreeAddress);
      this.authenticationPath.set(0, xMSSNode);
    } else {
      hashTreeAddress = (HashTreeAddress)((HashTreeAddress.Builder)((HashTreeAddress.Builder)((HashTreeAddress.Builder)(new HashTreeAddress.Builder()).withLayerAddress(hashTreeAddress.getLayerAddress())).withTreeAddress(hashTreeAddress.getTreeAddress())).withTreeHeight(i - 1).withTreeIndex(this.index >> i).withKeyAndMask(hashTreeAddress.getKeyAndMask())).build();
      this.wotsPlus.importKeys(this.wotsPlus.getWOTSPlusSecretKey(paramArrayOfByte2, paramOTSHashAddress), paramArrayOfByte1);
      XMSSNode xMSSNode = XMSSNodeUtil.randomizeHash(this.wotsPlus, (XMSSNode)this.authenticationPath.get(i - 1), (XMSSNode)this.keep.get(Integer.valueOf(i - 1)), hashTreeAddress);
      xMSSNode = new XMSSNode(xMSSNode.getHeight() + 1, xMSSNode.getValue());
      this.authenticationPath.set(i, xMSSNode);
      this.keep.remove(Integer.valueOf(i - 1));
      int j;
      for (j = 0; j < i; j++) {
        if (j < this.treeHeight - this.k) {
          this.authenticationPath.set(j, ((BDSTreeHash)this.treeHashInstances.get(j)).getTailNode());
        } else {
          this.authenticationPath.set(j, (XMSSNode)((LinkedList)this.retain.get(Integer.valueOf(j))).removeFirst());
        } 
      } 
      j = Math.min(i, this.treeHeight - this.k);
      for (byte b1 = 0; b1 < j; b1++) {
        int m = this.index + 1 + 3 * (true << b1);
        if (m < 1 << this.treeHeight)
          ((BDSTreeHash)this.treeHashInstances.get(b1)).initialize(m); 
      } 
    } 
    for (byte b = 0; b < this.treeHeight - this.k >> 1; b++) {
      BDSTreeHash bDSTreeHash = getBDSTreeHashInstanceForUpdate();
      if (bDSTreeHash != null)
        bDSTreeHash.update(this.stack, this.wotsPlus, paramArrayOfByte1, paramArrayOfByte2, paramOTSHashAddress); 
    } 
    this.index++;
  }
  
  boolean isUsed() { return this.used; }
  
  void markUsed() { this.used = true; }
  
  private BDSTreeHash getBDSTreeHashInstanceForUpdate() {
    BDSTreeHash bDSTreeHash = null;
    for (BDSTreeHash bDSTreeHash1 : this.treeHashInstances) {
      if (bDSTreeHash1.isFinished() || !bDSTreeHash1.isInitialized())
        continue; 
      if (bDSTreeHash == null) {
        bDSTreeHash = bDSTreeHash1;
        continue;
      } 
      if (bDSTreeHash1.getHeight() < bDSTreeHash.getHeight()) {
        bDSTreeHash = bDSTreeHash1;
        continue;
      } 
      if (bDSTreeHash1.getHeight() == bDSTreeHash.getHeight())
        if (bDSTreeHash1.getIndexLeaf() < bDSTreeHash.getIndexLeaf())
          bDSTreeHash = bDSTreeHash1;  
    } 
    return bDSTreeHash;
  }
  
  private void validate() {
    if (this.authenticationPath == null)
      throw new IllegalStateException("authenticationPath == null"); 
    if (this.retain == null)
      throw new IllegalStateException("retain == null"); 
    if (this.stack == null)
      throw new IllegalStateException("stack == null"); 
    if (this.treeHashInstances == null)
      throw new IllegalStateException("treeHashInstances == null"); 
    if (this.keep == null)
      throw new IllegalStateException("keep == null"); 
    if (!XMSSUtil.isIndexValid(this.treeHeight, this.index))
      throw new IllegalStateException("index in BDS state out of bounds"); 
  }
  
  protected int getTreeHeight() { return this.treeHeight; }
  
  protected XMSSNode getRoot() { return this.root; }
  
  protected List<XMSSNode> getAuthenticationPath() {
    ArrayList arrayList = new ArrayList();
    for (XMSSNode xMSSNode : this.authenticationPath)
      arrayList.add(xMSSNode); 
    return arrayList;
  }
  
  protected int getIndex() { return this.index; }
  
  public int getMaxIndex() { return this.maxIndex; }
  
  public BDS withWOTSDigest(ASN1ObjectIdentifier paramASN1ObjectIdentifier) { return new BDS(this, paramASN1ObjectIdentifier); }
  
  public BDS withMaxIndex(int paramInt, ASN1ObjectIdentifier paramASN1ObjectIdentifier) { return new BDS(this, paramInt, paramASN1ObjectIdentifier); }
  
  private void readObject(ObjectInputStream paramObjectInputStream) throws IOException, ClassNotFoundException {
    paramObjectInputStream.defaultReadObject();
    if (paramObjectInputStream.available() != 0) {
      this.maxIndex = paramObjectInputStream.readInt();
    } else {
      this.maxIndex = (1 << this.treeHeight) - 1;
    } 
    if (this.maxIndex > (1 << this.treeHeight) - 1 || this.index > this.maxIndex + 1 || paramObjectInputStream.available() != 0)
      throw new IOException("inconsistent BDS data detected"); 
  }
  
  private void writeObject(ObjectOutputStream paramObjectOutputStream) throws IOException {
    paramObjectOutputStream.defaultWriteObject();
    paramObjectOutputStream.writeInt(this.maxIndex);
  }
}
