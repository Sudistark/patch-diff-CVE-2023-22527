package META-INF.versions.9.org.bouncycastle.pqc.crypto.xmss;

import org.bouncycastle.pqc.crypto.xmss.HashTreeAddress;
import org.bouncycastle.pqc.crypto.xmss.LTreeAddress;
import org.bouncycastle.pqc.crypto.xmss.WOTSPlus;
import org.bouncycastle.pqc.crypto.xmss.WOTSPlusPublicKeyParameters;
import org.bouncycastle.pqc.crypto.xmss.XMSSAddress;
import org.bouncycastle.pqc.crypto.xmss.XMSSNode;
import org.bouncycastle.pqc.crypto.xmss.XMSSNodeUtil;

class XMSSNodeUtil {
  static XMSSNode lTree(WOTSPlus paramWOTSPlus, WOTSPlusPublicKeyParameters paramWOTSPlusPublicKeyParameters, LTreeAddress paramLTreeAddress) {
    if (paramWOTSPlusPublicKeyParameters == null)
      throw new NullPointerException("publicKey == null"); 
    if (paramLTreeAddress == null)
      throw new NullPointerException("address == null"); 
    int i = paramWOTSPlus.getParams().getLen();
    byte[][] arrayOfByte = paramWOTSPlusPublicKeyParameters.toByteArray();
    XMSSNode[] arrayOfXMSSNode = new XMSSNode[arrayOfByte.length];
    byte b;
    for (b = 0; b < arrayOfByte.length; b++)
      arrayOfXMSSNode[b] = new XMSSNode(0, arrayOfByte[b]); 
    paramLTreeAddress = (LTreeAddress)((LTreeAddress.Builder)((LTreeAddress.Builder)((LTreeAddress.Builder)(new LTreeAddress.Builder()).withLayerAddress(paramLTreeAddress.getLayerAddress())).withTreeAddress(paramLTreeAddress.getTreeAddress())).withLTreeAddress(paramLTreeAddress.getLTreeAddress()).withTreeHeight(0).withTreeIndex(paramLTreeAddress.getTreeIndex()).withKeyAndMask(paramLTreeAddress.getKeyAndMask())).build();
    while (i > 1) {
      for (b = 0; b < (int)Math.floor((i / 2)); b++) {
        paramLTreeAddress = (LTreeAddress)((LTreeAddress.Builder)((LTreeAddress.Builder)((LTreeAddress.Builder)(new LTreeAddress.Builder()).withLayerAddress(paramLTreeAddress.getLayerAddress())).withTreeAddress(paramLTreeAddress.getTreeAddress())).withLTreeAddress(paramLTreeAddress.getLTreeAddress()).withTreeHeight(paramLTreeAddress.getTreeHeight()).withTreeIndex(b).withKeyAndMask(paramLTreeAddress.getKeyAndMask())).build();
        arrayOfXMSSNode[b] = randomizeHash(paramWOTSPlus, arrayOfXMSSNode[2 * b], arrayOfXMSSNode[2 * b + 1], paramLTreeAddress);
      } 
      if (i % 2 == 1)
        arrayOfXMSSNode[(int)Math.floor((i / 2))] = arrayOfXMSSNode[i - 1]; 
      i = (int)Math.ceil(i / 2.0D);
      paramLTreeAddress = (LTreeAddress)((LTreeAddress.Builder)((LTreeAddress.Builder)((LTreeAddress.Builder)(new LTreeAddress.Builder()).withLayerAddress(paramLTreeAddress.getLayerAddress())).withTreeAddress(paramLTreeAddress.getTreeAddress())).withLTreeAddress(paramLTreeAddress.getLTreeAddress()).withTreeHeight(paramLTreeAddress.getTreeHeight() + 1).withTreeIndex(paramLTreeAddress.getTreeIndex()).withKeyAndMask(paramLTreeAddress.getKeyAndMask())).build();
    } 
    return arrayOfXMSSNode[0];
  }
  
  static XMSSNode randomizeHash(WOTSPlus paramWOTSPlus, XMSSNode paramXMSSNode1, XMSSNode paramXMSSNode2, XMSSAddress paramXMSSAddress) {
    HashTreeAddress hashTreeAddress;
    if (paramXMSSNode1 == null)
      throw new NullPointerException("left == null"); 
    if (paramXMSSNode2 == null)
      throw new NullPointerException("right == null"); 
    if (paramXMSSNode1.getHeight() != paramXMSSNode2.getHeight())
      throw new IllegalStateException("height of both nodes must be equal"); 
    if (paramXMSSAddress == null)
      throw new NullPointerException("address == null"); 
    byte[] arrayOfByte1 = paramWOTSPlus.getPublicSeed();
    if (paramXMSSAddress instanceof LTreeAddress) {
      LTreeAddress lTreeAddress = (LTreeAddress)paramXMSSAddress;
      hashTreeAddress = (LTreeAddress)((LTreeAddress.Builder)((LTreeAddress.Builder)((LTreeAddress.Builder)(new LTreeAddress.Builder()).withLayerAddress(lTreeAddress.getLayerAddress())).withTreeAddress(lTreeAddress.getTreeAddress())).withLTreeAddress(lTreeAddress.getLTreeAddress()).withTreeHeight(lTreeAddress.getTreeHeight()).withTreeIndex(lTreeAddress.getTreeIndex()).withKeyAndMask(0)).build();
    } else if (hashTreeAddress instanceof HashTreeAddress) {
      HashTreeAddress hashTreeAddress1 = (HashTreeAddress)hashTreeAddress;
      hashTreeAddress = (HashTreeAddress)((HashTreeAddress.Builder)((HashTreeAddress.Builder)((HashTreeAddress.Builder)(new HashTreeAddress.Builder()).withLayerAddress(hashTreeAddress1.getLayerAddress())).withTreeAddress(hashTreeAddress1.getTreeAddress())).withTreeHeight(hashTreeAddress1.getTreeHeight()).withTreeIndex(hashTreeAddress1.getTreeIndex()).withKeyAndMask(0)).build();
    } 
    byte[] arrayOfByte2 = paramWOTSPlus.getKhf().PRF(arrayOfByte1, hashTreeAddress.toByteArray());
    if (hashTreeAddress instanceof LTreeAddress) {
      LTreeAddress lTreeAddress = (LTreeAddress)hashTreeAddress;
      hashTreeAddress = (LTreeAddress)((LTreeAddress.Builder)((LTreeAddress.Builder)((LTreeAddress.Builder)(new LTreeAddress.Builder()).withLayerAddress(lTreeAddress.getLayerAddress())).withTreeAddress(lTreeAddress.getTreeAddress())).withLTreeAddress(lTreeAddress.getLTreeAddress()).withTreeHeight(lTreeAddress.getTreeHeight()).withTreeIndex(lTreeAddress.getTreeIndex()).withKeyAndMask(1)).build();
    } else if (hashTreeAddress instanceof HashTreeAddress) {
      HashTreeAddress hashTreeAddress1 = (HashTreeAddress)hashTreeAddress;
      hashTreeAddress = (HashTreeAddress)((HashTreeAddress.Builder)((HashTreeAddress.Builder)((HashTreeAddress.Builder)(new HashTreeAddress.Builder()).withLayerAddress(hashTreeAddress1.getLayerAddress())).withTreeAddress(hashTreeAddress1.getTreeAddress())).withTreeHeight(hashTreeAddress1.getTreeHeight()).withTreeIndex(hashTreeAddress1.getTreeIndex()).withKeyAndMask(1)).build();
    } 
    byte[] arrayOfByte3 = paramWOTSPlus.getKhf().PRF(arrayOfByte1, hashTreeAddress.toByteArray());
    if (hashTreeAddress instanceof LTreeAddress) {
      LTreeAddress lTreeAddress = (LTreeAddress)hashTreeAddress;
      hashTreeAddress = (LTreeAddress)((LTreeAddress.Builder)((LTreeAddress.Builder)((LTreeAddress.Builder)(new LTreeAddress.Builder()).withLayerAddress(lTreeAddress.getLayerAddress())).withTreeAddress(lTreeAddress.getTreeAddress())).withLTreeAddress(lTreeAddress.getLTreeAddress()).withTreeHeight(lTreeAddress.getTreeHeight()).withTreeIndex(lTreeAddress.getTreeIndex()).withKeyAndMask(2)).build();
    } else if (hashTreeAddress instanceof HashTreeAddress) {
      HashTreeAddress hashTreeAddress1 = (HashTreeAddress)hashTreeAddress;
      hashTreeAddress = (HashTreeAddress)((HashTreeAddress.Builder)((HashTreeAddress.Builder)((HashTreeAddress.Builder)(new HashTreeAddress.Builder()).withLayerAddress(hashTreeAddress1.getLayerAddress())).withTreeAddress(hashTreeAddress1.getTreeAddress())).withTreeHeight(hashTreeAddress1.getTreeHeight()).withTreeIndex(hashTreeAddress1.getTreeIndex()).withKeyAndMask(2)).build();
    } 
    byte[] arrayOfByte4 = paramWOTSPlus.getKhf().PRF(arrayOfByte1, hashTreeAddress.toByteArray());
    int i = paramWOTSPlus.getParams().getTreeDigestSize();
    byte[] arrayOfByte5 = new byte[2 * i];
    int j;
    for (j = 0; j < i; j++)
      arrayOfByte5[j] = (byte)(paramXMSSNode1.getValue()[j] ^ arrayOfByte3[j]); 
    for (j = 0; j < i; j++)
      arrayOfByte5[j + i] = (byte)(paramXMSSNode2.getValue()[j] ^ arrayOfByte4[j]); 
    byte[] arrayOfByte6 = paramWOTSPlus.getKhf().H(arrayOfByte2, arrayOfByte5);
    return new XMSSNode(paramXMSSNode1.getHeight(), arrayOfByte6);
  }
}
