package META-INF.versions.9.org.bouncycastle.asn1;

import java.io.IOException;
import java.util.Enumeration;
import org.bouncycastle.asn1.ASN1Encodable;
import org.bouncycastle.asn1.ASN1Exception;
import org.bouncycastle.asn1.ASN1OctetString;
import org.bouncycastle.asn1.ASN1OutputStream;
import org.bouncycastle.asn1.ASN1Primitive;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.ASN1Set;
import org.bouncycastle.asn1.ASN1TaggedObject;
import org.bouncycastle.asn1.BEROctetString;
import org.bouncycastle.asn1.BERSequence;
import org.bouncycastle.asn1.BERTaggedObject;
import org.bouncycastle.asn1.StreamUtil;

public class BERTaggedObject extends ASN1TaggedObject {
  public BERTaggedObject(int paramInt, ASN1Encodable paramASN1Encodable) { super(true, paramInt, paramASN1Encodable); }
  
  public BERTaggedObject(boolean paramBoolean, int paramInt, ASN1Encodable paramASN1Encodable) { super(paramBoolean, paramInt, paramASN1Encodable); }
  
  public BERTaggedObject(int paramInt) { super(false, paramInt, new BERSequence()); }
  
  boolean isConstructed() { return (this.explicit || this.obj.toASN1Primitive().isConstructed()); }
  
  int encodedLength() throws IOException {
    ASN1Primitive aSN1Primitive = this.obj.toASN1Primitive();
    int i = aSN1Primitive.encodedLength();
    if (this.explicit)
      return StreamUtil.calculateTagLength(this.tagNo) + StreamUtil.calculateBodyLength(i) + i; 
    i--;
    return StreamUtil.calculateTagLength(this.tagNo) + i;
  }
  
  void encode(ASN1OutputStream paramASN1OutputStream, boolean paramBoolean) throws IOException {
    paramASN1OutputStream.writeTag(paramBoolean, 160, this.tagNo);
    paramASN1OutputStream.write(128);
    if (!this.explicit) {
      Enumeration enumeration;
      if (this.obj instanceof ASN1OctetString) {
        if (this.obj instanceof BEROctetString) {
          enumeration = ((BEROctetString)this.obj).getObjects();
        } else {
          ASN1OctetString aSN1OctetString = (ASN1OctetString)this.obj;
          BEROctetString bEROctetString = new BEROctetString(aSN1OctetString.getOctets());
          enumeration = bEROctetString.getObjects();
        } 
      } else if (this.obj instanceof ASN1Sequence) {
        enumeration = ((ASN1Sequence)this.obj).getObjects();
      } else if (this.obj instanceof ASN1Set) {
        enumeration = ((ASN1Set)this.obj).getObjects();
      } else {
        throw new ASN1Exception("not implemented: " + this.obj.getClass().getName());
      } 
      paramASN1OutputStream.writeElements(enumeration);
    } else {
      paramASN1OutputStream.writePrimitive(this.obj.toASN1Primitive(), true);
    } 
    paramASN1OutputStream.write(0);
    paramASN1OutputStream.write(0);
  }
}
