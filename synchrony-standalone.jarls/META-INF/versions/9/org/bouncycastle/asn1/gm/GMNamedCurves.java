package META-INF.versions.9.org.bouncycastle.asn1.gm;

import java.math.BigInteger;
import java.util.Enumeration;
import java.util.Hashtable;
import org.bouncycastle.asn1.ASN1ObjectIdentifier;
import org.bouncycastle.asn1.gm.GMNamedCurves;
import org.bouncycastle.asn1.gm.GMObjectIdentifiers;
import org.bouncycastle.asn1.x9.X9ECParameters;
import org.bouncycastle.asn1.x9.X9ECParametersHolder;
import org.bouncycastle.asn1.x9.X9ECPoint;
import org.bouncycastle.math.ec.ECCurve;
import org.bouncycastle.math.ec.WNafUtil;
import org.bouncycastle.util.Strings;
import org.bouncycastle.util.encoders.Hex;

public class GMNamedCurves {
  private static X9ECPoint configureBasepoint(ECCurve paramECCurve, String paramString) {
    X9ECPoint x9ECPoint = new X9ECPoint(paramECCurve, Hex.decodeStrict(paramString));
    WNafUtil.configureBasepoint(x9ECPoint.getPoint());
    return x9ECPoint;
  }
  
  private static ECCurve configureCurve(ECCurve paramECCurve) { return paramECCurve; }
  
  private static BigInteger fromHex(String paramString) { return new BigInteger(1, Hex.decodeStrict(paramString)); }
  
  static X9ECParametersHolder sm2p256v1 = new Object();
  
  static X9ECParametersHolder wapip192v1 = new Object();
  
  static final Hashtable objIds = new Hashtable();
  
  static final Hashtable curves = new Hashtable();
  
  static final Hashtable names = new Hashtable();
  
  static void defineCurve(String paramString, ASN1ObjectIdentifier paramASN1ObjectIdentifier, X9ECParametersHolder paramX9ECParametersHolder) {
    objIds.put(Strings.toLowerCase(paramString), paramASN1ObjectIdentifier);
    names.put(paramASN1ObjectIdentifier, paramString);
    curves.put(paramASN1ObjectIdentifier, paramX9ECParametersHolder);
  }
  
  static  {
    defineCurve("wapip192v1", GMObjectIdentifiers.wapip192v1, wapip192v1);
    defineCurve("sm2p256v1", GMObjectIdentifiers.sm2p256v1, sm2p256v1);
  }
  
  public static X9ECParameters getByName(String paramString) {
    ASN1ObjectIdentifier aSN1ObjectIdentifier = getOID(paramString);
    return (aSN1ObjectIdentifier == null) ? null : getByOID(aSN1ObjectIdentifier);
  }
  
  public static X9ECParameters getByOID(ASN1ObjectIdentifier paramASN1ObjectIdentifier) {
    X9ECParametersHolder x9ECParametersHolder = (X9ECParametersHolder)curves.get(paramASN1ObjectIdentifier);
    return (x9ECParametersHolder == null) ? null : x9ECParametersHolder.getParameters();
  }
  
  public static ASN1ObjectIdentifier getOID(String paramString) { return (ASN1ObjectIdentifier)objIds.get(Strings.toLowerCase(paramString)); }
  
  public static String getName(ASN1ObjectIdentifier paramASN1ObjectIdentifier) { return (String)names.get(paramASN1ObjectIdentifier); }
  
  public static Enumeration getNames() { return names.elements(); }
}
