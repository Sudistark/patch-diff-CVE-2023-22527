package META-INF.versions.9.org.bouncycastle.asn1;

import java.io.IOException;
import org.bouncycastle.asn1.ASN1OutputStream;
import org.bouncycastle.asn1.ASN1Primitive;
import org.bouncycastle.asn1.ASN1Private;
import org.bouncycastle.asn1.StreamUtil;
import org.bouncycastle.util.Arrays;
import org.bouncycastle.util.encoders.Hex;

public abstract class ASN1Private extends ASN1Primitive {
  protected final boolean isConstructed;
  
  protected final int tag;
  
  protected final byte[] octets;
  
  ASN1Private(boolean paramBoolean, int paramInt, byte[] paramArrayOfByte) {
    this.isConstructed = paramBoolean;
    this.tag = paramInt;
    this.octets = Arrays.clone(paramArrayOfByte);
  }
  
  public static ASN1Private getInstance(Object paramObject) {
    if (paramObject == null || paramObject instanceof ASN1Private)
      return (ASN1Private)paramObject; 
    if (paramObject instanceof byte[])
      try {
        return getInstance(ASN1Primitive.fromByteArray((byte[])paramObject));
      } catch (IOException iOException) {
        throw new IllegalArgumentException("Failed to construct object from byte[]: " + iOException.getMessage());
      }  
    throw new IllegalArgumentException("unknown object in getInstance: " + paramObject.getClass().getName());
  }
  
  protected static int getLengthOfHeader(byte[] paramArrayOfByte) {
    byte b = paramArrayOfByte[1] & 0xFF;
    if (b == 128)
      return 2; 
    if (b > Byte.MAX_VALUE) {
      byte b1 = b & 0x7F;
      if (b1 > 4)
        throw new IllegalStateException("DER length more than 4 bytes: " + b1); 
      return b1 + 2;
    } 
    return 2;
  }
  
  public boolean isConstructed() { return this.isConstructed; }
  
  public byte[] getContents() { return Arrays.clone(this.octets); }
  
  public int getPrivateTag() { return this.tag; }
  
  public ASN1Primitive getObject() throws IOException { return ASN1Primitive.fromByteArray(getContents()); }
  
  public ASN1Primitive getObject(int paramInt) throws IOException {
    if (paramInt >= 31)
      throw new IOException("unsupported tag number"); 
    byte[] arrayOfByte1 = getEncoded();
    byte[] arrayOfByte2 = replaceTagNumber(paramInt, arrayOfByte1);
    if ((arrayOfByte1[0] & 0x20) != 0)
      arrayOfByte2[0] = (byte)(arrayOfByte2[0] | 0x20); 
    return ASN1Primitive.fromByteArray(arrayOfByte2);
  }
  
  int encodedLength() { return StreamUtil.calculateTagLength(this.tag) + StreamUtil.calculateBodyLength(this.octets.length) + this.octets.length; }
  
  void encode(ASN1OutputStream paramASN1OutputStream, boolean paramBoolean) throws IOException {
    char c = 'Ã€';
    if (this.isConstructed)
      c |= 0x20; 
    paramASN1OutputStream.writeEncoded(paramBoolean, c, this.tag, this.octets);
  }
  
  boolean asn1Equals(ASN1Primitive paramASN1Primitive) {
    if (!(paramASN1Primitive instanceof ASN1Private))
      return false; 
    ASN1Private aSN1Private = (ASN1Private)paramASN1Primitive;
    return (this.isConstructed == aSN1Private.isConstructed && this.tag == aSN1Private.tag && 
      
      Arrays.areEqual(this.octets, aSN1Private.octets));
  }
  
  public int hashCode() { return (this.isConstructed ? 1 : 0) ^ this.tag ^ Arrays.hashCode(this.octets); }
  
  private byte[] replaceTagNumber(int paramInt, byte[] paramArrayOfByte) throws IOException {
    byte b = paramArrayOfByte[0] & 0x1F;
    int i = 1;
    if (b == 31) {
      byte b1 = paramArrayOfByte[i++] & 0xFF;
      if ((b1 & 0x7F) == 0)
        throw new IOException("corrupted stream - invalid high tag number found"); 
      while ((b1 & 0x80) != 0)
        b1 = paramArrayOfByte[i++] & 0xFF; 
    } 
    byte[] arrayOfByte = new byte[paramArrayOfByte.length - i + 1];
    System.arraycopy(paramArrayOfByte, i, arrayOfByte, 1, arrayOfByte.length - 1);
    arrayOfByte[0] = (byte)paramInt;
    return arrayOfByte;
  }
  
  public String toString() {
    StringBuffer stringBuffer = new StringBuffer();
    stringBuffer.append("[");
    if (isConstructed())
      stringBuffer.append("CONSTRUCTED "); 
    stringBuffer.append("PRIVATE ");
    stringBuffer.append(Integer.toString(getPrivateTag()));
    stringBuffer.append("]");
    if (this.octets != null) {
      stringBuffer.append(" #");
      stringBuffer.append(Hex.toHexString(this.octets));
    } else {
      stringBuffer.append(" #null");
    } 
    stringBuffer.append(" ");
    return stringBuffer.toString();
  }
}
