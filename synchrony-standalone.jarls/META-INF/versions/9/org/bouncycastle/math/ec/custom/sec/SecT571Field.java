package META-INF.versions.9.org.bouncycastle.math.ec.custom.sec;

import java.math.BigInteger;
import org.bouncycastle.math.ec.custom.sec.SecT571Field;
import org.bouncycastle.math.raw.Interleave;
import org.bouncycastle.math.raw.Nat;
import org.bouncycastle.math.raw.Nat576;

public class SecT571Field {
  private static final long M59 = 576460752303423487L;
  
  private static final long[] ROOT_Z = { 3161836309350906777L, -7642453882179322845L, -3821226941089661423L, 7312758566309945096L, -556661012383879292L, 8945041530681231562L, -4750851271514160027L, 6847946401097695794L, 541669439031730457L };
  
  public static void add(long[] paramArrayOfLong1, long[] paramArrayOfLong2, long[] paramArrayOfLong3) {
    for (byte b = 0; b < 9; b++)
      paramArrayOfLong3[b] = paramArrayOfLong1[b] ^ paramArrayOfLong2[b]; 
  }
  
  private static void add(long[] paramArrayOfLong1, int paramInt1, long[] paramArrayOfLong2, int paramInt2, long[] paramArrayOfLong3, int paramInt3) {
    for (int i = 0; i < 9; i++)
      paramArrayOfLong3[paramInt3 + i] = paramArrayOfLong1[paramInt1 + i] ^ paramArrayOfLong2[paramInt2 + i]; 
  }
  
  public static void addBothTo(long[] paramArrayOfLong1, long[] paramArrayOfLong2, long[] paramArrayOfLong3) {
    for (byte b = 0; b < 9; b++)
      paramArrayOfLong3[b] = paramArrayOfLong3[b] ^ paramArrayOfLong1[b] ^ paramArrayOfLong2[b]; 
  }
  
  private static void addBothTo(long[] paramArrayOfLong1, int paramInt1, long[] paramArrayOfLong2, int paramInt2, long[] paramArrayOfLong3, int paramInt3) {
    for (int i = 0; i < 9; i++)
      paramArrayOfLong3[paramInt3 + i] = paramArrayOfLong3[paramInt3 + i] ^ paramArrayOfLong1[paramInt1 + i] ^ paramArrayOfLong2[paramInt2 + i]; 
  }
  
  public static void addExt(long[] paramArrayOfLong1, long[] paramArrayOfLong2, long[] paramArrayOfLong3) {
    for (byte b = 0; b < 18; b++)
      paramArrayOfLong3[b] = paramArrayOfLong1[b] ^ paramArrayOfLong2[b]; 
  }
  
  public static void addOne(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    paramArrayOfLong2[0] = paramArrayOfLong1[0] ^ 0x1L;
    for (byte b = 1; b < 9; b++)
      paramArrayOfLong2[b] = paramArrayOfLong1[b]; 
  }
  
  private static void addTo(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    for (byte b = 0; b < 9; b++)
      paramArrayOfLong2[b] = paramArrayOfLong2[b] ^ paramArrayOfLong1[b]; 
  }
  
  public static long[] fromBigInteger(BigInteger paramBigInteger) { return Nat.fromBigInteger64(571, paramBigInteger); }
  
  public static void halfTrace(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    long[] arrayOfLong = Nat576.createExt64();
    Nat576.copy64(paramArrayOfLong1, paramArrayOfLong2);
    for (boolean bool = true; bool < 'Ȼ'; bool += true) {
      implSquare(paramArrayOfLong2, arrayOfLong);
      reduce(arrayOfLong, paramArrayOfLong2);
      implSquare(paramArrayOfLong2, arrayOfLong);
      reduce(arrayOfLong, paramArrayOfLong2);
      addTo(paramArrayOfLong1, paramArrayOfLong2);
    } 
  }
  
  public static void invert(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    if (Nat576.isZero64(paramArrayOfLong1))
      throw new IllegalStateException(); 
    long[] arrayOfLong1 = Nat576.create64();
    long[] arrayOfLong2 = Nat576.create64();
    long[] arrayOfLong3 = Nat576.create64();
    square(paramArrayOfLong1, arrayOfLong3);
    square(arrayOfLong3, arrayOfLong1);
    square(arrayOfLong1, arrayOfLong2);
    multiply(arrayOfLong1, arrayOfLong2, arrayOfLong1);
    squareN(arrayOfLong1, 2, arrayOfLong2);
    multiply(arrayOfLong1, arrayOfLong2, arrayOfLong1);
    multiply(arrayOfLong1, arrayOfLong3, arrayOfLong1);
    squareN(arrayOfLong1, 5, arrayOfLong2);
    multiply(arrayOfLong1, arrayOfLong2, arrayOfLong1);
    squareN(arrayOfLong2, 5, arrayOfLong2);
    multiply(arrayOfLong1, arrayOfLong2, arrayOfLong1);
    squareN(arrayOfLong1, 15, arrayOfLong2);
    multiply(arrayOfLong1, arrayOfLong2, arrayOfLong3);
    squareN(arrayOfLong3, 30, arrayOfLong1);
    squareN(arrayOfLong1, 30, arrayOfLong2);
    multiply(arrayOfLong1, arrayOfLong2, arrayOfLong1);
    squareN(arrayOfLong1, 60, arrayOfLong2);
    multiply(arrayOfLong1, arrayOfLong2, arrayOfLong1);
    squareN(arrayOfLong2, 60, arrayOfLong2);
    multiply(arrayOfLong1, arrayOfLong2, arrayOfLong1);
    squareN(arrayOfLong1, 180, arrayOfLong2);
    multiply(arrayOfLong1, arrayOfLong2, arrayOfLong1);
    squareN(arrayOfLong2, 180, arrayOfLong2);
    multiply(arrayOfLong1, arrayOfLong2, arrayOfLong1);
    multiply(arrayOfLong1, arrayOfLong3, paramArrayOfLong2);
  }
  
  public static void multiply(long[] paramArrayOfLong1, long[] paramArrayOfLong2, long[] paramArrayOfLong3) {
    long[] arrayOfLong = Nat576.createExt64();
    implMultiply(paramArrayOfLong1, paramArrayOfLong2, arrayOfLong);
    reduce(arrayOfLong, paramArrayOfLong3);
  }
  
  public static void multiplyAddToExt(long[] paramArrayOfLong1, long[] paramArrayOfLong2, long[] paramArrayOfLong3) {
    long[] arrayOfLong = Nat576.createExt64();
    implMultiply(paramArrayOfLong1, paramArrayOfLong2, arrayOfLong);
    addExt(paramArrayOfLong3, arrayOfLong, paramArrayOfLong3);
  }
  
  public static void multiplyPrecomp(long[] paramArrayOfLong1, long[] paramArrayOfLong2, long[] paramArrayOfLong3) {
    long[] arrayOfLong = Nat576.createExt64();
    implMultiplyPrecomp(paramArrayOfLong1, paramArrayOfLong2, arrayOfLong);
    reduce(arrayOfLong, paramArrayOfLong3);
  }
  
  public static void multiplyPrecompAddToExt(long[] paramArrayOfLong1, long[] paramArrayOfLong2, long[] paramArrayOfLong3) {
    long[] arrayOfLong = Nat576.createExt64();
    implMultiplyPrecomp(paramArrayOfLong1, paramArrayOfLong2, arrayOfLong);
    addExt(paramArrayOfLong3, arrayOfLong, paramArrayOfLong3);
  }
  
  public static long[] precompMultiplicand(long[] paramArrayOfLong) {
    char c = '';
    long[] arrayOfLong = new long[c << '\001'];
    System.arraycopy(paramArrayOfLong, 0, arrayOfLong, 9, 9);
    byte b1 = 0;
    for (byte b2 = 7; b2 > 0; b2--) {
      b1 += true;
      Nat.shiftUpBit64(9, arrayOfLong, b1 >>> true, 0L, arrayOfLong, b1);
      reduce5(arrayOfLong, b1);
      add(arrayOfLong, 9, arrayOfLong, b1, arrayOfLong, b1 + 9);
    } 
    Nat.shiftUpBits64(c, arrayOfLong, 0, 4, 0L, arrayOfLong, c);
    return arrayOfLong;
  }
  
  public static void reduce(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    long l1 = paramArrayOfLong1[9];
    long l2 = paramArrayOfLong1[17], l3 = l1;
    l1 = l3 ^ l2 >>> 59 ^ l2 >>> 57 ^ l2 >>> 54 ^ l2 >>> 49;
    l3 = paramArrayOfLong1[8] ^ l2 << 5 ^ l2 << 7 ^ l2 << 10 ^ l2 << 15;
    for (byte b = 16; b >= 10; b--) {
      l2 = paramArrayOfLong1[b];
      paramArrayOfLong2[b - 8] = l3 ^ l2 >>> 59 ^ l2 >>> 57 ^ l2 >>> 54 ^ l2 >>> 49;
      l3 = paramArrayOfLong1[b - 9] ^ l2 << 5 ^ l2 << 7 ^ l2 << 10 ^ l2 << 15;
    } 
    l2 = l1;
    paramArrayOfLong2[1] = l3 ^ l2 >>> 59 ^ l2 >>> 57 ^ l2 >>> 54 ^ l2 >>> 49;
    l3 = paramArrayOfLong1[0] ^ l2 << 5 ^ l2 << 7 ^ l2 << 10 ^ l2 << 15;
    long l4 = paramArrayOfLong2[8];
    long l5 = l4 >>> 59;
    paramArrayOfLong2[0] = l3 ^ l5 ^ l5 << 2 ^ l5 << 5 ^ l5 << 10;
    paramArrayOfLong2[8] = l4 & 0x7FFFFFFFFFFFFFFL;
  }
  
  public static void reduce5(long[] paramArrayOfLong, int paramInt) {
    long l1 = paramArrayOfLong[paramInt + 8], l2 = l1 >>> 59;
    paramArrayOfLong[paramInt] = paramArrayOfLong[paramInt] ^ l2 ^ l2 << 2 ^ l2 << 5 ^ l2 << 10;
    paramArrayOfLong[paramInt + 8] = l1 & 0x7FFFFFFFFFFFFFFL;
  }
  
  public static void sqrt(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    long[] arrayOfLong1 = Nat576.create64(), arrayOfLong2 = Nat576.create64();
    byte b1 = 0;
    for (byte b2 = 0; b2 < 4; b2++) {
      long l1 = Interleave.unshuffle(paramArrayOfLong1[b1++]);
      long l2 = Interleave.unshuffle(paramArrayOfLong1[b1++]);
      arrayOfLong1[b2] = l1 & 0xFFFFFFFFL | l2 << 32;
      arrayOfLong2[b2] = l1 >>> 32 | l2 & 0xFFFFFFFF00000000L;
    } 
    long l = Interleave.unshuffle(paramArrayOfLong1[b1]);
    arrayOfLong1[4] = l & 0xFFFFFFFFL;
    arrayOfLong2[4] = l >>> 32;
    multiply(arrayOfLong2, ROOT_Z, paramArrayOfLong2);
    add(paramArrayOfLong2, arrayOfLong1, paramArrayOfLong2);
  }
  
  public static void square(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    long[] arrayOfLong = Nat576.createExt64();
    implSquare(paramArrayOfLong1, arrayOfLong);
    reduce(arrayOfLong, paramArrayOfLong2);
  }
  
  public static void squareAddToExt(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    long[] arrayOfLong = Nat576.createExt64();
    implSquare(paramArrayOfLong1, arrayOfLong);
    addExt(paramArrayOfLong2, arrayOfLong, paramArrayOfLong2);
  }
  
  public static void squareN(long[] paramArrayOfLong1, int paramInt, long[] paramArrayOfLong2) {
    long[] arrayOfLong = Nat576.createExt64();
    implSquare(paramArrayOfLong1, arrayOfLong);
    reduce(arrayOfLong, paramArrayOfLong2);
    while (--paramInt > 0) {
      implSquare(paramArrayOfLong2, arrayOfLong);
      reduce(arrayOfLong, paramArrayOfLong2);
    } 
  }
  
  public static int trace(long[] paramArrayOfLong) { return (int)(paramArrayOfLong[0] ^ paramArrayOfLong[8] >>> 49 ^ paramArrayOfLong[8] >>> 57) & true; }
  
  protected static void implMultiply(long[] paramArrayOfLong1, long[] paramArrayOfLong2, long[] paramArrayOfLong3) {
    long[] arrayOfLong = new long[16];
    for (byte b = 0; b < 9; b++)
      implMulwAcc(arrayOfLong, paramArrayOfLong1[b], paramArrayOfLong2[b], paramArrayOfLong3, b << true); 
    long l1 = paramArrayOfLong3[0], l2 = paramArrayOfLong3[1];
    l1 ^= paramArrayOfLong3[2];
    paramArrayOfLong3[1] = l1 ^ l2;
    l2 ^= paramArrayOfLong3[3];
    l1 ^= paramArrayOfLong3[4];
    paramArrayOfLong3[2] = l1 ^ l2;
    l2 ^= paramArrayOfLong3[5];
    l1 ^= paramArrayOfLong3[6];
    paramArrayOfLong3[3] = l1 ^ l2;
    l2 ^= paramArrayOfLong3[7];
    l1 ^= paramArrayOfLong3[8];
    paramArrayOfLong3[4] = l1 ^ l2;
    l2 ^= paramArrayOfLong3[9];
    l1 ^= paramArrayOfLong3[10];
    paramArrayOfLong3[5] = l1 ^ l2;
    l2 ^= paramArrayOfLong3[11];
    l1 ^= paramArrayOfLong3[12];
    paramArrayOfLong3[6] = l1 ^ l2;
    l2 ^= paramArrayOfLong3[13];
    l1 ^= paramArrayOfLong3[14];
    paramArrayOfLong3[7] = l1 ^ l2;
    l2 ^= paramArrayOfLong3[15];
    l1 ^= paramArrayOfLong3[16];
    paramArrayOfLong3[8] = l1 ^ l2;
    l2 ^= paramArrayOfLong3[17];
    long l3 = l1 ^ l2;
    paramArrayOfLong3[9] = paramArrayOfLong3[0] ^ l3;
    paramArrayOfLong3[10] = paramArrayOfLong3[1] ^ l3;
    paramArrayOfLong3[11] = paramArrayOfLong3[2] ^ l3;
    paramArrayOfLong3[12] = paramArrayOfLong3[3] ^ l3;
    paramArrayOfLong3[13] = paramArrayOfLong3[4] ^ l3;
    paramArrayOfLong3[14] = paramArrayOfLong3[5] ^ l3;
    paramArrayOfLong3[15] = paramArrayOfLong3[6] ^ l3;
    paramArrayOfLong3[16] = paramArrayOfLong3[7] ^ l3;
    paramArrayOfLong3[17] = paramArrayOfLong3[8] ^ l3;
    implMulwAcc(arrayOfLong, paramArrayOfLong1[0] ^ paramArrayOfLong1[1], paramArrayOfLong2[0] ^ paramArrayOfLong2[1], paramArrayOfLong3, 1);
    implMulwAcc(arrayOfLong, paramArrayOfLong1[0] ^ paramArrayOfLong1[2], paramArrayOfLong2[0] ^ paramArrayOfLong2[2], paramArrayOfLong3, 2);
    implMulwAcc(arrayOfLong, paramArrayOfLong1[0] ^ paramArrayOfLong1[3], paramArrayOfLong2[0] ^ paramArrayOfLong2[3], paramArrayOfLong3, 3);
    implMulwAcc(arrayOfLong, paramArrayOfLong1[1] ^ paramArrayOfLong1[2], paramArrayOfLong2[1] ^ paramArrayOfLong2[2], paramArrayOfLong3, 3);
    implMulwAcc(arrayOfLong, paramArrayOfLong1[0] ^ paramArrayOfLong1[4], paramArrayOfLong2[0] ^ paramArrayOfLong2[4], paramArrayOfLong3, 4);
    implMulwAcc(arrayOfLong, paramArrayOfLong1[1] ^ paramArrayOfLong1[3], paramArrayOfLong2[1] ^ paramArrayOfLong2[3], paramArrayOfLong3, 4);
    implMulwAcc(arrayOfLong, paramArrayOfLong1[0] ^ paramArrayOfLong1[5], paramArrayOfLong2[0] ^ paramArrayOfLong2[5], paramArrayOfLong3, 5);
    implMulwAcc(arrayOfLong, paramArrayOfLong1[1] ^ paramArrayOfLong1[4], paramArrayOfLong2[1] ^ paramArrayOfLong2[4], paramArrayOfLong3, 5);
    implMulwAcc(arrayOfLong, paramArrayOfLong1[2] ^ paramArrayOfLong1[3], paramArrayOfLong2[2] ^ paramArrayOfLong2[3], paramArrayOfLong3, 5);
    implMulwAcc(arrayOfLong, paramArrayOfLong1[0] ^ paramArrayOfLong1[6], paramArrayOfLong2[0] ^ paramArrayOfLong2[6], paramArrayOfLong3, 6);
    implMulwAcc(arrayOfLong, paramArrayOfLong1[1] ^ paramArrayOfLong1[5], paramArrayOfLong2[1] ^ paramArrayOfLong2[5], paramArrayOfLong3, 6);
    implMulwAcc(arrayOfLong, paramArrayOfLong1[2] ^ paramArrayOfLong1[4], paramArrayOfLong2[2] ^ paramArrayOfLong2[4], paramArrayOfLong3, 6);
    implMulwAcc(arrayOfLong, paramArrayOfLong1[0] ^ paramArrayOfLong1[7], paramArrayOfLong2[0] ^ paramArrayOfLong2[7], paramArrayOfLong3, 7);
    implMulwAcc(arrayOfLong, paramArrayOfLong1[1] ^ paramArrayOfLong1[6], paramArrayOfLong2[1] ^ paramArrayOfLong2[6], paramArrayOfLong3, 7);
    implMulwAcc(arrayOfLong, paramArrayOfLong1[2] ^ paramArrayOfLong1[5], paramArrayOfLong2[2] ^ paramArrayOfLong2[5], paramArrayOfLong3, 7);
    implMulwAcc(arrayOfLong, paramArrayOfLong1[3] ^ paramArrayOfLong1[4], paramArrayOfLong2[3] ^ paramArrayOfLong2[4], paramArrayOfLong3, 7);
    implMulwAcc(arrayOfLong, paramArrayOfLong1[0] ^ paramArrayOfLong1[8], paramArrayOfLong2[0] ^ paramArrayOfLong2[8], paramArrayOfLong3, 8);
    implMulwAcc(arrayOfLong, paramArrayOfLong1[1] ^ paramArrayOfLong1[7], paramArrayOfLong2[1] ^ paramArrayOfLong2[7], paramArrayOfLong3, 8);
    implMulwAcc(arrayOfLong, paramArrayOfLong1[2] ^ paramArrayOfLong1[6], paramArrayOfLong2[2] ^ paramArrayOfLong2[6], paramArrayOfLong3, 8);
    implMulwAcc(arrayOfLong, paramArrayOfLong1[3] ^ paramArrayOfLong1[5], paramArrayOfLong2[3] ^ paramArrayOfLong2[5], paramArrayOfLong3, 8);
    implMulwAcc(arrayOfLong, paramArrayOfLong1[1] ^ paramArrayOfLong1[8], paramArrayOfLong2[1] ^ paramArrayOfLong2[8], paramArrayOfLong3, 9);
    implMulwAcc(arrayOfLong, paramArrayOfLong1[2] ^ paramArrayOfLong1[7], paramArrayOfLong2[2] ^ paramArrayOfLong2[7], paramArrayOfLong3, 9);
    implMulwAcc(arrayOfLong, paramArrayOfLong1[3] ^ paramArrayOfLong1[6], paramArrayOfLong2[3] ^ paramArrayOfLong2[6], paramArrayOfLong3, 9);
    implMulwAcc(arrayOfLong, paramArrayOfLong1[4] ^ paramArrayOfLong1[5], paramArrayOfLong2[4] ^ paramArrayOfLong2[5], paramArrayOfLong3, 9);
    implMulwAcc(arrayOfLong, paramArrayOfLong1[2] ^ paramArrayOfLong1[8], paramArrayOfLong2[2] ^ paramArrayOfLong2[8], paramArrayOfLong3, 10);
    implMulwAcc(arrayOfLong, paramArrayOfLong1[3] ^ paramArrayOfLong1[7], paramArrayOfLong2[3] ^ paramArrayOfLong2[7], paramArrayOfLong3, 10);
    implMulwAcc(arrayOfLong, paramArrayOfLong1[4] ^ paramArrayOfLong1[6], paramArrayOfLong2[4] ^ paramArrayOfLong2[6], paramArrayOfLong3, 10);
    implMulwAcc(arrayOfLong, paramArrayOfLong1[3] ^ paramArrayOfLong1[8], paramArrayOfLong2[3] ^ paramArrayOfLong2[8], paramArrayOfLong3, 11);
    implMulwAcc(arrayOfLong, paramArrayOfLong1[4] ^ paramArrayOfLong1[7], paramArrayOfLong2[4] ^ paramArrayOfLong2[7], paramArrayOfLong3, 11);
    implMulwAcc(arrayOfLong, paramArrayOfLong1[5] ^ paramArrayOfLong1[6], paramArrayOfLong2[5] ^ paramArrayOfLong2[6], paramArrayOfLong3, 11);
    implMulwAcc(arrayOfLong, paramArrayOfLong1[4] ^ paramArrayOfLong1[8], paramArrayOfLong2[4] ^ paramArrayOfLong2[8], paramArrayOfLong3, 12);
    implMulwAcc(arrayOfLong, paramArrayOfLong1[5] ^ paramArrayOfLong1[7], paramArrayOfLong2[5] ^ paramArrayOfLong2[7], paramArrayOfLong3, 12);
    implMulwAcc(arrayOfLong, paramArrayOfLong1[5] ^ paramArrayOfLong1[8], paramArrayOfLong2[5] ^ paramArrayOfLong2[8], paramArrayOfLong3, 13);
    implMulwAcc(arrayOfLong, paramArrayOfLong1[6] ^ paramArrayOfLong1[7], paramArrayOfLong2[6] ^ paramArrayOfLong2[7], paramArrayOfLong3, 13);
    implMulwAcc(arrayOfLong, paramArrayOfLong1[6] ^ paramArrayOfLong1[8], paramArrayOfLong2[6] ^ paramArrayOfLong2[8], paramArrayOfLong3, 14);
    implMulwAcc(arrayOfLong, paramArrayOfLong1[7] ^ paramArrayOfLong1[8], paramArrayOfLong2[7] ^ paramArrayOfLong2[8], paramArrayOfLong3, 15);
  }
  
  protected static void implMultiplyPrecomp(long[] paramArrayOfLong1, long[] paramArrayOfLong2, long[] paramArrayOfLong3) {
    int i = 15;
    byte b;
    for (b = 56; b >= 0; b -= 8) {
      for (boolean bool = true; bool < 9; bool += true) {
        int j = (int)(paramArrayOfLong1[bool] >>> b);
        int k = j & i;
        int m = j >>> 4 & i;
        addBothTo(paramArrayOfLong2, 9 * k, paramArrayOfLong2, 9 * (m + 16), paramArrayOfLong3, bool - true);
      } 
      Nat.shiftUpBits64(16, paramArrayOfLong3, 0, 8, 0L);
    } 
    for (b = 56; b >= 0; b -= 8) {
      for (byte b1 = 0; b1 < 9; b1 += 2) {
        int j = (int)(paramArrayOfLong1[b1] >>> b);
        int k = j & i;
        int m = j >>> 4 & i;
        addBothTo(paramArrayOfLong2, 9 * k, paramArrayOfLong2, 9 * (m + 16), paramArrayOfLong3, b1);
      } 
      if (b > 0)
        Nat.shiftUpBits64(18, paramArrayOfLong3, 0, 8, 0L); 
    } 
  }
  
  protected static void implMulwAcc(long[] paramArrayOfLong1, long paramLong1, long paramLong2, long[] paramArrayOfLong2, int paramInt) {
    paramArrayOfLong1[1] = paramLong2;
    int i;
    for (i = 2; i < 16; i += 2) {
      paramArrayOfLong1[i] = paramArrayOfLong1[i >>> 1] << true;
      paramArrayOfLong1[i + 1] = paramArrayOfLong1[i] ^ paramLong2;
    } 
    i = (int)paramLong1;
    long l1 = 0L, l2 = paramArrayOfLong1[i & 0xF] ^ paramArrayOfLong1[i >>> 4 & 0xF] << 4;
    byte b1 = 56;
    do {
      i = (int)(paramLong1 >>> b1);
      long l = paramArrayOfLong1[i & 0xF] ^ paramArrayOfLong1[i >>> 4 & 0xF] << 4;
      l2 ^= l << b1;
      l1 ^= l >>> -b1;
      b1 -= 8;
    } while (b1 > 0);
    for (byte b2 = 0; b2 < 7; b2++) {
      paramLong1 = (paramLong1 & 0xFEFEFEFEFEFEFEFEL) >>> true;
      l1 ^= paramLong1 & paramLong2 << b2 >> 63;
    } 
    paramArrayOfLong2[paramInt] = paramArrayOfLong2[paramInt] ^ l2;
    paramArrayOfLong2[paramInt + 1] = paramArrayOfLong2[paramInt + 1] ^ l1;
  }
  
  protected static void implSquare(long[] paramArrayOfLong1, long[] paramArrayOfLong2) { Interleave.expand64To128(paramArrayOfLong1, 0, 9, paramArrayOfLong2, 0); }
}
