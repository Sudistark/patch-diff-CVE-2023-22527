package META-INF.versions.9.org.bouncycastle.math.ec.custom.sec;

import java.math.BigInteger;
import org.bouncycastle.math.ec.ECConstants;
import org.bouncycastle.math.ec.ECCurve;
import org.bouncycastle.math.ec.ECFieldElement;
import org.bouncycastle.math.ec.ECLookupTable;
import org.bouncycastle.math.ec.ECPoint;
import org.bouncycastle.math.ec.custom.sec.SecT131FieldElement;
import org.bouncycastle.math.ec.custom.sec.SecT131R2Curve;
import org.bouncycastle.math.ec.custom.sec.SecT131R2Point;
import org.bouncycastle.math.raw.Nat192;
import org.bouncycastle.util.encoders.Hex;

public class SecT131R2Curve extends ECCurve.AbstractF2m {
  private static final int SECT131R2_DEFAULT_COORDS = 6;
  
  private static final ECFieldElement[] SECT131R2_AFFINE_ZS = { new SecT131FieldElement(ECConstants.ONE) };
  
  protected SecT131R2Point infinity;
  
  public SecT131R2Curve() {
    super(131, 2, 3, 8);
    this.infinity = new SecT131R2Point(this, null, null);
    this.a = fromBigInteger(new BigInteger(1, Hex.decodeStrict("03E5A88919D7CAFCBF415F07C2176573B2")));
    this.b = fromBigInteger(new BigInteger(1, Hex.decodeStrict("04B8266A46C55657AC734CE38F018F2192")));
    this.order = new BigInteger(1, Hex.decodeStrict("0400000000000000016954A233049BA98F"));
    this.cofactor = BigInteger.valueOf(2L);
    this.coord = 6;
  }
  
  protected ECCurve cloneCurve() { return new SecT131R2Curve(); }
  
  public boolean supportsCoordinateSystem(int paramInt) {
    switch (paramInt) {
      case 6:
        return true;
    } 
    return false;
  }
  
  public int getFieldSize() { return 131; }
  
  public ECFieldElement fromBigInteger(BigInteger paramBigInteger) { return new SecT131FieldElement(paramBigInteger); }
  
  protected ECPoint createRawPoint(ECFieldElement paramECFieldElement1, ECFieldElement paramECFieldElement2) { return new SecT131R2Point(this, paramECFieldElement1, paramECFieldElement2); }
  
  protected ECPoint createRawPoint(ECFieldElement paramECFieldElement1, ECFieldElement paramECFieldElement2, ECFieldElement[] paramArrayOfECFieldElement) { return new SecT131R2Point(this, paramECFieldElement1, paramECFieldElement2, paramArrayOfECFieldElement); }
  
  public ECPoint getInfinity() { return this.infinity; }
  
  public boolean isKoblitz() { return false; }
  
  public int getM() { return 131; }
  
  public boolean isTrinomial() { return false; }
  
  public int getK1() { return 2; }
  
  public int getK2() { return 3; }
  
  public int getK3() { return 8; }
  
  public ECLookupTable createCacheSafeLookupTable(ECPoint[] paramArrayOfECPoint, int paramInt1, int paramInt2) {
    long[] arrayOfLong = new long[paramInt2 * 3 * 2];
    byte b = 0;
    for (int i = 0; i < paramInt2; i++) {
      ECPoint eCPoint = paramArrayOfECPoint[paramInt1 + i];
      Nat192.copy64(((SecT131FieldElement)eCPoint.getRawXCoord()).x, 0, arrayOfLong, b);
      b += 3;
      Nat192.copy64(((SecT131FieldElement)eCPoint.getRawYCoord()).x, 0, arrayOfLong, b);
      b += 3;
    } 
    return new Object(this, paramInt2, arrayOfLong);
  }
}
