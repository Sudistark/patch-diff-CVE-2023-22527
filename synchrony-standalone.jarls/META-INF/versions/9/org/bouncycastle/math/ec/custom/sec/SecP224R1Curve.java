package META-INF.versions.9.org.bouncycastle.math.ec.custom.sec;

import java.math.BigInteger;
import java.security.SecureRandom;
import org.bouncycastle.math.ec.ECConstants;
import org.bouncycastle.math.ec.ECCurve;
import org.bouncycastle.math.ec.ECFieldElement;
import org.bouncycastle.math.ec.ECLookupTable;
import org.bouncycastle.math.ec.ECPoint;
import org.bouncycastle.math.ec.custom.sec.SecP224R1Curve;
import org.bouncycastle.math.ec.custom.sec.SecP224R1Field;
import org.bouncycastle.math.ec.custom.sec.SecP224R1FieldElement;
import org.bouncycastle.math.ec.custom.sec.SecP224R1Point;
import org.bouncycastle.math.raw.Nat224;
import org.bouncycastle.util.encoders.Hex;

public class SecP224R1Curve extends ECCurve.AbstractFp {
  public static final BigInteger q = SecP224R1FieldElement.Q;
  
  private static final int SECP224R1_DEFAULT_COORDS = 2;
  
  private static final ECFieldElement[] SECP224R1_AFFINE_ZS = { new SecP224R1FieldElement(ECConstants.ONE) };
  
  protected SecP224R1Point infinity;
  
  public SecP224R1Curve() {
    super(q);
    this.infinity = new SecP224R1Point(this, null, null);
    this.a = fromBigInteger(new BigInteger(1, 
          Hex.decodeStrict("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFE")));
    this.b = fromBigInteger(new BigInteger(1, 
          Hex.decodeStrict("B4050A850C04B3ABF54132565044B0B7D7BFD8BA270B39432355FFB4")));
    this.order = new BigInteger(1, Hex.decodeStrict("FFFFFFFFFFFFFFFFFFFFFFFFFFFF16A2E0B8F03E13DD29455C5C2A3D"));
    this.cofactor = BigInteger.valueOf(1L);
    this.coord = 2;
  }
  
  protected ECCurve cloneCurve() { return new SecP224R1Curve(); }
  
  public boolean supportsCoordinateSystem(int paramInt) {
    switch (paramInt) {
      case 2:
        return true;
    } 
    return false;
  }
  
  public BigInteger getQ() { return q; }
  
  public int getFieldSize() { return q.bitLength(); }
  
  public ECFieldElement fromBigInteger(BigInteger paramBigInteger) { return new SecP224R1FieldElement(paramBigInteger); }
  
  protected ECPoint createRawPoint(ECFieldElement paramECFieldElement1, ECFieldElement paramECFieldElement2) { return new SecP224R1Point(this, paramECFieldElement1, paramECFieldElement2); }
  
  protected ECPoint createRawPoint(ECFieldElement paramECFieldElement1, ECFieldElement paramECFieldElement2, ECFieldElement[] paramArrayOfECFieldElement) { return new SecP224R1Point(this, paramECFieldElement1, paramECFieldElement2, paramArrayOfECFieldElement); }
  
  public ECPoint getInfinity() { return this.infinity; }
  
  public ECLookupTable createCacheSafeLookupTable(ECPoint[] paramArrayOfECPoint, int paramInt1, int paramInt2) {
    int[] arrayOfInt = new int[paramInt2 * 7 * 2];
    byte b = 0;
    for (int i = 0; i < paramInt2; i++) {
      ECPoint eCPoint = paramArrayOfECPoint[paramInt1 + i];
      Nat224.copy(((SecP224R1FieldElement)eCPoint.getRawXCoord()).x, 0, arrayOfInt, b);
      b += 7;
      Nat224.copy(((SecP224R1FieldElement)eCPoint.getRawYCoord()).x, 0, arrayOfInt, b);
      b += 7;
    } 
    return new Object(this, paramInt2, arrayOfInt);
  }
  
  public ECFieldElement randomFieldElement(SecureRandom paramSecureRandom) {
    int[] arrayOfInt = Nat224.create();
    SecP224R1Field.random(paramSecureRandom, arrayOfInt);
    return new SecP224R1FieldElement(arrayOfInt);
  }
  
  public ECFieldElement randomFieldElementMult(SecureRandom paramSecureRandom) {
    int[] arrayOfInt = Nat224.create();
    SecP224R1Field.randomMult(paramSecureRandom, arrayOfInt);
    return new SecP224R1FieldElement(arrayOfInt);
  }
}
