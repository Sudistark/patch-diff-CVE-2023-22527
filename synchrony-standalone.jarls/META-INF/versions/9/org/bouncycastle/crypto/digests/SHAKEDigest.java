package META-INF.versions.9.org.bouncycastle.crypto.digests;

import org.bouncycastle.crypto.Xof;
import org.bouncycastle.crypto.digests.KeccakDigest;
import org.bouncycastle.crypto.digests.SHAKEDigest;

public class SHAKEDigest extends KeccakDigest implements Xof {
  private static int checkBitLength(int paramInt) {
    switch (paramInt) {
      case 128:
      case 256:
        return paramInt;
    } 
    throw new IllegalArgumentException("'bitLength' " + paramInt + " not supported for SHAKE");
  }
  
  public SHAKEDigest() { this(128); }
  
  public SHAKEDigest(int paramInt) { super(checkBitLength(paramInt)); }
  
  public SHAKEDigest(SHAKEDigest paramSHAKEDigest) { super(paramSHAKEDigest); }
  
  public String getAlgorithmName() { return "SHAKE" + this.fixedOutputLength; }
  
  public int getDigestSize() { return this.fixedOutputLength / 4; }
  
  public int doFinal(byte[] paramArrayOfByte, int paramInt) { return doFinal(paramArrayOfByte, paramInt, getDigestSize()); }
  
  public int doFinal(byte[] paramArrayOfByte, int paramInt1, int paramInt2) {
    int i = doOutput(paramArrayOfByte, paramInt1, paramInt2);
    reset();
    return i;
  }
  
  public int doOutput(byte[] paramArrayOfByte, int paramInt1, int paramInt2) {
    if (!this.squeezing)
      absorbBits(15, 4); 
    squeeze(paramArrayOfByte, paramInt1, paramInt2 * 8L);
    return paramInt2;
  }
  
  protected int doFinal(byte[] paramArrayOfByte, int paramInt1, byte paramByte, int paramInt2) { return doFinal(paramArrayOfByte, paramInt1, getDigestSize(), paramByte, paramInt2); }
  
  protected int doFinal(byte[] paramArrayOfByte, int paramInt1, int paramInt2, byte paramByte, int paramInt3) {
    if (paramInt3 < 0 || paramInt3 > 7)
      throw new IllegalArgumentException("'partialBits' must be in the range [0,7]"); 
    byte b = paramByte & (1 << paramInt3) - 1 | 15 << paramInt3;
    int i = paramInt3 + 4;
    if (i >= 8) {
      absorb((byte)b);
      i -= 8;
      b >>>= 8;
    } 
    if (i > 0)
      absorbBits(b, i); 
    squeeze(paramArrayOfByte, paramInt1, paramInt2 * 8L);
    reset();
    return paramInt2;
  }
}
