package META-INF.versions.9.org.bouncycastle.util;

import java.math.BigInteger;
import java.util.Arrays;
import org.bouncycastle.util.Arrays;
import org.bouncycastle.util.Objects;

public final class Arrays {
  public static boolean areAllZeroes(byte[] paramArrayOfByte, int paramInt1, int paramInt2) {
    byte b = 0;
    for (int i = 0; i < paramInt2; i++)
      b |= paramArrayOfByte[paramInt1 + i]; 
    return (b == 0);
  }
  
  public static boolean areEqual(boolean[] paramArrayOfBoolean1, boolean[] paramArrayOfBoolean2) { return Arrays.equals(paramArrayOfBoolean1, paramArrayOfBoolean2); }
  
  public static boolean areEqual(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2) { return Arrays.equals(paramArrayOfByte1, paramArrayOfByte2); }
  
  public static boolean areEqual(byte[] paramArrayOfByte1, int paramInt1, int paramInt2, byte[] paramArrayOfByte2, int paramInt3, int paramInt4) {
    int i = paramInt2 - paramInt1;
    int j = paramInt4 - paramInt3;
    if (i != j)
      return false; 
    for (int k = 0; k < i; k++) {
      if (paramArrayOfByte1[paramInt1 + k] != paramArrayOfByte2[paramInt3 + k])
        return false; 
    } 
    return true;
  }
  
  public static boolean areEqual(char[] paramArrayOfChar1, char[] paramArrayOfChar2) { return Arrays.equals(paramArrayOfChar1, paramArrayOfChar2); }
  
  public static boolean areEqual(int[] paramArrayOfInt1, int[] paramArrayOfInt2) { return Arrays.equals(paramArrayOfInt1, paramArrayOfInt2); }
  
  public static boolean areEqual(long[] paramArrayOfLong1, long[] paramArrayOfLong2) { return Arrays.equals(paramArrayOfLong1, paramArrayOfLong2); }
  
  public static boolean areEqual(Object[] paramArrayOfObject1, Object[] paramArrayOfObject2) { return Arrays.equals(paramArrayOfObject1, paramArrayOfObject2); }
  
  public static boolean areEqual(short[] paramArrayOfShort1, short[] paramArrayOfShort2) { return Arrays.equals(paramArrayOfShort1, paramArrayOfShort2); }
  
  public static boolean constantTimeAreEqual(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2) {
    if (paramArrayOfByte1 == null || paramArrayOfByte2 == null)
      return false; 
    if (paramArrayOfByte1 == paramArrayOfByte2)
      return true; 
    int i = (paramArrayOfByte1.length < paramArrayOfByte2.length) ? paramArrayOfByte1.length : paramArrayOfByte2.length;
    int j = paramArrayOfByte1.length ^ paramArrayOfByte2.length;
    int k;
    for (k = 0; k != i; k++)
      j |= paramArrayOfByte1[k] ^ paramArrayOfByte2[k]; 
    for (k = i; k < paramArrayOfByte2.length; k++)
      j |= paramArrayOfByte2[k] ^ paramArrayOfByte2[k] ^ 0xFFFFFFFF; 
    return (j == 0);
  }
  
  public static boolean constantTimeAreEqual(int paramInt1, byte[] paramArrayOfByte1, int paramInt2, byte[] paramArrayOfByte2, int paramInt3) {
    if (null == paramArrayOfByte1)
      throw new NullPointerException("'a' cannot be null"); 
    if (null == paramArrayOfByte2)
      throw new NullPointerException("'b' cannot be null"); 
    if (paramInt1 < 0)
      throw new IllegalArgumentException("'len' cannot be negative"); 
    if (paramInt2 > paramArrayOfByte1.length - paramInt1)
      throw new IndexOutOfBoundsException("'aOff' value invalid for specified length"); 
    if (paramInt3 > paramArrayOfByte2.length - paramInt1)
      throw new IndexOutOfBoundsException("'bOff' value invalid for specified length"); 
    byte b = 0;
    for (int i = 0; i < paramInt1; i++)
      b |= paramArrayOfByte1[paramInt2 + i] ^ paramArrayOfByte2[paramInt3 + i]; 
    return (0 == b);
  }
  
  public static int compareUnsigned(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2) {
    if (paramArrayOfByte1 == paramArrayOfByte2)
      return 0; 
    if (paramArrayOfByte1 == null)
      return -1; 
    if (paramArrayOfByte2 == null)
      return 1; 
    int i = Math.min(paramArrayOfByte1.length, paramArrayOfByte2.length);
    for (byte b = 0; b < i; b++) {
      byte b1 = paramArrayOfByte1[b] & 0xFF, b2 = paramArrayOfByte2[b] & 0xFF;
      if (b1 < b2)
        return -1; 
      if (b1 > b2)
        return 1; 
    } 
    if (paramArrayOfByte1.length < paramArrayOfByte2.length)
      return -1; 
    if (paramArrayOfByte1.length > paramArrayOfByte2.length)
      return 1; 
    return 0;
  }
  
  public static boolean contains(boolean[] paramArrayOfBoolean, boolean paramBoolean) {
    for (byte b = 0; b < paramArrayOfBoolean.length; b++) {
      if (paramArrayOfBoolean[b] == paramBoolean)
        return true; 
    } 
    return false;
  }
  
  public static boolean contains(byte[] paramArrayOfByte, byte paramByte) {
    for (byte b = 0; b < paramArrayOfByte.length; b++) {
      if (paramArrayOfByte[b] == paramByte)
        return true; 
    } 
    return false;
  }
  
  public static boolean contains(char[] paramArrayOfChar, char paramChar) {
    for (byte b = 0; b < paramArrayOfChar.length; b++) {
      if (paramArrayOfChar[b] == paramChar)
        return true; 
    } 
    return false;
  }
  
  public static boolean contains(int[] paramArrayOfInt, int paramInt) {
    for (byte b = 0; b < paramArrayOfInt.length; b++) {
      if (paramArrayOfInt[b] == paramInt)
        return true; 
    } 
    return false;
  }
  
  public static boolean contains(long[] paramArrayOfLong, long paramLong) {
    for (byte b = 0; b < paramArrayOfLong.length; b++) {
      if (paramArrayOfLong[b] == paramLong)
        return true; 
    } 
    return false;
  }
  
  public static boolean contains(short[] paramArrayOfShort, short paramShort) {
    for (byte b = 0; b < paramArrayOfShort.length; b++) {
      if (paramArrayOfShort[b] == paramShort)
        return true; 
    } 
    return false;
  }
  
  public static void fill(boolean[] paramArrayOfBoolean, boolean paramBoolean) { Arrays.fill(paramArrayOfBoolean, paramBoolean); }
  
  public static void fill(boolean[] paramArrayOfBoolean, int paramInt1, int paramInt2, boolean paramBoolean) { Arrays.fill(paramArrayOfBoolean, paramInt1, paramInt2, paramBoolean); }
  
  public static void fill(byte[] paramArrayOfByte, byte paramByte) { Arrays.fill(paramArrayOfByte, paramByte); }
  
  public static void fill(byte[] paramArrayOfByte, int paramInt, byte paramByte) { fill(paramArrayOfByte, paramInt, paramArrayOfByte.length, paramByte); }
  
  public static void fill(byte[] paramArrayOfByte, int paramInt1, int paramInt2, byte paramByte) { Arrays.fill(paramArrayOfByte, paramInt1, paramInt2, paramByte); }
  
  public static void fill(char[] paramArrayOfChar, char paramChar) { Arrays.fill(paramArrayOfChar, paramChar); }
  
  public static void fill(char[] paramArrayOfChar, int paramInt1, int paramInt2, char paramChar) { Arrays.fill(paramArrayOfChar, paramInt1, paramInt2, paramChar); }
  
  public static void fill(int[] paramArrayOfInt, int paramInt) { Arrays.fill(paramArrayOfInt, paramInt); }
  
  public static void fill(int[] paramArrayOfInt, int paramInt1, int paramInt2) { Arrays.fill(paramArrayOfInt, paramInt1, paramArrayOfInt.length, paramInt2); }
  
  public static void fill(int[] paramArrayOfInt, int paramInt1, int paramInt2, int paramInt3) { Arrays.fill(paramArrayOfInt, paramInt1, paramInt2, paramInt3); }
  
  public static void fill(long[] paramArrayOfLong, long paramLong) { Arrays.fill(paramArrayOfLong, paramLong); }
  
  public static void fill(long[] paramArrayOfLong, int paramInt, long paramLong) { Arrays.fill(paramArrayOfLong, paramInt, paramArrayOfLong.length, paramLong); }
  
  public static void fill(long[] paramArrayOfLong, int paramInt1, int paramInt2, long paramLong) { Arrays.fill(paramArrayOfLong, paramInt1, paramInt2, paramLong); }
  
  public static void fill(Object[] paramArrayOfObject, Object paramObject) { Arrays.fill(paramArrayOfObject, paramObject); }
  
  public static void fill(Object[] paramArrayOfObject, int paramInt1, int paramInt2, Object paramObject) { Arrays.fill(paramArrayOfObject, paramInt1, paramInt2, paramObject); }
  
  public static void fill(short[] paramArrayOfShort, short paramShort) { Arrays.fill(paramArrayOfShort, paramShort); }
  
  public static void fill(short[] paramArrayOfShort, int paramInt, short paramShort) { Arrays.fill(paramArrayOfShort, paramInt, paramArrayOfShort.length, paramShort); }
  
  public static void fill(short[] paramArrayOfShort, int paramInt1, int paramInt2, short paramShort) { Arrays.fill(paramArrayOfShort, paramInt1, paramInt2, paramShort); }
  
  public static int hashCode(byte[] paramArrayOfByte) {
    if (paramArrayOfByte == null)
      return 0; 
    int i = paramArrayOfByte.length;
    int j = i + 1;
    while (--i >= 0) {
      j *= 257;
      j ^= paramArrayOfByte[i];
    } 
    return j;
  }
  
  public static int hashCode(byte[] paramArrayOfByte, int paramInt1, int paramInt2) {
    if (paramArrayOfByte == null)
      return 0; 
    int i = paramInt2;
    int j = i + 1;
    while (--i >= 0) {
      j *= 257;
      j ^= paramArrayOfByte[paramInt1 + i];
    } 
    return j;
  }
  
  public static int hashCode(char[] paramArrayOfChar) {
    if (paramArrayOfChar == null)
      return 0; 
    int i = paramArrayOfChar.length;
    int j = i + 1;
    while (--i >= 0) {
      j *= 257;
      j ^= paramArrayOfChar[i];
    } 
    return j;
  }
  
  public static int hashCode(int[][] paramArrayOfInt) {
    int i = 0;
    for (byte b = 0; b != paramArrayOfInt.length; b++)
      i = i * 'ā' + hashCode(paramArrayOfInt[b]); 
    return i;
  }
  
  public static int hashCode(int[] paramArrayOfInt) {
    if (paramArrayOfInt == null)
      return 0; 
    int i = paramArrayOfInt.length;
    int j = i + 1;
    while (--i >= 0) {
      j *= 257;
      j ^= paramArrayOfInt[i];
    } 
    return j;
  }
  
  public static int hashCode(int[] paramArrayOfInt, int paramInt1, int paramInt2) {
    if (paramArrayOfInt == null)
      return 0; 
    int i = paramInt2;
    int j = i + 1;
    while (--i >= 0) {
      j *= 257;
      j ^= paramArrayOfInt[paramInt1 + i];
    } 
    return j;
  }
  
  public static int hashCode(long[] paramArrayOfLong) {
    if (paramArrayOfLong == null)
      return 0; 
    int i = paramArrayOfLong.length;
    int j = i + 1;
    while (--i >= 0) {
      long l = paramArrayOfLong[i];
      j *= 257;
      j ^= (int)l;
      j *= 257;
      j ^= (int)(l >>> 32);
    } 
    return j;
  }
  
  public static int hashCode(long[] paramArrayOfLong, int paramInt1, int paramInt2) {
    if (paramArrayOfLong == null)
      return 0; 
    int i = paramInt2;
    int j = i + 1;
    while (--i >= 0) {
      long l = paramArrayOfLong[paramInt1 + i];
      j *= 257;
      j ^= (int)l;
      j *= 257;
      j ^= (int)(l >>> 32);
    } 
    return j;
  }
  
  public static int hashCode(short[][][] paramArrayOfShort) {
    int i = 0;
    for (byte b = 0; b != paramArrayOfShort.length; b++)
      i = i * 'ā' + hashCode(paramArrayOfShort[b]); 
    return i;
  }
  
  public static int hashCode(short[][] paramArrayOfShort) {
    int i = 0;
    for (byte b = 0; b != paramArrayOfShort.length; b++)
      i = i * 'ā' + hashCode(paramArrayOfShort[b]); 
    return i;
  }
  
  public static int hashCode(short[] paramArrayOfShort) {
    if (paramArrayOfShort == null)
      return 0; 
    int i = paramArrayOfShort.length;
    int j = i + 1;
    while (--i >= 0) {
      j *= 257;
      j ^= paramArrayOfShort[i] & 0xFF;
    } 
    return j;
  }
  
  public static int hashCode(Object[] paramArrayOfObject) {
    if (paramArrayOfObject == null)
      return 0; 
    int i = paramArrayOfObject.length;
    int j = i + 1;
    while (--i >= 0) {
      j *= 257;
      j ^= Objects.hashCode(paramArrayOfObject[i]);
    } 
    return j;
  }
  
  public static boolean[] clone(boolean[] paramArrayOfBoolean) { return (null == paramArrayOfBoolean) ? null : (boolean[])paramArrayOfBoolean.clone(); }
  
  public static byte[] clone(byte[] paramArrayOfByte) { return (null == paramArrayOfByte) ? null : (byte[])paramArrayOfByte.clone(); }
  
  public static char[] clone(char[] paramArrayOfChar) { return (null == paramArrayOfChar) ? null : (char[])paramArrayOfChar.clone(); }
  
  public static int[] clone(int[] paramArrayOfInt) { return (null == paramArrayOfInt) ? null : (int[])paramArrayOfInt.clone(); }
  
  public static long[] clone(long[] paramArrayOfLong) { return (null == paramArrayOfLong) ? null : (long[])paramArrayOfLong.clone(); }
  
  public static short[] clone(short[] paramArrayOfShort) { return (null == paramArrayOfShort) ? null : (short[])paramArrayOfShort.clone(); }
  
  public static BigInteger[] clone(BigInteger[] paramArrayOfBigInteger) { return (null == paramArrayOfBigInteger) ? null : (BigInteger[])paramArrayOfBigInteger.clone(); }
  
  public static byte[] clone(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2) {
    if (paramArrayOfByte1 == null)
      return null; 
    if (paramArrayOfByte2 == null || paramArrayOfByte2.length != paramArrayOfByte1.length)
      return clone(paramArrayOfByte1); 
    System.arraycopy(paramArrayOfByte1, 0, paramArrayOfByte2, 0, paramArrayOfByte2.length);
    return paramArrayOfByte2;
  }
  
  public static long[] clone(long[] paramArrayOfLong1, long[] paramArrayOfLong2) {
    if (paramArrayOfLong1 == null)
      return null; 
    if (paramArrayOfLong2 == null || paramArrayOfLong2.length != paramArrayOfLong1.length)
      return clone(paramArrayOfLong1); 
    System.arraycopy(paramArrayOfLong1, 0, paramArrayOfLong2, 0, paramArrayOfLong2.length);
    return paramArrayOfLong2;
  }
  
  public static byte[][] clone(byte[][] paramArrayOfByte) {
    if (paramArrayOfByte == null)
      return null; 
    byte[][] arrayOfByte = new byte[paramArrayOfByte.length][];
    for (byte b = 0; b != arrayOfByte.length; b++)
      arrayOfByte[b] = clone(paramArrayOfByte[b]); 
    return arrayOfByte;
  }
  
  public static byte[][][] clone(byte[][][] paramArrayOfByte) {
    if (paramArrayOfByte == null)
      return null; 
    byte[][][] arrayOfByte = new byte[paramArrayOfByte.length][][];
    for (byte b = 0; b != arrayOfByte.length; b++)
      arrayOfByte[b] = clone(paramArrayOfByte[b]); 
    return arrayOfByte;
  }
  
  public static boolean[] copyOf(boolean[] paramArrayOfBoolean, int paramInt) {
    boolean[] arrayOfBoolean = new boolean[paramInt];
    System.arraycopy(paramArrayOfBoolean, 0, arrayOfBoolean, 0, Math.min(paramArrayOfBoolean.length, paramInt));
    return arrayOfBoolean;
  }
  
  public static byte[] copyOf(byte[] paramArrayOfByte, int paramInt) {
    byte[] arrayOfByte = new byte[paramInt];
    System.arraycopy(paramArrayOfByte, 0, arrayOfByte, 0, Math.min(paramArrayOfByte.length, paramInt));
    return arrayOfByte;
  }
  
  public static char[] copyOf(char[] paramArrayOfChar, int paramInt) {
    char[] arrayOfChar = new char[paramInt];
    System.arraycopy(paramArrayOfChar, 0, arrayOfChar, 0, Math.min(paramArrayOfChar.length, paramInt));
    return arrayOfChar;
  }
  
  public static int[] copyOf(int[] paramArrayOfInt, int paramInt) {
    int[] arrayOfInt = new int[paramInt];
    System.arraycopy(paramArrayOfInt, 0, arrayOfInt, 0, Math.min(paramArrayOfInt.length, paramInt));
    return arrayOfInt;
  }
  
  public static long[] copyOf(long[] paramArrayOfLong, int paramInt) {
    long[] arrayOfLong = new long[paramInt];
    System.arraycopy(paramArrayOfLong, 0, arrayOfLong, 0, Math.min(paramArrayOfLong.length, paramInt));
    return arrayOfLong;
  }
  
  public static short[] copyOf(short[] paramArrayOfShort, int paramInt) {
    short[] arrayOfShort = new short[paramInt];
    System.arraycopy(paramArrayOfShort, 0, arrayOfShort, 0, Math.min(paramArrayOfShort.length, paramInt));
    return arrayOfShort;
  }
  
  public static BigInteger[] copyOf(BigInteger[] paramArrayOfBigInteger, int paramInt) {
    BigInteger[] arrayOfBigInteger = new BigInteger[paramInt];
    System.arraycopy(paramArrayOfBigInteger, 0, arrayOfBigInteger, 0, Math.min(paramArrayOfBigInteger.length, paramInt));
    return arrayOfBigInteger;
  }
  
  public static boolean[] copyOfRange(boolean[] paramArrayOfBoolean, int paramInt1, int paramInt2) {
    int i = getLength(paramInt1, paramInt2);
    boolean[] arrayOfBoolean = new boolean[i];
    System.arraycopy(paramArrayOfBoolean, paramInt1, arrayOfBoolean, 0, Math.min(paramArrayOfBoolean.length - paramInt1, i));
    return arrayOfBoolean;
  }
  
  public static byte[] copyOfRange(byte[] paramArrayOfByte, int paramInt1, int paramInt2) {
    int i = getLength(paramInt1, paramInt2);
    byte[] arrayOfByte = new byte[i];
    System.arraycopy(paramArrayOfByte, paramInt1, arrayOfByte, 0, Math.min(paramArrayOfByte.length - paramInt1, i));
    return arrayOfByte;
  }
  
  public static char[] copyOfRange(char[] paramArrayOfChar, int paramInt1, int paramInt2) {
    int i = getLength(paramInt1, paramInt2);
    char[] arrayOfChar = new char[i];
    System.arraycopy(paramArrayOfChar, paramInt1, arrayOfChar, 0, Math.min(paramArrayOfChar.length - paramInt1, i));
    return arrayOfChar;
  }
  
  public static int[] copyOfRange(int[] paramArrayOfInt, int paramInt1, int paramInt2) {
    int i = getLength(paramInt1, paramInt2);
    int[] arrayOfInt = new int[i];
    System.arraycopy(paramArrayOfInt, paramInt1, arrayOfInt, 0, Math.min(paramArrayOfInt.length - paramInt1, i));
    return arrayOfInt;
  }
  
  public static long[] copyOfRange(long[] paramArrayOfLong, int paramInt1, int paramInt2) {
    int i = getLength(paramInt1, paramInt2);
    long[] arrayOfLong = new long[i];
    System.arraycopy(paramArrayOfLong, paramInt1, arrayOfLong, 0, Math.min(paramArrayOfLong.length - paramInt1, i));
    return arrayOfLong;
  }
  
  public static short[] copyOfRange(short[] paramArrayOfShort, int paramInt1, int paramInt2) {
    int i = getLength(paramInt1, paramInt2);
    short[] arrayOfShort = new short[i];
    System.arraycopy(paramArrayOfShort, paramInt1, arrayOfShort, 0, Math.min(paramArrayOfShort.length - paramInt1, i));
    return arrayOfShort;
  }
  
  public static BigInteger[] copyOfRange(BigInteger[] paramArrayOfBigInteger, int paramInt1, int paramInt2) {
    int i = getLength(paramInt1, paramInt2);
    BigInteger[] arrayOfBigInteger = new BigInteger[i];
    System.arraycopy(paramArrayOfBigInteger, paramInt1, arrayOfBigInteger, 0, Math.min(paramArrayOfBigInteger.length - paramInt1, i));
    return arrayOfBigInteger;
  }
  
  private static int getLength(int paramInt1, int paramInt2) {
    int i = paramInt2 - paramInt1;
    if (i < 0) {
      StringBuffer stringBuffer = new StringBuffer(paramInt1);
      stringBuffer.append(" > ").append(paramInt2);
      throw new IllegalArgumentException(stringBuffer.toString());
    } 
    return i;
  }
  
  public static byte[] append(byte[] paramArrayOfByte, byte paramByte) {
    if (paramArrayOfByte == null)
      return new byte[] { paramByte }; 
    int i = paramArrayOfByte.length;
    byte[] arrayOfByte = new byte[i + 1];
    System.arraycopy(paramArrayOfByte, 0, arrayOfByte, 0, i);
    arrayOfByte[i] = paramByte;
    return arrayOfByte;
  }
  
  public static short[] append(short[] paramArrayOfShort, short paramShort) {
    if (paramArrayOfShort == null)
      return new short[] { paramShort }; 
    int i = paramArrayOfShort.length;
    short[] arrayOfShort = new short[i + 1];
    System.arraycopy(paramArrayOfShort, 0, arrayOfShort, 0, i);
    arrayOfShort[i] = paramShort;
    return arrayOfShort;
  }
  
  public static int[] append(int[] paramArrayOfInt, int paramInt) {
    if (paramArrayOfInt == null)
      return new int[] { paramInt }; 
    int i = paramArrayOfInt.length;
    int[] arrayOfInt = new int[i + 1];
    System.arraycopy(paramArrayOfInt, 0, arrayOfInt, 0, i);
    arrayOfInt[i] = paramInt;
    return arrayOfInt;
  }
  
  public static String[] append(String[] paramArrayOfString, String paramString) {
    if (paramArrayOfString == null)
      return new String[] { paramString }; 
    int i = paramArrayOfString.length;
    String[] arrayOfString = new String[i + 1];
    System.arraycopy(paramArrayOfString, 0, arrayOfString, 0, i);
    arrayOfString[i] = paramString;
    return arrayOfString;
  }
  
  public static byte[] concatenate(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2) {
    if (null == paramArrayOfByte1)
      return clone(paramArrayOfByte2); 
    if (null == paramArrayOfByte2)
      return clone(paramArrayOfByte1); 
    byte[] arrayOfByte = new byte[paramArrayOfByte1.length + paramArrayOfByte2.length];
    System.arraycopy(paramArrayOfByte1, 0, arrayOfByte, 0, paramArrayOfByte1.length);
    System.arraycopy(paramArrayOfByte2, 0, arrayOfByte, paramArrayOfByte1.length, paramArrayOfByte2.length);
    return arrayOfByte;
  }
  
  public static short[] concatenate(short[] paramArrayOfShort1, short[] paramArrayOfShort2) {
    if (null == paramArrayOfShort1)
      return clone(paramArrayOfShort2); 
    if (null == paramArrayOfShort2)
      return clone(paramArrayOfShort1); 
    short[] arrayOfShort = new short[paramArrayOfShort1.length + paramArrayOfShort2.length];
    System.arraycopy(paramArrayOfShort1, 0, arrayOfShort, 0, paramArrayOfShort1.length);
    System.arraycopy(paramArrayOfShort2, 0, arrayOfShort, paramArrayOfShort1.length, paramArrayOfShort2.length);
    return arrayOfShort;
  }
  
  public static byte[] concatenate(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2, byte[] paramArrayOfByte3) {
    if (null == paramArrayOfByte1)
      return concatenate(paramArrayOfByte2, paramArrayOfByte3); 
    if (null == paramArrayOfByte2)
      return concatenate(paramArrayOfByte1, paramArrayOfByte3); 
    if (null == paramArrayOfByte3)
      return concatenate(paramArrayOfByte1, paramArrayOfByte2); 
    byte[] arrayOfByte = new byte[paramArrayOfByte1.length + paramArrayOfByte2.length + paramArrayOfByte3.length];
    int i = 0;
    System.arraycopy(paramArrayOfByte1, 0, arrayOfByte, i, paramArrayOfByte1.length);
    i += paramArrayOfByte1.length;
    System.arraycopy(paramArrayOfByte2, 0, arrayOfByte, i, paramArrayOfByte2.length);
    i += paramArrayOfByte2.length;
    System.arraycopy(paramArrayOfByte3, 0, arrayOfByte, i, paramArrayOfByte3.length);
    return arrayOfByte;
  }
  
  public static byte[] concatenate(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2, byte[] paramArrayOfByte3, byte[] paramArrayOfByte4) {
    if (null == paramArrayOfByte1)
      return concatenate(paramArrayOfByte2, paramArrayOfByte3, paramArrayOfByte4); 
    if (null == paramArrayOfByte2)
      return concatenate(paramArrayOfByte1, paramArrayOfByte3, paramArrayOfByte4); 
    if (null == paramArrayOfByte3)
      return concatenate(paramArrayOfByte1, paramArrayOfByte2, paramArrayOfByte4); 
    if (null == paramArrayOfByte4)
      return concatenate(paramArrayOfByte1, paramArrayOfByte2, paramArrayOfByte3); 
    byte[] arrayOfByte = new byte[paramArrayOfByte1.length + paramArrayOfByte2.length + paramArrayOfByte3.length + paramArrayOfByte4.length];
    int i = 0;
    System.arraycopy(paramArrayOfByte1, 0, arrayOfByte, i, paramArrayOfByte1.length);
    i += paramArrayOfByte1.length;
    System.arraycopy(paramArrayOfByte2, 0, arrayOfByte, i, paramArrayOfByte2.length);
    i += paramArrayOfByte2.length;
    System.arraycopy(paramArrayOfByte3, 0, arrayOfByte, i, paramArrayOfByte3.length);
    i += paramArrayOfByte3.length;
    System.arraycopy(paramArrayOfByte4, 0, arrayOfByte, i, paramArrayOfByte4.length);
    return arrayOfByte;
  }
  
  public static byte[] concatenate(byte[][] paramArrayOfByte) {
    int i = 0;
    for (byte b1 = 0; b1 != paramArrayOfByte.length; b1++)
      i += paramArrayOfByte[b1].length; 
    byte[] arrayOfByte = new byte[i];
    int j = 0;
    for (byte b2 = 0; b2 != paramArrayOfByte.length; b2++) {
      System.arraycopy(paramArrayOfByte[b2], 0, arrayOfByte, j, paramArrayOfByte[b2].length);
      j += paramArrayOfByte[b2].length;
    } 
    return arrayOfByte;
  }
  
  public static int[] concatenate(int[] paramArrayOfInt1, int[] paramArrayOfInt2) {
    if (null == paramArrayOfInt1)
      return clone(paramArrayOfInt2); 
    if (null == paramArrayOfInt2)
      return clone(paramArrayOfInt1); 
    int[] arrayOfInt = new int[paramArrayOfInt1.length + paramArrayOfInt2.length];
    System.arraycopy(paramArrayOfInt1, 0, arrayOfInt, 0, paramArrayOfInt1.length);
    System.arraycopy(paramArrayOfInt2, 0, arrayOfInt, paramArrayOfInt1.length, paramArrayOfInt2.length);
    return arrayOfInt;
  }
  
  public static byte[] prepend(byte[] paramArrayOfByte, byte paramByte) {
    if (paramArrayOfByte == null)
      return new byte[] { paramByte }; 
    int i = paramArrayOfByte.length;
    byte[] arrayOfByte = new byte[i + 1];
    System.arraycopy(paramArrayOfByte, 0, arrayOfByte, 1, i);
    arrayOfByte[0] = paramByte;
    return arrayOfByte;
  }
  
  public static short[] prepend(short[] paramArrayOfShort, short paramShort) {
    if (paramArrayOfShort == null)
      return new short[] { paramShort }; 
    int i = paramArrayOfShort.length;
    short[] arrayOfShort = new short[i + 1];
    System.arraycopy(paramArrayOfShort, 0, arrayOfShort, 1, i);
    arrayOfShort[0] = paramShort;
    return arrayOfShort;
  }
  
  public static int[] prepend(int[] paramArrayOfInt, int paramInt) {
    if (paramArrayOfInt == null)
      return new int[] { paramInt }; 
    int i = paramArrayOfInt.length;
    int[] arrayOfInt = new int[i + 1];
    System.arraycopy(paramArrayOfInt, 0, arrayOfInt, 1, i);
    arrayOfInt[0] = paramInt;
    return arrayOfInt;
  }
  
  public static byte[] reverse(byte[] paramArrayOfByte) {
    if (paramArrayOfByte == null)
      return null; 
    byte b = 0;
    int i = paramArrayOfByte.length;
    byte[] arrayOfByte = new byte[i];
    while (--i >= 0)
      arrayOfByte[i] = paramArrayOfByte[b++]; 
    return arrayOfByte;
  }
  
  public static int[] reverse(int[] paramArrayOfInt) {
    if (paramArrayOfInt == null)
      return null; 
    byte b = 0;
    int i = paramArrayOfInt.length;
    int[] arrayOfInt = new int[i];
    while (--i >= 0)
      arrayOfInt[i] = paramArrayOfInt[b++]; 
    return arrayOfInt;
  }
  
  public static byte[] reverseInPlace(byte[] paramArrayOfByte) {
    if (null == paramArrayOfByte)
      return null; 
    byte b = 0;
    int i = paramArrayOfByte.length - 1;
    while (b < i) {
      byte b1 = paramArrayOfByte[b], b2 = paramArrayOfByte[i];
      paramArrayOfByte[b++] = b2;
      paramArrayOfByte[i--] = b1;
    } 
    return paramArrayOfByte;
  }
  
  public static int[] reverseInPlace(int[] paramArrayOfInt) {
    if (null == paramArrayOfInt)
      return null; 
    byte b = 0;
    int i = paramArrayOfInt.length - 1;
    while (b < i) {
      int j = paramArrayOfInt[b], k = paramArrayOfInt[i];
      paramArrayOfInt[b++] = k;
      paramArrayOfInt[i--] = j;
    } 
    return paramArrayOfInt;
  }
  
  public static void clear(byte[] paramArrayOfByte) {
    if (null != paramArrayOfByte)
      Arrays.fill(paramArrayOfByte, (byte)0); 
  }
  
  public static void clear(int[] paramArrayOfInt) {
    if (null != paramArrayOfInt)
      Arrays.fill(paramArrayOfInt, 0); 
  }
  
  public static boolean isNullOrContainsNull(Object[] paramArrayOfObject) {
    if (null == paramArrayOfObject)
      return true; 
    int i = paramArrayOfObject.length;
    for (byte b = 0; b < i; b++) {
      if (null == paramArrayOfObject[b])
        return true; 
    } 
    return false;
  }
  
  public static boolean isNullOrEmpty(byte[] paramArrayOfByte) { return (null == paramArrayOfByte || paramArrayOfByte.length < 1); }
  
  public static boolean isNullOrEmpty(int[] paramArrayOfInt) { return (null == paramArrayOfInt || paramArrayOfInt.length < 1); }
  
  public static boolean isNullOrEmpty(Object[] paramArrayOfObject) { return (null == paramArrayOfObject || paramArrayOfObject.length < 1); }
}
