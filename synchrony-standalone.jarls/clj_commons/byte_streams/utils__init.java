package clj_commons.byte_streams;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class utils__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__11;
  
  public static final Var const__12;
  
  public static final AFn const__15;
  
  public static final Var const__16;
  
  public static final AFn const__19;
  
  public static final Var const__20;
  
  public static final AFn const__23;
  
  public static final Var const__24;
  
  public static final AFn const__28;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new utils.fn__26479());
    const__3.setMeta((IPersistentMap)const__11);
    const__3.bindRoot(new utils.defprotocol_PLUS_());
    ((Var)const__3)
      
      .setMacro();
    const__12.setMeta((IPersistentMap)const__15);
    const__12.bindRoot(new utils.deftype_PLUS_());
    ((Var)const__12)


      
      .setMacro();
    const__16.setMeta((IPersistentMap)const__19);
    const__16.bindRoot(new utils.defrecord_PLUS_());
    ((Var)const__16)


      
      .setMacro();
    const__20.setMeta((IPersistentMap)const__23);
    const__20.bindRoot(new utils.definterface_PLUS_());
    ((Var)const__20)


      
      .setMacro();
    const__24.setMeta((IPersistentMap)const__28);
    const__24.bindRoot(new utils.doit());
    ((Var)const__24)


      
      .setMacro();
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "clj-commons.byte-streams.utils");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("clj-commons.byte-streams.utils", "defprotocol+");
    const__11 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "name"), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "line"), Integer.valueOf(3), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_commons/byte_streams/utils.clj" });
    const__12 = (Var)RT.var("clj-commons.byte-streams.utils", "deftype+");
    const__15 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "name"), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "line"), Integer.valueOf(7), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_commons/byte_streams/utils.clj" });
    const__16 = (Var)RT.var("clj-commons.byte-streams.utils", "defrecord+");
    const__19 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "name"), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "line"), Integer.valueOf(11), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_commons/byte_streams/utils.clj" });
    const__20 = (Var)RT.var("clj-commons.byte-streams.utils", "definterface+");
    const__23 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "name"), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "line"), Integer.valueOf(15), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_commons/byte_streams/utils.clj" });
    const__24 = (Var)RT.var("clj-commons.byte-streams.utils", "doit");
    const__28 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "it")), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "doc"), "A version of doseq that doesn't emit all that inline-destroying chunked-seq code.", RT.keyword(null, "line"), Integer.valueOf(19), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_commons/byte_streams/utils.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("clj_commons.byte_streams.utils__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
