package clj_commons.byte_streams;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class char_sequence__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final Var const__4;
  
  public static final AFn const__12;
  
  public static final Var const__13;
  
  public static final AFn const__16;
  
  public static final Var const__17;
  
  public static final AFn const__20;
  
  public static final Var const__21;
  
  public static final AFn const__24;
  
  public static final Var const__25;
  
  public static final AFn const__28;
  
  public static final Var const__29;
  
  public static final AFn const__32;
  
  public static final Var const__33;
  
  public static final AFn const__36;
  
  public static void load() { LockingTransaction.runInTransaction((Callable)new char_sequence.fn__27156());
    const__4.setMeta((IPersistentMap)const__12);
    const__4.bindRoot(new char_sequence.coding_error_action());
    const__13.setMeta((IPersistentMap)const__16);
    const__13.bindRoot(new char_sequence.parse_result());
    const__17.setMeta((IPersistentMap)const__20);
    const__17.bindRoot(new char_sequence.decode());
    const__21.setMeta((IPersistentMap)const__24);
    const__21.bindRoot(new char_sequence.flush());
    const__25.setMeta((IPersistentMap)const__28);
    const__25.bindRoot(new char_sequence.concat_bytes());
    const__29.setMeta((IPersistentMap)const__32);
    const__29.bindRoot(new char_sequence.lazy_char_buffer_sequence());
    const__33.setMeta((IPersistentMap)const__36);
    const__33.bindRoot(new char_sequence.decode_byte_source()); }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "clj-commons.byte-streams.char-sequence");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("clojure.core", "*unchecked-math*");
    const__4 = (Var)RT.var("clj-commons.byte-streams.char-sequence", "coding-error-action");
    const__12 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "action")) })), RT.keyword(null, "line"), Integer.valueOf(19), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_commons/byte_streams/char_sequence.clj" });
    const__13 = (Var)RT.var("clj-commons.byte-streams.char-sequence", "parse-result");
    const__16 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "result")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "CoderResult") }))) })), RT.keyword(null, "line"), Integer.valueOf(25), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_commons/byte_streams/char_sequence.clj" });
    const__17 = (Var)RT.var("clj-commons.byte-streams.char-sequence", "decode");
    const__20 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "decoder")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "CharsetDecoder") })), ((IObj)Symbol.intern(null, "in")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "ByteBuffer") })), ((IObj)Symbol.intern(null, "out")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "CharBuffer") }))) })), RT.keyword(null, "line"), Integer.valueOf(31), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_commons/byte_streams/char_sequence.clj" });
    const__21 = (Var)RT.var("clj-commons.byte-streams.char-sequence", "flush");
    const__24 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "decoder")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "CharsetDecoder") })), ((IObj)Symbol.intern(null, "in")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "ByteBuffer") })), ((IObj)Symbol.intern(null, "out")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "CharBuffer") }))) })), RT.keyword(null, "line"), Integer.valueOf(35), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_commons/byte_streams/char_sequence.clj" });
    const__25 = (Var)RT.var("clj-commons.byte-streams.char-sequence", "concat-bytes");
    const__28 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "a")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "ByteBuffer") })), ((IObj)Symbol.intern(null, "b")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "ByteBuffer") }))) })), RT.keyword(null, "line"), Integer.valueOf(40), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_commons/byte_streams/char_sequence.clj" });
    const__29 = (Var)RT.var("clj-commons.byte-streams.char-sequence", "lazy-char-buffer-sequence");
    const__32 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "decoder")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "CharsetDecoder") })), Symbol.intern(null, "chunk-size"), ((IObj)Symbol.intern(null, "extra-bytes")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "ByteBuffer") })), Symbol.intern(null, "close-fn"), Symbol.intern(null, "byte-source")) })), RT.keyword(null, "line"), Integer.valueOf(46), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_commons/byte_streams/char_sequence.clj" });
    const__33 = (Var)RT.var("clj-commons.byte-streams.char-sequence", "decode-byte-source");
    const__36 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "byte-source"), Symbol.intern(null, "close-fn"), RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "chunk-size"), Symbol.intern(null, "encoding"), Symbol.intern(null, "on-encoding-error")), RT.keyword(null, "or"), RT.map(new Object[] { Symbol.intern(null, "chunk-size"), Long.valueOf(1024L), Symbol.intern(null, "on-encoding-error"), RT.keyword(null, "replace"), Symbol.intern(null, "encoding"), "UTF-8" }) })) })), RT.keyword(null, "line"), Integer.valueOf(89), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "clj_commons/byte_streams/char_sequence.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("clj_commons.byte_streams.char_sequence__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
