package clj_commons.byte_streams.graph;

import clojure.lang.IFn;
import clojure.lang.IPersistentVector;
import clojure.lang.IType;
import clojure.lang.Numbers;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Util;
import clojure.lang.Var;

public final class Type implements IType {
  public final Object wrapper;
  
  public final Object type;
  
  public static final Var const__4 = (Var)RT.var("clojure.core", "hash"), const__5 = (Var)RT.var("clojure.core", "pr-str"), const__6 = (Var)RT.var("clj-commons.byte-streams.graph", "pprint-type");
  
  public Type(Object paramObject1, Object paramObject2) { this.wrapper = paramObject1;
    this.type = paramObject2; }
  
  public static IPersistentVector getBasis() { return Tuple.create(Symbol.intern(null, "wrapper"), Symbol.intern(null, "type")); }
  
  public String toString() { this = null;
    return (String)((IFn)const__5.getRawRoot()).invoke(((IFn)const__6.getRawRoot()).invoke(this)); }
  
  public int hashCode() {
    return RT.intCast(Numbers.xor(((IFn)const__4.getRawRoot()).invoke(this.wrapper), ((IFn)const__4.getRawRoot()).invoke(this.type)));
  }
  
  public boolean equals(Object x) {
    boolean and__5514__auto__26569 = x instanceof Type;
    boolean and__5514__auto__26568 = Util.equiv(this.wrapper, ((Type)x).wrapper);
    x = null;
    return and__5514__auto__26569 ? (and__5514__auto__26568 ? Util.equiv(this.type, ((Type)x).type) : and__5514__auto__26568) : and__5514__auto__26569;
  }
}
