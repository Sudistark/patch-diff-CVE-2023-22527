package ginga.async;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class ping__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__12;
  
  public static void load() { LockingTransaction.runInTransaction((Callable)new ping.fn__10418());
    const__3.setMeta((IPersistentMap)const__12);
    const__3.bindRoot(new ping.run_ping_process()); }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "ginga.async.ping");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("ginga.async.ping", "run-ping-process");
    const__12 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "ping-timeout-ms"), Symbol.intern(null, "pong-timeout-ms")), RT.keyword(null, "as"), Symbol.intern(null, "ping-opts") }), Symbol.intern(null, "ping-msg"), Symbol.intern(null, "upstream"), Symbol.intern(null, "close-promise"), Symbol.intern(null, "alive")) })), RT.keyword(null, "doc"), "Runs a process that will continuously send ping-msgs on the upstream\n  channel, setting the alive atom to false and expecting it to be set to\n  true by an outside process, terminating when the alive atom fails to\n  become true in time or the given close-promise resolves.\n\n  Returns non-nil if alive fails to become true in time, nil when\n  close-promise resolves.\n\n  ping-timeout-ms - time to wait between sending pings,\n  pong-timeout-ms - time to wait for a pong to arrive,\n\n  The minimum time to wait for alive to become true is:\n  ping-timeout-ms + pong-timeout-ms\n\n  The maximum time to wait is:\n  minimum-time-to-wait + (max ping-timeout-ms pong-timeout-ms)", RT.keyword(null, "line"), Integer.valueOf(7), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async/ping.cljc" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("ginga.async.ping__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
