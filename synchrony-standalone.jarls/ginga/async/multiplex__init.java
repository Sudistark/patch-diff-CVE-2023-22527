package ginga.async;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IPersistentMap;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class multiplex__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__11;
  
  public static final Var const__12;
  
  public static final AFn const__15;
  
  public static final Var const__16;
  
  public static final AFn const__19;
  
  public static final Var const__20;
  
  public static final AFn const__23;
  
  public static final Var const__24;
  
  public static final AFn const__27;
  
  public static final Var const__28;
  
  public static final AFn const__31;
  
  public static final Var const__32;
  
  public static final AFn const__35;
  
  public static final Var const__36;
  
  public static final AFn const__39;
  
  public static final Var const__40;
  
  public static final Object const__41;
  
  public static final Var const__42;
  
  public static final Keyword const__43;
  
  public static final Object const__44;
  
  public static final Object const__45;
  
  public static final Object const__46;
  
  public static final Object const__47;
  
  public static final Object const__48;
  
  public static final Var const__49;
  
  public static final AFn const__52;
  
  public static final Var const__53;
  
  public static final AFn const__56;
  
  public static final Var const__57;
  
  public static final AFn const__60;
  
  public static final Var const__61;
  
  public static final AFn const__64;
  
  public static final Var const__65;
  
  public static final AFn const__68;
  
  public static final Var const__69;
  
  public static final AFn const__72;
  
  public static final Var const__73;
  
  public static final AFn const__76;
  
  public static final Var const__77;
  
  public static final AFn const__80;
  
  public static final Var const__81;
  
  public static final AFn const__84;
  
  public static final Var const__85;
  
  public static final AFn const__90;
  
  public static final Var const__91;
  
  public static final AFn const__94;
  
  public static final Var const__95;
  
  public static final AFn const__98;
  
  public static final Var const__99;
  
  public static final AFn const__102;
  
  public static final Var const__103;
  
  public static final AFn const__106;
  
  public static final Var const__107;
  
  public static final AFn const__110;
  
  public static final Var const__111;
  
  public static final AFn const__114;
  
  public static final Var const__115;
  
  public static final AFn const__118;
  
  public static final Var const__119;
  
  public static final AFn const__122;
  
  public static final Var const__123;
  
  public static final AFn const__126;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new multiplex.fn__12736());
    const__3.setMeta((IPersistentMap)const__11);
    const__3.bindRoot(new multiplex._STAR_msg());
    const__12.setMeta((IPersistentMap)const__15);
    const__12.bindRoot(new multiplex.close_in_msg());
    const__16.setMeta((IPersistentMap)const__19);
    const__16.bindRoot(new multiplex.close_out_msg());
    const__20.setMeta((IPersistentMap)const__23);
    const__20.bindRoot(new multiplex.open_msg());
    const__24.setMeta((IPersistentMap)const__27);
    const__24.bindRoot(new multiplex.win_msg());
    const__28.setMeta((IPersistentMap)const__31);
    const__28.bindRoot(new multiplex.error_msg());
    const__32.setMeta((IPersistentMap)const__35);
    const__32.bindRoot(new multiplex.in_connection());
    const__36.setMeta((IPersistentMap)const__39);
    const__36.bindRoot(new multiplex.out_connection());
    const__49.setMeta((IPersistentMap)const__52);
    const__49.bindRoot(new multiplex.assoc_new_conn());
    const__53.setMeta((IPersistentMap)const__56);
    const__53.bindRoot(new multiplex.close_inc());
    const__57.setMeta((IPersistentMap)const__60);
    const__57.bindRoot(new multiplex.close_outc());
    const__61.setMeta((IPersistentMap)const__64);
    const__61.bindRoot(new multiplex.close_connections());
    const__65.setMeta((IPersistentMap)const__68);
    const__65.bindRoot(new multiplex.schedule_put());
    const__69.setMeta((IPersistentMap)const__72);
    const__69.bindRoot(new multiplex.schedule_outc_put());
    const__73.setMeta((IPersistentMap)const__76);
    const__73.bindRoot(new multiplex.accept_inc());
    const__77.setMeta((IPersistentMap)const__80);
    const__77.bindRoot(new multiplex.open_outc());
    const__81.setMeta((IPersistentMap)const__84);
    const__81.bindRoot(new multiplex.run_receive_process());
    const__85.setMeta((IPersistentMap)const__90);
    const__85.bindRoot(new multiplex.multiplexer());
    const__91.setMeta((IPersistentMap)const__94);
    const__91.bindRoot(new multiplex.open_new());
    const__95.setMeta((IPersistentMap)const__98);
    const__95.bindRoot(new multiplex.open_existing());
    const__99.setMeta((IPersistentMap)const__102);
    const__99.bindRoot(new multiplex.accept_new());
    const__103.setMeta((IPersistentMap)const__106);
    const__103.bindRoot(new multiplex.open_duplex());
    const__107.setMeta((IPersistentMap)const__110);
    const__107.bindRoot(new multiplex.wrap_simplex_with_duplex_accept());
    const__111.setMeta((IPersistentMap)const__114);
    const__111.bindRoot(new multiplex.simplex_accept_close());
    const__115.setMeta((IPersistentMap)const__118);
    const__115.bindRoot(new multiplex.duplex_accept_close());
    const__119.setMeta((IPersistentMap)const__122);
    const__119.bindRoot(new multiplex.make_bridge());
    const__123.setMeta((IPersistentMap)const__126);
    const__123.bindRoot(new multiplex.wrap_accept_chans());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "ginga.async.multiplex");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("ginga.async.multiplex", "*msg");
    const__11 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(), Tuple.create(Symbol.intern(null, "G__12738")) })), RT.keyword(null, "line"), Integer.valueOf(11), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async/multiplex.cljc" });
    const__12 = (Var)RT.var("ginga.async.multiplex", "close-in-msg");
    const__15 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(), Tuple.create(Symbol.intern(null, "G__12768")) })), RT.keyword(null, "line"), Integer.valueOf(12), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async/multiplex.cljc" });
    const__16 = (Var)RT.var("ginga.async.multiplex", "close-out-msg");
    const__19 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(), Tuple.create(Symbol.intern(null, "G__12795")) })), RT.keyword(null, "line"), Integer.valueOf(13), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async/multiplex.cljc" });
    const__20 = (Var)RT.var("ginga.async.multiplex", "open-msg");
    const__23 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(), Tuple.create(Symbol.intern(null, "G__12822")) })), RT.keyword(null, "line"), Integer.valueOf(14), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async/multiplex.cljc" });
    const__24 = (Var)RT.var("ginga.async.multiplex", "win-msg");
    const__27 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(), Tuple.create(Symbol.intern(null, "G__12852")) })), RT.keyword(null, "line"), Integer.valueOf(15), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async/multiplex.cljc" });
    const__28 = (Var)RT.var("ginga.async.multiplex", "error-msg");
    const__31 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(), Tuple.create(Symbol.intern(null, "G__12885")) })), RT.keyword(null, "line"), Integer.valueOf(16), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async/multiplex.cljc" });
    const__32 = (Var)RT.var("ginga.async.multiplex", "in-connection");
    const__35 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(), Tuple.create(Symbol.intern(null, "G__12912")) })), RT.keyword(null, "line"), Integer.valueOf(17), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async/multiplex.cljc" });
    const__36 = (Var)RT.var("ginga.async.multiplex", "out-connection");
    const__39 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(), Tuple.create(Symbol.intern(null, "G__12948")) })), RT.keyword(null, "line"), Integer.valueOf(20), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async/multiplex.cljc" });
    const__40 = (Var)RT.var("clojure.core", "extend");
    const__41 = RT.classForName("ginga.async.multiplex.*Msg");
    const__42 = (Var)RT.var("ginga.async.win", "Size");
    const__43 = (Keyword)RT.keyword(null, "size");
    const__44 = RT.classForName("ginga.async.multiplex.CloseInMsg");
    const__45 = RT.classForName("ginga.async.multiplex.CloseOutMsg");
    const__46 = RT.classForName("ginga.async.multiplex.OpenMsg");
    const__47 = RT.classForName("ginga.async.multiplex.WinMsg");
    const__48 = RT.classForName("ginga.async.multiplex.ErrorMsg");
    const__49 = (Var)RT.var("ginga.async.multiplex", "assoc-new-conn");
    const__52 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "id"), Symbol.intern(null, "conn")) })), RT.keyword(null, "line"), Integer.valueOf(39), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async/multiplex.cljc" });
    const__53 = (Var)RT.var("ginga.async.multiplex", "close-inc");
    const__56 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "buf")), RT.keyword(null, "as"), Symbol.intern(null, "inc") })) })), RT.keyword(null, "line"), Integer.valueOf(44), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async/multiplex.cljc" });
    const__57 = (Var)RT.var("ginga.async.multiplex", "close-outc");
    const__60 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "ch"), Symbol.intern(null, "close-promise")), RT.keyword(null, "as"), Symbol.intern(null, "outc") })) })), RT.keyword(null, "line"), Integer.valueOf(47), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async/multiplex.cljc" });
    const__61 = (Var)RT.var("ginga.async.multiplex", "close-connections");
    const__64 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "inc-by-id"), Symbol.intern(null, "outc-by-id")) })), RT.keyword(null, "line"), Integer.valueOf(51), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async/multiplex.cljc" });
    const__65 = (Var)RT.var("ginga.async.multiplex", "schedule-put");
    const__68 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "task-ch"), Symbol.intern(null, "dest"), Symbol.intern(null, "v"), Symbol.intern(null, "continue")), Tuple.create(Symbol.intern(null, "task-ch"), Symbol.intern(null, "dest"), Symbol.intern(null, "v")) })), RT.keyword(null, "line"), Integer.valueOf(57), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async/multiplex.cljc" });
    const__69 = (Var)RT.var("ginga.async.multiplex", "schedule-outc-put");
    const__72 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "msg-size"), Symbol.intern(null, "outc-by-id"), Symbol.intern(null, "task-ch"), RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "id"), Symbol.intern(null, "win-stats"), Symbol.intern(null, "ch"), Symbol.intern(null, "task-cnt")), RT.keyword(null, "as"), Symbol.intern(null, "outc") }), Symbol.intern(null, "upstream")) })), RT.keyword(null, "line"), Integer.valueOf(66), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async/multiplex.cljc" });
    const__73 = (Var)RT.var("ginga.async.multiplex", "accept-inc");
    const__76 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "win-opts"), Symbol.intern(null, "m"), Symbol.intern(null, "ch"), Symbol.intern(null, "close-promise"), Symbol.intern(null, "id"), Symbol.intern(null, "new?")) })), RT.keyword(null, "line"), Integer.valueOf(83), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async/multiplex.cljc" });
    const__77 = (Var)RT.var("ginga.async.multiplex", "open-outc");
    const__80 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "ch"), Symbol.intern(null, "init"), Symbol.intern(null, "id"), Symbol.intern(null, "new?"), Symbol.intern(null, "upstream-buf-opts")) })), RT.keyword(null, "line"), Integer.valueOf(112), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async/multiplex.cljc" });
    const__81 = (Var)RT.var("ginga.async.multiplex", "run-receive-process");
    const__84 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "win-opts"), Symbol.intern(null, "max-in-connections"), Symbol.intern(null, "accept"), Symbol.intern(null, "msg-size"), Symbol.intern(null, "on-error")), RT.keyword(null, "or"), RT.map(new Object[] { Symbol.intern(null, "on-error"), Symbol.intern("g", "no-op") }), RT.keyword(null, "as"), Symbol.intern(null, "opts") }), Symbol.intern(null, "m")) })), RT.keyword(null, "line"), Integer.valueOf(131), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async/multiplex.cljc" });
    const__85 = (Var)RT.var("ginga.async.multiplex", "multiplexer");
    const__90 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "export"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "opts"), Symbol.intern(null, "upstream"), Symbol.intern(null, "downstream")) })), RT.keyword(null, "doc"), "Opened out-channels must be closed when the producing process is\n  finished and the close-promise given-to/returned-by\n  accept (in-channels) must be resolved when the consuming process is\n  finished to avoid memory leaks.\n\n  Caveat emptor: when feeding back upstream into downstream (loopback\n  channel) ensure that there is some buffer space available to prevent\n  the receive process from hanging (which takes and puts respectively\n  and needs puts to complete to be able to take again).", RT.keyword(null, "line"), Integer.valueOf(187), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "ginga/async/multiplex.cljc" });
    const__91 = (Var)RT.var("ginga.async.multiplex", "open-new");
    const__94 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "ch"), Symbol.intern(null, "init")) })), RT.keyword(null, "line"), Integer.valueOf(213), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async/multiplex.cljc" });
    const__95 = (Var)RT.var("ginga.async.multiplex", "open-existing");
    const__98 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "buf-cnt"), Symbol.intern(null, "buf-size")), RT.keyword(null, "as"), Symbol.intern(null, "upstream-buf-opts") }), Symbol.intern(null, "m"), Symbol.intern(null, "ch"), Symbol.intern(null, "id")) })), RT.keyword(null, "line"), Integer.valueOf(216), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async/multiplex.cljc" });
    const__99 = (Var)RT.var("ginga.async.multiplex", "accept-new");
  }
  
  public static void __init1() {
    const__102 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "ch"), Symbol.intern(null, "close-promise")), Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "ch"), Symbol.intern(null, "close-promise"), Symbol.intern(null, "id")) })), RT.keyword(null, "line"), Integer.valueOf(219), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async/multiplex.cljc" });
    const__103 = (Var)RT.var("ginga.async.multiplex", "open-duplex");
    const__106 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m"), Symbol.intern(null, "out-ch"), Symbol.intern(null, "init"), Symbol.intern(null, "in-ch"), Symbol.intern(null, "in-close-promise")) })), RT.keyword(null, "line"), Integer.valueOf(237), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async/multiplex.cljc" });
    const__107 = (Var)RT.var("ginga.async.multiplex", "wrap-simplex-with-duplex-accept");
    const__110 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "accept")) })), RT.keyword(null, "line"), Integer.valueOf(247), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async/multiplex.cljc" });
    const__111 = (Var)RT.var("ginga.async.multiplex", "simplex-accept-close");
    const__114 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(257), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async/multiplex.cljc" });
    const__115 = (Var)RT.var("ginga.async.multiplex", "duplex-accept-close");
    const__118 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(262), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async/multiplex.cljc" });
    const__119 = (Var)RT.var("ginga.async.multiplex", "make-bridge");
    const__122 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "to-multi-from-init")) })), RT.keyword(null, "line"), Integer.valueOf(267), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async/multiplex.cljc" });
    const__123 = (Var)RT.var("ginga.async.multiplex", "wrap-accept-chans");
    const__126 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "accept"), Symbol.intern(null, "wrap-in"), Symbol.intern(null, "wrap-out")) })), RT.keyword(null, "line"), Integer.valueOf(282), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/async/multiplex.cljc" });
  }
  
  static  {
    __init0();
    __init1();
    Compiler.pushNSandLoader(RT.classForName("ginga.async.multiplex__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
