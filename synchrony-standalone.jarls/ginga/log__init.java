package ginga;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class log__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__12;
  
  public static final Var const__13;
  
  public static final AFn const__16;
  
  public static final Var const__17;
  
  public static final AFn const__20;
  
  public static final Var const__21;
  
  public static final AFn const__24;
  
  public static final Var const__25;
  
  public static final AFn const__28;
  
  public static final Var const__29;
  
  public static final AFn const__32;
  
  public static final Var const__33;
  
  public static final AFn const__36;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new log.fn__8687());
    const__3.setMeta((IPersistentMap)const__12);
    const__3.bindRoot(new log.log());
    ((Var)const__3)





































      
      .setMacro();
    const__13.setMeta((IPersistentMap)const__16);
    const__13.bindRoot(new log.catchall_logging());
    ((Var)const__13)













      
      .setMacro();
    const__17.setMeta((IPersistentMap)const__20);
    const__17.bindRoot(new log.cljs_tag_log());
    const__21.setMeta((IPersistentMap)const__24);
    const__21.bindRoot(new log.with_cljs_tag_log());
    const__25.setMeta((IPersistentMap)const__28);
    const__25.bindRoot(new log.cljs_log_group());
    const__29.setMeta((IPersistentMap)const__32);
    const__29.bindRoot(new log.cljs_log_group_end());
    const__33.setMeta((IPersistentMap)const__36);
    const__33.bindRoot(new log.wrap_log_group());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "ginga.log");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("ginga.log", "log");
    const__12 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "level"), Symbol.intern(null, "message")), Tuple.create(Symbol.intern(null, "level"), Symbol.intern(null, "throwable"), Symbol.intern(null, "message")), Tuple.create(Symbol.intern(null, "message")) })), RT.keyword(null, "doc"), "Like clojure.tools.logging/log, but supports cljs.", RT.keyword(null, "line"), Integer.valueOf(40), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/log.cljc" });
    const__13 = (Var)RT.var("ginga.log", "catchall-logging");
    const__16 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "doc"), "Like ginga.core/catchall but logs exceptions.", RT.keyword(null, "line"), Integer.valueOf(55), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/log.cljc" });
    const__17 = (Var)RT.var("ginga.log", "cljs-tag-log");
    const__20 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "tag"), Symbol.intern(null, "object")) })), RT.keyword(null, "line"), Integer.valueOf(60), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/log.cljc" });
    const__21 = (Var)RT.var("ginga.log", "with-cljs-tag-log");
    const__24 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "tag"), Symbol.intern(null, "f"), Symbol.intern(null, "&"), Symbol.intern(null, "args")) })), RT.keyword(null, "line"), Integer.valueOf(63), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/log.cljc" });
    const__25 = (Var)RT.var("ginga.log", "cljs-log-group");
    const__28 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "group-name")) })), RT.keyword(null, "line"), Integer.valueOf(68), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/log.cljc" });
    const__29 = (Var)RT.var("ginga.log", "cljs-log-group-end");
    const__32 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(69), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/log.cljc" });
    const__33 = (Var)RT.var("ginga.log", "wrap-log-group");
    const__36 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "group-name"), Symbol.intern(null, "f")) })), RT.keyword(null, "line"), Integer.valueOf(70), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/log.cljc" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("ginga.log__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
