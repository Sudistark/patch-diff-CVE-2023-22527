package ginga;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class jwt__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__9;
  
  public static final Object const__10;
  
  public static final Var const__11;
  
  public static final AFn const__15;
  
  public static final Var const__16;
  
  public static final AFn const__20;
  
  public static final Var const__21;
  
  public static final AFn const__24;
  
  public static final Var const__25;
  
  public static final AFn const__28;
  
  public static final Var const__29;
  
  public static final AFn const__32;
  
  public static final Var const__33;
  
  public static final AFn const__36;
  
  public static final Var const__37;
  
  public static final AFn const__39;
  
  public static final Var const__40;
  
  public static final Var const__41;
  
  public static final Var const__42;
  
  public static final AFn const__45;
  
  public static final Var const__46;
  
  public static final AFn const__49;
  
  public static final Var const__50;
  
  public static final AFn const__53;
  
  public static final Var const__54;
  
  public static final AFn const__57;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new jwt.fn__20288());
    const__3.setMeta((IPersistentMap)const__9);
    const__3.bindRoot(const__10);
    const__11.setMeta((IPersistentMap)const__15);
    const__11.bindRoot(new jwt.encrypt_serialize());
    const__16.setMeta((IPersistentMap)const__20);
    const__16.bindRoot(new jwt.decrypt());
    const__21.setMeta((IPersistentMap)const__24);
    const__21.bindRoot(new jwt.decrypt_serialized());
    const__25.setMeta((IPersistentMap)const__28);
    const__25.bindRoot(new jwt.encrypted_QMARK_());
    const__29.setMeta((IPersistentMap)const__32);
    const__29.bindRoot(new jwt.sign());
    const__33.setMeta((IPersistentMap)const__36);
    const__33.bindRoot(new jwt.sign_then_serialize());
    const__37.setMeta((IPersistentMap)const__39);
    const__37

















































      
      .bindRoot(((IFn)const__40.getRawRoot()).invoke(const__41.getRawRoot(), new jwt.fn__20298()));
    const__42.setMeta((IPersistentMap)const__45);
    const__42.bindRoot(new jwt.parse());
    const__46.setMeta((IPersistentMap)const__49);
    const__46.bindRoot(new jwt.expired_QMARK_());
    const__50.setMeta((IPersistentMap)const__53);
    const__50.bindRoot(new jwt.before_QMARK_());
    const__54.setMeta((IPersistentMap)const__57);
    const__54.bindRoot(new jwt.verify());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "ginga.jwt");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("ginga.jwt", "default-clock-skew-secs");
    const__9 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(15), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/jwt.clj" });
    const__10 = Long.valueOf(180L);
    const__11 = (Var)RT.var("ginga.jwt", "encrypt-serialize");
    const__15 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "jwe-str"), Symbol.intern(null, "rsa-public-key")) })), RT.keyword(null, "line"), Integer.valueOf(17), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/jwt.clj" });
    const__16 = (Var)RT.var("ginga.jwt", "decrypt");
    const__20 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "jwe-object"), Symbol.intern(null, "rsa-private-key")) })), RT.keyword(null, "doc"), "Decrypt an encrypted jwt object", RT.keyword(null, "line"), Integer.valueOf(24), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/jwt.clj" });
    const__21 = (Var)RT.var("ginga.jwt", "decrypt-serialized");
    const__24 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "jwe-str"), Symbol.intern(null, "rsa-private-key")) })), RT.keyword(null, "doc"), "Decrypt an encrypted serialized jwt", RT.keyword(null, "line"), Integer.valueOf(30), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/jwt.clj" });
    const__25 = (Var)RT.var("ginga.jwt", "encrypted?");
    const__28 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "jwt-object")) })), RT.keyword(null, "line"), Integer.valueOf(36), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/jwt.clj" });
    const__29 = (Var)RT.var("ginga.jwt", "sign");
    const__32 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "data"), Symbol.intern(null, "key")) })), RT.keyword(null, "line"), Integer.valueOf(39), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/jwt.clj" });
    const__33 = (Var)RT.var("ginga.jwt", "sign-then-serialize");
    const__36 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "data"), Symbol.intern(null, "key")) })), RT.keyword(null, "line"), Integer.valueOf(48), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/jwt.clj" });
    const__37 = (Var)RT.var("ginga.jwt", "unmarshal-maps");
    const__39 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(51), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/jwt.clj" });
    const__40 = (Var)RT.var("clojure.core", "partial");
    const__41 = (Var)RT.var("clojure.walk", "prewalk");
    const__42 = (Var)RT.var("ginga.jwt", "parse");
    const__45 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "jwt-str")), Tuple.create(Symbol.intern(null, "jwt-str"), Symbol.intern(null, "private-key")) })), RT.keyword(null, "line"), Integer.valueOf(54), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/jwt.clj" });
    const__46 = (Var)RT.var("ginga.jwt", "expired?");
    const__49 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "exp"), Symbol.intern(null, "curr-secs"), Symbol.intern(null, "&"), RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "clock-skew-secs")) })) })), RT.keyword(null, "line"), Integer.valueOf(71), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/jwt.clj" });
    const__50 = (Var)RT.var("ginga.jwt", "before?");
    const__53 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "nbf"), Symbol.intern(null, "curr-secs"), Symbol.intern(null, "&"), RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "clock-skew-secs")) })) })), RT.keyword(null, "line"), Integer.valueOf(74), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/jwt.clj" });
    const__54 = (Var)RT.var("ginga.jwt", "verify");
    const__57 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "jwt"), Symbol.intern(null, "key"), Symbol.intern(null, "&"), RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "expires"), Symbol.intern(null, "clock-skew-secs")), RT.keyword(null, "or"), RT.map(new Object[] { Symbol.intern(null, "expires"), Boolean.TRUE }) })) })), RT.keyword(null, "line"), Integer.valueOf(77), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/jwt.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("ginga.jwt__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
