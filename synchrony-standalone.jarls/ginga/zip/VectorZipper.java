package ginga.zip;

import clojure.lang.AFn;
import clojure.lang.APersistentMap;
import clojure.lang.Associative;
import clojure.lang.Counted;
import clojure.lang.IFn;
import clojure.lang.IHashEq;
import clojure.lang.IKeywordLookup;
import clojure.lang.ILookup;
import clojure.lang.ILookupThunk;
import clojure.lang.IMapEntry;
import clojure.lang.IObj;
import clojure.lang.IPersistentCollection;
import clojure.lang.IPersistentMap;
import clojure.lang.IPersistentVector;
import clojure.lang.IRecord;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.MapEntry;
import clojure.lang.Numbers;
import clojure.lang.PersistentHashSet;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.RecordIterator;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Util;
import clojure.lang.Var;
import java.io.Serializable;
import java.util.Arrays;
import java.util.Collection;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

public final class VectorZipper implements Nth, Backtrack, Edit, AsZipper, Traverse, IRecord, IHashEq, IObj, ILookup, IKeywordLookup, IPersistentMap, Map, Serializable {
  public final Object v;
  
  public final Object i;
  
  public final Object up;
  
  public final Object subseqs;
  
  public final Object prev_i;
  
  public final Object __meta;
  
  public final Object __extmap;
  
  int __hash;
  
  int __hasheq;
  
  private static Class __cached_class__0;
  
  private static Class __cached_class__1;
  
  private static Class __cached_class__2;
  
  private static Class __cached_class__3;
  
  private static Class __cached_class__4;
  
  private static Class __cached_class__5;
  
  private static Class __cached_class__6;
  
  private static Class __cached_class__7;
  
  private static Class __cached_class__8;
  
  private static Class __cached_class__9;
  
  private static Class __cached_class__10;
  
  private static Class __cached_class__11;
  
  private static Class __cached_class__12;
  
  private static Class __cached_class__13;
  
  private static Class __cached_class__14;
  
  private static Class __cached_class__15;
  
  private static Class __cached_class__16;
  
  private static Class __cached_class__17;
  
  public static final Var const__0 = (Var)RT.var("clojure.core", "set");
  
  public static final Var const__1 = (Var)RT.var("clojure.core", "vals");
  
  public static final Var const__2 = (Var)RT.var("clojure.core", "keys");
  
  public static final Var const__4 = (Var)RT.var("clojure.core", "some");
  
  public static final Object const__6 = Long.valueOf(0L);
  
  public static final Var const__7 = (Var)RT.var("clojure.core", "contains?");
  
  public static final Keyword const__8 = (Keyword)RT.keyword(null, "v");
  
  public static final Keyword const__9 = (Keyword)RT.keyword(null, "up");
  
  public static final Keyword const__10 = (Keyword)RT.keyword(null, "subseqs");
  
  public static final Keyword const__11 = (Keyword)RT.keyword(null, "i");
  
  public static final Keyword const__12 = (Keyword)RT.keyword(null, "prev-i");
  
  public static final AFn const__13 = (AFn)PersistentHashSet.create(new Object[] { RT.keyword(null, "v"), RT.keyword(null, "up"), RT.keyword(null, "subseqs"), RT.keyword(null, "i"), RT.keyword(null, "prev-i") });
  
  public static final Var const__14 = (Var)RT.var("clojure.core", "dissoc");
  
  public static final Var const__15 = (Var)RT.var("clojure.core", "with-meta");
  
  public static final Var const__16 = (Var)RT.var("clojure.core", "into");
  
  public static final Var const__17 = (Var)RT.var("clojure.core", "not-empty");
  
  public static final Var const__18 = (Var)RT.var("clojure.core", "identical?");
  
  public static final Var const__19 = (Var)RT.var("clojure.core", "assoc");
  
  public static final AFn const__20 = (AFn)Tuple.create(RT.keyword(null, "v"), RT.keyword(null, "i"), RT.keyword(null, "up"), RT.keyword(null, "subseqs"), RT.keyword(null, "prev-i"));
  
  public static final Var const__21 = (Var)RT.var("clojure.core", "seq");
  
  public static final Var const__22 = (Var)RT.var("clojure.core", "concat");
  
  public static final Var const__23 = (Var)RT.var("clojure.core", "not");
  
  public static final Var const__24 = (Var)RT.var("clojure.core", "class");
  
  public static final Var const__25 = (Var)RT.var("clojure.core", "imap-cons");
  
  public static final Var const__26 = (Var)RT.var("clojure.core", "str");
  
  public static final Var const__37 = (Var)RT.var("ginga.zip", "down-impl");
  
  public static final Var const__39 = (Var)RT.var("ginga.zip", "traverse");
  
  public static final Var const__40 = (Var)RT.var("ginga.zip", "as-zipper");
  
  public static final Var const__41 = (Var)RT.var("ginga.zip", "prev");
  
  public static final Var const__44 = (Var)RT.var("ginga.zip", "prev-node");
  
  public static final Var const__45 = (Var)RT.var("clojure.core", "pr-str");
  
  public static final Object const__46 = ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "<"), Symbol.intern(null, "i"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "count"), Symbol.intern(null, "v") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(284), RT.keyword(null, "column"), Integer.valueOf(18) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(284), RT.keyword(null, "column"), Integer.valueOf(13) }));
  
  public static final Object const__47 = ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "<"), Symbol.intern(null, "i"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "count"), Symbol.intern(null, "v") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(287), RT.keyword(null, "column"), Integer.valueOf(18) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(287), RT.keyword(null, "column"), Integer.valueOf(13) }));
  
  public static final Var const__48 = (Var)RT.var("ginga.zip", "replace");
  
  public static final Var const__49 = (Var)RT.var("ginga.tree", "with-children");
  
  public static final Var const__50 = (Var)RT.var("ginga.zip", "node");
  
  public static final Var const__51 = (Var)RT.var("ginga.zip", "finalize-subseqs");
  
  public static final Var const__52 = (Var)RT.var("ginga.zip", "replace-next");
  
  public static final Var const__53 = (Var)RT.var("ginga.zip", "insert*");
  
  public static final Var const__54 = (Var)RT.var("clojure.core", "conj");
  
  public static final Var const__55 = (Var)RT.var("ginga.zip", "advance-subseqs");
  
  public static final Object const__56 = ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "<"), Symbol.intern(null, "i"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "count"), Symbol.intern(null, "v") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(318), RT.keyword(null, "column"), Integer.valueOf(18) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(318), RT.keyword(null, "column"), Integer.valueOf(13) }));
  
  public static final Var const__57 = (Var)RT.var("ginga.zip", "prev-remove"), const__59 = (Var)RT.var("ginga.zip", "nth-prev"), const__62 = (Var)RT.var("clojure.core", "subvec");
  
  public VectorZipper(Object paramObject1, Object paramObject2, Object paramObject3, Object paramObject4, Object paramObject5, Object paramObject6, Object paramObject7, int paramInt1, int paramInt2) { this.v = paramObject1;
    this.i = paramObject2;
    this.up = paramObject3;
    this.subseqs = paramObject4;
    this.prev_i = paramObject5;
    this.__meta = paramObject6;
    this.__extmap = paramObject7;
    this.__hash = paramInt1;
    this.__hasheq = paramInt2; }
  
  public VectorZipper(Object paramObject1, Object paramObject2, Object paramObject3, Object paramObject4, Object paramObject5) { this(paramObject1, paramObject2, paramObject3, paramObject4, paramObject5, null, null, 0, 0); }
  
  public VectorZipper(Object paramObject1, Object paramObject2, Object paramObject3, Object paramObject4, Object paramObject5, Object paramObject6, Object paramObject7) { this(paramObject1, paramObject2, paramObject3, paramObject4, paramObject5, paramObject6, paramObject7, 0, 0); }
  
  public static IPersistentVector getBasis() { return Tuple.create(Symbol.intern(null, "v"), Symbol.intern(null, "i"), Symbol.intern(null, "up"), Symbol.intern(null, "subseqs"), Symbol.intern(null, "prev-i")); }
  
  public static VectorZipper create(IPersistentMap paramIPersistentMap) {
    Object object1 = paramIPersistentMap.valAt(Keyword.intern("v"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("v"));
    Object object2 = paramIPersistentMap.valAt(Keyword.intern("i"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("i"));
    Object object3 = paramIPersistentMap.valAt(Keyword.intern("up"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("up"));
    Object object4 = paramIPersistentMap.valAt(Keyword.intern("subseqs"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("subseqs"));
    Object object5 = paramIPersistentMap.valAt(Keyword.intern("prev-i"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("prev-i"));
    return new VectorZipper(object1, object2, object3, object4, object5, null, RT.seqOrElse(paramIPersistentMap), 0, 0);
  }
  
  public Object as_zipper() {
    if (this.subseqs != null) {
      if (this.subseqs != Boolean.FALSE);
    } else {
      this.subseqs;
    } 
    return new Zipper(((IFn)const__62.getRawRoot())
        .invoke(this.v, const__6, this.i), ((IFn)const__21.getRawRoot())
        .invoke(((IFn)const__62.getRawRoot()).invoke(this.v, this.i)), this.up, Boolean.TRUE);
  }
  
  public Object nth_prev(Object n) { // Byte code:
    //   0: aload_0
    //   1: getfield subseqs : Ljava/lang/Object;
    //   4: dup
    //   5: ifnull -> 120
    //   8: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   11: if_acmpeq -> 121
    //   14: aload_0
    //   15: dup
    //   16: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   19: getstatic ginga/zip/VectorZipper.__cached_class__16 : Ljava/lang/Class;
    //   22: if_acmpeq -> 39
    //   25: dup
    //   26: instanceof ginga/zip/AsZipper
    //   29: ifne -> 54
    //   32: dup
    //   33: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   36: putstatic ginga/zip/VectorZipper.__cached_class__16 : Ljava/lang/Class;
    //   39: getstatic ginga/zip/VectorZipper.const__40 : Lclojure/lang/Var;
    //   42: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   45: swap
    //   46: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   51: goto -> 62
    //   54: checkcast ginga/zip/AsZipper
    //   57: invokeinterface as_zipper : ()Ljava/lang/Object;
    //   62: dup
    //   63: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   66: getstatic ginga/zip/VectorZipper.__cached_class__17 : Ljava/lang/Class;
    //   69: if_acmpeq -> 86
    //   72: dup
    //   73: instanceof ginga/zip/Nth
    //   76: ifne -> 106
    //   79: dup
    //   80: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   83: putstatic ginga/zip/VectorZipper.__cached_class__17 : Ljava/lang/Class;
    //   86: getstatic ginga/zip/VectorZipper.const__59 : Lclojure/lang/Var;
    //   89: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   92: swap
    //   93: aload_1
    //   94: aconst_null
    //   95: astore_1
    //   96: aconst_null
    //   97: astore_0
    //   98: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   103: goto -> 117
    //   106: checkcast ginga/zip/Nth
    //   109: aload_1
    //   110: aconst_null
    //   111: astore_1
    //   112: invokeinterface nth_prev : (Ljava/lang/Object;)Ljava/lang/Object;
    //   117: goto -> 170
    //   120: pop
    //   121: aload_0
    //   122: getfield i : Ljava/lang/Object;
    //   125: aload_1
    //   126: aconst_null
    //   127: astore_1
    //   128: invokestatic minus : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Number;
    //   131: astore_2
    //   132: aload_2
    //   133: invokestatic isNeg : (Ljava/lang/Object;)Z
    //   136: ifeq -> 144
    //   139: aconst_null
    //   140: goto -> 170
    //   143: athrow
    //   144: new ginga/zip/VectorZipper
    //   147: dup
    //   148: aload_0
    //   149: getfield v : Ljava/lang/Object;
    //   152: aload_2
    //   153: aconst_null
    //   154: astore_2
    //   155: aload_0
    //   156: getfield up : Ljava/lang/Object;
    //   159: aload_0
    //   160: getfield subseqs : Ljava/lang/Object;
    //   163: aload_0
    //   164: getfield prev_i : Ljava/lang/Object;
    //   167: invokespecial <init> : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
    //   170: areturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #249	-> 0
    //   #329	-> 0
    //   #330	-> 14
    //   #330	-> 14
    //   #330	-> 46
    //   #330	-> 96
    //   #331	-> 128
    //   #332	-> 132
    //   #332	-> 133
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   132	38	2	new_i	Ljava/lang/Object;
    //   0	170	0	this	Lginga/zip/VectorZipper;
    //   0	170	1	n	Ljava/lang/Object; }
  
  public Object nth_next(Object n) {
    n = null;
    Object new_i = Numbers.add(this.i, n);
    new_i = null;
    return Numbers.lte(new_i, RT.count(this.v)) ? new VectorZipper(this.v, new_i, this.up, this.subseqs, this.prev_i) : null;
  }
  
  public Object prev_remove() { if (Util.classOf(this) != __cached_class__14)
      if (!(this instanceof AsZipper)) {
        __cached_class__14 = Util.classOf(this);
      } else if (Util.classOf(((AsZipper)this).as_zipper()) != __cached_class__15) {
        if (!(((AsZipper)this).as_zipper() instanceof Edit)) {
          __cached_class__15 = Util.classOf(((AsZipper)this).as_zipper());
        } else {
          return ((Edit)((AsZipper)this).as_zipper()).prev_remove();
        } 
      }   }
  
  public Object remove() {
    if (Numbers.lt(this.i, RT.count(this.v))) {
      null;
    } else {
      throw (Throwable)new AssertionError(((IFn)const__26.getRawRoot()).invoke("Assert failed: ", ((IFn)const__45.getRawRoot()).invoke(const__56)));
    } 
    return new VectorZipper(this.v, Numbers.inc(this.i), this.up, ((IFn)const__55.getRawRoot()).invoke(this.subseqs, this.v, this.prev_i, this.i), Numbers.inc(this.i));
  }
  
  public Object insert_next_STAR_(Object nodes) {
    nodes = null;
    return new VectorZipper(this.v, this.i, this.up, ((IFn)const__54.getRawRoot()).invoke(((IFn)const__55.getRawRoot()).invoke(this.subseqs, this.v, this.prev_i, this.i), nodes), this.i);
  }
  
  public Object insert_next(Object node) {
    node = null;
    return new VectorZipper(this.v, this.i, this.up, ((IFn)const__54.getRawRoot()).invoke(((IFn)const__55.getRawRoot()).invoke(this.subseqs, this.v, this.prev_i, this.i), Tuple.create(node)), this.i);
  }
  
  public Object insert_STAR_(Object nodes) { if (Util.classOf(this) != __cached_class__12)
      if (!(this instanceof AsZipper)) {
        __cached_class__12 = Util.classOf(this);
      } else if (Util.classOf(((AsZipper)this).as_zipper()) != __cached_class__13) {
        if (!(((AsZipper)this).as_zipper() instanceof Edit)) {
          __cached_class__13 = Util.classOf(((AsZipper)this).as_zipper());
        } else {
          nodes = null;
          return ((Edit)((AsZipper)this).as_zipper()).insert_STAR_(nodes);
        } 
      }   }
  
  public Object insert(Object node) { node = null;
    return new InsertFrame(this, node); }
  
  public Object up_next() { // Byte code:
    //   0: aload_0
    //   1: getfield up : Ljava/lang/Object;
    //   4: astore_1
    //   5: aload_1
    //   6: aconst_null
    //   7: invokestatic identical : (Ljava/lang/Object;Ljava/lang/Object;)Z
    //   10: ifeq -> 18
    //   13: aconst_null
    //   14: goto -> 498
    //   17: athrow
    //   18: aload_1
    //   19: aconst_null
    //   20: astore_1
    //   21: dup
    //   22: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   25: getstatic ginga/zip/VectorZipper.__cached_class__11 : Ljava/lang/Class;
    //   28: if_acmpeq -> 45
    //   31: dup
    //   32: instanceof ginga/zip/Edit
    //   35: ifne -> 276
    //   38: dup
    //   39: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   42: putstatic ginga/zip/VectorZipper.__cached_class__11 : Ljava/lang/Class;
    //   45: getstatic ginga/zip/VectorZipper.const__52 : Lclojure/lang/Var;
    //   48: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   51: swap
    //   52: aload_0
    //   53: getfield up : Ljava/lang/Object;
    //   56: dup
    //   57: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   60: getstatic ginga/zip/VectorZipper.__cached_class__9 : Ljava/lang/Class;
    //   63: if_acmpeq -> 80
    //   66: dup
    //   67: instanceof ginga/zip/Traverse
    //   70: ifne -> 95
    //   73: dup
    //   74: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   77: putstatic ginga/zip/VectorZipper.__cached_class__9 : Ljava/lang/Class;
    //   80: getstatic ginga/zip/VectorZipper.const__50 : Lclojure/lang/Var;
    //   83: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   86: swap
    //   87: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   92: goto -> 103
    //   95: checkcast ginga/zip/Traverse
    //   98: invokeinterface node : ()Ljava/lang/Object;
    //   103: dup
    //   104: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   107: getstatic ginga/zip/VectorZipper.__cached_class__10 : Ljava/lang/Class;
    //   110: if_acmpeq -> 127
    //   113: dup
    //   114: instanceof ginga/tree/Node
    //   117: ifne -> 200
    //   120: dup
    //   121: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   124: putstatic ginga/zip/VectorZipper.__cached_class__10 : Ljava/lang/Class;
    //   127: getstatic ginga/zip/VectorZipper.const__49 : Lclojure/lang/Var;
    //   130: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   133: swap
    //   134: aload_0
    //   135: getfield subseqs : Ljava/lang/Object;
    //   138: dup
    //   139: ifnull -> 187
    //   142: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   145: if_acmpeq -> 188
    //   148: getstatic ginga/zip/VectorZipper.const__51 : Lclojure/lang/Var;
    //   151: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   154: checkcast clojure/lang/IFn
    //   157: aload_0
    //   158: getfield subseqs : Ljava/lang/Object;
    //   161: aload_0
    //   162: getfield v : Ljava/lang/Object;
    //   165: aload_0
    //   166: getfield prev_i : Ljava/lang/Object;
    //   169: aload_0
    //   170: getfield v : Ljava/lang/Object;
    //   173: invokestatic count : (Ljava/lang/Object;)I
    //   176: invokestatic valueOf : (I)Ljava/lang/Integer;
    //   179: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   184: goto -> 192
    //   187: pop
    //   188: aload_0
    //   189: getfield v : Ljava/lang/Object;
    //   192: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   197: goto -> 266
    //   200: checkcast ginga/tree/Node
    //   203: aload_0
    //   204: getfield subseqs : Ljava/lang/Object;
    //   207: dup
    //   208: ifnull -> 256
    //   211: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   214: if_acmpeq -> 257
    //   217: getstatic ginga/zip/VectorZipper.const__51 : Lclojure/lang/Var;
    //   220: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   223: checkcast clojure/lang/IFn
    //   226: aload_0
    //   227: getfield subseqs : Ljava/lang/Object;
    //   230: aload_0
    //   231: getfield v : Ljava/lang/Object;
    //   234: aload_0
    //   235: getfield prev_i : Ljava/lang/Object;
    //   238: aload_0
    //   239: getfield v : Ljava/lang/Object;
    //   242: invokestatic count : (Ljava/lang/Object;)I
    //   245: invokestatic valueOf : (I)Ljava/lang/Integer;
    //   248: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   253: goto -> 261
    //   256: pop
    //   257: aload_0
    //   258: getfield v : Ljava/lang/Object;
    //   261: invokeinterface with_children : (Ljava/lang/Object;)Ljava/lang/Object;
    //   266: aconst_null
    //   267: astore_0
    //   268: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   273: goto -> 498
    //   276: checkcast ginga/zip/Edit
    //   279: aload_0
    //   280: getfield up : Ljava/lang/Object;
    //   283: dup
    //   284: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   287: getstatic ginga/zip/VectorZipper.__cached_class__9 : Ljava/lang/Class;
    //   290: if_acmpeq -> 307
    //   293: dup
    //   294: instanceof ginga/zip/Traverse
    //   297: ifne -> 322
    //   300: dup
    //   301: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   304: putstatic ginga/zip/VectorZipper.__cached_class__9 : Ljava/lang/Class;
    //   307: getstatic ginga/zip/VectorZipper.const__50 : Lclojure/lang/Var;
    //   310: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   313: swap
    //   314: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   319: goto -> 330
    //   322: checkcast ginga/zip/Traverse
    //   325: invokeinterface node : ()Ljava/lang/Object;
    //   330: dup
    //   331: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   334: getstatic ginga/zip/VectorZipper.__cached_class__10 : Ljava/lang/Class;
    //   337: if_acmpeq -> 354
    //   340: dup
    //   341: instanceof ginga/tree/Node
    //   344: ifne -> 427
    //   347: dup
    //   348: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   351: putstatic ginga/zip/VectorZipper.__cached_class__10 : Ljava/lang/Class;
    //   354: getstatic ginga/zip/VectorZipper.const__49 : Lclojure/lang/Var;
    //   357: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   360: swap
    //   361: aload_0
    //   362: getfield subseqs : Ljava/lang/Object;
    //   365: dup
    //   366: ifnull -> 414
    //   369: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   372: if_acmpeq -> 415
    //   375: getstatic ginga/zip/VectorZipper.const__51 : Lclojure/lang/Var;
    //   378: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   381: checkcast clojure/lang/IFn
    //   384: aload_0
    //   385: getfield subseqs : Ljava/lang/Object;
    //   388: aload_0
    //   389: getfield v : Ljava/lang/Object;
    //   392: aload_0
    //   393: getfield prev_i : Ljava/lang/Object;
    //   396: aload_0
    //   397: getfield v : Ljava/lang/Object;
    //   400: invokestatic count : (Ljava/lang/Object;)I
    //   403: invokestatic valueOf : (I)Ljava/lang/Integer;
    //   406: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   411: goto -> 419
    //   414: pop
    //   415: aload_0
    //   416: getfield v : Ljava/lang/Object;
    //   419: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   424: goto -> 493
    //   427: checkcast ginga/tree/Node
    //   430: aload_0
    //   431: getfield subseqs : Ljava/lang/Object;
    //   434: dup
    //   435: ifnull -> 483
    //   438: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   441: if_acmpeq -> 484
    //   444: getstatic ginga/zip/VectorZipper.const__51 : Lclojure/lang/Var;
    //   447: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   450: checkcast clojure/lang/IFn
    //   453: aload_0
    //   454: getfield subseqs : Ljava/lang/Object;
    //   457: aload_0
    //   458: getfield v : Ljava/lang/Object;
    //   461: aload_0
    //   462: getfield prev_i : Ljava/lang/Object;
    //   465: aload_0
    //   466: getfield v : Ljava/lang/Object;
    //   469: invokestatic count : (Ljava/lang/Object;)I
    //   472: invokestatic valueOf : (I)Ljava/lang/Integer;
    //   475: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   480: goto -> 488
    //   483: pop
    //   484: aload_0
    //   485: getfield v : Ljava/lang/Object;
    //   488: invokeinterface with_children : (Ljava/lang/Object;)Ljava/lang/Object;
    //   493: invokeinterface replace_next : (Ljava/lang/Object;)Ljava/lang/Object;
    //   498: areturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #249	-> 0
    //   #296	-> 5
    //   #296	-> 7
    //   #297	-> 18
    //   #297	-> 52
    //   #297	-> 52
    //   #297	-> 87
    //   #298	-> 134
    //   #299	-> 154
    //   #299	-> 173
    //   #299	-> 179
    //   #297	-> 192
    //   #298	-> 203
    //   #299	-> 223
    //   #299	-> 242
    //   #299	-> 248
    //   #297	-> 266
    //   #297	-> 279
    //   #297	-> 279
    //   #297	-> 314
    //   #298	-> 361
    //   #299	-> 381
    //   #299	-> 400
    //   #299	-> 406
    //   #297	-> 419
    //   #298	-> 430
    //   #299	-> 450
    //   #299	-> 469
    //   #299	-> 475
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   5	493	1	G__21155	Ljava/lang/Object;
    //   0	498	0	this	Lginga/zip/VectorZipper; }
  
  public Object up() { // Byte code:
    //   0: aload_0
    //   1: getfield up : Ljava/lang/Object;
    //   4: astore_1
    //   5: aload_1
    //   6: aconst_null
    //   7: invokestatic identical : (Ljava/lang/Object;Ljava/lang/Object;)Z
    //   10: ifeq -> 18
    //   13: aconst_null
    //   14: goto -> 498
    //   17: athrow
    //   18: aload_1
    //   19: aconst_null
    //   20: astore_1
    //   21: dup
    //   22: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   25: getstatic ginga/zip/VectorZipper.__cached_class__8 : Ljava/lang/Class;
    //   28: if_acmpeq -> 45
    //   31: dup
    //   32: instanceof ginga/zip/Edit
    //   35: ifne -> 276
    //   38: dup
    //   39: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   42: putstatic ginga/zip/VectorZipper.__cached_class__8 : Ljava/lang/Class;
    //   45: getstatic ginga/zip/VectorZipper.const__48 : Lclojure/lang/Var;
    //   48: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   51: swap
    //   52: aload_0
    //   53: getfield up : Ljava/lang/Object;
    //   56: dup
    //   57: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   60: getstatic ginga/zip/VectorZipper.__cached_class__6 : Ljava/lang/Class;
    //   63: if_acmpeq -> 80
    //   66: dup
    //   67: instanceof ginga/zip/Traverse
    //   70: ifne -> 95
    //   73: dup
    //   74: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   77: putstatic ginga/zip/VectorZipper.__cached_class__6 : Ljava/lang/Class;
    //   80: getstatic ginga/zip/VectorZipper.const__50 : Lclojure/lang/Var;
    //   83: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   86: swap
    //   87: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   92: goto -> 103
    //   95: checkcast ginga/zip/Traverse
    //   98: invokeinterface node : ()Ljava/lang/Object;
    //   103: dup
    //   104: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   107: getstatic ginga/zip/VectorZipper.__cached_class__7 : Ljava/lang/Class;
    //   110: if_acmpeq -> 127
    //   113: dup
    //   114: instanceof ginga/tree/Node
    //   117: ifne -> 200
    //   120: dup
    //   121: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   124: putstatic ginga/zip/VectorZipper.__cached_class__7 : Ljava/lang/Class;
    //   127: getstatic ginga/zip/VectorZipper.const__49 : Lclojure/lang/Var;
    //   130: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   133: swap
    //   134: aload_0
    //   135: getfield subseqs : Ljava/lang/Object;
    //   138: dup
    //   139: ifnull -> 187
    //   142: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   145: if_acmpeq -> 188
    //   148: getstatic ginga/zip/VectorZipper.const__51 : Lclojure/lang/Var;
    //   151: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   154: checkcast clojure/lang/IFn
    //   157: aload_0
    //   158: getfield subseqs : Ljava/lang/Object;
    //   161: aload_0
    //   162: getfield v : Ljava/lang/Object;
    //   165: aload_0
    //   166: getfield prev_i : Ljava/lang/Object;
    //   169: aload_0
    //   170: getfield v : Ljava/lang/Object;
    //   173: invokestatic count : (Ljava/lang/Object;)I
    //   176: invokestatic valueOf : (I)Ljava/lang/Integer;
    //   179: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   184: goto -> 192
    //   187: pop
    //   188: aload_0
    //   189: getfield v : Ljava/lang/Object;
    //   192: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   197: goto -> 266
    //   200: checkcast ginga/tree/Node
    //   203: aload_0
    //   204: getfield subseqs : Ljava/lang/Object;
    //   207: dup
    //   208: ifnull -> 256
    //   211: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   214: if_acmpeq -> 257
    //   217: getstatic ginga/zip/VectorZipper.const__51 : Lclojure/lang/Var;
    //   220: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   223: checkcast clojure/lang/IFn
    //   226: aload_0
    //   227: getfield subseqs : Ljava/lang/Object;
    //   230: aload_0
    //   231: getfield v : Ljava/lang/Object;
    //   234: aload_0
    //   235: getfield prev_i : Ljava/lang/Object;
    //   238: aload_0
    //   239: getfield v : Ljava/lang/Object;
    //   242: invokestatic count : (Ljava/lang/Object;)I
    //   245: invokestatic valueOf : (I)Ljava/lang/Integer;
    //   248: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   253: goto -> 261
    //   256: pop
    //   257: aload_0
    //   258: getfield v : Ljava/lang/Object;
    //   261: invokeinterface with_children : (Ljava/lang/Object;)Ljava/lang/Object;
    //   266: aconst_null
    //   267: astore_0
    //   268: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   273: goto -> 498
    //   276: checkcast ginga/zip/Edit
    //   279: aload_0
    //   280: getfield up : Ljava/lang/Object;
    //   283: dup
    //   284: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   287: getstatic ginga/zip/VectorZipper.__cached_class__6 : Ljava/lang/Class;
    //   290: if_acmpeq -> 307
    //   293: dup
    //   294: instanceof ginga/zip/Traverse
    //   297: ifne -> 322
    //   300: dup
    //   301: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   304: putstatic ginga/zip/VectorZipper.__cached_class__6 : Ljava/lang/Class;
    //   307: getstatic ginga/zip/VectorZipper.const__50 : Lclojure/lang/Var;
    //   310: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   313: swap
    //   314: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   319: goto -> 330
    //   322: checkcast ginga/zip/Traverse
    //   325: invokeinterface node : ()Ljava/lang/Object;
    //   330: dup
    //   331: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   334: getstatic ginga/zip/VectorZipper.__cached_class__7 : Ljava/lang/Class;
    //   337: if_acmpeq -> 354
    //   340: dup
    //   341: instanceof ginga/tree/Node
    //   344: ifne -> 427
    //   347: dup
    //   348: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   351: putstatic ginga/zip/VectorZipper.__cached_class__7 : Ljava/lang/Class;
    //   354: getstatic ginga/zip/VectorZipper.const__49 : Lclojure/lang/Var;
    //   357: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   360: swap
    //   361: aload_0
    //   362: getfield subseqs : Ljava/lang/Object;
    //   365: dup
    //   366: ifnull -> 414
    //   369: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   372: if_acmpeq -> 415
    //   375: getstatic ginga/zip/VectorZipper.const__51 : Lclojure/lang/Var;
    //   378: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   381: checkcast clojure/lang/IFn
    //   384: aload_0
    //   385: getfield subseqs : Ljava/lang/Object;
    //   388: aload_0
    //   389: getfield v : Ljava/lang/Object;
    //   392: aload_0
    //   393: getfield prev_i : Ljava/lang/Object;
    //   396: aload_0
    //   397: getfield v : Ljava/lang/Object;
    //   400: invokestatic count : (Ljava/lang/Object;)I
    //   403: invokestatic valueOf : (I)Ljava/lang/Integer;
    //   406: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   411: goto -> 419
    //   414: pop
    //   415: aload_0
    //   416: getfield v : Ljava/lang/Object;
    //   419: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   424: goto -> 493
    //   427: checkcast ginga/tree/Node
    //   430: aload_0
    //   431: getfield subseqs : Ljava/lang/Object;
    //   434: dup
    //   435: ifnull -> 483
    //   438: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   441: if_acmpeq -> 484
    //   444: getstatic ginga/zip/VectorZipper.const__51 : Lclojure/lang/Var;
    //   447: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   450: checkcast clojure/lang/IFn
    //   453: aload_0
    //   454: getfield subseqs : Ljava/lang/Object;
    //   457: aload_0
    //   458: getfield v : Ljava/lang/Object;
    //   461: aload_0
    //   462: getfield prev_i : Ljava/lang/Object;
    //   465: aload_0
    //   466: getfield v : Ljava/lang/Object;
    //   469: invokestatic count : (Ljava/lang/Object;)I
    //   472: invokestatic valueOf : (I)Ljava/lang/Integer;
    //   475: invokeinterface invoke : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   480: goto -> 488
    //   483: pop
    //   484: aload_0
    //   485: getfield v : Ljava/lang/Object;
    //   488: invokeinterface with_children : (Ljava/lang/Object;)Ljava/lang/Object;
    //   493: invokeinterface replace : (Ljava/lang/Object;)Ljava/lang/Object;
    //   498: areturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #249	-> 0
    //   #290	-> 5
    //   #290	-> 7
    //   #291	-> 18
    //   #291	-> 52
    //   #291	-> 52
    //   #291	-> 87
    //   #292	-> 134
    //   #293	-> 154
    //   #293	-> 173
    //   #293	-> 179
    //   #291	-> 192
    //   #292	-> 203
    //   #293	-> 223
    //   #293	-> 242
    //   #293	-> 248
    //   #291	-> 266
    //   #291	-> 279
    //   #291	-> 279
    //   #291	-> 314
    //   #292	-> 361
    //   #293	-> 381
    //   #293	-> 400
    //   #293	-> 406
    //   #291	-> 419
    //   #292	-> 430
    //   #293	-> 450
    //   #293	-> 469
    //   #293	-> 475
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   5	493	1	G__21154	Ljava/lang/Object;
    //   0	498	0	this	Lginga/zip/VectorZipper; }
  
  public Object replace_next(Object node) {
    if (Numbers.lt(this.i, RT.count(this.v))) {
      null;
    } else {
      throw (Throwable)new AssertionError(((IFn)const__26.getRawRoot()).invoke("Assert failed: ", ((IFn)const__45.getRawRoot()).invoke(const__47)));
    } 
    node = null;
    return new VectorZipper(((IFn)const__19.getRawRoot()).invoke(this.v, this.i, node), Numbers.inc(this.i), this.up, this.subseqs, this.prev_i);
  }
  
  public Object replace(Object node) {
    if (Numbers.lt(this.i, RT.count(this.v))) {
      null;
    } else {
      throw (Throwable)new AssertionError(((IFn)const__26.getRawRoot()).invoke("Assert failed: ", ((IFn)const__45.getRawRoot()).invoke(const__46)));
    } 
    node = null;
    return new VectorZipper(((IFn)const__19.getRawRoot()).invoke(this.v, this.i, node), this.i, this.up, this.subseqs, this.prev_i);
  }
  
  public Object prev_node() { // Byte code:
    //   0: aload_0
    //   1: getfield subseqs : Ljava/lang/Object;
    //   4: dup
    //   5: ifnull -> 114
    //   8: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   11: if_acmpeq -> 115
    //   14: aload_0
    //   15: dup
    //   16: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   19: getstatic ginga/zip/VectorZipper.__cached_class__4 : Ljava/lang/Class;
    //   22: if_acmpeq -> 39
    //   25: dup
    //   26: instanceof ginga/zip/AsZipper
    //   29: ifne -> 54
    //   32: dup
    //   33: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   36: putstatic ginga/zip/VectorZipper.__cached_class__4 : Ljava/lang/Class;
    //   39: getstatic ginga/zip/VectorZipper.const__40 : Lclojure/lang/Var;
    //   42: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   45: swap
    //   46: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   51: goto -> 62
    //   54: checkcast ginga/zip/AsZipper
    //   57: invokeinterface as_zipper : ()Ljava/lang/Object;
    //   62: dup
    //   63: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   66: getstatic ginga/zip/VectorZipper.__cached_class__5 : Ljava/lang/Class;
    //   69: if_acmpeq -> 86
    //   72: dup
    //   73: instanceof ginga/zip/Backtrack
    //   76: ifne -> 103
    //   79: dup
    //   80: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   83: putstatic ginga/zip/VectorZipper.__cached_class__5 : Ljava/lang/Class;
    //   86: getstatic ginga/zip/VectorZipper.const__44 : Lclojure/lang/Var;
    //   89: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   92: swap
    //   93: aconst_null
    //   94: astore_0
    //   95: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   100: goto -> 111
    //   103: checkcast ginga/zip/Backtrack
    //   106: invokeinterface prev_node : ()Ljava/lang/Object;
    //   111: goto -> 146
    //   114: pop
    //   115: aload_0
    //   116: getfield i : Ljava/lang/Object;
    //   119: invokestatic isPos : (Ljava/lang/Object;)Z
    //   122: ifeq -> 145
    //   125: aload_0
    //   126: getfield v : Ljava/lang/Object;
    //   129: aload_0
    //   130: getfield i : Ljava/lang/Object;
    //   133: invokestatic dec : (Ljava/lang/Object;)Ljava/lang/Number;
    //   136: aconst_null
    //   137: astore_0
    //   138: invokestatic get : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   141: goto -> 146
    //   144: athrow
    //   145: aconst_null
    //   146: areturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #249	-> 0
    //   #277	-> 0
    //   #278	-> 14
    //   #278	-> 14
    //   #278	-> 46
    //   #278	-> 93
    //   #279	-> 115
    //   #279	-> 119
    //   #280	-> 133
    //   #280	-> 136
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   0	146	0	this	Lginga/zip/VectorZipper; }
  
  public Object prev() { // Byte code:
    //   0: aload_0
    //   1: getfield subseqs : Ljava/lang/Object;
    //   4: dup
    //   5: ifnull -> 114
    //   8: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   11: if_acmpeq -> 115
    //   14: aload_0
    //   15: dup
    //   16: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   19: getstatic ginga/zip/VectorZipper.__cached_class__2 : Ljava/lang/Class;
    //   22: if_acmpeq -> 39
    //   25: dup
    //   26: instanceof ginga/zip/AsZipper
    //   29: ifne -> 54
    //   32: dup
    //   33: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   36: putstatic ginga/zip/VectorZipper.__cached_class__2 : Ljava/lang/Class;
    //   39: getstatic ginga/zip/VectorZipper.const__40 : Lclojure/lang/Var;
    //   42: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   45: swap
    //   46: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   51: goto -> 62
    //   54: checkcast ginga/zip/AsZipper
    //   57: invokeinterface as_zipper : ()Ljava/lang/Object;
    //   62: dup
    //   63: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   66: getstatic ginga/zip/VectorZipper.__cached_class__3 : Ljava/lang/Class;
    //   69: if_acmpeq -> 86
    //   72: dup
    //   73: instanceof ginga/zip/Backtrack
    //   76: ifne -> 103
    //   79: dup
    //   80: invokestatic classOf : (Ljava/lang/Object;)Ljava/lang/Class;
    //   83: putstatic ginga/zip/VectorZipper.__cached_class__3 : Ljava/lang/Class;
    //   86: getstatic ginga/zip/VectorZipper.const__41 : Lclojure/lang/Var;
    //   89: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   92: swap
    //   93: aconst_null
    //   94: astore_0
    //   95: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   100: goto -> 111
    //   103: checkcast ginga/zip/Backtrack
    //   106: invokeinterface prev : ()Ljava/lang/Object;
    //   111: goto -> 160
    //   114: pop
    //   115: aload_0
    //   116: getfield i : Ljava/lang/Object;
    //   119: invokestatic isPos : (Ljava/lang/Object;)Z
    //   122: ifeq -> 159
    //   125: new ginga/zip/VectorZipper
    //   128: dup
    //   129: aload_0
    //   130: getfield v : Ljava/lang/Object;
    //   133: aload_0
    //   134: getfield i : Ljava/lang/Object;
    //   137: invokestatic dec : (Ljava/lang/Object;)Ljava/lang/Number;
    //   140: aload_0
    //   141: getfield up : Ljava/lang/Object;
    //   144: aload_0
    //   145: getfield subseqs : Ljava/lang/Object;
    //   148: aload_0
    //   149: getfield prev_i : Ljava/lang/Object;
    //   152: invokespecial <init> : (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
    //   155: goto -> 160
    //   158: athrow
    //   159: aconst_null
    //   160: areturn
    // Line number table:
    //   Java source line number -> byte code offset
    //   #249	-> 0
    //   #272	-> 0
    //   #273	-> 14
    //   #273	-> 14
    //   #273	-> 46
    //   #273	-> 93
    //   #274	-> 115
    //   #274	-> 119
    //   #275	-> 137
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   0	160	0	this	Lginga/zip/VectorZipper; }
  
  public Object traverse() { if (Util.classOf(this) != __cached_class__0)
      if (!(this instanceof AsZipper)) {
        __cached_class__0 = Util.classOf(this);
      } else if (Util.classOf(((AsZipper)this).as_zipper()) != __cached_class__1) {
        if (!(((AsZipper)this).as_zipper() instanceof Traverse)) {
          __cached_class__1 = Util.classOf(((AsZipper)this).as_zipper());
        } else {
          return ((Traverse)((AsZipper)this).as_zipper()).traverse();
        } 
      }   }
  
  public Object end_QMARK_() { this = null;
    return Util.equiv(this.i, RT.count(this.v)) ? Boolean.TRUE : Boolean.FALSE; }
  
  public Object top_QMARK_() { this = null;
    return Util.identical(this.up, null) ? Boolean.TRUE : Boolean.FALSE; }
  
  public Object node() { this = null;
    return Numbers.lt(this.i, RT.count(this.v)) ? RT.get(this.v, this.i) : null; }
  
  public Object discard() { return this.up; }
  
  public Object end() {
    return new VectorZipper(this.v, Integer.valueOf(RT.count(this.v)), this.up, this.subseqs, this.prev_i);
  }
  
  public Object down() { this = null;
    return ((IFn)const__37.getRawRoot()).invoke(this, RT.get(this.v, this.i)); }
  
  public Object next() {
    return Numbers.lt(this.i, RT.count(this.v)) ? new VectorZipper(this.v, Numbers.inc(this.i), this.up, this.subseqs, this.prev_i) : null;
  }
  
  public int hasheq() {
    int hq__7768__auto__21158 = this.__hasheq, h__7769__auto__21157 = RT.intCast(0x443EDFE0L ^ APersistentMap.mapHasheq((IPersistentMap)this));
    this.__hasheq = h__7769__auto__21157;
    return (hq__7768__auto__21158 == 0L) ? h__7769__auto__21157 : hq__7768__auto__21158;
  }
  
  public int hashCode() {
    int hash__7771__auto__21160 = this.__hash, h__7772__auto__21159 = APersistentMap.mapHash((IPersistentMap)this);
    this.__hash = h__7772__auto__21159;
    return (hash__7771__auto__21160 == 0L) ? h__7772__auto__21159 : hash__7771__auto__21160;
  }
  
  public boolean equals(Object G__21138) { G__21138 = null;
    return APersistentMap.mapEquals((IPersistentMap)this, G__21138); }
  
  public IPersistentMap meta() { return (IPersistentMap)this.__meta; }
  
  public IObj withMeta(IPersistentMap G__21138) { G__21138 = null;
    return (IObj)new VectorZipper(this.v, this.i, this.up, this.subseqs, this.prev_i, G__21138, this.__extmap, this.__hash, this.__hasheq); }
  
  public Object valAt(Object k__7777__auto__) { k__7777__auto__ = null;
    return ((ILookup)this).valAt(k__7777__auto__, null); }
  
  public Object valAt(Object k__7779__auto__, Object else__7780__auto__) {
    Object G__21153 = k__7779__auto__;
    switch (Util.hash(G__21153) >> 9 & 0x7) {
      case 0:
        if (G__21153 == const__8);
        break;
      case 2:
        if (G__21153 == const__9);
        break;
      case 3:
        if (G__21153 == const__10);
        break;
      case 4:
        if (G__21153 == const__12);
        break;
      case 7:
        if (G__21153 == const__11);
        break;
    } 
    k__7779__auto__ = null;
    else__7780__auto__ = null;
    this = null;
    return RT.get(this.__extmap, k__7779__auto__, else__7780__auto__);
  }
  
  public ILookupThunk getLookupThunk(Keyword k__7782__auto__) {
    Object gclass = ((IFn)const__24.getRawRoot()).invoke(this), G__21142 = k__7782__auto__ = null;
    switch (Util.hash(G__21142) >> 9 & 0x7) {
      case 0:
        if (G__21142 == const__8)
          gclass = null; 
        break;
      case 2:
        if (G__21142 == const__9)
          gclass = null; 
        break;
      case 3:
        if (G__21142 == const__10)
          gclass = null; 
        break;
      case 4:
        if (G__21142 == const__12)
          gclass = null; 
        break;
      case 7:
        if (G__21142 == const__11)
          gclass = null; 
        break;
    } 
    return (ILookupThunk)null;
  }
  
  public int count() { return RT.intCast(Numbers.add(5L, RT.count(this.__extmap))); }
  
  public IPersistentCollection empty() { throw (Throwable)new UnsupportedOperationException((String)((IFn)const__26.getRawRoot()).invoke("Can't create empty: ", "ginga.zip.VectorZipper")); }
  
  public IPersistentCollection cons(Object e__7786__auto__) { e__7786__auto__ = null;
    this = null;
    return (IPersistentCollection)((IFn)const__25).invoke(this, e__7786__auto__); }
  
  public boolean equiv(Object G__21138) {
    boolean or__5516__auto__21166 = Util.identical(this, G__21138);
    Object G__21138 = G__21138 = null;
    boolean and__5514__auto__21165 = Util.equiv(this.v, ((VectorZipper)G__21138).v), and__5514__auto__21164 = Util.equiv(this.i, ((VectorZipper)G__21138).i), and__5514__auto__21163 = Util.equiv(this.up, ((VectorZipper)G__21138).up), and__5514__auto__21162 = Util.equiv(this.subseqs, ((VectorZipper)G__21138).subseqs), and__5514__auto__21161 = Util.equiv(this.prev_i, ((VectorZipper)G__21138).prev_i);
    G__21138 = null;
    return RT.booleanCast(or__5516__auto__21166 ? (or__5516__auto__21166 ? Boolean.TRUE : Boolean.FALSE) : (Util.identical(((IFn)const__24.getRawRoot()).invoke(this), ((IFn)const__24.getRawRoot()).invoke(G__21138)) ? (and__5514__auto__21165 ? (and__5514__auto__21164 ? (and__5514__auto__21163 ? (and__5514__auto__21162 ? (and__5514__auto__21161 ? (Util.equiv(this.__extmap, ((VectorZipper)G__21138).__extmap) ? Boolean.TRUE : Boolean.FALSE) : (and__5514__auto__21161 ? Boolean.TRUE : Boolean.FALSE)) : (and__5514__auto__21162 ? Boolean.TRUE : Boolean.FALSE)) : (and__5514__auto__21163 ? Boolean.TRUE : Boolean.FALSE)) : (and__5514__auto__21164 ? Boolean.TRUE : Boolean.FALSE)) : (and__5514__auto__21165 ? Boolean.TRUE : Boolean.FALSE)) : null));
  }
  
  public boolean containsKey(Object k__7789__auto__) { k__7789__auto__ = null;
    this = null;
    return ((Boolean)((IFn)const__23.getRawRoot()).invoke(Util.identical(this, ((ILookup)this).valAt(k__7789__auto__, this)) ? Boolean.TRUE : Boolean.FALSE)).booleanValue(); }
  
  public IMapEntry entryAt(Object k__7791__auto__) {
    Object v__7792__auto__21167 = ((ILookup)this).valAt(k__7791__auto__, this);
    k__7791__auto__ = null;
    v__7792__auto__21167 = null;
    this = null;
    return (IMapEntry)(Util.identical(this, v__7792__auto__21167) ? null : MapEntry.create(k__7791__auto__, v__7792__auto__21167));
  }
  
  public ISeq seq() { this = null;
    return (ISeq)((IFn)const__21.getRawRoot()).invoke(((IFn)const__22.getRawRoot()).invoke(Tuple.create(MapEntry.create(const__8, this.v), MapEntry.create(const__11, this.i), MapEntry.create(const__9, this.up), MapEntry.create(const__10, this.subseqs), MapEntry.create(const__12, this.prev_i)), this.__extmap)); }
  
  public Iterator iterator() { return (Iterator)new RecordIterator((ILookup)this, (IPersistentVector)const__20, (Iterator)RT.iter(this.__extmap)); }
  
  public IPersistentMap assoc(Object k__7796__auto__, Object G__21138) {
    Object pred__21140 = const__18.getRawRoot(), expr__21141 = k__7796__auto__;
    if (((IFn)pred__21140).invoke(const__8, expr__21141) != null) {
      if (((IFn)pred__21140).invoke(const__8, expr__21141) != Boolean.FALSE)
        G__21138 = null; 
    } else {
      ((IFn)pred__21140).invoke(const__8, expr__21141);
    } 
    if (((IFn)pred__21140).invoke(const__11, expr__21141) != null) {
      if (((IFn)pred__21140).invoke(const__11, expr__21141) != Boolean.FALSE)
        G__21138 = null; 
    } else {
      ((IFn)pred__21140).invoke(const__11, expr__21141);
    } 
    if (((IFn)pred__21140).invoke(const__9, expr__21141) != null) {
      if (((IFn)pred__21140).invoke(const__9, expr__21141) != Boolean.FALSE)
        G__21138 = null; 
    } else {
      ((IFn)pred__21140).invoke(const__9, expr__21141);
    } 
    if (((IFn)pred__21140).invoke(const__10, expr__21141) != null) {
      if (((IFn)pred__21140).invoke(const__10, expr__21141) != Boolean.FALSE)
        G__21138 = null; 
    } else {
      ((IFn)pred__21140).invoke(const__10, expr__21141);
    } 
    pred__21140 = null;
    expr__21141 = null;
    if (((IFn)pred__21140).invoke(const__12, expr__21141) != null) {
      if (((IFn)pred__21140).invoke(const__12, expr__21141) != Boolean.FALSE)
        G__21138 = null; 
    } else {
      ((IFn)pred__21140).invoke(const__12, expr__21141);
    } 
    k__7796__auto__ = null;
    G__21138 = null;
    return (IPersistentMap)new VectorZipper(this.v, this.i, this.up, this.subseqs, this.prev_i, this.__meta, ((IFn)const__19.getRawRoot()).invoke(this.__extmap, k__7796__auto__, G__21138));
  }
  
  public IPersistentMap without(Object k__7798__auto__) { if (((IFn)const__7.getRawRoot()).invoke(const__13, k__7798__auto__) != null) {
      if (((IFn)const__7.getRawRoot()).invoke(const__13, k__7798__auto__) != Boolean.FALSE) {
        k__7798__auto__ = null;
        this = null;
      } 
    } else {
      ((IFn)const__7.getRawRoot()).invoke(const__13, k__7798__auto__);
    } 
    k__7798__auto__ = null;
    return (IPersistentMap)new VectorZipper(this.v, this.i, this.up, this.subseqs, this.prev_i, this.__meta, ((IFn)const__17.getRawRoot()).invoke(((IFn)const__14.getRawRoot()).invoke(this.__extmap, k__7798__auto__))); }
  
  public int size() { this = null;
    return ((Counted)this).count(); }
  
  public boolean isEmpty() { return Util.equiv(0L, ((Counted)this).count()); }
  
  public boolean containsValue(Object v__7802__auto__) { v__7802__auto__ = null;
    return RT.booleanCast(((IFn)const__4.getRawRoot()).invoke(RT.set(new Object[] { v__7802__auto__ }, ), ((IFn)const__1.getRawRoot()).invoke(this))); }
  
  public Object get(Object k__7804__auto__) { k__7804__auto__ = null;
    return ((ILookup)this).valAt(k__7804__auto__); }
  
  public Object put(Object k__7806__auto__, Object v__7807__auto__) { throw (Throwable)new UnsupportedOperationException(); }
  
  public Object remove(Object k__7809__auto__) { throw (Throwable)new UnsupportedOperationException(); }
  
  public void putAll(Map m__7811__auto__) { throw (Throwable)new UnsupportedOperationException(); }
  
  public void clear() { throw (Throwable)new UnsupportedOperationException(); }
  
  public Set keySet() { this = null;
    return (Set)((IFn)const__0.getRawRoot()).invoke(((IFn)const__2.getRawRoot()).invoke(this)); }
  
  public Collection values() { this = null;
    return (Collection)((IFn)const__1.getRawRoot()).invoke(this); }
  
  public Set entrySet() { this = null;
    return (Set)((IFn)const__0.getRawRoot()).invoke(this); }
}
