package ginga;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class crypto_utils__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__12;
  
  public static final Var const__13;
  
  public static final AFn const__16;
  
  public static final Var const__17;
  
  public static final AFn const__20;
  
  public static final Var const__21;
  
  public static final AFn const__24;
  
  public static final Var const__25;
  
  public static final AFn const__28;
  
  public static final Var const__29;
  
  public static final AFn const__32;
  
  public static final Var const__33;
  
  public static final AFn const__36;
  
  public static final Var const__37;
  
  public static final AFn const__40;
  
  public static void load() { LockingTransaction.runInTransaction((Callable)new crypto_utils.fn__18427());
    const__3.setMeta((IPersistentMap)const__12);
    const__3.bindRoot(new crypto_utils.generate_keys());
    const__13.setMeta((IPersistentMap)const__16);
    const__13.bindRoot(new crypto_utils.decode_base64_keys());
    const__17.setMeta((IPersistentMap)const__20);
    const__17.bindRoot(new crypto_utils.x509__GT_rsa_pub_key());
    const__21.setMeta((IPersistentMap)const__24);
    const__21.bindRoot(new crypto_utils.pkcs8__GT_rsa_priv_key());
    const__25.setMeta((IPersistentMap)const__28);
    const__25.bindRoot(new crypto_utils.decode_deserialize_rsa_keys());
    const__29.setMeta((IPersistentMap)const__32);
    const__29.bindRoot(new crypto_utils.generate_aes_key_from_passphrase());
    const__33.setMeta((IPersistentMap)const__36);
    const__33.bindRoot(new crypto_utils.encrypt_aes256_gcm_96_iv_prefix());
    const__37.setMeta((IPersistentMap)const__40);
    const__37.bindRoot(new crypto_utils.decrypt_aes256_gcm_96_iv_prefix()); }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "ginga.crypto-utils");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("ginga.crypto-utils", "generate-keys");
    const__12 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "doc"), "Generate base64 encoded 3072bit RSAKey pairs", RT.keyword(null, "line"), Integer.valueOf(15), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/crypto_utils.clj" });
    const__13 = (Var)RT.var("ginga.crypto-utils", "decode-base64-keys");
    const__16 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "base64-keys")) })), RT.keyword(null, "doc"), "Decodes base64 encoded keypair into a byte array pair", RT.keyword(null, "line"), Integer.valueOf(29), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/crypto_utils.clj" });
    const__17 = (Var)RT.var("ginga.crypto-utils", "x509->rsa-pub-key");
    const__20 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x509-bytes")) })), RT.keyword(null, "doc"), "Converts a X.509 encoded public RSA key into a RSAPublicKey object", RT.keyword(null, "line"), Integer.valueOf(37), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/crypto_utils.clj" });
    const__21 = (Var)RT.var("ginga.crypto-utils", "pkcs8->rsa-priv-key");
    const__24 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pkcs8-bytes")) })), RT.keyword(null, "doc"), "Converts a PKCS#8 encoded private RSA key into a RSAPrivateKey object", RT.keyword(null, "line"), Integer.valueOf(46), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/crypto_utils.clj" });
    const__25 = (Var)RT.var("ginga.crypto-utils", "decode-deserialize-rsa-keys");
    const__28 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "base64-keys")) })), RT.keyword(null, "doc"), "Decodes and deserializes keypair into an RSAKey pair", RT.keyword(null, "line"), Integer.valueOf(55), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/crypto_utils.clj" });
    const__29 = (Var)RT.var("ginga.crypto-utils", "generate-aes-key-from-passphrase");
    const__32 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "passphrase"), Symbol.intern(null, "salt"), Symbol.intern(null, "iterations"), Symbol.intern(null, "key-size")) })), RT.keyword(null, "line"), Integer.valueOf(64), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/crypto_utils.clj" });
    const__33 = (Var)RT.var("ginga.crypto-utils", "encrypt-aes256-gcm-96-iv-prefix");
    const__36 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "plaintext"), Symbol.intern(null, "priv-key")) })), RT.keyword(null, "line"), Integer.valueOf(70), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/crypto_utils.clj" });
    const__37 = (Var)RT.var("ginga.crypto-utils", "decrypt-aes256-gcm-96-iv-prefix");
    const__40 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ciphertext"), Symbol.intern(null, "priv-key")) })), RT.keyword(null, "line"), Integer.valueOf(84), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/crypto_utils.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("ginga.crypto_utils__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
