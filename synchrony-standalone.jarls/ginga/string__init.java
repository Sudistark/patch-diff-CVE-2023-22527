package ginga;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class string__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__11;
  
  public static final Var const__12;
  
  public static final AFn const__15;
  
  public static final Var const__16;
  
  public static final AFn const__20;
  
  public static final Var const__21;
  
  public static final AFn const__24;
  
  public static final Var const__25;
  
  public static final AFn const__28;
  
  public static final Var const__29;
  
  public static final AFn const__32;
  
  public static final Var const__33;
  
  public static final AFn const__36;
  
  public static final Var const__37;
  
  public static final AFn const__40;
  
  public static final Var const__41;
  
  public static final AFn const__44;
  
  public static final Var const__45;
  
  public static final AFn const__48;
  
  public static final Var const__49;
  
  public static final AFn const__52;
  
  public static void load() { LockingTransaction.runInTransaction((Callable)new string.fn__8158());
    const__3.setMeta((IPersistentMap)const__11);
    const__3.bindRoot(new string.ensure_ends_with());
    const__12.setMeta((IPersistentMap)const__15);
    const__12.bindRoot(new string.ensure_begins_with());
    const__16.setMeta((IPersistentMap)const__20);
    const__16.bindRoot(new string.lowercase_first());
    const__21.setMeta((IPersistentMap)const__24);
    const__21.bindRoot(new string.dashes_to_camel_case());
    const__25.setMeta((IPersistentMap)const__28);
    const__25.bindRoot(new string.dashes_to_mixed_case());
    const__29.setMeta((IPersistentMap)const__32);
    const__29.bindRoot(new string.camel_case_to_dashes());
    const__33.setMeta((IPersistentMap)const__36);
    const__33.bindRoot(new string.index_of());
    const__37.setMeta((IPersistentMap)const__40);
    const__37.bindRoot(new string.last_index_of());
    const__41.setMeta((IPersistentMap)const__44);
    const__41.bindRoot(new string.starts_with());
    const__45.setMeta((IPersistentMap)const__48);
    const__45.bindRoot(new string.to_lower_case());
    const__49.setMeta((IPersistentMap)const__52);
    const__49.bindRoot(new string.to_upper_case()); }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "ginga.string");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("ginga.string", "ensure-ends-with");
    const__11 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "path"), Symbol.intern(null, "suffix")) })), RT.keyword(null, "line"), Integer.valueOf(4), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/string.cljc" });
    const__12 = (Var)RT.var("ginga.string", "ensure-begins-with");
    const__15 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "path"), Symbol.intern(null, "prefix")) })), RT.keyword(null, "line"), Integer.valueOf(9), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/string.cljc" });
    const__16 = (Var)RT.var("ginga.string", "lowercase-first");
    const__20 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "s")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") }))) })), RT.keyword(null, "doc"), "Lower-cases the first character in the string.", RT.keyword(null, "line"), Integer.valueOf(15), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/string.cljc" });
    const__21 = (Var)RT.var("ginga.string", "dashes-to-camel-case");
    const__24 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "dashed")) })), RT.keyword(null, "doc"), "\"some-string\" -> \"SomeString\"", RT.keyword(null, "line"), Integer.valueOf(23), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/string.cljc" });
    const__25 = (Var)RT.var("ginga.string", "dashes-to-mixed-case");
    const__28 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "dashed")) })), RT.keyword(null, "doc"), "\"some-string\" -> \"someString\"", RT.keyword(null, "line"), Integer.valueOf(28), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/string.cljc" });
    const__29 = (Var)RT.var("ginga.string", "camel-case-to-dashes");
    const__32 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "camel-cased")) })), RT.keyword(null, "doc"), "\"SomeString\" -> \"some-string\"", RT.keyword(null, "line"), Integer.valueOf(33), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/string.cljc" });
    const__33 = (Var)RT.var("ginga.string", "index-of");
    const__36 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "s")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") })), Symbol.intern(null, "chr")) })), RT.keyword(null, "line"), Integer.valueOf(40), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/string.cljc" });
    const__37 = (Var)RT.var("ginga.string", "last-index-of");
    const__40 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "s")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") })), Symbol.intern(null, "chr")) })), RT.keyword(null, "line"), Integer.valueOf(43), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/string.cljc" });
    const__41 = (Var)RT.var("ginga.string", "starts-with");
    const__44 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "s")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") })), Symbol.intern(null, "prefix")) })), RT.keyword(null, "line"), Integer.valueOf(46), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/string.cljc" });
    const__45 = (Var)RT.var("ginga.string", "to-lower-case");
    const__48 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "s")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") }))) })), RT.keyword(null, "line"), Integer.valueOf(49), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/string.cljc" });
    const__49 = (Var)RT.var("ginga.string", "to-upper-case");
    const__52 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "s")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") }))) })), RT.keyword(null, "line"), Integer.valueOf(52), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/string.cljc" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("ginga.string__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
