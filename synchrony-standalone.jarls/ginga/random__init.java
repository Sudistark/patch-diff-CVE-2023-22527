package ginga;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class random__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__11;
  
  public static final Var const__12;
  
  public static final AFn const__15;
  
  public static final Var const__16;
  
  public static final AFn const__19;
  
  public static final Var const__20;
  
  public static final AFn const__24;
  
  public static final Var const__25;
  
  public static final AFn const__28;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new random.fn__20592());
    const__3.setMeta((IPersistentMap)const__11);
    const__3.bindRoot(new random.get_secure_random());
    const__12.setMeta((IPersistentMap)const__15);
    const__12


















      
      .bindRoot(((IFn)const__3.getRawRoot()).invoke());
    const__16.setMeta((IPersistentMap)const__19);
    const__16.bindRoot(new random.make_id());
    const__20.setMeta((IPersistentMap)const__24);
    const__20.bindRoot(new random.id());
    const__25.setMeta((IPersistentMap)const__28);
    const__25.bindRoot(new random.deterministic_id_fn());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "ginga.random");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("ginga.random", "get-secure-random");
    const__11 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(15), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/random.clj" });
    const__12 = (Var)RT.var("ginga.random", "secure-random");
    const__15 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(20), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/random.clj" });
    const__16 = (Var)RT.var("ginga.random", "make-id");
    const__19 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "random")), Tuple.create(Symbol.intern(null, "random"), Symbol.intern(null, "size")) })), RT.keyword(null, "line"), Integer.valueOf(23), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/random.clj" });
    const__20 = (Var)RT.var("ginga.random", "id");
    const__24 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(), Tuple.create(Symbol.intern(null, "size")) })), RT.keyword(null, "doc"), "Generates a non-replayable secure random alpha numeric string\n  usable as session id or unpredictable object id.", RT.keyword(null, "line"), Integer.valueOf(32), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/random.clj" });
    const__25 = (Var)RT.var("ginga.random", "deterministic-id-fn");
    const__28 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "seed")) })), RT.keyword(null, "line"), Integer.valueOf(41), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ginga/random.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("ginga.random__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
