package hickory;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class core__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Object const__3;
  
  public static final Var const__4;
  
  public static final Var const__5;
  
  public static final Var const__6;
  
  public static final Keyword const__7;
  
  public static final Var const__8;
  
  public static final ISeq const__9;
  
  public static final Var const__10;
  
  public static final Var const__11;
  
  public static final AFn const__15;
  
  public static final Keyword const__16;
  
  public static final AFn const__17;
  
  public static final Keyword const__18;
  
  public static final Keyword const__19;
  
  public static final Keyword const__20;
  
  public static final AFn const__21;
  
  public static final Keyword const__22;
  
  public static final Var const__23;
  
  public static final Var const__24;
  
  public static final Var const__25;
  
  public static final AFn const__26;
  
  public static final AFn const__27;
  
  public static final Keyword const__28;
  
  public static final Var const__29;
  
  public static final AFn const__30;
  
  public static final Object const__31;
  
  public static final Var const__32;
  
  public static final ISeq const__33;
  
  public static final AFn const__35;
  
  public static final AFn const__36;
  
  public static final Keyword const__37;
  
  public static final AFn const__38;
  
  public static final AFn const__39;
  
  public static final AFn const__40;
  
  public static final AFn const__41;
  
  public static final Var const__42;
  
  public static final Object const__43;
  
  public static final Object const__44;
  
  public static final Object const__45;
  
  public static final Object const__46;
  
  public static final Object const__47;
  
  public static final Object const__48;
  
  public static final Object const__49;
  
  public static final Object const__50;
  
  public static final Object const__51;
  
  public static final Var const__52;
  
  public static final AFn const__60;
  
  public static final Var const__61;
  
  public static final AFn const__64;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new core.fn__59058());
    const__52.setMeta((IPersistentMap)const__60);
    const__52.bindRoot(new core.parse());
    const__61.setMeta((IPersistentMap)const__64);
    const__61.bindRoot(new core.parse_fragment());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "hickory.core");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = RT.classForName("hickory.core.HiccupRepresentable");
    const__4 = (Var)RT.var("clojure.core", "alter-meta!");
    const__5 = (Var)RT.var("hickory.core", "HiccupRepresentable");
    const__6 = (Var)RT.var("clojure.core", "assoc");
    const__7 = (Keyword)RT.keyword(null, "doc");
    const__8 = (Var)RT.var("clojure.core", "assert-same-protocol");
    const__9 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "as-hiccup")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Converts the node given into a hiccup-format data structure. The\n     node must have an implementation of the HiccupRepresentable\n     protocol; nodes created by parse or parse-fragment already do.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })) }));
    const__10 = (Var)RT.var("clojure.core", "alter-var-root");
    const__11 = (Var)RT.var("clojure.core", "merge");
    const__15 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "hickory.core.HiccupRepresentable"), RT.keyword(null, "on-interface"), RT.classForName("hickory.core.HiccupRepresentable"), RT.keyword(null, "doc"), "Objects that can be represented as Hiccup nodes implement this protocol in\n   order to make the conversion." });
    const__16 = (Keyword)RT.keyword(null, "sigs");
    const__17 = (AFn)RT.map(new Object[] { RT.keyword(null, "as-hiccup"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "as-hiccup")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Converts the node given into a hiccup-format data structure. The\n     node must have an implementation of the HiccupRepresentable\n     protocol; nodes created by parse or parse-fragment already do.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })), RT.keyword(null, "doc"), "Converts the node given into a hiccup-format data structure. The\n     node must have an implementation of the HiccupRepresentable\n     protocol; nodes created by parse or parse-fragment already do." }) });
    const__18 = (Keyword)RT.keyword(null, "var");
    const__19 = (Keyword)RT.keyword(null, "method-map");
    const__20 = (Keyword)RT.keyword(null, "as-hiccup");
    const__21 = (AFn)RT.map(new Object[] { RT.keyword(null, "as-hiccup"), RT.keyword(null, "as-hiccup") });
    const__22 = (Keyword)RT.keyword(null, "method-builders");
    const__23 = (Var)RT.var("clojure.core", "intern");
    const__24 = (Var)RT.var("clojure.core", "*ns*");
    const__25 = (Var)RT.var("clojure.core", "with-meta");
    const__26 = (AFn)((IObj)Symbol.intern(null, "as-hiccup")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Converts the node given into a hiccup-format data structure. The\n     node must have an implementation of the HiccupRepresentable\n     protocol; nodes created by parse or parse-fragment already do.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) }));
    const__27 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "as-hiccup")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Converts the node given into a hiccup-format data structure. The\n     node must have an implementation of the HiccupRepresentable\n     protocol; nodes created by parse or parse-fragment already do.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })), RT.keyword(null, "doc"), "Converts the node given into a hiccup-format data structure. The\n     node must have an implementation of the HiccupRepresentable\n     protocol; nodes created by parse or parse-fragment already do." });
    const__28 = (Keyword)RT.keyword(null, "protocol");
    const__29 = (Var)RT.var("clojure.core", "-reset-methods");
    const__30 = (AFn)Symbol.intern(null, "HiccupRepresentable");
    const__31 = RT.classForName("hickory.core.HickoryRepresentable");
    const__32 = (Var)RT.var("hickory.core", "HickoryRepresentable");
    const__33 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "as-hickory")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Converts the node given into a hickory-format data structure. The\n     node must have an implementation of the HickoryRepresentable protocol;\n     nodes created by parse or parse-fragment already do.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })) }));
    const__35 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "hickory.core.HickoryRepresentable"), RT.keyword(null, "on-interface"), RT.classForName("hickory.core.HickoryRepresentable"), RT.keyword(null, "doc"), "Objects that can be represented as HTML DOM node maps, similar to\n   clojure.xml, implement this protocol to make the conversion.\n\n   Each DOM node will be a map or string (for Text/CDATASections). Nodes that\n   are maps have the appropriate subset of the keys\n\n     :type     - [:comment, :document, :document-type, :element]\n     :tag      - node's tag, check :type to see if applicable\n     :attrs    - node's attributes as a map, check :type to see if applicable\n     :content  - node's child nodes, in a vector, check :type to see if\n                 applicable" });
    const__36 = (AFn)RT.map(new Object[] { RT.keyword(null, "as-hickory"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "as-hickory")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Converts the node given into a hickory-format data structure. The\n     node must have an implementation of the HickoryRepresentable protocol;\n     nodes created by parse or parse-fragment already do.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })), RT.keyword(null, "doc"), "Converts the node given into a hickory-format data structure. The\n     node must have an implementation of the HickoryRepresentable protocol;\n     nodes created by parse or parse-fragment already do." }) });
    const__37 = (Keyword)RT.keyword(null, "as-hickory");
    const__38 = (AFn)RT.map(new Object[] { RT.keyword(null, "as-hickory"), RT.keyword(null, "as-hickory") });
    const__39 = (AFn)((IObj)Symbol.intern(null, "as-hickory")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Converts the node given into a hickory-format data structure. The\n     node must have an implementation of the HickoryRepresentable protocol;\n     nodes created by parse or parse-fragment already do.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) }));
    const__40 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "as-hickory")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Converts the node given into a hickory-format data structure. The\n     node must have an implementation of the HickoryRepresentable protocol;\n     nodes created by parse or parse-fragment already do.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })), RT.keyword(null, "doc"), "Converts the node given into a hickory-format data structure. The\n     node must have an implementation of the HickoryRepresentable protocol;\n     nodes created by parse or parse-fragment already do." });
    const__41 = (AFn)Symbol.intern(null, "HickoryRepresentable");
    const__42 = (Var)RT.var("clojure.core", "extend");
    const__43 = RT.classForName("org.jsoup.nodes.Attributes");
    const__44 = RT.classForName("org.jsoup.nodes.DataNode");
    const__45 = RT.classForName("org.jsoup.nodes.Attribute");
    const__46 = RT.classForName("org.jsoup.nodes.Document");
    const__47 = RT.classForName("org.jsoup.nodes.Comment");
    const__48 = RT.classForName("org.jsoup.nodes.Element");
    const__49 = RT.classForName("org.jsoup.nodes.TextNode");
    const__50 = RT.classForName("org.jsoup.nodes.XmlDeclaration");
    const__51 = RT.classForName("org.jsoup.nodes.DocumentType");
    const__52 = (Var)RT.var("hickory.core", "parse");
    const__60 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })), RT.keyword(null, "doc"), "Parse an entire HTML document into a DOM structure that can be\n   used as input to as-hiccup or as-hickory.", RT.keyword(null, "line"), Integer.valueOf(111), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "hickory/core.clj" });
    const__61 = (Var)RT.var("hickory.core", "parse-fragment");
    const__64 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })), RT.keyword(null, "doc"), "Parse an HTML fragment (some group of tags that might be at home somewhere\n   in the tag hierarchy under <body>) into a list of DOM elements that can\n   each be passed as input to as-hiccup or as-hickory.", RT.keyword(null, "line"), Integer.valueOf(117), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "hickory/core.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("hickory.core__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
