package hickory;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentHashSet;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class utils__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__3;
  
  public static final AFn const__4;
  
  public static final Var const__5;
  
  public static final AFn const__11;
  
  public static final AFn const__28;
  
  public static final Var const__29;
  
  public static final AFn const__31;
  
  public static final AFn const__34;
  
  public static final Var const__35;
  
  public static final AFn const__39;
  
  public static final Var const__40;
  
  public static final AFn const__43;
  
  public static final Var const__44;
  
  public static final AFn const__47;
  
  public static final Var const__48;
  
  public static final AFn const__51;
  
  public static void load() { LockingTransaction.runInTransaction((Callable)new utils.fn__59052());
    const__5.setMeta((IPersistentMap)const__11);
    const__5.bindRoot(const__28);
    const__29.setMeta((IPersistentMap)const__31);
    const__29.bindRoot(const__34);
    const__35.setMeta((IPersistentMap)const__39);
    const__35.bindRoot(new utils.html_escape());
    const__40.setMeta((IPersistentMap)const__43);
    const__40.bindRoot(new utils.starts_with());
    const__44.setMeta((IPersistentMap)const__47);
    const__44.bindRoot(new utils.lower_case_keyword());
    const__48.setMeta((IPersistentMap)const__51);
    const__48.bindRoot(new utils.render_doctype()); }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "hickory.utils")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Miscellaneous utilities used internally." }));
    const__3 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Miscellaneous utilities used internally." });
    const__4 = (AFn)Symbol.intern(null, "clojure.core");
    const__5 = (Var)RT.var("hickory.utils", "void-element");
    const__11 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(12), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "hickory/utils.cljc", RT.keyword(null, "doc"), "Elements that don't have a meaningful <tag></tag> form." });
    const__28 = (AFn)PersistentHashSet.create(new Object[] { 
          RT.keyword(null, "hr"), RT.keyword(null, "meta"), RT.keyword(null, "wbr"), RT.keyword(null, "command"), RT.keyword(null, "source"), RT.keyword(null, "param"), RT.keyword(null, "link"), RT.keyword(null, "col"), RT.keyword(null, "area"), RT.keyword(null, "br"), 
          RT.keyword(null, "input"), RT.keyword(null, "base"), RT.keyword(null, "embed"), RT.keyword(null, "keygen"), RT.keyword(null, "img"), RT.keyword(null, "track") });
    const__29 = (Var)RT.var("hickory.utils", "unescapable-content");
    const__31 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(17), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "hickory/utils.cljc", RT.keyword(null, "doc"), "Elements whose content should never have html-escape codes." });
    const__34 = (AFn)PersistentHashSet.create(new Object[] { RT.keyword(null, "script"), RT.keyword(null, "style") });
    const__35 = (Var)RT.var("hickory.utils", "html-escape");
    const__39 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })), RT.keyword(null, "line"), Integer.valueOf(25), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "hickory/utils.cljc" });
    const__40 = (Var)RT.var("hickory.utils", "starts-with");
    const__43 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "s")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") })), ((IObj)Symbol.intern(null, "prefix")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") }))) })), RT.keyword(null, "line"), Integer.valueOf(30), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "hickory/utils.cljc" });
    const__44 = (Var)RT.var("hickory.utils", "lower-case-keyword");
    const__47 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })), RT.keyword(null, "doc"), "Converts its string argument into a lowercase keyword.", RT.keyword(null, "line"), Integer.valueOf(35), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "hickory/utils.cljc" });
    const__48 = (Var)RT.var("hickory.utils", "render-doctype");
    const__51 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "name"), Symbol.intern(null, "publicid"), Symbol.intern(null, "systemid")) })), RT.keyword(null, "doc"), "Returns a string containing the HTML source for the doctype with given args.\n   The second and third arguments can be nil or empty strings.", RT.keyword(null, "line"), Integer.valueOf(40), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "hickory/utils.cljc" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("hickory.utils__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
