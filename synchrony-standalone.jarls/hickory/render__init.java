package hickory;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class render__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__13;
  
  public static final Var const__14;
  
  public static final AFn const__17;
  
  public static final Var const__18;
  
  public static final AFn const__21;
  
  public static final Var const__22;
  
  public static final AFn const__25;
  
  public static final Var const__26;
  
  public static final AFn const__29;
  
  public static final Var const__30;
  
  public static final AFn const__33;
  
  public static final AFn const__36;
  
  public static void load() { LockingTransaction.runInTransaction((Callable)new render.fn__59167());
    const__3.setMeta((IPersistentMap)const__13);
    const__3.bindRoot(new render.render_hickory_attribute());
    const__14.setMeta((IPersistentMap)const__17);
    const__14.bindRoot(new render.hickory_to_html());
    const__18.setMeta((IPersistentMap)const__21);
    const__18.bindRoot(new render.render_hiccup_attrs());
    const__22.setMeta((IPersistentMap)const__25);
    const__26.setMeta((IPersistentMap)const__29);
    const__26.bindRoot(new render.render_hiccup_element());
    const__30.setMeta((IPersistentMap)const__33);
    const__30.bindRoot(new render.render_hiccup_form());
    const__22.setMeta((IPersistentMap)const__36);
    const__22.bindRoot(new render.hiccup_to_html()); }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "hickory.render");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("hickory.render", "render-hickory-attribute");
    const__13 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m")) })), RT.keyword(null, "doc"), "Given a map entry m, representing the attribute name and value, returns a\n   string representing that key/value pair as it would be rendered into HTML.", RT.keyword(null, "line"), Integer.valueOf(10), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "hickory/render.cljc" });
    const__14 = (Var)RT.var("hickory.render", "hickory-to-html");
    const__17 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "dom")) })), RT.keyword(null, "doc"), "Given a hickory HTML DOM map structure (as returned by as-hickory), returns a\n   string containing HTML it represents. Keep in mind this function is not super\n   fast or heavy-duty.\n\n   Note that it will NOT in general be the case that\n\n     (= my-html-src (hickory-to-html (as-hickory (parse my-html-src))))\n\n   as we do not keep any letter case or whitespace information, any\n   \"tag-soupy\" elements, attribute quote characters used, etc.", RT.keyword(null, "line"), Integer.valueOf(16), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "hickory/render.cljc" });
    const__18 = (Var)RT.var("hickory.render", "render-hiccup-attrs");
    const__21 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "attrs")) })), RT.keyword(null, "doc"), "Given a hiccup attribute map, returns a string containing the attributes\n   rendered as they should appear in an HTML tag, right after the tag (including\n   a leading space to separate from the tag, if any attributes present).", RT.keyword(null, "line"), Integer.valueOf(69), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "hickory/render.cljc" });
    const__22 = (Var)RT.var("hickory.render", "hiccup-to-html");
    const__25 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(92), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "hickory/render.cljc" });
    const__26 = (Var)RT.var("hickory.render", "render-hiccup-element");
    const__29 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "n-element")) })), RT.keyword(null, "doc"), "Given a normalized hiccup element (such as the output of\n   hickory.hiccup-utils/normalize-form; see this function's docstring\n   for more detailed definition of a normalized hiccup element), renders\n   it to HTML and returns it as a string.", RT.keyword(null, "line"), Integer.valueOf(93), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "hickory/render.cljc" });
    const__30 = (Var)RT.var("hickory.render", "render-hiccup-form");
    const__33 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "n-form")) })), RT.keyword(null, "doc"), "Given a normalized hiccup form (such as the output of\n   hickory.hiccup-utils/normalize-form; see this function's docstring\n   for more detailed definition of a normalized hiccup form), renders\n   it to HTML and returns it as a string.", RT.keyword(null, "line"), Integer.valueOf(106), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "hickory/render.cljc" });
    const__36 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "hiccup-forms")) })), RT.keyword(null, "doc"), "Given a sequence of hiccup forms (as returned by as-hiccup), returns a\n   string containing HTML it represents. Keep in mind this function is not super\n   fast or heavy-duty, and definitely not a replacement for dedicated hiccup\n   renderers, like hiccup itself, which *is* fast and heavy-duty.\n\n   Note that it will NOT in general be the case that\n\n     (= my-html-src (hiccup-to-html (as-hiccup (parse my-html-src))))\n\n   as we do not keep any letter case or whitespace information, any\n   \"tag-soupy\" elements, attribute quote characters used, etc. It will also\n   not generally be the case that this function's output will exactly match\n   hiccup's.", RT.keyword(null, "line"), Integer.valueOf(116), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "hickory/render.cljc" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("hickory.render__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
