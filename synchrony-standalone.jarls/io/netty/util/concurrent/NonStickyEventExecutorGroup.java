package io.netty.util.concurrent;

import io.netty.util.internal.ObjectUtil;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

public final class NonStickyEventExecutorGroup implements EventExecutorGroup {
  private final EventExecutorGroup group;
  
  private final int maxTaskExecutePerRun;
  
  public NonStickyEventExecutorGroup(EventExecutorGroup group) { this(group, 1024); }
  
  public NonStickyEventExecutorGroup(EventExecutorGroup group, int maxTaskExecutePerRun) {
    this.group = verify(group);
    this.maxTaskExecutePerRun = ObjectUtil.checkPositive(maxTaskExecutePerRun, "maxTaskExecutePerRun");
  }
  
  private static EventExecutorGroup verify(EventExecutorGroup group) {
    Iterator<EventExecutor> executors = ((EventExecutorGroup)ObjectUtil.checkNotNull(group, "group")).iterator();
    while (executors.hasNext()) {
      EventExecutor executor = (EventExecutor)executors.next();
      if (executor instanceof OrderedEventExecutor)
        throw new IllegalArgumentException("EventExecutorGroup " + group + " contains OrderedEventExecutors: " + executor); 
    } 
    return group;
  }
  
  private NonStickyOrderedEventExecutor newExecutor(EventExecutor executor) { return new NonStickyOrderedEventExecutor(executor, this.maxTaskExecutePerRun); }
  
  public boolean isShuttingDown() { return this.group.isShuttingDown(); }
  
  public Future<?> shutdownGracefully() { return this.group.shutdownGracefully(); }
  
  public Future<?> shutdownGracefully(long quietPeriod, long timeout, TimeUnit unit) { return this.group.shutdownGracefully(quietPeriod, timeout, unit); }
  
  public Future<?> terminationFuture() { return this.group.terminationFuture(); }
  
  public void shutdown() { this.group.shutdown(); }
  
  public List<Runnable> shutdownNow() { return this.group.shutdownNow(); }
  
  public EventExecutor next() { return newExecutor(this.group.next()); }
  
  public Iterator<EventExecutor> iterator() {
    Iterator<EventExecutor> itr = this.group.iterator();
    return new Object(this, itr);
  }
  
  public Future<?> submit(Runnable task) { return this.group.submit(task); }
  
  public <T> Future<T> submit(Runnable task, T result) { return this.group.submit(task, result); }
  
  public <T> Future<T> submit(Callable<T> task) { return this.group.submit(task); }
  
  public ScheduledFuture<?> schedule(Runnable command, long delay, TimeUnit unit) { return this.group.schedule(command, delay, unit); }
  
  public <V> ScheduledFuture<V> schedule(Callable<V> callable, long delay, TimeUnit unit) { return this.group.schedule(callable, delay, unit); }
  
  public ScheduledFuture<?> scheduleAtFixedRate(Runnable command, long initialDelay, long period, TimeUnit unit) { return this.group.scheduleAtFixedRate(command, initialDelay, period, unit); }
  
  public ScheduledFuture<?> scheduleWithFixedDelay(Runnable command, long initialDelay, long delay, TimeUnit unit) { return this.group.scheduleWithFixedDelay(command, initialDelay, delay, unit); }
  
  public boolean isShutdown() { return this.group.isShutdown(); }
  
  public boolean isTerminated() { return this.group.isTerminated(); }
  
  public boolean awaitTermination(long timeout, TimeUnit unit) throws InterruptedException { return this.group.awaitTermination(timeout, unit); }
  
  public <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks) throws InterruptedException { return this.group.invokeAll(tasks); }
  
  public <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit) throws InterruptedException { return this.group.invokeAll(tasks, timeout, unit); }
  
  public <T> T invokeAny(Collection<? extends Callable<T>> tasks) throws InterruptedException, ExecutionException { return (T)this.group.invokeAny(tasks); }
  
  public <T> T invokeAny(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException { return (T)this.group.invokeAny(tasks, timeout, unit); }
  
  public void execute(Runnable command) { this.group.execute(command); }
}
