package io.netty.util;

import io.netty.util.concurrent.DefaultThreadFactory;
import io.netty.util.internal.ObjectUtil;
import io.netty.util.internal.StringUtil;
import io.netty.util.internal.SystemPropertyUtil;
import io.netty.util.internal.logging.InternalLogger;
import io.netty.util.internal.logging.InternalLoggerFactory;
import java.security.AccessController;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicBoolean;

@Deprecated
public final class ThreadDeathWatcher {
  private static final InternalLogger logger = InternalLoggerFactory.getInstance(ThreadDeathWatcher.class);
  
  static final ThreadFactory threadFactory;
  
  private static final Queue<Entry> pendingEntries = new ConcurrentLinkedQueue();
  
  private static final Watcher watcher = new Watcher(null);
  
  private static final AtomicBoolean started = new AtomicBoolean();
  
  static  {
    poolName = "threadDeathWatcher";
    String serviceThreadPrefix = SystemPropertyUtil.get("io.netty.serviceThreadPrefix");
    if (!StringUtil.isNullOrEmpty(serviceThreadPrefix))
      poolName = serviceThreadPrefix + poolName; 
    threadFactory = new DefaultThreadFactory(poolName, true, 1, null);
  }
  
  public static void watch(Thread thread, Runnable task) {
    ObjectUtil.checkNotNull(thread, "thread");
    ObjectUtil.checkNotNull(task, "task");
    if (!thread.isAlive())
      throw new IllegalArgumentException("thread must be alive."); 
    schedule(thread, task, true);
  }
  
  public static void unwatch(Thread thread, Runnable task) {
    schedule((Thread)ObjectUtil.checkNotNull(thread, "thread"), 
        (Runnable)ObjectUtil.checkNotNull(task, "task"), false);
  }
  
  private static void schedule(Thread thread, Runnable task, boolean isWatch) {
    pendingEntries.add(new Entry(thread, task, isWatch));
    if (started.compareAndSet(false, true)) {
      Thread watcherThread = threadFactory.newThread(watcher);
      AccessController.doPrivileged(new Object(watcherThread));
      watcherThread.start();
      ThreadDeathWatcher.watcherThread = watcherThread;
    } 
  }
  
  public static boolean awaitInactivity(long timeout, TimeUnit unit) throws InterruptedException {
    ObjectUtil.checkNotNull(unit, "unit");
    Thread watcherThread = ThreadDeathWatcher.watcherThread;
    if (watcherThread != null) {
      watcherThread.join(unit.toMillis(timeout));
      return !watcherThread.isAlive();
    } 
    return true;
  }
}
