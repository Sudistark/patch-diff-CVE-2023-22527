package io.netty.util;

import io.netty.util.internal.ObjectUtil;
import java.util.LinkedHashMap;
import java.util.Map;

public class DomainWildcardMappingBuilder<V> extends Object {
  private final V defaultValue;
  
  private final Map<String, V> map;
  
  public DomainWildcardMappingBuilder(V defaultValue) { this(4, defaultValue); }
  
  public DomainWildcardMappingBuilder(int initialCapacity, V defaultValue) {
    this.defaultValue = ObjectUtil.checkNotNull(defaultValue, "defaultValue");
    this.map = new LinkedHashMap(initialCapacity);
  }
  
  public DomainWildcardMappingBuilder<V> add(String hostname, V output) {
    this.map.put(normalizeHostName(hostname), 
        ObjectUtil.checkNotNull(output, "output"));
    return this;
  }
  
  private String normalizeHostName(String hostname) {
    ObjectUtil.checkNotNull(hostname, "hostname");
    if (hostname.isEmpty() || hostname.charAt(0) == '.')
      throw new IllegalArgumentException("Hostname '" + hostname + "' not valid"); 
    hostname = ImmutableDomainWildcardMapping.normalize((String)ObjectUtil.checkNotNull(hostname, "hostname"));
    if (hostname.charAt(0) == '*') {
      if (hostname.length() < 3 || hostname.charAt(1) != '.')
        throw new IllegalArgumentException("Wildcard Hostname '" + hostname + "'not valid"); 
      return hostname.substring(1);
    } 
    return hostname;
  }
  
  public Mapping<String, V> build() { return new ImmutableDomainWildcardMapping(this.defaultValue, this.map); }
}
