package io.netty.util.internal.shaded.org.jctools.queues;

import io.netty.util.internal.shaded.org.jctools.util.Pow2;
import io.netty.util.internal.shaded.org.jctools.util.UnsafeRefArrayAccess;
import java.util.Iterator;

abstract class ConcurrentCircularArrayQueue<E> extends ConcurrentCircularArrayQueueL0Pad<E> implements MessagePassingQueue<E>, IndexedQueueSizeUtil.IndexedQueue, QueueProgressIndicators, SupportsIterator {
  protected final long mask;
  
  protected final E[] buffer;
  
  ConcurrentCircularArrayQueue(int capacity) {
    int actualCapacity = Pow2.roundToPowerOfTwo(capacity);
    this.mask = (actualCapacity - 1);
    this.buffer = UnsafeRefArrayAccess.allocateRefArray(actualCapacity);
  }
  
  public int size() { return IndexedQueueSizeUtil.size(this); }
  
  public boolean isEmpty() { return IndexedQueueSizeUtil.isEmpty(this); }
  
  public String toString() { return getClass().getName(); }
  
  public void clear() {
    while (poll() != null);
  }
  
  public int capacity() { return (int)(this.mask + 1L); }
  
  public long currentProducerIndex() { return lvProducerIndex(); }
  
  public long currentConsumerIndex() { return lvConsumerIndex(); }
  
  public Iterator<E> iterator() {
    long cIndex = lvConsumerIndex();
    long pIndex = lvProducerIndex();
    return new WeakIterator(cIndex, pIndex, this.mask, this.buffer);
  }
}
