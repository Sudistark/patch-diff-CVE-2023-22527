package io.netty.util.internal;

import java.io.IOException;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.NetworkInterface;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketAddress;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.nio.channels.DatagramChannel;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.security.AccessController;
import java.security.PrivilegedActionException;
import java.util.Collections;
import java.util.Enumeration;

public final class SocketUtils {
  private static final Enumeration<Object> EMPTY = Collections.enumeration(Collections.emptyList());
  
  private static <T> Enumeration<T> empty() { return EMPTY; }
  
  public static void connect(Socket socket, SocketAddress remoteAddress, int timeout) throws IOException {
    try {
      AccessController.doPrivileged(new Object(socket, remoteAddress, timeout));
    } catch (PrivilegedActionException e) {
      throw (IOException)e.getCause();
    } 
  }
  
  public static void bind(Socket socket, SocketAddress bindpoint) throws IOException {
    try {
      AccessController.doPrivileged(new Object(socket, bindpoint));
    } catch (PrivilegedActionException e) {
      throw (IOException)e.getCause();
    } 
  }
  
  public static boolean connect(SocketChannel socketChannel, SocketAddress remoteAddress) throws IOException {
    try {
      return ((Boolean)AccessController.doPrivileged(new Object(socketChannel, remoteAddress))).booleanValue();
    } catch (PrivilegedActionException e) {
      throw (IOException)e.getCause();
    } 
  }
  
  @SuppressJava6Requirement(reason = "Usage guarded by java version check")
  public static void bind(SocketChannel socketChannel, SocketAddress address) throws IOException {
    try {
      AccessController.doPrivileged(new Object(socketChannel, address));
    } catch (PrivilegedActionException e) {
      throw (IOException)e.getCause();
    } 
  }
  
  public static SocketChannel accept(ServerSocketChannel serverSocketChannel) throws IOException {
    try {
      return (SocketChannel)AccessController.doPrivileged(new Object(serverSocketChannel));
    } catch (PrivilegedActionException e) {
      throw (IOException)e.getCause();
    } 
  }
  
  @SuppressJava6Requirement(reason = "Usage guarded by java version check")
  public static void bind(DatagramChannel networkChannel, SocketAddress address) throws IOException {
    try {
      AccessController.doPrivileged(new Object(networkChannel, address));
    } catch (PrivilegedActionException e) {
      throw (IOException)e.getCause();
    } 
  }
  
  public static SocketAddress localSocketAddress(ServerSocket socket) { return (SocketAddress)AccessController.doPrivileged(new Object(socket)); }
  
  public static InetAddress addressByName(String hostname) throws UnknownHostException {
    try {
      return (InetAddress)AccessController.doPrivileged(new Object(hostname));
    } catch (PrivilegedActionException e) {
      throw (UnknownHostException)e.getCause();
    } 
  }
  
  public static InetAddress[] allAddressesByName(String hostname) throws UnknownHostException {
    try {
      return (InetAddress[])AccessController.doPrivileged(new Object(hostname));
    } catch (PrivilegedActionException e) {
      throw (UnknownHostException)e.getCause();
    } 
  }
  
  public static InetSocketAddress socketAddress(String hostname, int port) { return (InetSocketAddress)AccessController.doPrivileged(new Object(hostname, port)); }
  
  public static Enumeration<InetAddress> addressesFromNetworkInterface(NetworkInterface intf) {
    Enumeration<InetAddress> addresses = (Enumeration)AccessController.doPrivileged(new Object(intf));
    if (addresses == null)
      return empty(); 
    return addresses;
  }
  
  @SuppressJava6Requirement(reason = "Usage guarded by java version check")
  public static InetAddress loopbackAddress() { return (InetAddress)AccessController.doPrivileged(new Object()); }
  
  public static byte[] hardwareAddressFromNetworkInterface(NetworkInterface intf) throws SocketException {
    try {
      return (byte[])AccessController.doPrivileged(new Object(intf));
    } catch (PrivilegedActionException e) {
      throw (SocketException)e.getCause();
    } 
  }
}
