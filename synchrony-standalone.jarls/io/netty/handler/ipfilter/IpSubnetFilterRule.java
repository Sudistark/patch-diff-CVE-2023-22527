package io.netty.handler.ipfilter;

import io.netty.util.NetUtil;
import io.netty.util.internal.ObjectUtil;
import io.netty.util.internal.SocketUtils;
import java.net.Inet4Address;
import java.net.Inet6Address;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.UnknownHostException;

public final class IpSubnetFilterRule extends Object implements IpFilterRule, Comparable<IpSubnetFilterRule> {
  private final IpFilterRule filterRule;
  
  private final String ipAddress;
  
  public IpSubnetFilterRule(String ipAddress, int cidrPrefix, IpFilterRuleType ruleType) {
    try {
      this.ipAddress = ipAddress;
      this.filterRule = selectFilterRule(SocketUtils.addressByName(ipAddress), cidrPrefix, ruleType);
    } catch (UnknownHostException e) {
      throw new IllegalArgumentException("ipAddress", e);
    } 
  }
  
  public IpSubnetFilterRule(InetAddress ipAddress, int cidrPrefix, IpFilterRuleType ruleType) {
    this.ipAddress = ipAddress.getHostAddress();
    this.filterRule = selectFilterRule(ipAddress, cidrPrefix, ruleType);
  }
  
  private static IpFilterRule selectFilterRule(InetAddress ipAddress, int cidrPrefix, IpFilterRuleType ruleType) {
    ObjectUtil.checkNotNull(ipAddress, "ipAddress");
    ObjectUtil.checkNotNull(ruleType, "ruleType");
    if (ipAddress instanceof Inet4Address)
      return new Ip4SubnetFilterRule((Inet4Address)ipAddress, cidrPrefix, ruleType, null); 
    if (ipAddress instanceof Inet6Address)
      return new Ip6SubnetFilterRule((Inet6Address)ipAddress, cidrPrefix, ruleType, null); 
    throw new IllegalArgumentException("Only IPv4 and IPv6 addresses are supported");
  }
  
  public boolean matches(InetSocketAddress remoteAddress) { return this.filterRule.matches(remoteAddress); }
  
  public IpFilterRuleType ruleType() { return this.filterRule.ruleType(); }
  
  String getIpAddress() { return this.ipAddress; }
  
  IpFilterRule getFilterRule() { return this.filterRule; }
  
  public int compareTo(IpSubnetFilterRule ipSubnetFilterRule) {
    if (this.filterRule instanceof Ip4SubnetFilterRule)
      return compareInt(Ip4SubnetFilterRule.access$200((Ip4SubnetFilterRule)this.filterRule), 
          Ip4SubnetFilterRule.access$200((Ip4SubnetFilterRule)ipSubnetFilterRule.filterRule)); 
    return Ip6SubnetFilterRule.access$300((Ip6SubnetFilterRule)this.filterRule)
      .compareTo(Ip6SubnetFilterRule.access$300((Ip6SubnetFilterRule)ipSubnetFilterRule.filterRule));
  }
  
  int compareTo(InetSocketAddress inetSocketAddress) {
    if (this.filterRule instanceof Ip4SubnetFilterRule) {
      Ip4SubnetFilterRule ip4SubnetFilterRule = (Ip4SubnetFilterRule)this.filterRule;
      return compareInt(Ip4SubnetFilterRule.access$200(ip4SubnetFilterRule), NetUtil.ipv4AddressToInt((Inet4Address)inetSocketAddress
            .getAddress()) & Ip4SubnetFilterRule.access$400(ip4SubnetFilterRule));
    } 
    Ip6SubnetFilterRule ip6SubnetFilterRule = (Ip6SubnetFilterRule)this.filterRule;
    return Ip6SubnetFilterRule.access$300(ip6SubnetFilterRule)
      .compareTo(Ip6SubnetFilterRule.access$500((Inet6Address)inetSocketAddress.getAddress())
        .and(Ip6SubnetFilterRule.access$300(ip6SubnetFilterRule)));
  }
  
  private static int compareInt(int x, int y) { return (x < y) ? -1 : ((x == y) ? 0 : 1); }
}
