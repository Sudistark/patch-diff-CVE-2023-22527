package io.netty.handler.ssl;

import io.netty.buffer.ByteBuf;
import io.netty.channel.ChannelHandlerContext;
import io.netty.util.CharsetUtil;
import io.netty.util.concurrent.Future;
import io.netty.util.concurrent.ScheduledFuture;
import io.netty.util.internal.ObjectUtil;
import java.util.Locale;
import java.util.concurrent.TimeUnit;

public abstract class AbstractSniHandler<T> extends SslClientHelloHandler<T> {
  protected final long handshakeTimeoutMillis;
  
  private ScheduledFuture<?> timeoutFuture;
  
  private String hostname;
  
  private static String extractSniHostname(ByteBuf in) {
    int offset = in.readerIndex();
    int endOffset = in.writerIndex();
    offset += 34;
    if (endOffset - offset >= 6) {
      int sessionIdLength = in.getUnsignedByte(offset);
      offset += sessionIdLength + 1;
      int cipherSuitesLength = in.getUnsignedShort(offset);
      offset += cipherSuitesLength + 2;
      int compressionMethodLength = in.getUnsignedByte(offset);
      offset += compressionMethodLength + 1;
      int extensionsLength = in.getUnsignedShort(offset);
      offset += 2;
      int extensionsLimit = offset + extensionsLength;
      if (extensionsLimit <= endOffset)
        while (extensionsLimit - offset >= 4) {
          int extensionType = in.getUnsignedShort(offset);
          offset += 2;
          int extensionLength = in.getUnsignedShort(offset);
          offset += 2;
          if (extensionsLimit - offset < extensionLength)
            break; 
          if (extensionType == 0) {
            offset += 2;
            if (extensionsLimit - offset < 3)
              break; 
            int serverNameType = in.getUnsignedByte(offset);
            offset++;
            if (serverNameType == 0) {
              int serverNameLength = in.getUnsignedShort(offset);
              offset += 2;
              if (extensionsLimit - offset < serverNameLength)
                break; 
              String hostname = in.toString(offset, serverNameLength, CharsetUtil.US_ASCII);
              return hostname.toLowerCase(Locale.US);
            } 
            break;
          } 
          offset += extensionLength;
        }  
    } 
    return null;
  }
  
  protected AbstractSniHandler(long handshakeTimeoutMillis) { this(0, handshakeTimeoutMillis); }
  
  protected AbstractSniHandler(int maxClientHelloLength, long handshakeTimeoutMillis) {
    super(maxClientHelloLength);
    this.handshakeTimeoutMillis = ObjectUtil.checkPositiveOrZero(handshakeTimeoutMillis, "handshakeTimeoutMillis");
  }
  
  public AbstractSniHandler() { this(0, 0L); }
  
  public void handlerAdded(ChannelHandlerContext ctx) throws Exception {
    if (ctx.channel().isActive())
      checkStartTimeout(ctx); 
  }
  
  public void channelActive(ChannelHandlerContext ctx) throws Exception {
    ctx.fireChannelActive();
    checkStartTimeout(ctx);
  }
  
  private void checkStartTimeout(ChannelHandlerContext ctx) throws Exception {
    if (this.handshakeTimeoutMillis <= 0L || this.timeoutFuture != null)
      return; 
    this.timeoutFuture = ctx.executor().schedule(new Object(this, ctx), this.handshakeTimeoutMillis, TimeUnit.MILLISECONDS);
  }
  
  protected Future<T> lookup(ChannelHandlerContext ctx, ByteBuf clientHello) throws Exception {
    this.hostname = (clientHello == null) ? null : extractSniHostname(clientHello);
    return lookup(ctx, this.hostname);
  }
  
  protected void onLookupComplete(ChannelHandlerContext ctx, Future<T> future) throws Exception {
    if (this.timeoutFuture != null)
      this.timeoutFuture.cancel(false); 
    try {
      onLookupComplete(ctx, this.hostname, future);
    } finally {
      fireSniCompletionEvent(ctx, this.hostname, future);
    } 
  }
  
  protected abstract Future<T> lookup(ChannelHandlerContext paramChannelHandlerContext, String paramString) throws Exception;
  
  protected abstract void onLookupComplete(ChannelHandlerContext paramChannelHandlerContext, String paramString, Future<T> paramFuture) throws Exception;
  
  private static void fireSniCompletionEvent(ChannelHandlerContext ctx, String hostname, Future<?> future) {
    Throwable cause = future.cause();
    if (cause == null) {
      ctx.fireUserEventTriggered(new SniCompletionEvent(hostname));
    } else {
      ctx.fireUserEventTriggered(new SniCompletionEvent(hostname, cause));
    } 
  }
}
