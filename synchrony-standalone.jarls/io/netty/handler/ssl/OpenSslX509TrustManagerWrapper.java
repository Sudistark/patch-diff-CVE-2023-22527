package io.netty.handler.ssl;

import io.netty.util.internal.PlatformDependent;
import io.netty.util.internal.SuppressJava6Requirement;
import io.netty.util.internal.logging.InternalLogger;
import io.netty.util.internal.logging.InternalLoggerFactory;
import java.security.AccessController;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;

@SuppressJava6Requirement(reason = "Usage guarded by java version check")
final class OpenSslX509TrustManagerWrapper {
  private static final InternalLogger LOGGER = InternalLoggerFactory.getInstance(OpenSslX509TrustManagerWrapper.class);
  
  private static final TrustManagerWrapper WRAPPER;
  
  static  {
    Object object = new Object();
    Throwable cause = null;
    Throwable unsafeCause = PlatformDependent.getUnsafeUnavailabilityCause();
    if (unsafeCause == null) {
      SSLContext context;
      try {
        context = newSSLContext();
        context.init(null, new TrustManager[] { new Object() }, null);
      } catch (Throwable error) {
        context = null;
        cause = error;
      } 
      if (cause != null) {
        LOGGER.debug("Unable to access wrapped TrustManager", cause);
      } else {
        SSLContext finalContext = context;
        Object maybeWrapper = AccessController.doPrivileged(new Object(finalContext));
        if (maybeWrapper instanceof Throwable) {
          LOGGER.debug("Unable to access wrapped TrustManager", (Throwable)maybeWrapper);
        } else {
          object = (TrustManagerWrapper)maybeWrapper;
        } 
      } 
    } else {
      LOGGER.debug("Unable to access wrapped TrustManager", cause);
    } 
    WRAPPER = object;
  }
  
  static X509TrustManager wrapIfNeeded(X509TrustManager trustManager) { return WRAPPER.wrapIfNeeded(trustManager); }
  
  private static SSLContext newSSLContext() throws NoSuchAlgorithmException, NoSuchProviderException { return SSLContext.getInstance("TLS", "SunJSSE"); }
}
