package io.netty.handler.ssl.util;

import io.netty.buffer.ByteBufUtil;
import io.netty.buffer.Unpooled;
import io.netty.util.concurrent.FastThreadLocal;
import io.netty.util.internal.ObjectUtil;
import io.netty.util.internal.StringUtil;
import java.security.KeyStore;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.regex.Pattern;
import javax.net.ssl.ManagerFactoryParameters;
import javax.net.ssl.TrustManager;

public final class FingerprintTrustManagerFactory extends SimpleTrustManagerFactory {
  private static final Pattern FINGERPRINT_PATTERN = Pattern.compile("^[0-9a-fA-F:]+$");
  
  private static final Pattern FINGERPRINT_STRIP_PATTERN = Pattern.compile(":");
  
  private final FastThreadLocal<MessageDigest> tlmd;
  
  private final TrustManager tm;
  
  private final byte[][] fingerprints;
  
  public static FingerprintTrustManagerFactoryBuilder builder(String algorithm) { return new FingerprintTrustManagerFactoryBuilder(algorithm); }
  
  @Deprecated
  public FingerprintTrustManagerFactory(Iterable<String> fingerprints) { this("SHA1", toFingerprintArray(fingerprints)); }
  
  @Deprecated
  public FingerprintTrustManagerFactory(String... fingerprints) { this("SHA1", toFingerprintArray(Arrays.asList(fingerprints))); }
  
  @Deprecated
  public FingerprintTrustManagerFactory(byte[]... fingerprints) { this("SHA1", fingerprints); }
  
  FingerprintTrustManagerFactory(String algorithm, byte[][] fingerprints) {
    this.tm = new Object(this);
    ObjectUtil.checkNotNull(algorithm, "algorithm");
    ObjectUtil.checkNotNull(fingerprints, "fingerprints");
    if (fingerprints.length == 0)
      throw new IllegalArgumentException("No fingerprints provided"); 
    try {
      md = MessageDigest.getInstance(algorithm);
    } catch (NoSuchAlgorithmException e) {
      throw new IllegalArgumentException(
          String.format("Unsupported hash algorithm: %s", new Object[] { algorithm }), e);
    } 
    int hashLength = md.getDigestLength();
    List<byte[]> list = new ArrayList<byte[]>(fingerprints.length);
    for (byte[] f : fingerprints) {
      if (f == null)
        break; 
      if (f.length != hashLength)
        throw new IllegalArgumentException(
            String.format("malformed fingerprint (length is %d but expected %d): %s", new Object[] { Integer.valueOf(f.length), Integer.valueOf(hashLength), ByteBufUtil.hexDump(Unpooled.wrappedBuffer(f)) })); 
      list.add(f.clone());
    } 
    this.tlmd = new Object(this, algorithm);
    this.fingerprints = (byte[][])list.toArray(new byte[0][]);
  }
  
  static byte[][] toFingerprintArray(Iterable<String> fingerprints) {
    ObjectUtil.checkNotNull(fingerprints, "fingerprints");
    List<byte[]> list = new ArrayList<byte[]>();
    for (String f : fingerprints) {
      if (f == null)
        break; 
      if (!FINGERPRINT_PATTERN.matcher(f).matches())
        throw new IllegalArgumentException("malformed fingerprint: " + f); 
      f = FINGERPRINT_STRIP_PATTERN.matcher(f).replaceAll("");
      list.add(StringUtil.decodeHexDump(f));
    } 
    return (byte[][])list.toArray(new byte[0][]);
  }
  
  protected void engineInit(KeyStore keyStore) throws Exception {}
  
  protected void engineInit(ManagerFactoryParameters managerFactoryParameters) throws Exception {}
  
  protected TrustManager[] engineGetTrustManagers() { return new TrustManager[] { this.tm }; }
}
