package io.netty.handler.ssl;

import io.netty.internal.tcnative.SSL;
import io.netty.util.AbstractReferenceCounted;
import io.netty.util.IllegalReferenceCountException;
import io.netty.util.ReferenceCounted;
import java.security.PrivateKey;
import java.security.cert.X509Certificate;

final class OpenSslPrivateKey extends AbstractReferenceCounted implements PrivateKey {
  private long privateKeyAddress;
  
  OpenSslPrivateKey(long privateKeyAddress) { this.privateKeyAddress = privateKeyAddress; }
  
  public String getAlgorithm() { return "unknown"; }
  
  public String getFormat() { return null; }
  
  public byte[] getEncoded() { return null; }
  
  private long privateKeyAddress() {
    if (refCnt() <= 0)
      throw new IllegalReferenceCountException(); 
    return this.privateKeyAddress;
  }
  
  protected void deallocate() {
    SSL.freePrivateKey(this.privateKeyAddress);
    this.privateKeyAddress = 0L;
  }
  
  public OpenSslPrivateKey retain() {
    super.retain();
    return this;
  }
  
  public OpenSslPrivateKey retain(int increment) {
    super.retain(increment);
    return this;
  }
  
  public OpenSslPrivateKey touch() {
    super.touch();
    return this;
  }
  
  public OpenSslPrivateKey touch(Object hint) { return this; }
  
  public void destroy() { release(refCnt()); }
  
  public boolean isDestroyed() { return (refCnt() == 0); }
  
  OpenSslKeyMaterial newKeyMaterial(long certificateChain, X509Certificate[] chain) { return new OpenSslPrivateKeyMaterial(this, certificateChain, chain); }
}
