package io.netty.handler.codec.compression;

import com.jcraft.jzlib.Deflater;
import com.jcraft.jzlib.Inflater;
import com.jcraft.jzlib.JZlib;

final class ZlibUtil {
  static void fail(Inflater z, String message, int resultCode) { throw inflaterException(z, message, resultCode); }
  
  static void fail(Deflater z, String message, int resultCode) { throw deflaterException(z, message, resultCode); }
  
  static DecompressionException inflaterException(Inflater z, String message, int resultCode) { return new DecompressionException(message + " (" + resultCode + ')' + ((z.msg != null) ? (": " + z.msg) : "")); }
  
  static CompressionException deflaterException(Deflater z, String message, int resultCode) { return new CompressionException(message + " (" + resultCode + ')' + ((z.msg != null) ? (": " + z.msg) : "")); }
  
  static JZlib.WrapperType convertWrapperType(ZlibWrapper wrapper) {
    JZlib.WrapperType convertedWrapperType;
    JZlib.WrapperType convertedWrapperType;
    JZlib.WrapperType convertedWrapperType;
    switch (null.$SwitchMap$io$netty$handler$codec$compression$ZlibWrapper[wrapper.ordinal()]) {
      case 1:
        return JZlib.W_NONE;
      case 2:
        return JZlib.W_ZLIB;
      case 3:
        return JZlib.W_GZIP;
      case 4:
        return JZlib.W_ANY;
    } 
    throw new Error();
  }
  
  static int wrapperOverhead(ZlibWrapper wrapper) {
    int overhead;
    int overhead;
    switch (null.$SwitchMap$io$netty$handler$codec$compression$ZlibWrapper[wrapper.ordinal()]) {
      case 1:
        return 0;
      case 2:
      case 4:
        return 2;
      case 3:
        return 10;
    } 
    throw new Error();
  }
}
