package io.netty.handler.codec.compression;

import com.aayushatharva.brotli4j.encoder.Encoder;
import io.netty.buffer.ByteBuf;
import io.netty.buffer.Unpooled;
import io.netty.channel.ChannelFuture;
import io.netty.channel.ChannelHandler.Sharable;
import io.netty.channel.ChannelHandlerContext;
import io.netty.channel.ChannelPromise;
import io.netty.handler.codec.MessageToByteEncoder;
import io.netty.util.AttributeKey;
import io.netty.util.internal.ObjectUtil;
import java.io.IOException;

@Sharable
public final class BrotliEncoder extends MessageToByteEncoder<ByteBuf> {
  private static final AttributeKey<Writer> ATTR = AttributeKey.valueOf("BrotliEncoderWriter");
  
  private final Encoder.Parameters parameters;
  
  private final boolean isSharable;
  
  private Writer writer;
  
  public BrotliEncoder() { this(BrotliOptions.DEFAULT); }
  
  public BrotliEncoder(BrotliOptions brotliOptions) { this(brotliOptions.parameters()); }
  
  public BrotliEncoder(Encoder.Parameters parameters) { this(parameters, true); }
  
  public BrotliEncoder(Encoder.Parameters parameters, boolean isSharable) {
    this.parameters = (Encoder.Parameters)ObjectUtil.checkNotNull(parameters, "Parameters");
    this.isSharable = isSharable;
  }
  
  public void handlerAdded(ChannelHandlerContext ctx) throws Exception {
    Writer writer = new Writer(this.parameters, ctx, null);
    if (this.isSharable) {
      ctx.channel().attr(ATTR).set(writer);
    } else {
      this.writer = writer;
    } 
    super.handlerAdded(ctx);
  }
  
  public void handlerRemoved(ChannelHandlerContext ctx) throws Exception {
    finish(ctx);
    super.handlerRemoved(ctx);
  }
  
  protected void encode(ChannelHandlerContext ctx, ByteBuf msg, ByteBuf out) throws Exception {}
  
  protected ByteBuf allocateBuffer(ChannelHandlerContext ctx, ByteBuf msg, boolean preferDirect) throws Exception {
    Writer writer;
    if (!msg.isReadable())
      return Unpooled.EMPTY_BUFFER; 
    if (this.isSharable) {
      writer = (Writer)ctx.channel().attr(ATTR).get();
    } else {
      writer = this.writer;
    } 
    if (writer == null)
      return Unpooled.EMPTY_BUFFER; 
    Writer.access$100(writer, msg, preferDirect);
    return Writer.access$200(writer);
  }
  
  public boolean isSharable() { return this.isSharable; }
  
  public void finish(ChannelHandlerContext ctx) throws Exception { finishEncode(ctx, ctx.newPromise()); }
  
  private ChannelFuture finishEncode(ChannelHandlerContext ctx, ChannelPromise promise) throws IOException {
    Writer writer;
    if (this.isSharable) {
      writer = (Writer)ctx.channel().attr(ATTR).getAndSet(null);
    } else {
      writer = this.writer;
    } 
    if (writer != null) {
      writer.close();
      this.writer = null;
    } 
    return promise;
  }
  
  public void close(ChannelHandlerContext ctx, ChannelPromise promise) throws Exception {
    ChannelFuture f = finishEncode(ctx, ctx.newPromise());
    EncoderUtil.closeAfterFinishEncode(ctx, f, promise);
  }
}
