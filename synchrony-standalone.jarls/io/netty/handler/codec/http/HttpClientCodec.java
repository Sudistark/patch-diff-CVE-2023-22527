package io.netty.handler.codec.http;

import io.netty.channel.ChannelHandlerContext;
import io.netty.channel.ChannelPipeline;
import io.netty.channel.CombinedChannelDuplexHandler;
import java.util.ArrayDeque;
import java.util.Queue;
import java.util.concurrent.atomic.AtomicLong;

public final class HttpClientCodec extends CombinedChannelDuplexHandler<HttpResponseDecoder, HttpRequestEncoder> implements HttpClientUpgradeHandler.SourceCodec {
  public static final boolean DEFAULT_FAIL_ON_MISSING_RESPONSE = false;
  
  public static final boolean DEFAULT_PARSE_HTTP_AFTER_CONNECT_REQUEST = false;
  
  private final Queue<HttpMethod> queue;
  
  private final boolean parseHttpAfterConnectRequest;
  
  private boolean done;
  
  private final AtomicLong requestResponseCounter;
  
  private final boolean failOnMissingResponse;
  
  public HttpClientCodec() { this(4096, 8192, 8192, false); }
  
  public HttpClientCodec(int maxInitialLineLength, int maxHeaderSize, int maxChunkSize) { this(maxInitialLineLength, maxHeaderSize, maxChunkSize, false); }
  
  public HttpClientCodec(int maxInitialLineLength, int maxHeaderSize, int maxChunkSize, boolean failOnMissingResponse) { this(maxInitialLineLength, maxHeaderSize, maxChunkSize, failOnMissingResponse, true); }
  
  public HttpClientCodec(int maxInitialLineLength, int maxHeaderSize, int maxChunkSize, boolean failOnMissingResponse, boolean validateHeaders) { this(maxInitialLineLength, maxHeaderSize, maxChunkSize, failOnMissingResponse, validateHeaders, false); }
  
  public HttpClientCodec(int maxInitialLineLength, int maxHeaderSize, int maxChunkSize, boolean failOnMissingResponse, boolean validateHeaders, boolean parseHttpAfterConnectRequest) {
    this.queue = new ArrayDeque();
    this.requestResponseCounter = new AtomicLong();
    init(new Decoder(this, maxInitialLineLength, maxHeaderSize, maxChunkSize, validateHeaders), new Encoder(this, null));
    this.failOnMissingResponse = failOnMissingResponse;
    this.parseHttpAfterConnectRequest = parseHttpAfterConnectRequest;
  }
  
  public HttpClientCodec(int maxInitialLineLength, int maxHeaderSize, int maxChunkSize, boolean failOnMissingResponse, boolean validateHeaders, int initialBufferSize) { this(maxInitialLineLength, maxHeaderSize, maxChunkSize, failOnMissingResponse, validateHeaders, initialBufferSize, false); }
  
  public HttpClientCodec(int maxInitialLineLength, int maxHeaderSize, int maxChunkSize, boolean failOnMissingResponse, boolean validateHeaders, int initialBufferSize, boolean parseHttpAfterConnectRequest) { this(maxInitialLineLength, maxHeaderSize, maxChunkSize, failOnMissingResponse, validateHeaders, initialBufferSize, parseHttpAfterConnectRequest, false); }
  
  public HttpClientCodec(int maxInitialLineLength, int maxHeaderSize, int maxChunkSize, boolean failOnMissingResponse, boolean validateHeaders, int initialBufferSize, boolean parseHttpAfterConnectRequest, boolean allowDuplicateContentLengths) { this(maxInitialLineLength, maxHeaderSize, maxChunkSize, failOnMissingResponse, validateHeaders, initialBufferSize, parseHttpAfterConnectRequest, allowDuplicateContentLengths, true); }
  
  public HttpClientCodec(int maxInitialLineLength, int maxHeaderSize, int maxChunkSize, boolean failOnMissingResponse, boolean validateHeaders, int initialBufferSize, boolean parseHttpAfterConnectRequest, boolean allowDuplicateContentLengths, boolean allowPartialChunks) {
    this.queue = new ArrayDeque();
    this.requestResponseCounter = new AtomicLong();
    init(new Decoder(this, maxInitialLineLength, maxHeaderSize, maxChunkSize, validateHeaders, initialBufferSize, allowDuplicateContentLengths, allowPartialChunks), new Encoder(this, null));
    this.parseHttpAfterConnectRequest = parseHttpAfterConnectRequest;
    this.failOnMissingResponse = failOnMissingResponse;
  }
  
  public void prepareUpgradeFrom(ChannelHandlerContext ctx) { ((Encoder)outboundHandler()).upgraded = true; }
  
  public void upgradeFrom(ChannelHandlerContext ctx) {
    ChannelPipeline p = ctx.pipeline();
    p.remove(this);
  }
  
  public void setSingleDecode(boolean singleDecode) { ((HttpResponseDecoder)inboundHandler()).setSingleDecode(singleDecode); }
  
  public boolean isSingleDecode() { return ((HttpResponseDecoder)inboundHandler()).isSingleDecode(); }
}
