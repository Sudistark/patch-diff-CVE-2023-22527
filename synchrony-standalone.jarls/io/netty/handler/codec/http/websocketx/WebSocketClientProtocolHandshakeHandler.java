package io.netty.handler.codec.http.websocketx;

import io.netty.channel.ChannelFuture;
import io.netty.channel.ChannelHandlerContext;
import io.netty.channel.ChannelInboundHandlerAdapter;
import io.netty.channel.ChannelPromise;
import io.netty.handler.codec.http.FullHttpResponse;
import io.netty.util.concurrent.ScheduledFuture;
import io.netty.util.internal.ObjectUtil;
import java.util.concurrent.TimeUnit;

class WebSocketClientProtocolHandshakeHandler extends ChannelInboundHandlerAdapter {
  private static final long DEFAULT_HANDSHAKE_TIMEOUT_MS = 10000L;
  
  private final WebSocketClientHandshaker handshaker;
  
  private final long handshakeTimeoutMillis;
  
  private ChannelHandlerContext ctx;
  
  private ChannelPromise handshakePromise;
  
  WebSocketClientProtocolHandshakeHandler(WebSocketClientHandshaker handshaker) { this(handshaker, 10000L); }
  
  WebSocketClientProtocolHandshakeHandler(WebSocketClientHandshaker handshaker, long handshakeTimeoutMillis) {
    this.handshaker = handshaker;
    this.handshakeTimeoutMillis = ObjectUtil.checkPositive(handshakeTimeoutMillis, "handshakeTimeoutMillis");
  }
  
  public void handlerAdded(ChannelHandlerContext ctx) throws Exception {
    this.ctx = ctx;
    this.handshakePromise = ctx.newPromise();
  }
  
  public void channelActive(ChannelHandlerContext ctx) throws Exception {
    super.channelActive(ctx);
    this.handshaker.handshake(ctx.channel()).addListener(new Object(this, ctx));
    applyHandshakeTimeout();
  }
  
  public void channelInactive(ChannelHandlerContext ctx) throws Exception {
    if (!this.handshakePromise.isDone())
      this.handshakePromise.tryFailure(new WebSocketClientHandshakeException("channel closed with handshake in progress")); 
    super.channelInactive(ctx);
  }
  
  public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {
    if (!(msg instanceof FullHttpResponse)) {
      ctx.fireChannelRead(msg);
      return;
    } 
    response = (FullHttpResponse)msg;
    try {
      if (!this.handshaker.isHandshakeComplete()) {
        this.handshaker.finishHandshake(ctx.channel(), response);
        this.handshakePromise.trySuccess();
        ctx.fireUserEventTriggered(WebSocketClientProtocolHandler.ClientHandshakeStateEvent.HANDSHAKE_COMPLETE);
        ctx.pipeline().remove(this);
        return;
      } 
      throw new IllegalStateException("WebSocketClientHandshaker should have been non finished yet");
    } finally {
      response.release();
    } 
  }
  
  private void applyHandshakeTimeout() {
    ChannelPromise localHandshakePromise = this.handshakePromise;
    if (this.handshakeTimeoutMillis <= 0L || localHandshakePromise.isDone())
      return; 
    ScheduledFuture scheduledFuture = this.ctx.executor().schedule(new Object(this, localHandshakePromise), this.handshakeTimeoutMillis, TimeUnit.MILLISECONDS);
    localHandshakePromise.addListener(new Object(this, scheduledFuture));
  }
  
  ChannelFuture getHandshakeFuture() { return this.handshakePromise; }
}
