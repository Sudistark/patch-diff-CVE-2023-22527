package io.netty.handler.codec.socks;

import io.netty.buffer.ByteBuf;
import io.netty.buffer.ByteBufUtil;
import io.netty.channel.ChannelHandlerContext;
import io.netty.handler.codec.ReplayingDecoder;
import io.netty.util.NetUtil;
import java.util.List;

public class SocksCmdRequestDecoder extends ReplayingDecoder<SocksCmdRequestDecoder.State> {
  private SocksCmdType cmdType;
  
  private SocksAddressType addressType;
  
  public SocksCmdRequestDecoder() { super(State.CHECK_PROTOCOL_VERSION); }
  
  protected void decode(ChannelHandlerContext ctx, ByteBuf byteBuf, List<Object> out) throws Exception {
    int port, port, port;
    String host, host;
    byte[] bytes;
    String host;
    int fieldLength;
    switch (null.$SwitchMap$io$netty$handler$codec$socks$SocksCmdRequestDecoder$State[((State)state()).ordinal()]) {
      case 1:
        if (byteBuf.readByte() != SocksProtocolVersion.SOCKS5.byteValue()) {
          out.add(SocksCommonUtils.UNKNOWN_SOCKS_REQUEST);
          break;
        } 
        checkpoint(State.READ_CMD_HEADER);
      case 2:
        this.cmdType = SocksCmdType.valueOf(byteBuf.readByte());
        byteBuf.skipBytes(1);
        this.addressType = SocksAddressType.valueOf(byteBuf.readByte());
        checkpoint(State.READ_CMD_ADDRESS);
      case 3:
        switch (null.$SwitchMap$io$netty$handler$codec$socks$SocksAddressType[this.addressType.ordinal()]) {
          case 1:
            host = NetUtil.intToIpAddress(ByteBufUtil.readIntBE(byteBuf));
            port = ByteBufUtil.readUnsignedShortBE(byteBuf);
            out.add(new SocksCmdRequest(this.cmdType, this.addressType, host, port));
            break;
          case 2:
            fieldLength = byteBuf.readByte();
            host = SocksCommonUtils.readUsAscii(byteBuf, fieldLength);
            port = ByteBufUtil.readUnsignedShortBE(byteBuf);
            out.add(new SocksCmdRequest(this.cmdType, this.addressType, host, port));
            break;
          case 3:
            bytes = new byte[16];
            byteBuf.readBytes(bytes);
            host = SocksCommonUtils.ipv6toStr(bytes);
            port = ByteBufUtil.readUnsignedShortBE(byteBuf);
            out.add(new SocksCmdRequest(this.cmdType, this.addressType, host, port));
            break;
          case 4:
            out.add(SocksCommonUtils.UNKNOWN_SOCKS_REQUEST);
            break;
        } 
        throw new Error();
      default:
        throw new Error();
    } 
    ctx.pipeline().remove(this);
  }
}
