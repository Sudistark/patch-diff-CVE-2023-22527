package io.netty.handler.codec.socks;

import io.netty.buffer.ByteBuf;
import io.netty.channel.ChannelHandlerContext;
import io.netty.handler.codec.ReplayingDecoder;
import java.util.List;

public class SocksAuthRequestDecoder extends ReplayingDecoder<SocksAuthRequestDecoder.State> {
  private String username;
  
  public SocksAuthRequestDecoder() { super(State.CHECK_PROTOCOL_VERSION); }
  
  protected void decode(ChannelHandlerContext ctx, ByteBuf byteBuf, List<Object> out) throws Exception {
    String password;
    int fieldLength, fieldLength;
    switch (null.$SwitchMap$io$netty$handler$codec$socks$SocksAuthRequestDecoder$State[((State)state()).ordinal()]) {
      case 1:
        if (byteBuf.readByte() != SocksSubnegotiationVersion.AUTH_PASSWORD.byteValue()) {
          out.add(SocksCommonUtils.UNKNOWN_SOCKS_REQUEST);
          break;
        } 
        checkpoint(State.READ_USERNAME);
      case 2:
        fieldLength = byteBuf.readByte();
        this.username = SocksCommonUtils.readUsAscii(byteBuf, fieldLength);
        checkpoint(State.READ_PASSWORD);
      case 3:
        fieldLength = byteBuf.readByte();
        password = SocksCommonUtils.readUsAscii(byteBuf, fieldLength);
        out.add(new SocksAuthRequest(this.username, password));
        break;
      default:
        throw new Error();
    } 
    ctx.pipeline().remove(this);
  }
}
