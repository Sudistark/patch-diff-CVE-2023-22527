package io.netty.bootstrap;

import io.netty.channel.Channel;
import io.netty.channel.ChannelFactory;
import io.netty.channel.ChannelFuture;
import io.netty.channel.ChannelHandler;
import io.netty.channel.ChannelOption;
import io.netty.channel.ChannelPromise;
import io.netty.channel.DefaultChannelPromise;
import io.netty.channel.EventLoopGroup;
import io.netty.channel.ReflectiveChannelFactory;
import io.netty.util.AttributeKey;
import io.netty.util.concurrent.GlobalEventExecutor;
import io.netty.util.internal.ObjectUtil;
import io.netty.util.internal.SocketUtils;
import io.netty.util.internal.StringUtil;
import io.netty.util.internal.logging.InternalLogger;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.SocketAddress;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.concurrent.ConcurrentHashMap;

public abstract class AbstractBootstrap<B extends AbstractBootstrap<B, C>, C extends Channel> extends Object implements Cloneable {
  private static final Map.Entry<ChannelOption<?>, Object>[] EMPTY_OPTION_ARRAY = new Map.Entry[0];
  
  private static final Map.Entry<AttributeKey<?>, Object>[] EMPTY_ATTRIBUTE_ARRAY = new Map.Entry[0];
  
  private final Map<ChannelOption<?>, Object> options = new LinkedHashMap();
  
  private final Map<AttributeKey<?>, Object> attrs = new ConcurrentHashMap();
  
  AbstractBootstrap(AbstractBootstrap<B, C> bootstrap) {
    this.group = bootstrap.group;
    this.channelFactory = bootstrap.channelFactory;
    this.handler = bootstrap.handler;
    this.localAddress = bootstrap.localAddress;
    synchronized (bootstrap.options) {
      this.options.putAll(bootstrap.options);
    } 
    this.attrs.putAll(bootstrap.attrs);
  }
  
  public B group(EventLoopGroup group) {
    ObjectUtil.checkNotNull(group, "group");
    if (this.group != null)
      throw new IllegalStateException("group set already"); 
    this.group = group;
    return (B)self();
  }
  
  private B self() { return (B)this; }
  
  public B channel(Class<? extends C> channelClass) { return (B)channelFactory(new ReflectiveChannelFactory(
          (Class)ObjectUtil.checkNotNull(channelClass, "channelClass"))); }
  
  @Deprecated
  public B channelFactory(ChannelFactory<? extends C> channelFactory) {
    ObjectUtil.checkNotNull(channelFactory, "channelFactory");
    if (this.channelFactory != null)
      throw new IllegalStateException("channelFactory set already"); 
    this.channelFactory = channelFactory;
    return (B)self();
  }
  
  public B channelFactory(ChannelFactory<? extends C> channelFactory) { return (B)channelFactory(channelFactory); }
  
  public B localAddress(SocketAddress localAddress) {
    this.localAddress = localAddress;
    return (B)self();
  }
  
  public B localAddress(int inetPort) { return (B)localAddress(new InetSocketAddress(inetPort)); }
  
  public B localAddress(String inetHost, int inetPort) { return (B)localAddress(SocketUtils.socketAddress(inetHost, inetPort)); }
  
  public B localAddress(InetAddress inetHost, int inetPort) { return (B)localAddress(new InetSocketAddress(inetHost, inetPort)); }
  
  public <T> B option(ChannelOption<T> option, T value) {
    ObjectUtil.checkNotNull(option, "option");
    synchronized (this.options) {
      if (value == null) {
        this.options.remove(option);
      } else {
        this.options.put(option, value);
      } 
    } 
    return (B)self();
  }
  
  public <T> B attr(AttributeKey<T> key, T value) {
    ObjectUtil.checkNotNull(key, "key");
    if (value == null) {
      this.attrs.remove(key);
    } else {
      this.attrs.put(key, value);
    } 
    return (B)self();
  }
  
  public B validate() {
    if (this.group == null)
      throw new IllegalStateException("group not set"); 
    if (this.channelFactory == null)
      throw new IllegalStateException("channel or channelFactory not set"); 
    return (B)self();
  }
  
  public ChannelFuture register() {
    validate();
    return initAndRegister();
  }
  
  public ChannelFuture bind() {
    validate();
    SocketAddress localAddress = this.localAddress;
    if (localAddress == null)
      throw new IllegalStateException("localAddress not set"); 
    return doBind(localAddress);
  }
  
  public ChannelFuture bind(int inetPort) { return bind(new InetSocketAddress(inetPort)); }
  
  public ChannelFuture bind(String inetHost, int inetPort) { return bind(SocketUtils.socketAddress(inetHost, inetPort)); }
  
  public ChannelFuture bind(InetAddress inetHost, int inetPort) { return bind(new InetSocketAddress(inetHost, inetPort)); }
  
  public ChannelFuture bind(SocketAddress localAddress) {
    validate();
    return doBind((SocketAddress)ObjectUtil.checkNotNull(localAddress, "localAddress"));
  }
  
  private ChannelFuture doBind(SocketAddress localAddress) {
    ChannelFuture regFuture = initAndRegister();
    Channel channel = regFuture.channel();
    if (regFuture.cause() != null)
      return regFuture; 
    if (regFuture.isDone()) {
      ChannelPromise promise = channel.newPromise();
      doBind0(regFuture, channel, localAddress, promise);
      return promise;
    } 
    PendingRegistrationPromise promise = new PendingRegistrationPromise(channel);
    regFuture.addListener(new Object(this, promise, regFuture, channel, localAddress));
    return promise;
  }
  
  final ChannelFuture initAndRegister() {
    Channel channel = null;
    try {
      channel = this.channelFactory.newChannel();
      init(channel);
    } catch (Throwable t) {
      if (channel != null) {
        channel.unsafe().closeForcibly();
        return (new DefaultChannelPromise(channel, GlobalEventExecutor.INSTANCE)).setFailure(t);
      } 
      return (new DefaultChannelPromise(new FailedChannel(), GlobalEventExecutor.INSTANCE)).setFailure(t);
    } 
    ChannelFuture regFuture = config().group().register(channel);
    if (regFuture.cause() != null)
      if (channel.isRegistered()) {
        channel.close();
      } else {
        channel.unsafe().closeForcibly();
      }  
    return regFuture;
  }
  
  private static void doBind0(ChannelFuture regFuture, Channel channel, SocketAddress localAddress, ChannelPromise promise) { channel.eventLoop().execute(new Object(regFuture, channel, localAddress, promise)); }
  
  public B handler(ChannelHandler handler) {
    this.handler = (ChannelHandler)ObjectUtil.checkNotNull(handler, "handler");
    return (B)self();
  }
  
  @Deprecated
  public final EventLoopGroup group() { return this.group; }
  
  final Map.Entry<ChannelOption<?>, Object>[] newOptionsArray() { return newOptionsArray(this.options); }
  
  static Map.Entry<ChannelOption<?>, Object>[] newOptionsArray(Map<ChannelOption<?>, Object> options) {
    synchronized (options) {
      return (Entry[])(new LinkedHashMap(options)).entrySet().toArray(EMPTY_OPTION_ARRAY);
    } 
  }
  
  final Map.Entry<AttributeKey<?>, Object>[] newAttributesArray() { return newAttributesArray(attrs0()); }
  
  static Map.Entry<AttributeKey<?>, Object>[] newAttributesArray(Map<AttributeKey<?>, Object> attributes) { return (Entry[])attributes.entrySet().toArray(EMPTY_ATTRIBUTE_ARRAY); }
  
  final Map<ChannelOption<?>, Object> options0() { return this.options; }
  
  final Map<AttributeKey<?>, Object> attrs0() { return this.attrs; }
  
  final SocketAddress localAddress() { return this.localAddress; }
  
  final ChannelFactory<? extends C> channelFactory() { return this.channelFactory; }
  
  final ChannelHandler handler() { return this.handler; }
  
  final Map<ChannelOption<?>, Object> options() {
    synchronized (this.options) {
      return copiedMap(this.options);
    } 
  }
  
  final Map<AttributeKey<?>, Object> attrs() { return copiedMap(this.attrs); }
  
  static <K, V> Map<K, V> copiedMap(Map<K, V> map) {
    if (map.isEmpty())
      return Collections.emptyMap(); 
    return Collections.unmodifiableMap(new HashMap(map));
  }
  
  static void setAttributes(Channel channel, Entry[] attrs) {
    for (Map.Entry<AttributeKey<?>, Object> e : attrs) {
      AttributeKey<Object> key = (AttributeKey)e.getKey();
      channel.attr(key).set(e.getValue());
    } 
  }
  
  static void setChannelOptions(Channel channel, Entry[] options, InternalLogger logger) {
    for (Map.Entry<ChannelOption<?>, Object> e : options)
      setChannelOption(channel, (ChannelOption)e.getKey(), e.getValue(), logger); 
  }
  
  private static void setChannelOption(Channel channel, ChannelOption<?> option, Object value, InternalLogger logger) {
    try {
      if (!channel.config().setOption(option, value))
        logger.warn("Unknown channel option '{}' for channel '{}'", option, channel); 
    } catch (Throwable t) {
      logger.warn("Failed to set channel option '{}' with value '{}' for channel '{}'", new Object[] { option, value, channel, t });
    } 
  }
  
  public String toString() {
    StringBuilder buf = (new StringBuilder()).append(StringUtil.simpleClassName(this)).append('(').append(config()).append(')');
    return buf.toString();
  }
  
  AbstractBootstrap() {}
  
  public abstract B clone();
  
  abstract void init(Channel paramChannel) throws Exception;
  
  public abstract AbstractBootstrapConfig<B, C> config();
}
