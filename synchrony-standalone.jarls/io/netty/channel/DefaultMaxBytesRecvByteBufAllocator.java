package io.netty.channel;

import io.netty.util.internal.ObjectUtil;
import java.util.AbstractMap;
import java.util.Map;

public class DefaultMaxBytesRecvByteBufAllocator implements MaxBytesRecvByteBufAllocator {
  public DefaultMaxBytesRecvByteBufAllocator() { this(65536, 65536); }
  
  public DefaultMaxBytesRecvByteBufAllocator(int maxBytesPerRead, int maxBytesPerIndividualRead) {
    checkMaxBytesPerReadPair(maxBytesPerRead, maxBytesPerIndividualRead);
    this.maxBytesPerRead = maxBytesPerRead;
    this.maxBytesPerIndividualRead = maxBytesPerIndividualRead;
  }
  
  public RecvByteBufAllocator.Handle newHandle() { return new HandleImpl(this, null); }
  
  public int maxBytesPerRead() { return this.maxBytesPerRead; }
  
  public DefaultMaxBytesRecvByteBufAllocator maxBytesPerRead(int maxBytesPerRead) {
    ObjectUtil.checkPositive(maxBytesPerRead, "maxBytesPerRead");
    synchronized (this) {
      int maxBytesPerIndividualRead = maxBytesPerIndividualRead();
      if (maxBytesPerRead < maxBytesPerIndividualRead)
        throw new IllegalArgumentException("maxBytesPerRead cannot be less than maxBytesPerIndividualRead (" + maxBytesPerIndividualRead + "): " + maxBytesPerRead); 
      this.maxBytesPerRead = maxBytesPerRead;
    } 
    return this;
  }
  
  public int maxBytesPerIndividualRead() { return this.maxBytesPerIndividualRead; }
  
  public DefaultMaxBytesRecvByteBufAllocator maxBytesPerIndividualRead(int maxBytesPerIndividualRead) {
    ObjectUtil.checkPositive(maxBytesPerIndividualRead, "maxBytesPerIndividualRead");
    synchronized (this) {
      int maxBytesPerRead = maxBytesPerRead();
      if (maxBytesPerIndividualRead > maxBytesPerRead)
        throw new IllegalArgumentException("maxBytesPerIndividualRead cannot be greater than maxBytesPerRead (" + maxBytesPerRead + "): " + maxBytesPerIndividualRead); 
      this.maxBytesPerIndividualRead = maxBytesPerIndividualRead;
    } 
    return this;
  }
  
  public Map.Entry<Integer, Integer> maxBytesPerReadPair() { return new AbstractMap.SimpleEntry(Integer.valueOf(this.maxBytesPerRead), Integer.valueOf(this.maxBytesPerIndividualRead)); }
  
  private static void checkMaxBytesPerReadPair(int maxBytesPerRead, int maxBytesPerIndividualRead) {
    ObjectUtil.checkPositive(maxBytesPerRead, "maxBytesPerRead");
    ObjectUtil.checkPositive(maxBytesPerIndividualRead, "maxBytesPerIndividualRead");
    if (maxBytesPerRead < maxBytesPerIndividualRead)
      throw new IllegalArgumentException("maxBytesPerRead cannot be less than maxBytesPerIndividualRead (" + maxBytesPerIndividualRead + "): " + maxBytesPerRead); 
  }
  
  public DefaultMaxBytesRecvByteBufAllocator maxBytesPerReadPair(int maxBytesPerRead, int maxBytesPerIndividualRead) {
    checkMaxBytesPerReadPair(maxBytesPerRead, maxBytesPerIndividualRead);
    synchronized (this) {
      this.maxBytesPerRead = maxBytesPerRead;
      this.maxBytesPerIndividualRead = maxBytesPerIndividualRead;
    } 
    return this;
  }
}
