package io.netty.channel;

import io.netty.util.internal.ObjectUtil;

abstract class PendingBytesTracker implements MessageSizeEstimator.Handle {
  private final MessageSizeEstimator.Handle estimatorHandle;
  
  private PendingBytesTracker(MessageSizeEstimator.Handle estimatorHandle) { this.estimatorHandle = (MessageSizeEstimator.Handle)ObjectUtil.checkNotNull(estimatorHandle, "estimatorHandle"); }
  
  public final int size(Object msg) { return this.estimatorHandle.size(msg); }
  
  static PendingBytesTracker newTracker(Channel channel) {
    if (channel.pipeline() instanceof DefaultChannelPipeline)
      return new DefaultChannelPipelinePendingBytesTracker((DefaultChannelPipeline)channel.pipeline()); 
    ChannelOutboundBuffer buffer = channel.unsafe().outboundBuffer();
    MessageSizeEstimator.Handle handle = channel.config().getMessageSizeEstimator().newHandle();
    return (buffer == null) ? new NoopPendingBytesTracker(handle) : new ChannelOutboundBufferPendingBytesTracker(buffer, handle);
  }
  
  public abstract void incrementPendingOutboundBytes(long paramLong);
  
  public abstract void decrementPendingOutboundBytes(long paramLong);
}
