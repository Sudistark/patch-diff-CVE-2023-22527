package io.netty.channel.nio;

import io.netty.channel.AbstractChannel;
import io.netty.channel.Channel;
import io.netty.channel.ChannelOutboundBuffer;
import io.netty.channel.RecvByteBufAllocator;
import java.nio.channels.SelectableChannel;
import java.nio.channels.SelectionKey;
import java.util.List;

public abstract class AbstractNioMessageChannel extends AbstractNioChannel {
  boolean inputShutdown;
  
  protected AbstractNioMessageChannel(Channel parent, SelectableChannel ch, int readInterestOp) { super(parent, ch, readInterestOp); }
  
  protected AbstractNioChannel.AbstractNioUnsafe newUnsafe() { return new NioMessageUnsafe(this, null); }
  
  protected void doBeginRead() throws Exception {
    if (this.inputShutdown)
      return; 
    super.doBeginRead();
  }
  
  protected boolean continueReading(RecvByteBufAllocator.Handle allocHandle) { return allocHandle.continueReading(); }
  
  protected void doWrite(ChannelOutboundBuffer in) throws Exception {
    SelectionKey key = selectionKey();
    int interestOps = key.interestOps();
    int maxMessagesPerWrite = maxMessagesPerWrite();
    while (maxMessagesPerWrite > 0) {
      Object msg = in.current();
      if (msg == null)
        break; 
      try {
        boolean done = false;
        for (int i = config().getWriteSpinCount() - 1; i >= 0; i--) {
          if (doWriteMessage(msg, in)) {
            done = true;
            break;
          } 
        } 
        if (done) {
          maxMessagesPerWrite--;
          in.remove();
          continue;
        } 
        break;
      } catch (Exception e) {
        if (continueOnWriteError()) {
          maxMessagesPerWrite--;
          in.remove(e);
          continue;
        } 
        throw e;
      } 
    } 
    if (in.isEmpty()) {
      if ((interestOps & 0x4) != 0)
        key.interestOps(interestOps & 0xFFFFFFFB); 
    } else if ((interestOps & 0x4) == 0) {
      key.interestOps(interestOps | 0x4);
    } 
  }
  
  protected boolean continueOnWriteError() { return false; }
  
  protected boolean closeOnReadError(Throwable cause) {
    if (!isActive())
      return true; 
    if (cause instanceof java.net.PortUnreachableException)
      return false; 
    if (cause instanceof java.io.IOException)
      return !(this instanceof io.netty.channel.ServerChannel); 
    return true;
  }
  
  protected abstract int doReadMessages(List<Object> paramList) throws Exception;
  
  protected abstract boolean doWriteMessage(Object paramObject, ChannelOutboundBuffer paramChannelOutboundBuffer) throws Exception;
}
