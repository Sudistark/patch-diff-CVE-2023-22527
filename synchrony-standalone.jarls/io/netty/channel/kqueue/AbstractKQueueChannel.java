package io.netty.channel.kqueue;

import io.netty.buffer.ByteBuf;
import io.netty.buffer.ByteBufAllocator;
import io.netty.buffer.ByteBufUtil;
import io.netty.buffer.Unpooled;
import io.netty.channel.AbstractChannel;
import io.netty.channel.Channel;
import io.netty.channel.ChannelConfig;
import io.netty.channel.ChannelException;
import io.netty.channel.ChannelMetadata;
import io.netty.channel.ChannelOutboundBuffer;
import io.netty.channel.ChannelPromise;
import io.netty.channel.EventLoop;
import io.netty.channel.socket.SocketChannelConfig;
import io.netty.channel.unix.FileDescriptor;
import io.netty.channel.unix.UnixChannel;
import io.netty.channel.unix.UnixChannelUtil;
import io.netty.util.ReferenceCountUtil;
import io.netty.util.concurrent.Future;
import io.netty.util.internal.ObjectUtil;
import java.io.IOException;
import java.net.InetSocketAddress;
import java.net.SocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.AlreadyConnectedException;
import java.nio.channels.UnresolvedAddressException;

abstract class AbstractKQueueChannel extends AbstractChannel implements UnixChannel {
  private static final ChannelMetadata METADATA = new ChannelMetadata(false);
  
  private ChannelPromise connectPromise;
  
  private Future<?> connectTimeoutFuture;
  
  private SocketAddress requestedRemoteAddress;
  
  final BsdSocket socket;
  
  private boolean readFilterEnabled;
  
  private boolean writeFilterEnabled;
  
  boolean readReadyRunnablePending;
  
  boolean inputClosedSeenErrorOnRead;
  
  AbstractKQueueChannel(Channel parent, BsdSocket fd, boolean active) {
    super(parent);
    this.socket = (BsdSocket)ObjectUtil.checkNotNull(fd, "fd");
    this.active = active;
    if (active) {
      this.local = fd.localAddress();
      this.remote = fd.remoteAddress();
    } 
  }
  
  AbstractKQueueChannel(Channel parent, BsdSocket fd, SocketAddress remote) {
    super(parent);
    this.socket = (BsdSocket)ObjectUtil.checkNotNull(fd, "fd");
    this.active = true;
    this.remote = remote;
    this.local = fd.localAddress();
  }
  
  static boolean isSoErrorZero(BsdSocket fd) {
    try {
      return (fd.getSoError() == 0);
    } catch (IOException e) {
      throw new ChannelException(e);
    } 
  }
  
  public final FileDescriptor fd() { return this.socket; }
  
  public boolean isActive() { return this.active; }
  
  public ChannelMetadata metadata() { return METADATA; }
  
  protected void doClose() throws Exception {
    this.active = false;
    this.inputClosedSeenErrorOnRead = true;
    this.socket.close();
  }
  
  protected void doDisconnect() throws Exception { doClose(); }
  
  void resetCachedAddresses() throws Exception {
    this.local = this.socket.localAddress();
    this.remote = this.socket.remoteAddress();
  }
  
  protected boolean isCompatible(EventLoop loop) { return loop instanceof KQueueEventLoop; }
  
  public boolean isOpen() { return this.socket.isOpen(); }
  
  protected void doDeregister() throws Exception {
    ((KQueueEventLoop)eventLoop()).remove(this);
    this.readFilterEnabled = false;
    this.writeFilterEnabled = false;
  }
  
  void unregisterFilters() throws Exception {
    readFilter(false);
    writeFilter(false);
    clearRdHup0();
  }
  
  private void clearRdHup0() throws Exception { evSet0(Native.EVFILT_SOCK, Native.EV_DELETE_DISABLE, Native.NOTE_RDHUP); }
  
  protected final void doBeginRead() throws Exception {
    AbstractKQueueUnsafe unsafe = (AbstractKQueueUnsafe)unsafe();
    unsafe.readPending = true;
    readFilter(true);
    if (unsafe.maybeMoreDataToRead)
      unsafe.executeReadReadyRunnable(config()); 
  }
  
  protected void doRegister() throws Exception {
    this.readReadyRunnablePending = false;
    ((KQueueEventLoop)eventLoop()).add(this);
    if (this.writeFilterEnabled)
      evSet0(Native.EVFILT_WRITE, Native.EV_ADD_CLEAR_ENABLE); 
    if (this.readFilterEnabled)
      evSet0(Native.EVFILT_READ, Native.EV_ADD_CLEAR_ENABLE); 
    evSet0(Native.EVFILT_SOCK, Native.EV_ADD, Native.NOTE_RDHUP);
  }
  
  protected final ByteBuf newDirectBuffer(ByteBuf buf) { return newDirectBuffer(buf, buf); }
  
  protected final ByteBuf newDirectBuffer(Object holder, ByteBuf buf) {
    int readableBytes = buf.readableBytes();
    if (readableBytes == 0) {
      ReferenceCountUtil.release(holder);
      return Unpooled.EMPTY_BUFFER;
    } 
    ByteBufAllocator alloc = alloc();
    if (alloc.isDirectBufferPooled())
      return newDirectBuffer0(holder, buf, alloc, readableBytes); 
    ByteBuf directBuf = ByteBufUtil.threadLocalDirectBuffer();
    if (directBuf == null)
      return newDirectBuffer0(holder, buf, alloc, readableBytes); 
    directBuf.writeBytes(buf, buf.readerIndex(), readableBytes);
    ReferenceCountUtil.safeRelease(holder);
    return directBuf;
  }
  
  private static ByteBuf newDirectBuffer0(Object holder, ByteBuf buf, ByteBufAllocator alloc, int capacity) {
    ByteBuf directBuf = alloc.directBuffer(capacity);
    directBuf.writeBytes(buf, buf.readerIndex(), capacity);
    ReferenceCountUtil.safeRelease(holder);
    return directBuf;
  }
  
  protected static void checkResolvable(InetSocketAddress addr) {
    if (addr.isUnresolved())
      throw new UnresolvedAddressException(); 
  }
  
  protected final int doReadBytes(ByteBuf byteBuf) throws Exception {
    int localReadAmount, writerIndex = byteBuf.writerIndex();
    unsafe().recvBufAllocHandle().attemptedBytesRead(byteBuf.writableBytes());
    if (byteBuf.hasMemoryAddress()) {
      localReadAmount = this.socket.readAddress(byteBuf.memoryAddress(), writerIndex, byteBuf.capacity());
    } else {
      ByteBuffer buf = byteBuf.internalNioBuffer(writerIndex, byteBuf.writableBytes());
      localReadAmount = this.socket.read(buf, buf.position(), buf.limit());
    } 
    if (localReadAmount > 0)
      byteBuf.writerIndex(writerIndex + localReadAmount); 
    return localReadAmount;
  }
  
  protected final int doWriteBytes(ChannelOutboundBuffer in, ByteBuf buf) throws Exception {
    if (buf.hasMemoryAddress()) {
      int localFlushedAmount = this.socket.writeAddress(buf.memoryAddress(), buf.readerIndex(), buf.writerIndex());
      if (localFlushedAmount > 0) {
        in.removeBytes(localFlushedAmount);
        return 1;
      } 
    } else {
      ByteBuffer nioBuf = (buf.nioBufferCount() == 1) ? buf.internalNioBuffer(buf.readerIndex(), buf.readableBytes()) : buf.nioBuffer();
      int localFlushedAmount = this.socket.write(nioBuf, nioBuf.position(), nioBuf.limit());
      if (localFlushedAmount > 0) {
        nioBuf.position(nioBuf.position() + localFlushedAmount);
        in.removeBytes(localFlushedAmount);
        return 1;
      } 
    } 
    return Integer.MAX_VALUE;
  }
  
  final boolean shouldBreakReadReady(ChannelConfig config) { return (this.socket.isInputShutdown() && (this.inputClosedSeenErrorOnRead || !isAllowHalfClosure(config))); }
  
  private static boolean isAllowHalfClosure(ChannelConfig config) {
    if (config instanceof KQueueDomainSocketChannelConfig)
      return ((KQueueDomainSocketChannelConfig)config).isAllowHalfClosure(); 
    return (config instanceof SocketChannelConfig && ((SocketChannelConfig)config)
      .isAllowHalfClosure());
  }
  
  final void clearReadFilter() throws Exception {
    if (isRegistered()) {
      EventLoop loop = eventLoop();
      AbstractKQueueUnsafe unsafe = (AbstractKQueueUnsafe)unsafe();
      if (loop.inEventLoop()) {
        unsafe.clearReadFilter0();
      } else {
        loop.execute(new Object(this, unsafe));
      } 
    } else {
      this.readFilterEnabled = false;
    } 
  }
  
  void readFilter(boolean readFilterEnabled) throws IOException {
    if (this.readFilterEnabled != readFilterEnabled) {
      this.readFilterEnabled = readFilterEnabled;
      evSet(Native.EVFILT_READ, readFilterEnabled ? Native.EV_ADD_CLEAR_ENABLE : Native.EV_DELETE_DISABLE);
    } 
  }
  
  void writeFilter(boolean writeFilterEnabled) throws IOException {
    if (this.writeFilterEnabled != writeFilterEnabled) {
      this.writeFilterEnabled = writeFilterEnabled;
      evSet(Native.EVFILT_WRITE, writeFilterEnabled ? Native.EV_ADD_CLEAR_ENABLE : Native.EV_DELETE_DISABLE);
    } 
  }
  
  private void evSet(short filter, short flags) {
    if (isRegistered())
      evSet0(filter, flags); 
  }
  
  private void evSet0(short filter, short flags) { evSet0(filter, flags, 0); }
  
  private void evSet0(short filter, short flags, int fflags) {
    if (isOpen())
      ((KQueueEventLoop)eventLoop()).evSet(this, filter, flags, fflags); 
  }
  
  protected void doBind(SocketAddress local) throws Exception {
    if (local instanceof InetSocketAddress)
      checkResolvable((InetSocketAddress)local); 
    this.socket.bind(local);
    this.local = this.socket.localAddress();
  }
  
  protected boolean doConnect(SocketAddress remoteAddress, SocketAddress localAddress) throws Exception {
    if (localAddress instanceof InetSocketAddress)
      checkResolvable((InetSocketAddress)localAddress); 
    InetSocketAddress remoteSocketAddr = (remoteAddress instanceof InetSocketAddress) ? (InetSocketAddress)remoteAddress : null;
    if (remoteSocketAddr != null)
      checkResolvable(remoteSocketAddr); 
    if (this.remote != null)
      throw new AlreadyConnectedException(); 
    if (localAddress != null)
      this.socket.bind(localAddress); 
    boolean connected = doConnect0(remoteAddress, localAddress);
    if (connected)
      this
        .remote = (remoteSocketAddr == null) ? remoteAddress : UnixChannelUtil.computeRemoteAddr(remoteSocketAddr, this.socket.remoteAddress()); 
    this.local = this.socket.localAddress();
    return connected;
  }
  
  protected boolean doConnect0(SocketAddress remoteAddress, SocketAddress localAddress) throws Exception {
    success = false;
    try {
      boolean connected = this.socket.connect(remoteAddress);
      if (!connected)
        writeFilter(true); 
      success = true;
      return connected;
    } finally {
      if (!success)
        doClose(); 
    } 
  }
  
  protected SocketAddress localAddress0() { return this.local; }
  
  protected SocketAddress remoteAddress0() { return this.remote; }
  
  protected abstract AbstractKQueueUnsafe newUnsafe();
  
  public abstract KQueueChannelConfig config();
}
