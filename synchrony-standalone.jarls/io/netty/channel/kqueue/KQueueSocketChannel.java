package io.netty.channel.kqueue;

import io.netty.buffer.ByteBuf;
import io.netty.channel.AbstractChannel;
import io.netty.channel.Channel;
import io.netty.channel.ChannelConfig;
import io.netty.channel.ChannelOutboundBuffer;
import io.netty.channel.socket.InternetProtocolFamily;
import io.netty.channel.socket.ServerSocketChannel;
import io.netty.channel.socket.SocketChannel;
import io.netty.channel.socket.SocketChannelConfig;
import io.netty.channel.unix.IovArray;
import java.net.InetSocketAddress;
import java.net.SocketAddress;

public final class KQueueSocketChannel extends AbstractKQueueStreamChannel implements SocketChannel {
  private final KQueueSocketChannelConfig config;
  
  public KQueueSocketChannel() {
    super(null, BsdSocket.newSocketStream(), false);
    this.config = new KQueueSocketChannelConfig(this);
  }
  
  public KQueueSocketChannel(InternetProtocolFamily protocol) {
    super(null, BsdSocket.newSocketStream(protocol), false);
    this.config = new KQueueSocketChannelConfig(this);
  }
  
  public KQueueSocketChannel(int fd) {
    super(new BsdSocket(fd));
    this.config = new KQueueSocketChannelConfig(this);
  }
  
  KQueueSocketChannel(Channel parent, BsdSocket fd, InetSocketAddress remoteAddress) {
    super(parent, fd, remoteAddress);
    this.config = new KQueueSocketChannelConfig(this);
  }
  
  public InetSocketAddress remoteAddress() { return (InetSocketAddress)super.remoteAddress(); }
  
  public InetSocketAddress localAddress() { return (InetSocketAddress)super.localAddress(); }
  
  public KQueueSocketChannelConfig config() { return this.config; }
  
  public ServerSocketChannel parent() { return (ServerSocketChannel)super.parent(); }
  
  protected boolean doConnect0(SocketAddress remoteAddress, SocketAddress localAddress) throws Exception {
    ChannelOutboundBuffer outbound = unsafe().outboundBuffer();
    outbound.addFlush();
    Object curr;
    if (this.config.isTcpFastOpenConnect() && curr = outbound.current() instanceof ByteBuf) {
      ByteBuf initialData = (ByteBuf)curr;
      if (initialData.isReadable()) {
        iov = new IovArray(this.config.getAllocator().directBuffer());
        try {
          iov.add(initialData, initialData.readerIndex(), initialData.readableBytes());
          int bytesSent = this.socket.connectx((InetSocketAddress)localAddress, (InetSocketAddress)remoteAddress, iov, true);
          writeFilter(true);
          outbound.removeBytes(Math.abs(bytesSent));
          return (bytesSent > 0);
        } finally {
          iov.release();
        } 
      } 
    } 
    return super.doConnect0(remoteAddress, localAddress);
  }
  
  protected AbstractKQueueChannel.AbstractKQueueUnsafe newUnsafe() { return new KQueueSocketChannelUnsafe(this, null); }
}
