package io.netty.channel.kqueue;

import io.netty.buffer.ByteBuf;
import io.netty.channel.AbstractChannel;
import io.netty.channel.AddressedEnvelope;
import io.netty.channel.ChannelConfig;
import io.netty.channel.ChannelFuture;
import io.netty.channel.ChannelMetadata;
import io.netty.channel.ChannelPromise;
import io.netty.channel.DefaultAddressedEnvelope;
import io.netty.channel.socket.DatagramChannel;
import io.netty.channel.socket.DatagramChannelConfig;
import io.netty.channel.socket.DatagramPacket;
import io.netty.channel.socket.InternetProtocolFamily;
import io.netty.channel.unix.IovArray;
import io.netty.channel.unix.UnixChannelUtil;
import io.netty.util.internal.ObjectUtil;
import io.netty.util.internal.StringUtil;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.NetworkInterface;
import java.net.SocketAddress;
import java.net.SocketException;
import java.nio.ByteBuffer;
import java.nio.channels.UnresolvedAddressException;

public final class KQueueDatagramChannel extends AbstractKQueueDatagramChannel implements DatagramChannel {
  private static final String EXPECTED_TYPES = " (expected: " + 
    StringUtil.simpleClassName(DatagramPacket.class) + ", " + 
    StringUtil.simpleClassName(AddressedEnvelope.class) + '<' + 
    StringUtil.simpleClassName(ByteBuf.class) + ", " + 
    StringUtil.simpleClassName(InetSocketAddress.class) + ">, " + 
    StringUtil.simpleClassName(ByteBuf.class) + ')';
  
  private final KQueueDatagramChannelConfig config;
  
  public KQueueDatagramChannel() {
    super(null, BsdSocket.newSocketDgram(), false);
    this.config = new KQueueDatagramChannelConfig(this);
  }
  
  public KQueueDatagramChannel(InternetProtocolFamily protocol) {
    super(null, BsdSocket.newSocketDgram(protocol), false);
    this.config = new KQueueDatagramChannelConfig(this);
  }
  
  public KQueueDatagramChannel(int fd) { this(new BsdSocket(fd), true); }
  
  KQueueDatagramChannel(BsdSocket socket, boolean active) {
    super(null, socket, active);
    this.config = new KQueueDatagramChannelConfig(this);
  }
  
  public InetSocketAddress remoteAddress() { return (InetSocketAddress)super.remoteAddress(); }
  
  public InetSocketAddress localAddress() { return (InetSocketAddress)super.localAddress(); }
  
  public boolean isActive() { return (this.socket.isOpen() && ((this.config.getActiveOnOpen() && isRegistered()) || this.active)); }
  
  public boolean isConnected() { return this.connected; }
  
  public ChannelFuture joinGroup(InetAddress multicastAddress) { return joinGroup(multicastAddress, newPromise()); }
  
  public ChannelFuture joinGroup(InetAddress multicastAddress, ChannelPromise promise) {
    try {
      NetworkInterface iface = config().getNetworkInterface();
      if (iface == null)
        iface = NetworkInterface.getByInetAddress(localAddress().getAddress()); 
      return joinGroup(multicastAddress, iface, null, promise);
    } catch (SocketException e) {
      promise.setFailure(e);
      return promise;
    } 
  }
  
  public ChannelFuture joinGroup(InetSocketAddress multicastAddress, NetworkInterface networkInterface) { return joinGroup(multicastAddress, networkInterface, newPromise()); }
  
  public ChannelFuture joinGroup(InetSocketAddress multicastAddress, NetworkInterface networkInterface, ChannelPromise promise) { return joinGroup(multicastAddress.getAddress(), networkInterface, null, promise); }
  
  public ChannelFuture joinGroup(InetAddress multicastAddress, NetworkInterface networkInterface, InetAddress source) { return joinGroup(multicastAddress, networkInterface, source, newPromise()); }
  
  public ChannelFuture joinGroup(InetAddress multicastAddress, NetworkInterface networkInterface, InetAddress source, ChannelPromise promise) {
    ObjectUtil.checkNotNull(multicastAddress, "multicastAddress");
    ObjectUtil.checkNotNull(networkInterface, "networkInterface");
    promise.setFailure(new UnsupportedOperationException("Multicast not supported"));
    return promise;
  }
  
  public ChannelFuture leaveGroup(InetAddress multicastAddress) { return leaveGroup(multicastAddress, newPromise()); }
  
  public ChannelFuture leaveGroup(InetAddress multicastAddress, ChannelPromise promise) {
    try {
      return leaveGroup(multicastAddress, 
          NetworkInterface.getByInetAddress(localAddress().getAddress()), null, promise);
    } catch (SocketException e) {
      promise.setFailure(e);
      return promise;
    } 
  }
  
  public ChannelFuture leaveGroup(InetSocketAddress multicastAddress, NetworkInterface networkInterface) { return leaveGroup(multicastAddress, networkInterface, newPromise()); }
  
  public ChannelFuture leaveGroup(InetSocketAddress multicastAddress, NetworkInterface networkInterface, ChannelPromise promise) { return leaveGroup(multicastAddress.getAddress(), networkInterface, null, promise); }
  
  public ChannelFuture leaveGroup(InetAddress multicastAddress, NetworkInterface networkInterface, InetAddress source) { return leaveGroup(multicastAddress, networkInterface, source, newPromise()); }
  
  public ChannelFuture leaveGroup(InetAddress multicastAddress, NetworkInterface networkInterface, InetAddress source, ChannelPromise promise) {
    ObjectUtil.checkNotNull(multicastAddress, "multicastAddress");
    ObjectUtil.checkNotNull(networkInterface, "networkInterface");
    promise.setFailure(new UnsupportedOperationException("Multicast not supported"));
    return promise;
  }
  
  public ChannelFuture block(InetAddress multicastAddress, NetworkInterface networkInterface, InetAddress sourceToBlock) { return block(multicastAddress, networkInterface, sourceToBlock, newPromise()); }
  
  public ChannelFuture block(InetAddress multicastAddress, NetworkInterface networkInterface, InetAddress sourceToBlock, ChannelPromise promise) {
    ObjectUtil.checkNotNull(multicastAddress, "multicastAddress");
    ObjectUtil.checkNotNull(sourceToBlock, "sourceToBlock");
    ObjectUtil.checkNotNull(networkInterface, "networkInterface");
    promise.setFailure(new UnsupportedOperationException("Multicast not supported"));
    return promise;
  }
  
  public ChannelFuture block(InetAddress multicastAddress, InetAddress sourceToBlock) { return block(multicastAddress, sourceToBlock, newPromise()); }
  
  public ChannelFuture block(InetAddress multicastAddress, InetAddress sourceToBlock, ChannelPromise promise) {
    try {
      return block(multicastAddress, 
          
          NetworkInterface.getByInetAddress(localAddress().getAddress()), sourceToBlock, promise);
    } catch (Throwable e) {
      promise.setFailure(e);
      return promise;
    } 
  }
  
  protected AbstractKQueueChannel.AbstractKQueueUnsafe newUnsafe() { return new KQueueDatagramChannelUnsafe(this); }
  
  protected void doBind(SocketAddress localAddress) throws Exception {
    super.doBind(localAddress);
    this.active = true;
  }
  
  protected boolean doWriteMessage(Object msg) throws Exception {
    long writtenBytes;
    InetSocketAddress remoteAddress;
    ByteBuf data;
    if (msg instanceof AddressedEnvelope) {
      AddressedEnvelope<ByteBuf, InetSocketAddress> envelope = (AddressedEnvelope)msg;
      data = (ByteBuf)envelope.content();
      remoteAddress = (InetSocketAddress)envelope.recipient();
    } else {
      data = (ByteBuf)msg;
      remoteAddress = null;
    } 
    int dataLen = data.readableBytes();
    if (dataLen == 0)
      return true; 
    if (data.hasMemoryAddress()) {
      long memoryAddress = data.memoryAddress();
      if (remoteAddress == null) {
        writtenBytes = this.socket.writeAddress(memoryAddress, data.readerIndex(), data.writerIndex());
      } else {
        writtenBytes = this.socket.sendToAddress(memoryAddress, data.readerIndex(), data.writerIndex(), remoteAddress
            .getAddress(), remoteAddress.getPort());
      } 
    } else if (data.nioBufferCount() > 1) {
      IovArray array = ((KQueueEventLoop)eventLoop()).cleanArray();
      array.add(data, data.readerIndex(), data.readableBytes());
      int cnt = array.count();
      assert cnt != 0;
      if (remoteAddress == null) {
        writtenBytes = this.socket.writevAddresses(array.memoryAddress(0), cnt);
      } else {
        writtenBytes = this.socket.sendToAddresses(array.memoryAddress(0), cnt, remoteAddress
            .getAddress(), remoteAddress.getPort());
      } 
    } else {
      ByteBuffer nioData = data.internalNioBuffer(data.readerIndex(), data.readableBytes());
      if (remoteAddress == null) {
        writtenBytes = this.socket.write(nioData, nioData.position(), nioData.limit());
      } else {
        writtenBytes = this.socket.sendTo(nioData, nioData.position(), nioData.limit(), remoteAddress
            .getAddress(), remoteAddress.getPort());
      } 
    } 
    return (writtenBytes > 0L);
  }
  
  private static void checkUnresolved(AddressedEnvelope<?, ?> envelope) {
    if (envelope.recipient() instanceof InetSocketAddress && ((InetSocketAddress)envelope
      .recipient()).isUnresolved())
      throw new UnresolvedAddressException(); 
  }
  
  protected Object filterOutboundMessage(Object msg) {
    if (msg instanceof DatagramPacket) {
      DatagramPacket packet = (DatagramPacket)msg;
      checkUnresolved(packet);
      ByteBuf content = (ByteBuf)packet.content();
      return UnixChannelUtil.isBufferCopyNeededForWrite(content) ? new DatagramPacket(
          newDirectBuffer(packet, content), (InetSocketAddress)packet.recipient()) : msg;
    } 
    if (msg instanceof ByteBuf) {
      ByteBuf buf = (ByteBuf)msg;
      return UnixChannelUtil.isBufferCopyNeededForWrite(buf) ? newDirectBuffer(buf) : buf;
    } 
    if (msg instanceof AddressedEnvelope) {
      AddressedEnvelope<Object, SocketAddress> e = (AddressedEnvelope)msg;
      checkUnresolved(e);
      if (e.content() instanceof ByteBuf && (e
        .recipient() == null || e.recipient() instanceof InetSocketAddress)) {
        ByteBuf content = (ByteBuf)e.content();
        return UnixChannelUtil.isBufferCopyNeededForWrite(content) ? new DefaultAddressedEnvelope(
            
            newDirectBuffer(e, content), (InetSocketAddress)e.recipient()) : e;
      } 
    } 
    throw new UnsupportedOperationException("unsupported message type: " + 
        StringUtil.simpleClassName(msg) + EXPECTED_TYPES);
  }
  
  public KQueueDatagramChannelConfig config() { return this.config; }
  
  protected void doDisconnect() {
    this.socket.disconnect();
    this.connected = this.active = false;
    resetCachedAddresses();
  }
  
  protected boolean doConnect(SocketAddress remoteAddress, SocketAddress localAddress) throws Exception {
    if (super.doConnect(remoteAddress, localAddress)) {
      this.connected = true;
      return true;
    } 
    return false;
  }
  
  protected void doClose() {
    super.doClose();
    this.connected = false;
  }
}
