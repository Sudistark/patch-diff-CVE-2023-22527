package io.netty.channel.kqueue;

import io.netty.channel.DefaultFileRegion;
import io.netty.channel.socket.InternetProtocolFamily;
import io.netty.channel.unix.Errors;
import io.netty.channel.unix.IovArray;
import io.netty.channel.unix.NativeInetAddress;
import io.netty.channel.unix.PeerCredentials;
import io.netty.channel.unix.Socket;
import io.netty.util.internal.ObjectUtil;
import java.io.IOException;
import java.net.Inet6Address;
import java.net.InetAddress;
import java.net.InetSocketAddress;

final class BsdSocket extends Socket {
  private static final int APPLE_SND_LOW_AT_MAX = 131072;
  
  private static final int FREEBSD_SND_LOW_AT_MAX = 32768;
  
  static final int BSD_SND_LOW_AT_MAX = Math.min(131072, 32768);
  
  private static final int UNSPECIFIED_SOURCE_INTERFACE = 0;
  
  BsdSocket(int fd) { super(fd); }
  
  void setAcceptFilter(AcceptFilter acceptFilter) throws IOException { setAcceptFilter(intValue(), acceptFilter.filterName(), acceptFilter.filterArgs()); }
  
  void setTcpNoPush(boolean tcpNoPush) throws IOException { setTcpNoPush(intValue(), tcpNoPush ? 1 : 0); }
  
  void setSndLowAt(int lowAt) { setSndLowAt(intValue(), lowAt); }
  
  public void setTcpFastOpen(boolean enableTcpFastOpen) throws IOException { setTcpFastOpen(intValue(), enableTcpFastOpen ? 1 : 0); }
  
  boolean isTcpNoPush() throws IOException { return (getTcpNoPush(intValue()) != 0); }
  
  int getSndLowAt() throws IOException { return getSndLowAt(intValue()); }
  
  AcceptFilter getAcceptFilter() throws IOException {
    String[] result = getAcceptFilter(intValue());
    return (result == null) ? AcceptFilter.PLATFORM_UNSUPPORTED : new AcceptFilter(result[0], result[1]);
  }
  
  public boolean isTcpFastOpen() throws IOException { return (isTcpFastOpen(intValue()) != 0); }
  
  PeerCredentials getPeerCredentials() throws IOException { return getPeerCredentials(intValue()); }
  
  long sendFile(DefaultFileRegion src, long baseOffset, long offset, long length) throws IOException {
    src.open();
    long res = sendFile(intValue(), src, baseOffset, offset, length);
    if (res >= 0L)
      return res; 
    return Errors.ioResult("sendfile", (int)res);
  }
  
  int connectx(InetSocketAddress source, InetSocketAddress destination, IovArray data, boolean tcpFastOpen) throws IOException {
    int iovDataLength, iovCount;
    long iovAddress;
    int destinationScopeId;
    byte[] destinationAddress;
    int sourcePort, sourceScopeId;
    byte[] sourceAddress;
    boolean sourceIPv6;
    ObjectUtil.checkNotNull(destination, "Destination InetSocketAddress cannot be null.");
    int flags = tcpFastOpen ? Native.CONNECT_TCP_FASTOPEN : 0;
    if (source == null) {
      sourceIPv6 = false;
      sourceAddress = null;
      sourceScopeId = 0;
      sourcePort = 0;
    } else {
      InetAddress sourceInetAddress = source.getAddress();
      sourceIPv6 = useIpv6(this, sourceInetAddress);
      if (sourceInetAddress instanceof Inet6Address) {
        sourceAddress = sourceInetAddress.getAddress();
        sourceScopeId = ((Inet6Address)sourceInetAddress).getScopeId();
      } else {
        sourceScopeId = 0;
        sourceAddress = NativeInetAddress.ipv4MappedIpv6Address(sourceInetAddress.getAddress());
      } 
      sourcePort = source.getPort();
    } 
    InetAddress destinationInetAddress = destination.getAddress();
    boolean destinationIPv6 = useIpv6(this, destinationInetAddress);
    if (destinationInetAddress instanceof Inet6Address) {
      destinationAddress = destinationInetAddress.getAddress();
      destinationScopeId = ((Inet6Address)destinationInetAddress).getScopeId();
    } else {
      destinationScopeId = 0;
      destinationAddress = NativeInetAddress.ipv4MappedIpv6Address(destinationInetAddress.getAddress());
    } 
    int destinationPort = destination.getPort();
    if (data == null || data.count() == 0) {
      iovAddress = 0L;
      iovCount = 0;
      iovDataLength = 0;
    } else {
      iovAddress = data.memoryAddress(0);
      iovCount = data.count();
      long size = data.size();
      if (size > 2147483647L)
        throw new IOException("IovArray.size() too big: " + size + " bytes."); 
      iovDataLength = (int)size;
    } 
    int result = connectx(intValue(), 0, sourceIPv6, sourceAddress, sourceScopeId, sourcePort, destinationIPv6, destinationAddress, destinationScopeId, destinationPort, flags, iovAddress, iovCount, iovDataLength);
    if (result == Errors.ERRNO_EINPROGRESS_NEGATIVE)
      return -iovDataLength; 
    if (result < 0)
      return Errors.ioResult("connectx", result); 
    return result;
  }
  
  public static BsdSocket newSocketStream() { return new BsdSocket(newSocketStream0()); }
  
  public static BsdSocket newSocketStream(InternetProtocolFamily protocol) { return new BsdSocket(newSocketStream0(protocol)); }
  
  public static BsdSocket newSocketDgram() { return new BsdSocket(newSocketDgram0()); }
  
  public static BsdSocket newSocketDgram(InternetProtocolFamily protocol) { return new BsdSocket(newSocketDgram0(protocol)); }
  
  public static BsdSocket newSocketDomain() { return new BsdSocket(newSocketDomain0()); }
  
  public static BsdSocket newSocketDomainDgram() { return new BsdSocket(newSocketDomainDgram0()); }
  
  private static native long sendFile(int paramInt, DefaultFileRegion paramDefaultFileRegion, long paramLong1, long paramLong2, long paramLong3) throws IOException;
  
  private static native int connectx(int paramInt1, int paramInt2, boolean paramBoolean1, byte[] paramArrayOfByte1, int paramInt3, int paramInt4, boolean paramBoolean2, byte[] paramArrayOfByte2, int paramInt5, int paramInt6, int paramInt7, long paramLong, int paramInt8, int paramInt9);
  
  private static native String[] getAcceptFilter(int paramInt) throws IOException;
  
  private static native int getTcpNoPush(int paramInt) throws IOException;
  
  private static native int getSndLowAt(int paramInt) throws IOException;
  
  private static native int isTcpFastOpen(int paramInt) throws IOException;
  
  private static native PeerCredentials getPeerCredentials(int paramInt) throws IOException;
  
  private static native void setAcceptFilter(int paramInt, String paramString1, String paramString2) throws IOException;
  
  private static native void setTcpNoPush(int paramInt1, int paramInt2) throws IOException;
  
  private static native void setSndLowAt(int paramInt1, int paramInt2) throws IOException;
  
  private static native void setTcpFastOpen(int paramInt1, int paramInt2) throws IOException;
}
