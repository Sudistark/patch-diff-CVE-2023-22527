package io.netty.channel.kqueue;

import io.netty.buffer.ByteBuf;
import io.netty.buffer.ByteBufAllocator;
import io.netty.channel.ChannelConfig;
import io.netty.channel.RecvByteBufAllocator;
import io.netty.channel.unix.PreferredDirectByteBufAllocator;
import io.netty.util.UncheckedBooleanSupplier;

final class KQueueRecvByteAllocatorHandle extends RecvByteBufAllocator.DelegatingHandle implements RecvByteBufAllocator.ExtendedHandle {
  private final PreferredDirectByteBufAllocator preferredDirectByteBufAllocator = new PreferredDirectByteBufAllocator();
  
  private final UncheckedBooleanSupplier defaultMaybeMoreDataSupplier = new Object(this);
  
  private boolean overrideGuess;
  
  private boolean readEOF;
  
  private long numberBytesPending;
  
  KQueueRecvByteAllocatorHandle(RecvByteBufAllocator.ExtendedHandle handle) { super(handle); }
  
  public int guess() { return this.overrideGuess ? guess0() : delegate().guess(); }
  
  public void reset(ChannelConfig config) {
    this.overrideGuess = ((KQueueChannelConfig)config).getRcvAllocTransportProvidesGuess();
    delegate().reset(config);
  }
  
  public ByteBuf allocate(ByteBufAllocator alloc) {
    this.preferredDirectByteBufAllocator.updateAllocator(alloc);
    return this.overrideGuess ? this.preferredDirectByteBufAllocator.ioBuffer(guess0()) : 
      delegate().allocate(this.preferredDirectByteBufAllocator);
  }
  
  public void lastBytesRead(int bytes) {
    this.numberBytesPending = (bytes < 0) ? 0L : Math.max(0L, this.numberBytesPending - bytes);
    delegate().lastBytesRead(bytes);
  }
  
  public boolean continueReading(UncheckedBooleanSupplier maybeMoreDataSupplier) { return ((RecvByteBufAllocator.ExtendedHandle)delegate()).continueReading(maybeMoreDataSupplier); }
  
  public boolean continueReading() { return continueReading(this.defaultMaybeMoreDataSupplier); }
  
  void readEOF() { this.readEOF = true; }
  
  boolean isReadEOF() { return this.readEOF; }
  
  void numberBytesPending(long numberBytesPending) { this.numberBytesPending = numberBytesPending; }
  
  boolean maybeMoreDataToRead() { return (this.numberBytesPending != 0L); }
  
  private int guess0() { return (int)Math.min(this.numberBytesPending, 2147483647L); }
}
