package io.netty.channel.unix;

import io.netty.util.internal.ClassInitializerUtil;
import java.util.concurrent.atomic.AtomicBoolean;

public final class Unix {
  private static final AtomicBoolean registered = new AtomicBoolean();
  
  static  {
    ClassInitializerUtil.tryLoadClasses(Unix.class, new Class[] { OutOfMemoryError.class, RuntimeException.class, java.nio.channels.ClosedChannelException.class, java.io.IOException.class, java.net.PortUnreachableException.class, DatagramSocketAddress.class, DomainDatagramSocketAddress.class, java.net.InetSocketAddress.class });
  }
  
  public static void registerInternal(Runnable registerTask) {
    registerTask.run();
    Socket.initialize();
  }
  
  @Deprecated
  public static boolean isAvailable() { return false; }
  
  @Deprecated
  public static void ensureAvailability() { throw new UnsupportedOperationException(); }
  
  @Deprecated
  public static Throwable unavailabilityCause() { return new UnsupportedOperationException(); }
}
