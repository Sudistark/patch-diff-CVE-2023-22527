package io.netty.channel.epoll;

import io.netty.channel.unix.Errors;
import io.netty.channel.unix.FileDescriptor;
import io.netty.channel.unix.Socket;
import io.netty.channel.unix.Unix;
import io.netty.util.internal.ClassInitializerUtil;
import io.netty.util.internal.NativeLibraryLoader;
import io.netty.util.internal.PlatformDependent;
import io.netty.util.internal.ThrowableUtil;
import io.netty.util.internal.logging.InternalLogger;
import io.netty.util.internal.logging.InternalLoggerFactory;
import java.io.IOException;
import java.nio.channels.Selector;

public final class Native {
  private static final InternalLogger logger = InternalLoggerFactory.getInstance(Native.class);
  
  public static final int EPOLLIN;
  
  public static final int EPOLLOUT;
  
  public static final int EPOLLRDHUP;
  
  public static final int EPOLLET;
  
  public static final int EPOLLERR;
  
  public static final boolean IS_SUPPORTING_SENDMMSG;
  
  static final boolean IS_SUPPORTING_RECVMMSG;
  
  static final boolean IS_SUPPORTING_UDP_SEGMENT;
  
  private static final int TFO_ENABLED_CLIENT_MASK = 1;
  
  private static final int TFO_ENABLED_SERVER_MASK = 2;
  
  private static final int TCP_FASTOPEN_MODE;
  
  static final boolean IS_SUPPORTING_TCP_FASTOPEN_CLIENT;
  
  static final boolean IS_SUPPORTING_TCP_FASTOPEN_SERVER;
  
  @Deprecated
  public static final boolean IS_SUPPORTING_TCP_FASTOPEN;
  
  public static final int TCP_MD5SIG_MAXKEYLEN;
  
  public static final String KERNEL_VERSION;
  
  static  {
    selector = null;
    try {
      selector = Selector.open();
    } catch (IOException iOException) {}
    ClassInitializerUtil.tryLoadClasses(Native.class, new Class[] { io.netty.channel.unix.PeerCredentials.class, io.netty.channel.DefaultFileRegion.class, java.nio.channels.FileChannel.class, java.io.FileDescriptor.class, NativeDatagramPacketArray.NativeDatagramPacket.class });
    try {
      offsetofEpollData();
    } catch (UnsatisfiedLinkError ignore) {
      loadNativeLibrary();
    } finally {
      try {
        if (selector != null)
          selector.close(); 
      } catch (IOException iOException) {}
    } 
    Unix.registerInternal(new Object());
    EPOLLIN = NativeStaticallyReferencedJniMethods.epollin();
    EPOLLOUT = NativeStaticallyReferencedJniMethods.epollout();
    EPOLLRDHUP = NativeStaticallyReferencedJniMethods.epollrdhup();
    EPOLLET = NativeStaticallyReferencedJniMethods.epollet();
    EPOLLERR = NativeStaticallyReferencedJniMethods.epollerr();
    IS_SUPPORTING_SENDMMSG = NativeStaticallyReferencedJniMethods.isSupportingSendmmsg();
    IS_SUPPORTING_RECVMMSG = NativeStaticallyReferencedJniMethods.isSupportingRecvmmsg();
    IS_SUPPORTING_UDP_SEGMENT = isSupportingUdpSegment();
    TCP_FASTOPEN_MODE = NativeStaticallyReferencedJniMethods.tcpFastopenMode();
    IS_SUPPORTING_TCP_FASTOPEN_CLIENT = ((TCP_FASTOPEN_MODE & true) == 1);
    IS_SUPPORTING_TCP_FASTOPEN_SERVER = ((TCP_FASTOPEN_MODE & 0x2) == 2);
    IS_SUPPORTING_TCP_FASTOPEN = (IS_SUPPORTING_TCP_FASTOPEN_CLIENT || IS_SUPPORTING_TCP_FASTOPEN_SERVER);
    TCP_MD5SIG_MAXKEYLEN = NativeStaticallyReferencedJniMethods.tcpMd5SigMaxKeyLen();
    KERNEL_VERSION = NativeStaticallyReferencedJniMethods.kernelVersion();
  }
  
  public static FileDescriptor newEventFd() { return new FileDescriptor(eventFd()); }
  
  public static FileDescriptor newTimerFd() { return new FileDescriptor(timerFd()); }
  
  public static FileDescriptor newEpollCreate() { return new FileDescriptor(epollCreate()); }
  
  @Deprecated
  public static int epollWait(FileDescriptor epollFd, EpollEventArray events, FileDescriptor timerFd, int timeoutSec, int timeoutNs) throws IOException {
    long result = epollWait(epollFd, events, timerFd, timeoutSec, timeoutNs, -1L);
    return epollReady(result);
  }
  
  static long epollWait(FileDescriptor epollFd, EpollEventArray events, FileDescriptor timerFd, int timeoutSec, int timeoutNs, long millisThreshold) throws IOException {
    if (timeoutSec == 0 && timeoutNs == 0)
      return epollWait(epollFd, events, 0) << 32; 
    if (timeoutSec == Integer.MAX_VALUE) {
      timeoutSec = 0;
      timeoutNs = 0;
    } 
    long result = epollWait0(epollFd.intValue(), events.memoryAddress(), events.length(), timerFd.intValue(), timeoutSec, timeoutNs, millisThreshold);
    int ready = epollReady(result);
    if (ready < 0)
      throw Errors.newIOException("epoll_wait", ready); 
    return result;
  }
  
  static int epollReady(long result) { return (int)(result >> 32); }
  
  static boolean epollTimerWasUsed(long result) { return ((result & 0xFFL) != 0L); }
  
  static int epollWait(FileDescriptor epollFd, EpollEventArray events, boolean immediatePoll) throws IOException { return epollWait(epollFd, events, immediatePoll ? 0 : -1); }
  
  static int epollWait(FileDescriptor epollFd, EpollEventArray events, int timeoutMillis) throws IOException {
    int ready = epollWait(epollFd.intValue(), events.memoryAddress(), events.length(), timeoutMillis);
    if (ready < 0)
      throw Errors.newIOException("epoll_wait", ready); 
    return ready;
  }
  
  public static int epollBusyWait(FileDescriptor epollFd, EpollEventArray events) throws IOException {
    int ready = epollBusyWait0(epollFd.intValue(), events.memoryAddress(), events.length());
    if (ready < 0)
      throw Errors.newIOException("epoll_wait", ready); 
    return ready;
  }
  
  public static void epollCtlAdd(int efd, int fd, int flags) throws IOException {
    int res = epollCtlAdd0(efd, fd, flags);
    if (res < 0)
      throw Errors.newIOException("epoll_ctl", res); 
  }
  
  public static void epollCtlMod(int efd, int fd, int flags) throws IOException {
    int res = epollCtlMod0(efd, fd, flags);
    if (res < 0)
      throw Errors.newIOException("epoll_ctl", res); 
  }
  
  public static void epollCtlDel(int efd, int fd) throws IOException {
    int res = epollCtlDel0(efd, fd);
    if (res < 0)
      throw Errors.newIOException("epoll_ctl", res); 
  }
  
  public static int splice(int fd, long offIn, int fdOut, long offOut, long len) throws IOException {
    int res = splice0(fd, offIn, fdOut, offOut, len);
    if (res >= 0)
      return res; 
    return Errors.ioResult("splice", res);
  }
  
  @Deprecated
  public static int sendmmsg(int fd, NativeDatagramPacket[] msgs, int offset, int len) throws IOException { return sendmmsg(fd, Socket.isIPv6Preferred(), msgs, offset, len); }
  
  static int sendmmsg(int fd, boolean ipv6, NativeDatagramPacket[] msgs, int offset, int len) throws IOException {
    int res = sendmmsg0(fd, ipv6, msgs, offset, len);
    if (res >= 0)
      return res; 
    return Errors.ioResult("sendmmsg", res);
  }
  
  static int recvmmsg(int fd, boolean ipv6, NativeDatagramPacket[] msgs, int offset, int len) throws IOException {
    int res = recvmmsg0(fd, ipv6, msgs, offset, len);
    if (res >= 0)
      return res; 
    return Errors.ioResult("recvmmsg", res);
  }
  
  static int recvmsg(int fd, boolean ipv6, NativeDatagramPacketArray.NativeDatagramPacket packet) throws IOException {
    int res = recvmsg0(fd, ipv6, packet);
    if (res >= 0)
      return res; 
    return Errors.ioResult("recvmsg", res);
  }
  
  private static void loadNativeLibrary() {
    name = PlatformDependent.normalizedOs();
    if (!"linux".equals(name))
      throw new IllegalStateException("Only supported on Linux"); 
    String staticLibName = "netty_transport_native_epoll";
    String sharedLibName = staticLibName + '_' + PlatformDependent.normalizedArch();
    ClassLoader cl = PlatformDependent.getClassLoader(Native.class);
    try {
      NativeLibraryLoader.load(sharedLibName, cl);
    } catch (UnsatisfiedLinkError e1) {
      try {
        NativeLibraryLoader.load(staticLibName, cl);
        logger.debug("Failed to load {}", sharedLibName, e1);
      } catch (UnsatisfiedLinkError e2) {
        ThrowableUtil.addSuppressed(e1, e2);
        throw e1;
      } 
    } 
  }
  
  private static native int registerUnix();
  
  private static native boolean isSupportingUdpSegment();
  
  private static native int eventFd();
  
  private static native int timerFd();
  
  public static native void eventFdWrite(int paramInt, long paramLong);
  
  public static native void eventFdRead(int paramInt);
  
  private static native int epollCreate();
  
  private static native long epollWait0(int paramInt1, long paramLong1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, long paramLong2);
  
  private static native int epollWait(int paramInt1, long paramLong, int paramInt2, int paramInt3);
  
  private static native int epollBusyWait0(int paramInt1, long paramLong, int paramInt2);
  
  private static native int epollCtlAdd0(int paramInt1, int paramInt2, int paramInt3);
  
  private static native int epollCtlMod0(int paramInt1, int paramInt2, int paramInt3);
  
  private static native int epollCtlDel0(int paramInt1, int paramInt2);
  
  private static native int splice0(int paramInt1, long paramLong1, int paramInt2, long paramLong2, long paramLong3) throws IOException;
  
  private static native int sendmmsg0(int paramInt1, boolean paramBoolean, NativeDatagramPacketArray.NativeDatagramPacket[] paramArrayOfNativeDatagramPacket, int paramInt2, int paramInt3) throws IOException;
  
  private static native int recvmmsg0(int paramInt1, boolean paramBoolean, NativeDatagramPacketArray.NativeDatagramPacket[] paramArrayOfNativeDatagramPacket, int paramInt2, int paramInt3) throws IOException;
  
  private static native int recvmsg0(int paramInt, boolean paramBoolean, NativeDatagramPacketArray.NativeDatagramPacket paramNativeDatagramPacket) throws IOException;
  
  public static native int sizeofEpollEvent();
  
  public static native int offsetofEpollData();
}
