package io.netty.channel.epoll;

import io.netty.buffer.ByteBuf;
import io.netty.channel.AbstractChannel;
import io.netty.channel.Channel;
import io.netty.channel.ChannelFuture;
import io.netty.channel.ChannelMetadata;
import io.netty.channel.ChannelOutboundBuffer;
import io.netty.channel.ChannelPromise;
import io.netty.channel.DefaultFileRegion;
import io.netty.channel.EventLoop;
import io.netty.channel.FileRegion;
import io.netty.channel.socket.DuplexChannel;
import io.netty.channel.unix.FileDescriptor;
import io.netty.channel.unix.IovArray;
import io.netty.channel.unix.UnixChannelUtil;
import io.netty.util.internal.ObjectUtil;
import io.netty.util.internal.PlatformDependent;
import io.netty.util.internal.StringUtil;
import io.netty.util.internal.logging.InternalLogger;
import io.netty.util.internal.logging.InternalLoggerFactory;
import java.io.IOException;
import java.net.SocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.ClosedChannelException;
import java.nio.channels.WritableByteChannel;
import java.util.Queue;
import java.util.concurrent.Executor;

public abstract class AbstractEpollStreamChannel extends AbstractEpollChannel implements DuplexChannel {
  private static final ChannelMetadata METADATA = new ChannelMetadata(false, 16);
  
  private static final String EXPECTED_TYPES = " (expected: " + 
    StringUtil.simpleClassName(ByteBuf.class) + ", " + 
    StringUtil.simpleClassName(DefaultFileRegion.class) + ')';
  
  private static final InternalLogger logger = InternalLoggerFactory.getInstance(AbstractEpollStreamChannel.class);
  
  private final Runnable flushTask = new Object(this);
  
  private FileDescriptor pipeIn;
  
  private FileDescriptor pipeOut;
  
  private WritableByteChannel byteChannel;
  
  protected AbstractEpollStreamChannel(Channel parent, int fd) { this(parent, new LinuxSocket(fd)); }
  
  protected AbstractEpollStreamChannel(int fd) { this(new LinuxSocket(fd)); }
  
  AbstractEpollStreamChannel(LinuxSocket fd) { this(fd, isSoErrorZero(fd)); }
  
  AbstractEpollStreamChannel(Channel parent, LinuxSocket fd) {
    super(parent, fd, true);
    this.flags |= Native.EPOLLRDHUP;
  }
  
  protected AbstractEpollStreamChannel(Channel parent, LinuxSocket fd, SocketAddress remote) {
    super(parent, fd, remote);
    this.flags |= Native.EPOLLRDHUP;
  }
  
  protected AbstractEpollStreamChannel(LinuxSocket fd, boolean active) {
    super(null, fd, active);
    this.flags |= Native.EPOLLRDHUP;
  }
  
  protected AbstractEpollChannel.AbstractEpollUnsafe newUnsafe() { return new EpollStreamUnsafe(this); }
  
  public ChannelMetadata metadata() { return METADATA; }
  
  public final ChannelFuture spliceTo(AbstractEpollStreamChannel ch, int len) { return spliceTo(ch, len, newPromise()); }
  
  public final ChannelFuture spliceTo(AbstractEpollStreamChannel ch, int len, ChannelPromise promise) {
    if (ch.eventLoop() != eventLoop())
      throw new IllegalArgumentException("EventLoops are not the same."); 
    ObjectUtil.checkPositiveOrZero(len, "len");
    if (ch.config().getEpollMode() != EpollMode.LEVEL_TRIGGERED || 
      config().getEpollMode() != EpollMode.LEVEL_TRIGGERED)
      throw new IllegalStateException("spliceTo() supported only when using " + EpollMode.LEVEL_TRIGGERED); 
    ObjectUtil.checkNotNull(promise, "promise");
    if (!isOpen()) {
      promise.tryFailure(new ClosedChannelException());
    } else {
      addToSpliceQueue(new SpliceInChannelTask(this, ch, len, promise));
      failSpliceIfClosed(promise);
    } 
    return promise;
  }
  
  public final ChannelFuture spliceTo(FileDescriptor ch, int offset, int len) { return spliceTo(ch, offset, len, newPromise()); }
  
  public final ChannelFuture spliceTo(FileDescriptor ch, int offset, int len, ChannelPromise promise) {
    ObjectUtil.checkPositiveOrZero(len, "len");
    ObjectUtil.checkPositiveOrZero(offset, "offset");
    if (config().getEpollMode() != EpollMode.LEVEL_TRIGGERED)
      throw new IllegalStateException("spliceTo() supported only when using " + EpollMode.LEVEL_TRIGGERED); 
    ObjectUtil.checkNotNull(promise, "promise");
    if (!isOpen()) {
      promise.tryFailure(new ClosedChannelException());
    } else {
      addToSpliceQueue(new SpliceFdTask(this, ch, offset, len, promise));
      failSpliceIfClosed(promise);
    } 
    return promise;
  }
  
  private void failSpliceIfClosed(ChannelPromise promise) {
    if (!isOpen())
      if (promise.tryFailure(new ClosedChannelException()))
        eventLoop().execute(new Object(this));  
  }
  
  private int writeBytes(ChannelOutboundBuffer in, ByteBuf buf) throws Exception {
    int readableBytes = buf.readableBytes();
    if (readableBytes == 0) {
      in.remove();
      return 0;
    } 
    if (buf.hasMemoryAddress() || buf.nioBufferCount() == 1)
      return doWriteBytes(in, buf); 
    ByteBuffer[] nioBuffers = buf.nioBuffers();
    return writeBytesMultiple(in, nioBuffers, nioBuffers.length, readableBytes, 
        config().getMaxBytesPerGatheringWrite());
  }
  
  private void adjustMaxBytesPerGatheringWrite(long attempted, long written, long oldMaxBytesPerGatheringWrite) {
    if (attempted == written) {
      if (attempted << true > oldMaxBytesPerGatheringWrite)
        config().setMaxBytesPerGatheringWrite(attempted << true); 
    } else if (attempted > 4096L && written < attempted >>> true) {
      config().setMaxBytesPerGatheringWrite(attempted >>> true);
    } 
  }
  
  private int writeBytesMultiple(ChannelOutboundBuffer in, IovArray array) throws IOException {
    long expectedWrittenBytes = array.size();
    assert expectedWrittenBytes != 0L;
    int cnt = array.count();
    assert cnt != 0;
    long localWrittenBytes = this.socket.writevAddresses(array.memoryAddress(0), cnt);
    if (localWrittenBytes > 0L) {
      adjustMaxBytesPerGatheringWrite(expectedWrittenBytes, localWrittenBytes, array.maxBytes());
      in.removeBytes(localWrittenBytes);
      return 1;
    } 
    return Integer.MAX_VALUE;
  }
  
  private int writeBytesMultiple(ChannelOutboundBuffer in, ByteBuffer[] nioBuffers, int nioBufferCnt, long expectedWrittenBytes, long maxBytesPerGatheringWrite) throws IOException {
    assert expectedWrittenBytes != 0L;
    if (expectedWrittenBytes > maxBytesPerGatheringWrite)
      expectedWrittenBytes = maxBytesPerGatheringWrite; 
    long localWrittenBytes = this.socket.writev(nioBuffers, 0, nioBufferCnt, expectedWrittenBytes);
    if (localWrittenBytes > 0L) {
      adjustMaxBytesPerGatheringWrite(expectedWrittenBytes, localWrittenBytes, maxBytesPerGatheringWrite);
      in.removeBytes(localWrittenBytes);
      return 1;
    } 
    return Integer.MAX_VALUE;
  }
  
  private int writeDefaultFileRegion(ChannelOutboundBuffer in, DefaultFileRegion region) throws Exception {
    long offset = region.transferred();
    long regionCount = region.count();
    if (offset >= regionCount) {
      in.remove();
      return 0;
    } 
    long flushedAmount = this.socket.sendFile(region, region.position(), offset, regionCount - offset);
    if (flushedAmount > 0L) {
      in.progress(flushedAmount);
      if (region.transferred() >= regionCount)
        in.remove(); 
      return 1;
    } 
    if (flushedAmount == 0L)
      validateFileRegion(region, offset); 
    return Integer.MAX_VALUE;
  }
  
  private int writeFileRegion(ChannelOutboundBuffer in, FileRegion region) throws Exception {
    if (region.transferred() >= region.count()) {
      in.remove();
      return 0;
    } 
    if (this.byteChannel == null)
      this.byteChannel = new EpollSocketWritableByteChannel(this); 
    long flushedAmount = region.transferTo(this.byteChannel, region.transferred());
    if (flushedAmount > 0L) {
      in.progress(flushedAmount);
      if (region.transferred() >= region.count())
        in.remove(); 
      return 1;
    } 
    return Integer.MAX_VALUE;
  }
  
  protected void doWrite(ChannelOutboundBuffer in) throws Exception {
    int writeSpinCount = config().getWriteSpinCount();
    do {
      int msgCount = in.size();
      if (msgCount > 1 && in.current() instanceof ByteBuf) {
        writeSpinCount -= doWriteMultiple(in);
      } else {
        if (msgCount == 0) {
          clearFlag(Native.EPOLLOUT);
          return;
        } 
        writeSpinCount -= doWriteSingle(in);
      } 
    } while (writeSpinCount > 0);
    if (writeSpinCount == 0) {
      clearFlag(Native.EPOLLOUT);
      eventLoop().execute(this.flushTask);
    } else {
      setFlag(Native.EPOLLOUT);
    } 
  }
  
  protected int doWriteSingle(ChannelOutboundBuffer in) throws Exception {
    Object msg = in.current();
    if (msg instanceof ByteBuf)
      return writeBytes(in, (ByteBuf)msg); 
    if (msg instanceof DefaultFileRegion)
      return writeDefaultFileRegion(in, (DefaultFileRegion)msg); 
    if (msg instanceof FileRegion)
      return writeFileRegion(in, (FileRegion)msg); 
    if (msg instanceof SpliceOutTask) {
      if (!((SpliceOutTask)msg).spliceOut())
        return Integer.MAX_VALUE; 
      in.remove();
      return 1;
    } 
    throw new Error();
  }
  
  private int doWriteMultiple(ChannelOutboundBuffer in) throws Exception {
    long maxBytesPerGatheringWrite = config().getMaxBytesPerGatheringWrite();
    IovArray array = ((EpollEventLoop)eventLoop()).cleanIovArray();
    array.maxBytes(maxBytesPerGatheringWrite);
    in.forEachFlushedMessage(array);
    if (array.count() >= 1)
      return writeBytesMultiple(in, array); 
    in.removeBytes(0L);
    return 0;
  }
  
  protected Object filterOutboundMessage(Object msg) {
    if (msg instanceof ByteBuf) {
      ByteBuf buf = (ByteBuf)msg;
      return UnixChannelUtil.isBufferCopyNeededForWrite(buf) ? newDirectBuffer(buf) : buf;
    } 
    if (msg instanceof FileRegion || msg instanceof SpliceOutTask)
      return msg; 
    throw new UnsupportedOperationException("unsupported message type: " + 
        StringUtil.simpleClassName(msg) + EXPECTED_TYPES);
  }
  
  protected final void doShutdownOutput() throws Exception { this.socket.shutdown(false, true); }
  
  private void shutdownInput0(ChannelPromise promise) {
    try {
      this.socket.shutdown(true, false);
      promise.setSuccess();
    } catch (Throwable cause) {
      promise.setFailure(cause);
    } 
  }
  
  public boolean isOutputShutdown() { return this.socket.isOutputShutdown(); }
  
  public boolean isInputShutdown() { return this.socket.isInputShutdown(); }
  
  public boolean isShutdown() { return this.socket.isShutdown(); }
  
  public ChannelFuture shutdownOutput() { return shutdownOutput(newPromise()); }
  
  public ChannelFuture shutdownOutput(ChannelPromise promise) {
    EventLoop loop = eventLoop();
    if (loop.inEventLoop()) {
      ((AbstractChannel.AbstractUnsafe)unsafe()).shutdownOutput(promise);
    } else {
      loop.execute(new Object(this, promise));
    } 
    return promise;
  }
  
  public ChannelFuture shutdownInput() { return shutdownInput(newPromise()); }
  
  public ChannelFuture shutdownInput(ChannelPromise promise) {
    Executor closeExecutor = ((EpollStreamUnsafe)unsafe()).prepareToClose();
    if (closeExecutor != null) {
      closeExecutor.execute(new Object(this, promise));
    } else {
      EventLoop loop = eventLoop();
      if (loop.inEventLoop()) {
        shutdownInput0(promise);
      } else {
        loop.execute(new Object(this, promise));
      } 
    } 
    return promise;
  }
  
  public ChannelFuture shutdown() { return shutdown(newPromise()); }
  
  public ChannelFuture shutdown(ChannelPromise promise) {
    ChannelFuture shutdownOutputFuture = shutdownOutput();
    if (shutdownOutputFuture.isDone()) {
      shutdownOutputDone(shutdownOutputFuture, promise);
    } else {
      shutdownOutputFuture.addListener(new Object(this, promise));
    } 
    return promise;
  }
  
  private void shutdownOutputDone(ChannelFuture shutdownOutputFuture, ChannelPromise promise) {
    ChannelFuture shutdownInputFuture = shutdownInput();
    if (shutdownInputFuture.isDone()) {
      shutdownDone(shutdownOutputFuture, shutdownInputFuture, promise);
    } else {
      shutdownInputFuture.addListener(new Object(this, shutdownOutputFuture, promise));
    } 
  }
  
  private static void shutdownDone(ChannelFuture shutdownOutputFuture, ChannelFuture shutdownInputFuture, ChannelPromise promise) {
    Throwable shutdownOutputCause = shutdownOutputFuture.cause();
    Throwable shutdownInputCause = shutdownInputFuture.cause();
    if (shutdownOutputCause != null) {
      if (shutdownInputCause != null)
        logger.debug("Exception suppressed because a previous exception occurred.", shutdownInputCause); 
      promise.setFailure(shutdownOutputCause);
    } else if (shutdownInputCause != null) {
      promise.setFailure(shutdownInputCause);
    } else {
      promise.setSuccess();
    } 
  }
  
  protected void doClose() throws Exception {
    try {
      super.doClose();
    } finally {
      safeClosePipe(this.pipeIn);
      safeClosePipe(this.pipeOut);
      clearSpliceQueue();
    } 
  }
  
  private void clearSpliceQueue() throws Exception {
    Queue<SpliceInTask> sQueue = this.spliceQueue;
    if (sQueue == null)
      return; 
    ClosedChannelException exception = null;
    while (true) {
      SpliceInTask task = (SpliceInTask)sQueue.poll();
      if (task == null)
        break; 
      if (exception == null)
        exception = new ClosedChannelException(); 
      task.promise.tryFailure(exception);
    } 
  }
  
  private static void safeClosePipe(FileDescriptor fd) {
    if (fd != null)
      try {
        fd.close();
      } catch (IOException e) {
        logger.warn("Error while closing a pipe", e);
      }  
  }
  
  private void addToSpliceQueue(SpliceInTask task) {
    Queue<SpliceInTask> sQueue = this.spliceQueue;
    if (sQueue == null)
      synchronized (this) {
        sQueue = this.spliceQueue;
        if (sQueue == null)
          this.spliceQueue = sQueue = PlatformDependent.newMpscQueue(); 
      }  
    sQueue.add(task);
  }
}
