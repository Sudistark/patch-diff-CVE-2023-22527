package io.netty.channel.epoll;

import io.netty.buffer.ByteBuf;
import io.netty.channel.ChannelOutboundBuffer;
import io.netty.channel.unix.IovArray;
import io.netty.channel.unix.Limits;
import java.net.Inet6Address;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.UnknownHostException;

final class NativeDatagramPacketArray {
  private final NativeDatagramPacket[] packets = new NativeDatagramPacket[Limits.UIO_MAX_IOV];
  
  private final IovArray iovArray = new IovArray();
  
  private final byte[] ipv4Bytes = new byte[4];
  
  private final MyMessageProcessor processor = new MyMessageProcessor(this, null);
  
  private int count;
  
  NativeDatagramPacketArray() {
    for (int i = 0; i < this.packets.length; i++)
      this.packets[i] = new NativeDatagramPacket(this); 
  }
  
  boolean addWritable(ByteBuf buf, int index, int len) { return add0(buf, index, len, 0, null); }
  
  private boolean add0(ByteBuf buf, int index, int len, int segmentLen, InetSocketAddress recipient) {
    if (this.count == this.packets.length)
      return false; 
    if (len == 0)
      return true; 
    int offset = this.iovArray.count();
    if (offset == Limits.IOV_MAX || !this.iovArray.add(buf, index, len))
      return false; 
    NativeDatagramPacket p = this.packets[this.count];
    NativeDatagramPacket.access$100(p, this.iovArray.memoryAddress(offset), this.iovArray.count() - offset, segmentLen, recipient);
    this.count++;
    return true;
  }
  
  void add(ChannelOutboundBuffer buffer, boolean connected, int maxMessagesPerWrite) throws Exception {
    MyMessageProcessor.access$202(this.processor, connected);
    MyMessageProcessor.access$302(this.processor, maxMessagesPerWrite);
    buffer.forEachFlushedMessage(this.processor);
  }
  
  int count() { return this.count; }
  
  NativeDatagramPacket[] packets() { return this.packets; }
  
  void clear() {
    this.count = 0;
    this.iovArray.clear();
  }
  
  void release() { this.iovArray.release(); }
  
  private static InetSocketAddress newAddress(byte[] addr, int addrLen, int port, int scopeId, byte[] ipv4Bytes) throws UnknownHostException {
    InetAddress address;
    if (addrLen == ipv4Bytes.length) {
      System.arraycopy(addr, 0, ipv4Bytes, 0, addrLen);
      address = InetAddress.getByAddress(ipv4Bytes);
    } else {
      address = Inet6Address.getByAddress(null, addr, scopeId);
    } 
    return new InetSocketAddress(address, port);
  }
}
