package io.netty.resolver.dns;

import io.netty.channel.EventLoop;
import io.netty.util.internal.PlatformDependent;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;

abstract class Cache<E> extends Object {
  private static final AtomicReferenceFieldUpdater<Entries, ScheduledFuture> FUTURE_UPDATER = AtomicReferenceFieldUpdater.newUpdater(Entries.class, ScheduledFuture.class, "expirationFuture");
  
  private static final ScheduledFuture<?> CANCELLED = new Object();
  
  static final int MAX_SUPPORTED_TTL_SECS = (int)TimeUnit.DAYS.toSeconds(730L);
  
  private final ConcurrentMap<String, Entries> resolveCache = PlatformDependent.newConcurrentHashMap();
  
  final void clear() {
    while (!this.resolveCache.isEmpty()) {
      for (Iterator<Map.Entry<String, Entries>> i = this.resolveCache.entrySet().iterator(); i.hasNext(); ) {
        Map.Entry<String, Entries> e = (Map.Entry)i.next();
        i.remove();
        ((Entries)e.getValue()).clearAndCancel();
      } 
    } 
  }
  
  final boolean clear(String hostname) {
    Entries entries = (Entries)this.resolveCache.remove(hostname);
    return (entries != null && entries.clearAndCancel());
  }
  
  final List<? extends E> get(String hostname) {
    Entries entries = (Entries)this.resolveCache.get(hostname);
    return (entries == null) ? null : (List)entries.get();
  }
  
  final void cache(String hostname, E value, int ttl, EventLoop loop) {
    Entries entries = (Entries)this.resolveCache.get(hostname);
    if (entries == null) {
      entries = new Entries(this, hostname);
      Entries oldEntries = (Entries)this.resolveCache.putIfAbsent(hostname, entries);
      if (oldEntries != null)
        entries = oldEntries; 
    } 
    entries.add(value, ttl, loop);
  }
  
  final int size() { return this.resolveCache.size(); }
  
  protected void sortEntries(String hostname, List<E> entries) {}
  
  protected abstract boolean shouldReplaceAll(E paramE);
  
  protected abstract boolean equals(E paramE1, E paramE2);
}
