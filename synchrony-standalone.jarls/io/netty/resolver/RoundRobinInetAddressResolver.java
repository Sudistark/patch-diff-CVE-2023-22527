package io.netty.resolver;

import io.netty.util.concurrent.EventExecutor;
import io.netty.util.concurrent.Promise;
import io.netty.util.internal.PlatformDependent;
import java.net.InetAddress;
import java.util.List;

public class RoundRobinInetAddressResolver extends InetNameResolver {
  private final NameResolver<InetAddress> nameResolver;
  
  public RoundRobinInetAddressResolver(EventExecutor executor, NameResolver<InetAddress> nameResolver) {
    super(executor);
    this.nameResolver = nameResolver;
  }
  
  protected void doResolve(String inetHost, Promise<InetAddress> promise) throws Exception { this.nameResolver.resolveAll(inetHost).addListener(new Object(this, promise, inetHost)); }
  
  protected void doResolveAll(String inetHost, Promise<List<InetAddress>> promise) throws Exception { this.nameResolver.resolveAll(inetHost).addListener(new Object(this, promise)); }
  
  private static int randomIndex(int numAddresses) { return (numAddresses == 1) ? 0 : PlatformDependent.threadLocalRandom().nextInt(numAddresses); }
  
  public void close() { this.nameResolver.close(); }
}
