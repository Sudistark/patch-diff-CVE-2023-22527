package io.netty.resolver;

import io.netty.util.CharsetUtil;
import io.netty.util.internal.ObjectUtil;
import io.netty.util.internal.PlatformDependent;
import io.netty.util.internal.SystemPropertyUtil;
import io.netty.util.internal.logging.InternalLogger;
import io.netty.util.internal.logging.InternalLoggerFactory;
import java.net.InetAddress;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.atomic.AtomicLong;

public final class DefaultHostsFileEntriesResolver implements HostsFileEntriesResolver {
  private static final InternalLogger logger = InternalLoggerFactory.getInstance(DefaultHostsFileEntriesResolver.class);
  
  private static final long DEFAULT_REFRESH_INTERVAL = SystemPropertyUtil.getLong("io.netty.hostsFileRefreshInterval", 0L);
  
  private final long refreshInterval;
  
  private final AtomicLong lastRefresh;
  
  private final HostsFileEntriesProvider.Parser hostsFileParser;
  
  static  {
    if (logger.isDebugEnabled())
      logger.debug("-Dio.netty.hostsFileRefreshInterval: {}", Long.valueOf(DEFAULT_REFRESH_INTERVAL)); 
  }
  
  public DefaultHostsFileEntriesResolver() { this(HostsFileEntriesProvider.parser(), DEFAULT_REFRESH_INTERVAL); }
  
  DefaultHostsFileEntriesResolver(HostsFileEntriesProvider.Parser hostsFileParser, long refreshInterval) {
    this.lastRefresh = new AtomicLong(System.nanoTime());
    this.hostsFileParser = hostsFileParser;
    this.refreshInterval = ObjectUtil.checkPositiveOrZero(refreshInterval, "refreshInterval");
    HostsFileEntriesProvider entries = parseEntries(hostsFileParser);
    this.inet4Entries = entries.ipv4Entries();
    this.inet6Entries = entries.ipv6Entries();
  }
  
  public InetAddress address(String inetHost, ResolvedAddressTypes resolvedAddressTypes) { return firstAddress(addresses(inetHost, resolvedAddressTypes)); }
  
  public List<InetAddress> addresses(String inetHost, ResolvedAddressTypes resolvedAddressTypes) {
    List<InetAddress> allInet6Addresses, allInet4Addresses;
    String normalized = normalize(inetHost);
    ensureHostsFileEntriesAreFresh();
    switch (null.$SwitchMap$io$netty$resolver$ResolvedAddressTypes[resolvedAddressTypes.ordinal()]) {
      case 1:
        return (List)this.inet4Entries.get(normalized);
      case 2:
        return (List)this.inet6Entries.get(normalized);
      case 3:
        allInet4Addresses = (List)this.inet4Entries.get(normalized);
        return (allInet4Addresses != null) ? allAddresses(allInet4Addresses, (List)this.inet6Entries.get(normalized)) : (List)this.inet6Entries
          .get(normalized);
      case 4:
        allInet6Addresses = (List)this.inet6Entries.get(normalized);
        return (allInet6Addresses != null) ? allAddresses(allInet6Addresses, (List)this.inet4Entries.get(normalized)) : (List)this.inet4Entries
          .get(normalized);
    } 
    throw new IllegalArgumentException("Unknown ResolvedAddressTypes " + resolvedAddressTypes);
  }
  
  private void ensureHostsFileEntriesAreFresh() {
    long interval = this.refreshInterval;
    if (interval == 0L)
      return; 
    long last = this.lastRefresh.get();
    long currentTime = System.nanoTime();
    if (currentTime - last > interval && 
      this.lastRefresh.compareAndSet(last, currentTime)) {
      HostsFileEntriesProvider entries = parseEntries(this.hostsFileParser);
      this.inet4Entries = entries.ipv4Entries();
      this.inet6Entries = entries.ipv6Entries();
    } 
  }
  
  String normalize(String inetHost) { return inetHost.toLowerCase(Locale.ENGLISH); }
  
  private static List<InetAddress> allAddresses(List<InetAddress> a, List<InetAddress> b) {
    List<InetAddress> result = new ArrayList<InetAddress>(a.size() + ((b == null) ? 0 : b.size()));
    result.addAll(a);
    if (b != null)
      result.addAll(b); 
    return result;
  }
  
  private static InetAddress firstAddress(List<InetAddress> addresses) { return (addresses != null && !addresses.isEmpty()) ? (InetAddress)addresses.get(0) : null; }
  
  private static HostsFileEntriesProvider parseEntries(HostsFileEntriesProvider.Parser parser) {
    if (PlatformDependent.isWindows())
      return parser.parseSilently(new Charset[] { Charset.defaultCharset(), CharsetUtil.UTF_16, CharsetUtil.UTF_8 }); 
    return parser.parseSilently();
  }
}
