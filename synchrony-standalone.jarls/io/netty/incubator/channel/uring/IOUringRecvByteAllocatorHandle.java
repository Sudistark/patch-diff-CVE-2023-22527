package io.netty.incubator.channel.uring;

import io.netty.buffer.ByteBuf;
import io.netty.buffer.ByteBufAllocator;
import io.netty.channel.RecvByteBufAllocator;
import io.netty.channel.unix.PreferredDirectByteBufAllocator;
import io.netty.util.UncheckedBooleanSupplier;

final class IOUringRecvByteAllocatorHandle extends RecvByteBufAllocator.DelegatingHandle implements RecvByteBufAllocator.ExtendedHandle {
  private final PreferredDirectByteBufAllocator preferredDirectByteBufAllocator = new PreferredDirectByteBufAllocator();
  
  private boolean rdHupReceived;
  
  IOUringRecvByteAllocatorHandle(RecvByteBufAllocator.ExtendedHandle handle) { super(handle); }
  
  void rdHupReceived() { this.rdHupReceived = true; }
  
  public ByteBuf allocate(ByteBufAllocator alloc) {
    this.preferredDirectByteBufAllocator.updateAllocator(alloc);
    return delegate().allocate(this.preferredDirectByteBufAllocator);
  }
  
  public boolean continueReading() { return (super.continueReading() || this.rdHupReceived); }
  
  public boolean continueReading(UncheckedBooleanSupplier maybeMoreDataSupplier) { return (((RecvByteBufAllocator.ExtendedHandle)delegate()).continueReading(maybeMoreDataSupplier) || this.rdHupReceived); }
}
