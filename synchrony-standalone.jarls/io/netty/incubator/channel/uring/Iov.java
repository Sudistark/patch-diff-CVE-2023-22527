package io.netty.incubator.channel.uring;

import io.netty.util.internal.PlatformDependent;

final class Iov {
  static void write(long iovAddress, long bufferAddress, int length) {
    if (Native.SIZEOF_SIZE_T == 4) {
      PlatformDependent.putInt(iovAddress + Native.IOVEC_OFFSETOF_IOV_BASE, (int)bufferAddress);
      PlatformDependent.putInt(iovAddress + Native.IOVEC_OFFSETOF_IOV_LEN, length);
    } else {
      assert Native.SIZEOF_SIZE_T == 8;
      PlatformDependent.putLong(iovAddress + Native.IOVEC_OFFSETOF_IOV_BASE, bufferAddress);
      PlatformDependent.putLong(iovAddress + Native.IOVEC_OFFSETOF_IOV_LEN, length);
    } 
  }
  
  static long readBufferAddress(long iovAddress) {
    if (Native.SIZEOF_SIZE_T == 4)
      return PlatformDependent.getInt(iovAddress + Native.IOVEC_OFFSETOF_IOV_BASE); 
    assert Native.SIZEOF_SIZE_T == 8;
    return PlatformDependent.getLong(iovAddress + Native.IOVEC_OFFSETOF_IOV_BASE);
  }
  
  static int readBufferLength(long iovAddress) {
    if (Native.SIZEOF_SIZE_T == 4)
      return PlatformDependent.getInt(iovAddress + Native.IOVEC_OFFSETOF_IOV_LEN); 
    assert Native.SIZEOF_SIZE_T == 8;
    return (int)PlatformDependent.getLong(iovAddress + Native.IOVEC_OFFSETOF_IOV_LEN);
  }
}
