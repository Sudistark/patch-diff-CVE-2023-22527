package io.netty.incubator.channel.uring;

import io.netty.util.internal.PlatformDependent;
import io.netty.util.internal.SystemPropertyUtil;

public final class IOUring {
  private static final Throwable UNAVAILABILITY_CAUSE;
  
  static  {
    cause = null;
    try {
      if (SystemPropertyUtil.getBoolean("io.netty.transport.noNative", false)) {
        cause = new UnsupportedOperationException("Native transport was explicit disabled with -Dio.netty.transport.noNative=true");
      } else {
        String kernelVersion = Native.kernelVersion();
        Native.checkKernelVersion(kernelVersion);
        Throwable unsafeCause = PlatformDependent.getUnsafeUnavailabilityCause();
        if (unsafeCause == null) {
          ringBuffer = null;
          try {
            ringBuffer = Native.createRingBuffer();
            Native.checkAllIOSupported(ringBuffer.fd());
          } finally {
            if (ringBuffer != null)
              try {
                ringBuffer.close();
              } catch (Exception exception) {} 
          } 
        } else {
          cause = new UnsupportedOperationException("Unsafe is not supported", unsafeCause);
        } 
      } 
    } catch (Throwable t) {
      cause = t;
    } 
    UNAVAILABILITY_CAUSE = cause;
  }
  
  public static boolean isAvailable() { return (UNAVAILABILITY_CAUSE == null); }
  
  public static void ensureAvailability() {
    if (UNAVAILABILITY_CAUSE != null)
      throw (Error)(new UnsatisfiedLinkError("failed to load the required native library"))
        .initCause(UNAVAILABILITY_CAUSE); 
  }
  
  public static Throwable unavailabilityCause() { return UNAVAILABILITY_CAUSE; }
}
