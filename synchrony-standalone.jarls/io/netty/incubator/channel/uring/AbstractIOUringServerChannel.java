package io.netty.incubator.channel.uring;

import io.netty.channel.AbstractChannel;
import io.netty.channel.Channel;
import io.netty.channel.ChannelOutboundBuffer;
import io.netty.channel.ServerChannel;
import io.netty.channel.unix.Buffer;
import java.nio.ByteBuffer;

abstract class AbstractIOUringServerChannel extends AbstractIOUringChannel implements ServerChannel {
  private final ByteBuffer acceptedAddressMemory;
  
  private final ByteBuffer acceptedAddressLengthMemory;
  
  private final long acceptedAddressMemoryAddress;
  
  private final long acceptedAddressLengthMemoryAddress;
  
  protected AbstractIOUringServerChannel(LinuxSocket socket, boolean active) {
    super(null, socket, active);
    this.acceptedAddressMemory = Buffer.allocateDirectWithNativeOrder(Native.SIZEOF_SOCKADDR_STORAGE);
    this.acceptedAddressMemoryAddress = Buffer.memoryAddress(this.acceptedAddressMemory);
    this.acceptedAddressLengthMemory = Buffer.allocateDirectWithNativeOrder(8);
    this.acceptedAddressLengthMemory.putLong(0, Native.SIZEOF_SOCKADDR_STORAGE);
    this.acceptedAddressLengthMemoryAddress = Buffer.memoryAddress(this.acceptedAddressLengthMemory);
  }
  
  protected void doClose() throws Exception {
    super.doClose();
    Buffer.free(this.acceptedAddressMemory);
    Buffer.free(this.acceptedAddressLengthMemory);
  }
  
  protected AbstractIOUringChannel.AbstractUringUnsafe newUnsafe() { return new UringServerChannelUnsafe(this); }
  
  protected void doWrite(ChannelOutboundBuffer in) { throw new UnsupportedOperationException(); }
  
  public AbstractIOUringChannel getChannel() { return this; }
  
  abstract Channel newChildChannel(int paramInt, long paramLong1, long paramLong2) throws Exception;
}
