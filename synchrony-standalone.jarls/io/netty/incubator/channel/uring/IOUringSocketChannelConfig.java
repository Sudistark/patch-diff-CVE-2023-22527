package io.netty.incubator.channel.uring;

import io.netty.buffer.ByteBufAllocator;
import io.netty.channel.Channel;
import io.netty.channel.ChannelConfig;
import io.netty.channel.ChannelException;
import io.netty.channel.ChannelOption;
import io.netty.channel.DefaultChannelConfig;
import io.netty.channel.MessageSizeEstimator;
import io.netty.channel.RecvByteBufAllocator;
import io.netty.channel.WriteBufferWaterMark;
import io.netty.channel.socket.DuplexChannelConfig;
import io.netty.channel.socket.SocketChannelConfig;
import io.netty.util.internal.PlatformDependent;
import java.io.IOException;
import java.util.Map;

public final class IOUringSocketChannelConfig extends DefaultChannelConfig implements SocketChannelConfig {
  IOUringSocketChannelConfig(Channel channel) {
    super(channel);
    if (PlatformDependent.canEnableTcpNoDelayByDefault())
      setTcpNoDelay(true); 
  }
  
  public Map<ChannelOption<?>, Object> getOptions() {
    return getOptions(super
        .getOptions(), new ChannelOption[] { 
          ChannelOption.SO_RCVBUF, ChannelOption.SO_SNDBUF, ChannelOption.TCP_NODELAY, ChannelOption.SO_KEEPALIVE, ChannelOption.SO_REUSEADDR, ChannelOption.SO_LINGER, ChannelOption.IP_TOS, ChannelOption.ALLOW_HALF_CLOSURE, IOUringChannelOption.TCP_CORK, IOUringChannelOption.TCP_NOTSENT_LOWAT, 
          IOUringChannelOption.TCP_KEEPCNT, IOUringChannelOption.TCP_KEEPIDLE, IOUringChannelOption.TCP_KEEPINTVL, IOUringChannelOption.TCP_QUICKACK, IOUringChannelOption.IP_TRANSPARENT, IOUringChannelOption.TCP_FASTOPEN_CONNECT });
  }
  
  public <T> T getOption(ChannelOption<T> option) {
    if (option == ChannelOption.SO_RCVBUF)
      return (T)Integer.valueOf(getReceiveBufferSize()); 
    if (option == ChannelOption.SO_SNDBUF)
      return (T)Integer.valueOf(getSendBufferSize()); 
    if (option == ChannelOption.TCP_NODELAY)
      return (T)Boolean.valueOf(isTcpNoDelay()); 
    if (option == ChannelOption.SO_KEEPALIVE)
      return (T)Boolean.valueOf(isKeepAlive()); 
    if (option == ChannelOption.SO_REUSEADDR)
      return (T)Boolean.valueOf(isReuseAddress()); 
    if (option == ChannelOption.SO_LINGER)
      return (T)Integer.valueOf(getSoLinger()); 
    if (option == ChannelOption.IP_TOS)
      return (T)Integer.valueOf(getTrafficClass()); 
    if (option == ChannelOption.ALLOW_HALF_CLOSURE)
      return (T)Boolean.valueOf(isAllowHalfClosure()); 
    if (option == IOUringChannelOption.TCP_CORK)
      return (T)Boolean.valueOf(isTcpCork()); 
    if (option == IOUringChannelOption.TCP_NOTSENT_LOWAT)
      return (T)Long.valueOf(getTcpNotSentLowAt()); 
    if (option == IOUringChannelOption.TCP_KEEPIDLE)
      return (T)Integer.valueOf(getTcpKeepIdle()); 
    if (option == IOUringChannelOption.TCP_KEEPINTVL)
      return (T)Integer.valueOf(getTcpKeepIntvl()); 
    if (option == IOUringChannelOption.TCP_KEEPCNT)
      return (T)Integer.valueOf(getTcpKeepCnt()); 
    if (option == IOUringChannelOption.TCP_USER_TIMEOUT)
      return (T)Integer.valueOf(getTcpUserTimeout()); 
    if (option == IOUringChannelOption.TCP_QUICKACK)
      return (T)Boolean.valueOf(isTcpQuickAck()); 
    if (option == IOUringChannelOption.IP_TRANSPARENT)
      return (T)Boolean.valueOf(isIpTransparent()); 
    if (option == IOUringChannelOption.TCP_FASTOPEN_CONNECT)
      return (T)Boolean.valueOf(isTcpFastOpenConnect()); 
    return (T)super.getOption(option);
  }
  
  public <T> boolean setOption(ChannelOption<T> option, T value) {
    validate(option, value);
    if (option == ChannelOption.SO_RCVBUF) {
      setReceiveBufferSize(((Integer)value).intValue());
    } else if (option == ChannelOption.SO_SNDBUF) {
      setSendBufferSize(((Integer)value).intValue());
    } else if (option == ChannelOption.TCP_NODELAY) {
      setTcpNoDelay(((Boolean)value).booleanValue());
    } else if (option == ChannelOption.SO_KEEPALIVE) {
      setKeepAlive(((Boolean)value).booleanValue());
    } else if (option == ChannelOption.SO_REUSEADDR) {
      setReuseAddress(((Boolean)value).booleanValue());
    } else if (option == ChannelOption.SO_LINGER) {
      setSoLinger(((Integer)value).intValue());
    } else if (option == ChannelOption.IP_TOS) {
      setTrafficClass(((Integer)value).intValue());
    } else if (option == ChannelOption.ALLOW_HALF_CLOSURE) {
      setAllowHalfClosure(((Boolean)value).booleanValue());
    } else if (option == IOUringChannelOption.TCP_CORK) {
      setTcpCork(((Boolean)value).booleanValue());
    } else if (option == IOUringChannelOption.TCP_NOTSENT_LOWAT) {
      setTcpNotSentLowAt(((Long)value).longValue());
    } else if (option == IOUringChannelOption.TCP_KEEPIDLE) {
      setTcpKeepIdle(((Integer)value).intValue());
    } else if (option == IOUringChannelOption.TCP_KEEPCNT) {
      setTcpKeepCnt(((Integer)value).intValue());
    } else if (option == IOUringChannelOption.TCP_KEEPINTVL) {
      setTcpKeepIntvl(((Integer)value).intValue());
    } else if (option == IOUringChannelOption.TCP_USER_TIMEOUT) {
      setTcpUserTimeout(((Integer)value).intValue());
    } else if (option == IOUringChannelOption.IP_TRANSPARENT) {
      setIpTransparent(((Boolean)value).booleanValue());
    } else if (option == IOUringChannelOption.TCP_QUICKACK) {
      setTcpQuickAck(((Boolean)value).booleanValue());
    } else if (option == IOUringChannelOption.TCP_FASTOPEN_CONNECT) {
      setTcpFastOpenConnect(((Boolean)value).booleanValue());
    } else {
      return super.setOption(option, value);
    } 
    return true;
  }
  
  public int getSendBufferSize() {
    try {
      return ((IOUringSocketChannel)this.channel).socket.getSendBufferSize();
    } catch (IOException e) {
      throw new ChannelException(e);
    } 
  }
  
  public int getSoLinger() {
    try {
      return ((IOUringSocketChannel)this.channel).socket.getSoLinger();
    } catch (IOException e) {
      throw new ChannelException(e);
    } 
  }
  
  public int getTrafficClass() {
    try {
      return ((IOUringSocketChannel)this.channel).socket.getTrafficClass();
    } catch (IOException e) {
      throw new ChannelException(e);
    } 
  }
  
  public boolean isKeepAlive() {
    try {
      return ((IOUringSocketChannel)this.channel).socket.isKeepAlive();
    } catch (IOException e) {
      throw new ChannelException(e);
    } 
  }
  
  public boolean isReuseAddress() {
    try {
      return ((IOUringSocketChannel)this.channel).socket.isReuseAddress();
    } catch (IOException e) {
      throw new ChannelException(e);
    } 
  }
  
  public boolean isTcpNoDelay() {
    try {
      return ((IOUringSocketChannel)this.channel).socket.isTcpNoDelay();
    } catch (IOException e) {
      throw new ChannelException(e);
    } 
  }
  
  public boolean isTcpCork() {
    try {
      return ((IOUringSocketChannel)this.channel).socket.isTcpCork();
    } catch (IOException e) {
      throw new ChannelException(e);
    } 
  }
  
  public int getSoBusyPoll() {
    try {
      return ((IOUringSocketChannel)this.channel).socket.getSoBusyPoll();
    } catch (IOException e) {
      throw new ChannelException(e);
    } 
  }
  
  public long getTcpNotSentLowAt() {
    try {
      return ((IOUringSocketChannel)this.channel).socket.getTcpNotSentLowAt();
    } catch (IOException e) {
      throw new ChannelException(e);
    } 
  }
  
  public int getTcpKeepIdle() {
    try {
      return ((IOUringSocketChannel)this.channel).socket.getTcpKeepIdle();
    } catch (IOException e) {
      throw new ChannelException(e);
    } 
  }
  
  public int getTcpKeepIntvl() {
    try {
      return ((IOUringSocketChannel)this.channel).socket.getTcpKeepIntvl();
    } catch (IOException e) {
      throw new ChannelException(e);
    } 
  }
  
  public int getTcpKeepCnt() {
    try {
      return ((IOUringSocketChannel)this.channel).socket.getTcpKeepCnt();
    } catch (IOException e) {
      throw new ChannelException(e);
    } 
  }
  
  public int getTcpUserTimeout() {
    try {
      return ((IOUringSocketChannel)this.channel).socket.getTcpUserTimeout();
    } catch (IOException e) {
      throw new ChannelException(e);
    } 
  }
  
  public IOUringSocketChannelConfig setKeepAlive(boolean keepAlive) {
    try {
      ((IOUringSocketChannel)this.channel).socket.setKeepAlive(keepAlive);
      return this;
    } catch (IOException e) {
      throw new ChannelException(e);
    } 
  }
  
  public IOUringSocketChannelConfig setPerformancePreferences(int connectionTime, int latency, int bandwidth) { return this; }
  
  public IOUringSocketChannelConfig setReceiveBufferSize(int receiveBufferSize) {
    try {
      ((IOUringSocketChannel)this.channel).socket.setReceiveBufferSize(receiveBufferSize);
      return this;
    } catch (IOException e) {
      throw new ChannelException(e);
    } 
  }
  
  public IOUringSocketChannelConfig setReuseAddress(boolean reuseAddress) {
    try {
      ((IOUringSocketChannel)this.channel).socket.setReuseAddress(reuseAddress);
      return this;
    } catch (IOException e) {
      throw new ChannelException(e);
    } 
  }
  
  public IOUringSocketChannelConfig setSendBufferSize(int sendBufferSize) {
    try {
      ((IOUringSocketChannel)this.channel).socket.setSendBufferSize(sendBufferSize);
      return this;
    } catch (IOException e) {
      throw new ChannelException(e);
    } 
  }
  
  public int getReceiveBufferSize() {
    try {
      return ((IOUringSocketChannel)this.channel).socket.getReceiveBufferSize();
    } catch (IOException e) {
      throw new ChannelException(e);
    } 
  }
  
  public IOUringSocketChannelConfig setSoLinger(int soLinger) {
    try {
      ((IOUringSocketChannel)this.channel).socket.setSoLinger(soLinger);
      return this;
    } catch (IOException e) {
      throw new ChannelException(e);
    } 
  }
  
  public IOUringSocketChannelConfig setTcpNoDelay(boolean tcpNoDelay) {
    try {
      ((IOUringSocketChannel)this.channel).socket.setTcpNoDelay(tcpNoDelay);
      return this;
    } catch (IOException e) {
      throw new ChannelException(e);
    } 
  }
  
  public IOUringSocketChannelConfig setTcpCork(boolean tcpCork) {
    try {
      ((IOUringSocketChannel)this.channel).socket.setTcpCork(tcpCork);
      return this;
    } catch (IOException e) {
      throw new ChannelException(e);
    } 
  }
  
  public IOUringSocketChannelConfig setSoBusyPoll(int loopMicros) {
    try {
      ((IOUringSocketChannel)this.channel).socket.setSoBusyPoll(loopMicros);
      return this;
    } catch (IOException e) {
      throw new ChannelException(e);
    } 
  }
  
  public IOUringSocketChannelConfig setTcpNotSentLowAt(long tcpNotSentLowAt) {
    try {
      ((IOUringSocketChannel)this.channel).socket.setTcpNotSentLowAt(tcpNotSentLowAt);
      return this;
    } catch (IOException e) {
      throw new ChannelException(e);
    } 
  }
  
  public IOUringSocketChannelConfig setTrafficClass(int trafficClass) {
    try {
      ((IOUringSocketChannel)this.channel).socket.setTrafficClass(trafficClass);
      return this;
    } catch (IOException e) {
      throw new ChannelException(e);
    } 
  }
  
  public IOUringSocketChannelConfig setTcpKeepIdle(int seconds) {
    try {
      ((IOUringSocketChannel)this.channel).socket.setTcpKeepIdle(seconds);
      return this;
    } catch (IOException e) {
      throw new ChannelException(e);
    } 
  }
  
  public IOUringSocketChannelConfig setTcpKeepIntvl(int seconds) {
    try {
      ((IOUringSocketChannel)this.channel).socket.setTcpKeepIntvl(seconds);
      return this;
    } catch (IOException e) {
      throw new ChannelException(e);
    } 
  }
  
  @Deprecated
  public IOUringSocketChannelConfig setTcpKeepCntl(int probes) { return setTcpKeepCnt(probes); }
  
  public IOUringSocketChannelConfig setTcpKeepCnt(int probes) {
    try {
      ((IOUringSocketChannel)this.channel).socket.setTcpKeepCnt(probes);
      return this;
    } catch (IOException e) {
      throw new ChannelException(e);
    } 
  }
  
  public IOUringSocketChannelConfig setTcpUserTimeout(int milliseconds) {
    try {
      ((IOUringSocketChannel)this.channel).socket.setTcpUserTimeout(milliseconds);
      return this;
    } catch (IOException e) {
      throw new ChannelException(e);
    } 
  }
  
  public boolean isIpTransparent() {
    try {
      return ((IOUringSocketChannel)this.channel).socket.isIpTransparent();
    } catch (IOException e) {
      throw new ChannelException(e);
    } 
  }
  
  public IOUringSocketChannelConfig setIpTransparent(boolean transparent) {
    try {
      ((IOUringSocketChannel)this.channel).socket.setIpTransparent(transparent);
      return this;
    } catch (IOException e) {
      throw new ChannelException(e);
    } 
  }
  
  public IOUringSocketChannelConfig setTcpQuickAck(boolean quickAck) {
    try {
      ((IOUringSocketChannel)this.channel).socket.setTcpQuickAck(quickAck);
      return this;
    } catch (IOException e) {
      throw new ChannelException(e);
    } 
  }
  
  public boolean isTcpQuickAck() {
    try {
      return ((IOUringSocketChannel)this.channel).socket.isTcpQuickAck();
    } catch (IOException e) {
      throw new ChannelException(e);
    } 
  }
  
  public IOUringSocketChannelConfig setTcpFastOpenConnect(boolean fastOpenConnect) {
    try {
      ((IOUringSocketChannel)this.channel).socket.setTcpFastOpenConnect(fastOpenConnect);
      return this;
    } catch (IOException e) {
      throw new ChannelException(e);
    } 
  }
  
  public boolean isTcpFastOpenConnect() {
    try {
      return ((IOUringSocketChannel)this.channel).socket.isTcpFastOpenConnect();
    } catch (IOException e) {
      throw new ChannelException(e);
    } 
  }
  
  public boolean isAllowHalfClosure() { return this.allowHalfClosure; }
  
  public IOUringSocketChannelConfig setAllowHalfClosure(boolean allowHalfClosure) {
    this.allowHalfClosure = allowHalfClosure;
    return this;
  }
  
  public IOUringSocketChannelConfig setConnectTimeoutMillis(int connectTimeoutMillis) {
    super.setConnectTimeoutMillis(connectTimeoutMillis);
    return this;
  }
  
  @Deprecated
  public IOUringSocketChannelConfig setMaxMessagesPerRead(int maxMessagesPerRead) {
    super.setMaxMessagesPerRead(maxMessagesPerRead);
    return this;
  }
  
  public IOUringSocketChannelConfig setWriteSpinCount(int writeSpinCount) {
    super.setWriteSpinCount(writeSpinCount);
    return this;
  }
  
  public IOUringSocketChannelConfig setAllocator(ByteBufAllocator allocator) {
    super.setAllocator(allocator);
    return this;
  }
  
  public IOUringSocketChannelConfig setRecvByteBufAllocator(RecvByteBufAllocator allocator) {
    super.setRecvByteBufAllocator(allocator);
    return this;
  }
  
  public IOUringSocketChannelConfig setAutoRead(boolean autoRead) {
    super.setAutoRead(autoRead);
    return this;
  }
  
  public IOUringSocketChannelConfig setAutoClose(boolean autoClose) {
    super.setAutoClose(autoClose);
    return this;
  }
  
  @Deprecated
  public IOUringSocketChannelConfig setWriteBufferHighWaterMark(int writeBufferHighWaterMark) {
    super.setWriteBufferHighWaterMark(writeBufferHighWaterMark);
    return this;
  }
  
  @Deprecated
  public IOUringSocketChannelConfig setWriteBufferLowWaterMark(int writeBufferLowWaterMark) {
    super.setWriteBufferLowWaterMark(writeBufferLowWaterMark);
    return this;
  }
  
  public IOUringSocketChannelConfig setWriteBufferWaterMark(WriteBufferWaterMark writeBufferWaterMark) {
    super.setWriteBufferWaterMark(writeBufferWaterMark);
    return this;
  }
  
  public IOUringSocketChannelConfig setMessageSizeEstimator(MessageSizeEstimator estimator) {
    super.setMessageSizeEstimator(estimator);
    return this;
  }
}
