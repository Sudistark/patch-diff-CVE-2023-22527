package io.netty.incubator.channel.uring;

import io.netty.channel.Channel;
import io.netty.channel.ChannelConfig;
import io.netty.channel.ChannelMetadata;
import io.netty.channel.socket.ServerSocketChannel;
import io.netty.channel.socket.ServerSocketChannelConfig;
import io.netty.channel.unix.FileDescriptor;
import java.net.InetSocketAddress;
import java.net.SocketAddress;

public final class IOUringServerSocketChannel extends AbstractIOUringServerChannel implements ServerSocketChannel {
  private final IOUringServerSocketChannelConfig config;
  
  public IOUringServerSocketChannel() {
    super(LinuxSocket.newSocketStream(), false);
    this.config = new IOUringServerSocketChannelConfig(this);
  }
  
  public IOUringServerSocketChannelConfig config() { return this.config; }
  
  Channel newChildChannel(int fd, long acceptedAddressMemoryAddress, long acceptedAddressLengthMemoryAddress) {
    InetSocketAddress address;
    if (this.socket.isIpv6()) {
      byte[] ipv6Array = ((IOUringEventLoop)eventLoop()).inet6AddressArray();
      byte[] ipv4Array = ((IOUringEventLoop)eventLoop()).inet4AddressArray();
      address = SockaddrIn.readIPv6(acceptedAddressMemoryAddress, ipv6Array, ipv4Array);
    } else {
      byte[] addressArray = ((IOUringEventLoop)eventLoop()).inet4AddressArray();
      address = SockaddrIn.readIPv4(acceptedAddressMemoryAddress, addressArray);
    } 
    return new IOUringSocketChannel(this, new LinuxSocket(fd), address);
  }
  
  public InetSocketAddress remoteAddress() { return (InetSocketAddress)super.remoteAddress(); }
  
  public InetSocketAddress localAddress() { return (InetSocketAddress)super.localAddress(); }
  
  public void doBind(SocketAddress localAddress) throws Exception {
    super.doBind(localAddress);
    this.socket.listen(this.config.getBacklog());
    this.active = true;
  }
}
