package camel_snake_kebab.internals;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class macros__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__11;
  
  public static final Var const__12;
  
  public static final AFn const__15;
  
  public static final Var const__16;
  
  public static final AFn const__19;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new macros.fn__60978());
    const__3.setMeta((IPersistentMap)const__11);
    const__3.bindRoot(new macros.type_preserving_function());
    const__12.setMeta((IPersistentMap)const__15);
    const__12.bindRoot(new macros.type_converting_functions());
    const__16.setMeta((IPersistentMap)const__19);
    const__16.bindRoot(new macros.defconversion());
    ((Var)const__16)



















      
      .setMacro();
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "camel-snake-kebab.internals.macros");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("camel-snake-kebab.internals.macros", "type-preserving-function");
    const__11 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "case-label"), Symbol.intern(null, "first-fn"), Symbol.intern(null, "rest-fn"), Symbol.intern(null, "sep")) })), RT.keyword(null, "line"), Integer.valueOf(6), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "camel_snake_kebab/internals/macros.clj" });
    const__12 = (Var)RT.var("camel-snake-kebab.internals.macros", "type-converting-functions");
    const__15 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "case-label"), Symbol.intern(null, "first-fn"), Symbol.intern(null, "rest-fn"), Symbol.intern(null, "sep")) })), RT.keyword(null, "line"), Integer.valueOf(11), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "camel_snake_kebab/internals/macros.clj" });
    const__16 = (Var)RT.var("camel-snake-kebab.internals.macros", "defconversion");
    const__19 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "case-label"), Symbol.intern(null, "first-fn"), Symbol.intern(null, "rest-fn"), Symbol.intern(null, "sep")) })), RT.keyword(null, "line"), Integer.valueOf(22), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "camel_snake_kebab/internals/macros.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("camel_snake_kebab.internals.macros__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
