package camel_snake_kebab.internals;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class alter_name__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Object const__3;
  
  public static final Var const__4;
  
  public static final Var const__5;
  
  public static final Var const__6;
  
  public static final Keyword const__7;
  
  public static final Var const__8;
  
  public static final ISeq const__9;
  
  public static final Var const__10;
  
  public static final Var const__11;
  
  public static final AFn const__15;
  
  public static final Keyword const__16;
  
  public static final AFn const__17;
  
  public static final Keyword const__18;
  
  public static final Keyword const__19;
  
  public static final Keyword const__20;
  
  public static final AFn const__21;
  
  public static final Keyword const__22;
  
  public static final Var const__23;
  
  public static final Var const__24;
  
  public static final Var const__25;
  
  public static final AFn const__26;
  
  public static final AFn const__27;
  
  public static final Keyword const__28;
  
  public static final Var const__29;
  
  public static final AFn const__30;
  
  public static final Var const__31;
  
  public static final Object const__32;
  
  public static final Object const__33;
  
  public static final Object const__34;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new alter_name.fn__60952());
    new Object[2][0] = const__20;
    new Object[2][1] = new alter_name.fn__60976();
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "camel-snake-kebab.internals.alter-name");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = RT.classForName("camel_snake_kebab.internals.alter_name.AlterName");
    const__4 = (Var)RT.var("clojure.core", "alter-meta!");
    const__5 = (Var)RT.var("camel-snake-kebab.internals.alter-name", "AlterName");
    const__6 = (Var)RT.var("clojure.core", "assoc");
    const__7 = (Keyword)RT.keyword(null, "doc");
    const__8 = (Var)RT.var("clojure.core", "assert-same-protocol");
    const__9 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "alter-name")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Alters the name of this with f.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "f")) })) })) }));
    const__10 = (Var)RT.var("clojure.core", "alter-var-root");
    const__11 = (Var)RT.var("clojure.core", "merge");
    const__15 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "camel_snake_kebab.internals.alter_name.AlterName"), RT.keyword(null, "on-interface"), RT.classForName("camel_snake_kebab.internals.alter_name.AlterName") });
    const__16 = (Keyword)RT.keyword(null, "sigs");
    const__17 = (AFn)RT.map(new Object[] { RT.keyword(null, "alter-name"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "alter-name")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Alters the name of this with f.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "f")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "f")) })), RT.keyword(null, "doc"), "Alters the name of this with f." }) });
    const__18 = (Keyword)RT.keyword(null, "var");
    const__19 = (Keyword)RT.keyword(null, "method-map");
    const__20 = (Keyword)RT.keyword(null, "alter-name");
    const__21 = (AFn)RT.map(new Object[] { RT.keyword(null, "alter-name"), RT.keyword(null, "alter-name") });
    const__22 = (Keyword)RT.keyword(null, "method-builders");
    const__23 = (Var)RT.var("clojure.core", "intern");
    const__24 = (Var)RT.var("clojure.core", "*ns*");
    const__25 = (Var)RT.var("clojure.core", "with-meta");
    const__26 = (AFn)((IObj)Symbol.intern(null, "alter-name")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Alters the name of this with f.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "f")) })) }));
    const__27 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "alter-name")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Alters the name of this with f.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "f")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "f")) })), RT.keyword(null, "doc"), "Alters the name of this with f." });
    const__28 = (Keyword)RT.keyword(null, "protocol");
    const__29 = (Var)RT.var("clojure.core", "-reset-methods");
    const__30 = (AFn)Symbol.intern(null, "AlterName");
    const__31 = (Var)RT.var("clojure.core", "extend");
    const__32 = RT.classForName("java.lang.String");
    const__33 = RT.classForName("clojure.lang.Keyword");
    const__34 = RT.classForName("clojure.lang.Symbol");
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("camel_snake_kebab.internals.alter_name__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
