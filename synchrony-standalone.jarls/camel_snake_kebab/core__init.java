package camel_snake_kebab;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class core__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__12;
  
  public static final Var const__13;
  
  public static final AFn const__16;
  
  public static final Var const__17;
  
  public static final AFn const__19;
  
  public static final Var const__20;
  
  public static final AFn const__22;
  
  public static final Var const__23;
  
  public static final AFn const__25;
  
  public static final Var const__26;
  
  public static final AFn const__29;
  
  public static final Var const__30;
  
  public static final AFn const__32;
  
  public static final Var const__33;
  
  public static final AFn const__35;
  
  public static final Var const__36;
  
  public static final AFn const__38;
  
  public static final Var const__39;
  
  public static final AFn const__42;
  
  public static final Var const__43;
  
  public static final AFn const__45;
  
  public static final Var const__46;
  
  public static final AFn const__48;
  
  public static final Var const__49;
  
  public static final AFn const__51;
  
  public static final Var const__52;
  
  public static final AFn const__55;
  
  public static final Var const__56;
  
  public static final AFn const__58;
  
  public static final Var const__59;
  
  public static final AFn const__61;
  
  public static final Var const__62;
  
  public static final AFn const__64;
  
  public static final Var const__65;
  
  public static final AFn const__68;
  
  public static final Var const__69;
  
  public static final AFn const__71;
  
  public static final Var const__72;
  
  public static final AFn const__74;
  
  public static final Var const__75;
  
  public static final AFn const__77;
  
  public static final Var const__78;
  
  public static final AFn const__81;
  
  public static final Var const__82;
  
  public static final AFn const__84;
  
  public static final Var const__85;
  
  public static final AFn const__87;
  
  public static final Var const__88;
  
  public static final AFn const__90;
  
  public static final Var const__91;
  
  public static final AFn const__94;
  
  public static final Var const__95;
  
  public static final AFn const__97;
  
  public static final Var const__98;
  
  public static final AFn const__100;
  
  public static final Var const__101;
  
  public static final AFn const__103;
  
  public static void load() { LockingTransaction.runInTransaction((Callable)new core.fn__61012());
    const__3.setMeta((IPersistentMap)const__12);
    const__3.bindRoot(new core.convert_case());
    const__13.setMeta((IPersistentMap)const__16);
    const__13.bindRoot(new core.__GT_PascalCase());
    const__17.setMeta((IPersistentMap)const__19);
    const__17.bindRoot(new core.__GT_PascalCaseString());
    const__20.setMeta((IPersistentMap)const__22);
    const__20.bindRoot(new core.__GT_PascalCaseSymbol());
    const__23.setMeta((IPersistentMap)const__25);
    const__23.bindRoot(new core.__GT_PascalCaseKeyword());
    const__26.setMeta((IPersistentMap)const__29);
    const__26.bindRoot(new core.__GT_Camel_Snake_Case());
    const__30.setMeta((IPersistentMap)const__32);
    const__30.bindRoot(new core.__GT_Camel_Snake_Case_String());
    const__33.setMeta((IPersistentMap)const__35);
    const__33.bindRoot(new core.__GT_Camel_Snake_Case_Symbol());
    const__36.setMeta((IPersistentMap)const__38);
    const__36.bindRoot(new core.__GT_Camel_Snake_Case_Keyword());
    const__39.setMeta((IPersistentMap)const__42);
    const__39.bindRoot(new core.__GT_camelCase());
    const__43.setMeta((IPersistentMap)const__45);
    const__43.bindRoot(new core.__GT_camelCaseString());
    const__46.setMeta((IPersistentMap)const__48);
    const__46.bindRoot(new core.__GT_camelCaseSymbol());
    const__49.setMeta((IPersistentMap)const__51);
    const__49.bindRoot(new core.__GT_camelCaseKeyword());
    const__52.setMeta((IPersistentMap)const__55);
    const__52.bindRoot(new core.__GT_SCREAMING_SNAKE_CASE());
    const__56.setMeta((IPersistentMap)const__58);
    const__56.bindRoot(new core.__GT_SCREAMING_SNAKE_CASE_STRING());
    const__59.setMeta((IPersistentMap)const__61);
    const__59.bindRoot(new core.__GT_SCREAMING_SNAKE_CASE_SYMBOL());
    const__62.setMeta((IPersistentMap)const__64);
    const__62.bindRoot(new core.__GT_SCREAMING_SNAKE_CASE_KEYWORD());
    const__65.setMeta((IPersistentMap)const__68);
    const__65.bindRoot(new core.__GT_snake_case());
    const__69.setMeta((IPersistentMap)const__71);
    const__69.bindRoot(new core.__GT_snake_case_string());
    const__72.setMeta((IPersistentMap)const__74);
    const__72.bindRoot(new core.__GT_snake_case_symbol());
    const__75.setMeta((IPersistentMap)const__77);
    const__75.bindRoot(new core.__GT_snake_case_keyword());
    const__78.setMeta((IPersistentMap)const__81);
    const__78.bindRoot(new core.__GT_kebab_case());
    const__82.setMeta((IPersistentMap)const__84);
    const__82.bindRoot(new core.__GT_kebab_case_string());
    const__85.setMeta((IPersistentMap)const__87);
    const__85.bindRoot(new core.__GT_kebab_case_symbol());
    const__88.setMeta((IPersistentMap)const__90);
    const__88.bindRoot(new core.__GT_kebab_case_keyword());
    const__91.setMeta((IPersistentMap)const__94);
    const__91.bindRoot(new core.__GT_HTTP_Header_Case());
    const__95.setMeta((IPersistentMap)const__97);
    const__95.bindRoot(new core.__GT_HTTP_Header_Case_String());
    const__98.setMeta((IPersistentMap)const__100);
    const__98.bindRoot(new core.__GT_HTTP_Header_Case_Symbol());
    const__101.setMeta((IPersistentMap)const__103);
    const__101.bindRoot(new core.__GT_HTTP_Header_Case_Keyword()); }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "camel-snake-kebab.core");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("camel-snake-kebab.core", "convert-case");
    const__12 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "first-fn"), Symbol.intern(null, "rest-fn"), Symbol.intern(null, "sep"), Symbol.intern(null, "s"), Symbol.intern(null, "&"), Symbol.intern(null, "rest")) })), RT.keyword(null, "doc"), "Converts the case of a string according to the rule for the first\n  word, remaining words, and the separator.", RT.keyword(null, "line"), Integer.valueOf(8), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "camel_snake_kebab/core.cljc" });
    const__13 = (Var)RT.var("camel-snake-kebab.core", "->PascalCase");
    const__16 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s__60981__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__60982__auto__")) })), RT.keyword(null, "line"), Integer.valueOf(16), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "camel_snake_kebab/core.cljc" });
    const__17 = (Var)RT.var("camel-snake-kebab.core", "->PascalCaseString");
    const__19 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "s__60986__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__60987__auto__"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "not"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "nil?"), Symbol.intern(null, "s__60986__auto__") })) }))) })) })), RT.keyword(null, "line"), Integer.valueOf(16), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "camel_snake_kebab/core.cljc" });
    const__20 = (Var)RT.var("camel-snake-kebab.core", "->PascalCaseSymbol");
    const__22 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "s__60986__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__60987__auto__"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "not"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "nil?"), Symbol.intern(null, "s__60986__auto__") })) }))) })) })), RT.keyword(null, "line"), Integer.valueOf(16), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "camel_snake_kebab/core.cljc" });
    const__23 = (Var)RT.var("camel-snake-kebab.core", "->PascalCaseKeyword");
    const__25 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "s__60986__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__60987__auto__"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "not"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "nil?"), Symbol.intern(null, "s__60986__auto__") })) }))) })) })), RT.keyword(null, "line"), Integer.valueOf(16), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "camel_snake_kebab/core.cljc" });
    const__26 = (Var)RT.var("camel-snake-kebab.core", "->Camel_Snake_Case");
    const__29 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s__60981__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__60982__auto__")) })), RT.keyword(null, "line"), Integer.valueOf(17), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "camel_snake_kebab/core.cljc" });
    const__30 = (Var)RT.var("camel-snake-kebab.core", "->Camel_Snake_Case_String");
    const__32 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "s__60986__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__60987__auto__"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "not"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "nil?"), Symbol.intern(null, "s__60986__auto__") })) }))) })) })), RT.keyword(null, "line"), Integer.valueOf(17), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "camel_snake_kebab/core.cljc" });
    const__33 = (Var)RT.var("camel-snake-kebab.core", "->Camel_Snake_Case_Symbol");
    const__35 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "s__60986__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__60987__auto__"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "not"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "nil?"), Symbol.intern(null, "s__60986__auto__") })) }))) })) })), RT.keyword(null, "line"), Integer.valueOf(17), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "camel_snake_kebab/core.cljc" });
    const__36 = (Var)RT.var("camel-snake-kebab.core", "->Camel_Snake_Case_Keyword");
    const__38 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "s__60986__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__60987__auto__"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "not"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "nil?"), Symbol.intern(null, "s__60986__auto__") })) }))) })) })), RT.keyword(null, "line"), Integer.valueOf(17), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "camel_snake_kebab/core.cljc" });
    const__39 = (Var)RT.var("camel-snake-kebab.core", "->camelCase");
    const__42 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s__60981__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__60982__auto__")) })), RT.keyword(null, "line"), Integer.valueOf(18), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "camel_snake_kebab/core.cljc" });
    const__43 = (Var)RT.var("camel-snake-kebab.core", "->camelCaseString");
    const__45 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "s__60986__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__60987__auto__"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "not"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "nil?"), Symbol.intern(null, "s__60986__auto__") })) }))) })) })), RT.keyword(null, "line"), Integer.valueOf(18), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "camel_snake_kebab/core.cljc" });
    const__46 = (Var)RT.var("camel-snake-kebab.core", "->camelCaseSymbol");
    const__48 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "s__60986__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__60987__auto__"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "not"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "nil?"), Symbol.intern(null, "s__60986__auto__") })) }))) })) })), RT.keyword(null, "line"), Integer.valueOf(18), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "camel_snake_kebab/core.cljc" });
    const__49 = (Var)RT.var("camel-snake-kebab.core", "->camelCaseKeyword");
    const__51 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "s__60986__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__60987__auto__"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "not"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "nil?"), Symbol.intern(null, "s__60986__auto__") })) }))) })) })), RT.keyword(null, "line"), Integer.valueOf(18), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "camel_snake_kebab/core.cljc" });
    const__52 = (Var)RT.var("camel-snake-kebab.core", "->SCREAMING_SNAKE_CASE");
    const__55 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s__60981__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__60982__auto__")) })), RT.keyword(null, "line"), Integer.valueOf(19), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "camel_snake_kebab/core.cljc" });
    const__56 = (Var)RT.var("camel-snake-kebab.core", "->SCREAMING_SNAKE_CASE_STRING");
    const__58 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "s__60986__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__60987__auto__"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "not"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "nil?"), Symbol.intern(null, "s__60986__auto__") })) }))) })) })), RT.keyword(null, "line"), Integer.valueOf(19), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "camel_snake_kebab/core.cljc" });
    const__59 = (Var)RT.var("camel-snake-kebab.core", "->SCREAMING_SNAKE_CASE_SYMBOL");
    const__61 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "s__60986__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__60987__auto__"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "not"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "nil?"), Symbol.intern(null, "s__60986__auto__") })) }))) })) })), RT.keyword(null, "line"), Integer.valueOf(19), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "camel_snake_kebab/core.cljc" });
    const__62 = (Var)RT.var("camel-snake-kebab.core", "->SCREAMING_SNAKE_CASE_KEYWORD");
    const__64 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "s__60986__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__60987__auto__"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "not"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "nil?"), Symbol.intern(null, "s__60986__auto__") })) }))) })) })), RT.keyword(null, "line"), Integer.valueOf(19), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "camel_snake_kebab/core.cljc" });
    const__65 = (Var)RT.var("camel-snake-kebab.core", "->snake_case");
    const__68 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s__60981__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__60982__auto__")) })), RT.keyword(null, "line"), Integer.valueOf(20), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "camel_snake_kebab/core.cljc" });
    const__69 = (Var)RT.var("camel-snake-kebab.core", "->snake_case_string");
    const__71 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "s__60986__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__60987__auto__"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "not"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "nil?"), Symbol.intern(null, "s__60986__auto__") })) }))) })) })), RT.keyword(null, "line"), Integer.valueOf(20), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "camel_snake_kebab/core.cljc" });
    const__72 = (Var)RT.var("camel-snake-kebab.core", "->snake_case_symbol");
    const__74 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "s__60986__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__60987__auto__"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "not"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "nil?"), Symbol.intern(null, "s__60986__auto__") })) }))) })) })), RT.keyword(null, "line"), Integer.valueOf(20), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "camel_snake_kebab/core.cljc" });
    const__75 = (Var)RT.var("camel-snake-kebab.core", "->snake_case_keyword");
    const__77 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "s__60986__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__60987__auto__"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "not"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "nil?"), Symbol.intern(null, "s__60986__auto__") })) }))) })) })), RT.keyword(null, "line"), Integer.valueOf(20), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "camel_snake_kebab/core.cljc" });
    const__78 = (Var)RT.var("camel-snake-kebab.core", "->kebab-case");
    const__81 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s__60981__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__60982__auto__")) })), RT.keyword(null, "line"), Integer.valueOf(21), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "camel_snake_kebab/core.cljc" });
    const__82 = (Var)RT.var("camel-snake-kebab.core", "->kebab-case-string");
    const__84 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "s__60986__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__60987__auto__"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "not"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "nil?"), Symbol.intern(null, "s__60986__auto__") })) }))) })) })), RT.keyword(null, "line"), Integer.valueOf(21), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "camel_snake_kebab/core.cljc" });
    const__85 = (Var)RT.var("camel-snake-kebab.core", "->kebab-case-symbol");
    const__87 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "s__60986__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__60987__auto__"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "not"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "nil?"), Symbol.intern(null, "s__60986__auto__") })) }))) })) })), RT.keyword(null, "line"), Integer.valueOf(21), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "camel_snake_kebab/core.cljc" });
    const__88 = (Var)RT.var("camel-snake-kebab.core", "->kebab-case-keyword");
    const__90 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "s__60986__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__60987__auto__"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "not"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "nil?"), Symbol.intern(null, "s__60986__auto__") })) }))) })) })), RT.keyword(null, "line"), Integer.valueOf(21), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "camel_snake_kebab/core.cljc" });
    const__91 = (Var)RT.var("camel-snake-kebab.core", "->HTTP-Header-Case");
    const__94 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s__60981__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__60982__auto__")) })), RT.keyword(null, "line"), Integer.valueOf(22), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "camel_snake_kebab/core.cljc" });
    const__95 = (Var)RT.var("camel-snake-kebab.core", "->HTTP-Header-Case-String");
    const__97 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "s__60986__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__60987__auto__"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "not"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "nil?"), Symbol.intern(null, "s__60986__auto__") })) }))) })) })), RT.keyword(null, "line"), Integer.valueOf(22), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "camel_snake_kebab/core.cljc" });
    const__98 = (Var)RT.var("camel-snake-kebab.core", "->HTTP-Header-Case-Symbol");
  }
  
  public static void __init1() {
    const__100 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "s__60986__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__60987__auto__"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "not"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "nil?"), Symbol.intern(null, "s__60986__auto__") })) }))) })) })), RT.keyword(null, "line"), Integer.valueOf(22), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "camel_snake_kebab/core.cljc" });
    const__101 = (Var)RT.var("camel-snake-kebab.core", "->HTTP-Header-Case-Keyword");
    const__103 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "s__60986__auto__"), Symbol.intern(null, "&"), Symbol.intern(null, "rest__60987__auto__"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "not"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "nil?"), Symbol.intern(null, "s__60986__auto__") })) }))) })) })), RT.keyword(null, "line"), Integer.valueOf(22), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "camel_snake_kebab/core.cljc" });
  }
  
  static  {
    __init0();
    __init1();
    Compiler.pushNSandLoader(RT.classForName("camel_snake_kebab.core__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
