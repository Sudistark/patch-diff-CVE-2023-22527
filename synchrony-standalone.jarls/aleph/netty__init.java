package aleph;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.Delay;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.Numbers;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;
import java.util.concurrent.ConcurrentHashMap;

public class netty__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final Keyword const__6;
  
  public static final AFn const__12;
  
  public static final Var const__13;
  
  public static final Var const__14;
  
  public static final Keyword const__15;
  
  public static final Var const__16;
  
  public static final AFn const__19;
  
  public static final Var const__20;
  
  public static final AFn const__24;
  
  public static final Var const__25;
  
  public static final AFn const__28;
  
  public static final Var const__29;
  
  public static final AFn const__32;
  
  public static final Var const__33;
  
  public static final AFn const__36;
  
  public static final Var const__37;
  
  public static final AFn const__40;
  
  public static final Var const__41;
  
  public static final AFn const__44;
  
  public static final Object const__45;
  
  public static final Var const__46;
  
  public static final AFn const__48;
  
  public static final Var const__49;
  
  public static final Object const__51;
  
  public static final Var const__52;
  
  public static final AFn const__55;
  
  public static final Var const__56;
  
  public static final AFn const__59;
  
  public static final Var const__60;
  
  public static final AFn const__63;
  
  public static final Var const__67;
  
  public static final AFn const__70;
  
  public static final Var const__71;
  
  public static final AFn const__74;
  
  public static final Var const__75;
  
  public static final AFn const__78;
  
  public static final Var const__79;
  
  public static final AFn const__83;
  
  public static final Var const__84;
  
  public static final AFn const__87;
  
  public static final AFn const__90;
  
  public static final Var const__91;
  
  public static final AFn const__94;
  
  public static final Var const__95;
  
  public static final AFn const__98;
  
  public static final Var const__99;
  
  public static final AFn const__102;
  
  public static final Var const__103;
  
  public static final AFn const__106;
  
  public static final Var const__107;
  
  public static final AFn const__112;
  
  public static final Var const__113;
  
  public static final AFn const__117;
  
  public static final Var const__118;
  
  public static final AFn const__121;
  
  public static final Var const__122;
  
  public static final AFn const__125;
  
  public static final Var const__126;
  
  public static final AFn const__129;
  
  public static final Var const__130;
  
  public static final AFn const__133;
  
  public static final Var const__134;
  
  public static final AFn const__137;
  
  public static final Var const__138;
  
  public static final AFn const__141;
  
  public static final Var const__142;
  
  public static final AFn const__144;
  
  public static final Var const__145;
  
  public static final AFn const__147;
  
  public static final Var const__148;
  
  public static final AFn const__150;
  
  public static final Var const__151;
  
  public static final AFn const__154;
  
  public static final Var const__155;
  
  public static final AFn const__157;
  
  public static final Keyword const__158;
  
  public static final Var const__159;
  
  public static final AFn const__162;
  
  public static final Var const__163;
  
  public static final AFn const__166;
  
  public static final Var const__167;
  
  public static final AFn const__170;
  
  public static final Var const__171;
  
  public static final AFn const__174;
  
  public static final Var const__175;
  
  public static final AFn const__178;
  
  public static final Var const__179;
  
  public static final AFn const__182;
  
  public static final Var const__183;
  
  public static final AFn const__186;
  
  public static final Var const__187;
  
  public static final AFn const__191;
  
  public static final Var const__192;
  
  public static final AFn const__195;
  
  public static final Var const__196;
  
  public static final AFn const__199;
  
  public static final Var const__200;
  
  public static final AFn const__203;
  
  public static final Var const__204;
  
  public static final AFn const__207;
  
  public static final Var const__208;
  
  public static final AFn const__211;
  
  public static final Var const__212;
  
  public static final AFn const__215;
  
  public static final Var const__216;
  
  public static final AFn const__219;
  
  public static final Var const__220;
  
  public static final AFn const__223;
  
  public static final Var const__224;
  
  public static final AFn const__227;
  
  public static final Var const__228;
  
  public static final AFn const__231;
  
  public static final Var const__232;
  
  public static final AFn const__235;
  
  public static final Var const__236;
  
  public static final AFn const__239;
  
  public static final Var const__240;
  
  public static final AFn const__242;
  
  public static final Var const__243;
  
  public static final Var const__244;
  
  public static final Var const__245;
  
  public static final AFn const__247;
  
  public static final Var const__248;
  
  public static final Var const__249;
  
  public static final AFn const__252;
  
  public static final Var const__253;
  
  public static final AFn const__256;
  
  public static final Object const__257;
  
  public static final Var const__258;
  
  public static final Var const__259;
  
  public static final ISeq const__260;
  
  public static final Var const__261;
  
  public static final Var const__262;
  
  public static final AFn const__266;
  
  public static final Keyword const__267;
  
  public static final AFn const__268;
  
  public static final Keyword const__269;
  
  public static final Keyword const__270;
  
  public static final AFn const__273;
  
  public static final Keyword const__274;
  
  public static final Var const__275;
  
  public static final Var const__276;
  
  public static final Var const__277;
  
  public static final AFn const__278;
  
  public static final AFn const__279;
  
  public static final Keyword const__280;
  
  public static final AFn const__281;
  
  public static final AFn const__282;
  
  public static final Var const__283;
  
  public static final AFn const__284;
  
  public static final Var const__285;
  
  public static final AFn const__288;
  
  public static final Var const__289;
  
  public static final AFn const__292;
  
  public static final Var const__293;
  
  public static final AFn const__296;
  
  public static final Var const__297;
  
  public static final AFn const__300;
  
  public static final Var const__301;
  
  public static final AFn const__304;
  
  public static final Var const__305;
  
  public static final AFn const__308;
  
  public static final Var const__309;
  
  public static final AFn const__312;
  
  public static final Var const__313;
  
  public static final AFn const__316;
  
  public static final Var const__317;
  
  public static final AFn const__321;
  
  public static final Var const__322;
  
  public static final AFn const__325;
  
  public static final Var const__326;
  
  public static final AFn const__328;
  
  public static final Var const__329;
  
  public static final AFn const__331;
  
  public static final Var const__332;
  
  public static final AFn const__334;
  
  public static final Var const__335;
  
  public static final AFn const__337;
  
  public static final Var const__338;
  
  public static final AFn const__341;
  
  public static final Var const__342;
  
  public static final AFn const__345;
  
  public static final Var const__346;
  
  public static final AFn const__349;
  
  public static final Var const__350;
  
  public static final AFn const__353;
  
  public static final Var const__354;
  
  public static final AFn const__356;
  
  public static final Object const__357;
  
  public static final Var const__358;
  
  public static final AFn const__361;
  
  public static final Var const__362;
  
  public static final AFn const__365;
  
  public static final Var const__366;
  
  public static final AFn const__369;
  
  public static final Var const__370;
  
  public static final AFn const__373;
  
  public static final Var const__374;
  
  public static final AFn const__377;
  
  public static final Var const__378;
  
  public static final AFn const__381;
  
  public static final Var const__382;
  
  public static final AFn const__385;
  
  public static final Var const__386;
  
  public static final AFn const__389;
  
  public static final Var const__390;
  
  public static final AFn const__393;
  
  public static final Var const__394;
  
  public static final AFn const__397;
  
  public static final Var const__398;
  
  public static final AFn const__401;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new netty.fn__27657());
    const__3.setMeta((IPersistentMap)const__12);
    const__3.bindRoot(new netty.release());
    const__16.setMeta((IPersistentMap)const__19);
    const__16.bindRoot(new netty.acquire());
    const__20.setMeta((IPersistentMap)const__24);
    const__20.bindRoot(new netty.leak_detector_level_BANG_());
    const__25.setMeta((IPersistentMap)const__28);
    const__25.bindRoot(new netty.set_logger_BANG_());
    const__29.setMeta((IPersistentMap)const__32);
    const__29.bindRoot(new netty.channel_server_name());
    const__33.setMeta((IPersistentMap)const__36);
    const__33.bindRoot(new netty.channel_server_port());
    const__37.setMeta((IPersistentMap)const__40);
    const__37.bindRoot(new netty.channel_remote_address());
    const__41.setMeta((IPersistentMap)const__44);
    const__41.bindRoot(const__45);
    const__46.setMeta((IPersistentMap)const__48);
    const__46







































      
      .bindRoot(((IFn)const__49.getRawRoot()).invoke(Numbers.byte_array(const__51)));
    const__52.setMeta((IPersistentMap)const__55);
    const__52.bindRoot(new netty.buf__GT_array());
    const__56.setMeta((IPersistentMap)const__59);
    const__56.bindRoot(new netty.release_buf__GT_array());
    const__60.setMeta((IPersistentMap)const__63);
    const__60.bindRoot(new netty.bufs__GT_array());
    const__67.setMeta((IPersistentMap)const__70);
    const__71.setMeta((IPersistentMap)const__74);
    const__71.bindRoot(new netty.to_byte_buf_stream());
    const__75.setMeta((IPersistentMap)const__78);
    const__75.bindRoot(new netty.ensure_dynamic_classloader());
    const__79.setMeta((IPersistentMap)const__83);
    const__79.bindRoot(new netty.operation_complete());
    const__84.setMeta((IPersistentMap)const__87);
    const__84.bindRoot(new netty.wrap_future());
    const__67.setMeta((IPersistentMap)const__90);
    const__67.bindRoot(new netty.allocate());
    const__91.setMeta((IPersistentMap)const__94);
    const__91.bindRoot(new netty.write());
    const__95.setMeta((IPersistentMap)const__98);
    const__95.bindRoot(new netty.write_and_flush());
    const__99.setMeta((IPersistentMap)const__102);
    const__99.bindRoot(new netty.flush());
    const__103.setMeta((IPersistentMap)const__106);
    const__103.bindRoot(new netty.close());
    const__107.setMeta((IPersistentMap)const__112);
    const__107.bindRoot(new netty.channel());
    const__113.setMeta((IPersistentMap)const__117);
    const__113.bindRoot(new netty.make_channel_group());
    const__118.setMeta((IPersistentMap)const__121);
    const__118.bindRoot(new netty.safe_execute());
    ((Var)const__118)



































































































































      
      .setMacro();
    const__122.setMeta((IPersistentMap)const__125);
    const__122.bindRoot(new netty.put_BANG_());
    const__126.setMeta((IPersistentMap)const__129);
    const__126.bindRoot(new netty.attribute());
    const__130.setMeta((IPersistentMap)const__133);
    const__130.bindRoot(new netty.get_attribute());
    const__134.setMeta((IPersistentMap)const__137);
    const__134.bindRoot(new netty.set_attribute());
    const__138.setMeta((IPersistentMap)const__141);
    const__138.bindRoot(new ConcurrentHashMap());
    const__142.setMeta((IPersistentMap)const__144);
    const__142.bindRoot(new ConcurrentHashMap());
    const__145.setMeta((IPersistentMap)const__147);
    const__145.bindRoot(new ConcurrentHashMap());
    const__148.setMeta((IPersistentMap)const__150);
    const__148.bindRoot(new ConcurrentHashMap());
    const__151.setMeta((IPersistentMap)const__154);
    const__151.bindRoot(new netty.connection_stats());
    const__155.setMeta((IPersistentMap)const__157);
    const__155.bindRoot(const__158);
    const__159.setMeta((IPersistentMap)const__162);
    const__159.bindRoot(new netty.__GT_ChannelSink());
    const__163.setMeta((IPersistentMap)const__166);
    const__163.bindRoot(new netty.sink());
    const__167.setMeta((IPersistentMap)const__170);
    const__167.bindRoot(new netty.source());
    const__171.setMeta((IPersistentMap)const__174);
    const__171.bindRoot(new netty.buffered_source());
    const__175.setMeta((IPersistentMap)const__178);
    const__175.bindRoot(new netty.channel_handler());
    ((Var)const__175)

































































































      
      .setMacro();
    const__179.setMeta((IPersistentMap)const__182);
    const__179.bindRoot(new netty.channel_inbound_handler());
    ((Var)const__179)










































































      
      .setMacro();
    const__183.setMeta((IPersistentMap)const__186);
    const__183.bindRoot(new netty.channel_outbound_handler());
    ((Var)const__183)













































      
      .setMacro();
    const__187.setMeta((IPersistentMap)const__191);
    const__187.bindRoot(new netty.bandwidth_tracker());
    const__192.setMeta((IPersistentMap)const__195);
    const__192.bindRoot(new netty.channel_tracking_handler());
    const__196.setMeta((IPersistentMap)const__199);
    const__196.bindRoot(new netty.pipeline_initializer());
    const__200.setMeta((IPersistentMap)const__203);
    const__200.bindRoot(new netty.remove_if_present());
    const__204.setMeta((IPersistentMap)const__207);
    const__204.bindRoot(new netty.append_handler_to_pipeline());
    const__208.setMeta((IPersistentMap)const__211);
    const__208.bindRoot(new netty.prepend_handler_to_pipeline());
    const__212.setMeta((IPersistentMap)const__215);
    const__212.bindRoot(new netty.instrument_BANG_());
    const__216.setMeta((IPersistentMap)const__219);
    const__216.bindRoot(new netty.coerce_log_level());
    const__220.setMeta((IPersistentMap)const__223);
    const__220.bindRoot(new netty.activity_logger());
    const__224.setMeta((IPersistentMap)const__227);
    const__224.bindRoot(new netty.coerce_ssl_provider());
    const__228.setMeta((IPersistentMap)const__231);
    const__228.bindRoot(new netty.self_signed_ssl_context());
    const__232.setMeta((IPersistentMap)const__235);
    const__232.bindRoot(new netty.insecure_ssl_client_context());
    const__236.setMeta((IPersistentMap)const__239);
    const__236.bindRoot(new netty.coerce_ssl_context());
    const__240.setMeta((IPersistentMap)const__242);
    const__240



























































































































































































































      
      .bindRoot(((IFn)const__243.getRawRoot()).invoke(const__236.getRawRoot(), const__244.getRawRoot()));
    const__245.setMeta((IPersistentMap)const__247);
    const__245

      
      .bindRoot(((IFn)const__243.getRawRoot()).invoke(const__236.getRawRoot(), const__248.getRawRoot()));
    const__249.setMeta((IPersistentMap)const__252);
    const__249.bindRoot(new netty.channel_ssl_session());
    const__253.setMeta((IPersistentMap)const__256);
    const__253.bindRoot(new netty.ssl_handshake_error_QMARK_());
    const__285.setMeta((IPersistentMap)const__288);
    const__285.bindRoot(new netty.epoll_available_QMARK_());
    const__289.setMeta((IPersistentMap)const__292);
    const__289.bindRoot(new netty.kqueue_available_QMARK_());
    const__293.setMeta((IPersistentMap)const__296);
    const__293.bindRoot(new netty.io_uring_available_QMARK_());
    const__297.setMeta((IPersistentMap)const__300);
    const__297.bindRoot(new netty.determine_transport());
    const__301.setMeta((IPersistentMap)const__304);
    const__301.bindRoot(new netty.unavailability_cause());
    const__305.setMeta((IPersistentMap)const__308);
    const__305.bindRoot(new netty.ensure_transport_available_BANG_());
    const__309.setMeta((IPersistentMap)const__312);
    const__309.bindRoot(new netty.ensure_epoll_available_BANG_());
    const__313.setMeta((IPersistentMap)const__316);
    const__313.bindRoot(new netty.get_default_event_loop_threads());
    const__317.setMeta((IPersistentMap)const__321);
    const__317.bindRoot(new netty.enumerating_thread_factory());
    const__322.setMeta((IPersistentMap)const__325);
    const__322.bindRoot("aleph-netty-client-event-pool");
    const__326.setMeta((IPersistentMap)const__328);
    const__326.bindRoot(new Delay((IFn)new netty.fn__28036()));
    const__329.setMeta((IPersistentMap)const__331);
    const__329.bindRoot(new Delay((IFn)new netty.fn__28038()));
    const__332.setMeta((IPersistentMap)const__334);
    const__332.bindRoot(new Delay((IFn)new netty.fn__28040()));
    const__335.setMeta((IPersistentMap)const__337);
    const__335.bindRoot(new Delay((IFn)new netty.fn__28042()));
    const__338.setMeta((IPersistentMap)const__341);
    const__338.bindRoot(new netty.transport_client_group());
    const__342.setMeta((IPersistentMap)const__345);
    const__342.bindRoot(new netty.transport_event_loop_group());
    const__346.setMeta((IPersistentMap)const__349);
    const__346.bindRoot(new netty.transport_server_channel());
    const__350.setMeta((IPersistentMap)const__353);
    const__350.bindRoot(new netty.convert_address_types());
    const__354.setMeta((IPersistentMap)const__356);
    const__354.bindRoot(const__357);
    const__358.setMeta((IPersistentMap)const__361);
    const__358.bindRoot(new netty.dns_name_servers_provider());
    const__362.setMeta((IPersistentMap)const__365);
    const__362.bindRoot(new netty.transport_channel_type());
    const__366.setMeta((IPersistentMap)const__369);
    const__366.bindRoot(new netty.transport_channel());
    const__370.setMeta((IPersistentMap)const__373);
    const__370.bindRoot(new netty.dns_resolver_group_builder());
    const__374.setMeta((IPersistentMap)const__377);
    const__374.bindRoot(new netty.dns_resolver_group());
    const__378.setMeta((IPersistentMap)const__381);
    const__378.bindRoot(new netty.maybe_ssl_handshake_future());
    const__382.setMeta((IPersistentMap)const__385);
    const__382.bindRoot(new netty.ignore_ssl_handshake_errors());
    const__386.setMeta((IPersistentMap)const__389);
    const__386.bindRoot(new netty.create_client());
    const__390.setMeta((IPersistentMap)const__393);
    const__390.bindRoot(new netty.add_ssl_handler());
    const__394.setMeta((IPersistentMap)const__397);
    const__394.bindRoot(new netty.add_channel_tracker_handler());
    const__398.setMeta((IPersistentMap)const__401);
    const__398.bindRoot(new netty.start_server());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "aleph.netty");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("aleph.netty", "release");
    const__6 = (Keyword)RT.keyword(null, "doc");
    const__12 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "doc"), "Decreases the reference count by 1 and deallocates this object if the reference count reaches at 0.", RT.keyword(null, "line"), Integer.valueOf(101), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__13 = (Var)RT.var("clojure.core", "alter-meta!");
    const__14 = (Var)RT.var("clojure.core", "assoc");
    const__15 = (Keyword)RT.keyword(null, "inline");
    const__16 = (Var)RT.var("aleph.netty", "acquire");
    const__19 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "doc"), "Increases the reference count by 1.", RT.keyword(null, "line"), Integer.valueOf(106), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__20 = (Var)RT.var("aleph.netty", "leak-detector-level!");
    const__24 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "level")) })), RT.keyword(null, "line"), Integer.valueOf(111), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__25 = (Var)RT.var("aleph.netty", "set-logger!");
    const__28 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "logger")) })), RT.keyword(null, "doc"), "Changes the default logger factory.\n  The parameter can be either `:log4j`, `:log4j2`, `:slf4j` or `:jdk`.", RT.keyword(null, "line"), Integer.valueOf(119), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__29 = (Var)RT.var("aleph.netty", "channel-server-name");
    const__32 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "ch")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Channel") }))) })), RT.keyword(null, "line"), Integer.valueOf(132), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__33 = (Var)RT.var("aleph.netty", "channel-server-port");
    const__36 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "ch")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Channel") }))) })), RT.keyword(null, "line"), Integer.valueOf(135), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__37 = (Var)RT.var("aleph.netty", "channel-remote-address");
    const__40 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "ch")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Channel") }))) })), RT.keyword(null, "line"), Integer.valueOf(138), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__41 = (Var)RT.var("aleph.netty", "default-shutdown-timeout");
    const__44 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "const"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(143), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj", 
          RT.keyword(null, "doc"), "Default timeout in seconds to wait for graceful shutdown complete" });
    const__45 = Long.valueOf(15L);
    const__46 = (Var)RT.var("aleph.netty", "array-class");
    const__48 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "const"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(147), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__49 = (Var)RT.var("clojure.core", "class");
    const__51 = Long.valueOf(0L);
    const__52 = (Var)RT.var("aleph.netty", "buf->array");
    const__55 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "buf")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "ByteBuf") }))) })), RT.keyword(null, "line"), Integer.valueOf(149), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__56 = (Var)RT.var("aleph.netty", "release-buf->array");
    const__59 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "buf")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "ByteBuf") }))) })), RT.keyword(null, "line"), Integer.valueOf(155), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__60 = (Var)RT.var("aleph.netty", "bufs->array");
    const__63 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "bufs")) })), RT.keyword(null, "line"), Integer.valueOf(161), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__67 = (Var)RT.var("aleph.netty", "allocate");
    const__70 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(182), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__71 = (Var)RT.var("aleph.netty", "to-byte-buf-stream");
    const__74 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "chunk-size")) })), RT.keyword(null, "doc"), "Converts `x` into a manifold stream of `io.netty.ByteBuf` of `chunk-size`.", RT.keyword(null, "line"), Integer.valueOf(232), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__75 = (Var)RT.var("aleph.netty", "ensure-dynamic-classloader");
    const__78 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "doc"), "Ensure the context class loader has a valid loader chain to\n   prevent `ClassNotFoundException`.\n   https://github.com/clj-commons/aleph/issues/603.", RT.keyword(null, "line"), Integer.valueOf(238), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "aleph/netty.clj" });
    const__79 = (Var)RT.var("aleph.netty", "operation-complete");
    const__83 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "f")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Future") })), Symbol.intern(null, "d")) })), RT.keyword(null, "line"), Integer.valueOf(252), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__84 = (Var)RT.var("aleph.netty", "wrap-future");
    const__87 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "f")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Future") }))) })), RT.keyword(null, "line"), Integer.valueOf(266), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__90 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(279), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__91 = (Var)RT.var("aleph.netty", "write");
    const__94 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "msg")) })), RT.keyword(null, "line"), Integer.valueOf(284), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__95 = (Var)RT.var("aleph.netty", "write-and-flush");
    const__98 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "msg")) })), RT.keyword(null, "line"), Integer.valueOf(290), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__99 = (Var)RT.var("aleph.netty", "flush");
  }
  
  public static void __init1() {
    const__102 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(296), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__103 = (Var)RT.var("aleph.netty", "close");
    const__106 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(301), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__107 = (Var)RT.var("aleph.netty", "channel");
    const__112 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "tag"), RT.classForName("io.netty.channel.Channel"), RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "line"), Integer.valueOf(306), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "aleph/netty.clj" });
    const__113 = (Var)RT.var("aleph.netty", "make-channel-group");
    const__117 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "tag"), RT.classForName("io.netty.channel.group.ChannelGroup"), RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "doc"), "Create a channel group which can be used to perform channel operations on\n   several channels at once.", RT.keyword(null, "line"), Integer.valueOf(311), 
          RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__118 = (Var)RT.var("aleph.netty", "safe-execute");
    const__121 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ch"), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "doc"), "Executes the body on the event-loop (an executor service) associated with the Netty channel.\n\n   Executes immediately if current thread is in the event loop. Otherwise, returns a deferred\n   that will hold the result once done.", RT.keyword(null, "line"), Integer.valueOf(317), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "aleph/netty.clj" });
    const__122 = (Var)RT.var("aleph.netty", "put!");
    const__125 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "ch")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Channel") })), Symbol.intern(null, "s"), Symbol.intern(null, "msg")) })), RT.keyword(null, "line"), Integer.valueOf(336), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__126 = (Var)RT.var("aleph.netty", "attribute");
    const__129 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })), RT.keyword(null, "line"), Integer.valueOf(371), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__130 = (Var)RT.var("aleph.netty", "get-attribute");
    const__133 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ch"), Symbol.intern(null, "attr")) })), RT.keyword(null, "line"), Integer.valueOf(374), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__134 = (Var)RT.var("aleph.netty", "set-attribute");
    const__137 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ch"), Symbol.intern(null, "attr"), Symbol.intern(null, "val")) })), RT.keyword(null, "line"), Integer.valueOf(377), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__138 = (Var)RT.var("aleph.netty", "channel-inbound-counter");
    const__141 = (AFn)RT.map(new Object[] { RT.keyword(null, "tag"), RT.classForName("java.util.concurrent.ConcurrentHashMap"), RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(382), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__142 = (Var)RT.var("aleph.netty", "channel-outbound-counter");
    const__144 = (AFn)RT.map(new Object[] { RT.keyword(null, "tag"), RT.classForName("java.util.concurrent.ConcurrentHashMap"), RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(383), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__145 = (Var)RT.var("aleph.netty", "channel-inbound-throughput");
    const__147 = (AFn)RT.map(new Object[] { RT.keyword(null, "tag"), RT.classForName("java.util.concurrent.ConcurrentHashMap"), RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(384), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__148 = (Var)RT.var("aleph.netty", "channel-outbound-throughput");
    const__150 = (AFn)RT.map(new Object[] { RT.keyword(null, "tag"), RT.classForName("java.util.concurrent.ConcurrentHashMap"), RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(385), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__151 = (Var)RT.var("aleph.netty", "connection-stats");
    const__154 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "ch")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Channel") })), Symbol.intern(null, "inbound?")) })), RT.keyword(null, "line"), Integer.valueOf(387), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "aleph/netty.clj" });
    const__155 = (Var)RT.var("aleph.netty", "sink-close-marker");
    const__157 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(400), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__158 = (Keyword)RT.keyword("aleph.netty", "sink-close");
    const__159 = (Var)RT.var("aleph.netty", "->ChannelSink");
    const__162 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "coerce-fn"), Symbol.intern(null, "downstream?"), Symbol.intern(null, "ch"), Symbol.intern(null, "additional-description")) })), RT.keyword(null, "line"), Integer.valueOf(402), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__163 = (Var)RT.var("aleph.netty", "sink");
    const__166 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ch")), Tuple.create(Symbol.intern(null, "ch"), Symbol.intern(null, "downstream?"), Symbol.intern(null, "coerce-fn")), Tuple.create(Symbol.intern(null, "ch"), Symbol.intern(null, "downstream?"), Symbol.intern(null, "coerce-fn"), Symbol.intern(null, "additional-description")) })), RT.keyword(null, "line"), Integer.valueOf(457), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__167 = (Var)RT.var("aleph.netty", "source");
    const__170 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "ch")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Channel") }))) })), RT.keyword(null, "line"), Integer.valueOf(475), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__171 = (Var)RT.var("aleph.netty", "buffered-source");
    const__174 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "ch")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Channel") })), Symbol.intern(null, "metric"), Symbol.intern(null, "capacity")) })), RT.keyword(null, "line"), Integer.valueOf(487), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__175 = (Var)RT.var("aleph.netty", "channel-handler");
    const__178 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), RT.map(new Object[] { RT.keyword(null, "as"), Symbol.intern(null, "handlers") })) })), RT.keyword(null, "line"), Integer.valueOf(501), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__179 = (Var)RT.var("aleph.netty", "channel-inbound-handler");
    const__182 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), RT.map(new Object[] { RT.keyword(null, "as"), Symbol.intern(null, "handlers") })) })), RT.keyword(null, "line"), Integer.valueOf(577), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__183 = (Var)RT.var("aleph.netty", "channel-outbound-handler");
    const__186 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), RT.map(new Object[] { RT.keyword(null, "as"), Symbol.intern(null, "handlers") })) })), RT.keyword(null, "line"), Integer.valueOf(624), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__187 = (Var)RT.var("aleph.netty", "bandwidth-tracker");
    const__191 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "tag"), RT.classForName("io.netty.channel.ChannelHandler"), RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "ch")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Channel") }))) })), RT.keyword(null, "line"), Integer.valueOf(667), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "aleph/netty.clj" });
    const__192 = (Var)RT.var("aleph.netty", "channel-tracking-handler");
    const__195 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "tag"), RT.classForName("io.netty.channel.ChannelHandler"), RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "group")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "ChannelGroup") }))) })), RT.keyword(null, "doc"), "Yields an inbound handler, ready to be added to a pipeline,\n   which keeps track of requests in a provided channel group.\n   The channel-group can be created via `make-channel-group`.", RT.keyword(null, "line"), Integer.valueOf(714), 
          RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__196 = (Var)RT.var("aleph.netty", "pipeline-initializer");
    const__199 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pipeline-builder")) })), RT.keyword(null, "line"), Integer.valueOf(725), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
  }
  
  public static void __init2() {
    const__200 = (Var)RT.var("aleph.netty", "remove-if-present");
    const__203 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "pipeline")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "ChannelPipeline") })), ((IObj)Symbol.intern(null, "handler")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Class") }))) })), RT.keyword(null, "doc"), "Convenience function to remove a handler from a netty pipeline.", RT.keyword(null, "line"), Integer.valueOf(730), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__204 = (Var)RT.var("aleph.netty", "append-handler-to-pipeline");
    const__207 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "pipeline")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "ChannelPipeline") })), Symbol.intern(null, "handler-id"), ((IObj)Symbol.intern(null, "handler")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "ChannelHandler") }))) })), RT.keyword(null, "doc"), "Convenience function to add a handler to the tail of a netty pipeline.", RT.keyword(null, "line"), Integer.valueOf(737), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__208 = (Var)RT.var("aleph.netty", "prepend-handler-to-pipeline");
    const__211 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "pipeline")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "ChannelPipeline") })), Symbol.intern(null, "handler-id"), ((IObj)Symbol.intern(null, "handler")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "ChannelHandler") }))) })), RT.keyword(null, "doc"), "Convenience function to add a handler to the head of a netty pipeline.", RT.keyword(null, "line"), Integer.valueOf(742), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__212 = (Var)RT.var("aleph.netty", "instrument!");
    const__215 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "stream")) })), RT.keyword(null, "line"), Integer.valueOf(747), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__216 = (Var)RT.var("aleph.netty", "coerce-log-level");
    const__219 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "level")) })), RT.keyword(null, "line"), Integer.valueOf(760), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__220 = (Var)RT.var("aleph.netty", "activity-logger");
    const__223 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "level")), Tuple.create(((IObj)Symbol.intern(null, "name")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") })), Symbol.intern(null, "level")) })), RT.keyword(null, "line"), Integer.valueOf(775), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__224 = (Var)RT.var("aleph.netty", "coerce-ssl-provider");
    const__227 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "provider"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "io.netty.handler.ssl.SslProvider") })) })), RT.keyword(null, "line"), Integer.valueOf(783), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__228 = (Var)RT.var("aleph.netty", "self-signed-ssl-context");
    const__231 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "doc"), "A self-signed SSL context for servers.", RT.keyword(null, "line"), Integer.valueOf(983), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__232 = (Var)RT.var("aleph.netty", "insecure-ssl-client-context");
    const__235 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "doc"), "An insure SSL context for servers.", RT.keyword(null, "line"), Integer.valueOf(990), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__236 = (Var)RT.var("aleph.netty", "coerce-ssl-context");
    const__239 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "options->context"), Symbol.intern(null, "ssl-context")) })), RT.keyword(null, "line"), Integer.valueOf(995), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__240 = (Var)RT.var("aleph.netty", "coerce-ssl-server-context");
    const__242 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(1009), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__243 = (Var)RT.var("clojure.core", "partial");
    const__244 = (Var)RT.var("aleph.netty", "ssl-server-context");
    const__245 = (Var)RT.var("aleph.netty", "coerce-ssl-client-context");
    const__247 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(1012), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__248 = (Var)RT.var("aleph.netty", "ssl-client-context");
    const__249 = (Var)RT.var("aleph.netty", "channel-ssl-session");
    const__252 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "ch")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Channel") }))) })), RT.keyword(null, "line"), Integer.valueOf(1015), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__253 = (Var)RT.var("aleph.netty", "ssl-handshake-error?");
    const__256 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "ex")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Throwable") }))) })), RT.keyword(null, "line"), Integer.valueOf(1022), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__257 = RT.classForName("aleph.netty.AlephServer");
    const__258 = (Var)RT.var("aleph.netty", "AlephServer");
    const__259 = (Var)RT.var("clojure.core", "assert-same-protocol");
    const__260 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "port")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Returns the port the server is listening on.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })) })), ((IObj)Symbol.intern(null, "wait-for-close")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Blocks until the server has been closed.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })) })) }));
    const__261 = (Var)RT.var("clojure.core", "alter-var-root");
    const__262 = (Var)RT.var("clojure.core", "merge");
    const__266 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "aleph.netty.AlephServer"), RT.keyword(null, "on-interface"), RT.classForName("aleph.netty.AlephServer") });
    const__267 = (Keyword)RT.keyword(null, "sigs");
    const__268 = (AFn)RT.map(new Object[] { RT.keyword(null, "port"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "port")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Returns the port the server is listening on.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })), RT.keyword(null, "doc"), "Returns the port the server is listening on." }), RT.keyword(null, "wait-for-close"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "wait-for-close")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Blocks until the server has been closed.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })), RT.keyword(null, "doc"), "Blocks until the server has been closed." }) });
    const__269 = (Keyword)RT.keyword(null, "var");
    const__270 = (Keyword)RT.keyword(null, "method-map");
    const__273 = (AFn)RT.map(new Object[] { RT.keyword(null, "port"), RT.keyword(null, "port"), RT.keyword(null, "wait-for-close"), RT.keyword(null, "wait-for-close") });
    const__274 = (Keyword)RT.keyword(null, "method-builders");
    const__275 = (Var)RT.var("clojure.core", "intern");
    const__276 = (Var)RT.var("clojure.core", "*ns*");
    const__277 = (Var)RT.var("clojure.core", "with-meta");
    const__278 = (AFn)((IObj)Symbol.intern(null, "wait-for-close")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Blocks until the server has been closed.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })) }));
    const__279 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "wait-for-close")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Blocks until the server has been closed.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })), RT.keyword(null, "doc"), "Blocks until the server has been closed." });
    const__280 = (Keyword)RT.keyword(null, "protocol");
    const__281 = (AFn)((IObj)Symbol.intern(null, "port")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Returns the port the server is listening on.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })) }));
    const__282 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "port")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Returns the port the server is listening on.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })), RT.keyword(null, "doc"), "Returns the port the server is listening on." });
    const__283 = (Var)RT.var("clojure.core", "-reset-methods");
    const__284 = (AFn)Symbol.intern(null, "AlephServer");
    const__285 = (Var)RT.var("aleph.netty", "epoll-available?");
    const__288 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(1032), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__289 = (Var)RT.var("aleph.netty", "kqueue-available?");
    const__292 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(1035), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__293 = (Var)RT.var("aleph.netty", "io-uring-available?");
    const__296 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(1038), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__297 = (Var)RT.var("aleph.netty", "determine-transport");
  }
  
  public static void __init3() {
    const__300 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "transport"), Symbol.intern(null, "epoll?")) })), RT.keyword(null, "line"), Integer.valueOf(1041), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__301 = (Var)RT.var("aleph.netty", "unavailability-cause");
    const__304 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "transport")) })), RT.keyword(null, "line"), Integer.valueOf(1044), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__305 = (Var)RT.var("aleph.netty", "ensure-transport-available!");
    const__308 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "transport")) })), RT.keyword(null, "line"), Integer.valueOf(1051), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__309 = (Var)RT.var("aleph.netty", "ensure-epoll-available!");
    const__312 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(1060), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__313 = (Var)RT.var("aleph.netty", "get-default-event-loop-threads");
    const__316 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "doc"), "Determines the default number of threads to use for a Netty EventLoopGroup.\n   This mimics the default used by Netty as of version 4.1.", RT.keyword(null, "line"), Integer.valueOf(1063), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "aleph/netty.clj" });
    const__317 = (Var)RT.var("aleph.netty", "enumerating-thread-factory");
    const__321 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "tag"), RT.classForName("java.util.concurrent.ThreadFactory"), RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "prefix"), Symbol.intern(null, "daemon?")) })), RT.keyword(null, "line"), Integer.valueOf(1070), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "aleph/netty.clj" });
    const__322 = (Var)RT.var("aleph.netty", "client-event-thread-pool-name");
    const__325 = (AFn)RT.map(new Object[] { RT.keyword(null, "tag"), RT.classForName("java.lang.String"), RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(1079), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__326 = (Var)RT.var("aleph.netty", "epoll-client-group");
    const__328 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(1081), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__329 = (Var)RT.var("aleph.netty", "nio-client-group");
    const__331 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(1087), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__332 = (Var)RT.var("aleph.netty", "kqueue-client-group");
    const__334 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(1093), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__335 = (Var)RT.var("aleph.netty", "io-uring-client-group");
    const__337 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(1099), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__338 = (Var)RT.var("aleph.netty", "transport-client-group");
    const__341 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "transport")) })), RT.keyword(null, "line"), Integer.valueOf(1105), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__342 = (Var)RT.var("aleph.netty", "transport-event-loop-group");
    const__345 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "transport"), ((IObj)Symbol.intern(null, "num-threads")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "long") })), ((IObj)Symbol.intern(null, "thread-factory")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "ThreadFactory") }))) })), RT.keyword(null, "line"), Integer.valueOf(1112), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__346 = (Var)RT.var("aleph.netty", "transport-server-channel");
    const__349 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "transport")) })), RT.keyword(null, "line"), Integer.valueOf(1119), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__350 = (Var)RT.var("aleph.netty", "convert-address-types");
    const__353 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "address-types")) })), RT.keyword(null, "line"), Integer.valueOf(1126), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__354 = (Var)RT.var("aleph.netty", "dns-default-port");
    const__356 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(1133), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__357 = Long.valueOf(53L);
    const__358 = (Var)RT.var("aleph.netty", "dns-name-servers-provider");
    const__361 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "servers")) })), RT.keyword(null, "line"), Integer.valueOf(1135), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__362 = (Var)RT.var("aleph.netty", "transport-channel-type");
    const__365 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "transport")) })), RT.keyword(null, "line"), Integer.valueOf(1157), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__366 = (Var)RT.var("aleph.netty", "transport-channel");
    const__369 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "transport")) })), RT.keyword(null, "line"), Integer.valueOf(1164), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__370 = (Var)RT.var("aleph.netty", "dns-resolver-group-builder");
    const__373 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), RT.vector(new Object[] { 
                          Symbol.intern(null, "max-payload-size"), Symbol.intern(null, "max-queries-per-resolve"), Symbol.intern(null, "address-types"), Symbol.intern(null, "query-timeout"), Symbol.intern(null, "min-ttl"), Symbol.intern(null, "max-ttl"), Symbol.intern(null, "negative-ttl"), Symbol.intern(null, "trace-enabled?"), Symbol.intern(null, "opt-resources-enabled?"), Symbol.intern(null, "search-domains"), 
                          Symbol.intern(null, "ndots"), Symbol.intern(null, "decode-idn?"), Symbol.intern(null, "recursion-desired?"), Symbol.intern(null, "name-servers"), Symbol.intern(null, "epoll?"), Symbol.intern(null, "transport") }), RT.keyword(null, "or"), RT.map(new Object[] { 
                          Symbol.intern(null, "recursion-desired?"), Boolean.TRUE, Symbol.intern(null, "max-payload-size"), Long.valueOf(4096L), Symbol.intern(null, "opt-resources-enabled?"), Boolean.TRUE, Symbol.intern(null, "max-ttl"), Symbol.intern("Integer", "MAX_VALUE"), Symbol.intern(null, "max-queries-per-resolve"), Long.valueOf(16L), 
                          Symbol.intern(null, "ndots"), Long.valueOf(-1L), Symbol.intern(null, "epoll?"), Boolean.FALSE, Symbol.intern(null, "min-ttl"), Long.valueOf(0L), Symbol.intern(null, "decode-idn?"), Boolean.TRUE, Symbol.intern(null, "query-timeout"), Long.valueOf(5000L), 
                          Symbol.intern(null, "trace-enabled?"), Boolean.FALSE }) })) })), RT.keyword(null, "doc"), "Creates an instance of DnsAddressResolverGroupBuilder that is used to configure and\ninitialize an DnsAddressResolverGroup instance.\n\n   DNS options are a map of:\n\n   Param key                   | Description\n   | ---                       | ---\n   | `max-payload-size`        | sets capacity of the datagram packet buffer (in bytes), defaults to `4096`\n   | `max-queries-per-resolve` | sets the maximum allowed number of DNS queries to send when resolving a host name, defaults to `16`\n   | `address-types`           | sets the list of the protocol families of the address resolved, should be one of `:ipv4-only`, `:ipv4-preferred`, `:ipv6-only`, `:ipv4-preferred`  (calculated automatically based on ipv4/ipv6 support when not set explicitly)\n   | `query-timeout`           | sets the timeout of each DNS query performed by this resolver (in milliseconds), defaults to `5000`\n   | `min-ttl`                 | sets minimum TTL of the cached DNS resource records (in seconds), defaults to `0`\n   | `max-ttl`                 | sets maximum TTL of the cached DNS resource records (in seconds), defaults to `Integer/MAX_VALUE` (the resolver will respect the TTL from the DNS)\n   | `negative-ttl`            | sets the TTL of the cache for the failed DNS queries (in seconds)\n   | `trace-enabled?`          | if set to `true`, the resolver generates the detailed trace information in an exception message, defaults to `false`\n   | `opt-resources-enabled?`  | if set to `true`, enables the automatic inclusion of a optional records that tries to give the remote DNS server a hint about how much data the resolver can read per response, defaults to `true`\n   | `search-domains`          | sets the list of search domains of the resolver, when not given the default list is used (platform dependent)\n   | `ndots`                   | sets the number of dots which must appear in a name before an initial absolute query is made, defaults to `-1`\n   | `decode-idn?`             | set if domain / host names should be decoded to unicode when received, defaults to `true`\n   | `recursion-desired?`      | if set to `true`, the resolver sends a DNS query with the RD (recursion desired) flag set, defaults to `true`\n   | `name-servers`            | optional list of DNS server addresses, automatically discovered when not set (platform dependent)\n   | `transport`               | the transport to use, one of `:nio`, `:epoll`, `:kqueue` or `:io-uring` (defaults to `:nio`)", RT.keyword(null, "line"), Integer.valueOf(1171), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__374 = (Var)RT.var("aleph.netty", "dns-resolver-group");
    const__377 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "dns-options")) })), RT.keyword(null, "doc"), "Creates an instance of DnsAddressResolverGroup that might be set as a resolver to\n Bootstrap. The supported options are the same as to `dns-resolver-group-builder`.", RT.keyword(null, "line"), Integer.valueOf(1250), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__378 = (Var)RT.var("aleph.netty", "maybe-ssl-handshake-future");
    const__381 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "ch")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Channel") }))) })), RT.keyword(null, "doc"), "Returns a deferred which resolves to the channel after a potential\n  SSL handshake has completed successfully. If no `SslHandler` is\n  present on the associated pipeline, resolves immediately.", RT.keyword(null, "line"), Integer.valueOf(1256), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "aleph/netty.clj" });
    const__382 = (Var)RT.var("aleph.netty", "ignore-ssl-handshake-errors");
    const__385 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "_")) })), RT.keyword(null, "doc"), "Intended for use as error callback on a `maybe-ssl-handshake-future`\n  within a `:channel-active` handler. In this context, SSL handshake\n  errors don't need to be handled since the SSL handler will terminate\n  the whole pipeline by throwing `javax.net.ssl.SSLHandshakeException`\n  anyway.", RT.keyword(null, "line"), Integer.valueOf(1267), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "aleph/netty.clj" });
    const__386 = (Var)RT.var("aleph.netty", "create-client");
    const__389 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pipeline-builder"), Symbol.intern(null, "ssl-context"), Symbol.intern(null, "bootstrap-transform"), Symbol.intern(null, "remote-address"), Symbol.intern(null, "local-address"), Symbol.intern(null, "epoll?")), RT.vector(new Object[] { Symbol.intern(null, "pipeline-builder"), Symbol.intern(null, "ssl-context"), Symbol.intern(null, "bootstrap-transform"), ((IObj)Symbol.intern(null, "remote-address")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "SocketAddress") })), ((IObj)Symbol.intern(null, "local-address")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "SocketAddress") })), Symbol.intern(null, "epoll?"), Symbol.intern(null, "name-resolver") }), Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), RT.vector(new Object[] { Symbol.intern(null, "pipeline-builder"), Symbol.intern(null, "ssl-context"), Symbol.intern(null, "bootstrap-transform"), ((IObj)Symbol.intern(null, "remote-address")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "SocketAddress") })), ((IObj)Symbol.intern(null, "local-address")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "SocketAddress") })), Symbol.intern(null, "name-resolver"), Symbol.intern(null, "transport") }) })) })), RT.keyword(null, "line"), Integer.valueOf(1275), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__390 = (Var)RT.var("aleph.netty", "add-ssl-handler");
    const__393 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pipeline-builder"), Symbol.intern(null, "ssl-ctx")) })), RT.keyword(null, "line"), Integer.valueOf(1352), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__394 = (Var)RT.var("aleph.netty", "add-channel-tracker-handler");
    const__397 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pipeline-builder"), Symbol.intern(null, "chan-group")) })), RT.keyword(null, "line"), Integer.valueOf(1360), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" });
    const__398 = (Var)RT.var("aleph.netty", "start-server");
  }
  
  public static void __init4() { const__401 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pipeline-builder"), Symbol.intern(null, "ssl-context"), Symbol.intern(null, "bootstrap-transform"), Symbol.intern(null, "on-close"), Symbol.intern(null, "socket-address"), Symbol.intern(null, "epoll?")), Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), RT.vector(new Object[] { Symbol.intern(null, "pipeline-builder"), Symbol.intern(null, "ssl-context"), Symbol.intern(null, "bootstrap-transform"), Symbol.intern(null, "on-close"), ((IObj)Symbol.intern(null, "socket-address")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "SocketAddress") })), Symbol.intern(null, "transport"), Symbol.intern(null, "shutdown-timeout") }), RT.keyword(null, "or"), RT.map(new Object[] { Symbol.intern(null, "shutdown-timeout"), Symbol.intern(null, "default-shutdown-timeout") }) })) })), RT.keyword(null, "line"), Integer.valueOf(1367), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/netty.clj" }); }
  
  static  {
    __init0();
    __init1();
    __init2();
    __init3();
    __init4();
    Compiler.pushNSandLoader(RT.classForName("aleph.netty__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
