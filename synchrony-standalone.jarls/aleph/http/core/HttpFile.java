package aleph.http.core;

import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.IPersistentVector;
import clojure.lang.IType;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;

public final class HttpFile implements IType {
  public final Object fd;
  
  public final long offset;
  
  public final long length;
  
  public final long chunk_size;
  
  public HttpFile(Object paramObject, long paramLong1, long paramLong2, long paramLong3) { this.fd = paramObject;
    this.offset = paramLong1;
    this.length = paramLong2;
    this.chunk_size = paramLong3; }
  
  public static IPersistentVector getBasis() { return Tuple.create(((IObj)Symbol.intern(null, "fd")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "File") })), ((IObj)Symbol.intern(null, "offset")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "long") })), ((IObj)Symbol.intern(null, "length")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "long") })), ((IObj)Symbol.intern(null, "chunk-size")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "long") }))); }
  
  static  {
  
  }
}
