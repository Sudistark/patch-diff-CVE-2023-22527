package aleph.http;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentHashSet;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import io.netty.handler.codec.http.HttpHeaderNames;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class client_middleware__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final Keyword const__2;
  
  public static final AFn const__3;
  
  public static final AFn const__4;
  
  public static final Var const__5;
  
  public static final AFn const__12;
  
  public static final Var const__13;
  
  public static final AFn const__15;
  
  public static final Var const__16;
  
  public static final Keyword const__17;
  
  public static final AFn const__21;
  
  public static final Var const__22;
  
  public static final AFn const__25;
  
  public static final Var const__26;
  
  public static final AFn const__29;
  
  public static final Var const__30;
  
  public static final AFn const__34;
  
  public static final Var const__35;
  
  public static final AFn const__38;
  
  public static final Var const__39;
  
  public static final AFn const__42;
  
  public static final Var const__43;
  
  public static final AFn const__46;
  
  public static final Var const__47;
  
  public static final AFn const__50;
  
  public static final Var const__51;
  
  public static final AFn const__54;
  
  public static final Var const__55;
  
  public static final AFn const__58;
  
  public static final Var const__59;
  
  public static final AFn const__62;
  
  public static final Var const__63;
  
  public static final AFn const__66;
  
  public static final Var const__67;
  
  public static final AFn const__70;
  
  public static final Var const__71;
  
  public static final AFn const__74;
  
  public static final Var const__75;
  
  public static final AFn const__77;
  
  public static final AFn const__93;
  
  public static final Var const__94;
  
  public static final AFn const__97;
  
  public static final Var const__98;
  
  public static final AFn const__101;
  
  public static final Var const__102;
  
  public static final AFn const__105;
  
  public static final Var const__106;
  
  public static final AFn const__109;
  
  public static final Var const__110;
  
  public static final AFn const__113;
  
  public static final Var const__114;
  
  public static final AFn const__117;
  
  public static final Var const__118;
  
  public static final AFn const__121;
  
  public static final Var const__122;
  
  public static final AFn const__125;
  
  public static final Var const__126;
  
  public static final AFn const__129;
  
  public static final Var const__130;
  
  public static final AFn const__133;
  
  public static final Var const__134;
  
  public static final AFn const__137;
  
  public static final Var const__138;
  
  public static final AFn const__141;
  
  public static final Var const__142;
  
  public static final AFn const__145;
  
  public static final Var const__146;
  
  public static final AFn const__149;
  
  public static final Var const__150;
  
  public static final AFn const__153;
  
  public static final Var const__154;
  
  public static final AFn const__157;
  
  public static final Var const__158;
  
  public static final AFn const__161;
  
  public static final Var const__162;
  
  public static final AFn const__165;
  
  public static final Var const__166;
  
  public static final AFn const__169;
  
  public static final Var const__170;
  
  public static final AFn const__173;
  
  public static final Var const__174;
  
  public static final AFn const__177;
  
  public static final Var const__178;
  
  public static final AFn const__181;
  
  public static final Var const__182;
  
  public static final AFn const__185;
  
  public static final Var const__186;
  
  public static final AFn const__189;
  
  public static final Var const__190;
  
  public static final AFn const__193;
  
  public static final Var const__194;
  
  public static final Keyword const__195;
  
  public static final Var const__196;
  
  public static final AFn const__199;
  
  public static final Keyword const__200;
  
  public static final Keyword const__201;
  
  public static final Keyword const__202;
  
  public static final Keyword const__203;
  
  public static final Var const__204;
  
  public static final AFn const__207;
  
  public static final Var const__208;
  
  public static final AFn const__211;
  
  public static final Var const__212;
  
  public static final AFn const__215;
  
  public static final Var const__216;
  
  public static final AFn const__220;
  
  public static final Var const__221;
  
  public static final Var const__222;
  
  public static final AFn const__224;
  
  public static final Var const__225;
  
  public static final AFn const__228;
  
  public static final Var const__229;
  
  public static final AFn const__232;
  
  public static final Var const__233;
  
  public static final AFn const__236;
  
  public static final Var const__238;
  
  public static final Object const__271;
  
  public static final Var const__272;
  
  public static final Var const__273;
  
  public static final Var const__274;
  
  public static final AFn const__277;
  
  public static final Var const__278;
  
  public static final AFn const__281;
  
  public static final Object const__282;
  
  public static final Var const__283;
  
  public static final Var const__284;
  
  public static final ISeq const__285;
  
  public static final Var const__286;
  
  public static final Var const__287;
  
  public static final AFn const__291;
  
  public static final Keyword const__292;
  
  public static final AFn const__293;
  
  public static final Keyword const__294;
  
  public static final Keyword const__295;
  
  public static final AFn const__299;
  
  public static final Keyword const__300;
  
  public static final Var const__301;
  
  public static final Var const__302;
  
  public static final Var const__303;
  
  public static final AFn const__304;
  
  public static final AFn const__305;
  
  public static final Keyword const__306;
  
  public static final AFn const__307;
  
  public static final AFn const__308;
  
  public static final AFn const__309;
  
  public static final AFn const__310;
  
  public static final Var const__311;
  
  public static final AFn const__312;
  
  public static final Object const__313;
  
  public static final Var const__314;
  
  public static final ISeq const__315;
  
  public static final AFn const__317;
  
  public static final AFn const__318;
  
  public static final AFn const__321;
  
  public static final AFn const__322;
  
  public static final AFn const__323;
  
  public static final AFn const__324;
  
  public static final AFn const__325;
  
  public static final AFn const__326;
  
  public static final Var const__327;
  
  public static final AFn const__329;
  
  public static final AFn const__332;
  
  public static final Var const__333;
  
  public static final AFn const__336;
  
  public static final Var const__337;
  
  public static final AFn const__340;
  
  public static final Var const__341;
  
  public static final AFn const__344;
  
  public static final Var const__345;
  
  public static final AFn const__348;
  
  public static final Var const__349;
  
  public static final AFn const__352;
  
  public static final Var const__353;
  
  public static final AFn const__356;
  
  public static final Var const__357;
  
  public static final AFn const__360;
  
  public static final Var const__361;
  
  public static final AFn const__364;
  
  public static final Var const__365;
  
  public static final AFn const__368;
  
  public static final Var const__369;
  
  public static final AFn const__372;
  
  public static final Var const__373;
  
  public static final AFn const__376;
  
  public static final Var const__377;
  
  public static final Keyword const__378;
  
  public static final Keyword const__379;
  
  public static final Var const__380;
  
  public static final AFn const__383;
  
  public static final Var const__384;
  
  public static final AFn const__387;
  
  public static final Var const__388;
  
  public static final AFn const__391;
  
  public static final Keyword const__392;
  
  public static final Keyword const__393;
  
  public static final Keyword const__394;
  
  public static final Keyword const__395;
  
  public static final Keyword const__396;
  
  public static final Keyword const__397;
  
  public static final Keyword const__398;
  
  public static final Keyword const__399;
  
  public static final Var const__400;
  
  public static final AFn const__403;
  
  public static final Var const__404;
  
  public static final AFn const__407;
  
  public static final Var const__408;
  
  public static final AFn const__410;
  
  public static final Var const__411;
  
  public static final AFn const__414;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new client_middleware.fn__28709());
    const__5.setMeta((IPersistentMap)const__12);
    const__5




























      
      .bindRoot(((IFn)new client_middleware.fn__28711()).invoke());
    const__13.setMeta((IPersistentMap)const__15);
    const__13





      
      .bindRoot(((IFn)new client_middleware.fn__29421()).invoke());
    const__16.setMeta((IPersistentMap)const__21);
    const__16.bindRoot(new client_middleware.transit_opts_by_type());
    const__22.setMeta((IPersistentMap)const__25);
    const__22.bindRoot(new client_middleware.transit_read_opts());
    const__26.setMeta((IPersistentMap)const__29);
    const__26.bindRoot(new client_middleware.transit_write_opts());
    const__30.setDynamic(true).setMeta((IPersistentMap)const__34);
    const__30.setDynamic(true).bindRoot(new client_middleware.parse_transit());
    const__35.setDynamic(true).setMeta((IPersistentMap)const__38);
    const__35.setDynamic(true).bindRoot(new client_middleware.transit_encode());
    const__39.setDynamic(true).setMeta((IPersistentMap)const__42);
    const__39.setDynamic(true).bindRoot(new client_middleware.json_encode());
    const__43.setDynamic(true).setMeta((IPersistentMap)const__46);
    const__43.setDynamic(true).bindRoot(new client_middleware.json_decode());
    const__47.setDynamic(true).setMeta((IPersistentMap)const__50);
    const__47.setDynamic(true).bindRoot(new client_middleware.json_decode_strict());
    const__51.setMeta((IPersistentMap)const__54);
    const__51.bindRoot(new client_middleware.when_pos());
    const__55.setMeta((IPersistentMap)const__58);
    const__55.bindRoot(new client_middleware.url_encode());
    const__59.setMeta((IPersistentMap)const__62);
    const__59.bindRoot(new client_middleware.url_encode_illegal_characters());
    const__63.setMeta((IPersistentMap)const__66);
    const__63.bindRoot(new client_middleware.parse_url());
    const__67.setMeta((IPersistentMap)const__70);
    const__67.bindRoot(new client_middleware.nest_params());
    const__71.setMeta((IPersistentMap)const__74);
    const__71.bindRoot(new client_middleware.wrap_nested_params());
    const__75.setMeta((IPersistentMap)const__77);
    const__75.bindRoot(const__93);
    const__94.setMeta((IPersistentMap)const__97);
    const__94.bindRoot(new client_middleware.success_QMARK_());
    const__98.setMeta((IPersistentMap)const__101);
    const__98.bindRoot(new client_middleware.missing_QMARK_());
    const__102.setMeta((IPersistentMap)const__105);
    const__102.bindRoot(new client_middleware.conflict_QMARK_());
    const__106.setMeta((IPersistentMap)const__109);
    const__106.bindRoot(new client_middleware.redirect_QMARK_());
    const__110.setMeta((IPersistentMap)const__113);
    const__110.bindRoot(new client_middleware.client_error_QMARK_());
    const__114.setMeta((IPersistentMap)const__117);
    const__114.bindRoot(new client_middleware.server_error_QMARK_());
    const__118.setMeta((IPersistentMap)const__121);
    const__118.bindRoot(new client_middleware.content_type_value());
    const__122.setMeta((IPersistentMap)const__125);
    const__122.bindRoot(new client_middleware.wrap_exceptions());
    const__126.setMeta((IPersistentMap)const__129);
    const__126.bindRoot(new client_middleware.wrap_method());
    const__130.setMeta((IPersistentMap)const__133);
    const__130.bindRoot(new client_middleware.follow_redirect());
    const__134.setMeta((IPersistentMap)const__137);
    const__134.bindRoot(new client_middleware.handle_redirects());
    const__138.setMeta((IPersistentMap)const__141);
    const__138.bindRoot(new client_middleware.wrap_content_type());
    const__142.setMeta((IPersistentMap)const__145);
    const__142.bindRoot(new client_middleware.wrap_accept());
    const__146.setMeta((IPersistentMap)const__149);
    const__146.bindRoot(new client_middleware.accept_encoding_value());
    const__150.setMeta((IPersistentMap)const__153);
    const__150.bindRoot(new client_middleware.wrap_accept_encoding());
    const__154.setMeta((IPersistentMap)const__157);
    const__154.bindRoot(new client_middleware.detect_charset());
    const__158.setMeta((IPersistentMap)const__161);
    const__158.bindRoot(new client_middleware.multi_param_suffix());
    const__162.setMeta((IPersistentMap)const__165);
    const__162.bindRoot(new client_middleware.generate_query_string_with_encoding());
    const__166.setMeta((IPersistentMap)const__169);
    const__166.bindRoot(new client_middleware.generate_query_string());
    const__170.setMeta((IPersistentMap)const__173);
    const__170.bindRoot(new client_middleware.wrap_query_params());
    const__174.setMeta((IPersistentMap)const__177);
    const__174.bindRoot(new client_middleware.basic_auth_value());
    const__178.setMeta((IPersistentMap)const__181);
    const__178.bindRoot(new client_middleware.wrap_basic_auth());
    const__182.setMeta((IPersistentMap)const__185);
    const__182.bindRoot(new client_middleware.wrap_oauth());
    const__186.setMeta((IPersistentMap)const__189);
    const__186.bindRoot(new client_middleware.parse_user_info());
    const__190.setMeta((IPersistentMap)const__193);
    const__190.bindRoot(new client_middleware.wrap_user_info());
    const__196.setMeta((IPersistentMap)const__199);
    const__196.bindRoot(new client_middleware.coerce_transit_form_params());
    const__204.setMeta((IPersistentMap)const__207);
    const__204.bindRoot(new client_middleware.wrap_form_params());
    const__208.setMeta((IPersistentMap)const__211);
    const__208.bindRoot(new client_middleware.wrap_url());
    const__212.setMeta((IPersistentMap)const__215);
    const__212.bindRoot(new client_middleware.wrap_request_timing());
    const__216.setMeta((IPersistentMap)const__220);
    const__216







































      
      .bindRoot(((IFn)const__221.getRawRoot()).invoke(HttpHeaderNames.COOKIE));
    const__222.setMeta((IPersistentMap)const__224);
    const__222
      .bindRoot(((IFn)const__221.getRawRoot()).invoke(HttpHeaderNames.SET_COOKIE));
    const__225.setMeta((IPersistentMap)const__228);
    const__225.bindRoot(new client_middleware.match_cookie_domain_QMARK_());
    const__229.setMeta((IPersistentMap)const__232);
    const__229.bindRoot(new client_middleware.match_cookie_path_QMARK_());
    const__233.setMeta((IPersistentMap)const__236);
    const__233.bindRoot(new client_middleware.cookie__GT_netty_cookie());
    const__274.setMeta((IPersistentMap)const__277);
    const__274.bindRoot(new client_middleware.netty_cookie__GT_cookie());
    const__278.setMeta((IPersistentMap)const__281);
    const__278.bindRoot(new client_middleware.cookie_expired_QMARK_());
    const__327.setMeta((IPersistentMap)const__329);
    const__327.bindRoot(((IObj)new client_middleware.reify__29840(null)).withMeta((IPersistentMap)const__332));
    const__333.setMeta((IPersistentMap)const__336);
    const__333.bindRoot(new client_middleware.merge_cookies());
    const__337.setMeta((IPersistentMap)const__340);
    const__337.bindRoot(new client_middleware.enrich_with_current_time());
    const__341.setMeta((IPersistentMap)const__344);
    const__341.bindRoot(new client_middleware.in_memory_cookie_store());
    const__345.setMeta((IPersistentMap)const__348);
    const__345.bindRoot(new client_middleware.decode_set_cookie_header());
    const__349.setMeta((IPersistentMap)const__352);
    const__349.bindRoot(new client_middleware.extract_cookies_from_response_headers());
    const__353.setMeta((IPersistentMap)const__356);
    const__353.bindRoot(new client_middleware.handle_cookies());
    const__357.setMeta((IPersistentMap)const__360);
    const__357.bindRoot(new client_middleware.reduce_to_unique_cookie_names());
    const__361.setMeta((IPersistentMap)const__364);
    const__361.bindRoot(new client_middleware.write_cookie_header());
    const__365.setMeta((IPersistentMap)const__368);
    const__365.bindRoot(new client_middleware.add_cookie_header());
    const__369.setMeta((IPersistentMap)const__372);
    const__369.bindRoot(new client_middleware.wrap_cookies());
    const__373.setMeta((IPersistentMap)const__376);
    const__373.bindRoot(new client_middleware.parse_content_type());
    const__380.setMeta((IPersistentMap)const__383);
    const__380.bindRoot(new client_middleware.coerce_json_body());
    const__384.setMeta((IPersistentMap)const__387);
    const__384.bindRoot(new client_middleware.coerce_clojure_body());
    const__388.setMeta((IPersistentMap)const__391);
    const__388.bindRoot(new client_middleware.coerce_transit_body());
    const__400.setMeta((IPersistentMap)const__403);
    const__400.bindRoot(new client_middleware.wrap_request_debug());
    const__404.setMeta((IPersistentMap)const__407);
    const__404.bindRoot(new client_middleware.handle_response_debug());
    const__408.setMeta((IPersistentMap)const__410);
    const__408.bindRoot(RT.vector(new Object[] { 
            const__126.getRawRoot(), const__208.getRawRoot(), const__71.getRawRoot(), const__170.getRawRoot(), const__204.getRawRoot(), const__190.getRawRoot(), const__178.getRawRoot(), const__182.getRawRoot(), const__142.getRawRoot(), const__150.getRawRoot(), 
            const__138.getRawRoot(), const__369.getRawRoot(), const__400.getRawRoot() }));
    const__411.setMeta((IPersistentMap)const__414);
    const__411.bindRoot(new client_middleware.wrap_request());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "aleph.http.client-middleware")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "This middleware is adapted from clj-http, whose license is amenable to this sort of\n   copy/pastery" }));
    const__2 = (Keyword)RT.keyword(null, "doc");
    const__3 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "This middleware is adapted from clj-http, whose license is amenable to this sort of\n   copy/pastery" });
    const__4 = (AFn)Symbol.intern(null, "clojure.core");
    const__5 = (Var)RT.var("aleph.http.client-middleware", "json-enabled?");
    const__12 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(30), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__13 = (Var)RT.var("aleph.http.client-middleware", "transit-enabled?");
    const__15 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(37), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__16 = (Var)RT.var("aleph.http.client-middleware", "transit-opts-by-type");
    const__17 = (Keyword)RT.keyword(null, "private");
    const__21 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "opts"), Symbol.intern(null, "type"), Symbol.intern(null, "class-name"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(Symbol.intern(null, "transit-enabled?")) })) })), RT.keyword(null, "doc"), "Return the Transit options by type.", RT.keyword(null, "line"), Integer.valueOf(43), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__22 = (Var)RT.var("aleph.http.client-middleware", "transit-read-opts");
    const__25 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "opts"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(Symbol.intern(null, "transit-enabled?")) })) })), RT.keyword(null, "doc"), "Return the Transit read options.", RT.keyword(null, "line"), Integer.valueOf(61), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__26 = (Var)RT.var("aleph.http.client-middleware", "transit-write-opts");
    const__29 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "opts"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(Symbol.intern(null, "transit-enabled?")) })) })), RT.keyword(null, "doc"), "Return the Transit write options.", RT.keyword(null, "line"), Integer.valueOf(67), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__30 = (Var)RT.var("aleph.http.client-middleware", "parse-transit");
    const__34 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(((IObj)Symbol.intern(null, "in")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "InputStream") })), Symbol.intern(null, "type"), Symbol.intern(null, "&"), Tuple.create(Symbol.intern(null, "opts")))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(Symbol.intern(null, "transit-enabled?")) })) })), RT.keyword(null, "doc"), "Resolve and apply Transit's JSON/MessagePack decoding.", RT.keyword(null, "line"), Integer.valueOf(73), 
          RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__35 = (Var)RT.var("aleph.http.client-middleware", "transit-encode");
    const__38 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "out"), Symbol.intern(null, "type"), Symbol.intern(null, "&"), Tuple.create(Symbol.intern(null, "opts")))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(Symbol.intern(null, "transit-enabled?")) })) })), RT.keyword(null, "doc"), "Resolve and apply Transit's JSON/MessagePack encoding.", RT.keyword(null, "line"), Integer.valueOf(81), 
          RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__39 = (Var)RT.var("aleph.http.client-middleware", "json-encode");
    const__42 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "args"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(Symbol.intern(null, "json-enabled?")) })) })), RT.keyword(null, "doc"), "Resolve and apply cheshire's json encoding dynamically.", RT.keyword(null, "line"), Integer.valueOf(91), 
          RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__43 = (Var)RT.var("aleph.http.client-middleware", "json-decode");
    const__46 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "args"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(Symbol.intern(null, "json-enabled?")) })) })), RT.keyword(null, "doc"), "Resolve and apply cheshire's json decoding dynamically.", RT.keyword(null, "line"), Integer.valueOf(97), 
          RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__47 = (Var)RT.var("aleph.http.client-middleware", "json-decode-strict");
    const__50 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "args"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(Symbol.intern(null, "json-enabled?")) })) })), RT.keyword(null, "doc"), "Resolve and apply cheshire's json decoding dynamically (with lazy parsing\n  disabled).", RT.keyword(null, "line"), Integer.valueOf(103), 
          RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__51 = (Var)RT.var("aleph.http.client-middleware", "when-pos");
    const__54 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "v")) })), RT.keyword(null, "line"), Integer.valueOf(112), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__55 = (Var)RT.var("aleph.http.client-middleware", "url-encode");
    const__58 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "s")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") }))), Tuple.create(((IObj)Symbol.intern(null, "s")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") })), ((IObj)Symbol.intern(null, "encoding")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "String") }))) })), RT.keyword(null, "line"), Integer.valueOf(115), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__59 = (Var)RT.var("aleph.http.client-middleware", "url-encode-illegal-characters");
    const__62 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "path-or-query")) })), RT.keyword(null, "doc"), "Takes a raw url path or query and url-encodes any illegal characters.\n  Minimizes ambiguity by encoding space to %20.", RT.keyword(null, "line"), Integer.valueOf(140), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__63 = (Var)RT.var("aleph.http.client-middleware", "parse-url");
    const__66 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "url")) })), RT.keyword(null, "doc"), "Parse a URL string into a map of interesting parts.", RT.keyword(null, "line"), Integer.valueOf(151), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__67 = (Var)RT.var("aleph.http.client-middleware", "nest-params");
    const__70 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "request"), Symbol.intern(null, "param-key")) })), RT.keyword(null, "line"), Integer.valueOf(163), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__71 = (Var)RT.var("aleph.http.client-middleware", "wrap-nested-params");
    const__74 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "content-type"), Symbol.intern(null, "flatten-nested-keys")), RT.keyword(null, "as"), Symbol.intern(null, "req") })) })), RT.keyword(null, "doc"), "Middleware wrapping nested parameters for query strings.", RT.keyword(null, "line"), Integer.valueOf(179), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__75 = (Var)RT.var("aleph.http.client-middleware", "unexceptional-status?");
    const__77 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(203), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__93 = (AFn)PersistentHashSet.create(new Object[] { 
          Long.valueOf(205L), Long.valueOf(206L), Long.valueOf(300L), Long.valueOf(204L), Long.valueOf(307L), Long.valueOf(304L), Long.valueOf(308L), Long.valueOf(303L), Long.valueOf(301L), Long.valueOf(201L), 
          Long.valueOf(302L), Long.valueOf(202L), Long.valueOf(200L), Long.valueOf(203L), Long.valueOf(207L) });
    const__94 = (Var)RT.var("aleph.http.client-middleware", "success?");
    const__97 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "status")) })) })), RT.keyword(null, "line"), Integer.valueOf(207), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__98 = (Var)RT.var("aleph.http.client-middleware", "missing?");
  }
  
  public static void __init1() {
    const__101 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "status")) })) })), RT.keyword(null, "line"), Integer.valueOf(211), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__102 = (Var)RT.var("aleph.http.client-middleware", "conflict?");
    const__105 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "status")) })) })), RT.keyword(null, "line"), Integer.valueOf(215), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__106 = (Var)RT.var("aleph.http.client-middleware", "redirect?");
    const__109 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "status")) })) })), RT.keyword(null, "line"), Integer.valueOf(219), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__110 = (Var)RT.var("aleph.http.client-middleware", "client-error?");
    const__113 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "status")) })) })), RT.keyword(null, "line"), Integer.valueOf(223), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__114 = (Var)RT.var("aleph.http.client-middleware", "server-error?");
    const__117 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "status")) })) })), RT.keyword(null, "line"), Integer.valueOf(227), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__118 = (Var)RT.var("aleph.http.client-middleware", "content-type-value");
    const__121 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "type")) })), RT.keyword(null, "line"), Integer.valueOf(231), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__122 = (Var)RT.var("aleph.http.client-middleware", "wrap-exceptions");
    const__125 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "client")) })), RT.keyword(null, "doc"), "Middleware that throws response as an ExceptionInfo if the response has\n  unsuccessful status code. :throw-exceptions set to false in the request\n  disables this middleware.", RT.keyword(null, "line"), Integer.valueOf(236), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__126 = (Var)RT.var("aleph.http.client-middleware", "wrap-method");
    const__129 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "req")) })), RT.keyword(null, "doc"), "Middleware converting the :method option into the :request-method option", RT.keyword(null, "line"), Integer.valueOf(267), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__130 = (Var)RT.var("aleph.http.client-middleware", "follow-redirect");
    const__133 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "client"), RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "uri"), Symbol.intern(null, "url"), Symbol.intern(null, "scheme"), Symbol.intern(null, "server-name"), Symbol.intern(null, "server-port"), Symbol.intern(null, "trace-redirects")), RT.keyword(null, "or"), RT.map(new Object[] { Symbol.intern(null, "trace-redirects"), Tuple.create() }), RT.keyword(null, "as"), Symbol.intern(null, "req") }), RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "body")), RT.keyword(null, "as"), Symbol.intern(null, "rsp") })) })), RT.keyword(null, "doc"), "Attempts to follow the redirects from the \"location\" header, if no such\n  header exists (bad server!), returns the response without following the\n  request.", RT.keyword(null, "line"), Integer.valueOf(276), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__134 = (Var)RT.var("aleph.http.client-middleware", "handle-redirects");
    const__137 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "client"), Symbol.intern(null, "req"), Symbol.intern(null, "rsp")) })), RT.keyword(null, "doc"), "Middleware that follows redirects in the response. A slingshot exception is\n  thrown if too many redirects occur. Options:\n\n  :follow-redirects - default:true, whether to follow redirects\n  :max-redirects - default:20, maximum number of redirects to follow\n  :force-redirects - default:false, force redirecting methods to GET requests\n\n  In the response:\n  :redirects-count - number of redirects\n  :trace-redirects - vector of sites the request was redirected from", RT.keyword(null, "line"), Integer.valueOf(297), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__138 = (Var)RT.var("aleph.http.client-middleware", "wrap-content-type");
    const__141 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "content-type"), Symbol.intern(null, "character-encoding")), RT.keyword(null, "as"), Symbol.intern(null, "req") })) })), RT.keyword(null, "doc"), "Middleware converting a `:content-type <keyword>` option to the formal\n  application/<name> format and adding it as a header.", RT.keyword(null, "line"), Integer.valueOf(368), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__142 = (Var)RT.var("aleph.http.client-middleware", "wrap-accept");
    const__145 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "accept")), RT.keyword(null, "as"), Symbol.intern(null, "req") })) })), RT.keyword(null, "doc"), "Middleware converting the :accept key in a request to application/<type>", RT.keyword(null, "line"), Integer.valueOf(380), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__146 = (Var)RT.var("aleph.http.client-middleware", "accept-encoding-value");
    const__149 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "accept-encoding")) })), RT.keyword(null, "line"), Integer.valueOf(390), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__150 = (Var)RT.var("aleph.http.client-middleware", "wrap-accept-encoding");
    const__153 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "accept-encoding")), RT.keyword(null, "as"), Symbol.intern(null, "req") })) })), RT.keyword(null, "doc"), "Middleware converting the :accept-encoding option to an acceptable\n  Accept-Encoding header in the request.", RT.keyword(null, "line"), Integer.valueOf(393), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__154 = (Var)RT.var("aleph.http.client-middleware", "detect-charset");
    const__157 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "content-type")) })), RT.keyword(null, "doc"), "Given a charset header, detect the charset, returns UTF-8 if not found.", RT.keyword(null, "line"), Integer.valueOf(403), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__158 = (Var)RT.var("aleph.http.client-middleware", "multi-param-suffix");
    const__161 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "index"), Symbol.intern(null, "multi-param-style")) })), RT.keyword(null, "line"), Integer.valueOf(412), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__162 = (Var)RT.var("aleph.http.client-middleware", "generate-query-string-with-encoding");
    const__165 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "params"), Symbol.intern(null, "encoding")), Tuple.create(Symbol.intern(null, "params"), Symbol.intern(null, "encoding"), Symbol.intern(null, "multi-param-style")) })), RT.keyword(null, "line"), Integer.valueOf(418), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__166 = (Var)RT.var("aleph.http.client-middleware", "generate-query-string");
    const__169 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "params"), Symbol.intern(null, "&"), Tuple.create(Symbol.intern(null, "content-type"), Symbol.intern(null, "multi-param-style"))) })), RT.keyword(null, "line"), Integer.valueOf(436), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__170 = (Var)RT.var("aleph.http.client-middleware", "wrap-query-params");
    const__173 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "query-params"), Symbol.intern(null, "content-type"), Symbol.intern(null, "multi-param-style")), RT.keyword(null, "or"), RT.map(new Object[] { Symbol.intern(null, "content-type"), RT.keyword(null, "x-www-form-urlencoded"), Symbol.intern(null, "multi-param-style"), RT.keyword(null, "default") }), RT.keyword(null, "as"), Symbol.intern(null, "req") })) })), RT.keyword(null, "doc"), "Middleware converting the :query-params option to a querystring on\n  the request.", RT.keyword(null, "line"), Integer.valueOf(440), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__174 = (Var)RT.var("aleph.http.client-middleware", "basic-auth-value");
    const__177 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "basic-auth")) })), RT.keyword(null, "doc"), "Accept a String of the form \"username:password\" or a vector of 2 strings [username password], return a String with the basic auth header (see https://tools.ietf.org/html/rfc2617#page-5)", RT.keyword(null, "line"), Integer.valueOf(461), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__178 = (Var)RT.var("aleph.http.client-middleware", "wrap-basic-auth");
    const__181 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "req")) })), RT.keyword(null, "doc"), "Middleware converting the :basic-auth option into an Authorization header.", RT.keyword(null, "line"), Integer.valueOf(474), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__182 = (Var)RT.var("aleph.http.client-middleware", "wrap-oauth");
    const__185 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "req")) })), RT.keyword(null, "doc"), "Middleware converting the :oauth-token option into an Authorization header.", RT.keyword(null, "line"), Integer.valueOf(484), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__186 = (Var)RT.var("aleph.http.client-middleware", "parse-user-info");
    const__189 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "user-info")) })), RT.keyword(null, "line"), Integer.valueOf(493), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__190 = (Var)RT.var("aleph.http.client-middleware", "wrap-user-info");
    const__193 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "req")) })), RT.keyword(null, "doc"), "Middleware converting the :user-info option into a :basic-auth option", RT.keyword(null, "line"), Integer.valueOf(497), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__194 = (Var)RT.var("aleph.http.client-middleware", "coerce-form-params");
    const__195 = (Keyword)RT.keyword("application", "edn");
    const__196 = (Var)RT.var("aleph.http.client-middleware", "coerce-transit-form-params");
    const__199 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "type"), RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "form-params"), Symbol.intern(null, "transit-opts")) })) })), RT.keyword(null, "line"), Integer.valueOf(511), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
  }
  
  public static void __init2() {
    const__200 = (Keyword)RT.keyword("application", "transit+json");
    const__201 = (Keyword)RT.keyword("application", "transit+msgpack");
    const__202 = (Keyword)RT.keyword("application", "json");
    const__203 = (Keyword)RT.keyword(null, "default");
    const__204 = (Var)RT.var("aleph.http.client-middleware", "wrap-form-params");
    const__207 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "form-params"), Symbol.intern(null, "content-type"), Symbol.intern(null, "request-method")), RT.keyword(null, "or"), RT.map(new Object[] { Symbol.intern(null, "content-type"), RT.keyword(null, "x-www-form-urlencoded") }), RT.keyword(null, "as"), Symbol.intern(null, "req") })) })), RT.keyword(null, "doc"), "Middleware wrapping the submission or form parameters.", RT.keyword(null, "line"), Integer.valueOf(548), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__208 = (Var)RT.var("aleph.http.client-middleware", "wrap-url");
    const__211 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "req")) })), RT.keyword(null, "doc"), "Middleware wrapping request URL parsing.", RT.keyword(null, "line"), Integer.valueOf(561), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__212 = (Var)RT.var("aleph.http.client-middleware", "wrap-request-timing");
    const__215 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "client")) })), RT.keyword(null, "doc"), "Middleware that times the request, putting the total time (in milliseconds)\n  of the request into the :request-time key in the response.", RT.keyword(null, "line"), Integer.valueOf(571), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__216 = (Var)RT.var("aleph.http.client-middleware", "cookie-header-name");
    const__220 = (AFn)RT.map(new Object[] { RT.keyword(null, "tag"), RT.classForName("java.lang.String"), RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(580), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__221 = (Var)RT.var("clojure.core", "str");
    const__222 = (Var)RT.var("aleph.http.client-middleware", "set-cookie-header-name");
    const__224 = (AFn)RT.map(new Object[] { RT.keyword(null, "tag"), RT.classForName("java.lang.String"), RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(581), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__225 = (Var)RT.var("aleph.http.client-middleware", "match-cookie-domain?");
    const__228 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "origin"), Symbol.intern(null, "domain")) })), RT.keyword(null, "line"), Integer.valueOf(588), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__229 = (Var)RT.var("aleph.http.client-middleware", "match-cookie-path?");
    const__232 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "origin-path"), Symbol.intern(null, "cookie-path")) })), RT.keyword(null, "line"), Integer.valueOf(594), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__233 = (Var)RT.var("aleph.http.client-middleware", "cookie->netty-cookie");
    const__236 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), RT.vector(new Object[] { Symbol.intern(null, "domain"), Symbol.intern(null, "http-only?"), Symbol.intern(null, "secure?"), Symbol.intern(null, "max-age"), Symbol.intern(null, "name"), Symbol.intern(null, "path"), Symbol.intern(null, "value") }) })) })), RT.keyword(null, "line"), Integer.valueOf(622), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__238 = (Var)RT.var("clojure.core", "assoc");
    const__271 = RT.classForName("aleph.http.client_middleware.Cookie");
    const__272 = (Var)RT.var("clojure.core", "alter-meta!");
    const__273 = (Var)RT.var("aleph.http.client-middleware", "->Cookie");
    const__274 = (Var)RT.var("aleph.http.client-middleware", "netty-cookie->cookie");
    const__277 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "cookie")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "DefaultCookie") }))) })), RT.keyword(null, "line"), Integer.valueOf(644), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__278 = (Var)RT.var("aleph.http.client-middleware", "cookie-expired?");
    const__281 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "created"), Symbol.intern(null, "max-age")) })) })), RT.keyword(null, "line"), Integer.valueOf(647), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__282 = RT.classForName("aleph.http.client_middleware.CookieSpec");
    const__283 = (Var)RT.var("aleph.http.client-middleware", "CookieSpec");
    const__284 = (Var)RT.var("clojure.core", "assert-same-protocol");
    const__285 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "parse-cookie")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "cookie-str")) })) })), ((IObj)Symbol.intern(null, "write-cookies")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "cookies")) })) })), ((IObj)Symbol.intern(null, "match-cookie-origin?")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "origin"), Symbol.intern(null, "cookie")) })) })) }));
    const__286 = (Var)RT.var("clojure.core", "alter-var-root");
    const__287 = (Var)RT.var("clojure.core", "merge");
    const__291 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "aleph.http.client_middleware.CookieSpec"), RT.keyword(null, "on-interface"), RT.classForName("aleph.http.client_middleware.CookieSpec"), RT.keyword(null, "doc"), "Implement rules for accepting and returning cookies" });
    const__292 = (Keyword)RT.keyword(null, "sigs");
    const__293 = (AFn)RT.map(new Object[] { RT.keyword(null, "parse-cookie"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "parse-cookie")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "cookie-str")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "cookie-str")) })), RT.keyword(null, "doc"), null }), RT.keyword(null, "write-cookies"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "write-cookies")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "cookies")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "cookies")) })), RT.keyword(null, "doc"), null }), RT.keyword(null, "match-cookie-origin?"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "match-cookie-origin?")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "origin"), Symbol.intern(null, "cookie")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "origin"), Symbol.intern(null, "cookie")) })), RT.keyword(null, "doc"), null }) });
    const__294 = (Keyword)RT.keyword(null, "var");
    const__295 = (Keyword)RT.keyword(null, "method-map");
    const__299 = (AFn)RT.map(new Object[] { RT.keyword(null, "parse-cookie"), RT.keyword(null, "parse-cookie"), RT.keyword(null, "match-cookie-origin?"), RT.keyword(null, "match-cookie-origin?"), RT.keyword(null, "write-cookies"), RT.keyword(null, "write-cookies") });
  }
  
  public static void __init3() {
    const__300 = (Keyword)RT.keyword(null, "method-builders");
    const__301 = (Var)RT.var("clojure.core", "intern");
    const__302 = (Var)RT.var("clojure.core", "*ns*");
    const__303 = (Var)RT.var("clojure.core", "with-meta");
    const__304 = (AFn)((IObj)Symbol.intern(null, "write-cookies")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "cookies")) })) }));
    const__305 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "write-cookies")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "cookies")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "cookies")) })), RT.keyword(null, "doc"), null });
    const__306 = (Keyword)RT.keyword(null, "protocol");
    const__307 = (AFn)((IObj)Symbol.intern(null, "parse-cookie")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "cookie-str")) })) }));
    const__308 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "parse-cookie")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "cookie-str")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "cookie-str")) })), RT.keyword(null, "doc"), null });
    const__309 = (AFn)((IObj)Symbol.intern(null, "match-cookie-origin?")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "origin"), Symbol.intern(null, "cookie")) })) }));
    const__310 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "match-cookie-origin?")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "origin"), Symbol.intern(null, "cookie")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "origin"), Symbol.intern(null, "cookie")) })), RT.keyword(null, "doc"), null });
    const__311 = (Var)RT.var("clojure.core", "-reset-methods");
    const__312 = (AFn)((IObj)Symbol.intern(null, "CookieSpec")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE }));
    const__313 = RT.classForName("aleph.http.client_middleware.CookieStore");
    const__314 = (Var)RT.var("aleph.http.client-middleware", "CookieStore");
    const__315 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "get-cookies")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })), ((IObj)Symbol.intern(null, "add-cookies!")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "cookies")) })) })) }));
    const__317 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "aleph.http.client_middleware.CookieStore"), RT.keyword(null, "on-interface"), RT.classForName("aleph.http.client_middleware.CookieStore") });
    const__318 = (AFn)RT.map(new Object[] { RT.keyword(null, "get-cookies"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "get-cookies")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })), RT.keyword(null, "doc"), null }), RT.keyword(null, "add-cookies!"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "add-cookies!")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "cookies")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "cookies")) })), RT.keyword(null, "doc"), null }) });
    const__321 = (AFn)RT.map(new Object[] { RT.keyword(null, "get-cookies"), RT.keyword(null, "get-cookies"), RT.keyword(null, "add-cookies!"), RT.keyword(null, "add-cookies!") });
    const__322 = (AFn)((IObj)Symbol.intern(null, "get-cookies")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) }));
    const__323 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "get-cookies")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })), RT.keyword(null, "doc"), null });
    const__324 = (AFn)((IObj)Symbol.intern(null, "add-cookies!")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "cookies")) })) }));
    const__325 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "add-cookies!")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "cookies")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "cookies")) })), RT.keyword(null, "doc"), null });
    const__326 = (AFn)((IObj)Symbol.intern(null, "CookieStore")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE }));
    const__327 = (Var)RT.var("aleph.http.client-middleware", "default-cookie-spec");
    const__329 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(664), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj", RT.keyword(null, "doc"), "Default cookie spec implementation providing RFC6265 compliant behavior\n   with no validation for cookie names and values. In case you need strict validation\n   feel free to create impl. using {ClientCookieDecoder,ClientCookiEncoder}/STRICT\n   instead of LAX instances" });
    const__332 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(669), RT.keyword(null, "column"), Integer.valueOf(3) });
    const__333 = (Var)RT.var("aleph.http.client-middleware", "merge-cookies");
    const__336 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "stored-cookies"), Symbol.intern(null, "new-cookies")) })), RT.keyword(null, "line"), Integer.valueOf(693), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__337 = (Var)RT.var("aleph.http.client-middleware", "enrich-with-current-time");
    const__340 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "cookies")) })), RT.keyword(null, "line"), Integer.valueOf(699), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__341 = (Var)RT.var("aleph.http.client-middleware", "in-memory-cookie-store");
    const__344 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(), Tuple.create(Symbol.intern(null, "seed-cookies")) })), RT.keyword(null, "doc"), "In-memory storage to maintain cookies across requests", RT.keyword(null, "line"), Integer.valueOf(703), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__345 = (Var)RT.var("aleph.http.client-middleware", "decode-set-cookie-header");
    const__348 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "header")), Tuple.create(Symbol.intern(null, "cookie-spec"), Symbol.intern(null, "header")) })), RT.keyword(null, "line"), Integer.valueOf(718), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__349 = (Var)RT.var("aleph.http.client-middleware", "extract-cookies-from-response-headers");
    const__352 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "headers")), Tuple.create(Symbol.intern(null, "cookie-spec"), ((IObj)Symbol.intern(null, "headers")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "aleph.http.core.HeaderMap") }))) })), RT.keyword(null, "line"), Integer.valueOf(728), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__353 = (Var)RT.var("aleph.http.client-middleware", "handle-cookies");
    const__356 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "cookie-store"), Symbol.intern(null, "cookie-spec")), RT.keyword(null, "or"), RT.map(new Object[] { Symbol.intern(null, "cookie-spec"), Symbol.intern(null, "default-cookie-spec") }) }), RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "headers")), RT.keyword(null, "as"), Symbol.intern(null, "rsp") })) })), RT.keyword(null, "line"), Integer.valueOf(736), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__357 = (Var)RT.var("aleph.http.client-middleware", "reduce-to-unique-cookie-names");
    const__360 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "cookies")) })), RT.keyword(null, "line"), Integer.valueOf(750), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__361 = (Var)RT.var("aleph.http.client-middleware", "write-cookie-header");
    const__364 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "cookies"), Symbol.intern(null, "cookie-spec"), Symbol.intern(null, "req")) })), RT.keyword(null, "line"), Integer.valueOf(757), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__365 = (Var)RT.var("aleph.http.client-middleware", "add-cookie-header");
    const__368 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "cookie-store"), Symbol.intern(null, "cookie-spec"), Symbol.intern(null, "req")) })), RT.keyword(null, "line"), Integer.valueOf(765), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__369 = (Var)RT.var("aleph.http.client-middleware", "wrap-cookies");
    const__372 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "cookie-store"), Symbol.intern(null, "cookie-spec"), Symbol.intern(null, "cookies")), RT.keyword(null, "or"), RT.map(new Object[] { Symbol.intern(null, "cookie-spec"), Symbol.intern(null, "default-cookie-spec"), Symbol.intern(null, "cookies"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "quote"), PersistentList.create(Arrays.asList(new Object[0])) })) }), RT.keyword(null, "as"), Symbol.intern(null, "req") })) })), RT.keyword(null, "doc"), "Middleware that set 'Cookie' header based on the content of cookies passed\n   with the request or from cookies storage (when provided). Source for 'Cookie'\n   header content by priorities:\n\n   * 'Cookie' header (already set)\n   * non-empty `:cookies`\n   * non-nil `:cookie-store`\n\n   Each cookie should be represented as a map:\n\n   |:---|:---\n   | `name` | name of this cookie\n   | `value` | value of this cookie\n   | `domain` | specifies allowed hosts to receive the cookie (including subdomains)\n   | `path` | indicates a URL path that must exist in the requested URL in order to send the 'Cookie' header\n   | `http-only?` | when set to `true`, cookie can only be accessed by HTTP. Optional, defaults to `false`\n   | `secure?` | when set to `true`, cookie can only be transmitted over an encrypted connection. Optional, defaults to `false`\n   | `max-age` | set maximum age of this cookie in seconds. Options, defaults to `io.netty.handler.codec.http.cookie.Cookie/UNDEFINED_MAX_AGE`.", RT.keyword(null, "line"), Integer.valueOf(774), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__373 = (Var)RT.var("aleph.http.client-middleware", "parse-content-type");
    const__376 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })), RT.keyword(null, "doc"), "Parse `s` as an RFC 2616 media type.", RT.keyword(null, "line"), Integer.valueOf(810), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__377 = (Var)RT.var("aleph.http.client-middleware", "coerce-response-body");
    const__378 = (Keyword)RT.keyword(null, "byte-array");
    const__379 = (Keyword)RT.keyword(null, "stream");
    const__380 = (Var)RT.var("aleph.http.client-middleware", "coerce-json-body");
    const__383 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "coerce")), RT.keyword(null, "as"), Symbol.intern(null, "req") }), RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "body"), Symbol.intern(null, "status")), RT.keyword(null, "as"), Symbol.intern(null, "resp") }), Symbol.intern(null, "keyword?"), Symbol.intern(null, "strict?"), Symbol.intern(null, "&"), Tuple.create(Symbol.intern(null, "charset"))) })), RT.keyword(null, "line"), Integer.valueOf(832), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__384 = (Var)RT.var("aleph.http.client-middleware", "coerce-clojure-body");
    const__387 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "request"), RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "body")), RT.keyword(null, "as"), Symbol.intern(null, "resp") })) })), RT.keyword(null, "line"), Integer.valueOf(853), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__388 = (Var)RT.var("aleph.http.client-middleware", "coerce-transit-body");
    const__391 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "transit-opts")), RT.keyword(null, "as"), Symbol.intern(null, "request") }), RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "body")), RT.keyword(null, "as"), Symbol.intern(null, "resp") }), Symbol.intern(null, "type")) })), RT.keyword(null, "line"), Integer.valueOf(859), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__392 = (Keyword)RT.keyword(null, "json");
    const__393 = (Keyword)RT.keyword(null, "json-strict");
    const__394 = (Keyword)RT.keyword(null, "json-strict-string-keys");
    const__395 = (Keyword)RT.keyword(null, "json-string-keys");
    const__396 = (Keyword)RT.keyword(null, "clojure");
    const__397 = (Keyword)RT.keyword(null, "transit+json");
    const__398 = (Keyword)RT.keyword(null, "transit+msgpack");
    const__399 = (Keyword)RT.keyword(null, "string");
  }
  
  public static void __init4() {
    const__400 = (Var)RT.var("aleph.http.client-middleware", "wrap-request-debug");
    const__403 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "req")) })), RT.keyword(null, "line"), Integer.valueOf(895), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__404 = (Var)RT.var("aleph.http.client-middleware", "handle-response-debug");
    const__407 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "req"), Symbol.intern(null, "rsp")) })), RT.keyword(null, "line"), Integer.valueOf(903), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__408 = (Var)RT.var("aleph.http.client-middleware", "default-middleware");
    const__410 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(923), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
    const__411 = (Var)RT.var("aleph.http.client-middleware", "wrap-request");
    const__414 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "client")) })), RT.keyword(null, "doc"), "Returns a batteries-included HTTP request function corresponding to the given\n  core client. See default-middleware for the middleware wrappers that are used\n  by default", RT.keyword(null, "line"), Integer.valueOf(938), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/client_middleware.clj" });
  }
  
  static  {
    __init0();
    __init1();
    __init2();
    __init3();
    __init4();
    Compiler.pushNSandLoader(RT.classForName("aleph.http.client_middleware__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
