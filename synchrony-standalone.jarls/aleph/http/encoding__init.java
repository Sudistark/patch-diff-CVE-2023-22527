package aleph.http;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class encoding__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__3;
  
  public static final AFn const__4;
  
  public static final Var const__5;
  
  public static final Var const__6;
  
  public static final AFn const__14;
  
  public static final Var const__15;
  
  public static final AFn const__19;
  
  public static final Var const__20;
  
  public static final AFn const__23;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new encoding.fn__28427());
    const__6.setMeta((IPersistentMap)const__14);
    const__6.bindRoot(new encoding.qp_byte());
    const__15.setMeta((IPersistentMap)const__19);
    const__15.bindRoot(new encoding.encode_base64());
    const__20.setMeta((IPersistentMap)const__23);
    const__20.bindRoot(new encoding.encode());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "aleph.http.encoding")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE }));
    const__3 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE });
    const__4 = (AFn)Symbol.intern(null, "clojure.core");
    const__5 = (Var)RT.var("clojure.core", "*unchecked-math*");
    const__6 = (Var)RT.var("aleph.http.encoding", "qp-byte");
    const__14 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "b")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "long") }))) })), RT.keyword(null, "line"), Integer.valueOf(14), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/encoding.clj" });
    const__15 = (Var)RT.var("aleph.http.encoding", "encode-base64");
    const__19 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "val")) })), RT.keyword(null, "doc"), "Encodes `val` in base64.", RT.keyword(null, "line"), Integer.valueOf(37), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/encoding.clj" });
    const__20 = (Var)RT.var("aleph.http.encoding", "encode");
    const__23 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "val"), Symbol.intern(null, "encoding")) })), RT.keyword(null, "doc"), "Encodes `val` into the specified `encoding` which can be one of `:base64`,\n  `:quoted-printable`, `:qp` or `:binary`.", RT.keyword(null, "line"), Integer.valueOf(48), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "aleph/http/encoding.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("aleph.http.encoding__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
