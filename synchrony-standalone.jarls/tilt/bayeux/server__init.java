package tilt.bayeux;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IPersistentMap;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.Numbers;
import clojure.lang.PersistentArrayMap;
import clojure.lang.PersistentHashSet;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class server__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__9;
  
  public static final Var const__10;
  
  public static final AFn const__12;
  
  public static final AFn const__13;
  
  public static final Var const__14;
  
  public static final AFn const__16;
  
  public static final Keyword const__17;
  
  public static final Keyword const__18;
  
  public static final Var const__19;
  
  public static final AFn const__21;
  
  public static final Var const__25;
  
  public static final AFn const__27;
  
  public static final Var const__29;
  
  public static final AFn const__31;
  
  public static final Var const__34;
  
  public static final AFn const__36;
  
  public static final Var const__39;
  
  public static final AFn const__41;
  
  public static final Var const__44;
  
  public static final AFn const__48;
  
  public static final Var const__49;
  
  public static final AFn const__51;
  
  public static final Keyword const__52;
  
  public static final Keyword const__53;
  
  public static final Var const__54;
  
  public static final Keyword const__55;
  
  public static final Keyword const__56;
  
  public static final Keyword const__57;
  
  public static final Keyword const__58;
  
  public static final Object const__59;
  
  public static final Keyword const__60;
  
  public static final Object const__61;
  
  public static final Keyword const__62;
  
  public static final Object const__63;
  
  public static final Var const__64;
  
  public static final AFn const__67;
  
  public static final Var const__68;
  
  public static final AFn const__70;
  
  public static final Keyword const__71;
  
  public static final Var const__72;
  
  public static final AFn const__75;
  
  public static final Var const__76;
  
  public static final AFn const__78;
  
  public static final Keyword const__79;
  
  public static final Keyword const__80;
  
  public static final Var const__83;
  
  public static final AFn const__86;
  
  public static final Var const__87;
  
  public static final AFn const__90;
  
  public static final Var const__91;
  
  public static final AFn const__94;
  
  public static final Var const__95;
  
  public static final AFn const__97;
  
  public static final Var const__98;
  
  public static final AFn const__101;
  
  public static final Var const__102;
  
  public static final AFn const__105;
  
  public static final Var const__106;
  
  public static final AFn const__109;
  
  public static final Var const__110;
  
  public static final AFn const__113;
  
  public static final Var const__114;
  
  public static final AFn const__117;
  
  public static final Var const__118;
  
  public static final AFn const__121;
  
  public static final Var const__122;
  
  public static final AFn const__125;
  
  public static final Var const__126;
  
  public static final AFn const__129;
  
  public static final Var const__130;
  
  public static final AFn const__133;
  
  public static final Var const__134;
  
  public static final AFn const__137;
  
  public static final Var const__138;
  
  public static final AFn const__141;
  
  public static final Var const__142;
  
  public static final AFn const__145;
  
  public static final Var const__146;
  
  public static final AFn const__149;
  
  public static final Var const__150;
  
  public static final AFn const__153;
  
  public static final Var const__154;
  
  public static final AFn const__157;
  
  public static final Var const__158;
  
  public static final AFn const__161;
  
  public static final Var const__162;
  
  public static final AFn const__165;
  
  public static final Var const__166;
  
  public static final AFn const__168;
  
  public static final Var const__169;
  
  public static final Var const__170;
  
  public static final AFn const__172;
  
  public static final Var const__173;
  
  public static final AFn const__176;
  
  public static final Var const__177;
  
  public static final AFn const__180;
  
  public static final Var const__181;
  
  public static final AFn const__184;
  
  public static final Var const__185;
  
  public static final AFn const__189;
  
  public static final Var const__190;
  
  public static final AFn const__193;
  
  public static final Var const__194;
  
  public static final AFn const__197;
  
  public static final Var const__198;
  
  public static final AFn const__201;
  
  public static final Var const__202;
  
  public static final AFn const__205;
  
  public static final Var const__206;
  
  public static final AFn const__209;
  
  public static final Var const__210;
  
  public static final AFn const__213;
  
  public static final Var const__214;
  
  public static final AFn const__217;
  
  public static final Var const__218;
  
  public static final AFn const__221;
  
  public static final Var const__222;
  
  public static final AFn const__225;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new server.fn__32051());
    const__3.setMeta((IPersistentMap)const__9);
    const__3.bindRoot("1.0");
    const__10.setMeta((IPersistentMap)const__12);
    const__10.bindRoot(const__13);
    const__14.setMeta((IPersistentMap)const__16);
    const__14.bindRoot(RT.mapUniqueKeys(new Object[] { const__17, const__3.getRawRoot(), const__18, const__10.getRawRoot() }));
    const__19.setMeta((IPersistentMap)const__21);
    const__19








































      
      .bindRoot(Numbers.num(Numbers.multiply(4L, 1000L)));
    const__25.setMeta((IPersistentMap)const__27);
    const__25
      .bindRoot(Numbers.num(Numbers.multiply(4L, 1000L)));
    const__29.setMeta((IPersistentMap)const__31);
    const__29
      .bindRoot(Numbers.num(Numbers.multiply(10L, 1000L)));
    const__34.setMeta((IPersistentMap)const__36);
    const__34
      .bindRoot(Numbers.num(Numbers.multiply(0L, 1000L)));
    const__39.setMeta((IPersistentMap)const__41);
    const__39
      .bindRoot(Numbers.num(Numbers.multiply(5L, 1000L)));
    const__44.setMeta((IPersistentMap)const__48);
    const__44.bindRoot(new server.random_ms());
    const__49.setMeta((IPersistentMap)const__51);
    const__49.bindRoot(RT.mapUniqueKeys(new Object[] { 
            const__52, const__25.getRawRoot(), const__53, const__54.getRawRoot(), const__55, const__29.getRawRoot(), const__56, const__54.getRawRoot(), const__57, Boolean.FALSE, 
            const__58, const__59, const__60, const__61, const__62, const__63 }));
    const__64.setMeta((IPersistentMap)const__67);
    const__64.bindRoot(new server.session_config());
    const__68.setMeta((IPersistentMap)const__70);
    const__68.bindRoot(RT.mapUniqueKeys(new Object[] { const__71, const__49.getRawRoot() }));
    const__72.setMeta((IPersistentMap)const__75);
    const__72.bindRoot(new server.session());
    const__76.setMeta((IPersistentMap)const__78);
    const__76




























      
      .bindRoot(RT.mapUniqueKeys(new Object[] { const__79, const__34.getRawRoot(), const__80, Numbers.num(Numbers.multiply(1024L, 100L)) }));
    const__83.setMeta((IPersistentMap)const__86);
    const__83.bindRoot(new server.server());
    const__87.setMeta((IPersistentMap)const__90);
    const__87.bindRoot(new server.reject_invalid_messages());
    const__91.setMeta((IPersistentMap)const__94);
    const__91.bindRoot(new server.reject_messages());
    const__95.setMeta((IPersistentMap)const__97);
    const__95.bindRoot(PersistentArrayMap.EMPTY);
    const__98.setMeta((IPersistentMap)const__101);
    const__98.bindRoot(new server.close_request());
    const__102.setMeta((IPersistentMap)const__105);
    const__102.bindRoot(new server.close_session_proc());
    const__106.setMeta((IPersistentMap)const__109);
    const__106.bindRoot(new server.handle_request());
    const__110.setMeta((IPersistentMap)const__113);
    const__110.bindRoot(new server.handle_response());
    const__114.setMeta((IPersistentMap)const__117);
    const__114.bindRoot(new server.handle_connect_timeout());
    const__118.setMeta((IPersistentMap)const__121);
    const__118.bindRoot(new server.run_session());
    const__122.setMeta((IPersistentMap)const__125);
    const__122.bindRoot(new server.close_session());
    const__126.setMeta((IPersistentMap)const__129);
    const__126.bindRoot(new server.reject_no_session());
    const__130.setMeta((IPersistentMap)const__133);
    const__130.bindRoot(new server.handle_session_messages());
    const__134.setMeta((IPersistentMap)const__137);
    const__134.bindRoot(new server.unregister_session());
    const__138.setMeta((IPersistentMap)const__141);
    const__138.bindRoot(new server.register_session());
    const__142.setMeta((IPersistentMap)const__145);
    const__142.bindRoot(new server.handle_handshake());
    const__146.setMeta((IPersistentMap)const__149);
    const__146.bindRoot(new server.handle_anon_publish_messages());
    const__150.setMeta((IPersistentMap)const__153);
    const__150.bindRoot(new server.handle_messages());
    const__154.setMeta((IPersistentMap)const__157);
    const__154.bindRoot(new server.upstream_subscriptions());
    const__158.setMeta((IPersistentMap)const__161);
    const__158.bindRoot(new server.upstream_message());
    const__162.setMeta((IPersistentMap)const__165);
    const__162.bindRoot(new server.downstream_message());
    const__166.setMeta((IPersistentMap)const__168);
    const__166

























































































































































































































































































      
      .bindRoot(((IFn)const__169.getRawRoot()).invoke(new server.fn__33244()));
    const__170.setMeta((IPersistentMap)const__172);
    const__170
      .bindRoot(((IFn)const__169.getRawRoot()).invoke(new server.fn__33247()));
    const__173.setMeta((IPersistentMap)const__176);
    const__173.bindRoot(new server.make_pubsub_accept());
    const__177.setMeta((IPersistentMap)const__180);
    const__177.bindRoot(new server.parse_messages());
    const__181.setMeta((IPersistentMap)const__184);
    const__181.bindRoot(new server.error_response_QMARK_());
    const__185.setMeta((IPersistentMap)const__189);
    const__185.bindRoot(new server.ensure_advice());
    const__190.setMeta((IPersistentMap)const__193);
    const__190.bindRoot(new server.unsuccessful_subscription_QMARK_());
    const__194.setMeta((IPersistentMap)const__197);
    const__194.bindRoot(new server.handle_subscribe_error());
    const__198.setMeta((IPersistentMap)const__201);
    const__198.bindRoot(new server.with_request());
    const__202.setMeta((IPersistentMap)const__205);
    const__202.bindRoot(new server.handle_data());
    const__206.setMeta((IPersistentMap)const__209);
    const__206.bindRoot(new server.handle_websocket());
    const__210.setMeta((IPersistentMap)const__213);
    const__210.bindRoot(new server.message_str_from_request_body());
    const__214.setMeta((IPersistentMap)const__217);
    const__214.bindRoot(new server.close_promise_from_request());
    const__218.setMeta((IPersistentMap)const__221);
    const__218.bindRoot(new server.request_handler());
    const__222.setMeta((IPersistentMap)const__225);
    const__222.bindRoot(new server.bayeux_handler());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "tilt.bayeux.server");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("tilt.bayeux.server", "server-version");
    const__9 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(31), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/server.clj" });
    const__10 = (Var)RT.var("tilt.bayeux.server", "server-supported-connection-types");
    const__12 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(33), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/server.clj" });
    const__13 = (AFn)PersistentHashSet.create(new Object[] { "websocket", "cross-origin-long-polling", "long-polling", "callback-polling" });
    const__14 = (Var)RT.var("tilt.bayeux.server", "server-capabilities");
    const__16 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(39), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/server.clj" });
    const__17 = (Keyword)RT.keyword(null, "version");
    const__18 = (Keyword)RT.keyword(null, "supported-connection-types");
    const__19 = (Var)RT.var("tilt.bayeux.server", "default-connect-timeout-jitter-ms");
    const__21 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(43), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/server.clj" });
    const__25 = (Var)RT.var("tilt.bayeux.server", "default-connect-timeout-ms");
    const__27 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(44), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/server.clj" });
    const__29 = (Var)RT.var("tilt.bayeux.server", "default-inactive-timeout-ms");
    const__31 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(45), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/server.clj" });
    const__34 = (Var)RT.var("tilt.bayeux.server", "default-interval-ms");
    const__36 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(46), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/server.clj" });
    const__39 = (Var)RT.var("tilt.bayeux.server", "default-error-interval-ms");
    const__41 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(47), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/server.clj" });
    const__44 = (Var)RT.var("tilt.bayeux.server", "random-ms");
    const__48 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "max-timeout-ms")) })), RT.keyword(null, "line"), Integer.valueOf(49), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/server.clj" });
    const__49 = (Var)RT.var("tilt.bayeux.server", "session-config-defaults");
    const__51 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(52), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/server.clj" });
    const__52 = (Keyword)RT.keyword(null, "connect-timeout-ms");
    const__53 = (Keyword)RT.keyword(null, "connect-timeout");
    const__54 = (Var)RT.var("clojure.core.async", "timeout");
    const__55 = (Keyword)RT.keyword(null, "inactive-timeout-ms");
    const__56 = (Keyword)RT.keyword(null, "inactive-timeout");
    const__57 = (Keyword)RT.keyword(null, "only-meta-connect-delivery");
    const__58 = (Keyword)RT.keyword(null, "up-buf-size");
    const__59 = Long.valueOf(256L);
    const__60 = (Keyword)RT.keyword(null, "down-buf-size");
    const__61 = Long.valueOf(256L);
    const__62 = (Keyword)RT.keyword(null, "requests-buf-size");
    const__63 = Long.valueOf(256L);
    const__64 = (Var)RT.var("tilt.bayeux.server", "session-config");
    const__67 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m")) })), RT.keyword(null, "line"), Integer.valueOf(62), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/server.clj" });
    const__68 = (Var)RT.var("tilt.bayeux.server", "session-defaults");
    const__70 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(68), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/server.clj" });
    const__71 = (Keyword)RT.keyword(null, "config");
    const__72 = (Var)RT.var("tilt.bayeux.server", "session");
    const__75 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m")) })), RT.keyword(null, "line"), Integer.valueOf(71), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/server.clj" });
    const__76 = (Var)RT.var("tilt.bayeux.server", "server-defaults");
    const__78 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(75), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/server.clj" });
    const__79 = (Keyword)RT.keyword(null, "interval-ms");
    const__80 = (Keyword)RT.keyword(null, "max-message-size");
    const__83 = (Var)RT.var("tilt.bayeux.server", "server");
    const__86 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "m")) })), RT.keyword(null, "line"), Integer.valueOf(79), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/server.clj" });
    const__87 = (Var)RT.var("tilt.bayeux.server", "reject-invalid-messages");
    const__90 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "messages")) })), RT.keyword(null, "line"), Integer.valueOf(83), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/server.clj" });
    const__91 = (Var)RT.var("tilt.bayeux.server", "reject-messages");
    const__94 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "error"), Symbol.intern(null, "messages")) })), RT.keyword(null, "line"), Integer.valueOf(89), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/server.clj" });
    const__95 = (Var)RT.var("tilt.bayeux.server", "none-pending");
    const__97 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(92), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/server.clj" });
    const__98 = (Var)RT.var("tilt.bayeux.server", "close-request");
  }
  
  public static void __init1() {
    const__101 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "request"), Symbol.intern(null, "close-messages")) })), RT.keyword(null, "line"), Integer.valueOf(94), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/server.clj" });
    const__102 = (Var)RT.var("tilt.bayeux.server", "close-session-proc");
    const__105 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "up"), Symbol.intern(null, "requests"), Symbol.intern(null, "close-ch")), RT.keyword(null, "as"), Symbol.intern(null, "session") }), Symbol.intern(null, "pending"), Symbol.intern(null, "reason")) })), RT.keyword(null, "line"), Integer.valueOf(100), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/server.clj" });
    const__106 = (Var)RT.var("tilt.bayeux.server", "handle-request");
    const__109 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "connect-timeout-ms"), Symbol.intern(null, "connect-timeout"), Symbol.intern(null, "inactive-timeout-ms"), Symbol.intern(null, "inactive-timeout"), Symbol.intern(null, "only-meta-connect-delivery")) }), RT.keyword(null, "config"), RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "requests"), Symbol.intern(null, "up"), Symbol.intern(null, "poll")), RT.keyword(null, "as"), Symbol.intern(null, "session") }), Symbol.intern(null, "pending"), Symbol.intern(null, "messages")) })), RT.keyword(null, "line"), Integer.valueOf(111), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/server.clj" });
    const__110 = (Var)RT.var("tilt.bayeux.server", "handle-response");
    const__113 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "session"), Symbol.intern(null, "pending"), Symbol.intern(null, "messages")) })), RT.keyword(null, "line"), Integer.valueOf(145), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/server.clj" });
    const__114 = (Var)RT.var("tilt.bayeux.server", "handle-connect-timeout");
    const__117 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "poll")), RT.keyword(null, "as"), Symbol.intern(null, "session") }), Symbol.intern(null, "pending")) })), RT.keyword(null, "line"), Integer.valueOf(154), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/server.clj" });
    const__118 = (Var)RT.var("tilt.bayeux.server", "run-session");
    const__121 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "connect-timeout-ms"), Symbol.intern(null, "connect-timeout"), Symbol.intern(null, "inactive-timeout-ms"), Symbol.intern(null, "inactive-timeout"), Symbol.intern(null, "only-meta-connect-delivery")) }), RT.keyword(null, "config"), RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "close-ch"), Symbol.intern(null, "requests"), Symbol.intern(null, "up"), Symbol.intern(null, "down"), Symbol.intern(null, "poll")), RT.keyword(null, "as"), Symbol.intern(null, "session") })) })), RT.keyword(null, "line"), Integer.valueOf(160), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/server.clj" });
    const__122 = (Var)RT.var("tilt.bayeux.server", "close-session");
    const__125 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "session")) })), RT.keyword(null, "line"), Integer.valueOf(182), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/server.clj" });
    const__126 = (Var)RT.var("tilt.bayeux.server", "reject-no-session");
    const__129 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "messages")) })), RT.keyword(null, "line"), Integer.valueOf(185), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/server.clj" });
    const__130 = (Var)RT.var("tilt.bayeux.server", "handle-session-messages");
    const__133 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "server"), Symbol.intern(null, "messages")) })), RT.keyword(null, "line"), Integer.valueOf(193), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/server.clj" });
    const__134 = (Var)RT.var("tilt.bayeux.server", "unregister-session");
    const__137 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "server"), Symbol.intern(null, "client-id")) })), RT.keyword(null, "line"), Integer.valueOf(224), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/server.clj" });
    const__138 = (Var)RT.var("tilt.bayeux.server", "register-session");
    const__141 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "server"), Symbol.intern(null, "message")) })), RT.keyword(null, "line"), Integer.valueOf(231), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/server.clj" });
    const__142 = (Var)RT.var("tilt.bayeux.server", "handle-handshake");
    const__145 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "server"), Symbol.intern(null, "message")) })), RT.keyword(null, "line"), Integer.valueOf(257), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/server.clj" });
    const__146 = (Var)RT.var("tilt.bayeux.server", "handle-anon-publish-messages");
    const__149 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "server"), Symbol.intern(null, "messages")) })), RT.keyword(null, "line"), Integer.valueOf(287), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/server.clj" });
    const__150 = (Var)RT.var("tilt.bayeux.server", "handle-messages");
    const__153 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "server"), Symbol.intern(null, "messages")) })), RT.keyword(null, "line"), Integer.valueOf(303), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/server.clj" });
    const__154 = (Var)RT.var("tilt.bayeux.server", "upstream-subscriptions");
    const__157 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "subscription")) })), RT.keyword(null, "line"), Integer.valueOf(320), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/server.clj" });
    const__158 = (Var)RT.var("tilt.bayeux.server", "upstream-message");
    const__161 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "message")) })), RT.keyword(null, "line"), Integer.valueOf(323), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/server.clj" });
    const__162 = (Var)RT.var("tilt.bayeux.server", "downstream-message");
    const__165 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "message")) })), RT.keyword(null, "line"), Integer.valueOf(346), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/server.clj" });
    const__166 = (Var)RT.var("tilt.bayeux.server", "upstream-messages-xf");
    const__168 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(360), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/server.clj" });
    const__169 = (Var)RT.var("clojure.core", "map");
    const__170 = (Var)RT.var("tilt.bayeux.server", "downstream-messages-xf");
    const__172 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(361), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/server.clj" });
    const__173 = (Var)RT.var("tilt.bayeux.server", "make-pubsub-accept");
    const__176 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "session-config")), RT.keyword(null, "or"), RT.map(new Object[] { Symbol.intern(null, "session-config"), Symbol.intern(null, "session-config-defaults") }) }))) })), RT.keyword(null, "line"), Integer.valueOf(363), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/server.clj" });
    const__177 = (Var)RT.var("tilt.bayeux.server", "parse-messages");
    const__180 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "max-message-size"), Symbol.intern(null, "payload")) })), RT.keyword(null, "line"), Integer.valueOf(388), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/server.clj" });
    const__181 = (Var)RT.var("tilt.bayeux.server", "error-response?");
    const__184 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "error-map"), Symbol.intern(null, "message")) })), RT.keyword(null, "line"), Integer.valueOf(406), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/server.clj" });
    const__185 = (Var)RT.var("tilt.bayeux.server", "ensure-advice");
    const__189 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "server"), Symbol.intern(null, "messages")) })), RT.keyword(null, "doc"), "It's not clear from the spec but the idea is that connect and\n  handshake together are part of the session lifecycle e.g.\n\n  - handshake         advice retry\n  - connect success   advice retry\n  - connect success   advice retry\n  - connect success   advice retry\n  - connect failure   advice handshake\n  - handshake         advice retry\n  - ...\n\n  Note: Faye clients can get into a reconnect storm if messages other\n  than connect (even handshake) have a {:reconnect \"handshake\"} advice.\n  It's best to terminate the server-session if a re-handshake is desired.", RT.keyword(null, "line"), Integer.valueOf(411), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/server.clj" });
    const__190 = (Var)RT.var("tilt.bayeux.server", "unsuccessful-subscription?");
    const__193 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "message")) })), RT.keyword(null, "line"), Integer.valueOf(447), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/server.clj" });
    const__194 = (Var)RT.var("tilt.bayeux.server", "handle-subscribe-error");
    const__197 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "server"), Symbol.intern(null, "responses")) })), RT.keyword(null, "doc"), "Clients generally implement automatic resubscription. Some clients\n  however (Faye) won't resubscribe if they receive an explicit\n  subscription error. We therefore prevent any subscription errors from\n  reaching the client and terminate the server session instead, which\n  causes the client to re-handshake and re-subscribe after a timeout.", RT.keyword(null, "line"), Integer.valueOf(451), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/server.clj" });
    const__198 = (Var)RT.var("tilt.bayeux.server", "with-request");
  }
  
  public static void __init2() {
    const__201 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "messages"), Symbol.intern(null, "request")) })), RT.keyword(null, "line"), Integer.valueOf(468), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/server.clj" });
    const__202 = (Var)RT.var("tilt.bayeux.server", "handle-data");
    const__205 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "server"), Symbol.intern(null, "data"), Symbol.intern(null, "response-ch"), Symbol.intern(null, "close-ch"), Symbol.intern(null, "websocket?")) })), RT.keyword(null, "line"), Integer.valueOf(471), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/server.clj" });
    const__206 = (Var)RT.var("tilt.bayeux.server", "handle-websocket");
    const__209 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "server"), Symbol.intern(null, "request")) })), RT.keyword(null, "line"), Integer.valueOf(483), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/server.clj" });
    const__210 = (Var)RT.var("tilt.bayeux.server", "message-str-from-request-body");
    const__213 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "request")) })), RT.keyword(null, "line"), Integer.valueOf(513), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/server.clj" });
    const__214 = (Var)RT.var("tilt.bayeux.server", "close-promise-from-request");
    const__217 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "request")) })), RT.keyword(null, "line"), Integer.valueOf(523), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/server.clj" });
    const__218 = (Var)RT.var("tilt.bayeux.server", "request-handler");
    const__221 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "server")) })), RT.keyword(null, "line"), Integer.valueOf(536), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/server.clj" });
    const__222 = (Var)RT.var("tilt.bayeux.server", "bayeux-handler");
    const__225 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "prefix"), Symbol.intern(null, "server")), RT.keyword(null, "or"), RT.map(new Object[] { Symbol.intern(null, "prefix"), "/bayeux" }), RT.keyword(null, "as"), Symbol.intern(null, "opts") })) })), RT.keyword(null, "line"), Integer.valueOf(561), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/bayeux/server.clj" });
  }
  
  static  {
    __init0();
    __init1();
    __init2();
    Compiler.pushNSandLoader(RT.classForName("tilt.bayeux.server__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
