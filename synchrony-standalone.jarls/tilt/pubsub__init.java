package tilt;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class pubsub__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__11;
  
  public static final Var const__12;
  
  public static final AFn const__15;
  
  public static final Var const__16;
  
  public static final AFn const__19;
  
  public static final Var const__20;
  
  public static final AFn const__23;
  
  public static final Var const__24;
  
  public static final AFn const__27;
  
  public static void load() { LockingTransaction.runInTransaction((Callable)new pubsub.fn__31573());
    const__3.setMeta((IPersistentMap)const__11);
    const__3.bindRoot(new pubsub.make_subscriptions());
    const__12.setMeta((IPersistentMap)const__15);
    const__12.bindRoot(new pubsub.publish());
    const__16.setMeta((IPersistentMap)const__19);
    const__16.bindRoot(new pubsub.run_publisher());
    const__20.setMeta((IPersistentMap)const__23);
    const__20.bindRoot(new pubsub.subscribe());
    const__24.setMeta((IPersistentMap)const__27);
    const__24.bindRoot(new pubsub.unsubscribe()); }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "tilt.pubsub");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("tilt.pubsub", "make-subscriptions");
    const__11 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(6), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/pubsub.clj" });
    const__12 = (Var)RT.var("tilt.pubsub", "publish");
    const__15 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "subscriptions"), Symbol.intern(null, "topic"), Symbol.intern(null, "message")) })), RT.keyword(null, "line"), Integer.valueOf(9), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/pubsub.clj" });
    const__16 = (Var)RT.var("tilt.pubsub", "run-publisher");
    const__19 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "subscriptions"), Symbol.intern(null, "in")) })), RT.keyword(null, "line"), Integer.valueOf(14), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/pubsub.clj" });
    const__20 = (Var)RT.var("tilt.pubsub", "subscribe");
    const__23 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "subscriptions"), Symbol.intern(null, "topic"), Symbol.intern(null, "ch")) })), RT.keyword(null, "line"), Integer.valueOf(20), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/pubsub.clj" });
    const__24 = (Var)RT.var("tilt.pubsub", "unsubscribe");
    const__27 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "subscriptions"), Symbol.intern(null, "topic"), Symbol.intern(null, "ch")) })), RT.keyword(null, "line"), Integer.valueOf(24), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "tilt/pubsub.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("tilt.pubsub__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
