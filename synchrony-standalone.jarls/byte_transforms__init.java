import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.Numbers;
import clojure.lang.PersistentArrayMap;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class byte_transforms__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__10;
  
  public static final Var const__11;
  
  public static final Var const__12;
  
  public static final AFn const__14;
  
  public static final Var const__15;
  
  public static final AFn const__17;
  
  public static final Var const__18;
  
  public static final AFn const__20;
  
  public static final Var const__21;
  
  public static final AFn const__23;
  
  public static final Var const__24;
  
  public static final AFn const__28;
  
  public static final Var const__29;
  
  public static final AFn const__32;
  
  public static final Var const__33;
  
  public static final AFn const__36;
  
  public static final Var const__37;
  
  public static final AFn const__40;
  
  public static final Var const__41;
  
  public static final AFn const__44;
  
  public static final Var const__45;
  
  public static final AFn const__48;
  
  public static final Var const__49;
  
  public static final Object const__51;
  
  public static final Var const__52;
  
  public static final AFn const__56;
  
  public static final Var const__57;
  
  public static final AFn const__60;
  
  public static final Var const__61;
  
  public static final AFn const__64;
  
  public static final Var const__65;
  
  public static final AFn const__68;
  
  public static final Var const__69;
  
  public static final AFn const__72;
  
  public static final Var const__73;
  
  public static final AFn const__76;
  
  public static final Var const__77;
  
  public static final AFn const__80;
  
  public static final Var const__81;
  
  public static final Var const__82;
  
  public static final Keyword const__83;
  
  public static final Keyword const__84;
  
  public static final Keyword const__85;
  
  public static final Var const__86;
  
  public static final AFn const__89;
  
  public static final Var const__90;
  
  public static final AFn const__93;
  
  public static final Keyword const__94;
  
  public static final Keyword const__95;
  
  public static final Keyword const__96;
  
  public static final Keyword const__97;
  
  public static final Keyword const__98;
  
  public static final Keyword const__99;
  
  public static final Keyword const__100;
  
  public static final Keyword const__101;
  
  public static final Keyword const__102;
  
  public static final Var const__103;
  
  public static final AFn const__106;
  
  public static final Var const__107;
  
  public static final AFn const__110;
  
  public static final Var const__111;
  
  public static final AFn const__114;
  
  public static final Var const__115;
  
  public static final AFn const__118;
  
  public static final Var const__119;
  
  public static final AFn const__122;
  
  public static final Keyword const__123;
  
  public static final Keyword const__124;
  
  public static final Keyword const__125;
  
  public static final Keyword const__126;
  
  public static final Var const__127;
  
  public static final AFn const__130;
  
  public static final Var const__131;
  
  public static final AFn const__134;
  
  public static final Var const__135;
  
  public static final AFn const__138;
  
  public static final Keyword const__139;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new byte_transforms.fn__18246());
    const__3.setMeta((IPersistentMap)const__10);
    const__3

















































      
      .bindRoot(((IFn)const__11.getRawRoot()).invoke(PersistentArrayMap.EMPTY));
    const__12.setMeta((IPersistentMap)const__14);
    const__12
      .bindRoot(((IFn)const__11.getRawRoot()).invoke(PersistentArrayMap.EMPTY));
    const__15.setMeta((IPersistentMap)const__17);
    const__15
      .bindRoot(((IFn)const__11.getRawRoot()).invoke(PersistentArrayMap.EMPTY));
    const__18.setMeta((IPersistentMap)const__20);
    const__18
      .bindRoot(((IFn)const__11.getRawRoot()).invoke(PersistentArrayMap.EMPTY));
    const__21.setMeta((IPersistentMap)const__23);
    const__21
      .bindRoot(((IFn)const__11.getRawRoot()).invoke(PersistentArrayMap.EMPTY));
    const__24.setMeta((IPersistentMap)const__28);
    const__24.bindRoot(new byte_transforms.def_hash());
    ((Var)const__24)
      
      .setMacro();
    const__29.setMeta((IPersistentMap)const__32);
    const__29.bindRoot(new byte_transforms.def_compressor());
    ((Var)const__29)



      
      .setMacro();
    const__33.setMeta((IPersistentMap)const__36);
    const__33.bindRoot(new byte_transforms.def_decompressor());
    ((Var)const__33)



      
      .setMacro();
    const__37.setMeta((IPersistentMap)const__40);
    const__37.bindRoot(new byte_transforms.def_encoder());
    ((Var)const__37)



      
      .setMacro();
    const__41.setMeta((IPersistentMap)const__44);
    const__41.bindRoot(new byte_transforms.def_decoder());
    ((Var)const__41)



      
      .setMacro();
    const__45.setMeta((IPersistentMap)const__48);
    const__45





      
      .bindRoot(((IFn)const__49.getRawRoot()).invoke(Numbers.byte_array(const__51)));
    const__52.setMeta((IPersistentMap)const__56);
    const__52.bindRoot(new byte_transforms.available_hash_functions());
    const__57.setMeta((IPersistentMap)const__60);
    const__57.bindRoot(new byte_transforms.hash_EQ_());
    const__61.setMeta((IPersistentMap)const__64);
    const__61.bindRoot(new byte_transforms.hash__GT_bytes());
    const__65.setMeta((IPersistentMap)const__68);
    const__65.bindRoot(new byte_transforms.hash__GT_shorts());
    const__69.setMeta((IPersistentMap)const__72);
    const__69.bindRoot(new byte_transforms.hash__GT_ints());
    const__73.setMeta((IPersistentMap)const__76);
    const__73.bindRoot(new byte_transforms.hash__GT_longs());
    const__77.setMeta((IPersistentMap)const__80);
    const__77.bindRoot(new byte_transforms.hash__GT_uuid());
    const__86.setMeta((IPersistentMap)const__89);
    const__86.bindRoot(new byte_transforms.hash_digest());
    const__90.setMeta((IPersistentMap)const__93);
    const__90.bindRoot(new byte_transforms.def_digests());
    ((Var)const__90)














      
      .setMacro();
    const__103.setMeta((IPersistentMap)const__106);
    const__103.bindRoot(new byte_transforms.available_compressors());
    const__107.setMeta((IPersistentMap)const__110);
    const__107.bindRoot(new byte_transforms.compress());
    const__111.setMeta((IPersistentMap)const__114);
    const__111.bindRoot(new byte_transforms.decompress());
    const__115.setMeta((IPersistentMap)const__118);
    const__115.bindRoot(new byte_transforms.in__GT_wrapped_out__GT_in());
    const__119.setMeta((IPersistentMap)const__122);
    const__119.bindRoot(new byte_transforms.bytes__GT_wrapped_out__GT_bytes());
    const__127.setMeta((IPersistentMap)const__130);
    const__127.bindRoot(new byte_transforms.available_encoders());
    const__131.setMeta((IPersistentMap)const__134);
    const__131.bindRoot(new byte_transforms.encode());
    const__135.setMeta((IPersistentMap)const__138);
    const__135.bindRoot(new byte_transforms.decode());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "byte-transforms");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("byte-transforms", "hash-functions");
    const__10 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(52), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_transforms.clj" });
    const__11 = (Var)RT.var("clojure.core", "atom");
    const__12 = (Var)RT.var("byte-transforms", "compressors");
    const__14 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(53), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_transforms.clj" });
    const__15 = (Var)RT.var("byte-transforms", "decompressors");
    const__17 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(54), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_transforms.clj" });
    const__18 = (Var)RT.var("byte-transforms", "encoders");
    const__20 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(55), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_transforms.clj" });
    const__21 = (Var)RT.var("byte-transforms", "decoders");
    const__23 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(56), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_transforms.clj" });
    const__24 = (Var)RT.var("byte-transforms", "def-hash");
    const__28 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "hash-name"), Tuple.create(Symbol.intern(null, "bytes"), Symbol.intern(null, "options")), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "line"), Integer.valueOf(58), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_transforms.clj" });
    const__29 = (Var)RT.var("byte-transforms", "def-compressor");
    const__32 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "compressor-name"), Tuple.create(Symbol.intern(null, "bytes"), Symbol.intern(null, "options")), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "line"), Integer.valueOf(63), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_transforms.clj" });
    const__33 = (Var)RT.var("byte-transforms", "def-decompressor");
    const__36 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "decompressor-name"), Tuple.create(Symbol.intern(null, "bytes"), Symbol.intern(null, "options")), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "line"), Integer.valueOf(68), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_transforms.clj" });
    const__37 = (Var)RT.var("byte-transforms", "def-encoder");
    const__40 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "encoder-name"), Tuple.create(Symbol.intern(null, "bytes"), Symbol.intern(null, "options")), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "line"), Integer.valueOf(73), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_transforms.clj" });
    const__41 = (Var)RT.var("byte-transforms", "def-decoder");
    const__44 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "decoder-name"), Tuple.create(Symbol.intern(null, "bytes"), Symbol.intern(null, "options")), Symbol.intern(null, "&"), Symbol.intern(null, "body")) })), RT.keyword(null, "line"), Integer.valueOf(78), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_transforms.clj" });
    const__45 = (Var)RT.var("byte-transforms", "byte-array");
    const__48 = (AFn)RT.map(new Object[] { RT.keyword(null, "const"), Boolean.TRUE, RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(85), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_transforms.clj" });
    const__49 = (Var)RT.var("clojure.core", "class");
    const__51 = Long.valueOf(0L);
    const__52 = (Var)RT.var("byte-transforms", "available-hash-functions");
    const__56 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "doc"), "Returns the name of all available hash functions.", RT.keyword(null, "line"), Integer.valueOf(87), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_transforms.clj" });
    const__57 = (Var)RT.var("byte-transforms", "hash=");
    const__60 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "a"), Symbol.intern(null, "b")) })), RT.keyword(null, "doc"), "Returns true if the two hashes equal each other", RT.keyword(null, "line"), Integer.valueOf(92), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_transforms.clj" });
    const__61 = (Var)RT.var("byte-transforms", "hash->bytes");
    const__64 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "doc"), "Converts a hash to an array of bytes.", RT.keyword(null, "line"), Integer.valueOf(101), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_transforms.clj" });
    const__65 = (Var)RT.var("byte-transforms", "hash->shorts");
    const__68 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "doc"), "Converts a hash to an array of shorts.", RT.keyword(null, "line"), Integer.valueOf(109), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_transforms.clj" });
    const__69 = (Var)RT.var("byte-transforms", "hash->ints");
    const__72 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "doc"), "Converts a hash to an array of integers.", RT.keyword(null, "line"), Integer.valueOf(117), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_transforms.clj" });
    const__73 = (Var)RT.var("byte-transforms", "hash->longs");
    const__76 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "doc"), "Converts a hash to an array of longs.", RT.keyword(null, "line"), Integer.valueOf(125), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_transforms.clj" });
    const__77 = (Var)RT.var("byte-transforms", "hash->uuid");
    const__80 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "doc"), "Converts a 128-bit hash to a string representation of a UUID.", RT.keyword(null, "line"), Integer.valueOf(133), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_transforms.clj" });
    const__81 = (Var)RT.var("clojure.core", "swap!");
    const__82 = (Var)RT.var("clojure.core", "assoc");
    const__83 = (Keyword)RT.keyword(null, "crc32");
    const__84 = (Keyword)RT.keyword(null, "crc64");
    const__85 = (Keyword)RT.keyword(null, "adler32");
    const__86 = (Var)RT.var("byte-transforms", "hash-digest");
    const__89 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "digest")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "MessageDigest") })), Symbol.intern(null, "bufs"), Symbol.intern(null, "options")) })), RT.keyword(null, "line"), Integer.valueOf(171), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_transforms.clj" });
    const__90 = (Var)RT.var("byte-transforms", "def-digests");
    const__93 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "names")) })), RT.keyword(null, "line"), Integer.valueOf(178), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_transforms.clj" });
    const__94 = (Keyword)RT.keyword(null, "md2");
    const__95 = (Keyword)RT.keyword(null, "md5");
    const__96 = (Keyword)RT.keyword(null, "sha1");
    const__97 = (Keyword)RT.keyword(null, "sha256");
    const__98 = (Keyword)RT.keyword(null, "sha384");
    const__99 = (Keyword)RT.keyword(null, "sha512");
  }
  
  public static void __init1() {
    const__100 = (Keyword)RT.keyword(null, "murmur32");
    const__101 = (Keyword)RT.keyword(null, "murmur64");
    const__102 = (Keyword)RT.keyword(null, "murmur128");
    const__103 = (Var)RT.var("byte-transforms", "available-compressors");
    const__106 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(259), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_transforms.clj" });
    const__107 = (Var)RT.var("byte-transforms", "compress");
    const__110 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")), Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "algorithm")), Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "algorithm"), Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "Takes a byte stream, and returns a compressed version.  By default, this will use Snappy.", RT.keyword(null, "line"), Integer.valueOf(262), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_transforms.clj" });
    const__111 = (Var)RT.var("byte-transforms", "decompress");
    const__114 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")), Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "algorithm")), Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "algorithm"), Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "Takes a compressed byte stream, and return an uncompressed version.  By default, this will use Snappy.", RT.keyword(null, "line"), Integer.valueOf(275), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_transforms.clj" });
    const__115 = (Var)RT.var("byte-transforms", "in->wrapped-out->in");
    const__118 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "stream")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "InputStream") })), Symbol.intern(null, "output-wrapper"), Symbol.intern(null, "options")) })), RT.keyword(null, "line"), Integer.valueOf(288), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_transforms.clj" });
    const__119 = (Var)RT.var("byte-transforms", "bytes->wrapped-out->bytes");
    const__122 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "bytes"), Symbol.intern(null, "output-wrapper"), Symbol.intern(null, "options")) })), RT.keyword(null, "line"), Integer.valueOf(308), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_transforms.clj" });
    const__123 = (Keyword)RT.keyword(null, "gzip");
    const__124 = (Keyword)RT.keyword(null, "snappy");
    const__125 = (Keyword)RT.keyword(null, "bzip2");
    const__126 = (Keyword)RT.keyword(null, "lz4");
    const__127 = (Var)RT.var("byte-transforms", "available-encoders");
    const__130 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "doc"), "Returns a list of all available encodings.", RT.keyword(null, "line"), Integer.valueOf(408), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_transforms.clj" });
    const__131 = (Var)RT.var("byte-transforms", "encode");
    const__134 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "encoding")), Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "encoding"), Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "Takes a byte stream, and returns an encoded version.", RT.keyword(null, "line"), Integer.valueOf(413), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_transforms.clj" });
    const__135 = (Var)RT.var("byte-transforms", "decode");
    const__138 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "encoding")), Tuple.create(Symbol.intern(null, "x"), Symbol.intern(null, "encoding"), Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "Takes an encoded byte stream, and returns a decoded version.", RT.keyword(null, "line"), Integer.valueOf(424), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "byte_transforms.clj" });
    const__139 = (Keyword)RT.keyword(null, "base64");
  }
  
  static  {
    __init0();
    __init1();
    Compiler.pushNSandLoader(RT.classForName("byte_transforms__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
