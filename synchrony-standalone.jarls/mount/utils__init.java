package mount;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class utils__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__3;
  
  public static final AFn const__4;
  
  public static final Var const__5;
  
  public static final AFn const__13;
  
  public static final Var const__14;
  
  public static final AFn const__17;
  
  public static final Var const__18;
  
  public static final AFn const__21;
  
  public static final Var const__22;
  
  public static final AFn const__25;
  
  public static final Var const__26;
  
  public static final AFn const__29;
  
  public static void load() { LockingTransaction.runInTransaction((Callable)new utils.fn__23920());
    const__5.setMeta((IPersistentMap)const__13);
    const__5.bindRoot(new utils.name_with_attrs());
    const__14.setMeta((IPersistentMap)const__17);
    const__14.bindRoot(new utils.find_index());
    const__18.setMeta((IPersistentMap)const__21);
    const__18.bindRoot(new utils.keyword__GT_symbol());
    const__22.setMeta((IPersistentMap)const__25);
    const__22.bindRoot(new utils.resolve_keyword());
    const__26.setMeta((IPersistentMap)const__29);
    const__26.bindRoot(new utils.var__GT_keyword()); }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "mount.utils")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE }));
    const__3 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE });
    const__4 = (AFn)Symbol.intern(null, "clojure.core");
    const__5 = (Var)RT.var("mount.utils", "name-with-attrs");
    const__13 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "name"), Tuple.create(Symbol.intern(null, "arg1"), Symbol.intern(null, "arg2"), Symbol.intern(null, "&"), Symbol.intern(null, "argx"), RT.keyword(null, "as"), Symbol.intern(null, "args"))) })), RT.keyword(null, "line"), Integer.valueOf(3), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "mount/utils.clj" });
    const__14 = (Var)RT.var("mount.utils", "find-index");
    const__17 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "elem"), Symbol.intern(null, "coll")) })), RT.keyword(null, "line"), Integer.valueOf(11), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "mount/utils.clj" });
    const__18 = (Var)RT.var("mount.utils", "keyword->symbol");
    const__21 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "kw")) })), RT.keyword(null, "line"), Integer.valueOf(18), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "mount/utils.clj" });
    const__22 = (Var)RT.var("mount.utils", "resolve-keyword");
    const__25 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "kw")) })), RT.keyword(null, "line"), Integer.valueOf(22), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "mount/utils.clj" });
    const__26 = (Var)RT.var("mount.utils", "var->keyword");
    const__29 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "var")) })), RT.keyword(null, "line"), Integer.valueOf(26), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "mount/utils.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("mount.utils__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
