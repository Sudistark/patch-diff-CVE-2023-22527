package ring.middleware;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class head__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__3;
  
  public static final AFn const__4;
  
  public static final Var const__5;
  
  public static final AFn const__14;
  
  public static final Var const__15;
  
  public static final AFn const__18;
  
  public static final Var const__19;
  
  public static final AFn const__22;
  
  public static void load() { LockingTransaction.runInTransaction((Callable)new head.fn__30718());
    const__5.setMeta((IPersistentMap)const__14);
    const__5.bindRoot(new head.head_request());
    const__15.setMeta((IPersistentMap)const__18);
    const__15.bindRoot(new head.head_response());
    const__19.setMeta((IPersistentMap)const__22);
    const__19.bindRoot(new head.wrap_head()); }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "ring.middleware.head")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Middleware to simplify replying to HEAD requests.\n\n  A response to a HEAD request should be identical to a GET request, with the\n  exception that a response to a HEAD request should have an empty body." }));
    const__3 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Middleware to simplify replying to HEAD requests.\n\n  A response to a HEAD request should be identical to a GET request, with the\n  exception that a response to a HEAD request should have an empty body." });
    const__4 = (AFn)Symbol.intern(null, "clojure.core");
    const__5 = (Var)RT.var("ring.middleware.head", "head-request");
    const__14 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "request")) })), RT.keyword(null, "doc"), "Turns a HEAD request into a GET.", RT.keyword(null, "added"), "1.2", RT.keyword(null, "line"), Integer.valueOf(7), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "ring/middleware/head.clj" });
    const__15 = (Var)RT.var("ring.middleware.head", "head-response");
    const__18 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "response"), Symbol.intern(null, "request")) })), RT.keyword(null, "doc"), "Returns a nil body if original request was a HEAD.", RT.keyword(null, "added"), "1.2", RT.keyword(null, "line"), Integer.valueOf(15), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "ring/middleware/head.clj" });
    const__19 = (Var)RT.var("ring.middleware.head", "wrap-head");
    const__22 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "handler")) })), RT.keyword(null, "doc"), "Middleware that turns any HEAD request into a GET, and then sets the response\n  body to nil.", RT.keyword(null, "added"), "1.1", RT.keyword(null, "line"), Integer.valueOf(23), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "ring/middleware/head.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("ring.middleware.head__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
