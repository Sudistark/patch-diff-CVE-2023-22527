package ring.middleware;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;
import java.util.regex.Pattern;

public class cookies__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final Keyword const__2;
  
  public static final AFn const__3;
  
  public static final AFn const__4;
  
  public static final Var const__5;
  
  public static final AFn const__12;
  
  public static final Object const__13;
  
  public static final Var const__14;
  
  public static final AFn const__16;
  
  public static final Var const__17;
  
  public static final Var const__18;
  
  public static final Var const__19;
  
  public static final AFn const__21;
  
  public static final Var const__22;
  
  public static final Var const__23;
  
  public static final AFn const__25;
  
  public static final AFn const__33;
  
  public static final Var const__34;
  
  public static final AFn const__36;
  
  public static final AFn const__40;
  
  public static final Var const__41;
  
  public static final AFn const__45;
  
  public static final Var const__46;
  
  public static final AFn const__49;
  
  public static final Var const__50;
  
  public static final AFn const__53;
  
  public static final Var const__54;
  
  public static final AFn const__57;
  
  public static final Var const__58;
  
  public static final AFn const__61;
  
  public static final Object const__62;
  
  public static final Var const__63;
  
  public static final Var const__64;
  
  public static final Var const__65;
  
  public static final Var const__66;
  
  public static final ISeq const__67;
  
  public static final Var const__68;
  
  public static final Var const__69;
  
  public static final AFn const__73;
  
  public static final Keyword const__74;
  
  public static final AFn const__75;
  
  public static final Keyword const__76;
  
  public static final Keyword const__77;
  
  public static final Keyword const__78;
  
  public static final AFn const__79;
  
  public static final Keyword const__80;
  
  public static final Var const__81;
  
  public static final Var const__82;
  
  public static final Var const__83;
  
  public static final AFn const__84;
  
  public static final AFn const__85;
  
  public static final Keyword const__86;
  
  public static final Var const__87;
  
  public static final AFn const__88;
  
  public static final Object const__89;
  
  public static final Var const__90;
  
  public static final ISeq const__91;
  
  public static final AFn const__93;
  
  public static final AFn const__94;
  
  public static final AFn const__96;
  
  public static final AFn const__97;
  
  public static final AFn const__98;
  
  public static final AFn const__99;
  
  public static final Var const__100;
  
  public static final AFn const__105;
  
  public static final Var const__106;
  
  public static final Object const__107;
  
  public static final Var const__108;
  
  public static final AFn const__111;
  
  public static final Var const__112;
  
  public static final AFn const__115;
  
  public static final Var const__116;
  
  public static final AFn const__119;
  
  public static final Var const__120;
  
  public static final AFn const__123;
  
  public static final Var const__124;
  
  public static final AFn const__128;
  
  public static final Var const__129;
  
  public static final AFn const__132;
  
  public static final Var const__133;
  
  public static final AFn const__136;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new cookies.fn__59977());
    const__5.setMeta((IPersistentMap)const__12);
    const__5.bindRoot(const__13);
    const__14.setMeta((IPersistentMap)const__16);
    const__14














      
      .bindRoot(((IFn)const__17.getRawRoot()).invoke(((IFn)const__18.getRawRoot()).invoke("\"", const__5.getRawRoot(), "*\"|", const__5.getRawRoot(), "*")));
    const__19.setMeta((IPersistentMap)const__21);
    const__19


      
      .bindRoot(((IFn)const__17.getRawRoot()).invoke(((IFn)const__18.getRawRoot()).invoke("\\s*(", const__22.getRawRoot(), ")=(", const__14.getRawRoot(), ")\\s*[;,]?")));
    const__23.setMeta((IPersistentMap)const__25);
    const__23.bindRoot(const__33);
    const__34.setMeta((IPersistentMap)const__36);
    const__34.bindRoot(const__40);
    const__41.setMeta((IPersistentMap)const__45);
    const__41.bindRoot(new cookies.parse_cookie_header());
    const__46.setMeta((IPersistentMap)const__49);
    const__46.bindRoot(new cookies.strip_quotes());
    const__50.setMeta((IPersistentMap)const__53);
    const__50.bindRoot(new cookies.decode_values());
    const__54.setMeta((IPersistentMap)const__57);
    const__54.bindRoot(new cookies.parse_cookies());
    const__58.setMeta((IPersistentMap)const__61);
    const__58.bindRoot(new cookies.write_value());
    const__100.setMeta((IPersistentMap)const__105);
    const__100.bindRoot(new cookies.class_by_name());
    const__108.setMeta((IPersistentMap)const__111);
    const__108.bindRoot(new cookies.valid_attr_QMARK_());
    const__112.setMeta((IPersistentMap)const__115);
    const__112.bindRoot(new cookies.write_attr_map());
    const__116.setMeta((IPersistentMap)const__119);
    const__116.bindRoot(new cookies.write_cookies());
    const__120.setMeta((IPersistentMap)const__123);
    const__120.bindRoot(new cookies.set_cookies());
    const__124.setMeta((IPersistentMap)const__128);
    const__124.bindRoot(new cookies.cookies_request());
    const__129.setMeta((IPersistentMap)const__132);
    const__129.bindRoot(new cookies.cookies_response());
    const__133.setMeta((IPersistentMap)const__136);
    const__133.bindRoot(new cookies.wrap_cookies());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "ring.middleware.cookies")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Middleware for parsing and generating cookies." }));
    const__2 = (Keyword)RT.keyword(null, "doc");
    const__3 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Middleware for parsing and generating cookies." });
    const__4 = (AFn)Symbol.intern(null, "clojure.core");
    const__5 = (Var)RT.var("ring.middleware.cookies", "re-cookie-octet");
    const__12 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "doc"), "RFC6265 cookie-octet", RT.keyword(null, "line"), Integer.valueOf(11), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ring/middleware/cookies.clj" });
    const__13 = Pattern.compile("[!#$%&'()*+\\-./0-9:<=>?@A-Z\\[\\]\\^_`a-z\\{\\|\\}~]");
    const__14 = (Var)RT.var("ring.middleware.cookies", "re-cookie-value");
    const__16 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "doc"), "RFC6265 cookie-value", RT.keyword(null, "line"), Integer.valueOf(15), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ring/middleware/cookies.clj" });
    const__17 = (Var)RT.var("clojure.core", "re-pattern");
    const__18 = (Var)RT.var("clojure.core", "str");
    const__19 = (Var)RT.var("ring.middleware.cookies", "re-cookie");
    const__21 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "doc"), "RFC6265 set-cookie-string", RT.keyword(null, "line"), Integer.valueOf(19), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ring/middleware/cookies.clj" });
    const__22 = (Var)RT.var("ring.util.parsing", "re-token");
    const__23 = (Var)RT.var("ring.middleware.cookies", "set-cookie-attrs");
    const__25 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "doc"), "Attributes defined by RFC6265 that apply to the Set-Cookie header.", RT.keyword(null, "line"), Integer.valueOf(23), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ring/middleware/cookies.clj" });
    const__33 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "domain"), "Domain", RT.keyword(null, "max-age"), "Max-Age", RT.keyword(null, "path"), "Path", RT.keyword(null, "secure"), "Secure", RT.keyword(null, "expires"), "Expires", 
          RT.keyword(null, "http-only"), "HttpOnly", RT.keyword(null, "same-site"), "SameSite" });
    const__34 = (Var)RT.var("ring.middleware.cookies", "same-site-values");
    const__36 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "doc"), "Values defined by RFC6265 that apply to the SameSite cookie attribute header.", RT.keyword(null, "line"), Integer.valueOf(30), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ring/middleware/cookies.clj" });
    const__40 = (AFn)RT.map(new Object[] { RT.keyword(null, "strict"), "Strict", RT.keyword(null, "lax"), "Lax", RT.keyword(null, "none"), "None" });
    const__41 = (Var)RT.var("ring.middleware.cookies", "parse-cookie-header");
    const__45 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "header")) })), RT.keyword(null, "doc"), "Turn a HTTP Cookie header into a list of name/value pairs.", RT.keyword(null, "line"), Integer.valueOf(37), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "ring/middleware/cookies.clj" });
    const__46 = (Var)RT.var("ring.middleware.cookies", "strip-quotes");
    const__49 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "value")) })), RT.keyword(null, "doc"), "Strip quotes from a cookie value.", RT.keyword(null, "line"), Integer.valueOf(43), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "ring/middleware/cookies.clj" });
    const__50 = (Var)RT.var("ring.middleware.cookies", "decode-values");
    const__53 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "cookies"), Symbol.intern(null, "decoder")) })), RT.keyword(null, "line"), Integer.valueOf(48), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ring/middleware/cookies.clj" });
    const__54 = (Var)RT.var("ring.middleware.cookies", "parse-cookies");
    const__57 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "request"), Symbol.intern(null, "encoder")) })), RT.keyword(null, "doc"), "Parse the cookies from a request map.", RT.keyword(null, "line"), Integer.valueOf(53), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "ring/middleware/cookies.clj" });
    const__58 = (Var)RT.var("ring.middleware.cookies", "write-value");
    const__61 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "key"), Symbol.intern(null, "value"), Symbol.intern(null, "encoder")) })), RT.keyword(null, "doc"), "Write the main cookie value.", RT.keyword(null, "line"), Integer.valueOf(64), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "ring/middleware/cookies.clj" });
    const__62 = RT.classForName("ring.middleware.cookies.CookieInterval");
    const__63 = (Var)RT.var("clojure.core", "alter-meta!");
    const__64 = (Var)RT.var("ring.middleware.cookies", "CookieInterval");
    const__65 = (Var)RT.var("clojure.core", "assoc");
    const__66 = (Var)RT.var("clojure.core", "assert-same-protocol");
    const__67 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "->seconds")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })) }));
    const__68 = (Var)RT.var("clojure.core", "alter-var-root");
    const__69 = (Var)RT.var("clojure.core", "merge");
    const__73 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "ring.middleware.cookies.CookieInterval"), RT.keyword(null, "on-interface"), RT.classForName("ring.middleware.cookies.CookieInterval") });
    const__74 = (Keyword)RT.keyword(null, "sigs");
    const__75 = (AFn)RT.map(new Object[] { RT.keyword(null, "->seconds"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "->seconds")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })), RT.keyword(null, "doc"), null }) });
    const__76 = (Keyword)RT.keyword(null, "var");
    const__77 = (Keyword)RT.keyword(null, "method-map");
    const__78 = (Keyword)RT.keyword(null, "->seconds");
    const__79 = (AFn)RT.map(new Object[] { RT.keyword(null, "->seconds"), RT.keyword(null, "->seconds") });
    const__80 = (Keyword)RT.keyword(null, "method-builders");
    const__81 = (Var)RT.var("clojure.core", "intern");
    const__82 = (Var)RT.var("clojure.core", "*ns*");
    const__83 = (Var)RT.var("clojure.core", "with-meta");
    const__84 = (AFn)((IObj)Symbol.intern(null, "->seconds")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) }));
    const__85 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "->seconds")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })), RT.keyword(null, "doc"), null });
    const__86 = (Keyword)RT.keyword(null, "protocol");
    const__87 = (Var)RT.var("clojure.core", "-reset-methods");
    const__88 = (AFn)Symbol.intern(null, "CookieInterval");
    const__89 = RT.classForName("ring.middleware.cookies.CookieDateTime");
    const__90 = (Var)RT.var("ring.middleware.cookies", "CookieDateTime");
    const__91 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "rfc822-format")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })) }));
    const__93 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "ring.middleware.cookies.CookieDateTime"), RT.keyword(null, "on-interface"), RT.classForName("ring.middleware.cookies.CookieDateTime") });
    const__94 = (AFn)RT.map(new Object[] { RT.keyword(null, "rfc822-format"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "rfc822-format")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })), RT.keyword(null, "doc"), null }) });
    const__96 = (AFn)RT.map(new Object[] { RT.keyword(null, "rfc822-format"), RT.keyword(null, "rfc822-format") });
    const__97 = (AFn)((IObj)Symbol.intern(null, "rfc822-format")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) }));
    const__98 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "rfc822-format")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })), RT.keyword(null, "doc"), null });
    const__99 = (AFn)Symbol.intern(null, "CookieDateTime");
  }
  
  public static void __init1() {
    const__100 = (Var)RT.var("ring.middleware.cookies", "class-by-name");
    const__105 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "tag"), RT.classForName("java.lang.Class"), RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })), RT.keyword(null, "line"), Integer.valueOf(75), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "ring/middleware/cookies.clj" });
    const__106 = (Var)RT.var("clojure.core", "extend");
    const__107 = RT.classForName("java.time.Duration");
    const__108 = (Var)RT.var("ring.middleware.cookies", "valid-attr?");
    const__111 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Tuple.create(Symbol.intern(null, "key"), Symbol.intern(null, "value"))) })), RT.keyword(null, "doc"), "Is the attribute valid?", RT.keyword(null, "line"), Integer.valueOf(109), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "ring/middleware/cookies.clj" });
    const__112 = (Var)RT.var("ring.middleware.cookies", "write-attr-map");
    const__115 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "attrs"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "every?"), Symbol.intern(null, "valid-attr?"), Symbol.intern(null, "attrs") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(123), RT.keyword(null, "column"), Integer.valueOf(10) }))) })) })), RT.keyword(null, "doc"), "Write a map of cookie attributes to a string.", RT.keyword(null, "line"), Integer.valueOf(120), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "ring/middleware/cookies.clj" });
    const__116 = (Var)RT.var("ring.middleware.cookies", "write-cookies");
    const__119 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "cookies"), Symbol.intern(null, "encoder")) })), RT.keyword(null, "doc"), "Turn a map of cookies into a seq of strings for a Set-Cookie header.", RT.keyword(null, "line"), Integer.valueOf(134), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "ring/middleware/cookies.clj" });
    const__120 = (Var)RT.var("ring.middleware.cookies", "set-cookies");
    const__123 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "response"), Symbol.intern(null, "encoder")) })), RT.keyword(null, "doc"), "Add a Set-Cookie header to a response if there is a :cookies key.", RT.keyword(null, "line"), Integer.valueOf(143), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "ring/middleware/cookies.clj" });
    const__124 = (Var)RT.var("ring.middleware.cookies", "cookies-request");
    const__128 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "request")), Tuple.create(Symbol.intern(null, "request"), Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "Parses cookies in the request map. See: wrap-cookies.", RT.keyword(null, "added"), "1.2", RT.keyword(null, "line"), Integer.valueOf(153), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "ring/middleware/cookies.clj" });
    const__129 = (Var)RT.var("ring.middleware.cookies", "cookies-response");
    const__132 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "response")), Tuple.create(Symbol.intern(null, "response"), Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "For responses with :cookies, adds Set-Cookie header and returns response\n  without :cookies. See: wrap-cookies.", RT.keyword(null, "added"), "1.2", RT.keyword(null, "line"), Integer.valueOf(164), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "ring/middleware/cookies.clj" });
    const__133 = (Var)RT.var("ring.middleware.cookies", "wrap-cookies");
    const__136 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "handler")), Tuple.create(Symbol.intern(null, "handler"), Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "Parses the cookies in the request map, then assocs the resulting map\n  to the :cookies key on the request.\n\n  Accepts the following options:\n\n  :decoder - a function to decode the cookie value. Expects a function that\n             takes a string and returns a string. Defaults to URL-decoding.\n\n  :encoder - a function to encode the cookie name and value. Expects a\n             function that takes a name/value map and returns a string.\n             Defaults to URL-encoding.\n\n  Each cookie is represented as a map, with its value being held in the\n  :value key. A cookie may optionally contain a :path, :domain or :port\n  attribute.\n\n  To set cookies, add a map to the :cookies key on the response. The values\n  of the cookie map can either be strings, or maps containing the following\n  keys:\n\n  :value     - the new value of the cookie\n  :path      - the subpath the cookie is valid for\n  :domain    - the domain the cookie is valid for\n  :max-age   - the maximum age in seconds of the cookie\n  :expires   - a date string at which the cookie will expire\n  :secure    - set to true if the cookie requires HTTPS, prevent HTTP access\n  :http-only - set to true if the cookie is valid for HTTP and HTTPS only\n               (ie. prevent JavaScript access)\n  :same-site - set to :strict or :lax to set SameSite attribute of the cookie", RT.keyword(null, "line"), Integer.valueOf(176), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ring/middleware/cookies.clj" });
  }
  
  static  {
    __init0();
    __init1();
    Compiler.pushNSandLoader(RT.classForName("ring.middleware.cookies__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
