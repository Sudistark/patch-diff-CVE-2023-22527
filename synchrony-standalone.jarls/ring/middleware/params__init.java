package ring.middleware;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class params__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__3;
  
  public static final AFn const__4;
  
  public static final Var const__5;
  
  public static final AFn const__14;
  
  public static final Var const__15;
  
  public static final AFn const__19;
  
  public static final Var const__20;
  
  public static final AFn const__23;
  
  public static final Var const__24;
  
  public static final AFn const__27;
  
  public static final Var const__28;
  
  public static final AFn const__31;
  
  public static void load() { LockingTransaction.runInTransaction((Callable)new params.fn__31111());
    const__5.setMeta((IPersistentMap)const__14);
    const__5.bindRoot(new params.parse_params());
    const__15.setMeta((IPersistentMap)const__19);
    const__15.bindRoot(new params.assoc_query_params());
    const__20.setMeta((IPersistentMap)const__23);
    const__20.bindRoot(new params.assoc_form_params());
    const__24.setMeta((IPersistentMap)const__27);
    const__24.bindRoot(new params.params_request());
    const__28.setMeta((IPersistentMap)const__31);
    const__28.bindRoot(new params.wrap_params()); }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "ring.middleware.params")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Middleware to parse url-encoded parameters from the query string and request\n  body." }));
    const__3 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Middleware to parse url-encoded parameters from the query string and request\n  body." });
    const__4 = (AFn)Symbol.intern(null, "clojure.core");
    const__5 = (Var)RT.var("ring.middleware.params", "parse-params");
    const__14 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "params"), Symbol.intern(null, "encoding")) })), RT.keyword(null, "line"), Integer.valueOf(7), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ring/middleware/params.clj" });
    const__15 = (Var)RT.var("ring.middleware.params", "assoc-query-params");
    const__19 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "request"), Symbol.intern(null, "encoding")) })), RT.keyword(null, "doc"), "Parse and assoc parameters from the query string with the request.", RT.keyword(null, "added"), "1.3", RT.keyword(null, "line"), Integer.valueOf(11), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "ring/middleware/params.clj" });
    const__20 = (Var)RT.var("ring.middleware.params", "assoc-form-params");
    const__23 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "request"), Symbol.intern(null, "encoding")) })), RT.keyword(null, "doc"), "Parse and assoc parameters from the request body with the request.", RT.keyword(null, "added"), "1.2", RT.keyword(null, "line"), Integer.valueOf(21), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "ring/middleware/params.clj" });
    const__24 = (Var)RT.var("ring.middleware.params", "params-request");
    const__27 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "request")), Tuple.create(Symbol.intern(null, "request"), Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "Adds parameters from the query string and the request body to the request\n  map. See: wrap-params.", RT.keyword(null, "added"), "1.2", RT.keyword(null, "line"), Integer.valueOf(31), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "ring/middleware/params.clj" });
    const__28 = (Var)RT.var("ring.middleware.params", "wrap-params");
    const__31 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "handler")), Tuple.create(Symbol.intern(null, "handler"), Symbol.intern(null, "options")) })), RT.keyword(null, "doc"), "Middleware to parse urlencoded parameters from the query string and form\n  body (if the request is a url-encoded form). Adds the following keys to\n  the request map:\n\n  :query-params - a map of parameters from the query string\n  :form-params  - a map of parameters from the body\n  :params       - a merged map of all types of parameter\n\n  Accepts the following options:      \n\n  :encoding - encoding to use for url-decoding. If not specified, uses\n              the request character encoding, or \"UTF-8\" if no request\n              character encoding is set.", RT.keyword(null, "line"), Integer.valueOf(48), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ring/middleware/params.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("ring.middleware.params__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
