package ring.util;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class time__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__3;
  
  public static final AFn const__4;
  
  public static final Var const__5;
  
  public static final AFn const__12;
  
  public static final AFn const__16;
  
  public static final Var const__17;
  
  public static final AFn const__24;
  
  public static final Var const__25;
  
  public static final AFn const__28;
  
  public static final Var const__29;
  
  public static final AFn const__32;
  
  public static final Var const__33;
  
  public static final AFn const__37;
  
  public static final Var const__38;
  
  public static final AFn const__41;
  
  public static void load() { LockingTransaction.runInTransaction((Callable)new time.fn__30333());
    const__5.setMeta((IPersistentMap)const__12);
    const__5.bindRoot(const__16);
    const__17.setMeta((IPersistentMap)const__24);
    const__17.bindRoot(new time.formatter());
    const__25.setMeta((IPersistentMap)const__28);
    const__25.bindRoot(new time.attempt_parse());
    const__29.setMeta((IPersistentMap)const__32);
    const__29.bindRoot(new time.trim_quotes());
    const__33.setMeta((IPersistentMap)const__37);
    const__33.bindRoot(new time.parse_date());
    const__38.setMeta((IPersistentMap)const__41);
    const__38.bindRoot(new time.format_date()); }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "ring.util.time")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Functions for dealing with time and dates in HTTP requests." }));
    const__3 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Functions for dealing with time and dates in HTTP requests." });
    const__4 = (AFn)Symbol.intern(null, "clojure.core");
    const__5 = (Var)RT.var("ring.util.time", "http-date-formats");
    const__12 = (AFn)RT.map(new Object[] { RT.keyword(null, "no-doc"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(7), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ring/util/time.clj" });
    const__16 = (AFn)RT.map(new Object[] { RT.keyword(null, "rfc1123"), "EEE, dd MMM yyyy HH:mm:ss zzz", RT.keyword(null, "rfc1036"), "EEEE, dd-MMM-yy HH:mm:ss zzz", RT.keyword(null, "asctime"), "EEE MMM d HH:mm:ss yyyy" });
    const__17 = (Var)RT.var("ring.util.time", "formatter");
    const__24 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "tag"), RT.classForName("java.text.SimpleDateFormat"), RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "format")) })), RT.keyword(null, "line"), Integer.valueOf(12), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "ring/util/time.clj" });
    const__25 = (Var)RT.var("ring.util.time", "attempt-parse");
    const__28 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "date"), Symbol.intern(null, "format")) })), RT.keyword(null, "line"), Integer.valueOf(16), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ring/util/time.clj" });
    const__29 = (Var)RT.var("ring.util.time", "trim-quotes");
    const__32 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })), RT.keyword(null, "line"), Integer.valueOf(21), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ring/util/time.clj" });
    const__33 = (Var)RT.var("ring.util.time", "parse-date");
    const__37 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "http-date")) })), RT.keyword(null, "doc"), "Attempt to parse a HTTP date. Returns nil if unsuccessful.", RT.keyword(null, "added"), "1.2", RT.keyword(null, "line"), Integer.valueOf(24), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "ring/util/time.clj" });
    const__38 = (Var)RT.var("ring.util.time", "format-date");
    const__41 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "date")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "java.util.Date") }))) })), RT.keyword(null, "doc"), "Format a date as RFC1123 format.", RT.keyword(null, "added"), "1.2", RT.keyword(null, "line"), Integer.valueOf(33), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "ring/util/time.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("ring.util.time__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
