package ring.util;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class mime_type__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__3;
  
  public static final AFn const__4;
  
  public static final Var const__5;
  
  public static final AFn const__11;
  
  public static final AFn const__12;
  
  public static final Var const__13;
  
  public static final AFn const__18;
  
  public static final Var const__19;
  
  public static final AFn const__22;
  
  public static void load() { LockingTransaction.runInTransaction((Callable)new mime_type.fn__30307());
    const__5.setMeta((IPersistentMap)const__11);
    const__5.bindRoot(const__12);
    const__13.setMeta((IPersistentMap)const__18);
    const__13.bindRoot(new mime_type.filename_ext());
    const__19.setMeta((IPersistentMap)const__22);
    const__19.bindRoot(new mime_type.ext_mime_type()); }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "ring.util.mime-type")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Utility functions for determining the mime-types files." }));
    const__3 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Utility functions for determining the mime-types files." });
    const__4 = (AFn)Symbol.intern(null, "clojure.core");
    const__5 = (Var)RT.var("ring.util.mime-type", "default-mime-types");
    const__11 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "A map of file extensions to mime-types.", RT.keyword(null, "line"), Integer.valueOf(5), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ring/util/mime_type.clj" });
    const__12 = (AFn)RT.map(new Object[] { 
          "mp4", "video/mp4", "iso", "application/x-iso9660-image", "json", "application/json", "ttf", "application/x-font-ttf", "gif", "image/gif", 
          "webm", "video/webm", "js", "text/javascript", "flv", "video/x-flv", "tiff", "image/tiff", "qt", "video/quicktime", 
          "ts", "video/mp2t", "xml", "text/xml", "mpe", "video/mpeg", "mjs", "text/javascript", "ogg", "audio/ogg", 
          "dmg", "application/octet-stream", "flac", "audio/flac", "crt", "application/x-x509-ca-cert", "pdf", "application/pdf", "dll", "application/octet-stream", 
          "xpm", "image/x-xpixmap", "cer", "application/pkix-cert", "class", "application/octet-stream", "tar", "application/x-tar", "deb", "application/x-deb", 
          "ps", "application/postscript", "xwd", "image/x-xwindowdump", "css", "text/css", "mp3", "audio/mpeg", "csv", "text/csv", 
          "svg", "image/svg+xml", "sgml", "text/sgml", "woff", "application/font-woff", "lzh", "application/octet-stream", "jpeg", "image/jpeg", 
          "eps", "application/postscript", "gz", "application/gzip", "exe", "application/octet-stream", "ogv", "video/ogg", "appcache", "text/cache-manifest", 
          "avi", "video/x-msvideo", "mpeg", "video/mpeg", "tif", "image/tiff", "sgm", "text/sgml", "wmv", "video/x-ms-wmv", 
          "xbm", "image/x-xbitmap", "ico", "image/x-icon", "pnm", "image/x-portable-anymap", "atom", "application/atom+xml", "xls", "application/vnd.ms-excel", 
          "htm", "text/html", "ppt", "application/vnd.ms-powerpoint", "swf", "application/x-shockwave-flash", "m4v", "video/mp4", "eot", "application/vnd.ms-fontobject", 
          "bin", "application/octet-stream", "crl", "application/pkix-crl", "ras", "image/x-cmu-raster", "rd", "text/plain", "jar", "application/java-archive", 
          "asc", "text/plain", "ai", "application/postscript", "mov", "video/quicktime", "mpd", "application/dash+xml", "m3u8", "application/x-mpegurl", 
          "oga", "audio/ogg", "7z", "application/x-7z-compressed", "bz2", "application/x-bzip", "png", "image/png", "txt", "text/plain", 
          "dart", "application/dart", "dvi", "application/x-dvi", "rar", "application/x-rar-compressed", "aac", "audio/aac", "pbm", "image/x-portable-bitmap", 
          "jpe", "image/jpeg", "ppm", "image/x-portable-pixmap", "html", "text/html", "pgm", "image/x-portable-graymap", "edn", "application/edn", 
          "etx", "text/x-setext", "jpg", "image/jpeg", "lha", "application/octet-stream", "rss", "application/rss+xml", "zip", "application/zip", 
          "doc", "application/msword", "rtf", "application/rtf", "rb", "text/plain", "dms", "application/octet-stream", "mpg", "video/mpeg", 
          "bmp", "image/bmp" });
    const__13 = (Var)RT.var("ring.util.mime-type", "filename-ext");
    const__18 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "filename")) })), RT.keyword(null, "doc"), "Returns the file extension of a filename or filepath.", RT.keyword(null, "line"), Integer.valueOf(99), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "ring/util/mime_type.clj" });
    const__19 = (Var)RT.var("ring.util.mime-type", "ext-mime-type");
    const__22 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "filename")), Tuple.create(Symbol.intern(null, "filename"), Symbol.intern(null, "mime-types")) })), RT.keyword(null, "doc"), "Get the mimetype from the filename extension. Takes an optional map of\n  extensions to mimetypes that overrides values in the default-mime-types map.", RT.keyword(null, "line"), Integer.valueOf(105), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "ring/util/mime_type.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("ring.util.mime_type__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
