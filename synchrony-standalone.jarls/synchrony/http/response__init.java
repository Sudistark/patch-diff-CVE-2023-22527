package synchrony.http;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class response__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__9;
  
  public static final AFn const__10;
  
  public static final Var const__11;
  
  public static final AFn const__15;
  
  public static final Var const__16;
  
  public static final AFn const__19;
  
  public static final Var const__20;
  
  public static final AFn const__23;
  
  public static final Var const__24;
  
  public static final AFn const__27;
  
  public static final Var const__28;
  
  public static final AFn const__31;
  
  public static final Var const__32;
  
  public static final AFn const__35;
  
  public static final Var const__36;
  
  public static final AFn const__39;
  
  public static final Var const__40;
  
  public static final AFn const__43;
  
  public static void load() { LockingTransaction.runInTransaction((Callable)new response.fn__31939());
    const__3.setMeta((IPersistentMap)const__9);
    const__3.bindRoot(const__10);
    const__11.setMeta((IPersistentMap)const__15);
    const__11.bindRoot(new response.internal_server_error_response());
    const__16.setMeta((IPersistentMap)const__19);
    const__16.bindRoot(new response.service_unavailable_response());
    const__20.setMeta((IPersistentMap)const__23);
    const__20.bindRoot(new response.not_found_response());
    const__24.setMeta((IPersistentMap)const__27);
    const__24.bindRoot(new response.json_response());
    const__28.setMeta((IPersistentMap)const__31);
    const__28.bindRoot(new response.text_response());
    const__32.setMeta((IPersistentMap)const__35);
    const__32.bindRoot(new response.bad_request_response());
    const__36.setMeta((IPersistentMap)const__39);
    const__36.bindRoot(new response.unauthorized_response());
    const__40.setMeta((IPersistentMap)const__43);
    const__40.bindRoot(new response.not_modified_response()); }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "synchrony.http.response");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("synchrony.http.response", "json-headers");
    const__9 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(4), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/http/response.clj" });
    const__10 = (AFn)RT.map(new Object[] { "content-type", "application/json;charset=utf-8" });
    const__11 = (Var)RT.var("synchrony.http.response", "internal-server-error-response");
    const__15 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "message"), Symbol.intern(null, "id")), RT.keyword(null, "as"), Symbol.intern(null, "opts") })) })), RT.keyword(null, "line"), Integer.valueOf(6), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/http/response.clj" });
    const__16 = (Var)RT.var("synchrony.http.response", "service-unavailable-response");
    const__19 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "message"), Symbol.intern(null, "id")), RT.keyword(null, "as"), Symbol.intern(null, "opts") })) })), RT.keyword(null, "line"), Integer.valueOf(11), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/http/response.clj" });
    const__20 = (Var)RT.var("synchrony.http.response", "not-found-response");
    const__23 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(16), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/http/response.clj" });
    const__24 = (Var)RT.var("synchrony.http.response", "json-response");
    const__27 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "data")) })), RT.keyword(null, "line"), Integer.valueOf(21), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/http/response.clj" });
    const__28 = (Var)RT.var("synchrony.http.response", "text-response");
    const__31 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "data")) })), RT.keyword(null, "line"), Integer.valueOf(26), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/http/response.clj" });
    const__32 = (Var)RT.var("synchrony.http.response", "bad-request-response");
    const__35 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "props")) })), RT.keyword(null, "line"), Integer.valueOf(31), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/http/response.clj" });
    const__36 = (Var)RT.var("synchrony.http.response", "unauthorized-response");
    const__39 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "props")) })), RT.keyword(null, "line"), Integer.valueOf(38), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/http/response.clj" });
    const__40 = (Var)RT.var("synchrony.http.response", "not-modified-response");
    const__43 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(47), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/http/response.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("synchrony.http.response__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
