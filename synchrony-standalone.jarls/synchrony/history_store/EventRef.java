package synchrony.history_store;

import clojure.lang.AFn;
import clojure.lang.APersistentMap;
import clojure.lang.Associative;
import clojure.lang.Counted;
import clojure.lang.IFn;
import clojure.lang.IHashEq;
import clojure.lang.IKeywordLookup;
import clojure.lang.ILookup;
import clojure.lang.ILookupThunk;
import clojure.lang.IMapEntry;
import clojure.lang.IObj;
import clojure.lang.IPersistentCollection;
import clojure.lang.IPersistentMap;
import clojure.lang.IPersistentVector;
import clojure.lang.IRecord;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.KeywordLookupSite;
import clojure.lang.MapEntry;
import clojure.lang.Numbers;
import clojure.lang.PersistentHashSet;
import clojure.lang.RT;
import clojure.lang.RecordIterator;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Util;
import clojure.lang.Var;
import java.io.Serializable;
import java.util.Collection;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

public final class EventRef implements Comparable, IRecord, IHashEq, IObj, ILookup, IKeywordLookup, IPersistentMap, Map, Serializable {
  public final Object partition;
  
  public final Object sequence;
  
  public final Object __meta;
  
  public final Object __extmap;
  
  int __hash;
  
  int __hasheq;
  
  public static final Var const__0 = (Var)RT.var("clojure.core", "set");
  
  public static final Var const__1 = (Var)RT.var("clojure.core", "vals");
  
  public static final Var const__2 = (Var)RT.var("clojure.core", "keys");
  
  public static final Var const__4 = (Var)RT.var("clojure.core", "some");
  
  public static final Var const__7 = (Var)RT.var("clojure.core", "contains?");
  
  public static final Keyword const__8 = (Keyword)RT.keyword(null, "partition");
  
  public static final Keyword const__9 = (Keyword)RT.keyword(null, "sequence");
  
  public static final AFn const__10 = (AFn)PersistentHashSet.create(new Object[] { RT.keyword(null, "partition"), RT.keyword(null, "sequence") });
  
  public static final Var const__11 = (Var)RT.var("clojure.core", "dissoc");
  
  public static final Var const__12 = (Var)RT.var("clojure.core", "with-meta");
  
  public static final Var const__13 = (Var)RT.var("clojure.core", "into");
  
  public static final Var const__14 = (Var)RT.var("clojure.core", "not-empty");
  
  public static final Var const__15 = (Var)RT.var("clojure.core", "identical?");
  
  public static final Var const__16 = (Var)RT.var("clojure.core", "assoc");
  
  public static final AFn const__17 = (AFn)Tuple.create(RT.keyword(null, "partition"), RT.keyword(null, "sequence"));
  
  public static final Var const__18 = (Var)RT.var("clojure.core", "seq");
  
  public static final Var const__19 = (Var)RT.var("clojure.core", "concat");
  
  public static final Var const__20 = (Var)RT.var("clojure.core", "not");
  
  public static final Var const__21 = (Var)RT.var("clojure.core", "class");
  
  public static final Var const__22 = (Var)RT.var("clojure.core", "imap-cons");
  
  public static final Var const__23 = (Var)RT.var("clojure.core", "str");
  
  public static final Object const__32 = Character.valueOf('.');
  
  static final KeywordLookupSite __site__0__;
  
  static ILookupThunk __thunk__0__ = __site__0__ = new KeywordLookupSite(RT.keyword(null, "partition"));
  
  static final KeywordLookupSite __site__1__;
  
  static ILookupThunk __thunk__1__ = __site__1__ = new KeywordLookupSite(RT.keyword(null, "sequence"));
  
  public EventRef(Object paramObject1, Object paramObject2, Object paramObject3, Object paramObject4, int paramInt1, int paramInt2) { this.partition = paramObject1;
    this.sequence = paramObject2;
    this.__meta = paramObject3;
    this.__extmap = paramObject4;
    this.__hash = paramInt1;
    this.__hasheq = paramInt2; }
  
  public EventRef(Object paramObject1, Object paramObject2) { this(paramObject1, paramObject2, null, null, 0, 0); }
  
  public EventRef(Object paramObject1, Object paramObject2, Object paramObject3, Object paramObject4) { this(paramObject1, paramObject2, paramObject3, paramObject4, 0, 0); }
  
  public static IPersistentVector getBasis() { return Tuple.create(Symbol.intern(null, "partition"), Symbol.intern(null, "sequence")); }
  
  public static EventRef create(IPersistentMap paramIPersistentMap) {
    Object object1 = paramIPersistentMap.valAt(Keyword.intern("partition"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("partition"));
    Object object2 = paramIPersistentMap.valAt(Keyword.intern("sequence"), null);
    paramIPersistentMap = paramIPersistentMap.without(Keyword.intern("sequence"));
    return new EventRef(object1, object2, null, RT.seqOrElse(paramIPersistentMap), 0, 0);
  }
  
  public int compareTo(Object to) {
    if (to != null) {
      if (to != Boolean.FALSE) {
        if (__thunk__0__ != __thunk__0__.get(to)) {
          to;
        } else {
          __thunk__0__.get(to);
        } 
        to = null;
        if (__thunk__1__ != __thunk__1__.get(to)) {
          to;
        } else {
          __thunk__1__.get(to);
        } 
      } 
    } else {
      to;
    } 
    return Util.compare(Tuple.create(this.partition, this.sequence), null);
  }
  
  public String toString() { this = null;
    return (String)((IFn)const__23.getRawRoot()).invoke(this.partition, const__32, this.sequence); }
  
  public int hasheq() {
    int hq__7768__auto__39185 = this.__hasheq, h__7769__auto__39184 = RT.intCast(0xFFFFFFFFB3C35126L ^ APersistentMap.mapHasheq((IPersistentMap)this));
    this.__hasheq = h__7769__auto__39184;
    return (hq__7768__auto__39185 == 0L) ? h__7769__auto__39184 : hq__7768__auto__39185;
  }
  
  public int hashCode() {
    int hash__7771__auto__39187 = this.__hash, h__7772__auto__39186 = APersistentMap.mapHash((IPersistentMap)this);
    this.__hash = h__7772__auto__39186;
    return (hash__7771__auto__39187 == 0L) ? h__7772__auto__39186 : hash__7771__auto__39187;
  }
  
  public boolean equals(Object G__39173) { G__39173 = null;
    return APersistentMap.mapEquals((IPersistentMap)this, G__39173); }
  
  public IPersistentMap meta() { return (IPersistentMap)this.__meta; }
  
  public IObj withMeta(IPersistentMap G__39173) { G__39173 = null;
    return (IObj)new EventRef(this.partition, this.sequence, G__39173, this.__extmap, this.__hash, this.__hasheq); }
  
  public Object valAt(Object k__7777__auto__) { k__7777__auto__ = null;
    return ((ILookup)this).valAt(k__7777__auto__, null); }
  
  public Object valAt(Object k__7779__auto__, Object else__7780__auto__) {
    Object G__39182 = k__7779__auto__;
    switch (Util.hash(G__39182) >> 0 & true) {
      case 0:
        if (G__39182 == const__8);
        break;
      case 1:
        if (G__39182 == const__9);
        break;
    } 
    k__7779__auto__ = null;
    else__7780__auto__ = null;
    this = null;
    return RT.get(this.__extmap, k__7779__auto__, else__7780__auto__);
  }
  
  public ILookupThunk getLookupThunk(Keyword k__7782__auto__) {
    Object gclass = ((IFn)const__21.getRawRoot()).invoke(this), G__39177 = k__7782__auto__ = null;
    switch (Util.hash(G__39177) >> 0 & true) {
      case 0:
        if (G__39177 == const__8)
          gclass = null; 
        break;
      case 1:
        if (G__39177 == const__9)
          gclass = null; 
        break;
    } 
    return (ILookupThunk)null;
  }
  
  public int count() { return RT.intCast(Numbers.add(2L, RT.count(this.__extmap))); }
  
  public IPersistentCollection empty() { throw (Throwable)new UnsupportedOperationException((String)((IFn)const__23.getRawRoot()).invoke("Can't create empty: ", "synchrony.history_store.EventRef")); }
  
  public IPersistentCollection cons(Object e__7786__auto__) { e__7786__auto__ = null;
    this = null;
    return (IPersistentCollection)((IFn)const__22).invoke(this, e__7786__auto__); }
  
  public boolean equiv(Object G__39173) {
    boolean or__5516__auto__39190 = Util.identical(this, G__39173);
    Object G__39173 = G__39173 = null;
    boolean and__5514__auto__39189 = Util.equiv(this.partition, ((EventRef)G__39173).partition), and__5514__auto__39188 = Util.equiv(this.sequence, ((EventRef)G__39173).sequence);
    G__39173 = null;
    return RT.booleanCast(or__5516__auto__39190 ? (or__5516__auto__39190 ? Boolean.TRUE : Boolean.FALSE) : (Util.identical(((IFn)const__21.getRawRoot()).invoke(this), ((IFn)const__21.getRawRoot()).invoke(G__39173)) ? (and__5514__auto__39189 ? (and__5514__auto__39188 ? (Util.equiv(this.__extmap, ((EventRef)G__39173).__extmap) ? Boolean.TRUE : Boolean.FALSE) : (and__5514__auto__39188 ? Boolean.TRUE : Boolean.FALSE)) : (and__5514__auto__39189 ? Boolean.TRUE : Boolean.FALSE)) : null));
  }
  
  public boolean containsKey(Object k__7789__auto__) { k__7789__auto__ = null;
    this = null;
    return ((Boolean)((IFn)const__20.getRawRoot()).invoke(Util.identical(this, ((ILookup)this).valAt(k__7789__auto__, this)) ? Boolean.TRUE : Boolean.FALSE)).booleanValue(); }
  
  public IMapEntry entryAt(Object k__7791__auto__) {
    Object v__7792__auto__39191 = ((ILookup)this).valAt(k__7791__auto__, this);
    k__7791__auto__ = null;
    v__7792__auto__39191 = null;
    this = null;
    return (IMapEntry)(Util.identical(this, v__7792__auto__39191) ? null : MapEntry.create(k__7791__auto__, v__7792__auto__39191));
  }
  
  public ISeq seq() { this = null;
    return (ISeq)((IFn)const__18.getRawRoot()).invoke(((IFn)const__19.getRawRoot()).invoke(Tuple.create(MapEntry.create(const__8, this.partition), MapEntry.create(const__9, this.sequence)), this.__extmap)); }
  
  public Iterator iterator() { return (Iterator)new RecordIterator((ILookup)this, (IPersistentVector)const__17, (Iterator)RT.iter(this.__extmap)); }
  
  public IPersistentMap assoc(Object k__7796__auto__, Object G__39173) {
    Object pred__39175 = const__15.getRawRoot(), expr__39176 = k__7796__auto__;
    if (((IFn)pred__39175).invoke(const__8, expr__39176) != null) {
      if (((IFn)pred__39175).invoke(const__8, expr__39176) != Boolean.FALSE)
        G__39173 = null; 
    } else {
      ((IFn)pred__39175).invoke(const__8, expr__39176);
    } 
    pred__39175 = null;
    expr__39176 = null;
    if (((IFn)pred__39175).invoke(const__9, expr__39176) != null) {
      if (((IFn)pred__39175).invoke(const__9, expr__39176) != Boolean.FALSE)
        G__39173 = null; 
    } else {
      ((IFn)pred__39175).invoke(const__9, expr__39176);
    } 
    k__7796__auto__ = null;
    G__39173 = null;
    return (IPersistentMap)new EventRef(this.partition, this.sequence, this.__meta, ((IFn)const__16.getRawRoot()).invoke(this.__extmap, k__7796__auto__, G__39173));
  }
  
  public IPersistentMap without(Object k__7798__auto__) { if (((IFn)const__7.getRawRoot()).invoke(const__10, k__7798__auto__) != null) {
      if (((IFn)const__7.getRawRoot()).invoke(const__10, k__7798__auto__) != Boolean.FALSE) {
        k__7798__auto__ = null;
        this = null;
      } 
    } else {
      ((IFn)const__7.getRawRoot()).invoke(const__10, k__7798__auto__);
    } 
    k__7798__auto__ = null;
    return (IPersistentMap)new EventRef(this.partition, this.sequence, this.__meta, ((IFn)const__14.getRawRoot()).invoke(((IFn)const__11.getRawRoot()).invoke(this.__extmap, k__7798__auto__))); }
  
  public int size() { this = null;
    return ((Counted)this).count(); }
  
  public boolean isEmpty() { return Util.equiv(0L, ((Counted)this).count()); }
  
  public boolean containsValue(Object v__7802__auto__) { v__7802__auto__ = null;
    return RT.booleanCast(((IFn)const__4.getRawRoot()).invoke(RT.set(new Object[] { v__7802__auto__ }, ), ((IFn)const__1.getRawRoot()).invoke(this))); }
  
  public Object get(Object k__7804__auto__) { k__7804__auto__ = null;
    return ((ILookup)this).valAt(k__7804__auto__); }
  
  public Object put(Object k__7806__auto__, Object v__7807__auto__) { throw (Throwable)new UnsupportedOperationException(); }
  
  public Object remove(Object k__7809__auto__) { throw (Throwable)new UnsupportedOperationException(); }
  
  public void putAll(Map m__7811__auto__) { throw (Throwable)new UnsupportedOperationException(); }
  
  public void clear() { throw (Throwable)new UnsupportedOperationException(); }
  
  public Set keySet() { this = null;
    return (Set)((IFn)const__0.getRawRoot()).invoke(((IFn)const__2.getRawRoot()).invoke(this)); }
  
  public Collection values() { this = null;
    return (Collection)((IFn)const__1.getRawRoot()).invoke(this); }
  
  public Set entrySet() { this = null;
    return (Set)((IFn)const__0.getRawRoot()).invoke(this); }
}
