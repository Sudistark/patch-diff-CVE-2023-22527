package synchrony.data.migration;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class qualify_parents__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__3;
  
  public static final AFn const__4;
  
  public static final Var const__5;
  
  public static final AFn const__14;
  
  public static final Var const__15;
  
  public static final AFn const__18;
  
  public static final Var const__19;
  
  public static final AFn const__22;
  
  public static final Var const__23;
  
  public static final AFn const__26;
  
  public static final Var const__27;
  
  public static final AFn const__30;
  
  public static final Var const__31;
  
  public static final AFn const__34;
  
  public static final Var const__35;
  
  public static final AFn const__38;
  
  public static void load() { LockingTransaction.runInTransaction((Callable)new qualify_parents.fn__44247());
    const__5.setMeta((IPersistentMap)const__14);
    const__5.bindRoot(new qualify_parents.get_parts_from_revs());
    const__15.setMeta((IPersistentMap)const__18);
    const__15.bindRoot(new qualify_parents.make_partition_by_rev());
    const__19.setMeta((IPersistentMap)const__22);
    const__19.bindRoot(new qualify_parents.needs_qualification_QMARK_());
    const__23.setMeta((IPersistentMap)const__26);
    const__23.bindRoot(new qualify_parents.get_partition_by_revs());
    const__27.setMeta((IPersistentMap)const__30);
    const__27.bindRoot(new qualify_parents.qualify_rev());
    const__31.setMeta((IPersistentMap)const__34);
    const__31.bindRoot(new qualify_parents.qualify_parents());
    const__35.setMeta((IPersistentMap)const__38);
    const__35.bindRoot(new qualify_parents.qualify_parents_in_part()); }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "synchrony.data.migration.qualify-parents")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "This namespace implements parent qualification, which is necessary\n  for older data stored in some of our environments where revision\n  parents are persisted without partition information." }));
    const__3 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "This namespace implements parent qualification, which is necessary\n  for older data stored in some of our environments where revision\n  parents are persisted without partition information." });
    const__4 = (AFn)Symbol.intern(null, "clojure.core");
    const__5 = (Var)RT.var("synchrony.data.migration.qualify-parents", "get-parts-from-revs");
    const__14 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "get-part!"), Symbol.intern(null, "entity-desc"), Symbol.intern(null, "revs"), Symbol.intern(null, "part-id")) })), RT.keyword(null, "line"), Integer.valueOf(11), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data/migration/qualify_parents.clj" });
    const__15 = (Var)RT.var("synchrony.data.migration.qualify-parents", "make-partition-by-rev");
    const__18 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "revisions")) })), RT.keyword(null, "line"), Integer.valueOf(32), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data/migration/qualify_parents.clj" });
    const__19 = (Var)RT.var("synchrony.data.migration.qualify-parents", "needs-qualification?");
    const__22 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "rev")) })), RT.keyword(null, "line"), Integer.valueOf(38), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data/migration/qualify_parents.clj" });
    const__23 = (Var)RT.var("synchrony.data.migration.qualify-parents", "get-partition-by-revs");
    const__26 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "get-part!"), Symbol.intern(null, "entity-desc"), Symbol.intern(null, "revisions"), Symbol.intern(null, "starting-part-id")) })), RT.keyword(null, "line"), Integer.valueOf(44), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data/migration/qualify_parents.clj" });
    const__27 = (Var)RT.var("synchrony.data.migration.qualify-parents", "qualify-rev");
    const__30 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "partition-by-rev"), Symbol.intern(null, "rev")) })), RT.keyword(null, "line"), Integer.valueOf(65), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data/migration/qualify_parents.clj" });
    const__31 = (Var)RT.var("synchrony.data.migration.qualify-parents", "qualify-parents");
    const__34 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "get-part!"), Symbol.intern(null, "entity-desc"), Symbol.intern(null, "revisions")) })), RT.keyword(null, "doc"), "The given revisions may begin and anywhere anywhere in a partition,\n  but must not have any gaps, because we will only fetch the partition\n  of the first revision an below.", RT.keyword(null, "line"), Integer.valueOf(72), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data/migration/qualify_parents.clj" });
    const__35 = (Var)RT.var("synchrony.data.migration.qualify-parents", "qualify-parents-in-part");
    const__38 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "get-part!"), Symbol.intern(null, "entity-desc"), Symbol.intern(null, "part")) })), RT.keyword(null, "line"), Integer.valueOf(86), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data/migration/qualify_parents.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("synchrony.data.migration.qualify_parents__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
