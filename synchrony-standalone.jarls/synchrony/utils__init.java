package synchrony;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class utils__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__12;
  
  public static final Var const__13;
  
  public static final AFn const__16;
  
  public static final Var const__17;
  
  public static final AFn const__20;
  
  public static final Var const__21;
  
  public static final AFn const__24;
  
  public static final Var const__25;
  
  public static final AFn const__28;
  
  public static void load() { LockingTransaction.runInTransaction((Callable)new utils.fn__41797());
    const__3.setMeta((IPersistentMap)const__12);
    const__3.bindRoot(new utils.slurp_bytes());
    const__13.setMeta((IPersistentMap)const__16);
    const__13.bindRoot(new utils.val_size());
    const__17.setMeta((IPersistentMap)const__20);
    const__17.bindRoot(new utils.tree_size());
    const__21.setMeta((IPersistentMap)const__24);
    const__21.bindRoot(new utils.reverse_hash());
    const__25.setMeta((IPersistentMap)const__28);
    const__25.bindRoot(new utils.largest_LT__EQ_()); }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "synchrony.utils");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("synchrony.utils", "slurp-bytes");
    const__12 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "x")) })), RT.keyword(null, "doc"), "Slurp the bytes from a slurpable thing", RT.keyword(null, "line"), Integer.valueOf(6), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/utils.clj" });
    const__13 = (Var)RT.var("synchrony.utils", "val-size");
    const__16 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "v")) })), RT.keyword(null, "doc"), "Approximates the size of the given value when serialized (non-recursive).", RT.keyword(null, "line"), Integer.valueOf(13), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/utils.clj" });
    const__17 = (Var)RT.var("synchrony.utils", "tree-size");
    const__20 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "v")) })), RT.keyword(null, "doc"), "Approximates the size of the given value recursively.", RT.keyword(null, "line"), Integer.valueOf(27), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/utils.clj" });
    const__21 = (Var)RT.var("synchrony.utils", "reverse-hash");
    const__24 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })), RT.keyword(null, "line"), Integer.valueOf(36), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/utils.clj" });
    const__25 = (Var)RT.var("synchrony.utils", "largest<=");
    const__28 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ss"), Symbol.intern(null, "n")) })), RT.keyword(null, "doc"), "Given a sorted-set returns the largest value less than or equal to n\n\n       (def s (sorted-set 0 1 2 4 8))\n       (largest<= s 0) -> 0\n       (largest<= s 2.3) -> 2\n       (largest<= s 5) -> 4\n       (largest<= s 9) -> 8", RT.keyword(null, "line"), Integer.valueOf(39), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/utils.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("synchrony.utils__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
