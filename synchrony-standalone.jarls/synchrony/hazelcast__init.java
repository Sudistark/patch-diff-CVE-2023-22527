package synchrony;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class hazelcast__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__12;
  
  public static final Var const__13;
  
  public static final AFn const__15;
  
  public static final AFn const__29;
  
  public static final Var const__30;
  
  public static final AFn const__33;
  
  public static final Var const__34;
  
  public static final AFn const__37;
  
  public static final Var const__38;
  
  public static final AFn const__41;
  
  public static final Var const__42;
  
  public static final AFn const__45;
  
  public static final Var const__46;
  
  public static final AFn const__49;
  
  public static final Var const__50;
  
  public static final AFn const__53;
  
  public static final Var const__54;
  
  public static final AFn const__57;
  
  public static final Var const__58;
  
  public static final AFn const__61;
  
  public static final Var const__62;
  
  public static final AFn const__65;
  
  public static final Var const__66;
  
  public static final AFn const__69;
  
  public static final Var const__70;
  
  public static final AFn const__73;
  
  public static final Var const__74;
  
  public static final AFn const__77;
  
  public static void load() { LockingTransaction.runInTransaction((Callable)new hazelcast.fn__40941());
    const__3.setMeta((IPersistentMap)const__12);
    const__3.bindRoot(new hazelcast.configure_network_BANG_());
    const__13.setMeta((IPersistentMap)const__15);
    const__13.bindRoot(const__29);
    const__30.setMeta((IPersistentMap)const__33);
    const__30.bindRoot(new hazelcast.add_interceptor());
    const__34.setMeta((IPersistentMap)const__37);
    const__34.bindRoot(new hazelcast.build_hz_config());
    const__38.setMeta((IPersistentMap)const__41);
    const__38.bindRoot(new hazelcast.new());
    const__42.setMeta((IPersistentMap)const__45);
    const__42.bindRoot(new hazelcast.shutdown());
    const__46.setMeta((IPersistentMap)const__49);
    const__46.bindRoot(new hazelcast.local_member_info());
    const__50.setMeta((IPersistentMap)const__53);
    const__50.bindRoot(new hazelcast.local_member_id());
    const__54.setMeta((IPersistentMap)const__57);
    const__54.bindRoot(new hazelcast.member_info());
    const__58.setMeta((IPersistentMap)const__61);
    const__58.bindRoot(new hazelcast.register_membership_listener());
    const__62.setMeta((IPersistentMap)const__65);
    const__62.bindRoot(new hazelcast.unregister_membership_listener());
    const__66.setMeta((IPersistentMap)const__69);
    const__66.bindRoot(new hazelcast.listen_to_membership_events());
    const__70.setMeta((IPersistentMap)const__73);
    const__70.bindRoot(new hazelcast.get_members());
    const__74.setMeta((IPersistentMap)const__77);
    const__74.bindRoot(new hazelcast.membership_ch()); }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "synchrony.hazelcast");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("synchrony.hazelcast", "configure-network!");
    const__12 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "hazelcast-config")) })), RT.keyword(null, "doc"), "Creates network configuration for hazelcast cluster", RT.keyword(null, "line"), Integer.valueOf(31), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/hazelcast.clj" });
    const__13 = (Var)RT.var("synchrony.hazelcast", "hazelcast-const-properties");
    const__15 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(85), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/hazelcast.clj" });
    const__29 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "hazelcast.operation.generic.thread.count"), Long.valueOf(2L), RT.keyword(null, "hazelcast.wait.seconds.before.join"), Long.valueOf(5L), RT.keyword(null, "hazelcast.mancenter.enabled"), Boolean.FALSE, RT.keyword(null, "hazelcast.operation.thread.count"), Long.valueOf(2L), RT.keyword(null, "hazelcast.rest.enabled"), Boolean.FALSE, 
          RT.keyword(null, "hazelcast.tcp.join.port.try.count"), Long.valueOf(3L), RT.keyword(null, "hazelcast.logging.type"), "log4j", RT.keyword(null, "hazelcast.io.thread.count"), Long.valueOf(1L), RT.keyword(null, "hazelcast.memcache.enabled"), Boolean.FALSE });
    const__30 = (Var)RT.var("synchrony.hazelcast", "add-interceptor");
    const__33 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "group-name"), Symbol.intern(null, "shared-secret"), Symbol.intern(null, "is-auth-enabled"), Symbol.intern(null, "config")) })), RT.keyword(null, "line"), Integer.valueOf(99), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/hazelcast.clj" });
    const__34 = (Var)RT.var("synchrony.hazelcast", "build-hz-config");
    const__37 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(104), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/hazelcast.clj" });
    const__38 = (Var)RT.var("synchrony.hazelcast", "new");
    const__41 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(121), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/hazelcast.clj" });
    const__42 = (Var)RT.var("synchrony.hazelcast", "shutdown");
    const__45 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "hz")) })), RT.keyword(null, "line"), Integer.valueOf(124), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/hazelcast.clj" });
    const__46 = (Var)RT.var("synchrony.hazelcast", "local-member-info");
    const__49 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "hz")) })), RT.keyword(null, "line"), Integer.valueOf(129), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/hazelcast.clj" });
    const__50 = (Var)RT.var("synchrony.hazelcast", "local-member-id");
    const__53 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "hz")) })), RT.keyword(null, "line"), Integer.valueOf(135), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/hazelcast.clj" });
    const__54 = (Var)RT.var("synchrony.hazelcast", "member-info");
    const__57 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "member")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Member") }))) })), RT.keyword(null, "line"), Integer.valueOf(138), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/hazelcast.clj" });
    const__58 = (Var)RT.var("synchrony.hazelcast", "register-membership-listener");
    const__61 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "hz"), Symbol.intern(null, "added"), Symbol.intern(null, "removed")) })), RT.keyword(null, "line"), Integer.valueOf(143), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/hazelcast.clj" });
    const__62 = (Var)RT.var("synchrony.hazelcast", "unregister-membership-listener");
    const__65 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "hz"), Symbol.intern(null, "hz-membership-id")) })), RT.keyword(null, "line"), Integer.valueOf(171), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/hazelcast.clj" });
    const__66 = (Var)RT.var("synchrony.hazelcast", "listen-to-membership-events");
    const__69 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "hz"), Symbol.intern(null, "ch")) })), RT.keyword(null, "line"), Integer.valueOf(175), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/hazelcast.clj" });
    const__70 = (Var)RT.var("synchrony.hazelcast", "get-members");
    const__73 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "hz")) })), RT.keyword(null, "line"), Integer.valueOf(183), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/hazelcast.clj" });
    const__74 = (Var)RT.var("synchrony.hazelcast", "membership-ch");
    const__77 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "hz"), Symbol.intern(null, "close-promise"), Symbol.intern(null, "transition-ch")) })), RT.keyword(null, "line"), Integer.valueOf(186), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/hazelcast.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("synchrony.hazelcast__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
