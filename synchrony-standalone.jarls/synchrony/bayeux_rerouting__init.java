package synchrony;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.Numbers;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class bayeux_rerouting__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__9;
  
  public static final Var const__18;
  
  public static final AFn const__21;
  
  public static final Var const__22;
  
  public static final Var const__23;
  
  public static final AFn const__25;
  
  public static final Object const__26;
  
  public static final Var const__27;
  
  public static final AFn const__29;
  
  public static final Object const__30;
  
  public static final Var const__31;
  
  public static final AFn const__35;
  
  public static final Var const__36;
  
  public static final AFn const__39;
  
  public static final Var const__40;
  
  public static final AFn const__43;
  
  public static final Var const__44;
  
  public static final AFn const__47;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new bayeux_rerouting.fn__55421());
    const__3.setMeta((IPersistentMap)const__9);
    const__3









      
      .bindRoot(Numbers.num(Numbers.add(System.currentTimeMillis() / 1000L, 
            
            Numbers.multiply(Numbers.multiply(Numbers.multiply(Numbers.multiply(60L, 60L), 24L), 356L), 100L))));
    const__18.setMeta((IPersistentMap)const__21);
    const__18.bindRoot(((IFn)const__22.getRawRoot()).invoke(new bayeux_rerouting.fn__55423()));
    const__23.setMeta((IPersistentMap)const__25);
    const__23.bindRoot(const__26);
    const__27.setMeta((IPersistentMap)const__29);
    const__27.bindRoot(const__30);
    const__31.setMeta((IPersistentMap)const__35);
    const__31.bindRoot(new bayeux_rerouting.adjust_timeouts());
    const__36.setMeta((IPersistentMap)const__39);
    const__36.bindRoot(new bayeux_rerouting.make_reroute_conn_opts());
    const__40.setMeta((IPersistentMap)const__43);
    const__40.bindRoot(new bayeux_rerouting.inject_requests());
    const__44.setMeta((IPersistentMap)const__47);
    const__44.bindRoot(new bayeux_rerouting.reroute_request());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "synchrony.bayeux-rerouting");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("synchrony.bayeux-rerouting", "no-expiry");
    const__9 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(11), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/bayeux_rerouting.clj" });
    const__18 = (Var)RT.var("synchrony.bayeux-rerouting", "make-insecure-jwt");
    const__21 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Creates a jwt for the given audience (service-url). The jwt\nis static which is useful for use with pubsub which shares resources\nbetween connection with the same jwt+topic pairs.", RT.keyword(null, "line"), Integer.valueOf(16), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/bayeux_rerouting.clj" });
    const__22 = (Var)RT.var("clojure.core", "memoize");
    const__23 = (Var)RT.var("synchrony.bayeux-rerouting", "request-timeout-ms");
    const__25 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(28), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/bayeux_rerouting.clj" });
    const__26 = Long.valueOf(4000L);
    const__27 = (Var)RT.var("synchrony.bayeux-rerouting", "keepalive-ms");
    const__29 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(29), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/bayeux_rerouting.clj" });
    const__30 = Long.valueOf(10000L);
    const__31 = (Var)RT.var("synchrony.bayeux-rerouting", "adjust-timeouts");
    const__35 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pubsub"), Symbol.intern(null, "max-connect-timeout-ms")) })), RT.keyword(null, "doc"), "Bayeux will respond to connect requests after\n  connect-timeout-ms (i.e. for long polling), which we have to add to\n  any normal request timeouts.", RT.keyword(null, "line"), Integer.valueOf(31), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/bayeux_rerouting.clj" });
    const__36 = (Var)RT.var("synchrony.bayeux-rerouting", "make-reroute-conn-opts");
    const__39 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "service-url"), Symbol.intern(null, "client-id")) })), RT.keyword(null, "line"), Integer.valueOf(40), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/bayeux_rerouting.clj" });
    const__40 = (Var)RT.var("synchrony.bayeux-rerouting", "inject-requests");
    const__43 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "requests-ch"), Symbol.intern(null, "close-ch"), Symbol.intern(null, "pubsub"), Symbol.intern(null, "service-url"), Symbol.intern(null, "client-id")) })), RT.keyword(null, "line"), Integer.valueOf(44), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/bayeux_rerouting.clj" });
    const__44 = (Var)RT.var("synchrony.bayeux-rerouting", "reroute-request");
    const__47 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pubsub"), Symbol.intern(null, "max-connect-timeout-ms"), Symbol.intern(null, "service-url"), Symbol.intern(null, "client-id"), Symbol.intern(null, "messages")) })), RT.keyword(null, "line"), Integer.valueOf(86), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/bayeux_rerouting.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("synchrony.bayeux_rerouting__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
