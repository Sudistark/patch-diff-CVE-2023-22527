package synchrony.operation;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class delta__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__11;
  
  public static final Var const__12;
  
  public static final AFn const__15;
  
  public static final Var const__16;
  
  public static final AFn const__19;
  
  public static final Var const__20;
  
  public static final AFn const__23;
  
  public static final Var const__24;
  
  public static final AFn const__27;
  
  public static final Var const__28;
  
  public static final AFn const__31;
  
  public static final Var const__32;
  
  public static final AFn const__35;
  
  public static final Var const__36;
  
  public static final AFn const__39;
  
  public static final Var const__40;
  
  public static final AFn const__43;
  
  public static final Var const__44;
  
  public static final AFn const__47;
  
  public static final Var const__48;
  
  public static final AFn const__51;
  
  public static final Var const__52;
  
  public static final AFn const__55;
  
  public static final Var const__56;
  
  public static final AFn const__59;
  
  public static final Var const__60;
  
  public static final AFn const__63;
  
  public static final Var const__64;
  
  public static final AFn const__67;
  
  public static final Var const__68;
  
  public static final AFn const__71;
  
  public static final Var const__72;
  
  public static final AFn const__75;
  
  public static final Var const__76;
  
  public static final AFn const__79;
  
  public static final Var const__80;
  
  public static final AFn const__83;
  
  public static final Var const__84;
  
  public static final AFn const__87;
  
  public static final Var const__88;
  
  public static final AFn const__91;
  
  public static final Var const__92;
  
  public static final AFn const__95;
  
  public static final Var const__96;
  
  public static final AFn const__99;
  
  public static final Var const__100;
  
  public static final AFn const__103;
  
  public static final Var const__104;
  
  public static final AFn const__107;
  
  public static final Var const__108;
  
  public static final AFn const__111;
  
  public static final Var const__112;
  
  public static final AFn const__115;
  
  public static final Var const__116;
  
  public static final AFn const__119;
  
  public static final Var const__120;
  
  public static final AFn const__123;
  
  public static final Var const__124;
  
  public static final AFn const__127;
  
  public static final Var const__128;
  
  public static final AFn const__131;
  
  public static final Var const__132;
  
  public static final AFn const__135;
  
  public static final Var const__136;
  
  public static final AFn const__139;
  
  public static final Var const__140;
  
  public static final AFn const__143;
  
  public static final Var const__144;
  
  public static final AFn const__147;
  
  public static final Var const__148;
  
  public static final AFn const__152;
  
  public static final Var const__153;
  
  public static final AFn const__156;
  
  public static final Var const__157;
  
  public static final AFn const__160;
  
  public static final Var const__161;
  
  public static final AFn const__164;
  
  public static final Var const__165;
  
  public static final AFn const__168;
  
  public static final Var const__169;
  
  public static final AFn const__172;
  
  public static final Var const__173;
  
  public static final AFn const__176;
  
  public static final Var const__177;
  
  public static final AFn const__180;
  
  public static final Var const__181;
  
  public static final AFn const__184;
  
  public static final Var const__185;
  
  public static final AFn const__188;
  
  public static final Var const__189;
  
  public static final AFn const__193;
  
  public static final Var const__194;
  
  public static final AFn const__197;
  
  public static final AFn const__200;
  
  public static final Var const__201;
  
  public static final AFn const__203;
  
  public static final Var const__204;
  
  public static final AFn const__207;
  
  public static final AFn const__210;
  
  public static final Var const__211;
  
  public static final AFn const__214;
  
  public static final Var const__215;
  
  public static final AFn const__218;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new delta.fn__35102());
    const__3.setMeta((IPersistentMap)const__11);
    const__3.bindRoot(new delta.reduce_op());
    const__12.setMeta((IPersistentMap)const__15);
    const__12.bindRoot(new delta.pre_reduce_delta());
    const__16.setMeta((IPersistentMap)const__19);
    const__16.bindRoot(new delta.one_or_none());
    const__20.setMeta((IPersistentMap)const__23);
    const__20.bindRoot(new delta.exactly_one());
    const__24.setMeta((IPersistentMap)const__27);
    const__24.bindRoot(new delta.update_map_op());
    const__28.setMeta((IPersistentMap)const__31);
    const__28.bindRoot(new delta.update_seq_op());
    const__32.setMeta((IPersistentMap)const__35);
    const__32.bindRoot(new delta.update_replace());
    const__36.setMeta((IPersistentMap)const__39);
    const__36.bindRoot(new delta.update_insert());
    const__40.setMeta((IPersistentMap)const__43);
    const__40.bindRoot(new delta.update_op());
    const__44.setMeta((IPersistentMap)const__47);
    const__44.bindRoot(new delta.postwalk_delta());
    const__48.setMeta((IPersistentMap)const__51);
    const__48.bindRoot(new delta.prewalk_delta());
    const__52.setMeta((IPersistentMap)const__55);
    const__52.bindRoot(new delta.post_mapcat_delta());
    const__56.setMeta((IPersistentMap)const__59);
    const__56.bindRoot(new delta.pre_mapcat_delta());
    const__60.setMeta((IPersistentMap)const__63);
    const__60.bindRoot(new delta.collect());
    const__64.setMeta((IPersistentMap)const__67);
    const__64.bindRoot(new delta.collect_multiple());
    const__68.setMeta((IPersistentMap)const__71);
    const__68.bindRoot(new delta.pre_prune());
    const__72.setMeta((IPersistentMap)const__75);
    const__72.bindRoot(new delta.has_moves_QMARK_());
    const__76.setMeta((IPersistentMap)const__79);
    const__76.bindRoot(new delta.flatten_with_markers());
    const__80.setMeta((IPersistentMap)const__83);
    const__80.bindRoot(new delta.up_next());
    const__84.setMeta((IPersistentMap)const__87);
    const__84.bindRoot(new delta.split_parents());
    const__88.setMeta((IPersistentMap)const__91);
    const__88.bindRoot(new delta.split_ancestor());
    const__92.setMeta((IPersistentMap)const__95);
    const__92.bindRoot(new delta.make_tree());
    const__96.setMeta((IPersistentMap)const__99);
    const__96.bindRoot(new delta.injected_QMARK_());
    const__100.setMeta((IPersistentMap)const__103);
    const__100.bindRoot(new delta.source_QMARK_());
    const__104.setMeta((IPersistentMap)const__107);
    const__104.bindRoot(new delta.injected_source_QMARK_());
    const__108.setMeta((IPersistentMap)const__111);
    const__108.bindRoot(new delta.not_injected_source_QMARK_());
    const__112.setMeta((IPersistentMap)const__115);
    const__112.bindRoot(new delta.add_injected_meta());
    const__116.setMeta((IPersistentMap)const__119);
    const__116.bindRoot(new delta.remove_injected_meta());
    const__120.setMeta((IPersistentMap)const__123);
    const__120.bindRoot(new delta.start_marker());
    const__124.setMeta((IPersistentMap)const__127);
    const__124.bindRoot(new delta.end_marker());
    const__128.setMeta((IPersistentMap)const__131);
    const__128.bindRoot(new delta.start_QMARK_());
    const__132.setMeta((IPersistentMap)const__135);
    const__132.bindRoot(new delta.end_QMARK_());
    const__136.setMeta((IPersistentMap)const__139);
    const__136.bindRoot(new delta.match_QMARK_());
    const__140.setMeta((IPersistentMap)const__143);
    const__140.bindRoot(new delta.flatten_with_default_markers());
    const__144.setMeta((IPersistentMap)const__147);
    const__144.bindRoot(new delta.make_tree_default_markers());
    const__148.setMeta((IPersistentMap)const__152);
    const__148.bindRoot(new delta.split_injected());
    const__153.setMeta((IPersistentMap)const__156);
    const__153.bindRoot(new delta.replace_as_insert_QMARK_());
    const__157.setMeta((IPersistentMap)const__160);
    const__157.bindRoot(new delta.maybe_replace());
    const__161.setMeta((IPersistentMap)const__164);
    const__161.bindRoot(new delta.maybe_replace_as_insert());
    const__165.setMeta((IPersistentMap)const__168);
    const__165.bindRoot(new delta.source_seq_QMARK_());
    const__169.setMeta((IPersistentMap)const__172);
    const__169.bindRoot(new delta.swap_moves());
    const__173.setMeta((IPersistentMap)const__176);
    const__173.bindRoot(new delta.split_range_op());
    const__177.setMeta((IPersistentMap)const__180);
    const__177.bindRoot(new delta.split_insert_vals());
    const__181.setMeta((IPersistentMap)const__184);
    const__181.bindRoot(new delta.renumber());
    const__185.setMeta((IPersistentMap)const__188);
    const__189.setMeta((IPersistentMap)const__193);
    const__189.bindRoot(new delta._PLUS_affect_length());
    const__194.setMeta((IPersistentMap)const__197);
    const__194.bindRoot(new delta.sum_affect_length());
    const__185.setMeta((IPersistentMap)const__200);
    const__185.bindRoot(new delta.affect_length());
    const__201.setMeta((IPersistentMap)const__203);
    const__204.setMeta((IPersistentMap)const__207);
    const__204.bindRoot(new delta._PLUS_composition_affect_length());
    const__201.setMeta((IPersistentMap)const__210);
    const__201.bindRoot(new delta.composition_affect_length());
    const__211.setMeta((IPersistentMap)const__214);
    const__211.bindRoot(new delta.wrap());
    const__215.setMeta((IPersistentMap)const__218);
    const__215.bindRoot(new delta.unwrap());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "synchrony.operation.delta");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("synchrony.operation.delta", "reduce-op");
    const__11 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "r"), Symbol.intern(null, "op")) })), RT.keyword(null, "line"), Integer.valueOf(7), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta.cljc" });
    const__12 = (Var)RT.var("synchrony.operation.delta", "pre-reduce-delta");
    const__15 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "r"), Symbol.intern(null, "delta")) })), RT.keyword(null, "line"), Integer.valueOf(22), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta.cljc" });
    const__16 = (Var)RT.var("synchrony.operation.delta", "one-or-none");
    const__19 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "r")) })), RT.keyword(null, "line"), Integer.valueOf(27), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta.cljc" });
    const__20 = (Var)RT.var("synchrony.operation.delta", "exactly-one");
    const__23 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "r")) })), RT.keyword(null, "line"), Integer.valueOf(32), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta.cljc" });
    const__24 = (Var)RT.var("synchrony.operation.delta", "update-map-op");
    const__27 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "op")) })), RT.keyword(null, "line"), Integer.valueOf(35), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta.cljc" });
    const__28 = (Var)RT.var("synchrony.operation.delta", "update-seq-op");
    const__31 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "xf"), Symbol.intern(null, "op")) })), RT.keyword(null, "line"), Integer.valueOf(43), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta.cljc" });
    const__32 = (Var)RT.var("synchrony.operation.delta", "update-replace");
    const__35 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "op")) })), RT.keyword(null, "line"), Integer.valueOf(47), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta.cljc" });
    const__36 = (Var)RT.var("synchrony.operation.delta", "update-insert");
    const__39 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "op")) })), RT.keyword(null, "line"), Integer.valueOf(52), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta.cljc" });
    const__40 = (Var)RT.var("synchrony.operation.delta", "update-op");
    const__43 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "op")) })), RT.keyword(null, "line"), Integer.valueOf(56), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta.cljc" });
    const__44 = (Var)RT.var("synchrony.operation.delta", "postwalk-delta");
    const__47 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "delta")) })), RT.keyword(null, "line"), Integer.valueOf(73), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta.cljc" });
    const__48 = (Var)RT.var("synchrony.operation.delta", "prewalk-delta");
    const__51 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "delta")) })), RT.keyword(null, "line"), Integer.valueOf(74), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta.cljc" });
    const__52 = (Var)RT.var("synchrony.operation.delta", "post-mapcat-delta");
    const__55 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "delta")) })), RT.keyword(null, "line"), Integer.valueOf(76), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta.cljc" });
    const__56 = (Var)RT.var("synchrony.operation.delta", "pre-mapcat-delta");
    const__59 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "f"), Symbol.intern(null, "delta")) })), RT.keyword(null, "line"), Integer.valueOf(97), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta.cljc" });
    const__60 = (Var)RT.var("synchrony.operation.delta", "collect");
    const__63 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pred?"), Symbol.intern(null, "delta")) })), RT.keyword(null, "line"), Integer.valueOf(119), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta.cljc" });
    const__64 = (Var)RT.var("synchrony.operation.delta", "collect-multiple");
    const__67 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pred?"), Symbol.intern(null, "delta")) })), RT.keyword(null, "line"), Integer.valueOf(124), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta.cljc" });
    const__68 = (Var)RT.var("synchrony.operation.delta", "pre-prune");
    const__71 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pred?"), Symbol.intern(null, "delta")) })), RT.keyword(null, "line"), Integer.valueOf(129), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta.cljc" });
    const__72 = (Var)RT.var("synchrony.operation.delta", "has-moves?");
    const__75 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "delta")) })), RT.keyword(null, "line"), Integer.valueOf(134), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta.cljc" });
    const__76 = (Var)RT.var("synchrony.operation.delta", "flatten-with-markers");
    const__79 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "flatten?"), Symbol.intern(null, "children"), Symbol.intern(null, "start-marker"), Symbol.intern(null, "end-marker"), Symbol.intern(null, "nodes")) })), RT.keyword(null, "line"), Integer.valueOf(141), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta.cljc" });
    const__80 = (Var)RT.var("synchrony.operation.delta", "up-next");
    const__83 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "make-node"), Symbol.intern(null, "stack"), Symbol.intern(null, "r")) })), RT.keyword(null, "line"), Integer.valueOf(153), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta.cljc" });
    const__84 = (Var)RT.var("synchrony.operation.delta", "split-parents");
    const__87 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "matches?"), Symbol.intern(null, "make-node"), Symbol.intern(null, "make-split-node"), Symbol.intern(null, "ctx"), Symbol.intern(null, "ancestor-end")) })), RT.keyword(null, "line"), Integer.valueOf(158), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta.cljc" });
    const__88 = (Var)RT.var("synchrony.operation.delta", "split-ancestor");
    const__91 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "matches?"), Symbol.intern(null, "make-node"), Symbol.intern(null, "make-split-node"), Symbol.intern(null, "ctx"), Symbol.intern(null, "ancestor-end")) })), RT.keyword(null, "line"), Integer.valueOf(175), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta.cljc" });
    const__92 = (Var)RT.var("synchrony.operation.delta", "make-tree");
    const__95 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "match?"), Symbol.intern(null, "start?"), Symbol.intern(null, "end?"), Symbol.intern(null, "split"), Symbol.intern(null, "make-node"), Symbol.intern(null, "nodes")) })), RT.keyword(null, "line"), Integer.valueOf(196), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta.cljc" });
    const__96 = (Var)RT.var("synchrony.operation.delta", "injected?");
    const__99 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "op")) })), RT.keyword(null, "line"), Integer.valueOf(211), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta.cljc" });
  }
  
  public static void __init1() {
    const__100 = (Var)RT.var("synchrony.operation.delta", "source?");
    const__103 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "op")) })), RT.keyword(null, "line"), Integer.valueOf(214), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta.cljc" });
    const__104 = (Var)RT.var("synchrony.operation.delta", "injected-source?");
    const__107 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "op")) })), RT.keyword(null, "line"), Integer.valueOf(217), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta.cljc" });
    const__108 = (Var)RT.var("synchrony.operation.delta", "not-injected-source?");
    const__111 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "op")) })), RT.keyword(null, "line"), Integer.valueOf(220), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta.cljc" });
    const__112 = (Var)RT.var("synchrony.operation.delta", "add-injected-meta");
    const__115 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "op")) })), RT.keyword(null, "line"), Integer.valueOf(223), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta.cljc" });
    const__116 = (Var)RT.var("synchrony.operation.delta", "remove-injected-meta");
    const__119 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "op")) })), RT.keyword(null, "line"), Integer.valueOf(226), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta.cljc" });
    const__120 = (Var)RT.var("synchrony.operation.delta", "start-marker");
    const__123 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "op")) })), RT.keyword(null, "line"), Integer.valueOf(229), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta.cljc" });
    const__124 = (Var)RT.var("synchrony.operation.delta", "end-marker");
    const__127 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "op")) })), RT.keyword(null, "line"), Integer.valueOf(230), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta.cljc" });
    const__128 = (Var)RT.var("synchrony.operation.delta", "start?");
    const__131 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "op")) })), RT.keyword(null, "line"), Integer.valueOf(231), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta.cljc" });
    const__132 = (Var)RT.var("synchrony.operation.delta", "end?");
    const__135 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "op")) })), RT.keyword(null, "line"), Integer.valueOf(232), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta.cljc" });
    const__136 = (Var)RT.var("synchrony.operation.delta", "match?");
    const__139 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "start"), Symbol.intern(null, "end")) })), RT.keyword(null, "line"), Integer.valueOf(234), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta.cljc" });
    const__140 = (Var)RT.var("synchrony.operation.delta", "flatten-with-default-markers");
    const__143 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s")) })), RT.keyword(null, "line"), Integer.valueOf(238), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta.cljc" });
    const__144 = (Var)RT.var("synchrony.operation.delta", "make-tree-default-markers");
    const__147 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "split-node"), Symbol.intern(null, "make-node"), Symbol.intern(null, "s")) })), RT.keyword(null, "line"), Integer.valueOf(241), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta.cljc" });
    const__148 = (Var)RT.var("synchrony.operation.delta", "split-injected");
    const__152 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "match?"), Symbol.intern(null, "make-node"), Symbol.intern(null, "make-split-node"), Symbol.intern(null, "ctx"), Symbol.intern(null, "end")) })), RT.keyword(null, "doc"), "Only split injected ancestor/parents", RT.keyword(null, "line"), Integer.valueOf(244), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta.cljc" });
    const__153 = (Var)RT.var("synchrony.operation.delta", "replace-as-insert?");
    const__156 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "replace-op")) })), RT.keyword(null, "line"), Integer.valueOf(251), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta.cljc" });
    const__157 = (Var)RT.var("synchrony.operation.delta", "maybe-replace");
    const__160 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "op")) })), RT.keyword(null, "line"), Integer.valueOf(254), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta.cljc" });
    const__161 = (Var)RT.var("synchrony.operation.delta", "maybe-replace-as-insert");
    const__164 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "replace-op")) })), RT.keyword(null, "line"), Integer.valueOf(259), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta.cljc" });
    const__165 = (Var)RT.var("synchrony.operation.delta", "source-seq?");
    const__168 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "op")) })), RT.keyword(null, "line"), Integer.valueOf(264), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta.cljc" });
    const__169 = (Var)RT.var("synchrony.operation.delta", "swap-moves");
    const__172 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "source-by-id"), Symbol.intern(null, "delta")) })), RT.keyword(null, "line"), Integer.valueOf(267), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta.cljc" });
    const__173 = (Var)RT.var("synchrony.operation.delta", "split-range-op");
    const__176 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Tuple.create(Symbol.intern(null, "b"), Symbol.intern(null, "a")), Symbol.intern(null, "op"), Symbol.intern(null, "op-length"), Symbol.intern(null, "off")) })), RT.keyword(null, "line"), Integer.valueOf(276), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta.cljc" });
    const__177 = (Var)RT.var("synchrony.operation.delta", "split-insert-vals");
    const__180 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Tuple.create(Symbol.intern(null, "b"), Symbol.intern(null, "a")), Symbol.intern(null, "op"), Symbol.intern(null, "op-length"), Symbol.intern(null, "off")) })), RT.keyword(null, "line"), Integer.valueOf(281), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta.cljc" });
    const__181 = (Var)RT.var("synchrony.operation.delta", "renumber");
    const__184 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "renumber-ctx"), Symbol.intern(null, "old-id")) })), RT.keyword(null, "line"), Integer.valueOf(288), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta.cljc" });
    const__185 = (Var)RT.var("synchrony.operation.delta", "affect-length");
    const__188 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(295), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta.cljc" });
    const__189 = (Var)RT.var("synchrony.operation.delta", "+affect-length");
    const__193 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "sum"), Symbol.intern(null, "op")) })), RT.keyword(null, "line"), Integer.valueOf(297), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta.cljc" });
    const__194 = (Var)RT.var("synchrony.operation.delta", "sum-affect-length");
    const__197 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "ops")) })), RT.keyword(null, "line"), Integer.valueOf(300), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta.cljc" });
  }
  
  public static void __init2() {
    const__200 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "op")) })), RT.keyword(null, "line"), Integer.valueOf(303), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta.cljc" });
    const__201 = (Var)RT.var("synchrony.operation.delta", "composition-affect-length");
    const__203 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(320), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta.cljc" });
    const__204 = (Var)RT.var("synchrony.operation.delta", "+composition-affect-length");
    const__207 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "sum"), Symbol.intern(null, "op")) })), RT.keyword(null, "line"), Integer.valueOf(322), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta.cljc" });
    const__210 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "op")) })), RT.keyword(null, "line"), Integer.valueOf(325), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta.cljc" });
    const__211 = (Var)RT.var("synchrony.operation.delta", "wrap");
    const__214 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "delta"), Symbol.intern(null, "dropped")) })), RT.keyword(null, "line"), Integer.valueOf(340), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta.cljc" });
    const__215 = (Var)RT.var("synchrony.operation.delta", "unwrap");
    const__218 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "delta"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "="), Long.valueOf(3L), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "count"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { RT.keyword(null, "seq"), Symbol.intern(null, "delta") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(348), RT.keyword(null, "column"), Integer.valueOf(22) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(348), RT.keyword(null, "column"), Integer.valueOf(15) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(348), RT.keyword(null, "column"), Integer.valueOf(10) }))) })) })), RT.keyword(null, "line"), Integer.valueOf(347), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta.cljc" });
  }
  
  static  {
    __init0();
    __init1();
    __init2();
    Compiler.pushNSandLoader(RT.classForName("synchrony.operation.delta__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
