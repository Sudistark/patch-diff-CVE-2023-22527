package synchrony.operation;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.PersistentVector;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;
import name.fraser.neil.plaintext.diff_match_patch;

public class diff__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__3;
  
  public static final AFn const__4;
  
  public static final Var const__5;
  
  public static final AFn const__13;
  
  public static final Var const__14;
  
  public static final AFn const__17;
  
  public static final Var const__18;
  
  public static final AFn const__21;
  
  public static final Var const__22;
  
  public static final AFn const__25;
  
  public static final Var const__26;
  
  public static final AFn const__28;
  
  public static final Var const__29;
  
  public static final Var const__30;
  
  public static final AFn const__32;
  
  public static final Var const__33;
  
  public static final Var const__34;
  
  public static final AFn const__39;
  
  public static final Var const__40;
  
  public static final AFn const__43;
  
  public static final Var const__44;
  
  public static final AFn const__47;
  
  public static final Var const__48;
  
  public static final AFn const__51;
  
  public static final Var const__52;
  
  public static final AFn const__55;
  
  public static final Var const__56;
  
  public static final AFn const__59;
  
  public static final Var const__60;
  
  public static final AFn const__63;
  
  public static final Var const__64;
  
  public static final AFn const__67;
  
  public static final Var const__68;
  
  public static final AFn const__71;
  
  public static final Var const__72;
  
  public static final AFn const__75;
  
  public static final Var const__76;
  
  public static final AFn const__79;
  
  public static final Var const__80;
  
  public static final AFn const__83;
  
  public static final Var const__84;
  
  public static final AFn const__87;
  
  public static final Var const__88;
  
  public static final AFn const__91;
  
  public static final Var const__92;
  
  public static final AFn const__95;
  
  public static final Var const__96;
  
  public static final AFn const__99;
  
  public static final Var const__100;
  
  public static final AFn const__103;
  
  public static final Var const__104;
  
  public static final AFn const__107;
  
  public static final Var const__108;
  
  public static final AFn const__111;
  
  public static final Var const__112;
  
  public static final AFn const__115;
  
  public static final Var const__116;
  
  public static final AFn const__119;
  
  public static final Var const__120;
  
  public static final AFn const__123;
  
  public static final Var const__124;
  
  public static final AFn const__127;
  
  public static final Var const__128;
  
  public static final AFn const__131;
  
  public static final Var const__132;
  
  public static final AFn const__135;
  
  public static final Var const__136;
  
  public static final AFn const__139;
  
  public static final Var const__140;
  
  public static final AFn const__143;
  
  public static final Var const__144;
  
  public static final AFn const__147;
  
  public static final Var const__148;
  
  public static final AFn const__151;
  
  public static final Var const__152;
  
  public static final AFn const__155;
  
  public static final Var const__156;
  
  public static final AFn const__159;
  
  public static final Var const__160;
  
  public static final AFn const__163;
  
  public static final Var const__164;
  
  public static final AFn const__167;
  
  public static final Var const__168;
  
  public static final AFn const__171;
  
  public static final Var const__172;
  
  public static final AFn const__175;
  
  public static final Var const__176;
  
  public static final AFn const__179;
  
  public static final Var const__180;
  
  public static final AFn const__183;
  
  public static final Var const__184;
  
  public static final AFn const__187;
  
  public static final Var const__188;
  
  public static final AFn const__191;
  
  public static final Var const__192;
  
  public static final AFn const__194;
  
  public static final Var const__195;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new diff.fn__41222());
    const__5.setMeta((IPersistentMap)const__13);
    const__5.bindRoot(new diff.descended_into_node());
    const__14.setMeta((IPersistentMap)const__17);
    const__14.bindRoot(new diff.next_nodes());
    const__18.setMeta((IPersistentMap)const__21);
    const__18.bindRoot(new diff.replace_next_nodes());
    const__22.setMeta((IPersistentMap)const__25);
    const__22.bindRoot(new diff.remove_next_nodes());
    const__26.setMeta((IPersistentMap)const__28);
    const__26.bindRoot(const__29.getRawRoot());
    const__30.setMeta((IPersistentMap)const__32);
    const__30

























      
      .bindRoot(((IFn)const__33.getRawRoot()).invoke(PersistentVector.EMPTY, null));
    const__34.setMeta((IPersistentMap)const__39);
    const__34.bindRoot(new diff_match_patch());
    const__40.setMeta((IPersistentMap)const__43);
    const__40.bindRoot(new diff.dmp_text());
    const__44.setMeta((IPersistentMap)const__47);
    const__44.bindRoot(new diff.dmp_operation());
    const__48.setMeta((IPersistentMap)const__51);
    const__48.bindRoot(new diff.diff_text());
    const__52.setMeta((IPersistentMap)const__55);
    const__56.setMeta((IPersistentMap)const__59);
    const__56.bindRoot(new diff.__GT_retain());
    const__60.setMeta((IPersistentMap)const__63);
    const__60.bindRoot(new diff.__GT_insert());
    const__64.setMeta((IPersistentMap)const__67);
    const__64.bindRoot(new diff.__GT_delete());
    const__68.setMeta((IPersistentMap)const__71);
    const__68.bindRoot(new diff.__GT_source());
    const__72.setMeta((IPersistentMap)const__75);
    const__72.bindRoot(new diff.__GT_target());
    const__76.setMeta((IPersistentMap)const__79);
    const__76.bindRoot(new diff.struct_node_QMARK_());
    const__80.setMeta((IPersistentMap)const__83);
    const__80.bindRoot(new diff.text_node_QMARK_());
    const__84.setMeta((IPersistentMap)const__87);
    const__84.bindRoot(new diff.edit_type());
    const__88.setMeta((IPersistentMap)const__91);
    const__88.bindRoot(new diff.edit_retain_length());
    const__92.setMeta((IPersistentMap)const__95);
    const__92.bindRoot(new diff.edit_retain_insert_QMARK_());
    const__96.setMeta((IPersistentMap)const__99);
    const__96.bindRoot(new diff.edit_retain_delete_QMARK_());
    const__100.setMeta((IPersistentMap)const__103);
    const__100.bindRoot(new diff.edit_retain_QMARK_());
    const__104.setMeta((IPersistentMap)const__107);
    const__104.bindRoot(new diff.edits_from_diffs());
    const__108.setMeta((IPersistentMap)const__111);
    const__108.bindRoot(new diff.make_edit_tree());
    const__112.setMeta((IPersistentMap)const__115);
    const__112.bindRoot(new diff.wrap_rest());
    const__116.setMeta((IPersistentMap)const__119);
    const__116.bindRoot(new diff.ascend_moves());
    const__120.setMeta((IPersistentMap)const__123);
    const__120.bindRoot(new diff.ascend_shift_split());
    const__124.setMeta((IPersistentMap)const__127);
    const__124.bindRoot(new diff.wrap_shift());
    const__128.setMeta((IPersistentMap)const__131);
    const__128.bindRoot(new diff.wrap_greedily_down());
    const__132.setMeta((IPersistentMap)const__135);
    const__132.bindRoot(new diff.in_sequence_QMARK_());
    const__136.setMeta((IPersistentMap)const__139);
    const__136.bindRoot(new diff.reorderable_QMARK_());
    const__140.setMeta((IPersistentMap)const__143);
    const__140.bindRoot(new diff.match_edits());
    const__144.setMeta((IPersistentMap)const__147);
    const__144.bindRoot(new diff.match_reordered());
    const__148.setMeta((IPersistentMap)const__151);
    const__148.bindRoot(new diff.reorder_edits());
    const__152.setMeta((IPersistentMap)const__155);
    const__152.bindRoot(new diff.match_edit_trees());
    const__156.setMeta((IPersistentMap)const__159);
    const__156.bindRoot(new diff.replace_move());
    const__160.setMeta((IPersistentMap)const__163);
    const__160.bindRoot(new diff.diff_map());
    const__164.setMeta((IPersistentMap)const__167);
    const__164.bindRoot(new diff.retain_from_edit());
    const__168.setMeta((IPersistentMap)const__171);
    const__168.bindRoot(new diff.delete_from_edit());
    const__172.setMeta((IPersistentMap)const__175);
    const__172.bindRoot(new diff.insert_from_edit());
    const__176.setMeta((IPersistentMap)const__179);
    const__176.bindRoot(new diff.replace_edits());
    const__180.setMeta((IPersistentMap)const__183);
    const__180.bindRoot(new diff.zip_edit_trees());
    const__184.setMeta((IPersistentMap)const__187);
    const__184.bindRoot(new diff.make_struct());
    const__188.setMeta((IPersistentMap)const__191);
    const__188.bindRoot(new diff.diff_trees());
    const__192.setMeta((IPersistentMap)const__194);
    const__192.bindRoot(const__195.getRawRoot());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "synchrony.operation.diff")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "A Tree Diff Algorithm Employing Moves to Account for Hirarchical Changes\n\n  Please refer to diff.md in the same folder for a description of the\n  core algorithm." }));
    const__3 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "A Tree Diff Algorithm Employing Moves to Account for Hirarchical Changes\n\n  Please refer to diff.md in the same folder for a description of the\n  core algorithm." });
    const__4 = (AFn)Symbol.intern(null, "clojure.core");
    const__5 = (Var)RT.var("synchrony.operation.diff", "descended-into-node");
    const__13 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "z")) })), RT.keyword(null, "line"), Integer.valueOf(21), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/diff.cljc" });
    const__14 = (Var)RT.var("synchrony.operation.diff", "next-nodes");
    const__17 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "z")) })), RT.keyword(null, "line"), Integer.valueOf(22), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/diff.cljc" });
    const__18 = (Var)RT.var("synchrony.operation.diff", "replace-next-nodes");
    const__21 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "z"), Symbol.intern(null, "nodes")) })), RT.keyword(null, "line"), Integer.valueOf(23), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/diff.cljc" });
    const__22 = (Var)RT.var("synchrony.operation.diff", "remove-next-nodes");
    const__25 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "z")) })), RT.keyword(null, "line"), Integer.valueOf(25), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/diff.cljc" });
    const__26 = (Var)RT.var("synchrony.operation.diff", "with-root");
    const__28 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(27), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/diff.cljc" });
    const__29 = (Var)RT.var("ginga.zip", "zipper");
    const__30 = (Var)RT.var("synchrony.operation.diff", "empty-zipper");
    const__32 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(28), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/diff.cljc" });
    const__33 = (Var)RT.var("ginga.zip", "from-seqable");
    const__34 = (Var)RT.var("synchrony.operation.diff", "dmp");
    const__39 = (AFn)RT.map(new Object[] { RT.keyword(null, "tag"), RT.classForName("name.fraser.neil.plaintext.diff_match_patch"), RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(30), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/diff.cljc" });
    const__40 = (Var)RT.var("synchrony.operation.diff", "dmp-text");
    const__43 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "diff")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "diff_match_patch$Diff") }))) })), RT.keyword(null, "line"), Integer.valueOf(37), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/diff.cljc" });
    const__44 = (Var)RT.var("synchrony.operation.diff", "dmp-operation");
    const__47 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "diff")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "diff_match_patch$Diff") }))) })), RT.keyword(null, "line"), Integer.valueOf(42), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/diff.cljc" });
    const__48 = (Var)RT.var("synchrony.operation.diff", "diff-text");
    const__51 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "before"), Symbol.intern(null, "after")) })), RT.keyword(null, "line"), Integer.valueOf(49), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/diff.cljc" });
    const__52 = (Var)RT.var("synchrony.operation.diff", "->edit");
    const__55 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(60), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/diff.cljc" });
    const__56 = (Var)RT.var("synchrony.operation.diff", "->retain");
    const__59 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "node-before"), Symbol.intern(null, "node-after"), Symbol.intern(null, "off-before"), Symbol.intern(null, "off-after"), Symbol.intern(null, "length"), Symbol.intern(null, "children")) })), RT.keyword(null, "line"), Integer.valueOf(74), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/diff.cljc" });
    const__60 = (Var)RT.var("synchrony.operation.diff", "->insert");
    const__63 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "node-after"), Symbol.intern(null, "off-after"), Symbol.intern(null, "length"), Symbol.intern(null, "children")) })), RT.keyword(null, "line"), Integer.valueOf(77), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/diff.cljc" });
    const__64 = (Var)RT.var("synchrony.operation.diff", "->delete");
    const__67 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "node-before"), Symbol.intern(null, "off-before"), Symbol.intern(null, "length"), Symbol.intern(null, "children")) })), RT.keyword(null, "line"), Integer.valueOf(80), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/diff.cljc" });
    const__68 = (Var)RT.var("synchrony.operation.diff", "->source");
    const__71 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "id"), Symbol.intern(null, "children")) })), RT.keyword(null, "line"), Integer.valueOf(83), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/diff.cljc" });
    const__72 = (Var)RT.var("synchrony.operation.diff", "->target");
    const__75 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "id")) })), RT.keyword(null, "line"), Integer.valueOf(86), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/diff.cljc" });
    const__76 = (Var)RT.var("synchrony.operation.diff", "struct-node?");
    const__79 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "node")) })), RT.keyword(null, "line"), Integer.valueOf(89), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/diff.cljc" });
    const__80 = (Var)RT.var("synchrony.operation.diff", "text-node?");
    const__83 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "node")) })), RT.keyword(null, "line"), Integer.valueOf(92), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/diff.cljc" });
    const__84 = (Var)RT.var("synchrony.operation.diff", "edit-type");
    const__87 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "edit")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "edit") }))) })), RT.keyword(null, "line"), Integer.valueOf(95), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/diff.cljc" });
    const__88 = (Var)RT.var("synchrony.operation.diff", "edit-retain-length");
    const__91 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "edit")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "edit") }))) })), RT.keyword(null, "line"), Integer.valueOf(101), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/diff.cljc" });
    const__92 = (Var)RT.var("synchrony.operation.diff", "edit-retain-insert?");
    const__95 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "edit")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "edit") }))) })), RT.keyword(null, "line"), Integer.valueOf(106), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/diff.cljc" });
    const__96 = (Var)RT.var("synchrony.operation.diff", "edit-retain-delete?");
    const__99 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "edit")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "edit") }))) })), RT.keyword(null, "line"), Integer.valueOf(109), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/diff.cljc" });
  }
  
  public static void __init1() {
    const__100 = (Var)RT.var("synchrony.operation.diff", "edit-retain?");
    const__103 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "edit")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "edit") }))) })), RT.keyword(null, "line"), Integer.valueOf(112), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/diff.cljc" });
    const__104 = (Var)RT.var("synchrony.operation.diff", "edits-from-diffs");
    const__107 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "node-length"), Symbol.intern(null, "nodes-before"), Symbol.intern(null, "nodes-after"), Symbol.intern(null, "diffs")) })), RT.keyword(null, "line"), Integer.valueOf(115), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/diff.cljc" });
    const__108 = (Var)RT.var("synchrony.operation.diff", "make-edit-tree");
    const__111 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "tree"), Symbol.intern(null, "struct-edits"), Symbol.intern(null, "text-edits")) })), RT.keyword(null, "line"), Integer.valueOf(183), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/diff.cljc" });
    const__112 = (Var)RT.var("synchrony.operation.diff", "wrap-rest");
    const__115 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "shift-type"), Symbol.intern(null, "edits-c"), Symbol.intern(null, "move-id"), Symbol.intern(null, "split-id")) })), RT.keyword(null, "line"), Integer.valueOf(217), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/diff.cljc" });
    const__116 = (Var)RT.var("synchrony.operation.diff", "ascend-moves");
    const__119 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "bedits-c"), Symbol.intern(null, "aedits-c"), Symbol.intern(null, "moves"), Symbol.intern(null, "move-id"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "="), RT.keyword(null, "source"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, ".-operation"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "descended-into-node"), Symbol.intern(null, "bedits-c") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(236), RT.keyword(null, "column"), Integer.valueOf(26) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(236), RT.keyword(null, "column"), Integer.valueOf(13) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, ".-operation"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "descended-into-node"), Symbol.intern(null, "aedits-c") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(237), RT.keyword(null, "column"), Integer.valueOf(26) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(237), RT.keyword(null, "column"), Integer.valueOf(13) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(235), RT.keyword(null, "column"), Integer.valueOf(10) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "="), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("z", "parent-node"), Symbol.intern(null, "bedits-c") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(238), RT.keyword(null, "column"), Integer.valueOf(13) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("z", "parent-node"), Symbol.intern(null, "aedits-c") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(239), RT.keyword(null, "column"), Integer.valueOf(13) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(238), RT.keyword(null, "column"), Integer.valueOf(10) }))) })) })), RT.keyword(null, "line"), Integer.valueOf(234), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/diff.cljc" });
    const__120 = (Var)RT.var("synchrony.operation.diff", "ascend-shift-split");
    const__123 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "shift-type"), Symbol.intern(null, "mark-c"), Symbol.intern(null, "shift-c"), Symbol.intern(null, "moves"), Symbol.intern(null, "move-id"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "="), RT.keyword(null, "source"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, ".-operation"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "descended-into-node"), Symbol.intern(null, "mark-c") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(249), RT.keyword(null, "column"), Integer.valueOf(26) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(249), RT.keyword(null, "column"), Integer.valueOf(13) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, ".-operation"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "descended-into-node"), Symbol.intern(null, "shift-c") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(250), RT.keyword(null, "column"), Integer.valueOf(26) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(250), RT.keyword(null, "column"), Integer.valueOf(13) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(248), RT.keyword(null, "column"), Integer.valueOf(10) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "="), ((IObj)PersistentList.create(Arrays.asList(new Object[] { RT.keyword(null, "id"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "descended-into-node"), Symbol.intern(null, "mark-c") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(251), RT.keyword(null, "column"), Integer.valueOf(18) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(251), RT.keyword(null, "column"), Integer.valueOf(13) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { RT.keyword(null, "id"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "descended-into-node"), Symbol.intern(null, "shift-c") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(252), RT.keyword(null, "column"), Integer.valueOf(18) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(252), RT.keyword(null, "column"), Integer.valueOf(13) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(251), RT.keyword(null, "column"), Integer.valueOf(10) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "="), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("z", "parent-node"), Symbol.intern(null, "mark-c") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(253), RT.keyword(null, "column"), Integer.valueOf(13) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("z", "parent-node"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "remove-next-nodes"), Symbol.intern(null, "shift-c") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(254), RT.keyword(null, "column"), Integer.valueOf(28) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(254), RT.keyword(null, "column"), Integer.valueOf(13) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(253), RT.keyword(null, "column"), Integer.valueOf(10) }))) })) })), RT.keyword(null, "line"), Integer.valueOf(247), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/diff.cljc" });
    const__124 = (Var)RT.var("synchrony.operation.diff", "wrap-shift");
    const__127 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "mark-type"), Symbol.intern(null, "shift-type"), Symbol.intern(null, "mark-c"), Symbol.intern(null, "shift-c"), Symbol.intern(null, "moves"), Symbol.intern(null, "move-id")) })), RT.keyword(null, "line"), Integer.valueOf(275), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/diff.cljc" });
    const__128 = (Var)RT.var("synchrony.operation.diff", "wrap-greedily-down");
    const__131 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "bedits-c"), Symbol.intern(null, "anode")) })), RT.keyword(null, "line"), Integer.valueOf(295), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/diff.cljc" });
    const__132 = (Var)RT.var("synchrony.operation.diff", "in-sequence?");
    const__135 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "bedit")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "edit") })), ((IObj)Symbol.intern(null, "aedit")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "edit") }))) })), RT.keyword(null, "line"), Integer.valueOf(312), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/diff.cljc" });
    const__136 = (Var)RT.var("synchrony.operation.diff", "reorderable?");
    const__139 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "edit")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "edit") }))) })), RT.keyword(null, "line"), Integer.valueOf(318), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/diff.cljc" });
    const__140 = (Var)RT.var("synchrony.operation.diff", "match-edits");
    const__143 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "next-edits"), Symbol.intern(null, "move-edits"), Symbol.intern(null, "length")) })), RT.keyword(null, "line"), Integer.valueOf(321), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/diff.cljc" });
    const__144 = (Var)RT.var("synchrony.operation.diff", "match-reordered");
    const__147 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "bedits-c"), Symbol.intern(null, "aedits-c"), Symbol.intern(null, "aq"), Symbol.intern(null, "moves"), Symbol.intern(null, "move-id")) })), RT.keyword(null, "line"), Integer.valueOf(358), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/diff.cljc" });
    const__148 = (Var)RT.var("synchrony.operation.diff", "reorder-edits");
    const__151 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "mark-type"), Symbol.intern(null, "shift-type"), Symbol.intern(null, "bedits-c"), Symbol.intern(null, "aedits-c"), Symbol.intern(null, "bq"), Symbol.intern(null, "move-id")) })), RT.keyword(null, "line"), Integer.valueOf(388), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/diff.cljc" });
    const__152 = (Var)RT.var("synchrony.operation.diff", "match-edit-trees");
    const__155 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "bedits-c"), Symbol.intern(null, "aedits-c"), Symbol.intern(null, "bq"), Symbol.intern(null, "aq"), Symbol.intern(null, "moves"), Symbol.intern(null, "move-id")) })), RT.keyword(null, "line"), Integer.valueOf(410), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/diff.cljc" });
    const__156 = (Var)RT.var("synchrony.operation.diff", "replace-move");
    const__159 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "rec"), ((IObj)Symbol.intern(null, "edit")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "edit") })), Symbol.intern(null, "moves-by-id")) })), RT.keyword(null, "line"), Integer.valueOf(504), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/diff.cljc" });
    const__160 = (Var)RT.var("synchrony.operation.diff", "diff-map");
    const__163 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "before"), Symbol.intern(null, "after")) })), RT.keyword(null, "line"), Integer.valueOf(517), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/diff.cljc" });
    const__164 = (Var)RT.var("synchrony.operation.diff", "retain-from-edit");
    const__167 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "rec"), ((IObj)Symbol.intern(null, "edit")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "edit") }))) })), RT.keyword(null, "line"), Integer.valueOf(538), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/diff.cljc" });
    const__168 = (Var)RT.var("synchrony.operation.diff", "delete-from-edit");
    const__171 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "rec"), ((IObj)Symbol.intern(null, "edit")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "edit") }))) })), RT.keyword(null, "line"), Integer.valueOf(565), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/diff.cljc" });
    const__172 = (Var)RT.var("synchrony.operation.diff", "insert-from-edit");
    const__175 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "rec"), ((IObj)Symbol.intern(null, "edit")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "edit") }))) })), RT.keyword(null, "line"), Integer.valueOf(571), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/diff.cljc" });
    const__176 = (Var)RT.var("synchrony.operation.diff", "replace-edits");
    const__179 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "tree"), Symbol.intern(null, "moves-by-id")) })), RT.keyword(null, "line"), Integer.valueOf(599), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/diff.cljc" });
    const__180 = (Var)RT.var("synchrony.operation.diff", "zip-edit-trees");
    const__183 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "btree"), Symbol.intern(null, "atree")) })), RT.keyword(null, "line"), Integer.valueOf(609), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/diff.cljc" });
    const__184 = (Var)RT.var("synchrony.operation.diff", "make-struct");
    const__187 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "nodes"), Symbol.intern(null, "char-map"), Symbol.intern(null, "char-cnt")) })), RT.keyword(null, "line"), Integer.valueOf(623), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/diff.cljc" });
    const__188 = (Var)RT.var("synchrony.operation.diff", "diff-trees");
    const__191 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "tree-before"), Symbol.intern(null, "tree-after"), Symbol.intern(null, "retain-root"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(Symbol.intern(null, "tree-before"), Symbol.intern(null, "tree-after")) })) })), RT.keyword(null, "line"), Integer.valueOf(643), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/diff.cljc" });
    const__192 = (Var)RT.var("synchrony.operation.diff", "delta-from-tree");
    const__194 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(687), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/diff.cljc" });
    const__195 = (Var)RT.var("synchrony.operation.model", "dom-insert");
  }
  
  static  {
    __init0();
    __init1();
    Compiler.pushNSandLoader(RT.classForName("synchrony.operation.diff__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
