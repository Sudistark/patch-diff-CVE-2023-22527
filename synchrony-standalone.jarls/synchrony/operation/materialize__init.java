package synchrony.operation;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class materialize__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final Keyword const__4;
  
  public static final Keyword const__5;
  
  public static final Var const__6;
  
  public static final AFn const__14;
  
  public static final Var const__15;
  
  public static final Object const__16;
  
  public static final Var const__17;
  
  public static final Keyword const__18;
  
  public static final Object const__19;
  
  public static final Object const__20;
  
  public static final Object const__21;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new materialize.fn__41554());
    const__6.setMeta((IPersistentMap)const__14);
    const__6.bindRoot(new materialize.tree_from_delta());
    new Object[2][0] = const__18;
    new Object[2][1] = new materialize.fn__41573();
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "synchrony.operation.materialize");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("synchrony.operation.materialize", "materialize");
    const__4 = (Keyword)RT.keyword(null, "dom");
    const__5 = (Keyword)RT.keyword(null, "clj");
    const__6 = (Var)RT.var("synchrony.operation.materialize", "tree-from-delta");
    const__14 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { ((IObj)Tuple.create(Symbol.intern(null, "delta"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "="), RT.keyword(null, "insert"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { RT.keyword(null, "type"), Symbol.intern(null, "delta") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(22), RT.keyword(null, "column"), Integer.valueOf(21) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(22), RT.keyword(null, "column"), Integer.valueOf(10) }))) })) })), RT.keyword(null, "line"), Integer.valueOf(21), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/materialize.cljc" });
    const__15 = (Var)RT.var("clojure.core", "extend");
    const__16 = RT.classForName("clojure.lang.PersistentVector");
    const__17 = (Var)RT.var("synchrony.operation.materialize-impl", "RootEditor");
    const__18 = (Keyword)RT.keyword(null, "root-editor");
    const__19 = RT.classForName("clojure.lang.PersistentArrayMap");
    const__20 = RT.classForName("clojure.lang.PersistentHashMap");
    const__21 = RT.classForName("java.lang.Object");
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("synchrony.operation.materialize__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
