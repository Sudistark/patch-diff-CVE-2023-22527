package synchrony.operation;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.Numbers;
import clojure.lang.PersistentArrayMap;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Var;
import java.util.concurrent.Callable;

public class constants__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__9;
  
  public static final Object const__10;
  
  public static final Var const__11;
  
  public static final AFn const__13;
  
  public static final Object const__14;
  
  public static final Var const__15;
  
  public static final AFn const__17;
  
  public static final Object const__18;
  
  public static final Var const__19;
  
  public static final AFn const__21;
  
  public static final Var const__23;
  
  public static final AFn const__25;
  
  public static final Object const__26;
  
  public static final Var const__27;
  
  public static final AFn const__29;
  
  public static final Object const__30;
  
  public static final Var const__31;
  
  public static final AFn const__33;
  
  public static final Object const__34;
  
  public static final Var const__35;
  
  public static final AFn const__37;
  
  public static final Var const__38;
  
  public static final AFn const__40;
  
  public static final Var const__41;
  
  public static final AFn const__43;
  
  public static final Object const__44;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new constants.fn__35310());
    const__3.setMeta((IPersistentMap)const__9);
    const__3.bindRoot(const__10);
    const__11.setMeta((IPersistentMap)const__13);
    const__11.bindRoot(const__14);
    const__15.setMeta((IPersistentMap)const__17);
    const__15.bindRoot(const__18);
    const__19.setMeta((IPersistentMap)const__21);
    const__19



      
      .bindRoot(Numbers.num(Numbers.or(const__11.getRawRoot(), const__15.getRawRoot())));
    const__23.setMeta((IPersistentMap)const__25);
    const__23.bindRoot(const__26);
    const__27.setMeta((IPersistentMap)const__29);
    const__27.bindRoot(const__30);
    const__31.setMeta((IPersistentMap)const__33);
    const__31.bindRoot(const__34);
    const__35.setMeta((IPersistentMap)const__37);
    const__35.bindRoot(PersistentArrayMap.EMPTY);
    const__38.setMeta((IPersistentMap)const__40);
    const__38.bindRoot(const__14);
    const__41.setMeta((IPersistentMap)const__43);
    const__41.bindRoot(const__44);
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "synchrony.operation.constants");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("synchrony.operation.constants", "affinity-none");
    const__9 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(3), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/constants.cljc" });
    const__10 = Long.valueOf(0L);
    const__11 = (Var)RT.var("synchrony.operation.constants", "affinity-dom");
    const__13 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(4), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/constants.cljc" });
    const__14 = Long.valueOf(1L);
    const__15 = (Var)RT.var("synchrony.operation.constants", "affinity-model");
    const__17 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(5), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/constants.cljc" });
    const__18 = Long.valueOf(2L);
    const__19 = (Var)RT.var("synchrony.operation.constants", "affinity-default-mask");
    const__21 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(6), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/constants.cljc" });
    const__23 = (Var)RT.var("synchrony.operation.constants", "affinity-cascade");
    const__25 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(7), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/constants.cljc" });
    const__26 = Long.valueOf(4L);
    const__27 = (Var)RT.var("synchrony.operation.constants", "affinity-wrapper");
    const__29 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(8), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/constants.cljc" });
    const__30 = Long.valueOf(8L);
    const__31 = (Var)RT.var("synchrony.operation.constants", "affinity-filler");
    const__33 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(9), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/constants.cljc" });
    const__34 = Long.valueOf(16L);
    const__35 = (Var)RT.var("synchrony.operation.constants", "field-affinity-default");
    const__37 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(10), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/constants.cljc" });
    const__38 = (Var)RT.var("synchrony.operation.constants", "element-type");
    const__40 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(12), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/constants.cljc" });
    const__41 = (Var)RT.var("synchrony.operation.constants", "text-type");
    const__43 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(13), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/constants.cljc" });
    const__44 = Long.valueOf(3L);
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("synchrony.operation.constants__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
