package synchrony.operation;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class model__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__10;
  
  public static final Object const__11;
  
  public static final Var const__12;
  
  public static final AFn const__14;
  
  public static final Object const__15;
  
  public static final Var const__16;
  
  public static final AFn const__18;
  
  public static final Object const__19;
  
  public static final Var const__20;
  
  public static final AFn const__22;
  
  public static final Object const__23;
  
  public static final Object const__24;
  
  public static final Var const__25;
  
  public static final Var const__26;
  
  public static final Var const__27;
  
  public static final Keyword const__28;
  
  public static final Var const__29;
  
  public static final ISeq const__30;
  
  public static final Var const__31;
  
  public static final Var const__32;
  
  public static final AFn const__36;
  
  public static final Keyword const__37;
  
  public static final AFn const__38;
  
  public static final Keyword const__39;
  
  public static final Keyword const__40;
  
  public static final AFn const__44;
  
  public static final Keyword const__45;
  
  public static final Var const__46;
  
  public static final Var const__47;
  
  public static final Var const__48;
  
  public static final AFn const__49;
  
  public static final AFn const__50;
  
  public static final Keyword const__51;
  
  public static final AFn const__52;
  
  public static final AFn const__53;
  
  public static final AFn const__54;
  
  public static final AFn const__55;
  
  public static final Var const__56;
  
  public static final AFn const__57;
  
  public static final Object const__58;
  
  public static final Var const__59;
  
  public static final ISeq const__60;
  
  public static final AFn const__62;
  
  public static final AFn const__63;
  
  public static final AFn const__65;
  
  public static final AFn const__66;
  
  public static final AFn const__67;
  
  public static final AFn const__68;
  
  public static final Object const__69;
  
  public static final Var const__70;
  
  public static final ISeq const__71;
  
  public static final AFn const__73;
  
  public static final AFn const__74;
  
  public static final AFn const__80;
  
  public static final AFn const__81;
  
  public static final AFn const__82;
  
  public static final AFn const__83;
  
  public static final AFn const__84;
  
  public static final AFn const__85;
  
  public static final AFn const__86;
  
  public static final AFn const__87;
  
  public static final AFn const__88;
  
  public static final AFn const__89;
  
  public static final AFn const__90;
  
  public static final AFn const__91;
  
  public static final Object const__92;
  
  public static final Var const__93;
  
  public static final ISeq const__94;
  
  public static final AFn const__96;
  
  public static final AFn const__97;
  
  public static final AFn const__100;
  
  public static final AFn const__101;
  
  public static final AFn const__102;
  
  public static final AFn const__103;
  
  public static final AFn const__104;
  
  public static final AFn const__105;
  
  public static final Var const__106;
  
  public static final AFn const__110;
  
  public static final Var const__111;
  
  public static final AFn const__114;
  
  public static final Var const__115;
  
  public static final AFn const__118;
  
  public static final Var const__119;
  
  public static final AFn const__122;
  
  public static final Var const__123;
  
  public static final AFn const__126;
  
  public static final Var const__127;
  
  public static final AFn const__130;
  
  public static final Var const__131;
  
  public static final AFn const__134;
  
  public static final Var const__135;
  
  public static final AFn const__138;
  
  public static final Var const__139;
  
  public static final Keyword const__140;
  
  public static final Keyword const__141;
  
  public static final Keyword const__142;
  
  public static final Var const__143;
  
  public static final AFn const__145;
  
  public static final Var const__146;
  
  public static final Keyword const__147;
  
  public static final Var const__148;
  
  public static final AFn const__150;
  
  public static final Keyword const__151;
  
  public static final Var const__152;
  
  public static final AFn const__155;
  
  public static final Var const__156;
  
  public static final AFn const__159;
  
  public static final Var const__160;
  
  public static final AFn const__163;
  
  public static final Var const__164;
  
  public static final AFn const__167;
  
  public static final Var const__168;
  
  public static final AFn const__171;
  
  public static final Var const__172;
  
  public static final AFn const__175;
  
  public static final Var const__176;
  
  public static final AFn const__179;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new model.fn__35312());
    const__3.setMeta((IPersistentMap)const__10);
    const__3.bindRoot(const__11);
    const__12.setMeta((IPersistentMap)const__14);
    const__12.bindRoot(const__15);
    const__16.setMeta((IPersistentMap)const__18);
    const__16.bindRoot(const__19);
    const__20.setMeta((IPersistentMap)const__22);
    const__20.bindRoot(const__23);
    const__106.setMeta((IPersistentMap)const__110);
    const__106.bindRoot(new model.element_node());
    const__111.setMeta((IPersistentMap)const__114);
    const__111.bindRoot(new model.text_node());
    const__115.setMeta((IPersistentMap)const__118);
    const__115.bindRoot(new model.normalize());
    const__119.setMeta((IPersistentMap)const__122);
    const__119.bindRoot(new model.node_QMARK_());
    const__123.setMeta((IPersistentMap)const__126);
    const__123.bindRoot(new model.dom_keys());
    const__127.setMeta((IPersistentMap)const__130);
    const__127.bindRoot(new model.ensure_retain_op());
    const__131.setMeta((IPersistentMap)const__134);
    const__131.bindRoot(new model.dom_insert());
    const__135.setMeta((IPersistentMap)const__138);
    const__135.bindRoot(new model.dispatch_type());
    const__143.setMeta((IPersistentMap)const__145);
    const__143
      
      .bindRoot(((IFn)const__146.getRawRoot()).invoke(const__147));
    const__148.setMeta((IPersistentMap)const__150);
    const__148
      .bindRoot(((IFn)const__146.getRawRoot()).invoke(const__151));
    const__152.setMeta((IPersistentMap)const__155);
    const__152.bindRoot(new model.get_priority());
    const__156.setMeta((IPersistentMap)const__159);
    const__156.bindRoot(new model.add_priorities());
    const__160.setMeta((IPersistentMap)const__163);
    const__160.bindRoot(new model.max_priority());
    const__164.setMeta((IPersistentMap)const__167);
    const__164.bindRoot(new model.keep_max_priority_marker());
    const__168.setMeta((IPersistentMap)const__171);
    const__168.bindRoot(new model.from_dom_path());
    const__172.setMeta((IPersistentMap)const__175);
    const__172.bindRoot(new model.to_dom_path());
    const__176.setMeta((IPersistentMap)const__179);
    const__176.bindRoot(new model.to_dom_path_deepest());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "synchrony.operation.model");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("synchrony.operation.model", "element-name-key");
    const__10 = (AFn)RT.map(new Object[] { RT.keyword(null, "const"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(12), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/model.cljc" });
    const__11 = Long.valueOf(0L);
    const__12 = (Var)RT.var("synchrony.operation.model", "element-children-key");
    const__14 = (AFn)RT.map(new Object[] { RT.keyword(null, "const"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(13), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/model.cljc" });
    const__15 = Long.valueOf(1L);
    const__16 = (Var)RT.var("synchrony.operation.model", "element-attrs-key");
    const__18 = (AFn)RT.map(new Object[] { RT.keyword(null, "const"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(14), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/model.cljc" });
    const__19 = Long.valueOf(2L);
    const__20 = (Var)RT.var("synchrony.operation.model", "element-styles-key");
    const__22 = (AFn)RT.map(new Object[] { RT.keyword(null, "const"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(15), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/model.cljc" });
    const__23 = Long.valueOf(3L);
    const__24 = RT.classForName("synchrony.operation.model.Node");
    const__25 = (Var)RT.var("clojure.core", "alter-meta!");
    const__26 = (Var)RT.var("synchrony.operation.model", "Node");
    const__27 = (Var)RT.var("clojure.core", "assoc");
    const__28 = (Keyword)RT.keyword(null, "doc");
    const__29 = (Var)RT.var("clojure.core", "assert-same-protocol");
    const__30 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "type")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })), ((IObj)Symbol.intern(null, "affinity")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })), ((IObj)Symbol.intern(null, "with-affinity")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "new-affinity")) })) })) }));
    const__31 = (Var)RT.var("clojure.core", "alter-var-root");
    const__32 = (Var)RT.var("clojure.core", "merge");
    const__36 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "synchrony.operation.model.Node"), RT.keyword(null, "on-interface"), RT.classForName("synchrony.operation.model.Node") });
    const__37 = (Keyword)RT.keyword(null, "sigs");
    const__38 = (AFn)RT.map(new Object[] { RT.keyword(null, "type"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "type")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })), RT.keyword(null, "doc"), null }), RT.keyword(null, "affinity"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "affinity")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })), RT.keyword(null, "doc"), null }), RT.keyword(null, "with-affinity"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "with-affinity")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "new-affinity")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "new-affinity")) })), RT.keyword(null, "doc"), null }) });
    const__39 = (Keyword)RT.keyword(null, "var");
    const__40 = (Keyword)RT.keyword(null, "method-map");
    const__44 = (AFn)RT.map(new Object[] { RT.keyword(null, "affinity"), RT.keyword(null, "affinity"), RT.keyword(null, "type"), RT.keyword(null, "type"), RT.keyword(null, "with-affinity"), RT.keyword(null, "with-affinity") });
    const__45 = (Keyword)RT.keyword(null, "method-builders");
    const__46 = (Var)RT.var("clojure.core", "intern");
    const__47 = (Var)RT.var("clojure.core", "*ns*");
    const__48 = (Var)RT.var("clojure.core", "with-meta");
    const__49 = (AFn)((IObj)Symbol.intern(null, "with-affinity")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "new-affinity")) })) }));
    const__50 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "with-affinity")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "new-affinity")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "new-affinity")) })), RT.keyword(null, "doc"), null });
    const__51 = (Keyword)RT.keyword(null, "protocol");
    const__52 = (AFn)((IObj)Symbol.intern(null, "type")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) }));
    const__53 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "type")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })), RT.keyword(null, "doc"), null });
    const__54 = (AFn)((IObj)Symbol.intern(null, "affinity")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) }));
    const__55 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "affinity")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })), RT.keyword(null, "doc"), null });
    const__56 = (Var)RT.var("clojure.core", "-reset-methods");
    const__57 = (AFn)Symbol.intern(null, "Node");
    const__58 = RT.classForName("synchrony.operation.model.DomNode");
    const__59 = (Var)RT.var("synchrony.operation.model", "DomNode");
    const__60 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "name")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })) }));
    const__62 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "synchrony.operation.model.DomNode"), RT.keyword(null, "on-interface"), RT.classForName("synchrony.operation.model.DomNode") });
    const__63 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "name")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })), RT.keyword(null, "doc"), null }) });
    const__65 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), RT.keyword(null, "name") });
    const__66 = (AFn)((IObj)Symbol.intern(null, "name")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) }));
    const__67 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "name")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })), RT.keyword(null, "doc"), null });
    const__68 = (AFn)Symbol.intern(null, "DomNode");
    const__69 = RT.classForName("synchrony.operation.model.ElementNode");
    const__70 = (Var)RT.var("synchrony.operation.model", "ElementNode");
    const__71 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "attrs")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })), ((IObj)Symbol.intern(null, "styles")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })), ((IObj)Symbol.intern(null, "field-affinity")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })), ((IObj)Symbol.intern(null, "with-attrs")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "new-attrs")) })) })), ((IObj)Symbol.intern(null, "with-styles")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "new-styles")) })) })) }));
    const__73 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "synchrony.operation.model.ElementNode"), RT.keyword(null, "on-interface"), RT.classForName("synchrony.operation.model.ElementNode") });
    const__74 = (AFn)RT.map(new Object[] { RT.keyword(null, "attrs"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "attrs")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })), RT.keyword(null, "doc"), null }), RT.keyword(null, "styles"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "styles")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })), RT.keyword(null, "doc"), null }), RT.keyword(null, "field-affinity"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "field-affinity")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })), RT.keyword(null, "doc"), null }), RT.keyword(null, "with-attrs"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "with-attrs")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "new-attrs")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "new-attrs")) })), RT.keyword(null, "doc"), null }), RT.keyword(null, "with-styles"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "with-styles")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "new-styles")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "new-styles")) })), RT.keyword(null, "doc"), null }) });
    const__80 = (AFn)RT.map(new Object[] { RT.keyword(null, "styles"), RT.keyword(null, "styles"), RT.keyword(null, "attrs"), RT.keyword(null, "attrs"), RT.keyword(null, "with-styles"), RT.keyword(null, "with-styles"), RT.keyword(null, "field-affinity"), RT.keyword(null, "field-affinity"), RT.keyword(null, "with-attrs"), RT.keyword(null, "with-attrs") });
    const__81 = (AFn)((IObj)Symbol.intern(null, "styles")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) }));
    const__82 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "styles")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })), RT.keyword(null, "doc"), null });
    const__83 = (AFn)((IObj)Symbol.intern(null, "with-styles")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "new-styles")) })) }));
    const__84 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "with-styles")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "new-styles")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "new-styles")) })), RT.keyword(null, "doc"), null });
    const__85 = (AFn)((IObj)Symbol.intern(null, "attrs")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) }));
    const__86 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "attrs")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })), RT.keyword(null, "doc"), null });
    const__87 = (AFn)((IObj)Symbol.intern(null, "field-affinity")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) }));
    const__88 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "field-affinity")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })), RT.keyword(null, "doc"), null });
    const__89 = (AFn)((IObj)Symbol.intern(null, "with-attrs")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "new-attrs")) })) }));
    const__90 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "with-attrs")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "new-attrs")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "new-attrs")) })), RT.keyword(null, "doc"), null });
    const__91 = (AFn)Symbol.intern(null, "ElementNode");
    const__92 = RT.classForName("synchrony.operation.model.TextNode");
    const__93 = (Var)RT.var("synchrony.operation.model", "TextNode");
    const__94 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "text")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })), ((IObj)Symbol.intern(null, "with-text")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "new-text")) })) })) }));
    const__96 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "synchrony.operation.model.TextNode"), RT.keyword(null, "on-interface"), RT.classForName("synchrony.operation.model.TextNode") });
    const__97 = (AFn)RT.map(new Object[] { RT.keyword(null, "text"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "text")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })), RT.keyword(null, "doc"), null }), RT.keyword(null, "with-text"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "with-text")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "new-text")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "new-text")) })), RT.keyword(null, "doc"), null }) });
  }
  
  public static void __init1() {
    const__100 = (AFn)RT.map(new Object[] { RT.keyword(null, "with-text"), RT.keyword(null, "with-text"), RT.keyword(null, "text"), RT.keyword(null, "text") });
    const__101 = (AFn)((IObj)Symbol.intern(null, "text")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) }));
    const__102 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "text")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this")) })), RT.keyword(null, "doc"), null });
    const__103 = (AFn)((IObj)Symbol.intern(null, "with-text")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "new-text")) })) }));
    const__104 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "with-text")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), null, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "new-text")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "new-text")) })), RT.keyword(null, "doc"), null });
    const__105 = (AFn)Symbol.intern(null, "TextNode");
    const__106 = (Var)RT.var("synchrony.operation.model", "element-node");
    const__110 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "name"), Symbol.intern(null, "children")), ((IObj)Tuple.create(Symbol.intern(null, "name"), Symbol.intern(null, "children"), Symbol.intern(null, "attrs"), Symbol.intern(null, "styles"))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "some?"), Symbol.intern(null, "children") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(81), RT.keyword(null, "column"), Integer.valueOf(13) }))) })) })), RT.keyword(null, "line"), Integer.valueOf(77), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/model.cljc" });
    const__111 = (Var)RT.var("synchrony.operation.model", "text-node");
    const__114 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "text")) })), RT.keyword(null, "line"), Integer.valueOf(88), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/model.cljc" });
    const__115 = (Var)RT.var("synchrony.operation.model", "normalize");
    const__118 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "tree")) })), RT.keyword(null, "line"), Integer.valueOf(130), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/model.cljc" });
    const__119 = (Var)RT.var("synchrony.operation.model", "node?");
    const__122 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "node")) })), RT.keyword(null, "line"), Integer.valueOf(146), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/model.cljc" });
    const__123 = (Var)RT.var("synchrony.operation.model", "dom-keys");
    const__126 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "node")) })), RT.keyword(null, "line"), Integer.valueOf(151), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/model.cljc" });
    const__127 = (Var)RT.var("synchrony.operation.model", "ensure-retain-op");
    const__130 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "op")) })), RT.keyword(null, "line"), Integer.valueOf(166), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/model.cljc" });
    const__131 = (Var)RT.var("synchrony.operation.model", "dom-insert");
    const__134 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "node")), Tuple.create(Symbol.intern(null, "node"), Symbol.intern(null, "retain-op")) })), RT.keyword(null, "line"), Integer.valueOf(174), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/model.cljc" });
    const__135 = (Var)RT.var("synchrony.operation.model", "dispatch-type");
    const__138 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "node")) })), RT.keyword(null, "line"), Integer.valueOf(221), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/model.cljc" });
    const__139 = (Var)RT.var("synchrony.operation.model", "node-surface-len");
    const__140 = (Keyword)RT.keyword(null, "dom");
    const__141 = (Keyword)RT.keyword(null, "clj");
    const__142 = (Keyword)RT.keyword(null, "js");
    const__143 = (Var)RT.var("synchrony.operation.model", "start-marker");
    const__145 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(247), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/model.cljc" });
    const__146 = (Var)RT.var("synchrony.operation.types", "marker");
    const__147 = (Keyword)RT.keyword(null, "<");
    const__148 = (Var)RT.var("synchrony.operation.model", "end-marker");
    const__150 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(248), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/model.cljc" });
    const__151 = (Keyword)RT.keyword(null, ">");
    const__152 = (Var)RT.var("synchrony.operation.model", "get-priority");
    const__155 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "op")) })), RT.keyword(null, "line"), Integer.valueOf(250), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/model.cljc" });
    const__156 = (Var)RT.var("synchrony.operation.model", "add-priorities");
    const__159 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "marker"), Symbol.intern(null, "delta")) })), RT.keyword(null, "line"), Integer.valueOf(253), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/model.cljc" });
    const__160 = (Var)RT.var("synchrony.operation.model", "max-priority");
    const__163 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "marker"), Symbol.intern(null, "delta")) })), RT.keyword(null, "line"), Integer.valueOf(262), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/model.cljc" });
    const__164 = (Var)RT.var("synchrony.operation.model", "keep-max-priority-marker");
    const__167 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "marker"), Symbol.intern(null, "delta")) })), RT.keyword(null, "line"), Integer.valueOf(271), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/model.cljc" });
    const__168 = (Var)RT.var("synchrony.operation.model", "from-dom-path");
    const__171 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "marker"), Symbol.intern(null, "path")) })), RT.keyword(null, "line"), Integer.valueOf(277), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/model.cljc" });
    const__172 = (Var)RT.var("synchrony.operation.model", "to-dom-path");
    const__175 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "marker"), Symbol.intern(null, "delta")) })), RT.keyword(null, "line"), Integer.valueOf(291), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/model.cljc" });
    const__176 = (Var)RT.var("synchrony.operation.model", "to-dom-path-deepest");
    const__179 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "marker"), Symbol.intern(null, "delta")) })), RT.keyword(null, "line"), Integer.valueOf(314), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/model.cljc" });
  }
  
  static  {
    __init0();
    __init1();
    Compiler.pushNSandLoader(RT.classForName("synchrony.operation.model__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
