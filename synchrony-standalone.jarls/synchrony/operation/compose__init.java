package synchrony.operation;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class compose__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__10;
  
  public static final Var const__11;
  
  public static final AFn const__15;
  
  public static final Var const__16;
  
  public static final AFn const__18;
  
  public static final Var const__19;
  
  public static final AFn const__23;
  
  public static final Var const__24;
  
  public static final AFn const__27;
  
  public static final Var const__28;
  
  public static final AFn const__31;
  
  public static final Var const__32;
  
  public static final AFn const__35;
  
  public static final Var const__36;
  
  public static final AFn const__39;
  
  public static final Var const__40;
  
  public static final AFn const__43;
  
  public static final Var const__44;
  
  public static final AFn const__47;
  
  public static final Var const__48;
  
  public static final AFn const__51;
  
  public static final Var const__52;
  
  public static final AFn const__55;
  
  public static final Var const__56;
  
  public static final AFn const__59;
  
  public static final Var const__60;
  
  public static final AFn const__63;
  
  public static final Var const__64;
  
  public static final AFn const__67;
  
  public static final Var const__68;
  
  public static final AFn const__71;
  
  public static final Var const__72;
  
  public static final AFn const__75;
  
  public static final Var const__76;
  
  public static final AFn const__79;
  
  public static final Var const__80;
  
  public static final AFn const__83;
  
  public static final Var const__84;
  
  public static final AFn const__87;
  
  public static final Var const__88;
  
  public static final AFn const__91;
  
  public static final Var const__92;
  
  public static final AFn const__95;
  
  public static final Var const__96;
  
  public static final AFn const__99;
  
  public static final Var const__100;
  
  public static final AFn const__103;
  
  public static final Var const__104;
  
  public static final AFn const__107;
  
  public static final Var const__108;
  
  public static final AFn const__111;
  
  public static final Var const__112;
  
  public static final AFn const__115;
  
  public static final Var const__116;
  
  public static final AFn const__119;
  
  public static final Var const__120;
  
  public static final AFn const__123;
  
  public static final Var const__124;
  
  public static final AFn const__127;
  
  public static final Var const__128;
  
  public static final AFn const__131;
  
  public static final Var const__132;
  
  public static final AFn const__135;
  
  public static final Var const__136;
  
  public static final AFn const__139;
  
  public static final Var const__140;
  
  public static final AFn const__143;
  
  public static final Var const__144;
  
  public static final AFn const__146;
  
  public static final Var const__147;
  
  public static final AFn const__149;
  
  public static final Var const__150;
  
  public static final AFn const__152;
  
  public static final Var const__153;
  
  public static final AFn const__155;
  
  public static final Var const__156;
  
  public static final AFn const__158;
  
  public static final Var const__159;
  
  public static final AFn const__162;
  
  public static final Var const__163;
  
  public static final AFn const__166;
  
  public static final Var const__167;
  
  public static final AFn const__169;
  
  public static final Var const__170;
  
  public static final AFn const__173;
  
  public static final Var const__174;
  
  public static final AFn const__177;
  
  public static final Var const__178;
  
  public static final AFn const__180;
  
  public static final Var const__181;
  
  public static final AFn const__183;
  
  public static final Var const__184;
  
  public static final AFn const__187;
  
  public static final Var const__188;
  
  public static final AFn const__191;
  
  public static final Var const__192;
  
  public static final AFn const__195;
  
  public static final Var const__196;
  
  public static final AFn const__199;
  
  public static final Var const__200;
  
  public static final AFn const__202;
  
  public static final Var const__203;
  
  public static final AFn const__205;
  
  public static final Var const__206;
  
  public static final AFn const__208;
  
  public static final Var const__209;
  
  public static final AFn const__211;
  
  public static final Var const__212;
  
  public static final AFn const__214;
  
  public static final Var const__215;
  
  public static final AFn const__217;
  
  public static final Var const__218;
  
  public static final AFn const__220;
  
  public static final Var const__221;
  
  public static final AFn const__223;
  
  public static final Var const__224;
  
  public static final AFn const__226;
  
  public static final Var const__227;
  
  public static final AFn const__229;
  
  public static final Var const__230;
  
  public static final AFn const__232;
  
  public static final Var const__233;
  
  public static final AFn const__235;
  
  public static final Var const__236;
  
  public static final AFn const__238;
  
  public static final Var const__239;
  
  public static final AFn const__241;
  
  public static final Var const__242;
  
  public static final AFn const__244;
  
  public static final Var const__245;
  
  public static final AFn const__247;
  
  public static final Var const__248;
  
  public static final AFn const__251;
  
  public static final Var const__252;
  
  public static final AFn const__255;
  
  public static final Var const__256;
  
  public static final AFn const__259;
  
  public static final Var const__260;
  
  public static final AFn const__263;
  
  public static final AFn const__266;
  
  public static final Var const__267;
  
  public static final AFn const__270;
  
  public static final Var const__271;
  
  public static final AFn const__275;
  
  public static void load() { LockingTransaction.runInTransaction((Callable)new compose.fn__37235());
    const__3.setMeta((IPersistentMap)const__10);
    const__11.setDynamic(true).setMeta((IPersistentMap)const__15);
    const__16.setDynamic(true).setMeta((IPersistentMap)const__18);
    const__19.setMeta((IPersistentMap)const__23);
    const__19.bindRoot(new compose.renumber());
    const__24.setMeta((IPersistentMap)const__27);
    const__24.bindRoot(new compose.adopt_delta());
    const__28.setMeta((IPersistentMap)const__31);
    const__28.bindRoot(new compose.delete_delta());
    const__32.setMeta((IPersistentMap)const__35);
    const__32.bindRoot(new compose.error());
    const__36.setMeta((IPersistentMap)const__39);
    const__36.bindRoot(new compose.next_stay());
    const__40.setMeta((IPersistentMap)const__43);
    const__40.bindRoot(new compose.next_drop());
    const__44.setMeta((IPersistentMap)const__47);
    const__44.bindRoot(new compose.drop_drop());
    const__48.setMeta((IPersistentMap)const__51);
    const__48.bindRoot(new compose.replace_a_next_drop());
    const__52.setMeta((IPersistentMap)const__55);
    const__52.bindRoot(new compose.replace_adopt_b_next_drop());
    const__56.setMeta((IPersistentMap)const__59);
    const__56.bindRoot(new compose.insert_adopt_b_drop());
    const__60.setMeta((IPersistentMap)const__63);
    const__60.bindRoot(new compose.compose_range_ops());
    const__64.setMeta((IPersistentMap)const__67);
    const__64.bindRoot(new compose.unit_any_range());
    const__68.setMeta((IPersistentMap)const__71);
    const__68.bindRoot(new compose.any_range_unit());
    const__72.setMeta((IPersistentMap)const__75);
    const__72.bindRoot(new compose.delete_kind_QMARK_());
    const__76.setMeta((IPersistentMap)const__79);
    const__76.bindRoot(new compose.insert_kind_QMARK_());
    const__80.setMeta((IPersistentMap)const__83);
    const__80.bindRoot(new compose.compose_unit());
    const__84.setMeta((IPersistentMap)const__87);
    const__84.bindRoot(new compose.compose_retain_retain_maps());
    const__88.setMeta((IPersistentMap)const__91);
    const__88.bindRoot(new compose.compose_retain_delete_maps());
    const__92.setMeta((IPersistentMap)const__95);
    const__92.bindRoot(new compose.retain_map_retain_map());
    const__96.setMeta((IPersistentMap)const__99);
    const__96.bindRoot(new compose.retain_map_delete_map());
    const__100.setMeta((IPersistentMap)const__103);
    const__100.bindRoot(new compose.retain_seq_any_seq());
    const__104.setMeta((IPersistentMap)const__107);
    const__104.bindRoot(new compose.retain_seq_retain_seq());
    const__108.setMeta((IPersistentMap)const__111);
    const__108.bindRoot(new compose.retain_seq_delete_seq());
    const__112.setMeta((IPersistentMap)const__115);
    const__112.bindRoot(new compose.retain_range_retain_range());
    const__116.setMeta((IPersistentMap)const__119);
    const__116.bindRoot(new compose.retain_range_delete_range());
    const__120.setMeta((IPersistentMap)const__123);
    const__120.bindRoot(new compose.retain_range_any_map_seq());
    const__124.setMeta((IPersistentMap)const__127);
    const__124.bindRoot(new compose.retain_map_seq_retain_range());
    const__128.setMeta((IPersistentMap)const__131);
    const__128.bindRoot(new compose.retain_map_delete_range_STAR_());
    const__132.setMeta((IPersistentMap)const__135);
    const__132.bindRoot(new compose.retain_map_delete_range());
    const__136.setMeta((IPersistentMap)const__139);
    const__136.bindRoot(new compose.retain_seq_delete_range_STAR_());
    const__140.setMeta((IPersistentMap)const__143);
    const__140.bindRoot(new compose.retain_seq_delete_range());
    const__144.setMeta((IPersistentMap)const__146);
    const__144.bindRoot(const__32.getRawRoot());
    const__147.setMeta((IPersistentMap)const__149);
    const__147.bindRoot(const__32.getRawRoot());
    const__150.setMeta((IPersistentMap)const__152);
    const__150.bindRoot(const__32.getRawRoot());
    const__153.setMeta((IPersistentMap)const__155);
    const__153.bindRoot(const__32.getRawRoot());
    const__156.setMeta((IPersistentMap)const__158);
    const__156.bindRoot(const__36.getRawRoot());
    const__159.setMeta((IPersistentMap)const__162);
    const__159.bindRoot(new compose.insert_unit());
    const__163.setMeta((IPersistentMap)const__166);
    const__163.bindRoot(new compose.insert_any_range());
    const__167.setMeta((IPersistentMap)const__169);
    const__167.bindRoot(const__56.getRawRoot());
    const__170.setMeta((IPersistentMap)const__173);
    const__170.bindRoot(new compose.insert_vals_retain_range());
    const__174.setMeta((IPersistentMap)const__177);
    const__174.bindRoot(new compose.insert_vals_delete_range());
    const__178.setMeta((IPersistentMap)const__180);
    const__178.bindRoot(const__32.getRawRoot());
    const__181.setMeta((IPersistentMap)const__183);
    const__181.bindRoot(const__56.getRawRoot());
    const__184.setMeta((IPersistentMap)const__187);
    const__184.bindRoot(new compose.replace_unit());
    const__188.setMeta((IPersistentMap)const__191);
    const__188.bindRoot(new compose.retain_unit_replace());
    const__192.setMeta((IPersistentMap)const__195);
    const__192.bindRoot(new compose.replace_any_range());
    const__196.setMeta((IPersistentMap)const__199);
    const__196.bindRoot(new compose.retain_range_replace());
    const__200.setMeta((IPersistentMap)const__202);
    const__200.bindRoot(const__36.getRawRoot());
    const__203.setMeta((IPersistentMap)const__205);
    const__203.bindRoot(const__56.getRawRoot());
    const__206.setMeta((IPersistentMap)const__208);
    const__206.bindRoot(const__36.getRawRoot());
    const__209.setMeta((IPersistentMap)const__211);
    const__209.bindRoot(const__56.getRawRoot());
    const__212.setMeta((IPersistentMap)const__214);
    const__212.bindRoot(const__36.getRawRoot());
    const__215.setMeta((IPersistentMap)const__217);
    const__215.bindRoot(const__36.getRawRoot());
    const__218.setMeta((IPersistentMap)const__220);
    const__218.bindRoot(const__36.getRawRoot());
    const__221.setMeta((IPersistentMap)const__223);
    const__221.bindRoot(const__36.getRawRoot());
    const__224.setMeta((IPersistentMap)const__226);
    const__224.bindRoot(const__36.getRawRoot());
    const__227.setMeta((IPersistentMap)const__229);
    const__227.bindRoot(const__36.getRawRoot());
    const__230.setMeta((IPersistentMap)const__232);
    const__230.bindRoot(const__56.getRawRoot());
    const__233.setMeta((IPersistentMap)const__235);
    const__233.bindRoot(const__56.getRawRoot());
    const__236.setMeta((IPersistentMap)const__238);
    const__236.bindRoot(const__56.getRawRoot());
    const__239.setMeta((IPersistentMap)const__241);
    const__239.bindRoot(const__56.getRawRoot());
    const__242.setMeta((IPersistentMap)const__244);
    const__242.bindRoot(const__56.getRawRoot());
    const__245.setMeta((IPersistentMap)const__247);
    const__245.bindRoot(const__56.getRawRoot());
    const__248.setMeta((IPersistentMap)const__251);
    const__248.bindRoot(new compose.tr_dispatch_fn());
    const__252.setMeta((IPersistentMap)const__255);
    const__252.bindRoot(new compose.make_node());
    const__256.setMeta((IPersistentMap)const__259);
    const__256.bindRoot(new compose.split_node());
    const__260.setMeta((IPersistentMap)const__263);
    const__260.bindRoot(new compose.process_seq());
    const__3.setMeta((IPersistentMap)const__266);
    const__3.bindRoot(new compose.compose_seq());
    const__267.setMeta((IPersistentMap)const__270);
    const__267.bindRoot(new compose.swap_exec_expand_renumber());
    const__271.setMeta((IPersistentMap)const__275);
    const__271.bindRoot(new compose.compose()); }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "synchrony.operation.compose");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("synchrony.operation.compose", "compose-seq");
    const__10 = (AFn)RT.map(new Object[] { RT.keyword(null, "declared"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(9), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__11 = (Var)RT.var("synchrony.operation.compose", "*renumber-ctx*");
    const__15 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(11), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__16 = (Var)RT.var("synchrony.operation.compose", "*dropped*");
    const__18 = (AFn)RT.map(new Object[] { RT.keyword(null, "dynamic"), Boolean.TRUE, RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(12), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__19 = (Var)RT.var("synchrony.operation.compose", "renumber");
    const__23 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "old-id")) })), RT.keyword(null, "line"), Integer.valueOf(14), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__24 = (Var)RT.var("synchrony.operation.compose", "adopt-delta");
    const__27 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "delta")) })), RT.keyword(null, "line"), Integer.valueOf(19), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__28 = (Var)RT.var("synchrony.operation.compose", "delete-delta");
    const__31 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "delta")) })), RT.keyword(null, "line"), Integer.valueOf(35), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__32 = (Var)RT.var("synchrony.operation.compose", "error");
    const__35 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "as"), Symbol.intern(null, "bs"), Symbol.intern(null, "a"), Symbol.intern(null, "b")) })), RT.keyword(null, "line"), Integer.valueOf(41), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__36 = (Var)RT.var("synchrony.operation.compose", "next_stay");
    const__39 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "as"), Symbol.intern(null, "bs"), Symbol.intern(null, "a"), Symbol.intern(null, "b")) })), RT.keyword(null, "line"), Integer.valueOf(44), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__40 = (Var)RT.var("synchrony.operation.compose", "next_drop");
    const__43 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "as"), Symbol.intern(null, "bs"), Symbol.intern(null, "a"), Symbol.intern(null, "b")) })), RT.keyword(null, "line"), Integer.valueOf(47), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__44 = (Var)RT.var("synchrony.operation.compose", "drop_drop");
    const__47 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "as"), Symbol.intern(null, "bs"), Symbol.intern(null, "a"), Symbol.intern(null, "b")) })), RT.keyword(null, "line"), Integer.valueOf(50), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__48 = (Var)RT.var("synchrony.operation.compose", "replace-a-next_drop");
    const__51 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "as"), Symbol.intern(null, "bs"), Symbol.intern(null, "a"), Symbol.intern(null, "b")) })), RT.keyword(null, "line"), Integer.valueOf(53), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__52 = (Var)RT.var("synchrony.operation.compose", "replace-adopt-b-next_drop");
    const__55 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "as"), Symbol.intern(null, "bs"), Symbol.intern(null, "a"), Symbol.intern(null, "b")) })), RT.keyword(null, "line"), Integer.valueOf(56), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__56 = (Var)RT.var("synchrony.operation.compose", "insert-adopt-b_drop");
    const__59 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "as"), Symbol.intern(null, "bs"), Symbol.intern(null, "a"), Symbol.intern(null, "b")) })), RT.keyword(null, "line"), Integer.valueOf(59), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__60 = (Var)RT.var("synchrony.operation.compose", "compose-range-ops");
    const__63 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { RT.vector(new Object[] { Symbol.intern(null, "match"), Symbol.intern(null, "split-a"), Symbol.intern(null, "split-b"), Symbol.intern(null, "as"), Symbol.intern(null, "bs"), Symbol.intern(null, "a"), Symbol.intern(null, "b"), Symbol.intern(null, "al"), Symbol.intern(null, "bl") }) })), RT.keyword(null, "line"), Integer.valueOf(62), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__64 = (Var)RT.var("synchrony.operation.compose", "unit_any-range");
    const__67 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "match"), Symbol.intern(null, "as"), Symbol.intern(null, "bs"), Symbol.intern(null, "a"), Symbol.intern(null, "b")) })), RT.keyword(null, "line"), Integer.valueOf(79), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__68 = (Var)RT.var("synchrony.operation.compose", "any-range_unit");
    const__71 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "match"), Symbol.intern(null, "as"), Symbol.intern(null, "bs"), Symbol.intern(null, "a"), Symbol.intern(null, "b")) })), RT.keyword(null, "line"), Integer.valueOf(91), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__72 = (Var)RT.var("synchrony.operation.compose", "delete-kind?");
    const__75 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "type")) })), RT.keyword(null, "line"), Integer.valueOf(103), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__76 = (Var)RT.var("synchrony.operation.compose", "insert-kind?");
    const__79 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "type")) })), RT.keyword(null, "line"), Integer.valueOf(110), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__80 = (Var)RT.var("synchrony.operation.compose", "compose-unit");
    const__83 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "a"), Symbol.intern(null, "b")) })), RT.keyword(null, "line"), Integer.valueOf(117), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__84 = (Var)RT.var("synchrony.operation.compose", "compose-retain-retain-maps");
    const__87 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "am"), Symbol.intern(null, "bm")) })), RT.keyword(null, "line"), Integer.valueOf(134), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__88 = (Var)RT.var("synchrony.operation.compose", "compose-retain-delete-maps");
    const__91 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "am"), Symbol.intern(null, "bm")) })), RT.keyword(null, "line"), Integer.valueOf(141), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__92 = (Var)RT.var("synchrony.operation.compose", "retain-map_retain-map");
    const__95 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "as"), Symbol.intern(null, "bs"), Symbol.intern(null, "a"), Symbol.intern(null, "b")) })), RT.keyword(null, "line"), Integer.valueOf(154), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__96 = (Var)RT.var("synchrony.operation.compose", "retain-map_delete-map");
    const__99 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "as"), Symbol.intern(null, "bs"), Symbol.intern(null, "a"), Symbol.intern(null, "b")) })), RT.keyword(null, "line"), Integer.valueOf(159), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
  }
  
  public static void __init1() {
    const__100 = (Var)RT.var("synchrony.operation.compose", "retain-seq_any-seq");
    const__103 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "delete?"), Symbol.intern(null, "as"), Symbol.intern(null, "bs"), Symbol.intern(null, "a"), Symbol.intern(null, "b")) })), RT.keyword(null, "line"), Integer.valueOf(164), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__104 = (Var)RT.var("synchrony.operation.compose", "retain-seq_retain-seq");
    const__107 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "as"), Symbol.intern(null, "bs"), Symbol.intern(null, "a"), Symbol.intern(null, "b")) })), RT.keyword(null, "line"), Integer.valueOf(169), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__108 = (Var)RT.var("synchrony.operation.compose", "retain-seq_delete-seq");
    const__111 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "as"), Symbol.intern(null, "bs"), Symbol.intern(null, "a"), Symbol.intern(null, "b")) })), RT.keyword(null, "line"), Integer.valueOf(172), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__112 = (Var)RT.var("synchrony.operation.compose", "retain-range_retain-range");
    const__115 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "as"), Symbol.intern(null, "bs"), Symbol.intern(null, "a"), Symbol.intern(null, "b")) })), RT.keyword(null, "line"), Integer.valueOf(175), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__116 = (Var)RT.var("synchrony.operation.compose", "retain-range_delete-range");
    const__119 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "as"), Symbol.intern(null, "bs"), Symbol.intern(null, "a"), Symbol.intern(null, "b")) })), RT.keyword(null, "line"), Integer.valueOf(179), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__120 = (Var)RT.var("synchrony.operation.compose", "retain-range_any-map-seq");
    const__123 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "as"), Symbol.intern(null, "bs"), Symbol.intern(null, "a"), Symbol.intern(null, "b")) })), RT.keyword(null, "line"), Integer.valueOf(183), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__124 = (Var)RT.var("synchrony.operation.compose", "retain-map-seq_retain-range");
    const__127 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "as"), Symbol.intern(null, "bs"), Symbol.intern(null, "a"), Symbol.intern(null, "b")) })), RT.keyword(null, "line"), Integer.valueOf(186), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__128 = (Var)RT.var("synchrony.operation.compose", "retain-map_delete-range*");
    const__131 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "as"), Symbol.intern(null, "bs"), Symbol.intern(null, "a"), Symbol.intern(null, "b")) })), RT.keyword(null, "line"), Integer.valueOf(189), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__132 = (Var)RT.var("synchrony.operation.compose", "retain-map_delete-range");
    const__135 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "as"), Symbol.intern(null, "bs"), Symbol.intern(null, "a"), Symbol.intern(null, "b")) })), RT.keyword(null, "line"), Integer.valueOf(198), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__136 = (Var)RT.var("synchrony.operation.compose", "retain-seq_delete-range*");
    const__139 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "as"), Symbol.intern(null, "bs"), Symbol.intern(null, "a"), Symbol.intern(null, "b")) })), RT.keyword(null, "line"), Integer.valueOf(201), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__140 = (Var)RT.var("synchrony.operation.compose", "retain-seq_delete-range");
    const__143 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "as"), Symbol.intern(null, "bs"), Symbol.intern(null, "a"), Symbol.intern(null, "b")) })), RT.keyword(null, "line"), Integer.valueOf(210), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__144 = (Var)RT.var("synchrony.operation.compose", "retain-seq_retain-map");
    const__146 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(213), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__147 = (Var)RT.var("synchrony.operation.compose", "retain-map_retain-seq");
    const__149 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(214), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__150 = (Var)RT.var("synchrony.operation.compose", "retain-seq_delete-map");
    const__152 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(215), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__153 = (Var)RT.var("synchrony.operation.compose", "retain-map_delete-seq");
    const__155 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(216), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__156 = (Var)RT.var("synchrony.operation.compose", "delete-any_any");
    const__158 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(218), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__159 = (Var)RT.var("synchrony.operation.compose", "insert_unit");
    const__162 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "as"), Symbol.intern(null, "bs"), Symbol.intern(null, "a"), Symbol.intern(null, "b")) })), RT.keyword(null, "line"), Integer.valueOf(220), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__163 = (Var)RT.var("synchrony.operation.compose", "insert_any-range");
    const__166 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "as"), Symbol.intern(null, "bs"), Symbol.intern(null, "a"), Symbol.intern(null, "b")) })), RT.keyword(null, "line"), Integer.valueOf(246), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__167 = (Var)RT.var("synchrony.operation.compose", "any_insert");
    const__169 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(249), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__170 = (Var)RT.var("synchrony.operation.compose", "insert-vals_retain-range");
    const__173 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "as"), Symbol.intern(null, "bs"), Symbol.intern(null, "a"), Symbol.intern(null, "b")) })), RT.keyword(null, "line"), Integer.valueOf(251), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__174 = (Var)RT.var("synchrony.operation.compose", "insert-vals_delete-range");
    const__177 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "as"), Symbol.intern(null, "bs"), Symbol.intern(null, "a"), Symbol.intern(null, "b")) })), RT.keyword(null, "line"), Integer.valueOf(255), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__178 = (Var)RT.var("synchrony.operation.compose", "insert-vals_unit");
    const__180 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(259), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__181 = (Var)RT.var("synchrony.operation.compose", "any_insert-vals");
    const__183 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(261), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__184 = (Var)RT.var("synchrony.operation.compose", "replace_unit");
    const__187 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "as"), Symbol.intern(null, "bs"), Symbol.intern(null, "a"), Symbol.intern(null, "b")) })), RT.keyword(null, "line"), Integer.valueOf(263), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__188 = (Var)RT.var("synchrony.operation.compose", "retain-unit_replace");
    const__191 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "as"), Symbol.intern(null, "bs"), Symbol.intern(null, "a"), Symbol.intern(null, "b")) })), RT.keyword(null, "line"), Integer.valueOf(270), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__192 = (Var)RT.var("synchrony.operation.compose", "replace_any-range");
    const__195 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "as"), Symbol.intern(null, "bs"), Symbol.intern(null, "a"), Symbol.intern(null, "b")) })), RT.keyword(null, "line"), Integer.valueOf(279), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__196 = (Var)RT.var("synchrony.operation.compose", "retain-range_replace");
    const__199 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "as"), Symbol.intern(null, "bs"), Symbol.intern(null, "a"), Symbol.intern(null, "b")) })), RT.keyword(null, "line"), Integer.valueOf(282), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
  }
  
  public static void __init2() {
    const__200 = (Var)RT.var("synchrony.operation.compose", "marker_any");
    const__202 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(285), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__203 = (Var)RT.var("synchrony.operation.compose", "any_marker");
    const__205 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(286), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__206 = (Var)RT.var("synchrony.operation.compose", "target_any");
    const__208 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(287), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__209 = (Var)RT.var("synchrony.operation.compose", "any_target");
    const__211 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(288), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__212 = (Var)RT.var("synchrony.operation.compose", "insert_end");
    const__214 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(290), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__215 = (Var)RT.var("synchrony.operation.compose", "retain-any_end");
    const__217 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(291), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__218 = (Var)RT.var("synchrony.operation.compose", "delete-any_end");
    const__220 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(292), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__221 = (Var)RT.var("synchrony.operation.compose", "replace_end");
    const__223 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(293), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__224 = (Var)RT.var("synchrony.operation.compose", "insert-vals_end");
    const__226 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(294), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__227 = (Var)RT.var("synchrony.operation.compose", "any-range_end");
    const__229 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(295), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__230 = (Var)RT.var("synchrony.operation.compose", "end_insert");
    const__232 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(296), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__233 = (Var)RT.var("synchrony.operation.compose", "end_retain-any");
    const__235 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(297), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__236 = (Var)RT.var("synchrony.operation.compose", "end_delete-any");
    const__238 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(298), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__239 = (Var)RT.var("synchrony.operation.compose", "end_replace");
    const__241 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(299), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__242 = (Var)RT.var("synchrony.operation.compose", "end_insert-vals");
    const__244 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(300), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__245 = (Var)RT.var("synchrony.operation.compose", "end_any-range");
    const__247 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(301), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__248 = (Var)RT.var("synchrony.operation.compose", "tr-dispatch-fn");
    const__251 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "op-a"), Symbol.intern(null, "op-b")) })), RT.keyword(null, "line"), Integer.valueOf(303), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__252 = (Var)RT.var("synchrony.operation.compose", "make-node");
    const__255 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "start"), Symbol.intern(null, "nodes")) })), RT.keyword(null, "line"), Integer.valueOf(482), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__256 = (Var)RT.var("synchrony.operation.compose", "split-node");
    const__259 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "split-ctx"), Symbol.intern(null, "end")) })), RT.keyword(null, "line"), Integer.valueOf(488), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__260 = (Var)RT.var("synchrony.operation.compose", "process-seq");
    const__263 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "dispatch-fn"), Symbol.intern(null, "as"), Symbol.intern(null, "bs")) })), RT.keyword(null, "line"), Integer.valueOf(491), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__266 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "as"), Symbol.intern(null, "bs")) })), RT.keyword(null, "line"), Integer.valueOf(502), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__267 = (Var)RT.var("synchrony.operation.compose", "swap-exec-expand-renumber");
    const__270 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "new-ids-by-old-id"), Symbol.intern(null, "source-by-id"), Symbol.intern(null, "delta")) })), RT.keyword(null, "line"), Integer.valueOf(508), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
    const__271 = (Var)RT.var("synchrony.operation.compose", "compose");
    const__275 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(), Tuple.create(Symbol.intern(null, "delta")), Tuple.create(Symbol.intern(null, "delta-a"), Symbol.intern(null, "delta-b")) })), RT.keyword(null, "doc"), "Composes deltas such that materializing both given deltas onto a tree\n  will have the identical result as first composing them and applying the\n  single result delta to the tree.\n\n  Provides the arities necessary for a reducing function that can be used\n  with reduce/transduce.", RT.keyword(null, "line"), Integer.valueOf(544), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/compose.cljc" });
  }
  
  static  {
    __init0();
    __init1();
    __init2();
    Compiler.pushNSandLoader(RT.classForName("synchrony.operation.compose__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
