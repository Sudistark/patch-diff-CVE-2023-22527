package synchrony.operation;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class types__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__11;
  
  public static final Var const__12;
  
  public static final AFn const__15;
  
  public static final Var const__16;
  
  public static final AFn const__19;
  
  public static final Var const__20;
  
  public static final AFn const__23;
  
  public static final Var const__24;
  
  public static final AFn const__27;
  
  public static final Var const__28;
  
  public static final AFn const__31;
  
  public static final Var const__32;
  
  public static final AFn const__35;
  
  public static final Var const__36;
  
  public static final AFn const__39;
  
  public static final Var const__40;
  
  public static final AFn const__43;
  
  public static final Var const__44;
  
  public static final AFn const__47;
  
  public static final Var const__48;
  
  public static final AFn const__51;
  
  public static final Var const__52;
  
  public static final AFn const__55;
  
  public static final Var const__56;
  
  public static final AFn const__58;
  
  public static final Object const__59;
  
  public static final Var const__60;
  
  public static final AFn const__62;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new types.fn__34734());
    const__3.setMeta((IPersistentMap)const__11);
    const__3.bindRoot(new types.delete_range());
    const__12.setMeta((IPersistentMap)const__15);
    const__12.bindRoot(new types.retain_range());
    const__16.setMeta((IPersistentMap)const__19);
    const__16.bindRoot(new types.delete_map());
    const__20.setMeta((IPersistentMap)const__23);
    const__20.bindRoot(new types.retain_map());
    const__24.setMeta((IPersistentMap)const__27);
    const__24.bindRoot(new types.delete_seq());
    const__28.setMeta((IPersistentMap)const__31);
    const__28.bindRoot(new types.retain_seq());
    const__32.setMeta((IPersistentMap)const__35);
    const__32.bindRoot(new types.replace());
    const__36.setMeta((IPersistentMap)const__39);
    const__36.bindRoot(new types.insert());
    const__40.setMeta((IPersistentMap)const__43);
    const__40.bindRoot(new types.insert_vals());
    const__44.setMeta((IPersistentMap)const__47);
    const__44.bindRoot(new types.source_seq());
    const__48.setMeta((IPersistentMap)const__51);
    const__48.bindRoot(new types.target());
    const__52.setMeta((IPersistentMap)const__55);
    const__52.bindRoot(new types.marker());
    const__56.setMeta((IPersistentMap)const__58);
    const__56













      
      .bindRoot(((IFn)const__3.getRawRoot()).invoke(const__59));
    const__60.setMeta((IPersistentMap)const__62);
    const__60
      .bindRoot(((IFn)const__12.getRawRoot()).invoke(const__59));
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "synchrony.operation.types");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("synchrony.operation.types", "delete-range");
    const__11 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "length")) })), RT.keyword(null, "line"), Integer.valueOf(19), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/types.cljc" });
    const__12 = (Var)RT.var("synchrony.operation.types", "retain-range");
    const__15 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "length")) })), RT.keyword(null, "line"), Integer.valueOf(20), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/types.cljc" });
    const__16 = (Var)RT.var("synchrony.operation.types", "delete-map");
    const__19 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "map")) })), RT.keyword(null, "line"), Integer.valueOf(21), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/types.cljc" });
    const__20 = (Var)RT.var("synchrony.operation.types", "retain-map");
    const__23 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "map")) })), RT.keyword(null, "line"), Integer.valueOf(22), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/types.cljc" });
    const__24 = (Var)RT.var("synchrony.operation.types", "delete-seq");
    const__27 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "seq")) })), RT.keyword(null, "line"), Integer.valueOf(23), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/types.cljc" });
    const__28 = (Var)RT.var("synchrony.operation.types", "retain-seq");
    const__31 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "seq")) })), RT.keyword(null, "line"), Integer.valueOf(24), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/types.cljc" });
    const__32 = (Var)RT.var("synchrony.operation.types", "replace");
    const__35 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "insert-op"), Symbol.intern(null, "delete-op")) })), RT.keyword(null, "line"), Integer.valueOf(25), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/types.cljc" });
    const__36 = (Var)RT.var("synchrony.operation.types", "insert");
    const__39 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "val"), Symbol.intern(null, "retain-op")) })), RT.keyword(null, "line"), Integer.valueOf(26), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/types.cljc" });
    const__40 = (Var)RT.var("synchrony.operation.types", "insert-vals");
    const__43 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "vals")) })), RT.keyword(null, "line"), Integer.valueOf(27), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/types.cljc" });
    const__44 = (Var)RT.var("synchrony.operation.types", "source-seq");
    const__47 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "id"), Symbol.intern(null, "seq")) })), RT.keyword(null, "line"), Integer.valueOf(28), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/types.cljc" });
    const__48 = (Var)RT.var("synchrony.operation.types", "target");
    const__51 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "id")) })), RT.keyword(null, "line"), Integer.valueOf(29), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/types.cljc" });
    const__52 = (Var)RT.var("synchrony.operation.types", "marker");
    const__55 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "subtype")) })), RT.keyword(null, "line"), Integer.valueOf(30), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/types.cljc" });
    const__56 = (Var)RT.var("synchrony.operation.types", "delete");
    const__58 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(32), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/types.cljc" });
    const__59 = Long.valueOf(1L);
    const__60 = (Var)RT.var("synchrony.operation.types", "retain");
    const__62 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(33), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/types.cljc" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("synchrony.operation.types__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
