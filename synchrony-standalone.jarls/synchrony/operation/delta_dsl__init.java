package synchrony.operation;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class delta_dsl__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__11;
  
  public static final Var const__12;
  
  public static final AFn const__16;
  
  public static final Var const__17;
  
  public static final AFn const__19;
  
  public static final Var const__20;
  
  public static final Var const__21;
  
  public static final Var const__22;
  
  public static final Var const__23;
  
  public static final Var const__24;
  
  public static final AFn const__26;
  
  public static final Var const__27;
  
  public static final Var const__28;
  
  public static final Var const__29;
  
  public static final Var const__30;
  
  public static final AFn const__33;
  
  public static final Var const__34;
  
  public static final AFn const__37;
  
  public static final Var const__38;
  
  public static final AFn const__41;
  
  public static final Var const__42;
  
  public static final AFn const__45;
  
  public static final Var const__46;
  
  public static final AFn const__48;
  
  public static final Var const__49;
  
  public static final Var const__50;
  
  public static final AFn const__53;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new delta_dsl.fn__36865());
    const__3.setMeta((IPersistentMap)const__11);
    const__3.bindRoot(new delta_dsl.delta_dsl());
    const__12.setMeta((IPersistentMap)const__16);
    const__12.bindRoot(new delta_dsl.retain_delete());
    const__17.setMeta((IPersistentMap)const__19);
    const__17















































      
      .bindRoot(((IFn)const__20.getRawRoot()).invoke(const__12.getRawRoot(), const__21.getRawRoot(), const__22.getRawRoot(), const__23.getRawRoot()));
    const__24.setMeta((IPersistentMap)const__26);
    const__24
      .bindRoot(((IFn)const__20.getRawRoot()).invoke(const__12.getRawRoot(), const__27.getRawRoot(), const__28.getRawRoot(), const__29.getRawRoot()));
    const__30.setMeta((IPersistentMap)const__33);
    const__30.bindRoot(new delta_dsl.insert());
    const__34.setMeta((IPersistentMap)const__37);
    const__34.bindRoot(new delta_dsl.replace());
    const__38.setMeta((IPersistentMap)const__41);
    const__38.bindRoot(new delta_dsl.source());
    const__42.setMeta((IPersistentMap)const__45);
    const__42.bindRoot(new delta_dsl.target());
    const__46.setMeta((IPersistentMap)const__48);
    const__46.bindRoot(const__49.getRawRoot());
    const__50.setMeta((IPersistentMap)const__53);
    const__50.bindRoot(new delta_dsl.delta());
    ((Var)const__50)
































      
      .setMacro();
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "synchrony.operation.delta-dsl");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("synchrony.operation.delta-dsl", "delta-dsl");
    const__11 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "delta")) })), RT.keyword(null, "line"), Integer.valueOf(7), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta_dsl.cljc" });
    const__12 = (Var)RT.var("synchrony.operation.delta-dsl", "retain-delete");
    const__16 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "create-range"), Symbol.intern(null, "create-map"), Symbol.intern(null, "create-seq"), Symbol.intern(null, "&"), Symbol.intern(null, "args")) })), RT.keyword(null, "line"), Integer.valueOf(33), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta_dsl.cljc" });
    const__17 = (Var)RT.var("synchrony.operation.delta-dsl", "retain");
    const__19 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(50), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta_dsl.cljc" });
    const__20 = (Var)RT.var("clojure.core", "partial");
    const__21 = (Var)RT.var("synchrony.operation.types", "retain-range");
    const__22 = (Var)RT.var("synchrony.operation.types", "retain-map");
    const__23 = (Var)RT.var("synchrony.operation.types", "retain-seq");
    const__24 = (Var)RT.var("synchrony.operation.delta-dsl", "delete");
    const__26 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(51), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta_dsl.cljc" });
    const__27 = (Var)RT.var("synchrony.operation.types", "delete-range");
    const__28 = (Var)RT.var("synchrony.operation.types", "delete-map");
    const__29 = (Var)RT.var("synchrony.operation.types", "delete-seq");
    const__30 = (Var)RT.var("synchrony.operation.delta-dsl", "insert");
    const__33 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "val"), Symbol.intern(null, "&"), Symbol.intern(null, "args")) })), RT.keyword(null, "line"), Integer.valueOf(53), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta_dsl.cljc" });
    const__34 = (Var)RT.var("synchrony.operation.delta-dsl", "replace");
    const__37 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "insert-op")), Tuple.create(Symbol.intern(null, "insert-op"), Symbol.intern(null, "delete-op")) })), RT.keyword(null, "line"), Integer.valueOf(65), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta_dsl.cljc" });
    const__38 = (Var)RT.var("synchrony.operation.delta-dsl", "source");
    const__41 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "id"), Symbol.intern(null, "&"), Symbol.intern(null, "args")) })), RT.keyword(null, "line"), Integer.valueOf(71), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta_dsl.cljc" });
    const__42 = (Var)RT.var("synchrony.operation.delta-dsl", "target");
    const__45 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "id"), Symbol.intern(null, "&"), Symbol.intern(null, "etc")) })), RT.keyword(null, "line"), Integer.valueOf(77), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta_dsl.cljc" });
    const__46 = (Var)RT.var("synchrony.operation.delta-dsl", "insert-vals");
    const__48 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(83), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta_dsl.cljc" });
    const__49 = (Var)RT.var("synchrony.operation.types", "insert-vals");
    const__50 = (Var)RT.var("synchrony.operation.delta-dsl", "delta");
    const__53 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "dsl")) })), RT.keyword(null, "line"), Integer.valueOf(85), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/delta_dsl.cljc" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("synchrony.operation.delta_dsl__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
