package synchrony.operation;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class iter__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__11;
  
  public static final Var const__12;
  
  public static final AFn const__15;
  
  public static final Var const__16;
  
  public static final AFn const__19;
  
  public static final Var const__20;
  
  public static final AFn const__23;
  
  public static final Var const__24;
  
  public static final AFn const__27;
  
  public static final Var const__28;
  
  public static final AFn const__31;
  
  public static final Var const__32;
  
  public static final AFn const__35;
  
  public static final Var const__36;
  
  public static final AFn const__39;
  
  public static final Var const__40;
  
  public static final AFn const__43;
  
  public static final Var const__44;
  
  public static final AFn const__47;
  
  public static final Var const__48;
  
  public static final AFn const__51;
  
  public static void load() { LockingTransaction.runInTransaction((Callable)new iter.fn__35049());
    const__3.setMeta((IPersistentMap)const__11);
    const__3.bindRoot(new iter.make());
    const__12.setMeta((IPersistentMap)const__15);
    const__12.bindRoot(new iter.before());
    const__16.setMeta((IPersistentMap)const__19);
    const__16.bindRoot(new iter.after());
    const__20.setMeta((IPersistentMap)const__23);
    const__20.bindRoot(new iter.val());
    const__24.setMeta((IPersistentMap)const__27);
    const__24.bindRoot(new iter.replace_after());
    const__28.setMeta((IPersistentMap)const__31);
    const__28.bindRoot(new iter.drop());
    const__32.setMeta((IPersistentMap)const__35);
    const__32.bindRoot(new iter.next());
    const__36.setMeta((IPersistentMap)const__39);
    const__36.bindRoot(new iter.insert());
    const__40.setMeta((IPersistentMap)const__43);
    const__40.bindRoot(new iter.insert_next());
    const__44.setMeta((IPersistentMap)const__47);
    const__44.bindRoot(new iter.insert_next_vals());
    const__48.setMeta((IPersistentMap)const__51);
    const__48.bindRoot(new iter.replace_next()); }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "synchrony.operation.iter");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("synchrony.operation.iter", "make");
    const__11 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "vs")) })), RT.keyword(null, "line"), Integer.valueOf(5), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/iter.cljc" });
    const__12 = (Var)RT.var("synchrony.operation.iter", "before");
    const__15 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Tuple.create(Symbol.intern(null, "b"), Symbol.intern(null, "a"))) })), RT.keyword(null, "line"), Integer.valueOf(8), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/iter.cljc" });
    const__16 = (Var)RT.var("synchrony.operation.iter", "after");
    const__19 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Tuple.create(Symbol.intern(null, "b"), Symbol.intern(null, "a"))) })), RT.keyword(null, "line"), Integer.valueOf(11), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/iter.cljc" });
    const__20 = (Var)RT.var("synchrony.operation.iter", "val");
    const__23 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Tuple.create(Symbol.intern(null, "b"), Symbol.intern(null, "a"))) })), RT.keyword(null, "line"), Integer.valueOf(14), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/iter.cljc" });
    const__24 = (Var)RT.var("synchrony.operation.iter", "replace-after");
    const__27 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Tuple.create(Symbol.intern(null, "b"), Symbol.intern(null, "_")), Symbol.intern(null, "new-a")) })), RT.keyword(null, "line"), Integer.valueOf(17), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/iter.cljc" });
    const__28 = (Var)RT.var("synchrony.operation.iter", "drop");
    const__31 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Tuple.create(Symbol.intern(null, "b"), Symbol.intern(null, "a"))) })), RT.keyword(null, "line"), Integer.valueOf(20), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/iter.cljc" });
    const__32 = (Var)RT.var("synchrony.operation.iter", "next");
    const__35 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Tuple.create(Symbol.intern(null, "b"), Symbol.intern(null, "a"))) })), RT.keyword(null, "line"), Integer.valueOf(23), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/iter.cljc" });
    const__36 = (Var)RT.var("synchrony.operation.iter", "insert");
    const__39 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Tuple.create(Symbol.intern(null, "b"), Symbol.intern(null, "a")), Symbol.intern(null, "v")) })), RT.keyword(null, "line"), Integer.valueOf(26), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/iter.cljc" });
    const__40 = (Var)RT.var("synchrony.operation.iter", "insert-next");
    const__43 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Tuple.create(Symbol.intern(null, "b"), Symbol.intern(null, "a")), Symbol.intern(null, "v")) })), RT.keyword(null, "line"), Integer.valueOf(29), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/iter.cljc" });
    const__44 = (Var)RT.var("synchrony.operation.iter", "insert-next-vals");
    const__47 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Tuple.create(Symbol.intern(null, "b"), Symbol.intern(null, "a")), Symbol.intern(null, "vs")) })), RT.keyword(null, "line"), Integer.valueOf(32), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/iter.cljc" });
    const__48 = (Var)RT.var("synchrony.operation.iter", "replace-next");
    const__51 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Tuple.create(Symbol.intern(null, "b"), Symbol.intern(null, "a")), Symbol.intern(null, "v")) })), RT.keyword(null, "line"), Integer.valueOf(35), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/operation/iter.cljc" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("synchrony.operation.iter__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
