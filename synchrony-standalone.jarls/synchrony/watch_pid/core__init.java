package synchrony.watch_pid;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.Keyword;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;

public class core__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__9;
  
  public static final Var const__10;
  
  public static final AFn const__12;
  
  public static final Var const__13;
  
  public static final AFn const__17;
  
  public static final Var const__18;
  
  public static final AFn const__21;
  
  public static final Var const__22;
  
  public static final AFn const__25;
  
  public static final Var const__26;
  
  public static final AFn const__28;
  
  public static final Var const__29;
  
  public static final Keyword const__30;
  
  public static void load() { // Byte code:
    //   0: getstatic synchrony/watch_pid/core__init.const__0 : Lclojure/lang/Var;
    //   3: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   6: checkcast clojure/lang/IFn
    //   9: getstatic synchrony/watch_pid/core__init.const__1 : Lclojure/lang/AFn;
    //   12: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   17: new synchrony/watch_pid/core$loading__6721__auto____64612
    //   20: dup
    //   21: invokespecial <init> : ()V
    //   24: checkcast clojure/lang/IFn
    //   27: invokeinterface invoke : ()Ljava/lang/Object;
    //   32: getstatic synchrony/watch_pid/core__init.const__1 : Lclojure/lang/AFn;
    //   35: checkcast clojure/lang/Symbol
    //   38: getstatic synchrony/watch_pid/core__init.const__2 : Lclojure/lang/AFn;
    //   41: invokevirtual equals : (Ljava/lang/Object;)Z
    //   44: ifeq -> 52
    //   47: aconst_null
    //   48: goto -> 67
    //   51: athrow
    //   52: new synchrony/watch_pid/core$fn__64687
    //   55: dup
    //   56: invokespecial <init> : ()V
    //   59: checkcast java/util/concurrent/Callable
    //   62: invokestatic runInTransaction : (Ljava/util/concurrent/Callable;)Ljava/lang/Object;
    //   65: pop
    //   66: aconst_null
    //   67: getstatic synchrony/watch_pid/core__init.const__3 : Lclojure/lang/Var;
    //   70: dup
    //   71: getstatic synchrony/watch_pid/core__init.const__9 : Lclojure/lang/AFn;
    //   74: checkcast clojure/lang/IPersistentMap
    //   77: invokevirtual setMeta : (Lclojure/lang/IPersistentMap;)V
    //   80: dup
    //   81: ldc 'os.name'
    //   83: checkcast java/lang/String
    //   86: invokestatic getProperty : (Ljava/lang/String;)Ljava/lang/String;
    //   89: checkcast java/lang/String
    //   92: invokevirtual toLowerCase : ()Ljava/lang/String;
    //   95: checkcast java/lang/String
    //   98: ldc 'windows'
    //   100: checkcast java/lang/CharSequence
    //   103: invokevirtual contains : (Ljava/lang/CharSequence;)Z
    //   106: ifeq -> 115
    //   109: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   112: goto -> 118
    //   115: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   118: invokevirtual bindRoot : (Ljava/lang/Object;)V
    //   121: getstatic synchrony/watch_pid/core__init.const__10 : Lclojure/lang/Var;
    //   124: dup
    //   125: getstatic synchrony/watch_pid/core__init.const__12 : Lclojure/lang/AFn;
    //   128: checkcast clojure/lang/IPersistentMap
    //   131: invokevirtual setMeta : (Lclojure/lang/IPersistentMap;)V
    //   134: dup
    //   135: ldc 'os.name'
    //   137: checkcast java/lang/String
    //   140: invokestatic getProperty : (Ljava/lang/String;)Ljava/lang/String;
    //   143: checkcast java/lang/String
    //   146: invokevirtual toLowerCase : ()Ljava/lang/String;
    //   149: checkcast java/lang/String
    //   152: ldc 'Mac OS X'
    //   154: checkcast java/lang/CharSequence
    //   157: invokevirtual contains : (Ljava/lang/CharSequence;)Z
    //   160: ifeq -> 169
    //   163: getstatic java/lang/Boolean.TRUE : Ljava/lang/Boolean;
    //   166: goto -> 172
    //   169: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   172: invokevirtual bindRoot : (Ljava/lang/Object;)V
    //   175: getstatic synchrony/watch_pid/core__init.const__13 : Lclojure/lang/Var;
    //   178: dup
    //   179: getstatic synchrony/watch_pid/core__init.const__17 : Lclojure/lang/AFn;
    //   182: checkcast clojure/lang/IPersistentMap
    //   185: invokevirtual setMeta : (Lclojure/lang/IPersistentMap;)V
    //   188: dup
    //   189: new synchrony/watch_pid/core$file_exists_QMARK_
    //   192: dup
    //   193: invokespecial <init> : ()V
    //   196: invokevirtual bindRoot : (Ljava/lang/Object;)V
    //   199: getstatic synchrony/watch_pid/core__init.const__18 : Lclojure/lang/Var;
    //   202: dup
    //   203: getstatic synchrony/watch_pid/core__init.const__21 : Lclojure/lang/AFn;
    //   206: checkcast clojure/lang/IPersistentMap
    //   209: invokevirtual setMeta : (Lclojure/lang/IPersistentMap;)V
    //   212: dup
    //   213: new synchrony/watch_pid/core$procfs_is_pid_running_QMARK_
    //   216: dup
    //   217: invokespecial <init> : ()V
    //   220: invokevirtual bindRoot : (Ljava/lang/Object;)V
    //   223: getstatic synchrony/watch_pid/core__init.const__22 : Lclojure/lang/Var;
    //   226: dup
    //   227: getstatic synchrony/watch_pid/core__init.const__25 : Lclojure/lang/AFn;
    //   230: checkcast clojure/lang/IPersistentMap
    //   233: invokevirtual setMeta : (Lclojure/lang/IPersistentMap;)V
    //   236: dup
    //   237: new synchrony/watch_pid/core$kill_is_pid_running_QMARK_
    //   240: dup
    //   241: invokespecial <init> : ()V
    //   244: invokevirtual bindRoot : (Ljava/lang/Object;)V
    //   247: getstatic synchrony/watch_pid/core__init.const__26 : Lclojure/lang/Var;
    //   250: dup
    //   251: getstatic synchrony/watch_pid/core__init.const__28 : Lclojure/lang/AFn;
    //   254: checkcast clojure/lang/IPersistentMap
    //   257: invokevirtual setMeta : (Lclojure/lang/IPersistentMap;)V
    //   260: dup
    //   261: getstatic synchrony/watch_pid/core__init.const__3 : Lclojure/lang/Var;
    //   264: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   267: dup
    //   268: ifnull -> 286
    //   271: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   274: if_acmpeq -> 287
    //   277: getstatic synchrony/watch_pid/core__init.const__29 : Lclojure/lang/Var;
    //   280: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   283: goto -> 347
    //   286: pop
    //   287: getstatic synchrony/watch_pid/core__init.const__13 : Lclojure/lang/Var;
    //   290: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   293: checkcast clojure/lang/IFn
    //   296: ldc '/proc'
    //   298: invokeinterface invoke : (Ljava/lang/Object;)Ljava/lang/Object;
    //   303: dup
    //   304: ifnull -> 322
    //   307: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   310: if_acmpeq -> 323
    //   313: getstatic synchrony/watch_pid/core__init.const__18 : Lclojure/lang/Var;
    //   316: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   319: goto -> 347
    //   322: pop
    //   323: getstatic synchrony/watch_pid/core__init.const__30 : Lclojure/lang/Keyword;
    //   326: dup
    //   327: ifnull -> 345
    //   330: getstatic java/lang/Boolean.FALSE : Ljava/lang/Boolean;
    //   333: if_acmpeq -> 346
    //   336: getstatic synchrony/watch_pid/core__init.const__22 : Lclojure/lang/Var;
    //   339: invokevirtual getRawRoot : ()Ljava/lang/Object;
    //   342: goto -> 347
    //   345: pop
    //   346: aconst_null
    //   347: invokevirtual bindRoot : (Ljava/lang/Object;)V
    //   350: return
    // Line number table:
    //   Java source line number -> byte code offset
    //   #1	-> 6
    //   #1	-> 12
    //   #1	-> 24
    //   #1	-> 27
    //   #1	-> 32
    //   #1	-> 41
    //   #1	-> 62
    //   #8	-> 86
    //   #8	-> 92
    //   #8	-> 103
    //   #11	-> 140
    //   #11	-> 146
    //   #11	-> 157
    //   #28	-> 261
    //   #28	-> 287
    //   #30	-> 293
    //   #30	-> 298
    //   #28	-> 323 }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "synchrony.watch-pid.core");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("synchrony.watch-pid.core", "windows?");
    const__9 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(7), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/watch_pid/core.clj" });
    const__10 = (Var)RT.var("synchrony.watch-pid.core", "mac?");
    const__12 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(10), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/watch_pid/core.clj" });
    const__13 = (Var)RT.var("synchrony.watch-pid.core", "file-exists?");
    const__17 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "file-name")) })), RT.keyword(null, "line"), Integer.valueOf(13), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/watch_pid/core.clj" });
    const__18 = (Var)RT.var("synchrony.watch-pid.core", "procfs-is-pid-running?");
    const__21 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pid")) })), RT.keyword(null, "line"), Integer.valueOf(17), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/watch_pid/core.clj" });
    const__22 = (Var)RT.var("synchrony.watch-pid.core", "kill-is-pid-running?");
    const__25 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pid")) })), RT.keyword(null, "line"), Integer.valueOf(21), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/watch_pid/core.clj" });
    const__26 = (Var)RT.var("synchrony.watch-pid.core", "is-pid-running?");
    const__28 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(27), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/watch_pid/core.clj" });
    const__29 = (Var)RT.var("synchrony.watch-pid.windows", "is-pid-running?");
    const__30 = (Keyword)RT.keyword(null, "else");
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("synchrony.watch_pid.core__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
