package synchrony.watch_pid;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class windows__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__9;
  
  public static final Var const__10;
  
  public static final Var const__11;
  
  public static final AFn const__15;
  
  public static final Var const__16;
  
  public static final AFn const__19;
  
  public static final Var const__20;
  
  public static final AFn const__23;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new windows.fn__64679());
    const__3.setMeta((IPersistentMap)const__9);
    const__3



      
      .bindRoot(((IFn)const__10.getRawRoot()).invoke(System.getenv((String)"windir"), "\\system32\\tasklist.exe"));
    const__11.setMeta((IPersistentMap)const__15);
    const__11.bindRoot(new windows.csv_data__GT_maps());
    const__16.setMeta((IPersistentMap)const__19);
    const__16.bindRoot(new windows.tasklist());
    const__20.setMeta((IPersistentMap)const__23);
    const__20.bindRoot(new windows.is_pid_running_QMARK_());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "synchrony.watch-pid.windows");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("synchrony.watch-pid.windows", "tasklist-cmd");
    const__9 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(6), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/watch_pid/windows.clj" });
    const__10 = (Var)RT.var("clojure.core", "str");
    const__11 = (Var)RT.var("synchrony.watch-pid.windows", "csv-data->maps");
    const__15 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "csv-data")) })), RT.keyword(null, "line"), Integer.valueOf(8), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/watch_pid/windows.clj" });
    const__16 = (Var)RT.var("synchrony.watch-pid.windows", "tasklist");
    const__19 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(13), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/watch_pid/windows.clj" });
    const__20 = (Var)RT.var("synchrony.watch-pid.windows", "is-pid-running?");
    const__23 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pid")) })), RT.keyword(null, "line"), Integer.valueOf(19), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/watch_pid/windows.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("synchrony.watch_pid.windows__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
