package synchrony;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class codecs__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final Keyword const__2;
  
  public static final AFn const__3;
  
  public static final AFn const__4;
  
  public static final Object const__5;
  
  public static final Var const__6;
  
  public static final Var const__7;
  
  public static final Var const__8;
  
  public static final Var const__9;
  
  public static final ISeq const__10;
  
  public static final Var const__11;
  
  public static final Var const__12;
  
  public static final AFn const__16;
  
  public static final Keyword const__17;
  
  public static final AFn const__18;
  
  public static final Keyword const__19;
  
  public static final Keyword const__20;
  
  public static final Keyword const__21;
  
  public static final AFn const__22;
  
  public static final Keyword const__23;
  
  public static final Var const__24;
  
  public static final Var const__25;
  
  public static final Var const__26;
  
  public static final AFn const__27;
  
  public static final AFn const__28;
  
  public static final Keyword const__29;
  
  public static final Var const__30;
  
  public static final AFn const__31;
  
  public static final Object const__32;
  
  public static final Var const__33;
  
  public static final ISeq const__34;
  
  public static final AFn const__36;
  
  public static final AFn const__37;
  
  public static final AFn const__39;
  
  public static final AFn const__40;
  
  public static final AFn const__41;
  
  public static final AFn const__42;
  
  public static final Var const__43;
  
  public static final Object const__44;
  
  public static final Var const__45;
  
  public static final AFn const__53;
  
  public static final Var const__54;
  
  public static final AFn const__57;
  
  public static final Var const__58;
  
  public static final AFn const__61;
  
  public static final Var const__62;
  
  public static final AFn const__65;
  
  public static final Var const__66;
  
  public static final AFn const__69;
  
  public static final Var const__70;
  
  public static final AFn const__72;
  
  public static final Var const__73;
  
  public static final AFn const__76;
  
  public static final Var const__77;
  
  public static final AFn const__80;
  
  public static final Var const__81;
  
  public static final AFn const__84;
  
  public static final Var const__85;
  
  public static final AFn const__88;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new codecs.fn__38677());
    const__45.setMeta((IPersistentMap)const__53);
    const__45.bindRoot(new codecs.encoded_data_QMARK_());
    const__54.setMeta((IPersistentMap)const__57);
    const__54.bindRoot(new codecs.encoded());
    const__58.setMeta((IPersistentMap)const__61);
    const__58.bindRoot(new codecs.write_bytes());
    const__62.setMeta((IPersistentMap)const__65);
    const__62.bindRoot(new codecs.read_bytes());
    const__66.setMeta((IPersistentMap)const__69);
    const__66.bindRoot(new codecs.encode_msgpack());
    const__70.setMeta((IPersistentMap)const__72);
    const__70




      
      .bindRoot(((IFn)new codecs.fn__38793()).invoke());
    const__73.setMeta((IPersistentMap)const__76);
    const__73.bindRoot(new codecs.encode_snappy());
    const__77.setMeta((IPersistentMap)const__80);
    const__77.bindRoot(new codecs.encode_aes256gcm96());
    const__81.setMeta((IPersistentMap)const__84);
    const__81.bindRoot(new codecs.encode_marshal());
    const__85.setMeta((IPersistentMap)const__88);
    const__85.bindRoot(new codecs.encode_chunking());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "synchrony.codecs")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Make encoded data know how to decode itself." }));
    const__2 = (Keyword)RT.keyword(null, "doc");
    const__3 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "Make encoded data know how to decode itself." });
    const__4 = (AFn)Symbol.intern(null, "clojure.core");
    const__5 = RT.classForName("synchrony.codecs.Decode");
    const__6 = (Var)RT.var("clojure.core", "alter-meta!");
    const__7 = (Var)RT.var("synchrony.codecs", "Decode");
    const__8 = (Var)RT.var("clojure.core", "assoc");
    const__9 = (Var)RT.var("clojure.core", "assert-same-protocol");
    const__10 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "decode")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Decode the wrapped data and return it.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "decode-opts")) })) })) }));
    const__11 = (Var)RT.var("clojure.core", "alter-var-root");
    const__12 = (Var)RT.var("clojure.core", "merge");
    const__16 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "synchrony.codecs.Decode"), RT.keyword(null, "on-interface"), RT.classForName("synchrony.codecs.Decode") });
    const__17 = (Keyword)RT.keyword(null, "sigs");
    const__18 = (AFn)RT.map(new Object[] { RT.keyword(null, "decode"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "decode")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Decode the wrapped data and return it.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "decode-opts")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "decode-opts")) })), RT.keyword(null, "doc"), "Decode the wrapped data and return it." }) });
    const__19 = (Keyword)RT.keyword(null, "var");
    const__20 = (Keyword)RT.keyword(null, "method-map");
    const__21 = (Keyword)RT.keyword(null, "decode");
    const__22 = (AFn)RT.map(new Object[] { RT.keyword(null, "decode"), RT.keyword(null, "decode") });
    const__23 = (Keyword)RT.keyword(null, "method-builders");
    const__24 = (Var)RT.var("clojure.core", "intern");
    const__25 = (Var)RT.var("clojure.core", "*ns*");
    const__26 = (Var)RT.var("clojure.core", "with-meta");
    const__27 = (AFn)((IObj)Symbol.intern(null, "decode")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Decode the wrapped data and return it.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "decode-opts")) })) }));
    const__28 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "decode")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Decode the wrapped data and return it.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "decode-opts")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "decode-opts")) })), RT.keyword(null, "doc"), "Decode the wrapped data and return it." });
    const__29 = (Keyword)RT.keyword(null, "protocol");
    const__30 = (Var)RT.var("clojure.core", "-reset-methods");
    const__31 = (AFn)Symbol.intern(null, "Decode");
    const__32 = RT.classForName("synchrony.codecs.DecodeData");
    const__33 = (Var)RT.var("synchrony.codecs", "DecodeData");
    const__34 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "decode-data")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Decode the given data and return it.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "data"), Symbol.intern(null, "decode-opts")) })) })) }));
    const__36 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "synchrony.codecs.DecodeData"), RT.keyword(null, "on-interface"), RT.classForName("synchrony.codecs.DecodeData") });
    const__37 = (AFn)RT.map(new Object[] { RT.keyword(null, "decode-data"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "decode-data")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Decode the given data and return it.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "data"), Symbol.intern(null, "decode-opts")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "data"), Symbol.intern(null, "decode-opts")) })), RT.keyword(null, "doc"), "Decode the given data and return it." }) });
    const__39 = (AFn)RT.map(new Object[] { RT.keyword(null, "decode-data"), RT.keyword(null, "decode-data") });
    const__40 = (AFn)((IObj)Symbol.intern(null, "decode-data")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Decode the given data and return it.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "data"), Symbol.intern(null, "decode-opts")) })) }));
    const__41 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "decode-data")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Decode the given data and return it.", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "data"), Symbol.intern(null, "decode-opts")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "this"), Symbol.intern(null, "data"), Symbol.intern(null, "decode-opts")) })), RT.keyword(null, "doc"), "Decode the given data and return it." });
    const__42 = (AFn)Symbol.intern(null, "DecodeData");
    const__43 = (Var)RT.var("clojure.core", "extend");
    const__44 = RT.classForName("java.lang.Object");
    const__45 = (Var)RT.var("synchrony.codecs", "encoded-data?");
    const__53 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "value")) })), RT.keyword(null, "line"), Integer.valueOf(31), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/codecs.clj" });
    const__54 = (Var)RT.var("synchrony.codecs", "encoded");
    const__57 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "data")), Tuple.create(Symbol.intern(null, "data"), Symbol.intern(null, "decoder"), Symbol.intern(null, "f")) })), RT.keyword(null, "line"), Integer.valueOf(34), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/codecs.clj" });
    const__58 = (Var)RT.var("synchrony.codecs", "write-bytes");
    const__61 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "data"), Symbol.intern(null, "output-stream"), Symbol.intern(null, "encode-opts")) })), RT.keyword(null, "line"), Integer.valueOf(44), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/codecs.clj" });
    const__62 = (Var)RT.var("synchrony.codecs", "read-bytes");
    const__65 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "input-stream"), Symbol.intern(null, "decode-opts")) })), RT.keyword(null, "line"), Integer.valueOf(49), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/codecs.clj" });
    const__66 = (Var)RT.var("synchrony.codecs", "encode-msgpack");
    const__69 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "data"), Symbol.intern(null, "encode-opts")) })), RT.keyword(null, "line"), Integer.valueOf(59), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/codecs.clj" });
    const__70 = (Var)RT.var("synchrony.codecs", "solaris?");
    const__72 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(69), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/codecs.clj" });
    const__73 = (Var)RT.var("synchrony.codecs", "encode-snappy");
    const__76 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "data"), Symbol.intern(null, "encode-opts")) })), RT.keyword(null, "line"), Integer.valueOf(75), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/codecs.clj" });
    const__77 = (Var)RT.var("synchrony.codecs", "encode-aes256gcm96");
    const__80 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "data"), Symbol.intern(null, "encode-opts")) })), RT.keyword(null, "line"), Integer.valueOf(87), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/codecs.clj" });
    const__81 = (Var)RT.var("synchrony.codecs", "encode-marshal");
    const__84 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "data"), Symbol.intern(null, "encode-opts")) })), RT.keyword(null, "line"), Integer.valueOf(97), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/codecs.clj" });
    const__85 = (Var)RT.var("synchrony.codecs", "encode-chunking");
    const__88 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "data"), Symbol.intern(null, "chunk-key"), Symbol.intern(null, "chunk-size")) })), RT.keyword(null, "line"), Integer.valueOf(112), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/codecs.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("synchrony.codecs__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
