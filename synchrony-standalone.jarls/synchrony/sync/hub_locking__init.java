package synchrony.sync;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class hub_locking__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__3;
  
  public static final AFn const__4;
  
  public static final Var const__5;
  
  public static final AFn const__14;
  
  public static final Var const__15;
  
  public static final AFn const__18;
  
  public static final Var const__19;
  
  public static final Keyword const__20;
  
  public static final Object const__21;
  
  public static final Var const__22;
  
  public static final AFn const__23;
  
  public static final Var const__24;
  
  public static final Keyword const__25;
  
  public static final Object const__26;
  
  public static final AFn const__27;
  
  public static final Var const__28;
  
  public static final Keyword const__29;
  
  public static final AFn const__30;
  
  public static final Var const__31;
  
  public static final Keyword const__32;
  
  public static final Object const__33;
  
  public static final AFn const__34;
  
  public static final Keyword const__35;
  
  public static final Object const__36;
  
  public static final AFn const__37;
  
  public static final Keyword const__38;
  
  public static final Object const__39;
  
  public static final Var const__40;
  
  public static final Keyword const__41;
  
  public static final AFn const__42;
  
  public static final Keyword const__43;
  
  public static final AFn const__44;
  
  public static final Keyword const__45;
  
  public static final Keyword const__46;
  
  public static final Keyword const__47;
  
  public static final Keyword const__48;
  
  public static final AFn const__49;
  
  public static final Keyword const__50;
  
  public static final AFn const__51;
  
  public static final Keyword const__52;
  
  public static final Keyword const__53;
  
  public static final AFn const__54;
  
  public static final Keyword const__55;
  
  public static final AFn const__56;
  
  public static final Keyword const__57;
  
  public static final AFn const__58;
  
  public static final Keyword const__59;
  
  public static final Var const__60;
  
  public static final AFn const__63;
  
  public static final Var const__64;
  
  public static final AFn const__67;
  
  public static final Var const__68;
  
  public static final AFn const__71;
  
  public static final Var const__72;
  
  public static final AFn const__75;
  
  public static final Var const__76;
  
  public static final AFn const__79;
  
  public static final Var const__80;
  
  public static final AFn const__83;
  
  public static final Var const__84;
  
  public static final AFn const__87;
  
  public static final Var const__88;
  
  public static final AFn const__91;
  
  public static final Var const__92;
  
  public static final AFn const__95;
  
  public static final Var const__96;
  
  public static final AFn const__99;
  
  public static final Var const__100;
  
  public static final AFn const__103;
  
  public static final Var const__104;
  
  public static final AFn const__107;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new hub_locking.fn__49031());
    const__5.setMeta((IPersistentMap)const__14);
    const__5.bindRoot(new hub_locking.locks_map());
    const__15.setMeta((IPersistentMap)const__18);
    const__15.bindRoot(new hub_locking.all_locks());
    const__60.setMeta((IPersistentMap)const__63);
    const__60.bindRoot(new hub_locking.app_id_from_entity_id());
    const__64.setMeta((IPersistentMap)const__67);
    const__64.bindRoot(new hub_locking.locked_with_lock());
    const__68.setMeta((IPersistentMap)const__71);
    const__68.bindRoot(new hub_locking.lock_expired_QMARK_());
    const__72.setMeta((IPersistentMap)const__75);
    const__72.bindRoot(new hub_locking.expired_locks_ids());
    const__76.setMeta((IPersistentMap)const__79);
    const__76.bindRoot(new hub_locking.gc_locks_BANG_());
    const__80.setMeta((IPersistentMap)const__83);
    const__80.bindRoot(new hub_locking.gc_is_due_QMARK_());
    const__84.setMeta((IPersistentMap)const__87);
    const__84.bindRoot(new hub_locking.maybe_gc_locks_BANG_());
    const__88.setMeta((IPersistentMap)const__91);
    const__88.bindRoot(new hub_locking.active_locks());
    const__92.setMeta((IPersistentMap)const__95);
    const__92.bindRoot(new hub_locking.active_locks_map());
    const__96.setMeta((IPersistentMap)const__99);
    const__96.bindRoot(new hub_locking.add_lock());
    const__100.setMeta((IPersistentMap)const__103);
    const__100.bindRoot(new hub_locking.remove_lock());
    const__104.setMeta((IPersistentMap)const__107);
    const__104.bindRoot(new hub_locking.maybe_lock_for_topic());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)((IObj)Symbol.intern(null, "synchrony.sync.hub-locking")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "This namespace is responsible for managing hub locking. Locks are maps\n  that match ::lock spec below. Locks are stored in a cluster-wide atom. API surface\n  is adding and removing locks by lock id, and checking if an entity is locked by\n  any of the active locks. Locks may specify timeouts after which they should be\n  released and garbage-collected. GC happens only when we need anything lock-related,\n  and at most once a second. The cluster-wide atom that holds locks is used by the hubs\n  namespace to add watchers and kill hubs whenever lock state changes. Hubs namespace\n  also checks if the topic is locked whenever hub is about to be created and throws\n  an error if that's the case." }));
    const__3 = (AFn)RT.map(new Object[] { RT.keyword(null, "doc"), "This namespace is responsible for managing hub locking. Locks are maps\n  that match ::lock spec below. Locks are stored in a cluster-wide atom. API surface\n  is adding and removing locks by lock id, and checking if an entity is locked by\n  any of the active locks. Locks may specify timeouts after which they should be\n  released and garbage-collected. GC happens only when we need anything lock-related,\n  and at most once a second. The cluster-wide atom that holds locks is used by the hubs\n  namespace to add watchers and kill hubs whenever lock state changes. Hubs namespace\n  also checks if the topic is locked whenever hub is about to be created and throws\n  an error if that's the case." });
    const__4 = (AFn)Symbol.intern(null, "clojure.core");
    const__5 = (Var)RT.var("synchrony.sync.hub-locking", "locks-map");
    const__14 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(25), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/sync/hub_locking.clj" });
    const__15 = (Var)RT.var("synchrony.sync.hub-locking", "all-locks");
    const__18 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(26), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/sync/hub_locking.clj" });
    const__19 = (Var)RT.var("clojure.spec.alpha", "def-impl");
    const__20 = (Keyword)RT.keyword("lock", "point-list");
    const__21 = PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "+"), Symbol.intern("clojure.core", "int?") }));
    const__22 = (Var)RT.var("clojure.spec.alpha", "rep+impl");
    const__23 = (AFn)Symbol.intern("clojure.core", "int?");
    const__24 = (Var)RT.var("clojure.core", "int?");
    const__25 = (Keyword)RT.keyword("lock", "point-list-literal");
    const__26 = PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "+"), Symbol.intern("clojure.core", "string?") }));
    const__27 = (AFn)Symbol.intern("clojure.core", "string?");
    const__28 = (Var)RT.var("clojure.core", "string?");
    const__29 = (Keyword)RT.keyword("lock", "all-confluence");
    const__30 = (AFn)Symbol.intern("clojure.core", "true?");
    const__31 = (Var)RT.var("clojure.core", "true?");
    const__32 = (Keyword)RT.keyword("lock", "app-id-whitelist");
    const__33 = PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "+"), Symbol.intern("clojure.core", "string?") }));
    const__34 = (AFn)Symbol.intern("clojure.core", "string?");
    const__35 = (Keyword)RT.keyword("lock", "app-id-blacklist");
    const__36 = PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "+"), Symbol.intern("clojure.core", "string?") }));
    const__37 = (AFn)Symbol.intern("clojure.core", "string?");
    const__38 = (Keyword)RT.keyword("synchrony.sync.hub-locking", "lock");
    const__39 = PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.spec.alpha", "keys"), RT.keyword(null, "opt-un"), Tuple.create(RT.keyword("synchrony.sync.hub-locking", "timeout-ms")), RT.keyword(null, "req-un"), Tuple.create(RT.keyword("synchrony.sync.hub-locking", "created-at-ms"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "or"), RT.keyword("lock", "point-list"), RT.keyword("lock", "point-list-literal"), RT.keyword("lock", "all-confluence") }))) }));
    const__40 = (Var)RT.var("clojure.spec.alpha", "map-spec-impl");
    const__41 = (Keyword)RT.keyword(null, "req-un");
    const__42 = (AFn)Tuple.create(RT.keyword("synchrony.sync.hub-locking", "created-at-ms"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "or"), RT.keyword("lock", "point-list"), RT.keyword("lock", "point-list-literal"), RT.keyword("lock", "all-confluence") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(36), RT.keyword(null, "column"), Integer.valueOf(20) })));
    const__43 = (Keyword)RT.keyword(null, "opt-un");
    const__44 = (AFn)Tuple.create(RT.keyword("synchrony.sync.hub-locking", "timeout-ms"));
    const__45 = (Keyword)RT.keyword(null, "gfn");
    const__46 = (Keyword)RT.keyword(null, "pred-exprs");
    const__47 = (Keyword)RT.keyword(null, "keys-pred");
    const__48 = (Keyword)RT.keyword(null, "opt-keys");
    const__49 = (AFn)Tuple.create(RT.keyword(null, "timeout-ms"));
    const__50 = (Keyword)RT.keyword(null, "req-specs");
    const__51 = (AFn)Tuple.create(RT.keyword("synchrony.sync.hub-locking", "created-at-ms"), RT.keyword("lock", "point-list"), RT.keyword("lock", "point-list-literal"), RT.keyword("lock", "all-confluence"));
    const__52 = (Keyword)RT.keyword(null, "req");
    const__53 = (Keyword)RT.keyword(null, "req-keys");
    const__54 = (AFn)Tuple.create(RT.keyword(null, "created-at-ms"), RT.keyword(null, "point-list"), RT.keyword(null, "point-list-literal"), RT.keyword(null, "all-confluence"));
    const__55 = (Keyword)RT.keyword(null, "opt-specs");
    const__56 = (AFn)Tuple.create(RT.keyword("synchrony.sync.hub-locking", "timeout-ms"));
    const__57 = (Keyword)RT.keyword(null, "pred-forms");
    const__58 = (AFn)Tuple.create(PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "map?"), Symbol.intern(null, "%") })) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "contains?"), Symbol.intern(null, "%"), RT.keyword(null, "created-at-ms") })) })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "fn"), Tuple.create(Symbol.intern(null, "%")), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "or"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "contains?"), Symbol.intern(null, "%"), RT.keyword(null, "point-list") })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "contains?"), Symbol.intern(null, "%"), RT.keyword(null, "point-list-literal") })), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("clojure.core", "contains?"), Symbol.intern(null, "%"), RT.keyword(null, "all-confluence") })) })) })));
    const__59 = (Keyword)RT.keyword(null, "opt");
    const__60 = (Var)RT.var("synchrony.sync.hub-locking", "app-id-from-entity-id");
    const__63 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "entity-id")) })), RT.keyword(null, "line"), Integer.valueOf(40), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/sync/hub_locking.clj" });
    const__64 = (Var)RT.var("synchrony.sync.hub-locking", "locked-with-lock");
    const__67 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "lock"), Symbol.intern(null, "entity-id")) })), RT.keyword(null, "line"), Integer.valueOf(43), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/sync/hub_locking.clj" });
    const__68 = (Var)RT.var("synchrony.sync.hub-locking", "lock-expired?");
    const__71 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "created-at-ms"), Symbol.intern(null, "timeout-ms")), RT.keyword(null, "as"), Symbol.intern(null, "lock") })) })), RT.keyword(null, "line"), Integer.valueOf(57), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/sync/hub_locking.clj" });
    const__72 = (Var)RT.var("synchrony.sync.hub-locking", "expired-locks-ids");
    const__75 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(61), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/sync/hub_locking.clj" });
    const__76 = (Var)RT.var("synchrony.sync.hub-locking", "gc-locks!");
    const__79 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(64), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/sync/hub_locking.clj" });
    const__80 = (Var)RT.var("synchrony.sync.hub-locking", "gc-is-due?");
    const__83 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(70), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/sync/hub_locking.clj" });
    const__84 = (Var)RT.var("synchrony.sync.hub-locking", "maybe-gc-locks!");
    const__87 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(74), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/sync/hub_locking.clj" });
    const__88 = (Var)RT.var("synchrony.sync.hub-locking", "active-locks");
    const__91 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(78), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/sync/hub_locking.clj" });
    const__92 = (Var)RT.var("synchrony.sync.hub-locking", "active-locks-map");
    const__95 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create() })), RT.keyword(null, "line"), Integer.valueOf(82), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/sync/hub_locking.clj" });
    const__96 = (Var)RT.var("synchrony.sync.hub-locking", "add-lock");
    const__99 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "lock-id"), Symbol.intern(null, "lock")) })), RT.keyword(null, "line"), Integer.valueOf(86), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/sync/hub_locking.clj" });
  }
  
  public static void __init1() {
    const__100 = (Var)RT.var("synchrony.sync.hub-locking", "remove-lock");
    const__103 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "lock-id")) })), RT.keyword(null, "line"), Integer.valueOf(94), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/sync/hub_locking.clj" });
    const__104 = (Var)RT.var("synchrony.sync.hub-locking", "maybe-lock-for-topic");
    const__107 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "topic")) })), RT.keyword(null, "line"), Integer.valueOf(98), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/sync/hub_locking.clj" });
  }
  
  static  {
    __init0();
    __init1();
    Compiler.pushNSandLoader(RT.classForName("synchrony.sync.hub_locking__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
