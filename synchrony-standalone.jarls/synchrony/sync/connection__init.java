package synchrony.sync;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class connection__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__11;
  
  public static final Var const__12;
  
  public static final AFn const__15;
  
  public static final Var const__16;
  
  public static final AFn const__19;
  
  public static final Var const__20;
  
  public static final AFn const__23;
  
  public static final Var const__24;
  
  public static final AFn const__27;
  
  public static final Var const__28;
  
  public static final AFn const__31;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new connection.fn__34571());
    const__3.setMeta((IPersistentMap)const__11);
    const__3.bindRoot(new connection.connection());
    const__12.setMeta((IPersistentMap)const__15);
    const__12.bindRoot(new connection.connect_stream());
    const__16.setMeta((IPersistentMap)const__19);
    const__16.bindRoot(new connection.open_from_stream());
    const__20.setMeta((IPersistentMap)const__23);
    const__20.bindRoot(new connection.open_from_multi());
    const__24.setMeta((IPersistentMap)const__27);
    const__24.bindRoot(new connection.close());
    const__28.setMeta((IPersistentMap)const__31);
    const__28.bindRoot(new connection.request_BANG_());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "synchrony.sync.connection");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("synchrony.sync.connection", "connection");
    const__11 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(), Tuple.create(Symbol.intern(null, "G__34573")) })), RT.keyword(null, "line"), Integer.valueOf(13), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/sync/connection.cljc" });
    const__12 = (Var)RT.var("synchrony.sync.connection", "connect-stream");
    const__15 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "s"), Symbol.intern(null, "conn")) })), RT.keyword(null, "line"), Integer.valueOf(24), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/sync/connection.cljc" });
    const__16 = (Var)RT.var("synchrony.sync.connection", "open-from-stream");
    const__19 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "opts"), Symbol.intern(null, "s"), Symbol.intern(null, "in"), Symbol.intern(null, "out")), Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "topic"), Symbol.intern(null, "jwt"), Symbol.intern(null, "origin"), Symbol.intern(null, "stateless"), Symbol.intern(null, "request-timeout-ms")), RT.keyword(null, "as"), Symbol.intern(null, "conn-opts") }), Symbol.intern(null, "s"), Symbol.intern(null, "in"), Symbol.intern(null, "out"), Symbol.intern(null, "s-in"), Symbol.intern(null, "s-out")) })), RT.keyword(null, "line"), Integer.valueOf(35), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/sync/connection.cljc" });
    const__20 = (Var)RT.var("synchrony.sync.connection", "open-from-multi");
    const__23 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "opts"), Symbol.intern(null, "multi"), Symbol.intern(null, "in"), Symbol.intern(null, "out")), Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "topic"), Symbol.intern(null, "jwt"), Symbol.intern(null, "origin"), Symbol.intern(null, "stateless"), Symbol.intern(null, "request-timeout-ms")), RT.keyword(null, "as"), Symbol.intern(null, "opts") }), Symbol.intern(null, "multi"), Symbol.intern(null, "in"), Symbol.intern(null, "out"), Symbol.intern(null, "m-in"), Symbol.intern(null, "m-out")) })), RT.keyword(null, "line"), Integer.valueOf(55), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/sync/connection.cljc" });
    const__24 = (Var)RT.var("synchrony.sync.connection", "close");
    const__27 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "conn")) })), RT.keyword(null, "line"), Integer.valueOf(77), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/sync/connection.cljc" });
    const__28 = (Var)RT.var("synchrony.sync.connection", "request!");
    const__31 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "conn"), Symbol.intern(null, "message")), Tuple.create(Symbol.intern(null, "conn"), Symbol.intern(null, "message"), Symbol.intern(null, "timeout-ch")) })), RT.keyword(null, "line"), Integer.valueOf(80), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/sync/connection.cljc" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("synchrony.sync.connection__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
