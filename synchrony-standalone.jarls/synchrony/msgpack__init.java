package synchrony;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.util.Arrays;
import java.util.concurrent.Callable;
import org.msgpack.jackson.dataformat.MessagePackFactory;

public class msgpack__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__11;
  
  public static final Var const__12;
  
  public static final AFn const__16;
  
  public static final Var const__17;
  
  public static final AFn const__20;
  
  public static final Var const__21;
  
  public static final AFn const__24;
  
  public static final Var const__25;
  
  public static final AFn const__28;
  
  public static void load() { LockingTransaction.runInTransaction((Callable)new msgpack.fn__38671());
    const__3.setMeta((IPersistentMap)const__11);
    const__3.bindRoot(new ObjectMapper((JsonFactory)new MessagePackFactory()));
    const__12.setMeta((IPersistentMap)const__16);
    const__12.bindRoot(new msgpack.serialize_msgpack());
    const__17.setMeta((IPersistentMap)const__20);
    const__17.bindRoot(new msgpack.deserialize_msgpack());
    const__21.setMeta((IPersistentMap)const__24);
    const__21.bindRoot(new msgpack.write_msgpack());
    const__25.setMeta((IPersistentMap)const__28);
    const__25.bindRoot(new msgpack.read_msgpack()); }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "synchrony.msgpack");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("synchrony.msgpack", "mapper");
    const__11 = (AFn)RT.map(new Object[] { RT.keyword(null, "tag"), RT.classForName("com.fasterxml.jackson.databind.ObjectMapper"), RT.keyword(null, "line"), Integer.valueOf(5), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/msgpack.clj" });
    const__12 = (Var)RT.var("synchrony.msgpack", "serialize-msgpack");
    const__16 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "data")) })), RT.keyword(null, "line"), Integer.valueOf(7), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/msgpack.clj" });
    const__17 = (Var)RT.var("synchrony.msgpack", "deserialize-msgpack");
    const__20 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "data")) })), RT.keyword(null, "line"), Integer.valueOf(10), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/msgpack.clj" });
    const__21 = (Var)RT.var("synchrony.msgpack", "write-msgpack");
    const__24 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "data")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "Object") })), ((IObj)Symbol.intern(null, "output")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "java.io.OutputStream") }))) })), RT.keyword(null, "line"), Integer.valueOf(13), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/msgpack.clj" });
    const__25 = (Var)RT.var("synchrony.msgpack", "read-msgpack");
    const__28 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(((IObj)Symbol.intern(null, "input")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "tag"), Symbol.intern(null, "java.io.InputStream") }))) })), RT.keyword(null, "line"), Integer.valueOf(16), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/msgpack.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("synchrony.msgpack__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
