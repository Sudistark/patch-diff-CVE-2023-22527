package synchrony.metrics;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class impl__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__11;
  
  public static final Var const__12;
  
  public static final AFn const__15;
  
  public static final Var const__16;
  
  public static final AFn const__19;
  
  public static final Var const__20;
  
  public static final AFn const__23;
  
  public static final Var const__24;
  
  public static final AFn const__27;
  
  public static final Var const__28;
  
  public static final AFn const__31;
  
  public static final Var const__32;
  
  public static final AFn const__35;
  
  public static void load() { LockingTransaction.runInTransaction((Callable)new impl.fn__23845());
    const__3.setMeta((IPersistentMap)const__11);
    const__3.bindRoot(new impl.double_to_string());
    const__12.setMeta((IPersistentMap)const__15);
    const__12.bindRoot(new impl.format_message());
    const__16.setMeta((IPersistentMap)const__19);
    const__16.bindRoot(new impl.send_metric());
    const__20.setMeta((IPersistentMap)const__23);
    const__20.bindRoot(new impl.update_gauge());
    const__24.setMeta((IPersistentMap)const__27);
    const__24.bindRoot(new impl.update_counter());
    const__28.setMeta((IPersistentMap)const__31);
    const__28.bindRoot(new impl.update_exec_time());
    const__32.setMeta((IPersistentMap)const__35);
    const__32.bindRoot(new impl.update_set()); }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "synchrony.metrics.impl");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("synchrony.metrics.impl", "double-to-string");
    const__11 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "value")) })), RT.keyword(null, "line"), Integer.valueOf(6), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/metrics/impl.clj" });
    const__12 = (Var)RT.var("synchrony.metrics.impl", "format-message");
    const__15 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "namespace"), Symbol.intern(null, "value"), Symbol.intern(null, "type"), Symbol.intern(null, "tags"), Symbol.intern(null, "sample-rate")), RT.keyword(null, "as"), Symbol.intern(null, "message") })) })), RT.keyword(null, "line"), Integer.valueOf(12), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/metrics/impl.clj" });
    const__16 = (Var)RT.var("synchrony.metrics.impl", "send-metric");
    const__19 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "message")) })), RT.keyword(null, "line"), Integer.valueOf(20), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/metrics/impl.clj" });
    const__20 = (Var)RT.var("synchrony.metrics.impl", "update-gauge");
    const__23 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "name"), Symbol.intern(null, "value"), Symbol.intern(null, "&"), RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "sample-rate"), Symbol.intern(null, "tags")), RT.keyword(null, "as"), Symbol.intern(null, "opts") })) })), RT.keyword(null, "line"), Integer.valueOf(23), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/metrics/impl.clj" });
    const__24 = (Var)RT.var("synchrony.metrics.impl", "update-counter");
    const__27 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "name"), Symbol.intern(null, "delta"), Symbol.intern(null, "&"), RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "sample-rate"), Symbol.intern(null, "tags")), RT.keyword(null, "as"), Symbol.intern(null, "opts") })) })), RT.keyword(null, "line"), Integer.valueOf(30), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/metrics/impl.clj" });
    const__28 = (Var)RT.var("synchrony.metrics.impl", "update-exec-time");
    const__31 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "name"), Symbol.intern(null, "value-ms"), Symbol.intern(null, "&"), RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "sample-rate"), Symbol.intern(null, "tags")), RT.keyword(null, "as"), Symbol.intern(null, "opts") })) })), RT.keyword(null, "line"), Integer.valueOf(37), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/metrics/impl.clj" });
    const__32 = (Var)RT.var("synchrony.metrics.impl", "update-set");
    const__35 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "name"), Symbol.intern(null, "value"), Symbol.intern(null, "&"), RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "sample-rate"), Symbol.intern(null, "tags")), RT.keyword(null, "as"), Symbol.intern(null, "opts") })) })), RT.keyword(null, "line"), Integer.valueOf(44), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/metrics/impl.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("synchrony.metrics.impl__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
