package synchrony;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.ISeq;
import clojure.lang.Keyword;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class bucket__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Object const__3;
  
  public static final Var const__4;
  
  public static final Var const__5;
  
  public static final Var const__6;
  
  public static final Keyword const__7;
  
  public static final Var const__8;
  
  public static final ISeq const__9;
  
  public static final Var const__10;
  
  public static final Var const__11;
  
  public static final AFn const__15;
  
  public static final Keyword const__16;
  
  public static final AFn const__17;
  
  public static final Keyword const__18;
  
  public static final Keyword const__19;
  
  public static final AFn const__23;
  
  public static final Keyword const__24;
  
  public static final Var const__25;
  
  public static final Var const__26;
  
  public static final Var const__27;
  
  public static final AFn const__28;
  
  public static final AFn const__29;
  
  public static final Keyword const__30;
  
  public static final AFn const__31;
  
  public static final AFn const__32;
  
  public static final AFn const__33;
  
  public static final AFn const__34;
  
  public static final Var const__35;
  
  public static final AFn const__36;
  
  public static final Var const__37;
  
  public static final AFn const__45;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new bucket.fn__41579());
    const__37.setMeta((IPersistentMap)const__45);
    const__37.bindRoot(new bucket.create_in_memory_bucket());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "synchrony.bucket");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = RT.classForName("synchrony.bucket.Bucket");
    const__4 = (Var)RT.var("clojure.core", "alter-meta!");
    const__5 = (Var)RT.var("synchrony.bucket", "Bucket");
    const__6 = (Var)RT.var("clojure.core", "assoc");
    const__7 = (Keyword)RT.keyword(null, "doc");
    const__8 = (Var)RT.var("clojure.core", "assert-same-protocol");
    const__9 = (ISeq)PersistentList.create(Arrays.asList(new Object[] { ((IObj)Symbol.intern(null, "put-value")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Puts a value into the bucket identified by key.\n     If the bucket doesn't exist, creates it.\n    (async)", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store"), Symbol.intern(null, "key"), Symbol.intern(null, "value")) })) })), ((IObj)Symbol.intern(null, "get-all")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Gets all values from the bucket identified by key.\n    Sort-order is undefined.\n    (async)", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store"), Symbol.intern(null, "key")) })) })), ((IObj)Symbol.intern(null, "delete")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Deletes the bucket identifyed by key.\n    (async)", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store"), Symbol.intern(null, "key")) })) })) }));
    const__10 = (Var)RT.var("clojure.core", "alter-var-root");
    const__11 = (Var)RT.var("clojure.core", "merge");
    const__15 = (AFn)RT.map(new Object[] { RT.keyword(null, "on"), Symbol.intern(null, "synchrony.bucket.Bucket"), RT.keyword(null, "on-interface"), RT.classForName("synchrony.bucket.Bucket") });
    const__16 = (Keyword)RT.keyword(null, "sigs");
    const__17 = (AFn)RT.map(new Object[] { RT.keyword(null, "put-value"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "put-value")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Puts a value into the bucket identified by key.\n     If the bucket doesn't exist, creates it.\n    (async)", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store"), Symbol.intern(null, "key"), Symbol.intern(null, "value")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store"), Symbol.intern(null, "key"), Symbol.intern(null, "value")) })), RT.keyword(null, "doc"), "Puts a value into the bucket identified by key.\n     If the bucket doesn't exist, creates it.\n    (async)" }), RT.keyword(null, "get-all"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "get-all")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Gets all values from the bucket identified by key.\n    Sort-order is undefined.\n    (async)", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store"), Symbol.intern(null, "key")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store"), Symbol.intern(null, "key")) })), RT.keyword(null, "doc"), "Gets all values from the bucket identified by key.\n    Sort-order is undefined.\n    (async)" }), RT.keyword(null, "delete"), RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "delete")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Deletes the bucket identifyed by key.\n    (async)", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store"), Symbol.intern(null, "key")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store"), Symbol.intern(null, "key")) })), RT.keyword(null, "doc"), "Deletes the bucket identifyed by key.\n    (async)" }) });
    const__18 = (Keyword)RT.keyword(null, "var");
    const__19 = (Keyword)RT.keyword(null, "method-map");
    const__23 = (AFn)RT.map(new Object[] { RT.keyword(null, "delete"), RT.keyword(null, "delete"), RT.keyword(null, "get-all"), RT.keyword(null, "get-all"), RT.keyword(null, "put-value"), RT.keyword(null, "put-value") });
    const__24 = (Keyword)RT.keyword(null, "method-builders");
    const__25 = (Var)RT.var("clojure.core", "intern");
    const__26 = (Var)RT.var("clojure.core", "*ns*");
    const__27 = (Var)RT.var("clojure.core", "with-meta");
    const__28 = (AFn)((IObj)Symbol.intern(null, "put-value")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Puts a value into the bucket identified by key.\n     If the bucket doesn't exist, creates it.\n    (async)", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store"), Symbol.intern(null, "key"), Symbol.intern(null, "value")) })) }));
    const__29 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "put-value")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Puts a value into the bucket identified by key.\n     If the bucket doesn't exist, creates it.\n    (async)", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store"), Symbol.intern(null, "key"), Symbol.intern(null, "value")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store"), Symbol.intern(null, "key"), Symbol.intern(null, "value")) })), RT.keyword(null, "doc"), "Puts a value into the bucket identified by key.\n     If the bucket doesn't exist, creates it.\n    (async)" });
    const__30 = (Keyword)RT.keyword(null, "protocol");
    const__31 = (AFn)((IObj)Symbol.intern(null, "delete")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Deletes the bucket identifyed by key.\n    (async)", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store"), Symbol.intern(null, "key")) })) }));
    const__32 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "delete")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Deletes the bucket identifyed by key.\n    (async)", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store"), Symbol.intern(null, "key")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store"), Symbol.intern(null, "key")) })), RT.keyword(null, "doc"), "Deletes the bucket identifyed by key.\n    (async)" });
    const__33 = (AFn)((IObj)Symbol.intern(null, "get-all")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Gets all values from the bucket identified by key.\n    Sort-order is undefined.\n    (async)", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store"), Symbol.intern(null, "key")) })) }));
    const__34 = (AFn)RT.map(new Object[] { RT.keyword(null, "name"), ((IObj)Symbol.intern(null, "get-all")).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "doc"), "Gets all values from the bucket identified by key.\n    Sort-order is undefined.\n    (async)", RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store"), Symbol.intern(null, "key")) })) })), RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "store"), Symbol.intern(null, "key")) })), RT.keyword(null, "doc"), "Gets all values from the bucket identified by key.\n    Sort-order is undefined.\n    (async)" });
    const__35 = (Var)RT.var("clojure.core", "-reset-methods");
    const__36 = (AFn)Symbol.intern(null, "Bucket");
    const__37 = (Var)RT.var("synchrony.bucket", "create-in-memory-bucket");
    const__45 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Tuple.create(Symbol.intern(null, "values-by-key"))) })), RT.keyword(null, "line"), Integer.valueOf(32), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/bucket.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("synchrony.bucket__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
