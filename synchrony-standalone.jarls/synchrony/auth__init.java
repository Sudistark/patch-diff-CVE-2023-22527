package synchrony;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentHashSet;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class auth__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__11;
  
  public static final Var const__12;
  
  public static final AFn const__15;
  
  public static final Var const__16;
  
  public static final AFn const__19;
  
  public static final Var const__20;
  
  public static final AFn const__23;
  
  public static final Var const__24;
  
  public static final AFn const__29;
  
  public static final Var const__30;
  
  public static final AFn const__33;
  
  public static final Var const__34;
  
  public static final AFn const__36;
  
  public static final AFn const__43;
  
  public static final Var const__44;
  
  public static final AFn const__47;
  
  public static final Var const__48;
  
  public static final AFn const__51;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new auth.fn__25737());
    const__3.setMeta((IPersistentMap)const__11);
    const__3.bindRoot(new auth.get_secret());
    const__12.setMeta((IPersistentMap)const__15);
    const__12.bindRoot(new auth.c_get());
    const__16.setMeta((IPersistentMap)const__19);
    const__16.bindRoot(new auth.app_id_from_iss());
    const__20.setMeta((IPersistentMap)const__23);
    const__20.bindRoot(new auth.qualify_channel());
    const__24.setMeta((IPersistentMap)const__29);
    const__24.bindRoot(new auth.verify_jwt());
    const__30.setMeta((IPersistentMap)const__33);
    const__30.bindRoot(new auth.parse_verify());
    const__34.setMeta((IPersistentMap)const__36);
    const__34.bindRoot(const__43);
    const__44.setMeta((IPersistentMap)const__47);
    const__44.bindRoot(new auth.admin_QMARK_());
    const__48.setMeta((IPersistentMap)const__51);
    const__48.bindRoot(new auth.authorized_QMARK_());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "synchrony.auth");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("synchrony.auth", "get-secret");
    const__11 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "app-id")) })), RT.keyword(null, "line"), Integer.valueOf(24), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/auth.clj" });
    const__12 = (Var)RT.var("synchrony.auth", "c-get");
    const__15 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "&"), Symbol.intern(null, "path")) })), RT.keyword(null, "line"), Integer.valueOf(34), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/auth.clj" });
    const__16 = (Var)RT.var("synchrony.auth", "app-id-from-iss");
    const__19 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "iss")) })), RT.keyword(null, "line"), Integer.valueOf(37), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/auth.clj" });
    const__20 = (Var)RT.var("synchrony.auth", "qualify-channel");
    const__23 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "app-id"), Symbol.intern(null, "channel")) })), RT.keyword(null, "line"), Integer.valueOf(41), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/auth.clj" });
    const__24 = (Var)RT.var("synchrony.auth", "verify-jwt");
    const__29 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "jwt"), Symbol.intern(null, "secret")) })), RT.keyword(null, "doc"), "Wrap jwt/verify to track JWT errors in DD", RT.keyword(null, "line"), Integer.valueOf(44), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "synchrony/auth.clj" });
    const__30 = (Var)RT.var("synchrony.auth", "parse-verify");
    const__33 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "jwt-str")) })), RT.keyword(null, "doc"), "Parses and verifies the given token.", RT.keyword(null, "line"), Integer.valueOf(59), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/auth.clj" });
    const__34 = (Var)RT.var("synchrony.auth", "perm-sets");
    const__36 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(103), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/auth.clj" });
    const__43 = (AFn)RT.map(new Object[] { RT.keyword(null, "read"), PersistentHashSet.create(new Object[] { RT.keyword(null, "full"), RT.keyword(null, "read"), RT.keyword(null, "write") }), RT.keyword(null, "write"), PersistentHashSet.create(new Object[] { RT.keyword(null, "full"), RT.keyword(null, "write") }), RT.keyword(null, "full"), PersistentHashSet.create(new Object[] { RT.keyword(null, "full") }) });
    const__44 = (Var)RT.var("synchrony.auth", "admin?");
    const__47 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "access")), RT.keyword(null, "as"), Symbol.intern(null, "auth") })) })), RT.keyword(null, "line"), Integer.valueOf(108), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/auth.clj" });
    const__48 = (Var)RT.var("synchrony.auth", "authorized?");
    const__51 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "auth"), Symbol.intern(null, "channel"), Symbol.intern(null, "perm")) })), RT.keyword(null, "line"), Integer.valueOf(111), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/auth.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("synchrony.auth__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
