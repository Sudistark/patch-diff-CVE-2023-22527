package synchrony;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;
import java.util.regex.Pattern;

public class css__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__9;
  
  public static final Object const__10;
  
  public static final Var const__11;
  
  public static final AFn const__13;
  
  public static final Var const__14;
  
  public static final Var const__15;
  
  public static final AFn const__19;
  
  public static final Var const__20;
  
  public static final AFn const__24;
  
  public static final Var const__25;
  
  public static final AFn const__28;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new css.fn__59207());
    const__3.setMeta((IPersistentMap)const__9);
    const__3.bindRoot(const__10);
    const__11.setMeta((IPersistentMap)const__13);
    const__11

















      
      .bindRoot(((IFn)const__14.getRawRoot()).invoke(new css.fn__59210()));
    const__15.setMeta((IPersistentMap)const__19);
    const__15.bindRoot(new css.parse_style_declarations());
    const__20.setMeta((IPersistentMap)const__24);
    const__20.bindRoot(new css.aset_entry());
    const__25.setMeta((IPersistentMap)const__28);
    const__25.bindRoot(new css.stringify_style_declarations());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "synchrony.css");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("synchrony.css", "style-declarations-re");
    const__9 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(16), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/css.cljc" });
    const__10 = Pattern.compile("([^:]*):((?:[^;\\'\\\"]*(?:\\\"(?:[^\\\"\\\\]*(?:\\\\.)?)*\\\")?)*(?:[^;\\'\\\"]*(?:\\'(?:[^\\'\\\\]*(?:\\\\.)?)*\\')?)*);?");
    const__11 = (Var)RT.var("synchrony.css", "parse-style-declarations-xf");
    const__13 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(19), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/css.cljc" });
    const__14 = (Var)RT.var("clojure.core", "map");
    const__15 = (Var)RT.var("synchrony.css", "parse-style-declarations");
    const__19 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "attr-str")) })), RT.keyword(null, "line"), Integer.valueOf(23), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/css.cljc" });
    const__20 = (Var)RT.var("synchrony.css", "aset-entry");
    const__24 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "obj")), Tuple.create(Symbol.intern(null, "obj"), Tuple.create(Symbol.intern(null, "k"), Symbol.intern(null, "v"))) })), RT.keyword(null, "line"), Integer.valueOf(27), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/css.cljc" });
    const__25 = (Var)RT.var("synchrony.css", "stringify-style-declarations");
    const__28 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "style-map")) })), RT.keyword(null, "line"), Integer.valueOf(38), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/css.cljc" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("synchrony.css__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
