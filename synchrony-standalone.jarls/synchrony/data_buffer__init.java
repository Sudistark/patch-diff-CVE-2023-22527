package synchrony;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.PersistentVector;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class data_buffer__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__11;
  
  public static final Var const__12;
  
  public static final AFn const__14;
  
  public static final Var const__15;
  
  public static final AFn const__18;
  
  public static final Var const__19;
  
  public static final AFn const__22;
  
  public static final Var const__23;
  
  public static final AFn const__26;
  
  public static final Var const__27;
  
  public static final AFn const__31;
  
  public static final Var const__32;
  
  public static final AFn const__35;
  
  public static final Var const__36;
  
  public static final AFn const__39;
  
  public static void load() { LockingTransaction.runInTransaction((Callable)new data_buffer.fn__34701());
    const__3.setMeta((IPersistentMap)const__11);
    const__3.bindRoot(new data_buffer.parse_chunk());
    const__12.setMeta((IPersistentMap)const__14);
    const__12.bindRoot(PersistentVector.EMPTY);
    const__15.setMeta((IPersistentMap)const__18);
    const__15.bindRoot(new data_buffer.assert_valid());
    const__19.setMeta((IPersistentMap)const__22);
    const__19.bindRoot(new data_buffer.drop_invalid());
    const__23.setMeta((IPersistentMap)const__26);
    const__23.bindRoot(new data_buffer.decode());
    const__27.setMeta((IPersistentMap)const__31);
    const__27.bindRoot(new data_buffer.encode());
    const__32.setMeta((IPersistentMap)const__35);
    const__32.bindRoot(new data_buffer.decoder());
    const__36.setMeta((IPersistentMap)const__39);
    const__36.bindRoot(new data_buffer.encoder()); }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "synchrony.data-buffer");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("synchrony.data-buffer", "parse-chunk");
    const__11 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "chunk")) })), RT.keyword(null, "line"), Integer.valueOf(6), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data_buffer.cljc" });
    const__12 = (Var)RT.var("synchrony.data-buffer", "empty");
    const__14 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(12), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data_buffer.cljc" });
    const__15 = (Var)RT.var("synchrony.data-buffer", "assert-valid");
    const__18 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "state"), Symbol.intern(null, "cnt"), Symbol.intern(null, "closed?")) })), RT.keyword(null, "line"), Integer.valueOf(14), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data_buffer.cljc" });
    const__19 = (Var)RT.var("synchrony.data-buffer", "drop-invalid");
    const__22 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "state"), Symbol.intern(null, "cnt"), Symbol.intern(null, "closed?")) })), RT.keyword(null, "line"), Integer.valueOf(23), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data_buffer.cljc" });
    const__23 = (Var)RT.var("synchrony.data-buffer", "decode");
    const__26 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "assertion")), Tuple.create(Symbol.intern(null, "assertion"), Symbol.intern(null, "state"), Symbol.intern(null, "chunk")) })), RT.keyword(null, "line"), Integer.valueOf(27), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data_buffer.cljc" });
    const__27 = (Var)RT.var("synchrony.data-buffer", "encode");
    const__31 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "chunk-size"), Symbol.intern(null, "data")) })), RT.keyword(null, "doc"), "Splits a string into chunks of at most chunk-size length and adds a\n  header that allows for the correct decoding of a stream of such\n  sequences. The header counts chunks and allows for an exception to be\n  raised during decoding if a chunk is missing.\n\n  The header has the following form:\n  (c = complete, p = part, l = last)\n  If string is less than chunk size: c + {string}\n  Otherwise: 0p + {string}, 1p + {string}, ..., np + {string}, n+1l + {string}", RT.keyword(null, "line"), Integer.valueOf(37), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data_buffer.cljc" });
    const__32 = (Var)RT.var("synchrony.data-buffer", "decoder");
    const__35 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "assertion")) })), RT.keyword(null, "line"), Integer.valueOf(58), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data_buffer.cljc" });
    const__36 = (Var)RT.var("synchrony.data-buffer", "encoder");
    const__39 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "chunk-size")) })), RT.keyword(null, "line"), Integer.valueOf(65), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/data_buffer.cljc" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("synchrony.data_buffer__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
