package synchrony;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class pubsub__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__12;
  
  public static final Var const__13;
  
  public static final AFn const__16;
  
  public static final Var const__17;
  
  public static final AFn const__20;
  
  public static final Var const__21;
  
  public static final AFn const__24;
  
  public static final Var const__25;
  
  public static final AFn const__28;
  
  public static final Var const__29;
  
  public static final AFn const__32;
  
  public static final Var const__33;
  
  public static final AFn const__36;
  
  public static final Var const__37;
  
  public static final AFn const__40;
  
  public static final Var const__41;
  
  public static final AFn const__44;
  
  public static final Var const__45;
  
  public static final AFn const__48;
  
  public static final Var const__49;
  
  public static final AFn const__52;
  
  public static final Var const__53;
  
  public static final AFn const__55;
  
  public static final Var const__56;
  
  public static final AFn const__59;
  
  public static final Var const__60;
  
  public static final AFn const__63;
  
  public static final Var const__64;
  
  public static final AFn const__67;
  
  public static final Var const__68;
  
  public static final AFn const__71;
  
  public static final Var const__72;
  
  public static final AFn const__75;
  
  public static final Var const__76;
  
  public static final AFn const__79;
  
  public static final Var const__80;
  
  public static final AFn const__83;
  
  public static void load() { LockingTransaction.runInTransaction((Callable)new pubsub.fn__54509());
    const__3.setMeta((IPersistentMap)const__12);
    const__3.bindRoot(new pubsub.create_cluster_connection());
    const__13.setMeta((IPersistentMap)const__16);
    const__13.bindRoot(new pubsub.create_subscription());
    const__17.setMeta((IPersistentMap)const__20);
    const__17.bindRoot(new pubsub.free_subscription());
    const__21.setMeta((IPersistentMap)const__24);
    const__21.bindRoot(new pubsub.run_keepalive_process());
    const__25.setMeta((IPersistentMap)const__28);
    const__25.bindRoot(new pubsub.setup_subscription());
    const__29.setMeta((IPersistentMap)const__32);
    const__29.bindRoot(new pubsub.subscription_key());
    const__33.setMeta((IPersistentMap)const__36);
    const__33.bindRoot(new pubsub.ensure_subscription());
    const__37.setMeta((IPersistentMap)const__40);
    const__37.bindRoot(new pubsub.acquire_subscription());
    const__41.setMeta((IPersistentMap)const__44);
    const__41.bindRoot(new pubsub.release_subscription());
    const__45.setMeta((IPersistentMap)const__48);
    const__45.bindRoot(new pubsub.pubsub());
    const__49.setMeta((IPersistentMap)const__52);
    const__49.bindRoot(new pubsub.chan_from_opts());
    const__53.setMeta((IPersistentMap)const__55);
    const__53.bindRoot(new pubsub.ping_message_QMARK_());
    const__56.setMeta((IPersistentMap)const__59);
    const__56.bindRoot(new pubsub.maybe_comp());
    const__60.setMeta((IPersistentMap)const__63);
    const__60.bindRoot(new pubsub.subscribe());
    const__64.setMeta((IPersistentMap)const__67);
    const__64.bindRoot(new pubsub.unsubscribe());
    const__68.setMeta((IPersistentMap)const__71);
    const__68.bindRoot(new pubsub.publish());
    const__72.setMeta((IPersistentMap)const__75);
    const__72.bindRoot(new pubsub.request());
    const__76.setMeta((IPersistentMap)const__79);
    const__76.bindRoot(new pubsub.reply());
    const__80.setMeta((IPersistentMap)const__83);
    const__80.bindRoot(new pubsub.subscribe_to_requests()); }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "synchrony.pubsub");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("synchrony.pubsub", "create-cluster-connection");
    const__12 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "conn-opts")) })), RT.keyword(null, "line"), Integer.valueOf(14), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/pubsub.clj" });
    const__13 = (Var)RT.var("synchrony.pubsub", "create-subscription");
    const__16 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "key"), Symbol.intern(null, "conn-opts")) })), RT.keyword(null, "line"), Integer.valueOf(24), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/pubsub.clj" });
    const__17 = (Var)RT.var("synchrony.pubsub", "free-subscription");
    const__20 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "subscriptions"), Symbol.intern(null, "subscription")) })), RT.keyword(null, "line"), Integer.valueOf(32), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/pubsub.clj" });
    const__21 = (Var)RT.var("synchrony.pubsub", "run-keepalive-process");
    const__24 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "connection")) })), RT.keyword(null, "line"), Integer.valueOf(38), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/pubsub.clj" });
    const__25 = (Var)RT.var("synchrony.pubsub", "setup-subscription");
    const__28 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "subscriptions"), Symbol.intern(null, "subscription")) })), RT.keyword(null, "line"), Integer.valueOf(45), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/pubsub.clj" });
    const__29 = (Var)RT.var("synchrony.pubsub", "subscription-key");
    const__32 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "jwt"), Symbol.intern(null, "topic")) })), RT.keyword(null, "line"), Integer.valueOf(56), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/pubsub.clj" });
    const__33 = (Var)RT.var("synchrony.pubsub", "ensure-subscription");
    const__36 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "subscriptions"), Symbol.intern(null, "conn-opts")) })), RT.keyword(null, "line"), Integer.valueOf(59), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/pubsub.clj" });
    const__37 = (Var)RT.var("synchrony.pubsub", "acquire-subscription");
    const__40 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "subscriptions"), Symbol.intern(null, "conn-opts")) })), RT.keyword(null, "line"), Integer.valueOf(72), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/pubsub.clj" });
    const__41 = (Var)RT.var("synchrony.pubsub", "release-subscription");
    const__44 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "subscriptions"), Symbol.intern(null, "conn-opts"), Symbol.intern(null, "keepalive-ms")) })), RT.keyword(null, "line"), Integer.valueOf(78), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/pubsub.clj" });
    const__45 = (Var)RT.var("synchrony.pubsub", "pubsub");
    const__48 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "subscriptions"), Symbol.intern(null, "receive-buffer-size"), Symbol.intern(null, "request-timeout-ms"), Symbol.intern(null, "keepalive-ms")), RT.keyword(null, "as"), Symbol.intern(null, "opts") })) })), RT.keyword(null, "line"), Integer.valueOf(89), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/pubsub.clj" });
    const__49 = (Var)RT.var("synchrony.pubsub", "chan-from-opts");
    const__52 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "buf"), Symbol.intern(null, "xf")), RT.keyword(null, "as"), Symbol.intern(null, "opts") })) })), RT.keyword(null, "line"), Integer.valueOf(99), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/pubsub.clj" });
    const__53 = (Var)RT.var("synchrony.pubsub", "ping-message?");
    const__55 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(104), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/pubsub.clj" });
    const__56 = (Var)RT.var("synchrony.pubsub", "maybe-comp");
    const__59 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "maybe-b"), Symbol.intern(null, "a")) })), RT.keyword(null, "line"), Integer.valueOf(106), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/pubsub.clj" });
    const__60 = (Var)RT.var("synchrony.pubsub", "subscribe");
    const__63 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pubsub"), RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "jwt"), Symbol.intern(null, "topic")), RT.keyword(null, "as"), Symbol.intern(null, "conn-opts") })), ((IObj)Tuple.create(Symbol.intern(null, "pubsub"), RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "jwt"), Symbol.intern(null, "topic")), RT.keyword(null, "as"), Symbol.intern(null, "conn-opts") }), RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "buf"), Symbol.intern(null, "xf")), RT.keyword(null, "as"), Symbol.intern(null, "chan-opts") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "pre"), Tuple.create(((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "or"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "nil?"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { RT.keyword(null, "buf"), Symbol.intern(null, "chan-opts") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(114), RT.keyword(null, "column"), Integer.valueOf(21) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(114), RT.keyword(null, "column"), Integer.valueOf(15) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern("async", "unblocking-buffer?"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { RT.keyword(null, "buf"), Symbol.intern(null, "chan-opts") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(115), RT.keyword(null, "column"), Integer.valueOf(41) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(115), RT.keyword(null, "column"), Integer.valueOf(15) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(114), RT.keyword(null, "column"), Integer.valueOf(11) }))) })) })), RT.keyword(null, "line"), Integer.valueOf(109), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/pubsub.clj" });
    const__64 = (Var)RT.var("synchrony.pubsub", "unsubscribe");
    const__67 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pubsub"), RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "jwt"), Symbol.intern(null, "topic")), RT.keyword(null, "as"), Symbol.intern(null, "conn-opts") }), Symbol.intern(null, "ch")) })), RT.keyword(null, "line"), Integer.valueOf(127), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/pubsub.clj" });
    const__68 = (Var)RT.var("synchrony.pubsub", "publish");
    const__71 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pubsub"), RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "jwt"), Symbol.intern(null, "topic")), RT.keyword(null, "as"), Symbol.intern(null, "conn-opts") }), Symbol.intern(null, "message")), Tuple.create(Symbol.intern(null, "pubsub"), RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "jwt"), Symbol.intern(null, "topic")), RT.keyword(null, "as"), Symbol.intern(null, "conn-opts") }), Symbol.intern(null, "message"), Symbol.intern(null, "blocking")) })), RT.keyword(null, "line"), Integer.valueOf(131), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/pubsub.clj" });
    const__72 = (Var)RT.var("synchrony.pubsub", "request");
    const__75 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pubsub"), RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "jwt"), Symbol.intern(null, "topic")), RT.keyword(null, "as"), Symbol.intern(null, "conn-opts") }), Symbol.intern(null, "data")) })), RT.keyword(null, "line"), Integer.valueOf(147), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/pubsub.clj" });
    const__76 = (Var)RT.var("synchrony.pubsub", "reply");
    const__79 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pubsub"), RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "jwt"), Symbol.intern(null, "topic")), RT.keyword(null, "as"), Symbol.intern(null, "conn-opts") }), Symbol.intern(null, "target"), Symbol.intern(null, "data")) })), RT.keyword(null, "line"), Integer.valueOf(162), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/pubsub.clj" });
    const__80 = (Var)RT.var("synchrony.pubsub", "subscribe-to-requests");
    const__83 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "pubsub"), RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "jwt"), Symbol.intern(null, "topic")), RT.keyword(null, "as"), Symbol.intern(null, "conn-opts") })), Tuple.create(Symbol.intern(null, "pubsub"), RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "jwt"), Symbol.intern(null, "topic")), RT.keyword(null, "as"), Symbol.intern(null, "conn-opts") }), Symbol.intern(null, "chan-opts")) })), RT.keyword(null, "line"), Integer.valueOf(165), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/pubsub.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("synchrony.pubsub__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
