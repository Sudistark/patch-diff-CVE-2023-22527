package synchrony.stream.tcp;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class packetize__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__12;
  
  public static final Var const__13;
  
  public static final AFn const__16;
  
  public static final Var const__17;
  
  public static final AFn const__19;
  
  public static final Var const__20;
  
  public static final Var const__21;
  
  public static final Var const__22;
  
  public static final Object const__23;
  
  public static final Var const__24;
  
  public static final AFn const__27;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new packetize.fn__41116());
    const__3.setMeta((IPersistentMap)const__12);
    const__3.bindRoot(new packetize.join_bytes());
    const__13.setMeta((IPersistentMap)const__16);
    const__13.bindRoot(new packetize.stream__GT_packets());
    const__17.setMeta((IPersistentMap)const__19);
    const__17






























      
      .bindRoot(((IFn)const__20.getRawRoot()).invoke(const__13.getRawRoot(), const__21.getRawRoot(), ((IFn)const__22.getRawRoot()).invoke(byte.class, const__23)));
    const__24.setMeta((IPersistentMap)const__27);
    const__24.bindRoot(new packetize.packet__GT_frame());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "synchrony.stream.tcp.packetize");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("synchrony.stream.tcp.packetize", "join-bytes");
    const__12 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "a"), Symbol.intern(null, "b")) })), RT.keyword(null, "line"), Integer.valueOf(5), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/stream/tcp/packetize.clj" });
    const__13 = (Var)RT.var("synchrony.stream.tcp.packetize", "stream->packets");
    const__16 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "buffer"), Symbol.intern(null, "slice")) })), RT.keyword(null, "line"), Integer.valueOf(17), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/stream/tcp/packetize.clj" });
    const__17 = (Var)RT.var("synchrony.stream.tcp.packetize", "stream->packets-xf");
    const__19 = (AFn)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(32), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/stream/tcp/packetize.clj" });
    const__20 = (Var)RT.var("ginga.core", "buffering-transducer");
    const__21 = (Var)RT.var("clojure.core", "identity");
    const__22 = (Var)RT.var("clojure.core", "make-array");
    const__23 = Long.valueOf(0L);
    const__24 = (Var)RT.var("synchrony.stream.tcp.packetize", "packet->frame");
    const__27 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "packet")) })), RT.keyword(null, "line"), Integer.valueOf(35), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/stream/tcp/packetize.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("synchrony.stream.tcp.packetize__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
