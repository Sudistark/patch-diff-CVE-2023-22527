package synchrony.stream.layer;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class ordered__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__13;
  
  public static final Var const__14;
  
  public static final Object const__15;
  
  public static final Object const__16;
  
  public static final Object const__17;
  
  public static final Var const__18;
  
  public static final AFn const__21;
  
  public static final Var const__22;
  
  public static final AFn const__25;
  
  public static final Var const__26;
  
  public static final AFn const__29;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new ordered.fn__65010());
    const__3.setMeta((IPersistentMap)const__13);
    const__3.bindRoot(new ordered.haywire_QMARK_());
    const__18.setMeta((IPersistentMap)const__21);
    const__18.bindRoot(new ordered.wrap_haywire());
    const__22.setMeta((IPersistentMap)const__25);
    const__22.bindRoot(new ordered.install());
    const__26.setMeta((IPersistentMap)const__29);
    const__26.bindRoot(new ordered.uninstall());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "synchrony.stream.layer.ordered");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("synchrony.stream.layer.ordered", "haywire?");
    const__13 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "data")) })), RT.keyword(null, "doc"), "checks to see if message is a haywire message\n \n   (haywire? (marshal/from-wire [39 1 5120000 1048576]))\n   => true", RT.keyword(null, "added"), "0.3", RT.keyword(null, "line"), Integer.valueOf(10), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "synchrony/stream/layer/ordered.clj" });
    const__14 = (Var)RT.var("synchrony.stream.layer.ordered", "unwrap-haywire");
    const__15 = RT.classForName("ginga.async.haywire.WinMsg");
    const__16 = RT.classForName("ginga.async.haywire.CloseMsg");
    const__17 = RT.classForName("ginga.async.haywire.*Msg");
    const__18 = (Var)RT.var("synchrony.stream.layer.ordered", "wrap-haywire");
    const__21 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "layers")), RT.keyword(null, "as"), Symbol.intern(null, "conn") }), Symbol.intern(null, "msg")) })), RT.keyword(null, "doc"), "writes messages to haywire protocol", RT.keyword(null, "added"), "0.3", RT.keyword(null, "line"), Integer.valueOf(57), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "synchrony/stream/layer/ordered.clj" });
    const__22 = (Var)RT.var("synchrony.stream.layer.ordered", "install");
    const__25 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "streams"), Symbol.intern(null, "state"), Symbol.intern(null, "layers")), RT.keyword(null, "as"), Symbol.intern(null, "conn") })) })), RT.keyword(null, "doc"), "installs the haywire protocol\n \n   (repl/reset)\n   \n   ;; 'ordered/install' has to be called before the heartbeat otherwise\n   ;; it loses the window message\n   (def conn (-> (connection/connect)\n                 (ordered/install)  \n                 (heartbeat/install)))\n   \n   ;; the first event it recieves from server is a window message\n   (->> conn :streams deref :ordered stream/take! deref (into {}))\n   => {:type :win, :seq 1, :cnt 256, :size 20000}\n   \n   (repl/stop)", RT.keyword(null, "added"), "0.3", RT.keyword(null, "line"), Integer.valueOf(70), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "synchrony/stream/layer/ordered.clj" });
    const__26 = (Var)RT.var("synchrony.stream.layer.ordered", "uninstall");
    const__29 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "state"), Symbol.intern(null, "streams"), Symbol.intern(null, "layers")), RT.keyword(null, "as"), Symbol.intern(null, "conn") })) })), RT.keyword(null, "doc"), "uninstalls the haywire protocol\n \n   (def conn (-> (connection/connect)\n                (ordered/install)\n                 (ordered/uninstall)))", RT.keyword(null, "added"), "0.3", RT.keyword(null, "line"), Integer.valueOf(102), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "synchrony/stream/layer/ordered.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("synchrony.stream.layer.ordered__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
