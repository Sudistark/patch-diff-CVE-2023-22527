package synchrony.stream.layer;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class heartbeat__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__13;
  
  public static final Var const__14;
  
  public static final AFn const__17;
  
  public static final Var const__18;
  
  public static final AFn const__21;
  
  public static final Var const__22;
  
  public static final AFn const__25;
  
  public static final Var const__26;
  
  public static final AFn const__29;
  
  public static void load() { LockingTransaction.runInTransaction((Callable)new heartbeat.fn__64994());
    const__3.setMeta((IPersistentMap)const__13);
    const__3.bindRoot(new heartbeat.heartbeat_QMARK_());
    const__14.setMeta((IPersistentMap)const__17);
    const__14.bindRoot(new heartbeat.ping_QMARK_());
    const__18.setMeta((IPersistentMap)const__21);
    const__18.bindRoot(new heartbeat.pong_QMARK_());
    const__22.setMeta((IPersistentMap)const__25);
    const__22.bindRoot(new heartbeat.install());
    const__26.setMeta((IPersistentMap)const__29);
    const__26.bindRoot(new heartbeat.uninstall()); }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "synchrony.stream.layer.heartbeat");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("synchrony.stream.layer.heartbeat", "heartbeat?");
    const__13 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "data")) })), RT.keyword(null, "doc"), "checks whether input is a heartbeat (ping or pong) message\n \n   (heartbeat? (PingMsg. :ping 1)) => true", RT.keyword(null, "added"), "0.3", RT.keyword(null, "line"), Integer.valueOf(8), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "synchrony/stream/layer/heartbeat.clj" });
    const__14 = (Var)RT.var("synchrony.stream.layer.heartbeat", "ping?");
    const__17 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "data")) })), RT.keyword(null, "doc"), "checks whether input is a ping message\n \n   (ping? (PingMsg. :ping 3)) => true", RT.keyword(null, "added"), "0.3", RT.keyword(null, "line"), Integer.valueOf(18), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "synchrony/stream/layer/heartbeat.clj" });
    const__18 = (Var)RT.var("synchrony.stream.layer.heartbeat", "pong?");
    const__21 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "data")) })), RT.keyword(null, "doc"), "checks whether input is a pong message\n \n   (pong? (PongMsg. :pong 3)) => true", RT.keyword(null, "added"), "0.3", RT.keyword(null, "line"), Integer.valueOf(27), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "synchrony/stream/layer/heartbeat.clj" });
    const__22 = (Var)RT.var("synchrony.stream.layer.heartbeat", "install");
    const__25 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "streams"), Symbol.intern(null, "state"), Symbol.intern(null, "layers")), RT.keyword(null, "as"), Symbol.intern(null, "conn") })) })), RT.keyword(null, "doc"), "installs the heartbeat to the synchrony connection\n \n   (repl/reset)\n   (heartbeat/install (connection/connect))\n   \n   ;; this will stay open\n   (connection/list-connections)\n   (repl/stop)", RT.keyword(null, "added"), "0.3", RT.keyword(null, "line"), Integer.valueOf(36), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "synchrony/stream/layer/heartbeat.clj" });
    const__26 = (Var)RT.var("synchrony.stream.layer.heartbeat", "uninstall");
    const__29 = (AFn)RT.map(new Object[] { 
          RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "state"), Symbol.intern(null, "layers")), RT.keyword(null, "as"), Symbol.intern(null, "conn") })) })), RT.keyword(null, "doc"), "uninstalls the heartbeat to the synchrony connection\n \n   (repl/reset)\n   (heartbeat/install (connection/connect))\n   (-> (connection/list-connections)\n       (vals)\n       (first)\n       (heartbeat/uninstall))\n   \n   (repl/stop)", RT.keyword(null, "added"), "0.3", RT.keyword(null, "line"), Integer.valueOf(59), RT.keyword(null, "column"), Integer.valueOf(1), 
          RT.keyword(null, "file"), "synchrony/stream/layer/heartbeat.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("synchrony.stream.layer.heartbeat__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
