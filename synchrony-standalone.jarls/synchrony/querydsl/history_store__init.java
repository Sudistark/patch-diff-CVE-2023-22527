package synchrony.querydsl;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class history_store__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__12;
  
  public static final Var const__13;
  
  public static final AFn const__16;
  
  public static final Var const__17;
  
  public static final AFn const__20;
  
  public static final Var const__21;
  
  public static final AFn const__24;
  
  public static final Var const__25;
  
  public static final AFn const__28;
  
  public static final Var const__29;
  
  public static final AFn const__32;
  
  public static void load() {
    LockingTransaction.runInTransaction((Callable)new history_store.fn__44638());
    const__3.setMeta((IPersistentMap)const__12);
    const__3.bindRoot(new history_store.make_part());
    const__13.setMeta((IPersistentMap)const__16);
    const__13.bindRoot(new history_store.select_part_with_subquery());
    const__17.setMeta((IPersistentMap)const__20);
    const__17.bindRoot(new history_store.count_history_part_sequence_range());
    const__21.setMeta((IPersistentMap)const__24);
    const__21.bindRoot(new history_store.part_id_from_event_id());
    const__25.setMeta((IPersistentMap)const__28);
    const__25.bindRoot(new history_store.create_insert());
    const__29.setMeta((IPersistentMap)const__32);
    const__29.bindRoot(new history_store.create_store());
  }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "synchrony.querydsl.history-store");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("synchrony.querydsl.history-store", "make-part");
    const__12 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "deserialize"), Symbol.intern(null, "size"), Symbol.intern(null, "part-id"), Symbol.intern(null, "events")) })), RT.keyword(null, "line"), Integer.valueOf(23), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/querydsl/history_store.clj" });
    const__13 = (Var)RT.var("synchrony.querydsl.history-store", "select-part-with-subquery");
    const__16 = (AFn)RT.map(new Object[] { RT.keyword(null, "private"), Boolean.TRUE, RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "deserialize"), Symbol.intern(null, "size"), Symbol.intern(null, "connection"), Symbol.intern(null, "configuration"), Symbol.intern(null, "path-base"), Symbol.intern(null, "path-builder")) }), Symbol.intern(null, "history-id"), Symbol.intern(null, "subquery")) })), RT.keyword(null, "line"), Integer.valueOf(34), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/querydsl/history_store.clj" });
    const__17 = (Var)RT.var("synchrony.querydsl.history-store", "count-history-part-sequence-range");
    const__20 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "connection"), Symbol.intern(null, "configuration"), Symbol.intern(null, "path-base"), Symbol.intern(null, "path-builder")), RT.keyword(null, "as"), Symbol.intern(null, "opts") }), Symbol.intern(null, "history-id"), Symbol.intern(null, "part-id"), Symbol.intern(null, "ge-sequence"), Symbol.intern(null, "lt-sequence")) })), RT.keyword(null, "line"), Integer.valueOf(57), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/querydsl/history_store.clj" });
    const__21 = (Var)RT.var("synchrony.querydsl.history-store", "part-id-from-event-id");
    const__24 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "connection"), Symbol.intern(null, "configuration"), Symbol.intern(null, "path-base"), Symbol.intern(null, "path-builder")), RT.keyword(null, "as"), Symbol.intern(null, "opts") }), Symbol.intern(null, "history-id"), Symbol.intern(null, "event-id")) })), RT.keyword(null, "line"), Integer.valueOf(71), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/querydsl/history_store.clj" });
    const__25 = (Var)RT.var("synchrony.querydsl.history-store", "create-insert");
    const__28 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { RT.vector(new Object[] { RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "connection"), Symbol.intern(null, "configuration"), Symbol.intern(null, "path-base"), Symbol.intern(null, "path-builder")), RT.keyword(null, "as"), Symbol.intern(null, "opts") }), Symbol.intern(null, "size"), Symbol.intern(null, "serialize"), Symbol.intern(null, "history-id"), Symbol.intern(null, "part-id"), Symbol.intern(null, "sequence"), Symbol.intern(null, "id-event-alist") }) })), RT.keyword(null, "line"), Integer.valueOf(82), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/querydsl/history_store.clj" });
    const__29 = (Var)RT.var("synchrony.querydsl.history-store", "create-store");
    const__32 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "opts")) })), RT.keyword(null, "line"), Integer.valueOf(238), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/querydsl/history_store.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("synchrony.querydsl.history_store__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
