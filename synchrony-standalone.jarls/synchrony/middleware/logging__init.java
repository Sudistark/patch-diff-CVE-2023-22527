package synchrony.middleware;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class logging__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__10;
  
  public static final AFn const__16;
  
  public static final Var const__17;
  
  public static final AFn const__19;
  
  public static final AFn const__20;
  
  public static final Var const__21;
  
  public static final AFn const__23;
  
  public static final AFn const__25;
  
  public static final Var const__26;
  
  public static final AFn const__30;
  
  public static final Var const__31;
  
  public static final AFn const__34;
  
  public static void load() { LockingTransaction.runInTransaction((Callable)new logging.fn__60682());
    const__3.setMeta((IPersistentMap)const__10);
    const__3.bindRoot(const__16);
    const__17.setMeta((IPersistentMap)const__19);
    const__17.bindRoot(const__20);
    const__21.setMeta((IPersistentMap)const__23);
    const__21.bindRoot(const__25);
    const__26.setMeta((IPersistentMap)const__30);
    const__26.bindRoot(new logging.log_request());
    const__31.setMeta((IPersistentMap)const__34);
    const__31.bindRoot(new logging.wrap_request_log()); }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "synchrony.middleware.logging");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("synchrony.middleware.logging", "req-whitelist");
    const__10 = (AFn)RT.map(new Object[] { RT.keyword(null, "const"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(5), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/middleware/logging.clj" });
    const__16 = (AFn)Tuple.create(RT.keyword(null, "remote-addr"), RT.keyword(null, "uri"), RT.keyword(null, "request-method"), RT.keyword(null, "query-string"), RT.keyword(null, "content-length"));
    const__17 = (Var)RT.var("synchrony.middleware.logging", "hdr-whitelist");
    const__19 = (AFn)RT.map(new Object[] { RT.keyword(null, "const"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(7), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/middleware/logging.clj" });
    const__20 = (AFn)Tuple.create("x-b3-traceid", "x-b3-spanid", "x-b3-parentspanid", "x-forwarded-for");
    const__21 = (Var)RT.var("synchrony.middleware.logging", "rsp-whitelist");
    const__23 = (AFn)RT.map(new Object[] { RT.keyword(null, "const"), Boolean.TRUE, RT.keyword(null, "line"), Integer.valueOf(9), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/middleware/logging.clj" });
    const__25 = (AFn)Tuple.create(RT.keyword(null, "status"));
    const__26 = (Var)RT.var("synchrony.middleware.logging", "log-request");
    const__30 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "request"), Symbol.intern(null, "response")) })), RT.keyword(null, "line"), Integer.valueOf(12), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/middleware/logging.clj" });
    const__31 = (Var)RT.var("synchrony.middleware.logging", "wrap-request-log");
    const__34 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "handler")) })), RT.keyword(null, "line"), Integer.valueOf(19), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/middleware/logging.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("synchrony.middleware.logging__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
