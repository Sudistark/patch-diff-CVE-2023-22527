package synchrony.middleware;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.LockingTransaction;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Tuple;
import clojure.lang.Var;
import java.util.Arrays;
import java.util.concurrent.Callable;

public class memoize_response__init {
  public static final Var const__0;
  
  public static final AFn const__1;
  
  public static final AFn const__2;
  
  public static final Var const__3;
  
  public static final AFn const__11;
  
  public static void load() { LockingTransaction.runInTransaction((Callable)new memoize_response.fn__59831());
    const__3.setMeta((IPersistentMap)const__11);
    const__3.bindRoot(new memoize_response.wrap_memoize_response()); }
  
  public static void __init0() {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    const__1 = (AFn)Symbol.intern(null, "synchrony.middleware.memoize-response");
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("synchrony.middleware.memoize-response", "wrap-memoize-response");
    const__11 = (AFn)RT.map(new Object[] { RT.keyword(null, "arglists"), PersistentList.create(Arrays.asList(new Object[] { Tuple.create(Symbol.intern(null, "handler"), Symbol.intern(null, "&"), RT.map(new Object[] { RT.keyword(null, "keys"), Tuple.create(Symbol.intern(null, "cache-key"), Symbol.intern(null, "cacheable?"), Symbol.intern(null, "whitelisted?")), RT.keyword(null, "or"), RT.map(new Object[] { Symbol.intern(null, "cache-key"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "fn*"), Tuple.create(Symbol.intern(null, "p1__59833#")), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "vector"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { RT.keyword(null, "server-name"), Symbol.intern(null, "p1__59833#") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(11), RT.keyword(null, "column"), Integer.valueOf(42) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { RT.keyword(null, "uri"), Symbol.intern(null, "p1__59833#") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(12), RT.keyword(null, "column"), Integer.valueOf(42) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { RT.keyword(null, "query-string"), Symbol.intern(null, "p1__59833#") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(13), RT.keyword(null, "column"), Integer.valueOf(42) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(11), RT.keyword(null, "column"), Integer.valueOf(34) })) })), Symbol.intern(null, "cacheable?"), PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "fn*"), Tuple.create(Symbol.intern(null, "p1__59834#")), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "and"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "<="), Long.valueOf(200L), ((IObj)PersistentList.create(Arrays.asList(new Object[] { RT.keyword(null, "status"), Symbol.intern(null, "p1__59834#") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(14), RT.keyword(null, "column"), Integer.valueOf(48) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(14), RT.keyword(null, "column"), Integer.valueOf(40) })), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "<="), ((IObj)PersistentList.create(Arrays.asList(new Object[] { RT.keyword(null, "status"), Symbol.intern(null, "p1__59834#") }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(15), RT.keyword(null, "column"), Integer.valueOf(43) })), Long.valueOf(300L) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(15), RT.keyword(null, "column"), Integer.valueOf(39) })) }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(14), RT.keyword(null, "column"), Integer.valueOf(35) })) })), Symbol.intern(null, "whitelisted?"), ((IObj)PersistentList.create(Arrays.asList(new Object[] { Symbol.intern(null, "constantly"), Boolean.TRUE }))).withMeta((IPersistentMap)RT.map(new Object[] { RT.keyword(null, "line"), Integer.valueOf(16), RT.keyword(null, "column"), Integer.valueOf(33) })) }) })) })), RT.keyword(null, "line"), Integer.valueOf(7), RT.keyword(null, "column"), Integer.valueOf(1), RT.keyword(null, "file"), "synchrony/middleware/memoize_response.clj" });
  }
  
  static  {
    __init0();
    Compiler.pushNSandLoader(RT.classForName("synchrony.middleware.memoize_response__init").getClassLoader());
    try {
      load();
    } finally {
      Var.popThreadBindings();
    } 
  }
}
