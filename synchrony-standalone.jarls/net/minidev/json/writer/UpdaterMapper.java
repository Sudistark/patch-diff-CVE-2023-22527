package net.minidev.json.writer;

import java.io.IOException;
import java.lang.reflect.Type;
import net.minidev.json.parser.ParseException;

public class UpdaterMapper<T> extends JsonReaderI<T> {
  final T obj;
  
  final JsonReaderI<?> mapper;
  
  public UpdaterMapper(JsonReader base, T obj) {
    super(base);
    if (obj == null)
      throw new NullPointerException("can not update null Object"); 
    this.obj = obj;
    this.mapper = base.getMapper(obj.getClass());
  }
  
  public UpdaterMapper(JsonReader base, T obj, Type type) {
    super(base);
    if (obj == null)
      throw new NullPointerException("can not update null Object"); 
    this.obj = obj;
    this.mapper = base.getMapper(type);
  }
  
  public JsonReaderI<?> startObject(String key) throws ParseException, IOException {
    Object bean = this.mapper.getValue(this.obj, key);
    if (bean == null)
      return this.mapper.startObject(key); 
    return new UpdaterMapper(this.base, bean, this.mapper.getType(key));
  }
  
  public JsonReaderI<?> startArray(String key) throws ParseException, IOException { return this.mapper.startArray(key); }
  
  public void setValue(Object current, String key, Object value) throws ParseException, IOException { this.mapper.setValue(current, key, value); }
  
  public void addValue(Object current, Object value) throws ParseException, IOException { this.mapper.addValue(current, value); }
  
  public Object createObject() {
    if (this.obj != null)
      return this.obj; 
    return this.mapper.createObject();
  }
  
  public Object createArray() {
    if (this.obj != null)
      return this.obj; 
    return this.mapper.createArray();
  }
  
  public T convert(Object current) {
    if (this.obj != null)
      return (T)this.obj; 
    return (T)this.mapper.convert(current);
  }
}
