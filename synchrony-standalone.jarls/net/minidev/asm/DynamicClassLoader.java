package net.minidev.asm;

import java.lang.reflect.Method;

class DynamicClassLoader extends ClassLoader {
  DynamicClassLoader(ClassLoader parent) { super(parent); }
  
  private static final String BEAN_AC = BeansAccess.class.getName();
  
  private static final Class<?>[] DEF_CLASS_SIG = { String.class, byte[].class, int.class, int.class };
  
  public static <T> Class<T> directLoad(Class<? extends T> parent, String clsName, byte[] clsData) {
    DynamicClassLoader loader = new DynamicClassLoader(parent.getClassLoader());
    return loader.defineClass(clsName, clsData);
  }
  
  public static <T> T directInstance(Class<? extends T> parent, String clsName, byte[] clsData) throws InstantiationException, IllegalAccessException {
    Class<T> clzz = directLoad(parent, clsName, clsData);
    return (T)clzz.newInstance();
  }
  
  protected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException {
    if (name.equals(BEAN_AC))
      return BeansAccess.class; 
    return super.loadClass(name, resolve);
  }
  
  Class<?> defineClass(String name, byte[] bytes) throws ClassFormatError {
    try {
      Method method = ClassLoader.class.getDeclaredMethod("defineClass", DEF_CLASS_SIG);
      method.setAccessible(true);
      return (Class)method.invoke(getParent(), new Object[] { name, bytes, Integer.valueOf(0), Integer.valueOf(bytes.length) });
    } catch (Exception exception) {
      return defineClass(name, bytes, 0, bytes.length);
    } 
  }
}
