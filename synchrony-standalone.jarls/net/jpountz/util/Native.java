package net.jpountz.util;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;

public static enum Native {
  private static boolean loaded;
  
  private static String arch() { return System.getProperty("os.arch"); }
  
  private static OS os() {
    osName = System.getProperty("os.name");
    if (osName.contains("Linux"))
      return OS.LINUX; 
    if (osName.contains("Mac"))
      return OS.MAC; 
    if (osName.contains("Windows"))
      return OS.WINDOWS; 
    if (osName.contains("Solaris") || osName.contains("SunOS"))
      return OS.SOLARIS; 
    throw new UnsupportedOperationException("Unsupported operating system: " + osName);
  }
  
  private static String resourceName() {
    os = os();
    return "/" + os.name + "/" + arch() + "/liblz4-java." + os.libExtension;
  }
  
  static  {
    loaded = false;
  }
  
  public static boolean isLoaded() { return loaded; }
  
  public static void load() {
    if (loaded)
      return; 
    resourceName = resourceName();
    InputStream is = Native.class.getResourceAsStream(resourceName);
    if (is == null)
      throw new UnsupportedOperationException("Unsupported OS/arch, cannot find " + resourceName + ". Please try building from source."); 
    try {
      tempLib = File.createTempFile("liblz4-java", "." + (os()).libExtension);
      out = new FileOutputStream(tempLib);
      try {
        buf = new byte[4096];
        while (true) {
          int read = is.read(buf);
          if (read == -1)
            break; 
          out.write(buf, 0, read);
        } 
        try {
          out.close();
          out = null;
        } catch (IOException e) {}
        System.load(tempLib.getAbsolutePath());
        loaded = true;
      } finally {
        try {
          if (out != null)
            out.close(); 
        } catch (IOException e) {}
        if (tempLib != null && tempLib.exists())
          if (!loaded) {
            tempLib.delete();
          } else {
            tempLib.deleteOnExit();
          }  
      } 
    } catch (IOException e) {
      throw new ExceptionInInitializerError("Cannot unpack liblz4-java");
    } 
  }
}
