package net.jpountz.lz4;

import java.nio.ByteBuffer;
import net.jpountz.util.ByteBufferUtils;
import net.jpountz.util.UnsafeUtils;

final class LZ4HCJavaUnsafeCompressor extends LZ4Compressor {
  public static final LZ4Compressor INSTANCE = new LZ4HCJavaUnsafeCompressor();
  
  private final int maxAttempts;
  
  final int compressionLevel;
  
  LZ4HCJavaUnsafeCompressor() { this(9); }
  
  LZ4HCJavaUnsafeCompressor(int compressionLevel) {
    this.maxAttempts = 1 << compressionLevel - 1;
    this.compressionLevel = compressionLevel;
  }
  
  public int compress(byte[] src, int srcOff, int srcLen, byte[] dest, int destOff, int maxDestLen) {
    UnsafeUtils.checkRange(src, srcOff, srcLen);
    UnsafeUtils.checkRange(dest, destOff, maxDestLen);
    int srcEnd = srcOff + srcLen;
    int destEnd = destOff + maxDestLen;
    int mfLimit = srcEnd - 12;
    int matchLimit = srcEnd - 5;
    int sOff = srcOff;
    int dOff = destOff;
    int anchor = sOff++;
    HashTable ht = new HashTable(this, srcOff);
    LZ4Utils.Match match0 = new LZ4Utils.Match();
    LZ4Utils.Match match1 = new LZ4Utils.Match();
    LZ4Utils.Match match2 = new LZ4Utils.Match();
    LZ4Utils.Match match3 = new LZ4Utils.Match();
    label65: while (sOff < mfLimit) {
      if (!ht.insertAndFindBestMatch(src, sOff, matchLimit, match1)) {
        sOff++;
        continue;
      } 
      LZ4Utils.copyTo(match1, match0);
      label63: while (true) {
        assert match1.start >= anchor;
        if (match1.end() >= mfLimit || !ht.insertAndFindWiderMatch(src, match1.end() - 2, match1.start + 1, matchLimit, match1.len, match2)) {
          dOff = LZ4UnsafeUtils.encodeSequence(src, anchor, match1.start, match1.ref, match1.len, dest, dOff, destEnd);
          anchor = sOff = match1.end();
          continue label65;
        } 
        if (match0.start < match1.start && 
          match2.start < match1.start + match0.len)
          LZ4Utils.copyTo(match0, match1); 
        assert match2.start > match1.start;
        if (match2.start - match1.start < 3) {
          LZ4Utils.copyTo(match2, match1);
          continue;
        } 
        while (true) {
          if (match2.start - match1.start < 18) {
            int newMatchLen = match1.len;
            if (newMatchLen > 18)
              newMatchLen = 18; 
            if (match1.start + newMatchLen > match2.end() - 4)
              newMatchLen = match2.start - match1.start + match2.len - 4; 
            int correction = newMatchLen - match2.start - match1.start;
            if (correction > 0)
              match2.fix(correction); 
          } 
          if (match2.start + match2.len >= mfLimit || !ht.insertAndFindWiderMatch(src, match2.end() - 3, match2.start, matchLimit, match2.len, match3)) {
            if (match2.start < match1.end())
              match1.len = match2.start - match1.start; 
            dOff = LZ4UnsafeUtils.encodeSequence(src, anchor, match1.start, match1.ref, match1.len, dest, dOff, destEnd);
            anchor = sOff = match1.end();
            dOff = LZ4UnsafeUtils.encodeSequence(src, anchor, match2.start, match2.ref, match2.len, dest, dOff, destEnd);
            anchor = sOff = match2.end();
            continue label65;
          } 
          if (match3.start < match1.end() + 3) {
            if (match3.start >= match1.end()) {
              if (match2.start < match1.end()) {
                int correction = match1.end() - match2.start;
                match2.fix(correction);
                if (match2.len < 4)
                  LZ4Utils.copyTo(match3, match2); 
              } 
              dOff = LZ4UnsafeUtils.encodeSequence(src, anchor, match1.start, match1.ref, match1.len, dest, dOff, destEnd);
              anchor = sOff = match1.end();
              LZ4Utils.copyTo(match3, match1);
              LZ4Utils.copyTo(match2, match0);
              continue label63;
            } 
            LZ4Utils.copyTo(match3, match2);
            continue;
          } 
          if (match2.start < match1.end())
            if (match2.start - match1.start < 15) {
              if (match1.len > 18)
                match1.len = 18; 
              if (match1.end() > match2.end() - 4)
                match1.len = match2.end() - match1.start - 4; 
              int correction = match1.end() - match2.start;
              match2.fix(correction);
            } else {
              match1.len = match2.start - match1.start;
            }  
          dOff = LZ4UnsafeUtils.encodeSequence(src, anchor, match1.start, match1.ref, match1.len, dest, dOff, destEnd);
          anchor = sOff = match1.end();
          LZ4Utils.copyTo(match2, match1);
          LZ4Utils.copyTo(match3, match2);
        } 
        break;
      } 
    } 
    dOff = LZ4UnsafeUtils.lastLiterals(src, anchor, srcEnd - anchor, dest, dOff, destEnd);
    return dOff - destOff;
  }
  
  public int compress(ByteBuffer src, int srcOff, int srcLen, ByteBuffer dest, int destOff, int maxDestLen) {
    if (src.hasArray() && dest.hasArray())
      return compress(src.array(), srcOff, srcLen, dest.array(), destOff, maxDestLen); 
    src = ByteBufferUtils.inNativeByteOrder(src);
    dest = ByteBufferUtils.inNativeByteOrder(dest);
    ByteBufferUtils.checkRange(src, srcOff, srcLen);
    ByteBufferUtils.checkRange(dest, destOff, maxDestLen);
    int srcEnd = srcOff + srcLen;
    int destEnd = destOff + maxDestLen;
    int mfLimit = srcEnd - 12;
    int matchLimit = srcEnd - 5;
    int sOff = srcOff;
    int dOff = destOff;
    int anchor = sOff++;
    HashTable ht = new HashTable(this, srcOff);
    LZ4Utils.Match match0 = new LZ4Utils.Match();
    LZ4Utils.Match match1 = new LZ4Utils.Match();
    LZ4Utils.Match match2 = new LZ4Utils.Match();
    LZ4Utils.Match match3 = new LZ4Utils.Match();
    label68: while (sOff < mfLimit) {
      if (!ht.insertAndFindBestMatch(src, sOff, matchLimit, match1)) {
        sOff++;
        continue;
      } 
      LZ4Utils.copyTo(match1, match0);
      label66: while (true) {
        assert match1.start >= anchor;
        if (match1.end() >= mfLimit || !ht.insertAndFindWiderMatch(src, match1.end() - 2, match1.start + 1, matchLimit, match1.len, match2)) {
          dOff = LZ4ByteBufferUtils.encodeSequence(src, anchor, match1.start, match1.ref, match1.len, dest, dOff, destEnd);
          anchor = sOff = match1.end();
          continue label68;
        } 
        if (match0.start < match1.start && 
          match2.start < match1.start + match0.len)
          LZ4Utils.copyTo(match0, match1); 
        assert match2.start > match1.start;
        if (match2.start - match1.start < 3) {
          LZ4Utils.copyTo(match2, match1);
          continue;
        } 
        while (true) {
          if (match2.start - match1.start < 18) {
            int newMatchLen = match1.len;
            if (newMatchLen > 18)
              newMatchLen = 18; 
            if (match1.start + newMatchLen > match2.end() - 4)
              newMatchLen = match2.start - match1.start + match2.len - 4; 
            int correction = newMatchLen - match2.start - match1.start;
            if (correction > 0)
              match2.fix(correction); 
          } 
          if (match2.start + match2.len >= mfLimit || !ht.insertAndFindWiderMatch(src, match2.end() - 3, match2.start, matchLimit, match2.len, match3)) {
            if (match2.start < match1.end())
              match1.len = match2.start - match1.start; 
            dOff = LZ4ByteBufferUtils.encodeSequence(src, anchor, match1.start, match1.ref, match1.len, dest, dOff, destEnd);
            anchor = sOff = match1.end();
            dOff = LZ4ByteBufferUtils.encodeSequence(src, anchor, match2.start, match2.ref, match2.len, dest, dOff, destEnd);
            anchor = sOff = match2.end();
            continue label68;
          } 
          if (match3.start < match1.end() + 3) {
            if (match3.start >= match1.end()) {
              if (match2.start < match1.end()) {
                int correction = match1.end() - match2.start;
                match2.fix(correction);
                if (match2.len < 4)
                  LZ4Utils.copyTo(match3, match2); 
              } 
              dOff = LZ4ByteBufferUtils.encodeSequence(src, anchor, match1.start, match1.ref, match1.len, dest, dOff, destEnd);
              anchor = sOff = match1.end();
              LZ4Utils.copyTo(match3, match1);
              LZ4Utils.copyTo(match2, match0);
              continue label66;
            } 
            LZ4Utils.copyTo(match3, match2);
            continue;
          } 
          if (match2.start < match1.end())
            if (match2.start - match1.start < 15) {
              if (match1.len > 18)
                match1.len = 18; 
              if (match1.end() > match2.end() - 4)
                match1.len = match2.end() - match1.start - 4; 
              int correction = match1.end() - match2.start;
              match2.fix(correction);
            } else {
              match1.len = match2.start - match1.start;
            }  
          dOff = LZ4ByteBufferUtils.encodeSequence(src, anchor, match1.start, match1.ref, match1.len, dest, dOff, destEnd);
          anchor = sOff = match1.end();
          LZ4Utils.copyTo(match2, match1);
          LZ4Utils.copyTo(match3, match2);
        } 
        break;
      } 
    } 
    dOff = LZ4ByteBufferUtils.lastLiterals(src, anchor, srcEnd - anchor, dest, dOff, destEnd);
    return dOff - destOff;
  }
}
