package net.jpountz.lz4;

import java.nio.ByteBuffer;
import java.util.Arrays;

public abstract class LZ4Compressor {
  public final int maxCompressedLength(int length) { return LZ4Utils.maxCompressedLength(length); }
  
  public abstract int compress(byte[] paramArrayOfByte1, int paramInt1, int paramInt2, byte[] paramArrayOfByte2, int paramInt3, int paramInt4);
  
  public abstract int compress(ByteBuffer paramByteBuffer1, int paramInt1, int paramInt2, ByteBuffer paramByteBuffer2, int paramInt3, int paramInt4);
  
  public final int compress(byte[] src, int srcOff, int srcLen, byte[] dest, int destOff) { return compress(src, srcOff, srcLen, dest, destOff, dest.length - destOff); }
  
  public final int compress(byte[] src, byte[] dest) { return compress(src, 0, src.length, dest, 0); }
  
  public final byte[] compress(byte[] src, int srcOff, int srcLen) {
    int maxCompressedLength = maxCompressedLength(srcLen);
    byte[] compressed = new byte[maxCompressedLength];
    int compressedLength = compress(src, srcOff, srcLen, compressed, 0);
    return Arrays.copyOf(compressed, compressedLength);
  }
  
  public final byte[] compress(byte[] src) { return compress(src, 0, src.length); }
  
  public final void compress(ByteBuffer src, ByteBuffer dest) {
    int cpLen = compress(src, src.position(), src.remaining(), dest, dest.position(), dest.remaining());
    src.position(src.limit());
    dest.position(dest.position() + cpLen);
  }
  
  public String toString() { return getClass().getSimpleName(); }
}
