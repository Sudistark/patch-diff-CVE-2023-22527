package net.jpountz.lz4;

import java.nio.ByteBuffer;
import java.util.Arrays;

public abstract class LZ4SafeDecompressor implements LZ4UnknownSizeDecompressor {
  public abstract int decompress(byte[] paramArrayOfByte1, int paramInt1, int paramInt2, byte[] paramArrayOfByte2, int paramInt3, int paramInt4);
  
  public abstract int decompress(ByteBuffer paramByteBuffer1, int paramInt1, int paramInt2, ByteBuffer paramByteBuffer2, int paramInt3, int paramInt4);
  
  public final int decompress(byte[] src, int srcOff, int srcLen, byte[] dest, int destOff) { return decompress(src, srcOff, srcLen, dest, destOff, dest.length - destOff); }
  
  public final int decompress(byte[] src, byte[] dest) { return decompress(src, 0, src.length, dest, 0); }
  
  public final byte[] decompress(byte[] src, int srcOff, int srcLen, int maxDestLen) {
    byte[] decompressed = new byte[maxDestLen];
    int decompressedLength = decompress(src, srcOff, srcLen, decompressed, 0, maxDestLen);
    if (decompressedLength != decompressed.length)
      decompressed = Arrays.copyOf(decompressed, decompressedLength); 
    return decompressed;
  }
  
  public final byte[] decompress(byte[] src, int maxDestLen) { return decompress(src, 0, src.length, maxDestLen); }
  
  public final void decompress(ByteBuffer src, ByteBuffer dest) {
    int decompressed = decompress(src, src.position(), src.remaining(), dest, dest.position(), dest.remaining());
    src.position(src.limit());
    dest.position(dest.position() + decompressed);
  }
  
  public String toString() { return getClass().getSimpleName(); }
}
