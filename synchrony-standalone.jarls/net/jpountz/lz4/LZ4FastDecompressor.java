package net.jpountz.lz4;

import java.nio.ByteBuffer;

public abstract class LZ4FastDecompressor implements LZ4Decompressor {
  public abstract int decompress(byte[] paramArrayOfByte1, int paramInt1, byte[] paramArrayOfByte2, int paramInt2, int paramInt3);
  
  public abstract int decompress(ByteBuffer paramByteBuffer1, int paramInt1, ByteBuffer paramByteBuffer2, int paramInt2, int paramInt3);
  
  public final int decompress(byte[] src, byte[] dest, int destLen) { return decompress(src, 0, dest, 0, destLen); }
  
  public final int decompress(byte[] src, byte[] dest) { return decompress(src, dest, dest.length); }
  
  public final byte[] decompress(byte[] src, int srcOff, int destLen) {
    byte[] decompressed = new byte[destLen];
    decompress(src, srcOff, decompressed, 0, destLen);
    return decompressed;
  }
  
  public final byte[] decompress(byte[] src, int destLen) { return decompress(src, 0, destLen); }
  
  public final void decompress(ByteBuffer src, ByteBuffer dest) {
    int read = decompress(src, src.position(), dest, dest.position(), dest.remaining());
    dest.position(dest.limit());
    src.position(src.position() + read);
  }
  
  public String toString() { return getClass().getSimpleName(); }
}
